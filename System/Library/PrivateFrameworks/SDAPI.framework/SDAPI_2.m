void sub_213E5D1CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLateLattice::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(void *)(this + 112) = a2;
  if (*(unsigned char *)(this + 356)) {
    return MiniFst::beginTopFstSyncRecog(this + 240);
  }
  return this;
}

uint64_t FstSearchLateLattice::endTopRecSyncRecog(FstSearchLateLattice *this)
{
  uint64_t v1 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  return v1;
}

uint64_t FstSearchLateLattice::getBestExitScore(FstSearchLateLattice *this)
{
  v17 = 0;
  uint64_t v18 = 0;
  *((_DWORD *)this + 57) = -1;
  unint64_t v1 = *((unsigned int *)this + 38);
  unint64_t v2 = *((unsigned int *)this + 50);
  if (v1 >= v2) {
    goto LABEL_16;
  }
  v4 = 0;
  unsigned int v5 = 0;
  uint64_t v6 = 24 * v1;
  do
  {
    uint64_t v7 = *((void *)this + 24) + v6;
    if (*(_DWORD *)(*((void *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      unsigned int v8 = *(_DWORD *)(v7 + 8);
      if (v8 != -1 && *(_DWORD *)(*((void *)this + 20) + 36 * v8 + 4) == *((_DWORD *)this + 56))
      {
        if (v5 == HIDWORD(v18))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v17, 1, 1);
          unsigned int v5 = v18;
          v4 = v17;
        }
        v4[v5] = v8;
        unsigned int v5 = v18 + 1;
        LODWORD(v18) = v18 + 1;
        unint64_t v2 = *((unsigned int *)this + 50);
      }
    }
    ++v1;
    v6 += 24;
  }
  while (v1 < v2);
  if (v5)
  {
    uint64_t v9 = *((void *)this + 20);
    uint64_t v10 = v5;
    int v11 = 1879048192;
    do
    {
      unsigned int v13 = *v4++;
      unsigned int v12 = v13;
      int v14 = *(_DWORD *)(v9 + 36 * v13 + 16);
      if (v11 > v14)
      {
        *((_DWORD *)this + 57) = *(_DWORD *)(v9 + 36 * v12 + 20);
        int v11 = v14;
      }
      --v10;
    }
    while (v10);
  }
  else
  {
LABEL_16:
    int v11 = 1879048192;
  }
  if (v11 >= 20000) {
    uint64_t v15 = 20000;
  }
  else {
    uint64_t v15 = v11;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v17);
  return v15;
}

void sub_213E5D358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t FstSearchLateLattice::getBestScoreMaybeUpdateFstNode(FstSearchLateLattice *this, Node *a2)
{
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v2 = *((unsigned int *)this + 50);
  if (v2)
  {
    v3 = (int *)*((void *)this + 24);
    __int16 v4 = -1;
    int v5 = 1879048192;
    uint64_t v6 = v3;
    do
    {
      int v8 = *v6;
      v6 += 6;
      int v7 = v8;
      if (v5 > v8)
      {
        __int16 v4 = *((_WORD *)v3 + 6);
        int v5 = v7;
      }
      v3 = v6;
      --v2;
    }
    while (v2);
    uint64_t v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000) {
        uint64_t v9 = 20000;
      }
      else {
        uint64_t v9 = v5;
      }
    }
  }
  else
  {
    uint64_t v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

uint64_t FstSearchLateLattice::seedTheory(FstSearchLateLattice *this, int a2, int a3, int a4, SearchStats *a5)
{
  if (a4 == -2)
  {
    int v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    unsigned int v11 = *((_DWORD *)this + 42);
    if (v11 == *((_DWORD *)this + 43))
    {
      DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)this + 160, 1, 1);
      unsigned int v11 = *((_DWORD *)this + 42);
    }
    uint64_t v12 = *((void *)this + 20) + 36 * v11;
    *(_DWORD *)uint64_t v12 = a4;
    *(_DWORD *)(v12 + 4) = a3;
    *(void *)(v12 + 8) = 0xFFFFFFFFLL;
    *(_DWORD *)(v12 + 16) = a2;
    *(void *)(v12 + 20) = 0xFFFFFFFFLL;
    *(_DWORD *)(v12 + 28) = 0;
    *(_WORD *)(v12 + 32) = -2;
    int v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  int v13 = *(_DWORD *)(*((void *)this + 5) + 144);
  unsigned int v14 = *((_DWORD *)this + 50);
  if (v14 == *((_DWORD *)this + 51))
  {
    DgnArray<CWIDAC>::reallocElts((uint64_t)this + 192, 1, 1);
    unsigned int v14 = *((_DWORD *)this + 50);
  }
  uint64_t v15 = *((void *)this + 24) + 24 * v14;
  *(_DWORD *)uint64_t v15 = a2;
  *(_DWORD *)(v15 + 4) = v13;
  *(_DWORD *)(v15 + 8) = v9;
  *(_WORD *)(v15 + 12) = -2;
  *(void *)(v15 + 16) = 0;
  LODWORD(v15) = *((_DWORD *)this + 50) + 1;
  *((_DWORD *)this + 50) = v15;
  *((_DWORD *)this + 38) = v15;

  return FstSearchLateLatticeHashBackoff::propagateNulls((uint64_t)this, 20000, a3, a5);
}

uint64_t FstSearchLateLattice::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(unsigned int *)(result + 228);
  if (v8 != -1)
  {
    uint64_t v9 = result;
    uint64_t v10 = (unsigned int *)(*(void *)(result + 160) + 36 * v8);
    for (i = v10[5]; i != -1; uint64_t v8 = v16)
    {
      uint64_t v16 = i;
      result = *(void *)(v9 + 40);
      if (*v10 == 16777209)
      {
        int v17 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        result = ArcGraph::lexToCWID((ArcGraph *)result, *v10, a3, (uint64_t)a4, a5, a6, a7, a8);
        int v17 = result;
      }
      uint64_t v18 = *(unsigned int *)(a2 + 8);
      if (v18 == *(_DWORD *)(a2 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        uint64_t v18 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(void *)a2 + 4 * v18) = v17;
      ++*(_DWORD *)(a2 + 8);
      uint64_t v19 = *(unsigned int *)(a6 + 8);
      if (v19 == *(_DWORD *)(a6 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        uint64_t v19 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(void *)a6 + 4 * v19) = v8;
      ++*(_DWORD *)(a6 + 8);
      uint64_t v20 = *(void *)(v9 + 160);
      int v21 = *(_DWORD *)(v20 + 36 * v8 + 4);
      uint64_t v22 = *(unsigned int *)(a3 + 8);
      if (v22 == *(_DWORD *)(a3 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        uint64_t v22 = *(unsigned int *)(a3 + 8);
        uint64_t v20 = *(void *)(v9 + 160);
      }
      *(_DWORD *)(*(void *)a3 + 4 * v22) = v21;
      ++*(_DWORD *)(a3 + 8);
      int v23 = *(_DWORD *)(v20 + 36 * v8 + 16);
      uint64_t v24 = *(unsigned int *)(a5 + 8);
      if (v24 == *(_DWORD *)(a5 + 12))
      {
        result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        uint64_t v24 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(void *)a5 + 4 * v24) = v23;
      ++*(_DWORD *)(a5 + 8);
      uint64_t v10 = (unsigned int *)(*(void *)(v9 + 160) + 36 * v16);
      uint64_t i = v10[5];
    }
    *a4 = *v10;
  }
  return result;
}

void FstSearchLateLattice::checkSearchParametersValidityForArcGraph(FstSearchLateLattice *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *((void *)this + 5);
  if (*(unsigned char *)(v8 + 178))
  {
    int v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(unsigned char *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    }
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    }
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(void *)(**(void **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((void *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if (a2)
      {
        if (!*(unsigned char *)(v8 + 203)) {
          return;
        }
      }
      else if (*(unsigned char *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(unsigned char *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

uint64_t FstSearchLateLattice::makePartialResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    uint64_t v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(void *)a2 + v9))(*(void *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  unsigned int BestTrace = FstSearchLateLatticeHashBackoff::getBestTrace(a1, 0, 0, 1);
  if (BestTrace == -1) {
    return 1879048192;
  }
  unsigned int v15 = BestTrace;
  FstSearchLateLatticeHashBackoff::getHistory(a1, BestTrace, a3, a4, v11, v12, v13, v14);
  memset(v25, 0, sizeof(v25));
  int v26 = 0;
  if (*(_DWORD *)(a3 + 8))
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    int v18 = 0;
    do
    {
      uint64_t v19 = *(void *)a3 + v16;
      int v20 = *(_DWORD *)(v19 + 28);
      WordLatticeLC::WordLatticeLC((uint64_t)v24, v19, v18, *(_DWORD *)(v19 + 24) - v18, v20 - *(_DWORD *)(v19 + 24), (uint64_t)v25);
      uint64_t v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(void *)a2 + 112 * v21), (const WordLatticeLC *)v24);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v24);
      ++v17;
      v16 += 32;
      int v18 = v20;
    }
    while (v17 < *(unsigned int *)(a3 + 8));
  }
  uint64_t v22 = *(void *)(a1 + 160) + 36 * v15;
  return (*(_DWORD *)(v22 + 16) + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_213E5DA4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int64x2_t FstSearchLatticeBackoff::advanceDeltas(FstSearchLatticeBackoff *this, int a2, int a3, SearchStats *a4, int a5)
{
  v123[0] = a2;
  int64x2_t v121 = 0u;
  int64x2_t v122 = 0u;
  SnapTime::recordTime((SnapTime *)&v121, 1, 0, 0, 0);
  *((_DWORD *)this + 58) = a3;
  int v7 = *((_DWORD *)this + 2);
  v99 = (int *)((char *)this + 232);
  unsigned int v8 = *((_DWORD *)this + 50);
  if (v8)
  {
    unsigned int v100 = 0;
    unsigned int v101 = 0;
    unsigned int v9 = 0;
    v98 = (char *)this + 208;
    int v102 = *((_DWORD *)this + 2);
    do
    {
      uint64_t v10 = v9;
      uint64_t v95 = 24 * v9;
      uint64_t v11 = *((void *)this + 24) + v95;
      uint64_t v12 = *(unsigned int *)(v11 + 4);
      if (v8 <= v9 + 1) {
        ++v9;
      }
      else {
        unsigned int v9 = v8;
      }
      unsigned int v96 = v9 - 1;
      uint64_t v13 = (int *)(v11 + 28);
      uint64_t v14 = 1;
      while (v10 + v14 < (unint64_t)v8)
      {
        int v15 = *v13;
        v13 += 6;
        ++v14;
        if (v15 != v12)
        {
          unsigned int v96 = v10 + v14 - 2;
          unsigned int v9 = v10 + v14 - 1;
          break;
        }
      }
      uint64_t v16 = *((void *)this + 5);
      if (*(_DWORD *)(v16 + 160) != v12)
      {
        unsigned int v17 = v96;
        BOOL v18 = *(_DWORD *)(v16 + 140) <= (int)v12 || v10 > v96;
        uint64_t v97 = v12;
        if (!v18)
        {
          uint64_t v19 = 0;
          int v20 = v96 - v10 + 1;
          do
          {
            if (*((_DWORD *)this + 19) + *((_DWORD *)this + 58) >= 5000) {
              int v21 = 5000;
            }
            else {
              int v21 = *((_DWORD *)this + 19) + *((_DWORD *)this + 58);
            }
            int ScoreAllowBackoff_updateNodeInSequence = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(*((void *)this + 24) + v95 + v19 + 12), *(_DWORD *)(*((void *)this + 24) + v95 + v19), v21);
            int v23 = *((_DWORD *)this + 58);
            if (ScoreAllowBackoff_updateNodeInSequence - v7 <= v23)
            {
              int v24 = ScoreAllowBackoff_updateNodeInSequence;
              if (v23 > ScoreAllowBackoff_updateNodeInSequence) {
                int *v99 = ScoreAllowBackoff_updateNodeInSequence;
              }
              uint64_t v25 = *((void *)this + 24) + v95 + v19;
              uint64_t v26 = *(void *)(v25 + 4);
              __int16 v27 = *(_WORD *)(v25 + 12);
              __int16 v28 = *(_WORD *)(v25 + 14);
              uint64_t v29 = *(void *)(v25 + 16);
              uint64_t v30 = *((unsigned int *)this + 54);
              if (v30 == *((_DWORD *)this + 55))
              {
                DgnArray<CWIDAC>::reallocElts((uint64_t)v98, 1, 1);
                LODWORD(v30) = *((_DWORD *)this + 54);
              }
              uint64_t v31 = *((void *)this + 26) + 24 * v30;
              *(_DWORD *)uint64_t v31 = v24;
              *(void *)(v31 + 4) = v26;
              *(_WORD *)(v31 + 12) = v27;
              *(_WORD *)(v31 + 14) = v28;
              *(void *)(v31 + 16) = v29;
              int v32 = *((_DWORD *)this + 54) + 1;
              *((_DWORD *)this + 54) = v32;
              if (!v19)
              {
                unsigned int v33 = v100;
                if (v101 == 2 * *((_DWORD *)this + 4)) {
                  unsigned int v33 = v32;
                }
                unsigned int v100 = v33;
                ++v101;
              }
              uint64_t v12 = v97;
            }
            unsigned int v17 = v96;
            v19 += 24;
            --v20;
          }
          while (v20);
        }
        int v34 = v17 - v10 + 1;
        unsigned int v35 = v12;
        uint64_t v93 = v10;
        unsigned int v94 = v9;
        int v103 = v34;
        do
        {
          uint64_t v36 = *((void *)this + 5);
          uint64_t v37 = *(void *)(v36 + 152);
          unsigned int v38 = *(_DWORD *)(v37 + 4 * v35);
          int v39 = *(_DWORD *)(v36 + 140);
          int v105 = *(_DWORD *)(v37 + 4 * (v35 + 1));
          if (v39 <= v105)
          {
            if (*((unsigned char *)this + 356)) {
              BOOL v58 = v39 <= (int)v12;
            }
            else {
              BOOL v58 = 0;
            }
            if (v58)
            {
              unsigned int v59 = (v38 & 0xFFFFF) <= 0xFFFF3 ? v38 & 0xFFFFF : v38 & 0xFFFFF | 0xF00000;
              if (v59 != 16777210)
              {
                DgnString::DgnString((DgnString *)&v118);
                ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v59, (DgnString *)&v118, v60, v61, v62, v63, v64);
                v70 = &unk_214099300;
                if (v118.i32[2]) {
                  v70 = (void *)v118.i64[0];
                }
                v69 = (unsigned int *)(*((void *)this + 24) + 24 * v10);
                xprintf("Seed from state %d score %d trace %d, %s\n", v65, v66, v67, v68, v12, *v69, v69[2], v70);
                v71 = (int *)(*((void *)this + 24) + 24 * v10);
                MiniFst::seed((uint64_t)this + 240, *v71, v71[5], v71[2], v105);
                DgnString::~DgnString((DgnString *)&v118);
              }
            }
          }
          else
          {
            if (*((_DWORD *)this + 19) + *((_DWORD *)this + 58) >= 5000) {
              int v40 = 5000;
            }
            else {
              int v40 = *((_DWORD *)this + 19) + *((_DWORD *)this + 58);
            }
            uint64_t v41 = 24 * v10;
            int v42 = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), (unsigned __int16)*(_DWORD *)(v37 + 4 * v35), *(_DWORD *)(*((void *)this + 24) + 24 * v10) + ((*(_DWORD *)(v37 + 4 * v35) >> 20) & 0x3FFu), v40);
            if (v10 <= v96)
            {
              uint64_t v43 = 0;
              int v44 = v42 - *(_DWORD *)(*((void *)this + 24) + v41);
              uint64_t v45 = v95;
              unsigned int v104 = v35;
              do
              {
                uint64_t v46 = *((void *)this + 24);
                int v47 = *(_DWORD *)(v46 + v45) + v44;
                int v48 = *((_DWORD *)this + 58);
                if (v47 - v7 <= v48)
                {
                  if (v48 > v47) {
                    int *v99 = v47;
                  }
                  uint64_t v49 = v46 + v45;
                  int v50 = *(_DWORD *)(v49 + 8);
                  __int16 v51 = *(_WORD *)(v49 + 14);
                  int v53 = *(_DWORD *)(v49 + 16);
                  int v52 = *(_DWORD *)(v49 + 20);
                  uint64_t v54 = *((unsigned int *)this + 54);
                  if (v54 == *((_DWORD *)this + 55))
                  {
                    DgnArray<CWIDAC>::reallocElts((uint64_t)v98, 1, 1);
                    LODWORD(v54) = *((_DWORD *)this + 54);
                  }
                  uint64_t v55 = *((void *)this + 26) + 24 * v54;
                  *(_DWORD *)uint64_t v55 = v47;
                  *(_DWORD *)(v55 + 4) = v105;
                  *(_DWORD *)(v55 + 8) = v50;
                  *(_WORD *)(v55 + 12) = v38;
                  *(_WORD *)(v55 + 14) = v51;
                  *(_DWORD *)(v55 + 16) = v53 + ((v38 >> 20) & 0x3FF);
                  *(_DWORD *)(v55 + 20) = v52;
                  int v56 = *((_DWORD *)this + 54) + 1;
                  *((_DWORD *)this + 54) = v56;
                  if (!v43)
                  {
                    unsigned int v57 = v100;
                    if (v101 == 2 * *((_DWORD *)this + 4)) {
                      unsigned int v57 = v56;
                    }
                    unsigned int v100 = v57;
                    ++v101;
                  }
                  int v7 = v102;
                  int v34 = v103;
                  unsigned int v35 = v104;
                }
                ++v43;
                v45 += 24;
              }
              while (v34 != v43);
            }
          }
          v35 += 2;
          uint64_t v10 = v93;
          unsigned int v9 = v94;
          uint64_t v12 = v97;
        }
        while ((v38 & 0x80000000) == 0);
        unsigned int v8 = *((_DWORD *)this + 50);
      }
    }
    while (v9 < v8);
    a3 = *v99;
  }
  else
  {
    unsigned int v100 = 0;
    unsigned int v101 = 0;
  }
  int v120 = a3 + v7;
  if (*((unsigned char *)this + 356)) {
    MiniFst::updateFrame((char *)this + 240, v99, v7, a2);
  }
  int64x2_t v118 = 0u;
  int64x2_t v119 = 0u;
  SnapTime::recordTime((SnapTime *)&v118, 1, 0, 0, 0);
  int64x2_t v118 = vsubq_s64(v118, v121);
  int64x2_t v119 = vsubq_s64(v119, v122);
  v72 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v73 = vaddq_s64(v72[1], v119);
  int64x2_t *v72 = vaddq_s64(*v72, v118);
  v72[1] = v73;
  int64x2_t v116 = 0u;
  int64x2_t v117 = 0u;
  SnapTime::recordTime((SnapTime *)&v116, 1, 0, 0, 0);
  if (v101 > 2 * *((_DWORD *)this + 4)) {
    FstSearchLateLatticeHashBackoff::applyCutoffOnEmitting((uint64_t)this, v100, &v120);
  }
  int64x2_t v114 = 0u;
  int64x2_t v115 = 0u;
  SnapTime::recordTime((SnapTime *)&v114, 1, 0, 0, 0);
  int64x2_t v74 = vsubq_s64(v114, v116);
  v75 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v76 = v75[3];
  int64x2_t v77 = vaddq_s64(v75[2], v74);
  int64x2_t v114 = v74;
  int64x2_t v115 = vsubq_s64(v115, v117);
  int64x2_t v78 = vaddq_s64(v76, v115);
  v75[2] = v77;
  v75[3] = v78;
  int64x2_t v112 = 0u;
  int64x2_t v113 = 0u;
  SnapTime::recordTime((SnapTime *)&v112, 1, 0, 0, 0);
  FstSearchLatticeBackoff::makeViterbiDecisionOnEmitting((uint64_t)this);
  unint64_t v79 = *((unsigned int *)this + 6);
  if (v79)
  {
    unint64_t v80 = *((unsigned int *)this + 50);
    if (v79 < v80) {
      mrec_nth_element<FstSearchLateLatticeHashBackoffcmpTok>(*((void *)this + 24), v79, v80);
    }
  }
  int64x2_t v110 = 0u;
  int64x2_t v111 = 0u;
  SnapTime::recordTime((SnapTime *)&v110, 1, 0, 0, 0);
  int64x2_t v81 = vsubq_s64(v110, v112);
  v82 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v83 = v82[5];
  int64x2_t v84 = vaddq_s64(v82[4], v81);
  int64x2_t v110 = v81;
  int64x2_t v111 = vsubq_s64(v111, v113);
  int64x2_t v85 = vaddq_s64(v83, v111);
  v82[4] = v84;
  v82[5] = v85;
  int64x2_t v108 = 0u;
  int64x2_t v109 = 0u;
  SnapTime::recordTime((SnapTime *)&v108, 1, 0, 0, 0);
  *((_DWORD *)this + 54) = 0;
  uint64_t v86 = *((unsigned int *)this + 50);
  *((_DWORD *)this + 38) = v86;
  if (a4)
  {
    *((void *)a4 + 2) += v86;
    if (*((_DWORD *)a4 + 2) > v86) {
      LODWORD(v86) = *((_DWORD *)a4 + 2);
    }
    *((_DWORD *)a4 + 2) = v86;
  }
  if (*((unsigned char *)this + 356)) {
    FstSearchLatticeBackoff::seedFromMiniFst((uint64_t)this, v123);
  }
  if (a5) {
    FstSearchLatticeBackoff::propagateNulls((uint64_t)this, v120, a2, a4);
  }
  *((_DWORD *)this + 56) = a2;
  int64x2_t v106 = 0u;
  int64x2_t v107 = 0u;
  SnapTime::recordTime((SnapTime *)&v106, 1, 0, 0, 0);
  v87 = (int64x2_t *)*((void *)this + 13);
  int64x2_t result = vaddq_s64(v87[6], vsubq_s64(v106, v108));
  int64x2_t v89 = vaddq_s64(v87[7], vsubq_s64(v107, v109));
  v87[6] = result;
  v87[7] = v89;
  return result;
}

void sub_213E5E164(_Unwind_Exception *exception_object)
{
}

uint64_t FstSearchLatticeBackoff::makeViterbiDecisionOnEmitting(uint64_t this)
{
  uint64_t v1 = this;
  unint64_t v2 = *(unsigned int *)(this + 216);
  if (v2)
  {
    this = (uint64_t)mrec_qsort_r<FstSearchLateLatticeHashBackoffActiveToken>(*(char **)(this + 208), v2, 24);
    int v3 = *(_DWORD *)(v1 + 216);
    *(_DWORD *)(v1 + 200) = 0;
    if (v3)
    {
      unsigned int v4 = 0;
      unint64_t v5 = 0;
      unsigned int v6 = 0;
      do
      {
        uint64_t v7 = *(void *)(v1 + 208);
        if (v5 && (unsigned int v8 = (long long *)(v7 + 24 * v5), *((_DWORD *)v8 + 1) == *((_DWORD *)v8 - 5)))
        {
          if (v4 >= *(_DWORD *)(v1 + 20) + v6) {
            goto LABEL_16;
          }
          unsigned int i = v6;
          if (v6 < v4)
          {
            int v10 = *(_DWORD *)(v7 + 24 * v5 + 20);
            uint64_t v11 = (int *)(*(void *)(v1 + 192) + 24 * v6 + 20);
            for (unsigned int i = v6; v4 != i; ++i)
            {
              int v12 = *v11;
              v11 += 6;
              if (v12 == v10) {
                break;
              }
            }
          }
          if (i != v4) {
            goto LABEL_16;
          }
          int v13 = *(_DWORD *)(v1 + 204);
        }
        else
        {
          unsigned int v8 = (long long *)(v7 + 24 * v5);
          int v13 = *(_DWORD *)(v1 + 204);
          unsigned int v6 = v4;
        }
        if (v4 == v13)
        {
          this = DgnArray<CWIDAC>::reallocElts(v1 + 192, 1, 1);
          unsigned int v4 = *(_DWORD *)(v1 + 200);
        }
        uint64_t v14 = *(void *)(v1 + 192) + 24 * v4;
        long long v15 = *v8;
        *(void *)(v14 + 16) = *((void *)v8 + 2);
        *(_OWORD *)uint64_t v14 = v15;
        unsigned int v4 = *(_DWORD *)(v1 + 200) + 1;
        *(_DWORD *)(v1 + 200) = v4;
LABEL_16:
        ++v5;
      }
      while (v5 < *(unsigned int *)(v1 + 216));
    }
  }
  else
  {
    *(_DWORD *)(this + 200) = 0;
  }
  return this;
}

uint64_t FstSearchLatticeBackoff::seedFromMiniFst(uint64_t this, int *a2)
{
  if (*(unsigned char *)(this + 356))
  {
    uint64_t v2 = this;
    unsigned int v3 = *(_DWORD *)(this + 264);
    if (v3 >= *(_DWORD *)(this + 20)) {
      unsigned int v3 = *(_DWORD *)(this + 20);
    }
    if (v3)
    {
      unint64_t v4 = 0;
      uint64_t v47 = this + 176;
      unint64_t v5 = (void *)(this + 160);
      uint64_t v40 = this + 192;
      do
      {
        unsigned int v6 = (int *)(*(void *)(v2 + 256) + 36 * v4);
        int v7 = *v6;
        int v8 = v6[5];
        int v9 = v6[6];
        int v45 = v6[4];
        int v46 = v6[7];
        unsigned int v10 = v6[2];
        uint64_t v48 = 0;
        uint64_t v49 = 0;
        int v43 = v7;
        int v44 = v8;
        int v42 = v9;
        if ((v10 & 0x80000000) != 0)
        {
          LODWORD(v14) = -2 - v10;
        }
        else
        {
          uint64_t v11 = 0;
          unsigned int v12 = 0;
          do
          {
            if (v12 == HIDWORD(v49))
            {
              DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v48, 1, 1);
              unsigned int v12 = v49;
              uint64_t v11 = v48;
            }
            *(_DWORD *)(v11 + 4 * v12) = v10;
            uint64_t v13 = v49;
            unsigned int v12 = v49 + 1;
            LODWORD(v49) = v49 + 1;
            unsigned int v10 = *(_DWORD *)(*(void *)(v2 + 240) + 36 * v10 + 8);
          }
          while ((v10 & 0x80000000) == 0);
          LODWORD(v14) = -2 - v10;
          if ((v13 & 0x80000000) == 0)
          {
            int v15 = v13 + 1;
            uint64_t v16 = 4 * v13;
            do
            {
              unsigned int v17 = *(_DWORD *)(v48 + v16);
              uint64_t v18 = *(void *)(v2 + 240);
              uint64_t v19 = (int *)(v18 + 36 * v17);
              int v20 = *v19;
              uint64_t v21 = *((void *)v19 + 2);
              unsigned int v22 = *(_DWORD *)(v2 + 184);
              if (v22 == *(_DWORD *)(v2 + 188))
              {
                DgnArray<DgnPrimArray<double>>::reallocElts(v47, 1, 1);
                unsigned int v22 = *(_DWORD *)(v2 + 184);
                uint64_t v18 = *(void *)(v2 + 240);
              }
              uint64_t v23 = *(void *)(v2 + 176) + 16 * v22;
              *(_DWORD *)(v2 + 184) = v22 + 1;
              *(_DWORD *)uint64_t v23 = v20;
              *(void *)(v23 + 4) = v21;
              *(_DWORD *)(v23 + 12) = v14;
              uint64_t v24 = *(void *)(v18 + 36 * v17 + 28);
              uint64_t v25 = *(unsigned int *)(v2 + 168);
              if (v25 == *(_DWORD *)(v2 + 172))
              {
                DgnArray<DgnPrimArray<double>>::reallocElts(v2 + 160, 1, 1);
                uint64_t v25 = *(unsigned int *)(v2 + 168);
              }
              uint64_t v26 = *(void *)(v2 + 160);
              uint64_t v27 = v26 + 16 * v25;
              *(void *)uint64_t v27 = v24;
              *(_DWORD *)(v27 + 8) = v22;
              *(_DWORD *)(v27 + 12) = 0;
              uint64_t v14 = *(unsigned int *)(v2 + 168);
              *(_DWORD *)(v2 + 168) = v14 + 1;
              *(_DWORD *)(v26 + 16 * v14 + 12) = 1;
              --v15;
              v16 -= 4;
            }
            while (v15 > 0);
          }
        }
        unsigned int v28 = *(_DWORD *)(v2 + 184);
        if (v28 == *(_DWORD *)(v2 + 188))
        {
          DgnArray<DgnPrimArray<double>>::reallocElts(v47, 1, 1);
          unsigned int v28 = *(_DWORD *)(v2 + 184);
        }
        uint64_t v29 = *(void *)(v2 + 176);
        *(_DWORD *)(v2 + 184) = v28 + 1;
        uint64_t v30 = (_DWORD *)(v29 + 16 * v28);
        *uint64_t v30 = v43;
        v30[1] = v45;
        v30[2] = v44;
        v30[3] = v14;
        if (v46 == 16777213)
        {
          int v46 = 16777209;
          if (*(_DWORD *)(*v5 + 16 * v14) == 16777209)
          {
            unsigned int v28 = *(_DWORD *)(*v5 + 16 * v14 + 8);
            int v46 = 16777209;
          }
        }
        int v31 = *a2;
        uint64_t v32 = *(unsigned int *)(v2 + 168);
        if (v32 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<DgnPrimArray<double>>::reallocElts(v2 + 160, 1, 1);
          uint64_t v32 = *(unsigned int *)(v2 + 168);
        }
        uint64_t v33 = *(void *)(v2 + 160);
        int v34 = (int *)(v33 + 16 * v32);
        *int v34 = v46;
        v34[1] = v31;
        v34[2] = v28;
        v34[3] = 0;
        uint64_t v35 = *(unsigned int *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v35 + 1;
        *(_DWORD *)(v33 + 16 * v35 + 12) = 1;
        uint64_t v36 = *(unsigned int *)(v2 + 200);
        if (v36 == *(_DWORD *)(v2 + 204))
        {
          DgnArray<CWIDAC>::reallocElts(v40, 1, 1);
          LODWORD(v36) = *(_DWORD *)(v2 + 200);
        }
        uint64_t v37 = *(void *)(v2 + 192) + 24 * v36;
        *(_DWORD *)uint64_t v37 = v43;
        *(_DWORD *)(v37 + 4) = v42;
        *(_DWORD *)(v37 + 8) = v35;
        *(_WORD *)(v37 + 12) = -2;
        *(_DWORD *)(v37 + 16) = v45;
        *(_DWORD *)(v37 + 20) = v44;
        ++*(_DWORD *)(v2 + 200);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v48);
        ++v4;
        LODWORD(v38) = *(_DWORD *)(v2 + 264);
        unsigned int v39 = *(_DWORD *)(v2 + 20);
        if (v38 >= v39) {
          unint64_t v38 = v39;
        }
        else {
          unint64_t v38 = v38;
        }
      }
      while (v4 < v38);
    }
  }
  return this;
}

void sub_213E5E620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLatticeBackoff::propagateNulls(uint64_t this, int a2, int a3, SearchStats *a4)
{
  int v4 = *(_DWORD *)(this + 168);
  int64x2_t v81 = (uint64_t *)(this + 192);
  LODWORD(v5) = *(_DWORD *)(this + 200);
  uint64_t v76 = this;
  if (v5)
  {
    int v6 = a2;
    int v64 = *(_DWORD *)(this + 168);
    uint64_t v65 = a4;
    unsigned int v7 = 0;
    v75 = (void *)(this + 160);
    uint64_t v71 = this + 176;
    do
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(unsigned int *)(*v81 + 24 * v7 + 4);
      unsigned int v69 = v7;
      if (v5 <= v7 + 1) {
        unsigned int v10 = v7 + 1;
      }
      else {
        unsigned int v10 = v5;
      }
      while (v10 - 1 != v7)
      {
        if (*(_DWORD *)(*v81 + 24 * ++v7 + 4) != v9) {
          goto LABEL_10;
        }
      }
      unsigned int v7 = v10;
LABEL_10:
      uint64_t v11 = *(void *)(this + 40);
      if (*(_DWORD *)(v11 + 160) != v9
        && (*(_DWORD *)(v11 + 140) <= (int)v9 || (*(_DWORD *)(*(void *)(v11 + 152) + 4 * v9) & 0x40000000) != 0))
      {
        uint64_t v66 = 24 * v8;
        unsigned int v68 = v7;
        unsigned int v80 = v7 - v69;
        int v67 = v9;
        unsigned int v12 = v9;
        do
        {
          uint64_t v13 = *(void *)(this + 40);
          uint64_t v14 = *(void *)(v13 + 152);
          unsigned int v73 = v12;
          unsigned int v77 = *(_DWORD *)(v14 + 4 * v12);
          int v15 = *(_DWORD *)(v13 + 140);
          int v79 = *(_DWORD *)(v14 + 4 * (v12 + 1));
          if (v15 <= v79)
          {
            int v16 = (v77 & 0xFFFFF) <= 0xFFFF3 ? v77 & 0xFFFFF : v77 & 0xFFFFF | 0xF00000;
            BOOL v17 = v16 != 16777210 && v15 <= v67;
            if (!v17 && v68 > v69)
            {
              uint64_t v19 = 0;
              int v20 = (v77 >> 20) & 0x3FF;
              int v74 = v16 + 1;
              uint64_t v21 = v66;
              int v78 = v16;
              do
              {
                uint64_t v22 = *v81;
                int v23 = *(_DWORD *)(*v81 + v21) + v20;
                if (v23 > v6) {
                  break;
                }
                int v24 = *(_DWORD *)(v22 + v21 + 8);
                __int16 v25 = *(_WORD *)(v22 + v21 + 12);
                __int16 v26 = *(_WORD *)(v22 + v21 + 14);
                int v27 = *(_DWORD *)(v22 + v21 + 20);
                int v28 = *(_DWORD *)(v22 + v21 + 16) + v20;
                if (v16 == 16777210)
                {
                  uint64_t v37 = *(unsigned int *)(this + 200);
                  if (v37 == *(_DWORD *)(this + 204))
                  {
                    __int16 v38 = *(_WORD *)(v22 + v21 + 14);
                    __int16 v39 = *(_WORD *)(v22 + v21 + 12);
                    DgnArray<CWIDAC>::reallocElts((uint64_t)v81, 1, 1);
                    __int16 v25 = v39;
                    __int16 v26 = v38;
                    int v20 = (v77 >> 20) & 0x3FF;
                    int v16 = v78;
                    this = v76;
                    LODWORD(v37) = *(_DWORD *)(v76 + 200);
                    uint64_t v22 = *(void *)(v76 + 192);
                  }
                  uint64_t v40 = v22 + 24 * v37;
                  *(_DWORD *)uint64_t v40 = v23;
                  *(_DWORD *)(v40 + 4) = v79;
                  *(_DWORD *)(v40 + 8) = v24;
                  *(_WORD *)(v40 + 12) = v25;
                  *(_WORD *)(v40 + 14) = v26;
                  *(_DWORD *)(v40 + 16) = v28;
                  *(_DWORD *)(v40 + 20) = v27;
                  ++*(_DWORD *)(this + 200);
                }
                else
                {
                  if (v16 == 16777214) {
                    int v29 = *(_DWORD *)(v22 + v21 + 16) + v20;
                  }
                  else {
                    int v29 = 0;
                  }
                  if (v16 == 16777214) {
                    int v30 = 0;
                  }
                  else {
                    int v30 = *(_DWORD *)(v22 + v21 + 16) + v20;
                  }
                  unsigned int v31 = *(_DWORD *)(this + 184);
                  if (v31 == *(_DWORD *)(this + 188))
                  {
                    __int16 v32 = *(_WORD *)(v22 + v21 + 14);
                    __int16 v33 = *(_WORD *)(v22 + v21 + 12);
                    DgnArray<DgnPrimArray<double>>::reallocElts(v71, 1, 1);
                    __int16 v25 = v33;
                    __int16 v26 = v32;
                    int v20 = (v77 >> 20) & 0x3FF;
                    int v16 = v78;
                    this = v76;
                    unsigned int v31 = *(_DWORD *)(v76 + 184);
                  }
                  int v34 = v74 + 2 * v27;
                  uint64_t v35 = (_DWORD *)(*(void *)(this + 176) + 16 * v31);
                  *(_DWORD *)(this + 184) = v31 + 1;
                  *uint64_t v35 = v23 - v29;
                  v35[1] = v30;
                  v35[2] = v34;
                  v35[3] = v24;
                  unsigned int v36 = *(_DWORD *)(this + 168);
                  if (v19)
                  {
                    int v6 = a2;
                  }
                  else
                  {
                    if (v36 == *(_DWORD *)(this + 172))
                    {
                      __int16 v41 = v26;
                      __int16 v42 = v25;
                      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v75, 1, 1);
                      __int16 v25 = v42;
                      __int16 v26 = v41;
                      int v20 = (v77 >> 20) & 0x3FF;
                      int v16 = v78;
                      this = v76;
                      unsigned int v36 = *(_DWORD *)(v76 + 168);
                    }
                    int v43 = (int *)(*(void *)(this + 160) + 16 * v36);
                    *int v43 = v16;
                    v43[1] = a3;
                    v43[2] = v31;
                    v43[3] = 0;
                    int v44 = *(_DWORD *)(this + 168);
                    *(_DWORD *)(this + 168) = v44 + 1;
                    uint64_t v45 = *(unsigned int *)(this + 200);
                    int v6 = a2;
                    if (v45 == *(_DWORD *)(this + 204))
                    {
                      __int16 v46 = v26;
                      __int16 v47 = v25;
                      DgnArray<CWIDAC>::reallocElts((uint64_t)v81, 1, 1);
                      __int16 v25 = v47;
                      __int16 v26 = v46;
                      int v20 = (v77 >> 20) & 0x3FF;
                      int v16 = v78;
                      this = v76;
                      LODWORD(v45) = *(_DWORD *)(v76 + 200);
                    }
                    uint64_t v48 = *(void *)(this + 192) + 24 * v45;
                    *(_DWORD *)uint64_t v48 = v23;
                    *(_DWORD *)(v48 + 4) = v79;
                    *(_DWORD *)(v48 + 8) = v44;
                    *(_WORD *)(v48 + 12) = v25;
                    *(_WORD *)(v48 + 14) = v26;
                    *(_DWORD *)(v48 + 16) = v28;
                    *(_DWORD *)(v48 + 20) = v34;
                    ++*(_DWORD *)(this + 200);
                    unsigned int v36 = *(_DWORD *)(this + 168);
                  }
                  uint64_t v49 = *v75 + 16 * (v36 - 1);
                  ++*(_DWORD *)(v49 + 12);
                }
                ++v19;
                v21 += 24;
              }
              while (v80 != v19);
            }
          }
          unsigned int v12 = v73 + 2;
        }
        while ((v77 & 0x80000000) == 0);
        LODWORD(v5) = *(_DWORD *)(this + 200);
        unsigned int v7 = v68;
      }
    }
    while (v7 < v5);
    uint64_t v50 = *(unsigned int *)(this + 152);
    if (v5 > v50)
    {
      mrec_qsort_r<FstSearchLateLatticeHashBackoffActiveToken>((char *)(*(void *)(this + 192) + 24 * v50), (v5 - v50), 24);
      this = v76;
      uint64_t v50 = *(unsigned int *)(v76 + 152);
      LODWORD(v5) = *(_DWORD *)(v76 + 200);
    }
    if (v50 < v5)
    {
      unint64_t v51 = v50;
      uint64_t v52 = v50;
      do
      {
        uint64_t v53 = *v81;
        uint64_t v54 = *v81 + 24 * v51;
        uint64_t v55 = v50;
        if (*(_DWORD *)(v54 + 4) != *(_DWORD *)(*v81 + 24 * (v51 - 1) + 4)) {
          goto LABEL_64;
        }
        if ((v50 - v52) < *(_DWORD *)(this + 20))
        {
          int v56 = v52;
          if (v50 > v52)
          {
            unsigned int v57 = (int *)(v53 + 24 * v52 + 20);
            int v56 = v52;
            while (1)
            {
              int v58 = *v57;
              v57 += 6;
              if (v58 == *(_DWORD *)(v53 + 24 * v51 + 20)) {
                break;
              }
              if (v50 == ++v56)
              {
                uint64_t v55 = v52;
                goto LABEL_64;
              }
            }
          }
          uint64_t v55 = v52;
          if (v56 == v50)
          {
LABEL_64:
            long long v59 = *(_OWORD *)v54;
            uint64_t v60 = v53 + 24 * v50;
            *(void *)(v60 + 16) = *(void *)(v54 + 16);
            *(_OWORD *)uint64_t v60 = v59;
            uint64_t v50 = (v50 + 1);
            uint64_t v52 = v55;
          }
        }
        ++v51;
        unint64_t v5 = *(unsigned int *)(this + 200);
      }
      while (v51 < v5);
    }
    a4 = v65;
    int v4 = v64;
    if (v65) {
      goto LABEL_67;
    }
  }
  else
  {
    LODWORD(v50) = *(_DWORD *)(this + 152);
    if (a4) {
LABEL_67:
    }
      *((_DWORD *)a4 + 1) += *(_DWORD *)(this + 168) - v4;
  }
  unsigned int v61 = *(_DWORD *)(this + 204);
  if (v50 > v61)
  {
    DgnArray<CWIDAC>::reallocElts((uint64_t)v81, v50 - v61, 0);
    this = v76;
    LODWORD(v5) = *(_DWORD *)(v76 + 200);
  }
  if (v5 < v50)
  {
    unint64_t v62 = v50 - (unint64_t)v5;
    uint64_t v63 = (void *)(*v81 + 24 * v5 + 16);
    do
    {
      *(v63 - 2) = 0xFFFFFFFF00000000;
      *((_DWORD *)v63 - 2) = -1;
      *((_WORD *)v63 - 2) = -2;
      *uint64_t v63 = 0;
      v63 += 3;
      --v62;
    }
    while (v62);
  }
  *(_DWORD *)(this + 200) = v50;
  return this;
}

uint64_t FstSearchLatticeBackoff::collectTraces(FstSearchLatticeBackoff *this)
{
  unint64_t v2 = *((unsigned int *)this + 42);
  int v47 = 0;
  __int16 v46 = 0;
  if (v2)
  {
    unsigned int v3 = MemChunkAlloc(4 * v2, 0);
    unint64_t v4 = 0;
    __int16 v46 = v3;
    int v47 = v2;
    do
      *((_DWORD *)v3 + v4++) = 0;
    while (v4 < v2);
  }
  else
  {
    unsigned int v3 = 0;
  }
  unint64_t v5 = *((unsigned int *)this + 50);
  if (v5)
  {
    unint64_t v6 = 0;
    unsigned int v7 = (unsigned int *)(*((void *)this + 24) + 8);
    do
    {
      unsigned int v9 = *v7;
      v7 += 6;
      uint64_t v8 = v9;
      if (v9 != -1)
      {
        *((_DWORD *)v3 + v8) = 1;
        unint64_t v5 = *((unsigned int *)this + 50);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  LODWORD(v10) = *((_DWORD *)this + 42);
  if (!v10) {
    goto LABEL_50;
  }
  char v11 = 0;
  unsigned int v12 = (uint64_t *)((char *)this + 160);
  uint64_t v13 = (uint64_t *)((char *)this + 176);
  do
  {
    uint64_t v10 = (v10 - 1);
    if (v11)
    {
      char v11 = 1;
    }
    else if (*(_DWORD *)(*v12 + 16 * v10) == 16777213)
    {
      char v11 = 1;
      *((_DWORD *)v3 + v10) = 1;
    }
    else
    {
      char v11 = 0;
    }
    if (*((_DWORD *)v3 + v10))
    {
      uint64_t v14 = *v12 + 16 * v10;
      int v15 = *(_DWORD *)(v14 + 12);
      if (v15 >= 1)
      {
        unsigned int v16 = *(_DWORD *)(v14 + 8);
        int v17 = v15 + v16;
        uint64_t v18 = *v13;
        do
        {
          uint64_t v19 = *(unsigned int *)(v18 + 16 * v16 + 12);
          if (v19 != -1) {
            *((_DWORD *)v3 + v19) = 1;
          }
          ++v16;
        }
        while ((int)v16 < v17);
      }
    }
  }
  while (v10);
  unsigned int v20 = *((_DWORD *)this + 42);
  if (v20)
  {
    unint64_t v21 = 0;
    unsigned int v22 = 0;
    unsigned int v23 = 0;
    do
    {
      if (*((_DWORD *)v3 + v21))
      {
        uint64_t v24 = *v12;
        if (v21 != v22)
        {
          *(_OWORD *)(v24 + 16 * v22) = *(_OWORD *)(v24 + 16 * v21);
          uint64_t v24 = *v12;
        }
        *(_DWORD *)(v24 + 16 * v22 + 8) = v23;
        uint64_t v25 = v24 + 16 * v21;
        uint64_t v26 = *(unsigned int *)(v25 + 8);
        uint64_t v27 = (*(_DWORD *)(v25 + 12) + v26);
        if (v26 < v27)
        {
          uint64_t v28 = *v13;
          uint64_t v29 = 16 * v26;
          do
          {
            if (v26 != v23)
            {
              *(_OWORD *)(v28 + 16 * v23) = *(_OWORD *)(v28 + v29);
              uint64_t v28 = *v13;
            }
            uint64_t v30 = v28 + 16 * v23;
            unsigned int v33 = *(_DWORD *)(v30 + 12);
            unsigned int v31 = (_DWORD *)(v30 + 12);
            uint64_t v32 = v33;
            if (v33 != -1) {
              *unsigned int v31 = *((_DWORD *)v3 + v32);
            }
            ++v23;
            ++v26;
            v29 += 16;
          }
          while (v27 != v26);
        }
        *((_DWORD *)v3 + v21) = v22++;
        unsigned int v20 = *((_DWORD *)this + 42);
      }
      ++v21;
    }
    while (v21 < v20);
    unsigned int v34 = *((_DWORD *)this + 43);
    if (v22 > v34)
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 160, v22 - v34, 0);
      unsigned int v20 = *((_DWORD *)this + 42);
    }
    if (v20 < v22)
    {
      unint64_t v35 = v22 - (unint64_t)v20;
      unsigned int v36 = (_OWORD *)(*v12 + 16 * v20);
      do
      {
        *v36++ = xmmword_2140992B0;
        --v35;
      }
      while (v35);
    }
    *((_DWORD *)this + 42) = v22;
    unsigned int v37 = *((_DWORD *)this + 47);
    if (v23 > v37) {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 176, v23 - v37, 0);
    }
    uint64_t v38 = *((unsigned int *)this + 46);
    if (v38 < v23)
    {
      uint64_t v39 = v23 - v38;
      uint64_t v40 = (_OWORD *)(*v13 + 16 * v38);
      do
      {
        *v40++ = xmmword_2140992A0;
        --v39;
      }
      while (v39);
    }
  }
  else
  {
LABEL_50:
    unsigned int v23 = 0;
    *((_DWORD *)this + 42) = 0;
  }
  *((_DWORD *)this + 46) = v23;
  uint64_t v41 = *((unsigned int *)this + 50);
  if (v41)
  {
    __int16 v42 = v46;
    int v43 = (_DWORD *)(*((void *)this + 24) + 8);
    do
    {
      uint64_t v44 = *v43;
      if (v44 != -1) {
        *int v43 = *((_DWORD *)v42 + v44);
      }
      v43 += 6;
      --v41;
    }
    while (v41);
  }
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v46);
}

void sub_213E5EEAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int64x2_t FstSearchLatticeBackoff::vite(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  FstSearchLatticeBackoff::advanceDeltas((FstSearchLatticeBackoff *)this, a2, a3, a4, a5);
  int64x2_t v13 = 0u;
  int64x2_t v14 = 0u;
  SnapTime::recordTime((SnapTime *)&v13, 1, 0, 0, 0);
  if (a2 >= 1)
  {
    unsigned int v7 = *((_DWORD *)this + 18);
    if (v7)
    {
      if (!(a2 % v7)) {
        FstSearchLatticeBackoff::collectTraces((FstSearchLatticeBackoff *)this);
      }
    }
  }
  int64x2_t v11 = 0u;
  int64x2_t v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  uint64_t v8 = this[13];
  int64x2_t result = vaddq_s64(v8[14], vsubq_s64(v11, v13));
  int64x2_t v10 = vaddq_s64(v8[15], vsubq_s64(v12, v14));
  v8[14] = result;
  v8[15] = v10;
  return result;
}

_DWORD *FstSearchLatticeBackoff::reset(_DWORD *this)
{
  this[42] = 0;
  this[46] = 0;
  this[50] = 0;
  return this;
}

double FstSearchLatticeBackoff::doFrame(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  if (a3 >= 20000) {
    a3 = 20000;
  }
  *(void *)&double result = FstSearchLatticeBackoff::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearchLatticeBackoff::beginTopRecPassSyncRecog(FstSearchLatticeBackoff *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 240, a3, *((PelScoreCache **)this + 4));
    uint64_t result = ArcGraph::findBackoffState(*((void *)this + 5));
    *((_DWORD *)this + 88) = result;
    *((unsigned char *)this + 356) = 1;
  }
  return result;
}

uint64_t FstSearchLatticeBackoff::endTopRecPassSyncRecog(FstSearchLatticeBackoff *this)
{
  int64x2_t v10 = 0u;
  int64x2_t v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  int64x2_t v8 = 0u;
  int64x2_t v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  int64x2_t v2 = vsubq_s64(v8, v10);
  unsigned int v3 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v4 = v3[13];
  int64x2_t v5 = vaddq_s64(v3[12], v2);
  int64x2_t v8 = v2;
  int64x2_t v9 = vsubq_s64(v9, v11);
  int64x2_t v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + 58) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

void FstSearchLatticeBackoff::printSize(FstSearchLatticeBackoff *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v116);
  if (v117) {
    unsigned int v16 = v116;
  }
  else {
    unsigned int v16 = &unk_214099300;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_214099300, a3, &unk_214099300, v16);
  DgnString::~DgnString((DgnString *)&v116);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_214099300);
  uint64_t v21 = (a3 + 1);
  uint64_t v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v116);
  if (v117) {
    uint64_t v27 = v116;
  }
  else {
    uint64_t v27 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v116);
  if (v117) {
    uint64_t v32 = v116;
  }
  else {
    uint64_t v32 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v116);
  if (v117) {
    unsigned int v37 = v116;
  }
  else {
    unsigned int v37 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v37, 4, 4, 0);
  uint64_t v111 = a2;
  int64x2_t v112 = a6;
  uint64_t v113 = a3;
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v116);
  if (v117) {
    __int16 v42 = v116;
  }
  else {
    __int16 v42 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v42, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  uint64_t v43 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v43 = 16;
  }
  uint64_t v44 = *((unsigned int *)this + 42);
  uint64_t v45 = 16 * v44;
  if ((int)v44 <= 0) {
    uint64_t v45 = 0;
  }
  uint64_t v46 = v45 + v43;
  uint64_t v47 = v45 + v43 + 16 * (*((_DWORD *)this + 43) - v44);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v116);
  if (v117) {
    uint64_t v52 = v116;
  }
  else {
    uint64_t v52 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v52, v47, v46, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v47;
  *a5 += v46;
  uint64_t v53 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v53 = 16;
  }
  uint64_t v54 = *((unsigned int *)this + 46);
  uint64_t v55 = 16 * v54;
  if ((int)v54 <= 0) {
    uint64_t v55 = 0;
  }
  uint64_t v56 = v55 + v53;
  uint64_t v57 = v55 + v53 + 16 * (*((_DWORD *)this + 47) - v54);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v116);
  if (v117) {
    unint64_t v62 = v116;
  }
  else {
    unint64_t v62 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v62, v57, v56, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v57;
  *a5 += v56;
  uint64_t v63 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v63 = 16;
  }
  int v64 = *((_DWORD *)this + 50);
  uint64_t v65 = 22 * v64;
  if (v64 <= 0) {
    uint64_t v65 = 0;
  }
  uint64_t v66 = v65 + v63;
  uint64_t v67 = v65 + v63 + 22 * (*((_DWORD *)this + 51) - v64);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v116);
  if (v117) {
    v72 = v116;
  }
  else {
    v72 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, v21, &unk_214099300, v22, v22, v72, v67, v66, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v67;
  *a5 += v66;
  uint64_t v73 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v73 = 16;
  }
  int v74 = *((_DWORD *)this + 54);
  uint64_t v75 = 22 * v74;
  if (v74 <= 0) {
    uint64_t v75 = 0;
  }
  uint64_t v76 = v75 + v73;
  uint64_t v77 = v75 + v73 + 22 * (*((_DWORD *)this + 55) - v74);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v116);
  if (v117) {
    v82 = v116;
  }
  else {
    v82 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, v21, &unk_214099300, v22, v22, v82, v77, v76, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v77;
  *a5 += v76;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v116);
  if (v117) {
    v87 = v116;
  }
  else {
    v87 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v83, v84, v85, v86, v21, &unk_214099300, v22, v22, v87, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v116);
  if (v117) {
    v92 = v116;
  }
  else {
    v92 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, v21, &unk_214099300, v22, v22, v92, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v116);
  if (v117) {
    uint64_t v97 = v116;
  }
  else {
    uint64_t v97 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v93, v94, v95, v96, v21, &unk_214099300, v22, v22, v97, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  uint64_t v98 = sizeObject((uint64_t)this + 240, 0);
  uint64_t v99 = sizeObject((uint64_t)this + 240, 1);
  uint64_t v100 = sizeObject((uint64_t)this + 240, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v116);
  if (v117) {
    int v105 = v116;
  }
  else {
    int v105 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v101, v102, v103, v104, v21, &unk_214099300, v22, v22, v105, v98, v99, v100);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v98;
  *a5 += v99;
  *v112 += v100;
  unint64_t v114 = 0;
  unint64_t v115 = 0;
  SearchItf::printSize(this, v111, v21, &v115, &v114, &v114);
  *a4 += v115;
  *a5 += v114;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v116);
  if (v117) {
    int64x2_t v110 = v116;
  }
  else {
    int64x2_t v110 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v106, v107, v108, v109, v113, &unk_214099300, (35 - v113), (35 - v113), v110, *a4, *a5, *v112);
  DgnString::~DgnString((DgnString *)&v116);
}

void sub_213E5F7C8(_Unwind_Exception *a1)
{
  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t FstSearchLatticeBackoff::getBestTrace(uint64_t a1, void *a2, void *a3, int a4)
{
  if (a4) {
    unint64_t v4 = 0;
  }
  else {
    unint64_t v4 = *(unsigned int *)(a1 + 152);
  }
  unint64_t v5 = *(unsigned int *)(a1 + 200);
  if (v4 >= v5) {
    goto LABEL_21;
  }
  uint64_t v6 = 24 * v4;
  int v7 = 1879048192;
  uint64_t v8 = 0xFFFFFFFFLL;
  do
  {
    uint64_t v9 = *(void *)(a1 + 192);
    if (!a4 || (uint64_t v10 = *(unsigned int *)(v9 + v6 + 8), v10 == -1))
    {
      if (*(_DWORD *)(*(void *)(a1 + 40) + 160) != *(_DWORD *)(v9 + v6 + 4)) {
        goto LABEL_19;
      }
      uint64_t v10 = *(unsigned int *)(v9 + v6 + 8);
    }
    if (a2) {
      *(unsigned char *)(*a2 + v10) = 1;
    }
    if (a3) {
      *(unsigned char *)(*a3 + v10) = 1;
    }
    int v11 = *(_DWORD *)(*(void *)(a1 + 176) + 16 * *(unsigned int *)(*(void *)(a1 + 160) + 16 * v10 + 8))
        + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(*(void *)(a1 + 160) + 16 * v10 + 4));
    if (v7 > v11) {
      uint64_t v8 = v10;
    }
    if (v7 >= v11) {
      int v7 = *(_DWORD *)(*(void *)(a1 + 176) + 16 * *(unsigned int *)(*(void *)(a1 + 160) + 16 * v10 + 8))
    }
         + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(*(void *)(a1 + 160) + 16 * v10 + 4));
    unint64_t v5 = *(unsigned int *)(a1 + 200);
LABEL_19:
    ++v4;
    v6 += 24;
  }
  while (v4 < v5);
  if (v8 == 0xFFFFFFFFLL)
  {
LABEL_21:
    uint64_t v12 = *(unsigned int *)(a1 + 168);
    uint64_t v8 = 0xFFFFFFFFLL;
    while (v12)
    {
      --v12;
      if ((a4 & 1) != 0 || *(_DWORD *)(*(void *)(a1 + 160) + 16 * v12) == 16777213)
      {
        if (a2) {
          *(unsigned char *)(*a2 + v12) = 1;
        }
        uint64_t v8 = v12;
        if (a3) {
          *(unsigned char *)(*a3 + v12) = 1;
        }
        return v8;
      }
    }
  }
  return v8;
}

BOOL FstSearchLatticeBackoff::findBestPath(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8 = *(unsigned int *)(a1 + 168);
  if (v8) {
    BOOL v9 = *(_DWORD *)(a3 + 8) == 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    *(void *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v8;
  }
  if (v8) {
    BOOL v10 = *(_DWORD *)(a2 + 8) == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    *(void *)a2 = MemChunkAlloc(v8, 0);
    *(_DWORD *)(a2 + 8) = v8;
LABEL_14:
    uint64_t v11 = 0;
    do
    {
      *(unsigned char *)(*(void *)a2 + v11) = 0;
      *(unsigned char *)(*(void *)a3 + v11++) = 0;
    }
    while (v8 != v11);
    goto LABEL_16;
  }
  if (v8) {
    goto LABEL_14;
  }
LABEL_16:
  unsigned int BestTrace = FstSearchLatticeBackoff::getBestTrace(a1, (void *)a2, (void *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1) {
    return 0;
  }
  uint64_t v13 = *(void *)(a1 + 160) + 16 * BestTrace;
  LODWORD(v13) = *(_DWORD *)(*(void *)(a1 + 176) + 16 * *(unsigned int *)(v13 + 8))
               + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v13 + 4));
  *a4 = v13;
  return v13 != 1879048192;
}

unint64_t FstSearchLatticeBackoff::createLatticeNodes(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7)
{
  unint64_t v8 = a2;
  uint64_t v9 = a1;
  uint64_t v10 = *(unsigned int *)(a1 + 168);
  if (v10) {
    BOOL v11 = *((_DWORD *)a2 + 2) == 0;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    *a2 = MemChunkAlloc(4 * v10, 0);
    *((_DWORD *)v8 + 2) = v10;
  }
  unint64_t result = Lattice<WordLatticeLC>::createNode(a4);
  int v13 = result;
  unsigned int v14 = *(_DWORD *)(a3 + 8);
  if (v14 == *(_DWORD *)(a3 + 12))
  {
    unint64_t result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
    unsigned int v14 = *(_DWORD *)(a3 + 8);
  }
  *(_DWORD *)(*(void *)a3 + 4 * v14) = v13;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v15 = *(unsigned int *)(v9 + 168);
  uint64_t v17 = a6;
  unsigned int v16 = a7;
  if (v15)
  {
    unint64_t result = 0xFFFFFFFFLL;
    uint64_t v49 = v8;
    uint64_t v50 = a3;
    uint64_t v52 = v9;
    do
    {
      --v15;
      uint64_t v18 = *v8;
      *((_DWORD *)*v8 + v15) = -1;
      if (*(unsigned char *)(*v17 + v15))
      {
        uint64_t v19 = v15;
        uint64_t v20 = *(void *)(v9 + 160);
        uint64_t v21 = *(unsigned int *)(*(void *)(v9 + 88) + 4 * *(unsigned int *)(v20 + 16 * v15 + 4));
        if (*(unsigned char *)(*v16 + v15))
        {
          if (*(unsigned char *)(*v17 + v15) != 1 || result == -1)
          {
            unsigned int v23 = result;
            uint64_t v24 = v15;
            int Node = Lattice<WordLatticeLC>::createNode(a4);
            *((_DWORD *)*v8 + v19) = *(_DWORD *)(a3 + 8);
            uint64_t v26 = *(unsigned int *)(a3 + 8);
            if (v26 == *(_DWORD *)(a3 + 12))
            {
              DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
              uint64_t v26 = *(unsigned int *)(a3 + 8);
            }
            *(_DWORD *)(*(void *)a3 + 4 * v26) = Node;
            unsigned int v27 = *(_DWORD *)(a3 + 8);
            *(_DWORD *)(a3 + 8) = v27 + 1;
            uint64_t v17 = a6;
            unsigned int v16 = a7;
            if (*(unsigned char *)(*a6 + v19) == 1) {
              unint64_t result = v27;
            }
            else {
              unint64_t result = v23;
            }
            uint64_t v20 = *(void *)(v9 + 160);
            uint64_t v15 = v24;
          }
          else
          {
            *((_DWORD *)v18 + v15) = result;
          }
        }
        uint64_t v28 = (unsigned int *)(v20 + 16 * v19);
        if ((int)v28[3] >= 1)
        {
          unsigned int v51 = result;
          uint64_t v29 = *v28;
          unsigned int v30 = v28[2];
          do
          {
            uint64_t v31 = *(void *)(v9 + 176);
            uint64_t v32 = v30;
            uint64_t v33 = (_DWORD *)(v31 + 16 * v30);
            uint64_t v34 = v33[3];
            if ((v33[3] & 0x80000000) != 0)
            {
              *v33 += v21;
            }
            else
            {
              if (v29 == 16777209)
              {
                uint64_t v35 = *a5 + 16 * v34;
                unsigned int v37 = (_DWORD *)(v35 + 8);
                uint64_t v36 = *(unsigned int *)(v35 + 8);
                uint64_t v38 = *(void *)(v9 + 176);
                if (v36 == *(_DWORD *)(v35 + 12))
                {
                  uint64_t v39 = v19;
                  uint64_t v40 = v21;
                  uint64_t v41 = v29;
                  uint64_t v42 = v15;
                  DgnPrimArray<unsigned int>::reallocElts(v35, 1, 1);
                  uint64_t v29 = v41;
                  uint64_t v21 = v40;
                  uint64_t v19 = v39;
                  uint64_t v9 = v52;
                  uint64_t v17 = a6;
                  uint64_t v15 = v42;
                  unsigned int v16 = a7;
                  uint64_t v36 = *v37;
                  uint64_t v20 = *(void *)(v52 + 160);
                  uint64_t v38 = *(void *)(v52 + 176);
                }
                *(_DWORD *)(*(void *)v35 + 4 * v36) = v15;
                ++*v37;
                uint64_t v34 = v33[3];
              }
              else
              {
                *(unsigned char *)(*v16 + v34) = 1;
                uint64_t v38 = v31;
              }
              uint64_t v43 = v20 + 16 * v34;
              int v44 = *(_DWORD *)(*(void *)(v9 + 88) + 4 * *(unsigned int *)(v43 + 4));
              uint64_t v45 = (int *)(v38 + 16 * *(unsigned int *)(v43 + 8));
              int v46 = v21 + *v33 - v44;
              int v47 = *v45;
              LODWORD(v45) = v45[1];
              *uint64_t v33 = v46 - v47;
              *(_DWORD *)(v31 + 16 * v32 + 4) -= v45;
              *(unsigned char *)(*v17 + v34) = 2;
              uint64_t v20 = *(void *)(v9 + 160);
            }
            unsigned int v30 = v32 + 1;
          }
          while ((int)v32 + 1 < *(_DWORD *)(v20 + 16 * v19 + 12) + *(_DWORD *)(v20 + 16 * v19 + 8));
          unint64_t v8 = v49;
          a3 = v50;
          unint64_t result = v51;
        }
      }
    }
    while (v15);
  }
  return result;
}

uint64_t FstSearchLatticeBackoff::buildWordLattice(uint64_t a1, uint64_t *a2, void *a3, void *a4, char a5)
{
  uint64_t v29 = 0;
  unsigned int v30 = 0;
  int v31 = 0;
  uint64_t v28 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v27, *(unsigned int *)(a1 + 168));
  unint64_t v8 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v8, 0, 128);
  v8[4] = (uint64_t)a2;
  FstSearchLatticeBackoff::createLatticeNodes(a1, &v30, (uint64_t)&v28, (uint64_t)a2, v27, a3, a4);
  uint64_t v23 = (uint64_t)v8;
  uint64_t v24 = *(unsigned int *)(a1 + 168);
  if (v24)
  {
    uint64_t v10 = 0;
    int v11 = v29;
    do
    {
      if (*(unsigned char *)(*a3 + v10))
      {
        uint64_t v12 = *(void *)(a1 + 160);
        if (*(_DWORD *)(v12 + 16 * v10) != 16777209)
        {
          uint64_t v13 = v12 + 16 * v10;
          if (*(int *)(v13 + 12) >= 1)
          {
            int v14 = *(_DWORD *)(v13 + 8);
            do
            {
              uint64_t v15 = *(void *)(a1 + 176) + 16 * v14;
              uint64_t v16 = *(unsigned int *)(v15 + 12);
              if (v16 == -1) {
                unsigned int v17 = 0;
              }
              else {
                unsigned int v17 = v11 - *((_DWORD *)v30 + v16);
              }
              uint64_t v18 = *(unsigned int *)(v28 + 4 * v17);
              if (*(unsigned char *)(*a4 + v10)) {
                FstSearchLatticeBackoff::createLatticeLink(a1, v10, (int *)v15, 0xFFFFFFFFLL, v18, (const WordLatticeLC *)*(unsigned int *)(v28 + 4 * (v11 - *((_DWORD *)v30 + v10))), a2, v9, a5);
              }
              uint64_t v19 = v27[0];
              if (*(_DWORD *)(v27[0] + 16 * v10 + 8))
              {
                unint64_t v20 = 0;
                do
                {
                  uint64_t v21 = *(unsigned int *)(*(void *)(v19 + 16 * v10) + 4 * v20);
                  FstSearchLatticeBackoff::createLatticeLink(a1, v10, (int *)v15, v21, v18, (const WordLatticeLC *)*(unsigned int *)(v28 + 4 * (v11 - *((_DWORD *)v30 + v21))), a2, v9, a5);
                  ++v20;
                  uint64_t v19 = v27[0];
                }
                while (v20 < *(unsigned int *)(v27[0] + 16 * v10 + 8));
              }
              ++v14;
            }
            while (v14 < *(_DWORD *)(*(void *)(a1 + 160) + 16 * v10 + 12)
                        + *(_DWORD *)(*(void *)(a1 + 160) + 16 * v10 + 8));
          }
        }
      }
      ++v10;
    }
    while (v10 != v24);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>(v23);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v27);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v28);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v30);
}

void sub_213E5FF80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearchLatticeBackoff::createLatticeLink(uint64_t a1, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, const WordLatticeLC *a6, uint64_t *a7, uint64_t a8, char a9)
{
  unsigned int v11 = a5;
  unsigned int v12 = a4;
  uint64_t v16 = *(void *)(a1 + 160);
  if ((a4 & 0x80000000) != 0 || (v17 = v16 + 16 * a4, int v18 = *(_DWORD *)(v17 + 12), v18 < 1))
  {
    uint64_t v22 = 0;
  }
  else
  {
    unsigned int v19 = *(_DWORD *)(v17 + 8);
    int v20 = v18 + v19;
    do
    {
      uint64_t v21 = *(void *)(a1 + 176);
      if (*(_DWORD *)(v21 + 16 * v19 + 12) == a2) {
        uint64_t v22 = (_DWORD *)(v21 + 16 * v19);
      }
      else {
        uint64_t v22 = 0;
      }
      ++v19;
    }
    while ((int)v19 < v20 && !v22);
  }
  ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *(_DWORD *)(v16 + 16 * a2), (uint64_t)a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8, (uint64_t)v46);
  int v23 = a3[1];
  if (v22)
  {
    v23 += v22[1];
    int v24 = *v22 + *a3;
  }
  else
  {
    int v24 = *a3;
  }
  if (v46[0] >> 25 == 126)
  {
    int v25 = 0;
    int v26 = v23;
  }
  else
  {
    int v25 = *(_DWORD *)(a1 + 136);
    int v26 = v23 - v25;
  }
  int v27 = v24 - v23;
  if ((v12 & 0x80000000) != 0)
  {
    int v28 = 0;
  }
  else
  {
    int v28 = *(_DWORD *)(a1 + 140);
    v26 -= v28;
  }
  int v40 = v26;
  uint64_t v41 = 0;
  int v42 = v25;
  int v43 = v27;
  int v44 = 0;
  int v45 = v28;
  uint64_t v29 = a3[3];
  uint64_t v30 = *(void *)(a1 + 160);
  if (v29 == -1)
  {
    int v32 = 0;
    if (a9) {
      goto LABEL_26;
    }
  }
  else
  {
    int v31 = *(_DWORD *)(v30 + 16 * v29 + 4);
    if (a9)
    {
      if (v31 >= 1) {
        --v31;
      }
      int v32 = (v31 >> 1) + 1;
LABEL_26:
      int v33 = *(_DWORD *)(v30 + 16 * a2 + 4);
      if (v33 >= 1) {
        --v33;
      }
      int v34 = v33 >> 1;
      int v35 = v34 - v32 + 1;
      if ((v12 & 0x80000000) == 0)
      {
        int v36 = *(_DWORD *)(v30 + 16 * v12 + 4);
        if (v36 >= 1) {
          --v36;
        }
        int v37 = v36 >> 1;
        goto LABEL_35;
      }
LABEL_36:
      int v38 = 0;
      goto LABEL_37;
    }
    int v32 = v31 + 1;
  }
  int v34 = *(_DWORD *)(v30 + 16 * a2 + 4);
  int v35 = v34 - v32 + 1;
  if ((v12 & 0x80000000) != 0) {
    goto LABEL_36;
  }
  int v37 = *(_DWORD *)(v30 + 16 * v12 + 4);
LABEL_35:
  int v38 = v37 - v34;
LABEL_37:
  WordLatticeLC::WordLatticeLC((uint64_t)v39, (uint64_t)v46, v32, v35, v38, (uint64_t)&v40);
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v11, a6, (WordLatticeLC *)v39);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v39);
}

void sub_213E601B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLatticeBackoff::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(void *)(this + 112) = a2;
  if (*(unsigned char *)(this + 356)) {
    return MiniFst::beginTopFstSyncRecog(this + 240);
  }
  return this;
}

uint64_t FstSearchLatticeBackoff::endTopRecSyncRecog(FstSearchLatticeBackoff *this)
{
  uint64_t v1 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  return v1;
}

uint64_t FstSearchLatticeBackoff::getBestExitScore(FstSearchLatticeBackoff *this)
{
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  *((_DWORD *)this + 57) = -1;
  unint64_t v1 = *((unsigned int *)this + 38);
  unint64_t v2 = *((unsigned int *)this + 50);
  if (v1 >= v2) {
    goto LABEL_19;
  }
  uint64_t v4 = 0;
  unsigned int v5 = 0;
  uint64_t v6 = 24 * v1;
  do
  {
    uint64_t v7 = *((void *)this + 24) + v6;
    if (*(_DWORD *)(*((void *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      uint64_t v8 = *(unsigned int *)(v7 + 8);
      if (v8 != -1 && *(_DWORD *)(*((void *)this + 20) + 16 * v8 + 4) == *((_DWORD *)this + 56))
      {
        if (v5 == HIDWORD(v23))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v22, 1, 1);
          unsigned int v5 = v23;
          uint64_t v4 = v22;
        }
        *(_DWORD *)(v4 + 4 * v5) = v8;
        unsigned int v5 = v23 + 1;
        LODWORD(v23) = v23 + 1;
        unint64_t v2 = *((unsigned int *)this + 50);
      }
    }
    ++v1;
    v6 += 24;
  }
  while (v1 < v2);
  if (v5)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *((void *)this + 20);
    uint64_t v11 = v5;
    int v12 = 1879048192;
    do
    {
      uint64_t v13 = v10 + 16 * *(unsigned int *)(v4 + 4 * v9);
      int v14 = *(_DWORD *)(v13 + 12);
      if (v14 >= 1)
      {
        unsigned int v15 = *(_DWORD *)(v13 + 8);
        int v16 = v14 + v15;
        uint64_t v17 = *((void *)this + 22);
        do
        {
          uint64_t v18 = v15;
          int v19 = *(_DWORD *)(v17 + 16 * v15);
          if (v12 > v19)
          {
            *((_DWORD *)this + 57) = *(_DWORD *)(v17 + 16 * v18 + 12);
            int v12 = v19;
          }
          unsigned int v15 = v18 + 1;
        }
        while ((int)v18 + 1 < v16);
      }
      ++v9;
    }
    while (v9 != v11);
  }
  else
  {
LABEL_19:
    int v12 = 1879048192;
  }
  if (v12 >= 20000) {
    uint64_t v20 = 20000;
  }
  else {
    uint64_t v20 = v12;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v22);
  return v20;
}

void sub_213E60368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t FstSearchLatticeBackoff::getBestScoreMaybeUpdateFstNode(FstSearchLatticeBackoff *this, Node *a2)
{
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v2 = *((unsigned int *)this + 50);
  if (v2)
  {
    unsigned int v3 = (int *)*((void *)this + 24);
    __int16 v4 = -1;
    int v5 = 1879048192;
    uint64_t v6 = v3;
    do
    {
      int v8 = *v6;
      v6 += 6;
      int v7 = v8;
      if (v5 > v8)
      {
        __int16 v4 = *((_WORD *)v3 + 6);
        int v5 = v7;
      }
      unsigned int v3 = v6;
      --v2;
    }
    while (v2);
    uint64_t v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000) {
        uint64_t v9 = 20000;
      }
      else {
        uint64_t v9 = v5;
      }
    }
  }
  else
  {
    uint64_t v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

uint64_t FstSearchLatticeBackoff::seedTheory(FstSearchLatticeBackoff *this, int a2, int a3, int a4, SearchStats *a5)
{
  if (a4 == -2)
  {
    int v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    unsigned int v11 = *((_DWORD *)this + 46);
    if (v11 == *((_DWORD *)this + 47))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 176, 1, 1);
      unsigned int v11 = *((_DWORD *)this + 46);
    }
    int v12 = (_DWORD *)(*((void *)this + 22) + 16 * v11);
    v12[2] = 0;
    v12[3] = -1;
    v12[1] = 0;
    *((_DWORD *)this + 46) = v11 + 1;
    *int v12 = a2;
    unsigned int v13 = *((_DWORD *)this + 42);
    if (v13 == *((_DWORD *)this + 43))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 160, 1, 1);
      unsigned int v13 = *((_DWORD *)this + 42);
    }
    int v14 = (_DWORD *)(*((void *)this + 20) + 16 * v13);
    *int v14 = a4;
    v14[1] = a3;
    v14[2] = v11;
    v14[3] = 1;
    int v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  int v15 = *(_DWORD *)(*((void *)this + 5) + 144);
  unsigned int v16 = *((_DWORD *)this + 50);
  if (v16 == *((_DWORD *)this + 51))
  {
    DgnArray<CWIDAC>::reallocElts((uint64_t)this + 192, 1, 1);
    unsigned int v16 = *((_DWORD *)this + 50);
  }
  uint64_t v17 = *((void *)this + 24) + 24 * v16;
  *(_DWORD *)uint64_t v17 = a2;
  *(_DWORD *)(v17 + 4) = v15;
  *(_DWORD *)(v17 + 8) = v9;
  *(_WORD *)(v17 + 12) = -2;
  *(void *)(v17 + 16) = 0;
  LODWORD(v17) = *((_DWORD *)this + 50) + 1;
  *((_DWORD *)this + 50) = v17;
  *((_DWORD *)this + 38) = v17;

  return FstSearchLatticeBackoff::propagateNulls((uint64_t)this, 20000, a3, a5);
}

uint64_t FstSearchLatticeBackoff::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(unsigned int *)(result + 228);
  if (v8 != -1)
  {
    uint64_t v10 = (void *)result;
    unsigned int v11 = (unsigned int *)(*(void *)(result + 160) + 16 * v8);
    for (i = *(unsigned int *)(*(void *)(result + 176) + 16 * v11[2] + 12); i != -1; uint64_t v8 = v17)
    {
      uint64_t v17 = i;
      unint64_t result = v10[5];
      if (*v11 == 16777209)
      {
        int v18 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        unint64_t result = ArcGraph::lexToCWID((ArcGraph *)result, *v11, a3, (uint64_t)a4, a5, a6, a7, a8);
        int v18 = result;
      }
      uint64_t v19 = *(unsigned int *)(a2 + 8);
      if (v19 == *(_DWORD *)(a2 + 12))
      {
        unint64_t result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        uint64_t v19 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(void *)a2 + 4 * v19) = v18;
      ++*(_DWORD *)(a2 + 8);
      uint64_t v20 = *(unsigned int *)(a6 + 8);
      if (v20 == *(_DWORD *)(a6 + 12))
      {
        unint64_t result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        uint64_t v20 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(void *)a6 + 4 * v20) = v8;
      ++*(_DWORD *)(a6 + 8);
      uint64_t v21 = v10[20];
      int v22 = *(_DWORD *)(v21 + 16 * v8 + 4);
      uint64_t v23 = *(unsigned int *)(a3 + 8);
      if (v23 == *(_DWORD *)(a3 + 12))
      {
        unint64_t result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        uint64_t v23 = *(unsigned int *)(a3 + 8);
        uint64_t v21 = v10[20];
      }
      *(_DWORD *)(*(void *)a3 + 4 * v23) = v22;
      ++*(_DWORD *)(a3 + 8);
      int v24 = *(_DWORD *)(v10[22] + 16 * *(unsigned int *)(v21 + 16 * v8 + 8));
      uint64_t v25 = *(unsigned int *)(a5 + 8);
      if (v25 == *(_DWORD *)(a5 + 12))
      {
        unint64_t result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        uint64_t v25 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(void *)a5 + 4 * v25) = v24;
      ++*(_DWORD *)(a5 + 8);
      unsigned int v11 = (unsigned int *)(v10[20] + 16 * v17);
      uint64_t i = *(unsigned int *)(v10[22] + 16 * v11[2] + 12);
    }
    *a4 = *v11;
  }
  return result;
}

void FstSearchLatticeBackoff::checkSearchParametersValidityForArcGraph(FstSearchLatticeBackoff *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *((void *)this + 5);
  if (*(unsigned char *)(v8 + 178))
  {
    int v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(unsigned char *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    }
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    }
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(void *)(**(void **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((void *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if (a2)
      {
        if (!*(unsigned char *)(v8 + 203)) {
          return;
        }
      }
      else if (*(unsigned char *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(unsigned char *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

void FstSearchLatticeBackoff::getHistory(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 == -1)
  {
    *(_DWORD *)(a3 + 8) = 0;
  }
  else
  {
    int v9 = a4;
    LODWORD(v11) = 0;
    uint64_t v12 = a2;
    uint64_t v13 = a2;
    do
    {
      int v14 = (_DWORD *)(*(void *)(a1 + 160) + 16 * v13);
      if (*v14 == 16777209) {
        uint64_t v11 = v11;
      }
      else {
        uint64_t v11 = (v11 + 1);
      }
      uint64_t v13 = *(unsigned int *)(*(void *)(a1 + 176) + 16 * v14[2] + 12);
    }
    while (v13 != -1);
    unsigned int v15 = *(_DWORD *)(a3 + 12);
    if (v11 > v15) {
      DgnArray<PrefilterResultFrame>::reallocElts(a3, v11 - v15, 0);
    }
    uint64_t v16 = *(unsigned int *)(a3 + 8);
    if (v16 < v11)
    {
      uint64_t v17 = v11 - v16;
      uint64_t v18 = *(void *)a3 + 32 * v16;
      do
      {
        *(void *)uint64_t v18 = 0x3FFFFAFFFFFFLL;
        *(_OWORD *)(v18 + 8) = xmmword_2140866D0;
        *(void *)(v18 + 24) = 0x1F0000001FLL;
        v18 += 32;
        --v17;
      }
      while (v17);
    }
    *(_DWORD *)(a3 + 8) = v11;
    if (v11)
    {
      uint64_t v19 = *(void *)(a1 + 160);
      int v20 = -16;
      do
      {
        uint64_t v21 = (unsigned int *)(v19 + 16 * v12);
        int v22 = v21[1];
        if (*v21 == 16777209)
        {
          if (v9)
          {
            int v23 = v22 - 1;
            if (v22 < 1) {
              int v23 = v22;
            }
            int v20 = (v23 >> 1) + 1;
          }
          else
          {
            int v20 = v22 + 1;
          }
        }
        else
        {
          if (v9)
          {
            int v24 = v22 - 1;
            if (v22 < 1) {
              int v24 = v21[1];
            }
            int v22 = v24 >> 1;
          }
          ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *v21, a3, a4, a5, a6, a7, a8, (uint64_t)v28);
          if (v20 == -16) {
            int v25 = v22 + 1;
          }
          else {
            int v25 = v20;
          }
          int v26 = v28[1];
          uint64_t v11 = (v11 - 1);
          uint64_t v27 = *(void *)a3 + 32 * v11;
          *(_DWORD *)uint64_t v27 = v28[0];
          *(_DWORD *)(v27 + 4) = v26;
          *(_OWORD *)(v27 + 8) = v29;
          *(_DWORD *)(v27 + 24) = v22 + 1;
          *(_DWORD *)(v27 + 28) = v25;
          uint64_t v19 = *(void *)(a1 + 160);
          int v20 = -16;
        }
        uint64_t v12 = *(unsigned int *)(*(void *)(a1 + 176) + 16 * *(unsigned int *)(v19 + 16 * v12 + 8) + 12);
      }
      while (v12 != -1);
    }
  }
}

uint64_t FstSearchLatticeBackoff::makePartialResult(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    uint64_t v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(void *)a2 + v9))(*(void *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  unsigned int BestTrace = FstSearchLatticeBackoff::getBestTrace((uint64_t)a1, 0, 0, 1);
  if (BestTrace == -1) {
    return 1879048192;
  }
  unsigned int v15 = BestTrace;
  FstSearchLatticeBackoff::getHistory((uint64_t)a1, BestTrace, a3, a4, v11, v12, v13, v14);
  memset(v25, 0, sizeof(v25));
  int v26 = 0;
  if (*(_DWORD *)(a3 + 8))
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    int v18 = 0;
    do
    {
      uint64_t v19 = *(void *)a3 + v16;
      int v20 = *(_DWORD *)(v19 + 28);
      WordLatticeLC::WordLatticeLC((uint64_t)v24, v19, v18, *(_DWORD *)(v19 + 24) - v18, v20 - *(_DWORD *)(v19 + 24), (uint64_t)v25);
      uint64_t v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(void *)a2 + 112 * v21), (const WordLatticeLC *)v24);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v24);
      ++v17;
      v16 += 32;
      int v18 = v20;
    }
    while (v17 < *(unsigned int *)(a3 + 8));
  }
  uint64_t v22 = a1[20] + 16 * v15;
  return (*(_DWORD *)(a1[22] + 16 * *(unsigned int *)(v22 + 8))
                      + *(_DWORD *)(a1[11] + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_213E60C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int64x2_t FstSearchLattice::advanceDeltas(FstSearchLattice *this, int a2, int a3, SearchStats *a4, int a5)
{
  v124[0] = a2;
  int64x2_t v122 = 0u;
  int64x2_t v123 = 0u;
  SnapTime::recordTime((SnapTime *)&v122, 1, 0, 0, 0);
  *((_DWORD *)this + 58) = a3;
  int v7 = *((_DWORD *)this + 2);
  uint64_t v101 = (int *)((char *)this + 232);
  unsigned int v8 = *((_DWORD *)this + 50);
  if (v8)
  {
    unsigned int v102 = 0;
    unsigned int v103 = 0;
    unsigned int v9 = 0;
    uint64_t v100 = (char *)this + 208;
    int v104 = *((_DWORD *)this + 2);
    do
    {
      uint64_t v10 = v9;
      uint64_t v97 = 24 * v9;
      uint64_t v11 = *((void *)this + 24) + v97;
      uint64_t v12 = *(unsigned int *)(v11 + 4);
      if (v8 <= v9 + 1) {
        ++v9;
      }
      else {
        unsigned int v9 = v8;
      }
      unsigned int v13 = v9 - 1;
      uint64_t v14 = (int *)(v11 + 28);
      uint64_t v15 = 1;
      while (v10 + v15 < (unint64_t)v8)
      {
        int v16 = *v14;
        v14 += 6;
        ++v15;
        if (v16 != v12)
        {
          unsigned int v13 = v10 + v15 - 2;
          unsigned int v9 = v10 + v15 - 1;
          break;
        }
      }
      uint64_t v17 = *((void *)this + 5);
      if (*(_DWORD *)(v17 + 160) != v12)
      {
        uint64_t v95 = v12;
        unsigned int v96 = v9;
        BOOL v18 = *(_DWORD *)(v17 + 140) <= (int)v12 || v10 > v13;
        unsigned int v98 = v10;
        unsigned int v94 = v13;
        if (!v18)
        {
          uint64_t v19 = 0;
          int v20 = v13 - v10 + 1;
          do
          {
            uint64_t v21 = *((void *)this + 24) + v97 + v19;
            int v22 = *(_DWORD *)v21;
            int v23 = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(v21 + 12)) + v22;
            int v24 = *((_DWORD *)this + 58);
            if (v23 - v7 <= v24)
            {
              if (v24 > v23) {
                *uint64_t v101 = v23;
              }
              uint64_t v25 = *((void *)this + 24) + v97 + v19;
              uint64_t v26 = *(void *)(v25 + 4);
              __int16 v27 = *(_WORD *)(v25 + 12);
              __int16 v28 = *(_WORD *)(v25 + 14);
              uint64_t v29 = *(void *)(v25 + 16);
              uint64_t v30 = *((unsigned int *)this + 54);
              if (v30 == *((_DWORD *)this + 55))
              {
                DgnArray<CWIDAC>::reallocElts((uint64_t)v100, 1, 1);
                LODWORD(v30) = *((_DWORD *)this + 54);
              }
              uint64_t v31 = *((void *)this + 26) + 24 * v30;
              *(_DWORD *)uint64_t v31 = v23;
              *(void *)(v31 + 4) = v26;
              *(_WORD *)(v31 + 12) = v27;
              *(_WORD *)(v31 + 14) = v28;
              *(void *)(v31 + 16) = v29;
              int v32 = *((_DWORD *)this + 54) + 1;
              *((_DWORD *)this + 54) = v32;
              if (!v19)
              {
                unsigned int v33 = v102;
                if (v103 == 2 * *((_DWORD *)this + 4)) {
                  unsigned int v33 = v32;
                }
                unsigned int v102 = v33;
                ++v103;
              }
            }
            v19 += 24;
            --v20;
          }
          while (v20);
        }
        unsigned int v34 = v98;
        int v35 = v94 - v98 + 1;
        unsigned int v36 = v95;
        do
        {
          uint64_t v37 = *((void *)this + 5);
          uint64_t v38 = *(void *)(v37 + 152);
          unsigned int v39 = *(_DWORD *)(v38 + 4 * v36);
          int v40 = *(_DWORD *)(v37 + 140);
          int v106 = *(_DWORD *)(v38 + 4 * (v36 + 1));
          unsigned int v99 = v36;
          if (v40 <= v106)
          {
            if (*((unsigned char *)this + 356)) {
              BOOL v59 = v40 <= (int)v95;
            }
            else {
              BOOL v59 = 0;
            }
            if (v59)
            {
              unsigned int v60 = (v39 & 0xFFFFF) <= 0xFFFF3 ? v39 & 0xFFFFF : v39 & 0xFFFFF | 0xF00000;
              if (v60 != 16777210)
              {
                DgnString::DgnString((DgnString *)&v119);
                ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v60, (DgnString *)&v119, v61, v62, v63, v64, v65);
                uint64_t v71 = &unk_214099300;
                if (v119.i32[2]) {
                  uint64_t v71 = (void *)v119.i64[0];
                }
                uint64_t v70 = (unsigned int *)(*((void *)this + 24) + 24 * v98);
                xprintf("Seed from state %d score %d trace %d, %s\n", v66, v67, v68, v69, v95, *v70, v70[2], v71);
                v72 = (int *)(*((void *)this + 24) + 24 * v98);
                MiniFst::seed((uint64_t)this + 240, *v72, v72[5], v72[2], v106);
                DgnString::~DgnString((DgnString *)&v119);
              }
            }
          }
          else
          {
            int ScoreNoBackoff = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), (unsigned __int16)*(_DWORD *)(v38 + 4 * v36));
            if (v34 <= v94)
            {
              uint64_t v42 = 0;
              int v43 = (v39 >> 20) & 0x3FF;
              int v44 = ScoreNoBackoff + v43;
              uint64_t v45 = v97;
              unsigned int v105 = v39;
              do
              {
                uint64_t v46 = *((void *)this + 24);
                int v47 = v44 + *(_DWORD *)(v46 + v45);
                int v48 = *((_DWORD *)this + 58);
                if (v47 - v7 <= v48)
                {
                  if (v48 > v47) {
                    *uint64_t v101 = v47;
                  }
                  uint64_t v49 = v46 + v45;
                  int v50 = *(_DWORD *)(v49 + 8);
                  __int16 v51 = *(_WORD *)(v49 + 14);
                  int v53 = *(_DWORD *)(v49 + 16);
                  int v52 = *(_DWORD *)(v49 + 20);
                  uint64_t v54 = *((unsigned int *)this + 54);
                  if (v54 == *((_DWORD *)this + 55))
                  {
                    DgnArray<CWIDAC>::reallocElts((uint64_t)v100, 1, 1);
                    LODWORD(v54) = *((_DWORD *)this + 54);
                  }
                  int v55 = v53 + v43;
                  uint64_t v56 = *((void *)this + 26) + 24 * v54;
                  unsigned int v39 = v105;
                  *(_DWORD *)uint64_t v56 = v47;
                  *(_DWORD *)(v56 + 4) = v106;
                  *(_DWORD *)(v56 + 8) = v50;
                  *(_WORD *)(v56 + 12) = v105;
                  *(_WORD *)(v56 + 14) = v51;
                  *(_DWORD *)(v56 + 16) = v55;
                  *(_DWORD *)(v56 + 20) = v52;
                  int v57 = *((_DWORD *)this + 54) + 1;
                  *((_DWORD *)this + 54) = v57;
                  if (!v42)
                  {
                    unsigned int v58 = v102;
                    if (v103 == 2 * *((_DWORD *)this + 4)) {
                      unsigned int v58 = v57;
                    }
                    unsigned int v102 = v58;
                    ++v103;
                  }
                  int v7 = v104;
                  int v35 = v94 - v98 + 1;
                }
                ++v42;
                v45 += 24;
              }
              while (v35 != v42);
            }
          }
          unsigned int v36 = v99 + 2;
          unsigned int v9 = v96;
          unsigned int v34 = v98;
        }
        while ((v39 & 0x80000000) == 0);
        unsigned int v8 = *((_DWORD *)this + 50);
      }
    }
    while (v9 < v8);
    a3 = *v101;
  }
  else
  {
    unsigned int v102 = 0;
    unsigned int v103 = 0;
  }
  int v121 = a3 + v7;
  if (*((unsigned char *)this + 356)) {
    MiniFst::updateFrame((char *)this + 240, v101, v7, a2);
  }
  int64x2_t v119 = 0u;
  int64x2_t v120 = 0u;
  SnapTime::recordTime((SnapTime *)&v119, 1, 0, 0, 0);
  int64x2_t v119 = vsubq_s64(v119, v122);
  int64x2_t v120 = vsubq_s64(v120, v123);
  uint64_t v73 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v74 = vaddq_s64(v73[1], v120);
  *uint64_t v73 = vaddq_s64(*v73, v119);
  v73[1] = v74;
  int64x2_t v117 = 0u;
  int64x2_t v118 = 0u;
  SnapTime::recordTime((SnapTime *)&v117, 1, 0, 0, 0);
  if (v103 > 2 * *((_DWORD *)this + 4)) {
    FstSearchLateLatticeHashBackoff::applyCutoffOnEmitting((uint64_t)this, v102, &v121);
  }
  int64x2_t v115 = 0u;
  int64x2_t v116 = 0u;
  SnapTime::recordTime((SnapTime *)&v115, 1, 0, 0, 0);
  int64x2_t v75 = vsubq_s64(v115, v117);
  uint64_t v76 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v77 = v76[3];
  int64x2_t v78 = vaddq_s64(v76[2], v75);
  int64x2_t v115 = v75;
  int64x2_t v116 = vsubq_s64(v116, v118);
  int64x2_t v79 = vaddq_s64(v77, v116);
  v76[2] = v78;
  v76[3] = v79;
  int64x2_t v113 = 0u;
  int64x2_t v114 = 0u;
  SnapTime::recordTime((SnapTime *)&v113, 1, 0, 0, 0);
  FstSearchLatticeBackoff::makeViterbiDecisionOnEmitting((uint64_t)this);
  unint64_t v80 = *((unsigned int *)this + 6);
  if (v80)
  {
    unint64_t v81 = *((unsigned int *)this + 50);
    if (v80 < v81) {
      mrec_nth_element<FstSearchLateLatticeHashBackoffcmpTok>(*((void *)this + 24), v80, v81);
    }
  }
  int64x2_t v111 = 0u;
  int64x2_t v112 = 0u;
  SnapTime::recordTime((SnapTime *)&v111, 1, 0, 0, 0);
  int64x2_t v82 = vsubq_s64(v111, v113);
  uint64_t v83 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v84 = v83[5];
  int64x2_t v85 = vaddq_s64(v83[4], v82);
  int64x2_t v111 = v82;
  int64x2_t v112 = vsubq_s64(v112, v114);
  int64x2_t v86 = vaddq_s64(v84, v112);
  v83[4] = v85;
  v83[5] = v86;
  int64x2_t v109 = 0u;
  int64x2_t v110 = 0u;
  SnapTime::recordTime((SnapTime *)&v109, 1, 0, 0, 0);
  *((_DWORD *)this + 54) = 0;
  uint64_t v87 = *((unsigned int *)this + 50);
  *((_DWORD *)this + 38) = v87;
  if (a4)
  {
    *((void *)a4 + 2) += v87;
    if (*((_DWORD *)a4 + 2) > v87) {
      LODWORD(v87) = *((_DWORD *)a4 + 2);
    }
    *((_DWORD *)a4 + 2) = v87;
  }
  if (*((unsigned char *)this + 356)) {
    FstSearchLattice::seedFromMiniFst((uint64_t)this, v124);
  }
  if (a5) {
    FstSearchLatticeBackoff::propagateNulls((uint64_t)this, v121, a2, a4);
  }
  *((_DWORD *)this + 56) = a2;
  int64x2_t v107 = 0u;
  int64x2_t v108 = 0u;
  SnapTime::recordTime((SnapTime *)&v107, 1, 0, 0, 0);
  uint64_t v88 = (int64x2_t *)*((void *)this + 13);
  int64x2_t result = vaddq_s64(v88[6], vsubq_s64(v107, v109));
  int64x2_t v90 = vaddq_s64(v88[7], vsubq_s64(v108, v110));
  v88[6] = result;
  v88[7] = v90;
  return result;
}

void sub_213E6130C(_Unwind_Exception *exception_object)
{
}

uint64_t FstSearchLattice::seedFromMiniFst(uint64_t this, int *a2)
{
  if (*(unsigned char *)(this + 356))
  {
    uint64_t v2 = this;
    unsigned int v3 = *(_DWORD *)(this + 264);
    if (v3 >= *(_DWORD *)(this + 20)) {
      unsigned int v3 = *(_DWORD *)(this + 20);
    }
    if (v3)
    {
      unint64_t v4 = 0;
      uint64_t v47 = this + 176;
      int v5 = (void *)(this + 160);
      uint64_t v40 = this + 192;
      do
      {
        uint64_t v6 = (int *)(*(void *)(v2 + 256) + 36 * v4);
        int v7 = *v6;
        int v8 = v6[5];
        int v9 = v6[6];
        int v45 = v6[4];
        int v46 = v6[7];
        unsigned int v10 = v6[2];
        uint64_t v48 = 0;
        uint64_t v49 = 0;
        int v43 = v7;
        int v44 = v8;
        int v42 = v9;
        if ((v10 & 0x80000000) != 0)
        {
          LODWORD(v14) = -2 - v10;
        }
        else
        {
          uint64_t v11 = 0;
          unsigned int v12 = 0;
          do
          {
            if (v12 == HIDWORD(v49))
            {
              DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v48, 1, 1);
              unsigned int v12 = v49;
              uint64_t v11 = v48;
            }
            *(_DWORD *)(v11 + 4 * v12) = v10;
            uint64_t v13 = v49;
            unsigned int v12 = v49 + 1;
            LODWORD(v49) = v49 + 1;
            unsigned int v10 = *(_DWORD *)(*(void *)(v2 + 240) + 36 * v10 + 8);
          }
          while ((v10 & 0x80000000) == 0);
          LODWORD(v14) = -2 - v10;
          if ((v13 & 0x80000000) == 0)
          {
            int v15 = v13 + 1;
            uint64_t v16 = 4 * v13;
            do
            {
              unsigned int v17 = *(_DWORD *)(v48 + v16);
              uint64_t v18 = *(void *)(v2 + 240);
              uint64_t v19 = (int *)(v18 + 36 * v17);
              int v20 = *v19;
              uint64_t v21 = *((void *)v19 + 2);
              unsigned int v22 = *(_DWORD *)(v2 + 184);
              if (v22 == *(_DWORD *)(v2 + 188))
              {
                DgnArray<DgnPrimArray<double>>::reallocElts(v47, 1, 1);
                unsigned int v22 = *(_DWORD *)(v2 + 184);
                uint64_t v18 = *(void *)(v2 + 240);
              }
              uint64_t v23 = *(void *)(v2 + 176) + 16 * v22;
              *(_DWORD *)(v2 + 184) = v22 + 1;
              *(_DWORD *)uint64_t v23 = v20;
              *(void *)(v23 + 4) = v21;
              *(_DWORD *)(v23 + 12) = v14;
              uint64_t v24 = *(void *)(v18 + 36 * v17 + 28);
              uint64_t v25 = *(unsigned int *)(v2 + 168);
              if (v25 == *(_DWORD *)(v2 + 172))
              {
                DgnArray<DgnPrimArray<double>>::reallocElts(v2 + 160, 1, 1);
                uint64_t v25 = *(unsigned int *)(v2 + 168);
              }
              uint64_t v26 = *(void *)(v2 + 160);
              uint64_t v27 = v26 + 16 * v25;
              *(void *)uint64_t v27 = v24;
              *(_DWORD *)(v27 + 8) = v22;
              *(_DWORD *)(v27 + 12) = 0;
              uint64_t v14 = *(unsigned int *)(v2 + 168);
              *(_DWORD *)(v2 + 168) = v14 + 1;
              *(_DWORD *)(v26 + 16 * v14 + 12) = 1;
              --v15;
              v16 -= 4;
            }
            while (v15 > 0);
          }
        }
        unsigned int v28 = *(_DWORD *)(v2 + 184);
        if (v28 == *(_DWORD *)(v2 + 188))
        {
          DgnArray<DgnPrimArray<double>>::reallocElts(v47, 1, 1);
          unsigned int v28 = *(_DWORD *)(v2 + 184);
        }
        uint64_t v29 = *(void *)(v2 + 176);
        *(_DWORD *)(v2 + 184) = v28 + 1;
        uint64_t v30 = (_DWORD *)(v29 + 16 * v28);
        *uint64_t v30 = v43;
        v30[1] = v45;
        v30[2] = v44;
        v30[3] = v14;
        if (v46 == 16777213)
        {
          int v46 = 16777209;
          if (*(_DWORD *)(*v5 + 16 * v14) == 16777209)
          {
            unsigned int v28 = *(_DWORD *)(*v5 + 16 * v14 + 8);
            int v46 = 16777209;
          }
        }
        int v31 = *a2;
        uint64_t v32 = *(unsigned int *)(v2 + 168);
        if (v32 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<DgnPrimArray<double>>::reallocElts(v2 + 160, 1, 1);
          uint64_t v32 = *(unsigned int *)(v2 + 168);
        }
        uint64_t v33 = *(void *)(v2 + 160);
        unsigned int v34 = (int *)(v33 + 16 * v32);
        *unsigned int v34 = v46;
        v34[1] = v31;
        v34[2] = v28;
        v34[3] = 0;
        uint64_t v35 = *(unsigned int *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v35 + 1;
        *(_DWORD *)(v33 + 16 * v35 + 12) = 1;
        uint64_t v36 = *(unsigned int *)(v2 + 200);
        if (v36 == *(_DWORD *)(v2 + 204))
        {
          DgnArray<CWIDAC>::reallocElts(v40, 1, 1);
          LODWORD(v36) = *(_DWORD *)(v2 + 200);
        }
        uint64_t v37 = *(void *)(v2 + 192) + 24 * v36;
        *(_DWORD *)uint64_t v37 = v43;
        *(_DWORD *)(v37 + 4) = v42;
        *(_DWORD *)(v37 + 8) = v35;
        *(_WORD *)(v37 + 12) = -2;
        *(_DWORD *)(v37 + 16) = v45;
        *(_DWORD *)(v37 + 20) = v44;
        ++*(_DWORD *)(v2 + 200);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v48);
        ++v4;
        LODWORD(v38) = *(_DWORD *)(v2 + 264);
        unsigned int v39 = *(_DWORD *)(v2 + 20);
        if (v38 >= v39) {
          unint64_t v38 = v39;
        }
        else {
          unint64_t v38 = v38;
        }
      }
      while (v4 < v38);
    }
  }
  return this;
}

void sub_213E61680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLattice::collectTraces(FstSearchLattice *this)
{
  unint64_t v2 = *((unsigned int *)this + 42);
  int v47 = 0;
  int v46 = 0;
  if (v2)
  {
    unsigned int v3 = MemChunkAlloc(4 * v2, 0);
    unint64_t v4 = 0;
    int v46 = v3;
    int v47 = v2;
    do
      *((_DWORD *)v3 + v4++) = 0;
    while (v4 < v2);
  }
  else
  {
    unsigned int v3 = 0;
  }
  unint64_t v5 = *((unsigned int *)this + 50);
  if (v5)
  {
    unint64_t v6 = 0;
    int v7 = (unsigned int *)(*((void *)this + 24) + 8);
    do
    {
      unsigned int v9 = *v7;
      v7 += 6;
      uint64_t v8 = v9;
      if (v9 != -1)
      {
        *((_DWORD *)v3 + v8) = 1;
        unint64_t v5 = *((unsigned int *)this + 50);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  LODWORD(v10) = *((_DWORD *)this + 42);
  if (!v10) {
    goto LABEL_50;
  }
  char v11 = 0;
  unsigned int v12 = (uint64_t *)((char *)this + 160);
  uint64_t v13 = (uint64_t *)((char *)this + 176);
  do
  {
    uint64_t v10 = (v10 - 1);
    if (v11)
    {
      char v11 = 1;
    }
    else if (*(_DWORD *)(*v12 + 16 * v10) == 16777213)
    {
      char v11 = 1;
      *((_DWORD *)v3 + v10) = 1;
    }
    else
    {
      char v11 = 0;
    }
    if (*((_DWORD *)v3 + v10))
    {
      uint64_t v14 = *v12 + 16 * v10;
      int v15 = *(_DWORD *)(v14 + 12);
      if (v15 >= 1)
      {
        unsigned int v16 = *(_DWORD *)(v14 + 8);
        int v17 = v15 + v16;
        uint64_t v18 = *v13;
        do
        {
          uint64_t v19 = *(unsigned int *)(v18 + 16 * v16 + 12);
          if (v19 != -1) {
            *((_DWORD *)v3 + v19) = 1;
          }
          ++v16;
        }
        while ((int)v16 < v17);
      }
    }
  }
  while (v10);
  unsigned int v20 = *((_DWORD *)this + 42);
  if (v20)
  {
    unint64_t v21 = 0;
    unsigned int v22 = 0;
    unsigned int v23 = 0;
    do
    {
      if (*((_DWORD *)v3 + v21))
      {
        uint64_t v24 = *v12;
        if (v21 != v22)
        {
          *(_OWORD *)(v24 + 16 * v22) = *(_OWORD *)(v24 + 16 * v21);
          uint64_t v24 = *v12;
        }
        *(_DWORD *)(v24 + 16 * v22 + 8) = v23;
        uint64_t v25 = v24 + 16 * v21;
        uint64_t v26 = *(unsigned int *)(v25 + 8);
        uint64_t v27 = (*(_DWORD *)(v25 + 12) + v26);
        if (v26 < v27)
        {
          uint64_t v28 = *v13;
          uint64_t v29 = 16 * v26;
          do
          {
            if (v26 != v23)
            {
              *(_OWORD *)(v28 + 16 * v23) = *(_OWORD *)(v28 + v29);
              uint64_t v28 = *v13;
            }
            uint64_t v30 = v28 + 16 * v23;
            unsigned int v33 = *(_DWORD *)(v30 + 12);
            int v31 = (_DWORD *)(v30 + 12);
            uint64_t v32 = v33;
            if (v33 != -1) {
              *int v31 = *((_DWORD *)v3 + v32);
            }
            ++v23;
            ++v26;
            v29 += 16;
          }
          while (v27 != v26);
        }
        *((_DWORD *)v3 + v21) = v22++;
        unsigned int v20 = *((_DWORD *)this + 42);
      }
      ++v21;
    }
    while (v21 < v20);
    unsigned int v34 = *((_DWORD *)this + 43);
    if (v22 > v34)
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 160, v22 - v34, 0);
      unsigned int v20 = *((_DWORD *)this + 42);
    }
    if (v20 < v22)
    {
      unint64_t v35 = v22 - (unint64_t)v20;
      uint64_t v36 = (_OWORD *)(*v12 + 16 * v20);
      do
      {
        *v36++ = xmmword_2140992B0;
        --v35;
      }
      while (v35);
    }
    *((_DWORD *)this + 42) = v22;
    unsigned int v37 = *((_DWORD *)this + 47);
    if (v23 > v37) {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 176, v23 - v37, 0);
    }
    uint64_t v38 = *((unsigned int *)this + 46);
    if (v38 < v23)
    {
      uint64_t v39 = v23 - v38;
      uint64_t v40 = (_OWORD *)(*v13 + 16 * v38);
      do
      {
        *v40++ = xmmword_2140992A0;
        --v39;
      }
      while (v39);
    }
  }
  else
  {
LABEL_50:
    unsigned int v23 = 0;
    *((_DWORD *)this + 42) = 0;
  }
  *((_DWORD *)this + 46) = v23;
  uint64_t v41 = *((unsigned int *)this + 50);
  if (v41)
  {
    int v42 = v46;
    int v43 = (_DWORD *)(*((void *)this + 24) + 8);
    do
    {
      uint64_t v44 = *v43;
      if (v44 != -1) {
        *int v43 = *((_DWORD *)v42 + v44);
      }
      v43 += 6;
      --v41;
    }
    while (v41);
  }
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v46);
}

void sub_213E61990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int64x2_t FstSearchLattice::vite(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  FstSearchLattice::advanceDeltas((FstSearchLattice *)this, a2, a3, a4, a5);
  int64x2_t v13 = 0u;
  int64x2_t v14 = 0u;
  SnapTime::recordTime((SnapTime *)&v13, 1, 0, 0, 0);
  if (a2 >= 1)
  {
    unsigned int v7 = *((_DWORD *)this + 18);
    if (v7)
    {
      if (!(a2 % v7)) {
        FstSearchLattice::collectTraces((FstSearchLattice *)this);
      }
    }
  }
  int64x2_t v11 = 0u;
  int64x2_t v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  uint64_t v8 = this[13];
  int64x2_t result = vaddq_s64(v8[14], vsubq_s64(v11, v13));
  int64x2_t v10 = vaddq_s64(v8[15], vsubq_s64(v12, v14));
  v8[14] = result;
  v8[15] = v10;
  return result;
}

_DWORD *FstSearchLattice::reset(_DWORD *this)
{
  this[42] = 0;
  this[46] = 0;
  this[50] = 0;
  return this;
}

double FstSearchLattice::doFrame(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  if (a3 >= 20000) {
    a3 = 20000;
  }
  *(void *)&double result = FstSearchLattice::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearchLattice::beginTopRecPassSyncRecog(FstSearchLattice *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 240, a3, *((PelScoreCache **)this + 4));
    uint64_t result = ArcGraph::findBackoffState(*((void *)this + 5));
    *((_DWORD *)this + 88) = result;
    *((unsigned char *)this + 356) = 1;
  }
  return result;
}

uint64_t FstSearchLattice::endTopRecPassSyncRecog(FstSearchLattice *this)
{
  int64x2_t v10 = 0u;
  int64x2_t v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  int64x2_t v8 = 0u;
  int64x2_t v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  int64x2_t v2 = vsubq_s64(v8, v10);
  unsigned int v3 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v4 = v3[13];
  int64x2_t v5 = vaddq_s64(v3[12], v2);
  int64x2_t v8 = v2;
  int64x2_t v9 = vsubq_s64(v9, v11);
  int64x2_t v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + 58) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

void FstSearchLattice::printSize(FstSearchLattice *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v116);
  if (v117) {
    unsigned int v16 = v116;
  }
  else {
    unsigned int v16 = &unk_214099300;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_214099300, a3, &unk_214099300, v16);
  DgnString::~DgnString((DgnString *)&v116);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_214099300);
  uint64_t v21 = (a3 + 1);
  uint64_t v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v116);
  if (v117) {
    uint64_t v27 = v116;
  }
  else {
    uint64_t v27 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v116);
  if (v117) {
    uint64_t v32 = v116;
  }
  else {
    uint64_t v32 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v116);
  if (v117) {
    unsigned int v37 = v116;
  }
  else {
    unsigned int v37 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v37, 4, 4, 0);
  uint64_t v111 = a2;
  int64x2_t v112 = a6;
  uint64_t v113 = a3;
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v116);
  if (v117) {
    int v42 = v116;
  }
  else {
    int v42 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v42, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  uint64_t v43 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v43 = 16;
  }
  uint64_t v44 = *((unsigned int *)this + 42);
  uint64_t v45 = 16 * v44;
  if ((int)v44 <= 0) {
    uint64_t v45 = 0;
  }
  uint64_t v46 = v45 + v43;
  uint64_t v47 = v45 + v43 + 16 * (*((_DWORD *)this + 43) - v44);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v116);
  if (v117) {
    int v52 = v116;
  }
  else {
    int v52 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v52, v47, v46, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v47;
  *a5 += v46;
  uint64_t v53 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v53 = 16;
  }
  uint64_t v54 = *((unsigned int *)this + 46);
  uint64_t v55 = 16 * v54;
  if ((int)v54 <= 0) {
    uint64_t v55 = 0;
  }
  uint64_t v56 = v55 + v53;
  uint64_t v57 = v55 + v53 + 16 * (*((_DWORD *)this + 47) - v54);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v116);
  if (v117) {
    uint64_t v62 = v116;
  }
  else {
    uint64_t v62 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v62, v57, v56, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v57;
  *a5 += v56;
  uint64_t v63 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v63 = 16;
  }
  int v64 = *((_DWORD *)this + 50);
  uint64_t v65 = 22 * v64;
  if (v64 <= 0) {
    uint64_t v65 = 0;
  }
  uint64_t v66 = v65 + v63;
  uint64_t v67 = v65 + v63 + 22 * (*((_DWORD *)this + 51) - v64);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v116);
  if (v117) {
    v72 = v116;
  }
  else {
    v72 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, v21, &unk_214099300, v22, v22, v72, v67, v66, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v67;
  *a5 += v66;
  uint64_t v73 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v73 = 16;
  }
  int v74 = *((_DWORD *)this + 54);
  uint64_t v75 = 22 * v74;
  if (v74 <= 0) {
    uint64_t v75 = 0;
  }
  uint64_t v76 = v75 + v73;
  uint64_t v77 = v75 + v73 + 22 * (*((_DWORD *)this + 55) - v74);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v116);
  if (v117) {
    int64x2_t v82 = v116;
  }
  else {
    int64x2_t v82 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, v21, &unk_214099300, v22, v22, v82, v77, v76, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v77;
  *a5 += v76;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v116);
  if (v117) {
    uint64_t v87 = v116;
  }
  else {
    uint64_t v87 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v83, v84, v85, v86, v21, &unk_214099300, v22, v22, v87, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v116);
  if (v117) {
    v92 = v116;
  }
  else {
    v92 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, v21, &unk_214099300, v22, v22, v92, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v116);
  if (v117) {
    uint64_t v97 = v116;
  }
  else {
    uint64_t v97 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v93, v94, v95, v96, v21, &unk_214099300, v22, v22, v97, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  uint64_t v98 = sizeObject((uint64_t)this + 240, 0);
  uint64_t v99 = sizeObject((uint64_t)this + 240, 1);
  uint64_t v100 = sizeObject((uint64_t)this + 240, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v116);
  if (v117) {
    unsigned int v105 = v116;
  }
  else {
    unsigned int v105 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v101, v102, v103, v104, v21, &unk_214099300, v22, v22, v105, v98, v99, v100);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v98;
  *a5 += v99;
  *v112 += v100;
  unint64_t v114 = 0;
  unint64_t v115 = 0;
  SearchItf::printSize(this, v111, v21, &v115, &v114, &v114);
  *a4 += v115;
  *a5 += v114;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v116);
  if (v117) {
    int64x2_t v110 = v116;
  }
  else {
    int64x2_t v110 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v106, v107, v108, v109, v113, &unk_214099300, (35 - v113), (35 - v113), v110, *a4, *a5, *v112);
  DgnString::~DgnString((DgnString *)&v116);
}

void sub_213E622AC(_Unwind_Exception *a1)
{
  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

BOOL FstSearchLattice::findBestPath(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8 = *(unsigned int *)(a1 + 168);
  if (v8) {
    BOOL v9 = *(_DWORD *)(a3 + 8) == 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    *(void *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v8;
  }
  if (v8) {
    BOOL v10 = *(_DWORD *)(a2 + 8) == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    *(void *)a2 = MemChunkAlloc(v8, 0);
    *(_DWORD *)(a2 + 8) = v8;
LABEL_14:
    uint64_t v11 = 0;
    do
    {
      *(unsigned char *)(*(void *)a2 + v11) = 0;
      *(unsigned char *)(*(void *)a3 + v11++) = 0;
    }
    while (v8 != v11);
    goto LABEL_16;
  }
  if (v8) {
    goto LABEL_14;
  }
LABEL_16:
  unsigned int BestTrace = FstSearchLatticeBackoff::getBestTrace(a1, (void *)a2, (void *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1) {
    return 0;
  }
  uint64_t v13 = *(void *)(a1 + 160) + 16 * BestTrace;
  LODWORD(v13) = *(_DWORD *)(*(void *)(a1 + 176) + 16 * *(unsigned int *)(v13 + 8))
               + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v13 + 4));
  *a4 = v13;
  return v13 != 1879048192;
}

uint64_t FstSearchLattice::buildWordLattice(uint64_t a1, uint64_t *a2, void *a3, void *a4, char a5)
{
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  int v31 = 0;
  uint64_t v28 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v27, *(unsigned int *)(a1 + 168));
  unint64_t v8 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v8, 0, 128);
  v8[4] = (uint64_t)a2;
  FstSearchLatticeBackoff::createLatticeNodes(a1, &v30, (uint64_t)&v28, (uint64_t)a2, v27, a3, a4);
  uint64_t v23 = (uint64_t)v8;
  uint64_t v24 = *(unsigned int *)(a1 + 168);
  if (v24)
  {
    uint64_t v10 = 0;
    int v11 = v29;
    do
    {
      if (*(unsigned char *)(*a3 + v10))
      {
        uint64_t v12 = *(void *)(a1 + 160);
        if (*(_DWORD *)(v12 + 16 * v10) != 16777209)
        {
          uint64_t v13 = v12 + 16 * v10;
          if (*(int *)(v13 + 12) >= 1)
          {
            int v14 = *(_DWORD *)(v13 + 8);
            do
            {
              uint64_t v15 = *(void *)(a1 + 176) + 16 * v14;
              uint64_t v16 = *(unsigned int *)(v15 + 12);
              if (v16 == -1) {
                unsigned int v17 = 0;
              }
              else {
                unsigned int v17 = v11 - *((_DWORD *)v30 + v16);
              }
              uint64_t v18 = *(unsigned int *)(v28 + 4 * v17);
              if (*(unsigned char *)(*a4 + v10)) {
                FstSearchLattice::createLatticeLink(a1, v10, (int *)v15, 0xFFFFFFFFLL, v18, (const WordLatticeLC *)*(unsigned int *)(v28 + 4 * (v11 - *((_DWORD *)v30 + v10))), a2, v9, a5);
              }
              uint64_t v19 = v27[0];
              if (*(_DWORD *)(v27[0] + 16 * v10 + 8))
              {
                unint64_t v20 = 0;
                do
                {
                  uint64_t v21 = *(unsigned int *)(*(void *)(v19 + 16 * v10) + 4 * v20);
                  FstSearchLattice::createLatticeLink(a1, v10, (int *)v15, v21, v18, (const WordLatticeLC *)*(unsigned int *)(v28 + 4 * (v11 - *((_DWORD *)v30 + v21))), a2, v9, a5);
                  ++v20;
                  uint64_t v19 = v27[0];
                }
                while (v20 < *(unsigned int *)(v27[0] + 16 * v10 + 8));
              }
              ++v14;
            }
            while (v14 < *(_DWORD *)(*(void *)(a1 + 160) + 16 * v10 + 12)
                        + *(_DWORD *)(*(void *)(a1 + 160) + 16 * v10 + 8));
          }
        }
      }
      ++v10;
    }
    while (v10 != v24);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>(v23);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v27);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v28);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v30);
}

void sub_213E62620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearchLattice::createLatticeLink(uint64_t a1, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, const WordLatticeLC *a6, uint64_t *a7, uint64_t a8, char a9)
{
  unsigned int v11 = a5;
  unsigned int v12 = a4;
  uint64_t v16 = *(void *)(a1 + 160);
  if ((a4 & 0x80000000) != 0 || (v17 = v16 + 16 * a4, int v18 = *(_DWORD *)(v17 + 12), v18 < 1))
  {
    uint64_t v22 = 0;
  }
  else
  {
    unsigned int v19 = *(_DWORD *)(v17 + 8);
    int v20 = v18 + v19;
    do
    {
      uint64_t v21 = *(void *)(a1 + 176);
      if (*(_DWORD *)(v21 + 16 * v19 + 12) == a2) {
        uint64_t v22 = (_DWORD *)(v21 + 16 * v19);
      }
      else {
        uint64_t v22 = 0;
      }
      ++v19;
    }
    while ((int)v19 < v20 && !v22);
  }
  ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *(_DWORD *)(v16 + 16 * a2), (uint64_t)a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8, (uint64_t)v46);
  int v23 = a3[1];
  if (v22)
  {
    v23 += v22[1];
    int v24 = *v22 + *a3;
  }
  else
  {
    int v24 = *a3;
  }
  if (v46[0] >> 25 == 126)
  {
    int v25 = 0;
    int v26 = v23;
  }
  else
  {
    int v25 = *(_DWORD *)(a1 + 136);
    int v26 = v23 - v25;
  }
  int v27 = v24 - v23;
  if ((v12 & 0x80000000) != 0)
  {
    int v28 = 0;
  }
  else
  {
    int v28 = *(_DWORD *)(a1 + 140);
    v26 -= v28;
  }
  int v40 = v26;
  uint64_t v41 = 0;
  int v42 = v25;
  int v43 = v27;
  int v44 = 0;
  int v45 = v28;
  uint64_t v29 = a3[3];
  uint64_t v30 = *(void *)(a1 + 160);
  if (v29 == -1)
  {
    int v32 = 0;
    if (a9) {
      goto LABEL_26;
    }
  }
  else
  {
    int v31 = *(_DWORD *)(v30 + 16 * v29 + 4);
    if (a9)
    {
      if (v31 >= 1) {
        --v31;
      }
      int v32 = (v31 >> 1) + 1;
LABEL_26:
      int v33 = *(_DWORD *)(v30 + 16 * a2 + 4);
      if (v33 >= 1) {
        --v33;
      }
      int v34 = v33 >> 1;
      int v35 = v34 - v32 + 1;
      if ((v12 & 0x80000000) == 0)
      {
        int v36 = *(_DWORD *)(v30 + 16 * v12 + 4);
        if (v36 >= 1) {
          --v36;
        }
        int v37 = v36 >> 1;
        goto LABEL_35;
      }
LABEL_36:
      int v38 = 0;
      goto LABEL_37;
    }
    int v32 = v31 + 1;
  }
  int v34 = *(_DWORD *)(v30 + 16 * a2 + 4);
  int v35 = v34 - v32 + 1;
  if ((v12 & 0x80000000) != 0) {
    goto LABEL_36;
  }
  int v37 = *(_DWORD *)(v30 + 16 * v12 + 4);
LABEL_35:
  int v38 = v37 - v34;
LABEL_37:
  WordLatticeLC::WordLatticeLC((uint64_t)v39, (uint64_t)v46, v32, v35, v38, (uint64_t)&v40);
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v11, a6, (WordLatticeLC *)v39);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v39);
}

void sub_213E62858(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLattice::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(void *)(this + 112) = a2;
  if (*(unsigned char *)(this + 356)) {
    return MiniFst::beginTopFstSyncRecog(this + 240);
  }
  return this;
}

uint64_t FstSearchLattice::endTopRecSyncRecog(FstSearchLattice *this)
{
  uint64_t v1 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  return v1;
}

uint64_t FstSearchLattice::getBestExitScore(FstSearchLattice *this)
{
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  *((_DWORD *)this + 57) = -1;
  unint64_t v1 = *((unsigned int *)this + 38);
  unint64_t v2 = *((unsigned int *)this + 50);
  if (v1 >= v2) {
    goto LABEL_19;
  }
  uint64_t v4 = 0;
  unsigned int v5 = 0;
  uint64_t v6 = 24 * v1;
  do
  {
    uint64_t v7 = *((void *)this + 24) + v6;
    if (*(_DWORD *)(*((void *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      uint64_t v8 = *(unsigned int *)(v7 + 8);
      if (v8 != -1 && *(_DWORD *)(*((void *)this + 20) + 16 * v8 + 4) == *((_DWORD *)this + 56))
      {
        if (v5 == HIDWORD(v23))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v22, 1, 1);
          unsigned int v5 = v23;
          uint64_t v4 = v22;
        }
        *(_DWORD *)(v4 + 4 * v5) = v8;
        unsigned int v5 = v23 + 1;
        LODWORD(v23) = v23 + 1;
        unint64_t v2 = *((unsigned int *)this + 50);
      }
    }
    ++v1;
    v6 += 24;
  }
  while (v1 < v2);
  if (v5)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *((void *)this + 20);
    uint64_t v11 = v5;
    int v12 = 1879048192;
    do
    {
      uint64_t v13 = v10 + 16 * *(unsigned int *)(v4 + 4 * v9);
      int v14 = *(_DWORD *)(v13 + 12);
      if (v14 >= 1)
      {
        unsigned int v15 = *(_DWORD *)(v13 + 8);
        int v16 = v14 + v15;
        uint64_t v17 = *((void *)this + 22);
        do
        {
          uint64_t v18 = v15;
          int v19 = *(_DWORD *)(v17 + 16 * v15);
          if (v12 > v19)
          {
            *((_DWORD *)this + 57) = *(_DWORD *)(v17 + 16 * v18 + 12);
            int v12 = v19;
          }
          unsigned int v15 = v18 + 1;
        }
        while ((int)v18 + 1 < v16);
      }
      ++v9;
    }
    while (v9 != v11);
  }
  else
  {
LABEL_19:
    int v12 = 1879048192;
  }
  if (v12 >= 20000) {
    uint64_t v20 = 20000;
  }
  else {
    uint64_t v20 = v12;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v22);
  return v20;
}

void sub_213E62A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t FstSearchLattice::getBestScoreMaybeUpdateFstNode(FstSearchLattice *this, Node *a2)
{
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v2 = *((unsigned int *)this + 50);
  if (v2)
  {
    unsigned int v3 = (int *)*((void *)this + 24);
    __int16 v4 = -1;
    int v5 = 1879048192;
    uint64_t v6 = v3;
    do
    {
      int v8 = *v6;
      v6 += 6;
      int v7 = v8;
      if (v5 > v8)
      {
        __int16 v4 = *((_WORD *)v3 + 6);
        int v5 = v7;
      }
      unsigned int v3 = v6;
      --v2;
    }
    while (v2);
    uint64_t v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000) {
        uint64_t v9 = 20000;
      }
      else {
        uint64_t v9 = v5;
      }
    }
  }
  else
  {
    uint64_t v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

uint64_t FstSearchLattice::seedTheory(FstSearchLattice *this, int a2, int a3, int a4, SearchStats *a5)
{
  if (a4 == -2)
  {
    int v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    unsigned int v11 = *((_DWORD *)this + 46);
    if (v11 == *((_DWORD *)this + 47))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 176, 1, 1);
      unsigned int v11 = *((_DWORD *)this + 46);
    }
    int v12 = (_DWORD *)(*((void *)this + 22) + 16 * v11);
    v12[2] = 0;
    v12[3] = -1;
    v12[1] = 0;
    *((_DWORD *)this + 46) = v11 + 1;
    *int v12 = a2;
    unsigned int v13 = *((_DWORD *)this + 42);
    if (v13 == *((_DWORD *)this + 43))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 160, 1, 1);
      unsigned int v13 = *((_DWORD *)this + 42);
    }
    int v14 = (_DWORD *)(*((void *)this + 20) + 16 * v13);
    *int v14 = a4;
    v14[1] = a3;
    v14[2] = v11;
    v14[3] = 1;
    int v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  int v15 = *(_DWORD *)(*((void *)this + 5) + 144);
  unsigned int v16 = *((_DWORD *)this + 50);
  if (v16 == *((_DWORD *)this + 51))
  {
    DgnArray<CWIDAC>::reallocElts((uint64_t)this + 192, 1, 1);
    unsigned int v16 = *((_DWORD *)this + 50);
  }
  uint64_t v17 = *((void *)this + 24) + 24 * v16;
  *(_DWORD *)uint64_t v17 = a2;
  *(_DWORD *)(v17 + 4) = v15;
  *(_DWORD *)(v17 + 8) = v9;
  *(_WORD *)(v17 + 12) = -2;
  *(void *)(v17 + 16) = 0;
  LODWORD(v17) = *((_DWORD *)this + 50) + 1;
  *((_DWORD *)this + 50) = v17;
  *((_DWORD *)this + 38) = v17;

  return FstSearchLatticeBackoff::propagateNulls((uint64_t)this, 20000, a3, a5);
}

uint64_t FstSearchLattice::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(unsigned int *)(result + 228);
  if (v8 != -1)
  {
    uint64_t v10 = (void *)result;
    unsigned int v11 = (unsigned int *)(*(void *)(result + 160) + 16 * v8);
    for (i = *(unsigned int *)(*(void *)(result + 176) + 16 * v11[2] + 12); i != -1; uint64_t v8 = v17)
    {
      uint64_t v17 = i;
      uint64_t result = v10[5];
      if (*v11 == 16777209)
      {
        int v18 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        uint64_t result = ArcGraph::lexToCWID((ArcGraph *)result, *v11, a3, (uint64_t)a4, a5, a6, a7, a8);
        int v18 = result;
      }
      uint64_t v19 = *(unsigned int *)(a2 + 8);
      if (v19 == *(_DWORD *)(a2 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        uint64_t v19 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(void *)a2 + 4 * v19) = v18;
      ++*(_DWORD *)(a2 + 8);
      uint64_t v20 = *(unsigned int *)(a6 + 8);
      if (v20 == *(_DWORD *)(a6 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        uint64_t v20 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(void *)a6 + 4 * v20) = v8;
      ++*(_DWORD *)(a6 + 8);
      uint64_t v21 = v10[20];
      int v22 = *(_DWORD *)(v21 + 16 * v8 + 4);
      uint64_t v23 = *(unsigned int *)(a3 + 8);
      if (v23 == *(_DWORD *)(a3 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        uint64_t v23 = *(unsigned int *)(a3 + 8);
        uint64_t v21 = v10[20];
      }
      *(_DWORD *)(*(void *)a3 + 4 * v23) = v22;
      ++*(_DWORD *)(a3 + 8);
      int v24 = *(_DWORD *)(v10[22] + 16 * *(unsigned int *)(v21 + 16 * v8 + 8));
      uint64_t v25 = *(unsigned int *)(a5 + 8);
      if (v25 == *(_DWORD *)(a5 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        uint64_t v25 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(void *)a5 + 4 * v25) = v24;
      ++*(_DWORD *)(a5 + 8);
      unsigned int v11 = (unsigned int *)(v10[20] + 16 * v17);
      uint64_t i = *(unsigned int *)(v10[22] + 16 * v11[2] + 12);
    }
    *a4 = *v11;
  }
  return result;
}

void FstSearchLattice::checkSearchParametersValidityForArcGraph(FstSearchLattice *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *((void *)this + 5);
  if (*(unsigned char *)(v8 + 178))
  {
    int v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(unsigned char *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    }
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    }
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(void *)(**(void **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((void *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if (a2)
      {
        if (!*(unsigned char *)(v8 + 203)) {
          return;
        }
      }
      else if (*(unsigned char *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(unsigned char *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

uint64_t FstSearchLattice::makePartialResult(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    uint64_t v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(void *)a2 + v9))(*(void *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  unsigned int BestTrace = FstSearchLatticeBackoff::getBestTrace((uint64_t)a1, 0, 0, 1);
  if (BestTrace == -1) {
    return 1879048192;
  }
  unsigned int v15 = BestTrace;
  FstSearchLatticeBackoff::getHistory((uint64_t)a1, BestTrace, a3, a4, v11, v12, v13, v14);
  memset(v25, 0, sizeof(v25));
  int v26 = 0;
  if (*(_DWORD *)(a3 + 8))
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    int v18 = 0;
    do
    {
      uint64_t v19 = *(void *)a3 + v16;
      int v20 = *(_DWORD *)(v19 + 28);
      WordLatticeLC::WordLatticeLC((uint64_t)v24, v19, v18, *(_DWORD *)(v19 + 24) - v18, v20 - *(_DWORD *)(v19 + 24), (uint64_t)v25);
      uint64_t v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(void *)a2 + 112 * v21), (const WordLatticeLC *)v24);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v24);
      ++v17;
      v16 += 32;
      int v18 = v20;
    }
    while (v17 < *(unsigned int *)(a3 + 8));
  }
  uint64_t v22 = a1[20] + 16 * v15;
  return (*(_DWORD *)(a1[22] + 16 * *(unsigned int *)(v22 + 8))
                      + *(_DWORD *)(a1[11] + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_213E63138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void FstSearchLeafDurationBackoff::FstSearchLeafDurationBackoff(FstSearchLeafDurationBackoff *this, const int *a2, const int *a3)
{
  SearchItf::SearchItf(this);
  *(void *)uint64_t v5 = &unk_26C4E4080;
  *(_DWORD *)(v5 + 136) = *a2;
  *(_DWORD *)(v5 + 140) = *a3;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 248) = 0u;
  *(_OWORD *)(v5 + 232) = 0u;
  *(_OWORD *)(v5 + 216) = 0u;
  *(_OWORD *)(v5 + 264) = 0u;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_DWORD *)(v5 + 296) = -1;
  *(_DWORD *)(v5 + 304) = 1879048192;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_OWORD *)(v5 + 376) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(unsigned char *)(v5 + 428) = 0;
}

unint64_t FstSearchLeafDurationBackoff::maybeGeneratePelMaps(FstSearchLeafDurationBackoff *this, const PicMgr *a2)
{
  return PicMgr::getPelPhoneMap((unint64_t)a2, (uint64_t)this + 248, (uint64_t)this + 232);
}

uint64_t FstSearchLeafDurationBackoff::maybeInitDurModel(FstSearchLeafDurationBackoff *this, const PicMgr *a2, int a3)
{
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  PicMgr::getPelDurIdMap((uint64_t)a2, (uint64_t)&v15);
  if (a3 == 1) {
    uint64_t v6 = 56;
  }
  else {
    uint64_t v6 = 72;
  }
  uint64_t v7 = v16;
  unsigned int v8 = *((_DWORD *)this + 51);
  if (v16 <= v8)
  {
    *((_DWORD *)this + 50) = v16;
    if (!v7) {
      goto LABEL_13;
    }
  }
  else
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 192, v16 - v8, 0);
    *((_DWORD *)this + 50) = v7;
  }
  uint64_t v9 = 0;
  uint64_t v10 = v15;
  uint64_t v11 = *((void *)this + 24);
  do
  {
    if (!(_WORD)v9 || (uint64_t v12 = *(unsigned __int16 *)(v10 + 2 * v9), v12 == 0xFFFF)) {
      __int16 v13 = 0;
    }
    else {
      __int16 v13 = *(_WORD *)(*(void *)((char *)a2 + v6) + 2 * v12);
    }
    *(_WORD *)(v11 + 2 * v9++) = v13;
  }
  while (v7 != v9);
LABEL_13:
  *((unsigned char *)this + 208) = *((unsigned char *)a2 + 8);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 3);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v15);
}

void sub_213E632E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int64x2_t FstSearchLeafDurationBackoff::advanceDeltas(FstSearchLeafDurationBackoff *this, int a2, int a3, SearchStats *a4, int a5)
{
  int v8 = a2;
  v139[0] = a2;
  int64x2_t v137 = 0u;
  int64x2_t v138 = 0u;
  SnapTime::recordTime((SnapTime *)&v137, 1, 0, 0, 0);
  uint64_t v99 = (int *)((char *)this + 304);
  *((_DWORD *)this + 76) = a3;
  int v100 = *((_DWORD *)this + 2);
  unint64_t v10 = *((unsigned int *)this + 68);
  if (v10)
  {
    unsigned int v11 = 0;
    unsigned int v12 = 0;
    unint64_t v13 = 0;
    int v110 = *((_DWORD *)this + 53);
    int v121 = (uint64_t *)((char *)this + 216);
    int v94 = *((unsigned __int8 *)this + 208);
    uint64_t v98 = (char *)this + 280;
    do
    {
      uint64_t v14 = *((void *)this + 33);
      uint64_t v15 = *((void *)this + 5);
      uint64_t v16 = 36 * v13;
      while (1)
      {
        uint64_t v17 = *(unsigned int *)(v14 + v16 + 4);
        if (*(_DWORD *)(v15 + 160) != v17) {
          break;
        }
        ++v13;
        v16 += 36;
        if (v13 >= v10) {
          goto LABEL_78;
        }
      }
      unsigned int v112 = v12;
      int v97 = v8;
      uint64_t v96 = a4;
      int v95 = a5;
      uint64_t v111 = *(unsigned int *)(v14 + v16 + 4);
      if (*(_DWORD *)(v15 + 140) <= (int)v17) {
        goto LABEL_19;
      }
      if (*((_DWORD *)this + 19) + *((_DWORD *)this + 76) >= 5000) {
        int v18 = 5000;
      }
      else {
        int v18 = *((_DWORD *)this + 19) + *((_DWORD *)this + 76);
      }
      int ScoreAllowBackoff_updateNodeInSequence = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(v14 + v16 + 12), *(_DWORD *)(v14 + v16), v18);
      uint64_t v20 = *((void *)this + 33) + v16;
      __int16 v21 = *(_WORD *)(v20 + 12);
      int v22 = *(_DWORD *)(v20 + 28);
      int v23 = *(_DWORD *)(v20 + 32);
      int v24 = v94;
      if (v22 >= 1) {
        int v24 = v94 - v22;
      }
      int v25 = v24 & ((v22 - v94) >> 31);
      if (*(_WORD *)(v20 + 12))
      {
        v23 += v25;
        v22 -= v94;
      }
      int v117 = v22;
      int v119 = v23;
      int v26 = *(_WORD *)(v20 + 12) ? v25 : 0;
      int v27 = v26 + ScoreAllowBackoff_updateNodeInSequence;
      if (v26 + ScoreAllowBackoff_updateNodeInSequence - v100 <= *v99)
      {
        uint64_t v29 = *(void *)(v20 + 4);
        __int16 v113 = *(_WORD *)(v20 + 14);
        unsigned int v30 = *(_DWORD *)(v20 + 20);
        int v107 = *(_DWORD *)(v20 + 16);
        unsigned int v108 = v11;
        uint64_t v31 = *(unsigned __int16 *)(v20 + 24);
        __int16 v105 = *(_WORD *)(v20 + 26);
        if (*v99 > v27) {
          int *v99 = v27;
        }
        unsigned int v32 = *((_DWORD *)this + 56);
        unsigned int v33 = v32;
        int v28 = v100;
        __int16 v115 = v31;
        if (v31)
        {
          uint64_t v34 = *v121;
          uint64_t v35 = v31;
          unsigned int v33 = *((_DWORD *)this + 56);
          do
          {
            __int16 v36 = *(_WORD *)(v34 + 2 * v30);
            if (v33 == *((_DWORD *)this + 57))
            {
              DgnPrimArray<short>::reallocElts((uint64_t)v121, 1, 1);
              unsigned int v33 = *((_DWORD *)this + 56);
              uint64_t v34 = *((void *)this + 27);
            }
            *(_WORD *)(v34 + 2 * v33++) = v36;
            *((_DWORD *)this + 56) = v33;
            ++v30;
            --v35;
          }
          while (v35);
        }
        if (v33 == *((_DWORD *)this + 57))
        {
          DgnPrimArray<short>::reallocElts((uint64_t)v121, 1, 1);
          unsigned int v33 = *((_DWORD *)this + 56);
        }
        *(_WORD *)(*((void *)this + 27) + 2 * v33) = v21;
        *((_DWORD *)this + 56) = v33 + 1;
        uint64_t v37 = *((unsigned int *)this + 72);
        unsigned int v11 = v108;
        if (v37 == *((_DWORD *)this + 73))
        {
          DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)v98, 1, 1);
          LODWORD(v37) = *((_DWORD *)this + 72);
        }
        uint64_t v38 = *((void *)this + 35) + 36 * v37;
        *(_DWORD *)uint64_t v38 = v27;
        *(void *)(v38 + 4) = v29;
        *(_WORD *)(v38 + 12) = v21;
        *(_WORD *)(v38 + 14) = v113;
        *(_DWORD *)(v38 + 16) = v107;
        *(_DWORD *)(v38 + 20) = v32;
        *(_WORD *)(v38 + 24) = v115 + 1;
        *(_WORD *)(v38 + 26) = v105;
        *(_DWORD *)(v38 + 28) = v117;
        *(_DWORD *)(v38 + 32) = v119;
        int v39 = *((_DWORD *)this + 72);
        *((_DWORD *)this + 72) = v39 + 1;
        if (v112 == 2 * *((_DWORD *)this + 4)) {
          unsigned int v11 = v39 + 1;
        }
        ++v112;
        uint64_t v17 = v111;
      }
      else
      {
LABEL_19:
        int v28 = v100;
      }
      unsigned int v40 = v17;
      do
      {
        uint64_t v41 = *((void *)this + 5);
        uint64_t v42 = *(void *)(v41 + 152);
        unsigned int v43 = *(_DWORD *)(v42 + 4 * v40);
        int v44 = *(_DWORD *)(v42 + 4 * (v40 + 1));
        int v45 = *(_DWORD *)(v41 + 140);
        if (v45 <= v44)
        {
          if (v45 <= (int)v17 && *((unsigned char *)this + 428) != 0)
          {
            unsigned int v65 = (v43 & 0xFFFFF) <= 0xFFFF3 ? v43 & 0xFFFFF : v43 & 0xFFFFF | 0xF00000;
            if (v65 != 16777210)
            {
              DgnString::DgnString((DgnString *)&v134);
              ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v65, (DgnString *)&v134, v66, v67, v68, v69, v70);
              uint64_t v75 = &unk_214099300;
              if (v134.i32[2]) {
                uint64_t v75 = (void *)v134.i64[0];
              }
              xprintf("Seed from state %d score %d trace %d, %s\n", v71, v72, v73, v74, v17, *(unsigned int *)(*((void *)this + 33) + v16), *(unsigned int *)(*((void *)this + 33) + v16 + 8), v75);
              MiniFst::seed((uint64_t)this + 312, *(_DWORD *)(*((void *)this + 33) + v16), 0, *(_DWORD *)(*((void *)this + 33) + v16 + 8), v44);
              DgnString::~DgnString((DgnString *)&v134);
            }
          }
        }
        else
        {
          if (*((_DWORD *)this + 19) + *((_DWORD *)this + 76) >= 5000) {
            int v46 = 5000;
          }
          else {
            int v46 = *((_DWORD *)this + 19) + *((_DWORD *)this + 76);
          }
          int v47 = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), (unsigned __int16)*(_DWORD *)(v42 + 4 * v40), *(_DWORD *)(*((void *)this + 33) + v16) + ((*(_DWORD *)(v42 + 4 * v40) >> 20) & 0x3FFu), v46);
          uint64_t v48 = *((void *)this + 33) + v16;
          if ((_WORD)v43) {
            int v50 = *(__int16 *)(*((void *)this + 24) + 2 * (unsigned __int16)v43);
          }
          else {
            int v50 = 0;
          }
          int v120 = v50;
          if ((_WORD)v43)
          {
            int v49 = *(__int16 *)(*((void *)this + 24) + 2 * (unsigned __int16)v43);
            int v51 = v49 & (v49 >> 31);
          }
          else
          {
            int v51 = 0;
          }
          int v52 = v110;
          if (!(_WORD)v43) {
            int v52 = 0;
          }
          int v118 = (*(_DWORD *)(v48 + 28) & ~(*(int *)(v48 + 28) >> 31)) - v51 + v52;
          int v53 = v118 + v47;
          int v54 = *((_DWORD *)this + 76);
          if (v118 + v47 - v28 <= v54)
          {
            unsigned int v109 = v11;
            __int16 v106 = *(_WORD *)(v48 + 14);
            unsigned int v55 = *(_DWORD *)(v48 + 20);
            int v102 = *(_DWORD *)(v48 + 16);
            int v103 = *(_DWORD *)(v48 + 8);
            uint64_t v56 = *(unsigned __int16 *)(v48 + 24);
            __int16 v104 = *(_WORD *)(v48 + 26);
            int v101 = *(_DWORD *)(v48 + 32);
            if (v54 > v53) {
              int *v99 = v53;
            }
            unsigned int v57 = *((_DWORD *)this + 56);
            unsigned int v116 = v57;
            __int16 v114 = v56;
            if (v56)
            {
              uint64_t v58 = *v121;
              uint64_t v59 = v56;
              unsigned int v57 = *((_DWORD *)this + 56);
              do
              {
                __int16 v60 = *(_WORD *)(v58 + 2 * v55);
                if (v57 == *((_DWORD *)this + 57))
                {
                  DgnPrimArray<short>::reallocElts((uint64_t)v121, 1, 1);
                  unsigned int v57 = *((_DWORD *)this + 56);
                  uint64_t v58 = *((void *)this + 27);
                }
                *(_WORD *)(v58 + 2 * v57++) = v60;
                *((_DWORD *)this + 56) = v57;
                ++v55;
                --v59;
              }
              while (v59);
            }
            if (v57 == *((_DWORD *)this + 57))
            {
              DgnPrimArray<short>::reallocElts((uint64_t)v121, 1, 1);
              unsigned int v57 = *((_DWORD *)this + 56);
            }
            *(_WORD *)(*((void *)this + 27) + 2 * v57) = v43;
            *((_DWORD *)this + 56) = v57 + 1;
            uint64_t v61 = *((unsigned int *)this + 72);
            unsigned int v11 = v109;
            int v28 = v100;
            if (v61 == *((_DWORD *)this + 73))
            {
              DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)v98, 1, 1);
              LODWORD(v61) = *((_DWORD *)this + 72);
            }
            uint64_t v62 = *((void *)this + 35) + 36 * v61;
            *(_DWORD *)uint64_t v62 = v53;
            *(_DWORD *)(v62 + 4) = v44;
            *(_DWORD *)(v62 + 8) = v103;
            *(_WORD *)(v62 + 12) = v43;
            *(_WORD *)(v62 + 14) = v106;
            *(_DWORD *)(v62 + 16) = v102 + ((v43 >> 20) & 0x3FF);
            *(_DWORD *)(v62 + 20) = v116;
            *(_WORD *)(v62 + 24) = v114 + 1;
            *(_WORD *)(v62 + 26) = v104;
            *(_DWORD *)(v62 + 28) = v120;
            *(_DWORD *)(v62 + 32) = v118 + v101;
            int v63 = *((_DWORD *)this + 72);
            *((_DWORD *)this + 72) = v63 + 1;
            if (v112 == 2 * *((_DWORD *)this + 4)) {
              unsigned int v11 = v63 + 1;
            }
            ++v112;
          }
          uint64_t v17 = v111;
        }
        v40 += 2;
      }
      while ((v43 & 0x80000000) == 0);
      unint64_t v13 = (v13 + 1);
      unint64_t v10 = *((unsigned int *)this + 68);
      int v8 = v97;
      a4 = v96;
      a5 = v95;
      unsigned int v12 = v112;
    }
    while (v13 < v10);
  }
  else
  {
    unsigned int v12 = 0;
    unsigned int v11 = 0;
  }
LABEL_78:
  int v136 = *((_DWORD *)this + 76) + v100;
  if (*((unsigned char *)this + 428)) {
    MiniFst::updateFrame((char *)this + 312, v99, v100, v8);
  }
  int64x2_t v134 = 0u;
  int64x2_t v135 = 0u;
  SnapTime::recordTime((SnapTime *)&v134, 1, 0, 0, 0);
  int64x2_t v134 = vsubq_s64(v134, v137);
  int64x2_t v135 = vsubq_s64(v135, v138);
  uint64_t v76 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v77 = vaddq_s64(v76[1], v135);
  *uint64_t v76 = vaddq_s64(*v76, v134);
  v76[1] = v77;
  int64x2_t v132 = 0u;
  int64x2_t v133 = 0u;
  SnapTime::recordTime((SnapTime *)&v132, 1, 0, 0, 0);
  if (v12 > 2 * *((_DWORD *)this + 4)) {
    FstSearchLeafDurationBackoff::applyCutoffOnEmitting((uint64_t)this, v11, &v136);
  }
  int64x2_t v130 = 0u;
  int64x2_t v131 = 0u;
  SnapTime::recordTime((SnapTime *)&v130, 1, 0, 0, 0);
  int64x2_t v78 = vsubq_s64(v130, v132);
  uint64_t v79 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v80 = v79[3];
  int64x2_t v81 = vaddq_s64(v79[2], v78);
  int64x2_t v130 = v78;
  int64x2_t v131 = vsubq_s64(v131, v133);
  int64x2_t v82 = vaddq_s64(v80, v131);
  v79[2] = v81;
  v79[3] = v82;
  int64x2_t v128 = 0u;
  int64x2_t v129 = 0u;
  SnapTime::recordTime((SnapTime *)&v128, 1, 0, 0, 0);
  FstSearchLeafDurationBackoff::makeViterbiDecisionOnEmitting((uint64_t)this);
  unint64_t v83 = *((unsigned int *)this + 6);
  if (v83)
  {
    unint64_t v84 = *((unsigned int *)this + 68);
    if (v83 < v84) {
      mrec_nth_element<FstSearchLeafDurationBackoffcmpTok>(*((void *)this + 33), v83, v84);
    }
  }
  int64x2_t v126 = 0u;
  int64x2_t v127 = 0u;
  SnapTime::recordTime((SnapTime *)&v126, 1, 0, 0, 0);
  int64x2_t v85 = vsubq_s64(v126, v128);
  uint64_t v86 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v87 = v86[5];
  int64x2_t v88 = vaddq_s64(v86[4], v85);
  int64x2_t v126 = v85;
  int64x2_t v127 = vsubq_s64(v127, v129);
  int64x2_t v89 = vaddq_s64(v87, v127);
  v86[4] = v88;
  v86[5] = v89;
  int64x2_t v124 = 0u;
  int64x2_t v125 = 0u;
  SnapTime::recordTime((SnapTime *)&v124, 1, 0, 0, 0);
  *((_DWORD *)this + 72) = 0;
  uint64_t v90 = *((unsigned int *)this + 68);
  *((_DWORD *)this + 38) = v90;
  if (a4)
  {
    *((void *)a4 + 2) += v90;
    if (*((_DWORD *)a4 + 2) > v90) {
      LODWORD(v90) = *((_DWORD *)a4 + 2);
    }
    *((_DWORD *)a4 + 2) = v90;
  }
  if (*((unsigned char *)this + 428)) {
    FstSearchLeafDurationBackoff::seedFromMiniFst((uint64_t)this, v139);
  }
  if (a5) {
    FstSearchLeafDurationBackoff::propagateNulls(this, v136, v8, a4);
  }
  *((_DWORD *)this + 74) = v8;
  int64x2_t v122 = 0u;
  int64x2_t v123 = 0u;
  SnapTime::recordTime((SnapTime *)&v122, 1, 0, 0, 0);
  uint64_t v91 = (int64x2_t *)*((void *)this + 13);
  int64x2_t result = vaddq_s64(v91[6], vsubq_s64(v122, v124));
  int64x2_t v93 = vaddq_s64(v91[7], vsubq_s64(v123, v125));
  v91[6] = result;
  v91[7] = v93;
  return result;
}

void sub_213E63B6C(_Unwind_Exception *exception_object)
{
}

uint64_t FstSearchLeafDurationBackoff::applyCutoffOnEmitting(uint64_t this, unsigned int a2, int *a3)
{
  unint64_t v4 = *(unsigned int *)(this + 288);
  if (v4 > a2)
  {
    uint64_t v6 = this;
    uint64_t v7 = (void *)(this + 280);
    uint64_t v8 = a2;
    this = mrec_nth_element<FstSearchLeafDurationBackoffcmpTok>(*(void *)(this + 280), a2, v4);
    int v9 = *(_DWORD *)(*v7 + 36 * a2);
    if (*a3 > v9) {
      *a3 = v9;
    }
    unsigned int v10 = *(_DWORD *)(v6 + 292);
    if (a2 > v10) {
      this = DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)v7, a2 - v10, 0);
    }
    uint64_t v11 = *(unsigned int *)(v6 + 288);
    if (v11 < a2)
    {
      uint64_t v12 = v8 - v11;
      uint64_t v13 = *v7 + 36 * v11 + 16;
      do
      {
        *(void *)(v13 - 16) = 0xFFFFFFFF00000000;
        *(_DWORD *)(v13 - 8) = -1;
        *(_WORD *)(v13 - 4) = -2;
        *(void *)uint64_t v13 = 0;
        *(_WORD *)(v13 + 8) = 0;
        *(void *)(v13 + 12) = 0;
        v13 += 36;
        --v12;
      }
      while (v12);
    }
    *(_DWORD *)(v6 + 288) = a2;
  }
  return this;
}

uint64_t FstSearchLeafDurationBackoff::makeViterbiDecisionOnEmitting(uint64_t this)
{
  uint64_t v1 = this;
  unint64_t v2 = *(unsigned int *)(this + 288);
  if (v2)
  {
    this = (uint64_t)mrec_qsort_r<FstSearchLateLatticeHashBackoffActiveToken>(*(char **)(this + 280), v2, 36);
    unint64_t v3 = *(unsigned int *)(v1 + 288);
    *(_DWORD *)(v1 + 272) = 0;
    if (v3)
    {
      uint64_t v4 = 0;
      unsigned int v5 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v7 = *(void *)(v1 + 280);
        if (!v4 || *(_DWORD *)(v7 + v4 + 4) != *(_DWORD *)(v7 + v4 - 32))
        {
          if (v5 == *(_DWORD *)(v1 + 276))
          {
            this = DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts(v1 + 264, 1, 1);
            unsigned int v5 = *(_DWORD *)(v1 + 272);
          }
          uint64_t v8 = *(void *)(v1 + 264) + 36 * v5;
          long long v9 = *(_OWORD *)(v7 + v4);
          long long v10 = *(_OWORD *)(v7 + v4 + 16);
          *(_DWORD *)(v8 + 32) = *(_DWORD *)(v7 + v4 + 32);
          *(_OWORD *)uint64_t v8 = v9;
          *(_OWORD *)(v8 + 16) = v10;
          unsigned int v5 = *(_DWORD *)(v1 + 272) + 1;
          *(_DWORD *)(v1 + 272) = v5;
          unint64_t v3 = *(unsigned int *)(v1 + 288);
        }
        v4 += 36;
      }
    }
  }
  else
  {
    *(_DWORD *)(this + 272) = 0;
  }
  return this;
}

uint64_t mrec_nth_element<FstSearchLeafDurationBackoffcmpTok>(uint64_t result, unint64_t a2, unint64_t a3)
{
  if (a3 >= 2)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = 0;
      unsigned int v5 = (_DWORD *)(result + 36 * v3);
      uint64_t v6 = &v5[9 * (a3 >> 1)];
      do
      {
        char v7 = *((unsigned char *)v5 + v4);
        *((unsigned char *)v5 + v4) = *((unsigned char *)v6 + v4);
        *((unsigned char *)v6 + v4++) = v7;
      }
      while (v4 != 36);
      uint64_t v8 = (_DWORD *)(result + 36 * (v3 + a3) - 36);
      long long v9 = (_DWORD *)(result + 36 * v3);
      do
      {
        long long v10 = v9 + 9;
        while (1)
        {
          long long v9 = v10;
          if (v10 >= v8) {
            break;
          }
          v10 += 9;
          if (*v9 > *v5)
          {
            uint64_t v11 = (char *)v9;
            while (*v8 >= *v5)
            {
              v8 -= 9;
              if (v9 >= v8) {
                goto LABEL_16;
              }
            }
            for (uint64_t i = 0; i != 36; ++i)
            {
              char v13 = *v11;
              *v11++ = *((unsigned char *)v8 + i);
              *((unsigned char *)v8 + i) = v13;
            }
            v8 -= 9;
            break;
          }
        }
LABEL_16:
        ;
      }
      while (v9 < v8);
      if (*v9 > *v5) {
        v9 -= 9;
      }
      if (v9 > v5)
      {
        for (uint64_t j = 0; j != 36; ++j)
        {
          char v15 = *((unsigned char *)v9 + j);
          *((unsigned char *)v9 + j) = *((unsigned char *)v5 + j);
          *((unsigned char *)v5 + j) = v15;
        }
      }
      unint64_t v16 = ((char *)v9 - (char *)v5) / 0x24uLL;
      if (v16 <= a2)
      {
        if (v16 >= a2) {
          return result;
        }
        unint64_t v17 = v16 + 1;
        v3 += v17;
        a2 -= v17;
        unint64_t v16 = a3 - v17;
      }
      a3 = v16;
    }
    while (v16 > 1);
  }
  return result;
}

uint64_t FstSearchLeafDurationBackoff::seedFromMiniFst(uint64_t this, int *a2)
{
  if (*(unsigned char *)(this + 428))
  {
    uint64_t v2 = this;
    unsigned int v3 = *(_DWORD *)(this + 336);
    if (v3 >= *(_DWORD *)(this + 20)) {
      unsigned int v3 = *(_DWORD *)(this + 20);
    }
    if (v3)
    {
      uint64_t v5 = 0;
      unsigned int v6 = 0;
      uint64_t v20 = this + 264;
      __int16 v21 = (void *)(this + 160);
      do
      {
        char v7 = (int *)(*(void *)(v2 + 328) + v5);
        int v8 = *v7;
        int v9 = v7[6];
        int v10 = v7[7];
        int v11 = v7[2];
        v22[0] = 0;
        v22[1] = 0;
        if ((v11 & 0x80000000) == 0)
        {
          while (1)
            ;
        }
        unsigned int v12 = -2 - v11;
        if (v10 == 16777213)
        {
          int v10 = 16777209;
          if (*(_DWORD *)(*v21 + 36 * v12) == 16777209) {
            unsigned int v12 = *(_DWORD *)(*(void *)(v2 + 176) + 24 * *(unsigned int *)(*v21 + 36 * v12 + 8) + 8);
          }
        }
        int v13 = *a2;
        uint64_t v14 = *(unsigned int *)(v2 + 168);
        if (v14 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)v21, 1, 1);
          LODWORD(v14) = *(_DWORD *)(v2 + 168);
        }
        uint64_t v15 = *(void *)(v2 + 160) + 36 * v14;
        *(_DWORD *)uint64_t v15 = v10;
        *(_DWORD *)(v15 + 4) = v13;
        *(_DWORD *)(v15 + 8) = -1;
        *(_DWORD *)(v15 + 12) = v8;
        *(_DWORD *)(v15 + 20) = 0;
        *(_DWORD *)(v15 + 24) = 0;
        *(_DWORD *)(v15 + 16) = v12;
        *(_WORD *)(v15 + 28) = 0;
        *(_DWORD *)(v15 + 32) = 0;
        int v16 = *(_DWORD *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v16 + 1;
        uint64_t v17 = *(unsigned int *)(v2 + 272);
        if (v17 == *(_DWORD *)(v2 + 276))
        {
          DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts(v20, 1, 1);
          LODWORD(v17) = *(_DWORD *)(v2 + 272);
        }
        uint64_t v18 = *(void *)(v2 + 264) + 36 * v17;
        *(_DWORD *)uint64_t v18 = v8;
        *(_DWORD *)(v18 + 4) = v9;
        *(_DWORD *)(v18 + 8) = v16;
        *(_WORD *)(v18 + 12) = -2;
        *(void *)(v18 + 16) = 0;
        *(_WORD *)(v18 + 24) = 0;
        *(void *)(v18 + 28) = 0;
        ++*(_DWORD *)(v2 + 272);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v22);
        ++v6;
        unsigned int v19 = *(_DWORD *)(v2 + 336);
        if (v19 >= *(_DWORD *)(v2 + 20)) {
          unsigned int v19 = *(_DWORD *)(v2 + 20);
        }
        v5 += 36;
      }
      while (v6 < v19);
    }
  }
  return this;
}

void sub_213E64084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void *FstSearchLeafDurationBackoff::propagateNulls(FstSearchLeafDurationBackoff *this, int a2, int a3, SearchStats *a4)
{
  int v5 = *((_DWORD *)this + 42);
  int64x2_t result = (void *)((char *)this + 264);
  unsigned int v7 = *((_DWORD *)this + 68);
  int v64 = result;
  if (!v7)
  {
    unsigned int v43 = *((_DWORD *)this + 38);
    if (a4) {
      goto LABEL_42;
    }
    goto LABEL_43;
  }
  int v53 = v5;
  unint64_t v8 = 0;
  int v54 = a4;
  int v63 = a2;
  do
  {
    uint64_t v9 = *(unsigned int *)(*((void *)this + 33) + 36 * v8 + 4);
    uint64_t v10 = *((void *)this + 5);
    if (*(_DWORD *)(v10 + 160) != v9
      && (*(_DWORD *)(v10 + 140) <= (int)v9 || (*(_DWORD *)(*(void *)(v10 + 152) + 4 * v9) & 0x40000000) != 0))
    {
      unsigned int v11 = *(_DWORD *)(*((void *)this + 33) + 36 * v8 + 4);
      unsigned int v61 = v11;
      unint64_t v62 = v8;
      do
      {
        uint64_t v12 = *((void *)this + 5);
        uint64_t v13 = *(void *)(v12 + 152);
        unsigned int v14 = *(_DWORD *)(v13 + 4 * v11);
        int v15 = *(_DWORD *)(v13 + 4 * (v11 + 1));
        int v16 = *(_DWORD *)(v12 + 140);
        if (v16 > v15) {
          goto LABEL_32;
        }
        int v17 = (v14 & 0xFFFFF) <= 0xFFFF3 ? v14 & 0xFFFFF : v14 & 0xFFFFF | 0xF00000;
        if (v16 <= (int)v9 && v17 != 16777210) {
          goto LABEL_32;
        }
        int v19 = (v14 >> 20) & 0x3FF;
        uint64_t v20 = *result;
        uint64_t v21 = *result + 36 * v8;
        int v22 = *(_DWORD *)v21 + v19;
        if (v22 > a2) {
          goto LABEL_32;
        }
        int v23 = *(_DWORD *)(v21 + 8);
        __int16 v24 = *(_WORD *)(v21 + 12);
        __int16 v25 = *(_WORD *)(v21 + 14);
        int v27 = *(_DWORD *)(v21 + 16);
        int v26 = *(_DWORD *)(v21 + 20);
        __int16 v28 = *(_WORD *)(v21 + 24);
        __int16 v29 = *(_WORD *)(v21 + 26);
        int v30 = *(_DWORD *)(v21 + 32);
        int v31 = v27 + v19;
        if (v17 == 16777210)
        {
          if (v7 != *((_DWORD *)this + 69)) {
            goto LABEL_31;
          }
        }
        else
        {
          if (v17 == 16777214) {
            int v32 = v27 + v19;
          }
          else {
            int v32 = 0;
          }
          if (v17 == 16777214) {
            int v33 = 0;
          }
          else {
            int v33 = v31;
          }
          uint64_t v34 = *((unsigned int *)this + 42);
          if (v34 == *((_DWORD *)this + 43))
          {
            __int16 v65 = v24;
            __int16 v69 = v25;
            __int16 v58 = v29;
            int v59 = v26;
            int v56 = v33;
            int v57 = v23;
            int v67 = v30;
            int v55 = v32;
            DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)this + 160, 1, 1);
            int v32 = v55;
            int v33 = v56;
            __int16 v24 = v65;
            int v30 = v67;
            int v23 = v57;
            __int16 v29 = v58;
            int v26 = v59;
            __int16 v25 = v69;
            a2 = v63;
            int64x2_t result = v64;
            LODWORD(v34) = *((_DWORD *)this + 42);
          }
          __int16 v35 = 0;
          int v36 = 0;
          uint64_t v37 = *((void *)this + 20) + 36 * v34;
          *(_DWORD *)uint64_t v37 = v17;
          *(_DWORD *)(v37 + 4) = a3;
          *(_DWORD *)(v37 + 8) = -1;
          *(_DWORD *)(v37 + 12) = v22 - v32;
          *(_DWORD *)(v37 + 16) = v23;
          *(_DWORD *)(v37 + 20) = v33;
          *(_DWORD *)(v37 + 24) = v26;
          *(_WORD *)(v37 + 28) = v28;
          *(_DWORD *)(v37 + 32) = v30;
          int v23 = *((_DWORD *)this + 42);
          *((_DWORD *)this + 42) = v23 + 1;
          unsigned int v7 = *((_DWORD *)this + 68);
          __int16 v28 = 0;
          int v30 = 0;
          if (v7 != *((_DWORD *)this + 69)) {
            goto LABEL_30;
          }
        }
        int v68 = v30;
        __int16 v70 = v25;
        __int16 v38 = v24;
        int v39 = v26;
        int v66 = v31;
        __int16 v40 = v29;
        int v41 = v23;
        DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)result, 1, 1);
        int v23 = v41;
        __int16 v29 = v40;
        int v31 = v66;
        int v36 = v68;
        int v26 = v39;
        __int16 v25 = v70;
        LODWORD(v9) = v61;
        unint64_t v8 = v62;
        __int16 v24 = v38;
        a2 = v63;
        int64x2_t result = v64;
        unsigned int v7 = *((_DWORD *)this + 68);
        __int16 v35 = v28;
LABEL_30:
        uint64_t v20 = *result;
        __int16 v28 = v35;
        int v30 = v36;
LABEL_31:
        uint64_t v42 = v20 + 36 * v7;
        *(_DWORD *)uint64_t v42 = v22;
        *(_DWORD *)(v42 + 4) = v15;
        *(_DWORD *)(v42 + 8) = v23;
        *(_WORD *)(v42 + 12) = v24;
        *(_WORD *)(v42 + 14) = v25;
        *(_DWORD *)(v42 + 16) = v31;
        *(_DWORD *)(v42 + 20) = v26;
        *(_WORD *)(v42 + 24) = v28;
        *(_WORD *)(v42 + 26) = v29;
        *(_DWORD *)(v42 + 28) = 0;
        *(_DWORD *)(v42 + 32) = v30;
        unsigned int v7 = *((_DWORD *)this + 68) + 1;
        *((_DWORD *)this + 68) = v7;
LABEL_32:
        v11 += 2;
      }
      while ((v14 & 0x80000000) == 0);
    }
    ++v8;
  }
  while (v8 < v7);
  unsigned int v43 = *((_DWORD *)this + 38);
  if (v7 > v43)
  {
    mrec_qsort_r<FstSearchLateLatticeHashBackoffActiveToken>((char *)(*((void *)this + 33) + 36 * v43), v7 - v43, 36);
    int64x2_t result = v64;
    unsigned int v43 = *((_DWORD *)this + 38);
    unsigned int v7 = *((_DWORD *)this + 68);
  }
  a4 = v54;
  int v5 = v53;
  if (v43 < v7)
  {
    unint64_t v44 = v43;
    uint64_t v45 = 36 * v43;
    do
    {
      uint64_t v46 = *result + v45;
      if (*(_DWORD *)(v46 + 4) != *(_DWORD *)(*result + 36 * (v44 - 1) + 4))
      {
        uint64_t v47 = *result + 36 * v43;
        long long v48 = *(_OWORD *)v46;
        long long v49 = *(_OWORD *)(v46 + 16);
        *(_DWORD *)(v47 + 32) = *(_DWORD *)(v46 + 32);
        *(_OWORD *)uint64_t v47 = v48;
        *(_OWORD *)(v47 + 16) = v49;
        ++v43;
        unsigned int v7 = *((_DWORD *)this + 68);
      }
      ++v44;
      v45 += 36;
    }
    while (v44 < v7);
  }
  if (v54) {
LABEL_42:
  }
    *((_DWORD *)a4 + 1) += *((_DWORD *)this + 42) - v5;
LABEL_43:
  unsigned int v50 = *((_DWORD *)this + 69);
  if (v43 > v50)
  {
    DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)result, v43 - v50, 0);
    int64x2_t result = v64;
    unsigned int v7 = *((_DWORD *)this + 68);
  }
  if (v7 < v43)
  {
    unint64_t v51 = v43 - (unint64_t)v7;
    uint64_t v52 = *result + 36 * v7 + 16;
    do
    {
      *(void *)(v52 - 16) = 0xFFFFFFFF00000000;
      *(_DWORD *)(v52 - 8) = -1;
      *(_WORD *)(v52 - 4) = -2;
      *(void *)uint64_t v52 = 0;
      *(_WORD *)(v52 + 8) = 0;
      *(void *)(v52 + 12) = 0;
      v52 += 36;
      --v51;
    }
    while (v51);
  }
  *((_DWORD *)this + 68) = v43;
  return result;
}

uint64_t FstSearchLeafDurationBackoff::collectTraces(FstSearchLeafDurationBackoff *this)
{
  uint64_t v2 = *((unsigned int *)this + 42);
  unsigned int v53 = 0;
  uint64_t v52 = 0;
  if (v2)
  {
    unsigned int v3 = MemChunkAlloc(4 * v2, 0);
    unint64_t v4 = 0;
    uint64_t v52 = v3;
    unsigned int v53 = v2;
    do
      *((_DWORD *)v3 + v4++) = 0;
    while (v4 < v53);
  }
  unint64_t v5 = *((unsigned int *)this + 68);
  if (v5)
  {
    unint64_t v6 = 0;
    unsigned int v7 = v52;
    unint64_t v8 = (unsigned int *)(*((void *)this + 33) + 8);
    do
    {
      unsigned int v10 = *v8;
      v8 += 9;
      uint64_t v9 = v10;
      if (v10 != -1)
      {
        *((_DWORD *)v7 + v9) = 1;
        unint64_t v5 = *((unsigned int *)this + 68);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  int v11 = *((_DWORD *)this + 42);
  if (v11)
  {
    uint64_t v12 = (uint64_t *)((char *)this + 160);
    uint64_t v13 = v52;
    unsigned int v14 = v11 - 1;
    do
    {
      uint64_t v15 = v14;
      if (*((_DWORD *)v13 + v14))
      {
        uint64_t v16 = *(unsigned int *)(*v12 + 36 * v14 + 16);
        if (v16 != -1) {
          *((_DWORD *)v13 + v16) = 1;
        }
      }
      --v14;
    }
    while (v15);
    unsigned int v17 = *((_DWORD *)this + 42);
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    if (v17)
    {
      uint64_t v18 = 0;
      unint64_t v19 = 0;
      unsigned int v20 = 0;
      do
      {
        uint64_t v21 = v52;
        if (*((_DWORD *)v52 + v19))
        {
          uint64_t v22 = *v12;
          if (v19 != v20)
          {
            int v23 = (long long *)(v22 + 36 * v19);
            uint64_t v24 = v22 + 36 * v20;
            long long v25 = *v23;
            long long v26 = v23[1];
            *(_DWORD *)(v24 + 32) = *((_DWORD *)v23 + 8);
            *(_OWORD *)uint64_t v24 = v25;
            *(_OWORD *)(v24 + 16) = v26;
            uint64_t v22 = *v12;
          }
          uint64_t v27 = v22 + 36 * v20;
          unsigned int v30 = *(_DWORD *)(v27 + 16);
          __int16 v28 = (_DWORD *)(v27 + 16);
          uint64_t v29 = v30;
          if (v30 != -1) {
            *__int16 v28 = *((_DWORD *)v21 + v29);
          }
          int v31 = v51;
          if (*(_WORD *)(v22 + 36 * v20 + 28))
          {
            unsigned int v32 = 0;
            unsigned int v33 = v51;
            do
            {
              __int16 v34 = *(_WORD *)(*((void *)this + 27) + 2 * (v32 + *(_DWORD *)(v22 + 36 * v20 + 24)));
              if (v33 == HIDWORD(v51))
              {
                DgnPrimArray<short>::reallocElts((uint64_t)&v50, 1, 1);
                unsigned int v33 = v51;
                uint64_t v18 = v50;
                uint64_t v22 = *v12;
              }
              *(_WORD *)(v18 + 2 * v33++) = v34;
              LODWORD(v51) = v33;
              ++v32;
            }
            while (v32 < *(unsigned __int16 *)(v22 + 36 * v20 + 28));
          }
          *(_DWORD *)(v22 + 36 * v20 + 24) = v31;
          *((_DWORD *)v52 + v19) = v20++;
          unsigned int v17 = *((_DWORD *)this + 42);
        }
        ++v19;
      }
      while (v19 < v17);
      unsigned int v35 = *((_DWORD *)this + 43);
      if (v20 > v35)
      {
        DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)this + 160, v20 - v35, 0);
        unsigned int v17 = *((_DWORD *)this + 42);
      }
      if (v17 < v20)
      {
        unint64_t v36 = v20 - (unint64_t)v17;
        uint64_t v37 = (_DWORD *)(*v12 + 36 * v17 + 32);
        do
        {
          *((_OWORD *)v37 - 2) = xmmword_2140992B0;
          *((void *)v37 - 2) = 0xFFFFFFFFLL;
          *(v37 - 2) = 0;
          *((_WORD *)v37 - 2) = 0;
          *uint64_t v37 = 0;
          v37 += 9;
          --v36;
        }
        while (v36);
      }
    }
    else
    {
      unsigned int v20 = 0;
    }
  }
  else
  {
    unsigned int v20 = 0;
    uint64_t v50 = 0;
    uint64_t v51 = 0;
  }
  *((_DWORD *)this + 42) = v20;
  unint64_t v38 = *((unsigned int *)this + 68);
  if (v38)
  {
    unint64_t v39 = 0;
    uint64_t v40 = v51;
    uint64_t v41 = *((void *)this + 33);
    do
    {
      if (*(_WORD *)(v41 + 36 * v39 + 24))
      {
        unsigned int v42 = 0;
        LODWORD(v43) = v40;
        do
        {
          __int16 v44 = *(_WORD *)(*((void *)this + 27) + 2 * (v42 + *(_DWORD *)(v41 + 36 * v39 + 20)));
          if (v43 == HIDWORD(v51))
          {
            DgnPrimArray<short>::reallocElts((uint64_t)&v50, 1, 1);
            LODWORD(v43) = v51;
            uint64_t v41 = *((void *)this + 33);
          }
          *(_WORD *)(v50 + 2 * v43) = v44;
          uint64_t v43 = (v43 + 1);
          LODWORD(v51) = v43;
          ++v42;
        }
        while (v42 < *(unsigned __int16 *)(v41 + 36 * v39 + 24));
        unint64_t v38 = *((unsigned int *)this + 68);
      }
      else
      {
        uint64_t v43 = v40;
      }
      *(_DWORD *)(v41 + 36 * v39++ + 20) = v40;
      uint64_t v40 = v43;
    }
    while (v39 < v38);
  }
  else
  {
    LODWORD(v43) = v51;
  }
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 216, &v50, 0, v43);
  uint64_t v45 = *((unsigned int *)this + 68);
  if (v45)
  {
    uint64_t v46 = v52;
    uint64_t v47 = (_DWORD *)(*((void *)this + 33) + 8);
    do
    {
      uint64_t v48 = *v47;
      if (v48 != -1) {
        *uint64_t v47 = *((_DWORD *)v46 + v48);
      }
      v47 += 9;
      --v45;
    }
    while (v45);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v50);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v52);
}

void sub_213E64848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

int64x2_t FstSearchLeafDurationBackoff::vite(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  FstSearchLeafDurationBackoff::advanceDeltas((FstSearchLeafDurationBackoff *)this, a2, a3, a4, a5);
  int64x2_t v13 = 0u;
  int64x2_t v14 = 0u;
  SnapTime::recordTime((SnapTime *)&v13, 1, 0, 0, 0);
  if (a2 >= 1)
  {
    unsigned int v7 = *((_DWORD *)this + 18);
    if (v7)
    {
      if (!(a2 % v7)) {
        FstSearchLeafDurationBackoff::collectTraces((FstSearchLeafDurationBackoff *)this);
      }
    }
  }
  int64x2_t v11 = 0u;
  int64x2_t v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  unint64_t v8 = this[13];
  int64x2_t result = vaddq_s64(v8[14], vsubq_s64(v11, v13));
  int64x2_t v10 = vaddq_s64(v8[15], vsubq_s64(v12, v14));
  v8[14] = result;
  v8[15] = v10;
  return result;
}

_DWORD *FstSearchLeafDurationBackoff::reset(_DWORD *this)
{
  this[42] = 0;
  this[46] = 0;
  this[56] = 0;
  this[68] = 0;
  return this;
}

double FstSearchLeafDurationBackoff::doFrame(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  if (a3 >= 20000) {
    a3 = 20000;
  }
  *(void *)&double result = FstSearchLeafDurationBackoff::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearchLeafDurationBackoff::beginTopRecPassSyncRecog(FstSearchLeafDurationBackoff *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 312, a3, *((PelScoreCache **)this + 4));
    uint64_t result = ArcGraph::findBackoffState(*((void *)this + 5));
    *((_DWORD *)this + 106) = result;
    *((unsigned char *)this + 428) = 1;
  }
  return result;
}

uint64_t FstSearchLeafDurationBackoff::endTopRecPassSyncRecog(FstSearchLeafDurationBackoff *this)
{
  int64x2_t v10 = 0u;
  int64x2_t v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  FstSearchLeafDurationBackoff::generateTraceTokensFromTraces((unint64_t)this);
  int64x2_t v8 = 0u;
  int64x2_t v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  int64x2_t v2 = vsubq_s64(v8, v10);
  unsigned int v3 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v4 = v3[13];
  int64x2_t v5 = vaddq_s64(v3[12], v2);
  int64x2_t v8 = v2;
  int64x2_t v9 = vsubq_s64(v9, v11);
  int64x2_t v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + 76) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

unint64_t FstSearchLeafDurationBackoff::generateTraceTokensFromTraces(unint64_t this)
{
  uint64_t v1 = this;
  int64x2_t v2 = (void *)(this + 176);
  uint64_t v3 = *(unsigned int *)(this + 168);
  unsigned int v4 = *(_DWORD *)(this + 188);
  if (v3 > v4) {
    this = DgnArray<CWIDAC>::reallocElts(this + 176, v3 - v4, 0);
  }
  uint64_t v5 = *(unsigned int *)(v1 + 184);
  if (v5 < v3)
  {
    uint64_t v6 = v3 - v5;
    unsigned int v7 = (_DWORD *)(*v2 + 24 * v5 + 20);
    do
    {
      *(_OWORD *)(v7 - 5) = xmmword_2140992E0;
      *((_WORD *)v7 - 2) = 0;
      *unsigned int v7 = 0;
      v7 += 6;
      --v6;
    }
    while (v6);
  }
  *(_DWORD *)(v1 + 184) = v3;
  uint64_t v8 = *(unsigned int *)(v1 + 168);
  if (v8)
  {
    uint64_t v9 = 0;
    int v10 = 0;
    uint64_t v11 = *(void *)(v1 + 176);
    uint64_t v12 = 24 * v8;
    uint64_t v13 = *(void *)(v1 + 160) + 28;
    do
    {
      *(_DWORD *)(v13 - 20) = v10;
      float32x2x2_t v14 = *(float32x2x2_t *)(v13 - 16);
      unint64_t v15 = vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u64[0];
      uint64_t v16 = (float *)(v11 + v9);
      vst2_f32(v16, v14);
      v16 += 4;
      *(_WORD *)uint64_t v16 = *(_WORD *)v13;
      *(_DWORD *)(v11 + v9 + 20) = *(_DWORD *)(v13 + 4);
      ++v10;
      v9 += 24;
      v13 += 36;
    }
    while (v12 != v9);
  }
  return this;
}

void FstSearchLeafDurationBackoff::printSize(FstSearchLeafDurationBackoff *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v125);
  if (v126) {
    unint64_t v15 = v125;
  }
  else {
    unint64_t v15 = &unk_214099300;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v11, v12, v13, v14, a3, &unk_214099300, a3, &unk_214099300, v15);
  DgnString::~DgnString((DgnString *)&v125);
  if (a2 != -1) {
    xlprintf("%d ", v16, v17, v18, v19, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v16, v17, v18, v19, a3, &unk_214099300);
  uint64_t v20 = (a3 + 1);
  uint64_t v21 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v125);
  if (v126) {
    long long v26 = v125;
  }
  else {
    long long v26 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v22, v23, v24, v25, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v26, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v125);
  if (v126) {
    int v31 = v125;
  }
  else {
    int v31 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v27, v28, v29, v30, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v31, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v125);
  if (v126) {
    unint64_t v36 = v125;
  }
  else {
    unint64_t v36 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v32, v33, v34, v35, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v36, 4, 4, 0);
  uint64_t v121 = a2;
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v125);
  if (v126) {
    uint64_t v41 = v125;
  }
  else {
    uint64_t v41 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v37, v38, v39, v40, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v41, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  uint64_t v42 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v42 = 16;
  }
  uint64_t v43 = *((unsigned int *)this + 42);
  uint64_t v44 = 34 * v43;
  if ((int)v43 <= 0) {
    uint64_t v44 = 0;
  }
  uint64_t v45 = v44 + v42;
  uint64_t v46 = v44 + v42 + 34 * (*((_DWORD *)this + 43) - v43);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v125);
  if (v126) {
    uint64_t v51 = v125;
  }
  else {
    uint64_t v51 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v47, v48, v49, v50, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v51, v46, v45, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v46;
  *a5 += v45;
  uint64_t v52 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v52 = 16;
  }
  int v53 = *((_DWORD *)this + 46);
  uint64_t v54 = 22 * v53;
  if (v53 <= 0) {
    uint64_t v54 = 0;
  }
  uint64_t v55 = v54 + v52;
  uint64_t v56 = v54 + v52 + 22 * (*((_DWORD *)this + 47) - v53);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v125);
  if (v126) {
    unsigned int v61 = v125;
  }
  else {
    unsigned int v61 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v57, v58, v59, v60, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v61, v56, v55, 0);
  uint64_t v120 = a3;
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v56;
  *a5 += v55;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v62 = 12;
  }
  else {
    uint64_t v62 = 16;
  }
  uint64_t v63 = *((unsigned int *)this + 56);
  unsigned int v64 = *((_DWORD *)this + 57);
  if (v64 >= v63)
  {
    uint64_t v65 = 0;
    if ((int)v63 > 0) {
      uint64_t v62 = (v62 | 2) + 2 * (v63 - 1);
    }
    uint64_t v66 = v62 + 2 * (v64 - v63);
  }
  else
  {
    uint64_t v65 = 2 * v63;
    uint64_t v66 = v62;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2961, (DgnString *)&v125);
  if (v126) {
    uint64_t v71 = v125;
  }
  else {
    uint64_t v71 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v67, v68, v69, v70, v20, &unk_214099300, v21, v21, v71, v66, v62, v65);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v66;
  *a5 += v62;
  *a6 += v65;
  uint64_t v72 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v72 = 16;
  }
  uint64_t v73 = *((unsigned int *)this + 68);
  uint64_t v74 = 32 * v73;
  if ((int)v73 <= 0) {
    uint64_t v74 = 0;
  }
  uint64_t v75 = v74 | v72;
  uint64_t v76 = (v74 | v72) + 32 * (*((_DWORD *)this + 69) - v73);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v125);
  if (v126) {
    int64x2_t v81 = v125;
  }
  else {
    int64x2_t v81 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v77, v78, v79, v80, v20, &unk_214099300, v21, v21, v81, v76, v75, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v76;
  *a5 += v75;
  uint64_t v82 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v82 = 16;
  }
  uint64_t v83 = *((unsigned int *)this + 72);
  uint64_t v84 = 32 * v83;
  if ((int)v83 <= 0) {
    uint64_t v84 = 0;
  }
  uint64_t v85 = v84 | v82;
  uint64_t v86 = (v84 | v82) + 32 * (*((_DWORD *)this + 73) - v83);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v125);
  if (v126) {
    uint64_t v91 = v125;
  }
  else {
    uint64_t v91 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v87, v88, v89, v90, v20, &unk_214099300, v21, v21, v91, v86, v85, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v86;
  *a5 += v85;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v125);
  if (v126) {
    uint64_t v96 = v125;
  }
  else {
    uint64_t v96 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v92, v93, v94, v95, v20, &unk_214099300, v21, v21, v96, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v125);
  if (v126) {
    int v101 = v125;
  }
  else {
    int v101 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v97, v98, v99, v100, v20, &unk_214099300, v21, v21, v101, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v125);
  if (v126) {
    __int16 v106 = v125;
  }
  else {
    __int16 v106 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v102, v103, v104, v105, v20, &unk_214099300, v21, v21, v106, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  uint64_t v107 = sizeObject((uint64_t)this + 312, 0);
  uint64_t v108 = sizeObject((uint64_t)this + 312, 1);
  uint64_t v109 = sizeObject((uint64_t)this + 312, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v125);
  if (v126) {
    __int16 v114 = v125;
  }
  else {
    __int16 v114 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v110, v111, v112, v113, v20, &unk_214099300, v21, v21, v114, v107, v108, v109);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v107;
  *a5 += v108;
  *a6 += v109;
  unint64_t v123 = 0;
  unint64_t v124 = 0;
  SearchItf::printSize(this, v121, v20, &v124, &v123, &v123);
  *a4 += v124;
  *a5 += v123;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v125);
  if (v126) {
    int v119 = v125;
  }
  else {
    int v119 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v115, v116, v117, v118, v120, &unk_214099300, (35 - v120), (35 - v120), v119, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v125);
}

void sub_213E65334(_Unwind_Exception *a1)
{
  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t FstSearchLeafDurationBackoff::getBestTrace(uint64_t a1, void *a2, void *a3, int a4)
{
  if (a4) {
    unint64_t v4 = 0;
  }
  else {
    unint64_t v4 = *(unsigned int *)(a1 + 152);
  }
  unint64_t v5 = *(unsigned int *)(a1 + 272);
  if (v4 >= v5) {
    goto LABEL_21;
  }
  uint64_t v6 = 36 * v4;
  int v7 = 1879048192;
  uint64_t v8 = 0xFFFFFFFFLL;
  do
  {
    uint64_t v9 = *(void *)(a1 + 264);
    if (!a4 || (uint64_t v10 = *(unsigned int *)(v9 + v6 + 8), v10 == -1))
    {
      if (*(_DWORD *)(*(void *)(a1 + 40) + 160) != *(_DWORD *)(v9 + v6 + 4)) {
        goto LABEL_19;
      }
      uint64_t v10 = *(unsigned int *)(v9 + v6 + 8);
    }
    if (a2) {
      *(unsigned char *)(*a2 + v10) = 1;
    }
    if (a3) {
      *(unsigned char *)(*a3 + v10) = 1;
    }
    uint64_t v11 = *(void *)(a1 + 160) + 36 * v10;
    int v12 = *(_DWORD *)(v11 + 12) + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v11 + 4));
    if (v7 > v12) {
      uint64_t v8 = v10;
    }
    if (v7 >= v12) {
      int v7 = v12;
    }
    unint64_t v5 = *(unsigned int *)(a1 + 272);
LABEL_19:
    ++v4;
    v6 += 36;
  }
  while (v4 < v5);
  if (v8 == 0xFFFFFFFFLL)
  {
LABEL_21:
    uint64_t v13 = *(unsigned int *)(a1 + 168);
    uint64_t v8 = 0xFFFFFFFFLL;
    while (v13)
    {
      --v13;
      if ((a4 & 1) != 0 || *(_DWORD *)(*(void *)(a1 + 160) + 36 * v13) == 16777213)
      {
        if (a2) {
          *(unsigned char *)(*a2 + v13) = 1;
        }
        uint64_t v8 = v13;
        if (a3) {
          *(unsigned char *)(*a3 + v13) = 1;
        }
        return v8;
      }
    }
  }
  return v8;
}

BOOL FstSearchLeafDurationBackoff::findBestPath(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8 = *(unsigned int *)(a1 + 168);
  if (v8) {
    BOOL v9 = *(_DWORD *)(a3 + 8) == 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    *(void *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v8;
  }
  if (v8) {
    BOOL v10 = *(_DWORD *)(a2 + 8) == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    *(void *)a2 = MemChunkAlloc(v8, 0);
    *(_DWORD *)(a2 + 8) = v8;
LABEL_14:
    uint64_t v11 = 0;
    do
    {
      *(unsigned char *)(*(void *)a2 + v11) = 0;
      *(unsigned char *)(*(void *)a3 + v11++) = 0;
    }
    while (v8 != v11);
    goto LABEL_16;
  }
  if (v8) {
    goto LABEL_14;
  }
LABEL_16:
  unsigned int BestTrace = FstSearchLeafDurationBackoff::getBestTrace(a1, (void *)a2, (void *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1) {
    return 0;
  }
  uint64_t v13 = *(void *)(a1 + 160) + 36 * BestTrace;
  LODWORD(v13) = *(_DWORD *)(v13 + 12) + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v13 + 4));
  *a4 = v13;
  return v13 != 1879048192;
}

uint64_t FstSearchLeafDurationBackoff::createLatticeNodes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t *a6, void *a7)
{
  uint64_t v9 = *(unsigned int *)(a1 + 168);
  if (v9) {
    BOOL v10 = *(_DWORD *)(a2 + 8) == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    *(void *)a2 = MemChunkAlloc(4 * v9, 0);
    *(_DWORD *)(a2 + 8) = v9;
  }
  int Node = Lattice<WordLatticeLC>::createNode(a4);
  uint64_t result = a3;
  unsigned int v13 = *(_DWORD *)(a3 + 8);
  if (v13 == *(_DWORD *)(a3 + 12))
  {
    DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
    uint64_t result = a3;
    unsigned int v13 = *(_DWORD *)(a3 + 8);
  }
  *(_DWORD *)(*(void *)result + 4 * v13) = Node;
  ++*(_DWORD *)(result + 8);
  int v14 = *(_DWORD *)(a1 + 168);
  unint64_t v15 = a6;
  uint64_t v16 = (uint64_t *)a2;
  if (v14)
  {
    uint64_t v17 = (v14 - 1);
    uint64_t v18 = 36 * v17;
    uint64_t result = 0xFFFFFFFFLL;
    uint64_t v46 = a7;
    do
    {
      uint64_t v19 = *v16;
      *(_DWORD *)(*v16 + 4 * v17) = -1;
      uint64_t v20 = *v15;
      if (*(unsigned char *)(*v15 + v17))
      {
        uint64_t v21 = *(void *)(a1 + 160);
        uint64_t v22 = *(void *)(a1 + 88);
        int v23 = *(_DWORD *)(v22 + 4 * *(unsigned int *)(v21 + v18 + 4));
        if (*(unsigned char *)(*a7 + v17))
        {
          if (*(unsigned char *)(*v15 + v17) != 1 || result == -1)
          {
            int v25 = *(_DWORD *)(v22 + 4 * *(unsigned int *)(v21 + v18 + 4));
            unsigned int v26 = result;
            int v27 = Lattice<WordLatticeLC>::createNode(a4);
            uint64_t v28 = a3;
            uint64_t v16 = (uint64_t *)a2;
            *(_DWORD *)(*(void *)a2 + 4 * v17) = *(_DWORD *)(a3 + 8);
            uint64_t v29 = *(unsigned int *)(a3 + 8);
            if (v29 == *(_DWORD *)(a3 + 12))
            {
              DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
              uint64_t v28 = a3;
              uint64_t v16 = (uint64_t *)a2;
              uint64_t v29 = *(unsigned int *)(a3 + 8);
            }
            *(_DWORD *)(*(void *)v28 + 4 * v29) = v27;
            unsigned int v30 = *(_DWORD *)(v28 + 8);
            *(_DWORD *)(v28 + 8) = v30 + 1;
            unint64_t v15 = a6;
            uint64_t v20 = *a6;
            if (*(unsigned char *)(*a6 + v17) == 1) {
              uint64_t result = v30;
            }
            else {
              uint64_t result = v26;
            }
            uint64_t v21 = *(void *)(a1 + 160);
            int v23 = v25;
          }
          else
          {
            *(_DWORD *)(v19 + 4 * v17) = result;
          }
        }
        unsigned int v31 = *(_DWORD *)(v21 + v18 + 8);
        uint64_t v32 = *(void *)(a1 + 176);
        uint64_t v33 = (_DWORD *)(v32 + 24 * v31);
        uint64_t v34 = v33[2];
        if ((v33[2] & 0x80000000) != 0)
        {
          *v33 += v23;
        }
        else
        {
          if (*(_DWORD *)(v21 + v18) == 16777209)
          {
            uint64_t v35 = *a5 + 16 * v34;
            uint64_t v37 = (_DWORD *)(v35 + 8);
            uint64_t v36 = *(unsigned int *)(v35 + 8);
            uint64_t v38 = *(void *)(a1 + 176);
            if (v36 == *(_DWORD *)(v35 + 12))
            {
              int v44 = v23;
              unsigned int v45 = result;
              DgnPrimArray<unsigned int>::reallocElts(v35, 1, 1);
              int v23 = v44;
              uint64_t result = v45;
              uint64_t v16 = (uint64_t *)a2;
              unint64_t v15 = a6;
              uint64_t v36 = *v37;
              uint64_t v21 = *(void *)(a1 + 160);
              uint64_t v38 = *(void *)(a1 + 176);
              uint64_t v20 = *a6;
            }
            *(_DWORD *)(*(void *)v35 + 4 * v36) = v17;
            ++*v37;
            uint64_t v34 = v33[2];
            a7 = v46;
          }
          else
          {
            *(unsigned char *)(*a7 + v34) = 1;
            uint64_t v38 = v32;
          }
          uint64_t v39 = v21 + 36 * v34;
          int v40 = *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v39 + 4));
          uint64_t v41 = (int *)(v38 + 24 * *(unsigned int *)(v39 + 8));
          int v42 = v23 + *v33 - v40;
          int v43 = *v41;
          LODWORD(v41) = v41[1];
          *uint64_t v33 = v42 - v43;
          *(_DWORD *)(v32 + 24 * v31 + 4) -= v41;
          *(unsigned char *)(v20 + v34) = 2;
        }
      }
      --v17;
      v18 -= 36;
      --v14;
    }
    while (v14);
  }
  return result;
}

uint64_t FstSearchLeafDurationBackoff::buildWordLattice(unint64_t a1, uint64_t *a2, uint64_t *a3, void *a4, unsigned __int8 a5)
{
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  int v27 = 0;
  uint64_t v24 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v23, *(unsigned int *)(a1 + 168));
  unint64_t v8 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v8, 0, 128);
  v8[4] = (uint64_t)a2;
  FstSearchLeafDurationBackoff::createLatticeNodes(a1, (uint64_t)&v26, (uint64_t)&v24, (uint64_t)a2, v23, a3, a4);
  uint64_t v9 = *(unsigned int *)(a1 + 168);
  if (v9)
  {
    uint64_t v10 = 0;
    int v11 = v25;
    do
    {
      if (*(unsigned char *)(*a3 + v10))
      {
        uint64_t v12 = *(void *)(a1 + 160);
        if (*(_DWORD *)(v12 + 36 * v10) != 16777209)
        {
          uint64_t v13 = *(void *)(a1 + 176) + 24 * *(unsigned int *)(v12 + 36 * v10 + 8);
          uint64_t v14 = *(unsigned int *)(v13 + 8);
          if (v14 == -1) {
            unsigned int v15 = 0;
          }
          else {
            unsigned int v15 = v11 - *(_DWORD *)(v26 + 4 * v14);
          }
          uint64_t v16 = *(unsigned int *)(v24 + 4 * v15);
          if (*(unsigned char *)(*a4 + v10)) {
            FstSearchLeafDurationBackoff::createLatticeLink(a1, v10, (int *)v13, 0xFFFFFFFFLL, v16, *(unsigned int *)(v24 + 4 * (v11 - *(_DWORD *)(v26 + 4 * v10))), a2, (uint64_t)v8, a5);
          }
          uint64_t v17 = v23[0];
          if (*(_DWORD *)(v23[0] + 16 * v10 + 8))
          {
            unint64_t v18 = 0;
            do
            {
              uint64_t v19 = *(unsigned int *)(*(void *)(v17 + 16 * v10) + 4 * v18);
              FstSearchLeafDurationBackoff::createLatticeLink(a1, v10, (int *)v13, v19, v16, *(unsigned int *)(v24 + 4 * (v11 - *(_DWORD *)(v26 + 4 * v19))), a2, (uint64_t)v8, a5);
              ++v18;
              uint64_t v17 = v23[0];
            }
            while (v18 < *(unsigned int *)(v23[0] + 16 * v10 + 8));
          }
        }
      }
      ++v10;
    }
    while (v10 != v9);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>((uint64_t)v8);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v23);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v24);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v26);
}

void sub_213E65AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearchLeafDurationBackoff::createLatticeLink(unint64_t a1, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, unsigned __int8 a9)
{
  unsigned int v34 = a6;
  unsigned int v11 = a5;
  unsigned int v12 = a4;
  uint64_t v16 = *(void *)(a1 + 160);
  if ((a4 & 0x80000000) != 0)
  {
    uint64_t v17 = 0;
  }
  else if (*(_DWORD *)(*(void *)(a1 + 176) + 24 * *(unsigned int *)(v16 + 36 * a4 + 8) + 8) == a2)
  {
    uint64_t v17 = (_DWORD *)(*(void *)(a1 + 176) + 24 * *(unsigned int *)(v16 + 36 * a4 + 8));
  }
  else
  {
    uint64_t v17 = 0;
  }
  ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *(_DWORD *)(v16 + 36 * a2), (uint64_t)a3, a4, a5, a6, (uint64_t)a7, a8, (uint64_t)v44);
  int v18 = a3[1];
  if (v17)
  {
    v18 += v17[1];
    int v19 = *v17 + *a3;
  }
  else
  {
    int v19 = *a3;
  }
  if (v44[0] >> 25 == 126)
  {
    int v20 = 0;
    int v21 = v18;
    if ((v12 & 0x80000000) != 0)
    {
LABEL_11:
      int v22 = 0;
      goto LABEL_14;
    }
  }
  else
  {
    int v20 = *(_DWORD *)(a1 + 136);
    int v21 = v18 - v20;
    if ((v12 & 0x80000000) != 0) {
      goto LABEL_11;
    }
  }
  int v22 = *(_DWORD *)(a1 + 140);
  v21 -= v22;
LABEL_14:
  int v23 = a3[5];
  if (v17) {
    v23 += v17[5];
  }
  int v38 = v21;
  uint64_t v39 = 0;
  int v40 = v20;
  int v41 = v19 - v18 - v23;
  int v42 = v23;
  int v43 = v22;
  unsigned int v24 = a3[2];
  uint64_t v25 = *(void *)(a1 + 160);
  if (v24 == -1)
  {
    int v27 = 0;
    if (a9) {
      goto LABEL_22;
    }
  }
  else
  {
    int v26 = *(_DWORD *)(v25 + 36 * v24 + 4);
    if (a9)
    {
      if (v26 >= 1) {
        --v26;
      }
      int v27 = (v26 >> 1) + 1;
LABEL_22:
      int v28 = *(_DWORD *)(v25 + 36 * a2 + 4);
      if (v28 >= 1) {
        --v28;
      }
      int v29 = (v28 >> 1) + 1;
      int v30 = v29 - v27;
      if ((v12 & 0x80000000) == 0)
      {
        int v31 = *(_DWORD *)(v25 + 36 * v12 + 4);
        if (v31 >= 1) {
          --v31;
        }
        int v32 = v31 >> 1;
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    int v27 = v26 + 1;
  }
  int v29 = *(_DWORD *)(v25 + 36 * a2 + 4) + 1;
  int v30 = v29 - v27;
  if ((v12 & 0x80000000) == 0)
  {
    int v32 = *(_DWORD *)(v25 + 36 * v12 + 4);
LABEL_31:
    int v33 = v32 - v29 + 1;
    goto LABEL_33;
  }
LABEL_32:
  int v33 = 0;
LABEL_33:
  WordLatticeLC::WordLatticeLC((uint64_t)v36, (uint64_t)v44, v27, v30, v33, (uint64_t)&v38);
  v35[0] = 0;
  v35[1] = 0;
  FstSearchLeafDurationBackoff::buildLinkSegmentation(a1, (uint64_t)v35, (uint64_t)a3, v27, a9);
  if (v17) {
    FstSearchLeafDurationBackoff::buildLinkSegmentation(a1, (uint64_t)v35, (uint64_t)v17, v29, a9);
  }
  unint64_t v37 = WordLattice::findOrAddLinkSegSeqId((uint64_t)a7, (uint64_t)v35, a8);
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v11, (const WordLatticeLC *)v34, (WordLatticeLC *)v36);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v35);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v36);
}

void sub_213E65D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va1);
  _Unwind_Resume(a1);
}

unint64_t FstSearchLeafDurationBackoff::buildLinkSegmentation(unint64_t result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  if (a5) {
    int v5 = 2;
  }
  else {
    int v5 = 1;
  }
  unsigned int v6 = *(unsigned __int16 *)(a3 + 16);
  if (*(_WORD *)(a3 + 16))
  {
    unint64_t v10 = result;
    unsigned int v11 = 0;
    int v12 = 0;
    __int16 v13 = *(_WORD *)(*(void *)(result + 56) + 136);
    unsigned __int16 v14 = -1;
    do
    {
      int v15 = *(unsigned __int16 *)(*(void *)(v10 + 216) + 2 * (v11 + *(_DWORD *)(a3 + 12)));
      if (v15 != v14)
      {
        if (v12)
        {
          uint64_t result = FstSearchLeafLatticeDurationBackoff::addLinkSegment(v10, a2, v14, a4, v12, v13);
          a4 += v12;
          unsigned int v6 = *(unsigned __int16 *)(a3 + 16);
          unsigned __int16 v14 = v15;
          int v12 = 0;
        }
        else
        {
          unsigned __int16 v14 = *(_WORD *)(*(void *)(v10 + 216) + 2 * (v11 + *(_DWORD *)(a3 + 12)));
        }
      }
      ++v12;
      v11 += v5;
    }
    while (v11 < v6);
    if (v12)
    {
      return FstSearchLeafLatticeDurationBackoff::addLinkSegment(v10, a2, v14, a4, v12, v13);
    }
  }
  return result;
}

uint64_t FstSearchLeafDurationBackoff::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(void *)(this + 112) = a2;
  if (*(unsigned char *)(this + 428)) {
    return MiniFst::beginTopFstSyncRecog(this + 312);
  }
  return this;
}

uint64_t FstSearchLeafDurationBackoff::endTopRecSyncRecog(FstSearchLeafDurationBackoff *this)
{
  uint64_t v1 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  return v1;
}

uint64_t FstSearchLeafDurationBackoff::getBestExitScore(FstSearchLeafDurationBackoff *this)
{
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  *((_DWORD *)this + 75) = -1;
  unint64_t v1 = *((unsigned int *)this + 38);
  unint64_t v2 = *((unsigned int *)this + 68);
  if (v1 >= v2) {
    goto LABEL_16;
  }
  uint64_t v4 = 0;
  unsigned int v5 = 0;
  uint64_t v6 = 36 * v1;
  do
  {
    uint64_t v7 = *((void *)this + 33) + v6;
    if (*(_DWORD *)(*((void *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      unsigned int v8 = *(_DWORD *)(v7 + 8);
      if (v8 != -1 && *(_DWORD *)(*((void *)this + 20) + 36 * v8 + 4) == *((_DWORD *)this + 74))
      {
        if (v5 == HIDWORD(v18))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v17, 1, 1);
          unsigned int v5 = v18;
          uint64_t v4 = v17;
        }
        v4[v5] = v8;
        unsigned int v5 = v18 + 1;
        LODWORD(v18) = v18 + 1;
        unint64_t v2 = *((unsigned int *)this + 68);
      }
    }
    ++v1;
    v6 += 36;
  }
  while (v1 < v2);
  if (v5)
  {
    uint64_t v9 = *((void *)this + 20);
    uint64_t v10 = v5;
    int v11 = 1879048192;
    do
    {
      unsigned int v13 = *v4++;
      unsigned int v12 = v13;
      int v14 = *(_DWORD *)(v9 + 36 * v13 + 12);
      if (v11 > v14)
      {
        *((_DWORD *)this + 75) = *(_DWORD *)(v9 + 36 * v12 + 16);
        int v11 = v14;
      }
      --v10;
    }
    while (v10);
  }
  else
  {
LABEL_16:
    int v11 = 1879048192;
  }
  if (v11 >= 20000) {
    uint64_t v15 = 20000;
  }
  else {
    uint64_t v15 = v11;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v17);
  return v15;
}

void sub_213E65FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t FstSearchLeafDurationBackoff::getBestScoreMaybeUpdateFstNode(FstSearchLeafDurationBackoff *this, Node *a2)
{
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v2 = *((unsigned int *)this + 68);
  if (v2)
  {
    uint64_t v3 = (int *)*((void *)this + 33);
    __int16 v4 = -1;
    int v5 = 1879048192;
    uint64_t v6 = v3;
    do
    {
      int v8 = *v6;
      v6 += 9;
      int v7 = v8;
      if (v5 > v8)
      {
        __int16 v4 = *((_WORD *)v3 + 6);
        int v5 = v7;
      }
      uint64_t v3 = v6;
      --v2;
    }
    while (v2);
    uint64_t v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000) {
        uint64_t v9 = 20000;
      }
      else {
        uint64_t v9 = v5;
      }
    }
  }
  else
  {
    uint64_t v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

void *FstSearchLeafDurationBackoff::seedTheory(FstSearchLeafDurationBackoff *this, int a2, int a3, int a4, SearchStats *a5)
{
  if (a4 == -2)
  {
    int v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    unsigned int v11 = *((_DWORD *)this + 42);
    if (v11 == *((_DWORD *)this + 43))
    {
      DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)this + 160, 1, 1);
      unsigned int v11 = *((_DWORD *)this + 42);
    }
    uint64_t v12 = *((void *)this + 20) + 36 * v11;
    *(_DWORD *)uint64_t v12 = a4;
    *(_DWORD *)(v12 + 4) = a3;
    *(_DWORD *)(v12 + 8) = -1;
    *(_DWORD *)(v12 + 12) = a2;
    *(void *)(v12 + 16) = 0xFFFFFFFFLL;
    *(_DWORD *)(v12 + 24) = 0;
    *(_WORD *)(v12 + 28) = 0;
    *(_DWORD *)(v12 + 32) = 0;
    int v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  int v13 = *(_DWORD *)(*((void *)this + 5) + 144);
  unsigned int v14 = *((_DWORD *)this + 68);
  if (v14 == *((_DWORD *)this + 69))
  {
    DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)this + 264, 1, 1);
    unsigned int v14 = *((_DWORD *)this + 68);
  }
  uint64_t v15 = *((void *)this + 33) + 36 * v14;
  *(_DWORD *)uint64_t v15 = a2;
  *(_DWORD *)(v15 + 4) = v13;
  *(_DWORD *)(v15 + 8) = v9;
  *(_WORD *)(v15 + 12) = -2;
  *(void *)(v15 + 16) = 0;
  *(_WORD *)(v15 + 24) = 0;
  *(void *)(v15 + 28) = 0;
  LODWORD(v15) = *((_DWORD *)this + 68) + 1;
  *((_DWORD *)this + 68) = v15;
  *((_DWORD *)this + 38) = v15;

  return FstSearchLeafDurationBackoff::propagateNulls(this, 20000, a3, a5);
}

uint64_t FstSearchLeafDurationBackoff::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(unsigned int *)(result + 300);
  if (v8 != -1)
  {
    uint64_t v9 = result;
    uint64_t v10 = (unsigned int *)(*(void *)(result + 160) + 36 * v8);
    for (i = v10[4]; i != -1; uint64_t v8 = v16)
    {
      uint64_t v16 = i;
      uint64_t result = *(void *)(v9 + 40);
      if (*v10 == 16777209)
      {
        int v17 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        uint64_t result = ArcGraph::lexToCWID((ArcGraph *)result, *v10, a3, (uint64_t)a4, a5, a6, a7, a8);
        int v17 = result;
      }
      uint64_t v18 = *(unsigned int *)(a2 + 8);
      if (v18 == *(_DWORD *)(a2 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        uint64_t v18 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(void *)a2 + 4 * v18) = v17;
      ++*(_DWORD *)(a2 + 8);
      uint64_t v19 = *(unsigned int *)(a6 + 8);
      if (v19 == *(_DWORD *)(a6 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        uint64_t v19 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(void *)a6 + 4 * v19) = v8;
      ++*(_DWORD *)(a6 + 8);
      uint64_t v20 = *(void *)(v9 + 160);
      int v21 = *(_DWORD *)(v20 + 36 * v8 + 4);
      uint64_t v22 = *(unsigned int *)(a3 + 8);
      if (v22 == *(_DWORD *)(a3 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        uint64_t v22 = *(unsigned int *)(a3 + 8);
        uint64_t v20 = *(void *)(v9 + 160);
      }
      *(_DWORD *)(*(void *)a3 + 4 * v22) = v21;
      ++*(_DWORD *)(a3 + 8);
      int v23 = *(_DWORD *)(v20 + 36 * v8 + 12);
      uint64_t v24 = *(unsigned int *)(a5 + 8);
      if (v24 == *(_DWORD *)(a5 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        uint64_t v24 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(void *)a5 + 4 * v24) = v23;
      ++*(_DWORD *)(a5 + 8);
      uint64_t v10 = (unsigned int *)(*(void *)(v9 + 160) + 36 * v16);
      uint64_t i = v10[4];
    }
    *a4 = *v10;
  }
  return result;
}

void FstSearchLeafDurationBackoff::checkSearchParametersValidityForArcGraph(FstSearchLeafDurationBackoff *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *((void *)this + 5);
  if (*(unsigned char *)(v8 + 178))
  {
    int v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(unsigned char *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    }
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    }
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(void *)(**(void **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((void *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if (a2)
      {
        if (!*(unsigned char *)(v8 + 203)) {
          return;
        }
      }
      else if (*(unsigned char *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(unsigned char *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

void FstSearchLeafDurationBackoff::getHistory(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 == -1)
  {
    *(_DWORD *)(a3 + 8) = 0;
  }
  else
  {
    int v9 = a4;
    LODWORD(v11) = 0;
    uint64_t v12 = a2;
    uint64_t v13 = a2;
    do
    {
      unsigned int v14 = (_DWORD *)(*(void *)(a1 + 160) + 36 * v13);
      if (*v14 == 16777209) {
        uint64_t v11 = v11;
      }
      else {
        uint64_t v11 = (v11 + 1);
      }
      uint64_t v13 = v14[4];
    }
    while (v13 != -1);
    unsigned int v15 = *(_DWORD *)(a3 + 12);
    if (v11 > v15) {
      DgnArray<PrefilterResultFrame>::reallocElts(a3, v11 - v15, 0);
    }
    uint64_t v16 = *(unsigned int *)(a3 + 8);
    if (v16 < v11)
    {
      uint64_t v17 = v11 - v16;
      uint64_t v18 = *(void *)a3 + 32 * v16;
      do
      {
        *(void *)uint64_t v18 = 0x3FFFFAFFFFFFLL;
        *(_OWORD *)(v18 + 8) = xmmword_2140866D0;
        *(void *)(v18 + 24) = 0x1F0000001FLL;
        v18 += 32;
        --v17;
      }
      while (v17);
    }
    *(_DWORD *)(a3 + 8) = v11;
    if (v11)
    {
      uint64_t v19 = *(void *)(a1 + 160);
      int v20 = -16;
      do
      {
        int v21 = (unsigned int *)(v19 + 36 * v12);
        int v22 = v21[1];
        if (*v21 == 16777209)
        {
          if (v9)
          {
            int v23 = v22 - 1;
            if (v22 < 1) {
              int v23 = v22;
            }
            int v20 = (v23 >> 1) + 1;
          }
          else
          {
            int v20 = v22 + 1;
          }
        }
        else
        {
          if (v9)
          {
            int v24 = v22 - 1;
            if (v22 < 1) {
              int v24 = v21[1];
            }
            int v22 = v24 >> 1;
          }
          ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *v21, a3, a4, a5, a6, a7, a8, (uint64_t)v28);
          if (v20 == -16) {
            int v25 = v22 + 1;
          }
          else {
            int v25 = v20;
          }
          int v26 = v28[1];
          uint64_t v11 = (v11 - 1);
          uint64_t v27 = *(void *)a3 + 32 * v11;
          *(_DWORD *)uint64_t v27 = v28[0];
          *(_DWORD *)(v27 + 4) = v26;
          *(_OWORD *)(v27 + 8) = v29;
          *(_DWORD *)(v27 + 24) = v22 + 1;
          *(_DWORD *)(v27 + 28) = v25;
          uint64_t v19 = *(void *)(a1 + 160);
          int v20 = -16;
        }
        uint64_t v12 = *(unsigned int *)(v19 + 36 * v12 + 16);
      }
      while (v12 != -1);
    }
  }
}

uint64_t FstSearchLeafDurationBackoff::makePartialResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    uint64_t v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(void *)a2 + v9))(*(void *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  unsigned int BestTrace = FstSearchLeafDurationBackoff::getBestTrace(a1, 0, 0, 1);
  if (BestTrace == -1) {
    return 1879048192;
  }
  unsigned int v15 = BestTrace;
  FstSearchLeafDurationBackoff::getHistory(a1, BestTrace, a3, a4, v11, v12, v13, v14);
  memset(v25, 0, sizeof(v25));
  int v26 = 0;
  if (*(_DWORD *)(a3 + 8))
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    int v18 = 0;
    do
    {
      uint64_t v19 = *(void *)a3 + v16;
      int v20 = *(_DWORD *)(v19 + 28);
      WordLatticeLC::WordLatticeLC((uint64_t)v24, v19, v18, *(_DWORD *)(v19 + 24) - v18, v20 - *(_DWORD *)(v19 + 24), (uint64_t)v25);
      uint64_t v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(void *)a2 + 112 * v21), (const WordLatticeLC *)v24);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v24);
      ++v17;
      v16 += 32;
      int v18 = v20;
    }
    while (v17 < *(unsigned int *)(a3 + 8));
  }
  uint64_t v22 = *(void *)(a1 + 160) + 36 * v15;
  return (*(_DWORD *)(v22 + 12) + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_213E66898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void FstSearchLeafDuration::FstSearchLeafDuration(FstSearchLeafDuration *this, const int *a2, const int *a3)
{
  SearchItf::SearchItf(this);
  *(void *)uint64_t v5 = &unk_26C4E2EC8;
  *(_DWORD *)(v5 + 136) = *a2;
  *(_DWORD *)(v5 + 140) = *a3;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 248) = 0u;
  *(_OWORD *)(v5 + 232) = 0u;
  *(_OWORD *)(v5 + 216) = 0u;
  *(_OWORD *)(v5 + 264) = 0u;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_DWORD *)(v5 + 296) = -1;
  *(_DWORD *)(v5 + 304) = 1879048192;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_OWORD *)(v5 + 376) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(unsigned char *)(v5 + 428) = 0;
}

unint64_t FstSearchLeafDuration::maybeGeneratePelMaps(FstSearchLeafDuration *this, const PicMgr *a2)
{
  return PicMgr::getPelPhoneMap((unint64_t)a2, (uint64_t)this + 248, (uint64_t)this + 232);
}

uint64_t FstSearchLeafDuration::maybeInitDurModel(FstSearchLeafDuration *this, const PicMgr *a2, int a3)
{
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  PicMgr::getPelDurIdMap((uint64_t)a2, (uint64_t)&v15);
  if (a3 == 1) {
    uint64_t v6 = 56;
  }
  else {
    uint64_t v6 = 72;
  }
  uint64_t v7 = v16;
  unsigned int v8 = *((_DWORD *)this + 51);
  if (v16 <= v8)
  {
    *((_DWORD *)this + 50) = v16;
    if (!v7) {
      goto LABEL_13;
    }
  }
  else
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 192, v16 - v8, 0);
    *((_DWORD *)this + 50) = v7;
  }
  uint64_t v9 = 0;
  uint64_t v10 = v15;
  uint64_t v11 = *((void *)this + 24);
  do
  {
    if (!(_WORD)v9 || (uint64_t v12 = *(unsigned __int16 *)(v10 + 2 * v9), v12 == 0xFFFF)) {
      __int16 v13 = 0;
    }
    else {
      __int16 v13 = *(_WORD *)(*(void *)((char *)a2 + v6) + 2 * v12);
    }
    *(_WORD *)(v11 + 2 * v9++) = v13;
  }
  while (v7 != v9);
LABEL_13:
  *((unsigned char *)this + 208) = *((unsigned char *)a2 + 8);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 3);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v15);
}

void sub_213E66A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int64x2_t FstSearchLeafDuration::advanceDeltas(FstSearchLeafDuration *this, int a2, int a3, SearchStats *a4, int a5)
{
  int v8 = a2;
  v141[0] = a2;
  int64x2_t v139 = 0u;
  int64x2_t v140 = 0u;
  SnapTime::recordTime((SnapTime *)&v139, 1, 0, 0, 0);
  uint64_t v102 = (int *)((char *)this + 304);
  *((_DWORD *)this + 76) = a3;
  int v103 = *((_DWORD *)this + 2);
  unint64_t v10 = *((unsigned int *)this + 68);
  if (v10)
  {
    unsigned int v11 = 0;
    unsigned int v12 = 0;
    unint64_t v13 = 0;
    int v112 = *((_DWORD *)this + 53);
    unint64_t v123 = (uint64_t *)((char *)this + 216);
    int v97 = *((unsigned __int8 *)this + 208);
    int v101 = (char *)this + 280;
    do
    {
      uint64_t v14 = *((void *)this + 33);
      uint64_t v15 = *((void *)this + 5);
      uint64_t v16 = 36 * v13;
      while (1)
      {
        uint64_t v17 = *(unsigned int *)(v14 + v16 + 4);
        if (*(_DWORD *)(v15 + 160) != v17) {
          break;
        }
        ++v13;
        v16 += 36;
        if (v13 >= v10) {
          goto LABEL_73;
        }
      }
      unsigned int v114 = v12;
      int v98 = a5;
      uint64_t v99 = a4;
      int v100 = v8;
      uint64_t v113 = *(unsigned int *)(v14 + v16 + 4);
      if (*(_DWORD *)(v15 + 140) <= (int)v17)
      {
        int v29 = v103;
      }
      else
      {
        int v18 = *(_DWORD *)(v14 + v16);
        int v19 = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(v14 + v16 + 12))
            + v18;
        uint64_t v20 = *((void *)this + 33) + v16;
        __int16 v21 = *(_WORD *)(v20 + 12);
        int v22 = *(_DWORD *)(v20 + 28);
        int v23 = *(_DWORD *)(v20 + 32);
        int v24 = v97;
        int v25 = v22 - v97;
        if (v22 >= 1) {
          int v24 = v97 - v22;
        }
        int v26 = v24 & (v25 >> 31);
        if (*(_WORD *)(v20 + 12)) {
          v23 += v26;
        }
        else {
          int v25 = *(_DWORD *)(v20 + 28);
        }
        if (*(_WORD *)(v20 + 12)) {
          int v27 = v26;
        }
        else {
          int v27 = 0;
        }
        int v28 = v19 + v27;
        int v29 = v103;
        if (v19 + v27 - v103 <= *v102)
        {
          int v119 = v25;
          int v121 = v23;
          uint64_t v30 = *(void *)(v20 + 4);
          __int16 v117 = *(_WORD *)(v20 + 14);
          unsigned int v31 = *(_DWORD *)(v20 + 20);
          int v115 = *(_DWORD *)(v20 + 16);
          uint64_t v32 = *(unsigned __int16 *)(v20 + 24);
          __int16 v109 = *(_WORD *)(v20 + 26);
          unsigned int v110 = v11;
          if (*v102 > v28) {
            *uint64_t v102 = v28;
          }
          unsigned int v33 = *((_DWORD *)this + 56);
          unsigned int v34 = v33;
          __int16 v35 = v32;
          if (v32)
          {
            uint64_t v36 = *v123;
            uint64_t v37 = v32;
            unsigned int v34 = *((_DWORD *)this + 56);
            do
            {
              __int16 v38 = *(_WORD *)(v36 + 2 * v31);
              if (v34 == *((_DWORD *)this + 57))
              {
                DgnPrimArray<short>::reallocElts((uint64_t)v123, 1, 1);
                unsigned int v34 = *((_DWORD *)this + 56);
                uint64_t v36 = *((void *)this + 27);
              }
              *(_WORD *)(v36 + 2 * v34++) = v38;
              *((_DWORD *)this + 56) = v34;
              ++v31;
              --v37;
            }
            while (v37);
          }
          if (v34 == *((_DWORD *)this + 57))
          {
            DgnPrimArray<short>::reallocElts((uint64_t)v123, 1, 1);
            unsigned int v34 = *((_DWORD *)this + 56);
          }
          *(_WORD *)(*((void *)this + 27) + 2 * v34) = v21;
          *((_DWORD *)this + 56) = v34 + 1;
          uint64_t v39 = *((unsigned int *)this + 72);
          unsigned int v11 = v110;
          if (v39 == *((_DWORD *)this + 73))
          {
            DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)v101, 1, 1);
            LODWORD(v39) = *((_DWORD *)this + 72);
          }
          uint64_t v40 = *((void *)this + 35) + 36 * v39;
          *(_DWORD *)uint64_t v40 = v28;
          *(void *)(v40 + 4) = v30;
          *(_WORD *)(v40 + 12) = v21;
          *(_WORD *)(v40 + 14) = v117;
          *(_DWORD *)(v40 + 16) = v115;
          *(_DWORD *)(v40 + 20) = v33;
          *(_WORD *)(v40 + 24) = v35 + 1;
          *(_WORD *)(v40 + 26) = v109;
          *(_DWORD *)(v40 + 28) = v119;
          *(_DWORD *)(v40 + 32) = v121;
          int v41 = *((_DWORD *)this + 72);
          *((_DWORD *)this + 72) = v41 + 1;
          if (v114 == 2 * *((_DWORD *)this + 4)) {
            unsigned int v11 = v41 + 1;
          }
          ++v114;
          int v29 = v103;
          uint64_t v17 = v113;
        }
      }
      unsigned int v42 = v17;
      do
      {
        uint64_t v43 = *((void *)this + 5);
        uint64_t v44 = *(void *)(v43 + 152);
        unsigned int v45 = *(_DWORD *)(v44 + 4 * v42);
        int v46 = *(_DWORD *)(v44 + 4 * (v42 + 1));
        int v47 = *(_DWORD *)(v43 + 140);
        if (v47 <= v46)
        {
          if (v47 <= (int)v17 && *((unsigned char *)this + 428) != 0)
          {
            unsigned int v68 = (v45 & 0xFFFFF) <= 0xFFFF3 ? v45 & 0xFFFFF : v45 & 0xFFFFF | 0xF00000;
            if (v68 != 16777210)
            {
              DgnString::DgnString((DgnString *)&v136);
              ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v68, (DgnString *)&v136, v69, v70, v71, v72, v73);
              uint64_t v78 = &unk_214099300;
              if (v136.i32[2]) {
                uint64_t v78 = (void *)v136.i64[0];
              }
              xprintf("Seed from state %d score %d trace %d, %s\n", v74, v75, v76, v77, v17, *(unsigned int *)(*((void *)this + 33) + v16), *(unsigned int *)(*((void *)this + 33) + v16 + 8), v78);
              MiniFst::seed((uint64_t)this + 312, *(_DWORD *)(*((void *)this + 33) + v16), 0, *(_DWORD *)(*((void *)this + 33) + v16 + 8), v46);
              DgnString::~DgnString((DgnString *)&v136);
            }
          }
        }
        else
        {
          int ScoreNoBackoff = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), (unsigned __int16)*(_DWORD *)(v44 + 4 * v42));
          uint64_t v49 = *((void *)this + 33) + v16;
          int v50 = ScoreNoBackoff + ((v45 >> 20) & 0x3FF) + *(_DWORD *)v49;
          if ((_WORD)v45) {
            int v52 = *(__int16 *)(*((void *)this + 24) + 2 * (unsigned __int16)v45);
          }
          else {
            int v52 = 0;
          }
          int v122 = v52;
          if ((_WORD)v45)
          {
            int v51 = *(__int16 *)(*((void *)this + 24) + 2 * (unsigned __int16)v45);
            int v53 = v51 & (v51 >> 31);
          }
          else
          {
            int v53 = 0;
          }
          int v54 = v112;
          if (!(_WORD)v45) {
            int v54 = 0;
          }
          int v120 = (*(_DWORD *)(v49 + 28) & ~(*(int *)(v49 + 28) >> 31)) - v53 + v54;
          int v55 = v50 + v120;
          int v56 = v50 + v120 - v29;
          int v57 = *((_DWORD *)this + 76);
          if (v56 <= v57)
          {
            unsigned int v111 = v11;
            __int16 v108 = *(_WORD *)(v49 + 14);
            unsigned int v58 = *(_DWORD *)(v49 + 20);
            int v105 = *(_DWORD *)(v49 + 16);
            int v106 = *(_DWORD *)(v49 + 8);
            uint64_t v59 = *(unsigned __int16 *)(v49 + 24);
            __int16 v107 = *(_WORD *)(v49 + 26);
            int v104 = *(_DWORD *)(v49 + 32);
            if (v57 > v55) {
              *uint64_t v102 = v55;
            }
            unsigned int v60 = *((_DWORD *)this + 56);
            unsigned int v118 = v60;
            __int16 v116 = v59;
            if (v59)
            {
              uint64_t v61 = *v123;
              uint64_t v62 = v59;
              unsigned int v60 = *((_DWORD *)this + 56);
              do
              {
                __int16 v63 = *(_WORD *)(v61 + 2 * v58);
                if (v60 == *((_DWORD *)this + 57))
                {
                  DgnPrimArray<short>::reallocElts((uint64_t)v123, 1, 1);
                  unsigned int v60 = *((_DWORD *)this + 56);
                  uint64_t v61 = *((void *)this + 27);
                }
                *(_WORD *)(v61 + 2 * v60++) = v63;
                *((_DWORD *)this + 56) = v60;
                ++v58;
                --v62;
              }
              while (v62);
            }
            if (v60 == *((_DWORD *)this + 57))
            {
              DgnPrimArray<short>::reallocElts((uint64_t)v123, 1, 1);
              unsigned int v60 = *((_DWORD *)this + 56);
            }
            *(_WORD *)(*((void *)this + 27) + 2 * v60) = v45;
            *((_DWORD *)this + 56) = v60 + 1;
            uint64_t v64 = *((unsigned int *)this + 72);
            unsigned int v11 = v111;
            int v29 = v103;
            if (v64 == *((_DWORD *)this + 73))
            {
              DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)v101, 1, 1);
              LODWORD(v64) = *((_DWORD *)this + 72);
            }
            uint64_t v65 = *((void *)this + 35) + 36 * v64;
            *(_DWORD *)uint64_t v65 = v55;
            *(_DWORD *)(v65 + 4) = v46;
            *(_DWORD *)(v65 + 8) = v106;
            *(_WORD *)(v65 + 12) = v45;
            *(_WORD *)(v65 + 14) = v108;
            *(_DWORD *)(v65 + 16) = v105 + ((v45 >> 20) & 0x3FF);
            *(_DWORD *)(v65 + 20) = v118;
            *(_WORD *)(v65 + 24) = v116 + 1;
            *(_WORD *)(v65 + 26) = v107;
            *(_DWORD *)(v65 + 28) = v122;
            *(_DWORD *)(v65 + 32) = v120 + v104;
            int v66 = *((_DWORD *)this + 72);
            *((_DWORD *)this + 72) = v66 + 1;
            if (v114 == 2 * *((_DWORD *)this + 4)) {
              unsigned int v11 = v66 + 1;
            }
            ++v114;
          }
          uint64_t v17 = v113;
        }
        v42 += 2;
      }
      while ((v45 & 0x80000000) == 0);
      unint64_t v13 = (v13 + 1);
      unint64_t v10 = *((unsigned int *)this + 68);
      int v8 = v100;
      a4 = v99;
      a5 = v98;
      unsigned int v12 = v114;
    }
    while (v13 < v10);
  }
  else
  {
    unsigned int v12 = 0;
    unsigned int v11 = 0;
  }
LABEL_73:
  int v138 = *((_DWORD *)this + 76) + v103;
  if (*((unsigned char *)this + 428)) {
    MiniFst::updateFrame((char *)this + 312, v102, v103, v8);
  }
  int64x2_t v136 = 0u;
  int64x2_t v137 = 0u;
  SnapTime::recordTime((SnapTime *)&v136, 1, 0, 0, 0);
  int64x2_t v136 = vsubq_s64(v136, v139);
  int64x2_t v137 = vsubq_s64(v137, v140);
  uint64_t v79 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v80 = vaddq_s64(v79[1], v137);
  *uint64_t v79 = vaddq_s64(*v79, v136);
  v79[1] = v80;
  int64x2_t v134 = 0u;
  int64x2_t v135 = 0u;
  SnapTime::recordTime((SnapTime *)&v134, 1, 0, 0, 0);
  if (v12 > 2 * *((_DWORD *)this + 4)) {
    FstSearchLeafDurationBackoff::applyCutoffOnEmitting((uint64_t)this, v11, &v138);
  }
  int64x2_t v132 = 0u;
  int64x2_t v133 = 0u;
  SnapTime::recordTime((SnapTime *)&v132, 1, 0, 0, 0);
  int64x2_t v81 = vsubq_s64(v132, v134);
  uint64_t v82 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v83 = v82[3];
  int64x2_t v84 = vaddq_s64(v82[2], v81);
  int64x2_t v132 = v81;
  int64x2_t v133 = vsubq_s64(v133, v135);
  int64x2_t v85 = vaddq_s64(v83, v133);
  v82[2] = v84;
  v82[3] = v85;
  int64x2_t v130 = 0u;
  int64x2_t v131 = 0u;
  SnapTime::recordTime((SnapTime *)&v130, 1, 0, 0, 0);
  FstSearchLeafDurationBackoff::makeViterbiDecisionOnEmitting((uint64_t)this);
  unint64_t v86 = *((unsigned int *)this + 6);
  if (v86)
  {
    unint64_t v87 = *((unsigned int *)this + 68);
    if (v86 < v87) {
      mrec_nth_element<FstSearchLeafDurationBackoffcmpTok>(*((void *)this + 33), v86, v87);
    }
  }
  int64x2_t v128 = 0u;
  int64x2_t v129 = 0u;
  SnapTime::recordTime((SnapTime *)&v128, 1, 0, 0, 0);
  int64x2_t v88 = vsubq_s64(v128, v130);
  uint64_t v89 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v90 = v89[5];
  int64x2_t v91 = vaddq_s64(v89[4], v88);
  int64x2_t v128 = v88;
  int64x2_t v129 = vsubq_s64(v129, v131);
  int64x2_t v92 = vaddq_s64(v90, v129);
  v89[4] = v91;
  v89[5] = v92;
  int64x2_t v126 = 0u;
  int64x2_t v127 = 0u;
  SnapTime::recordTime((SnapTime *)&v126, 1, 0, 0, 0);
  *((_DWORD *)this + 72) = 0;
  uint64_t v93 = *((unsigned int *)this + 68);
  *((_DWORD *)this + 38) = v93;
  if (a4)
  {
    *((void *)a4 + 2) += v93;
    if (*((_DWORD *)a4 + 2) > v93) {
      LODWORD(v93) = *((_DWORD *)a4 + 2);
    }
    *((_DWORD *)a4 + 2) = v93;
  }
  if (*((unsigned char *)this + 428)) {
    FstSearchLeafDuration::seedFromMiniFst((uint64_t)this, v141);
  }
  if (a5) {
    FstSearchLeafDurationBackoff::propagateNulls(this, v138, v8, a4);
  }
  *((_DWORD *)this + 74) = v8;
  int64x2_t v124 = 0u;
  int64x2_t v125 = 0u;
  SnapTime::recordTime((SnapTime *)&v124, 1, 0, 0, 0);
  uint64_t v94 = (int64x2_t *)*((void *)this + 13);
  int64x2_t result = vaddq_s64(v94[6], vsubq_s64(v124, v126));
  int64x2_t v96 = vaddq_s64(v94[7], vsubq_s64(v125, v127));
  v94[6] = result;
  v94[7] = v96;
  return result;
}

void sub_213E67298(_Unwind_Exception *exception_object)
{
}

uint64_t FstSearchLeafDuration::seedFromMiniFst(uint64_t this, int *a2)
{
  if (*(unsigned char *)(this + 428))
  {
    uint64_t v2 = this;
    unsigned int v3 = *(_DWORD *)(this + 336);
    if (v3 >= *(_DWORD *)(this + 20)) {
      unsigned int v3 = *(_DWORD *)(this + 20);
    }
    if (v3)
    {
      uint64_t v5 = 0;
      unsigned int v6 = 0;
      uint64_t v20 = this + 264;
      __int16 v21 = (void *)(this + 160);
      do
      {
        uint64_t v7 = (int *)(*(void *)(v2 + 328) + v5);
        int v8 = *v7;
        int v9 = v7[6];
        int v10 = v7[7];
        int v11 = v7[2];
        v22[0] = 0;
        v22[1] = 0;
        if ((v11 & 0x80000000) == 0)
        {
          while (1)
            ;
        }
        unsigned int v12 = -2 - v11;
        if (v10 == 16777213)
        {
          int v10 = 16777209;
          if (*(_DWORD *)(*v21 + 36 * v12) == 16777209) {
            unsigned int v12 = *(_DWORD *)(*(void *)(v2 + 176) + 24 * *(unsigned int *)(*v21 + 36 * v12 + 8) + 8);
          }
        }
        int v13 = *a2;
        uint64_t v14 = *(unsigned int *)(v2 + 168);
        if (v14 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)v21, 1, 1);
          LODWORD(v14) = *(_DWORD *)(v2 + 168);
        }
        uint64_t v15 = *(void *)(v2 + 160) + 36 * v14;
        *(_DWORD *)uint64_t v15 = v10;
        *(_DWORD *)(v15 + 4) = v13;
        *(_DWORD *)(v15 + 8) = -1;
        *(_DWORD *)(v15 + 12) = v8;
        *(_DWORD *)(v15 + 20) = 0;
        *(_DWORD *)(v15 + 24) = 0;
        *(_DWORD *)(v15 + 16) = v12;
        *(_WORD *)(v15 + 28) = 0;
        *(_DWORD *)(v15 + 32) = 0;
        int v16 = *(_DWORD *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v16 + 1;
        uint64_t v17 = *(unsigned int *)(v2 + 272);
        if (v17 == *(_DWORD *)(v2 + 276))
        {
          DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts(v20, 1, 1);
          LODWORD(v17) = *(_DWORD *)(v2 + 272);
        }
        uint64_t v18 = *(void *)(v2 + 264) + 36 * v17;
        *(_DWORD *)uint64_t v18 = v8;
        *(_DWORD *)(v18 + 4) = v9;
        *(_DWORD *)(v18 + 8) = v16;
        *(_WORD *)(v18 + 12) = -2;
        *(void *)(v18 + 16) = 0;
        *(_WORD *)(v18 + 24) = 0;
        *(void *)(v18 + 28) = 0;
        ++*(_DWORD *)(v2 + 272);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v22);
        ++v6;
        unsigned int v19 = *(_DWORD *)(v2 + 336);
        if (v19 >= *(_DWORD *)(v2 + 20)) {
          unsigned int v19 = *(_DWORD *)(v2 + 20);
        }
        v5 += 36;
      }
      while (v6 < v19);
    }
  }
  return this;
}

void sub_213E674A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLeafDuration::collectTraces(FstSearchLeafDuration *this)
{
  uint64_t v2 = *((unsigned int *)this + 42);
  unsigned int v53 = 0;
  int v52 = 0;
  if (v2)
  {
    unsigned int v3 = MemChunkAlloc(4 * v2, 0);
    unint64_t v4 = 0;
    int v52 = v3;
    unsigned int v53 = v2;
    do
      *((_DWORD *)v3 + v4++) = 0;
    while (v4 < v53);
  }
  unint64_t v5 = *((unsigned int *)this + 68);
  if (v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = v52;
    int v8 = (unsigned int *)(*((void *)this + 33) + 8);
    do
    {
      unsigned int v10 = *v8;
      v8 += 9;
      uint64_t v9 = v10;
      if (v10 != -1)
      {
        *((_DWORD *)v7 + v9) = 1;
        unint64_t v5 = *((unsigned int *)this + 68);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  int v11 = *((_DWORD *)this + 42);
  if (v11)
  {
    unsigned int v12 = (uint64_t *)((char *)this + 160);
    int v13 = v52;
    unsigned int v14 = v11 - 1;
    do
    {
      uint64_t v15 = v14;
      if (*((_DWORD *)v13 + v14))
      {
        uint64_t v16 = *(unsigned int *)(*v12 + 36 * v14 + 16);
        if (v16 != -1) {
          *((_DWORD *)v13 + v16) = 1;
        }
      }
      --v14;
    }
    while (v15);
    unsigned int v17 = *((_DWORD *)this + 42);
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    if (v17)
    {
      uint64_t v18 = 0;
      unint64_t v19 = 0;
      unsigned int v20 = 0;
      do
      {
        __int16 v21 = v52;
        if (*((_DWORD *)v52 + v19))
        {
          uint64_t v22 = *v12;
          if (v19 != v20)
          {
            int v23 = (long long *)(v22 + 36 * v19);
            uint64_t v24 = v22 + 36 * v20;
            long long v25 = *v23;
            long long v26 = v23[1];
            *(_DWORD *)(v24 + 32) = *((_DWORD *)v23 + 8);
            *(_OWORD *)uint64_t v24 = v25;
            *(_OWORD *)(v24 + 16) = v26;
            uint64_t v22 = *v12;
          }
          uint64_t v27 = v22 + 36 * v20;
          unsigned int v30 = *(_DWORD *)(v27 + 16);
          int v28 = (_DWORD *)(v27 + 16);
          uint64_t v29 = v30;
          if (v30 != -1) {
            *int v28 = *((_DWORD *)v21 + v29);
          }
          int v31 = v51;
          if (*(_WORD *)(v22 + 36 * v20 + 28))
          {
            unsigned int v32 = 0;
            unsigned int v33 = v51;
            do
            {
              __int16 v34 = *(_WORD *)(*((void *)this + 27) + 2 * (v32 + *(_DWORD *)(v22 + 36 * v20 + 24)));
              if (v33 == HIDWORD(v51))
              {
                DgnPrimArray<short>::reallocElts((uint64_t)&v50, 1, 1);
                unsigned int v33 = v51;
                uint64_t v18 = v50;
                uint64_t v22 = *v12;
              }
              *(_WORD *)(v18 + 2 * v33++) = v34;
              LODWORD(v51) = v33;
              ++v32;
            }
            while (v32 < *(unsigned __int16 *)(v22 + 36 * v20 + 28));
          }
          *(_DWORD *)(v22 + 36 * v20 + 24) = v31;
          *((_DWORD *)v52 + v19) = v20++;
          unsigned int v17 = *((_DWORD *)this + 42);
        }
        ++v19;
      }
      while (v19 < v17);
      unsigned int v35 = *((_DWORD *)this + 43);
      if (v20 > v35)
      {
        DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)this + 160, v20 - v35, 0);
        unsigned int v17 = *((_DWORD *)this + 42);
      }
      if (v17 < v20)
      {
        unint64_t v36 = v20 - (unint64_t)v17;
        uint64_t v37 = (_DWORD *)(*v12 + 36 * v17 + 32);
        do
        {
          *((_OWORD *)v37 - 2) = xmmword_2140992B0;
          *((void *)v37 - 2) = 0xFFFFFFFFLL;
          *(v37 - 2) = 0;
          *((_WORD *)v37 - 2) = 0;
          *uint64_t v37 = 0;
          v37 += 9;
          --v36;
        }
        while (v36);
      }
    }
    else
    {
      unsigned int v20 = 0;
    }
  }
  else
  {
    unsigned int v20 = 0;
    uint64_t v50 = 0;
    uint64_t v51 = 0;
  }
  *((_DWORD *)this + 42) = v20;
  unint64_t v38 = *((unsigned int *)this + 68);
  if (v38)
  {
    unint64_t v39 = 0;
    uint64_t v40 = v51;
    uint64_t v41 = *((void *)this + 33);
    do
    {
      if (*(_WORD *)(v41 + 36 * v39 + 24))
      {
        unsigned int v42 = 0;
        LODWORD(v43) = v40;
        do
        {
          __int16 v44 = *(_WORD *)(*((void *)this + 27) + 2 * (v42 + *(_DWORD *)(v41 + 36 * v39 + 20)));
          if (v43 == HIDWORD(v51))
          {
            DgnPrimArray<short>::reallocElts((uint64_t)&v50, 1, 1);
            LODWORD(v43) = v51;
            uint64_t v41 = *((void *)this + 33);
          }
          *(_WORD *)(v50 + 2 * v43) = v44;
          uint64_t v43 = (v43 + 1);
          LODWORD(v51) = v43;
          ++v42;
        }
        while (v42 < *(unsigned __int16 *)(v41 + 36 * v39 + 24));
        unint64_t v38 = *((unsigned int *)this + 68);
      }
      else
      {
        uint64_t v43 = v40;
      }
      *(_DWORD *)(v41 + 36 * v39++ + 20) = v40;
      uint64_t v40 = v43;
    }
    while (v39 < v38);
  }
  else
  {
    LODWORD(v43) = v51;
  }
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 216, &v50, 0, v43);
  uint64_t v45 = *((unsigned int *)this + 68);
  if (v45)
  {
    int v46 = v52;
    int v47 = (_DWORD *)(*((void *)this + 33) + 8);
    do
    {
      uint64_t v48 = *v47;
      if (v48 != -1) {
        *int v47 = *((_DWORD *)v46 + v48);
      }
      v47 += 9;
      --v45;
    }
    while (v45);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v50);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v52);
}

void sub_213E6784C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

int64x2_t FstSearchLeafDuration::vite(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  FstSearchLeafDuration::advanceDeltas((FstSearchLeafDuration *)this, a2, a3, a4, a5);
  int64x2_t v13 = 0u;
  int64x2_t v14 = 0u;
  SnapTime::recordTime((SnapTime *)&v13, 1, 0, 0, 0);
  if (a2 >= 1)
  {
    unsigned int v7 = *((_DWORD *)this + 18);
    if (v7)
    {
      if (!(a2 % v7)) {
        FstSearchLeafDuration::collectTraces((FstSearchLeafDuration *)this);
      }
    }
  }
  int64x2_t v11 = 0u;
  int64x2_t v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  int v8 = this[13];
  int64x2_t result = vaddq_s64(v8[14], vsubq_s64(v11, v13));
  int64x2_t v10 = vaddq_s64(v8[15], vsubq_s64(v12, v14));
  v8[14] = result;
  v8[15] = v10;
  return result;
}

_DWORD *FstSearchLeafDuration::reset(_DWORD *this)
{
  this[42] = 0;
  this[46] = 0;
  this[56] = 0;
  this[68] = 0;
  return this;
}

double FstSearchLeafDuration::doFrame(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  if (a3 >= 20000) {
    a3 = 20000;
  }
  *(void *)&double result = FstSearchLeafDuration::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearchLeafDuration::beginTopRecPassSyncRecog(FstSearchLeafDuration *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 312, a3, *((PelScoreCache **)this + 4));
    uint64_t result = ArcGraph::findBackoffState(*((void *)this + 5));
    *((_DWORD *)this + 106) = result;
    *((unsigned char *)this + 428) = 1;
  }
  return result;
}

uint64_t FstSearchLeafDuration::endTopRecPassSyncRecog(FstSearchLeafDuration *this)
{
  int64x2_t v10 = 0u;
  int64x2_t v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  FstSearchLeafDurationBackoff::generateTraceTokensFromTraces((unint64_t)this);
  int64x2_t v8 = 0u;
  int64x2_t v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  int64x2_t v2 = vsubq_s64(v8, v10);
  unsigned int v3 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v4 = v3[13];
  int64x2_t v5 = vaddq_s64(v3[12], v2);
  int64x2_t v8 = v2;
  int64x2_t v9 = vsubq_s64(v9, v11);
  int64x2_t v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + 76) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

void FstSearchLeafDuration::printSize(FstSearchLeafDuration *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v125);
  if (v126) {
    uint64_t v15 = v125;
  }
  else {
    uint64_t v15 = &unk_214099300;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v11, v12, v13, v14, a3, &unk_214099300, a3, &unk_214099300, v15);
  DgnString::~DgnString((DgnString *)&v125);
  if (a2 != -1) {
    xlprintf("%d ", v16, v17, v18, v19, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v16, v17, v18, v19, a3, &unk_214099300);
  uint64_t v20 = (a3 + 1);
  uint64_t v21 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v125);
  if (v126) {
    long long v26 = v125;
  }
  else {
    long long v26 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v22, v23, v24, v25, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v26, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v125);
  if (v126) {
    int v31 = v125;
  }
  else {
    int v31 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v27, v28, v29, v30, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v31, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v125);
  if (v126) {
    unint64_t v36 = v125;
  }
  else {
    unint64_t v36 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v32, v33, v34, v35, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v36, 4, 4, 0);
  uint64_t v121 = a2;
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v125);
  if (v126) {
    uint64_t v41 = v125;
  }
  else {
    uint64_t v41 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v37, v38, v39, v40, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v41, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  uint64_t v42 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v42 = 16;
  }
  uint64_t v43 = *((unsigned int *)this + 42);
  uint64_t v44 = 34 * v43;
  if ((int)v43 <= 0) {
    uint64_t v44 = 0;
  }
  uint64_t v45 = v44 + v42;
  uint64_t v46 = v44 + v42 + 34 * (*((_DWORD *)this + 43) - v43);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v125);
  if (v126) {
    uint64_t v51 = v125;
  }
  else {
    uint64_t v51 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v47, v48, v49, v50, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v51, v46, v45, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v46;
  *a5 += v45;
  uint64_t v52 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v52 = 16;
  }
  int v53 = *((_DWORD *)this + 46);
  uint64_t v54 = 22 * v53;
  if (v53 <= 0) {
    uint64_t v54 = 0;
  }
  uint64_t v55 = v54 + v52;
  uint64_t v56 = v54 + v52 + 22 * (*((_DWORD *)this + 47) - v53);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v125);
  if (v126) {
    uint64_t v61 = v125;
  }
  else {
    uint64_t v61 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v57, v58, v59, v60, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v61, v56, v55, 0);
  uint64_t v120 = a3;
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v56;
  *a5 += v55;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v62 = 12;
  }
  else {
    uint64_t v62 = 16;
  }
  uint64_t v63 = *((unsigned int *)this + 56);
  unsigned int v64 = *((_DWORD *)this + 57);
  if (v64 >= v63)
  {
    uint64_t v65 = 0;
    if ((int)v63 > 0) {
      uint64_t v62 = (v62 | 2) + 2 * (v63 - 1);
    }
    uint64_t v66 = v62 + 2 * (v64 - v63);
  }
  else
  {
    uint64_t v65 = 2 * v63;
    uint64_t v66 = v62;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2961, (DgnString *)&v125);
  if (v126) {
    uint64_t v71 = v125;
  }
  else {
    uint64_t v71 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v67, v68, v69, v70, v20, &unk_214099300, v21, v21, v71, v66, v62, v65);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v66;
  *a5 += v62;
  *a6 += v65;
  uint64_t v72 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v72 = 16;
  }
  uint64_t v73 = *((unsigned int *)this + 68);
  uint64_t v74 = 32 * v73;
  if ((int)v73 <= 0) {
    uint64_t v74 = 0;
  }
  uint64_t v75 = v74 | v72;
  uint64_t v76 = (v74 | v72) + 32 * (*((_DWORD *)this + 69) - v73);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v125);
  if (v126) {
    int64x2_t v81 = v125;
  }
  else {
    int64x2_t v81 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v77, v78, v79, v80, v20, &unk_214099300, v21, v21, v81, v76, v75, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v76;
  *a5 += v75;
  uint64_t v82 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v82 = 16;
  }
  uint64_t v83 = *((unsigned int *)this + 72);
  uint64_t v84 = 32 * v83;
  if ((int)v83 <= 0) {
    uint64_t v84 = 0;
  }
  uint64_t v85 = v84 | v82;
  uint64_t v86 = (v84 | v82) + 32 * (*((_DWORD *)this + 73) - v83);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v125);
  if (v126) {
    int64x2_t v91 = v125;
  }
  else {
    int64x2_t v91 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v87, v88, v89, v90, v20, &unk_214099300, v21, v21, v91, v86, v85, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v86;
  *a5 += v85;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v125);
  if (v126) {
    int64x2_t v96 = v125;
  }
  else {
    int64x2_t v96 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v92, v93, v94, v95, v20, &unk_214099300, v21, v21, v96, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v125);
  if (v126) {
    int v101 = v125;
  }
  else {
    int v101 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v97, v98, v99, v100, v20, &unk_214099300, v21, v21, v101, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v125);
  if (v126) {
    int v106 = v125;
  }
  else {
    int v106 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v102, v103, v104, v105, v20, &unk_214099300, v21, v21, v106, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  uint64_t v107 = sizeObject((uint64_t)this + 312, 0);
  uint64_t v108 = sizeObject((uint64_t)this + 312, 1);
  uint64_t v109 = sizeObject((uint64_t)this + 312, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v125);
  if (v126) {
    unsigned int v114 = v125;
  }
  else {
    unsigned int v114 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v110, v111, v112, v113, v20, &unk_214099300, v21, v21, v114, v107, v108, v109);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v107;
  *a5 += v108;
  *a6 += v109;
  unint64_t v123 = 0;
  unint64_t v124 = 0;
  SearchItf::printSize(this, v121, v20, &v124, &v123, &v123);
  *a4 += v124;
  *a5 += v123;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v125);
  if (v126) {
    int v119 = v125;
  }
  else {
    int v119 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v115, v116, v117, v118, v120, &unk_214099300, (35 - v120), (35 - v120), v119, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v125);
}

void sub_213E68250(_Unwind_Exception *a1)
{
  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

BOOL FstSearchLeafDuration::findBestPath(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8 = *(unsigned int *)(a1 + 168);
  if (v8) {
    BOOL v9 = *(_DWORD *)(a3 + 8) == 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    *(void *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v8;
  }
  if (v8) {
    BOOL v10 = *(_DWORD *)(a2 + 8) == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    *(void *)a2 = MemChunkAlloc(v8, 0);
    *(_DWORD *)(a2 + 8) = v8;
LABEL_14:
    uint64_t v11 = 0;
    do
    {
      *(unsigned char *)(*(void *)a2 + v11) = 0;
      *(unsigned char *)(*(void *)a3 + v11++) = 0;
    }
    while (v8 != v11);
    goto LABEL_16;
  }
  if (v8) {
    goto LABEL_14;
  }
LABEL_16:
  unsigned int BestTrace = FstSearchLeafDurationBackoff::getBestTrace(a1, (void *)a2, (void *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1) {
    return 0;
  }
  uint64_t v13 = *(void *)(a1 + 160) + 36 * BestTrace;
  LODWORD(v13) = *(_DWORD *)(v13 + 12) + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v13 + 4));
  *a4 = v13;
  return v13 != 1879048192;
}

uint64_t FstSearchLeafDuration::buildWordLattice(unint64_t a1, uint64_t *a2, uint64_t *a3, void *a4, unsigned __int8 a5)
{
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  int v27 = 0;
  uint64_t v24 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v23, *(unsigned int *)(a1 + 168));
  unint64_t v8 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v8, 0, 128);
  v8[4] = (uint64_t)a2;
  FstSearchLeafDurationBackoff::createLatticeNodes(a1, (uint64_t)&v26, (uint64_t)&v24, (uint64_t)a2, v23, a3, a4);
  uint64_t v9 = *(unsigned int *)(a1 + 168);
  if (v9)
  {
    uint64_t v10 = 0;
    int v11 = v25;
    do
    {
      if (*(unsigned char *)(*a3 + v10))
      {
        uint64_t v12 = *(void *)(a1 + 160);
        if (*(_DWORD *)(v12 + 36 * v10) != 16777209)
        {
          uint64_t v13 = *(void *)(a1 + 176) + 24 * *(unsigned int *)(v12 + 36 * v10 + 8);
          uint64_t v14 = *(unsigned int *)(v13 + 8);
          if (v14 == -1) {
            unsigned int v15 = 0;
          }
          else {
            unsigned int v15 = v11 - *(_DWORD *)(v26 + 4 * v14);
          }
          uint64_t v16 = *(unsigned int *)(v24 + 4 * v15);
          if (*(unsigned char *)(*a4 + v10)) {
            FstSearchLeafDuration::createLatticeLink(a1, v10, (int *)v13, 0xFFFFFFFFLL, v16, *(unsigned int *)(v24 + 4 * (v11 - *(_DWORD *)(v26 + 4 * v10))), a2, (uint64_t)v8, a5);
          }
          uint64_t v17 = v23[0];
          if (*(_DWORD *)(v23[0] + 16 * v10 + 8))
          {
            unint64_t v18 = 0;
            do
            {
              uint64_t v19 = *(unsigned int *)(*(void *)(v17 + 16 * v10) + 4 * v18);
              FstSearchLeafDuration::createLatticeLink(a1, v10, (int *)v13, v19, v16, *(unsigned int *)(v24 + 4 * (v11 - *(_DWORD *)(v26 + 4 * v19))), a2, (uint64_t)v8, a5);
              ++v18;
              uint64_t v17 = v23[0];
            }
            while (v18 < *(unsigned int *)(v23[0] + 16 * v10 + 8));
          }
        }
      }
      ++v10;
    }
    while (v10 != v9);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>((uint64_t)v8);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v23);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v24);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v26);
}

void sub_213E685AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearchLeafDuration::createLatticeLink(unint64_t a1, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, unsigned __int8 a9)
{
  unsigned int v34 = a6;
  unsigned int v11 = a5;
  unsigned int v12 = a4;
  uint64_t v16 = *(void *)(a1 + 160);
  if ((a4 & 0x80000000) != 0)
  {
    uint64_t v17 = 0;
  }
  else if (*(_DWORD *)(*(void *)(a1 + 176) + 24 * *(unsigned int *)(v16 + 36 * a4 + 8) + 8) == a2)
  {
    uint64_t v17 = (_DWORD *)(*(void *)(a1 + 176) + 24 * *(unsigned int *)(v16 + 36 * a4 + 8));
  }
  else
  {
    uint64_t v17 = 0;
  }
  ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *(_DWORD *)(v16 + 36 * a2), (uint64_t)a3, a4, a5, a6, (uint64_t)a7, a8, (uint64_t)v44);
  int v18 = a3[1];
  if (v17)
  {
    v18 += v17[1];
    int v19 = *v17 + *a3;
  }
  else
  {
    int v19 = *a3;
  }
  if (v44[0] >> 25 == 126)
  {
    int v20 = 0;
    int v21 = v18;
    if ((v12 & 0x80000000) != 0)
    {
LABEL_11:
      int v22 = 0;
      goto LABEL_14;
    }
  }
  else
  {
    int v20 = *(_DWORD *)(a1 + 136);
    int v21 = v18 - v20;
    if ((v12 & 0x80000000) != 0) {
      goto LABEL_11;
    }
  }
  int v22 = *(_DWORD *)(a1 + 140);
  v21 -= v22;
LABEL_14:
  int v23 = a3[5];
  if (v17) {
    v23 += v17[5];
  }
  int v38 = v21;
  uint64_t v39 = 0;
  int v40 = v20;
  int v41 = v19 - v18 - v23;
  int v42 = v23;
  int v43 = v22;
  unsigned int v24 = a3[2];
  uint64_t v25 = *(void *)(a1 + 160);
  if (v24 == -1)
  {
    int v27 = 0;
    if (a9) {
      goto LABEL_22;
    }
  }
  else
  {
    int v26 = *(_DWORD *)(v25 + 36 * v24 + 4);
    if (a9)
    {
      if (v26 >= 1) {
        --v26;
      }
      int v27 = (v26 >> 1) + 1;
LABEL_22:
      int v28 = *(_DWORD *)(v25 + 36 * a2 + 4);
      if (v28 >= 1) {
        --v28;
      }
      int v29 = (v28 >> 1) + 1;
      int v30 = v29 - v27;
      if ((v12 & 0x80000000) == 0)
      {
        int v31 = *(_DWORD *)(v25 + 36 * v12 + 4);
        if (v31 >= 1) {
          --v31;
        }
        int v32 = v31 >> 1;
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    int v27 = v26 + 1;
  }
  int v29 = *(_DWORD *)(v25 + 36 * a2 + 4) + 1;
  int v30 = v29 - v27;
  if ((v12 & 0x80000000) == 0)
  {
    int v32 = *(_DWORD *)(v25 + 36 * v12 + 4);
LABEL_31:
    int v33 = v32 - v29 + 1;
    goto LABEL_33;
  }
LABEL_32:
  int v33 = 0;
LABEL_33:
  WordLatticeLC::WordLatticeLC((uint64_t)v36, (uint64_t)v44, v27, v30, v33, (uint64_t)&v38);
  v35[0] = 0;
  v35[1] = 0;
  FstSearchLeafDurationBackoff::buildLinkSegmentation(a1, (uint64_t)v35, (uint64_t)a3, v27, a9);
  if (v17) {
    FstSearchLeafDurationBackoff::buildLinkSegmentation(a1, (uint64_t)v35, (uint64_t)v17, v29, a9);
  }
  unint64_t v37 = WordLattice::findOrAddLinkSegSeqId((uint64_t)a7, (uint64_t)v35, a8);
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v11, (const WordLatticeLC *)v34, (WordLatticeLC *)v36);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v35);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v36);
}

void sub_213E68850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va1);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLeafDuration::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(void *)(this + 112) = a2;
  if (*(unsigned char *)(this + 428)) {
    return MiniFst::beginTopFstSyncRecog(this + 312);
  }
  return this;
}

uint64_t FstSearchLeafDuration::endTopRecSyncRecog(FstSearchLeafDuration *this)
{
  uint64_t v1 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  return v1;
}

uint64_t FstSearchLeafDuration::getBestExitScore(FstSearchLeafDuration *this)
{
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  *((_DWORD *)this + 75) = -1;
  unint64_t v1 = *((unsigned int *)this + 38);
  unint64_t v2 = *((unsigned int *)this + 68);
  if (v1 >= v2) {
    goto LABEL_16;
  }
  uint64_t v4 = 0;
  unsigned int v5 = 0;
  uint64_t v6 = 36 * v1;
  do
  {
    uint64_t v7 = *((void *)this + 33) + v6;
    if (*(_DWORD *)(*((void *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      unsigned int v8 = *(_DWORD *)(v7 + 8);
      if (v8 != -1 && *(_DWORD *)(*((void *)this + 20) + 36 * v8 + 4) == *((_DWORD *)this + 74))
      {
        if (v5 == HIDWORD(v18))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v17, 1, 1);
          unsigned int v5 = v18;
          uint64_t v4 = v17;
        }
        v4[v5] = v8;
        unsigned int v5 = v18 + 1;
        LODWORD(v18) = v18 + 1;
        unint64_t v2 = *((unsigned int *)this + 68);
      }
    }
    ++v1;
    v6 += 36;
  }
  while (v1 < v2);
  if (v5)
  {
    uint64_t v9 = *((void *)this + 20);
    uint64_t v10 = v5;
    int v11 = 1879048192;
    do
    {
      unsigned int v13 = *v4++;
      unsigned int v12 = v13;
      int v14 = *(_DWORD *)(v9 + 36 * v13 + 12);
      if (v11 > v14)
      {
        *((_DWORD *)this + 75) = *(_DWORD *)(v9 + 36 * v12 + 16);
        int v11 = v14;
      }
      --v10;
    }
    while (v10);
  }
  else
  {
LABEL_16:
    int v11 = 1879048192;
  }
  if (v11 >= 20000) {
    uint64_t v15 = 20000;
  }
  else {
    uint64_t v15 = v11;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v17);
  return v15;
}

void sub_213E689E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t FstSearchLeafDuration::getBestScoreMaybeUpdateFstNode(FstSearchLeafDuration *this, Node *a2)
{
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v2 = *((unsigned int *)this + 68);
  if (v2)
  {
    unsigned int v3 = (int *)*((void *)this + 33);
    __int16 v4 = -1;
    int v5 = 1879048192;
    uint64_t v6 = v3;
    do
    {
      int v8 = *v6;
      v6 += 9;
      int v7 = v8;
      if (v5 > v8)
      {
        __int16 v4 = *((_WORD *)v3 + 6);
        int v5 = v7;
      }
      unsigned int v3 = v6;
      --v2;
    }
    while (v2);
    uint64_t v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000) {
        uint64_t v9 = 20000;
      }
      else {
        uint64_t v9 = v5;
      }
    }
  }
  else
  {
    uint64_t v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

void *FstSearchLeafDuration::seedTheory(FstSearchLeafDuration *this, int a2, int a3, int a4, SearchStats *a5)
{
  if (a4 == -2)
  {
    int v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    unsigned int v11 = *((_DWORD *)this + 42);
    if (v11 == *((_DWORD *)this + 43))
    {
      DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)this + 160, 1, 1);
      unsigned int v11 = *((_DWORD *)this + 42);
    }
    uint64_t v12 = *((void *)this + 20) + 36 * v11;
    *(_DWORD *)uint64_t v12 = a4;
    *(_DWORD *)(v12 + 4) = a3;
    *(_DWORD *)(v12 + 8) = -1;
    *(_DWORD *)(v12 + 12) = a2;
    *(void *)(v12 + 16) = 0xFFFFFFFFLL;
    *(_DWORD *)(v12 + 24) = 0;
    *(_WORD *)(v12 + 28) = 0;
    *(_DWORD *)(v12 + 32) = 0;
    int v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  int v13 = *(_DWORD *)(*((void *)this + 5) + 144);
  unsigned int v14 = *((_DWORD *)this + 68);
  if (v14 == *((_DWORD *)this + 69))
  {
    DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)this + 264, 1, 1);
    unsigned int v14 = *((_DWORD *)this + 68);
  }
  uint64_t v15 = *((void *)this + 33) + 36 * v14;
  *(_DWORD *)uint64_t v15 = a2;
  *(_DWORD *)(v15 + 4) = v13;
  *(_DWORD *)(v15 + 8) = v9;
  *(_WORD *)(v15 + 12) = -2;
  *(void *)(v15 + 16) = 0;
  *(_WORD *)(v15 + 24) = 0;
  *(void *)(v15 + 28) = 0;
  LODWORD(v15) = *((_DWORD *)this + 68) + 1;
  *((_DWORD *)this + 68) = v15;
  *((_DWORD *)this + 38) = v15;

  return FstSearchLeafDurationBackoff::propagateNulls(this, 20000, a3, a5);
}

uint64_t FstSearchLeafDuration::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(unsigned int *)(result + 300);
  if (v8 != -1)
  {
    uint64_t v9 = result;
    uint64_t v10 = (unsigned int *)(*(void *)(result + 160) + 36 * v8);
    for (i = v10[4]; i != -1; uint64_t v8 = v16)
    {
      uint64_t v16 = i;
      uint64_t result = *(void *)(v9 + 40);
      if (*v10 == 16777209)
      {
        int v17 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        uint64_t result = ArcGraph::lexToCWID((ArcGraph *)result, *v10, a3, (uint64_t)a4, a5, a6, a7, a8);
        int v17 = result;
      }
      uint64_t v18 = *(unsigned int *)(a2 + 8);
      if (v18 == *(_DWORD *)(a2 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        uint64_t v18 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(void *)a2 + 4 * v18) = v17;
      ++*(_DWORD *)(a2 + 8);
      uint64_t v19 = *(unsigned int *)(a6 + 8);
      if (v19 == *(_DWORD *)(a6 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        uint64_t v19 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(void *)a6 + 4 * v19) = v8;
      ++*(_DWORD *)(a6 + 8);
      uint64_t v20 = *(void *)(v9 + 160);
      int v21 = *(_DWORD *)(v20 + 36 * v8 + 4);
      uint64_t v22 = *(unsigned int *)(a3 + 8);
      if (v22 == *(_DWORD *)(a3 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        uint64_t v22 = *(unsigned int *)(a3 + 8);
        uint64_t v20 = *(void *)(v9 + 160);
      }
      *(_DWORD *)(*(void *)a3 + 4 * v22) = v21;
      ++*(_DWORD *)(a3 + 8);
      int v23 = *(_DWORD *)(v20 + 36 * v8 + 12);
      uint64_t v24 = *(unsigned int *)(a5 + 8);
      if (v24 == *(_DWORD *)(a5 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        uint64_t v24 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(void *)a5 + 4 * v24) = v23;
      ++*(_DWORD *)(a5 + 8);
      uint64_t v10 = (unsigned int *)(*(void *)(v9 + 160) + 36 * v16);
      uint64_t i = v10[4];
    }
    *a4 = *v10;
  }
  return result;
}

void FstSearchLeafDuration::checkSearchParametersValidityForArcGraph(FstSearchLeafDuration *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *((void *)this + 5);
  if (*(unsigned char *)(v8 + 178))
  {
    int v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(unsigned char *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    }
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    }
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(void *)(**(void **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((void *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if (a2)
      {
        if (!*(unsigned char *)(v8 + 203)) {
          return;
        }
      }
      else if (*(unsigned char *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(unsigned char *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

uint64_t FstSearchLeafDuration::makePartialResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    uint64_t v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(void *)a2 + v9))(*(void *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  unsigned int BestTrace = FstSearchLeafDurationBackoff::getBestTrace(a1, 0, 0, 1);
  if (BestTrace == -1) {
    return 1879048192;
  }
  unsigned int v15 = BestTrace;
  FstSearchLeafDurationBackoff::getHistory(a1, BestTrace, a3, a4, v11, v12, v13, v14);
  memset(v25, 0, sizeof(v25));
  int v26 = 0;
  if (*(_DWORD *)(a3 + 8))
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    int v18 = 0;
    do
    {
      uint64_t v19 = *(void *)a3 + v16;
      int v20 = *(_DWORD *)(v19 + 28);
      WordLatticeLC::WordLatticeLC((uint64_t)v24, v19, v18, *(_DWORD *)(v19 + 24) - v18, v20 - *(_DWORD *)(v19 + 24), (uint64_t)v25);
      uint64_t v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(void *)a2 + 112 * v21), (const WordLatticeLC *)v24);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v24);
      ++v17;
      v16 += 32;
      int v18 = v20;
    }
    while (v17 < *(unsigned int *)(a3 + 8));
  }
  uint64_t v22 = *(void *)(a1 + 160) + 36 * v15;
  return (*(_DWORD *)(v22 + 12) + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_213E690EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void FstSearchDurationBackoff::FstSearchDurationBackoff(FstSearchDurationBackoff *this, const int *a2, const int *a3)
{
  SearchItf::SearchItf(this);
  *(void *)uint64_t v5 = &unk_26C4E37C0;
  *(_DWORD *)(v5 + 136) = *a2;
  *(_DWORD *)(v5 + 140) = *a3;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 232) = 0u;
  *(_OWORD *)(v5 + 216) = 0u;
  *(_DWORD *)(v5 + 248) = -1;
  *(_DWORD *)(v5 + 256) = 1879048192;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_OWORD *)(v5 + 264) = 0u;
  *(unsigned char *)(v5 + 380) = 0;
}

uint64_t FstSearchDurationBackoff::maybeInitDurModel(FstSearchDurationBackoff *this, const PicMgr *a2, int a3)
{
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  PicMgr::getPelDurIdMap((uint64_t)a2, (uint64_t)&v15);
  if (a3 == 1) {
    uint64_t v6 = 56;
  }
  else {
    uint64_t v6 = 72;
  }
  uint64_t v7 = v16;
  unsigned int v8 = *((_DWORD *)this + 51);
  if (v16 <= v8)
  {
    *((_DWORD *)this + 50) = v16;
    if (!v7) {
      goto LABEL_13;
    }
  }
  else
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 192, v16 - v8, 0);
    *((_DWORD *)this + 50) = v7;
  }
  uint64_t v9 = 0;
  uint64_t v10 = v15;
  uint64_t v11 = *((void *)this + 24);
  do
  {
    if (!(_WORD)v9 || (uint64_t v12 = *(unsigned __int16 *)(v10 + 2 * v9), v12 == 0xFFFF)) {
      __int16 v13 = 0;
    }
    else {
      __int16 v13 = *(_WORD *)(*(void *)((char *)a2 + v6) + 2 * v12);
    }
    *(_WORD *)(v11 + 2 * v9++) = v13;
  }
  while (v7 != v9);
LABEL_13:
  *((unsigned char *)this + 208) = *((unsigned char *)a2 + 8);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 3);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v15);
}

void sub_213E6927C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int64x2_t FstSearchDurationBackoff::advanceDeltas(FstSearchDurationBackoff *this, int a2, int a3, SearchStats *a4, int a5)
{
  int v8 = a2;
  v123[0] = a2;
  int64x2_t v121 = 0u;
  int64x2_t v122 = 0u;
  SnapTime::recordTime((SnapTime *)&v121, 1, 0, 0, 0);
  int64x2_t v96 = (int *)((char *)this + 256);
  *((_DWORD *)this + 64) = a3;
  int v105 = *((_DWORD *)this + 2);
  unint64_t v10 = *((unsigned int *)this + 56);
  if (v10)
  {
    unsigned int v11 = 0;
    unsigned int v12 = 0;
    unint64_t v13 = 0;
    int v102 = *((_DWORD *)this + 53);
    int v91 = *((unsigned __int8 *)this + 208);
    uint64_t v95 = (char *)this + 232;
    do
    {
      uint64_t v14 = *((void *)this + 27);
      uint64_t v15 = *((void *)this + 5);
      uint64_t v16 = 28 * v13;
      while (1)
      {
        uint64_t v17 = *(unsigned int *)(v14 + v16 + 4);
        if (*(_DWORD *)(v15 + 160) != v17) {
          break;
        }
        ++v13;
        v16 += 28;
        if (v13 >= v10) {
          goto LABEL_66;
        }
      }
      int v92 = a5;
      uint64_t v93 = a4;
      int v94 = v8;
      unsigned int v103 = v12;
      unsigned int v104 = v11;
      if (*(_DWORD *)(v15 + 140) > (int)v17)
      {
        if (*((_DWORD *)this + 19) + *((_DWORD *)this + 64) >= 5000) {
          int v18 = 5000;
        }
        else {
          int v18 = *((_DWORD *)this + 19) + *((_DWORD *)this + 64);
        }
        int ScoreAllowBackoff_updateNodeInSequence = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(v14 + v16 + 12), *(_DWORD *)(v14 + v16), v18);
        uint64_t v20 = *((void *)this + 27) + v16;
        __int16 v21 = *(_WORD *)(v20 + 12);
        int v22 = *(_DWORD *)(v20 + 20);
        int v23 = v91;
        if (v22 >= 1) {
          int v23 = v91 - v22;
        }
        int v24 = v23 & ((v22 - v91) >> 31);
        if (*(_WORD *)(v20 + 12)) {
          int v25 = v24 + *(_DWORD *)(v20 + 24);
        }
        else {
          int v25 = *(_DWORD *)(v20 + 24);
        }
        if (*(_WORD *)(v20 + 12)) {
          int v26 = v22 - v91;
        }
        else {
          int v26 = *(_DWORD *)(v20 + 20);
        }
        if (*(_WORD *)(v20 + 12)) {
          int v27 = v24;
        }
        else {
          int v27 = 0;
        }
        int v28 = v27 + ScoreAllowBackoff_updateNodeInSequence;
        if (v27 + ScoreAllowBackoff_updateNodeInSequence - v105 <= *v96)
        {
          uint64_t v29 = *(void *)(v20 + 4);
          __int16 v30 = *(_WORD *)(v20 + 14);
          int v31 = *(_DWORD *)(v20 + 16);
          if (*v96 > v28) {
            *int64x2_t v96 = v28;
          }
          uint64_t v32 = *((unsigned int *)this + 60);
          if (v32 == *((_DWORD *)this + 61))
          {
            DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)v95, 1, 1);
            LODWORD(v32) = *((_DWORD *)this + 60);
          }
          uint64_t v33 = *((void *)this + 29) + 28 * v32;
          *(_DWORD *)uint64_t v33 = v28;
          *(void *)(v33 + 4) = v29;
          *(_WORD *)(v33 + 12) = v21;
          *(_WORD *)(v33 + 14) = v30;
          *(_DWORD *)(v33 + 16) = v31;
          *(_DWORD *)(v33 + 20) = v26;
          *(_DWORD *)(v33 + 24) = v25;
          int v34 = *((_DWORD *)this + 60);
          *((_DWORD *)this + 60) = v34 + 1;
          unsigned int v35 = v104;
          if (v103 == 2 * *((_DWORD *)this + 4)) {
            unsigned int v35 = v34 + 1;
          }
          ++v103;
          unsigned int v104 = v35;
        }
      }
      unsigned int v36 = v17;
      do
      {
        uint64_t v37 = *((void *)this + 5);
        uint64_t v38 = *(void *)(v37 + 152);
        unsigned int v39 = *(_DWORD *)(v38 + 4 * v36);
        int v40 = *(_DWORD *)(v38 + 4 * (v36 + 1));
        int v41 = *(_DWORD *)(v37 + 140);
        if (v41 <= v40)
        {
          if (v41 <= (int)v17 && *((unsigned char *)this + 380) != 0)
          {
            unsigned int v62 = (v39 & 0xFFFFF) <= 0xFFFF3 ? v39 & 0xFFFFF : v39 & 0xFFFFF | 0xF00000;
            if (v62 != 16777210)
            {
              DgnString::DgnString((DgnString *)&v118);
              ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v62, (DgnString *)&v118, v63, v64, v65, v66, v67);
              uint64_t v72 = &unk_214099300;
              if (v118.i32[2]) {
                uint64_t v72 = (void *)v118.i64[0];
              }
              xprintf("Seed from state %d score %d trace %d, %s\n", v68, v69, v70, v71, v17, *(unsigned int *)(*((void *)this + 27) + v16), *(unsigned int *)(*((void *)this + 27) + v16 + 8), v72);
              MiniFst::seed((uint64_t)this + 264, *(_DWORD *)(*((void *)this + 27) + v16), 0, *(_DWORD *)(*((void *)this + 27) + v16 + 8), v40);
              DgnString::~DgnString((DgnString *)&v118);
            }
          }
        }
        else
        {
          int v42 = (v39 >> 20) & 0x3FF;
          if (*((_DWORD *)this + 19) + *((_DWORD *)this + 64) >= 5000) {
            int v43 = 5000;
          }
          else {
            int v43 = *((_DWORD *)this + 19) + *((_DWORD *)this + 64);
          }
          int v44 = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), (unsigned __int16)*(_DWORD *)(v38 + 4 * v36), *(_DWORD *)(*((void *)this + 27) + v16) + v42, v43);
          uint64_t v45 = *((void *)this + 27) + v16;
          if ((_WORD)v39) {
            int v47 = *(__int16 *)(*((void *)this + 24) + 2 * (unsigned __int16)v39);
          }
          else {
            int v47 = 0;
          }
          if ((_WORD)v39)
          {
            int v46 = *(__int16 *)(*((void *)this + 24) + 2 * (unsigned __int16)v39);
            int v48 = v46 & (v46 >> 31);
          }
          else
          {
            int v48 = 0;
          }
          int v49 = v102;
          if (!(_WORD)v39) {
            int v49 = 0;
          }
          int v50 = (*(_DWORD *)(v45 + 20) & ~(*(int *)(v45 + 20) >> 31)) - v48 + v49;
          int v51 = v50 + v44;
          int v52 = *((_DWORD *)this + 64);
          if (v50 + v44 - v105 <= v52)
          {
            int v53 = *(_DWORD *)(v45 + 8);
            __int16 v54 = *(_WORD *)(v45 + 14);
            int v55 = *(_DWORD *)(v45 + 16);
            int v56 = *(_DWORD *)(v45 + 24);
            if (v52 > v51) {
              *int64x2_t v96 = v51;
            }
            uint64_t v57 = *((unsigned int *)this + 60);
            if (v57 == *((_DWORD *)this + 61))
            {
              __int16 v100 = v54;
              int v101 = v47;
              int v98 = v55;
              int v99 = v53;
              int v97 = v56;
              DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)v95, 1, 1);
              int v56 = v97;
              int v55 = v98;
              int v53 = v99;
              __int16 v54 = v100;
              int v47 = v101;
              LODWORD(v57) = *((_DWORD *)this + 60);
            }
            uint64_t v58 = *((void *)this + 29) + 28 * v57;
            *(_DWORD *)uint64_t v58 = v51;
            *(_DWORD *)(v58 + 4) = v40;
            *(_DWORD *)(v58 + 8) = v53;
            *(_WORD *)(v58 + 12) = v39;
            *(_WORD *)(v58 + 14) = v54;
            *(_DWORD *)(v58 + 16) = v55 + v42;
            *(_DWORD *)(v58 + 20) = v47;
            *(_DWORD *)(v58 + 24) = v50 + v56;
            int v59 = *((_DWORD *)this + 60);
            *((_DWORD *)this + 60) = v59 + 1;
            unsigned int v60 = v104;
            if (v103 == 2 * *((_DWORD *)this + 4)) {
              unsigned int v60 = v59 + 1;
            }
            ++v103;
            unsigned int v104 = v60;
          }
        }
        v36 += 2;
      }
      while ((v39 & 0x80000000) == 0);
      unint64_t v13 = (v13 + 1);
      unint64_t v10 = *((unsigned int *)this + 56);
      int v8 = v94;
      a4 = v93;
      a5 = v92;
      unsigned int v12 = v103;
      unsigned int v11 = v104;
    }
    while (v13 < v10);
  }
  else
  {
    unsigned int v12 = 0;
    unsigned int v11 = 0;
  }
LABEL_66:
  int v120 = *((_DWORD *)this + 64) + v105;
  if (*((unsigned char *)this + 380)) {
    MiniFst::updateFrame((char *)this + 264, v96, v105, v8);
  }
  int64x2_t v118 = 0u;
  int64x2_t v119 = 0u;
  SnapTime::recordTime((SnapTime *)&v118, 1, 0, 0, 0);
  int64x2_t v118 = vsubq_s64(v118, v121);
  int64x2_t v119 = vsubq_s64(v119, v122);
  uint64_t v73 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v74 = vaddq_s64(v73[1], v119);
  *uint64_t v73 = vaddq_s64(*v73, v118);
  v73[1] = v74;
  int64x2_t v116 = 0u;
  int64x2_t v117 = 0u;
  SnapTime::recordTime((SnapTime *)&v116, 1, 0, 0, 0);
  if (v12 > 2 * *((_DWORD *)this + 4)) {
    FstSearchDurationHashBackoff::applyCutoffOnEmitting((uint64_t)this, v11, &v120);
  }
  int64x2_t v114 = 0u;
  int64x2_t v115 = 0u;
  SnapTime::recordTime((SnapTime *)&v114, 1, 0, 0, 0);
  int64x2_t v75 = vsubq_s64(v114, v116);
  uint64_t v76 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v77 = v76[3];
  int64x2_t v78 = vaddq_s64(v76[2], v75);
  int64x2_t v114 = v75;
  int64x2_t v115 = vsubq_s64(v115, v117);
  int64x2_t v79 = vaddq_s64(v77, v115);
  v76[2] = v78;
  v76[3] = v79;
  int64x2_t v112 = 0u;
  int64x2_t v113 = 0u;
  SnapTime::recordTime((SnapTime *)&v112, 1, 0, 0, 0);
  FstSearchDurationBackoff::makeViterbiDecisionOnEmitting((uint64_t)this);
  unint64_t v80 = *((unsigned int *)this + 6);
  if (v80)
  {
    unint64_t v81 = *((unsigned int *)this + 56);
    if (v80 < v81) {
      mrec_nth_element<FstSearchLatticeHashBackoffcmpTok>(*((void *)this + 27), v80, v81);
    }
  }
  int64x2_t v110 = 0u;
  int64x2_t v111 = 0u;
  SnapTime::recordTime((SnapTime *)&v110, 1, 0, 0, 0);
  int64x2_t v82 = vsubq_s64(v110, v112);
  uint64_t v83 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v84 = v83[5];
  int64x2_t v85 = vaddq_s64(v83[4], v82);
  int64x2_t v110 = v82;
  int64x2_t v111 = vsubq_s64(v111, v113);
  int64x2_t v86 = vaddq_s64(v84, v111);
  v83[4] = v85;
  v83[5] = v86;
  int64x2_t v108 = 0u;
  int64x2_t v109 = 0u;
  SnapTime::recordTime((SnapTime *)&v108, 1, 0, 0, 0);
  *((_DWORD *)this + 60) = 0;
  uint64_t v87 = *((unsigned int *)this + 56);
  *((_DWORD *)this + 38) = v87;
  if (a4)
  {
    *((void *)a4 + 2) += v87;
    if (*((_DWORD *)a4 + 2) > v87) {
      LODWORD(v87) = *((_DWORD *)a4 + 2);
    }
    *((_DWORD *)a4 + 2) = v87;
  }
  if (*((unsigned char *)this + 380)) {
    FstSearchDurationBackoff::seedFromMiniFst((uint64_t)this, v123);
  }
  if (a5) {
    FstSearchDurationHashBackoff::propagateNulls(this, v120, v8, a4);
  }
  *((_DWORD *)this + 62) = v8;
  int64x2_t v106 = 0u;
  int64x2_t v107 = 0u;
  SnapTime::recordTime((SnapTime *)&v106, 1, 0, 0, 0);
  uint64_t v88 = (int64x2_t *)*((void *)this + 13);
  int64x2_t result = vaddq_s64(v88[6], vsubq_s64(v106, v108));
  int64x2_t v90 = vaddq_s64(v88[7], vsubq_s64(v107, v109));
  v88[6] = result;
  v88[7] = v90;
  return result;
}

void sub_213E6993C(_Unwind_Exception *exception_object)
{
}

uint64_t FstSearchDurationBackoff::makeViterbiDecisionOnEmitting(uint64_t this)
{
  uint64_t v1 = this;
  unint64_t v2 = *(unsigned int *)(this + 240);
  if (v2)
  {
    this = (uint64_t)mrec_qsort_r<FstSearchLateLatticeHashBackoffActiveToken>(*(char **)(this + 232), v2, 28);
    unint64_t v3 = *(unsigned int *)(v1 + 240);
    *(_DWORD *)(v1 + 224) = 0;
    if (v3)
    {
      uint64_t v4 = 0;
      unsigned int v5 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v7 = *(void *)(v1 + 232);
        if (!v4 || *(_DWORD *)(v7 + v4 + 4) != *(_DWORD *)(v7 + v4 - 24))
        {
          if (v5 == *(_DWORD *)(v1 + 228))
          {
            this = DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(v1 + 216, 1, 1);
            unsigned int v5 = *(_DWORD *)(v1 + 224);
          }
          int v8 = (_OWORD *)(*(void *)(v1 + 216) + 28 * v5);
          long long v9 = *(_OWORD *)(v7 + v4);
          *(_OWORD *)((char *)v8 + 12) = *(_OWORD *)(v7 + v4 + 12);
          *int v8 = v9;
          unsigned int v5 = *(_DWORD *)(v1 + 224) + 1;
          *(_DWORD *)(v1 + 224) = v5;
          unint64_t v3 = *(unsigned int *)(v1 + 240);
        }
        v4 += 28;
      }
    }
  }
  else
  {
    *(_DWORD *)(this + 224) = 0;
  }
  return this;
}

uint64_t FstSearchDurationBackoff::seedFromMiniFst(uint64_t this, int *a2)
{
  if (*(unsigned char *)(this + 380))
  {
    uint64_t v2 = this;
    unsigned int v3 = *(_DWORD *)(this + 288);
    if (v3 >= *(_DWORD *)(this + 20)) {
      unsigned int v3 = *(_DWORD *)(this + 20);
    }
    if (v3)
    {
      uint64_t v5 = 0;
      unsigned int v6 = 0;
      uint64_t v20 = this + 216;
      __int16 v21 = (void *)(this + 160);
      do
      {
        uint64_t v7 = (int *)(*(void *)(v2 + 280) + v5);
        int v8 = *v7;
        int v10 = v7[6];
        int v9 = v7[7];
        int v11 = v7[2];
        v22[0] = 0;
        v22[1] = 0;
        if ((v11 & 0x80000000) == 0)
        {
          while (1)
            ;
        }
        unsigned int v12 = -2 - v11;
        if (v9 == 16777213)
        {
          int v9 = 16777209;
          if (*(_DWORD *)(*v21 + 28 * v12) == 16777209) {
            unsigned int v12 = *(_DWORD *)(*(void *)(v2 + 176) + 16 * *(unsigned int *)(*v21 + 28 * v12 + 8) + 8);
          }
        }
        int v13 = *a2;
        uint64_t v14 = *(unsigned int *)(v2 + 168);
        if (v14 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)v21, 1, 1);
          LODWORD(v14) = *(_DWORD *)(v2 + 168);
        }
        uint64_t v15 = (int *)(*(void *)(v2 + 160) + 28 * v14);
        *uint64_t v15 = v9;
        v15[1] = v13;
        v15[2] = -1;
        v15[3] = v8;
        v15[5] = 0;
        v15[6] = 0;
        v15[4] = v12;
        int v16 = *(_DWORD *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v16 + 1;
        uint64_t v17 = *(unsigned int *)(v2 + 224);
        if (v17 == *(_DWORD *)(v2 + 228))
        {
          DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(v20, 1, 1);
          LODWORD(v17) = *(_DWORD *)(v2 + 224);
        }
        uint64_t v18 = *(void *)(v2 + 216) + 28 * v17;
        *(_DWORD *)uint64_t v18 = v8;
        *(_DWORD *)(v18 + 4) = v10;
        *(_DWORD *)(v18 + 8) = v16;
        *(_WORD *)(v18 + 12) = -2;
        *(void *)(v18 + 16) = 0;
        *(_DWORD *)(v18 + 24) = 0;
        ++*(_DWORD *)(v2 + 224);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v22);
        ++v6;
        unsigned int v19 = *(_DWORD *)(v2 + 288);
        if (v19 >= *(_DWORD *)(v2 + 20)) {
          unsigned int v19 = *(_DWORD *)(v2 + 20);
        }
        v5 += 36;
      }
      while (v6 < v19);
    }
  }
  return this;
}

void sub_213E69C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchDurationBackoff::collectTraces(FstSearchDurationBackoff *this)
{
  unint64_t v2 = *((unsigned int *)this + 42);
  int v36 = 0;
  unsigned int v35 = 0;
  if (v2)
  {
    unsigned int v3 = MemChunkAlloc(4 * v2, 0);
    unint64_t v4 = 0;
    unsigned int v35 = v3;
    int v36 = v2;
    do
      *((_DWORD *)v3 + v4++) = 0;
    while (v4 < v2);
  }
  else
  {
    unsigned int v3 = 0;
  }
  unint64_t v5 = *((unsigned int *)this + 56);
  if (v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = (unsigned int *)(*((void *)this + 27) + 8);
    do
    {
      unsigned int v9 = *v7;
      v7 += 7;
      uint64_t v8 = v9;
      if (v9 != -1)
      {
        *((_DWORD *)v3 + v8) = 1;
        unint64_t v5 = *((unsigned int *)this + 56);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  int v10 = *((_DWORD *)this + 42);
  if (!v10) {
    goto LABEL_32;
  }
  int v11 = (uint64_t *)((char *)this + 160);
  unsigned int v12 = v10 - 1;
  do
  {
    uint64_t v13 = v12;
    if (*((_DWORD *)v3 + v12))
    {
      uint64_t v14 = *(unsigned int *)(*v11 + 28 * v12 + 16);
      if (v14 != -1) {
        *((_DWORD *)v3 + v14) = 1;
      }
    }
    --v12;
  }
  while (v13);
  unsigned int v15 = *((_DWORD *)this + 42);
  if (v15)
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    unsigned int v18 = 0;
    do
    {
      if (*((_DWORD *)v3 + v17))
      {
        uint64_t v19 = *v11;
        if (v17 != v18)
        {
          uint64_t v20 = (long long *)(v19 + v16);
          __int16 v21 = (_OWORD *)(v19 + 28 * v18);
          long long v22 = *v20;
          *(_OWORD *)((char *)v21 + 12) = *(long long *)((char *)v20 + 12);
          *__int16 v21 = v22;
          uint64_t v19 = *v11;
        }
        uint64_t v23 = v19 + 28 * v18;
        unsigned int v26 = *(_DWORD *)(v23 + 16);
        int v24 = (_DWORD *)(v23 + 16);
        uint64_t v25 = v26;
        if (v26 != -1) {
          *int v24 = *((_DWORD *)v3 + v25);
        }
        *((_DWORD *)v3 + v17) = v18++;
        unsigned int v15 = *((_DWORD *)this + 42);
      }
      ++v17;
      v16 += 28;
    }
    while (v17 < v15);
    unsigned int v27 = *((_DWORD *)this + 43);
    if (v18 > v27)
    {
      DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)this + 160, v18 - v27, 0);
      unsigned int v15 = *((_DWORD *)this + 42);
    }
    if (v15 < v18)
    {
      unint64_t v28 = v18 - (unint64_t)v15;
      uint64_t v29 = (_DWORD *)(*v11 + 28 * v15 + 24);
      do
      {
        *(_OWORD *)(v29 - 6) = xmmword_2140992B0;
        *((void *)v29 - 1) = 0xFFFFFFFFLL;
        *uint64_t v29 = 0;
        v29 += 7;
        --v28;
      }
      while (v28);
    }
  }
  else
  {
LABEL_32:
    unsigned int v18 = 0;
  }
  *((_DWORD *)this + 42) = v18;
  uint64_t v30 = *((unsigned int *)this + 56);
  if (v30)
  {
    int v31 = v35;
    uint64_t v32 = (_DWORD *)(*((void *)this + 27) + 8);
    do
    {
      uint64_t v33 = *v32;
      if (v33 != -1) {
        *uint64_t v32 = *((_DWORD *)v31 + v33);
      }
      v32 += 7;
      --v30;
    }
    while (v30);
  }
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v35);
}

void sub_213E69E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int64x2_t FstSearchDurationBackoff::vite(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  FstSearchDurationBackoff::advanceDeltas((FstSearchDurationBackoff *)this, a2, a3, a4, a5);
  int64x2_t v13 = 0u;
  int64x2_t v14 = 0u;
  SnapTime::recordTime((SnapTime *)&v13, 1, 0, 0, 0);
  if (a2 >= 1)
  {
    unsigned int v7 = *((_DWORD *)this + 18);
    if (v7)
    {
      if (!(a2 % v7)) {
        FstSearchDurationBackoff::collectTraces((FstSearchDurationBackoff *)this);
      }
    }
  }
  int64x2_t v11 = 0u;
  int64x2_t v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  uint64_t v8 = this[13];
  int64x2_t result = vaddq_s64(v8[14], vsubq_s64(v11, v13));
  int64x2_t v10 = vaddq_s64(v8[15], vsubq_s64(v12, v14));
  v8[14] = result;
  v8[15] = v10;
  return result;
}

_DWORD *FstSearchDurationBackoff::reset(_DWORD *this)
{
  this[42] = 0;
  this[46] = 0;
  this[56] = 0;
  return this;
}

double FstSearchDurationBackoff::doFrame(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  if (a3 >= 20000) {
    a3 = 20000;
  }
  *(void *)&double result = FstSearchDurationBackoff::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearchDurationBackoff::beginTopRecPassSyncRecog(FstSearchDurationBackoff *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 264, a3, *((PelScoreCache **)this + 4));
    uint64_t result = ArcGraph::findBackoffState(*((void *)this + 5));
    *((_DWORD *)this + 94) = result;
    *((unsigned char *)this + 380) = 1;
  }
  return result;
}

uint64_t FstSearchDurationBackoff::endTopRecPassSyncRecog(FstSearchDurationBackoff *this)
{
  int64x2_t v10 = 0u;
  int64x2_t v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  FstSearchDurationHashBackoff::generateTraceTokensFromTraces((unint64_t)this);
  int64x2_t v8 = 0u;
  int64x2_t v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  int64x2_t v2 = vsubq_s64(v8, v10);
  unsigned int v3 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v4 = v3[13];
  int64x2_t v5 = vaddq_s64(v3[12], v2);
  int64x2_t v8 = v2;
  int64x2_t v9 = vsubq_s64(v9, v11);
  int64x2_t v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + 64) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

void FstSearchDurationBackoff::printSize(FstSearchDurationBackoff *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v116);
  if (v117) {
    uint64_t v16 = v116;
  }
  else {
    uint64_t v16 = &unk_214099300;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_214099300, a3, &unk_214099300, v16);
  DgnString::~DgnString((DgnString *)&v116);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_214099300);
  uint64_t v21 = (a3 + 1);
  uint64_t v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v116);
  if (v117) {
    unsigned int v27 = v116;
  }
  else {
    unsigned int v27 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v116);
  if (v117) {
    uint64_t v32 = v116;
  }
  else {
    uint64_t v32 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v116);
  if (v117) {
    uint64_t v37 = v116;
  }
  else {
    uint64_t v37 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v37, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v116);
  if (v117) {
    int v42 = v116;
  }
  else {
    int v42 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v42, 4, 4, 0);
  uint64_t v111 = a2;
  int64x2_t v112 = a6;
  uint64_t v113 = a3;
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  uint64_t v43 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v43 = 16;
  }
  uint64_t v44 = *((unsigned int *)this + 42);
  uint64_t v45 = 28 * v44;
  if ((int)v44 <= 0) {
    uint64_t v45 = 0;
  }
  uint64_t v46 = v45 + v43;
  uint64_t v47 = v45 + v43 + 28 * (*((_DWORD *)this + 43) - v44);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v116);
  if (v117) {
    int v52 = v116;
  }
  else {
    int v52 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, v21, &unk_214099300, v22, v22, v52, v47, v46, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v47;
  *a5 += v46;
  uint64_t v53 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v53 = 16;
  }
  uint64_t v54 = *((unsigned int *)this + 46);
  uint64_t v55 = 16 * v54;
  if ((int)v54 <= 0) {
    uint64_t v55 = 0;
  }
  uint64_t v56 = v55 + v53;
  uint64_t v57 = v55 + v53 + 16 * (*((_DWORD *)this + 47) - v54);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v116);
  if (v117) {
    unsigned int v62 = v116;
  }
  else {
    unsigned int v62 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, v21, &unk_214099300, v22, v22, v62, v57, v56, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v57;
  *a5 += v56;
  uint64_t v63 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v63 = 16;
  }
  int v64 = *((_DWORD *)this + 56);
  uint64_t v65 = 26 * v64;
  if (v64 <= 0) {
    uint64_t v65 = 0;
  }
  uint64_t v66 = v65 + v63;
  uint64_t v67 = v65 + v63 + 26 * (*((_DWORD *)this + 57) - v64);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v116);
  if (v117) {
    uint64_t v72 = v116;
  }
  else {
    uint64_t v72 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, v21, &unk_214099300, v22, v22, v72, v67, v66, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v67;
  *a5 += v66;
  uint64_t v73 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v73 = 16;
  }
  int v74 = *((_DWORD *)this + 60);
  uint64_t v75 = 26 * v74;
  if (v74 <= 0) {
    uint64_t v75 = 0;
  }
  uint64_t v76 = v75 + v73;
  uint64_t v77 = v75 + v73 + 26 * (*((_DWORD *)this + 61) - v74);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v116);
  if (v117) {
    int64x2_t v82 = v116;
  }
  else {
    int64x2_t v82 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, v21, &unk_214099300, v22, v22, v82, v77, v76, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v77;
  *a5 += v76;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v116);
  if (v117) {
    uint64_t v87 = v116;
  }
  else {
    uint64_t v87 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v83, v84, v85, v86, v21, &unk_214099300, v22, v22, v87, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v116);
  if (v117) {
    int v92 = v116;
  }
  else {
    int v92 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, v21, &unk_214099300, v22, v22, v92, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v116);
  if (v117) {
    int v97 = v116;
  }
  else {
    int v97 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v93, v94, v95, v96, v21, &unk_214099300, v22, v22, v97, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  uint64_t v98 = sizeObject((uint64_t)this + 264, 0);
  uint64_t v99 = sizeObject((uint64_t)this + 264, 1);
  uint64_t v100 = sizeObject((uint64_t)this + 264, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v116);
  if (v117) {
    int v105 = v116;
  }
  else {
    int v105 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v101, v102, v103, v104, v21, &unk_214099300, v22, v22, v105, v98, v99, v100);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v98;
  *a5 += v99;
  *v112 += v100;
  unint64_t v114 = 0;
  unint64_t v115 = 0;
  SearchItf::printSize(this, v111, v21, &v115, &v114, &v114);
  *a4 += v115;
  *a5 += v114;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v116);
  if (v117) {
    int64x2_t v110 = v116;
  }
  else {
    int64x2_t v110 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v106, v107, v108, v109, v113, &unk_214099300, (35 - v113), (35 - v113), v110, *a4, *a5, *v112);
  DgnString::~DgnString((DgnString *)&v116);
}

void sub_213E6A76C(_Unwind_Exception *a1)
{
  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

BOOL FstSearchDurationBackoff::findBestPath(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8 = *(unsigned int *)(a1 + 168);
  if (v8) {
    BOOL v9 = *(_DWORD *)(a3 + 8) == 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    *(void *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v8;
  }
  if (v8) {
    BOOL v10 = *(_DWORD *)(a2 + 8) == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    *(void *)a2 = MemChunkAlloc(v8, 0);
    *(_DWORD *)(a2 + 8) = v8;
LABEL_14:
    uint64_t v11 = 0;
    do
    {
      *(unsigned char *)(*(void *)a2 + v11) = 0;
      *(unsigned char *)(*(void *)a3 + v11++) = 0;
    }
    while (v8 != v11);
    goto LABEL_16;
  }
  if (v8) {
    goto LABEL_14;
  }
LABEL_16:
  unsigned int BestTrace = FstSearchDurationHashBackoff::getBestTrace(a1, (void *)a2, (void *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1) {
    return 0;
  }
  uint64_t v13 = *(void *)(a1 + 160) + 28 * BestTrace;
  LODWORD(v13) = *(_DWORD *)(v13 + 12) + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v13 + 4));
  *a4 = v13;
  return v13 != 1879048192;
}

uint64_t FstSearchDurationBackoff::buildWordLattice(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4, char a5)
{
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  int v29 = 0;
  uint64_t v26 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v25, *(unsigned int *)(a1 + 168));
  BOOL v9 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v9, 0, 128);
  v9[4] = (uint64_t)a2;
  FstSearchDurationHashBackoff::createLatticeNodes(a1, (uint64_t)&v28, (uint64_t)&v26, (uint64_t)a2, v25, a3, a4);
  uint64_t v23 = (uint64_t)v9;
  uint64_t v11 = *(unsigned int *)(a1 + 168);
  if (v11)
  {
    uint64_t v12 = 0;
    int v13 = v27;
    do
    {
      if (*(unsigned char *)(*a3 + v12))
      {
        uint64_t v14 = *(void *)(a1 + 160);
        if (*(_DWORD *)(v14 + 28 * v12) != 16777209)
        {
          uint64_t v15 = *(void *)(a1 + 176) + 16 * *(unsigned int *)(v14 + 28 * v12 + 8);
          uint64_t v16 = *(unsigned int *)(v15 + 8);
          if (v16 == -1) {
            unsigned int v17 = 0;
          }
          else {
            unsigned int v17 = v13 - *(_DWORD *)(v28 + 4 * v16);
          }
          uint64_t v18 = *(unsigned int *)(v26 + 4 * v17);
          if (*(unsigned char *)(*a4 + v12)) {
            FstSearchDurationBackoff::createLatticeLink(a1, v12, (int *)v15, 0xFFFFFFFFLL, v18, (const WordLatticeLC *)*(unsigned int *)(v26 + 4 * (v13 - *(_DWORD *)(v28 + 4 * v12))), a2, v10, a5);
          }
          uint64_t v19 = v25[0];
          if (*(_DWORD *)(v25[0] + 16 * v12 + 8))
          {
            unint64_t v20 = 0;
            do
            {
              uint64_t v21 = *(unsigned int *)(*(void *)(v19 + 16 * v12) + 4 * v20);
              FstSearchDurationBackoff::createLatticeLink(a1, v12, (int *)v15, v21, v18, (const WordLatticeLC *)*(unsigned int *)(v26 + 4 * (v13 - *(_DWORD *)(v28 + 4 * v21))), a2, v10, a5);
              ++v20;
              uint64_t v19 = v25[0];
            }
            while (v20 < *(unsigned int *)(v25[0] + 16 * v12 + 8));
          }
        }
      }
      ++v12;
    }
    while (v12 != v11);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>(v23);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v25);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v26);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v28);
}

void sub_213E6AAC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearchDurationBackoff::createLatticeLink(uint64_t a1, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, const WordLatticeLC *a6, uint64_t *a7, uint64_t a8, char a9)
{
  unsigned int v11 = a5;
  unsigned int v12 = a4;
  uint64_t v16 = *(void *)(a1 + 160);
  if ((a4 & 0x80000000) != 0)
  {
    unsigned int v17 = 0;
  }
  else if (*(_DWORD *)(*(void *)(a1 + 176) + 16 * *(unsigned int *)(v16 + 28 * a4 + 8) + 8) == a2)
  {
    unsigned int v17 = (_DWORD *)(*(void *)(a1 + 176) + 16 * *(unsigned int *)(v16 + 28 * a4 + 8));
  }
  else
  {
    unsigned int v17 = 0;
  }
  ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *(_DWORD *)(v16 + 28 * a2), (uint64_t)a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8, (uint64_t)v41);
  int v18 = a3[1];
  if (v17)
  {
    v18 += v17[1];
    int v19 = *v17 + *a3;
  }
  else
  {
    int v19 = *a3;
  }
  if (v41[0] >> 25 == 126)
  {
    int v20 = 0;
    int v21 = v18;
    if ((v12 & 0x80000000) != 0)
    {
LABEL_11:
      int v22 = 0;
      goto LABEL_14;
    }
  }
  else
  {
    int v20 = *(_DWORD *)(a1 + 136);
    int v21 = v18 - v20;
    if ((v12 & 0x80000000) != 0) {
      goto LABEL_11;
    }
  }
  int v22 = *(_DWORD *)(a1 + 140);
  v21 -= v22;
LABEL_14:
  int v23 = a3[3];
  if (v17) {
    v23 += v17[3];
  }
  int v35 = v21;
  uint64_t v36 = 0;
  int v37 = v20;
  int v38 = v19 - v18 - v23;
  int v39 = v23;
  int v40 = v22;
  unsigned int v24 = a3[2];
  uint64_t v25 = *(void *)(a1 + 160);
  if (v24 == -1)
  {
    int v27 = 0;
    if (a9) {
      goto LABEL_22;
    }
  }
  else
  {
    int v26 = *(_DWORD *)(v25 + 28 * v24 + 4);
    if (a9)
    {
      if (v26 >= 1) {
        --v26;
      }
      int v27 = (v26 >> 1) + 1;
LABEL_22:
      int v28 = *(_DWORD *)(v25 + 28 * a2 + 4);
      if (v28 >= 1) {
        --v28;
      }
      int v29 = v28 >> 1;
      int v30 = v29 - v27 + 1;
      if ((v12 & 0x80000000) == 0)
      {
        int v31 = *(_DWORD *)(v25 + 28 * v12 + 4);
        if (v31 >= 1) {
          --v31;
        }
        int v32 = v31 >> 1;
        goto LABEL_31;
      }
LABEL_32:
      int v33 = 0;
      goto LABEL_33;
    }
    int v27 = v26 + 1;
  }
  int v29 = *(_DWORD *)(v25 + 28 * a2 + 4);
  int v30 = v29 - v27 + 1;
  if ((v12 & 0x80000000) != 0) {
    goto LABEL_32;
  }
  int v32 = *(_DWORD *)(v25 + 28 * v12 + 4);
LABEL_31:
  int v33 = v32 - v29;
LABEL_33:
  WordLatticeLC::WordLatticeLC((uint64_t)v34, (uint64_t)v41, v27, v30, v33, (uint64_t)&v35);
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v11, a6, (WordLatticeLC *)v34);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v34);
}

void sub_213E6AD00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchDurationBackoff::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(void *)(this + 112) = a2;
  if (*(unsigned char *)(this + 380)) {
    return MiniFst::beginTopFstSyncRecog(this + 264);
  }
  return this;
}

uint64_t FstSearchDurationBackoff::endTopRecSyncRecog(FstSearchDurationBackoff *this)
{
  uint64_t v1 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  return v1;
}

uint64_t FstSearchDurationBackoff::getBestExitScore(FstSearchDurationBackoff *this)
{
  unsigned int v17 = 0;
  uint64_t v18 = 0;
  *((_DWORD *)this + 63) = -1;
  unint64_t v1 = *((unsigned int *)this + 38);
  unint64_t v2 = *((unsigned int *)this + 56);
  if (v1 >= v2) {
    goto LABEL_16;
  }
  int64x2_t v4 = 0;
  unsigned int v5 = 0;
  uint64_t v6 = 28 * v1;
  do
  {
    uint64_t v7 = *((void *)this + 27) + v6;
    if (*(_DWORD *)(*((void *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      unsigned int v8 = *(_DWORD *)(v7 + 8);
      if (v8 != -1 && *(_DWORD *)(*((void *)this + 20) + 28 * v8 + 4) == *((_DWORD *)this + 62))
      {
        if (v5 == HIDWORD(v18))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v17, 1, 1);
          unsigned int v5 = v18;
          int64x2_t v4 = v17;
        }
        v4[v5] = v8;
        unsigned int v5 = v18 + 1;
        LODWORD(v18) = v18 + 1;
        unint64_t v2 = *((unsigned int *)this + 56);
      }
    }
    ++v1;
    v6 += 28;
  }
  while (v1 < v2);
  if (v5)
  {
    uint64_t v9 = *((void *)this + 20);
    uint64_t v10 = v5;
    int v11 = 1879048192;
    do
    {
      unsigned int v13 = *v4++;
      unsigned int v12 = v13;
      int v14 = *(_DWORD *)(v9 + 28 * v13 + 12);
      if (v11 > v14)
      {
        *((_DWORD *)this + 63) = *(_DWORD *)(v9 + 28 * v12 + 16);
        int v11 = v14;
      }
      --v10;
    }
    while (v10);
  }
  else
  {
LABEL_16:
    int v11 = 1879048192;
  }
  if (v11 >= 20000) {
    uint64_t v15 = 20000;
  }
  else {
    uint64_t v15 = v11;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v17);
  return v15;
}

void sub_213E6AE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t FstSearchDurationBackoff::getBestScoreMaybeUpdateFstNode(FstSearchDurationBackoff *this, Node *a2)
{
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v2 = *((unsigned int *)this + 56);
  if (v2)
  {
    unsigned int v3 = (int *)*((void *)this + 27);
    __int16 v4 = -1;
    int v5 = 1879048192;
    uint64_t v6 = v3;
    do
    {
      int v8 = *v6;
      v6 += 7;
      int v7 = v8;
      if (v5 > v8)
      {
        __int16 v4 = *((_WORD *)v3 + 6);
        int v5 = v7;
      }
      unsigned int v3 = v6;
      --v2;
    }
    while (v2);
    uint64_t v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000) {
        uint64_t v9 = 20000;
      }
      else {
        uint64_t v9 = v5;
      }
    }
  }
  else
  {
    uint64_t v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

void *FstSearchDurationBackoff::seedTheory(FstSearchDurationBackoff *this, int a2, int a3, int a4, SearchStats *a5)
{
  if (a4 == -2)
  {
    int v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    unsigned int v11 = *((_DWORD *)this + 42);
    if (v11 == *((_DWORD *)this + 43))
    {
      DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)this + 160, 1, 1);
      unsigned int v11 = *((_DWORD *)this + 42);
    }
    uint64_t v12 = *((void *)this + 20) + 28 * v11;
    *(_DWORD *)uint64_t v12 = a4;
    *(_DWORD *)(v12 + 4) = a3;
    *(_DWORD *)(v12 + 8) = -1;
    *(_DWORD *)(v12 + 12) = a2;
    *(void *)(v12 + 16) = 0xFFFFFFFFLL;
    *(_DWORD *)(v12 + 24) = 0;
    int v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  int v13 = *(_DWORD *)(*((void *)this + 5) + 144);
  unsigned int v14 = *((_DWORD *)this + 56);
  if (v14 == *((_DWORD *)this + 57))
  {
    DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)this + 216, 1, 1);
    unsigned int v14 = *((_DWORD *)this + 56);
  }
  uint64_t v15 = *((void *)this + 27) + 28 * v14;
  *(_DWORD *)uint64_t v15 = a2;
  *(_DWORD *)(v15 + 4) = v13;
  *(_DWORD *)(v15 + 8) = v9;
  *(_WORD *)(v15 + 12) = -2;
  *(void *)(v15 + 16) = 0;
  *(_DWORD *)(v15 + 24) = 0;
  LODWORD(v15) = *((_DWORD *)this + 56) + 1;
  *((_DWORD *)this + 56) = v15;
  *((_DWORD *)this + 38) = v15;

  return FstSearchDurationHashBackoff::propagateNulls(this, 20000, a3, a5);
}

uint64_t FstSearchDurationBackoff::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(unsigned int *)(result + 252);
  if (v8 != -1)
  {
    uint64_t v9 = result;
    uint64_t v10 = (unsigned int *)(*(void *)(result + 160) + 28 * v8);
    for (i = v10[4]; i != -1; uint64_t v8 = v16)
    {
      uint64_t v16 = i;
      uint64_t result = *(void *)(v9 + 40);
      if (*v10 == 16777209)
      {
        int v17 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        uint64_t result = ArcGraph::lexToCWID((ArcGraph *)result, *v10, a3, (uint64_t)a4, a5, a6, a7, a8);
        int v17 = result;
      }
      uint64_t v18 = *(unsigned int *)(a2 + 8);
      if (v18 == *(_DWORD *)(a2 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        uint64_t v18 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(void *)a2 + 4 * v18) = v17;
      ++*(_DWORD *)(a2 + 8);
      uint64_t v19 = *(unsigned int *)(a6 + 8);
      if (v19 == *(_DWORD *)(a6 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        uint64_t v19 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(void *)a6 + 4 * v19) = v8;
      ++*(_DWORD *)(a6 + 8);
      uint64_t v20 = *(void *)(v9 + 160);
      int v21 = *(_DWORD *)(v20 + 28 * v8 + 4);
      uint64_t v22 = *(unsigned int *)(a3 + 8);
      if (v22 == *(_DWORD *)(a3 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        uint64_t v22 = *(unsigned int *)(a3 + 8);
        uint64_t v20 = *(void *)(v9 + 160);
      }
      *(_DWORD *)(*(void *)a3 + 4 * v22) = v21;
      ++*(_DWORD *)(a3 + 8);
      int v23 = *(_DWORD *)(v20 + 28 * v8 + 12);
      uint64_t v24 = *(unsigned int *)(a5 + 8);
      if (v24 == *(_DWORD *)(a5 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        uint64_t v24 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(void *)a5 + 4 * v24) = v23;
      ++*(_DWORD *)(a5 + 8);
      uint64_t v10 = (unsigned int *)(*(void *)(v9 + 160) + 28 * v16);
      uint64_t i = v10[4];
    }
    *a4 = *v10;
  }
  return result;
}

void FstSearchDurationBackoff::checkSearchParametersValidityForArcGraph(FstSearchDurationBackoff *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *((void *)this + 5);
  if (*(unsigned char *)(v8 + 178))
  {
    int v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(unsigned char *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    }
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    }
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(void *)(**(void **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((void *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if (a2)
      {
        if (!*(unsigned char *)(v8 + 203)) {
          return;
        }
      }
      else if (*(unsigned char *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(unsigned char *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

uint64_t FstSearchDurationBackoff::makePartialResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    uint64_t v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(void *)a2 + v9))(*(void *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  unsigned int BestTrace = FstSearchDurationHashBackoff::getBestTrace(a1, 0, 0, 1);
  if (BestTrace == -1) {
    return 1879048192;
  }
  unsigned int v15 = BestTrace;
  FstSearchDurationHashBackoff::getHistory(a1, BestTrace, a3, a4, v11, v12, v13, v14);
  memset(v25, 0, sizeof(v25));
  int v26 = 0;
  if (*(_DWORD *)(a3 + 8))
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    int v18 = 0;
    do
    {
      uint64_t v19 = *(void *)a3 + v16;
      int v20 = *(_DWORD *)(v19 + 28);
      WordLatticeLC::WordLatticeLC((uint64_t)v24, v19, v18, *(_DWORD *)(v19 + 24) - v18, v20 - *(_DWORD *)(v19 + 24), (uint64_t)v25);
      uint64_t v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(void *)a2 + 112 * v21), (const WordLatticeLC *)v24);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v24);
      ++v17;
      v16 += 32;
      int v18 = v20;
    }
    while (v17 < *(unsigned int *)(a3 + 8));
  }
  uint64_t v22 = *(void *)(a1 + 160) + 28 * v15;
  return (*(_DWORD *)(v22 + 12) + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_213E6B57C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void FstSearchDuration::FstSearchDuration(FstSearchDuration *this, const int *a2, const int *a3)
{
  SearchItf::SearchItf(this);
  *(void *)uint64_t v5 = &unk_26C4E1540;
  *(_DWORD *)(v5 + 136) = *a2;
  *(_DWORD *)(v5 + 140) = *a3;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 232) = 0u;
  *(_OWORD *)(v5 + 216) = 0u;
  *(_DWORD *)(v5 + 248) = -1;
  *(_DWORD *)(v5 + 256) = 1879048192;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_OWORD *)(v5 + 264) = 0u;
  *(unsigned char *)(v5 + 380) = 0;
}

uint64_t FstSearchDuration::maybeInitDurModel(FstSearchDuration *this, const PicMgr *a2, int a3)
{
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  PicMgr::getPelDurIdMap((uint64_t)a2, (uint64_t)&v15);
  if (a3 == 1) {
    uint64_t v6 = 56;
  }
  else {
    uint64_t v6 = 72;
  }
  uint64_t v7 = v16;
  unsigned int v8 = *((_DWORD *)this + 51);
  if (v16 <= v8)
  {
    *((_DWORD *)this + 50) = v16;
    if (!v7) {
      goto LABEL_13;
    }
  }
  else
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 192, v16 - v8, 0);
    *((_DWORD *)this + 50) = v7;
  }
  uint64_t v9 = 0;
  uint64_t v10 = v15;
  uint64_t v11 = *((void *)this + 24);
  do
  {
    if (!(_WORD)v9 || (uint64_t v12 = *(unsigned __int16 *)(v10 + 2 * v9), v12 == 0xFFFF)) {
      __int16 v13 = 0;
    }
    else {
      __int16 v13 = *(_WORD *)(*(void *)((char *)a2 + v6) + 2 * v12);
    }
    *(_WORD *)(v11 + 2 * v9++) = v13;
  }
  while (v7 != v9);
LABEL_13:
  *((unsigned char *)this + 208) = *((unsigned char *)a2 + 8);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 3);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v15);
}

void sub_213E6B70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int64x2_t FstSearchDuration::advanceDeltas(FstSearchDuration *this, int a2, int a3, SearchStats *a4, int a5)
{
  int v8 = a2;
  v125[0] = a2;
  int64x2_t v123 = 0u;
  int64x2_t v124 = 0u;
  SnapTime::recordTime((SnapTime *)&v123, 1, 0, 0, 0);
  uint64_t v99 = (int *)((char *)this + 256);
  *((_DWORD *)this + 64) = a3;
  int v107 = *((_DWORD *)this + 2);
  unint64_t v10 = *((unsigned int *)this + 56);
  if (v10)
  {
    unsigned int v11 = 0;
    unsigned int v106 = 0;
    unint64_t v12 = 0;
    int v104 = *((_DWORD *)this + 53);
    int v92 = *((unsigned __int8 *)this + 208);
    int v97 = (FstSearchDuration *)((char *)this + 264);
    uint64_t v98 = (char *)this + 232;
    do
    {
      uint64_t v13 = *((void *)this + 27);
      uint64_t v14 = *((void *)this + 5);
      uint64_t v15 = 28 * v12;
      while (1)
      {
        uint64_t v16 = *(unsigned int *)(v13 + v15 + 4);
        if (*(_DWORD *)(v14 + 160) != v16) {
          break;
        }
        ++v12;
        v15 += 28;
        if (v12 >= v10) {
          goto LABEL_60;
        }
      }
      uint64_t v94 = a4;
      int v95 = v8;
      int v93 = a5;
      unsigned int v105 = v11;
      if (*(_DWORD *)(v14 + 140) > (int)v16)
      {
        int v17 = *(_DWORD *)(v13 + v15);
        int v18 = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(v13 + v15 + 12))
            + v17;
        uint64_t v19 = *((void *)this + 27) + v15;
        __int16 v20 = *(_WORD *)(v19 + 12);
        int v21 = *(_DWORD *)(v19 + 20);
        int v22 = v92;
        if (v21 >= 1) {
          int v22 = v92 - v21;
        }
        int v23 = v22 & ((v21 - v92) >> 31);
        if (*(_WORD *)(v19 + 12)) {
          int v24 = v23 + *(_DWORD *)(v19 + 24);
        }
        else {
          int v24 = *(_DWORD *)(v19 + 24);
        }
        if (*(_WORD *)(v19 + 12)) {
          int v25 = v21 - v92;
        }
        else {
          int v25 = *(_DWORD *)(v19 + 20);
        }
        if (*(_WORD *)(v19 + 12)) {
          int v26 = v23;
        }
        else {
          int v26 = 0;
        }
        int v27 = v18 + v26;
        if (v18 + v26 - v107 <= *v99)
        {
          uint64_t v28 = *(void *)(v19 + 4);
          __int16 v29 = *(_WORD *)(v19 + 14);
          int v30 = *(_DWORD *)(v19 + 16);
          if (*v99 > v27) {
            int *v99 = v27;
          }
          uint64_t v31 = *((unsigned int *)this + 60);
          if (v31 == *((_DWORD *)this + 61))
          {
            DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)v98, 1, 1);
            LODWORD(v31) = *((_DWORD *)this + 60);
          }
          uint64_t v32 = *((void *)this + 29) + 28 * v31;
          *(_DWORD *)uint64_t v32 = v27;
          *(void *)(v32 + 4) = v28;
          *(_WORD *)(v32 + 12) = v20;
          *(_WORD *)(v32 + 14) = v29;
          *(_DWORD *)(v32 + 16) = v30;
          *(_DWORD *)(v32 + 20) = v25;
          *(_DWORD *)(v32 + 24) = v24;
          int v33 = *((_DWORD *)this + 60);
          *((_DWORD *)this + 60) = v33 + 1;
          unsigned int v34 = v105;
          if (v106 == 2 * *((_DWORD *)this + 4)) {
            unsigned int v34 = v33 + 1;
          }
          unsigned int v105 = v34;
          ++v106;
        }
      }
      unsigned int v35 = v16;
      uint64_t v96 = this;
      do
      {
        uint64_t v36 = *((void *)this + 5);
        uint64_t v37 = *(void *)(v36 + 152);
        unsigned int v38 = *(_DWORD *)(v37 + 4 * v35);
        int v39 = *(_DWORD *)(v37 + 4 * (v35 + 1));
        int v40 = *(_DWORD *)(v36 + 140);
        if (v40 <= v39)
        {
          if (v40 <= (int)v16 && *((unsigned char *)this + 380) != 0)
          {
            unsigned int v63 = (v38 & 0xFFFFF) <= 0xFFFF3 ? v38 & 0xFFFFF : v38 & 0xFFFFF | 0xF00000;
            if (v63 != 16777210)
            {
              DgnString::DgnString((DgnString *)&v120);
              ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v63, (DgnString *)&v120, v64, v65, v66, v67, v68);
              uint64_t v73 = &unk_214099300;
              if (v120.i32[2]) {
                uint64_t v73 = (void *)v120.i64[0];
              }
              xprintf("Seed from state %d score %d trace %d, %s\n", v69, v70, v71, v72, v16, *(unsigned int *)(*((void *)this + 27) + v15), *(unsigned int *)(*((void *)this + 27) + v15 + 8), v73);
              MiniFst::seed((uint64_t)v97, *(_DWORD *)(*((void *)this + 27) + v15), 0, *(_DWORD *)(*((void *)this + 27) + v15 + 8), v39);
              DgnString::~DgnString((DgnString *)&v120);
            }
          }
        }
        else
        {
          int v41 = (v38 >> 20) & 0x3FF;
          int ScoreNoBackoff = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), (unsigned __int16)*(_DWORD *)(v37 + 4 * v35));
          uint64_t v43 = *((void *)this + 27) + v15;
          int v44 = ScoreNoBackoff + v41 + *(_DWORD *)v43;
          if ((_WORD)v38) {
            int v46 = *(__int16 *)(*((void *)this + 24) + 2 * (unsigned __int16)v38);
          }
          else {
            int v46 = 0;
          }
          if ((_WORD)v38)
          {
            int v45 = *(__int16 *)(*((void *)this + 24) + 2 * (unsigned __int16)v38);
            int v47 = v45 & (v45 >> 31);
          }
          else
          {
            int v47 = 0;
          }
          int v48 = v104;
          if (!(_WORD)v38) {
            int v48 = 0;
          }
          int v49 = (*(_DWORD *)(v43 + 20) & ~(*(int *)(v43 + 20) >> 31)) - v47 + v48;
          int v50 = v44 + v49;
          int v51 = v44 + v49 - v107;
          int v52 = *((_DWORD *)this + 64);
          if (v51 <= v52)
          {
            int v53 = *(_DWORD *)(v43 + 8);
            __int16 v54 = *(_WORD *)(v43 + 14);
            int v55 = *(_DWORD *)(v43 + 16);
            int v56 = *(_DWORD *)(v43 + 24);
            if (v52 > v50) {
              int *v99 = v50;
            }
            uint64_t v57 = *((unsigned int *)this + 60);
            if (v57 == *((_DWORD *)this + 61))
            {
              int v102 = v53;
              int v103 = v46;
              __int16 v58 = v54;
              int v100 = v56;
              int v101 = v55;
              DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)v98, 1, 1);
              int v56 = v100;
              int v55 = v101;
              int v53 = v102;
              int v46 = v103;
              __int16 v54 = v58;
              this = v96;
              LODWORD(v57) = *((_DWORD *)v96 + 60);
            }
            uint64_t v59 = *((void *)this + 29) + 28 * v57;
            *(_DWORD *)uint64_t v59 = v50;
            *(_DWORD *)(v59 + 4) = v39;
            *(_DWORD *)(v59 + 8) = v53;
            *(_WORD *)(v59 + 12) = v38;
            *(_WORD *)(v59 + 14) = v54;
            *(_DWORD *)(v59 + 16) = v55 + v41;
            *(_DWORD *)(v59 + 20) = v46;
            *(_DWORD *)(v59 + 24) = v49 + v56;
            int v60 = *((_DWORD *)this + 60);
            *((_DWORD *)this + 60) = v60 + 1;
            unsigned int v61 = v105;
            if (v106 == 2 * *((_DWORD *)this + 4)) {
              unsigned int v61 = v60 + 1;
            }
            unsigned int v105 = v61;
            ++v106;
          }
        }
        v35 += 2;
      }
      while ((v38 & 0x80000000) == 0);
      unint64_t v12 = (v12 + 1);
      unint64_t v10 = *((unsigned int *)this + 56);
      int v8 = v95;
      a4 = v94;
      a5 = v93;
      unsigned int v11 = v105;
    }
    while (v12 < v10);
  }
  else
  {
    unsigned int v106 = 0;
    unsigned int v11 = 0;
  }
LABEL_60:
  int v122 = *((_DWORD *)this + 64) + v107;
  if (*((unsigned char *)this + 380)) {
    MiniFst::updateFrame((char *)this + 264, v99, v107, v8);
  }
  int64x2_t v120 = 0u;
  int64x2_t v121 = 0u;
  SnapTime::recordTime((SnapTime *)&v120, 1, 0, 0, 0);
  int64x2_t v120 = vsubq_s64(v120, v123);
  int64x2_t v121 = vsubq_s64(v121, v124);
  int v74 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v75 = vaddq_s64(v74[1], v121);
  *int v74 = vaddq_s64(*v74, v120);
  v74[1] = v75;
  int64x2_t v118 = 0u;
  int64x2_t v119 = 0u;
  SnapTime::recordTime((SnapTime *)&v118, 1, 0, 0, 0);
  if (v106 > 2 * *((_DWORD *)this + 4)) {
    FstSearchDurationHashBackoff::applyCutoffOnEmitting((uint64_t)this, v11, &v122);
  }
  int64x2_t v116 = 0u;
  int64x2_t v117 = 0u;
  SnapTime::recordTime((SnapTime *)&v116, 1, 0, 0, 0);
  int64x2_t v76 = vsubq_s64(v116, v118);
  uint64_t v77 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v78 = v77[3];
  int64x2_t v79 = vaddq_s64(v77[2], v76);
  int64x2_t v116 = v76;
  int64x2_t v117 = vsubq_s64(v117, v119);
  int64x2_t v80 = vaddq_s64(v78, v117);
  v77[2] = v79;
  v77[3] = v80;
  int64x2_t v114 = 0u;
  int64x2_t v115 = 0u;
  SnapTime::recordTime((SnapTime *)&v114, 1, 0, 0, 0);
  FstSearchDurationBackoff::makeViterbiDecisionOnEmitting((uint64_t)this);
  unint64_t v81 = *((unsigned int *)this + 6);
  if (v81)
  {
    unint64_t v82 = *((unsigned int *)this + 56);
    if (v81 < v82) {
      mrec_nth_element<FstSearchLatticeHashBackoffcmpTok>(*((void *)this + 27), v81, v82);
    }
  }
  int64x2_t v112 = 0u;
  int64x2_t v113 = 0u;
  SnapTime::recordTime((SnapTime *)&v112, 1, 0, 0, 0);
  int64x2_t v83 = vsubq_s64(v112, v114);
  uint64_t v84 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v85 = v84[5];
  int64x2_t v86 = vaddq_s64(v84[4], v83);
  int64x2_t v112 = v83;
  int64x2_t v113 = vsubq_s64(v113, v115);
  int64x2_t v87 = vaddq_s64(v85, v113);
  v84[4] = v86;
  v84[5] = v87;
  int64x2_t v110 = 0u;
  int64x2_t v111 = 0u;
  SnapTime::recordTime((SnapTime *)&v110, 1, 0, 0, 0);
  *((_DWORD *)this + 60) = 0;
  uint64_t v88 = *((unsigned int *)this + 56);
  *((_DWORD *)this + 38) = v88;
  if (a4)
  {
    *((void *)a4 + 2) += v88;
    if (*((_DWORD *)a4 + 2) > v88) {
      LODWORD(v88) = *((_DWORD *)a4 + 2);
    }
    *((_DWORD *)a4 + 2) = v88;
  }
  if (*((unsigned char *)this + 380)) {
    FstSearchDuration::seedFromMiniFst((uint64_t)this, v125);
  }
  if (a5) {
    FstSearchDurationHashBackoff::propagateNulls(this, v122, v8, a4);
  }
  *((_DWORD *)this + 62) = v8;
  int64x2_t v108 = 0u;
  int64x2_t v109 = 0u;
  SnapTime::recordTime((SnapTime *)&v108, 1, 0, 0, 0);
  uint64_t v89 = (int64x2_t *)*((void *)this + 13);
  int64x2_t result = vaddq_s64(v89[6], vsubq_s64(v108, v110));
  int64x2_t v91 = vaddq_s64(v89[7], vsubq_s64(v109, v111));
  v89[6] = result;
  v89[7] = v91;
  return result;
}

void sub_213E6BDAC(_Unwind_Exception *exception_object)
{
}

uint64_t FstSearchDuration::seedFromMiniFst(uint64_t this, int *a2)
{
  if (*(unsigned char *)(this + 380))
  {
    uint64_t v2 = this;
    unsigned int v3 = *(_DWORD *)(this + 288);
    if (v3 >= *(_DWORD *)(this + 20)) {
      unsigned int v3 = *(_DWORD *)(this + 20);
    }
    if (v3)
    {
      uint64_t v5 = 0;
      unsigned int v6 = 0;
      uint64_t v20 = this + 216;
      int v21 = (void *)(this + 160);
      do
      {
        uint64_t v7 = (int *)(*(void *)(v2 + 280) + v5);
        int v8 = *v7;
        int v10 = v7[6];
        int v9 = v7[7];
        int v11 = v7[2];
        v22[0] = 0;
        v22[1] = 0;
        if ((v11 & 0x80000000) == 0)
        {
          while (1)
            ;
        }
        unsigned int v12 = -2 - v11;
        if (v9 == 16777213)
        {
          int v9 = 16777209;
          if (*(_DWORD *)(*v21 + 28 * v12) == 16777209) {
            unsigned int v12 = *(_DWORD *)(*(void *)(v2 + 176) + 16 * *(unsigned int *)(*v21 + 28 * v12 + 8) + 8);
          }
        }
        int v13 = *a2;
        uint64_t v14 = *(unsigned int *)(v2 + 168);
        if (v14 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)v21, 1, 1);
          LODWORD(v14) = *(_DWORD *)(v2 + 168);
        }
        uint64_t v15 = (int *)(*(void *)(v2 + 160) + 28 * v14);
        *uint64_t v15 = v9;
        v15[1] = v13;
        v15[2] = -1;
        v15[3] = v8;
        v15[5] = 0;
        v15[6] = 0;
        v15[4] = v12;
        int v16 = *(_DWORD *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v16 + 1;
        uint64_t v17 = *(unsigned int *)(v2 + 224);
        if (v17 == *(_DWORD *)(v2 + 228))
        {
          DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(v20, 1, 1);
          LODWORD(v17) = *(_DWORD *)(v2 + 224);
        }
        uint64_t v18 = *(void *)(v2 + 216) + 28 * v17;
        *(_DWORD *)uint64_t v18 = v8;
        *(_DWORD *)(v18 + 4) = v10;
        *(_DWORD *)(v18 + 8) = v16;
        *(_WORD *)(v18 + 12) = -2;
        *(void *)(v18 + 16) = 0;
        *(_DWORD *)(v18 + 24) = 0;
        ++*(_DWORD *)(v2 + 224);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v22);
        ++v6;
        unsigned int v19 = *(_DWORD *)(v2 + 288);
        if (v19 >= *(_DWORD *)(v2 + 20)) {
          unsigned int v19 = *(_DWORD *)(v2 + 20);
        }
        v5 += 36;
      }
      while (v6 < v19);
    }
  }
  return this;
}

void sub_213E6BFA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchDuration::collectTraces(FstSearchDuration *this)
{
  unint64_t v2 = *((unsigned int *)this + 42);
  int v36 = 0;
  unsigned int v35 = 0;
  if (v2)
  {
    unsigned int v3 = MemChunkAlloc(4 * v2, 0);
    unint64_t v4 = 0;
    unsigned int v35 = v3;
    int v36 = v2;
    do
      *((_DWORD *)v3 + v4++) = 0;
    while (v4 < v2);
  }
  else
  {
    unsigned int v3 = 0;
  }
  unint64_t v5 = *((unsigned int *)this + 56);
  if (v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = (unsigned int *)(*((void *)this + 27) + 8);
    do
    {
      unsigned int v9 = *v7;
      v7 += 7;
      uint64_t v8 = v9;
      if (v9 != -1)
      {
        *((_DWORD *)v3 + v8) = 1;
        unint64_t v5 = *((unsigned int *)this + 56);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  int v10 = *((_DWORD *)this + 42);
  if (!v10) {
    goto LABEL_32;
  }
  int v11 = (uint64_t *)((char *)this + 160);
  unsigned int v12 = v10 - 1;
  do
  {
    uint64_t v13 = v12;
    if (*((_DWORD *)v3 + v12))
    {
      uint64_t v14 = *(unsigned int *)(*v11 + 28 * v12 + 16);
      if (v14 != -1) {
        *((_DWORD *)v3 + v14) = 1;
      }
    }
    --v12;
  }
  while (v13);
  unsigned int v15 = *((_DWORD *)this + 42);
  if (v15)
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    unsigned int v18 = 0;
    do
    {
      if (*((_DWORD *)v3 + v17))
      {
        uint64_t v19 = *v11;
        if (v17 != v18)
        {
          uint64_t v20 = (long long *)(v19 + v16);
          int v21 = (_OWORD *)(v19 + 28 * v18);
          long long v22 = *v20;
          *(_OWORD *)((char *)v21 + 12) = *(long long *)((char *)v20 + 12);
          *int v21 = v22;
          uint64_t v19 = *v11;
        }
        uint64_t v23 = v19 + 28 * v18;
        unsigned int v26 = *(_DWORD *)(v23 + 16);
        int v24 = (_DWORD *)(v23 + 16);
        uint64_t v25 = v26;
        if (v26 != -1) {
          *int v24 = *((_DWORD *)v3 + v25);
        }
        *((_DWORD *)v3 + v17) = v18++;
        unsigned int v15 = *((_DWORD *)this + 42);
      }
      ++v17;
      v16 += 28;
    }
    while (v17 < v15);
    unsigned int v27 = *((_DWORD *)this + 43);
    if (v18 > v27)
    {
      DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)this + 160, v18 - v27, 0);
      unsigned int v15 = *((_DWORD *)this + 42);
    }
    if (v15 < v18)
    {
      unint64_t v28 = v18 - (unint64_t)v15;
      __int16 v29 = (_DWORD *)(*v11 + 28 * v15 + 24);
      do
      {
        *(_OWORD *)(v29 - 6) = xmmword_2140992B0;
        *((void *)v29 - 1) = 0xFFFFFFFFLL;
        *__int16 v29 = 0;
        v29 += 7;
        --v28;
      }
      while (v28);
    }
  }
  else
  {
LABEL_32:
    unsigned int v18 = 0;
  }
  *((_DWORD *)this + 42) = v18;
  uint64_t v30 = *((unsigned int *)this + 56);
  if (v30)
  {
    uint64_t v31 = v35;
    uint64_t v32 = (_DWORD *)(*((void *)this + 27) + 8);
    do
    {
      uint64_t v33 = *v32;
      if (v33 != -1) {
        *uint64_t v32 = *((_DWORD *)v31 + v33);
      }
      v32 += 7;
      --v30;
    }
    while (v30);
  }
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v35);
}

void sub_213E6C1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int64x2_t FstSearchDuration::vite(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  FstSearchDuration::advanceDeltas((FstSearchDuration *)this, a2, a3, a4, a5);
  int64x2_t v13 = 0u;
  int64x2_t v14 = 0u;
  SnapTime::recordTime((SnapTime *)&v13, 1, 0, 0, 0);
  if (a2 >= 1)
  {
    unsigned int v7 = *((_DWORD *)this + 18);
    if (v7)
    {
      if (!(a2 % v7)) {
        FstSearchDuration::collectTraces((FstSearchDuration *)this);
      }
    }
  }
  int64x2_t v11 = 0u;
  int64x2_t v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  uint64_t v8 = this[13];
  int64x2_t result = vaddq_s64(v8[14], vsubq_s64(v11, v13));
  int64x2_t v10 = vaddq_s64(v8[15], vsubq_s64(v12, v14));
  v8[14] = result;
  v8[15] = v10;
  return result;
}

_DWORD *FstSearchDuration::reset(_DWORD *this)
{
  this[42] = 0;
  this[46] = 0;
  this[56] = 0;
  return this;
}

double FstSearchDuration::doFrame(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  if (a3 >= 20000) {
    a3 = 20000;
  }
  *(void *)&double result = FstSearchDuration::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearchDuration::beginTopRecPassSyncRecog(FstSearchDuration *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 264, a3, *((PelScoreCache **)this + 4));
    uint64_t result = ArcGraph::findBackoffState(*((void *)this + 5));
    *((_DWORD *)this + 94) = result;
    *((unsigned char *)this + 380) = 1;
  }
  return result;
}

uint64_t FstSearchDuration::endTopRecPassSyncRecog(FstSearchDuration *this)
{
  int64x2_t v10 = 0u;
  int64x2_t v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  FstSearchDurationHashBackoff::generateTraceTokensFromTraces((unint64_t)this);
  int64x2_t v8 = 0u;
  int64x2_t v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  int64x2_t v2 = vsubq_s64(v8, v10);
  unsigned int v3 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v4 = v3[13];
  int64x2_t v5 = vaddq_s64(v3[12], v2);
  int64x2_t v8 = v2;
  int64x2_t v9 = vsubq_s64(v9, v11);
  int64x2_t v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + 64) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

void FstSearchDuration::printSize(FstSearchDuration *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v116);
  if (v117) {
    uint64_t v16 = v116;
  }
  else {
    uint64_t v16 = &unk_214099300;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_214099300, a3, &unk_214099300, v16);
  DgnString::~DgnString((DgnString *)&v116);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_214099300);
  uint64_t v21 = (a3 + 1);
  uint64_t v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v116);
  if (v117) {
    unsigned int v27 = v116;
  }
  else {
    unsigned int v27 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v116);
  if (v117) {
    uint64_t v32 = v116;
  }
  else {
    uint64_t v32 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v116);
  if (v117) {
    uint64_t v37 = v116;
  }
  else {
    uint64_t v37 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v37, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v116);
  if (v117) {
    int v42 = v116;
  }
  else {
    int v42 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v42, 4, 4, 0);
  uint64_t v111 = a2;
  int64x2_t v112 = a6;
  uint64_t v113 = a3;
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  uint64_t v43 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v43 = 16;
  }
  uint64_t v44 = *((unsigned int *)this + 42);
  uint64_t v45 = 28 * v44;
  if ((int)v44 <= 0) {
    uint64_t v45 = 0;
  }
  uint64_t v46 = v45 + v43;
  uint64_t v47 = v45 + v43 + 28 * (*((_DWORD *)this + 43) - v44);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v116);
  if (v117) {
    int v52 = v116;
  }
  else {
    int v52 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, v21, &unk_214099300, v22, v22, v52, v47, v46, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v47;
  *a5 += v46;
  uint64_t v53 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v53 = 16;
  }
  uint64_t v54 = *((unsigned int *)this + 46);
  uint64_t v55 = 16 * v54;
  if ((int)v54 <= 0) {
    uint64_t v55 = 0;
  }
  uint64_t v56 = v55 + v53;
  uint64_t v57 = v55 + v53 + 16 * (*((_DWORD *)this + 47) - v54);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v116);
  if (v117) {
    unsigned int v62 = v116;
  }
  else {
    unsigned int v62 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, v21, &unk_214099300, v22, v22, v62, v57, v56, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v57;
  *a5 += v56;
  uint64_t v63 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v63 = 16;
  }
  int v64 = *((_DWORD *)this + 56);
  uint64_t v65 = 26 * v64;
  if (v64 <= 0) {
    uint64_t v65 = 0;
  }
  uint64_t v66 = v65 + v63;
  uint64_t v67 = v65 + v63 + 26 * (*((_DWORD *)this + 57) - v64);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v116);
  if (v117) {
    uint64_t v72 = v116;
  }
  else {
    uint64_t v72 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, v21, &unk_214099300, v22, v22, v72, v67, v66, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v67;
  *a5 += v66;
  uint64_t v73 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v73 = 16;
  }
  int v74 = *((_DWORD *)this + 60);
  uint64_t v75 = 26 * v74;
  if (v74 <= 0) {
    uint64_t v75 = 0;
  }
  uint64_t v76 = v75 + v73;
  uint64_t v77 = v75 + v73 + 26 * (*((_DWORD *)this + 61) - v74);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v116);
  if (v117) {
    unint64_t v82 = v116;
  }
  else {
    unint64_t v82 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, v21, &unk_214099300, v22, v22, v82, v77, v76, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v77;
  *a5 += v76;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v116);
  if (v117) {
    int64x2_t v87 = v116;
  }
  else {
    int64x2_t v87 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v83, v84, v85, v86, v21, &unk_214099300, v22, v22, v87, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v116);
  if (v117) {
    int v92 = v116;
  }
  else {
    int v92 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, v21, &unk_214099300, v22, v22, v92, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v116);
  if (v117) {
    int v97 = v116;
  }
  else {
    int v97 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v93, v94, v95, v96, v21, &unk_214099300, v22, v22, v97, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  uint64_t v98 = sizeObject((uint64_t)this + 264, 0);
  uint64_t v99 = sizeObject((uint64_t)this + 264, 1);
  uint64_t v100 = sizeObject((uint64_t)this + 264, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v116);
  if (v117) {
    unsigned int v105 = v116;
  }
  else {
    unsigned int v105 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v101, v102, v103, v104, v21, &unk_214099300, v22, v22, v105, v98, v99, v100);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v98;
  *a5 += v99;
  *v112 += v100;
  unint64_t v114 = 0;
  unint64_t v115 = 0;
  SearchItf::printSize(this, v111, v21, &v115, &v114, &v114);
  *a4 += v115;
  *a5 += v114;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v116);
  if (v117) {
    int64x2_t v110 = v116;
  }
  else {
    int64x2_t v110 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v106, v107, v108, v109, v113, &unk_214099300, (35 - v113), (35 - v113), v110, *a4, *a5, *v112);
  DgnString::~DgnString((DgnString *)&v116);
}

void sub_213E6CAF4(_Unwind_Exception *a1)
{
  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

BOOL FstSearchDuration::findBestPath(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8 = *(unsigned int *)(a1 + 168);
  if (v8) {
    BOOL v9 = *(_DWORD *)(a3 + 8) == 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    *(void *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v8;
  }
  if (v8) {
    BOOL v10 = *(_DWORD *)(a2 + 8) == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    *(void *)a2 = MemChunkAlloc(v8, 0);
    *(_DWORD *)(a2 + 8) = v8;
LABEL_14:
    uint64_t v11 = 0;
    do
    {
      *(unsigned char *)(*(void *)a2 + v11) = 0;
      *(unsigned char *)(*(void *)a3 + v11++) = 0;
    }
    while (v8 != v11);
    goto LABEL_16;
  }
  if (v8) {
    goto LABEL_14;
  }
LABEL_16:
  unsigned int BestTrace = FstSearchDurationHashBackoff::getBestTrace(a1, (void *)a2, (void *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1) {
    return 0;
  }
  uint64_t v13 = *(void *)(a1 + 160) + 28 * BestTrace;
  LODWORD(v13) = *(_DWORD *)(v13 + 12) + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v13 + 4));
  *a4 = v13;
  return v13 != 1879048192;
}

uint64_t FstSearchDuration::buildWordLattice(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4, char a5)
{
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  int v29 = 0;
  uint64_t v26 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v25, *(unsigned int *)(a1 + 168));
  BOOL v9 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v9, 0, 128);
  v9[4] = (uint64_t)a2;
  FstSearchDurationHashBackoff::createLatticeNodes(a1, (uint64_t)&v28, (uint64_t)&v26, (uint64_t)a2, v25, a3, a4);
  uint64_t v23 = (uint64_t)v9;
  uint64_t v11 = *(unsigned int *)(a1 + 168);
  if (v11)
  {
    uint64_t v12 = 0;
    int v13 = v27;
    do
    {
      if (*(unsigned char *)(*a3 + v12))
      {
        uint64_t v14 = *(void *)(a1 + 160);
        if (*(_DWORD *)(v14 + 28 * v12) != 16777209)
        {
          uint64_t v15 = *(void *)(a1 + 176) + 16 * *(unsigned int *)(v14 + 28 * v12 + 8);
          uint64_t v16 = *(unsigned int *)(v15 + 8);
          if (v16 == -1) {
            unsigned int v17 = 0;
          }
          else {
            unsigned int v17 = v13 - *(_DWORD *)(v28 + 4 * v16);
          }
          uint64_t v18 = *(unsigned int *)(v26 + 4 * v17);
          if (*(unsigned char *)(*a4 + v12)) {
            FstSearchDuration::createLatticeLink(a1, v12, (int *)v15, 0xFFFFFFFFLL, v18, (const WordLatticeLC *)*(unsigned int *)(v26 + 4 * (v13 - *(_DWORD *)(v28 + 4 * v12))), a2, v10, a5);
          }
          uint64_t v19 = v25[0];
          if (*(_DWORD *)(v25[0] + 16 * v12 + 8))
          {
            unint64_t v20 = 0;
            do
            {
              uint64_t v21 = *(unsigned int *)(*(void *)(v19 + 16 * v12) + 4 * v20);
              FstSearchDuration::createLatticeLink(a1, v12, (int *)v15, v21, v18, (const WordLatticeLC *)*(unsigned int *)(v26 + 4 * (v13 - *(_DWORD *)(v28 + 4 * v21))), a2, v10, a5);
              ++v20;
              uint64_t v19 = v25[0];
            }
            while (v20 < *(unsigned int *)(v25[0] + 16 * v12 + 8));
          }
        }
      }
      ++v12;
    }
    while (v12 != v11);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>(v23);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v25);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v26);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v28);
}

void sub_213E6CE48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearchDuration::createLatticeLink(uint64_t a1, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, const WordLatticeLC *a6, uint64_t *a7, uint64_t a8, char a9)
{
  unsigned int v11 = a5;
  unsigned int v12 = a4;
  uint64_t v16 = *(void *)(a1 + 160);
  if ((a4 & 0x80000000) != 0)
  {
    unsigned int v17 = 0;
  }
  else if (*(_DWORD *)(*(void *)(a1 + 176) + 16 * *(unsigned int *)(v16 + 28 * a4 + 8) + 8) == a2)
  {
    unsigned int v17 = (_DWORD *)(*(void *)(a1 + 176) + 16 * *(unsigned int *)(v16 + 28 * a4 + 8));
  }
  else
  {
    unsigned int v17 = 0;
  }
  ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *(_DWORD *)(v16 + 28 * a2), (uint64_t)a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8, (uint64_t)v41);
  int v18 = a3[1];
  if (v17)
  {
    v18 += v17[1];
    int v19 = *v17 + *a3;
  }
  else
  {
    int v19 = *a3;
  }
  if (v41[0] >> 25 == 126)
  {
    int v20 = 0;
    int v21 = v18;
    if ((v12 & 0x80000000) != 0)
    {
LABEL_11:
      int v22 = 0;
      goto LABEL_14;
    }
  }
  else
  {
    int v20 = *(_DWORD *)(a1 + 136);
    int v21 = v18 - v20;
    if ((v12 & 0x80000000) != 0) {
      goto LABEL_11;
    }
  }
  int v22 = *(_DWORD *)(a1 + 140);
  v21 -= v22;
LABEL_14:
  int v23 = a3[3];
  if (v17) {
    v23 += v17[3];
  }
  int v35 = v21;
  uint64_t v36 = 0;
  int v37 = v20;
  int v38 = v19 - v18 - v23;
  int v39 = v23;
  int v40 = v22;
  unsigned int v24 = a3[2];
  uint64_t v25 = *(void *)(a1 + 160);
  if (v24 == -1)
  {
    int v27 = 0;
    if (a9) {
      goto LABEL_22;
    }
  }
  else
  {
    int v26 = *(_DWORD *)(v25 + 28 * v24 + 4);
    if (a9)
    {
      if (v26 >= 1) {
        --v26;
      }
      int v27 = (v26 >> 1) + 1;
LABEL_22:
      int v28 = *(_DWORD *)(v25 + 28 * a2 + 4);
      if (v28 >= 1) {
        --v28;
      }
      int v29 = v28 >> 1;
      int v30 = v29 - v27 + 1;
      if ((v12 & 0x80000000) == 0)
      {
        int v31 = *(_DWORD *)(v25 + 28 * v12 + 4);
        if (v31 >= 1) {
          --v31;
        }
        int v32 = v31 >> 1;
        goto LABEL_31;
      }
LABEL_32:
      int v33 = 0;
      goto LABEL_33;
    }
    int v27 = v26 + 1;
  }
  int v29 = *(_DWORD *)(v25 + 28 * a2 + 4);
  int v30 = v29 - v27 + 1;
  if ((v12 & 0x80000000) != 0) {
    goto LABEL_32;
  }
  int v32 = *(_DWORD *)(v25 + 28 * v12 + 4);
LABEL_31:
  int v33 = v32 - v29;
LABEL_33:
  WordLatticeLC::WordLatticeLC((uint64_t)v34, (uint64_t)v41, v27, v30, v33, (uint64_t)&v35);
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v11, a6, (WordLatticeLC *)v34);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v34);
}

void sub_213E6D088(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchDuration::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(void *)(this + 112) = a2;
  if (*(unsigned char *)(this + 380)) {
    return MiniFst::beginTopFstSyncRecog(this + 264);
  }
  return this;
}

uint64_t FstSearchDuration::endTopRecSyncRecog(FstSearchDuration *this)
{
  uint64_t v1 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  return v1;
}

uint64_t FstSearchDuration::getBestExitScore(FstSearchDuration *this)
{
  unsigned int v17 = 0;
  uint64_t v18 = 0;
  *((_DWORD *)this + 63) = -1;
  unint64_t v1 = *((unsigned int *)this + 38);
  unint64_t v2 = *((unsigned int *)this + 56);
  if (v1 >= v2) {
    goto LABEL_16;
  }
  int64x2_t v4 = 0;
  unsigned int v5 = 0;
  uint64_t v6 = 28 * v1;
  do
  {
    uint64_t v7 = *((void *)this + 27) + v6;
    if (*(_DWORD *)(*((void *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      unsigned int v8 = *(_DWORD *)(v7 + 8);
      if (v8 != -1 && *(_DWORD *)(*((void *)this + 20) + 28 * v8 + 4) == *((_DWORD *)this + 62))
      {
        if (v5 == HIDWORD(v18))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v17, 1, 1);
          unsigned int v5 = v18;
          int64x2_t v4 = v17;
        }
        v4[v5] = v8;
        unsigned int v5 = v18 + 1;
        LODWORD(v18) = v18 + 1;
        unint64_t v2 = *((unsigned int *)this + 56);
      }
    }
    ++v1;
    v6 += 28;
  }
  while (v1 < v2);
  if (v5)
  {
    uint64_t v9 = *((void *)this + 20);
    uint64_t v10 = v5;
    int v11 = 1879048192;
    do
    {
      unsigned int v13 = *v4++;
      unsigned int v12 = v13;
      int v14 = *(_DWORD *)(v9 + 28 * v13 + 12);
      if (v11 > v14)
      {
        *((_DWORD *)this + 63) = *(_DWORD *)(v9 + 28 * v12 + 16);
        int v11 = v14;
      }
      --v10;
    }
    while (v10);
  }
  else
  {
LABEL_16:
    int v11 = 1879048192;
  }
  if (v11 >= 20000) {
    uint64_t v15 = 20000;
  }
  else {
    uint64_t v15 = v11;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v17);
  return v15;
}

void sub_213E6D214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t FstSearchDuration::getBestScoreMaybeUpdateFstNode(FstSearchDuration *this, Node *a2)
{
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v2 = *((unsigned int *)this + 56);
  if (v2)
  {
    unsigned int v3 = (int *)*((void *)this + 27);
    __int16 v4 = -1;
    int v5 = 1879048192;
    uint64_t v6 = v3;
    do
    {
      int v8 = *v6;
      v6 += 7;
      int v7 = v8;
      if (v5 > v8)
      {
        __int16 v4 = *((_WORD *)v3 + 6);
        int v5 = v7;
      }
      unsigned int v3 = v6;
      --v2;
    }
    while (v2);
    uint64_t v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000) {
        uint64_t v9 = 20000;
      }
      else {
        uint64_t v9 = v5;
      }
    }
  }
  else
  {
    uint64_t v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

void *FstSearchDuration::seedTheory(FstSearchDuration *this, int a2, int a3, int a4, SearchStats *a5)
{
  if (a4 == -2)
  {
    int v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    unsigned int v11 = *((_DWORD *)this + 42);
    if (v11 == *((_DWORD *)this + 43))
    {
      DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)this + 160, 1, 1);
      unsigned int v11 = *((_DWORD *)this + 42);
    }
    uint64_t v12 = *((void *)this + 20) + 28 * v11;
    *(_DWORD *)uint64_t v12 = a4;
    *(_DWORD *)(v12 + 4) = a3;
    *(_DWORD *)(v12 + 8) = -1;
    *(_DWORD *)(v12 + 12) = a2;
    *(void *)(v12 + 16) = 0xFFFFFFFFLL;
    *(_DWORD *)(v12 + 24) = 0;
    int v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  int v13 = *(_DWORD *)(*((void *)this + 5) + 144);
  unsigned int v14 = *((_DWORD *)this + 56);
  if (v14 == *((_DWORD *)this + 57))
  {
    DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)this + 216, 1, 1);
    unsigned int v14 = *((_DWORD *)this + 56);
  }
  uint64_t v15 = *((void *)this + 27) + 28 * v14;
  *(_DWORD *)uint64_t v15 = a2;
  *(_DWORD *)(v15 + 4) = v13;
  *(_DWORD *)(v15 + 8) = v9;
  *(_WORD *)(v15 + 12) = -2;
  *(void *)(v15 + 16) = 0;
  *(_DWORD *)(v15 + 24) = 0;
  LODWORD(v15) = *((_DWORD *)this + 56) + 1;
  *((_DWORD *)this + 56) = v15;
  *((_DWORD *)this + 38) = v15;

  return FstSearchDurationHashBackoff::propagateNulls(this, 20000, a3, a5);
}

uint64_t FstSearchDuration::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(unsigned int *)(result + 252);
  if (v8 != -1)
  {
    uint64_t v9 = result;
    uint64_t v10 = (unsigned int *)(*(void *)(result + 160) + 28 * v8);
    for (i = v10[4]; i != -1; uint64_t v8 = v16)
    {
      uint64_t v16 = i;
      uint64_t result = *(void *)(v9 + 40);
      if (*v10 == 16777209)
      {
        int v17 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        uint64_t result = ArcGraph::lexToCWID((ArcGraph *)result, *v10, a3, (uint64_t)a4, a5, a6, a7, a8);
        int v17 = result;
      }
      uint64_t v18 = *(unsigned int *)(a2 + 8);
      if (v18 == *(_DWORD *)(a2 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        uint64_t v18 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(void *)a2 + 4 * v18) = v17;
      ++*(_DWORD *)(a2 + 8);
      uint64_t v19 = *(unsigned int *)(a6 + 8);
      if (v19 == *(_DWORD *)(a6 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        uint64_t v19 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(void *)a6 + 4 * v19) = v8;
      ++*(_DWORD *)(a6 + 8);
      uint64_t v20 = *(void *)(v9 + 160);
      int v21 = *(_DWORD *)(v20 + 28 * v8 + 4);
      uint64_t v22 = *(unsigned int *)(a3 + 8);
      if (v22 == *(_DWORD *)(a3 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        uint64_t v22 = *(unsigned int *)(a3 + 8);
        uint64_t v20 = *(void *)(v9 + 160);
      }
      *(_DWORD *)(*(void *)a3 + 4 * v22) = v21;
      ++*(_DWORD *)(a3 + 8);
      int v23 = *(_DWORD *)(v20 + 28 * v8 + 12);
      uint64_t v24 = *(unsigned int *)(a5 + 8);
      if (v24 == *(_DWORD *)(a5 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        uint64_t v24 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(void *)a5 + 4 * v24) = v23;
      ++*(_DWORD *)(a5 + 8);
      uint64_t v10 = (unsigned int *)(*(void *)(v9 + 160) + 28 * v16);
      uint64_t i = v10[4];
    }
    *a4 = *v10;
  }
  return result;
}

void FstSearchDuration::checkSearchParametersValidityForArcGraph(FstSearchDuration *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *((void *)this + 5);
  if (*(unsigned char *)(v8 + 178))
  {
    int v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(unsigned char *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    }
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    }
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(void *)(**(void **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((void *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if (a2)
      {
        if (!*(unsigned char *)(v8 + 203)) {
          return;
        }
      }
      else if (*(unsigned char *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(unsigned char *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

uint64_t FstSearchDuration::makePartialResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    uint64_t v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(void *)a2 + v9))(*(void *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  unsigned int BestTrace = FstSearchDurationHashBackoff::getBestTrace(a1, 0, 0, 1);
  if (BestTrace == -1) {
    return 1879048192;
  }
  unsigned int v15 = BestTrace;
  FstSearchDurationHashBackoff::getHistory(a1, BestTrace, a3, a4, v11, v12, v13, v14);
  memset(v25, 0, sizeof(v25));
  int v26 = 0;
  if (*(_DWORD *)(a3 + 8))
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    int v18 = 0;
    do
    {
      uint64_t v19 = *(void *)a3 + v16;
      int v20 = *(_DWORD *)(v19 + 28);
      WordLatticeLC::WordLatticeLC((uint64_t)v24, v19, v18, *(_DWORD *)(v19 + 24) - v18, v20 - *(_DWORD *)(v19 + 24), (uint64_t)v25);
      uint64_t v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(void *)a2 + 112 * v21), (const WordLatticeLC *)v24);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v24);
      ++v17;
      v16 += 32;
      int v18 = v20;
    }
    while (v17 < *(unsigned int *)(a3 + 8));
  }
  uint64_t v22 = *(void *)(a1 + 160) + 28 * v15;
  return (*(_DWORD *)(v22 + 12) + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_213E6D904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t FstSearchLeafBackoff::maybeGeneratePelMaps(FstSearchLeafBackoff *this, const PicMgr *a2)
{
  return PicMgr::getPelPhoneMap((unint64_t)a2, (uint64_t)this + 224, (uint64_t)this + 208);
}

int64x2_t FstSearchLeafBackoff::advanceDeltas(FstSearchLeafBackoff *this, int a2, int a3, SearchStats *a4, int a5)
{
  int v8 = a2;
  v121[0] = a2;
  int64x2_t v119 = 0u;
  int64x2_t v120 = 0u;
  SnapTime::recordTime((SnapTime *)&v119, 1, 0, 0, 0);
  uint64_t v88 = (int *)((char *)this + 280);
  *((_DWORD *)this + 70) = a3;
  int v89 = *((_DWORD *)this + 2);
  unint64_t v10 = *((unsigned int *)this + 62);
  if (v10)
  {
    unsigned int v11 = 0;
    unsigned int v12 = 0;
    unint64_t v13 = 0;
    uint64_t v103 = (uint64_t *)((char *)this + 192);
    int64x2_t v87 = (char *)this + 256;
    do
    {
      uint64_t v14 = *((void *)this + 30);
      uint64_t v15 = *((void *)this + 5);
      uint64_t v16 = 28 * v13;
      while (1)
      {
        int v17 = *(_DWORD *)(v14 + v16 + 4);
        if (*(_DWORD *)(v15 + 160) != v17) {
          break;
        }
        ++v13;
        v16 += 28;
        if (v13 >= v10) {
          goto LABEL_62;
        }
      }
      int v86 = v8;
      uint64_t v85 = a4;
      int v84 = a5;
      uint64_t v101 = *(unsigned int *)(v14 + v16 + 4);
      if (*(_DWORD *)(v15 + 140) > v17
        && (*((_DWORD *)this + 19) + *((_DWORD *)this + 70) >= 5000
          ? (int v18 = 5000)
          : (int v18 = *((_DWORD *)this + 19) + *((_DWORD *)this + 70)),
            ScoreAllowBackoff_updateNodeInSequence = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(v14 + v16 + 12), *(_DWORD *)(v14 + v16), v18), int v20 = *((_DWORD *)this + 70), ScoreAllowBackoff_updateNodeInSequence - v89 <= v20))
      {
        int v22 = ScoreAllowBackoff_updateNodeInSequence;
        unsigned int v93 = v12;
        unsigned int v95 = v11;
        if (v20 > ScoreAllowBackoff_updateNodeInSequence) {
          *uint64_t v88 = ScoreAllowBackoff_updateNodeInSequence;
        }
        uint64_t v23 = *((void *)this + 30) + v16;
        uint64_t v24 = *(void *)(v23 + 4);
        __int16 v102 = *(_WORD *)(v23 + 12);
        __int16 v99 = *(_WORD *)(v23 + 14);
        int v97 = *(_DWORD *)(v23 + 16);
        uint64_t v25 = *(unsigned __int16 *)(v23 + 24);
        unsigned int v26 = *((_DWORD *)this + 50);
        unsigned int v27 = v26;
        int v21 = v89;
        if (*(_WORD *)(v23 + 24))
        {
          unsigned int v28 = *(_DWORD *)(v23 + 20);
          uint64_t v29 = *v103;
          uint64_t v30 = v25;
          unsigned int v27 = *((_DWORD *)this + 50);
          do
          {
            __int16 v31 = *(_WORD *)(v29 + 2 * v28);
            if (v27 == *((_DWORD *)this + 51))
            {
              DgnPrimArray<short>::reallocElts((uint64_t)v103, 1, 1);
              unsigned int v27 = *((_DWORD *)this + 50);
              uint64_t v29 = *((void *)this + 24);
            }
            *(_WORD *)(v29 + 2 * v27++) = v31;
            *((_DWORD *)this + 50) = v27;
            ++v28;
            --v30;
          }
          while (v30);
        }
        if (v27 == *((_DWORD *)this + 51))
        {
          DgnPrimArray<short>::reallocElts((uint64_t)v103, 1, 1);
          unsigned int v27 = *((_DWORD *)this + 50);
        }
        *(_WORD *)(*((void *)this + 24) + 2 * v27) = v102;
        *((_DWORD *)this + 50) = v27 + 1;
        uint64_t v32 = *((unsigned int *)this + 66);
        if (v32 == *((_DWORD *)this + 67))
        {
          DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)v87, 1, 1);
          LODWORD(v32) = *((_DWORD *)this + 66);
        }
        uint64_t v33 = *((void *)this + 32) + 28 * v32;
        *(_DWORD *)uint64_t v33 = v22;
        *(void *)(v33 + 4) = v24;
        *(_WORD *)(v33 + 12) = v102;
        *(_WORD *)(v33 + 14) = v99;
        *(_DWORD *)(v33 + 16) = v97;
        *(_DWORD *)(v33 + 20) = v26;
        *(_WORD *)(v33 + 24) = v25 + 1;
        int v34 = *((_DWORD *)this + 66);
        *((_DWORD *)this + 66) = v34 + 1;
        unsigned int v11 = v95;
        if (v93 == 2 * *((_DWORD *)this + 4)) {
          unsigned int v11 = v34 + 1;
        }
        unsigned int v12 = v93 + 1;
        int v17 = v101;
      }
      else
      {
        int v21 = v89;
      }
      unsigned int v35 = v17;
      do
      {
        uint64_t v36 = *((void *)this + 5);
        uint64_t v37 = *(void *)(v36 + 152);
        unsigned int v38 = *(_DWORD *)(v37 + 4 * v35);
        int v39 = *(_DWORD *)(v37 + 4 * (v35 + 1));
        int v40 = *(_DWORD *)(v36 + 140);
        if (v40 <= v39)
        {
          if (v40 <= (int)v101 && *((unsigned char *)this + 404) != 0)
          {
            unsigned int v55 = (v38 & 0xFFFFF) <= 0xFFFF3 ? v38 & 0xFFFFF : v38 & 0xFFFFF | 0xF00000;
            if (v55 != 16777210)
            {
              DgnString::DgnString((DgnString *)&v116);
              ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v55, (DgnString *)&v116, v56, v57, v58, v59, v60);
              uint64_t v65 = &unk_214099300;
              if (v116.i32[2]) {
                uint64_t v65 = (void *)v116.i64[0];
              }
              xprintf("Seed from state %d score %d trace %d, %s\n", v61, v62, v63, v64, v101, *(unsigned int *)(*((void *)this + 30) + v16), *(unsigned int *)(*((void *)this + 30) + v16 + 8), v65);
              MiniFst::seed((uint64_t)this + 288, *(_DWORD *)(*((void *)this + 30) + v16), 0, *(_DWORD *)(*((void *)this + 30) + v16 + 8), v39);
              DgnString::~DgnString((DgnString *)&v116);
            }
          }
        }
        else
        {
          if (*((_DWORD *)this + 19) + *((_DWORD *)this + 70) >= 5000) {
            int v41 = 5000;
          }
          else {
            int v41 = *((_DWORD *)this + 19) + *((_DWORD *)this + 70);
          }
          int v42 = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), (unsigned __int16)*(_DWORD *)(v37 + 4 * v35), *(_DWORD *)(*((void *)this + 30) + v16) + ((*(_DWORD *)(v37 + 4 * v35) >> 20) & 0x3FFu), v41);
          int v43 = *((_DWORD *)this + 70);
          if (v42 - v21 <= v43)
          {
            int v44 = v42;
            unsigned int v94 = v12;
            unsigned int v96 = v11;
            if (v43 > v42) {
              *uint64_t v88 = v42;
            }
            uint64_t v45 = *((void *)this + 30) + v16;
            int v91 = *(_DWORD *)(v45 + 8);
            __int16 v92 = *(_WORD *)(v45 + 14);
            int v90 = *(_DWORD *)(v45 + 16);
            unsigned int v46 = *((_DWORD *)this + 50);
            unsigned int v100 = v46;
            uint64_t v98 = *(unsigned __int16 *)(v45 + 24);
            if (*(_WORD *)(v45 + 24))
            {
              unsigned int v47 = *(_DWORD *)(v45 + 20);
              uint64_t v48 = *v103;
              uint64_t v49 = v98;
              unsigned int v46 = *((_DWORD *)this + 50);
              do
              {
                __int16 v50 = *(_WORD *)(v48 + 2 * v47);
                if (v46 == *((_DWORD *)this + 51))
                {
                  DgnPrimArray<short>::reallocElts((uint64_t)v103, 1, 1);
                  unsigned int v46 = *((_DWORD *)this + 50);
                  uint64_t v48 = *((void *)this + 24);
                }
                *(_WORD *)(v48 + 2 * v46++) = v50;
                *((_DWORD *)this + 50) = v46;
                ++v47;
                --v49;
              }
              while (v49);
            }
            if (v46 == *((_DWORD *)this + 51))
            {
              DgnPrimArray<short>::reallocElts((uint64_t)v103, 1, 1);
              unsigned int v46 = *((_DWORD *)this + 50);
            }
            *(_WORD *)(*((void *)this + 24) + 2 * v46) = v38;
            *((_DWORD *)this + 50) = v46 + 1;
            uint64_t v51 = *((unsigned int *)this + 66);
            unsigned int v11 = v96;
            int v21 = v89;
            if (v51 == *((_DWORD *)this + 67))
            {
              DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)v87, 1, 1);
              LODWORD(v51) = *((_DWORD *)this + 66);
            }
            uint64_t v52 = *((void *)this + 32) + 28 * v51;
            *(_DWORD *)uint64_t v52 = v44;
            *(_DWORD *)(v52 + 4) = v39;
            *(_DWORD *)(v52 + 8) = v91;
            *(_WORD *)(v52 + 12) = v38;
            *(_WORD *)(v52 + 14) = v92;
            *(_DWORD *)(v52 + 16) = v90 + ((v38 >> 20) & 0x3FF);
            *(_DWORD *)(v52 + 20) = v100;
            *(_WORD *)(v52 + 24) = v98 + 1;
            int v53 = *((_DWORD *)this + 66);
            *((_DWORD *)this + 66) = v53 + 1;
            if (v94 == 2 * *((_DWORD *)this + 4)) {
              unsigned int v11 = v53 + 1;
            }
            unsigned int v12 = v94 + 1;
          }
        }
        v35 += 2;
      }
      while ((v38 & 0x80000000) == 0);
      unint64_t v13 = (v13 + 1);
      unint64_t v10 = *((unsigned int *)this + 62);
      int v8 = v86;
      a4 = v85;
      a5 = v84;
    }
    while (v13 < v10);
  }
  else
  {
    unsigned int v12 = 0;
    unsigned int v11 = 0;
  }
LABEL_62:
  int v118 = *((_DWORD *)this + 70) + v89;
  if (*((unsigned char *)this + 404)) {
    MiniFst::updateFrame((char *)this + 288, v88, v89, v8);
  }
  int64x2_t v116 = 0u;
  int64x2_t v117 = 0u;
  SnapTime::recordTime((SnapTime *)&v116, 1, 0, 0, 0);
  int64x2_t v116 = vsubq_s64(v116, v119);
  int64x2_t v117 = vsubq_s64(v117, v120);
  uint64_t v66 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v67 = vaddq_s64(v66[1], v117);
  *uint64_t v66 = vaddq_s64(*v66, v116);
  v66[1] = v67;
  int64x2_t v114 = 0u;
  int64x2_t v115 = 0u;
  SnapTime::recordTime((SnapTime *)&v114, 1, 0, 0, 0);
  if (v12 > 2 * *((_DWORD *)this + 4)) {
    FstSearchLeafBackoff::applyCutoffOnEmitting((uint64_t)this, v11, &v118);
  }
  int64x2_t v112 = 0u;
  int64x2_t v113 = 0u;
  SnapTime::recordTime((SnapTime *)&v112, 1, 0, 0, 0);
  int64x2_t v68 = vsubq_s64(v112, v114);
  uint64_t v69 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v70 = v69[3];
  int64x2_t v71 = vaddq_s64(v69[2], v68);
  int64x2_t v112 = v68;
  int64x2_t v113 = vsubq_s64(v113, v115);
  int64x2_t v72 = vaddq_s64(v70, v113);
  v69[2] = v71;
  v69[3] = v72;
  int64x2_t v110 = 0u;
  int64x2_t v111 = 0u;
  SnapTime::recordTime((SnapTime *)&v110, 1, 0, 0, 0);
  FstSearchLeafBackoff::makeViterbiDecisionOnEmitting((uint64_t)this);
  unint64_t v73 = *((unsigned int *)this + 6);
  if (v73)
  {
    unint64_t v74 = *((unsigned int *)this + 62);
    if (v73 < v74) {
      mrec_nth_element<FstSearchLatticeHashBackoffcmpTok>(*((void *)this + 30), v73, v74);
    }
  }
  int64x2_t v108 = 0u;
  int64x2_t v109 = 0u;
  SnapTime::recordTime((SnapTime *)&v108, 1, 0, 0, 0);
  int64x2_t v75 = vsubq_s64(v108, v110);
  uint64_t v76 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v77 = v76[5];
  int64x2_t v78 = vaddq_s64(v76[4], v75);
  int64x2_t v108 = v75;
  int64x2_t v109 = vsubq_s64(v109, v111);
  int64x2_t v79 = vaddq_s64(v77, v109);
  v76[4] = v78;
  v76[5] = v79;
  int64x2_t v106 = 0u;
  int64x2_t v107 = 0u;
  SnapTime::recordTime((SnapTime *)&v106, 1, 0, 0, 0);
  *((_DWORD *)this + 66) = 0;
  uint64_t v80 = *((unsigned int *)this + 62);
  *((_DWORD *)this + 38) = v80;
  if (a4)
  {
    *((void *)a4 + 2) += v80;
    if (*((_DWORD *)a4 + 2) > v80) {
      LODWORD(v80) = *((_DWORD *)a4 + 2);
    }
    *((_DWORD *)a4 + 2) = v80;
  }
  if (*((unsigned char *)this + 404)) {
    FstSearchLeafBackoff::seedFromMiniFst((uint64_t)this, v121);
  }
  if (a5) {
    FstSearchLeafBackoff::propagateNulls(this, v118, v8, a4);
  }
  *((_DWORD *)this + 68) = v8;
  int64x2_t v104 = 0u;
  int64x2_t v105 = 0u;
  SnapTime::recordTime((SnapTime *)&v104, 1, 0, 0, 0);
  uint64_t v81 = (int64x2_t *)*((void *)this + 13);
  int64x2_t result = vaddq_s64(v81[6], vsubq_s64(v104, v106));
  int64x2_t v83 = vaddq_s64(v81[7], vsubq_s64(v105, v107));
  v81[6] = result;
  v81[7] = v83;
  return result;
}

void sub_213E6E0D8(_Unwind_Exception *exception_object)
{
}

uint64_t FstSearchLeafBackoff::applyCutoffOnEmitting(uint64_t this, unsigned int a2, int *a3)
{
  unint64_t v4 = *(unsigned int *)(this + 264);
  if (v4 > a2)
  {
    uint64_t v6 = this;
    int v7 = (void *)(this + 256);
    uint64_t v8 = a2;
    this = mrec_nth_element<FstSearchLatticeHashBackoffcmpTok>(*(void *)(this + 256), a2, v4);
    int v9 = *(_DWORD *)(*v7 + 28 * a2);
    if (*a3 > v9) {
      *a3 = v9;
    }
    unsigned int v10 = *(_DWORD *)(v6 + 268);
    if (a2 > v10) {
      this = DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)v7, a2 - v10, 0);
    }
    uint64_t v11 = *(unsigned int *)(v6 + 264);
    if (v11 < a2)
    {
      uint64_t v12 = v8 - v11;
      uint64_t v13 = *v7 + 28 * v11 + 12;
      do
      {
        *(void *)(v13 - 12) = 0xFFFFFFFF00000000;
        *(_DWORD *)(v13 - 4) = -1;
        *(_WORD *)uint64_t v13 = -2;
        *(_DWORD *)(v13 + 4) = 0;
        *(_DWORD *)(v13 + 8) = 0;
        *(_WORD *)(v13 + 12) = 0;
        v13 += 28;
        --v12;
      }
      while (v12);
    }
    *(_DWORD *)(v6 + 264) = a2;
  }
  return this;
}

uint64_t FstSearchLeafBackoff::makeViterbiDecisionOnEmitting(uint64_t this)
{
  uint64_t v1 = this;
  unint64_t v2 = *(unsigned int *)(this + 264);
  if (v2)
  {
    this = (uint64_t)mrec_qsort_r<FstSearchLateLatticeHashBackoffActiveToken>(*(char **)(this + 256), v2, 28);
    unint64_t v3 = *(unsigned int *)(v1 + 264);
    *(_DWORD *)(v1 + 248) = 0;
    if (v3)
    {
      uint64_t v4 = 0;
      unsigned int v5 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v7 = *(void *)(v1 + 256);
        if (!v4 || *(_DWORD *)(v7 + v4 + 4) != *(_DWORD *)(v7 + v4 - 24))
        {
          if (v5 == *(_DWORD *)(v1 + 252))
          {
            this = DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(v1 + 240, 1, 1);
            unsigned int v5 = *(_DWORD *)(v1 + 248);
          }
          uint64_t v8 = (_OWORD *)(*(void *)(v1 + 240) + 28 * v5);
          long long v9 = *(_OWORD *)(v7 + v4);
          *(_OWORD *)((char *)v8 + 12) = *(_OWORD *)(v7 + v4 + 12);
          *uint64_t v8 = v9;
          unsigned int v5 = *(_DWORD *)(v1 + 248) + 1;
          *(_DWORD *)(v1 + 248) = v5;
          unint64_t v3 = *(unsigned int *)(v1 + 264);
        }
        v4 += 28;
      }
    }
  }
  else
  {
    *(_DWORD *)(this + 248) = 0;
  }
  return this;
}

uint64_t FstSearchLeafBackoff::seedFromMiniFst(uint64_t this, int *a2)
{
  if (*(unsigned char *)(this + 404))
  {
    uint64_t v2 = this;
    unsigned int v3 = *(_DWORD *)(this + 312);
    if (v3 >= *(_DWORD *)(this + 20)) {
      unsigned int v3 = *(_DWORD *)(this + 20);
    }
    if (v3)
    {
      uint64_t v5 = 0;
      unsigned int v6 = 0;
      uint64_t v7 = (void *)(this + 160);
      uint64_t v21 = this + 240;
      do
      {
        uint64_t v8 = (int *)(*(void *)(v2 + 304) + v5);
        int v9 = *v8;
        int v11 = v8[6];
        int v10 = v8[7];
        int v12 = v8[2];
        v22[0] = 0;
        v22[1] = 0;
        if ((v12 & 0x80000000) == 0)
        {
          while (1)
            ;
        }
        uint64_t v13 = (-2 - v12);
        if (v10 == 16777213)
        {
          int v10 = 16777209;
          if (*(_DWORD *)(*v7 + 32 * (-2 - v12)) == 16777209) {
            LODWORD(v13) = *(_DWORD *)(*(void *)(v2 + 176) + 20 * *(unsigned int *)(*v7 + 32 * v13 + 8) + 8);
          }
        }
        int v14 = *a2;
        uint64_t v15 = *(unsigned int *)(v2 + 168);
        if (v15 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<PrefilterResultFrame>::reallocElts(v2 + 160, 1, 1);
          uint64_t v15 = *(unsigned int *)(v2 + 168);
        }
        uint64_t v16 = *(void *)(v2 + 160) + 32 * v15;
        *(_DWORD *)uint64_t v16 = v10;
        *(_DWORD *)(v16 + 4) = v14;
        *(_DWORD *)(v16 + 8) = -1;
        *(_DWORD *)(v16 + 12) = v9;
        *(_DWORD *)(v16 + 20) = 0;
        *(_DWORD *)(v16 + 24) = 0;
        *(_DWORD *)(v16 + 16) = v13;
        *(_WORD *)(v16 + 28) = 0;
        int v17 = *(_DWORD *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v17 + 1;
        uint64_t v18 = *(unsigned int *)(v2 + 248);
        if (v18 == *(_DWORD *)(v2 + 252))
        {
          DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(v21, 1, 1);
          LODWORD(v18) = *(_DWORD *)(v2 + 248);
        }
        uint64_t v19 = *(void *)(v2 + 240) + 28 * v18;
        *(_DWORD *)uint64_t v19 = v9;
        *(_DWORD *)(v19 + 4) = v11;
        *(_DWORD *)(v19 + 8) = v17;
        *(_WORD *)(v19 + 12) = -2;
        *(void *)(v19 + 16) = 0;
        *(_WORD *)(v19 + 24) = 0;
        ++*(_DWORD *)(v2 + 248);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v22);
        ++v6;
        unsigned int v20 = *(_DWORD *)(v2 + 312);
        if (v20 >= *(_DWORD *)(v2 + 20)) {
          unsigned int v20 = *(_DWORD *)(v2 + 20);
        }
        v5 += 36;
      }
      while (v6 < v20);
    }
  }
  return this;
}

void sub_213E6E498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void *FstSearchLeafBackoff::propagateNulls(FstSearchLeafBackoff *this, int a2, int a3, SearchStats *a4)
{
  int v5 = *((_DWORD *)this + 42);
  int64x2_t result = (void *)((char *)this + 240);
  unsigned int v7 = *((_DWORD *)this + 62);
  uint64_t v59 = result;
  if (!v7)
  {
    unsigned int v39 = *((_DWORD *)this + 38);
    if (a4) {
      goto LABEL_42;
    }
    goto LABEL_43;
  }
  int v48 = v5;
  unint64_t v8 = 0;
  uint64_t v49 = a4;
  int v58 = a2;
  do
  {
    uint64_t v9 = *(unsigned int *)(*((void *)this + 30) + 28 * v8 + 4);
    uint64_t v10 = *((void *)this + 5);
    if (*(_DWORD *)(v10 + 160) != v9
      && (*(_DWORD *)(v10 + 140) <= (int)v9 || (*(_DWORD *)(*(void *)(v10 + 152) + 4 * v9) & 0x40000000) != 0))
    {
      unsigned int v11 = *(_DWORD *)(*((void *)this + 30) + 28 * v8 + 4);
      unsigned int v56 = v11;
      unint64_t v57 = v8;
      do
      {
        uint64_t v12 = *((void *)this + 5);
        uint64_t v13 = *(void *)(v12 + 152);
        unsigned int v14 = *(_DWORD *)(v13 + 4 * v11);
        int v15 = *(_DWORD *)(v13 + 4 * (v11 + 1));
        int v16 = *(_DWORD *)(v12 + 140);
        if (v16 > v15) {
          goto LABEL_32;
        }
        int v17 = (v14 & 0xFFFFF) <= 0xFFFF3 ? v14 & 0xFFFFF : v14 & 0xFFFFF | 0xF00000;
        if (v16 <= (int)v9 && v17 != 16777210) {
          goto LABEL_32;
        }
        int v19 = (v14 >> 20) & 0x3FF;
        uint64_t v20 = *result;
        uint64_t v21 = *result + 28 * v8;
        int v22 = *(_DWORD *)v21 + v19;
        if (v22 > a2) {
          goto LABEL_32;
        }
        int v23 = *(_DWORD *)(v21 + 8);
        __int16 v24 = *(_WORD *)(v21 + 12);
        __int16 v25 = *(_WORD *)(v21 + 14);
        int v26 = *(_DWORD *)(v21 + 20);
        __int16 v27 = *(_WORD *)(v21 + 24);
        int v28 = *(_DWORD *)(v21 + 16) + v19;
        if (v17 == 16777210)
        {
          if (v7 != *((_DWORD *)this + 63)) {
            goto LABEL_31;
          }
        }
        else
        {
          if (v17 == 16777214) {
            int v29 = v28;
          }
          else {
            int v29 = 0;
          }
          if (v17 == 16777214) {
            int v30 = 0;
          }
          else {
            int v30 = v28;
          }
          uint64_t v31 = *((unsigned int *)this + 42);
          if (v31 == *((_DWORD *)this + 43))
          {
            __int16 v60 = v24;
            int v53 = v28;
            __int16 v54 = v25;
            int v51 = v30;
            int v52 = v23;
            int v50 = v29;
            DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)this + 160, 1, 1);
            int v29 = v50;
            int v30 = v51;
            int v23 = v52;
            int v28 = v53;
            __int16 v25 = v54;
            __int16 v24 = v60;
            a2 = v58;
            int64x2_t result = v59;
            uint64_t v31 = *((unsigned int *)this + 42);
          }
          __int16 v32 = 0;
          uint64_t v33 = *((void *)this + 20) + 32 * v31;
          *(_DWORD *)uint64_t v33 = v17;
          *(_DWORD *)(v33 + 4) = a3;
          *(_DWORD *)(v33 + 8) = -1;
          *(_DWORD *)(v33 + 12) = v22 - v29;
          *(_DWORD *)(v33 + 16) = v23;
          *(_DWORD *)(v33 + 20) = v30;
          *(_DWORD *)(v33 + 24) = v26;
          *(_WORD *)(v33 + 28) = v27;
          int v23 = *((_DWORD *)this + 42);
          *((_DWORD *)this + 42) = v23 + 1;
          unsigned int v7 = *((_DWORD *)this + 62);
          __int16 v27 = 0;
          if (v7 != *((_DWORD *)this + 63)) {
            goto LABEL_30;
          }
        }
        __int16 v34 = v24;
        int v61 = v26;
        __int16 v35 = v25;
        int v36 = v28;
        int v37 = v23;
        DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)result, 1, 1);
        int v23 = v37;
        int v28 = v36;
        __int16 v25 = v35;
        int v26 = v61;
        LODWORD(v9) = v56;
        unint64_t v8 = v57;
        __int16 v24 = v34;
        a2 = v58;
        int64x2_t result = v59;
        unsigned int v7 = *((_DWORD *)this + 62);
        __int16 v32 = v27;
LABEL_30:
        uint64_t v20 = *result;
        __int16 v27 = v32;
LABEL_31:
        uint64_t v38 = v20 + 28 * v7;
        *(_DWORD *)uint64_t v38 = v22;
        *(_DWORD *)(v38 + 4) = v15;
        *(_DWORD *)(v38 + 8) = v23;
        *(_WORD *)(v38 + 12) = v24;
        *(_WORD *)(v38 + 14) = v25;
        *(_DWORD *)(v38 + 16) = v28;
        *(_DWORD *)(v38 + 20) = v26;
        *(_WORD *)(v38 + 24) = v27;
        unsigned int v7 = *((_DWORD *)this + 62) + 1;
        *((_DWORD *)this + 62) = v7;
LABEL_32:
        v11 += 2;
      }
      while ((v14 & 0x80000000) == 0);
    }
    ++v8;
  }
  while (v8 < v7);
  unsigned int v39 = *((_DWORD *)this + 38);
  if (v7 > v39)
  {
    mrec_qsort_r<FstSearchLateLatticeHashBackoffActiveToken>((char *)(*((void *)this + 30) + 28 * v39), v7 - v39, 28);
    int64x2_t result = v59;
    unsigned int v39 = *((_DWORD *)this + 38);
    unsigned int v7 = *((_DWORD *)this + 62);
  }
  a4 = v49;
  int v5 = v48;
  if (v39 < v7)
  {
    unint64_t v40 = v39;
    uint64_t v41 = 28 * v39;
    do
    {
      uint64_t v42 = *result + v41;
      if (*(_DWORD *)(v42 + 4) != *(_DWORD *)(*result + 28 * (v40 - 1) + 4))
      {
        int v43 = (_OWORD *)(*result + 28 * v39);
        long long v44 = *(_OWORD *)v42;
        *(_OWORD *)((char *)v43 + 10) = *(_OWORD *)(v42 + 10);
        *int v43 = v44;
        ++v39;
        unsigned int v7 = *((_DWORD *)this + 62);
      }
      ++v40;
      v41 += 28;
    }
    while (v40 < v7);
  }
  if (v49) {
LABEL_42:
  }
    *((_DWORD *)a4 + 1) += *((_DWORD *)this + 42) - v5;
LABEL_43:
  unsigned int v45 = *((_DWORD *)this + 63);
  if (v39 > v45)
  {
    DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)result, v39 - v45, 0);
    int64x2_t result = v59;
    unsigned int v7 = *((_DWORD *)this + 62);
  }
  if (v7 < v39)
  {
    unint64_t v46 = v39 - (unint64_t)v7;
    uint64_t v47 = *result + 28 * v7 + 12;
    do
    {
      *(void *)(v47 - 12) = 0xFFFFFFFF00000000;
      *(_DWORD *)(v47 - 4) = -1;
      *(_WORD *)uint64_t v47 = -2;
      *(_DWORD *)(v47 + 4) = 0;
      *(_DWORD *)(v47 + 8) = 0;
      *(_WORD *)(v47 + 12) = 0;
      v47 += 28;
      --v46;
    }
    while (v46);
  }
  *((_DWORD *)this + 62) = v39;
  return result;
}

uint64_t FstSearchLeafBackoff::collectTraces(FstSearchLeafBackoff *this)
{
  uint64_t v2 = *((unsigned int *)this + 42);
  unsigned int v52 = 0;
  int v51 = 0;
  if (v2)
  {
    unsigned int v3 = MemChunkAlloc(4 * v2, 0);
    unint64_t v4 = 0;
    int v51 = v3;
    unsigned int v52 = v2;
    do
      *((_DWORD *)v3 + v4++) = 0;
    while (v4 < v52);
  }
  unint64_t v5 = *((unsigned int *)this + 62);
  if (v5)
  {
    unint64_t v6 = 0;
    unsigned int v7 = v51;
    unint64_t v8 = (unsigned int *)(*((void *)this + 30) + 8);
    do
    {
      unsigned int v10 = *v8;
      v8 += 7;
      uint64_t v9 = v10;
      if (v10 != -1)
      {
        *((_DWORD *)v7 + v9) = 1;
        unint64_t v5 = *((unsigned int *)this + 62);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  int v11 = *((_DWORD *)this + 42);
  if (v11)
  {
    uint64_t v12 = (uint64_t *)((char *)this + 160);
    uint64_t v13 = v51;
    unsigned int v14 = v11 - 1;
    do
    {
      uint64_t v15 = v14;
      if (*((_DWORD *)v13 + v14))
      {
        uint64_t v16 = *(unsigned int *)(*v12 + 32 * v14 + 16);
        if (v16 != -1) {
          *((_DWORD *)v13 + v16) = 1;
        }
      }
      --v14;
    }
    while (v15);
    unsigned int v17 = *((_DWORD *)this + 42);
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    if (v17)
    {
      uint64_t v18 = 0;
      unint64_t v19 = 0;
      unsigned int v20 = 0;
      do
      {
        uint64_t v21 = v51;
        if (*((_DWORD *)v51 + v19))
        {
          uint64_t v22 = *v12;
          if (v19 != v20)
          {
            int v23 = (long long *)(v22 + 32 * v19);
            __int16 v24 = (_OWORD *)(v22 + 32 * v20);
            long long v25 = *v23;
            *(_OWORD *)((char *)v24 + 14) = *(long long *)((char *)v23 + 14);
            *__int16 v24 = v25;
            uint64_t v22 = *v12;
          }
          uint64_t v26 = v22 + 32 * v20;
          unsigned int v29 = *(_DWORD *)(v26 + 16);
          __int16 v27 = (_DWORD *)(v26 + 16);
          uint64_t v28 = v29;
          if (v29 != -1) {
            *__int16 v27 = *((_DWORD *)v21 + v28);
          }
          int v30 = v50;
          if (*(_WORD *)(v22 + 32 * v20 + 28))
          {
            unsigned int v31 = 0;
            unsigned int v32 = v50;
            do
            {
              __int16 v33 = *(_WORD *)(*((void *)this + 24) + 2 * (v31 + *(_DWORD *)(v22 + 32 * v20 + 24)));
              if (v32 == HIDWORD(v50))
              {
                DgnPrimArray<short>::reallocElts((uint64_t)&v49, 1, 1);
                unsigned int v32 = v50;
                uint64_t v18 = v49;
                uint64_t v22 = *v12;
              }
              *(_WORD *)(v18 + 2 * v32++) = v33;
              LODWORD(v50) = v32;
              ++v31;
            }
            while (v31 < *(unsigned __int16 *)(v22 + 32 * v20 + 28));
          }
          *(_DWORD *)(v22 + 32 * v20 + 24) = v30;
          *((_DWORD *)v51 + v19) = v20++;
          unsigned int v17 = *((_DWORD *)this + 42);
        }
        ++v19;
      }
      while (v19 < v17);
      unsigned int v34 = *((_DWORD *)this + 43);
      if (v20 > v34)
      {
        DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)this + 160, v20 - v34, 0);
        unsigned int v17 = *((_DWORD *)this + 42);
      }
      if (v17 < v20)
      {
        unint64_t v35 = v20 - (unint64_t)v17;
        int v36 = (_WORD *)(*v12 + 32 * v17 + 28);
        do
        {
          *(_OWORD *)(v36 - 14) = xmmword_2140992B0;
          *(void *)(v36 - 6) = 0xFFFFFFFFLL;
          *((_DWORD *)v36 - 1) = 0;
          *int v36 = 0;
          v36 += 16;
          --v35;
        }
        while (v35);
      }
    }
    else
    {
      unsigned int v20 = 0;
    }
  }
  else
  {
    unsigned int v20 = 0;
    uint64_t v49 = 0;
    uint64_t v50 = 0;
  }
  *((_DWORD *)this + 42) = v20;
  unint64_t v37 = *((unsigned int *)this + 62);
  if (v37)
  {
    unint64_t v38 = 0;
    uint64_t v39 = v50;
    uint64_t v40 = *((void *)this + 30);
    do
    {
      if (*(_WORD *)(v40 + 28 * v38 + 24))
      {
        unsigned int v41 = 0;
        LODWORD(v42) = v39;
        do
        {
          __int16 v43 = *(_WORD *)(*((void *)this + 24) + 2 * (v41 + *(_DWORD *)(v40 + 28 * v38 + 20)));
          if (v42 == HIDWORD(v50))
          {
            DgnPrimArray<short>::reallocElts((uint64_t)&v49, 1, 1);
            LODWORD(v42) = v50;
            uint64_t v40 = *((void *)this + 30);
          }
          *(_WORD *)(v49 + 2 * v42) = v43;
          uint64_t v42 = (v42 + 1);
          LODWORD(v50) = v42;
          ++v41;
        }
        while (v41 < *(unsigned __int16 *)(v40 + 28 * v38 + 24));
        unint64_t v37 = *((unsigned int *)this + 62);
      }
      else
      {
        uint64_t v42 = v39;
      }
      *(_DWORD *)(v40 + 28 * v38++ + 20) = v39;
      uint64_t v39 = v42;
    }
    while (v38 < v37);
  }
  else
  {
    LODWORD(v42) = v50;
  }
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 192, &v49, 0, v42);
  uint64_t v44 = *((unsigned int *)this + 62);
  if (v44)
  {
    unsigned int v45 = v51;
    unint64_t v46 = (_DWORD *)(*((void *)this + 30) + 8);
    do
    {
      uint64_t v47 = *v46;
      if (v47 != -1) {
        *unint64_t v46 = *((_DWORD *)v45 + v47);
      }
      v46 += 7;
      --v44;
    }
    while (v44);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v49);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v51);
}

void sub_213E6EC00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

int64x2_t FstSearchLeafBackoff::vite(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  FstSearchLeafBackoff::advanceDeltas((FstSearchLeafBackoff *)this, a2, a3, a4, a5);
  int64x2_t v13 = 0u;
  int64x2_t v14 = 0u;
  SnapTime::recordTime((SnapTime *)&v13, 1, 0, 0, 0);
  if (a2 >= 1)
  {
    unsigned int v7 = *((_DWORD *)this + 18);
    if (v7)
    {
      if (!(a2 % v7)) {
        FstSearchLeafBackoff::collectTraces((FstSearchLeafBackoff *)this);
      }
    }
  }
  int64x2_t v11 = 0u;
  int64x2_t v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  unint64_t v8 = this[13];
  int64x2_t result = vaddq_s64(v8[14], vsubq_s64(v11, v13));
  int64x2_t v10 = vaddq_s64(v8[15], vsubq_s64(v12, v14));
  v8[14] = result;
  v8[15] = v10;
  return result;
}

_DWORD *FstSearchLeafBackoff::reset(_DWORD *this)
{
  this[42] = 0;
  this[46] = 0;
  this[50] = 0;
  this[62] = 0;
  return this;
}

double FstSearchLeafBackoff::doFrame(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  if (a3 >= 20000) {
    a3 = 20000;
  }
  *(void *)&double result = FstSearchLeafBackoff::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearchLeafBackoff::beginTopRecPassSyncRecog(FstSearchLeafBackoff *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 288, a3, *((PelScoreCache **)this + 4));
    uint64_t result = ArcGraph::findBackoffState(*((void *)this + 5));
    *((_DWORD *)this + 100) = result;
    *((unsigned char *)this + 404) = 1;
  }
  return result;
}

uint64_t FstSearchLeafBackoff::endTopRecPassSyncRecog(FstSearchLeafBackoff *this)
{
  int64x2_t v10 = 0u;
  int64x2_t v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  FstSearchLeafBackoff::generateTraceTokensFromTraces((unint64_t)this);
  int64x2_t v8 = 0u;
  int64x2_t v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  int64x2_t v2 = vsubq_s64(v8, v10);
  unsigned int v3 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v4 = v3[13];
  int64x2_t v5 = vaddq_s64(v3[12], v2);
  int64x2_t v8 = v2;
  int64x2_t v9 = vsubq_s64(v9, v11);
  int64x2_t v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + 70) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

unint64_t FstSearchLeafBackoff::generateTraceTokensFromTraces(unint64_t this)
{
  uint64_t v1 = this;
  int64x2_t v2 = (void *)(this + 176);
  uint64_t v3 = *(unsigned int *)(this + 168);
  unsigned int v4 = *(_DWORD *)(this + 188);
  if (v3 > v4) {
    this = DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts(this + 176, v3 - v4, 0);
  }
  uint64_t v5 = *(unsigned int *)(v1 + 184);
  if (v5 < v3)
  {
    uint64_t v6 = v3 - v5;
    unsigned int v7 = (_WORD *)(*v2 + 20 * v5 + 16);
    do
    {
      *((_OWORD *)v7 - 1) = xmmword_2140992E0;
      *unsigned int v7 = 0;
      v7 += 10;
      --v6;
    }
    while (v6);
  }
  *(_DWORD *)(v1 + 184) = v3;
  uint64_t v8 = *(unsigned int *)(v1 + 168);
  if (v8)
  {
    uint64_t v9 = 0;
    int64x2_t v10 = (_WORD *)(*(void *)(v1 + 176) + 16);
    int64x2_t v11 = (_WORD *)(*(void *)(v1 + 160) + 28);
    do
    {
      *((_DWORD *)v11 - 5) = v9;
      int64x2_t v12 = (float *)(v10 - 8);
      float32x2x2_t v13 = (float32x2x2_t)*((_OWORD *)v11 - 1);
      unint64_t v14 = vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u64[0];
      vst2_f32(v12, v13);
      __int16 v15 = *v11;
      v11 += 16;
      *int64x2_t v10 = v15;
      v10 += 10;
      ++v9;
    }
    while (v8 != v9);
  }
  return this;
}

void FstSearchLeafBackoff::printSize(FstSearchLeafBackoff *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v125);
  if (v126) {
    __int16 v15 = v125;
  }
  else {
    __int16 v15 = &unk_214099300;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v11, v12, v13, v14, a3, &unk_214099300, a3, &unk_214099300, v15);
  DgnString::~DgnString((DgnString *)&v125);
  if (a2 != -1) {
    xlprintf("%d ", v16, v17, v18, v19, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v16, v17, v18, v19, a3, &unk_214099300);
  uint64_t v20 = (a3 + 1);
  uint64_t v21 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v125);
  if (v126) {
    uint64_t v26 = v125;
  }
  else {
    uint64_t v26 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v22, v23, v24, v25, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v26, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v125);
  if (v126) {
    unsigned int v31 = v125;
  }
  else {
    unsigned int v31 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v27, v28, v29, v30, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v31, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v125);
  if (v126) {
    int v36 = v125;
  }
  else {
    int v36 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v32, v33, v34, v35, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v36, 4, 4, 0);
  uint64_t v121 = a2;
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v125);
  if (v126) {
    unsigned int v41 = v125;
  }
  else {
    unsigned int v41 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v37, v38, v39, v40, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v41, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  uint64_t v42 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v42 = 16;
  }
  uint64_t v43 = *((unsigned int *)this + 42);
  uint64_t v44 = 30 * v43;
  if ((int)v43 <= 0) {
    uint64_t v44 = 0;
  }
  uint64_t v45 = v44 + v42;
  uint64_t v46 = v44 + v42 + 30 * (*((_DWORD *)this + 43) - v43);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v125);
  if (v126) {
    int v51 = v125;
  }
  else {
    int v51 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v47, v48, v49, v50, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v51, v46, v45, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v46;
  *a5 += v45;
  uint64_t v52 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v52 = 16;
  }
  uint64_t v53 = *((unsigned int *)this + 46);
  uint64_t v54 = 18 * v53;
  if ((int)v53 <= 0) {
    uint64_t v54 = 0;
  }
  uint64_t v55 = v54 + v52;
  uint64_t v56 = v54 + v52 + 18 * (*((_DWORD *)this + 47) - v53);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v125);
  if (v126) {
    int v61 = v125;
  }
  else {
    int v61 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v57, v58, v59, v60, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v61, v56, v55, 0);
  uint64_t v120 = a3;
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v56;
  *a5 += v55;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v62 = 12;
  }
  else {
    uint64_t v62 = 16;
  }
  uint64_t v63 = *((unsigned int *)this + 50);
  unsigned int v64 = *((_DWORD *)this + 51);
  if (v64 >= v63)
  {
    uint64_t v65 = 0;
    if ((int)v63 > 0) {
      uint64_t v62 = (v62 | 2) + 2 * (v63 - 1);
    }
    uint64_t v66 = v62 + 2 * (v64 - v63);
  }
  else
  {
    uint64_t v65 = 2 * v63;
    uint64_t v66 = v62;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2961, (DgnString *)&v125);
  if (v126) {
    int64x2_t v71 = v125;
  }
  else {
    int64x2_t v71 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v67, v68, v69, v70, v20, &unk_214099300, v21, v21, v71, v66, v62, v65);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v66;
  *a5 += v62;
  *a6 += v65;
  uint64_t v72 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v72 = 16;
  }
  uint64_t v73 = *((unsigned int *)this + 62);
  uint64_t v74 = 24 * v73;
  if ((int)v73 <= 0) {
    uint64_t v74 = 0;
  }
  uint64_t v75 = v74 + v72;
  uint64_t v76 = v74 + v72 + 24 * (*((_DWORD *)this + 63) - v73);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v125);
  if (v126) {
    uint64_t v81 = v125;
  }
  else {
    uint64_t v81 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v77, v78, v79, v80, v20, &unk_214099300, v21, v21, v81, v76, v75, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v76;
  *a5 += v75;
  uint64_t v82 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v82 = 16;
  }
  uint64_t v83 = *((unsigned int *)this + 66);
  uint64_t v84 = 24 * v83;
  if ((int)v83 <= 0) {
    uint64_t v84 = 0;
  }
  uint64_t v85 = v84 + v82;
  uint64_t v86 = v84 + v82 + 24 * (*((_DWORD *)this + 67) - v83);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v125);
  if (v126) {
    int v91 = v125;
  }
  else {
    int v91 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v87, v88, v89, v90, v20, &unk_214099300, v21, v21, v91, v86, v85, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v86;
  *a5 += v85;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v125);
  if (v126) {
    unsigned int v96 = v125;
  }
  else {
    unsigned int v96 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v92, v93, v94, v95, v20, &unk_214099300, v21, v21, v96, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v125);
  if (v126) {
    uint64_t v101 = v125;
  }
  else {
    uint64_t v101 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v97, v98, v99, v100, v20, &unk_214099300, v21, v21, v101, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v125);
  if (v126) {
    int64x2_t v106 = v125;
  }
  else {
    int64x2_t v106 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v102, v103, v104, v105, v20, &unk_214099300, v21, v21, v106, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  uint64_t v107 = sizeObject((uint64_t)this + 288, 0);
  uint64_t v108 = sizeObject((uint64_t)this + 288, 1);
  uint64_t v109 = sizeObject((uint64_t)this + 288, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v125);
  if (v126) {
    int64x2_t v114 = v125;
  }
  else {
    int64x2_t v114 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v110, v111, v112, v113, v20, &unk_214099300, v21, v21, v114, v107, v108, v109);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v107;
  *a5 += v108;
  *a6 += v109;
  unint64_t v123 = 0;
  unint64_t v124 = 0;
  SearchItf::printSize(this, v121, v20, &v124, &v123, &v123);
  *a4 += v124;
  *a5 += v123;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v125);
  if (v126) {
    int64x2_t v119 = v125;
  }
  else {
    int64x2_t v119 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v115, v116, v117, v118, v120, &unk_214099300, (35 - v120), (35 - v120), v119, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v125);
}

void sub_213E6F6D8(_Unwind_Exception *a1)
{
  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t FstSearchLeafBackoff::getBestTrace(uint64_t a1, void *a2, void *a3, int a4)
{
  if (a4) {
    unint64_t v4 = 0;
  }
  else {
    unint64_t v4 = *(unsigned int *)(a1 + 152);
  }
  unint64_t v5 = *(unsigned int *)(a1 + 248);
  if (v4 >= v5) {
    goto LABEL_21;
  }
  uint64_t v6 = 28 * v4;
  int v7 = 1879048192;
  uint64_t v8 = 0xFFFFFFFFLL;
  do
  {
    uint64_t v9 = *(void *)(a1 + 240);
    if (!a4 || (uint64_t v10 = *(unsigned int *)(v9 + v6 + 8), v10 == -1))
    {
      if (*(_DWORD *)(*(void *)(a1 + 40) + 160) != *(_DWORD *)(v9 + v6 + 4)) {
        goto LABEL_19;
      }
      uint64_t v10 = *(unsigned int *)(v9 + v6 + 8);
    }
    if (a2) {
      *(unsigned char *)(*a2 + v10) = 1;
    }
    if (a3) {
      *(unsigned char *)(*a3 + v10) = 1;
    }
    int v11 = *(_DWORD *)(*(void *)(a1 + 160) + 32 * v10 + 12)
        + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(*(void *)(a1 + 160) + 32 * v10 + 4));
    if (v7 > v11) {
      uint64_t v8 = v10;
    }
    if (v7 >= v11) {
      int v7 = *(_DWORD *)(*(void *)(a1 + 160) + 32 * v10 + 12)
    }
         + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(*(void *)(a1 + 160) + 32 * v10 + 4));
    unint64_t v5 = *(unsigned int *)(a1 + 248);
LABEL_19:
    ++v4;
    v6 += 28;
  }
  while (v4 < v5);
  if (v8 == 0xFFFFFFFFLL)
  {
LABEL_21:
    uint64_t v12 = *(unsigned int *)(a1 + 168);
    uint64_t v8 = 0xFFFFFFFFLL;
    while (v12)
    {
      --v12;
      if ((a4 & 1) != 0 || *(_DWORD *)(*(void *)(a1 + 160) + 32 * v12) == 16777213)
      {
        if (a2) {
          *(unsigned char *)(*a2 + v12) = 1;
        }
        uint64_t v8 = v12;
        if (a3) {
          *(unsigned char *)(*a3 + v12) = 1;
        }
        return v8;
      }
    }
  }
  return v8;
}

BOOL FstSearchLeafBackoff::findBestPath(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8 = *(unsigned int *)(a1 + 168);
  if (v8) {
    BOOL v9 = *(_DWORD *)(a3 + 8) == 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    *(void *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v8;
  }
  if (v8) {
    BOOL v10 = *(_DWORD *)(a2 + 8) == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    *(void *)a2 = MemChunkAlloc(v8, 0);
    *(_DWORD *)(a2 + 8) = v8;
LABEL_14:
    uint64_t v11 = 0;
    do
    {
      *(unsigned char *)(*(void *)a2 + v11) = 0;
      *(unsigned char *)(*(void *)a3 + v11++) = 0;
    }
    while (v8 != v11);
    goto LABEL_16;
  }
  if (v8) {
    goto LABEL_14;
  }
LABEL_16:
  unsigned int BestTrace = FstSearchLeafBackoff::getBestTrace(a1, (void *)a2, (void *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1) {
    return 0;
  }
  uint64_t v13 = *(void *)(a1 + 160) + 32 * BestTrace;
  LODWORD(v13) = *(_DWORD *)(v13 + 12) + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v13 + 4));
  *a4 = v13;
  return v13 != 1879048192;
}

uint64_t FstSearchLeafBackoff::createLatticeNodes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t *a6, void *a7)
{
  uint64_t v9 = *(unsigned int *)(a1 + 168);
  if (v9) {
    BOOL v10 = *(_DWORD *)(a2 + 8) == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    *(void *)a2 = MemChunkAlloc(4 * v9, 0);
    *(_DWORD *)(a2 + 8) = v9;
  }
  int Node = Lattice<WordLatticeLC>::createNode(a4);
  uint64_t result = a3;
  unsigned int v13 = *(_DWORD *)(a3 + 8);
  if (v13 == *(_DWORD *)(a3 + 12))
  {
    DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
    uint64_t result = a3;
    unsigned int v13 = *(_DWORD *)(a3 + 8);
  }
  *(_DWORD *)(*(void *)result + 4 * v13) = Node;
  ++*(_DWORD *)(result + 8);
  int v14 = *(_DWORD *)(a1 + 168);
  __int16 v15 = a6;
  uint64_t v16 = (uint64_t *)a2;
  if (v14)
  {
    uint64_t v17 = (v14 - 1);
    uint64_t v18 = 32 * v17;
    uint64_t result = 0xFFFFFFFFLL;
    uint64_t v46 = a7;
    do
    {
      uint64_t v19 = *v16;
      *(_DWORD *)(*v16 + 4 * v17) = -1;
      uint64_t v20 = *v15;
      if (*(unsigned char *)(*v15 + v17))
      {
        uint64_t v21 = *(void *)(a1 + 160);
        uint64_t v22 = *(void *)(a1 + 88);
        int v23 = *(_DWORD *)(v22 + 4 * *(unsigned int *)(v21 + v18 + 4));
        if (*(unsigned char *)(*a7 + v17))
        {
          if (*(unsigned char *)(*v15 + v17) != 1 || result == -1)
          {
            int v25 = *(_DWORD *)(v22 + 4 * *(unsigned int *)(v21 + v18 + 4));
            unsigned int v26 = result;
            int v27 = Lattice<WordLatticeLC>::createNode(a4);
            uint64_t v28 = a3;
            uint64_t v16 = (uint64_t *)a2;
            *(_DWORD *)(*(void *)a2 + 4 * v17) = *(_DWORD *)(a3 + 8);
            uint64_t v29 = *(unsigned int *)(a3 + 8);
            if (v29 == *(_DWORD *)(a3 + 12))
            {
              DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
              uint64_t v28 = a3;
              uint64_t v16 = (uint64_t *)a2;
              uint64_t v29 = *(unsigned int *)(a3 + 8);
            }
            *(_DWORD *)(*(void *)v28 + 4 * v29) = v27;
            unsigned int v30 = *(_DWORD *)(v28 + 8);
            *(_DWORD *)(v28 + 8) = v30 + 1;
            __int16 v15 = a6;
            uint64_t v20 = *a6;
            if (*(unsigned char *)(*a6 + v17) == 1) {
              uint64_t result = v30;
            }
            else {
              uint64_t result = v26;
            }
            uint64_t v21 = *(void *)(a1 + 160);
            int v23 = v25;
          }
          else
          {
            *(_DWORD *)(v19 + 4 * v17) = result;
          }
        }
        unsigned int v31 = *(_DWORD *)(v21 + v18 + 8);
        uint64_t v32 = *(void *)(a1 + 176);
        uint64_t v33 = (_DWORD *)(v32 + 20 * v31);
        uint64_t v34 = v33[2];
        if ((v33[2] & 0x80000000) != 0)
        {
          *v33 += v23;
        }
        else
        {
          if (*(_DWORD *)(v21 + v18) == 16777209)
          {
            uint64_t v35 = *a5 + 16 * v34;
            uint64_t v37 = (_DWORD *)(v35 + 8);
            uint64_t v36 = *(unsigned int *)(v35 + 8);
            uint64_t v38 = *(void *)(a1 + 176);
            if (v36 == *(_DWORD *)(v35 + 12))
            {
              int v44 = v23;
              unsigned int v45 = result;
              DgnPrimArray<unsigned int>::reallocElts(v35, 1, 1);
              int v23 = v44;
              uint64_t result = v45;
              uint64_t v16 = (uint64_t *)a2;
              __int16 v15 = a6;
              uint64_t v36 = *v37;
              uint64_t v21 = *(void *)(a1 + 160);
              uint64_t v38 = *(void *)(a1 + 176);
              uint64_t v20 = *a6;
            }
            *(_DWORD *)(*(void *)v35 + 4 * v36) = v17;
            ++*v37;
            uint64_t v34 = v33[2];
            a7 = v46;
          }
          else
          {
            *(unsigned char *)(*a7 + v34) = 1;
            uint64_t v38 = v32;
          }
          uint64_t v39 = v21 + 32 * v34;
          int v40 = *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v39 + 4));
          unsigned int v41 = (int *)(v38 + 20 * *(unsigned int *)(v39 + 8));
          int v42 = v23 + *v33 - v40;
          int v43 = *v41;
          LODWORD(v41) = v41[1];
          *uint64_t v33 = v42 - v43;
          *(_DWORD *)(v32 + 20 * v31 + 4) -= v41;
          *(unsigned char *)(v20 + v34) = 2;
        }
      }
      --v17;
      v18 -= 32;
      --v14;
    }
    while (v14);
  }
  return result;
}

uint64_t FstSearchLeafBackoff::buildWordLattice(unint64_t a1, uint64_t *a2, uint64_t *a3, void *a4, unsigned __int8 a5)
{
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  int v27 = 0;
  uint64_t v24 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v23, *(unsigned int *)(a1 + 168));
  unint64_t v8 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v8, 0, 128);
  v8[4] = (uint64_t)a2;
  FstSearchLeafBackoff::createLatticeNodes(a1, (uint64_t)&v26, (uint64_t)&v24, (uint64_t)a2, v23, a3, a4);
  uint64_t v9 = *(unsigned int *)(a1 + 168);
  if (v9)
  {
    uint64_t v10 = 0;
    int v11 = v25;
    do
    {
      if (*(unsigned char *)(*a3 + v10))
      {
        uint64_t v12 = *(void *)(a1 + 160);
        if (*(_DWORD *)(v12 + 32 * v10) != 16777209)
        {
          uint64_t v13 = *(void *)(a1 + 176) + 20 * *(unsigned int *)(v12 + 32 * v10 + 8);
          uint64_t v14 = *(unsigned int *)(v13 + 8);
          if (v14 == -1) {
            unsigned int v15 = 0;
          }
          else {
            unsigned int v15 = v11 - *(_DWORD *)(v26 + 4 * v14);
          }
          uint64_t v16 = *(unsigned int *)(v24 + 4 * v15);
          if (*(unsigned char *)(*a4 + v10)) {
            FstSearchLeafBackoff::createLatticeLink(a1, v10, (int *)v13, 0xFFFFFFFFLL, v16, *(unsigned int *)(v24 + 4 * (v11 - *(_DWORD *)(v26 + 4 * v10))), a2, (uint64_t)v8, a5);
          }
          uint64_t v17 = v23[0];
          if (*(_DWORD *)(v23[0] + 16 * v10 + 8))
          {
            unint64_t v18 = 0;
            do
            {
              uint64_t v19 = *(unsigned int *)(*(void *)(v17 + 16 * v10) + 4 * v18);
              FstSearchLeafBackoff::createLatticeLink(a1, v10, (int *)v13, v19, v16, *(unsigned int *)(v24 + 4 * (v11 - *(_DWORD *)(v26 + 4 * v19))), a2, (uint64_t)v8, a5);
              ++v18;
              uint64_t v17 = v23[0];
            }
            while (v18 < *(unsigned int *)(v23[0] + 16 * v10 + 8));
          }
        }
      }
      ++v10;
    }
    while (v10 != v9);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>((uint64_t)v8);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v23);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v24);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v26);
}

void sub_213E6FE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearchLeafBackoff::createLatticeLink(unint64_t a1, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, unsigned __int8 a9)
{
  unsigned int v34 = a6;
  unsigned int v11 = a5;
  unsigned int v12 = a4;
  uint64_t v16 = *(void *)(a1 + 160);
  if ((a4 & 0x80000000) != 0)
  {
    uint64_t v17 = 0;
  }
  else if (*(_DWORD *)(*(void *)(a1 + 176) + 20 * *(unsigned int *)(v16 + 32 * a4 + 8) + 8) == a2)
  {
    uint64_t v17 = (_DWORD *)(*(void *)(a1 + 176) + 20 * *(unsigned int *)(v16 + 32 * a4 + 8));
  }
  else
  {
    uint64_t v17 = 0;
  }
  ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *(_DWORD *)(v16 + 32 * a2), (uint64_t)a3, a4, a5, a6, (uint64_t)a7, a8, (uint64_t)v44);
  int v18 = a3[1];
  if (v17)
  {
    v18 += v17[1];
    int v19 = *v17 + *a3;
  }
  else
  {
    int v19 = *a3;
  }
  if (v44[0] >> 25 == 126)
  {
    int v20 = 0;
    int v21 = v18;
  }
  else
  {
    int v20 = *(_DWORD *)(a1 + 136);
    int v21 = v18 - v20;
  }
  int v22 = v19 - v18;
  if ((v12 & 0x80000000) != 0)
  {
    int v23 = 0;
  }
  else
  {
    int v23 = *(_DWORD *)(a1 + 140);
    v21 -= v23;
  }
  int v38 = v21;
  uint64_t v39 = 0;
  int v40 = v20;
  int v41 = v22;
  int v42 = 0;
  int v43 = v23;
  uint64_t v24 = a3[2];
  uint64_t v25 = *(void *)(a1 + 160);
  if (v24 == -1)
  {
    int v27 = 0;
    if (a9) {
      goto LABEL_21;
    }
  }
  else
  {
    int v26 = *(_DWORD *)(v25 + 32 * v24 + 4);
    if (a9)
    {
      if (v26 >= 1) {
        --v26;
      }
      int v27 = (v26 >> 1) + 1;
LABEL_21:
      int v28 = *(_DWORD *)(v25 + 32 * a2 + 4);
      if (v28 >= 1) {
        --v28;
      }
      int v29 = (v28 >> 1) + 1;
      int v30 = v29 - v27;
      if ((v12 & 0x80000000) == 0)
      {
        int v31 = *(_DWORD *)(v25 + 32 * v12 + 4);
        if (v31 >= 1) {
          --v31;
        }
        int v32 = v31 >> 1;
        goto LABEL_30;
      }
      goto LABEL_31;
    }
    int v27 = v26 + 1;
  }
  int v29 = *(_DWORD *)(v25 + 32 * a2 + 4) + 1;
  int v30 = v29 - v27;
  if ((v12 & 0x80000000) == 0)
  {
    int v32 = *(_DWORD *)(v25 + 32 * v12 + 4);
LABEL_30:
    int v33 = v32 - v29 + 1;
    goto LABEL_32;
  }
LABEL_31:
  int v33 = 0;
LABEL_32:
  WordLatticeLC::WordLatticeLC((uint64_t)v36, (uint64_t)v44, v27, v30, v33, (uint64_t)&v38);
  v35[0] = 0;
  v35[1] = 0;
  FstSearchLeafBackoff::buildLinkSegmentation(a1, (uint64_t)v35, (uint64_t)a3, v27, a9);
  if (v17) {
    FstSearchLeafBackoff::buildLinkSegmentation(a1, (uint64_t)v35, (uint64_t)v17, v29, a9);
  }
  unint64_t v37 = WordLattice::findOrAddLinkSegSeqId((uint64_t)a7, (uint64_t)v35, a8);
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v11, (const WordLatticeLC *)v34, (WordLatticeLC *)v36);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v35);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v36);
}

void sub_213E700B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va1);
  _Unwind_Resume(a1);
}

unint64_t FstSearchLeafBackoff::buildLinkSegmentation(unint64_t result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  if (a5) {
    int v5 = 2;
  }
  else {
    int v5 = 1;
  }
  unsigned int v6 = *(unsigned __int16 *)(a3 + 16);
  if (*(_WORD *)(a3 + 16))
  {
    unint64_t v10 = result;
    unsigned int v11 = 0;
    int v12 = 0;
    __int16 v13 = *(_WORD *)(*(void *)(result + 56) + 136);
    unsigned __int16 v14 = -1;
    do
    {
      int v15 = *(unsigned __int16 *)(*(void *)(v10 + 192) + 2 * (v11 + *(_DWORD *)(a3 + 12)));
      if (v15 != v14)
      {
        if (v12)
        {
          uint64_t result = FstSearchLeafLatticeBackoff::addLinkSegment(v10, a2, v14, a4, v12, v13);
          a4 += v12;
          unsigned int v6 = *(unsigned __int16 *)(a3 + 16);
          unsigned __int16 v14 = v15;
          int v12 = 0;
        }
        else
        {
          unsigned __int16 v14 = *(_WORD *)(*(void *)(v10 + 192) + 2 * (v11 + *(_DWORD *)(a3 + 12)));
        }
      }
      ++v12;
      v11 += v5;
    }
    while (v11 < v6);
    if (v12)
    {
      return FstSearchLeafLatticeBackoff::addLinkSegment(v10, a2, v14, a4, v12, v13);
    }
  }
  return result;
}

uint64_t FstSearchLeafBackoff::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(void *)(this + 112) = a2;
  if (*(unsigned char *)(this + 404)) {
    return MiniFst::beginTopFstSyncRecog(this + 288);
  }
  return this;
}

uint64_t FstSearchLeafBackoff::endTopRecSyncRecog(FstSearchLeafBackoff *this)
{
  uint64_t v1 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  return v1;
}

uint64_t FstSearchLeafBackoff::getBestExitScore(FstSearchLeafBackoff *this)
{
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  *((_DWORD *)this + 69) = -1;
  unint64_t v1 = *((unsigned int *)this + 38);
  unint64_t v2 = *((unsigned int *)this + 62);
  if (v1 >= v2) {
    goto LABEL_16;
  }
  uint64_t v4 = 0;
  unsigned int v5 = 0;
  uint64_t v6 = 28 * v1;
  do
  {
    uint64_t v7 = *((void *)this + 30) + v6;
    if (*(_DWORD *)(*((void *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      uint64_t v8 = *(unsigned int *)(v7 + 8);
      if (v8 != -1 && *(_DWORD *)(*((void *)this + 20) + 32 * v8 + 4) == *((_DWORD *)this + 68))
      {
        if (v5 == HIDWORD(v18))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v17, 1, 1);
          unsigned int v5 = v18;
          uint64_t v4 = v17;
        }
        v4[v5] = v8;
        unsigned int v5 = v18 + 1;
        LODWORD(v18) = v18 + 1;
        unint64_t v2 = *((unsigned int *)this + 62);
      }
    }
    ++v1;
    v6 += 28;
  }
  while (v1 < v2);
  if (v5)
  {
    uint64_t v9 = *((void *)this + 20);
    uint64_t v10 = v5;
    int v11 = 1879048192;
    do
    {
      unsigned int v12 = *v4++;
      uint64_t v13 = v9 + 32 * v12;
      int v14 = *(_DWORD *)(v13 + 12);
      if (v11 > v14)
      {
        *((_DWORD *)this + 69) = *(_DWORD *)(v13 + 16);
        int v11 = v14;
      }
      --v10;
    }
    while (v10);
  }
  else
  {
LABEL_16:
    int v11 = 1879048192;
  }
  if (v11 >= 20000) {
    uint64_t v15 = 20000;
  }
  else {
    uint64_t v15 = v11;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v17);
  return v15;
}

void sub_213E70358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t FstSearchLeafBackoff::getBestScoreMaybeUpdateFstNode(FstSearchLeafBackoff *this, Node *a2)
{
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v2 = *((unsigned int *)this + 62);
  if (v2)
  {
    uint64_t v3 = (int *)*((void *)this + 30);
    __int16 v4 = -1;
    int v5 = 1879048192;
    uint64_t v6 = v3;
    do
    {
      int v8 = *v6;
      v6 += 7;
      int v7 = v8;
      if (v5 > v8)
      {
        __int16 v4 = *((_WORD *)v3 + 6);
        int v5 = v7;
      }
      uint64_t v3 = v6;
      --v2;
    }
    while (v2);
    uint64_t v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000) {
        uint64_t v9 = 20000;
      }
      else {
        uint64_t v9 = v5;
      }
    }
  }
  else
  {
    uint64_t v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

void *FstSearchLeafBackoff::seedTheory(FstSearchLeafBackoff *this, int a2, int a3, int a4, SearchStats *a5)
{
  if (a4 == -2)
  {
    int v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    unsigned int v11 = *((_DWORD *)this + 42);
    if (v11 == *((_DWORD *)this + 43))
    {
      DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)this + 160, 1, 1);
      unsigned int v11 = *((_DWORD *)this + 42);
    }
    uint64_t v12 = *((void *)this + 20) + 32 * v11;
    *(_DWORD *)uint64_t v12 = a4;
    *(_DWORD *)(v12 + 4) = a3;
    *(_DWORD *)(v12 + 8) = -1;
    *(_DWORD *)(v12 + 12) = a2;
    *(void *)(v12 + 16) = 0xFFFFFFFFLL;
    *(_DWORD *)(v12 + 24) = 0;
    *(_WORD *)(v12 + 28) = 0;
    int v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  int v13 = *(_DWORD *)(*((void *)this + 5) + 144);
  unsigned int v14 = *((_DWORD *)this + 62);
  if (v14 == *((_DWORD *)this + 63))
  {
    DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)this + 240, 1, 1);
    unsigned int v14 = *((_DWORD *)this + 62);
  }
  uint64_t v15 = *((void *)this + 30) + 28 * v14;
  *(_DWORD *)uint64_t v15 = a2;
  *(_DWORD *)(v15 + 4) = v13;
  *(_DWORD *)(v15 + 8) = v9;
  *(_WORD *)(v15 + 12) = -2;
  *(void *)(v15 + 16) = 0;
  *(_WORD *)(v15 + 24) = 0;
  LODWORD(v15) = *((_DWORD *)this + 62) + 1;
  *((_DWORD *)this + 62) = v15;
  *((_DWORD *)this + 38) = v15;

  return FstSearchLeafBackoff::propagateNulls(this, 20000, a3, a5);
}

uint64_t FstSearchLeafBackoff::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(unsigned int *)(result + 276);
  if (v8 != -1)
  {
    uint64_t v10 = result;
    unsigned int v11 = (unsigned int *)(*(void *)(result + 160) + 32 * v8);
    for (i = v11[4]; i != -1; uint64_t v8 = v17)
    {
      uint64_t v17 = i;
      uint64_t result = *(void *)(v10 + 40);
      if (*v11 == 16777209)
      {
        int v18 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        uint64_t result = ArcGraph::lexToCWID((ArcGraph *)result, *v11, a3, (uint64_t)a4, a5, a6, a7, a8);
        int v18 = result;
      }
      uint64_t v19 = *(unsigned int *)(a2 + 8);
      if (v19 == *(_DWORD *)(a2 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        uint64_t v19 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(void *)a2 + 4 * v19) = v18;
      ++*(_DWORD *)(a2 + 8);
      uint64_t v20 = *(unsigned int *)(a6 + 8);
      if (v20 == *(_DWORD *)(a6 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        uint64_t v20 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(void *)a6 + 4 * v20) = v8;
      ++*(_DWORD *)(a6 + 8);
      uint64_t v21 = *(void *)(v10 + 160);
      int v22 = *(_DWORD *)(v21 + 32 * v8 + 4);
      uint64_t v23 = *(unsigned int *)(a3 + 8);
      if (v23 == *(_DWORD *)(a3 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        uint64_t v23 = *(unsigned int *)(a3 + 8);
        uint64_t v21 = *(void *)(v10 + 160);
      }
      *(_DWORD *)(*(void *)a3 + 4 * v23) = v22;
      ++*(_DWORD *)(a3 + 8);
      int v24 = *(_DWORD *)(v21 + 32 * v8 + 12);
      uint64_t v25 = *(unsigned int *)(a5 + 8);
      if (v25 == *(_DWORD *)(a5 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        uint64_t v25 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(void *)a5 + 4 * v25) = v24;
      ++*(_DWORD *)(a5 + 8);
      unsigned int v11 = (unsigned int *)(*(void *)(v10 + 160) + 32 * v17);
      uint64_t i = v11[4];
    }
    *a4 = *v11;
  }
  return result;
}

void FstSearchLeafBackoff::checkSearchParametersValidityForArcGraph(FstSearchLeafBackoff *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *((void *)this + 5);
  if (*(unsigned char *)(v8 + 178))
  {
    int v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(unsigned char *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    }
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    }
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(void *)(**(void **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((void *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if (a2)
      {
        if (!*(unsigned char *)(v8 + 203)) {
          return;
        }
      }
      else if (*(unsigned char *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(unsigned char *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

void FstSearchLeafBackoff::getHistory(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 == -1)
  {
    *(_DWORD *)(a3 + 8) = 0;
  }
  else
  {
    int v9 = a4;
    LODWORD(v11) = 0;
    uint64_t v12 = a2;
    uint64_t v13 = a2;
    do
    {
      unsigned int v14 = (_DWORD *)(*(void *)(a1 + 160) + 32 * v13);
      if (*v14 == 16777209) {
        uint64_t v11 = v11;
      }
      else {
        uint64_t v11 = (v11 + 1);
      }
      uint64_t v13 = v14[4];
    }
    while (v13 != -1);
    unsigned int v15 = *(_DWORD *)(a3 + 12);
    if (v11 > v15) {
      DgnArray<PrefilterResultFrame>::reallocElts(a3, v11 - v15, 0);
    }
    uint64_t v16 = *(unsigned int *)(a3 + 8);
    if (v16 < v11)
    {
      uint64_t v17 = v11 - v16;
      uint64_t v18 = *(void *)a3 + 32 * v16;
      do
      {
        *(void *)uint64_t v18 = 0x3FFFFAFFFFFFLL;
        *(_OWORD *)(v18 + 8) = xmmword_2140866D0;
        *(void *)(v18 + 24) = 0x1F0000001FLL;
        v18 += 32;
        --v17;
      }
      while (v17);
    }
    *(_DWORD *)(a3 + 8) = v11;
    if (v11)
    {
      uint64_t v19 = *(void *)(a1 + 160);
      int v20 = -16;
      do
      {
        uint64_t v21 = (unsigned int *)(v19 + 32 * v12);
        int v22 = v21[1];
        if (*v21 == 16777209)
        {
          if (v9)
          {
            int v23 = v22 - 1;
            if (v22 < 1) {
              int v23 = v22;
            }
            int v20 = (v23 >> 1) + 1;
          }
          else
          {
            int v20 = v22 + 1;
          }
        }
        else
        {
          if (v9)
          {
            int v24 = v22 - 1;
            if (v22 < 1) {
              int v24 = v21[1];
            }
            int v22 = v24 >> 1;
          }
          ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *v21, a3, a4, a5, a6, a7, a8, (uint64_t)v28);
          if (v20 == -16) {
            int v25 = v22 + 1;
          }
          else {
            int v25 = v20;
          }
          int v26 = v28[1];
          uint64_t v11 = (v11 - 1);
          uint64_t v27 = *(void *)a3 + 32 * v11;
          *(_DWORD *)uint64_t v27 = v28[0];
          *(_DWORD *)(v27 + 4) = v26;
          *(_OWORD *)(v27 + 8) = v29;
          *(_DWORD *)(v27 + 24) = v22 + 1;
          *(_DWORD *)(v27 + 28) = v25;
          uint64_t v19 = *(void *)(a1 + 160);
          int v20 = -16;
        }
        uint64_t v12 = *(unsigned int *)(v19 + 32 * v12 + 16);
      }
      while (v12 != -1);
    }
  }
}

uint64_t FstSearchLeafBackoff::makePartialResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    uint64_t v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(void *)a2 + v9))(*(void *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  unsigned int BestTrace = FstSearchLeafBackoff::getBestTrace(a1, 0, 0, 1);
  if (BestTrace == -1) {
    return 1879048192;
  }
  unsigned int v15 = BestTrace;
  FstSearchLeafBackoff::getHistory(a1, BestTrace, a3, a4, v11, v12, v13, v14);
  memset(v25, 0, sizeof(v25));
  int v26 = 0;
  if (*(_DWORD *)(a3 + 8))
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    int v18 = 0;
    do
    {
      uint64_t v19 = *(void *)a3 + v16;
      int v20 = *(_DWORD *)(v19 + 28);
      WordLatticeLC::WordLatticeLC((uint64_t)v24, v19, v18, *(_DWORD *)(v19 + 24) - v18, v20 - *(_DWORD *)(v19 + 24), (uint64_t)v25);
      uint64_t v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(void *)a2 + 112 * v21), (const WordLatticeLC *)v24);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v24);
      ++v17;
      v16 += 32;
      int v18 = v20;
    }
    while (v17 < *(unsigned int *)(a3 + 8));
  }
  uint64_t v22 = *(void *)(a1 + 160) + 32 * v15;
  return (*(_DWORD *)(v22 + 12) + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_213E70BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t FstSearchLeaf::maybeGeneratePelMaps(FstSearchLeaf *this, const PicMgr *a2)
{
  return PicMgr::getPelPhoneMap((unint64_t)a2, (uint64_t)this + 224, (uint64_t)this + 208);
}

int64x2_t FstSearchLeaf::advanceDeltas(FstSearchLeaf *this, int a2, int a3, SearchStats *a4, int a5)
{
  int v8 = a2;
  v120[0] = a2;
  int64x2_t v118 = 0u;
  int64x2_t v119 = 0u;
  SnapTime::recordTime((SnapTime *)&v118, 1, 0, 0, 0);
  uint64_t v88 = (int *)((char *)this + 280);
  *((_DWORD *)this + 70) = a3;
  int v89 = *((_DWORD *)this + 2);
  unint64_t v10 = *((unsigned int *)this + 62);
  if (v10)
  {
    unsigned int v11 = 0;
    unsigned int v12 = 0;
    unint64_t v13 = 0;
    uint64_t v102 = (uint64_t *)((char *)this + 192);
    uint64_t v87 = (char *)this + 256;
    do
    {
      uint64_t v14 = *((void *)this + 30);
      uint64_t v15 = *((void *)this + 5);
      uint64_t v16 = 28 * v13;
      while (1)
      {
        uint64_t v17 = *(unsigned int *)(v14 + v16 + 4);
        if (*(_DWORD *)(v15 + 160) != v17) {
          break;
        }
        ++v13;
        v16 += 28;
        if (v13 >= v10) {
          goto LABEL_57;
        }
      }
      int v86 = v8;
      uint64_t v85 = a4;
      int v84 = a5;
      unsigned int v97 = v12;
      uint64_t v96 = *(unsigned int *)(v14 + v16 + 4);
      if (*(_DWORD *)(v15 + 140) > (int)v17
        && (int v18 = *(_DWORD *)(v14 + v16),
            int v19 = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(v14 + v16 + 12))
                + v18,
            int v20 = *((_DWORD *)this + 70),
            v19 - v89 <= v20))
      {
        unsigned int v94 = v11;
        if (v20 > v19) {
          *uint64_t v88 = v19;
        }
        uint64_t v22 = *((void *)this + 30) + v16;
        uint64_t v23 = *(void *)(v22 + 4);
        __int16 v100 = *(_WORD *)(v22 + 12);
        __int16 v98 = *(_WORD *)(v22 + 14);
        int v93 = *(_DWORD *)(v22 + 16);
        uint64_t v24 = *(unsigned __int16 *)(v22 + 24);
        unsigned int v25 = *((_DWORD *)this + 50);
        unsigned int v26 = v25;
        int v21 = v89;
        if (*(_WORD *)(v22 + 24))
        {
          unsigned int v27 = *(_DWORD *)(v22 + 20);
          uint64_t v28 = *v102;
          uint64_t v29 = v24;
          unsigned int v26 = *((_DWORD *)this + 50);
          do
          {
            __int16 v30 = *(_WORD *)(v28 + 2 * v27);
            if (v26 == *((_DWORD *)this + 51))
            {
              DgnPrimArray<short>::reallocElts((uint64_t)v102, 1, 1);
              unsigned int v26 = *((_DWORD *)this + 50);
              uint64_t v28 = *((void *)this + 24);
            }
            *(_WORD *)(v28 + 2 * v26++) = v30;
            *((_DWORD *)this + 50) = v26;
            ++v27;
            --v29;
          }
          while (v29);
        }
        if (v26 == *((_DWORD *)this + 51))
        {
          DgnPrimArray<short>::reallocElts((uint64_t)v102, 1, 1);
          unsigned int v26 = *((_DWORD *)this + 50);
        }
        *(_WORD *)(*((void *)this + 24) + 2 * v26) = v100;
        *((_DWORD *)this + 50) = v26 + 1;
        uint64_t v31 = *((unsigned int *)this + 66);
        uint64_t v17 = v96;
        if (v31 == *((_DWORD *)this + 67))
        {
          DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)v87, 1, 1);
          LODWORD(v31) = *((_DWORD *)this + 66);
        }
        uint64_t v32 = *((void *)this + 32) + 28 * v31;
        *(_DWORD *)uint64_t v32 = v19;
        *(void *)(v32 + 4) = v23;
        *(_WORD *)(v32 + 12) = v100;
        *(_WORD *)(v32 + 14) = v98;
        *(_DWORD *)(v32 + 16) = v93;
        *(_DWORD *)(v32 + 20) = v25;
        *(_WORD *)(v32 + 24) = v24 + 1;
        int v33 = *((_DWORD *)this + 66);
        *((_DWORD *)this + 66) = v33 + 1;
        unsigned int v11 = v94;
        if (v97 == 2 * *((_DWORD *)this + 4)) {
          unsigned int v11 = v33 + 1;
        }
        ++v97;
      }
      else
      {
        int v21 = v89;
      }
      unsigned int v34 = v17;
      do
      {
        uint64_t v35 = *((void *)this + 5);
        uint64_t v36 = *(void *)(v35 + 152);
        unsigned int v37 = *(_DWORD *)(v36 + 4 * v34);
        int v38 = *(_DWORD *)(v36 + 4 * (v34 + 1));
        int v39 = *(_DWORD *)(v35 + 140);
        if (v39 <= v38)
        {
          if (v39 <= (int)v17 && *((unsigned char *)this + 404) != 0)
          {
            unsigned int v55 = (v37 & 0xFFFFF) <= 0xFFFF3 ? v37 & 0xFFFFF : v37 & 0xFFFFF | 0xF00000;
            if (v55 != 16777210)
            {
              DgnString::DgnString((DgnString *)&v115);
              ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v55, (DgnString *)&v115, v56, v57, v58, v59, v60);
              uint64_t v65 = &unk_214099300;
              if (v115.i32[2]) {
                uint64_t v65 = (void *)v115.i64[0];
              }
              xprintf("Seed from state %d score %d trace %d, %s\n", v61, v62, v63, v64, v17, *(unsigned int *)(*((void *)this + 30) + v16), *(unsigned int *)(*((void *)this + 30) + v16 + 8), v65);
              MiniFst::seed((uint64_t)this + 288, *(_DWORD *)(*((void *)this + 30) + v16), 0, *(_DWORD *)(*((void *)this + 30) + v16 + 8), v38);
              DgnString::~DgnString((DgnString *)&v115);
            }
          }
        }
        else
        {
          int ScoreNoBackoff = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), (unsigned __int16)*(_DWORD *)(v36 + 4 * v34));
          uint64_t v41 = *((void *)this + 30);
          int v42 = ScoreNoBackoff + ((v37 >> 20) & 0x3FF) + *(_DWORD *)(v41 + v16);
          int v43 = *((_DWORD *)this + 70);
          if (v42 - v21 <= v43)
          {
            unsigned int v95 = v11;
            if (v43 > v42) {
              *uint64_t v88 = v42;
            }
            uint64_t v44 = v41 + v16;
            int v91 = *(_DWORD *)(v41 + v16 + 8);
            __int16 v92 = *(_WORD *)(v41 + v16 + 14);
            int v90 = *(_DWORD *)(v41 + v16 + 16);
            uint64_t v45 = *(unsigned __int16 *)(v41 + v16 + 24);
            unsigned int v46 = *((_DWORD *)this + 50);
            unsigned int v101 = v46;
            __int16 v99 = v45;
            if (v45)
            {
              unsigned int v47 = *(_DWORD *)(v44 + 20);
              uint64_t v48 = *v102;
              uint64_t v49 = v45;
              unsigned int v46 = *((_DWORD *)this + 50);
              do
              {
                __int16 v50 = *(_WORD *)(v48 + 2 * v47);
                if (v46 == *((_DWORD *)this + 51))
                {
                  DgnPrimArray<short>::reallocElts((uint64_t)v102, 1, 1);
                  unsigned int v46 = *((_DWORD *)this + 50);
                  uint64_t v48 = *((void *)this + 24);
                }
                *(_WORD *)(v48 + 2 * v46++) = v50;
                *((_DWORD *)this + 50) = v46;
                ++v47;
                --v49;
              }
              while (v49);
            }
            if (v46 == *((_DWORD *)this + 51))
            {
              DgnPrimArray<short>::reallocElts((uint64_t)v102, 1, 1);
              unsigned int v46 = *((_DWORD *)this + 50);
            }
            *(_WORD *)(*((void *)this + 24) + 2 * v46) = v37;
            *((_DWORD *)this + 50) = v46 + 1;
            uint64_t v51 = *((unsigned int *)this + 66);
            unsigned int v11 = v95;
            int v21 = v89;
            if (v51 == *((_DWORD *)this + 67))
            {
              DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)v87, 1, 1);
              LODWORD(v51) = *((_DWORD *)this + 66);
            }
            uint64_t v52 = *((void *)this + 32) + 28 * v51;
            *(_DWORD *)uint64_t v52 = v42;
            *(_DWORD *)(v52 + 4) = v38;
            *(_DWORD *)(v52 + 8) = v91;
            *(_WORD *)(v52 + 12) = v37;
            *(_WORD *)(v52 + 14) = v92;
            *(_DWORD *)(v52 + 16) = v90 + ((v37 >> 20) & 0x3FF);
            *(_DWORD *)(v52 + 20) = v101;
            *(_WORD *)(v52 + 24) = v99 + 1;
            int v53 = *((_DWORD *)this + 66);
            *((_DWORD *)this + 66) = v53 + 1;
            if (v97 == 2 * *((_DWORD *)this + 4)) {
              unsigned int v11 = v53 + 1;
            }
            ++v97;
          }
          uint64_t v17 = v96;
        }
        v34 += 2;
      }
      while ((v37 & 0x80000000) == 0);
      unint64_t v13 = (v13 + 1);
      unint64_t v10 = *((unsigned int *)this + 62);
      int v8 = v86;
      a4 = v85;
      a5 = v84;
      unsigned int v12 = v97;
    }
    while (v13 < v10);
  }
  else
  {
    unsigned int v12 = 0;
    unsigned int v11 = 0;
  }
LABEL_57:
  int v117 = *((_DWORD *)this + 70) + v89;
  if (*((unsigned char *)this + 404)) {
    MiniFst::updateFrame((char *)this + 288, v88, v89, v8);
  }
  int64x2_t v115 = 0u;
  int64x2_t v116 = 0u;
  SnapTime::recordTime((SnapTime *)&v115, 1, 0, 0, 0);
  int64x2_t v115 = vsubq_s64(v115, v118);
  int64x2_t v116 = vsubq_s64(v116, v119);
  uint64_t v66 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v67 = vaddq_s64(v66[1], v116);
  *uint64_t v66 = vaddq_s64(*v66, v115);
  v66[1] = v67;
  int64x2_t v113 = 0u;
  int64x2_t v114 = 0u;
  SnapTime::recordTime((SnapTime *)&v113, 1, 0, 0, 0);
  if (v12 > 2 * *((_DWORD *)this + 4)) {
    FstSearchLeafBackoff::applyCutoffOnEmitting((uint64_t)this, v11, &v117);
  }
  int64x2_t v111 = 0u;
  int64x2_t v112 = 0u;
  SnapTime::recordTime((SnapTime *)&v111, 1, 0, 0, 0);
  int64x2_t v68 = vsubq_s64(v111, v113);
  uint64_t v69 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v70 = v69[3];
  int64x2_t v71 = vaddq_s64(v69[2], v68);
  int64x2_t v111 = v68;
  int64x2_t v112 = vsubq_s64(v112, v114);
  int64x2_t v72 = vaddq_s64(v70, v112);
  v69[2] = v71;
  v69[3] = v72;
  int64x2_t v109 = 0u;
  int64x2_t v110 = 0u;
  SnapTime::recordTime((SnapTime *)&v109, 1, 0, 0, 0);
  FstSearchLeafBackoff::makeViterbiDecisionOnEmitting((uint64_t)this);
  unint64_t v73 = *((unsigned int *)this + 6);
  if (v73)
  {
    unint64_t v74 = *((unsigned int *)this + 62);
    if (v73 < v74) {
      mrec_nth_element<FstSearchLatticeHashBackoffcmpTok>(*((void *)this + 30), v73, v74);
    }
  }
  int64x2_t v107 = 0u;
  int64x2_t v108 = 0u;
  SnapTime::recordTime((SnapTime *)&v107, 1, 0, 0, 0);
  int64x2_t v75 = vsubq_s64(v107, v109);
  uint64_t v76 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v77 = v76[5];
  int64x2_t v78 = vaddq_s64(v76[4], v75);
  int64x2_t v107 = v75;
  int64x2_t v108 = vsubq_s64(v108, v110);
  int64x2_t v79 = vaddq_s64(v77, v108);
  v76[4] = v78;
  v76[5] = v79;
  int64x2_t v105 = 0u;
  int64x2_t v106 = 0u;
  SnapTime::recordTime((SnapTime *)&v105, 1, 0, 0, 0);
  *((_DWORD *)this + 66) = 0;
  uint64_t v80 = *((unsigned int *)this + 62);
  *((_DWORD *)this + 38) = v80;
  if (a4)
  {
    *((void *)a4 + 2) += v80;
    if (*((_DWORD *)a4 + 2) > v80) {
      LODWORD(v80) = *((_DWORD *)a4 + 2);
    }
    *((_DWORD *)a4 + 2) = v80;
  }
  if (*((unsigned char *)this + 404)) {
    FstSearchLeaf::seedFromMiniFst((uint64_t)this, v120);
  }
  if (a5) {
    FstSearchLeafBackoff::propagateNulls(this, v117, v8, a4);
  }
  *((_DWORD *)this + 68) = v8;
  int64x2_t v103 = 0u;
  int64x2_t v104 = 0u;
  SnapTime::recordTime((SnapTime *)&v103, 1, 0, 0, 0);
  uint64_t v81 = (int64x2_t *)*((void *)this + 13);
  int64x2_t result = vaddq_s64(v81[6], vsubq_s64(v103, v105));
  int64x2_t v83 = vaddq_s64(v81[7], vsubq_s64(v104, v106));
  v81[6] = result;
  v81[7] = v83;
  return result;
}

void sub_213E71370(_Unwind_Exception *exception_object)
{
}

uint64_t FstSearchLeaf::seedFromMiniFst(uint64_t this, int *a2)
{
  if (*(unsigned char *)(this + 404))
  {
    uint64_t v2 = this;
    unsigned int v3 = *(_DWORD *)(this + 312);
    if (v3 >= *(_DWORD *)(this + 20)) {
      unsigned int v3 = *(_DWORD *)(this + 20);
    }
    if (v3)
    {
      uint64_t v5 = 0;
      unsigned int v6 = 0;
      int v7 = (void *)(this + 160);
      uint64_t v21 = this + 240;
      do
      {
        int v8 = (int *)(*(void *)(v2 + 304) + v5);
        int v9 = *v8;
        int v11 = v8[6];
        int v10 = v8[7];
        int v12 = v8[2];
        v22[0] = 0;
        v22[1] = 0;
        if ((v12 & 0x80000000) == 0)
        {
          while (1)
            ;
        }
        uint64_t v13 = (-2 - v12);
        if (v10 == 16777213)
        {
          int v10 = 16777209;
          if (*(_DWORD *)(*v7 + 32 * (-2 - v12)) == 16777209) {
            LODWORD(v13) = *(_DWORD *)(*(void *)(v2 + 176) + 20 * *(unsigned int *)(*v7 + 32 * v13 + 8) + 8);
          }
        }
        int v14 = *a2;
        uint64_t v15 = *(unsigned int *)(v2 + 168);
        if (v15 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<PrefilterResultFrame>::reallocElts(v2 + 160, 1, 1);
          uint64_t v15 = *(unsigned int *)(v2 + 168);
        }
        uint64_t v16 = *(void *)(v2 + 160) + 32 * v15;
        *(_DWORD *)uint64_t v16 = v10;
        *(_DWORD *)(v16 + 4) = v14;
        *(_DWORD *)(v16 + 8) = -1;
        *(_DWORD *)(v16 + 12) = v9;
        *(_DWORD *)(v16 + 20) = 0;
        *(_DWORD *)(v16 + 24) = 0;
        *(_DWORD *)(v16 + 16) = v13;
        *(_WORD *)(v16 + 28) = 0;
        int v17 = *(_DWORD *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v17 + 1;
        uint64_t v18 = *(unsigned int *)(v2 + 248);
        if (v18 == *(_DWORD *)(v2 + 252))
        {
          DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(v21, 1, 1);
          LODWORD(v18) = *(_DWORD *)(v2 + 248);
        }
        uint64_t v19 = *(void *)(v2 + 240) + 28 * v18;
        *(_DWORD *)uint64_t v19 = v9;
        *(_DWORD *)(v19 + 4) = v11;
        *(_DWORD *)(v19 + 8) = v17;
        *(_WORD *)(v19 + 12) = -2;
        *(void *)(v19 + 16) = 0;
        *(_WORD *)(v19 + 24) = 0;
        ++*(_DWORD *)(v2 + 248);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v22);
        ++v6;
        unsigned int v20 = *(_DWORD *)(v2 + 312);
        if (v20 >= *(_DWORD *)(v2 + 20)) {
          unsigned int v20 = *(_DWORD *)(v2 + 20);
        }
        v5 += 36;
      }
      while (v6 < v20);
    }
  }
  return this;
}

void sub_213E71568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLeaf::collectTraces(FstSearchLeaf *this)
{
  uint64_t v2 = *((unsigned int *)this + 42);
  unsigned int v52 = 0;
  uint64_t v51 = 0;
  if (v2)
  {
    unsigned int v3 = MemChunkAlloc(4 * v2, 0);
    unint64_t v4 = 0;
    uint64_t v51 = v3;
    unsigned int v52 = v2;
    do
      *((_DWORD *)v3 + v4++) = 0;
    while (v4 < v52);
  }
  unint64_t v5 = *((unsigned int *)this + 62);
  if (v5)
  {
    unint64_t v6 = 0;
    int v7 = v51;
    int v8 = (unsigned int *)(*((void *)this + 30) + 8);
    do
    {
      unsigned int v10 = *v8;
      v8 += 7;
      uint64_t v9 = v10;
      if (v10 != -1)
      {
        *((_DWORD *)v7 + v9) = 1;
        unint64_t v5 = *((unsigned int *)this + 62);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  int v11 = *((_DWORD *)this + 42);
  if (v11)
  {
    int v12 = (uint64_t *)((char *)this + 160);
    uint64_t v13 = v51;
    unsigned int v14 = v11 - 1;
    do
    {
      uint64_t v15 = v14;
      if (*((_DWORD *)v13 + v14))
      {
        uint64_t v16 = *(unsigned int *)(*v12 + 32 * v14 + 16);
        if (v16 != -1) {
          *((_DWORD *)v13 + v16) = 1;
        }
      }
      --v14;
    }
    while (v15);
    unsigned int v17 = *((_DWORD *)this + 42);
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    if (v17)
    {
      uint64_t v18 = 0;
      unint64_t v19 = 0;
      unsigned int v20 = 0;
      do
      {
        uint64_t v21 = v51;
        if (*((_DWORD *)v51 + v19))
        {
          uint64_t v22 = *v12;
          if (v19 != v20)
          {
            uint64_t v23 = (long long *)(v22 + 32 * v19);
            uint64_t v24 = (_OWORD *)(v22 + 32 * v20);
            long long v25 = *v23;
            *(_OWORD *)((char *)v24 + 14) = *(long long *)((char *)v23 + 14);
            *uint64_t v24 = v25;
            uint64_t v22 = *v12;
          }
          uint64_t v26 = v22 + 32 * v20;
          unsigned int v29 = *(_DWORD *)(v26 + 16);
          unsigned int v27 = (_DWORD *)(v26 + 16);
          uint64_t v28 = v29;
          if (v29 != -1) {
            *unsigned int v27 = *((_DWORD *)v21 + v28);
          }
          int v30 = v50;
          if (*(_WORD *)(v22 + 32 * v20 + 28))
          {
            unsigned int v31 = 0;
            unsigned int v32 = v50;
            do
            {
              __int16 v33 = *(_WORD *)(*((void *)this + 24) + 2 * (v31 + *(_DWORD *)(v22 + 32 * v20 + 24)));
              if (v32 == HIDWORD(v50))
              {
                DgnPrimArray<short>::reallocElts((uint64_t)&v49, 1, 1);
                unsigned int v32 = v50;
                uint64_t v18 = v49;
                uint64_t v22 = *v12;
              }
              *(_WORD *)(v18 + 2 * v32++) = v33;
              LODWORD(v50) = v32;
              ++v31;
            }
            while (v31 < *(unsigned __int16 *)(v22 + 32 * v20 + 28));
          }
          *(_DWORD *)(v22 + 32 * v20 + 24) = v30;
          *((_DWORD *)v51 + v19) = v20++;
          unsigned int v17 = *((_DWORD *)this + 42);
        }
        ++v19;
      }
      while (v19 < v17);
      unsigned int v34 = *((_DWORD *)this + 43);
      if (v20 > v34)
      {
        DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)this + 160, v20 - v34, 0);
        unsigned int v17 = *((_DWORD *)this + 42);
      }
      if (v17 < v20)
      {
        unint64_t v35 = v20 - (unint64_t)v17;
        uint64_t v36 = (_WORD *)(*v12 + 32 * v17 + 28);
        do
        {
          *(_OWORD *)(v36 - 14) = xmmword_2140992B0;
          *(void *)(v36 - 6) = 0xFFFFFFFFLL;
          *((_DWORD *)v36 - 1) = 0;
          *uint64_t v36 = 0;
          v36 += 16;
          --v35;
        }
        while (v35);
      }
    }
    else
    {
      unsigned int v20 = 0;
    }
  }
  else
  {
    unsigned int v20 = 0;
    uint64_t v49 = 0;
    uint64_t v50 = 0;
  }
  *((_DWORD *)this + 42) = v20;
  unint64_t v37 = *((unsigned int *)this + 62);
  if (v37)
  {
    unint64_t v38 = 0;
    uint64_t v39 = v50;
    uint64_t v40 = *((void *)this + 30);
    do
    {
      if (*(_WORD *)(v40 + 28 * v38 + 24))
      {
        unsigned int v41 = 0;
        LODWORD(v42) = v39;
        do
        {
          __int16 v43 = *(_WORD *)(*((void *)this + 24) + 2 * (v41 + *(_DWORD *)(v40 + 28 * v38 + 20)));
          if (v42 == HIDWORD(v50))
          {
            DgnPrimArray<short>::reallocElts((uint64_t)&v49, 1, 1);
            LODWORD(v42) = v50;
            uint64_t v40 = *((void *)this + 30);
          }
          *(_WORD *)(v49 + 2 * v42) = v43;
          uint64_t v42 = (v42 + 1);
          LODWORD(v50) = v42;
          ++v41;
        }
        while (v41 < *(unsigned __int16 *)(v40 + 28 * v38 + 24));
        unint64_t v37 = *((unsigned int *)this + 62);
      }
      else
      {
        uint64_t v42 = v39;
      }
      *(_DWORD *)(v40 + 28 * v38++ + 20) = v39;
      uint64_t v39 = v42;
    }
    while (v38 < v37);
  }
  else
  {
    LODWORD(v42) = v50;
  }
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 192, &v49, 0, v42);
  uint64_t v44 = *((unsigned int *)this + 62);
  if (v44)
  {
    uint64_t v45 = v51;
    unsigned int v46 = (_DWORD *)(*((void *)this + 30) + 8);
    do
    {
      uint64_t v47 = *v46;
      if (v47 != -1) {
        *unsigned int v46 = *((_DWORD *)v45 + v47);
      }
      v46 += 7;
      --v44;
    }
    while (v44);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v49);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v51);
}

void sub_213E718FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

int64x2_t FstSearchLeaf::vite(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  FstSearchLeaf::advanceDeltas((FstSearchLeaf *)this, a2, a3, a4, a5);
  int64x2_t v13 = 0u;
  int64x2_t v14 = 0u;
  SnapTime::recordTime((SnapTime *)&v13, 1, 0, 0, 0);
  if (a2 >= 1)
  {
    unsigned int v7 = *((_DWORD *)this + 18);
    if (v7)
    {
      if (!(a2 % v7)) {
        FstSearchLeaf::collectTraces((FstSearchLeaf *)this);
      }
    }
  }
  int64x2_t v11 = 0u;
  int64x2_t v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  int v8 = this[13];
  int64x2_t result = vaddq_s64(v8[14], vsubq_s64(v11, v13));
  int64x2_t v10 = vaddq_s64(v8[15], vsubq_s64(v12, v14));
  v8[14] = result;
  v8[15] = v10;
  return result;
}

_DWORD *FstSearchLeaf::reset(_DWORD *this)
{
  this[42] = 0;
  this[46] = 0;
  this[50] = 0;
  this[62] = 0;
  return this;
}

double FstSearchLeaf::doFrame(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  if (a3 >= 20000) {
    a3 = 20000;
  }
  *(void *)&double result = FstSearchLeaf::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearchLeaf::beginTopRecPassSyncRecog(FstSearchLeaf *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 288, a3, *((PelScoreCache **)this + 4));
    uint64_t result = ArcGraph::findBackoffState(*((void *)this + 5));
    *((_DWORD *)this + 100) = result;
    *((unsigned char *)this + 404) = 1;
  }
  return result;
}

uint64_t FstSearchLeaf::endTopRecPassSyncRecog(FstSearchLeaf *this)
{
  int64x2_t v10 = 0u;
  int64x2_t v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  FstSearchLeafBackoff::generateTraceTokensFromTraces((unint64_t)this);
  int64x2_t v8 = 0u;
  int64x2_t v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  int64x2_t v2 = vsubq_s64(v8, v10);
  unsigned int v3 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v4 = v3[13];
  int64x2_t v5 = vaddq_s64(v3[12], v2);
  int64x2_t v8 = v2;
  int64x2_t v9 = vsubq_s64(v9, v11);
  int64x2_t v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + 70) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

void FstSearchLeaf::printSize(FstSearchLeaf *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v125);
  if (v126) {
    uint64_t v15 = v125;
  }
  else {
    uint64_t v15 = &unk_214099300;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v11, v12, v13, v14, a3, &unk_214099300, a3, &unk_214099300, v15);
  DgnString::~DgnString((DgnString *)&v125);
  if (a2 != -1) {
    xlprintf("%d ", v16, v17, v18, v19, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v16, v17, v18, v19, a3, &unk_214099300);
  uint64_t v20 = (a3 + 1);
  uint64_t v21 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v125);
  if (v126) {
    uint64_t v26 = v125;
  }
  else {
    uint64_t v26 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v22, v23, v24, v25, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v26, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v125);
  if (v126) {
    unsigned int v31 = v125;
  }
  else {
    unsigned int v31 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v27, v28, v29, v30, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v31, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v125);
  if (v126) {
    uint64_t v36 = v125;
  }
  else {
    uint64_t v36 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v32, v33, v34, v35, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v36, 4, 4, 0);
  uint64_t v121 = a2;
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v125);
  if (v126) {
    unsigned int v41 = v125;
  }
  else {
    unsigned int v41 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v37, v38, v39, v40, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v41, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  uint64_t v42 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v42 = 16;
  }
  uint64_t v43 = *((unsigned int *)this + 42);
  uint64_t v44 = 30 * v43;
  if ((int)v43 <= 0) {
    uint64_t v44 = 0;
  }
  uint64_t v45 = v44 + v42;
  uint64_t v46 = v44 + v42 + 30 * (*((_DWORD *)this + 43) - v43);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v125);
  if (v126) {
    uint64_t v51 = v125;
  }
  else {
    uint64_t v51 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v47, v48, v49, v50, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v51, v46, v45, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v46;
  *a5 += v45;
  uint64_t v52 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v52 = 16;
  }
  uint64_t v53 = *((unsigned int *)this + 46);
  uint64_t v54 = 18 * v53;
  if ((int)v53 <= 0) {
    uint64_t v54 = 0;
  }
  uint64_t v55 = v54 + v52;
  uint64_t v56 = v54 + v52 + 18 * (*((_DWORD *)this + 47) - v53);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v125);
  if (v126) {
    uint64_t v61 = v125;
  }
  else {
    uint64_t v61 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v57, v58, v59, v60, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v61, v56, v55, 0);
  uint64_t v120 = a3;
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v56;
  *a5 += v55;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v62 = 12;
  }
  else {
    uint64_t v62 = 16;
  }
  uint64_t v63 = *((unsigned int *)this + 50);
  unsigned int v64 = *((_DWORD *)this + 51);
  if (v64 >= v63)
  {
    uint64_t v65 = 0;
    if ((int)v63 > 0) {
      uint64_t v62 = (v62 | 2) + 2 * (v63 - 1);
    }
    uint64_t v66 = v62 + 2 * (v64 - v63);
  }
  else
  {
    uint64_t v65 = 2 * v63;
    uint64_t v66 = v62;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2961, (DgnString *)&v125);
  if (v126) {
    int64x2_t v71 = v125;
  }
  else {
    int64x2_t v71 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v67, v68, v69, v70, v20, &unk_214099300, v21, v21, v71, v66, v62, v65);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v66;
  *a5 += v62;
  *a6 += v65;
  uint64_t v72 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v72 = 16;
  }
  uint64_t v73 = *((unsigned int *)this + 62);
  uint64_t v74 = 24 * v73;
  if ((int)v73 <= 0) {
    uint64_t v74 = 0;
  }
  uint64_t v75 = v74 + v72;
  uint64_t v76 = v74 + v72 + 24 * (*((_DWORD *)this + 63) - v73);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v125);
  if (v126) {
    uint64_t v81 = v125;
  }
  else {
    uint64_t v81 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v77, v78, v79, v80, v20, &unk_214099300, v21, v21, v81, v76, v75, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v76;
  *a5 += v75;
  uint64_t v82 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v82 = 16;
  }
  uint64_t v83 = *((unsigned int *)this + 66);
  uint64_t v84 = 24 * v83;
  if ((int)v83 <= 0) {
    uint64_t v84 = 0;
  }
  uint64_t v85 = v84 + v82;
  uint64_t v86 = v84 + v82 + 24 * (*((_DWORD *)this + 67) - v83);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v125);
  if (v126) {
    int v91 = v125;
  }
  else {
    int v91 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v87, v88, v89, v90, v20, &unk_214099300, v21, v21, v91, v86, v85, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v86;
  *a5 += v85;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v125);
  if (v126) {
    uint64_t v96 = v125;
  }
  else {
    uint64_t v96 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v92, v93, v94, v95, v20, &unk_214099300, v21, v21, v96, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v125);
  if (v126) {
    unsigned int v101 = v125;
  }
  else {
    unsigned int v101 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v97, v98, v99, v100, v20, &unk_214099300, v21, v21, v101, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v125);
  if (v126) {
    int64x2_t v106 = v125;
  }
  else {
    int64x2_t v106 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v102, v103, v104, v105, v20, &unk_214099300, v21, v21, v106, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  uint64_t v107 = sizeObject((uint64_t)this + 288, 0);
  uint64_t v108 = sizeObject((uint64_t)this + 288, 1);
  uint64_t v109 = sizeObject((uint64_t)this + 288, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v125);
  if (v126) {
    int64x2_t v114 = v125;
  }
  else {
    int64x2_t v114 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v110, v111, v112, v113, v20, &unk_214099300, v21, v21, v114, v107, v108, v109);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v107;
  *a5 += v108;
  *a6 += v109;
  unint64_t v123 = 0;
  unint64_t v124 = 0;
  SearchItf::printSize(this, v121, v20, &v124, &v123, &v123);
  *a4 += v124;
  *a5 += v123;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v125);
  if (v126) {
    int64x2_t v119 = v125;
  }
  else {
    int64x2_t v119 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v115, v116, v117, v118, v120, &unk_214099300, (35 - v120), (35 - v120), v119, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v125);
}

void sub_213E7230C(_Unwind_Exception *a1)
{
  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

BOOL FstSearchLeaf::findBestPath(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8 = *(unsigned int *)(a1 + 168);
  if (v8) {
    BOOL v9 = *(_DWORD *)(a3 + 8) == 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    *(void *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v8;
  }
  if (v8) {
    BOOL v10 = *(_DWORD *)(a2 + 8) == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    *(void *)a2 = MemChunkAlloc(v8, 0);
    *(_DWORD *)(a2 + 8) = v8;
LABEL_14:
    uint64_t v11 = 0;
    do
    {
      *(unsigned char *)(*(void *)a2 + v11) = 0;
      *(unsigned char *)(*(void *)a3 + v11++) = 0;
    }
    while (v8 != v11);
    goto LABEL_16;
  }
  if (v8) {
    goto LABEL_14;
  }
LABEL_16:
  unsigned int BestTrace = FstSearchLeafBackoff::getBestTrace(a1, (void *)a2, (void *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1) {
    return 0;
  }
  uint64_t v13 = *(void *)(a1 + 160) + 32 * BestTrace;
  LODWORD(v13) = *(_DWORD *)(v13 + 12) + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v13 + 4));
  *a4 = v13;
  return v13 != 1879048192;
}

uint64_t FstSearchLeaf::buildWordLattice(unint64_t a1, uint64_t *a2, uint64_t *a3, void *a4, unsigned __int8 a5)
{
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  int v27 = 0;
  uint64_t v24 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v23, *(unsigned int *)(a1 + 168));
  unint64_t v8 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v8, 0, 128);
  v8[4] = (uint64_t)a2;
  FstSearchLeafBackoff::createLatticeNodes(a1, (uint64_t)&v26, (uint64_t)&v24, (uint64_t)a2, v23, a3, a4);
  uint64_t v9 = *(unsigned int *)(a1 + 168);
  if (v9)
  {
    uint64_t v10 = 0;
    int v11 = v25;
    do
    {
      if (*(unsigned char *)(*a3 + v10))
      {
        uint64_t v12 = *(void *)(a1 + 160);
        if (*(_DWORD *)(v12 + 32 * v10) != 16777209)
        {
          uint64_t v13 = *(void *)(a1 + 176) + 20 * *(unsigned int *)(v12 + 32 * v10 + 8);
          uint64_t v14 = *(unsigned int *)(v13 + 8);
          if (v14 == -1) {
            unsigned int v15 = 0;
          }
          else {
            unsigned int v15 = v11 - *(_DWORD *)(v26 + 4 * v14);
          }
          uint64_t v16 = *(unsigned int *)(v24 + 4 * v15);
          if (*(unsigned char *)(*a4 + v10)) {
            FstSearchLeaf::createLatticeLink(a1, v10, (int *)v13, 0xFFFFFFFFLL, v16, *(unsigned int *)(v24 + 4 * (v11 - *(_DWORD *)(v26 + 4 * v10))), a2, (uint64_t)v8, a5);
          }
          uint64_t v17 = v23[0];
          if (*(_DWORD *)(v23[0] + 16 * v10 + 8))
          {
            unint64_t v18 = 0;
            do
            {
              uint64_t v19 = *(unsigned int *)(*(void *)(v17 + 16 * v10) + 4 * v18);
              FstSearchLeaf::createLatticeLink(a1, v10, (int *)v13, v19, v16, *(unsigned int *)(v24 + 4 * (v11 - *(_DWORD *)(v26 + 4 * v19))), a2, (uint64_t)v8, a5);
              ++v18;
              uint64_t v17 = v23[0];
            }
            while (v18 < *(unsigned int *)(v23[0] + 16 * v10 + 8));
          }
        }
      }
      ++v10;
    }
    while (v10 != v9);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>((uint64_t)v8);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v23);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v24);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v26);
}

void sub_213E72660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearchLeaf::createLatticeLink(unint64_t a1, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, unsigned __int8 a9)
{
  unsigned int v34 = a6;
  unsigned int v11 = a5;
  unsigned int v12 = a4;
  uint64_t v16 = *(void *)(a1 + 160);
  if ((a4 & 0x80000000) != 0)
  {
    uint64_t v17 = 0;
  }
  else if (*(_DWORD *)(*(void *)(a1 + 176) + 20 * *(unsigned int *)(v16 + 32 * a4 + 8) + 8) == a2)
  {
    uint64_t v17 = (_DWORD *)(*(void *)(a1 + 176) + 20 * *(unsigned int *)(v16 + 32 * a4 + 8));
  }
  else
  {
    uint64_t v17 = 0;
  }
  ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *(_DWORD *)(v16 + 32 * a2), (uint64_t)a3, a4, a5, a6, (uint64_t)a7, a8, (uint64_t)v44);
  int v18 = a3[1];
  if (v17)
  {
    v18 += v17[1];
    int v19 = *v17 + *a3;
  }
  else
  {
    int v19 = *a3;
  }
  if (v44[0] >> 25 == 126)
  {
    int v20 = 0;
    int v21 = v18;
  }
  else
  {
    int v20 = *(_DWORD *)(a1 + 136);
    int v21 = v18 - v20;
  }
  int v22 = v19 - v18;
  if ((v12 & 0x80000000) != 0)
  {
    int v23 = 0;
  }
  else
  {
    int v23 = *(_DWORD *)(a1 + 140);
    v21 -= v23;
  }
  int v38 = v21;
  uint64_t v39 = 0;
  int v40 = v20;
  int v41 = v22;
  int v42 = 0;
  int v43 = v23;
  uint64_t v24 = a3[2];
  uint64_t v25 = *(void *)(a1 + 160);
  if (v24 == -1)
  {
    int v27 = 0;
    if (a9) {
      goto LABEL_21;
    }
  }
  else
  {
    int v26 = *(_DWORD *)(v25 + 32 * v24 + 4);
    if (a9)
    {
      if (v26 >= 1) {
        --v26;
      }
      int v27 = (v26 >> 1) + 1;
LABEL_21:
      int v28 = *(_DWORD *)(v25 + 32 * a2 + 4);
      if (v28 >= 1) {
        --v28;
      }
      int v29 = (v28 >> 1) + 1;
      int v30 = v29 - v27;
      if ((v12 & 0x80000000) == 0)
      {
        int v31 = *(_DWORD *)(v25 + 32 * v12 + 4);
        if (v31 >= 1) {
          --v31;
        }
        int v32 = v31 >> 1;
        goto LABEL_30;
      }
      goto LABEL_31;
    }
    int v27 = v26 + 1;
  }
  int v29 = *(_DWORD *)(v25 + 32 * a2 + 4) + 1;
  int v30 = v29 - v27;
  if ((v12 & 0x80000000) == 0)
  {
    int v32 = *(_DWORD *)(v25 + 32 * v12 + 4);
LABEL_30:
    int v33 = v32 - v29 + 1;
    goto LABEL_32;
  }
LABEL_31:
  int v33 = 0;
LABEL_32:
  WordLatticeLC::WordLatticeLC((uint64_t)v36, (uint64_t)v44, v27, v30, v33, (uint64_t)&v38);
  v35[0] = 0;
  v35[1] = 0;
  FstSearchLeafBackoff::buildLinkSegmentation(a1, (uint64_t)v35, (uint64_t)a3, v27, a9);
  if (v17) {
    FstSearchLeafBackoff::buildLinkSegmentation(a1, (uint64_t)v35, (uint64_t)v17, v29, a9);
  }
  unint64_t v37 = WordLattice::findOrAddLinkSegSeqId((uint64_t)a7, (uint64_t)v35, a8);
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v11, (const WordLatticeLC *)v34, (WordLatticeLC *)v36);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v35);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v36);
}

void sub_213E728E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va1);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLeaf::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(void *)(this + 112) = a2;
  if (*(unsigned char *)(this + 404)) {
    return MiniFst::beginTopFstSyncRecog(this + 288);
  }
  return this;
}

uint64_t FstSearchLeaf::endTopRecSyncRecog(FstSearchLeaf *this)
{
  uint64_t v1 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  return v1;
}

uint64_t FstSearchLeaf::getBestExitScore(FstSearchLeaf *this)
{
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  *((_DWORD *)this + 69) = -1;
  unint64_t v1 = *((unsigned int *)this + 38);
  unint64_t v2 = *((unsigned int *)this + 62);
  if (v1 >= v2) {
    goto LABEL_16;
  }
  uint64_t v4 = 0;
  unsigned int v5 = 0;
  uint64_t v6 = 28 * v1;
  do
  {
    uint64_t v7 = *((void *)this + 30) + v6;
    if (*(_DWORD *)(*((void *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      uint64_t v8 = *(unsigned int *)(v7 + 8);
      if (v8 != -1 && *(_DWORD *)(*((void *)this + 20) + 32 * v8 + 4) == *((_DWORD *)this + 68))
      {
        if (v5 == HIDWORD(v18))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v17, 1, 1);
          unsigned int v5 = v18;
          uint64_t v4 = v17;
        }
        v4[v5] = v8;
        unsigned int v5 = v18 + 1;
        LODWORD(v18) = v18 + 1;
        unint64_t v2 = *((unsigned int *)this + 62);
      }
    }
    ++v1;
    v6 += 28;
  }
  while (v1 < v2);
  if (v5)
  {
    uint64_t v9 = *((void *)this + 20);
    uint64_t v10 = v5;
    int v11 = 1879048192;
    do
    {
      unsigned int v12 = *v4++;
      uint64_t v13 = v9 + 32 * v12;
      int v14 = *(_DWORD *)(v13 + 12);
      if (v11 > v14)
      {
        *((_DWORD *)this + 69) = *(_DWORD *)(v13 + 16);
        int v11 = v14;
      }
      --v10;
    }
    while (v10);
  }
  else
  {
LABEL_16:
    int v11 = 1879048192;
  }
  if (v11 >= 20000) {
    uint64_t v15 = 20000;
  }
  else {
    uint64_t v15 = v11;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v17);
  return v15;
}

void sub_213E72A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t FstSearchLeaf::getBestScoreMaybeUpdateFstNode(FstSearchLeaf *this, Node *a2)
{
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v2 = *((unsigned int *)this + 62);
  if (v2)
  {
    unsigned int v3 = (int *)*((void *)this + 30);
    __int16 v4 = -1;
    int v5 = 1879048192;
    uint64_t v6 = v3;
    do
    {
      int v8 = *v6;
      v6 += 7;
      int v7 = v8;
      if (v5 > v8)
      {
        __int16 v4 = *((_WORD *)v3 + 6);
        int v5 = v7;
      }
      unsigned int v3 = v6;
      --v2;
    }
    while (v2);
    uint64_t v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000) {
        uint64_t v9 = 20000;
      }
      else {
        uint64_t v9 = v5;
      }
    }
  }
  else
  {
    uint64_t v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

void *FstSearchLeaf::seedTheory(FstSearchLeaf *this, int a2, int a3, int a4, SearchStats *a5)
{
  if (a4 == -2)
  {
    int v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    unsigned int v11 = *((_DWORD *)this + 42);
    if (v11 == *((_DWORD *)this + 43))
    {
      DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)this + 160, 1, 1);
      unsigned int v11 = *((_DWORD *)this + 42);
    }
    uint64_t v12 = *((void *)this + 20) + 32 * v11;
    *(_DWORD *)uint64_t v12 = a4;
    *(_DWORD *)(v12 + 4) = a3;
    *(_DWORD *)(v12 + 8) = -1;
    *(_DWORD *)(v12 + 12) = a2;
    *(void *)(v12 + 16) = 0xFFFFFFFFLL;
    *(_DWORD *)(v12 + 24) = 0;
    *(_WORD *)(v12 + 28) = 0;
    int v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  int v13 = *(_DWORD *)(*((void *)this + 5) + 144);
  unsigned int v14 = *((_DWORD *)this + 62);
  if (v14 == *((_DWORD *)this + 63))
  {
    DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)this + 240, 1, 1);
    unsigned int v14 = *((_DWORD *)this + 62);
  }
  uint64_t v15 = *((void *)this + 30) + 28 * v14;
  *(_DWORD *)uint64_t v15 = a2;
  *(_DWORD *)(v15 + 4) = v13;
  *(_DWORD *)(v15 + 8) = v9;
  *(_WORD *)(v15 + 12) = -2;
  *(void *)(v15 + 16) = 0;
  *(_WORD *)(v15 + 24) = 0;
  LODWORD(v15) = *((_DWORD *)this + 62) + 1;
  *((_DWORD *)this + 62) = v15;
  *((_DWORD *)this + 38) = v15;

  return FstSearchLeafBackoff::propagateNulls(this, 20000, a3, a5);
}

uint64_t FstSearchLeaf::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(unsigned int *)(result + 276);
  if (v8 != -1)
  {
    uint64_t v10 = result;
    unsigned int v11 = (unsigned int *)(*(void *)(result + 160) + 32 * v8);
    for (i = v11[4]; i != -1; uint64_t v8 = v17)
    {
      uint64_t v17 = i;
      uint64_t result = *(void *)(v10 + 40);
      if (*v11 == 16777209)
      {
        int v18 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        uint64_t result = ArcGraph::lexToCWID((ArcGraph *)result, *v11, a3, (uint64_t)a4, a5, a6, a7, a8);
        int v18 = result;
      }
      uint64_t v19 = *(unsigned int *)(a2 + 8);
      if (v19 == *(_DWORD *)(a2 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        uint64_t v19 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(void *)a2 + 4 * v19) = v18;
      ++*(_DWORD *)(a2 + 8);
      uint64_t v20 = *(unsigned int *)(a6 + 8);
      if (v20 == *(_DWORD *)(a6 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        uint64_t v20 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(void *)a6 + 4 * v20) = v8;
      ++*(_DWORD *)(a6 + 8);
      uint64_t v21 = *(void *)(v10 + 160);
      int v22 = *(_DWORD *)(v21 + 32 * v8 + 4);
      uint64_t v23 = *(unsigned int *)(a3 + 8);
      if (v23 == *(_DWORD *)(a3 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        uint64_t v23 = *(unsigned int *)(a3 + 8);
        uint64_t v21 = *(void *)(v10 + 160);
      }
      *(_DWORD *)(*(void *)a3 + 4 * v23) = v22;
      ++*(_DWORD *)(a3 + 8);
      int v24 = *(_DWORD *)(v21 + 32 * v8 + 12);
      uint64_t v25 = *(unsigned int *)(a5 + 8);
      if (v25 == *(_DWORD *)(a5 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        uint64_t v25 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(void *)a5 + 4 * v25) = v24;
      ++*(_DWORD *)(a5 + 8);
      unsigned int v11 = (unsigned int *)(*(void *)(v10 + 160) + 32 * v17);
      uint64_t i = v11[4];
    }
    *a4 = *v11;
  }
  return result;
}

void FstSearchLeaf::checkSearchParametersValidityForArcGraph(FstSearchLeaf *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *((void *)this + 5);
  if (*(unsigned char *)(v8 + 178))
  {
    int v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(unsigned char *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    }
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    }
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(void *)(**(void **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((void *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if (a2)
      {
        if (!*(unsigned char *)(v8 + 203)) {
          return;
        }
      }
      else if (*(unsigned char *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(unsigned char *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

uint64_t FstSearchLeaf::makePartialResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    uint64_t v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(void *)a2 + v9))(*(void *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  unsigned int BestTrace = FstSearchLeafBackoff::getBestTrace(a1, 0, 0, 1);
  if (BestTrace == -1) {
    return 1879048192;
  }
  unsigned int v15 = BestTrace;
  FstSearchLeafBackoff::getHistory(a1, BestTrace, a3, a4, v11, v12, v13, v14);
  memset(v25, 0, sizeof(v25));
  int v26 = 0;
  if (*(_DWORD *)(a3 + 8))
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    int v18 = 0;
    do
    {
      uint64_t v19 = *(void *)a3 + v16;
      int v20 = *(_DWORD *)(v19 + 28);
      WordLatticeLC::WordLatticeLC((uint64_t)v24, v19, v18, *(_DWORD *)(v19 + 24) - v18, v20 - *(_DWORD *)(v19 + 24), (uint64_t)v25);
      uint64_t v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(void *)a2 + 112 * v21), (const WordLatticeLC *)v24);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v24);
      ++v17;
      v16 += 32;
      int v18 = v20;
    }
    while (v17 < *(unsigned int *)(a3 + 8));
  }
  uint64_t v22 = *(void *)(a1 + 160) + 32 * v15;
  return (*(_DWORD *)(v22 + 12) + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_213E7314C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int64x2_t FstSearchBackoff::advanceDeltas(FstSearchBackoff *this, int a2, int a3, SearchStats *a4, int a5)
{
  int v8 = a2;
  v105[0] = a2;
  int64x2_t v103 = 0u;
  int64x2_t v104 = 0u;
  SnapTime::recordTime((SnapTime *)&v103, 1, 0, 0, 0);
  *((_DWORD *)this + 58) = a3;
  int v86 = *((_DWORD *)this + 2);
  uint64_t v83 = (int *)((char *)this + 232);
  unint64_t v10 = *((unsigned int *)this + 50);
  if (v10)
  {
    unint64_t v87 = 0;
    unint64_t v11 = 0;
    uint64_t v82 = (char *)this + 208;
    do
    {
      uint64_t v12 = *((void *)this + 24);
      uint64_t v13 = *((void *)this + 5);
      uint64_t v14 = 20 * v11 + 8;
      while (1)
      {
        uint64_t v15 = *(unsigned int *)(v12 + v14 - 4);
        if (*(_DWORD *)(v13 + 160) != v15) {
          break;
        }
        ++v11;
        v14 += 20;
        if (v11 >= v10) {
          goto LABEL_47;
        }
      }
      int v81 = v8;
      uint64_t v80 = a4;
      int v79 = a5;
      if (*(_DWORD *)(v13 + 140) > (int)v15)
      {
        int v16 = *((_DWORD *)this + 19) + *((_DWORD *)this + 58) >= 5000
            ? 5000
            : *((_DWORD *)this + 19) + *((_DWORD *)this + 58);
        int ScoreAllowBackoff_updateNodeInSequence = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(v12 + v14 + 4), *(_DWORD *)(v12 + v14 - 8), v16);
        int v18 = *((_DWORD *)this + 58);
        if (ScoreAllowBackoff_updateNodeInSequence - v86 <= v18)
        {
          int v19 = ScoreAllowBackoff_updateNodeInSequence;
          if (v18 > ScoreAllowBackoff_updateNodeInSequence) {
            *uint64_t v83 = ScoreAllowBackoff_updateNodeInSequence;
          }
          uint64_t v20 = *((void *)this + 24) + v14;
          uint64_t v21 = *(void *)(v20 - 4);
          __int16 v22 = *(_WORD *)(v20 + 4);
          __int16 v23 = *(_WORD *)(v20 + 6);
          int v24 = *(_DWORD *)(v20 + 8);
          uint64_t v25 = *((unsigned int *)this + 54);
          if (v25 == *((_DWORD *)this + 55))
          {
            DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts((uint64_t)v82, 1, 1);
            LODWORD(v25) = *((_DWORD *)this + 54);
          }
          uint64_t v26 = *((void *)this + 26) + 20 * v25;
          *(_DWORD *)uint64_t v26 = v19;
          *(void *)(v26 + 4) = v21;
          *(_WORD *)(v26 + 12) = v22;
          *(_WORD *)(v26 + 14) = v23;
          *(_DWORD *)(v26 + 16) = v24;
          int v27 = *((_DWORD *)this + 54);
          *((_DWORD *)this + 54) = v27 + 1;
          unsigned int v28 = v87;
          if (HIDWORD(v87) == 2 * *((_DWORD *)this + 4)) {
            unsigned int v28 = v27 + 1;
          }
          unint64_t v87 = __PAIR64__(HIDWORD(v87), v28) + 0x100000000;
        }
      }
      unsigned int v29 = v15;
      int v30 = v86;
      do
      {
        uint64_t v31 = *((void *)this + 5);
        uint64_t v32 = *(void *)(v31 + 152);
        unsigned int v33 = *(_DWORD *)(v32 + 4 * v29);
        int v34 = *(_DWORD *)(v32 + 4 * (v29 + 1));
        int v35 = *(_DWORD *)(v31 + 140);
        if (v35 <= v34)
        {
          if (v35 <= (int)v15 && *((unsigned char *)this + 356) != 0)
          {
            unsigned int v50 = (v33 & 0xFFFFF) <= 0xFFFF3 ? v33 & 0xFFFFF : v33 & 0xFFFFF | 0xF00000;
            if (v50 != 16777210)
            {
              DgnString::DgnString((DgnString *)&v100);
              ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v50, (DgnString *)&v100, v51, v52, v53, v54, v55);
              uint64_t v60 = &unk_214099300;
              if (v100.i32[2]) {
                uint64_t v60 = (void *)v100.i64[0];
              }
              xprintf("Seed from state %d score %d trace %d, %s\n", v56, v57, v58, v59, v15, *(unsigned int *)(*((void *)this + 24) + v14 - 8), *(unsigned int *)(*((void *)this + 24) + v14), v60);
              MiniFst::seed((uint64_t)this + 240, *(_DWORD *)(*((void *)this + 24) + v14 - 8), 0, *(_DWORD *)(*((void *)this + 24) + v14), v34);
              DgnString::~DgnString((DgnString *)&v100);
            }
          }
        }
        else
        {
          int v36 = (v33 >> 20) & 0x3FF;
          if (*((_DWORD *)this + 19) + *((_DWORD *)this + 58) >= 5000) {
            int v37 = 5000;
          }
          else {
            int v37 = *((_DWORD *)this + 19) + *((_DWORD *)this + 58);
          }
          int v38 = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), (unsigned __int16)*(_DWORD *)(v32 + 4 * v29), *(_DWORD *)(*((void *)this + 24) + v14 - 8) + v36, v37);
          int v39 = *((_DWORD *)this + 58);
          if (v38 - v30 <= v39)
          {
            int v40 = v38;
            if (v39 > v38) {
              *uint64_t v83 = v38;
            }
            uint64_t v41 = *((void *)this + 24) + v14;
            int v42 = *(_DWORD *)v41;
            __int16 v43 = *(_WORD *)(v41 + 6);
            int v44 = *(_DWORD *)(v41 + 8);
            uint64_t v45 = *((unsigned int *)this + 54);
            if (v45 == *((_DWORD *)this + 55))
            {
              int v84 = v42;
              __int16 v85 = v43;
              DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts((uint64_t)v82, 1, 1);
              int v42 = v84;
              __int16 v43 = v85;
              LODWORD(v45) = *((_DWORD *)this + 54);
            }
            uint64_t v46 = *((void *)this + 26) + 20 * v45;
            *(_DWORD *)uint64_t v46 = v40;
            *(_DWORD *)(v46 + 4) = v34;
            *(_DWORD *)(v46 + 8) = v42;
            *(_WORD *)(v46 + 12) = v33;
            *(_WORD *)(v46 + 14) = v43;
            *(_DWORD *)(v46 + 16) = v44 + v36;
            int v47 = *((_DWORD *)this + 54);
            *((_DWORD *)this + 54) = v47 + 1;
            int v30 = v86;
            unsigned int v48 = v87;
            if (HIDWORD(v87) == 2 * *((_DWORD *)this + 4)) {
              unsigned int v48 = v47 + 1;
            }
            unint64_t v87 = __PAIR64__(HIDWORD(v87), v48) + 0x100000000;
          }
        }
        v29 += 2;
      }
      while ((v33 & 0x80000000) == 0);
      unint64_t v11 = (v11 + 1);
      unint64_t v10 = *((unsigned int *)this + 50);
      int v8 = v81;
      a4 = v80;
      a5 = v79;
    }
    while (v11 < v10);
  }
  else
  {
    unint64_t v87 = 0;
  }
LABEL_47:
  int v102 = *((_DWORD *)this + 58) + v86;
  if (*((unsigned char *)this + 356)) {
    MiniFst::updateFrame((char *)this + 240, v83, v86, v8);
  }
  int64x2_t v100 = 0u;
  int64x2_t v101 = 0u;
  SnapTime::recordTime((SnapTime *)&v100, 1, 0, 0, 0);
  int64x2_t v100 = vsubq_s64(v100, v103);
  int64x2_t v101 = vsubq_s64(v101, v104);
  uint64_t v61 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v62 = vaddq_s64(v61[1], v101);
  *uint64_t v61 = vaddq_s64(*v61, v100);
  v61[1] = v62;
  int64x2_t v98 = 0u;
  int64x2_t v99 = 0u;
  SnapTime::recordTime((SnapTime *)&v98, 1, 0, 0, 0);
  if (HIDWORD(v87) > 2 * *((_DWORD *)this + 4)) {
    FstSearchHashBackoff::applyCutoffOnEmitting((uint64_t)this, v87, &v102);
  }
  int64x2_t v96 = 0u;
  int64x2_t v97 = 0u;
  SnapTime::recordTime((SnapTime *)&v96, 1, 0, 0, 0);
  int64x2_t v63 = vsubq_s64(v96, v98);
  unsigned int v64 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v65 = v64[3];
  int64x2_t v66 = vaddq_s64(v64[2], v63);
  int64x2_t v96 = v63;
  int64x2_t v97 = vsubq_s64(v97, v99);
  int64x2_t v67 = vaddq_s64(v65, v97);
  v64[2] = v66;
  v64[3] = v67;
  int64x2_t v94 = 0u;
  int64x2_t v95 = 0u;
  SnapTime::recordTime((SnapTime *)&v94, 1, 0, 0, 0);
  FstSearchBackoff::makeViterbiDecisionOnEmitting((uint64_t)this);
  unint64_t v68 = *((unsigned int *)this + 6);
  if (v68)
  {
    unint64_t v69 = *((unsigned int *)this + 50);
    if (v68 < v69) {
      mrec_nth_element<FstSearchHashBackoffcmpTok>(*((void *)this + 24), v68, v69);
    }
  }
  int64x2_t v92 = 0u;
  int64x2_t v93 = 0u;
  SnapTime::recordTime((SnapTime *)&v92, 1, 0, 0, 0);
  int64x2_t v70 = vsubq_s64(v92, v94);
  int64x2_t v71 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v72 = v71[5];
  int64x2_t v73 = vaddq_s64(v71[4], v70);
  int64x2_t v92 = v70;
  int64x2_t v93 = vsubq_s64(v93, v95);
  int64x2_t v74 = vaddq_s64(v72, v93);
  v71[4] = v73;
  v71[5] = v74;
  int64x2_t v90 = 0u;
  int64x2_t v91 = 0u;
  SnapTime::recordTime((SnapTime *)&v90, 1, 0, 0, 0);
  *((_DWORD *)this + 54) = 0;
  uint64_t v75 = *((unsigned int *)this + 50);
  *((_DWORD *)this + 38) = v75;
  if (a4)
  {
    *((void *)a4 + 2) += v75;
    if (*((_DWORD *)a4 + 2) > v75) {
      LODWORD(v75) = *((_DWORD *)a4 + 2);
    }
    *((_DWORD *)a4 + 2) = v75;
  }
  if (*((unsigned char *)this + 356)) {
    FstSearchBackoff::seedFromMiniFst((uint64_t)this, v105);
  }
  if (a5) {
    FstSearchHashBackoff::propagateNulls((uint64_t)this, v102, v8, a4);
  }
  *((_DWORD *)this + 56) = v8;
  int64x2_t v88 = 0u;
  int64x2_t v89 = 0u;
  SnapTime::recordTime((SnapTime *)&v88, 1, 0, 0, 0);
  uint64_t v76 = (int64x2_t *)*((void *)this + 13);
  int64x2_t result = vaddq_s64(v76[6], vsubq_s64(v88, v90));
  int64x2_t v78 = vaddq_s64(v76[7], vsubq_s64(v89, v91));
  v76[6] = result;
  v76[7] = v78;
  return result;
}

void sub_213E73784(_Unwind_Exception *exception_object)
{
}

uint64_t FstSearchBackoff::makeViterbiDecisionOnEmitting(uint64_t this)
{
  uint64_t v1 = this;
  unint64_t v2 = *(unsigned int *)(this + 216);
  if (v2)
  {
    this = (uint64_t)mrec_qsort_r<FstSearchLateLatticeHashBackoffActiveToken>(*(char **)(this + 208), v2, 20);
    unint64_t v3 = *(unsigned int *)(v1 + 216);
    *(_DWORD *)(v1 + 200) = 0;
    if (v3)
    {
      uint64_t v4 = 0;
      unsigned int v5 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v7 = *(void *)(v1 + 208);
        if (!v4 || *(_DWORD *)(v7 + v4 + 4) != *(_DWORD *)(v7 + v4 - 16))
        {
          if (v5 == *(_DWORD *)(v1 + 204))
          {
            this = DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts(v1 + 192, 1, 1);
            unsigned int v5 = *(_DWORD *)(v1 + 200);
          }
          uint64_t v8 = *(void *)(v1 + 192) + 20 * v5;
          long long v9 = *(_OWORD *)(v7 + v4);
          *(_DWORD *)(v8 + 16) = *(_DWORD *)(v7 + v4 + 16);
          *(_OWORD *)uint64_t v8 = v9;
          unsigned int v5 = *(_DWORD *)(v1 + 200) + 1;
          *(_DWORD *)(v1 + 200) = v5;
          unint64_t v3 = *(unsigned int *)(v1 + 216);
        }
        v4 += 20;
      }
    }
  }
  else
  {
    *(_DWORD *)(this + 200) = 0;
  }
  return this;
}

uint64_t FstSearchBackoff::seedFromMiniFst(uint64_t this, int *a2)
{
  if (*(unsigned char *)(this + 356))
  {
    uint64_t v2 = this;
    unsigned int v3 = *(_DWORD *)(this + 264);
    if (v3 >= *(_DWORD *)(this + 20)) {
      unsigned int v3 = *(_DWORD *)(this + 20);
    }
    if (v3)
    {
      uint64_t v5 = 0;
      unsigned int v6 = 0;
      uint64_t v7 = (void *)(this + 160);
      uint64_t v21 = this + 192;
      do
      {
        uint64_t v8 = (int *)(*(void *)(v2 + 256) + v5);
        int v9 = *v8;
        int v11 = v8[6];
        int v10 = v8[7];
        int v12 = v8[2];
        v22[0] = 0;
        v22[1] = 0;
        if ((v12 & 0x80000000) == 0)
        {
          while (1)
            ;
        }
        unsigned int v13 = -2 - v12;
        if (v10 == 16777213)
        {
          int v10 = 16777209;
          if (*(_DWORD *)(*v7 + 24 * v13) == 16777209) {
            unsigned int v13 = *(_DWORD *)(*(void *)(v2 + 176) + 12 * *(unsigned int *)(*v7 + 24 * v13 + 8) + 8);
          }
        }
        int v14 = *a2;
        uint64_t v15 = *(unsigned int *)(v2 + 168);
        if (v15 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<CWIDAC>::reallocElts(v2 + 160, 1, 1);
          LODWORD(v15) = *(_DWORD *)(v2 + 168);
        }
        int v16 = (int *)(*(void *)(v2 + 160) + 24 * v15);
        *int v16 = v10;
        v16[1] = v14;
        v16[2] = -1;
        v16[3] = v9;
        v16[4] = v13;
        v16[5] = 0;
        int v17 = *(_DWORD *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v17 + 1;
        uint64_t v18 = *(unsigned int *)(v2 + 200);
        if (v18 == *(_DWORD *)(v2 + 204))
        {
          DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts(v21, 1, 1);
          LODWORD(v18) = *(_DWORD *)(v2 + 200);
        }
        uint64_t v19 = *(void *)(v2 + 192) + 20 * v18;
        *(_DWORD *)uint64_t v19 = v9;
        *(_DWORD *)(v19 + 4) = v11;
        *(_DWORD *)(v19 + 8) = v17;
        *(_WORD *)(v19 + 12) = -2;
        *(_DWORD *)(v19 + 16) = 0;
        ++*(_DWORD *)(v2 + 200);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v22);
        ++v6;
        unsigned int v20 = *(_DWORD *)(v2 + 264);
        if (v20 >= *(_DWORD *)(v2 + 20)) {
          unsigned int v20 = *(_DWORD *)(v2 + 20);
        }
        v5 += 36;
      }
      while (v6 < v20);
    }
  }
  return this;
}

void sub_213E73A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchBackoff::collectTraces(FstSearchBackoff *this)
{
  unint64_t v2 = *((unsigned int *)this + 42);
  int v36 = 0;
  int v35 = 0;
  if (v2)
  {
    unsigned int v3 = MemChunkAlloc(4 * v2, 0);
    unint64_t v4 = 0;
    int v35 = v3;
    int v36 = v2;
    do
      *((_DWORD *)v3 + v4++) = 0;
    while (v4 < v2);
  }
  else
  {
    unsigned int v3 = 0;
  }
  unint64_t v5 = *((unsigned int *)this + 50);
  if (v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = (unsigned int *)(*((void *)this + 24) + 8);
    do
    {
      unsigned int v9 = *v7;
      v7 += 5;
      uint64_t v8 = v9;
      if (v9 != -1)
      {
        *((_DWORD *)v3 + v8) = 1;
        unint64_t v5 = *((unsigned int *)this + 50);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  int v10 = *((_DWORD *)this + 42);
  if (!v10) {
    goto LABEL_32;
  }
  int v11 = (uint64_t *)((char *)this + 160);
  unsigned int v12 = v10 - 1;
  do
  {
    uint64_t v13 = v12;
    if (*((_DWORD *)v3 + v12))
    {
      uint64_t v14 = *(unsigned int *)(*v11 + 24 * v12 + 16);
      if (v14 != -1) {
        *((_DWORD *)v3 + v14) = 1;
      }
    }
    --v12;
  }
  while (v13);
  unsigned int v15 = *((_DWORD *)this + 42);
  if (v15)
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    unsigned int v18 = 0;
    do
    {
      if (*((_DWORD *)v3 + v17))
      {
        uint64_t v19 = *v11;
        if (v17 != v18)
        {
          unsigned int v20 = (long long *)(v19 + v16);
          uint64_t v21 = v19 + 24 * v18;
          long long v22 = *v20;
          *(void *)(v21 + 16) = *((void *)v20 + 2);
          *(_OWORD *)uint64_t v21 = v22;
          uint64_t v19 = *v11;
        }
        uint64_t v23 = v19 + 24 * v18;
        unsigned int v26 = *(_DWORD *)(v23 + 16);
        int v24 = (_DWORD *)(v23 + 16);
        uint64_t v25 = v26;
        if (v26 != -1) {
          *int v24 = *((_DWORD *)v3 + v25);
        }
        *((_DWORD *)v3 + v17) = v18++;
        unsigned int v15 = *((_DWORD *)this + 42);
      }
      ++v17;
      v16 += 24;
    }
    while (v17 < v15);
    unsigned int v27 = *((_DWORD *)this + 43);
    if (v18 > v27)
    {
      DgnArray<CWIDAC>::reallocElts((uint64_t)this + 160, v18 - v27, 0);
      unsigned int v15 = *((_DWORD *)this + 42);
    }
    if (v15 < v18)
    {
      unint64_t v28 = v18 - (unint64_t)v15;
      unsigned int v29 = (void *)(*v11 + 24 * v15 + 16);
      do
      {
        *((_OWORD *)v29 - 1) = xmmword_2140992B0;
        *unsigned int v29 = 0xFFFFFFFFLL;
        v29 += 3;
        --v28;
      }
      while (v28);
    }
  }
  else
  {
LABEL_32:
    unsigned int v18 = 0;
  }
  *((_DWORD *)this + 42) = v18;
  uint64_t v30 = *((unsigned int *)this + 50);
  if (v30)
  {
    uint64_t v31 = v35;
    uint64_t v32 = (_DWORD *)(*((void *)this + 24) + 8);
    do
    {
      uint64_t v33 = *v32;
      if (v33 != -1) {
        *uint64_t v32 = *((_DWORD *)v31 + v33);
      }
      v32 += 5;
      --v30;
    }
    while (v30);
  }
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v35);
}

void sub_213E73C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int64x2_t FstSearchBackoff::vite(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  FstSearchBackoff::advanceDeltas((FstSearchBackoff *)this, a2, a3, a4, a5);
  int64x2_t v13 = 0u;
  int64x2_t v14 = 0u;
  SnapTime::recordTime((SnapTime *)&v13, 1, 0, 0, 0);
  if (a2 >= 1)
  {
    unsigned int v7 = *((_DWORD *)this + 18);
    if (v7)
    {
      if (!(a2 % v7)) {
        FstSearchBackoff::collectTraces((FstSearchBackoff *)this);
      }
    }
  }
  int64x2_t v11 = 0u;
  int64x2_t v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  uint64_t v8 = this[13];
  int64x2_t result = vaddq_s64(v8[14], vsubq_s64(v11, v13));
  int64x2_t v10 = vaddq_s64(v8[15], vsubq_s64(v12, v14));
  v8[14] = result;
  v8[15] = v10;
  return result;
}

_DWORD *FstSearchBackoff::reset(_DWORD *this)
{
  this[42] = 0;
  this[46] = 0;
  this[50] = 0;
  return this;
}

double FstSearchBackoff::doFrame(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  if (a3 >= 20000) {
    a3 = 20000;
  }
  *(void *)&double result = FstSearchBackoff::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearchBackoff::beginTopRecPassSyncRecog(FstSearchBackoff *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 240, a3, *((PelScoreCache **)this + 4));
    uint64_t result = ArcGraph::findBackoffState(*((void *)this + 5));
    *((_DWORD *)this + 88) = result;
    *((unsigned char *)this + 356) = 1;
  }
  return result;
}

uint64_t FstSearchBackoff::endTopRecPassSyncRecog(int64x2_t **this)
{
  int64x2_t v10 = 0u;
  int64x2_t v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  FstSearchHashBackoff::generateTraceTokensFromTraces((FstSearchHashBackoff *)this);
  int64x2_t v8 = 0u;
  int64x2_t v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  int64x2_t v2 = vsubq_s64(v8, v10);
  unsigned int v3 = this[13];
  int64x2_t v4 = v3[13];
  int64x2_t v5 = vaddq_s64(v3[12], v2);
  int64x2_t v8 = v2;
  int64x2_t v9 = vsubq_s64(v9, v11);
  int64x2_t v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + 58) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

void FstSearchBackoff::printSize(FstSearchBackoff *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v116);
  if (v117) {
    uint64_t v16 = v116;
  }
  else {
    uint64_t v16 = &unk_214099300;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_214099300, a3, &unk_214099300, v16);
  DgnString::~DgnString((DgnString *)&v116);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_214099300);
  uint64_t v21 = (a3 + 1);
  uint64_t v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v116);
  if (v117) {
    unsigned int v27 = v116;
  }
  else {
    unsigned int v27 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v116);
  if (v117) {
    uint64_t v32 = v116;
  }
  else {
    uint64_t v32 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v116);
  if (v117) {
    int v37 = v116;
  }
  else {
    int v37 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v37, 4, 4, 0);
  uint64_t v111 = a2;
  uint64_t v112 = a6;
  uint64_t v113 = a3;
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v116);
  if (v117) {
    int v42 = v116;
  }
  else {
    int v42 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v42, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  uint64_t v43 = 16;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v43 = 12;
  }
  uint64_t v44 = *((unsigned int *)this + 42);
  uint64_t v45 = 24 * v44;
  if ((int)v44 <= 0) {
    uint64_t v45 = 0;
  }
  uint64_t v46 = v45 + v43;
  uint64_t v47 = v45 + v43 + 24 * (*((_DWORD *)this + 43) - v44);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v116);
  if (v117) {
    uint64_t v52 = v116;
  }
  else {
    uint64_t v52 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, v21, &unk_214099300, v22, v22, v52, v47, v46, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v47;
  *a5 += v46;
  uint64_t v53 = 16;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v53 = 12;
  }
  uint64_t v54 = *((unsigned int *)this + 46);
  uint64_t v55 = 12 * v54;
  if ((int)v54 <= 0) {
    uint64_t v55 = 0;
  }
  uint64_t v56 = v55 + v53;
  uint64_t v57 = v55 + v53 + 12 * (*((_DWORD *)this + 47) - v54);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v116);
  if (v117) {
    int64x2_t v62 = v116;
  }
  else {
    int64x2_t v62 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, v21, &unk_214099300, v22, v22, v62, v57, v56, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v57;
  *a5 += v56;
  uint64_t v63 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v63 = 16;
  }
  uint64_t v64 = *((unsigned int *)this + 50);
  uint64_t v65 = 18 * v64;
  if ((int)v64 <= 0) {
    uint64_t v65 = 0;
  }
  uint64_t v66 = v65 + v63;
  uint64_t v67 = v65 + v63 + 18 * (*((_DWORD *)this + 51) - v64);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v116);
  if (v117) {
    int64x2_t v72 = v116;
  }
  else {
    int64x2_t v72 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, v21, &unk_214099300, v22, v22, v72, v67, v66, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v67;
  *a5 += v66;
  uint64_t v73 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v73 = 16;
  }
  uint64_t v74 = *((unsigned int *)this + 54);
  uint64_t v75 = 18 * v74;
  if ((int)v74 <= 0) {
    uint64_t v75 = 0;
  }
  uint64_t v76 = v75 + v73;
  uint64_t v77 = v75 + v73 + 18 * (*((_DWORD *)this + 55) - v74);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v116);
  if (v117) {
    uint64_t v82 = v116;
  }
  else {
    uint64_t v82 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, v21, &unk_214099300, v22, v22, v82, v77, v76, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v77;
  *a5 += v76;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v116);
  if (v117) {
    unint64_t v87 = v116;
  }
  else {
    unint64_t v87 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v83, v84, v85, v86, v21, &unk_214099300, v22, v22, v87, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v116);
  if (v117) {
    int64x2_t v92 = v116;
  }
  else {
    int64x2_t v92 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, v21, &unk_214099300, v22, v22, v92, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v116);
  if (v117) {
    int64x2_t v97 = v116;
  }
  else {
    int64x2_t v97 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v93, v94, v95, v96, v21, &unk_214099300, v22, v22, v97, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  uint64_t v98 = sizeObject((uint64_t)this + 240, 0);
  uint64_t v99 = sizeObject((uint64_t)this + 240, 1);
  uint64_t v100 = sizeObject((uint64_t)this + 240, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v116);
  if (v117) {
    uint64_t v105 = v116;
  }
  else {
    uint64_t v105 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v101, v102, v103, v104, v21, &unk_214099300, v22, v22, v105, v98, v99, v100);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v98;
  *a5 += v99;
  *v112 += v100;
  unint64_t v114 = 0;
  unint64_t v115 = 0;
  SearchItf::printSize(this, v111, v21, &v115, &v114, &v114);
  *a4 += v115;
  *a5 += v114;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v116);
  if (v117) {
    uint64_t v110 = v116;
  }
  else {
    uint64_t v110 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v106, v107, v108, v109, v113, &unk_214099300, (35 - v113), (35 - v113), v110, *a4, *a5, *v112);
  DgnString::~DgnString((DgnString *)&v116);
}

void sub_213E745BC(_Unwind_Exception *a1)
{
  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

BOOL FstSearchBackoff::findBestPath(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8 = *(unsigned int *)(a1 + 168);
  if (v8) {
    BOOL v9 = *(_DWORD *)(a3 + 8) == 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    *(void *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v8;
  }
  if (v8) {
    BOOL v10 = *(_DWORD *)(a2 + 8) == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    *(void *)a2 = MemChunkAlloc(v8, 0);
    *(_DWORD *)(a2 + 8) = v8;
LABEL_14:
    uint64_t v11 = 0;
    do
    {
      *(unsigned char *)(*(void *)a2 + v11) = 0;
      *(unsigned char *)(*(void *)a3 + v11++) = 0;
    }
    while (v8 != v11);
    goto LABEL_16;
  }
  if (v8) {
    goto LABEL_14;
  }
LABEL_16:
  unsigned int BestTrace = FstSearchHashBackoff::getBestTrace(a1, (void *)a2, (void *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1) {
    return 0;
  }
  uint64_t v13 = *(void *)(a1 + 160) + 24 * BestTrace;
  LODWORD(v13) = *(_DWORD *)(v13 + 12) + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v13 + 4));
  *a4 = v13;
  return v13 != 1879048192;
}

uint64_t FstSearchBackoff::buildWordLattice(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4, char a5)
{
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  int v29 = 0;
  uint64_t v26 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v25, *(unsigned int *)(a1 + 168));
  BOOL v9 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v9, 0, 128);
  v9[4] = (uint64_t)a2;
  FstSearchHashBackoff::createLatticeNodes(a1, (uint64_t)&v28, (uint64_t)&v26, (uint64_t)a2, v25, a3, a4);
  uint64_t v23 = (uint64_t)v9;
  uint64_t v11 = *(unsigned int *)(a1 + 168);
  if (v11)
  {
    uint64_t v12 = 0;
    int v13 = v27;
    do
    {
      if (*(unsigned char *)(*a3 + v12))
      {
        uint64_t v14 = *(void *)(a1 + 160);
        if (*(_DWORD *)(v14 + 24 * v12) != 16777209)
        {
          uint64_t v15 = *(void *)(a1 + 176) + 12 * *(unsigned int *)(v14 + 24 * v12 + 8);
          uint64_t v16 = *(unsigned int *)(v15 + 8);
          if (v16 == -1) {
            unsigned int v17 = 0;
          }
          else {
            unsigned int v17 = v13 - *(_DWORD *)(v28 + 4 * v16);
          }
          uint64_t v18 = *(unsigned int *)(v26 + 4 * v17);
          if (*(unsigned char *)(*a4 + v12)) {
            FstSearchBackoff::createLatticeLink(a1, v12, (int *)v15, 0xFFFFFFFFLL, v18, (const WordLatticeLC *)*(unsigned int *)(v26 + 4 * (v13 - *(_DWORD *)(v28 + 4 * v12))), a2, v10, a5);
          }
          uint64_t v19 = v25[0];
          if (*(_DWORD *)(v25[0] + 16 * v12 + 8))
          {
            unint64_t v20 = 0;
            do
            {
              uint64_t v21 = *(unsigned int *)(*(void *)(v19 + 16 * v12) + 4 * v20);
              FstSearchBackoff::createLatticeLink(a1, v12, (int *)v15, v21, v18, (const WordLatticeLC *)*(unsigned int *)(v26 + 4 * (v13 - *(_DWORD *)(v28 + 4 * v21))), a2, v10, a5);
              ++v20;
              uint64_t v19 = v25[0];
            }
            while (v20 < *(unsigned int *)(v25[0] + 16 * v12 + 8));
          }
        }
      }
      ++v12;
    }
    while (v12 != v11);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>(v23);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v25);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v26);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v28);
}

void sub_213E74914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearchBackoff::createLatticeLink(uint64_t a1, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, const WordLatticeLC *a6, uint64_t *a7, uint64_t a8, char a9)
{
  unsigned int v11 = a5;
  unsigned int v12 = a4;
  uint64_t v16 = *(void *)(a1 + 160);
  if ((a4 & 0x80000000) != 0)
  {
    unsigned int v17 = 0;
  }
  else if (*(_DWORD *)(*(void *)(a1 + 176) + 12 * *(unsigned int *)(v16 + 24 * a4 + 8) + 8) == a2)
  {
    unsigned int v17 = (_DWORD *)(*(void *)(a1 + 176) + 12 * *(unsigned int *)(v16 + 24 * a4 + 8));
  }
  else
  {
    unsigned int v17 = 0;
  }
  ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *(_DWORD *)(v16 + 24 * a2), (uint64_t)a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8, (uint64_t)v41);
  int v18 = a3[1];
  if (v17)
  {
    v18 += v17[1];
    int v19 = *v17 + *a3;
  }
  else
  {
    int v19 = *a3;
  }
  if (v41[0] >> 25 == 126)
  {
    int v20 = 0;
    int v21 = v18;
  }
  else
  {
    int v20 = *(_DWORD *)(a1 + 136);
    int v21 = v18 - v20;
  }
  int v22 = v19 - v18;
  if ((v12 & 0x80000000) != 0)
  {
    int v23 = 0;
  }
  else
  {
    int v23 = *(_DWORD *)(a1 + 140);
    v21 -= v23;
  }
  int v35 = v21;
  uint64_t v36 = 0;
  int v37 = v20;
  int v38 = v22;
  int v39 = 0;
  int v40 = v23;
  unsigned int v24 = a3[2];
  uint64_t v25 = *(void *)(a1 + 160);
  if (v24 == -1)
  {
    int v27 = 0;
    if (a9) {
      goto LABEL_21;
    }
  }
  else
  {
    int v26 = *(_DWORD *)(v25 + 24 * v24 + 4);
    if (a9)
    {
      if (v26 >= 1) {
        --v26;
      }
      int v27 = (v26 >> 1) + 1;
LABEL_21:
      int v28 = *(_DWORD *)(v25 + 24 * a2 + 4);
      if (v28 >= 1) {
        --v28;
      }
      int v29 = v28 >> 1;
      int v30 = v29 - v27 + 1;
      if ((v12 & 0x80000000) == 0)
      {
        int v31 = *(_DWORD *)(v25 + 24 * v12 + 4);
        if (v31 >= 1) {
          --v31;
        }
        int v32 = v31 >> 1;
        goto LABEL_30;
      }
LABEL_31:
      int v33 = 0;
      goto LABEL_32;
    }
    int v27 = v26 + 1;
  }
  int v29 = *(_DWORD *)(v25 + 24 * a2 + 4);
  int v30 = v29 - v27 + 1;
  if ((v12 & 0x80000000) != 0) {
    goto LABEL_31;
  }
  int v32 = *(_DWORD *)(v25 + 24 * v12 + 4);
LABEL_30:
  int v33 = v32 - v29;
LABEL_32:
  WordLatticeLC::WordLatticeLC((uint64_t)v34, (uint64_t)v41, v27, v30, v33, (uint64_t)&v35);
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v11, a6, (WordLatticeLC *)v34);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v34);
}

void sub_213E74B44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchBackoff::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(void *)(this + 112) = a2;
  if (*(unsigned char *)(this + 356)) {
    return MiniFst::beginTopFstSyncRecog(this + 240);
  }
  return this;
}

uint64_t FstSearchBackoff::endTopRecSyncRecog(FstSearchBackoff *this)
{
  uint64_t v1 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  return v1;
}

uint64_t FstSearchBackoff::getBestExitScore(FstSearchBackoff *this)
{
  unsigned int v17 = 0;
  uint64_t v18 = 0;
  *((_DWORD *)this + 57) = -1;
  unint64_t v1 = *((unsigned int *)this + 38);
  unint64_t v2 = *((unsigned int *)this + 50);
  if (v1 >= v2) {
    goto LABEL_16;
  }
  int64x2_t v4 = 0;
  unsigned int v5 = 0;
  uint64_t v6 = 20 * v1;
  do
  {
    uint64_t v7 = *((void *)this + 24) + v6;
    if (*(_DWORD *)(*((void *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      unsigned int v8 = *(_DWORD *)(v7 + 8);
      if (v8 != -1 && *(_DWORD *)(*((void *)this + 20) + 24 * v8 + 4) == *((_DWORD *)this + 56))
      {
        if (v5 == HIDWORD(v18))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v17, 1, 1);
          unsigned int v5 = v18;
          int64x2_t v4 = v17;
        }
        v4[v5] = v8;
        unsigned int v5 = v18 + 1;
        LODWORD(v18) = v18 + 1;
        unint64_t v2 = *((unsigned int *)this + 50);
      }
    }
    ++v1;
    v6 += 20;
  }
  while (v1 < v2);
  if (v5)
  {
    uint64_t v9 = *((void *)this + 20);
    uint64_t v10 = v5;
    int v11 = 1879048192;
    do
    {
      unsigned int v13 = *v4++;
      unsigned int v12 = v13;
      int v14 = *(_DWORD *)(v9 + 24 * v13 + 12);
      if (v11 > v14)
      {
        *((_DWORD *)this + 57) = *(_DWORD *)(v9 + 24 * v12 + 16);
        int v11 = v14;
      }
      --v10;
    }
    while (v10);
  }
  else
  {
LABEL_16:
    int v11 = 1879048192;
  }
  if (v11 >= 20000) {
    uint64_t v15 = 20000;
  }
  else {
    uint64_t v15 = v11;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v17);
  return v15;
}

void sub_213E74CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t FstSearchBackoff::getBestScoreMaybeUpdateFstNode(FstSearchBackoff *this, Node *a2)
{
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v2 = *((unsigned int *)this + 50);
  if (v2)
  {
    unsigned int v3 = (int *)*((void *)this + 24);
    __int16 v4 = -1;
    int v5 = 1879048192;
    uint64_t v6 = v3;
    do
    {
      int v8 = *v6;
      v6 += 5;
      int v7 = v8;
      if (v5 > v8)
      {
        __int16 v4 = *((_WORD *)v3 + 6);
        int v5 = v7;
      }
      unsigned int v3 = v6;
      --v2;
    }
    while (v2);
    uint64_t v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000) {
        uint64_t v9 = 20000;
      }
      else {
        uint64_t v9 = v5;
      }
    }
  }
  else
  {
    uint64_t v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

uint64_t FstSearchBackoff::seedTheory(FstSearchBackoff *this, int a2, int a3, int a4, SearchStats *a5)
{
  if (a4 == -2)
  {
    int v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    unsigned int v11 = *((_DWORD *)this + 42);
    if (v11 == *((_DWORD *)this + 43))
    {
      DgnArray<CWIDAC>::reallocElts((uint64_t)this + 160, 1, 1);
      unsigned int v11 = *((_DWORD *)this + 42);
    }
    uint64_t v12 = *((void *)this + 20) + 24 * v11;
    *(_DWORD *)uint64_t v12 = a4;
    *(_DWORD *)(v12 + 4) = a3;
    *(_DWORD *)(v12 + 8) = -1;
    *(_DWORD *)(v12 + 12) = a2;
    *(void *)(v12 + 16) = 0xFFFFFFFFLL;
    int v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  int v13 = *(_DWORD *)(*((void *)this + 5) + 144);
  unsigned int v14 = *((_DWORD *)this + 50);
  if (v14 == *((_DWORD *)this + 51))
  {
    DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts((uint64_t)this + 192, 1, 1);
    unsigned int v14 = *((_DWORD *)this + 50);
  }
  uint64_t v15 = *((void *)this + 24) + 20 * v14;
  *(_DWORD *)uint64_t v15 = a2;
  *(_DWORD *)(v15 + 4) = v13;
  *(_DWORD *)(v15 + 8) = v9;
  *(_WORD *)(v15 + 12) = -2;
  *(_DWORD *)(v15 + 16) = 0;
  LODWORD(v15) = *((_DWORD *)this + 50) + 1;
  *((_DWORD *)this + 50) = v15;
  *((_DWORD *)this + 38) = v15;

  return FstSearchHashBackoff::propagateNulls((uint64_t)this, 20000, a3, a5);
}

uint64_t FstSearchBackoff::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(unsigned int *)(result + 228);
  if (v8 != -1)
  {
    uint64_t v9 = result;
    uint64_t v10 = (unsigned int *)(*(void *)(result + 160) + 24 * v8);
    for (i = v10[4]; i != -1; uint64_t v8 = v16)
    {
      uint64_t v16 = i;
      uint64_t result = *(void *)(v9 + 40);
      if (*v10 == 16777209)
      {
        int v17 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        uint64_t result = ArcGraph::lexToCWID((ArcGraph *)result, *v10, a3, (uint64_t)a4, a5, a6, a7, a8);
        int v17 = result;
      }
      uint64_t v18 = *(unsigned int *)(a2 + 8);
      if (v18 == *(_DWORD *)(a2 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        uint64_t v18 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(void *)a2 + 4 * v18) = v17;
      ++*(_DWORD *)(a2 + 8);
      uint64_t v19 = *(unsigned int *)(a6 + 8);
      if (v19 == *(_DWORD *)(a6 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        uint64_t v19 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(void *)a6 + 4 * v19) = v8;
      ++*(_DWORD *)(a6 + 8);
      uint64_t v20 = *(void *)(v9 + 160);
      int v21 = *(_DWORD *)(v20 + 24 * v8 + 4);
      uint64_t v22 = *(unsigned int *)(a3 + 8);
      if (v22 == *(_DWORD *)(a3 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        uint64_t v22 = *(unsigned int *)(a3 + 8);
        uint64_t v20 = *(void *)(v9 + 160);
      }
      *(_DWORD *)(*(void *)a3 + 4 * v22) = v21;
      ++*(_DWORD *)(a3 + 8);
      int v23 = *(_DWORD *)(v20 + 24 * v8 + 12);
      uint64_t v24 = *(unsigned int *)(a5 + 8);
      if (v24 == *(_DWORD *)(a5 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        uint64_t v24 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(void *)a5 + 4 * v24) = v23;
      ++*(_DWORD *)(a5 + 8);
      uint64_t v10 = (unsigned int *)(*(void *)(v9 + 160) + 24 * v16);
      uint64_t i = v10[4];
    }
    *a4 = *v10;
  }
  return result;
}

void FstSearchBackoff::checkSearchParametersValidityForArcGraph(FstSearchBackoff *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *((void *)this + 5);
  if (*(unsigned char *)(v8 + 178))
  {
    int v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(unsigned char *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    }
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    }
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(void *)(**(void **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((void *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if (a2)
      {
        if (!*(unsigned char *)(v8 + 203)) {
          return;
        }
      }
      else if (*(unsigned char *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(unsigned char *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

uint64_t FstSearchBackoff::makePartialResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    uint64_t v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(void *)a2 + v9))(*(void *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  unsigned int BestTrace = FstSearchHashBackoff::getBestTrace(a1, 0, 0, 1);
  if (BestTrace == -1) {
    return 1879048192;
  }
  unsigned int v15 = BestTrace;
  FstSearchHashBackoff::getHistory(a1, BestTrace, a3, a4, v11, v12, v13, v14);
  memset(v25, 0, sizeof(v25));
  int v26 = 0;
  if (*(_DWORD *)(a3 + 8))
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    int v18 = 0;
    do
    {
      uint64_t v19 = *(void *)a3 + v16;
      int v20 = *(_DWORD *)(v19 + 28);
      WordLatticeLC::WordLatticeLC((uint64_t)v24, v19, v18, *(_DWORD *)(v19 + 24) - v18, v20 - *(_DWORD *)(v19 + 24), (uint64_t)v25);
      uint64_t v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(void *)a2 + 112 * v21), (const WordLatticeLC *)v24);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v24);
      ++v17;
      v16 += 32;
      int v18 = v20;
    }
    while (v17 < *(unsigned int *)(a3 + 8));
  }
  uint64_t v22 = *(void *)(a1 + 160) + 24 * v15;
  return (*(_DWORD *)(v22 + 12) + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_213E753B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int64x2_t FstSearch::advanceDeltas(FstSearch *this, int a2, int a3, SearchStats *a4, int a5)
{
  int v7 = a2;
  v105[0] = a2;
  int64x2_t v103 = 0u;
  int64x2_t v104 = 0u;
  SnapTime::recordTime((SnapTime *)&v103, 1, 0, 0, 0);
  *((_DWORD *)this + 58) = a3;
  int v87 = *((_DWORD *)this + 2);
  uint64_t v83 = (int *)((char *)this + 232);
  unint64_t v9 = *((unsigned int *)this + 50);
  if (v9)
  {
    uint64_t v10 = 0;
    unsigned int v86 = 0;
    unint64_t v11 = 0;
    uint64_t v81 = (FstSearch *)((char *)this + 240);
    uint64_t v82 = (char *)this + 208;
    do
    {
      uint64_t v12 = *((void *)this + 24);
      uint64_t v13 = *((void *)this + 5);
      uint64_t v14 = 20 * v11 + 8;
      while (1)
      {
        uint64_t v15 = *(unsigned int *)(v12 + v14 - 4);
        if (*(_DWORD *)(v13 + 160) != v15) {
          break;
        }
        ++v11;
        v14 += 20;
        if (v11 >= v9) {
          goto LABEL_44;
        }
      }
      int v78 = v7;
      uint64_t v77 = a4;
      if (*(_DWORD *)(v13 + 140) > (int)v15)
      {
        uint64_t v16 = v10;
        int v17 = *(_DWORD *)(v12 + v14 - 8);
        int v18 = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(v12 + v14 + 4))
            + v17;
        int v19 = *((_DWORD *)this + 58);
        if (v18 - v87 <= v19)
        {
          if (v19 > v18) {
            *uint64_t v83 = v18;
          }
          uint64_t v20 = *((void *)this + 24) + v14;
          uint64_t v21 = *(void *)(v20 - 4);
          __int16 v22 = *(_WORD *)(v20 + 4);
          __int16 v23 = *(_WORD *)(v20 + 6);
          int v24 = *(_DWORD *)(v20 + 8);
          uint64_t v25 = *((unsigned int *)this + 54);
          if (v25 == *((_DWORD *)this + 55))
          {
            DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts((uint64_t)v82, 1, 1);
            LODWORD(v25) = *((_DWORD *)this + 54);
          }
          uint64_t v26 = *((void *)this + 26) + 20 * v25;
          *(_DWORD *)uint64_t v26 = v18;
          *(void *)(v26 + 4) = v21;
          *(_WORD *)(v26 + 12) = v22;
          *(_WORD *)(v26 + 14) = v23;
          *(_DWORD *)(v26 + 16) = v24;
          int v27 = *((_DWORD *)this + 54);
          *((_DWORD *)this + 54) = v27 + 1;
          if (v86 == 2 * *((_DWORD *)this + 4)) {
            uint64_t v10 = (v27 + 1);
          }
          else {
            uint64_t v10 = v16;
          }
          ++v86;
        }
        else
        {
          uint64_t v10 = v16;
        }
      }
      unsigned int v28 = v15;
      uint64_t v80 = this;
      do
      {
        uint64_t v29 = *((void *)this + 5);
        uint64_t v30 = *(void *)(v29 + 152);
        unsigned int v31 = *(_DWORD *)(v30 + 4 * v28);
        int v32 = *(_DWORD *)(v30 + 4 * (v28 + 1));
        int v33 = *(_DWORD *)(v29 + 140);
        if (v33 <= v32)
        {
          if (v33 <= (int)v15 && *((unsigned char *)this + 356) != 0)
          {
            unsigned int v48 = (v31 & 0xFFFFF) <= 0xFFFF3 ? v31 & 0xFFFFF : v31 & 0xFFFFF | 0xF00000;
            if (v48 != 16777210)
            {
              DgnString::DgnString((DgnString *)&v100);
              ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v48, (DgnString *)&v100, v49, v50, v51, v52, v53);
              uint64_t v58 = &unk_214099300;
              if (v100.i32[2]) {
                uint64_t v58 = (void *)v100.i64[0];
              }
              xprintf("Seed from state %d score %d trace %d, %s\n", v54, v55, v56, v57, v15, *(unsigned int *)(*((void *)this + 24) + v14 - 8), *(unsigned int *)(*((void *)this + 24) + v14), v58);
              MiniFst::seed((uint64_t)v81, *(_DWORD *)(*((void *)this + 24) + v14 - 8), 0, *(_DWORD *)(*((void *)this + 24) + v14), v32);
              DgnString::~DgnString((DgnString *)&v100);
            }
          }
        }
        else
        {
          int v34 = (v31 >> 20) & 0x3FF;
          int ScoreNoBackoff = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), (unsigned __int16)*(_DWORD *)(v30 + 4 * v28));
          uint64_t v36 = *((void *)this + 24);
          int v37 = ScoreNoBackoff + v34 + *(_DWORD *)(v36 + v14 - 8);
          int v38 = *((_DWORD *)this + 58);
          if (v37 - v87 <= v38)
          {
            unsigned int v85 = v10;
            if (v38 > v37) {
              *uint64_t v83 = v37;
            }
            int v39 = (int *)(v36 + v14);
            int v40 = *v39;
            __int16 v41 = *((_WORD *)v39 + 3);
            int v42 = v39[2];
            uint64_t v43 = *((unsigned int *)this + 54);
            if (v43 == *((_DWORD *)this + 55))
            {
              __int16 v84 = v41;
              int v44 = v40;
              DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts((uint64_t)v82, 1, 1);
              int v40 = v44;
              __int16 v41 = v84;
              this = v80;
              LODWORD(v43) = *((_DWORD *)v80 + 54);
            }
            uint64_t v45 = *((void *)this + 26) + 20 * v43;
            *(_DWORD *)uint64_t v45 = v37;
            *(_DWORD *)(v45 + 4) = v32;
            *(_DWORD *)(v45 + 8) = v40;
            *(_WORD *)(v45 + 12) = v31;
            *(_WORD *)(v45 + 14) = v41;
            *(_DWORD *)(v45 + 16) = v42 + v34;
            int v46 = *((_DWORD *)this + 54);
            *((_DWORD *)this + 54) = v46 + 1;
            if (v86 == 2 * *((_DWORD *)this + 4)) {
              uint64_t v10 = (v46 + 1);
            }
            else {
              uint64_t v10 = v85;
            }
            ++v86;
          }
        }
        v28 += 2;
      }
      while ((v31 & 0x80000000) == 0);
      unint64_t v11 = (v11 + 1);
      unint64_t v9 = *((unsigned int *)this + 50);
      int v7 = v78;
      a4 = v77;
    }
    while (v11 < v9);
  }
  else
  {
    unsigned int v86 = 0;
    LODWORD(v10) = 0;
  }
LABEL_44:
  int v102 = *((_DWORD *)this + 58) + v87;
  if (*((unsigned char *)this + 356)) {
    MiniFst::updateFrame((char *)this + 240, v83, v87, v7);
  }
  int64x2_t v100 = 0u;
  int64x2_t v101 = 0u;
  SnapTime::recordTime((SnapTime *)&v100, 1, 0, 0, 0);
  int64x2_t v100 = vsubq_s64(v100, v103);
  int64x2_t v101 = vsubq_s64(v101, v104);
  uint64_t v59 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v60 = vaddq_s64(v59[1], v101);
  *uint64_t v59 = vaddq_s64(*v59, v100);
  v59[1] = v60;
  int64x2_t v98 = 0u;
  int64x2_t v99 = 0u;
  SnapTime::recordTime((SnapTime *)&v98, 1, 0, 0, 0);
  if (v86 > 2 * *((_DWORD *)this + 4)) {
    FstSearchHashBackoff::applyCutoffOnEmitting((uint64_t)this, v10, &v102);
  }
  int64x2_t v96 = 0u;
  int64x2_t v97 = 0u;
  SnapTime::recordTime((SnapTime *)&v96, 1, 0, 0, 0);
  int64x2_t v61 = vsubq_s64(v96, v98);
  int64x2_t v62 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v63 = v62[3];
  int64x2_t v64 = vaddq_s64(v62[2], v61);
  int64x2_t v96 = v61;
  int64x2_t v97 = vsubq_s64(v97, v99);
  int64x2_t v65 = vaddq_s64(v63, v97);
  v62[2] = v64;
  v62[3] = v65;
  int64x2_t v94 = 0u;
  int64x2_t v95 = 0u;
  SnapTime::recordTime((SnapTime *)&v94, 1, 0, 0, 0);
  FstSearchBackoff::makeViterbiDecisionOnEmitting((uint64_t)this);
  unint64_t v66 = *((unsigned int *)this + 6);
  if (v66)
  {
    unint64_t v67 = *((unsigned int *)this + 50);
    if (v66 < v67) {
      mrec_nth_element<FstSearchHashBackoffcmpTok>(*((void *)this + 24), v66, v67);
    }
  }
  int64x2_t v92 = 0u;
  int64x2_t v93 = 0u;
  SnapTime::recordTime((SnapTime *)&v92, 1, 0, 0, 0);
  int64x2_t v68 = vsubq_s64(v92, v94);
  uint64_t v69 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v70 = v69[5];
  int64x2_t v71 = vaddq_s64(v69[4], v68);
  int64x2_t v92 = v68;
  int64x2_t v93 = vsubq_s64(v93, v95);
  int64x2_t v72 = vaddq_s64(v70, v93);
  v69[4] = v71;
  v69[5] = v72;
  int64x2_t v90 = 0u;
  int64x2_t v91 = 0u;
  SnapTime::recordTime((SnapTime *)&v90, 1, 0, 0, 0);
  *((_DWORD *)this + 54) = 0;
  uint64_t v73 = *((unsigned int *)this + 50);
  *((_DWORD *)this + 38) = v73;
  if (a4)
  {
    *((void *)a4 + 2) += v73;
    if (*((_DWORD *)a4 + 2) > v73) {
      LODWORD(v73) = *((_DWORD *)a4 + 2);
    }
    *((_DWORD *)a4 + 2) = v73;
  }
  if (*((unsigned char *)this + 356)) {
    FstSearch::seedFromMiniFst((uint64_t)this, v105);
  }
  if (a5) {
    FstSearchHashBackoff::propagateNulls((uint64_t)this, v102, v7, a4);
  }
  *((_DWORD *)this + 56) = v7;
  int64x2_t v88 = 0u;
  int64x2_t v89 = 0u;
  SnapTime::recordTime((SnapTime *)&v88, 1, 0, 0, 0);
  uint64_t v74 = (int64x2_t *)*((void *)this + 13);
  int64x2_t result = vaddq_s64(v74[6], vsubq_s64(v88, v90));
  int64x2_t v76 = vaddq_s64(v74[7], vsubq_s64(v89, v91));
  v74[6] = result;
  v74[7] = v76;
  return result;
}

void sub_213E759D8(_Unwind_Exception *exception_object)
{
}

uint64_t FstSearch::seedFromMiniFst(uint64_t this, int *a2)
{
  if (*(unsigned char *)(this + 356))
  {
    uint64_t v2 = this;
    unsigned int v3 = *(_DWORD *)(this + 264);
    if (v3 >= *(_DWORD *)(this + 20)) {
      unsigned int v3 = *(_DWORD *)(this + 20);
    }
    if (v3)
    {
      uint64_t v5 = 0;
      unsigned int v6 = 0;
      int v7 = (void *)(this + 160);
      uint64_t v21 = this + 192;
      do
      {
        int v8 = (int *)(*(void *)(v2 + 256) + v5);
        int v9 = *v8;
        int v11 = v8[6];
        int v10 = v8[7];
        int v12 = v8[2];
        v22[0] = 0;
        v22[1] = 0;
        if ((v12 & 0x80000000) == 0)
        {
          while (1)
            ;
        }
        unsigned int v13 = -2 - v12;
        if (v10 == 16777213)
        {
          int v10 = 16777209;
          if (*(_DWORD *)(*v7 + 24 * v13) == 16777209) {
            unsigned int v13 = *(_DWORD *)(*(void *)(v2 + 176) + 12 * *(unsigned int *)(*v7 + 24 * v13 + 8) + 8);
          }
        }
        int v14 = *a2;
        uint64_t v15 = *(unsigned int *)(v2 + 168);
        if (v15 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<CWIDAC>::reallocElts(v2 + 160, 1, 1);
          LODWORD(v15) = *(_DWORD *)(v2 + 168);
        }
        uint64_t v16 = (int *)(*(void *)(v2 + 160) + 24 * v15);
        *uint64_t v16 = v10;
        v16[1] = v14;
        v16[2] = -1;
        v16[3] = v9;
        v16[4] = v13;
        v16[5] = 0;
        int v17 = *(_DWORD *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v17 + 1;
        uint64_t v18 = *(unsigned int *)(v2 + 200);
        if (v18 == *(_DWORD *)(v2 + 204))
        {
          DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts(v21, 1, 1);
          LODWORD(v18) = *(_DWORD *)(v2 + 200);
        }
        uint64_t v19 = *(void *)(v2 + 192) + 20 * v18;
        *(_DWORD *)uint64_t v19 = v9;
        *(_DWORD *)(v19 + 4) = v11;
        *(_DWORD *)(v19 + 8) = v17;
        *(_WORD *)(v19 + 12) = -2;
        *(_DWORD *)(v19 + 16) = 0;
        ++*(_DWORD *)(v2 + 200);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v22);
        ++v6;
        unsigned int v20 = *(_DWORD *)(v2 + 264);
        if (v20 >= *(_DWORD *)(v2 + 20)) {
          unsigned int v20 = *(_DWORD *)(v2 + 20);
        }
        v5 += 36;
      }
      while (v6 < v20);
    }
  }
  return this;
}

void sub_213E75BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearch::collectTraces(FstSearch *this)
{
  unint64_t v2 = *((unsigned int *)this + 42);
  int v36 = 0;
  int v35 = 0;
  if (v2)
  {
    unsigned int v3 = MemChunkAlloc(4 * v2, 0);
    unint64_t v4 = 0;
    int v35 = v3;
    int v36 = v2;
    do
      *((_DWORD *)v3 + v4++) = 0;
    while (v4 < v2);
  }
  else
  {
    unsigned int v3 = 0;
  }
  unint64_t v5 = *((unsigned int *)this + 50);
  if (v5)
  {
    unint64_t v6 = 0;
    int v7 = (unsigned int *)(*((void *)this + 24) + 8);
    do
    {
      unsigned int v9 = *v7;
      v7 += 5;
      uint64_t v8 = v9;
      if (v9 != -1)
      {
        *((_DWORD *)v3 + v8) = 1;
        unint64_t v5 = *((unsigned int *)this + 50);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  int v10 = *((_DWORD *)this + 42);
  if (!v10) {
    goto LABEL_32;
  }
  int v11 = (uint64_t *)((char *)this + 160);
  unsigned int v12 = v10 - 1;
  do
  {
    uint64_t v13 = v12;
    if (*((_DWORD *)v3 + v12))
    {
      uint64_t v14 = *(unsigned int *)(*v11 + 24 * v12 + 16);
      if (v14 != -1) {
        *((_DWORD *)v3 + v14) = 1;
      }
    }
    --v12;
  }
  while (v13);
  unsigned int v15 = *((_DWORD *)this + 42);
  if (v15)
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    unsigned int v18 = 0;
    do
    {
      if (*((_DWORD *)v3 + v17))
      {
        uint64_t v19 = *v11;
        if (v17 != v18)
        {
          unsigned int v20 = (long long *)(v19 + v16);
          uint64_t v21 = v19 + 24 * v18;
          long long v22 = *v20;
          *(void *)(v21 + 16) = *((void *)v20 + 2);
          *(_OWORD *)uint64_t v21 = v22;
          uint64_t v19 = *v11;
        }
        uint64_t v23 = v19 + 24 * v18;
        unsigned int v26 = *(_DWORD *)(v23 + 16);
        int v24 = (_DWORD *)(v23 + 16);
        uint64_t v25 = v26;
        if (v26 != -1) {
          *int v24 = *((_DWORD *)v3 + v25);
        }
        *((_DWORD *)v3 + v17) = v18++;
        unsigned int v15 = *((_DWORD *)this + 42);
      }
      ++v17;
      v16 += 24;
    }
    while (v17 < v15);
    unsigned int v27 = *((_DWORD *)this + 43);
    if (v18 > v27)
    {
      DgnArray<CWIDAC>::reallocElts((uint64_t)this + 160, v18 - v27, 0);
      unsigned int v15 = *((_DWORD *)this + 42);
    }
    if (v15 < v18)
    {
      unint64_t v28 = v18 - (unint64_t)v15;
      uint64_t v29 = (void *)(*v11 + 24 * v15 + 16);
      do
      {
        *((_OWORD *)v29 - 1) = xmmword_2140992B0;
        *uint64_t v29 = 0xFFFFFFFFLL;
        v29 += 3;
        --v28;
      }
      while (v28);
    }
  }
  else
  {
LABEL_32:
    unsigned int v18 = 0;
  }
  *((_DWORD *)this + 42) = v18;
  uint64_t v30 = *((unsigned int *)this + 50);
  if (v30)
  {
    unsigned int v31 = v35;
    int v32 = (_DWORD *)(*((void *)this + 24) + 8);
    do
    {
      uint64_t v33 = *v32;
      if (v33 != -1) {
        *int v32 = *((_DWORD *)v31 + v33);
      }
      v32 += 5;
      --v30;
    }
    while (v30);
  }
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v35);
}

void sub_213E75DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int64x2_t FstSearch::vite(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  FstSearch::advanceDeltas((FstSearch *)this, a2, a3, a4, a5);
  int64x2_t v13 = 0u;
  int64x2_t v14 = 0u;
  SnapTime::recordTime((SnapTime *)&v13, 1, 0, 0, 0);
  if (a2 >= 1)
  {
    unsigned int v7 = *((_DWORD *)this + 18);
    if (v7)
    {
      if (!(a2 % v7)) {
        FstSearch::collectTraces((FstSearch *)this);
      }
    }
  }
  int64x2_t v11 = 0u;
  int64x2_t v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  uint64_t v8 = this[13];
  int64x2_t result = vaddq_s64(v8[14], vsubq_s64(v11, v13));
  int64x2_t v10 = vaddq_s64(v8[15], vsubq_s64(v12, v14));
  v8[14] = result;
  v8[15] = v10;
  return result;
}

_DWORD *FstSearch::reset(_DWORD *this)
{
  this[42] = 0;
  this[46] = 0;
  this[50] = 0;
  return this;
}

double FstSearch::doFrame(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  if (a3 >= 20000) {
    a3 = 20000;
  }
  *(void *)&double result = FstSearch::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearch::beginTopRecPassSyncRecog(FstSearch *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 240, a3, *((PelScoreCache **)this + 4));
    uint64_t result = ArcGraph::findBackoffState(*((void *)this + 5));
    *((_DWORD *)this + 88) = result;
    *((unsigned char *)this + 356) = 1;
  }
  return result;
}

uint64_t FstSearch::endTopRecPassSyncRecog(int64x2_t **this)
{
  int64x2_t v10 = 0u;
  int64x2_t v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  FstSearchHashBackoff::generateTraceTokensFromTraces((FstSearchHashBackoff *)this);
  int64x2_t v8 = 0u;
  int64x2_t v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  int64x2_t v2 = vsubq_s64(v8, v10);
  unsigned int v3 = this[13];
  int64x2_t v4 = v3[13];
  int64x2_t v5 = vaddq_s64(v3[12], v2);
  int64x2_t v8 = v2;
  int64x2_t v9 = vsubq_s64(v9, v11);
  int64x2_t v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + 58) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

void FstSearch::printSize(FstSearch *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v116);
  if (v117) {
    uint64_t v16 = v116;
  }
  else {
    uint64_t v16 = &unk_214099300;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_214099300, a3, &unk_214099300, v16);
  DgnString::~DgnString((DgnString *)&v116);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_214099300);
  uint64_t v21 = (a3 + 1);
  uint64_t v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v116);
  if (v117) {
    unsigned int v27 = v116;
  }
  else {
    unsigned int v27 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v116);
  if (v117) {
    int v32 = v116;
  }
  else {
    int v32 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v116);
  if (v117) {
    int v37 = v116;
  }
  else {
    int v37 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v37, 4, 4, 0);
  uint64_t v111 = a2;
  uint64_t v112 = a6;
  uint64_t v113 = a3;
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v116);
  if (v117) {
    int v42 = v116;
  }
  else {
    int v42 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v42, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  uint64_t v43 = 16;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v43 = 12;
  }
  uint64_t v44 = *((unsigned int *)this + 42);
  uint64_t v45 = 24 * v44;
  if ((int)v44 <= 0) {
    uint64_t v45 = 0;
  }
  uint64_t v46 = v45 + v43;
  uint64_t v47 = v45 + v43 + 24 * (*((_DWORD *)this + 43) - v44);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v116);
  if (v117) {
    uint64_t v52 = v116;
  }
  else {
    uint64_t v52 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, v21, &unk_214099300, v22, v22, v52, v47, v46, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v47;
  *a5 += v46;
  uint64_t v53 = 16;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v53 = 12;
  }
  uint64_t v54 = *((unsigned int *)this + 46);
  uint64_t v55 = 12 * v54;
  if ((int)v54 <= 0) {
    uint64_t v55 = 0;
  }
  uint64_t v56 = v55 + v53;
  uint64_t v57 = v55 + v53 + 12 * (*((_DWORD *)this + 47) - v54);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v116);
  if (v117) {
    int64x2_t v62 = v116;
  }
  else {
    int64x2_t v62 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, v21, &unk_214099300, v22, v22, v62, v57, v56, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v57;
  *a5 += v56;
  uint64_t v63 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v63 = 16;
  }
  uint64_t v64 = *((unsigned int *)this + 50);
  uint64_t v65 = 18 * v64;
  if ((int)v64 <= 0) {
    uint64_t v65 = 0;
  }
  uint64_t v66 = v65 + v63;
  uint64_t v67 = v65 + v63 + 18 * (*((_DWORD *)this + 51) - v64);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v116);
  if (v117) {
    int64x2_t v72 = v116;
  }
  else {
    int64x2_t v72 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, v21, &unk_214099300, v22, v22, v72, v67, v66, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v67;
  *a5 += v66;
  uint64_t v73 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v73 = 16;
  }
  uint64_t v74 = *((unsigned int *)this + 54);
  uint64_t v75 = 18 * v74;
  if ((int)v74 <= 0) {
    uint64_t v75 = 0;
  }
  uint64_t v76 = v75 + v73;
  uint64_t v77 = v75 + v73 + 18 * (*((_DWORD *)this + 55) - v74);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v116);
  if (v117) {
    uint64_t v82 = v116;
  }
  else {
    uint64_t v82 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, v21, &unk_214099300, v22, v22, v82, v77, v76, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v77;
  *a5 += v76;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v116);
  if (v117) {
    int v87 = v116;
  }
  else {
    int v87 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v83, v84, v85, v86, v21, &unk_214099300, v22, v22, v87, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v116);
  if (v117) {
    int64x2_t v92 = v116;
  }
  else {
    int64x2_t v92 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, v21, &unk_214099300, v22, v22, v92, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v116);
  if (v117) {
    int64x2_t v97 = v116;
  }
  else {
    int64x2_t v97 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v93, v94, v95, v96, v21, &unk_214099300, v22, v22, v97, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  uint64_t v98 = sizeObject((uint64_t)this + 240, 0);
  uint64_t v99 = sizeObject((uint64_t)this + 240, 1);
  uint64_t v100 = sizeObject((uint64_t)this + 240, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v116);
  if (v117) {
    uint64_t v105 = v116;
  }
  else {
    uint64_t v105 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v101, v102, v103, v104, v21, &unk_214099300, v22, v22, v105, v98, v99, v100);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v98;
  *a5 += v99;
  *v112 += v100;
  unint64_t v114 = 0;
  unint64_t v115 = 0;
  SearchItf::printSize(this, v111, v21, &v115, &v114, &v114);
  *a4 += v115;
  *a5 += v114;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v116);
  if (v117) {
    uint64_t v110 = v116;
  }
  else {
    uint64_t v110 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v106, v107, v108, v109, v113, &unk_214099300, (35 - v113), (35 - v113), v110, *a4, *a5, *v112);
  DgnString::~DgnString((DgnString *)&v116);
}

void sub_213E76728(_Unwind_Exception *a1)
{
  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

BOOL FstSearch::findBestPath(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8 = *(unsigned int *)(a1 + 168);
  if (v8) {
    BOOL v9 = *(_DWORD *)(a3 + 8) == 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    *(void *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v8;
  }
  if (v8) {
    BOOL v10 = *(_DWORD *)(a2 + 8) == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    *(void *)a2 = MemChunkAlloc(v8, 0);
    *(_DWORD *)(a2 + 8) = v8;
LABEL_14:
    uint64_t v11 = 0;
    do
    {
      *(unsigned char *)(*(void *)a2 + v11) = 0;
      *(unsigned char *)(*(void *)a3 + v11++) = 0;
    }
    while (v8 != v11);
    goto LABEL_16;
  }
  if (v8) {
    goto LABEL_14;
  }
LABEL_16:
  unsigned int BestTrace = FstSearchHashBackoff::getBestTrace(a1, (void *)a2, (void *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1) {
    return 0;
  }
  uint64_t v13 = *(void *)(a1 + 160) + 24 * BestTrace;
  LODWORD(v13) = *(_DWORD *)(v13 + 12) + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v13 + 4));
  *a4 = v13;
  return v13 != 1879048192;
}

uint64_t FstSearch::buildWordLattice(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4, char a5)
{
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  int v29 = 0;
  uint64_t v26 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v25, *(unsigned int *)(a1 + 168));
  BOOL v9 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v9, 0, 128);
  v9[4] = (uint64_t)a2;
  FstSearchHashBackoff::createLatticeNodes(a1, (uint64_t)&v28, (uint64_t)&v26, (uint64_t)a2, v25, a3, a4);
  uint64_t v23 = (uint64_t)v9;
  uint64_t v11 = *(unsigned int *)(a1 + 168);
  if (v11)
  {
    uint64_t v12 = 0;
    int v13 = v27;
    do
    {
      if (*(unsigned char *)(*a3 + v12))
      {
        uint64_t v14 = *(void *)(a1 + 160);
        if (*(_DWORD *)(v14 + 24 * v12) != 16777209)
        {
          uint64_t v15 = *(void *)(a1 + 176) + 12 * *(unsigned int *)(v14 + 24 * v12 + 8);
          uint64_t v16 = *(unsigned int *)(v15 + 8);
          if (v16 == -1) {
            unsigned int v17 = 0;
          }
          else {
            unsigned int v17 = v13 - *(_DWORD *)(v28 + 4 * v16);
          }
          uint64_t v18 = *(unsigned int *)(v26 + 4 * v17);
          if (*(unsigned char *)(*a4 + v12)) {
            FstSearch::createLatticeLink(a1, v12, (int *)v15, 0xFFFFFFFFLL, v18, (const WordLatticeLC *)*(unsigned int *)(v26 + 4 * (v13 - *(_DWORD *)(v28 + 4 * v12))), a2, v10, a5);
          }
          uint64_t v19 = v25[0];
          if (*(_DWORD *)(v25[0] + 16 * v12 + 8))
          {
            unint64_t v20 = 0;
            do
            {
              uint64_t v21 = *(unsigned int *)(*(void *)(v19 + 16 * v12) + 4 * v20);
              FstSearch::createLatticeLink(a1, v12, (int *)v15, v21, v18, (const WordLatticeLC *)*(unsigned int *)(v26 + 4 * (v13 - *(_DWORD *)(v28 + 4 * v21))), a2, v10, a5);
              ++v20;
              uint64_t v19 = v25[0];
            }
            while (v20 < *(unsigned int *)(v25[0] + 16 * v12 + 8));
          }
        }
      }
      ++v12;
    }
    while (v12 != v11);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>(v23);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v25);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v26);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v28);
}

void sub_213E76A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearch::createLatticeLink(uint64_t a1, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, const WordLatticeLC *a6, uint64_t *a7, uint64_t a8, char a9)
{
  unsigned int v11 = a5;
  unsigned int v12 = a4;
  uint64_t v16 = *(void *)(a1 + 160);
  if ((a4 & 0x80000000) != 0)
  {
    unsigned int v17 = 0;
  }
  else if (*(_DWORD *)(*(void *)(a1 + 176) + 12 * *(unsigned int *)(v16 + 24 * a4 + 8) + 8) == a2)
  {
    unsigned int v17 = (_DWORD *)(*(void *)(a1 + 176) + 12 * *(unsigned int *)(v16 + 24 * a4 + 8));
  }
  else
  {
    unsigned int v17 = 0;
  }
  ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *(_DWORD *)(v16 + 24 * a2), (uint64_t)a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8, (uint64_t)v41);
  int v18 = a3[1];
  if (v17)
  {
    v18 += v17[1];
    int v19 = *v17 + *a3;
  }
  else
  {
    int v19 = *a3;
  }
  if (v41[0] >> 25 == 126)
  {
    int v20 = 0;
    int v21 = v18;
  }
  else
  {
    int v20 = *(_DWORD *)(a1 + 136);
    int v21 = v18 - v20;
  }
  int v22 = v19 - v18;
  if ((v12 & 0x80000000) != 0)
  {
    int v23 = 0;
  }
  else
  {
    int v23 = *(_DWORD *)(a1 + 140);
    v21 -= v23;
  }
  int v35 = v21;
  uint64_t v36 = 0;
  int v37 = v20;
  int v38 = v22;
  int v39 = 0;
  int v40 = v23;
  unsigned int v24 = a3[2];
  uint64_t v25 = *(void *)(a1 + 160);
  if (v24 == -1)
  {
    int v27 = 0;
    if (a9) {
      goto LABEL_21;
    }
  }
  else
  {
    int v26 = *(_DWORD *)(v25 + 24 * v24 + 4);
    if (a9)
    {
      if (v26 >= 1) {
        --v26;
      }
      int v27 = (v26 >> 1) + 1;
LABEL_21:
      int v28 = *(_DWORD *)(v25 + 24 * a2 + 4);
      if (v28 >= 1) {
        --v28;
      }
      int v29 = v28 >> 1;
      int v30 = v29 - v27 + 1;
      if ((v12 & 0x80000000) == 0)
      {
        int v31 = *(_DWORD *)(v25 + 24 * v12 + 4);
        if (v31 >= 1) {
          --v31;
        }
        int v32 = v31 >> 1;
        goto LABEL_30;
      }
LABEL_31:
      int v33 = 0;
      goto LABEL_32;
    }
    int v27 = v26 + 1;
  }
  int v29 = *(_DWORD *)(v25 + 24 * a2 + 4);
  int v30 = v29 - v27 + 1;
  if ((v12 & 0x80000000) != 0) {
    goto LABEL_31;
  }
  int v32 = *(_DWORD *)(v25 + 24 * v12 + 4);
LABEL_30:
  int v33 = v32 - v29;
LABEL_32:
  WordLatticeLC::WordLatticeLC((uint64_t)v34, (uint64_t)v41, v27, v30, v33, (uint64_t)&v35);
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v11, a6, (WordLatticeLC *)v34);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v34);
}

void sub_213E76CB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearch::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(void *)(this + 112) = a2;
  if (*(unsigned char *)(this + 356)) {
    return MiniFst::beginTopFstSyncRecog(this + 240);
  }
  return this;
}

uint64_t FstSearch::endTopRecSyncRecog(FstSearch *this)
{
  uint64_t v1 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  return v1;
}

uint64_t FstSearch::getBestExitScore(FstSearch *this)
{
  unsigned int v17 = 0;
  uint64_t v18 = 0;
  *((_DWORD *)this + 57) = -1;
  unint64_t v1 = *((unsigned int *)this + 38);
  unint64_t v2 = *((unsigned int *)this + 50);
  if (v1 >= v2) {
    goto LABEL_16;
  }
  int64x2_t v4 = 0;
  unsigned int v5 = 0;
  uint64_t v6 = 20 * v1;
  do
  {
    uint64_t v7 = *((void *)this + 24) + v6;
    if (*(_DWORD *)(*((void *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      unsigned int v8 = *(_DWORD *)(v7 + 8);
      if (v8 != -1 && *(_DWORD *)(*((void *)this + 20) + 24 * v8 + 4) == *((_DWORD *)this + 56))
      {
        if (v5 == HIDWORD(v18))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v17, 1, 1);
          unsigned int v5 = v18;
          int64x2_t v4 = v17;
        }
        v4[v5] = v8;
        unsigned int v5 = v18 + 1;
        LODWORD(v18) = v18 + 1;
        unint64_t v2 = *((unsigned int *)this + 50);
      }
    }
    ++v1;
    v6 += 20;
  }
  while (v1 < v2);
  if (v5)
  {
    uint64_t v9 = *((void *)this + 20);
    uint64_t v10 = v5;
    int v11 = 1879048192;
    do
    {
      unsigned int v13 = *v4++;
      unsigned int v12 = v13;
      int v14 = *(_DWORD *)(v9 + 24 * v13 + 12);
      if (v11 > v14)
      {
        *((_DWORD *)this + 57) = *(_DWORD *)(v9 + 24 * v12 + 16);
        int v11 = v14;
      }
      --v10;
    }
    while (v10);
  }
  else
  {
LABEL_16:
    int v11 = 1879048192;
  }
  if (v11 >= 20000) {
    uint64_t v15 = 20000;
  }
  else {
    uint64_t v15 = v11;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v17);
  return v15;
}

void sub_213E76E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t FstSearch::getBestScoreMaybeUpdateFstNode(FstSearch *this, Node *a2)
{
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v2 = *((unsigned int *)this + 50);
  if (v2)
  {
    unsigned int v3 = (int *)*((void *)this + 24);
    __int16 v4 = -1;
    int v5 = 1879048192;
    uint64_t v6 = v3;
    do
    {
      int v8 = *v6;
      v6 += 5;
      int v7 = v8;
      if (v5 > v8)
      {
        __int16 v4 = *((_WORD *)v3 + 6);
        int v5 = v7;
      }
      unsigned int v3 = v6;
      --v2;
    }
    while (v2);
    uint64_t v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000) {
        uint64_t v9 = 20000;
      }
      else {
        uint64_t v9 = v5;
      }
    }
  }
  else
  {
    uint64_t v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

uint64_t FstSearch::seedTheory(FstSearch *this, int a2, int a3, int a4, SearchStats *a5)
{
  if (a4 == -2)
  {
    int v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    unsigned int v11 = *((_DWORD *)this + 42);
    if (v11 == *((_DWORD *)this + 43))
    {
      DgnArray<CWIDAC>::reallocElts((uint64_t)this + 160, 1, 1);
      unsigned int v11 = *((_DWORD *)this + 42);
    }
    uint64_t v12 = *((void *)this + 20) + 24 * v11;
    *(_DWORD *)uint64_t v12 = a4;
    *(_DWORD *)(v12 + 4) = a3;
    *(_DWORD *)(v12 + 8) = -1;
    *(_DWORD *)(v12 + 12) = a2;
    *(void *)(v12 + 16) = 0xFFFFFFFFLL;
    int v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  int v13 = *(_DWORD *)(*((void *)this + 5) + 144);
  unsigned int v14 = *((_DWORD *)this + 50);
  if (v14 == *((_DWORD *)this + 51))
  {
    DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts((uint64_t)this + 192, 1, 1);
    unsigned int v14 = *((_DWORD *)this + 50);
  }
  uint64_t v15 = *((void *)this + 24) + 20 * v14;
  *(_DWORD *)uint64_t v15 = a2;
  *(_DWORD *)(v15 + 4) = v13;
  *(_DWORD *)(v15 + 8) = v9;
  *(_WORD *)(v15 + 12) = -2;
  *(_DWORD *)(v15 + 16) = 0;
  LODWORD(v15) = *((_DWORD *)this + 50) + 1;
  *((_DWORD *)this + 50) = v15;
  *((_DWORD *)this + 38) = v15;

  return FstSearchHashBackoff::propagateNulls((uint64_t)this, 20000, a3, a5);
}

uint64_t FstSearch::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(unsigned int *)(result + 228);
  if (v8 != -1)
  {
    uint64_t v9 = result;
    uint64_t v10 = (unsigned int *)(*(void *)(result + 160) + 24 * v8);
    for (i = v10[4]; i != -1; uint64_t v8 = v16)
    {
      uint64_t v16 = i;
      uint64_t result = *(void *)(v9 + 40);
      if (*v10 == 16777209)
      {
        int v17 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        uint64_t result = ArcGraph::lexToCWID((ArcGraph *)result, *v10, a3, (uint64_t)a4, a5, a6, a7, a8);
        int v17 = result;
      }
      uint64_t v18 = *(unsigned int *)(a2 + 8);
      if (v18 == *(_DWORD *)(a2 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        uint64_t v18 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(void *)a2 + 4 * v18) = v17;
      ++*(_DWORD *)(a2 + 8);
      uint64_t v19 = *(unsigned int *)(a6 + 8);
      if (v19 == *(_DWORD *)(a6 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        uint64_t v19 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(void *)a6 + 4 * v19) = v8;
      ++*(_DWORD *)(a6 + 8);
      uint64_t v20 = *(void *)(v9 + 160);
      int v21 = *(_DWORD *)(v20 + 24 * v8 + 4);
      uint64_t v22 = *(unsigned int *)(a3 + 8);
      if (v22 == *(_DWORD *)(a3 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        uint64_t v22 = *(unsigned int *)(a3 + 8);
        uint64_t v20 = *(void *)(v9 + 160);
      }
      *(_DWORD *)(*(void *)a3 + 4 * v22) = v21;
      ++*(_DWORD *)(a3 + 8);
      int v23 = *(_DWORD *)(v20 + 24 * v8 + 12);
      uint64_t v24 = *(unsigned int *)(a5 + 8);
      if (v24 == *(_DWORD *)(a5 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        uint64_t v24 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(void *)a5 + 4 * v24) = v23;
      ++*(_DWORD *)(a5 + 8);
      uint64_t v10 = (unsigned int *)(*(void *)(v9 + 160) + 24 * v16);
      uint64_t i = v10[4];
    }
    *a4 = *v10;
  }
  return result;
}

void FstSearch::checkSearchParametersValidityForArcGraph(FstSearch *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *((void *)this + 5);
  if (*(unsigned char *)(v8 + 178))
  {
    int v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(unsigned char *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    }
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    }
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(void *)(**(void **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((void *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if (a2)
      {
        if (!*(unsigned char *)(v8 + 203)) {
          return;
        }
      }
      else if (*(unsigned char *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(unsigned char *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

uint64_t FstSearch::makePartialResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    uint64_t v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(void *)a2 + v9))(*(void *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  unsigned int BestTrace = FstSearchHashBackoff::getBestTrace(a1, 0, 0, 1);
  if (BestTrace == -1) {
    return 1879048192;
  }
  unsigned int v15 = BestTrace;
  FstSearchHashBackoff::getHistory(a1, BestTrace, a3, a4, v11, v12, v13, v14);
  memset(v25, 0, sizeof(v25));
  int v26 = 0;
  if (*(_DWORD *)(a3 + 8))
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    int v18 = 0;
    do
    {
      uint64_t v19 = *(void *)a3 + v16;
      int v20 = *(_DWORD *)(v19 + 28);
      WordLatticeLC::WordLatticeLC((uint64_t)v24, v19, v18, *(_DWORD *)(v19 + 24) - v18, v20 - *(_DWORD *)(v19 + 24), (uint64_t)v25);
      uint64_t v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(void *)a2 + 112 * v21), (const WordLatticeLC *)v24);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v24);
      ++v17;
      v16 += 32;
      int v18 = v20;
    }
    while (v17 < *(unsigned int *)(a3 + 8));
  }
  uint64_t v22 = *(void *)(a1 + 160) + 24 * v15;
  return (*(_DWORD *)(v22 + 12) + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_213E77524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void FstCore::generateDecoder(int a1, int a2, int a3, int a4, int a5, int a6, int a7, uint64_t a8)
{
  int v63 = a7;
  int v64 = a6;
  if (a1 == 2) {
    int v10 = a2;
  }
  else {
    int v10 = 1;
  }
  int v11 = v10 | a3;
  int v12 = a4 ^ 1;
  int v13 = v10 | a3 | a4 ^ 1;
  int v14 = a5 ^ 1;
  if ((v13 & 1) == 0 && (v14 & 1) == 0)
  {
    unsigned int v15 = MemChunkAlloc(0x168uLL, 0);
    SearchItf::SearchItf((SearchItf *)v15);
    unint64_t v17 = &unk_26C4E4220;
LABEL_47:
    *(void *)uint64_t v16 = v17;
    *(_DWORD *)(v16 + 136) = a6;
    *(_DWORD *)(v16 + 140) = a7;
    *(_OWORD *)(v16 + 160) = 0u;
    *(_OWORD *)(v16 + 176) = 0u;
    *(_OWORD *)(v16 + 192) = 0u;
    *(_OWORD *)(v16 + 208) = 0u;
    *(_DWORD *)(v16 + 224) = -1;
    *(_DWORD *)(v16 + 232) = 1879048192;
    *(_OWORD *)(v16 + 240) = 0u;
    *(_OWORD *)(v16 + 256) = 0u;
    *(_OWORD *)(v16 + 272) = 0u;
    *(_OWORD *)(v16 + 288) = 0u;
    *(_OWORD *)(v16 + 304) = 0u;
    *(unsigned char *)(v16 + 356) = 0;
    return;
  }
  if (((v13 | a5) & 1) == 0)
  {
    int v35 = MemChunkAlloc(0x168uLL, 0);
    SearchItf::SearchItf((SearchItf *)v35);
    unint64_t v17 = &unk_26C4E3890;
    goto LABEL_47;
  }
  if (a1 == 1) {
    int v18 = a2;
  }
  else {
    int v18 = 1;
  }
  int v19 = v18 | a3;
  int v20 = v18 | a3 | v12;
  if (((v20 | v14) & 1) == 0)
  {
    uint64_t v36 = MemChunkAlloc(0x168uLL, 0);
    SearchItf::SearchItf((SearchItf *)v36);
    unint64_t v17 = &unk_26C4E3D10;
    goto LABEL_47;
  }
  if (((v20 | a5) & 1) == 0)
  {
    int v37 = MemChunkAlloc(0x168uLL, 0);
    SearchItf::SearchItf((SearchItf *)v37);
    unint64_t v17 = &unk_26C4E28A0;
    goto LABEL_47;
  }
  int v21 = a2 ^ 1;
  if (a1) {
    int v22 = 1;
  }
  else {
    int v22 = a2 ^ 1;
  }
  int v23 = v22 | a3;
  int v24 = v22 | a3 | v12;
  if (((v24 | v14) & 1) == 0)
  {
    int v38 = MemChunkAlloc(0x180uLL, 0);
    SearchItf::SearchItf((SearchItf *)v38);
    *(void *)uint64_t v39 = &unk_26C4E3FB0;
    *(_DWORD *)(v39 + 136) = a6;
    *(_DWORD *)(v39 + 140) = a7;
    *(_OWORD *)(v39 + 160) = 0u;
    *(_OWORD *)(v39 + 176) = 0u;
    *(_OWORD *)(v39 + 192) = 0u;
    *(_OWORD *)(v39 + 216) = 0u;
    *(_OWORD *)(v39 + 232) = 0u;
    *(_DWORD *)(v39 + 248) = -1;
    *(_DWORD *)(v39 + 256) = 1879048192;
    *(_OWORD *)(v39 + 264) = 0u;
    *(_OWORD *)(v39 + 280) = 0u;
    *(_OWORD *)(v39 + 296) = 0u;
    *(_OWORD *)(v39 + 312) = 0u;
    *(_OWORD *)(v39 + 328) = 0u;
    *(unsigned char *)(v39 + 380) = 0;
    return;
  }
  if (((v24 | a5) & 1) == 0)
  {
    int v40 = MemChunkAlloc(0x180uLL, 0);
    FstSearchDurationHash::FstSearchDurationHash((FstSearchDurationHash *)v40, &v64, &v63);
    return;
  }
  if (a1) {
    int v25 = 1;
  }
  else {
    int v25 = a2;
  }
  int v26 = v25 | a3 | v12;
  if (((v26 | v14) & 1) == 0)
  {
    uint64_t v41 = MemChunkAlloc(0x168uLL, 0);
    SearchItf::SearchItf((SearchItf *)v41);
    unint64_t v17 = &unk_26C4E2700;
    goto LABEL_47;
  }
  if (((v26 | a5) & 1) == 0)
  {
    int v42 = MemChunkAlloc(0x168uLL, 0);
    SearchItf::SearchItf((SearchItf *)v42);
    unint64_t v17 = &unk_26C4DFF98;
    goto LABEL_47;
  }
  if (a1 != 1) {
    int v21 = 1;
  }
  int v27 = a3 ^ 1;
  int v28 = v21 | a3 ^ 1 | a4;
  if (((v28 | v14) & 1) == 0)
  {
    uint64_t v43 = MemChunkAlloc(0x1B0uLL, 0);
    FstSearchLeafLatticeDurationBackoff::FstSearchLeafLatticeDurationBackoff((FstSearchLeafLatticeDurationBackoff *)v43, &v64, &v63);
    return;
  }
  if (((v28 | a5) & 1) == 0)
  {
    uint64_t v44 = MemChunkAlloc(0x1B0uLL, 0);
    FstSearchLeafLatticeDuration::FstSearchLeafLatticeDuration((FstSearchLeafLatticeDuration *)v44, &v64, &v63);
    return;
  }
  int v29 = v18 | v27 | a4;
  if (((v29 | v14) & 1) == 0)
  {
    uint64_t v45 = MemChunkAlloc(0x198uLL, 0);
    SearchItf::SearchItf((SearchItf *)v45);
    uint64_t v47 = &unk_26C4E3DE0;
LABEL_56:
    *(void *)uint64_t v46 = v47;
    *(_DWORD *)(v46 + 136) = a6;
    *(_DWORD *)(v46 + 140) = a7;
    *(_OWORD *)(v46 + 160) = 0u;
    *(_OWORD *)(v46 + 176) = 0u;
    *(_OWORD *)(v46 + 192) = 0u;
    *(_OWORD *)(v46 + 208) = 0u;
    *(_OWORD *)(v46 + 224) = 0u;
    *(_OWORD *)(v46 + 240) = 0u;
    *(_OWORD *)(v46 + 256) = 0u;
    *(_DWORD *)(v46 + 272) = -1;
    *(_DWORD *)(v46 + 280) = 1879048192;
    *(_OWORD *)(v46 + 288) = 0u;
    *(_OWORD *)(v46 + 304) = 0u;
    *(_OWORD *)(v46 + 320) = 0u;
    *(_OWORD *)(v46 + 336) = 0u;
    *(_OWORD *)(v46 + 352) = 0u;
    *(unsigned char *)(v46 + 404) = 0;
    return;
  }
  if (((v29 | a5) & 1) == 0)
  {
    uint64_t v48 = MemChunkAlloc(0x198uLL, 0);
    SearchItf::SearchItf((SearchItf *)v48);
    uint64_t v47 = &unk_26C4E2A40;
    goto LABEL_56;
  }
  int v30 = v21 | a3 | a4;
  if ((v30 | v14))
  {
    if ((v30 | a5))
    {
      int v31 = v11 | a4;
      if (((v31 | v14) & 1) == 0)
      {
        uint64_t v51 = MemChunkAlloc(0x168uLL, 0);
        SearchItf::SearchItf((SearchItf *)v51);
        unint64_t v17 = &unk_26C4E3C40;
        goto LABEL_47;
      }
      if (((v31 | a5) & 1) == 0)
      {
        uint64_t v52 = MemChunkAlloc(0x168uLL, 0);
        SearchItf::SearchItf((SearchItf *)v52);
        unint64_t v17 = &unk_26C4E27D0;
        goto LABEL_47;
      }
      if (((v19 | a4 | v14) & 1) == 0)
      {
        uint64_t v53 = MemChunkAlloc(0x168uLL, 0);
        SearchItf::SearchItf((SearchItf *)v53);
        unint64_t v17 = &unk_26C4E3360;
        goto LABEL_47;
      }
      if (((v19 | a4 | a5) & 1) == 0)
      {
        uint64_t v54 = MemChunkAlloc(0x168uLL, 0);
        SearchItf::SearchItf((SearchItf *)v54);
        unint64_t v17 = &unk_26C4E1278;
        goto LABEL_47;
      }
      int v32 = v22 | v27 | a4;
      if ((v32 | v14))
      {
        if ((v32 | a5))
        {
          if ((v23 | a4 | v14))
          {
            if ((v23 | a4 | a5))
            {
              int v33 = v25 | v27 | a4;
              if ((v33 | v14))
              {
                if ((v33 | a5))
                {
                  int v34 = v25 | a3 | a4;
                  if ((v34 | v14))
                  {
                    if ((v34 | a5))
                    {
                      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 492, (uint64_t)"fst/fstsrch", 1, (uint64_t)"%u %u %u %u %u", v28 | v14, a8, a1);
                      return;
                    }
                    int64x2_t v62 = MemChunkAlloc(0x168uLL, 0);
                    SearchItf::SearchItf((SearchItf *)v62);
                    unint64_t v17 = &unk_26C4E5658;
                  }
                  else
                  {
                    uint64_t v61 = MemChunkAlloc(0x168uLL, 0);
                    SearchItf::SearchItf((SearchItf *)v61);
                    unint64_t v17 = &unk_26C4E11A8;
                  }
                  goto LABEL_47;
                }
                uint64_t v60 = MemChunkAlloc(0x198uLL, 0);
                SearchItf::SearchItf((SearchItf *)v60);
                uint64_t v47 = &unk_26C4E0068;
              }
              else
              {
                uint64_t v59 = MemChunkAlloc(0x198uLL, 0);
                SearchItf::SearchItf((SearchItf *)v59);
                uint64_t v47 = &unk_26C4E2970;
              }
              goto LABEL_56;
            }
            uint64_t v58 = MemChunkAlloc(0x180uLL, 0);
            FstSearchDuration::FstSearchDuration((FstSearchDuration *)v58, &v64, &v63);
          }
          else
          {
            uint64_t v57 = MemChunkAlloc(0x180uLL, 0);
            FstSearchDurationBackoff::FstSearchDurationBackoff((FstSearchDurationBackoff *)v57, &v64, &v63);
          }
        }
        else
        {
          uint64_t v56 = MemChunkAlloc(0x1B0uLL, 0);
          FstSearchLeafDuration::FstSearchLeafDuration((FstSearchLeafDuration *)v56, &v64, &v63);
        }
      }
      else
      {
        uint64_t v55 = MemChunkAlloc(0x1B0uLL, 0);
        FstSearchLeafDurationBackoff::FstSearchLeafDurationBackoff((FstSearchLeafDurationBackoff *)v55, &v64, &v63);
      }
    }
    else
    {
      uint64_t v50 = MemChunkAlloc(0x180uLL, 0);
      FstSearchLatticeDuration::FstSearchLatticeDuration((FstSearchLatticeDuration *)v50, &v64, &v63);
    }
  }
  else
  {
    uint64_t v49 = MemChunkAlloc(0x180uLL, 0);
    FstSearchLatticeDurationBackoff::FstSearchLatticeDurationBackoff((FstSearchLatticeDurationBackoff *)v49, &v64, &v63);
  }
}

void FstSearchLateLatticeHashBackoff::~FstSearchLateLatticeHashBackoff(FstSearchLateLatticeHashBackoff *this)
{
  *(void *)this = &unk_26C4E4220;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 240;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 288);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 272);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 208);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);

  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  *(void *)this = &unk_26C4E4220;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 240;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 288);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 272);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 208);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);

  JUMPOUT(0x216698730);
}

uint64_t FstSearchLateLatticeHashBackoff::getRequiredVirtMapSize(FstSearchLateLatticeHashBackoff *this)
{
  return *(unsigned int *)(*((void *)this + 5) + 160);
}

uint64_t FstSearchLateLatticeHashBackoff::getNActiveStates(FstSearchLateLatticeHashBackoff *this)
{
  return *((unsigned int *)this + 50);
}

uint64_t FstSearchLateLatticeHashBackoff::getBestScoreThisFrame(FstSearchLateLatticeHashBackoff *this)
{
  int v1 = *((_DWORD *)this + 58);
  if (v1 >= 20000) {
    return 20000;
  }
  else {
    return v1;
  }
}

void FstSearchLateLatticeHash::~FstSearchLateLatticeHash(FstSearchLateLatticeHash *this)
{
  *(void *)this = &unk_26C4E3890;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 240;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 288);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 272);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 208);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);

  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  *(void *)this = &unk_26C4E3890;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 240;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 288);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 272);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 208);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);

  JUMPOUT(0x216698730);
}

uint64_t FstSearchLateLatticeHash::getRequiredVirtMapSize(FstSearchLateLatticeHash *this)
{
  return *(unsigned int *)(*((void *)this + 5) + 160);
}

uint64_t FstSearchLateLatticeHash::getNActiveStates(FstSearchLateLatticeHash *this)
{
  return *((unsigned int *)this + 50);
}

uint64_t FstSearchLateLatticeHash::getBestScoreThisFrame(FstSearchLateLatticeHash *this)
{
  int v1 = *((_DWORD *)this + 58);
  if (v1 >= 20000) {
    return 20000;
  }
  else {
    return v1;
  }
}

void FstSearchLatticeHashBackoff::~FstSearchLatticeHashBackoff(FstSearchLatticeHashBackoff *this)
{
  *(void *)this = &unk_26C4E3D10;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 240;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 288);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 272);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 208);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);

  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  *(void *)this = &unk_26C4E3D10;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 240;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 288);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 272);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 208);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);

  JUMPOUT(0x216698730);
}

uint64_t FstSearchLatticeHashBackoff::getRequiredVirtMapSize(FstSearchLatticeHashBackoff *this)
{
  return *(unsigned int *)(*((void *)this + 5) + 160);
}

uint64_t FstSearchLatticeHashBackoff::getNActiveStates(FstSearchLatticeHashBackoff *this)
{
  return *((unsigned int *)this + 50);
}

uint64_t FstSearchLatticeHashBackoff::getBestScoreThisFrame(FstSearchLatticeHashBackoff *this)
{
  int v1 = *((_DWORD *)this + 58);
  if (v1 >= 20000) {
    return 20000;
  }
  else {
    return v1;
  }
}

void FstSearchLatticeHash::~FstSearchLatticeHash(FstSearchLatticeHash *this)
{
  *(void *)this = &unk_26C4E28A0;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 240;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 288);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 272);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 208);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);

  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  *(void *)this = &unk_26C4E28A0;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 240;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 288);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 272);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 208);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);

  JUMPOUT(0x216698730);
}

uint64_t FstSearchLatticeHash::getRequiredVirtMapSize(FstSearchLatticeHash *this)
{
  return *(unsigned int *)(*((void *)this + 5) + 160);
}

uint64_t FstSearchLatticeHash::getNActiveStates(FstSearchLatticeHash *this)
{
  return *((unsigned int *)this + 50);
}

uint64_t FstSearchLatticeHash::getBestScoreThisFrame(FstSearchLatticeHash *this)
{
  int v1 = *((_DWORD *)this + 58);
  if (v1 >= 20000) {
    return 20000;
  }
  else {
    return v1;
  }
}

void FstSearchDurationHashBackoff::~FstSearchDurationHashBackoff(FstSearchDurationHashBackoff *this)
{
  *(void *)this = &unk_26C4E3FB0;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 264;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 328);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 312);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 296);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 280);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 232);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 216);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);

  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  *(void *)this = &unk_26C4E3FB0;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 264;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 328);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 312);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 296);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 280);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 232);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 216);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);

  JUMPOUT(0x216698730);
}

uint64_t FstSearchDurationHashBackoff::getRequiredVirtMapSize(FstSearchDurationHashBackoff *this)
{
  return *(unsigned int *)(*((void *)this + 5) + 160);
}

uint64_t FstSearchDurationHashBackoff::getNActiveStates(FstSearchDurationHashBackoff *this)
{
  return *((unsigned int *)this + 56);
}

uint64_t FstSearchDurationHashBackoff::getBestScoreThisFrame(FstSearchDurationHashBackoff *this)
{
  int v1 = *((_DWORD *)this + 64);
  if (v1 >= 20000) {
    return 20000;
  }
  else {
    return v1;
  }
}

void FstSearchDurationHash::~FstSearchDurationHash(FstSearchDurationHash *this)
{
  *(void *)this = &unk_26C4E2DF8;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 264;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 328);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 312);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 296);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 280);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 232);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 216);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);

  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  *(void *)this = &unk_26C4E2DF8;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 264;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 328);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 312);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 296);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 280);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 232);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 216);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);

  JUMPOUT(0x216698730);
}

uint64_t FstSearchDurationHash::getRequiredVirtMapSize(FstSearchDurationHash *this)
{
  return *(unsigned int *)(*((void *)this + 5) + 160);
}

uint64_t FstSearchDurationHash::getNActiveStates(FstSearchDurationHash *this)
{
  return *((unsigned int *)this + 56);
}

uint64_t FstSearchDurationHash::getBestScoreThisFrame(FstSearchDurationHash *this)
{
  int v1 = *((_DWORD *)this + 64);
  if (v1 >= 20000) {
    return 20000;
  }
  else {
    return v1;
  }
}

void FstSearchHashBackoff::~FstSearchHashBackoff(FstSearchHashBackoff *this)
{
  *(void *)this = &unk_26C4E2700;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 240;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 288);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 272);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 208);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);

  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  *(void *)this = &unk_26C4E2700;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 240;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 288);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 272);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 208);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);

  JUMPOUT(0x216698730);
}

uint64_t FstSearchHashBackoff::getRequiredVirtMapSize(FstSearchHashBackoff *this)
{
  return *(unsigned int *)(*((void *)this + 5) + 160);
}

uint64_t FstSearchHashBackoff::getNActiveStates(FstSearchHashBackoff *this)
{
  return *((unsigned int *)this + 50);
}

uint64_t FstSearchHashBackoff::getBestScoreThisFrame(FstSearchHashBackoff *this)
{
  int v1 = *((_DWORD *)this + 58);
  if (v1 >= 20000) {
    return 20000;
  }
  else {
    return v1;
  }
}

void FstSearchHash::~FstSearchHash(FstSearchHash *this)
{
  *(void *)this = &unk_26C4DFF98;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 240;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 288);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 272);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 208);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);

  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  *(void *)this = &unk_26C4DFF98;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 240;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 288);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 272);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 208);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);

  JUMPOUT(0x216698730);
}

uint64_t FstSearchHash::getRequiredVirtMapSize(FstSearchHash *this)
{
  return *(unsigned int *)(*((void *)this + 5) + 160);
}

uint64_t FstSearchHash::getNActiveStates(FstSearchHash *this)
{
  return *((unsigned int *)this + 50);
}

uint64_t FstSearchHash::getBestScoreThisFrame(FstSearchHash *this)
{
  int v1 = *((_DWORD *)this + 58);
  if (v1 >= 20000) {
    return 20000;
  }
  else {
    return v1;
  }
}

void FstSearchLeafLatticeDurationBackoff::~FstSearchLeafLatticeDurationBackoff(FstSearchLeafLatticeDurationBackoff *this)
{
  *(void *)this = &unk_26C4E43F0;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 312;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 376);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 360);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 344);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 328);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 280);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 264);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 248);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 232);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 216);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);

  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  *(void *)this = &unk_26C4E43F0;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 312;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 376);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 360);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 344);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 328);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 280);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 264);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 248);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 232);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 216);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);

  JUMPOUT(0x216698730);
}

uint64_t FstSearchLeafLatticeDurationBackoff::getRequiredVirtMapSize(FstSearchLeafLatticeDurationBackoff *this)
{
  return 0;
}

uint64_t FstSearchLeafLatticeDurationBackoff::getNActiveStates(FstSearchLeafLatticeDurationBackoff *this)
{
  return *((unsigned int *)this + 68);
}

uint64_t FstSearchLeafLatticeDurationBackoff::getBestScoreThisFrame(FstSearchLeafLatticeDurationBackoff *this)
{
  int v1 = *((_DWORD *)this + 76);
  if (v1 >= 20000) {
    return 20000;
  }
  else {
    return v1;
  }
}

void FstSearchLeafLatticeDuration::~FstSearchLeafLatticeDuration(FstSearchLeafLatticeDuration *this)
{
  *(void *)this = &unk_26C4E4150;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 312;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 376);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 360);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 344);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 328);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 280);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 264);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 248);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 232);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 216);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);

  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  *(void *)this = &unk_26C4E4150;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 312;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 376);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 360);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 344);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 328);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 280);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 264);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 248);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 232);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 216);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);

  JUMPOUT(0x216698730);
}

uint64_t FstSearchLeafLatticeDuration::getRequiredVirtMapSize(FstSearchLeafLatticeDuration *this)
{
  return 0;
}

uint64_t FstSearchLeafLatticeDuration::getNActiveStates(FstSearchLeafLatticeDuration *this)
{
  return *((unsigned int *)this + 68);
}

uint64_t FstSearchLeafLatticeDuration::getBestScoreThisFrame(FstSearchLeafLatticeDuration *this)
{
  int v1 = *((_DWORD *)this + 76);
  if (v1 >= 20000) {
    return 20000;
  }
  else {
    return v1;
  }
}

void FstSearchLeafLatticeBackoff::~FstSearchLeafLatticeBackoff(FstSearchLeafLatticeBackoff *this)
{
  *(void *)this = &unk_26C4E3DE0;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 288;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 352);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 336);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 320);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 240);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 224);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 208);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);

  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  *(void *)this = &unk_26C4E3DE0;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 288;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 352);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 336);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 320);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 240);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 224);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 208);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);

  JUMPOUT(0x216698730);
}

uint64_t FstSearchLeafLatticeBackoff::getRequiredVirtMapSize(FstSearchLeafLatticeBackoff *this)
{
  return 0;
}

uint64_t FstSearchLeafLatticeBackoff::getNActiveStates(FstSearchLeafLatticeBackoff *this)
{
  return *((unsigned int *)this + 62);
}

uint64_t FstSearchLeafLatticeBackoff::getBestScoreThisFrame(FstSearchLeafLatticeBackoff *this)
{
  int v1 = *((_DWORD *)this + 70);
  if (v1 >= 20000) {
    return 20000;
  }
  else {
    return v1;
  }
}

void FstSearchLeafLattice::~FstSearchLeafLattice(FstSearchLeafLattice *this)
{
  *(void *)this = &unk_26C4E2A40;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 288;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 352);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 336);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 320);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 240);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 224);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 208);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);

  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  *(void *)this = &unk_26C4E2A40;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 288;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 352);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 336);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 320);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 240);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 224);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 208);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);

  JUMPOUT(0x216698730);
}

uint64_t FstSearchLeafLattice::getRequiredVirtMapSize(FstSearchLeafLattice *this)
{
  return 0;
}

uint64_t FstSearchLeafLattice::getNActiveStates(FstSearchLeafLattice *this)
{
  return *((unsigned int *)this + 62);
}

uint64_t FstSearchLeafLattice::getBestScoreThisFrame(FstSearchLeafLattice *this)
{
  int v1 = *((_DWORD *)this + 70);
  if (v1 >= 20000) {
    return 20000;
  }
  else {
    return v1;
  }
}

void FstSearchLatticeDurationBackoff::~FstSearchLatticeDurationBackoff(FstSearchLatticeDurationBackoff *this)
{
  *(void *)this = &unk_26C4E42F0;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 264;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 328);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 312);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 296);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 280);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 232);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 216);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);

  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  *(void *)this = &unk_26C4E42F0;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 264;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 328);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 312);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 296);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 280);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 232);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 216);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);

  JUMPOUT(0x216698730);
}

uint64_t FstSearchLatticeDurationBackoff::getRequiredVirtMapSize(FstSearchLatticeDurationBackoff *this)
{
  return 0;
}

uint64_t FstSearchLatticeDurationBackoff::getNActiveStates(FstSearchLatticeDurationBackoff *this)
{
  return *((unsigned int *)this + 56);
}

uint64_t FstSearchLatticeDurationBackoff::getBestScoreThisFrame(FstSearchLatticeDurationBackoff *this)
{
  int v1 = *((_DWORD *)this + 64);
  if (v1 >= 20000) {
    return 20000;
  }
  else {
    return v1;
  }
}

void FstSearchLatticeDuration::~FstSearchLatticeDuration(FstSearchLatticeDuration *this)
{
  *(void *)this = &unk_26C4E3960;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 264;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 328);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 312);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 296);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 280);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 232);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 216);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);

  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  *(void *)this = &unk_26C4E3960;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 264;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 328);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 312);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 296);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 280);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 232);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 216);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);

  JUMPOUT(0x216698730);
}

uint64_t FstSearchLatticeDuration::getRequiredVirtMapSize(FstSearchLatticeDuration *this)
{
  return 0;
}

uint64_t FstSearchLatticeDuration::getNActiveStates(FstSearchLatticeDuration *this)
{
  return *((unsigned int *)this + 56);
}

uint64_t FstSearchLatticeDuration::getBestScoreThisFrame(FstSearchLatticeDuration *this)
{
  int v1 = *((_DWORD *)this + 64);
  if (v1 >= 20000) {
    return 20000;
  }
  else {
    return v1;
  }
}

void FstSearchLateLatticeBackoff::~FstSearchLateLatticeBackoff(FstSearchLateLatticeBackoff *this)
{
  *(void *)this = &unk_26C4E3C40;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 240;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 288);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 272);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 208);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);

  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  *(void *)this = &unk_26C4E3C40;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 240;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 288);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 272);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 208);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);

  JUMPOUT(0x216698730);
}

uint64_t FstSearchLateLatticeBackoff::getRequiredVirtMapSize(FstSearchLateLatticeBackoff *this)
{
  return 0;
}

uint64_t FstSearchLateLatticeBackoff::getNActiveStates(FstSearchLateLatticeBackoff *this)
{
  return *((unsigned int *)this + 50);
}

uint64_t FstSearchLateLatticeBackoff::getBestScoreThisFrame(FstSearchLateLatticeBackoff *this)
{
  int v1 = *((_DWORD *)this + 58);
  if (v1 >= 20000) {
    return 20000;
  }
  else {
    return v1;
  }
}

void FstSearchLateLattice::~FstSearchLateLattice(FstSearchLateLattice *this)
{
  *(void *)this = &unk_26C4E27D0;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 240;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 288);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 272);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 208);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);

  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  *(void *)this = &unk_26C4E27D0;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 240;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 288);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 272);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 208);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);

  JUMPOUT(0x216698730);
}

uint64_t FstSearchLateLattice::getRequiredVirtMapSize(FstSearchLateLattice *this)
{
  return 0;
}

uint64_t FstSearchLateLattice::getNActiveStates(FstSearchLateLattice *this)
{
  return *((unsigned int *)this + 50);
}

uint64_t FstSearchLateLattice::getBestScoreThisFrame(FstSearchLateLattice *this)
{
  int v1 = *((_DWORD *)this + 58);
  if (v1 >= 20000) {
    return 20000;
  }
  else {
    return v1;
  }
}

void FstSearchLatticeBackoff::~FstSearchLatticeBackoff(FstSearchLatticeBackoff *this)
{
  *(void *)this = &unk_26C4E3360;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 240;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 288);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 272);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 208);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);

  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  *(void *)this = &unk_26C4E3360;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 240;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 288);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 272);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 208);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);

  JUMPOUT(0x216698730);
}

uint64_t FstSearchLatticeBackoff::getRequiredVirtMapSize(FstSearchLatticeBackoff *this)
{
  return 0;
}

uint64_t FstSearchLatticeBackoff::getNActiveStates(FstSearchLatticeBackoff *this)
{
  return *((unsigned int *)this + 50);
}

uint64_t FstSearchLatticeBackoff::getBestScoreThisFrame(FstSearchLatticeBackoff *this)
{
  int v1 = *((_DWORD *)this + 58);
  if (v1 >= 20000) {
    return 20000;
  }
  else {
    return v1;
  }
}

void FstSearchLattice::~FstSearchLattice(FstSearchLattice *this)
{
  *(void *)this = &unk_26C4E1278;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 240;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 288);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 272);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 208);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);

  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  *(void *)this = &unk_26C4E1278;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 240;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 288);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 272);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 208);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);

  JUMPOUT(0x216698730);
}

uint64_t FstSearchLattice::getRequiredVirtMapSize(FstSearchLattice *this)
{
  return 0;
}

uint64_t FstSearchLattice::getNActiveStates(FstSearchLattice *this)
{
  return *((unsigned int *)this + 50);
}

uint64_t FstSearchLattice::getBestScoreThisFrame(FstSearchLattice *this)
{
  int v1 = *((_DWORD *)this + 58);
  if (v1 >= 20000) {
    return 20000;
  }
  else {
    return v1;
  }
}

void FstSearchLeafDurationBackoff::~FstSearchLeafDurationBackoff(FstSearchLeafDurationBackoff *this)
{
  *(void *)this = &unk_26C4E4080;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 312;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 376);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 360);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 344);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 328);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 280);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 264);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 248);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 232);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 216);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);

  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  *(void *)this = &unk_26C4E4080;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 312;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 376);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 360);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 344);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 328);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 280);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 264);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 248);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 232);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 216);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);

  JUMPOUT(0x216698730);
}

uint64_t FstSearchLeafDurationBackoff::getRequiredVirtMapSize(FstSearchLeafDurationBackoff *this)
{
  return 0;
}

uint64_t FstSearchLeafDurationBackoff::getNActiveStates(FstSearchLeafDurationBackoff *this)
{
  return *((unsigned int *)this + 68);
}

uint64_t FstSearchLeafDurationBackoff::getBestScoreThisFrame(FstSearchLeafDurationBackoff *this)
{
  int v1 = *((_DWORD *)this + 76);
  if (v1 >= 20000) {
    return 20000;
  }
  else {
    return v1;
  }
}

void FstSearchLeafDuration::~FstSearchLeafDuration(FstSearchLeafDuration *this)
{
  *(void *)this = &unk_26C4E2EC8;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 312;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 376);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 360);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 344);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 328);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 280);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 264);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 248);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 232);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 216);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);

  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  *(void *)this = &unk_26C4E2EC8;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 312;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 376);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 360);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 344);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 328);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 280);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 264);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 248);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 232);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 216);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);

  JUMPOUT(0x216698730);
}

uint64_t FstSearchLeafDuration::getRequiredVirtMapSize(FstSearchLeafDuration *this)
{
  return 0;
}

uint64_t FstSearchLeafDuration::getNActiveStates(FstSearchLeafDuration *this)
{
  return *((unsigned int *)this + 68);
}

uint64_t FstSearchLeafDuration::getBestScoreThisFrame(FstSearchLeafDuration *this)
{
  int v1 = *((_DWORD *)this + 76);
  if (v1 >= 20000) {
    return 20000;
  }
  else {
    return v1;
  }
}

void FstSearchDurationBackoff::~FstSearchDurationBackoff(FstSearchDurationBackoff *this)
{
  *(void *)this = &unk_26C4E37C0;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 264;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 328);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 312);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 296);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 280);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 232);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 216);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);

  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  *(void *)this = &unk_26C4E37C0;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 264;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 328);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 312);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 296);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 280);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 232);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 216);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);

  JUMPOUT(0x216698730);
}

uint64_t FstSearchDurationBackoff::getRequiredVirtMapSize(FstSearchDurationBackoff *this)
{
  return 0;
}

uint64_t FstSearchDurationBackoff::getNActiveStates(FstSearchDurationBackoff *this)
{
  return *((unsigned int *)this + 56);
}

uint64_t FstSearchDurationBackoff::getBestScoreThisFrame(FstSearchDurationBackoff *this)
{
  int v1 = *((_DWORD *)this + 64);
  if (v1 >= 20000) {
    return 20000;
  }
  else {
    return v1;
  }
}

void FstSearchDuration::~FstSearchDuration(FstSearchDuration *this)
{
  *(void *)this = &unk_26C4E1540;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 264;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 328);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 312);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 296);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 280);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 232);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 216);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);

  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  *(void *)this = &unk_26C4E1540;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 264;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 328);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 312);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 296);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 280);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 232);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 216);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);

  JUMPOUT(0x216698730);
}

uint64_t FstSearchDuration::getRequiredVirtMapSize(FstSearchDuration *this)
{
  return 0;
}

uint64_t FstSearchDuration::getNActiveStates(FstSearchDuration *this)
{
  return *((unsigned int *)this + 56);
}

uint64_t FstSearchDuration::getBestScoreThisFrame(FstSearchDuration *this)
{
  int v1 = *((_DWORD *)this + 64);
  if (v1 >= 20000) {
    return 20000;
  }
  else {
    return v1;
  }
}

void FstSearchLeafBackoff::~FstSearchLeafBackoff(FstSearchLeafBackoff *this)
{
  *(void *)this = &unk_26C4E2970;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 288;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 352);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 336);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 320);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 240);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 224);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 208);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);

  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  *(void *)this = &unk_26C4E2970;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 288;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 352);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 336);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 320);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 240);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 224);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 208);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);

  JUMPOUT(0x216698730);
}

uint64_t FstSearchLeafBackoff::getRequiredVirtMapSize(FstSearchLeafBackoff *this)
{
  return 0;
}

uint64_t FstSearchLeafBackoff::getNActiveStates(FstSearchLeafBackoff *this)
{
  return *((unsigned int *)this + 62);
}

uint64_t FstSearchLeafBackoff::getBestScoreThisFrame(FstSearchLeafBackoff *this)
{
  int v1 = *((_DWORD *)this + 70);
  if (v1 >= 20000) {
    return 20000;
  }
  else {
    return v1;
  }
}

void FstSearchLeaf::~FstSearchLeaf(FstSearchLeaf *this)
{
  *(void *)this = &unk_26C4E0068;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 288;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 352);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 336);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 320);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 240);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 224);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 208);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);

  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  *(void *)this = &unk_26C4E0068;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 288;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 352);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 336);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 320);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 240);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 224);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 208);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);

  JUMPOUT(0x216698730);
}

uint64_t FstSearchLeaf::getRequiredVirtMapSize(FstSearchLeaf *this)
{
  return 0;
}

uint64_t FstSearchLeaf::getNActiveStates(FstSearchLeaf *this)
{
  return *((unsigned int *)this + 62);
}

uint64_t FstSearchLeaf::getBestScoreThisFrame(FstSearchLeaf *this)
{
  int v1 = *((_DWORD *)this + 70);
  if (v1 >= 20000) {
    return 20000;
  }
  else {
    return v1;
  }
}

void FstSearchBackoff::~FstSearchBackoff(FstSearchBackoff *this)
{
  *(void *)this = &unk_26C4E11A8;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 240;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 288);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 272);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 208);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);

  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  *(void *)this = &unk_26C4E11A8;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 240;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 288);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 272);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 208);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);

  JUMPOUT(0x216698730);
}

uint64_t FstSearchBackoff::getRequiredVirtMapSize(FstSearchBackoff *this)
{
  return 0;
}

uint64_t FstSearchBackoff::getNActiveStates(FstSearchBackoff *this)
{
  return *((unsigned int *)this + 50);
}

uint64_t FstSearchBackoff::getBestScoreThisFrame(FstSearchBackoff *this)
{
  int v1 = *((_DWORD *)this + 58);
  if (v1 >= 20000) {
    return 20000;
  }
  else {
    return v1;
  }
}

void FstSearch::~FstSearch(FstSearch *this)
{
  *(void *)this = &unk_26C4E5658;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 240;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 288);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 272);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 208);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);

  SearchItf::~SearchItf(this);
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  *(void *)this = &unk_26C4E5658;
  uint64_t v2 = (char *)this + 160;
  unsigned int v3 = (char *)this + 240;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 288);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 272);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 208);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 192);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 176);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);
  SearchItf::~SearchItf(this);

  JUMPOUT(0x216698730);
}

uint64_t FstSearch::getRequiredVirtMapSize(FstSearch *this)
{
  return 0;
}

uint64_t FstSearch::getNActiveStates(FstSearch *this)
{
  return *((unsigned int *)this + 50);
}

uint64_t FstSearch::getBestScoreThisFrame(FstSearch *this)
{
  int v1 = *((_DWORD *)this + 58);
  if (v1 >= 20000) {
    return 20000;
  }
  else {
    return v1;
  }
}

__n128 WordLatticeLC::WordLatticeLC(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6)
{
  *(void *)(a1 + 8) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 20) = a4;
  *(_DWORD *)(a1 + 24) = a5;
  *(_OWORD *)(a1 + 28) = *(_OWORD *)a6;
  *(void *)(a1 + 44) = *(void *)(a6 + 16);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a6 + 24);
  *(_OWORD *)(a1 + 56) = xmmword_2140992F0;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = -1;
  *(void *)a1 = &unk_26C4E0568;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)a2;
  *(_WORD *)(a1 + 92) = *(_WORD *)(a2 + 4);
  *(_WORD *)(a1 + 94) = *(_WORD *)(a2 + 6);
  __n128 result = *(__n128 *)(a2 + 8);
  *(__n128 *)(a1 + 96) = result;
  return result;
}

unint64_t DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts(uint64_t a1, uint64_t a2, int a3)
{
  int v3 = a2;
  if (a3) {
    int v3 = minAddAllocWithExtra(a2, *(_DWORD *)(a1 + 12));
  }
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 12) + v3;
  int v8 = 0;
  unint64_t result = realloc_array(*(void **)a1, &v8, 36 * v6, 36 * v5, 36 * v5, 1);
  *(_DWORD *)(a1 + 12) = result / 0x24;
  *(void *)a1 = v8;
  return result;
}

uint64_t HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV(uint64_t a1, const char *a2, int a3)
{
  HashProbeBase::HashProbeBase((HashProbeBase *)a1, a2);
  *(void *)(v5 + 16) = 0;
  *(void *)(v5 + 24) = 0;
  int v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 8));
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = v6;
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::initBuckets((unsigned int *)a1);
  *(void *)(a1 + 32) = 0;
  return a1;
}

void sub_213E7A724(_Unwind_Exception *a1)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

unsigned int *HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::initBuckets(unsigned int *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (void **)(result + 4);
  uint64_t v3 = result[1];
  unsigned int v4 = result[7];
  if (v3 <= v4)
  {
    result[6] = v3;
    if (!v3) {
      return result;
    }
  }
  else
  {
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)(result + 4), v3 - v4, 0);
    v1[6] = v3;
  }
  uint64_t v5 = *v2;

  return (unsigned int *)memset(v5, 255, 8 * v3);
}

void *DgnArray<FstSearchLateLatticeHashBackoffActiveToken>::DgnArray(void *a1, uint64_t a2)
{
  unsigned int v2 = a2;
  *a1 = 0;
  a1[1] = 0;
  if (a2)
  {
    DgnArray<CWIDAC>::reallocElts((uint64_t)a1, a2, 0);
    unsigned int v4 = *((_DWORD *)a1 + 2);
  }
  else
  {
    unsigned int v4 = 0;
  }
  if (v4 < v2)
  {
    unint64_t v5 = v2 - (unint64_t)v4;
    int v6 = (void *)(*a1 + 24 * v4 + 16);
    do
    {
      *(v6 - 2) = 0xFFFFFFFF00000000;
      *((_DWORD *)v6 - 2) = -1;
      *((_WORD *)v6 - 2) = -2;
      *int v6 = 0;
      v6 += 3;
      --v5;
    }
    while (v5);
  }
  *((_DWORD *)a1 + 2) = v2;
  return a1;
}

unint64_t DgnArray<WordLatticeLC>::reallocElts(uint64_t a1, uint64_t a2, int a3)
{
  int v3 = a2;
  if (a3) {
    int v3 = minAddAllocWithExtra(a2, *(_DWORD *)(a1 + 12));
  }
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 12) + v3;
  int v8 = 0;
  unint64_t result = realloc_array(*(void **)a1, &v8, 112 * v6, 112 * v5, 112 * v5, 1);
  *(_DWORD *)(a1 + 12) = ((result >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64;
  *(void *)a1 = v8;
  return result;
}

unint64_t DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts(uint64_t a1, uint64_t a2, int a3)
{
  int v3 = a2;
  if (a3) {
    int v3 = minAddAllocWithExtra(a2, *(_DWORD *)(a1 + 12));
  }
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 12) + v3;
  int v8 = 0;
  unint64_t result = realloc_array(*(void **)a1, &v8, 20 * v6, 20 * v5, 20 * v5, 1);
  *(_DWORD *)(a1 + 12) = result / 0x14;
  *(void *)a1 = v8;
  return result;
}

unint64_t DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(uint64_t a1, uint64_t a2, int a3)
{
  int v3 = a2;
  if (a3) {
    int v3 = minAddAllocWithExtra(a2, *(_DWORD *)(a1 + 12));
  }
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 12) + v3;
  int v8 = 0;
  unint64_t result = realloc_array(*(void **)a1, &v8, 28 * v6, 28 * v5, 28 * v5, 1);
  *(_DWORD *)(a1 + 12) = result / 0x1C;
  *(void *)a1 = v8;
  return result;
}

unint64_t DgnArray<FstSearchLeafLatticeDurationBackoffActiveToken>::reallocElts(uint64_t a1, uint64_t a2, int a3)
{
  int v3 = a2;
  if (a3) {
    int v3 = minAddAllocWithExtra(a2, *(_DWORD *)(a1 + 12));
  }
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 12) + v3;
  int v8 = 0;
  unint64_t result = realloc_array(*(void **)a1, &v8, 40 * v6, 40 * v5, 40 * v5, 1);
  *(_DWORD *)(a1 + 12) = result / 0x28;
  *(void *)a1 = v8;
  return result;
}

void MrecInitLibrary_mrecutil(void)
{
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_ddump_mrecutil();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_dmatrix_mrecutil();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_dsmset_mrecutil();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_dthread_mrecutil();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_filespec_mrecutil();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_generr_mrecutil();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_hashbase_mrecutil();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_memchunk_mrecutil();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_osfile_mrecutil();
  MrecInitModule_param_mrecutil();
  MrecInitModule_paramset_mrecutil();
  MrecInitModule_paramspec_mrecutil();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_timer_mrecutil();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_util_mrecutil();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();

  MrecInitModule_dcuda_mrecutil();
}

uint64_t MrecInitLibrary_recogctl(void)
{
  MrecInitModule_adaptctl_recogctl();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_model_recogctl();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_psholder_recogctl();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_recogctl_recogctl();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_recoggrm_recogctl();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();

  return MrecInitModule_sdpres_sdapi();
}

uint64_t MrecInitLibrarySet_throughRecogctl(void)
{
  MrecInitLibrarySet_throughPrefilt();
  MrecInitLibrarySet_throughChannel();
  MrecInitLibrarySet_throughFst();

  return MrecInitLibrary_recogctl();
}

void MrecInitLibrarySet_throughNeuralN(void)
{
  MrecInitLibrarySet_throughFrame();

  MrecInitModule_neuraln_neuraln();
}

uint64_t verifyLexiconHandle(unint64_t a1, const char *a2)
{
  uint64_t Registry = TRegisterable<TLexicon>::getRegistry();
  uint64_t v5 = TBaseRegistry<TTokenizer *>::find(Registry, a1);
  if (*(void **)(Registry + 16) == v5)
  {
    conditionalAssert(a2, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tplexicon.cpp", 33, v6, v7);
    exception = __cxa_allocate_exception(0x28uLL);
    int v10 = (char *)a2;
    int v11 = exception;
    std::string::basic_string[abi:ne180100]<0>(&v14, v10);
    *int v11 = byte_26C4DF190;
    int v12 = (std::string *)(v11 + 1);
    if (SHIBYTE(v15) < 0)
    {
      std::string::__init_copy_ctor_external(v12, (const std::string::value_type *)v14, *((std::string::size_type *)&v14 + 1));
    }
    else
    {
      long long v13 = v14;
      v11[3] = v15;
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
    }
    *int v11 = &unk_26C4E0430;
    v11[4] = 3;
  }
  return *v5;
}

void sub_213E7AD6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void TPLexicon_Open(uint64_t a1, uint64_t a2, uint64_t a3)
{
  TReentrancyHandler::TReentrancyHandler((TReentrancyHandler *)&v21, "TPLexicon_Open");
  TLocaleHandler::TLocaleHandler((TLocaleHandler *)v20);
  MrecInitModule_sdpres_sdapi();
  if (g_bInitialized)
  {
    verifyHandleArgument<SDhVoc_fake **>(a2, 0, "Bad input voc handle", v6, v7);
    verifyPointerArgument<TPLexiconHandle_fake **>(a3, 0, "Bad output lexicon handle pointer", v8, v9);
    verifyPointerArgument<TPDataSpec>(a1, 0, "Bad input static data spec", v10, v11);
    makeDataManager(a1, 1, v12, v13, v14);
    operator new();
  }
  conditionalAssert("Not initialized", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tplexicon.cpp", 57, v6, v7);
  exception = __cxa_allocate_exception(0x28uLL);
  std::string::basic_string[abi:ne180100]<0>(&v18, "Not initialized");
  void *exception = byte_26C4DF190;
  int v16 = (std::string *)(exception + 1);
  if (SHIBYTE(v19) < 0)
  {
    std::string::__init_copy_ctor_external(v16, (const std::string::value_type *)v18, *((std::string::size_type *)&v18 + 1));
  }
  else
  {
    long long v17 = v18;
    exception[3] = v19;
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
  }
  void *exception = &unk_26C4E0430;
  exception[4] = 4;
}

void sub_213E7AF70(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, char a20)
{
}

void sub_213E7B018(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  __cxa_end_catch();
  MrecInitModule_sdpres_sdapi();
  TLocaleHandler::~TLocaleHandler((locale_t *)va);
  TReentrancyHandler::ms_bIn = 0;
  switch(a2)
  {
    case 7:
      uint64_t v11 = (char *)__cxa_begin_catch(a1);
      uint64_t v12 = v11 + 8;
      if (v11[31] < 0) {
        uint64_t v12 = *(unsigned char **)v12;
      }
      handleException(v12, (uint64_t)"TPLexicon_Open", *((void *)v11 + 4), v9, v10);
      break;
    case 6:
      uint64_t v15 = (char *)__cxa_begin_catch(a1);
      int v16 = v15 + 8;
      if (v15[31] < 0) {
        int v16 = *(unsigned char **)v16;
      }
      handleException(v16, (uint64_t)"TPLexicon_Open", 6, v13, v14);
      break;
    case 5:
      uint64_t v19 = (char *)__cxa_begin_catch(a1);
      int v20 = v19 + 8;
      if (v19[31] < 0) {
        int v20 = *(unsigned char **)v20;
      }
LABEL_12:
      handleException(v20, (uint64_t)"TPLexicon_Open", 2, v17, v18);
      break;
    case 4:
      int v23 = (char *)__cxa_begin_catch(a1);
      int v24 = v23 + 8;
      if (v23[31] < 0) {
        int v24 = *(unsigned char **)v24;
      }
      handleException(v24, (uint64_t)"TPLexicon_Open", 11, v21, v22);
      break;
    case 3:
      int v25 = (char *)__cxa_begin_catch(a1);
      int v20 = v25 + 8;
      if (v25[31] < 0) {
        int v20 = *(unsigned char **)v20;
      }
      goto LABEL_12;
    case 2:
      int v26 = __cxa_begin_catch(a1);
      int v27 = (unsigned char *)(*(uint64_t (**)(void *))(*(void *)v26 + 16))(v26);
      handleException(v27, (uint64_t)"TPLexicon_Open", 1, v28, v29);
      break;
    case 1:
      int v30 = __cxa_begin_catch(a1);
      int v31 = (unsigned char *)(*(uint64_t (**)(void *))(*(void *)v30 + 16))(v30);
      handleException(v31, (uint64_t)"TPLexicon_Open", 2, v32, v33);
      break;
    default:
      JUMPOUT(0x213E7B24CLL);
  }
  __cxa_end_catch();
  JUMPOUT(0x213E7AE94);
}

void sub_213E7B028()
{
}

void sub_213E7B1FC(_Unwind_Exception *a1)
{
}

void sub_213E7B208(_Unwind_Exception *a1)
{
}

void sub_213E7B214(_Unwind_Exception *a1)
{
}

void sub_213E7B220(_Unwind_Exception *a1)
{
}

void sub_213E7B22C(_Unwind_Exception *a1)
{
}

void sub_213E7B238(_Unwind_Exception *a1)
{
}

void sub_213E7B244()
{
}

uint64_t verifyHandleArgument<SDhVoc_fake **>(uint64_t result, char a2, char *a3, uint64_t a4, uint64_t a5)
{
  if (result != -1) {
    a2 = 1;
  }
  if (!result || (a2 & 1) == 0)
  {
    conditionalAssert(a3, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 339, a4, a5);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v10, a3);
    void *exception = byte_26C4DF190;
    uint64_t v8 = (std::string *)(exception + 1);
    if (SHIBYTE(v11) < 0)
    {
      std::string::__init_copy_ctor_external(v8, (const std::string::value_type *)v10, *((std::string::size_type *)&v10 + 1));
    }
    else
    {
      long long v9 = v10;
      exception[3] = v11;
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
    }
    void *exception = &unk_26C4E0430;
    exception[4] = 3;
  }
  return result;
}

void sub_213E7B358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t verifyPointerArgument<TPLexiconHandle_fake **>(uint64_t result, char a2, char *a3, uint64_t a4, uint64_t a5)
{
  if (!result && (a2 & 1) == 0)
  {
    conditionalAssert(a3, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 279, a4, a5);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v9, a3);
    void *exception = byte_26C4DF190;
    uint64_t v7 = (std::string *)(exception + 1);
    if (SHIBYTE(v10) < 0)
    {
      std::string::__init_copy_ctor_external(v7, (const std::string::value_type *)v9, *((std::string::size_type *)&v9 + 1));
    }
    else
    {
      long long v8 = v9;
      exception[3] = v10;
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    }
    void *exception = &unk_26C4E0430;
    exception[4] = 3;
  }
  return result;
}

void sub_213E7B488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t verifyPointerArgument<TPDataSpec>(uint64_t result, char a2, char *a3, uint64_t a4, uint64_t a5)
{
  if (!result && (a2 & 1) == 0)
  {
    conditionalAssert(a3, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 288, a4, a5);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v9, a3);
    void *exception = byte_26C4DF190;
    uint64_t v7 = (std::string *)(exception + 1);
    if (SHIBYTE(v10) < 0)
    {
      std::string::__init_copy_ctor_external(v7, (const std::string::value_type *)v9, *((std::string::size_type *)&v9 + 1));
    }
    else
    {
      long long v8 = v9;
      exception[3] = v10;
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    }
    void *exception = &unk_26C4E0430;
    exception[4] = 3;
  }
  return result;
}

void sub_213E7B5B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t TPLexicon_Close(unint64_t a1)
{
  TReentrancyHandler::TReentrancyHandler((TReentrancyHandler *)&v17, "TPLexicon_Close");
  TLocaleHandler::TLocaleHandler((TLocaleHandler *)v16);
  MrecInitModule_sdpres_sdapi();
  if (!g_bInitialized)
  {
    conditionalAssert("Not initialized", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tplexicon.cpp", 86, v2, v3);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v14, "Not initialized");
    void *exception = byte_26C4DF190;
    long long v9 = (std::string *)(exception + 1);
    if (SHIBYTE(v15) < 0)
    {
      std::string::__init_copy_ctor_external(v9, (const std::string::value_type *)v14, *((std::string::size_type *)&v14 + 1));
    }
    else
    {
      long long v12 = v14;
      exception[3] = v15;
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v12;
    }
    void *exception = &unk_26C4E0430;
    exception[4] = 4;
  }
  unsigned int v4 = (_DWORD *)verifyLexiconHandle(a1, "Bad input lexicon handle");
  if (v4[90])
  {
    conditionalAssert("Lexicon is referenced", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tplexicon.cpp", 89, v5, v6);
    uint64_t v10 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v14, "Lexicon is referenced");
    *uint64_t v10 = byte_26C4DF190;
    uint64_t v11 = (std::string *)(v10 + 1);
    if (SHIBYTE(v15) < 0)
    {
      std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)v14, *((std::string::size_type *)&v14 + 1));
    }
    else
    {
      long long v13 = v14;
      v10[3] = v15;
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v13;
    }
    *uint64_t v10 = &unk_26C4E0430;
    v10[4] = 7;
  }
  (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
  MrecInitModule_sdpres_sdapi();
  TLocaleHandler::~TLocaleHandler(v16);
  TReentrancyHandler::ms_bIn = 0;
  return 0;
}

void sub_213E7B840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, locale_t a20)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v21)
  {
LABEL_6:
    MrecInitModule_sdpres_sdapi();
    TLocaleHandler::~TLocaleHandler(&a20);
    TReentrancyHandler::ms_bIn = 0;
    switch(a2)
    {
      case 7:
        int v26 = (char *)__cxa_begin_catch(a1);
        int v27 = v26 + 8;
        if (v26[31] < 0) {
          int v27 = *(unsigned char **)v27;
        }
        handleException(v27, (uint64_t)"TPLexicon_Close", *((void *)v26 + 4), v24, v25);
        break;
      case 6:
        int v30 = (char *)__cxa_begin_catch(a1);
        int v31 = v30 + 8;
        if (v30[31] < 0) {
          int v31 = *(unsigned char **)v31;
        }
        handleException(v31, (uint64_t)"TPLexicon_Close", 6, v28, v29);
        break;
      case 5:
        int v34 = (char *)__cxa_begin_catch(a1);
        int v35 = v34 + 8;
        if (v34[31] < 0) {
          int v35 = *(unsigned char **)v35;
        }
LABEL_17:
        handleException(v35, (uint64_t)"TPLexicon_Close", 2, v32, v33);
        break;
      case 4:
        int v38 = (char *)__cxa_begin_catch(a1);
        uint64_t v39 = v38 + 8;
        if (v38[31] < 0) {
          uint64_t v39 = *(unsigned char **)v39;
        }
        handleException(v39, (uint64_t)"TPLexicon_Close", 11, v36, v37);
        break;
      case 3:
        int v40 = (char *)__cxa_begin_catch(a1);
        int v35 = v40 + 8;
        if (v40[31] < 0) {
          int v35 = *(unsigned char **)v35;
        }
        goto LABEL_17;
      case 2:
        uint64_t v41 = __cxa_begin_catch(a1);
        int v42 = (unsigned char *)(*(uint64_t (**)(void *))(*(void *)v41 + 16))(v41);
        handleException(v42, (uint64_t)"TPLexicon_Close", 1, v43, v44);
        break;
      default:
        if (a2 != 1) {
          _Unwind_Resume(a1);
        }
        uint64_t v45 = __cxa_begin_catch(a1);
        uint64_t v46 = (unsigned char *)(*(uint64_t (**)(void *))(*(void *)v45 + 16))(v45);
        handleException(v46, (uint64_t)"TPLexicon_Close", 2, v47, v48);
        break;
    }
    __cxa_end_catch();
    JUMPOUT(0x213E7B698);
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

uint64_t TPLexicon_GetInfo(unint64_t a1, uint64_t a2)
{
  TReentrancyHandler::TReentrancyHandler((TReentrancyHandler *)&v18, "TPLexicon_GetInfo");
  TLocaleHandler::TLocaleHandler((TLocaleHandler *)v17);
  MrecInitModule_sdpres_sdapi();
  if (!g_bInitialized)
  {
    conditionalAssert("Not initialized", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tplexicon.cpp", 134, v4, v5);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v15, "Not initialized");
    void *exception = byte_26C4DF190;
    long long v13 = (std::string *)(exception + 1);
    if (SHIBYTE(v16) < 0)
    {
      std::string::__init_copy_ctor_external(v13, (const std::string::value_type *)v15, *((std::string::size_type *)&v15 + 1));
    }
    else
    {
      long long v14 = v15;
      exception[3] = v16;
      *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
    }
    void *exception = &unk_26C4E0430;
    exception[4] = 4;
  }
  uint64_t v6 = verifyLexiconHandle(a1, "Bad input lexicon handle");
  verifyPointerArgument<TPLexiconInfo>(a2, 0, "Bad output lexicon info pointer", v7, v8);
  *(void *)(a2 + 8) = *(void *)(v6 + 104);
  uint64_t v9 = *(void *)(v6 + 336);
  uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v9 + 144));
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(v9 + 4 * TParam::getValidConfig((TParam *)(v9 + 144), ActiveConfigHandle) + 304);
  *(_DWORD *)(a2 + 20) = *(_DWORD *)(v6 + 360);
  *(void *)a2 = *(void *)(*(void *)(v6 + 336) + 8);
  MrecInitModule_sdpres_sdapi();
  TLocaleHandler::~TLocaleHandler(v17);
  TReentrancyHandler::ms_bIn = 0;
  return 0;
}

void sub_213E7BC98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, locale_t a20)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v21)
  {
LABEL_6:
    MrecInitModule_sdpres_sdapi();
    TLocaleHandler::~TLocaleHandler(&a20);
    TReentrancyHandler::ms_bIn = 0;
    switch(a2)
    {
      case 7:
        int v26 = (char *)__cxa_begin_catch(a1);
        int v27 = v26 + 8;
        if (v26[31] < 0) {
          int v27 = *(unsigned char **)v27;
        }
        handleException(v27, (uint64_t)"TPLexicon_GetInfo", *((void *)v26 + 4), v24, v25);
        break;
      case 6:
        int v30 = (char *)__cxa_begin_catch(a1);
        int v31 = v30 + 8;
        if (v30[31] < 0) {
          int v31 = *(unsigned char **)v31;
        }
        handleException(v31, (uint64_t)"TPLexicon_GetInfo", 6, v28, v29);
        break;
      case 5:
        int v34 = (char *)__cxa_begin_catch(a1);
        int v35 = v34 + 8;
        if (v34[31] < 0) {
          int v35 = *(unsigned char **)v35;
        }
LABEL_17:
        handleException(v35, (uint64_t)"TPLexicon_GetInfo", 2, v32, v33);
        break;
      case 4:
        int v38 = (char *)__cxa_begin_catch(a1);
        uint64_t v39 = v38 + 8;
        if (v38[31] < 0) {
          uint64_t v39 = *(unsigned char **)v39;
        }
        handleException(v39, (uint64_t)"TPLexicon_GetInfo", 11, v36, v37);
        break;
      case 3:
        int v40 = (char *)__cxa_begin_catch(a1);
        int v35 = v40 + 8;
        if (v40[31] < 0) {
          int v35 = *(unsigned char **)v35;
        }
        goto LABEL_17;
      case 2:
        uint64_t v41 = __cxa_begin_catch(a1);
        int v42 = (unsigned char *)(*(uint64_t (**)(void *))(*(void *)v41 + 16))(v41);
        handleException(v42, (uint64_t)"TPLexicon_GetInfo", 1, v43, v44);
        break;
      default:
        if (a2 != 1) {
          _Unwind_Resume(a1);
        }
        uint64_t v45 = __cxa_begin_catch(a1);
        uint64_t v46 = (unsigned char *)(*(uint64_t (**)(void *))(*(void *)v45 + 16))(v45);
        handleException(v46, (uint64_t)"TPLexicon_GetInfo", 2, v47, v48);
        break;
    }
    __cxa_end_catch();
    JUMPOUT(0x213E7BBB8);
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

uint64_t verifyPointerArgument<TPLexiconInfo>(uint64_t result, char a2, char *a3, uint64_t a4, uint64_t a5)
{
  if (!result && (a2 & 1) == 0)
  {
    conditionalAssert(a3, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 279, a4, a5);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v9, a3);
    void *exception = byte_26C4DF190;
    uint64_t v7 = (std::string *)(exception + 1);
    if (SHIBYTE(v10) < 0)
    {
      std::string::__init_copy_ctor_external(v7, (const std::string::value_type *)v9, *((std::string::size_type *)&v9 + 1));
    }
    else
    {
      long long v8 = v9;
      exception[3] = v10;
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    }
    void *exception = &unk_26C4E0430;
    exception[4] = 3;
  }
  return result;
}

void sub_213E7C024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t TPLexicon_GetHeadClone(unint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned int a4, _DWORD *a5)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  TReentrancyHandler::TReentrancyHandler((TReentrancyHandler *)&v37, "TPLexicon_GetHeadClone");
  TLocaleHandler::TLocaleHandler((TLocaleHandler *)v36);
  MrecInitModule_sdpres_sdapi();
  if (!g_bInitialized)
  {
    conditionalAssert("Not initialized", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tplexicon.cpp", 314, v10, v11);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(v33, "Not initialized");
    void *exception = byte_26C4DF190;
    int v23 = (std::string *)(exception + 1);
    if ((v33[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v23, *(const std::string::value_type **)v33, *(std::string::size_type *)&v33[8]);
    }
    else
    {
      long long v28 = *(_OWORD *)v33;
      exception[3] = *(void *)&v33[16];
      *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v28;
    }
    void *exception = &unk_26C4E0430;
    exception[4] = 4;
  }
  long long v12 = (void *)verifyLexiconHandle(a1, "Bad input lexicon handle");
  verifyStringArgument(a2, 0, 0, "Bad input word name pointer", v13);
  *(void *)uint64_t v33 = v34;
  *(_OWORD *)&v33[8] = xmmword_214085190;
  char v35 = 1;
  if (TLocaleInfo::multiByteToUnicode((uint64_t)(v12 + 30), a2, (uint64_t)v33))
  {
    conditionalAssert("Bad input wordname", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tplexicon.cpp", 320, v14, v15);
    uint64_t v24 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&__s, "Bad input wordname");
    *uint64_t v24 = byte_26C4DF190;
    uint64_t v25 = (std::string *)(v24 + 1);
    if (SHIBYTE(v39) < 0)
    {
      std::string::__init_copy_ctor_external(v25, (const std::string::value_type *)__s, *((std::string::size_type *)&__s + 1));
    }
    else
    {
      long long v29 = __s;
      v24[3] = v39;
      *(_OWORD *)&v25->__r_.__value_.__l.__data_ = v29;
    }
    *uint64_t v24 = &unk_26C4E0430;
    v24[4] = 3;
  }
  verifyPointerArgument<char,unsigned int>(a3, a4, 1, "Bad output head clone buffer", v15);
  *(void *)&long long __s = a3;
  *((void *)&__s + 1) = a4;
  unint64_t v39 = 0;
  char v41 = 0;
  if (*(void *)&v33[16] >= *(void *)&v33[8])
  {
    if (v35)
    {
      LODWORD(v31) = 0;
      TBuffer<wchar_t>::insert((uint64_t)v33, *(unint64_t *)&v33[16], (int *)&v31, 1uLL);
      int v16 = *(int **)v33;
      --*(void *)&v33[16];
    }
    else
    {
      int v16 = *(int **)v33;
      if (*(void *)&v33[8]) {
        *(_DWORD *)(*(void *)v33 + 4 * *(void *)&v33[8] - 4) = 0;
      }
    }
  }
  else
  {
    int v16 = *(int **)v33;
    *(_DWORD *)(*(void *)v33 + 4 * *(void *)&v33[16]) = 0;
  }
  if (TLexicon::checkName((uint64_t)v12, v16, 0, 0xFFFFFFFFFFFFFFFFLL))
  {
    conditionalAssert("Bad wordname format", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tplexicon.cpp", 326, v17, v18);
    int v26 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v31, "Bad wordname format");
    *int v26 = byte_26C4DF190;
    int v27 = (std::string *)(v26 + 1);
    if (SHIBYTE(v32) < 0)
    {
      std::string::__init_copy_ctor_external(v27, (const std::string::value_type *)v31, *((std::string::size_type *)&v31 + 1));
    }
    else
    {
      long long v30 = v31;
      v26[3] = v32;
      *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v30;
    }
    *int v26 = &unk_26C4E0430;
    v26[4] = 3;
  }
  if (*(void *)&v33[16] >= *(void *)&v33[8])
  {
    if (v35)
    {
      LODWORD(v31) = 0;
      TBuffer<wchar_t>::insert((uint64_t)v33, *(unint64_t *)&v33[16], (int *)&v31, 1uLL);
      uint64_t v19 = *(__int32 **)v33;
      --*(void *)&v33[16];
    }
    else
    {
      uint64_t v19 = *(__int32 **)v33;
      if (*(void *)&v33[8]) {
        *(_DWORD *)(*(void *)v33 + 4 * *(void *)&v33[8] - 4) = 0;
      }
    }
  }
  else
  {
    uint64_t v19 = *(__int32 **)v33;
    *(_DWORD *)(*(void *)v33 + 4 * *(void *)&v33[16]) = 0;
  }
  HeadClone = (unsigned int **)TLexicon::findHeadClone(v12, v19);
  if (HeadClone) {
    TLocaleInfo::unicodeToMultiByte((uint64_t)(v12 + 30), *HeadClone, (uint64_t)&__s);
  }
  else {
    TBuffer<char>::assign((uint64_t)&__s, (char *)a2);
  }
  if (v39 >= *((void *)&__s + 1))
  {
    if (v41)
    {
      LOBYTE(v31) = 0;
      TBuffer<char>::insert((uint64_t)&__s, v39--, (char *)&v31, 1uLL);
    }
    else if (*((void *)&__s + 1))
    {
      *(unsigned char *)(*((void *)&__s + 1) + __s - 1) = 0;
    }
  }
  else
  {
    *(unsigned char *)(__s + v39) = 0;
  }
  if (a5) {
    *a5 = v39 + 1;
  }
  if (v41 && (uint64_t *)__s != &v40 && (void)__s) {
    MEMORY[0x216698730]();
  }
  if (v35 && *(unsigned char **)v33 != v34 && *(void *)v33) {
    MEMORY[0x216698730]();
  }
  MrecInitModule_sdpres_sdapi();
  TLocaleHandler::~TLocaleHandler(v36);
  TReentrancyHandler::ms_bIn = 0;
  return 0;
}

void sub_213E7C5DC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      if (LOBYTE(STACK[0x570]))
      {
        unint64_t v20 = STACK[0x458];
        if ((unint64_t *)STACK[0x458] != &STACK[0x470])
        {
          if (v20) {
            MEMORY[0x216698730](v20, 0x1000C4077774924);
          }
        }
      }
      if (LOBYTE(STACK[0x430]) && a15 != v17 && a15) {
        MEMORY[0x216698730]();
      }
      MrecInitModule_sdpres_sdapi();
      TLocaleHandler::~TLocaleHandler((locale_t *)&STACK[0x440]);
      TReentrancyHandler::ms_bIn = 0;
      switch(a2)
      {
        case 7:
          int v23 = (char *)__cxa_begin_catch(a1);
          uint64_t v24 = v23 + 8;
          if (v23[31] < 0) {
            uint64_t v24 = *(unsigned char **)v24;
          }
          handleException(v24, (uint64_t)"TPLexicon_GetHeadClone", *((void *)v23 + 4), v21, v22);
          __cxa_end_catch();
          break;
        case 6:
          int v27 = (char *)__cxa_begin_catch(a1);
          long long v28 = v27 + 8;
          if (v27[31] < 0) {
            long long v28 = *(unsigned char **)v28;
          }
          handleException(v28, (uint64_t)"TPLexicon_GetHeadClone", 6, v25, v26);
          __cxa_end_catch();
          break;
        case 5:
          long long v31 = (char *)__cxa_begin_catch(a1);
          uint64_t v32 = v31 + 8;
          if (v31[31] < 0) {
            uint64_t v32 = *(unsigned char **)v32;
          }
LABEL_25:
          handleException(v32, (uint64_t)"TPLexicon_GetHeadClone", 2, v29, v30);
          __cxa_end_catch();
          break;
        case 4:
          char v35 = (char *)__cxa_begin_catch(a1);
          uint64_t v36 = v35 + 8;
          if (v35[31] < 0) {
            uint64_t v36 = *(unsigned char **)v36;
          }
          handleException(v36, (uint64_t)"TPLexicon_GetHeadClone", 11, v33, v34);
          __cxa_end_catch();
          break;
        case 3:
          char v37 = (char *)__cxa_begin_catch(a1);
          uint64_t v32 = v37 + 8;
          if (v37[31] < 0) {
            uint64_t v32 = *(unsigned char **)v32;
          }
          goto LABEL_25;
        case 2:
          int v38 = __cxa_begin_catch(a1);
          unint64_t v39 = (unsigned char *)(*(uint64_t (**)(void *))(*(void *)v38 + 16))(v38);
          handleException(v39, (uint64_t)"TPLexicon_GetHeadClone", 1, v40, v41);
          __cxa_end_catch();
          break;
        default:
          if (a2 != 1) {
            _Unwind_Resume(a1);
          }
          uint64_t v42 = __cxa_begin_catch(a1);
          uint64_t v43 = (unsigned char *)(*(uint64_t (**)(void *))(*(void *)v42 + 16))(v42);
          handleException(v43, (uint64_t)"TPLexicon_GetHeadClone", 2, v44, v45);
          __cxa_end_catch();
          break;
      }
      JUMPOUT(0x213E7C340);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t TLocaleInfo::TLocaleInfo(uint64_t a1, const __int32 *a2, uint64_t a3, int a4, uint64_t a5)
{
  *(void *)a1 = a2;
  *(unsigned char *)(a1 + 80) = wcscmp(a2, (const __int32 *)"t") == 0;
  *(void *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 64) = a4;
  *(void *)(a1 + 72) = a5;
  return a1;
}

void sub_213E7CA24(_Unwind_Exception *a1)
{
  TCollation::~TCollation(v1);
  _Unwind_Resume(a1);
}

uint64_t TBuffer<char>::assign(uint64_t a1, char *a2)
{
  TBuffer<char>::resize(a1, 0);
  uint64_t v4 = 0;
  while (a2[v4++])
    ;

  return TBuffer<char>::insert(a1, 0, a2, v4 - 1);
}

void DgnException::DgnException(DgnException *this, int CurrentThreadId, char *a3, int a4, char *a5, int a6, char *a7)
{
  *(void *)this = &unk_26C4DFA50;
  uint64_t v14 = (DgnException *)((char *)this + 32);
  uint64_t v15 = (DgnException *)((char *)this + 8);
  DgnString::DgnString((DgnException *)((char *)this + 8));
  DgnString::DgnString(v14);
  DgnString::DgnString((DgnException *)((char *)this + 56));
  if (CurrentThreadId == -1) {
    CurrentThreadId = DgnThreadMgr::getCurrentThreadId(v16);
  }
  *((_DWORD *)this + 18) = CurrentThreadId;
  DgnString::preAllocate((unint64_t)v15, 96);
  DgnString::operator=(v15, a3);
  *((_DWORD *)this + 6) = a4;
  DgnString::operator=(v14, a5);
  *((_DWORD *)this + 12) = a6;
  DgnString::preAllocate((unint64_t)this + 56, 512);
  DgnString::operator=((DgnException *)((char *)this + 56), a7);
}

void sub_213E7CB88(_Unwind_Exception *a1)
{
  DgnString::~DgnString(v2);
  DgnString::~DgnString(v1);
  _Unwind_Resume(a1);
}

void DgnException::~DgnException(DgnException *this)
{
  *(void *)this = &unk_26C4DFA50;
  uint64_t v2 = (DgnException *)((char *)this + 8);
  DgnString::~DgnString((DgnException *)((char *)this + 56));
  DgnString::~DgnString((DgnException *)((char *)this + 32));
  DgnString::~DgnString(v2);
}

{
  uint64_t vars8;

  DgnException::~DgnException(this);

  JUMPOUT(0x216698730);
}

void DgnFileIOException::DgnFileIOException(DgnFileIOException *this, int a2, char *a3, int a4, char *a5, int a6, char *a7)
{
  DgnException::DgnException(this, a2, a3, a4, a5, a6, a7);
  *uint64_t v7 = &unk_26C4E1DB0;
}

void DgnFileIOException::~DgnFileIOException(DgnFileIOException *this)
{
  DgnException::~DgnException(this);

  JUMPOUT(0x216698730);
}

void EncryptBuffer(unsigned __int8 *a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a3)
  {
    if (a3 == 2)
    {
      if (a2)
      {
        uint64_t v9 = a2;
        do
        {
          *a1 = sEncryptPerm256Table[*a1];
          ++a1;
          --v9;
        }
        while (v9);
      }
    }
    else if (a3 == 1)
    {
      if (a2)
      {
        uint64_t v8 = a2;
        do
        {
          *a1++ ^= 0x80u;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/encrypt.cpp", 60, (uint64_t)"dfutil/encrypt", 1, (uint64_t)&errStr_dfutil_encrypt_E_BADENCRYPTION, a7, a8, a3);
    }
  }
}

void DecryptBuffer(unsigned __int8 *a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a3)
  {
    if (a3 == 2)
    {
      if (a2)
      {
        uint64_t v9 = a2;
        do
        {
          *a1 = sDecryptPerm256Table[*a1];
          ++a1;
          --v9;
        }
        while (v9);
      }
    }
    else if (a3 == 1)
    {
      if (a2)
      {
        uint64_t v8 = a2;
        do
        {
          *a1++ ^= 0x80u;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/encrypt.cpp", 87, (uint64_t)"dfutil/encrypt", 1, (uint64_t)&errStr_dfutil_encrypt_E_BADENCRYPTION, a7, a8, a3);
    }
  }
}

void MrecInitModule_active_kernel(void)
{
  if (!gParDebugActive)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugActive", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    *uint64_t v1 = &unk_26C4E0858;
    gParDebugActive = (uint64_t)v1;
    uint64_t v2 = (uint64_t *)GlobalParamMgr::smpGlobalParamMgr;
    GlobalParamMgr::addParam(v2, (GlobalParam **)&gParDebugActive);
  }
}

uint64_t ActiveWordCoartN::unpackEndFromCallBack(ActiveWordCoartN *this)
{
  ActiveWordCoartBase::getEndPics((uint64_t)this, 0xFFFF, *((void *)this + 2) + 302992);
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 1) + 256))();
  (*(void (**)(void, void, uint64_t))(**((void **)this + 1) + 120))(*((void *)this + 1), *((void *)this + 9), v2);
  uint64_t v3 = *(uint64_t (**)(void))(**((void **)this + 1) + 176);

  return v3();
}

uint64_t ActiveWordCoartN::unpackMidFromCallBack(ActiveWordCoartN *this)
{
  uint64_t v2 = ActiveWordCoartN::unpackMid(this);
  (*(void (**)(void, void, uint64_t))(**((void **)this + 1) + 120))(*((void *)this + 1), *((void *)this + 8), v2);
  uint64_t v3 = *(uint64_t (**)(void))(**((void **)this + 1) + 176);

  return v3();
}

void ActiveWordMgr::~ActiveWordMgr(ActiveWordMgr *this)
{
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 302992);

  NetMgr::~NetMgr(this);
}

void ActiveWordMgr::newActiveWordNonAcoustic(ActiveWordMgr *a1, uint64_t a2)
{
  NetMgr::addEmptyNet((uint64_t)a1, a2);
  uint64_t v4 = v3;
  uint64_t v5 = MemChunkAlloc(0x28uLL, 0);

  ActiveWordNonAcoustic::ActiveWordNonAcoustic((ActiveWordNonAcoustic *)v5, a1, v4);
}

void ActiveWordMgr::newActiveWordSilence(ActiveWordMgr *a1, uint64_t a2)
{
  uint64_t v3 = (HmmNet *)NetMgr::addSilNet((uint64_t)a1, a2);
  uint64_t v4 = (int **)(*(uint64_t (**)(HmmNet *))(*(void *)v3 + 200))(v3);
  BitArray::operator=(v4, (uint64_t)a1 + 40);
  uint64_t v5 = MemChunkAlloc(0x28uLL, 0);

  ActiveWordSilence::ActiveWordSilence((ActiveWordSilence *)v5, a1, v3);
}

void ActiveWordMgr::newActiveWord(uint64_t a1, unsigned int *a2, int a3, int a4, int a5)
{
  uint64_t v10 = a1 + 302976;
  unint64_t v11 = *a2;
  long long v12 = *(void **)(*(void *)(**(void **)VocMgr::smpVocMgr + ((v11 >> 22) & 0x3F8)) + 48);
  unsigned int v13 = v11 & 0xFFFFFF;
  if (a2[2] == -1)
  {
    int v16 = 1;
    uint64_t v14 = v11 & 0xFFFFFF;
  }
  else
  {
    uint64_t v14 = v13;
    if (*(_WORD *)(v12[74] + 2 * v13) || *(_WORD *)(v12[76] + 2 * v13))
    {
      uint64_t v15 = *(void *)(a1 + 302984);
      int v16 = (*(_DWORD *)(v15 + 68) & 0xFFFFFFFD) != 0 || Constraint::isCoartAllowedForState(v15, a2);
    }
    else
    {
      int v16 = 0;
    }
  }
  uint64_t v17 = v12[4];
  unint64_t v18 = *(unsigned __int16 *)(v17 + 2 * v14);
  if (*(_WORD *)(v17 + 2 * v14))
  {
    unsigned __int16 v19 = 0;
    unint64_t v20 = v18;
    do
      v19 += *(unsigned __int8 *)(*(void *)(*(void *)v10 + 16)
                                + *(unsigned __int16 *)(v12[9] + 2 * *(unsigned int *)(v12[6] + 4 * v14) - 2 + 2 * v20));
    while (v20-- > 1);
  }
  else
  {
    unsigned __int16 v19 = 0;
  }
  *(int32x2_t *)&double v22 = NetMgr::addNonSilNet(a1, (uint64_t)a2, v16, a5, v18, v19, a3, a4);
  uint64_t v24 = v23;
  uint64_t v25 = (int **)(*(uint64_t (**)(HmmNet *, double))(*(void *)v23 + 200))(v23, v22);
  uint64_t v26 = (BitArray *)v25;
  if ((v16 & 1) == 0 && *(_DWORD *)(a1 + 12) == 1)
  {
    BitArray::operator=(v25, a1 + 40);
LABEL_26:
    long long v31 = MemChunkAlloc(0x28uLL, 0);
    ActiveWordNoCoart::ActiveWordNoCoart((ActiveWordNoCoart *)v31, (ActiveWordMgr *)a1, v24);
    return;
  }
  BOOL v27 = a2[2] == -1 || a2[3] == -3;
  if (v27
    || (uint64_t v28 = *(void *)(v10 + 8), v33 = *(_DWORD *)(a1 + 4), (Constraint::getNextPhones(v28, a2, &v33, v26) & 1) == 0))
  {
    PhnMgr::getFullAcousticExitContext(**(void **)v10, v26);
  }
  if ((v16 & 1) == 0) {
    goto LABEL_26;
  }
  if (v18 == 1)
  {
    uint64_t v29 = MemChunkAlloc(0x40uLL, 0);
    ActiveWordCoartBase::ActiveWordCoartBase((ActiveWordCoartBase *)v29, (ActiveWordMgr *)a1, v24);
    *uint64_t v30 = &unk_26C4E10E8;
  }
  else
  {
    uint64_t v32 = MemChunkAlloc(0x50uLL, 0);
    ActiveWordCoartN::ActiveWordCoartN((ActiveWordCoartN *)v32, (ActiveWordMgr *)a1, v24);
  }
}

uint64_t Constraint::getNextPhones(uint64_t a1, unsigned int *a2, int *a3, BitArray *a4)
{
  if ((*(_DWORD *)(a1 + 68) - 1) > 1)
  {
    int v5 = *a3;
    return Constraint::getStateNextPhones(a1, a2, &v5, a4);
  }
  else
  {
    int v6 = *a3;
    return Constraint::getTraceNextPhones(a1, (uint64_t)a2, &v6, (int **)a4);
  }
}

void (***DgnDelete<ActiveWord>(void (***result)(void)))(void)
{
  if (result)
  {
    uint64_t v1 = result;
    (**result)(result);
    return (void (***)(void))MemChunkFree(v1, 0);
  }
  return result;
}

void ActiveWordMgr::printSize(ActiveWordMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/active.cpp", 224, (DgnString *)&v51);
  if (v52) {
    int v16 = (char *)v51;
  }
  else {
    int v16 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_2140B33BB, a3, &byte_2140B33BB, v16);
  DgnString::~DgnString((DgnString *)&v51);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_2140B33BB);
  if (this)
  {
    unint64_t v50 = 0;
    unint64_t v51 = 0;
    uint64_t v21 = (a3 + 1);
    unint64_t v49 = 0;
    NetMgr::printSize(this, 0xFFFFFFFFLL, v21, &v51, &v50, &v49);
    *a4 += v51;
    *a5 += v50;
    *a6 += v49;
  }
  else
  {
    uint64_t v21 = (a3 + 1);
  }
  uint64_t v22 = 16;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v22 = 12;
  }
  uint64_t v23 = *((unsigned int *)this + 75750);
  uint64_t v24 = 12 * v23;
  if ((int)v23 <= 0) {
    uint64_t v24 = 0;
  }
  uint64_t v25 = v24 + v22;
  uint64_t v26 = v24 + v22 + 12 * (*((_DWORD *)this + 75751) - v23);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/active.cpp", 226, (DgnString *)&v51);
  if (v52) {
    long long v31 = (char *)v51;
  }
  else {
    long long v31 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v27, v28, v29, v30, v21, &byte_2140B33BB, (34 - a3), (34 - a3), v31, v26, v25, 0);
  DgnString::~DgnString((DgnString *)&v51);
  *a4 += v26;
  *a5 += v25;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v32 = 4;
  }
  else {
    uint64_t v32 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/active.cpp", 227, (DgnString *)&v51);
  if (v52) {
    char v37 = (char *)v51;
  }
  else {
    char v37 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, v21, &byte_2140B33BB, (34 - a3), (34 - a3), v37, v32, v32, 0);
  DgnString::~DgnString((DgnString *)&v51);
  *a4 += v32;
  *a5 += v32;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v38 = 4;
  }
  else {
    uint64_t v38 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/active.cpp", 228, (DgnString *)&v51);
  if (v52) {
    uint64_t v43 = (char *)v51;
  }
  else {
    uint64_t v43 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v39, v40, v41, v42, v21, &byte_2140B33BB, (34 - a3), (34 - a3), v43, v38, v38, 0);
  DgnString::~DgnString((DgnString *)&v51);
  *a4 += v38;
  *a5 += v38;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/active.cpp", 229, (DgnString *)&v51);
  if (v52) {
    uint64_t v48 = (char *)v51;
  }
  else {
    uint64_t v48 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v44, v45, v46, v47, a3, &byte_2140B33BB, (35 - a3), (35 - a3), v48, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v51);
}

void sub_213E7D798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void ActiveWord::ActiveWord(ActiveWord *this, ActiveWordMgr *a2, HmmNet *a3)
{
  *(void *)this = &unk_26C4DF0C8;
  *((void *)this + 1) = a3;
  *((void *)this + 2) = a2;
  if (*((_DWORD *)a3 + 6) == -1 || *((_DWORD *)a3 + 7) == -3)
  {
    uint64_t v4 = MemChunkAlloc(0x38uLL, 0);
    uint64_t *v4 = 0;
    v4[1] = 0;
    *((_DWORD *)v4 + 4) = -1;
    *(_OWORD *)(v4 + 3) = 0u;
    *(_OWORD *)(v4 + 5) = 0u;
    *((void *)this + 3) = v4;
    *((_DWORD *)this + 8) = 0;
LABEL_6:
    *((unsigned char *)this + 36) = 0;
    return;
  }
  *((void *)this + 3) = 0;
  uint64_t v5 = *((void *)a2 + 37873);
  if ((*(_DWORD *)(v5 + 68) & 0xFFFFFFFD) != 0 || !*(unsigned char *)(v5 + 64))
  {
    *((_DWORD *)this + 8) = 268435200;
    goto LABEL_6;
  }
  int v6 = (unsigned int *)((char *)a3 + 16);
  *((_DWORD *)this + 8) = Constraint::getMaxEndTime(*((void *)a2 + 37873), (unsigned int *)a3 + 4);
  *((unsigned char *)this + 36) = Constraint::getSuccessorRecursivePrefilteringAllowed((unsigned __int16 *)v5, v6, v7, v8, v9, v10, v11, v12);
}

void ActiveWord::~ActiveWord(ActiveWord *this)
{
  *(void *)this = &unk_26C4DF0C8;
  DgnDelete<MergedStateTransition>(*((void *)this + 3));
  *((void *)this + 3) = 0;
}

uint64_t DgnDelete<MergedStateTransition>(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    DgnArray<PhnIndexSet>::releaseAll(result + 40);
    DgnIArray<Utterance *>::~DgnIArray(v1 + 24);
    uint64_t v2 = (void *)DgnIArray<Utterance *>::~DgnIArray(v1);
    return MemChunkFree(v2, 0);
  }
  return result;
}

uint64_t ActiveWord::sizeObject(uint64_t a1, uint64_t a2)
{
  int v2 = gShadowDiagnosticShowIdealizedObjectSizes;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v3 = 4;
  }
  else {
    uint64_t v3 = 8;
  }
  if (a2 == 3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = v3;
  }
  if (a2 == 2)
  {
    uint64_t v5 = v3 + v4;
  }
  else
  {
    int v6 = a2;
    uint64_t v8 = *(void *)(a1 + 8);
    if (v8)
    {
      v4 += (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 280))(v8, a2);
      int v2 = gShadowDiagnosticShowIdealizedObjectSizes;
    }
    BOOL v9 = v2 == 0;
    uint64_t v10 = 4;
    if (v9) {
      uint64_t v10 = 8;
    }
    if (v6 == 3) {
      uint64_t v3 = 0;
    }
    else {
      uint64_t v3 = v10;
    }
    uint64_t v5 = v3 + v4;
    uint64_t v11 = *(void *)(a1 + 24);
    if (v11) {
      v3 += sizeObject(v11, v6);
    }
  }
  return v3 + v5;
}

uint64_t ActiveWordNoCoartBase::sizeObject(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t result = ActiveWord::sizeObject(a1, a2);
  if (v2 != 3) {
    ++result;
  }
  return result;
}

void ActiveWordNonAcoustic::ActiveWordNonAcoustic(ActiveWordNonAcoustic *this, ActiveWordMgr *a2, HmmNet *a3)
{
  ActiveWord::ActiveWord(this, a2, a3);
  *(void *)uint64_t v4 = &unk_26C4E2D48;
  *((unsigned char *)this + 37) = HmmNet::unpackNonAcoustic(*(HmmNet **)(v4 + 8));
}

void sub_213E7DAB8(_Unwind_Exception *a1)
{
  ActiveWord::~ActiveWord(v1);
  _Unwind_Resume(a1);
}

void ActiveWordNonAcoustic::~ActiveWordNonAcoustic(ActiveWordNonAcoustic *this)
{
  ActiveWord::~ActiveWord(this);

  JUMPOUT(0x216698730);
}

void ActiveWordSilence::ActiveWordSilence(ActiveWordSilence *this, ActiveWordMgr *a2, HmmNet *a3)
{
  ActiveWord::ActiveWord(this, a2, a3);
  *(void *)uint64_t v4 = &unk_26C4E1468;
  *((unsigned char *)this + 37) = HmmNet::unpackSilence(*(HmmNet **)(v4 + 8));
}

void sub_213E7DB58(_Unwind_Exception *a1)
{
  ActiveWord::~ActiveWord(v1);
  _Unwind_Resume(a1);
}

void ActiveWordSilence::~ActiveWordSilence(ActiveWordSilence *this)
{
  ActiveWord::~ActiveWord(this);

  JUMPOUT(0x216698730);
}

void ActiveWordNoCoart::ActiveWordNoCoart(ActiveWordNoCoart *this, ActiveWordMgr *a2, HmmNet *a3)
{
  ActiveWord::ActiveWord(this, a2, a3);
  void *v4 = &unk_26C4E1428;
  uint64_t v5 = (unsigned int *)v4[1];
  uint64_t v7 = v5 + 4;
  unint64_t v6 = v5[4];
  v13[0] = *(_WORD *)(**(void **)(*((void *)this + 2) + 302976) + 56);
  v13[1] = v13[0];
  v12[0] = v13[0];
  v12[1] = v13[0];
  uint64_t v8 = *(void *)(**(void **)VocMgr::smpVocMgr + ((v6 >> 22) & 0x3F8));
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  char v9 = (*(uint64_t (**)(unsigned int *))(*(void *)v5 + 40))(v5);
  Voc::getPics(v8, v7, 0, v13, v12, v9, (unsigned int *)&v10);
  *((unsigned char *)this + 37) = HmmNet::unpackNoCoart(*((void *)this + 1), v10, v11);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v10);
}

void sub_213E7DCB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va);
  ActiveWord::~ActiveWord(v2);
  _Unwind_Resume(a1);
}

void ActiveWordNoCoart::~ActiveWordNoCoart(ActiveWordNoCoart *this)
{
  ActiveWord::~ActiveWord(this);

  JUMPOUT(0x216698730);
}

uint64_t ActiveWordNoCoartBase::seedInPort(uint64_t this, unsigned __int16 a2, int a3, int a4)
{
  uint64_t v4 = *(void *)(this + 8);
  uint64_t v5 = *(void *)(*(void *)(v4 + 56) + 8 * *(unsigned __int8 *)(this + 37));
  if (*(__int16 *)(v5 + 8) > a3)
  {
    int v6 = *(unsigned __int8 *)(v4 + 114);
    *(_WORD *)(v5 + 8) = a3;
    *(_DWORD *)uint64_t v5 = a4;
    if (!v6) {
      *(_DWORD *)(v5 + 4) = 0;
    }
    *(unsigned char *)(v4 + 112) = 1;
  }
  return this;
}

void ActiveWordCoartBase::ActiveWordCoartBase(ActiveWordCoartBase *this, ActiveWordMgr *a2, HmmNet *a3)
{
  ActiveWord::ActiveWord(this, a2, a3);
  *(void *)uint64_t v4 = &unk_26C4E2498;
  *(void *)(v4 + 48) = 0;
  *(_DWORD *)(v4 + 56) = 0;
  *(_WORD *)(v4 + 38) = -1;
  *(_WORD *)(v4 + 42) = -1;
  uint64_t v5 = **(int ***)(*(void *)(v4 + 16) + 302976);
  __int16 v6 = *((_WORD *)v5 + 28);
  *(_WORD *)(v4 + 44) = v6;
  *(_WORD *)(v4 + 40) = v6;
  int v7 = *v5;
  size_t v8 = (v7 - 2);
  if (v7 == 2)
  {
    size_t v8 = 0;
    char v9 = 0;
  }
  else
  {
    char v9 = MemChunkAlloc((v7 - 2), 0);
    *((void *)this + 6) = v9;
    *((_DWORD *)this + 14) = v8;
  }
  memset(v9, 255, v8);
}

void sub_213E7DE04(_Unwind_Exception *a1)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  ActiveWord::~ActiveWord(v1);
  _Unwind_Resume(a1);
}

void ActiveWordCoartBase::~ActiveWordCoartBase(ActiveWordCoartBase *this)
{
  *(void *)this = &unk_26C4E2498;
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 48);

  ActiveWord::~ActiveWord(this);
}

uint64_t ActiveWordCoartBase::sizeObject(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v4 = ActiveWord::sizeObject(a1, a2);
  if (v2 == 3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v5 = 8;
    uint64_t v6 = 12;
    if (gShadowDiagnosticShowIdealizedObjectSizes) {
      uint64_t v6 = 8;
    }
    if ((v2 & 0xFFFFFFFE) != 2)
    {
      uint64_t v7 = *(unsigned int *)(a1 + 56);
      if ((int)v7 >= 1) {
        v6 += v7;
      }
      uint64_t v5 = 8;
    }
  }
  return v5 + v6 + v4;
}

uint64_t ActiveWordCoartBase::getEndPics(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int **)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v26 = *(void *)(**(void **)VocMgr::smpVocMgr + (((unint64_t)v5[4] >> 22) & 0x3F8));
  uint64_t v7 = **(void **)(v6 + 302976);
  __int16 v8 = *(_WORD *)(v7 + 56);
  LODWORD(v6) = *(_DWORD *)(v6 + 4);
  *(_WORD *)(a1 + 44) = v8;
  *(_WORD *)(a1 + 40) = v8;
  BOOL v9 = v6 == 1;
  if (v6 == 1) {
    int v10 = 3;
  }
  else {
    int v10 = 2;
  }
  if (v9) {
    uint64_t v11 = 38;
  }
  else {
    uint64_t v11 = 42;
  }
  if (v9) {
    uint64_t v12 = 42;
  }
  else {
    uint64_t v12 = 38;
  }
  if (a2 != 0xFFFF) {
    __int16 v8 = a2;
  }
  *(_WORD *)(a1 + v11) = v8;
  if (a2 == 0xFFFF) {
    unsigned int v13 = v10;
  }
  else {
    unsigned int v13 = 0;
  }
  unsigned int v14 = *(_DWORD *)v7 - 2;
  *(_DWORD *)(a3 + 8) = 0;
  unsigned int v15 = *(_DWORD *)(a3 + 12);
  uint64_t v16 = v14 - v15;
  if (v14 > v15)
  {
    DgnArray<RuleDesc>::reallocElts(a3, v16, 0);
    uint64_t v5 = *(unsigned int **)(a1 + 8);
  }
  uint64_t v17 = (void *)(*(uint64_t (**)(unsigned int *, uint64_t))(*(void *)v5 + 192))(v5, v16);
  uint64_t v18 = *(_DWORD **)(a1 + 8);
  if (v18[6] == -1) {
    char v19 = 1;
  }
  else {
    char v19 = (*(uint64_t (**)(_DWORD *))(*(void *)v18 + 40))(v18);
  }
  v27[0] = 0;
  v27[1] = 0;
  int v20 = (unsigned __int16)v14;
  if ((_WORD)v14)
  {
    unsigned int v21 = 0;
    do
    {
      if ((*(_DWORD *)(*v17 + 4 * (v21 >> 5)) >> v21))
      {
        *(_WORD *)(a1 + v12) = v21;
        Voc::getPics(v26, (_DWORD *)(*(void *)(a1 + 8) + 16), v13, (__int16 *)(a1 + 38), (_WORD *)(a1 + 42), v19, (unsigned int *)v27);
        uint64_t v22 = v27[0];
        uint64_t v23 = *(void *)a3 + 12 * *(unsigned int *)(a3 + 8);
        uint64_t v24 = *(void *)v27[0];
        *(_WORD *)(v23 + 8) = *(_WORD *)(v27[0] + 8);
        *(void *)uint64_t v23 = v24;
        *(unsigned char *)(v23 + 10) = *(unsigned char *)(v22 + 10);
        *(unsigned char *)(v23 + 11) = *(unsigned char *)(v22 + 11);
        ++*(_DWORD *)(a3 + 8);
      }
      ++v21;
    }
    while (v20 != v21);
  }
  return DgnIArray<Utterance *>::~DgnIArray((uint64_t)v27);
}

void sub_213E7E100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ActiveWordCoartBase::seedInPort(ActiveWordCoartBase *this, unsigned int a2, int a3, int a4)
{
  uint64_t result = *(unsigned __int8 *)(*((void *)this + 6) + a2);
  if (result == 255)
  {
    uint64_t v8 = a2;
    uint64_t result = (*(uint64_t (**)(ActiveWordCoartBase *))(*(void *)this + 48))(this);
    *(unsigned char *)(*((void *)this + 6) + v8) = result;
  }
  uint64_t v9 = *((void *)this + 1);
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 8 * result);
  if (*(__int16 *)(v10 + 8) > a3)
  {
    int v11 = *(unsigned __int8 *)(v9 + 114);
    *(_WORD *)(v10 + 8) = a3;
    *(_DWORD *)uint64_t v10 = a4;
    if (!v11) {
      *(_DWORD *)(v10 + 4) = 0;
    }
    *(unsigned char *)(v9 + 112) = 1;
  }
  return result;
}

void ActiveWordCoart1::~ActiveWordCoart1(ActiveWordCoart1 *this)
{
  *(void *)this = &unk_26C4E2498;
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 48);

  ActiveWord::~ActiveWord(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26C4E2498;
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 48);
  ActiveWord::~ActiveWord(this);

  JUMPOUT(0x216698730);
}

uint64_t ActiveWordCoart1::addInPort(ActiveWordCoart1 *this, int a2)
{
  ActiveWordCoartBase::getEndPics((uint64_t)this, a2, *((void *)this + 2) + 302992);
  uint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 1) + 256))();
  uint64_t v4 = HmmNet::newInPort(*((HmmNet **)this + 1));
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 1) + 160))(*((void *)this + 1), v4, v3);
  return v4;
}

uint64_t HmmNet::newInPort(HmmNet *this)
{
  int v2 = *((_DWORD *)this + 16);
  if (*((_DWORD *)this + 11))
  {
    uint64_t v3 = 0;
    unsigned int v4 = *((_DWORD *)this + 16);
  }
  else
  {
    uint64_t v3 = MemChunkAlloc(0xCuLL, 0);
    uint64_t *v3 = 0x100000001;
    *((_DWORD *)v3 + 2) = 1310740000;
    unsigned int v4 = *((_DWORD *)this + 16);
  }
  if (v4 == *((_DWORD *)this + 17))
  {
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 56, 1, 1);
    unsigned int v4 = *((_DWORD *)this + 16);
  }
  *(void *)(*((void *)this + 7) + 8 * v4) = v3;
  *((_DWORD *)this + 16) = v4 + 1;
  return v2;
}

uint64_t ActiveWordCoartN::unpackMid(ActiveWordCoartN *this)
{
  uint64_t v12 = 0;
  __int16 v2 = *(_WORD *)(**(void **)(*((void *)this + 2) + 302976) + 56);
  *((_WORD *)this + 19) = v2;
  uint64_t v3 = (__int16 *)((char *)this + 38);
  unsigned int v4 = (unsigned int *)*((void *)this + 1);
  uint64_t v5 = v4 + 4;
  uint64_t v6 = *(void *)(**(void **)VocMgr::smpVocMgr + (((unint64_t)v4[4] >> 22) & 0x3F8));
  v3[2] = v2;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  if (v4[6] == -1) {
    char v7 = 1;
  }
  else {
    char v7 = (*(uint64_t (**)(unsigned int *))(*(void *)v4 + 40))(v4);
  }
  Voc::getPics(v6, v5, 1u, v3, v3 + 2, v7, (unsigned int *)&v10);
  (*(void (**)(void, uint64_t, void, uint64_t *, char *, uint64_t))(**((void **)this + 1) + 208))(*((void *)this + 1), v10, v11, &v12, (char *)this + 72, 2);
  uint64_t v8 = v12;
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v10);
  return v8;
}

void sub_213E7E514(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void ActiveWordCoartN::ActiveWordCoartN(ActiveWordCoartN *this, ActiveWordMgr *a2, HmmNet *a3)
{
  ActiveWordCoartBase::ActiveWordCoartBase(this, a2, a3);
  *uint64_t v5 = &unk_26C4E1130;
  v5[8] = 0;
  uint64_t v6 = v5 + 8;
  v5[9] = 0;
  unint64_t v7 = *(unsigned int *)(v5[1] + 16);
  int v8 = *(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(**(void **)VocMgr::smpVocMgr + ((v7 >> 22) & 0x3F8))
                                                   + 48)
                                       + 32)
                           + 2 * (v7 & 0xFFFFFF));
  if ((*(unsigned int (**)(HmmNet *))(*(void *)a3 + 168))(a3))
  {
    uint64_t v9 = (*(uint64_t (**)(void))(**((void **)this + 1) + 128))(*((void *)this + 1));
    *(void *)uint64_t v9 = 0x100000001;
    *(_DWORD *)(v9 + 8) = 1310740000;
    *(void *)(v9 + 12) = 0;
    *(_DWORD *)(v9 + 20) = -65536;
    *uint64_t v6 = v9;
    uint64_t v10 = unpackMidCallBack;
    if (v8 == 2)
    {
      *((void *)this + 9) = v9;
      uint64_t v10 = unpackEndCallBack;
    }
    (*(void (**)(HmmNet *, uint64_t (*)(void *), ActiveWordCoartN *, uint64_t))(*(void *)a3 + 176))(a3, v10, this, 3);
  }
  else
  {
    ActiveWordCoartBase::getEndPics((uint64_t)this, 0xFFFF, *((void *)this + 2) + 302992);
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 1) + 256))(*((void *)this + 1), *((void *)this + 2) + 302992, 1);
    if (v8 == 2)
    {
      uint64_t v11 = (*(uint64_t (**)(void))(**((void **)this + 1) + 128))(*((void *)this + 1));
      *(void *)uint64_t v11 = 0x100000001;
      *(_DWORD *)(v11 + 8) = 1310740000;
      *(void *)(v11 + 12) = 0;
      *(_DWORD *)(v11 + 20) = -65536;
      *((void *)this + 8) = v11;
      *((void *)this + 9) = v11;
    }
    else
    {
      ActiveWordCoartN::unpackMid(this);
      uint64_t v12 = (*(uint64_t (**)(void))(**((void **)this + 1) + 128))(*((void *)this + 1));
      *(void *)uint64_t v12 = 0x100000001;
      *(_DWORD *)(v12 + 8) = 1310740000;
      *(void *)(v12 + 12) = 0;
      *(_DWORD *)(v12 + 20) = -65536;
      *((void *)this + 8) = v12;
      (*(void (**)(void))(**((void **)this + 1) + 120))(*((void *)this + 1));
    }
    (*(void (**)(void))(**((void **)this + 1) + 120))(*((void *)this + 1));
  }
}

void sub_213E7E7FC(_Unwind_Exception *a1)
{
  ActiveWordCoartBase::~ActiveWordCoartBase(v1);
  _Unwind_Resume(a1);
}

uint64_t ActiveWordCoartN::addInPort(ActiveWordCoartN *this, __int16 a2)
{
  uint64_t v3 = *((void *)this + 2);
  __int16 v4 = *(_WORD *)(**(void **)(v3 + 302976) + 56);
  LODWORD(v3) = *(_DWORD *)(v3 + 4);
  BOOL v5 = v3 == 1;
  if (v3 == 1) {
    __int16 v6 = a2;
  }
  else {
    __int16 v6 = v4;
  }
  if (!v5) {
    __int16 v4 = a2;
  }
  *((_WORD *)this + 19) = v6;
  unint64_t v7 = (__int16 *)((char *)this + 38);
  *((_WORD *)this + 21) = v4;
  int v8 = (_WORD *)((char *)this + 42);
  uint64_t v9 = (unsigned int *)*((void *)this + 1);
  uint64_t v10 = v9 + 4;
  if (v5) {
    unsigned int v11 = 2;
  }
  else {
    unsigned int v11 = 3;
  }
  uint64_t v12 = *(void *)(**(void **)VocMgr::smpVocMgr + (((unint64_t)v9[4] >> 22) & 0x3F8));
  v16[0] = 0;
  v16[1] = 0;
  if (v9[6] == -1) {
    char v13 = 1;
  }
  else {
    char v13 = (*(uint64_t (**)(unsigned int *))(*(void *)v9 + 40))(v9);
  }
  Voc::getPics(v12, v10, v11, v7, v8, v13, (unsigned int *)v16);
  uint64_t v14 = HmmNet::unpackInPort(*((HmmNet **)this + 1), v16[0], *((void *)this + 8));
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v16);
  return v14;
}

void sub_213E7E938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ActiveWordCoartN::~ActiveWordCoartN(ActiveWordCoartN *this)
{
  *(void *)this = &unk_26C4E2498;
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 48);

  ActiveWord::~ActiveWord(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26C4E2498;
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 48);
  ActiveWord::~ActiveWord(this);

  JUMPOUT(0x216698730);
}

uint64_t ActiveWordCoartN::sizeObject(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v3 = ActiveWordCoartBase::sizeObject(a1, a2);
  uint64_t v4 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v4 = 16;
  }
  if (v2 == 3) {
    uint64_t v4 = 0;
  }
  return v4 + v3;
}

void ActiveWordEmbeddedFst::ActiveWordEmbeddedFst(ActiveWordEmbeddedFst *this, ActiveWordMgr *a2, HmmNet *a3)
{
  ActiveWord::ActiveWord(this, a2, a3);
  *(void *)uint64_t v4 = &unk_26C4E2D08;
  *((unsigned char *)this + 37) = HmmNet::unpackEmbeddedFst(*(HmmNet **)(v4 + 8));
}

void sub_213E7EAA4(_Unwind_Exception *a1)
{
  ActiveWord::~ActiveWord(v1);
  _Unwind_Resume(a1);
}

void ActiveWordEmbeddedFst::~ActiveWordEmbeddedFst(ActiveWordEmbeddedFst *this)
{
  ActiveWord::~ActiveWord(this);

  JUMPOUT(0x216698730);
}

uint64_t ActiveWordEmbeddedFst::seedInPort(ActiveWordEmbeddedFst *this)
{
  return (*(uint64_t (**)(void, void))(**((void **)this + 1) + 112))(*((void *)this + 1), *((unsigned __int8 *)this + 37));
}

uint64_t Active::Active(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(unsigned char *)a1 = a2 == 2;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 4) = 0;
  NetMgr::NetMgr(a1 + 16);
  *(void *)(a1 + 302992) = a5;
  *(void *)(a1 + 303008) = 0;
  *(void *)(a1 + 303016) = 0;
  *(void *)(a1 + 303000) = 0;
  Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::Hash(a1 + 303024, 0, 256);
  HashKEV<CWIDAC,CWIDAC,CWIDAC>::HashKEV(a1 + 303136, 0, 1);
  *(_OWORD *)(a1 + 303240) = 0u;
  return a1;
}

void sub_213E7EBEC(_Unwind_Exception *a1)
{
  Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::~Hash(v3);
  DgnIArray<Utterance *>::~DgnIArray(v1 + 303008);
  NetMgr::~NetMgr(v2);
  _Unwind_Resume(a1);
}

void Active::printSize(Active *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/active.cpp", 898, (DgnString *)&v101);
  if (v102) {
    uint64_t v16 = (char *)v101;
  }
  else {
    uint64_t v16 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_2140B33BB, a3, &byte_2140B33BB, v16);
  DgnString::~DgnString((DgnString *)&v101);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_2140B33BB);
  uint64_t v21 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/active.cpp", 899, (DgnString *)&v101);
  if (v102) {
    uint64_t v26 = (char *)v101;
  }
  else {
    uint64_t v26 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v22, v23, v24, v25, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v26, 4, 4, 0);
  uint64_t v96 = a3;
  DgnString::~DgnString((DgnString *)&v101);
  *a4 += 4;
  *a5 += 4;
  unint64_t v100 = 0;
  unint64_t v101 = 0;
  unint64_t v99 = 0;
  ActiveWordMgr::printSize((Active *)((char *)this + 16), 0xFFFFFFFFLL, (a3 + 1), &v101, &v100, &v99);
  *a4 += v101;
  *a5 += v100;
  int64x2_t v97 = a6;
  *a6 += v99;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/active.cpp", 902, (DgnString *)&v101);
  if (v102) {
    long long v31 = (char *)v101;
  }
  else {
    long long v31 = &byte_2140B33BB;
  }
  uint64_t v98 = (a3 + 1);
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v27, v28, v29, v30, v98, &byte_2140B33BB, (34 - a3), (34 - a3), v31, 1, 1, 0);
  uint64_t v32 = (unsigned int *)((char *)this + 303112);
  DgnString::~DgnString((DgnString *)&v101);
  ++*a4;
  ++*a5;
  uint64_t v33 = (char *)this + 303048;
  uint64_t v34 = sizeObject((char *)this + 303048);
  uint64_t v35 = 12;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
  {
    uint64_t v35 = 8;
    char v36 = 2;
  }
  else
  {
    char v36 = 3;
  }
  unint64_t v37 = (unint64_t)*v32 << v36;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v38 = 8;
  }
  else {
    uint64_t v38 = 16;
  }
  uint64_t v39 = v34 + v38 + v35 + v37 + 13;
  uint64_t v40 = sizeObject(v33);
  uint64_t v41 = 12;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
  {
    uint64_t v41 = 8;
    char v42 = 2;
  }
  else
  {
    char v42 = 3;
  }
  unint64_t v43 = (unint64_t)*v32 << v42;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v44 = 8;
  }
  else {
    uint64_t v44 = 16;
  }
  uint64_t v45 = v40 + v44 + v41 + v43 + 13;
  uint64_t v46 = sizeObject(v33);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/active.cpp", 903, (DgnString *)&v101);
  if (v102) {
    unint64_t v51 = (char *)v101;
  }
  else {
    unint64_t v51 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v47, v48, v49, v50, v98, &byte_2140B33BB, v21, v21, v51, v39, v45, v46);
  DgnString::~DgnString((DgnString *)&v101);
  *a4 += v39;
  *a5 += v45;
  *v97 += v46;
  int v52 = (char *)this + 303160;
  uint64_t v53 = sizeObject((char *)this + 303160);
  uint64_t v54 = 12;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
  {
    uint64_t v54 = 8;
    char v55 = 2;
  }
  else
  {
    char v55 = 3;
  }
  unint64_t v56 = (unint64_t)*((unsigned int *)this + 75806) << v55;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v57 = 4;
  }
  else {
    uint64_t v57 = 8;
  }
  uint64_t v58 = v53 + v57 + v54 + v56 + 13;
  uint64_t v59 = sizeObject(v52);
  uint64_t v60 = 12;
  if (gShadowDiagnosticShowIdealizedObjectSizes)
  {
    uint64_t v60 = 8;
    char v61 = 2;
  }
  else
  {
    char v61 = 3;
  }
  unint64_t v62 = (unint64_t)*((unsigned int *)this + 75806) << v61;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v63 = 4;
  }
  else {
    uint64_t v63 = 8;
  }
  uint64_t v64 = v59 + v63 + v60 + v62 + 13;
  uint64_t v65 = sizeObject(v52);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/active.cpp", 904, (DgnString *)&v101);
  if (v102) {
    uint64_t v70 = (char *)v101;
  }
  else {
    uint64_t v70 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v66, v67, v68, v69, v98, &byte_2140B33BB, v21, v21, v70, v58, v64, v65);
  DgnString::~DgnString((DgnString *)&v101);
  *a4 += v58;
  *a5 += v64;
  *v97 += v65;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/active.cpp", 906, (DgnString *)&v101);
  if (v102) {
    uint64_t v75 = (char *)v101;
  }
  else {
    uint64_t v75 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v71, v72, v73, v74, v98, &byte_2140B33BB, v21, v21, v75, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v101);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/active.cpp", 908, (DgnString *)&v101);
  if (v102) {
    uint64_t v80 = (char *)v101;
  }
  else {
    uint64_t v80 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v76, v77, v78, v79, v98, &byte_2140B33BB, v21, v21, v80, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v101);
  *a4 += 4;
  *a5 += 4;
  uint64_t v81 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v81 = 16;
  }
  char v82 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    char v82 = 3;
  }
  uint64_t v83 = *((unsigned int *)this + 75812);
  uint64_t v84 = (((*((_DWORD *)this + 75813) - v83) + v83) << v82) + v81;
  uint64_t v85 = (v83 << v82) + v81;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/active.cpp", 910, (DgnString *)&v101);
  if (v102) {
    uint64_t v90 = (char *)v101;
  }
  else {
    uint64_t v90 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v86, v87, v88, v89, v98, &byte_2140B33BB, v21, v21, v90, v84, v85, 0);
  DgnString::~DgnString((DgnString *)&v101);
  *a4 += v84;
  *a5 += v85;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/active.cpp", 911, (DgnString *)&v101);
  if (v102) {
    uint64_t v95 = (char *)v101;
  }
  else {
    uint64_t v95 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v91, v92, v93, v94, v96, &byte_2140B33BB, (35 - v96), (35 - v96), v95, *a4, *a5, *v97);
  DgnString::~DgnString((DgnString *)&v101);
}

void sub_213E7F264(_Unwind_Exception *a1)
{
  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

void (***Active::removeActiveWord(Active *this, ActiveWord *a2, unsigned int a3))(void)
{
  __int16 v6 = (char *)this + 303240;
  Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::remove((uint64_t)this + 303024, *((void *)a2 + 1) + 16);
  unint64_t v7 = (HmmNet *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  NetMgr::removeNet((Active *)((char *)this + 16), v7);
  uint64_t result = DgnDelete<ActiveWord>((void (***)(void))a2);
  unsigned int v9 = *((_DWORD *)v6 + 2) - 1;
  *(void *)(*(void *)v6 + 8 * a3) = *(void *)(*(void *)v6 + 8 * v9);
  *((_DWORD *)v6 + 2) = v9;
  return result;
}

uint64_t *Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::remove(uint64_t a1, uint64_t a2)
{
  uint64_t result = Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::findBucket(a1, a2);
  if (*result)
  {
    return (uint64_t *)Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::removeBucket(a1, (char **)result);
  }
  return result;
}

void (***Active::prune(void (***this)(void)))(void)
{
  uint64_t v1 = this + 37905;
  uint64_t v2 = *((unsigned int *)this + 75812);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = (Active *)this;
    do
    {
      uint64_t v4 = *(ActiveWord **)(*v1 + 8 * --v2);
      uint64_t v5 = *((void *)v4 + 1);
      if (!*(_DWORD *)(v5 + 104) && !*(unsigned char *)(v5 + 112)) {
        this = Active::removeActiveWord(v3, v4, v2);
      }
    }
    while ((unint64_t)(v2 + 1) > 1);
  }
  return this;
}

uint64_t Active::pruneTimeConstrained(Active *this, int a2)
{
  uint64_t v2 = (void *)((char *)this + 303240);
  uint64_t v3 = *((unsigned int *)this + 75812);
  if ((int)v3 < 1)
  {
    char v6 = 0;
  }
  else
  {
    char v6 = 0;
    uint64_t v7 = v3 + 1;
    unsigned int v8 = v3 - 1;
    do
    {
      unsigned int v9 = *(ActiveWord **)(*v2 + 8 * v8);
      if (*((_DWORD *)v9 + 8) <= a2)
      {
        Active::removeActiveWord(this, v9, v8);
        char v6 = 1;
      }
      --v7;
      --v8;
    }
    while (v7 > 1);
  }
  return v6 & 1;
}

uint64_t Active::newActiveWordNonAcoustic(uint64_t a1, uint64_t a2)
{
  ActiveWordMgr::newActiveWordNonAcoustic((ActiveWordMgr *)(a1 + 16), a2);
  uint64_t v5 = v4;
  Active::addActiveWord(a1, a2, v4);
  return v5;
}

void *Active::addActiveWord(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1 + 303240;
  uint64_t v11 = a3;
  unsigned int v7 = *(_DWORD *)(a1 + 303248);
  if (v7 == *(_DWORD *)(a1 + 303252) && v7 + (v7 >> 1) + 256 > v7)
  {
    DgnPrimArray<unsigned long long>::reallocElts(a1 + 303240, (v7 >> 1) + 256, 0);
    unsigned int v7 = *(_DWORD *)(v6 + 8);
  }
  *(void *)(*(void *)v6 + 8 * v7) = a3;
  *(_DWORD *)(v6 + 8) = v7 + 1;
  uint64_t result = (void *)Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::add(a1 + 303024, a2, &v11);
  if (*(unsigned char *)a1)
  {
    uint64_t v10 = a1 + 303136;
    uint64_t result = Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::findBucket(v10, a2);
    if (!*result) {
      return (void *)HashKEV<CWIDAC,CWIDAC,CWIDAC>::add(v10, a2);
    }
  }
  return result;
}

uint64_t Active::newActiveWordSilence(uint64_t a1, uint64_t a2)
{
  ActiveWordMgr::newActiveWordSilence((ActiveWordMgr *)(a1 + 16), a2);
  uint64_t v5 = v4;
  Active::addActiveWord(a1, a2, v4);
  return v5;
}

uint64_t Active::newActiveWord(uint64_t a1, unsigned int *a2, int a3, int a4, int a5)
{
  ActiveWordMgr::newActiveWord(a1 + 16, a2, a3, a4, a5);
  uint64_t v8 = v7;
  Active::addActiveWord(a1, (uint64_t)a2, v7);
  return v8;
}

uint64_t Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::add(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned int v6 = *(_DWORD *)(a1 + 12);
  if (*(_DWORD *)(a1 + 8) >= v6 >> 1) {
    HashKEV<unsigned int,unsigned int,CWIDScope>::upSize(a1, 2 * v6);
  }
  uint64_t result = CWIDAC::computeHash(a2);
  int v8 = result;
  int v9 = *(_DWORD *)(a1 + 16);
  if (v9) {
    unsigned int v10 = (-1640531527 * result) >> -(char)v9;
  }
  else {
    unsigned int v10 = 0;
  }
  uint64_t v11 = *(void *)(a1 + 80);
  uint64_t v12 = *(void *)(a1 + 32);
  if (!v12)
  {
    uint64_t result = DgnPool::addChunk((DgnPool *)(a1 + 24));
    uint64_t v12 = *(void *)(a1 + 32);
  }
  uint64_t v13 = (void *)(v11 + 8 * v10);
  *(void *)(a1 + 32) = *(void *)v12;
  int v14 = *(_DWORD *)a2;
  *(_DWORD *)(v12 + 8) = 0;
  *(_DWORD *)(v12 + 12) = v14;
  *(_DWORD *)(v12 + 16) = *(_DWORD *)(a2 + 4);
  *(_OWORD *)(v12 + 20) = *(_OWORD *)(a2 + 8);
  *(void *)(v12 + 40) = *a3;
  *(_DWORD *)(v12 + 8) = v8;
  ++*(_DWORD *)(a1 + 8);
  if (*(unsigned char *)(a1 + 20))
  {
    *(void *)uint64_t v12 = *v13;
  }
  else
  {
    *(void *)uint64_t v12 = 0;
    uint64_t v15 = (void *)*v13;
    if (*v13)
    {
      do
      {
        uint64_t v13 = v15;
        uint64_t v15 = (void *)*v15;
      }
      while (v15);
    }
  }
  *uint64_t v13 = v12;
  return result;
}

uint64_t HashKEV<CWIDAC,CWIDAC,CWIDAC>::add(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 12);
  if (*(_DWORD *)(a1 + 8) >= v4 >> 1) {
    HashKEV<unsigned int,unsigned int,CWIDScope>::upSize(a1, 2 * v4);
  }
  uint64_t result = CWIDAC::computeHash(a2);
  int v6 = result;
  int v7 = *(_DWORD *)(a1 + 16);
  if (v7) {
    unsigned int v8 = (-1640531527 * result) >> -(char)v7;
  }
  else {
    unsigned int v8 = 0;
  }
  uint64_t v9 = *(void *)(a1 + 80);
  uint64_t v10 = *(void *)(a1 + 32);
  if (!v10)
  {
    uint64_t result = DgnPool::addChunk((DgnPool *)(a1 + 24));
    uint64_t v10 = *(void *)(a1 + 32);
  }
  uint64_t v11 = (void *)(v9 + 8 * v8);
  *(void *)(a1 + 32) = *(void *)v10;
  int v12 = *(_DWORD *)a2;
  *(_DWORD *)(v10 + 8) = 0;
  *(_DWORD *)(v10 + 12) = v12;
  *(_DWORD *)(v10 + 16) = *(_DWORD *)(a2 + 4);
  *(_OWORD *)(v10 + 20) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(v10 + 8) = v6;
  ++*(_DWORD *)(a1 + 8);
  if (*(unsigned char *)(a1 + 20))
  {
    *(void *)uint64_t v10 = *v11;
  }
  else
  {
    *(void *)uint64_t v10 = 0;
    uint64_t v13 = (void *)*v11;
    if (*v11)
    {
      do
      {
        uint64_t v11 = v13;
        uint64_t v13 = (void *)*v13;
      }
      while (v13);
    }
  }
  *uint64_t v11 = v10;
  return result;
}

uint64_t Active::scoreActiveWords(uint64_t this, uint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  int v7 = (void *)(this + 303240);
  *(void *)(this + 8) = 0;
  uint64_t v8 = *(unsigned int *)(this + 303248);
  if ((int)v8 >= 1)
  {
    uint64_t v15 = this;
    unint64_t v16 = v8 + 1;
    do
    {
      uint64_t v17 = *(void **)(*v7 + 8 * (v16 - 2));
      uint64_t v18 = v17[1];
      if (*(_DWORD *)(v18 + 104) || *(unsigned char *)(v18 + 112))
      {
        if (*(_DWORD *)(v18 + 16) == -50331651) {
          int v19 = a5;
        }
        else {
          int v19 = 0;
        }
        (*(void (**)(void, uint64_t, void, void, uint64_t, uint64_t))(*v17 + 16))(*(void *)(*v7 + 8 * (v16 - 2)), a2, (v19 + a3), (v19 + a4), a6, a7);
        uint64_t v20 = (_DWORD *)v17[1];
        *(_DWORD *)(v15 + 8) += v20[26];
        this = (*(uint64_t (**)(_DWORD *))(*(void *)v20 + 72))(v20);
        *(_DWORD *)(v15 + 12) += this;
      }
      --v16;
    }
    while (v16 > 1);
  }
  return this;
}

BOOL Active::thresholdActiveWords(Active *this, int a2, __int16 a3, __int16 a4)
{
  unsigned int v4 = (void *)((char *)this + 303240);
  uint64_t v5 = *((unsigned int *)this + 75812);
  if ((int)v5 < 1)
  {
    return 0;
  }
  else
  {
    BOOL v9 = 0;
    int v10 = *((__int16 *)this + 132);
    uint64_t v11 = v5 + 1;
    unsigned int v12 = v5 - 1;
    do
    {
      uint64_t v13 = *(void *)(*(void *)(*v4 + 8 * v12) + 8);
      if (*(_DWORD *)(v13 + 104) || *(unsigned char *)(v13 + 112))
      {
        int v14 = *(_DWORD *)(v13 + 16);
        BOOL v9 = v9 || *(__int16 *)(v13 + 108) <= v10 && v14 != -50331651;
        if (v14 == -50331651) {
          __int16 v16 = a4;
        }
        else {
          __int16 v16 = 0;
        }
        HmmNet::thresholdNet((HmmNet *)v13, a2, v16 + a3);
      }
      --v11;
      --v12;
    }
    while (v11 > 1);
  }
  return v9;
}

void Active::beginActiveSyncRecog(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  *(_DWORD *)(a1 + 4) = 0;
  NetMgr::beginNetMgrSyncRecog(a1 + 16, *(unsigned int ***)(a1 + 302992), a2, a3, a4, a5);
}

void *Active::endActiveSyncRecog(Active *this)
{
  uint64_t v2 = (char *)this + 303240;
  Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::removeAll((uint64_t)this + 303024);
  HashKEV<unsigned int,unsigned int,CWIDScope>::removeAll((uint64_t)this + 303136);
  uint64_t v3 = *((unsigned int *)v2 + 2);
  if ((int)v3 >= 1)
  {
    unint64_t v4 = v3 + 1;
    do
    {
      uint64_t v5 = *(void *)(*(void *)v2 + 8 * (v4 - 2));
      int v6 = *(HmmNet **)(v5 + 8);
      *(void *)(v5 + 8) = 0;
      NetMgr::removeNet((Active *)((char *)this + 16), v6);
      DgnDelete<ActiveWord>((void (***)(void))v5);
      --v4;
    }
    while (v4 > 1);
  }
  *((_DWORD *)v2 + 2) = 0;

  return NetMgr::endNetMgrSyncRecog((Active *)((char *)this + 16));
}

uint64_t Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::removeAll(uint64_t result)
{
  uint64_t v1 = result;
  unint64_t v2 = *(unsigned int *)(result + 88);
  if (v2)
  {
    for (unint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = *(void *)(v1 + 80);
      uint64_t v5 = *(char **)(v4 + 8 * i);
      if (v5)
      {
        do
        {
          int v6 = *(char **)v5;
          int v7 = *(uint64_t (**)(char *))(v1 + 96);
          if (v7) {
            uint64_t result = v7(v5 + 12);
          }
          uint64_t v8 = *(uint64_t (**)(void *))(v1 + 104);
          if (v8) {
            uint64_t result = v8((void *)v5 + 5);
          }
          *(void *)uint64_t v5 = *(void *)(v1 + 32);
          *(void *)(v1 + 32) = v5;
          uint64_t v5 = v6;
        }
        while (v6);
        uint64_t v4 = *(void *)(v1 + 80);
        unint64_t v2 = *(unsigned int *)(v1 + 88);
      }
      *(void *)(v4 + 8 * i) = 0;
    }
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

uint64_t Active::estimateActivePelsThisFrame(Active *this, BitArray *a2)
{
  uint64_t v3 = (char *)this + 303240;
  uint64_t result = NetMgr::estimateActivePelsPrevFrame((uint64_t)this + 16, a2);
  uint64_t v5 = *((unsigned int *)v3 + 2);
  if ((int)v5 >= 1)
  {
    unint64_t v6 = v5 + 1;
    do
    {
      uint64_t result = *(void *)(*(void *)(*(void *)v3 + 8 * (v6 - 2)) + 8);
      if (*(_DWORD *)(result + 104) || *(unsigned char *)(result + 112)) {
        uint64_t result = (*(uint64_t (**)(uint64_t, BitArray *))(*(void *)result + 16))(result, a2);
      }
      --v6;
    }
    while (v6 > 1);
  }
  return result;
}

uint64_t ActiveWord::scoreActiveWord(ActiveWord *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 296))();
}

uint64_t ActiveWord::setEmbeddedFstSeedingTime(ActiveWord *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 264))();
}

uint64_t ActiveWordCoartBase::scoreActiveWord(ActiveWordCoartBase *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 296))();
}

uint64_t HmmNet::thresholdNet(HmmNet *this, int a2, __int16 a3)
{
  uint64_t result = (*(uint64_t (**)(HmmNet *))(*(void *)this + 304))(this);
  if (*((__int16 *)this + 54) > a3) {
    *((_WORD *)this + 54) = 20000;
  }
  uint64_t v6 = *((unsigned int *)this + 16);
  if ((int)v6 >= 1)
  {
    uint64_t v7 = *((void *)this + 7);
    unint64_t v8 = v6 + 1;
    do
      *(_WORD *)(*(void *)(v7 + 8 * (v8-- - 2)) + 8) = 20000;
    while (v8 > 1);
  }
  *((unsigned char *)this + 112) = 0;
  return result;
}

uint64_t Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::Hash(uint64_t a1, const char *a2, int a3)
{
  HashBase::HashBase((HashBase *)a1, a2);
  *(void *)uint64_t v5 = &unk_26C4E4678;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_DWORD *)(v5 + 72) = 0;
  *(void *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 88) = 0;
  int v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  v13[1] = 0x3FFF;
  long long v14 = xmmword_2140866D0;
  int v7 = gShadowDiagnosticShowIdealizedObjectSizes;
  int v8 = sizeObject((uint64_t)v13, 2);
  if (v7) {
    int v9 = 8;
  }
  else {
    int v9 = 12;
  }
  int v10 = v9 + v8;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    int v11 = 4;
  }
  else {
    int v11 = 8;
  }
  *(_DWORD *)(a1 + 24) = 48;
  *(_DWORD *)(a1 + 28) = v10 + v11;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_213E7FE60(_Unwind_Exception *a1)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::~Hash(uint64_t a1)
{
  Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::~Hash(a1);

  JUMPOUT(0x216698730);
}

uint64_t HashKEV<CWIDAC,CWIDAC,CWIDAC>::HashKEV(uint64_t a1, const char *a2, int a3)
{
  HashBase::HashBase((HashBase *)a1, a2);
  *(void *)uint64_t v5 = &unk_26C4E4C40;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_DWORD *)(v5 + 72) = 0;
  *(void *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 88) = 0;
  int v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(void *)(a1 + 96) = 0;
  v11[1] = 0x3FFF;
  long long v12 = xmmword_2140866D0;
  int v7 = gShadowDiagnosticShowIdealizedObjectSizes;
  int v8 = sizeObject((uint64_t)v11, 2);
  if (v7) {
    int v9 = 8;
  }
  else {
    int v9 = 12;
  }
  *(_DWORD *)(a1 + 24) = 48;
  *(_DWORD *)(a1 + 28) = v9 + v8;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_213E7FFB0(_Unwind_Exception *a1)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void HashKEV<CWIDAC,CWIDAC,CWIDAC>::~HashKEV(uint64_t a1)
{
  HashKEV<CWIDAC,CWIDAC,CWIDAC>::~HashKEV(a1);

  JUMPOUT(0x216698730);
}

uint64_t Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::~Hash(uint64_t a1)
{
  *(void *)a1 = &unk_26C4E4678;
  if (*(_DWORD *)(a1 + 8)) {
    Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::removeAll(a1);
  }
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));

  return MrecInitModule_sdpres_sdapi();
}

uint64_t HashKEV<CWIDAC,CWIDAC,CWIDAC>::~HashKEV(uint64_t a1)
{
  *(void *)a1 = &unk_26C4E4C40;
  if (*(_DWORD *)(a1 + 8)) {
    HashKEV<unsigned int,unsigned int,CWIDScope>::removeAll(a1);
  }
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));

  return MrecInitModule_sdpres_sdapi();
}

uint64_t Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::removeBucket(uint64_t result, char **a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *a2;
  *a2 = *(char **)*a2;
  uint64_t v4 = *(uint64_t (**)(char *))(result + 96);
  if (v4) {
    uint64_t result = v4(v3 + 12);
  }
  uint64_t v5 = *(uint64_t (**)(void *))(v2 + 104);
  if (v5) {
    uint64_t result = v5((void *)v3 + 5);
  }
  *(void *)uint64_t v3 = *(void *)(v2 + 32);
  *(void *)(v2 + 32) = v3;
  --*(_DWORD *)(v2 + 8);
  return result;
}

__n128 AcousticFormat::AcousticFormat(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  __n128 result = *(__n128 *)(a2 + 24);
  *(__n128 *)(a1 + 24) = result;
  return result;
}

uint64_t AcousticFormat::getMicrosecPerFrame(AcousticFormat *this)
{
  unsigned int v1 = *((_DWORD *)this + 3);
  if (v1 && (int v2 = *((_DWORD *)this + 6)) != 0) {
    return 1000000 * v2 / v1;
  }
  else {
    return 0;
  }
}

void MrecInitModule_user_user(void)
{
  if (!gParDebugUserDelta)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugUserDelta", (const char *)&unk_214099921, (const char *)&unk_214099921, 0, 0, 0);
    *unsigned int v1 = &unk_26C4E0858;
    gParDebugUserDelta = (uint64_t)v1;
    int v2 = (uint64_t *)GlobalParamMgr::smpGlobalParamMgr;
    GlobalParamMgr::addParam(v2, (GlobalParam **)&gParDebugUserDelta);
  }
}

void User::~User(User *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 51)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 243, (uint64_t)"user/user", 2, (uint64_t)&errStr_user_user_E_HAS_ADAPTER, a7, a8, *((_WORD *)this + 92));
  }
  if (*((_DWORD *)this + 52)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 244, (uint64_t)"user/user", 6, (uint64_t)&errStr_user_user_E_HAS_PREFILTERER, a7, a8, *((_WORD *)this + 92));
  }
  if (*((_DWORD *)this + 53)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 245, (uint64_t)"user/user", 39, (uint64_t)&errStr_user_user_E_HAS_TRANSDUCER, a7, a8, *((_WORD *)this + 92));
  }
  DgnDelete<EnvMgr>(*(EnvMgr **)this);
  DgnDelete<MulTable>(*((MulTable **)this + 1));
  DgnDelete<Imelda>(*((void *)this + 2));
  DgnDelete<VarClassMgr>(*((VarClassMgr **)this + 3));
  DgnDelete<FmpeMgr>(*((FmpeMgr **)this + 4));
  DgnDelete<OnlineConstrainedTransAccMgr>(*((void *)this + 5));
  DgnDelete<PicMgr>(*((PicMgr **)this + 6));
  DgnDelete<PelMgr>(*((PelMgr **)this + 7));
  DgnDelete<GenoneClassTree>(*((GenoneClassTree **)this + 8));
  DgnDelete<SigProcDescriptor>(*((SigProcDescriptor **)this + 9));
  DgnDelete<Lookahead>(*((Lookahead **)this + 18));
  DgnDelete<AdaptStatsHistory>(*((AdaptStatsHistory **)this + 22));
  DgnDelete<NeuralNet>(*((NeuralNet **)this + 46));
  int v9 = (DSMSetData **)*((void *)this + 24);
  if (v9) {
    DgnSharedMemSet::unrefDSMEx(v9, *((unsigned int *)this + 50));
  }
  DgnArray<BandwidthTransform>::releaseAll((uint64_t)this + 352);
  DgnArray<SigProcDescriptor>::releaseAll((uint64_t)this + 336);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 280);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 264);
  DgnArray<DgnString>::releaseAll((uint64_t)this + 248);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 224);
  FileHistory::~FileHistory((User *)((char *)this + 152));
  PhnMgr::~PhnMgr((User *)((char *)this + 80));
}

MulTable *DgnDelete<MulTable>(MulTable *result)
{
  if (result)
  {
    MulTable::~MulTable(result);
    return (MulTable *)MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t DgnDelete<Imelda>(uint64_t result)
{
  if (result)
  {
    unsigned int v1 = (void *)result;
    LinearTransform::~LinearTransform((LinearTransform *)(result + 8));
    return MemChunkFree(v1, 0);
  }
  return result;
}

VarClassMgr *DgnDelete<VarClassMgr>(VarClassMgr *result)
{
  if (result)
  {
    VarClassMgr::~VarClassMgr(result);
    return (VarClassMgr *)MemChunkFree(v1, 0);
  }
  return result;
}

FmpeMgr *DgnDelete<FmpeMgr>(FmpeMgr *result)
{
  if (result)
  {
    FmpeMgr::~FmpeMgr(result);
    return (FmpeMgr *)MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t DgnDelete<OnlineConstrainedTransAccMgr>(uint64_t result)
{
  if (result)
  {
    unsigned int v1 = (void *)result;
    DgnPrimArray<unsigned int>::~DgnPrimArray(result + 32);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(v1 + 2));
    return MemChunkFree(v1, 0);
  }
  return result;
}

PicMgr *DgnDelete<PicMgr>(PicMgr *result)
{
  if (result)
  {
    PicMgr::~PicMgr(result);
    return (PicMgr *)MemChunkFree(v1, 0);
  }
  return result;
}

PelMgr *DgnDelete<PelMgr>(PelMgr *result)
{
  if (result)
  {
    PelMgr::~PelMgr(result);
    return (PelMgr *)MemChunkFree(v1, 0);
  }
  return result;
}

GenoneClassTree *DgnDelete<GenoneClassTree>(GenoneClassTree *result)
{
  if (result)
  {
    GenoneClassTree::~GenoneClassTree(result);
    return (GenoneClassTree *)MemChunkFree(v1, 0);
  }
  return result;
}

SigProcDescriptor *DgnDelete<SigProcDescriptor>(SigProcDescriptor *result)
{
  if (result)
  {
    SigProcDescriptor::~SigProcDescriptor(result);
    return (SigProcDescriptor *)MemChunkFree(v1, 0);
  }
  return result;
}

Lookahead *DgnDelete<Lookahead>(Lookahead *result)
{
  if (result)
  {
    Lookahead::~Lookahead(result);
    return (Lookahead *)MemChunkFree(v1, 0);
  }
  return result;
}

AdaptStatsHistory *DgnDelete<AdaptStatsHistory>(AdaptStatsHistory *result)
{
  if (result)
  {
    AdaptStatsHistory::~AdaptStatsHistory(result);
    return (AdaptStatsHistory *)MemChunkFree(v1, 0);
  }
  return result;
}

NeuralNet *DgnDelete<NeuralNet>(NeuralNet *result)
{
  if (result)
  {
    NeuralNet::~NeuralNet(result);
    return (NeuralNet *)MemChunkFree(v1, 0);
  }
  return result;
}

void User::printSize(User *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 273, (DgnString *)&v213);
  if (v214) {
    __int16 v16 = (void *)v213;
  }
  else {
    __int16 v16 = &unk_214099921;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_214099921, a3, &unk_214099921, v16);
  DgnString::~DgnString((DgnString *)&v213);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_214099921);
  uint64_t v21 = *(EnvMgr **)this;
  if (*(void *)this)
  {
    unint64_t v212 = 0;
    unint64_t v213 = 0;
    uint64_t v22 = (a3 + 1);
    unint64_t v211 = 0;
    EnvMgr::printSize(v21, 0xFFFFFFFFLL, v22, &v213, &v212, &v211);
    *a4 += v213;
    *a5 += v212;
    *a6 += v211;
  }
  else
  {
    uint64_t v22 = (a3 + 1);
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v23 = 4;
  }
  else {
    uint64_t v23 = 8;
  }
  uint64_t v24 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 274, (DgnString *)&v213);
  if (v214) {
    uint64_t v29 = (void *)v213;
  }
  else {
    uint64_t v29 = &unk_214099921;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v25, v26, v27, v28, v22, &unk_214099921, (34 - a3), (34 - a3), v29, v23, v23, 0);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += v23;
  *a5 += v23;
  uint64_t v30 = (MulTable *)*((void *)this + 1);
  if (v30)
  {
    unint64_t v212 = 0;
    unint64_t v213 = 0;
    unint64_t v211 = 0;
    MulTable::printSize(v30, 0xFFFFFFFFLL, v22, &v213, &v212, &v211);
    *a4 += v213;
    *a5 += v212;
    *a6 += v211;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v31 = 4;
  }
  else {
    uint64_t v31 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 276, (DgnString *)&v213);
  if (v214) {
    char v36 = (void *)v213;
  }
  else {
    char v36 = &unk_214099921;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v32, v33, v34, v35, v22, &unk_214099921, (34 - a3), (34 - a3), v36, v31, v31, 0);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += v31;
  *a5 += v31;
  unint64_t v37 = (Imelda *)*((void *)this + 2);
  if (v37)
  {
    unint64_t v212 = 0;
    unint64_t v213 = 0;
    unint64_t v211 = 0;
    Imelda::printSize(v37, 0xFFFFFFFFLL, v22, &v213, &v212, &v211);
    *a4 += v213;
    *a5 += v212;
    *a6 += v211;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v38 = 4;
  }
  else {
    uint64_t v38 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 277, (DgnString *)&v213);
  if (v214) {
    unint64_t v43 = (void *)v213;
  }
  else {
    unint64_t v43 = &unk_214099921;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v39, v40, v41, v42, v22, &unk_214099921, (34 - a3), (34 - a3), v43, v38, v38, 0);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += v38;
  *a5 += v38;
  uint64_t v44 = (VarClassMgr *)*((void *)this + 3);
  if (v44)
  {
    unint64_t v212 = 0;
    unint64_t v213 = 0;
    unint64_t v211 = 0;
    VarClassMgr::printSize(v44, 0xFFFFFFFFLL, v22, &v213, &v212, &v211);
    *a4 += v213;
    *a5 += v212;
    *a6 += v211;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v45 = 4;
  }
  else {
    uint64_t v45 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 279, (DgnString *)&v213);
  if (v214) {
    uint64_t v50 = (void *)v213;
  }
  else {
    uint64_t v50 = &unk_214099921;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v46, v47, v48, v49, v22, &unk_214099921, (34 - a3), (34 - a3), v50, v45, v45, 0);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += v45;
  *a5 += v45;
  unint64_t v51 = (FmpeMgr *)*((void *)this + 4);
  if (v51)
  {
    unint64_t v212 = 0;
    unint64_t v213 = 0;
    unint64_t v211 = 0;
    FmpeMgr::printSize(v51, 0xFFFFFFFFLL, v22, &v213, &v212, &v211);
    *a4 += v213;
    *a5 += v212;
    *a6 += v211;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v52 = 4;
  }
  else {
    uint64_t v52 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 280, (DgnString *)&v213);
  if (v214) {
    uint64_t v57 = (void *)v213;
  }
  else {
    uint64_t v57 = &unk_214099921;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v53, v54, v55, v56, v22, &unk_214099921, (34 - a3), (34 - a3), v57, v52, v52, 0);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += v52;
  *a5 += v52;
  uint64_t v58 = (OnlineConstrainedTransAccMgr *)*((void *)this + 5);
  if (v58)
  {
    unint64_t v212 = 0;
    unint64_t v213 = 0;
    unint64_t v211 = 0;
    OnlineConstrainedTransAccMgr::printSize(v58, 0xFFFFFFFFLL, v22, &v213, &v212, &v211);
    *a4 += v213;
    *a5 += v212;
    *a6 += v211;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v59 = 4;
  }
  else {
    uint64_t v59 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 282, (DgnString *)&v213);
  if (v214) {
    uint64_t v64 = (void *)v213;
  }
  else {
    uint64_t v64 = &unk_214099921;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v60, v61, v62, v63, v22, &unk_214099921, (34 - a3), (34 - a3), v64, v59, v59, 0);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += v59;
  *a5 += v59;
  uint64_t v65 = (PicMgr *)*((void *)this + 6);
  if (v65)
  {
    unint64_t v212 = 0;
    unint64_t v213 = 0;
    unint64_t v211 = 0;
    PicMgr::printSize(v65, 0xFFFFFFFFLL, v22, &v213, &v212, &v211);
    *a4 += v213;
    *a5 += v212;
    *a6 += v211;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v66 = 4;
  }
  else {
    uint64_t v66 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 283, (DgnString *)&v213);
  if (v214) {
    uint64_t v71 = (void *)v213;
  }
  else {
    uint64_t v71 = &unk_214099921;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v67, v68, v69, v70, v22, &unk_214099921, (34 - a3), (34 - a3), v71, v66, v66, 0);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += v66;
  *a5 += v66;
  uint64_t v72 = (PelMgr *)*((void *)this + 7);
  if (v72)
  {
    unint64_t v212 = 0;
    unint64_t v213 = 0;
    unint64_t v211 = 0;
    PelMgr::printSize(v72, 0xFFFFFFFFLL, v22, &v213, &v212, &v211);
    *a4 += v213;
    *a5 += v212;
    *a6 += v211;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v73 = 4;
  }
  else {
    uint64_t v73 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 284, (DgnString *)&v213);
  if (v214) {
    uint64_t v78 = (void *)v213;
  }
  else {
    uint64_t v78 = &unk_214099921;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v74, v75, v76, v77, v22, &unk_214099921, (34 - a3), (34 - a3), v78, v73, v73, 0);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += v73;
  *a5 += v73;
  uint64_t v79 = (GenoneClassTree *)*((void *)this + 8);
  if (v79)
  {
    unint64_t v212 = 0;
    unint64_t v213 = 0;
    unint64_t v211 = 0;
    GenoneClassTree::printSize(v79, 0xFFFFFFFFLL, v22, &v213, &v212, &v211);
    *a4 += v213;
    *a5 += v212;
    *a6 += v211;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v80 = 4;
  }
  else {
    uint64_t v80 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 285, (DgnString *)&v213);
  if (v214) {
    uint64_t v85 = (void *)v213;
  }
  else {
    uint64_t v85 = &unk_214099921;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v81, v82, v83, v84, v22, &unk_214099921, (34 - a3), (34 - a3), v85, v80, v80, 0);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += v80;
  *a5 += v80;
  uint64_t v86 = (SigProcDescriptor *)*((void *)this + 9);
  if (v86)
  {
    unint64_t v212 = 0;
    unint64_t v213 = 0;
    unint64_t v211 = 0;
    SigProcDescriptor::printSize(v86, 0xFFFFFFFFLL, v22, &v213, &v212, &v211);
    *a4 += v213;
    *a5 += v212;
    *a6 += v211;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v87 = 4;
  }
  else {
    uint64_t v87 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 287, (DgnString *)&v213);
  if (v214) {
    uint64_t v92 = (void *)v213;
  }
  else {
    uint64_t v92 = &unk_214099921;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, v22, &unk_214099921, (34 - a3), (34 - a3), v92, v87, v87, 0);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += v87;
  *a5 += v87;
  unint64_t v212 = 0;
  unint64_t v213 = 0;
  unint64_t v211 = 0;
  PhnMgr::printSize((User *)((char *)this + 80), 0xFFFFFFFFLL, v22, &v213, &v212, &v211);
  *a4 += v213;
  *a5 += v212;
  *a6 += v211;
  uint64_t v93 = (Lookahead *)*((void *)this + 18);
  if (v93)
  {
    unint64_t v212 = 0;
    unint64_t v213 = 0;
    unint64_t v211 = 0;
    Lookahead::printSize(v93, 0xFFFFFFFFLL, v22, &v213, &v212, &v211);
    *a4 += v213;
    *a5 += v212;
    *a6 += v211;
  }
  uint64_t v210 = a3;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v94 = 4;
  }
  else {
    uint64_t v94 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 290, (DgnString *)&v213);
  if (v214) {
    unint64_t v99 = (void *)v213;
  }
  else {
    unint64_t v99 = &unk_214099921;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v95, v96, v97, v98, v22, &unk_214099921, (34 - a3), (34 - a3), v99, v94, v94, 0);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += v94;
  *a5 += v94;
  uint64_t v100 = sizeObject((uint64_t)this + 152, 0);
  uint64_t v101 = sizeObject((uint64_t)this + 152, 1);
  uint64_t v102 = sizeObject((uint64_t)this + 152, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 292, (DgnString *)&v213);
  if (v214) {
    uint64_t v107 = (void *)v213;
  }
  else {
    uint64_t v107 = &unk_214099921;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v103, v104, v105, v106, v22, &unk_214099921, v24, v24, v107, v100, v101, v102);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += v100;
  *a5 += v101;
  *a6 += v102;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v108 = 4;
  }
  else {
    uint64_t v108 = 8;
  }
  uint64_t v109 = *((void *)this + 22);
  if (v109)
  {
    uint64_t v110 = sizeObject(v109, 0) + v108;
    uint64_t v111 = *((void *)this + 22);
    if (gShadowDiagnosticShowIdealizedObjectSizes) {
      uint64_t v108 = 4;
    }
    else {
      uint64_t v108 = 8;
    }
    if (v111 && (v108 += sizeObject(v111, 1), (uint64_t v112 = *((void *)this + 22)) != 0)) {
      uint64_t v113 = sizeObject(v112, 3);
    }
    else {
      uint64_t v113 = 0;
    }
  }
  else
  {
    uint64_t v113 = 0;
    uint64_t v110 = v108;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 294, (DgnString *)&v213);
  if (v214) {
    uint64_t v118 = (void *)v213;
  }
  else {
    uint64_t v118 = &unk_214099921;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v114, v115, v116, v117, v22, &unk_214099921, v24, v24, v118, v110, v108, v113);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += v110;
  *a5 += v108;
  *a6 += v113;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 295, (DgnString *)&v213);
  if (v214) {
    unint64_t v123 = (void *)v213;
  }
  else {
    unint64_t v123 = &unk_214099921;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v119, v120, v121, v122, v22, &unk_214099921, v24, v24, v123, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 297, (DgnString *)&v213);
  if (v214) {
    int64x2_t v128 = (void *)v213;
  }
  else {
    int64x2_t v128 = &unk_214099921;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v124, v125, v126, v127, v22, &unk_214099921, v24, v24, v128, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v213);
  ++*a4;
  ++*a5;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v129 = 4;
  }
  else {
    uint64_t v129 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 298, (DgnString *)&v213);
  if (v214) {
    int64x2_t v134 = (void *)v213;
  }
  else {
    int64x2_t v134 = &unk_214099921;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v130, v131, v132, v133, v22, &unk_214099921, v24, v24, v134, v129, v129, 0);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += v129;
  *a5 += v129;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 299, (DgnString *)&v213);
  if (v214) {
    int64x2_t v139 = (void *)v213;
  }
  else {
    int64x2_t v139 = &unk_214099921;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v135, v136, v137, v138, v22, &unk_214099921, v24, v24, v139, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 300, (DgnString *)&v213);
  if (v214) {
    v144 = (void *)v213;
  }
  else {
    v144 = &unk_214099921;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v140, v141, v142, v143, v22, &unk_214099921, v24, v24, v144, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 302, (DgnString *)&v213);
  if (v214) {
    v149 = (void *)v213;
  }
  else {
    v149 = &unk_214099921;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v145, v146, v147, v148, v22, &unk_214099921, v24, v24, v149, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 304, (DgnString *)&v213);
  if (v214) {
    v154 = (void *)v213;
  }
  else {
    v154 = &unk_214099921;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v150, v151, v152, v153, v22, &unk_214099921, v24, v24, v154, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 306, (DgnString *)&v213);
  if (v214) {
    v159 = (void *)v213;
  }
  else {
    v159 = &unk_214099921;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v155, v156, v157, v158, v22, &unk_214099921, v24, v24, v159, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v160 = 12;
  }
  else {
    uint64_t v160 = 16;
  }
  uint64_t v161 = *((unsigned int *)this + 58);
  unsigned int v162 = *((_DWORD *)this + 59);
  if (v162 >= v161)
  {
    uint64_t v163 = 0;
    if ((int)v161 > 0) {
      v160 += 4 * (v161 - 1) + 4;
    }
    uint64_t v164 = v160 + 4 * (v162 - v161);
  }
  else
  {
    uint64_t v163 = 4 * v161;
    uint64_t v164 = v160;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 308, (DgnString *)&v213);
  if (v214) {
    v169 = (void *)v213;
  }
  else {
    v169 = &unk_214099921;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v165, v166, v167, v168, v22, &unk_214099921, v24, v24, v169, v164, v160, v163);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += v164;
  *a5 += v160;
  *a6 += v163;
  uint64_t v170 = sizeObject((uint64_t)this + 240, 0);
  uint64_t v171 = sizeObject((uint64_t)this + 240, 1);
  uint64_t v172 = sizeObject((uint64_t)this + 240, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 310, (DgnString *)&v213);
  if (v214) {
    v177 = (void *)v213;
  }
  else {
    v177 = &unk_214099921;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v173, v174, v175, v176, v22, &unk_214099921, v24, v24, v177, v170, v171, v172);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += v170;
  *a5 += v171;
  *a6 += v172;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 312, (DgnString *)&v213);
  if (v214) {
    v182 = (void *)v213;
  }
  else {
    v182 = &unk_214099921;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v178, v179, v180, v181, v22, &unk_214099921, v24, v24, v182, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 314, (DgnString *)&v213);
  if (v214) {
    v187 = (void *)v213;
  }
  else {
    v187 = &unk_214099921;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v183, v184, v185, v186, v22, &unk_214099921, v24, v24, v187, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += 4;
  *a5 += 4;
  uint64_t v188 = sizeObject<SigProcDescriptor>((uint64_t)this + 336, 0);
  uint64_t v189 = sizeObject<SigProcDescriptor>((uint64_t)this + 336, 1);
  uint64_t v190 = sizeObject<SigProcDescriptor>((uint64_t)this + 336, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 316, (DgnString *)&v213);
  if (v214) {
    v195 = (void *)v213;
  }
  else {
    v195 = &unk_214099921;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v191, v192, v193, v194, v22, &unk_214099921, v24, v24, v195, v188, v189, v190);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += v188;
  *a5 += v189;
  *a6 += v190;
  v196 = (char *)this + 352;
  uint64_t v197 = sizeObject<BandwidthTransform>((uint64_t)this + 352, 0);
  uint64_t v198 = sizeObject<BandwidthTransform>((uint64_t)v196, 1);
  uint64_t v199 = sizeObject<BandwidthTransform>((uint64_t)v196, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 318, (DgnString *)&v213);
  if (v214) {
    v204 = (void *)v213;
  }
  else {
    v204 = &unk_214099921;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v200, v201, v202, v203, v22, &unk_214099921, v24, v24, v204, v197, v198, v199);
  DgnString::~DgnString((DgnString *)&v213);
  *a4 += v197;
  *a5 += v198;
  *a6 += v199;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 319, (DgnString *)&v213);
  if (v214) {
    v209 = (void *)v213;
  }
  else {
    v209 = &unk_214099921;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v205, v206, v207, v208, v210, &unk_214099921, (35 - v210), (35 - v210), v209, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v213);
}

void sub_213E819A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<SigProcDescriptor>(uint64_t a1, uint64_t a2)
{
  SigProcDescriptor::SigProcDescriptor((SigProcDescriptor *)v10);
  uint64_t v4 = sizeObject((uint64_t)v10, 2);
  if (a2 == 3)
  {
    uint64_t v5 = 0;
  }
  else
  {
    if (gShadowDiagnosticShowIdealizedObjectSizes) {
      uint64_t v5 = 12;
    }
    else {
      uint64_t v5 = 16;
    }
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      uint64_t v6 = v4;
      uint64_t v7 = *(unsigned int *)(a1 + 8);
      if ((int)v7 >= 1)
      {
        unint64_t v8 = v7 + 1;
        do
          v5 += sizeObject(*(void *)a1 + 344 * (v8-- - 2), a2);
        while (v8 > 1);
      }
      if (!a2) {
        v5 += v6 * (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
      }
    }
  }
  SigProcDescriptor::~SigProcDescriptor((SigProcDescriptor *)v10);
  return v5;
}

void sub_213E81B14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  SigProcDescriptor::~SigProcDescriptor((SigProcDescriptor *)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<BandwidthTransform>(uint64_t a1, int a2)
{
  LinearTransform::LinearTransform((LinearTransform *)v11);
  uint64_t v4 = sizeObject((uint64_t)&v10, 2);
  if (a2 == 3)
  {
    uint64_t v5 = 0;
  }
  else
  {
    if (gShadowDiagnosticShowIdealizedObjectSizes) {
      uint64_t v5 = 12;
    }
    else {
      uint64_t v5 = 16;
    }
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      uint64_t v6 = v4;
      uint64_t v7 = *(unsigned int *)(a1 + 8);
      if ((int)v7 >= 1)
      {
        unint64_t v8 = v7 + 1;
        do
          v5 += sizeObject(*(void *)a1 + 80 * (v8-- - 2), a2);
        while (v8 > 1);
      }
      if (!a2) {
        v5 += v6 * (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
      }
    }
  }
  LinearTransform::~LinearTransform((LinearTransform *)v11);
  return v5;
}

void sub_213E81C1C(_Unwind_Exception *a1)
{
  LinearTransform::~LinearTransform(v1);
  _Unwind_Resume(a1);
}

void User::saveUser(uint64_t a1, uint64_t a2, _DWORD *a3, int a4, uint64_t a5, ProgressCallbackHandler *a6)
{
  int64x2_t v39 = 0u;
  int64x2_t v40 = 0u;
  SnapTime::recordTime((SnapTime *)&v39, 1, 1, 1, 1);
  LoadSaveTracker::LoadSaveTracker((LoadSaveTracker *)&v38);
  DFileProgressInfo::attachProgressHandler((DFileProgressInfo *)(a1 + 240), a6, v12);
  if (a4)
  {
    BOOL v13 = a4 != 2;
  }
  else if (*(unsigned char *)(a1 + 186))
  {
    BOOL v13 = *(unsigned char *)(*(void *)a1 + 264) != 0;
  }
  else
  {
    BOOL v13 = 0;
  }
  DFileOwner::DFileOwner((DFileOwner *)v37);
  *a3 = 1;
  uint64_t v14 = DFile::openDFile(a2, (const FileSpec *)1, 3, (uint64_t)v37);
  *a3 = 2;
  (*(void (**)(uint64_t *, uint64_t))(*v14 + 96))(v14, a1 + 240);
  DFileProgressInfo::resetReportedInfo((void **)(a1 + 240));
  DFileChecksums::DFileChecksums((DFileChecksums *)v36);
  AdaptStatsHistory::saveASB(*(void (****)(void))(a1 + 176), (DFile *)v14, (DFileChecksums *)v36, v13, a5);
  EnvMgr::saveEnvMgr(*(EnvMgr **)a1, (DFile *)v14, (DFileChecksums *)v36, v13, a5);
  PhnMgr::savePhnMgr((PhnMgr *)(a1 + 80), (DFile *)v14, (DFileChecksums *)v36, v13, a5);
  MulTable::saveMulTable(*(MulTable **)(a1 + 8), (DFile *)v14, (DFileChecksums *)v36, v13, a5);
  uint64_t v15 = *(Lookahead **)(a1 + 144);
  if (v15) {
    Lookahead::saveLookahead(v15, (DFile *)v14, (DFileChecksums *)v36, v13, a5);
  }
  SigProcDescriptor::saveSigProcDescriptor(*(SigProcDescriptor **)(a1 + 72), (DFile *)v14, (DFileChecksums *)v36, v13, a5);
  if (*(_DWORD *)(a1 + 360))
  {
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    unint64_t v25 = 0;
    do
    {
      v34.i32[0] = 2;
      v34.i32[1] = v25;
      DFile::pushCurrentSubDirComponent((DFile *)v14, (const SubDirExtension *)&v34, v16, v17, v18, v19, v20, v21);
      SigProcDescriptor::saveSigProcDescriptor((SigProcDescriptor *)(*(void *)(a1 + 336) + v24), (DFile *)v14, (DFileChecksums *)v36, v13, a5);
      BandwidthTransform::saveBandwidthTransform((BandwidthTransform *)(*(void *)(a1 + 352) + v23), (DFile *)v14, (DFileChecksums *)v36, v13, a5);
      DFile::popCurrentSubDirComponent((uint64_t)v14);
      ++v25;
      v24 += 344;
      v23 += 80;
    }
    while (v25 < *(unsigned int *)(a1 + 360));
  }
  uint64_t v26 = *(NeuralNet **)(a1 + 368);
  if (v26) {
    NeuralNet::saveNeuralNet(v26, (DFile *)v14, (DFileChecksums *)v36, v13, a5);
  }
  uint64_t v27 = *(Imelda **)(a1 + 16);
  if (v27) {
    Imelda::saveImelda(v27, (DFile *)v14, (DFileChecksums *)v36, v13, a5);
  }
  uint64_t v28 = *(FmpeMgr **)(a1 + 32);
  if (v28) {
    FmpeMgr::saveFmpeModel(v28, (DFile *)v14, (DFileChecksums *)v36, v13, a5, v19, v20, v21);
  }
  uint64_t v29 = *(OnlineConstrainedTransAccMgr **)(a1 + 40);
  if (v29) {
    OnlineConstrainedTransAccMgr::saveOnlineConstrainedTransAcc(v29, (DFile *)v14, (DFileChecksums *)v36, v13, a5);
  }
  uint64_t v30 = *(VarClassMgr **)(a1 + 24);
  if (v30) {
    VarClassMgr::saveVarClassMgr(v30, (DFile *)v14, (DFileChecksums *)v36, v13, a5);
  }
  PelMgr::savePelMgr(*(PelMgr **)(a1 + 56), (DFile *)v14, (DFileChecksums *)v36, v13, a5, v22);
  PicMgr::savePicMgr(*(PicMgr **)(a1 + 48), (DFile *)v14, (DFileChecksums *)v36, v13, a5);
  GenoneClassTree::saveGenoneClassTree(*(GenoneClassTree **)(a1 + 64), (DFile *)v14, (DFileChecksums *)v36, v13, a5);
  if (!v13)
  {
    if (*(_DWORD *)(a1 + 232)) {
      User::saveChecksums((User *)a1, (DFile *)v14, (DFileChecksums *)v36, a5);
    }
    uint64_t v31 = OpenAndWriteMrecHeader((uint64_t)v14, 0x63u, 0, "MRUCH!? ", 19, 2);
    v34.i32[0] = 0;
    writeObject((uint64_t)v31, (uint64_t)v36, &v34);
    writeObjectChecksum((uint64_t)v31, v34.i32);
    DgnDelete<DgnStream>((void (***)(void))v31);
  }
  int64x2_t v34 = 0u;
  int64x2_t v35 = 0u;
  SnapTime::recordTime((SnapTime *)&v34, 1, 1, 1, 1);
  int64x2_t v34 = vsubq_s64(v34, v39);
  int64x2_t v35 = vsubq_s64(v35, v40);
  uint64_t v32 = (FileHistory *)(a1 + 152);
  FileHistory::addEntryWithElapsedTime(v32, " saveUser time: ", (const SnapTime *)&v34);
  FileHistory::saveFileHistory(v32, (DFile *)v14, v13);
  DFileOwner::setRemoveFileOnDestruction((uint64_t)v37, 0);
  *a3 = 0;
  DFileChecksums::~DFileChecksums((DFileChecksums *)v36);
  DFileOwner::~DFileOwner((DFileOwner *)v37, v33);
  LoadSaveTracker::~LoadSaveTracker((LoadSaveTracker *)&v38);
}

void sub_213E82038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  DFileChecksums::~DFileChecksums((DFileChecksums *)&a13);
  DFileOwner::~DFileOwner((DFileOwner *)&a16, v22);
  LoadSaveTracker::~LoadSaveTracker((LoadSaveTracker *)&a21);
  _Unwind_Resume(a1);
}

void (***User::saveChecksums(User *this, DFile *a2, DFileChecksums *a3, int a4))(void)
{
  uint64_t v7 = OpenAndWriteMrecHeader((uint64_t)a2, 0x12u, a4, "MRCXM!? ", 15, 3);
  int v10 = 0;
  writeObject((uint64_t)v7, (int *)this + 54, &v10);
  writeObject<unsigned int>((uint64_t)v7, (uint64_t)this + 224, &v10);
  writeObjectChecksum((uint64_t)v7, &v10);
  uint64_t CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
  DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x12u, v10);
  return DgnDelete<DgnStream>((void (***)(void))v7);
}

uint64_t *User::newPelScorer(User *this, int a2, double a3, BOOL a4, double a5, char *a6, char *a7, int a8, int a9)
{
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  unint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v16 = *(unsigned int *)(*((void *)this + 7) + 620);
  if (v16) {
    BOOL v17 = a9 == 0;
  }
  else {
    BOOL v17 = 1;
  }
  if (!v17)
  {
    uint64_t v29 = 0;
    unint64_t v20 = realloc_array(0, &v29, 4 * v16, 0, 0, 1);
    uint64_t v27 = v29;
    LODWORD(v28) = v16;
    HIDWORD(v28) = v20 >> 2;
    DgnSplitStringParValueIntoUintArray((char)"(Search|PrefiltererBuild)HierScorerBeamList", (int)"recognizer configuration", (unsigned __int8 *)a6, 3000, 0, 0xBB8u, (uint64_t *)&v27);
    uint64_t v21 = *(unsigned int *)(*((void *)this + 7) + 620);
    if (HIDWORD(v26) < v21)
    {
      uint64_t v29 = 0;
      HIDWORD(v26) = realloc_array(v25, &v29, 4 * v21, 4 * v26, 4 * v26, 1) >> 2;
      unint64_t v25 = v29;
    }
    LODWORD(v26) = v21;
    DgnSplitStringParValueIntoUintArray((char)"(Search|PrefiltererBuild)HierScorerCutoffRatioList", (int)"recognizer configuration", (unsigned __int8 *)a7, 10, 0, 0x64u, (uint64_t *)&v25);
    LODWORD(v16) = *(_DWORD *)(*((void *)this + 7) + 620);
  }
  if (v16) {
    BOOL v22 = a9 == 0;
  }
  else {
    BOOL v22 = 1;
  }
  if (v22)
  {
    uint64_t v23 = MemChunkAlloc(0x298uLL, 0);
    OnDemandPelScorer::OnDemandPelScorer((OnDemandPelScorer *)v23, *((const PelMgr **)this + 7), *((const GenoneClassTree **)this + 8), *((const VarClassMgr **)this + 3), *((const FmpeMgr **)this + 4), *((const NeuralNet **)this + 46), *((const Imelda **)this + 2), a2, a3, a5, a4);
  }
  else
  {
    uint64_t v23 = MemChunkAlloc(0x320uLL, 0);
    HScorer::HScorer((uint64_t)v23, *((const PelMgr **)this + 7), *((const GenoneClassTree **)this + 8), *((const VarClassMgr **)this + 3), *((const FmpeMgr **)this + 4), *((const NeuralNet **)this + 46), *((const Imelda **)this + 2), a2, a3, a5, a4, &v27, &v25, a8);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v25);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v27);
  return v23;
}

void sub_213E82328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  _Unwind_Resume(a1);
}

void User::decrementAdapterCount(User *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = *((_DWORD *)this + 51);
  if (!v9)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/user.cpp", 1488, (uint64_t)"user/user", 3, (uint64_t)&errStr_user_user_E_NO_ADAPTER, a7, a8, *((_WORD *)this + 92));
    int v9 = *((_DWORD *)this + 51);
  }
  *((_DWORD *)this + 51) = v9 - 1;
}

void *DgnArray<SigProcDescriptor>::releaseAll(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 1)
  {
    uint64_t v3 = 344 * v2 - 344;
    do
    {
      SigProcDescriptor::~SigProcDescriptor((SigProcDescriptor *)(*(void *)a1 + v3));
      v3 -= 344;
    }
    while (v3 != -344);
  }
  __n128 result = *(void **)a1;
  if (*(void *)a1)
  {
    __n128 result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

void *DgnArray<BandwidthTransform>::releaseAll(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 1)
  {
    uint64_t v3 = 80 * v2 - 72;
    do
    {
      LinearTransform::~LinearTransform((LinearTransform *)(*(void *)a1 + v3));
      v3 -= 80;
    }
    while (v3 != -72);
  }
  __n128 result = *(void **)a1;
  if (*(void *)a1)
  {
    __n128 result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

void VarClassMgr::~VarClassMgr(VarClassMgr *this)
{
}

void PicMgr::~PicMgr(PicMgr *this)
{
}

uint64_t DgnIOwnArray<DgnSharedMemStream *>::DgnIOwnArray(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = a2;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (a2)
  {
    DgnPrimArray<unsigned long long>::reallocElts(a1, a2, 0);
    LODWORD(v4) = *(_DWORD *)(a1 + 8);
    if (v4 > v2)
    {
      DgnIOwnArray<DgnSharedMemStream *>::destructAt((void (***)(void))a1, v2, v4 - v2);
      goto LABEL_8;
    }
  }
  else
  {
    LODWORD(v4) = 0;
  }
  if (v4 < v2)
  {
    uint64_t v4 = v4;
    do
      *(void *)(*(void *)a1 + 8 * v4++) = 0;
    while (v2 != v4);
  }
LABEL_8:
  *(_DWORD *)(a1 + 8) = v2;
  return a1;
}

void (***DgnIOwnArray<DgnSharedMemStream *>::destructAt(void (***result)(void), int a2, int a3))(void)
{
  if (a3 + a2 > a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = a2;
    uint64_t v5 = a3 + a2 - 1;
    do
    {
      __n128 result = DgnDelete<DgnStream>(*(void (****)(void))(*v3 + 8 * v5));
      *(void *)(*v3 + 8 * v5) = 0;
    }
    while (v5-- > v4);
  }
  return result;
}

void *DgnIOwnArray<DgnSharedMemStream *>::releaseAll(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<DgnStream>(*(void (****)(void))(*(void *)a1 + v3));
      *(void *)(*(void *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  __n128 result = *(void **)a1;
  if (*(void *)a1)
  {
    __n128 result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

void *TAllocator::clear(TAllocator *this)
{
  __n128 result = (void *)*((void *)this + 4);
  if (result)
  {
    do
    {
      uint64_t v3 = (void *)*result;
      MEMORY[0x216698710]();
      __n128 result = v3;
    }
    while (v3);
  }
  *(void *)this = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = 0;
  return result;
}

void TAllocator::TAllocator(TAllocator *this, uint64_t a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = a2;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = 0;
}

uint64_t TAllocator::allocate(TAllocator *this, uint64_t a2)
{
  unint64_t v3 = (a2 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v5 = (char *)this + 16;
  uint64_t result = *((void *)this + 2);
  if (*((void *)v5 + 1) - result < v3)
  {
    if (v3 + 8 <= *((void *)this + 1)) {
      unint64_t v6 = *((void *)this + 1);
    }
    else {
      unint64_t v6 = v3 + 8;
    }
    *(void *)this += v6;
    operator new[]();
  }
  *((void *)this + 2) = result + v3;
  return result;
}

uint64_t StartupConfidenceParamSpecMgr(void)
{
  uint64_t v69 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v69, (uint64_t)"ConfidenceEnableWordLevel", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceEnableWordLevelBoolHistory);
  uint64_t v68 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v68, (uint64_t)"ConfidenceEnableUttLevel", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceEnableUttLevelBoolHistory);
  uint64_t v66 = MemChunkAlloc(0x30uLL, 0);
  BoolParamSpec::BoolParamSpec(v66, (uint64_t)"ConfidenceEnableForAllNBest", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceEnableForAllNBestBoolHistory);
  uint64_t v65 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v65, (uint64_t)"ConfidenceUttNBestHighThresh", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceUttNBestHighThreshDoubleHistory);
  uint64_t v64 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v64, (uint64_t)"ConfidenceUttNBestLowThresh", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceUttNBestLowThreshDoubleHistory);
  uint64_t v74 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v74, (uint64_t)"ConfidenceWordProbConstantTerm", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbConstantTermDoubleHistory);
  uint64_t v62 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v62, (uint64_t)"ConfidenceUttProbConstantTerm", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceUttProbConstantTermDoubleHistory);
  uint64_t v67 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v67, (uint64_t)"ConfidenceUttProbTotalLMScoreFactor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceUttProbTotalLMScoreFactorDoubleHistory);
  uint64_t v60 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v60, (uint64_t)"ConfidenceUttProbAverageLMScoreFactor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceUttProbAverageLMScoreFactorDoubleHistory);
  uint64_t v63 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v63, (uint64_t)"ConfidenceUttProbUttAverageAMinusBScoreFactor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceUttProbUttAverageAMinusBScoreFactorDoubleHistory);
  uint64_t v61 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v61, (uint64_t)"ConfidenceUttProbNBestWordAverageFactor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceUttProbNBestWordAverageFactorDoubleHistory);
  uint64_t v59 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v59, (uint64_t)"ConfidenceUttProbNBestMaxFactor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceUttProbNBestMaxFactorDoubleHistory);
  uint64_t v57 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v57, (uint64_t)"ConfidenceUttProbNBestMinFactor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceUttProbNBestMinFactorDoubleHistory);
  uint64_t v53 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v53, (uint64_t)"ConfidenceUttProbNBestHighCountFactor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceUttProbNBestHighCountFactorDoubleHistory);
  unint64_t v51 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v51, (uint64_t)"ConfidenceUttProbNBestLowCountFactor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceUttProbNBestLowCountFactorDoubleHistory);
  uint64_t v49 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v49, (uint64_t)"ConfidenceUttProbAverageActiveNodeCountFactor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceUttProbAverageActiveNodeCountFactorDoubleHistory);
  uint64_t v50 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v50, (uint64_t)"ConfidenceUttProbMaxWordsEndingFactor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceUttProbMaxWordsEndingFactorDoubleHistory);
  uint64_t v47 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v47, (uint64_t)"ConfidenceUttProbAverageDurationFactor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceUttProbAverageDurationFactorDoubleHistory);
  uint64_t v48 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v48, (uint64_t)"ConfidenceUttProbLogWordCountFactor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceUttProbLogWordCountFactorDoubleHistory);
  uint64_t v71 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v71, (uint64_t)"ConfidenceWordProbLeftContextIndicator2Factor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbLeftContextIndicator2FactorDoubleHistory);
  uint64_t v70 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v70, (uint64_t)"ConfidenceWordProbLeftContextIndicator1Factor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbLeftContextIndicator1FactorDoubleHistory);
  uint64_t v73 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v73, (uint64_t)"ConfidenceWordProbRightContextIndicator1Factor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbRightContextIndicator1FactorDoubleHistory);
  uint64_t v72 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v72, (uint64_t)"ConfidenceWordProbRightContextIndicator2Factor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbRightContextIndicator2FactorDoubleHistory);
  uint64_t v58 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v58, (uint64_t)"ConfidenceWordProbDurationFactor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbDurationFactorDoubleHistory);
  uint64_t v56 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v56, (uint64_t)"ConfidenceWordProbDurationLCntx2Factor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbDurationLCntx2FactorDoubleHistory);
  uint64_t v55 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v55, (uint64_t)"ConfidenceWordProbDurationLCntx1Factor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbDurationLCntx1FactorDoubleHistory);
  uint64_t v54 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v54, (uint64_t)"ConfidenceWordProbDurationRCntx1Factor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbDurationRCntx1FactorDoubleHistory);
  uint64_t v52 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v52, (uint64_t)"ConfidenceWordProbDurationRCntx2Factor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbDurationRCntx2FactorDoubleHistory);
  uint64_t v46 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v46, (uint64_t)"ConfidenceWordProbAverageActiveNodeCountFactor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbAverageActiveNodeCountFactorDoubleHistory);
  uint64_t v45 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v45, (uint64_t)"ConfidenceWordProbAverageActiveNodeCountLCntx2Factor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbAverageActiveNodeCountLCntx2FactorDoubleHistory);
  uint64_t v44 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v44, (uint64_t)"ConfidenceWordProbAverageActiveNodeCountLCntx1Factor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbAverageActiveNodeCountLCntx1FactorDoubleHistory);
  unint64_t v43 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v43, (uint64_t)"ConfidenceWordProbAverageActiveNodeCountRCntx1Factor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbAverageActiveNodeCountRCntx1FactorDoubleHistory);
  uint64_t v42 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v42, (uint64_t)"ConfidenceWordProbAverageActiveNodeCountRCntx2Factor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbAverageActiveNodeCountRCntx2FactorDoubleHistory);
  uint64_t v28 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v28, (uint64_t)"ConfidenceWordProbAverageAMinusBScoreFactor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbAverageAMinusBScoreFactorDoubleHistory);
  uint64_t v26 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v26, (uint64_t)"ConfidenceWordProbAverageAMinusBScoreLCntx2Factor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbAverageAMinusBScoreLCntx2FactorDoubleHistory);
  uint64_t v24 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v24, (uint64_t)"ConfidenceWordProbAverageAMinusBScoreLCntx1Factor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbAverageAMinusBScoreLCntx1FactorDoubleHistory);
  uint64_t v23 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v23, (uint64_t)"ConfidenceWordProbAverageAMinusBScoreRCntx1Factor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbAverageAMinusBScoreRCntx1FactorDoubleHistory);
  BOOL v22 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v22, (uint64_t)"ConfidenceWordProbAverageAMinusBScoreRCntx2Factor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbAverageAMinusBScoreRCntx2FactorDoubleHistory);
  uint64_t v41 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v41, (uint64_t)"ConfidenceWordProbLMScoreFactor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbLMScoreFactorDoubleHistory);
  int64x2_t v40 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v40, (uint64_t)"ConfidenceWordProbLMScoreLCntx2Factor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbLMScoreLCntx2FactorDoubleHistory);
  unint64_t v37 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v37, (uint64_t)"ConfidenceWordProbLMScoreLCntx1Factor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbLMScoreLCntx1FactorDoubleHistory);
  char v36 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v36, (uint64_t)"ConfidenceWordProbLMScoreRCntx1Factor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbLMScoreRCntx1FactorDoubleHistory);
  uint64_t v33 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v33, (uint64_t)"ConfidenceWordProbLMScoreRCntx2Factor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbLMScoreRCntx2FactorDoubleHistory);
  int64x2_t v39 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v39, (uint64_t)"ConfidenceWordProbNBestScoreFactor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbNBestScoreFactorDoubleHistory);
  char v38 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v38, (uint64_t)"ConfidenceWordProbNBestScoreLCntx2Factor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbNBestScoreLCntx2FactorDoubleHistory);
  int64x2_t v35 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v35, (uint64_t)"ConfidenceWordProbNBestScoreLCntx1Factor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbNBestScoreLCntx1FactorDoubleHistory);
  int64x2_t v34 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v34, (uint64_t)"ConfidenceWordProbNBestScoreRCntx1Factor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbNBestScoreRCntx1FactorDoubleHistory);
  uint64_t v31 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v31, (uint64_t)"ConfidenceWordProbNBestScoreRCntx2Factor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbNBestScoreRCntx2FactorDoubleHistory);
  uint64_t v32 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v32, (uint64_t)"ConfidenceWordProbWordsEndingCountFactor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbWordsEndingCountFactorDoubleHistory);
  uint64_t v30 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v30, (uint64_t)"ConfidenceWordProbWordsEndingCountLCntx2Factor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbWordsEndingCountLCntx2FactorDoubleHistory);
  uint64_t v29 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v29, (uint64_t)"ConfidenceWordProbWordsEndingCountLCntx1Factor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbWordsEndingCountLCntx1FactorDoubleHistory);
  uint64_t v27 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v27, (uint64_t)"ConfidenceWordProbWordsEndingCountRCntx1Factor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbWordsEndingCountRCntx1FactorDoubleHistory);
  unint64_t v25 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v25, (uint64_t)"ConfidenceWordProbWordsEndingCountRCntx2Factor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbWordsEndingCountRCntx2FactorDoubleHistory);
  uint64_t v21 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v21, (uint64_t)"ConfidenceWordProbAverageBestScoreFactor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbAverageBestScoreFactorDoubleHistory);
  unint64_t v20 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v20, (uint64_t)"ConfidenceWordProbAverageBestScoreLCntx2Factor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbAverageBestScoreLCntx2FactorDoubleHistory);
  uint64_t v19 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v19, (uint64_t)"ConfidenceWordProbAverageBestScoreLCntx1Factor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbAverageBestScoreLCntx1FactorDoubleHistory);
  uint64_t v18 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v18, (uint64_t)"ConfidenceWordProbAverageBestScoreRCntx1Factor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbAverageBestScoreRCntx1FactorDoubleHistory);
  BOOL v17 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v17, (uint64_t)"ConfidenceWordProbAverageBestScoreRCntx2Factor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbAverageBestScoreRCntx2FactorDoubleHistory);
  int v11 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v11, (uint64_t)"ConfidenceWordProbAcousticScoreFactor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbAcousticScoreFactorDoubleHistory);
  v0 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v0, (uint64_t)"ConfidenceWordProbAcousticScoreLCntx2Factor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbAcousticScoreLCntx2FactorDoubleHistory);
  unsigned int v1 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v1, (uint64_t)"ConfidenceWordProbAcousticScoreLCntx1Factor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbAcousticScoreLCntx1FactorDoubleHistory);
  uint64_t v2 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v2, (uint64_t)"ConfidenceWordProbAcousticScoreRCntx1Factor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbAcousticScoreRCntx1FactorDoubleHistory);
  unint64_t v3 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v3, (uint64_t)"ConfidenceWordProbAcousticScoreRCntx2Factor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbAcousticScoreRCntx2FactorDoubleHistory);
  uint64_t v4 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v4, (uint64_t)"ConfidenceWordProbAverageAcousticScoreFactor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbAverageAcousticScoreFactorDoubleHistory);
  uint64_t v5 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v5, (uint64_t)"ConfidenceWordProbAverageAcousticScoreLCntx2Factor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbAverageAcousticScoreLCntx2FactorDoubleHistory);
  unint64_t v6 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v6, (uint64_t)"ConfidenceWordProbAverageAcousticScoreLCntx1Factor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbAverageAcousticScoreLCntx1FactorDoubleHistory);
  uint64_t v7 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v7, (uint64_t)"ConfidenceWordProbAverageAcousticScoreRCntx1Factor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbAverageAcousticScoreRCntx1FactorDoubleHistory);
  unint64_t v8 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v8, (uint64_t)"ConfidenceWordProbAverageAcousticScoreRCntx2Factor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbAverageAcousticScoreRCntx2FactorDoubleHistory);
  uint64_t v16 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v16, (uint64_t)"ConfidenceWordProbLogWordCountFactor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbLogWordCountFactorDoubleHistory);
  uint64_t v15 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v15, (uint64_t)"ConfidenceWordProbLogWordCountLCntx2Factor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbLogWordCountLCntx2FactorDoubleHistory);
  uint64_t v14 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v14, (uint64_t)"ConfidenceWordProbLogWordCountLCntx1Factor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbLogWordCountLCntx1FactorDoubleHistory);
  BOOL v13 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v13, (uint64_t)"ConfidenceWordProbLogWordCountRCntx1Factor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbLogWordCountRCntx1FactorDoubleHistory);
  uint64_t v12 = MemChunkAlloc(0x28uLL, 0);
  DoubleParamSpec::DoubleParamSpec(v12, (uint64_t)"ConfidenceWordProbLogWordCountRCntx2Factor", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sConfidenceWordProbLogWordCountRCntx2FactorDoubleHistory);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v69);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v68);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v66);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v65);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v64);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v49);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v47);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v60);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v62);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v48);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v50);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v53);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v51);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v59);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v57);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v61);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v67);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v63);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v11);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v1);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v0);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v2);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v3);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v28);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v24);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v26);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v23);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v22);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v4);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v6);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v5);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v7);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v8);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v46);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v44);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v45);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v43);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v42);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v21);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v19);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v20);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v18);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v17);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v74);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v58);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v55);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v56);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v54);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v52);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v41);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v37);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v40);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v36);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v33);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v70);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v71);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v16);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v14);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v15);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v13);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v12);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v39);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v35);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v38);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v34);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v31);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v73);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v72);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v32);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v29);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v30);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v27);
  ParamSpecMgr::addParam(qword_26AB82A58, (ParamSpec *)v25);
  int v9 = (ParamSpecMgr *)qword_26AB82A58;

  return ParamSpecMgr::sortParams(v9);
}

_DWORD *ConfidenceParamSet::ConfidenceParamSet(_DWORD *a1, const char *a2, int a3, int a4, int a5)
{
  *(void *)a1 = &unk_26C4DFAB0;
  DgnString::DgnString((DgnString *)(a1 + 2), a2);
  a1[6] = a3;
  a1[7] = a4;
  a1[8] = a5;
  a1[9] = 0;
  *(void *)a1 = &unk_26C4E1D30;
  ConfidenceParamSet::setDefaults((ConfidenceParamSet *)a1, v9, v10, v11, v12, v13, v14, v15);
  return a1;
}

void sub_213E83890(_Unwind_Exception *a1)
{
  *unsigned int v1 = v2;
  DgnString::~DgnString(v3);
  _Unwind_Resume(a1);
}

uint64_t ConfidenceParamSet::ConfidenceParamSet(uint64_t a1, uint64_t a2, char *a3, int a4, int a5, int a6)
{
  *(void *)a1 = &unk_26C4DFAB0;
  DgnString::DgnString((DgnString *)(a1 + 8), a3);
  *(_DWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 28) = a5;
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = a6;
  *(_DWORD *)(a1 + 36) = 0;
  *(void *)a1 = &unk_26C4E1D30;
  *(unsigned char *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = *(unsigned char *)(a2 + 40);
  *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
  *(_OWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)this + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = *(_OWORD *)(a2 + 496);
  *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
  *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
  *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
  *(_OWORD *)(a1 + 576) = *(_OWORD *)(a2 + 576);
  *(_OWORD *)(a1 + 592) = *(_OWORD *)(a2 + 592);
  return a1;
}

void ConfidenceParamSet::setDefaults(ConfidenceParamSet *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *((unsigned char *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_26AB82A58, 1, 0, 0, a5, a6, a7, a8);
  *((unsigned char *)this + 41) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_26AB82A58, 2, 0, 0, v9, v10, v11, v12);
  *((unsigned char *)this + 42) = ParamSpecMgr::ParamGetDefault_BOOL((ParamSpecMgr *)qword_26AB82A58, 3, 0, 0, v13, v14, v15, v16);
  *((double *)this + 6) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 4, 0, 0, v17, v18, v19, v20);
  *((double *)this + 7) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 5, 0, 0, v21, v22, v23, v24);
  *((double *)this + 8) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 6, 0, 0, v25, v26, v27, v28);
  *((double *)this + 9) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 7, 0, 0, v29, v30, v31, v32);
  *((double *)this + 10) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 8, 0, 0, v33, v34, v35, v36);
  *((double *)this + 11) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 9, 0, 0, v37, v38, v39, v40);
  *((double *)this + 12) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 10, 0, 0, v41, v42, v43, v44);
  *((double *)this + 13) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 11, 0, 0, v45, v46, v47, v48);
  *((double *)this + 14) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 12, 0, 0, v49, v50, v51, v52);
  *((double *)this + 15) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 13, 0, 0, v53, v54, v55, v56);
  *((double *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 14, 0, 0, v57, v58, v59, v60);
  *((double *)this + 17) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 15, 0, 0, v61, v62, v63, v64);
  *((double *)this + 18) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 16, 0, 0, v65, v66, v67, v68);
  *((double *)this + 19) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 17, 0, 0, v69, v70, v71, v72);
  *((double *)this + 20) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 18, 0, 0, v73, v74, v75, v76);
  *((double *)this + 21) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 19, 0, 0, v77, v78, v79, v80);
  *((double *)this + 22) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 20, 0, 0, v81, v82, v83, v84);
  *((double *)this + 23) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 21, 0, 0, v85, v86, v87, v88);
  *((double *)this + 24) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 22, 0, 0, v89, v90, v91, v92);
  *((double *)this + 25) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 23, 0, 0, v93, v94, v95, v96);
  *((double *)this + 26) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 24, 0, 0, v97, v98, v99, v100);
  *((double *)this + 27) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 25, 0, 0, v101, v102, v103, v104);
  *((double *)this + 28) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 26, 0, 0, v105, v106, v107, v108);
  *((double *)this + 29) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 27, 0, 0, v109, v110, v111, v112);
  *((double *)this + 30) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 28, 0, 0, v113, v114, v115, v116);
  *((double *)this + 31) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 29, 0, 0, v117, v118, v119, v120);
  *((double *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 30, 0, 0, v121, v122, v123, v124);
  *((double *)this + 33) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 31, 0, 0, v125, v126, v127, v128);
  *((double *)this + 34) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 32, 0, 0, v129, v130, v131, v132);
  *((double *)this + 35) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 33, 0, 0, v133, v134, v135, v136);
  *((double *)this + 36) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 34, 0, 0, v137, v138, v139, v140);
  *((double *)this + 37) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 35, 0, 0, v141, v142, v143, v144);
  *((double *)this + 38) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 36, 0, 0, v145, v146, v147, v148);
  *((double *)this + 39) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 37, 0, 0, v149, v150, v151, v152);
  *((double *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 38, 0, 0, v153, v154, v155, v156);
  *((double *)this + 41) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 39, 0, 0, v157, v158, v159, v160);
  *((double *)this + 42) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 40, 0, 0, v161, v162, v163, v164);
  *((double *)this + 43) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 41, 0, 0, v165, v166, v167, v168);
  *((double *)this + 44) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 42, 0, 0, v169, v170, v171, v172);
  *((double *)this + 45) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 43, 0, 0, v173, v174, v175, v176);
  *((double *)this + 46) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 44, 0, 0, v177, v178, v179, v180);
  *((double *)this + 47) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 45, 0, 0, v181, v182, v183, v184);
  *((double *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 46, 0, 0, v185, v186, v187, v188);
  *((double *)this + 49) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 47, 0, 0, v189, v190, v191, v192);
  *((double *)this + 50) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 48, 0, 0, v193, v194, v195, v196);
  *((double *)this + 51) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 49, 0, 0, v197, v198, v199, v200);
  *((double *)this + 52) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 50, 0, 0, v201, v202, v203, v204);
  *((double *)this + 53) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 51, 0, 0, v205, v206, v207, v208);
  *((double *)this + 54) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 52, 0, 0, v209, v210, v211, v212);
  *((double *)this + 55) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 53, 0, 0, v213, v214, v215, v216);
  *((double *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 54, 0, 0, v217, v218, v219, v220);
  *((double *)this + 57) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 55, 0, 0, v221, v222, v223, v224);
  *((double *)this + 58) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 56, 0, 0, v225, v226, v227, v228);
  *((double *)this + 59) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 57, 0, 0, v229, v230, v231, v232);
  *((double *)this + 60) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 58, 0, 0, v233, v234, v235, v236);
  *((double *)this + 61) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 59, 0, 0, v237, v238, v239, v240);
  *((double *)this + 62) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 60, 0, 0, v241, v242, v243, v244);
  *((double *)this + 63) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 61, 0, 0, v245, v246, v247, v248);
  *((double *)this + 64) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 62, 0, 0, v249, v250, v251, v252);
  *((double *)this + 65) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 63, 0, 0, v253, v254, v255, v256);
  *((double *)this + 66) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 64, 0, 0, v257, v258, v259, v260);
  *((double *)this + 67) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 65, 0, 0, v261, v262, v263, v264);
  *((double *)this + 68) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 66, 0, 0, v265, v266, v267, v268);
  *((double *)this + 69) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 67, 0, 0, v269, v270, v271, v272);
  *((double *)this + 70) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 68, 0, 0, v273, v274, v275, v276);
  *((double *)this + 71) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 69, 0, 0, v277, v278, v279, v280);
  *((double *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 70, 0, 0, v281, v282, v283, v284);
  *((double *)this + 73) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 71, 0, 0, v285, v286, v287, v288);
  *((double *)this + 74) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 72, 0, 0, v289, v290, v291, v292);
  *((double *)this + 75) = ParamSpecMgr::ParamGetDefault_double((ParamSpecMgr *)qword_26AB82A58, 73, 0, 0, v293, v294, v295, v296);
}

uint64_t ConfidenceParamSet::sizeObject(uint64_t a1, int a2)
{
  BOOL v3 = a2 != 3;
  uint64_t v4 = sizeObject(a1 + 8);
  uint64_t v5 = 560;
  if (a2 == 3) {
    uint64_t v5 = 0;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    return v4 + 16 * v3;
  }
  else {
    return ((a2 != 3) | (2 * (a2 != 3)) | v5) + v4 + 16 * v3;
  }
}

BOOL ConfidenceParamSet::getBoolParameter(unsigned __int8 *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(a2)
  {
    case 1:
      if (a3 == 1)
      {
        uint64_t v11 = (ParamSpecMgr *)qword_26AB82A58;
        int v12 = 1;
        goto LABEL_89;
      }
      if (a3) {
        goto LABEL_85;
      }
      int v8 = a1[40];
      return v8 != 0;
    case 2:
      if (a3 == 1)
      {
        uint64_t v11 = (ParamSpecMgr *)qword_26AB82A58;
        int v12 = 2;
        goto LABEL_89;
      }
      if (a3) {
        goto LABEL_85;
      }
      int v8 = a1[41];
      return v8 != 0;
    case 3:
      if (a3 == 1)
      {
        uint64_t v11 = (ParamSpecMgr *)qword_26AB82A58;
        int v12 = 3;
LABEL_89:
        ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(v11, v12, a3, a4, a5, a6, a7, a8);
        return v8 != 0;
      }
      if (!a3)
      {
        int v8 = a1[42];
        return v8 != 0;
      }
LABEL_85:
      throwWrongQueryMode(a3, (uint64_t)"BOOL", a3, a4, a5, a6, a7, a8);
      return 0;
    case 4:
      char v9 = 4;
      goto LABEL_82;
    case 5:
      char v9 = 5;
      goto LABEL_82;
    case 6:
      char v9 = 6;
      goto LABEL_82;
    case 7:
      char v9 = 7;
      goto LABEL_82;
    case 8:
      char v9 = 8;
      goto LABEL_82;
    case 9:
      char v9 = 9;
      goto LABEL_82;
    case 10:
      char v9 = 10;
      goto LABEL_82;
    case 11:
      char v9 = 11;
      goto LABEL_82;
    case 12:
      char v9 = 12;
      goto LABEL_82;
    case 13:
      char v9 = 13;
      goto LABEL_82;
    case 14:
      char v9 = 14;
      goto LABEL_82;
    case 15:
      char v9 = 15;
      goto LABEL_82;
    case 16:
      char v9 = 16;
      goto LABEL_82;
    case 17:
      char v9 = 17;
      goto LABEL_82;
    case 18:
      char v9 = 18;
      goto LABEL_82;
    case 19:
      char v9 = 19;
      goto LABEL_82;
    case 20:
      char v9 = 20;
      goto LABEL_82;
    case 21:
      char v9 = 21;
      goto LABEL_82;
    case 22:
      char v9 = 22;
      goto LABEL_82;
    case 23:
      char v9 = 23;
      goto LABEL_82;
    case 24:
      char v9 = 24;
      goto LABEL_82;
    case 25:
      char v9 = 25;
      goto LABEL_82;
    case 26:
      char v9 = 26;
      goto LABEL_82;
    case 27:
      char v9 = 27;
      goto LABEL_82;
    case 28:
      char v9 = 28;
      goto LABEL_82;
    case 29:
      char v9 = 29;
      goto LABEL_82;
    case 30:
      char v9 = 30;
      goto LABEL_82;
    case 31:
      char v9 = 31;
      goto LABEL_82;
    case 32:
      char v9 = 32;
      goto LABEL_82;
    case 33:
      char v9 = 33;
      goto LABEL_82;
    case 34:
      char v9 = 34;
      goto LABEL_82;
    case 35:
      char v9 = 35;
      goto LABEL_82;
    case 36:
      char v9 = 36;
      goto LABEL_82;
    case 37:
      char v9 = 37;
      goto LABEL_82;
    case 38:
      char v9 = 38;
      goto LABEL_82;
    case 39:
      char v9 = 39;
      goto LABEL_82;
    case 40:
      char v9 = 40;
      goto LABEL_82;
    case 41:
      char v9 = 41;
      goto LABEL_82;
    case 42:
      char v9 = 42;
      goto LABEL_82;
    case 43:
      char v9 = 43;
      goto LABEL_82;
    case 44:
      char v9 = 44;
      goto LABEL_82;
    case 45:
      char v9 = 45;
      goto LABEL_82;
    case 46:
      char v9 = 46;
      goto LABEL_82;
    case 47:
      char v9 = 47;
      goto LABEL_82;
    case 48:
      char v9 = 48;
      goto LABEL_82;
    case 49:
      char v9 = 49;
      goto LABEL_82;
    case 50:
      char v9 = 50;
      goto LABEL_82;
    case 51:
      char v9 = 51;
      goto LABEL_82;
    case 52:
      char v9 = 52;
      goto LABEL_82;
    case 53:
      char v9 = 53;
      goto LABEL_82;
    case 54:
      char v9 = 54;
      goto LABEL_82;
    case 55:
      char v9 = 55;
      goto LABEL_82;
    case 56:
      char v9 = 56;
      goto LABEL_82;
    case 57:
      char v9 = 57;
      goto LABEL_82;
    case 58:
      char v9 = 58;
      goto LABEL_82;
    case 59:
      char v9 = 59;
      goto LABEL_82;
    case 60:
      char v9 = 60;
      goto LABEL_82;
    case 61:
      char v9 = 61;
      goto LABEL_82;
    case 62:
      char v9 = 62;
      goto LABEL_82;
    case 63:
      char v9 = 63;
      goto LABEL_82;
    case 64:
      char v9 = 64;
      goto LABEL_82;
    case 65:
      char v9 = 65;
      goto LABEL_82;
    case 66:
      char v9 = 66;
      goto LABEL_82;
    case 67:
      char v9 = 67;
      goto LABEL_82;
    case 68:
      char v9 = 68;
      goto LABEL_82;
    case 69:
      char v9 = 69;
      goto LABEL_82;
    case 70:
      char v9 = 70;
      goto LABEL_82;
    case 71:
      char v9 = 71;
      goto LABEL_82;
    case 72:
      char v9 = 72;
      goto LABEL_82;
    case 73:
      char v9 = 73;
LABEL_82:
      throwWrongTypeForParamId(v9, "double", "BOOL", a4, a5, a6, a7, a8);
      return 0;
    default:
      throwWrongParamIdValue(a2, "BOOL", a3, a4, a5, a6, a7, a8);
      return 0;
  }
}

uint64_t ConfidenceParamSet::getIntParameter(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(a2)
  {
    case 1:
      int v8 = "BOOL";
      char v9 = 1;
      goto LABEL_76;
    case 2:
      int v8 = "BOOL";
      char v9 = 2;
      goto LABEL_76;
    case 3:
      int v8 = "BOOL";
      char v9 = 3;
      goto LABEL_76;
    case 4:
      int v8 = "double";
      char v9 = 4;
      goto LABEL_76;
    case 5:
      int v8 = "double";
      char v9 = 5;
      goto LABEL_76;
    case 6:
      int v8 = "double";
      char v9 = 6;
      goto LABEL_76;
    case 7:
      int v8 = "double";
      char v9 = 7;
      goto LABEL_76;
    case 8:
      int v8 = "double";
      char v9 = 8;
      goto LABEL_76;
    case 9:
      int v8 = "double";
      char v9 = 9;
      goto LABEL_76;
    case 10:
      int v8 = "double";
      char v9 = 10;
      goto LABEL_76;
    case 11:
      int v8 = "double";
      char v9 = 11;
      goto LABEL_76;
    case 12:
      int v8 = "double";
      char v9 = 12;
      goto LABEL_76;
    case 13:
      int v8 = "double";
      char v9 = 13;
      goto LABEL_76;
    case 14:
      int v8 = "double";
      char v9 = 14;
      goto LABEL_76;
    case 15:
      int v8 = "double";
      char v9 = 15;
      goto LABEL_76;
    case 16:
      int v8 = "double";
      char v9 = 16;
      goto LABEL_76;
    case 17:
      int v8 = "double";
      char v9 = 17;
      goto LABEL_76;
    case 18:
      int v8 = "double";
      char v9 = 18;
      goto LABEL_76;
    case 19:
      int v8 = "double";
      char v9 = 19;
      goto LABEL_76;
    case 20:
      int v8 = "double";
      char v9 = 20;
      goto LABEL_76;
    case 21:
      int v8 = "double";
      char v9 = 21;
      goto LABEL_76;
    case 22:
      int v8 = "double";
      char v9 = 22;
      goto LABEL_76;
    case 23:
      int v8 = "double";
      char v9 = 23;
      goto LABEL_76;
    case 24:
      int v8 = "double";
      char v9 = 24;
      goto LABEL_76;
    case 25:
      int v8 = "double";
      char v9 = 25;
      goto LABEL_76;
    case 26:
      int v8 = "double";
      char v9 = 26;
      goto LABEL_76;
    case 27:
      int v8 = "double";
      char v9 = 27;
      goto LABEL_76;
    case 28:
      int v8 = "double";
      char v9 = 28;
      goto LABEL_76;
    case 29:
      int v8 = "double";
      char v9 = 29;
      goto LABEL_76;
    case 30:
      int v8 = "double";
      char v9 = 30;
      goto LABEL_76;
    case 31:
      int v8 = "double";
      char v9 = 31;
      goto LABEL_76;
    case 32:
      int v8 = "double";
      char v9 = 32;
      goto LABEL_76;
    case 33:
      int v8 = "double";
      char v9 = 33;
      goto LABEL_76;
    case 34:
      int v8 = "double";
      char v9 = 34;
      goto LABEL_76;
    case 35:
      int v8 = "double";
      char v9 = 35;
      goto LABEL_76;
    case 36:
      int v8 = "double";
      char v9 = 36;
      goto LABEL_76;
    case 37:
      int v8 = "double";
      char v9 = 37;
      goto LABEL_76;
    case 38:
      int v8 = "double";
      char v9 = 38;
      goto LABEL_76;
    case 39:
      int v8 = "double";
      char v9 = 39;
      goto LABEL_76;
    case 40:
      int v8 = "double";
      char v9 = 40;
      goto LABEL_76;
    case 41:
      int v8 = "double";
      char v9 = 41;
      goto LABEL_76;
    case 42:
      int v8 = "double";
      char v9 = 42;
      goto LABEL_76;
    case 43:
      int v8 = "double";
      char v9 = 43;
      goto LABEL_76;
    case 44:
      int v8 = "double";
      char v9 = 44;
      goto LABEL_76;
    case 45:
      int v8 = "double";
      char v9 = 45;
      goto LABEL_76;
    case 46:
      int v8 = "double";
      char v9 = 46;
      goto LABEL_76;
    case 47:
      int v8 = "double";
      char v9 = 47;
      goto LABEL_76;
    case 48:
      int v8 = "double";
      char v9 = 48;
      goto LABEL_76;
    case 49:
      int v8 = "double";
      char v9 = 49;
      goto LABEL_76;
    case 50:
      int v8 = "double";
      char v9 = 50;
      goto LABEL_76;
    case 51:
      int v8 = "double";
      char v9 = 51;
      goto LABEL_76;
    case 52:
      int v8 = "double";
      char v9 = 52;
      goto LABEL_76;
    case 53:
      int v8 = "double";
      char v9 = 53;
      goto LABEL_76;
    case 54:
      int v8 = "double";
      char v9 = 54;
      goto LABEL_76;
    case 55:
      int v8 = "double";
      char v9 = 55;
      goto LABEL_76;
    case 56:
      int v8 = "double";
      char v9 = 56;
      goto LABEL_76;
    case 57:
      int v8 = "double";
      char v9 = 57;
      goto LABEL_76;
    case 58:
      int v8 = "double";
      char v9 = 58;
      goto LABEL_76;
    case 59:
      int v8 = "double";
      char v9 = 59;
      goto LABEL_76;
    case 60:
      int v8 = "double";
      char v9 = 60;
      goto LABEL_76;
    case 61:
      int v8 = "double";
      char v9 = 61;
      goto LABEL_76;
    case 62:
      int v8 = "double";
      char v9 = 62;
      goto LABEL_76;
    case 63:
      int v8 = "double";
      char v9 = 63;
      goto LABEL_76;
    case 64:
      int v8 = "double";
      char v9 = 64;
      goto LABEL_76;
    case 65:
      int v8 = "double";
      char v9 = 65;
      goto LABEL_76;
    case 66:
      int v8 = "double";
      char v9 = 66;
      goto LABEL_76;
    case 67:
      int v8 = "double";
      char v9 = 67;
      goto LABEL_76;
    case 68:
      int v8 = "double";
      char v9 = 68;
      goto LABEL_76;
    case 69:
      int v8 = "double";
      char v9 = 69;
      goto LABEL_76;
    case 70:
      int v8 = "double";
      char v9 = 70;
      goto LABEL_76;
    case 71:
      int v8 = "double";
      char v9 = 71;
      goto LABEL_76;
    case 72:
      int v8 = "double";
      char v9 = 72;
      goto LABEL_76;
    case 73:
      int v8 = "double";
      char v9 = 73;
LABEL_76:
      throwWrongTypeForParamId(v9, v8, "int", a4, a5, a6, a7, a8);
      break;
    default:
      throwWrongParamIdValue(a2, "int", a3, a4, a5, a6, a7, a8);
      break;
  }
  return 0;
}

double ConfidenceParamSet::getDoubleParameter(double *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(a2)
  {
    case 1:
      char v8 = 1;
      goto LABEL_6;
    case 2:
      char v8 = 2;
      goto LABEL_6;
    case 3:
      char v8 = 3;
LABEL_6:
      throwWrongTypeForParamId(v8, "BOOL", "double", a4, a5, a6, a7, a8);
      return 0.0;
    case 4:
      switch((int)a3)
      {
        case 0:
          double result = a1[6];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 4;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 4;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 4;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 5:
      switch((int)a3)
      {
        case 0:
          double result = a1[7];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 5;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 5;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 5;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 6:
      switch((int)a3)
      {
        case 0:
          double result = a1[8];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 6;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 6;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 6;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 7:
      switch((int)a3)
      {
        case 0:
          double result = a1[9];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 7;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 7;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 7;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 8:
      switch((int)a3)
      {
        case 0:
          double result = a1[10];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 8;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 8;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 8;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 9:
      switch((int)a3)
      {
        case 0:
          double result = a1[11];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 9;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 9;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 9;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 10:
      switch((int)a3)
      {
        case 0:
          double result = a1[12];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 10;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 10;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 10;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 11:
      switch((int)a3)
      {
        case 0:
          double result = a1[13];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 11;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 11;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 11;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 12:
      switch((int)a3)
      {
        case 0:
          double result = a1[14];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 12;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 12;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 12;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 13:
      switch((int)a3)
      {
        case 0:
          double result = a1[15];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 13;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 13;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 13;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 14:
      switch((int)a3)
      {
        case 0:
          double result = a1[16];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 14;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 14;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 14;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 15:
      switch((int)a3)
      {
        case 0:
          double result = a1[17];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 15;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 15;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 15;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 16:
      switch((int)a3)
      {
        case 0:
          double result = a1[18];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 16;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 16;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 16;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 17:
      switch((int)a3)
      {
        case 0:
          double result = a1[19];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 17;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 17;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 17;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 18:
      switch((int)a3)
      {
        case 0:
          double result = a1[20];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 18;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 18;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 18;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 19:
      switch((int)a3)
      {
        case 0:
          double result = a1[21];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 19;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 19;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 19;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 20:
      switch((int)a3)
      {
        case 0:
          double result = a1[22];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 20;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 20;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 20;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 21:
      switch((int)a3)
      {
        case 0:
          double result = a1[23];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 21;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 21;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 21;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 22:
      switch((int)a3)
      {
        case 0:
          double result = a1[24];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 22;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 22;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 22;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 23:
      switch((int)a3)
      {
        case 0:
          double result = a1[25];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 23;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 23;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 23;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 24:
      switch((int)a3)
      {
        case 0:
          double result = a1[26];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 24;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 24;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 24;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 25:
      switch((int)a3)
      {
        case 0:
          double result = a1[27];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 25;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 25;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 25;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 26:
      switch((int)a3)
      {
        case 0:
          double result = a1[28];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 26;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 26;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 26;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 27:
      switch((int)a3)
      {
        case 0:
          double result = a1[29];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 27;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 27;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 27;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 28:
      switch((int)a3)
      {
        case 0:
          double result = a1[30];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 28;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 28;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 28;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 29:
      switch((int)a3)
      {
        case 0:
          double result = a1[31];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 29;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 29;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 29;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 30:
      switch((int)a3)
      {
        case 0:
          double result = a1[32];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 30;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 30;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 30;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 31:
      switch((int)a3)
      {
        case 0:
          double result = a1[33];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 31;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 31;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 31;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 32:
      switch((int)a3)
      {
        case 0:
          double result = a1[34];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 32;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 32;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 32;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 33:
      switch((int)a3)
      {
        case 0:
          double result = a1[35];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 33;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 33;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 33;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 34:
      switch((int)a3)
      {
        case 0:
          double result = a1[36];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 34;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 34;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 34;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 35:
      switch((int)a3)
      {
        case 0:
          double result = a1[37];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 35;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 35;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 35;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 36:
      switch((int)a3)
      {
        case 0:
          double result = a1[38];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 36;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 36;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 36;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 37:
      switch((int)a3)
      {
        case 0:
          double result = a1[39];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 37;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 37;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 37;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 38:
      switch((int)a3)
      {
        case 0:
          double result = a1[40];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 38;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 38;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 38;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 39:
      switch((int)a3)
      {
        case 0:
          double result = a1[41];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 39;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 39;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 39;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 40:
      switch((int)a3)
      {
        case 0:
          double result = a1[42];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 40;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 40;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 40;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 41:
      switch((int)a3)
      {
        case 0:
          double result = a1[43];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 41;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 41;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 41;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 42:
      switch((int)a3)
      {
        case 0:
          double result = a1[44];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 42;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 42;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 42;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 43:
      switch((int)a3)
      {
        case 0:
          double result = a1[45];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 43;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 43;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 43;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 44:
      switch((int)a3)
      {
        case 0:
          double result = a1[46];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 44;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 44;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 44;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 45:
      switch((int)a3)
      {
        case 0:
          double result = a1[47];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 45;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 45;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 45;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 46:
      switch((int)a3)
      {
        case 0:
          double result = a1[48];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 46;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 46;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 46;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 47:
      switch((int)a3)
      {
        case 0:
          double result = a1[49];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 47;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 47;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 47;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 48:
      switch((int)a3)
      {
        case 0:
          double result = a1[50];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 48;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 48;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 48;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 49:
      switch((int)a3)
      {
        case 0:
          double result = a1[51];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 49;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 49;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 49;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 50:
      switch((int)a3)
      {
        case 0:
          double result = a1[52];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 50;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 50;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 50;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 51:
      switch((int)a3)
      {
        case 0:
          double result = a1[53];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 51;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 51;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 51;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 52:
      switch((int)a3)
      {
        case 0:
          double result = a1[54];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 52;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 52;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 52;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 53:
      switch((int)a3)
      {
        case 0:
          double result = a1[55];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 53;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 53;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 53;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 54:
      switch((int)a3)
      {
        case 0:
          double result = a1[56];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 54;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 54;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 54;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 55:
      switch((int)a3)
      {
        case 0:
          double result = a1[57];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 55;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 55;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 55;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 56:
      switch((int)a3)
      {
        case 0:
          double result = a1[58];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 56;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 56;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 56;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 57:
      switch((int)a3)
      {
        case 0:
          double result = a1[59];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 57;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 57;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 57;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 58:
      switch((int)a3)
      {
        case 0:
          double result = a1[60];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 58;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 58;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 58;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 59:
      switch((int)a3)
      {
        case 0:
          double result = a1[61];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 59;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 59;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 59;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 60:
      switch((int)a3)
      {
        case 0:
          double result = a1[62];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 60;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 60;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 60;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 61:
      switch((int)a3)
      {
        case 0:
          double result = a1[63];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 61;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 61;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 61;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 62:
      switch((int)a3)
      {
        case 0:
          double result = a1[64];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 62;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 62;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 62;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 63:
      switch((int)a3)
      {
        case 0:
          double result = a1[65];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 63;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 63;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 63;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 64:
      switch((int)a3)
      {
        case 0:
          double result = a1[66];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 64;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 64;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 64;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 65:
      switch((int)a3)
      {
        case 0:
          double result = a1[67];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 65;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 65;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 65;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 66:
      switch((int)a3)
      {
        case 0:
          double result = a1[68];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 66;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 66;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 66;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 67:
      switch((int)a3)
      {
        case 0:
          double result = a1[69];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 67;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 67;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 67;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 68:
      switch((int)a3)
      {
        case 0:
          double result = a1[70];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 68;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 68;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 68;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 69:
      switch((int)a3)
      {
        case 0:
          double result = a1[71];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 69;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 69;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 69;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 70:
      switch((int)a3)
      {
        case 0:
          double result = a1[72];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 70;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 70;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 70;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 71:
      switch((int)a3)
      {
        case 0:
          double result = a1[73];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 71;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 71;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 71;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 72:
      switch((int)a3)
      {
        case 0:
          double result = a1[74];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 72;
          goto LABEL_357;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 72;
          goto LABEL_359;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 72;
          goto LABEL_361;
        default:
          goto LABEL_147;
      }
      return result;
    case 73:
      switch((int)a3)
      {
        case 0:
          double result = a1[75];
          break;
        case 1:
          uint64_t v10 = (ParamSpecMgr *)qword_26AB82A58;
          int v11 = 73;
LABEL_357:
          ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(v10, v11, a3, a4, a5, a6, a7, a8);
          break;
        case 2:
          int v12 = (ParamSpecMgr *)qword_26AB82A58;
          int v13 = 73;
LABEL_359:
          uint64_t v17 = (const void *)ParamSpecMgr::getParamByParamId(v12, v13, a3, a4, a5, a6, a7, a8);
          break;
        case 3:
          uint64_t v14 = (ParamSpecMgr *)qword_26AB82A58;
          int v15 = 73;
LABEL_361:
          uint64_t v18 = (const void *)ParamSpecMgr::getParamByParamId(v14, v15, a3, a4, a5, a6, a7, a8);
          break;
        default:
LABEL_147:
          throwWrongQueryMode(a3, (uint64_t)"double", a3, a4, a5, a6, a7, a8);
          return 0.0;
      }
      return result;
    default:
      throwWrongParamIdValue(a2, "double", a3, a4, a5, a6, a7, a8);
      return 0.0;
  }
}

uint64_t ConfidenceParamSet::getStringParameter(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(a2)
  {
    case 1:
      char v8 = "BOOL";
      char v9 = 1;
      goto LABEL_76;
    case 2:
      char v8 = "BOOL";
      char v9 = 2;
      goto LABEL_76;
    case 3:
      char v8 = "BOOL";
      char v9 = 3;
      goto LABEL_76;
    case 4:
      char v8 = "double";
      char v9 = 4;
      goto LABEL_76;
    case 5:
      char v8 = "double";
      char v9 = 5;
      goto LABEL_76;
    case 6:
      char v8 = "double";
      char v9 = 6;
      goto LABEL_76;
    case 7:
      char v8 = "double";
      char v9 = 7;
      goto LABEL_76;
    case 8:
      char v8 = "double";
      char v9 = 8;
      goto LABEL_76;
    case 9:
      char v8 = "double";
      char v9 = 9;
      goto LABEL_76;
    case 10:
      char v8 = "double";
      char v9 = 10;
      goto LABEL_76;
    case 11:
      char v8 = "double";
      char v9 = 11;
      goto LABEL_76;
    case 12:
      char v8 = "double";
      char v9 = 12;
      goto LABEL_76;
    case 13:
      char v8 = "double";
      char v9 = 13;
      goto LABEL_76;
    case 14:
      char v8 = "double";
      char v9 = 14;
      goto LABEL_76;
    case 15:
      char v8 = "double";
      char v9 = 15;
      goto LABEL_76;
    case 16:
      char v8 = "double";
      char v9 = 16;
      goto LABEL_76;
    case 17:
      char v8 = "double";
      char v9 = 17;
      goto LABEL_76;
    case 18:
      char v8 = "double";
      char v9 = 18;
      goto LABEL_76;
    case 19:
      char v8 = "double";
      char v9 = 19;
      goto LABEL_76;
    case 20:
      char v8 = "double";
      char v9 = 20;
      goto LABEL_76;
    case 21:
      char v8 = "double";
      char v9 = 21;
      goto LABEL_76;
    case 22:
      char v8 = "double";
      char v9 = 22;
      goto LABEL_76;
    case 23:
      char v8 = "double";
      char v9 = 23;
      goto LABEL_76;
    case 24:
      char v8 = "double";
      char v9 = 24;
      goto LABEL_76;
    case 25:
      char v8 = "double";
      char v9 = 25;
      goto LABEL_76;
    case 26:
      char v8 = "double";
      char v9 = 26;
      goto LABEL_76;
    case 27:
      char v8 = "double";
      char v9 = 27;
      goto LABEL_76;
    case 28:
      char v8 = "double";
      char v9 = 28;
      goto LABEL_76;
    case 29:
      char v8 = "double";
      char v9 = 29;
      goto LABEL_76;
    case 30:
      char v8 = "double";
      char v9 = 30;
      goto LABEL_76;
    case 31:
      char v8 = "double";
      char v9 = 31;
      goto LABEL_76;
    case 32:
      char v8 = "double";
      char v9 = 32;
      goto LABEL_76;
    case 33:
      char v8 = "double";
      char v9 = 33;
      goto LABEL_76;
    case 34:
      char v8 = "double";
      char v9 = 34;
      goto LABEL_76;
    case 35:
      char v8 = "double";
      char v9 = 35;
      goto LABEL_76;
    case 36:
      char v8 = "double";
      char v9 = 36;
      goto LABEL_76;
    case 37:
      char v8 = "double";
      char v9 = 37;
      goto LABEL_76;
    case 38:
      char v8 = "double";
      char v9 = 38;
      goto LABEL_76;
    case 39:
      char v8 = "double";
      char v9 = 39;
      goto LABEL_76;
    case 40:
      char v8 = "double";
      char v9 = 40;
      goto LABEL_76;
    case 41:
      char v8 = "double";
      char v9 = 41;
      goto LABEL_76;
    case 42:
      char v8 = "double";
      char v9 = 42;
      goto LABEL_76;
    case 43:
      char v8 = "double";
      char v9 = 43;
      goto LABEL_76;
    case 44:
      char v8 = "double";
      char v9 = 44;
      goto LABEL_76;
    case 45:
      char v8 = "double";
      char v9 = 45;
      goto LABEL_76;
    case 46:
      char v8 = "double";
      char v9 = 46;
      goto LABEL_76;
    case 47:
      char v8 = "double";
      char v9 = 47;
      goto LABEL_76;
    case 48:
      char v8 = "double";
      char v9 = 48;
      goto LABEL_76;
    case 49:
      char v8 = "double";
      char v9 = 49;
      goto LABEL_76;
    case 50:
      char v8 = "double";
      char v9 = 50;
      goto LABEL_76;
    case 51:
      char v8 = "double";
      char v9 = 51;
      goto LABEL_76;
    case 52:
      char v8 = "double";
      char v9 = 52;
      goto LABEL_76;
    case 53:
      char v8 = "double";
      char v9 = 53;
      goto LABEL_76;
    case 54:
      char v8 = "double";
      char v9 = 54;
      goto LABEL_76;
    case 55:
      char v8 = "double";
      char v9 = 55;
      goto LABEL_76;
    case 56:
      char v8 = "double";
      char v9 = 56;
      goto LABEL_76;
    case 57:
      char v8 = "double";
      char v9 = 57;
      goto LABEL_76;
    case 58:
      char v8 = "double";
      char v9 = 58;
      goto LABEL_76;
    case 59:
      char v8 = "double";
      char v9 = 59;
      goto LABEL_76;
    case 60:
      char v8 = "double";
      char v9 = 60;
      goto LABEL_76;
    case 61:
      char v8 = "double";
      char v9 = 61;
      goto LABEL_76;
    case 62:
      char v8 = "double";
      char v9 = 62;
      goto LABEL_76;
    case 63:
      char v8 = "double";
      char v9 = 63;
      goto LABEL_76;
    case 64:
      char v8 = "double";
      char v9 = 64;
      goto LABEL_76;
    case 65:
      char v8 = "double";
      char v9 = 65;
      goto LABEL_76;
    case 66:
      char v8 = "double";
      char v9 = 66;
      goto LABEL_76;
    case 67:
      char v8 = "double";
      char v9 = 67;
      goto LABEL_76;
    case 68:
      char v8 = "double";
      char v9 = 68;
      goto LABEL_76;
    case 69:
      char v8 = "double";
      char v9 = 69;
      goto LABEL_76;
    case 70:
      char v8 = "double";
      char v9 = 70;
      goto LABEL_76;
    case 71:
      char v8 = "double";
      char v9 = 71;
      goto LABEL_76;
    case 72:
      char v8 = "double";
      char v9 = 72;
      goto LABEL_76;
    case 73:
      char v8 = "double";
      char v9 = 73;
LABEL_76:
      throwWrongTypeForParamId(v9, v8, "string", a4, a5, a6, a7, a8);
      break;
    default:
      throwWrongParamIdValue(a2, "string", a3, a4, a5, a6, a7, a8);
      break;
  }
  return 0;
}

uint64_t ConfidenceParamSet::getEnumParameter(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(a2)
  {
    case 1:
      char v8 = "BOOL";
      char v9 = 1;
      goto LABEL_77;
    case 2:
      char v8 = "BOOL";
      char v9 = 2;
      goto LABEL_77;
    case 3:
      char v8 = "BOOL";
      char v9 = 3;
      goto LABEL_77;
    case 4:
      char v8 = "double";
      char v9 = 4;
      goto LABEL_77;
    case 5:
      char v8 = "double";
      char v9 = 5;
      goto LABEL_77;
    case 6:
      char v8 = "double";
      char v9 = 6;
      goto LABEL_77;
    case 7:
      char v8 = "double";
      char v9 = 7;
      goto LABEL_77;
    case 8:
      char v8 = "double";
      char v9 = 8;
      goto LABEL_77;
    case 9:
      char v8 = "double";
      char v9 = 9;
      goto LABEL_77;
    case 10:
      char v8 = "double";
      char v9 = 10;
      goto LABEL_77;
    case 11:
      char v8 = "double";
      char v9 = 11;
      goto LABEL_77;
    case 12:
      char v8 = "double";
      char v9 = 12;
      goto LABEL_77;
    case 13:
      char v8 = "double";
      char v9 = 13;
      goto LABEL_77;
    case 14:
      char v8 = "double";
      char v9 = 14;
      goto LABEL_77;
    case 15:
      char v8 = "double";
      char v9 = 15;
      goto LABEL_77;
    case 16:
      char v8 = "double";
      char v9 = 16;
      goto LABEL_77;
    case 17:
      char v8 = "double";
      char v9 = 17;
      goto LABEL_77;
    case 18:
      char v8 = "double";
      char v9 = 18;
      goto LABEL_77;
    case 19:
      char v8 = "double";
      char v9 = 19;
      goto LABEL_77;
    case 20:
      char v8 = "double";
      char v9 = 20;
      goto LABEL_77;
    case 21:
      char v8 = "double";
      char v9 = 21;
      goto LABEL_77;
    case 22:
      char v8 = "double";
      char v9 = 22;
      goto LABEL_77;
    case 23:
      char v8 = "double";
      char v9 = 23;
      goto LABEL_77;
    case 24:
      char v8 = "double";
      char v9 = 24;
      goto LABEL_77;
    case 25:
      char v8 = "double";
      char v9 = 25;
      goto LABEL_77;
    case 26:
      char v8 = "double";
      char v9 = 26;
      goto LABEL_77;
    case 27:
      char v8 = "double";
      char v9 = 27;
      goto LABEL_77;
    case 28:
      char v8 = "double";
      char v9 = 28;
      goto LABEL_77;
    case 29:
      char v8 = "double";
      char v9 = 29;
      goto LABEL_77;
    case 30:
      char v8 = "double";
      char v9 = 30;
      goto LABEL_77;
    case 31:
      char v8 = "double";
      char v9 = 31;
      goto LABEL_77;
    case 32:
      char v8 = "double";
      char v9 = 32;
      goto LABEL_77;
    case 33:
      char v8 = "double";
      char v9 = 33;
      goto LABEL_77;
    case 34:
      char v8 = "double";
      char v9 = 34;
      goto LABEL_77;
    case 35:
      char v8 = "double";
      char v9 = 35;
      goto LABEL_77;
    case 36:
      char v8 = "double";
      char v9 = 36;
      goto LABEL_77;
    case 37:
      char v8 = "double";
      char v9 = 37;
      goto LABEL_77;
    case 38:
      char v8 = "double";
      char v9 = 38;
      goto LABEL_77;
    case 39:
      char v8 = "double";
      char v9 = 39;
      goto LABEL_77;
    case 40:
      char v8 = "double";
      char v9 = 40;
      goto LABEL_77;
    case 41:
      char v8 = "double";
      char v9 = 41;
      goto LABEL_77;
    case 42:
      char v8 = "double";
      char v9 = 42;
      goto LABEL_77;
    case 43:
      char v8 = "double";
      char v9 = 43;
      goto LABEL_77;
    case 44:
      char v8 = "double";
      char v9 = 44;
      goto LABEL_77;
    case 45:
      char v8 = "double";
      char v9 = 45;
      goto LABEL_77;
    case 46:
      char v8 = "double";
      char v9 = 46;
      goto LABEL_77;
    case 47:
      char v8 = "double";
      char v9 = 47;
      goto LABEL_77;
    case 48:
      char v8 = "double";
      char v9 = 48;
      goto LABEL_77;
    case 49:
      char v8 = "double";
      char v9 = 49;
      goto LABEL_77;
    case 50:
      char v8 = "double";
      char v9 = 50;
      goto LABEL_77;
    case 51:
      char v8 = "double";
      char v9 = 51;
      goto LABEL_77;
    case 52:
      char v8 = "double";
      char v9 = 52;
      goto LABEL_77;
    case 53:
      char v8 = "double";
      char v9 = 53;
      goto LABEL_77;
    case 54:
      char v8 = "double";
      char v9 = 54;
      goto LABEL_77;
    case 55:
      char v8 = "double";
      char v9 = 55;
      goto LABEL_77;
    case 56:
      char v8 = "double";
      char v9 = 56;
      goto LABEL_77;
    case 57:
      char v8 = "double";
      char v9 = 57;
      goto LABEL_77;
    case 58:
      char v8 = "double";
      char v9 = 58;
      goto LABEL_77;
    case 59:
      char v8 = "double";
      char v9 = 59;
      goto LABEL_77;
    case 60:
      char v8 = "double";
      char v9 = 60;
      goto LABEL_77;
    case 61:
      char v8 = "double";
      char v9 = 61;
      goto LABEL_77;
    case 62:
      char v8 = "double";
      char v9 = 62;
      goto LABEL_77;
    case 63:
      char v8 = "double";
      char v9 = 63;
      goto LABEL_77;
    case 64:
      char v8 = "double";
      char v9 = 64;
      goto LABEL_77;
    case 65:
      char v8 = "double";
      char v9 = 65;
      goto LABEL_77;
    case 66:
      char v8 = "double";
      char v9 = 66;
      goto LABEL_77;
    case 67:
      char v8 = "double";
      char v9 = 67;
      goto LABEL_77;
    case 68:
      char v8 = "double";
      char v9 = 68;
      goto LABEL_77;
    case 69:
      char v8 = "double";
      char v9 = 69;
      goto LABEL_77;
    case 70:
      char v8 = "double";
      char v9 = 70;
      goto LABEL_77;
    case 71:
      char v8 = "double";
      char v9 = 71;
      goto LABEL_77;
    case 72:
      char v8 = "double";
      char v9 = 72;
      goto LABEL_77;
    case 73:
      char v8 = "double";
      char v9 = 73;
LABEL_77:
      throwWrongTypeForParamId(v9, v8, "BOOL", a4, a5, a6, a7, a8);
      break;
    default:
      throwWrongParamIdValue(a2, "enum", a3, a4, a5, a6, a7, a8);
      break;
  }
  return 0;
}

void ConfidenceParamSet::setBoolParameter(ConfidenceParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8 = a2;
  switch(a2)
  {
    case 1:
      if (*((_DWORD *)this + 9))
      {
        char v9 = "ConfidenceEnableWordLevel";
        goto LABEL_8;
      }
      *((unsigned char *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = a3;
      return;
    case 2:
      if (*((_DWORD *)this + 9))
      {
        char v9 = "ConfidenceEnableUttLevel";
        goto LABEL_8;
      }
      *((unsigned char *)this + 41) = a3;
      return;
    case 3:
      if (*((_DWORD *)this + 9))
      {
        char v9 = "ConfidenceEnableForAllNBest";
LABEL_8:
        throwParamSetSetFailed(v9, "BOOL", a3, a4, a5, a6, a7, a8);
      }
      else
      {
        *((unsigned char *)this + 42) = a3;
      }
      return;
    case 4:
      throwWrongTypeForParamId(4, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_12;
    case 5:
LABEL_12:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_13;
    case 6:
LABEL_13:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_14;
    case 7:
LABEL_14:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_15;
    case 8:
LABEL_15:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_16;
    case 9:
LABEL_16:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_17;
    case 10:
LABEL_17:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_18;
    case 11:
LABEL_18:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_19;
    case 12:
LABEL_19:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_20;
    case 13:
LABEL_20:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_21;
    case 14:
LABEL_21:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_22;
    case 15:
LABEL_22:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_23;
    case 16:
LABEL_23:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 17:
LABEL_24:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_25;
    case 18:
LABEL_25:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_26;
    case 19:
LABEL_26:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_27;
    case 20:
LABEL_27:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_28;
    case 21:
LABEL_28:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_29;
    case 22:
LABEL_29:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_30;
    case 23:
LABEL_30:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_31;
    case 24:
LABEL_31:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_32;
    case 25:
LABEL_32:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_33;
    case 26:
LABEL_33:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_34;
    case 27:
LABEL_34:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_35;
    case 28:
LABEL_35:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_36;
    case 29:
LABEL_36:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_37;
    case 30:
LABEL_37:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_38;
    case 31:
LABEL_38:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_39;
    case 32:
LABEL_39:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_40;
    case 33:
LABEL_40:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_41;
    case 34:
LABEL_41:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_42;
    case 35:
LABEL_42:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_43;
    case 36:
LABEL_43:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_44;
    case 37:
LABEL_44:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_45;
    case 38:
LABEL_45:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_46;
    case 39:
LABEL_46:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_47;
    case 40:
LABEL_47:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_48;
    case 41:
LABEL_48:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_49;
    case 42:
LABEL_49:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_50;
    case 43:
LABEL_50:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_51;
    case 44:
LABEL_51:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_52;
    case 45:
LABEL_52:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_53;
    case 46:
LABEL_53:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_54;
    case 47:
LABEL_54:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_55;
    case 48:
LABEL_55:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_56;
    case 49:
LABEL_56:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_57;
    case 50:
LABEL_57:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_58;
    case 51:
LABEL_58:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_59;
    case 52:
LABEL_59:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_60;
    case 53:
LABEL_60:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_61;
    case 54:
LABEL_61:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_62;
    case 55:
LABEL_62:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_63;
    case 56:
LABEL_63:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_64;
    case 57:
LABEL_64:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_65;
    case 58:
LABEL_65:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_66;
    case 59:
LABEL_66:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_67;
    case 60:
LABEL_67:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_68;
    case 61:
LABEL_68:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_69;
    case 62:
LABEL_69:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_70;
    case 63:
LABEL_70:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_71;
    case 64:
LABEL_71:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_72;
    case 65:
LABEL_72:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_73;
    case 66:
LABEL_73:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_74;
    case 67:
LABEL_74:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_75;
    case 68:
LABEL_75:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_76;
    case 69:
LABEL_76:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_77;
    case 70:
LABEL_77:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_78;
    case 71:
LABEL_78:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_79;
    case 72:
LABEL_79:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_80;
    case 73:
LABEL_80:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      break;
    default:
      break;
  }

  throwWrongParamIdValue(v8, "BOOL", a3, a4, a5, a6, a7, a8);
}

void ConfidenceParamSet::setIntParameter(ConfidenceParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8 = a2;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_3;
    case 2:
LABEL_3:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_4;
    case 3:
LABEL_4:
      throwWrongTypeForParamId(v8, "BOOL", "int", a4, a5, a6, a7, a8);
      goto LABEL_5;
    case 4:
LABEL_5:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_6;
    case 5:
LABEL_6:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_7;
    case 6:
LABEL_7:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_8;
    case 7:
LABEL_8:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_9;
    case 8:
LABEL_9:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_10;
    case 9:
LABEL_10:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_11;
    case 10:
LABEL_11:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_12;
    case 11:
LABEL_12:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_13;
    case 12:
LABEL_13:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_14;
    case 13:
LABEL_14:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_15;
    case 14:
LABEL_15:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_16;
    case 15:
LABEL_16:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_17;
    case 16:
LABEL_17:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_18;
    case 17:
LABEL_18:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_19;
    case 18:
LABEL_19:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_20;
    case 19:
LABEL_20:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_21;
    case 20:
LABEL_21:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_22;
    case 21:
LABEL_22:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_23;
    case 22:
LABEL_23:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 23:
LABEL_24:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_25;
    case 24:
LABEL_25:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_26;
    case 25:
LABEL_26:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_27;
    case 26:
LABEL_27:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_28;
    case 27:
LABEL_28:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_29;
    case 28:
LABEL_29:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_30;
    case 29:
LABEL_30:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_31;
    case 30:
LABEL_31:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_32;
    case 31:
LABEL_32:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_33;
    case 32:
LABEL_33:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_34;
    case 33:
LABEL_34:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_35;
    case 34:
LABEL_35:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_36;
    case 35:
LABEL_36:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_37;
    case 36:
LABEL_37:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_38;
    case 37:
LABEL_38:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_39;
    case 38:
LABEL_39:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_40;
    case 39:
LABEL_40:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_41;
    case 40:
LABEL_41:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_42;
    case 41:
LABEL_42:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_43;
    case 42:
LABEL_43:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_44;
    case 43:
LABEL_44:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_45;
    case 44:
LABEL_45:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_46;
    case 45:
LABEL_46:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_47;
    case 46:
LABEL_47:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_48;
    case 47:
LABEL_48:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_49;
    case 48:
LABEL_49:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_50;
    case 49:
LABEL_50:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_51;
    case 50:
LABEL_51:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_52;
    case 51:
LABEL_52:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_53;
    case 52:
LABEL_53:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_54;
    case 53:
LABEL_54:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_55;
    case 54:
LABEL_55:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_56;
    case 55:
LABEL_56:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_57;
    case 56:
LABEL_57:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_58;
    case 57:
LABEL_58:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_59;
    case 58:
LABEL_59:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_60;
    case 59:
LABEL_60:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_61;
    case 60:
LABEL_61:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_62;
    case 61:
LABEL_62:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_63;
    case 62:
LABEL_63:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_64;
    case 63:
LABEL_64:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_65;
    case 64:
LABEL_65:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_66;
    case 65:
LABEL_66:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_67;
    case 66:
LABEL_67:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_68;
    case 67:
LABEL_68:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_69;
    case 68:
LABEL_69:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_70;
    case 69:
LABEL_70:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_71;
    case 70:
LABEL_71:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_72;
    case 71:
LABEL_72:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_73;
    case 72:
LABEL_73:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      goto LABEL_74;
    case 73:
LABEL_74:
      throwWrongTypeForParamId(v8, "double", "int", a4, a5, a6, a7, a8);
      break;
    default:
      break;
  }

  throwWrongParamIdValue(v8, "int", a3, a4, a5, a6, a7, a8);
}

void ConfidenceParamSet::setDoubleParameter(ConfidenceParamSet *this, int a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char v9 = a2;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_3;
    case 2:
LABEL_3:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_4;
    case 3:
LABEL_4:
      throwWrongTypeForParamId(v9, "BOOL", "double", a5, a6, a7, a8, a9);
      goto LABEL_5;
    case 4:
LABEL_5:
      ParamByParamId = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 4, a4, a5, a6, a7, a8, a9);
      if (ParamByParamId) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)ParamByParamId, a3, 0, 0, v13, v14, v15, v16, v17);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceUttNBestHighThresh";
        goto LABEL_289;
      }
      *((double *)this + 6) = a3;
      return;
    case 5:
      uint64_t v25 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 5, a4, a5, a6, a7, a8, a9);
      if (v25) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v25, a3, 0, 0, v26, v27, v28, v29, v30);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceUttNBestLowThresh";
        goto LABEL_289;
      }
      *((double *)this + 7) = a3;
      return;
    case 6:
      uint64_t v31 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 6, a4, a5, a6, a7, a8, a9);
      if (v31) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v31, a3, 0, 0, v32, v33, v34, v35, v36);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceUttProbAverageActiveNodeCountFactor";
        goto LABEL_289;
      }
      *((double *)this + 8) = a3;
      return;
    case 7:
      uint64_t v37 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 7, a4, a5, a6, a7, a8, a9);
      if (v37) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v37, a3, 0, 0, v38, v39, v40, v41, v42);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceUttProbAverageDurationFactor";
        goto LABEL_289;
      }
      *((double *)this + 9) = a3;
      return;
    case 8:
      uint64_t v43 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 8, a4, a5, a6, a7, a8, a9);
      if (v43) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v43, a3, 0, 0, v44, v45, v46, v47, v48);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceUttProbAverageLMScoreFactor";
        goto LABEL_289;
      }
      *((double *)this + 10) = a3;
      return;
    case 9:
      uint64_t v49 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 9, a4, a5, a6, a7, a8, a9);
      if (v49) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v49, a3, 0, 0, v50, v51, v52, v53, v54);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceUttProbConstantTerm";
        goto LABEL_289;
      }
      *((double *)this + 11) = a3;
      return;
    case 10:
      uint64_t v55 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 10, a4, a5, a6, a7, a8, a9);
      if (v55) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v55, a3, 0, 0, v56, v57, v58, v59, v60);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceUttProbLogWordCountFactor";
        goto LABEL_289;
      }
      *((double *)this + 12) = a3;
      return;
    case 11:
      uint64_t v61 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 11, a4, a5, a6, a7, a8, a9);
      if (v61) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v61, a3, 0, 0, v62, v63, v64, v65, v66);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceUttProbMaxWordsEndingFactor";
        goto LABEL_289;
      }
      *((double *)this + 13) = a3;
      return;
    case 12:
      uint64_t v67 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 12, a4, a5, a6, a7, a8, a9);
      if (v67) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v67, a3, 0, 0, v68, v69, v70, v71, v72);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceUttProbNBestHighCountFactor";
        goto LABEL_289;
      }
      *((double *)this + 14) = a3;
      return;
    case 13:
      uint64_t v73 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 13, a4, a5, a6, a7, a8, a9);
      if (v73) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v73, a3, 0, 0, v74, v75, v76, v77, v78);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceUttProbNBestLowCountFactor";
        goto LABEL_289;
      }
      *((double *)this + 15) = a3;
      return;
    case 14:
      uint64_t v79 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 14, a4, a5, a6, a7, a8, a9);
      if (v79) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v79, a3, 0, 0, v80, v81, v82, v83, v84);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceUttProbNBestMaxFactor";
        goto LABEL_289;
      }
      *((double *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = a3;
      return;
    case 15:
      uint64_t v85 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 15, a4, a5, a6, a7, a8, a9);
      if (v85) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v85, a3, 0, 0, v86, v87, v88, v89, v90);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceUttProbNBestMinFactor";
        goto LABEL_289;
      }
      *((double *)this + 17) = a3;
      return;
    case 16:
      uint64_t v91 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 16, a4, a5, a6, a7, a8, a9);
      if (v91) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v91, a3, 0, 0, v92, v93, v94, v95, v96);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceUttProbNBestWordAverageFactor";
        goto LABEL_289;
      }
      *((double *)this + 18) = a3;
      return;
    case 17:
      uint64_t v97 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 17, a4, a5, a6, a7, a8, a9);
      if (v97) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v97, a3, 0, 0, v98, v99, v100, v101, v102);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceUttProbTotalLMScoreFactor";
        goto LABEL_289;
      }
      *((double *)this + 19) = a3;
      return;
    case 18:
      uint64_t v103 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 18, a4, a5, a6, a7, a8, a9);
      if (v103) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v103, a3, 0, 0, v104, v105, v106, v107, v108);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceUttProbUttAverageAMinusBScoreFactor";
        goto LABEL_289;
      }
      *((double *)this + 20) = a3;
      return;
    case 19:
      uint64_t v109 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 19, a4, a5, a6, a7, a8, a9);
      if (v109) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v109, a3, 0, 0, v110, v111, v112, v113, v114);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbAcousticScoreFactor";
        goto LABEL_289;
      }
      *((double *)this + 21) = a3;
      return;
    case 20:
      uint64_t v115 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 20, a4, a5, a6, a7, a8, a9);
      if (v115) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v115, a3, 0, 0, v116, v117, v118, v119, v120);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbAcousticScoreLCntx1Factor";
        goto LABEL_289;
      }
      *((double *)this + 22) = a3;
      return;
    case 21:
      uint64_t v121 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 21, a4, a5, a6, a7, a8, a9);
      if (v121) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v121, a3, 0, 0, v122, v123, v124, v125, v126);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbAcousticScoreLCntx2Factor";
        goto LABEL_289;
      }
      *((double *)this + 23) = a3;
      return;
    case 22:
      uint64_t v127 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 22, a4, a5, a6, a7, a8, a9);
      if (v127) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v127, a3, 0, 0, v128, v129, v130, v131, v132);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbAcousticScoreRCntx1Factor";
        goto LABEL_289;
      }
      *((double *)this + 24) = a3;
      return;
    case 23:
      uint64_t v133 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 23, a4, a5, a6, a7, a8, a9);
      if (v133) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v133, a3, 0, 0, v134, v135, v136, v137, v138);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbAcousticScoreRCntx2Factor";
        goto LABEL_289;
      }
      *((double *)this + 25) = a3;
      return;
    case 24:
      uint64_t v139 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 24, a4, a5, a6, a7, a8, a9);
      if (v139) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v139, a3, 0, 0, v140, v141, v142, v143, v144);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbAverageAMinusBScoreFactor";
        goto LABEL_289;
      }
      *((double *)this + 26) = a3;
      return;
    case 25:
      uint64_t v145 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 25, a4, a5, a6, a7, a8, a9);
      if (v145) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v145, a3, 0, 0, v146, v147, v148, v149, v150);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbAverageAMinusBScoreLCntx1Factor";
        goto LABEL_289;
      }
      *((double *)this + 27) = a3;
      return;
    case 26:
      uint64_t v151 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 26, a4, a5, a6, a7, a8, a9);
      if (v151) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v151, a3, 0, 0, v152, v153, v154, v155, v156);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbAverageAMinusBScoreLCntx2Factor";
        goto LABEL_289;
      }
      *((double *)this + 28) = a3;
      return;
    case 27:
      uint64_t v157 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 27, a4, a5, a6, a7, a8, a9);
      if (v157) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v157, a3, 0, 0, v158, v159, v160, v161, v162);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbAverageAMinusBScoreRCntx1Factor";
        goto LABEL_289;
      }
      *((double *)this + 29) = a3;
      return;
    case 28:
      uint64_t v163 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 28, a4, a5, a6, a7, a8, a9);
      if (v163) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v163, a3, 0, 0, v164, v165, v166, v167, v168);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbAverageAMinusBScoreRCntx2Factor";
        goto LABEL_289;
      }
      *((double *)this + 30) = a3;
      return;
    case 29:
      uint64_t v169 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 29, a4, a5, a6, a7, a8, a9);
      if (v169) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v169, a3, 0, 0, v170, v171, v172, v173, v174);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbAverageAcousticScoreFactor";
        goto LABEL_289;
      }
      *((double *)this + 31) = a3;
      return;
    case 30:
      uint64_t v175 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 30, a4, a5, a6, a7, a8, a9);
      if (v175) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v175, a3, 0, 0, v176, v177, v178, v179, v180);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbAverageAcousticScoreLCntx1Factor";
        goto LABEL_289;
      }
      *((double *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = a3;
      return;
    case 31:
      uint64_t v181 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 31, a4, a5, a6, a7, a8, a9);
      if (v181) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v181, a3, 0, 0, v182, v183, v184, v185, v186);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbAverageAcousticScoreLCntx2Factor";
        goto LABEL_289;
      }
      *((double *)this + 33) = a3;
      return;
    case 32:
      uint64_t v187 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 32, a4, a5, a6, a7, a8, a9);
      if (v187) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v187, a3, 0, 0, v188, v189, v190, v191, v192);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbAverageAcousticScoreRCntx1Factor";
        goto LABEL_289;
      }
      *((double *)this + 34) = a3;
      return;
    case 33:
      uint64_t v193 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 33, a4, a5, a6, a7, a8, a9);
      if (v193) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v193, a3, 0, 0, v194, v195, v196, v197, v198);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbAverageAcousticScoreRCntx2Factor";
        goto LABEL_289;
      }
      *((double *)this + 35) = a3;
      return;
    case 34:
      uint64_t v199 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 34, a4, a5, a6, a7, a8, a9);
      if (v199) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v199, a3, 0, 0, v200, v201, v202, v203, v204);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbAverageActiveNodeCountFactor";
        goto LABEL_289;
      }
      *((double *)this + 36) = a3;
      return;
    case 35:
      uint64_t v205 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 35, a4, a5, a6, a7, a8, a9);
      if (v205) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v205, a3, 0, 0, v206, v207, v208, v209, v210);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbAverageActiveNodeCountLCntx1Factor";
        goto LABEL_289;
      }
      *((double *)this + 37) = a3;
      return;
    case 36:
      uint64_t v211 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 36, a4, a5, a6, a7, a8, a9);
      if (v211) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v211, a3, 0, 0, v212, v213, v214, v215, v216);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbAverageActiveNodeCountLCntx2Factor";
        goto LABEL_289;
      }
      *((double *)this + 38) = a3;
      return;
    case 37:
      uint64_t v217 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 37, a4, a5, a6, a7, a8, a9);
      if (v217) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v217, a3, 0, 0, v218, v219, v220, v221, v222);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbAverageActiveNodeCountRCntx1Factor";
        goto LABEL_289;
      }
      *((double *)this + 39) = a3;
      return;
    case 38:
      uint64_t v223 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 38, a4, a5, a6, a7, a8, a9);
      if (v223) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v223, a3, 0, 0, v224, v225, v226, v227, v228);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbAverageActiveNodeCountRCntx2Factor";
        goto LABEL_289;
      }
      *((double *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = a3;
      return;
    case 39:
      uint64_t v229 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 39, a4, a5, a6, a7, a8, a9);
      if (v229) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v229, a3, 0, 0, v230, v231, v232, v233, v234);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbAverageBestScoreFactor";
        goto LABEL_289;
      }
      *((double *)this + 41) = a3;
      return;
    case 40:
      uint64_t v235 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 40, a4, a5, a6, a7, a8, a9);
      if (v235) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v235, a3, 0, 0, v236, v237, v238, v239, v240);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbAverageBestScoreLCntx1Factor";
        goto LABEL_289;
      }
      *((double *)this + 42) = a3;
      return;
    case 41:
      uint64_t v241 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 41, a4, a5, a6, a7, a8, a9);
      if (v241) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v241, a3, 0, 0, v242, v243, v244, v245, v246);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbAverageBestScoreLCntx2Factor";
        goto LABEL_289;
      }
      *((double *)this + 43) = a3;
      return;
    case 42:
      uint64_t v247 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 42, a4, a5, a6, a7, a8, a9);
      if (v247) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v247, a3, 0, 0, v248, v249, v250, v251, v252);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbAverageBestScoreRCntx1Factor";
        goto LABEL_289;
      }
      *((double *)this + 44) = a3;
      return;
    case 43:
      uint64_t v253 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 43, a4, a5, a6, a7, a8, a9);
      if (v253) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v253, a3, 0, 0, v254, v255, v256, v257, v258);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbAverageBestScoreRCntx2Factor";
        goto LABEL_289;
      }
      *((double *)this + 45) = a3;
      return;
    case 44:
      uint64_t v259 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 44, a4, a5, a6, a7, a8, a9);
      if (v259) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v259, a3, 0, 0, v260, v261, v262, v263, v264);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbConstantTerm";
        goto LABEL_289;
      }
      *((double *)this + 46) = a3;
      return;
    case 45:
      uint64_t v265 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 45, a4, a5, a6, a7, a8, a9);
      if (v265) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v265, a3, 0, 0, v266, v267, v268, v269, v270);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbDurationFactor";
        goto LABEL_289;
      }
      *((double *)this + 47) = a3;
      return;
    case 46:
      uint64_t v271 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 46, a4, a5, a6, a7, a8, a9);
      if (v271) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v271, a3, 0, 0, v272, v273, v274, v275, v276);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbDurationLCntx1Factor";
        goto LABEL_289;
      }
      *((double *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = a3;
      return;
    case 47:
      uint64_t v277 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 47, a4, a5, a6, a7, a8, a9);
      if (v277) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v277, a3, 0, 0, v278, v279, v280, v281, v282);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbDurationLCntx2Factor";
        goto LABEL_289;
      }
      *((double *)this + 49) = a3;
      return;
    case 48:
      uint64_t v283 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 48, a4, a5, a6, a7, a8, a9);
      if (v283) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v283, a3, 0, 0, v284, v285, v286, v287, v288);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbDurationRCntx1Factor";
        goto LABEL_289;
      }
      *((double *)this + 50) = a3;
      return;
    case 49:
      uint64_t v289 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 49, a4, a5, a6, a7, a8, a9);
      if (v289) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v289, a3, 0, 0, v290, v291, v292, v293, v294);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbDurationRCntx2Factor";
        goto LABEL_289;
      }
      *((double *)this + 51) = a3;
      return;
    case 50:
      uint64_t v295 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 50, a4, a5, a6, a7, a8, a9);
      if (v295) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v295, a3, 0, 0, v296, v297, v298, v299, v300);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbLMScoreFactor";
        goto LABEL_289;
      }
      *((double *)this + 52) = a3;
      return;
    case 51:
      v301 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 51, a4, a5, a6, a7, a8, a9);
      if (v301) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v301, a3, 0, 0, v302, v303, v304, v305, v306);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbLMScoreLCntx1Factor";
        goto LABEL_289;
      }
      *((double *)this + 53) = a3;
      return;
    case 52:
      v307 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 52, a4, a5, a6, a7, a8, a9);
      if (v307) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v307, a3, 0, 0, v308, v309, v310, v311, v312);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbLMScoreLCntx2Factor";
        goto LABEL_289;
      }
      *((double *)this + 54) = a3;
      return;
    case 53:
      v313 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 53, a4, a5, a6, a7, a8, a9);
      if (v313) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v313, a3, 0, 0, v314, v315, v316, v317, v318);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbLMScoreRCntx1Factor";
        goto LABEL_289;
      }
      *((double *)this + 55) = a3;
      return;
    case 54:
      v319 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 54, a4, a5, a6, a7, a8, a9);
      if (v319) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v319, a3, 0, 0, v320, v321, v322, v323, v324);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbLMScoreRCntx2Factor";
        goto LABEL_289;
      }
      *((double *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = a3;
      return;
    case 55:
      v325 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 55, a4, a5, a6, a7, a8, a9);
      if (v325) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v325, a3, 0, 0, v326, v327, v328, v329, v330);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbLeftContextIndicator1Factor";
        goto LABEL_289;
      }
      *((double *)this + 57) = a3;
      return;
    case 56:
      v331 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 56, a4, a5, a6, a7, a8, a9);
      if (v331) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v331, a3, 0, 0, v332, v333, v334, v335, v336);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbLeftContextIndicator2Factor";
        goto LABEL_289;
      }
      *((double *)this + 58) = a3;
      return;
    case 57:
      v337 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 57, a4, a5, a6, a7, a8, a9);
      if (v337) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v337, a3, 0, 0, v338, v339, v340, v341, v342);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbLogWordCountFactor";
        goto LABEL_289;
      }
      *((double *)this + 59) = a3;
      return;
    case 58:
      v343 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 58, a4, a5, a6, a7, a8, a9);
      if (v343) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v343, a3, 0, 0, v344, v345, v346, v347, v348);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbLogWordCountLCntx1Factor";
        goto LABEL_289;
      }
      *((double *)this + 60) = a3;
      return;
    case 59:
      v349 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 59, a4, a5, a6, a7, a8, a9);
      if (v349) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v349, a3, 0, 0, v350, v351, v352, v353, v354);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbLogWordCountLCntx2Factor";
        goto LABEL_289;
      }
      *((double *)this + 61) = a3;
      return;
    case 60:
      v355 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 60, a4, a5, a6, a7, a8, a9);
      if (v355) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v355, a3, 0, 0, v356, v357, v358, v359, v360);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbLogWordCountRCntx1Factor";
        goto LABEL_289;
      }
      *((double *)this + 62) = a3;
      return;
    case 61:
      v361 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 61, a4, a5, a6, a7, a8, a9);
      if (v361) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v361, a3, 0, 0, v362, v363, v364, v365, v366);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbLogWordCountRCntx2Factor";
        goto LABEL_289;
      }
      *((double *)this + 63) = a3;
      return;
    case 62:
      v367 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 62, a4, a5, a6, a7, a8, a9);
      if (v367) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v367, a3, 0, 0, v368, v369, v370, v371, v372);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbNBestScoreFactor";
        goto LABEL_289;
      }
      *((double *)this + 64) = a3;
      return;
    case 63:
      v373 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 63, a4, a5, a6, a7, a8, a9);
      if (v373) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v373, a3, 0, 0, v374, v375, v376, v377, v378);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbNBestScoreLCntx1Factor";
        goto LABEL_289;
      }
      *((double *)this + 65) = a3;
      return;
    case 64:
      v379 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 64, a4, a5, a6, a7, a8, a9);
      if (v379) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v379, a3, 0, 0, v380, v381, v382, v383, v384);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbNBestScoreLCntx2Factor";
        goto LABEL_289;
      }
      *((double *)this + 66) = a3;
      return;
    case 65:
      v385 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 65, a4, a5, a6, a7, a8, a9);
      if (v385) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v385, a3, 0, 0, v386, v387, v388, v389, v390);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbNBestScoreRCntx1Factor";
        goto LABEL_289;
      }
      *((double *)this + 67) = a3;
      return;
    case 66:
      v391 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 66, a4, a5, a6, a7, a8, a9);
      if (v391) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v391, a3, 0, 0, v392, v393, v394, v395, v396);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbNBestScoreRCntx2Factor";
        goto LABEL_289;
      }
      *((double *)this + 68) = a3;
      return;
    case 67:
      v397 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 67, a4, a5, a6, a7, a8, a9);
      if (v397) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v397, a3, 0, 0, v398, v399, v400, v401, v402);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbRightContextIndicator1Factor";
        goto LABEL_289;
      }
      *((double *)this + 69) = a3;
      return;
    case 68:
      v403 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 68, a4, a5, a6, a7, a8, a9);
      if (v403) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v403, a3, 0, 0, v404, v405, v406, v407, v408);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbRightContextIndicator2Factor";
        goto LABEL_289;
      }
      *((double *)this + 70) = a3;
      return;
    case 69:
      v409 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 69, a4, a5, a6, a7, a8, a9);
      if (v409) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v409, a3, 0, 0, v410, v411, v412, v413, v414);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbWordsEndingCountFactor";
        goto LABEL_289;
      }
      *((double *)this + 71) = a3;
      return;
    case 70:
      v415 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 70, a4, a5, a6, a7, a8, a9);
      if (v415) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v415, a3, 0, 0, v416, v417, v418, v419, v420);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbWordsEndingCountLCntx1Factor";
        goto LABEL_289;
      }
      *((double *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = a3;
      return;
    case 71:
      v421 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 71, a4, a5, a6, a7, a8, a9);
      if (v421) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v421, a3, 0, 0, v422, v423, v424, v425, v426);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbWordsEndingCountLCntx2Factor";
        goto LABEL_289;
      }
      *((double *)this + 73) = a3;
      return;
    case 72:
      v427 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 72, a4, a5, a6, a7, a8, a9);
      if (v427) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v427, a3, 0, 0, v428, v429, v430, v431, v432);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbWordsEndingCountRCntx1Factor";
        goto LABEL_289;
      }
      *((double *)this + 74) = a3;
      break;
    case 73:
      v433 = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A58, 73, a4, a5, a6, a7, a8, a9);
      if (v433) {
      DoubleParamSpec::validateValue((DoubleParamSpec *)v433, a3, 0, 0, v434, v435, v436, v437, v438);
      }
      if (*((_DWORD *)this + 9))
      {
        uint64_t v24 = "ConfidenceWordProbWordsEndingCountRCntx2Factor";
LABEL_289:
        throwParamSetSetFailed(v24, "double", v18, v19, v20, v21, v22, v23);
      }
      else
      {
        *((double *)this + 75) = a3;
      }
      break;
    default:
      throwWrongParamIdValue(a2, "double", a4, a5, a6, a7, a8, a9);
      return;
  }
}

void ConfidenceParamSet::setStringParameter(ConfidenceParamSet *this, int a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8 = a2;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_3;
    case 2:
LABEL_3:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_4;
    case 3:
LABEL_4:
      throwWrongTypeForParamId(v8, "BOOL", "string", a4, a5, a6, a7, a8);
      goto LABEL_5;
    case 4:
LABEL_5:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_6;
    case 5:
LABEL_6:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_7;
    case 6:
LABEL_7:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_8;
    case 7:
LABEL_8:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_9;
    case 8:
LABEL_9:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_10;
    case 9:
LABEL_10:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_11;
    case 10:
LABEL_11:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_12;
    case 11:
LABEL_12:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_13;
    case 12:
LABEL_13:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_14;
    case 13:
LABEL_14:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_15;
    case 14:
LABEL_15:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_16;
    case 15:
LABEL_16:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_17;
    case 16:
LABEL_17:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_18;
    case 17:
LABEL_18:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_19;
    case 18:
LABEL_19:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_20;
    case 19:
LABEL_20:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_21;
    case 20:
LABEL_21:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_22;
    case 21:
LABEL_22:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_23;
    case 22:
LABEL_23:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 23:
LABEL_24:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_25;
    case 24:
LABEL_25:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_26;
    case 25:
LABEL_26:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_27;
    case 26:
LABEL_27:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_28;
    case 27:
LABEL_28:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_29;
    case 28:
LABEL_29:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_30;
    case 29:
LABEL_30:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_31;
    case 30:
LABEL_31:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_32;
    case 31:
LABEL_32:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_33;
    case 32:
LABEL_33:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_34;
    case 33:
LABEL_34:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_35;
    case 34:
LABEL_35:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_36;
    case 35:
LABEL_36:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_37;
    case 36:
LABEL_37:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_38;
    case 37:
LABEL_38:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_39;
    case 38:
LABEL_39:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_40;
    case 39:
LABEL_40:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_41;
    case 40:
LABEL_41:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_42;
    case 41:
LABEL_42:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_43;
    case 42:
LABEL_43:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_44;
    case 43:
LABEL_44:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_45;
    case 44:
LABEL_45:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_46;
    case 45:
LABEL_46:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_47;
    case 46:
LABEL_47:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_48;
    case 47:
LABEL_48:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_49;
    case 48:
LABEL_49:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_50;
    case 49:
LABEL_50:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_51;
    case 50:
LABEL_51:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_52;
    case 51:
LABEL_52:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_53;
    case 52:
LABEL_53:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_54;
    case 53:
LABEL_54:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_55;
    case 54:
LABEL_55:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_56;
    case 55:
LABEL_56:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_57;
    case 56:
LABEL_57:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_58;
    case 57:
LABEL_58:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_59;
    case 58:
LABEL_59:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_60;
    case 59:
LABEL_60:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_61;
    case 60:
LABEL_61:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_62;
    case 61:
LABEL_62:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_63;
    case 62:
LABEL_63:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_64;
    case 63:
LABEL_64:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_65;
    case 64:
LABEL_65:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_66;
    case 65:
LABEL_66:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_67;
    case 66:
LABEL_67:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_68;
    case 67:
LABEL_68:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_69;
    case 68:
LABEL_69:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_70;
    case 69:
LABEL_70:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_71;
    case 70:
LABEL_71:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_72;
    case 71:
LABEL_72:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_73;
    case 72:
LABEL_73:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      goto LABEL_74;
    case 73:
LABEL_74:
      throwWrongTypeForParamId(v8, "double", "string", a4, a5, a6, a7, a8);
      break;
    default:
      break;
  }

  throwWrongParamIdValue(v8, "string", (uint64_t)a3, a4, a5, a6, a7, a8);
}

void ConfidenceParamSet::setEnumParameter(ConfidenceParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8 = a2;
  switch(a2)
  {
    case 1:
      throwWrongTypeForParamId(1, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_3;
    case 2:
LABEL_3:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_4;
    case 3:
LABEL_4:
      throwWrongTypeForParamId(v8, "BOOL", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_5;
    case 4:
LABEL_5:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_6;
    case 5:
LABEL_6:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_7;
    case 6:
LABEL_7:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_8;
    case 7:
LABEL_8:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_9;
    case 8:
LABEL_9:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_10;
    case 9:
LABEL_10:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_11;
    case 10:
LABEL_11:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_12;
    case 11:
LABEL_12:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_13;
    case 12:
LABEL_13:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_14;
    case 13:
LABEL_14:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_15;
    case 14:
LABEL_15:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_16;
    case 15:
LABEL_16:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_17;
    case 16:
LABEL_17:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_18;
    case 17:
LABEL_18:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_19;
    case 18:
LABEL_19:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_20;
    case 19:
LABEL_20:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_21;
    case 20:
LABEL_21:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_22;
    case 21:
LABEL_22:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_23;
    case 22:
LABEL_23:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_24;
    case 23:
LABEL_24:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_25;
    case 24:
LABEL_25:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_26;
    case 25:
LABEL_26:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_27;
    case 26:
LABEL_27:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_28;
    case 27:
LABEL_28:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_29;
    case 28:
LABEL_29:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_30;
    case 29:
LABEL_30:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_31;
    case 30:
LABEL_31:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_32;
    case 31:
LABEL_32:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_33;
    case 32:
LABEL_33:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_34;
    case 33:
LABEL_34:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_35;
    case 34:
LABEL_35:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_36;
    case 35:
LABEL_36:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_37;
    case 36:
LABEL_37:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_38;
    case 37:
LABEL_38:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_39;
    case 38:
LABEL_39:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_40;
    case 39:
LABEL_40:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_41;
    case 40:
LABEL_41:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_42;
    case 41:
LABEL_42:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_43;
    case 42:
LABEL_43:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_44;
    case 43:
LABEL_44:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_45;
    case 44:
LABEL_45:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_46;
    case 45:
LABEL_46:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_47;
    case 46:
LABEL_47:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_48;
    case 47:
LABEL_48:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_49;
    case 48:
LABEL_49:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_50;
    case 49:
LABEL_50:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_51;
    case 50:
LABEL_51:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_52;
    case 51:
LABEL_52:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_53;
    case 52:
LABEL_53:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_54;
    case 53:
LABEL_54:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_55;
    case 54:
LABEL_55:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_56;
    case 55:
LABEL_56:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_57;
    case 56:
LABEL_57:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_58;
    case 57:
LABEL_58:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_59;
    case 58:
LABEL_59:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_60;
    case 59:
LABEL_60:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_61;
    case 60:
LABEL_61:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_62;
    case 61:
LABEL_62:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_63;
    case 62:
LABEL_63:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_64;
    case 63:
LABEL_64:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_65;
    case 64:
LABEL_65:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_66;
    case 65:
LABEL_66:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_67;
    case 66:
LABEL_67:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_68;
    case 67:
LABEL_68:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_69;
    case 68:
LABEL_69:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_70;
    case 69:
LABEL_70:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_71;
    case 70:
LABEL_71:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_72;
    case 71:
LABEL_72:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_73;
    case 72:
LABEL_73:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      goto LABEL_74;
    case 73:
LABEL_74:
      throwWrongTypeForParamId(v8, "double", "BOOL", a4, a5, a6, a7, a8);
      break;
    default:
      break;
  }

  throwWrongParamIdValue(v8, "enum", a3, a4, a5, a6, a7, a8);
}

void ConfidenceParamSet::~ConfidenceParamSet(ConfidenceParamSet *this)
{
  *(void *)this = &unk_26C4DFAB0;
  DgnString::~DgnString((ConfidenceParamSet *)((char *)this + 8));
}

{
  uint64_t vars8;

  *(void *)this = &unk_26C4DFAB0;
  DgnString::~DgnString((ConfidenceParamSet *)((char *)this + 8));

  JUMPOUT(0x216698730);
}

void TRespellManager::TRespellManager(TRespellManager *this, TInputStream *a2, TLexicon *a3, const TTokenizerParamManager *a4)
{
  TAllocator::TAllocator(this, 2048);
  *(_OWORD *)(v6 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = 0u;
  *(_OWORD *)(v6 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = 0u;
  *(_OWORD *)(v6 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = 0u;
  *(void *)(v6 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = a3;
  *(void *)(v6 + 104) = a4;
  operator new();
}

void sub_213E8D7F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,void *a34,int a35,__int16 a36,char a37,char a38,int a39,__int16 a40,char a41,char a42)
{
  TFileObjectParser::~TFileObjectParser((TFileObjectParser *)&v48);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    TRespellManager::freeMemory(v42);
    __cxa_rethrow();
  }
  uint64_t v46 = (void *)*((void *)v42 + 8);
  if (v46)
  {
    *((void *)v42 + 9) = v46;
    operator delete(v46);
  }
  uint64_t v47 = *v43;
  if (*v43)
  {
    *((void *)v42 + 6) = v47;
    operator delete(v47);
  }
  TAllocator::clear(v42);
  _Unwind_Resume(a1);
}

void sub_213E8D960()
{
}

void TRespellManager::addRespellObject(TRespellManager *this, const TFileObject *a2)
{
  uint64_t v79 = *MEMORY[0x263EF8340];
  int64x2_t v74 = vdupq_n_s64(1uLL);
  uint64_t v73 = "T";
  int64x2_t v77 = v74;
  uint64_t v75 = -1;
  uint64_t v76 = "T";
  uint64_t v78 = -1;
  if (TFileObject::verify((uint64_t)a2, (uint64_t)&v73, 2uLL, 1))
  {
    std::string::basic_string[abi:ne180100]<0>(&v71, &byte_2140B33BB);
    *(void *)__p = byte_26C4DF190;
    if (SHIBYTE(v72) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v71, *((std::string::size_type *)&v71 + 1));
    }
    else
    {
      *(_OWORD *)&__p[8] = v71;
      v67[0] = v72;
    }
    *(void *)__p = &unk_26C4E0710;
    if (v67[0] >= 0) {
      uint64_t v57 = &__p[8];
    }
    else {
      uint64_t v57 = *(const char **)&__p[8];
    }
    conditionalAssert(v57, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/respellmgr.cpp", 152, v55, v56);
    *(void *)__p = byte_26C4DF190;
    if (SHIBYTE(v67[0]) < 0) {
      operator delete(*(void **)&__p[8]);
    }
    if (SHIBYTE(v72) < 0) {
      operator delete((void *)v71);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
    void *exception = byte_26C4DF190;
    uint64_t v59 = (std::string *)(exception + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v59, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      long long v63 = *(_OWORD *)__p;
      exception[3] = *(void *)&__p[16];
      *(_OWORD *)&v59->__r_.__value_.__l.__data_ = v63;
    }
    void *exception = &unk_26C4E0710;
  }
  long long v71 = 0uLL;
  uint64_t v72 = 0;
  std::vector<TPItnTagHandle_fake **>::reserve((void **)&v71, 0x14uLL);
  uint64_t v4 = *((void *)a2 + 3);
  if (v4)
  {
    char v5 = 0;
    char v65 = 0;
    uint64_t v6 = 0;
    do
    {
      if (!wcscmp(*(const __int32 **)(v4 + 8), (const __int32 *)"T"))
      {
        if (TFileObject::verify((TFileObject *)v4, 1, 0))
        {
          char v5 = 1;
        }
        else if (*(_DWORD *)(v4 + 40) == 2)
        {
          TRegExp::add(*((void *)this + 11), *(__int32 **)(v4 + 24), (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 3);
          char v65 = 1;
        }
        else
        {
          size_t v7 = wcslen(*(const __int32 **)(v4 + 24));
          if ((v7 + 1) >> 62) {
            uint64_t v8 = -1;
          }
          else {
            uint64_t v8 = 4 * (v7 + 1);
          }
          char v9 = (__int32 *)TAllocator::allocate(this, v8);
          wcscpy(v9, *(const __int32 **)(v4 + 24));
          uint64_t v10 = *((void *)&v71 + 1);
          if (*((void *)&v71 + 1) >= (unint64_t)v72)
          {
            uint64_t v12 = (uint64_t)(*((void *)&v71 + 1) - v71) >> 3;
            if ((unint64_t)(v12 + 1) >> 61) {
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v13 = (uint64_t)&v72[-v71] >> 2;
            if (v13 <= v12 + 1) {
              unint64_t v13 = v12 + 1;
            }
            if ((unint64_t)&v72[-v71] >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v14 = v13;
            }
            if (v14) {
              uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v72, v14);
            }
            else {
              uint64_t v15 = 0;
            }
            uint64_t v16 = (__int32 **)&v15[8 * v12];
            *uint64_t v16 = v9;
            int v11 = v16 + 1;
            uint64_t v17 = (char *)*((void *)&v71 + 1);
            uint64_t v18 = (char *)v71;
            if (*((void *)&v71 + 1) != (void)v71)
            {
              do
              {
                uint64_t v19 = (__int32 *)*((void *)v17 - 1);
                v17 -= 8;
                *--uint64_t v16 = v19;
              }
              while (v17 != v18);
              uint64_t v17 = (char *)v71;
            }
            *(void *)&long long v71 = v16;
            *((void *)&v71 + 1) = v11;
            uint64_t v72 = &v15[8 * v14];
            if (v17) {
              operator delete(v17);
            }
          }
          else
          {
            **((void **)&v71 + 1) = v9;
            int v11 = (void *)(v10 + 8);
          }
          *((void *)&v71 + 1) = v11;
        }
      }
      else if (!wcscmp(*(const __int32 **)(v4 + 8), (const __int32 *)"T"))
      {
        uint64_t v6 = compileAlt((const TFileObject *)v4, v6, *((TLexicon **)this + 12), this);
      }
      uint64_t v4 = *(void *)(v4 + 16);
    }
    while (v4);
    if (v5)
    {
      std::string::basic_string[abi:ne180100]<0>(&v69, &byte_2140B33BB);
      *(void *)__p = byte_26C4DF190;
      if (SHIBYTE(v70) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v69, *((std::string::size_type *)&v69 + 1));
      }
      else
      {
        *(_OWORD *)&__p[8] = v69;
        v67[0] = v70;
      }
      *(void *)__p = &unk_26C4E0710;
      if (v67[0] >= 0) {
        uint64_t v60 = &__p[8];
      }
      else {
        uint64_t v60 = *(const char **)&__p[8];
      }
      conditionalAssert(v60, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/respellmgr.cpp", 197, v20, v21);
      *(void *)__p = byte_26C4DF190;
      if (SHIBYTE(v67[0]) < 0) {
        operator delete(*(void **)&__p[8]);
      }
      if (SHIBYTE(v70) < 0) {
        operator delete((void *)v69);
      }
      uint64_t v61 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
      *uint64_t v61 = byte_26C4DF190;
      uint64_t v62 = (std::string *)(v61 + 1);
      if ((__p[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v62, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
      }
      else
      {
        long long v64 = *(_OWORD *)__p;
        v61[3] = *(void *)&__p[16];
        *(_OWORD *)&v62->__r_.__value_.__l.__data_ = v64;
      }
      *uint64_t v61 = &unk_26C4E0710;
    }
  }
  else
  {
    char v65 = 0;
    uint64_t v6 = 0;
  }
  *(void *)__p = v67;
  *(_OWORD *)&__p[8] = xmmword_214085190;
  char v68 = 1;
  if (*((void *)&v71 + 1) != (void)v71)
  {
    unint64_t v22 = 0;
    uint64_t v23 = (char **)((char *)this + 40);
    do
    {
      TBuffer<wchar_t>::resize((uint64_t)__p, 0);
      TCollation::collate((void *)(*((void *)this + 12) + 256), *(unsigned int **)(v71 + 8 * v22), (uint64_t)__p);
      if ((unint64_t)(*(void *)&__p[16] + 1) >> 62) {
        uint64_t v24 = -1;
      }
      else {
        uint64_t v24 = 4 * (*(void *)&__p[16] + 1);
      }
      uint64_t v25 = (__int32 *)TAllocator::allocate(this, v24);
      if (*(void *)&__p[16] >= *(void *)&__p[8])
      {
        if (v68)
        {
          LODWORD(v69) = 0;
          TBuffer<wchar_t>::insert((uint64_t)__p, *(unint64_t *)&__p[16], (int *)&v69, 1uLL);
          uint64_t v26 = *(const __int32 **)__p;
          --*(void *)&__p[16];
        }
        else
        {
          uint64_t v26 = *(const __int32 **)__p;
          if (*(void *)&__p[8]) {
            *(_DWORD *)(*(void *)__p + 4 * *(void *)&__p[8] - 4) = 0;
          }
        }
      }
      else
      {
        uint64_t v26 = *(const __int32 **)__p;
        *(_DWORD *)(*(void *)__p + 4 * *(void *)&__p[16]) = 0;
      }
      wcscpy(v25, v26);
      uint64_t v27 = *(void *)(v71 + 8 * v22);
      uint64_t v29 = (void *)*((void *)this + 6);
      unint64_t v28 = *((void *)this + 7);
      if ((unint64_t)v29 >= v28)
      {
        unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * (((char *)v29 - *v23) >> 3);
        unint64_t v32 = v31 + 1;
        if (v31 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - (void)*v23) >> 3);
        if (2 * v33 > v32) {
          unint64_t v32 = 2 * v33;
        }
        if (v33 >= 0x555555555555555) {
          unint64_t v34 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v34 = v32;
        }
        if (v34) {
          uint64_t v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)this + 56, v34);
        }
        else {
          uint64_t v35 = 0;
        }
        uint64_t v36 = &v35[24 * v31];
        *(void *)uint64_t v36 = v27;
        *((void *)v36 + 1) = v25;
        *((void *)v36 + 2) = v6;
        uint64_t v38 = (char *)*((void *)this + 5);
        uint64_t v37 = (char *)*((void *)this + 6);
        uint64_t v39 = v36;
        if (v37 != v38)
        {
          do
          {
            long long v40 = *(_OWORD *)(v37 - 24);
            *((void *)v39 - 1) = *((void *)v37 - 1);
            *(_OWORD *)(v39 - 24) = v40;
            v39 -= 24;
            v37 -= 24;
          }
          while (v37 != v38);
          uint64_t v37 = *v23;
        }
        uint64_t v30 = v36 + 24;
        *((void *)this + 5) = v39;
        *((void *)this + 6) = v36 + 24;
        *((void *)this + 7) = &v35[24 * v34];
        if (v37) {
          operator delete(v37);
        }
      }
      else
      {
        *uint64_t v29 = v27;
        v29[1] = v25;
        uint64_t v30 = v29 + 3;
        v29[2] = v6;
      }
      *((void *)this + 6) = v30;
      ++v22;
    }
    while (v22 < (uint64_t)(*((void *)&v71 + 1) - v71) >> 3);
  }
  if (v65)
  {
    unint64_t v41 = *((void *)this + 10);
    uint64_t v42 = (TFileObject **)*((void *)this + 9);
    if ((unint64_t)v42 >= v41)
    {
      uint64_t v44 = *((void *)this + 8);
      uint64_t v45 = ((uint64_t)v42 - v44) >> 3;
      if ((unint64_t)(v45 + 1) >> 61) {
        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v46 = v41 - v44;
      uint64_t v47 = v46 >> 2;
      if (v46 >> 2 <= (unint64_t)(v45 + 1)) {
        uint64_t v47 = v45 + 1;
      }
      if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v48 = v47;
      }
      if (v48) {
        uint64_t v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)this + 80, v48);
      }
      else {
        uint64_t v49 = 0;
      }
      uint64_t v50 = (TFileObject **)&v49[8 * v45];
      uint64_t v51 = &v49[8 * v48];
      *uint64_t v50 = v6;
      uint64_t v43 = v50 + 1;
      uint64_t v53 = (char *)*((void *)this + 8);
      uint64_t v52 = (char *)*((void *)this + 9);
      if (v52 != v53)
      {
        do
        {
          uint64_t v54 = (TFileObject *)*((void *)v52 - 1);
          v52 -= 8;
          *--uint64_t v50 = v54;
        }
        while (v52 != v53);
        uint64_t v52 = (char *)*((void *)this + 8);
      }
      *((void *)this + 8) = v50;
      *((void *)this + 9) = v43;
      *((void *)this + 10) = v51;
      if (v52) {
        operator delete(v52);
      }
    }
    else
    {
      *uint64_t v42 = v6;
      uint64_t v43 = v42 + 1;
    }
    *((void *)this + 9) = v43;
  }
  if (v68 && *(void **)__p != v67 && *(void *)__p) {
    MEMORY[0x216698730]();
  }
  if ((void)v71)
  {
    *((void *)&v71 + 1) = v71;
    operator delete((void *)v71);
  }
}

void sub_213E8E26C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  unint64_t v22 = *(void **)(v20 - 184);
  if (v22)
  {
    *(void *)(v20 - 176) = v22;
    operator delete(v22);
  }
  _Unwind_Resume(a1);
}

void sub_213E8E290(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_213E8E38C(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)(v1 - 184);
  if (v3)
  {
    *(void *)(v1 - 176) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_213E8E394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (LOBYTE(STACK[0x448]))
  {
    if (a15 != a12 && a15 != 0) {
      MEMORY[0x216698730]();
    }
  }
  uint64_t v18 = *(void **)(v15 - 184);
  if (v18)
  {
    *(void *)(v15 - 176) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t sortRespellMap(uint64_t a1, uint64_t a2)
{
  return wcscmp(*(const __int32 **)(a1 + 8), *(const __int32 **)(a2 + 8)) >> 31;
}

TRegExp *TRespellManager::freeMemory(TRespellManager *this)
{
  double result = (TRegExp *)*((void *)this + 11);
  if (result)
  {
    TRegExp::~TRegExp(result);
    JUMPOUT(0x216698730);
  }
  return result;
}

void TRespellManager::~TRespellManager(TRespellManager *this)
{
  TRespellManager::freeMemory(this);
  uint64_t v2 = (void *)*((void *)this + 8);
  if (v2)
  {
    *((void *)this + 9) = v2;
    operator delete(v2);
  }
  BOOL v3 = (void *)*((void *)this + 5);
  if (v3)
  {
    *((void *)this + 6) = v3;
    operator delete(v3);
  }
  TAllocator::clear(this);
}

unint64_t TRespellManager::find(uint64_t a1, __int32 *a2, size_t a3, uint64_t a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 3) - a4;
  if (!v5) {
    return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 3);
  }
  uint64_t v6 = a4;
  char v9 = 0;
  do
  {
    uint64_t v10 = v6 + (v5 >> 1);
    int v11 = wcsncmp(a2, *(const __int32 **)(*(void *)(a1 + 40) + 24 * v10 + 8), a3);
    if (v11 < 1)
    {
      v5 >>= 1;
    }
    else
    {
      uint64_t v6 = v10 + 1;
      v5 += ~(v5 >> 1);
    }
    if (v11 < 1) {
      v9 |= v11 == 0;
    }
  }
  while (v5);
  if ((v9 & 1) == 0) {
    return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 3);
  }
  return v6;
}

void TRespellManager::addWords(TRespellManager *this, TVertex *a2, TGraph *a3, TSegmenter *a4)
{
  uint64_t v4 = a3;
  unint64_t v6 = 0;
  char v64 = 0;
  size_t v7 = (char *)*((void *)a2 + 2);
  uint64_t v87 = 0;
  uint64_t v88 = 0;
  uint64_t v89 = 0;
  uint64_t v83 = v85;
  char v65 = v7;
  long long v84 = xmmword_214085190;
  char v86 = 1;
  BOOL v67 = 1;
  char v68 = v7;
  char v8 = 1;
  do
  {
    uint64_t Segment = TSegmenter::getSegment(a4, v68);
    uint64_t v10 = (const __int32 **)Segment;
    if (!Segment) {
      break;
    }
    int v11 = *(_DWORD *)(Segment + 24);
    if (v11 == 5) {
      break;
    }
    char v68 = *(char **)(Segment + 8);
    if (v11) {
      goto LABEL_5;
    }
    if (!*((void *)&v84 + 1))
    {
      int v17 = **(_DWORD **)Segment;
      {
        operator new();
      }
      if (v17 <= 8202)
      {
        if (v17 != 32 && v17 != 160) {
          goto LABEL_5;
        }
      }
      else
      {
        BOOL v18 = v17 == 8203 || v17 == 65279;
        if (!v18 && v17 != 12288) {
          goto LABEL_5;
        }
      }
      if (!*((void *)&v84 + 1)) {
        break;
      }
    }
    __int32 v56 = **v10;
    {
      operator new();
    }
    if (v56 == 13 || v56 == 10)
    {
      int v58 = *(_DWORD *)v83;
      {
        operator new();
      }
      if (v58 == 13 || v58 == 10)
      {
LABEL_5:
        uint64_t v12 = 0;
        unint64_t v13 = (int *)*v10;
        while (v13[v12++])
          ;
        TBuffer<wchar_t>::insert((uint64_t)&v83, *((unint64_t *)&v84 + 1), v13, v12 - 1);
        if (v8)
        {
          uint64_t v79 = (__int32 *)v81;
          long long v80 = xmmword_214085190;
          char v82 = 1;
          uint64_t v15 = *((void *)this + 12);
          if (*((void *)&v84 + 1) >= (unint64_t)v84)
          {
            if (v86)
            {
              LODWORD(v75) = 0;
              TBuffer<wchar_t>::insert((uint64_t)&v83, *((unint64_t *)&v84 + 1), (int *)&v75, 1uLL);
              uint64_t v16 = (unsigned int *)v83;
              --*((void *)&v84 + 1);
            }
            else
            {
              uint64_t v16 = (unsigned int *)v83;
              if ((void)v84) {
                *(_DWORD *)&v83[4 * v84 - 4] = 0;
              }
            }
          }
          else
          {
            uint64_t v16 = (unsigned int *)v83;
            *(_DWORD *)&v83[4 * *((void *)&v84 + 1)] = 0;
          }
          TCollation::collate((void *)(v15 + 256), v16, (uint64_t)&v79);
          size_t v19 = *((void *)&v80 + 1);
          if (*((void *)&v80 + 1) >= (unint64_t)v80)
          {
            if (v82)
            {
              LODWORD(v75) = 0;
              TBuffer<wchar_t>::insert((uint64_t)&v79, *((unint64_t *)&v80 + 1), (int *)&v75, 1uLL);
              uint64_t v20 = v79;
              size_t v19 = --*((void *)&v80 + 1);
            }
            else
            {
              uint64_t v20 = v79;
              if ((void)v80) {
                v79[(void)v80 - 1] = 0;
              }
            }
          }
          else
          {
            uint64_t v20 = v79;
            v79[*((void *)&v80 + 1)] = 0;
          }
          unint64_t v21 = TRespellManager::find((uint64_t)this, v20, v19, v6);
          unint64_t v6 = v21;
          uint64_t v22 = *((void *)this + 5);
          if (v21 >= 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 6) - v22) >> 3))
          {
            char v8 = 0;
          }
          else
          {
            uint64_t v23 = 24 * v21;
            while (1)
            {
              size_t v24 = *((void *)&v80 + 1);
              if (*((void *)&v80 + 1) >= (unint64_t)v80)
              {
                if (v82)
                {
                  LODWORD(v75) = 0;
                  TBuffer<wchar_t>::insert((uint64_t)&v79, *((unint64_t *)&v80 + 1), (int *)&v75, 1uLL);
                  uint64_t v25 = v79;
                  size_t v24 = --*((void *)&v80 + 1);
                }
                else
                {
                  uint64_t v25 = v79;
                  if ((void)v80) {
                    v79[(void)v80 - 1] = 0;
                  }
                }
              }
              else
              {
                uint64_t v25 = v79;
                v79[*((void *)&v80 + 1)] = 0;
              }
              if (wcsncmp(v25, *(const __int32 **)(v22 + v23 + 8), v24) < 0)
              {
LABEL_70:
                char v8 = 0;
                goto LABEL_72;
              }
              if (*(_DWORD *)(*(void *)(v22 + v23 + 8) + 4 * *((void *)&v80 + 1))) {
                break;
              }
              if (*(_DWORD *)v83 != 45) {
                goto LABEL_45;
              }
              signed int v26 = *((_DWORD *)v83 + 1);
              {
                operator new();
              }
              if (!TLocaleInfo::isAlpha(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v26)
                || (Previousuint64_t Segment = TSegmenter::getPreviousSegment(a4, v65)) != 0
                && (*(_DWORD *)(PreviousSegment + 24) - 1) <= 1)
              {
LABEL_45:
                uint64_t v28 = *((void *)this + 12);
                if (*((void *)&v84 + 1) >= (unint64_t)v84)
                {
                  if (v86)
                  {
                    LODWORD(v75) = 0;
                    TBuffer<wchar_t>::insert((uint64_t)&v83, *((unint64_t *)&v84 + 1), (int *)&v75, 1uLL);
                    uint64_t v29 = (const __int32 *)v83;
                    --*((void *)&v84 + 1);
                  }
                  else
                  {
                    uint64_t v29 = (const __int32 *)v83;
                    if ((void)v84) {
                      *(_DWORD *)&v83[4 * v84 - 4] = 0;
                    }
                  }
                }
                else
                {
                  uint64_t v29 = (const __int32 *)v83;
                  *(_DWORD *)&v83[4 * *((void *)&v84 + 1)] = 0;
                }
                uint64_t v30 = *(unsigned int **)(v22 + v23);
                uint64_t v31 = *((void *)this + 13);
                uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v31 + 16464));
                size_t v33 = *(int *)(v31 + 4 * TParam::getValidConfig((TParam *)(v31 + 16464), ActiveConfigHandle) + 16624);
                uint64_t v34 = *((void *)this + 13);
                uint64_t v35 = TParam::getActiveConfigHandle((TParam *)(v34 + 16112));
                uint64_t ValidConfig = TParam::getValidConfig((TParam *)(v34 + 16112), v35);
                uint64_t Score = TLexicon::makeScore(v28, v29, v30, v33, *(int *)(v34 + 4 * ValidConfig + 16272));
                if ((Score & 0x35) == 0)
                {
                  uint64_t v39 = v37;
                  uint64_t v75 = (const __int32 *)v77;
                  long long v76 = xmmword_214085190;
                  char v78 = 1;
                  unint64_t v40 = *(void *)(v22 + v23 + 16);
                  {
                    operator new();
                  }
                  TLocaleInfo::valueToString(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v40, (uint64_t)&v75, 1);
                  uint64_t v41 = *((void *)this + 12);
                  if (*((void *)&v76 + 1) >= (unint64_t)v76)
                  {
                    if (v78)
                    {
                      int v71 = 0;
                      TBuffer<wchar_t>::insert((uint64_t)&v75, *((unint64_t *)&v76 + 1), &v71, 1uLL);
                      uint64_t v42 = v75;
                      --*((void *)&v76 + 1);
                    }
                    else
                    {
                      uint64_t v42 = v75;
                      if ((void)v76) {
                        v75[v76 - 1] = 0;
                      }
                    }
                  }
                  else
                  {
                    uint64_t v42 = v75;
                    v75[*((void *)&v76 + 1)] = 0;
                  }
                  uint64_t v43 = TLexicon::addTempWord(v41, 0, (int *)"r", 0, v42);
                  uint64_t v44 = (uint64_t *)TGraph::addVertex(a3, v68);
                  int v71 = 2;
                  uint64_t v72 = v43;
                  uint64_t v73 = Score;
                  uint64_t v74 = v39;
                  TGraph::addEdge(a3, (uint64_t)a2, v44, (uint64_t)&v71);
                  if (v78 && v75 != (const __int32 *)v77 && v75) {
                    MEMORY[0x216698730]();
                  }
                }
              }
              ++v6;
              uint64_t v22 = *((void *)this + 5);
              v23 += 24;
              if (v6 >= 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 6) - v22) >> 3)) {
                goto LABEL_70;
              }
            }
            char v8 = 1;
LABEL_72:
            uint64_t v4 = a3;
          }
          if (v82 && v79 != (__int32 *)v81 && v79) {
            MEMORY[0x216698730]();
          }
        }
        else
        {
          char v8 = 0;
        }
        if (v67)
        {
          std::vector<TRegExpMatch>::resize((uint64_t)&v87, 0);
          uint64_t v45 = (void *)*((void *)this + 11);
          if (*((void *)&v84 + 1) >= (unint64_t)v84)
          {
            if (v86)
            {
              LODWORD(v79) = 0;
              TBuffer<wchar_t>::insert((uint64_t)&v83, *((unint64_t *)&v84 + 1), (int *)&v79, 1uLL);
              uint64_t v46 = (unsigned int *)v83;
              --*((void *)&v84 + 1);
            }
            else
            {
              uint64_t v46 = (unsigned int *)v83;
              if ((void)v84) {
                *(_DWORD *)&v83[4 * v84 - 4] = 0;
              }
            }
          }
          else
          {
            uint64_t v46 = (unsigned int *)v83;
            *(_DWORD *)&v83[4 * *((void *)&v84 + 1)] = 0;
          }
          BOOL v67 = TRegExp::match(v45, v46, 3, (uint64_t)&v87);
          if (v87 != v88)
          {
            uint64_t v47 = TGraph::addVertex(v4, v68);
            unint64_t v48 = v87;
            if (v88 != v87)
            {
              uint64_t v49 = (uint64_t *)v47;
              unint64_t v50 = 0;
              uint64_t v51 = 16;
              do
              {
                uint64_t v79 = (__int32 *)v81;
                long long v80 = xmmword_214085190;
                char v82 = 1;
                unint64_t v52 = *(void *)(*((void *)this + 8) + 8 * *(void *)&v48[v51]);
                {
                  operator new();
                }
                TLocaleInfo::valueToString(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v52, (uint64_t)&v79, 1);
                uint64_t v53 = *((void *)this + 12);
                if (*((void *)&v80 + 1) >= (unint64_t)v80)
                {
                  if (v82)
                  {
                    LODWORD(v75) = 0;
                    TBuffer<wchar_t>::insert((uint64_t)&v79, *((unint64_t *)&v80 + 1), (int *)&v75, 1uLL);
                    uint64_t v54 = v79;
                    --*((void *)&v80 + 1);
                  }
                  else
                  {
                    uint64_t v54 = v79;
                    if ((void)v80) {
                      v79[(void)v80 - 1] = 0;
                    }
                  }
                }
                else
                {
                  uint64_t v54 = v79;
                  v79[*((void *)&v80 + 1)] = 0;
                }
                uint64_t v55 = TLexicon::addTempWord(v53, 0, (int *)"r", 0, v54);
                LODWORD(v75) = 2;
                long long v76 = (unint64_t)v55;
                v77[0] = 0;
                TGraph::addEdge(a3, (uint64_t)a2, v49, (uint64_t)&v75);
                if (v82 && v79 != (__int32 *)v81 && v79) {
                  MEMORY[0x216698730]();
                }
                ++v50;
                unint64_t v48 = v87;
                v51 += 24;
              }
              while (v50 < 0xAAAAAAAAAAAAAAABLL * ((v88 - v87) >> 3));
              uint64_t v4 = a3;
            }
          }
        }
        else
        {
          BOOL v67 = 0;
        }
        continue;
      }
    }
    if (!*((void *)&v84 + 1)) {
      break;
    }
    uint64_t v59 = *v10;
    int v60 = **v10;
    if (v60 == 9) {
      break;
    }
    if (*(_DWORD *)&v83[4 * *((void *)&v84 + 1) - 4] != 32)
    {
      {
        operator new();
      }
      if (v60 <= 8202)
      {
        if (v60 != 32 && v60 != 160)
        {
LABEL_141:
          uint64_t v59 = *v10;
          goto LABEL_127;
        }
      }
      else if (v60 != 8203 && v60 != 12288 && v60 != 65279)
      {
        goto LABEL_141;
      }
      uint64_t v59 = *v10;
      if (wcslen(*v10) > 2) {
        break;
      }
    }
LABEL_127:
    __int32 v61 = *v59;
    {
      operator new();
    }
    if (v61 != 13 && v61 != 10) {
      goto LABEL_136;
    }
    if (v64) {
      break;
    }
    if (*(_DWORD *)&v83[4 * *((void *)&v84 + 1) - 4] == 45)
    {
      char v64 = 1;
    }
    else
    {
      uint64_t v62 = TSegmenter::getSegment(a4, v68);
      if (!v62 || *(_DWORD *)(v62 + 24) == 5) {
        break;
      }
      char v64 = 1;
      if (**(_DWORD **)v62 != 45)
      {
LABEL_136:
        if (*(_DWORD *)&v83[4 * *((void *)&v84 + 1) - 4] != 32) {
          TBuffer<wchar_t>::insert((uint64_t)&v83, *((unint64_t *)&v84 + 1), (int *)" ", 1uLL);
        }
      }
    }
  }
  while (v67 || (v8 & 1) != 0);
  if (v86)
  {
    if (v83 != v85 && v83 != 0) {
      MEMORY[0x216698730]();
    }
  }
  if (v87)
  {
    uint64_t v88 = v87;
    operator delete(v87);
  }
}

void sub_213E8F1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  MEMORY[0x216698730](v10, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0xCE8]))
  {
    if (STACK[0x8D0] != a10 && STACK[0x8D0] != 0) {
      MEMORY[0x216698730]();
    }
  }
  unint64_t v14 = *(void **)(v11 - 112);
  if (v14)
  {
    *(void *)(v11 - 104) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(a1);
}

void std::vector<TRegExpMatch>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<TRegExpMatch>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 24 * a2;
  }
}

void TRespellManager::expandWord(uint64_t a1, TGraph *a2, uint64_t a3, int a4)
{
  char v8 = *(TVertex **)(a3 + 16);
  size_t v7 = *(uint64_t **)(a3 + 24);
  if (a4)
  {
    uint64_t v9 = TLexicon::addTempWord(*(void *)(a1 + 96), 0, (int *)"d", 0, 0);
    uint64_t v10 = (uint64_t *)TGraph::addVertex(a2, 0);
    int v16 = 6;
    uint64_t v17 = v9;
    uint64_t v18 = 0;
    char v19 = 0;
    TGraph::addEdge(a2, (uint64_t)v8, v10, (uint64_t)&v16);
    uint64_t v11 = TLexicon::addTempWord(*(void *)(a1 + 96), 0, (int *)"d", 0, 0);
    uint64_t v12 = TGraph::addVertex(a2, 0);
    int v16 = 6;
    uint64_t v17 = v11;
    uint64_t v18 = 0;
    char v19 = 0;
    TGraph::addEdge(a2, v12, v7, (uint64_t)&v16);
    size_t v7 = (uint64_t *)v12;
    char v8 = (TVertex *)v10;
  }
  unint64_t v13 = **(const __int32 ***)(a3 + 56);
  LOBYTE(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
  size_t v14 = wcslen(v13);
  {
    operator new();
  }
  uint64_t v15 = (const __int32 **)TLocaleInfo::stringToULong(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, (uint64_t)&v13[v14 + 1], (BOOL *)&v16, 1);
  addSequence(v15, v8, (TVertex *)v7, a2, *(TLexicon **)(a1 + 96), 0, 0, 0);
  TGraph::deleteEdge((uint64_t)a2, a3);
}

void sub_213E8F570(_Unwind_Exception *a1)
{
  MEMORY[0x216698730](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TRespellManager::TRespellMap const&,TRespellManager::TRespellMap const&),TRespellManager::TRespellMap*,false>(uint64_t a1, __n128 *a2, uint64_t (**a3)(long long *, long long *), uint64_t a4, char a5, __n128 a6)
{
BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRespellManager::TRespellMap const&,TRespellManager::TRespellMap const&),TRespellManager::TRespellMap*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v6 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      char v8 = (long long *)(a2 - 24);
      if ((*a3)((long long *)(a2 - 24), (long long *)a1))
      {
        uint64_t v9 = *(void *)(a1 + 16);
        long long v10 = *(_OWORD *)a1;
        uint64_t v11 = *(void *)(a2 - 8);
        *(_OWORD *)a1 = *v8;
        *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v11;
        *char v8 = v10;
        *(void *)(a2 - 8) = v9;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>((long long *)a1, (long long *)(a1 + 24), (long long *)(a2 - 24), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>(a1, a1 + 24, a1 + 48, a2 - 24, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>((__n128 *)a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24, a3);
      return 1;
    default:
      uint64_t v12 = (long long *)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TItnControl const&,TItnControl const&),TItnControl*>((long long *)a1, (long long *)(a1 + 24), (long long *)(a1 + 48), a3);
      uint64_t v13 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((long long *)v13, v12))
    {
      long long v19 = *(_OWORD *)v13;
      uint64_t v20 = *(void *)(v13 + 16);
      uint64_t v16 = v14;
      while (1)
      {
        uint64_t v17 = a1 + v16;
        *(_OWORD *)(v17 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = *(_OWORD *)(a1 + v16 + 48);
        *(void *)(v17 + 88) = *(void *)(a1 + v16 + 64);
        if (v16 == -48) {
          break;
        }
        v16 -= 24;
        if (((*a3)(&v19, (long long *)(v17 + 24)) & 1) == 0)
        {
          uint64_t v18 = a1 + v16 + 72;
          goto LABEL_12;
        }
      }
      uint64_t v18 = a1;
LABEL_12:
      *(_OWORD *)uint64_t v18 = v19;
      *(void *)(v18 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v20;
      if (++v15 == 8) {
        return v13 + 24 == a2;
      }
    }
    uint64_t v12 = (long long *)v13;
    v14 += 24;
    v13 += 24;
    if (v13 == a2) {
      return 1;
    }
  }
}

void std::vector<TRegExpMatch>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  char v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v14 = &v12[24 * v8];
    int v15 = &v12[24 * v11];
    size_t v16 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v14, v16);
    uint64_t v17 = &v14[v16];
    long long v19 = (char *)*a1;
    uint64_t v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *(_OWORD *)(v18 - 24);
        *((void *)v14 - 1) = *((void *)v18 - 1);
        *(_OWORD *)(v14 - 24) = v20;
        v14 -= 24;
        v18 -= 24;
      }
      while (v18 != v19);
      uint64_t v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

uint64_t MrecInitLibrary_channel(void)
{
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_channel_channel();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_snr_channel();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_utteranc_channel();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();

  return MrecInitModule_sdpres_sdapi();
}

uint64_t MrecInitLibrarySet_throughChannel(void)
{
  MrecInitLibrarySet_throughSigproc();
  MrecInitLibrarySet_throughAudiosrc();

  return MrecInitLibrary_channel();
}

uint64_t getCwidForIndex(int a1, unsigned int a2)
{
  if (a2 >> 21) {
    return a2 & 0x3FFF | ((a2 >> 14) << 25);
  }
  else {
    return a2 | (a1 << 25);
  }
}

uint64_t getIndexForCwid(int a1, unsigned int a2)
{
  if (a2 >> 25 == a1) {
    int v2 = 0;
  }
  else {
    int v2 = (a2 >> 25 << 14) | 0x200000;
  }
  return v2 + (a2 & 0xFFFFFF);
}

uint64_t TreePhoneRec::sizeObject(uint64_t a1, int a2)
{
  do
  {
    int v2 = a2;
    a2 = 0;
  }
  while (v2 == 2);
  if (v2 == 3) {
    return 0;
  }
  else {
    return 18;
  }
}

uint64_t TreePhoneRec::setSingleEndingWord(uint64_t this, int a2, unsigned __int16 a3)
{
  *(_WORD *)(this + 20) |= 0x6000u;
  *(_DWORD *)(this + 4) = a2 & 0x3FFFFF | (a3 << 22);
  return this;
}

uint64_t TreePhoneRec::setMultipleEndingWords(uint64_t this, int a2, unsigned __int16 a3)
{
  *(_WORD *)(this + 20) |= 0x2000u;
  *(_DWORD *)(this + 4) = a2 & 0x3FFFFF | (a3 << 22);
  return this;
}

void TTokenizer::TTokenizer(TTokenizer *this, const TDataManager *a2, TDataManager *a3, TLexicon *a4)
{
  *(void *)this = &unk_26C4DF340;
  *((void *)this + 1) = -1;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 5) = a4;
  *((void *)this + 6) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  operator new();
}

void sub_213E90E68()
{
}

void sub_213E910E0()
{
}

uint64_t TTokenizer::freeMemory(TTokenizer *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *((void *)this + 12);
  if (*((void *)this + 13) != v6)
  {
    unint64_t v7 = 0;
    do
    {
      unint64_t v8 = v7 + 1;
      if (*(void *)(v6 + 8 * v7))
      {
        tknPrintf("Warning: result handle %llu is still alive on tokenizer destruction.\n", a2, a3, a4, a5, v7 + 1);
        uint64_t v6 = *((void *)this + 12);
        uint64_t v9 = *(void *)(v6 + 8 * v7);
        if (v9)
        {
          if (*(unsigned char *)(v9 + 344))
          {
            uint64_t v10 = *(void *)(v9 + 64);
            if (v10 != v9 + 88 && v10 != 0) {
              MEMORY[0x216698730]();
            }
          }
          uint64_t v12 = *(void **)(v9 + 24);
          if (v12)
          {
            *(void *)(v9 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v12;
            operator delete(v12);
          }
          size_t v13 = *(void **)v9;
          if (*(void *)v9)
          {
            *(void *)(v9 + 8) = v13;
            operator delete(v13);
          }
          MEMORY[0x216698730](v9, 0x1030C404962A615);
          uint64_t v6 = *((void *)this + 12);
        }
      }
      unint64_t v7 = v8;
    }
    while (v8 < (*((void *)this + 13) - v6) >> 3);
  }
  uint64_t v14 = (TDecompounder *)*((void *)this + 6);
  --*(_DWORD *)(*((void *)this + 5) + 360);
  if (v14)
  {
    TDecompounder::~TDecompounder(v14);
    MEMORY[0x216698730]();
  }
  int v15 = (TClitics *)*((void *)this + 7);
  if (v15)
  {
    TClitics::~TClitics(v15);
    MEMORY[0x216698730]();
  }
  if (*((void *)this + 8))
  {
    uint64_t inited = MrecInitModule_sdpres_sdapi();
    MEMORY[0x216698730](inited, 0x70C40AF88C34ELL);
  }
  uint64_t v17 = (TPatternManager *)*((void *)this + 9);
  if (v17)
  {
    TPatternManager::~TPatternManager(v17);
    MEMORY[0x216698730]();
  }
  uint64_t v18 = (TRespellManager *)*((void *)this + 10);
  if (v18)
  {
    TRespellManager::~TRespellManager(v18);
    MEMORY[0x216698730]();
  }
  long long v19 = (TMungeMapManager *)*((void *)this + 11);
  if (v19)
  {
    TMungeMapManager::~TMungeMapManager(v19);
    MEMORY[0x216698730]();
  }
  long long v20 = (TDataSaver *)*((void *)this + 2);
  if (v20)
  {
    TDataSaver::~TDataSaver(v20);
    MEMORY[0x216698730]();
  }
  uint64_t v21 = *((void *)this + 3);
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  uint64_t result = *((void *)this + 4);
  if (result)
  {
    uint64_t v23 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v23();
  }
  return result;
}

void *TRegisterable<TTokenizer>::~TRegisterable(void *a1)
{
  *a1 = &unk_26C4E0480;
  if (a1[1] != -1)
  {
    uint64_t Registry = (uint64_t *)TRegisterable<TTokenizer>::getRegistry();
    uint64_t v3 = *Registry;
    *(void *)(Registry[1] + 8 * a1[1] - 8) = 0;
    *uint64_t Registry = v3 - 1;
  }
  return a1;
}

void TTokenizer::~TTokenizer(TTokenizer *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)this = &unk_26C4DF340;
  TTokenizer::freeMemory(this, a2, a3, a4, a5);
  uint64_t v6 = (void *)*((void *)this + 12);
  if (v6)
  {
    *((void *)this + 13) = v6;
    operator delete(v6);
  }

  TRegisterable<TTokenizer>::~TRegisterable(this);
}

{
  uint64_t vars8;

  TTokenizer::~TTokenizer(this, a2, a3, a4, a5);

  JUMPOUT(0x216698730);
}

uint64_t TTokenizer::save(TTokenizer *this, TDataManager *a2, TDataManager *a3)
{
  v34[19] = *MEMORY[0x263EF8340];
  uint64_t v6 = *((void *)this + 5);
  unint64_t v7 = (const char *)(v6 + 72);
  if (*(char *)(v6 + 95) < 0) {
    unint64_t v7 = *(const char **)v7;
  }
  TOutputModel::TOutputModel((TOutputModel *)v25, a2, a3, v7, *((const TDataManager **)this + 4));
  if (a2)
  {
    TDataManager::setIntVar(a2, "TknVersion");
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v27);
    TOutputStream::TOutputStream(&v22, &v27, (uint64_t)"TknParam", *((void *)this + 5) + 240);
    TParamManager::save(*((void **)this + 3), (void **)&v22, 0);
    std::stringbuf::str();
    if ((v21 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v21 & 0x80u) == 0) {
      uint64_t v9 = v21;
    }
    else {
      uint64_t v9 = v20;
    }
    (*(void (**)(TDataManager *, const char *, void *, uint64_t))(*(void *)a2 + 48))(a2, "TknParam", p_p, v9);
    if ((char)v21 < 0) {
      operator delete(__p);
    }
    if (v26 == 1)
    {
      uint64_t v10 = (void *)*((void *)this + 2);
      if (v10) {
        TDataSaver::save(v10, a2);
      }
    }
    BOOL v27 = (const char *)*MEMORY[0x263F8C2C8];
    *(const char **)((char *)&v27 + *((void *)v27 - 3)) = *(const char **)(MEMORY[0x263F8C2C8] + 24);
    long long v28 = (const char *)(MEMORY[0x263F8C318] + 16);
    if (v33 < 0) {
      operator delete(v32);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x2166986E0](v34);
  }
  if (a3)
  {
    TDataManager::setIntVar(a3, "TknVersion");
    if (v26 >= 2)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v27);
      TOutputStream::TOutputStream(&v22, &v27, (uint64_t)"TknParam", *((void *)this + 5) + 240);
      TParamManager::save(*((void **)this + 3), (void **)&v22, 1);
      std::stringbuf::str();
      if ((v21 & 0x80u) == 0) {
        unint64_t v11 = &__p;
      }
      else {
        unint64_t v11 = __p;
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v12 = v21;
      }
      else {
        uint64_t v12 = v20;
      }
      (*(void (**)(TDataManager *, const char *, void *, uint64_t))(*(void *)a3 + 48))(a3, "TknParam", v11, v12);
      if ((char)v21 < 0) {
        operator delete(__p);
      }
      size_t v13 = (void *)*((void *)this + 2);
      if (v13) {
        TDataSaver::save(v13, a3);
      }
      BOOL v27 = (const char *)*MEMORY[0x263F8C2C8];
      *(const char **)((char *)&v27 + *((void *)v27 - 3)) = *(const char **)(MEMORY[0x263F8C2C8] + 24);
      long long v28 = (const char *)(MEMORY[0x263F8C318] + 16);
      if (v33 < 0) {
        operator delete(v32);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x2166986E0](v34);
    }
    if (!*((void *)this + 2))
    {
      uint64_t v14 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      BOOL v27 = "TknGrammar";
      long long v28 = "TknDecompound";
      long long v29 = "TknMungeMap";
      long long v30 = "TknRespellMap";
      uint64_t v31 = "TknPattern";
      uint64_t v24 = 0;
      do
      {
        int v15 = (&v27)[v14];
        if ((*(uint64_t (**)(void, const char *, void, void))(**((void **)this + 4) + 40))(*((void *)this + 4), v15, 0, 0))
        {
          TDataManager::getStringVar(*((void *)this + 4));
          if (v24 >= 0) {
            size_t v16 = &v22;
          }
          else {
            size_t v16 = v22;
          }
          if (v24 >= 0) {
            uint64_t v17 = HIBYTE(v24);
          }
          else {
            uint64_t v17 = v23;
          }
          (*(void (**)(TDataManager *, const char *, void *, uint64_t))(*(void *)a3 + 48))(a3, v15, v16, v17);
        }
        ++v14;
      }
      while (v14 != 5);
      if (SHIBYTE(v24) < 0) {
        operator delete(v22);
      }
    }
  }
  uint64_t result = *((void *)this + 4);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  return result;
}

void sub_213E919B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a25);
  _Unwind_Resume(a1);
}

uint64_t TTokenizer::tokenize(uint64_t a1, char *a2, const char *a3, char *a4, uint64_t a5, void *a6)
{
  uint64_t v7 = a5;
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v99 = *(void *)(v10 + 136);
  uint64_t v100 = v10;
  *(void *)(v10 + 136) = a5;
  uint64_t v11 = *(void *)(a1 + 40) + 240;
  v122[0] = &unk_26C4E0760;
  v122[1] = v11;
  uint64_t v123 = 0;
  TResGraphMaker::clear((uint64_t)v122);
  if (a6) {
    uint64_t v12 = a6;
  }
  else {
    uint64_t v12 = v122;
  }
  uint64_t v103 = v12;
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v13 + 144));
  if (*(unsigned char *)(v13 + TParam::getValidConfig((TParam *)(v13 + 144), ActiveConfigHandle) + 296)) {
    srand(1u);
  }
  *(void *)uint64_t v118 = v120;
  long long v119 = xmmword_214085190;
  char v121 = 1;
  if (a3 && *a3)
  {
    uint64_t v15 = *(void *)(a1 + 40);
    size_t v16 = TStringParam::get((TStringParam *)(*(void *)(a1 + 24) + 3752));
    TSegmenter::TSegmenter(v109, a3, v15 + 240, v16);
    uint64_t v17 = *(void *)(a1 + 24);
    uint64_t v18 = TParam::getActiveConfigHandle((TParam *)(v17 + 13960));
    *(void *)&long long v110 = *(int *)(v17 + 4 * TParam::getValidConfig((TParam *)(v17 + 13960), v18) + 14120);
    (*(void (**)(int *))(*(void *)v109 + 16))(v109);
    size_t v19 = strlen(a3);
    Previousuint64_t Segment = TSegmenter::getPreviousSegment((TSegmenter *)v109, (char *)&a3[v19]);
    if (*(_DWORD *)(PreviousSegment + 24) != 5) {
      TBuffer<wchar_t>::assign((uint64_t)v118, *(int **)PreviousSegment);
    }
    TSegmenter::~TSegmenter((TSegmenter *)v109);
  }
  unsigned __int8 v21 = a2;
  uint64_t v102 = v7;
  do
  {
    uint64_t v22 = *(void *)(a1 + 40);
    uint64_t v23 = TStringParam::get((TStringParam *)(*(void *)(a1 + 24) + 3752));
    TSegmenter::TSegmenter(v117, v21, v22 + 240, v23);
    uint64_t v24 = *(void *)(a1 + 24);
    uint64_t v25 = TParam::getActiveConfigHandle((TParam *)(v24 + 13960));
    v117[1] = *(int *)(v24 + 4 * TParam::getValidConfig((TParam *)(v24 + 13960), v25) + 14120);
    (*(void (**)(void *))(v117[0] + 16))(v117);
    unint64_t v26 = v21;
    do
    {
      if (!*v26) {
        break;
      }
      unint64_t v26 = *(char **)(TSegmenter::getSegment((TSegmenter *)v117, v26) + 8);
    }
    while (v26 - v21 <= 2500);
    uint64_t v27 = *(void *)(a1 + 24);
    uint64_t v28 = TParam::getActiveConfigHandle((TParam *)(v27 + 640));
    uint64_t ValidConfig = TParam::getValidConfig((TParam *)(v27 + 640), v28);
    TGraph::TGraph((TGraph *)v113, v21, (TSegmenter *)v117, *(unsigned char *)(v27 + ValidConfig + 792));
    for (uint64_t i = TGraph::addVertex((TGraph *)v113, v21); ; uint64_t i = TGraph::getNextVertex((TGraph *)v113, *(void *)(i + 24) + 1))
    {
      uint64_t v31 = *(char **)(i + 16);
      if (!*v31) {
        break;
      }
      uint64_t Segment = TSegmenter::getSegment((TSegmenter *)v117, v31);
      uint64_t v33 = Segment;
      uint64_t v34 = *(void *)(i + 16);
      if (v34 - (uint64_t)v21 >= 2501)
      {
        BOOL v35 = v116 != v115 && i == v114;
        if (v35
          && (!*(_DWORD *)(Segment + 24) || (unint64_t)(v34 - (void)v21) > 0x1388 || v34 != *(void *)(i + 24)))
        {
          goto LABEL_69;
        }
      }
      if (*(_DWORD *)(Segment + 24) == 5)
      {
        *(void *)uint64_t v109 = v111;
        long long v110 = xmmword_214085190;
        char v112 = 1;
        TBuffer<wchar_t>::assign((uint64_t)v109, (int *)"j");
        uint64_t v36 = 0;
        uint64_t v37 = *(int **)v33;
        while (v37[v36++])
          ;
        TBuffer<wchar_t>::insert((uint64_t)v109, *((unint64_t *)&v110 + 1), v37, v36 - 1);
        uint64_t v39 = *(void *)(a1 + 40);
        if (*((void *)&v110 + 1) >= (unint64_t)v110)
        {
          if (v112)
          {
            LODWORD(v105) = 0;
            TBuffer<wchar_t>::insert((uint64_t)v109, *((unint64_t *)&v110 + 1), (int *)&v105, 1uLL);
            unint64_t v40 = *(int **)v109;
            --*((void *)&v110 + 1);
          }
          else
          {
            unint64_t v40 = *(int **)v109;
            if ((void)v110) {
              *(_DWORD *)(*(void *)v109 + 4 * v110 - 4) = 0;
            }
          }
        }
        else
        {
          unint64_t v40 = *(int **)v109;
          *(_DWORD *)(*(void *)v109 + 4 * *((void *)&v110 + 1)) = 0;
        }
        uint64_t v56 = TLexicon::addTempWord(v39, 0, v40, 0, 0);
        uint64_t v57 = (uint64_t *)TGraph::addVertex((TGraph *)v113, *(char **)(v33 + 8));
        LODWORD(v105) = 3;
        uint64_t v106 = v56;
        uint64_t v107 = 0;
        char v108 = 0;
        TGraph::addEdge(v113, i, v57, (uint64_t)&v105);
        if (v112 && *(unsigned char **)v109 != v111)
        {
          if (*(void *)v109) {
            MEMORY[0x216698730]();
          }
        }
      }
      else
      {
        uint64_t v41 = *(TPatternManager **)(a1 + 72);
        if (v41) {
          TPatternManager::addWords(v41, (TVertex *)i, (TGraph *)v113, (TSegmenter *)v117, v7);
        }
        TTokenizer::addWords((TTokenizer *)a1, (TVertex *)i, (TGraph *)v113, (TSegmenter *)v117);
        uint64_t v42 = *(TRespellManager **)(a1 + 80);
        if (v42) {
          TRespellManager::addWords(v42, (TVertex *)i, (TGraph *)v113, (TSegmenter *)v117);
        }
        if (*(void *)(a1 + 48))
        {
          uint64_t v43 = *(void *)(a1 + 24);
          uint64_t v44 = TParam::getActiveConfigHandle((TParam *)(v43 + 12120));
          if (*(unsigned char *)(v43 + TParam::getValidConfig((TParam *)(v43 + 12120), v44) + 12272)) {
            TDecompounder::addWords(*(TDecompounder **)(a1 + 48), (char **)i, (TGraph *)v113, (TSegmenter *)v117);
          }
        }
        if (*(void *)(a1 + 56))
        {
          uint64_t v45 = *(void *)(a1 + 24);
          uint64_t v46 = TParam::getActiveConfigHandle((TParam *)(v45 + 12368));
          if (*(unsigned char *)(v45 + TParam::getValidConfig((TParam *)(v45 + 12368), v46) + 12520)) {
            TClitics::addWords(*(TClitics **)(a1 + 56), (char **)i, (TGraph *)v113, (TSegmenter *)v117);
          }
        }
        uint64_t v47 = *(void *)(a1 + 64);
        if (v47) {
          TNewWords::addWords(v47, (TVertex *)i, (TGraph *)v113, (TSegmenter *)v117, *(TLexicon **)(a1 + 40));
        }
        unint64_t v48 = (uint64_t *)TGraph::addVertex((TGraph *)v113, *(char **)(v33 + 8));
        uint64_t OutEdge = TVertex::getOutEdge(i);
        if (OutEdge)
        {
          uint64_t v50 = *(void *)(OutEdge + 64);
          BOOL v51 = v50 != 0;
          if (v50)
          {
            while (1)
            {
              uint64_t OutEdge = *(void *)(OutEdge + 8);
              if (!OutEdge) {
                break;
              }
              if (!*(unsigned char *)(OutEdge + 32))
              {
                char v52 = 0;
                uint64_t v53 = *(void *)(OutEdge + 64);
                BOOL v51 = v53 != 0;
                if (!v53) {
                  goto LABEL_54;
                }
              }
            }
            char v52 = v51;
          }
          else
          {
            char v52 = 0;
          }
        }
        else
        {
          char v52 = 1;
        }
LABEL_54:
        uint64_t v54 = TVertex::getInEdge((uint64_t)v48);
        if (v54)
        {
LABEL_55:
          if (*(void *)(v54 + 64))
          {
            while (1)
            {
              uint64_t v54 = *(void *)v54;
              if (!v54) {
                break;
              }
              if (!*(unsigned char *)(v54 + 32)) {
                goto LABEL_55;
              }
            }
          }
          else if ((v52 & 1) == 0)
          {
            continue;
          }
        }
        uint64_t v55 = TLexicon::addTempWord(*(void *)(a1 + 40), *(int **)v33, 0, 0, 0);
        v109[0] = 0;
        long long v110 = (unint64_t)v55;
        v111[0] = 0;
        TGraph::addEdge(v113, i, v48, (uint64_t)v109);
      }
    }
    uint64_t i = v114;
LABEL_69:
    *(void *)uint64_t v109 = v111;
    long long v110 = xmmword_214085190;
    char v112 = 1;
    int v58 = (int **)TSegmenter::getSegment((TSegmenter *)v117, *(char **)(i + 24));
    if (v58)
    {
      TBuffer<wchar_t>::assign((uint64_t)v109, *v58);
    }
    else if (a4 && *a4)
    {
      uint64_t v68 = *(void *)(a1 + 40);
      long long v69 = TStringParam::get((TStringParam *)(*(void *)(a1 + 24) + 3752));
      TSegmenter::TSegmenter(&v105, a4, v68 + 240, v69);
      uint64_t v70 = *(void *)(a1 + 24);
      uint64_t v71 = TParam::getActiveConfigHandle((TParam *)(v70 + 13960));
      uint64_t v106 = *(int *)(v70 + 4 * TParam::getValidConfig((TParam *)(v70 + 13960), v71) + 14120);
      (*(void (**)(uint64_t *))(v105 + 16))(&v105);
      uint64_t v72 = (int **)TSegmenter::getSegment((TSegmenter *)&v105, a4);
      TBuffer<wchar_t>::assign((uint64_t)v109, *v72);
      TSegmenter::~TSegmenter((TSegmenter *)&v105);
    }
    TTokenizer::deleteBadPaths((TTokenizer *)a1, (TGraph *)v113);
    if (v116 != v115)
    {
      uint64_t v59 = 0;
      if ((unint64_t)((v116 - v115) >> 3) <= 1) {
        uint64_t v60 = 1;
      }
      else {
        uint64_t v60 = (v116 - v115) >> 3;
      }
      do
      {
        uint64_t v61 = *(void *)(v115 + 8 * v59);
        if (!*(unsigned char *)(v61 + 32))
        {
          uint64_t v62 = *(void *)(a1 + 80);
          if (v62)
          {
            if (*(_DWORD *)(v61 + 48) == 2)
            {
              uint64_t v63 = *(void *)(a1 + 24);
              uint64_t v64 = TParam::getActiveConfigHandle((TParam *)(v63 + 888));
              uint64_t v65 = TParam::getValidConfig((TParam *)(v63 + 888), v64);
              TRespellManager::expandWord(v62, (TGraph *)v113, v61, *(unsigned __int8 *)(v63 + v65 + 1040));
            }
          }
        }
        ++v59;
      }
      while (v60 != v59);
    }
    if (*(void *)(a1 + 88))
    {
      TGraph::minimize((TGraph *)v113);
      uint64_t v66 = *(void *)(a1 + 88);
      if (*((void *)&v119 + 1) >= (unint64_t)v119)
      {
        if (v121)
        {
          LODWORD(v105) = 0;
          TBuffer<wchar_t>::insert((uint64_t)v118, *((unint64_t *)&v119 + 1), (int *)&v105, 1uLL);
          BOOL v67 = *(int **)v118;
          --*((void *)&v119 + 1);
        }
        else
        {
          BOOL v67 = *(int **)v118;
          if ((void)v119) {
            *(_DWORD *)(*(void *)v118 + 4 * v119 - 4) = 0;
          }
        }
      }
      else
      {
        BOOL v67 = *(int **)v118;
        *(_DWORD *)(*(void *)v118 + 4 * *((void *)&v119 + 1)) = 0;
      }
      if (*((void *)&v110 + 1) >= (unint64_t)v110)
      {
        if (v112)
        {
          LODWORD(v105) = 0;
          TBuffer<wchar_t>::insert((uint64_t)v109, *((unint64_t *)&v110 + 1), (int *)&v105, 1uLL);
          uint64_t v73 = *(int **)v109;
          --*((void *)&v110 + 1);
        }
        else
        {
          uint64_t v73 = *(int **)v109;
          if ((void)v110) {
            *(_DWORD *)(*(void *)v109 + 4 * v110 - 4) = 0;
          }
        }
      }
      else
      {
        uint64_t v73 = *(int **)v109;
        *(_DWORD *)(*(void *)v109 + 4 * *((void *)&v110 + 1)) = 0;
      }
      TMungeMapManager::munge(v66, (TGraph *)v113, v67, v73, (TSegmenter *)v117, 0);
    }
    uint64_t v74 = *(void *)(a1 + 24);
    uint64_t v75 = TParam::getActiveConfigHandle((TParam *)(v74 + 14312));
    if (*(_DWORD *)(v74 + 4 * TParam::getValidConfig((TParam *)(v74 + 14312), v75) + 14472)) {
      TTokenizer::deleteExpensivePaths((TTokenizer *)a1, (TGraph *)v113);
    }
    unint64_t v76 = (v116 - v115) >> 3;
    if (v116 != v115)
    {
      uint64_t v77 = 0;
      if (v76 <= 1) {
        uint64_t v78 = 1;
      }
      else {
        uint64_t v78 = (v116 - v115) >> 3;
      }
      do
      {
        uint64_t v79 = *(void *)(v115 + 8 * v77);
        if (!*(unsigned char *)(v79 + 32))
        {
          uint64_t v80 = *(void *)(a1 + 72);
          if (v80)
          {
            if (*(_DWORD *)(v79 + 48) == 5)
            {
              uint64_t v81 = *(void *)(a1 + 24);
              uint64_t v82 = TParam::getActiveConfigHandle((TParam *)(v81 + 888));
              uint64_t v83 = TParam::getValidConfig((TParam *)(v81 + 888), v82);
              TPatternManager::expandWord(v80, (TGraph *)v113, v79, *(unsigned __int8 *)(v81 + v83 + 1040));
            }
          }
        }
        ++v77;
      }
      while (v78 != v77);
    }
    if (*(void *)(a1 + 88))
    {
      TGraph::minimize((TGraph *)v113);
      uint64_t v84 = *(void *)(a1 + 88);
      if (*((void *)&v119 + 1) >= (unint64_t)v119)
      {
        if (v121)
        {
          LODWORD(v105) = 0;
          TBuffer<wchar_t>::insert((uint64_t)v118, *((unint64_t *)&v119 + 1), (int *)&v105, 1uLL);
          uint64_t v85 = *(int **)v118;
          --*((void *)&v119 + 1);
        }
        else
        {
          uint64_t v85 = *(int **)v118;
          if ((void)v119) {
            *(_DWORD *)(*(void *)v118 + 4 * v119 - 4) = 0;
          }
        }
      }
      else
      {
        uint64_t v85 = *(int **)v118;
        *(_DWORD *)(*(void *)v118 + 4 * *((void *)&v119 + 1)) = 0;
      }
      if (*((void *)&v110 + 1) >= (unint64_t)v110)
      {
        if (v112)
        {
          LODWORD(v105) = 0;
          TBuffer<wchar_t>::insert((uint64_t)v109, *((unint64_t *)&v110 + 1), (int *)&v105, 1uLL);
          char v86 = *(int **)v109;
          --*((void *)&v110 + 1);
        }
        else
        {
          char v86 = *(int **)v109;
          if ((void)v110) {
            *(_DWORD *)(*(void *)v109 + 4 * v110 - 4) = 0;
          }
        }
      }
      else
      {
        char v86 = *(int **)v109;
        *(_DWORD *)(*(void *)v109 + 4 * *((void *)&v110 + 1)) = 0;
      }
      TMungeMapManager::munge(v84, (TGraph *)v113, v85, v86, (TSegmenter *)v117, v76);
    }
    TGraph::minimize((TGraph *)v113);
    uint64_t v87 = *(void *)(a1 + 24);
    uint64_t v88 = TParam::getActiveConfigHandle((TParam *)(v87 + 15264));
    if (*(unsigned char *)(v87 + TParam::getValidConfig((TParam *)(v87 + 15264), v88) + 15416)) {
      TTokenizer::addClones((TTokenizer *)a1, (TGraph *)v113);
    }
    uint64_t v89 = *(void *)(a1 + 24);
    uint64_t v90 = TParam::getActiveConfigHandle((TParam *)(v89 + 17872));
    if (*(unsigned char *)(v89 + TParam::getValidConfig((TParam *)(v89 + 17872), v90) + 18024)) {
      TTokenizer::chooseBestPath((TTokenizer *)a1, (TGraph *)v113);
    }
    (*(void (**)(void *, void *, int64_t))(*v103 + 16))(v103, v113, v21 - a2);
    uint64_t v91 = *(unsigned char **)(v114 + 16);
    int v92 = *v91;
    if (*v91)
    {
      TBuffer<wchar_t>::resize((uint64_t)v118, 0);
      uint64_t v93 = TSegmenter::getPreviousSegment((TSegmenter *)v117, *(char **)(v114 + 16));
      if (*(_DWORD *)(v93 + 24) != 5) {
        TBuffer<wchar_t>::assign((uint64_t)v118, *(int **)v93);
      }
      unsigned __int8 v21 = *(char **)(v114 + 24);
    }
    TLexicon::cleanCache(*(TLexicon **)(a1 + 40));
    uint64_t v94 = *(void *)(a1 + 64);
    if (v94) {
      *(void *)(v94 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = 0;
    }
    uint64_t v95 = *(TPatternManager **)(a1 + 72);
    if (v95) {
      TPatternManager::clear(v95);
    }
    uint64_t v7 = v102;
    if (v112 && *(unsigned char **)v109 != v111 && *(void *)v109) {
      MEMORY[0x216698730]();
    }
    TGraph::~TGraph((TGraph *)v113);
    TSegmenter::~TSegmenter((TSegmenter *)v117);
  }
  while (v92);
  if (v103 == v122)
  {
    uint64_t v97 = v123;
    uint64_t v123 = 0;
    TResGraphMaker::clear((uint64_t)v122);
    uint64_t v96 = TTokenizer::registerResult((void *)a1, v97);
  }
  else
  {
    uint64_t v96 = -1;
  }
  if (v121 && *(unsigned char **)v118 != v120 && *(void *)v118) {
    MEMORY[0x216698730]();
  }
  TResGraphMaker::~TResGraphMaker((TResGraphMaker *)v122);
  *(void *)(v100 + 136) = v99;
  return v96;
}

void sub_213E92610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  TSegmenter::~TSegmenter((TSegmenter *)&a34);
  if (LOBYTE(STACK[0xA08]))
  {
    if (STACK[0x5F0] != a10 && STACK[0x5F0] != 0) {
      MEMORY[0x216698730]();
    }
  }
  TResGraphMaker::~TResGraphMaker((TResGraphMaker *)(v34 - 112));
  *(void *)(a12 + 136) = a11;
  _Unwind_Resume(a1);
}

void TTokenizer::addWords(TTokenizer *this, TVertex *a2, TGraph *a3, TSegmenter *a4)
{
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v7 = (__int32 *)TStringParam::get((TStringParam *)(*((void *)this + 3) + 10744));
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, v7);
  unint64_t v8 = (void *)*((void *)this + 5);
  uint64_t v9 = (char *)*((void *)a2 + 2);
  if (v36 >= 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  uint64_t v11 = *((void *)this + 3);
  uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v11 + 16464));
  size_t v13 = *(int *)(v11 + 4 * TParam::getValidConfig((TParam *)(v11 + 16464), ActiveConfigHandle) + 16624);
  uint64_t v14 = *((void *)this + 3);
  uint64_t v15 = TParam::getActiveConfigHandle((TParam *)(v14 + 16112));
  uint64_t ValidConfig = TParam::getValidConfig((TParam *)(v14 + 16112), v15);
  TLexicon::findHeadClonesCollatedPrefix(v8, v9, a4, v10, v13, *(int *)(v14 + 4 * ValidConfig + 16272), &v37);
  uint64_t v17 = (char *)v37;
  if (v38 != v37)
  {
    uint64_t v18 = 0;
    unint64_t v19 = 0;
    unint64_t v20 = 0x26AB82000uLL;
    do
    {
      unsigned __int8 v21 = **(_DWORD ***)&v17[v18];
      if (*v21 != 45) {
        goto LABEL_12;
      }
      signed int v22 = v21[1];
      {
        operator new();
      }
      if (!TLocaleInfo::isAlpha(*(void *)(v20 + 2288), v22)) {
        goto LABEL_12;
      }
      Previousuint64_t Segment = TSegmenter::getPreviousSegment(a4, *((char **)a2 + 2));
      uint64_t v25 = PreviousSegment;
      if (PreviousSegment)
      {
        if (!*(_DWORD *)(PreviousSegment + 24))
        {
          uint64_t v28 = v24;
          int v29 = **(_DWORD **)PreviousSegment;
          {
            operator new();
          }
          if (v29 == 13 || v29 == 10)
          {
            unint64_t v20 = 0x26AB82000;
            uint64_t v25 = TSegmenter::getPreviousSegment(a4, v28);
            if (!v25) {
              goto LABEL_13;
            }
          }
          else
          {
            unint64_t v20 = 0x26AB82000;
          }
        }
        if ((*(_DWORD *)(v25 + 24) - 1) <= 1)
        {
LABEL_12:
          unint64_t v26 = (uint64_t *)TGraph::addVertex(a3, (char *)(*((void *)a2 + 2) + *(void *)((char *)v37 + v18 + 8)));
          uint64_t v27 = *(void *)((char *)v37 + v18);
          int v32 = 1;
          uint64_t v33 = v27;
          long long v34 = *(_OWORD *)((char *)v37 + v18 + 16);
          TGraph::addEdge(a3, (uint64_t)a2, v26, (uint64_t)&v32);
        }
      }
LABEL_13:
      ++v19;
      uint64_t v17 = (char *)v37;
      v18 += 32;
    }
    while (v19 < (v38 - (unsigned char *)v37) >> 5);
  }
  std::vector<TLexiconMatch>::resize((uint64_t)&v37, 0);
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  if (v37)
  {
    uint64_t v38 = v37;
    operator delete(v37);
  }
}

void sub_213E92A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a21) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void TTokenizer::deleteBadPaths(TTokenizer *this, TGraph *a2)
{
  uint64_t v132 = 0;
  uint64_t v133 = 0;
  uint64_t v134 = 0;
  TGraph::topologicalSort(a2, (void **)&v132, 0);
  std::vector<TEdgeStat>::vector(v131, (uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 3);
  *((unsigned char *)v131[0] + 72 * *(void *)(*((void *)a2 + 8) + 40) + 64) = 1;
  __p = 0;
  uint64_t v129 = 0;
  unint64_t v130 = 0;
  uint64_t v4 = *((void *)this + 3);
  uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v4 + 15760));
  if (*(_DWORD *)(v4 + 4 * TParam::getValidConfig((TParam *)(v4 + 15760), ActiveConfigHandle) + 15920) != -1)
  {
    uint64_t v6 = *((void *)this + 3) + 15760;
    uint64_t v7 = ((char *)v129 - (unsigned char *)__p) >> 3;
    if ((unint64_t)(v7 + 1) >> 61) {
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = (uint64_t)(v130 - (void)__p) >> 2;
    if (v8 <= v7 + 1) {
      unint64_t v8 = v7 + 1;
    }
    if (v130 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v8;
    }
    if (v9) {
      uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v130, v9);
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = (uint64_t *)&v10[8 * v7];
    uint64_t v12 = &v10[8 * v9];
    *uint64_t v11 = v6;
    size_t v13 = v11 + 1;
    uint64_t v15 = (char *)__p;
    uint64_t v14 = (char *)v129;
    if (v129 != __p)
    {
      do
      {
        uint64_t v16 = *((void *)v14 - 1);
        v14 -= 8;
        *--uint64_t v11 = v16;
      }
      while (v14 != v15);
      uint64_t v14 = (char *)__p;
    }
    __p = v11;
    uint64_t v129 = v13;
    unint64_t v130 = (unint64_t)v12;
    if (v14) {
      operator delete(v14);
    }
    uint64_t v129 = v13;
  }
  uint64_t v17 = *((void *)this + 3);
  uint64_t v18 = TParam::getActiveConfigHandle((TParam *)(v17 + 16816));
  if (*(_DWORD *)(v17 + 4 * TParam::getValidConfig((TParam *)(v17 + 16816), v18) + 16976) != -1)
  {
    uint64_t v19 = *((void *)this + 3) + 16816;
    unint64_t v20 = v129;
    if ((unint64_t)v129 >= v130)
    {
      uint64_t v22 = ((char *)v129 - (unsigned char *)__p) >> 3;
      if ((unint64_t)(v22 + 1) >> 61) {
        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v23 = (uint64_t)(v130 - (void)__p) >> 2;
      if (v23 <= v22 + 1) {
        unint64_t v23 = v22 + 1;
      }
      if (v130 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v24 = v23;
      }
      if (v24) {
        uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v130, v24);
      }
      else {
        uint64_t v25 = 0;
      }
      unint64_t v26 = (uint64_t *)&v25[8 * v22];
      uint64_t v27 = &v25[8 * v24];
      *unint64_t v26 = v19;
      unsigned __int8 v21 = v26 + 1;
      int v29 = (char *)__p;
      uint64_t v28 = (char *)v129;
      if (v129 != __p)
      {
        do
        {
          uint64_t v30 = *((void *)v28 - 1);
          v28 -= 8;
          *--unint64_t v26 = v30;
        }
        while (v28 != v29);
        uint64_t v28 = (char *)__p;
      }
      __p = v26;
      uint64_t v129 = v21;
      unint64_t v130 = (unint64_t)v27;
      if (v28) {
        operator delete(v28);
      }
    }
    else
    {
      *uint64_t v129 = v19;
      unsigned __int8 v21 = v20 + 1;
    }
    uint64_t v129 = v21;
  }
  uint64_t v31 = *((void *)this + 3);
  uint64_t v32 = TParam::getActiveConfigHandle((TParam *)(v31 + 17168));
  if (*(_DWORD *)(v31 + 4 * TParam::getValidConfig((TParam *)(v31 + 17168), v32) + 17328) != -1)
  {
    uint64_t v33 = *((void *)this + 3) + 17168;
    long long v34 = v129;
    if ((unint64_t)v129 >= v130)
    {
      uint64_t v36 = ((char *)v129 - (unsigned char *)__p) >> 3;
      if ((unint64_t)(v36 + 1) >> 61) {
        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v37 = (uint64_t)(v130 - (void)__p) >> 2;
      if (v37 <= v36 + 1) {
        unint64_t v37 = v36 + 1;
      }
      if (v130 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v38 = v37;
      }
      if (v38) {
        uint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v130, v38);
      }
      else {
        uint64_t v39 = 0;
      }
      unint64_t v40 = (uint64_t *)&v39[8 * v36];
      uint64_t v41 = &v39[8 * v38];
      *unint64_t v40 = v33;
      BOOL v35 = v40 + 1;
      uint64_t v43 = (char *)__p;
      uint64_t v42 = (char *)v129;
      if (v129 != __p)
      {
        do
        {
          uint64_t v44 = *((void *)v42 - 1);
          v42 -= 8;
          *--unint64_t v40 = v44;
        }
        while (v42 != v43);
        uint64_t v42 = (char *)__p;
      }
      __p = v40;
      uint64_t v129 = v35;
      unint64_t v130 = (unint64_t)v41;
      if (v42) {
        operator delete(v42);
      }
    }
    else
    {
      *uint64_t v129 = v33;
      BOOL v35 = v34 + 1;
    }
    uint64_t v129 = v35;
  }
  uint64_t v45 = *((void *)this + 3);
  uint64_t v46 = TParam::getActiveConfigHandle((TParam *)(v45 + 17520));
  if (*(_DWORD *)(v45 + 4 * TParam::getValidConfig((TParam *)(v45 + 17520), v46) + 17680) != -1)
  {
    uint64_t v47 = *((void *)this + 3) + 17520;
    unint64_t v48 = v129;
    if ((unint64_t)v129 >= v130)
    {
      uint64_t v50 = ((char *)v129 - (unsigned char *)__p) >> 3;
      if ((unint64_t)(v50 + 1) >> 61) {
        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v51 = (uint64_t)(v130 - (void)__p) >> 2;
      if (v51 <= v50 + 1) {
        unint64_t v51 = v50 + 1;
      }
      if (v130 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v52 = v51;
      }
      if (v52) {
        uint64_t v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v130, v52);
      }
      else {
        uint64_t v53 = 0;
      }
      uint64_t v54 = (uint64_t *)&v53[8 * v50];
      uint64_t v55 = &v53[8 * v52];
      *uint64_t v54 = v47;
      uint64_t v49 = v54 + 1;
      uint64_t v57 = (char *)__p;
      uint64_t v56 = (char *)v129;
      if (v129 != __p)
      {
        do
        {
          uint64_t v58 = *((void *)v56 - 1);
          v56 -= 8;
          *--uint64_t v54 = v58;
        }
        while (v56 != v57);
        uint64_t v56 = (char *)__p;
      }
      __p = v54;
      uint64_t v129 = v49;
      unint64_t v130 = (unint64_t)v55;
      if (v56) {
        operator delete(v56);
      }
    }
    else
    {
      *uint64_t v129 = v47;
      uint64_t v49 = v48 + 1;
    }
    uint64_t v129 = v49;
  }
  uint64_t v59 = *((void *)this + 3);
  uint64_t v60 = TParam::getActiveConfigHandle((TParam *)(v59 + 18120));
  if (*(_DWORD *)(v59 + 4 * TParam::getValidConfig((TParam *)(v59 + 18120), v60) + 18280) != -1)
  {
    uint64_t v61 = *((void *)this + 3) + 18120;
    uint64_t v62 = v129;
    if ((unint64_t)v129 >= v130)
    {
      uint64_t v64 = ((char *)v129 - (unsigned char *)__p) >> 3;
      if ((unint64_t)(v64 + 1) >> 61) {
        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v65 = (uint64_t)(v130 - (void)__p) >> 2;
      if (v65 <= v64 + 1) {
        unint64_t v65 = v64 + 1;
      }
      if (v130 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v66 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v66 = v65;
      }
      if (v66) {
        BOOL v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v130, v66);
      }
      else {
        BOOL v67 = 0;
      }
      uint64_t v68 = (uint64_t *)&v67[8 * v64];
      long long v69 = &v67[8 * v66];
      *uint64_t v68 = v61;
      uint64_t v63 = v68 + 1;
      uint64_t v71 = (char *)__p;
      uint64_t v70 = (char *)v129;
      if (v129 != __p)
      {
        do
        {
          uint64_t v72 = *((void *)v70 - 1);
          v70 -= 8;
          *--uint64_t v68 = v72;
        }
        while (v70 != v71);
        uint64_t v70 = (char *)__p;
      }
      __p = v68;
      uint64_t v129 = v63;
      unint64_t v130 = (unint64_t)v69;
      if (v70) {
        operator delete(v70);
      }
    }
    else
    {
      *uint64_t v129 = v61;
      uint64_t v63 = v62 + 1;
    }
    uint64_t v129 = v63;
  }
  uint64_t v73 = *((void *)this + 3);
  uint64_t v74 = TParam::getActiveConfigHandle((TParam *)(v73 + 18472));
  if (*(_DWORD *)(v73 + 4 * TParam::getValidConfig((TParam *)(v73 + 18472), v74) + 18632) != -1)
  {
    uint64_t v75 = *((void *)this + 3) + 18472;
    unint64_t v76 = v129;
    if ((unint64_t)v129 >= v130)
    {
      uint64_t v78 = ((char *)v129 - (unsigned char *)__p) >> 3;
      if ((unint64_t)(v78 + 1) >> 61) {
        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v79 = (uint64_t)(v130 - (void)__p) >> 2;
      if (v79 <= v78 + 1) {
        unint64_t v79 = v78 + 1;
      }
      if (v130 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v80 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v80 = v79;
      }
      if (v80) {
        uint64_t v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v130, v80);
      }
      else {
        uint64_t v81 = 0;
      }
      uint64_t v82 = (uint64_t *)&v81[8 * v78];
      uint64_t v83 = &v81[8 * v80];
      uint64_t *v82 = v75;
      uint64_t v77 = v82 + 1;
      uint64_t v85 = (char *)__p;
      uint64_t v84 = (char *)v129;
      if (v129 != __p)
      {
        do
        {
          uint64_t v86 = *((void *)v84 - 1);
          v84 -= 8;
          *--uint64_t v82 = v86;
        }
        while (v84 != v85);
        uint64_t v84 = (char *)__p;
      }
      __p = v82;
      uint64_t v129 = v77;
      unint64_t v130 = (unint64_t)v83;
      if (v84) {
        operator delete(v84);
      }
    }
    else
    {
      *uint64_t v129 = v75;
      uint64_t v77 = v76 + 1;
    }
    uint64_t v129 = v77;
  }
  uint64_t v87 = *((void *)this + 3);
  uint64_t v88 = TParam::getActiveConfigHandle((TParam *)(v87 + 18824));
  if (*(_DWORD *)(v87 + 4 * TParam::getValidConfig((TParam *)(v87 + 18824), v88) + 18984) == -1)
  {
    uint64_t v91 = v129;
  }
  else
  {
    uint64_t v89 = *((void *)this + 3) + 18824;
    uint64_t v90 = v129;
    if ((unint64_t)v129 >= v130)
    {
      uint64_t v92 = ((char *)v129 - (unsigned char *)__p) >> 3;
      if ((unint64_t)(v92 + 1) >> 61) {
        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v93 = (uint64_t)(v130 - (void)__p) >> 2;
      if (v93 <= v92 + 1) {
        unint64_t v93 = v92 + 1;
      }
      if (v130 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v94 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v94 = v93;
      }
      if (v94) {
        uint64_t v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v130, v94);
      }
      else {
        uint64_t v95 = 0;
      }
      uint64_t v96 = (uint64_t *)&v95[8 * v92];
      uint64_t v97 = &v95[8 * v94];
      *uint64_t v96 = v89;
      uint64_t v91 = v96 + 1;
      uint64_t v99 = (char *)__p;
      uint64_t v98 = (char *)v129;
      if (v129 != __p)
      {
        do
        {
          uint64_t v100 = *((void *)v98 - 1);
          v98 -= 8;
          *--uint64_t v96 = v100;
        }
        while (v98 != v99);
        uint64_t v98 = (char *)__p;
      }
      __p = v96;
      uint64_t v129 = v91;
      unint64_t v130 = (unint64_t)v97;
      if (v98) {
        operator delete(v98);
      }
    }
    else
    {
      *uint64_t v129 = v89;
      uint64_t v91 = v90 + 1;
    }
    uint64_t v129 = v91;
  }
  unint64_t v101 = 126 - 2 * __clz(((char *)v91 - (unsigned char *)__p) >> 3);
  *(void *)&long long v123 = sortPruningParams;
  if (v91 == __p) {
    uint64_t v102 = 0;
  }
  else {
    uint64_t v102 = v101;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**,false>((uint64_t)__p, (char *)v91, (uint64_t (**)(uint64_t, uint64_t))&v123, v102, 1);
  uint64_t v103 = v132;
  if (v133 != (unsigned char *)v132)
  {
    unint64_t v104 = 0;
    do
    {
      uint64_t OutEdge = TVertex::getOutEdge(v103[v104]);
      if (OutEdge)
      {
LABEL_132:
        char v127 = 0;
        long long v125 = 0u;
        long long v126 = 0u;
        long long v123 = 0u;
        long long v124 = 0u;
        computeEdgeStat(OutEdge, *((void *)this + 3), (uint64_t *)&__p, (uint64_t)&v123);
        uint64_t v106 = 0;
        uint64_t v107 = *(void *)(*(void *)(OutEdge + 24) + 40);
        char v108 = (char *)v131[0];
        uint64_t v109 = (char *)v131[0] + 72 * *(void *)(*(void *)(OutEdge + 16) + 40);
        do
        {
          *(long long *)((char *)&v123 + v106) = (__int128)vaddq_s64(*(int64x2_t *)((char *)&v123 + v106), *(int64x2_t *)&v109[v106]);
          v106 += 16;
        }
        while (v106 != 64);
        long long v110 = &v108[72 * v107];
        if (v110[64])
        {
          uint64_t v111 = 0;
          while (1)
          {
            unint64_t v112 = *(void *)((char *)&v123 + v111);
            unint64_t v113 = *(void *)&v110[v111];
            BOOL v114 = v112 >= v113;
            if (v112 != v113) {
              break;
            }
            v111 += 8;
            if (v111 == 56)
            {
              BOOL v114 = *((void *)&v126 + 1) >= *((void *)v110 + 7);
              break;
            }
          }
          if (v114) {
            goto LABEL_141;
          }
        }
        *((_OWORD *)v110 + 1) = v124;
        *((_OWORD *)v110 + 2) = v125;
        *((_OWORD *)v110 + 3) = v126;
        v110[64] = v127;
        *(_OWORD *)long long v110 = v123;
LABEL_141:
        while (1)
        {
          uint64_t OutEdge = *(void *)(OutEdge + 8);
          if (!OutEdge) {
            break;
          }
          if (!*(unsigned char *)(OutEdge + 32)) {
            goto LABEL_132;
          }
        }
      }
      ++v104;
      uint64_t v103 = v132;
    }
    while (v104 < (v133 - (unsigned char *)v132) >> 3);
    if (v133 != (unsigned char *)v132)
    {
      unint64_t v115 = 0;
      unint64_t v116 = (v133 - (unsigned char *)v132) >> 3;
      do
      {
        uint64_t v117 = (TVertex *)v103[v116 + ~v115];
        uint64_t v118 = TVertex::getOutEdge((uint64_t)v117);
        if (v118)
        {
LABEL_148:
          char v127 = 0;
          long long v125 = 0u;
          long long v126 = 0u;
          long long v123 = 0u;
          long long v124 = 0u;
          computeEdgeStat(v118, *((void *)this + 3), (uint64_t *)&__p, (uint64_t)&v123);
          uint64_t v119 = 0;
          uint64_t v120 = *(void *)(*(void *)(v118 + 24) + 40);
          char v121 = (char *)v131[0];
          uint64_t v122 = (char *)v131[0] + 72 * *(void *)(*(void *)(v118 + 16) + 40);
          do
          {
            *(long long *)((char *)&v123 + v119) = (__int128)vaddq_s64(*(int64x2_t *)((char *)&v123 + v119), *(int64x2_t *)&v122[v119]);
            v119 += 16;
          }
          while (v119 != 64);
          if (memcmp(&v123, &v121[72 * v120], 0x40uLL)) {
            TGraph::deleteEdge((uint64_t)a2, v118);
          }
          while (1)
          {
            uint64_t v118 = *(void *)(v118 + 8);
            if (!v118) {
              break;
            }
            if (!*(unsigned char *)(v118 + 32)) {
              goto LABEL_148;
            }
          }
        }
        if (v117 != *((TVertex **)a2 + 9) && !TVertex::getOutEdge((uint64_t)v117)) {
          TGraph::deleteVertex(a2, v117);
        }
        ++v115;
        uint64_t v103 = v132;
        unint64_t v116 = (v133 - (unsigned char *)v132) >> 3;
      }
      while (v115 < v116);
    }
  }
  if (__p)
  {
    uint64_t v129 = (uint64_t *)__p;
    operator delete(__p);
  }
  if (v131[0])
  {
    v131[1] = v131[0];
    operator delete(v131[0]);
  }
  if (v132)
  {
    uint64_t v133 = v132;
    operator delete(v132);
  }
}

void sub_213E93464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (a21) {
    operator delete(a21);
  }
  unint64_t v24 = *(void **)(v22 - 88);
  if (v24)
  {
    *(void *)(v22 - 80) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void TTokenizer::deleteExpensivePaths(TTokenizer *this, TGraph *a2)
{
  uint64_t v92 = 0;
  unint64_t v93 = 0;
  uint64_t v94 = 0;
  TGraph::topologicalSort(a2, (void **)&v92, 0);
  TAllocator::TAllocator((TAllocator *)v91, 2048);
  __p = 0;
  uint64_t v89 = 0;
  uint64_t v90 = 0;
  std::vector<unsigned long>::vector(v87, (uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 3);
  std::vector<unsigned long>::vector(v86, (uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 3);
  memset(v85, 0, sizeof(v85));
  uint64_t v4 = v89;
  if (v89 >= v90)
  {
    uint64_t v6 = (v89 - (unsigned char *)__p) >> 3;
    if ((unint64_t)(v6 + 1) >> 61) {
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v7 = (v90 - (unsigned char *)__p) >> 2;
    if (v7 <= v6 + 1) {
      unint64_t v7 = v6 + 1;
    }
    if ((unint64_t)(v90 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v8 = v7;
    }
    if (v8) {
      unint64_t v9 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v90, v8);
    }
    else {
      unint64_t v9 = 0;
    }
    uint64_t v10 = (void ***)&v9[8 * v6];
    uint64_t v11 = &v9[8 * v8];
    *uint64_t v10 = v85;
    unint64_t v5 = (char *)(v10 + 1);
    size_t v13 = (char *)__p;
    uint64_t v12 = v89;
    if (v89 != __p)
    {
      do
      {
        uint64_t v14 = (void **)*((void *)v12 - 1);
        v12 -= 8;
        *--uint64_t v10 = v14;
      }
      while (v12 != v13);
      uint64_t v12 = (char *)__p;
    }
    __p = v10;
    uint64_t v89 = v5;
    uint64_t v90 = v11;
    if (v12) {
      operator delete(v12);
    }
  }
  else
  {
    *(void *)uint64_t v89 = v85;
    unint64_t v5 = v4 + 8;
  }
  uint64_t v89 = v5;
  uint64_t v15 = *((void *)a2 + 8);
  *((void *)v87[0] + *(void *)(v15 + 40)) = 0;
  *((void *)v86[0] + *(void *)(v15 + 40)) = 1;
  uint64_t v81 = 0;
  uint64_t v82 = 0;
  uint64_t v83 = 0;
  char v84 = 1;
  unint64_t v80 = &unk_26C4E52C8;
  uint64_t v16 = *((void *)this + 3);
  uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v16 + 14312));
  unint64_t v18 = *(int *)(v16 + 4 * TParam::getValidConfig((TParam *)(v16 + 14312), ActiveConfigHandle) + 14472);
  uint64_t v19 = *((void *)this + 3);
  uint64_t v20 = TParam::getActiveConfigHandle((TParam *)(v19 + 14664));
  uint64_t v21 = *(int *)(v19 + 4 * TParam::getValidConfig((TParam *)(v19 + 14664), v20) + 14824);
  if ((unint64_t)(v93 - v92) >= 9)
  {
    unint64_t v22 = 1;
    do
    {
      THashBase<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THashMapCompare<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,std::equal_to<TDecodeLinkMapWord::THistory>>,THashMapFunction<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THash<TDecodeLinkMapWord::THistory>>>::clear(&v80);
      uint64_t v23 = TVertex::getInEdge(*(void *)&v92[8 * v22]);
      unint64_t v24 = v86[0];
      if (v23)
      {
LABEL_20:
        uint64_t v25 = *(void *)(*(void *)(v23 + 16) + 40);
        for (unint64_t i = *((void *)v87[0] + v25); i < v24[v25]; ++i)
        {
          uint64_t v27 = (uint64_t *)TAllocator::allocate((TAllocator *)v91, 24);
          uint64_t v28 = v27;
          uint64_t v29 = *((void *)__p + i);
          *uint64_t v27 = v23;
          v27[1] = v29;
          if (v29) {
            uint64_t v29 = *(void *)(v29 + 16);
          }
          void v27[2] = v29 + v21;
          TDecodeLink::computeHistory(v27, (uint64_t)v79, v18);
          if (*(void *)v79) {
            v28[2] += TLexicon::getNGramScore(*((TLexicon **)this + 5), *(const TWord **)&v79[24], *(const TWord **)&v79[16], *(const TWord **)&v79[8], *(const TWord **)v79, 0);
          }
          long long v95 = *(_OWORD *)v79;
          long long v96 = *(_OWORD *)&v79[16];
          uint64_t v97 = 0;
          THashBase<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THashMapCompare<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,std::equal_to<TDecodeLinkMapWord::THistory>>,THashMapFunction<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THash<TDecodeLinkMapWord::THistory>>>::find((uint64_t)&v80, &v95, v77);
          if (v78)
          {
            if ((unint64_t)v28[2] < *(void *)(*(void *)(v78 + 40) + 16)) {
              *(void *)(v78 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = v28;
            }
          }
          else
          {
            long long v95 = *(_OWORD *)v79;
            long long v96 = *(_OWORD *)&v79[16];
            uint64_t v97 = v28;
            THashBase<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THashMapCompare<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,std::equal_to<TDecodeLinkMapWord::THistory>>,THashMapFunction<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THash<TDecodeLinkMapWord::THistory>>>::insert((uint64_t)&v80, &v95, v30, v31, v32, (uint64_t)&v76);
          }
          unint64_t v24 = v86[0];
        }
        while (1)
        {
          uint64_t v23 = *(void *)v23;
          if (!v23) {
            break;
          }
          if (!*(unsigned char *)(v23 + 32)) {
            goto LABEL_20;
          }
        }
      }
      uint64_t v33 = v89 - (unsigned char *)__p;
      uint64_t v34 = *(void *)&v92[8 * v22];
      *((void *)v87[0] + *(void *)(v34 + 40)) = (v89 - (unsigned char *)__p) >> 3;
      v24[*(void *)(v34 + 40)] = v83 + (v33 >> 3);
      std::vector<TPItnTagHandle_fake **>::reserve(&__p, v24[*(void *)(v34 + 40)]);
      if (v82 >= 1)
      {
        BOOL v35 = v81;
        unint64_t v36 = (unint64_t)&v81[v82];
        while (1)
        {
          unint64_t v37 = (void *)*v35;
          if (*v35) {
            break;
          }
          if ((unint64_t)++v35 >= v36) {
            goto LABEL_38;
          }
        }
        unint64_t v38 = v89;
        do
        {
LABEL_41:
          if (v38 >= v90)
          {
            uint64_t v39 = (v38 - (unsigned char *)__p) >> 3;
            if ((unint64_t)(v39 + 1) >> 61) {
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v40 = (v90 - (unsigned char *)__p) >> 2;
            if (v40 <= v39 + 1) {
              unint64_t v40 = v39 + 1;
            }
            if ((unint64_t)(v90 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v41 = v40;
            }
            if (v41) {
              uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v90, v41);
            }
            else {
              uint64_t v42 = 0;
            }
            uint64_t v43 = &v42[8 * v39];
            *(void *)uint64_t v43 = v37[5];
            unint64_t v38 = v43 + 8;
            uint64_t v45 = (char *)__p;
            uint64_t v44 = v89;
            if (v89 != __p)
            {
              do
              {
                uint64_t v46 = *((void *)v44 - 1);
                v44 -= 8;
                *((void *)v43 - 1) = v46;
                v43 -= 8;
              }
              while (v44 != v45);
              uint64_t v44 = (char *)__p;
            }
            __p = v43;
            uint64_t v89 = v38;
            uint64_t v90 = &v42[8 * v41];
            if (v44) {
              operator delete(v44);
            }
          }
          else
          {
            *(void *)unint64_t v38 = v37[5];
            v38 += 8;
          }
          uint64_t v89 = v38;
          unint64_t v37 = (void *)*v37;
        }
        while (v37);
        uint64_t v47 = v35 + 1;
        while ((unint64_t)v47 < v36)
        {
          unint64_t v48 = (void *)*v47++;
          unint64_t v37 = v48;
          if (v48)
          {
            BOOL v35 = v47 - 1;
            goto LABEL_41;
          }
        }
      }
LABEL_38:
      ++v22;
    }
    while (v22 < (v93 - v92) >> 3);
  }
  std::vector<int>::vector((std::vector<int> *)v79, (uint64_t)(*((void *)a2 + 14) - *((void *)a2 + 13)) >> 3);
  std::vector<int>::vector(&v76, (uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 3);
  uint64_t v49 = v93;
  begin = v76.__begin_;
  v76.__begin_[*(void *)(*((void *)v93 - 1) + 40)] = 1;
  unint64_t v51 = v92;
  uint64_t v52 = v49 - v92;
  if (v52 != 8)
  {
    unint64_t v53 = 0;
    uint64_t v54 = v52 >> 3;
    do
    {
      uint64_t v55 = *(void *)&v51[8 * v54 + 8 * ~v53];
      uint64_t v56 = *(void *)(v55 + 40);
      if (v76.__begin_[v56])
      {
        unint64_t v57 = *((void *)v87[0] + v56);
        unint64_t v58 = *((void *)v86[0] + v56);
        uint64_t v59 = 0;
        BOOL v60 = v58 > v57;
        unint64_t v61 = v58 - v57;
        if (v60)
        {
          uint64_t v62 = (char *)__p + 8 * v57;
          do
          {
            if (!v59 || *(void *)(*(void *)v62 + 16) < *(void *)(v59 + 16)) {
              uint64_t v59 = *(void *)v62;
            }
            v62 += 8;
            --v61;
          }
          while (v61);
        }
        uint64_t v63 = TVertex::getInEdge(v55);
        if (v63)
        {
LABEL_73:
          uint64_t v64 = *(void *)(*(void *)(v63 + 16) + 40);
          for (unint64_t j = *((void *)v87[0] + v64); ; ++j)
          {
            if (j >= *((void *)v86[0] + v64)) {
              goto LABEL_83;
            }
            uint64_t v66 = *((void *)__p + j);
            v77[0] = v63;
            v77[1] = v66;
            if (v66) {
              uint64_t v66 = *(void *)(v66 + 16);
            }
            uint64_t v78 = v66 + v21;
            TDecodeLink::computeHistory(v77, (uint64_t)&v95, v18);
            if ((void)v95)
            {
              NGramuint64_t Score = TLexicon::getNGramScore(*((TLexicon **)this + 5), *((const TWord **)&v96 + 1), (const TWord *)v96, *((const TWord **)&v95 + 1), (const TWord *)v95, 0);
              uint64_t v68 = v78 + NGramScore;
              v78 += NGramScore;
            }
            else
            {
              uint64_t v68 = v78;
            }
            if (*(void *)(v59 + 16) == v68) {
              break;
            }
          }
          *(_DWORD *)(*(void *)v79 + 4 * *(void *)(v63 + 40)) = 1;
          v76.__begin_[v64] = 1;
LABEL_83:
          while (1)
          {
            uint64_t v63 = *(void *)v63;
            if (!v63) {
              break;
            }
            if (!*(unsigned char *)(v63 + 32)) {
              goto LABEL_73;
            }
          }
        }
      }
      ++v53;
      unint64_t v51 = v92;
      uint64_t v54 = (v93 - v92) >> 3;
    }
    while (v53 < v54 - 1);
    begin = v76.__begin_;
  }
  std::vector<int>::pointer end = v76.__end_;
  if (v76.__end_ != begin)
  {
    unint64_t v70 = 0;
    do
    {
      if (!begin[v70])
      {
        uint64_t v71 = *(TVertex **)(*((void *)a2 + 10) + 8 * v70);
        if (!*((unsigned char *)v71 + 32))
        {
          TGraph::deleteVertex(a2, v71);
          begin = v76.__begin_;
          std::vector<int>::pointer end = v76.__end_;
        }
      }
      ++v70;
    }
    while (v70 < end - begin);
  }
  uint64_t v73 = *(void *)&v79[8];
  uint64_t v72 = *(_DWORD **)v79;
  if (*(void *)&v79[8] == *(void *)v79)
  {
    uint64_t v72 = *(_DWORD **)&v79[8];
    if (begin)
    {
LABEL_101:
      v76.__end_ = begin;
      operator delete(begin);
      uint64_t v72 = *(_DWORD **)v79;
    }
  }
  else
  {
    unint64_t v74 = 0;
    do
    {
      if (!v72[v74])
      {
        uint64_t v75 = *(void *)(*((void *)a2 + 13) + 8 * v74);
        if (!*(unsigned char *)(v75 + 32))
        {
          TGraph::deleteEdge((uint64_t)a2, v75);
          uint64_t v73 = *(void *)&v79[8];
          uint64_t v72 = *(_DWORD **)v79;
        }
      }
      ++v74;
    }
    while (v74 < (v73 - (uint64_t)v72) >> 2);
    begin = v76.__begin_;
    if (v76.__begin_) {
      goto LABEL_101;
    }
  }
  if (v72)
  {
    *(void *)&v79[8] = v72;
    operator delete(v72);
  }
  THashBase<std::pair<TDecodeLink::THistory const,TDecodeLink const*>,THashMapCompare<std::pair<TDecodeLink::THistory const,TDecodeLink const*>,std::equal_to<TDecodeLink::THistory>>,THashMapFunction<std::pair<TDecodeLink::THistory const,TDecodeLink const*>,THash<TDecodeLink::THistory>>>::~THashBase(&v80);
  if (v86[0])
  {
    v86[1] = v86[0];
    operator delete(v86[0]);
  }
  if (v87[0])
  {
    v87[1] = v87[0];
    operator delete(v87[0]);
  }
  if (__p)
  {
    uint64_t v89 = (char *)__p;
    operator delete(__p);
  }
  TAllocator::clear((TAllocator *)v91);
  if (v92)
  {
    unint64_t v93 = v92;
    operator delete(v92);
  }
}

void sub_213E93C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  if (__p) {
    operator delete(__p);
  }
  if (a33) {
    operator delete(a33);
  }
  if (a36) {
    operator delete(a36);
  }
  TAllocator::clear((TAllocator *)(v37 - 192));
  uint64_t v39 = *(void **)(v37 - 152);
  if (v39)
  {
    *(void *)(v37 - 144) = v39;
    operator delete(v39);
  }
  _Unwind_Resume(a1);
}

void TTokenizer::addClones(TTokenizer *this, TGraph *a2)
{
  uint64_t v4 = *((void *)a2 + 13);
  uint64_t v3 = *((void *)a2 + 14);
  uint64_t v17 = 0;
  unint64_t v18 = 0;
  uint64_t v19 = 0;
  unint64_t v5 = (__int32 *)TStringParam::get((TStringParam *)(*((void *)this + 3) + 10744));
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, v5);
  if (v3 == v4)
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    if ((unint64_t)((v3 - v4) >> 3) <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = (v3 - v4) >> 3;
    }
    do
    {
      uint64_t v9 = *(void *)(*((void *)a2 + 13) + 8 * v7);
      if (!*(unsigned char *)(v9 + 32))
      {
        long long v10 = *(_OWORD *)(v9 + 64);
        v14[0] = *(_OWORD *)(v9 + 48);
        v14[1] = v10;
        if (LODWORD(v14[0]) == 1)
        {
          TWord::getClones(*((uint64_t *)&v14[0] + 1), (uint64_t)&v17);
          uint64_t v6 = v18;
          if (v18 != v17)
          {
            unint64_t v11 = 0;
            uint64_t v6 = v17;
            do
            {
              uint64_t v12 = v6[v11];
              *((void *)&v14[0] + 1) = v12;
              if (v16 >= 0) {
                size_t v13 = __p;
              }
              else {
                size_t v13 = (void **)__p[0];
              }
              if (!TWord::applyMask(v12, v13)) {
                TGraph::addEdge(a2, *(void *)(v9 + 16), *(uint64_t **)(v9 + 24), (uint64_t)v14);
              }
              ++v11;
              uint64_t v6 = v17;
            }
            while (v11 < ((char *)v18 - (unsigned char *)v17) >> 3);
          }
        }
      }
      ++v7;
    }
    while (v7 != v8);
  }
  if (v16 < 0)
  {
    operator delete(__p[0]);
    uint64_t v6 = v17;
  }
  if (v6)
  {
    unint64_t v18 = v6;
    operator delete(v6);
  }
}

void sub_213E93E54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void TTokenizer::chooseBestPath(TTokenizer *this, TGraph *a2)
{
  size_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  TGraph::topologicalSort(a2, (void **)&v13, 0);
  uint64_t v4 = v14;
  if (v14 != v13)
  {
    unint64_t v5 = 0;
    uint64_t v4 = v13;
    do
    {
      uint64_t v6 = (TVertex *)v4[v5];
      if (!*((unsigned char *)v6 + 32))
      {
        if (v6 == *((TVertex **)a2 + 8) || TVertex::getInEdge(v4[v5]))
        {
          unint64_t OutEdgeCount = TVertex::getOutEdgeCount(v6);
          if (OutEdgeCount >= 2
            && (uint64_t v8 = *((void *)this + 3),
                uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v8 + 392)),
                *(unsigned char *)(v8 + TParam::getValidConfig((TParam *)(v8 + 392), ActiveConfigHandle) + 544)))
          {
            unint64_t v10 = rand() % OutEdgeCount;
          }
          else
          {
            unint64_t v10 = 0;
          }
          uint64_t OutEdge = TVertex::getOutEdge((uint64_t)v6);
          if (OutEdge)
          {
            uint64_t v12 = 0;
LABEL_14:
            if (v10 != v12) {
              TGraph::deleteEdge((uint64_t)a2, OutEdge);
            }
            while (1)
            {
              uint64_t OutEdge = *(void *)(OutEdge + 8);
              if (!OutEdge) {
                break;
              }
              if (!*(unsigned char *)(OutEdge + 32))
              {
                ++v12;
                goto LABEL_14;
              }
            }
          }
        }
        else
        {
          TGraph::deleteVertex(a2, v6);
        }
      }
      ++v5;
      uint64_t v4 = v13;
    }
    while (v5 < v14 - v13);
  }
  if (v4)
  {
    uint64_t v14 = v4;
    operator delete(v4);
  }
}

void sub_213E93FE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TTokenizer::registerResult(void *a1, uint64_t a2)
{
  unint64_t v6 = a1[14];
  uint64_t v4 = (uint64_t)(a1 + 14);
  unint64_t v5 = v6;
  uint64_t v7 = *(void **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = (void **)(v4 - 16);
    uint64_t v10 = *(void *)(v4 - 16);
    uint64_t v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61) {
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - v10;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(v4, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    char v16 = &v15[8 * v11];
    uint64_t v17 = &v15[8 * v14];
    *(void *)char v16 = a2;
    uint64_t v8 = v16 + 8;
    uint64_t v19 = (char *)a1[12];
    unint64_t v18 = (char *)a1[13];
    if (v18 != v19)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      unint64_t v18 = (char *)*v9;
    }
    a1[12] = v16;
    a1[13] = v8;
    a1[14] = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    *uint64_t v7 = a2;
    uint64_t v8 = v7 + 1;
  }
  a1[13] = v8;
  return ((uint64_t)v8 - a1[12]) >> 3;
}

void std::vector<TLexiconMatch>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 5;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 32 * a2;
    }
  }
  else
  {
    std::vector<TLexiconMatch>::__append((void **)a1, a2 - v2);
  }
}

BOOL sortPruningParams(const TIntParam *a1, const TIntParam *a2)
{
  uint64_t v3 = a1;
  uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle(a1);
  LODWORD(v3) = *((_DWORD *)v3 + TParam::getValidConfig(v3, ActiveConfigHandle) + 40);
  uint64_t v5 = TParam::getActiveConfigHandle(a2);
  return (int)v3 < *((_DWORD *)a2 + TParam::getValidConfig(a2, v5) + 40);
}

uint64_t computeEdgeStat(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  *(unsigned char *)(a4 + 64) = 1;
  if (*(_DWORD *)(result + 48) != 6)
  {
    uint64_t v5 = *a3;
    if (a3[1] != *a3)
    {
      uint64_t v7 = result;
      unint64_t v8 = 0;
      uint64_t v9 = *(unsigned __int8 *)(result + 72);
      uint64_t v10 = a2 + 15760;
      uint64_t v11 = *(void *)(result + 64);
      uint64_t v12 = a2 + 16816;
      uint64_t v13 = a2 + 17168;
      uint64_t v14 = a2 + 17520;
      uint64_t v15 = a2 + 18120;
      uint64_t v16 = a2 + 18472;
      uint64_t v17 = a2 + 18824;
      unint64_t v18 = (__int32 *)&v49;
      uint64_t v19 = v11 & 0x30;
      uint64_t v20 = v11 & 0x35;
      uint64_t v21 = v11 & 0xC0;
      uint64_t v22 = v11 & 0xD;
      if ((v11 & 5) != 0) {
        uint64_t v23 = 3;
      }
      else {
        uint64_t v23 = 2;
      }
      __n128 v24 = (__n128)xmmword_214085190;
      while (1)
      {
        uint64_t v25 = *(void *)(v5 + 8 * v8);
        if (v25 == v10) {
          break;
        }
        if (v25 == v12)
        {
          if (!*(_DWORD *)(v7 + 48)) {
            goto LABEL_25;
          }
        }
        else
        {
          if (v25 == v13)
          {
            if (!v20) {
              goto LABEL_27;
            }
LABEL_25:
            uint64_t v27 = 1;
            goto LABEL_26;
          }
          if (v25 == v14) {
            goto LABEL_25;
          }
          if (v25 == v15)
          {
            if (*(_DWORD *)(v7 + 48) != 5) {
              goto LABEL_27;
            }
            goto LABEL_25;
          }
          if (v25 == v16)
          {
            if (*(_DWORD *)(v7 + 48) == 4) {
              goto LABEL_25;
            }
          }
          else if (v25 == v17)
          {
            uint64_t v26 = v23;
            if (v22) {
              goto LABEL_15;
            }
            if ((v11 & 2) != 0)
            {
              uint64_t v28 = *(void *)(v7 + 16);
              uint64_t v44 = v11;
              uint64_t v45 = v9;
              uint64_t v46 = v18;
              uint64_t v42 = v16;
              uint64_t v43 = v15;
              uint64_t v40 = v19;
              uint64_t v41 = v17;
              uint64_t v39 = v20;
              uint64_t v38 = v23;
              __n128 v37 = v24;
              uint64_t result = TVertex::getInEdge(v28);
              __n128 v24 = v37;
              uint64_t v23 = v38;
              uint64_t v22 = 0;
              uint64_t v20 = v39;
              uint64_t v19 = v40;
              uint64_t v17 = v41;
              uint64_t v16 = v42;
              uint64_t v15 = v43;
              uint64_t v11 = v44;
              uint64_t v9 = v45;
              unint64_t v18 = v46;
              if (result)
              {
                if (*(void *)(v28 + 16) == *(void *)(v28 + 24)) {
                  goto LABEL_55;
                }
                uint64_t v47 = v46;
                __n128 v48 = v37;
                char v50 = 1;
                uint64_t v29 = TVertex::getInEdge(v28);
                uint64_t v11 = v44;
                uint64_t v9 = v45;
                unint64_t v18 = v46;
                uint64_t v16 = v42;
                uint64_t v15 = v43;
                uint64_t v19 = v40;
                uint64_t v17 = v41;
                uint64_t v22 = 0;
                uint64_t v20 = v39;
                uint64_t v23 = v38;
                __n128 v24 = v37;
                uint64_t result = 44;
                if (v29)
                {
LABEL_33:
                  unsigned int v30 = *(_DWORD *)(v29 + 48);
                  BOOL v31 = v30 > 5;
                  int v32 = (1 << v30) & 0x2C;
                  if (!v31 && v32 != 0)
                  {
LABEL_56:
                    char v34 = 0;
                    goto LABEL_45;
                  }
                  uint64_t result = TWord::getWrittenForm(*(__int32 ***)(v29 + 56), (uint64_t)&v47);
                  if (v48.n128_u64[1] > 1)
                  {
                    char v34 = 0;
                    uint64_t v11 = v44;
                    uint64_t v9 = v45;
                    unint64_t v18 = v46;
                    uint64_t v16 = v42;
                    uint64_t v15 = v43;
                    uint64_t v19 = v40;
                    uint64_t v17 = v41;
                    uint64_t v22 = 0;
                    uint64_t v20 = v39;
                    uint64_t v23 = v38;
                    __n128 v24 = v37;
                    goto LABEL_45;
                  }
                  uint64_t result = (uint64_t)wcschr((__int32 *)".", *v47);
                  uint64_t v11 = v44;
                  uint64_t v9 = v45;
                  unint64_t v18 = v46;
                  uint64_t v16 = v42;
                  uint64_t v15 = v43;
                  uint64_t v19 = v40;
                  uint64_t v17 = v41;
                  uint64_t v22 = 0;
                  uint64_t v20 = v39;
                  uint64_t v23 = v38;
                  __n128 v24 = v37;
                  if (!result) {
                    goto LABEL_56;
                  }
                  uint64_t result = 44;
                  while (1)
                  {
                    uint64_t v29 = *(void *)v29;
                    if (!v29) {
                      break;
                    }
                    if (!*(unsigned char *)(v29 + 32)) {
                      goto LABEL_33;
                    }
                  }
                }
                char v34 = 1;
LABEL_45:
                if (v50)
                {
                  uint64_t result = (uint64_t)v47;
                  if (v47 != v18 && v47 != 0)
                  {
                    uint64_t result = MEMORY[0x216698730](v24);
                    __n128 v24 = v37;
                    uint64_t v23 = v38;
                    uint64_t v22 = 0;
                    uint64_t v20 = v39;
                    uint64_t v19 = v40;
                    uint64_t v17 = v41;
                    uint64_t v16 = v42;
                    uint64_t v15 = v43;
                    uint64_t v11 = v44;
                    uint64_t v9 = v45;
                    unint64_t v18 = v46;
                  }
                }
                if ((v34 & 1) == 0)
                {
LABEL_55:
                  uint64_t v26 = 1;
LABEL_15:
                  *(void *)(a4 + 8 * v8) += v26;
                }
              }
            }
            uint64_t v36 = *(void *)(a4 + 8 * v8);
            if (v19)
            {
              v36 += 3;
              *(void *)(a4 + 8 * v8) = v36;
            }
            uint64_t v27 = v36 + v9;
LABEL_26:
            *(void *)(a4 + 8 * v8) = v27;
          }
        }
LABEL_27:
        ++v8;
        uint64_t v5 = *a3;
        if (v8 >= (a3[1] - *a3) >> 3) {
          return result;
        }
      }
      if (!v21) {
        goto LABEL_27;
      }
      goto LABEL_25;
    }
  }
  return result;
}

void sub_213E944D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (LOBYTE(STACK[0x480]) && a22 != a21)
  {
    if (a22) {
      MEMORY[0x216698730]();
    }
  }
  _Unwind_Resume(a1);
}

void TDecodeLink::computeHistory(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = 0;
  if (!a3 || !a1) {
    goto LABEL_15;
  }
  unint64_t v3 = 0;
  while (1)
  {
    uint64_t v4 = *a1;
    if (!*a1) {
      goto LABEL_10;
    }
    int v5 = *(_DWORD *)(v4 + 48);
    if (v5 == 5 || v5 == 3) {
      break;
    }
    uint64_t v4 = *(void *)(v4 + 56);
LABEL_10:
    *(void *)(a2 + 8 * v3++) = v4;
    if (v3 < a3)
    {
      a1 = (uint64_t *)a1[1];
      if (a1) {
        continue;
      }
    }
    goto LABEL_14;
  }
  *(void *)(a2 + 8 * v3++) = 0;
LABEL_14:
  if (v3 <= 3) {
LABEL_15:
  }
    bzero((void *)(a2 + 8 * v3), 32 - 8 * v3);
}

double TTokenizer::getResultInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(void **)(*(void *)(a1 + 96) + 8 * a2 - 8);
  uint64_t v4 = (v3[1] - *v3) >> 4;
  *(_DWORD *)a3 = (v3[4] - v3[3]) >> 5;
  *(_DWORD *)(a3 + 4) = v4;
  *(_DWORD *)(a3 + 8) = v3[10];
  *(void *)&double result = 0x100000001;
  *(void *)(a3 + 12) = 0x100000001;
  return result;
}

uint64_t TTokenizer::release(uint64_t this, uint64_t a2)
{
  uint64_t v2 = this;
  if (a2)
  {
    uint64_t v3 = a2 - 1;
    uint64_t v4 = *(void *)(this + 96);
    if (a2 - 1 < (unint64_t)((*(void *)(this + 104) - v4) >> 3))
    {
      uint64_t v5 = *(void *)(v4 + 8 * v3);
      if (v5)
      {
        if (*(unsigned char *)(v5 + 344))
        {
          uint64_t v6 = *(void *)(v5 + 64);
          if (v6 != v5 + 88 && v6 != 0) {
            MEMORY[0x216698730]();
          }
        }
        unint64_t v8 = *(void **)(v5 + 24);
        if (v8)
        {
          *(void *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v8;
          operator delete(v8);
        }
        uint64_t v9 = *(void **)v5;
        if (*(void *)v5)
        {
          *(void *)(v5 + 8) = v9;
          operator delete(v9);
        }
        this = MEMORY[0x216698730](v5, 0x1030C404962A615);
      }
    }
  }
  else
  {
    uint64_t v3 = -1;
  }
  *(void *)(*(void *)(v2 + 96) + 8 * v3) = 0;
  return this;
}

void *TTokenizer::getResultData(void *result, uint64_t a2, void *__dst, void *a4, void *a5, _DWORD *a6, _DWORD *a7)
{
  if (a2 && (uint64_t v11 = result[12], a2 - 1 < (unint64_t)((result[13] - v11) >> 3)))
  {
    uint64_t v12 = *(void *)(v11 + 8 * (a2 - 1));
    if (!__dst) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v12 = 0;
    if (!__dst) {
      goto LABEL_8;
    }
  }
  size_t v13 = *(void *)(v12 + 8) - *(void *)v12;
  if (v13) {
    double result = memmove(__dst, *(const void **)v12, v13);
  }
LABEL_8:
  if (a4)
  {
    uint64_t v14 = *(unsigned char **)(v12 + 24);
    uint64_t v15 = *(unsigned char **)(v12 + 32);
    if (v15 != v14) {
      double result = memmove(a4, v14, v15 - v14);
    }
  }
  if (a5)
  {
    uint64_t v16 = (void *)(v12 + 64);
    unint64_t v18 = *(void *)(v12 + 72);
    unint64_t v17 = *(void *)(v12 + 80);
    if (v17 >= v18)
    {
      if (*(unsigned char *)(v12 + 344))
      {
        char v19 = 0;
        TBuffer<char>::insert((uint64_t)v16, v17, &v19, 1uLL);
        --*(void *)(v12 + 80);
      }
      else if (v18)
      {
        *(unsigned char *)(v18 + *v16 - 1) = 0;
      }
    }
    else
    {
      *(unsigned char *)(*v16 + v17) = 0;
    }
    double result = memcpy(a5, *(const void **)(v12 + 64), *(void *)(v12 + 80));
  }
  if (a6) {
    *a6 = *(void *)(v12 + 48);
  }
  if (a7) {
    *a7 = *(void *)(v12 + 56);
  }
  return result;
}

void *THashBase<std::pair<TDecodeLink::THistory const,TDecodeLink const*>,THashMapCompare<std::pair<TDecodeLink::THistory const,TDecodeLink const*>,std::equal_to<TDecodeLink::THistory>>,THashMapFunction<std::pair<TDecodeLink::THistory const,TDecodeLink const*>,THash<TDecodeLink::THistory>>>::~THashBase(void *a1)
{
  *a1 = &unk_26C4E5988;
  THashBase<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THashMapCompare<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,std::equal_to<TDecodeLinkMapWord::THistory>>,THashMapFunction<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THash<TDecodeLinkMapWord::THistory>>>::clear(a1);
  uint64_t v2 = a1[1];
  if (v2) {
    MEMORY[0x216698710](v2, 0x20C8093837F09);
  }
  return a1;
}

void THashBase<std::pair<TDecodeLink::THistory const,TDecodeLink const*>,THashMapCompare<std::pair<TDecodeLink::THistory const,TDecodeLink const*>,std::equal_to<TDecodeLink::THistory>>,THashMapFunction<std::pair<TDecodeLink::THistory const,TDecodeLink const*>,THash<TDecodeLink::THistory>>>::~THashBase(void *a1)
{
  THashBase<std::pair<TDecodeLink::THistory const,TDecodeLink const*>,THashMapCompare<std::pair<TDecodeLink::THistory const,TDecodeLink const*>,std::equal_to<TDecodeLink::THistory>>,THashMapFunction<std::pair<TDecodeLink::THistory const,TDecodeLink const*>,THash<TDecodeLink::THistory>>>::~THashBase(a1);

  JUMPOUT(0x216698730);
}

void TRegisterable<TTokenizer>::~TRegisterable(void *a1)
{
  TRegisterable<TTokenizer>::~TRegisterable(a1);

  JUMPOUT(0x216698730);
}

void std::vector<TLexiconMatch>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void **)(v4 - 8);
  if (a2 <= (v6 - (unsigned char *)v7) >> 5)
  {
    if (a2)
    {
      uint64_t v14 = 32 * a2;
      uint64_t v15 = &v7[4 * a2];
      do
      {
        *uint64_t v7 = 0;
        v7[1] = 0;
        *((unsigned char *)v7 + 24) = 0;
        v7[2] = 0;
        v7 += 4;
        v14 -= 32;
      }
      while (v14);
      uint64_t v7 = v15;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = (char *)v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 5);
    if (v9 >> 59) {
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 5;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 4 > v9) {
      unint64_t v9 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      size_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,std::wstring>>>(v4, v12);
    }
    else {
      size_t v13 = 0;
    }
    uint64_t v16 = &v13[32 * v10];
    unint64_t v17 = &v16[32 * a2];
    uint64_t v18 = 32 * a2;
    char v19 = v16;
    do
    {
      *(void *)char v19 = 0;
      *((void *)v19 + 1) = 0;
      v19[24] = 0;
      *((void *)v19 + 2) = 0;
      v19 += 32;
      v18 -= 32;
    }
    while (v18);
    uint64_t v20 = &v13[32 * v12];
    uint64_t v22 = (char *)*a1;
    uint64_t v21 = (char *)a1[1];
    if (v21 != *a1)
    {
      do
      {
        long long v23 = *((_OWORD *)v21 - 1);
        *((_OWORD *)v16 - 2) = *((_OWORD *)v21 - 2);
        *((_OWORD *)v16 - 1) = v23;
        v16 -= 32;
        v21 -= 32;
      }
      while (v21 != v22);
      uint64_t v21 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v17;
    a1[2] = v20;
    if (v21)
    {
      operator delete(v21);
    }
  }
}

void *std::vector<TEdgeStat>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<TEdgeStat>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 72 * a2;
    uint64_t v6 = 72 * a2;
    do
    {
      *(unsigned char *)(v4 + 64) = 0;
      *(_OWORD *)(v4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0uLL;
      *(_OWORD *)(v4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = 0uLL;
      *(_OWORD *)uint64_t v4 = 0uLL;
      *(_OWORD *)(v4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0uLL;
      v4 += 72;
      v6 -= 72;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_213E94A6C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<TEdgeStat>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL) {
    std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TEdgeStat>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[72 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<TEdgeStat>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(72 * a2);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**,false>(uint64_t result, char *a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4, char a5)
{
  uint64_t v10 = (char *)result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = a2 - v11;
    unint64_t v15 = (a2 - v11) >> 3;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          double result = (*a3)(*((void *)a2 - 1), *(void *)v11);
          if (result)
          {
            uint64_t v22 = *(void *)v11;
            *(void *)uint64_t v11 = *((void *)a2 - 1);
            *((void *)a2 - 1) = v22;
          }
          break;
        case 3uLL:
          double result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(v11, (void *)v11 + 1, (void *)a2 - 1, (unsigned int (**)(void))a3);
          break;
        case 4uLL:
          double result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(v11, (void *)v11 + 1, (void *)v11 + 2, (void *)a2 - 1, (unsigned int (**)(void))a3);
          break;
        case 5uLL:
          double result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(v11, (void *)v11 + 1, (void *)v11 + 2, (void *)v11 + 3, (void *)a2 - 1, (unsigned int (**)(void))a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 191) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**,TIntParam const**>(v11, a2, (uint64_t *)a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    unint64_t v17 = &v11[8 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(v11, &v11[8 * (v15 >> 1)], (void *)a2 - 1, (unsigned int (**)(void))a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>((void *)v11 + 1, (void *)v17 - 1, (void *)a2 - 2, (unsigned int (**)(void))a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>((void *)v11 + 2, &v11[8 * v16 + 8], (void *)a2 - 3, (unsigned int (**)(void))a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>((void *)v17 - 1, v17, &v11[8 * v16 + 8], (unsigned int (**)(void))a3);
      uint64_t v18 = *(void *)v11;
      *(void *)uint64_t v11 = *(void *)v17;
      *(void *)unint64_t v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(&v11[8 * (v15 >> 1)], v11, (void *)a2 - 1, (unsigned int (**)(void))a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (((*a3)(*((void *)v11 - 1), *(void *)v11) & 1) == 0)
    {
      double result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TIntParam const**,BOOL (*&)(TIntParam const*,TIntParam const*)>((uint64_t *)v11, (uint64_t *)a2, a3);
      uint64_t v11 = (char *)result;
      goto LABEL_19;
    }
LABEL_14:
    char v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TIntParam const**,BOOL (*&)(TIntParam const*,TIntParam const*)>((uint64_t *)v11, (uint64_t *)a2, a3);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(v11, v19, (unsigned int (**)(void))a3);
    uint64_t v11 = (char *)(v19 + 1);
    double result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(v19 + 1, a2, (unsigned int (**)(void))a3);
    if (result)
    {
      a4 = -v13;
      a2 = (char *)v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      double result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**,false>(v10, v19, a3, -v13, a5 & 1);
      uint64_t v11 = (char *)(v19 + 1);
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>((uint64_t)v11, (uint64_t *)a2, a3);
  }
  else
  {
    return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>((uint64_t)v11, a2, a3);
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  if ((uint64_t *)result != a2)
  {
    uint64_t v4 = (void *)result;
    char v5 = (uint64_t *)(result + 8);
    if ((uint64_t *)(result + 8) != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = (uint64_t *)result;
      do
      {
        uint64_t v10 = *v8;
        uint64_t v9 = v8[1];
        uint64_t v8 = v5;
        double result = (*a3)(v9, v10);
        if (result)
        {
          uint64_t v11 = *v8;
          uint64_t v12 = v7;
          while (1)
          {
            *(void *)((char *)v4 + v12 + 8) = *(void *)((char *)v4 + v12);
            if (!v12) {
              break;
            }
            double result = (*a3)(v11, *(void *)((char *)v4 + v12 - 8));
            v12 -= 8;
            if ((result & 1) == 0)
            {
              uint64_t v13 = (void *)((char *)v4 + v12 + 8);
              goto LABEL_10;
            }
          }
          uint64_t v13 = v4;
LABEL_10:
          *uint64_t v13 = v11;
        }
        char v5 = v8 + 1;
        v7 += 8;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(uint64_t result, void *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  if ((void *)result != a2)
  {
    uint64_t v4 = (void *)result;
    for (unint64_t i = (void *)(result + 8); v4 + 1 != a2; unint64_t i = v4 + 1)
    {
      uint64_t v8 = *v4;
      uint64_t v7 = v4[1];
      uint64_t v4 = i;
      double result = (*a3)(v7, v8);
      if (result)
      {
        uint64_t v9 = *v4;
        uint64_t v10 = v4;
        do
        {
          uint64_t v11 = v10;
          uint64_t v12 = *--v10;
          *uint64_t v11 = v12;
          double result = (*a3)(v9, *(v11 - 2));
        }
        while ((result & 1) != 0);
        *uint64_t v10 = v9;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(void *a1, void *a2, void *a3, unsigned int (**a4)(void))
{
  char v8 = ((uint64_t (*)(void, void))*a4)(*a2, *a1);
  uint64_t result = ((uint64_t (*)(void, void))*a4)(*a3, *a2);
  if ((v8 & 1) == 0)
  {
    if (!result) {
      return result;
    }
    uint64_t v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    if (!((unsigned int (*)(void, void))*a4)(*a2, *a1)) {
      return 1;
    }
    uint64_t v12 = *a1;
    *a1 = *a2;
    *a2 = v12;
    return 2;
  }
  uint64_t v10 = *a1;
  if (!result)
  {
    *a1 = *a2;
    *a2 = v10;
    if (!(*a4)(*a3)) {
      return 1;
    }
    uint64_t v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    return 2;
  }
  *a1 = *a3;
  *a3 = v10;
  return 1;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TIntParam const**,BOOL (*&)(TIntParam const*,TIntParam const*)>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v4 = a2;
  uint64_t v6 = *a1;
  if ((*a3)(*a1, *(a2 - 1)))
  {
    uint64_t v7 = a1;
    do
    {
      uint64_t v8 = v7[1];
      ++v7;
    }
    while (((*a3)(v6, v8) & 1) == 0);
  }
  else
  {
    uint64_t v9 = a1 + 1;
    do
    {
      uint64_t v7 = v9;
      if (v9 >= v4) {
        break;
      }
      ++v9;
    }
    while (!(*a3)(v6, *v7));
  }
  if (v7 < v4)
  {
    do
      uint64_t v10 = *--v4;
    while (((*a3)(v6, v10) & 1) != 0);
  }
  while (v7 < v4)
  {
    uint64_t v11 = *v7;
    *uint64_t v7 = *v4;
    uint64_t *v4 = v11;
    do
    {
      uint64_t v12 = v7[1];
      ++v7;
    }
    while (!(*a3)(v6, v12));
    do
      uint64_t v13 = *--v4;
    while (((*a3)(v6, v13) & 1) != 0);
  }
  if (v7 - 1 != a1) {
    *a1 = *(v7 - 1);
  }
  *(v7 - 1) = v6;
  return v7;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TIntParam const**,BOOL (*&)(TIntParam const*,TIntParam const*)>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v6 = 0;
  uint64_t v7 = *a1;
  do
    char v8 = (*a3)(a1[++v6], v7);
  while ((v8 & 1) != 0);
  uint64_t v9 = &a1[v6];
  uint64_t v10 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v9 >= a2) {
        break;
      }
      uint64_t v12 = *--a2;
    }
    while (((*a3)(v12, v7) & 1) == 0);
  }
  else
  {
    do
      uint64_t v11 = *--a2;
    while (!(*a3)(v11, v7));
  }
  if (v9 < a2)
  {
    uint64_t v13 = &a1[v6];
    uint64_t v14 = a2;
    do
    {
      uint64_t v15 = *v13;
      *uint64_t v13 = *v14;
      *uint64_t v14 = v15;
      do
      {
        uint64_t v16 = v13[1];
        ++v13;
      }
      while (((*a3)(v16, v7) & 1) != 0);
      do
        uint64_t v17 = *--v14;
      while (!(*a3)(v17, v7));
    }
    while (v13 < v14);
    uint64_t v10 = v13 - 1;
  }
  if (v10 != a1) {
    *a1 = *v10;
  }
  *uint64_t v10 = v7;
  return v10;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(void *a1, void *a2, unsigned int (**a3)(void))
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((unsigned int (*)(void, void))*a3)(*(a2 - 1), *a1))
      {
        uint64_t v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v9 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(a1, a1 + 1, a1 + 2, a3);
      uint64_t v10 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if (((unsigned int (*)(void, void))*a3)(*v10, *v9))
    {
      uint64_t v13 = *v10;
      uint64_t v14 = v11;
      while (1)
      {
        uint64_t v15 = (char *)a1 + v14;
        *(void *)((char *)a1 + v14 + 24) = *(void *)((char *)a1 + v14 + 16);
        if (v14 == -16) {
          break;
        }
        v14 -= 8;
        if ((((uint64_t (*)(uint64_t, void))*a3)(v13, *((void *)v15 + 1)) & 1) == 0)
        {
          uint64_t v16 = (void *)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      uint64_t v16 = a1;
LABEL_12:
      *uint64_t v16 = v13;
      if (++v12 == 8) {
        return v10 + 1 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 8;
    if (++v10 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(void *a1, void *a2, void *a3, void *a4, unsigned int (**a5)(void))
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(a1, a2, a3, a5);
  uint64_t result = ((uint64_t (*)(void, void))*a5)(*a4, *a3);
  if (result)
  {
    uint64_t v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    uint64_t result = ((uint64_t (*)(void, void))*a5)(*a3, *a2);
    if (result)
    {
      uint64_t v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      uint64_t result = ((uint64_t (*)(void, void))*a5)(*a2, *a1);
      if (result)
      {
        uint64_t v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(void *a1, void *a2, void *a3, void *a4, void *a5, unsigned int (**a6)(void))
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(a1, a2, a3, a4, a6);
  uint64_t result = ((uint64_t (*)(void, void))*a6)(*a5, *a4);
  if (result)
  {
    uint64_t v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    uint64_t result = ((uint64_t (*)(void, void))*a6)(*a4, *a3);
    if (result)
    {
      uint64_t v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      uint64_t result = ((uint64_t (*)(void, void))*a6)(*a3, *a2);
      if (result)
      {
        uint64_t v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        uint64_t result = ((uint64_t (*)(void, void))*a6)(*a2, *a1);
        if (result)
        {
          uint64_t v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**,TIntParam const**>(char *a1, char *a2, uint64_t *a3, uint64_t (**a4)(uint64_t, uint64_t))
{
  if (a1 != a2)
  {
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) >> 3;
    if (a2 - a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[8 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>((uint64_t)a1, (unsigned int (**)(void, void))a4, v9, v12);
        v12 -= 8;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != (char *)a3)
    {
      uint64_t v14 = (uint64_t *)a2;
      do
      {
        if ((*a4)(*v14, *(void *)a1))
        {
          uint64_t v15 = *v14;
          *uint64_t v14 = *(void *)a1;
          *(void *)a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>((uint64_t)a1, (unsigned int (**)(void, void))a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      uint64_t v13 = (char *)a3;
    }
    if (v8 >= 9)
    {
      uint64_t v16 = (unint64_t)v8 >> 3;
      uint64_t v17 = a2 - 8;
      do
      {
        uint64_t v18 = *(void *)a1;
        char v19 = (char *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(a1, (unsigned int (**)(void, void))a4, v16);
        if (v17 == v19)
        {
          *(void *)char v19 = v18;
        }
        else
        {
          *(void *)char v19 = *(void *)v17;
          *(void *)uint64_t v17 = v18;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>((uint64_t)a1, (uint64_t)(v19 + 8), a4, (v19 + 8 - a1) >> 3);
        }
        v17 -= 8;
      }
      while (v16-- > 2);
    }
    return (uint64_t *)v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(uint64_t result, unsigned int (**a2)(void, void), uint64_t a3, void *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    char v5 = a4;
    uint64_t v6 = result;
    int64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v10 = ((uint64_t)a4 - result) >> 2;
      uint64_t v11 = v10 + 1;
      uint64_t v12 = (void *)(result + 8 * (v10 + 1));
      uint64_t v13 = v10 + 2;
      if (v10 + 2 < a3 && (*a2)(*v12, v12[1]))
      {
        ++v12;
        uint64_t v11 = v13;
      }
      uint64_t result = ((uint64_t (*)(void, void))*a2)(*v12, *v5);
      if ((result & 1) == 0)
      {
        uint64_t v14 = *v5;
        do
        {
          uint64_t v15 = v12;
          *char v5 = *v12;
          if (v7 < v11) {
            break;
          }
          uint64_t v16 = (2 * v11) | 1;
          uint64_t v12 = (void *)(v6 + 8 * v16);
          if (2 * v11 + 2 < a3)
          {
            if ((*a2)(*v12, v12[1]))
            {
              ++v12;
              uint64_t v16 = 2 * v11 + 2;
            }
          }
          uint64_t result = ((uint64_t (*)(void, uint64_t))*a2)(*v12, v14);
          char v5 = v15;
          uint64_t v11 = v16;
        }
        while (!result);
        *uint64_t v15 = v14;
      }
    }
  }
  return result;
}

void *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(void *a1, unsigned int (**a2)(void, void), uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = &a1[v6 + 1];
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)(a1[v6 + 1], a1[v6 + 2]))
    {
      ++v9;
      uint64_t v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TIntParam const*,TIntParam const*),TIntParam const**>(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v6 = result;
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = (uint64_t *)(result + 8 * (v4 >> 1));
    uint64_t v9 = (uint64_t *)(a2 - 8);
    uint64_t result = (*a3)(*v8, *(void *)(a2 - 8));
    if (result)
    {
      uint64_t v10 = *v9;
      do
      {
        uint64_t v11 = v8;
        *uint64_t v9 = *v8;
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = (uint64_t *)(v6 + 8 * v7);
        uint64_t result = (*a3)(*v8, v10);
        uint64_t v9 = v11;
      }
      while ((result & 1) != 0);
      *uint64_t v11 = v10;
    }
  }
  return result;
}

void THashMap<TDecodeLink::THistory,TDecodeLink const*,THash<TDecodeLink::THistory>,std::equal_to<TDecodeLink::THistory>>::~THashMap(void *a1)
{
  THashBase<std::pair<TDecodeLink::THistory const,TDecodeLink const*>,THashMapCompare<std::pair<TDecodeLink::THistory const,TDecodeLink const*>,std::equal_to<TDecodeLink::THistory>>,THashMapFunction<std::pair<TDecodeLink::THistory const,TDecodeLink const*>,THash<TDecodeLink::THistory>>>::~THashBase(a1);

  JUMPOUT(0x216698730);
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    std::vector<int>::pointer end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_213E95B30(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<int>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wchar_t>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void (***DgnDelete<FrameTransformer>(void (***result)(void)))(void)
{
  if (result)
  {
    uint64_t v1 = result;
    (**result)(result);
    return (void (***)(void))MemChunkFree(v1, 0);
  }
  return result;
}

TFileObject *compileAlt(const TFileObject *a1, TFileObject *a2, TLexicon *a3, TAllocator *a4)
{
  uint64_t v82 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)a1 + 10))
  {
    if (TLexicon::checkName((uint64_t)a3, *((int **)a1 + 3), 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      loggableFileObject((uint64_t *)a1);
      int v52 = v80[23];
      unint64_t v53 = *(unsigned char **)v80;
      loggableUnicode(*((unsigned int **)a1 + 3), __p);
      unint64_t v58 = v80;
      if (v52 < 0) {
        unint64_t v58 = v53;
      }
      if (__p[23] >= 0) {
        uint64_t v59 = __p;
      }
      else {
        uint64_t v59 = *(unsigned char **)__p;
      }
      tknPrintf("Error: %s'%s' is an invalid token name.\n", v54, v55, v56, v57, v58, v59);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if ((v80[23] & 0x80000000) != 0) {
        operator delete(*(void **)v80);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
      *(void *)unint64_t v80 = byte_26C4DF190;
      if ((__p[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v80[8], *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
      }
      else
      {
        *(_OWORD *)&v80[8] = *(_OWORD *)__p;
        uint64_t v81 = *(void *)&__p[16];
      }
      *(void *)unint64_t v80 = &unk_26C4E0710;
      if (v81 >= 0) {
        unint64_t v70 = &v80[8];
      }
      else {
        unint64_t v70 = *(const char **)&v80[8];
      }
      conditionalAssert(v70, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/patternmgr.cpp", 155, v60, v61);
      *(void *)unint64_t v80 = byte_26C4DF190;
      if (SHIBYTE(v81) < 0) {
        operator delete(*(void **)&v80[8]);
      }
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      exception = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v80, &byte_2140B33BB);
      void *exception = byte_26C4DF190;
      uint64_t v72 = (std::string *)(exception + 1);
      if ((v80[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v72, *(const std::string::value_type **)v80, *(std::string::size_type *)&v80[8]);
      }
      else
      {
        long long v75 = *(_OWORD *)v80;
        exception[3] = *(void *)&v80[16];
        *(_OWORD *)&v72->__r_.__value_.__l.__data_ = v75;
      }
      void *exception = &unk_26C4E0710;
    }
    if (*(unsigned char *)(getPropCheckTokenExistence() + 8) && !TLexicon::findHeadClone(a3, *((__int32 **)a1 + 3)))
    {
      loggableFileObject((uint64_t *)a1);
      int v8 = v80[23];
      uint64_t v9 = *(unsigned char **)v80;
      loggableUnicode(*((unsigned int **)a1 + 3), __p);
      uint64_t v14 = v80;
      if (v8 < 0) {
        uint64_t v14 = v9;
      }
      if (__p[23] >= 0) {
        uint64_t v15 = __p;
      }
      else {
        uint64_t v15 = *(unsigned char **)__p;
      }
      tknPrintf("Warning: %s'%s' isn't lexicalized.\n", v10, v11, v12, v13, v14, v15);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if ((v80[23] & 0x80000000) != 0) {
        operator delete(*(void **)v80);
      }
    }
    uint64_t v17 = (const __int32 *)*((void *)a1 + 3);
    uint64_t v16 = (const __int32 **)((char *)a1 + 24);
    size_t v18 = wcslen(v17);
    if ((v18 + 1) >> 62) {
      uint64_t v19 = -1;
    }
    else {
      uint64_t v19 = 4 * (v18 + 1);
    }
    char v20 = (__int32 *)TAllocator::allocate(a4, v19);
    wcscpy(v20, *v16);
    uint64_t v21 = TAllocator::allocate(a4, 48);
    *(_DWORD *)(v21 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = 1;
    *(void *)(v21 + 24) = v20;
    *(void *)(v21 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
    *(void *)uint64_t v21 = 0;
    *(void *)(v21 + 8) = "T";
    *(void *)(v21 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
    goto LABEL_60;
  }
  *(void *)unint64_t v80 = &unk_21409B870;
  *(int64x2_t *)&v80[8] = vdupq_n_s64(1uLL);
  uint64_t v81 = -1;
  if (TFileObject::verify((uint64_t)a1, (uint64_t)v80, 1uLL, 0))
  {
    std::string::basic_string[abi:ne180100]<0>(v76, &byte_2140B33BB);
    *(void *)__p = byte_26C4DF190;
    if (SHIBYTE(v77) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v76[0], (std::string::size_type)v76[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v76;
      uint64_t v79 = v77;
    }
    *(void *)__p = &unk_26C4E0710;
    if (v79 >= 0) {
      uint64_t v64 = &__p[8];
    }
    else {
      uint64_t v64 = *(const char **)&__p[8];
    }
    conditionalAssert(v64, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/patternmgr.cpp", 88, v62, v63);
    *(void *)__p = byte_26C4DF190;
    if (SHIBYTE(v79) < 0) {
      operator delete(*(void **)&__p[8]);
    }
    if (SHIBYTE(v77) < 0) {
      operator delete(v76[0]);
    }
    unint64_t v65 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
    *unint64_t v65 = byte_26C4DF190;
    uint64_t v66 = (std::string *)(v65 + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v66, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      long long v73 = *(_OWORD *)__p;
      v65[3] = *(void *)&__p[16];
      *(_OWORD *)&v66->__r_.__value_.__l.__data_ = v73;
    }
    *unint64_t v65 = &unk_26C4E0710;
  }
  uint64_t v22 = *((void *)a1 + 3);
  if (!v22)
  {
    uint64_t v21 = 0;
    goto LABEL_58;
  }
  uint64_t v23 = 0;
  uint64_t v21 = 0;
  char v24 = 0;
  do
  {
    if (TFileObject::verify((TFileObject *)v22, 0, 0)) {
      goto LABEL_32;
    }
    if (TLexicon::checkName((uint64_t)a3, *(int **)(v22 + 24), 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      loggableFileObject((uint64_t *)v22);
      int v25 = __p[23];
      uint64_t v26 = *(unsigned char **)__p;
      loggableUnicode(*(unsigned int **)(v22 + 24), v76);
      BOOL v31 = __p;
      if (v25 < 0) {
        BOOL v31 = v26;
      }
      if (v77 >= 0) {
        int v32 = v76;
      }
      else {
        int v32 = (void **)v76[0];
      }
      tknPrintf("Error: %s'%s' is an invalid token name.\n", v27, v28, v29, v30, v31, v32);
      if (SHIBYTE(v77) < 0) {
        operator delete(v76[0]);
      }
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
LABEL_32:
      char v24 = 1;
      goto LABEL_33;
    }
    if (*(unsigned char *)(getPropCheckTokenExistence() + 8) && !TLexicon::findHeadClone(a3, *(__int32 **)(v22 + 24)))
    {
      loggableFileObject((uint64_t *)v22);
      int v33 = __p[23];
      char v34 = *(unsigned char **)__p;
      loggableUnicode(*(unsigned int **)(v22 + 24), v76);
      uint64_t v39 = __p;
      if (v33 < 0) {
        uint64_t v39 = v34;
      }
      if (v77 >= 0) {
        uint64_t v40 = v76;
      }
      else {
        uint64_t v40 = (void **)v76[0];
      }
      tknPrintf("Warning: %s'%s' isn't lexicalized.\n", v35, v36, v37, v38, v39, v40);
      if (SHIBYTE(v77) < 0) {
        operator delete(v76[0]);
      }
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
    size_t v41 = wcslen(*(const __int32 **)(v22 + 24));
    if ((v41 + 1) >> 62) {
      uint64_t v42 = -1;
    }
    else {
      uint64_t v42 = 4 * (v41 + 1);
    }
    uint64_t v43 = (__int32 *)TAllocator::allocate(a4, v42);
    wcscpy(v43, *(const __int32 **)(v22 + 24));
    uint64_t v44 = TAllocator::allocate(a4, 48);
    *(_DWORD *)(v44 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = 1;
    *(void *)(v44 + 24) = v43;
    *(void *)(v44 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
    *(void *)uint64_t v44 = 0;
    *(void *)(v44 + 8) = "T";
    *(void *)(v44 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
    if (v23) {
      *(void *)(v23 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v44;
    }
    if (!v21) {
      uint64_t v21 = v44;
    }
    uint64_t v23 = v44;
LABEL_33:
    uint64_t v22 = *(void *)(v22 + 16);
  }
  while (v22);
  if (v24)
  {
    std::string::basic_string[abi:ne180100]<0>(v76, &byte_2140B33BB);
    *(void *)__p = byte_26C4DF190;
    if (SHIBYTE(v77) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v76[0], (std::string::size_type)v76[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v76;
      uint64_t v79 = v77;
    }
    *(void *)__p = &unk_26C4E0710;
    if (v79 >= 0) {
      BOOL v67 = &__p[8];
    }
    else {
      BOOL v67 = *(const char **)&__p[8];
    }
    conditionalAssert(v67, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/patternmgr.cpp", 130, v45, v46);
    *(void *)__p = byte_26C4DF190;
    if (SHIBYTE(v79) < 0) {
      operator delete(*(void **)&__p[8]);
    }
    if (SHIBYTE(v77) < 0) {
      operator delete(v76[0]);
    }
    uint64_t v68 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
    *uint64_t v68 = byte_26C4DF190;
    long long v69 = (std::string *)(v68 + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v69, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      long long v74 = *(_OWORD *)__p;
      v68[3] = *(void *)&__p[16];
      *(_OWORD *)&v69->__r_.__value_.__l.__data_ = v74;
    }
    *uint64_t v68 = &unk_26C4E0710;
  }
LABEL_58:
  if (*(void *)(v21 + 16))
  {
    uint64_t v47 = TAllocator::allocate(a4, 48);
    *(_DWORD *)(v47 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = 0;
    *(void *)(v47 + 24) = v21;
    *(void *)(v47 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
    *(void *)uint64_t v47 = 0;
    *(void *)(v47 + 8) = "S";
    *(void *)(v47 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
    uint64_t v21 = v47;
  }
LABEL_60:
  if (!a2) {
    return (TFileObject *)v21;
  }
  if (!wcscmp(*((const __int32 **)a2 + 1), (const __int32 *)"A"))
  {
    uint64_t v49 = *((void *)a2 + 3);
    do
    {
      uint64_t v50 = v49;
      uint64_t v49 = *(void *)(v49 + 16);
    }
    while (v49);
    *(void *)(v50 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v21;
  }
  else
  {
    *((void *)a2 + 2) = v21;
    uint64_t v48 = TAllocator::allocate(a4, 48);
    *(_DWORD *)(v48 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = 0;
    *(void *)(v48 + 24) = a2;
    *(void *)(v48 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
    *(void *)(v48 + 8) = "A";
    *(void *)(v48 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
    a2 = (TFileObject *)v48;
    *(void *)uint64_t v48 = 0;
  }
  return a2;
}

void sub_213E964C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, void *a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,void *__p,void *a28,int a29,__int16 a30,char a31,char a32,int a33,__int16 a34,char a35,char a36)
{
  if (a32 < 0)
  {
    operator delete(__p);
    if ((v37 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v37)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v36);
  goto LABEL_6;
}

void TArrayObject::TArrayObject(TArrayObject *this, const TFileObject *a2, TLexicon *a3, TAllocator *a4)
{
  *((void *)this + 1) = 0;
  uint64_t v35 = (char *)this + 8;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  char v5 = (void **)((char *)this + 32);
  *(void *)this = &unk_26C4DFB68;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  char v40 = 0;
  uint64_t v6 = *((void *)a2 + 3);
  if (!v6) {
    return;
  }
  do
  {
    if (!wcscmp(*(const __int32 **)(v6 + 8), (const __int32 *)"N"))
    {
      if (*((char *)this + 31) < 0)
      {
        if (!*((void *)this + 2))
        {
LABEL_25:
          MEMORY[0x216698480](v35, *(void *)(v6 + 24));
          goto LABEL_33;
        }
      }
      else if (!*((unsigned char *)this + 31))
      {
        goto LABEL_25;
      }
      loggableFileObject((uint64_t *)v6);
      if (__p[23] >= 0) {
        uint64_t v21 = __p;
      }
      else {
        uint64_t v21 = *(unsigned char **)__p;
      }
      tknPrintf("Error: %sRedefinition\n", v17, v18, v19, v20, v21);
    }
    else
    {
      unsigned int v7 = **(_DWORD **)(v6 + 8);
      {
        operator new();
      }
      if ((int)v7 < 48
        || v7 >= 0x3A
        && (v7 < 0x660
         || TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v7) == -1))
      {
        loggableFileObject((uint64_t *)v6);
        if (__p[23] >= 0) {
          uint64_t v16 = __p;
        }
        else {
          uint64_t v16 = *(unsigned char **)__p;
        }
        tknPrintf("Error: %sInvalid attribute\n", v12, v13, v14, v15, v16);
      }
      else
      {
        int v8 = *(unsigned int **)(v6 + 8);
        {
          operator new();
        }
        unsigned int v9 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v8, (BOOL *)&v40);
        if (!v40 && v9 >> 4 < 0x271)
        {
          uint64_t v10 = v9;
          uint64_t v11 = (TFileObject **)*((void *)this + 4);
          if (v9 >= (unint64_t)((uint64_t)(*((void *)this + 5) - (void)v11) >> 3))
          {
            std::vector<TPItnTagHandle_fake **>::reserve(v5, 2 * (v9 + 1));
            *(void *)__p = 0;
            std::vector<TSegment const*>::resize((uint64_t)v5, v10 + 1, __p);
            uint64_t v11 = (TFileObject **)*v5;
          }
          *((void *)*v5 + v10) = compileAlt((const TFileObject *)v6, v11[v10], a3, a4);
          goto LABEL_33;
        }
        loggableFileObject((uint64_t *)v6);
        if (__p[23] >= 0) {
          uint64_t v26 = __p;
        }
        else {
          uint64_t v26 = *(unsigned char **)__p;
        }
        tknPrintf("Error: %sBad index (not an integer or greater than 10000)\n", v22, v23, v24, v25, v26);
      }
    }
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    char v40 = 1;
LABEL_33:
    uint64_t v6 = *(void *)(v6 + 16);
  }
  while (v6);
  if (v40)
  {
    std::string::basic_string[abi:ne180100]<0>(v36, &byte_2140B33BB);
    *(void *)__p = byte_26C4DF190;
    if (SHIBYTE(v37) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v36[0], (std::string::size_type)v36[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v36;
      uint64_t v39 = v37;
    }
    *(void *)__p = &unk_26C4E0710;
    if (v39 >= 0) {
      uint64_t v29 = &__p[8];
    }
    else {
      uint64_t v29 = *(const char **)&__p[8];
    }
    conditionalAssert(v29, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/patternmgr.cpp", 286, v27, v28);
    *(void *)__p = byte_26C4DF190;
    if (SHIBYTE(v39) < 0) {
      operator delete(*(void **)&__p[8]);
    }
    if (SHIBYTE(v37) < 0) {
      operator delete(v36[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
    void *exception = byte_26C4DF190;
    BOOL v31 = (std::string *)(exception + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v31, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      long long v32 = *(_OWORD *)__p;
      exception[3] = *(void *)&__p[16];
      *(_OWORD *)&v31->__r_.__value_.__l.__data_ = v32;
    }
    void *exception = &unk_26C4E0710;
  }
}

void sub_213E96A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,void *a22,int a23,__int16 a24,char a25,char a26,int a27,__int16 a28,char a29,char a30)
{
  MEMORY[0x216698730](v32, 0x1070C40ADD13FEBLL);
  char v34 = *v31;
  if (*v31)
  {
    *(void *)(v30 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = v34;
    operator delete(v34);
  }
  *(void *)uint64_t v30 = a11;
  if (*(char *)(v30 + 31) < 0) {
    operator delete(*a14);
  }
  _Unwind_Resume(a1);
}

uint64_t TArrayObject::checkNoGap(TArrayObject *this, unint64_t a2, unint64_t a3)
{
  if (a2 >= a3)
  {
    char v6 = 0;
  }
  else
  {
    unint64_t v4 = a2;
    char v6 = 0;
    unsigned int v7 = (unsigned int **)((char *)this + 8);
    do
    {
      uint64_t v8 = *((void *)this + 4);
      if (v4 >= (*((void *)this + 5) - v8) >> 3 || !*(void *)(v8 + 8 * v4))
      {
        unsigned int v9 = (unsigned int *)v7;
        if (*((char *)this + 31) < 0) {
          unsigned int v9 = *v7;
        }
        loggableUnicode(v9, __p);
        if (v17 >= 0) {
          uint64_t v14 = __p;
        }
        else {
          uint64_t v14 = (void **)__p[0];
        }
        tknPrintf("Error: Array '%s' : Attribute '%llu' : Missing declaration\n", v10, v11, v12, v13, v14, v4);
        if (v17 < 0) {
          operator delete(__p[0]);
        }
        char v6 = 1;
      }
      ++v4;
    }
    while (a3 != v4);
  }
  return v6 & 1;
}

void sub_213E96C38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void TDigitObject::TDigitObject(TDigitObject *this, const TFileObject *a2, TLexicon *a3, TAllocator *a4)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  *((void *)this + 1) = 0;
  uint64_t v26 = (char *)this + 8;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  uint64_t v8 = (char *)this + 32;
  *(void *)this = &unk_26C4DFC60;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  uint64_t v32 = "0";
  int64x2_t v33 = vdupq_n_s64(1uLL);
  uint64_t v34 = -1;
  uint64_t v35 = "1";
  int64x2_t v36 = v33;
  uint64_t v37 = -1;
  uint64_t v38 = "2";
  int64x2_t v39 = v33;
  uint64_t v40 = -1;
  size_t v41 = "3";
  int64x2_t v42 = v33;
  uint64_t v43 = -1;
  uint64_t v44 = "4";
  int64x2_t v45 = v33;
  uint64_t v46 = -1;
  uint64_t v47 = "5";
  int64x2_t v48 = v33;
  uint64_t v49 = -1;
  uint64_t v50 = "6";
  int64x2_t v51 = v33;
  uint64_t v52 = -1;
  unint64_t v53 = "7";
  int64x2_t v54 = v33;
  uint64_t v55 = -1;
  uint64_t v56 = "8";
  uint64_t v57 = 1;
  long long v58 = xmmword_214085130;
  uint64_t v59 = "9";
  uint64_t v60 = 1;
  long long v61 = xmmword_214085130;
  uint64_t v62 = "D";
  uint64_t v63 = 3;
  long long v64 = xmmword_214085130;
  unint64_t v65 = "T";
  uint64_t v66 = 3;
  long long v67 = xmmword_214085130;
  uint64_t v68 = "N";
  uint64_t v69 = 0;
  long long v70 = xmmword_214085130;
  int v9 = TFileObject::verify((uint64_t)a2, (uint64_t)&v32, 0xDuLL, 1);
  BOOL v31 = v9;
  uint64_t v25 = v8;
  if (v9)
  {
    std::string::basic_string[abi:ne180100]<0>(v27, &byte_2140B33BB);
    *(void *)__p = byte_26C4DF190;
    if (SHIBYTE(v28) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v27[0], (std::string::size_type)v27[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v27;
      uint64_t v30 = v28;
    }
    *(void *)__p = &unk_26C4E0710;
    if (v30 >= 0) {
      char v17 = &__p[8];
    }
    else {
      char v17 = *(const char **)&__p[8];
    }
    conditionalAssert(v17, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/patternmgr.cpp", 422, v13, v14);
    *(void *)__p = byte_26C4DF190;
    if (SHIBYTE(v30) < 0) {
      operator delete(*(void **)&__p[8]);
    }
    if (SHIBYTE(v28) < 0) {
      operator delete(v27[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
    void *exception = byte_26C4DF190;
    uint64_t v19 = (std::string *)(exception + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      long long v23 = *(_OWORD *)__p;
      exception[3] = *(void *)&__p[16];
      *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v23;
    }
    void *exception = &unk_26C4E0710;
  }
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *(void *)__p = 0;
  std::vector<TSegment const*>::resize((uint64_t)v8, 0xAuLL, __p);
  for (uint64_t i = *((void *)a2 + 3); i; uint64_t i = *(void *)(i + 16))
  {
    if (!wcscmp(*(const __int32 **)(i + 8), (const __int32 *)"N"))
    {
      BOOL v31 = TFileObject::verify((TFileObject *)i, 0, 0);
      MEMORY[0x216698480](v26, *(void *)(i + 24));
    }
    else if (!wcscmp(*(const __int32 **)(i + 8), (const __int32 *)"D"))
    {
      *((void *)this + 7) = compileAlt((const TFileObject *)i, *((TFileObject **)this + 7), a3, a4);
    }
    else if (!wcscmp(*(const __int32 **)(i + 8), (const __int32 *)"T"))
    {
      *((void *)this + 8) = compileAlt((const TFileObject *)i, *((TFileObject **)this + 8), a3, a4);
    }
    else
    {
      uint64_t v11 = *(unsigned int **)(i + 8);
      {
        operator new();
      }
      unsigned int v12 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v11, &v31);
      *(void *)(*v25 + 8 * v12) = compileAlt((const TFileObject *)i, *(TFileObject **)(*v25 + 8 * v12), a3, a4);
    }
  }
  if (v31)
  {
    std::string::basic_string[abi:ne180100]<0>(v27, &byte_2140B33BB);
    *(void *)__p = byte_26C4DF190;
    if (SHIBYTE(v28) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v27[0], (std::string::size_type)v27[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v27;
      uint64_t v30 = v28;
    }
    *(void *)__p = &unk_26C4E0710;
    if (v30 >= 0) {
      uint64_t v20 = &__p[8];
    }
    else {
      uint64_t v20 = *(const char **)&__p[8];
    }
    conditionalAssert(v20, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/patternmgr.cpp", 453, v15, v16);
    *(void *)__p = byte_26C4DF190;
    if (SHIBYTE(v30) < 0) {
      operator delete(*(void **)&__p[8]);
    }
    if (SHIBYTE(v28) < 0) {
      operator delete(v27[0]);
    }
    uint64_t v21 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
    *uint64_t v21 = byte_26C4DF190;
    uint64_t v22 = (std::string *)(v21 + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v22, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      long long v24 = *(_OWORD *)__p;
      v21[3] = *(void *)&__p[16];
      *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v24;
    }
    *uint64_t v21 = &unk_26C4E0710;
  }
}

void sub_213E97294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, void **a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, void *a20,int a21,__int16 a22,char a23,char a24,int a25,__int16 a26,char a27,char a28)
{
  MEMORY[0x216698730](v28, 0x1070C40ADD13FEBLL);
  BOOL v31 = *a11;
  if (*a11)
  {
    *(void *)(v29 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = v31;
    operator delete(v31);
  }
  *(void *)uint64_t v29 = a10;
  if (*(char *)(v29 + 31) < 0) {
    operator delete(*a12);
  }
  _Unwind_Resume(a1);
}

const char *TDigitObject::build(const char *result, unsigned int *a2, TVertex *a3, TVertex *a4, TGraph *this, TLexicon *a6)
{
  uint64_t v30 = (uint64_t)result;
  unsigned int v6 = *a2;
  if (*a2)
  {
    uint64_t v10 = a2;
    do
    {
      {
        operator new();
      }
      int DigitExtended = v6 - 48;
      if ((int)v6 < 48) {
        goto LABEL_8;
      }
      if (v6 <= 0x39) {
        goto LABEL_9;
      }
      if (v6 < 0x660) {
LABEL_8:
      }
        int DigitExtended = -1;
      else {
        int DigitExtended = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v6);
      }
LABEL_9:
      unsigned int v12 = *v10;
      if (*v10)
      {
        unint64_t v13 = 0;
        uint64_t v14 = v10;
        uint64_t v15 = v10 + 1;
        while (1)
        {
          {
            operator new();
          }
          int v16 = v12 - 48;
          if ((int)v12 < 48) {
            goto LABEL_16;
          }
          if (v12 <= 0x39) {
            goto LABEL_17;
          }
          if (v12 < 0x660) {
LABEL_16:
          }
            int v16 = -1;
          else {
            int v16 = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v12);
          }
LABEL_17:
          if (v16 != DigitExtended)
          {
            unint64_t v17 = v13;
            goto LABEL_24;
          }
          unint64_t v17 = v13 + 1;
          unsigned int v12 = v15[v13++];
          if (!v12) {
            goto LABEL_24;
          }
        }
      }
      uint64_t v14 = v10;
      unint64_t v17 = 0;
LABEL_24:
      uint64_t v18 = *(void *)(*(void *)(v30 + 32) + 8 * DigitExtended);
      if (*(void *)(v30 + 64) && (v17 > 4 || v17 == 3))
      {
        uint64_t v19 = (TVertex *)TGraph::addVertex(this, 0);
        addSequence(*(const __int32 ***)(v30 + 64), a3, v19, this, a6, 0, 0, 0);
        uint64_t v10 = v14 + 3;
        unsigned int v20 = v14[3];
        goto LABEL_44;
      }
      if (v17 >= 2 && *(void *)(v30 + 56))
      {
        uint64_t v19 = (TVertex *)TGraph::addVertex(this, 0);
        addSequence(*(const __int32 ***)(v30 + 56), a3, v19, this, a6, 0, 0, 0);
        uint64_t v10 = v14 + 2;
        unsigned int v20 = v14[2];
LABEL_44:
        uint64_t v21 = a4;
        if (v20) {
          uint64_t v21 = (TVertex *)TGraph::addVertex(this, 0);
        }
LABEL_48:
        uint64_t result = addSequence((const __int32 **)v18, v19, v21, this, a6, 0, 0, 0);
        goto LABEL_49;
      }
      uint64_t v28 = &v14[v17];
      uint64_t v21 = a4;
      if (*v28) {
        uint64_t v21 = (TVertex *)TGraph::addVertex(this, 0);
      }
      uint64_t result = (const char *)wcscmp(*(const __int32 **)(v18 + 8), (const __int32 *)"A");
      if (result)
      {
        if (v17)
        {
          unint64_t v22 = v17 - 1;
          if (v17 == 1)
          {
            uint64_t v19 = a3;
            uint64_t v10 = &v14[v17];
          }
          else
          {
            uint64_t v10 = &v14[v17];
            do
            {
              uint64_t v19 = (TVertex *)TGraph::addVertex(this, 0);
              addSequence((const __int32 **)v18, a3, v19, this, a6, 0, 0, 0);
              a3 = v19;
              --v22;
            }
            while (v22);
          }
          goto LABEL_48;
        }
      }
      else
      {
        for (uint64_t i = *(long long **)(v18 + 24); i; uint64_t i = (long long *)*((void *)i + 2))
        {
          unint64_t v24 = v17;
          for (unint64_t j = a3; v24; --v24)
          {
            uint64_t v26 = v21;
            if (v24 != 1) {
              uint64_t v26 = (TVertex *)TGraph::addVertex(this, 0);
            }
            long long v27 = i[1];
            long long v31 = *i;
            long long v32 = v27;
            long long v33 = i[2];
            *(void *)&long long v32 = 0;
            uint64_t result = addSequence((const __int32 **)&v31, j, v26, this, a6, 0, 0, 0);
            unint64_t j = v26;
          }
        }
      }
      uint64_t v10 = v28;
LABEL_49:
      unsigned int v6 = *v10;
      a3 = v21;
    }
    while (*v10);
  }
  return result;
}

void sub_213E97768(_Unwind_Exception *a1)
{
  MEMORY[0x216698730](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

const char *addSequence(const __int32 **a1, TVertex *a2, TVertex *a3, TGraph *a4, TLexicon *a5, const char *a6, const char *a7, const char *a8)
{
  unint64_t v13 = (const TFileObject *)a1;
  if (wcscmp(a1[1], (const __int32 *)"S") || (unint64_t v13 = (const TFileObject *)*((void *)v13 + 3)) != 0)
  {
    while (!wcscmp(*((const __int32 **)v13 + 1), (const __int32 *)"S"))
    {
LABEL_37:
      unint64_t v13 = (const TFileObject *)*((void *)v13 + 2);
      if (!v13) {
        return a7;
      }
    }
    uint64_t v14 = *((void *)v13 + 2);
    uint64_t v15 = a3;
    int v16 = a7;
    if (v14)
    {
      if (!wcscmp(*(const __int32 **)(v14 + 8), (const __int32 *)"S"))
      {
        do
        {
          uint64_t v18 = v14;
          uint64_t v14 = *(void *)(v14 + 16);
          if (!v14)
          {
            uint64_t v15 = a3;
            goto LABEL_7;
          }
        }
        while (!wcscmp(*(const __int32 **)(v14 + 8), (const __int32 *)"S"));
        if (a6)
        {
          BOOL v27 = 0;
          uint64_t v19 = *(unsigned int **)(v18 + 24);
          {
            operator new();
          }
          unsigned int v20 = &a6[TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v19, &v27)];
          while (v20 > a7)
          {
            int v21 = *--v20;
            uint64_t v22 = v21;
            if (v21 < 0)
            {
              if (!__maskrune(v22, 0x4000uLL))
              {
LABEL_22:
                int v16 = v20 + 1;
                if (v20 + 1 >= a8) {
                  break;
                }
                uint64_t v15 = (TVertex *)TGraph::addVertex(a4, (char *)v20 + 1);
                if (a8) {
                  goto LABEL_9;
                }
                goto LABEL_24;
              }
            }
            else if ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v22 + 60) & 0x4000) == 0)
            {
              goto LABEL_22;
            }
          }
        }
      }
      uint64_t v15 = (TVertex *)TGraph::addVertex(a4, 0);
LABEL_7:
      int v16 = a7;
    }
    if (a8)
    {
LABEL_9:
      if (*((void *)v15 + 3)) {
        unint64_t v17 = (const char *)*((void *)v15 + 3);
      }
      else {
        unint64_t v17 = a8;
      }
    }
    else
    {
LABEL_24:
      unint64_t v17 = 0;
    }
    if (!wcscmp(*((const __int32 **)v13 + 1), (const __int32 *)"T"))
    {
      addToken((__int32 **)v13, a2, v15, a4, a5);
    }
    else
    {
      if (!wcscmp(*((const __int32 **)v13 + 1), (const __int32 *)"A"))
      {
        long long v23 = addAlt(v13, a2, v15, a4, a5, a6, a7, v17);
        goto LABEL_32;
      }
      if (!wcscmp(*((const __int32 **)v13 + 1), (const __int32 *)"P"))
      {
        addPattern((uint64_t)v13, (uint64_t)a2, (uint64_t)v15, (uint64_t)a4, (uint64_t)a5);
        goto LABEL_34;
      }
      if (!wcscmp(*((const __int32 **)v13 + 1), (const __int32 *)"S"))
      {
        long long v23 = (const char *)addSequence(v13, a2, v15, a4, a5, a6, a7, v17);
LABEL_32:
        a7 = v23;
      }
    }
LABEL_34:
    if (v16 > a7) {
      a7 = v16;
    }
    a2 = v15;
    goto LABEL_37;
  }
  return a7;
}

void sub_213E97A80(_Unwind_Exception *a1)
{
  MEMORY[0x216698730](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

void TRomanObject::TRomanObject(TRomanObject *this, const TFileObject *a2, TLexicon *a3, TAllocator *a4)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  *((void *)this + 1) = 0;
  unsigned int v7 = (char *)this + 8;
  *((void *)this + 4) = 0;
  uint64_t v8 = (void *)((char *)this + 32);
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *(void *)this = &unk_26C4DFCB0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  int v21 = "I";
  int64x2_t v22 = vdupq_n_s64(1uLL);
  uint64_t v23 = -1;
  unint64_t v24 = "V";
  int64x2_t v25 = v22;
  uint64_t v26 = -1;
  BOOL v27 = "X";
  int64x2_t v28 = v22;
  uint64_t v29 = -1;
  uint64_t v30 = "L";
  int64x2_t v31 = v22;
  uint64_t v32 = -1;
  long long v33 = "C";
  int64x2_t v34 = v22;
  uint64_t v35 = -1;
  int64x2_t v36 = "D";
  int64x2_t v37 = v22;
  uint64_t v38 = -1;
  int64x2_t v39 = "M";
  int64x2_t v40 = v22;
  uint64_t v41 = -1;
  int64x2_t v42 = "N";
  long long v43 = xmmword_214085120;
  uint64_t v44 = -1;
  if (TFileObject::verify((uint64_t)a2, (uint64_t)&v21, 8uLL, 1))
  {
    std::string::basic_string[abi:ne180100]<0>(v17, &byte_2140B33BB);
    *(void *)__p = byte_26C4DF190;
    if (SHIBYTE(v18) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v17[0], (std::string::size_type)v17[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v17;
      uint64_t v20 = v18;
    }
    *(void *)__p = &unk_26C4E0710;
    if (v20 >= 0) {
      unint64_t v13 = &__p[8];
    }
    else {
      unint64_t v13 = *(const char **)&__p[8];
    }
    conditionalAssert(v13, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/patternmgr.cpp", 594, v11, v12);
    *(void *)__p = byte_26C4DF190;
    if (SHIBYTE(v20) < 0) {
      operator delete(*(void **)&__p[8]);
    }
    if (SHIBYTE(v18) < 0) {
      operator delete(v17[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
    void *exception = byte_26C4DF190;
    uint64_t v15 = (std::string *)(exception + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      long long v16 = *(_OWORD *)__p;
      exception[3] = *(void *)&__p[16];
      *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
    }
    void *exception = &unk_26C4E0710;
  }
  *(void *)__p = 0;
  std::vector<TSegment const*>::resize((uint64_t)v8, 7uLL, __p);
  for (uint64_t i = *((void *)a2 + 3); i; uint64_t i = *(void *)(i + 16))
  {
    if (!wcscmp(*(const __int32 **)(i + 8), (const __int32 *)"N"))
    {
      MEMORY[0x216698480](v7, *(void *)(i + 24));
    }
    else
    {
      int64_t v10 = (char *)wcschr((__int32 *)"I", **(_DWORD **)(i + 8)) - "I";
      *(void *)(*v8 + 8 * (v10 >> 2)) = compileAlt((const TFileObject *)i, *(TFileObject **)(*v8 + 2 * v10), a3, a4);
    }
  }
}

void sub_213E97E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v30 & 1) == 0)
    {
LABEL_6:
      uint64_t v32 = *v28;
      if (*v28)
      {
        *(void *)(v25 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = v32;
        operator delete(v32);
      }
      *(void *)uint64_t v25 = v27;
      if (*(char *)(v25 + 31) < 0) {
        operator delete(*v26);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v30)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v29);
  goto LABEL_6;
}

uint64_t TRomanObject::build(uint64_t a1, unsigned int *a2, TVertex *a3, TVertex *a4, TGraph *a5, TLexicon *a6)
{
  BOOL v24 = 0;
  {
    operator new();
  }
  unsigned int v12 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a2, &v24);
  uint64_t v20 = v22;
  long long v21 = xmmword_214085190;
  char v23 = 1;
  uint64_t result = arabicToRoman(v12, (uint64_t)&v20);
  if (*((void *)&v21 + 1) >= (unint64_t)v21)
  {
    if (v23)
    {
      v25[0] = 0;
      uint64_t result = TBuffer<wchar_t>::insert((uint64_t)&v20, *((unint64_t *)&v21 + 1), v25, 1uLL);
      uint64_t v14 = v20;
      --*((void *)&v21 + 1);
    }
    else
    {
      uint64_t v14 = v20;
      if ((void)v21) {
        *(_DWORD *)&v20[4 * v21 - 4] = 0;
      }
    }
  }
  else
  {
    uint64_t v14 = v20;
    *(_DWORD *)&v20[4 * *((void *)&v21 + 1)] = 0;
  }
  for (uint64_t i = v14 + 4; ; ++i)
  {
    __int32 v16 = *(i - 1);
    if (!v16) {
      break;
    }
    unint64_t v17 = wcschr((__int32 *)"I", v16);
    uint64_t v18 = a4;
    if (*i) {
      uint64_t v18 = (TVertex *)TGraph::addVertex(a5, 0);
    }
    uint64_t result = (uint64_t)addSequence(*(const __int32 ***)(*(void *)(a1 + 32) + 2 * ((char *)v17 - "I")), a3, v18, a5, a6, 0, 0, 0);
    a3 = v18;
  }
  if (v23)
  {
    uint64_t result = (uint64_t)v20;
    if (v20 != v22 && v20 != 0) {
      return MEMORY[0x216698730]();
    }
  }
  return result;
}

void sub_213E980D4(_Unwind_Exception *a1)
{
  MEMORY[0x216698730](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TCountingObject::TCountingObject(uint64_t a1, uint64_t a2, uint64_t *a3, TLexicon *a4, TAllocator *a5)
{
  unsigned int v7 = (uint64_t *)a2;
  uint64_t v118 = *MEMORY[0x263EF8340];
  *(void *)(a1 + 8) = 0;
  uint64_t v73 = a1 + 8;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_26C4E0F10;
  uint64_t v79 = "E";
  long long v80 = xmmword_214085170;
  uint64_t v81 = -1;
  uint64_t v82 = "I";
  long long v83 = xmmword_214085170;
  uint64_t v84 = -1;
  uint64_t v85 = "N";
  long long v86 = xmmword_214085170;
  uint64_t v87 = -1;
  uint64_t v88 = "Z";
  long long v89 = xmmword_214085170;
  uint64_t v90 = -1;
  uint64_t v91 = "D";
  long long v92 = xmmword_214085120;
  uint64_t v93 = -1;
  uint64_t v94 = "C";
  long long v95 = xmmword_214085120;
  uint64_t v96 = -1;
  uint64_t v97 = "C";
  long long v98 = xmmword_214085120;
  uint64_t v99 = -1;
  uint64_t v100 = "L";
  long long v101 = xmmword_214085140;
  uint64_t v102 = -1;
  uint64_t v103 = "L";
  uint64_t v104 = 2;
  long long v105 = xmmword_214085130;
  uint64_t v106 = "E";
  uint64_t v107 = 2;
  long long v108 = xmmword_214085130;
  uint64_t v109 = "E";
  uint64_t v110 = 2;
  long long v111 = xmmword_214085130;
  unint64_t v112 = "W";
  uint64_t v113 = 2;
  long long v114 = xmmword_214085130;
  unint64_t v115 = "N";
  uint64_t v116 = 0;
  long long v117 = xmmword_214085130;
  int v9 = TFileObject::verify(a2, (uint64_t)&v79, 0xDuLL, 1);
  char v78 = v9;
  if (v9)
  {
    std::string::basic_string[abi:ne180100]<0>(v74, &byte_2140B33BB);
    *(void *)__p = byte_26C4DF190;
    if (SHIBYTE(v75) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v74[0], (std::string::size_type)v74[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v74;
      uint64_t v77 = v75;
    }
    *(void *)__p = &unk_26C4E0710;
    if (v77 >= 0) {
      uint64_t v59 = &__p[8];
    }
    else {
      uint64_t v59 = *(const char **)&__p[8];
    }
    conditionalAssert(v59, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/patternmgr.cpp", 740, v53, v54);
    *(void *)__p = byte_26C4DF190;
    if (SHIBYTE(v77) < 0) {
      operator delete(*(void **)&__p[8]);
    }
    if (SHIBYTE(v75) < 0) {
      operator delete(v74[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
    void *exception = byte_26C4DF190;
    long long v61 = (std::string *)(exception + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v61, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      long long v68 = *(_OWORD *)__p;
      exception[3] = *(void *)&__p[16];
      *(_OWORD *)&v61->__r_.__value_.__l.__data_ = v68;
    }
    void *exception = &unk_26C4E0710;
  }
  *(_OWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0u;
  *(_OWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = 0u;
  int64_t v10 = (TFileObject **)(a1 + 96);
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 112) = 0u;
  *(void *)(a1 + DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)this + 128) = 3;
  *(unsigned char *)(a1 + 136) = 0;
  uint64_t v11 = v7[3];
  if (v11)
  {
    uint64_t v71 = v7;
    int v12 = 0;
    while (1)
    {
      if (!wcscmp(*(const __int32 **)(v11 + 8), (const __int32 *)"N"))
      {
        MEMORY[0x216698480](v73, *(void *)(v11 + 24));
      }
      else
      {
        if (!wcscmp(*(const __int32 **)(v11 + 8), (const __int32 *)"E"))
        {
          uint64_t v14 = *v10;
          uint64_t v15 = compileAlt((const TFileObject *)v11, *v10, a4, a5);
          if (!v14) {
            ++v12;
          }
          *int64_t v10 = v15;
          goto LABEL_50;
        }
        if (!wcscmp(*(const __int32 **)(v11 + 8), (const __int32 *)"I"))
        {
          __int32 v16 = *(TFileObject **)(a1 + 104);
          unint64_t v17 = compileAlt((const TFileObject *)v11, v16, a4, a5);
          if (!v16) {
            ++v12;
          }
          *(void *)(a1 + 104) = v17;
          goto LABEL_50;
        }
        if (!wcscmp(*(const __int32 **)(v11 + 8), (const __int32 *)"N"))
        {
          uint64_t v18 = *(TFileObject **)(a1 + 112);
          uint64_t v19 = compileAlt((const TFileObject *)v11, v18, a4, a5);
          if (!v18) {
            ++v12;
          }
          *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 112) = v19;
          goto LABEL_50;
        }
        if (!wcscmp(*(const __int32 **)(v11 + 8), (const __int32 *)"Z"))
        {
          uint64_t v20 = *(TFileObject **)(a1 + 120);
          long long v21 = compileAlt((const TFileObject *)v11, v20, a4, a5);
          if (!v20) {
            ++v12;
          }
          *(void *)(a1 + 120) = v21;
          goto LABEL_50;
        }
        if (!wcscmp(*(const __int32 **)(v11 + 8), (const __int32 *)"D"))
        {
          if (TFileObject::verify((TFileObject *)v11, 0, 0))
          {
            std::string::basic_string[abi:ne180100]<0>(v74, &byte_2140B33BB);
            *(void *)__p = byte_26C4DF190;
            if (SHIBYTE(v75) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v74[0], (std::string::size_type)v74[1]);
            }
            else
            {
              *(_OWORD *)&__p[8] = *(_OWORD *)v74;
              uint64_t v77 = v75;
            }
            *(void *)__p = &unk_26C4E0710;
            if (v77 >= 0) {
              unint64_t v65 = &__p[8];
            }
            else {
              unint64_t v65 = *(const char **)&__p[8];
            }
            conditionalAssert(v65, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/patternmgr.cpp", 787, v57, v58);
            *(void *)__p = byte_26C4DF190;
            if (SHIBYTE(v77) < 0) {
              operator delete(*(void **)&__p[8]);
            }
            if (SHIBYTE(v75) < 0) {
              operator delete(v74[0]);
            }
            uint64_t v66 = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
            *uint64_t v66 = byte_26C4DF190;
            long long v67 = (std::string *)(v66 + 1);
            if ((__p[23] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external(v67, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
            }
            else
            {
              long long v70 = *(_OWORD *)__p;
              v66[3] = *(void *)&__p[16];
              *(_OWORD *)&v67->__r_.__value_.__l.__data_ = v70;
            }
            *uint64_t v66 = &unk_26C4E0710;
          }
          if (wcscmp(*(const __int32 **)(v11 + 24), (const __int32 *)"I"))
          {
            int64x2_t v22 = *(unsigned int **)(v11 + 24);
            {
              operator new();
            }
            unsigned int v23 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v22, (BOOL *)&v78);
            *(void *)(a1 + DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)this + 128) = v23;
            if (v23 - 2 <= 2 && !v78) {
              goto LABEL_50;
            }
            loggableFileObject((uint64_t *)v11);
            int64x2_t v28 = __p;
            if (__p[23] < 0) {
              int64x2_t v28 = *(unsigned char **)__p;
            }
            tknPrintf("Error: %sValue is out of range, must be 2, 3, 4, or I\n", v24, v25, v26, v27, v28);
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
            BOOL v29 = 1;
            goto LABEL_49;
          }
          *(void *)(a1 + DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)this + 128) = 7;
          *(unsigned char *)(a1 + 136) = 1;
        }
        else
        {
          if (!wcscmp(*(const __int32 **)(v11 + 8), (const __int32 *)"C"))
          {
            uint64_t Array = TCountingObject::getArray(0, (const __int32 **)v11, a3);
            *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = Array;
            goto LABEL_48;
          }
          if (!wcscmp(*(const __int32 **)(v11 + 8), (const __int32 *)"C"))
          {
            uint64_t Array = TCountingObject::getArray(0, (const __int32 **)v11, a3);
            *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = Array;
            goto LABEL_48;
          }
          if (!wcscmp(*(const __int32 **)(v11 + 8), (const __int32 *)"L"))
          {
            uint64_t Array = TCountingObject::getArray(0, (const __int32 **)v11, a3);
            *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = Array;
            goto LABEL_48;
          }
          if (!wcscmp(*(const __int32 **)(v11 + 8), (const __int32 *)"L"))
          {
            uint64_t Array = TCountingObject::getArray(0, (const __int32 **)v11, a3);
            *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = Array;
            goto LABEL_48;
          }
          if (!wcscmp(*(const __int32 **)(v11 + 8), (const __int32 *)"E"))
          {
            uint64_t Array = TCountingObject::getArray(0, (const __int32 **)v11, a3);
            *(void *)(a1 + 64) = Array;
            goto LABEL_48;
          }
          if (!wcscmp(*(const __int32 **)(v11 + 8), (const __int32 *)"E"))
          {
            uint64_t Array = TCountingObject::getArray(0, (const __int32 **)v11, a3);
            *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = Array;
            goto LABEL_48;
          }
          if (!wcscmp(*(const __int32 **)(v11 + 8), (const __int32 *)"W"))
          {
            uint64_t Array = TCountingObject::getArray(0, (const __int32 **)v11, a3);
            *(void *)(a1 + 80) = Array;
LABEL_48:
            BOOL v29 = v78 | (Array == 0);
LABEL_49:
            char v78 = v29;
          }
        }
      }
LABEL_50:
      uint64_t v11 = *(void *)(v11 + 16);
      if (!v11)
      {
        BOOL v30 = v12 < 2;
        unsigned int v7 = v71;
        if (!v30)
        {
          loggableFileObject(v71);
          if (__p[23] >= 0) {
            uint64_t v35 = __p;
          }
          else {
            uint64_t v35 = *(unsigned char **)__p;
          }
          tknPrintf("Error: %sAttributes EnxAnd, ItaAnd, NldAnd, and ZhoZero are exclusive\n", v31, v32, v33, v34, v35);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
          char v78 = 1;
        }
        break;
      }
    }
  }
  *(void *)(a1 + 88) = 0;
  int64x2_t v36 = *(const TArrayObject **)(a1 + 32);
  if (v36)
  {
    int64x2_t v37 = *(const TArrayObject **)(a1 + 40);
    if (v37)
    {
      unint64_t v38 = (((uint64_t)(*((void *)v37 + 5) - *((void *)v37 + 4)) >> 3)
           / (unint64_t)(10 * *(void *)(a1 + 128))
           + 2)
          * *(void *)(a1 + 128);
      *(void *)(a1 + 88) = v38;
      if (*(unsigned char *)(a1 + 136)) {
        *(void *)(a1 + 88) = v38 - 2;
      }
      char v39 = TCountingObject::checkChunk((TCountingObject *)a1, (const TFileObject *)v7, v36, v37);
      v78 |= v39;
      char v40 = TCountingObject::checkMagnitude((TCountingObject *)a1, (const TFileObject *)v7, *(const TArrayObject **)(a1 + 40));
      v78 |= v40;
    }
  }
  uint64_t v41 = *(const TArrayObject **)(a1 + 48);
  if (v41)
  {
    int64x2_t v42 = *(const TArrayObject **)(a1 + 56);
    if (v42)
    {
      unint64_t v43 = (((uint64_t)(*((void *)v42 + 5) - *((void *)v42 + 4)) >> 3)
           / (unint64_t)(10 * *(void *)(a1 + 128))
           + 2)
          * *(void *)(a1 + 128);
      if (*(unsigned char *)(a1 + 136)) {
        v43 -= 2;
      }
      if (v43 >= *(void *)(a1 + 88)) {
        unint64_t v43 = *(void *)(a1 + 88);
      }
      *(void *)(a1 + 88) = v43;
      char v44 = TCountingObject::checkChunk((TCountingObject *)a1, (const TFileObject *)v7, v41, v42);
      v78 |= v44;
      char v45 = TCountingObject::checkMagnitude((TCountingObject *)a1, (const TFileObject *)v7, *(const TArrayObject **)(a1 + 56));
      v78 |= v45;
    }
  }
  uint64_t v46 = *(const TArrayObject **)(a1 + 64);
  if (v46 && (uint64_t v47 = *(const TArrayObject **)(a1 + 72)) != 0)
  {
    unint64_t v48 = (((uint64_t)(*((void *)v47 + 5) - *((void *)v47 + 4)) >> 3)
         / (unint64_t)(10 * *(void *)(a1 + 128))
         + 2)
        * *(void *)(a1 + 128);
    if (*(unsigned char *)(a1 + 136)) {
      v48 -= 2;
    }
    if (v48 >= *(void *)(a1 + 88)) {
      unint64_t v48 = *(void *)(a1 + 88);
    }
    *(void *)(a1 + 88) = v48;
    char v49 = TCountingObject::checkChunk((TCountingObject *)a1, (const TFileObject *)v7, v46, v47);
    v78 |= v49;
    char v50 = TCountingObject::checkMagnitude((TCountingObject *)a1, (const TFileObject *)v7, *(const TArrayObject **)(a1 + 72));
    char v51 = v78 | v50;
    v78 |= v50;
  }
  else
  {
    char v51 = v78;
  }
  if (v51)
  {
    std::string::basic_string[abi:ne180100]<0>(v74, &byte_2140B33BB);
    *(void *)__p = byte_26C4DF190;
    if (SHIBYTE(v75) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v74[0], (std::string::size_type)v74[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v74;
      uint64_t v77 = v75;
    }
    *(void *)__p = &unk_26C4E0710;
    if (v77 >= 0) {
      uint64_t v62 = &__p[8];
    }
    else {
      uint64_t v62 = *(const char **)&__p[8];
    }
    conditionalAssert(v62, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/patternmgr.cpp", 897, v55, v56);
    *(void *)__p = byte_26C4DF190;
    if (SHIBYTE(v77) < 0) {
      operator delete(*(void **)&__p[8]);
    }
    if (SHIBYTE(v75) < 0) {
      operator delete(v74[0]);
    }
    uint64_t v63 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
    *uint64_t v63 = byte_26C4DF190;
    long long v64 = (std::string *)(v63 + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v64, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      long long v69 = *(_OWORD *)__p;
      v63[3] = *(void *)&__p[16];
      *(_OWORD *)&v64->__r_.__value_.__l.__data_ = v69;
    }
    *uint64_t v63 = &unk_26C4E0710;
  }
  return a1;
}

void sub_213E98D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,void *a22,int a23,__int16 a24,char a25,char a26,int a27,__int16 a28,char a29,char a30)
{
  MEMORY[0x216698730](a10, 0x1070C40ADD13FEBLL);
  *(void *)uint64_t v30 = a11;
  if (*(char *)(v30 + 31) < 0) {
    operator delete(*a14);
  }
  _Unwind_Resume(a1);
}

uint64_t TCountingObject::getArray(int a1, const __int32 **this, uint64_t *a3)
{
  if (TFileObject::verify((TFileObject *)this, 0, 0))
  {
    std::string::basic_string[abi:ne180100]<0>(v21, &byte_2140B33BB);
    *(void *)__p = byte_26C4DF190;
    if (SHIBYTE(v22) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v21[0], (std::string::size_type)v21[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v21;
      uint64_t v24 = v22;
    }
    *(void *)__p = &unk_26C4E0710;
    if (v24 >= 0) {
      unint64_t v17 = &__p[8];
    }
    else {
      unint64_t v17 = *(const char **)&__p[8];
    }
    conditionalAssert(v17, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/tkn/patternmgr.cpp", 905, v15, v16);
    *(void *)__p = byte_26C4DF190;
    if (SHIBYTE(v24) < 0) {
      operator delete(*(void **)&__p[8]);
    }
    if (SHIBYTE(v22) < 0) {
      operator delete(v21[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
    void *exception = byte_26C4DF190;
    uint64_t v19 = (std::string *)(exception + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      long long v20 = *(_OWORD *)__p;
      exception[3] = *(void *)&__p[16];
      *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
    }
    void *exception = &unk_26C4E0710;
  }
  uint64_t v5 = *a3;
  if (a3[1] == *a3)
  {
LABEL_8:
    loggableFileObject((uint64_t *)this);
    if (__p[23] >= 0) {
      unint64_t v13 = __p;
    }
    else {
      unint64_t v13 = *(unsigned char **)__p;
    }
    tknPrintf("Error: %sArray name does not exist\n", v9, v10, v11, v12, v13);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    return 0;
  }
  else
  {
    unint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = *(void *)(v5 + 8 * v6);
      uint64_t v8 = (const __int32 *)(v7 + 8);
      if (*(char *)(v7 + 31) < 0) {
        uint64_t v8 = *(const __int32 **)v8;
      }
      if (!wcscmp(this[3], v8)) {
        return *(void *)(*a3 + 8 * v6);
      }
      ++v6;
      uint64_t v5 = *a3;
      if (v6 >= (a3[1] - *a3) >> 3) {
        goto LABEL_8;
      }
    }
  }
}

void sub_213E99098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

uint64_t TCountingObject::checkChunk(TCountingObject *this, const TFileObject *a2, const TArrayObject *a3, const TArrayObject *a4)
{
  char v8 = TArrayObject::checkNoGap(a3, 0, 0xAuLL);
  unint64_t v9 = *((void *)this + 16);
  if (v9 >= 2)
  {
    unint64_t v10 = 100;
    unint64_t v11 = 1;
    unint64_t v12 = 10;
    do
    {
      uint64_t v13 = *((void *)a4 + 4);
      if (10 * v11 >= (*((void *)a4 + 5) - v13) >> 3 || !*(void *)(v13 + 80 * v11))
      {
        BOOL v14 = *((unsigned char *)this + 136) && (v11 & 0xFFFFFFFFFFFFFFFDLL) == 4;
        if (!v14 && v12 < v10)
        {
          do
          {
            uint64_t v16 = *((void *)a3 + 4);
            if (v12 >= (*((void *)a3 + 5) - v16) >> 3 || !*(void *)(v16 + 8 * v12))
            {
              loggableFileObject((uint64_t *)a2);
              if (v24 >= 0) {
                p_p = &__p;
              }
              else {
                p_p = __p;
              }
              tknPrintf("Error: %sCannot make spoken form for '%llu'\n", v17, v18, v19, v20, p_p, v12);
              if (v24 < 0) {
                operator delete(__p);
              }
              char v8 = 1;
            }
            ++v12;
          }
          while (v10 != v12);
          unint64_t v9 = *((void *)this + 16);
        }
      }
      unint64_t v12 = v10;
      v10 *= 10;
      v11 += 2;
    }
    while (v11 < v9);
  }
  return v8 & 1;
}

void sub_213E99258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TCountingObject::checkMagnitude(TCountingObject *this, const TFileObject *a2, const TArrayObject *a3)
{
  if (*(void *)a2) {
    unint64_t v6 = *(void *)(*(void *)a2 + 72);
  }
  else {
    unint64_t v6 = 3;
  }
  uint64_t v7 = *((void *)a3 + 4);
  unint64_t v8 = (*((void *)a3 + 5) - v7) >> 3;
  if (v8 > 10 * *((void *)this + 16)
    && (uint64_t v9 = 10 * *((void *)this + 16), *(void *)(v7 + 80 * *((void *)this + 16))))
  {
    char v10 = 0;
  }
  else
  {
    loggableFileObject((uint64_t *)a2);
    if (v35 >= 0) {
      uint64_t v15 = __p;
    }
    else {
      uint64_t v15 = (void **)__p[0];
    }
    tknPrintf("Error: %sMagnitude '%llu' hasn't been specified and is needed\n", v11, v12, v13, v14, v15, 10 * *((void *)this + 16));
    if (v35 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = *((void *)a3 + 4);
    uint64_t v9 = 10 * *((void *)this + 16);
    unint64_t v8 = (*((void *)a3 + 5) - v7) >> 3;
    char v10 = 1;
  }
  for (unint64_t i = v9 + 10; i < v8; ++i)
  {
    unint64_t v17 = *((void *)this + 16);
    if (i % (10 * v17))
    {
      if (i / 0xA % v17 && *(void *)(v7 + 8 * i))
      {
        if (v6 < 3)
        {
          loggableFileObject((uint64_t *)a2);
          if (v35 >= 0) {
            uint64_t v32 = __p;
          }
          else {
            uint64_t v32 = (void **)__p[0];
          }
          tknPrintf("Warning: %sMagnitude '%llu' is not supported\n", v28, v29, v30, v31, v32, i);
          if (v35 < 0) {
            operator delete(__p[0]);
          }
          goto LABEL_38;
        }
        loggableFileObject((uint64_t *)a2);
        if (v35 >= 0) {
          uint64_t v22 = __p;
        }
        else {
          uint64_t v22 = (void **)__p[0];
        }
        tknPrintf("Error: %sMagnitude '%llu' is not supported\n", v18, v19, v20, v21, v22, i);
        goto LABEL_30;
      }
    }
    else if (!*(void *)(v7 + 8 * i) {
           && (v8 <= i + 10 * v17 || !*(void *)(v7 + 80 * v17 + 8 * i) || *((unsigned char *)this + 136)))
    }
    {
      loggableFileObject((uint64_t *)a2);
      if (v35 >= 0) {
        uint64_t v27 = __p;
      }
      else {
        uint64_t v27 = (void **)__p[0];
      }
      tknPrintf("Error: %sMagnitude '%llu' hasn't been specified and is needed\n", v23, v24, v25, v26, v27, i);
LABEL_30:
      if (v35 < 0) {
        operator delete(__p[0]);
      }
      char v10 = 1;
    }
LABEL_38:
    uint64_t v7 = *((void *)a3 + 4);
    unint64_t v8 = (*((void *)a3 + 5) - v7) >> 3;
  }
  return v10 & 1;
}

void sub_213E994BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TCountingObject::getChunk(TCountingObject *this, int a2, int a3, unint64_t a4)
{
  if ((!a3 || (uint64_t v4 = *((void *)this + 8)) == 0) && (!a2 || (uint64_t v4 = *((void *)this + 6)) == 0)) {
    uint64_t v4 = *((void *)this + 4);
  }
  uint64_t v6 = v4 + 32;
  uint64_t v5 = *(void *)(v4 + 32);
  if (a4 >= (*(void *)(v6 + 8) - v5) >> 3) {
    return 0;
  }
  else {
    return *(void *)(v5 + 8 * a4);
  }
}

uint64_t TCountingObject::getMagnitude(TCountingObject *this, int a2, int a3, uint64_t a4, unint64_t a5)
{
  if (a5 > 9) {
    return 0;
  }
  unint64_t v5 = a5 + 10 * a4;
  if ((!a3 || (uint64_t v6 = *((void *)this + 9)) == 0) && (!a2 || (uint64_t v6 = *((void *)this + 7)) == 0)) {
    uint64_t v6 = *((void *)this + 5);
  }
  uint64_t v8 = v6 + 32;
  uint64_t v7 = *(void *)(v6 + 32);
  if (v5 >= (*(void *)(v8 + 8) - v7) >> 3) {
    return 0;
  }
  else {
    return *(void *)(v7 + 8 * v5);
  }
}

const __int32 **TCountingObject::addHundredChunk(TCountingObject *this, unint64_t a2, int a3, int a4, int a5, int a6, TVertex *a7, TVertex *a8, TGraph *a9, TLexicon *a10)
{
  BOOL v16 = 0;
  if (a2 && a3) {
    BOOL v16 = a2 <= 0x63 && *((void *)this + 12) || a2 < 0xD && *((void *)this + 14) != 0;
  }
  BOOL v18 = 0;
  if (a2 && a4) {
    BOOL v18 = *((void *)this + 15) != 0;
  }
  BOOL v74 = v18;
  uint64_t v19 = (const __int32 **)*((void *)this + 12);
  if (!v19) {
    uint64_t v19 = (const __int32 **)*((void *)this + 14);
  }
  uint64_t v73 = v19;
  uint64_t v21 = a9;
  uint64_t v20 = a10;
  uint64_t v72 = (const __int32 **)*((void *)this + 15);
  uint64_t result = (const __int32 **)TCountingObject::getChunk(this, a5, a6, a2);
  if (result)
  {
    uint64_t v23 = result;
    uint64_t result = (const __int32 **)addSequence(result, a7, a8, a9, a10, 0, 0, 0);
    if (!v16 && !v74) {
      return result;
    }
    if (v16) {
      uint64_t v24 = v73;
    }
    else {
      uint64_t v24 = v72;
    }
    uint64_t v25 = (TVertex *)TGraph::addVertex(a9, 0);
    addSequence(v24, a7, v25, a9, a10, 0, 0, 0);
    uint64_t v26 = v23;
    uint64_t v27 = v25;
    goto LABEL_59;
  }
  BOOL v69 = v16;
  BOOL v70 = a6;
  long long v68 = a7;
  if (a2 < 0xA)
  {
    uint64_t v28 = 0;
    unint64_t v29 = 1;
    unint64_t v30 = a2;
    int v31 = a5;
    goto LABEL_42;
  }
  uint64_t v28 = 1;
  unint64_t v29 = 1;
  unint64_t v30 = a2;
  int v31 = a5;
  while (v30 > 0x63 || !*((unsigned char *)this + 136))
  {
    v29 *= 10;
    unint64_t v32 = v30 / 0xA;
    ++v28;
    BOOL v33 = v30 > 0x63;
    v30 /= 0xAuLL;
    if (!v33)
    {
      --v28;
      unint64_t v30 = v32;
      goto LABEL_42;
    }
  }
  if (v28 != 6)
  {
    if (v28 == 4)
    {
      unint64_t v34 = v30 / 0xAu + 40;
      uint64_t v35 = *(void *)(*((void *)this + 5) + 32);
      uint64_t v36 = *(void *)(*((void *)this + 5) + 40) - v35;
      if ((v34 >= v36 >> 3 || !*(void *)(v35 + 8 * v34))
        && ((unint64_t)v36 < 0x141 || !*(void *)(v35 + 320)))
      {
        uint64_t v28 = 3;
        goto LABEL_42;
      }
    }
    goto LABEL_41;
  }
  unint64_t v37 = v30 / 0xAu + 60;
  uint64_t v38 = *(void *)(*((void *)this + 5) + 32);
  uint64_t v39 = *(void *)(*((void *)this + 5) + 40) - v38;
  if (v37 < v39 >> 3 && *(void *)(v38 + 8 * v37) || (unint64_t)v39 >= 0x1E1 && *(void *)(v38 + 480))
  {
LABEL_41:
    v29 *= 10;
    unint64_t v30 = v30 / 0xAu;
    goto LABEL_42;
  }
  uint64_t v28 = 5;
LABEL_42:
  if (a2 == v29 * v30)
  {
    char v40 = a8;
  }
  else
  {
    uint64_t v41 = (TVertex *)TGraph::addVertex(a9, 0);
    uint64_t result = (const __int32 **)TCountingObject::addHundredChunk(this, a2 - v29 * v30, v28 == 2, 0, 0, v70, v41, a8, a9, a10);
    if (*((void *)this + 15) && a2 - v29 * v30 < v29 / 0xA)
    {
      char v40 = (TVertex *)TGraph::addVertex(a9, 0);
      uint64_t result = (const __int32 **)addSequence(*((const __int32 ***)this + 15), v40, v41, a9, a10, 0, 0, 0);
    }
    else
    {
      char v40 = v41;
    }
  }
  if (v30)
  {
    uint64_t v71 = v40;
    int v42 = a2 == v29 * v30 && v70;
    uint64_t Magnitude = TCountingObject::getMagnitude(this, v31, v42, v28, v30);
    int v44 = v69 || v74;
    if (!Magnitude)
    {
      if (v44)
      {
        if (v69) {
          char v51 = v73;
        }
        else {
          char v51 = v72;
        }
        uint64_t v52 = (TVertex *)TGraph::addVertex(a9, 0);
        addSequence(v51, v68, v52, a9, a10, 0, 0, 0);
        uint64_t v53 = (TVertex *)TGraph::addVertex(a9, 0);
        uint64_t v54 = 0;
        uint64_t v55 = *(void *)(*((void *)this + 4) + 32);
        if (v30 < (*(void *)(*((void *)this + 4) + 40) - v55) >> 3) {
          uint64_t v54 = *(const __int32 ***)(v55 + 8 * v30);
        }
        addSequence(v54, v52, v53, a9, a10, 0, 0, 0);
        if (!v42 || (uint64_t v56 = *((void *)this + 9)) == 0) {
          uint64_t v56 = *((void *)this + 5);
        }
        uint64_t v58 = v56 + 32;
        uint64_t v57 = *(void *)(v56 + 32);
        if (10 * v28 >= (unint64_t)((*(void *)(v58 + 8) - v57) >> 3)) {
          uint64_t v59 = 0;
        }
        else {
          uint64_t v59 = *(const __int32 ***)(v57 + 80 * v28);
        }
        addSequence(v59, v53, v71, a9, a10, 0, 0, 0);
      }
      uint64_t v60 = (TVertex *)TGraph::addVertex(a9, 0);
      if (!v31 || (uint64_t v61 = *((void *)this + 6)) == 0) {
        uint64_t v61 = *((void *)this + 4);
      }
      uint64_t v63 = v61 + 32;
      uint64_t v62 = *(void *)(v61 + 32);
      if (v30 >= (*(void *)(v63 + 8) - v62) >> 3) {
        long long v64 = 0;
      }
      else {
        long long v64 = *(const __int32 ***)(v62 + 8 * v30);
      }
      addSequence(v64, v68, v60, a9, a10, 0, 0, 0);
      if (!v42 || (uint64_t v65 = *((void *)this + 9)) == 0) {
        uint64_t v65 = *((void *)this + 5);
      }
      uint64_t v67 = v65 + 32;
      uint64_t v66 = *(void *)(v65 + 32);
      if (10 * v28 >= (unint64_t)((*(void *)(v67 + 8) - v66) >> 3)) {
        uint64_t v26 = 0;
      }
      else {
        uint64_t v26 = *(const __int32 ***)(v66 + 80 * v28);
      }
      char v49 = a9;
      unint64_t v48 = v71;
      char v50 = a10;
      uint64_t v27 = v60;
      goto LABEL_60;
    }
    char v45 = (const __int32 **)Magnitude;
    uint64_t v21 = a9;
    a8 = v40;
    uint64_t v20 = a10;
    if (v44)
    {
      if (v69) {
        uint64_t v46 = v73;
      }
      else {
        uint64_t v46 = v72;
      }
      uint64_t v47 = (TVertex *)TGraph::addVertex(a9, 0);
      addSequence(v46, v68, v47, a9, a10, 0, 0, 0);
      addSequence(v45, v47, v71, a9, a10, 0, 0, 0);
    }
    uint64_t v26 = v45;
    uint64_t v27 = v68;
LABEL_59:
    unint64_t v48 = a8;
    char v49 = v21;
    char v50 = v20;
LABEL_60:
    return (const __int32 **)addSequence(v26, v27, v48, v49, v50, 0, 0, 0);
  }
  return result;
}

unint64_t TCountingObject::build(uint64_t a1, __int32 *a2, TVertex *a3, TVertex *a4, TGraph *a5, TLexicon *a6)
{
  uint64_t v6 = a5;
  do
  {
    uint64_t v9 = a2;
    __int32 v10 = a2[1];
    ++a2;
    if (!v10) {
      break;
    }
    unsigned int v11 = *v9;
    {
      operator new();
    }
    unsigned int DigitExtended = v11 - 48;
    if ((int)v11 < 48) {
      break;
    }
    if (v11 > 0x39)
    {
      if (v11 < 0x660) {
        break;
      }
      unsigned int DigitExtended = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v11);
    }
  }
  while (!DigitExtended);
  unint64_t result = wcslen(v9);
  unint64_t v14 = result;
  size_t v15 = *(void *)(a1 + 128);
  size_t v65 = v15;
  if (result <= v15)
  {
    uint64_t v16 = *(void *)(a1 + 80);
    if (v16)
    {
      LOBYTE(v69) = 0;
      {
        operator new();
      }
      unint64_t result = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, (unsigned int *)v9, (BOOL *)&v69);
      uint64_t v17 = *(void *)(v16 + 32);
      if (result < (unint64_t)((*(void *)(v16 + 40) - v17) >> 3))
      {
        unint64_t result = *(void *)(v17 + 8 * result);
        if (result) {
          return (unint64_t)addSequence((const __int32 **)result, a3, a4, v6, a6, 0, 0, 0);
        }
      }
    }
  }
  BOOL v69 = v71;
  long long v70 = xmmword_214085190;
  char v72 = 1;
  unint64_t v18 = v14 / v15;
  unint64_t v19 = v14 % v15;
  if (v14 % v15)
  {
    TBuffer<wchar_t>::insert((uint64_t)&v69, 0, (int *)"0", v15 - v19);
    TBuffer<wchar_t>::insert((uint64_t)&v69, *((unint64_t *)&v70 + 1), v9, v14 % v15);
    v73[0] = v18 + 48;
    unint64_t result = TBuffer<wchar_t>::insert((uint64_t)&v69, *((unint64_t *)&v70 + 1), v73, 1uLL);
    v9 += v19;
  }
  uint64_t v20 = 4 * v15;
  if (v15 <= v14)
  {
    int v21 = 0;
    int v22 = v18 + 48;
    if (v18 <= 1) {
      unint64_t v18 = 1;
    }
    do
    {
      unint64_t result = wcsncmp(v9, (const __int32 *)"0", v15);
      if (result)
      {
        TBuffer<wchar_t>::insert((uint64_t)&v69, *((unint64_t *)&v70 + 1), v9, v15);
        v73[0] = v22 + ~v21;
        unint64_t result = TBuffer<wchar_t>::insert((uint64_t)&v69, *((unint64_t *)&v70 + 1), v73, 1uLL);
      }
      ++v21;
      uint64_t v9 = (__int32 *)((char *)v9 + v20);
      --v18;
    }
    while (v18);
  }
  if (*((void *)&v70 + 1) >= (unint64_t)v70)
  {
    if (v72)
    {
      v73[0] = 0;
      unint64_t result = TBuffer<wchar_t>::insert((uint64_t)&v69, *((unint64_t *)&v70 + 1), v73, 1uLL);
      uint64_t v23 = v69;
      --*((void *)&v70 + 1);
    }
    else
    {
      uint64_t v23 = v69;
      if ((void)v70) {
        *(_DWORD *)&v69[4 * v70 - 4] = 0;
      }
    }
  }
  else
  {
    uint64_t v23 = v69;
    *(_DWORD *)&v69[4 * *((void *)&v70 + 1)] = 0;
  }
  if (*v23)
  {
    uint64_t v24 = 0;
    BOOL v25 = 0;
    BOOL v63 = 0;
    unint64_t v56 = 10 * v15;
    uint64_t v57 = v20 + 4;
    uint64_t v55 = (uint64_t)&v23[2 * v15 + 1];
    char v26 = 1;
    long long v64 = &v23[v15];
    uint64_t v58 = v23;
    do
    {
      unsigned int v27 = *(_DWORD *)((char *)v64 + v24);
      {
        operator new();
      }
      int v28 = v27 - 48;
      if ((int)v27 < 48) {
        goto LABEL_39;
      }
      if (v27 <= 0x39) {
        goto LABEL_40;
      }
      if (v27 < 0x660) {
LABEL_39:
      }
        int v28 = -1;
      else {
        int v28 = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v27);
      }
LABEL_40:
      if (*((void *)&v70 + 1) >= (unint64_t)v70)
      {
        if (v72)
        {
          v73[0] = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v69, *((unint64_t *)&v70 + 1), v73, 1uLL);
          unint64_t v29 = v69;
          --*((void *)&v70 + 1);
        }
        else
        {
          unint64_t v29 = v69;
          if ((void)v70) {
            *(_DWORD *)&v69[4 * v70 - 4] = 0;
          }
        }
      }
      else
      {
        unint64_t v29 = v69;
        *(_DWORD *)&v69[4 * *((void *)&v70 + 1)] = 0;
      }
      *(_DWORD *)&v29[4 * v15 + 4 * ((unint64_t)((char *)v23 + v24 - v29) >> 2)] = 0;
      LOBYTE(v73[0]) = 0;
      {
        operator new();
      }
      unsigned int v30 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, (_DWORD *)((char *)v23 + v24), (BOOL *)v73);
      BOOL v60 = v25;
      if (!(v26 & 1 | (*(void *)(a1 + 120) == 0)))
      {
        unsigned int v31 = *(_DWORD *)((char *)v23 + v24);
        {
          operator new();
        }
        unsigned int v32 = v31 - 48;
        if ((int)v31 >= 48)
        {
          if (v31 > 0x39)
          {
            if (v31 < 0x660) {
              goto LABEL_57;
            }
            unsigned int v32 = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v31);
          }
          if (!v32 && v30)
          {
            BOOL v33 = (TVertex *)TGraph::addVertex(v6, 0);
            addSequence(*(const __int32 ***)(a1 + 120), a3, v33, v6, a6, 0, 0, 0);
            BOOL v60 = 0;
            if (!v63) {
              goto LABEL_62;
            }
            goto LABEL_58;
          }
        }
      }
LABEL_57:
      BOOL v33 = a3;
      if (!v63) {
        goto LABEL_62;
      }
LABEL_58:
      if (*(void *)(a1 + 104) && (v30 < 0x64 || !(v30 % 0x64)))
      {
        unint64_t v34 = (TVertex *)TGraph::addVertex(v6, 0);
        addSequence(*(const __int32 ***)(a1 + 104), v33, v34, v6, a6, 0, 0, 0);
        BOOL v33 = v34;
      }
LABEL_62:
      unint64_t v35 = v28;
      if (!v28)
      {
        unint64_t result = (unint64_t)TCountingObject::addHundredChunk((TCountingObject *)a1, v30, (v26 & 1) == 0, v60, v26 & 1, 1, v33, a4, v6, a6);
        break;
      }
      BOOL v63 = v28 == 1;
      uint64_t v66 = (char *)v64 + v24;
      int v36 = *(_DWORD *)((char *)v64 + v24 + 4);
      a3 = a4;
      if (v36) {
        a3 = (TVertex *)TGraph::addVertex(a5, 0);
      }
      uint64_t v37 = v65 * v28;
      uint64_t Magnitude = TCountingObject::getMagnitude((TCountingObject *)a1, v26 & 1, v36 == 0, v37, v30);
      if (!Magnitude)
      {
        if (v36 || (uint64_t v41 = *(void *)(a1 + 72)) == 0) {
          uint64_t v41 = *(void *)(a1 + 40);
        }
        uint64_t v43 = v41 + 32;
        uint64_t v42 = *(void *)(v41 + 32);
        if (10 * v37 < (unint64_t)((*(void *)(v43 + 8) - v42) >> 3))
        {
          uint64_t v39 = *(const __int32 ***)(v42 + 80 * v37);
          if (v39)
          {
            uint64_t v6 = a5;
            int v44 = (TVertex *)TGraph::addVertex(a5, 0);
            TCountingObject::addHundredChunk((TCountingObject *)a1, v30, 0, v60, v26 & 1, 0, v33, v44, a5, a6);
            BOOL v33 = v44;
            goto LABEL_68;
          }
        }
        if (v30 <= 9
          && (uint64_t v45 = *(void *)(*(void *)(a1 + 40) + 32),
              v56 + v30 < (*(void *)(*(void *)(a1 + 40) + 40) - v45) >> 3)
          && (uint64_t v39 = *(const __int32 ***)(v45 + 8 * (v56 + v30))) != 0)
        {
          uint64_t v46 = v33;
        }
        else
        {
          uint64_t v46 = (TVertex *)TGraph::addVertex(a5, 0);
          TCountingObject::addHundredChunk((TCountingObject *)a1, v30, 0, v60, v26 & 1, 0, v33, v46, a5, a6);
          uint64_t v47 = *(void *)(*(void *)(a1 + 40) + 32);
          if (v56 >= (*(void *)(*(void *)(a1 + 40) + 40) - v47) >> 3) {
            uint64_t v39 = 0;
          }
          else {
            uint64_t v39 = *(const __int32 ***)(v47 + 8 * v56);
          }
        }
        if (*((_DWORD *)v66 + 1))
        {
          unsigned int v48 = *(_DWORD *)(v55 + v24);
          {
            operator new();
          }
          int v49 = v48 - 48;
          if ((int)v48 < 48) {
            goto LABEL_89;
          }
          if (v48 <= 0x39) {
            goto LABEL_90;
          }
          if (v48 < 0x660) {
LABEL_89:
          }
            int v49 = -1;
          else {
            int v49 = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v48);
          }
LABEL_90:
          uint64_t v50 = v49;
        }
        else
        {
          uint64_t v50 = 0;
        }
        if (v50 + 1 >= v35)
        {
          BOOL v33 = v46;
        }
        else
        {
          BOOL v33 = (TVertex *)TGraph::addVertex(a5, 0);
          addSequence(v39, v46, v33, a5, a6, 0, 0, 0);
          unint64_t v51 = v56 * (v35 - 1);
          if (v36 || (uint64_t v52 = *(void *)(a1 + 72)) == 0) {
            uint64_t v52 = *(void *)(a1 + 40);
          }
          uint64_t v54 = v52 + 32;
          uint64_t v53 = *(void *)(v52 + 32);
          if (v51 >= (*(void *)(v54 + 8) - v53) >> 3) {
            uint64_t v39 = 0;
          }
          else {
            uint64_t v39 = *(const __int32 ***)(v53 + 8 * v51);
          }
        }
        goto LABEL_67;
      }
      uint64_t v39 = (const __int32 **)Magnitude;
LABEL_67:
      uint64_t v6 = a5;
LABEL_68:
      unint64_t result = (unint64_t)addSequence(v39, v33, a3, v6, a6, 0, 0, 0);
      char v26 = 0;
      uint64_t v23 = v58;
      v24 += v57;
      HIDWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = -858993459 * v30;
      LODWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = -858993459 * v30;
      BOOL v25 = (v40 >> 1) < 0x1999999A;
      size_t v15 = v65;
    }
    while (*((_DWORD *)v66 + 1));
  }
  if (v72)
  {
    unint64_t result = (unint64_t)v69;
    if (v69 != v71)
    {
      if (v69) {
        return MEMORY[0x216698730]();
      }
    }
  }
  return result;
}

void sub_213E9A544(_Unwind_Exception *a1)
{
  MEMORY[0x216698730](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

void TChartSeeder::makeTerminals(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, TAllocator *a6)
{
  uint64_t v6 = (char *)(*(void *)(a1 + 8) + a2);
  if (*v6 && *(void *)(a1 + 32) > a2)
  {
    uint64_t v41 = (__int32 *)v43;
    long long v42 = xmmword_214085190;
    char v44 = 1;
    BOOL Terminals = 1;
    unsigned int v11 = v6;
    while (Terminals)
    {
      uint64_t Segment = TSegmenter::getSegment(*(TSegmenter **)(a1 + 16), v11);
      uint64_t v13 = Segment;
      if (!Segment) {
        break;
      }
      int v14 = *(_DWORD *)(Segment + 24);
      if (v14 == 5) {
        break;
      }
      size_t v15 = *(int **)Segment;
      if (wcslen(*(const __int32 **)Segment) + *((void *)&v42 + 1) > *(void *)(a1 + 32)) {
        break;
      }
      if (!v14)
      {
        int v22 = 0;
        while (1)
        {
          if (!v13) {
            goto LABEL_68;
          }
          if (*(_DWORD *)(v13 + 24)) {
            goto LABEL_12;
          }
          uint64_t v23 = *(int **)v13;
          unsigned int v11 = *(char **)(v13 + 8);
          int v24 = **(_DWORD **)v13;
          if (v24 == 9)
          {
LABEL_52:
            if (*(_DWORD *)(v13 + 24)) {
              goto LABEL_12;
            }
            goto LABEL_68;
          }
          if (!*((void *)&v42 + 1) || v41[*((void *)&v42 + 1) - 1] != 32)
          {
            {
              operator new();
            }
            if (v24 <= 8202)
            {
              if (v24 != 32 && v24 != 160) {
                goto LABEL_47;
              }
            }
            else if (v24 != 8203 && v24 != 12288 && v24 != 65279)
            {
LABEL_47:
              uint64_t v23 = *(int **)v13;
              goto LABEL_33;
            }
            uint64_t v23 = *(int **)v13;
            if (wcslen(*(const __int32 **)v13) > 2) {
              goto LABEL_52;
            }
          }
LABEL_33:
          int v26 = *v23;
          {
            operator new();
          }
          BOOL v27 = v26 == 10 || v26 == 13;
          int v28 = !v27;
          if (v27 && ((v22 ^ 1) & 1) == 0) {
            goto LABEL_52;
          }
          if (!*((void *)&v42 + 1) || v41[*((void *)&v42 + 1) - 1] != 32) {
            TBuffer<wchar_t>::insert((uint64_t)&v41, *((unint64_t *)&v42 + 1), (int *)" ", 1uLL);
          }
          v22 |= v28 ^ 1;
          uint64_t v13 = TSegmenter::getSegment(*(TSegmenter **)(a1 + 16), v11);
        }
      }
      uint64_t v16 = 0;
      unsigned int v11 = *(char **)(v13 + 8);
      while (v15[v16++])
        ;
      TBuffer<wchar_t>::insert((uint64_t)&v41, *((unint64_t *)&v42 + 1), v15, v16 - 1);
LABEL_12:
      unint64_t v19 = *(char **)a3;
      uint64_t v18 = *(void *)(a3 + 8);
      uint64_t v20 = *(void *)(a1 + 24);
      if (*((void *)&v42 + 1) >= (unint64_t)v42)
      {
        if (v44)
        {
          LODWORD(v39) = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v41, *((unint64_t *)&v42 + 1), (int *)&v39, 1uLL);
          int v21 = v41;
          --*((void *)&v42 + 1);
        }
        else
        {
          int v21 = v41;
          if ((void)v42) {
            v41[(void)v42 - 1] = 0;
          }
        }
      }
      else
      {
        int v21 = v41;
        v41[*((void *)&v42 + 1)] = 0;
      }
      BOOL Terminals = TGrammar::getTerminals(v20, (unsigned int *)v21, (char **)a3);
      uint64_t v29 = *(void *)(a3 + 8) - *(void *)a3;
      if ((v18 - (uint64_t)v19) >> 3 != v29 >> 3)
      {
        *(void *)&long long v39 = v11 - v6;
        std::vector<unsigned long>::resize(a4, v29 >> 3, &v39);
        unint64_t v40 = "s";
        if ((unint64_t)(*((void *)&v42 + 1) + 1) >> 62) {
          uint64_t v30 = -1;
        }
        else {
          uint64_t v30 = 4 * (*((void *)&v42 + 1) + 1);
        }
        unsigned int v31 = (__int32 *)TAllocator::allocate(a6, v30);
        if (*((void *)&v42 + 1) >= (unint64_t)v42)
        {
          if (v44)
          {
            LODWORD(v39) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v41, *((unint64_t *)&v42 + 1), (int *)&v39, 1uLL);
            unsigned int v32 = v41;
            --*((void *)&v42 + 1);
          }
          else
          {
            unsigned int v32 = v41;
            if ((void)v42) {
              v41[(void)v42 - 1] = 0;
            }
          }
        }
        else
        {
          unsigned int v32 = v41;
          v41[*((void *)&v42 + 1)] = 0;
        }
        wcscpy(v31, v32);
        *(void *)&long long v39 = 1;
        *((void *)&v39 + 1) = v31;
        unint64_t v34 = *(char **)a3;
        uint64_t v33 = *(void *)(a3 + 8);
        uint64_t ClientData = TGrammarCompiler::makeClientData((uint64_t *)&v40, &v39, 1, a6);
        std::vector<TSegment const*>::resize(a5, (v33 - (uint64_t)v34) >> 3, &ClientData);
      }
    }
LABEL_68:
    if (v44)
    {
      if (v41 != (__int32 *)v43 && v41 != 0) {
        MEMORY[0x216698730]();
      }
    }
  }
}

void sub_213E9AAAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  MEMORY[0x216698730](v16, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x450]) && a16 != a9)
  {
    if (a16) {
      MEMORY[0x216698730]();
    }
  }
  _Unwind_Resume(a1);
}

void std::vector<unsigned long>::resize(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<unsigned long>::__append((void **)a1, a2 - v3, a3);
  }
}

void TPatternManager::TPatternManager(TPatternManager *this, TInputStream *a2, TInputStream *a3, TLexicon *a4, TTokenizerParamManager *a5)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  TAllocator::TAllocator((TPatternManager *)((char *)this + 40), 2048);
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((void *)this + 1) = a4;
  *((void *)this + 2) = a5;
  *(void *)this = -1;
  *((void *)this + 22) = 0;
  operator new();
}

void sub_213E9B96C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, void *a19, int a20,__int16 a21,char a22,char a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  TFileObjectParser::~TFileObjectParser((TFileObjectParser *)&v36);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    TPatternManager::freeMemory(v33);
    __cxa_rethrow();
  }
  JUMPOUT(0x213E9BB40);
}

void sub_213E9BAB0()
{
}

void sub_213E9BACC()
{
}

void sub_213E9BAE8()
{
}

void sub_213E9BB10()
{
  __cxa_end_catch();
  if (v10)
  {
    if (v9 != v8 && v9 != 0) {
      MEMORY[0x216698730]();
    }
  }
  uint64_t v2 = (void *)v0[19];
  if (v2)
  {
    v0[20] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)v0[16];
  if (v3)
  {
    v0[17] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)v0[13];
  if (v4)
  {
    v0[14] = v4;
    operator delete(v4);
  }
  unint64_t v5 = *v6;
  if (*v6)
  {
    v0[11] = v5;
    operator delete(v5);
  }
  TAllocator::clear(v7);
  JUMPOUT(0x213E9BBC8);
}

void sub_213E9BB20()
{
}

void sub_213E9BBC0(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x213E9BBC8);
  }
  __clang_call_terminate(a1);
}

uint64_t callBackSeqAlt(uint64_t a1, unint64_t a2, __int32 *a3, uint64_t a4, TAllocator *a5)
{
  size_t v10 = callBackSeqAltHelper(a1, a2, a3, a4, 0);
  if (v10 >= 2)
  {
    if (v10 >> 62) {
      uint64_t v11 = -1;
    }
    else {
      uint64_t v11 = 4 * v10;
    }
    uint64_t v12 = (__int32 *)TAllocator::allocate(a5, v11);
    callBackSeqAltHelper(a1, a2, a3, a4, v12);
  }
  return 1;
}

uint64_t callBackSync(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, TAllocator *a5)
{
  if (a2 <= 1 && *(void *)a1 > 1uLL) {
    return 0;
  }
  uint64_t v7 = *(int **)(a1 + 8);
  if (*v7)
  {
    size_t v8 = wcslen(*(const __int32 **)(a1 + 8));
    unint64_t v9 = v8 + 10;
    if ((v8 + 10) >> 62) {
      uint64_t v10 = -1;
    }
    else {
      uint64_t v10 = 4 * (v8 + 10);
    }
    uint64_t v13 = (uint64_t *)TAllocator::allocate(a5, v10);
    unint64_t v14 = v9;
    unint64_t v15 = 0;
    char v17 = 0;
    TBuffer<wchar_t>::assign((uint64_t)&v13, (int *)"S");
    uint64_t v11 = 0;
    while (v7[v11++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&v13, v15, v7, v11 - 1);
    int v18 = 34;
    TBuffer<wchar_t>::insert((uint64_t)&v13, v15, &v18, 1uLL);
    if (v15 < v14)
    {
      *((_DWORD *)v13 + v15) = 0;
LABEL_17:
      if (v17 && v13 != &v16)
      {
        if (v13) {
          MEMORY[0x216698730]();
        }
      }
      return 1;
    }
    if (v17)
    {
      int v18 = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v13, v15--, &v18, 1uLL);
      goto LABEL_17;
    }
    if (v14)
    {
      *((_DWORD *)v13 + v14 - 1) = 0;
      goto LABEL_17;
    }
  }
  return 1;
}

void sub_213E9BDE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (LOBYTE(STACK[0x420])) {
    callBackSync(va);
  }
  _Unwind_Resume(a1);
}

uint64_t callBackLookup(void *a1, unint64_t a2, void *a3, uint64_t a4, TAllocator *a5)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  if (a2 <= 1 && *a1 > 1uLL) {
    return 0;
  }
  size_t v8 = (unsigned int *)a1[1];
  if (!*v8) {
    return 1;
  }
  if (TLexicon::checkName((uint64_t)a3, (int *)v8, 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    loggableUnicode(v8, &__p);
    if (v32 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    tknPrintf("Error: '%s' : Lookup requested for an invalid word name.\n", v9, v10, v11, v12, p_p);
    if (v32 < 0) {
      operator delete(__p);
    }
    return 0;
  }
  int v28 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  unint64_t v15 = TStringParam::get((TStringParam *)(a4 + 10744));
  uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(a4 + 16464));
  size_t v17 = *(int *)(a4 + 4 * TParam::getValidConfig((TParam *)(a4 + 16464), ActiveConfigHandle) + 16624);
  uint64_t v18 = TParam::getActiveConfigHandle((TParam *)(a4 + 16112));
  uint64_t ValidConfig = TParam::getValidConfig((TParam *)(a4 + 16112), v18);
  TLexicon::findHeadClonesCollated(a3, v8, v15, v17, *(int *)(a4 + 4 * ValidConfig + 16272), &v28);
  for (uint64_t i = 0; i != 1600; i += 16)
    *(void **)((char *)&__p + i) = 0;
  uint64_t v21 = 0;
  unint64_t v22 = 0;
  uint64_t v23 = (v29 - (unsigned char *)v28) >> 5;
  int v24 = (char *)v28 + 16;
  do
  {
    if (v23 == v21) {
      break;
    }
    if ((*v24 & 0x35) == 0)
    {
      BOOL v25 = (void *)**((void **)v24 - 2);
      int v26 = &__p + 2 * v22;
      *int v26 = (void *)1;
      v26[1] = v25;
      ++v22;
    }
    ++v21;
    v24 += 32;
  }
  while (v21 != 100);
  std::vector<TLexiconMatch>::resize((uint64_t)&v28, 0);
  if (v22)
  {
    if (v22 == 1) {
      uint64_t v14 = (uint64_t)__p;
    }
    else {
      uint64_t v14 = callBackSeqAlt((uint64_t)&__p, v22, (__int32 *)"A", (uint64_t)a3, a5);
    }
  }
  else
  {
    uint64_t v14 = 1;
  }
  if (v28)
  {
    uint64_t v29 = v28;
    operator delete(v28);
  }
  return v14;
}

void sub_213E9C064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void TPatternManager::addArrayObject(TPatternManager *this, const TFileObject *a2)
{
}

void sub_213E9C504(_Unwind_Exception *a1)
{
  MEMORY[0x216698730](v1, 0x1093C40918A3909);
  _Unwind_Resume(a1);
}

void TPatternManager::addCountingObject(TPatternManager *this, const TFileObject *a2)
{
}

void sub_213E9CA00(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, void *a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      if (a2 == 1)
      {
        __cxa_begin_catch(a1);
        (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
        __cxa_rethrow();
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void sub_213E9CB20()
{
}

void TPatternManager::addDigitObject(TPatternManager *this, const TFileObject *a2)
{
}

void sub_213E9CF98(_Unwind_Exception *a1)
{
  MEMORY[0x216698730](v1, 0x10B3C40CE74B16CLL);
  _Unwind_Resume(a1);
}

void TPatternManager::addRomanObject(TPatternManager *this, const TFileObject *a2)
{
}

void sub_213E9D4B8(_Unwind_Exception *a1)
{
  MEMORY[0x216698730](v1, 0x1093C40918A3909);
  _Unwind_Resume(a1);
}

uint64_t TPatternManager::freeMemory(TPatternManager *this)
{
  uint64_t v2 = (TParser *)*((void *)this + 4);
  if (v2)
  {
    TParser::~TParser(v2);
    MEMORY[0x216698730]();
  }
  uint64_t result = *((void *)this + 3);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  uint64_t v5 = *((void *)this + 19);
  uint64_t v4 = *((void *)this + 20);
  if (v4 != v5)
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t result = *(void *)(v5 + 8 * v6);
      if (result)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
        uint64_t v5 = *((void *)this + 19);
        uint64_t v4 = *((void *)this + 20);
      }
      ++v6;
    }
    while (v6 < (v4 - v5) >> 3);
  }
  uint64_t v8 = *((void *)this + 16);
  uint64_t v7 = *((void *)this + 17);
  if (v7 != v8)
  {
    unint64_t v9 = 0;
    do
    {
      uint64_t result = *(void *)(v8 + 8 * v9);
      if (result)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
        uint64_t v8 = *((void *)this + 16);
        uint64_t v7 = *((void *)this + 17);
      }
      ++v9;
    }
    while (v9 < (v7 - v8) >> 3);
  }
  uint64_t v11 = *((void *)this + 13);
  uint64_t v10 = *((void *)this + 14);
  if (v10 != v11)
  {
    unint64_t v12 = 0;
    do
    {
      uint64_t result = *(void *)(v11 + 8 * v12);
      if (result)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
        uint64_t v11 = *((void *)this + 13);
        uint64_t v10 = *((void *)this + 14);
      }
      ++v12;
    }
    while (v12 < (v10 - v11) >> 3);
  }
  uint64_t v14 = *((void *)this + 10);
  uint64_t v13 = *((void *)this + 11);
  if (v13 != v14)
  {
    unint64_t v15 = 0;
    do
    {
      uint64_t result = *(void *)(v14 + 8 * v15);
      if (result)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
        uint64_t v14 = *((void *)this + 10);
        uint64_t v13 = *((void *)this + 11);
      }
      ++v15;
    }
    while (v15 < (v13 - v14) >> 3);
  }
  return result;
}

void TPatternManager::~TPatternManager(TPatternManager *this)
{
  TPatternManager::freeMemory(this);
  uint64_t v2 = (void *)*((void *)this + 19);
  if (v2)
  {
    *((void *)this + 20) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 16);
  if (v3)
  {
    *((void *)this + 17) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 13);
  if (v4)
  {
    *((void *)this + 14) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 10);
  if (v5)
  {
    *((void *)this + 11) = v5;
    operator delete(v5);
  }
  TAllocator::clear((TPatternManager *)((char *)this + 40));
}

uint64_t callBackObject(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, TAllocator *a5)
{
  if (a2 <= 1 && *(void *)a1 > 1uLL) {
    return 0;
  }
  uint64_t v8 = *(unsigned int **)(a1 + 8);
  unsigned int v9 = *v8;
  if (*v8)
  {
    uint64_t v10 = v8 + 1;
    do
    {
      {
        operator new();
      }
      if ((int)v9 < 48
        || v9 >= 0x3A
        && (v9 < 0x660
         || TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v9) == -1))
      {
        loggableUnicode(*(unsigned int **)(a1 + 8), &__p);
        if (v27 >= 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        tknPrintf("Error: ${Counting, Array, Roman}...() : the argument (%s) must be a number\n", v12, v13, v14, v15, p_p);
        if (SHIBYTE(v27) < 0) {
          operator delete(__p);
        }
        return 0;
      }
      unsigned int v11 = *v10++;
      unsigned int v9 = v11;
    }
    while (v11);
    uint64_t v18 = *(__int32 **)(a1 + 8);
    if ((*(unsigned int (**)(unint64_t, __int32 *))(*(void *)a3 + 16))(a3, v18))
    {
      size_t v20 = wcslen(v18);
      unint64_t v21 = v20 + 54;
      if ((v20 + 54) >> 62) {
        uint64_t v22 = -1;
      }
      else {
        uint64_t v22 = 4 * (v20 + 54);
      }
      __p = (void *)TAllocator::allocate(a5, v22);
      unint64_t v26 = v21;
      int64_t v27 = 0;
      char v29 = 0;
      TBuffer<wchar_t>::assign((uint64_t)&__p, (int *)"P");
      {
        operator new();
      }
      TLocaleInfo::valueToString(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a3, (uint64_t)&__p, 1);
      TBuffer<wchar_t>::insert((uint64_t)&__p, v27, (int *)"\"", 0xBuLL);
      uint64_t v23 = 0;
      while (v18[v23++])
        ;
      TBuffer<wchar_t>::insert((uint64_t)&__p, v27, v18, v23 - 1);
      TBuffer<wchar_t>::insert((uint64_t)&__p, v27, (int *)"\"", 3uLL);
      if (v27 >= v26)
      {
        if (v29)
        {
          int v30 = 0;
          TBuffer<wchar_t>::insert((uint64_t)&__p, v27--, &v30, 1uLL);
        }
        else
        {
          if (!v26) {
            return 1;
          }
          *((_DWORD *)__p + v26 - 1) = 0;
        }
      }
      else
      {
        *((_DWORD *)__p + v27) = 0;
      }
      if (v29 && __p != &v28)
      {
        if (__p) {
          MEMORY[0x216698730]();
        }
      }
    }
  }
  return 1;
}

void sub_213E9DAA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *__p, uint64_t a11, uint64_t a12, uint64_t a13)
{
  MEMORY[0x216698730](v13, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x420]))
  {
    if (__p != &a13 && __p != 0) {
      MEMORY[0x216698730]();
    }
  }
  _Unwind_Resume(a1);
}

TAllocator *TPatternManager::clear(TPatternManager *this)
{
  uint64_t v2 = *((void *)this + 4);
  unint64_t v4 = *(void *)(v2 + 48);
  uint64_t result = (TAllocator *)(v2 + 48);
  if (v4 >= 0x801) {
    uint64_t result = (TAllocator *)TAllocator::clear(result);
  }
  *((void *)this + 22) = 0;
  return result;
}

uint64_t TPatternManager::addWords(TPatternManager *this, TVertex *a2, TGraph *a3, TSegmenter *a4, uint64_t a5)
{
  *(void *)this = a5;
  unsigned int v9 = (char *)*((void *)a2 + 2);
  uint64_t result = TSegmenter::getSegment(a4, v9);
  if (!result) {
    return result;
  }
  uint64_t v11 = result;
  if (*(_DWORD *)(result + 24) == 5) {
    return result;
  }
  int v12 = **(_DWORD **)result;
  {
    if (result) {
      operator new();
    }
  }
  if (v12 > 159)
  {
    BOOL v14 = v12 == 12288;
    if (v12 >= 12288)
    {
      int v15 = 65279;
    }
    else
    {
      BOOL v14 = v12 == 160;
      int v15 = 8203;
    }
    if (v14 || v12 == v15) {
      return result;
    }
  }
  else if (v12 <= 0x20 && ((1 << v12) & 0x100002600) != 0)
  {
    return result;
  }
  BOOL v17 = *(void *)(v11 + 8) - (void)v9 >= 0x32uLL || (unint64_t)v9 >= *((void *)this + 22);
  uint64_t v18 = 50;
  unint64_t v78 = *(void *)(v11 + 8) - (void)v9;
  if (!v17) {
    uint64_t v18 = *(void *)(v11 + 8) - (void)v9;
  }
  uint64_t v19 = *((void *)this + 2);
  uint64_t v20 = *(void *)(*((void *)this + 3) + 56);
  v90[0] = &unk_26C4DFB98;
  v90[1] = v9;
  v90[2] = a4;
  v90[3] = v20;
  v90[4] = v18;
  uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v19 + 21160));
  uint64_t v22 = *(int *)(v19 + 4 * TParam::getValidConfig((TParam *)(v19 + 21160), ActiveConfigHandle) + 21320);
  uint64_t v23 = *((void *)this + 4);
  uint64_t v24 = *(void *)(v23 + 16);
  *(void *)(v23 + 24) = v22;
  (*(void (**)(void))(v24 + 16))();
  AllProductions = (void *)TParser::getAllProductions(*((void **)this + 4), (uint64_t)v90);
  TAllocator::TAllocator((TAllocator *)v89, 2048);
  if (!AllProductions)
  {
    unint64_t v77 = 0;
    goto LABEL_103;
  }
  unint64_t v77 = 0;
  unint64_t v26 = AllProductions;
  do
  {
    int v27 = **(_DWORD **)TSegmenter::getPreviousSegment(a4, &v9[v26[2]]);
    {
      operator new();
    }
    if (v27 > 159)
    {
      BOOL v29 = v27 == 12288;
      if (v27 >= 12288)
      {
        int v30 = 65279;
      }
      else
      {
        BOOL v29 = v27 == 160;
        int v30 = 8203;
      }
      if (v29 || v27 == v30) {
        goto LABEL_43;
      }
    }
    else if (v27 <= 0x20 && ((1 << v27) & 0x100002600) != 0)
    {
      goto LABEL_43;
    }
    if ((unint64_t)TGrammarCompiler::getAttributeValue((uint64_t)v26, (__int32 *)"s", (TAllocator *)v89, 0) <= 1)
    {
      if (*v32)
      {
        if ((unint64_t)TGrammarCompiler::getAttributeValue((uint64_t)v26, (__int32 *)"l", (TAllocator *)v89, 0) <= 1)
        {
          unint64_t v34 = v33;
          if (!*v33) {
            goto LABEL_91;
          }
          uint64_t v82 = (unsigned int *)v84;
          long long v83 = xmmword_214085190;
          char v88 = 1;
          Previousuint64_t Segment = TSegmenter::getPreviousSegment(a4, v9);
          uint64_t v37 = v36;
          while (PreviousSegment && *(_DWORD *)(PreviousSegment + 24) != 5)
          {
            if (*((void *)&v83 + 1) > 0x31uLL) {
              goto LABEL_59;
            }
            uint64_t v38 = 0;
            long long v39 = *(int **)PreviousSegment;
            while (v39[v38++])
              ;
            TBuffer<wchar_t>::insert((uint64_t)&v82, 0, v39, v38 - 1);
            Previousuint64_t Segment = TSegmenter::getPreviousSegment(a4, v37);
            uint64_t v37 = v41;
          }
          if (!*((void *)&v83 + 1)) {
            TBuffer<wchar_t>::assign((uint64_t)&v82, (int *)"\n");
          }
LABEL_59:
          TRegExp::TRegExp((TRegExp *)&__p, v34, *((void *)this + 1) + 240);
          if (*((void *)&v83 + 1) >= (unint64_t)v83)
          {
            if (v88)
            {
              v91[0] = 0;
              TBuffer<wchar_t>::insert((uint64_t)&v82, *((unint64_t *)&v83 + 1), v91, 1uLL);
              long long v42 = v82;
              --*((void *)&v83 + 1);
            }
            else
            {
              long long v42 = v82;
              if ((void)v83) {
                v82[(void)v83 - 1] = 0;
              }
            }
          }
          else
          {
            long long v42 = v82;
            v82[*((void *)&v83 + 1)] = 0;
          }
          BOOL v43 = TRegExp::match(&__p, v42, 1);
          TRegExp::~TRegExp((TRegExp *)&__p);
          if (v88 && v82 != (unsigned int *)v84 && v82) {
            MEMORY[0x216698730]();
          }
          if (v43)
          {
LABEL_91:
            if ((unint64_t)TGrammarCompiler::getAttributeValue((uint64_t)v26, (__int32 *)"r", (TAllocator *)v89, 0) <= 1)
            {
              uint64_t v45 = v44;
              if (!*v44) {
                goto LABEL_92;
              }
              uint64_t v82 = (unsigned int *)v84;
              long long v83 = xmmword_214085190;
              char v88 = 1;
              for (uint64_t i = TSegmenter::getSegment(a4, &v9[v26[2]]);
                    i && *(_DWORD *)(i + 24) != 5;
                    uint64_t i = TSegmenter::getSegment(a4, *(char **)(i + 8)))
              {
                if (*((void *)&v83 + 1) > 0x31uLL) {
                  goto LABEL_81;
                }
                uint64_t v47 = 0;
                unsigned int v48 = *(int **)i;
                while (v48[v47++])
                  ;
                TBuffer<wchar_t>::insert((uint64_t)&v82, *((unint64_t *)&v83 + 1), v48, v47 - 1);
              }
              if (!*((void *)&v83 + 1)) {
                TBuffer<wchar_t>::assign((uint64_t)&v82, (int *)"\n");
              }
LABEL_81:
              TRegExp::TRegExp((TRegExp *)&__p, v45, *((void *)this + 1) + 240);
              if (*((void *)&v83 + 1) >= (unint64_t)v83)
              {
                if (v88)
                {
                  v91[0] = 0;
                  TBuffer<wchar_t>::insert((uint64_t)&v82, *((unint64_t *)&v83 + 1), v91, 1uLL);
                  uint64_t v50 = v82;
                  --*((void *)&v83 + 1);
                }
                else
                {
                  uint64_t v50 = v82;
                  if ((void)v83) {
                    v82[(void)v83 - 1] = 0;
                  }
                }
              }
              else
              {
                uint64_t v50 = v82;
                v82[*((void *)&v83 + 1)] = 0;
              }
              BOOL v51 = TRegExp::match(&__p, v50, 2);
              TRegExp::~TRegExp((TRegExp *)&__p);
              if (v88 && v82 != (unsigned int *)v84 && v82) {
                MEMORY[0x216698730]();
              }
              if (v51)
              {
LABEL_92:
                unint64_t v52 = v77;
                if (v26[2] > v77) {
                  unint64_t v52 = v26[2];
                }
                unint64_t v77 = v52;
              }
            }
          }
        }
      }
      else
      {
        tknPrintString("Error: Top production 'spoken' attribute is an empty string\n");
      }
    }
LABEL_43:
    unint64_t v26 = (void *)*v26;
  }
  while (v26);
  if (v77)
  {
    if ((unint64_t)&v9[v77] <= *((void *)this + 22)) {
      unint64_t v77 = v78;
    }
    else {
      *((void *)this + 22) = &v9[v77];
    }
  }
  else
  {
    unint64_t v77 = 0;
    AllProductions = 0;
  }
LABEL_103:
  uint64_t v53 = *((void *)this + 2);
  uint64_t v54 = TParam::getActiveConfigHandle((TParam *)(v53 + 21512));
  uint64_t ValidConfig = TParam::getValidConfig((TParam *)(v53 + 21512), v54);
  unint64_t v56 = (unsigned int **)MEMORY[0x263F8C2C8];
  if (*(unsigned char *)(v53 + ValidConfig + 21664))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v82);
    TParser::logChart(*((uint64_t **)this + 4), &v82);
    std::stringbuf::str();
    if (v81 >= 0) {
      p_p = (const char *)&__p;
    }
    else {
      p_p = (const char *)__p;
    }
    tknPrintString(p_p);
    if (v81 < 0) {
      operator delete(__p);
    }
    uint64_t v82 = *v56;
    *(unsigned int **)((char *)&v82 + *((void *)v82 - 3)) = v56[3];
    *(void *)&long long v83 = MEMORY[0x263F8C318] + 16;
    if (v86 < 0) {
      operator delete(v85);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x2166986E0](v87);
  }
  unint64_t v58 = v77;
  if (AllProductions)
  {
    std::vector<int> v76 = (unsigned int *)*MEMORY[0x263F8C2C8];
    uint64_t v75 = *(unsigned int **)(MEMORY[0x263F8C2C8] + 24);
    do
    {
      uint64_t v59 = AllProductions[2];
      if (v59 == v58 || v59 == v78)
      {
        uint64_t v61 = *((void *)this + 2);
        uint64_t v62 = TParam::getActiveConfigHandle((TParam *)(v61 + 21760));
        unint64_t v58 = v77;
        if (*(unsigned char *)(v61 + TParam::getValidConfig((TParam *)(v61 + 21760), v62) + 21912))
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v82);
          TParser::logTree(*((void *)this + 4), AllProductions, &v82);
          std::stringbuf::str();
          if (v81 >= 0) {
            BOOL v63 = (const char *)&__p;
          }
          else {
            BOOL v63 = (const char *)__p;
          }
          tknPrintString(v63);
          if (v81 < 0) {
            operator delete(__p);
          }
          uint64_t v82 = v76;
          *(unsigned int **)((char *)&v82 + *((void *)v76 - 3)) = v75;
          *(void *)&long long v83 = MEMORY[0x263F8C318] + 16;
          if (v86 < 0) {
            operator delete(v85);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x2166986E0](v87);
        }
        __p = (void *)TGrammarCompiler::getAttributeValue((uint64_t)AllProductions, (__int32 *)"s", (TAllocator *)v89, 0);
        long long v80 = v64;
        if ((unint64_t)__p <= 1)
        {
          if (*v64)
          {
            size_t v65 = (void *)callBackSeqAlt((uint64_t)&__p, 1uLL, (__int32 *)"S", *((void *)this + 1), (TAllocator *)v89);
            uint64_t v67 = v66;
            __p = v65;
            long long v80 = v66;
            if ((unint64_t)v65 <= 1
              && v66
              && (unint64_t)TGrammarCompiler::getAttributeValue((uint64_t)AllProductions, (__int32 *)"n", (TAllocator *)v89, 0) <= 1)
            {
              BOOL v69 = v68;
              long long v70 = (uint64_t *)TGraph::addVertex(a3, &v9[AllProductions[2]]);
              uint64_t v71 = TLexicon::addTempWord(*((void *)this + 1), v69, (int *)"p", 0, v67);
              LODWORD(v82) = 5;
              long long v83 = (unint64_t)v71;
              v84[0] = 0;
              TGraph::addEdge(a3, (uint64_t)a2, v70, (uint64_t)&v82);
              unint64_t v58 = v77;
            }
          }
        }
      }
      AllProductions = (void *)*AllProductions;
    }
    while (AllProductions);
  }
  uint64_t v72 = *((void *)this + 4);
  unint64_t v74 = *(void *)(v72 + 48);
  uint64_t v73 = (TAllocator *)(v72 + 48);
  if (v74 >= 0x801) {
    TAllocator::clear(v73);
  }
  return (uint64_t)TAllocator::clear((TAllocator *)v89);
}

void sub_213E9E5D4(_Unwind_Exception *a1)
{
  MEMORY[0x216698730](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t addToken(__int32 **a1, TVertex *a2, TVertex *a3, TGraph *a4, TLexicon *a5)
{
  uint64_t HeadClone = TLexicon::findHeadClone(a5, a1[3]);
  if (HeadClone)
  {
    int v11 = 1;
  }
  else
  {
    uint64_t HeadClone = TLexicon::addTempWord((uint64_t)a5, a1[3], 0, 0, 0);
    int v11 = 4;
  }
  int v13 = v11;
  uint64_t v14 = HeadClone;
  uint64_t v15 = 0;
  char v16 = 0;
  return TGraph::addEdge(a4, (uint64_t)a2, (uint64_t *)a3, (uint64_t)&v13);
}

const char *addAlt(const TFileObject *a1, TVertex *a2, TVertex *a3, TGraph *a4, TLexicon *a5, const char *a6, const char *a7, const char *a8)
{
  uint64_t v9 = *((void *)a1 + 3);
  if (v9)
  {
    char v16 = a7;
    while (1)
    {
      if (!wcscmp(*(const __int32 **)(v9 + 8), (const __int32 *)"T"))
      {
        addToken((__int32 **)v9, a2, a3, a4, a5);
      }
      else
      {
        if (!wcscmp(*(const __int32 **)(v9 + 8), (const __int32 *)"A"))
        {
          unint64_t v17 = addAlt((const TFileObject *)v9, a2, a3, a4, a5, a6, a7, a8);
LABEL_10:
          if (v17 > (unint64_t)a7) {
            char v16 = (const char *)v17;
          }
          goto LABEL_14;
        }
        if (!wcscmp(*(const __int32 **)(v9 + 8), (const __int32 *)"P"))
        {
          addPattern(v9, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5);
        }
        else if (!wcscmp(*(const __int32 **)(v9 + 8), (const __int32 *)"S"))
        {
          unint64_t v17 = addSequence((const TFileObject *)v9, a2, a3, a4, a5, a6, a7, a8);
          goto LABEL_10;
        }
      }
LABEL_14:
      uint64_t v9 = *(void *)(v9 + 16);
      if (!v9) {
        return v16;
      }
    }
  }
  return a7;
}

uint64_t addPattern(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = *(void *)(a1 + 24);
  do
  {
    if (!wcscmp(*(const __int32 **)(v10 + 8), (const __int32 *)"A"))
    {
      BOOL v14 = 0;
      uint64_t v11 = *(void *)(v10 + 24);
      {
        operator new();
      }
      uint64_t v8 = TLocaleInfo::stringToULong(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v11, &v14, 1);
    }
    else if (!wcscmp(*(const __int32 **)(v10 + 8), (const __int32 *)"V"))
    {
      uint64_t v9 = *(void *)(v10 + 24);
    }
    uint64_t v10 = *(void *)(v10 + 16);
  }
  while (v10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 24))(v8, v9, a2, a3, a4, a5);
}

void sub_213E9EA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void TPatternManager::expandWord(uint64_t a1, TGraph *a2, uint64_t a3, int a4)
{
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v7 = *(uint64_t **)(a3 + 24);
  if (a4)
  {
    unint64_t v26 = (const __int32 ***)v28;
    long long v27 = xmmword_214085190;
    char v29 = 1;
    TWord::getWrittenForm(*(__int32 ***)(a3 + 56), (uint64_t)&v26);
    uint64_t v22 = (int *)v24;
    long long v23 = xmmword_214085190;
    char v25 = 1;
    TBuffer<wchar_t>::assign((uint64_t)&v22, (int *)"d");
    TBuffer<wchar_t>::operator+=((uint64_t)&v22, (uint64_t)&v26);
    uint64_t v9 = *(void *)(a1 + 8);
    if (*((void *)&v23 + 1) >= (unint64_t)v23)
    {
      if (v25)
      {
        int v18 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v22, *((unint64_t *)&v23 + 1), &v18, 1uLL);
        uint64_t v10 = v22;
        --*((void *)&v23 + 1);
      }
      else
      {
        uint64_t v10 = v22;
        if ((void)v23) {
          v22[(void)v23 - 1] = 0;
        }
      }
    }
    else
    {
      uint64_t v10 = v22;
      v22[*((void *)&v23 + 1)] = 0;
    }
    uint64_t v13 = TLexicon::addTempWord(v9, 0, v10, 0, 0);
    uint64_t v12 = TGraph::addVertex(a2, 0);
    int v18 = 6;
    uint64_t v19 = v13;
    uint64_t v20 = 0;
    char v21 = 0;
    TGraph::addEdge(a2, v8, (uint64_t *)v12, (uint64_t)&v18);
    TBuffer<wchar_t>::assign((uint64_t)&v22, (int *)"d");
    TBuffer<wchar_t>::operator+=((uint64_t)&v22, (uint64_t)&v26);
    uint64_t v14 = *(void *)(a1 + 8);
    if (*((void *)&v23 + 1) >= (unint64_t)v23)
    {
      if (v25)
      {
        int v18 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v22, *((unint64_t *)&v23 + 1), &v18, 1uLL);
        uint64_t v15 = v22;
        --*((void *)&v23 + 1);
      }
      else
      {
        uint64_t v15 = v22;
        if ((void)v23) {
          v22[(void)v23 - 1] = 0;
        }
      }
    }
    else
    {
      uint64_t v15 = v22;
      v22[*((void *)&v23 + 1)] = 0;
    }
    uint64_t v16 = TLexicon::addTempWord(v14, 0, v15, 0, 0);
    uint64_t v11 = (const char **)TGraph::addVertex(a2, 0);
    int v18 = 6;
    uint64_t v19 = v16;
    uint64_t v20 = 0;
    char v21 = 0;
    TGraph::addEdge(a2, (uint64_t)v11, v7, (uint64_t)&v18);
    if (v25 && v22 != (int *)v24 && v22) {
      MEMORY[0x216698730]();
    }
    if (v29 && v26 != (const __int32 ***)v28 && v26) {
      MEMORY[0x216698730]();
    }
  }
  else
  {
    uint64_t v11 = *(const char ***)(a3 + 24);
    uint64_t v12 = *(void *)(a3 + 16);
  }
  size_t v17 = wcslen(**(const __int32 ***)(a3 + 56));
  TFileObjectParser::TFileObjectParser(&v26, **(void **)(a3 + 56) + 4 * v17 + 4, 1, *(void *)(a1 + 8) + 240);
  addSequence(v26[3], (TVertex *)v12, (TVertex *)v11, a2, *(TLexicon **)(a1 + 8), *(const char **)(v12 + 16), *(const char **)(v12 + 16), v11[3]);
  TFileObjectParser::~TFileObjectParser((TFileObjectParser *)&v26);
  TGraph::deleteEdge((uint64_t)a2, a3);
}

void sub_213E9EDBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (LOBYTE(STACK[0x448]) && a15 != v16 && a15) {
    MEMORY[0x216698730]();
  }
  if (LOBYTE(STACK[0x868]))
  {
    unint64_t v18 = STACK[0x450];
    if (STACK[0x450] != v15)
    {
      if (v18) {
        MEMORY[0x216698730](v18, 0x1000C4052888210);
      }
    }
  }
  _Unwind_Resume(a1);
}

void TDigitObject::~TDigitObject(TDigitObject *this)
{
  TDigitObject::~TDigitObject(this);

  JUMPOUT(0x216698730);
}

{
  void *v2;

  *(void *)this = &unk_26C4DFC60;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_26C4E0730;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

uint64_t TDigitObject::isBuildable()
{
  return 1;
}

void TRomanObject::~TRomanObject(TRomanObject *this)
{
  TRomanObject::~TRomanObject(this);

  JUMPOUT(0x216698730);
}

{
  void *v2;

  *(void *)this = &unk_26C4DFCB0;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_26C4E0730;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

BOOL TRomanObject::isBuildable(uint64_t a1, unsigned int *a2)
{
  BOOL v6 = 0;
  {
    operator new();
  }
  unsigned int v3 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a2, &v6);
  return !v6 && v3 < 0xBB8;
}

void sub_213E9EF9C(_Unwind_Exception *a1)
{
  MEMORY[0x216698730](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

void TCountingObject::~TCountingObject(void **this)
{
  *this = &unk_26C4E0730;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_26C4E0730;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }

  JUMPOUT(0x216698730);
}

BOOL TCountingObject::isBuildable(uint64_t a1, __int32 *a2)
{
  do
  {
    unint64_t v4 = a2;
    __int32 v5 = a2[1];
    ++a2;
    if (!v5) {
      break;
    }
    unsigned int v6 = *v4;
    {
      operator new();
    }
    unsigned int DigitExtended = v6 - 48;
    if ((int)v6 < 48) {
      break;
    }
    if (v6 > 0x39)
    {
      if (v6 < 0x660) {
        return wcslen(v4) <= *(void *)(a1 + 88);
      }
      unsigned int DigitExtended = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v6);
    }
  }
  while (!DigitExtended);
  return wcslen(v4) <= *(void *)(a1 + 88);
}

void sub_213E9F170(_Unwind_Exception *a1)
{
  MEMORY[0x216698730](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

void TChartSeeder::~TChartSeeder(TChartSeeder *this)
{
}

void TArrayObject::~TArrayObject(TArrayObject *this)
{
  TArrayObject::~TArrayObject(this);

  JUMPOUT(0x216698730);
}

{
  void *v2;

  *(void *)this = &unk_26C4DFB68;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_26C4E0730;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

BOOL TArrayObject::isBuildable(uint64_t a1, __int32 *a2)
{
  do
  {
    unint64_t v4 = a2;
    __int32 v5 = a2[1];
    ++a2;
    if (!v5) {
      break;
    }
    unsigned int v6 = *v4;
    {
      operator new();
    }
    unsigned int DigitExtended = v6 - 48;
    if ((int)v6 < 48) {
      break;
    }
    if (v6 > 0x39)
    {
      if (v6 < 0x660) {
        break;
      }
      unsigned int DigitExtended = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v6);
    }
  }
  while (!DigitExtended);
  if (wcslen(v4) > 5) {
    return 0;
  }
  BOOL v11 = 0;
  {
    operator new();
  }
  unsigned int v8 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, (unsigned int *)v4, &v11);
  if (v11) {
    return 0;
  }
  uint64_t v9 = *(void *)(a1 + 32);
  return v8 < (unint64_t)((*(void *)(a1 + 40) - v9) >> 3) && *(void *)(v9 + 8 * v8) != 0;
}

void sub_213E9F368(_Unwind_Exception *a1)
{
  MEMORY[0x216698730](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

const char *TArrayObject::build(uint64_t a1, unsigned int *a2, TVertex *a3, TVertex *a4, TGraph *a5, TLexicon *a6)
{
  BOOL v14 = 0;
  {
    operator new();
  }
  unsigned int v12 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a2, &v14);
  return addSequence(*(const __int32 ***)(*(void *)(a1 + 32) + 8 * v12), a3, a4, a5, a6, 0, 0, 0);
}

void sub_213E9F498(_Unwind_Exception *a1)
{
  MEMORY[0x216698730](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

size_t callBackSeqAltHelper(uint64_t a1, unint64_t a2, __int32 *a3, uint64_t a4, __int32 *a5)
{
  __int32 v5 = a5;
  if (a5)
  {
    wcscpy(a5, a3);
    unsigned int v8 = (char *)&v5[wcslen(v5)];
    strcpy(v8, " ");
    __int32 v5 = (__int32 *)&v8[4 * wcslen((const __int32 *)v8)];
  }
  if (a2)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    unint64_t v11 = 1;
    char v12 = 1;
    while (1)
    {
      if (a2 <= v11) {
        unint64_t v13 = v11;
      }
      else {
        unint64_t v13 = a2;
      }
      if (*(void *)(a1 + 16 * v9) > 1uLL) {
        return 0;
      }
      uint64_t v14 = a1 + 16 * v9;
      size_t v17 = *(__int32 **)(v14 + 8);
      uint64_t v15 = (const __int32 **)(v14 + 8);
      uint64_t v16 = v17;
      if (*v17)
      {
        int v18 = wcsncmp(v16, (const __int32 *)"S", 8uLL);
        BOOL v34 = v18 == 0;
        if (v18) {
          goto LABEL_11;
        }
        if (v10)
        {
          int v22 = wcscmp(a3, (const __int32 *)"A");
          if (!((v22 != 0) | v12 & 1))
          {
            unint64_t v23 = v9;
            while (++v23 < a2)
            {
              if (wcsncmp(*v15, (const __int32 *)"S", 8uLL)) {
                goto LABEL_29;
              }
            }
            unint64_t v23 = v13;
LABEL_29:
            if (v23 == a2) {
              goto LABEL_57;
            }
LABEL_11:
            if (!wcsncmp(v16, (const __int32 *)"S", 6uLL)
              || !wcsncmp(v16, (const __int32 *)"A", 6uLL)
              || !wcsncmp(v16, (const __int32 *)"P", 0xAuLL)
              || !wcsncmp(v16, (const __int32 *)"S", 7uLL))
            {
              size_t v21 = wcslen(v16);
              if (v5)
              {
                wcscpy(v5, v16);
                v5 += wcslen(v5);
              }
            }
            else
            {
              if (TLexicon::checkName(a4, v16, 0, 0xFFFFFFFFFFFFFFFFLL))
              {
                loggableUnicode((unsigned int *)v16, &__p);
                if (v41 >= 0) {
                  p_p = &__p;
                }
                else {
                  p_p = __p;
                }
                tknPrintf("Warning: '%s' : The tokenizer grammar constructed an invalid word name.\n", v27, v28, v29, v30, p_p);
                if (SHIBYTE(v41) < 0) {
                  operator delete(__p);
                }
                return 0;
              }
              __p = v42;
              long long v41 = xmmword_214085190;
              char v43 = 1;
              slashEscape((uint64_t)v16, (uint64_t)&__p);
              uint64_t v19 = *((void *)&v41 + 1);
              if (v5)
              {
                unint64_t v35 = v5;
                unint64_t v36 = *((void *)&v41 + 1) + 11;
                unint64_t v37 = 0;
                char v39 = 0;
                TBuffer<wchar_t>::assign((uint64_t)&v35, (int *)"T");
                if (*((void *)&v41 + 1) >= (unint64_t)v41)
                {
                  if (v43)
                  {
                    v44[0] = 0;
                    TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v41 + 1), v44, 1uLL);
                    uint64_t v20 = (int *)__p;
                    --*((void *)&v41 + 1);
                  }
                  else
                  {
                    uint64_t v20 = (int *)__p;
                    if ((void)v41) {
                      *((_DWORD *)__p + v41 - 1) = 0;
                    }
                  }
                }
                else
                {
                  uint64_t v20 = (int *)__p;
                  *((_DWORD *)__p + *((void *)&v41 + 1)) = 0;
                }
                uint64_t v24 = 0;
                while (v20[v24++])
                  ;
                TBuffer<wchar_t>::insert((uint64_t)&v35, v37, v20, v24 - 1);
                v44[0] = 34;
                TBuffer<wchar_t>::insert((uint64_t)&v35, v37, v44, 1uLL);
                if (v37 < v36)
                {
                  v35[v37] = 0;
                  goto LABEL_43;
                }
                if (v39)
                {
                  v44[0] = 0;
                  TBuffer<wchar_t>::insert((uint64_t)&v35, v37--, v44, 1uLL);
                  goto LABEL_43;
                }
                if (v36)
                {
                  v35[v36 - 1] = 0;
LABEL_43:
                  v5 += wcslen(v5);
                  if (v39 && v35 != (__int32 *)&v38 && v35) {
                    MEMORY[0x216698730]();
                  }
                }
                else
                {
                  v5 += wcslen(v5);
                }
              }
              if (v43 && __p != v42 && __p) {
                MEMORY[0x216698730]();
              }
              size_t v21 = v19 + 10;
            }
            v10 += v21;
            char v12 = v34;
            goto LABEL_53;
          }
          v12 |= v22 == 0;
        }
      }
LABEL_53:
      ++v9;
      ++v11;
      if (v9 == a2) {
        goto LABEL_57;
      }
    }
  }
  uint64_t v10 = 0;
LABEL_57:
  if (v5) {
    strcpy((char *)v5, "}");
  }
  if (v10) {
    return v10 + wcslen(a3) + 6;
  }
  else {
    return 0;
  }
}

void sub_213E9F93C(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x477]) < 0) {
    operator delete((void *)STACK[0x460]);
  }
  _Unwind_Resume(a1);
}

void std::vector<unsigned long>::__append(void **a1, unint64_t a2, void *a3)
{
  unsigned int v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  uint64_t v7 = v8;
  unint64_t v9 = *(void **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 3)
  {
    if (a2)
    {
      uint64_t v16 = 8 * a2;
      size_t v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 8;
      }
      while (v16);
      unint64_t v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    unint64_t v11 = a2 + (v10 >> 3);
    if (v11 >> 61) {
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 3;
    uint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 >> 2 > v11) {
      unint64_t v11 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(v6, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    int v18 = &v15[8 * v12];
    uint64_t v19 = &v18[8 * a2];
    uint64_t v20 = 8 * a2;
    size_t v21 = v18;
    do
    {
      *(void *)size_t v21 = *a3;
      v21 += 8;
      v20 -= 8;
    }
    while (v20);
    int v22 = &v15[8 * v14];
    unint64_t v23 = (char *)*a1;
    for (uint64_t i = (char *)a1[1]; i != v23; i -= 8)
    {
      uint64_t v25 = *((void *)i - 1);
      *((void *)v18 - 1) = v25;
      v18 -= 8;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

void MrecInitModule_timer_mrecutil(void)
{
  if (!gParDiagnosticComputeFullTimingStats)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DiagnosticComputeFullTimingStats", byte_21409BA60, byte_21409BA60, 0, SetShadowDiagnosticComputeFullTimingStats, 0);
    *uint64_t v1 = &unk_26C4E0858;
    gParDiagnosticComputeFullTimingStats = (uint64_t)v1;
    gShadowDiagnosticComputeFullTimingStats = 0;
    uint64_t v2 = (uint64_t *)GlobalParamMgr::smpGlobalParamMgr;
    GlobalParamMgr::addParam(v2, (GlobalParam **)&gParDiagnosticComputeFullTimingStats);
  }
}

void MrecTime::MrecTime(MrecTime *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
}

double MrecTime::operator=(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = result;
  return result;
}

DgnString *MrecTime::formatAndAppendToString(MrecTime *this, DgnString *a2)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  snprintf(__str, 0x64uLL, "%04u-%02u-%02u %02u:%02u:%02u", *((_DWORD *)this + 5) + 1900, *((_DWORD *)this + 4) + 1, *((_DWORD *)this + 3), *((_DWORD *)this + 2), *((_DWORD *)this + 1), *(_DWORD *)this);
  return DgnString::operator+=(a2, __str);
}

double MrecTime::setToCurrentLocalTime(MrecTime *this)
{
  time_t v4 = time(0);
  uint64_t v2 = localtime(&v4);
  if (!v2) {
    errWarnInternal("/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/timer.cpp", 157, "mrecutil/timer", 5, "%s", byte_21409BA60);
  }
  *(_OWORD *)this = *(_OWORD *)&v2->tm_sec;
  double result = *(double *)&v2->tm_mon;
  *((double *)this + 2) = result;
  return result;
}

uint64_t MrecTime::setToPreprocessorStyleDateAndTime(MrecTime *this, const char *a2, const char *a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  __int16 v9 = 0;
  *(void *)__s1 = 0;
  int v7 = 0;
  sscanf(a2, "%s %u %u", __s1, (char *)this + 12, &v7);
  uint64_t v5 = 0;
  *((_DWORD *)this + 5) = v7 - 1900;
  while (strcmp(__s1, MrecTime::setToPreprocessorStyleDateAndTime(char const*,char const*)::ppMonth[v5]))
  {
    if (++v5 == 12) {
      return sscanf(a3, "%u:%u:%u", (char *)this + 8, (char *)this + 4, this);
    }
  }
  *((_DWORD *)this + 4) = v5;
  return sscanf(a3, "%u:%u:%u", (char *)this + 8, (char *)this + 4, this);
}

DgnString *MrecTime::appendLocalTimeToString(MrecTime *this, DgnString *a2)
{
  memset(v4, 0, sizeof(v4));
  MrecTime::setToCurrentLocalTime((MrecTime *)v4);
  return MrecTime::formatAndAppendToString((MrecTime *)v4, this);
}

_DWORD *MrecTime::unpackLittleEndMrecTime(_DWORD *this, const unsigned int *a2)
{
  *this = *a2;
  this[1] = a2[1];
  this[2] = a2[2];
  this[3] = a2[3];
  this[4] = a2[4];
  this[5] = a2[5];
  return this;
}

unsigned int *MrecTime::packLittleEndMrecTime(unsigned int *this, unsigned int *a2)
{
  *a2 = *this;
  a2[1] = this[1];
  a2[2] = this[2];
  a2[3] = this[3];
  a2[4] = this[4];
  a2[5] = this[5];
  return this;
}

uint64_t ClockTimer::getCurrentCpuMicrosec(ClockTimer *this)
{
  getrusage(0, &v2);
  return v2.ru_stime.tv_usec + (uint64_t)v2.ru_utime.tv_usec + 1000000 * (v2.ru_stime.tv_sec + v2.ru_utime.tv_sec);
}

__darwin_time_t ClockTimer::getCurrentMicrosec(ClockTimer *this)
{
  if (gettimeofday(&v3, 0))
  {
    uint64_t v1 = __error();
    errWarnInternal("/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/timer.cpp", 410, "mrecutil/timer", 6, "%d", *v1);
  }
  return v3.tv_usec + 1000000 * v3.tv_sec;
}

__darwin_time_t ClockTimer::getCurrentTickMicrosec(ClockTimer *this)
{
  if (gettimeofday(&v3, 0))
  {
    uint64_t v1 = __error();
    errWarnInternal("/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/timer.cpp", 486, "mrecutil/timer", 6, "%d", *v1);
  }
  return v3.tv_usec + 1000000 * v3.tv_sec;
}

uint64_t ClockTimer::initClockTimer(ClockTimer *this)
{
  *(unsigned char *)this = 0;
  *((void *)this + 1) = 1;
  *((void *)this + 2) = 0x100000001;
  *((unsigned char *)this + 24) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 4) = 0;
  CurrentMicrosec = (ClockTimer *)ClockTimer::getCurrentMicrosec(this);
  if (!CurrentMicrosec) {
    errWarnInternal("/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/timer.cpp", 571, "mrecutil/timer", 4, "%s", (const char *)&warnStr_mrecutil_timer_W_BAD_ELAPSED_MICROSEC);
  }
  *(unsigned char *)this = 1;
  *((void *)this + 5) = ClockTimer::getCurrentMicrosec(CurrentMicrosec);
  uint64_t result = getrusage(0, &v4);
  *((void *)this + 6) = v4.ru_stime.tv_usec
                        + (uint64_t)v4.ru_utime.tv_usec
                        + 1000000 * (v4.ru_stime.tv_sec + v4.ru_utime.tv_sec);
  return result;
}

double ClockTimer::initCyclesPerSecondAndSpeedFactor(ClockTimer *this)
{
  *((void *)this + 1) = 1;
  *(void *)&double result = 0x100000001;
  *((void *)this + 2) = 0x100000001;
  *((unsigned char *)this + 24) = 1;
  return result;
}

uint64_t ClockTimer::getCyclesPerSecond(ClockTimer *this)
{
  return *((void *)this + 1);
}

uint64_t ClockTimer::getDynamicSpeechRecognitionSpeedFactor(ClockTimer *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t ClockTimer::getStaticSpeechRecognitionSpeedFactor(ClockTimer *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t ClockTimer::useFreeTimeVoid(ClockTimer *this)
{
  return usleep(0x2710u);
}

int64x2_t ClockTimer::useFreeTime@<Q0>(int64x2_t *a1@<X8>)
{
  int64x2_t v5 = 0u;
  int64x2_t v6 = 0u;
  SnapTime::recordTime((SnapTime *)&v5, 1, 0, 0, 0);
  usleep(0x2710u);
  *a1 = 0u;
  a1[1] = 0u;
  SnapTime::recordTime((SnapTime *)a1, 1, 0, 0, 0);
  int64x2_t result = vsubq_s64(*a1, v5);
  int64x2_t v4 = vsubq_s64(a1[1], v6);
  *a1 = result;
  a1[1] = v4;
  return result;
}

__darwin_time_t ClockTimer::getPlatformAbsoluteTime(ClockTimer *this)
{
  gettimeofday(&v2, 0);
  return v2.tv_usec + 1000000 * v2.tv_sec;
}

uint64_t SnapTime::appendReadableTimeToString(SnapTime *this, DgnString *a2)
{
  DgnString::preAllocate((unint64_t)a2, 512);
  return DgnString::printfAppend(a2, "%15llu cycles (%11llu microsec, %11llu tickMicrosec, %11llu cpuMicrosec, %11llu cycleMicrosec)", v4, v5, v6, *(void *)this, *((void *)this + 1), *((void *)this + 2), *((void *)this + 3), 1000000 * (*(void *)this % (unint64_t)qword_26AB829E8) / qword_26AB829E8+ 1000000 * (*(void *)this / (unint64_t)qword_26AB829E8));
}

uint64_t SnapTime::sizeObject(uint64_t a1, int a2)
{
  return 32 * (a2 != 3);
}

void SetShadowDiagnosticComputeFullTimingStats(void)
{
  gShadowDiagnosticComputeFullTimingStats = *(unsigned char *)(gParDiagnosticComputeFullTimingStats + 41);
}

void MrecInitModule_trgrm_voc(void)
{
  if (!gParDebugWordFst)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugWordFst", byte_21409BA64, byte_21409BA64, 0, 0, 0);
    *uint64_t v1 = &unk_26C4E0858;
    gParDebugWordFst = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugWordFst);
  }
  if (!gParDebugWordFstSelfLoop)
  {
    timeval v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "DebugWordFstSelfLoop", byte_21409BA64, byte_21409BA64, 1, 0, 0);
    void *v3 = &unk_26C4E0858;
    gParDebugWordFstSelfLoop = (uint64_t)v3;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugWordFstSelfLoop);
  }
  if (!gParDebugWordFstShowPronlessWords)
  {
    uint64_t v4 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v4, "DebugWordFstShowPronlessWords", byte_21409BA64, byte_21409BA64, 0, 0, 0);
    *uint64_t v5 = &unk_26C4E0858;
    gParDebugWordFstShowPronlessWords = (uint64_t)v5;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugWordFstShowPronlessWords);
  }
  if (!gParDebugTransducerGrammarIO)
  {
    uint64_t v6 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v6, "DebugTransducerGrammarIO", byte_21409BA64, byte_21409BA64, 0, 0, 0);
    *int v7 = &unk_26C4E0858;
    gParDebugTransducerGrammarIO = (uint64_t)v7;
    unsigned int v8 = (uint64_t *)GlobalParamMgr::smpGlobalParamMgr;
    GlobalParamMgr::addParam(v8, (GlobalParam **)&gParDebugTransducerGrammarIO);
  }
}

StateMgr *DgnDelete<StateMgr>(StateMgr *result)
{
  if (result)
  {
    StateMgr::~StateMgr(result);
    return (StateMgr *)MemChunkFree(v1, 0);
  }
  return result;
}

RuleMgr *DgnDelete<RuleMgr>(RuleMgr *result)
{
  if (result)
  {
    RuleMgr::~RuleMgr(result);
    return (RuleMgr *)MemChunkFree(v1, 0);
  }
  return result;
}

void MrecInitModule_spdebug_sigproc(void)
{
  if (!gParDebugSignalProcessing)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugSignalProcessing", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    *uint64_t v1 = &unk_26C4E0858;
    gParDebugSignalProcessing = (uint64_t)v1;
    timeval v2 = (uint64_t *)GlobalParamMgr::smpGlobalParamMgr;
    GlobalParamMgr::addParam(v2, (GlobalParam **)&gParDebugSignalProcessing);
  }
}

void MrecInitModule_dsmset_mrecutil(void)
{
  if (!gParDebugDgnSharedMemSet)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugDgnSharedMemSet", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    *uint64_t v1 = &unk_26C4E0858;
    gParDebugDgnSharedMemSet = (uint64_t)v1;
    timeval v2 = (uint64_t *)GlobalParamMgr::smpGlobalParamMgr;
    GlobalParamMgr::addParam(v2, (GlobalParam **)&gParDebugDgnSharedMemSet);
  }
}

uint64_t *DgnSharedMemSet::createSet(DgnSharedMemSet *this, const DgnString *a2, const DgnString *a3)
{
  uint64_t v5 = MemChunkAlloc(0x130uLL, 0);
  DSMSetData::DSMSetData((DSMSetData *)v5, this, a2);
  DSMSetData::refMaybeCreateSetRecordBlobEx(v6);
  int64x2_t result = MemChunkAlloc(8uLL, 0);
  *int64x2_t result = (uint64_t)v5;
  return result;
}

uint64_t DgnSharedMemSet::getSetPrefixName(DgnSharedMemSet *this)
{
  return *(void *)this + 16;
}

uint64_t DgnSharedMemSet::getSetCacheDir(DgnSharedMemSet *this)
{
  return *(void *)this;
}

uint64_t DgnSharedMemSet::getMaybeReserveAndRefDSMIdEx(DSMSetData **this, char **a2, int a3)
{
  uint64_t v6 = *this;
  int v7 = *a2;
  if (!*((_DWORD *)a2 + 2)) {
    int v7 = &byte_2140B33BB;
  }
  char v8 = *v7;
  if (*v7)
  {
    int v9 = 0;
    uint64_t v10 = (unsigned __int8 *)(v7 + 1);
    do
    {
      HIDWORD(v11) = v9;
      LODWORD(v11) = v9;
      int v9 = (v11 >> 19) + v8;
      int v12 = *v10++;
      char v8 = v12;
    }
    while (v12);
  }
  else
  {
    int v9 = 0;
  }
  uint64_t v81 = -1;
  size_t v82 = 0;
  int v13 = *(_DWORD *)(*((void *)v6 + 34) + 48);
  unsigned int v14 = sysconf(29);
  if (v14 <= 0x10000) {
    size_t v15 = 0x10000;
  }
  else {
    size_t v15 = v14;
  }
  int v18 = (char *)mmap(0, v15, 3, 1, v13, 0);
  uint64_t v81 = (uint64_t)v18;
  size_t v82 = v15;
  if (v18 == (char *)-1)
  {
    if (*((_DWORD *)*this + 6)) {
      uint64_t v19 = (char *)*((void *)*this + 2);
    }
    else {
      uint64_t v19 = &byte_2140B33BB;
    }
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmset.cpp", 191, (uint64_t)"mrecutil/dsmset", 3, (uint64_t)"%.500s", v16, v17, (char)v19);
    int v18 = (char *)v81;
  }
  uint64_t v20 = (pthread_mutex_t *)((char *)v6 + 32);
  pthread_mutex_lock((pthread_mutex_t *)((char *)v6 + 32));
  ++*((_DWORD *)v6 + 24);
  *((void *)v6 + 13) = pthread_self();
  uint64_t v79 = (uint64_t)v6 + 112;
  if (DgnSharedLock::acquire((sem_t **)v6 + 14, 0xEA60u))
  {
    if (*((_DWORD *)*this + 6)) {
      unint64_t v23 = (char *)*((void *)*this + 2);
    }
    else {
      unint64_t v23 = &byte_2140B33BB;
    }
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmset.cpp", 201, (uint64_t)"mrecutil/dsmset", 2, (uint64_t)"%.500s", v21, v22, (char)v23);
  }
  int v70 = a3;
  uint64_t v72 = this;
  uint64_t v24 = 0;
  char v25 = 0;
  uint64_t v26 = (-1640531527 * v9);
  BOOL v69 = v18;
  uint64_t v27 = (int8x16_t *)(v18 + 56);
  uint64_t v28 = 0xFFFFFFFFLL;
  uint64_t v29 = -1023;
  while (v29)
  {
    uint64_t v30 = *((void *)v6 + 34);
    int8x16_t v31 = veorq_s8(*v27, v27[1]);
    *(int8x8_t *)v31.i8 = veor_s8(*(int8x8_t *)v31.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL));
    __int32 v32 = v27[2].i32[1];
    if ((v27[2].i32[0] ^ v27[2].i32[2] ^ v27[2].i32[3] ^ v32 ^ v31.i32[1] ^ v31.i32[0]) == v27[3].i32[0])
    {
      __int32 v33 = v27[2].i32[2];
      if (v33 != 1)
      {
        if (v33)
        {
          if (v32 == v26)
          {
            if (!*(_DWORD *)(v30 + v24 + 120))
            {
              DgnString::DgnString((DgnString *)&v77);
              DSMSetData::getDSMName(*v72, v29 + 1024, v26, v27[2].u32[0], (DgnString *)&v77);
              if (v78) {
                unint64_t v36 = v77;
              }
              else {
                unint64_t v36 = &byte_2140B33BB;
              }
              if (*((_DWORD *)a2 + 2)) {
                unint64_t v37 = *a2;
              }
              else {
                unint64_t v37 = &byte_2140B33BB;
              }
              if (!strcmp(v36, v37))
              {
                int v38 = *(_DWORD *)(v30 + v24 + 152);
                if (!v38)
                {
                  int v39 = v27[2].i32[3] + 1;
                  v27[2].i32[3] = v39;
                  uint64_t v40 = v27->i64[1] ^ v27->i64[0] ^ v27[1].i64[0] ^ v27[1].i64[1];
                  v27[3].i32[0] = v27[2].i32[0] ^ v27[2].i32[2] ^ v27[2].i32[1] ^ v39 ^ HIDWORD(v40) ^ v40;
                }
                *(_DWORD *)(v30 + v24 + DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)this + 152) = v38 + 1;
                char v25 = 1;
                int v35 = 7;
                uint64_t v28 = v29 + 1024;
              }
              else
              {
                int v35 = 0;
              }
              DgnString::~DgnString((DgnString *)&v77);
              uint64_t v20 = (pthread_mutex_t *)((char *)v6 + 32);
              goto LABEL_36;
            }
            if (*((_DWORD *)a2 + 2)) {
              BOOL v34 = *a2;
            }
            else {
              BOOL v34 = &byte_2140B33BB;
            }
            if (!strcmp(v34, (const char *)(*(void *)(v30 + v24 + 136) + 16)))
            {
              uint64_t v28 = (v29 + 1024);
              ++*(_DWORD *)(v30 + v24 + 152);
              goto LABEL_77;
            }
          }
        }
        else if (v28 == -1)
        {
          uint64_t v28 = (v29 + 1024);
        }
        else
        {
          uint64_t v28 = v28;
        }
      }
    }
    int v35 = 6;
LABEL_36:
    ++v29;
    v24 += 80;
    uint64_t v27 = (int8x16_t *)((char *)v27 + 56);
    if (v35 == 7) {
      break;
    }
  }
  if ((v25 & 1) != 0 || !v70)
  {
    if ((v25 & 1) == 0) {
      uint64_t v28 = 0xFFFFFFFFLL;
    }
  }
  else
  {
    if (v28 == -1)
    {
      if (*((_DWORD *)*v72 + 6)) {
        long long v41 = (char *)*((void *)*v72 + 2);
      }
      else {
        long long v41 = &byte_2140B33BB;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmset.cpp", 326, (uint64_t)"mrecutil/dsmset", 4, (uint64_t)"%.500s", v21, v22, (char)v41);
    }
    DgnString::DgnString((DgnString *)&v77);
    DSMSetData::getSysReserveName(v6, v26, v28, (DgnString *)&v77);
    int v42 = *((_DWORD *)a2 + 2);
    BOOL v43 = v42 != 0;
    int v44 = v42 - 1;
    if (v43) {
      int v45 = v44;
    }
    else {
      int v45 = 0;
    }
    int v46 = sysconf(29);
    unsigned int v47 = (v45 & 0xFFFFFFF0) + 32;
    unint64_t v48 = ((v46 - 1) + (unint64_t)v47) & ~(unint64_t)(v46 - 1);
    int v76 = -1;
    BOOL v49 = DSMHandle::open((DSMHandle *)&v76, *v72, a2, &v77, v48, 1, 1);
    uint64_t v50 = (DSMHeadData *)mmap(0, v48, 3, 1, v76, 0);
    unint64_t v74 = v50;
    unint64_t v75 = v48;
    if (v50 == (DSMHeadData *)-1 && v49)
    {
      DSMHandle::unlink((const char **)*v72, &v77, v51);
      goto LABEL_68;
    }
    if (v50 == (DSMHeadData *)-1)
    {
LABEL_68:
      if (*((_DWORD *)a2 + 2)) {
        uint64_t v55 = *a2;
      }
      else {
        uint64_t v55 = &byte_2140B33BB;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmset.cpp", 355, (uint64_t)"mrecutil/dsmset", 5, (uint64_t)"%.500s %.500s %llu", v52, v53, (char)v55);
      uint64_t v50 = v74;
    }
    DSMHeadData::init(v50, (const DgnString *)a2, 0);
    pthread_t v56 = pthread_self();
    uint64_t v71 = (ClockTimer *)getpid();
    unsigned int v73 = v47;
    __darwin_time_t PlatformAbsoluteTime = ClockTimer::getPlatformAbsoluteTime(v71);
    uint64_t v58 = *((void *)v6 + 34);
    uint64_t v59 = v58 + 80 * v28;
    *(_DWORD *)(v59 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = 1;
    *(void *)(v59 + 24) = v56;
    int v60 = v76;
    int v76 = -1;
    int v61 = *(_DWORD *)(v59 + 52);
    if (v61 != -1) {
      close(v61);
    }
    *(_DWORD *)(v59 + 52) = v60;
    uint64_t v62 = (void **)(v58 + 80 * v28 + 56);
    BOOL v63 = v74;
    unint64_t v64 = v75;
    unint64_t v74 = (DSMHeadData *)-1;
    if (v63 != (DSMHeadData *)-1) {
      munmap(*v62, *(void *)(v58 + 80 * v28 + 64));
    }
    *uint64_t v62 = v63;
    uint64_t v65 = v58 + 80 * v28;
    *(void *)(v65 + 64) = v64;
    *(void *)(v65 + 8) = 0;
    *(void *)(v65 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = (int)v71;
    *(void *)uint64_t v59 = PlatformAbsoluteTime;
    *(_DWORD *)(v65 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v73;
    *(_DWORD *)(v65 + 36) = 2;
    *(_DWORD *)(v65 + 44) = v26;
    uint64_t v66 = &v69[56 * v28];
    *(void *)uint64_t v66 = PlatformAbsoluteTime;
    *((void *)v66 + 1) = 0;
    *((void *)v66 + 2) = 0;
    *((void *)v66 + 3) = (int)v71;
    *((_DWORD *)v66 + 8) = v73;
    *((_DWORD *)v66 + 9) = v26;
    *((_DWORD *)v66 + 11) = 1;
    *((_DWORD *)v66 + 12) = v26 ^ PlatformAbsoluteTime ^ v71 ^ ((PlatformAbsoluteTime ^ (unint64_t)(int)v71) >> 32) ^ v73 ^ 3;
    __dmb(0xBu);
    *(_DWORD *)(v65 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = 1;
    *((_DWORD *)v66 + 10) = 2;
    DSMMappedPtr::~DSMMappedPtr((DSMMappedPtr *)&v74);
    DSMHandle::~DSMHandle((DSMHandle *)&v76);
    DgnString::~DgnString((DgnString *)&v77);
    uint64_t v20 = (pthread_mutex_t *)((char *)v6 + 32);
  }
LABEL_77:
  Latch<DgnSharedLock,TimeoutLatchAdapter>::~Latch(&v79);
  int v67 = *((_DWORD *)v6 + 24) - 1;
  *((_DWORD *)v6 + 24) = v67;
  if (!v67) {
    *((void *)v6 + 13) = 0;
  }
  pthread_mutex_unlock(v20);
  DSMMappedPtr::~DSMMappedPtr((DSMMappedPtr *)&v81);
  return v28;
}

void sub_213EA0DD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, pthread_mutex_t *a15, char a16, uint64_t a17, int a18, char a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24)
{
  Latch<DgnSharedLock,TimeoutLatchAdapter>::~Latch(&a24);
  int v27 = *(_DWORD *)(v24 + 96) - 1;
  *(_DWORD *)(v24 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = v27;
  if (!v27) {
    *(void *)(v24 + 104) = 0;
  }
  pthread_mutex_unlock(a15);
  DSMMappedPtr::~DSMMappedPtr((DSMMappedPtr *)(v25 - 96));
  _Unwind_Resume(a1);
}

void DSMHeadData::init(DSMHeadData *this, const DgnString *a2, uint64_t a3)
{
  unsigned int v4 = *((_DWORD *)a2 + 2);
  LODWORD(v5) = v4 - 1;
  if (v4) {
    unint64_t v5 = v5;
  }
  else {
    unint64_t v5 = 0;
  }
  *(_DWORD *)this = 0;
  *((_DWORD *)this + 1) = v5;
  *((void *)this + 1) = a3;
  if (v4 >= 2)
  {
    unint64_t v6 = 0;
    do
    {
      *((unsigned char *)this + v6 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = *(unsigned char *)(*(void *)a2 + v6);
      ++v6;
    }
    while (v6 < v5);
  }
  unsigned int v7 = (v5 & 0xFFFFFFF0) + 32;
  if (v5 < (v5 & 0xFFFFFFF0) + 16) {
    bzero((char *)this + v5 + 16, (v5 & 0xFFFFFFF0 | (v4 != 0)) - v4 + 15 + 1);
  }
  int v8 = 0;
  if (v7)
  {
    LODWORD(v9) = v7 >> 2;
    if (v7 >> 2 <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = v9;
    }
    uint64_t v10 = this;
    do
    {
      int v11 = *(_DWORD *)v10;
      uint64_t v10 = (DSMHeadData *)((char *)v10 + 4);
      v8 ^= v11;
      --v9;
    }
    while (v9);
  }
  *(_DWORD *)this = v8;
}

BOOL DgnSharedMemSet::waitTilCreatedAndMapEx(DSMSetData **this, uint64_t a2, char **a3, unsigned int a4)
{
  uint64_t v7 = *((void *)*this + 32);
  unsigned int v8 = a2;
  uint64_t v9 = (int8x16_t *)(v7 + 56 * a2);
  uint64_t v57 = *((void *)*this + 34);
  for (uint64_t i = &v9[2].i32[2]; *i == 2; a4 = v13 - 100)
  {
    BOOL isProcessAlive = DSMGlobalRecord::isProcessAlive(*(DSMGlobalRecord **)(v7 + 56 * v8 + 24));
    if (!a4 || !isProcessAlive) {
      break;
    }
    timespec __rqtp = (timespec)xmmword_21409BA80;
    nanosleep(&__rqtp, 0);
    int v13 = a4 <= 0x64 ? 100 : a4;
  }
  __int32 v14 = *i;
  if (*i != 2)
  {
    size_t v15 = *this;
    uint64_t v16 = (pthread_mutex_t *)((char *)*this + 32);
    pthread_mutex_lock(v16);
    ++*((_DWORD *)v15 + 24);
    uint64_t v58 = v15;
    *((void *)v15 + 13) = pthread_self();
    __rqtp.tv_sec = (__darwin_time_t)*this + 112;
    LODWORD(__rqtp.tv_nsec) = 2;
    LODWORD(__rqtp.tv_nsec) = DgnSharedLock::acquire((sem_t **)__rqtp.tv_sec, 0xEA60u);
    if (LODWORD(__rqtp.tv_nsec))
    {
      if (*((_DWORD *)*this + 6)) {
        uint64_t v19 = (char *)*((void *)*this + 2);
      }
      else {
        uint64_t v19 = &byte_2140B33BB;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmset.cpp", 496, (uint64_t)"mrecutil/dsmset", 2, (uint64_t)"%.500s", v17, v18, (char)v19);
    }
    uint64_t v20 = v7 + 56 * v8;
    int v22 = *(_DWORD *)(v20 + 32);
    uint64_t v21 = (_DWORD *)(v20 + 32);
    int8x16_t v23 = veorq_s8(*v9, v9[1]);
    *(int8x8_t *)v23.i8 = veor_s8(*(int8x8_t *)v23.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL));
    if ((v22 ^ *i ^ v21[1] ^ v21[3] ^ v23.i32[1] ^ v23.i32[0]) != v21[4]) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmset.cpp", 499, (uint64_t)"mrecutil/dsmset", 7, (uint64_t)"%d %.500s %.500s", v17, v18, a2);
    }
    if ((*(_DWORD *)(*((void *)*this + 32) + 56 * v8 + 40) - 3) >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmset.cpp", 503, (uint64_t)"mrecutil/dsmset", 8, (uint64_t)"%d %.500s %d %.500s", v17, v18, a2);
    }
    __int32 v56 = v14;
    uint64_t v24 = v57;
    uint64_t v25 = v57 + 80 * v8;
    int v27 = *(_DWORD *)(v25 + 40);
    uint64_t v26 = (int *)(v25 + 40);
    if (!v27)
    {
      uint64_t v54 = v16;
      DgnString::DgnString((DgnString *)&v62);
      DSMSetData::getSysName(*this, v21[1], a2, (DgnString *)&v62);
      __int32 v55 = *i;
      BOOL v28 = *i == 4;
      int v61 = -1;
      DSMHandle::open((DSMHandle *)&v61, *this, a3, &v62, 0xFFFFFFFFFFFFFFFFLL, v28, 0);
      int v31 = v61;
      if (v61 == -1)
      {
        if (*((_DWORD *)a3 + 2)) {
          __int32 v32 = *a3;
        }
        else {
          __int32 v32 = &byte_2140B33BB;
        }
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmset.cpp", 521, (uint64_t)"mrecutil/dsmset", 6, (uint64_t)"%.500s %.500s", v29, v30, (char)v32);
        int v31 = v61;
      }
      uint64_t v59 = -1;
      uint64_t v60 = 0;
      uint64_t v33 = *((void *)v21 - 3);
      if (v55 == 4) {
        int v34 = 3;
      }
      else {
        int v34 = 1;
      }
      uint64_t v59 = (uint64_t)mmap(0, *((void *)v21 - 3), v34, 1, v31, 0);
      uint64_t v60 = v33;
      if (v59 == -1)
      {
        if (*((_DWORD *)a3 + 2)) {
          unint64_t v37 = *a3;
        }
        else {
          unint64_t v37 = &byte_2140B33BB;
        }
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmset.cpp", 528, (uint64_t)"mrecutil/dsmset", 5, (uint64_t)"%.500s %.500s %llu", v35, v36, (char)v37);
      }
      *(void *)(v57 + 80 * a2) = v9->i64[0];
      uint64_t v38 = v57 + 80 * v8;
      *(void *)(v38 + 8) = *((void *)v21 - 2);
      *(_DWORD *)(v38 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = *v21;
      *(_DWORD *)(v38 + 36) = *i;
      *(void *)(v38 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = *((void *)v21 - 1);
      pthread_t v39 = pthread_self();
      uint64_t v40 = v57 + 80 * v8;
      int v41 = v61;
      int v61 = -1;
      int v44 = *(_DWORD *)(v40 + 48);
      BOOL v43 = (int *)(v40 + 48);
      int v42 = v44;
      *((void *)v43 - 3) = v39;
      if (v55 == 4) {
        int v45 = 9;
      }
      else {
        int v45 = 8;
      }
      if (v42 != -1) {
        close(v42);
      }
      *BOOL v43 = v41;
      int v46 = (void **)(v57 + 80 * v8 + 56);
      unint64_t v48 = (void *)v59;
      uint64_t v47 = v60;
      uint64_t v59 = -1;
      if (v48 != (void *)-1) {
        munmap(*v46, *(void *)(v57 + 80 * v8 + 64));
      }
      *int v46 = v48;
      *(void *)(v57 + 80 * v8 + 64) = v47;
      __dmb(0xBu);
      *uint64_t v26 = v45;
      DSMMappedPtr::~DSMMappedPtr((DSMMappedPtr *)&v59);
      DSMHandle::~DSMHandle((DSMHandle *)&v61);
      DgnString::~DgnString((DgnString *)&v62);
      uint64_t v16 = v54;
      uint64_t v24 = v57;
    }
    if (*((_DWORD *)a3 + 2)) {
      BOOL v49 = *a3;
    }
    else {
      BOOL v49 = &byte_2140B33BB;
    }
    __int32 v14 = v56;
    if (strcmp(v49, (const char *)(*(void *)(v24 + 80 * v8 + 56) + 16))) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmset.cpp", 561, (uint64_t)"mrecutil/dsmset", 9, (uint64_t)"%d %.500s %.500s %.500s", v50, v51, a2);
    }
    Latch<DgnSharedLock,TimeoutLatchAdapter>::~Latch(&__rqtp.tv_sec);
    int v52 = *((_DWORD *)v58 + 24) - 1;
    *((_DWORD *)v58 + 24) = v52;
    if (!v52) {
      *((void *)v58 + 13) = 0;
    }
    pthread_mutex_unlock(v16);
  }
  return v14 != 2;
}

void sub_213EA1508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, pthread_mutex_t *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,int a22,char a23,__int16 a24,char a25,char a26)
{
  DgnString::~DgnString((DgnString *)&a25);
  Latch<DgnSharedLock,TimeoutLatchAdapter>::~Latch((uint64_t *)(v26 - 96));
  int v28 = *(_DWORD *)(a17 + 96) - 1;
  *(_DWORD *)(a17 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = v28;
  if (!v28) {
    *(void *)(a17 + 104) = 0;
  }
  pthread_mutex_unlock(a14);
  _Unwind_Resume(a1);
}

char *DgnSharedMemSet::openDSMWithSizeEx(DSMSetData **a1, uint64_t a2, int a3, uint64_t *a4)
{
  unsigned int v8 = *a1;
  uint64_t v9 = *((void *)*a1 + 32);
  uint64_t v10 = *((void *)*a1 + 34);
  int v11 = (pthread_mutex_t *)((char *)*a1 + 32);
  pthread_mutex_lock(v11);
  ++*((_DWORD *)v8 + 24);
  *((void *)v8 + 13) = pthread_self();
  unsigned int v14 = a2;
  uint64_t v15 = v10 + 80 * a2;
  uint64_t v16 = (_DWORD *)(v15 + 40);
  switch(a3)
  {
    case 0:
      if (*(_DWORD *)(v9 + 56 * a2 + 40) != 2) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmset.cpp", 610, (uint64_t)"mrecutil/dsmset", 8, (uint64_t)"%d %.500s %d %.500s", v12, v13, a2);
      }
      if (a4) {
        *a4 = 0;
      }
      uint64_t v18 = 0;
      *uint64_t v16 = 2;
      goto LABEL_25;
    case 1:
      BOOL v43 = (_DWORD *)(v15 + 40);
      uint64_t v19 = *a4;
      uint64_t v20 = v10 + 80 * a2;
      uint64_t v21 = *(unsigned int *)(v20 + 32);
      int v44 = (unsigned int *)(v20 + 32);
      int v22 = sysconf(29);
      DgnString::DgnString((DgnString *)&v50);
      DSMSetData::getSysName(*a1, *(unsigned int *)(v10 + 80 * a2 + 44), a2, (DgnString *)&v50);
      uint64_t v23 = v10 + 80 * a2;
      uint64_t v25 = *(void *)(v23 + 56);
      uint64_t v24 = (DSMMappedPtr *)(v23 + 56);
      DgnString::DgnString((DgnString *)&v48, (const char *)(v25 + 16));
      unint64_t v26 = (v19 + v21 + (v22 - 1)) & ~(unint64_t)(v22 - 1);
      int v47 = -1;
      BOOL v27 = DSMHandle::open((DSMHandle *)&v47, *a1, &v48, &v50, v26, 1, 1);
      int v28 = (DSMHeadData *)mmap(0, v26, 3, 1, v47, 0);
      int v45 = v28;
      unint64_t v46 = v26;
      if (v28 == (DSMHeadData *)-1 && v27)
      {
        DSMHandle::unlink((const char **)*a1, &v50, v29);
      }
      else if (v28 != (DSMHeadData *)-1)
      {
        goto LABEL_17;
      }
      if (v49) {
        LOBYTE(v33) = (_BYTE)v48;
      }
      else {
        uint64_t v33 = &byte_2140B33BB;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmset.cpp", 663, (uint64_t)"mrecutil/dsmset", 5, (uint64_t)"%.500s %.500s %llu", v30, v31, (char)v33);
      int v28 = v45;
LABEL_17:
      DSMHeadData::init(v28, (const DgnString *)&v48, *a4);
      int v34 = v45;
      uint64_t v35 = *v44;
      uint64_t v36 = v10 + 80 * v14;
      *(void *)(v36 + 8) = *a4;
      DSMHandle::~DSMHandle((DSMHandle *)(v36 + 48));
      int v37 = v47;
      int v47 = -1;
      int v38 = *(_DWORD *)(v36 + 48);
      if (v38 != -1) {
        close(v38);
      }
      *(_DWORD *)(v36 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = v37;
      DSMMappedPtr::~DSMMappedPtr(v24);
      uint64_t v40 = v45;
      unint64_t v39 = v46;
      int v45 = (DSMHeadData *)-1;
      if (v40 != (DSMHeadData *)-1) {
        munmap(*(void **)v24, *(void *)(v10 + 80 * v14 + 64));
      }
      uint64_t v18 = (char *)v34 + v35;
      *(void *)uint64_t v24 = v40;
      *(void *)(v10 + 80 * v14 + 64) = v39;
      *BOOL v43 = 6;
      DSMMappedPtr::~DSMMappedPtr((DSMMappedPtr *)&v45);
      DSMHandle::~DSMHandle((DSMHandle *)&v47);
      DgnString::~DgnString((DgnString *)&v48);
      DgnString::~DgnString((DgnString *)&v50);
LABEL_25:
      int v41 = *((_DWORD *)v8 + 24) - 1;
      *((_DWORD *)v8 + 24) = v41;
      if (!v41) {
        *((void *)v8 + 13) = 0;
      }
      pthread_mutex_unlock(v11);
      return v18;
    case 2:
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmset.cpp", 622, (uint64_t)"mrecutil/dsmset", 1, (uint64_t)"%.500s", v12, v13, (char)"eDSMOM_ReadValidate");
      goto LABEL_11;
    case 3:
    case 4:
      uint64_t v17 = v10 + 80 * a2;
      uint64_t v18 = (char *)(*(void *)(v17 + 56) + *(unsigned int *)(v17 + 32));
      *a4 = *(void *)(v17 + 8);
      goto LABEL_25;
    default:
LABEL_11:
      uint64_t v18 = 0;
      goto LABEL_25;
  }
}

void sub_213EA1960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, char a19, __int16 a20,char a21,uint64_t a22,char a23)
{
  DSMHandle::~DSMHandle((DSMHandle *)&a19);
  DgnString::~DgnString((DgnString *)&a21);
  DgnString::~DgnString((DgnString *)&a23);
  int v26 = *(_DWORD *)(v24 + 96) - 1;
  *(_DWORD *)(v24 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = v26;
  if (!v26) {
    *(void *)(v24 + 104) = 0;
  }
  pthread_mutex_unlock(v23);
  _Unwind_Resume(a1);
}

uint64_t DgnSharedMemSet::closeDSMEx(DgnSharedMemSet *this, unsigned int a2)
{
  uint64_t v3 = *(void *)this;
  uint64_t v4 = *(void *)(*(void *)this + 272);
  unint64_t v5 = (pthread_mutex_t *)(*(void *)this + 32);
  pthread_mutex_lock(v5);
  ++*(_DWORD *)(v3 + 96);
  *(void *)(v3 + 104) = pthread_self();
  uint64_t v6 = v4 + 80 * a2;
  int v9 = *(_DWORD *)(v6 + 40);
  uint64_t v7 = (int *)(v6 + 40);
  int v8 = v9;
  if ((v9 - 10) <= 0xFFFFFFFD)
  {
    switch(v8)
    {
      case 2:
        int v10 = 3;
        break;
      case 6:
        int v10 = 7;
        break;
      case 4:
        int v10 = 5;
        break;
      default:
        goto LABEL_9;
    }
    *uint64_t v7 = v10;
  }
LABEL_9:
  int v11 = *(_DWORD *)(v3 + 96) - 1;
  *(_DWORD *)(v3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = v11;
  if (!v11) {
    *(void *)(v3 + 104) = 0;
  }
  return pthread_mutex_unlock(v5);
}

BOOL DgnSharedMemSet::createMaybeRemapDSMEx(DSMSetData **this, uint64_t a2, int a3)
{
  uint64_t v6 = *((void *)*this + 34);
  uint64_t v43 = -1;
  size_t v44 = 0;
  int v7 = *(_DWORD *)(v6 + 48);
  unsigned int v8 = sysconf(29);
  if (v8 <= 0x10000) {
    size_t v9 = 0x10000;
  }
  else {
    size_t v9 = v8;
  }
  uint64_t v12 = (char *)mmap(0, v9, 3, 1, v7, 0);
  uint64_t v43 = (uint64_t)v12;
  size_t v44 = v9;
  if (v12 == (char *)-1)
  {
    if (*((_DWORD *)*this + 6)) {
      uint64_t v13 = (char *)*((void *)*this + 2);
    }
    else {
      uint64_t v13 = &byte_2140B33BB;
    }
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmset.cpp", 757, (uint64_t)"mrecutil/dsmset", 3, (uint64_t)"%.500s", v10, v11, (char)v13);
    uint64_t v12 = (char *)v43;
  }
  unsigned int v14 = *this;
  uint64_t v15 = (pthread_mutex_t *)((char *)*this + 32);
  pthread_mutex_lock(v15);
  ++*((_DWORD *)v14 + 24);
  *((void *)v14 + 13) = pthread_self();
  int v41 = (sem_t **)((char *)*this + 112);
  BOOL v16 = DgnSharedLock::acquire(v41, 0xEA60u);
  BOOL v42 = v16;
  if (v16)
  {
    if (*((_DWORD *)*this + 6)) {
      uint64_t v19 = (char *)*((void *)*this + 2);
    }
    else {
      uint64_t v19 = &byte_2140B33BB;
    }
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmset.cpp", 765, (uint64_t)"mrecutil/dsmset", 2, (uint64_t)"%.500s", v17, v18, (char)v19);
  }
  if (a3) {
    int v20 = 4;
  }
  else {
    int v20 = 3;
  }
  BOOL v40 = 0;
  if ((a3 & 1) == 0)
  {
    uint64_t v21 = v6 + 80 * a2;
    int v22 = (unsigned char *)(v21 + 56);
    BOOL v16 = DSMMappedPtr::remap((DSMMappedPtr *)(v21 + 56), *(_DWORD *)(v21 + 48), 0, &v40);
    if (!v16)
    {
      DgnString::DgnString((DgnString *)&v39);
      DSMSetData::getSysName(*this, *(unsigned int *)(v6 + 80 * a2 + 44), a2, (DgnString *)&v39);
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmset.cpp", 795, (uint64_t)"mrecutil/dsmset", 5, (uint64_t)"%.500s %.500s %llu", v23, v24, *v22 + 16);
      DgnString::~DgnString((DgnString *)&v39);
    }
  }
  __darwin_time_t PlatformAbsoluteTime = ClockTimer::getPlatformAbsoluteTime((ClockTimer *)v16);
  uint64_t v26 = v6 + 80 * a2;
  BOOL v27 = (int *)(v26 + 40);
  *(void *)uint64_t v26 = PlatformAbsoluteTime;
  int v29 = *(_DWORD *)(v26 + 44);
  int v28 = (unsigned int *)(v26 + 44);
  *(_DWORD *)(v26 + 36) = v20;
  uint64_t v30 = *(void *)(v26 + 64);
  uint64_t v31 = &v12[56 * a2];
  *((void *)v31 + 1) = v30;
  long long v32 = *(_OWORD *)(v26 + 8);
  *((_OWORD *)v31 + 1) = v32;
  int v33 = *(_DWORD *)(v26 + 32);
  *((_DWORD *)v31 + 8) = v33;
  *((_DWORD *)v31 + 9) = v29;
  *(void *)uint64_t v31 = PlatformAbsoluteTime;
  *((_DWORD *)v31 + 12) = *((_DWORD *)v31 + 11) ^ v32 ^ v30 ^ PlatformAbsoluteTime ^ DWORD2(v32) ^ (((unint64_t)v32 ^ v30 ^ PlatformAbsoluteTime ^ *((void *)&v32 + 1)) >> 32) ^ v29 ^ v33 ^ v20;
  if (a3) {
    int v34 = 9;
  }
  else {
    int v34 = 8;
  }
  __dmb(0xBu);
  *((_DWORD *)v31 + 10) = v20;
  *BOOL v27 = v34;
  DSMHandle::~DSMHandle((DSMHandle *)(v28 + 2));
  DgnString::DgnString((DgnString *)&v39);
  DSMSetData::getSysReserveName(*this, *v28, a2, (DgnString *)&v39);
  DSMHandle::unlink((const char **)*this, &v39, v35);
  BOOL v36 = v40;
  DgnString::~DgnString((DgnString *)&v39);
  Latch<DgnSharedLock,TimeoutLatchAdapter>::~Latch((uint64_t *)&v41);
  int v37 = *((_DWORD *)v14 + 24) - 1;
  *((_DWORD *)v14 + 24) = v37;
  if (!v37) {
    *((void *)v14 + 13) = 0;
  }
  pthread_mutex_unlock(v15);
  DSMMappedPtr::~DSMMappedPtr((DSMMappedPtr *)&v43);
  return v36;
}

void sub_213EA1DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  Latch<DgnSharedLock,TimeoutLatchAdapter>::~Latch((uint64_t *)va);
  int v10 = *(_DWORD *)(v8 + 96) - 1;
  *(_DWORD *)(v8 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = v10;
  if (!v10) {
    *(void *)(v8 + 104) = 0;
  }
  pthread_mutex_unlock(v7);
  DSMMappedPtr::~DSMMappedPtr((DSMMappedPtr *)va1);
  _Unwind_Resume(a1);
}

uint64_t DgnSharedMemSet::getGlobalState(DgnSharedMemSet *this, unsigned int a2)
{
  return *(unsigned int *)(*(void *)(*(void *)this + 256) + 56 * a2 + 40);
}

BOOL DgnSharedMemSet::isCurThreadDSMOwner(DgnSharedMemSet *this, unsigned int a2)
{
  uint64_t v2 = *(void *)(*(void *)this + 272);
  if (!*(_DWORD *)(v2 + 80 * a2 + 40)) {
    return 0;
  }
  uint64_t v3 = v2 + 80 * a2;
  uint64_t v4 = *(void *)(v3 + 16);
  pthread_t v5 = *(pthread_t *)(v3 + 24);
  pid_t v6 = getpid();
  pthread_t v7 = pthread_self();
  return v4 == v6 && v5 == v7;
}

uint64_t DgnSharedMemSet::unrefDSMEx(DSMSetData **this, uint64_t a2)
{
  uint64_t v4 = *this;
  uint64_t v5 = *((void *)*this + 34);
  uint64_t v6 = v5 + 80 * a2;
  pthread_t v7 = (pthread_mutex_t *)((char *)*this + 32);
  pthread_mutex_lock(v7);
  ++*((_DWORD *)v4 + 24);
  *((void *)v4 + 13) = pthread_self();
  uint64_t v8 = (_DWORD *)(v6 + 72);
  int v9 = *(_DWORD *)(v6 + 72) - 1;
  *(_DWORD *)(v6 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = v9;
  if (!v9)
  {
    uint64_t v38 = v5;
    unint64_t v39 = (void *)v6;
    uint64_t v44 = -1;
    size_t v45 = 0;
    int v10 = *(_DWORD *)(*((void *)*this + 34) + 48);
    BOOL v40 = v7;
    unsigned int v11 = sysconf(29);
    if (v11 <= 0x10000) {
      size_t v12 = 0x10000;
    }
    else {
      size_t v12 = v11;
    }
    uint64_t v44 = (uint64_t)mmap(0, v12, 3, 1, v10, 0);
    size_t v45 = v12;
    if (v44 == -1)
    {
      if (*((_DWORD *)*this + 6)) {
        uint64_t v15 = (char *)*((void *)*this + 2);
      }
      else {
        uint64_t v15 = &byte_2140B33BB;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmset.cpp", 1024, (uint64_t)"mrecutil/dsmset", 3, (uint64_t)"%.500s", v13, v14, (char)v15);
    }
    BOOL v42 = (sem_t **)((char *)*this + 112);
    if (DgnSharedLock::acquire(v42, 0xEA60u))
    {
      if (*((_DWORD *)*this + 6)) {
        uint64_t v18 = (char *)*((void *)*this + 2);
      }
      else {
        uint64_t v18 = &byte_2140B33BB;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmset.cpp", 1029, (uint64_t)"mrecutil/dsmset", 2, (uint64_t)"%.500s", v16, v17, (char)v18);
    }
    uint64_t v19 = (int8x16_t *)(v44 + 56 * a2);
    int v20 = &v19[2].i32[2];
    int8x16_t v21 = veorq_s8(*v19, v19[1]);
    int8x8_t v22 = veor_s8(*(int8x8_t *)v21.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL));
    uint64_t v24 = v19 + 2;
    __int32 v23 = v19[2].i32[0];
    uint64_t v26 = &v19[2].i32[1];
    __int32 v25 = v19[2].i32[1];
    int v28 = &v19[2].i32[3];
    __int32 v27 = v19[2].i32[3];
    int v29 = v19 + 3;
    if ((v23 ^ v19[2].i32[2] ^ v25 ^ v27 ^ v22.i32[1] ^ v22.i32[0]) != v19[3].i32[0] || *v20 == 1)
    {
      if (*v20 != 1)
      {
        DSMGlobalRecord::reset(v44 + 56 * a2);
        *int v20 = 1;
        int8x16_t v30 = veorq_s8(*v19, v19[1]);
        *(int8x8_t *)v30.i8 = veor_s8(*(int8x8_t *)v30.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL));
        v29->i32[0] = v24->i32[0] ^ *v20 ^ *v26 ^ *v28 ^ v30.i32[1] ^ v30.i32[0];
      }
      goto LABEL_26;
    }
    if (*v20 == 2)
    {
      DgnString::DgnString((DgnString *)v41);
      DSMSetData::getSysReserveName(*this, *v26, a2, (DgnString *)v41);
      DSMHandle::unlink((const char **)*this, v41, v31);
      if (*v28 < 2)
      {
        DSMGlobalRecord::reset((uint64_t)v19);
      }
      else
      {
        DSMGlobalRecord::reset((uint64_t)v19);
        *int v20 = 1;
        int8x16_t v32 = veorq_s8(*v19, v19[1]);
        *(int8x8_t *)v32.i8 = veor_s8(*(int8x8_t *)v32.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL));
        v29->i32[0] = v24->i32[0] ^ *v20 ^ *v26 ^ *v28 ^ v32.i32[1] ^ v32.i32[0];
      }
    }
    else
    {
      __int32 v33 = v27 - 1;
      *int v28 = v33;
      v29->i32[0] = v23 ^ v25 ^ *v20 ^ v33 ^ v22.i32[1] ^ v22.i32[0];
      if (v33)
      {
LABEL_26:
        uint64_t v35 = v38 + 80 * a2;
        DSMHandle::~DSMHandle((DSMHandle *)(v35 + 48));
        DSMHandle::~DSMHandle((DSMHandle *)(v35 + 52));
        DSMMappedPtr::~DSMMappedPtr((DSMMappedPtr *)(v35 + 56));
        *(_DWORD *)(v35 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = 0;
        __dmb(0xBu);
        *unint64_t v39 = 0;
        v39[1] = 0;
        *(void *)(v35 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = -1;
        *(void *)(v35 + 24) = -1;
        *(void *)(v35 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
        *(_DWORD *)(v35 + 44) = 0;
        *uint64_t v8 = 0;
        Latch<DgnSharedLock,TimeoutLatchAdapter>::~Latch((uint64_t *)&v42);
        DSMMappedPtr::~DSMMappedPtr((DSMMappedPtr *)&v44);
        pthread_t v7 = v40;
        goto LABEL_27;
      }
      DgnString::DgnString((DgnString *)v41);
      DSMSetData::getSysName(*this, *v26, a2, (DgnString *)v41);
      DSMHandle::unlink((const char **)*this, v41, v34);
      DSMGlobalRecord::reset((uint64_t)v19);
    }
    DgnString::~DgnString((DgnString *)v41);
    goto LABEL_26;
  }
LABEL_27:
  int v36 = *((_DWORD *)v4 + 24) - 1;
  *((_DWORD *)v4 + 24) = v36;
  if (!v36) {
    *((void *)v4 + 13) = 0;
  }
  return pthread_mutex_unlock(v7);
}

void sub_213EA22E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, pthread_mutex_t *a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  Latch<DgnSharedLock,TimeoutLatchAdapter>::~Latch(&a17);
  DSMMappedPtr::~DSMMappedPtr((DSMMappedPtr *)&a19);
  int v21 = *(_DWORD *)(v19 + 96) - 1;
  *(_DWORD *)(v19 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = v21;
  if (!v21) {
    *(void *)(v19 + 104) = 0;
  }
  pthread_mutex_unlock(a14);
  _Unwind_Resume(a1);
}

DgnString *DgnSharedMemSet::getMappedDSMName@<X0>(DgnSharedMemSet *this@<X0>, unsigned int a2@<W1>, DgnString *a3@<X8>)
{
  return DgnString::DgnString(a3, (const char *)(*(void *)(*(void *)(*(void *)this + 272) + 80 * a2 + 56) + 16));
}

void DgnSharedMemSet::printSize(DSMSetData **this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmset.cpp", 1116, (DgnString *)&v36);
  if (v37) {
    uint64_t v16 = (char *)v36;
  }
  else {
    uint64_t v16 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_2140B33BB, a3, &byte_2140B33BB, v16);
  DgnString::~DgnString((DgnString *)&v36);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_2140B33BB);
  int v21 = *this;
  if (*this)
  {
    unint64_t v35 = 0;
    unint64_t v36 = 0;
    uint64_t v22 = (a3 + 1);
    unint64_t v34 = 0;
    DSMSetData::printSize(v21, 0xFFFFFFFFLL, v22, &v36, &v35, &v34);
    *a4 += v36;
    *a5 += v35;
    *a6 += v34;
  }
  else
  {
    uint64_t v22 = (a3 + 1);
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v23 = 4;
  }
  else {
    uint64_t v23 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmset.cpp", 1119, (DgnString *)&v36);
  if (v37) {
    int v28 = (char *)v36;
  }
  else {
    int v28 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v24, v25, v26, v27, v22, &byte_2140B33BB, (34 - a3), (34 - a3), v28, v23, v23, 0);
  DgnString::~DgnString((DgnString *)&v36);
  *a4 += v23;
  *a5 += v23;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmset.cpp", 1121, (DgnString *)&v36);
  if (v37) {
    __int32 v33 = (char *)v36;
  }
  else {
    __int32 v33 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v29, v30, v31, v32, a3, &byte_2140B33BB, (35 - a3), (35 - a3), v33, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v36);
}

void sub_213EA2588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void DSMSetData::DSMSetData(DSMSetData *this, const DgnString *a2, const DgnString *a3)
{
  uint64_t v5 = DgnString::DgnString(this, a2);
  DgnString::DgnString((DgnString *)((char *)v5 + 16), a3);
  recursive_mutex_init((_opaque_pthread_mutex_t *)((char *)this + 32));
  *((_DWORD *)this + 24) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = -1;
  *((void *)this + 15) = 0;
  *((_OWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((void *)this + 36) = -1;
  *((_DWORD *)this + 74) = -1;
}

void sub_213EA2614(_Unwind_Exception *a1)
{
  DgnString::~DgnString(v2);
  DgnString::~DgnString(v1);
  _Unwind_Resume(a1);
}

void UttFile::printSize(UttFile *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/uttfile.cpp", 148, (DgnString *)&v85);
  if (v86) {
    uint64_t v16 = v85;
  }
  else {
    uint64_t v16 = &unk_21409BB0A;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_21409BB0A, a3, &unk_21409BB0A, v16);
  DgnString::~DgnString((DgnString *)&v85);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_21409BB0A);
  uint64_t v21 = (a3 + 1);
  uint64_t v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/uttfile.cpp", 150, (DgnString *)&v85);
  if (v86) {
    uint64_t v27 = v85;
  }
  else {
    uint64_t v27 = &unk_21409BB0A;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_21409BB0A, (34 - a3), (34 - a3), v27, 1, 1, 0);
  uint64_t v82 = a3;
  DgnString::~DgnString((DgnString *)&v85);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/uttfile.cpp", 152, (DgnString *)&v85);
  if (v86) {
    uint64_t v32 = v85;
  }
  else {
    uint64_t v32 = &unk_21409BB0A;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_21409BB0A, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v85);
  *a4 += 4;
  *a5 += 4;
  uint64_t v33 = sizeObject((uint64_t)this + 8, 0);
  uint64_t v34 = sizeObject((uint64_t)this + 8, 1);
  uint64_t v35 = sizeObject((uint64_t)this + 8, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/uttfile.cpp", 154, (DgnString *)&v85);
  if (v86) {
    BOOL v40 = v85;
  }
  else {
    BOOL v40 = &unk_21409BB0A;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v36, v37, v38, v39, v21, &unk_21409BB0A, v22, v22, v40, v33, v34, v35);
  DgnString::~DgnString((DgnString *)&v85);
  *a4 += v33;
  *a5 += v34;
  *a6 += v35;
  uint64_t v41 = FileSpec::sizeObject((uint64_t)this + 48);
  uint64_t v42 = FileSpec::sizeObject((uint64_t)this + 48);
  uint64_t v43 = FileSpec::sizeObject((uint64_t)this + 48);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/uttfile.cpp", 155, (DgnString *)&v85);
  if (v86) {
    unint64_t v48 = v85;
  }
  else {
    unint64_t v48 = &unk_21409BB0A;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v44, v45, v46, v47, v21, &unk_21409BB0A, v22, v22, v48, v41, v42, v43);
  DgnString::~DgnString((DgnString *)&v85);
  *a4 += v41;
  *a5 += v42;
  *a6 += v43;
  uint64_t v49 = *((void *)this + 8);
  if (v49)
  {
    uint64_t v84 = 0;
    uint64_t v85 = 0;
    uint64_t v83 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, void **, uint64_t *, uint64_t *))(*(void *)v49 + 16))(v49, 0xFFFFFFFFLL, v21, &v85, &v84, &v83);
    *a4 += (unint64_t)v85;
    *a5 += v84;
    *a6 += v83;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v50 = 4;
  }
  else {
    uint64_t v50 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/uttfile.cpp", 156, (DgnString *)&v85);
  if (v86) {
    __int32 v55 = v85;
  }
  else {
    __int32 v55 = &unk_21409BB0A;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v51, v52, v53, v54, v21, &unk_21409BB0A, v22, v22, v55, v50, v50, 0);
  DgnString::~DgnString((DgnString *)&v85);
  *a4 += v50;
  *a5 += v50;
  uint64_t v56 = *((void *)this + 9);
  if (v56)
  {
    uint64_t v84 = 0;
    uint64_t v85 = 0;
    uint64_t v83 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, void **, uint64_t *, uint64_t *))(*(void *)v56 + 16))(v56, 0xFFFFFFFFLL, v21, &v85, &v84, &v83);
    *a4 += (unint64_t)v85;
    *a5 += v84;
    *a6 += v83;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v57 = 4;
  }
  else {
    uint64_t v57 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/uttfile.cpp", 158, (DgnString *)&v85);
  if (v86) {
    uint64_t v62 = v85;
  }
  else {
    uint64_t v62 = &unk_21409BB0A;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, v21, &unk_21409BB0A, v22, v22, v62, v57, v57, 0);
  DgnString::~DgnString((DgnString *)&v85);
  *a4 += v57;
  *a5 += v57;
  uint64_t v63 = *((void *)this + 10);
  if (v63)
  {
    uint64_t v84 = 0;
    uint64_t v85 = 0;
    uint64_t v83 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, void **, uint64_t *, uint64_t *))(*(void *)v63 + 16))(v63, 0xFFFFFFFFLL, v21, &v85, &v84, &v83);
    *a4 += (unint64_t)v85;
    *a5 += v84;
    *a6 += v83;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v64 = 4;
  }
  else {
    uint64_t v64 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/uttfile.cpp", 159, (DgnString *)&v85);
  if (v86) {
    BOOL v69 = v85;
  }
  else {
    BOOL v69 = &unk_21409BB0A;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v65, v66, v67, v68, v21, &unk_21409BB0A, v22, v22, v69, v64, v64, 0);
  DgnString::~DgnString((DgnString *)&v85);
  *a4 += v64;
  *a5 += v64;
  uint64_t v70 = *((void *)this + 11);
  if (v70)
  {
    uint64_t v84 = 0;
    uint64_t v85 = 0;
    uint64_t v83 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, void **, uint64_t *, uint64_t *))(*(void *)v70 + 16))(v70, 0xFFFFFFFFLL, v21, &v85, &v84, &v83);
    *a4 += (unint64_t)v85;
    *a5 += v84;
    *a6 += v83;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v71 = 4;
  }
  else {
    uint64_t v71 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/uttfile.cpp", 160, (DgnString *)&v85);
  if (v86) {
    int v76 = v85;
  }
  else {
    int v76 = &unk_21409BB0A;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v72, v73, v74, v75, v21, &unk_21409BB0A, v22, v22, v76, v71, v71, 0);
  DgnString::~DgnString((DgnString *)&v85);
  *a4 += v71;
  *a5 += v71;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/uttfile.cpp", 161, (DgnString *)&v85);
  if (v86) {
    uint64_t v81 = v85;
  }
  else {
    uint64_t v81 = &unk_21409BB0A;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v77, v78, v79, v80, v82, &unk_21409BB0A, (35 - v82), (35 - v82), v81, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v85);
}

void sub_213EA2D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

size_t xprintStringFancy(size_t result, int a2, int a3, const char *a4, int a5)
{
  pthread_t v7 = (char *)result;
  uint64_t v8 = DgnPrinterMgr::smpDgnPrinterMgr;
  if (DgnPrinterMgr::smpDgnPrinterMgr)
  {
    if (*(void *)DgnPrinterMgr::smpDgnPrinterMgr == -1
      || (unsigned int v11 = pthread_getspecific(*(void *)DgnPrinterMgr::smpDgnPrinterMgr)) == 0)
    {
      unsigned int v11 = (void *)(v8 + 8);
    }
    return DgnPrinter::xprint((size_t)v11, v7, a2, a3, a4, a5);
  }
  else
  {
    if (a3) {
      int64x2_t result = MrecInitModule_sdpres_sdapi();
    }
    if (a2)
    {
      return xalogString(v7);
    }
  }
  return result;
}

size_t DgnPrinter::xprint(size_t this, char *a2, int a3, int a4, const char *a5, int a6)
{
  uint64_t v11 = this;
  if (a5)
  {
    this = strlen(a5);
    int v12 = this;
    if (!a4) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  int v12 = 0;
  if (a4) {
LABEL_3:
  }
    this = MrecInitModule_sdpres_sdapi();
LABEL_4:
  if (a3)
  {
    this = strlen((const char *)(v11 + 212));
    unsigned int v17 = this;
    int v13 = *a2;
    if (*a2)
    {
      while (1)
      {
        if (*(unsigned char *)(v11 + 8404)) {
          goto LABEL_7;
        }
        if (v13 != 10 && this == 8190) {
          break;
        }
LABEL_8:
        char v14 = *a2;
        size_t v15 = (this + 1);
        unsigned int v17 = this + 1;
        *(unsigned char *)(v11 + this + 212) = v14;
        if (*a2 == 10)
        {
          *(unsigned char *)(v11 + v15 + 212) = 0;
          xalogString((const char *)(v11 + 212));
          size_t v15 = 0;
          unsigned int v17 = 0;
          *(unsigned char *)(v11 + 8404) = 1;
        }
        int v16 = *++a2;
        int v13 = v16;
        this = v15;
        if (!v16) {
          goto LABEL_19;
        }
      }
      *(unsigned char *)(v11 + 8402) = 0;
      DgnPrinter::xprint((DgnPrinter *)v11, "\n[forced newline for overly long log line]\n", 1, 0, a5, 0);
      unsigned int v17 = 0;
      if (!*(unsigned char *)(v11 + 8404))
      {
        LODWORD(this) = 0;
        goto LABEL_8;
      }
LABEL_7:
      DgnPrinter::addLinePrefix((DgnPrinter *)v11, (char *)(v11 + 212), 0x1FFEu, &v17, a5, v12, a6);
      *(unsigned char *)(v11 + 8404) = 0;
      LODWORD(this) = v17;
      goto LABEL_8;
    }
    LODWORD(v15) = this;
LABEL_19:
    *(unsigned char *)(v11 + v15 + 212) = 0;
  }
  return this;
}

void xprintf(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  uint64_t v5 = (const char *)MEMORY[0x270FA5388](a1, a2, a3, a4, a5);
  uint64_t v16 = *MEMORY[0x263EF8340];
  DgnString::DgnString((DgnString *)&v14);
  v11[0] = 0;
  unsigned int __size = 0x2000;
  char __size_4 = 0;
  Buffer = (char *)DgnBuffer::getBuffer((DgnBuffer *)v11, 0);
  for (size_t i = __size; ; size_t i = __size)
  {
    int v8 = vsnprintf(Buffer, i, v5, va);
    if ((v8 & 0x80000000) == 0 && v8 < i) {
      break;
    }
    Buffer = (char *)DgnBuffer::getBuffer((DgnBuffer *)v11, 1);
  }
  if (v15) {
    int v9 = v14;
  }
  else {
    int v9 = &byte_2140B33BB;
  }
  if (__size_4) {
    int v10 = v9;
  }
  else {
    int v10 = v11;
  }
  xprintStringFancy((size_t)v10, 1, 1, 0, 0);
  DgnString::~DgnString((DgnString *)&v14);
}

void sub_213EA3118(_Unwind_Exception *a1)
{
  DgnString::~DgnString(v1);
  _Unwind_Resume(a1);
}

void xlprintf(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  uint64_t v5 = (const char *)MEMORY[0x270FA5388](a1, a2, a3, a4, a5);
  uint64_t v16 = *MEMORY[0x263EF8340];
  DgnString::DgnString((DgnString *)&v14);
  v11[0] = 0;
  unsigned int __size = 0x2000;
  char __size_4 = 0;
  Buffer = (char *)DgnBuffer::getBuffer((DgnBuffer *)v11, 0);
  for (size_t i = __size; ; size_t i = __size)
  {
    int v8 = vsnprintf(Buffer, i, v5, va);
    if ((v8 & 0x80000000) == 0 && v8 < i) {
      break;
    }
    Buffer = (char *)DgnBuffer::getBuffer((DgnBuffer *)v11, 1);
  }
  if (v15) {
    int v9 = v14;
  }
  else {
    int v9 = &byte_2140B33BB;
  }
  if (__size_4) {
    int v10 = v9;
  }
  else {
    int v10 = v11;
  }
  xprintStringFancy((size_t)v10, 1, 0, 0, 0);
  DgnString::~DgnString((DgnString *)&v14);
}

void sub_213EA3278(_Unwind_Exception *a1)
{
  DgnString::~DgnString(v1);
  _Unwind_Resume(a1);
}

void xgenprintf(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  int v5 = MEMORY[0x270FA5388](a1, a2, a3, a4, a5);
  pthread_t v7 = v6;
  int v9 = v8;
  int v10 = v5;
  uint64_t v21 = *MEMORY[0x263EF8340];
  DgnString::DgnString((DgnString *)&v19);
  v16[0] = 0;
  unsigned int __size = 0x2000;
  char __size_4 = 0;
  Buffer = (char *)DgnBuffer::getBuffer((DgnBuffer *)v16, 0);
  for (size_t i = __size; ; size_t i = __size)
  {
    int v13 = vsnprintf(Buffer, i, v7, va);
    if ((v13 & 0x80000000) == 0 && v13 < i) {
      break;
    }
    Buffer = (char *)DgnBuffer::getBuffer((DgnBuffer *)v16, 1);
  }
  if (v20) {
    char v14 = v19;
  }
  else {
    char v14 = &byte_2140B33BB;
  }
  if (__size_4) {
    int v15 = v14;
  }
  else {
    int v15 = v16;
  }
  xprintStringFancy((size_t)v15, v10, v9, 0, 0);
  DgnString::~DgnString((DgnString *)&v19);
}

void sub_213EA33E8(_Unwind_Exception *a1)
{
  DgnString::~DgnString(v1);
  _Unwind_Resume(a1);
}

size_t xprintString(const char *a1)
{
  return xprintStringFancy((size_t)a1, 1, 1, 0, 0);
}

size_t xlprintString(const char *a1)
{
  return xprintStringFancy((size_t)a1, 1, 0, 0, 0);
}

void DgnPrinterMgr::DgnPrinterMgr(DgnPrinterMgr *this)
{
  *((void *)this + 1) = ClockTimer::getCurrentMicrosec((ClockTimer *)&ClockTimer::smClockTimer);
  *((unsigned char *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
  *((unsigned char *)this + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
  *((_DWORD *)this + 54) = 0;
  *((unsigned char *)this + 220) = 0;
  *((unsigned char *)this + 8412) = 1;
  DgnReadWriteLock::DgnReadWriteLock((DgnPrinterMgr *)((char *)this + 8416));
  recursive_mutex_init((_opaque_pthread_mutex_t *)((char *)this + 8848));
  *((_DWORD *)this + 2228) = 0;
  *((void *)this + 1115) = 0;
  pthread_key_t v4 = 0;
  int v2 = pthread_key_create(&v4, 0);
  pthread_key_t v3 = v4;
  if (v2) {
    pthread_key_t v3 = -1;
  }
  *(void *)this = v3;
  *((unsigned char *)this + 8744) = 0;
  *((_DWORD *)this + 2211) = 0;
  *((_OWORD *)this + 558) = 0u;
  *((unsigned char *)this + 8944) = 0;
}

void sub_213EA3504(_Unwind_Exception *a1)
{
  DgnLock::~DgnLock(v3);
  DgnReadWriteLock::~DgnReadWriteLock(v2);
  DgnPrinter::~DgnPrinter(v1);
  _Unwind_Resume(a1);
}

void DgnPrinter::DgnPrinter(DgnPrinter *this)
{
  *(void *)this = ClockTimer::getCurrentMicrosec((ClockTimer *)&ClockTimer::smClockTimer);
  *((unsigned char *)this + 8) = 0;
  *((unsigned char *)this + 108) = 0;
  *((_DWORD *)this + 52) = 0;
  *((unsigned char *)this + 212) = 0;
  *((unsigned char *)this + 8404) = 1;
}

void DgnPrinterMgr::startupDgnPrinterMgr(DgnPrinterMgr *this)
{
  uint64_t v1 = MemChunkAlloc(0x22F8uLL, 0);
  DgnPrinterMgr::DgnPrinterMgr((DgnPrinterMgr *)v1);
  DgnPrinterMgr::smpDgnPrinterMgr = v2;
}

uint64_t DgnPrinterMgr::setAsCurrentPrinter(DgnPrinterMgr *this, DgnPrinter *a2)
{
  pthread_key_t v3 = (DgnPrinterMgr *)pthread_getspecific(*(void *)DgnPrinterMgr::smpDgnPrinterMgr);
  if (v3) {
    BOOL v4 = v3 == this;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    char v5 = pthread_self();
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/xprhelp.cpp", 173, (uint64_t)"mrecutil/xprhelp", 2, (uint64_t)"%llu", v6, v7, v5);
  }
  pthread_key_t v8 = *(void *)DgnPrinterMgr::smpDgnPrinterMgr;

  return pthread_setspecific(v8, this);
}

void DgnPrinterMgr::printSize(DgnPrinterMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/xprhelp.cpp", 183, (DgnString *)&v74);
  if (v75) {
    uint64_t v16 = (char *)v74;
  }
  else {
    uint64_t v16 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_2140B33BB, a3, &byte_2140B33BB, v16);
  DgnString::~DgnString((DgnString *)&v74);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_2140B33BB);
  unint64_t v73 = 0;
  unint64_t v74 = 0;
  uint64_t v21 = (a3 + 1);
  unint64_t v72 = 0;
  DgnPrinter::printSize(v22, 0xFFFFFFFFLL, v21, &v74, &v73, &v72);
  *a4 += v74;
  *a5 += v73;
  *a6 += v72;
  uint64_t v23 = sizeObject((uint64_t)this + 8416, 0);
  uint64_t v24 = sizeObject((uint64_t)this + 8416, 1);
  uint64_t v25 = sizeObject((uint64_t)this + 8416, 3);
  uint64_t v71 = a3;
  uint64_t v26 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/xprhelp.cpp", 186, (DgnString *)&v74);
  if (v75) {
    uint64_t v31 = (char *)v74;
  }
  else {
    uint64_t v31 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v27, v28, v29, v30, v21, &byte_2140B33BB, v26, v26, v31, v23, v24, v25);
  DgnString::~DgnString((DgnString *)&v74);
  *a4 += v23;
  *a5 += v24;
  *a6 += v25;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/xprhelp.cpp", 188, (DgnString *)&v74);
  if (v75) {
    uint64_t v36 = (char *)v74;
  }
  else {
    uint64_t v36 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v32, v33, v34, v35, v21, &byte_2140B33BB, v26, v26, v36, 100, 100, 0);
  DgnString::~DgnString((DgnString *)&v74);
  *a4 += 100;
  *a5 += 100;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/xprhelp.cpp", 190, (DgnString *)&v74);
  if (v75) {
    uint64_t v41 = (char *)v74;
  }
  else {
    uint64_t v41 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v37, v38, v39, v40, v21, &byte_2140B33BB, v26, v26, v41, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v74);
  *a4 += 4;
  *a5 += 4;
  uint64_t v42 = (char *)this + 8848;
  uint64_t v43 = sizeObject((uint64_t)this + 8848, 0);
  uint64_t v44 = sizeObject((uint64_t)v42, 1);
  uint64_t v45 = sizeObject((uint64_t)v42, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/xprhelp.cpp", 191, (DgnString *)&v74);
  if (v75) {
    uint64_t v50 = (char *)v74;
  }
  else {
    uint64_t v50 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v46, v47, v48, v49, v21, &byte_2140B33BB, v26, v26, v50, v43, v44, v45);
  DgnString::~DgnString((DgnString *)&v74);
  *a4 += v43;
  *a5 += v44;
  *a6 += v45;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/xprhelp.cpp", 193, (DgnString *)&v74);
  if (v75) {
    __int32 v55 = (char *)v74;
  }
  else {
    __int32 v55 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v51, v52, v53, v54, v21, &byte_2140B33BB, v26, v26, v55, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v74);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/xprhelp.cpp", 195, (DgnString *)&v74);
  if (v75) {
    uint64_t v60 = (char *)v74;
  }
  else {
    uint64_t v60 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v56, v57, v58, v59, v21, &byte_2140B33BB, v26, v26, v60, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v74);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/xprhelp.cpp", 197, (DgnString *)&v74);
  if (v75) {
    uint64_t v65 = (char *)v74;
  }
  else {
    uint64_t v65 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v61, v62, v63, v64, v21, &byte_2140B33BB, v26, v26, v65, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v74);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/xprhelp.cpp", 198, (DgnString *)&v74);
  if (v75) {
    uint64_t v70 = (char *)v74;
  }
  else {
    uint64_t v70 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v66, v67, v68, v69, v71, &byte_2140B33BB, (35 - v71), (35 - v71), v70, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v74);
}

void sub_213EA3B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void DgnPrinter::printSize(DgnPrinter *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/xprhelp.cpp", 386, (DgnString *)&v55);
  if (v56) {
    uint64_t v15 = v55;
  }
  else {
    uint64_t v15 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v11, v12, v13, v14, a3, &byte_2140B33BB, a3, &byte_2140B33BB, v15);
  DgnString::~DgnString((DgnString *)&v55);
  if (a2 != -1) {
    xlprintf("%d ", v16, v17, v18, v19, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v16, v17, v18, v19, a3, &byte_2140B33BB);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/xprhelp.cpp", 388, (DgnString *)&v55);
  if (v56) {
    uint64_t v24 = v55;
  }
  else {
    uint64_t v24 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v20, v21, v22, v23, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v24, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v55);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/xprhelp.cpp", 390, (DgnString *)&v55);
  if (v56) {
    uint64_t v29 = v55;
  }
  else {
    uint64_t v29 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v25, v26, v27, v28, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v29, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v55);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/xprhelp.cpp", 392, (DgnString *)&v55);
  if (v56) {
    uint64_t v34 = v55;
  }
  else {
    uint64_t v34 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v30, v31, v32, v33, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v34, 100, 100, 0);
  DgnString::~DgnString((DgnString *)&v55);
  *a4 += 100;
  *a5 += 100;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/xprhelp.cpp", 394, (DgnString *)&v55);
  if (v56) {
    uint64_t v39 = v55;
  }
  else {
    uint64_t v39 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v35, v36, v37, v38, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v39, 100, 100, 0);
  DgnString::~DgnString((DgnString *)&v55);
  *a4 += 100;
  *a5 += 100;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/xprhelp.cpp", 396, (DgnString *)&v55);
  if (v56) {
    uint64_t v44 = v55;
  }
  else {
    uint64_t v44 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v40, v41, v42, v43, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v44, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v55);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/xprhelp.cpp", 398, (DgnString *)&v55);
  if (v56) {
    uint64_t v49 = v55;
  }
  else {
    uint64_t v49 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v45, v46, v47, v48, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v49, 0x2000, 0x2000, 0);
  DgnString::~DgnString((DgnString *)&v55);
  *a4 += 0x2000;
  *a5 += 0x2000;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/xprhelp.cpp", 415, (DgnString *)&v55);
  if (v56) {
    uint64_t v54 = v55;
  }
  else {
    uint64_t v54 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v50, v51, v52, v53, a3, &byte_2140B33BB, (35 - a3), (35 - a3), v54, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v55);
}

void sub_213EA3EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

pthread_rwlock_t **DgnPrinterMgr::setLogLinePrefix(DgnPrinterMgr *this, const char *a2)
{
  pthread_key_t v8 = (pthread_rwlock_t *)((char *)this + 8416);
  DgnReadWriteLock::acquireWrite((pthread_rwlock_t *)((char *)this + 8416));
  if (strlen(a2) >= 0x64) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/xprhelp.cpp", 217, (uint64_t)"mrecutil/xprhelp", 1, (uint64_t)"%d", v4, v5, 100);
  }
  uint64_t v6 = strcpy((char *)this + 8744, a2);
  *((_DWORD *)this + 2211) = strlen(v6);
  return Latch<DgnReadWriteLock,WriteLatchAdapter>::~Latch(&v8);
}

void sub_213EA3FBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  Latch<DgnReadWriteLock,WriteLatchAdapter>::~Latch((pthread_rwlock_t **)va);
  _Unwind_Resume(a1);
}

uint64_t DgnPrinterMgr::setShowLogLineTimeStamps(DgnPrinterMgr *this, char a2)
{
  uint64_t v4 = (pthread_mutex_t *)((char *)this + 8848);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 8848));
  ++*((_DWORD *)this + 2228);
  *((void *)this + 1115) = pthread_self();
  *((unsigned char *)this + 8944) = a2;
  int v5 = *((_DWORD *)this + 2228) - 1;
  *((_DWORD *)this + 2228) = v5;
  if (!v5) {
    *((void *)this + 1115) = 0;
  }
  return pthread_mutex_unlock(v4);
}

pthread_rwlock_t **DgnPrinterMgr::addLinePrefix(DgnPrinterMgr *this, char *a2, unsigned int a3, unsigned int *a4)
{
  pthread_key_t v8 = (pthread_rwlock_t *)((char *)this + 8416);
  DgnReadWriteLock::acquireRead((pthread_rwlock_t *)((char *)this + 8416));
  if (*((_DWORD *)this + 2211))
  {
    strcpy(&a2[*a4], (const char *)this + 8744);
    *a4 += *((_DWORD *)this + 2211);
  }
  return Latch<DgnReadWriteLock,ReadLatchAdapter>::~Latch(&v8);
}

uint64_t DgnPrinterMgr::maybeSetTimeStampingBase(uint64_t this, uint64_t a2)
{
  if (!*(void *)(this + 8928))
  {
    uint64_t v3 = this;
    uint64_t v4 = (pthread_mutex_t *)(this + 8848);
    pthread_mutex_lock((pthread_mutex_t *)(this + 8848));
    ++*(_DWORD *)(v3 + 8912);
    *(void *)(v3 + 8920) = pthread_self();
    *(void *)(v3 + 8928) = a2;
    *(void *)(v3 + 8936) = a2;
    int v5 = *(_DWORD *)(v3 + 8912) - 1;
    *(_DWORD *)(v3 + 8912) = v5;
    if (!v5) {
      *(void *)(v3 + 8920) = 0;
    }
    return pthread_mutex_unlock(v4);
  }
  return this;
}

uint64_t DgnPrinterMgr::getDeltasAndResetLast(DgnPrinterMgr *this, unint64_t *a2, unint64_t *a3, unint64_t *a4, __darwin_time_t *a5)
{
  int v10 = (pthread_mutex_t *)((char *)this + 8848);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 8848));
  ++*((_DWORD *)this + 2228);
  *((void *)this + 1115) = pthread_self();
  __darwin_time_t CurrentMicrosec = ClockTimer::getCurrentMicrosec((ClockTimer *)&ClockTimer::smClockTimer);
  DgnPrinterMgr::maybeSetTimeStampingBase(DgnPrinterMgr::smpDgnPrinterMgr, CurrentMicrosec);
  *a2 = CurrentMicrosec - *((void *)this + 1116);
  *a3 = CurrentMicrosec - *((void *)this + 1117);
  *a4 = CurrentMicrosec - *a5;
  *((void *)this + 1117) = CurrentMicrosec;
  *a5 = CurrentMicrosec;
  int v12 = *((_DWORD *)this + 2228) - 1;
  *((_DWORD *)this + 2228) = v12;
  if (!v12) {
    *((void *)this + 1115) = 0;
  }
  return pthread_mutex_unlock(v10);
}

void sub_213EA421C(_Unwind_Exception *a1)
{
  int v4 = *(_DWORD *)(v2 + 8912) - 1;
  *(_DWORD *)(v2 + 8912) = v4;
  if (!v4) {
    *(void *)(v2 + 8920) = 0;
  }
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t logMaybeSetTimeStampingBase(uint64_t a1)
{
  return DgnPrinterMgr::maybeSetTimeStampingBase(DgnPrinterMgr::smpDgnPrinterMgr, a1);
}

pthread_rwlock_t **logSetLinePrefix(const char *a1)
{
  return DgnPrinterMgr::setLogLinePrefix((DgnPrinterMgr *)DgnPrinterMgr::smpDgnPrinterMgr, a1);
}

uint64_t logSetShowLineTimeStamps(char a1)
{
  return DgnPrinterMgr::setShowLogLineTimeStamps((DgnPrinterMgr *)DgnPrinterMgr::smpDgnPrinterMgr, a1);
}

char *DgnPrinter::addLinePrefix(DgnPrinter *this, char *a2, unsigned int a3, unsigned int *a4, const char *a5, int a6, int a7)
{
  DgnPrinterMgr::addLinePrefix((DgnPrinterMgr *)DgnPrinterMgr::smpDgnPrinterMgr, a2, a3, a4);
  if (*((_DWORD *)this + 52))
  {
    strcpy(&a2[*a4], (const char *)this + 108);
    *a4 += *((_DWORD *)this + 52);
  }
  int64x2_t result = (char *)DgnPrinterMgr::smpDgnPrinterMgr;
  if (!*(unsigned char *)(DgnPrinterMgr::smpDgnPrinterMgr + 8944))
  {
    unsigned int v17 = *a4;
    if (!a6) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  unint64_t v19 = 0;
  unint64_t v20 = 0;
  unint64_t v18 = 0;
  DgnPrinterMgr::getDeltasAndResetLast((DgnPrinterMgr *)DgnPrinterMgr::smpDgnPrinterMgr, &v20, &v19, &v18, (__darwin_time_t *)this);
  uint64_t v15 = (char *)this + 8;
  snprintf(v15, 0x64uLL, "[%llu.%06llu (mrinc %llu.%06llu) (thinc %llu.%06llu)] ", v20 / 0xF4240, v20 % 0xF4240, v19 / 0xF4240, v19 % 0xF4240, v18 / 0xF4240, v18 % 0xF4240);
  int v16 = strlen(v15);
  int64x2_t result = strcpy(&a2[*a4], v15);
  unsigned int v17 = *a4 + v16;
  *a4 = v17;
  if (a6)
  {
LABEL_5:
    int64x2_t result = strcpy(&a2[v17], a5);
    unsigned int v17 = *a4 + a6;
    *a4 = v17;
  }
LABEL_6:
  if (a7 && a3 - v17 >= a7 + 2)
  {
    do
    {
      a2[v17] = 32;
      unsigned int v17 = *a4 + 1;
      *a4 = v17;
      --a7;
    }
    while (a7);
  }
  a2[v17] = 0;
  return result;
}

void DgnPrinter::~DgnPrinter(DgnPrinter *this)
{
  if (!*((unsigned char *)this + 8404)) {
    DgnPrinter::xprint((size_t)this, "\n[flushed previous partial line]\n", 1, 0, 0, 0);
  }
  *((unsigned char *)this + 212) = 0;
}

char *DgnPrinter::setInstancePrefix(DgnPrinter *this, const char *__s)
{
  unsigned int v4 = strlen(__s);
  if (v4 >= 0x63) {
    int v5 = 99;
  }
  else {
    int v5 = v4;
  }
  *((_DWORD *)this + 52) = v5;

  return strcpy((char *)this + 108, __s);
}

pthread_rwlock_t **Latch<DgnReadWriteLock,WriteLatchAdapter>::~Latch(pthread_rwlock_t **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    DgnReadWriteLock::releaseRead(v2);
    *a1 = 0;
  }
  return a1;
}

pthread_rwlock_t **Latch<DgnReadWriteLock,ReadLatchAdapter>::~Latch(pthread_rwlock_t **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    DgnReadWriteLock::releaseRead(v2);
    *a1 = 0;
  }
  return a1;
}

void TLattProcParamManager::TLattProcParamManager(TLattProcParamManager *this, TLocaleInfo *a2)
{
  TParamManager::TParamManager(this, 0, a2);
  void *v3 = &unk_26C4E3090;
  unsigned int v4 = (TParam *)(v3 + 18);
  TIntParam::TIntParam((TIntParam *)(v3 + 18), (uint64_t)"C", (uint64_t)"I", 256, 0, 0x7FFFFFFF, 0, (uint64_t)"1", (uint64_t)&unk_21409BE14);
  TParamManager::add(this, v4);
}

void sub_213EA45E0(_Unwind_Exception *a1)
{
  TParam::~TParam(v2);
  TParamManager::~TParamManager(v1);
  _Unwind_Resume(a1);
}

uint64_t TLatticeProcessor::TLatticeProcessor(uint64_t result, uint64_t a2, int a3)
{
  *(void *)int64x2_t result = &unk_26C4E18F0;
  *(void *)(result + 8) = -1;
  *(void *)(result + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = 0;
  *(void *)(result + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = 0;
  *(void *)(result + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = result + 40;
  *(void *)(result + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = a2;
  *(unsigned char *)(result + 24) = a3;
  if (a3) {
    ++*(_DWORD *)(a2 + 360);
  }
  return result;
}

void *TRegisterable<TLatticeProcessor>::~TRegisterable(void *a1)
{
  *a1 = &unk_26C4E04E0;
  if (a1[1] != -1)
  {
    uint64_t Registry = (uint64_t *)TRegisterable<TLatticeProcessor>::getRegistry();
    uint64_t v3 = *Registry;
    *(void *)(Registry[1] + 8 * a1[1] - 8) = 0;
    *uint64_t Registry = v3 - 1;
  }
  return a1;
}

void TLatticeProcessor::~TLatticeProcessor(TLatticeProcessor *this)
{
  *(void *)this = &unk_26C4E18F0;
  uint64_t v2 = *((void *)this + 2);
  if (v2 && *((unsigned char *)this + 24)) {
    --*(_DWORD *)(v2 + 360);
  }
  std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy((uint64_t)this + 32, *((void **)this + 5));

  TRegisterable<TLatticeProcessor>::~TRegisterable(this);
}

void TLatticeProcessor::clearLoadedLmData(TLatticeProcessor *this, uint64_t a2)
{
  unsigned int v4 = (char *)*((void *)this + 4);
  int v5 = (char *)this + 40;
  if (v4 == (char *)this + 40)
  {
    unint64_t v8 = 0;
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      SDVoc_GetInfo(*((void *)v4 + 4), (uint64_t)v24);
      int v9 = (char *)*((void *)v4 + 1);
      if (v9)
      {
        do
        {
          int v10 = v9;
          int v9 = *(char **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          int v10 = (char *)*((void *)v4 + 2);
          BOOL v11 = *(void *)v10 == (void)v4;
          unsigned int v4 = v10;
        }
        while (!v11);
      }
      v6 += v27;
      v7 += v26;
      v8 += v25;
      unsigned int v4 = v10;
    }
    while (v10 != v5);
  }
  unint64_t v12 = v7 + v8;
  if (v12 + v6 > a2 << 20)
  {
    unint64_t v13 = a2 << 20;
    uint64_t v14 = (char *)*((void *)this + 4);
    if (v14 != v5)
    {
      do
      {
        SDLm_ClearLoadedData(*((void *)v14 + 4), 4uLL);
        uint64_t v15 = (char *)*((void *)v14 + 1);
        if (v15)
        {
          do
          {
            int v16 = v15;
            uint64_t v15 = *(char **)v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            int v16 = (char *)*((void *)v14 + 2);
            BOOL v11 = *(void *)v16 == (void)v14;
            uint64_t v14 = v16;
          }
          while (!v11);
        }
        uint64_t v14 = v16;
      }
      while (v16 != v5);
    }
    if (v12 > v13 >> 1)
    {
      unint64_t v17 = v13 >> 1;
      unint64_t v18 = (char *)*((void *)this + 4);
      if (v18 != v5)
      {
        do
        {
          SDLm_ClearLoadedData(*((void *)v18 + 4), 3uLL);
          unint64_t v19 = (char *)*((void *)v18 + 1);
          if (v19)
          {
            do
            {
              unint64_t v20 = v19;
              unint64_t v19 = *(char **)v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              unint64_t v20 = (char *)*((void *)v18 + 2);
              BOOL v11 = *(void *)v20 == (void)v18;
              unint64_t v18 = v20;
            }
            while (!v11);
          }
          unint64_t v18 = v20;
        }
        while (v20 != v5);
      }
      if (v8 > v17)
      {
        uint64_t v21 = (char *)*((void *)this + 4);
        if (v21 != v5)
        {
          do
          {
            SDLm_ClearLoadedData(*((void *)v21 + 4), 2uLL);
            uint64_t v22 = (char *)*((void *)v21 + 1);
            if (v22)
            {
              do
              {
                uint64_t v23 = v22;
                uint64_t v22 = *(char **)v22;
              }
              while (v22);
            }
            else
            {
              do
              {
                uint64_t v23 = (char *)*((void *)v21 + 2);
                BOOL v11 = *(void *)v23 == (void)v21;
                uint64_t v21 = v23;
              }
              while (!v11);
            }
            uint64_t v21 = v23;
          }
          while (v23 != v5);
        }
      }
    }
  }
}

uint64_t TLatticeProcessor::combineMrecData(uint64_t result, uint64_t a2, int a3)
{
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(result + 36) += *(_DWORD *)(a2 + 36);
  int v3 = *(_DWORD *)(a2 + 48) - a3 + *(_DWORD *)(result + 48);
  *(_DWORD *)(result + 44) += *(_DWORD *)(a2 + 44);
  *(_DWORD *)(result + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = v3;
  *(int32x2_t *)(result + 52) = vadd_s32(*(int32x2_t *)(result + 52), *(int32x2_t *)(a2 + 52));
  *(_DWORD *)(result + 60) += *(_DWORD *)(a2 + 60);
  *(void *)(result + 64) = 0xBFF0000000000000;
  int v4 = *(_DWORD *)(result + 76);
  if (!v4)
  {
    int v6 = *(_DWORD *)(a2 + 76);
    *(_DWORD *)(result + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = *(_DWORD *)(a2 + 72);
    goto LABEL_6;
  }
  int v5 = *(_DWORD *)(a2 + 76);
  if (v5 && *(_DWORD *)(result + 72) + v4 == *(_DWORD *)(a2 + 72))
  {
    int v6 = v5 + v4;
LABEL_6:
    *(_DWORD *)(result + 76) = v6;
  }
  if (*(_DWORD *)(result + 80) && *(_DWORD *)(a2 + 80))
  {
    int v7 = *(_DWORD *)(a2 + 88);
    *(_DWORD *)(result + 84) += *(_DWORD *)(a2 + 84);
    *(_DWORD *)(result + 88) = v7;
    *(_DWORD *)(result + 92) += *(_DWORD *)(a2 + 92) - a3;
  }
  else
  {
    *(void *)(result + 80) = 0;
    *(void *)(result + 88) = 0;
  }
  return result;
}

void TRegisterable<TLatticeProcessor>::~TRegisterable(void *a1)
{
  TRegisterable<TLatticeProcessor>::~TRegisterable(a1);

  JUMPOUT(0x216698730);
}

void CTFTMgr::~CTFTMgr(CTFTMgr *this)
{
}

void CTFTMgr::printSize(CTFTMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 342, (DgnString *)&v192);
  if (v193) {
    int v16 = v192;
  }
  else {
    int v16 = &unk_21409BE54;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_21409BE54, a3, &unk_21409BE54, v16);
  DgnString::~DgnString((DgnString *)&v192);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_21409BE54);
  uint64_t v21 = (a3 + 1);
  uint64_t v191 = a3;
  uint64_t v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 344, (DgnString *)&v192);
  if (v193) {
    uint64_t v27 = v192;
  }
  else {
    uint64_t v27 = &unk_21409BE54;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, v21, &unk_21409BE54, v22, v22, v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v192);
  *a4 += 4;
  *a5 += 4;
  uint64_t v28 = sizeObject((uint64_t)this + 4, 0);
  uint64_t v29 = sizeObject((uint64_t)this + 4, 1);
  uint64_t v30 = sizeObject((uint64_t)this + 4, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 344, (DgnString *)&v192);
  if (v193) {
    uint64_t v35 = v192;
  }
  else {
    uint64_t v35 = &unk_21409BE54;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v31, v32, v33, v34, v21, &unk_21409BE54, v22, v22, v35, v28, v29, v30);
  DgnString::~DgnString((DgnString *)&v192);
  *a4 += v28;
  *a5 += v29;
  *a6 += v30;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 344, (DgnString *)&v192);
  if (v193) {
    uint64_t v40 = v192;
  }
  else {
    uint64_t v40 = &unk_21409BE54;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v36, v37, v38, v39, v21, &unk_21409BE54, v22, v22, v40, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v192);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 344, (DgnString *)&v192);
  if (v193) {
    uint64_t v45 = v192;
  }
  else {
    uint64_t v45 = &unk_21409BE54;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v41, v42, v43, v44, v21, &unk_21409BE54, v22, v22, v45, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v192);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 344, (DgnString *)&v192);
  if (v193) {
    uint64_t v50 = v192;
  }
  else {
    uint64_t v50 = &unk_21409BE54;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v46, v47, v48, v49, v21, &unk_21409BE54, v22, v22, v50, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v192);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v51 = 12;
  }
  else {
    uint64_t v51 = 16;
  }
  uint64_t v52 = *((unsigned int *)this + 8);
  unsigned int v53 = *((_DWORD *)this + 9);
  if (v53 >= v52)
  {
    uint64_t v54 = 0;
    if ((int)v52 > 0) {
      v51 += 4 * (v52 - 1) + 4;
    }
    uint64_t v55 = v51 + 4 * (v53 - v52);
  }
  else
  {
    uint64_t v54 = 4 * v52;
    uint64_t v55 = v51;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 344, (DgnString *)&v192);
  if (v193) {
    uint64_t v60 = v192;
  }
  else {
    uint64_t v60 = &unk_21409BE54;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v56, v57, v58, v59, v21, &unk_21409BE54, v22, v22, v60, v55, v51, v54);
  DgnString::~DgnString((DgnString *)&v192);
  *a4 += v55;
  *a5 += v51;
  *a6 += v54;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v61 = 12;
  }
  else {
    uint64_t v61 = 16;
  }
  uint64_t v62 = *((unsigned int *)this + 12);
  unsigned int v63 = *((_DWORD *)this + 13);
  if (v63 >= v62)
  {
    uint64_t v64 = 0;
    if ((int)v62 > 0) {
      v61 += 4 * (v62 - 1) + 4;
    }
    uint64_t v65 = v61 + 4 * (v63 - v62);
  }
  else
  {
    uint64_t v64 = 4 * v62;
    uint64_t v65 = v61;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 344, (DgnString *)&v192);
  if (v193) {
    uint64_t v70 = v192;
  }
  else {
    uint64_t v70 = &unk_21409BE54;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v66, v67, v68, v69, v21, &unk_21409BE54, v22, v22, v70, v65, v61, v64);
  DgnString::~DgnString((DgnString *)&v192);
  *a4 += v65;
  *a5 += v61;
  *a6 += v64;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 344, (DgnString *)&v192);
  if (v193) {
    int v75 = v192;
  }
  else {
    int v75 = &unk_21409BE54;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v71, v72, v73, v74, v21, &unk_21409BE54, v22, v22, v75, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v192);
  *a4 += 4;
  *a5 += 4;
  uint64_t v76 = sizeObject<LinearTransform>((uint64_t)this + 64, 0);
  uint64_t v77 = sizeObject<LinearTransform>((uint64_t)this + 64, 1);
  uint64_t v78 = sizeObject<LinearTransform>((uint64_t)this + 64, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 344, (DgnString *)&v192);
  if (v193) {
    uint64_t v83 = v192;
  }
  else {
    uint64_t v83 = &unk_21409BE54;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v79, v80, v81, v82, v21, &unk_21409BE54, v22, v22, v83, v76, v77, v78);
  DgnString::~DgnString((DgnString *)&v192);
  *a4 += v76;
  *a5 += v77;
  *a6 += v78;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v84 = 12;
  }
  else {
    uint64_t v84 = 16;
  }
  uint64_t v85 = *((unsigned int *)this + 22);
  unsigned int v86 = *((_DWORD *)this + 23);
  if (v86 >= v85)
  {
    uint64_t v87 = 0;
    if ((int)v85 > 0) {
      v84 += 4 * (v85 - 1) + 4;
    }
    uint64_t v88 = v84 + 4 * (v86 - v85);
  }
  else
  {
    uint64_t v87 = 4 * v85;
    uint64_t v88 = v84;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 344, (DgnString *)&v192);
  if (v193) {
    uint64_t v93 = v192;
  }
  else {
    uint64_t v93 = &unk_21409BE54;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v89, v90, v91, v92, v21, &unk_21409BE54, v22, v22, v93, v88, v84, v87);
  DgnString::~DgnString((DgnString *)&v192);
  *a4 += v88;
  *a5 += v84;
  *a6 += v87;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 344, (DgnString *)&v192);
  if (v193) {
    long long v98 = v192;
  }
  else {
    long long v98 = &unk_21409BE54;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v94, v95, v96, v97, v21, &unk_21409BE54, v22, v22, v98, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v192);
  *a4 += 4;
  *a5 += 4;
  uint64_t v99 = sizeObject<LinearTransform>((uint64_t)this + 104, 0);
  uint64_t v100 = sizeObject<LinearTransform>((uint64_t)this + 104, 1);
  uint64_t v101 = sizeObject<LinearTransform>((uint64_t)this + 104, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 344, (DgnString *)&v192);
  if (v193) {
    uint64_t v106 = v192;
  }
  else {
    uint64_t v106 = &unk_21409BE54;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v102, v103, v104, v105, v21, &unk_21409BE54, v22, v22, v106, v99, v100, v101);
  DgnString::~DgnString((DgnString *)&v192);
  *a4 += v99;
  *a5 += v100;
  *a6 += v101;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v107 = 12;
  }
  else {
    uint64_t v107 = 16;
  }
  uint64_t v108 = *((unsigned int *)this + 32);
  unsigned int v109 = *((_DWORD *)this + 33);
  if (v109 >= v108)
  {
    uint64_t v110 = 0;
    if ((int)v108 > 0) {
      v107 += 4 * (v108 - 1) + 4;
    }
    uint64_t v111 = v107 + 4 * (v109 - v108);
  }
  else
  {
    uint64_t v110 = 4 * v108;
    uint64_t v111 = v107;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 344, (DgnString *)&v192);
  if (v193) {
    uint64_t v116 = v192;
  }
  else {
    uint64_t v116 = &unk_21409BE54;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v112, v113, v114, v115, v21, &unk_21409BE54, v22, v22, v116, v111, v107, v110);
  DgnString::~DgnString((DgnString *)&v192);
  *a4 += v111;
  *a5 += v107;
  *a6 += v110;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 344, (DgnString *)&v192);
  if (v193) {
    char v121 = v192;
  }
  else {
    char v121 = &unk_21409BE54;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v117, v118, v119, v120, v21, &unk_21409BE54, v22, v22, v121, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v192);
  *a4 += 4;
  *a5 += 4;
  uint64_t v122 = sizeObject<LinearTransform>((uint64_t)this + 144, 0);
  uint64_t v123 = sizeObject<LinearTransform>((uint64_t)this + 144, 1);
  uint64_t v124 = sizeObject<LinearTransform>((uint64_t)this + 144, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 344, (DgnString *)&v192);
  if (v193) {
    uint64_t v129 = v192;
  }
  else {
    uint64_t v129 = &unk_21409BE54;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v125, v126, v127, v128, v21, &unk_21409BE54, v22, v22, v129, v122, v123, v124);
  DgnString::~DgnString((DgnString *)&v192);
  *a4 += v122;
  *a5 += v123;
  *a6 += v124;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v130 = 12;
  }
  else {
    uint64_t v130 = 16;
  }
  uint64_t v131 = *((unsigned int *)this + 42);
  unsigned int v132 = *((_DWORD *)this + 43);
  if (v132 >= v131)
  {
    uint64_t v133 = 0;
    if ((int)v131 > 0) {
      v130 += 4 * (v131 - 1) + 4;
    }
    uint64_t v134 = v130 + 4 * (v132 - v131);
  }
  else
  {
    uint64_t v133 = 4 * v131;
    uint64_t v134 = v130;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 344, (DgnString *)&v192);
  if (v193) {
    uint64_t v139 = v192;
  }
  else {
    uint64_t v139 = &unk_21409BE54;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v135, v136, v137, v138, v21, &unk_21409BE54, v22, v22, v139, v134, v130, v133);
  DgnString::~DgnString((DgnString *)&v192);
  *a4 += v134;
  *a5 += v130;
  *a6 += v133;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 344, (DgnString *)&v192);
  if (v193) {
    uint64_t v144 = v192;
  }
  else {
    uint64_t v144 = &unk_21409BE54;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v140, v141, v142, v143, v21, &unk_21409BE54, v22, v22, v144, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v192);
  *a4 += 4;
  *a5 += 4;
  uint64_t v145 = sizeObject<LinearTransform>((uint64_t)this + 184, 0);
  uint64_t v146 = sizeObject<LinearTransform>((uint64_t)this + 184, 1);
  uint64_t v147 = sizeObject<LinearTransform>((uint64_t)this + 184, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 344, (DgnString *)&v192);
  if (v193) {
    uint64_t v152 = v192;
  }
  else {
    uint64_t v152 = &unk_21409BE54;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v148, v149, v150, v151, v21, &unk_21409BE54, v22, v22, v152, v145, v146, v147);
  DgnString::~DgnString((DgnString *)&v192);
  *a4 += v145;
  *a5 += v146;
  *a6 += v147;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v153 = 12;
  }
  else {
    uint64_t v153 = 16;
  }
  uint64_t v154 = *((unsigned int *)this + 52);
  unsigned int v155 = *((_DWORD *)this + 53);
  if (v155 >= v154)
  {
    uint64_t v156 = 0;
    if ((int)v154 > 0) {
      v153 += 4 * (v154 - 1) + 4;
    }
    uint64_t v157 = v153 + 4 * (v155 - v154);
  }
  else
  {
    uint64_t v156 = 4 * v154;
    uint64_t v157 = v153;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 344, (DgnString *)&v192);
  if (v193) {
    uint64_t v162 = v192;
  }
  else {
    uint64_t v162 = &unk_21409BE54;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v158, v159, v160, v161, v21, &unk_21409BE54, v22, v22, v162, v157, v153, v156);
  DgnString::~DgnString((DgnString *)&v192);
  *a4 += v157;
  *a5 += v153;
  *a6 += v156;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 344, (DgnString *)&v192);
  if (v193) {
    uint64_t v167 = v192;
  }
  else {
    uint64_t v167 = &unk_21409BE54;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v163, v164, v165, v166, v21, &unk_21409BE54, v22, v22, v167, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v192);
  *a4 += 4;
  *a5 += 4;
  uint64_t v168 = sizeObject<LinearTransform>((uint64_t)this + 224, 0);
  uint64_t v169 = sizeObject<LinearTransform>((uint64_t)this + 224, 1);
  uint64_t v170 = sizeObject<LinearTransform>((uint64_t)this + 224, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 344, (DgnString *)&v192);
  if (v193) {
    uint64_t v175 = v192;
  }
  else {
    uint64_t v175 = &unk_21409BE54;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v171, v172, v173, v174, v21, &unk_21409BE54, v22, v22, v175, v168, v169, v170);
  DgnString::~DgnString((DgnString *)&v192);
  *a4 += v168;
  *a5 += v169;
  *a6 += v170;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v176 = 12;
  }
  else {
    uint64_t v176 = 16;
  }
  uint64_t v177 = *((unsigned int *)this + 62);
  unsigned int v178 = *((_DWORD *)this + 63);
  if (v178 >= v177)
  {
    uint64_t v179 = 0;
    if ((int)v177 > 0) {
      v176 += 4 * (v177 - 1) + 4;
    }
    uint64_t v180 = v176 + 4 * (v178 - v177);
  }
  else
  {
    uint64_t v179 = 4 * v177;
    uint64_t v180 = v176;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 344, (DgnString *)&v192);
  if (v193) {
    uint64_t v185 = v192;
  }
  else {
    uint64_t v185 = &unk_21409BE54;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v181, v182, v183, v184, v21, &unk_21409BE54, v22, v22, v185, v180, v176, v179);
  DgnString::~DgnString((DgnString *)&v192);
  *a4 += v180;
  *a5 += v176;
  *a6 += v179;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 345, (DgnString *)&v192);
  if (v193) {
    uint64_t v190 = v192;
  }
  else {
    uint64_t v190 = &unk_21409BE54;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v186, v187, v188, v189, v191, &unk_21409BE54, (35 - v191), (35 - v191), v190, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v192);
}

void sub_213EA589C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<LinearTransform>(uint64_t a1, int a2)
{
  LinearTransform::LinearTransform((LinearTransform *)v10);
  uint64_t v4 = LinearTransform::sizeObject((uint64_t)v10, 2);
  if (a2 == 3)
  {
    uint64_t v5 = 0;
  }
  else
  {
    if (gShadowDiagnosticShowIdealizedObjectSizes) {
      uint64_t v5 = 12;
    }
    else {
      uint64_t v5 = 16;
    }
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      uint64_t v6 = v4;
      uint64_t v7 = *(unsigned int *)(a1 + 8);
      if ((int)v7 >= 1)
      {
        unint64_t v8 = v7 + 1;
        do
          v5 += LinearTransform::sizeObject(*(void *)a1 + 72 * (v8-- - 2), a2);
        while (v8 > 1);
      }
      if (!a2) {
        v5 += v6 * (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
      }
    }
  }
  LinearTransform::~LinearTransform((LinearTransform *)v10);
  return v5;
}

void sub_213EA59EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  LinearTransform::~LinearTransform((LinearTransform *)va);
  _Unwind_Resume(a1);
}

void CTFTMgr::saveCTFT(CTFTMgr *this, DFile *a2, DFileChecksums *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = (int *)((char *)this + 56);
  int v14 = *((_DWORD *)this + 8);
  if (*((_DWORD *)this + 14))
  {
    if (v14) {
      goto LABEL_6;
    }
  }
  else if (!v14)
  {
    goto LABEL_6;
  }
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 408, (uint64_t)"sigproc/ctftmgr", 20, (uint64_t)"%s", a7, a8, (char)&errStr_sigproc_ctftmgr_E_CTFT_SAVE);
LABEL_6:
  int v15 = *((_DWORD *)this + 12);
  if (*((_DWORD *)this + 34))
  {
    if (v15) {
      goto LABEL_11;
    }
  }
  else if (!v15)
  {
    goto LABEL_11;
  }
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/ctftmgr.cpp", 411, (uint64_t)"sigproc/ctftmgr", 20, (uint64_t)"%s", a7, a8, (char)&errStr_sigproc_ctftmgr_E_CTFT_SAVE);
LABEL_11:
  if (a4)
  {
    CTFTMgr::saveCTFTText(this, a2, a5);
  }
  else
  {
    int v16 = OpenAndWriteMrecHeader((uint64_t)a2, 0x23u, a5, "MRCTFTM!", 22, 7);
    int v18 = 0;
    writeObject((uint64_t)v16, (int *)this, &v18);
    writeObject((uint64_t)v16, (int *)this + 1, &v18);
    writeObject((uint64_t)v16, (int *)this + 2, &v18);
    writeObject((uint64_t)v16, (int *)this + 3, &v18);
    writeObject<unsigned int>((uint64_t)v16, (uint64_t)this + 24, &v18);
    writeObject<unsigned int>((uint64_t)v16, (uint64_t)this + 40, &v18);
    writeObject((uint64_t)v16, v13, &v18);
    writeObject<LinearTransform>(v16, (uint64_t)this + 64, (unsigned int *)&v18);
    writeObject<unsigned int>((uint64_t)v16, (uint64_t)this + 80, &v18);
    writeObject((uint64_t)v16, (int *)this + 24, &v18);
    writeObject<LinearTransform>(v16, (uint64_t)this + 104, (unsigned int *)&v18);
    writeObject<unsigned int>((uint64_t)v16, (uint64_t)this + 120, &v18);
    writeObject((uint64_t)v16, (int *)this + 34, &v18);
    writeObject<LinearTransform>(v16, (uint64_t)this + 144, (unsigned int *)&v18);
    writeObject<unsigned int>((uint64_t)v16, (uint64_t)this + 160, &v18);
    writeObject((uint64_t)v16, (int *)this + 44, &v18);
    writeObject<LinearTransform>(v16, (uint64_t)this + 184, (unsigned int *)&v18);
    writeObject<unsigned int>((uint64_t)v16, (uint64_t)this + 200, &v18);
    writeObjectChecksum((uint64_t)v16, &v18);
    uint64_t CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
    DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x23u, v18);
    DgnDelete<DgnStream>((void (***)(void))v16);
  }
}

void CTFTMgr::saveCTFTText(CTFTMgr *this, DFile *a2, int a3)
{
  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v110);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v110, (uint64_t)a2, 0x24u, a3);
  uint64_t v108 = 0;
  uint64_t v109 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v110, sLTF_Versions, (uint64_t)&v108, v6, v7, v8, v9, v10);
  DgnTextFileWriter::setFileType((uint64_t)v110, "LinearTransformFeatures", (void *)(v108 + 8 * (v109 - 1)));
  uint64_t v106 = 0;
  uint64_t v107 = 0;
  v105[0] = 0;
  unint64_t v11 = realloc_array(0, v105, 0x14uLL, 0, 0, 1);
  uint64_t v106 = v105[0];
  LODWORD(v107) = 5;
  HIDWORD(v107) = v11 >> 2;
  DgnArray<DgnString>::DgnArray(v105, 5);
  DgnString::operator=((DgnString *)v105[0], "TableName");
  *uint64_t v106 = 0;
  DgnString::operator=((DgnString *)((char *)v105[0] + 16), "UnsValue1");
  v106[1] = 3;
  DgnString::operator=((DgnString *)((char *)v105[0] + 32), "IntValue1");
  v106[2] = 1;
  DgnString::operator=((DgnString *)((char *)v105[0] + 48), "IntValue2");
  v106[3] = 1;
  DgnString::operator=((DgnString *)((char *)v105[0] + 64), "IntValue3");
  v106[4] = 1;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v110, (uint64_t)&v106, (uint64_t)v105);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v110, "ModelFeatureDim", *(unsigned int *)this);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v110, "TransformIntScale", 1 << *((_DWORD *)this + 1));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v110, "NumberOfSpeakerTransforms", *((unsigned int *)this + 14));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v110, "NumberOfChannelTransforms", *((unsigned int *)this + 34));
  if (*((_DWORD *)this + 14)) {
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v110, "NumberOfHierScorerSpeakerTransforms", *((unsigned int *)this + 24));
  }
  if (*((_DWORD *)this + 34)) {
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v110, "NumberOfHierScorerChannelTransforms", *((unsigned int *)this + 44));
  }
  DgnString::DgnString((DgnString *)&v103, "None");
  if (*((_DWORD *)this + 14))
  {
    uint64_t v12 = *((unsigned int *)this + 8);
    if (v12)
    {
      unsigned int v13 = 0;
      int v14 = (int *)*((void *)this + 3);
      do
      {
        int v15 = *v14++;
        if (v15 != -1) {
          ++v13;
        }
        --v12;
      }
      while (v12);
    }
    else
    {
      unsigned int v13 = 0;
    }
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v110, "NumberOfSpeakerTransformationClasses", v13);
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v110, "SpeakerTransformDim", *((unsigned int *)this + 2));
    uint64_t v17 = *((void *)this + 8);
    int v18 = *(_DWORD *)(v17 + 32);
    if (v18)
    {
      if (*(_DWORD *)(*(void *)(v17 + 24) + 8) != 1 || v18 == 1) {
        uint64_t v20 = "Full";
      }
      else {
        uint64_t v20 = "Diagonal";
      }
      DgnString::operator=((DgnString *)&v103, v20);
    }
    if (v104) {
      uint64_t v21 = v103;
    }
    else {
      uint64_t v21 = (const char *)&unk_21409BE54;
    }
    DgnTextFileWriter::setHeaderField((DgnTextFileWriter *)v110, "SpeakerTransformMatrixType", v21);
    uint64_t v22 = *((void *)this + 8);
    uint64_t v101 = 0;
    uint64_t v102 = 0;
    DgnPrimArray<int>::copyArraySlice((unint64_t)&v101, (uint64_t *)(v22 + 8), 0, *(_DWORD *)(v22 + 16));
    unsigned int v16 = v102 != 0;
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v101);
    DgnTextFileWriter::setHeaderFieldBool((DgnTextFileWriter *)v110, "HasSpeakerTransformOffsets", v16);
  }
  else
  {
    unsigned int v16 = 0;
  }
  DgnString::DgnString((DgnString *)&v101, "None");
  if (*((_DWORD *)this + 34))
  {
    uint64_t v23 = *((unsigned int *)this + 12);
    if (v23)
    {
      unsigned int v24 = 0;
      uint64_t v25 = (int *)*((void *)this + 5);
      do
      {
        int v26 = *v25++;
        if (v26 != -1) {
          ++v24;
        }
        --v23;
      }
      while (v23);
    }
    else
    {
      unsigned int v24 = 0;
    }
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v110, "NumberOfChannelTransformationClasses", v24);
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v110, "ChannelTransformDim", *((unsigned int *)this + 3));
    uint64_t v28 = *((void *)this + 18);
    int v29 = *(_DWORD *)(v28 + 32);
    if (v29)
    {
      if (*(_DWORD *)(*(void *)(v28 + 24) + 8) != 1 || v29 == 1) {
        uint64_t v31 = "Full";
      }
      else {
        uint64_t v31 = "Diagonal";
      }
      DgnString::operator=((DgnString *)&v101, v31);
    }
    if (v102) {
      uint64_t v32 = v101;
    }
    else {
      uint64_t v32 = (const char *)&unk_21409BE54;
    }
    DgnTextFileWriter::setHeaderField((DgnTextFileWriter *)v110, "ChannelTransformMatrixType", v32);
    uint64_t v33 = *((void *)this + 18);
    uint64_t v99 = 0;
    uint64_t v100 = 0;
    DgnPrimArray<int>::copyArraySlice((unint64_t)&v99, (uint64_t *)(v33 + 8), 0, *(_DWORD *)(v33 + 16));
    unsigned int v27 = v100 != 0;
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v99);
    DgnTextFileWriter::setHeaderFieldBool((DgnTextFileWriter *)v110, "HasChannelTransformOffsets", v27);
  }
  else
  {
    unsigned int v27 = 0;
  }
  if (v104) {
    uint64_t v34 = v103;
  }
  else {
    uint64_t v34 = (const char *)&unk_21409BE54;
  }
  int v35 = strcmp(v34, "None");
  LODWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = *((_DWORD *)this + 14);
  if (v35)
  {
    int v41 = strcmp(v34, "Diagonal");
    if (!v40) {
      goto LABEL_61;
    }
    int v42 = v41;
    unint64_t v43 = 0;
    uint64_t v44 = 24;
    do
    {
      writeIntMatrix((DgnTextFileWriter *)v110, "SpeakerTransAccMatrix", v42 == 0, (void *)(*((void *)this + 8) + v44), v43++, *((_DWORD *)this + 2), *((_DWORD *)this + 2));
      unint64_t v40 = *((unsigned int *)this + 14);
      v44 += 72;
    }
    while (v43 < v40);
  }
  if (v16)
  {
    if (!v40) {
      goto LABEL_61;
    }
    unint64_t v45 = 0;
    uint64_t v46 = 16;
    do
    {
      uint64_t v47 = *((void *)this + 8);
      uint64_t v99 = 0;
      uint64_t v100 = 0;
      DgnPrimArray<int>::copyArraySlice((unint64_t)&v99, (uint64_t *)(v47 + v46 - 8), 0, *(_DWORD *)(v47 + v46));
      writeIntOffset((DgnTextFileWriter *)v110, "SpeakerTransAccOffset", &v99, v45, *((_DWORD *)this + 2));
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v99);
      ++v45;
      unint64_t v40 = *((unsigned int *)this + 14);
      v46 += 72;
    }
    while (v45 < v40);
  }
  if (v40)
  {
    unint64_t v48 = 0;
    do
    {
      writeLogDeterminant((DgnTextFileWriter *)v110, "SpeakerTransAccLogDeterminant", *(_DWORD *)(*((void *)this + 10) + 4 * v48), v48, v36, v37, v38, v39, v98);
      ++v48;
    }
    while (v48 < *((unsigned int *)this + 14));
  }
LABEL_61:
  unint64_t v49 = *((unsigned int *)this + 8);
  if (v49)
  {
    unint64_t v50 = 0;
    int v51 = 0;
    do
    {
      if (*(_DWORD *)(*((void *)this + 3) + 4 * v50) != -1)
      {
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v110, 0, "SpeakerClassNodeIdToTransformMap");
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v110, 1u, v51);
        DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v110, 2u, v50);
        DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v110, 3u, *(_DWORD *)(*((void *)this + 3) + 4 * v50));
        DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v110, 4u, 0);
        DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v110);
        ++v51;
        unint64_t v49 = *((unsigned int *)this + 8);
      }
      ++v50;
    }
    while (v50 < v49);
  }
  if (v104) {
    uint64_t v52 = v103;
  }
  else {
    uint64_t v52 = (const char *)&unk_21409BE54;
  }
  if (strcmp(v52, "None"))
  {
    int v57 = strcmp(v52, "Diagonal");
    if (*((_DWORD *)this + 24))
    {
      int v58 = v57;
      unint64_t v59 = 0;
      uint64_t v60 = 24;
      do
      {
        writeIntMatrix((DgnTextFileWriter *)v110, "HierScorerSpeakerTransAccMatrix", v58 == 0, (void *)(*((void *)this + 13) + v60), v59++, *((_DWORD *)this + 2), *((_DWORD *)this + 2));
        v60 += 72;
      }
      while (v59 < *((unsigned int *)this + 24));
    }
  }
  LODWORD(v61) = *((_DWORD *)this + 24);
  if (v16)
  {
    if (!v61) {
      goto LABEL_80;
    }
    unint64_t v62 = 0;
    uint64_t v63 = 16;
    do
    {
      uint64_t v64 = *((void *)this + 13);
      uint64_t v99 = 0;
      uint64_t v100 = 0;
      DgnPrimArray<int>::copyArraySlice((unint64_t)&v99, (uint64_t *)(v64 + v63 - 8), 0, *(_DWORD *)(v64 + v63));
      writeIntOffset((DgnTextFileWriter *)v110, "HierScorerSpeakerTransAccOffset", &v99, v62, *((_DWORD *)this + 2));
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v99);
      ++v62;
      unint64_t v61 = *((unsigned int *)this + 24);
      v63 += 72;
    }
    while (v62 < v61);
  }
  if (v61)
  {
    unint64_t v65 = 0;
    do
    {
      writeLogDeterminant((DgnTextFileWriter *)v110, "HierScorerSpeakerTransAccLogDeterminant", *(_DWORD *)(*((void *)this + 15) + 4 * v65), v65, v53, v54, v55, v56, v98);
      ++v65;
    }
    while (v65 < *((unsigned int *)this + 24));
  }
LABEL_80:
  if (v102) {
    uint64_t v66 = v101;
  }
  else {
    uint64_t v66 = (const char *)&unk_21409BE54;
  }
  int v67 = strcmp(v66, "None");
  LODWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = *((_DWORD *)this + 34);
  if (v67)
  {
    int v73 = strcmp(v66, "Diagonal");
    if (!v72) {
      goto LABEL_94;
    }
    int v74 = v73;
    unint64_t v75 = 0;
    uint64_t v76 = 24;
    do
    {
      writeIntMatrix((DgnTextFileWriter *)v110, "ChannelTransAccMatrix", v74 == 0, (void *)(*((void *)this + 18) + v76), v75++, *((_DWORD *)this + 3), *((_DWORD *)this + 3));
      unint64_t v72 = *((unsigned int *)this + 34);
      v76 += 72;
    }
    while (v75 < v72);
  }
  if (v27)
  {
    if (!v72) {
      goto LABEL_94;
    }
    unint64_t v77 = 0;
    uint64_t v78 = 16;
    do
    {
      uint64_t v79 = *((void *)this + 18);
      uint64_t v99 = 0;
      uint64_t v100 = 0;
      DgnPrimArray<int>::copyArraySlice((unint64_t)&v99, (uint64_t *)(v79 + v78 - 8), 0, *(_DWORD *)(v79 + v78));
      writeIntOffset((DgnTextFileWriter *)v110, "ChannelTransAccOffset", &v99, v77, *((_DWORD *)this + 3));
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v99);
      ++v77;
      unint64_t v72 = *((unsigned int *)this + 34);
      v78 += 72;
    }
    while (v77 < v72);
  }
  if (v72)
  {
    unint64_t v80 = 0;
    do
    {
      writeLogDeterminant((DgnTextFileWriter *)v110, "ChannelTransAccLogDeterminant", *(_DWORD *)(*((void *)this + 20) + 4 * v80), v80, v68, v69, v70, v71, v98);
      ++v80;
    }
    while (v80 < *((unsigned int *)this + 34));
  }
LABEL_94:
  unint64_t v81 = *((unsigned int *)this + 12);
  if (v81)
  {
    unint64_t v82 = 0;
    int v83 = 0;
    do
    {
      if (*(_DWORD *)(*((void *)this + 5) + 4 * v82) != -1)
      {
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v110, 0, "ChannelClassNodeIdToTransformMap");
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v110, 1u, v83);
        DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v110, 2u, v82);
        DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v110, 3u, *(_DWORD *)(*((void *)this + 5) + 4 * v82));
        DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v110, 4u, 0);
        DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v110);
        ++v83;
        unint64_t v81 = *((unsigned int *)this + 12);
      }
      ++v82;
    }
    while (v82 < v81);
  }
  if (v102) {
    uint64_t v84 = v101;
  }
  else {
    uint64_t v84 = (const char *)&unk_21409BE54;
  }
  if (strcmp(v84, "None"))
  {
    int v89 = strcmp(v84, "Diagonal");
    if (*((_DWORD *)this + 44))
    {
      int v90 = v89;
      unint64_t v91 = 0;
      uint64_t v92 = 24;
      do
      {
        writeIntMatrix((DgnTextFileWriter *)v110, "HierScorerChannelTransAccMatrix", v90 == 0, (void *)(*((void *)this + 23) + v92), v91++, *((_DWORD *)this + 3), *((_DWORD *)this + 3));
        v92 += 72;
      }
      while (v91 < *((unsigned int *)this + 44));
    }
  }
  LODWORD(v93) = *((_DWORD *)this + 44);
  if (v27)
  {
    if (!v93) {
      goto LABEL_113;
    }
    unint64_t v94 = 0;
    uint64_t v95 = 16;
    do
    {
      uint64_t v96 = *((void *)this + 23);
      uint64_t v99 = 0;
      uint64_t v100 = 0;
      DgnPrimArray<int>::copyArraySlice((unint64_t)&v99, (uint64_t *)(v96 + v95 - 8), 0, *(_DWORD *)(v96 + v95));
      writeIntOffset((DgnTextFileWriter *)v110, "HierScorerChannelTransAccOffset", &v99, v94, *((_DWORD *)this + 3));
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v99);
      ++v94;
      unint64_t v93 = *((unsigned int *)this + 44);
      v95 += 72;
    }
    while (v94 < v93);
  }
  if (v93)
  {
    unint64_t v97 = 0;
    do
    {
      writeLogDeterminant((DgnTextFileWriter *)v110, "HierScorerChannelTransAccLogDeterminant", *(_DWORD *)(*((void *)this + 25) + 4 * v97), v97, v85, v86, v87, v88, v98);
      ++v97;
    }
    while (v97 < *((unsigned int *)this + 44));
  }
LABEL_113:
  DgnString::~DgnString((DgnString *)&v101);
  DgnString::~DgnString((DgnString *)&v103);
  DgnArray<DgnString>::releaseAll((uint64_t)v105);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v106);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v108);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v110);
}

void sub_213EA6700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va5, a4);
  va_start(va4, a4);
  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v11 = va_arg(va3, void);
  uint64_t v13 = va_arg(va3, void);
  va_copy(va4, va3);
  uint64_t v14 = va_arg(va4, void);
  uint64_t v16 = va_arg(va4, void);
  va_copy(va5, va4);
  uint64_t v17 = va_arg(va5, void);
  uint64_t v19 = va_arg(va5, void);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnArray<DgnString>::releaseAll((uint64_t)va2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va4);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)va5);
  _Unwind_Resume(a1);
}

uint64_t writeObject<LinearTransform>(DgnStream *a1, uint64_t a2, unsigned int *a3)
{
  int v9 = *(_DWORD *)(a2 + 8);
  uint64_t result = writeObject((uint64_t)a1, &v9, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      uint64_t result = LinearTransform::writeObject((LinearTransform *)(*(void *)a2 + v7), a1, a3);
      ++v8;
      v7 += 72;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

void writeIntMatrix(DgnTextFileWriter *this, char *a2, int a3, void *a4, int a5, unsigned int a6, int a7)
{
  if (a6)
  {
    for (unsigned int i = 0; i < a6; ++i)
    {
      if (a7)
      {
        uint64_t v14 = 0;
        do
        {
          DgnTextFileWriter::setLineFieldValue(this, 0, a2);
          DgnTextFileWriter::setLineFieldUnsignedValue(this, 1u, a5);
          if (a3)
          {
            unsigned int i = v14;
            uint64_t v15 = 0;
          }
          else
          {
            uint64_t v15 = v14;
          }
          DgnTextFileWriter::setLineFieldUnsignedValue(this, 2u, i);
          DgnTextFileWriter::setLineFieldUnsignedValue(this, 3u, v14);
          DgnTextFileWriter::setLineFieldIntegerValue(this, 4u, *(_DWORD *)(*(void *)(*a4 + 16 * i) + 4 * v15));
          DgnTextFileWriter::writeNextLine(this);
          ++v14;
        }
        while (a7 != v14);
      }
    }
  }
}

void writeIntOffset(DgnTextFileWriter *this, char *a2, void *a3, int a4, unsigned int a5)
{
  if (a5)
  {
    uint64_t v9 = 0;
    uint64_t v10 = a5;
    do
    {
      DgnTextFileWriter::setLineFieldValue(this, 0, a2);
      DgnTextFileWriter::setLineFieldUnsignedValue(this, 1u, a4);
      DgnTextFileWriter::setLineFieldUnsignedValue(this, 2u, v9);
      DgnTextFileWriter::setLineFieldUnsignedValue(this, 3u, 0);
      DgnTextFileWriter::setLineFieldIntegerValue(this, 4u, *(_DWORD *)(*a3 + 4 * v9));
      DgnTextFileWriter::writeNextLine(this);
      ++v9;
    }
    while (v10 != v9);
  }
}

void writeLogDeterminant(DgnTextFileWriter *a1, char *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned int a9)
{
  DgnTextFileWriter::setLineFieldValue(a1, 0, a2);
  DgnTextFileWriter::setLineFieldUnsignedValue(a1, 1u, a4);
  DgnTextFileWriter::setLineFieldIntegerValue(a1, 2u, 0);
  DgnTextFileWriter::setLineFieldIntegerValue(a1, 3u, 0);
  DgnTextFileWriter::setLineFieldIntegerValue(a1, 4u, a3);

  DgnTextFileWriter::writeNextLine(a1);
}

void MrecInitModule_recoggrm_recogctl(void)
{
  if (!gParDebugPronGuesser)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugPronGuesser", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    *uint64_t v1 = &unk_26C4E0858;
    gParDebugPronGuesser = (uint64_t)v1;
    uint64_t v2 = (uint64_t *)GlobalParamMgr::smpGlobalParamMgr;
    GlobalParamMgr::addParam(v2, (GlobalParam **)&gParDebugPronGuesser);
  }
}

void dismantleRecogGrammarIArray(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)(a1 + 8))
  {
    unint64_t v9 = 0;
    do
    {
      RecogGrammar::unlinkStates(*(RecogGrammar **)(*(void *)a1 + 8 * v9++), a2, a3, a4, a5, a6, a7, a8);
      unint64_t v10 = *(unsigned int *)(a1 + 8);
    }
    while (v9 < v10);
    if (v10)
    {
      unint64_t v11 = 0;
      do
      {
        RecogGrammar::killStates(*(RecogGrammar **)(*(void *)a1 + 8 * v11), a2, a3, a4, a5, a6, a7, a8);
        DgnDelete<RecogGrammar>(*(void (****)(void))(*(void *)a1 + 8 * v11++));
      }
      while (v11 < *(unsigned int *)(a1 + 8));
    }
  }
  *(_DWORD *)(a1 + 8) = 0;
}

void RecogGrammar::unlinkStates(RecogGrammar *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 6))
  {
    unint64_t v9 = 0;
    unint64_t v10 = *(StateMgr **)(*(void *)(*(void *)(ModelMgr::smpModelMgr + 264) + 8 * *((unsigned __int16 *)this + 4))
                       + 56);
    do
    {
      StateMgr::setEmptyStateTransition(v10, *(_DWORD *)(*((void *)this + 2) + 4 * v9), 1, a4, a5, a6, a7, a8);
      StateMgr::setWordAliasState(v10, *(_DWORD *)(*((void *)this + 2) + 4 * v9++), 0, 1, v11, v12, v13, v14);
    }
    while (v9 < *((unsigned int *)this + 6));
  }
}

void *RecogGrammar::killStates(RecogGrammar *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9 = (void *)*((void *)this + 4);
  if (v9)
  {
    MemChunkFree(v9, 0);
    *((void *)this + 4) = 0;
  }
  *((void *)this + 5) = 0;
  unint64_t v10 = (void *)*((void *)this + 6);
  if (v10)
  {
    MemChunkFree(v10, 0);
    *((void *)this + 6) = 0;
  }
  *((void *)this + 7) = 0;
  int v11 = *((_DWORD *)this + 6);
  if (v11)
  {
    uint64_t v12 = ModelMgr::smpModelMgr;
    do
    {
      unsigned int v13 = v11 - 1;
      uint64_t v14 = *(unsigned int *)(*((void *)this + 2) + 4 * v13);
      *((_DWORD *)this + 6) = v13;
      StateMgr::killState(*(StateMgr **)(*(void *)(*(void *)(v12 + 264) + 8 * *((unsigned __int16 *)this + 4)) + 56), v14, 1, a4, a5, a6, a7, a8);
      int v11 = *((_DWORD *)this + 6);
    }
    while (v11);
  }
  uint64_t result = (void *)*((void *)this + 2);
  if (result)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *((void *)this + 2) = 0;
  }
  *((void *)this + 3) = 0;
  *((_WORD *)this + 4) = 127;
  *((unsigned char *)this + 10) = 0;
  return result;
}

void (***DgnDelete<RecogGrammar>(void (***result)(void)))(void)
{
  if (result)
  {
    uint64_t v1 = result;
    (**result)(result);
    return (void (***)(void))MemChunkFree(v1, 0);
  }
  return result;
}

void PronGenerator::PronGenerator(PronGenerator *this, unsigned int a2, __int16 a3, uint64_t a4, uint64_t a5, uint64_t a6, PronGuessParamSet *a7, uint64_t a8)
{
  *(_WORD *)this = a2;
  *((_WORD *)this + 1) = a3;
  *((_DWORD *)this + 1) = a4;
  *((_DWORD *)this + 2) = a5;
  *((void *)this + 3) = a7;
  int v8 = *((_DWORD *)a7 + 14);
  *((_DWORD *)this + 3) = a6;
  *((_DWORD *)this + 4) = v8;
  StateMgr::getColls(*(StateMgr **)(*(void *)(*(void *)(ModelMgr::smpModelMgr + 264) + 8 * a2) + 56), a4, 1, a4, a5, a6, (uint64_t)a7, a8);
}

void PronGenerator::~PronGenerator(PronGenerator *this)
{
  *((void *)this + 3) = 0;
}

uint64_t *RecogGrammar::newEndOfUtteranceRecogGrammar(RecogGrammar *this)
{
  __int16 v1 = (__int16)this;
  uint64_t v2 = MemChunkAlloc(0x40uLL, 0);
  *uint64_t v2 = (uint64_t)&unk_26C4DFB30;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_WORD *)v2 + 4) = v1;
  *((unsigned char *)v2 + 10) = 0;
  RecogGrammar::setupEndOfUtteranceGrammar((RecogGrammar *)v2, v3, v4, v5, v6, v7, v8, v9);
  return v2;
}

void RecogGrammar::setupEndOfUtteranceGrammar(RecogGrammar *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int NewState = RecogGrammar::getNewState(this, a2, a3, a4, a5, a6, a7, a8);
  unsigned int v14 = *((_DWORD *)this + 10);
  if (v14 == *((_DWORD *)this + 11))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 32, 1, 1);
    unsigned int v14 = *((_DWORD *)this + 10);
  }
  *(_DWORD *)(*((void *)this + 4) + 4 * v14) = NewState;
  ++*((_DWORD *)this + 10);
  unsigned int v15 = *((_DWORD *)this + 14);
  if (v15 == *((_DWORD *)this + 15))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 48, 1, 1);
    unsigned int v15 = *((_DWORD *)this + 14);
  }
  *(_DWORD *)(*((void *)this + 6) + 4 * v15) = NewState;
  uint64_t v16 = *(void *)(*(void *)(ModelMgr::smpModelMgr + 264) + 8 * *((unsigned __int16 *)this + 4));
  ++*((_DWORD *)this + 14);
  uint64_t v17 = *(StateMgr **)(v16 + 56);

  StateMgr::setEndOfUtteranceAllowed(v17, NewState, 1, 1, v9, v10, v11, v12);
}

uint64_t *RecogGrammar::newPronGuessRecogGrammar(RecogGrammar *this, const PronGenerator *a2, CharInfo **a3, const DgnString *a4)
{
  uint64_t v7 = MemChunkAlloc(0xA8uLL, 0);
  WordStatesRecogGrammar::WordStatesRecogGrammar((WordStatesRecogGrammar *)v7, *(_WORD *)this);
  WordStatesRecogGrammar::setupPronGuessGrammar(v8, this, (uint64_t)a2, a3, v9, v10, v11, v12);
  return v7;
}

uint64_t WordStatesRecogGrammar::setupPronGuessGrammar(WordStatesRecogGrammar *this, const PronGenerator *a2, uint64_t a3, CharInfo **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v333 = a3;
  uint64_t v9 = *(void *)(*(void *)(ModelMgr::smpModelMgr + 264) + 8 * *((unsigned __int16 *)this + 4));
  int v10 = **(_DWORD **)(v9 + 8);
  uint64_t v370 = 0;
  uint64_t v371 = 0;
  if (*((_DWORD *)a4 + 2)) {
    uint64_t v11 = *a4;
  }
  else {
    uint64_t v11 = (CharInfo *)&byte_2140B33BB;
  }
  if (v10)
  {
    CharInfo::getLogicalCharLengthsForEncodedCharString(v11, (uint64_t)&v370, a3, (unsigned int *)a4, a5, a6, a7, a8);
    uint64_t v12 = v371;
  }
  else if (*(unsigned char *)v11)
  {
    LODWORD(v12) = 0;
    unsigned int v13 = (unsigned __int8 *)v11 + 1;
    do
    {
      if (v12 == HIDWORD(v371))
      {
        DgnPrimArray<char>::reallocElts((uint64_t)&v370, 1, 1);
        LODWORD(v12) = v371;
      }
      *(unsigned char *)(v370 + v12) = 1;
      uint64_t v12 = (v371 + 1);
      LODWORD(v371) = v371 + 1;
    }
    while (*v13++);
  }
  else
  {
    uint64_t v12 = 0;
  }
  uint64_t v338 = this;
  uint64_t v15 = *((unsigned __int16 *)a2 + 1);
  v343 = *(StateMgr **)(v9 + 56);
  StateMgr::checkCollIdExposed(v343, *((_DWORD *)a2 + 1), v15, (uint64_t)a4, a5, a6, a7, a8);
  uint64_t v16 = *(uint64_t **)(v9 + 48);
  uint64_t v339 = *(CollMgr **)(v9 + 16);
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v369, v12);
  v367 = 0;
  uint64_t v368 = 0;
  if (v12)
  {
    uint64_t v365 = 0;
    unint64_t v17 = realloc_array(0, &v365, 4 * v12, 0, 0, 1);
    uint64_t v366 = 0;
    v367 = (unsigned int *)v365;
    LODWORD(v368) = v12;
    HIDWORD(v368) = v17 >> 2;
    uint64_t v364 = 0;
    uint64_t v365 = 0;
    uint64_t v363 = 0;
    if ((v333 & 1) == 0) {
      goto LABEL_21;
    }
    v362[0] = 0;
    HIDWORD(v366) = realloc_array(0, v362, 4 * v12, 0, 0, 1) >> 2;
    uint64_t v365 = v362[0];
    unsigned int v18 = HIDWORD(v364);
  }
  else
  {
    LODWORD(v368) = 0;
    uint64_t v365 = 0;
    uint64_t v366 = 0;
    uint64_t v363 = 0;
    uint64_t v364 = 0;
    if ((v333 & 1) == 0) {
      goto LABEL_21;
    }
    unsigned int v18 = 0;
  }
  LODWORD(v366) = v12;
  if (v18 < v12)
  {
    v362[0] = 0;
    HIDWORD(v3DgnArray<LinearTransform>::releaseAll((uint64_t)this + 64) = realloc_array(v363, v362, 4 * v12, 4 * v364, 4 * v364, 1) >> 2;
    uint64_t v363 = v362[0];
  }
  LODWORD(v3DgnArray<LinearTransform>::releaseAll((uint64_t)this + 64) = v12;
LABEL_21:
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v362, v12);
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v361, v12);
  unint64_t v19 = (v12 + 1);
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v360, v19);
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v359, v19);
  DgnString::DgnString((DgnString *)v358);
  unsigned int v337 = v12;
  DgnString::DgnString((DgnString *)&v356);
  uint64_t v354 = 0;
  uint64_t v355 = 0;
  uint64_t v352 = 0;
  uint64_t v353 = 0;
  uint64_t v350 = 0;
  uint64_t v351 = 0;
  uint64_t v27 = *((void *)a2 + 3);
  int v28 = *(_DWORD *)(v27 + 48);
  int v29 = *(char **)(v27 + 40);
  if (v28) {
    uint64_t v30 = v29;
  }
  else {
    uint64_t v30 = &byte_2140B33BB;
  }
  if (v12)
  {
    uint64_t v31 = 0;
    unsigned int v336 = 0;
    uint64_t v331 = 1;
    uint64_t v332 = (char *)this + 64;
    unint64_t v334 = v19;
    do
    {
      uint64_t v330 = v31 + 1;
      if (v31 + 1 < v19)
      {
        unsigned int v32 = 0;
        uint64_t v33 = v331;
        do
        {
          v32 += *(unsigned __int8 *)(v33 + v370 - 1);
          DgnString::setToMid(v358, (const DgnString *)a4, v336, v32);
          DgnString::operator=((DgnString *)&v356, (DgnString *)v358);
          DgnString::operator+=((DgnString *)&v356, v30);
          LODWORD(v355) = 0;
          LOBYTE(v347[0]) = 0;
          if (v357) {
            int v35 = v356;
          }
          else {
            int v35 = &byte_2140B33BB;
          }
          StateMgr::getWordsWithPrefix(v343, *((_DWORD *)a2 + 1), v15, v35, &byte_2140B33BB, (uint64_t)&v354, (uint64_t)v347, v34);
          if (v355)
          {
            unint64_t v36 = 0;
            BOOL v37 = 0;
            do
            {
              uint64_t v38 = *(unsigned int *)(v354 + 4 * v36);
              if (*v30
                || (v357 ? (unsigned int v39 = (CharInfo *)v356) : (unsigned int v39 = (CharInfo *)&byte_2140B33BB),
                    !CollMgr::collStrcmpUns8(v339, v15, v39, (CharInfo *)(v16[28] + *(unsigned int *)(v16[25] + 4 * v38)), v23, v24, v25, v26)))
              {
                BOOL v37 = v37 || StateMgr::isWordIdInState(v343, *((_DWORD *)a2 + 2), v38, 1, v23, v24, v25, v26);
              }
              else
              {
                LODWORD(v355) = v36;
              }
              ++v36;
            }
            while (v36 < v355);
            if (v355)
            {
              unint64_t v40 = (char *)v362[0] + 16 * v31;
              int v42 = (unsigned int *)(v40 + 8);
              unsigned int v41 = *((_DWORD *)v40 + 2);
              if (v41 == *((_DWORD *)v40 + 3))
              {
                DgnPrimArray<char>::reallocElts((uint64_t)v362[0] + 16 * v31, 1, 1);
                unsigned int v41 = *v42;
                int v43 = v355;
              }
              else
              {
                int v43 = 1;
              }
              *(unsigned char *)(*(void *)v40 + v41) = v37;
              *int v42 = v41 + 1;
              LODWORD(v351) = 0;
              if (v43)
              {
                unint64_t v44 = 0;
                do
                {
                  WordList::lookupAll(v16, *(_DWORD *)(v354 + 4 * v44), (uint64_t)&v352);
                  int v45 = v353;
                  uint64_t v20 = (v351 + v353 - HIDWORD(v351));
                  if ((v351 + v353) > HIDWORD(v351))
                  {
                    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v350, v20, 1);
                    int v45 = v353;
                  }
                  if (v45)
                  {
                    unint64_t v46 = 0;
                    uint64_t v47 = v352;
                    uint64_t v48 = v350;
                    do
                    {
                      *(_DWORD *)(v48 + 4 * (v46 + v351)) = *(_DWORD *)(v47 + 4 * v46);
                      ++v46;
                      int v49 = v353;
                    }
                    while (v46 < v353);
                  }
                  else
                  {
                    int v49 = 0;
                  }
                  LODWORD(v351) = v351 + v49;
                  ++v44;
                }
                while (v44 < v355);
              }
              uint64_t v50 = v31;
              v348[0] = RecogGrammar::getNewState(v338, v20, v21, v22, v23, v24, v25, v26);
              HashKEV<unsigned int,unsigned int,CWIDScope>::add((uint64_t)v332, (int *)v348);
              unsigned int v51 = v348[0];
              StateMgr::addWordIdArray(v343, v348[0], (uint64_t)&v350, 1, v52, v53, v54, v55);
              StateMgr::setLeftWBAllowed(v343, v51, v31 == 0, 1, v56, v57, v58, v59);
              StateMgr::setRightWBAllowed(v343, v51, v33 == v337, 1, v60, v61, v62, v63);
              uint64_t v64 = v360[0] + 16 * v33;
              uint64_t v66 = (unsigned int *)(v64 + 8);
              unsigned int v65 = *(_DWORD *)(v64 + 8);
              if (v65 == *(_DWORD *)(v64 + 12))
              {
                DgnPrimArray<short>::reallocElts(v360[0] + 16 * v33, 1, 1);
                unsigned int v65 = *v66;
              }
              *(_WORD *)(*(void *)v64 + 2 * v65) = v31;
              *uint64_t v66 = v65 + 1;
              uint64_t v67 = v359[0] + 16 * v33;
              uint64_t v68 = v369[0];
              int v69 = *(_DWORD *)(v369[0] + 16 * v31 + 8);
              unsigned int v71 = (unsigned int *)(v67 + 8);
              unsigned int v70 = *(_DWORD *)(v67 + 8);
              if (v70 == *(_DWORD *)(v67 + 12))
              {
                DgnPrimArray<short>::reallocElts(v359[0] + 16 * v33, 1, 1);
                unsigned int v70 = *v71;
                uint64_t v68 = v369[0];
                uint64_t v72 = v50;
                uint64_t v73 = *(unsigned int *)(v369[0] + 16 * v50 + 8);
              }
              else
              {
                uint64_t v73 = *(unsigned int *)(v369[0] + 16 * v50 + 8);
                uint64_t v72 = v50;
              }
              *(_WORD *)(*(void *)v67 + 2 * v70) = v69;
              unsigned int *v71 = v70 + 1;
              uint64_t v74 = v68 + 16 * v72;
              unint64_t v75 = (_DWORD *)(v74 + 8);
              uint64_t v31 = v72;
              if (v73 == *(_DWORD *)(v74 + 12))
              {
                DgnPrimArray<unsigned int>::reallocElts(v74, 1, 1);
                uint64_t v73 = *v75;
                uint64_t v31 = v50;
              }
              *(_DWORD *)(*(void *)v74 + 4 * v73) = v51;
              ++*v75;
              uint64_t v76 = v361[0] + 16 * v31;
              uint64_t v78 = (unsigned int *)(v76 + 8);
              unsigned int v77 = *(_DWORD *)(v76 + 8);
              if (v77 == *(_DWORD *)(v76 + 12))
              {
                DgnPrimArray<short>::reallocElts(v361[0] + 16 * v31, 1, 1);
                unsigned int v77 = *v78;
                uint64_t v31 = v50;
              }
              *(_WORD *)(*(void *)v76 + 2 * v77) = v33;
              *uint64_t v78 = v77 + 1;
            }
          }
          ++v33;
          unint64_t v19 = v334;
        }
        while (v334 != v33);
      }
      v348[0] = RecogGrammar::getNewState(v338, v20, v21, v22, v23, v24, v25, v26);
      HashKEV<unsigned int,unsigned int,CWIDScope>::add((uint64_t)v332, (int *)v348);
      unsigned int v79 = v348[0];
      v367[v31] = v348[0];
      StateMgr::setSkipAllowed(v343, v79, 1, 1, v80, v81, v82, v83);
      StateMgr::setLeftWBAllowed(v343, v367[v31], v31 == 0, 1, v84, v85, v86, v87);
      StateMgr::setRightWBAllowed(v343, v367[v31], v31 == 0, 1, v88, v89, v90, v91);
      if (v333)
      {
        v348[0] = RecogGrammar::getNewState(v338, v20, v21, v22, v23, v24, v25, v26);
        HashKEV<unsigned int,unsigned int,CWIDScope>::add((uint64_t)v332, (int *)v348);
        uint64_t v92 = v348[0];
        *((_DWORD *)v365 + v31) = v348[0];
        StateMgr::setWordPenalty(v343, v92, *((_DWORD *)a2 + 4), 1, v93, v94, v95, v96);
        StateMgr::setWordAliasState(v343, *((_DWORD *)v365 + v31), *((_DWORD *)a2 + 3), 1, v97, v98, v99, v100);
        StateMgr::setLeftWBAllowed(v343, *((_DWORD *)v365 + v31), 0, 1, v101, v102, v103, v104);
        StateMgr::setRightWBAllowed(v343, *((_DWORD *)v365 + v31), 0, 1, v105, v106, v107, v108);
        v348[0] = RecogGrammar::getNewState(v338, v109, v110, v111, v112, v113, v114, v115);
        HashKEV<unsigned int,unsigned int,CWIDScope>::add((uint64_t)v332, (int *)v348);
        unsigned int v116 = v348[0];
        *((_DWORD *)v363 + v31) = v348[0];
        StateMgr::setSkipAllowed(v343, v116, 1, 1, v117, v118, v119, v120);
        StateMgr::setLeftWBAllowed(v343, *((_DWORD *)v363 + v31), 0, 1, v121, v122, v123, v124);
        StateMgr::setRightWBAllowed(v343, *((_DWORD *)v363 + v31), 0, 1, v125, v126, v127, v128);
      }
      v336 += *(unsigned __int8 *)(v370 + v31);
      ++v331;
      uint64_t v31 = v330;
    }
    while (v330 != v337);
  }
  *(void *)uint64_t v348 = 0;
  uint64_t v349 = 0;
  if (v333)
  {
    uint64_t v129 = v338;
    unsigned int v130 = v337;
    v347[0] = RecogGrammar::getNewState(v338, v20, v21, v22, v23, v24, v25, v26);
    HashKEV<unsigned int,unsigned int,CWIDScope>::add((uint64_t)v338 + 64, (int *)v347);
    unsigned int v340 = v347[0];
    StateMgr::setWordPenalty(v343, v347[0], *((_DWORD *)a2 + 4), 1, v131, v132, v133, v134);
    StateMgr::setWordAliasState(v343, v340, *((_DWORD *)a2 + 3), 1, v135, v136, v137, v138);
    StateMgr::setLeftWBAllowed(v343, v340, 1, 1, v139, v140, v141, v142);
    StateMgr::setRightWBAllowed(v343, v340, 0, 1, v143, v144, v145, v146);
    v347[0] = RecogGrammar::getNewState(v338, v147, v148, v149, v150, v151, v152, v153);
    HashKEV<unsigned int,unsigned int,CWIDScope>::add((uint64_t)v338 + 64, (int *)v347);
    unsigned int v154 = v347[0];
    StateMgr::setWordPenalty(v343, v347[0], *((_DWORD *)a2 + 4), 1, v155, v156, v157, v158);
    StateMgr::setWordAliasState(v343, v154, *((_DWORD *)a2 + 3), 1, v159, v160, v161, v162);
    StateMgr::setLeftWBAllowed(v343, v154, 0, 1, v163, v164, v165, v166);
    StateMgr::setRightWBAllowed(v343, v154, 1, 1, v167, v168, v169, v170);
    v347[0] = RecogGrammar::getNewState(v338, v171, v172, v173, v174, v175, v176, v177);
    HashKEV<unsigned int,unsigned int,CWIDScope>::add((uint64_t)v338 + 64, (int *)v347);
    unsigned int v178 = v347[0];
    StateMgr::setWordPenalty(v343, v347[0], *((_DWORD *)a2 + 4), 1, v179, v180, v181, v182);
    StateMgr::setWordAliasState(v343, v178, *((_DWORD *)a2 + 3), 1, v183, v184, v185, v186);
    StateMgr::setLeftWBAllowed(v343, v178, 1, 1, v187, v188, v189, v190);
    StateMgr::setRightWBAllowed(v343, v178, 1, 1, v191, v192, v193, v194);
    unsigned int v195 = *((_DWORD *)v338 + 10);
    if (v195 == *((_DWORD *)v338 + 11))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)v338 + 32, 1, 1);
      unsigned int v195 = *((_DWORD *)v338 + 10);
    }
    *(_DWORD *)(*((void *)v338 + 4) + 4 * v195) = v178;
    ++*((_DWORD *)v338 + 10);
    unsigned int v196 = *((_DWORD *)v338 + 14);
    if (v196 == *((_DWORD *)v338 + 15))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)v338 + 48, 1, 1);
      unsigned int v196 = *((_DWORD *)v338 + 14);
    }
    *(_DWORD *)(*((void *)v338 + 6) + 4 * v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = v178;
    ++*((_DWORD *)v338 + 14);
  }
  else
  {
    unsigned int v340 = 0;
    unsigned int v154 = 0;
    unsigned int v130 = v337;
    uint64_t v129 = v338;
  }
  unsigned int v197 = *v367;
  unsigned int v198 = *((_DWORD *)v129 + 10);
  if (v198 == *((_DWORD *)v129 + 11))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)v129 + 32, 1, 1);
    unsigned int v198 = *((_DWORD *)v129 + 10);
  }
  *(_DWORD *)(*((void *)v129 + 4) + 4 * v198) = v197;
  ++*((_DWORD *)v129 + 10);
  BitArray::BitArray((BitArray *)v347, v130);
  BitArray::BitArray((BitArray *)v346, v130);
  if (!v130)
  {
    LODWORD(v203) = -1;
LABEL_164:
    uint64_t v279 = (uint64_t)v129 + 64;
    uint64_t v280 = (uint64_t)v129 + 48;
    uint64_t v281 = v203;
    while (1)
    {
      if ((*(_DWORD *)(v346[0] + 4 * (v281 >> 5)) >> v281))
      {
        LODWORD(v349) = 0;
        uint64_t v344 = 0;
        uint64_t v345 = 0;
        v372[0] = 0;
        unint64_t v282 = realloc_array(0, v372, 4uLL, 0, 0, 1);
        uint64_t v344 = (unsigned int *)v372[0];
        LODWORD(v345) = 1;
        HIDWORD(v345) = v282 >> 2;
        uint64_t v290 = v360[0];
        if (*(_DWORD *)(v360[0] + 16 * v281 + 8))
        {
          unint64_t v291 = 0;
          while (1)
          {
            unint64_t v292 = *(unsigned __int16 *)(*(void *)(v290 + 16 * v281) + 2 * v291);
            uint64_t v293 = *(unsigned __int16 *)(*(void *)(v359[0] + 16 * v281) + 2 * v291);
            if (*(unsigned char *)(*((void *)v362[0] + 2 * v292) + v293)) {
              *(_DWORD *)(v346[0] + ((v292 >> 3) & 0x1FFC)) |= 1 << v292;
            }
            LODWORD(v372[0]) = RecogGrammar::getNewState(v338, v283, v284, v285, v286, v287, v288, v289);
            HashKEV<unsigned int,unsigned int,CWIDScope>::add(v279, (int *)v372);
            unsigned int v294 = v372[0];
            unsigned int v295 = *(_DWORD *)(*(void *)(v369[0] + 16 * v292) + 4 * v293);
            StateMgr::setWordAliasState(v343, v372[0], v295, 1, v296, v297, v298, v299);
            StateMgr::setRightWBAllowed(v343, v294, 1, 1, v300, v301, v302, v303);
            StateMgr::setLeftWBAllowed(v343, v294, v292 == 0, 1, v304, v305, v306, v307);
            uint64_t v310 = v338;
            uint64_t v311 = *((unsigned int *)v338 + 14);
            if (v311 == *((_DWORD *)v338 + 15))
            {
              DgnPrimArray<unsigned int>::reallocElts(v280, 1, 1);
              uint64_t v310 = v338;
              uint64_t v311 = *((unsigned int *)v338 + 14);
            }
            *(_DWORD *)(*((void *)v310 + 6) + 4 * v311) = v294;
            ++*((_DWORD *)v310 + 14);
            *uint64_t v344 = v294;
            StateMgr::addStateTransition((unint64_t)v343, v367[v292], (uint64_t *)&v344, 1, 0, 0, v308, v309);
            if (v292)
            {
              if (v333) {
                break;
              }
            }
            if (v292) {
              goto LABEL_176;
            }
LABEL_182:
            ++v291;
            uint64_t v290 = v360[0];
            if (v291 >= *(unsigned int *)(v360[0] + 16 * v281 + 8)) {
              goto LABEL_183;
            }
          }
          StateMgr::addStateTransition((unint64_t)v343, *((_DWORD *)v363 + v292), (uint64_t *)&v344, 1, 0, 0, v288, v289);
LABEL_176:
          if ((*(_DWORD *)(*(void *)v347 + ((v292 >> 3) & 0x1FFC)) >> v292))
          {
            LODWORD(v372[0]) = RecogGrammar::getNewState(v338, v283, v284, v285, v286, v287, v288, v289);
            HashKEV<unsigned int,unsigned int,CWIDScope>::add(v279, (int *)v372);
            unsigned int v312 = v372[0];
            StateMgr::setWordAliasState(v343, v372[0], v295, 1, v313, v314, v315, v316);
            StateMgr::setRightWBAllowed(v343, v312, 1, 1, v317, v318, v319, v320);
            StateMgr::setLeftWBAllowed(v343, v312, 1, 1, v321, v322, v323, v324);
            uint64_t v325 = *((unsigned int *)v338 + 14);
            if (v325 == *((_DWORD *)v338 + 15))
            {
              DgnPrimArray<unsigned int>::reallocElts(v280, 1, 1);
              uint64_t v325 = *((unsigned int *)v338 + 14);
            }
            *(_DWORD *)(*((void *)v338 + 6) + 4 * v325) = v312;
            ++*((_DWORD *)v338 + 14);
            uint64_t v326 = v349;
            if (v349 == (unint64_t)HIDWORD(v349))
            {
              DgnPrimArray<unsigned int>::reallocElts((uint64_t)v348, 1, 1);
              uint64_t v326 = v349;
            }
            *(_DWORD *)(*(void *)v348 + 4 * v326) = v312;
            LODWORD(v349) = v349 + 1;
          }
          goto LABEL_182;
        }
LABEL_183:
        if (v349) {
          StateMgr::addStateTransition((unint64_t)v343, *v367, (uint64_t *)v348, 1, 0, 0, v288, v289);
        }
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v344);
        uint64_t v129 = v338;
      }
      if (!--v281) {
        goto LABEL_187;
      }
    }
  }
  unsigned int v342 = v154;
  unint64_t v201 = 0;
  uint64_t v202 = (uint64_t)v129 + 48;
  unint64_t v203 = v130 - 1;
  uint64_t v204 = v130;
  do
  {
    uint64_t v205 = v369[0] + 16 * v201;
    if (*(_DWORD *)(v205 + 8))
    {
      StateMgr::addStateTransition((unint64_t)v343, v367[v201], (uint64_t *)v205, 1, 0, 0, v199, v200);
      uint64_t v208 = v369[0];
      if (*(_DWORD *)(v369[0] + 16 * v201 + 8))
      {
        unint64_t v209 = 0;
        while (1)
        {
          unint64_t v210 = *(unsigned __int16 *)(*(void *)(v361[0] + 16 * v201) + 2 * v209);
          if (v337 <= v210)
          {
            int v213 = *(_DWORD *)(*(void *)(v208 + 16 * v201) + 4 * v209);
            uint64_t v214 = v338;
            uint64_t v215 = *((unsigned int *)v338 + 14);
            if (v215 == *((_DWORD *)v338 + 15))
            {
              DgnPrimArray<unsigned int>::reallocElts(v202, 1, 1);
              uint64_t v214 = v338;
              uint64_t v215 = *((unsigned int *)v338 + 14);
            }
            *(_DWORD *)(*((void *)v214 + 6) + 4 * v215) = v213;
            ++*((_DWORD *)v214 + 14);
          }
          else
          {
            LODWORD(v349) = 0;
            unsigned int v211 = v367[v210];
            if (HIDWORD(v349))
            {
              uint64_t v212 = 0;
            }
            else
            {
              DgnPrimArray<unsigned int>::reallocElts((uint64_t)v348, 1, 1);
              uint64_t v212 = v349;
              uint64_t v208 = v369[0];
            }
            *(_DWORD *)(*(void *)v348 + 4 * v212) = v211;
            LODWORD(v349) = v349 + 1;
            StateMgr::addStateTransition((unint64_t)v343, *(_DWORD *)(*(void *)(v208 + 16 * v201) + 4 * v209), (uint64_t *)v348, 1, 0, 0, v199, v200);
          }
          if (!*(unsigned char *)(*((void *)v362[0] + 2 * v201) + v209)) {
            goto LABEL_100;
          }
          if (v337 == v210) {
            break;
          }
          if (!v201)
          {
            uint64_t v216 = (_DWORD *)(*(void *)v347 + ((v210 >> 3) & 0x1FFC));
            goto LABEL_99;
          }
          StateMgr::setSkipAllowed(v343, *(_DWORD *)(*(void *)(v369[0] + 16 * v201) + 4 * v209), 1, 1, v206, v207, v199, v200);
LABEL_100:
          ++v209;
          uint64_t v208 = v369[0];
          if (v209 >= *(unsigned int *)(v369[0] + 16 * v201 + 8)) {
            goto LABEL_101;
          }
        }
        uint64_t v216 = (_DWORD *)(v346[0] + 4 * (v201 >> 5));
        LOBYTE(v210) = v201;
LABEL_99:
        *v216 |= 1 << v210;
        goto LABEL_100;
      }
    }
LABEL_101:
    if (v333)
    {
      if (!v201)
      {
        LODWORD(v349) = 0;
        if (HIDWORD(v349))
        {
          uint64_t v217 = 0;
        }
        else
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)v348, 1, 1);
          uint64_t v217 = v349;
        }
        *(_DWORD *)(*(void *)v348 + 4 * v217) = v340;
        LODWORD(v349) = v349 + 1;
        StateMgr::addStateTransition((unint64_t)v343, *v367, (uint64_t *)v348, 1, 0, 0, v199, v200);
        LODWORD(v349) = 0;
        unsigned int v220 = *(_DWORD *)v365;
        if (HIDWORD(v349))
        {
          uint64_t v221 = 0;
        }
        else
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)v348, 1, 1);
          uint64_t v221 = v349;
        }
        uint64_t v222 = *(void *)v348;
        *(_DWORD *)(*(void *)v348 + 4 * v221) = v220;
        unsigned int v223 = v349 + 1;
        LODWORD(v349) = v349 + 1;
        unsigned int v224 = v342;
        if (v337 != 1) {
          unsigned int v224 = *((_DWORD *)v363 + 1);
        }
        if (v223 == HIDWORD(v349))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)v348, 1, 1);
          unsigned int v223 = v349;
          uint64_t v222 = *(void *)v348;
        }
        *(_DWORD *)(v222 + 4 * v223) = v224;
        LODWORD(v349) = v349 + 1;
        StateMgr::addStateTransition((unint64_t)v343, v340, (uint64_t *)v348, 1, 0, 0, v218, v219);
        if (v337 != 1) {
          StateMgr::addStateTransition((unint64_t)v343, *(_DWORD *)v365, (uint64_t *)v348, 1, 0, 0, v199, v200);
        }
      }
      if (v201 == v203)
      {
        LODWORD(v349) = 0;
        int v225 = *((_DWORD *)v365 + v203);
        if (HIDWORD(v349))
        {
          uint64_t v226 = 0;
        }
        else
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)v348, 1, 1);
          uint64_t v226 = v349;
        }
        uint64_t v227 = *(void *)v348;
        *(_DWORD *)(*(void *)v348 + 4 * v226) = v225;
        unsigned int v228 = v349 + 1;
        LODWORD(v349) = v228;
        if (v228 == HIDWORD(v349))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)v348, 1, 1);
          unsigned int v228 = v349;
          uint64_t v227 = *(void *)v348;
        }
        *(_DWORD *)(v227 + 4 * v228) = v342;
        LODWORD(v349) = v349 + 1;
        StateMgr::addStateTransition((unint64_t)v343, *((_DWORD *)v365 + v203), (uint64_t *)v348, 1, 0, 0, v199, v200);
        uint64_t v229 = v338;
        uint64_t v230 = *((unsigned int *)v338 + 14);
        if (v230 == *((_DWORD *)v338 + 15))
        {
          DgnPrimArray<unsigned int>::reallocElts(v202, 1, 1);
          uint64_t v229 = v338;
          uint64_t v230 = *((unsigned int *)v338 + 14);
        }
        *(_DWORD *)(*((void *)v229 + 6) + 4 * v230) = v342;
        ++*((_DWORD *)v229 + 14);
        if (v337 != 1)
        {
          StateMgr::addStateTransition((unint64_t)v343, v367[v203], (uint64_t *)v348, 1, 0, 0, v199, v200);
          StateMgr::addStateTransition((unint64_t)v343, *((_DWORD *)v363 + v203), (uint64_t *)(v369[0] + 16 * v203), 1, 0, 0, v231, v232);
          LODWORD(v349) = 0;
          if (HIDWORD(v349))
          {
            uint64_t v235 = 0;
          }
          else
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)v348, 1, 1);
            uint64_t v235 = v349;
          }
          *(_DWORD *)(*(void *)v348 + 4 * v235) = v342;
          LODWORD(v349) = v349 + 1;
          StateMgr::addStateTransition((unint64_t)v343, *((_DWORD *)v363 + v203), (uint64_t *)v348, 1, 0, 0, v233, v234);
        }
      }
      if (v201 && v201 < v203)
      {
        LODWORD(v349) = 0;
        int v236 = *((_DWORD *)v365 + v201);
        if (HIDWORD(v349))
        {
          uint64_t v237 = 0;
        }
        else
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)v348, 1, 1);
          uint64_t v237 = v349;
        }
        *(_DWORD *)(*(void *)v348 + 4 * v237) = v236;
        LODWORD(v349) = v349 + 1;
        StateMgr::addStateTransition((unint64_t)v343, v367[v201], (uint64_t *)v348, 1, 0, 0, v199, v200);
        int v240 = *((_DWORD *)v363 + v201 + 1);
        uint64_t v241 = v349;
        if (v349 == (unint64_t)HIDWORD(v349))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)v348, 1, 1);
          uint64_t v241 = v349;
        }
        *(_DWORD *)(*(void *)v348 + 4 * v241) = v240;
        LODWORD(v349) = v349 + 1;
        StateMgr::addStateTransition((unint64_t)v343, *((_DWORD *)v365 + v201), (uint64_t *)v348, 1, 0, 0, v238, v239);
        StateMgr::addStateTransition((unint64_t)v343, *((_DWORD *)v363 + v201), (uint64_t *)(v369[0] + 16 * v201), 1, 0, 0, v242, v243);
        LODWORD(v349) = 0;
        uint64_t v246 = v363;
        int v247 = *((_DWORD *)v363 + v201 + 1);
        if (HIDWORD(v349))
        {
          uint64_t v248 = 0;
        }
        else
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)v348, 1, 1);
          uint64_t v248 = v349;
          uint64_t v246 = v363;
        }
        *(_DWORD *)(*(void *)v348 + 4 * v2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = v247;
        LODWORD(v349) = v349 + 1;
        StateMgr::addStateTransition((unint64_t)v343, *((_DWORD *)v246 + v201), (uint64_t *)v348, 1, 0, 0, v244, v245);
      }
    }
    ++v201;
  }
  while (v201 != v130);
  if (v337 >= 2)
  {
    uint64_t v249 = 1;
    do
    {
      if ((*(_DWORD *)(*(void *)v347 + 4 * (v249 >> 5)) >> v249))
      {
        LODWORD(v349) = 0;
        uint64_t v344 = 0;
        uint64_t v345 = 0;
        v372[0] = 0;
        unint64_t v250 = realloc_array(0, v372, 4uLL, 0, 0, 1);
        uint64_t v344 = (unsigned int *)v372[0];
        LODWORD(v345) = 1;
        HIDWORD(v345) = v250 >> 2;
        if (*(_DWORD *)(v369[0] + 16 * v249 + 8))
        {
          unint64_t v258 = 0;
          do
          {
            unint64_t v259 = *(unsigned __int16 *)(*(void *)(v361[0] + 16 * v249) + 2 * v258);
            if (*(unsigned char *)(*((void *)v362[0] + 2 * v249) + v258)) {
              BOOL v260 = v337 > v259;
            }
            else {
              BOOL v260 = 0;
            }
            if (v260) {
              *(_DWORD *)(*(void *)v347 + ((v259 >> 3) & 0x1FFC)) |= 1 << v259;
            }
            LODWORD(v372[0]) = RecogGrammar::getNewState(v338, v251, v252, v253, v254, v255, v256, v257);
            HashKEV<unsigned int,unsigned int,CWIDScope>::add((uint64_t)v338 + 64, (int *)v372);
            unsigned int v261 = v372[0];
            StateMgr::setWordAliasState(v343, v372[0], *(_DWORD *)(*(void *)(v369[0] + 16 * v249) + 4 * v258), 1, v262, v263, v264, v265);
            StateMgr::setLeftWBAllowed(v343, v261, 1, 1, v266, v267, v268, v269);
            if (v337 <= v259)
            {
              StateMgr::setRightWBAllowed(v343, v261, 1, 1, v270, v271, v272, v273);
              uint64_t v276 = v338;
              uint64_t v277 = *((unsigned int *)v338 + 14);
              if (v277 == *((_DWORD *)v338 + 15))
              {
                DgnPrimArray<unsigned int>::reallocElts(v202, 1, 1);
                uint64_t v276 = v338;
                uint64_t v277 = *((unsigned int *)v338 + 14);
              }
              *(_DWORD *)(*((void *)v276 + 6) + 4 * v277) = v261;
              ++*((_DWORD *)v276 + 14);
            }
            else
            {
              StateMgr::setRightWBAllowed(v343, v261, 0, 1, v270, v271, v272, v273);
              *uint64_t v344 = v367[v259];
              StateMgr::addStateTransition((unint64_t)v343, v261, (uint64_t *)&v344, 1, 0, 0, v274, v275);
            }
            uint64_t v278 = v349;
            if (v349 == (unint64_t)HIDWORD(v349))
            {
              DgnPrimArray<unsigned int>::reallocElts((uint64_t)v348, 1, 1);
              uint64_t v278 = v349;
            }
            *(_DWORD *)(*(void *)v348 + 4 * v278) = v261;
            LODWORD(v349) = v349 + 1;
            ++v258;
          }
          while (v258 < *(unsigned int *)(v369[0] + 16 * v249 + 8));
        }
        StateMgr::addStateTransition((unint64_t)v343, *v367, (uint64_t *)v348, 1, 0, 0, v256, v257);
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v344);
      }
      ++v249;
    }
    while (v249 != v204);
  }
  uint64_t v129 = v338;
  if (v203) {
    goto LABEL_164;
  }
LABEL_187:
  if (v333 & 1) != 0 && (*(unsigned char *)v346[0])
  {
    unsigned int v327 = *v367;
    unsigned int v328 = *((_DWORD *)v129 + 14);
    if (v328 == *((_DWORD *)v129 + 15))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)v129 + 48, 1, 1);
      unsigned int v328 = *((_DWORD *)v129 + 14);
    }
    *(_DWORD *)(*((void *)v129 + 6) + 4 * v328) = v327;
    ++*((_DWORD *)v129 + 14);
  }
  BitArray::~BitArray((BitArray *)v346);
  BitArray::~BitArray((BitArray *)v347);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v348);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v350);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v352);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v354);
  DgnString::~DgnString((DgnString *)&v356);
  DgnString::~DgnString((DgnString *)v358);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v359);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v360);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v361);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v362);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v363);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v365);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v367);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v369);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v370);
}

void sub_213EA8570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,char a39)
{
  BitArray::~BitArray((BitArray *)&a25);
  BitArray::~BitArray((BitArray *)&a27);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a29);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a31);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a33);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a35);
  DgnString::~DgnString((DgnString *)&a37);
  DgnString::~DgnString((DgnString *)&a39);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v39 - 240);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v39 - 224);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v39 - 208);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v39 - 192);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v39 - 176);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v39 - 160);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v39 - 144);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v39 - 128);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v39 - 112);
  _Unwind_Resume(a1);
}

double RecogGrammar::newSequenceRecogGrammar(RecogGrammar *this)
{
  __int16 v1 = (__int16)this;
  uint64_t v2 = MemChunkAlloc(0x50uLL, 0);
  double result = 0.0;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_WORD *)v2 + 4) = v1;
  *((unsigned char *)v2 + 10) = 0;
  v2[8] = 0;
  v2[9] = 0;
  *uint64_t v2 = (uint64_t)&unk_26C4E2C50;
  return result;
}

void RecogGrammar::~RecogGrammar(RecogGrammar *this)
{
  *(void *)this = &unk_26C4DFB30;
  uint64_t v2 = (char *)this + 16;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v2);
}

{
  uint64_t vars8;

  RecogGrammar::~RecogGrammar(this);

  JUMPOUT(0x216698730);
}

uint64_t RecogGrammar::getNewState(RecogGrammar *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = StateMgr::newState(*(StateMgr **)(*(void *)(*(void *)(ModelMgr::smpModelMgr + 264) + 8 * *((unsigned __int16 *)this + 4))+ 56), 0, a3, a4, a5, a6, a7, a8);
  unsigned int v10 = *((_DWORD *)this + 6);
  if (v10 == *((_DWORD *)this + 7))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 16, 1, 1);
    unsigned int v10 = *((_DWORD *)this + 6);
  }
  *(_DWORD *)(*((void *)this + 2) + 4 * v10) = v9;
  ++*((_DWORD *)this + 6);
  return v9;
}

uint64_t RecogGrammar::hasInStateSet(RecogGrammar *this, const unsigned int *a2)
{
  return 0;
}

uint64_t RecogGrammar::finalize(uint64_t this)
{
  *(unsigned char *)(this + 10) = 1;
  return this;
}

uint64_t RecogGrammar::getStartStates(RecogGrammar *this)
{
  return (uint64_t)this + 32;
}

uint64_t RecogGrammar::setTransitionsTo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  if (*(_DWORD *)(a2 + 8))
  {
    int v10 = 0;
    unint64_t v11 = 0;
    do
    {
      uint64_t v12 = *(void *)(*(void *)a2 + 8 * v11);
      int v13 = *(_DWORD *)(v12 + 40);
      unsigned int v14 = v10 + v13;
      if (v14 > HIDWORD(v23))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v22, v14 - HIDWORD(v23), 1);
        int v13 = *(_DWORD *)(v12 + 40);
      }
      if (v13)
      {
        unint64_t v15 = 0;
        uint64_t v16 = *(void *)(v12 + 32);
        uint64_t v17 = v22;
        do
        {
          *(_DWORD *)(v17 + 4 * (v15 + v23)) = *(_DWORD *)(v16 + 4 * v15);
          ++v15;
          unint64_t v18 = *(unsigned int *)(v12 + 40);
        }
        while (v15 < v18);
      }
      else
      {
        LODWORD(v18) = 0;
      }
      int v10 = v23 + v18;
      LODWORD(v23) = v23 + v18;
      ++v11;
    }
    while (v11 < *(unsigned int *)(a2 + 8));
  }
  if (*(_DWORD *)(a1 + 56))
  {
    unint64_t v19 = 0;
    uint64_t v20 = ModelMgr::smpModelMgr;
    do
      StateMgr::addStateTransition(*(void *)(*(void *)(*(void *)(v20 + 264) + 8 * *(unsigned __int16 *)(a1 + 8)) + 56), *(_DWORD *)(*(void *)(a1 + 48) + 4 * v19++), &v22, 1, 0, 0, a7, a8);
    while (v19 < *(unsigned int *)(a1 + 56));
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v22);
}

void sub_213EA89A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void WordStatesRecogGrammar::WordStatesRecogGrammar(WordStatesRecogGrammar *this, __int16 a2)
{
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_WORD *)this + 4) = a2;
  *((unsigned char *)this + 10) = 0;
  *(void *)this = &unk_26C4E32F8;
  HashKEV<unsigned int,unsigned int,StateIdScope>::HashKEV((uint64_t)this + 64, 0, 16);
}

void sub_213EA8A20(_Unwind_Exception *a1)
{
  RecogGrammar::~RecogGrammar(v1);
  _Unwind_Resume(a1);
}

void WordStatesRecogGrammar::~WordStatesRecogGrammar(WordStatesRecogGrammar *this)
{
  *(void *)this = &unk_26C4E32F8;
  HashKEV<unsigned int,unsigned int,StateIdScope>::~HashKEV((uint64_t)this + 64);

  RecogGrammar::~RecogGrammar(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26C4E32F8;
  HashKEV<unsigned int,unsigned int,StateIdScope>::~HashKEV((uint64_t)this + 64);
  RecogGrammar::~RecogGrammar(this);

  JUMPOUT(0x216698730);
}

BOOL WordStatesRecogGrammar::hasInStateSet(WordStatesRecogGrammar *this, unsigned int *a2)
{
  return *HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket((uint64_t)this + 64, (int *)a2) != 0;
}

void ContainerRecogGrammar::~ContainerRecogGrammar(ContainerRecogGrammar *this)
{
  *(void *)this = &unk_26C4E2D88;
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 64);

  RecogGrammar::~RecogGrammar(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26C4E2D88;
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 64);
  RecogGrammar::~RecogGrammar(this);

  JUMPOUT(0x216698730);
}

unint64_t ContainerRecogGrammar::add(unint64_t this, RecogGrammar *a2)
{
  uint64_t v3 = this;
  unsigned int v4 = *(_DWORD *)(this + 72);
  if (v4 == *(_DWORD *)(this + 76))
  {
    this = DgnPrimArray<unsigned long long>::reallocElts(this + 64, 1, 1);
    unsigned int v4 = *(_DWORD *)(v3 + 72);
  }
  *(void *)(*(void *)(v3 + 64) + 8 * v4) = a2;
  *(_DWORD *)(v3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = v4 + 1;
  return this;
}

void SequenceRecogGrammar::~SequenceRecogGrammar(SequenceRecogGrammar *this)
{
  *(void *)this = &unk_26C4E2D88;
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 64);

  RecogGrammar::~RecogGrammar(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26C4E2D88;
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 64);
  RecogGrammar::~RecogGrammar(this);

  JUMPOUT(0x216698730);
}

uint64_t SequenceRecogGrammar::hasInStateSet(SequenceRecogGrammar *this, const unsigned int *a2)
{
  if (!*((_DWORD *)this + 18)) {
    return 0;
  }
  unint64_t v4 = 0;
  do
  {
    uint64_t v5 = *(void *)(*((void *)this + 8) + 8 * v4);
    uint64_t result = (*(uint64_t (**)(uint64_t, const unsigned int *))(*(void *)v5 + 32))(v5, a2);
    if (result) {
      break;
    }
    ++v4;
  }
  while (v4 < *((unsigned int *)this + 18));
  return result;
}

uint64_t SequenceRecogGrammar::finalize(uint64_t this)
{
  uint64_t v1 = this;
  if (!*(unsigned char *)(this + 10) && *(_DWORD *)(this + 72))
  {
    (*(void (**)(void))(***(void ***)(this + 64) + 24))(**(void **)(this + 64));
    DgnPrimArray<int>::copyArraySlice(v1 + 32, (uint64_t *)(**(void **)(v1 + 64) + 32), 0, *(_DWORD *)(**(void **)(v1 + 64) + 40));
    uint64_t v16 = 0;
    unint64_t v2 = realloc_array(0, &v16, 8uLL, 0, 0, 1);
    unint64_t v3 = 0;
    int v13 = v16;
    int v14 = 1;
    int v15 = v2 >> 3;
    while (1)
    {
      unint64_t v4 = (*(_DWORD *)(v1 + 72) - 1);
      uint64_t v5 = *(void *)(v1 + 64);
      if (v3 >= v4) {
        break;
      }
      *(void *)int v13 = *(void *)(v5 + 8 * v3 + 8);
      (*(void (**)(void))(**(void **)v13 + 24))();
      uint64_t v6 = *(void *)(*(void *)(v1 + 64) + 8 * v3++);
      RecogGrammar::setTransitionsTo(v6, (uint64_t)&v13, v7, v8, v9, v10, v11, v12);
    }
    DgnPrimArray<int>::copyArraySlice(v1 + 48, (uint64_t *)(*(void *)(v5 + 8 * v4) + 48), 0, *(_DWORD *)(*(void *)(v5 + 8 * v4) + 56));
    this = DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v13);
  }
  *(unsigned char *)(v1 + 10) = 1;
  return this;
}

void sub_213EA8EB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket(uint64_t a1, int *a2)
{
  int v2 = *a2;
  int v3 = *(_DWORD *)(a1 + 16);
  if (v3) {
    unsigned int v4 = (-1640531527 * *a2) >> -(char)v3;
  }
  else {
    unsigned int v4 = 0;
  }
  uint64_t result = (uint64_t **)(*(void *)(a1 + 80) + 8 * v4);
  uint64_t v6 = *result;
  if (*result)
  {
    do
    {
      uint64_t v7 = (uint64_t **)v6;
      if (*((_DWORD *)v6 + 2) == v2 && *((_DWORD *)v6 + 3) == v2) {
        break;
      }
      uint64_t v6 = (uint64_t *)*v6;
      uint64_t result = v7;
    }
    while (*v7);
  }
  return result;
}

uint64_t TLocaleInfo::composeCharacter(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if ((int)a3 < 768)
  {
LABEL_2:
    if (a3 == 3634 && a2 == 3661) {
      return 3635;
    }
    else {
      return 0;
    }
  }
  if (a3 >= 0x370)
  {
    if (a3 > 0xE30)
    {
      if (a3 > 0xE4E) {
        goto LABEL_2;
      }
      if (a3 > 0xE33)
      {
        if (a3 - 3655 >= 0xFFFFFFF4) {
          goto LABEL_2;
        }
      }
      else if (a3 != 3633)
      {
        goto LABEL_2;
      }
    }
    else
    {
      if (a3 == 1600) {
        return a2;
      }
      if (a3 < 0x64B) {
        goto LABEL_2;
      }
      if (a3 < 0x660 || (a3 & 0xFFFFFFFB) == 0x670) {
        return a2;
      }
      if (a3 != 2364 || *(void *)(a1 + 72) <= 3uLL) {
        goto LABEL_2;
      }
      if ((a2 - 2356) >= 0xFFFFFFE1) {
        return s_szTableNuktaComposition0915to0933[(a2 - 2325)];
      }
    }
    return 0;
  }
  if (a3 > 0x345) {
    return 0;
  }
  unsigned int v4 = (int *)*(&s_szTableCharacterComposition0300to0345 + a3 - 768);
  if (!v4) {
    return 0;
  }
  int v5 = *v4 - 1;
  if (*v4 < 1) {
    return 0;
  }
  if (*v4 == 1)
  {
    int v6 = 0;
LABEL_36:
    if (*(int *)((char *)v4 + ((4 * v6) | 4)) == a2) {
      return v4[v6 + 2];
    }
    return 0;
  }
  int v7 = 0;
  while (1)
  {
    uint64_t v8 = (v5 + v7) | 1;
    int v9 = v4[v8];
    if (v9 == a2) {
      return v4[v8 + 1];
    }
    int v10 = (v5 + v7) / 2;
    if (v9 >= (int)a2) {
      int v5 = v10 - 1;
    }
    else {
      int v7 = v10 + 1;
    }
    if (v7 >= v5)
    {
      int v6 = 2 * v7;
      goto LABEL_36;
    }
  }
}

uint64_t TLocaleInfo::splitDiacritic(uint64_t a1, unsigned int a2)
{
  if ((int)a2 <= 191)
  {
    if (a2 == 105 && *(unsigned char *)(a1 + 80)) {
      return 0x30700000131;
    }
    return a2;
  }
  if (a2 <= 0x233) {
    return s_szTableBaseCharacter00C0to0233[a2 - 192] | ((unint64_t)s_szTableDiacritic00C0to0233[a2 - 192] << 32);
  }
  unsigned int v3 = a2 - 902;
  if (a2 < 0x386) {
    return a2;
  }
  if (a2 <= 0x3D4)
  {
    unsigned int v4 = (unsigned int *)&s_szTableBaseCharacter0386to03D4;
    int v5 = (unsigned int *)&s_szTableDiacritic0386to03D4;
    return v4[v3] | ((unint64_t)v5[v3] << 32);
  }
  unsigned int v3 = a2 - 1024;
  if (a2 < 0x400) {
    return a2;
  }
  if (a2 <= 0x4F9)
  {
    unsigned int v4 = (unsigned int *)&s_szTableBaseCharacter0400to04F9;
    int v5 = (unsigned int *)&s_szTableDiacritic0400to04F9;
    return v4[v3] | ((unint64_t)v5[v3] << 32);
  }
  unsigned int v6 = a2 - 2345;
  if (a2 < 0x929) {
    return a2;
  }
  if (a2 > 0x95F)
  {
    unsigned int v3 = a2 - 7680;
    if (a2 - 7680 <= 0x1FC)
    {
      unsigned int v4 = (unsigned int *)&s_szTableBaseCharacter1E00to1FFC;
      int v5 = (unsigned int *)&s_szTableDiacritic1E00to1FFC;
      return v4[v3] | ((unint64_t)v5[v3] << 32);
    }
    return a2;
  }
  if (a2 < 0x958)
  {
    if (v6 <= 0xB && ((1 << v6) & 0x901) != 0)
    {
      uint64_t v7 = a2 - 1;
      return v7 | 0x93C00000000;
    }
    return a2;
  }
  uint64_t v7 = s_szTableNuktaBaseCharacter0958to095F[a2 - 2392];
  return v7 | 0x93C00000000;
}

unint64_t TLocaleInfo::decomposeCharacter(uint64_t a1, int a2, uint64_t *a3)
{
  unsigned int v4 = a2;
  unint64_t v6 = a3[2];
  int v16 = a2;
  TBuffer<wchar_t>::insert((uint64_t)a3, v6, &v16, 1uLL);
  unint64_t result = TLocaleInfo::splitDiacritic(a1, v4);
  if (v4)
  {
    unint64_t v8 = HIDWORD(result);
    if (HIDWORD(result))
    {
      if (HIDWORD(result) != v4)
      {
        LODWORD(v9) = 0;
        do
        {
          unsigned int v10 = v4;
          unsigned int v4 = result;
          int v17 = v8;
          TBuffer<wchar_t>::insert((uint64_t)a3, a3[2], &v17, 1uLL);
          unint64_t result = TLocaleInfo::splitDiacritic(a1, v4);
          unint64_t v9 = (v9 + 1);
          if (v10 == v4) {
            break;
          }
          unint64_t v8 = HIDWORD(result);
          if (!HIDWORD(result)) {
            break;
          }
        }
        while (v4 != HIDWORD(result));
        if (v9)
        {
          uint64_t v11 = *a3;
          if (v9 != 1)
          {
            unint64_t v12 = v9 >> 1;
            int v13 = (int *)(v11 + 4 * v6 + 4);
            int v14 = (int *)(v11 + 4 * (v6 + v9));
            do
            {
              int v15 = *v13;
              *v13++ = *v14;
              *v14-- = v15;
              --v12;
            }
            while (v12);
          }
          *(_DWORD *)(v11 + 4 * v6) = v4;
        }
      }
    }
  }
  return result;
}

uint64_t TLocaleInfo::removeDiacritics(uint64_t a1, uint64_t a2)
{
  do
  {
    uint64_t v3 = a2;
    a2 = TLocaleInfo::splitDiacritic(a1, a2);
  }
  while (v3 != a2);
  return v3;
}

uint64_t TLocaleInfo::katakanaToHiragana(uint64_t a1, int *a2, uint64_t a3)
{
  int v3 = *a2;
  if (*a2)
  {
    int v5 = a2 + 1;
    do
    {
      if ((v3 - 12449) < 0x56) {
        v3 -= 96;
      }
      int v8 = v3;
      uint64_t result = TBuffer<wchar_t>::insert(a3, *(void *)(a3 + 16), &v8, 1uLL);
      int v7 = *v5++;
      int v3 = v7;
    }
    while (v7);
  }
  return result;
}

void TLocaleInfo::katakanaToRomaji(uint64_t a1, int *a2, void *a3)
{
  unsigned int v4 = a2;
  int v5 = *a2;
  if (*a2 == 12540)
  {
    do
    {
      int v27 = 45;
      TBuffer<wchar_t>::insert((uint64_t)a3, a3[2], &v27, 1uLL);
      int v6 = v4[1];
      ++v4;
      int v5 = v6;
    }
    while (v6 == 12540);
  }
  for (; v5; unsigned int v4 = v11 + 1)
  {
    if ((v5 - 12535) > 0xFFFFFFA9)
    {
      unint64_t v12 = (int *)*(&s_szTableKatakanaToRomaji + (v5 - 12449));
      uint64_t v11 = v4 + 1;
      int v13 = v4[1];
      if (v13 == 12540)
      {
        uint64_t v14 = 0;
        while (v12[v14++])
          ;
        TBuffer<wchar_t>::insert((uint64_t)a3, a3[2], (int *)*(&s_szTableKatakanaToRomaji + (v5 - 12449)), v14 - 1);
        unint64_t v16 = a3[2];
        int v17 = *(_DWORD *)(*a3 + 4 * v16 - 4);
        int v27 = v17;
        TBuffer<wchar_t>::insert((uint64_t)a3, v16, &v27, 1uLL);
        if (v4[2] != 12540) {
          goto LABEL_31;
        }
        unint64_t v18 = v4 + 3;
        do
        {
          int v27 = v17;
          TBuffer<wchar_t>::insert((uint64_t)a3, a3[2], &v27, 1uLL);
          int v19 = *v18++;
        }
        while (v19 == 12540);
        goto LABEL_30;
      }
      if ((v5 - 12461) <= 0x3D && ((1 << (v5 + 83)) & 0x200400E040100C03) != 0)
      {
        if ((v13 - 12515) <= 4 && ((1 << (v13 + 29)) & 0x15) != 0)
        {
          size_t v20 = wcslen((const __int32 *)*(&s_szTableKatakanaToRomaji + (v5 - 12449)));
          TBuffer<wchar_t>::insert((uint64_t)a3, a3[2], v12, v20 - 1);
          if (v5 != 12472 && v20 == 2)
          {
            int v27 = 121;
            TBuffer<wchar_t>::insert((uint64_t)a3, a3[2], &v27, 1uLL);
          }
          if (v13 == 12517) {
            int v21 = 117;
          }
          else {
            int v21 = 111;
          }
          if (v13 == 12515) {
            int v22 = 97;
          }
          else {
            int v22 = v21;
          }
          int v27 = v22;
          TBuffer<wchar_t>::insert((uint64_t)a3, a3[2], &v27, 1uLL);
          if (v4[2] != 12540) {
            goto LABEL_31;
          }
          unint64_t v18 = v4 + 3;
          do
          {
            int v27 = v22;
            TBuffer<wchar_t>::insert((uint64_t)a3, a3[2], &v27, 1uLL);
            int v23 = *v18++;
          }
          while (v23 == 12540);
LABEL_30:
          uint64_t v11 = v18 - 2;
          goto LABEL_31;
        }
        uint64_t v24 = 0;
        unint64_t v7 = a3[2];
        while (v12[v24++])
          ;
      }
      else
      {
        uint64_t v24 = 0;
        unint64_t v7 = a3[2];
        while (v12[v24++])
          ;
      }
      unint64_t v10 = v24 - 1;
      uint64_t v9 = (uint64_t)a3;
      int v8 = (int *)*(&s_szTableKatakanaToRomaji + (v5 - 12449));
    }
    else
    {
      int v27 = v5;
      unint64_t v7 = a3[2];
      int v8 = &v27;
      uint64_t v9 = (uint64_t)a3;
      unint64_t v10 = 1;
    }
    TBuffer<wchar_t>::insert(v9, v7, v8, v10);
    uint64_t v11 = v4;
LABEL_31:
    int v5 = v11[1];
  }
}

uint64_t TLocaleInfo::isKtivMenukad(uint64_t a1, unsigned int *a2)
{
  while (1)
  {
    unsigned int v2 = *a2;
    if ((int)*a2 <= 8202)
    {
      if (v2 == 32 || v2 == 160) {
        goto LABEL_21;
      }
      if (!v2) {
        return 0;
      }
    }
    else
    {
      if (v2 == 8203) {
        goto LABEL_21;
      }
      if (v2 == 12288 || v2 == 65279) {
        goto LABEL_21;
      }
    }
    if ((int)v2 < 1425) {
      return 0;
    }
    if (v2 < 0x5F5) {
      break;
    }
    if (v2 - 64285 >= 0x33) {
      return 0;
    }
    uint64_t result = 1;
    if (v2 >> 5 < 0x7D9 || v2 - 64298 < 0x25) {
      return result;
    }
LABEL_21:
    ++a2;
  }
  if (v2 >= 0x5AF)
  {
    if (v2 <= 0x5C7)
    {
      uint64_t result = 1;
      unsigned int v5 = v2 - 1470;
      if (v5 > 8 || ((1 << v5) & 0x125) == 0) {
        return result;
      }
    }
    goto LABEL_21;
  }
  return 1;
}

uint64_t TLocaleInfo::ktivMenukadToKtivMaleh(uint64_t a1, int *a2, void *a3)
{
  unint64_t v5 = a3[2];
  char v6 = 1;
  while (1)
  {
    int v7 = *a2;
    if (*a2 <= 8202)
    {
      if (v7 == 32 || v7 == 160) {
        goto LABEL_11;
      }
      if (!v7) {
        goto LABEL_78;
      }
    }
    else
    {
      BOOL v8 = v7 == 8203 || v7 == 65279;
      if (v8 || v7 == 12288)
      {
LABEL_11:
        int v19 = *a2;
        char v6 = 1;
        TBuffer<wchar_t>::insert((uint64_t)a3, a3[2], &v19, 1uLL);
        goto LABEL_12;
      }
    }
    if (v7 < 1425) {
      goto LABEL_78;
    }
    if (v7 >= 0x5F5) {
      break;
    }
    if (v7 >= 0x5AF)
    {
      if (v7 > 0x5C7) {
        goto LABEL_23;
      }
      if ((v7 & 0xFFFFFFFE) == 0x5BA)
      {
        unint64_t v9 = a3[2];
        if (v9 <= v5 || *(_DWORD *)(*a3 + 4 * v9 - 4) == 1493) {
          goto LABEL_73;
        }
LABEL_49:
        int v19 = 1493;
LABEL_72:
        TBuffer<wchar_t>::insert((uint64_t)a3, v9, &v19, 1uLL);
        goto LABEL_73;
      }
      char v6 = 0;
      if ((v7 - 1460) > 0x12) {
        goto LABEL_12;
      }
      if (((1 << (v7 + 76)) & 0x49400) != 0) {
        goto LABEL_52;
      }
      if (v7 != 1460) {
        goto LABEL_12;
      }
      unint64_t v9 = a3[2];
      if (v9 > v5 && *(_DWORD *)(*a3 + 4 * v9 - 4) != 1497)
      {
        int v15 = a2[1];
        if (!v15 || v15 != 1456 && a2[2] != 1456) {
          goto LABEL_44;
        }
      }
    }
LABEL_73:
    char v6 = 0;
LABEL_12:
    ++a2;
  }
  if ((v7 - 64285) < 0x33)
  {
LABEL_23:
    if (v7 > 64284)
    {
      if (v7 <= 64286)
      {
        if (v7 != 64285) {
          goto LABEL_73;
        }
        goto LABEL_42;
      }
      if (v7 == 64287) {
        goto LABEL_45;
      }
      if (v7 == 64313)
      {
LABEL_42:
        unint64_t v9 = a3[2];
        if (!(v6 & 1 | (v9 <= v5)))
        {
          __int32 v10 = *(_DWORD *)(*a3 + 4 * v9 - 4);
          v11.i32[0] = v10 & 0xFFFFFFFB;
          v11.i32[1] = v10;
          v11.i32[2] = v10;
          v11.i32[3] = v10 & 0xFFFFFFFD;
          unsigned int v12 = a2[1];
          int32x4_t v13 = vdupq_n_s32(v12);
          if ((vmaxvq_u8((uint8x16_t)vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v11, (int32x4_t)xmmword_21409BEE0), (int16x8_t)vceqq_s32(v13, (int32x4_t)xmmword_21409BED0)), (int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v13, (int32x4_t)xmmword_21409BEF0), (int16x8_t)vceqq_s32(v13, (int32x4_t)xmmword_21409BF00)))) & 1) == 0&& v12 != 64309&& v12 != 64313)
          {
            int v19 = 1497;
            TBuffer<wchar_t>::insert((uint64_t)a3, v9, &v19, 1uLL);
            unint64_t v9 = a3[2];
          }
        }
LABEL_44:
        int v19 = 1497;
        goto LABEL_72;
      }
      if (v7 != 64309) {
        goto LABEL_39;
      }
    }
    else
    {
      if (v7 > 1519)
      {
        if (v7 == 1520)
        {
LABEL_69:
          int v14 = 1493;
          int v19 = 1493;
          TBuffer<wchar_t>::insert((uint64_t)a3, a3[2], &v19, 1uLL);
          goto LABEL_70;
        }
        if (v7 == 1521)
        {
          int v19 = 1493;
          TBuffer<wchar_t>::insert((uint64_t)a3, a3[2], &v19, 1uLL);
          int v19 = 1497;
LABEL_71:
          unint64_t v9 = a3[2];
          goto LABEL_72;
        }
        if (v7 != 1522)
        {
LABEL_39:
          if (v7 >= 0xFB2A)
          {
            if (v7 > 0xFB2D)
            {
              if (v7 > 0xFB30)
              {
                if (v7 > 0xFB4A)
                {
                  switch(v7)
                  {
                    case 64331:
                      goto LABEL_69;
                    case 64332:
                      int v7 = 1489;
                      goto LABEL_52;
                    case 64333:
                      int v7 = 1499;
                      goto LABEL_52;
                    case 64334:
                      int v7 = 1492;
                      goto LABEL_52;
                    case 64335:
                      int v19 = 1488;
                      TBuffer<wchar_t>::insert((uint64_t)a3, a3[2], &v19, 1uLL);
                      int v7 = 1500;
                      goto LABEL_52;
                    default:
                      goto LABEL_52;
                  }
                }
                v7 -= 62816;
              }
              else
              {
                int v7 = 1488;
              }
            }
            else
            {
              int v7 = 1513;
            }
          }
LABEL_52:
          int v19 = v7;
          goto LABEL_71;
        }
LABEL_45:
        int v14 = 1497;
        int v19 = 1497;
        TBuffer<wchar_t>::insert((uint64_t)a3, a3[2], &v19, 1uLL);
LABEL_70:
        int v19 = v14;
        goto LABEL_71;
      }
      if (v7 != 1493)
      {
        if (v7 != 1497) {
          goto LABEL_39;
        }
        goto LABEL_42;
      }
    }
    unint64_t v9 = a3[2];
    if (!(v6 & 1 | (v9 <= v5)) && *(_DWORD *)(*a3 + 4 * v9 - 4) != 1493)
    {
      int v19 = 1493;
      TBuffer<wchar_t>::insert((uint64_t)a3, v9, &v19, 1uLL);
      unint64_t v9 = a3[2];
    }
    goto LABEL_49;
  }
LABEL_78:
  uint64_t v16 = 0;
  while (a2[v16++])
    ;
  return TBuffer<wchar_t>::insert((uint64_t)a3, a3[2], a2, v16 - 1);
}

uint64_t TLocaleInfo::getDigitExtended(uint64_t a1, unsigned int a2)
{
  if ((int)a2 >= 65296)
  {
    unsigned int v2 = a2 - 65296;
    BOOL v3 = a2 >= 0xFF1A;
    goto LABEL_3;
  }
  uint64_t result = a2 - 1632;
  if ((int)a2 < 1632) {
    return 0xFFFFFFFFLL;
  }
  if (a2 <= 0x669) {
    return result;
  }
  uint64_t result = a2 - 1776;
  if (a2 < 0x6F0) {
    return 0xFFFFFFFFLL;
  }
  if (a2 <= 0x6F9) {
    return result;
  }
  uint64_t result = a2 - 1984;
  if (a2 < 0x7C0) {
    return 0xFFFFFFFFLL;
  }
  if (a2 <= 0x7C9) {
    return result;
  }
  uint64_t result = a2 - 2406;
  if (a2 < 0x966) {
    return 0xFFFFFFFFLL;
  }
  if (a2 <= 0x96F) {
    return result;
  }
  uint64_t result = a2 - 2534;
  if (a2 < 0x9E6) {
    return 0xFFFFFFFFLL;
  }
  if (a2 <= 0x9EF) {
    return result;
  }
  uint64_t result = a2 - 2662;
  if (a2 < 0xA66) {
    return 0xFFFFFFFFLL;
  }
  if (a2 <= 0xA6F) {
    return result;
  }
  uint64_t result = a2 - 2790;
  if (a2 < 0xAE6) {
    return 0xFFFFFFFFLL;
  }
  if (a2 <= 0xAEF) {
    return result;
  }
  uint64_t result = a2 - 2918;
  if (a2 < 0xB66) {
    return 0xFFFFFFFFLL;
  }
  if (a2 <= 0xB6F) {
    return result;
  }
  uint64_t result = a2 - 3046;
  if (a2 < 0xBE6) {
    return 0xFFFFFFFFLL;
  }
  if (a2 <= 0xBEF) {
    return result;
  }
  uint64_t result = a2 - 3174;
  if (a2 < 0xC66) {
    return 0xFFFFFFFFLL;
  }
  if (a2 <= 0xC6F) {
    return result;
  }
  uint64_t result = a2 - 3302;
  if (a2 < 0xCE6) {
    return 0xFFFFFFFFLL;
  }
  if (a2 <= 0xCEF) {
    return result;
  }
  uint64_t result = a2 - 3430;
  if (a2 < 0xD66) {
    return 0xFFFFFFFFLL;
  }
  if (a2 <= 0xD6F) {
    return result;
  }
  uint64_t result = a2 - 3664;
  if (a2 < 0xE50) {
    return 0xFFFFFFFFLL;
  }
  if (a2 <= 0xE59) {
    return result;
  }
  uint64_t result = a2 - 3792;
  if (a2 < 0xED0) {
    return 0xFFFFFFFFLL;
  }
  if (a2 <= 0xED9) {
    return result;
  }
  uint64_t result = a2 - 3872;
  if (a2 < 0xF20) {
    return 0xFFFFFFFFLL;
  }
  if (a2 <= 0xF29) {
    return result;
  }
  if (a2 >> 6 < 0x41) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v5 = a2 >> 1;
  if (a2 >> 1 <= 0x824)
  {
    int v6 = -4160;
    return a2 + v6;
  }
  unsigned int v7 = a2 >> 4;
  if (a2 >> 4 < 0x109) {
    return 0xFFFFFFFFLL;
  }
  if (v5 <= 0x84C)
  {
    int v6 = -4240;
    return a2 + v6;
  }
  if (a2 < 0x1369) {
    return 0xFFFFFFFFLL;
  }
  if (v5 <= 0x9B8)
  {
    int v6 = -4968;
    return a2 + v6;
  }
  if (a2 >> 5 < 0xBF) {
    return 0xFFFFFFFFLL;
  }
  if (v5 <= 0xBF4)
  {
    int v6 = -6112;
    return a2 + v6;
  }
  if (v7 < 0x181) {
    return 0xFFFFFFFFLL;
  }
  if (v5 <= 0xC0C)
  {
    int v6 = -6160;
    return a2 + v6;
  }
  if (v5 < 0xCA3) {
    return 0xFFFFFFFFLL;
  }
  if (v7 <= 0x194)
  {
    int v6 = -6470;
    return a2 + v6;
  }
  if (v7 < 0x19D) {
    return 0xFFFFFFFFLL;
  }
  if (v5 <= 0xCEC)
  {
    int v6 = -6608;
    return a2 + v6;
  }
  if (a2 == 6618) {
    return 1;
  }
  if (a2 >> 7 < 0x35) {
    return 0xFFFFFFFFLL;
  }
  if (v5 <= 0xD44)
  {
    int v6 = -6784;
    return a2 + v6;
  }
  if (v7 < 0x1A9) {
    return 0xFFFFFFFFLL;
  }
  if (v5 <= 0xD4C)
  {
    int v6 = -6800;
    return a2 + v6;
  }
  if (v7 < 0x1B5) {
    return 0xFFFFFFFFLL;
  }
  if (v5 <= 0xDAC)
  {
    int v6 = -6992;
    return a2 + v6;
  }
  if (v7 < 0x1BB) {
    return 0xFFFFFFFFLL;
  }
  if (v5 <= 0xDDC)
  {
    int v6 = -7088;
    return a2 + v6;
  }
  if (a2 >> 6 < 0x71) {
    return 0xFFFFFFFFLL;
  }
  if (v5 <= 0xE24)
  {
    int v6 = -7232;
    return a2 + v6;
  }
  if (v7 < 0x1C5) {
    return 0xFFFFFFFFLL;
  }
  if (v5 <= 0xE2C)
  {
    int v6 = -7248;
    return a2 + v6;
  }
  if (a2 >> 5 < 0x531) {
    return 0xFFFFFFFFLL;
  }
  if (a2 <= 0xA629)
  {
    int v6 = -42528;
    return a2 + v6;
  }
  if (v7 < 0xA8D) {
    return 0xFFFFFFFFLL;
  }
  if (a2 <= 0xA8D9)
  {
    int v6 = -43216;
    return a2 + v6;
  }
  if (a2 >> 8 < 0xA9) {
    return 0xFFFFFFFFLL;
  }
  if (a2 <= 0xA909)
  {
    int v6 = -43264;
    return a2 + v6;
  }
  if (v7 < 0xA9D) {
    return 0xFFFFFFFFLL;
  }
  if (a2 <= 0xA9D9)
  {
    int v6 = -43472;
    return a2 + v6;
  }
  if (v7 < 0xAA5) {
    return 0xFFFFFFFFLL;
  }
  if (a2 <= 0xAA59)
  {
    int v6 = -43600;
    return a2 + v6;
  }
  unsigned int v2 = a2 - 44016;
  BOOL v3 = a2 - 44016 >= 0xA;
LABEL_3:
  if (v3) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v2;
  }
}

uint64_t TLocaleInfo::stringToUInt(uint64_t DigitExtended, unsigned int *a2, unsigned int **a3)
{
  unsigned int v4 = a2;
  for (unsigned int i = a2 + 1; ; ++i)
  {
    signed int v6 = *(i - 1);
    if (v6 > 159) {
      break;
    }
    if (v6 > 0x20 || ((1 << v6) & 0x100002600) == 0) {
      goto LABEL_18;
    }
LABEL_17:
    ;
  }
  if (v6 >= 12288)
  {
    if (v6 != 65279 && v6 != 12288) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (v6 == 160 || v6 == 8203) {
    goto LABEL_17;
  }
LABEL_18:
  uint64_t v9 = (v6 - 48);
  if (v6 < 48
    || v6 > 0x39
    && (v6 < 0x660
     || (unsigned int DigitExtended = TLocaleInfo::getDigitExtended(DigitExtended, v6),
         uint64_t v9 = DigitExtended,
         DigitExtended == -1)))
  {
    uint64_t v9 = 0;
  }
  else
  {
    unsigned int v10 = *i;
    if ((int)*i >= 48)
    {
      unsigned int v4 = i;
      while (1)
      {
        if (v10 > 0x39)
        {
          if (v10 < 0x660) {
            goto LABEL_31;
          }
          unsigned int DigitExtended = TLocaleInfo::getDigitExtended(DigitExtended, v10);
          if (DigitExtended == -1) {
            goto LABEL_31;
          }
        }
        else
        {
          unsigned int DigitExtended = v10 - 48;
        }
        uint64_t v9 = (DigitExtended + 10 * v9);
        int v11 = v4[1];
        ++v4;
        unsigned int v10 = v11;
        if (v11 <= 47) {
          goto LABEL_31;
        }
      }
    }
    unsigned int v4 = i;
  }
LABEL_31:
  *a3 = v4;
  return v9;
}

uint64_t TLocaleInfo::stringToUInt(uint64_t a1, unsigned int *a2, BOOL *a3)
{
  unsigned int v10 = 0;
  LODWORD(result) = TLocaleInfo::stringToInt(a1, a2, &v10);
  signed int v6 = v10;
  if (v10 == a2)
  {
    uint64_t result = 0;
    *a3 = 1;
    return result;
  }
  while (1)
  {
    int v7 = *v6;
    if ((int)*v6 > 159) {
      break;
    }
    if (v7 > 0x20 || ((1 << v7) & 0x100002600) == 0) {
      goto LABEL_18;
    }
LABEL_17:
    ++v6;
  }
  if (v7 >= 12288)
  {
    if (v7 != 65279 && v7 != 12288) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (v7 == 160 || v7 == 8203) {
    goto LABEL_17;
  }
LABEL_18:
  *a3 = v7 != 0;
  if (v7) {
    return 0;
  }
  else {
    return result;
  }
}

uint64_t TLocaleInfo::stringToInt(uint64_t DigitExtended, unsigned int *a2, unsigned int **a3)
{
  for (unsigned int i = a2 + 1; ; ++i)
  {
    int v6 = *(i - 1);
    if (v6 <= 159) {
      break;
    }
    if (v6 >= 12288)
    {
      if (v6 != 65279 && v6 != 12288) {
        goto LABEL_17;
      }
    }
    else if (v6 != 160 && v6 != 8203)
    {
      goto LABEL_17;
    }
LABEL_14:
    ;
  }
  if (v6 > 0x2D) {
    goto LABEL_17;
  }
  if (((1 << v6) & 0x100002600) != 0) {
    goto LABEL_14;
  }
  if (((1 << v6) & 0x280000000000) != 0)
  {
    unsigned int v8 = *i;
    goto LABEL_18;
  }
LABEL_17:
  --i;
  unsigned int v8 = v6;
  int v6 = 0;
LABEL_18:
  unsigned int v9 = v8 - 48;
  if ((int)v8 < 48
    || v8 > 0x39
    && (v8 < 0x660
     || (unsigned int DigitExtended = TLocaleInfo::getDigitExtended(DigitExtended, v8),
         unsigned int v9 = DigitExtended,
         DigitExtended == -1)))
  {
    uint64_t result = 0;
    *a3 = a2;
  }
  else
  {
    int v12 = i[1];
    int v11 = i + 1;
    unsigned int v10 = v12;
    if (v12 >= 48)
    {
      do
      {
        if (v10 > 0x39)
        {
          if (v10 < 0x660) {
            break;
          }
          unsigned int DigitExtended = TLocaleInfo::getDigitExtended(DigitExtended, v10);
          if (DigitExtended == -1) {
            break;
          }
        }
        else
        {
          unsigned int DigitExtended = v10 - 48;
        }
        unsigned int v9 = DigitExtended + 10 * v9;
        int v13 = v11[1];
        ++v11;
        unsigned int v10 = v13;
      }
      while (v13 > 47);
    }
    *a3 = v11;
    if (v6 == 45) {
      return -v9;
    }
    else {
      return v9;
    }
  }
  return result;
}

BOOL TLocaleInfo::stringToBool(uint64_t DigitExtended, uint64_t a2, void *a3)
{
  for (unsigned int i = (unsigned int *)(a2 + 4); ; ++i)
  {
    signed int v6 = *(i - 1);
    if (v6 > 159) {
      break;
    }
    if (v6 > 0x20 || ((1 << v6) & 0x100002600) == 0) {
      goto LABEL_18;
    }
LABEL_17:
    ;
  }
  if (v6 >= 12288)
  {
    if (v6 != 65279 && v6 != 12288) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (v6 == 160 || v6 == 8203) {
    goto LABEL_17;
  }
LABEL_18:
  *a3 = i - 1;
  unsigned int v9 = v6 - 48;
  if (v6 < 48
    || v6 > 0x39
    && (v6 < 0x660
     || (unsigned int DigitExtended = TLocaleInfo::getDigitExtended(DigitExtended, v6),
         unsigned int v9 = DigitExtended,
         DigitExtended == -1)))
  {
    uint64_t v12 = wcsncasecmp((const __int32 *)i - 1, dword_21409E5BC, 4uLL);
    uint64_t v13 = *a3;
    if v12 || (TLocaleInfo::isAlpha(v12, *(_DWORD *)(v13 + 16)))
    {
      uint64_t v14 = wcsncasecmp((const __int32 *)v13, dword_21409E5D0, 5uLL);
      if (v14) {
        goto LABEL_32;
      }
      int v15 = (signed int *)(*a3 + 20);
      if (TLocaleInfo::isAlpha(v14, *v15)) {
        goto LABEL_32;
      }
      BOOL result = 0;
      *a3 = v15;
    }
    else
    {
      *a3 = v13 + 16;
      return 1;
    }
  }
  else
  {
    if (v9 <= 1)
    {
      unsigned int v10 = *i;
      if ((int)*i < 48
        || v10 >= 0x3A && (v10 < 0x660 || TLocaleInfo::getDigitExtended(DigitExtended, v10) == -1))
      {
        *a3 = i;
        return v9 != 0;
      }
    }
LABEL_32:
    BOOL result = 0;
    *a3 = a2;
  }
  return result;
}

uint64_t TLocaleInfo::isAlpha(uint64_t a1, signed int a2)
{
  uint64_t result = 0;
  if (BYTE1(a2) <= 0x1Du)
  {
    switch(BYTE1(a2))
    {
      case 0:
        BOOL v11 = (a2 & 0xFFFFFFC0) == 0xC0 && (a2 & 0xFFFFFFDF) != 215;
        return (a2 & 0xFFFFFFDF) - 65 < 0x1A || v11;
      case 1:
        uint64_t v3 = a2 - 256;
        if (s_szTableLowercase0100to024F[v3] != a2) {
          return 1;
        }
        unsigned int v4 = s_szTableUppercase0100to0292;
        return v4[v3] != a2;
      case 2:
        if (a2 > 658) {
          return 0;
        }
        uint64_t v3 = a2 - 256;
        if (s_szTableUppercase0100to0292[v3] != a2) {
          return 1;
        }
        if (a2 > 591) {
          return 0;
        }
        unsigned int v4 = s_szTableLowercase0100to024F;
        break;
      case 3:
        uint64_t v3 = (a2 - 880);
        if (a2 < 880) {
          return 0;
        }
        if (s_szTableLowercase0370to03FF[v3] != a2) {
          return 1;
        }
        unsigned int v4 = &s_szTableUppercase0370to03FF;
        return v4[v3] != a2;
      case 4:
      case 5:
        uint64_t result = 1;
        if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)xmmword_21409BF40, (uint32x4_t)vaddq_s32(vdupq_n_s32(a2), (int32x4_t)xmmword_21409BF30)))) & 1) == 0)
        {
          BOOL v5 = (a2 - 1329) < 0x26 || (a2 - 1377) < 0x26;
          if (a2 == 1231) {
            BOOL v5 = 1;
          }
          unsigned int v6 = a2 == 1216 || v5;
          if ((a2 - 1024) >= 0x60) {
            return v6;
          }
          else {
            return 1;
          }
        }
        return result;
      case 0x10:
        return (a2 - 4256) < 0x26;
      default:
        return result;
    }
    return v4[v3] != a2;
  }
  if (BYTE1(a2) > 0x2Cu)
  {
    if (BYTE1(a2) <= 0xA6u)
    {
      BOOL v7 = (a2 - 42560) < 0x2E || (a2 - 42624) < 0x18;
      if (BYTE1(a2) != 166) {
        BOOL v7 = 0;
      }
      if (BYTE1(a2) == 45) {
        return a2 < 11558;
      }
      else {
        return v7;
      }
    }
    if (BYTE1(a2) != 167)
    {
      BOOL v9 = (a2 - 65313) < 0x1A || (a2 - 65345) < 0x1A;
      return BYTE1(a2) == 255 && v9;
    }
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)xmmword_21409BF20, (uint32x4_t)vaddq_s32(vdupq_n_s32(a2), (int32x4_t)xmmword_21409BF10)))) & 1) == 0)
    {
      if ((a2 - 42877) >= 0x10) {
        return 0;
      }
      else {
        return (0xC001u >> (a2 - 125)) & 1;
      }
    }
    return 1;
  }
  if (BYTE1(a2) > 0x20u)
  {
    if (BYTE1(a2) == 33)
    {
      uint64_t result = 1;
      if ((a2 - 8526) > 0x36 || ((1 << (a2 - 78)) & 0x60000000000001) == 0) {
        return a2 == 8498;
      }
      return result;
    }
    if (BYTE1(a2) != 44) {
      return result;
    }
    if (a2 >> 5 != 355)
    {
      BOOL v15 = a2 != 11311 && (a2 - 11264) < 0x5F;
      unsigned int v16 = (a2 - 11499) < 4 || v15;
      if ((a2 - 11392) >= 0xF) {
        return v16;
      }
      else {
        return 1;
      }
    }
    uint64_t v3 = (a2 - 11360);
    if (s_szTableLowercase2C60to2C7F[v3] == a2)
    {
      unsigned int v4 = &s_szTableUppercase2C60to2C76;
      return v4[v3] != a2;
    }
    return 1;
  }
  if (BYTE1(a2) == 30)
  {
    BOOL v13 = a2 == 7838 || a2 == 7835;
    return (a2 - 7840) < 0xFFFFFFF6 || v13;
  }
  else if (BYTE1(a2) == 31)
  {
    if (a2 > 8188) {
      return 0;
    }
    uint64_t v3 = a2 - 7936;
    if (s_szTableLowercase1F00to1FFC[v3] == a2)
    {
      if (a2 <= 8179)
      {
        unsigned int v4 = &s_szTableUppercase1F00to1FF3;
        return v4[v3] != a2;
      }
      return 0;
    }
    return 1;
  }
  return result;
}

uint64_t TLocaleInfo::stringToBool(uint64_t a1, uint64_t a2, BOOL *a3)
{
  unsigned int v10 = 0;
  LODWORD(result) = TLocaleInfo::stringToBool(a1, a2, &v10);
  unsigned int v6 = v10;
  if (v10 == (int *)a2)
  {
    uint64_t result = 0;
    *a3 = 1;
    return result;
  }
  while (1)
  {
    int v7 = *v6;
    if (*v6 > 159) {
      break;
    }
    if (v7 > 0x20 || ((1 << v7) & 0x100002600) == 0) {
      goto LABEL_18;
    }
LABEL_17:
    ++v6;
  }
  if (v7 >= 12288)
  {
    if (v7 != 65279 && v7 != 12288) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (v7 == 160 || v7 == 8203) {
    goto LABEL_17;
  }
LABEL_18:
  *a3 = v7 != 0;
  if (v7) {
    return 0;
  }
  else {
    return result;
  }
}

uint64_t TLocaleInfo::toNarrow(uint64_t a1, uint64_t a2)
{
  if (a2 == 12288) {
    return 32;
  }
  uint64_t result = a2;
  if ((int)a2 >= 65281)
  {
    if (a2 > 0xFF5E)
    {
      switch((int)a2)
      {
        case 65504:
          uint64_t result = 162;
          break;
        case 65505:
          uint64_t result = 163;
          break;
        case 65506:
          uint64_t result = 172;
          break;
        case 65507:
          uint64_t result = 175;
          break;
        case 65508:
          uint64_t result = 166;
          break;
        case 65509:
          uint64_t result = 165;
          break;
        case 65510:
          uint64_t result = 8361;
          break;
        default:
          if (a2 == 65376) {
            unsigned int v3 = 10630;
          }
          else {
            unsigned int v3 = a2;
          }
          if (a2 == 65375) {
            uint64_t result = 10629;
          }
          else {
            uint64_t result = v3;
          }
          break;
      }
    }
    else
    {
      return (a2 - 65248);
    }
  }
  return result;
}

uint64_t TLocaleInfo::normalizeWidth(uint64_t a1, uint64_t a2)
{
  if ((a2 - 65377) > 0x7B) {
    return TLocaleInfo::toNarrow(a1, a2);
  }
  else {
    return s_szTableNormalizeWidthFF61toFFDC[(a2 - 65377)];
  }
}

uint64_t TLocaleInfo::toWide(uint64_t a1, uint64_t a2)
{
  uint64_t result = a2;
  if ((a2 - 33) <= 0x5D) {
    return (a2 + 65248);
  }
  if ((int)a2 > 10628)
  {
    if (a2 == 10630) {
      return 65376;
    }
    if (a2 == 10629) {
      return 65375;
    }
  }
  else
  {
    if (a2 == 32) {
      return 12288;
    }
    if (a2 == 8361) {
      return 65510;
    }
  }
  if (a2 - 176) >= 0xFFFFFFF2 && (a2 - 162) <= 0xD && ((0x241Bu >> (a2 + 94))) {
    return dword_2140A1CD8[(int)a2 - 162];
  }
  return result;
}

uint64_t TLocaleInfo::isUpper(uint64_t a1, int a2)
{
  uint64_t result = 0;
  if (BYTE1(a2) <= 0x1Du)
  {
    switch(BYTE1(a2))
    {
      case 0:
        BOOL v9 = a2 != 215 && (a2 - 192) < 0x1F;
        return (a2 - 65) < 0x1A || v9;
      case 1:
        goto LABEL_43;
      case 2:
        if (a2 > 591) {
          return 0;
        }
LABEL_43:
        int v10 = s_szTableLowercase0100to024F[a2 - 256];
        return v10 != a2;
      case 3:
        int v11 = a2 - 880;
        if (a2 < 880) {
          return 0;
        }
        uint64_t v12 = s_szTableLowercase0370to03FF;
        goto LABEL_49;
      case 4:
      case 5:
        if ((a2 - 1120) <= 0x21 || (a2 - 1162) <= 0x35) {
          return (a2 & 1) == 0;
        }
        if ((a2 - 1217) <= 0xD) {
          return a2 & 1;
        }
        BOOL v14 = (a2 - 1024) < 0x30 || (a2 - 1329) < 0x26;
        if (a2 == 1216) {
          BOOL v14 = 1;
        }
        BOOL v15 = (a2 & 1) == 0;
        BOOL v16 = (a2 - 1232) > 0x55;
        goto LABEL_79;
      case 0x10:
        return (a2 - 4256) < 0x26;
      default:
        return result;
    }
  }
  if (BYTE1(a2) > 0x2Bu)
  {
    if (BYTE1(a2) <= 0xA6u)
    {
      if (BYTE1(a2) != 44)
      {
        BOOL v4 = (a2 - 42624) <= 0x17 && (a2 & 1) == 0;
        if ((a2 - 42560) <= 0x2D) {
          BOOL v5 = (a2 & 1) == 0;
        }
        else {
          BOOL v5 = v4;
        }
        BOOL v6 = BYTE1(a2) == 166;
        return v6 && v5;
      }
      if (a2 >> 5 == 355)
      {
        int v11 = a2 - 11360;
        uint64_t v12 = s_szTableLowercase2C60to2C7F;
LABEL_49:
        int v10 = v12[v11];
        return v10 != a2;
      }
      if ((a2 - 11499) <= 3) {
        BOOL v14 = (a2 & 1) == 0;
      }
      else {
        BOOL v14 = (a2 - 11264) < 0x2F;
      }
      BOOL v15 = (a2 & 1) == 0;
      BOOL v16 = (a2 - 11392) > 0xE;
LABEL_79:
      if (v16) {
        return v14;
      }
      else {
        return v15;
      }
    }
    if (BYTE1(a2) != 167)
    {
      BOOL v5 = (a2 - 65313) < 0x1A;
      BOOL v6 = BYTE1(a2) == 255;
      return v6 && v5;
    }
    if ((a2 - 42786) > 0xD && (a2 - 42802) > 0x3D)
    {
      if ((a2 - 42873) <= 3) {
        return (a2 & 1) == 0;
      }
      if ((a2 - 42878) > 9) {
        return a2 == 42877 || a2 == 42891;
      }
    }
    return a2 & 1;
  }
  if (BYTE1(a2) != 30)
  {
    if (BYTE1(a2) != 31)
    {
      BOOL v5 = a2 == 8498 || a2 == 8579;
      BOOL v6 = BYTE1(a2) == 33;
      return v6 && v5;
    }
    if (a2 > 8188) {
      return 0;
    }
    int v10 = s_szTableLowercase1F00to1FFC[a2 - 7936];
    return v10 != a2;
  }
  if (a2 >> 5 >= 0xF5) {
    BOOL v13 = (a2 & 1) == 0;
  }
  else {
    BOOL v13 = a2 == 7838;
  }
  if (a2 <= 7829) {
    return (a2 & 1) == 0;
  }
  else {
    return v13;
  }
}

uint64_t TLocaleInfo::isLower(uint64_t a1, int a2)
{
  if (BYTE1(a2) <= 0x1Eu)
  {
    switch(BYTE1(a2))
    {
      case 0:
        BOOL v11 = a2 != 247 && (a2 - 223) < 0x21;
        return (a2 - 97) < 0x1A || v11;
      case 1:
        goto LABEL_51;
      case 2:
        if (a2 > 658) {
          return 0;
        }
LABEL_51:
        int v12 = s_szTableUppercase0100to0292[a2 - 256];
        return v12 != a2;
      case 3:
        unsigned int v5 = a2 - 880;
        if (a2 < 880) {
          return 0;
        }
        BOOL v6 = &s_szTableUppercase0370to03FF;
        goto LABEL_54;
      case 4:
      case 5:
        if ((a2 - 1120) <= 0x21 || (a2 - 1162) <= 0x35) {
          return a2 & 1;
        }
        if ((a2 - 1217) <= 0xD) {
          return (a2 & 1) == 0;
        }
        if ((a2 - 1232) <= 0x55) {
          return a2 & 1;
        }
        uint64_t result = 1;
        if (a2 != 1231) {
          uint64_t result = (a2 - 1072) < 0x30 || (a2 - 1377) < 0x26;
        }
        break;
      default:
        if (a2 >> 5 >= 0xF5) {
          int v9 = a2 & 1;
        }
        else {
          int v9 = a2 == 7835;
        }
        if (a2 <= 7829) {
          unsigned int v7 = a2 & 1;
        }
        else {
          unsigned int v7 = v9;
        }
        BOOL v8 = BYTE1(a2) == 30;
        goto LABEL_38;
    }
    return result;
  }
  if (BYTE1(a2) <= 0x2Cu)
  {
    switch(BYTE1(a2))
    {
      case 0x1Fu:
        if (a2 <= 8179)
        {
          int v12 = s_szTableUppercase1F00to1FF3[a2 - 7936];
          return v12 != a2;
        }
        break;
      case 0x21u:
        return a2 == 8526 || a2 == 8580;
      case 0x2Cu:
        unsigned int v5 = a2 - 11360;
        if ((a2 - 11360) > 0x16)
        {
          if ((a2 - 11392) > 0xE && (a2 - 11499) > 3) {
            return (a2 - 11312) < 0x2F;
          }
          return a2 & 1;
        }
        BOOL v6 = &s_szTableUppercase2C60to2C76;
LABEL_54:
        int v12 = v6[v5];
        return v12 != a2;
    }
    return 0;
  }
  if (BYTE1(a2) > 0xA6u)
  {
    if (BYTE1(a2) != 167)
    {
      unsigned int v7 = (a2 - 65345) < 0x1A;
      BOOL v8 = BYTE1(a2) == 255;
LABEL_38:
      if (v8) {
        return v7;
      }
      else {
        return 0;
      }
    }
    if ((a2 - 42786) > 0xD && (a2 - 42802) > 0x3D)
    {
      if ((a2 - 42873) <= 3) {
        return (a2 & 1) == 0;
      }
      if ((a2 - 42878) > 9) {
        return a2 == 42892;
      }
    }
    return a2 & 1;
  }
  if ((a2 - 42624) <= 0x17) {
    int v3 = a2 & 1;
  }
  else {
    int v3 = 0;
  }
  if ((a2 - 42560) <= 0x2D) {
    unsigned int v4 = a2 & 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (BYTE1(a2) != 166) {
    unsigned int v4 = 0;
  }
  if (BYTE1(a2) == 45) {
    return a2 < 11558;
  }
  else {
    return v4;
  }
}

uint64_t TLocaleInfo::toUpper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if ((int)a2 <= 127)
  {
    if (a2 == 105 && *(unsigned char *)(a1 + 80)) {
      return 304;
    }
    else {
      return __toupper(a2);
    }
  }
  if (!TLocaleInfo::isLower(a1, a2)) {
    return v2;
  }
  if (BYTE1(v2) <= 0x1Eu)
  {
    switch(BYTE1(v2))
    {
      case 0:
        if (v2 != 247 && (v2 - 224) <= 0x1E) {
          return (v2 - 32);
        }
        if (v2 == 255) {
          return 376;
        }
        return v2;
      case 1:
        return s_szTableUppercase0100to0292[(int)v2 - 256];
      case 2:
        if (v2 <= 0x292) {
          return s_szTableUppercase0100to0292[(int)v2 - 256];
        }
        return v2;
      case 3:
        int v4 = v2 - 880;
        if (v2 < 0x370) {
          return v2;
        }
        unsigned int v5 = (unsigned int *)&s_szTableUppercase0370to03FF;
        return v5[v4];
      case 4:
      case 5:
        if ((v2 - 1120) <= 0x21 || (v2 - 1162) <= 0x35) {
          return v2 & 0xFFFFFFFE;
        }
        if ((v2 - 1217) <= 0xD) {
          return v2 + (v2 & 1) - 1;
        }
        if ((v2 - 1232) <= 0x55) {
          return v2 & 0xFFFFFFFE;
        }
        if ((v2 - 1072) <= 0x1F) {
          return (v2 - 32);
        }
        if ((v2 & 0xFFFFFFF0) == 0x450) {
          return (v2 - 80);
        }
        if (v2 == 1231) {
          return 1216;
        }
        if ((v2 - 1377) <= 0x25) {
          return (v2 - 48);
        }
        return v2;
      default:
        if (BYTE1(v2) != 30) {
          return v2;
        }
        if (v2 >> 1 <= 0xF4A) {
          return v2 & 0xFFFFFFFE;
        }
        if (v2 == 7835) {
          return 7776;
        }
        if (v2 >> 5 >= 0xF5) {
          return v2 & 0xFFFFFFFE;
        }
        return v2;
    }
  }
  if (BYTE1(v2) <= 0x2Cu)
  {
    switch(BYTE1(v2))
    {
      case 0x1Fu:
        if (v2 >> 2 <= 0x7FC) {
          return s_szTableUppercase1F00to1FF3[(int)v2 - 7936];
        }
        break;
      case 0x21u:
        if (v2 == 8526)
        {
          return 8498;
        }
        else if (v2 == 8580)
        {
          return 8579;
        }
        break;
      case 0x2Cu:
        int v4 = v2 - 11360;
        if ((v2 - 11360) > 0x16)
        {
          if ((v2 - 11392) <= 0xE || (v2 - 11499) <= 3) {
            return v2 & 0xFFFFFFFE;
          }
          if ((v2 - 11312) <= 0x2E) {
            return (v2 - 48);
          }
        }
        else
        {
          unsigned int v5 = (unsigned int *)&s_szTableUppercase2C60to2C76;
          return v5[v4];
        }
        break;
      default:
        return v2;
    }
  }
  else if (BYTE1(v2) > 0xA6u)
  {
    if (BYTE1(v2) == 167)
    {
      if ((v2 - 42786) <= 0xD || (v2 - 42802) <= 0x3D) {
        return v2 & 0xFFFFFFFE;
      }
      if ((v2 - 42873) <= 3) {
        return v2 + (v2 & 1) - 1;
      }
      if ((v2 - 42878) <= 9) {
        return v2 & 0xFFFFFFFE;
      }
      if (v2 == 42892) {
        return 42891;
      }
    }
    else if (BYTE1(v2) == 255 && (v2 - 65345) <= 0x19)
    {
      return (v2 - 32);
    }
  }
  else
  {
    if (BYTE1(v2) != 45)
    {
      if (BYTE1(v2) != 166 || (v2 - 42560) > 0x2D && (v2 - 42624) > 0x17) {
        return v2;
      }
      return v2 & 0xFFFFFFFE;
    }
    if ((v2 - 11520) <= 0x25) {
      return (v2 - 7264);
    }
  }
  return v2;
}

uint64_t TLocaleInfo::toLower(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if ((int)a2 <= 127)
  {
    if (a2 == 73 && *(unsigned char *)(a1 + 80)) {
      return 305;
    }
    else {
      return __tolower(a2);
    }
  }
  if (!TLocaleInfo::isUpper(a1, a2)) {
    return v2;
  }
  if (BYTE1(v2) <= 0x1Du)
  {
    switch(BYTE1(v2))
    {
      case 0:
        if (v2 != 215 && (v2 - 192) <= 0x1E) {
          return (v2 + 32);
        }
        return v2;
      case 1:
        return s_szTableLowercase0100to024F[(int)v2 - 256];
      case 2:
        if (v2 <= 0x24F) {
          return s_szTableLowercase0100to024F[(int)v2 - 256];
        }
        return v2;
      case 3:
        int v4 = v2 - 880;
        if (v2 < 0x370) {
          return v2;
        }
        unsigned int v5 = s_szTableLowercase0370to03FF;
        return v5[v4];
      case 4:
      case 5:
        if ((v2 - 1120) <= 0x21 || (v2 - 1162) <= 0x35) {
          return v2 | 1;
        }
        if ((v2 - 1217) <= 0xD) {
          return (v2 & 1) + v2;
        }
        if ((v2 - 1232) <= 0x55) {
          return v2 | 1;
        }
        if ((v2 & 0xFFFFFFF0) == 0x400) {
          return (v2 + 80);
        }
        if ((v2 - 1040) <= 0x1F) {
          return (v2 + 32);
        }
        if (v2 == 1216) {
          return 1231;
        }
        if ((v2 - 1329) <= 0x25) {
          return (v2 + 48);
        }
        return v2;
      case 0x10:
        if ((v2 - 4256) <= 0x25) {
          return (v2 + 7264);
        }
        return v2;
      default:
        return v2;
    }
  }
  if (BYTE1(v2) <= 0x2Bu)
  {
    switch(BYTE1(v2))
    {
      case 0x1Eu:
        if (v2 >> 1 <= 0xF4A || v2 >> 5 >= 0xF5) {
          return v2 | 1;
        }
        if (v2 == 7838) {
          return 223;
        }
        break;
      case 0x1Fu:
        if (v2 <= 0x1FFC) {
          return s_szTableLowercase1F00to1FFC[(int)v2 - 7936];
        }
        break;
      case 0x21u:
        if (v2 == 8498)
        {
          return 8526;
        }
        else if (v2 == 8579)
        {
          return 8580;
        }
        break;
    }
  }
  else if (BYTE1(v2) > 0xA6u)
  {
    if (BYTE1(v2) == 167)
    {
      if ((v2 - 42786) <= 0xD || (v2 - 42802) <= 0x3D) {
        return (v2 & 1) + v2;
      }
      if ((v2 - 42873) <= 3) {
        return v2 | 1;
      }
      if ((v2 - 42878) <= 9) {
        return (v2 & 1) + v2;
      }
      if (v2 == 42877)
      {
        return 7545;
      }
      else if (v2 == 42891)
      {
        return 42892;
      }
    }
    else if (BYTE1(v2) == 255 && (v2 - 65313) <= 0x19)
    {
      return (v2 + 32);
    }
  }
  else
  {
    if (BYTE1(v2) != 44)
    {
      if (BYTE1(v2) != 166 || (v2 - 42560) > 0x2D && (v2 - 42624) > 0x17) {
        return v2;
      }
      return v2 | 1;
    }
    if (v2 >> 5 == 355)
    {
      int v4 = v2 - 11360;
      unsigned int v5 = s_szTableLowercase2C60to2C7F;
      return v5[v4];
    }
    else
    {
      if ((v2 - 11392) <= 0xE || (v2 - 11499) <= 3) {
        return v2 | 1;
      }
      if ((v2 - 11264) <= 0x2E) {
        return (v2 + 48);
      }
    }
  }
  return v2;
}

double TLocaleInfo::stringToFloat(uint64_t a1, __int32 *a2, BOOL *a3)
{
  double v10 = 0.0;
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&__p, a2);
  std::wistringstream::basic_istringstream[abi:ne180100]((uint64_t)v7, &__p, 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  MEMORY[0x216698550](v7, &v10);
  *a3 = (*(_DWORD *)((unsigned char *)&v7[4] + *(void *)(v7[0] - 24)) & 7) != 2;
  double v4 = v10;
  if (v8 < 0) {
    operator delete((void *)v7[10]);
  }
  std::wstreambuf::~wstreambuf();
  std::wistream::~wistream();
  MEMORY[0x2166986F0](&v9);
  return v4;
}

void sub_213EAB85C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t std::wistringstream::basic_istringstream[abi:ne180100](uint64_t a1, const std::wstring *a2, int a3)
{
  uint64_t v6 = a1 + 16;
  *(void *)a1 = &unk_26C4DD6B0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 120) = &unk_26C4DD6D8;
  std::ios_base::init((std::ios_base *)(a1 + 120), (void *)(a1 + 16));
  *(void *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = 0;
  *(_DWORD *)(a1 + 2DgnArray<LinearTransform>::releaseAll((uint64_t)this + 64) = -1;
  std::wstringbuf::basic_stringbuf[abi:ne180100](v6, a2, a3 | 8);
  return a1;
}

void sub_213EAB968(_Unwind_Exception *a1)
{
  std::wistream::~wistream();
  MEMORY[0x2166986F0](v1);
  _Unwind_Resume(a1);
}

uint64_t std::wistringstream::~wistringstream(uint64_t a1)
{
  uint64_t v2 = a1 + 120;
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  std::wstreambuf::~wstreambuf();
  std::wistream::~wistream();
  MEMORY[0x2166986F0](v2);
  return a1;
}

uint64_t TLocaleInfo::stringToULong(uint64_t a1, uint64_t a2, BOOL *a3, int a4)
{
  for (unsigned int i = (unsigned int *)(a2 + 4); ; ++i)
  {
    int v7 = *(i - 1);
    {
      operator new();
    }
    if (v7 > 159) {
      break;
    }
    BOOL v8 = v7 > 0x20 || ((1 << v7) & 0x100002600) == 0;
    if (v8) {
      goto LABEL_21;
    }
LABEL_18:
    ;
  }
  if (v7 >= 12288)
  {
    if (v7 != 65279 && v7 != 12288) {
      goto LABEL_21;
    }
    goto LABEL_18;
  }
  if (v7 == 160 || v7 == 8203) {
    goto LABEL_18;
  }
LABEL_21:
  unsigned int v10 = *(i - 1);
  if (!a4)
  {
    if ((explicit & 1) == 0
    {
      operator new();
    }
    uint64_t v12 = v10 - 48;
    if ((int)v10 >= 48)
    {
      if (v10 <= 0x39) {
        goto LABEL_34;
      }
      if (v10 >= 0x660)
      {
        LODWORD(v12) = TLocaleInfo::getDigitExtended(v12, v10);
        goto LABEL_33;
      }
    }
LABEL_83:
    uint64_t result = 0;
    *a3 = 1;
    return result;
  }
  if ((explicit & 1) == 0
  {
    operator new();
  }
  LODWORD(v12) = v10 - 48;
  if ((int)v10 < 48) {
    goto LABEL_83;
  }
  if (v10 <= 0x39) {
    goto LABEL_34;
  }
  if (v10 < 0x41) {
    goto LABEL_83;
  }
  if (v10 <= 0x46)
  {
    LODWORD(v12) = v10 - 55;
    goto LABEL_34;
  }
  if (v10 - 97 >= 6) {
    goto LABEL_83;
  }
  LODWORD(v12) = v10 - 87;
LABEL_33:
  if (v12 == -1) {
    goto LABEL_83;
  }
LABEL_34:
  uint64_t v13 = (int)v12;
  unsigned int v14 = *i;
  if (!*i) {
    goto LABEL_59;
  }
  if (a4) {
    uint64_t v15 = 16;
  }
  else {
    uint64_t v15 = 10;
  }
  while (2)
  {
    if (a4)
    {
      if ((v16 & 1) == 0
      {
        operator new();
      }
      LODWORD(v17) = v14 - 48;
      if ((int)v14 < 48) {
        break;
      }
      if (v14 <= 0x39) {
        goto LABEL_53;
      }
      if (v14 < 0x41) {
        break;
      }
      if (v14 <= 0x46)
      {
        LODWORD(v17) = v14 - 55;
        goto LABEL_53;
      }
      if (v14 - 97 >= 6) {
        break;
      }
      LODWORD(v17) = v14 - 87;
      goto LABEL_52;
    }
    if ((v16 & 1) == 0
    {
      operator new();
    }
    uint64_t v17 = v14 - 48;
    if ((int)v14 >= 48)
    {
      if (v14 <= 0x39)
      {
LABEL_53:
        uint64_t v13 = v13 * v15 + (int)v17;
        unsigned int v18 = i[1];
        ++i;
        unsigned int v14 = v18;
        if (!v18) {
          break;
        }
        continue;
      }
      if (v14 < 0x660) {
        break;
      }
      LODWORD(v17) = TLocaleInfo::getDigitExtended(v17, v14);
LABEL_52:
      if (v17 == -1) {
        break;
      }
      goto LABEL_53;
    }
    break;
  }
LABEL_59:
  while (2)
  {
    int v19 = *i;
    {
      operator new();
    }
    if (v19 <= 159)
    {
      if (v19 > 0x20 || ((1 << v19) & 0x100002600) == 0) {
        goto LABEL_78;
      }
      goto LABEL_75;
    }
    if (v19 >= 12288)
    {
      if (v19 != 65279 && v19 != 12288) {
        goto LABEL_78;
      }
LABEL_75:
      ++i;
      continue;
    }
    break;
  }
  if (v19 == 160 || v19 == 8203) {
    goto LABEL_75;
  }
LABEL_78:
  BOOL v8 = *i == 0;
  *a3 = *i != 0;
  if (v8) {
    return v13;
  }
  else {
    return 0;
  }
}

void sub_213EABE54(_Unwind_Exception *a1)
{
  MEMORY[0x216698730](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TLocaleInfo::valueToString(uint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
  unint64_t v5 = a2;
  if (a4) {
    unint64_t v6 = 16;
  }
  else {
    unint64_t v6 = 10;
  }
  if (v6 <= a2)
  {
    unint64_t v7 = 1;
    unint64_t v8 = a2;
    do
    {
      v8 /= v6;
      v7 *= v6;
    }
    while (v6 <= v8);
    if (v7)
    {
      do
      {
        if (v5 / v7 >= 0xA) {
          int v9 = 55;
        }
        else {
          int v9 = 48;
        }
        int v12 = v9 + v5 / v7;
        TBuffer<wchar_t>::insert(a3, *(void *)(a3 + 16), &v12, 1uLL);
        v5 %= v7;
        v7 /= v6;
      }
      while (v7 > 1);
    }
  }
  if (v5 >= 0xA) {
    int v10 = 55;
  }
  else {
    int v10 = 48;
  }
  int v13 = v10 + v5;
  return TBuffer<wchar_t>::insert(a3, *(void *)(a3 + 16), &v13, 1uLL);
}

void virtual thunk to'std::wistringstream::~wistringstream(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  if (v1[103] < 0) {
    operator delete(*((void **)v1 + 10));
  }
  std::wstreambuf::~wstreambuf();
  std::wistream::~wistream();

  JUMPOUT(0x2166986F0);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  if (v1[103] < 0) {
    operator delete(*((void **)v1 + 10));
  }
  std::wstreambuf::~wstreambuf();
  std::wistream::~wistream();
  MEMORY[0x2166986F0](v1 + 120);

  JUMPOUT(0x216698730);
}

void std::wistringstream::~wistringstream(uint64_t a1)
{
  uint64_t v1 = a1 + 120;
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  std::wstreambuf::~wstreambuf();
  std::wistream::~wistream();
  MEMORY[0x2166986F0](v1);

  JUMPOUT(0x216698730);
}

uint64_t std::wstringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, const std::wstring *a2, int a3)
{
  uint64_t v6 = std::wstreambuf::basic_streambuf();
  *(_OWORD *)(v6 + DgnArray<LinearTransform>::releaseAll((uint64_t)this + 64) = 0u;
  *(_OWORD *)(v6 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = 0u;
  *(_DWORD *)(v6 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = a3;
  std::wstring::operator=((std::wstring *)(v6 + 64), a2);
  std::wstringbuf::__init_buf_ptrs[abi:ne180100](a1);
  return a1;
}

void sub_213EAC2C0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  std::wstreambuf::~wstreambuf();
  _Unwind_Resume(a1);
}

void std::wstringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  *(void *)(a1 + 88) = 0;
  uint64_t v2 = (std::wstring *)(a1 + 64);
  char v3 = *(unsigned char *)(a1 + 87);
  if (v3 < 0)
  {
    double v4 = *(std::wstring **)(a1 + 64);
    unint64_t v5 = *(void *)(a1 + 72);
  }
  else
  {
    double v4 = v2;
    unint64_t v5 = *(unsigned __int8 *)(a1 + 87);
  }
  int v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    unint64_t v7 = (char *)v4 + 4 * v5;
    *(void *)(a1 + 88) = v7;
    *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v4;
    *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = v4;
    *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v7;
  }
  if ((v6 & 0x10) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + 4 * v5;
    std::wstring::size_type v8 = v3 < 0 ? (*(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 4;
    std::wstring::resize(v2, v8, 0);
    uint64_t v9 = *(char *)(a1 + 87) < 0 ? *(void *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = v4;
    *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = v4;
    *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = (char *)v4 + 4 * v9;
    if ((*(unsigned char *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        uint64_t v10 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v11 = (v10 + ((v5 - 0x80000000 - v10) >> 1)) >> 30;
        double v4 = (std::wstring *)((char *)v4 + 0x1FFFFFFFCLL * v11 + 0x1FFFFFFFCLL);
        unint64_t v5 = v5 - 0x7FFFFFFF - 0x7FFFFFFF * v11;
        *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = v4;
      }
      if (v5) {
        *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = (char *)v4 + 4 * v5;
      }
    }
  }
}

void MrecInitModule_voc_voc(void)
{
  if (!gParDebugVocGetPics)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugVocGetPics", (const char *)&unk_2140A1D8E, (const char *)&unk_2140A1D8E, 0, 0, 0);
    *uint64_t v1 = &unk_26C4E0858;
    gParDebugVocGetPics = (uint64_t)v1;
    uint64_t v2 = (uint64_t *)GlobalParamMgr::smpGlobalParamMgr;
    GlobalParamMgr::addParam(v2, (GlobalParam **)&gParDebugVocGetPics);
  }
}

void Voc::Voc(Voc *this, __int16 a2)
{
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  FileSpec::FileSpec((Voc *)((char *)this + 104));
  FileHistory::FileHistory((Voc *)((char *)this + 144));
  PhnMgr::PhnMgr((Voc *)((char *)this + 184));
  *((void *)this + 34) = 0;
  *((void *)this + 35) = 0;
  HashProbeKEV<unsigned int,DgnArray<OpaquePelIdAndDurId>,Voc>::HashProbeKEV((uint64_t)this + 312, 0, 16);
  *((_OWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  MrecTime::MrecTime((Voc *)((char *)this + 416));
  DgnString::DgnString((Voc *)((char *)this + 448));
  DgnString::DgnString((Voc *)((char *)this + 464));
  DgnString::DgnString((Voc *)((char *)this + 488));
  DgnString::DgnString((Voc *)((char *)this + 504));
  DFileProgressInfo::DFileProgressInfo((Voc *)((char *)this + 520));
  *((_WORD *)this + 84) = a2;
  *((_DWORD *)this + 66) = 0;
  *((unsigned char *)this + 288) = 0;
  *(void *)((char *)this + 170) = 0;
  *((void *)this + 31) = 0;
  *(void *)((char *)this + 253) = 0;
  *((_DWORD *)this + 77) = 0;
  *(void *)((char *)this + 300) = 0;
  *(void *)((char *)this + 292) = 0;
  *((void *)this + 43) = this;
  *((void *)this + 54) = this;
  *((unsigned char *)this + 178) = 0;
  *((void *)this + 15) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((void *)this + 4) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = -1;
  *((void *)this + 17) = 0;
  *((_DWORD *)this + 110) = 0;
  *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 120) = 0;
  *((_DWORD *)this + DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)this + 152) = 0;
}

void sub_213EAC5EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, SvcCompatData *a10, FileHistory *a11, FileSpec *a12)
{
  DgnString::~DgnString(v16);
  DgnString::~DgnString(v15);
  DgnString::~DgnString(v12);
  DgnString::~DgnString(v19);
  DgnString::~DgnString(v18);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v14 + 400);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v14 + 384);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v14 + 368);
  DgnIArray<Utterance *>::~DgnIArray(v14 + 352);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v14 + 328);
  MrecInitModule_sdpres_sdapi();
  DgnPrimArray<unsigned int>::~DgnPrimArray(v14 + 272);
  PhnMgr::~PhnMgr(v17);
  FileHistory::~FileHistory(a11);
  FileSpec::~FileSpec(a12);
  DgnIOwnArray<WordNgramTemplate *>::releaseAll(v13);
  SvcCompatData::SvcCompatData(a10);
  _Unwind_Resume(a1);
}

void sub_213EAC6AC()
{
}

void sub_213EAC6B4()
{
}

void sub_213EAC6BC()
{
}

void sub_213EAC6C4()
{
}

void sub_213EAC6CC()
{
}

void Voc::~Voc(Voc *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_WORD *)this + 85)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 196, (uint64_t)"voc/voc", 1, (uint64_t)"%.500s %d %.500s %d", a7, a8, (char)"delete voc");
  }
  if (*((_WORD *)this + 86)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 200, (uint64_t)"voc/voc", 1, (uint64_t)"%.500s %d %.500s %d", a7, a8, (char)"delete voc");
  }
  if (*((_WORD *)this + 87)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 203, (uint64_t)"voc/voc", 1, (uint64_t)"%.500s %d %.500s %d", a7, a8, (char)"delete voc");
  }
  if (*((_WORD *)this + 88)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 206, (uint64_t)"voc/voc", 1, (uint64_t)"%.500s %d %.500s %d", a7, a8, (char)"delete voc");
  }
  if (*((_DWORD *)this + 62)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 210, (uint64_t)"voc/voc", 1, (uint64_t)"%.500s %d %.500s %d", a7, a8, (char)"delete voc");
  }
  if (*((_DWORD *)this + 63)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 214, (uint64_t)"voc/voc", 1, (uint64_t)"%.500s %d %.500s %d", a7, a8, (char)"delete voc");
  }
  if (*((_DWORD *)this + 64)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 218, (uint64_t)"voc/voc", 1, (uint64_t)"%.500s %d %.500s %d", a7, a8, (char)"delete voc");
  }
  DgnDelete<RuleMgr>(*((RuleMgr **)this + 8));
  *((void *)this + 8) = 0;
  DgnDelete<StateMgr>(*((StateMgr **)this + 7));
  *((void *)this + 7) = 0;
  DgnDelete<EnvMgr>(*(EnvMgr **)this);
  *(void *)this = 0;
  DgnDelete<CharInfo>(*((void *)this + 1));
  *((void *)this + 1) = 0;
  DgnDelete<CollMgr>(*((CollMgr **)this + 2));
  *((void *)this + 2) = 0;
  DgnDelete<PronCollMgr>(*((PronCollMgr **)this + 3));
  *((void *)this + 3) = 0;
  DgnDelete<LanguageModel>(*((void (****)(void))this + 9));
  *((void *)this + 9) = 0;
  DgnDelete<WordList>(*((WordList **)this + 6));
  *((void *)this + 6) = 0;
  DgnDelete<CharInfo>(*((void *)this + 4));
  *((void *)this + 4) = 0;
  uint64_t v9 = (DSMSetData **)*((void *)this + 15);
  if (v9) {
    DgnSharedMemSet::unrefDSMEx(v9, *((unsigned int *)this + 32));
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 560);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 544);
  DgnArray<DgnString>::releaseAll((uint64_t)this + 528);
  DgnString::~DgnString((Voc *)((char *)this + 504));
  DgnString::~DgnString((Voc *)((char *)this + 488));
  DgnString::~DgnString((Voc *)((char *)this + 464));
  DgnString::~DgnString((Voc *)((char *)this + 448));
  DgnString::~DgnString((Voc *)((char *)this + 416));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 400);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 384);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 368);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 352);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 328);
  MrecInitModule_sdpres_sdapi();
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 272);
  PhnMgr::~PhnMgr((Voc *)((char *)this + 184));
  FileHistory::~FileHistory((Voc *)((char *)this + 144));
  FileSpec::~FileSpec((Voc *)((char *)this + 104));
  DgnIOwnArray<WordNgramTemplate *>::releaseAll((uint64_t)this + 80);
  SvcCompatData::SvcCompatData((Voc *)((char *)this + 40));
}

CollMgr *DgnDelete<CollMgr>(CollMgr *result)
{
  if (result)
  {
    CollMgr::~CollMgr(result);
    return (CollMgr *)MemChunkFree(v1, 0);
  }
  return result;
}

PronCollMgr *DgnDelete<PronCollMgr>(PronCollMgr *result)
{
  if (result)
  {
    PronCollMgr::~PronCollMgr(result);
    return (PronCollMgr *)MemChunkFree(v1, 0);
  }
  return result;
}

void (***DgnDelete<LanguageModel>(void (***result)(void)))(void)
{
  if (result)
  {
    uint64_t v1 = result;
    (**result)(result);
    return (void (***)(void))MemChunkFree(v1, 0);
  }
  return result;
}

WordList *DgnDelete<WordList>(WordList *result)
{
  if (result)
  {
    WordList::~WordList(result);
    return (WordList *)MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t Voc::computePrefLmScores(Voc *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  unsigned int v9 = *((_DWORD *)this + 66);
  if (!v9)
  {
    uint64_t v20 = *(unsigned int *)(*((void *)this + 6) + 388);
    int v21 = (void *)((char *)this + 272);
    unsigned int v22 = *((_DWORD *)this + 71);
    if (v20 <= v22)
    {
      *((_DWORD *)this + 70) = v20;
      if (!v20)
      {
LABEL_25:
        unint64_t v11 = &v35;
        goto LABEL_26;
      }
    }
    else
    {
      DgnPrimArray<short>::reallocElts((uint64_t)this + 272, v20 - v22, 0);
      *((_DWORD *)this + 70) = v20;
    }
    unint64_t v23 = 0;
    do
    {
      uint64_t v24 = *((void *)this + 6);
      if (v23 < *(unsigned int *)(v24 + 388) && *(unsigned char *)(*(void *)(v24 + 104) + v23))
      {
        uint64_t v25 = v36;
        if (v36 == (unint64_t)HIDWORD(v36))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v35, 1, 1);
          uint64_t v25 = v36;
        }
        *(_DWORD *)(v35 + 4 * v25) = v23;
        LODWORD(v36) = v36 + 1;
      }
      else
      {
        *(_WORD *)(*v21 + 2 * v23) = 20000;
      }
      ++v23;
    }
    while (v20 != v23);
    goto LABEL_25;
  }
  uint64_t CollWords = StateMgr::getCollWords(*((StateMgr **)this + 7), v9, 0xFFFFu, 1, a5, a6, a7, a8);
  unint64_t v11 = (uint64_t *)CollWords;
  uint64_t v12 = *(unsigned int *)(CollWords + 8);
  if (!v12)
  {
    unsigned int v18 = (void **)((char *)this + 272);
    unsigned int v19 = *((_DWORD *)this + 71);
    unsigned int v17 = 1;
    if (v19)
    {
LABEL_14:
      *((_DWORD *)this + 70) = v17;
      goto LABEL_15;
    }
LABEL_13:
    DgnPrimArray<short>::reallocElts((uint64_t)v18, v17 - v19, 0);
    goto LABEL_14;
  }
  unsigned int v13 = 0;
  uint64_t v14 = *(unsigned int **)CollWords;
  do
  {
    unsigned int v16 = *v14++;
    unsigned int v15 = v16;
    if (v13 <= v16) {
      unsigned int v13 = v15;
    }
    --v12;
  }
  while (v12);
  unsigned int v17 = v13 + 1;
  unsigned int v18 = (void **)((char *)this + 272);
  unsigned int v19 = *((_DWORD *)this + 71);
  if (v19 < v13 + 1) {
    goto LABEL_13;
  }
  *((_DWORD *)this + 70) = v17;
  if (v13 != -1) {
LABEL_15:
  }
    memset_pattern16(*v18, &unk_2140A1DB0, 2 * v17);
LABEL_26:
  if (*((_DWORD *)v11 + 2))
  {
    v34[0] = 0;
    v34[1] = 0;
    (*(void (**)(void, uint64_t *, void *))(**((void **)this + 9) + 520))(*((void *)this + 9), v11, v34);
    uint64_t v26 = *((unsigned int *)v11 + 2);
    if (v26)
    {
      int v27 = (unsigned int *)*v11;
      int v28 = (_WORD *)v34[0];
      int v29 = **((_DWORD **)this + 4);
      uint64_t v30 = *((void *)this + 34);
      do
      {
        unsigned int v32 = *v27++;
        uint64_t v31 = v32;
        LOWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = *v28++;
        *(_WORD *)(v30 + 2 * v31) = v32 + v29;
        --v26;
      }
      while (v26);
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v34);
  }
  *((unsigned char *)this + 260) = 1;
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v35);
}

void sub_213EACD2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void *Voc::notifyPrefLmScoresBad(Voc *this)
{
  *((unsigned char *)this + 260) = 0;
  uint64_t result = (void *)*((void *)this + 34);
  if (result)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *((void *)this + 34) = 0;
  }
  *((void *)this + 35) = 0;
  return result;
}

uint64_t Voc::getPrefPron(uint64_t this, unsigned int a2, const unsigned __int16 **a3, unsigned int *a4)
{
  *a3 = (const unsigned __int16 *)(*(void *)(*(void *)(this + 48) + 72)
                                 + 2 * *(unsigned int *)(*(void *)(*(void *)(this + 48) + 48) + 4 * a2));
  unsigned int v4 = *(unsigned __int16 *)(*(void *)(*(void *)(this + 48) + 32) + 2 * a2);
  *a4 = v4;
  unsigned int v5 = *(_DWORD *)(this + 300);
  if (v5 < v4 && v5 != 0) {
    unsigned int v4 = *(_DWORD *)(this + 300);
  }
  *a4 = v4;
  return this;
}

uint64_t Voc::computePrefWordIdsSortedByPron(Voc *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t CollWords = StateMgr::getCollWords(*((StateMgr **)this + 7), *((_DWORD *)this + 76), 0xFFFFu, 1, a5, a6, a7, a8);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  unint64_t v10 = *(unsigned int *)(CollWords + 8);
  if (v10)
  {
    uint64_t v11 = CollWords;
    uint64_t v12 = 0;
    unsigned int v13 = 0;
    for (unint64_t i = 0; i < v10; ++i)
    {
      uint64_t v15 = *(unsigned int *)(*(void *)v11 + 4 * i);
      if (*(_WORD *)(*(void *)(*((void *)this + 6) + 32) + 2 * v15))
      {
        if (v13 == HIDWORD(v18))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v17, 1, 1);
          unsigned int v13 = v18;
          uint64_t v12 = v17;
        }
        *(_DWORD *)(v12 + 4 * v13) = v15;
        unsigned int v13 = v18 + 1;
        LODWORD(v18) = v18 + 1;
        unint64_t v10 = *(unsigned int *)(v11 + 8);
      }
    }
  }
  PrefiltererWordIdPronCollArray::addArray((unsigned int *)this + 104, (uint64_t)&v17);
  *((unsigned char *)this + 288) = 1;
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v17);
}

void sub_213EACEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *Voc::notifyPrefWordIdsSortedByPronBad(Voc *this)
{
  *((unsigned char *)this + 288) = 0;
  uint64_t v2 = (Voc *)((char *)this + 416);
  PrefiltererWordIdPronCollArray::removeAll((uint64_t)this + 416);
  PrefiltererWordIdPronCollArray::compact(v2);

  return Voc::clearPrefPicModels(this);
}

void *Voc::clearPrefPicModels(Voc *this)
{
  *((_DWORD *)this + 78) = 0;
  if (*((_DWORD *)this + 84))
  {
    unint64_t v2 = 0;
    uint64_t v3 = *((void *)this + 41);
    do
      *(_DWORD *)(v3 + 4 * v2++) = -1;
    while (v2 < *((unsigned int *)this + 84));
  }
  unsigned int v4 = (void *)*((void *)this + 44);
  if (v4)
  {
    MemChunkFree(v4, 0);
    *((void *)this + 44) = 0;
  }
  *((void *)this + 45) = 0;
  unsigned int v5 = (void *)*((void *)this + 46);
  if (v5)
  {
    MemChunkFree(v5, 0);
    *((void *)this + 46) = 0;
  }
  *((void *)this + 47) = 0;
  int v6 = (void *)*((void *)this + 48);
  if (v6)
  {
    MemChunkFree(v6, 0);
    *((void *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = 0;
  }
  *((void *)this + 49) = 0;
  uint64_t result = (void *)*((void *)this + 50);
  if (result)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *((void *)this + 50) = 0;
  }
  *((void *)this + 51) = 0;
  return result;
}

void *Voc::loadPrefLmScores(Voc *this, char **a2, DFileChecksums *a3)
{
  uint64_t v22 = 0;
  std::wstring::size_type v8 = (DgnStream *)OpenAndReadMrecHeader((uint64_t)a2, 0x40u, 1, "MRPRLM!?", (_DWORD *)&v22 + 1, &v22);
  if (HIDWORD(v22) == 17 && v22 == 2)
  {
    MrecHeaderCheckLatestVersionIfShared((DFile *)a2, "MRPRLM!?", 17, 2, 23, 4, v6, v7);
    unsigned int v21 = 0;
    uint64_t v14 = (void *)((char *)this + 272);
    readObject<short>(v8, (uint64_t)this + 272, &v21);
    int v20 = 0;
    readObject((uint64_t)v8, &v20, &v21);
    readObjectChecksumAndVerify(v8, v21);
    uint64_t CurrentSubDirComponents = DFile::getCurrentSubDirComponents((DFile *)a2);
    DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x40u, v21);
    DgnDelete<DgnStream>((void (***)(void))v8);
    *((unsigned char *)this + 260) = 0;
    unsigned int v16 = (void *)*((void *)this + 34);
    if (v16)
    {
      MemChunkFree(v16, 0);
      *uint64_t v14 = 0;
    }
    *((void *)this + 35) = 0;
    goto LABEL_22;
  }
  BOOL v10 = HIDWORD(v22) == 23 && v22 == 3;
  int v11 = v10;
  if (v10)
  {
    int v12 = 23;
    int v13 = 3;
  }
  else
  {
    if (*((_DWORD *)a2 + 6)) {
      uint64_t v17 = a2[2];
    }
    else {
      uint64_t v17 = (char *)&unk_2140A1D8E;
    }
    MrecHeaderCheckVersions(v17, "MRPRLM!?", HIDWORD(v22), v22, 0x17u, 4u);
    int v13 = v22;
    int v12 = HIDWORD(v22);
  }
  MrecHeaderCheckLatestVersionIfShared((DFile *)a2, "MRPRLM!?", v12, v13, 23, 4, v6, v7);
  unsigned int v21 = 0;
  readObject((uint64_t)v8, (_DWORD *)this + 66, &v21);
  uint64_t v14 = (void *)((char *)this + 272);
  readObject<short>(v8, (uint64_t)this + 272, &v21);
  int v20 = 0;
  readObjectChecksumAndVerify(v8, v21);
  uint64_t v18 = DFile::getCurrentSubDirComponents((DFile *)a2);
  DFileChecksums::addChecksum((uint64_t)a3, v18, 0x40u, v21);
  uint64_t result = DgnDelete<DgnStream>((void (***)(void))v8);
  *((unsigned char *)this + 260) = *((_DWORD *)this + 70) != 0;
  if (v11)
  {
LABEL_22:
    *((_DWORD *)this + 66) = 0;
    *((unsigned char *)this + 260) = 0;
    uint64_t result = (void *)*((void *)this + 34);
    if (result)
    {
      uint64_t result = (void *)MemChunkFree(result, 0);
      *uint64_t v14 = 0;
    }
    *((void *)this + 35) = 0;
  }
  return result;
}

void (***Voc::savePrefLmScores(Voc *this, DFile *a2, DFileChecksums *a3, int a4))(void)
{
  uint64_t v7 = OpenAndWriteMrecHeader((uint64_t)a2, 0x40u, a4, "MRPRLM!?", 23, 4);
  int v10 = 0;
  writeObject((uint64_t)v7, (int *)this + 66, &v10);
  writeObject<short>((uint64_t)v7, (uint64_t)this + 272, &v10);
  writeObjectChecksum((uint64_t)v7, &v10);
  uint64_t CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
  DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x40u, v10);
  return DgnDelete<DgnStream>((void (***)(void))v7);
}

void *Voc::loadPrefWordIdsSortedByPron(Voc *this, DFile *a2, DFileChecksums *a3)
{
  uint64_t v22 = 0;
  std::wstring::size_type v8 = (DgnStream *)OpenAndReadMrecHeader((uint64_t)a2, 0x48u, 1, "MRPRWD!?", (_DWORD *)&v22 + 1, &v22);
  int v9 = v22;
  BOOL v10 = (v22 & 0xFFFFFFFE) == 2;
  BOOL v11 = (v22 & 0xFFFFFFFE) == 2 && HIDWORD(v22) == 23;
  if (v22 == 4) {
    BOOL v10 = 1;
  }
  BOOL v12 = HIDWORD(v22) == 23 && v10;
  BOOL v13 = v22 == 2 && HIDWORD(v22) == 23;
  if (v12)
  {
    int v14 = 23;
  }
  else
  {
    if (*((_DWORD *)a2 + 6)) {
      uint64_t v15 = (char *)*((void *)a2 + 2);
    }
    else {
      uint64_t v15 = (char *)&unk_2140A1D8E;
    }
    MrecHeaderCheckVersions(v15, "MRPRWD!?", HIDWORD(v22), v22, 0x18u, 5u);
    int v9 = v22;
    int v14 = HIDWORD(v22);
  }
  MrecHeaderCheckLatestVersionIfShared(a2, "MRPRWD!?", v14, v9, 24, 5, v6, v7);
  unsigned int v21 = 0;
  if (!v13)
  {
    int v20 = 0;
    readObject((uint64_t)v8, &v20, &v21);
    int v16 = v20 - 1;
    if ((v20 - 2) >= 4) {
      int v16 = 0;
    }
    *((_DWORD *)this + 73) = v16;
  }
  if (!v12)
  {
    int v20 = 0;
    readObject((uint64_t)v8, &v20, &v21);
    int v17 = v20 - 1;
    if ((v20 - 2) >= 3) {
      int v17 = 0;
    }
    *((_DWORD *)this + 74) = v17;
  }
  readObject((uint64_t)v8, (_DWORD *)this + 75, &v21);
  readObject((uint64_t)v8, (_DWORD *)this + 76, &v21);
  if (!v13)
  {
    readObject((uint64_t)v8, (_DWORD *)this + 77, &v21);
    readObject<unsigned int,DgnArray<OpaquePelIdAndDurId>,Voc>(v8, (_DWORD *)this + 78, &v21);
    readObject<OpaquePelIdAndDurId>((uint64_t)v8, (uint64_t)this + 352, &v21);
    readObject<unsigned short>(v8, (uint64_t)this + 368, &v21);
    readObject<unsigned int>(v8, (uint64_t)this + 384, &v21);
    readObject<unsigned int>(v8, (uint64_t)this + 400, &v21);
  }
  PrefiltererWordIdPronCollArray::readObject((Voc *)((char *)this + 416), v8, &v21);
  readObjectChecksumAndVerify(v8, v21);
  uint64_t CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
  DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x48u, v21);
  uint64_t result = DgnDelete<DgnStream>((void (***)(void))v8);
  *((unsigned char *)this + 288) = 1;
  if (v11)
  {
    *((_DWORD *)this + 76) = 0;
    return Voc::notifyPrefWordIdsSortedByPronBad(this);
  }
  return result;
}

void readObject<unsigned int,DgnArray<OpaquePelIdAndDurId>,Voc>(DgnStream *a1, _DWORD *a2, unsigned int *a3)
{
  readObject((uint64_t)a1, a2, a3);
  readObject((uint64_t)a1, a2 + 1, a3);
  readObject((uint64_t)a1, a2 + 2, a3);

  readObject<unsigned int>(a1, (uint64_t)(a2 + 4), a3);
}

uint64_t readObject<OpaquePelIdAndDurId>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned int v11 = 0;
  uint64_t result = readObject(a1, &v11, a3);
  unsigned int v7 = v11;
  unsigned int v8 = *(_DWORD *)(a2 + 12);
  if (v11 <= v8)
  {
    *(_DWORD *)(a2 + 8) = v11;
    if (!v7) {
      return result;
    }
  }
  else
  {
    DgnPrimArray<unsigned int>::reallocElts(a2, v11 - v8, 0);
    *(_DWORD *)(a2 + 8) = v7;
  }
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  do
  {
    uint64_t result = readObject(a1, (unsigned __int16 *)(*(void *)a2 + v9), a3);
    ++v10;
    v9 += 4;
  }
  while (v10 < *(unsigned int *)(a2 + 8));
  return result;
}

void (***Voc::savePrefWordIdsSortedByPron(Voc *this, DFile *a2, DFileChecksums *a3, int a4))(void)
{
  unsigned int v7 = OpenAndWriteMrecHeader((uint64_t)a2, 0x48u, a4, "MRPRWD!?", 24, 5);
  unsigned int v8 = v7;
  unsigned int v9 = *((_DWORD *)this + 73);
  if (v9 < 5) {
    int v10 = v9 + 1;
  }
  else {
    int v10 = 0;
  }
  int v16 = v10;
  unsigned int v17 = 0;
  writeObject((uint64_t)v7, &v16, &v17);
  unsigned int v11 = *((_DWORD *)this + 74);
  if (v11 < 4) {
    int v12 = v11 + 1;
  }
  else {
    int v12 = 0;
  }
  int v15 = v12;
  writeObject((uint64_t)v8, &v15, &v17);
  writeObject((uint64_t)v8, (int *)this + 75, &v17);
  writeObject((uint64_t)v8, (int *)this + 76, &v17);
  writeObject((uint64_t)v8, (int *)this + 77, &v17);
  writeObject<unsigned int,DgnArray<OpaquePelIdAndDurId>,Voc>((uint64_t)v8, (int *)this + 78, &v17);
  writeObject<OpaquePelIdAndDurId>((uint64_t)v8, (uint64_t)this + 352, &v17);
  writeObject<unsigned short>((uint64_t)v8, (uint64_t)this + 368, &v17);
  writeObject<unsigned int>((uint64_t)v8, (uint64_t)this + 384, &v17);
  writeObject<unsigned int>((uint64_t)v8, (uint64_t)this + 400, &v17);
  PrefiltererWordIdPronCollArray::writeObject((Voc *)((char *)this + 416), v8, &v17);
  writeObjectChecksum((uint64_t)v8, (int *)&v17);
  uint64_t CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
  DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x48u, v17);
  return DgnDelete<DgnStream>((void (***)(void))v8);
}

uint64_t writeObject<unsigned int,DgnArray<OpaquePelIdAndDurId>,Voc>(uint64_t a1, int *a2, _DWORD *a3)
{
  int v9 = *a2;
  writeObject(a1, &v9, a3);
  int v8 = a2[1];
  writeObject(a1, &v8, a3);
  int v7 = a2[2];
  writeObject(a1, &v7, a3);
  return writeObject<unsigned int>(a1, (uint64_t)(a2 + 4), a3);
}

uint64_t writeObject<OpaquePelIdAndDurId>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v9 = *(_DWORD *)(a2 + 8);
  uint64_t result = writeObject(a1, &v9, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      uint64_t result = writeObject(a1, (unsigned __int16 *)(*(void *)a2 + v7), a3);
      ++v8;
      v7 += 4;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

void Voc::loadAndDiscardReproData(Voc *this, DFile *a2)
{
  DgnTextFileParser::DgnTextFileParser((DgnTextFileParser *)v3);
  DgnTextFileParser::openDgnTextFileParser((uint64_t)v3, (uint64_t)a2, 0x4Cu, 1);
  DgnTextFileParser::verifyMatchingFileType((DgnTextFileParser *)v3, "ReproData");
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)v3);
}

void sub_213EAD890(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)va);
  _Unwind_Resume(a1);
}

void Voc::loadAndDiscardReproResult(Voc *this, DFile *a2)
{
  DgnTextFileParser::DgnTextFileParser((DgnTextFileParser *)v6);
  DgnTextFileParser::openDgnTextFileParser((uint64_t)v6, (uint64_t)a2, 0x4Du, 1);
  DgnTextFileParser::verifyMatchingFileType((DgnTextFileParser *)v6, "ResultData");
  uint64_t FileVersion = DgnTextFile::getFileVersion((DgnTextFile *)v6);
  if (FileVersion != 19 || (HIDWORD(FileVersion) - 5) >= 7) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 692, (uint64_t)"voc/voc", 31, (uint64_t)"%s", v4, v5, (char)&errStr_voc_voc_E_RSD_PRESENT);
  }
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)v6);
}

void sub_213EAD954(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)va);
  _Unwind_Resume(a1);
}

uint64_t Voc::getVocSvcCompatibility(Voc *this, DFile *a2, DFile *a3)
{
  int v3 = (int)a3;
  if (DFile::subFileExists((uint64_t)this, 0x2Fu))
  {
    char v8 = DFile::subFileExists((uint64_t)this, 0x51u);
    char v11 = v8;
    if (a2)
    {
      int v12 = DFile::subFileExists((uint64_t)a2, 0x51u);
      if (v11) {
        goto LABEL_4;
      }
    }
    else
    {
      int v12 = 0;
      if (v8)
      {
LABEL_4:
        SvcCompatData::SvcCompatData((SvcCompatData *)&v34);
        SvcCompatData::loadSvcCompatData((SvcCompatData *)&v34, this, 0);
        if (v34 != 2)
        {
          if (v34 != 1)
          {
            if (v34)
            {
              if (v3)
              {
                if (*((_DWORD *)this + 6)) {
                  uint64_t v24 = (void *)*((void *)this + 2);
                }
                else {
                  uint64_t v24 = &unk_2140A1D8E;
                }
                errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 837, (uint64_t)"voc/voc", 18, (uint64_t)"%.500s", v13, v14, (char)v24);
              }
              goto LABEL_77;
            }
            if (a2) {
              uint64_t v15 = 3;
            }
            else {
              uint64_t v15 = 1;
            }
            if (!a2 || !v3) {
              goto LABEL_78;
            }
            if (*((_DWORD *)this + 6)) {
              int v16 = (void *)*((void *)this + 2);
            }
            else {
              int v16 = &unk_2140A1D8E;
            }
            int v27 = "%.500s %.500s";
            uint64_t v28 = 20;
            uint64_t v29 = 758;
            goto LABEL_76;
          }
          if (a2)
          {
            int v23 = v12 & v3;
            if (v12) {
              uint64_t v15 = 3;
            }
            else {
              uint64_t v15 = 4;
            }
            if (v23 != 1) {
              goto LABEL_78;
            }
            if (*((_DWORD *)this + 6)) {
              int v16 = (void *)*((void *)this + 2);
            }
            else {
              int v16 = &unk_2140A1D8E;
            }
            int v27 = "%.500s %.500s";
            uint64_t v28 = 19;
            uint64_t v29 = 781;
            goto LABEL_76;
          }
          if (v3)
          {
            uint64_t v25 = 772;
            if (!*((_DWORD *)this + 6)) {
              goto LABEL_61;
            }
            goto LABEL_58;
          }
          goto LABEL_63;
        }
        if (!a2)
        {
          if (v3)
          {
            uint64_t v25 = 795;
            if (!*((_DWORD *)this + 6))
            {
LABEL_61:
              uint64_t v26 = &unk_2140A1D8E;
              goto LABEL_62;
            }
LABEL_58:
            uint64_t v26 = (void *)*((void *)this + 2);
LABEL_62:
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", v25, (uint64_t)"voc/voc", 21, (uint64_t)"%.500s", v13, v14, (char)v26);
          }
LABEL_63:
          uint64_t v15 = 2;
LABEL_78:
          SvcCompatData::SvcCompatData((SvcCompatData *)&v34);
          return v15;
        }
        if ((v12 & 1) == 0)
        {
          if (!v3)
          {
LABEL_77:
            uint64_t v15 = 3;
            goto LABEL_78;
          }
          if (*((_DWORD *)this + 6)) {
            int v16 = (void *)*((void *)this + 2);
          }
          else {
            int v16 = &unk_2140A1D8E;
          }
          int v27 = "%.500s %.500s";
          uint64_t v28 = 19;
          uint64_t v29 = 804;
LABEL_76:
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", v29, (uint64_t)"voc/voc", v28, (uint64_t)v27, v13, v14, (char)v16);
          goto LABEL_77;
        }
        SvcCompatData::SvcCompatData((SvcCompatData *)&v32);
        SvcCompatData::loadSvcCompatData((SvcCompatData *)&v32, a2, 0);
        if (v32 == 3)
        {
          if (v35 == v33) {
            uint64_t v15 = 0;
          }
          else {
            uint64_t v15 = 3;
          }
          if (v35 == v33 || !v3) {
            goto LABEL_87;
          }
          if (*((_DWORD *)this + 6)) {
            uint64_t v22 = (void *)*((void *)this + 2);
          }
          else {
            uint64_t v22 = &unk_2140A1D8E;
          }
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 824, (uint64_t)"voc/voc", 17, (uint64_t)"%.500s %.500s", v20, v21, (char)v22);
        }
        else if (v3)
        {
          if (*((_DWORD *)a2 + 6)) {
            uint64_t v30 = (void *)*((void *)a2 + 2);
          }
          else {
            uint64_t v30 = &unk_2140A1D8E;
          }
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 814, (uint64_t)"voc/voc", 18, (uint64_t)"%.500s", v20, v21, (char)v30);
        }
        uint64_t v15 = 3;
LABEL_87:
        SvcCompatData::SvcCompatData((SvcCompatData *)&v32);
        goto LABEL_78;
      }
    }
    int v18 = v12 ^ 1;
    if (!a2) {
      int v18 = 1;
    }
    if (v18) {
      uint64_t v15 = 4;
    }
    else {
      uint64_t v15 = 3;
    }
    if ((v18 & 1) == 0 && v3)
    {
      if (*((_DWORD *)this + 6)) {
        unsigned int v19 = (void *)*((void *)this + 2);
      }
      else {
        unsigned int v19 = &unk_2140A1D8E;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 741, (uint64_t)"voc/voc", 19, (uint64_t)"%.500s %.500s", v9, v10, (char)v19);
      return 3;
    }
  }
  else
  {
    if (a2) {
      uint64_t v15 = 3;
    }
    else {
      uint64_t v15 = 1;
    }
    if (a2 && v3)
    {
      if (*((_DWORD *)this + 6)) {
        unsigned int v17 = (void *)*((void *)this + 2);
      }
      else {
        unsigned int v17 = &unk_2140A1D8E;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 715, (uint64_t)"voc/voc", 19, (uint64_t)"%.500s %.500s", v6, v7, (char)v17);
      return 3;
    }
  }
  return v15;
}

void sub_213EADDB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  SvcCompatData::SvcCompatData((SvcCompatData *)va);
  _Unwind_Resume(a1);
}

void *Voc::loadVoc(Voc *this, DFile *a2, DFile *a3, DgnSharedMemSet *a4, uint64_t a5, uint64_t a6, int a7, char a8, BOOL *a9, DFileChecksums *a10, BOOL *a11)
{
  int64x2_t v101 = 0u;
  int64x2_t v102 = 0u;
  SnapTime::recordTime((SnapTime *)&v101, 1, 1, 1, 1);
  EnvHolder::errorIfFileObviouslyIsNotOfTypeVoc(a2, v19);
  *((void *)this + 6) = 0;
  if (a8)
  {
    if (a3)
    {
      if (*((_DWORD *)a3 + 6)) {
        int v23 = (void *)*((void *)a3 + 2);
      }
      else {
        int v23 = &unk_2140A1D8E;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 866, (uint64_t)"voc/voc", 22, (uint64_t)"%.500s %.500s", v21, v22, (char)v23);
      *((void *)this + 12) = a6;
      uint64_t v24 = (void *)((char *)this + 96);
      goto LABEL_14;
    }
    *((void *)this + 12) = a6;
    uint64_t v24 = (void *)((char *)this + 96);
    if (!a6)
    {
LABEL_11:
      int v93 = 1;
      goto LABEL_17;
    }
LABEL_10:
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 872, (uint64_t)"voc/voc", 28, (uint64_t)"%lld %.500s", v21, v22, a6);
    goto LABEL_11;
  }
  Voc::getVocSvcCompatibility(a2, a3, (DFile *)1);
  *((void *)this + 12) = a6;
  uint64_t v24 = (void *)((char *)this + 96);
  if (!a3 && a6) {
    goto LABEL_10;
  }
  if (!a3) {
    goto LABEL_11;
  }
LABEL_14:
  if (a6 <= -2) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 877, (uint64_t)"voc/voc", 27, (uint64_t)"%lld %.500s %.500s", v21, v22, a6);
  }
  int v93 = 0;
LABEL_17:
  if (a7) {
    *uint64_t v24 = 0;
  }
  uint64_t WordListInTextFormat = WordList::willLoadWordListInTextFormat(a2, v20);
  if (WordListInTextFormat
    && *((_DWORD *)this + 32) != -1
    && *(_DWORD *)(DgnSharedMemSet::getSetCacheDir(*((DgnSharedMemSet **)this + 15)) + 8) <= 1u)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 884, (uint64_t)"voc/voc", 32, (uint64_t)"%s", v26, v27, (char)&errStr_voc_voc_E_VOC_UNSHARABLE);
  }
  uint64_t v28 = MemChunkAlloc(0x110uLL, 0);
  uint64_t v29 = EnvMgr::EnvMgr((EnvMgr *)v28, 2u);
  *(void *)this = v29;
  EnvMgr::loadEnvMgr(v29, a2, a10);
  uint64_t v30 = MemChunkAlloc(4uLL, 0);
  CharInfo::CharInfo((CharInfo *)v30);
  *((void *)this + 1) = v31;
  CharInfo::loadCharInfo(v31, (char **)a2, a10, WordListInTextFormat);
  int v32 = MemChunkAlloc(0x148uLL, 0);
  int v33 = CollMgr::CollMgr((CollMgr *)v32, *((const CharInfo **)this + 1));
  *((void *)this + 2) = v33;
  CollMgr::loadCollMgr(v33, (char **)a2, a10, WordListInTextFormat);
  PhnMgr::loadPhnMgr((Voc *)((char *)this + 184), (char **)a2, a10, WordListInTextFormat);
  int v34 = MemChunkAlloc(0x18uLL, 0);
  int v35 = (unsigned int **)TRegExp::TRegExp(v34, (uint64_t)this + 184);
  *((void *)this + 3) = v35;
  PronCollMgr::loadPronCollMgr(v35, (char **)a2, a10, WordListInTextFormat);
  uint64_t v36 = MemChunkAlloc(0x10uLL, 0);
  DgnString::DgnString((DgnString *)v36);
  *((void *)this + 4) = v37;
  VocCompatData::loadVocCompatData(v37, (char **)a2, a10, WordListInTextFormat);
  uint64_t v38 = MemChunkAlloc(0x290uLL, 0);
  uint64_t v39 = WordList::WordList((WordList *)v38, *((CollMgr **)this + 2), *((const PronCollMgr **)this + 3), (Voc *)((char *)this + 184));
  *((void *)this + 6) = v39;
  WordList::loadWordList(v39, a2, a10);
  DgnIOwnArray<DgnSharedMemStream *>::DgnIOwnArray((uint64_t)&v99, 1);
  if (a4)
  {
    unint64_t v40 = MemChunkAlloc(0x50uLL, 0);
    uint64_t v41 = DgnSharedMemStream::DgnSharedMemStream(v40, a4, a5, 0);
    uint64_t *v99 = v41;
  }
  BOOL v98 = 0;
  int v42 = (DFileChecksums *)*v99;
  if (*((_DWORD *)this + 32) == -1) {
    int v43 = 0;
  }
  else {
    int v43 = (DgnSharedMemStream *)(*(_DWORD *)(DgnSharedMemSet::getSetCacheDir(*((DgnSharedMemSet **)this + 15)) + 8) < 2u);
  }
  HIBYTE(v90) = a8;
  LOBYTE(v90) = a7;
  unint64_t v44 = LanguageModel::CreateAndLoadLanguageModel(a2, a3, a10, v42, v43, WordListInTextFormat, 1, 0, *(_DWORD *)(*((void *)this + 4) + 4), v88, *((const WordList **)this + 6), 0, 0xFFFFFFu, 0xFFFFFFu, v90, a9, &v98, 0);
  *((void *)this + 9) = v44;
  int v92 = a7;
  if (a4)
  {
    uint64_t v45 = 0;
  }
  else
  {
    uint64_t v45 = (*(uint64_t (**)(uint64_t *))(*v44 + 32))(v44);
    unint64_t v44 = (uint64_t *)*((void *)this + 9);
  }
  char v46 = a8;
  uint64_t v91 = a3;
  int v96 = 0;
  int v97 = 0;
  (*(void (**)(uint64_t *, int *, int *))(*v44 + 152))(v44, &v97, &v96);
  unsigned __int32 v53 = 0;
  do
  {
    v94.i32[0] = 4;
    v94.i32[1] = v53;
    DFile::pushCurrentSubDirComponent(a2, (const SubDirExtension *)&v94, v47, v48, v49, v50, v51, v52);
    if ((DFile::subFileExists((uint64_t)a2, 0x76u) & 1) != 0 || DFile::subFileExists((uint64_t)a2, 0x75u))
    {
      uint64_t v54 = MemChunkAlloc(0xB0uLL, 0);
      WordNgramTemplate::WordNgramTemplate((WordNgramTemplate *)v54, *((const WordList **)this + 6), v97, v96);
      unsigned int v55 = *((_DWORD *)this + 22);
      if (v55 == *((_DWORD *)this + 23))
      {
        DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 80, 1, 1);
        unsigned int v55 = *((_DWORD *)this + 22);
      }
      *(void *)(*((void *)this + 10) + 8 * v55) = v54;
      *((_DWORD *)this + 22) = v55 + 1;
      WordNgramTemplate::loadWordNgramTemplate(*(WordNgramTemplate **)(*((void *)this + 10) + 8 * v53), a2, a10, WordListInTextFormat);
      char v56 = 1;
    }
    else
    {
      char v56 = 0;
    }
    DFile::popCurrentSubDirComponent((uint64_t)a2);
    ++v53;
  }
  while ((v56 & 1) != 0);
  LOBYTE(v89) = *a9;
  v87[4] = *((_DWORD *)this + 22) != 0;
  *(_DWORD *)uint64_t v87 = 0xFFFFFF;
  (*(void (**)(void, void, DFile *, DFileChecksums *, uint64_t, uint64_t, void, uint64_t, BOOL *, char *, int, uint64_t, void))(**((void **)this + 9) + 48))(*((void *)this + 9), *((void *)this + 9), a2, a10, *v99, WordListInTextFormat, 0, 0xFFFFFFLL, *(BOOL **)v87, (char *)this + 80, v89, v45, *((void *)this + 12));
  if (WordListInTextFormat)
  {
    if (*((_DWORD *)a2 + 6)) {
      uint64_t v57 = (void *)*((void *)a2 + 2);
    }
    else {
      uint64_t v57 = &unk_2140A1D8E;
    }
    (*(void (**)(void, uint64_t, void *))(**((void **)this + 9) + 216))(*((void *)this + 9), 1, v57);
  }
  if (((v93 | v92) & 1) == 0 && !v98 && (v46 & 1) == 0 && !*a9) {
    FileSpec::operator=((Voc *)((char *)this + 104), (DFile *)((char *)a3 + 16));
  }
  if (v100 >= 1)
  {
    uint64_t v58 = 8 * v100 - 8;
    do
    {
      DgnDelete<DgnStream>(*(void (****)(void))((char *)v99 + v58));
      *(uint64_t *)((char *)v99 + v58) = 0;
      v58 -= 8;
    }
    while (v58 != -8);
  }
  int v100 = 0;
  if (v98 || *a9 || (v46 & 1) != 0)
  {
    if (!DFile::subFileExists((uint64_t)a2, 0x51u)) {
      goto LABEL_56;
    }
    SvcCompatData::SvcCompatData((SvcCompatData *)&v94);
    SvcCompatData::loadSvcCompatData((SvcCompatData *)&v94, a2, a10);
    goto LABEL_55;
  }
  if (!DFile::subFileExists((uint64_t)a2, 0x51u))
  {
    if (v93) {
      goto LABEL_56;
    }
    if ((DFile::subFileExists((uint64_t)v91, 0x51u) & 1) == 0)
    {
      *((_DWORD *)this + 10) = 1;
      goto LABEL_56;
    }
    if (*((_DWORD *)a2 + 6)) {
      uint64_t v81 = (void *)*((void *)a2 + 2);
    }
    else {
      uint64_t v81 = &unk_2140A1D8E;
    }
    uint64_t v85 = 1061;
    goto LABEL_102;
  }
  unint64_t v75 = (_DWORD *)((char *)this + 40);
  SvcCompatData::loadSvcCompatData((Voc *)((char *)this + 40), a2, a10);
  if ((v93 & 1) == 0)
  {
    if (DFile::subFileExists((uint64_t)v91, 0x51u))
    {
      SvcCompatData::SvcCompatData((SvcCompatData *)&v94);
      SvcCompatData::loadSvcCompatData((SvcCompatData *)&v94, v91, 0);
      if (v94.i32[0] != 3)
      {
        if (*((_DWORD *)v91 + 6)) {
          uint64_t v84 = (void *)*((void *)v91 + 2);
        }
        else {
          uint64_t v84 = &unk_2140A1D8E;
        }
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1028, (uint64_t)"voc/voc", 18, (uint64_t)"%.500s", v82, v83, (char)v84);
      }
      if (v94.i32[1] != *((_DWORD *)this + 11))
      {
        if (*((_DWORD *)a2 + 6)) {
          uint64_t v86 = (void *)*((void *)a2 + 2);
        }
        else {
          uint64_t v86 = &unk_2140A1D8E;
        }
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1032, (uint64_t)"voc/voc", 17, (uint64_t)"%.500s %.500s", v82, v83, (char)v86);
      }
LABEL_55:
      SvcCompatData::SvcCompatData((SvcCompatData *)&v94);
      goto LABEL_56;
    }
    if (*v75 == 1) {
      goto LABEL_56;
    }
    if (*((_DWORD *)a2 + 6)) {
      uint64_t v81 = (void *)*((void *)a2 + 2);
    }
    else {
      uint64_t v81 = &unk_2140A1D8E;
    }
    uint64_t v85 = 1039;
LABEL_102:
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", v85, (uint64_t)"voc/voc", 19, (uint64_t)"%.500s %.500s", v79, v80, (char)v81);
    goto LABEL_56;
  }
  if (*v75)
  {
    if (*((_DWORD *)a2 + 6)) {
      uint64_t v78 = (void *)*((void *)a2 + 2);
    }
    else {
      uint64_t v78 = &unk_2140A1D8E;
    }
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1046, (uint64_t)"voc/voc", 21, (uint64_t)"%.500s", v76, v77, (char)v78);
  }
LABEL_56:
  uint64_t v59 = MemChunkAlloc(0x300uLL, 0);
  *((void *)this + 7) = StateMgr::StateMgr((StateMgr *)v59, this);
  if (DFile::subFileExists((uint64_t)a2, 0x59u)) {
    StateMgr::loadStateMgr(*((StateMgr **)this + 7), a2, a10, WordListInTextFormat, *((unsigned __int16 *)this + 84));
  }
  uint64_t v60 = MemChunkAlloc(0x58uLL, 0);
  *((void *)this + 8) = RuleMgr::RuleMgr((RuleMgr *)v60, this);
  if (DFile::subFileExists((uint64_t)a2, 0x4Eu))
  {
    uint64_t v68 = (StateMgr *)*((void *)this + 7);
    if (!*((_DWORD *)v68 + 181)) {
      StateMgr::makeSpecialEouStateId(v68, v61, v62, v63, v64, v65, v66, v67);
    }
    RuleMgr::loadRuleMgr(*((RuleMgr **)this + 8), a2, a10, WordListInTextFormat, a11, *((unsigned __int16 *)this + 84));
  }
  if (DFile::subFileExists((uint64_t)a2, 0x40u))
  {
    if (WordListInTextFormat) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1103, (uint64_t)"voc/voc", 16, (uint64_t)"%s", v69, v70, (char)&errStr_voc_voc_E_LOADING_MIXED_TEXT_AND_BINARY_SUBFILES);
    }
    Voc::loadPrefLmScores(this, (char **)a2, a10);
  }
  if (DFile::subFileExists((uint64_t)a2, 0x48u))
  {
    if (WordListInTextFormat) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1110, (uint64_t)"voc/voc", 16, (uint64_t)"%s", v71, v72, (char)&errStr_voc_voc_E_LOADING_MIXED_TEXT_AND_BINARY_SUBFILES);
    }
    Voc::loadPrefWordIdsSortedByPron(this, a2, a10);
  }
  if ((WordListInTextFormat & 1) == 0)
  {
    *((_DWORD *)this + DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)this + 152) = 0;
    SubFileExtensionString = GetSubFileExtensionString(0x2Fu);
    *((_DWORD *)this + 152) ^= DFileChecksums::getChecksum(a10, SubFileExtensionString);
  }
  FileHistory::loadFileHistory((Voc *)((char *)this + 144), a2, WordListInTextFormat);
  int64x2_t v94 = 0u;
  int64x2_t v95 = 0u;
  SnapTime::recordTime((SnapTime *)&v94, 1, 1, 1, 1);
  int64x2_t v94 = vsubq_s64(v94, v101);
  int64x2_t v95 = vsubq_s64(v95, v102);
  FileHistory::addEntryWithElapsedTime((Voc *)((char *)this + 144), " loadVoc time: ", (const SnapTime *)&v94);
  if (*a9) {
    FileHistory::addEntry((Voc *)((char *)this + 144), " Lobotomized one or more LMs without matching static components");
  }
  if (v98) {
    FileHistory::addEntry((Voc *)((char *)this + 144), " Reabsorbed one or more static LM components into dynamic LM");
  }
  *((unsigned char *)this + 178) = WordListInTextFormat;
  return DgnIOwnArray<DgnSharedMemStream *>::releaseAll((uint64_t)&v99);
}

void sub_213EAE8C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void Voc::saveVocShared(Voc *this, DgnSharedMemSet *a2, uint64_t a3, const FileSpec *a4, uint64_t a5)
{
  DgnSharedMemStream::DgnSharedMemStream((DgnSharedMemStream *)v32, a2, a3);
  DgnSharedMemStream::openDSM((uint64_t)v32, 0, -1, v9, v10, v11, v12, v13);
  (*(void (**)(void, unsigned char *, uint64_t))(**((void **)this + 9) + 80))(*((void *)this + 9), v32, a5);
  uint64_t v21 = DgnSharedMemStream::tell((DgnSharedMemStream *)v32, v14, v15, v16, v17, v18, v19, v20);
  DgnSharedMemStream::closeDSM((uint64_t)v32);
  DgnSharedMemStream::openDSM((uint64_t)v32, 1, v21, v22, v23, v24, v25, v26);
  (*(void (**)(void, unsigned char *, uint64_t))(**((void **)this + 9) + 80))(*((void *)this + 9), v32, a5);
  DgnSharedMemStream::closeDSM((uint64_t)v32);
  if (DgnSharedMemSet::createMaybeRemapDSMEx((DSMSetData **)a2, a3, 0))
  {
    DgnSharedMemStream::openDSM((uint64_t)v32, 3, -1, v27, v28, v29, v30, v31);
    (*(void (**)(void, unsigned char *, uint64_t))(**((void **)this + 9) + 88))(*((void *)this + 9), v32, a5);
    DgnSharedMemStream::closeDSM((uint64_t)v32);
  }
  DgnSharedMemStream::~DgnSharedMemStream((DgnSharedMemStream *)v32);
}

void sub_213EAEA6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void Voc::writeVocGroupInfo(uint64_t a1, VocGroupInfo *a2, uint64_t a3)
{
  DFileOwner::DFileOwner((DFileOwner *)v7);
  uint64_t v5 = DFile::openDFile(a3, (const FileSpec *)2, 2, (uint64_t)v7);
  VocGroupInfo::saveVocGroupInfo(a2, (DFile *)v5);
  DFileOwner::setRemoveFileOnDestruction((uint64_t)v7, 0);
  DFileOwner::~DFileOwner((DFileOwner *)v7, v6);
}

void sub_213EAEAF0(_Unwind_Exception *a1, DFile **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t Voc::shouldSaveSubFilesInTextFormat(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 != 2)
    {
      if (a2 == 1
        && ((*(uint64_t (**)(void))(**(void **)(a1 + 72) + 64))(*(void *)(a1 + 72)) & 1) == 0)
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1207, (uint64_t)"voc/voc", 23, (uint64_t)"%s", v2, v3, (char)&errStr_voc_voc_E_LM_SAVE_TEXT);
      }
      return 1;
    }
    return 0;
  }
  if (!*(unsigned char *)(a1 + 178) || !*(unsigned char *)(*(void *)a1 + 264)) {
    return 0;
  }
  uint64_t v5 = *(uint64_t (**)(void))(**(void **)(a1 + 72) + 64);

  return v5();
}

void Voc::saveVoc(uint64_t a1, uint64_t a2, char **a3, _DWORD *a4, DFileChecksums *a5, uint64_t a6, DFileChecksums *a7, unsigned int a8, unsigned int a9)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  int64x2_t v49 = 0u;
  int64x2_t v50 = 0u;
  SnapTime::recordTime((SnapTime *)&v49, 1, 1, 1, 1);
  DFileOwner::DFileOwner((DFileOwner *)v48);
  DFileOwner::DFileOwner((DFileOwner *)v47);
  *a4 = 1;
  uint64_t v17 = DFile::openDFile(a2, (const FileSpec *)1, 2, (uint64_t)v48);
  if (FileSpec::isValid(a3))
  {
    if (a6) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1260, (uint64_t)"voc/voc", 26, (uint64_t)"%s", v18, v19, (char)&errStr_voc_voc_E_NO_TEXT_SVC);
    }
    uint64_t v20 = DFile::openDFile((uint64_t)a3, (const FileSpec *)1, 9, (uint64_t)v47);
  }
  else
  {
    uint64_t v20 = 0;
  }
  (*(void (**)(uint64_t *, uint64_t))(*v17 + 96))(v17, a1 + 520);
  *a4 = 2;
  DFileProgressInfo::resetReportedInfo((void **)(a1 + 520));
  EnvMgr::saveEnvMgr(*(EnvMgr **)a1, (DFile *)v17, a5, a6, (int)a7);
  CharInfo::saveCharInfo(*(CharInfo **)(a1 + 8), (DFile *)v17, a5, a6, (int)a7);
  CollMgr::saveCollMgr(*(CollMgr **)(a1 + 16), (DFile *)v17, a5, a6, (int)a7);
  PhnMgr::savePhnMgr((PhnMgr *)(a1 + 184), (DFile *)v17, a5, a6, (int)a7);
  PronCollMgr::savePronCollMgr(*(PronCollMgr **)(a1 + 24), (DFile *)v17, a5, a6, (int)a7);
  VocCompatData::saveVocCompatData(*(VocCompatData **)(a1 + 32), (DFile *)v17, a5, a6, (int)a7);
  WordList::saveWordList(*(WordList **)(a1 + 48), (DFile *)v17, a5, a6, a7);
  SvcCompatData::SvcCompatData((SvcCompatData *)v46, (const SvcCompatData *)(a1 + 40));
  if (v20)
  {
    DFileChecksums::DFileChecksums((DFileChecksums *)__str);
    uint64_t v21 = *(void *)(a1 + 72);
    uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 40))(v21);
    (*(void (**)(uint64_t, uint64_t *, uint64_t *, DFileChecksums *, char *, DFileChecksums *, uint64_t, void, unint64_t))(*(void *)v21 + 96))(v21, v17, v20, a5, __str, a7, v22, *(void *)(*(void *)(a1 + 32) + 8), __PAIR64__(a9, a8));
    v46[0] = 2;
    v46[1] = v52.i32[0];
    SvcCompatData::SvcCompatData(&v44, 3, v52.i32[0]);
    SvcCompatData::saveSvcCompatData((SvcCompatData *)&v44, (DFile *)v20, 0);
    SvcCompatData::SvcCompatData((SvcCompatData *)&v44);
    DFileChecksums::~DFileChecksums((DFileChecksums *)__str);
  }
  else
  {
    (*(void (**)(void, uint64_t *, DFileChecksums *, uint64_t, DFileChecksums *))(**(void **)(a1 + 72)
                                                                                           + 72))(*(void *)(a1 + 72), v17, a5, a6, a7);
  }
  if (*(_DWORD *)(a1 + 88))
  {
    unint64_t v29 = 0;
    do
    {
      *(_DWORD *)__str = 4;
      *(_DWORD *)&__str[4] = v29;
      DFile::pushCurrentSubDirComponent((DFile *)v17, (const SubDirExtension *)__str, v23, v24, v25, v26, v27, v28);
      WordNgramTemplate::saveWordNgramTemplate(*(WordNgramTemplate **)(*(void *)(a1 + 80) + 8 * v29), (DFile *)v17, a5, a6, (int)a7);
      DFile::popCurrentSubDirComponent((uint64_t)v17);
      ++v29;
    }
    while (v29 < *(unsigned int *)(a1 + 88));
  }
  if ((a6 & 1) == 0)
  {
    SvcCompatData::saveSvcCompatData((SvcCompatData *)v46, (DFile *)v17, a5);
    StateMgr::saveStateMgr(*(void (****)(void))(a1 + 56), (DFile *)v17, a5, 0, (int)a7, v30, v31, v32);
    RuleMgr::saveRuleMgr(*(void (****)(void))(a1 + 64), (DFile *)v17, a5, 0, (int)a7, v33, v34, v35);
    if (*(unsigned char *)(a1 + 260)) {
      Voc::savePrefLmScores((Voc *)a1, (DFile *)v17, a5, (int)a7);
    }
    if (*(unsigned char *)(a1 + 288)) {
      Voc::savePrefWordIdsSortedByPron((Voc *)a1, (DFile *)v17, a5, (int)a7);
    }
  }
  int v36 = *(_DWORD *)(a1 + 480);
  if (*(_DWORD *)(a1 + 440) | v36)
  {
    snprintf(__str, 0x64uLL, " %u words added, %u words deleted since last save", *(_DWORD *)(a1 + 440), v36);
    FileHistory::addEntry((FileHistory *)(a1 + 144), __str);
    if (*(_DWORD *)(a1 + 440))
    {
      DgnString::DgnString((DgnString *)&v44, " First added word: ");
      DgnString::operator+=(&v44, a1 + 448);
      if (v45) {
        BOOL v37 = v44;
      }
      else {
        BOOL v37 = (const char *)&unk_2140A1D8E;
      }
      FileHistory::addEntry((FileHistory *)(a1 + 144), v37);
      DgnString::operator=((DgnString *)&v44, " Last added word: ");
      DgnString::operator+=(&v44, a1 + 464);
      if (v45) {
        uint64_t v38 = v44;
      }
      else {
        uint64_t v38 = (const char *)&unk_2140A1D8E;
      }
      FileHistory::addEntry((FileHistory *)(a1 + 144), v38);
      DgnString::~DgnString((DgnString *)&v44);
    }
    if (*(_DWORD *)(a1 + 480))
    {
      DgnString::DgnString((DgnString *)&v44, " First deleted word: ");
      DgnString::operator+=(&v44, a1 + 488);
      if (v45) {
        uint64_t v39 = v44;
      }
      else {
        uint64_t v39 = (const char *)&unk_2140A1D8E;
      }
      FileHistory::addEntry((FileHistory *)(a1 + 144), v39);
      DgnString::operator=((DgnString *)&v44, " Last deleted word: ");
      DgnString::operator+=(&v44, a1 + 504);
      if (v45) {
        unint64_t v40 = v44;
      }
      else {
        unint64_t v40 = (const char *)&unk_2140A1D8E;
      }
      FileHistory::addEntry((FileHistory *)(a1 + 144), v40);
      DgnString::~DgnString((DgnString *)&v44);
    }
  }
  *(_DWORD *)(a1 + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = 0;
  *(_DWORD *)(a1 + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = 0;
  *(_DWORD *)(a1 + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = 0;
  *(_DWORD *)(a1 + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = 0;
  *(_DWORD *)(a1 + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = 0;
  *(_DWORD *)(a1 + 512) = 0;
  if (v20) {
    FileHistory::addEntry((FileHistory *)(a1 + 144), " Saved voc as static and dynamic parts");
  }
  *(_OWORD *)__str = 0u;
  int64x2_t v52 = 0u;
  SnapTime::recordTime((SnapTime *)__str, 1, 1, 1, 1);
  *(int64x2_t *)__str = vsubq_s64(*(int64x2_t *)__str, v49);
  int64x2_t v52 = vsubq_s64(v52, v50);
  uint64_t v41 = (FileHistory *)(a1 + 144);
  FileHistory::addEntryWithElapsedTime(v41, " saveVoc time: ", (const SnapTime *)__str);
  FileHistory::saveFileHistory(v41, (DFile *)v17, a6);
  DFileOwner::setRemoveFileOnDestruction((uint64_t)v48, 0);
  DFileOwner::setRemoveFileOnDestruction((uint64_t)v47, 0);
  *a4 = 0;
  SvcCompatData::SvcCompatData((SvcCompatData *)v46);
  DFileOwner::~DFileOwner((DFileOwner *)v47, v42);
  DFileOwner::~DFileOwner((DFileOwner *)v48, v43);
}

void sub_213EAF1E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  SvcCompatData::SvcCompatData((SvcCompatData *)va);
  DFileOwner::~DFileOwner((DFileOwner *)va1, v7);
  DFileOwner::~DFileOwner((DFileOwner *)va2, v8);
  _Unwind_Resume(a1);
}

void Voc::printSize(Voc *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1445, (DgnString *)&v378);
  if (v379) {
    uint64_t v16 = (void *)v378;
  }
  else {
    uint64_t v16 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_2140A1D8E, a3, &unk_2140A1D8E, v16);
  DgnString::~DgnString((DgnString *)&v378);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_2140A1D8E);
  uint64_t v21 = *(EnvMgr **)this;
  if (*(void *)this)
  {
    unint64_t v377 = 0;
    unint64_t v378 = 0;
    uint64_t v22 = (a3 + 1);
    unint64_t v376 = 0;
    EnvMgr::printSize(v21, 0xFFFFFFFFLL, v22, &v378, &v377, &v376);
    *a4 += v378;
    *a5 += v377;
    *a6 += v376;
  }
  else
  {
    uint64_t v22 = (a3 + 1);
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v23 = 4;
  }
  else {
    uint64_t v23 = 8;
  }
  uint64_t v24 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1446, (DgnString *)&v378);
  if (v379) {
    unint64_t v29 = (void *)v378;
  }
  else {
    unint64_t v29 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v25, v26, v27, v28, v22, &unk_2140A1D8E, (34 - a3), (34 - a3), v29, v23, v23, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v23;
  *a5 += v23;
  uint64_t v30 = (CharInfo *)*((void *)this + 1);
  if (v30)
  {
    unint64_t v377 = 0;
    unint64_t v378 = 0;
    unint64_t v376 = 0;
    CharInfo::printSize(v30, 0xFFFFFFFFLL, v22, &v378, &v377, &v376);
    *a4 += v378;
    *a5 += v377;
    *a6 += v376;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v31 = 4;
  }
  else {
    uint64_t v31 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1448, (DgnString *)&v378);
  if (v379) {
    int v36 = (void *)v378;
  }
  else {
    int v36 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v32, v33, v34, v35, v22, &unk_2140A1D8E, (34 - a3), (34 - a3), v36, v31, v31, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v31;
  *a5 += v31;
  BOOL v37 = (CollMgr *)*((void *)this + 2);
  if (v37)
  {
    unint64_t v377 = 0;
    unint64_t v378 = 0;
    unint64_t v376 = 0;
    CollMgr::printSize(v37, 0xFFFFFFFFLL, v22, &v378, &v377, &v376);
    *a4 += v378;
    *a5 += v377;
    *a6 += v376;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v38 = 4;
  }
  else {
    uint64_t v38 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1449, (DgnString *)&v378);
  if (v379) {
    int v43 = (void *)v378;
  }
  else {
    int v43 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v39, v40, v41, v42, v22, &unk_2140A1D8E, (34 - a3), (34 - a3), v43, v38, v38, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v38;
  *a5 += v38;
  unint64_t v44 = (PronCollMgr *)*((void *)this + 3);
  if (v44)
  {
    unint64_t v377 = 0;
    unint64_t v378 = 0;
    unint64_t v376 = 0;
    PronCollMgr::printSize(v44, 0xFFFFFFFFLL, v22, &v378, &v377, &v376);
    *a4 += v378;
    *a5 += v377;
    *a6 += v376;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v45 = 4;
  }
  else {
    uint64_t v45 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1451, (DgnString *)&v378);
  if (v379) {
    int64x2_t v50 = (void *)v378;
  }
  else {
    int64x2_t v50 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v46, v47, v48, v49, v22, &unk_2140A1D8E, (34 - a3), (34 - a3), v50, v45, v45, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v45;
  *a5 += v45;
  uint64_t v51 = (VocCompatData *)*((void *)this + 4);
  if (v51)
  {
    unint64_t v377 = 0;
    unint64_t v378 = 0;
    unint64_t v376 = 0;
    VocCompatData::printSize(v51, 0xFFFFFFFFLL, v22, &v378, &v377, &v376);
    *a4 += v378;
    *a5 += v377;
    *a6 += v376;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v52 = 4;
  }
  else {
    uint64_t v52 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1453, (DgnString *)&v378);
  if (v379) {
    uint64_t v57 = (void *)v378;
  }
  else {
    uint64_t v57 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v53, v54, v55, v56, v22, &unk_2140A1D8E, (34 - a3), (34 - a3), v57, v52, v52, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v52;
  *a5 += v52;
  uint64_t v58 = (WordList *)*((void *)this + 6);
  if (v58)
  {
    unint64_t v377 = 0;
    unint64_t v378 = 0;
    unint64_t v376 = 0;
    WordList::printSize(v58, 0xFFFFFFFFLL, v22, &v378, &v377, &v376);
    *a4 += v378;
    *a5 += v377;
    *a6 += v376;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v59 = 4;
  }
  else {
    uint64_t v59 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1455, (DgnString *)&v378);
  if (v379) {
    uint64_t v64 = (void *)v378;
  }
  else {
    uint64_t v64 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v60, v61, v62, v63, v22, &unk_2140A1D8E, (34 - a3), (34 - a3), v64, v59, v59, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v59;
  *a5 += v59;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1457, (DgnString *)&v378);
  if (v379) {
    uint64_t v69 = (void *)v378;
  }
  else {
    uint64_t v69 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v65, v66, v67, v68, v22, &unk_2140A1D8E, v22, &unk_2140A1D8E, v69);
  uint64_t v375 = a6;
  DgnString::~DgnString((DgnString *)&v378);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v70, v71, v72, v73, v22, &unk_2140A1D8E);
  unint64_t v74 = *((unsigned int *)this + 22);
  uint64_t v374 = a3;
  if (v74)
  {
    unint64_t v75 = 0;
    uint64_t v76 = 0;
    uint64_t v77 = 0;
    uint64_t v78 = 0;
    uint64_t v79 = (a3 + 2);
    do
    {
      uint64_t v80 = *((void *)this + 10);
      if (*(void *)(v80 + 8 * v75))
      {
        unint64_t v377 = 0;
        unint64_t v378 = 0;
        unint64_t v376 = 0;
        WordNgramTemplate::printSize(*(WordNgramTemplate **)(v80 + 8 * v75), v75, v79, &v378, &v377, &v376);
        v78 += v378;
        v77 += v377;
        v76 += v376;
        unint64_t v74 = *((unsigned int *)this + 22);
      }
      ++v75;
    }
    while (v75 < v74);
  }
  else
  {
    uint64_t v78 = 0;
    uint64_t v77 = 0;
    uint64_t v76 = 0;
    unint64_t v74 = 0;
  }
  uint64_t v81 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v81 = 16;
  }
  uint64_t v82 = v81 + v78;
  uint64_t v83 = v81 + v77;
  char v84 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    char v84 = 3;
  }
  uint64_t v85 = v82 + ((unint64_t)*((unsigned int *)this + 23) << v84);
  uint64_t v86 = v83 + (v74 << v84);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1457, (DgnString *)&v378);
  if (v379) {
    uint64_t v91 = (void *)v378;
  }
  else {
    uint64_t v91 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v87, v88, v89, v90, v22, &unk_2140A1D8E, v24, v24, v91, v85, v86, v76);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v85;
  *a5 += v86;
  *v375 += v76;
  int v92 = (StateMgr *)*((void *)this + 7);
  if (v92)
  {
    unint64_t v377 = 0;
    unint64_t v378 = 0;
    unint64_t v376 = 0;
    StateMgr::printSize(v92, 0xFFFFFFFFLL, v22, &v378, &v377, &v376);
    *a4 += v378;
    *a5 += v377;
    *v375 += v376;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v93 = 4;
  }
  else {
    uint64_t v93 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1459, (DgnString *)&v378);
  if (v379) {
    BOOL v98 = (void *)v378;
  }
  else {
    BOOL v98 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v94, v95, v96, v97, v22, &unk_2140A1D8E, v24, v24, v98, v93, v93, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v93;
  *a5 += v93;
  uint64_t v99 = (RuleMgr *)*((void *)this + 8);
  if (v99)
  {
    unint64_t v377 = 0;
    unint64_t v378 = 0;
    unint64_t v376 = 0;
    RuleMgr::printSize(v99, 0xFFFFFFFFLL, v22, &v378, &v377, &v376);
    *a4 += v378;
    *a5 += v377;
    *v375 += v376;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v100 = 4;
  }
  else {
    uint64_t v100 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1460, (DgnString *)&v378);
  if (v379) {
    uint64_t v105 = (void *)v378;
  }
  else {
    uint64_t v105 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v101, v102, v103, v104, v22, &unk_2140A1D8E, v24, v24, v105, v100, v100, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v100;
  *a5 += v100;
  uint64_t v106 = *((void *)this + 9);
  if (v106)
  {
    unint64_t v377 = 0;
    unint64_t v378 = 0;
    unint64_t v376 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t *, unint64_t *, unint64_t *))(*(void *)v106 + 16))(v106, 0xFFFFFFFFLL, v22, &v378, &v377, &v376);
    *a4 += v378;
    *a5 += v377;
    *v375 += v376;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v107 = 4;
  }
  else {
    uint64_t v107 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1462, (DgnString *)&v378);
  if (v379) {
    uint64_t v112 = (void *)v378;
  }
  else {
    uint64_t v112 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v108, v109, v110, v111, v22, &unk_2140A1D8E, v24, v24, v112, v107, v107, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v107;
  *a5 += v107;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1464, (DgnString *)&v378);
  if (v379) {
    uint64_t v117 = (void *)v378;
  }
  else {
    uint64_t v117 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v113, v114, v115, v116, v22, &unk_2140A1D8E, v24, v24, v117, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += 8;
  *a5 += 8;
  unint64_t v377 = 0;
  unint64_t v378 = 0;
  unint64_t v376 = 0;
  PhnMgr::printSize((Voc *)((char *)this + 184), 0xFFFFFFFFLL, v22, &v378, &v377, &v376);
  *a4 += v378;
  *a5 += v377;
  *v375 += v376;
  uint64_t v118 = FileSpec::sizeObject((uint64_t)this + 104);
  uint64_t v119 = FileSpec::sizeObject((uint64_t)this + 104);
  uint64_t v120 = FileSpec::sizeObject((uint64_t)this + 104);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1467, (DgnString *)&v378);
  if (v379) {
    uint64_t v125 = (void *)v378;
  }
  else {
    uint64_t v125 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v121, v122, v123, v124, v22, &unk_2140A1D8E, v24, v24, v125, v118, v119, v120);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v118;
  *a5 += v119;
  *v375 += v120;
  uint64_t v126 = sizeObject((uint64_t)this + 144, 0);
  uint64_t v127 = sizeObject((uint64_t)this + 144, 1);
  uint64_t v128 = sizeObject((uint64_t)this + 144, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1468, (DgnString *)&v378);
  if (v379) {
    uint64_t v133 = (void *)v378;
  }
  else {
    uint64_t v133 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v129, v130, v131, v132, v22, &unk_2140A1D8E, v24, v24, v133, v126, v127, v128);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v126;
  *a5 += v127;
  *v375 += v128;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1469, (DgnString *)&v378);
  if (v379) {
    uint64_t v138 = (void *)v378;
  }
  else {
    uint64_t v138 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v134, v135, v136, v137, v22, &unk_2140A1D8E, v24, v24, v138, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1471, (DgnString *)&v378);
  if (v379) {
    uint64_t v143 = (void *)v378;
  }
  else {
    uint64_t v143 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v139, v140, v141, v142, v22, &unk_2140A1D8E, v24, v24, v143, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1473, (DgnString *)&v378);
  if (v379) {
    uint64_t v148 = (void *)v378;
  }
  else {
    uint64_t v148 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v144, v145, v146, v147, v22, &unk_2140A1D8E, v24, v24, v148, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1475, (DgnString *)&v378);
  if (v379) {
    uint64_t v153 = (void *)v378;
  }
  else {
    uint64_t v153 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v149, v150, v151, v152, v22, &unk_2140A1D8E, v24, v24, v153, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1477, (DgnString *)&v378);
  if (v379) {
    uint64_t v158 = (void *)v378;
  }
  else {
    uint64_t v158 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v154, v155, v156, v157, v22, &unk_2140A1D8E, v24, v24, v158, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1479, (DgnString *)&v378);
  if (v379) {
    uint64_t v163 = (void *)v378;
  }
  else {
    uint64_t v163 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v159, v160, v161, v162, v22, &unk_2140A1D8E, v24, v24, v163, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1481, (DgnString *)&v378);
  if (v379) {
    uint64_t v168 = (void *)v378;
  }
  else {
    uint64_t v168 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v164, v165, v166, v167, v22, &unk_2140A1D8E, v24, v24, v168, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1483, (DgnString *)&v378);
  if (v379) {
    uint64_t v173 = (void *)v378;
  }
  else {
    uint64_t v173 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v169, v170, v171, v172, v22, &unk_2140A1D8E, v24, v24, v173, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1485, (DgnString *)&v378);
  if (v379) {
    unsigned int v178 = (void *)v378;
  }
  else {
    unsigned int v178 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v174, v175, v176, v177, v22, &unk_2140A1D8E, v24, v24, v178, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v378);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1487, (DgnString *)&v378);
  if (v379) {
    uint64_t v183 = (void *)v378;
  }
  else {
    uint64_t v183 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v179, v180, v181, v182, v22, &unk_2140A1D8E, v24, v24, v183, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v184 = 12;
  }
  else {
    uint64_t v184 = 16;
  }
  uint64_t v185 = *((unsigned int *)this + 70);
  unsigned int v186 = *((_DWORD *)this + 71);
  if (v186 >= v185)
  {
    uint64_t v187 = 0;
    if ((int)v185 > 0) {
      uint64_t v184 = (v184 | 2) + 2 * (v185 - 1);
    }
    uint64_t v188 = v184 + 2 * (v186 - v185);
  }
  else
  {
    uint64_t v187 = 2 * v185;
    uint64_t v188 = v184;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1489, (DgnString *)&v378);
  if (v379) {
    uint64_t v193 = (void *)v378;
  }
  else {
    uint64_t v193 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v189, v190, v191, v192, v22, &unk_2140A1D8E, v24, v24, v193, v188, v184, v187);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v188;
  *a5 += v184;
  *v375 += v187;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1491, (DgnString *)&v378);
  if (v379) {
    unsigned int v198 = (void *)v378;
  }
  else {
    unsigned int v198 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v194, v195, v196, v197, v22, &unk_2140A1D8E, v24, v24, v198, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v378);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1493, (DgnString *)&v378);
  if (v379) {
    unint64_t v203 = (void *)v378;
  }
  else {
    unint64_t v203 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v199, v200, v201, v202, v22, &unk_2140A1D8E, v24, v24, v203, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1495, (DgnString *)&v378);
  if (v379) {
    uint64_t v208 = (void *)v378;
  }
  else {
    uint64_t v208 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v204, v205, v206, v207, v22, &unk_2140A1D8E, v24, v24, v208, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1497, (DgnString *)&v378);
  if (v379) {
    int v213 = (void *)v378;
  }
  else {
    int v213 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v209, v210, v211, v212, v22, &unk_2140A1D8E, v24, v24, v213, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1499, (DgnString *)&v378);
  if (v379) {
    uint64_t v218 = (void *)v378;
  }
  else {
    uint64_t v218 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v214, v215, v216, v217, v22, &unk_2140A1D8E, v24, v24, v218, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1501, (DgnString *)&v378);
  if (v379) {
    unsigned int v223 = (void *)v378;
  }
  else {
    unsigned int v223 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v219, v220, v221, v222, v22, &unk_2140A1D8E, v24, v24, v223, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += 4;
  *a5 += 4;
  uint64_t v224 = 16;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v224 = 12;
  }
  uint64_t v225 = *((unsigned int *)this + 84);
  unsigned int v226 = *((_DWORD *)this + 85);
  if (v226 >= v225)
  {
    uint64_t v229 = 0;
    if ((int)v225 > 0) {
      v224 += 4 * (v225 - 1) + 4;
    }
    unsigned int v231 = v226 - v225;
    uint64_t v232 = 16;
    if (!gShadowDiagnosticShowIdealizedObjectSizes) {
      uint64_t v232 = 20;
    }
    uint64_t v228 = v232 + v224;
    uint64_t v230 = v232 + v224 + 4 * v231;
  }
  else
  {
    uint64_t v227 = 4;
    if (!gShadowDiagnosticShowIdealizedObjectSizes) {
      uint64_t v227 = 8;
    }
    uint64_t v228 = v224 + v227 + 12;
    uint64_t v229 = 4 * v225;
    uint64_t v230 = v228;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1503, (DgnString *)&v378);
  if (v379) {
    uint64_t v237 = (void *)v378;
  }
  else {
    uint64_t v237 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v233, v234, v235, v236, v22, &unk_2140A1D8E, v24, v24, v237, v230, v228, v229);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v230;
  *a5 += v228;
  *v375 += v229;
  uint64_t v238 = sizeObject<ParseToken>((uint64_t)this + 352, 0);
  uint64_t v239 = sizeObject<ParseToken>((uint64_t)this + 352, 1);
  sizeObject((uint64_t)&v378, 2);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1505, (DgnString *)&v378);
  if (v379) {
    uint64_t v244 = (void *)v378;
  }
  else {
    uint64_t v244 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v240, v241, v242, v243, v22, &unk_2140A1D8E, v24, v24, v244, v238, v239, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v238;
  *a5 += v239;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v245 = 12;
  }
  else {
    uint64_t v245 = 16;
  }
  uint64_t v246 = *((unsigned int *)this + 94);
  unsigned int v247 = *((_DWORD *)this + 95);
  if (v247 >= v246)
  {
    uint64_t v248 = 0;
    if ((int)v246 > 0) {
      uint64_t v245 = (v245 | 2) + 2 * (v246 - 1);
    }
    uint64_t v249 = v245 + 2 * (v247 - v246);
  }
  else
  {
    uint64_t v248 = 2 * v246;
    uint64_t v249 = v245;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1507, (DgnString *)&v378);
  if (v379) {
    uint64_t v254 = (void *)v378;
  }
  else {
    uint64_t v254 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v250, v251, v252, v253, v22, &unk_2140A1D8E, v24, v24, v254, v249, v245, v248);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v249;
  *a5 += v245;
  *v375 += v248;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v255 = 12;
  }
  else {
    uint64_t v255 = 16;
  }
  uint64_t v256 = *((unsigned int *)this + 98);
  unsigned int v257 = *((_DWORD *)this + 99);
  if (v257 >= v256)
  {
    uint64_t v258 = 0;
    if ((int)v256 > 0) {
      v255 += 4 * (v256 - 1) + 4;
    }
    uint64_t v259 = v255 + 4 * (v257 - v256);
  }
  else
  {
    uint64_t v258 = 4 * v256;
    uint64_t v259 = v255;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1509, (DgnString *)&v378);
  if (v379) {
    uint64_t v264 = (void *)v378;
  }
  else {
    uint64_t v264 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v260, v261, v262, v263, v22, &unk_2140A1D8E, v24, v24, v264, v259, v255, v258);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v259;
  *a5 += v255;
  *v375 += v258;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v265 = 12;
  }
  else {
    uint64_t v265 = 16;
  }
  uint64_t v266 = *((unsigned int *)this + 102);
  unsigned int v267 = *((_DWORD *)this + 103);
  if (v267 >= v266)
  {
    uint64_t v268 = 0;
    if ((int)v266 > 0) {
      v265 += 4 * (v266 - 1) + 4;
    }
    uint64_t v269 = v265 + 4 * (v267 - v266);
  }
  else
  {
    uint64_t v268 = 4 * v266;
    uint64_t v269 = v265;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1511, (DgnString *)&v378);
  if (v379) {
    uint64_t v274 = (void *)v378;
  }
  else {
    uint64_t v274 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v270, v271, v272, v273, v22, &unk_2140A1D8E, v24, v24, v274, v269, v265, v268);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v269;
  *a5 += v265;
  *v375 += v268;
  uint64_t v275 = PrefiltererWordIdPronCollArray::sizeObject((uint64_t)this + 416, 0);
  uint64_t v276 = PrefiltererWordIdPronCollArray::sizeObject((uint64_t)this + 416, 1);
  uint64_t v277 = PrefiltererWordIdPronCollArray::sizeObject((uint64_t)this + 416, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1513, (DgnString *)&v378);
  if (v379) {
    unint64_t v282 = (void *)v378;
  }
  else {
    unint64_t v282 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v278, v279, v280, v281, v22, &unk_2140A1D8E, v24, v24, v282, v275, v276, v277);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v275;
  *a5 += v276;
  *v375 += v277;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1515, (DgnString *)&v378);
  if (v379) {
    uint64_t v287 = (void *)v378;
  }
  else {
    uint64_t v287 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v283, v284, v285, v286, v22, &unk_2140A1D8E, v24, v24, v287, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v378);
  ++*a4;
  ++*a5;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v288 = 4;
  }
  else {
    uint64_t v288 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1516, (DgnString *)&v378);
  if (v379) {
    uint64_t v293 = (void *)v378;
  }
  else {
    uint64_t v293 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v289, v290, v291, v292, v22, &unk_2140A1D8E, v24, v24, v293, v288, v288, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v288;
  *a5 += v288;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1517, (DgnString *)&v378);
  if (v379) {
    uint64_t v298 = (void *)v378;
  }
  else {
    uint64_t v298 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v294, v295, v296, v297, v22, &unk_2140A1D8E, v24, v24, v298, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v299 = 4;
  }
  else {
    uint64_t v299 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1519, (DgnString *)&v378);
  if (v379) {
    uint64_t v304 = (void *)v378;
  }
  else {
    uint64_t v304 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v300, v301, v302, v303, v22, &unk_2140A1D8E, v24, v24, v304, v299, v299, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v299;
  *a5 += v299;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1521, (DgnString *)&v378);
  if (v379) {
    uint64_t v309 = (void *)v378;
  }
  else {
    uint64_t v309 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v305, v306, v307, v308, v22, &unk_2140A1D8E, v24, v24, v309, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += 4;
  *a5 += 4;
  uint64_t v310 = sizeObject((char *)this + 448);
  uint64_t v311 = sizeObject((char *)this + 448);
  uint64_t v312 = sizeObject((char *)this + 448);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1523, (DgnString *)&v378);
  if (v379) {
    uint64_t v317 = (void *)v378;
  }
  else {
    uint64_t v317 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v313, v314, v315, v316, v22, &unk_2140A1D8E, v24, v24, v317, v310, v311, v312);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v310;
  *a5 += v311;
  *v375 += v312;
  uint64_t v318 = sizeObject((char *)this + 464);
  uint64_t v319 = sizeObject((char *)this + 464);
  uint64_t v320 = sizeObject((char *)this + 464);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1525, (DgnString *)&v378);
  if (v379) {
    uint64_t v325 = (void *)v378;
  }
  else {
    uint64_t v325 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v321, v322, v323, v324, v22, &unk_2140A1D8E, v24, v24, v325, v318, v319, v320);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v318;
  *a5 += v319;
  *v375 += v320;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1527, (DgnString *)&v378);
  if (v379) {
    uint64_t v330 = (void *)v378;
  }
  else {
    uint64_t v330 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v326, v327, v328, v329, v22, &unk_2140A1D8E, v24, v24, v330, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += 4;
  *a5 += 4;
  uint64_t v331 = sizeObject((char *)this + 488);
  uint64_t v332 = sizeObject((char *)this + 488);
  uint64_t v333 = sizeObject((char *)this + 488);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1529, (DgnString *)&v378);
  if (v379) {
    uint64_t v338 = (void *)v378;
  }
  else {
    uint64_t v338 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v334, v335, v336, v337, v22, &unk_2140A1D8E, v24, v24, v338, v331, v332, v333);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v331;
  *a5 += v332;
  *v375 += v333;
  uint64_t v339 = sizeObject((char *)this + 504);
  uint64_t v340 = sizeObject((char *)this + 504);
  uint64_t v341 = sizeObject((char *)this + 504);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1531, (DgnString *)&v378);
  if (v379) {
    uint64_t v346 = (void *)v378;
  }
  else {
    uint64_t v346 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v342, v343, v344, v345, v22, &unk_2140A1D8E, v24, v24, v346, v339, v340, v341);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v339;
  *a5 += v340;
  *v375 += v341;
  uint64_t v347 = sizeObject((uint64_t)this + 520, 0);
  uint64_t v348 = sizeObject((uint64_t)this + 520, 1);
  uint64_t v349 = sizeObject((uint64_t)this + 520, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1533, (DgnString *)&v378);
  if (v379) {
    uint64_t v354 = (void *)v378;
  }
  else {
    uint64_t v354 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v350, v351, v352, v353, v22, &unk_2140A1D8E, v24, v24, v354, v347, v348, v349);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v347;
  *a5 += v348;
  *v375 += v349;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1535, (DgnString *)&v378);
  if (v379) {
    uint64_t v359 = (void *)v378;
  }
  else {
    uint64_t v359 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v355, v356, v357, v358, v22, &unk_2140A1D8E, v24, v24, v359, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += 4;
  *a5 += 4;
  uint64_t v360 = (char *)this + 40;
  uint64_t v361 = sizeObject((uint64_t)this + 40, 0);
  uint64_t v362 = sizeObject((uint64_t)v360, 1);
  uint64_t v363 = sizeObject((uint64_t)v360, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1537, (DgnString *)&v378);
  if (v379) {
    uint64_t v368 = (void *)v378;
  }
  else {
    uint64_t v368 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v364, v365, v366, v367, v22, &unk_2140A1D8E, v24, v24, v368, v361, v362, v363);
  DgnString::~DgnString((DgnString *)&v378);
  *a4 += v361;
  *a5 += v362;
  *v375 += v363;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1538, (DgnString *)&v378);
  if (v379) {
    v373 = (void *)v378;
  }
  else {
    v373 = &unk_2140A1D8E;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v369, v370, v371, v372, v374, &unk_2140A1D8E, (35 - v374), (35 - v374), v373, *a4, *a5, *v375);
  DgnString::~DgnString((DgnString *)&v378);
}

void sub_213EB11A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

DgnSharedMemSet *Voc::canUnloadCachedLM(Voc *this)
{
  uint64_t result = (DgnSharedMemSet *)*((void *)this + 15);
  if (result) {
    return (DgnSharedMemSet *)(*(_DWORD *)(DgnSharedMemSet::getSetCacheDir(result) + 8) > 1u);
  }
  return result;
}

uint64_t Voc::isPhonemeSetCompatibleWithVoc(Voc *this, const Voc *a2, int a3)
{
  if ((PhnMgr::operator==((uint64_t)this + 184, (uint64_t)a2 + 184) & 1) == 0)
  {
    if (a3) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1655, (uint64_t)"voc/voc", 25, (uint64_t)"%.500s", v6, v7, (char)"phoneme sets");
    }
    return 0;
  }
  if ((DgnArray<DgnPrimArray<BOOL>>::operator==((uint64_t *)(*((void *)this + 6) + 400), (uint64_t *)(*((void *)a2 + 6) + 400)) & 1) == 0)
  {
    if (a3) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1661, (uint64_t)"voc/voc", 25, (uint64_t)"%.500s", v8, v9, (char)"liaison seed tables");
    }
    return 0;
  }
  uint64_t result = PronCollMgr::operator==(*((void *)this + 3), *((void *)a2 + 3));
  if ((result & 1) == 0 && a3)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1666, (uint64_t)"voc/voc", 25, (uint64_t)"%.500s", v11, v12, (char)"pron collations");
    return 0;
  }
  return result;
}

unsigned int *Voc::addPrefWordIdsSortedByPron(uint64_t a1, uint64_t a2)
{
  return PrefiltererWordIdPronCollArray::addArray((unsigned int *)(a1 + 416), a2);
}

uint64_t Voc::removePrefWordIdsSortedByPron(uint64_t a1, uint64_t a2)
{
  uint64_t result = PrefiltererWordIdPronCollArray::removeArray(a1 + 416, a2);
  if (*(_DWORD *)(a1 + 376) && *(_DWORD *)(a2 + 8))
  {
    unint64_t v5 = 0;
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = *(void *)(a1 + 368);
    uint64_t v8 = *(void *)(a1 + 384);
    do
    {
      uint64_t v9 = *(unsigned int *)(v6 + 4 * v5);
      *(_WORD *)(v7 + 2 * v9) = 0;
      *(_DWORD *)(v8 + 4 * v9) = 0;
      ++v5;
    }
    while (v5 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

uint64_t Voc::notifyWordFamilyAdded(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StateMgr::addWordIdsToStatesWithId(*(StateMgr **)(a1 + 56), a3, a2, a4, a5, a6, a7, a8);
  uint64_t v12 = *(WordList **)(a1 + 48);
  uint64_t v13 = (const char *)(*((void *)v12 + 28) + *(unsigned int *)(*((void *)v12 + 25) + 4 * a2));
  uint64_t result = WordList::numAltProns(v12, v13);
  if (*(_DWORD *)(a3 + 8))
  {
    uint64_t v15 = result;
    unint64_t v16 = 0;
    do
    {
      unsigned int v17 = *(_DWORD *)(*(void *)a3 + 4 * v16);
      uint64_t result = (*(uint64_t (**)(void, void, uint64_t))(**(void **)(a1 + 72) + 360))(*(void *)(a1 + 72), v17, a4);
      if (*(_DWORD *)(a1 + 88))
      {
        unint64_t v24 = 0;
        do
          uint64_t result = WordNgramTemplate::addWord(*(void *)(*(void *)(a1 + 80) + 8 * v24++), v17, a4);
        while (v24 < *(unsigned int *)(a1 + 88));
      }
      ++v16;
      unint64_t v25 = *(unsigned int *)(a3 + 8);
    }
    while (v16 < v25);
    if (v25) {
      BOOL v26 = *(unsigned char *)(a1 + 260) == 0;
    }
    else {
      BOOL v26 = 1;
    }
    if (!v26)
    {
      unsigned int v27 = *(_DWORD *)(a1 + 264);
      if (!v27
        || (uint64_t result = StateMgr::isWordIdInState(*(StateMgr **)(a1 + 56), v27, a2, 1, v20, v21, v22, v23), result))
      {
        v36[0] = 0;
        v36[1] = 0;
        (*(void (**)(void, uint64_t, void *))(**(void **)(a1 + 72) + 520))(*(void *)(a1 + 72), a3, v36);
        unint64_t v28 = *(unsigned int *)(a3 + 8);
        if (v28)
        {
          unint64_t v29 = 0;
          unsigned int v30 = *(_DWORD *)(a1 + 280);
          do
          {
            uint64_t v31 = *(unsigned int *)(*(void *)a3 + 4 * v29);
            if (v31 >= v30)
            {
              do
              {
                if (v30 == *(_DWORD *)(a1 + 284))
                {
                  DgnPrimArray<short>::reallocElts(a1 + 272, 1, 1);
                  unsigned int v30 = *(_DWORD *)(a1 + 280);
                }
                uint64_t v32 = *(void *)(a1 + 272);
                *(_WORD *)(v32 + 2 * v30++) = 20000;
                *(_DWORD *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = v30;
              }
              while (v31 >= v30);
              unint64_t v28 = *(unsigned int *)(a3 + 8);
            }
            else
            {
              uint64_t v32 = *(void *)(a1 + 272);
            }
            *(_WORD *)(v32 + 2 * v31) = *(_WORD *)(v36[0] + 2 * v29++) + **(_WORD **)(a1 + 32);
          }
          while (v29 < v28);
        }
        uint64_t result = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v36);
      }
    }
    int v33 = *(_DWORD *)(a3 + 8);
    if (v33)
    {
      int v34 = *(_DWORD *)(a1 + 440);
      if (v34)
      {
        *(_DWORD *)(a1 + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = v34 + v33;
        if (a4 != 0xFFFFFF) {
          return DgnString::stringPrintf((DgnString *)(a1 + 464), "%.500s pron %u (cloned from %u)", v18, v19, v20, v13, (v15 + v33 - 1), a4);
        }
      }
      else
      {
        uint64_t v35 = (DgnString *)(a1 + 448);
        if (a4 != 0xFFFFFF)
        {
          DgnString::stringPrintf(v35, "%.500s pron %u (cloned from %u)", v18, v19, v20, v13, v15, a4);
          int v33 = *(_DWORD *)(a3 + 8);
          *(_DWORD *)(a1 + 440) += v33;
          return DgnString::stringPrintf((DgnString *)(a1 + 464), "%.500s pron %u (cloned from %u)", v18, v19, v20, v13, (v15 + v33 - 1), a4);
        }
        DgnString::stringPrintf(v35, "%.500s pron %u", v18, v19, v20, v13, v15);
        int v33 = *(_DWORD *)(a3 + 8);
        *(_DWORD *)(a1 + 440) += v33;
      }
      return DgnString::stringPrintf((DgnString *)(a1 + 464), "%.500s pron %u", v18, v19, v20, v13, (v15 + v33 - 1));
    }
  }
  return result;
}

void sub_213EB1708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Voc::notifyWordFamilyAboutToDeleteProns(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(unsigned char *)(result + 288))
  {
    uint64_t v8 = result;
    if (*(_WORD *)(*(void *)(*(void *)(result + 48) + 32) + 2 * a3))
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      if (*(_DWORD *)(a2 + 8))
      {
        unint64_t v10 = 0;
        do
        {
          if (StateMgr::isWordIdInState(*(StateMgr **)(v8 + 56), *(_DWORD *)(v8 + 304), *(_DWORD *)(*(void *)a2 + 4 * v10), 1, a5, a6, a7, a8))
          {
            int v11 = *(_DWORD *)(*(void *)a2 + 4 * v10);
            uint64_t v12 = v14;
            if (v14 == (unint64_t)HIDWORD(v14))
            {
              DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v13, 1, 1);
              uint64_t v12 = v14;
            }
            *(_DWORD *)(v13 + 4 * v12) = v11;
            LODWORD(v14) = v14 + 1;
          }
          ++v10;
        }
        while (v10 < *(unsigned int *)(a2 + 8));
      }
      Voc::removePrefWordIdsSortedByPron(v8, (uint64_t)&v13);
      return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v13);
    }
  }
  return result;
}

void sub_213EB17F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void Voc::notifyWordFamilyChanged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void Voc::notifyWordFamilyDeleted(uint64_t a1, unsigned int **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v7 = a3;
  unint64_t v10 = (DgnString *)(a1 + 504);
  DgnString::stringPrintf((DgnString *)(a1 + 504), "%.500s pron %u", a3, a4, a5, *(void *)(*(void *)(a1 + 48) + 224)+ *(unsigned int *)(*(void *)(*(void *)(a1 + 48) + 200) + 4 * a3), *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 104) + **a2));
  int v16 = *(_DWORD *)(a1 + 480);
  if (!v16)
  {
    DgnString::operator=((DgnString *)(a1 + 488), v10);
    int v16 = *(_DWORD *)(a1 + 480);
  }
  *(_DWORD *)(a1 + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = v16 + *((_DWORD *)a2 + 2);
  StateMgr::deleteWordIdsFromStatesWithId(*(StateMgr **)(a1 + 56), (uint64_t)a2, v7, v11, v12, v13, v14, v15);
  LODWORD(v21) = *((_DWORD *)a2 + 2);
  if (v21)
  {
    unint64_t v22 = 0;
    do
    {
      unsigned int v23 = (*a2)[v22];
      (*(void (**)(void, void, uint64_t, uint64_t))(**(void **)(a1 + 72) + 376))(*(void *)(a1 + 72), v23, a4, a5);
      if (*(_DWORD *)(a1 + 88))
      {
        unint64_t v24 = 0;
        do
          WordNgramTemplate::deleteWord(*(WordNgramTemplate **)(*(void *)(a1 + 80) + 8 * v24++), v23);
        while (v24 < *(unsigned int *)(a1 + 88));
      }
      ++v22;
      unint64_t v21 = *((unsigned int *)a2 + 2);
    }
    while (v22 < v21);
  }
  if (*(unsigned char *)(a1 + 260))
  {
    unsigned int v25 = *(_DWORD *)(a1 + 264);
    if (v25)
    {
      if (!StateMgr::isWordIdInState(*(StateMgr **)(a1 + 56), v25, v7, 1, v17, v18, v19, v20)) {
        return;
      }
      LODWORD(v21) = *((_DWORD *)a2 + 2);
    }
    if (v21)
    {
      BOOL v26 = *a2;
      uint64_t v27 = *(void *)(a1 + 272);
      unint64_t v21 = v21;
      do
      {
        unsigned int v28 = *v26++;
        *(_WORD *)(v27 + 2 * v28) = 20000;
        --v21;
      }
      while (v21);
    }
  }
}

unint64_t Voc::addPrefPicModelIdPron(unint64_t result, unsigned int a2, uint64_t *a3)
{
  unint64_t v5 = result;
  unsigned int v6 = *(_DWORD *)(result + 376);
  if (v6 <= a2)
  {
    do
    {
      if (v6 == *(_DWORD *)(v5 + 380))
      {
        uint64_t result = DgnPrimArray<short>::reallocElts(v5 + 368, 1, 1);
        unsigned int v6 = *(_DWORD *)(v5 + 376);
      }
      *(_WORD *)(*(void *)(v5 + 368) + 2 * v6) = 0;
      *(_DWORD *)(v5 + 376) = v6 + 1;
      uint64_t v8 = *(unsigned int *)(v5 + 392);
      if (v8 == *(_DWORD *)(v5 + 396))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(v5 + 384, 1, 1);
        uint64_t v8 = *(unsigned int *)(v5 + 392);
      }
      uint64_t v7 = *(void *)(v5 + 384);
      *(_DWORD *)(v7 + 4 * v8) = 0;
      ++*(_DWORD *)(v5 + 392);
      unsigned int v6 = *(_DWORD *)(v5 + 376);
    }
    while (v6 <= a2);
  }
  else
  {
    uint64_t v7 = *(void *)(result + 384);
  }
  *(_WORD *)(*(void *)(v5 + 368) + 2 * a2) = *((_DWORD *)a3 + 2);
  *(_DWORD *)(v7 + 4 * a2) = *(_DWORD *)(v5 + 408);
  int v9 = *((_DWORD *)a3 + 2);
  unsigned int v10 = *(_DWORD *)(v5 + 408) + v9;
  unsigned int v11 = *(_DWORD *)(v5 + 412);
  if (v10 > v11)
  {
    uint64_t result = DgnPrimArray<unsigned int>::reallocElts(v5 + 400, v10 - v11, 1);
    int v9 = *((_DWORD *)a3 + 2);
  }
  if (v9)
  {
    unint64_t v12 = 0;
    uint64_t v13 = *a3;
    uint64_t v14 = *(void *)(v5 + 400);
    do
    {
      *(_DWORD *)(v14 + 4 * (v12 + *(_DWORD *)(v5 + 408))) = *(_DWORD *)(v13 + 4 * v12);
      ++v12;
      unint64_t v15 = *((unsigned int *)a3 + 2);
    }
    while (v12 < v15);
  }
  else
  {
    LODWORD(v15) = 0;
  }
  *(_DWORD *)(v5 + 408) += v15;
  return result;
}

void *Voc::getPrefPicModelIdPron(void *this, unsigned int a2, const unsigned int **a3, unsigned int *a4)
{
  *a3 = (const unsigned int *)(this[50] + 4 * *(unsigned int *)(this[48] + 4 * a2));
  *a4 = *(unsigned __int16 *)(this[46] + 2 * a2);
  return this;
}

uint64_t Voc::findOrAddPrefPicModel(uint64_t a1, unsigned int *a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 360) | (a2[2] << 24);
  uint64_t v5 = HashProbeKEV<unsigned int,DgnArray<OpaquePelIdAndDurId>,Voc>::insert(a1 + 312, v4, a2);
  if (v5 == v4)
  {
    unsigned int v6 = a2[2];
    unsigned int v7 = *(_DWORD *)(a1 + 360) + v6;
    unsigned int v8 = *(_DWORD *)(a1 + 364);
    if (v7 > v8)
    {
      DgnPrimArray<unsigned int>::reallocElts(a1 + 352, v7 - v8, 1);
      unsigned int v6 = a2[2];
    }
    if (v6)
    {
      unint64_t v9 = 0;
      do
      {
        *(_DWORD *)(*(void *)(a1 + 352) + 4 * (v9 + *(_DWORD *)(a1 + 360))) = *(_DWORD *)(*(void *)a2 + 4 * v9);
        ++v9;
        unint64_t v10 = a2[2];
      }
      while (v9 < v10);
    }
    else
    {
      LODWORD(v10) = 0;
    }
    *(_DWORD *)(a1 + 360) += v10;
  }
  return v5;
}

uint64_t HashProbeKEV<unsigned int,DgnArray<OpaquePelIdAndDurId>,Voc>::insert(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  unsigned int v6 = *(_DWORD *)(a1 + 4);
  if (*(_DWORD *)a1 >= v6 >> 1) {
    HashProbeKEV<unsigned int,DgnArray<OpaquePelIdAndDurId>,Voc>::upSize(a1, 2 * v6);
  }
  uint64_t v7 = a3[2];
  if (v7)
  {
    int v8 = 0;
    unint64_t v9 = (unsigned __int16 *)(*(void *)a3 + 2);
    do
    {
      HIDWORD(v10) = v8;
      LODWORD(v10) = v8;
      int v11 = (v10 >> 19) + *(v9 - 1);
      int v12 = *v9;
      v9 += 2;
      HIDWORD(v10) = v11;
      LODWORD(v10) = v11;
      int v8 = (v10 >> 19) + v12;
      --v7;
    }
    while (v7);
    LODWORD(v7) = -1640531527 * v8;
  }
  int v13 = *(_DWORD *)(a1 + 8);
  unsigned int v14 = v7 >> -(char)v13;
  if (v13) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = *(void *)(a1 + 16);
  unsigned int v17 = *(_DWORD *)(v16 + 4 * v15);
  if (v17 == -1)
  {
LABEL_18:
    uint64_t v19 = (unsigned int *)(v16 + 4 * v15);
    *uint64_t v19 = a2;
    ++*(_DWORD *)a1;
    return *v19;
  }
  if (!Voc::equalKeys(*(void *)(a1 + 32), v17, (unsigned __int16 **)a3))
  {
    do
    {
      uint64_t v15 = v15 + 1 == *(_DWORD *)(a1 + 4) ? 0 : (v15 + 1);
      uint64_t v16 = *(void *)(a1 + 16);
      unsigned int v18 = *(_DWORD *)(v16 + 4 * v15);
      if (v18 == -1) {
        goto LABEL_18;
      }
    }
    while (!Voc::equalKeys(*(void *)(a1 + 32), v18, (unsigned __int16 **)a3));
  }
  uint64_t v19 = (unsigned int *)(*(void *)(a1 + 16) + 4 * v15);
  return *v19;
}

void Voc::deleteWordsFromWordList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v9 = 0;
  WordList::deleteWords(*(EnvMgr ***)(a1 + 48), a2, &v9, a4, a5, a6, a7, a8);
  if (v9) {
    (*(void (**)(void))(**(void **)(a1 + 72) + 400))(*(void *)(a1 + 72));
  }
}

void Voc::verifyCanDeleteWords(Voc *this, char a2)
{
  if ((*(unsigned int (**)(void))(**((void **)this + 9) + 192))(*((void *)this + 9))) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 1970, (uint64_t)"voc/voc", 2, (uint64_t)"%d %.500s %d", v3, v4, a2);
  }
}

uint64_t Voc::deleteWordIdArrayFamily(Voc *a1, uint64_t a2, void *a3)
{
  Voc::verifyCanDeleteWords(a1, **(_DWORD **)a2);
  uint64_t v12 = *(unsigned int *)(a2 + 8);
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  unint64_t v24 = 0;
  uint64_t v25 = 0;
  __int16 v23 = 0;
  if (v12)
  {
    unsigned int v13 = 0;
    uint64_t v14 = 0;
    while (1)
    {
      uint64_t v15 = *(unsigned int *)(*a3 + 16 * v14 + 8);
      if (HIDWORD(v25) < v15) {
        break;
      }
      LODWORD(v25) = *(_DWORD *)(*a3 + 16 * v14 + 8);
      if (v15) {
        goto LABEL_6;
      }
LABEL_8:
      Voc::notifyWordFamilyAboutToDeleteProns((uint64_t)a1, (uint64_t)&v24, *(_DWORD *)(*(void *)a2 + 4 * v14), v7, v8, v9, v10, v11);
      Voc::notifyWordFamilyDeleted((uint64_t)a1, (unsigned int **)&v24, *(unsigned int *)(*(void *)a2 + 4 * v14), (uint64_t)&v23 + 1, (uint64_t)&v23);
      unsigned int v13 = v25;
      if ((v27 + v25) > HIDWORD(v27))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v26, (v27 + v25 - HIDWORD(v27)), 1);
        unsigned int v13 = v25;
      }
      if (v13)
      {
        unint64_t v19 = 0;
        uint64_t v20 = v24;
        uint64_t v21 = v26;
        do
        {
          *(_DWORD *)(v21 + 4 * (v19 + v27)) = v20[v19];
          ++v19;
        }
        while (v19 < v25);
        unsigned int v13 = v25;
      }
      LODWORD(v27) = v27 + v13;
      if (++v14 == v12) {
        goto LABEL_15;
      }
    }
    unsigned int v28 = 0;
    unint64_t v16 = realloc_array(v24, &v28, 4 * v15, 4 * v13, 4 * v13, 1);
    unint64_t v24 = v28;
    LODWORD(v25) = v15;
    HIDWORD(v25) = v16 >> 2;
LABEL_6:
    uint64_t v17 = *(void *)(*a3 + 16 * v14);
    unsigned int v18 = v24;
    do
      *v18++ = *(_DWORD *)(v17 + 4 * --v15);
    while (v15);
    goto LABEL_8;
  }
LABEL_15:
  Voc::deleteWordsFromWordList((uint64_t)a1, (uint64_t)&v26, v6, v7, v8, v9, v10, v11);
  if (HIBYTE(v23)) {
    (*(void (**)(void *))(**((void **)a1 + 9) + 384))(*((void **)a1 + 9));
  }
  if ((_BYTE)v23) {
    (*(void (**)(void *))(**((void **)a1 + 9) + 392))(*((void **)a1 + 9));
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v24);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v26);
}

void sub_213EB200C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t Voc::createWord(Voc *this, char *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a2 || !*a2) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 2020, (uint64_t)"voc/voc", 15, (uint64_t)"%s", a7, a8, (char)&errStr_voc_voc_E_BAD_WORDNAME);
  }
  if (WordList::lookupWord(*((WordList **)this + 6), a2) != 0xFFFFFF) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/voc.cpp", 2023, (uint64_t)"voc/voc", 5, (uint64_t)"%d %.500s", v12, v13, *((_WORD *)this + 84));
  }
  uint64_t v14 = WordList::addWord(*((WordList **)this + 6), (CharInfo *)a2, 1, 1, 1, a4);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v20, 1, 1);
  *(_DWORD *)(v20 + 4 * v21) = v14;
  LODWORD(v21) = v21 + 1;
  Voc::notifyWordFamilyAdded((uint64_t)this, v14, (uint64_t)&v20, a3, v15, v16, v17, v18);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v20);
  return v14;
}

void sub_213EB215C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Voc::addClientPronsAvoidDuplicates(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t *a5, void *a6, void *a7, int a8, uint64_t a9, uint64_t a10)
{
  *(_DWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a4 + 8) = 0;
  return WordList::addClientPronsAvoidDuplicates(*(uint64_t **)(a1 + 48), a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t Voc::deleteWordClientProns(WordList **a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WordList::verifyModifiable(a1[6], a2, a3, a4, a5, a6, a7, a8);
  uint64_t v12 = (uint64_t *)a1[6];
  uint64_t v13 = v12[28] + *(unsigned int *)(v12[25] + 4 * a2);
  v36[0] = 0;
  v36[1] = 0;
  WordList::lookupAllClientAddedProns(v12, v13, (uint64_t)v36);
  Voc::notifyWordFamilyAboutToDeleteProns((uint64_t)a1, (uint64_t)v36, a2, v14, v15, v16, v17, v18);
  WordList::deleteWordClientProns((uint64_t)a1[6], a2, (uint64_t)v36, a3, a4, v19, v20, v21);
  if (*(_DWORD *)(a4 + 8))
  {
    Voc::verifyCanDeleteWords((Voc *)a1, a2);
    __int16 v35 = 0;
    Voc::notifyWordFamilyDeleted((uint64_t)a1, (unsigned int **)a4, a2, (uint64_t)&v35 + 1, (uint64_t)&v35);
    Voc::deleteWordsFromWordList((uint64_t)a1, a4, v28, v29, v30, v31, v32, v33);
  }
  if (*(_DWORD *)(a3 + 8)) {
    StateMgr::notifyPronsChanged(a1[7], a3, v22, v23, v24, v25, v26, v27);
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v36);
}

void sub_213EB226C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Voc::getVocReferringLatticeRefCount(Voc *this)
{
  return *((unsigned __int16 *)this + 85);
}

uint64_t Voc::addVocReferringPrefilterResultRef(uint64_t this)
{
  return this;
}

uint64_t Voc::removeVocReferringPrefilterResultRef(uint64_t this)
{
  return this;
}

uint64_t Voc::getVocReferringPrefilterResultRefCount(Voc *this)
{
  return *((unsigned __int16 *)this + 86);
}

uint64_t Voc::addVocReferringSausageRef(uint64_t this)
{
  return this;
}

uint64_t Voc::removeVocReferringSausageRef(uint64_t this)
{
  return this;
}

uint64_t Voc::getVocReferringSausageRefCount(Voc *this)
{
  return *((unsigned __int16 *)this + 87);
}

uint64_t Voc::getVocReferringReproRefCount(Voc *this)
{
  return *((unsigned __int16 *)this + 88);
}

uint64_t Voc::getPics(uint64_t a1, _DWORD *a2, unsigned int a3, __int16 *a4, _WORD *a5, char a6, unsigned int *a7)
{
  uint64_t v8 = a2;
  uint64_t result = *a2 & 0xFFFFFF;
  LOWORD(v11) = a4[1];
  __int16 v12 = *a4;
  LOWORD(v13) = *a5;
  __int16 v14 = a5[1];
  uint64_t v15 = *(void **)(a1 + 48);
  unsigned int v16 = *(unsigned __int16 *)(v15[4] + 2 * result);
  uint64_t v17 = (__int16 *)(v15[9] + 2 * *(unsigned int *)(v15[6] + 4 * result));
  uint64_t v18 = a3;
  __int16 v19 = *a5;
  unsigned int v20 = v16;
  switch(a3)
  {
    case 0u:
      goto LABEL_13;
    case 1u:
      __int16 v19 = v17[v16 - 1];
      LOWORD(v11) = v12;
      __int16 v21 = *v17++;
      __int16 v12 = v21;
      unsigned int v20 = v16 - 2;
      goto LABEL_7;
    case 2u:
      if (v16 < 2) {
        goto LABEL_12;
      }
      if (v16 != 2) {
        LOWORD(v13) = v17[2];
      }
      __int16 v19 = v17[1];
      unsigned int v20 = 1;
LABEL_7:
      __int16 v14 = v13;
      goto LABEL_13;
    case 3u:
      v17 += v16 - 1;
      if (v16 >= 2)
      {
        if (v16 != 2) {
          __int16 v12 = *(v17 - 2);
        }
        LOWORD(v11) = v12;
        __int16 v12 = *(v17 - 1);
      }
LABEL_12:
      unsigned int v20 = 1;
      __int16 v19 = *a5;
LABEL_13:
      __int16 v22 = *v17;
      unsigned int v23 = a7[3];
      if (v20 > v23)
      {
        uint64_t v49 = *a2 & 0xFFFFFF;
        unsigned int v48 = a3;
        uint64_t v46 = a3;
        uint64_t v44 = a1;
        uint64_t v45 = v17;
        char v24 = a6;
        unsigned int v25 = v20;
        __int16 v26 = v11;
        DgnArray<RuleDesc>::reallocElts((uint64_t)a7, v20 - v23, 0);
        LOWORD(v11) = v26;
        unsigned int v20 = v25;
        a1 = v44;
        uint64_t v17 = v45;
        uint64_t v18 = v46;
        uint64_t v8 = a2;
        a6 = v24;
        uint64_t result = v49;
        a3 = v48;
      }
      uint64_t v27 = a7[2];
      if (v27 < v20)
      {
        uint64_t v28 = v20 - v27;
        uint64_t v29 = 12 * v27;
        do
        {
          uint64_t v30 = *(void *)a7 + v29;
          *(void *)uint64_t v30 = -1;
          *(_DWORD *)(v30 + 8) = 0xFFFF;
          v29 += 12;
          --v28;
        }
        while (v28);
      }
      a7[2] = v20;
      if (v20 < 2)
      {
        LOWORD(v13) = v19;
        __int16 v31 = v19;
LABEL_24:
        __int16 v19 = v14;
      }
      else
      {
        __int16 v31 = v17[1];
        LOWORD(v13) = v19;
        if (v20 != 2) {
          __int16 v19 = v17[2];
        }
      }
      uint64_t v32 = *(_WORD **)a7;
      *uint64_t v32 = v11;
      v32[1] = v12;
      v32[2] = v22;
      v32[3] = v31;
      v32[4] = v19;
      v32[5] = 0;
      if (v20 >= 2)
      {
        uint64_t v33 = 12;
        unsigned int v11 = 3;
        do
        {
          __int16 v34 = v12;
          __int16 v12 = v22;
          __int16 v22 = v31;
          __int16 v31 = v19;
          __int16 v19 = v13;
          if (12 * (v20 - 2) != v33)
          {
            __int16 v19 = v14;
            if (12 * (v20 - 1) != v33) {
              __int16 v19 = v17[v11];
            }
          }
          __int16 v35 = (_WORD *)(*(void *)a7 + v33);
          *__int16 v35 = v34;
          v35[1] = v12;
          void v35[2] = v22;
          v35[3] = v31;
          v35[4] = v19;
          v35[5] = 0;
          ++v11;
          v33 += 12;
        }
        while (12 * v20 != v33);
      }
      if ((a6 & 1) != 0 || (uint64_t v36 = v8[2], !v36))
      {
        int v13 = 1;
        BOOL v38 = 1;
      }
      else
      {
        uint64_t v37 = *(void *)(a1 + 56);
        int v13 = *(unsigned char *)(*(void *)(v37 + 352) + v36) != 0;
        BOOL v38 = *(unsigned __int8 *)(*(void *)(v37 + 368) + v36) != 0;
      }
      if (a3 <= 3)
      {
        switch(a3)
        {
          case 0u:
            if (v13) {
              *(unsigned char *)(*(void *)a7 + 10) = 1;
            }
            if (v38) {
              *(unsigned char *)(*(void *)a7 + 12 * (v20 - 1) + 11) = 1;
            }
            goto LABEL_53;
          case 1u:
            --v20;
LABEL_53:
            if (v20 > a3)
            {
              uint64_t v41 = 0;
              uint64_t v42 = 11;
              do
              {
                unsigned int v43 = v18 + v41 + *(_DWORD *)(v15[6] + 4 * result);
                if ((*(_DWORD *)(v15[11] + 4 * (v43 >> 5)) >> v43))
                {
                  if (v38) {
                    *(unsigned char *)(*(void *)a7 + v42) = 1;
                  }
                  if (v13) {
                    *(unsigned char *)(*(void *)a7 + 12 * (v41 + 1) + 10) = 1;
                  }
                }
                v42 += 12;
                ++v41;
              }
              while (v18 - v20 + v41);
            }
            break;
          case 2u:
            if (v13) {
              *(unsigned char *)(*(void *)a7 + 10) = 1;
            }
            if (v38)
            {
              unint64_t v39 = *(unsigned int *)(v15[6] + 4 * result);
              if ((*(_DWORD *)(v15[11] + ((v39 >> 3) & 0x1FFFFFFC)) >> v39)) {
                *(unsigned char *)(*(void *)a7 + 11) = 1;
              }
            }
            break;
          case 3u:
            if (v38) {
              *(unsigned char *)(*(void *)a7 + 11) = 1;
            }
            if (v13)
            {
              if (v16 == 1
                || (unsigned int v40 = v16 + *(_DWORD *)(v15[6] + 4 * result) - 2,
                    ((*(_DWORD *)(v15[11] + 4 * (v40 >> 5)) >> v40) & 1) != 0))
              {
                *(unsigned char *)(*(void *)a7 + 10) = 1;
              }
            }
            break;
          default:
            goto LABEL_23;
        }
      }
      return result;
    default:
LABEL_23:
      unsigned int v20 = 0;
      __int16 v22 = *v17;
      a7[2] = 0;
      __int16 v31 = v13;
      goto LABEL_24;
  }
}

uint64_t HashProbeKEV<unsigned int,DgnArray<OpaquePelIdAndDurId>,Voc>::HashProbeKEV(uint64_t a1, const char *a2, int a3)
{
  HashProbeBase::HashProbeBase((HashProbeBase *)a1, a2);
  *(void *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
  *(void *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = 0;
  int v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 8));
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = v6;
  HashProbeKEV<unsigned int,DgnArray<OpaquePelIdAndDurId>,Voc>::initBuckets((_DWORD *)a1);
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
  return a1;
}

void sub_213EB2790(_Unwind_Exception *a1)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

_DWORD *HashProbeKEV<unsigned int,DgnArray<OpaquePelIdAndDurId>,Voc>::initBuckets(_DWORD *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (uint64_t *)(result + 4);
  unsigned int v3 = result[1];
  unsigned int v4 = result[7];
  if (v3 <= v4)
  {
    result[6] = v3;
    uint64_t v5 = result + 6;
    if (!v3) {
      return result;
    }
  }
  else
  {
    uint64_t result = (_DWORD *)DgnPrimArray<unsigned int>::reallocElts((uint64_t)(result + 4), v3 - v4, 0);
    v1[6] = v3;
    uint64_t v5 = v1 + 6;
  }
  unint64_t v6 = 0;
  uint64_t v7 = *v2;
  do
    *(_DWORD *)(v7 + 4 * v6++) = -1;
  while (v6 < *v5);
  return result;
}

void *DgnIOwnArray<WordNgramTemplate *>::releaseAll(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<WordNgramTemplate>(*(void *)(*(void *)a1 + v3));
      *(void *)(*(void *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  uint64_t result = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

uint64_t DgnDelete<WordNgramTemplate>(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    DgnPrimArray<unsigned int>::~DgnPrimArray(result + 144);
    Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::~Hash((uint64_t)(v1 + 4));
    return MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::~Hash(uint64_t a1)
{
  *(void *)a1 = &unk_26C4E4790;
  if (*(_DWORD *)(a1 + 8)) {
    Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::removeAll(a1);
  }
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));

  return MrecInitModule_sdpres_sdapi();
}

uint64_t Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::removeAll(uint64_t result)
{
  uint64_t v1 = result;
  unint64_t v2 = *(unsigned int *)(result + 88);
  if (v2)
  {
    for (unint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = *(void *)(v1 + 80);
      uint64_t v5 = *(char **)(v4 + 8 * i);
      if (v5)
      {
        do
        {
          unint64_t v6 = *(char **)v5;
          uint64_t v7 = *(uint64_t (**)(char *))(v1 + 96);
          if (v7) {
            uint64_t result = v7(v5 + 12);
          }
          uint64_t v8 = *(uint64_t (**)(void *))(v1 + 104);
          if (v8) {
            uint64_t result = v8((void *)v5 + 2);
          }
          *(void *)uint64_t v5 = *(void *)(v1 + 32);
          *(void *)(v1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v5;
          uint64_t v5 = v6;
        }
        while (v6);
        uint64_t v4 = *(void *)(v1 + 80);
        unint64_t v2 = *(unsigned int *)(v1 + 88);
      }
      *(void *)(v4 + 8 * i) = 0;
    }
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

void Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::~Hash(uint64_t a1)
{
  Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::~Hash(a1);

  JUMPOUT(0x216698730);
}

uint64_t HashProbeKEV<unsigned int,DgnArray<OpaquePelIdAndDurId>,Voc>::upSize(uint64_t a1, int a2)
{
  unsigned int v16 = 0;
  RoundUpToPowerOf2(a2, &v16);
  uint64_t v4 = (uint64_t *)(a1 + 16);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  DgnPrimArray<int>::copyArraySlice((unint64_t)&v14, (uint64_t *)(a1 + 16), 0, *(_DWORD *)(a1 + 24));
  uint64_t v5 = *(void **)(a1 + 16);
  if (v5)
  {
    MemChunkFree(v5, 0);
    uint64_t *v4 = 0;
  }
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = 0;
  unsigned int v6 = v16;
  *(_DWORD *)(a1 + 4) = a2;
  *(_DWORD *)(a1 + 8) = v6;
  HashProbeKEV<unsigned int,DgnArray<OpaquePelIdAndDurId>,Voc>::initBuckets((_DWORD *)a1);
  unint64_t v7 = v15;
  if (v15)
  {
    unint64_t v8 = 0;
    do
    {
      int v9 = *(_DWORD *)(v14 + 4 * v8);
      if (v9 != -1)
      {
        int v10 = Voc::computeHash(*(void *)(a1 + 32), *(_DWORD *)(v14 + 4 * v8));
        if (v16) {
          uint64_t v11 = (-1640531527 * v10) >> -(char)v16;
        }
        else {
          uint64_t v11 = 0;
        }
        uint64_t v12 = *v4;
        while (*(_DWORD *)(v12 + 4 * v11) != -1)
        {
          if (v11 + 1 == *(_DWORD *)(a1 + 4)) {
            uint64_t v11 = 0;
          }
          else {
            uint64_t v11 = (v11 + 1);
          }
        }
        *(_DWORD *)(v12 + 4 * v11) = v9;
        unint64_t v7 = v15;
      }
      ++v8;
    }
    while (v8 < v7);
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v14);
}

void sub_213EB2B44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL Voc::equalKeys(uint64_t a1, unsigned int a2, unsigned __int16 **a3)
{
  unint64_t v3 = HIBYTE(a2);
  if (v3 != *((_DWORD *)a3 + 2)) {
    return 0;
  }
  if (!v3) {
    return 1;
  }
  uint64_t v5 = *(void *)(a1 + 352);
  unsigned int v6 = *a3;
  uint64_t v7 = v3 <= 1 ? 1 : v3;
  if (*(unsigned __int16 *)(v5 + 4 * (a2 & 0xFFFFFF)) != *v6) {
    return 0;
  }
  BOOL v4 = 0;
  unint64_t v8 = v6 + 2;
  int v9 = (unsigned __int16 *)(v5 + 4 * (a2 & 0xFFFFFF) + 4);
  unint64_t v10 = 1;
  do
  {
    if (*(v9 - 1) != *(v8 - 1)) {
      break;
    }
    BOOL v4 = v10 >= v3;
    if (v7 == v10) {
      break;
    }
    int v12 = *v9;
    v9 += 2;
    int v11 = v12;
    int v13 = *v8;
    v8 += 2;
    ++v10;
  }
  while (v11 == v13);
  return v4;
}

uint64_t Voc::computeHash(uint64_t this, unsigned int a2)
{
  if (!HIBYTE(a2)) {
    return 0;
  }
  uint64_t v2 = this;
  LODWORD(this) = 0;
  unint64_t v3 = a2 & 0xFFFFFF;
  unint64_t v4 = v3 + HIBYTE(a2);
  uint64_t v5 = (unsigned __int16 *)(*(void *)(v2 + 352) + 4 * v3 + 2);
  do
  {
    HIDWORD(v6) = this;
    LODWORD(v6) = this;
    int v7 = (v6 >> 19) + *(v5 - 1);
    int v8 = *v5;
    v5 += 2;
    HIDWORD(v6) = v7;
    LODWORD(v6) = v7;
    this = (v6 >> 19) + v8;
    ++v3;
  }
  while (v3 < v4);
  return this;
}

uint64_t *TransducerGrammarMgr::startupTransducerGrammarMgr(uint64_t a1)
{
  uint64_t result = MemChunkAlloc(8uLL, 0);
  *uint64_t result = a1;
  TransducerGrammarMgr::smpTransducerGrammarMgr = (uint64_t)result;
  return result;
}

void TransducerGrammarMgr::printSize(TransducerGrammarMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/trgrmmgr.cpp", 67, (DgnString *)&v31);
  if (v32) {
    uint64_t v15 = v31;
  }
  else {
    uint64_t v15 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v11, v12, v13, v14, a3, &byte_2140B33BB, a3, &byte_2140B33BB, v15);
  DgnString::~DgnString((DgnString *)&v31);
  if (a2 != -1) {
    xlprintf("%d ", v16, v17, v18, v19, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v16, v17, v18, v19, a3, &byte_2140B33BB);
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v20 = 4;
  }
  else {
    uint64_t v20 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/trgrmmgr.cpp", 69, (DgnString *)&v31);
  if (v32) {
    unsigned int v25 = v31;
  }
  else {
    unsigned int v25 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v21, v22, v23, v24, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v25, v20, v20, 0);
  DgnString::~DgnString((DgnString *)&v31);
  *a4 += v20;
  *a5 += v20;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/trgrmmgr.cpp", 71, (DgnString *)&v31);
  if (v32) {
    uint64_t v30 = v31;
  }
  else {
    uint64_t v30 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v26, v27, v28, v29, a3, &byte_2140B33BB, (35 - a3), (35 - a3), v30, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v31);
}

void sub_213EB2E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void OnePhonemeSyncNet::~OnePhonemeSyncNet(OnePhonemeSyncNet *this)
{
  *(void *)this = &unk_26C4E1698;
  HmmNet::deleteInPorts((uint64_t)this);

  BaseSyncNet::~BaseSyncNet(this, v2);
}

{
  uint64_t vars8;

  OnePhonemeSyncNet::~OnePhonemeSyncNet(this);

  JUMPOUT(0x216698730);
}

uint64_t OnePhonemeSyncNet::sizeObject(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v4 = BaseSyncNet::sizeObject(a1, a2);
  unint64_t v5 = *(unsigned int *)(a1 + 64);
  if (v5)
  {
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t v7 = *(void *)(*(void *)(a1 + 56) + 8 * i);
      if (v7)
      {
        v4 += sizeObject(v7, v2);
        unint64_t v5 = *(unsigned int *)(a1 + 64);
      }
    }
  }
  return v4;
}

uint64_t OnePhonemeSyncNet::attachInPort(uint64_t result, unsigned int a2, uint64_t a3)
{
  *(void *)(*(void *)(result + 56) + 8 * a2) = a3;
  return result;
}

double OnePhonemeSyncNet::addEpsilonNode(OnePhonemeSyncNet *this)
{
  uint64_t v1 = MemChunkAlloc(0x18uLL, 0);
  *(void *)&double result = 0x100000001;
  *uint64_t v1 = 0x100000001;
  *((_DWORD *)v1 + 2) = 1310740000;
  *(uint64_t *)((char *)v1 + 12) = 0;
  *((_DWORD *)v1 + 5) = -65536;
  return result;
}

uint64_t OnePhonemeSyncNet::scoreNetInternal(OnePhonemeSyncNet *this, int a2, int a3, int a4, int a5, int a6)
{
  int v8 = *((_DWORD *)this + 26);
  unsigned int v44 = 0;
  int v43 = *((_DWORD *)this + 38);
  if (v8) {
    BOOL v9 = *((_DWORD *)this + 71) <= a3;
  }
  else {
    BOOL v9 = 0;
  }
  *((unsigned char *)this + 282) = v9;
  *((_DWORD *)this + 71) = 20000;
  int v10 = BaseSyncNet::scoreIntSilNode1<false>((uint64_t)this, v9, *((unsigned __int8 *)this + 114), a3, a4, a5, a6, &v44);
  int v11 = v10;
  if (v10 != 20000)
  {
    uint64_t v12 = **((void **)this + 9);
    uint64_t v13 = *(_DWORD **)(v12 + 16);
    *(_WORD *)(v12 + 8) = v10;
    *(_DWORD *)uint64_t v12 = *v13;
    *(_DWORD *)(v12 + 4) = v13[1];
  }
  if (*((unsigned char *)this + 282))
  {
    uint64_t v15 = *((void *)this + 26);
    uint64_t v14 = (uint64_t *)*((void *)this + 27);
    int v16 = *((_DWORD *)this + 56);
    uint64_t v17 = (uint64_t (*)(void *))*((void *)this + 25);
    uint64_t v18 = *((void *)this + 1);
    unsigned __int16 v19 = -25056;
    goto LABEL_10;
  }
  if (*((unsigned char *)this + 112))
  {
    uint64_t v14 = (uint64_t *)*((void *)this + 27);
    int v16 = *((_DWORD *)this + 56);
    uint64_t v17 = (uint64_t (*)(void *))*((void *)this + 23);
    uint64_t v15 = *((void *)this + 24);
    uint64_t v18 = *((void *)this + 1);
    unsigned __int16 v19 = -25052;
LABEL_10:
    *(_DWORD *)(v18 + (v19 | 0x40000u)) += v16;
    uint64_t v41 = v17;
    uint64_t v42 = v17;
    do
    {
      uint64_t v20 = *v14++;
      uint64_t v21 = (void *)(v20 + (v15 >> 1));
      if (v15) {
        uint64_t v22 = *(uint64_t (**)(void *))(*v21 + v41);
      }
      else {
        uint64_t v22 = v42;
      }
      int v23 = v22(v21);
      if (v23 < *((_DWORD *)this + 71)) {
        *((_DWORD *)this + 71) = v23;
      }
      --v16;
    }
    while (v16);
    *((unsigned char *)this + 281) = 1;
    uint64_t v24 = *((unsigned int *)this + 20);
    if (*((unsigned char *)this + 114))
    {
      if ((int)v24 >= 1)
      {
        unint64_t v25 = v24 + 1;
        do
        {
          uint64_t v26 = *(void *)(*((void *)this + 9) + 8 * (v25 - 2));
          uint64_t v27 = *((void *)this + 1) + 302936;
          int v45 = 0;
          BestPredWithTrace = PredStruct::getBestPredWithTrace((unsigned __int16 *)(v26 + 16), &v45, v27, a4);
          int v29 = *((__int16 *)BestPredWithTrace + 4);
          *(_WORD *)(v26 + 8) = *((_WORD *)BestPredWithTrace + 4);
          *(_DWORD *)uint64_t v26 = *(_DWORD *)BestPredWithTrace;
          *(_DWORD *)(v26 + 4) = v45;
          if (v11 >= v29) {
            int v11 = v29;
          }
          --v25;
        }
        while (v25 > 1);
      }
    }
    else if ((int)v24 >= 1)
    {
      unint64_t v30 = v24 + 1;
      do
      {
        uint64_t v31 = *(void *)(*((void *)this + 9) + 8 * (v30 - 2));
        uint64_t BestPred = PredStruct::getBestPred((PredStruct *)(v31 + 16));
        int v33 = *(__int16 *)(BestPred + 8);
        *(_WORD *)(v31 + 8) = *(_WORD *)(BestPred + 8);
        *(_DWORD *)uint64_t v31 = *(_DWORD *)BestPred;
        *(_DWORD *)(v31 + 4) = *(_DWORD *)(BestPred + 4);
        if (v11 >= v33) {
          int v11 = v33;
        }
        --v30;
      }
      while (v30 > 1);
    }
    goto LABEL_34;
  }
  if (*((unsigned char *)this + 281))
  {
    *((unsigned char *)this + 281) = 0;
    uint64_t v34 = *((unsigned int *)this + 20);
    if ((int)v34 >= 2)
    {
      uint64_t v35 = *((void *)this + 9);
      unint64_t v36 = v34 + 1;
      do
        *(_WORD *)(*(void *)(v35 + 8 * (v36-- - 2)) + 8) = 20000;
      while (v36 > 2);
    }
  }
LABEL_34:
  uint64_t v37 = *(void *)this;
  uint64_t v38 = *((void *)this + 1) + 302580;
  ++*(_DWORD *)v38;
  *(void *)(v38 + 20) += v44;
  *((_DWORD *)this + 26) = v43;
  uint64_t result = (*(uint64_t (**)(OnePhonemeSyncNet *))(v37 + 328))(this);
  *((_WORD *)this + 55) = result;
  *((_WORD *)this + 54) = v11;
  uint64_t v40 = *((void *)this + 1);
  if (v11 < *(__int16 *)(v40 + 246)) {
    *(_WORD *)(v40 + 246) = v11;
  }
  return result;
}

uint64_t BaseSyncNet::scoreIntSilNode1<false>(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, _DWORD *a8)
{
  *(unsigned char *)(a1 + 113) = 0;
  uint64_t v14 = (unsigned char *)(a1 + 113);
  int v23 = -1;
  int v15 = *(_DWORD *)(a1 + 152);
  if (a2)
  {
    uint64_t v17 = (unsigned __int16 *)(a1 + 264);
    if (a3) {
      BestPredWithTrace = PredStruct::getBestPredWithTrace(v17, &v23, *(void *)(a1 + 8) + 302936, a4);
    }
    else {
      BestPredWithTrace = (uint64_t *)PredStruct::getBestPred((PredStruct *)v17);
    }
    uint64_t v19 = (uint64_t)BestPredWithTrace;
    if (*((__int16 *)BestPredWithTrace + 4) <= a4)
    {
      int v20 = (v15 != 0) | 0x20;
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v19 = 0;
  }
  if (!v15)
  {
    *(_DWORD *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = 1310740000;
    return 20000;
  }
  int v20 = 1;
LABEL_10:
  uint64_t v21 = a1 + 240;
  if (a3) {
    Node::scoreNodeWithPatternNBest(v21, v19, v23, v20, a5, a6, *(void *)(a1 + 8), 0, a7, v14, (HmmNet *)a1);
  }
  else {
    Node::scoreNodeWithPattern(v21, v19, v20, a5, a6, *(void *)(a1 + 8), 0, a7, v14, (HmmNet *)a1);
  }
  ++*a8;
  return *(__int16 *)(a1 + 248);
}

uint64_t OnePhonemeSyncNet::thresholdNetInternal(OnePhonemeSyncNet *this, uint64_t a2, int a3)
{
  uint64_t result = BaseSyncNet::scoreIntSilNode2((uint64_t)this, a2, a3);
  *((_DWORD *)this + 26) = 1;
  if (*((__int16 *)this + 55) > a3)
  {
    *((_DWORD *)this + 26) = 0;
    *((_WORD *)this + 55) = 20000;
  }
  return result;
}

uint64_t OnePhonemeSyncNet::calcNumActiveNodes(OnePhonemeSyncNet *this, int a2)
{
  uint64_t v2 = *((unsigned int *)this + 38);
  if (*((_DWORD *)this + 71) <= a2)
  {
    uint64_t v3 = *((unsigned int *)this + 56);
    if (v3)
    {
      unint64_t v5 = (uint64_t *)*((void *)this + 27);
      do
      {
        uint64_t v6 = *v5++;
        uint64_t v2 = Sequence::calcNumActiveNodes(v6, a2) + v2;
        --v3;
      }
      while (v3);
    }
  }
  return v2;
}

uint64_t *OnePhonemeSyncNet::addNodesSequential(uint64_t a1, Sequence *a2, int a3)
{
  if (a3 == 2)
  {
    unint64_t v5 = Sequence::newSequence(a2);
    unsigned int v6 = *(_DWORD *)(a1 + 224);
    if (v6 == *(_DWORD *)(a1 + 228))
    {
      DgnPrimArray<unsigned long long>::reallocElts(a1 + 216, 1, 1);
      unsigned int v6 = *(_DWORD *)(a1 + 224);
    }
    *(void *)(*(void *)(a1 + 216) + 8 * v6) = v5;
    *(_DWORD *)(a1 + DgnArray<LinearTransform>::releaseAll((uint64_t)this + 224) = v6 + 1;
    return v5 + 2;
  }
  else if (a3)
  {
    return 0;
  }
  else
  {
    uint64_t result = (uint64_t *)(a1 + 240);
    *(unsigned char *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = 1;
  }
  return result;
}

uint64_t HmmNet::isTraceNet(HmmNet *this)
{
  return 0;
}

uint64_t AcousticNet::nActiveSilNodes(AcousticNet *this)
{
  return *((unsigned int *)this + 38);
}

uint64_t HmmNet::getInPortStatus(HmmNet *this)
{
  return 0;
}

uint64_t AcousticNet::isAcoustic(AcousticNet *this)
{
  return 1;
}

uint64_t BaseSyncNet::canCallBack(BaseSyncNet *this)
{
  return 1;
}

uint64_t BaseSyncNet::addCallBack(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)(result + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 160) = a2;
  *(void *)(result + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 168) = a3;
  *(_DWORD *)(result + 176) = a4;
  return result;
}

uint64_t AcousticNet::getRemainder(AcousticNet *this)
{
  return *((unsigned int *)this + 30);
}

uint64_t AcousticNet::getExitContext(AcousticNet *this)
{
  return (uint64_t)this + 128;
}

uint64_t AcousticNet::getExitContextPtr(AcousticNet *this)
{
  return (uint64_t)this + 128;
}

uint64_t *Sequence::newSequence(Sequence *this)
{
  unsigned int v1 = this;
  uint64_t result = MemChunkAlloc(24 * (int)this + 16, 0);
  *uint64_t result = 0;
  *((_WORD *)result + 4) = 0;
  *((_WORD *)result + 5) = v1;
  if (v1)
  {
    uint64_t v3 = result + 3;
    uint64_t v4 = v1;
    do
    {
      *(v3 - 1) = 0x100000001;
      *(_DWORD *)uint64_t v3 = 1310740000;
      *(uint64_t *)((char *)v3 + 4) = 0;
      *((_DWORD *)v3 + 3) = -65536;
      v3 += 3;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t PredStruct::getBestPred(PredStruct *this)
{
  uint64_t v1 = *((unsigned __int16 *)this + 4);
  if (v1 == 1) {
    return *(void *)this;
  }
  uint64_t v3 = *(void *)this;
  int v4 = v1 - 1;
  uint64_t result = *(void *)(*(void *)this + 8 * (v1 - 1));
  int v5 = *(__int16 *)(result + 8);
  unsigned int v6 = v4 - 1;
  do
  {
    if (v5 >= *(__int16 *)(*(void *)(v3 + 8 * v6) + 8))
    {
      uint64_t result = *(void *)(v3 + 8 * v6);
      int v5 = *(__int16 *)(result + 8);
    }
  }
  while ((unint64_t)v6--);
  return result;
}

uint64_t ustrcmp(unsigned char *a1, unsigned __int8 *a2)
{
  while (1)
  {
    int v2 = *a1;
    if (!*a1) {
      break;
    }
    ++a1;
    int v3 = *a2++;
    uint64_t v4 = (v2 - v3);
    if (v4) {
      return v4;
    }
  }
  return -*a2;
}

uint64_t ustrncmp(unsigned char *a1, unsigned __int8 *a2, int a3)
{
  while (1)
  {
    if (!a3) {
      return 0;
    }
    int v3 = *a1;
    if (!*a1) {
      break;
    }
    ++a1;
    int v4 = *a2++;
    --a3;
    uint64_t v5 = (v3 - v4);
    if (v5) {
      return v5;
    }
  }
  return -*a2;
}

uint64_t Uns8StringLength(uint64_t result)
{
  uint64_t v1 = result;
  LODWORD(result) = -1;
  do
    uint64_t result = (result + 1);
  while (*(unsigned char *)(v1 + result));
  return result;
}

uint64_t Uns32StringLength(uint64_t result)
{
  uint64_t v1 = result;
  LODWORD(result) = -1;
  do
    uint64_t result = (result + 1);
  while (*(_DWORD *)(v1 + 4 * result));
  return result;
}

uint64_t isValidName(const char *a1)
{
  if ((*a1 & 0x80000000) == 0 && (*(_DWORD *)(MEMORY[0x263EF8318] + 4 * *(unsigned __int8 *)a1 + 60) & 0x500) != 0)
  {
    unsigned int v1 = *((unsigned __int8 *)a1 + 1);
    if (!a1[1]) {
      return 1;
    }
    int v2 = a1 + 2;
    while ((v1 & 0x80) == 0 && ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v1 + 60) & 0x500) != 0 || v1 == 95))
    {
      unsigned int v3 = *(unsigned __int8 *)v2++;
      unsigned int v1 = v3;
      if (!v3) {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t isValidRestrictedName(const char *a1)
{
  uint64_t result = isValidName(a1);
  if (result) {
    return *(unsigned __int8 *)a1 - 58 < 0xFFFFFFF6;
  }
  return result;
}

uint64_t SDColl_StringCompare(unint64_t a1, unint64_t a2, CharInfo *a3, CharInfo *a4)
{
  uint64_t v8 = SdapiInsurance::SdapiInsurance(v26, "SDColl_StringCompare", 1, 1, 39);
  if (v26[97])
  {
    if (!a3) {
      throwBadStringPointer(v8, v9, v10, v11, v12, v13, v14, v15);
    }
    char v27 = 0;
    if (!a4) {
      throwBadStringPointer(v8, v9, v10, v11, v12, v13, v14, v15);
    }
    char v27 = 0;
    if (gbShowCalls) {
      xlprintf("Entering sdapi call %.500s(<SDh %lld>, <SDh %lld>, '%.500s', '%.500s')\n", v9, v10, v11, v12, "SDColl_StringCompare", a1, a2, a3, a4);
    }
    int v16 = (ModelMgr *)ModelMgr::smpModelMgr;
    if (HIDWORD(a1) || (a1 & 0xFFFF0000) != 0) {
      throwBadSdapiArgument("SDhVoc", a1, v10, v11, v12, v13, v14, v15);
    }
    if ((unsigned __int16)a1 - 1 >= 0x7B) {
      throwBadSdapiArgument("SDhVoc", a1, v10, v11, v12, v13, v14, v15);
    }
    int v23 = *(CollMgr **)(ModelMgr::getVocOrThrow(v16, (unsigned __int16)a1, v10, v11, v12, v13, v14, v15) + 16);
    if (a2 == -1)
    {
      LOWORD(a2) = -1;
    }
    else if (a2 == -2)
    {
      LOWORD(a2) = -2;
    }
    else
    {
      if (HIDWORD(a2) || (a2 & 0xFFFF0000) != 0) {
        throwBadSdapiArgument("SDhColl", a2, v17, v18, v19, v20, v21, v22);
      }
      if ((unsigned __int16)a2 == 0xFFFF || !(_WORD)a2) {
        throwBadSdapiArgument("SDhColl", a2, v17, v18, v19, v20, v21, v22);
      }
    }
    uint64_t v24 = CollMgr::collStrcmpUns8(v23, a2, a3, a4, v19, v20, v21, v22);
  }
  else
  {
    uint64_t v24 = 0;
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v26);
  return v24;
}

void sub_213EB3974()
{
}

void MrecInitModule_wavedata_frame(void)
{
  if (!gParDebugWaveCompression)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugWaveCompression", byte_2140A1DD4, byte_2140A1DD4, 0, 0, 0);
    *unsigned int v1 = &unk_26C4E0858;
    gParDebugWaveCompression = (uint64_t)v1;
    int v2 = (uint64_t *)GlobalParamMgr::smpGlobalParamMgr;
    GlobalParamMgr::addParam(v2, (GlobalParam **)&gParDebugWaveCompression);
  }
}

void WaveData::WaveData(WaveData *this, const WaveData *a2)
{
  BitArray::BitArray(this, a2);
  *(void *)(v4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
  *(_WORD *)(v4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = *((_WORD *)a2 + 12);
  *(_WORD *)(v4 + 26) = 0;
  *(_DWORD *)(v4 + 28) = 0;
  *(_DWORD *)(v4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = *((_DWORD *)a2 + 4);
  *(_DWORD *)(v4 + 20) = 0;
  *(_DWORD *)(v4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = 0;
  *(_WORD *)(v4 + 52) = *((_WORD *)a2 + 26);
  DgnPrimFixArray<short>::copyArraySlice((uint64_t *)(v4 + 32), (uint64_t *)a2 + 4, 0, *((_DWORD *)a2 + 10));
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((void *)this + 7) = *((void *)a2 + 7);
}

void sub_213EB3AB0(_Unwind_Exception *a1)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  BitArray::~BitArray(v1);
  _Unwind_Resume(a1);
}

void WaveData::~WaveData(WaveData *this)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 32);

  BitArray::~BitArray(this);
}

uint64_t *DgnPrimFixArray<short>::copyArraySlice(uint64_t *result, uint64_t *a2, unsigned int a3, unsigned int a4)
{
  uint64_t v7 = result;
  if (!a4 || *((_DWORD *)result + 2))
  {
    if (!a4) {
      return result;
    }
  }
  else
  {
    uint64_t result = MemChunkAlloc(2 * a4, 0);
    *uint64_t v7 = (uint64_t)result;
    *((_DWORD *)v7 + 2) = a4;
  }
  uint64_t v8 = *a2;
  uint64_t v9 = (_WORD *)*v7;
  uint64_t v10 = a4;
  do
  {
    *v9++ = *(_WORD *)(v8 + 2 * a3++);
    --v10;
  }
  while (v10);
  return result;
}

unint64_t DgnPRandom::normalizedNext(DgnPRandom *this, unsigned int a2)
{
  uint64_t v2 = *((int *)this + 58);
  unsigned int v3 = *((_DWORD *)this + v2 + 1) + *((_DWORD *)this + *((int *)this + 57) + 1);
  *((_DWORD *)this + v2 + 1) = v3;
  int32x2_t v4 = vadd_s32(*(int32x2_t *)((char *)this + 228), (int32x2_t)-1);
  *(int8x8_t *)((char *)this + 228) = vbsl_s8((int8x8_t)vceqz_s32(v4), (int8x8_t)0x3700000037, (int8x8_t)v4);
  return (v3 * (unint64_t)a2) >> 32;
}

uint64_t DgnPRandom::initialize(uint64_t this, int a2)
{
  uint64_t v2 = 224;
  unsigned int v3 = &sPRandTable;
  do
  {
    int v4 = *v3++;
    *(_DWORD *)(this + v2) = v4;
    v2 -= 4;
  }
  while (v2 != 4);
  *(void *)(this + 228) = 0x3700000018;
  if (a2) {
    *(_DWORD *)(this + 8) = a2;
  }
  *(unsigned char *)this = 1;
  unsigned int v5 = (unsigned __int16)a2 + 10001;
  int v6 = 24;
  int v7 = 55;
  do
  {
    *(_DWORD *)(this + 4 + 4 * v7) += *(_DWORD *)(this + 4 + 4 * v6);
    int32x2_t v8 = vadd_s32(*(int32x2_t *)(this + 228), (int32x2_t)-1);
    int8x8_t v9 = vbsl_s8((int8x8_t)vceqz_s32(v8), (int8x8_t)0x3700000037, (int8x8_t)v8);
    *(int8x8_t *)(this + 228) = v9;
    int v7 = v9.i32[1];
    int v6 = v9.i32[0];
    --v5;
  }
  while (v5 > 1);
  return this;
}

void IntruderSet::~IntruderSet(IntruderSet *this)
{
}

uint64_t writeObject<DgnPrimArray<unsigned char>>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v9 = *(_DWORD *)(a2 + 8);
  uint64_t result = writeObject(a1, &v9, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      uint64_t result = writeObject<unsigned char>(a1, *(void *)a2 + v7, a3);
      ++v8;
      v7 += 16;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

void readObject<DgnPrimArray<unsigned char>>(DgnStream *a1, uint64_t a2, unsigned int *a3)
{
  unsigned int v16 = 0;
  readObject((uint64_t)a1, &v16, a3);
  uint64_t v6 = v16;
  unsigned int v7 = *(_DWORD *)(a2 + 12);
  if (v16 > v7) {
    DgnArray<DgnPrimArray<double>>::reallocElts(a2, v16 - v7, 0);
  }
  uint64_t v8 = *(unsigned int *)(a2 + 8);
  if (v8 <= v6)
  {
    if (v8 < v6)
    {
      uint64_t v11 = v6 - v8;
      uint64_t v12 = 16 * v8;
      do
      {
        uint64_t v13 = (void *)(*(void *)a2 + v12);
        *uint64_t v13 = 0;
        v13[1] = 0;
        v12 += 16;
        --v11;
      }
      while (v11);
    }
  }
  else if ((int)v8 > (int)v6)
  {
    uint64_t v9 = (int)v8;
    uint64_t v10 = 16 * (int)v8 - 16;
    do
    {
      --v9;
      DgnPrimArray<unsigned int>::~DgnPrimArray(*(void *)a2 + v10);
      v10 -= 16;
    }
    while (v9 > (int)v6);
  }
  *(_DWORD *)(a2 + 8) = v6;
  if (v6)
  {
    uint64_t v14 = 0;
    unint64_t v15 = 0;
    do
    {
      readObject<unsigned char>(a1, *(void *)a2 + v14, a3);
      ++v15;
      v14 += 16;
    }
    while (v15 < *(unsigned int *)(a2 + 8));
  }
}

uint64_t IntruderSet::sizeObject(uint64_t a1, int a2)
{
  uint64_t v4 = sizeObject<DgnPrimArray<unsigned char>>(a1, a2);
  uint64_t v5 = sizeObject<unsigned short>(a1 + 16, a2) + v4;
  uint64_t v6 = sizeObject<unsigned short>(a1 + 32, a2);
  uint64_t v7 = v5 + v6 + sizeObject<unsigned int>(a1 + 48, a2);
  uint64_t v8 = sizeObject<unsigned int>(a1 + 64, a2);
  uint64_t v9 = v8 + sizeObject<unsigned short>(a1 + 80, a2);
  uint64_t v10 = v7 + v9 + sizeObject<unsigned short>(a1 + 96, a2);
  return v10 + sizeObject<unsigned short>(a1 + 112, a2);
}

uint64_t sizeObject<DgnPrimArray<unsigned char>>(uint64_t a1, int a2)
{
  uint64_t v2 = 0;
  v9[0] = 0;
  v9[1] = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v3 = 12;
  }
  else {
    uint64_t v3 = 16;
  }
  if (a2 != 3)
  {
    if ((a2 & 0xFFFFFFFE) == 2)
    {
      uint64_t v2 = v3;
    }
    else
    {
      uint64_t v6 = *(unsigned int *)(a1 + 8);
      uint64_t v2 = v3;
      if ((int)v6 >= 1)
      {
        unint64_t v7 = v6 + 1;
        uint64_t v2 = v3;
        do
          v2 += sizeObject<unsigned char>(*(void *)a1 + 16 * (v7-- - 2), a2);
        while (v7 > 1);
      }
      if (!a2) {
        v2 += v3 * (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
      }
    }
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v9);
  return v2;
}

void sub_213EB4090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void IntruderMgr::~IntruderMgr(IntruderMgr *this)
{
  *((void *)this + 1) = 0;
  DgnDelete<PelScorer>(*((void *)this + 2));
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 17) = 0;
  *((_WORD *)this + 44) = 0;
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 176);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 160);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 144);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 128);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 112);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96);
  DgnIOwnArray<IntruderSet *>::releaseAll((uint64_t)this + 72);
  AdaptConfig::clear((void *)this + 5);
  FileSpec::~FileSpec((IntruderMgr *)((char *)this + 24));
}

void IntruderMgr::printSize(IntruderMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/intruder.cpp", 388, (DgnString *)&v154);
  if (v155) {
    unsigned int v16 = v154;
  }
  else {
    unsigned int v16 = &unk_2140A1EC8;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_2140A1EC8, a3, &unk_2140A1EC8, v16);
  DgnString::~DgnString((DgnString *)&v154);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_2140A1EC8);
  uint64_t v21 = (a3 + 1);
  uint64_t v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/intruder.cpp", 389, (DgnString *)&v154);
  if (v155) {
    char v27 = v154;
  }
  else {
    char v27 = &unk_2140A1EC8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_2140A1EC8, (34 - a3), (34 - a3), v27, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v154);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/intruder.cpp", 390, (DgnString *)&v154);
  if (v155) {
    int v32 = v154;
  }
  else {
    int v32 = &unk_2140A1EC8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_2140A1EC8, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v154);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v33 = 4;
  }
  else {
    uint64_t v33 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/intruder.cpp", 391, (DgnString *)&v154);
  if (v155) {
    uint64_t v38 = v154;
  }
  else {
    uint64_t v38 = &unk_2140A1EC8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v34, v35, v36, v37, (a3 + 1), &unk_2140A1EC8, (34 - a3), (34 - a3), v38, v33, v33, 0);
  DgnString::~DgnString((DgnString *)&v154);
  *a4 += v33;
  *a5 += v33;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v39 = 4;
  }
  else {
    uint64_t v39 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/intruder.cpp", 392, (DgnString *)&v154);
  if (v155) {
    unsigned int v44 = v154;
  }
  else {
    unsigned int v44 = &unk_2140A1EC8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v40, v41, v42, v43, (a3 + 1), &unk_2140A1EC8, (34 - a3), (34 - a3), v44, v39, v39, 0);
  uint64_t v153 = a3;
  DgnString::~DgnString((DgnString *)&v154);
  *a4 += v39;
  *a5 += v39;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v45 = 4;
  }
  else {
    uint64_t v45 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/intruder.cpp", 393, (DgnString *)&v154);
  if (v155) {
    int64x2_t v50 = v154;
  }
  else {
    int64x2_t v50 = &unk_2140A1EC8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v46, v47, v48, v49, (a3 + 1), &unk_2140A1EC8, (34 - a3), (34 - a3), v50, v45, v45, 0);
  DgnString::~DgnString((DgnString *)&v154);
  *a4 += v45;
  *a5 += v45;
  uint64_t v51 = sizeObject((uint64_t)this + 40, 0);
  uint64_t v52 = sizeObject((uint64_t)this + 40, 1);
  uint64_t v53 = sizeObject((uint64_t)this + 40, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/intruder.cpp", 394, (DgnString *)&v154);
  if (v155) {
    uint64_t v58 = v154;
  }
  else {
    uint64_t v58 = &unk_2140A1EC8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v54, v55, v56, v57, v21, &unk_2140A1EC8, v22, v22, v58, v51, v52, v53);
  DgnString::~DgnString((DgnString *)&v154);
  *a4 += v51;
  *a5 += v52;
  *a6 += v53;
  uint64_t v59 = FileSpec::sizeObject((uint64_t)this + 24);
  uint64_t v60 = FileSpec::sizeObject((uint64_t)this + 24);
  uint64_t v61 = FileSpec::sizeObject((uint64_t)this + 24);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/intruder.cpp", 395, (DgnString *)&v154);
  if (v155) {
    uint64_t v66 = v154;
  }
  else {
    uint64_t v66 = &unk_2140A1EC8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v62, v63, v64, v65, v21, &unk_2140A1EC8, v22, v22, v66, v59, v60, v61);
  DgnString::~DgnString((DgnString *)&v154);
  *a4 += v59;
  *a5 += v60;
  *a6 += v61;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/intruder.cpp", 397, (DgnString *)&v154);
  if (v155) {
    uint64_t v71 = v154;
  }
  else {
    uint64_t v71 = &unk_2140A1EC8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v67, v68, v69, v70, v21, &unk_2140A1EC8, v22, v22, v71, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v154);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/intruder.cpp", 399, (DgnString *)&v154);
  if (v155) {
    uint64_t v76 = v154;
  }
  else {
    uint64_t v76 = &unk_2140A1EC8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v72, v73, v74, v75, v21, &unk_2140A1EC8, v22, v22, v76, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v154);
  *a4 += 4;
  *a5 += 4;
  uint64_t v77 = sizeObject<IntruderSet *>((uint64_t)this + 72, 0);
  uint64_t v78 = sizeObject<IntruderSet *>((uint64_t)this + 72, 1);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/intruder.cpp", 401, (DgnString *)&v154);
  if (v155) {
    uint64_t v83 = v154;
  }
  else {
    uint64_t v83 = &unk_2140A1EC8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v79, v80, v81, v82, v21, &unk_2140A1EC8, v22, v22, v83, v77, v78, 0);
  DgnString::~DgnString((DgnString *)&v154);
  *a4 += v77;
  *a5 += v78;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v84 = 12;
  }
  else {
    uint64_t v84 = 16;
  }
  uint64_t v85 = *((unsigned int *)this + 26);
  unsigned int v86 = *((_DWORD *)this + 27);
  if (v86 >= v85)
  {
    uint64_t v87 = 0;
    if ((int)v85 > 0) {
      v84 += 8 * (v85 - 1) + 8;
    }
    uint64_t v88 = v84 + 8 * (v86 - v85);
  }
  else
  {
    uint64_t v87 = 8 * v85;
    uint64_t v88 = v84;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/intruder.cpp", 403, (DgnString *)&v154);
  if (v155) {
    uint64_t v93 = v154;
  }
  else {
    uint64_t v93 = &unk_2140A1EC8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v89, v90, v91, v92, v21, &unk_2140A1EC8, v22, v22, v93, v88, v84, v87);
  DgnString::~DgnString((DgnString *)&v154);
  *a4 += v88;
  *a5 += v84;
  *a6 += v87;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v94 = 12;
  }
  else {
    uint64_t v94 = 16;
  }
  uint64_t v95 = *((unsigned int *)this + 30);
  unsigned int v96 = *((_DWORD *)this + 31);
  if (v96 >= v95)
  {
    uint64_t v97 = 0;
    if ((int)v95 > 0) {
      v94 += 8 * (v95 - 1) + 8;
    }
    uint64_t v98 = v94 + 8 * (v96 - v95);
  }
  else
  {
    uint64_t v97 = 8 * v95;
    uint64_t v98 = v94;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/intruder.cpp", 405, (DgnString *)&v154);
  if (v155) {
    uint64_t v103 = v154;
  }
  else {
    uint64_t v103 = &unk_2140A1EC8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v99, v100, v101, v102, v21, &unk_2140A1EC8, v22, v22, v103, v98, v94, v97);
  DgnString::~DgnString((DgnString *)&v154);
  *a4 += v98;
  *a5 += v94;
  *a6 += v97;
  uint64_t v104 = sizeObject<DgnPrimArray<double>>((uint64_t)this + 128, 0);
  uint64_t v105 = sizeObject<DgnPrimArray<double>>((uint64_t)this + 128, 1);
  uint64_t v154 = 0;
  uint64_t v155 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v154);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/intruder.cpp", 407, (DgnString *)&v154);
  if (v155) {
    uint64_t v110 = v154;
  }
  else {
    uint64_t v110 = &unk_2140A1EC8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v106, v107, v108, v109, v21, &unk_2140A1EC8, v22, v22, v110, v104, v105, 0);
  DgnString::~DgnString((DgnString *)&v154);
  *a4 += v104;
  *a5 += v105;
  uint64_t v111 = sizeObject<DgnPrimArray<double>>((uint64_t)this + 144, 0);
  uint64_t v112 = sizeObject<DgnPrimArray<double>>((uint64_t)this + 144, 1);
  uint64_t v154 = 0;
  uint64_t v155 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v154);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/intruder.cpp", 409, (DgnString *)&v154);
  if (v155) {
    uint64_t v117 = v154;
  }
  else {
    uint64_t v117 = &unk_2140A1EC8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v113, v114, v115, v116, v21, &unk_2140A1EC8, v22, v22, v117, v111, v112, 0);
  DgnString::~DgnString((DgnString *)&v154);
  *a4 += v111;
  *a5 += v112;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/intruder.cpp", 411, (DgnString *)&v154);
  if (v155) {
    uint64_t v122 = v154;
  }
  else {
    uint64_t v122 = &unk_2140A1EC8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v118, v119, v120, v121, v21, &unk_2140A1EC8, v22, v22, v122, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v154);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/intruder.cpp", 413, (DgnString *)&v154);
  if (v155) {
    uint64_t v127 = v154;
  }
  else {
    uint64_t v127 = &unk_2140A1EC8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v123, v124, v125, v126, v21, &unk_2140A1EC8, v22, v22, v127, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v154);
  ++*a4;
  ++*a5;
  uint64_t v128 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)this + 160, 0);
  uint64_t v129 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)this + 160, 1);
  uint64_t v154 = 0;
  uint64_t v155 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v154);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/intruder.cpp", 414, (DgnString *)&v154);
  if (v155) {
    uint64_t v134 = v154;
  }
  else {
    uint64_t v134 = &unk_2140A1EC8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v130, v131, v132, v133, v21, &unk_2140A1EC8, v22, v22, v134, v128, v129, 0);
  DgnString::~DgnString((DgnString *)&v154);
  *a4 += v128;
  *a5 += v129;
  uint64_t v135 = (char *)this + 176;
  uint64_t v136 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)this + 176, 0);
  uint64_t v137 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)v135, 1);
  uint64_t v154 = 0;
  uint64_t v155 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v154);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/intruder.cpp", 415, (DgnString *)&v154);
  if (v155) {
    uint64_t v142 = v154;
  }
  else {
    uint64_t v142 = &unk_2140A1EC8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v138, v139, v140, v141, v21, &unk_2140A1EC8, v22, v22, v142, v136, v137, 0);
  DgnString::~DgnString((DgnString *)&v154);
  *a4 += v136;
  *a5 += v137;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/intruder.cpp", 416, (DgnString *)&v154);
  if (v155) {
    uint64_t v147 = v154;
  }
  else {
    uint64_t v147 = &unk_2140A1EC8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v143, v144, v145, v146, v21, &unk_2140A1EC8, v22, v22, v147, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v154);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/intruder.cpp", 417, (DgnString *)&v154);
  if (v155) {
    uint64_t v152 = v154;
  }
  else {
    uint64_t v152 = &unk_2140A1EC8;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v148, v149, v150, v151, v153, &unk_2140A1EC8, (35 - v153), (35 - v153), v152, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v154);
}

void sub_213EB4C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<IntruderSet *>(uint64_t a1, int a2)
{
  if (a2 == 3) {
    return 0;
  }
  int v4 = gShadowDiagnosticShowIdealizedObjectSizes;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v2 = 12;
  }
  else {
    uint64_t v2 = 16;
  }
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    uint64_t v6 = *(unsigned int *)(a1 + 8);
    if ((int)v6 >= 1)
    {
      unint64_t v7 = v6 + 1;
      int v8 = gShadowDiagnosticShowIdealizedObjectSizes;
      do
      {
        if (v8) {
          uint64_t v9 = 4;
        }
        else {
          uint64_t v9 = 8;
        }
        if (a2 != 2)
        {
          uint64_t v10 = *(void *)(*(void *)a1 + 8 * (v7 - 2));
          if (v10)
          {
            v9 += IntruderSet::sizeObject(v10, a2);
            int v8 = gShadowDiagnosticShowIdealizedObjectSizes;
          }
        }
        v2 += v9;
        --v7;
      }
      while (v7 > 1);
    }
    if (!a2)
    {
      char v11 = 2;
      if (!v4) {
        char v11 = 3;
      }
      v2 += (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8)) << v11;
    }
  }
  return v2;
}

uint64_t DgnArray<DgnPrimArray<unsigned char>>::copyArraySlice(uint64_t result, void *a2, int a3, unsigned int a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *(unsigned int *)(result + 8);
  if ((int)v8 >= 1)
  {
    uint64_t v9 = 16 * v8 - 16;
    do
    {
      uint64_t result = DgnPrimArray<unsigned int>::~DgnPrimArray(*(void *)v7 + v9);
      v9 -= 16;
    }
    while (v9 != -16);
  }
  *(_DWORD *)(v7 + 8) = 0;
  unsigned int v10 = *(_DWORD *)(v7 + 12);
  if (a4 <= v10)
  {
    unsigned int v11 = 0;
    unsigned int v12 = 0;
    if (!a4) {
      goto LABEL_14;
    }
  }
  else
  {
    DgnArray<DgnPrimArray<double>>::reallocElts(v7, a4 - v10, 0);
    unsigned int v11 = *(_DWORD *)(v7 + 8);
  }
  int v13 = 0;
  unsigned int v12 = v11;
  do
  {
    uint64_t v14 = *a2 + 16 * (a3 + v13);
    uint64_t v15 = (void *)(*(void *)v7 + 16 * v12);
    *uint64_t v15 = 0;
    v15[1] = 0;
    uint64_t result = DgnPrimArray<unsigned char>::copyArraySlice((unint64_t)v15, (void *)v14, 0, *(_DWORD *)(v14 + 8));
    unsigned int v12 = *(_DWORD *)(v7 + 8) + 1;
    *(_DWORD *)(v7 + 8) = v12;
    ++v13;
  }
  while (a4 != v13);
  if (v12 > a4)
  {
    if ((int)v12 > (int)a4)
    {
      uint64_t v16 = (int)v12;
      uint64_t v17 = 16 * (int)v12 - 16;
      do
      {
        --v16;
        uint64_t result = DgnPrimArray<unsigned int>::~DgnPrimArray(*(void *)v7 + v17);
        v17 -= 16;
      }
      while (v16 > (int)a4);
    }
    goto LABEL_17;
  }
LABEL_14:
  if (v12 < a4)
  {
    unint64_t v18 = a4 - (unint64_t)v12;
    uint64_t v19 = 16 * v12;
    do
    {
      uint64_t v20 = (void *)(*(void *)v7 + v19);
      *uint64_t v20 = 0;
      v20[1] = 0;
      v19 += 16;
      --v18;
    }
    while (v18);
  }
LABEL_17:
  *(_DWORD *)(v7 + 8) = a4;
  return result;
}

void *DgnIOwnArray<IntruderSet *>::releaseAll(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<IntruderSet>(*(IntruderSet **)(*(void *)a1 + v3));
      *(void *)(*(void *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  uint64_t result = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

uint64_t TInputStream::verifyVersion(TInputStream *this, char *a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  unsigned int v10 = (char *)this + 152;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  uint64_t v15 = (char *)std::__tree<std::__value_type<std::string,std::wstring>,std::__map_value_compare<std::string,std::__value_type<std::string,std::wstring>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::wstring>>>::find<std::string>((uint64_t)v10, (const void **)__p);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  if ((char *)this + 160 != v15)
  {
    LOBYTE(__p[0]) = 0;
    uint64_t v16 = (unsigned int *)(v15 + 56);
    if (v15[79] < 0) {
      uint64_t v16 = *(unsigned int **)v16;
    }
    {
      operator new();
    }
    unsigned int v17 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v16, (BOOL *)__p);
    if (LOBYTE(__p[0]))
    {
      unint64_t v18 = (void *)((char *)this + 16);
      if (*((char *)this + 39) < 0) {
        unint64_t v18 = (void *)*v18;
      }
      tknPrintf("Error: %s : Expected %s in range [%llu,%llu]\n", v11, v12, v13, v14, v18, a2, a3, a4);
      return 1;
    }
    a5 = v17;
  }
  if (a5 >= a3 && a5 <= a4) {
    return 0;
  }
  uint64_t v20 = (void *)((char *)this + 16);
  if (*((char *)this + 39) < 0) {
    uint64_t v20 = (void *)*v20;
  }
  tknPrintf("Error: %s : %llu : Expected %s in range [%llu,%llu]\n", v11, v12, v13, v14, v20, a5, a2, a3, a4);
  return 1;
}

void sub_213EB50CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  MEMORY[0x216698730](v19, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TInputStream::verifyHeader(uint64_t a1, char *__s, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (const void **)(a1 + 40);
  size_t v9 = strlen(__s);
  size_t v13 = v9;
  uint64_t v14 = *(unsigned __int8 *)(a1 + 63);
  if (*(char *)(a1 + 63) < 0)
  {
    if (v9 != *(void *)(a1 + 48)) {
      goto LABEL_9;
    }
    if (v9 == -1) {
      goto LABEL_57;
    }
    uint64_t v15 = *v8;
  }
  else
  {
    if (v9 != v14) {
      goto LABEL_9;
    }
    uint64_t v15 = v8;
    if (v13 == -1) {
LABEL_57:
    }
      std::wstring::__throw_out_of_range[abi:ne180100]();
  }
  if (memcmp(v15, __s, v13))
  {
LABEL_9:
    uint64_t v16 = (void *)(a1 + 16);
    if (*(char *)(a1 + 39) < 0)
    {
      uint64_t v16 = (void *)*v16;
      if ((v14 & 0x80) == 0) {
        goto LABEL_11;
      }
    }
    else if ((v14 & 0x80) == 0)
    {
LABEL_11:
      tknPrintf("Error: File '%s' : '%s' : Bad file type, expected '%s'\n", v10, v13, v11, v12, v16, v8, __s);
      return 1;
    }
    uint64_t v8 = (const void **)*v8;
    goto LABEL_11;
  }
  uint64_t v38 = a3;
  if (!a4)
  {
LABEL_37:
    uint64_t v28 = (void *)(a1 + 16);
    if (*(char *)(a1 + 39) < 0) {
      uint64_t v28 = (void *)*v28;
    }
    uint64_t v29 = (void *)(a1 + 72);
    if (*(char *)(a1 + 95) < 0) {
      uint64_t v29 = (void *)*v29;
    }
    tknPrintf("Error: File '%s' : '%s' : Unsupported file version prefix. Supported file versions: ", v10, v13, v11, v12, v28, v29);
    if (a4)
    {
      uint64_t v34 = (void *)(v38 + 24);
      char v35 = 1;
      do
      {
        if (!*(v34 - 2))
        {
          if ((v35 & 1) == 0) {
            tknPrintString(", ");
          }
          if (*(unsigned char *)*(v34 - 1)) {
            tknPrintf("%s.", v30, v31, v32, v33, *(v34 - 1));
          }
          tknPrintf("%llu", v30, v31, v32, v33, *v34);
          char v35 = 0;
        }
        v34 += 4;
        --a4;
      }
      while (a4);
    }
    tknPrintString("\n");
    return 1;
  }
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = *(unsigned __int8 *)(a1 + 95);
  uint64_t v22 = v38 + 16;
  uint64_t v23 = a4;
  do
  {
    size_t v24 = strlen(*(const char **)v22);
    size_t v13 = v24;
    if ((v21 & 0x80) != 0)
    {
      if (v24 != *(void *)(a1 + 80)) {
        goto LABEL_31;
      }
      if (v24 == -1) {
        std::wstring::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v25 = *(const void **)(a1 + 72);
    }
    else
    {
      uint64_t v25 = (const void *)(a1 + 72);
      if (v13 != v21) {
        goto LABEL_31;
      }
    }
    if (!memcmp(v25, *(const void **)v22, v13))
    {
      if (*(void *)(a1 + 96) == *(void *)(v22 + 8)) {
        uint64_t v23 = v18;
      }
      if (v20) {
        uint64_t v26 = v20;
      }
      else {
        uint64_t v26 = *(void *)(v22 + 8);
      }
      if (!*(void *)(v22 - 8))
      {
        uint64_t v20 = v26;
        uint64_t v19 = *(void *)(v22 + 8);
      }
    }
LABEL_31:
    ++v18;
    v22 += 32;
  }
  while (a4 != v18);
  if (!v20) {
    goto LABEL_37;
  }
  if (v23 == a4)
  {
    char v27 = (void *)(a1 + 16);
    if (*(char *)(a1 + 39) < 0) {
      char v27 = (void *)*v27;
    }
    tknPrintf("Error: %s : %llu : Expected file version in range [%llu,%llu]\n", v10, v13, v11, v12, v27, *(void *)(a1 + 96), v20, v19);
    return 1;
  }
  uint64_t v36 = *(void *)(v38 + 32 * v23 + 8);
  if (v36)
  {
    uint64_t v37 = (void *)(a1 + 16);
    if (*(char *)(a1 + 39) < 0) {
      uint64_t v37 = (void *)*v37;
    }
    tknPrintf("Error: %s : %llu : Deprecated in or around TextProc version %s. Expected file version in range [%llu,%llu]\n", v10, v13, v11, v12, v37, *(void *)(a1 + 96), v36, v20, v19);
    return 1;
  }
  return 0;
}

uint64_t TInputStream::readHeader(TInputStream *this)
{
  uint64_t v243 = *MEMORY[0x263EF8340];
  if (!*((unsigned char *)this + 8)) {
    return 0;
  }
  uint64_t v212 = (std::string *)((char *)this + 72);
  MEMORY[0x216698410]();
  *((void *)this + 12) = 1;
  if (*((char *)this + 63) < 0)
  {
    **((unsigned char **)this + 5) = 0;
    *((void *)this + 6) = 0;
  }
  else
  {
    *((unsigned char *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = 0;
    *((unsigned char *)this + 63) = 0;
  }
  std::__tree<std::__value_type<std::string,std::wstring>,std::__map_value_compare<std::string,std::__value_type<std::string,std::wstring>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::wstring>>>::destroy((uint64_t)this + 152, *((void **)this + 20));
  *((void *)this + 19) = (char *)this + 160;
  *((void *)this + 21) = 0;
  *((void *)this + 20) = 0;
  std::istream::tellg();
  uint64_t v3 = v230;
  __s1 = v241;
  long long v240 = xmmword_214085190;
  char v242 = 1;
  TInputStream::getNextLine((uint64_t)this, (uint64_t)&__s1);
  if (*((void *)&v240 + 1) >= (unint64_t)v240)
  {
    if (v242)
    {
      __str.__r_.__value_.__s.__data_[0] = 0;
      TBuffer<char>::insert((uint64_t)&__s1, *((unint64_t *)&v240 + 1), (char *)&__str, 1uLL);
      --*((void *)&v240 + 1);
    }
    else if ((void)v240)
    {
      __s1[(void)v240 - 1] = 0;
    }
  }
  else
  {
    __s1[*((void *)&v240 + 1)] = 0;
  }
  int v4 = __s1;
  if (!strncmp(__s1, "TKNHEADER_", 0xAuLL))
  {
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_214085190;
    char v231 = 1;
    while (1)
    {
      if (*((void *)&v240 + 1) >= (unint64_t)v240)
      {
        if (v242)
        {
          v236[0] = 0;
          TBuffer<char>::insert((uint64_t)&__s1, *((unint64_t *)&v240 + 1), v236, 1uLL);
          --*((void *)&v240 + 1);
        }
        else if ((void)v240)
        {
          __s1[(void)v240 - 1] = 0;
        }
      }
      else
      {
        __s1[*((void *)&v240 + 1)] = 0;
      }
      NextToken = getNextToken(__s1, (uint64_t)&__str, " ");
      if (__str.__r_.__value_.__r.__words[2] >= __str.__r_.__value_.__l.__size_)
      {
        if (v231)
        {
          v236[0] = 0;
          TBuffer<char>::insert((uint64_t)&__str, __str.__r_.__value_.__r.__words[2]--, v236, 1uLL);
        }
        else if (__str.__r_.__value_.__l.__size_)
        {
          *(unsigned char *)(__str.__r_.__value_.__l.__size_ + __str.__r_.__value_.__r.__words[0] - 1) = 0;
        }
      }
      else
      {
        *(unsigned char *)(__str.__r_.__value_.__r.__words[0] + __str.__r_.__value_.__r.__words[2]) = 0;
      }
      uint64_t v6 = (void **)__str.__r_.__value_.__r.__words[0];
      if (!strcmp(__str.__r_.__value_.__l.__data_, "TKNHEADER_END")) {
        break;
      }
      if (!NextToken)
      {
        uint64_t v77 = (void *)((char *)this + 16);
        if (*((char *)this + 39) < 0) {
          uint64_t v77 = (void *)*v77;
        }
        uint64_t v78 = TBuffer<char>::c_str((uint64_t)&__s1);
        tknPrintf("Error: File '%s' : '%s' : Bad entry in file header\n", v79, v80, v81, v82, v77, v78);
        std::string::basic_string[abi:ne180100]<0>(__s, &byte_2140B33BB);
        *(void *)uint64_t v236 = byte_26C4DF190;
        if ((__s[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v236[8], *(const std::string::value_type **)__s, *(std::string::size_type *)&__s[8]);
        }
        else
        {
          *(_OWORD *)&v236[8] = *(_OWORD *)__s;
          v237[0] = *(void *)&__s[16];
        }
        *(void *)uint64_t v236 = &unk_26C4E13E0;
        if (v237[0] >= 0) {
          uint64_t v130 = &v236[8];
        }
        else {
          uint64_t v130 = *(const char **)&v236[8];
        }
        conditionalAssert(v130, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 239, v83, v84);
        *(void *)uint64_t v236 = byte_26C4DF190;
        if (SHIBYTE(v237[0]) < 0) {
          operator delete(*(void **)&v236[8]);
        }
        if ((__s[23] & 0x80000000) != 0) {
          operator delete(*(void **)__s);
        }
        exception = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v236, &byte_2140B33BB);
        void *exception = byte_26C4DF190;
        uint64_t v132 = (std::string *)(exception + 1);
        if ((v236[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v132, *(const std::string::value_type **)v236, *(std::string::size_type *)&v236[8]);
        }
        else
        {
          long long v162 = *(_OWORD *)v236;
          exception[3] = *(void *)&v236[16];
          *(_OWORD *)&v132->__r_.__value_.__l.__data_ = v162;
        }
        void *exception = &unk_26C4E13E0;
      }
      if (__str.__r_.__value_.__r.__words[2] >= __str.__r_.__value_.__l.__size_)
      {
        if (v231)
        {
          v236[0] = 0;
          TBuffer<char>::insert((uint64_t)&__str, __str.__r_.__value_.__r.__words[2]--, v236, 1uLL);
        }
        else if (__str.__r_.__value_.__l.__size_)
        {
          *((unsigned char *)v6 + __str.__r_.__value_.__l.__size_ - 1) = 0;
        }
      }
      else
      {
        *((unsigned char *)v6 + __str.__r_.__value_.__r.__words[2]) = 0;
      }
      std::string::size_type v11 = __str.__r_.__value_.__r.__words[0];
      if (!strcmp(__str.__r_.__value_.__l.__data_, "TKNHEADER_FILETYPE"))
      {
        getNextToken(NextToken, (uint64_t)&__str, " ");
        if (__str.__r_.__value_.__r.__words[2] >= __str.__r_.__value_.__l.__size_)
        {
          if (v231)
          {
            v236[0] = 0;
            TBuffer<char>::insert((uint64_t)&__str, __str.__r_.__value_.__r.__words[2]--, v236, 1uLL);
          }
          else if (__str.__r_.__value_.__l.__size_)
          {
            *(unsigned char *)(__str.__r_.__value_.__l.__size_ + __str.__r_.__value_.__r.__words[0] - 1) = 0;
          }
        }
        else
        {
          *(unsigned char *)(__str.__r_.__value_.__r.__words[0] + __str.__r_.__value_.__r.__words[2]) = 0;
        }
        MEMORY[0x216698410]((char *)this + 40, __str.__r_.__value_.__r.__words[0]);
      }
      else
      {
        if (__str.__r_.__value_.__r.__words[2] >= __str.__r_.__value_.__l.__size_)
        {
          if (v231)
          {
            v236[0] = 0;
            TBuffer<char>::insert((uint64_t)&__str, __str.__r_.__value_.__r.__words[2]--, v236, 1uLL);
          }
          else if (__str.__r_.__value_.__l.__size_)
          {
            *(unsigned char *)(__str.__r_.__value_.__l.__size_ + v11 - 1) = 0;
          }
        }
        else
        {
          *(unsigned char *)(v11 + __str.__r_.__value_.__r.__words[2]) = 0;
        }
        if (strcmp(__str.__r_.__value_.__l.__data_, "TKNHEADER_FILEVERSION"))
        {
          uint64_t v88 = (void *)((char *)this + 16);
          if (*((char *)this + 39) < 0) {
            uint64_t v88 = (void *)*v88;
          }
          uint64_t v89 = TBuffer<char>::c_str((uint64_t)&__str);
          tknPrintf("Error: File '%s' : '%s' : Bad entry in file header\n", v90, v91, v92, v93, v88, v89);
          std::string::basic_string[abi:ne180100]<0>(__s, &byte_2140B33BB);
          *(void *)uint64_t v236 = byte_26C4DF190;
          if ((__s[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v236[8], *(const std::string::value_type **)__s, *(std::string::size_type *)&__s[8]);
          }
          else
          {
            *(_OWORD *)&v236[8] = *(_OWORD *)__s;
            v237[0] = *(void *)&__s[16];
          }
          *(void *)uint64_t v236 = &unk_26C4E13E0;
          if (v237[0] >= 0) {
            uint64_t v136 = &v236[8];
          }
          else {
            uint64_t v136 = *(const char **)&v236[8];
          }
          conditionalAssert(v136, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 255, v94, v95);
          *(void *)uint64_t v236 = byte_26C4DF190;
          if (SHIBYTE(v237[0]) < 0) {
            operator delete(*(void **)&v236[8]);
          }
          if ((__s[23] & 0x80000000) != 0) {
            operator delete(*(void **)__s);
          }
          uint64_t v137 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(v236, &byte_2140B33BB);
          *uint64_t v137 = byte_26C4DF190;
          uint64_t v138 = (std::string *)(v137 + 1);
          if ((v236[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v138, *(const std::string::value_type **)v236, *(std::string::size_type *)&v236[8]);
          }
          else
          {
            long long v164 = *(_OWORD *)v236;
            v137[3] = *(void *)&v236[16];
            *(_OWORD *)&v138->__r_.__value_.__l.__data_ = v164;
          }
          *uint64_t v137 = &unk_26C4E13E0;
        }
        *((void *)this + 12) = atol(NextToken);
      }
      if (!TInputStream::getNextLine((uint64_t)this, (uint64_t)&__s1))
      {
        uint64_t v16 = (void *)((char *)this + 16);
        if (*((char *)this + 39) < 0) {
          uint64_t v16 = (void *)*v16;
        }
        tknPrintf("Error: File '%s' : Missing TKNHEADER_END\n", v12, v13, v14, v15, v16);
        std::string::basic_string[abi:ne180100]<0>(__s, &byte_2140B33BB);
        *(void *)uint64_t v236 = byte_26C4DF190;
        if ((__s[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v236[8], *(const std::string::value_type **)__s, *(std::string::size_type *)&__s[8]);
        }
        else
        {
          *(_OWORD *)&v236[8] = *(_OWORD *)__s;
          v237[0] = *(void *)&__s[16];
        }
        *(void *)uint64_t v236 = &unk_26C4E13E0;
        if (v237[0] >= 0) {
          uint64_t v116 = &v236[8];
        }
        else {
          uint64_t v116 = *(const char **)&v236[8];
        }
        conditionalAssert(v116, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 263, v17, v18);
        *(void *)uint64_t v236 = byte_26C4DF190;
        if (SHIBYTE(v237[0]) < 0) {
          operator delete(*(void **)&v236[8]);
        }
        if ((__s[23] & 0x80000000) != 0) {
          operator delete(*(void **)__s);
        }
        uint64_t v117 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v236, &byte_2140B33BB);
        *uint64_t v117 = byte_26C4DF190;
        uint64_t v118 = (std::string *)(v117 + 1);
        if ((v236[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v118, *(const std::string::value_type **)v236, *(std::string::size_type *)&v236[8]);
        }
        else
        {
          long long v148 = *(_OWORD *)v236;
          v117[3] = *(void *)&v236[16];
          *(_OWORD *)&v118->__r_.__value_.__l.__data_ = v148;
        }
        *uint64_t v117 = &unk_26C4E13E0;
      }
    }
    if (!NextToken)
    {
      uint64_t v145 = (void *)((char *)this + 16);
      if (*((char *)this + 39) < 0) {
        uint64_t v145 = (void *)*v145;
      }
      tknPrintf("Error: '%s' : TKNHEADER_END does not take a parameter\n", v7, v8, v9, v10, v145);
      std::string::basic_string[abi:ne180100]<0>(__s, &byte_2140B33BB);
      *(void *)uint64_t v236 = byte_26C4DF190;
      if ((__s[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v236[8], *(const std::string::value_type **)__s, *(std::string::size_type *)&__s[8]);
      }
      else
      {
        *(_OWORD *)&v236[8] = *(_OWORD *)__s;
        v237[0] = *(void *)&__s[16];
      }
      *(void *)uint64_t v236 = &unk_26C4E13E0;
      if (v237[0] >= 0) {
        unsigned int v178 = &v236[8];
      }
      else {
        unsigned int v178 = *(const char **)&v236[8];
      }
      conditionalAssert(v178, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 228, v146, v147);
      *(void *)uint64_t v236 = byte_26C4DF190;
      if (SHIBYTE(v237[0]) < 0) {
        operator delete(*(void **)&v236[8]);
      }
      if ((__s[23] & 0x80000000) != 0) {
        operator delete(*(void **)__s);
      }
      uint64_t v179 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v236, &byte_2140B33BB);
      *uint64_t v179 = byte_26C4DF190;
      uint64_t v180 = (std::string *)(v179 + 1);
      if ((v236[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v180, *(const std::string::value_type **)v236, *(std::string::size_type *)&v236[8]);
      }
      else
      {
        long long v200 = *(_OWORD *)v236;
        v179[3] = *(void *)&v236[16];
        *(_OWORD *)&v180->__r_.__value_.__l.__data_ = v200;
      }
      *uint64_t v179 = &unk_26C4E13E0;
    }
    if (*((char *)this + 63) < 0)
    {
      if (*((void *)this + 6))
      {
LABEL_60:
        if (v231 && v6 != __p && v6)
        {
          uint64_t v19 = v6;
          goto LABEL_256;
        }
LABEL_257:
        uint64_t v2 = 1;
        goto LABEL_258;
      }
    }
    else if (*((unsigned char *)this + 63))
    {
      goto LABEL_60;
    }
    uint64_t v20 = (void *)((char *)this + 16);
    if (*((char *)this + 39) < 0) {
      uint64_t v20 = (void *)*v20;
    }
    tknPrintf("Error: File '%s' : Missing TKNHEADER_FILETYPE\n", v7, v8, v9, v10, v20);
    std::string::basic_string[abi:ne180100]<0>(__s, &byte_2140B33BB);
    *(void *)uint64_t v236 = byte_26C4DF190;
    if ((__s[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v236[8], *(const std::string::value_type **)__s, *(std::string::size_type *)&__s[8]);
    }
    else
    {
      *(_OWORD *)&v236[8] = *(_OWORD *)__s;
      v237[0] = *(void *)&__s[16];
    }
    *(void *)uint64_t v236 = &unk_26C4E13E0;
    if (v237[0] >= 0) {
      uint64_t v181 = &v236[8];
    }
    else {
      uint64_t v181 = *(const char **)&v236[8];
    }
    conditionalAssert(v181, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 269, v21, v22);
    *(void *)uint64_t v236 = byte_26C4DF190;
    if (SHIBYTE(v237[0]) < 0) {
      operator delete(*(void **)&v236[8]);
    }
    if ((__s[23] & 0x80000000) != 0) {
      operator delete(*(void **)__s);
    }
    uint64_t v182 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v236, &byte_2140B33BB);
    void *v182 = byte_26C4DF190;
    uint64_t v183 = (std::string *)(v182 + 1);
    if ((v236[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v183, *(const std::string::value_type **)v236, *(std::string::size_type *)&v236[8]);
    }
    else
    {
      long long v201 = *(_OWORD *)v236;
      v182[3] = *(void *)&v236[16];
      *(_OWORD *)&v183->__r_.__value_.__l.__data_ = v201;
    }
    void *v182 = &unk_26C4E13E0;
  }
  if (*((void *)&v240 + 1) >= (unint64_t)v240)
  {
    if (v242)
    {
      __str.__r_.__value_.__s.__data_[0] = 0;
      TBuffer<char>::insert((uint64_t)&__s1, *((unint64_t *)&v240 + 1), (char *)&__str, 1uLL);
      --*((void *)&v240 + 1);
    }
    else if ((void)v240)
    {
      v4[(void)v240 - 1] = 0;
    }
  }
  else
  {
    v4[*((void *)&v240 + 1)] = 0;
  }
  if (!strcmp(__s1, "HEADER_BEGIN"))
  {
    *(void *)uint64_t v236 = v237;
    *(_OWORD *)&v236[8] = xmmword_214085190;
    char v23 = 1;
    char v238 = 1;
    *(void *)long long __s = v234;
    *(_OWORD *)&__s[8] = xmmword_214085190;
    char v235 = 1;
    int v211 = *(_DWORD *)(*((void *)this + 22) + 64);
    memset(&v217, 0, sizeof(v217));
    while (1)
    {
      if (!TInputStream::getNextLine((uint64_t)this, (uint64_t)&__s1))
      {
        uint64_t v85 = (void *)((char *)this + 16);
        if (*((char *)this + 39) < 0) {
          uint64_t v85 = (void *)*v85;
        }
        tknPrintf("Error: File '%s' : Missing HEADER_END\n", v24, v25, v26, v27, v85);
        std::string::basic_string[abi:ne180100]<0>(v215, &byte_2140B33BB);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)byte_26C4DF190;
        if ((v215[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__str.__r_.__value_.__r.__words[1], *(const std::string::value_type **)v215, *(std::string::size_type *)&v215[8]);
        }
        else
        {
          *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = *(_OWORD *)v215;
          __p[0] = *(void **)&v215[16];
        }
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C4E13E0;
        if (SHIBYTE(__p[0]) >= 0) {
          size = &__str.__r_.__value_.__s.__data_[8];
        }
        else {
          size = (const char *)__str.__r_.__value_.__l.__size_;
        }
        conditionalAssert(size, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 384, v86, v87);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)byte_26C4DF190;
        if (SHIBYTE(__p[0]) < 0) {
          operator delete((void *)__str.__r_.__value_.__l.__size_);
        }
        if ((v215[23] & 0x80000000) != 0) {
          operator delete(*(void **)v215);
        }
        uint64_t v120 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(&__str, &byte_2140B33BB);
        *uint64_t v120 = byte_26C4DF190;
        uint64_t v121 = (std::string *)(v120 + 1);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v121, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v161 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
          int v120[3] = *((void *)&__str.__r_.__value_.__l + 2);
          *(_OWORD *)&v121->__r_.__value_.__l.__data_ = v161;
        }
        *uint64_t v120 = &unk_26C4E13E0;
      }
      if (*((void *)&v240 + 1) >= (unint64_t)v240)
      {
        if (v242)
        {
          v215[0] = 0;
          TBuffer<char>::insert((uint64_t)&__s1, *((unint64_t *)&v240 + 1), v215, 1uLL);
          --*((void *)&v240 + 1);
        }
        else if ((void)v240)
        {
          __s1[(void)v240 - 1] = 0;
        }
      }
      else
      {
        __s1[*((void *)&v240 + 1)] = 0;
      }
      uint64_t v28 = getNextToken(__s1, (uint64_t)v236, " ");
      uint64_t v29 = getNextToken(v28, (uint64_t)__s, " ");
      if (*(void *)&v236[16] >= *(void *)&v236[8])
      {
        if (v238)
        {
          v215[0] = 0;
          TBuffer<char>::insert((uint64_t)v236, *(unint64_t *)&v236[16], v215, 1uLL);
          --*(void *)&v236[16];
        }
        else if (*(void *)&v236[8])
        {
          *(unsigned char *)(*(void *)&v236[8] + *(void *)v236 - 1) = 0;
        }
      }
      else
      {
        *(unsigned char *)(*(void *)v236 + *(void *)&v236[16]) = 0;
      }
      uint64_t v30 = *(void *)v236;
      if (!strcmp(*(const char **)v236, "HEADER_END"))
      {
        if (v29)
        {
          uint64_t v149 = (void *)((char *)this + 16);
          if (*((char *)this + 39) < 0) {
            uint64_t v149 = (void *)*v149;
          }
          tknPrintf("Error: '%s' : HEADER_END does not take a parameter\n", v31, v32, v33, v34, v149);
          std::string::basic_string[abi:ne180100]<0>(v215, &byte_2140B33BB);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)byte_26C4DF190;
          if ((v215[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&__str.__r_.__value_.__r.__words[1], *(const std::string::value_type **)v215, *(std::string::size_type *)&v215[8]);
          }
          else
          {
            *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = *(_OWORD *)v215;
            __p[0] = *(void **)&v215[16];
          }
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C4E13E0;
          if (SHIBYTE(__p[0]) >= 0) {
            uint64_t v184 = &__str.__r_.__value_.__s.__data_[8];
          }
          else {
            uint64_t v184 = (const char *)__str.__r_.__value_.__l.__size_;
          }
          conditionalAssert(v184, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 297, v150, v151);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)byte_26C4DF190;
          if (SHIBYTE(__p[0]) < 0) {
            operator delete((void *)__str.__r_.__value_.__l.__size_);
          }
          if ((v215[23] & 0x80000000) != 0) {
            operator delete(*(void **)v215);
          }
          uint64_t v185 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&__str, &byte_2140B33BB);
          *uint64_t v185 = byte_26C4DF190;
          unsigned int v186 = (std::string *)(v185 + 1);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v186, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v202 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
            v185[3] = *((void *)&__str.__r_.__value_.__l + 2);
            *(_OWORD *)&v186->__r_.__value_.__l.__data_ = v202;
          }
          *uint64_t v185 = &unk_26C4E13E0;
        }
        if ((*((char *)this + 63) & 0x80000000) == 0)
        {
          if (*((unsigned char *)this + 63)) {
            goto LABEL_230;
          }
LABEL_264:
          uint64_t v74 = (void *)((char *)this + 16);
          if (*((char *)this + 39) < 0) {
            uint64_t v74 = (void *)*v74;
          }
          tknPrintf("Error: File '%s' : Missing FILE_TYPE\n", v31, v32, v33, v34, v74);
          std::string::basic_string[abi:ne180100]<0>(v215, &byte_2140B33BB);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)byte_26C4DF190;
          if ((v215[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&__str.__r_.__value_.__r.__words[1], *(const std::string::value_type **)v215, *(std::string::size_type *)&v215[8]);
          }
          else
          {
            *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = *(_OWORD *)v215;
            __p[0] = *(void **)&v215[16];
          }
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C4E13E0;
          if (SHIBYTE(__p[0]) >= 0) {
            uint64_t v187 = &__str.__r_.__value_.__s.__data_[8];
          }
          else {
            uint64_t v187 = (const char *)__str.__r_.__value_.__l.__size_;
          }
          conditionalAssert(v187, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 390, v75, v76);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)byte_26C4DF190;
          if (SHIBYTE(__p[0]) < 0) {
            operator delete((void *)__str.__r_.__value_.__l.__size_);
          }
          if ((v215[23] & 0x80000000) != 0) {
            operator delete(*(void **)v215);
          }
          uint64_t v188 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&__str, &byte_2140B33BB);
          *uint64_t v188 = byte_26C4DF190;
          uint64_t v189 = (std::string *)(v188 + 1);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v189, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v203 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
            v188[3] = *((void *)&__str.__r_.__value_.__l + 2);
            *(_OWORD *)&v189->__r_.__value_.__l.__data_ = v203;
          }
          *uint64_t v188 = &unk_26C4E13E0;
        }
        if (!*((void *)this + 6)) {
          goto LABEL_264;
        }
LABEL_230:
        if (*(_DWORD *)(*((void *)this + 22) + 64) != v211)
        {
          uint64_t v152 = (void *)((char *)this + 16);
          if (*((char *)this + 39) < 0) {
            uint64_t v152 = (void *)*v152;
          }
          tknPrintf("Error: File '%s' : File codepage does not match the voc codepage\n", v31, v32, v33, v34, v152);
          std::string::basic_string[abi:ne180100]<0>(v215, &byte_2140B33BB);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)byte_26C4DF190;
          if ((v215[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&__str.__r_.__value_.__r.__words[1], *(const std::string::value_type **)v215, *(std::string::size_type *)&v215[8]);
          }
          else
          {
            *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = *(_OWORD *)v215;
            __p[0] = *(void **)&v215[16];
          }
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C4E2478;
          if (SHIBYTE(__p[0]) >= 0) {
            uint64_t v190 = &__str.__r_.__value_.__s.__data_[8];
          }
          else {
            uint64_t v190 = (const char *)__str.__r_.__value_.__l.__size_;
          }
          conditionalAssert(v190, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 397, v153, v154);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)byte_26C4DF190;
          if (SHIBYTE(__p[0]) < 0) {
            operator delete((void *)__str.__r_.__value_.__l.__size_);
          }
          if ((v215[23] & 0x80000000) != 0) {
            operator delete(*(void **)v215);
          }
          uint64_t v191 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&__str, &byte_2140B33BB);
          *uint64_t v191 = byte_26C4DF190;
          uint64_t v192 = (std::string *)(v191 + 1);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v192, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v204 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
            v191[3] = *((void *)&__str.__r_.__value_.__l + 2);
            *(_OWORD *)&v192->__r_.__value_.__l.__data_ = v204;
          }
          *uint64_t v191 = &unk_26C4E2478;
        }
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_214085190;
        char v232 = 1;
        if (v217.__end_ == v217.__begin_) {
          goto LABEL_247;
        }
        uint64_t v63 = 0;
        unint64_t v64 = 0;
        do
        {
          TBuffer<wchar_t>::resize((uint64_t)&__str, 0);
          p_second = &v217.__begin_[v63].second;
          if (SHIBYTE(v217.__begin_[v63].second.__r_.__value_.__r.__words[2]) < 0) {
            p_second = (std::string *)p_second->__r_.__value_.__r.__words[0];
          }
          TLocaleInfo::multiByteToUnicode(*((void *)this + 22), (unsigned __int8 *)p_second, (uint64_t)&__str);
          uint64_t v66 = &v217.__begin_[v63];
          if (SHIBYTE(v217.__begin_[v63].first.__r_.__value_.__r.__words[2]) < 0) {
            uint64_t v66 = (std::pair<std::string, std::string> *)v66->first.__r_.__value_.__r.__words[0];
          }
          if (TInputStream::isParameter(this, (char *)v66))
          {
            uint64_t v112 = (void *)((char *)this + 16);
            if (*((char *)this + 39) < 0) {
              uint64_t v112 = (void *)*v112;
            }
            uint64_t v113 = &v217.__begin_[v63];
            if (SHIBYTE(v217.__begin_[v63].first.__r_.__value_.__r.__words[2]) < 0) {
              uint64_t v113 = (std::pair<std::string, std::string> *)v113->first.__r_.__value_.__r.__words[0];
            }
            tknPrintf("Error: %s : Duplicate setting for %s parameter\n", v67, v68, v69, v70, v112, v113);
            std::string::basic_string[abi:ne180100]<0>(v213, &byte_2140B33BB);
            *(void *)uint64_t v215 = byte_26C4DF190;
            if (SHIBYTE(v214) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v215[8], (const std::string::value_type *)v213[0], (std::string::size_type)v213[1]);
            }
            else
            {
              *(_OWORD *)&v215[8] = *(_OWORD *)v213;
              uint64_t v216 = v214;
            }
            *(void *)uint64_t v215 = &unk_26C4E0710;
            if (v216 >= 0) {
              uint64_t v133 = &v215[8];
            }
            else {
              uint64_t v133 = *(const char **)&v215[8];
            }
            conditionalAssert(v133, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 414, v114, v115);
            *(void *)uint64_t v215 = byte_26C4DF190;
            if (SHIBYTE(v216) < 0) {
              operator delete(*(void **)&v215[8]);
            }
            if (SHIBYTE(v214) < 0) {
              operator delete(v213[0]);
            }
            uint64_t v134 = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(v215, &byte_2140B33BB);
            *uint64_t v134 = byte_26C4DF190;
            uint64_t v135 = (std::string *)(v134 + 1);
            if ((v215[23] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external(v135, *(const std::string::value_type **)v215, *(std::string::size_type *)&v215[8]);
            }
            else
            {
              long long v163 = *(_OWORD *)v215;
              v134[3] = *(void *)&v215[16];
              *(_OWORD *)&v135->__r_.__value_.__l.__data_ = v163;
            }
            *uint64_t v134 = &unk_26C4E0710;
          }
          if (__str.__r_.__value_.__r.__words[2] >= __str.__r_.__value_.__l.__size_)
          {
            if (v232)
            {
              *(_DWORD *)uint64_t v215 = 0;
              TBuffer<wchar_t>::insert((uint64_t)&__str, __str.__r_.__value_.__r.__words[2], (int *)v215, 1uLL);
              std::string::size_type v71 = __str.__r_.__value_.__r.__words[0];
              --__str.__r_.__value_.__r.__words[2];
            }
            else
            {
              std::string::size_type v71 = __str.__r_.__value_.__r.__words[0];
              if (__str.__r_.__value_.__l.__size_) {
                *(_DWORD *)(__str.__r_.__value_.__r.__words[0] + 4 * __str.__r_.__value_.__l.__size_ - 4) = 0;
              }
            }
          }
          else
          {
            std::string::size_type v71 = __str.__r_.__value_.__r.__words[0];
            *(_DWORD *)(__str.__r_.__value_.__r.__words[0] + 4 * __str.__r_.__value_.__r.__words[2]) = 0;
          }
          *(void *)uint64_t v215 = &v217.__begin_[v63];
          uint64_t v72 = std::__tree<std::__value_type<std::string,std::wstring>,std::__map_value_compare<std::string,std::__value_type<std::string,std::wstring>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::wstring>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 19, (const void **)&v217.__begin_[v63].first.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)v215);
          MEMORY[0x216698480](v72 + 7, v71);
          ++v64;
          ++v63;
        }
        while (v64 < 0xAAAAAAAAAAAAAAABLL * (((char *)v217.__end_ - (char *)v217.__begin_) >> 4));
        if (v232)
        {
LABEL_247:
          if ((void **)__str.__r_.__value_.__l.__data_ != __p && __str.__r_.__value_.__r.__words[0]) {
            MEMORY[0x216698730]();
          }
        }
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v217;
        std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
        if (v235 && *(unsigned char **)__s != v234 && *(void *)__s) {
          MEMORY[0x216698730]();
        }
        if (v238)
        {
          uint64_t v19 = *(void ***)v236;
          if (*(void **)v236 != v237)
          {
            if (*(void *)v236) {
LABEL_256:
            }
              MEMORY[0x216698730](v19, 0x1000C4077774924);
          }
        }
        goto LABEL_257;
      }
      if (!v29)
      {
        unsigned int v96 = (void *)((char *)this + 16);
        if (*((char *)this + 39) < 0) {
          unsigned int v96 = (void *)*v96;
        }
        uint64_t v97 = TBuffer<char>::c_str((uint64_t)&__s1);
        tknPrintf("Error: File '%s' : %s : Syntax error in header\n", v98, v99, v100, v101, v96, v97);
        std::string::basic_string[abi:ne180100]<0>(v215, &byte_2140B33BB);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)byte_26C4DF190;
        if ((v215[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__str.__r_.__value_.__r.__words[1], *(const std::string::value_type **)v215, *(std::string::size_type *)&v215[8]);
        }
        else
        {
          *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = *(_OWORD *)v215;
          __p[0] = *(void **)&v215[16];
        }
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C4E13E0;
        if (SHIBYTE(__p[0]) >= 0) {
          uint64_t v139 = &__str.__r_.__value_.__s.__data_[8];
        }
        else {
          uint64_t v139 = (const char *)__str.__r_.__value_.__l.__size_;
        }
        conditionalAssert(v139, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 308, v102, v103);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)byte_26C4DF190;
        if (SHIBYTE(__p[0]) < 0) {
          operator delete((void *)__str.__r_.__value_.__l.__size_);
        }
        if ((v215[23] & 0x80000000) != 0) {
          operator delete(*(void **)v215);
        }
        uint64_t v140 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(&__str, &byte_2140B33BB);
        *uint64_t v140 = byte_26C4DF190;
        uint64_t v141 = (std::string *)(v140 + 1);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v141, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v165 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
          v140[3] = *((void *)&__str.__r_.__value_.__l + 2);
          *(_OWORD *)&v141->__r_.__value_.__l.__data_ = v165;
        }
        *uint64_t v140 = &unk_26C4E13E0;
      }
      if (*(void *)&v236[16] >= *(void *)&v236[8])
      {
        if (v238)
        {
          v215[0] = 0;
          TBuffer<char>::insert((uint64_t)v236, *(unint64_t *)&v236[16], v215, 1uLL);
          --*(void *)&v236[16];
        }
        else if (*(void *)&v236[8])
        {
          *(unsigned char *)(*(void *)&v236[8] + v30 - 1) = 0;
        }
      }
      else
      {
        *(unsigned char *)(v30 + *(void *)&v236[16]) = 0;
      }
      uint64_t v35 = *(void *)v236;
      if (!strcmp(*(const char **)v236, "VERSION")) {
        break;
      }
      if (*(void *)&v236[16] >= *(void *)&v236[8])
      {
        if (v238)
        {
          v215[0] = 0;
          TBuffer<char>::insert((uint64_t)v236, *(unint64_t *)&v236[16], v215, 1uLL);
          --*(void *)&v236[16];
        }
        else if (*(void *)&v236[8])
        {
          *(unsigned char *)(*(void *)&v236[8] + v35 - 1) = 0;
        }
      }
      else
      {
        *(unsigned char *)(v35 + *(void *)&v236[16]) = 0;
      }
      uint64_t v40 = *(void *)v236;
      if (!strcmp(*(const char **)v236, "FILE_TYPE"))
      {
        if (*(void *)&__s[16] >= *(void *)&__s[8])
        {
          if (v235)
          {
            v215[0] = 0;
            TBuffer<char>::insert((uint64_t)__s, *(unint64_t *)&__s[16], v215, 1uLL);
            --*(void *)&__s[16];
          }
          else if (*(void *)&__s[8])
          {
            *(unsigned char *)(*(void *)&__s[8] + *(void *)__s - 1) = 0;
          }
        }
        else
        {
          *(unsigned char *)(*(void *)__s + *(void *)&__s[16]) = 0;
        }
        MEMORY[0x216698410]((char *)this + 40, *(void *)__s);
        goto LABEL_188;
      }
      if (*(void *)&v236[16] >= *(void *)&v236[8])
      {
        if (v238)
        {
          v215[0] = 0;
          TBuffer<char>::insert((uint64_t)v236, *(unint64_t *)&v236[16], v215, 1uLL);
          --*(void *)&v236[16];
        }
        else if (*(void *)&v236[8])
        {
          *(unsigned char *)(*(void *)&v236[8] + v40 - 1) = 0;
        }
      }
      else
      {
        *(unsigned char *)(v40 + *(void *)&v236[16]) = 0;
      }
      uint64_t v41 = *(void *)v236;
      if (!strcmp(*(const char **)v236, "FILE_VERSION"))
      {
        if (*(void *)&__s[16] >= *(void *)&__s[8])
        {
          if (v235)
          {
            v215[0] = 0;
            TBuffer<char>::insert((uint64_t)__s, *(unint64_t *)&__s[16], v215, 1uLL);
            --*(void *)&__s[16];
          }
          else if (*(void *)&__s[8])
          {
            *(unsigned char *)(*(void *)&__s[8] + *(void *)__s - 1) = 0;
          }
        }
        else
        {
          *(unsigned char *)(*(void *)__s + *(void *)&__s[16]) = 0;
        }
        uint64_t v48 = *(void *)__s;
        uint64_t v49 = strrchr(*(char **)__s, 46);
        if (v49)
        {
          int64x2_t v50 = v49;
          if (*(void *)&__s[16] >= *(void *)&__s[8])
          {
            if (v235)
            {
              v215[0] = 0;
              TBuffer<char>::insert((uint64_t)__s, *(unint64_t *)&__s[16], v215, 1uLL);
              --*(void *)&__s[16];
            }
            else if (*(void *)&__s[8])
            {
              *(unsigned char *)(*(void *)&__s[8] + v48 - 1) = 0;
            }
          }
          else
          {
            *(unsigned char *)(v48 + *(void *)&__s[16]) = 0;
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, *(char **)__s);
          if (*(void *)&__s[16] >= *(void *)&__s[8])
          {
            if (v235)
            {
              v215[0] = 0;
              TBuffer<char>::insert((uint64_t)__s, *(unint64_t *)&__s[16], v215, 1uLL);
              --*(void *)&__s[16];
            }
            else if (*(void *)&__s[8])
            {
              *(unsigned char *)(*(void *)&__s[8] + *(void *)__s - 1) = 0;
            }
          }
          else
          {
            *(unsigned char *)(*(void *)__s + *(void *)&__s[16]) = 0;
          }
          std::string::assign(v212, &__str, 0, (std::string::size_type)&v50[-*(void *)__s]);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          uint64_t v51 = v50 + 1;
        }
        else
        {
          if (*(void *)&__s[16] >= *(void *)&__s[8])
          {
            if (v235)
            {
              v215[0] = 0;
              TBuffer<char>::insert((uint64_t)__s, *(unint64_t *)&__s[16], v215, 1uLL);
              --*(void *)&__s[16];
            }
            else if (*(void *)&__s[8])
            {
              *(unsigned char *)(*(void *)&__s[8] + v48 - 1) = 0;
            }
          }
          else
          {
            *(unsigned char *)(v48 + *(void *)&__s[16]) = 0;
          }
          uint64_t v51 = *(const char **)__s;
        }
        *((void *)this + 12) = atol(v51);
        goto LABEL_188;
      }
      if (*(void *)&v236[16] >= *(void *)&v236[8])
      {
        if (v238)
        {
          v215[0] = 0;
          TBuffer<char>::insert((uint64_t)v236, *(unint64_t *)&v236[16], v215, 1uLL);
          --*(void *)&v236[16];
        }
        else if (*(void *)&v236[8])
        {
          *(unsigned char *)(*(void *)&v236[8] + v41 - 1) = 0;
        }
      }
      else
      {
        *(unsigned char *)(v41 + *(void *)&v236[16]) = 0;
      }
      uint64_t v42 = *(void *)v236;
      if (!strcmp(*(const char **)v236, "PARAMETER"))
      {
        uint64_t v43 = getNextToken(v28 + 1, (uint64_t)v236, "=");
        if (!v43)
        {
          uint64_t v104 = (void *)((char *)this + 16);
          if (*((char *)this + 39) < 0) {
            uint64_t v104 = (void *)*v104;
          }
          uint64_t v105 = TBuffer<char>::c_str((uint64_t)&__s1);
          tknPrintf("Error: File '%s' : %s : PARAMETER must contain 'name=value'\n", v106, v107, v108, v109, v104, v105);
          std::string::basic_string[abi:ne180100]<0>(v215, &byte_2140B33BB);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)byte_26C4DF190;
          if ((v215[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&__str.__r_.__value_.__r.__words[1], *(const std::string::value_type **)v215, *(std::string::size_type *)&v215[8]);
          }
          else
          {
            *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = *(_OWORD *)v215;
            __p[0] = *(void **)&v215[16];
          }
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C4E13E0;
          if (SHIBYTE(__p[0]) >= 0) {
            uint64_t v142 = &__str.__r_.__value_.__s.__data_[8];
          }
          else {
            uint64_t v142 = (const char *)__str.__r_.__value_.__l.__size_;
          }
          conditionalAssert(v142, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 353, v110, v111);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)byte_26C4DF190;
          if (SHIBYTE(__p[0]) < 0) {
            operator delete((void *)__str.__r_.__value_.__l.__size_);
          }
          if ((v215[23] & 0x80000000) != 0) {
            operator delete(*(void **)v215);
          }
          uint64_t v143 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&__str, &byte_2140B33BB);
          *uint64_t v143 = byte_26C4DF190;
          uint64_t v144 = (std::string *)(v143 + 1);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v144, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v166 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
            v143[3] = *((void *)&__str.__r_.__value_.__l + 2);
            *(_OWORD *)&v144->__r_.__value_.__l.__data_ = v166;
          }
          *uint64_t v143 = &unk_26C4E13E0;
        }
        if (*(void *)&v236[16] >= *(void *)&v236[8])
        {
          if (v238)
          {
            LOBYTE(v213[0]) = 0;
            TBuffer<char>::insert((uint64_t)v236, *(unint64_t *)&v236[16], (char *)v213, 1uLL);
            --*(void *)&v236[16];
          }
          else if (*(void *)&v236[8])
          {
            *(unsigned char *)(*(void *)&v236[8] + *(void *)v236 - 1) = 0;
          }
        }
        else
        {
          *(unsigned char *)(*(void *)v236 + *(void *)&v236[16]) = 0;
        }
        *(void *)uint64_t v215 = *(void *)v236;
        *(void *)&v215[8] = v43 + 1;
        std::pair<std::string,std::string>::pair[abi:ne180100]<char const*,char const*,0>(&__str, (char **)v215);
        std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v217, (long long *)&__str);
        if (v229 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        char v23 = 0;
      }
      else
      {
        if (*(void *)&v236[16] >= *(void *)&v236[8])
        {
          if (v238)
          {
            v215[0] = 0;
            TBuffer<char>::insert((uint64_t)v236, *(unint64_t *)&v236[16], v215, 1uLL);
            --*(void *)&v236[16];
          }
          else if (*(void *)&v236[8])
          {
            *(unsigned char *)(*(void *)&v236[8] + v42 - 1) = 0;
          }
        }
        else
        {
          *(unsigned char *)(v42 + *(void *)&v236[16]) = 0;
        }
        if (!strcmp(*(const char **)v236, "CODEPAGE"))
        {
          if (*(void *)&__s[16] >= *(void *)&__s[8])
          {
            if (v235)
            {
              v215[0] = 0;
              TBuffer<char>::insert((uint64_t)__s, *(unint64_t *)&__s[16], v215, 1uLL);
              --*(void *)&__s[16];
            }
            else if (*(void *)&__s[8])
            {
              *(unsigned char *)(*(void *)&__s[8] + *(void *)__s - 1) = 0;
            }
          }
          else
          {
            *(unsigned char *)(*(void *)__s + *(void *)&__s[16]) = 0;
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, *(char **)__s);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          {
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
            if (__str.__r_.__value_.__l.__size_ != 4)
            {
              if (__str.__r_.__value_.__l.__size_ == 5)
              {
                if (*(_DWORD *)__str.__r_.__value_.__l.__data_ != 759583829
                  || *(unsigned char *)(__str.__r_.__value_.__r.__words[0] + 4) != 56)
                {
                  goto LABEL_403;
                }
                int v62 = 2;
              }
              else
              {
                if (__str.__r_.__value_.__l.__size_ != 7) {
                  goto LABEL_403;
                }
                if (*(_DWORD *)__str.__r_.__value_.__l.__data_ != 1769234764
                  || *(_DWORD *)(__str.__r_.__value_.__r.__words[0] + 3) != 1227714153)
                {
                  goto LABEL_403;
                }
LABEL_225:
                int v62 = 1;
              }
              int v211 = v62;
              operator delete(__str.__r_.__value_.__l.__data_);
              goto LABEL_188;
            }
            if (*(_DWORD *)__str.__r_.__value_.__l.__data_ != 842347057) {
              goto LABEL_403;
            }
            goto LABEL_225;
          }
          if (HIBYTE(__str.__r_.__value_.__r.__words[2]) != 4)
          {
            if (HIBYTE(__str.__r_.__value_.__r.__words[2]) == 5)
            {
              if (LODWORD(__str.__r_.__value_.__l.__data_) != 759583829 || __str.__r_.__value_.__s.__data_[4] != 56)
              {
LABEL_402:
                p_str = &__str;
LABEL_403:
                tknPrintf("Error: '%s' : Invalid codepage.\n", v52, v53, v54, v55, p_str);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__str.__r_.__value_.__l.__data_);
                }
                uint64_t v167 = (void *)((char *)this + 16);
                if (*((char *)this + 39) < 0) {
                  uint64_t v167 = (void *)*v167;
                }
                uint64_t v168 = TBuffer<char>::c_str((uint64_t)__s);
                tknPrintf("Error: File '%s' : '%s' : Invalid codepage\n", v169, v170, v171, v172, v167, v168);
                std::string::basic_string[abi:ne180100]<0>(v215, &byte_2140B33BB);
                __str.__r_.__value_.__r.__words[0] = (std::string::size_type)byte_26C4DF190;
                if ((v215[23] & 0x80000000) != 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)&__str.__r_.__value_.__r.__words[1], *(const std::string::value_type **)v215, *(std::string::size_type *)&v215[8]);
                }
                else
                {
                  *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = *(_OWORD *)v215;
                  __p[0] = *(void **)&v215[16];
                }
                __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C4E2478;
                if (SHIBYTE(__p[0]) >= 0) {
                  uint64_t v207 = &__str.__r_.__value_.__s.__data_[8];
                }
                else {
                  uint64_t v207 = (const char *)__str.__r_.__value_.__l.__size_;
                }
                conditionalAssert(v207, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 367, v173, v174);
                __str.__r_.__value_.__r.__words[0] = (std::string::size_type)byte_26C4DF190;
                if (SHIBYTE(__p[0]) < 0) {
                  operator delete((void *)__str.__r_.__value_.__l.__size_);
                }
                if ((v215[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v215);
                }
                uint64_t v208 = __cxa_allocate_exception(0x20uLL);
                std::string::basic_string[abi:ne180100]<0>(&__str, &byte_2140B33BB);
                *uint64_t v208 = byte_26C4DF190;
                uint64_t v209 = (std::string *)(v208 + 1);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::__init_copy_ctor_external(v209, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
                }
                else
                {
                  long long v210 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
                  v208[3] = *((void *)&__str.__r_.__value_.__l + 2);
                  *(_OWORD *)&v209->__r_.__value_.__l.__data_ = v210;
                }
                *uint64_t v208 = &unk_26C4E2478;
              }
              int v60 = 2;
            }
            else
            {
              if (HIBYTE(__str.__r_.__value_.__r.__words[2]) != 7) {
                goto LABEL_402;
              }
              if (LODWORD(__str.__r_.__value_.__l.__data_) != 1769234764
                || *(_DWORD *)((char *)__str.__r_.__value_.__r.__words + 3) != 1227714153)
              {
                goto LABEL_402;
              }
LABEL_216:
              int v60 = 1;
            }
            int v211 = v60;
            goto LABEL_188;
          }
          if (LODWORD(__str.__r_.__value_.__l.__data_) != 842347057) {
            goto LABEL_402;
          }
          goto LABEL_216;
        }
LABEL_188:
        char v23 = 0;
        if (getNextToken(v29, (uint64_t)__s, " "))
        {
          uint64_t v122 = (void *)((char *)this + 16);
          if (*((char *)this + 39) < 0) {
            uint64_t v122 = (void *)*v122;
          }
          uint64_t v123 = TBuffer<char>::c_str((uint64_t)&__s1);
          tknPrintf("Error: File '%s' : %s : Syntax error in header\n", v124, v125, v126, v127, v122, v123);
          std::string::basic_string[abi:ne180100]<0>(v215, &byte_2140B33BB);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)byte_26C4DF190;
          if ((v215[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&__str.__r_.__value_.__r.__words[1], *(const std::string::value_type **)v215, *(std::string::size_type *)&v215[8]);
          }
          else
          {
            *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = *(_OWORD *)v215;
            __p[0] = *(void **)&v215[16];
          }
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C4E13E0;
          if (SHIBYTE(__p[0]) >= 0) {
            uint64_t v175 = &__str.__r_.__value_.__s.__data_[8];
          }
          else {
            uint64_t v175 = (const char *)__str.__r_.__value_.__l.__size_;
          }
          conditionalAssert(v175, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 375, v128, v129);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)byte_26C4DF190;
          if (SHIBYTE(__p[0]) < 0) {
            operator delete((void *)__str.__r_.__value_.__l.__size_);
          }
          if ((v215[23] & 0x80000000) != 0) {
            operator delete(*(void **)v215);
          }
          uint64_t v176 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&__str, &byte_2140B33BB);
          *uint64_t v176 = byte_26C4DF190;
          uint64_t v177 = (std::string *)(v176 + 1);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v177, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v199 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
            v176[3] = *((void *)&__str.__r_.__value_.__l + 2);
            *(_OWORD *)&v177->__r_.__value_.__l.__data_ = v199;
          }
          *uint64_t v176 = &unk_26C4E13E0;
        }
      }
    }
    if ((v23 & 1) == 0)
    {
      uint64_t v155 = (void *)((char *)this + 16);
      if (*((char *)this + 39) < 0) {
        uint64_t v155 = (void *)*v155;
      }
      tknPrintf("Error: '%s' : VERSION must be the first line in header\n", v36, v37, v38, v39, v155);
      std::string::basic_string[abi:ne180100]<0>(v215, &byte_2140B33BB);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)byte_26C4DF190;
      if ((v215[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__str.__r_.__value_.__r.__words[1], *(const std::string::value_type **)v215, *(std::string::size_type *)&v215[8]);
      }
      else
      {
        *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = *(_OWORD *)v215;
        __p[0] = *(void **)&v215[16];
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C4E13E0;
      if (SHIBYTE(__p[0]) >= 0) {
        uint64_t v193 = &__str.__r_.__value_.__s.__data_[8];
      }
      else {
        uint64_t v193 = (const char *)__str.__r_.__value_.__l.__size_;
      }
      conditionalAssert(v193, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 317, v156, v157);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)byte_26C4DF190;
      if (SHIBYTE(__p[0]) < 0) {
        operator delete((void *)__str.__r_.__value_.__l.__size_);
      }
      if ((v215[23] & 0x80000000) != 0) {
        operator delete(*(void **)v215);
      }
      uint64_t v194 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(&__str, &byte_2140B33BB);
      *uint64_t v194 = byte_26C4DF190;
      uint64_t v195 = (std::string *)(v194 + 1);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v195, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v205 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        v194[3] = *((void *)&__str.__r_.__value_.__l + 2);
        *(_OWORD *)&v195->__r_.__value_.__l.__data_ = v205;
      }
      *uint64_t v194 = &unk_26C4E13E0;
    }
    if (*(void *)&__s[16] >= *(void *)&__s[8])
    {
      if (v235)
      {
        v215[0] = 0;
        TBuffer<char>::insert((uint64_t)__s, *(unint64_t *)&__s[16], v215, 1uLL);
        --*(void *)&__s[16];
      }
      else if (*(void *)&__s[8])
      {
        *(unsigned char *)(*(void *)&__s[8] + *(void *)__s - 1) = 0;
      }
    }
    else
    {
      *(unsigned char *)(*(void *)__s + *(void *)&__s[16]) = 0;
    }
    if (atol(*(const char **)__s) != 1)
    {
      uint64_t v158 = (void *)((char *)this + 16);
      if (*((char *)this + 39) < 0) {
        uint64_t v158 = (void *)*v158;
      }
      tknPrintf("Error: '%s' : VERSION must be 1\n", v44, v45, v46, v47, v158);
      std::string::basic_string[abi:ne180100]<0>(v215, &byte_2140B33BB);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)byte_26C4DF190;
      if ((v215[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__str.__r_.__value_.__r.__words[1], *(const std::string::value_type **)v215, *(std::string::size_type *)&v215[8]);
      }
      else
      {
        *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = *(_OWORD *)v215;
        __p[0] = *(void **)&v215[16];
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C4E2478;
      if (SHIBYTE(__p[0]) >= 0) {
        uint64_t v196 = &__str.__r_.__value_.__s.__data_[8];
      }
      else {
        uint64_t v196 = (const char *)__str.__r_.__value_.__l.__size_;
      }
      conditionalAssert(v196, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 325, v159, v160);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)byte_26C4DF190;
      if (SHIBYTE(__p[0]) < 0) {
        operator delete((void *)__str.__r_.__value_.__l.__size_);
      }
      if ((v215[23] & 0x80000000) != 0) {
        operator delete(*(void **)v215);
      }
      uint64_t v197 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(&__str, &byte_2140B33BB);
      *uint64_t v197 = byte_26C4DF190;
      unsigned int v198 = (std::string *)(v197 + 1);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v198, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v206 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        v197[3] = *((void *)&__str.__r_.__value_.__l + 2);
        *(_OWORD *)&v198->__r_.__value_.__l.__data_ = v206;
      }
      *uint64_t v197 = &unk_26C4E2478;
    }
    goto LABEL_188;
  }
  long long v218 = 0u;
  long long v219 = 0u;
  long long v220 = 0u;
  long long v221 = 0u;
  long long v222 = 0u;
  long long v223 = 0u;
  long long v224 = 0u;
  long long v225 = 0u;
  uint64_t v226 = v3;
  std::istream::seekg();
  uint64_t v2 = 0;
LABEL_258:
  if (v242 && __s1 != v241 && __s1) {
    MEMORY[0x216698730]();
  }
  return v2;
}

void sub_213EB7CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,void *a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,void *a47,int a48,__int16 a49,char a50,char a51)
{
  if (a51 < 0)
  {
    operator delete(__p);
    if ((v52 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v52)
  {
LABEL_6:
    std::wstring __p = &a26;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (LOBYTE(STACK[0x660]))
    {
      if (STACK[0x548] != a12 && STACK[0x548] != 0) {
        MEMORY[0x216698730]();
      }
    }
    if (LOBYTE(STACK[0x780]))
    {
      unint64_t v55 = STACK[0x668];
      if (STACK[0x668] != a13)
      {
        if (v55) {
          MEMORY[0x216698730](v55, 0x1000C4077774924);
        }
      }
    }
    if (LOBYTE(STACK[0x8A0]))
    {
      unint64_t v56 = STACK[0x788];
      if (STACK[0x788] != a16)
      {
        if (v56) {
          MEMORY[0x216698730](v56, 0x1000C4077774924);
        }
      }
    }
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v51);
  goto LABEL_6;
}

BOOL TInputStream::getNextLine(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v3 = (const char **)(a1 + 104);
  int v4 = (std::locale::id *)MEMORY[0x263F8C108];
  uint64_t v5 = MEMORY[0x263EF8318];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)(*(void *)a1 + *(void *)(**(void **)a1 - 24)));
    uint64_t v6 = std::locale::use_facet(&v23, v4);
    ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
    std::locale::~locale(&v23);
    uint64_t v7 = (void *)std::istream::getline();
    int v8 = *(_DWORD *)((unsigned char *)v7 + *(void *)(*v7 - 24) + 32) & 5;
    if (v8) {
      return v8 == 0;
    }
    ++*(void *)(a1 + 64);
    if (*(char *)(a1 + 127) < 0)
    {
      if (*(void *)(a1 + 112))
      {
        uint64_t v9 = *v3;
LABEL_8:
        uint64_t v10 = strstr(__s1, v9);
        if (v10) {
          *uint64_t v10 = 0;
        }
      }
    }
    else
    {
      uint64_t v9 = (const char *)v3;
      if (*(unsigned char *)(a1 + 127)) {
        goto LABEL_8;
      }
    }
    unsigned int v11 = __s1[0];
    if (__s1[0])
    {
      uint64_t v12 = __s1;
      do
      {
        if ((v11 & 0x80) != 0) {
          int v13 = __maskrune(v11, 0x4000uLL);
        }
        else {
          int v13 = *(_DWORD *)(v5 + 4 * v11 + 60) & 0x4000;
        }
        if (!v13) {
          break;
        }
        unsigned int v14 = *++v12;
        unsigned int v11 = v14;
      }
      while (v14);
    }
    else
    {
      uint64_t v12 = __s1;
    }
    uint64_t v15 = &__s1[strlen(__s1)];
    unint64_t v16 = v15 - v12;
    do
    {
      uint64_t v17 = v15;
      unint64_t v18 = v16;
      if (v15 <= v12) {
        break;
      }
      --v15;
      uint64_t v19 = *(v17 - 1);
      int v20 = *(v17 - 1) < 0 ? __maskrune(v19, 0x4000uLL) : *(_DWORD *)(v5 + 4 * v19 + 60) & 0x4000;
      unint64_t v16 = v18 - 1;
    }
    while (v20);
    if (v17 != v12)
    {
      TBuffer<char>::resize(a2, 0);
      TBuffer<char>::insert(a2, 0, v12, v18);
      return v8 == 0;
    }
  }
}

{
  const std::locale::facet *v3;
  void *v4;
  int v5;
  __int32 *v6;
  const __int32 *v7;
  __int32 *v8;
  __int32 *v9;
  unint64_t v10;
  int v11;
  unint64_t v15;
  int v16;
  __int32 *v19;
  const __int32 **v22;
  __int32 *__s1;
  long long v24;
  unsigned char v25[1024];
  char v26;
  std::locale v27;
  unsigned __int8 v28[2048];
  uint64_t v29;

  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v22 = (const __int32 **)(a1 + 128);
  __s1 = (__int32 *)v25;
  uint64_t v24 = xmmword_214085190;
  uint64_t v26 = 1;
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)(*(void *)a1 + *(void *)(**(void **)a1 - 24)));
    uint64_t v3 = std::locale::use_facet(&v27, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
    std::locale::~locale(&v27);
    int v4 = (void *)std::istream::getline();
    uint64_t v5 = *(_DWORD *)((unsigned char *)v4 + *(void *)(*v4 - 24) + 32) & 5;
    if (v5) {
      goto LABEL_78;
    }
    ++*(void *)(a1 + 64);
    TBuffer<wchar_t>::resize((uint64_t)&__s1, 0);
    TLocaleInfo::multiByteToUnicode(*(void *)(a1 + 176), v28, (uint64_t)&__s1);
    if (*(char *)(a1 + 151) < 0)
    {
      if (*(void *)(a1 + 136))
      {
LABEL_7:
        if (*((void *)&v24 + 1) >= (unint64_t)v24)
        {
          if (v26)
          {
            LODWORD(v27.__locale_) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&__s1, *((unint64_t *)&v24 + 1), (int *)&v27, 1uLL);
            uint64_t v6 = __s1;
            --*((void *)&v24 + 1);
          }
          else
          {
            uint64_t v6 = __s1;
            if ((void)v24) {
              __s1[(void)v24 - 1] = 0;
            }
          }
        }
        else
        {
          uint64_t v6 = __s1;
          __s1[*((void *)&v24 + 1)] = 0;
        }
        uint64_t v7 = (const __int32 *)v22;
        if (*(char *)(a1 + 151) < 0) {
          uint64_t v7 = *v22;
        }
        int v8 = wcsstr(v6, v7);
        if (v8)
        {
          if (*((void *)&v24 + 1) >= (unint64_t)v24)
          {
            if (v26)
            {
              LODWORD(v27.__locale_) = 0;
              TBuffer<wchar_t>::insert((uint64_t)&__s1, *((unint64_t *)&v24 + 1), (int *)&v27, 1uLL);
              uint64_t v9 = __s1;
              --*((void *)&v24 + 1);
            }
            else
            {
              uint64_t v9 = __s1;
              if ((void)v24) {
                __s1[(void)v24 - 1] = 0;
              }
            }
          }
          else
          {
            uint64_t v9 = __s1;
            __s1[*((void *)&v24 + 1)] = 0;
          }
          TBuffer<wchar_t>::resize((uint64_t)&__s1, v8 - v9);
        }
      }
    }
    else if (*(unsigned char *)(a1 + 151))
    {
      goto LABEL_7;
    }
    if (*((void *)&v24 + 1))
    {
      uint64_t v10 = 0;
      while (1)
      {
        unsigned int v11 = __s1[v10];
        {
          operator new();
        }
        if (v11 <= 159)
        {
          if (v11 > 0x20 || ((1 << v11) & 0x100002600) == 0) {
            goto LABEL_48;
          }
          goto LABEL_44;
        }
        if (v11 >= 12288) {
          break;
        }
        if (v11 != 160 && v11 != 8203) {
          goto LABEL_48;
        }
LABEL_44:
        ++v10;
        uint64_t v15 = *((void *)&v24 + 1);
        if (v10 >= *((void *)&v24 + 1)) {
          goto LABEL_49;
        }
      }
      if (v11 == 12288 || v11 == 65279) {
        goto LABEL_44;
      }
LABEL_48:
      uint64_t v15 = *((void *)&v24 + 1);
LABEL_49:
      if (v15 > v10)
      {
        do
        {
          unint64_t v16 = __s1[v15 - 1];
          {
            operator new();
          }
          if (v16 > 159)
          {
            if (v16 >= 12288)
            {
              if (v16 != 65279 && v16 != 12288) {
                goto LABEL_70;
              }
            }
            else if (v16 != 160 && v16 != 8203)
            {
              goto LABEL_70;
            }
          }
          else if (v16 > 0x20 || ((1 << v16) & 0x100002600) == 0)
          {
            goto LABEL_70;
          }
          --v15;
        }
        while (v15 > v10);
        uint64_t v15 = v10;
      }
LABEL_70:
      if (v15 != v10) {
        break;
      }
    }
  }
  if (*((void *)&v24 + 1) >= (unint64_t)v24)
  {
    if (v26)
    {
      LODWORD(v27.__locale_) = 0;
      TBuffer<wchar_t>::insert((uint64_t)&__s1, *((unint64_t *)&v24 + 1), (int *)&v27, 1uLL);
      uint64_t v19 = __s1;
      --*((void *)&v24 + 1);
    }
    else
    {
      uint64_t v19 = __s1;
      if ((void)v24) {
        __s1[(void)v24 - 1] = 0;
      }
    }
  }
  else
  {
    uint64_t v19 = __s1;
    __s1[*((void *)&v24 + 1)] = 0;
  }
  TBuffer<wchar_t>::resize(a2, 0);
  TBuffer<wchar_t>::insert(a2, 0, &v19[v10], v15 - v10);
LABEL_78:
  if (v26 && __s1 != (__int32 *)v25 && __s1) {
    MEMORY[0x216698730]();
  }
  return v5 == 0;
}

void sub_213EB82DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](std::vector<std::pair<std::string, std::string>> *a1, long long *a2)
{
  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::pair<std::string, std::string>> *)&a1->__end_cap_;
  uint64_t v5 = value;
  unint64_t v7 = *((void *)p_end_cap - 1);
  if (v7 >= (unint64_t)value)
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (unint64_t)a1->__begin_) >> 4);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555) {
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)a1->__begin_) >> 4);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v14 = 0x555555555555555;
    }
    else {
      unint64_t v14 = v12;
    }
    __v.__end_cap_.__value_ = p_end_cap;
    if (v14) {
      uint64_t v15 = (std::pair<std::string, std::string> *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>((uint64_t)p_end_cap, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    unint64_t v16 = v15 + v11;
    __v.__first_ = v15;
    __v.__begin_ = v16;
    __v.__end_cap_.__value_ = &v15[v14];
    long long v17 = *a2;
    v16->first.__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v16->first.__r_.__value_.__l.__data_ = v17;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v18 = *(long long *)((char *)a2 + 24);
    v16->second.__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v16->second.__r_.__value_.__l.__data_ = v18;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    __v.__end_ = v16 + 1;
    std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(a1, &__v);
    std::vector<int>::pointer end = a1->__end_;
    std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(&__v);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v9 = *(long long *)((char *)a2 + 24);
    *(void *)(v7 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = *((void *)a2 + 5);
    *(_OWORD *)(v7 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = v9;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    std::vector<int>::pointer end = (std::pair<std::string, std::string> *)(v7 + 48);
    a1->__end_ = (std::vector<std::pair<std::string, std::string>>::pointer)(v7 + 48);
  }
  a1->__end_ = end;
}

void sub_213EB8450(_Unwind_Exception *a1, std::__split_buffer<std::pair<std::string, std::string>> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

BOOL TInputStream::isParameter(TInputStream *this, char *a2)
{
  uint64_t v3 = (char *)this + 152;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  int v4 = (TInputStream *)std::__tree<std::__value_type<std::string,std::wstring>,std::__map_value_compare<std::string,std::__value_type<std::string,std::wstring>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::wstring>>>::find<std::string>((uint64_t)v3, (const void **)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return (TInputStream *)((char *)this + 160) != v4;
}

void sub_213EB8508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_213EB89CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (LOBYTE(STACK[0x440]))
  {
    if (a14 != a11 && a14 != 0) {
      MEMORY[0x216698730]();
    }
  }
  _Unwind_Resume(a1);
}

uint64_t TInputStream::getBoolParameter(TInputStream *this, char *a2, uint64_t a3)
{
  uint64_t v6 = (char *)this + 152;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  char v7 = (char *)std::__tree<std::__value_type<std::string,std::wstring>,std::__map_value_compare<std::string,std::__value_type<std::string,std::wstring>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::wstring>>>::find<std::string>((uint64_t)v6, (const void **)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  if ((char *)this + 160 != v7)
  {
    BOOL v25 = 0;
    long long v8 = v7 + 56;
    if (v7[79] < 0) {
      long long v8 = (void *)*v8;
    }
    {
      operator new();
    }
    uint64_t v9 = TLocaleInfo::stringToBool(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, (uint64_t)v8, &v25);
    if (v25)
    {
      tknPrintf("Error: Expected Boolean value for '%s'\n", v10, v11, v12, v13, a2);
      std::string::basic_string[abi:ne180100]<0>(v21, &byte_2140B33BB);
      *(void *)std::wstring __p = byte_26C4DF190;
      if (SHIBYTE(v22) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v21[0], (std::string::size_type)v21[1]);
      }
      else
      {
        *(_OWORD *)&__p[8] = *(_OWORD *)v21;
        uint64_t v24 = v22;
      }
      *(void *)std::wstring __p = &unk_26C4E0710;
      if (v24 >= 0) {
        long long v17 = &__p[8];
      }
      else {
        long long v17 = *(const char **)&__p[8];
      }
      conditionalAssert(v17, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 525, v15, v16);
      *(void *)std::wstring __p = byte_26C4DF190;
      if (SHIBYTE(v24) < 0) {
        operator delete(*(void **)&__p[8]);
      }
      if (SHIBYTE(v22) < 0) {
        operator delete(v21[0]);
      }
      exception = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
      void *exception = byte_26C4DF190;
      uint64_t v19 = (std::string *)(exception + 1);
      if ((__p[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
      }
      else
      {
        long long v20 = *(_OWORD *)__p;
        exception[3] = *(void *)&__p[16];
        *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
      }
      void *exception = &unk_26C4E0710;
    }
    return v9;
  }
  return a3;
}

void sub_213EB8CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, void *a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26)
{
  MEMORY[0x216698730](v26, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TInputStream::getStringParameter(uint64_t a1, char *a2, uint64_t a3, int *a4)
{
  uint64_t v7 = a1 + 152;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  uint64_t v8 = std::__tree<std::__value_type<std::string,std::wstring>,std::__map_value_compare<std::string,std::__value_type<std::string,std::wstring>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::wstring>>>::find<std::string>(v7, (const void **)__p);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (a1 + 160 != v8)
  {
    a4 = (int *)(v8 + 56);
    if (*(char *)(v8 + 79) < 0) {
      a4 = *(int **)a4;
    }
  }
  return TBuffer<wchar_t>::assign(a3, a4);
}

void sub_213EB8E20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TOutputStream::operator<<(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  long long __s = v9;
  long long v8 = xmmword_214085190;
  char v10 = 1;
  TLocaleInfo::unicodeToMultiByte(*(void *)(a1 + 16), a2, (uint64_t)&__s);
  uint64_t v3 = *(void **)a1;
  if (*((void *)&v8 + 1) >= (unint64_t)v8)
  {
    if (v10)
    {
      char v6 = 0;
      TBuffer<char>::insert((uint64_t)&__s, *((unint64_t *)&v8 + 1), &v6, 1uLL);
      --*((void *)&v8 + 1);
    }
    else if ((void)v8)
    {
      __s[(void)v8 - 1] = 0;
    }
  }
  else
  {
    __s[*((void *)&v8 + 1)] = 0;
  }
  size_t v4 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)__s, v4);
  if (v10 && __s != v9 && __s) {
    MEMORY[0x216698730]();
  }
  return a1;
}

void sub_213EB8F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  if (a45) {
    TPToken_Tokenize_cold_1(&a10, v45);
  }
  _Unwind_Resume(exception_object);
}

void *TOutputStream::writeHeader(void **a1, const char *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  long long v8 = *(const char **)(a3 + 32 * a4 - 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a1, (uint64_t)"HEADER_BEGIN\n", 13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a1, (uint64_t)"  VERSION 1\n", 12);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a1, (uint64_t)"  FILE_TYPE ", 12);
  size_t v10 = strlen(a2);
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)a2, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a1, (uint64_t)"  FILE_VERSION ", 15);
  if (*v8)
  {
    size_t v12 = strlen(v8);
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a1, (uint64_t)v8, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)".", 1);
  }
  unint64_t v14 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\n", 1);
  uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a1, (uint64_t)"  CODEPAGE ", 11);
  if (*((_DWORD *)a1[2] + 16) == 2) {
    uint64_t v16 = "UTF-8";
  }
  else {
    uint64_t v16 = "1252";
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, v16);
  if (v38 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if (v38 >= 0) {
    uint64_t v18 = HIBYTE(v38);
  }
  else {
    uint64_t v18 = v38;
  }
  uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)p_p, v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n", 1);
  if (SHIBYTE(v38) < 0)
  {
    operator delete(__p);
    if (!a5) {
      return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a1, (uint64_t)"HEADER_END\n", 11);
    }
  }
  else if (!a5)
  {
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a1, (uint64_t)"HEADER_END\n", 11);
  }
  uint64_t v22 = (void *)*a5;
  long long v20 = a5 + 1;
  uint64_t v21 = v22;
  std::wstring __p = v39;
  long long v38 = xmmword_214085190;
  char v40 = 1;
  if (v22 == v20) {
    goto LABEL_38;
  }
  do
  {
    TBuffer<char>::resize((uint64_t)&__p, 0);
    std::locale v23 = (unsigned int *)(v21 + 7);
    if (*((char *)v21 + 79) < 0) {
      std::locale v23 = *(unsigned int **)v23;
    }
    TLocaleInfo::unicodeToMultiByte((uint64_t)a1[2], v23, (uint64_t)&__p);
    uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a1, (uint64_t)"  PARAMETER ", 12);
    int v25 = *((char *)v21 + 55);
    if (v25 >= 0) {
      uint64_t v26 = (uint64_t)(v21 + 4);
    }
    else {
      uint64_t v26 = v21[4];
    }
    if (v25 >= 0) {
      uint64_t v27 = *((unsigned __int8 *)v21 + 55);
    }
    else {
      uint64_t v27 = v21[5];
    }
    uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, v26, v27);
    uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"=", 1);
    if (*((void *)&v38 + 1) >= (unint64_t)v38)
    {
      if (v40)
      {
        char v36 = 0;
        TBuffer<char>::insert((uint64_t)&__p, *((unint64_t *)&v38 + 1), &v36, 1uLL);
        --*((void *)&v38 + 1);
      }
      else if ((void)v38)
      {
        *((char *)__p + v38 - 1) = 0;
      }
    }
    else
    {
      *((unsigned char *)__p + *((void *)&v38 + 1)) = 0;
    }
    size_t v30 = strlen((const char *)__p);
    uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)__p, v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"\n", 1);
    uint64_t v32 = (void *)v21[1];
    if (v32)
    {
      do
      {
        uint64_t v33 = v32;
        uint64_t v32 = (void *)*v32;
      }
      while (v32);
    }
    else
    {
      do
      {
        uint64_t v33 = (void *)v21[2];
        BOOL v34 = *v33 == (void)v21;
        uint64_t v21 = v33;
      }
      while (!v34);
    }
    uint64_t v21 = v33;
  }
  while (v33 != v20);
  if (v40)
  {
LABEL_38:
    BOOL v34 = __p == v39 || __p == 0;
    if (!v34) {
      MEMORY[0x216698730]();
    }
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a1, (uint64_t)"HEADER_END\n", 11);
}

void sub_213EB9318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void TInputModel::TInputModel(TInputModel *this, const TDataManager *a2, const TDataManager *a3, char a4, const char *a5)
{
  *(void *)this = a2;
  *((void *)this + 1) = a3;
  int IntVar = TInputModel::getIntVar((TDataManager **)this, "Version", 1);
  *((void *)this + 2) = IntVar;
  if ((IntVar - 3) <= 0xFFFFFFFD)
  {
    tknPrintf("Error: %llu : Expected %s in range [%llu,%llu]\n", v8, v9, v10, v11, IntVar, "Version", 1, 2);
    std::string::basic_string[abi:ne180100]<0>(__s1, &byte_2140B33BB);
    *(void *)uint64_t v109 = byte_26C4DF190;
    if (SHIBYTE(v108) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v109[8], (const std::string::value_type *)__s1[0], (std::string::size_type)__s1[1]);
    }
    else
    {
      *(_OWORD *)&v109[8] = *(_OWORD *)__s1;
      uint64_t v110 = v108;
    }
    *(void *)uint64_t v109 = &unk_26C4E0710;
    if (v110 >= 0) {
      uint64_t v37 = &v109[8];
    }
    else {
      uint64_t v37 = *(const char **)&v109[8];
    }
    conditionalAssert(v37, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 609, v35, v36);
    *(void *)uint64_t v109 = byte_26C4DF190;
    if (SHIBYTE(v110) < 0) {
      operator delete(*(void **)&v109[8]);
    }
    if (SHIBYTE(v108) < 0) {
      operator delete(__s1[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v109, &byte_2140B33BB);
    void *exception = byte_26C4DF190;
    uint64_t v39 = (std::string *)(exception + 1);
    if ((v109[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v39, *(const std::string::value_type **)v109, *(std::string::size_type *)&v109[8]);
    }
    else
    {
      long long v85 = *(_OWORD *)v109;
      exception[3] = *(void *)&v109[16];
      *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v85;
    }
    void *exception = &unk_26C4E0710;
  }
  if (IntVar == 2)
  {
    uint64_t v16 = *((void *)this + 1);
    if (v16)
    {
      if (!(*(uint64_t (**)(uint64_t, const char *, void, void))(*(void *)v16 + 40))(v16, "Version", 0, 0))
      {
        tknPrintf("Error: bad model. Couldn't locate %s in static component.\n", v17, v18, v19, v20, "Version");
        std::string::basic_string[abi:ne180100]<0>(__s1, &byte_2140B33BB);
        *(void *)uint64_t v109 = byte_26C4DF190;
        if (SHIBYTE(v108) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v109[8], (const std::string::value_type *)__s1[0], (std::string::size_type)__s1[1]);
        }
        else
        {
          *(_OWORD *)&v109[8] = *(_OWORD *)__s1;
          uint64_t v110 = v108;
        }
        *(void *)uint64_t v109 = &unk_26C4E0710;
        if (v110 >= 0) {
          uint64_t v67 = &v109[8];
        }
        else {
          uint64_t v67 = *(const char **)&v109[8];
        }
        conditionalAssert(v67, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 683, v46, v47);
        *(void *)uint64_t v109 = byte_26C4DF190;
        if (SHIBYTE(v110) < 0) {
          operator delete(*(void **)&v109[8]);
        }
        if (SHIBYTE(v108) < 0) {
          operator delete(__s1[0]);
        }
        uint64_t v68 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v109, &byte_2140B33BB);
        *uint64_t v68 = byte_26C4DF190;
        uint64_t v69 = (std::string *)(v68 + 1);
        if ((v109[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v69, *(const std::string::value_type **)v109, *(std::string::size_type *)&v109[8]);
        }
        else
        {
          long long v97 = *(_OWORD *)v109;
          v68[3] = *(void *)&v109[16];
          *(_OWORD *)&v69->__r_.__value_.__l.__data_ = v97;
        }
        *uint64_t v68 = &unk_26C4E0710;
      }
      if ((TDataManager::getBoolVar(*((TDataManager **)this + 1), "IsStaticComponent", 0) & 1) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__s1, "Bad static data spec");
        *(void *)uint64_t v109 = byte_26C4DF190;
        if (SHIBYTE(v108) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v109[8], (const std::string::value_type *)__s1[0], (std::string::size_type)__s1[1]);
        }
        else
        {
          *(_OWORD *)&v109[8] = *(_OWORD *)__s1;
          uint64_t v110 = v108;
        }
        *(void *)uint64_t v109 = &unk_26C4E0710;
        if (v110 >= 0) {
          uint64_t v70 = &v109[8];
        }
        else {
          uint64_t v70 = *(const char **)&v109[8];
        }
        conditionalAssert(v70, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 689, v48, v49);
        *(void *)uint64_t v109 = byte_26C4DF190;
        if (SHIBYTE(v110) < 0) {
          operator delete(*(void **)&v109[8]);
        }
        if (SHIBYTE(v108) < 0) {
          operator delete(__s1[0]);
        }
        std::string::size_type v71 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v109, "Bad static data spec");
        void *v71 = byte_26C4DF190;
        uint64_t v72 = (std::string *)(v71 + 1);
        if ((v109[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v72, *(const std::string::value_type **)v109, *(std::string::size_type *)&v109[8]);
        }
        else
        {
          long long v98 = *(_OWORD *)v109;
          v71[3] = *(void *)&v109[16];
          *(_OWORD *)&v72->__r_.__value_.__l.__data_ = v98;
        }
        void *v71 = &unk_26C4E0710;
      }
    }
    if (*(void *)this)
    {
      if (!(*(uint64_t (**)(void, const char *, void, void))(**(void **)this + 40))(*(void *)this, "Version", 0, 0))
      {
        tknPrintf("Error: bad model. Couldn't locate %s in dynamic component.\n", v21, v22, v23, v24, "Version");
        std::string::basic_string[abi:ne180100]<0>(__s1, &byte_2140B33BB);
        *(void *)uint64_t v109 = byte_26C4DF190;
        if (SHIBYTE(v108) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v109[8], (const std::string::value_type *)__s1[0], (std::string::size_type)__s1[1]);
        }
        else
        {
          *(_OWORD *)&v109[8] = *(_OWORD *)__s1;
          uint64_t v110 = v108;
        }
        *(void *)uint64_t v109 = &unk_26C4E0710;
        if (v110 >= 0) {
          uint64_t v73 = &v109[8];
        }
        else {
          uint64_t v73 = *(const char **)&v109[8];
        }
        conditionalAssert(v73, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 699, v50, v51);
        *(void *)uint64_t v109 = byte_26C4DF190;
        if (SHIBYTE(v110) < 0) {
          operator delete(*(void **)&v109[8]);
        }
        if (SHIBYTE(v108) < 0) {
          operator delete(__s1[0]);
        }
        uint64_t v74 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v109, &byte_2140B33BB);
        *uint64_t v74 = byte_26C4DF190;
        uint64_t v75 = (std::string *)(v74 + 1);
        if ((v109[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v75, *(const std::string::value_type **)v109, *(std::string::size_type *)&v109[8]);
        }
        else
        {
          long long v99 = *(_OWORD *)v109;
          v74[3] = *(void *)&v109[16];
          *(_OWORD *)&v75->__r_.__value_.__l.__data_ = v99;
        }
        *uint64_t v74 = &unk_26C4E0710;
      }
      if (TDataManager::getBoolVar(*(TDataManager **)this, "IsStaticComponent", 0))
      {
        std::string::basic_string[abi:ne180100]<0>(__s1, "Bad dynamic data spec");
        *(void *)uint64_t v109 = byte_26C4DF190;
        if (SHIBYTE(v108) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v109[8], (const std::string::value_type *)__s1[0], (std::string::size_type)__s1[1]);
        }
        else
        {
          *(_OWORD *)&v109[8] = *(_OWORD *)__s1;
          uint64_t v110 = v108;
        }
        *(void *)uint64_t v109 = &unk_26C4E0710;
        if (v110 >= 0) {
          uint64_t v76 = &v109[8];
        }
        else {
          uint64_t v76 = *(const char **)&v109[8];
        }
        conditionalAssert(v76, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 705, v52, v53);
        *(void *)uint64_t v109 = byte_26C4DF190;
        if (SHIBYTE(v110) < 0) {
          operator delete(*(void **)&v109[8]);
        }
        if (SHIBYTE(v108) < 0) {
          operator delete(__s1[0]);
        }
        uint64_t v77 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v109, "Bad dynamic data spec");
        *uint64_t v77 = byte_26C4DF190;
        uint64_t v78 = (std::string *)(v77 + 1);
        if ((v109[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v78, *(const std::string::value_type **)v109, *(std::string::size_type *)&v109[8]);
        }
        else
        {
          long long v100 = *(_OWORD *)v109;
          v77[3] = *(void *)&v109[16];
          *(_OWORD *)&v78->__r_.__value_.__l.__data_ = v100;
        }
        *uint64_t v77 = &unk_26C4E0710;
      }
      if (*(void *)this)
      {
        int v25 = (TDataManager *)*((void *)this + 1);
        if (v25)
        {
          int v26 = TDataManager::getIntVar(v25, "Version", 1);
          if (v26 != TDataManager::getIntVar(*(TDataManager **)this, "Version", 1))
          {
            tknPrintf("Error: %s : Unmatched dynamic and static data specs\n", v27, v28, v29, v30, "Version");
            std::string::basic_string[abi:ne180100]<0>(__s1, &byte_2140B33BB);
            *(void *)uint64_t v109 = byte_26C4DF190;
            if (SHIBYTE(v108) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v109[8], (const std::string::value_type *)__s1[0], (std::string::size_type)__s1[1]);
            }
            else
            {
              *(_OWORD *)&v109[8] = *(_OWORD *)__s1;
              uint64_t v110 = v108;
            }
            *(void *)uint64_t v109 = &unk_26C4E0710;
            if (v110 >= 0) {
              uint64_t v91 = &v109[8];
            }
            else {
              uint64_t v91 = *(const char **)&v109[8];
            }
            conditionalAssert(v91, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 715, v86, v87);
            *(void *)uint64_t v109 = byte_26C4DF190;
            if (SHIBYTE(v110) < 0) {
              operator delete(*(void **)&v109[8]);
            }
            if (SHIBYTE(v108) < 0) {
              operator delete(__s1[0]);
            }
            uint64_t v92 = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(v109, &byte_2140B33BB);
            void *v92 = byte_26C4DF190;
            uint64_t v93 = (std::string *)(v92 + 1);
            if ((v109[23] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external(v93, *(const std::string::value_type **)v109, *(std::string::size_type *)&v109[8]);
            }
            else
            {
              long long v104 = *(_OWORD *)v109;
              v92[3] = *(void *)&v109[16];
              *(_OWORD *)&v93->__r_.__value_.__l.__data_ = v104;
            }
            void *v92 = &unk_26C4E0710;
          }
          __s1[0] = 0;
          __s1[1] = 0;
          uint64_t v108 = 0;
          TDataManager::getStringVar(*(void *)this);
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v106 = 0;
          TDataManager::getStringVar(*((void *)this + 1));
        }
      }
    }
    if (g_bCheckVocCompatibility)
    {
      __s1[0] = 0;
      __s1[1] = 0;
      TInputModel::getStringVar((uint64_t *)this, (uint64_t)"VocVersionID");
    }
  }
  else if (IntVar == 1)
  {
    if (!*(void *)this)
    {
      tknPrintf("Error: Bad model. %s is 1 but there is not dynamic component.\n", v8, v9, v10, v11, "Version");
      std::string::basic_string[abi:ne180100]<0>(__s1, &byte_2140B33BB);
      *(void *)uint64_t v109 = byte_26C4DF190;
      if (SHIBYTE(v108) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v109[8], (const std::string::value_type *)__s1[0], (std::string::size_type)__s1[1]);
      }
      else
      {
        *(_OWORD *)&v109[8] = *(_OWORD *)__s1;
        uint64_t v110 = v108;
      }
      *(void *)uint64_t v109 = &unk_26C4E0710;
      if (v110 >= 0) {
        uint64_t v58 = &v109[8];
      }
      else {
        uint64_t v58 = *(const char **)&v109[8];
      }
      conditionalAssert(v58, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 617, v40, v41);
      *(void *)uint64_t v109 = byte_26C4DF190;
      if (SHIBYTE(v110) < 0) {
        operator delete(*(void **)&v109[8]);
      }
      if (SHIBYTE(v108) < 0) {
        operator delete(__s1[0]);
      }
      uint64_t v59 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v109, &byte_2140B33BB);
      *uint64_t v59 = byte_26C4DF190;
      int v60 = (std::string *)(v59 + 1);
      if ((v109[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v60, *(const std::string::value_type **)v109, *(std::string::size_type *)&v109[8]);
      }
      else
      {
        long long v94 = *(_OWORD *)v109;
        v59[3] = *(void *)&v109[16];
        *(_OWORD *)&v60->__r_.__value_.__l.__data_ = v94;
      }
      *uint64_t v59 = &unk_26C4E0710;
    }
    if (!(*(uint64_t (**)(void, const char *, void, void))(**(void **)this + 40))(*(void *)this, "Version", 0, 0))
    {
      tknPrintf("Error: Bad model. Couldn't locate %s\n", v12, v13, v14, v15, "Version");
      std::string::basic_string[abi:ne180100]<0>(__s1, &byte_2140B33BB);
      *(void *)uint64_t v109 = byte_26C4DF190;
      if (SHIBYTE(v108) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v109[8], (const std::string::value_type *)__s1[0], (std::string::size_type)__s1[1]);
      }
      else
      {
        *(_OWORD *)&v109[8] = *(_OWORD *)__s1;
        uint64_t v110 = v108;
      }
      *(void *)uint64_t v109 = &unk_26C4E0710;
      if (v110 >= 0) {
        uint64_t v61 = &v109[8];
      }
      else {
        uint64_t v61 = *(const char **)&v109[8];
      }
      conditionalAssert(v61, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 624, v42, v43);
      *(void *)uint64_t v109 = byte_26C4DF190;
      if (SHIBYTE(v110) < 0) {
        operator delete(*(void **)&v109[8]);
      }
      if (SHIBYTE(v108) < 0) {
        operator delete(__s1[0]);
      }
      int v62 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v109, &byte_2140B33BB);
      *int v62 = byte_26C4DF190;
      uint64_t v63 = (std::string *)(v62 + 1);
      if ((v109[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v63, *(const std::string::value_type **)v109, *(std::string::size_type *)&v109[8]);
      }
      else
      {
        long long v95 = *(_OWORD *)v109;
        v62[3] = *(void *)&v109[16];
        *(_OWORD *)&v63->__r_.__value_.__l.__data_ = v95;
      }
      *int v62 = &unk_26C4E0710;
    }
    if (g_bCheckVocCompatibility)
    {
      __s1[0] = 0;
      __s1[1] = 0;
      uint64_t v108 = 0;
      TDataManager::getStringVar(*(void *)this);
    }
    if (TDataManager::getBoolVar(*(TDataManager **)this, "IsStaticComponent", 0))
    {
      std::string::basic_string[abi:ne180100]<0>(__s1, "Bad data spec");
      *(void *)uint64_t v109 = byte_26C4DF190;
      if (SHIBYTE(v108) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v109[8], (const std::string::value_type *)__s1[0], (std::string::size_type)__s1[1]);
      }
      else
      {
        *(_OWORD *)&v109[8] = *(_OWORD *)__s1;
        uint64_t v110 = v108;
      }
      *(void *)uint64_t v109 = &unk_26C4E0710;
      if (v110 >= 0) {
        unint64_t v64 = &v109[8];
      }
      else {
        unint64_t v64 = *(const char **)&v109[8];
      }
      conditionalAssert(v64, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 641, v44, v45);
      *(void *)uint64_t v109 = byte_26C4DF190;
      if (SHIBYTE(v110) < 0) {
        operator delete(*(void **)&v109[8]);
      }
      if (SHIBYTE(v108) < 0) {
        operator delete(__s1[0]);
      }
      uint64_t v65 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v109, "Bad data spec");
      *uint64_t v65 = byte_26C4DF190;
      uint64_t v66 = (std::string *)(v65 + 1);
      if ((v109[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v66, *(const std::string::value_type **)v109, *(std::string::size_type *)&v109[8]);
      }
      else
      {
        long long v96 = *(_OWORD *)v109;
        v65[3] = *(void *)&v109[16];
        *(_OWORD *)&v66->__r_.__value_.__l.__data_ = v96;
      }
      *uint64_t v65 = &unk_26C4E0710;
    }
    uint64_t v31 = *((void *)this + 1);
    int BoolVar = TDataManager::getBoolVar(*(TDataManager **)this, "HasStaticComponent", 0);
    if (v31)
    {
      if ((BoolVar & 1) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__s1, "Bad static data spec");
        *(void *)uint64_t v109 = byte_26C4DF190;
        if (SHIBYTE(v108) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v109[8], (const std::string::value_type *)__s1[0], (std::string::size_type)__s1[1]);
        }
        else
        {
          *(_OWORD *)&v109[8] = *(_OWORD *)__s1;
          uint64_t v110 = v108;
        }
        *(void *)uint64_t v109 = &unk_26C4E0710;
        if (v110 >= 0) {
          uint64_t v79 = &v109[8];
        }
        else {
          uint64_t v79 = *(const char **)&v109[8];
        }
        conditionalAssert(v79, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 657, v54, v55);
        *(void *)uint64_t v109 = byte_26C4DF190;
        if (SHIBYTE(v110) < 0) {
          operator delete(*(void **)&v109[8]);
        }
        if (SHIBYTE(v108) < 0) {
          operator delete(__s1[0]);
        }
        uint64_t v80 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v109, "Bad static data spec");
        *uint64_t v80 = byte_26C4DF190;
        uint64_t v81 = (std::string *)(v80 + 1);
        if ((v109[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v81, *(const std::string::value_type **)v109, *(std::string::size_type *)&v109[8]);
        }
        else
        {
          long long v101 = *(_OWORD *)v109;
          v80[3] = *(void *)&v109[16];
          *(_OWORD *)&v81->__r_.__value_.__l.__data_ = v101;
        }
        *uint64_t v80 = &unk_26C4E0710;
      }
      if ((TDataManager::getBoolVar(*((TDataManager **)this + 1), "IsStaticComponent", 0) & 1) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__s1, "Bad static data spec");
        *(void *)uint64_t v109 = byte_26C4DF190;
        if (SHIBYTE(v108) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v109[8], (const std::string::value_type *)__s1[0], (std::string::size_type)__s1[1]);
        }
        else
        {
          *(_OWORD *)&v109[8] = *(_OWORD *)__s1;
          uint64_t v110 = v108;
        }
        *(void *)uint64_t v109 = &unk_26C4E0710;
        if (v110 >= 0) {
          uint64_t v82 = &v109[8];
        }
        else {
          uint64_t v82 = *(const char **)&v109[8];
        }
        conditionalAssert(v82, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 662, v56, v57);
        *(void *)uint64_t v109 = byte_26C4DF190;
        if (SHIBYTE(v110) < 0) {
          operator delete(*(void **)&v109[8]);
        }
        if (SHIBYTE(v108) < 0) {
          operator delete(__s1[0]);
        }
        uint64_t v83 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v109, "Bad static data spec");
        *uint64_t v83 = byte_26C4DF190;
        uint64_t v84 = (std::string *)(v83 + 1);
        if ((v109[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v84, *(const std::string::value_type **)v109, *(std::string::size_type *)&v109[8]);
        }
        else
        {
          long long v102 = *(_OWORD *)v109;
          v83[3] = *(void *)&v109[16];
          *(_OWORD *)&v84->__r_.__value_.__l.__data_ = v102;
        }
        *uint64_t v83 = &unk_26C4E0710;
      }
      __s1[0] = 0;
      __s1[1] = 0;
      uint64_t v108 = 0;
      TDataManager::getStringVar(*(void *)this);
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v106 = 0;
      TDataManager::getStringVar(*((void *)this + 1));
    }
    else if ((a4 & 1) == 0 && ((BoolVar ^ 1) & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(__s1, "The data spec has a static component but it was not specified");
      *(void *)uint64_t v109 = byte_26C4DF190;
      if (SHIBYTE(v108) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v109[8], (const std::string::value_type *)__s1[0], (std::string::size_type)__s1[1]);
      }
      else
      {
        *(_OWORD *)&v109[8] = *(_OWORD *)__s1;
        uint64_t v110 = v108;
      }
      *(void *)uint64_t v109 = &unk_26C4E0710;
      if (v110 >= 0) {
        uint64_t v88 = &v109[8];
      }
      else {
        uint64_t v88 = *(const char **)&v109[8];
      }
      conditionalAssert(v88, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/misc.cpp", 649, v33, v34);
      *(void *)uint64_t v109 = byte_26C4DF190;
      if (SHIBYTE(v110) < 0) {
        operator delete(*(void **)&v109[8]);
      }
      if (SHIBYTE(v108) < 0) {
        operator delete(__s1[0]);
      }
      uint64_t v89 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v109, "The data spec has a static component but it was not specified");
      *uint64_t v89 = byte_26C4DF190;
      uint64_t v90 = (std::string *)(v89 + 1);
      if ((v109[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v90, *(const std::string::value_type **)v109, *(std::string::size_type *)&v109[8]);
      }
      else
      {
        long long v103 = *(_OWORD *)v109;
        v89[3] = *(void *)&v109[16];
        *(_OWORD *)&v90->__r_.__value_.__l.__data_ = v103;
      }
      *uint64_t v89 = &unk_26C4E0710;
    }
  }
}

void sub_213EBAFA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (*(char *)(v33 - 57) < 0)
  {
    operator delete(*(void **)(v33 - 80));
    if ((v32 & 1) == 0)
    {
LABEL_6:
      if (a31 < 0) {
        operator delete(__p);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v32)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v31);
  goto LABEL_6;
}

uint64_t TInputModel::getIntVar(TDataManager **this, const char *a2, uint64_t a3)
{
  char v6 = *this;
  if (v6
    && (*(uint64_t (**)(TDataManager *, const char *, void, void))(*(void *)v6 + 40))(v6, a2, 0, 0))
  {
    uint64_t v7 = *this;
  }
  else
  {
    uint64_t v7 = this[1];
    if (!v7) {
      return a3;
    }
  }

  return TDataManager::getIntVar(v7, a2, a3);
}

void TInputModel::getStringVar(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (v3 && (*(uint64_t (**)(uint64_t, uint64_t, void, void))(*(void *)v3 + 40))(v3, a2, 0, 0))
  {
    uint64_t v4 = *a1;
  }
  else
  {
    uint64_t v4 = a1[1];
    if (!v4)
    {
      JUMPOUT(0x216698410);
    }
  }

  TDataManager::getStringVar(v4);
}

BOOL TInputModel::isVar(TInputModel *this, const char *a2)
{
  uint64_t v4 = *(void *)this;
  BOOL result = 1;
  if (!v4
    || !(*(uint64_t (**)(uint64_t, const char *, void, void))(*(void *)v4 + 40))(v4, a2, 0, 0))
  {
    uint64_t v5 = *((void *)this + 1);
    if (!v5
      || !(*(uint64_t (**)(uint64_t, const char *, void, void))(*(void *)v5 + 40))(v5, a2, 0, 0))
    {
      return 0;
    }
  }
  return result;
}

char *TInputModel::getStaticDataPath(TInputModel *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (!v1)
  {
    uint64_t v1 = *(void *)this;
    if (!*(void *)this) {
      return &byte_2140B33BB;
    }
  }
  BOOL result = (char *)(v1 + 16);
  if (*(char *)(v1 + 39) < 0) {
    return *(char **)result;
  }
  return result;
}

void TOutputModel::TOutputModel(TOutputModel *this, TDataManager *a2, TDataManager *a3, char *a4, const TDataManager *a5)
{
  *(void *)this = a2;
  *((void *)this + 1) = a3;
  if (TInputModel::isVar(this, "Version"))
  {
    TInputModel::TInputModel((TInputModel *)&__p, *(const TDataManager **)this, *((const TDataManager **)this + 1), *((void *)this + 1) == 0, a4);
    uint64_t IntVar = v30;
  }
  else if (a3)
  {
    uint64_t IntVar = 2;
  }
  else if (a5)
  {
    uint64_t IntVar = (int)TDataManager::getIntVar(a5, "Version", 1);
  }
  else
  {
    uint64_t IntVar = 1;
  }
  *((void *)this + 2) = IntVar;
  uint64_t v10 = (TDataManager *)*((void *)this + 1);
  if (v10)
  {
    TDataManager::setIntVar(v10, "Version");
    uint64_t v11 = *((void *)this + 1);
    std::string::basic_string[abi:ne180100]<0>(&__p, a4);
    if (v30 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if (v30 >= 0) {
      uint64_t v13 = HIBYTE(v30);
    }
    else {
      uint64_t v13 = v29;
    }
    (*(void (**)(uint64_t, const char *, void *, uint64_t))(*(void *)v11 + 48))(v11, "VocVersionID", p_p, v13);
    if (SHIBYTE(v30) < 0) {
      operator delete(__p);
    }
    TDataManager::setBoolVar(*((TDataManager **)this + 1), "IsStaticComponent", 1);
    if (a5)
    {
      std::wstring __p = 0;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      TDataManager::getStringVar((uint64_t)a5);
      uint64_t v14 = *((void *)this + 1);
      if (v30 >= 0) {
        uint64_t v15 = (char *)&__p;
      }
      else {
        uint64_t v15 = (char *)__p;
      }
      std::string::basic_string[abi:ne180100]<0>(&v25, v15);
      if ((v27 & 0x80u) == 0) {
        uint64_t v16 = &v25;
      }
      else {
        uint64_t v16 = v25;
      }
      if ((v27 & 0x80u) == 0) {
        uint64_t v17 = v27;
      }
      else {
        uint64_t v17 = v26;
      }
      (*(void (**)(uint64_t, const char *, void *, uint64_t))(*(void *)v14 + 48))(v14, "EnhVersion", v16, v17);
      if ((char)v27 < 0) {
        operator delete(v25);
      }
      if (SHIBYTE(v30) < 0) {
        operator delete(__p);
      }
    }
  }
  if (*(void *)this)
  {
    TDataManager::setIntVar(*(TDataManager **)this, "Version");
    uint64_t v18 = *(void *)this;
    std::string::basic_string[abi:ne180100]<0>(&__p, a4);
    if (v30 >= 0) {
      uint64_t v19 = &__p;
    }
    else {
      uint64_t v19 = __p;
    }
    if (v30 >= 0) {
      uint64_t v20 = HIBYTE(v30);
    }
    else {
      uint64_t v20 = v29;
    }
    (*(void (**)(uint64_t, const char *, void *, uint64_t))(*(void *)v18 + 48))(v18, "VocVersionID", v19, v20);
    if (SHIBYTE(v30) < 0)
    {
      operator delete(__p);
      if (!a5) {
        return;
      }
    }
    else if (!a5)
    {
      return;
    }
    std::wstring __p = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    TDataManager::getStringVar((uint64_t)a5);
    uint64_t v21 = *(void *)this;
    if (v30 >= 0) {
      uint64_t v22 = (char *)&__p;
    }
    else {
      uint64_t v22 = (char *)__p;
    }
    std::string::basic_string[abi:ne180100]<0>(&v25, v22);
    if ((v27 & 0x80u) == 0) {
      uint64_t v23 = &v25;
    }
    else {
      uint64_t v23 = v25;
    }
    if ((v27 & 0x80u) == 0) {
      uint64_t v24 = v27;
    }
    else {
      uint64_t v24 = v26;
    }
    (*(void (**)(uint64_t, const char *, void *, uint64_t))(*(void *)v21 + 48))(v21, "EnhVersion", v23, v24);
    if ((char)v27 < 0) {
      operator delete(v25);
    }
    if (*((void *)this + 2) == 1) {
      TDataManager::setBoolVar(*(TDataManager **)this, "HasStaticComponent", 1);
    }
    if (SHIBYTE(v30) < 0) {
      operator delete(__p);
    }
  }
}

void sub_213EBB77C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const*,char const*,0>(void *a1, char **a2)
{
  uint64_t v4 = std::string::basic_string[abi:ne180100]<0>(a1, *a2);
  std::string::basic_string[abi:ne180100]<0>(v4 + 3, a2[1]);
  return a1;
}

void sub_213EBB808(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__tree<std::__value_type<std::string,std::wstring>,std::__map_value_compare<std::string,std::__value_type<std::string,std::wstring>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::wstring>>>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  uint64_t v6 = a1 + 8;
  do
  {
    BOOL v7 = std::less<std::string>::operator()[abi:ne180100](v5, (const void **)(v3 + 32), a2);
    uint64_t v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      uint64_t v8 = (uint64_t *)v3;
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string>::operator()[abi:ne180100](v5, a2, (const void **)(v6 + 32))) {
    return v2;
  }
  return v6;
}

void std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

void std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(std::vector<std::pair<std::string, std::string>> *this, std::__split_buffer<std::pair<std::string, std::string>> *__v)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  std::vector<int>::pointer end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(48 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  _DWORD v13[2] = &v16;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 48);
      *(void *)(v9 - DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v9 - DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = v10;
      *(void *)(a3 - DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = 0;
      *(void *)(a3 - DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
      *(void *)(a3 - DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = 0;
      long long v11 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = v11;
      v9 -= 48;
      *(void *)(a3 - DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = 0;
      v7 -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    *((void *)&v16 + 1) = v9;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(std::__split_buffer<std::pair<std::string, std::string>> *this)
{
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::__split_buffer<std::pair<std::string,std::string>>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 48;
    std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v4, i - 48);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::wstring>,std::__map_value_compare<std::string,std::__value_type<std::string,std::wstring>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::wstring>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::wstring>,std::__map_value_compare<std::string,std::__value_type<std::string,std::wstring>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::wstring>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    std::__tree<std::__value_type<std::string,std::wstring>,std::__map_value_compare<std::string,std::__value_type<std::string,std::wstring>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::wstring>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::wstring>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::wstring>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::wstring>,std::__map_value_compare<std::string,std::__value_type<std::string,std::wstring>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::wstring>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 4);
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(unsigned char *)(a3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 1;
}

void sub_213EBBD50(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::wstring>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::wstring>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void TClitics::TClitics(TClitics *this, TLexicon *a2, TTokenizerParamManager *a3)
{
  *(void *)this = &unk_26C4E48E0;
  *((void *)this + 1) = 0;
  uint64_t v6 = (char *)this + 16;
  *((void *)this + 2) = &unk_26C4E48E0;
  *((void *)this + 3) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  uint64_t v7 = (TClitics *)((char *)this + 72);
  TRegExp::TRegExp((void *)this + 9, (uint64_t)a2 + 240);
  *((void *)this + 4) = a2;
  *((void *)this + 5) = a3;
  *((void *)this + 1) = 2;
  (*(void (**)(TClitics *))(*(void *)this + 16))(this);
  *((void *)this + 3) = 6;
  (*(void (**)(char *))(*((void *)this + 2) + 16))(v6);
  uint64_t v8 = (__int32 *)TStringParam::get((TTokenizerParamManager *)((char *)a3 + 7992));
  if (v8)
  {
    if (*v8)
    {
      TRegExp::add((uint64_t)v7, v8, 0);
      TRegExp::doneAdding(v7);
    }
  }
}

void sub_213EBBE90(_Unwind_Exception *a1)
{
  TRegExp::~TRegExp(v2);
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  _Unwind_Resume(a1);
}

void TClitics::~TClitics(void **this)
{
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
}

BOOL TClitics::isValidRoot(TClitics *this, const TWord *a2)
{
  if (!*((void *)this + 11)) {
    return 0;
  }
  uint64_t v6 = (unsigned int *)v8;
  long long v7 = xmmword_214085190;
  char v9 = 1;
  TWord::getCategoryTag((uint64_t)a2, &v6);
  if (*((void *)&v7 + 1) >= (unint64_t)v7)
  {
    if (v9)
    {
      int v10 = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v6, *((unint64_t *)&v7 + 1), &v10, 1uLL);
      uint64_t v3 = v6;
      --*((void *)&v7 + 1);
    }
    else
    {
      uint64_t v3 = v6;
      if ((void)v7) {
        v6[(void)v7 - 1] = 0;
      }
    }
  }
  else
  {
    uint64_t v3 = v6;
    v6[*((void *)&v7 + 1)] = 0;
  }
  BOOL v4 = TRegExp::match((void *)this + 9, v3, 0);
  if (v9 && v6 != (unsigned int *)v8 && v6) {
    MEMORY[0x216698730]();
  }
  return v4;
}

void sub_213EBC014(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (LOBYTE(STACK[0x420])) {
    TSegmenter::findSegmentEnd((uint64_t *)va, v2);
  }
  _Unwind_Resume(a1);
}

void TClitics::addWords(TClitics *this, char **a2, TGraph *a3, TSegmenter *a4)
{
  uint64_t v5 = (TVertex *)a2;
  uint64_t Segment = TSegmenter::getSegment(a4, a2[2]);
  if (Segment)
  {
    uint64_t v8 = Segment;
    if (*(_DWORD *)(Segment + 24) == 1)
    {
      size_t v89 = wcslen(*(const __int32 **)Segment);
      if (v89 >= 4)
      {
        uint64_t OutEdge = TVertex::getOutEdge((uint64_t)v5);
        uint64_t Vertex = TGraph::getVertex(a3, *(const char **)(v8 + 8));
        if (Vertex) {
          BOOL v11 = OutEdge == 0;
        }
        else {
          BOOL v11 = 1;
        }
        if (!v11)
        {
LABEL_112:
          if (*(void *)(OutEdge + 24) == Vertex && (*(unsigned char *)(OutEdge + 64) & 0x35) == 0) {
            return;
          }
          while (1)
          {
            uint64_t OutEdge = *(void *)(OutEdge + 8);
            if (!OutEdge) {
              break;
            }
            if (!*(unsigned char *)(OutEdge + 32)) {
              goto LABEL_112;
            }
          }
        }
        size_t v12 = *((void *)this + 3);
        if (v12 + 2 > v89) {
          size_t v12 = v89 - 2;
        }
        uint64_t v116 = 0;
        uint64_t v117 = 6;
        uint64_t v114 = 0;
        uint64_t v115 = 0;
        uint64_t v111 = 0;
        uint64_t v112 = 0;
        uint64_t v113 = 0;
        unint64_t v90 = *((void *)this + 1);
        unint64_t v88 = v12 + 1;
        if (v90 < v12 + 1)
        {
          uint64_t v92 = v8;
          long long v94 = a3;
          long long v95 = this;
          uint64_t v87 = v5;
          while (1)
          {
            std::vector<TLexiconMatch>::resize((uint64_t)&v114, 0);
            uint64_t v13 = *(int **)v92;
            long long v15 = (void *)*((void *)this + 4);
            uint64_t v14 = *((void *)this + 5);
            uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v14 + 16464));
            size_t v17 = *(int *)(v14 + 4 * TParam::getValidConfig((TParam *)(v14 + 16464), ActiveConfigHandle) + 16624);
            uint64_t v18 = *((void *)this + 5);
            uint64_t v19 = TParam::getActiveConfigHandle((TParam *)(v18 + 16112));
            uint64_t ValidConfig = TParam::getValidConfig((TParam *)(v18 + 16112), v19);
            TLexicon::findHeadClonesCollated(v15, (unsigned int *)&v13[v89 - v90], &v117, 1uLL, v17, *(int *)(v18 + 4 * ValidConfig + 16272), (void **)&v114);
            if (v114 == v115) {
              goto LABEL_107;
            }
            uint64_t v107 = (int *)v109;
            long long v108 = xmmword_214085190;
            char v110 = 1;
            uint64_t v21 = *(int **)v92;
            TBuffer<wchar_t>::resize((uint64_t)&v107, 0);
            TBuffer<wchar_t>::insert((uint64_t)&v107, 0, v21, v89 - v90);
            uint64_t v22 = *((void *)this + 5);
            uint64_t v23 = TParam::getActiveConfigHandle((TParam *)(v22 + 7744));
            if (!*(unsigned char *)(v22 + TParam::getValidConfig((TParam *)(v22 + 7744), v23) + 7896)) {
              goto LABEL_24;
            }
            if ((respellRoot((uint64_t)&v107, *(int **)v92) & 1) == 0) {
              goto LABEL_23;
            }
            uint64_t v24 = *((void *)this + 4);
            if (*((void *)&v108 + 1) >= (unint64_t)v108)
            {
              if (v110)
              {
                LODWORD(vDgnArray<LinearTransform>::releaseAll((uint64_t)this + 104) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v107, *((unint64_t *)&v108 + 1), (int *)&v104, 1uLL);
                int v25 = v107;
                --*((void *)&v108 + 1);
              }
              else
              {
                int v25 = v107;
                if ((void)v108) {
                  v107[(void)v108 - 1] = 0;
                }
              }
            }
            else
            {
              int v25 = v107;
              v107[*((void *)&v108 + 1)] = 0;
            }
            if (TLexicon::checkName(v24, v25, 1, 0xFFFFFFFFFFFFFFFFLL))
            {
LABEL_23:
              int v26 = 7;
            }
            else
            {
LABEL_24:
              std::vector<TLexiconMatch>::resize((uint64_t)&v111, 0);
              unsigned __int8 v27 = (void *)*((void *)this + 4);
              if (*((void *)&v108 + 1) >= (unint64_t)v108)
              {
                if (v110)
                {
                  LODWORD(vDgnArray<LinearTransform>::releaseAll((uint64_t)this + 104) = 0;
                  TBuffer<wchar_t>::insert((uint64_t)&v107, *((unint64_t *)&v108 + 1), (int *)&v104, 1uLL);
                  uint64_t v28 = (unsigned int *)v107;
                  --*((void *)&v108 + 1);
                }
                else
                {
                  uint64_t v28 = (unsigned int *)v107;
                  if ((void)v108) {
                    v107[(void)v108 - 1] = 0;
                  }
                }
              }
              else
              {
                uint64_t v28 = (unsigned int *)v107;
                v107[*((void *)&v108 + 1)] = 0;
              }
              uint64_t v29 = TStringParam::get((TStringParam *)(*((void *)this + 5) + 10744));
              uint64_t v30 = *((void *)this + 5);
              uint64_t v31 = TParam::getActiveConfigHandle((TParam *)(v30 + 16464));
              size_t v32 = *(int *)(v30 + 4 * TParam::getValidConfig((TParam *)(v30 + 16464), v31) + 16624);
              uint64_t v33 = *((void *)this + 5);
              uint64_t v34 = TParam::getActiveConfigHandle((TParam *)(v33 + 16112));
              uint64_t v35 = TParam::getValidConfig((TParam *)(v33 + 16112), v34);
              TLexicon::findHeadClonesCollated(v27, v28, v29, v32, *(int *)(v33 + 4 * v35 + 16272), (void **)&v111);
              uint64_t v36 = *((void *)this + 5);
              uint64_t v37 = TParam::getActiveConfigHandle((TParam *)(v36 + 12864));
              if (!*(unsigned char *)(v36 + TParam::getValidConfig((TParam *)(v36 + 12864), v37) + 13016))
              {
                uint64_t v70 = v111;
                if (v112 != v111)
                {
                  uint64_t v71 = 0;
                  unint64_t v72 = 0;
                  uint64_t v73 = 0;
                  do
                  {
                    if (TClitics::isValidRoot(this, *(const TWord **)&v70[v71]))
                    {
                      if (!v73) {
                        uint64_t v73 = (uint64_t *)TGraph::addVertex(a3, 0);
                      }
                      uint64_t v74 = *(void *)&v111[v71];
                      LODWORD(vDgnArray<LinearTransform>::releaseAll((uint64_t)this + 104) = 1;
                      *(void *)uint64_t v105 = v74;
                      *(_OWORD *)&v105[8] = *(_OWORD *)&v111[v71 + 16];
                      TGraph::addEdge(a3, (uint64_t)v5, v73, (uint64_t)&v104);
                    }
                    ++v72;
                    uint64_t v70 = v111;
                    v71 += 32;
                  }
                  while (v72 < (v112 - v111) >> 5);
                  if (v73)
                  {
                    uint64_t v75 = TGraph::addVertex(a3, *(char **)(v92 + 8));
                    uint64_t v76 = v114;
                    if (v115 != v114)
                    {
                      uint64_t v77 = (uint64_t *)v75;
                      uint64_t v78 = 0;
                      unint64_t v79 = 0;
                      do
                      {
                        uint64_t v80 = &v76[v78];
                        uint64_t v81 = *(void *)v80;
                        LODWORD(vDgnArray<LinearTransform>::releaseAll((uint64_t)this + 104) = 1;
                        *(void *)uint64_t v105 = v81;
                        *(_OWORD *)&v105[8] = *((_OWORD *)v80 + 1);
                        TGraph::addEdge(a3, (uint64_t)v73, v77, (uint64_t)&v104);
                        ++v79;
                        uint64_t v76 = v114;
                        v78 += 32;
                      }
                      while (v79 < (v115 - v114) >> 5);
                    }
                  }
                }
                goto LABEL_100;
              }
              uint64_t v38 = *((void *)this + 5);
              uint64_t v39 = TParam::getActiveConfigHandle((TParam *)(v38 + 12616));
              if (*(unsigned char *)(v38 + TParam::getValidConfig((TParam *)(v38 + 12616), v39) + 12768))
              {
                long long v104 = (int *)&v105[16];
                *(_OWORD *)uint64_t v105 = xmmword_214085190;
                char v106 = 1;
                long long v100 = v102;
                long long v101 = xmmword_214085190;
                char v103 = 1;
                uint64_t v40 = v111;
                if (v112 == v111) {
                  goto LABEL_78;
                }
                uint64_t v41 = 0;
                do
                {
                  uint64_t v91 = v41;
                  uint64_t v42 = 32 * v41;
                  if (TClitics::isValidRoot(this, *(const TWord **)&v40[32 * v41]))
                  {
                    TWord::getWrittenForm(*(__int32 ***)&v111[v42], (uint64_t)&v107);
                    uint64_t v43 = v114;
                    if (v115 != v114)
                    {
                      uint64_t v44 = 0;
                      unint64_t v45 = 0;
                      do
                      {
                        TWord::getWrittenForm(*(__int32 ***)&v43[v44], (uint64_t)&v100);
                        TBuffer<wchar_t>::operator=((uint64_t)&v104, (uint64_t)&v107);
                        TBuffer<wchar_t>::operator+=((uint64_t)&v104, (uint64_t)&v100);
                        uint64_t v46 = *((void *)this + 5);
                        uint64_t v47 = TParam::getActiveConfigHandle((TParam *)(v46 + 7744));
                        if (!*(unsigned char *)(v46 + TParam::getValidConfig((TParam *)(v46 + 7744), v47) + 7896)) {
                          goto LABEL_45;
                        }
                        if (*((void *)&v108 + 1) >= (unint64_t)v108)
                        {
                          if (v110)
                          {
                            int v96 = 0;
                            TBuffer<wchar_t>::insert((uint64_t)&v107, *((unint64_t *)&v108 + 1), &v96, 1uLL);
                            uint64_t v48 = v107;
                            --*((void *)&v108 + 1);
                          }
                          else
                          {
                            uint64_t v48 = v107;
                            if ((void)v108) {
                              v107[(void)v108 - 1] = 0;
                            }
                          }
                        }
                        else
                        {
                          uint64_t v48 = v107;
                          v107[*((void *)&v108 + 1)] = 0;
                        }
                        if (respellRoot((uint64_t)&v104, v48))
                        {
LABEL_45:
                          uint64_t v49 = *((void *)this + 4);
                          if (*(void *)&v105[8] >= *(void *)v105)
                          {
                            if (v106)
                            {
                              int v96 = 0;
                              TBuffer<wchar_t>::insert((uint64_t)&v104, *(unint64_t *)&v105[8], &v96, 1uLL);
                              uint64_t v50 = v104;
                              --*(void *)&v105[8];
                            }
                            else
                            {
                              uint64_t v50 = v104;
                              if (*(void *)v105) {
                                v104[*(void *)v105 - 1] = 0;
                              }
                            }
                          }
                          else
                          {
                            uint64_t v50 = v104;
                            v104[*(void *)&v105[8]] = 0;
                          }
                          if (!TLexicon::checkName(v49, v50, 0, 0xFFFFFFFFFFFFFFFFLL))
                          {
                            uint64_t v51 = (void *)*((void *)this + 4);
                            if (*(void *)&v105[8] >= *(void *)v105)
                            {
                              uint64_t v53 = v92;
                              if (v106)
                              {
                                int v96 = 0;
                                TBuffer<wchar_t>::insert((uint64_t)&v104, *(unint64_t *)&v105[8], &v96, 1uLL);
                                uint64_t v52 = v104;
                                --*(void *)&v105[8];
                              }
                              else
                              {
                                uint64_t v52 = v104;
                                if (*(void *)v105) {
                                  v104[*(void *)v105 - 1] = 0;
                                }
                              }
                            }
                            else
                            {
                              uint64_t v52 = v104;
                              v104[*(void *)&v105[8]] = 0;
                              uint64_t v53 = v92;
                            }
                            uint64_t HeadClone = TLexicon::findHeadClone(v51, v52);
                            if (HeadClone)
                            {
                              int v55 = 1;
                            }
                            else
                            {
                              uint64_t v56 = *((void *)this + 4);
                              if (*(void *)&v105[8] >= *(void *)v105)
                              {
                                if (v106)
                                {
                                  int v96 = 0;
                                  TBuffer<wchar_t>::insert((uint64_t)&v104, *(unint64_t *)&v105[8], &v96, 1uLL);
                                  uint64_t v57 = v104;
                                  --*(void *)&v105[8];
                                }
                                else
                                {
                                  uint64_t v57 = v104;
                                  if (*(void *)v105) {
                                    v104[*(void *)v105 - 1] = 0;
                                  }
                                }
                              }
                              else
                              {
                                uint64_t v57 = v104;
                                v104[*(void *)&v105[8]] = 0;
                              }
                              uint64_t HeadClone = TLexicon::addTempWord(v56, v57, 0, 0, 0);
                              int v55 = 4;
                            }
                            int v93 = v55;
                            uint64_t v58 = (uint64_t *)TGraph::addVertex(v94, *(char **)(v53 + 8));
                            uint64_t v59 = *((void *)this + 4);
                            int v60 = *(const __int32 **)v53;
                            if (*(void *)&v105[8] >= *(void *)v105)
                            {
                              if (v106)
                              {
                                int v96 = 0;
                                TBuffer<wchar_t>::insert((uint64_t)&v104, *(unint64_t *)&v105[8], &v96, 1uLL);
                                uint64_t v61 = (unsigned int *)v104;
                                --*(void *)&v105[8];
                              }
                              else
                              {
                                uint64_t v61 = (unsigned int *)v104;
                                if (*(void *)v105) {
                                  v104[*(void *)v105 - 1] = 0;
                                }
                              }
                            }
                            else
                            {
                              uint64_t v61 = (unsigned int *)v104;
                              v104[*(void *)&v105[8]] = 0;
                            }
                            uint64_t v62 = *((void *)v95 + 5);
                            uint64_t v63 = TParam::getActiveConfigHandle((TParam *)(v62 + 16464));
                            size_t v64 = *(int *)(v62 + 4 * TParam::getValidConfig((TParam *)(v62 + 16464), v63) + 16624);
                            uint64_t v65 = *((void *)v95 + 5);
                            uint64_t v66 = TParam::getActiveConfigHandle((TParam *)(v65 + 16112));
                            uint64_t v67 = TParam::getValidConfig((TParam *)(v65 + 16112), v66);
                            uint64_t Score = TLexicon::makeScore(v59, v60, v61, v64, *(int *)(v65 + 4 * v67 + 16272));
                            int v96 = v93;
                            uint64_t v97 = HeadClone;
                            uint64_t v98 = Score;
                            uint64_t v99 = v69;
                            TGraph::addEdge(v94, *((void *)v94 + 8), v58, (uint64_t)&v96);
                            this = v95;
                          }
                        }
                        ++v45;
                        uint64_t v43 = v114;
                        v44 += 32;
                      }
                      while (v45 < (v115 - v114) >> 5);
                    }
                  }
                  uint64_t v41 = v91 + 1;
                  uint64_t v40 = v111;
                }
                while (v91 + 1 < (unint64_t)((v112 - v111) >> 5));
                a3 = v94;
                uint64_t v5 = v87;
                if (v103)
                {
LABEL_78:
                  if (v100 != v102 && v100) {
                    MEMORY[0x216698730]();
                  }
                }
                if (v106 && v104 != (int *)&v105[16] && v104) {
                  MEMORY[0x216698730]();
                }
LABEL_100:
                int v26 = 0;
                goto LABEL_101;
              }
              uint64_t v82 = v111;
              if (v112 == v111) {
                goto LABEL_100;
              }
              uint64_t v83 = 0;
              unint64_t v84 = 0;
              while (!TClitics::isValidRoot(this, *(const TWord **)&v82[v83]))
              {
                ++v84;
                uint64_t v82 = v111;
                v83 += 32;
                if (v84 >= (v112 - v111) >> 5) {
                  goto LABEL_100;
                }
              }
              uint64_t v85 = TLexicon::findHeadClone(*((void **)this + 4), *(__int32 **)v92);
              if (!v85) {
                uint64_t v85 = TLexicon::addTempWord(*((void *)this + 4), *(int **)v92, 0, 0, 0);
              }
              uint64_t v86 = (uint64_t *)TGraph::addVertex(a3, *(char **)(v92 + 8));
              LODWORD(vDgnArray<LinearTransform>::releaseAll((uint64_t)this + 104) = 4;
              *(void *)uint64_t v105 = v85;
              *(void *)&v105[8] = 0;
              v105[16] = 0;
              TGraph::addEdge(a3, *((void *)a3 + 8), v86, (uint64_t)&v104);
              int v26 = 5;
            }
LABEL_101:
            if (v110 && v107 != (int *)v109 && v107) {
              MEMORY[0x216698730]();
            }
            if (v26 != 7 && v26)
            {
LABEL_117:
              if (v111)
              {
                uint64_t v112 = v111;
                operator delete(v111);
              }
              break;
            }
LABEL_107:
            if (++v90 >= v88) {
              goto LABEL_117;
            }
          }
        }
        if (v114)
        {
          uint64_t v115 = v114;
          operator delete(v114);
        }
      }
    }
  }
}

void sub_213EBCB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (LOBYTE(STACK[0xCF8]))
  {
    if (STACK[0x8E0] != a15 && STACK[0x8E0] != 0) {
      MEMORY[0x216698730]();
    }
  }
  uint64_t v18 = *(void **)(v15 - 144);
  if (v18)
  {
    *(void *)(v15 - 136) = v18;
    operator delete(v18);
  }
  uint64_t v19 = *(void **)(v15 - 120);
  if (v19)
  {
    *(void *)(v15 - DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 112) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(a1);
}

uint64_t TBuffer<wchar_t>::operator=(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  if (v5 >= v4)
  {
    if (*(unsigned char *)(a2 + 1048))
    {
      int v8 = 0;
      TBuffer<wchar_t>::insert(a2, v5, &v8, 1uLL);
      unint64_t v5 = *(void *)(a2 + 16) - 1;
      *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v5;
      uint64_t v6 = *(int **)a2;
    }
    else
    {
      uint64_t v6 = *(int **)a2;
      if (v4) {
        v6[v4 - 1] = 0;
      }
    }
  }
  else
  {
    uint64_t v6 = *(int **)a2;
    *(_DWORD *)(*(void *)a2 + 4 * v5) = 0;
  }
  TBuffer<wchar_t>::resize(a1, 0);
  TBuffer<wchar_t>::insert(a1, 0, v6, v5);
  return a1;
}

void MrecInitModule_apist_sdapi(void)
{
  if (!gParSdapiDiagnosticCheckHeapEveryCall)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "SdapiDiagnosticCheckHeapEveryCall", (const char *)&unk_2140A1F0C, (const char *)&unk_2140A1F0C, 0, SetShadowSdapiDiagnosticCheckHeapEveryCall, 0);
    *uint64_t v1 = &unk_26C4E0858;
    gParSdapiDiagnosticCheckHeapEveryCall = (uint64_t)v1;
    gShadowSdapiDiagnosticCheckHeapEveryCall = 0;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParSdapiDiagnosticCheckHeapEveryCall);
  }
  if (!gParSdapiCrashOnSendError)
  {
    uint64_t v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "SdapiCrashOnSendError", (const char *)&unk_2140A1F0C, (const char *)&unk_2140A1F0C, 0, SetShadowSdapiCrashOnSendError, 0);
    void *v3 = &unk_26C4E0858;
    gParSdapiCrashOnSendError = (uint64_t)v3;
    gShadowSdapiCrashOnSendError = 0;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParSdapiCrashOnSendError);
  }
  if (!gParSdapiAdaptationAccumulationMinCallbackInterval)
  {
    unint64_t v4 = MemChunkAlloc(0x38uLL, 0);
    uint64_t v8 = 0x271000000000;
    unint64_t v5 = (void *)IntGlobalParamBase::IntGlobalParamBase((uint64_t)v4, (uint64_t)"SdapiAdaptationAccumulationMinCallbackInterval", (uint64_t)&unk_2140A1F0C, (uint64_t)&unk_2140A1F0C, 1, &v8, 0);
    *unint64_t v5 = &unk_26C4E05C8;
    gParSdapiAdaptationAccumulationMinCallbackInterval = (uint64_t)v5;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParSdapiAdaptationAccumulationMinCallbackInterval);
  }
  if (!gParSdapiAdaptationApplicationMinCallbackInterval)
  {
    uint64_t v6 = MemChunkAlloc(0x38uLL, 0);
    uint64_t v8 = 0x271000000000;
    long long v7 = (void *)IntGlobalParamBase::IntGlobalParamBase((uint64_t)v6, (uint64_t)"SdapiAdaptationApplicationMinCallbackInterval", (uint64_t)&unk_2140A1F0C, (uint64_t)&unk_2140A1F0C, 1, &v8, 0);
    *long long v7 = &unk_26C4E05C8;
    gParSdapiAdaptationApplicationMinCallbackInterval = (uint64_t)v7;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParSdapiAdaptationApplicationMinCallbackInterval);
  }
}

void throwBadSdapiArgument(const char *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void throwIfErroredDuringCallback(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(unsigned char *)(ApiState::smpApiState + 1)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 468, (uint64_t)"sdapi/apist", 32, (uint64_t)"%.500s %.500s", a7, a8, (char)a1);
  }
}

uint64_t sdUtilStrMove(char *a1, int a2, const char *__s)
{
  unsigned int v6 = strlen(__s);
  unsigned int v7 = v6;
  if (a2)
  {
    if (a2 - 1 >= v6) {
      size_t v8 = v6;
    }
    else {
      size_t v8 = (a2 - 1);
    }
    if (v8) {
      memcpy(a1, __s, v8);
    }
    else {
      size_t v8 = 0;
    }
    a1[v8] = 0;
  }
  return v7 + 1;
}

uint64_t sdUtilItemMove(int a1, const void *a2, uint64_t a3, void *__dst, unsigned int a5)
{
  if (a5 >= a3) {
    unsigned int v6 = a3;
  }
  else {
    unsigned int v6 = a5;
  }
  size_t v7 = v6 * a1;
  if (v7) {
    memcpy(__dst, a2, v7);
  }
  return a3;
}

void sdUtilConvertSDWordSpecsToCwids(uint64_t *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v38 = a6;
  char v39 = a7;
  char v37 = a5;
  char v35 = a4;
  uint64_t v8 = a3;
  BOOL v11 = (ModelMgr *)ModelMgr::smpModelMgr;
  unsigned int v12 = *(_DWORD *)(a3 + 12);
  BOOL v13 = a2 >= v12;
  uint64_t v14 = a2 - v12;
  if (v14 != 0 && v13)
  {
    DgnPrimArray<unsigned int>::reallocElts(a3, v14, 0);
    *(_DWORD *)(v8 + 8) = a2;
  }
  else
  {
    *(_DWORD *)(a3 + 8) = a2;
    if (!a2) {
      return;
    }
  }
  uint64_t v15 = 0;
  uint64_t v16 = a2;
  size_t v17 = "%s";
  uint64_t v36 = v8;
  do
  {
    switch(a1[1])
    {
      case -4:
        if ((v38 & 1) == 0) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 552, (uint64_t)"sdapi/apist", 31, (uint64_t)v17, a7, a8, (char)&errStr_sdapi_apist_E_BAD_COLLAPSED);
        }
        uint64_t v18 = *a1;
        if (HIDWORD(*a1)) {
          BOOL v19 = 0;
        }
        else {
          BOOL v19 = (*a1 & 0xFFFF0000) == 0;
        }
        if (!v19) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 461, (uint64_t)"sdapi/apist", 13, (uint64_t)"%.500s 0x%016llx", a7, a8, (char)"SDhVoc");
        }
        if ((unsigned __int16)v18 - 1 >= 0x7B) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 461, (uint64_t)"sdapi/apist", 13, (uint64_t)"%.500s 0x%016llx", a7, a8, (char)"SDhVoc");
        }
        ModelMgr::getVocOrThrow(v11, (unsigned __int16)v18, a3, a4, a5, a6, a7, a8);
        int v20 = ((v18 << 25) | 0xFFFFF4) + 7;
        break;
      case -3:
        if ((v37 & 1) == 0) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 568, (uint64_t)"sdapi/apist", 29, (uint64_t)v17, a7, a8, (char)&errStr_sdapi_apist_E_BAD_ENDCONTEXT);
        }
        int v20 = -50331651;
        if (*a1 != -1) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 570, (uint64_t)"sdapi/apist", 30, (uint64_t)v17, a7, a8, (char)&errStr_sdapi_apist_E_BAD_OOVVOC);
        }
        break;
      case -2:
        if (v15 || (v35 & 1) == 0) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 560, (uint64_t)"sdapi/apist", 28, (uint64_t)v17, a7, a8, (char)&errStr_sdapi_apist_E_BAD_STARTCONTEXT);
        }
        int v20 = -50331650;
        if (*a1 != -1) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 562, (uint64_t)"sdapi/apist", 30, (uint64_t)v17, a7, a8, (char)&errStr_sdapi_apist_E_BAD_OOVVOC);
        }
        break;
      case -1:
        if ((v39 & 1) == 0) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 544, (uint64_t)"sdapi/apist", 36, (uint64_t)v17, a7, a8, (char)&errStr_sdapi_apist_E_BAD_UNKNOWNWORD);
        }
        if (*a1 != -1) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 546, (uint64_t)"sdapi/apist", 30, (uint64_t)v17, a7, a8, (char)&errStr_sdapi_apist_E_BAD_OOVVOC);
        }
        int v20 = -83886081;
        break;
      default:
        uint64_t v21 = v16;
        uint64_t v22 = v17;
        uint64_t v23 = *a1;
        if (HIDWORD(*a1)) {
          BOOL v24 = 0;
        }
        else {
          BOOL v24 = (*a1 & 0xFFFF0000) == 0;
        }
        if (!v24) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 461, (uint64_t)"sdapi/apist", 13, (uint64_t)"%.500s 0x%016llx", a7, a8, (char)"SDhVoc");
        }
        int v25 = v11;
        if ((unsigned __int16)v23 - 1 >= 0x7B) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 461, (uint64_t)"sdapi/apist", 13, (uint64_t)"%.500s 0x%016llx", a7, a8, (char)"SDhVoc");
        }
        uint64_t v26 = a1[1];
        unsigned int v27 = v26 - 1;
        if ((unint64_t)(v26 - 1) >> 32) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 461, (uint64_t)"sdapi/apist", 13, (uint64_t)"%.500s 0x%016llx", a7, a8, (char)"SDhWord");
        }
        if (v27 >= 0xFFFFF4) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 461, (uint64_t)"sdapi/apist", 13, (uint64_t)"%.500s 0x%016llx", a7, a8, (char)"SDhWord");
        }
        BOOL v11 = v25;
        uint64_t VocOrThrow = ModelMgr::getVocOrThrow(v25, (unsigned __int16)v23, a3, a4, a5, a6, a7, a8);
        WordList::verifyVisible(*(WordList **)(VocOrThrow + 48), v27, v29, v30, v31, v32, v33, v34);
        int v20 = v27 & 0xFFFFFF | (v23 << 25);
        size_t v17 = v22;
        uint64_t v16 = v21;
        uint64_t v8 = v36;
        break;
    }
    *(_DWORD *)(*(void *)v8 + 4 * v15++) = v20;
    a1 += 2;
  }
  while (v16 != v15);
}

void DisplaySdapiObjectSizes(void)
{
  unint64_t v17 = 0;
  unint64_t v18 = 0;
  unint64_t v16 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 863, (DgnString *)&v14);
  if (v15) {
    unint64_t v4 = v14;
  }
  else {
    unint64_t v4 = &unk_2140A1F0C;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v0, v1, v2, v3, 0, &unk_2140A1F0C, 0, &unk_2140A1F0C, v4);
  DgnString::~DgnString((DgnString *)&v14);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v5, v6, v7, v8, 0, &unk_2140A1F0C);
  ApiState::printSize((ApiState *)ApiState::smpApiState, 0xFFFFFFFFLL, 1, &v18, &v17, &v16);
  MrecInitModule_sdpres_sdapi();
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 869, (DgnString *)&v14);
  if (v15) {
    BOOL v13 = v14;
  }
  else {
    BOOL v13 = &unk_2140A1F0C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v9, v10, v11, v12, 0, &unk_2140A1F0C, 35, 35, v13, v18, v17, v16);
  DgnString::~DgnString((DgnString *)&v14);
}

void sub_213EBD5AC(_Unwind_Exception *a1)
{
  DgnString::~DgnString((DgnString *)(v1 - 56));
  _Unwind_Resume(a1);
}

void ApiState::printSize(ApiState *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1126, (DgnString *)&v186);
  if (v187) {
    unint64_t v16 = v186;
  }
  else {
    unint64_t v16 = &unk_2140A1F0C;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_2140A1F0C, a3, &unk_2140A1F0C, v16);
  DgnString::~DgnString((DgnString *)&v186);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_2140A1F0C);
  MrecPrintSize(0xFFFFFFFF, a3, a4, a5, a6);
  uint64_t v21 = (a3 + 1);
  uint64_t v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1129, (DgnString *)&v186);
  if (v187) {
    unsigned int v27 = v186;
  }
  else {
    unsigned int v27 = &unk_2140A1F0C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_2140A1F0C, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v186);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1131, (DgnString *)&v186);
  if (v187) {
    uint64_t v32 = v186;
  }
  else {
    uint64_t v32 = &unk_2140A1F0C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_2140A1F0C, (34 - a3), (34 - a3), v32, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v186);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1133, (DgnString *)&v186);
  if (v187) {
    char v37 = v186;
  }
  else {
    char v37 = &unk_2140A1F0C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &unk_2140A1F0C, (34 - a3), (34 - a3), v37, 1, 1, 0);
  uint64_t v185 = a6;
  DgnString::~DgnString((DgnString *)&v186);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1135, (DgnString *)&v186);
  if (v187) {
    uint64_t v42 = v186;
  }
  else {
    uint64_t v42 = &unk_2140A1F0C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), &unk_2140A1F0C, (34 - a3), (34 - a3), v42, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v186);
  ++*a4;
  ++*a5;
  uint64_t v43 = SnapTime::sizeObject((uint64_t)this + 8, 0);
  uint64_t v44 = SnapTime::sizeObject((uint64_t)this + 8, 1);
  uint64_t v45 = SnapTime::sizeObject((uint64_t)this + 8, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1137, (DgnString *)&v186);
  if (v187) {
    uint64_t v50 = v186;
  }
  else {
    uint64_t v50 = &unk_2140A1F0C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v46, v47, v48, v49, (a3 + 1), &unk_2140A1F0C, (34 - a3), (34 - a3), v50, v43, v44, v45);
  DgnString::~DgnString((DgnString *)&v186);
  *a4 += v43;
  *a5 += v44;
  *v185 += v45;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1139, (DgnString *)&v186);
  if (v187) {
    int v55 = v186;
  }
  else {
    int v55 = &unk_2140A1F0C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v51, v52, v53, v54, (a3 + 1), &unk_2140A1F0C, (34 - a3), (34 - a3), v55, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v186);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1141, (DgnString *)&v186);
  if (v187) {
    int v60 = v186;
  }
  else {
    int v60 = &unk_2140A1F0C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v56, v57, v58, v59, (a3 + 1), &unk_2140A1F0C, (34 - a3), (34 - a3), v60, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v186);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1143, (DgnString *)&v186);
  if (v187) {
    uint64_t v65 = v186;
  }
  else {
    uint64_t v65 = &unk_2140A1F0C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v61, v62, v63, v64, (a3 + 1), &unk_2140A1F0C, (34 - a3), (34 - a3), v65, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v186);
  *a4 += 8;
  *a5 += 8;
  uint64_t v66 = sizeObject((char *)this + 64);
  uint64_t v67 = sizeObject((char *)this + 64);
  uint64_t v68 = sizeObject((char *)this + 64);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1145, (DgnString *)&v186);
  if (v187) {
    uint64_t v73 = v186;
  }
  else {
    uint64_t v73 = &unk_2140A1F0C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v69, v70, v71, v72, (a3 + 1), &unk_2140A1F0C, (34 - a3), (34 - a3), v73, v66, v67, v68);
  uint64_t v183 = a3;
  DgnString::~DgnString((DgnString *)&v186);
  *a4 += v66;
  *a5 += v67;
  *v185 += v68;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1147, (DgnString *)&v186);
  if (v187) {
    uint64_t v78 = v186;
  }
  else {
    uint64_t v78 = &unk_2140A1F0C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v74, v75, v76, v77, (a3 + 1), &unk_2140A1F0C, (34 - a3), (34 - a3), v78, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v186);
  ++*a4;
  ++*a5;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v79 = 4;
  }
  else {
    uint64_t v79 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1148, (DgnString *)&v186);
  if (v187) {
    unint64_t v84 = v186;
  }
  else {
    unint64_t v84 = &unk_2140A1F0C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v80, v81, v82, v83, v21, &unk_2140A1F0C, v22, v22, v84, v79, v79, 0);
  DgnString::~DgnString((DgnString *)&v186);
  *a4 += v79;
  *a5 += v79;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
  {
    getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1153, (DgnString *)&v186);
    if (v187) {
      size_t v89 = v186;
    }
    else {
      size_t v89 = &unk_2140A1F0C;
    }
    xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v85, v86, v87, v88, v21, &unk_2140A1F0C, v22, v22, v89, 64, 64, 0);
    DgnString::~DgnString((DgnString *)&v186);
    *a4 += 64;
    *a5 += 64;
  }
  uint64_t v184 = v21;
  uint64_t v90 = 0;
  uint64_t v91 = 0;
  uint64_t v92 = 0;
  for (uint64_t i = 160; i != 1760; i += 80)
  {
    v92 += sizeObject((uint64_t)this + i, 0);
    v91 += sizeObject((uint64_t)this + i, 1);
    v90 += sizeObject((uint64_t)this + i, 3);
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1161, (DgnString *)&v186);
  if (v187) {
    uint64_t v98 = v186;
  }
  else {
    uint64_t v98 = &unk_2140A1F0C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v94, v95, v96, v97, v184, &unk_2140A1F0C, v22, v22, v98, v92, v91, v90);
  DgnString::~DgnString((DgnString *)&v186);
  *a4 += v92;
  *a5 += v91;
  *v185 += v90;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v99 = 4;
  }
  else {
    uint64_t v99 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1164, (DgnString *)&v186);
  if (v187) {
    long long v104 = v186;
  }
  else {
    long long v104 = &unk_2140A1F0C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v100, v101, v102, v103, v184, &unk_2140A1F0C, v22, v22, v104, v99, v99, 0);
  DgnString::~DgnString((DgnString *)&v186);
  *a4 += v99;
  *a5 += v99;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1166, (DgnString *)&v186);
  if (v187) {
    uint64_t v109 = v186;
  }
  else {
    uint64_t v109 = &unk_2140A1F0C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v105, v106, v107, v108, v184, &unk_2140A1F0C, v22, v22, v109, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v186);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1168, (DgnString *)&v186);
  if (v187) {
    uint64_t v114 = v186;
  }
  else {
    uint64_t v114 = &unk_2140A1F0C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v110, v111, v112, v113, v184, &unk_2140A1F0C, v22, v22, v114, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v186);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1170, (DgnString *)&v186);
  if (v187) {
    uint64_t v119 = v186;
  }
  else {
    uint64_t v119 = &unk_2140A1F0C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v115, v116, v117, v118, v184, &unk_2140A1F0C, v22, v22, v119, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v186);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v120 = 4;
  }
  else {
    uint64_t v120 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1172, (DgnString *)&v186);
  if (v187) {
    uint64_t v125 = v186;
  }
  else {
    uint64_t v125 = &unk_2140A1F0C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v121, v122, v123, v124, v184, &unk_2140A1F0C, v22, v22, v125, v120, v120, 0);
  DgnString::~DgnString((DgnString *)&v186);
  *a4 += v120;
  *a5 += v120;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1174, (DgnString *)&v186);
  if (v187) {
    uint64_t v130 = v186;
  }
  else {
    uint64_t v130 = &unk_2140A1F0C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v126, v127, v128, v129, v184, &unk_2140A1F0C, v22, v22, v130, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v186);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1176, (DgnString *)&v186);
  if (v187) {
    uint64_t v135 = v186;
  }
  else {
    uint64_t v135 = &unk_2140A1F0C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v131, v132, v133, v134, v184, &unk_2140A1F0C, v22, v22, v135, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v186);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1178, (DgnString *)&v186);
  if (v187) {
    uint64_t v140 = v186;
  }
  else {
    uint64_t v140 = &unk_2140A1F0C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v136, v137, v138, v139, v184, &unk_2140A1F0C, v22, v22, v140, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v186);
  *a4 += 4;
  *a5 += 4;
  uint64_t v141 = FileSpec::sizeObject((uint64_t)this + 1808);
  uint64_t v142 = FileSpec::sizeObject((uint64_t)this + 1808);
  uint64_t v143 = FileSpec::sizeObject((uint64_t)this + 1808);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1180, (DgnString *)&v186);
  if (v187) {
    long long v148 = v186;
  }
  else {
    long long v148 = &unk_2140A1F0C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v144, v145, v146, v147, v184, &unk_2140A1F0C, v22, v22, v148, v141, v142, v143);
  DgnString::~DgnString((DgnString *)&v186);
  *a4 += v141;
  *a5 += v142;
  *v185 += v143;
  uint64_t v149 = (char *)this + 1824;
  uint64_t v150 = sizeObject((uint64_t)this + 1824, 0);
  uint64_t v151 = sizeObject((uint64_t)v149, 1);
  uint64_t v152 = sizeObject((uint64_t)v149, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1182, (DgnString *)&v186);
  if (v187) {
    uint64_t v157 = v186;
  }
  else {
    uint64_t v157 = &unk_2140A1F0C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v153, v154, v155, v156, v184, &unk_2140A1F0C, v22, v22, v157, v150, v151, v152);
  DgnString::~DgnString((DgnString *)&v186);
  *a4 += v150;
  *a5 += v151;
  *v185 += v152;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1184, (DgnString *)&v186);
  if (v187) {
    long long v162 = v186;
  }
  else {
    long long v162 = &unk_2140A1F0C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v158, v159, v160, v161, v184, &unk_2140A1F0C, v22, v22, v162, 4000, 4000, 0);
  DgnString::~DgnString((DgnString *)&v186);
  *a4 += 4000;
  *a5 += 4000;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1186, (DgnString *)&v186);
  if (v187) {
    uint64_t v167 = v186;
  }
  else {
    uint64_t v167 = &unk_2140A1F0C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v163, v164, v165, v166, v184, &unk_2140A1F0C, v22, v22, v167, 4000, 4000, 0);
  DgnString::~DgnString((DgnString *)&v186);
  *a4 += 4000;
  *a5 += 4000;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1188, (DgnString *)&v186);
  if (v187) {
    uint64_t v172 = v186;
  }
  else {
    uint64_t v172 = &unk_2140A1F0C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v168, v169, v170, v171, v184, &unk_2140A1F0C, v22, v22, v172, 160, 160, 0);
  DgnString::~DgnString((DgnString *)&v186);
  *a4 += 160;
  *a5 += 160;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1190, (DgnString *)&v186);
  if (v187) {
    uint64_t v177 = v186;
  }
  else {
    uint64_t v177 = &unk_2140A1F0C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v173, v174, v175, v176, v184, &unk_2140A1F0C, v22, v22, v177, 160, 160, 0);
  DgnString::~DgnString((DgnString *)&v186);
  *a4 += 160;
  *a5 += 160;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1191, (DgnString *)&v186);
  if (v187) {
    uint64_t v182 = v186;
  }
  else {
    uint64_t v182 = &unk_2140A1F0C;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v178, v179, v180, v181, v183, &unk_2140A1F0C, (35 - v183), (35 - v183), v182, *a4, *a5, *v185);
  DgnString::~DgnString((DgnString *)&v186);
}

void sub_213EBE368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void ApiState::ApiState(ApiState *this)
{
  *(_WORD *)((char *)this + 1) = 0;
  *((unsigned char *)this + 3) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = 0u;
  *(_OWORD *)((char *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = 0u;
  *((void *)this + 7) = 0;
  DgnString::DgnString((ApiState *)((char *)this + 64));
  uint64_t v2 = 0;
  *((unsigned char *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = 0;
  *((void *)this + 11) = 0;
  do
  {
    uint64_t v3 = (char *)this + v2;
    recursive_mutex_init((_opaque_pthread_mutex_t *)((char *)this + v2 + 160));
    *((_DWORD *)v3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = 0;
    *((void *)v3 + 29) = 0;
    v2 += 80;
  }
  while (v2 != 1600);
  *((_OWORD *)this + 110) = 0u;
  *((_DWORD *)this + 444) = 1;
  *((_DWORD *)this + 449) = 0;
  *(_OWORD *)((char *)this + 17DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = 0u;
  *((void *)this + 225) = 1;
  FileSpec::FileSpec((ApiState *)((char *)this + 1808));
  DgnReadWriteLock::DgnReadWriteLock((ApiState *)((char *)this + 1824));
  recursive_mutex_init((_opaque_pthread_mutex_t *)((char *)this + 96));
  ApiState::resetCallHistogram(this);
}

void sub_213EBE4C8(_Unwind_Exception *a1)
{
  FileSpec::~FileSpec(v3);
  for (uint64_t i = 1680; i != 80; i -= 80)
    DgnLock::~DgnLock((DgnLock *)(v2 + i));
  DgnString::~DgnString(v1);
  _Unwind_Resume(a1);
}

void ApiState::resetCallHistogram(ApiState *this)
{
  uint64_t v2 = (pthread_mutex_t *)((char *)this + 160);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 160));
  ++*((_DWORD *)this + 56);
  *((void *)this + 29) = pthread_self();
  *((void *)this + 1269) = 0;
  *((void *)this + 1289) = 0;
  int v3 = *((_DWORD *)this + 56) - 1;
  *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = v3;
  if (!v3) {
    *((void *)this + 29) = 0;
  }
  pthread_mutex_unlock(v2);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 240));
  ++*((_DWORD *)this + 76);
  *((void *)this + 39) = pthread_self();
  *((void *)this + 1270) = 0;
  *((void *)this + 1290) = 0;
  int v4 = *((_DWORD *)this + 76) - 1;
  *((_DWORD *)this + 76) = v4;
  if (!v4) {
    *((void *)this + 39) = 0;
  }
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 240));
  pthread_mutex_lock((pthread_mutex_t *)this + 5);
  ++*((_DWORD *)this + 96);
  *((void *)this + 49) = pthread_self();
  *((void *)this + 1271) = 0;
  *((void *)this + 1291) = 0;
  int v5 = *((_DWORD *)this + 96) - 1;
  *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = v5;
  if (!v5) {
    *((void *)this + 49) = 0;
  }
  pthread_mutex_unlock((pthread_mutex_t *)this + 5);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 400));
  ++*((_DWORD *)this + 116);
  *((void *)this + 59) = pthread_self();
  *((void *)this + 12DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = 0;
  *((void *)this + 1292) = 0;
  int v6 = *((_DWORD *)this + 116) - 1;
  *((_DWORD *)this + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v6;
  if (!v6) {
    *((void *)this + 59) = 0;
  }
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 400));
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 480));
  ++*((_DWORD *)this + 136);
  *((void *)this + 69) = pthread_self();
  *((void *)this + 1273) = 0;
  *((void *)this + 1293) = 0;
  int v7 = *((_DWORD *)this + 136) - 1;
  *((_DWORD *)this + 136) = v7;
  if (!v7) {
    *((void *)this + 69) = 0;
  }
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 480));
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 560));
  ++*((_DWORD *)this + 156);
  *((void *)this + 79) = pthread_self();
  *((void *)this + 1274) = 0;
  *((void *)this + 1294) = 0;
  int v8 = *((_DWORD *)this + 156) - 1;
  *((_DWORD *)this + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = v8;
  if (!v8) {
    *((void *)this + 79) = 0;
  }
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 560));
  pthread_mutex_lock((pthread_mutex_t *)this + 10);
  ++*((_DWORD *)this + 176);
  *((void *)this + 89) = pthread_self();
  *((void *)this + 1275) = 0;
  *((void *)this + 1295) = 0;
  int v9 = *((_DWORD *)this + 176) - 1;
  *((_DWORD *)this + 176) = v9;
  if (!v9) {
    *((void *)this + 89) = 0;
  }
  pthread_mutex_unlock((pthread_mutex_t *)this + 10);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 720));
  ++*((_DWORD *)this + 196);
  *((void *)this + 99) = pthread_self();
  *((void *)this + 1276) = 0;
  *((void *)this + 12DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = 0;
  int v10 = *((_DWORD *)this + 196) - 1;
  *((_DWORD *)this + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = v10;
  if (!v10) {
    *((void *)this + 99) = 0;
  }
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 720));
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 800));
  ++*((_DWORD *)this + 216);
  *((void *)this + 109) = pthread_self();
  *((void *)this + 1277) = 0;
  *((void *)this + 1297) = 0;
  int v11 = *((_DWORD *)this + 216) - 1;
  *((_DWORD *)this + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v11;
  if (!v11) {
    *((void *)this + 109) = 0;
  }
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 800));

  bzero((char *)this + 2152, 0x1F40uLL);
}

void *ApiState::startupHandlers(void *this, void (*a2)(const char *, unint64_t), void *a3, void (*a4)(const char *, unint64_t), void *a5, void (*a6)(const char *, unint64_t))
{
  ApiState::smMemoryErrorHandler = this;
  ApiState::smMemoryErrorUserData = (uint64_t)a2;
  ApiState::smErrorHandler = a3;
  ApiState::smErrorUserData = (uint64_t)a4;
  ApiState::smLogHandler = a5;
  ApiState::smLogUserData = (uint64_t)a6;
  return this;
}

uint64_t ApiState::startupApiState(ApiState *this, const char *a2)
{
  int v3 = MemChunkAlloc(0x28E8uLL, 0);
  ApiState::ApiState((ApiState *)v3);
  uint64_t result = ApiState::init(v4, this);
  ApiState::smpApiState = (uint64_t)v3;
  return result;
}

uint64_t ApiState::init(ApiState *this, DgnSharedMemMgr *a2)
{
  __int16 v11 = 0;
  int v12 = 0;
  int v10 = &unk_26C4E2120;
  char v13 = 1;
  SnapTime::recordTime((ApiState *)((char *)this + 8), 1, 1, 1, 1);
  logMaybeSetTimeStampingBase(*((void *)this + 2));
  MemChunkRegion::getRegionStats(0, (uint64_t)v7);
  uint64_t v4 = v9;
  *((void *)this + 6) = v8;
  *((void *)this + 7) = v4;
  StartupMrec(a2, v5);
  MrecInitLibrarySet_throughSdapi();
  MrecInitModule_sdpres_sdapi();
  GlobalParamMgr::resetAll((uint64_t **)GlobalParamMgr::smpGlobalParamMgr);
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  return setDllTerminatedSuccessfullyOrNotInUse(0);
}

void FpuUseMrecDefaults::~FpuUseMrecDefaults(FpuUseMrecDefaults *this)
{
  *(void *)this = &unk_26C4E0588;
}

{
  *(void *)this = &unk_26C4E0588;
  JUMPOUT(0x216698730);
}

void ApiState::staticSendMemoryError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  MEMORY[0x270FA5388](a1, a2, a3, a4, a5);
  int v10 = v9;
  uint64_t v20 = *MEMORY[0x263EF8340];
  __int16 v11 = (ApiState *)ApiState::smpApiState;
  if (ApiState::smpApiState)
  {
    ApiState::sendMemoryError(v11, v5, v6, v7, v8, v9);
  }
  else
  {
    DgnString::DgnString((DgnString *)&v18);
    v15[0] = 0;
    int v16 = 0x2000;
    char v17 = 0;
    appended = MessageFormatPrefix((DgnThreadMgr *)v15, 0, 1, -1);
    if (v10)
    {
      DgnBuffer::appendString((DgnBuffer *)v15, ": ");
      appended = (DgnThreadMgr *)DgnBuffer::appendString((DgnBuffer *)v15, v10);
    }
    if (gShadowSdapiCrashOnSendError) {
      appended = (DgnThreadMgr *)crashIntoDebugger();
    }
    if (ApiState::smErrorHandler)
    {
      if (v19) {
        char v13 = v18;
      }
      else {
        char v13 = &unk_2140A1F0C;
      }
      if (v17) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = v15;
      }
      appended = (DgnThreadMgr *)ApiState::smMemoryErrorHandler(v14, ApiState::smMemoryErrorUserData);
    }
    DgnThreadMgr::broadcastError(appended);
    DgnString::~DgnString((DgnString *)&v18);
  }
}

void sub_213EBEB30(_Unwind_Exception *exception_object)
{
}

uint64_t ApiState::sendMemoryError(ApiState *this, const char *a2, uint64_t a3, const char *a4, uint64_t a5, const char *a6)
{
  uint64_t v6 = MEMORY[0x270FA5388](this, a2, a3, a4, a5);
  uint64_t v8 = v7;
  uint64_t v9 = v6;
  uint64_t v23 = *MEMORY[0x263EF8340];
  int v10 = (pthread_mutex_t *)(v6 + 560);
  pthread_mutex_lock((pthread_mutex_t *)(v6 + 560));
  ++*(_DWORD *)(v9 + 624);
  *(void *)(v9 + 6DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = pthread_self();
  __int16 v11 = (const char *)&unk_2140A1F0C;
  if (*(unsigned char *)(v9 + 80)) {
    __int16 v11 = *(const char **)(v9 + 88);
  }
  DgnString::DgnString((DgnString *)&v21);
  v18[0] = 0;
  int v19 = 0x2000;
  char v20 = 0;
  MessageFormatPrefix((DgnThreadMgr *)v18, 0, 1, -1);
  appended = (DgnThreadMgr *)DgnBuffer::appendString((DgnBuffer *)v18, v11);
  if (v8)
  {
    DgnBuffer::appendString((DgnBuffer *)v18, ": ");
    appended = (DgnThreadMgr *)DgnBuffer::appendString((DgnBuffer *)v18, v8);
  }
  if (gShadowSdapiCrashOnSendError) {
    appended = (DgnThreadMgr *)crashIntoDebugger();
  }
  if (ApiState::smErrorHandler)
  {
    *(unsigned char *)(v9 + 2) = 1;
    CallbackInsurance::CallbackInsurance((uint64_t)v17, 5, 0, 1);
    char v13 = &unk_2140A1F0C;
    if (v22) {
      char v13 = v21;
    }
    if (v20) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = v18;
    }
    ApiState::smMemoryErrorHandler(v14, ApiState::smMemoryErrorUserData);
    CallbackInsurance::~CallbackInsurance((CallbackInsurance *)v17);
  }
  DgnThreadMgr::broadcastError(appended);
  *(unsigned char *)(v9 + 2) = 0;
  DgnString::~DgnString((DgnString *)&v21);
  int v15 = *(_DWORD *)(v9 + 624) - 1;
  *(_DWORD *)(v9 + 6DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = v15;
  if (!v15) {
    *(void *)(v9 + 6DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
  }
  return pthread_mutex_unlock(v10);
}

void sub_213EBED48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CallbackInsurance::~CallbackInsurance((CallbackInsurance *)&a9);
  DgnString::~DgnString(v11);
  int v13 = *(_DWORD *)(v10 + 624) - 1;
  *(_DWORD *)(v10 + 6DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = v13;
  if (!v13) {
    *(void *)(v10 + 6DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
  }
  pthread_mutex_unlock(v9);
  _Unwind_Resume(a1);
}

void ApiState::staticSendError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const char *a9)
{
  uint64_t v9 = MEMORY[0x270FA5388](a1, a2, a3, a4, a5);
  int v16 = v10;
  char v17 = (const char *)v9;
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (ApiState::smpApiState)
  {
    LODWORD(v22) = v15;
    ApiState::sendError(ApiState::smpApiState, v9, v10, v11, v12, v12, v13, v14, v22, a9);
  }
  else
  {
    DgnString::DgnString((DgnString *)&v26);
    v23[0] = 0;
    int v24 = 0x2000;
    char v25 = 0;
    MessageFormatPrefix((DgnThreadMgr *)v23, 0, 1, v16);
    if (v17) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = (const char *)&unk_2140A1F0C;
    }
    DgnBuffer::appendString((DgnBuffer *)v23, v18);
    if (a9)
    {
      DgnBuffer::appendString((DgnBuffer *)v23, ": ");
      DgnBuffer::appendString((DgnBuffer *)v23, a9);
    }
    appended = (DgnThreadMgr *)DgnBuffer::appendString((DgnBuffer *)v23, " (See mrec/doc/client.txt for general documentation on errors.)");
    if (gShadowSdapiCrashOnSendError) {
      appended = (DgnThreadMgr *)crashIntoDebugger();
    }
    if (ApiState::smErrorHandler)
    {
      if (v27) {
        char v20 = v26;
      }
      else {
        char v20 = &unk_2140A1F0C;
      }
      if (v25) {
        uint64_t v21 = v20;
      }
      else {
        uint64_t v21 = v23;
      }
      appended = (DgnThreadMgr *)ApiState::smErrorHandler(v21, ApiState::smErrorUserData);
    }
    DgnThreadMgr::broadcastError(appended);
    DgnString::~DgnString((DgnString *)&v26);
  }
}

void sub_213EBEF74(_Unwind_Exception *exception_object)
{
}

uint64_t ApiState::sendError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const char *a10)
{
  uint64_t v10 = MEMORY[0x270FA5388](a1, a2, a3, a4, a5);
  int v12 = v11;
  int v14 = v13;
  int v16 = v15;
  uint64_t v17 = v10;
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v18 = (pthread_mutex_t *)(v10 + 560);
  pthread_mutex_lock((pthread_mutex_t *)(v10 + 560));
  ++*(_DWORD *)(v17 + 624);
  *(void *)(v17 + 6DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = pthread_self();
  if (!v16)
  {
    if (*(unsigned char *)(v17 + 80)) {
      int v16 = *(const char **)(v17 + 88);
    }
    else {
      int v16 = (const char *)&unk_2140A1F0C;
    }
  }
  DgnString::DgnString((DgnString *)&v31);
  v28[0] = 0;
  int v29 = 0x2000;
  char v30 = 0;
  MessageFormatPrefix((DgnThreadMgr *)v28, 0, 1, v14);
  DgnBuffer::appendString((DgnBuffer *)v28, v16);
  if (a10)
  {
    DgnBuffer::appendString((DgnBuffer *)v28, ": ");
    DgnBuffer::appendString((DgnBuffer *)v28, a10);
  }
  appended = (DgnThreadMgr *)DgnBuffer::appendString((DgnBuffer *)v28, " (See mrec/doc/client.txt for general documentation on errors.)");
  if (gShadowSdapiCrashOnSendError) {
    appended = (DgnThreadMgr *)crashIntoDebugger();
  }
  char v20 = (uint64_t (*)(unsigned char *, uint64_t))ApiState::smErrorHandler;
  if (ApiState::smErrorHandler)
  {
    if (v12)
    {
      if (*(unsigned char *)(v17 + 2)) {
        goto LABEL_27;
      }
      *(unsigned char *)(v17 + 2) = 1;
      if (v32) {
        uint64_t v21 = v31;
      }
      else {
        uint64_t v21 = &unk_2140A1F0C;
      }
      if (v30) {
        uint64_t v22 = v21;
      }
      else {
        uint64_t v22 = v28;
      }
      appended = (DgnThreadMgr *)v20(v22, ApiState::smErrorUserData);
    }
    else
    {
      *(unsigned char *)(v17 + 2) = 1;
      CallbackInsurance::CallbackInsurance((uint64_t)v27, 5, 0, 1);
      if (v32) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = &unk_2140A1F0C;
      }
      if (v30) {
        int v24 = v23;
      }
      else {
        int v24 = v28;
      }
      ApiState::smErrorHandler(v24, ApiState::smErrorUserData);
      CallbackInsurance::~CallbackInsurance((CallbackInsurance *)v27);
    }
  }
  DgnThreadMgr::broadcastError(appended);
  *(unsigned char *)(v17 + 2) = 0;
LABEL_27:
  DgnString::~DgnString((DgnString *)&v31);
  int v25 = *(_DWORD *)(v17 + 624) - 1;
  *(_DWORD *)(v17 + 6DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = v25;
  if (!v25) {
    *(void *)(v17 + 6DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
  }
  return pthread_mutex_unlock(v18);
}

void sub_213EBF1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CallbackInsurance::~CallbackInsurance((CallbackInsurance *)&a9);
  DgnString::~DgnString(v11);
  int v13 = *(_DWORD *)(v10 + 624) - 1;
  *(_DWORD *)(v10 + 6DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = v13;
  if (!v13) {
    *(void *)(v10 + 6DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
  }
  pthread_mutex_unlock(v9);
  _Unwind_Resume(a1);
}

void ApiState::staticSendLog(ApiState *this, const char *a2)
{
  if (ApiState::smpApiState)
  {
    ApiState::sendLog(this, (const char *)this);
  }
  else if (ApiState::smLogHandler)
  {
    ApiState::smLogHandler(this, ApiState::smLogUserData);
  }
}

void ApiState::sendLog(ApiState *this, const char *a2)
{
  if (ApiState::smLogHandler)
  {
    BOOL v3 = ApiState::smpApiState
      && !*(unsigned char *)(ApiState::smpApiState + 1)
      && *(unsigned __int8 *)(ApiState::smpApiState + 80) != 0;
    CallbackInsurance::CallbackInsurance((uint64_t)v11, 6, 0, 0);
    ApiState::smLogHandler(a2, ApiState::smLogUserData);
    if (v3) {
      throwIfErroredDuringCallback("SDLogHandler", v4, v5, v6, v7, v8, v9, v10);
    }
    CallbackInsurance::~CallbackInsurance((CallbackInsurance *)v11);
  }
}

void sub_213EBF32C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CallbackInsurance::~CallbackInsurance((CallbackInsurance *)va);
  _Unwind_Resume(a1);
}

void ApiState::progressCallbackWrapper(ApiState *this, uint64_t a2, void *a3)
{
  if (*a3)
  {
    BOOL v5 = ApiState::smpApiState
      && !*(unsigned char *)(ApiState::smpApiState + 1)
      && *(unsigned __int8 *)(ApiState::smpApiState + 80) != 0;
    CallbackInsurance::CallbackInsurance((uint64_t)v13, 2, 0, 1);
    ((void (*)(uint64_t, void))*a3)(a2, a3[1]);
    if (v5) {
      throwIfErroredDuringCallback("SDProgressCallback", v6, v7, v8, v9, v10, v11, v12);
    }
    CallbackInsurance::~CallbackInsurance((CallbackInsurance *)v13);
  }
}

void sub_213EBF3DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CallbackInsurance::~CallbackInsurance((CallbackInsurance *)va);
  _Unwind_Resume(a1);
}

void ApiState::callReallocateArrayCallback(ApiState *this, void (*a2)(unint64_t, unsigned int, unsigned int, void *, unsigned int, void **, unsigned int *), unint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, void **a8, unsigned int *a9)
{
  BOOL v17 = ApiState::smpApiState
     && !*(unsigned char *)(ApiState::smpApiState + 1)
     && *(unsigned __int8 *)(ApiState::smpApiState + 80) != 0;
  CallbackInsurance::CallbackInsurance((uint64_t)v25, 3, 0, 1);
  a2(a3, a4, a5, a6, a7, a8, a9);
  if (v17) {
    throwIfErroredDuringCallback("SDReallocateArrayCallback", v18, v19, v20, v21, v22, v23, v24);
  }
  CallbackInsurance::~CallbackInsurance((CallbackInsurance *)v25);
  if (*a9 < a5) {
    ThrowExternalNewFailure((uint64_t)this, (a5 * a4));
  }
}

void sub_213EBF4E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CallbackInsurance::~CallbackInsurance((CallbackInsurance *)va);
  _Unwind_Resume(a1);
}

void (***ApiState::cleanUpAfterSaveException(ApiState *this, DgnFileIOException *a2, DgnString *a3, uint64_t a4, uint64_t a5))(void)
{
  if (*((_DWORD *)this + 10)) {
    uint64_t v6 = (void *)*((void *)this + 4);
  }
  else {
    uint64_t v6 = &unk_2140A1F0C;
  }
  if (*((_DWORD *)this + 16)) {
    uint64_t v7 = (void *)*((void *)this + 7);
  }
  else {
    uint64_t v7 = &unk_2140A1F0C;
  }
  DgnString::stringPrintf(a2, "%s %d %s", (uint64_t)a3, a4, a5, v6, *((unsigned int *)this + 12), v7);

  return DgnDelete<DgnFileIOException>((void (***)(void))this);
}

void (***DgnDelete<DgnFileIOException>(void (***result)(void)))(void)
{
  if (result)
  {
    uint64_t v1 = result;
    (**result)(result);
    return (void (***)(void))MemChunkFree(v1, 0);
  }
  return result;
}

DgnString *ApiState::setLastResultCodeString(ApiState *this, char *a2)
{
  return DgnString::operator=((ApiState *)((char *)this + 64), a2);
}

uint64_t ApiState::errorReexited(ApiState *this)
{
  uint64_t v2 = (pthread_mutex_t *)((char *)this + 96);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 96));
  *((unsigned char *)this + 1) = 1;
  pthread_mutex_unlock(v2);
  LODWORD(v5) = 3;
  return ApiState::sendError((uint64_t)this, 0, 0xFFFFFFFFLL, 0, v3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1746, (uint64_t)"sdapi/apist", v5, (const char *)&errStr_sdapi_apist_E_REEXIT);
}

uint64_t ApiState::errorReentry(ApiState *this, const char *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  snprintf(__str, 0x100uLL, "Illegal SDAPI re-entry into %s while already in %s", a2, *((const char **)this + 11));
  *((unsigned char *)this + 1) = 1;
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 96));
  LODWORD(v6) = 6;
  return ApiState::sendError((uint64_t)this, (uint64_t)a2, 0xFFFFFFFFLL, 1, v4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1767, (uint64_t)"sdapi/apist", v6, __str);
}

uint64_t ApiState::errorCallDuringRecog(ApiState *this, const char *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  strcpy(v7, "Called function is illegal when there is an active SDhRecognizer");
  *((unsigned char *)this + 1) = 1;
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 96));
  LODWORD(v6) = 7;
  return ApiState::sendError((uint64_t)this, (uint64_t)a2, 0xFFFFFFFFLL, 0, v4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1787, (uint64_t)"sdapi/apist", v6, v7);
}

uint64_t ApiState::errorRDApiNotInit(ApiState *this, const char *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  strcpy(v7, "Called function is illegal when the RDApi is not enabled.");
  *((unsigned char *)this + 1) = 1;
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 96));
  LODWORD(v6) = 38;
  return ApiState::sendError((uint64_t)this, (uint64_t)a2, 0xFFFFFFFFLL, 0, v4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1807, (uint64_t)"sdapi/apist", v6, v7);
}

uint64_t ApiState::errorBadHeapOnEntry(ApiState *this, const char *a2)
{
  *((unsigned char *)this + 1) = 1;
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 96));
  LODWORD(v6) = 8;
  return ApiState::sendError((uint64_t)this, (uint64_t)a2, 0xFFFFFFFFLL, 0, v4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1821, (uint64_t)"sdapi/apist", v6, (const char *)&errStr_sdapi_apist_E_BAD_HEAP_ON_ENTRY);
}

uint64_t ApiState::errorBadHeapOnExit(ApiState *this)
{
  uint64_t v2 = (pthread_mutex_t *)((char *)this + 96);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 96));
  *((unsigned char *)this + 1) = 1;
  pthread_mutex_unlock(v2);
  LODWORD(v5) = 9;
  return ApiState::sendError((uint64_t)this, 0, 0xFFFFFFFFLL, 0, v3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1835, (uint64_t)"sdapi/apist", v5, (const char *)&errStr_sdapi_apist_E_BAD_HEAP_ON_EXIT);
}

void ApiState::handleDgnMemoryException(uint64_t a1)
{
  if (ApiState::smpApiState)
  {
    pthread_mutex_lock((pthread_mutex_t *)(ApiState::smpApiState + 96));
    uint64_t v1 = ApiState::smpApiState;
    *(unsigned char *)(ApiState::smpApiState + 1) = 1;
    a1 = pthread_mutex_unlock((pthread_mutex_t *)(v1 + 96));
  }

  ApiState::staticSendMemoryError(a1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/apist.cpp", 1853, (uint64_t)"sdapi/apist", 1);
}

void ApiState::handleDgnException(ApiState *this, DgnException *a2)
{
  if (ApiState::smpApiState)
  {
    pthread_mutex_lock((pthread_mutex_t *)(ApiState::smpApiState + 96));
    uint64_t v3 = ApiState::smpApiState;
    *(unsigned char *)(ApiState::smpApiState + 1) = 1;
    pthread_mutex_unlock((pthread_mutex_t *)(v3 + 96));
  }
  if (*((_DWORD *)this + 4)) {
    uint64_t v4 = (void *)*((void *)this + 1);
  }
  else {
    uint64_t v4 = &unk_2140A1F0C;
  }
  if (*((_DWORD *)this + 10)) {
    uint64_t v5 = (void *)*((void *)this + 4);
  }
  else {
    uint64_t v5 = &unk_2140A1F0C;
  }
  if (*((_DWORD *)this + 16)) {
    uint64_t v6 = (const char *)*((void *)this + 7);
  }
  else {
    uint64_t v6 = (const char *)&unk_2140A1F0C;
  }
  ApiState::staticSendError(0, *((unsigned int *)this + 18), 0, 0, (uint64_t)v4, *((unsigned int *)this + 6), (uint64_t)v5, *((unsigned int *)this + 12), v6);
}

uint64_t SdapiInsurance::SdapiInsurance(uint64_t a1, const char *a2, int a3, int a4, int a5)
{
  *(_WORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = 0;
  *(_WORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 112) = 0;
  *(_DWORD *)(a1 + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
  *(void *)(a1 + DgnArray<LinearTransform>::releaseAll((uint64_t)this + 104) = &unk_26C4E2120;
  *(unsigned char *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 120) = 1;
  *(_DWORD *)(a1 + DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)this + 128) = a5;
  if (ApiState::smpApiState)
  {
    ApiState::enterApi(ApiState::smpApiState, a1, a2, a3, a4);
    if (*(unsigned char *)(DgnThreadMgr::smpThreadMgr + 76) && !*(unsigned char *)(DgnThreadMgr::smpThreadMgr + 77)) {
      DgnThreadTrace::add(DgnThreadMgr::smpThreadMgr + 80, -1, 6);
    }
    *(void *)(a1 + 136) = mach_absolute_time();
  }
  return a1;
}

void sub_213EBFB98(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_26C4E0588;
  _Unwind_Resume(a1);
}

uint64_t ApiState::enterApi(uint64_t a1, uint64_t a2, const char *a3, int a4, int a5)
{
  uint64_t v10 = (pthread_mutex_t *)(a1 + 96);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 96));
  if (*(unsigned char *)(a1 + 80))
  {
    uint64_t result = ApiState::errorReentry((ApiState *)a1, a3);
LABEL_3:
    *(unsigned char *)(a2 + 97) = 0;
    return result;
  }
  if (a5 != 1 && *(_DWORD *)(RecogCtlMgr::smpRecogCtlMgr + 272))
  {
    uint64_t result = ApiState::errorCallDuringRecog((ApiState *)a1, a3);
    goto LABEL_3;
  }
  if (a4 == 3 && !*(unsigned char *)(a1 + 3))
  {
    uint64_t result = ApiState::errorRDApiNotInit((ApiState *)a1, a3);
    goto LABEL_3;
  }
  if (gShadowSdapiDiagnosticCheckHeapEveryCall && (mrecHeapValid() & 1) == 0)
  {
    uint64_t result = ApiState::errorBadHeapOnEntry((ApiState *)a1, a3);
    goto LABEL_3;
  }
  *(unsigned char *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = 1;
  *(void *)(a1 + 88) = a3;
  if (gbShowCallMemDeltas)
  {
    MemChunkRegion::getRegionStats(0, (uint64_t)v15);
    long long v12 = v15[1];
    *(_OWORD *)a2 = v15[0];
    *(_OWORD *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v12;
    long long v13 = v15[3];
    *(_OWORD *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v15[2];
    *(_OWORD *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = v13;
    long long v14 = v15[5];
    *(_OWORD *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = v15[4];
    *(_OWORD *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = v14;
    *(unsigned char *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = 1;
  }
  *(unsigned char *)(a2 + 97) = 1;
  return pthread_mutex_unlock(v10);
}

void SdapiInsurance::~SdapiInsurance(SdapiInsurance *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*((unsigned char *)this + 97))
  {
    if (*(unsigned char *)(DgnThreadMgr::smpThreadMgr + 76) && !*(unsigned char *)(DgnThreadMgr::smpThreadMgr + 77)) {
      DgnThreadTrace::add(DgnThreadMgr::smpThreadMgr + 80, -1, 10);
    }
    if (*((unsigned char *)this + 96)) {
      BOOL v6 = gbShowCallMemDeltas == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6) {
      ShowDeltaMemSummary(0, *(void *)(ApiState::smpApiState + 88), this, a4, a5);
    }
    uint64_t v7 = mach_absolute_time() - *((void *)this + 17);
    uint64_t v8 = (ApiState *)ApiState::smpApiState;
    uint64_t v9 = ApiState::smpApiState + 8 * *((unsigned int *)this + 32);
    ++*(void *)(v9 + 2152);
    *(void *)(v9 + 6152) += v7;
    *((void *)v8 + 5) += v7;
    ApiState::exitApi(v8, v10, v11, v12, v13);
  }
  *((void *)this + 13) = &unk_26C4E0588;
}

uint64_t ApiState::exitApi(ApiState *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*((unsigned char *)this + 80))
  {
    if (gbShowCalls) {
      xlprintf("Exiting sdapi call %s\n", a2, a3, a4, a5, *((void *)this + 11));
    }
    if (gShadowSdapiDiagnosticCheckHeapEveryCall && (mrecHeapValid() & 1) == 0) {
      ApiState::errorBadHeapOnExit(this);
    }
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 96));
    *((unsigned char *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = 0;
    return pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 96));
  }
  else
  {
    return ApiState::errorReexited(this);
  }
}

uint64_t CallbackInsurance::CallbackInsurance(uint64_t a1, int a2, int a3, char a4)
{
  *(_DWORD *)a1 = a2;
  uint64_t v7 = (pthread_rwlock_t *)(ApiState::smpApiState + 1824);
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = ApiState::smpApiState + 1824;
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = a3 == 0;
  if (a3) {
    DgnReadWriteLock::acquireRead(v7);
  }
  else {
    DgnReadWriteLock::acquireWrite(v7);
  }
  *(_WORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = 0;
  *(_DWORD *)(a1 + 44) = 0;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = &unk_26C4E2120;
  *(unsigned char *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = a4;
  DgnThreadMgr::startClientCallbackEvent((DgnThreadMgr *)(a2 == 6));
  *(void *)(a1 + 8) = mach_absolute_time();
  return a1;
}

void sub_213EBFF3C(_Unwind_Exception *a1)
{
  *uint64_t v2 = &unk_26C4E0588;
  Latch<DgnReadWriteLock,ReadWriteLatchAdapter>::release(v1);
  _Unwind_Resume(a1);
}

void CallbackInsurance::~CallbackInsurance(CallbackInsurance *this)
{
  uint64_t v2 = ApiState::smpApiState;
  unsigned int v3 = *(_DWORD *)this;
  uint64_t v4 = (pthread_mutex_t *)(ApiState::smpApiState + 80 * *(unsigned int *)this + 160);
  pthread_mutex_lock(v4);
  uint64_t v5 = (_DWORD *)(v2 + 80 * v3);
  int v6 = v5[56];
  v5 += 56;
  *uint64_t v5 = v6 + 1;
  uint64_t v7 = v2 + 80 * v3;
  *(void *)(v7 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = pthread_self();
  uint64_t v8 = (void *)(v7 + 232);
  uint64_t v9 = (DgnThreadMgr *)mach_absolute_time();
  uint64_t v10 = (char *)v9 - *((void *)this + 1);
  uint64_t v11 = ApiState::smpApiState + 8 * *(unsigned int *)this;
  ++*(void *)(v11 + 10152);
  *(void *)(v11 + 10312) += v10;
  DgnThreadMgr::endClientCallbackEvent(v9);
  if ((*v5)-- == 1) {
    *uint64_t v8 = 0;
  }
  pthread_mutex_unlock(v4);
  *((void *)this + 4) = &unk_26C4E0588;
  Latch<DgnReadWriteLock,ReadWriteLatchAdapter>::release((pthread_rwlock_t **)this + 2);
}

void ProgressCallbackWrapper(ApiState *a1, void *a2)
{
}

void SetShadowSdapiDiagnosticCheckHeapEveryCall(void)
{
  gShadowSdapiDiagnosticCheckHeapEveryCall = *(unsigned char *)(gParSdapiDiagnosticCheckHeapEveryCall + 41);
}

void SetShadowSdapiCrashOnSendError(void)
{
  gShadowSdapiCrashOnSendError = *(unsigned char *)(gParSdapiCrashOnSendError + 41);
}

void IntGlobalParam::~IntGlobalParam(IntGlobalParam *this)
{
  MrecInitModule_sdpres_sdapi();

  JUMPOUT(0x216698730);
}

void FpuSaveRestore::~FpuSaveRestore(FpuSaveRestore *this)
{
  *(void *)this = &unk_26C4E0588;
}

{
  *(void *)this = &unk_26C4E0588;
  JUMPOUT(0x216698730);
}

pthread_rwlock_t *Latch<DgnReadWriteLock,ReadWriteLatchAdapter>::release(pthread_rwlock_t **a1)
{
  uint64_t result = *a1;
  if (result)
  {
    uint64_t result = (pthread_rwlock_t *)DgnReadWriteLock::releaseRead(result);
    *a1 = 0;
  }
  return result;
}

void CPUID::initCPUID(CPUID *this)
{
  if (!*(unsigned char *)this)
  {
    *(unsigned char *)this = 1;
    bzero((char *)this + 4, 0x418uLL);
    *((_DWORD *)this + 263) = 1;
    *(void *)&long long v2 = 0x100000001;
    *((void *)this + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0x100000001;
    *((_WORD *)this + 5DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
    *((_DWORD *)this + 267) = 1;
    *((void *)this + 134) = 0x100000001;
    *((void *)this + 135) = -1;
    *((void *)this + 136) = -1;
    *((void *)&v2 + 1) = 0x100000001;
    *(_OWORD *)((char *)this + 10DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = v2;
    *(_OWORD *)((char *)this + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 112) = 0u;
    *(_OWORD *)((char *)this + 1DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)this + 128) = 0u;
    *((unsigned char *)this + 1DgnArray<LinearTransform>::releaseAll((uint64_t)this + 144) = 0;
    *(_OWORD *)((char *)this + 9337) = 0u;
    *(_OWORD *)((char *)this + 9353) = 0u;
    *(_OWORD *)((char *)this + 9369) = 0u;
    *(_OWORD *)((char *)this + 9385) = 0u;
    *(_OWORD *)((char *)this + 9401) = 0u;
    *(_OWORD *)((char *)this + 9417) = 0u;
    uint64_t v3 = *((unsigned int *)this + 2359);
    if (v3 <= 0x3F)
    {
      uint64_t v4 = (unsigned __int8 *)this + v3 + 9369;
      int v5 = v3 + 1;
      do
      {
        int v6 = *v4++;
        if (v6 != 32) {
          break;
        }
        *((_DWORD *)this + 2359) = v5++;
      }
      while (v5 != 65);
    }
    bzero((char *)this + 1145, 0x2000uLL);
  }
}

uint64_t TVertex::getInEdge(uint64_t this)
{
  do
    this = *(void *)this;
  while (this && *(unsigned char *)(this + 32));
  return this;
}

uint64_t TVertex::getInEdgeCount(uint64_t **this)
{
  uint64_t v1 = *this;
  if (!*this) {
    return 0;
  }
  while (*((unsigned char *)v1 + 32))
  {
    uint64_t v1 = (uint64_t *)*v1;
    if (!v1) {
      return 0;
    }
  }
  uint64_t result = 0;
LABEL_7:
  ++result;
  while (1)
  {
    uint64_t v1 = (uint64_t *)*v1;
    if (!v1) {
      return result;
    }
    if (!*((unsigned char *)v1 + 32)) {
      goto LABEL_7;
    }
  }
}

uint64_t TVertex::getOutEdge(uint64_t this)
{
  do
    this = *(void *)(this + 8);
  while (this && *(unsigned char *)(this + 32));
  return this;
}

uint64_t TVertex::getOutEdgeCount(TVertex *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (!v1) {
    return 0;
  }
  while (*(unsigned char *)(v1 + 32))
  {
    uint64_t v1 = *(void *)(v1 + 8);
    if (!v1) {
      return 0;
    }
  }
  uint64_t result = 0;
LABEL_7:
  ++result;
  while (1)
  {
    uint64_t v1 = *(void *)(v1 + 8);
    if (!v1) {
      return result;
    }
    if (!*(unsigned char *)(v1 + 32)) {
      goto LABEL_7;
    }
  }
}

void TGraph::TGraph(TGraph *this, char *a2, TSegmenter *a3, char a4)
{
  *(void *)this = a3;
  *((unsigned char *)this + 8) = a4;
  TAllocator::TAllocator((TGraph *)((char *)this + 16), 2048);
  *((_OWORD *)this + 5) = 0u;
  *((void *)this + 18) = 0;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((void *)this + 7) = a2;
  *((void *)this + 9) = 0;
  *((void *)this + 8) = TGraph::addVertex(this, a2);
}

void sub_213EC03B0(_Unwind_Exception *a1)
{
  int v6 = *(void **)(v1 + 128);
  if (v6)
  {
    *(void *)(v1 + 136) = v6;
    operator delete(v6);
  }
  TGraph::TGraph(v4, v3, v1);
  TAllocator::clear(v2);
  _Unwind_Resume(a1);
}

uint64_t TGraph::addVertex(TGraph *this, char *a2)
{
  if (a2)
  {
    unint64_t v4 = (unint64_t)&a2[-*((void *)this + 7)];
    uint64_t v5 = *((void *)this + 16);
    if (v4 < (*((void *)this + 17) - v5) >> 3)
    {
      uint64_t v6 = *(void *)(v5 + 8 * v4);
      if (v6)
      {
        *(unsigned char *)(v6 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
        return v6;
      }
    }
    uint64_t Segment = TSegmenter::getSegment(*(TSegmenter **)this, a2);
    uint64_t v8 = a2;
    if (!Segment || (v9 = Segment, uint64_t v8 = a2, *(_DWORD *)(Segment + 24)))
    {
LABEL_7:
      uint64_t v6 = TAllocator::allocate((TGraph *)((char *)this + 16), 48);
      uint64_t v10 = (char **)((char *)this + 80);
      *(void *)(v6 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = (uint64_t)(*((void *)this + 11) - *((void *)this + 10)) >> 3;
      *(void *)(v6 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v8;
      *(void *)(v6 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = a2;
      *(unsigned char *)(v6 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
      *(void *)uint64_t v6 = 0;
      *(void *)(v6 + 8) = 0;
      uint64_t v11 = (uint64_t *)*((void *)this + 11);
      unint64_t v12 = *((void *)this + 12);
      if ((unint64_t)v11 >= v12)
      {
        uint64_t v18 = ((char *)v11 - *v10) >> 3;
        if ((unint64_t)(v18 + 1) >> 61) {
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = v12 - (void)*v10;
        uint64_t v20 = v19 >> 2;
        if (v19 >> 2 <= (unint64_t)(v18 + 1)) {
          uint64_t v20 = v18 + 1;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v20;
        }
        if (v21) {
          uint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)this + 96, v21);
        }
        else {
          uint64_t v22 = 0;
        }
        uint64_t v31 = (uint64_t *)&v22[8 * v18];
        int v32 = &v22[8 * v21];
        *uint64_t v31 = v6;
        uint64_t v13 = v31 + 1;
        uint64_t v34 = (char *)*((void *)this + 10);
        uint64_t v33 = (char *)*((void *)this + 11);
        if (v33 != v34)
        {
          do
          {
            uint64_t v35 = *((void *)v33 - 1);
            v33 -= 8;
            *--uint64_t v31 = v35;
          }
          while (v33 != v34);
          uint64_t v33 = *v10;
        }
        *((void *)this + 10) = v31;
        *((void *)this + 11) = v13;
        *((void *)this + 12) = v32;
        if (v33) {
          operator delete(v33);
        }
      }
      else
      {
        *uint64_t v11 = v6;
        uint64_t v13 = v11 + 1;
      }
      *((void *)this + 11) = v13;
      TGraph::setMap(this, (TVertex *)v6);
      uint64_t v36 = *((void *)this + 9);
      if (!v36 || *(void *)(v36 + 24) < (unint64_t)a2) {
        *((void *)this + 9) = v6;
      }
      return v6;
    }
    uint64_t v8 = a2;
    while (1)
    {
      int v28 = **(_DWORD **)v9;
      {
        operator new();
      }
      if (v28 <= 8202)
      {
        if (v28 != 32 && v28 != 160) {
          goto LABEL_38;
        }
      }
      else if (v28 != 8203 && v28 != 12288 && v28 != 65279)
      {
LABEL_38:
        if (*((unsigned char *)this + 8)) {
          goto LABEL_7;
        }
      }
      uint64_t v8 = *(char **)(v9 + 8);
      uint64_t v30 = TSegmenter::getSegment(*(TSegmenter **)this, v8);
      if (v30)
      {
        uint64_t v9 = v30;
        if (!*(_DWORD *)(v30 + 24)) {
          continue;
        }
      }
      goto LABEL_7;
    }
  }
  uint64_t v6 = TAllocator::allocate((TGraph *)((char *)this + 16), 48);
  long long v14 = (char **)((char *)this + 80);
  *(void *)(v6 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = (uint64_t)(*((void *)this + 11) - *((void *)this + 10)) >> 3;
  *(_OWORD *)uint64_t v6 = 0u;
  *(_OWORD *)(v6 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0u;
  *(unsigned char *)(v6 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
  int v15 = (uint64_t *)*((void *)this + 11);
  unint64_t v16 = *((void *)this + 12);
  if ((unint64_t)v15 >= v16)
  {
    uint64_t v23 = ((char *)v15 - *v14) >> 3;
    if ((unint64_t)(v23 + 1) >> 61) {
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v24 = v16 - (void)*v14;
    uint64_t v25 = v24 >> 2;
    if (v24 >> 2 <= (unint64_t)(v23 + 1)) {
      uint64_t v25 = v23 + 1;
    }
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v26 = v25;
    }
    if (v26) {
      int v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)this + 96, v26);
    }
    else {
      int v27 = 0;
    }
    char v37 = (uint64_t *)&v27[8 * v23];
    uint64_t v38 = &v27[8 * v26];
    *char v37 = v6;
    BOOL v17 = v37 + 1;
    uint64_t v40 = (char *)*((void *)this + 10);
    uint64_t v39 = (char *)*((void *)this + 11);
    if (v39 != v40)
    {
      do
      {
        uint64_t v41 = *((void *)v39 - 1);
        v39 -= 8;
        *--char v37 = v41;
      }
      while (v39 != v40);
      uint64_t v39 = *v14;
    }
    *((void *)this + 10) = v37;
    *((void *)this + 11) = v17;
    *((void *)this + 12) = v38;
    if (v39) {
      operator delete(v39);
    }
  }
  else
  {
    *int v15 = v6;
    BOOL v17 = v15 + 1;
  }
  *((void *)this + 11) = v17;
  return v6;
}

void sub_213EC0744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void TGraph::~TGraph(TGraph *this)
{
  long long v2 = (void *)*((void *)this + 16);
  if (v2)
  {
    *((void *)this + 17) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 13);
  if (v3)
  {
    *((void *)this + 14) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 10);
  if (v4)
  {
    *((void *)this + 11) = v4;
    operator delete(v4);
  }
  TAllocator::clear((TGraph *)((char *)this + 16));
}

uint64_t TGraph::getVertex(TGraph *this, const char *a2)
{
  unint64_t v2 = (unint64_t)&a2[-*((void *)this + 7)];
  uint64_t v3 = *((void *)this + 16);
  if (v2 >= (*((void *)this + 17) - v3) >> 3) {
    return 0;
  }
  else {
    return *(void *)(v3 + 8 * v2);
  }
}

void TGraph::setMap(TGraph *this, TVertex *a2)
{
  unint64_t v4 = (uint64_t *)((char *)this + 128);
  uint64_t v3 = *((void *)this + 16);
  unint64_t v5 = *((void *)a2 + 3) - *((void *)this + 7);
  if (v5 >= (*((void *)this + 17) - v3) >> 3)
  {
    if (2 * v5 <= 0x100) {
      unint64_t v6 = 256;
    }
    else {
      unint64_t v6 = 2 * v5;
    }
    uint64_t v7 = 0;
    std::vector<TSegment const*>::resize((uint64_t)this + 128, v6, &v7);
    uint64_t v3 = *v4;
  }
  *(void *)(v3 + 8 * v5) = a2;
}

void TGraph::deleteVertex(TGraph *this, TVertex *a2)
{
  uint64_t v2 = *((void *)a2 + 1);
  if (v2)
  {
    while (*(unsigned char *)(v2 + 32))
    {
      uint64_t v2 = *(void *)(v2 + 8);
      if (!v2) {
        goto LABEL_4;
      }
    }
LABEL_8:
    *(unsigned char *)(v2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 1;
    while (1)
    {
      uint64_t v2 = *(void *)(v2 + 8);
      if (!v2) {
        break;
      }
      if (!*(unsigned char *)(v2 + 32)) {
        goto LABEL_8;
      }
    }
  }
LABEL_4:
  uint64_t v3 = *(uint64_t **)a2;
  if (*(void *)a2)
  {
    while (*((unsigned char *)v3 + 32))
    {
      uint64_t v3 = (uint64_t *)*v3;
      if (!v3) {
        goto LABEL_7;
      }
    }
LABEL_12:
    *((unsigned char *)v3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 1;
    while (1)
    {
      uint64_t v3 = (uint64_t *)*v3;
      if (!v3) {
        break;
      }
      if (!*((unsigned char *)v3 + 32)) {
        goto LABEL_12;
      }
    }
  }
LABEL_7:
  *((unsigned char *)a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 1;
}

void TGraph::deleteEdge(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 1;
}

uint64_t TGraph::getNextVertex(TGraph *this, unint64_t a2)
{
  unint64_t v2 = *((void *)this + 7);
  if (v2 > a2) {
    return *((void *)this + 8);
  }
  unint64_t v4 = *(void *)(*((void *)this + 9) + 24);
  if (v4 < a2) {
    return 0;
  }
  for (uint64_t i = (uint64_t *)(*((void *)this + 16) - 8 * v2 + 8 * a2); ; ++i)
  {
    uint64_t result = *i;
    if (*i) {
      break;
    }
    if (++a2 > v4) {
      return 0;
    }
  }
  return result;
}

uint64_t TGraph::getPrevVertex(TGraph *this, unint64_t a2)
{
  unint64_t v2 = *((void *)this + 7);
  if (v2 > a2) {
    return 0;
  }
  uint64_t result = *((void *)this + 9);
  if (*(void *)(result + 24) >= a2)
  {
    for (uint64_t i = (uint64_t *)(*((void *)this + 16) - 8 * v2 + 8 * a2); ; --i)
    {
      uint64_t result = *i;
      if (*i) {
        break;
      }
      if (--a2 < v2) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t TGraph::addEdge(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v9 = (uint64_t *)(a2 + 8);
  for (uint64_t i = *(void *)(a2 + 8); i; uint64_t i = *(void *)(i + 8))
  {
    if (!*(unsigned char *)(i + 32)) {
      break;
    }
  }
  if (*(_DWORD *)a4 != 5)
  {
    uint64_t v10 = 0;
    if (!i || *(_DWORD *)a4 == 2) {
      goto LABEL_22;
    }
    uint64_t v10 = 0;
LABEL_9:
    uint64_t v11 = i;
    int v12 = *(_DWORD *)(i + 48);
    if (v12 != 2 && v12 != 5)
    {
      int v14 = wcscmp(**(const __int32 ***)(a4 + 8), **(const __int32 ***)(v11 + 56));
      if (v14 < 0) {
        goto LABEL_22;
      }
      if (!v14 && *(uint64_t **)(v11 + 24) == a3 && *(unsigned __int8 *)(a4 + 24) == *(unsigned __int8 *)(v11 + 72)) {
        return v11;
      }
    }
    uint64_t i = v11;
    while (1)
    {
      uint64_t i = *(void *)(i + 8);
      if (!i) {
        break;
      }
      if (!*(unsigned char *)(i + 32))
      {
        uint64_t v10 = v11;
        goto LABEL_9;
      }
    }
    uint64_t v10 = v11;
    goto LABEL_22;
  }
  uint64_t v10 = 0;
LABEL_22:
  uint64_t v11 = TAllocator::allocate((TAllocator *)(a1 + 2), 80);
  int v15 = (char **)(a1 + 13);
  uint64_t v16 = (uint64_t)(a1[14] - a1[13]) >> 3;
  *(_DWORD *)(v11 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = 3;
  *(void *)(v11 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = 0;
  *(void *)(v11 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = 0;
  *(unsigned char *)(v11 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = 0;
  *(void *)(v11 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = v16;
  *(void *)(v11 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = a2;
  *(void *)(v11 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = a3;
  *(unsigned char *)(v11 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
  *(void *)uint64_t v11 = 0;
  *(void *)(v11 + 8) = 0;
  long long v17 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v11 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = *(_OWORD *)a4;
  *(_OWORD *)(v11 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = v17;
  uint64_t v18 = (uint64_t *)a1[14];
  unint64_t v19 = a1[15];
  if ((unint64_t)v18 >= v19)
  {
    uint64_t v21 = ((char *)v18 - *v15) >> 3;
    if ((unint64_t)(v21 + 1) >> 61) {
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v22 = v19 - (void)*v15;
    uint64_t v23 = v22 >> 2;
    if (v22 >> 2 <= (unint64_t)(v21 + 1)) {
      uint64_t v23 = v21 + 1;
    }
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v24 = v23;
    }
    if (v24) {
      uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(a1 + 15), v24);
    }
    else {
      uint64_t v25 = 0;
    }
    unint64_t v26 = (uint64_t *)&v25[8 * v21];
    int v27 = &v25[8 * v24];
    *unint64_t v26 = v11;
    uint64_t v20 = v26 + 1;
    int v29 = (char *)a1[13];
    int v28 = (char *)a1[14];
    if (v28 != v29)
    {
      do
      {
        uint64_t v30 = *((void *)v28 - 1);
        v28 -= 8;
        *--unint64_t v26 = v30;
      }
      while (v28 != v29);
      int v28 = *v15;
    }
    a1[13] = v26;
    a1[14] = v20;
    a1[15] = v27;
    if (v28) {
      operator delete(v28);
    }
  }
  else
  {
    *uint64_t v18 = v11;
    uint64_t v20 = v18 + 1;
  }
  a1[14] = v20;
  uint64_t v31 = (uint64_t *)(v10 + 8);
  if (!v10) {
    uint64_t v31 = v9;
  }
  *(void *)(v11 + 8) = *v31;
  *uint64_t v31 = v11;
  *(void *)uint64_t v11 = *a3;
  *a3 = v11;
  return v11;
}

void TGraph::topologicalSort(void *a1, void **a2, uint64_t a3)
{
  std::vector<unsigned long>::vector(__p, (uint64_t)(a1[11] - a1[10]) >> 3);
  unint64_t v6 = (uint64_t ***)a1[10];
  unint64_t v7 = 0;
  uint64_t v8 = a1[11] - (void)v6;
  if (v8)
  {
    unint64_t v9 = v8 >> 3;
    uint64_t v10 = (uint64_t *)__p[0];
    if (v9 <= 1) {
      uint64_t v11 = 1;
    }
    else {
      uint64_t v11 = v9;
    }
    do
    {
      if (!*((unsigned char *)*v6 + 32))
      {
        ++v7;
        *uint64_t v10 = TVertex::getInEdgeCount(*v6);
      }
      ++v6;
      ++v10;
      --v11;
    }
    while (v11);
  }
  a2[1] = *a2;
  std::vector<TPItnTagHandle_fake **>::reserve(a2, v7);
  unint64_t v12 = (unint64_t)a2[2];
  uint64_t v13 = (char *)a2[1];
  if ((unint64_t)v13 >= v12)
  {
    uint64_t v15 = (v13 - (unsigned char *)*a2) >> 3;
    if ((unint64_t)(v15 + 1) >> 61) {
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v16 = v12 - (void)*a2;
    uint64_t v17 = v16 >> 2;
    if (v16 >> 2 <= (unint64_t)(v15 + 1)) {
      uint64_t v17 = v15 + 1;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v17;
    }
    if (v18) {
      unint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(a2 + 2), v18);
    }
    else {
      unint64_t v19 = 0;
    }
    uint64_t v20 = &v19[8 * v15];
    uint64_t v21 = &v19[8 * v18];
    *(void *)uint64_t v20 = a1[8];
    int v14 = v20 + 8;
    uint64_t v23 = (char *)*a2;
    uint64_t v22 = (char *)a2[1];
    if (v22 != *a2)
    {
      do
      {
        uint64_t v24 = *((void *)v22 - 1);
        v22 -= 8;
        *((void *)v20 - 1) = v24;
        v20 -= 8;
      }
      while (v22 != v23);
      uint64_t v22 = (char *)*a2;
    }
    *a2 = v20;
    a2[1] = v14;
    a2[2] = v21;
    if (v22) {
      operator delete(v22);
    }
  }
  else
  {
    *(void *)uint64_t v13 = a1[8];
    int v14 = v13 + 8;
  }
  a2[1] = v14;
  uint64_t v25 = *a2;
  if (v14 != *a2)
  {
    unint64_t v26 = 0;
    do
    {
      uint64_t v27 = v25[v26];
      if (a3) {
        (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a3 + 24))(a3, v27, a1);
      }
      while (1)
      {
        uint64_t v27 = *(void *)(v27 + 8);
        if (!v27) {
          break;
        }
        if (!*(unsigned char *)(v27 + 32))
        {
LABEL_47:
          if (a3) {
            (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a3 + 16))(a3, v27, a1);
          }
          uint64_t v37 = *(void *)(v27 + 24);
          uint64_t v38 = __p[0];
          --*((void *)__p[0] + *(void *)(v37 + 40));
          if (!v38[*(void *)(v37 + 40)])
          {
            uint64_t v40 = (char *)a2[1];
            unint64_t v39 = (unint64_t)a2[2];
            if ((unint64_t)v40 >= v39)
            {
              uint64_t v41 = (v40 - (unsigned char *)*a2) >> 3;
              if ((unint64_t)(v41 + 1) >> 61) {
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v28 = v39 - (void)*a2;
              uint64_t v29 = v28 >> 2;
              if (v28 >> 2 <= (unint64_t)(v41 + 1)) {
                uint64_t v29 = v41 + 1;
              }
              if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v30 = v29;
              }
              if (v30) {
                uint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(a2 + 2), v30);
              }
              else {
                uint64_t v31 = 0;
              }
              int v32 = &v31[8 * v41];
              *(void *)int v32 = v37;
              uint64_t v33 = v32 + 8;
              uint64_t v35 = (char *)*a2;
              uint64_t v34 = (char *)a2[1];
              if (v34 != *a2)
              {
                do
                {
                  uint64_t v36 = *((void *)v34 - 1);
                  v34 -= 8;
                  *((void *)v32 - 1) = v36;
                  v32 -= 8;
                }
                while (v34 != v35);
                uint64_t v34 = (char *)*a2;
              }
              *a2 = v32;
              a2[1] = v33;
              a2[2] = &v31[8 * v30];
              if (v34) {
                operator delete(v34);
              }
            }
            else
            {
              *(void *)uint64_t v40 = v37;
              uint64_t v33 = v40 + 8;
            }
            a2[1] = v33;
          }
          while (1)
          {
            uint64_t v27 = *(void *)(v27 + 8);
            if (!v27) {
              goto LABEL_54;
            }
            if (!*(unsigned char *)(v27 + 32)) {
              goto LABEL_47;
            }
          }
        }
      }
LABEL_54:
      ++v26;
      uint64_t v25 = *a2;
    }
    while (v26 < ((unsigned char *)a2[1] - (unsigned char *)*a2) >> 3);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_213EC0EE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void TGraph::minimize(TGraph *this)
{
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  TGraph::topologicalSort(this, (void **)&v16, 0);
  unint64_t v2 = v16;
  uint64_t v3 = v17;
  if (v17 == (unsigned char *)v16)
  {
    unint64_t v2 = v17;
    if (!v17) {
      return;
    }
    goto LABEL_42;
  }
  unint64_t v4 = 0;
  do
  {
    uint64_t v5 = v2[v4];
    if (!*(unsigned char *)(v5 + 32))
    {
      uint64_t v6 = *(void *)(v5 + 8);
      if (v6)
      {
        while (*(unsigned char *)(v6 + 32))
        {
          uint64_t v6 = *(void *)(v6 + 8);
          if (!v6) {
            goto LABEL_40;
          }
        }
LABEL_8:
        int v7 = *(_DWORD *)(v6 + 48);
        if (v7 != 2 && v7 != 5)
        {
          uint64_t v9 = v6;
          do
          {
            uint64_t v9 = *(void *)(v9 + 8);
            if (!v9) {
              goto LABEL_13;
            }
          }
          while (*(unsigned char *)(v9 + 32));
          while (1)
          {
            int v10 = *(_DWORD *)(v9 + 48);
            BOOL v11 = v10 == 2 || v10 == 5;
            if (!v11 && !wcscmp(**(const __int32 ***)(v6 + 56), **(const __int32 ***)(v9 + 56)))
            {
              uint64_t v12 = *(void *)(v6 + 24);
              uint64_t v13 = *(void *)(v9 + 24);
              if (v12 == v13)
              {
                *(unsigned char *)(v9 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 1;
              }
              else if (*(void *)(v12 + 16) == *(void *)(v13 + 16) && TVertex::getInEdgeCount((uint64_t **)v12) == 1)
              {
                int v14 = (TGraph *)TVertex::getInEdgeCount((uint64_t **)v13);
                if (v14 == (TGraph *)1)
                {
                  uint64_t v15 = *(void *)(v13 + 8);
                  if (v15)
                  {
                    while (*(unsigned char *)(v15 + 32))
                    {
                      uint64_t v15 = *(void *)(v15 + 8);
                      if (!v15) {
                        goto LABEL_33;
                      }
                    }
LABEL_35:
                    int v14 = (TGraph *)TGraph::addEdge(this, *(void *)(v6 + 24), *(uint64_t **)(v15 + 24), v15 + 48);
                    while (1)
                    {
                      uint64_t v15 = *(void *)(v15 + 8);
                      if (!v15) {
                        break;
                      }
                      if (!*(unsigned char *)(v15 + 32)) {
                        goto LABEL_35;
                      }
                    }
                  }
LABEL_33:
                  TGraph::deleteVertex(v14, (TVertex *)v13);
                }
              }
            }
            do
            {
              uint64_t v9 = *(void *)(v9 + 8);
              if (!v9) {
                goto LABEL_13;
              }
            }
            while (*(unsigned char *)(v9 + 32));
          }
        }
LABEL_13:
        while (1)
        {
          uint64_t v6 = *(void *)(v6 + 8);
          if (!v6) {
            break;
          }
          if (!*(unsigned char *)(v6 + 32)) {
            goto LABEL_8;
          }
        }
        unint64_t v2 = v16;
        uint64_t v3 = v17;
      }
    }
LABEL_40:
    ++v4;
  }
  while (v4 < (v3 - (unsigned char *)v2) >> 3);
  if (v2)
  {
LABEL_42:
    uint64_t v17 = v2;
    operator delete(v2);
  }
}

void sub_213EC10D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<BOOL>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = a1[1];
    unint64_t v5 = v4 + a2;
    a1[1] = v4 + a2;
    if (v4)
    {
      unint64_t v6 = v5 - 1;
      if (((v5 - 1) ^ (v4 - 1)) < 0x40)
      {
LABEL_10:
        uint64_t v10 = *a1 + 8 * (v4 >> 6);
        int v11 = v4 & 0x3F;
        std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v10, a2);
        return a1;
      }
    }
    else
    {
      unint64_t v6 = v5 - 1;
    }
    unint64_t v7 = v6 >> 6;
    if (v5 >= 0x41) {
      unint64_t v8 = v7;
    }
    else {
      unint64_t v8 = 0;
    }
    *(void *)(*a1 + 8 * v8) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *tknPrintString(const char *a1)
{
  int v2 = strlen(s_pLogPartialLine);
  if (strlen(a1) + v2 + 101 > s_nPartialLineAllocSize)
  {
    s_pLogPartialLine = &s_pStaticLogPartialLine;
    s_nPartialLineAllocSize = 0x2000;
    operator new[]();
  }
  uint64_t v3 = s_pLogPartialLine;
  unint64_t v4 = &s_pLogPartialLine[strlen(s_pLogPartialLine)];
  char v5 = *a1;
  if (*a1)
  {
    do
    {
      if ((s_bJustPrintedNewLine & 1) == 0)
      {
        unint64_t v6 = strcpy(v4, gpLogLinePrefix);
        v4 += strlen(v6);
        s_bJustPrintedNewLine = 1;
        char v5 = *a1;
      }
      *v4++ = v5;
      if (*a1 == 10)
      {
        char *v4 = 0;
        tknLogString((uint64_t)s_pLogPartialLine);
        unint64_t v4 = s_pLogPartialLine;
        s_bJustPrintedNewLine = 0;
        uint64_t v3 = s_pLogPartialLine;
      }
      int v7 = *(unsigned __int8 *)++a1;
      char v5 = v7;
    }
    while (v7);
  }
  char *v4 = 0;
  unint64_t v8 = s_pLogPartialLine;

  return memmove(v8, v3, v4 - v3 + 1);
}

void *tknPrintf(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  char v5 = (const char *)MEMORY[0x270FA5388](a1, a2, a3, a4, a5);
  uint64_t v8 = *MEMORY[0x263EF8340];
  __str[0] = 0;
  vsnprintf(__str, 0x1FFEuLL, v5, va);
  return tknPrintString(__str);
}

void *loggableUnicode@<X0>(unsigned int *a1@<X0>, void *a2@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  long long __s = v8;
  long long v7 = xmmword_214085190;
  char v9 = 1;
  {
    operator new();
  }
  TLocaleInfo::unicodeToMultiByte(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a1, (uint64_t)&__s);
  if (*((void *)&v7 + 1) >= (unint64_t)v7)
  {
    if (v9)
    {
      char v5 = 0;
      TBuffer<char>::insert((uint64_t)&__s, *((unint64_t *)&v7 + 1), &v5, 1uLL);
      --*((void *)&v7 + 1);
    }
    else if ((void)v7)
    {
      __s[(void)v7 - 1] = 0;
    }
  }
  else
  {
    __s[*((void *)&v7 + 1)] = 0;
  }
  uint64_t result = std::string::basic_string[abi:ne180100]<0>(a2, __s);
  if (v9)
  {
    uint64_t result = __s;
    if (__s != v8)
    {
      if (__s) {
        return (void *)MEMORY[0x216698730]();
      }
    }
  }
  return result;
}

void sub_213EC1534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  MEMORY[0x216698730](v45, 0x1070C40ADD13FEBLL);
  if (a45)
  {
    if (a10 != v46 && a10 != 0) {
      MEMORY[0x216698730]();
    }
  }
  _Unwind_Resume(a1);
}

void *operator<<(void *a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  long long __s = v9;
  long long v8 = xmmword_214085190;
  char v10 = 1;
  {
    operator new();
  }
  TLocaleInfo::unicodeToMultiByte(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a2, (uint64_t)&__s);
  if (*((void *)&v8 + 1) >= (unint64_t)v8)
  {
    if (v10)
    {
      char v6 = 0;
      TBuffer<char>::insert((uint64_t)&__s, *((unint64_t *)&v8 + 1), &v6, 1uLL);
      --*((void *)&v8 + 1);
    }
    else if ((void)v8)
    {
      __s[(void)v8 - 1] = 0;
    }
  }
  else
  {
    __s[*((void *)&v8 + 1)] = 0;
  }
  size_t v4 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v4);
  if (v10 && __s != v9 && __s) {
    MEMORY[0x216698730]();
  }
  return a1;
}

void sub_213EC1730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  MEMORY[0x216698730](v45, 0x1070C40ADD13FEBLL);
  if (a45)
  {
    if (a10 != v46 && a10 != 0) {
      MEMORY[0x216698730]();
    }
  }
  _Unwind_Resume(a1);
}

uint64_t StartupLatticeNBestParamSpecMgr(void)
{
  uint64_t v0 = MemChunkAlloc(0x28uLL, 0);
  IntParamSpec::IntParamSpec(v0, (uint64_t)"LatticeNBestListMaxLength", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, (uint64_t)&sLatticeNBestListMaxLengthIntHistory);
  ParamSpecMgr::addParam(qword_26AB82A60, (ParamSpec *)v0);
  uint64_t v1 = (ParamSpecMgr *)qword_26AB82A60;

  return ParamSpecMgr::sortParams(v1);
}

uint64_t LatticeNBestParamSet::LatticeNBestParamSet(uint64_t a1, const char *a2, int a3, int a4, int a5)
{
  *(void *)a1 = &unk_26C4DFAB0;
  DgnString::DgnString((DgnString *)(a1 + 8), a2);
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = a3;
  *(_DWORD *)(a1 + 28) = a4;
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = a5;
  *(_DWORD *)(a1 + 36) = 0;
  *(void *)a1 = &unk_26C4E2B10;
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A60, 1, 0, 0, v9, v10, v11, v12);
  return a1;
}

void sub_213EC18C0(_Unwind_Exception *a1)
{
  *uint64_t v1 = v2;
  DgnString::~DgnString(v3);
  _Unwind_Resume(a1);
}

uint64_t LatticeNBestParamSet::LatticeNBestParamSet(uint64_t a1, uint64_t a2, char *a3, int a4, int a5, int a6)
{
  *(void *)a1 = &unk_26C4DFAB0;
  DgnString::DgnString((DgnString *)(a1 + 8), a3);
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = a4;
  *(_DWORD *)(a1 + 28) = a5;
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = a6;
  *(_DWORD *)(a1 + 36) = 0;
  *(void *)a1 = &unk_26C4E2B10;
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

uint64_t LatticeNBestParamSet::setDefaults(LatticeNBestParamSet *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = ParamSpecMgr::ParamGetDefault_int((ParamSpecMgr *)qword_26AB82A60, 1, 0, 0, a5, a6, a7, a8);
  *((_DWORD *)this + 10) = result;
  return result;
}

uint64_t LatticeNBestParamSet::sizeObject(uint64_t a1, int a2)
{
  BOOL v2 = a2 != 3;
  uint64_t v3 = sizeObject(a1 + 8);
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 4 * v2;
  }
  return v3 + 16 * v2 + v4;
}

uint64_t LatticeNBestParamSet::getBoolParameter(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 == 1) {
    throwWrongTypeForParamId(1, "int", "BOOL", a4, a5, a6, a7, a8);
  }
  else {
    throwWrongParamIdValue(a2, "BOOL", a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t LatticeNBestParamSet::getIntParameter(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 == 1)
  {
    switch((int)a3)
    {
      case 0:
        uint64_t result = *(unsigned int *)(a1 + 40);
        break;
      case 1:
        ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A60, 1, a3, a4, a5, a6, a7, a8);
        break;
      case 2:
        uint64_t v10 = (const void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A60, 1, a3, a4, a5, a6, a7, a8);
        break;
      case 3:
        uint64_t v11 = (const void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A60, 1, a3, a4, a5, a6, a7, a8);
        break;
      default:
        throwWrongQueryMode(a3, (uint64_t)"int", a3, a4, a5, a6, a7, a8);
        return 0;
    }
  }
  else
  {
    throwWrongParamIdValue(a2, "int", a3, a4, a5, a6, a7, a8);
    return 0;
  }
  return result;
}

double LatticeNBestParamSet::getDoubleParameter(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 == 1) {
    throwWrongTypeForParamId(1, "int", "double", a4, a5, a6, a7, a8);
  }
  else {
    throwWrongParamIdValue(a2, "double", a3, a4, a5, a6, a7, a8);
  }
  return 0.0;
}

uint64_t LatticeNBestParamSet::getStringParameter(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 == 1) {
    throwWrongTypeForParamId(1, "int", "string", a4, a5, a6, a7, a8);
  }
  else {
    throwWrongParamIdValue(a2, "string", a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

uint64_t LatticeNBestParamSet::getEnumParameter(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 == 1) {
    throwWrongTypeForParamId(1, "int", "BOOL", a4, a5, a6, a7, a8);
  }
  else {
    throwWrongParamIdValue(a2, "enum", a3, a4, a5, a6, a7, a8);
  }
  return 0;
}

void LatticeNBestParamSet::setBoolParameter(LatticeNBestParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8 = a2;
  if (a2 == 1) {
    throwWrongTypeForParamId(1, "int", "BOOL", a4, a5, a6, a7, a8);
  }

  throwWrongParamIdValue(v8, "BOOL", a3, a4, a5, a6, a7, a8);
}

void LatticeNBestParamSet::setIntParameter(LatticeNBestParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 == 1)
  {
    int v8 = a3;
    ParamByParamId = (void *)ParamSpecMgr::getParamByParamId((ParamSpecMgr *)qword_26AB82A60, 1, a3, a4, a5, a6, a7, a8);
    if (ParamByParamId) {
    IntParamSpec::validateValue((IntParamSpec *)ParamByParamId, v8, 0, 0, v11, v12, v13, v14);
    }
    if (*((_DWORD *)this + 9))
    {
      throwParamSetSetFailed("LatticeNBestListMaxLength", "int", v15, v16, v17, v18, v19, v20);
    }
    else
    {
      *((_DWORD *)this + 10) = v8;
    }
  }
  else
  {
    throwWrongParamIdValue(a2, "int", a3, a4, a5, a6, a7, a8);
  }
}

void LatticeNBestParamSet::setDoubleParameter(LatticeNBestParamSet *this, int a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char v9 = a2;
  if (a2 == 1) {
    throwWrongTypeForParamId(1, "int", "double", a5, a6, a7, a8, a9);
  }

  throwWrongParamIdValue(v9, "double", a4, a5, a6, a7, a8, a9);
}

void LatticeNBestParamSet::setStringParameter(LatticeNBestParamSet *this, int a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8 = a2;
  if (a2 == 1) {
    throwWrongTypeForParamId(1, "int", "string", a4, a5, a6, a7, a8);
  }

  throwWrongParamIdValue(v8, "string", (uint64_t)a3, a4, a5, a6, a7, a8);
}

void LatticeNBestParamSet::setEnumParameter(LatticeNBestParamSet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8 = a2;
  if (a2 == 1) {
    throwWrongTypeForParamId(1, "int", "BOOL", a4, a5, a6, a7, a8);
  }

  throwWrongParamIdValue(v8, "enum", a3, a4, a5, a6, a7, a8);
}

void LatticeNBestParamSet::~LatticeNBestParamSet(LatticeNBestParamSet *this)
{
  *(void *)this = &unk_26C4DFAB0;
  DgnString::~DgnString((LatticeNBestParamSet *)((char *)this + 8));
}

{
  uint64_t vars8;

  *(void *)this = &unk_26C4DFAB0;
  DgnString::~DgnString((LatticeNBestParamSet *)((char *)this + 8));

  JUMPOUT(0x216698730);
}

void crashIntoDebugger(void)
{
}

void assertFailed(const char *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

const char *conditionalAssert(const char *result, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (g_bCrashOnError) {
    assertFailed(result, a2, a3, a4, a5);
  }
  return result;
}

uint64_t getDirSep(void)
{
  return 47;
}

void getFilePath(char *__s@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v4, __s);
  std::string::size_type v3 = std::string::rfind(&v4, 47, 0xFFFFFFFFFFFFFFFFLL);
  if (v3 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(a2, ".");
    if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v4.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string::resize(&v4, v3, 0);
    *a2 = v4;
  }
}

void sub_213EC20E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const char *getWideNewLine(void)
{
  return "\n";
}

int wcsncasecmp(const __int32 *a1, const __int32 *a2, size_t n)
{
  if (!n) {
    return 0;
  }
  size_t v3 = n;
  while (1)
  {
    __darwin_ct_rune_t v7 = *a1++;
    __darwin_ct_rune_t v6 = v7;
    __int32 v8 = *a2;
    if (!v7 || v8 == 0) {
      break;
    }
    __darwin_ct_rune_t v10 = __tolower(v6);
    __darwin_ct_rune_t v11 = __tolower(*a2);
    if (v10 < v11) {
      return -1;
    }
    if (v10 > v11) {
      return 1;
    }
    ++a2;
    if (!--v3) {
      return 0;
    }
  }
  if (v6 | v8) {
    int v12 = -1;
  }
  else {
    int v12 = 0;
  }
  if (v6) {
    return 1;
  }
  else {
    return v12;
  }
}

void MrecInitModule_searchlm_kernel(void)
{
  if (!gParDebugSearchLM)
  {
    uint64_t v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugSearchLM", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    *uint64_t v1 = &unk_26C4E0858;
    gParDebugSearchLM = (uint64_t)v1;
    BOOL v2 = (uint64_t *)GlobalParamMgr::smpGlobalParamMgr;
    GlobalParamMgr::addParam(v2, (GlobalParam **)&gParDebugSearchLM);
  }
}

uint64_t SearchLMScorer::SearchLMScorer(uint64_t a1, unsigned int a2, char a3, int a4, int a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(_OWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0u;
  *(_OWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0u;
  __darwin_ct_rune_t v11 = (void (***)(void))(a1 + 32);
  *(_OWORD *)a1 = 0u;
  *(_WORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = 1;
  *(unsigned char *)(a1 + 50) = a2 < 4;
  *(unsigned char *)(a1 + 51) = a2 == 0;
  *(_WORD *)(a1 + 52) = 0;
  *(unsigned char *)(a1 + 54) = a3;
  *(unsigned char *)(a1 + 55) = a6;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = a7;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = a8;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = a9;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = a10;
  *(_DWORD *)(a1 + 88) = a2;
  *(_DWORD *)(a1 + 92) = a4;
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = a5;
  *(_OWORD *)(a1 + DgnArray<LinearTransform>::releaseAll((uint64_t)this + 104) = 0u;
  *(_OWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 120) = 0u;
  *(_OWORD *)(a1 + 129) = 0u;
  *(void *)(a1 + DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)this + 152) = 0;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 160) = 0;
  uint64_t v12 = a1 + 152;
  *(void *)(a1 + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 168) = 0xFFFF00000000;
  *(void *)(a1 + 176) = 0;
  *(unsigned char *)(a1 + DgnArray<LinearTransform>::releaseAll((uint64_t)this + 184) = 0;
  *(void *)(a1 + 192) = 0;
  uint64_t v13 = a1 + 192;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 200) = 0;
  unint64_t v14 = *(unsigned int *)(*(void *)VocMgr::smpVocMgr + 8);
  if (v14)
  {
    unint64_t v26 = 0;
    int v15 = realloc_array(0, &v26, v14, 0, 0, 1);
    uint64_t v16 = v26;
    *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v26;
    *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = v14;
    *(_DWORD *)(a1 + 28) = v15;
    bzero(v16, v14);
  }
  else
  {
    *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = 0;
  }
  uint64_t v17 = *(unsigned int *)(*(void *)VocMgr::smpVocMgr + 8);
  unsigned int v18 = *(_DWORD *)(a1 + 44);
  if (v17 > v18) {
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)v11, v17 - v18, 0);
  }
  uint64_t v19 = *(unsigned int *)(a1 + 40);
  if (v19 <= v17)
  {
    if (v19 < v17)
    {
      do
        (*v11)[v19++] = 0;
      while (v17 != v19);
    }
  }
  else
  {
    DgnIOwnArray<LMContextData *>::destructAt(v11, v17, v19 - v17);
  }
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = v17;
  if ((int)v17 >= 1)
  {
    uint64_t v20 = (void **)VocMgr::smpVocMgr;
    unint64_t v21 = v17 + 1;
    do
    {
      uint64_t v22 = *(void *)(**v20 + 8 * (unsigned __int16)(v21 - 2));
      if (v22)
      {
        (*v11)[(v21 - 2)] = (void (*)(void))(*(uint64_t (**)(void))(**(void **)(v22 + 72) + 464))(*(void *)(v22 + 72));
        uint64_t v20 = (void **)VocMgr::smpVocMgr;
      }
      --v21;
    }
    while (v21 > 1);
  }
  unsigned int v23 = *(_DWORD *)(a1 + 164);
  if (v23 <= 7) {
    DgnPrimArray<unsigned int>::reallocElts(v12, 8 - v23, 0);
  }
  unsigned int v24 = *(_DWORD *)(a1 + 204);
  if (v24 <= 7) {
    DgnPrimArray<unsigned int>::reallocElts(v13, 8 - v24, 0);
  }
  return a1;
}

{
  return SearchLMScorer::SearchLMScorer(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void sub_213EC2498(_Unwind_Exception *a1)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray(v6);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v5);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v4);
  DgnIOwnArray<LMContextData *>::releaseAll(v3);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1);
  _Unwind_Resume(a1);
}

void SearchLMScorer::~SearchLMScorer(SearchLMScorer *this)
{
  uint64_t v2 = (void *)*((void *)this + 17);
  if (v2) {
    MemChunkFree(v2, 0);
  }
  *((void *)this + 17) = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 192);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 152);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 104);
  DgnIOwnArray<LMContextData *>::releaseAll((uint64_t)this + 32);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16);

  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this);
}

void SearchLMScorer::printSize(SearchLMScorer *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 126, (DgnString *)&v229);
  if (v230) {
    uint64_t v16 = v229;
  }
  else {
    uint64_t v16 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_2140B33BB, a3, &byte_2140B33BB, v16);
  DgnString::~DgnString((DgnString *)&v229);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_2140B33BB);
  uint64_t v21 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v21 = 16;
  }
  uint64_t v22 = *((unsigned int *)this + 2);
  unsigned int v23 = *((_DWORD *)this + 3);
  uint64_t v24 = (v21 | 2) + 2 * (v22 - 1);
  if ((int)v22 <= 0) {
    uint64_t v24 = v21;
  }
  if (v23 >= v22) {
    uint64_t v25 = v24;
  }
  else {
    uint64_t v25 = v21;
  }
  if (v23 >= v22) {
    uint64_t v26 = v24 + 2 * (v23 - v22);
  }
  else {
    uint64_t v26 = v21;
  }
  if (v23 >= v22) {
    uint64_t v27 = 0;
  }
  else {
    uint64_t v27 = 2 * v22;
  }
  uint64_t v28 = (a3 + 1);
  uint64_t v228 = a3;
  uint64_t v29 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 128, (DgnString *)&v229);
  if (v230) {
    uint64_t v34 = v229;
  }
  else {
    uint64_t v34 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v30, v31, v32, v33, v28, &byte_2140B33BB, v29, v29, v34, v26, v25, v27);
  DgnString::~DgnString((DgnString *)&v229);
  *a4 += v26;
  *a5 += v25;
  *a6 += v27;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v35 = 12;
  }
  else {
    uint64_t v35 = 16;
  }
  int v36 = *((_DWORD *)this + 6);
  unsigned int v37 = *((_DWORD *)this + 7);
  BOOL v38 = v37 >= v36;
  uint64_t v39 = v37 - v36;
  if (v38)
  {
    uint64_t v41 = v36 & ~(v36 >> 31);
    int v36 = 0;
    uint64_t v40 = v35 + v41;
    v35 += v41 + v39;
  }
  else
  {
    uint64_t v40 = v35;
  }
  uint64_t v42 = v36;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 130, (DgnString *)&v229);
  if (v230) {
    uint64_t v47 = v229;
  }
  else {
    uint64_t v47 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v43, v44, v45, v46, v28, &byte_2140B33BB, v29, v29, v47, v35, v40, v42);
  DgnString::~DgnString((DgnString *)&v229);
  *a4 += v35;
  *a5 += v40;
  *a6 += v42;
  uint64_t v48 = sizeObject<LMContextData *>((uint64_t)this + 32, 0);
  uint64_t v49 = sizeObject<LMContextData *>((uint64_t)this + 32, 1);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 132, (DgnString *)&v229);
  if (v230) {
    uint64_t v54 = v229;
  }
  else {
    uint64_t v54 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v50, v51, v52, v53, v28, &byte_2140B33BB, v29, v29, v54, v48, v49, 0);
  DgnString::~DgnString((DgnString *)&v229);
  *a4 += v48;
  *a5 += v49;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 134, (DgnString *)&v229);
  if (v230) {
    uint64_t v59 = v229;
  }
  else {
    uint64_t v59 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v55, v56, v57, v58, v28, &byte_2140B33BB, v29, v29, v59, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v229);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 136, (DgnString *)&v229);
  if (v230) {
    uint64_t v64 = v229;
  }
  else {
    uint64_t v64 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v60, v61, v62, v63, v28, &byte_2140B33BB, v29, v29, v64, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v229);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 137, (DgnString *)&v229);
  if (v230) {
    uint64_t v69 = v229;
  }
  else {
    uint64_t v69 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v65, v66, v67, v68, v28, &byte_2140B33BB, v29, v29, v69, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v229);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 139, (DgnString *)&v229);
  if (v230) {
    uint64_t v74 = v229;
  }
  else {
    uint64_t v74 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v70, v71, v72, v73, v28, &byte_2140B33BB, v29, v29, v74, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v229);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 141, (DgnString *)&v229);
  if (v230) {
    uint64_t v79 = v229;
  }
  else {
    uint64_t v79 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v75, v76, v77, v78, v28, &byte_2140B33BB, v29, v29, v79, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v229);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 143, (DgnString *)&v229);
  if (v230) {
    unint64_t v84 = v229;
  }
  else {
    unint64_t v84 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v80, v81, v82, v83, v28, &byte_2140B33BB, v29, v29, v84, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v229);
  ++*a4;
  ++*a5;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v85 = 4;
  }
  else {
    uint64_t v85 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 145, (DgnString *)&v229);
  if (v230) {
    uint64_t v90 = v229;
  }
  else {
    uint64_t v90 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v86, v87, v88, v89, v28, &byte_2140B33BB, v29, v29, v90, v85, v85, 0);
  DgnString::~DgnString((DgnString *)&v229);
  *a4 += v85;
  *a5 += v85;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v91 = 4;
  }
  else {
    uint64_t v91 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 147, (DgnString *)&v229);
  if (v230) {
    uint64_t v96 = v229;
  }
  else {
    uint64_t v96 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v92, v93, v94, v95, v28, &byte_2140B33BB, v29, v29, v96, v91, v91, 0);
  DgnString::~DgnString((DgnString *)&v229);
  *a4 += v91;
  *a5 += v91;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v97 = 4;
  }
  else {
    uint64_t v97 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 149, (DgnString *)&v229);
  if (v230) {
    uint64_t v102 = v229;
  }
  else {
    uint64_t v102 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v98, v99, v100, v101, v28, &byte_2140B33BB, v29, v29, v102, v97, v97, 0);
  DgnString::~DgnString((DgnString *)&v229);
  *a4 += v97;
  *a5 += v97;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v103 = 4;
  }
  else {
    uint64_t v103 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 151, (DgnString *)&v229);
  if (v230) {
    uint64_t v108 = v229;
  }
  else {
    uint64_t v108 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v104, v105, v106, v107, v28, &byte_2140B33BB, v29, v29, v108, v103, v103, 0);
  DgnString::~DgnString((DgnString *)&v229);
  *a4 += v103;
  *a5 += v103;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 152, (DgnString *)&v229);
  if (v230) {
    uint64_t v113 = v229;
  }
  else {
    uint64_t v113 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v109, v110, v111, v112, v28, &byte_2140B33BB, v29, v29, v113, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v229);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 154, (DgnString *)&v229);
  if (v230) {
    uint64_t v118 = v229;
  }
  else {
    uint64_t v118 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v114, v115, v116, v117, v28, &byte_2140B33BB, v29, v29, v118, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v229);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 156, (DgnString *)&v229);
  if (v230) {
    uint64_t v123 = v229;
  }
  else {
    uint64_t v123 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v119, v120, v121, v122, v28, &byte_2140B33BB, v29, v29, v123, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v229);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 158, (DgnString *)&v229);
  if (v230) {
    uint64_t v128 = v229;
  }
  else {
    uint64_t v128 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v124, v125, v126, v127, v28, &byte_2140B33BB, v29, v29, v128, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v229);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 160, (DgnString *)&v229);
  if (v230) {
    uint64_t v133 = v229;
  }
  else {
    uint64_t v133 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v129, v130, v131, v132, v28, &byte_2140B33BB, v29, v29, v133, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v229);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v134 = 12;
  }
  else {
    uint64_t v134 = 16;
  }
  uint64_t v135 = *((unsigned int *)this + 28);
  unsigned int v136 = *((_DWORD *)this + 29);
  if (v136 >= v135)
  {
    uint64_t v137 = 0;
    if ((int)v135 > 0) {
      v134 += 4 * (v135 - 1) + 4;
    }
    uint64_t v138 = v134 + 4 * (v136 - v135);
  }
  else
  {
    uint64_t v137 = 4 * v135;
    uint64_t v138 = v134;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 162, (DgnString *)&v229);
  if (v230) {
    uint64_t v143 = v229;
  }
  else {
    uint64_t v143 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v139, v140, v141, v142, v28, &byte_2140B33BB, v29, v29, v143, v138, v134, v137);
  DgnString::~DgnString((DgnString *)&v229);
  *a4 += v138;
  *a5 += v134;
  *a6 += v137;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v144 = 4;
  }
  else {
    uint64_t v144 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 163, (DgnString *)&v229);
  if (v230) {
    uint64_t v149 = v229;
  }
  else {
    uint64_t v149 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v145, v146, v147, v148, v28, &byte_2140B33BB, v29, v29, v149, v144, v144, 0);
  DgnString::~DgnString((DgnString *)&v229);
  *a4 += v144;
  *a5 += v144;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v150 = 4;
  }
  else {
    uint64_t v150 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 164, (DgnString *)&v229);
  if (v230) {
    uint64_t v155 = v229;
  }
  else {
    uint64_t v155 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v151, v152, v153, v154, v28, &byte_2140B33BB, v29, v29, v155, v150, v150, 0);
  DgnString::~DgnString((DgnString *)&v229);
  *a4 += v150;
  *a5 += v150;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v156 = 4;
  }
  else {
    uint64_t v156 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 165, (DgnString *)&v229);
  if (v230) {
    uint64_t v161 = v229;
  }
  else {
    uint64_t v161 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v157, v158, v159, v160, v28, &byte_2140B33BB, v29, v29, v161, v156, v156, 0);
  DgnString::~DgnString((DgnString *)&v229);
  *a4 += v156;
  *a5 += v156;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 166, (DgnString *)&v229);
  if (v230) {
    uint64_t v166 = v229;
  }
  else {
    uint64_t v166 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v162, v163, v164, v165, v28, &byte_2140B33BB, v29, v29, v166, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v229);
  ++*a4;
  ++*a5;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v167 = 12;
  }
  else {
    uint64_t v167 = 16;
  }
  uint64_t v168 = *((unsigned int *)this + 40);
  unsigned int v169 = *((_DWORD *)this + 41);
  if (v169 >= v168)
  {
    uint64_t v170 = 0;
    if ((int)v168 > 0) {
      v167 += 4 * (v168 - 1) + 4;
    }
    uint64_t v171 = v167 + 4 * (v169 - v168);
  }
  else
  {
    uint64_t v170 = 4 * v168;
    uint64_t v171 = v167;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 168, (DgnString *)&v229);
  if (v230) {
    uint64_t v176 = v229;
  }
  else {
    uint64_t v176 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v172, v173, v174, v175, v28, &byte_2140B33BB, v29, v29, v176, v171, v167, v170);
  DgnString::~DgnString((DgnString *)&v229);
  *a4 += v171;
  *a5 += v167;
  *a6 += v170;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 170, (DgnString *)&v229);
  if (v230) {
    uint64_t v181 = v229;
  }
  else {
    uint64_t v181 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v177, v178, v179, v180, v28, &byte_2140B33BB, v29, v29, v181, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v229);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 172, (DgnString *)&v229);
  if (v230) {
    unsigned int v186 = v229;
  }
  else {
    unsigned int v186 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v182, v183, v184, v185, v28, &byte_2140B33BB, v29, v29, v186, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v229);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 174, (DgnString *)&v229);
  if (v230) {
    uint64_t v191 = v229;
  }
  else {
    uint64_t v191 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v187, v188, v189, v190, v28, &byte_2140B33BB, v29, v29, v191, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v229);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 176, (DgnString *)&v229);
  if (v230) {
    uint64_t v196 = v229;
  }
  else {
    uint64_t v196 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v192, v193, v194, v195, v28, &byte_2140B33BB, v29, v29, v196, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v229);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 178, (DgnString *)&v229);
  if (v230) {
    long long v201 = v229;
  }
  else {
    long long v201 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v197, v198, v199, v200, v28, &byte_2140B33BB, v29, v29, v201, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v229);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v202 = 4;
  }
  else {
    uint64_t v202 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 179, (DgnString *)&v229);
  if (v230) {
    uint64_t v207 = v229;
  }
  else {
    uint64_t v207 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v203, v204, v205, v206, v28, &byte_2140B33BB, v29, v29, v207, v202, v202, 0);
  DgnString::~DgnString((DgnString *)&v229);
  *a4 += v202;
  *a5 += v202;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 181, (DgnString *)&v229);
  if (v230) {
    uint64_t v212 = v229;
  }
  else {
    uint64_t v212 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v208, v209, v210, v211, v28, &byte_2140B33BB, v29, v29, v212, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v229);
  ++*a4;
  ++*a5;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v213 = 12;
  }
  else {
    uint64_t v213 = 16;
  }
  uint64_t v214 = *((unsigned int *)this + 50);
  unsigned int v215 = *((_DWORD *)this + 51);
  if (v215 >= v214)
  {
    uint64_t v216 = 0;
    if ((int)v214 > 0) {
      v213 += 4 * (v214 - 1) + 4;
    }
    uint64_t v217 = v213 + 4 * (v215 - v214);
  }
  else
  {
    uint64_t v216 = 4 * v214;
    uint64_t v217 = v213;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 183, (DgnString *)&v229);
  if (v230) {
    long long v222 = v229;
  }
  else {
    long long v222 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v218, v219, v220, v221, v28, &byte_2140B33BB, v29, v29, v222, v217, v213, v216);
  DgnString::~DgnString((DgnString *)&v229);
  *a4 += v217;
  *a5 += v213;
  *a6 += v216;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/searchlm.cpp", 184, (DgnString *)&v229);
  if (v230) {
    uint64_t v227 = v229;
  }
  else {
    uint64_t v227 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v223, v224, v225, v226, v228, &byte_2140B33BB, (35 - v228), (35 - v228), v227, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v229);
}

void sub_213EC3594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<LMContextData *>(uint64_t a1, uint64_t a2)
{
  if (a2 == 3) {
    return 0;
  }
  int v4 = gShadowDiagnosticShowIdealizedObjectSizes;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v2 = 12;
  }
  else {
    uint64_t v2 = 16;
  }
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    uint64_t v6 = *(unsigned int *)(a1 + 8);
    if ((int)v6 >= 1)
    {
      unint64_t v7 = v6 + 1;
      int v8 = gShadowDiagnosticShowIdealizedObjectSizes;
      do
      {
        if (v8) {
          uint64_t v9 = 4;
        }
        else {
          uint64_t v9 = 8;
        }
        if (a2 != 2)
        {
          uint64_t v10 = *(void *)(*(void *)a1 + 8 * (v7 - 2));
          if (v10)
          {
            v9 += (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, a2);
            int v8 = gShadowDiagnosticShowIdealizedObjectSizes;
          }
        }
        v2 += v9;
        --v7;
      }
      while (v7 > 1);
    }
    if (!a2)
    {
      char v11 = 2;
      if (!v4) {
        char v11 = 3;
      }
      v2 += (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8)) << v11;
    }
  }
  return v2;
}

void SearchLMScorer::endSearchLMScorerSyncRecog(SearchLMScorer *this)
{
  if (*((_DWORD *)this + 22) != 6)
  {
    if (*((_DWORD *)this + 2))
    {
      unint64_t v2 = 0;
      uint64_t v3 = (void **)VocMgr::smpVocMgr;
      do
      {
        uint64_t v4 = *(unsigned __int16 *)(*(void *)this + 2 * v2);
        uint64_t v5 = *(void *)(*(void *)(**v3 + 8 * v4) + 72);
        (*(void (**)(uint64_t, void, void))(*(void *)v5 + 424))(v5, *((unsigned __int8 *)this + 48), *(void *)(*((void *)this + 4) + 8 * v4));
        ++v2;
      }
      while (v2 < *((unsigned int *)this + 2));
    }
    *((_DWORD *)this + 2) = 0;
    size_t v6 = *((unsigned int *)this + 6);
    if (v6) {
      bzero(*((void **)this + 2), v6);
    }
    *((unsigned char *)this + 49) = 0;
  }
}

uint64_t SearchLMScorer::beginSearchLMScorerLMRescoring(uint64_t this, char a2)
{
  uint64_t v3 = this;
  if (*(_DWORD *)(this + 8))
  {
    unint64_t v4 = 0;
    uint64_t v5 = (void **)VocMgr::smpVocMgr;
    do
    {
      uint64_t v6 = *(unsigned __int16 *)(*(void *)v3 + 2 * v4);
      uint64_t v7 = *(void *)(*(void *)(**v5 + 8 * v6) + 72);
      this = (*(uint64_t (**)(uint64_t, void))(*(void *)v7 + 416))(v7, *(void *)(*(void *)(v3 + 32) + 8 * v6));
      ++v4;
    }
    while (v4 < *(unsigned int *)(v3 + 8));
  }
  *(unsigned char *)(v3 + 52) = a2;
  *(unsigned char *)(v3 + 53) = 1;
  return this;
}

uint64_t SearchLMScorer::endSearchLMScorerLMRescoring(uint64_t this)
{
  *(_WORD *)(this + 52) = 0;
  return this;
}

_DWORD *SearchLMScorer::setInitialContext(_DWORD *result, uint64_t *a2)
{
  if (result[22] != 6)
  {
    uint64_t v3 = result;
    unsigned int v4 = *((_DWORD *)a2 + 2);
    if (v4 >= 3) {
      uint64_t v5 = 3;
    }
    else {
      uint64_t v5 = v4;
    }
    uint64_t v6 = (_DWORD **)(result + 26);
    unsigned int v7 = result[29];
    if (v5 <= v7)
    {
      result[28] = v5;
      if (!v5) {
        return result;
      }
    }
    else
    {
      uint64_t result = (_DWORD *)DgnPrimArray<unsigned int>::reallocElts((uint64_t)(result + 26), v5 - v7, 0);
      v3[28] = v5;
    }
    uint64_t v8 = *a2;
    uint64_t v9 = *v6;
    int v10 = -1;
    do
    {
      *v9++ = *(_DWORD *)(v8 + 4 * (v10 + *((_DWORD *)a2 + 2)));
      --v10;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t SearchLMScorer::lmScoreFinalSilenceWithoutActualLM(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  SearchLMScorer::setContext(a1, a2, a3, 0, 0, 0, 0, 0, 0xFAFFFFFC, 0xFAFFFFFC);
  uint64_t result = 0;
  if (*(_DWORD *)(a1 + 88) != 6)
  {
    if (*(_DWORD *)(a1 + 160) && ((**(_DWORD **)(a1 + 152) >> 25) - 125) >= 2 && !*(unsigned char *)(a1 + 168)) {
      return 0;
    }
    else {
      return *(unsigned int *)(a1 + 96);
    }
  }
  return result;
}

void SearchLMScorer::setContext(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, int a5, uint64_t a6, LMStats *a7, char a8, unsigned int a9, unsigned int a10)
{
  uint64_t v17 = *(void *)(a1 + 120);
  if (v17) {
    *(void *)(a1 + DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)this + 128) = *(void *)(v17 + 2216);
  }
  if (*(_DWORD *)(a1 + 88) == 6) {
    goto LABEL_74;
  }
  *(unsigned char *)(a1 + DgnArray<LinearTransform>::releaseAll((uint64_t)this + 184) = a8;
  uint64_t v18 = *(void *)(a1 + 128);
  int v19 = *(_DWORD *)(v18 + 68);
  if ((v19 & 0xFFFFFFFD) != 0)
  {
    BOOL isLMAllowedForState = 1;
  }
  else
  {
    BOOL isLMAllowedForState = Constraint::isLMAllowedForState(v18, a3);
    uint64_t v18 = *(void *)(a1 + 128);
    int v19 = *(_DWORD *)(v18 + 68);
  }
  *(unsigned char *)(a1 + 169) = isLMAllowedForState;
  if ((v19 & 0xFFFFFFFD) != 0)
  {
    BOOL isLeftWBAllowedForState = 1;
  }
  else
  {
    BOOL isLeftWBAllowedForState = Constraint::isLeftWBAllowedForState(v18, a3);
    uint64_t v18 = *(void *)(a1 + 128);
    int v19 = *(_DWORD *)(v18 + 68);
  }
  *(unsigned char *)(a1 + 170) = isLeftWBAllowedForState;
  if ((v19 & 0xFFFFFFFD) != 0)
  {
    BOOL isRightWBAllowedForState = 1;
  }
  else
  {
    BOOL isRightWBAllowedForState = Constraint::isRightWBAllowedForState(v18, a3);
    uint64_t v18 = *(void *)(a1 + 128);
    int v19 = *(_DWORD *)(v18 + 68);
  }
  *(unsigned char *)(a1 + 171) = isRightWBAllowedForState;
  if ((v19 & 0xFFFFFFFD) != 0) {
    int WeightsForState = 0xFFFF;
  }
  else {
    int WeightsForState = Constraint::getWeightsForState(v18, a3);
  }
  *(_DWORD *)(a1 + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = WeightsForState;
  uint64_t v24 = *a3;
  *(unsigned char *)(a1 + DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 168) = v24 == -50331650;
  uint64_t v25 = (VocMgr *)VocMgr::smpVocMgr;
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 160) = 0;
  if (*(unsigned char *)(a1 + 184))
  {
    int Root = VocMgr::getRoot(v25, a9);
    unsigned int v27 = *(_DWORD *)(a1 + 160);
    if (v27 == *(_DWORD *)(a1 + 164))
    {
      DgnPrimArray<unsigned int>::reallocElts(a1 + 152, 1, 1);
      unsigned int v27 = *(_DWORD *)(a1 + 160);
    }
    uint64_t v28 = *(void *)(a1 + 152);
    *(_DWORD *)(v28 + 4 * v27) = Root;
    int v29 = *(_DWORD *)(a1 + 160) + 1;
    *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 160) = v29;
    if (!*(unsigned char *)(a1 + 50)) {
      goto LABEL_43;
    }
    int v30 = VocMgr::getRoot(v25, v24);
    unsigned int v31 = *(_DWORD *)(a1 + 160);
    if (v31 == *(_DWORD *)(a1 + 164))
    {
      DgnPrimArray<unsigned int>::reallocElts(a1 + 152, 1, 1);
      unsigned int v31 = *(_DWORD *)(a1 + 160);
    }
    uint64_t v28 = *(void *)(a1 + 152);
    *(_DWORD *)(v28 + 4 * v31) = v30;
    int v29 = *(_DWORD *)(a1 + 160) + 1;
    *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 160) = v29;
    if (!*(unsigned char *)(a1 + 52)) {
      goto LABEL_43;
    }
    unsigned int v32 = a3[5];
    if (v32 == -83886084) {
      uint64_t v33 = a3[4];
    }
    else {
      uint64_t v33 = v32;
    }
    goto LABEL_39;
  }
  int v34 = VocMgr::getRoot(v25, v24);
  unsigned int v35 = *(_DWORD *)(a1 + 160);
  if (v35 == *(_DWORD *)(a1 + 164))
  {
    DgnPrimArray<unsigned int>::reallocElts(a1 + 152, 1, 1);
    unsigned int v35 = *(_DWORD *)(a1 + 160);
  }
  uint64_t v28 = *(void *)(a1 + 152);
  *(_DWORD *)(v28 + 4 * v35) = v34;
  int v29 = *(_DWORD *)(a1 + 160) + 1;
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 160) = v29;
  if (!*(unsigned char *)(a1 + 50)) {
    goto LABEL_43;
  }
  uint64_t v36 = a3[5];
  if (v36 != -83886084)
  {
    int v40 = VocMgr::getRoot(v25, v36);
    unsigned int v41 = *(_DWORD *)(a1 + 160);
    if (v41 == *(_DWORD *)(a1 + 164))
    {
      DgnPrimArray<unsigned int>::reallocElts(a1 + 152, 1, 1);
      unsigned int v41 = *(_DWORD *)(a1 + 160);
    }
    uint64_t v28 = *(void *)(a1 + 152);
    *(_DWORD *)(v28 + 4 * v41) = v40;
    int v29 = *(_DWORD *)(a1 + 160) + 1;
    *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 160) = v29;
    if (!*(unsigned char *)(a1 + 52)) {
      goto LABEL_43;
    }
    uint64_t v33 = a3[4];
LABEL_39:
    uint64_t v39 = v25;
    goto LABEL_40;
  }
  int v37 = VocMgr::getRoot(v25, a3[4]);
  unsigned int v38 = *(_DWORD *)(a1 + 160);
  if (v38 == *(_DWORD *)(a1 + 164))
  {
    DgnPrimArray<unsigned int>::reallocElts(a1 + 152, 1, 1);
    unsigned int v38 = *(_DWORD *)(a1 + 160);
  }
  uint64_t v28 = *(void *)(a1 + 152);
  *(_DWORD *)(v28 + 4 * v38) = v37;
  int v29 = *(_DWORD *)(a1 + 160) + 1;
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 160) = v29;
  if (!*(unsigned char *)(a1 + 52)) {
    goto LABEL_43;
  }
  uint64_t v33 = a10;
  if (a10 != -83886084) {
    goto LABEL_39;
  }
  uint64_t v39 = v25;
  uint64_t v33 = a2;
LABEL_40:
  int v42 = VocMgr::getRoot(v39, v33);
  unsigned int v43 = *(_DWORD *)(a1 + 160);
  if (v43 == *(_DWORD *)(a1 + 164))
  {
    DgnPrimArray<unsigned int>::reallocElts(a1 + 152, 1, 1);
    unsigned int v43 = *(_DWORD *)(a1 + 160);
  }
  uint64_t v28 = *(void *)(a1 + 152);
  *(_DWORD *)(v28 + 4 * v43) = v42;
  int v29 = *(_DWORD *)(a1 + 160) + 1;
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 160) = v29;
LABEL_43:
  if (v29)
  {
    uint64_t v44 = 0;
    while (1)
    {
      int v45 = *(_DWORD *)(v28 + 4 * v44);
      if (v45 == -50331650) {
        break;
      }
      if (v45 == -83886084) {
        goto LABEL_58;
      }
      if (v29 == ++v44)
      {
        LODWORD(v44) = v29;
        goto LABEL_58;
      }
    }
    *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 160) = v44;
    int v46 = *(_DWORD *)(a1 + 112);
    unsigned int v47 = *(_DWORD *)(a1 + 164);
    if (v46 + (int)v44 > v47)
    {
      DgnPrimArray<unsigned int>::reallocElts(a1 + 152, v46 - v47 + v44, 1);
      int v46 = *(_DWORD *)(a1 + 112);
    }
    if (v46)
    {
      unint64_t v48 = 0;
      uint64_t v49 = *(void *)(a1 + 104);
      uint64_t v50 = *(void *)(a1 + 152);
      do
      {
        *(_DWORD *)(v50 + 4 * (v48 + *(_DWORD *)(a1 + 160))) = *(_DWORD *)(v49 + 4 * v48);
        ++v48;
        unint64_t v51 = *(unsigned int *)(a1 + 112);
      }
      while (v48 < v51);
    }
    else
    {
      LODWORD(v51) = 0;
    }
    LODWORD(v44) = *(_DWORD *)(a1 + 160) + v51;
  }
  else
  {
    LODWORD(v44) = 0;
  }
LABEL_58:
  if (*(unsigned char *)(a1 + 52))
  {
    if (v44 >= 3) {
      int v52 = 3;
    }
    else {
      int v52 = v44;
    }
  }
  else
  {
    BOOL v53 = v44 != 0;
    if (v44 >= 2) {
      LODWORD(v44) = 2;
    }
    if (*(unsigned char *)(a1 + 50)) {
      int v52 = v44;
    }
    else {
      int v52 = v53;
    }
  }
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 160) = v52;
  if (a5)
  {
    *(void *)(a1 + 176) = a6;
    if (*(_DWORD *)(a1 + 8))
    {
      unint64_t v54 = 0;
      do
        SearchLMScorer::setContext((SearchLMScorer *)a1, *(unsigned __int16 *)(*(void *)a1 + 2 * v54++), 0, a7);
      while (v54 < *(unsigned int *)(a1 + 8));
    }
  }
  if (a4 && *(unsigned char *)(a1 + 50)) {
    SearchLMScorer::setLMStates((SearchLMScorer *)a1, a4);
  }
LABEL_74:
  if (a5) {
    *(unsigned char *)(a1 + DgnArray<LinearTransform>::releaseAll((uint64_t)this + 144) = 1;
  }
}

uint64_t SearchLMScorer::lmScoreFinalSilence(SearchLMScorer *this, LMStats *a2)
{
  if (*((_DWORD *)this + 22) == 6) {
    return 0;
  }
  if (!*((_DWORD *)this + 40)) {
    return *((unsigned int *)this + 24);
  }
  unint64_t v4 = (unint64_t)**((unsigned int **)this + 19) >> 25;
  if ((v4 - 125) < 2 || *((unsigned char *)this + 168)) {
    return *((unsigned int *)this + 24);
  }
  if (!*((unsigned char *)this + 169)) {
    return 0;
  }
  if (!*(unsigned char *)(*((void *)this + 2) + v4)) {
    SearchLMScorer::activateVoc(this, **((_DWORD **)this + 19) >> 25, 0, a2);
  }
  uint64_t v6 = *(void *)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * v4) + 72);
  char v8 = 0;
  if (*((unsigned char *)this + 53)) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = *((unsigned char *)this + 54) == 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, void, LMStats *, void, BOOL, char *))(*(void *)v6 + 512))(v6, 16777213, *((unsigned int *)this + 43), a2, *(void *)(*((void *)this + 4) + 8 * v4), v7, &v8);
}

uint64_t SearchLMScorer::activateVoc(SearchLMScorer *this, unsigned int a2, unsigned int *a3, LMStats *a4)
{
  uint64_t v8 = a2;
  uint64_t v9 = *(void *)(**(void **)VocMgr::smpVocMgr + 8 * a2);
  uint64_t result = (*(uint64_t (**)(void, void, void))(**(void **)(v9 + 72) + 408))(*(void *)(v9 + 72), *((unsigned __int8 *)this + 48), *(void *)(*((void *)this + 4) + 8 * a2));
  if (*((unsigned char *)this + 144)) {
    uint64_t result = SearchLMScorer::setContext(this, a2, a3, a4);
  }
  unsigned int v11 = *((_DWORD *)this + 2);
  if (v11 == *((_DWORD *)this + 3))
  {
    uint64_t result = DgnPrimArray<short>::reallocElts((uint64_t)this, 1, 1);
    unsigned int v11 = *((_DWORD *)this + 2);
  }
  *(_WORD *)(*(void *)this + 2 * v11) = a2;
  *((_DWORD *)this + 2) = v11 + 1;
  *(unsigned char *)(*((void *)this + 2) + v8) = 1;
  if (!*((unsigned char *)this + 49))
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(v9 + 72) + 696))(*(void *)(v9 + 72));
    *((unsigned char *)this + 49) = result;
  }
  return result;
}

uint64_t SearchLMScorer::lmScoreNonAcousticWord(SearchLMScorer *this, unsigned int a2, uint64_t a3, LMStats *a4)
{
  if (*((_DWORD *)this + 22) == 6) {
    return 0;
  }
  unint64_t v9 = (unint64_t)a2 >> 25;
  if (!*(unsigned char *)(*((void *)this + 2) + v9)) {
    SearchLMScorer::activateVoc(this, a2 >> 25, 0, a4);
  }
  uint64_t v10 = *(void *)(**(void **)VocMgr::smpVocMgr + 8 * v9);
  char v12 = 0;
  if (*((unsigned char *)this + 53)) {
    BOOL v11 = 1;
  }
  else {
    BOOL v11 = *((unsigned char *)this + 54) == 0;
  }
  return (*(uint64_t (**)(void, void, uint64_t, LMStats *, void, BOOL, char *))(**(void **)(v10 + 72)
                                                                                               + 512))(*(void *)(v10 + 72), a2 & 0xFFFFFF, a3, a4, *(void *)(*((void *)this + 4) + 8 * v9), v11, &v12);
}

uint64_t SearchLMScorer::lmScoreNonSilCwidac(uint64_t a1, unsigned int *a2, LMStats *a3)
{
  if (*(_DWORD *)(a1 + 88) == 6) {
    return 0;
  }
  unint64_t v7 = *a2;
  unsigned int v35 = a2[2];
  if (*(_DWORD *)(a1 + 160))
  {
    unint64_t v8 = **(unsigned int **)(a1 + 152);
    uint64_t v9 = v8 >> 25;
    unsigned int v10 = v8 & 0xFFFFFF;
  }
  else
  {
    unsigned int v10 = 0xFFFFFF;
    uint64_t v9 = 125;
  }
  uint64_t v11 = *(void *)(a1 + 80);
  int v12 = !v11 || v10 >= *(_DWORD *)(v11 + 8) || ((*(_DWORD *)(*(void *)v11 + 4 * (v10 >> 5)) >> v10) & 1) == 0;
  uint64_t v13 = *(void *)(a1 + 72);
  if (v13 && *HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket(v13, (int *)&v35))
  {
    uint64_t v14 = *(void *)(a1 + 128);
    if ((*(_DWORD *)(v14 + 68) & 0xFFFFFFFD) == 0) {
      v12 &= Constraint::isLeftWBAllowedForState(v14, a2);
    }
  }
  else
  {
    int v12 = 0;
  }
  uint64_t v15 = *(void *)(a1 + 56);
  if (v15)
  {
    if (*HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket(v15, (int *)&v35))
    {
LABEL_17:
      LODWORD(v15) = 0;
      goto LABEL_18;
    }
    uint64_t v15 = *(void *)(a1 + 64);
    if (v15)
    {
      if (*HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket(v15, (int *)&v35)) {
        goto LABEL_17;
      }
      uint64_t v19 = *(void *)(a1 + 128);
      if ((*(_DWORD *)(v19 + 68) & 0xFFFFFFFD) != 0) {
        goto LABEL_19;
      }
      LODWORD(v15) = Constraint::isLeftWBAllowedForState(v19, a2);
    }
  }
LABEL_18:
  if ((v12 | v15) == 1)
  {
LABEL_19:
    uint64_t v16 = *(void *)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * v9) + 72);
    char v34 = 0;
    if (*(unsigned char *)(a1 + 53)) {
      BOOL v17 = 1;
    }
    else {
      BOOL v17 = *(unsigned char *)(a1 + 54) == 0;
    }
    int v18 = (*(uint64_t (**)(uint64_t, uint64_t, void, LMStats *, void, BOOL, char *))(*(void *)v16 + 512))(v16, 16777213, *(unsigned int *)(a1 + 172), a3, *(void *)(*(void *)(a1 + 32) + 8 * v9), v17, &v34);
    goto LABEL_28;
  }
  int v18 = 0;
LABEL_28:
  uint64_t v20 = *(void *)(a1 + 128);
  if ((*(_DWORD *)(v20 + 68) & 0xFFFFFFFD) != 0 || Constraint::isLMAllowedForState(v20, a2))
  {
    unint64_t v21 = v7 >> 25;
    uint64_t v22 = *(void *)(a1 + 56);
    if (*(unsigned char *)(*(void *)(a1 + 16) + (v7 >> 25)))
    {
      if (v22 && !*HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket(v22, (int *)&v35))
      {
        uint64_t v23 = *(void *)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * v21) + 72);
        (*(void (**)(uint64_t, void))(*(void *)v23 + 480))(v23, *(void *)(*(void *)(a1 + 32) + 8 * v21));
        SearchLMScorer::setContext((SearchLMScorer *)a1, v7 >> 25, &v35, a3);
      }
    }
    else
    {
      if (v22 && !*HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket(v22, (int *)&v35))
      {
        uint64_t v26 = &v35;
        uint64_t v24 = (SearchLMScorer *)a1;
        unint64_t v25 = v7 >> 25;
      }
      else
      {
        uint64_t v24 = (SearchLMScorer *)a1;
        unint64_t v25 = v7 >> 25;
        uint64_t v26 = 0;
      }
      SearchLMScorer::activateVoc(v24, v25, v26, a3);
    }
    uint64_t v28 = v7 & 0xFFFFFF;
    uint64_t v29 = *(void *)(a1 + 128);
    if ((*(_DWORD *)(v29 + 68) & 0xFFFFFFFD) != 0) {
      uint64_t WeightsForState = 0xFFFFLL;
    }
    else {
      uint64_t WeightsForState = Constraint::getWeightsForState(v29, a2);
    }
    uint64_t v31 = *(void *)(**(void **)VocMgr::smpVocMgr + 8 * v21);
    char v33 = 0;
    if (*(unsigned char *)(a1 + 53)) {
      BOOL v32 = 1;
    }
    else {
      BOOL v32 = *(unsigned char *)(a1 + 54) == 0;
    }
    int v27 = (*(uint64_t (**)(void, uint64_t, uint64_t, LMStats *, void, BOOL, char *))(**(void **)(v31 + 72)
                                                                                                 + 512))(*(void *)(v31 + 72), v28, WeightsForState, a3, *(void *)(*(void *)(a1 + 32) + 8 * v21), v32, &v33);
  }
  else
  {
    int v27 = *(_DWORD *)(a1 + 92);
  }
  return (v27 + v18);
}

uint64_t SearchLMScorer::setContext(SearchLMScorer *this, unsigned int a2, unsigned int *a3, LMStats *a4)
{
  SearchLMScorer::makeRestrictedContext(this, a2, a3);
  uint64_t v5 = *(uint64_t (**)(void))(**(void **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * a2) + 72) + 472);

  return v5();
}

void SearchLMScorer::makeRestrictedContext(SearchLMScorer *this, int a2, unsigned int *a3)
{
  int v6 = *((_DWORD *)this + 22);
  if ((v6 - 1) >= 3)
  {
    if (v6)
    {
      if (v6 != 4)
      {
        *((_DWORD *)this + 50) = 0;
        return;
      }
      unsigned int v7 = *((_DWORD *)this + 40) != 0;
    }
    else
    {
      unsigned int v7 = *((_DWORD *)this + 40);
    }
  }
  else if (*((_DWORD *)this + 40) >= 2u)
  {
    unsigned int v7 = 2;
  }
  else
  {
    unsigned int v7 = *((_DWORD *)this + 40);
  }
  unint64_t v8 = (char *)this + 192;
  unsigned int v9 = *((_DWORD *)this + 51);
  if (v7 <= v9)
  {
    *((_DWORD *)this + 50) = v7;
    if (!v7) {
      return;
    }
  }
  else
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 192, v7 - v9, 0);
    *((_DWORD *)this + 50) = v7;
  }
  if (a3 && *HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket(*((void *)this + 8), (int *)a3))
  {
    **(_DWORD **)unint64_t v8 = 16777214;
    LODWORD(v10) = 1;
  }
  else if (*((unsigned char *)this + 169))
  {
    uint64_t v10 = 0;
    while (1)
    {
      unsigned int v11 = *(_DWORD *)(*((void *)this + 19) + 4 * v10);
      if (a3)
      {
        Bucket = HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket(*((void *)this + 7), (int *)a3);
        if (v10 == 1 && !*Bucket && *((unsigned char *)this + 170)) {
          break;
        }
      }
      if (v11 >> 25 != a2 && (v11 >> 25) - 127 < 0xFFFFFFFE) {
        goto LABEL_31;
      }
      *(_DWORD *)(*(void *)v8 + 4 * v10++) = v11 & 0xFFFFFF;
      if (v7 == v10) {
        return;
      }
    }
    *(_DWORD *)(*(void *)v8 + 4) = 16777214;
    LODWORD(v10) = 2;
  }
  else
  {
    LODWORD(v10) = 0;
  }
LABEL_31:
  if (v10 < v7)
  {
    uint64_t v14 = (void *)(*(void *)v8 + 4 * v10);
    memset_pattern16(v14, &unk_21409BA70, 4 * (v7 + ~v10) + 4);
  }
}

void SearchLMScorer::setEmptyLMStates(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *((unsigned int *)a2 + 2);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = *a2;
    int32x2_t v4 = vdup_n_s32(0xFAFFFFFC);
    do
    {
      uint64_t v5 = *(unsigned int *)(v3 + 16 * (v2 - 1) + 8);
      if ((int)v5 >= 1)
      {
        uint64_t v6 = *(void *)(v3 + 16 * (v2 - 1));
        unint64_t v7 = v5 + 1;
        do
          *(int32x2_t *)(v6 + 44 * (v7-- - 2) + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v4;
        while (v7 > 1);
      }
    }
    while (v2-- > 1);
  }
}

void SearchLMScorer::setLMStates(SearchLMScorer *this, uint64_t a2)
{
  if (!*((_DWORD *)this + 40)
    || (v3 = this, int v4 = **((_DWORD **)this + 19) >> 25, v4 == 125)
    || !*((unsigned char *)this + 169)
    || (SearchLMScorer::makeRestrictedContext(this, v4, 0), !*((_DWORD *)v3 + 50))
    || (unsigned int v5 = **((_DWORD **)v3 + 24), v5 == 0xFFFFFF)
    || (uint64_t v28 = (VocMgr *)VocMgr::smpVocMgr, v5 <= 0xFFFFF3)
    && (uint64_t v6 = *(void *)(*(void *)(**(void **)VocMgr::smpVocMgr
                                   + (((unint64_t)**((unsigned int **)v3 + 19) >> 22) & 0x3F8))
                       + 72),
        this = (SearchLMScorer *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 440))(v6),
        (this & 1) == 0)
    && !*((unsigned char *)v3 + 55))
  {
    SearchLMScorer::setEmptyLMStates((uint64_t)this, (uint64_t *)a2);
    return;
  }
  unsigned int Root = -50331650;
  if (**((_DWORD **)v3 + 24) != 16777214) {
    unsigned int Root = VocMgr::getRoot(v28, **((unsigned int **)v3 + 19));
  }
  unsigned int v29 = -83886084;
  if (*((unsigned char *)v3 + 184))
  {
    unsigned int v29 = -50331650;
    if (*(_DWORD *)(*((void *)v3 + 24) + 4) != 16777214) {
      unsigned int v29 = VocMgr::getRoot(v28, *(unsigned int *)(*((void *)v3 + 19) + 4));
    }
  }
  unint64_t v7 = *(unsigned int *)(a2 + 8);
  if (v7)
  {
    unint64_t v8 = 0;
    uint64_t v9 = Root >> 25;
    char v30 = 0;
    uint64_t v10 = 127;
    int32x2_t v11 = vdup_n_s32(0xFAFFFFFC);
    uint64_t v27 = a2;
    do
    {
      uint64_t v12 = *(void *)a2 + 16 * v8;
      if (!*(_DWORD *)(v12 + 8)) {
        goto LABEL_63;
      }
      uint64_t v13 = 0;
      unint64_t v14 = 0;
      uint64_t v15 = *(void *)v12;
      do
      {
        uint64_t v16 = (unsigned int *)(v15 + v13);
        unint64_t v17 = *(unsigned int *)(v15 + v13);
        uint64_t v18 = v17 >> 25;
        uint64_t v19 = *((void *)v3 + 16);
        unsigned int v20 = *(_DWORD *)(v19 + 68) & 0xFFFFFFFD;
        if (*((unsigned char *)v3 + 184))
        {
          if (!v20 && !Constraint::isLMAllowedForState(v19, v16)
            || v17 >> 27 == 31
            || v18 != v9)
          {
            uint64_t v15 = *(void *)v12;
            *(int32x2_t *)(*(void *)v12 + v13 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v11;
            goto LABEL_59;
          }
          if (v9 == v29 >> 25)
          {
LABEL_30:
            int v21 = v29;
            uint64_t v18 = v10;
LABEL_57:
            uint64_t v15 = *(void *)v12;
            uint64_t v25 = *(void *)v12 + v13;
            *(_DWORD *)(v25 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v21;
            int v26 = Root;
            goto LABEL_58;
          }
          if (*(_DWORD *)(*((void *)v3 + 24) + 4) == 16777214)
          {
            if (v9 == v10)
            {
              if (v30)
              {
                char v30 = 1;
                goto LABEL_30;
              }
              char v30 = 0;
              goto LABEL_55;
            }
            uint64_t v24 = *(void *)(*(void *)(**(void **)v28 + 8 * v9) + 72);
            if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v24 + 440))(v24, 16777214) & 1) != 0
              || *((unsigned char *)v3 + 55))
            {
              char v30 = 1;
              int v21 = v29;
              goto LABEL_57;
            }
            char v30 = 0;
          }
          else
          {
LABEL_55:
            uint64_t v18 = v10;
          }
          int v21 = -83886084;
          goto LABEL_57;
        }
        if (!v20 && !Constraint::isLMAllowedForState(v19, v16) || v17 >> 27 == 31) {
          goto LABEL_51;
        }
        if (v18 == v9) {
          goto LABEL_35;
        }
        if (**((_DWORD **)v3 + 24) != 16777214) {
          goto LABEL_51;
        }
        if (v18 == v10)
        {
          if ((v30 & 1) == 0)
          {
            char v30 = 0;
LABEL_51:
            uint64_t v18 = v10;
LABEL_52:
            int v22 = -83886084;
            goto LABEL_53;
          }
          char v30 = 1;
LABEL_35:
          int v22 = Root;
          uint64_t v18 = v10;
          goto LABEL_53;
        }
        uint64_t v23 = *(void *)(*(void *)(**(void **)v28 + 8 * v18) + 72);
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v23 + 440))(v23, 16777214) & 1) == 0
          && !*((unsigned char *)v3 + 55))
        {
          char v30 = 0;
          goto LABEL_52;
        }
        char v30 = 1;
        int v22 = Root;
LABEL_53:
        uint64_t v15 = *(void *)v12;
        uint64_t v25 = *(void *)v12 + v13;
        *(_DWORD *)(v25 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v22;
        int v26 = -83886084;
LABEL_58:
        *(_DWORD *)(v25 + 20) = v26;
        uint64_t v10 = v18;
LABEL_59:
        ++v14;
        v13 += 44;
      }
      while (v14 < *(unsigned int *)(v12 + 8));
      a2 = v27;
      unint64_t v7 = *(unsigned int *)(v27 + 8);
LABEL_63:
      ++v8;
    }
    while (v8 < v7);
  }
}

uint64_t SearchLMScorer::setRecognizer(uint64_t result, uint64_t a2)
{
  *(void *)(result + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 120) = a2;
  return result;
}

uint64_t SearchLMScorer::unsetContext(uint64_t this)
{
  uint64_t v1 = this;
  if (*(_DWORD *)(this + 88) != 6 && *(_DWORD *)(this + 8))
  {
    unint64_t v2 = 0;
    do
      this = (*(uint64_t (**)(void))(**(void **)(*(void *)(**(void **)VocMgr::smpVocMgr
                                                            + 8 * *(unsigned __int16 *)(*(void *)v1 + 2 * v2++))
                                                + 72)
                                  + 480))();
    while (v2 < *(unsigned int *)(v1 + 8));
  }
  *(void *)(v1 + 176) = 0;
  *(unsigned char *)(v1 + DgnArray<LinearTransform>::releaseAll((uint64_t)this + 144) = 0;
  return this;
}

void *DgnIOwnArray<LMContextData *>::releaseAll(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<LMContextData>(*(void (****)(void))(*(void *)a1 + v3));
      *(void *)(*(void *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  uint64_t result = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

void (***DgnIOwnArray<LMContextData *>::destructAt(void (***result)(void), int a2, int a3))(void)
{
  if (a3 + a2 > a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = a2;
    uint64_t v5 = a3 + a2 - 1;
    do
    {
      uint64_t result = DgnDelete<LMContextData>(*(void (****)(void))(*v3 + 8 * v5));
      *(void *)(*v3 + 8 * v5) = 0;
    }
    while (v5-- > v4);
  }
  return result;
}

void (***DgnDelete<LMContextData>(void (***result)(void)))(void)
{
  if (result)
  {
    uint64_t v1 = result;
    (**result)(result);
    return (void (***)(void))MemChunkFree(v1, 0);
  }
  return result;
}

void BitArray::setSize(BitArray *this, unsigned int a2)
{
  unsigned int v4 = *((_DWORD *)this + 3);
  BOOL v5 = a2 >= v4;
  uint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    BitArray::reallocElts(this, v6, 0);
  }
  else
  {
    unsigned int v7 = *((_DWORD *)this + 2);
    if (v7 > a2) {
      BitArray::clearRange(this, a2, v7);
    }
  }
  *((_DWORD *)this + 2) = a2;
}

void BitArray::BitArray(BitArray *this, unsigned int a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  BitArray::setSize(this, a2);
}

int **BitArray::copy(int **result, int **a2, unsigned int a3)
{
  if (result != a2)
  {
    unsigned int v3 = a3 & 0xFFFFFFE0;
    if (a3 >= 0x20)
    {
      uint64_t v4 = a3 >> 5;
      BOOL v5 = *a2;
      uint64_t v6 = *result;
      do
      {
        int v7 = *v5++;
        *v6++ = v7;
        --v4;
      }
      while (v4);
    }
    if (v3 < a3)
    {
      unint64_t v8 = *a2;
      do
      {
        uint64_t v9 = v3 >> 5;
        int v10 = 1 << v3;
        if ((v8[v9] & (1 << v3)) != 0) {
          int v11 = (*result)[v9] | v10;
        }
        else {
          int v11 = (*result)[v9] & ~v10;
        }
        (*result)[v9] = v11;
        ++v3;
      }
      while (a3 != v3);
    }
  }
  return result;
}

void BitArray::BitArray(BitArray *this, const BitArray *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  BitArray::setSize(this, *((_DWORD *)a2 + 2));
  BitArray::copy((int **)this, (int **)a2, *((_DWORD *)this + 2));
}

int **BitArray::operator=(int **this, uint64_t a2)
{
  if (this != (int **)a2)
  {
    uint64_t v4 = (unsigned int *)this;
    if (*((_DWORD *)this + 2) <= *((_DWORD *)this + 3))
    {
      BOOL v5 = *this;
      if (*(void *)v4) {
        MemChunkFree(v5, 0);
      }
    }
    *(void *)uint64_t v4 = 0;
    *((void *)v4 + 1) = 0;
    BitArray::setSize((BitArray *)v4, *(_DWORD *)(a2 + 8));
    unsigned int v6 = v4[2];
    return BitArray::copy((int **)v4, (int **)a2, v6);
  }
  return this;
}

uint64_t BitArray::releaseAll(uint64_t this)
{
  uint64_t v1 = (void *)this;
  if (*(_DWORD *)(this + 8) <= *(_DWORD *)(this + 12))
  {
    this = *(void *)this;
    if (*v1) {
      this = MemChunkFree((void *)this, 0);
    }
  }
  *uint64_t v1 = 0;
  v1[1] = 0;
  return this;
}

void BitArray::~BitArray(BitArray *this)
{
  if (*((_DWORD *)this + 2) <= *((_DWORD *)this + 3))
  {
    uint64_t v2 = *(void **)this;
    if (*(void *)this) {
      MemChunkFree(v2, 0);
    }
  }
  *(void *)this = 0;
  *((void *)this + 1) = 0;
}

void BitArray::reallocElts(BitArray *this, uint64_t a2, int a3)
{
  int v3 = a2;
  if (a3) {
    int v3 = minAddAllocWithExtra(a2, *((_DWORD *)this + 3));
  }
  unsigned int v5 = *((_DWORD *)this + 3) + 31;
  unint64_t v8 = 0;
  unsigned int v6 = realloc_array(*(void **)this, &v8, ((v5 + v3) >> 3) & 0x1FFFFFFC, 4 * (v5 >> 5), 4 * (v5 >> 5), 1);
  *((_DWORD *)this + 3) = (8 * v6) & 0xFFFFFFE0;
  int v7 = (char *)v8;
  *(void *)this = v8;
  bzero(&v7[4 * (v5 >> 5)], 4 * (((v6 >> 2) & 0x7FFFFFF) - (v5 >> 5)));
}

void BitArray::compact(BitArray *this)
{
  int v1 = *((_DWORD *)this + 2);
  int v2 = *((_DWORD *)this + 3);
  if (v1 != v2)
  {
    if (v1)
    {
      unsigned int v4 = (v1 + 31) >> 5;
      unint64_t v8 = 0;
      unsigned int v5 = realloc_array(*(void **)this, &v8, 4 * v4, 4 * v4, ((v2 + 31) >> 3) & 0x1FFFFFFC, 0);
      *((_DWORD *)this + 3) = (8 * v5) & 0xFFFFFFE0;
      unsigned int v6 = (char *)v8;
      *(void *)this = v8;
      bzero(&v6[4 * v4], 4 * (((v5 >> 2) & 0x7FFFFFF) - v4));
    }
    else
    {
      int v7 = *(void **)this;
      if (*(void *)this) {
        MemChunkFree(v7, 0);
      }
      *(void *)this = 0;
      *((void *)this + 1) = 0;
    }
  }
}

void BitArray::clearRange(BitArray *this, unsigned int a2, unsigned int a3)
{
  if (a2 != a3)
  {
    unsigned int v5 = a2 + 31;
    unsigned int v6 = a3 - 1;
    unsigned int v7 = (a3 - 1) >> 5;
    if (v7 >= (a2 + 31) >> 5)
    {
      unsigned int v9 = v5 >> 5;
      unsigned int v10 = v5 & 0xFFFFFFE0;
      if (v10 > a2)
      {
        uint64_t v11 = *(void *)this;
        do
        {
          *(_DWORD *)(v11 + 4 * (a2 >> 5)) &= ~(1 << a2);
          ++a2;
        }
        while (v10 != a2);
      }
      BOOL v12 = v7 >= v9;
      unsigned int v13 = v7 - v9;
      if (v13 != 0 && v12) {
        bzero((void *)(*(void *)this + 4 * v9), 4 * v13);
      }
      if (a3)
      {
        unsigned int v14 = v6 & 0xFFFFFFE0;
        uint64_t v15 = *(void *)this;
        do
        {
          *(_DWORD *)(v15 + 4 * (v14 >> 5)) &= ~(1 << v14);
          ++v14;
        }
        while (v14 < a3);
      }
    }
    else if (a2 < a3)
    {
      uint64_t v8 = *(void *)this;
      do
      {
        *(_DWORD *)(v8 + 4 * (a2 >> 5)) &= ~(1 << a2);
        ++a2;
      }
      while (a3 != a2);
    }
  }
}

void BitArray::setSizeNoGrow(BitArray *this, unsigned int a2)
{
  unsigned int v4 = *((_DWORD *)this + 2);
  if (v4 > a2) {
    BitArray::clearRange(this, a2, v4);
  }
  *((_DWORD *)this + 2) = a2;
}

void BitArray::addSize(BitArray *this, int a2)
{
  unsigned int v4 = *((_DWORD *)this + 3);
  unsigned int v5 = *((_DWORD *)this + 2) + a2;
  if (v5 > v4)
  {
    BitArray::reallocElts(this, v5 - v4, 1);
    unsigned int v5 = *((_DWORD *)this + 2) + a2;
  }

  BitArray::setSize(this, v5);
}

void BitArray::preAllocate(BitArray *this, unsigned int a2)
{
  unsigned int v2 = *((_DWORD *)this + 3);
  BOOL v3 = a2 >= v2;
  uint64_t v4 = a2 - v2;
  if (v4 != 0 && v3) {
    BitArray::reallocElts(this, v4, 0);
  }
}

_DWORD **BitArray::inplaceOrSameSize(_DWORD **this, const BitArray *a2)
{
  unsigned int v2 = *((_DWORD *)a2 + 2) + 31;
  if (v2 >= 0x20)
  {
    uint64_t v3 = v2 >> 5;
    uint64_t v4 = *(int **)a2;
    unsigned int v5 = *this;
    do
    {
      int v6 = *v4++;
      *v5++ |= v6;
      --v3;
    }
    while (v3);
  }
  return this;
}

_DWORD **BitArray::inplaceAndSameSize(_DWORD **this, const BitArray *a2)
{
  unsigned int v2 = *((_DWORD *)a2 + 2) + 31;
  if (v2 >= 0x20)
  {
    uint64_t v3 = v2 >> 5;
    uint64_t v4 = *(int **)a2;
    unsigned int v5 = *this;
    do
    {
      int v6 = *v4++;
      *v5++ &= v6;
      --v3;
    }
    while (v3);
  }
  return this;
}

uint64_t *BitArray::setRange(uint64_t *this, unsigned int a2, unsigned int a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = this;
    unsigned int v5 = a2 + 31;
    unsigned int v6 = a3 - 1;
    unsigned int v7 = (a3 - 1) >> 5;
    if (v7 >= (a2 + 31) >> 5)
    {
      unsigned int v9 = v5 >> 5;
      unsigned int v10 = v5 & 0xFFFFFFE0;
      if (v10 > a2)
      {
        uint64_t v11 = *this;
        do
        {
          *(_DWORD *)(v11 + 4 * (a2 >> 5)) &= ~(1 << a2);
          ++a2;
        }
        while (v10 != a2);
      }
      BOOL v12 = v7 >= v9;
      unsigned int v13 = v7 - v9;
      if (v13 != 0 && v12) {
        this = (uint64_t *)memset((void *)(*this + 4 * v9), 255, 4 * v13);
      }
      if (a3)
      {
        unsigned int v14 = v6 & 0xFFFFFFE0;
        uint64_t v15 = *v4;
        do
        {
          *(_DWORD *)(v15 + 4 * (v14 >> 5)) |= 1 << v14;
          ++v14;
        }
        while (v14 < a3);
      }
    }
    else if (a2 < a3)
    {
      uint64_t v8 = *this;
      do
      {
        *(_DWORD *)(v8 + 4 * (a2 >> 5)) |= 1 << a2;
        ++a2;
      }
      while (a3 != a2);
    }
  }
  return this;
}

void *BitArray::setBitsInRange(void *this, const BitArray *a2, int a3, int a4)
{
  if (a4 != a3)
  {
    unsigned int v4 = 0;
    uint64_t v5 = *(void *)a2;
    do
    {
      int v6 = 1 << (a3 + v4);
      unsigned int v7 = (a3 + v4) >> 5;
      if ((*(_DWORD *)(v5 + 4 * (v4 >> 5)) >> v4)) {
        int v8 = *(_DWORD *)(*this + 4 * v7) | v6;
      }
      else {
        int v8 = *(_DWORD *)(*this + 4 * v7) & ~v6;
      }
      *(_DWORD *)(*this + 4 * v7) = v8;
      ++v4;
    }
    while (a4 - a3 != v4);
  }
  return this;
}

void BitArray::getBitsFromRange(BitArray *this, BitArray *a2, unsigned int a3, int a4)
{
  unsigned int v8 = a4 - a3;
  unsigned int v9 = *((_DWORD *)a2 + 2);
  if (v9) {
    BitArray::clearRange(a2, 0, v9);
  }
  *((_DWORD *)a2 + 2) = 0;
  BitArray::setSize(a2, v8);
  if (a4 != a3)
  {
    unsigned int v10 = v8 >> 3;
    unsigned int v11 = a3 >> 3;
    int v12 = a3 & 7;
    if ((a3 & 7) != 0)
    {
      uint64_t v13 = *(void *)this;
      unsigned int v14 = 8 - v12;
      int v15 = (*(_DWORD *)(*(void *)this + 4 * (a3 >> 5)) >> (a3 & 0x18)) >> v12;
      if (v8 >= 8)
      {
        int v16 = 0;
        int v17 = 0;
        uint64_t v18 = *(void *)a2;
        if (v10 <= 1) {
          int v19 = 1;
        }
        else {
          int v19 = v8 >> 3;
        }
        do
        {
          int v20 = *(_DWORD *)(v13 + ((v11 + 1 + v17) & 0xFFFFFFFC)) >> ((8 * v11 + 8 + v16) & 0x18);
          *(_DWORD *)(v18 + (v17++ & 0xFFFFFFFC)) |= ((v20 << v14) & 0xFE | v15) << (v16 & 0x18);
          int v15 = v20 >> v12;
          v16 += 8;
        }
        while (v19 != v17);
      }
      if ((a4 & 7) != 0)
      {
        if ((v8 & 7) > v14) {
          v15 |= (*(_DWORD *)(v13 + ((v11 + v10 + 1) & 0x7FFFFFFC)) >> (8 * ((v11 + v10 + 1) & 3))) << v14;
        }
        v15 &= ~(-1 << (v8 & 7));
      }
      *(_DWORD *)(*(void *)a2 + 4 * (v8 >> 5)) |= v15 << (v8 & 0x18);
    }
    else
    {
      if (v8 >= 8)
      {
        int v21 = 0;
        int v22 = 0;
        uint64_t v23 = *(void *)this;
        uint64_t v24 = *(void *)a2;
        if (v10 <= 1) {
          int v25 = 1;
        }
        else {
          int v25 = v8 >> 3;
        }
        do
        {
          *(_DWORD *)(v24 + (v22 & 0xFFFFFFFC)) |= (*(_DWORD *)(v23 + ((v11 + v22) & 0xFFFFFFFC)) >> ((8 * v11 + v21) & 0x18)) << (v21 & 0x18);
          ++v22;
          v21 += 8;
        }
        while (v25 != v22);
      }
      if ((a4 & 7) != 0) {
        *(_DWORD *)(*(void *)a2 + 4 * (v8 >> 5)) |= ((*(_DWORD *)(*(void *)this + ((v10 + v11) & 0x3FFFFFFC)) >> (8 * ((v10 + v11) & 3))) & ~(-1 << (a4 & 7))) << (v8 & 0x18);
      }
    }
  }
}

void *BitArray::getBitsFromRangeAsBytes(void *this, unsigned __int8 *a2, unsigned int a3, unsigned int a4, int a5)
{
  unint64_t v5 = a5 - a4;
  if (a5 != a4)
  {
    unint64_t v6 = v5 >> 3;
    unsigned int v7 = a4 >> 3;
    int v8 = a4 & 7;
    if ((a4 & 7) != 0)
    {
      unsigned int v9 = 8 - v8;
      int v10 = (*(_DWORD *)(*this + 4 * (a4 >> 5)) >> (a4 & 0x18)) >> v8;
      if (v5 >= 8)
      {
        unsigned int v11 = v7 + 1;
        if (v6 <= 1) {
          uint64_t v12 = 1;
        }
        else {
          uint64_t v12 = v6;
        }
        int v13 = 8 * v7 + 8;
        unsigned int v14 = a2;
        do
        {
          int v15 = *(_DWORD *)(*this + (v11 & 0xFFFFFFFC)) >> (v13 & 0x18);
          *v14++ = (v15 << v9) | v10;
          int v10 = v15 >> v8;
          ++v11;
          v13 += 8;
          --v12;
        }
        while (v12);
      }
      if ((a5 & 7) != 0)
      {
        unsigned int v16 = v5 & 7;
        if (v16 > v9) {
          v10 |= (*(_DWORD *)(*this + ((v7 + v6 + 1) & 0x7FFFFFFC)) >> (8 * ((v7 + v6 + 1) & 3))) << v9;
        }
        LOBYTE(v10) = v10 & ~(-1 << v16);
      }
      goto LABEL_21;
    }
    if (v5 >= 8)
    {
      if (v6 <= 1) {
        uint64_t v17 = 1;
      }
      else {
        uint64_t v17 = v6;
      }
      int v18 = 8 * v7;
      int v19 = a2;
      unsigned int v20 = a4 >> 3;
      do
      {
        *v19++ = *(_DWORD *)(*this + (v20++ & 0xFFFFFFFC)) >> (v18 & 0x18);
        v18 += 8;
        --v17;
      }
      while (v17);
    }
    if ((a5 & 7) != 0)
    {
      int v10 = (*(_DWORD *)(*this + ((v6 + v7) & 0x3FFFFFFC)) >> (8 * ((v6 + v7) & 3))) & ~(-1 << (a5 & 7));
LABEL_21:
      a2[v6] = v10;
    }
  }
  return this;
}

uint64_t BitArray::sizeObject(uint64_t a1, int a2)
{
  if (a2 == 3)
  {
    unsigned int v2 = *(_DWORD *)(a1 + 8);
    BOOL v3 = v2 > *(_DWORD *)(a1 + 12);
    uint64_t v4 = ((v2 + 31) >> 3) & 0x1FFFFFFC;
    if (v3) {
      return v4;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v6 = 12;
    if (!gShadowDiagnosticShowIdealizedObjectSizes) {
      uint64_t v6 = 16;
    }
    unsigned int v7 = *(_DWORD *)(a1 + 8);
    unsigned int v8 = *(_DWORD *)(a1 + 12);
    unsigned int v9 = (v7 + 31) >> 5;
    uint64_t v10 = v6 + 4 * v9;
    uint64_t v11 = v10 + 4 * (((v8 + 31) >> 5) - v9);
    if (a2) {
      uint64_t v11 = v10;
    }
    if (v7 > v8 || (a2 - 4) >= 0xFFFFFFFE) {
      return v6;
    }
    else {
      return v11;
    }
  }
}

uint64_t SimpleFrameTransformer::SimpleFrameTransformer(uint64_t a1, uint64_t a2, NeuralNet *a3, uint64_t a4, uint64_t a5, const PelMgr *a6, uint64_t a7, uint64_t a8, double a9, double a10)
{
  char v10 = a8;
  int v11 = a7;
  *(void *)a1 = &unk_26C4E3238;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = a3;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = a4;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = a5;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = a6;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = 4294967280;
  int v18 = (void *)(a1 + 64);
  if (a3) {
    uint64_t WindowSize = NeuralNet::getWindowSize(a3, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
  }
  else {
    uint64_t WindowSize = 1;
  }
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v18, WindowSize);
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = 0;
  if (a5) {
    uint64_t v20 = *(_DWORD *)(a5 + 8) | 1u;
  }
  else {
    uint64_t v20 = 1;
  }
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray((void *)(a1 + 88), v20);
  *(void *)(a1 + DgnArray<LinearTransform>::releaseAll((uint64_t)this + 104) = 0;
  int v21 = (void *)(a1 + 112);
  if (a5) {
    uint64_t v22 = *(_DWORD *)(a5 + 8) | 1u;
  }
  else {
    uint64_t v22 = 1;
  }
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray((void *)(a1 + 112), v22);
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)this + 128) = 0;
  *(void *)(a1 + DgnArray<LinearTransform>::releaseAll((uint64_t)this + 144) = 0;
  char v30 = *(NeuralNet **)(a1 + 16);
  if (v30) {
    unsigned int OutputSize = NeuralNet::getOutputSize(v30, v23, v24, v25, v26, v27, v28, v29);
  }
  else {
    unsigned int OutputSize = 0;
  }
  DgnPrimArray<unsigned char>::DgnPrimArray(a1 + 152, OutputSize);
  BOOL v57 = v10;
  uint64_t v39 = (void *)(a1 + 168);
  int v40 = *(NeuralNet **)(a1 + 16);
  if (v40)
  {
    uint64_t v41 = NeuralNet::getOutputSize(v40, v32, v33, v34, v35, v36, v37, v38);
    *uint64_t v39 = 0;
    *(void *)(a1 + 176) = 0;
    if (v41) {
      DgnPrimArray<unsigned long long>::reallocElts(a1 + 168, v41, 0);
    }
  }
  else
  {
    LODWORD(v41) = 0;
    *uint64_t v39 = 0;
    *(void *)(a1 + 176) = 0;
  }
  *(void *)(a1 + DgnArray<LinearTransform>::releaseAll((uint64_t)this + 184) = 0;
  *(_DWORD *)(a1 + 176) = v41;
  *(void *)(a1 + 192) = 0;
  if (a5) {
    unsigned int v42 = *(_DWORD *)(*(void *)(a5 + 112) + 132);
  }
  else {
    unsigned int v42 = 0;
  }
  DgnPrimArray<unsigned char>::DgnPrimArray(a1 + 200, v42);
  *(void *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
  *(void *)(a1 + DgnArray<LinearTransform>::releaseAll((uint64_t)this + 224) = 0;
  *(_DWORD *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v11;
  if (a2)
  {
    unsigned int v43 = *(_DWORD *)(a2 + 8);
    if (!a4) {
      goto LABEL_24;
    }
  }
  else
  {
    unsigned int v43 = 0;
    if (!a4) {
      goto LABEL_24;
    }
  }
  if (v43 <= *(_DWORD *)(a4 + 8)) {
    unsigned int v43 = *(_DWORD *)(a4 + 8);
  }
LABEL_24:
  unsigned int v44 = v43 + 7;
  unsigned int v45 = v44 & 0xFFFFFFF8;
  if ((v44 & 0xFFFFFFF8) != 0) {
    DgnPrimArray<short>::reallocElts(a1 + 216, v44 & 0xFFFFFFF8, 0);
  }
  *(_DWORD *)(a1 + DgnArray<LinearTransform>::releaseAll((uint64_t)this + 224) = v45;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = 0;
  if (a6)
  {
    int v46 = MemChunkAlloc(0x298uLL, 0);
    OnDemandPelScorer::OnDemandPelScorer((OnDemandPelScorer *)v46, a6, 0, 0, 0, 0, 0, 0, a9, a10, v57);
    *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = v47;
    unint64_t v50 = *(unsigned int *)(a1 + 120);
    if (v50)
    {
      uint64_t v51 = 0;
      unint64_t v52 = 0;
      unsigned int v53 = *(_DWORD *)(*(void *)(a5 + 112) + 132) * *(_DWORD *)(a5 + 12);
      do
      {
        uint64_t v54 = *v21 + v51;
        unsigned int v55 = *(_DWORD *)(v54 + 12);
        if (v53 > v55)
        {
          DgnPrimArray<unsigned long long>::reallocElts(*v21 + v51, v53 - v55, 0);
          unint64_t v50 = *(unsigned int *)(a1 + 120);
        }
        *(_DWORD *)(v54 + 8) = v53;
        ++v52;
        v51 += 16;
      }
      while (v52 < v50);
      uint64_t v47 = *(void *)(a1 + 48);
    }
    if (*(double *)(v47 + 144) == 0.0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 119, (uint64_t)"recogctl/frmtrans", 1, (uint64_t)"%s", v48, v49, (char)&unk_2140A1FA0);
    }
  }
  return a1;
}

void sub_213EC5CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray(v17);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a11);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v14);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v18);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a12);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v16);
  MovingArrayWindow<DgnPrimArray<double>,DgnArray<DgnPrimArray<double>>>::~MovingArrayWindow(v15);
  MovingArrayWindow<DgnPrimArray<unsigned char>,DgnArray<DgnPrimArray<unsigned char>>>::~MovingArrayWindow(a13);
  MovingArrayWindow<DgnPrimArray<unsigned char>,DgnArray<DgnPrimArray<unsigned char>>>::~MovingArrayWindow(a14);
  _Unwind_Resume(a1);
}

void SimpleFrameTransformer::~SimpleFrameTransformer(SimpleFrameTransformer *this)
{
  *(void *)this = &unk_26C4E3238;
  DgnDelete<PelScorer>(*((void *)this + 6));
  *((void *)this + 6) = 0;
  (*(void (**)(SimpleFrameTransformer *))(*(void *)this + 24))(this);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 216);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 200);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 184);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 168);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 152);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 136);
  MovingArrayWindow<DgnPrimArray<double>,DgnArray<DgnPrimArray<double>>>::~MovingArrayWindow((uint64_t)this + 112);
  MovingArrayWindow<DgnPrimArray<unsigned char>,DgnArray<DgnPrimArray<unsigned char>>>::~MovingArrayWindow((uint64_t)this + 88);
  MovingArrayWindow<DgnPrimArray<unsigned char>,DgnArray<DgnPrimArray<unsigned char>>>::~MovingArrayWindow((uint64_t)this + 64);
}

{
  uint64_t vars8;

  SimpleFrameTransformer::~SimpleFrameTransformer(this);

  JUMPOUT(0x216698730);
}

double SimpleFrameTransformer::reset(SimpleFrameTransformer *this)
{
  *((void *)this + 13) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
  *(void *)&double result = 4294967280;
  *((void *)this + 7) = 4294967280;
  return result;
}

void SimpleFrameTransformer::printSize(SimpleFrameTransformer *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 147, (DgnString *)&v170);
  if (v171) {
    uint64_t v16 = v170;
  }
  else {
    uint64_t v16 = &unk_2140A1FA0;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_2140A1FA0, a3, &unk_2140A1FA0, v16);
  DgnString::~DgnString((DgnString *)&v170);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_2140A1FA0);
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v21 = 4;
  }
  else {
    uint64_t v21 = 8;
  }
  uint64_t v22 = (a3 + 1);
  uint64_t v23 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 149, (DgnString *)&v170);
  if (v171) {
    uint64_t v28 = v170;
  }
  else {
    uint64_t v28 = &unk_2140A1FA0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v24, v25, v26, v27, (a3 + 1), &unk_2140A1FA0, (34 - a3), (34 - a3), v28, v21, v21, 0);
  DgnString::~DgnString((DgnString *)&v170);
  *a4 += v21;
  *a5 += v21;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v29 = 4;
  }
  else {
    uint64_t v29 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 150, (DgnString *)&v170);
  if (v171) {
    uint64_t v34 = v170;
  }
  else {
    uint64_t v34 = &unk_2140A1FA0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v30, v31, v32, v33, (a3 + 1), &unk_2140A1FA0, (34 - a3), (34 - a3), v34, v29, v29, 0);
  DgnString::~DgnString((DgnString *)&v170);
  *a4 += v29;
  *a5 += v29;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v35 = 4;
  }
  else {
    uint64_t v35 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 151, (DgnString *)&v170);
  if (v171) {
    int v40 = v170;
  }
  else {
    int v40 = &unk_2140A1FA0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v36, v37, v38, v39, (a3 + 1), &unk_2140A1FA0, (34 - a3), (34 - a3), v40, v35, v35, 0);
  DgnString::~DgnString((DgnString *)&v170);
  *a4 += v35;
  *a5 += v35;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v41 = 4;
  }
  else {
    uint64_t v41 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 152, (DgnString *)&v170);
  if (v171) {
    int v46 = v170;
  }
  else {
    int v46 = &unk_2140A1FA0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v42, v43, v44, v45, (a3 + 1), &unk_2140A1FA0, (34 - a3), (34 - a3), v46, v41, v41, 0);
  DgnString::~DgnString((DgnString *)&v170);
  *a4 += v41;
  *a5 += v41;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v47 = 4;
  }
  else {
    uint64_t v47 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 153, (DgnString *)&v170);
  if (v171) {
    unint64_t v52 = v170;
  }
  else {
    unint64_t v52 = &unk_2140A1FA0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, (a3 + 1), &unk_2140A1FA0, (34 - a3), (34 - a3), v52, v47, v47, 0);
  DgnString::~DgnString((DgnString *)&v170);
  *a4 += v47;
  *a5 += v47;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v53 = 4;
  }
  else {
    uint64_t v53 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 154, (DgnString *)&v170);
  if (v171) {
    uint64_t v58 = v170;
  }
  else {
    uint64_t v58 = &unk_2140A1FA0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v54, v55, v56, v57, (a3 + 1), &unk_2140A1FA0, (34 - a3), (34 - a3), v58, v53, v53, 0);
  DgnString::~DgnString((DgnString *)&v170);
  *a4 += v53;
  *a5 += v53;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 163, (DgnString *)&v170);
  if (v171) {
    uint64_t v63 = v170;
  }
  else {
    uint64_t v63 = &unk_2140A1FA0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v59, v60, v61, v62, (a3 + 1), &unk_2140A1FA0, (34 - a3), (34 - a3), v63, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v170);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 165, (DgnString *)&v170);
  if (v171) {
    uint64_t v68 = v170;
  }
  else {
    uint64_t v68 = &unk_2140A1FA0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v64, v65, v66, v67, (a3 + 1), &unk_2140A1FA0, (34 - a3), (34 - a3), v68, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v170);
  *a4 += 4;
  *a5 += 4;
  uint64_t v69 = sizeObject<DgnPrimArray<unsigned char>>((uint64_t)this + 64, 0) + 8;
  uint64_t v70 = sizeObject<DgnPrimArray<unsigned char>>((uint64_t)this + 64, 1) + 8;
  uint64_t v170 = 0;
  uint64_t v171 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v170);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 166, (DgnString *)&v170);
  if (v171) {
    uint64_t v75 = v170;
  }
  else {
    uint64_t v75 = &unk_2140A1FA0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v71, v72, v73, v74, (a3 + 1), &unk_2140A1FA0, (34 - a3), (34 - a3), v75, v69, v70, 0);
  DgnString::~DgnString((DgnString *)&v170);
  *a4 += v69;
  *a5 += v70;
  uint64_t v76 = sizeObject<DgnPrimArray<unsigned char>>((uint64_t)this + 88, 0) + 8;
  uint64_t v77 = sizeObject<DgnPrimArray<unsigned char>>((uint64_t)this + 88, 1) + 8;
  uint64_t v170 = 0;
  uint64_t v171 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v170);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 167, (DgnString *)&v170);
  if (v171) {
    uint64_t v82 = v170;
  }
  else {
    uint64_t v82 = &unk_2140A1FA0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, (a3 + 1), &unk_2140A1FA0, (34 - a3), (34 - a3), v82, v76, v77, 0);
  DgnString::~DgnString((DgnString *)&v170);
  *a4 += v76;
  *a5 += v77;
  uint64_t v83 = sizeObject<DgnPrimArray<double>>((uint64_t)this + 112, 0) + 8;
  uint64_t v84 = sizeObject<DgnPrimArray<double>>((uint64_t)this + 112, 1) + 8;
  uint64_t v170 = 0;
  uint64_t v171 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v170);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 169, (DgnString *)&v170);
  if (v171) {
    uint64_t v89 = v170;
  }
  else {
    uint64_t v89 = &unk_2140A1FA0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v85, v86, v87, v88, (a3 + 1), &unk_2140A1FA0, (34 - a3), (34 - a3), v89, v83, v84, 0);
  DgnString::~DgnString((DgnString *)&v170);
  *a4 += v83;
  *a5 += v84;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v90 = 12;
  }
  else {
    uint64_t v90 = 16;
  }
  int v91 = *((_DWORD *)this + 36);
  unsigned int v92 = *((_DWORD *)this + 37);
  BOOL v93 = v92 >= v91;
  uint64_t v94 = v92 - v91;
  uint64_t v169 = a3;
  if (v93)
  {
    uint64_t v96 = v91 & ~(v91 >> 31);
    int v91 = 0;
    uint64_t v95 = v90 + v96;
    v90 += v96 + v94;
  }
  else
  {
    uint64_t v95 = v90;
  }
  uint64_t v97 = v91;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 171, (DgnString *)&v170);
  if (v171) {
    uint64_t v102 = v170;
  }
  else {
    uint64_t v102 = &unk_2140A1FA0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v98, v99, v100, v101, v22, &unk_2140A1FA0, v23, v23, v102, v90, v95, v97);
  DgnString::~DgnString((DgnString *)&v170);
  *a4 += v90;
  *a5 += v95;
  *a6 += v97;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v103 = 12;
  }
  else {
    uint64_t v103 = 16;
  }
  int v104 = *((_DWORD *)this + 40);
  unsigned int v105 = *((_DWORD *)this + 41);
  BOOL v93 = v105 >= v104;
  uint64_t v106 = v105 - v104;
  if (v93)
  {
    uint64_t v108 = v104 & ~(v104 >> 31);
    int v104 = 0;
    uint64_t v107 = v103 + v108;
    v103 += v108 + v106;
  }
  else
  {
    uint64_t v107 = v103;
  }
  uint64_t v109 = v104;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 172, (DgnString *)&v170);
  if (v171) {
    uint64_t v114 = v170;
  }
  else {
    uint64_t v114 = &unk_2140A1FA0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v110, v111, v112, v113, v22, &unk_2140A1FA0, v23, v23, v114, v103, v107, v109);
  DgnString::~DgnString((DgnString *)&v170);
  *a4 += v103;
  *a5 += v107;
  *a6 += v109;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v115 = 12;
  }
  else {
    uint64_t v115 = 16;
  }
  uint64_t v116 = *((unsigned int *)this + 44);
  unsigned int v117 = *((_DWORD *)this + 45);
  if (v117 >= v116)
  {
    uint64_t v118 = 0;
    if ((int)v116 > 0) {
      v115 += 8 * (v116 - 1) + 8;
    }
    uint64_t v119 = v115 + 8 * (v117 - v116);
  }
  else
  {
    uint64_t v118 = 8 * v116;
    uint64_t v119 = v115;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 174, (DgnString *)&v170);
  if (v171) {
    uint64_t v124 = v170;
  }
  else {
    uint64_t v124 = &unk_2140A1FA0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v120, v121, v122, v123, v22, &unk_2140A1FA0, v23, v23, v124, v119, v115, v118);
  DgnString::~DgnString((DgnString *)&v170);
  *a4 += v119;
  *a5 += v115;
  *a6 += v118;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v125 = 12;
  }
  else {
    uint64_t v125 = 16;
  }
  int v126 = *((_DWORD *)this + 48);
  unsigned int v127 = *((_DWORD *)this + 49);
  BOOL v93 = v127 >= v126;
  uint64_t v128 = v127 - v126;
  if (v93)
  {
    uint64_t v130 = v126 & ~(v126 >> 31);
    int v126 = 0;
    uint64_t v129 = v125 + v130;
    v125 += v130 + v128;
  }
  else
  {
    uint64_t v129 = v125;
  }
  uint64_t v131 = v126;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 176, (DgnString *)&v170);
  if (v171) {
    unsigned int v136 = v170;
  }
  else {
    unsigned int v136 = &unk_2140A1FA0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v132, v133, v134, v135, v22, &unk_2140A1FA0, v23, v23, v136, v125, v129, v131);
  DgnString::~DgnString((DgnString *)&v170);
  *a4 += v125;
  *a5 += v129;
  *a6 += v131;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v137 = 12;
  }
  else {
    uint64_t v137 = 16;
  }
  int v138 = *((_DWORD *)this + 52);
  unsigned int v139 = *((_DWORD *)this + 53);
  BOOL v93 = v139 >= v138;
  uint64_t v140 = v139 - v138;
  if (v93)
  {
    uint64_t v142 = v138 & ~(v138 >> 31);
    int v138 = 0;
    uint64_t v141 = v137 + v142;
    v137 += v142 + v140;
  }
  else
  {
    uint64_t v141 = v137;
  }
  uint64_t v143 = v138;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 178, (DgnString *)&v170);
  if (v171) {
    uint64_t v148 = v170;
  }
  else {
    uint64_t v148 = &unk_2140A1FA0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v144, v145, v146, v147, v22, &unk_2140A1FA0, v23, v23, v148, v137, v141, v143);
  DgnString::~DgnString((DgnString *)&v170);
  *a4 += v137;
  *a5 += v141;
  *a6 += v143;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v149 = 12;
  }
  else {
    uint64_t v149 = 16;
  }
  uint64_t v150 = *((unsigned int *)this + 56);
  unsigned int v151 = *((_DWORD *)this + 57);
  if (v151 >= v150)
  {
    uint64_t v152 = 0;
    if ((int)v150 > 0) {
      uint64_t v149 = (v149 | 2) + 2 * (v150 - 1);
    }
    uint64_t v153 = v149 + 2 * (v151 - v150);
  }
  else
  {
    uint64_t v152 = 2 * v150;
    uint64_t v153 = v149;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 180, (DgnString *)&v170);
  if (v171) {
    uint64_t v158 = v170;
  }
  else {
    uint64_t v158 = &unk_2140A1FA0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v154, v155, v156, v157, v22, &unk_2140A1FA0, v23, v23, v158, v153, v149, v152);
  DgnString::~DgnString((DgnString *)&v170);
  *a4 += v153;
  *a5 += v149;
  *a6 += v152;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 182, (DgnString *)&v170);
  if (v171) {
    uint64_t v163 = v170;
  }
  else {
    uint64_t v163 = &unk_2140A1FA0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v159, v160, v161, v162, v22, &unk_2140A1FA0, v23, v23, v163, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v170);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 184, (DgnString *)&v170);
  if (v171) {
    uint64_t v168 = v170;
  }
  else {
    uint64_t v168 = &unk_2140A1FA0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v164, v165, v166, v167, v169, &unk_2140A1FA0, (35 - v169), (35 - v169), v168, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v170);
}

void sub_213EC69B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

unint64_t SimpleFrameTransformer::doStage2ForRecogFramesOnly(unint64_t result, uint64_t a2)
{
  unsigned int v3 = *(_DWORD *)(result + 56);
  if (!((v3 + 1) % *(_DWORD *)(result + 232)))
  {
    unint64_t v4 = result;
    uint64_t v5 = *(void *)(result + 32);
    if (v5)
    {
      FmpeMgr::fmpeStage2(v5, v3, v4 + 88, (uint64_t *)(v4 + 112), (void *)(v4 + 200));
    }
    else
    {
      uint64_t v6 = *(void *)(v4 + 88) + 16 * (v3 % *(_DWORD *)(v4 + 96));
      DgnPrimArray<unsigned char>::copyArraySlice(v4 + 200, (void *)v6, 0, *(_DWORD *)(v6 + 8));
    }
    unsigned int v7 = *(_DWORD *)(v4 + 56) / *(_DWORD *)(v4 + 232);
    return SynchronizedArray<DgnPrimArray<unsigned char>>::add(a2, v7, v4 + 200);
  }
  return result;
}

unint64_t SynchronizedArray<DgnPrimArray<unsigned char>>::add(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (v6 == *(_DWORD *)(a1 + 20))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts(a1 + 8, 1, 1);
    unsigned int v6 = *(_DWORD *)(a1 + 16);
  }
  unsigned int v7 = (void *)(*(void *)(a1 + 8) + 16 * v6);
  *unsigned int v7 = 0;
  v7[1] = 0;
  ++*(_DWORD *)(a1 + 16);
  unint64_t v8 = *(void *)(a1 + 8) + 16 * a2;
  unsigned int v9 = *(_DWORD *)(a3 + 8);

  return DgnPrimArray<unsigned char>::copyArraySlice(v8, (void *)a3, 0, v9);
}

void SimpleFrameTransformer::transformFrame(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v94 = a3;
  unsigned int v10 = a2;
  if (!a4)
  {
    if (*(_DWORD *)(a1 + 80) != *(_DWORD *)(a1 + 84))
    {
      Halfuint64_t WindowSize = NeuralNet::getHalfWindowSize(*(NeuralNet **)(a1 + 16), a2, a3, 0, a5, a6, a7, a8);
      unsigned int v31 = HalfWindowSize;
      unsigned int v32 = *(_DWORD *)(a1 + 80) - *(_DWORD *)(a1 + 84);
      unsigned int v33 = v32 - HalfWindowSize;
      unsigned int v93 = HalfWindowSize;
      if (v32 - HalfWindowSize < HalfWindowSize + 1)
      {
        if (v32 < 2 * HalfWindowSize)
        {
          unsigned int v34 = v32 - 1;
          int v35 = 2 * HalfWindowSize;
          do
          {
            unsigned int v36 = *(_DWORD *)(a1 + 80) + 1;
            unsigned int v37 = *(_DWORD *)(a1 + 72);
            int v38 = v36 - v37;
            if (v36 < v37) {
              int v38 = 0;
            }
            *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = v36;
            *(_DWORD *)(a1 + 84) = v38;
            DgnPrimArray<unsigned char>::copyArraySlice(*(void *)(a1 + 64) + 16 * (v32 % v37), (void *)(*(void *)(a1 + 64) + 16 * (v34 % v37)), 0, *(_DWORD *)(*(void *)(a1 + 64) + 16 * (v34 % v37) + 8));
            ++v32;
          }
          while (v35 != v32);
        }
        if (!v33) {
          goto LABEL_56;
        }
        goto LABEL_38;
      }
      unsigned int v33 = HalfWindowSize;
      unsigned int v31 = v10;
      if (HalfWindowSize)
      {
LABEL_38:
        int v65 = 0;
        unsigned int v66 = v31 + v93;
        do
        {
          unsigned int v67 = *(_DWORD *)(a1 + 80) + 1;
          unsigned int v68 = *(_DWORD *)(a1 + 72);
          unsigned int v69 = v67 - v68;
          if (v67 < v68) {
            unsigned int v69 = 0;
          }
          *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = v67;
          *(_DWORD *)(a1 + 84) = v69;
          uint64_t v70 = *(void *)(a1 + 64);
          uint64_t v71 = v70 + 16 * ((v66 + v65 - 1) % v68);
          DgnPrimArray<unsigned char>::copyArraySlice(v70 + 16 * ((v66 + v65) % v68), (void *)v71, 0, *(_DWORD *)(v71 + 8));
          NeuralNet::run(*(NeuralNet **)(a1 + 16), (uint64_t *)(a1 + 64), v65 + v10, a1 + 152, a1 + 168, v72, v73, v74);
          if (a6)
          {
            uint64_t v80 = *(unsigned int *)(a6 + 8);
            if (v80 == *(_DWORD *)(a6 + 12))
            {
              DgnArray<DgnPrimArray<double>>::reallocElts(a6, 1, 1);
              uint64_t v80 = *(unsigned int *)(a6 + 8);
            }
            uint64_t v81 = (void *)(*(void *)a6 + 16 * v80);
            *uint64_t v81 = 0;
            v81[1] = 0;
            DgnPrimArray<double>::copyArraySlice((uint64_t)v81, (uint64_t *)(a1 + 168), 0, *(_DWORD *)(a1 + 176));
            ++*(_DWORD *)(a6 + 8);
          }
          uint64_t v82 = SimpleFrameTransformer::concatenateFeatures(a1, *(void *)(a1 + 64) + 16 * ((v65 - v33 + v10 + v93) % *(_DWORD *)(a1 + 72)), v94, v75, v76, v77, v78, v79);
          SimpleFrameTransformer::doImelda(a1, v65 - v33 + v10, v82, v83, v84, v85, v86, v87);
          SimpleFrameTransformer::doFmpeStage1((SimpleFrameTransformer *)a1, v65 - v33 + v10);
          unsigned int v88 = *(_DWORD *)(a1 + 104) - *(_DWORD *)(a1 + 108);
          if (v88 >= (*(unsigned int (**)(unint64_t))(*(void *)a1 + 112))(a1) + 1)
          {
            int v89 = *(_DWORD *)(a1 + 56);
            if (v89 == -16) {
              int v90 = 0;
            }
            else {
              int v90 = v89 + 1;
            }
            *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = v90;
            SimpleFrameTransformer::doStage2ForRecogFramesOnly(a1, a5);
          }
          ++v65;
        }
        while (v65 != v33);
      }
    }
LABEL_56:
    while ((*(int (**)(unint64_t, void))(*(void *)a1 + 48))(a1, *(unsigned int *)(a5 + 16)) < (int)v10)
    {
      int v91 = *(_DWORD *)(a1 + 56);
      if (v91 == -16) {
        int v92 = 0;
      }
      else {
        int v92 = v91 + 1;
      }
      *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = v92;
      SimpleFrameTransformer::doStage2ForRecogFramesOnly(a1, a5);
    }
    *(unsigned char *)a5 = 1;
    return;
  }
  uint64_t v12 = a4;
  uint64_t v13 = *(void *)(a1 + 8);
  if (v13)
  {
    LinearTransform::doTransform((int *)(v13 + 8), a4, a1 + 136, a4, a5, a6, a7, a8);
    uint64_t v12 = a1 + 136;
  }
  uint64_t v14 = *(NeuralNet **)(a1 + 16);
  if (!v14) {
    goto LABEL_30;
  }
  unsigned int v15 = NeuralNet::getHalfWindowSize(v14, a2, a3, a4, a5, a6, a7, a8);
  unsigned int v16 = v15;
  int v17 = *(_DWORD *)(a1 + 80);
  if (v17 == *(_DWORD *)(a1 + 84))
  {
    unsigned int v18 = 0;
    do
    {
      unsigned int v19 = *(_DWORD *)(a1 + 80) + 1;
      unsigned int v20 = *(_DWORD *)(a1 + 72);
      unsigned int v21 = v19 - v20;
      if (v19 < v20) {
        unsigned int v21 = 0;
      }
      *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = v19;
      *(_DWORD *)(a1 + 84) = v21;
      DgnPrimArray<unsigned char>::copyArraySlice(*(void *)(a1 + 64) + 16 * (v18 % v20), (void *)v12, 0, *(_DWORD *)(v12 + 8));
      ++v18;
    }
    while (v18 <= v16);
    uint64_t v29 = *(NeuralNet **)(a1 + 16);
    NeuralNet::reset(v29, v22, v23, v24, v25, v26, v27, v28);
    return;
  }
  unsigned int v39 = v17 + 1;
  unsigned int v40 = *(_DWORD *)(a1 + 72);
  unsigned int v41 = v39 - v40;
  if (v39 < v40) {
    unsigned int v41 = 0;
  }
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = v39;
  *(_DWORD *)(a1 + 84) = v41;
  DgnPrimArray<unsigned char>::copyArraySlice(*(void *)(a1 + 64) + 16 * ((v15 + v10) % v40), (void *)v12, 0, *(_DWORD *)(v12 + 8));
  unsigned int v42 = *(_DWORD *)(a1 + 80) - *(_DWORD *)(a1 + 84);
  if (v42 >= NeuralNet::getWindowSize(*(NeuralNet **)(a1 + 16), v43, v44, v45, v46, v47, v48, v49))
  {
    NeuralNet::run(*(NeuralNet **)(a1 + 16), (uint64_t *)(a1 + 64), v10, a1 + 152, a1 + 168, v50, v51, v52);
    if (a6)
    {
      unsigned int v53 = *(_DWORD *)(a6 + 8);
      if (v53 == *(_DWORD *)(a6 + 12))
      {
        DgnArray<DgnPrimArray<double>>::reallocElts(a6, 1, 1);
        unsigned int v53 = *(_DWORD *)(a6 + 8);
      }
      uint64_t v54 = (void *)(*(void *)a6 + 16 * v53);
      *uint64_t v54 = 0;
      v54[1] = 0;
      DgnPrimArray<double>::copyArraySlice((uint64_t)v54, (uint64_t *)(a1 + 168), 0, *(_DWORD *)(a1 + 176));
      ++*(_DWORD *)(a6 + 8);
    }
    unsigned int v55 = v10 % *(_DWORD *)(a1 + 72);
    v10 -= v16;
    uint64_t v12 = *(void *)(a1 + 64) + 16 * v55;
LABEL_30:
    uint64_t v56 = SimpleFrameTransformer::concatenateFeatures(a1, v12, v94, a4, a5, a6, a7, a8);
    SimpleFrameTransformer::doImelda(a1, v10, v56, v57, v58, v59, v60, v61);
    SimpleFrameTransformer::doFmpeStage1((SimpleFrameTransformer *)a1, v10);
    unsigned int v62 = *(_DWORD *)(a1 + 104) - *(_DWORD *)(a1 + 108);
    if (v62 >= (*(unsigned int (**)(unint64_t))(*(void *)a1 + 112))(a1) + 1)
    {
      int v63 = *(_DWORD *)(a1 + 56);
      if (v63 == -16) {
        int v64 = 0;
      }
      else {
        int v64 = v63 + 1;
      }
      *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = v64;
      SimpleFrameTransformer::doStage2ForRecogFramesOnly(a1, a5);
    }
  }
}

uint64_t SimpleFrameTransformer::concatenateFeatures(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a2;
  unsigned int v10 = *(NeuralNet **)(a1 + 16);
  if (v10)
  {
    char v11 = a3;
    if (!NeuralNet::isOutTypeConcatenatedBF(v10, a2, a3, a4, a5, a6, a7, a8) || (v11 & 1) != 0)
    {
      return a1 + 152;
    }
    else
    {
      unint64_t v12 = (*(_DWORD *)(v8 + 8) + *(_DWORD *)(a1 + 160));
      if (*(_DWORD *)(a1 + 196) < v12)
      {
        unsigned int v18 = 0;
        *(_DWORD *)(a1 + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = realloc_array(*(void **)(a1 + 184), &v18, v12, *(unsigned int *)(a1 + 192), *(unsigned int *)(a1 + 192), 1);
        *(void *)(a1 + DgnArray<LinearTransform>::releaseAll((uint64_t)this + 184) = v18;
      }
      *(_DWORD *)(a1 + 192) = v12;
      uint64_t v13 = *(unsigned int *)(v8 + 8);
      if (v13)
      {
        for (uint64_t i = 0; i != v13; ++i)
          *(unsigned char *)(*(void *)(a1 + 184) + i) = *(unsigned char *)(*(void *)v8 + i);
      }
      uint64_t v15 = *(unsigned int *)(a1 + 160);
      if (v15)
      {
        for (uint64_t j = 0; j != v15; ++j)
          *(unsigned char *)(*(void *)(a1 + 184) + (v13 + j)) = *(unsigned char *)(*(void *)(a1 + 152) + j);
      }
      return a1 + 184;
    }
  }
  return v8;
}

void SimpleFrameTransformer::doImelda(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = *(_DWORD *)(a1 + 104) + 1;
  unsigned int v9 = *(_DWORD *)(a1 + 96);
  unsigned int v10 = v8 - v9;
  if (v8 < v9) {
    unsigned int v10 = 0;
  }
  *(_DWORD *)(a1 + DgnArray<LinearTransform>::releaseAll((uint64_t)this + 104) = v8;
  *(_DWORD *)(a1 + 108) = v10;
  uint64_t v11 = *(void *)(a1 + 24);
  unsigned int v12 = a2 % v9;
  uint64_t v13 = *(void *)(a1 + 88);
  if (v11) {
    LinearTransform::doTransform((int *)(v11 + 8), a3, v13 + 16 * v12, a4, a5, a6, a7, a8);
  }
  else {
    DgnPrimArray<unsigned char>::copyArraySlice(v13 + 16 * v12, (void *)a3, 0, *(_DWORD *)(a3 + 8));
  }
}

uint64_t SimpleFrameTransformer::doFmpeStage1(SimpleFrameTransformer *this, unsigned int a2)
{
  uint64_t result = *((void *)this + 4);
  if (result)
  {
    unsigned int v4 = *((_DWORD *)this + 32) + 1;
    unsigned int v5 = *((_DWORD *)this + 30);
    int v6 = v4 - v5;
    if (v4 < v5) {
      int v6 = 0;
    }
    *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v4;
    *((_DWORD *)this + 33) = v6;
    return FmpeMgr::fmpeStage1(result, a2, (unsigned __int8 **)(*((void *)this + 11) + 16 * (a2 % *((_DWORD *)this + 24))), (void **)(*((void *)this + 14) + 16 * (a2 % v5)), *((ReproData **)this + 6));
  }
  return result;
}

uint64_t SimpleFrameTransformer::getNextFrameTime(SimpleFrameTransformer *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = *((_DWORD *)this + 20);
  if (v8 != *((_DWORD *)this + 21)) {
    return v8 - NeuralNet::getHalfWindowSize(*((NeuralNet **)this + 2), a2, a3, a4, a5, a6, a7, a8);
  }
  int v9 = *((_DWORD *)this + 14);
  if (v9 == -16) {
    return (*((_DWORD *)this + 26) - *((_DWORD *)this + 27));
  }
  else {
    return v9 + (*(unsigned int (**)(SimpleFrameTransformer *))(*(void *)this + 112))(this) + 1;
  }
}

uint64_t SimpleFrameTransformer::getPreDecimatedEquivalent(SimpleFrameTransformer *this, int a2)
{
  int v2 = *((_DWORD *)this + 58) + *((_DWORD *)this + 58) * a2;
  return v2 + (*(unsigned int (**)(SimpleFrameTransformer *))(*(void *)this + 112))(this) - 1;
}

uint64_t SimpleFrameTransformer::getPreDecimatedEquivalentWithoutWindow(SimpleFrameTransformer *this, int a2)
{
  return (*((_DWORD *)this + 58) + *((_DWORD *)this + 58) * a2 - 1);
}

uint64_t SimpleFrameTransformer::getRecogEquivalent(SimpleFrameTransformer *this, int a2)
{
  return (a2 - (*(unsigned int (**)(SimpleFrameTransformer *))(*(void *)this + 112))(this))
       / *((_DWORD *)this + 58);
}

uint64_t SimpleFrameTransformer::transformFramesUntil(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, void))(*(void *)a1 + 88))(a1, a2, 0, a3, a4, 0);
}

uint64_t SimpleFrameTransformer::transformFramesUntil(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v22[0] = 0;
  v22[1] = 0;
  int v13 = a2 + 1;
  for (int i = *(_DWORD *)(a1 + 60); ; *(_DWORD *)(a1 + 60) = i)
  {
    uint64_t v15 = *(NeuralNet **)(a1 + 16);
    if (v15)
    {
      LODWORD(v15) = NeuralNet::getHalfWindowSize(v15, a2, a3, a4, a5, a6, a7, a8);
      int v16 = *(_DWORD *)(a1 + 60);
    }
    else
    {
      int v16 = i;
    }
    if (i > (int)v15 + v13 || *(_DWORD *)(a4 + 16) <= v16) {
      break;
    }
    uint64_t v17 = *(void *)(a4 + 8) + 16 * v16;
    DgnPrimArray<unsigned char>::copyArraySlice((unint64_t)v22, (void *)v17, 0, *(_DWORD *)(v17 + 8));
    SimpleFrameTransformer::transformFrame(a1, *(unsigned int *)(a1 + 60), a3, (uint64_t)v22, a5, a6, v18, v19);
    int i = *(_DWORD *)(a1 + 60) + 1;
  }
  unsigned int v20 = *(NeuralNet **)(a1 + 16);
  if (v20) {
    LODWORD(v20) = NeuralNet::getHalfWindowSize(v20, a2, a3, a4, a5, a6, a7, a8);
  }
  if (v16 <= (int)v20 + v13 && *(unsigned char *)a4 && !*(unsigned char *)a5)
  {
    *(_DWORD *)(a5 + 4) = *(_DWORD *)(a5 + 16);
    SimpleFrameTransformer::transformFrame(a1, *(unsigned int *)(a4 + 16), a3, 0, a5, a6, a7, a8);
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v22);
}

void sub_213EC7484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void FrameTransformerThreadWorker::~FrameTransformerThreadWorker(FrameTransformerThreadWorker *this)
{
  *(void *)this = &unk_26C4E3F30;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 288);

  DgnThreadWorker::~DgnThreadWorker(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26C4E3F30;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 288);
  DgnThreadWorker::~DgnThreadWorker(this);

  JUMPOUT(0x216698730);
}

uint64_t FrameTransformerThreadWorker::onStartup(FrameTransformerThreadWorker *this)
{
  uint64_t v2 = *((void *)this + 6);
  unsigned int v3 = MemChunkAlloc(0xF0uLL, 0);
  uint64_t v4 = SimpleFrameTransformer::SimpleFrameTransformer((uint64_t)v3, *(void *)(v2 + 1576), *(NeuralNet **)(v2 + 1584), *(void *)(v2 + 1592), *(void *)(v2 + 1600), *(const PelMgr **)(v2 + 1608), *(unsigned int *)(v2 + 1620), *(unsigned __int8 *)(v2 + 1632), *(double *)(v2 + 1624), *(double *)(v2 + 1640));
  *((void *)this + 33) = v4;
  (*(void (**)(uint64_t))(*(void *)v4 + 64))(v4);
  unsigned int v5 = MemChunkAlloc(0x18uLL, 0);
  *((void *)this + 34) = SynchronizedArray<DgnPrimArray<unsigned char>>::SynchronizedArray((uint64_t)v5);
  int v6 = MemChunkAlloc(0x18uLL, 0);
  uint64_t result = SynchronizedArray<DgnPrimArray<unsigned char>>::SynchronizedArray((uint64_t)v6);
  *((void *)this + 35) = result;
  return result;
}

uint64_t FrameTransformerThreadWorker::onShutdown(FrameTransformerThreadWorker *this)
{
  (*(void (**)(void))(**((void **)this + 33) + 72))(*((void *)this + 33));
  DgnDelete<FrameTransformer>(*((void (****)(void))this + 33));
  DgnDelete<UttFeatureArraySynchronizedArray>(*((void *)this + 34));
  uint64_t v2 = *((void *)this + 35);

  return DgnDelete<UttFeatureArraySynchronizedArray>(v2);
}

unsigned char *FrameTransformerThreadWorker::onPlay(FrameTransformerThreadWorker *this)
{
  uint64_t v1 = *((void *)this + 6);
  *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = *(_DWORD *)(v1 + 1652);
  uint64_t result = (unsigned char *)*((void *)this + 35);
  if (!*result) {
    return (unsigned char *)SynchronizedArray<DgnPrimArray<unsigned char>>::update((unint64_t)result, *(void *)(v1 + 1656));
  }
  return result;
}

unint64_t SynchronizedArray<DgnPrimArray<unsigned char>>::update(unint64_t result, uint64_t a2)
{
  unint64_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 16);
  unsigned int v5 = (void *)(result + 8);
  unsigned int v7 = *(_DWORD *)(result + 16);
  unsigned int v6 = *(_DWORD *)(result + 20);
  if (v6 > 0x1F3)
  {
    unsigned int v8 = *(_DWORD *)(a2 + 16);
  }
  else
  {
    uint64_t result = DgnArray<DgnPrimArray<double>>::reallocElts(result + 8, 500 - v6, 0);
    unsigned int v8 = *(_DWORD *)(a2 + 16);
    unsigned int v6 = *(_DWORD *)(v3 + 20);
  }
  if (v8 > v6) {
    uint64_t result = DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v5, v8 - v6, 0);
  }
  uint64_t v9 = *(unsigned int *)(v3 + 16);
  if (v9 <= v8)
  {
    if (v9 < v8)
    {
      uint64_t v12 = v8 - v9;
      uint64_t v13 = 16 * v9;
      do
      {
        uint64_t v14 = (void *)(*v5 + v13);
        *uint64_t v14 = 0;
        v14[1] = 0;
        v13 += 16;
        --v12;
      }
      while (v12);
    }
  }
  else if ((int)v9 > (int)v8)
  {
    uint64_t v10 = (int)v9;
    uint64_t v11 = 16 * (int)v9 - 16;
    do
    {
      --v10;
      uint64_t result = DgnPrimArray<unsigned int>::~DgnPrimArray(*v5 + v11);
      v11 -= 16;
    }
    while (v10 > (int)v8);
  }
  *(_DWORD *)(v3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v8;
  if ((int)v7 < v4)
  {
    do
    {
      uint64_t v15 = *(void *)(a2 + 8) + 16 * v7;
      uint64_t result = DgnPrimArray<unsigned char>::copyArraySlice(*v5 + 16 * v7++, (void *)v15, 0, *(_DWORD *)(v15 + 8));
    }
    while (v4 != v7);
  }
  if (*(unsigned char *)a2) {
    *(unsigned char *)unint64_t v3 = 1;
  }
  if (*(_DWORD *)(v3 + 4) == -16) {
    *(_DWORD *)(v3 + 4) = *(_DWORD *)(a2 + 4);
  }
  return result;
}

uint64_t FrameTransformerThreadWorker::playOne(FrameTransformerThreadWorker *this)
{
  uint64_t v1 = *((void *)this + 34);
  if (*(unsigned char *)v1) {
    return 4;
  }
  int v4 = *((_DWORD *)this + 64);
  if (v4 != -16 && *(_DWORD *)(v1 + 16) > v4) {
    return 4;
  }
  uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 33) + 32))(*((void *)this + 33));
  uint64_t v8 = v5;
  uint64_t v9 = *((void *)this + 35);
  if (*(_DWORD *)(v9 + 16) <= (int)v5)
  {
    if (*(unsigned char *)v9)
    {
      unint64_t v14 = *((void *)this + 33);
      uint64_t v15 = *((void *)this + 34);
      *(_DWORD *)(v15 + 4) = *(_DWORD *)(v15 + 16);
      SimpleFrameTransformer::transformFrame(v14, v8, 0, 0, v15, 0, v6, v7);
    }
    return 4;
  }
  uint64_t v10 = *(void *)(v9 + 8) + 16 * v5;
  DgnPrimArray<unsigned char>::copyArraySlice((unint64_t)this + 288, (void *)v10, 0, *(_DWORD *)(v10 + 8));
  SimpleFrameTransformer::transformFrame(*((void *)this + 33), v8, 0, (uint64_t)this + 288, *((void *)this + 34), 0, v11, v12);
  int v13 = *((_DWORD *)this + 64);
  if (v13 != -16 && *(_DWORD *)(*((void *)this + 34) + 16) > v13) {
    return 4;
  }
  return 1;
}

uint64_t FrameTransformerThreadWorker::reset(FrameTransformerThreadWorker *this)
{
  Latch<MemChunkRegion,LatchAdapter>::Latch(&v6, *((void *)this + 5));
  uint64_t v2 = *((void *)this + 33);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  uint64_t v3 = *((void *)this + 35);
  if (v3) {
    SynchronizedArray<DgnPrimArray<unsigned char>>::reset(v3);
  }
  uint64_t v4 = *((void *)this + 34);
  if (v4) {
    SynchronizedArray<DgnPrimArray<unsigned char>>::reset(v4);
  }
  *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = -16;
  return Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)&v6);
}

void sub_213EC798C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)va);
  _Unwind_Resume(a1);
}

void FrameTransformerThreadWorker::printSize(FrameTransformerThreadWorker *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 1091, (DgnString *)&v69);
  if (v70) {
    uint64_t v15 = v69;
  }
  else {
    uint64_t v15 = &unk_2140A1FA0;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v11, v12, v13, v14, a3, &unk_2140A1FA0, a3, &unk_2140A1FA0, v15);
  DgnString::~DgnString((DgnString *)&v69);
  if (a2 != -1) {
    xlprintf("%d ", v16, v17, v18, v19, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v16, v17, v18, v19, a3, &unk_2140A1FA0);
  uint64_t v20 = (a3 + 1);
  uint64_t v21 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 1094, (DgnString *)&v69);
  if (v70) {
    uint64_t v26 = v69;
  }
  else {
    uint64_t v26 = &unk_2140A1FA0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v22, v23, v24, v25, (a3 + 1), &unk_2140A1FA0, (34 - a3), (34 - a3), v26, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v69);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v27 = 4;
  }
  else {
    uint64_t v27 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 1095, (DgnString *)&v69);
  if (v70) {
    unsigned int v32 = v69;
  }
  else {
    unsigned int v32 = &unk_2140A1FA0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_2140A1FA0, (34 - a3), (34 - a3), v32, v27, v27, 0);
  DgnString::~DgnString((DgnString *)&v69);
  *a4 += v27;
  *a5 += v27;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v33 = 4;
  }
  else {
    uint64_t v33 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 1096, (DgnString *)&v69);
  if (v70) {
    int v38 = v69;
  }
  else {
    int v38 = &unk_2140A1FA0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v34, v35, v36, v37, (a3 + 1), &unk_2140A1FA0, (34 - a3), (34 - a3), v38, v33, v33, 0);
  DgnString::~DgnString((DgnString *)&v69);
  *a4 += v33;
  *a5 += v33;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v39 = 4;
  }
  else {
    uint64_t v39 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 1097, (DgnString *)&v69);
  if (v70) {
    uint64_t v44 = v69;
  }
  else {
    uint64_t v44 = &unk_2140A1FA0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v40, v41, v42, v43, (a3 + 1), &unk_2140A1FA0, (34 - a3), (34 - a3), v44, v39, v39, 0);
  uint64_t v64 = a3;
  DgnString::~DgnString((DgnString *)&v69);
  *a4 += v39;
  *a5 += v39;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v45 = 12;
  }
  else {
    uint64_t v45 = 16;
  }
  int v46 = *((_DWORD *)this + 74);
  unsigned int v47 = *((_DWORD *)this + 75);
  uint64_t v48 = a2;
  BOOL v49 = v47 >= v46;
  uint64_t v50 = v47 - v46;
  if (v49)
  {
    uint64_t v52 = v46 & ~(v46 >> 31);
    int v46 = 0;
    uint64_t v51 = v45 + v52;
    v45 += v52 + v50;
  }
  else
  {
    uint64_t v51 = v45;
  }
  uint64_t v53 = v46;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 1099, (DgnString *)&v69);
  if (v70) {
    uint64_t v58 = v69;
  }
  else {
    uint64_t v58 = &unk_2140A1FA0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v54, v55, v56, v57, v20, &unk_2140A1FA0, v21, v21, v58, v45, v51, v53);
  DgnString::~DgnString((DgnString *)&v69);
  *a4 += v45;
  *a5 += v51;
  *a6 += v53;
  unint64_t v67 = 0;
  unint64_t v68 = 0;
  unint64_t v66 = 0;
  DgnThreadWorker::printSize(this, v48, v20, &v68, &v66, &v67);
  *a4 += v68;
  *a5 += v66;
  *a6 += v67;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 1108, (DgnString *)&v69);
  if (v70) {
    int v63 = v69;
  }
  else {
    int v63 = &unk_2140A1FA0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v59, v60, v61, v62, v64, &unk_2140A1FA0, (35 - v64), (35 - v64), v63, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v69);
}

void sub_213EC7DC4(_Unwind_Exception *a1)
{
  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

unint64_t FrameTransformerThread::stopScoring(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  DgnThreadClient::pause((DgnThreadClient *)a1, a2, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 16DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 56) + 264) + 32))(*(void *)(*(void *)(a1 + 56) + 264));
  unint64_t result = SynchronizedArray<DgnPrimArray<unsigned char>>::update(a2, *(void *)(*(void *)(a1 + 56) + 272));
  *(unsigned char *)(a1 + 16DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
  return result;
}

void FrameTransformerThread::printSize(FrameTransformerThread *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 1171, (DgnString *)&v95);
  if (v96) {
    uint64_t v16 = v95;
  }
  else {
    uint64_t v16 = &unk_2140A1FA0;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_2140A1FA0, a3, &unk_2140A1FA0, v16);
  int v91 = this;
  DgnString::~DgnString((DgnString *)&v95);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_2140A1FA0);
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v21 = 4;
  }
  else {
    uint64_t v21 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 1174, (DgnString *)&v95);
  if (v96) {
    uint64_t v26 = v95;
  }
  else {
    uint64_t v26 = &unk_2140A1FA0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v22, v23, v24, v25, (a3 + 1), &unk_2140A1FA0, (34 - a3), (34 - a3), v26, v21, v21, 0);
  DgnString::~DgnString((DgnString *)&v95);
  *a4 += v21;
  *a5 += v21;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v27 = 4;
  }
  else {
    uint64_t v27 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 1175, (DgnString *)&v95);
  if (v96) {
    unsigned int v32 = v95;
  }
  else {
    unsigned int v32 = &unk_2140A1FA0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_2140A1FA0, (34 - a3), (34 - a3), v32, v27, v27, 0);
  DgnString::~DgnString((DgnString *)&v95);
  *a4 += v27;
  *a5 += v27;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v33 = 4;
  }
  else {
    uint64_t v33 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 1176, (DgnString *)&v95);
  if (v96) {
    int v38 = v95;
  }
  else {
    int v38 = &unk_2140A1FA0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v34, v35, v36, v37, (a3 + 1), &unk_2140A1FA0, (34 - a3), (34 - a3), v38, v33, v33, 0);
  DgnString::~DgnString((DgnString *)&v95);
  *a4 += v33;
  *a5 += v33;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v39 = 4;
  }
  else {
    uint64_t v39 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 1177, (DgnString *)&v95);
  if (v96) {
    uint64_t v44 = v95;
  }
  else {
    uint64_t v44 = &unk_2140A1FA0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v40, v41, v42, v43, (a3 + 1), &unk_2140A1FA0, (34 - a3), (34 - a3), v44, v39, v39, 0);
  DgnString::~DgnString((DgnString *)&v95);
  *a4 += v39;
  *a5 += v39;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 1179, (DgnString *)&v95);
  if (v96) {
    BOOL v49 = v95;
  }
  else {
    BOOL v49 = &unk_2140A1FA0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v45, v46, v47, v48, (a3 + 1), &unk_2140A1FA0, (34 - a3), (34 - a3), v49, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v95);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 1181, (DgnString *)&v95);
  if (v96) {
    uint64_t v54 = v95;
  }
  else {
    uint64_t v54 = &unk_2140A1FA0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v50, v51, v52, v53, (a3 + 1), &unk_2140A1FA0, (34 - a3), (34 - a3), v54, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v95);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 1183, (DgnString *)&v95);
  if (v96) {
    uint64_t v59 = v95;
  }
  else {
    uint64_t v59 = &unk_2140A1FA0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v55, v56, v57, v58, (a3 + 1), &unk_2140A1FA0, (34 - a3), (34 - a3), v59, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v95);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 1184, (DgnString *)&v95);
  if (v96) {
    uint64_t v64 = v95;
  }
  else {
    uint64_t v64 = &unk_2140A1FA0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v60, v61, v62, v63, (a3 + 1), &unk_2140A1FA0, (34 - a3), (34 - a3), v64, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v95);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 1186, (DgnString *)&v95);
  if (v96) {
    unsigned int v69 = v95;
  }
  else {
    unsigned int v69 = &unk_2140A1FA0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v65, v66, v67, v68, (a3 + 1), &unk_2140A1FA0, (34 - a3), (34 - a3), v69, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v95);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 1188, (DgnString *)&v95);
  if (v96) {
    uint64_t v74 = v95;
  }
  else {
    uint64_t v74 = &unk_2140A1FA0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v70, v71, v72, v73, (a3 + 1), &unk_2140A1FA0, (34 - a3), (34 - a3), v74, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v95);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 1190, (DgnString *)&v95);
  if (v96) {
    uint64_t v79 = v95;
  }
  else {
    uint64_t v79 = &unk_2140A1FA0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v75, v76, v77, v78, (a3 + 1), &unk_2140A1FA0, (34 - a3), (34 - a3), v79, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v95);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v80 = 4;
  }
  else {
    uint64_t v80 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 1191, (DgnString *)&v95);
  if (v96) {
    uint64_t v85 = v95;
  }
  else {
    uint64_t v85 = &unk_2140A1FA0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v81, v82, v83, v84, (a3 + 1), &unk_2140A1FA0, (34 - a3), (34 - a3), v85, v80, v80, 0);
  DgnString::~DgnString((DgnString *)&v95);
  *a4 += v80;
  *a5 += v80;
  unint64_t v93 = 0;
  unint64_t v94 = 0;
  unint64_t v92 = 0;
  DgnThreadClient::printSize(v91, a2, (a3 + 1), &v94, &v92, &v93);
  *a4 += v94;
  *a5 += v92;
  *a6 += v93;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 1200, (DgnString *)&v95);
  if (v96) {
    int v90 = v95;
  }
  else {
    int v90 = &unk_2140A1FA0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v86, v87, v88, v89, a3, &unk_2140A1FA0, (35 - a3), (35 - a3), v90, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v95);
}

void sub_213EC8504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void *ThreadedFrameTransformer::ThreadedFrameTransformer(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, double a9, double a10, char a11)
{
  *a1 = &unk_26C4E3B30;
  uint64_t v21 = MemChunkAlloc(0x680uLL, 0);
  uint64_t v22 = DgnThread<FrameTransformerThreadWorker>::DgnThread((uint64_t)v21, a2, 0, "FrameTransformer");
  *(void *)uint64_t v22 = &unk_26C4E30C0;
  *(void *)(v22 + 1576) = a3;
  *(void *)(v22 + 1584) = a4;
  *(void *)(v22 + 1592) = a5;
  *(void *)(v22 + 1600) = a6;
  *(void *)(v22 + 1608) = a7;
  *(unsigned char *)(v22 + 16DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
  *(_DWORD *)(v22 + 1620) = a8;
  *(double *)(v22 + 16DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = a9;
  *(unsigned char *)(v22 + 16DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = a11;
  *(double *)(v22 + 16DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = a10;
  *(void *)(v22 + 16DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = 0xFFFFFFF000000000;
  *(void *)(v22 + 16DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = 0;
  a1[1] = v22;
  DgnThreadClient::startup((DgnThreadClient *)v22);
  return a1;
}

void ThreadedFrameTransformer::~ThreadedFrameTransformer(DgnThreadClient **this)
{
  *this = (DgnThreadClient *)&unk_26C4E3B30;
  if (DgnThreadClient::isLive(this[1]) && !DgnThreadClient::hasErrored(this[1])) {
    DgnThreadClient::shutdown(this[1], v2, v3, v4, v5, v6, v7, v8);
  }
  DgnDelete<FrameTransformerThread>((void (***)(void))this[1]);
}

{
  uint64_t vars8;

  ThreadedFrameTransformer::~ThreadedFrameTransformer(this);

  JUMPOUT(0x216698730);
}

void (***DgnDelete<FrameTransformerThread>(void (***result)(void)))(void)
{
  if (result)
  {
    uint64_t v1 = result;
    (**result)(result);
    return (void (***)(void))MemChunkFree(v1, 0);
  }
  return result;
}

void ThreadedFrameTransformer::printSize(ThreadedFrameTransformer *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 1246, (DgnString *)&v31);
  if (v32) {
    uint64_t v15 = v31;
  }
  else {
    uint64_t v15 = &unk_2140A1FA0;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v11, v12, v13, v14, a3, &unk_2140A1FA0, a3, &unk_2140A1FA0, v15);
  DgnString::~DgnString((DgnString *)&v31);
  if (a2 != -1) {
    xlprintf("%d ", v16, v17, v18, v19, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v16, v17, v18, v19, a3, &unk_2140A1FA0);
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v20 = 4;
  }
  else {
    uint64_t v20 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 1248, (DgnString *)&v31);
  if (v32) {
    uint64_t v25 = v31;
  }
  else {
    uint64_t v25 = &unk_2140A1FA0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v21, v22, v23, v24, (a3 + 1), &unk_2140A1FA0, (34 - a3), (34 - a3), v25, v20, v20, 0);
  DgnString::~DgnString((DgnString *)&v31);
  *a4 += v20;
  *a5 += v20;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/frmtrans.cpp", 1251, (DgnString *)&v31);
  if (v32) {
    uint64_t v30 = v31;
  }
  else {
    uint64_t v30 = &unk_2140A1FA0;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v26, v27, v28, v29, a3, &unk_2140A1FA0, (35 - a3), (35 - a3), v30, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v31);
}

void sub_213EC8914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t ThreadedFrameTransformer::reset(ThreadedFrameTransformer *this)
{
  uint64_t v1 = *((void *)this + 1);
  uint64_t result = FrameTransformerThreadWorker::reset(*(FrameTransformerThreadWorker **)(v1 + 56));
  *(_DWORD *)(v1 + 16DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = 0;
  return result;
}

uint64_t ThreadedFrameTransformer::getNextFrameTime(ThreadedFrameTransformer *this)
{
  return *(unsigned int *)(*((void *)this + 1) + 1648);
}

uint64_t ThreadedFrameTransformer::getPreDecimatedEquivalent(ThreadedFrameTransformer *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(*((void *)this + 1) + 56) + 264) + 40))();
}

uint64_t ThreadedFrameTransformer::getPreDecimatedEquivalentWithoutWindow(ThreadedFrameTransformer *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(*((void *)this + 1) + 56) + 264) + 48))();
}

uint64_t ThreadedFrameTransformer::getRecogEquivalent(ThreadedFrameTransformer *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(*((void *)this + 1) + 56) + 264) + 56))();
}

unint64_t ThreadedFrameTransformer::transformFramesUntil(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)(a4 + 16) <= (int)a2 && !*(unsigned char *)a4)
  {
    uint64_t v9 = *(void *)(result + 8);
    *(unsigned char *)(v9 + 16DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 1;
    *(_DWORD *)(v9 + 1652) = a2;
    *(void *)(v9 + 16DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = a3;
    DgnThreadClient::playAllUntilWorkerPauses((DgnThreadClient *)v9, a2, a3, a4, a5, a6, a7, a8);
    *(void *)(v9 + 16DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = 0;
    *(_DWORD *)(v9 + 1652) = -16;
    return FrameTransformerThread::stopScoring(v9, a4, v10, v11, v12, v13, v14, v15);
  }
  return result;
}

BOOL ThreadedFrameTransformer::maybeStartTransforming(uint64_t a1, uint64_t a2)
{
  BOOL isScoring = FrameTransformerThread::isScoring(*(FrameTransformerThread **)(a1 + 8));
  uint64_t v12 = *(void *)(a1 + 8);
  if (!isScoring && !**(unsigned char **)(*(void *)(v12 + 56) + 272))
  {
    *(void *)(v12 + 16DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = a2;
    DgnThreadClient::play((DgnThreadClient *)v12, v5, v6, v7, v8, v9, v10, v11);
    *(unsigned char *)(v12 + 16DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 1;
    *(void *)(v12 + 16DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = 0;
    uint64_t v12 = *(void *)(a1 + 8);
  }

  return FrameTransformerThread::isScoring((FrameTransformerThread *)v12);
}

BOOL FrameTransformerThread::isScoring(FrameTransformerThread *this)
{
  if (!*((unsigned char *)this + 1616)) {
    return 0;
  }
  BOOL result = DgnThreadClient::isLive(this);
  if (result) {
    return !DgnThreadClient::hasErrored(this);
  }
  return result;
}

unint64_t ThreadedFrameTransformer::maybeStopTransforming(uint64_t a1, int a2, unint64_t a3)
{
  unint64_t result = FrameTransformerThread::isScoring(*(FrameTransformerThread **)(a1 + 8));
  if (result)
  {
    if (!a2 || (unint64_t result = DgnThreadClient::getThreadState(*(DgnThreadClient **)(a1 + 8)), result == 4))
    {
      uint64_t v13 = *(void *)(a1 + 8);
      return FrameTransformerThread::stopScoring(v13, a3, v7, v8, v9, v10, v11, v12);
    }
  }
  return result;
}

uint64_t ThreadedFrameTransformer::getHalfWindowSize(ThreadedFrameTransformer *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(*((void *)this + 1) + 56) + 264) + 112))();
}

uint64_t ThreadedFrameTransformer::getThreadId(ThreadedFrameTransformer *this)
{
  return *(unsigned int *)(*((void *)this + 1) + 28);
}

void *FrameTransformer::makeFrameTransformer(uint64_t a1, NeuralNet *a2, uint64_t a3, uint64_t a4, const PelMgr *a5, int a6, uint64_t a7, uint64_t a8, double a9, double a10)
{
  if (a6)
  {
    uint64_t v20 = MemChunkAlloc(0x10uLL, 0);
    return ThreadedFrameTransformer::ThreadedFrameTransformer(v20, a6, a1, (uint64_t)a2, a3, a4, (uint64_t)a5, a7, a9, a10, a8);
  }
  else
  {
    uint64_t v22 = MemChunkAlloc(0xF0uLL, 0);
    return (void *)SimpleFrameTransformer::SimpleFrameTransformer((uint64_t)v22, a1, a2, a3, a4, a5, a7, a8, a9, a10);
  }
}

void SimpleFrameTransformer::beginTransSyncRecog(SimpleFrameTransformer *this)
{
  uint64_t v1 = (PelScorer *)*((void *)this + 6);
  if (v1) {
    PelScorer::beginFmpePelSyncRecog(v1);
  }
}

PelScorer *SimpleFrameTransformer::endTransSyncRecog(SimpleFrameTransformer *this)
{
  unint64_t result = (PelScorer *)*((void *)this + 6);
  if (result) {
    return (PelScorer *)PelScorer::endFmpePelSyncRecog(result);
  }
  return result;
}

uint64_t SimpleFrameTransformer::maybeStartTransforming()
{
  return 0;
}

uint64_t SimpleFrameTransformer::getHalfWindowSize(SimpleFrameTransformer *this)
{
  return *((_DWORD *)this + 24) >> 1;
}

uint64_t FrameTransformer::getThreadId(FrameTransformer *this)
{
  return 0xFFFFFFFFLL;
}

void FrameTransformerThread::~FrameTransformerThread(FrameTransformerThread *this)
{
  DgnThreadClient::~DgnThreadClient(this);

  JUMPOUT(0x216698730);
}

uint64_t *DgnThread<FrameTransformerThreadWorker>::newWorker(uint64_t a1)
{
  Latch<MemChunkRegion,LatchAdapter>::Latch(&v4, *(void *)(a1 + 16));
  uint64_t v2 = MemChunkAlloc(0x130uLL, *(MemChunkRegion **)(a1 + 16));
  DgnThreadWorker::DgnThreadWorker((uint64_t)v2, *(_DWORD *)(a1 + 12), a1, *(void *)(a1 + 16), *(_DWORD *)(a1 + 28));
  *uint64_t v2 = (uint64_t)&unk_26C4E3F30;
  *((_DWORD *)v2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = -16;
  v2[37] = 0;
  *(_OWORD *)(v2 + 33) = 0u;
  *(_OWORD *)(v2 + 35) = 0u;
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)&v4);
  return v2;
}

void sub_213EC8DF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t AbstractObserver::canNotify(AbstractObserver *this)
{
  return 0;
}

uint64_t AbstractObserver::canBeNotified(AbstractObserver *this)
{
  return 1;
}

uint64_t DgnThread<FrameTransformerThreadWorker>::DgnThread(uint64_t a1, int a2, uint64_t a3, char *a4)
{
  uint64_t v5 = (void *)DgnThreadClient::DgnThreadClient(a1, a2, a3, a4);
  *uint64_t v5 = &unk_26C4E54D0;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = DgnThread<FrameTransformerThreadWorker>::newWorker((uint64_t)v5);
  return a1;
}

void sub_213EC8E70(_Unwind_Exception *a1)
{
  DgnThreadClient::~DgnThreadClient(v1);
  _Unwind_Resume(a1);
}

void DgnThread<FrameTransformerThreadWorker>::~DgnThread(DgnThreadClient *a1)
{
  DgnThreadClient::~DgnThreadClient(a1);

  JUMPOUT(0x216698730);
}

void *Latch<MemChunkRegion,LatchAdapter>::Latch(void *a1, uint64_t a2)
{
  *a1 = a2;
  if (MemChunkRegion::smTlsID == -1)
  {
    uint64_t v5 = &gGlobalMemChunkRegion;
    goto LABEL_7;
  }
  uint64_t v4 = (void **)pthread_getspecific(MemChunkRegion::smTlsID);
  if (!v4) {
    goto LABEL_5;
  }
  uint64_t v5 = *v4;
  if (!*v4)
  {
    pthread_setspecific(MemChunkRegion::smTlsID, 0);
LABEL_5:
    uint64_t v5 = &gGlobalMemChunkRegion;
  }
LABEL_7:
  if (v5 != (void *)a2 && (a2 || v5 != &gGlobalMemChunkRegion))
  {
    if (!a2 || (_UNKNOWN *)a2 == &gGlobalMemChunkRegion)
    {
      pthread_key_t v7 = MemChunkRegion::smTlsID;
      uint64_t v6 = 0;
    }
    else
    {
      uint64_t v6 = (const void *)(a2 + 1288);
      *(void *)(a2 + 1288) = a2;
      pthread_key_t v7 = MemChunkRegion::smTlsID;
    }
    pthread_setspecific(v7, v6);
  }
  *a1 = v5;
  return a1;
}

uint64_t Latch<MemChunkRegion,LatchAdapter>::release(uint64_t result)
{
  uint64_t v1 = *(void **)result;
  if (!*(void *)result) {
    return result;
  }
  uint64_t v2 = (void *)result;
  unint64_t result = MemChunkRegion::smTlsID;
  if (MemChunkRegion::smTlsID == -1)
  {
    uint64_t v3 = &gGlobalMemChunkRegion;
    goto LABEL_8;
  }
  unint64_t result = (uint64_t)pthread_getspecific(MemChunkRegion::smTlsID);
  if (!result) {
    goto LABEL_6;
  }
  uint64_t v3 = *(void **)result;
  if (!*(void *)result)
  {
    unint64_t result = pthread_setspecific(MemChunkRegion::smTlsID, 0);
LABEL_6:
    uint64_t v3 = &gGlobalMemChunkRegion;
  }
LABEL_8:
  if (v3 != v1)
  {
    if (v1 == (void *)&gGlobalMemChunkRegion)
    {
      pthread_key_t v5 = MemChunkRegion::smTlsID;
      uint64_t v4 = 0;
    }
    else
    {
      uint64_t v4 = v1 + 161;
      v1[161] = v1;
      pthread_key_t v5 = MemChunkRegion::smTlsID;
    }
    unint64_t result = pthread_setspecific(v5, v4);
  }
  *uint64_t v2 = 0;
  return result;
}

uint64_t MovingArrayWindow<DgnPrimArray<unsigned char>,DgnArray<DgnPrimArray<unsigned char>>>::~MovingArrayWindow(uint64_t a1)
{
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(a1);
  return a1;
}

uint64_t MovingArrayWindow<DgnPrimArray<double>,DgnArray<DgnPrimArray<double>>>::~MovingArrayWindow(uint64_t a1)
{
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(a1);
  return a1;
}

uint64_t *TResultRelativePosition::TResultRelativePosition(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a5 == -1)
  {
    result[1] = 0;
    result[2] = 0;
    *unint64_t result = (a4 - a3) >> 3;
  }
  else
  {
    result[1] = 0;
    result[2] = a5;
    unint64_t v5 = 0;
    if (a4 != a3)
    {
      unint64_t v6 = (a4 - a3) >> 3;
      if (v6 <= 1) {
        unint64_t v6 = 1;
      }
      while (a5)
      {
        unint64_t v7 = *(void *)(a3 + 8 * v5) - 1;
        uint64_t v8 = *(void *)(a2 + 40);
        if (v7 >= (*(void *)(a2 + 48) - v8) >> 3) {
          uint64_t v9 = 0;
        }
        else {
          uint64_t v9 = *(void **)(v8 + 8 * v7);
        }
        unint64_t v10 = v9[3];
        BOOL v11 = a5 >= v10;
        uint64_t v12 = a5 - v10;
        if (!v11)
        {
          uint64_t v13 = v9[13];
          uint64_t v14 = v9[14];
          *unint64_t result = v5;
          result[1] = 0;
          if (v14 != v13)
          {
            unint64_t v15 = 0;
            unint64_t v16 = (v14 - v13) >> 3;
            do
            {
              if (!a5) {
                break;
              }
              unint64_t v17 = *(void *)(v13 + 8 * v15);
              BOOL v11 = a5 >= v17;
              a5 -= v17;
              if (!v11) {
                break;
              }
              v15 += 2;
              result[1] = v15;
              result[2] = a5;
            }
            while (v15 < v16);
          }
          return result;
        }
        result[2] = v12;
        ++v5;
        a5 = v12;
        if (v6 == v5)
        {
          unint64_t v5 = v6;
          break;
        }
      }
    }
    *unint64_t result = v5;
  }
  return result;
}

void TResult::TResult(uint64_t a1, char *a2, void *a3, uint64_t a4, uint64_t a5, char a6, char a7)
{
  unint64_t v7 = a3;
  *(_OWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0u;
  uint64_t v25 = (std::vector<std::wstring> *)(a1 + 32);
  *(_OWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = 0u;
  *(_OWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = 0u;
  *(_OWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 112) = 0u;
  *(_OWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = 0u;
  *(_OWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = 0u;
  *(unsigned char *)a1 = a6;
  *(unsigned char *)(a1 + 1) = a7;
  *(void *)(a1 + 8) = a5;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
  std::vector<std::wstring>::reserve((std::vector<std::wstring> *)(a1 + 32), (uint64_t)(a3[1] - *a3) >> 3);
  uint64_t v10 = *v7;
  uint64_t v24 = v7;
  if (v7[1] != *v7)
  {
    unint64_t v11 = 0;
    do
    {
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v27, *(__int32 **)(v10 + 8 * v11));
      unint64_t v13 = *(void *)(a1 + 40);
      unint64_t v12 = *(void *)(a1 + 48);
      if (v13 >= v12)
      {
        unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (unint64_t)v25->__begin_) >> 3);
        unint64_t v16 = v15 + 1;
        if (v15 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (unint64_t)v25->__begin_) >> 3);
        if (2 * v17 > v16) {
          unint64_t v16 = 2 * v17;
        }
        if (v17 >= 0x555555555555555) {
          unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v18 = v16;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::wstring> *)(a1 + 48);
        if (v18) {
          uint64_t v19 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>(a1 + 48, v18);
        }
        else {
          uint64_t v19 = 0;
        }
        uint64_t v20 = v19 + v15;
        __v.__first_ = v19;
        __v.__begin_ = v20;
        __v.__end_cap_.__value_ = &v19[v18];
        long long v21 = v27;
        v20->__r_.__value_.__r.__words[2] = v28;
        *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
        std::wstring::size_type v28 = 0;
        long long v27 = 0uLL;
        __v.__end_ = v20 + 1;
        std::vector<std::wstring>::__swap_out_circular_buffer(v25, &__v);
        uint64_t v22 = *(void *)(a1 + 40);
        std::__split_buffer<std::wstring>::~__split_buffer((std::__split_buffer<std::string> *)&__v);
        int v23 = SHIBYTE(v28);
        *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = v22;
        unint64_t v7 = v24;
        if (v23 < 0) {
          operator delete((void *)v27);
        }
      }
      else
      {
        long long v14 = v27;
        *(void *)(v13 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v28;
        *(_OWORD *)unint64_t v13 = v14;
        *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = v13 + 24;
      }
      ++v11;
      uint64_t v10 = *v7;
    }
    while (v11 < (uint64_t)(v7[1] - *v7) >> 3);
  }
  TResult::setText(a1, a2);
}

void sub_213EC9650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, std::__split_buffer<std::string> *a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, void **a14)
{
  MEMORY[0x216698730](a10, 0x1070C40ADD13FEBLL, a3, a4, a5, a6, a7);
  unint64_t v17 = (void *)v14[13];
  if (v17)
  {
    v14[14] = v17;
    operator delete(v17);
  }
  unint64_t v18 = *a11;
  if (*a11)
  {
    v14[11] = v18;
    operator delete(v18);
  }
  uint64_t v19 = *a14;
  if (*a14)
  {
    v14[8] = v19;
    operator delete(v19);
  }
  *(void *)(v15 - DgnArray<LinearTransform>::releaseAll((uint64_t)this + 104) = a13;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)(v15 - 104));
  _Unwind_Resume(a1);
}

void std::vector<std::wstring>::reserve(std::vector<std::wstring> *this, std::vector<std::wstring>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3) < __n)
  {
    if (__n >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (char *)this->__end_ - (char *)this->__begin_;
    __v.__end_cap_.__value_ = (std::allocator<std::wstring> *)p_end_cap;
    __v.__first_ = (std::__split_buffer<std::wstring>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)p_end_cap, __n);
    __v.__begin_ = (std::__split_buffer<std::wstring>::pointer)((char *)__v.__first_ + v5);
    __v.__end_ = (std::__split_buffer<std::wstring>::pointer)((char *)__v.__first_ + v5);
    __v.__end_cap_.__value_ = &__v.__first_[v6];
    std::vector<std::wstring>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::wstring>::~__split_buffer((std::__split_buffer<std::string> *)&__v);
  }
}

void sub_213EC97C4(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void TResult::setText(uint64_t a1, char *__s)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3) {
    MEMORY[0x216698710](v3, 0x1000C8077774924);
  }
  strlen(__s);
  operator new[]();
}

void std::vector<TItnControlState>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 6)
  {
    if (a2 >> 58) {
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TItnControlState>>(v3, a2);
    unint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFC0];
    uint64_t v9 = &v6[64 * v8];
    unint64_t v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *((_OWORD *)v10 - 4);
        long long v14 = *((_OWORD *)v10 - 3);
        long long v15 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v15;
        *((_OWORD *)v12 - 4) = v13;
        *((_OWORD *)v12 - 3) = v14;
        v12 -= 64;
        v10 -= 64;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void TResult::TResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, char a8, char a9)
{
  *(_OWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0u;
  uint64_t v46 = (std::vector<std::wstring> *)(a1 + 32);
  uint64_t v47 = (void **)(a1 + 56);
  *(_OWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = 0u;
  uint64_t v45 = (void **)(a1 + 80);
  *(unsigned char *)a1 = 0;
  *(_OWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = 0u;
  *(_OWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = 0u;
  *(_OWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = 0u;
  *(_OWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 112) = 0u;
  *(unsigned char *)(a1 + 1) = a8;
  if (a9) {
    uint64_t v13 = 3;
  }
  else {
    uint64_t v13 = 1;
  }
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = v13 * a4;
  *(void *)(a1 + 8) = a6;
  uint64_t v14 = a4 != 0;
  if (a2) {
    BOOL v15 = a2 == a3;
  }
  else {
    BOOL v15 = 1;
  }
  std::vector<std::wstring>::size_type v16 = 0;
  if (!v15)
  {
    uint64_t v17 = a2;
    do
    {
      unint64_t v18 = (unsigned int *)(v17 + 72);
      if (*(char *)(v17 + 95) < 0) {
        unint64_t v18 = *(unsigned int **)v18;
      }
      *(void *)(a1 + 24) += (int)(TLocaleInfo::unicodeToMultiByte(*(void *)(a1 + 8) + 240, v18, 0, 0) - 1)
                            + *(void *)(v17 + 224) * v13;
      uint64_t v19 = *(void *)(v17 + 16);
      if (v19 != -1) {
        ++v14;
      }
      uint64_t v17 = *(void *)(v17 + 144);
      if (!v17 || v17 == a3) {
        std::vector<std::wstring>::size_type v16 = v19 - *(void *)(a2 + 8);
      }
    }
    while (v17 && v17 != a3);
  }
  std::vector<std::wstring>::reserve(v46, v16);
  std::vector<TItnControlState>::reserve(v47, v16 + 1);
  std::vector<unsigned long>::reserve(v45, v16);
  if (v16)
  {
    for (uint64_t i = 0; i != v16; ++i)
    {
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v49, **(__int32 ***)(*a5 + 112 * (*(void *)(a2 + 8) + i) + 16));
      unint64_t v22 = *(void *)(a1 + 40);
      unint64_t v21 = *(void *)(a1 + 48);
      if (v22 >= v21)
      {
        unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - (unint64_t)v46->__begin_) >> 3);
        unint64_t v25 = v24 + 1;
        if (v24 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - (unint64_t)v46->__begin_) >> 3);
        if (2 * v26 > v25) {
          unint64_t v25 = 2 * v26;
        }
        if (v26 >= 0x555555555555555) {
          unint64_t v27 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v27 = v25;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::wstring> *)(a1 + 48);
        if (v27) {
          std::wstring::size_type v28 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>(a1 + 48, v27);
        }
        else {
          std::wstring::size_type v28 = 0;
        }
        uint64_t v29 = v28 + v24;
        __v.__first_ = v28;
        __v.__begin_ = v29;
        __v.__end_cap_.__value_ = &v28[v27];
        long long v30 = v49;
        v29->__r_.__value_.__r.__words[2] = v50;
        *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v30;
        std::wstring::size_type v50 = 0;
        long long v49 = 0uLL;
        __v.__end_ = v29 + 1;
        std::vector<std::wstring>::__swap_out_circular_buffer(v46, &__v);
        uint64_t v31 = *(void *)(a1 + 40);
        std::__split_buffer<std::wstring>::~__split_buffer((std::__split_buffer<std::string> *)&__v);
        int v32 = SHIBYTE(v50);
        *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = v31;
        if (v32 < 0) {
          operator delete((void *)v49);
        }
      }
      else
      {
        long long v23 = v49;
        *(void *)(v22 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v50;
        *(_OWORD *)unint64_t v22 = v23;
        *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = v22 + 24;
      }
      uint64_t v33 = *(void *)(*a5 + 112 * (*(void *)(a2 + 8) + i) + 24);
      uint64_t v35 = *(char **)(a1 + 88);
      unint64_t v34 = *(void *)(a1 + 96);
      if ((unint64_t)v35 >= v34)
      {
        uint64_t v37 = (char *)*v45;
        uint64_t v38 = (v35 - (unsigned char *)*v45) >> 3;
        unint64_t v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 61) {
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v40 = v34 - (void)v37;
        if (v40 >> 2 > v39) {
          unint64_t v39 = v40 >> 2;
        }
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v41 = v39;
        }
        if (v41)
        {
          uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(a1 + 96, v41);
          uint64_t v37 = *(char **)(a1 + 80);
          uint64_t v35 = *(char **)(a1 + 88);
        }
        else
        {
          uint64_t v42 = 0;
        }
        uint64_t v43 = &v42[8 * v38];
        *(void *)uint64_t v43 = v33;
        uint64_t v36 = v43 + 8;
        while (v35 != v37)
        {
          uint64_t v44 = *((void *)v35 - 1);
          v35 -= 8;
          *((void *)v43 - 1) = v44;
          v43 -= 8;
        }
        *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = v43;
        *(void *)(a1 + 88) = v36;
        *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = &v42[8 * v41];
        if (v37) {
          operator delete(v37);
        }
      }
      else
      {
        *(void *)uint64_t v35 = v33;
        uint64_t v36 = v35 + 8;
      }
      *(void *)(a1 + 88) = v36;
    }
  }
  operator new[]();
}

void sub_213ECA59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__split_buffer<std::string> *a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  long long v23 = *a16;
  if (*a16)
  {
    v20[14] = v23;
    operator delete(v23);
  }
  std::__split_buffer<std::string>::pointer first = a13->__first_;
  if (a13->__first_)
  {
    v20[11] = first;
    operator delete(first);
  }
  unint64_t v25 = *a20;
  if (*a20)
  {
    v20[8] = v25;
    operator delete(v25);
  }
  *(void *)(v21 - DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 112) = a18;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 112));
  _Unwind_Resume(a1);
}

void std::vector<unsigned long>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(v3, a2);
    unint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v9 = &v6[8 * v8];
    uint64_t v10 = (char *)*a1;
    unint64_t v11 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v11 != *a1)
    {
      unint64_t v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void TResult::TResult(TResult *this, const TResult *a2, const TResult *a3)
{
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  if (*(unsigned char *)a2) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = *(unsigned char *)a3 != 0;
  }
  *(unsigned char *)this = v3;
  *((unsigned char *)this + 1) = *((unsigned char *)a2 + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)this + 3) = *((void *)a3 + 3) + *((void *)a2 + 3);
  operator new[]();
}

void sub_213ECA9A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  unint64_t v7 = *v5;
  if (*v5)
  {
    v2[14] = v7;
    operator delete(v7);
  }
  uint64_t v8 = *v3;
  if (*v3)
  {
    v2[11] = v8;
    operator delete(v8);
  }
  uint64_t v9 = *v4;
  if (*v4)
  {
    v2[8] = v9;
    operator delete(v9);
  }
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void TResult::TResult(TResult *this, const TResult *a2, unint64_t a3, unint64_t a4)
{
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *(_WORD *)this = *(_WORD *)a2;
  uint64_t v4 = *((void *)a2 + 1);
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 1) = v4;
  uint64_t v5 = *((void *)a2 + 13);
  if ((*((void *)a2 + 14) - v5) >> 3 >= a4) {
    unint64_t v6 = a4;
  }
  else {
    unint64_t v6 = (*((void *)a2 + 14) - v5) >> 3;
  }
  if (a3)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    for (unint64_t i = 0; i < a3; i += 2)
    {
      uint64_t v10 = (void *)(v5 + 8 * i);
      v7 += *v10;
      v8 += v10[1];
    }
  }
  if (v6 > a3)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    unint64_t v13 = a3;
    do
    {
      uint64_t v14 = (void *)(v5 + 8 * v13);
      v11 += *v14;
      v12 += v14[1];
      v13 += 2;
    }
    while (v13 < v6);
  }
  operator new[]();
}

void sub_213ECAD34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, void **a11, void **a12)
{
  BOOL v15 = *a10;
  if (*a10)
  {
    v12[14] = v15;
    operator delete(v15);
  }
  std::vector<std::wstring>::size_type v16 = *v13;
  if (*v13)
  {
    v12[11] = v16;
    operator delete(v16);
  }
  uint64_t v17 = *a11;
  if (*a11)
  {
    v12[8] = v17;
    operator delete(v17);
  }
  a12 = a9;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void TResult::TResult(TResult *this, const char *__s1, unint64_t a3, TLexicon *a4, uint64_t a5)
{
  uint64_t v130 = *MEMORY[0x263EF8340];
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *(_WORD *)this = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((void *)this + 1) = a4;
  uint64_t v6 = SERIALIZE_NAME;
  if (a3 > 0x1B)
  {
    if (!strcmp(__s1, (const char *)SERIALIZE_NAME))
    {
      uint64_t v121 = __s1;
      int v14 = *((_DWORD *)__s1 + 4);
      if ((v14 - 5) > 0xFFFFFFFB)
      {
        if (v14 == 4)
        {
          if (a3 > 0x1F)
          {
            if (*((_DWORD *)__s1 + 5) == a3)
            {
              int v15 = *((_DWORD *)__s1 + 6);
              int v16 = *((_DWORD *)a4 + 76);
              BOOL v18 = (v15 & 4) == 0 && v16 == 2;
              if ((v15 & 4) == 0 || v16 == 2)
              {
                TLocaleInfo::TLocaleInfo((uint64_t)v126, *((const __int32 **)a4 + 30), *((void *)a4 + 31), 1, *((void *)a4 + 39));
                if (v18) {
                  long long v23 = v126;
                }
                else {
                  long long v23 = (unsigned char *)(*((void *)this + 1) + 240);
                }
                char v38 = v121[24];
                *(unsigned char *)this = v38 & 1;
                *((unsigned char *)this + 1) = (v38 & 2) != 0;
                uint64_t v39 = *((unsigned int *)v121 + 5);
                if (&v121[v39] >= v121 + 32)
                {
                  unint64_t v40 = v39 - 32;
                  if (v40 > 7)
                  {
                    if (v40 >= *((unsigned int *)v121 + 8))
                    {
                      if (v18)
                      {
                        *(void *)uint64_t v123 = &v124;
                        *(_OWORD *)&v123[8] = xmmword_214085190;
                        char v125 = 1;
                        *(void *)__src = &v128;
                        *(_OWORD *)&__src[8] = xmmword_214085190;
                        char v129 = 1;
                        TLocaleInfo::multiByteToUnicode((uint64_t)v23, (unsigned __int8 *)v121 + 40, (uint64_t)v123);
                        uint64_t v41 = *((void *)this + 1);
                        if (*(void *)&v123[16] >= *(void *)&v123[8])
                        {
                          if (v125)
                          {
                            v122[0] = 0;
                            TBuffer<wchar_t>::insert((uint64_t)v123, *(unint64_t *)&v123[16], v122, 1uLL);
                            uint64_t v42 = *(unsigned int **)v123;
                            --*(void *)&v123[16];
                          }
                          else
                          {
                            uint64_t v42 = *(unsigned int **)v123;
                            if (*(void *)&v123[8]) {
                              *(_DWORD *)(*(void *)v123 + 4 * *(void *)&v123[8] - 4) = 0;
                            }
                          }
                        }
                        else
                        {
                          uint64_t v42 = *(unsigned int **)v123;
                          *(_DWORD *)(*(void *)v123 + 4 * *(void *)&v123[16]) = 0;
                        }
                        TLocaleInfo::unicodeToMultiByte(v41 + 240, v42, (uint64_t)__src);
                        *((void *)this + 3) = *(void *)&__src[16];
                        operator new[]();
                      }
                      *((void *)this + 3) = *((unsigned int *)v121 + 9);
                      operator new[]();
                    }
                    tknPrintf("Error: Serialization buffer too small to hold text data\n", v19, v20, v21, v22);
                    std::string::basic_string[abi:ne180100]<0>(__src, &byte_2140B33BB);
                    *(void *)uint64_t v123 = byte_26C4DF190;
                    if ((__src[23] & 0x80000000) != 0)
                    {
                      std::string::__init_copy_ctor_external((std::string *)&v123[8], *(const std::string::value_type **)__src, *(std::string::size_type *)&__src[8]);
                    }
                    else
                    {
                      *(_OWORD *)&v123[8] = *(_OWORD *)__src;
                      uint64_t v124 = *(void *)&__src[16];
                    }
                    *(void *)uint64_t v123 = &unk_26C4E0710;
                    if (v124 >= 0) {
                      unsigned int v105 = &v123[8];
                    }
                    else {
                      unsigned int v105 = *(const char **)&v123[8];
                    }
                    conditionalAssert(v105, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/resultmgr.cpp", 1233, v67, v68);
                    *(void *)uint64_t v123 = byte_26C4DF190;
                    if (SHIBYTE(v124) < 0) {
                      operator delete(*(void **)&v123[8]);
                    }
                    if ((__src[23] & 0x80000000) != 0) {
                      operator delete(*(void **)__src);
                    }
                    exception = __cxa_allocate_exception(0x20uLL);
                    std::string::basic_string[abi:ne180100]<0>(v123, &byte_2140B33BB);
                    void *exception = byte_26C4DF190;
                    uint64_t v107 = (std::string *)(exception + 1);
                    if ((v123[23] & 0x80000000) != 0)
                    {
                      std::string::__init_copy_ctor_external(v107, *(const std::string::value_type **)v123, *(std::string::size_type *)&v123[8]);
                    }
                    else
                    {
                      long long v120 = *(_OWORD *)v123;
                      exception[3] = *(void *)&v123[16];
                      *(_OWORD *)&v107->__r_.__value_.__l.__data_ = v120;
                    }
                    void *exception = &unk_26C4E0710;
                  }
                }
                tknPrintf("Error: Serialization buffer too small to hold text data\n", v19, v20, v21, v22);
                std::string::basic_string[abi:ne180100]<0>(__src, &byte_2140B33BB);
                *(void *)uint64_t v123 = byte_26C4DF190;
                if ((__src[23] & 0x80000000) != 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)&v123[8], *(const std::string::value_type **)__src, *(std::string::size_type *)&__src[8]);
                }
                else
                {
                  *(_OWORD *)&v123[8] = *(_OWORD *)__src;
                  uint64_t v124 = *(void *)&__src[16];
                }
                *(void *)uint64_t v123 = &unk_26C4E0710;
                if (v124 >= 0) {
                  uint64_t v81 = &v123[8];
                }
                else {
                  uint64_t v81 = *(const char **)&v123[8];
                }
                conditionalAssert(v81, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/resultmgr.cpp", 1226, v51, v52);
                *(void *)uint64_t v123 = byte_26C4DF190;
                if (SHIBYTE(v124) < 0) {
                  operator delete(*(void **)&v123[8]);
                }
                if ((__src[23] & 0x80000000) != 0) {
                  operator delete(*(void **)__src);
                }
                uint64_t v82 = __cxa_allocate_exception(0x20uLL);
                std::string::basic_string[abi:ne180100]<0>(v123, &byte_2140B33BB);
                void *v82 = byte_26C4DF190;
                uint64_t v83 = (std::string *)(v82 + 1);
                if ((v123[23] & 0x80000000) != 0)
                {
                  std::string::__init_copy_ctor_external(v83, *(const std::string::value_type **)v123, *(std::string::size_type *)&v123[8]);
                }
                else
                {
                  long long v112 = *(_OWORD *)v123;
                  v82[3] = *(void *)&v123[16];
                  *(_OWORD *)&v83->__r_.__value_.__l.__data_ = v112;
                }
                void *v82 = &unk_26C4E0710;
              }
              tknPrintf("Error: Encoding mismatch: deserializing UTF-8 result with non UTF-8 model\n", v10, v11, v12, v13);
              std::string::basic_string[abi:ne180100]<0>(__src, &byte_2140B33BB);
              *(void *)uint64_t v123 = byte_26C4DF190;
              if ((__src[23] & 0x80000000) != 0)
              {
                std::string::__init_copy_ctor_external((std::string *)&v123[8], *(const std::string::value_type **)__src, *(std::string::size_type *)&__src[8]);
              }
              else
              {
                *(_OWORD *)&v123[8] = *(_OWORD *)__src;
                uint64_t v124 = *(void *)&__src[16];
              }
              *(void *)uint64_t v123 = &unk_26C4E0710;
              if (v124 >= 0) {
                int v96 = &v123[8];
              }
              else {
                int v96 = *(const char **)&v123[8];
              }
              conditionalAssert(v96, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/resultmgr.cpp", 1196, v61, v62);
              *(void *)uint64_t v123 = byte_26C4DF190;
              if (SHIBYTE(v124) < 0) {
                operator delete(*(void **)&v123[8]);
              }
              if ((__src[23] & 0x80000000) != 0) {
                operator delete(*(void **)__src);
              }
              uint64_t v97 = __cxa_allocate_exception(0x20uLL);
              std::string::basic_string[abi:ne180100]<0>(v123, &byte_2140B33BB);
              *uint64_t v97 = byte_26C4DF190;
              uint64_t v98 = (std::string *)(v97 + 1);
              if ((v123[23] & 0x80000000) != 0)
              {
                std::string::__init_copy_ctor_external(v98, *(const std::string::value_type **)v123, *(std::string::size_type *)&v123[8]);
              }
              else
              {
                long long v117 = *(_OWORD *)v123;
                v97[3] = *(void *)&v123[16];
                *(_OWORD *)&v98->__r_.__value_.__l.__data_ = v117;
              }
              *uint64_t v97 = &unk_26C4E0710;
            }
            tknPrintf("Error: Buffer is corrupted, size mismatch\n", v10, v11, v12, v13);
            std::string::basic_string[abi:ne180100]<0>(__src, &byte_2140B33BB);
            *(void *)uint64_t v123 = byte_26C4DF190;
            if ((__src[23] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v123[8], *(const std::string::value_type **)__src, *(std::string::size_type *)&__src[8]);
            }
            else
            {
              *(_OWORD *)&v123[8] = *(_OWORD *)__src;
              uint64_t v124 = *(void *)&__src[16];
            }
            *(void *)uint64_t v123 = &unk_26C4E0710;
            if (v124 >= 0) {
              unint64_t v93 = &v123[8];
            }
            else {
              unint64_t v93 = *(const char **)&v123[8];
            }
            conditionalAssert(v93, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/resultmgr.cpp", 1187, v59, v60);
            *(void *)uint64_t v123 = byte_26C4DF190;
            if (SHIBYTE(v124) < 0) {
              operator delete(*(void **)&v123[8]);
            }
            if ((__src[23] & 0x80000000) != 0) {
              operator delete(*(void **)__src);
            }
            unint64_t v94 = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(v123, &byte_2140B33BB);
            *unint64_t v94 = byte_26C4DF190;
            uint64_t v95 = (std::string *)(v94 + 1);
            if ((v123[23] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external(v95, *(const std::string::value_type **)v123, *(std::string::size_type *)&v123[8]);
            }
            else
            {
              long long v116 = *(_OWORD *)v123;
              v94[3] = *(void *)&v123[16];
              *(_OWORD *)&v95->__r_.__value_.__l.__data_ = v116;
            }
            *unint64_t v94 = &unk_26C4E0710;
          }
          tknPrintf("Error: Serialization buffer too small to hold data of type %s\n", v10, v11, v12, v13, v6);
          std::string::basic_string[abi:ne180100]<0>(__src, &byte_2140B33BB);
          *(void *)uint64_t v123 = byte_26C4DF190;
          if ((__src[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v123[8], *(const std::string::value_type **)__src, *(std::string::size_type *)&__src[8]);
          }
          else
          {
            *(_OWORD *)&v123[8] = *(_OWORD *)__src;
            uint64_t v124 = *(void *)&__src[16];
          }
          *(void *)uint64_t v123 = &unk_26C4E0710;
          if (v124 >= 0) {
            uint64_t v84 = &v123[8];
          }
          else {
            uint64_t v84 = *(const char **)&v123[8];
          }
          conditionalAssert(v84, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/resultmgr.cpp", 1179, v53, v54);
          *(void *)uint64_t v123 = byte_26C4DF190;
          if (SHIBYTE(v124) < 0) {
            operator delete(*(void **)&v123[8]);
          }
          if ((__src[23] & 0x80000000) != 0) {
            operator delete(*(void **)__src);
          }
          uint64_t v85 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(v123, &byte_2140B33BB);
          *uint64_t v85 = byte_26C4DF190;
          uint64_t v86 = (std::string *)(v85 + 1);
          if ((v123[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v86, *(const std::string::value_type **)v123, *(std::string::size_type *)&v123[8]);
          }
          else
          {
            long long v113 = *(_OWORD *)v123;
            v85[3] = *(void *)&v123[16];
            *(_OWORD *)&v86->__r_.__value_.__l.__data_ = v113;
          }
          *uint64_t v85 = &unk_26C4E0710;
        }
        if (*((_DWORD *)__s1 + 5) == a3)
        {
          int v24 = *((_DWORD *)__s1 + 6);
          int v25 = *((_DWORD *)a4 + 76);
          BOOL v27 = (v24 & 0x100) == 0 && v25 == 2;
          if ((v24 & 0x100) == 0 || v25 == 2)
          {
            TLocaleInfo::TLocaleInfo((uint64_t)v126, *((const __int32 **)a4 + 30), *((void *)a4 + 31), 1, *((void *)a4 + 39));
            if (v27) {
              int v32 = v126;
            }
            else {
              int v32 = (unsigned char *)(*((void *)this + 1) + 240);
            }
            int v33 = *((_DWORD *)v121 + 6);
            *(unsigned char *)this = (v33 & 0x20) != 0;
            *((unsigned char *)this + 1) = (v33 & 0x40) != 0;
            if (v33)
            {
              uint64_t v34 = *((unsigned int *)v121 + 5);
              if (&v121[v34] >= v121 + 28)
              {
                unint64_t v35 = v34 - 28;
                if (v35 > 7)
                {
                  if (v35 >= *((unsigned int *)v121 + 7))
                  {
                    if (v27)
                    {
                      *(void *)uint64_t v123 = &v124;
                      *(_OWORD *)&v123[8] = xmmword_214085190;
                      char v125 = 1;
                      *(void *)__src = &v128;
                      *(_OWORD *)&__src[8] = xmmword_214085190;
                      char v129 = 1;
                      TLocaleInfo::multiByteToUnicode((uint64_t)v32, (unsigned __int8 *)v121 + 36, (uint64_t)v123);
                      uint64_t v36 = *((void *)this + 1);
                      if (*(void *)&v123[16] >= *(void *)&v123[8])
                      {
                        if (v125)
                        {
                          v122[0] = 0;
                          TBuffer<wchar_t>::insert((uint64_t)v123, *(unint64_t *)&v123[16], v122, 1uLL);
                          uint64_t v37 = *(unsigned int **)v123;
                          --*(void *)&v123[16];
                        }
                        else
                        {
                          uint64_t v37 = *(unsigned int **)v123;
                          if (*(void *)&v123[8]) {
                            *(_DWORD *)(*(void *)v123 + 4 * *(void *)&v123[8] - 4) = 0;
                          }
                        }
                      }
                      else
                      {
                        uint64_t v37 = *(unsigned int **)v123;
                        *(_DWORD *)(*(void *)v123 + 4 * *(void *)&v123[16]) = 0;
                      }
                      TLocaleInfo::unicodeToMultiByte(v36 + 240, v37, (uint64_t)__src);
                      *((void *)this + 3) = *(void *)&__src[16];
                      operator new[]();
                    }
                    *((void *)this + 3) = *((unsigned int *)v121 + 8);
                    operator new[]();
                  }
                  tknPrintf("Error: Serialization buffer too small to hold text data\n", v28, v29, v30, v31);
                  std::string::basic_string[abi:ne180100]<0>(__src, &byte_2140B33BB);
                  *(void *)uint64_t v123 = byte_26C4DF190;
                  if ((__src[23] & 0x80000000) != 0)
                  {
                    std::string::__init_copy_ctor_external((std::string *)&v123[8], *(const std::string::value_type **)__src, *(std::string::size_type *)&__src[8]);
                  }
                  else
                  {
                    *(_OWORD *)&v123[8] = *(_OWORD *)__src;
                    uint64_t v124 = *(void *)&__src[16];
                  }
                  *(void *)uint64_t v123 = &unk_26C4E0710;
                  if (v124 >= 0) {
                    uint64_t v102 = &v123[8];
                  }
                  else {
                    uint64_t v102 = *(const char **)&v123[8];
                  }
                  conditionalAssert(v102, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/resultmgr.cpp", 901, v65, v66);
                  *(void *)uint64_t v123 = byte_26C4DF190;
                  if (SHIBYTE(v124) < 0) {
                    operator delete(*(void **)&v123[8]);
                  }
                  if ((__src[23] & 0x80000000) != 0) {
                    operator delete(*(void **)__src);
                  }
                  uint64_t v103 = __cxa_allocate_exception(0x20uLL);
                  std::string::basic_string[abi:ne180100]<0>(v123, &byte_2140B33BB);
                  *uint64_t v103 = byte_26C4DF190;
                  int v104 = (std::string *)(v103 + 1);
                  if ((v123[23] & 0x80000000) != 0)
                  {
                    std::string::__init_copy_ctor_external(v104, *(const std::string::value_type **)v123, *(std::string::size_type *)&v123[8]);
                  }
                  else
                  {
                    long long v119 = *(_OWORD *)v123;
                    v103[3] = *(void *)&v123[16];
                    *(_OWORD *)&v104->__r_.__value_.__l.__data_ = v119;
                  }
                  *uint64_t v103 = &unk_26C4E0710;
                }
              }
              tknPrintf("Error: Serialization buffer too small to hold text data\n", v28, v29, v30, v31);
              std::string::basic_string[abi:ne180100]<0>(__src, &byte_2140B33BB);
              *(void *)uint64_t v123 = byte_26C4DF190;
              if ((__src[23] & 0x80000000) != 0)
              {
                std::string::__init_copy_ctor_external((std::string *)&v123[8], *(const std::string::value_type **)__src, *(std::string::size_type *)&__src[8]);
              }
              else
              {
                *(_OWORD *)&v123[8] = *(_OWORD *)__src;
                uint64_t v124 = *(void *)&__src[16];
              }
              *(void *)uint64_t v123 = &unk_26C4E0710;
              if (v124 >= 0) {
                uint64_t v78 = &v123[8];
              }
              else {
                uint64_t v78 = *(const char **)&v123[8];
              }
              conditionalAssert(v78, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/resultmgr.cpp", 894, v49, v50);
              *(void *)uint64_t v123 = byte_26C4DF190;
              if (SHIBYTE(v124) < 0) {
                operator delete(*(void **)&v123[8]);
              }
              if ((__src[23] & 0x80000000) != 0) {
                operator delete(*(void **)__src);
              }
              uint64_t v79 = __cxa_allocate_exception(0x20uLL);
              std::string::basic_string[abi:ne180100]<0>(v123, &byte_2140B33BB);
              *uint64_t v79 = byte_26C4DF190;
              uint64_t v80 = (std::string *)(v79 + 1);
              if ((v123[23] & 0x80000000) != 0)
              {
                std::string::__init_copy_ctor_external(v80, *(const std::string::value_type **)v123, *(std::string::size_type *)&v123[8]);
              }
              else
              {
                long long v111 = *(_OWORD *)v123;
                v79[3] = *(void *)&v123[16];
                *(_OWORD *)&v80->__r_.__value_.__l.__data_ = v111;
              }
              *uint64_t v79 = &unk_26C4E0710;
            }
            tknPrintf("Error: No text in serialization buffer\n", v28, v29, v30, v31);
            std::string::basic_string[abi:ne180100]<0>(__src, &byte_2140B33BB);
            *(void *)uint64_t v123 = byte_26C4DF190;
            if ((__src[23] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v123[8], *(const std::string::value_type **)__src, *(std::string::size_type *)&__src[8]);
            }
            else
            {
              *(_OWORD *)&v123[8] = *(_OWORD *)__src;
              uint64_t v124 = *(void *)&__src[16];
            }
            *(void *)uint64_t v123 = &unk_26C4E0710;
            if (v124 >= 0) {
              uint64_t v99 = &v123[8];
            }
            else {
              uint64_t v99 = *(const char **)&v123[8];
            }
            conditionalAssert(v99, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/resultmgr.cpp", 926, v63, v64);
            *(void *)uint64_t v123 = byte_26C4DF190;
            if (SHIBYTE(v124) < 0) {
              operator delete(*(void **)&v123[8]);
            }
            if ((__src[23] & 0x80000000) != 0) {
              operator delete(*(void **)__src);
            }
            uint64_t v100 = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(v123, &byte_2140B33BB);
            *uint64_t v100 = byte_26C4DF190;
            uint64_t v101 = (std::string *)(v100 + 1);
            if ((v123[23] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external(v101, *(const std::string::value_type **)v123, *(std::string::size_type *)&v123[8]);
            }
            else
            {
              long long v118 = *(_OWORD *)v123;
              v100[3] = *(void *)&v123[16];
              *(_OWORD *)&v101->__r_.__value_.__l.__data_ = v118;
            }
            *uint64_t v100 = &unk_26C4E0710;
          }
          tknPrintf("Error: Encoding mismatch: deserializing UTF-8 result with non UTF-8 model\n", v10, v11, v12, v13);
          std::string::basic_string[abi:ne180100]<0>(__src, &byte_2140B33BB);
          *(void *)uint64_t v123 = byte_26C4DF190;
          if ((__src[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v123[8], *(const std::string::value_type **)__src, *(std::string::size_type *)&__src[8]);
          }
          else
          {
            *(_OWORD *)&v123[8] = *(_OWORD *)__src;
            uint64_t v124 = *(void *)&__src[16];
          }
          *(void *)uint64_t v123 = &unk_26C4E0710;
          if (v124 >= 0) {
            int v90 = &v123[8];
          }
          else {
            int v90 = *(const char **)&v123[8];
          }
          conditionalAssert(v90, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/resultmgr.cpp", 863, v57, v58);
          *(void *)uint64_t v123 = byte_26C4DF190;
          if (SHIBYTE(v124) < 0) {
            operator delete(*(void **)&v123[8]);
          }
          if ((__src[23] & 0x80000000) != 0) {
            operator delete(*(void **)__src);
          }
          int v91 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(v123, &byte_2140B33BB);
          *int v91 = byte_26C4DF190;
          unint64_t v92 = (std::string *)(v91 + 1);
          if ((v123[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v92, *(const std::string::value_type **)v123, *(std::string::size_type *)&v123[8]);
          }
          else
          {
            long long v115 = *(_OWORD *)v123;
            int v91[3] = *(void *)&v123[16];
            *(_OWORD *)&v92->__r_.__value_.__l.__data_ = v115;
          }
          *int v91 = &unk_26C4E0710;
        }
        tknPrintf("Error: Buffer is corrupted, size mismatch\n", v10, v11, v12, v13);
        std::string::basic_string[abi:ne180100]<0>(__src, &byte_2140B33BB);
        *(void *)uint64_t v123 = byte_26C4DF190;
        if ((__src[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v123[8], *(const std::string::value_type **)__src, *(std::string::size_type *)&__src[8]);
        }
        else
        {
          *(_OWORD *)&v123[8] = *(_OWORD *)__src;
          uint64_t v124 = *(void *)&__src[16];
        }
        *(void *)uint64_t v123 = &unk_26C4E0710;
        if (v124 >= 0) {
          uint64_t v87 = &v123[8];
        }
        else {
          uint64_t v87 = *(const char **)&v123[8];
        }
        conditionalAssert(v87, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/resultmgr.cpp", 854, v55, v56);
        *(void *)uint64_t v123 = byte_26C4DF190;
        if (SHIBYTE(v124) < 0) {
          operator delete(*(void **)&v123[8]);
        }
        if ((__src[23] & 0x80000000) != 0) {
          operator delete(*(void **)__src);
        }
        uint64_t v88 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v123, &byte_2140B33BB);
        *uint64_t v88 = byte_26C4DF190;
        uint64_t v89 = (std::string *)(v88 + 1);
        if ((v123[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external(v89, *(const std::string::value_type **)v123, *(std::string::size_type *)&v123[8]);
        }
        else
        {
          long long v114 = *(_OWORD *)v123;
          v88[3] = *(void *)&v123[16];
          *(_OWORD *)&v89->__r_.__value_.__l.__data_ = v114;
        }
        *uint64_t v88 = &unk_26C4E0710;
      }
      tknPrintf("Error: Expected version [%u,%u], found %u\n", v10, v11, v12, v13, 1, 4, *((unsigned int *)__s1 + 4));
      std::string::basic_string[abi:ne180100]<0>(__src, &byte_2140B33BB);
      *(void *)uint64_t v123 = byte_26C4DF190;
      if ((__src[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v123[8], *(const std::string::value_type **)__src, *(std::string::size_type *)&__src[8]);
      }
      else
      {
        *(_OWORD *)&v123[8] = *(_OWORD *)__src;
        uint64_t v124 = *(void *)&__src[16];
      }
      *(void *)uint64_t v123 = &unk_26C4E0710;
      if (v124 >= 0) {
        uint64_t v75 = &v123[8];
      }
      else {
        uint64_t v75 = *(const char **)&v123[8];
      }
      conditionalAssert(v75, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/resultmgr.cpp", 846, v47, v48);
      *(void *)uint64_t v123 = byte_26C4DF190;
      if (SHIBYTE(v124) < 0) {
        operator delete(*(void **)&v123[8]);
      }
      if ((__src[23] & 0x80000000) != 0) {
        operator delete(*(void **)__src);
      }
      uint64_t v76 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v123, &byte_2140B33BB);
      *uint64_t v76 = byte_26C4DF190;
      uint64_t v77 = (std::string *)(v76 + 1);
      if ((v123[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v77, *(const std::string::value_type **)v123, *(std::string::size_type *)&v123[8]);
      }
      else
      {
        long long v110 = *(_OWORD *)v123;
        v76[3] = *(void *)&v123[16];
        *(_OWORD *)&v77->__r_.__value_.__l.__data_ = v110;
      }
      *uint64_t v76 = &unk_26C4E0710;
    }
    tknPrintf("Error: Expected %s, found %s\n", v10, v11, v12, v13, v6, __s1);
    std::string::basic_string[abi:ne180100]<0>(__src, &byte_2140B33BB);
    *(void *)uint64_t v123 = byte_26C4DF190;
    if ((__src[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v123[8], *(const std::string::value_type **)__src, *(std::string::size_type *)&__src[8]);
    }
    else
    {
      *(_OWORD *)&v123[8] = *(_OWORD *)__src;
      uint64_t v124 = *(void *)&__src[16];
    }
    *(void *)uint64_t v123 = &unk_26C4E0710;
    if (v124 >= 0) {
      uint64_t v72 = &v123[8];
    }
    else {
      uint64_t v72 = *(const char **)&v123[8];
    }
    conditionalAssert(v72, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/resultmgr.cpp", 839, v45, v46);
    *(void *)uint64_t v123 = byte_26C4DF190;
    if (SHIBYTE(v124) < 0) {
      operator delete(*(void **)&v123[8]);
    }
    if ((__src[23] & 0x80000000) != 0) {
      operator delete(*(void **)__src);
    }
    uint64_t v73 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v123, &byte_2140B33BB);
    *uint64_t v73 = byte_26C4DF190;
    uint64_t v74 = (std::string *)(v73 + 1);
    if ((v123[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v74, *(const std::string::value_type **)v123, *(std::string::size_type *)&v123[8]);
    }
    else
    {
      long long v109 = *(_OWORD *)v123;
      int v73[3] = *(void *)&v123[16];
      *(_OWORD *)&v74->__r_.__value_.__l.__data_ = v109;
    }
    *uint64_t v73 = &unk_26C4E0710;
  }
  tknPrintf("Error: Serialization buffer too small to hold data of type %s\n", (uint64_t)__s1, a3, (uint64_t)a4, a5, SERIALIZE_NAME);
  std::string::basic_string[abi:ne180100]<0>(__src, &byte_2140B33BB);
  *(void *)uint64_t v123 = byte_26C4DF190;
  if ((__src[23] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v123[8], *(const std::string::value_type **)__src, *(std::string::size_type *)&__src[8]);
  }
  else
  {
    *(_OWORD *)&v123[8] = *(_OWORD *)__src;
    uint64_t v124 = *(void *)&__src[16];
  }
  *(void *)uint64_t v123 = &unk_26C4E0710;
  if (v124 >= 0) {
    unsigned int v69 = &v123[8];
  }
  else {
    unsigned int v69 = *(const char **)&v123[8];
  }
  conditionalAssert(v69, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/itn/resultmgr.cpp", 832, v43, v44);
  *(void *)uint64_t v123 = byte_26C4DF190;
  if (SHIBYTE(v124) < 0) {
    operator delete(*(void **)&v123[8]);
  }
  if ((__src[23] & 0x80000000) != 0) {
    operator delete(*(void **)__src);
  }
  uint64_t v70 = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(v123, &byte_2140B33BB);
  void *v70 = byte_26C4DF190;
  uint64_t v71 = (std::string *)(v70 + 1);
  if ((v123[23] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(v71, *(const std::string::value_type **)v123, *(std::string::size_type *)&v123[8]);
  }
  else
  {
    long long v108 = *(_OWORD *)v123;
    v70[3] = *(void *)&v123[16];
    *(_OWORD *)&v71->__r_.__value_.__l.__data_ = v108;
  }
  void *v70 = &unk_26C4E0710;
}

void sub_213ED0094(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, void **a16, uint64_t a17, void *a18, void **a19, void *a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,void *a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0)
  {
    operator delete(__p);
    if ((v41 & 1) == 0)
    {
LABEL_6:
      TAllocator::clear((TAllocator *)&a30);
      if (a2 == 1)
      {
        __cxa_begin_catch(a1);
        if (*a18) {
          MEMORY[0x216698710](*a18, 0x1000C8077774924);
        }
        __cxa_rethrow();
      }
      TCollation::~TCollation((TCollation *)&STACK[0x508]);
      uint64_t v45 = *a14;
      if (*a14)
      {
        v40[14] = v45;
        operator delete(v45);
      }
      uint64_t v46 = *a16;
      if (*a16)
      {
        v40[11] = v46;
        operator delete(v46);
      }
      uint64_t v47 = *a19;
      if (*a19)
      {
        v40[8] = v47;
        operator delete(v47);
      }
      std::wstring __p = a20;
      std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      _Unwind_Resume(a1);
    }
  }
  else if (!v41)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v42);
  goto LABEL_6;
}

void sub_213ED08A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, void **a19, void **a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void **a35)
{
  __cxa_end_catch();
  TCollation::~TCollation((TCollation *)&STACK[0x508]);
  uint64_t v36 = *a14;
  if (*a14)
  {
    v35[14] = v36;
    operator delete(v36);
  }
  uint64_t v37 = *a16;
  if (*a16)
  {
    v35[11] = v37;
    operator delete(v37);
  }
  char v38 = *a19;
  if (*a19)
  {
    v35[8] = v38;
    operator delete(v38);
  }
  a35 = a20;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&a35);
  JUMPOUT(0x213ED09A4);
}

void sub_213ED08B0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    JUMPOUT(0x213ED08B4);
  }
  _Unwind_Resume(a1);
}

void sub_213ED0930()
{
}

void sub_213ED0994(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_213ED099C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x213ED09A0);
  }
  __clang_call_terminate();
}

uint64_t TIntParam::get(TIntParam *this)
{
  uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle(this);
  return *((unsigned int *)this + TParam::getValidConfig(this, ActiveConfigHandle) + 40);
}

void std::vector<TItnControlState>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 6;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + (a2 << 6);
    }
  }
  else
  {
    std::vector<TItnControlState>::__append((void **)a1, a2 - v2);
  }
}

void TResult::~TResult(TResult *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    MEMORY[0x216698710](v2, 0x1000C8077774924);
  }
  BOOL v3 = (void *)*((void *)this + 13);
  if (v3)
  {
    *((void *)this + 14) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 10);
  if (v4)
  {
    *((void *)this + 11) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 7);
  if (v5)
  {
    *((void *)this + 8) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void **)((char *)this + 32);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v6);
}

unint64_t TResult::serialize(unsigned __int8 *a1, char *__dst, unint64_t a3, uint64_t a4)
{
  if (a3 >= 0x20)
  {
    strcpy(__dst, (const char *)SERIALIZE_NAME);
    *((_DWORD *)__dst + 4) = 4;
    int v8 = *a1;
    *((_DWORD *)__dst + 6) = v8;
    if (a1[1])
    {
      v8 |= 2u;
      *((_DWORD *)__dst + 6) = v8;
    }
    if (*(_DWORD *)(a4 + 304) == 2) {
      *((_DWORD *)__dst + 6) = v8 | 4;
    }
    uint64_t v9 = (TParam *)(*(void *)(a4 + 336) + 144);
    uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle(v9);
    *((_DWORD *)__dst + 7) = *((_DWORD *)v9 + TParam::getValidConfig(v9, ActiveConfigHandle) + 40);
  }
  uint64_t v11 = *((void *)a1 + 3);
  unint64_t v12 = (v11 & 0xFFFFFFFFFFFFFFFCLL) + 44;
  if (v12 <= a3)
  {
    *((_DWORD *)__dst + 8) = (v11 & 0xFFFFFFFC) + 12;
    *((_DWORD *)__dst + 9) = v11;
    strcpy(__dst + 40, *((const char **)a1 + 2));
  }
  uint64_t v14 = *((void *)a1 + 4);
  uint64_t v13 = *((void *)a1 + 5);
  if (v13 == v14)
  {
    unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((v13 - v14) >> 3);
    uint64_t v17 = 8;
    uint64_t v19 = *((void *)a1 + 5);
  }
  else
  {
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    uint64_t v17 = 8;
    uint64_t v13 = *((void *)a1 + 4);
    do
    {
      BOOL v18 = (unsigned int *)(v13 + v15);
      if (*(char *)(v13 + v15 + 23) < 0) {
        BOOL v18 = *(unsigned int **)v18;
      }
      v17 += (int)TLocaleInfo::unicodeToMultiByte(a4 + 240, v18, 0, 0);
      ++v16;
      uint64_t v13 = *((void *)a1 + 4);
      uint64_t v19 = *((void *)a1 + 5);
      unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((v19 - v13) >> 3);
      v15 += 24;
    }
    while (v16 < v20);
  }
  unint64_t v21 = (v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v22 = v21 + v12;
  if (v21 + v12 <= a3)
  {
    long long v23 = &__dst[v12];
    *(_DWORD *)long long v23 = v21;
    *((_DWORD *)v23 + 1) = v20;
    if (v19 != v13)
    {
      uint64_t v24 = 0;
      unint64_t v25 = 0;
      unint64_t v26 = (uint64_t *)(v23 + 8);
      uint64_t v27 = a4 + 240;
      do
      {
        uint64_t v28 = (unsigned int *)(v13 + v24);
        if (*(char *)(v13 + v24 + 23) < 0) {
          uint64_t v28 = *(unsigned int **)v28;
        }
        unint64_t v26 = (uint64_t *)((char *)v26 + (int)TLocaleInfo::unicodeToMultiByte(v27, v28, v26, v21));
        ++v25;
        uint64_t v13 = *((void *)a1 + 4);
        v24 += 24;
      }
      while (v25 < 0xAAAAAAAAAAAAAAABLL * ((*((void *)a1 + 5) - v13) >> 3));
    }
  }
  uint64_t v29 = (uint64_t *)*((void *)a1 + 13);
  unint64_t v30 = *((void *)a1 + 14) - (void)v29;
  unint64_t v31 = (((uint64_t)v30 >> 1) + 11) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v32 = v31 + v22;
  if (v31 + v22 <= a3)
  {
    int v33 = &__dst[v22];
    *(_DWORD *)int v33 = v31;
    *((_DWORD *)v33 + 1) = v30 >> 3;
    if ((v30 >> 3))
    {
      uint64_t v34 = v33 + 8;
      uint64_t v35 = (v30 >> 3);
      do
      {
        uint64_t v36 = *v29++;
        *v34++ = v36;
        --v35;
      }
      while (v35);
    }
  }
  uint64_t v38 = *((void *)a1 + 7);
  uint64_t v37 = *((void *)a1 + 8);
  unint64_t v39 = ((((v37 - v38) >> 1) | 8) + 3) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v40 = v39 + v32;
  if (v39 + v32 <= a3)
  {
    int v41 = &__dst[v32];
    *(_DWORD *)int v41 = v39;
    *((_DWORD *)v41 + 1) = (unint64_t)(v37 - v38) >> 6;
    std::wstring __p = 0;
    uint64_t v77 = 0;
    uint64_t v78 = 0;
    if (v37 != v38)
    {
      uint64_t v73 = v41;
      uint64_t v42 = 0;
      unint64_t v43 = 0;
      do
      {
        uint64_t v44 = 0;
        *(void *)&long long v45 = -1;
        *((void *)&v45 + 1) = -1;
        long long v74 = v45;
        long long v75 = v45;
        do
        {
          uint64_t v46 = *((void *)a1 + 7);
          uint64_t v47 = *(void *)(v46 + v42 + v44);
          if (v47 != -1)
          {
            *((_DWORD *)&v74 + getItnControlCategory(*(void *)(v46 + v42 + v44))) = v47;
            uint64_t v46 = *((void *)a1 + 7);
          }
          uint64_t v48 = v46 + v42 + v44;
          uint64_t v49 = *(void *)(v48 + 32);
          if (v49 != -1) {
            *((_DWORD *)&v74 + getItnControlCategory(*(void *)(v48 + 32)) + 4) = v49;
          }
          v44 += 8;
        }
        while (v44 != 32);
        uint64_t v50 = v77;
        if (v77 >= v78)
        {
          uint64_t v53 = (char *)__p;
          uint64_t v54 = (v77 - (unsigned char *)__p) >> 5;
          unint64_t v55 = v54 + 1;
          if ((unint64_t)(v54 + 1) >> 59) {
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v56 = v78 - (unsigned char *)__p;
          if ((v78 - (unsigned char *)__p) >> 4 > v55) {
            unint64_t v55 = v56 >> 4;
          }
          if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v57 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v57 = v55;
          }
          if (v57)
          {
            uint64_t v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,std::wstring>>>((uint64_t)&v78, v57);
            uint64_t v53 = (char *)__p;
            uint64_t v50 = v77;
          }
          else
          {
            uint64_t v58 = 0;
          }
          long long v59 = v75;
          uint64_t v60 = &v58[32 * v54];
          *(_OWORD *)uint64_t v60 = v74;
          *((_OWORD *)v60 + 1) = v59;
          if (v50 == v53)
          {
            uint64_t v63 = &v58[32 * v54];
          }
          else
          {
            uint64_t v61 = &v58[32 * v54];
            do
            {
              long long v62 = *((_OWORD *)v50 - 1);
              uint64_t v63 = v61 - 32;
              *((_OWORD *)v61 - 2) = *((_OWORD *)v50 - 2);
              *((_OWORD *)v61 - 1) = v62;
              v50 -= 32;
              v61 -= 32;
            }
            while (v50 != v53);
          }
          uint64_t v52 = v60 + 32;
          std::wstring __p = v63;
          uint64_t v77 = v60 + 32;
          uint64_t v78 = &v58[32 * v57];
          if (v53) {
            operator delete(v53);
          }
        }
        else
        {
          long long v51 = v75;
          *(_OWORD *)uint64_t v77 = v74;
          *((_OWORD *)v50 + 1) = v51;
          uint64_t v52 = v50 + 32;
        }
        uint64_t v77 = v52;
        ++v43;
        v42 += 64;
      }
      while (v43 < (uint64_t)(*((void *)a1 + 8) - *((void *)a1 + 7)) >> 6);
      uint64_t v64 = (char *)__p;
      if (v52 != __p) {
        memmove(v73 + 8, __p, v52 - (unsigned char *)__p);
      }
      if (v64)
      {
        uint64_t v77 = v64;
        operator delete(v64);
      }
    }
  }
  uint64_t v65 = (uint64_t *)*((void *)a1 + 10);
  unint64_t v66 = *((void *)a1 + 11) - (void)v65;
  unint64_t v67 = (((uint64_t)v66 >> 1) + 11) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t result = v67 + v40;
  if (v67 + v40 > a3)
  {
LABEL_62:
    if (!__dst) {
      return result;
    }
    goto LABEL_63;
  }
  unsigned int v69 = &__dst[v40];
  *(_DWORD *)unsigned int v69 = v67;
  *((_DWORD *)v69 + 1) = v66 >> 3;
  if ((v66 >> 3))
  {
    uint64_t v70 = v69 + 8;
    uint64_t v71 = (v66 >> 3);
    do
    {
      uint64_t v72 = *v65++;
      *v70++ = v72;
      --v71;
    }
    while (v71);
    goto LABEL_62;
  }
LABEL_63:
  *((_DWORD *)__dst + 5) = result;
  return result;
}

void sub_213ED0EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double TResultManager::TResultManager(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double result = 0.0;
  *(_OWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = 0u;
  *(_OWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = 0u;
  *(_OWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = 0u;
  *(void *)a1 = &unk_26C4E0788;
  *(void *)(a1 + 8) = a4;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = a3;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = a2;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = a5;
  *(void *)(a1 + 88) = -1;
  return result;
}

void TResultManager::~TResultManager(TResultManager *this)
{
  *(void *)this = &unk_26C4E0788;
  uint64_t v3 = *((void *)this + 5);
  uint64_t v2 = *((void *)this + 6);
  if (v2 != v3)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(TResult **)(v3 + 8 * v4);
      if (v5)
      {
        TResult::~TResult(v5);
        MEMORY[0x216698730]();
        uint64_t v3 = *((void *)this + 5);
        uint64_t v2 = *((void *)this + 6);
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  uint64_t v7 = (void **)((char *)this + 64);
  std::vector<THint>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v6 = (void *)*((void *)this + 5);
  if (v6)
  {
    *((void *)this + 6) = v6;
    operator delete(v6);
  }
}

{
  uint64_t vars8;

  TResultManager::~TResultManager(this);

  JUMPOUT(0x216698730);
}

uint64_t TResultManager::getResult(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (a2 - 1 >= (unint64_t)((*(void *)(a1 + 48) - v2) >> 3)) {
    return 0;
  }
  else {
    return *(void *)(v2 + 8 * (a2 - 1));
  }
}

void TResultManager::create()
{
}

void sub_213ED11CC(_Unwind_Exception *a1)
{
  MEMORY[0x216698730](v1, 0x1070C40FC09B48DLL);
  _Unwind_Resume(a1);
}

TResult *TResultManager::destroy(TResult *result, uint64_t a2)
{
  if (a2 != -1)
  {
    uint64_t v2 = result;
    uint64_t v3 = a2 - 1;
    uint64_t v4 = *((void *)result + 5);
    double result = *(TResult **)(v4 + 8 * (a2 - 1));
    if (result)
    {
      TResult::~TResult(result);
      double result = (TResult *)MEMORY[0x216698730]();
      uint64_t v4 = *((void *)v2 + 5);
    }
    *(void *)(v4 + 8 * v3) = 0;
  }
  return result;
}

uint64_t TResultManager::splitAtTextIndex(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  uint64_t v5 = a1[5];
  if (a2 - 1 >= (unint64_t)((a1[6] - v5) >> 3))
  {
    uint64_t v6 = 0;
    goto LABEL_10;
  }
  uint64_t v6 = *(void **)(v5 + 8 * (a2 - 1));
  if (!v6)
  {
LABEL_10:
    unint64_t v7 = 0;
    char v8 = 1;
    goto LABEL_11;
  }
  unint64_t v7 = 0;
  char v8 = 0;
  if (!a3 || (uint64_t v9 = v6[13], v10 = v6[14], v10 == v9))
  {
LABEL_11:
    unint64_t v13 = v7;
    if (!v7) {
      goto LABEL_19;
    }
LABEL_12:
    TResultManager::copyAlignRange();
  }
  uint64_t v34 = v6;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  unint64_t v13 = 0;
  unint64_t v14 = (v10 - v9) >> 3;
  while (1)
  {
    uint64_t v15 = (uint64_t *)(v9 + 8 * v11);
    uint64_t v16 = *v15;
    unint64_t v7 = v16 + v13;
    uint64_t v17 = v15[1] + v12;
    if (v16 + v13 > a3) {
      break;
    }
    v11 += 2;
    uint64_t v12 = v17;
    v13 += v16;
    if (v11 >= v14)
    {
      char v8 = 0;
      uint64_t v6 = v34;
      goto LABEL_11;
    }
  }
  char v8 = 0;
  unint64_t v33 = a3 - v13;
  if (a3 > v13 && v16)
  {
    uint64_t v44 = &v46;
    long long v45 = xmmword_214085190;
    char v47 = 1;
    unint64_t v40 = &v42;
    long long v41 = xmmword_214085190;
    char v43 = 1;
    uint64_t v36 = (char *)&v38;
    long long v37 = xmmword_214085190;
    char v39 = 1;
    BOOL v18 = (char *)v34[2];
    TBuffer<char>::resize((uint64_t)&v40, 0);
    TBuffer<char>::insert((uint64_t)&v40, 0, v18, v13);
    uint64_t v19 = v34[2];
    TBuffer<char>::resize((uint64_t)&v44, 0);
    TBuffer<char>::insert((uint64_t)&v44, 0, (char *)(v19 + v13), v33);
    uint64_t v20 = v34[3];
    unint64_t v30 = v34[2];
    TBuffer<char>::resize((uint64_t)&v36, 0);
    TBuffer<char>::insert((uint64_t)&v36, 0, (char *)(v30 + a3), v20 - a3);
    if (*((void *)&v45 + 1) >= (unint64_t)v45)
    {
      if (v47)
      {
        v35[0] = 0;
        TBuffer<char>::insert((uint64_t)&v44, *((unint64_t *)&v45 + 1), v35, 1uLL);
        --*((void *)&v45 + 1);
      }
      else if ((void)v45)
      {
        *((unsigned char *)v44 + v45 - 1) = 0;
      }
    }
    else
    {
      *((unsigned char *)v44 + *((void *)&v45 + 1)) = 0;
    }
    unint64_t v22 = (char *)v44;
    if (*((void *)&v41 + 1) >= (unint64_t)v41)
    {
      if (v43)
      {
        v35[0] = 0;
        TBuffer<char>::insert((uint64_t)&v40, *((unint64_t *)&v41 + 1), v35, 1uLL);
        --*((void *)&v41 + 1);
      }
      else if ((void)v41)
      {
        *((unsigned char *)v40 + v41 - 1) = 0;
      }
    }
    else
    {
      *((unsigned char *)v40 + *((void *)&v41 + 1)) = 0;
    }
    long long v23 = (const char *)v40;
    if (*((void *)&v37 + 1) >= (unint64_t)v37)
    {
      if (v39)
      {
        unint64_t v31 = (unint64_t)v40;
        v35[0] = 0;
        TBuffer<char>::insert((uint64_t)&v36, *((unint64_t *)&v37 + 1), v35, 1uLL);
        --*((void *)&v37 + 1);
        long long v23 = (const char *)v31;
      }
      else if ((void)v37)
      {
        v36[(void)v37 - 1] = 0;
      }
    }
    else
    {
      v36[*((void *)&v37 + 1)] = 0;
    }
    unint64_t v32 = TTokenizer::tokenize(a1[4], v22, v23, v36, *(void *)(*(void *)(a1[4] + 24) + 29784), 0);
    uint64_t v24 = (char *)v34[2];
    TBuffer<char>::resize((uint64_t)&v40, 0);
    TBuffer<char>::insert((uint64_t)&v40, 0, v24, a3);
    uint64_t v25 = v34[2];
    TBuffer<char>::resize((uint64_t)&v44, 0);
    TBuffer<char>::insert((uint64_t)&v44, 0, (char *)(v25 + a3), v16 + v13 - a3);
    uint64_t v26 = v34[2];
    uint64_t v27 = v34[3];
    TBuffer<char>::resize((uint64_t)&v36, 0);
    TBuffer<char>::insert((uint64_t)&v36, 0, (char *)(v26 + v7), v27 - v7);
    if (*((void *)&v45 + 1) >= (unint64_t)v45)
    {
      if (v47)
      {
        v35[0] = 0;
        TBuffer<char>::insert((uint64_t)&v44, *((unint64_t *)&v45 + 1), v35, 1uLL);
        --*((void *)&v45 + 1);
      }
      else if ((void)v45)
      {
        *((unsigned char *)v44 + v45 - 1) = 0;
      }
    }
    else
    {
      *((unsigned char *)v44 + *((void *)&v45 + 1)) = 0;
    }
    uint64_t v28 = (char *)v44;
    if (*((void *)&v41 + 1) >= (unint64_t)v41)
    {
      if (v43)
      {
        v35[0] = 0;
        TBuffer<char>::insert((uint64_t)&v40, *((unint64_t *)&v41 + 1), v35, 1uLL);
        --*((void *)&v41 + 1);
      }
      else if ((void)v41)
      {
        *((unsigned char *)v40 + v41 - 1) = 0;
      }
    }
    else
    {
      *((unsigned char *)v40 + *((void *)&v41 + 1)) = 0;
    }
    uint64_t v29 = (const char *)v40;
    if (*((void *)&v37 + 1) >= (unint64_t)v37)
    {
      if (v39)
      {
        v35[0] = 0;
        TBuffer<char>::insert((uint64_t)&v36, *((unint64_t *)&v37 + 1), v35, 1uLL);
        --*((void *)&v37 + 1);
      }
      else if ((void)v37)
      {
        v36[(void)v37 - 1] = 0;
      }
    }
    else
    {
      v36[*((void *)&v37 + 1)] = 0;
    }
    TTokenizer::tokenize(a1[4], v28, v29, v36, *(void *)(*(void *)(a1[4] + 24) + 29784), 0);
    TFsa::TFsa((TFsa *)v35);
    tokenizerResultToFsa(v32, 0, a1[3], a1[4]);
  }
  uint64_t v6 = v34;
  if (v13) {
    goto LABEL_12;
  }
LABEL_19:
  if ((v8 & 1) == 0 && v13 != v6[3]) {
    TResultManager::copyAlignRange();
  }
  return -1;
}

void sub_213ED1C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,char a59)
{
  if (__p) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  TFsa::~TFsa((TFsa *)&a28);
  if (a56)
  {
    a57 = (uint64_t)a56;
    operator delete(a56);
  }
  TFsa::~TFsa((TFsa *)&a59);
  if (LOBYTE(STACK[0x398]))
  {
    unint64_t v60 = STACK[0x280];
    if (STACK[0x280] != a10)
    {
      if (v60) {
        MEMORY[0x216698730](v60, 0x1000C4077774924);
      }
    }
  }
  if (LOBYTE(STACK[0x4B8]))
  {
    unint64_t v61 = STACK[0x3A0];
    if (STACK[0x3A0] != a11)
    {
      if (v61) {
        MEMORY[0x216698730](v61, 0x1000C4077774924);
      }
    }
  }
  if (LOBYTE(STACK[0x5D8]))
  {
    unint64_t v62 = STACK[0x4C0];
    if (STACK[0x4C0] != a12)
    {
      if (v62) {
        MEMORY[0x216698730](v62, 0x1000C4077774924);
      }
    }
  }
  _Unwind_Resume(a1);
}

void TResultManager::copyAlignRange()
{
}

void sub_213ED1EE0(_Unwind_Exception *a1)
{
  MEMORY[0x216698730](v1, 0x1070C40FC09B48DLL);
  _Unwind_Resume(a1);
}

void tokenizerResultToFsa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  TTokenizer::getResultInfo(a4, a1, (uint64_t)&v4);
  operator new[]();
}

void sub_213ED24D4(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 - 144);
  if (v3)
  {
    *(void *)(v1 - 136) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

void wordsToFsa(unint64_t a1, unint64_t a2, void *a3, uint64_t **this)
{
  if (!this[25])
  {
    char v8 = TFsa::newState((TAllocator *)this, 0);
    TFsa::addExtremity((uint64_t)this, (uint64_t)v8, 0);
    TFsa::addExtremity((uint64_t)this, (uint64_t)v8, 1u);
  }
  uint64_t v9 = this[22];
  uint64_t v10 = this[23];
  if (v9 != v10)
  {
    while (!*v9)
    {
      if (++v9 == v10)
      {
        uint64_t v9 = this[23];
        break;
      }
    }
  }
  uint64_t v11 = *v9;
  TFsa::removeExtremity((uint64_t)this, *v9, 1u);
  if (a1 >= a2)
  {
    uint64_t v12 = (void *)v11;
  }
  else
  {
    do
    {
      uint64_t v12 = TFsa::newState((TAllocator *)this, 0);
      unint64_t v13 = (__int32 *)a1;
      if (*(char *)(a1 + 23) < 0) {
        unint64_t v13 = *(__int32 **)a1;
      }
      uint64_t Word = TLexicon::findWord(a3, v13);
      if (!Word)
      {
        uint64_t v15 = (int *)a1;
        if (*(char *)(a1 + 23) < 0) {
          uint64_t v15 = *(int **)a1;
        }
        uint64_t Word = TLexicon::addTempWord((uint64_t)a3, v15, 0, 0, 0);
      }
      TFsa::newTrans((TAllocator *)this, v11, (uint64_t)v12, Word);
      a1 += 24;
      uint64_t v11 = (uint64_t)v12;
    }
    while (a1 < a2);
  }

  TFsa::addExtremity((uint64_t)this, (uint64_t)v12, 1u);
}

void *alignFsa(TAllocator *a1, uint64_t **this, unint64_t a3, void **a4)
{
  char v8 = TFsa::newState((TAllocator *)this, 0);
  uint64_t v9 = this[19];
  uint64_t v10 = this[20];
  if (v9 != v10)
  {
    while (!*v9)
    {
      if (++v9 == v10)
      {
        uint64_t v9 = this[20];
        break;
      }
    }
  }
  uint64_t v11 = *v9;
  TFsa::removeExtremity((uint64_t)this, *v9, 0);
  TFsa::addExtremity((uint64_t)this, (uint64_t)v8, 0);
  TFsa::newTrans((TAllocator *)this, (uint64_t)v8, v11, -1);
  uint64_t v12 = TFsa::newState(a1, 0);
  unint64_t v13 = (uint64_t *)*((void *)a1 + 19);
  unint64_t v14 = (uint64_t *)*((void *)a1 + 20);
  if (v13 != v14)
  {
    while (!*v13)
    {
      if (++v13 == v14)
      {
        unint64_t v13 = (uint64_t *)*((void *)a1 + 20);
        break;
      }
    }
  }
  uint64_t v15 = *v13;
  TFsa::removeExtremity((uint64_t)a1, *v13, 0);
  TFsa::addExtremity((uint64_t)a1, (uint64_t)v12, 0);
  TFsa::newTrans(a1, (uint64_t)v12, v15, -1);
  v17[0] = &unk_26C4E48E0;
  v17[1] = 1;
  locale_t v17[2] = &unk_26C4E48E0;
  v17[3] = 1;
  v17[4] = &unk_26C4E48E0;
  v17[5] = 1;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  TAligner<TWord const*,TCost<TWord const*,std::equal_to<TWord const*>>>::align((uint64_t)v17, (unint64_t *)a1, (unint64_t *)this, a3, 0, a4);
  return TAligner<TWord const*,TCost<TWord const*,std::equal_to<TWord const*>>>::~TAligner(v17);
}

void sub_213ED2854(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  TAligner<TWord const*,TCost<TWord const*,std::equal_to<TWord const*>>>::~TAligner((uint64_t *)va);
  _Unwind_Resume(a1);
}

void create(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v118 = *MEMORY[0x263EF8340];
  long long v115 = v117;
  long long v116 = xmmword_214085190;
  v117[256] = 1;
  TBuffer<char>::resize((uint64_t)&v115, 0);
  TBuffer<char>::insert((uint64_t)&v115, 0, (char *)(a1 + a2), a3 - a2);
  unint64_t v108 = a2;
  std::wstring __p = 0;
  long long v112 = 0;
  long long v113 = 0;
  long long v114 = 0;
  long long v110 = 0;
  long long v111 = 0;
  uint64_t v11 = *a4;
  if (*a4 == a4[1])
  {
    unint64_t v18 = a2;
    unint64_t v13 = a2;
LABEL_120:
    if (v13 >= v18)
    {
      unint64_t v85 = a3 - v13;
      if (a3 > v13)
      {
        uint64_t v87 = v110;
        uint64_t v86 = v111;
        if (v110 >= v111)
        {
          uint64_t v89 = __p;
          uint64_t v90 = (v110 - __p) >> 3;
          unint64_t v91 = v90 + 1;
          if ((unint64_t)(v90 + 1) >> 61) {
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v92 = v111 - __p;
          if ((v111 - __p) >> 2 > v91) {
            unint64_t v91 = v92 >> 2;
          }
          if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v93 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v93 = v91;
          }
          if (v93)
          {
            unint64_t v94 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v111, v93);
            uint64_t v89 = __p;
            uint64_t v87 = v110;
          }
          else
          {
            unint64_t v94 = 0;
          }
          uint64_t v95 = &v94[8 * v90];
          uint64_t v86 = &v94[8 * v93];
          *(void *)uint64_t v95 = v85;
          uint64_t v88 = v95 + 8;
          while (v87 != v89)
          {
            uint64_t v96 = *((void *)v87 - 1);
            v87 -= 8;
            *((void *)v95 - 1) = v96;
            v95 -= 8;
          }
          std::wstring __p = v95;
          long long v111 = v86;
          if (v89)
          {
            operator delete(v89);
            uint64_t v86 = v111;
          }
        }
        else
        {
          *(void *)long long v110 = v85;
          uint64_t v88 = v110 + 8;
        }
        if (v88 >= v86)
        {
          uint64_t v97 = __p;
          uint64_t v98 = (v88 - __p) >> 3;
          unint64_t v99 = v98 + 1;
          if ((unint64_t)(v98 + 1) >> 61) {
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v100 = v86 - __p;
          if (v100 >> 2 > v99) {
            unint64_t v99 = v100 >> 2;
          }
          if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v101 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v101 = v99;
          }
          if (v101)
          {
            uint64_t v102 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v111, v101);
            uint64_t v97 = __p;
          }
          else
          {
            uint64_t v102 = 0;
          }
          uint64_t v103 = &v102[8 * v98];
          int v104 = &v102[8 * v101];
          *(void *)uint64_t v103 = 0;
          while (v88 != v97)
          {
            uint64_t v105 = *((void *)v88 - 1);
            v88 -= 8;
            *((void *)v103 - 1) = v105;
            v103 -= 8;
          }
          long long v111 = v104;
          if (v97) {
            operator delete(v97);
          }
        }
        else
        {
          *(void *)uint64_t v88 = 0;
        }
      }
    }
    operator new();
  }
  unint64_t v12 = 0;
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  unint64_t v18 = a2;
  uint64_t v19 = *a5;
  unint64_t v106 = a3;
  while (1)
  {
    uint64_t v20 = *(void *)(*(void *)(v11 + 8 * v12) + 8);
    if (v13 >= v18)
    {
      unint64_t v21 = *(void *)(v19 + 16 * v20);
      if (v21 <= a3 && v21 != v13)
      {
        unint64_t v23 = v21 - v13;
        long long v25 = v110;
        long long v24 = v111;
        if (v110 >= v111)
        {
          long long v27 = __p;
          uint64_t v28 = (v110 - __p) >> 3;
          unint64_t v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 61) {
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v30 = v111 - __p;
          if ((v111 - __p) >> 2 > v29) {
            unint64_t v29 = v30 >> 2;
          }
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v31 = v29;
          }
          if (v31)
          {
            unint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v111, v31);
            long long v27 = __p;
            long long v25 = v110;
          }
          else
          {
            unint64_t v32 = 0;
          }
          unint64_t v33 = &v32[8 * v28];
          *(void *)unint64_t v33 = v23;
          long long v26 = v33 + 8;
          while (v25 != v27)
          {
            uint64_t v34 = *((void *)v25 - 1);
            v25 -= 8;
            *((void *)v33 - 1) = v34;
            v33 -= 8;
          }
          long long v24 = &v32[8 * v31];
          std::wstring __p = v33;
          long long v111 = v24;
          if (v27)
          {
            operator delete(v27);
            long long v24 = v111;
          }
          unint64_t v18 = v108;
        }
        else
        {
          *(void *)long long v110 = v23;
          long long v26 = v110 + 8;
        }
        if (v26 >= v24)
        {
          uint64_t v36 = __p;
          uint64_t v37 = (v26 - __p) >> 3;
          unint64_t v38 = v37 + 1;
          if ((unint64_t)(v37 + 1) >> 61) {
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v39 = v24 - __p;
          if (v39 >> 2 > v38) {
            unint64_t v38 = v39 >> 2;
          }
          if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v40 = v38;
          }
          if (v40)
          {
            long long v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v111, v40);
            uint64_t v36 = __p;
          }
          else
          {
            long long v41 = 0;
          }
          uint64_t v42 = &v41[8 * v37];
          *(void *)uint64_t v42 = 0;
          uint64_t v35 = v42 + 8;
          while (v26 != v36)
          {
            uint64_t v43 = *((void *)v26 - 1);
            v26 -= 8;
            *((void *)v42 - 1) = v43;
            v42 -= 8;
          }
          std::wstring __p = v42;
          long long v111 = &v41[8 * v40];
          if (v36) {
            operator delete(v36);
          }
          unint64_t v18 = v108;
        }
        else
        {
          *(void *)long long v26 = 0;
          uint64_t v35 = v26 + 8;
        }
        long long v110 = v35;
        a3 = v106;
        uint64_t v19 = *a5;
      }
    }
    uint64_t v44 = v17 + 1;
    long long v45 = (unint64_t *)(v19 + 16 * v20);
    unint64_t v46 = *v45;
    unint64_t v13 = v45[1];
    if (v46 != 0xFFFFFFFF) {
      unint64_t v14 = v46;
    }
    if (v14 >= v18)
    {
      if (v13 <= a3)
      {
        unint64_t v47 = v13 - v14;
        uint64_t v49 = v110;
        uint64_t v48 = v111;
        if (v110 >= v111)
        {
          long long v51 = __p;
          uint64_t v52 = (v110 - __p) >> 3;
          unint64_t v53 = v52 + 1;
          if ((unint64_t)(v52 + 1) >> 61) {
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v54 = v111 - __p;
          if ((v111 - __p) >> 2 > v53) {
            unint64_t v53 = v54 >> 2;
          }
          if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v55 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v55 = v53;
          }
          if (v55)
          {
            uint64_t v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v111, v55);
            long long v51 = __p;
            uint64_t v49 = v110;
          }
          else
          {
            uint64_t v56 = 0;
          }
          unint64_t v57 = &v56[8 * v52];
          *(void *)unint64_t v57 = v47;
          uint64_t v50 = v57 + 8;
          while (v49 != v51)
          {
            uint64_t v58 = *((void *)v49 - 1);
            v49 -= 8;
            *((void *)v57 - 1) = v58;
            v57 -= 8;
          }
          uint64_t v48 = &v56[8 * v55];
          std::wstring __p = v57;
          long long v111 = v48;
          if (v51)
          {
            operator delete(v51);
            uint64_t v48 = v111;
          }
          unint64_t v18 = v108;
        }
        else
        {
          *(void *)long long v110 = v47;
          uint64_t v50 = v110 + 8;
        }
        if (v50 >= v48)
        {
          unint64_t v60 = __p;
          uint64_t v61 = (v50 - __p) >> 3;
          unint64_t v62 = v61 + 1;
          if ((unint64_t)(v61 + 1) >> 61) {
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v63 = v48 - __p;
          if (v63 >> 2 > v62) {
            unint64_t v62 = v63 >> 2;
          }
          if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v64 = v62;
          }
          if (v64)
          {
            uint64_t v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v111, v64);
            unint64_t v60 = __p;
          }
          else
          {
            uint64_t v65 = 0;
          }
          unint64_t v66 = &v65[8 * v61];
          *(void *)unint64_t v66 = v44;
          long long v59 = v66 + 8;
          while (v50 != v60)
          {
            uint64_t v67 = *((void *)v50 - 1);
            v50 -= 8;
            *((void *)v66 - 1) = v67;
            v66 -= 8;
          }
          std::wstring __p = v66;
          long long v111 = &v65[8 * v64];
          if (v60) {
            operator delete(v60);
          }
          unint64_t v18 = v108;
        }
        else
        {
          *(void *)uint64_t v50 = v44;
          long long v59 = v50 + 8;
        }
        long long v110 = v59;
        a3 = v106;
        uint64_t v19 = *a5;
      }
      unint64_t v13 = *(void *)(v19 + 16 * v20 + 8);
      if (v13 == 0xFFFFFFFF) {
        uint64_t v17 = v44;
      }
      else {
        uint64_t v17 = 0;
      }
      if (v14 < a3)
      {
        uint64_t HeadClone = **(uint64_t ***)(*a4 + 8 * v12);
        if (*((char *)a6 + 23) >= 0) {
          unsigned int v69 = a6;
        }
        else {
          unsigned int v69 = (uint64_t *)*a6;
        }
        do
        {
          uint64_t v70 = v16;
          int v71 = *((unsigned __int8 *)v69 + v15++);
          uint64_t v16 = 1;
        }
        while (v71 == 68);
        if (v71 != 67)
        {
          uint64_t HeadClone = (uint64_t *)TWord::getHeadClone((uint64_t)HeadClone);
          uint64_t v70 = 1;
        }
        uint64_t v72 = *HeadClone;
        uint64_t v73 = v113;
        if (v113 >= v114)
        {
          uint64_t v77 = (v113 - (unsigned char *)v112) >> 3;
          if ((unint64_t)(v77 + 1) >> 61) {
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v78 = (v114 - (unsigned char *)v112) >> 2;
          if (v78 <= v77 + 1) {
            unint64_t v78 = v77 + 1;
          }
          if ((unint64_t)(v114 - (unsigned char *)v112) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v79 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v79 = v78;
          }
          if (v79) {
            uint64_t v80 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v114, v79);
          }
          else {
            uint64_t v80 = 0;
          }
          uint64_t v81 = &v80[8 * v77];
          *(void *)uint64_t v81 = v72;
          long long v74 = v81 + 8;
          uint64_t v83 = (char *)v112;
          uint64_t v82 = v113;
          if (v113 != v112)
          {
            do
            {
              uint64_t v84 = *((void *)v82 - 1);
              v82 -= 8;
              *((void *)v81 - 1) = v84;
              v81 -= 8;
            }
            while (v82 != v83);
            uint64_t v82 = (char *)v112;
          }
          long long v112 = v81;
          long long v113 = v74;
          long long v114 = &v80[8 * v79];
          if (v82) {
            operator delete(v82);
          }
        }
        else
        {
          *(void *)long long v113 = v72;
          long long v74 = v73 + 8;
        }
        unint64_t v18 = v108;
        long long v113 = v74;
        uint64_t v19 = *a5;
        unint64_t v13 = *(void *)(*a5 + 16 * v20 + 8);
        uint64_t v16 = v70;
        a3 = v106;
        goto LABEL_117;
      }
    }
    else if (v13 == 0xFFFFFFFF)
    {
      ++v17;
    }
    else
    {
      uint64_t v17 = 0;
    }
    if (*((char *)a6 + 23) >= 0) {
      long long v75 = a6;
    }
    else {
      long long v75 = (uint64_t *)*a6;
    }
    do
      int v76 = *((unsigned __int8 *)v75 + v15++);
    while (v76 == 68);
LABEL_117:
    ++v12;
    uint64_t v11 = *a4;
    if (v12 >= (a4[1] - *a4) >> 3) {
      goto LABEL_120;
    }
  }
}

void sub_213ED30C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  if (__p) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  if (a58)
  {
    if (a23 != a9 && a23 != 0) {
      MEMORY[0x216698730]();
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t TResultManager::merge(uint64_t a1, void *a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = a3;
    uint64_t v5 = 0;
    do
    {
      unint64_t v6 = *a2 - 1;
      uint64_t v7 = *(void *)(a1 + 40);
      if (v6 < (*(void *)(a1 + 48) - v7) >> 3 && *(void *)(v7 + 8 * v6))
      {
        if (v5) {
          operator new();
        }
        uint64_t v5 = *(void *)(v7 + 8 * v6);
      }
      ++a2;
      --v3;
    }
    while (v3);
    if (v5) {
      operator new();
    }
  }
  return -1;
}

void sub_213ED334C(_Unwind_Exception *a1)
{
  MEMORY[0x216698730](v1, 0x1070C40FC09B48DLL);
  _Unwind_Resume(a1);
}

uint64_t TResultManager::split(uint64_t result, uint64_t a2, unint64_t **a3, uint64_t a4)
{
  uint64_t v7 = (uint64_t *)result;
  uint64_t v8 = a3[1] - *a3;
  unint64_t v9 = v8 + 1;
  if (*(unsigned char *)(a4 + 2072) && *(void *)(a4 + 8) < v9)
  {
    *(void *)(a4 + 8) = v8 + 2;
    operator new[]();
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 < v9)
  {
    unint64_t v11 = v9;
    if (*(unsigned char *)(a4 + 2072)
      || ((v12 = *(void *)(a4 + 8), v12 >= v9) ? (unint64_t v11 = v9) : (unint64_t v11 = *(void *)(a4 + 8)),
          v10 < v12 ? (BOOL v13 = v11 == v10) : (BOOL v13 = 1),
          !v13))
    {
      double result = (uint64_t)memset((void *)(*(void *)a4 + 8 * v10), 255, 8 * (v11 - v10));
    }
  }
  *(void *)(a4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v9;
  uint64_t v14 = v7[5];
  if (a2 - 1 >= (unint64_t)((v7[6] - v14) >> 3)) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = *(void *)(v14 + 8 * (a2 - 1));
  }
  uint64_t v17 = *a3;
  uint64_t v16 = a3[1];
  if (v16 == *a3) {
    goto LABEL_33;
  }
  unint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = a2;
  while (v19)
  {
    unint64_t v21 = v17[v19];
    if (v21 != v17[v19 - 1]) {
      goto LABEL_23;
    }
LABEL_27:
    if (++v19 >= (unint64_t)(v16 - v17)) {
      goto LABEL_32;
    }
  }
  unint64_t v21 = *v17;
  if (!*v17) {
    goto LABEL_27;
  }
LABEL_23:
  if (v21 < *(void *)(v15 + 24))
  {
    double result = TResultManager::splitAtTextIndex(v7, v20, v21 - v18);
    uint64_t v22 = result;
    uint64_t v24 = v23;
    unint64_t v18 = (*a3)[v19];
    if (v20 != a2) {
      double result = (uint64_t)TResultManager::destroy((TResult *)v7, v20);
    }
    *(void *)(*(void *)a4 + 8 * v19) = v22;
    uint64_t v17 = *a3;
    uint64_t v16 = a3[1];
    uint64_t v20 = v24;
    goto LABEL_27;
  }
  if (v20 == a2)
  {
    uint64_t v25 = a2;
    double result = TResultManager::merge((uint64_t)v7, &v25, 1);
    uint64_t v20 = result;
  }
  *(void *)(*(void *)a4 + 8 * v19) = v20;
  uint64_t v20 = -1;
LABEL_32:
  if (v20 == a2)
  {
LABEL_33:
    uint64_t v25 = a2;
    double result = TResultManager::merge((uint64_t)v7, &v25, 1);
    uint64_t v20 = result;
  }
  *(void *)(*(void *)a4 + 8 * *(void *)(a4 + 16) - 8) = v20;
  return result;
}

void TResultManager::deserialize(TResultManager *this, const char *a2)
{
}

void sub_213ED36E4(_Unwind_Exception *a1)
{
  MEMORY[0x216698730](v1, 0x1070C40FC09B48DLL);
  _Unwind_Resume(a1);
}

void TResultManager::setResultText(uint64_t a1, uint64_t a2, char *__s)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (a2 - 1 >= (unint64_t)((*(void *)(a1 + 48) - v3) >> 3)) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = *(void *)(v3 + 8 * (a2 - 1));
  }
  TResult::setText(v4, __s);
}

void TResultManager::align(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  long long v75 = 0;
  int v76 = 0;
  unint64_t v77 = 0;
  if (a3)
  {
    for (uint64_t i = 0; i != a3; ++i)
    {
      unint64_t v8 = *(void *)(a2 + 8 * i) - 1;
      uint64_t v9 = a1[5];
      if (v8 >= (a1[6] - v9) >> 3) {
        uint64_t v10 = 0;
      }
      else {
        uint64_t v10 = *(void *)(v9 + 8 * v8);
      }
      std::vector<TPItnTagHandle_fake **>::reserve((void **)&v75, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v10 + 40) - *(void *)(v10 + 32)) >> 3) + v76 - v75);
      uint64_t v11 = *(void *)(v10 + 32);
      if (*(void *)(v10 + 40) != v11)
      {
        unint64_t v12 = 0;
        do
        {
          BOOL v13 = (__int32 *)(v11 + 24 * v12);
          if (*((char *)v13 + 23) < 0) {
            BOOL v13 = *(__int32 **)v13;
          }
          uint64_t Word = TLexicon::findWord((void *)a1[3], v13);
          if (!Word)
          {
            uint64_t v15 = *(void *)(v10 + 32) + 24 * v12;
            if (*(char *)(v15 + 23) < 0) {
              uint64_t v15 = *(void *)v15;
            }
            uint64_t Word = TLexicon::addTempWord(a1[3], (int *)v15, 0, 0, 0);
          }
          uint64_t HeadClone = TWord::getHeadClone(Word);
          uint64_t v17 = HeadClone;
          unint64_t v18 = v76;
          if ((unint64_t)v76 >= v77)
          {
            uint64_t v20 = v76 - v75;
            if ((unint64_t)(v20 + 1) >> 61) {
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v21 = (uint64_t)(v77 - (void)v75) >> 2;
            if (v21 <= v20 + 1) {
              unint64_t v21 = v20 + 1;
            }
            if (v77 - (unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v22 = v21;
            }
            if (v22) {
              uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v77, v22);
            }
            else {
              uint64_t v23 = 0;
            }
            uint64_t v24 = (uint64_t *)&v23[8 * v20];
            *uint64_t v24 = v17;
            uint64_t v19 = v24 + 1;
            long long v26 = v75;
            uint64_t v25 = v76;
            if (v76 != v75)
            {
              do
              {
                uint64_t v27 = *--v25;
                *--uint64_t v24 = v27;
              }
              while (v25 != v26);
              uint64_t v25 = v75;
            }
            long long v75 = v24;
            int v76 = v19;
            unint64_t v77 = (unint64_t)&v23[8 * v22];
            if (v25) {
              operator delete(v25);
            }
          }
          else
          {
            *int v76 = HeadClone;
            uint64_t v19 = v18 + 1;
          }
          int v76 = v19;
          ++v12;
          uint64_t v11 = *(void *)(v10 + 32);
        }
        while (v12 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v10 + 40) - v11) >> 3));
      }
    }
  }
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  long long v74 = 0;
  if (a5)
  {
    uint64_t v28 = 0;
    do
    {
      unint64_t v29 = *(void *)(a4 + 8 * v28) - 1;
      uint64_t v30 = a1[5];
      if (v29 >= (a1[6] - v30) >> 3) {
        uint64_t v31 = 0;
      }
      else {
        uint64_t v31 = *(void *)(v30 + 8 * v29);
      }
      std::vector<TPItnTagHandle_fake **>::reserve((void **)&v72, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v31 + 40) - *(void *)(v31 + 32)) >> 3) + v73 - v72);
      uint64_t v32 = *(void *)(v31 + 32);
      if (*(void *)(v31 + 40) != v32)
      {
        unint64_t v33 = 0;
        do
        {
          uint64_t v34 = (__int32 *)(v32 + 24 * v33);
          if (*((char *)v34 + 23) < 0) {
            uint64_t v34 = *(__int32 **)v34;
          }
          uint64_t v35 = TLexicon::findWord((void *)a1[3], v34);
          if (!v35)
          {
            uint64_t v36 = *(void *)(v31 + 32) + 24 * v33;
            if (*(char *)(v36 + 23) < 0) {
              uint64_t v36 = *(void *)v36;
            }
            uint64_t v35 = TLexicon::addTempWord(a1[3], (int *)v36, 0, 0, 0);
          }
          uint64_t v37 = TWord::getHeadClone(v35);
          uint64_t v38 = v37;
          uint64_t v39 = v73;
          if (v73 >= v74)
          {
            uint64_t v41 = v73 - v72;
            if ((unint64_t)(v41 + 1) >> 61) {
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v42 = ((char *)v74 - (char *)v72) >> 2;
            if (v42 <= v41 + 1) {
              unint64_t v42 = v41 + 1;
            }
            if ((unint64_t)((char *)v74 - (char *)v72) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v43 = v42;
            }
            if (v43) {
              uint64_t v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v74, v43);
            }
            else {
              uint64_t v44 = 0;
            }
            long long v45 = (uint64_t *)&v44[8 * v41];
            *long long v45 = v38;
            unint64_t v40 = v45 + 1;
            unint64_t v47 = v72;
            unint64_t v46 = v73;
            if (v73 != v72)
            {
              do
              {
                uint64_t v48 = *--v46;
                *--long long v45 = v48;
              }
              while (v46 != v47);
              unint64_t v46 = v72;
            }
            uint64_t v72 = v45;
            uint64_t v73 = v40;
            long long v74 = (uint64_t *)&v44[8 * v43];
            if (v46) {
              operator delete(v46);
            }
          }
          else
          {
            *uint64_t v73 = v37;
            unint64_t v40 = v39 + 1;
          }
          uint64_t v73 = v40;
          ++v33;
          uint64_t v32 = *(void *)(v31 + 32);
        }
        while (v33 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v31 + 40) - v32) >> 3));
      }
      ++v28;
    }
    while (v28 != a5);
    uint64_t v49 = v72;
    uint64_t v50 = (uint64_t)v73;
  }
  else
  {
    uint64_t v50 = 0;
    uint64_t v49 = 0;
  }
  v70[0] = 0;
  v70[1] = 0;
  uint64_t v71 = 0;
  v57[0] = (uint64_t)&unk_26C4E48E0;
  v57[1] = 1;
  v57[2] = (uint64_t)&unk_26C4E48E0;
  v57[3] = 1;
  v57[4] = (uint64_t)&unk_26C4E48E0;
  v57[5] = 1;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  TAligner<TWord const*,TCost<TWord const*,std::equal_to<TWord const*>>>::align<std::__wrap_iter<TWord const**>>(v57, v75, (uint64_t)v76, v49, v50, (unint64_t)v70);
  if (v71 >= 0) {
    long long v51 = (char *)v70;
  }
  else {
    long long v51 = (char *)v70[0];
  }
  TBuffer<char>::assign(a6, v51);
  TAligner<TWord const*,TCost<TWord const*,std::equal_to<TWord const*>>>::~TAligner(v57);
  if (SHIBYTE(v71) < 0) {
    operator delete(v70[0]);
  }
  if (v72)
  {
    uint64_t v73 = v72;
    operator delete(v72);
  }
  if (v75)
  {
    int v76 = v75;
    operator delete(v75);
  }
}

void sub_213ED3BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  TAligner<TWord const*,TCost<TWord const*,std::equal_to<TWord const*>>>::~TAligner((uint64_t *)va);
  if (*(char *)(v6 - 137) < 0) {
    operator delete(*(void **)(v6 - 160));
  }
  unint64_t v8 = *(void **)(v6 - 136);
  if (v8)
  {
    *(void *)(v6 - DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)this + 128) = v8;
    operator delete(v8);
  }
  uint64_t v9 = *(void **)(v6 - 112);
  if (v9)
  {
    *(void *)(v6 - DgnArray<LinearTransform>::releaseAll((uint64_t)this + 104) = v9;
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

uint64_t TAligner<TWord const*,TCost<TWord const*,std::equal_to<TWord const*>>>::align<std::__wrap_iter<TWord const**>>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6 = a4;
  uint64_t v7 = a2;
  unint64_t v9 = ((a3 - (uint64_t)a2) >> 3) + 1;
  unint64_t v10 = ((a5 - (uint64_t)a4) >> 3) + 1;
  if (v10 >= v9)
  {
    int v77 = 73;
    int v11 = 68;
    uint64_t v12 = ((a3 - (uint64_t)a2) >> 3) + 1;
    uint64_t v13 = ((a5 - (uint64_t)a4) >> 3) + 1;
  }
  else
  {
    int v77 = 68;
    int v11 = 73;
    uint64_t v7 = a4;
    uint64_t v6 = a2;
    uint64_t v12 = ((a5 - (uint64_t)a4) >> 3) + 1;
    uint64_t v13 = ((a3 - (uint64_t)a2) >> 3) + 1;
  }
  int v75 = v11;
  uint64_t v14 = a1[13];
  uint64_t v15 = a1 + 13;
  unint64_t v79 = v13;
  unint64_t v16 = v13 * v12;
  unint64_t v17 = a1[14] - v14;
  if (v16 <= v17)
  {
    if (v16 < v17) {
      a1[14] = v14 + v16;
    }
  }
  else
  {
    std::vector<char>::__append((std::vector<char> *)(a1 + 13), v16 - v17);
  }
  unint64_t v18 = a1 + 7;
  std::vector<unsigned long>::resize((uint64_t)(a1 + 7), 3 * v12);
  unint64_t v19 = v12;
  uint64_t v20 = a1 + 10;
  std::vector<unsigned short>::resize((uint64_t)(a1 + 10), 2 * v19);
  unint64_t v21 = (void *)a1[7];
  v21[2 * v19] = 0;
  *unint64_t v21 = 0;
  *(_WORD *)a1[10] = 0;
  *(unsigned char *)a1[13] = 0;
  unint64_t v78 = v19;
  if (v19 >= 2)
  {
    uint64_t v22 = 0;
    uint64_t v23 = 3;
    if (v10 < v9) {
      uint64_t v23 = 5;
    }
    do
    {
      uint64_t v24 = a1[v23];
      uint64_t v25 = (void *)(a1[7] + 8 * v22);
      *(void *)((char *)v25 + ((16 * v19) | 8)) = v24;
      v25[1] = *v25 + v24;
      *(_WORD *)(a1[10] + 2 * v22 + 2) = 0;
      *(unsigned char *)(a1[13] + v22++ + 1) = v75;
    }
    while (v19 - 1 != v22);
  }
  unint64_t v26 = v19;
  if (v79 >= 2)
  {
    uint64_t v27 = 0;
    unint64_t v28 = 0;
    uint64_t v29 = 40;
    if (v10 < v9) {
      uint64_t v29 = 24;
    }
    uint64_t v76 = v29;
    unint64_t v30 = v19 + 1;
    uint64_t v31 = 1;
    unint64_t v32 = v19;
    uint64_t v33 = (16 * v19) | 8;
    while (1)
    {
      uint64_t v34 = *(uint64_t *)((char *)a1 + v76);
      unint64_t v81 = v32;
      unint64_t v82 = v28;
      *(void *)(a1[7] + 8 * vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = *(void *)(a1[7] + 8 * v28) + v34;
      *(_WORD *)(a1[10] + 2 * vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
      uint64_t v80 = v31;
      *(unsigned char *)(a1[13] + v31 * v19) = v77;
      if (v19 >= 2) {
        break;
      }
LABEL_49:
      unint64_t v28 = v81;
      uint64_t v31 = v80 + 1;
      ++v6;
      unint64_t v19 = v78;
      v30 += v78;
      v27 += v78;
      unint64_t v32 = v82;
      unint64_t v26 = v82;
      if (v80 + 1 == v79) {
        goto LABEL_50;
      }
    }
    uint64_t v35 = 0;
    unint64_t v36 = v32 - 1;
    uint64_t v37 = 2 * v28;
    uint64_t v38 = 8 * v28;
    unint64_t v39 = v28 + 1;
    uint64_t v40 = 2 * v32 + 2;
    uint64_t v41 = 8 * v32 + 8;
    uint64_t v42 = 1;
    while (1)
    {
      if (v10 >= v9)
      {
        uint64_t v43 = v7[v35];
        uint64_t v44 = *v6;
      }
      else
      {
        uint64_t v43 = *v6;
        uint64_t v44 = v7[v35];
      }
      if (v43 == v44)
      {
        int v46 = 0;
        unint64_t v47 = *(void *)(*v18 + v38 + 8 * v35);
        if (*(unsigned char *)(*v15 + v27 + v35) == 67) {
          unsigned __int16 v48 = *(_WORD *)(*v20 + v37 + 2 * v35);
        }
        else {
          unsigned __int16 v48 = *(_WORD *)(*v20 + v37 + 2 * v35) + 1;
        }
        char v49 = 67;
      }
      else
      {
        uint64_t v45 = a1[1];
        if (v45 == -1)
        {
          char v49 = 0;
          unint64_t v47 = 0;
          unsigned __int16 v48 = 0;
          int v46 = 1;
        }
        else
        {
          int v46 = 0;
          unint64_t v47 = *(void *)(*v18 + v38 + 8 * v35) + v45;
          unsigned __int16 v48 = *(_WORD *)(*v20 + v37 + 2 * v35);
          char v49 = 83;
        }
      }
      uint64_t v50 = *v18;
      if (v10 >= v9)
      {
        unint64_t v51 = v39 + v35;
        uint64_t v52 = v34;
      }
      else
      {
        unint64_t v51 = v36 + v42;
        uint64_t v52 = *(void *)(v50 + v33 + 8 * v35);
      }
      unint64_t v53 = *(void *)(v50 + 8 * v51) + v52;
      if (v53 < v47) {
        int v54 = 1;
      }
      else {
        int v54 = v46;
      }
      if (v54 == 1)
      {
        LOWORD(v51) = *(_WORD *)(*v20 + 2 * v51);
      }
      else
      {
        if (v53 != v47) {
          goto LABEL_40;
        }
        LODWORD(v51) = *(unsigned __int16 *)(*v20 + 2 * v51);
        if (v51 >= v48) {
          goto LABEL_40;
        }
      }
      char v49 = 73;
      unint64_t v47 = v53;
      unsigned __int16 v48 = v51;
LABEL_40:
      if (v10 >= v9)
      {
        unint64_t v55 = v36 + v42;
        uint64_t v56 = *(void *)(v50 + v33 + 8 * v35);
      }
      else
      {
        unint64_t v55 = v39 + v35;
        uint64_t v56 = v34;
      }
      unint64_t v57 = *(void *)(v50 + 8 * v55) + v56;
      if (v57 >= v47)
      {
        uint64_t v58 = *v20;
        if (v57 != v47) {
          goto LABEL_48;
        }
        LODWORD(v55) = *(unsigned __int16 *)(v58 + 2 * v55);
        if (v55 >= v48) {
          goto LABEL_48;
        }
      }
      else
      {
        uint64_t v58 = *v20;
        LOWORD(v55) = *(_WORD *)(*v20 + 2 * v55);
      }
      char v49 = 68;
      unint64_t v47 = v57;
      unsigned __int16 v48 = v55;
LABEL_48:
      *(void *)(v50 + v41 + 8 * v35) = v47;
      *(_WORD *)(v58 + v40 + 2 * v35) = v48;
      *(unsigned char *)(*v15 + v30 + v35) = v49;
      ++v42;
      if (v78 - 1 == ++v35) {
        goto LABEL_49;
      }
    }
  }
LABEL_50:
  MEMORY[0x216698410](a6, &byte_2140B33BB);
  std::string::reserve((std::string *)a6, v79 + v19);
  uint64_t v59 = a1[13];
  uint64_t v60 = ~v59 + a1[14];
  uint64_t v61 = 0;
  while (v60)
  {
    std::string::push_back((std::string *)a6, *(unsigned char *)(v59 + v60));
    uint64_t v59 = *v15;
    int v62 = *(unsigned __int8 *)(*v15 + v60);
    if (v62 != 67) {
      ++v61;
    }
    uint64_t v63 = v60 + ~v19;
    if (v62 == v75) {
      uint64_t v63 = v60 - 1;
    }
    if (v62 == v77) {
      v60 -= v19;
    }
    else {
      uint64_t v60 = v63;
    }
  }
  int v64 = *(char *)(a6 + 23);
  BOOL v65 = v64 < 0;
  if (v64 >= 0) {
    unint64_t v66 = a6;
  }
  else {
    unint64_t v66 = *(void *)a6;
  }
  if (v65) {
    uint64_t v67 = *(void *)(a6 + 8);
  }
  else {
    uint64_t v67 = *(unsigned __int8 *)(a6 + 23);
  }
  long long v68 = (unsigned char *)(v66 + v67 - 1);
  if (v67) {
    BOOL v69 = (unint64_t)v68 > v66;
  }
  else {
    BOOL v69 = 0;
  }
  if (v69)
  {
    unint64_t v70 = v66 + 1;
    do
    {
      char v71 = *(unsigned char *)(v70 - 1);
      *(unsigned char *)(v70 - 1) = *v68;
      *v68-- = v71;
    }
    while (v70++ < (unint64_t)v68);
  }
  return *(void *)(*v18 + 8 * (v19 + v26) - 8);
}

void TResultManager::replace(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, char *a6)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  unint64_t v28 = &v30;
  long long v29 = xmmword_214085190;
  char v31 = 1;
  if (a4)
  {
    for (uint64_t i = 0; i != a4; ++i)
    {
      uint64_t v12 = 0;
      uint64_t v13 = *(char **)(*(void *)(a1[5] + 8 * *(void *)(a2 + 8 * i) - 8) + 16);
      while (v13[v12++])
        ;
      TBuffer<char>::insert((uint64_t)&v28, *((unint64_t *)&v29 + 1), v13, v12 - 1);
    }
  }
  uint64_t v24 = (char *)&v26;
  long long v25 = xmmword_214085190;
  char v27 = 1;
  for (unint64_t j = a5 + a4; j < a3; ++j)
  {
    uint64_t v16 = 0;
    unint64_t v17 = *(char **)(*(void *)(a1[5] + 8 * *(void *)(a2 + 8 * j) - 8) + 16);
    while (v17[v16++])
      ;
    TBuffer<char>::insert((uint64_t)&v24, *((unint64_t *)&v25 + 1), v17, v16 - 1);
  }
  if (*((void *)&v29 + 1) >= (unint64_t)v29)
  {
    if (v31)
    {
      LOBYTE(v23) = 0;
      TBuffer<char>::insert((uint64_t)&v28, *((unint64_t *)&v29 + 1), (char *)&v23, 1uLL);
      --*((void *)&v29 + 1);
    }
    else if ((void)v29)
    {
      *((unsigned char *)v28 + v29 - 1) = 0;
    }
  }
  else
  {
    *((unsigned char *)v28 + *((void *)&v29 + 1)) = 0;
  }
  unint64_t v19 = (const char *)v28;
  if (*((void *)&v25 + 1) >= (unint64_t)v25)
  {
    if (v27)
    {
      LOBYTE(v23) = 0;
      TBuffer<char>::insert((uint64_t)&v24, *((unint64_t *)&v25 + 1), (char *)&v23, 1uLL);
      --*((void *)&v25 + 1);
    }
    else if ((void)v25)
    {
      v24[(void)v25 - 1] = 0;
    }
  }
  else
  {
    v24[*((void *)&v25 + 1)] = 0;
  }
  uint64_t v20 = TTokenizer::tokenize(a1[4], a6, v19, v24, *(void *)(*(void *)(a1[4] + 24) + 29784), 0);
  TFsa::TFsa((TFsa *)v22);
  tokenizerResultToFsa(v20, 0, a1[3], a1[4]);
}

void sub_213ED57FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (LOBYTE(STACK[0x3D8]))
  {
    if (STACK[0x2C0] != v72 && STACK[0x2C0] != 0) {
      MEMORY[0x216698730]();
    }
  }
  if (LOBYTE(STACK[0x4F8]))
  {
    unint64_t v76 = STACK[0x3E0];
    if (STACK[0x3E0] != v73)
    {
      if (v76) {
        MEMORY[0x216698730](v76, 0x1000C4077774924);
      }
    }
  }
  if (__p) {
    operator delete(__p);
  }
  if (a32) {
    operator delete(a32);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  TFsa::~TFsa((TFsa *)&a41);
  if (a69)
  {
    a70 = (uint64_t)a69;
    operator delete(a69);
  }
  TFsa::~TFsa((TFsa *)&a72);
  if (LOBYTE(STACK[0x618]))
  {
    unint64_t v77 = STACK[0x500];
    if (STACK[0x500] != a11)
    {
      if (v77) {
        MEMORY[0x216698730](v77, 0x1000C4077774924);
      }
    }
  }
  if (LOBYTE(STACK[0x738]))
  {
    unint64_t v78 = STACK[0x620];
    if (STACK[0x620] != a12)
    {
      if (v78) {
        MEMORY[0x216698730](v78, 0x1000C4077774924);
      }
    }
  }
  _Unwind_Resume(a1);
}

void TResultManager::getAllHints(uint64_t a1, uint64_t a2)
{
  TBuffer<TPItnRuleHandle_fake **>::resize(a2, 0);
  if (*(void *)(a1 + 72) != *(void *)(a1 + 64))
  {
    unint64_t v4 = 0;
    do
    {
      unint64_t v5 = ++v4;
      TBuffer<TPItnRuleHandle_fake **>::insert(a2, *(void *)(a2 + 16), (uint64_t *)&v5, 1uLL);
    }
    while (v4 < 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 3));
  }
}

uint64_t TResultManager::getHintDescription(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 64) + 104 * a2;
  unint64_t v4 = (unsigned __int8 *)(v3 - 24);
  if (*(char *)(v3 - 1) < 0) {
    unint64_t v4 = *(unsigned __int8 **)v4;
  }
  return TLocaleInfo::multiByteToUnicode(*(void *)(a1 + 24) + 240, v4, a3);
}

uint64_t TResultManager::createHint(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v22 = 0;
  *(_OWORD *)std::wstring __p = 0u;
  *(_OWORD *)unint64_t v19 = 0u;
  memset(v20, 0, sizeof(v20));
  memset(v18, 0, sizeof(v18));
  unint64_t v10 = a1[9];
  if (v10 >= a1[10])
  {
    uint64_t v14 = std::vector<THint>::__push_back_slow_path<THint>(a1 + 8, (uint64_t)v18);
    int v15 = SHIBYTE(v22);
    a1[9] = v14;
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)unint64_t v10 = 0uLL;
    *(_OWORD *)(v10 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0uLL;
    long long v11 = *(_OWORD *)v19;
    *(void **)(v10 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = v20[0];
    *(_OWORD *)(v10 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v11;
    v19[1] = 0;
    v20[0] = 0;
    v19[0] = 0;
    uint64_t v12 = v20[3];
    *(_OWORD *)(v10 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = *(_OWORD *)&v20[1];
    *(void *)(v10 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = v12;
    v20[1] = 0;
    v20[2] = 0;
    long long v13 = *(_OWORD *)__p;
    *(void *)(v10 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = v22;
    *(_OWORD *)(v10 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = v13;
    __p[1] = 0;
    uint64_t v22 = 0;
    v20[3] = 0;
    __p[0] = 0;
    a1[9] = v10 + 104;
  }
  if (SHIBYTE(v20[3]) < 0) {
    operator delete(v20[1]);
  }
  if (SHIBYTE(v20[0]) < 0) {
    operator delete(v19[0]);
  }
  uint64_t v16 = a1[9];
  *(void *)(v16 - DgnArray<LinearTransform>::releaseAll((uint64_t)this + 104) = a2;
  *(void *)(v16 - DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = a3;
  *(void *)(v16 - 88) = a5;
  *(void *)(v16 - DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = *(void *)(a1[1] + 136);
  if (a4)
  {
    MEMORY[0x216698410](v16 - 24, a4);
    uint64_t v16 = a1[9];
  }
  return v16 - 104;
}

void sub_213ED5BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void THint::~THint(void **this)
{
  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
}

uint64_t TResultManager::createHint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = MEMORY[0x270FA5388](a1, a2, a3, a4, a5);
  long long v11 = v10;
  uint64_t v12 = v9;
  unsigned int v13 = v8;
  uint64_t v14 = v6;
  int v15 = (void *)v5;
  uint64_t v138 = *MEMORY[0x263EF8340];
  uint64_t v134 = v136;
  long long v135 = xmmword_214085190;
  char v137 = 1;
  if (v8 == 1)
  {
    uint64_t v116 = v6;
    uint64_t v117 = v7;
    uint64_t v24 = (const void *)TParamManager::nameToParam(*(void *)(v5 + 8), v9);
    if (v24 || (uint64_t v24 = (const void *)TParamManager::nameToParam(*(void *)(v15[3] + 336), v12)) != 0) {
    else
    }
      long long v25 = 0;
    __int32 v26 = *v11;
    uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle(v25);
    if ((v26 != 48) != (*((unsigned char *)v25 + TParam::getValidConfig(v25, ActiveConfigHandle) + 152) != 0))
    {
      unint64_t v28 = (char *)v25 + 24 * (v26 != 48);
      long long v29 = v28 + 200;
      int v30 = v28[223];
      if (v30 < 0)
      {
        if (*((void *)v29 + 1))
        {
          long long v29 = *(char **)v29;
          if (v29) {
            goto LABEL_48;
          }
        }
      }
      else if (v30)
      {
        goto LABEL_48;
      }
      uint64_t v50 = v15[1];
      uint64_t v51 = TParam::getActiveConfigHandle((TParam *)(v50 + 19248));
      if (*(unsigned char *)(v50 + TParam::getValidConfig((TParam *)(v50 + 19248), v51) + 19400))
      {
        uint64_t v56 = "false";
        if (v26 != 48) {
          uint64_t v56 = "true";
        }
        tknPrintf("No description found for allowable value '%s'; hint rejected.\n", v52, v53, v54, v55, v56);
      }
      goto LABEL_102;
    }
    uint64_t v32 = v15[1];
    uint64_t v33 = TParam::getActiveConfigHandle((TParam *)(v32 + 19248));
    if (!*(unsigned char *)(v32 + TParam::getValidConfig((TParam *)(v32 + 19248), v33) + 19400))
    {
LABEL_102:
      uint64_t Hint = 0;
      goto LABEL_107;
    }
    loggableUnicode((unsigned int *)v12, &__p);
    if (v126 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
LABEL_41:
    tknPrintf("Parameter %s already set to desired value; hint rejected.\n", v34, v35, v36, v37, p_p);
    goto LABEL_42;
  }
  if (v8 == 3)
  {
    uint64_t v116 = v6;
    uint64_t v117 = v7;
    char v129 = (__int32 *)v131;
    long long v130 = xmmword_214085190;
    char v132 = 1;
    TLexicon::getWrittenForm(*(void *)(v5 + 24), v9, (uint64_t)&v129);
    if (!*((void *)&v130 + 1))
    {
      uint64_t v39 = v15[1];
      uint64_t v40 = TParam::getActiveConfigHandle((TParam *)(v39 + 19248));
      if (*(unsigned char *)(v39 + TParam::getValidConfig((TParam *)(v39 + 19248), v40) + 19400))
      {
        loggableUnicode((unsigned int *)v12, &__p);
        uint64_t v45 = v126 >= 0 ? &__p : (void **)__p;
        tknPrintf("Can't create hint for wordname with empty written form: '%s'; hint rejected;\n",
          v41,
          v42,
          v43,
          v44,
          v45);
        if (SHIBYTE(v126) < 0) {
          operator delete(__p);
        }
      }
      goto LABEL_96;
    }
    if (!*v11) {
      goto LABEL_70;
    }
    if (*((void *)&v130 + 1) >= (unint64_t)v130)
    {
      if (v132)
      {
        LODWORD(__p) = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v129, *((unint64_t *)&v130 + 1), (int *)&__p, 1uLL);
        uint64_t v23 = v129;
        --*((void *)&v130 + 1);
      }
      else
      {
        uint64_t v23 = v129;
        if ((void)v130) {
          v129[(void)v130 - 1] = 0;
        }
      }
    }
    else
    {
      uint64_t v23 = v129;
      v129[*((void *)&v130 + 1)] = 0;
    }
    if (!wcscmp(v23, v11))
    {
LABEL_70:
      int v66 = 0;
      int v67 = 0;
      int v64 = (char *)v15[2];
      BOOL v65 = (__int32 *)(v64 + 88);
      if (v64[111] < 0)
      {
LABEL_71:
        BOOL v65 = *(__int32 **)v65;
        int v67 = v66;
      }
    }
    else
    {
      int v64 = (char *)v15[2];
      BOOL v65 = (__int32 *)(v64 + 112);
      int v66 = 1;
      int v67 = 1;
      if (v64[135] < 0) {
        goto LABEL_71;
      }
    }
    if (*v65)
    {
      long long v115 = v65;
      std::wstring __p = v127;
      long long v126 = xmmword_214085190;
      char v128 = 1;
      (*(void (**)(char *, __int32 *, void, void **))(*(void *)v64 + 48))(v64, v12, 0, &__p);
      if (*((void *)&v126 + 1))
      {
        unint64_t v68 = 0;
        char v69 = 0;
        int v70 = 0;
        do
        {
          unint64_t v71 = *((void *)__p + v68);
          if (v71 && (uint64_t v72 = *(void *)(v15[2] + 32), v71 <= (*(void *)(v15[2] + 40) - v72) >> 3)) {
            uint64_t v73 = *(void *)(v72 + 8 * v71 - 8);
          }
          else {
            uint64_t v73 = 0;
          }
          long long v74 = (const __int32 *)(v73 + 120);
          int v75 = *(char *)(v73 + 143);
          unint64_t v76 = (const __int32 *)(v73 + 120);
          if (v75 < 0) {
            unint64_t v76 = *(const __int32 **)v74;
          }
          if (*v76)
          {
            if (*(void *)(v73 + 192) != -1) {
              goto LABEL_126;
            }
            if (!v67) {
              goto LABEL_185;
            }
            if (v75 < 0) {
              long long v74 = *(const __int32 **)v74;
            }
            if (!wcscmp(v74, v11))
            {
LABEL_185:
              if (*(unsigned char *)(v73 + 144))
              {
                if (*(void *)(v73 + 56) == *(void *)(v73 + 48) && *(void *)(v73 + 32) == *(void *)(v73 + 24))
                {
                  int v70 = 1;
                }
                else
                {
                  int v70 = 1;
                  char v69 = 1;
                }
              }
            }
          }
          ++v68;
        }
        while (v68 < *((void *)&v126 + 1));
      }
      else
      {
        int v70 = 0;
        char v69 = 0;
      }
      if ((v69 & 1) == 0 && ((v67 ^ v70) & 1) == 0)
      {
        uint64_t v81 = v15[1];
        uint64_t v82 = TParam::getActiveConfigHandle((TParam *)(v81 + 19248));
        if (*(unsigned char *)(v81 + TParam::getValidConfig((TParam *)(v81 + 19248), v82) + 19400))
        {
          loggableUnicode((unsigned int *)v12, &v121);
          uint64_t v87 = v122 >= 0 ? &v121 : (void **)v121;
          tknPrintf("Rewrite rule already defined for '%s'; hint rejected.\n", v83, v84, v85, v86, v87);
          if (SHIBYTE(v122) < 0) {
            operator delete(v121);
          }
        }
        int v79 = 1;
LABEL_177:
        if (v128 && __p != v127 && __p) {
          MEMORY[0x216698730]();
        }
LABEL_97:
        if (v132 && v129 != (__int32 *)v131 && v129) {
          MEMORY[0x216698730]();
        }
        if (!v79) {
          goto LABEL_103;
        }
        goto LABEL_102;
      }
LABEL_126:
      unint64_t v120 = 0;
      uint64_t v121 = v123;
      long long v122 = xmmword_214085190;
      char v124 = 1;
      uint64_t v118 = 0;
      long long v119 = 0;
      if (*((void *)&v130 + 1) >= (unint64_t)v130)
      {
        if (v132)
        {
          int v133 = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v129, *((unint64_t *)&v130 + 1), &v133, 1uLL);
          uint64_t v88 = v129;
          --*((void *)&v130 + 1);
          uint64_t v90 = v119;
          unint64_t v91 = v120;
          goto LABEL_130;
        }
        uint64_t v88 = v129;
        if (!(void)v130)
        {
LABEL_129:
          uint64_t v90 = 0;
          unint64_t v91 = 0;
LABEL_130:
          uint64_t v92 = ((char *)v90 - (unsigned char *)v118) >> 3;
          if ((unint64_t)(v92 + 1) >> 61) {
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v93 = v91 - (void)v118;
          uint64_t v94 = v93 >> 2;
          if (v93 >> 2 <= (unint64_t)(v92 + 1)) {
            uint64_t v94 = v92 + 1;
          }
          if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v95 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v95 = v94;
          }
          if (v95) {
            uint64_t v96 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v120, v95);
          }
          else {
            uint64_t v96 = 0;
          }
          uint64_t v97 = (__int32 **)&v96[8 * v92];
          uint64_t v98 = &v96[8 * v95];
          *uint64_t v97 = v88;
          unint64_t v99 = v97 + 1;
          unint64_t v101 = (char *)v118;
          uint64_t v100 = (char *)v119;
          if (v119 != v118)
          {
            do
            {
              uint64_t v102 = (__int32 *)*((void *)v100 - 1);
              v100 -= 8;
              *--uint64_t v97 = v102;
            }
            while (v100 != v101);
            uint64_t v100 = (char *)v118;
          }
          uint64_t v118 = v97;
          long long v119 = v99;
          unint64_t v120 = (unint64_t)v98;
          if (v100) {
            operator delete(v100);
          }
          long long v119 = v99;
          if ((unint64_t)v99 >= v120)
          {
            uint64_t v104 = ((char *)v99 - (unsigned char *)v118) >> 3;
            if ((unint64_t)(v104 + 1) >> 61) {
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v105 = (uint64_t)(v120 - (void)v118) >> 2;
            if (v105 <= v104 + 1) {
              unint64_t v105 = v104 + 1;
            }
            if (v120 - (unint64_t)v118 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v106 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v106 = v105;
            }
            if (v106) {
              uint64_t v107 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v120, v106);
            }
            else {
              uint64_t v107 = 0;
            }
            unint64_t v108 = (__int32 **)&v107[8 * v104];
            long long v109 = &v107[8 * v106];
            *unint64_t v108 = v11;
            uint64_t v103 = v108 + 1;
            long long v111 = (char *)v118;
            long long v110 = (char *)v119;
            if (v119 != v118)
            {
              do
              {
                long long v112 = (__int32 *)*((void *)v110 - 1);
                v110 -= 8;
                *--unint64_t v108 = v112;
              }
              while (v110 != v111);
              long long v110 = (char *)v118;
            }
            uint64_t v118 = v108;
            long long v119 = v103;
            unint64_t v120 = (unint64_t)v109;
            if (v110) {
              operator delete(v110);
            }
          }
          else
          {
            const char *v99 = v11;
            uint64_t v103 = v99 + 1;
          }
          long long v119 = v103;
          formatString(v115, &v118, (uint64_t)&v121);
          uint64_t v113 = v15[3];
          if (*((void *)&v122 + 1) >= (unint64_t)v122)
          {
            if (v124)
            {
              int v133 = 0;
              TBuffer<wchar_t>::insert((uint64_t)&v121, *((unint64_t *)&v122 + 1), &v133, 1uLL);
              long long v114 = (unsigned int *)v121;
              --*((void *)&v122 + 1);
            }
            else
            {
              long long v114 = (unsigned int *)v121;
              if ((void)v122) {
                *((_DWORD *)v121 + v122 - 1) = 0;
              }
            }
          }
          else
          {
            long long v114 = (unsigned int *)v121;
            *((_DWORD *)v121 + *((void *)&v122 + 1)) = 0;
          }
          TLocaleInfo::unicodeToMultiByte(v113 + 240, v114, (uint64_t)&v134);
          if (v118)
          {
            long long v119 = (__int32 **)v118;
            operator delete(v118);
          }
          if (v124 && v121 != v123 && v121) {
            MEMORY[0x216698730]();
          }
          int v79 = 0;
          goto LABEL_177;
        }
        uint64_t v89 = &v129[v130 - 1];
      }
      else
      {
        uint64_t v88 = v129;
        uint64_t v89 = &v129[*((void *)&v130 + 1)];
      }
      *uint64_t v89 = 0;
      goto LABEL_129;
    }
    uint64_t v77 = v15[1];
    uint64_t v78 = TParam::getActiveConfigHandle((TParam *)(v77 + 19248));
    if (*(unsigned char *)(v77 + TParam::getValidConfig((TParam *)(v77 + 19248), v78) + 19400)) {
      tknPrintString("Hint template not found for rule rewrite; hint rejected.\n");
    }
LABEL_96:
    int v79 = 1;
    goto LABEL_97;
  }
  if (v8 != 2)
  {
    uint64_t v31 = 0;
    goto LABEL_105;
  }
  uint64_t v116 = v6;
  uint64_t v117 = v7;
  uint64_t v16 = (const void *)TParamManager::nameToParam(*(void *)(v5 + 8), v9);
  if (v16 || (uint64_t v16 = (const void *)TParamManager::nameToParam(*(void *)(v15[3] + 336), v12)) != 0) {
  else
  }
    unint64_t v17 = 0;
  unint64_t v18 = TStringParam::get(v17);
  if (wcscmp((const __int32 *)v18, v11))
  {
    uint64_t v19 = *((void *)v17 + 163);
    if (*((void *)v17 + 164) == v19)
    {
LABEL_103:
      uint64_t v31 = *((void *)&v135 + 1);
      if (*((void *)&v135 + 1) >= (unint64_t)v135)
      {
        if (v137)
        {
          LOBYTE(__p) = 0;
          TBuffer<char>::insert((uint64_t)&v134, *((unint64_t *)&v135 + 1), (char *)&__p, 1uLL);
          --*((void *)&v135 + 1);
          uint64_t v14 = v116;
          uint64_t v7 = v117;
        }
        else
        {
          uint64_t v14 = v116;
          uint64_t v7 = v117;
          if ((void)v135) {
            v134[(void)v135 - 1] = 0;
          }
        }
        goto LABEL_106;
      }
      uint64_t v14 = v116;
      uint64_t v7 = v117;
LABEL_105:
      v134[v31] = 0;
LABEL_106:
      uint64_t Hint = TResultManager::createHint(v15, v14, v7, (uint64_t)v134, v13);
      MEMORY[0x216698480](Hint + 32, v12);
      MEMORY[0x216698480](Hint + 56, v11);
      goto LABEL_107;
    }
    uint64_t v20 = 0;
    unint64_t v21 = 0;
    while (1)
    {
      uint64_t v22 = (const __int32 *)(v19 + v20);
      if (*(char *)(v19 + v20 + 23) < 0) {
        uint64_t v22 = *(const __int32 **)v22;
      }
      if (!wcscmp(v11, v22)) {
        break;
      }
      ++v21;
      uint64_t v19 = *((void *)v17 + 163);
      v20 += 24;
      if (v21 >= 0xAAAAAAAAAAAAAAABLL * ((*((void *)v17 + 164) - v19) >> 3)) {
        goto LABEL_103;
      }
    }
    uint64_t v49 = *((void *)v17 + 169);
    if (v49 != *((void *)v17 + 170))
    {
      long long v29 = (char *)(v49 + v20);
      if ((*(char *)(v49 + v20 + 23) & 0x80000000) == 0 || (long long v29 = *(char **)v29) != 0)
      {
LABEL_48:
        TLocaleInfo::unicodeToMultiByte(v15[3] + 240, (unsigned int *)v29, (uint64_t)&v134);
        goto LABEL_103;
      }
    }
    uint64_t v57 = v15[1];
    uint64_t v58 = TParam::getActiveConfigHandle((TParam *)(v57 + 19248));
    if (*(unsigned char *)(v57 + TParam::getValidConfig((TParam *)(v57 + 19248), v58) + 19400))
    {
      loggableUnicode((unsigned int *)v11, &__p);
      if (v126 >= 0) {
        uint64_t v63 = &__p;
      }
      else {
        uint64_t v63 = __p;
      }
      tknPrintf("No description found for allowable value '%s'; hint rejected.\n", v59, v60, v61, v62, v63);
LABEL_42:
      if (SHIBYTE(v126) < 0) {
        operator delete(__p);
      }
      goto LABEL_44;
    }
    goto LABEL_102;
  }
  uint64_t v46 = v15[1];
  uint64_t v47 = TParam::getActiveConfigHandle((TParam *)(v46 + 19248));
  if (*(unsigned char *)(v46 + TParam::getValidConfig((TParam *)(v46 + 19248), v47) + 19400))
  {
    loggableUnicode((unsigned int *)v12, &__p);
    if (v126 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    goto LABEL_41;
  }
LABEL_44:
  uint64_t Hint = 0;
LABEL_107:
  if (v137 && v134 != v136 && v134) {
    MEMORY[0x216698730]();
  }
  return Hint;
}

void sub_213ED6848(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x48F]) < 0) {
    operator delete((void *)STACK[0x478]);
  }
  if (LOBYTE(STACK[0x11D8]))
  {
    unint64_t v3 = STACK[0x10C0];
    if (STACK[0x10C0] != v1)
    {
      if (v3) {
        MEMORY[0x216698730](v3, 0x1000C4077774924);
      }
    }
  }
  _Unwind_Resume(a1);
}

uint64_t TResultManager::applyHint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = MEMORY[0x270FA5388](a1, a2, a3, a4, a5);
  uint64_t v7 = result;
  if (v6 && (uint64_t v8 = *(void *)(result + 64), 0x4EC4EC4EC4EC4EC5 * ((*(void *)(result + 72) - v8) >> 3) >= v6)) {
    uint64_t v9 = v8 + 104 * v6 - 104;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(void *)(result + 8);
  uint64_t v73 = *(void *)(v10 + 136);
  uint64_t v74 = v10;
  *(void *)(v10 + 136) = *(void *)(v9 + 24);
  uint64_t v11 = *(void *)(v9 + 16);
  if ((unint64_t)(v11 - 1) < 2)
  {
    uint64_t v12 = (const __int32 *)(v9 + 32);
    unsigned int v13 = (const __int32 *)(v9 + 32);
    if (*(char *)(v9 + 55) < 0) {
      unsigned int v13 = *(const __int32 **)v12;
    }
    uint64_t v14 = (void *)TParamManager::nameToParam(v10, v13);
    if (!v14)
    {
      if (*(char *)(v9 + 55) < 0) {
        uint64_t v12 = *(const __int32 **)v12;
      }
      uint64_t v14 = (void *)TParamManager::nameToParam(*(void *)(*(void *)(v7 + 24) + 336), v12);
    }
    int v15 = (void *)(v9 + 56);
    if (*(char *)(v9 + 79) < 0) {
      int v15 = (void *)*v15;
    }
    (*(void (**)(void *, void, void *))(*v14 + 32))(v14, *(void *)(v9 + 24), v15);
    uint64_t result = v14[18];
    if (result)
    {
      uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle(v16);
      uint64_t result = TParam::getValidConfig(v16, ActiveConfigHandle);
      if (!*((unsigned char *)v16 + result + 152)) {
        uint64_t result = TBoolParam::set(v16, 1);
      }
    }
    goto LABEL_215;
  }
  if (v11 != 3) {
    goto LABEL_215;
  }
  long long v119 = v121;
  long long v120 = xmmword_214085190;
  char v122 = 1;
  long long v115 = v117;
  long long v116 = xmmword_214085190;
  char v118 = 1;
  uint64_t v81 = (const __int32 **)(v9 + 32);
  (*(void (**)(void))(**(void **)(result + 16) + 48))(*(void *)(result + 16));
  unint64_t v18 = (const __int32 *)(v9 + 32);
  if (*(char *)(v9 + 55) < 0) {
    unint64_t v18 = *v81;
  }
  (*(void (**)(void, const __int32 *, uint64_t, unsigned char **))(**(void **)(v7 + 16) + 48))(*(void *)(v7 + 16), v18, 1, &v115);
  uint64_t v19 = (const __int32 *)(v9 + 32);
  if (*(char *)(v9 + 55) < 0) {
    uint64_t v19 = *v81;
  }
  uint64_t v20 = (const __int32 *)(v9 + 56);
  if (*(char *)(v9 + 79) < 0) {
    uint64_t v20 = *(const __int32 **)(v9 + 56);
  }
  uint64_t result = wcscmp(v19, v20);
  int v21 = result;
  int v75 = (__int32 *)(v9 + 56);
  uint64_t v80 = v9;
  long long v111 = (__int32 *)v113;
  long long v112 = xmmword_214085190;
  char v114 = 1;
  uint64_t v107 = (__int32 *)v109;
  long long v108 = xmmword_214085190;
  char v110 = 1;
  uint64_t v103 = v105;
  long long v104 = xmmword_214085190;
  char v106 = 1;
  unint64_t v99 = v101;
  long long v100 = xmmword_214085190;
  char v102 = 1;
  unint64_t v95 = v97;
  long long v96 = xmmword_214085190;
  char v98 = 1;
  unint64_t v91 = v93;
  long long v92 = xmmword_214085190;
  char v94 = 1;
  uint64_t v87 = v89;
  long long v88 = xmmword_214085190;
  char v90 = 1;
  uint64_t v83 = v85;
  long long v84 = xmmword_214085190;
  char v86 = 1;
  if (!*((void *)&v120 + 1))
  {
    uint64_t v79 = -1;
    if (!result) {
      goto LABEL_175;
    }
LABEL_169:
    if (v79 == -1)
    {
      unint64_t v71 = v75;
      if (*(char *)(v80 + 55) < 0) {
        uint64_t v81 = (const __int32 **)*v81;
      }
      if (*(char *)(v80 + 79) < 0) {
        unint64_t v71 = *(__int32 **)v75;
      }
      LOBYTE(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = 0;
      uint64_t result = (*(uint64_t (**)(void, const __int32 **, __int32 *, uint64_t, void, void, void, void, void, void, uint64_t, int))(**(void **)(v7 + 16) + 16))(*(void *)(v7 + 16), v81, v71, 1, 0, 0, 0, 0, 0, 0, -1, v72);
    }
    goto LABEL_175;
  }
  unint64_t v22 = 0;
  uint64_t v79 = -1;
  do
  {
    (*(void (**)(void, void, __int32 **))(**(void **)(v7 + 16) + 64))(*(void *)(v7 + 16), *(void *)&v119[8 * v22], &v111);
    (*(void (**)(void, void, void, unsigned char **))(**(void **)(v7 + 16) + 72))(*(void *)(v7 + 16), *(void *)&v119[8 * v22], 0, &v103);
    (*(void (**)(void, void, uint64_t, unsigned char **))(**(void **)(v7 + 16) + 72))(*(void *)(v7 + 16), *(void *)&v119[8 * v22], 1, &v95);
    if (v21)
    {
      if (*((void *)&v116 + 1))
      {
        unint64_t v23 = 0;
        uint64_t v24 = -1;
        do
        {
          if ((*(unsigned int (**)(void, void))(**(void **)(v7 + 16) + 112))(*(void *)(v7 + 16), *(void *)&v115[8 * v23]))
          {
            (*(void (**)(void, void, __int32 **))(**(void **)(v7 + 16) + 64))(*(void *)(v7 + 16), *(void *)&v115[8 * v23], &v107);
            if (*((void *)&v112 + 1) >= (unint64_t)v112)
            {
              if (v114)
              {
                LODWORD(v123) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v111, *((unint64_t *)&v112 + 1), (int *)&v123, 1uLL);
                long long v25 = v111;
                --*((void *)&v112 + 1);
              }
              else
              {
                long long v25 = v111;
                if ((void)v112) {
                  v111[(void)v112 - 1] = 0;
                }
              }
            }
            else
            {
              long long v25 = v111;
              v111[*((void *)&v112 + 1)] = 0;
            }
            if (*((void *)&v108 + 1) >= (unint64_t)v108)
            {
              if (v110)
              {
                LODWORD(v123) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v107, *((unint64_t *)&v108 + 1), (int *)&v123, 1uLL);
                __int32 v26 = v107;
                --*((void *)&v108 + 1);
              }
              else
              {
                __int32 v26 = v107;
                if ((void)v108) {
                  v107[(void)v108 - 1] = 0;
                }
              }
            }
            else
            {
              __int32 v26 = v107;
              v107[*((void *)&v108 + 1)] = 0;
            }
            if (!wcscmp(v25, v26))
            {
              (*(void (**)(void, void, void, unsigned char **))(**(void **)(v7 + 16) + 72))(*(void *)(v7 + 16), *(void *)&v115[8 * v23], 0, &v99);
              uint64_t v27 = *((void *)&v104 + 1);
              if (*((void *)&v104 + 1) == *((void *)&v100 + 1))
              {
                if (*((void *)&v104 + 1))
                {
                  unint64_t v28 = v103;
                  long long v29 = v99;
                  while (*v28 == *v29)
                  {
                    ++v28;
                    ++v29;
                    if (!--v27) {
                      goto LABEL_48;
                    }
                  }
                }
                else
                {
LABEL_48:
                  (*(void (**)(void, void, uint64_t, unsigned char **))(**(void **)(v7 + 16) + 72))(*(void *)(v7 + 16), *(void *)&v115[8 * v23], 1, &v91);
                  uint64_t v30 = *((void *)&v96 + 1);
                  if (*((void *)&v96 + 1) == *((void *)&v92 + 1))
                  {
                    if (*((void *)&v96 + 1))
                    {
                      uint64_t v31 = v95;
                      uint64_t v32 = v91;
                      while (*v31 == *v32)
                      {
                        ++v31;
                        ++v32;
                        if (!--v30) {
                          goto LABEL_53;
                        }
                      }
                    }
                    else
                    {
LABEL_53:
                      if (v24 == -1
                        || (*(uint64_t (**)(void, void))(**(void **)(v7 + 16) + 120))(*(void *)(v7 + 16), *(void *)&v115[8 * v23]) == -1)
                      {
                        uint64_t v24 = *(void *)&v115[8 * v23];
                      }
                    }
                  }
                }
              }
            }
          }
          ++v23;
        }
        while (v23 < *((void *)&v116 + 1));
        if (v24 != -1) {
          (*(void (**)(void, uint64_t, unsigned char **))(**(void **)(v7 + 16) + 80))(*(void *)(v7 + 16), v24, &v83);
        }
        uint64_t v33 = *((void *)&v104 + 1);
        uint64_t v34 = *((void *)&v96 + 1);
      }
      else
      {
        uint64_t v33 = *((void *)&v104 + 1);
        uint64_t v34 = *((void *)&v96 + 1);
        uint64_t v24 = -1;
      }
      if (!(v33 | v34)) {
        goto LABEL_64;
      }
      if (*((void *)&v112 + 1) >= (unint64_t)v112)
      {
        if (v114)
        {
          LODWORD(v123) = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v111, *((unint64_t *)&v112 + 1), (int *)&v123, 1uLL);
          uint64_t v37 = v111;
          --*((void *)&v112 + 1);
        }
        else
        {
          uint64_t v37 = v111;
          if ((void)v112) {
            v111[(void)v112 - 1] = 0;
          }
        }
      }
      else
      {
        uint64_t v37 = v111;
        v111[*((void *)&v112 + 1)] = 0;
      }
      uint64_t v46 = v75;
      if (*(char *)(v80 + 79) < 0) {
        uint64_t v46 = *(const __int32 **)v75;
      }
      unsigned int v82 = wcscmp(v37, v46) == 0;
LABEL_92:
      if (v82 == (*(unsigned int (**)(void, void))(**(void **)(v7 + 16) + 112))(*(void *)(v7 + 16), *(void *)&v119[8 * v22]))
      {
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v7 + 16) + 120))(*(void *)(v7 + 16), *(void *)&v119[8 * v22]);
        if (result == -1) {
          goto LABEL_165;
        }
      }
      if (v24 == -1)
      {
        (*(void (**)(void, void, unsigned char **))(**(void **)(v7 + 16) + 80))(*(void *)(v7 + 16), *(void *)&v119[8 * v22], &v87);
        TBuffer<TPItnRuleControl>::resize((uint64_t)&v83, 0);
        unint64_t v47 = *((void *)&v88 + 1);
        if (*((void *)&v88 + 1))
        {
          uint64_t v48 = 0;
          unint64_t v49 = 0;
          while (!v21)
          {
            uint64_t v50 = *(void *)&v87[v48];
            if ((unint64_t)(v50 - 4) <= 0xFFFFFFFFFFFFFFFCLL) {
              goto LABEL_100;
            }
LABEL_101:
            ++v49;
            v48 += 16;
            if (v49 >= v47) {
              goto LABEL_102;
            }
          }
          uint64_t v50 = *(void *)&v87[v48];
LABEL_100:
          uint64_t v51 = *(void *)&v87[v48 + 8];
          *(void *)&long long v123 = v50;
          *((void *)&v123 + 1) = v51;
          TBuffer<TPItnRuleControl>::insert((uint64_t)&v83, *((unint64_t *)&v84 + 1), &v123, 1uLL);
          unint64_t v47 = *((void *)&v88 + 1);
          goto LABEL_101;
        }
      }
LABEL_102:
      (*(void (**)(void, void))(**(void **)(v7 + 16) + 24))(*(void *)(v7 + 16), *(void *)&v119[8 * v22]);
      uint64_t v52 = (const __int32 *)v81;
      if (*(char *)(v80 + 55) < 0) {
        uint64_t v52 = *v81;
      }
      uint64_t v53 = *(void *)(v7 + 16);
      uint64_t v78 = v52;
      if (*((void *)&v112 + 1) >= (unint64_t)v112)
      {
        if (v114)
        {
          LODWORD(v123) = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v111, *((unint64_t *)&v112 + 1), (int *)&v123, 1uLL);
          uint64_t v77 = v111;
          --*((void *)&v112 + 1);
        }
        else
        {
          uint64_t v77 = v111;
          if ((void)v112) {
            v111[(void)v112 - 1] = 0;
          }
        }
      }
      else
      {
        uint64_t v77 = v111;
        v111[*((void *)&v112 + 1)] = 0;
      }
      unint64_t v54 = *((void *)&v104 + 1);
      unint64_t v55 = v104;
      if (*((void *)&v104 + 1) >= (unint64_t)v104)
      {
        if (v106)
        {
          *(void *)&long long v123 = 0;
          TBuffer<TPItnRuleHandle_fake **>::insert((uint64_t)&v103, *((unint64_t *)&v104 + 1), (uint64_t *)&v123, 1uLL);
          unint64_t v55 = v104;
          unint64_t v54 = --*((void *)&v104 + 1);
        }
        else
        {
          if (!(void)v104)
          {
            unint64_t v76 = v103;
            goto LABEL_125;
          }
          *(void *)&v103[8 * v104 - 8] = 0;
        }
      }
      else
      {
        *(void *)&v103[8 * *((void *)&v104 + 1)] = 0;
      }
      unint64_t v76 = v103;
      if (v54 >= v55)
      {
        if (v106)
        {
          *(void *)&long long v123 = 0;
          TBuffer<TPItnRuleHandle_fake **>::insert((uint64_t)&v103, v54, (uint64_t *)&v123, 1uLL);
          unint64_t v54 = --*((void *)&v104 + 1);
        }
        else if (v55)
        {
          *(void *)&v103[8 * v55 - 8] = 0;
        }
      }
      else
      {
        *(void *)&v103[8 * v54] = 0;
      }
LABEL_125:
      uint64_t v56 = v103;
      unint64_t v57 = v96;
      if (*((void *)&v96 + 1) >= (unint64_t)v96)
      {
        if (v98)
        {
          *(void *)&long long v123 = 0;
          TBuffer<TPItnRuleHandle_fake **>::insert((uint64_t)&v95, *((unint64_t *)&v96 + 1), (uint64_t *)&v123, 1uLL);
          unint64_t v57 = v96;
          --*((void *)&v96 + 1);
        }
        else
        {
          uint64_t v58 = v95;
          if (!(void)v96)
          {
LABEL_137:
            uint64_t v59 = v95;
            uint64_t v60 = *((void *)&v96 + 1);
            if (*((void *)&v84 + 1) >= (unint64_t)v84)
            {
              if (v86)
              {
                long long v123 = 0uLL;
                TBuffer<TPItnRuleControl>::insert((uint64_t)&v83, *((unint64_t *)&v84 + 1), &v123, 1uLL);
                --*((void *)&v84 + 1);
              }
              else if ((void)v84)
              {
                uint64_t v62 = &v83[16 * v84];
                *((void *)v62 - 2) = 0;
                *((void *)v62 - 1) = 0;
              }
            }
            else
            {
              uint64_t v61 = &v83[16 * *((void *)&v84 + 1)];
              *uint64_t v61 = 0;
              v61[1] = 0;
            }
            uint64_t v63 = v83;
            if (*((void *)&v84 + 1) >= (unint64_t)v84)
            {
              if (v86)
              {
                long long v123 = 0uLL;
                TBuffer<TPItnRuleControl>::insert((uint64_t)&v83, *((unint64_t *)&v84 + 1), &v123, 1uLL);
                --*((void *)&v84 + 1);
              }
              else if ((void)v84)
              {
                BOOL v65 = &v83[16 * v84];
                *((void *)v65 - 2) = 0;
                *((void *)v65 - 1) = 0;
              }
            }
            else
            {
              int v64 = &v83[16 * *((void *)&v84 + 1)];
              *int v64 = 0;
              v64[1] = 0;
            }
            LOBYTE(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = 0;
            uint64_t result = (*(uint64_t (**)(uint64_t, const __int32 *, __int32 *, void, unsigned char *, unsigned char *, unsigned char *, unsigned char *, unsigned char *, unsigned char *, uint64_t, int))(*(void *)v53 + 16))(v53, v78, v77, v82, v76, &v56[8 * v54], v58, &v59[8 * v60], v63, &v83[16 * *((void *)&v84 + 1)], -1, v72);
            goto LABEL_165;
          }
          *(void *)&v95[8 * v96 - 8] = 0;
        }
      }
      else
      {
        *(void *)&v95[8 * *((void *)&v96 + 1)] = 0;
      }
      uint64_t v58 = v95;
      if (*((void *)&v96 + 1) >= v57)
      {
        if (v98)
        {
          *(void *)&long long v123 = 0;
          TBuffer<TPItnRuleHandle_fake **>::insert((uint64_t)&v95, *((unint64_t *)&v96 + 1), (uint64_t *)&v123, 1uLL);
          --*((void *)&v96 + 1);
        }
        else if (v57)
        {
          *(void *)&v95[8 * v57 - 8] = 0;
        }
      }
      else
      {
        *(void *)&v95[8 * *((void *)&v96 + 1)] = 0;
      }
      goto LABEL_137;
    }
    uint64_t v24 = -1;
    if (*((void *)&v104 + 1) | *((void *)&v96 + 1))
    {
      unsigned int v82 = 0;
      goto LABEL_92;
    }
LABEL_64:
    if (v79 != -1)
    {
      uint64_t v35 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 16) + 120))(*(void *)(v7 + 16), *(void *)&v119[8 * v22]);
      uint64_t v36 = *(void *)(v7 + 16);
      if (v35 != -1)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)v36 + 24))(v36, *(void *)&v119[8 * v22]);
        goto LABEL_165;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v36 + 24))(v36, v79);
    }
    if (v24 == -1)
    {
      (*(void (**)(void, void, unsigned char **))(**(void **)(v7 + 16) + 80))(*(void *)(v7 + 16), *(void *)&v119[8 * v22], &v87);
      TBuffer<TPItnRuleControl>::resize((uint64_t)&v83, 0);
      unint64_t v38 = *((void *)&v88 + 1);
      if (*((void *)&v88 + 1))
      {
        uint64_t v39 = 0;
        unint64_t v40 = 0;
        while (!v21)
        {
          uint64_t v41 = *(void *)&v87[v39];
          if ((unint64_t)(v41 - 4) <= 0xFFFFFFFFFFFFFFFCLL) {
            goto LABEL_78;
          }
LABEL_79:
          ++v40;
          v39 += 16;
          if (v40 >= v38) {
            goto LABEL_80;
          }
        }
        uint64_t v41 = *(void *)&v87[v39];
LABEL_78:
        uint64_t v42 = *(void *)&v87[v39 + 8];
        *(void *)&long long v123 = v41;
        *((void *)&v123 + 1) = v42;
        TBuffer<TPItnRuleControl>::insert((uint64_t)&v83, *((unint64_t *)&v84 + 1), &v123, 1uLL);
        unint64_t v38 = *((void *)&v88 + 1);
        goto LABEL_79;
      }
    }
LABEL_80:
    (*(void (**)(void, void))(**(void **)(v7 + 16) + 24))(*(void *)(v7 + 16), *(void *)&v119[8 * v22]);
    uint64_t v43 = (const __int32 *)v81;
    if (*(char *)(v80 + 55) < 0) {
      uint64_t v43 = *v81;
    }
    uint64_t v44 = *(void *)(v7 + 16);
    if (v21)
    {
      uint64_t v45 = v75;
      if (*(char *)(v80 + 79) < 0) {
        uint64_t v45 = *(__int32 **)v75;
      }
    }
    else if (*((void *)&v112 + 1) >= (unint64_t)v112)
    {
      if (v114)
      {
        LODWORD(v123) = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v111, *((unint64_t *)&v112 + 1), (int *)&v123, 1uLL);
        uint64_t v45 = v111;
        --*((void *)&v112 + 1);
      }
      else
      {
        uint64_t v45 = v111;
        if ((void)v112) {
          v111[(void)v112 - 1] = 0;
        }
      }
    }
    else
    {
      uint64_t v45 = v111;
      v111[*((void *)&v112 + 1)] = 0;
    }
    if (*((void *)&v84 + 1) >= (unint64_t)v84)
    {
      if (v86)
      {
        long long v123 = 0uLL;
        TBuffer<TPItnRuleControl>::insert((uint64_t)&v83, *((unint64_t *)&v84 + 1), &v123, 1uLL);
        --*((void *)&v84 + 1);
      }
      else if ((void)v84)
      {
        int v67 = &v83[16 * v84];
        *((void *)v67 - 2) = 0;
        *((void *)v67 - 1) = 0;
      }
    }
    else
    {
      int v66 = &v83[16 * *((void *)&v84 + 1)];
      *int v66 = 0;
      v66[1] = 0;
    }
    unint64_t v68 = v83;
    if (*((void *)&v84 + 1) >= (unint64_t)v84)
    {
      if (v86)
      {
        long long v123 = 0uLL;
        TBuffer<TPItnRuleControl>::insert((uint64_t)&v83, *((unint64_t *)&v84 + 1), &v123, 1uLL);
        --*((void *)&v84 + 1);
      }
      else if ((void)v84)
      {
        int v70 = &v83[16 * v84];
        *((void *)v70 - 2) = 0;
        *((void *)v70 - 1) = 0;
      }
    }
    else
    {
      char v69 = &v83[16 * *((void *)&v84 + 1)];
      void *v69 = 0;
      v69[1] = 0;
    }
    LOBYTE(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t, const __int32 *, __int32 *, BOOL, void, void, void, void, unsigned char *, unsigned char *, uint64_t, int))(*(void *)v44 + 16))(v44, v43, v45, v21 != 0, 0, 0, 0, 0, v68, &v83[16 * *((void *)&v84 + 1)], -1, v72);
    uint64_t v79 = result;
LABEL_165:
    ++v22;
  }
  while (v22 < *((void *)&v120 + 1));
  if (v21) {
    goto LABEL_169;
  }
LABEL_175:
  if (v86)
  {
    uint64_t result = (uint64_t)v83;
    if (v83 != v85)
    {
      if (v83) {
        uint64_t result = MEMORY[0x216698730]();
      }
    }
  }
  if (v90)
  {
    uint64_t result = (uint64_t)v87;
    if (v87 != v89)
    {
      if (v87) {
        uint64_t result = MEMORY[0x216698730]();
      }
    }
  }
  if (v94)
  {
    uint64_t result = (uint64_t)v91;
    if (v91 != v93)
    {
      if (v91) {
        uint64_t result = MEMORY[0x216698730]();
      }
    }
  }
  if (v98)
  {
    uint64_t result = (uint64_t)v95;
    if (v95 != v97)
    {
      if (v95) {
        uint64_t result = MEMORY[0x216698730]();
      }
    }
  }
  if (v102)
  {
    uint64_t result = (uint64_t)v99;
    if (v99 != v101)
    {
      if (v99) {
        uint64_t result = MEMORY[0x216698730]();
      }
    }
  }
  if (v106)
  {
    uint64_t result = (uint64_t)v103;
    if (v103 != v105)
    {
      if (v103) {
        uint64_t result = MEMORY[0x216698730]();
      }
    }
  }
  if (v110)
  {
    uint64_t result = (uint64_t)v107;
    if (v107 != (__int32 *)v109)
    {
      if (v107) {
        uint64_t result = MEMORY[0x216698730]();
      }
    }
  }
  if (v114)
  {
    uint64_t result = (uint64_t)v111;
    if (v111 != (__int32 *)v113)
    {
      if (v111) {
        uint64_t result = MEMORY[0x216698730]();
      }
    }
  }
  if (v118)
  {
    uint64_t result = (uint64_t)v115;
    if (v115 != v117)
    {
      if (v115) {
        uint64_t result = MEMORY[0x216698730]();
      }
    }
  }
  if (v122)
  {
    uint64_t result = (uint64_t)v119;
    if (v119 != v121)
    {
      if (v119) {
        uint64_t result = MEMORY[0x216698730]();
      }
    }
  }
LABEL_215:
  *(void *)(v74 + 136) = v73;
  return result;
}

void sub_213ED7D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,unsigned char *a24,uint64_t a25,uint64_t a26,uint64_t a27,unsigned char *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  if (*a28)
  {
    if (a38 != a14 && a38 != 0) {
      MEMORY[0x216698730]();
    }
  }
  if (*a24)
  {
    if (STACK[0x1108] != a15 && STACK[0x1108] != 0) {
      MEMORY[0x216698730]();
    }
  }
  if (LOBYTE(STACK[0x2940]))
  {
    unint64_t v43 = STACK[0x2128];
    if (STACK[0x2128] != a16)
    {
      if (v43) {
        MEMORY[0x216698730](v43, 0x80C40B8603338);
      }
    }
  }
  if (LOBYTE(STACK[0x3160]))
  {
    unint64_t v44 = STACK[0x2948];
    if (STACK[0x2948] != a17)
    {
      if (v44) {
        MEMORY[0x216698730](v44, 0x80C40B8603338);
      }
    }
  }
  if (LOBYTE(STACK[0x3980]))
  {
    unint64_t v45 = STACK[0x3168];
    if (STACK[0x3168] != a18)
    {
      if (v45) {
        MEMORY[0x216698730](v45, 0x80C40B8603338);
      }
    }
  }
  if (LOBYTE(STACK[0x41A0]))
  {
    unint64_t v46 = STACK[0x3988];
    if (STACK[0x3988] != a19)
    {
      if (v46) {
        MEMORY[0x216698730](v46, 0x80C40B8603338);
      }
    }
  }
  if (*(unsigned char *)(v39 + 1048))
  {
    unint64_t v47 = STACK[0x41A8];
    if (STACK[0x41A8] != a20)
    {
      if (v47) {
        MEMORY[0x216698730](v47, 0x1000C4052888210);
      }
    }
  }
  if (*(unsigned char *)(v38 + 1048))
  {
    unint64_t v48 = STACK[0x45C8];
    if (STACK[0x45C8] != a21)
    {
      if (v48) {
        MEMORY[0x216698730](v48, 0x1000C4052888210);
      }
    }
  }
  if (LOBYTE(STACK[0x5200]))
  {
    unint64_t v49 = STACK[0x49E8];
    if (STACK[0x49E8] != a22)
    {
      if (v49) {
        MEMORY[0x216698730](v49, 0x80C40B8603338);
      }
    }
  }
  if (LOBYTE(STACK[0x5A20]))
  {
    unint64_t v50 = STACK[0x5208];
    if (STACK[0x5208] != a23)
    {
      if (v50) {
        MEMORY[0x216698730](v50, 0x80C40B8603338);
      }
    }
  }
  *(void *)(a26 + 136) = a25;
  _Unwind_Resume(a1);
}

uint64_t TBoolParam::set(TBoolParam *this, char a2)
{
  uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle(this);
  *((unsigned char *)this + ActiveConfigHandle + 176) = a2;
  *((void *)this + 14) |= 1 << (ActiveConfigHandle + 33);

  return TParam::notifyChange((uint64_t)this, ActiveConfigHandle);
}

uint64_t TResultManager::getHintRange(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(a1 + 64) + 104 * a2 - 104);
}

uint64_t TResultManager::getResultWithHints(TResultManager *this)
{
  return *((void *)this + 11);
}

BOOL TResultManager::isValidHint(uint64_t a1, unint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 64);
  return 0x4EC4EC4EC4EC4EC5 * ((*(void *)(a1 + 72) - v2) >> 3) >= a2 && v2 != 0;
}

void std::vector<std::pair<unsigned long,unsigned long>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    std::vector<std::pair<unsigned long,unsigned long>>::__append((void **)a1, a2 - v2);
  }
}

void std::vector<std::pair<unsigned long,unsigned long>>::__append(void **a1, unint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      unsigned int v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>(v4, v12);
    }
    else {
      unsigned int v13 = 0;
    }
    uint64_t v14 = &v13[16 * v10];
    int v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    uint64_t v16 = &v14[16 * a2];
    unint64_t v18 = (char *)*a1;
    unint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      unint64_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

uint64_t TAligner<TWord const*,TCost<TWord const*,std::equal_to<TWord const*>>>::align(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t a4, uint64_t a5, void **a6)
{
  uint64_t v8 = a1;
  unint64_t v9 = (uint64_t *)(a1 + 152);
  TFsa::topologicalSort(a2, (char **)(a1 + 152));
  uint64_t v189 = (uint64_t *)(v8 + 176);
  TFsa::topologicalSort(a3, (char **)(v8 + 176));
  uint64_t v181 = a3;
  uint64_t v182 = a2;
  uint64_t v10 = a2[14] - a2[13];
  unint64_t v11 = v10 >> 3;
  unint64_t v12 = (uint64_t)(a3[14] - a3[13]) >> 3;
  uint64_t v198 = (uint64_t *)(v8 + 56);
  std::vector<unsigned long>::resize(v8 + 56, 2 * ((v10 >> 1) + (v10 >> 3)));
  unsigned int v13 = (void *)(v8 + 80);
  std::vector<unsigned short>::resize(v8 + 80, (uint64_t)(*(void *)(v8 + 64) - *(void *)(v8 + 56)) >> 3);
  std::vector<unsigned long>::resize(v8 + 200, 0);
  uint64_t v187 = (void **)(v8 + 200);
  std::vector<unsigned long>::reserve((void **)(v8 + 200), 0xAuLL);
  uint64_t v14 = (void *)(v8 + 216);
  int v15 = *(char **)(v8 + 208);
  uint64_t v16 = 1;
  uint64_t v188 = (void *)(v8 + 216);
  uint64_t v192 = v9;
  do
  {
    unint64_t v17 = v16 * v11;
    if ((unint64_t)v15 >= *v14)
    {
      uint64_t v20 = (char *)*v187;
      uint64_t v21 = (v15 - (unsigned char *)*v187) >> 3;
      unint64_t v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 61) {
LABEL_259:
      }
        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
      uint64_t v23 = *v14 - (void)v20;
      if (v23 >> 2 > v22) {
        unint64_t v22 = v23 >> 2;
      }
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v24 = v22;
      }
      if (v24)
      {
        long long v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)v14, v24);
        uint64_t v20 = *(char **)(v8 + 200);
        int v15 = *(char **)(v8 + 208);
      }
      else
      {
        long long v25 = 0;
      }
      __int32 v26 = (unint64_t *)&v25[8 * v21];
      *__int32 v26 = v17;
      unint64_t v18 = (char *)(v26 + 1);
      if (v15 == v20)
      {
        uint64_t v19 = v192;
      }
      else
      {
        uint64_t v19 = v192;
        do
        {
          unint64_t v27 = *((void *)v15 - 1);
          v15 -= 8;
          *--__int32 v26 = v27;
        }
        while (v15 != v20);
      }
      *(void *)(v8 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 200) = v26;
      *(void *)(v8 + 208) = v18;
      *(void *)(v8 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = &v25[8 * v24];
      if (v20) {
        operator delete(v20);
      }
      uint64_t v14 = (void *)(v8 + 216);
    }
    else
    {
      *(void *)int v15 = v17;
      unint64_t v18 = v15 + 8;
      uint64_t v19 = v192;
    }
    *(void *)(v8 + 208) = v18;
    ++v16;
    int v15 = v18;
  }
  while (v16 != 10);
  unint64_t v28 = (void *)(v8 + 224);
  std::vector<unsigned long>::resize(v8 + 224, v12);
  uint64_t v29 = *(void *)(v8 + 104);
  uint64_t v30 = *(void *)(v8 + 112);
  uint64_t v31 = (void *)(v8 + 104);
  unint64_t v32 = v12 * v11;
  if (v12 * v11 <= v30 - v29)
  {
    if (v12 * v11 < v30 - v29)
    {
      uint64_t v30 = v29 + v32;
      *(void *)(v8 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 112) = v29 + v32;
    }
  }
  else
  {
    std::vector<char>::__append((std::vector<char> *)(v8 + 104), v12 * v11 - (v30 - v29));
    uint64_t v29 = *(void *)(v8 + 104);
    uint64_t v30 = *(void *)(v8 + 112);
  }
  uint64_t v33 = (void *)(v8 + 128);
  std::vector<unsigned long>::resize(v8 + 128, v30 - v29);
  uint64_t v34 = (uint64_t *)v182[13];
  uint64_t v35 = (uint64_t *)v182[14];
  if (v34 == v35)
  {
    uint64_t v36 = (void *)(v8 + 216);
  }
  else
  {
    uint64_t v36 = (void *)(v8 + 216);
    while (!*v34)
    {
      if (++v34 == v35) {
        goto LABEL_38;
      }
    }
  }
  if (v34 != v35)
  {
    uint64_t v37 = *(void *)(v8 + 56);
LABEL_34:
    uint64_t v39 = *v34;
    uint64_t v38 = v34 + 1;
    *(void *)(v37 + 8 * *(void *)(v39 + 8)) = *(void *)(v8 + 24);
    while (v38 != v35)
    {
      if (*v38++)
      {
        uint64_t v34 = v38 - 1;
        goto LABEL_34;
      }
    }
  }
LABEL_38:
  uint64_t v41 = *(void *)(v8 + 176);
  uint64_t v191 = (void *)(v8 + 128);
  if (*(void *)(v8 + 184) == v41) {
    goto LABEL_141;
  }
  unint64_t v42 = 0;
  uint64_t v186 = 10;
  uint64_t v190 = v8;
  do
  {
    uint64_t v43 = *(void *)(v41 + 8 * v42);
    unint64_t v44 = *(void **)(v43 + 24);
    unint64_t v193 = v42;
    if (!v44) {
      goto LABEL_119;
    }
    do
    {
      unint64_t v45 = *(char **)(v8 + 208);
      uint64_t v194 = v44;
      if (*(char **)(v8 + 200) == v45)
      {
        unint64_t v46 = v186;
        unint64_t v47 = 2 * v186;
        std::vector<unsigned long>::resize((uint64_t)v198, 2 * v186 * v11);
        std::vector<unsigned short>::resize((uint64_t)v13, (uint64_t)(*(void *)(v8 + 64) - *(void *)(v8 + 56)) >> 3);
        unint64_t v45 = *(char **)(v8 + 208);
        if (v186 < 1)
        {
          v186 *= 2;
          unint64_t v42 = v193;
          unint64_t v44 = v194;
        }
        else
        {
          unint64_t v48 = v188;
          unint64_t v42 = v193;
          unint64_t v44 = v194;
          do
          {
            unint64_t v49 = v46 * v11;
            if ((unint64_t)v45 >= *v48)
            {
              unint64_t v50 = (char *)*v187;
              uint64_t v51 = (v45 - (unsigned char *)*v187) >> 3;
              unint64_t v52 = v51 + 1;
              if ((unint64_t)(v51 + 1) >> 61) {
                goto LABEL_259;
              }
              uint64_t v53 = *v48 - (void)v50;
              if (v53 >> 2 > v52) {
                unint64_t v52 = v53 >> 2;
              }
              if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v54 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v54 = v52;
              }
              if (v54)
              {
                unint64_t v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)v48, v54);
                unint64_t v50 = *(char **)(v8 + 200);
                unint64_t v45 = *(char **)(v8 + 208);
              }
              else
              {
                unint64_t v55 = 0;
              }
              uint64_t v56 = (unint64_t *)&v55[8 * v51];
              *uint64_t v56 = v49;
              unint64_t v57 = (char *)(v56 + 1);
              if (v45 == v50)
              {
                uint64_t v19 = v192;
              }
              else
              {
                uint64_t v19 = v192;
                do
                {
                  unint64_t v58 = *((void *)v45 - 1);
                  v45 -= 8;
                  *--uint64_t v56 = v58;
                }
                while (v45 != v50);
              }
              *(void *)(v8 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 200) = v56;
              *(void *)(v8 + 208) = v57;
              *(void *)(v8 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = &v55[8 * v54];
              if (v50) {
                operator delete(v50);
              }
              unint64_t v45 = v57;
              unint64_t v48 = v188;
              unint64_t v42 = v193;
              unint64_t v44 = v194;
              unint64_t v47 = 2 * v186;
            }
            else
            {
              *(void *)unint64_t v45 = v49;
              v45 += 8;
            }
            *(void *)(v8 + 208) = v45;
            ++v46;
          }
          while (v46 < v47);
          uint64_t v186 = v47;
        }
      }
      uint64_t v59 = *((void *)v45 - 1);
      *(void *)(v8 + 208) = v45 - 8;
      *(void *)(*(void *)(v8 + 224) + 8 * v44[1]) = v59;
      uint64_t v61 = *(void *)(v8 + 152);
      uint64_t v60 = *(void *)(v8 + 160);
      if (v60 == v61) {
        goto LABEL_117;
      }
      unint64_t v62 = 0;
      uint64_t v63 = *(void *)(v8 + 40);
      unint64_t v64 = v44[1] * v11;
      do
      {
        BOOL v65 = *(uint64_t **)(*(void *)(v61 + 8 * v62) + 24);
        if (!v65) {
          goto LABEL_116;
        }
        unint64_t v195 = v62;
        do
        {
          uint64_t v66 = *v19;
          uint64_t v67 = *v65;
          uint64_t v68 = v65[1];
          uint64_t v69 = *v44;
          if (*v65 == *v44)
          {
            uint64_t v70 = 0;
            uint64_t v71 = *v189;
LABEL_75:
            uint64_t v75 = *(void *)(*(void *)(v71 + 8 * v42) + 16);
            if (!v75)
            {
              LOBYTE(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = 0;
              unint64_t v73 = 0;
              unsigned __int16 v74 = 0;
              uint64_t v76 = -1;
              goto LABEL_104;
            }
            unsigned __int16 v74 = 0;
            unint64_t v73 = 0;
            int v72 = 0;
            uint64_t v196 = *v19;
            uint64_t v77 = *(void *)(*(void *)(v66 + 8 * v62) + 16);
            if (v67 == v69) {
              int v78 = 67;
            }
            else {
              int v78 = 83;
            }
            uint64_t v76 = -1;
            uint64_t v79 = v75;
            do
            {
              if (v77)
              {
                uint64_t v80 = *(void *)(v79 + 8);
                uint64_t v81 = *(void *)(*v28 + 8 * v80);
                unint64_t v82 = v80 * v11;
                uint64_t v83 = v77;
                do
                {
                  uint64_t v84 = *(void *)(v83 + 8);
                  uint64_t v85 = v84 + v81;
                  unsigned __int16 v86 = *(_WORD *)(*v13 + 2 * (v84 + v81));
                  uint64_t v87 = v84 + v82;
                  if (v67 == v69 && *(unsigned char *)(*v31 + v87) != 67) {
                    ++v86;
                  }
                  unint64_t v88 = *(void *)(*v198 + 8 * v85) + v70;
                  if (!v72 || v88 < v73 || v88 == v73 && v86 < v74)
                  {
                    uint64_t v76 = v87;
                    int v72 = v78;
                    unint64_t v73 = v88;
                    unsigned __int16 v74 = v86;
                  }
                  uint64_t v83 = *(void *)(v83 + 32);
                }
                while (v83);
              }
              uint64_t v79 = *(void *)(v79 + 32);
            }
            while (v79);
            uint64_t v8 = v190;
            uint64_t v33 = v191;
            uint64_t v19 = v192;
            unint64_t v42 = v193;
            unint64_t v44 = v194;
            unint64_t v62 = v195;
            uint64_t v66 = v196;
LABEL_93:
            uint64_t v89 = *v198;
            while (1)
            {
              uint64_t v90 = *(void *)(v75 + 8);
              uint64_t v91 = *(void *)(*v28 + 8 * v90) + v68;
              unint64_t v92 = *(void *)(v89 + 8 * v91) + v63;
              if (v76 == -1 || v92 < v73)
              {
                LOWORD(v93) = *(_WORD *)(*v13 + 2 * v91);
              }
              else
              {
                if (v92 != v73) {
                  goto LABEL_101;
                }
                unsigned int v93 = *(unsigned __int16 *)(*v13 + 2 * v91);
                if (v93 >= v74) {
                  goto LABEL_101;
                }
              }
              uint64_t v76 = v68 + v90 * v11;
              LOBYTE(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = 73;
              unint64_t v73 = *(void *)(v89 + 8 * v91) + v63;
              unsigned __int16 v74 = v93;
LABEL_101:
              uint64_t v75 = *(void *)(v75 + 32);
              if (!v75) {
                goto LABEL_104;
              }
            }
          }
          uint64_t v70 = *(void *)(v8 + 8);
          uint64_t v71 = *(void *)(v8 + 176);
          if (v70 != -1) {
            goto LABEL_75;
          }
          LOBYTE(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = 0;
          unint64_t v73 = 0;
          unsigned __int16 v74 = 0;
          uint64_t v75 = *(void *)(*(void *)(v71 + 8 * v42) + 16);
          uint64_t v76 = -1;
          if (v75) {
            goto LABEL_93;
          }
LABEL_104:
          uint64_t v94 = *(void *)(*(void *)(v66 + 8 * v62) + 16);
          if (v94)
          {
            uint64_t v95 = *v198;
            uint64_t v96 = *(void *)(*v198 + 8 * v68);
            do
            {
              uint64_t v97 = *(void *)(v94 + 8);
              uint64_t v98 = v97 + v59;
              unint64_t v99 = v96 + *(void *)(v95 + 8 * (v97 + v59));
              if (v76 == -1 || v99 < v73)
              {
                LOWORD(v100) = *(_WORD *)(*v13 + 2 * v98);
              }
              else
              {
                if (v99 != v73) {
                  goto LABEL_113;
                }
                unsigned int v100 = *(unsigned __int16 *)(*v13 + 2 * v98);
                if (v100 >= v74) {
                  goto LABEL_113;
                }
              }
              uint64_t v76 = v97 + v64;
              LOBYTE(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = 68;
              unint64_t v73 = v96 + *(void *)(v95 + 8 * (v97 + v59));
              unsigned __int16 v74 = v100;
LABEL_113:
              uint64_t v94 = *(void *)(v94 + 32);
            }
            while (v94);
          }
          *(void *)(*v33 + 8 * (v68 + v64)) = v76;
          *(unsigned char *)(*v31 + v68 + vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = v72;
          *(void *)(*v198 + 8 * (v68 + v5TRegExp::~TRegExp((TRegExp *)(this + 9)) = v73;
          *(_WORD *)(*v13 + 2 * (v68 + v5TRegExp::~TRegExp((TRegExp *)(this + 9)) = v74;
          BOOL v65 = (uint64_t *)v65[5];
        }
        while (v65);
        uint64_t v61 = *(void *)(v8 + 152);
        uint64_t v60 = *(void *)(v8 + 160);
LABEL_116:
        ++v62;
      }
      while (v62 < (v60 - v61) >> 3);
LABEL_117:
      unint64_t v44 = (void *)v44[5];
    }
    while (v44);
    uint64_t v36 = v188;
    uint64_t v41 = *v189;
    uint64_t v43 = *(void *)(*v189 + 8 * v42);
LABEL_119:
    uint64_t v101 = *(void *)(v43 + 16);
    if (v101)
    {
      char v102 = *(char **)(v8 + 208);
      do
      {
        uint64_t v103 = *(void *)(*v28 + 8 * *(void *)(v101 + 8));
        if ((unint64_t)v102 >= *v36)
        {
          unint64_t v105 = (char *)*v187;
          uint64_t v106 = (v102 - (unsigned char *)*v187) >> 3;
          unint64_t v107 = v106 + 1;
          if ((unint64_t)(v106 + 1) >> 61) {
            goto LABEL_259;
          }
          uint64_t v108 = *v36 - (void)v105;
          if (v108 >> 2 > v107) {
            unint64_t v107 = v108 >> 2;
          }
          if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v109 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v109 = v107;
          }
          if (v109)
          {
            char v110 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)v36, v109);
            unint64_t v105 = *(char **)(v8 + 200);
            char v102 = *(char **)(v8 + 208);
          }
          else
          {
            char v110 = 0;
          }
          long long v111 = &v110[8 * v106];
          *(void *)long long v111 = v103;
          long long v104 = v111 + 8;
          while (v102 != v105)
          {
            uint64_t v112 = *((void *)v102 - 1);
            v102 -= 8;
            *((void *)v111 - 1) = v112;
            v111 -= 8;
          }
          *(void *)(v8 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 200) = v111;
          *(void *)(v8 + 208) = v104;
          *(void *)(v8 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = &v110[8 * v109];
          if (v105) {
            operator delete(v105);
          }
          uint64_t v36 = v188;
          unint64_t v42 = v193;
        }
        else
        {
          *(void *)char v102 = v103;
          long long v104 = v102 + 8;
        }
        *(void *)(v8 + 208) = v104;
        uint64_t v101 = *(void *)(v101 + 32);
        char v102 = v104;
      }
      while (v101);
      uint64_t v41 = *v189;
      uint64_t v19 = v192;
    }
    ++v42;
  }
  while (v42 < (*(void *)(v8 + 184) - v41) >> 3);
LABEL_141:
  char v114 = (void *)v182[22];
  uint64_t v113 = (void *)v182[23];
  if (v114 != v113)
  {
    while (!*v114)
    {
      if (++v114 == v113) {
        goto LABEL_172;
      }
    }
  }
  if (v114 == v113)
  {
LABEL_172:
    unint64_t v116 = -1;
    uint64_t v115 = -1;
  }
  else
  {
    uint64_t v115 = -1;
    unint64_t v116 = -1;
LABEL_147:
    uint64_t v117 = *(void *)(*v114 + 16);
    if (v117)
    {
      char v118 = (void *)v181[23];
      do
      {
        long long v119 = (void *)v181[22];
        if (v119 != v118)
        {
          long long v119 = (void *)v181[22];
          while (!*v119)
          {
            if (++v119 == v118) {
              goto LABEL_167;
            }
          }
        }
        if (v119 != v118)
        {
LABEL_155:
          uint64_t v120 = *(void *)(*v119 + 16);
          if (v120)
          {
            uint64_t v121 = *(void *)(v117 + 8);
            do
            {
              uint64_t v122 = *(void *)(v120 + 8);
              uint64_t v123 = v121 + *(void *)(*v28 + 8 * v122);
              if (v116 == -1
                || (unint64_t v124 = *(void *)(*v198 + 8 * v123), v125 = *(void *)(*v198 + 8 * v115), v124 < v125)
                || v124 == v125
                && *(unsigned __int16 *)(*v13 + 2 * v123) < *(unsigned __int16 *)(*v13 + 2 * v115))
              {
                unint64_t v116 = v121 + v122 * v11;
                uint64_t v115 = v121 + *(void *)(*v28 + 8 * v122);
              }
              uint64_t v120 = *(void *)(v120 + 32);
            }
            while (v120);
          }
          long long v126 = v119 + 1;
          while (v126 != v118)
          {
            if (*v126++)
            {
              long long v119 = v126 - 1;
              goto LABEL_155;
            }
          }
        }
LABEL_167:
        uint64_t v117 = *(void *)(v117 + 32);
      }
      while (v117);
    }
    char v128 = v114 + 1;
    while (v128 != v113)
    {
      if (*v128++)
      {
        char v114 = v128 - 1;
        goto LABEL_147;
      }
    }
  }
  long long v130 = a6;
  if (a5)
  {
    std::vector<TItnRule *>::resize(a5, 0);
    std::vector<TPItnTagHandle_fake **>::reserve((void **)a5, (uint64_t)(*(void *)(v8 + 160) - *(void *)(v8 + 152)) >> 3);
  }
  if (a6)
  {
    std::vector<TItnRule *>::resize((uint64_t)a6, 0);
    std::vector<TPItnTagHandle_fake **>::reserve(a6, (uint64_t)(*(void *)(v8 + 184) - *(void *)(v8 + 176)) >> 3);
  }
  MEMORY[0x216698410](a4, &byte_2140B33BB);
  std::string::reserve((std::string *)a4, ((uint64_t)(*(void *)(v8 + 160) - *(void *)(v8 + 152)) >> 3)+ ((uint64_t)(*(void *)(v8 + 184) - *(void *)(v8 + 176)) >> 3)+ 1);
  if (*(void *)(*(void *)(v8 + 128) + 8 * v116) != -1)
  {
    uint64_t v197 = 0;
    while (1)
    {
      int v131 = *(char *)(*v31 + v116);
      int v132 = *(unsigned __int8 *)(*v31 + v116);
      std::string::push_back((std::string *)a4, *(unsigned char *)(*v31 + v116));
      if (v131 == 67) {
        break;
      }
      ++v197;
      int v133 = (void *)a5;
      if ((v132 & 0xFFFFFFEF) == 0x43) {
        goto LABEL_182;
      }
      if (!a5 || v132 != 68) {
        goto LABEL_208;
      }
      char v134 = 0;
LABEL_187:
      uint64_t v135 = *(void *)(v182[13] + 8 * (v116 % v11));
      char v137 = (void *)v133[1];
      unint64_t v136 = v133[2];
      if ((unint64_t)v137 >= v136)
      {
        uint64_t v139 = ((uint64_t)v137 - *v133) >> 3;
        if ((unint64_t)(v139 + 1) >> 61) {
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v140 = v136 - *v133;
        uint64_t v141 = v140 >> 2;
        if (v140 >> 2 <= (unint64_t)(v139 + 1)) {
          uint64_t v141 = v139 + 1;
        }
        if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v142 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v142 = v141;
        }
        if (v142) {
          uint64_t v143 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(a5 + 16, v142);
        }
        else {
          uint64_t v143 = 0;
        }
        uint64_t v144 = &v143[8 * v139];
        *(void *)uint64_t v144 = v135;
        uint64_t v138 = v144 + 8;
        uint64_t v146 = *(char **)a5;
        uint64_t v145 = *(char **)(a5 + 8);
        if (v145 == *(char **)a5)
        {
          uint64_t v148 = (void *)a5;
        }
        else
        {
          do
          {
            uint64_t v147 = *((void *)v145 - 1);
            v145 -= 8;
            *((void *)v144 - 1) = v147;
            v144 -= 8;
          }
          while (v145 != v146);
          uint64_t v148 = (void *)a5;
          uint64_t v145 = *(char **)a5;
        }
        *uint64_t v148 = v144;
        v148[1] = v138;
        v148[2] = &v143[8 * v142];
        if (v145)
        {
          operator delete(v145);
          int v133 = (void *)a5;
        }
        else
        {
          int v133 = v148;
        }
      }
      else
      {
        *char v137 = v135;
        uint64_t v138 = v137 + 1;
      }
      v133[1] = v138;
      uint64_t v33 = v191;
      if (v134)
      {
LABEL_206:
        long long v130 = a6;
        if (a6) {
          goto LABEL_210;
        }
        goto LABEL_227;
      }
LABEL_208:
      if (a6)
      {
        long long v130 = a6;
        if (v132 == 73)
        {
LABEL_210:
          uint64_t v149 = *(void *)(v181[13] + 8 * (v116 / v11));
          unsigned int v151 = v130[1];
          unint64_t v150 = (unint64_t)v130[2];
          if ((unint64_t)v151 >= v150)
          {
            uint64_t v153 = ((char *)v151 - (unsigned char *)*v130) >> 3;
            if ((unint64_t)(v153 + 1) >> 61) {
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v154 = v150 - (void)*v130;
            uint64_t v155 = v154 >> 2;
            if (v154 >> 2 <= (unint64_t)(v153 + 1)) {
              uint64_t v155 = v153 + 1;
            }
            if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v156 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v156 = v155;
            }
            if (v156) {
              uint64_t v157 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(a6 + 2), v156);
            }
            else {
              uint64_t v157 = 0;
            }
            uint64_t v158 = &v157[8 * v153];
            *(void *)uint64_t v158 = v149;
            uint64_t v152 = v158 + 8;
            uint64_t v160 = (char *)*v130;
            uint64_t v159 = (char *)v130[1];
            if (v159 != *v130)
            {
              do
              {
                uint64_t v161 = *((void *)v159 - 1);
                v159 -= 8;
                *((void *)v158 - 1) = v161;
                v158 -= 8;
              }
              while (v159 != v160);
              uint64_t v159 = (char *)*v130;
            }
            *long long v130 = v158;
            v130[1] = v152;
            v130[2] = &v157[8 * v156];
            if (v159) {
              operator delete(v159);
            }
          }
          else
          {
            *unsigned int v151 = v149;
            uint64_t v152 = v151 + 1;
          }
          v130[1] = v152;
        }
      }
      else
      {
        long long v130 = 0;
      }
LABEL_227:
      unint64_t v116 = *(void *)(*v33 + 8 * v116);
      if (*(void *)(*v33 + 8 * v116) == -1) {
        goto LABEL_230;
      }
    }
    int v133 = (void *)a5;
LABEL_182:
    if (!v133) {
      goto LABEL_206;
    }
    char v134 = 1;
    goto LABEL_187;
  }
LABEL_230:
  uint64_t v162 = *(unsigned __int8 *)(a4 + 23);
  if ((v162 & 0x80u) == 0) {
    unint64_t v163 = a4;
  }
  else {
    unint64_t v163 = *(void *)a4;
  }
  if ((v162 & 0x80u) != 0) {
    uint64_t v162 = *(void *)(a4 + 8);
  }
  if (v162)
  {
    uint64_t v164 = (unsigned char *)(v163 + v162 - 1);
    if ((unint64_t)v164 > v163)
    {
      unint64_t v165 = v163 + 1;
      do
      {
        char v166 = *(unsigned char *)(v165 - 1);
        *(unsigned char *)(v165 - 1) = *v164;
        *v164-- = v166;
        BOOL v167 = v165++ >= (unint64_t)v164;
      }
      while (!v167);
    }
  }
  if (a5)
  {
    uint64_t v168 = *(char **)a5;
    uint64_t v169 = *(void *)(a5 + 8);
    uint64_t v170 = (char *)(v169 - 8);
    if (*(void *)a5 != v169 && v170 > v168)
    {
      uint64_t v172 = v168 + 8;
      do
      {
        uint64_t v173 = *((void *)v172 - 1);
        *((void *)v172 - 1) = *(void *)v170;
        *(void *)uint64_t v170 = v173;
        v170 -= 8;
        BOOL v167 = v172 >= v170;
        v172 += 8;
      }
      while (!v167);
    }
  }
  if (v130)
  {
    unint64_t v174 = (unint64_t)*v130;
    uint64_t v175 = (char *)v130[1];
    uint64_t v176 = v175 - 8;
    if (*v130 != v175 && (unint64_t)v176 > v174)
    {
      unint64_t v178 = v174 + 8;
      do
      {
        uint64_t v179 = *(void *)(v178 - 8);
        *(void *)(v178 - 8) = *(void *)v176;
        *(void *)uint64_t v176 = v179;
        v176 -= 8;
        BOOL v167 = v178 >= (unint64_t)v176;
        v178 += 8;
      }
      while (!v167);
    }
  }
  return *(void *)(*v198 + 8 * v115);
}

void std::vector<char>::__append(std::vector<char> *this, std::vector<char>::size_type __n)
{
  std::vector<int>::pointer end = this->__end_;
  value = this->__end_cap_.__value_;
  if (value - end >= __n)
  {
    if (__n)
    {
      bzero(this->__end_, __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    std::vector<char>::pointer begin = this->__begin_;
    int64_t v7 = end - this->__begin_;
    unint64_t v8 = v7 + __n;
    if ((uint64_t)(v7 + __n) < 0) {
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = value - begin;
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      unint64_t v11 = (char *)operator new(v10);
    }
    else {
      unint64_t v11 = 0;
    }
    unint64_t v12 = &v11[v7];
    unsigned int v13 = &v11[v10];
    bzero(v12, __n);
    if (end == begin)
    {
      unint64_t v11 = v12;
    }
    else
    {
      uint64_t v14 = &end[~(unint64_t)begin];
      do
      {
        char v15 = *--end;
        (v14--)[(void)v11] = v15;
      }
      while (end != begin);
      std::vector<int>::pointer end = this->__begin_;
    }
    this->__begin_ = v11;
    this->__end_ = &v12[__n];
    this->__end_cap_.__value_ = v13;
    if (end)
    {
      operator delete(end);
    }
  }
}

void TResult::TResult(TResult *this, const TResult *a2)
{
  *(_WORD *)this = *(_WORD *)a2;
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  std::vector<std::wstring>::__init_with_size[abi:ne180100]<std::wstring*,std::wstring*>((std::wstring *)((char *)this + 32), *((long long **)a2 + 4), *((long long **)a2 + 5), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3));
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  std::vector<TItnControlState>::__init_with_size[abi:ne180100]<TItnControlState*,TItnControlState*>((void *)this + 7, *((const void **)a2 + 7), *((void *)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 6);
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)this + 10, *((const void **)a2 + 10), *((void *)a2 + 11), (uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 3);
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)this + 13, *((const void **)a2 + 13), *((void *)a2 + 14), (uint64_t)(*((void *)a2 + 14) - *((void *)a2 + 13)) >> 3);
  operator new[]();
}

void sub_213ED90B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  int64_t v7 = *v5;
  if (*v5)
  {
    v2[14] = v7;
    operator delete(v7);
  }
  unint64_t v8 = *v4;
  if (*v4)
  {
    v2[11] = v8;
    operator delete(v8);
  }
  unint64_t v9 = *v3;
  if (*v3)
  {
    v2[8] = v9;
    operator delete(v9);
  }
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

std::wstring *std::vector<std::wstring>::__init_with_size[abi:ne180100]<std::wstring*,std::wstring*>(std::wstring *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    std::vector<std::wstring>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::wstring>,std::wstring*,std::wstring*,std::wstring*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::wstring *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::wstring::size_type)result;
  }
  return result;
}

void sub_213ED917C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::vector<TItnControlState>::__init_with_size[abi:ne180100]<TItnControlState*,TItnControlState*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<TItnControlState>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_213ED91FC(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<TItnControlState>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 58) {
    std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TItnControlState>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[64 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<TItnControlState>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(a2 << 6);
}

void *std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<wchar_t const*>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_213ED92F4(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *TAligner<TWord const*,TCost<TWord const*,std::equal_to<TWord const*>>>::~TAligner(void *a1)
{
  unint64_t v2 = (void *)a1[28];
  if (v2)
  {
    a1[29] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[25];
  if (v3)
  {
    a1[26] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[22];
  if (v4)
  {
    a1[23] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[19];
  if (v5)
  {
    a1[20] = v5;
    operator delete(v5);
  }
  unint64_t v6 = (void *)a1[16];
  if (v6)
  {
    a1[17] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)a1[13];
  if (v7)
  {
    a1[14] = v7;
    operator delete(v7);
  }
  size_t v8 = (void *)a1[10];
  if (v8)
  {
    a1[11] = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)a1[7];
  if (v9)
  {
    a1[8] = v9;
    operator delete(v9);
  }
  return a1;
}

char *std::vector<unsigned long>::__assign_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61) {
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<wchar_t const*>::__vallocate[abi:ne180100](v7, v11);
    unsigned int v13 = (char *)v7[1];
    unint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      unint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  unint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, 8 * v15);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    unint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *unint64_t v12 = &v9[v17];
  return result;
}

char *std::vector<unsigned long>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    unsigned int v13 = *(void **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 3);
    if (v14 >> 61) {
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (__dst - (uint64_t)v13) >> 3;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 2 > v14) {
      unint64_t v14 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v37 = v9;
    if (v17) {
      unint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(v9, v17);
    }
    else {
      unint64_t v18 = 0;
    }
    unint64_t v28 = &v18[8 * v15];
    std::wstring __p = v18;
    uint64_t v34 = v28;
    uint64_t v36 = &v18[8 * v17];
    uint64_t v29 = 8 * a5;
    uint64_t v30 = &v28[8 * a5];
    do
    {
      uint64_t v31 = *(void *)v7;
      v7 += 8;
      *(void *)unint64_t v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    uint64_t v35 = v30;
    uint64_t v5 = std::vector<unsigned long>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    uint64_t v21 = &__src[8 * a5];
    uint64_t v23 = *(char **)(v9 - 8);
LABEL_17:
    unint64_t v24 = &v5[8 * a5];
    long long v25 = &v23[-8 * a5];
    __int32 v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      __int32 v26 = v23;
      do
      {
        uint64_t v27 = *(void *)v25;
        v25 += 8;
        *(void *)__int32 v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  uint64_t v21 = &__src[8 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  }
  uint64_t v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_213ED969C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  uint64_t v5 = *(char **)(a2 + 8);
  unint64_t v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    uint64_t v7 = *(char **)(a2 + 8);
    do
    {
      uint64_t v9 = *((void *)v8 - 1);
      v8 -= 8;
      *((void *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    uint64_t v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v11 + v12;
  unsigned int v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  unint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void std::vector<std::wstring>::__assign_with_size[abi:ne180100]<std::__wrap_iter<std::wstring const*>,std::__wrap_iter<std::wstring const*>>(std::vector<std::wstring> *this, std::wstring *__str, long long *a3, unint64_t a4)
{
  p_end_cap = &this->__end_cap_;
  std::vector<char>::pointer begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < a4)
  {
    std::vector<std::wstring>::__vdeallocate(this);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::wstring>::__vallocate[abi:ne180100](this, v11);
    int64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::wstring>,std::wstring const*,std::wstring const*,std::wstring*>((uint64_t)p_end_cap, (long long *)__str, a3, this->__end_);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 3) < a4)
  {
    unsigned int v13 = (std::wstring *)((char *)__str + 8 * (((char *)this->__end_ - (char *)begin) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::wstring *,std::wstring *,std::wstring *,0>(__str, v13, begin);
    int64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::wstring>,std::wstring const*,std::wstring const*,std::wstring*>((uint64_t)p_end_cap, (long long *)v13, a3, this->__end_);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::wstring *,std::wstring *,std::wstring *,0>(__str, (std::wstring *)a3, begin);
  uint64_t v15 = v14;
  std::vector<std::wstring>::pointer end = this->__end_;
  if (end != v14)
  {
    do
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(end[-1].__r_.__value_.__l.__data_);
      }
      --end;
    }
    while (end != v15);
  }
  this->__end_ = v15;
}

void sub_213ED9904(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_213ED990C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::wstring *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::wstring>,std::wstring const*,std::wstring const*,std::wstring*>(uint64_t a1, long long *a2, long long *a3, std::wstring *this)
{
  uint64_t v4 = this;
  unint64_t v11 = this;
  int64_t v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  void v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    unint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::wstring::__init_copy_ctor_external(v4, *(const std::wstring::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      unint64_t v6 = (long long *)((char *)v6 + 24);
      int64_t v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::wstring>,std::wstring*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_213ED99C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::wstring *std::vector<std::wstring>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::wstring const*>,std::__wrap_iter<std::wstring const*>>(std::vector<std::wstring> *a1, std::wstring *a2, std::wstring *a3, long long *a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    value = a1->__end_cap_.__value_;
    p_end_cap = (std::allocator<std::wstring> *)&a1->__end_cap_;
    char v10 = value;
    int64_t v12 = (std::wstring *)*((void *)p_end_cap - 1);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v12) >> 3)) >= a5)
    {
      uint64_t v20 = (char *)v12 - (char *)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)a2) >> 3)) >= a5)
      {
        uint64_t v21 = (long long *)&a3[a5];
      }
      else
      {
        uint64_t v21 = (long long *)(&a3->__r_.__value_.__l.__data_ + (((char *)v12 - (char *)a2) >> 3));
        a1->__end_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::wstring>,std::wstring const*,std::wstring const*,std::wstring*>((uint64_t)p_end_cap, v21, a4, *((std::wstring **)p_end_cap - 1));
        if (v20 < 1) {
          return v5;
        }
      }
      std::vector<std::wstring>::__move_range(a1, v5, v12, &v5[a5]);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::wstring *,std::wstring *,std::wstring *,0>(a3, (std::wstring *)v21, v5);
    }
    else
    {
      std::vector<std::wstring>::pointer begin = a1->__begin_;
      unint64_t v14 = a5 - 0x5555555555555555 * (((char *)v12 - (char *)a1->__begin_) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)begin) >> 3);
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)v10 - (char *)begin) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v18 = v17;
      }
      __v.__end_cap_.__value_ = p_end_cap;
      if (v18) {
        uint64_t v19 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)p_end_cap, v18);
      }
      else {
        uint64_t v19 = 0;
      }
      __v.__first_ = v19;
      __v.__begin_ = v19 + v15;
      __v.__end_ = __v.__begin_;
      __v.__end_cap_.__value_ = &v19[v18];
      std::__split_buffer<std::wstring>::__construct_at_end_with_size<std::__wrap_iter<std::wstring const*>>((uint64_t)&__v, (long long *)a3, a5);
      uint64_t v5 = std::vector<std::wstring>::__swap_out_circular_buffer(a1, &__v, v5);
      std::__split_buffer<std::wstring>::~__split_buffer((std::__split_buffer<std::string> *)&__v);
    }
  }
  return v5;
}

void sub_213ED9B78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__split_buffer<std::string> *a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void std::vector<std::wstring>::__move_range(std::vector<std::wstring> *this, std::vector<std::wstring>::pointer __from_s, std::vector<std::wstring>::pointer __from_e, std::vector<std::wstring>::pointer __to)
{
  std::vector<std::wstring>::pointer end = this->__end_;
  long long v7 = (char *)__from_s + (char *)end - (char *)__to;
  std::vector<std::wstring>::pointer v8 = end;
  if (v7 < (char *)__from_e)
  {
    unint64_t v9 = (unint64_t)v7;
    std::vector<std::wstring>::pointer v8 = this->__end_;
    do
    {
      long long v10 = *(_OWORD *)v9;
      v8->__r_.__value_.__r.__words[2] = *(void *)(v9 + 16);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
      ++v8;
      *(void *)(v9 + 8) = 0;
      *(void *)(v9 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
      *(void *)unint64_t v9 = 0;
      v9 += 24;
    }
    while (v9 < (unint64_t)__from_e);
  }
  this->__end_ = v8;
  std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::wstring *,std::wstring *,std::wstring *>((uint64_t)&v11, (uint64_t)__from_s, (uint64_t)v7, (uint64_t)end);
}

void std::__split_buffer<std::wstring>::__construct_at_end_with_size<std::__wrap_iter<std::wstring const*>>(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t v4 = *(std::wstring **)(a1 + 16);
  if (a3)
  {
    unint64_t v6 = &v4[a3];
    uint64_t v7 = 24 * a3;
    do
    {
      if (*((char *)a2 + 23) < 0)
      {
        std::wstring::__init_copy_ctor_external(v4, *(const std::wstring::value_type **)a2, *((void *)a2 + 1));
      }
      else
      {
        long long v8 = *a2;
        v4->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v8;
      }
      ++v4;
      a2 = (long long *)((char *)a2 + 24);
      v7 -= 24;
    }
    while (v7);
    uint64_t v4 = v6;
  }
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v4;
}

void sub_213ED9C94(_Unwind_Exception *a1)
{
  *(void *)(v1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v2;
  _Unwind_Resume(a1);
}

std::vector<std::wstring>::pointer std::vector<std::wstring>::__swap_out_circular_buffer(std::vector<std::wstring> *this, std::__split_buffer<std::wstring> *__v, std::vector<std::wstring>::pointer __p)
{
  std::vector<std::wstring>::pointer begin = __v->__begin_;
  p_end_cap = &this->__end_cap_;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::wstring>,std::reverse_iterator<std::wstring*>,std::reverse_iterator<std::wstring*>,std::reverse_iterator<std::wstring*>>((uint64_t)&this->__end_cap_, (uint64_t)__p, (uint64_t)__p, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)begin, (uint64_t)begin);
  __v->__begin_ = v8;
  __v->__end_ = (std::__split_buffer<std::wstring>::pointer)std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::wstring>,std::wstring*,std::wstring*,std::wstring*>((uint64_t)p_end_cap, (long long *)__p, (long long *)this->__end_, (uint64_t)__v->__end_);
  unint64_t v9 = this->__begin_;
  this->__begin_ = __v->__begin_;
  __v->__begin_ = v9;
  std::vector<std::wstring>::pointer end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::wstring *,std::wstring *,std::wstring *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v6 = a3;
    do
    {
      uint64_t v7 = a4 - 24;
      if (*(char *)(a4 - 1) < 0) {
        operator delete(*(void **)v7);
      }
      long long v8 = *(_OWORD *)(v6 - 24);
      *(void *)(v7 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = *(void *)(v6 - 8);
      *(_OWORD *)uint64_t v7 = v8;
      *(unsigned char *)(v6 - 1) = 0;
      *(_DWORD *)(v6 - DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = 0;
      a4 = v7;
      v6 -= 24;
    }
    while (v6 != a2);
  }
  return a3;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::wstring>,std::wstring*,std::wstring*,std::wstring*>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      long long v5 = *a2;
      *(void *)(v4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v4 = v5;
      v4 += 24;
      *((void *)a2 + 1) = 0;
      *((void *)a2 + 2) = 0;
      *(void *)a2 = 0;
      a2 = (long long *)((char *)a2 + 24);
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::wstring>,std::wstring*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

char *std::vector<TItnControlState>::__assign_with_size[abi:ne180100]<std::__wrap_iter<TItnControlState const*>,std::__wrap_iter<TItnControlState const*>>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 6)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 58) {
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 5;
    if (v8 >> 5 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<TItnControlState>::__vallocate[abi:ne180100](v7, v11);
    unsigned int v13 = (char *)v7[1];
    int64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      unint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  int64_t v12 = (void **)(result + 8);
  unint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 6;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  unint64_t v16 = &__src[64 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v15 << 6);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    unint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *int64_t v12 = &v9[v17];
  return result;
}

char *std::vector<TItnControlState>::__insert_with_size[abi:ne180100]<std::__wrap_iter<TItnControlState const*>,std::__wrap_iter<TItnControlState const*>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  long long v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 6)
  {
    unsigned int v13 = *(void **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 6);
    if (v14 >> 58) {
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (__dst - (uint64_t)v13) >> 6;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 5 > v14) {
      unint64_t v14 = v16 >> 5;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v17 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v41 = v9;
    if (v17) {
      unint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TItnControlState>>(v9, v17);
    }
    else {
      unint64_t v18 = 0;
    }
    uint64_t v30 = &v18[64 * v15];
    std::wstring __p = v18;
    uint64_t v38 = v30;
    unint64_t v40 = &v18[64 * v17];
    uint64_t v31 = a5 << 6;
    unint64_t v32 = &v30[64 * a5];
    do
    {
      long long v33 = *(_OWORD *)v7;
      long long v34 = *((_OWORD *)v7 + 1);
      long long v35 = *((_OWORD *)v7 + 3);
      *((_OWORD *)v30 + 2) = *((_OWORD *)v7 + 2);
      *((_OWORD *)v30 + 3) = v35;
      *(_OWORD *)uint64_t v30 = v33;
      *((_OWORD *)v30 + 1) = v34;
      v30 += 64;
      v7 += 64;
      v31 -= 64;
    }
    while (v31);
    uint64_t v39 = v32;
    long long v5 = (char *)std::vector<TItnControlState>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v39 != v38) {
      v39 += (v38 - v39 + 63) & 0xFFFFFFFFFFFFFFC0;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 6;
  if (v20 >= a5)
  {
    uint64_t v21 = &__src[64 * a5];
    uint64_t v23 = *(char **)(v9 - 8);
LABEL_17:
    unint64_t v24 = &v5[64 * a5];
    long long v25 = &v23[-64 * a5];
    __int32 v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      __int32 v26 = v23;
      do
      {
        long long v27 = *(_OWORD *)v25;
        long long v28 = *((_OWORD *)v25 + 1);
        long long v29 = *((_OWORD *)v25 + 3);
        *((_OWORD *)v26 + 2) = *((_OWORD *)v25 + 2);
        *((_OWORD *)v26 + 3) = v29;
        *(_OWORD *)__int32 v26 = v27;
        *((_OWORD *)v26 + 1) = v28;
        v26 += 64;
        v25 += 64;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-64 * ((v23 - v24) >> 6)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  uint64_t v21 = &__src[64 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[64 * v20], a4 - v21);
  }
  uint64_t v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_213EDA158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<TItnControlState>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  long long v5 = *(void **)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    uint64_t v9 = *(void *)(a2 + 8);
    do
    {
      long long v10 = *((_OWORD *)v8 - 4);
      long long v11 = *((_OWORD *)v8 - 3);
      long long v12 = *((_OWORD *)v8 - 1);
      uint64_t v7 = (void *)(v9 - 64);
      *(_OWORD *)(v9 - DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = *((_OWORD *)v8 - 2);
      *(_OWORD *)(v9 - DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v12;
      *(_OWORD *)(v9 - DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = v10;
      *(_OWORD *)(v9 - DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = v11;
      v8 -= 64;
      v9 -= 64;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  unsigned int v13 = a1[1];
  uint64_t v14 = *(void *)(a2 + 16);
  int64_t v15 = v13 - __src;
  if (v13 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v13 - __src);
    uint64_t v7 = *(void **)(a2 + 8);
  }
  *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v14 + v15;
  uint64_t v16 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v16;
  unint64_t v17 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v17;
  unint64_t v18 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = v18;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

char *std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(void *a1, unsigned int *a2, unsigned int *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 3)
  {
    unint64_t v18 = (char *)a1[1];
    unsigned int v13 = a1 + 1;
    long long v12 = v18;
    unint64_t v19 = (v18 - result) >> 3;
    if (v19 >= a4)
    {
      __int32 v26 = result;
      if (a2 != a3)
      {
        long long v27 = result;
        do
        {
          unsigned int v28 = *v6++;
          *(void *)long long v27 = v28;
          v27 += 8;
          v26 += 8;
        }
        while (v6 != a3);
      }
      unint64_t v17 = (char *)(v26 - result);
      long long v12 = result;
    }
    else
    {
      uint64_t v20 = &a2[v19];
      if (v12 != result)
      {
        uint64_t v21 = 4 * v19;
        do
        {
          unsigned int v22 = *v6++;
          *(void *)uint64_t result = v22;
          result += 8;
          v21 -= 4;
        }
        while (v21);
      }
      uint64_t v23 = v12;
      if (v20 != a3)
      {
        unint64_t v24 = v12;
        do
        {
          unsigned int v25 = *v20++;
          *(void *)unint64_t v24 = v25;
          v24 += 8;
          v23 += 8;
        }
        while (v20 != a3);
      }
      unint64_t v17 = (char *)(v23 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 61) {
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<wchar_t const*>::__vallocate[abi:ne180100](a1, v11);
    uint64_t v14 = (char *)a1[1];
    unsigned int v13 = a1 + 1;
    long long v12 = v14;
    int64_t v15 = v14;
    if (v6 != a3)
    {
      int64_t v15 = v12;
      do
      {
        unsigned int v16 = *v6++;
        *(void *)int64_t v15 = v16;
        v15 += 8;
      }
      while (v6 != a3);
    }
    unint64_t v17 = (char *)(v15 - v12);
  }
  *unsigned int v13 = &v17[(void)v12];
  return result;
}

void std::vector<TItnControlState>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  long long v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 6)
  {
    if (a2)
    {
      memset(*(void **)(v4 - 8), 255, a2 << 6);
      v7 += 64 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 6);
    if (v9 >> 58) {
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 6;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 5 > v9) {
      unint64_t v9 = v11 >> 5;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      unsigned int v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TItnControlState>>(v4, v12);
    }
    else {
      unsigned int v13 = 0;
    }
    uint64_t v14 = &v13[64 * v10];
    int64_t v15 = &v13[64 * v12];
    memset(v14, 255, a2 << 6);
    unsigned int v16 = &v14[64 * a2];
    unint64_t v18 = (char *)*a1;
    unint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        long long v19 = *((_OWORD *)v17 - 4);
        long long v20 = *((_OWORD *)v17 - 3);
        long long v21 = *((_OWORD *)v17 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v17 - 2);
        *((_OWORD *)v14 - 1) = v21;
        *((_OWORD *)v14 - 4) = v19;
        *((_OWORD *)v14 - 3) = v20;
        v14 -= 64;
        v17 -= 64;
      }
      while (v17 != v18);
      unint64_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void std::vector<THint>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 104;
        std::allocator<THint>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<THint>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 103) < 0) {
    operator delete(*(void **)(a2 + 80));
  }
  if (*(char *)(a2 + 79) < 0) {
    operator delete(*(void **)(a2 + 56));
  }
  if (*(char *)(a2 + 55) < 0)
  {
    unint64_t v3 = *(void **)(a2 + 32);
    operator delete(v3);
  }
}

uint64_t std::vector<THint>::__push_back_slow_path<THint>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x276276276276276) {
    std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x4EC4EC4EC4EC4EC5 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x13B13B13B13B13BLL) {
    unint64_t v9 = 0x276276276276276;
  }
  else {
    unint64_t v9 = v5;
  }
  v18[4] = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<THint>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[104 * v4];
  v18[0] = v10;
  v18[1] = v11;
  v18[3] = &v10[104 * v9];
  long long v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v12;
  long long v13 = *(_OWORD *)(a2 + 32);
  *((void *)v11 + 6) = *(void *)(a2 + 48);
  *((_OWORD *)v11 + 2) = v13;
  *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = 0;
  *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = 0;
  *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
  long long v14 = *(_OWORD *)(a2 + 56);
  *((void *)v11 + 9) = *(void *)(a2 + 72);
  *(_OWORD *)(v11 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = v14;
  *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = 0;
  *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = 0;
  *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = 0;
  long long v15 = *(_OWORD *)(a2 + 80);
  *((void *)v11 + 12) = *(void *)(a2 + 96);
  *((_OWORD *)v11 + 5) = v15;
  *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = 0;
  _OWORD v18[2] = v11 + 104;
  std::vector<THint>::__swap_out_circular_buffer(a1, v18);
  uint64_t v16 = a1[1];
  std::__split_buffer<THint>::~__split_buffer(v18);
  return v16;
}

void sub_213EDA738(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<THint>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<THint>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<THint>,std::reverse_iterator<THint*>,std::reverse_iterator<THint*>,std::reverse_iterator<THint*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<THint>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x276276276276277) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(104 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<THint>,std::reverse_iterator<THint*>,std::reverse_iterator<THint*>,std::reverse_iterator<THint*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v18 = a6;
  *((void *)&v18 + 1) = a7;
  long long v17 = v18;
  v15[0] = a1;
  v15[1] = &v17;
  v15[2] = &v18;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 104);
      *(_OWORD *)(v9 - 88) = *(_OWORD *)(a3 - 88);
      *(_OWORD *)(v9 - DgnArray<LinearTransform>::releaseAll((uint64_t)this + 104) = v10;
      long long v11 = *(_OWORD *)(a3 - 72);
      *(void *)(v9 - DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = *(void *)(a3 - 56);
      *(_OWORD *)(v9 - DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = v11;
      *(void *)(a3 - DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = 0;
      *(void *)(a3 - DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = 0;
      *(void *)(a3 - DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = 0;
      long long v12 = *(_OWORD *)(a3 - 48);
      *(void *)(v9 - DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v9 - DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = v12;
      *(void *)(a3 - DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = 0;
      *(void *)(a3 - DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
      *(void *)(a3 - DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = 0;
      long long v13 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = v13;
      v9 -= 104;
      *(void *)(a3 - DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = 0;
      *(void *)(a3 - DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
      *(void *)(a3 - 8) = 0;
      v7 -= 104;
      a3 -= 104;
    }
    while (a3 != a5);
    *((void *)&v18 + 1) = v9;
  }
  char v16 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<THint>,std::reverse_iterator<THint*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v15);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<THint>,std::reverse_iterator<THint*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<THint>,std::reverse_iterator<THint*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<THint>,std::reverse_iterator<THint*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<THint>::destroy[abi:ne180100](v3, v1);
      v1 += 104;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<THint>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<THint>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 104;
    std::allocator<THint>::destroy[abi:ne180100](v4, i - 104);
  }
}

uint64_t TBuffer<TPItnRuleControl>::insert(uint64_t result, unint64_t a2, long long *a3, unint64_t a4)
{
  unint64_t v5 = *(void *)(result + 16);
  if (v5 >= a2) {
    unint64_t v6 = a2;
  }
  else {
    unint64_t v6 = *(void *)(result + 16);
  }
  if (*(unsigned char *)(result + 4120))
  {
    unint64_t v7 = v5 + a4;
    unint64_t v8 = *(void *)(result + 8);
    if (v5 + a4 > v8 && v8 < 2 * v7)
    {
      *(void *)(result + 8) = (2 * v7) | 1;
      operator new[]();
    }
  }
  if (v6 < v5)
  {
    unint64_t v9 = *(void *)(result + 8);
    if (v6 + a4 < v9)
    {
      if (v9 >= v5 + a4) {
        unint64_t v9 = v5 + a4;
      }
      unint64_t v10 = v9 - (v6 + a4);
      if (v10)
      {
        uint64_t v11 = 16 * v9 - 16;
        do
        {
          *(_OWORD *)(*(void *)result + v11) = *(_OWORD *)(*(void *)result + v11 - 16 * a4);
          v11 -= 16;
          --v10;
        }
        while (v10);
      }
    }
  }
  unint64_t v12 = *(void *)(result + 8);
  unint64_t v13 = v12 - v6;
  if (v12 > v6)
  {
    if (v13 >= a4) {
      unint64_t v13 = a4;
    }
    if (v13)
    {
      uint64_t v14 = 16 * v6;
      do
      {
        long long v15 = *a3++;
        *(_OWORD *)(*(void *)result + v14) = v15;
        v14 += 16;
        --v13;
      }
      while (v13);
      unint64_t v12 = *(void *)(result + 8);
    }
  }
  unint64_t v16 = *(void *)(result + 16) + a4;
  *(void *)(result + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v16;
  if (v16 < v12)
  {
    long long v17 = (void *)(*(void *)result + 16 * v16);
    void *v17 = 0;
    v17[1] = 0;
  }
  return result;
}

void FileHistory::FileHistory(FileHistory *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((int32x2_t *)this + 2) = vdup_n_s32(0x3E8u);
  FileHistory::addEntryWithVersionAndCurrentTime(this, "CreationTime ", 0, 0);
}

void sub_213EDABDC(_Unwind_Exception *a1)
{
  DgnIOwnArray<DgnString *>::releaseAll(v1);
  _Unwind_Resume(a1);
}

void FileHistory::FileHistory(FileHistory *this, int a2, int a3)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = a2;
  *((_DWORD *)this + 5) = a3;
  FileHistory::addEntryWithVersionAndCurrentTime(this, "CreationTime ", 0, 0);
}

void sub_213EDAC38(_Unwind_Exception *a1)
{
  DgnIOwnArray<DgnString *>::releaseAll(v1);
  _Unwind_Resume(a1);
}

void FileHistory::~FileHistory(FileHistory *this)
{
}

void *FileHistory::addEntryWithVersionAndCurrentTime(FileHistory *this, const char *a2, int a3, int a4)
{
  FileHistory::addOneEntry(this, a2);
  addVersionAndCurrentTime(*(DgnString **)(*(void *)this + 8 * (*((_DWORD *)this + 2) - 1)));
  if (a3)
  {
    if (a4) {
      unint64_t v7 = " (text)";
    }
    else {
      unint64_t v7 = " (binary)";
    }
    DgnString::operator+=(*(DgnString **)(*(void *)this + 8 * (*((_DWORD *)this + 2) - 1)), v7);
  }
  unint64_t v8 = *(DgnString **)(*(void *)this + 8 * (*((_DWORD *)this + 2) - 1));
  if (*((_DWORD *)v8 + 2) <= 0x4Fu)
  {
    do
      DgnString::operator+=(v8, " ");
    while (*((_DWORD *)v8 + 2) < 0x50u);
  }

  return FileHistory::limitEntries(this);
}

void *DgnIOwnArray<DgnString *>::releaseAll(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<DgnString>(*(DgnString **)(*(void *)a1 + v3));
      *(void *)(*(void *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  uint64_t result = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

void FileHistory::loadFileHistory(FileHistory *this, DFile *a2, int a3)
{
  if (DFile::subFileExists((uint64_t)a2, 0x1Bu))
  {
    unint64_t v6 = (DgnStream *)DFile::openSubFile((uint64_t)a2, 0x1Bu, 3, 1);
    DgnIOwnArray<DgnString *>::releaseAll((uint64_t)this);
    DgnString::DgnString((DgnString *)&v13);
    while (((*(uint64_t (**)(DgnStream *))(*(void *)v6 + 56))(v6) & 1) == 0)
    {
      DgnStream::getLine(v6, (DgnString *)&v13, v7, v8, v9, v10, v11, v12);
      if (v14 >= 2) {
        FileHistory::addOneEntry(this, v13);
      }
    }
    (**(void (***)(DgnStream *))v6)(v6);
    MemChunkFree(v6, 0);
    FileHistory::addEntryWithVersionAndCurrentTime(this, "LoadTime ", 1, a3);
    FileHistory::limitEntries(this);
    DgnString::~DgnString((DgnString *)&v13);
  }
}

void sub_213EDAEE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

DgnString *FileHistory::addOneEntry(FileHistory *this, const char *a2)
{
  uint64_t v4 = MemChunkAlloc(0x10uLL, 0);
  uint64_t result = DgnString::DgnString((DgnString *)v4, a2);
  unsigned int v6 = *((_DWORD *)this + 2);
  if (v6 == *((_DWORD *)this + 3))
  {
    uint64_t result = (DgnString *)DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this, 1, 1);
    unsigned int v6 = *((_DWORD *)this + 2);
  }
  *(void *)(*(void *)this + 8 * v6) = v4;
  *((_DWORD *)this + 2) = v6 + 1;
  return result;
}

void *FileHistory::limitEntries(void *this)
{
  unsigned int v1 = *((_DWORD *)this + 2);
  unsigned int v2 = *((_DWORD *)this + 4);
  if (v1 > v2 + *((_DWORD *)this + 5) + 1)
  {
    uint64_t v3 = (FileHistory *)this;
    uint64_t v14 = *this;
    int v4 = *((_DWORD *)this + 3);
    unsigned int v15 = v1;
    int v16 = v4;
    *this = 0;
    this[1] = 0;
    if (v2)
    {
      unsigned int v5 = 0;
      for (unint64_t i = 0; i < v2; *(void *)(v14 + 8 * i++) = 0)
      {
        uint64_t v7 = *(void *)(v14 + 8 * i);
        if (v5 == *((_DWORD *)v3 + 3))
        {
          DgnPrimArray<unsigned long long>::reallocElts((uint64_t)v3, 1, 1);
          unsigned int v5 = *((_DWORD *)v3 + 2);
          unsigned int v2 = *((_DWORD *)v3 + 4);
        }
        *(void *)(*(void *)v3 + 8 * v5++) = v7;
        *((_DWORD *)v3 + 2) = v5;
      }
    }
    DgnString::DgnString((DgnString *)&v12);
    DgnString::operator=((DgnString *)&v12, "[ ... ClearTime ");
    addVersionAndCurrentTime((DgnString *)&v12);
    DgnString::operator+=((DgnString *)&v12, " ... ]");
    if (v13 <= 0x4F)
    {
      do
        DgnString::operator+=((DgnString *)&v12, " ");
      while (v13 < 0x50);
    }
    FileHistory::addOneEntry(v3, v12);
    int v8 = *((_DWORD *)v3 + 5);
    if (v1 - v8 < v1)
    {
      unsigned int v9 = *((_DWORD *)v3 + 2);
      uint64_t v10 = 8 * (v1 - v8);
      do
      {
        uint64_t v11 = *(void *)(v14 + v10);
        if (v9 == *((_DWORD *)v3 + 3))
        {
          DgnPrimArray<unsigned long long>::reallocElts((uint64_t)v3, 1, 1);
          unsigned int v9 = *((_DWORD *)v3 + 2);
        }
        *(void *)(*(void *)v3 + 8 * v9++) = v11;
        *((_DWORD *)v3 + 2) = v9;
        *(void *)(v14 + v10) = 0;
        v10 += 8;
        --v8;
      }
      while (v8);
    }
    DgnIOwnArray<DgnString *>::releaseAll((uint64_t)&v14);
    DgnString::~DgnString((DgnString *)&v12);
    return DgnIOwnArray<DgnString *>::releaseAll((uint64_t)&v14);
  }
  return this;
}

void sub_213EDB110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  DgnIOwnArray<DgnString *>::releaseAll((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t FileHistory::saveFileHistory(FileHistory *this, DFile *a2, int a3)
{
  unsigned int v5 = (void *)DFile::openSubFile((uint64_t)a2, 0x1Bu, 1, 1);
  if (*((_DWORD *)this + 2))
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(*(void *)this + 8 * v6);
      int v8 = *(_DWORD *)(v7 + 8);
      if (v8) {
        unsigned int v9 = *(char **)v7;
      }
      else {
        unsigned int v9 = &byte_2140B33BB;
      }
      BOOL v10 = v8 != 0;
      unsigned int v11 = v8 - 1;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = 0;
      }
      (*(void (**)(void *, char *, uint64_t))(*v5 + 80))(v5, v9, v12);
      (*(void (**)(void *, const char *, uint64_t))(*v5 + 80))(v5, "\n", 1);
      ++v6;
    }
    while (v6 < *((unsigned int *)this + 2));
  }
  FileHistory::addEntryWithVersionAndCurrentTime(this, "SaveTime ", 1, a3);
  uint64_t v13 = *(void *)(*(void *)this + 8 * (*((_DWORD *)this + 2) - 1));
  int v14 = *(_DWORD *)(v13 + 8);
  if (v14) {
    unsigned int v15 = *(char **)v13;
  }
  else {
    unsigned int v15 = &byte_2140B33BB;
  }
  BOOL v10 = v14 != 0;
  unsigned int v16 = v14 - 1;
  if (v10) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  (*(void (**)(void *, char *, uint64_t))(*v5 + 80))(v5, v15, v17);
  (*(void (**)(void *, const char *, uint64_t))(*v5 + 80))(v5, "\n", 1);
  (*(void (**)(void *))*v5)(v5);

  return MemChunkFree(v5, 0);
}

DgnString *addVersionAndCurrentTime(DgnString *a1)
{
  DgnString::preAllocate((unint64_t)a1, 256);
  MrecTime::appendLocalTimeToString(a1, v2);
  DgnString::operator+=(a1, " ");
  MrecName = (char *)GetMrecName();
  DgnString::operator+=(a1, MrecName);
  DgnString::operator+=(a1, " ");
  MrecVersion = (char *)GetMrecVersion();

  return DgnString::operator+=(a1, MrecVersion);
}

void *FileHistory::addEntry(FileHistory *this, const char *a2)
{
  FileHistory::addOneEntry(this, a2);

  return FileHistory::limitEntries(this);
}

void *FileHistory::addEntryWithElapsedTime(FileHistory *this, const char *a2, const SnapTime *a3)
{
  FileHistory::addOneEntry(this, a2);
  SnapTime::appendReadableTimeToString(a3, *(DgnString **)(*(void *)this + 8 * (*((_DWORD *)this + 2) - 1)));
  unsigned int v5 = *(DgnString **)(*(void *)this + 8 * (*((_DWORD *)this + 2) - 1));
  if (*((_DWORD *)v5 + 2) <= 0x4Fu)
  {
    do
      DgnString::operator+=(v5, " ");
    while (*((_DWORD *)v5 + 2) < 0x50u);
  }

  return FileHistory::limitEntries(this);
}

uint64_t sizeObject<DgnString *>(uint64_t a1, int a2)
{
  if (a2 == 3) {
    return 0;
  }
  int v4 = gShadowDiagnosticShowIdealizedObjectSizes;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v2 = 12;
  }
  else {
    uint64_t v2 = 16;
  }
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    uint64_t v6 = *(unsigned int *)(a1 + 8);
    if ((int)v6 >= 1)
    {
      unint64_t v7 = v6 + 1;
      int v8 = gShadowDiagnosticShowIdealizedObjectSizes;
      do
      {
        if (v8) {
          uint64_t v9 = 4;
        }
        else {
          uint64_t v9 = 8;
        }
        if (a2 != 2)
        {
          uint64_t v10 = *(void *)(*(void *)a1 + 8 * (v7 - 2));
          if (v10)
          {
            v9 += sizeObject(v10);
            int v8 = gShadowDiagnosticShowIdealizedObjectSizes;
          }
        }
        v2 += v9;
        --v7;
      }
      while (v7 > 1);
    }
    if (!a2)
    {
      char v11 = 2;
      if (!v4) {
        char v11 = 3;
      }
      v2 += (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8)) << v11;
    }
  }
  return v2;
}

DgnString *DgnDelete<DgnString>(DgnString *result)
{
  if (result)
  {
    DgnString::~DgnString(result);
    return (DgnString *)MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t PrefPronCmp(unsigned int a1, unsigned int a2, const Voc *this)
{
  uint64_t v13 = 0;
  unsigned int v12 = 0;
  Voc::getPrefPron((uint64_t)this, a1, (const unsigned __int16 **)&v13, &v12);
  char v11 = 0;
  unsigned int v10 = 0;
  Voc::getPrefPron((uint64_t)this, a2, (const unsigned __int16 **)&v11, &v10);
  int v6 = 0;
  while (v12 != v6)
  {
    if (v10 == v6) {
      return 1;
    }
    int v7 = v13[v6];
    int v8 = v11[v6++];
    uint64_t result = (v7 - v8);
    if (v7 != v8) {
      return result;
    }
  }
  if (v12 == v10) {
    return a1 - a2;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t PrefPicModelIdPronCmp(unsigned int a1, unsigned int a2, const Voc *this)
{
  uint64_t v13 = 0;
  unsigned int v12 = 0;
  Voc::getPrefPicModelIdPron(this, a1, (const unsigned int **)&v13, &v12);
  char v11 = 0;
  unsigned int v10 = 0;
  Voc::getPrefPicModelIdPron(this, a2, (const unsigned int **)&v11, &v10);
  int v6 = 0;
  while (v12 != v6)
  {
    if (v10 == v6) {
      return 1;
    }
    unsigned int v7 = v13[v6];
    unsigned int v8 = v11[v6++];
    uint64_t result = v7 - v8;
    if (v7 != v8) {
      return result;
    }
  }
  if (v12 == v10) {
    return a1 - a2;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t PrefiltererWordIdPronCollArray::getInsertIndex(PrefiltererWordIdPronCollArray *this, int a2, uint64_t a3)
{
  unsigned int v3 = a3;
  uint64_t v4 = *((void *)this + 2);
  int v8 = a2;
  uint64_t v9 = v4;
  if (*(_DWORD *)(v4 + 292)
    || (unsigned int v5 = (uint64_t (*)(uint64_t, uint64_t))PrefWordIdPronSearchCmpFunc, *(_DWORD *)(v4 + 296)))
  {
    unsigned int v5 = (uint64_t (*)(uint64_t, uint64_t))PrefWordIdPicModelIdPronSearchCmpFunc;
  }
  int v6 = DgnPrimArray<unsigned int>::searchLastOrBefore(this, a3, *((_DWORD *)this + 2), (uint64_t)&v8, v5);
  if (v6 == -1) {
    return v3;
  }
  else {
    return (v6 + 1);
  }
}

uint64_t PrefWordIdPronSearchCmpFunc(unsigned int *a1, const void *a2)
{
  int v4 = PrefPronCmp(*a1, *(_DWORD *)a2, *((const Voc **)a2 + 1));
  if (v4) {
    return -v4;
  }
  else {
    return *a1 - *(_DWORD *)a2;
  }
}

uint64_t PrefWordIdPicModelIdPronSearchCmpFunc(unsigned int *a1, const void *a2)
{
  uint64_t result = PrefPicModelIdPronCmp(*a1, *(_DWORD *)a2, *((const Voc **)a2 + 1));
  if (!result) {
    return *a1 - *(_DWORD *)a2;
  }
  return result;
}

uint64_t PrefiltererWordIdPronCollArray::sortArray(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(const Voc **)(a1 + 16);
  if (*((_DWORD *)v2 + 73) || *((_DWORD *)v2 + 74)) {
    return mrec_qsort_r<SortWordIdsByPrefPicModelIdPronScope>(*(void *)a2, *(unsigned int *)(a2 + 8), 4uLL, v2);
  }
  else {
    return mrec_qsort_r<SortWordIdsByPrefPronScope>(*(void *)a2, *(unsigned int *)(a2 + 8), 4uLL, v2);
  }
}

uint64_t mrec_qsort_r<SortWordIdsByPrefPronScope>(uint64_t result, unint64_t a2, unint64_t a3, const Voc *a4)
{
  unint64_t v5 = a2;
  int v6 = (unsigned int *)result;
  uint64_t v7 = -(uint64_t)a3;
  if (((result | a3) & 7) != 0) {
    int v8 = 2;
  }
  else {
    int v8 = a3 != 8;
  }
  BOOL v175 = ((result | a3) & 7) == 0;
  int v176 = v8;
  uint64_t v177 = -(uint64_t)a3;
  if (a2 < 7)
  {
LABEL_159:
    if ((uint64_t)(v5 * a3) > (uint64_t)a3)
    {
      uint64_t v173 = (unsigned int *)((char *)v6 + v5 * a3);
      char v134 = (unsigned int *)((char *)v6 + a3);
      uint64_t v135 = v6;
      do
      {
        if (v134 > v6)
        {
          unint64_t v136 = v135;
          char v137 = v134;
          do
          {
            uint64_t v138 = v137;
            char v137 = (unsigned int *)((char *)v137 + v7);
            unsigned int v139 = *v137;
            unsigned int v140 = *v138;
            uint64_t result = PrefPronCmp(*v137, *v138, a4);
            uint64_t v7 = v177;
            int v141 = v139 - v140;
            if (result) {
              int v141 = -(int)result;
            }
            if (v141 < 1) {
              break;
            }
            if (v176)
            {
              if (v175)
              {
                uint64_t v142 = 0;
                uint64_t v143 = (uint64_t)v136 + a3;
                do
                {
                  uint64_t v144 = *(void *)(v143 + 8 * v142);
                  *(void *)(v143 + 8 * v142) = *(void *)&v136[2 * v142];
                  *(void *)&v136[2 * v142++] = v144;
                }
                while (a3 >> 3 != v142);
              }
              else
              {
                uint64_t v146 = 0;
                uint64_t v147 = (uint64_t)v136 + a3;
                do
                {
                  char v148 = *(unsigned char *)(v147 + v146);
                  *(unsigned char *)(v147 + v146) = *((unsigned char *)v136 + v146);
                  *((unsigned char *)v136 + v146++) = v148;
                }
                while (a3 != v146);
              }
            }
            else
            {
              uint64_t v145 = *(void *)v138;
              *(void *)uint64_t v138 = *(void *)v137;
              *(void *)char v137 = v145;
            }
            unint64_t v136 = (unsigned int *)((char *)v136 + v177);
          }
          while (v137 > v6);
        }
        char v134 = (unsigned int *)((char *)v134 + a3);
        uint64_t v135 = (unsigned int *)((char *)v135 + a3);
      }
      while (v134 < v173);
    }
    return result;
  }
  BOOL v169 = a3 != 8;
  unint64_t v9 = a3 >> 3;
  while (1)
  {
    unsigned int v10 = (unsigned int *)((char *)v6 + (v5 >> 1) * a3);
    unint64_t v170 = v5;
    if (v5 == 7) {
      goto LABEL_81;
    }
    char v11 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
    if (v5 >= 0x29)
    {
      uint64_t v168 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
      unint64_t v12 = (v5 >> 3) * a3;
      uint64_t v13 = (unsigned int *)((char *)v6 + v12);
      unint64_t v166 = v12;
      int v14 = (unsigned int *)((char *)v6 + 2 * v12);
      unsigned int v15 = *v6;
      unsigned int v16 = *(unsigned int *)((char *)v6 + v12);
      int v17 = PrefPronCmp(*v6, v16, a4);
      if (v17) {
        int v18 = -v17;
      }
      else {
        int v18 = v15 - v16;
      }
      uint64_t v171 = v13;
      unsigned int v19 = *v13;
      unsigned int v20 = *v14;
      int v21 = PrefPronCmp(*v13, *v14, a4);
      int v22 = v19 - v20;
      if (v21) {
        int v22 = -v21;
      }
      if (v18 < 0)
      {
        if ((v22 & 0x80000000) == 0)
        {
          unsigned int v29 = *v6;
          unsigned int v30 = *v14;
          int v31 = PrefPronCmp(*v6, *v14, a4);
          int v32 = v29 - v30;
          if (v31) {
            int v32 = -v31;
          }
          if (v32 >= 0) {
            long long v27 = v6;
          }
          else {
            long long v27 = v14;
          }
          goto LABEL_27;
        }
      }
      else if (v22 <= 0)
      {
        unsigned int v23 = *v6;
        unsigned int v24 = *v14;
        int v25 = PrefPronCmp(*v6, *v14, a4);
        int v26 = v23 - v24;
        if (v25) {
          int v26 = -v25;
        }
        if (v26 >= 0) {
          long long v27 = v14;
        }
        else {
          long long v27 = v6;
        }
LABEL_27:
        uint64_t v171 = v27;
      }
      unint64_t v33 = v166;
      long long v34 = (unsigned int *)((char *)v10 + v166);
      unint64_t v165 = (unsigned int *)((char *)v10 - v166);
      unsigned int v35 = *(unsigned int *)((char *)v10 - v166);
      unsigned int v36 = *v10;
      int v37 = PrefPronCmp(v35, *v10, a4);
      if (v37) {
        int v38 = -v37;
      }
      else {
        int v38 = v35 - v36;
      }
      unsigned int v39 = *v10;
      unsigned int v40 = *v34;
      int v41 = PrefPronCmp(*v10, *v34, a4);
      int v42 = v39 - v40;
      if (v41) {
        int v42 = -v41;
      }
      if (v38 < 0)
      {
        if ((v42 & 0x80000000) == 0)
        {
          unsigned int v10 = (unsigned int *)((char *)v10 - v166);
          unsigned int v47 = *v165;
          unsigned int v48 = *v34;
          int v49 = PrefPronCmp(*v165, *v34, a4);
          int v50 = v47 - v48;
          if (v49) {
            int v50 = -v49;
          }
          if (v50 < 0) {
            unsigned int v10 = v34;
          }
        }
      }
      else if (v42 <= 0)
      {
        unsigned int v10 = (unsigned int *)((char *)v10 - v166);
        unsigned int v43 = *v165;
        unsigned int v44 = *v34;
        int v45 = PrefPronCmp(*v165, *v34, a4);
        int v46 = v43 - v44;
        if (v45) {
          int v46 = -v45;
        }
        if (v46 >= 0) {
          unsigned int v10 = v34;
        }
      }
      char v11 = (unsigned int *)((char *)v168 - v166);
      BOOL v167 = (unsigned int *)((char *)v168 - 2 * v166);
      unsigned int v51 = *v167;
      unsigned int v52 = *(unsigned int *)((char *)v168 - v33);
      int v53 = PrefPronCmp(*v167, v52, a4);
      if (v53) {
        int v54 = -v53;
      }
      else {
        int v54 = v51 - v52;
      }
      unsigned int v55 = *v11;
      unsigned int v56 = *v168;
      int v57 = PrefPronCmp(*v11, *v168, a4);
      int v58 = v55 - v56;
      if (v57) {
        int v58 = -v57;
      }
      if (v54 < 0)
      {
        unint64_t v5 = v170;
        if ((v58 & 0x80000000) == 0)
        {
          char v11 = v167;
          unsigned int v63 = *v167;
          unsigned int v64 = *v168;
          int v65 = PrefPronCmp(*v167, *v168, a4);
          int v66 = v63 - v64;
          if (v65) {
            int v66 = -v65;
          }
          if (v66 < 0) {
            char v11 = v168;
          }
        }
      }
      else
      {
        unint64_t v5 = v170;
        if (v58 <= 0)
        {
          char v11 = v167;
          unsigned int v59 = *v167;
          unsigned int v60 = *v168;
          int v61 = PrefPronCmp(*v167, *v168, a4);
          int v62 = v59 - v60;
          if (v61) {
            int v62 = -v61;
          }
          if (v62 >= 0) {
            char v11 = v168;
          }
        }
      }
      unsigned int v28 = v171;
      goto LABEL_63;
    }
    unsigned int v28 = v6;
LABEL_63:
    uint64_t v172 = v28;
    unsigned int v67 = *v28;
    unsigned int v68 = *v10;
    int v69 = PrefPronCmp(*v28, *v10, a4);
    if (v69) {
      int v70 = -v69;
    }
    else {
      int v70 = v67 - v68;
    }
    unsigned int v71 = *v10;
    unsigned int v72 = *v11;
    uint64_t result = PrefPronCmp(*v10, *v11, a4);
    int v73 = v71 - v72;
    if (result) {
      int v73 = -(int)result;
    }
    if (v70 < 0)
    {
      if ((v73 & 0x80000000) == 0)
      {
        unsigned int v77 = *v172;
        unsigned int v78 = *v11;
        uint64_t result = PrefPronCmp(*v172, *v11, a4);
        int v79 = v77 - v78;
        if (result) {
          int v79 = -(int)result;
        }
        if (v79 >= 0) {
          unsigned int v10 = v172;
        }
        else {
          unsigned int v10 = v11;
        }
      }
    }
    else if (v73 <= 0)
    {
      unsigned int v74 = *v172;
      unsigned int v75 = *v11;
      uint64_t result = PrefPronCmp(*v172, *v11, a4);
      int v76 = v74 - v75;
      if (result) {
        int v76 = -(int)result;
      }
      if (v76 >= 0) {
        unsigned int v10 = v11;
      }
      else {
        unsigned int v10 = v172;
      }
    }
LABEL_81:
    if (v176)
    {
      if (v175)
      {
        uint64_t v80 = v6;
        unint64_t v81 = a3 >> 3;
        do
        {
          uint64_t v82 = *(void *)v80;
          *(void *)uint64_t v80 = *(void *)v10;
          v80 += 2;
          *(void *)unsigned int v10 = v82;
          v10 += 2;
          --v81;
        }
        while (v81);
      }
      else
      {
        unint64_t v84 = a3;
        uint64_t v85 = v6;
        do
        {
          char v86 = *(unsigned char *)v85;
          *(unsigned char *)uint64_t v85 = *(unsigned char *)v10;
          uint64_t v85 = (unsigned int *)((char *)v85 + 1);
          *(unsigned char *)unsigned int v10 = v86;
          unsigned int v10 = (unsigned int *)((char *)v10 + 1);
          --v84;
        }
        while (v84);
      }
    }
    else
    {
      uint64_t v83 = *(void *)v6;
      *(void *)int v6 = *(void *)v10;
      *(void *)unsigned int v10 = v83;
    }
    int v87 = 0;
    unint64_t v88 = (void *)((char *)v6 + a3);
    uint64_t v89 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
    uint64_t v90 = v89;
    uint64_t v91 = (unsigned int *)((char *)v6 + a3);
LABEL_90:
    while (v91 <= v90)
    {
      unsigned int v92 = *v91;
      unsigned int v93 = *v6;
      uint64_t result = PrefPronCmp(*v91, *v6, a4);
      int v94 = v92 - v93;
      if (result) {
        int v94 = -(int)result;
      }
      if (v94 > 0) {
        break;
      }
      if (!v94)
      {
        if (v176)
        {
          if (v175)
          {
            uint64_t v95 = 0;
            do
            {
              uint64_t v96 = v88[v95];
              v88[v95] = *(void *)&v91[2 * v95];
              *(void *)&v91[2 * v95++] = v96;
            }
            while (v9 != v95);
          }
          else
          {
            uint64_t v110 = 0;
            do
            {
              char v111 = *((unsigned char *)v88 + v110);
              *((unsigned char *)v88 + v110) = *((unsigned char *)v91 + v110);
              *((unsigned char *)v91 + v110++) = v111;
            }
            while (a3 != v110);
          }
        }
        else
        {
          uint64_t v109 = *v88;
          *unint64_t v88 = *(void *)v91;
          *(void *)uint64_t v91 = v109;
        }
        unint64_t v88 = (void *)((char *)v88 + a3);
        int v87 = 1;
      }
      uint64_t v91 = (unsigned int *)((char *)v91 + a3);
    }
    while (v91 <= v90)
    {
      unsigned int v103 = *v90;
      unsigned int v104 = *v6;
      uint64_t result = PrefPronCmp(*v90, *v6, a4);
      int v105 = v103 - v104;
      if (result) {
        int v105 = -(int)result;
      }
      if (v105 < 0)
      {
        if (v176)
        {
          uint64_t v106 = v177;
          if (v175)
          {
            uint64_t v107 = 0;
            do
            {
              uint64_t v108 = *(void *)&v91[2 * v107];
              *(void *)&v91[2 * v107] = *(void *)&v90[2 * v107];
              *(void *)&v90[2 * v107++] = v108;
            }
            while (v9 != v107);
          }
          else
          {
            uint64_t v113 = 0;
            do
            {
              char v114 = *((unsigned char *)v91 + v113);
              *((unsigned char *)v91 + v113) = *((unsigned char *)v90 + v113);
              *((unsigned char *)v90 + v113++) = v114;
            }
            while (a3 != v113);
          }
        }
        else
        {
          uint64_t v112 = *(void *)v91;
          *(void *)uint64_t v91 = *(void *)v90;
          *(void *)uint64_t v90 = v112;
          uint64_t v106 = v177;
        }
        uint64_t v91 = (unsigned int *)((char *)v91 + a3);
        uint64_t v90 = (unsigned int *)((char *)v90 + v106);
        int v87 = 1;
        goto LABEL_90;
      }
      if (v105)
      {
        uint64_t v97 = v177;
      }
      else
      {
        uint64_t v97 = v177;
        if (v176)
        {
          if (v175)
          {
            uint64_t v98 = 0;
            do
            {
              uint64_t v99 = *(void *)&v90[2 * v98];
              *(void *)&v90[2 * v98] = *(void *)&v89[2 * v98];
              *(void *)&v89[2 * v98++] = v99;
            }
            while (v9 != v98);
          }
          else
          {
            uint64_t v101 = 0;
            do
            {
              char v102 = *((unsigned char *)v90 + v101);
              *((unsigned char *)v90 + v101) = *((unsigned char *)v89 + v101);
              *((unsigned char *)v89 + v101++) = v102;
            }
            while (a3 != v101);
          }
        }
        else
        {
          uint64_t v100 = *(void *)v90;
          *(void *)uint64_t v90 = *(void *)v89;
          *(void *)uint64_t v89 = v100;
        }
        uint64_t v89 = (unsigned int *)((char *)v89 + v177);
        int v87 = 1;
      }
      uint64_t v90 = (unsigned int *)((char *)v90 + v97);
    }
    uint64_t v115 = (char *)v6 + v170 * a3;
    if (!v87) {
      break;
    }
    int64_t v116 = (char *)v91 - (char *)v88;
    if ((char *)v88 - (char *)v6 >= (char *)v91 - (char *)v88) {
      unint64_t v117 = (char *)v91 - (char *)v88;
    }
    else {
      unint64_t v117 = (char *)v88 - (char *)v6;
    }
    if (v117)
    {
      if (v175)
      {
        char v118 = (void *)((char *)v91 - v117);
        unint64_t v119 = v117 >> 3;
        uint64_t v120 = v6;
        do
        {
          uint64_t v121 = *(void *)v120;
          *(void *)uint64_t v120 = *v118;
          v120 += 2;
          *v118++ = v121;
          --v119;
        }
        while (v119);
      }
      else
      {
        uint64_t v122 = -(uint64_t)v117;
        uint64_t v123 = v6;
        do
        {
          char v124 = *(unsigned char *)v123;
          *(unsigned char *)uint64_t v123 = *((unsigned char *)v91 + v122);
          uint64_t v123 = (unsigned int *)((char *)v123 + 1);
          *((unsigned char *)v91 + v122) = v124;
          BOOL v125 = __CFADD__(v122++, 1);
        }
        while (!v125);
      }
    }
    int64_t v126 = (char *)v89 - (char *)v90;
    if ((char *)v89 - (char *)v90 >= v115 - ((char *)v89 + a3)) {
      unint64_t v127 = v115 - ((char *)v89 + a3);
    }
    else {
      unint64_t v127 = (char *)v89 - (char *)v90;
    }
    if (v127)
    {
      if (v175)
      {
        char v128 = &v115[-v127];
        unint64_t v129 = v127 >> 3;
        do
        {
          uint64_t v130 = *(void *)v91;
          *(void *)uint64_t v91 = *(void *)v128;
          v91 += 2;
          *(void *)char v128 = v130;
          v128 += 8;
          --v129;
        }
        while (v129);
      }
      else
      {
        uint64_t v131 = -(uint64_t)v127;
        do
        {
          char v132 = *(unsigned char *)v91;
          *(unsigned char *)uint64_t v91 = v115[v131];
          uint64_t v91 = (unsigned int *)((char *)v91 + 1);
          v115[v131] = v132;
          BOOL v125 = __CFADD__(v131++, 1);
        }
        while (!v125);
      }
    }
    if (v116 > (uint64_t)a3) {
      uint64_t result = mrec_qsort_r<SortWordIdsByPrefPronScope>(v6, v116 / a3, a3, a4);
    }
    uint64_t v7 = v177;
    if (v126 <= (uint64_t)a3) {
      return result;
    }
    int v6 = (unsigned int *)&v115[-v126];
    unint64_t v5 = v126 / a3;
    int v133 = v169;
    if ((((v115 - v126) | a3) & 7) != 0) {
      int v133 = 2;
    }
    BOOL v175 = (((v115 - v126) | a3) & 7) == 0;
    int v176 = v133;
    if (v5 < 7) {
      goto LABEL_159;
    }
  }
  uint64_t v149 = v177;
  unint64_t v150 = (unsigned int *)((char *)v6 + a3);
  if ((uint64_t)(v170 * a3) > (uint64_t)a3)
  {
    unsigned int v151 = v6;
    do
    {
      unint64_t v174 = v150;
      if (v150 > v6)
      {
        uint64_t v152 = v151;
        uint64_t v153 = v150;
        do
        {
          uint64_t v154 = v153;
          uint64_t v153 = (unsigned int *)((char *)v153 + v149);
          unsigned int v155 = *v153;
          unsigned int v156 = *v154;
          uint64_t result = PrefPronCmp(*v153, *v154, a4);
          uint64_t v149 = v177;
          int v157 = v155 - v156;
          if (result) {
            int v157 = -(int)result;
          }
          if (v157 < 1) {
            break;
          }
          if (v176)
          {
            if (v175)
            {
              uint64_t v158 = 0;
              uint64_t v159 = (uint64_t)v152 + a3;
              do
              {
                uint64_t v160 = *(void *)(v159 + 8 * v158);
                *(void *)(v159 + 8 * v158) = *(void *)&v152[2 * v158];
                *(void *)&v152[2 * v158++] = v160;
              }
              while (v9 != v158);
            }
            else
            {
              uint64_t v162 = 0;
              uint64_t v163 = (uint64_t)v152 + a3;
              do
              {
                char v164 = *(unsigned char *)(v163 + v162);
                *(unsigned char *)(v163 + v162) = *((unsigned char *)v152 + v162);
                *((unsigned char *)v152 + v162++) = v164;
              }
              while (a3 != v162);
            }
          }
          else
          {
            uint64_t v161 = *(void *)v154;
            *(void *)uint64_t v154 = *(void *)v153;
            *(void *)uint64_t v153 = v161;
          }
          uint64_t v152 = (unsigned int *)((char *)v152 + v177);
        }
        while (v153 > v6);
      }
      unint64_t v150 = (unsigned int *)((char *)v174 + a3);
      unsigned int v151 = (unsigned int *)((char *)v151 + a3);
    }
    while ((char *)v174 + a3 < v115);
  }
  return result;
}

uint64_t mrec_qsort_r<SortWordIdsByPrefPicModelIdPronScope>(uint64_t result, unint64_t a2, unint64_t a3, const Voc *a4)
{
  unint64_t v5 = a2;
  int v6 = (unsigned int *)result;
  uint64_t v7 = -(uint64_t)a3;
  if (((result | a3) & 7) != 0) {
    int v8 = 2;
  }
  else {
    int v8 = a3 != 8;
  }
  BOOL v175 = ((result | a3) & 7) == 0;
  int v176 = v8;
  uint64_t v177 = -(uint64_t)a3;
  if (a2 < 7)
  {
LABEL_159:
    if ((uint64_t)(v5 * a3) > (uint64_t)a3)
    {
      uint64_t v173 = (unsigned int *)((char *)v6 + v5 * a3);
      char v134 = (unsigned int *)((char *)v6 + a3);
      uint64_t v135 = v6;
      do
      {
        if (v134 > v6)
        {
          unint64_t v136 = v135;
          char v137 = v134;
          do
          {
            uint64_t v138 = v137;
            char v137 = (unsigned int *)((char *)v137 + v7);
            unsigned int v139 = *v137;
            unsigned int v140 = *v138;
            uint64_t result = PrefPicModelIdPronCmp(*v137, *v138, a4);
            uint64_t v7 = v177;
            int v141 = v139 - v140;
            if (result) {
              int v141 = result;
            }
            if (v141 < 1) {
              break;
            }
            if (v176)
            {
              if (v175)
              {
                uint64_t v142 = 0;
                uint64_t v143 = (uint64_t)v136 + a3;
                do
                {
                  uint64_t v144 = *(void *)(v143 + 8 * v142);
                  *(void *)(v143 + 8 * v142) = *(void *)&v136[2 * v142];
                  *(void *)&v136[2 * v142++] = v144;
                }
                while (a3 >> 3 != v142);
              }
              else
              {
                uint64_t v146 = 0;
                uint64_t v147 = (uint64_t)v136 + a3;
                do
                {
                  char v148 = *(unsigned char *)(v147 + v146);
                  *(unsigned char *)(v147 + v146) = *((unsigned char *)v136 + v146);
                  *((unsigned char *)v136 + v146++) = v148;
                }
                while (a3 != v146);
              }
            }
            else
            {
              uint64_t v145 = *(void *)v138;
              *(void *)uint64_t v138 = *(void *)v137;
              *(void *)char v137 = v145;
            }
            unint64_t v136 = (unsigned int *)((char *)v136 + v177);
          }
          while (v137 > v6);
        }
        char v134 = (unsigned int *)((char *)v134 + a3);
        uint64_t v135 = (unsigned int *)((char *)v135 + a3);
      }
      while (v134 < v173);
    }
    return result;
  }
  BOOL v169 = a3 != 8;
  unint64_t v9 = a3 >> 3;
  while (1)
  {
    unsigned int v10 = (unsigned int *)((char *)v6 + (v5 >> 1) * a3);
    unint64_t v170 = v5;
    if (v5 == 7) {
      goto LABEL_81;
    }
    char v11 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
    if (v5 >= 0x29)
    {
      uint64_t v168 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
      unint64_t v12 = (v5 >> 3) * a3;
      uint64_t v13 = (unsigned int *)((char *)v6 + v12);
      unint64_t v166 = v12;
      int v14 = (unsigned int *)((char *)v6 + 2 * v12);
      unsigned int v15 = *v6;
      unsigned int v16 = *(unsigned int *)((char *)v6 + v12);
      unsigned int v17 = PrefPicModelIdPronCmp(*v6, v16, a4);
      if (v17) {
        unsigned int v18 = v17;
      }
      else {
        unsigned int v18 = v15 - v16;
      }
      uint64_t v171 = v13;
      unsigned int v19 = *v13;
      unsigned int v20 = *v14;
      int v21 = PrefPicModelIdPronCmp(*v13, *v14, a4);
      int v22 = v19 - v20;
      if (v21) {
        int v22 = v21;
      }
      if ((v18 & 0x80000000) != 0)
      {
        if ((v22 & 0x80000000) == 0)
        {
          unsigned int v29 = *v6;
          unsigned int v30 = *v14;
          int v31 = PrefPicModelIdPronCmp(*v6, *v14, a4);
          int v32 = v29 - v30;
          if (v31) {
            int v32 = v31;
          }
          if (v32 >= 0) {
            long long v27 = v6;
          }
          else {
            long long v27 = v14;
          }
          goto LABEL_27;
        }
      }
      else if (v22 <= 0)
      {
        unsigned int v23 = *v6;
        unsigned int v24 = *v14;
        int v25 = PrefPicModelIdPronCmp(*v6, *v14, a4);
        int v26 = v23 - v24;
        if (v25) {
          int v26 = v25;
        }
        if (v26 >= 0) {
          long long v27 = v14;
        }
        else {
          long long v27 = v6;
        }
LABEL_27:
        uint64_t v171 = v27;
      }
      unint64_t v33 = v166;
      long long v34 = (unsigned int *)((char *)v10 + v166);
      unint64_t v165 = (unsigned int *)((char *)v10 - v166);
      unsigned int v35 = *(unsigned int *)((char *)v10 - v166);
      unsigned int v36 = *v10;
      unsigned int v37 = PrefPicModelIdPronCmp(v35, *v10, a4);
      if (v37) {
        unsigned int v38 = v37;
      }
      else {
        unsigned int v38 = v35 - v36;
      }
      unsigned int v39 = *v10;
      unsigned int v40 = *v34;
      int v41 = PrefPicModelIdPronCmp(*v10, *v34, a4);
      int v42 = v39 - v40;
      if (v41) {
        int v42 = v41;
      }
      if ((v38 & 0x80000000) != 0)
      {
        if ((v42 & 0x80000000) == 0)
        {
          unsigned int v10 = (unsigned int *)((char *)v10 - v166);
          unsigned int v47 = *v165;
          unsigned int v48 = *v34;
          int v49 = PrefPicModelIdPronCmp(*v165, *v34, a4);
          int v50 = v47 - v48;
          if (v49) {
            int v50 = v49;
          }
          if (v50 < 0) {
            unsigned int v10 = v34;
          }
        }
      }
      else if (v42 <= 0)
      {
        unsigned int v10 = (unsigned int *)((char *)v10 - v166);
        unsigned int v43 = *v165;
        unsigned int v44 = *v34;
        int v45 = PrefPicModelIdPronCmp(*v165, *v34, a4);
        int v46 = v43 - v44;
        if (v45) {
          int v46 = v45;
        }
        if (v46 >= 0) {
          unsigned int v10 = v34;
        }
      }
      char v11 = (unsigned int *)((char *)v168 - v166);
      BOOL v167 = (unsigned int *)((char *)v168 - 2 * v166);
      unsigned int v51 = *v167;
      unsigned int v52 = *(unsigned int *)((char *)v168 - v33);
      unsigned int v53 = PrefPicModelIdPronCmp(*v167, v52, a4);
      if (v53) {
        unsigned int v54 = v53;
      }
      else {
        unsigned int v54 = v51 - v52;
      }
      unsigned int v55 = *v11;
      unsigned int v56 = *v168;
      int v57 = PrefPicModelIdPronCmp(*v11, *v168, a4);
      int v58 = v55 - v56;
      if (v57) {
        int v58 = v57;
      }
      if ((v54 & 0x80000000) != 0)
      {
        unint64_t v5 = v170;
        if ((v58 & 0x80000000) == 0)
        {
          char v11 = v167;
          unsigned int v63 = *v167;
          unsigned int v64 = *v168;
          int v65 = PrefPicModelIdPronCmp(*v167, *v168, a4);
          int v66 = v63 - v64;
          if (v65) {
            int v66 = v65;
          }
          if (v66 < 0) {
            char v11 = v168;
          }
        }
      }
      else
      {
        unint64_t v5 = v170;
        if (v58 <= 0)
        {
          char v11 = v167;
          unsigned int v59 = *v167;
          unsigned int v60 = *v168;
          int v61 = PrefPicModelIdPronCmp(*v167, *v168, a4);
          int v62 = v59 - v60;
          if (v61) {
            int v62 = v61;
          }
          if (v62 >= 0) {
            char v11 = v168;
          }
        }
      }
      unsigned int v28 = v171;
      goto LABEL_63;
    }
    unsigned int v28 = v6;
LABEL_63:
    uint64_t v172 = v28;
    unsigned int v67 = *v28;
    unsigned int v68 = *v10;
    unsigned int v69 = PrefPicModelIdPronCmp(*v28, *v10, a4);
    if (v69) {
      unsigned int v70 = v69;
    }
    else {
      unsigned int v70 = v67 - v68;
    }
    unsigned int v71 = *v10;
    unsigned int v72 = *v11;
    uint64_t result = PrefPicModelIdPronCmp(*v10, *v11, a4);
    int v73 = v71 - v72;
    if (result) {
      int v73 = result;
    }
    if ((v70 & 0x80000000) != 0)
    {
      if ((v73 & 0x80000000) == 0)
      {
        unsigned int v77 = *v172;
        unsigned int v78 = *v11;
        uint64_t result = PrefPicModelIdPronCmp(*v172, *v11, a4);
        int v79 = v77 - v78;
        if (result) {
          int v79 = result;
        }
        if (v79 >= 0) {
          unsigned int v10 = v172;
        }
        else {
          unsigned int v10 = v11;
        }
      }
    }
    else if (v73 <= 0)
    {
      unsigned int v74 = *v172;
      unsigned int v75 = *v11;
      uint64_t result = PrefPicModelIdPronCmp(*v172, *v11, a4);
      int v76 = v74 - v75;
      if (result) {
        int v76 = result;
      }
      if (v76 >= 0) {
        unsigned int v10 = v11;
      }
      else {
        unsigned int v10 = v172;
      }
    }
LABEL_81:
    if (v176)
    {
      if (v175)
      {
        uint64_t v80 = v6;
        unint64_t v81 = a3 >> 3;
        do
        {
          uint64_t v82 = *(void *)v80;
          *(void *)uint64_t v80 = *(void *)v10;
          v80 += 2;
          *(void *)unsigned int v10 = v82;
          v10 += 2;
          --v81;
        }
        while (v81);
      }
      else
      {
        unint64_t v84 = a3;
        uint64_t v85 = v6;
        do
        {
          char v86 = *(unsigned char *)v85;
          *(unsigned char *)uint64_t v85 = *(unsigned char *)v10;
          uint64_t v85 = (unsigned int *)((char *)v85 + 1);
          *(unsigned char *)unsigned int v10 = v86;
          unsigned int v10 = (unsigned int *)((char *)v10 + 1);
          --v84;
        }
        while (v84);
      }
    }
    else
    {
      uint64_t v83 = *(void *)v6;
      *(void *)int v6 = *(void *)v10;
      *(void *)unsigned int v10 = v83;
    }
    int v87 = 0;
    unint64_t v88 = (void *)((char *)v6 + a3);
    uint64_t v89 = (unsigned int *)((char *)v6 + (v5 - 1) * a3);
    uint64_t v90 = v89;
    uint64_t v91 = (unsigned int *)((char *)v6 + a3);
LABEL_90:
    while (v91 <= v90)
    {
      unsigned int v92 = *v91;
      unsigned int v93 = *v6;
      uint64_t result = PrefPicModelIdPronCmp(*v91, *v6, a4);
      int v94 = v92 - v93;
      if (result) {
        int v94 = result;
      }
      if (v94 > 0) {
        break;
      }
      if (!v94)
      {
        if (v176)
        {
          if (v175)
          {
            uint64_t v95 = 0;
            do
            {
              uint64_t v96 = v88[v95];
              v88[v95] = *(void *)&v91[2 * v95];
              *(void *)&v91[2 * v95++] = v96;
            }
            while (v9 != v95);
          }
          else
          {
            uint64_t v110 = 0;
            do
            {
              char v111 = *((unsigned char *)v88 + v110);
              *((unsigned char *)v88 + v110) = *((unsigned char *)v91 + v110);
              *((unsigned char *)v91 + v110++) = v111;
            }
            while (a3 != v110);
          }
        }
        else
        {
          uint64_t v109 = *v88;
          *unint64_t v88 = *(void *)v91;
          *(void *)uint64_t v91 = v109;
        }
        unint64_t v88 = (void *)((char *)v88 + a3);
        int v87 = 1;
      }
      uint64_t v91 = (unsigned int *)((char *)v91 + a3);
    }
    while (v91 <= v90)
    {
      unsigned int v103 = *v90;
      unsigned int v104 = *v6;
      uint64_t result = PrefPicModelIdPronCmp(*v90, *v6, a4);
      unsigned int v105 = v103 - v104;
      if (result) {
        unsigned int v105 = result;
      }
      if ((v105 & 0x80000000) != 0)
      {
        if (v176)
        {
          uint64_t v106 = v177;
          if (v175)
          {
            uint64_t v107 = 0;
            do
            {
              uint64_t v108 = *(void *)&v91[2 * v107];
              *(void *)&v91[2 * v107] = *(void *)&v90[2 * v107];
              *(void *)&v90[2 * v107++] = v108;
            }
            while (v9 != v107);
          }
          else
          {
            uint64_t v113 = 0;
            do
            {
              char v114 = *((unsigned char *)v91 + v113);
              *((unsigned char *)v91 + v113) = *((unsigned char *)v90 + v113);
              *((unsigned char *)v90 + v113++) = v114;
            }
            while (a3 != v113);
          }
        }
        else
        {
          uint64_t v112 = *(void *)v91;
          *(void *)uint64_t v91 = *(void *)v90;
          *(void *)uint64_t v90 = v112;
          uint64_t v106 = v177;
        }
        uint64_t v91 = (unsigned int *)((char *)v91 + a3);
        uint64_t v90 = (unsigned int *)((char *)v90 + v106);
        int v87 = 1;
        goto LABEL_90;
      }
      if (v105)
      {
        uint64_t v97 = v177;
      }
      else
      {
        uint64_t v97 = v177;
        if (v176)
        {
          if (v175)
          {
            uint64_t v98 = 0;
            do
            {
              uint64_t v99 = *(void *)&v90[2 * v98];
              *(void *)&v90[2 * v98] = *(void *)&v89[2 * v98];
              *(void *)&v89[2 * v98++] = v99;
            }
            while (v9 != v98);
          }
          else
          {
            uint64_t v101 = 0;
            do
            {
              char v102 = *((unsigned char *)v90 + v101);
              *((unsigned char *)v90 + v101) = *((unsigned char *)v89 + v101);
              *((unsigned char *)v89 + v101++) = v102;
            }
            while (a3 != v101);
          }
        }
        else
        {
          uint64_t v100 = *(void *)v90;
          *(void *)uint64_t v90 = *(void *)v89;
          *(void *)uint64_t v89 = v100;
        }
        uint64_t v89 = (unsigned int *)((char *)v89 + v177);
        int v87 = 1;
      }
      uint64_t v90 = (unsigned int *)((char *)v90 + v97);
    }
    uint64_t v115 = (char *)v6 + v170 * a3;
    if (!v87) {
      break;
    }
    int64_t v116 = (char *)v91 - (char *)v88;
    if ((char *)v88 - (char *)v6 >= (char *)v91 - (char *)v88) {
      unint64_t v117 = (char *)v91 - (char *)v88;
    }
    else {
      unint64_t v117 = (char *)v88 - (char *)v6;
    }
    if (v117)
    {
      if (v175)
      {
        char v118 = (void *)((char *)v91 - v117);
        unint64_t v119 = v117 >> 3;
        uint64_t v120 = v6;
        do
        {
          uint64_t v121 = *(void *)v120;
          *(void *)uint64_t v120 = *v118;
          v120 += 2;
          *v118++ = v121;
          --v119;
        }
        while (v119);
      }
      else
      {
        uint64_t v122 = -(uint64_t)v117;
        uint64_t v123 = v6;
        do
        {
          char v124 = *(unsigned char *)v123;
          *(unsigned char *)uint64_t v123 = *((unsigned char *)v91 + v122);
          uint64_t v123 = (unsigned int *)((char *)v123 + 1);
          *((unsigned char *)v91 + v122) = v124;
          BOOL v125 = __CFADD__(v122++, 1);
        }
        while (!v125);
      }
    }
    int64_t v126 = (char *)v89 - (char *)v90;
    if ((char *)v89 - (char *)v90 >= v115 - ((char *)v89 + a3)) {
      unint64_t v127 = v115 - ((char *)v89 + a3);
    }
    else {
      unint64_t v127 = (char *)v89 - (char *)v90;
    }
    if (v127)
    {
      if (v175)
      {
        char v128 = &v115[-v127];
        unint64_t v129 = v127 >> 3;
        do
        {
          uint64_t v130 = *(void *)v91;
          *(void *)uint64_t v91 = *(void *)v128;
          v91 += 2;
          *(void *)char v128 = v130;
          v128 += 8;
          --v129;
        }
        while (v129);
      }
      else
      {
        uint64_t v131 = -(uint64_t)v127;
        do
        {
          char v132 = *(unsigned char *)v91;
          *(unsigned char *)uint64_t v91 = v115[v131];
          uint64_t v91 = (unsigned int *)((char *)v91 + 1);
          v115[v131] = v132;
          BOOL v125 = __CFADD__(v131++, 1);
        }
        while (!v125);
      }
    }
    if (v116 > (uint64_t)a3) {
      uint64_t result = mrec_qsort_r<SortWordIdsByPrefPicModelIdPronScope>(v6, v116 / a3, a3, a4);
    }
    uint64_t v7 = v177;
    if (v126 <= (uint64_t)a3) {
      return result;
    }
    int v6 = (unsigned int *)&v115[-v126];
    unint64_t v5 = v126 / a3;
    int v133 = v169;
    if ((((v115 - v126) | a3) & 7) != 0) {
      int v133 = 2;
    }
    BOOL v175 = (((v115 - v126) | a3) & 7) == 0;
    int v176 = v133;
    if (v5 < 7) {
      goto LABEL_159;
    }
  }
  uint64_t v149 = v177;
  unint64_t v150 = (unsigned int *)((char *)v6 + a3);
  if ((uint64_t)(v170 * a3) > (uint64_t)a3)
  {
    unsigned int v151 = v6;
    do
    {
      unint64_t v174 = v150;
      if (v150 > v6)
      {
        uint64_t v152 = v151;
        uint64_t v153 = v150;
        do
        {
          uint64_t v154 = v153;
          uint64_t v153 = (unsigned int *)((char *)v153 + v149);
          unsigned int v155 = *v153;
          unsigned int v156 = *v154;
          uint64_t result = PrefPicModelIdPronCmp(*v153, *v154, a4);
          uint64_t v149 = v177;
          int v157 = v155 - v156;
          if (result) {
            int v157 = result;
          }
          if (v157 < 1) {
            break;
          }
          if (v176)
          {
            if (v175)
            {
              uint64_t v158 = 0;
              uint64_t v159 = (uint64_t)v152 + a3;
              do
              {
                uint64_t v160 = *(void *)(v159 + 8 * v158);
                *(void *)(v159 + 8 * v158) = *(void *)&v152[2 * v158];
                *(void *)&v152[2 * v158++] = v160;
              }
              while (v9 != v158);
            }
            else
            {
              uint64_t v162 = 0;
              uint64_t v163 = (uint64_t)v152 + a3;
              do
              {
                char v164 = *(unsigned char *)(v163 + v162);
                *(unsigned char *)(v163 + v162) = *((unsigned char *)v152 + v162);
                *((unsigned char *)v152 + v162++) = v164;
              }
              while (a3 != v162);
            }
          }
          else
          {
            uint64_t v161 = *(void *)v154;
            *(void *)uint64_t v154 = *(void *)v153;
            *(void *)uint64_t v153 = v161;
          }
          uint64_t v152 = (unsigned int *)((char *)v152 + v177);
        }
        while (v153 > v6);
      }
      unint64_t v150 = (unsigned int *)((char *)v174 + a3);
      unsigned int v151 = (unsigned int *)((char *)v151 + a3);
    }
    while ((char *)v174 + a3 < v115);
  }
  return result;
}