void sub_213F5C774(_Unwind_Exception *a1)
{
  uint64_t v1;

  DgnPrimArray<unsigned int>::~DgnPrimArray(v1);
  _Unwind_Resume(a1);
}

void ParentFirstStateIdIterator::addChildStatesToQueue(StateMgr **this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t ChildStates = StateMgr::getChildStates(*this, a2, a3, a4, a5, a6, a7, a8);
  unint64_t v10 = *(unsigned int *)(ChildStates + 8);
  if (v10)
  {
    uint64_t v11 = ChildStates;
    for (unint64_t i = 0; i < v10; ++i)
    {
      uint64_t v13 = *(unsigned int *)(*(void *)v11 + 4 * i);
      if (*((_DWORD *)*this + 180) > v13)
      {
        if (*(unsigned char *)(*((void *)*this + 70) + v13))
        {
          DgnPrimQueue<unsigned int,DgnPrimArray<unsigned int>>::enqueue((uint64_t)(this + 1), v13);
          unint64_t v10 = *(unsigned int *)(v11 + 8);
        }
      }
    }
  }
}

void TextStateRule::TextStateRule(TextStateRule *this)
{
  *(void *)((char *)this + 20) = -1;
  *(void *)((char *)this + 12) = -1;
  *(void *)((char *)this + 4) = -1;
  *((_DWORD *)this + 7) = -1;
  DgnString::DgnString((TextStateRule *)((char *)this + 40));
}

void TextStateRule::~TextStateRule(TextStateRule *this)
{
}

uint64_t TextStateRule::parseHeader(TextStateRule *this, DgnTextFileParser *a2)
{
  DgnTextFileParser::verifyMatchingFileType(a2, "TSR");
  v40[0] = 0;
  v40[1] = 0;
  DgnTextFile::legalDgnTextFileVersions((int)a2, sTSR_Versions, (uint64_t)v40, v4, v5, v6, v7, v8);
  DgnTextFileParser::verifyFileVersionInRange((uint64_t)a2, (unsigned int *)v40, v9, v10, v11, v12, v13, v14);
  uint64_t FileVersion = DgnTextFile::getFileVersion(a2);
  BOOL v16 = HIDWORD(FileVersion) == 12;
  if (FileVersion != 19) {
    BOOL v16 = 0;
  }
  if (FileVersion == 20) {
    BOOL v16 = HIDWORD(FileVersion) == 13;
  }
  if (FileVersion == 23) {
    BOOL v16 = HIDWORD(FileVersion) == 14;
  }
  *((unsigned char *)this + 32) = v16;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  DgnTextFile::getLineFieldNames((uint64_t)a2, (uint64_t)&v38);
  v37[0] = 0;
  v37[1] = 0;
  DgnTextFile::getLineFieldFormats((uint64_t)a2, (unint64_t)v37);
  if ((int)v39 >= 1)
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    do
    {
      if (*(_DWORD *)(v38 + v19 + 8)) {
        v21 = *(const char **)(v38 + v19);
      }
      else {
        v21 = &byte_2140B33BB;
      }
      if (!strcmp(v21, "Type"))
      {
        if (*(_DWORD *)(v37[0] + 4 * v20)) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 252, (uint64_t)"voc/tsr", 25, (uint64_t)"%.500s %.500s", v17, v18, (char)v21);
        }
        *((_DWORD *)this + 1) = v20;
      }
      else if (*((unsigned char *)this + 32) && !strcmp(v21, "VocName"))
      {
        if (*(_DWORD *)(v37[0] + 4 * v20)) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 260, (uint64_t)"voc/tsr", 25, (uint64_t)"%.500s %.500s", v17, v18, (char)v21);
        }
        *((_DWORD *)this + 2) = v20;
      }
      else if (!strcmp(v21, "IntValue1"))
      {
        if (*(_DWORD *)(v37[0] + 4 * v20) != 1) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 268, (uint64_t)"voc/tsr", 25, (uint64_t)"%.500s %.500s", v17, v18, (char)v21);
        }
        *((_DWORD *)this + 3) = v20;
      }
      else if (!strcmp(v21, "StrValue1"))
      {
        if (*(_DWORD *)(v37[0] + 4 * v20)) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 276, (uint64_t)"voc/tsr", 25, (uint64_t)"%.500s %.500s", v17, v18, (char)v21);
        }
        *((_DWORD *)this + 4) = v20;
      }
      else if (!strcmp(v21, "StrValue2"))
      {
        if (*(_DWORD *)(v37[0] + 4 * v20)) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 284, (uint64_t)"voc/tsr", 25, (uint64_t)"%.500s %.500s", v17, v18, (char)v21);
        }
        *((_DWORD *)this + 5) = v20;
      }
      else if (!strcmp(v21, "StrValue3"))
      {
        if (*(_DWORD *)(v37[0] + 4 * v20)) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 292, (uint64_t)"voc/tsr", 25, (uint64_t)"%.500s %.500s", v17, v18, (char)v21);
        }
        *((_DWORD *)this + 6) = v20;
      }
      else if (!strcmp(v21, "IntValue2"))
      {
        if (*(_DWORD *)(v37[0] + 4 * v20) != 1) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 300, (uint64_t)"voc/tsr", 25, (uint64_t)"%.500s %.500s", v17, v18, (char)v21);
        }
        *((_DWORD *)this + 7) = v20;
      }
      else
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 306, (uint64_t)"voc/tsr", 2, (uint64_t)"%u %.500s", v17, v18, *((_DWORD *)a2 + 25));
      }
      ++v20;
      v19 += 16;
    }
    while (v20 < (int)v39);
  }
  if (*((_DWORD *)this + 1) == -1) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 309, (uint64_t)"voc/tsr", 3, (uint64_t)"%u %.500s", v17, v18, *((_DWORD *)a2 + 25));
  }
  if (*((unsigned char *)this + 32) && *((_DWORD *)this + 2) == -1) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 311, (uint64_t)"voc/tsr", 3, (uint64_t)"%u %.500s", v17, v18, *((_DWORD *)a2 + 25));
  }
  if (*((_DWORD *)this + 3) == -1) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 313, (uint64_t)"voc/tsr", 3, (uint64_t)"%u %.500s", v17, v18, *((_DWORD *)a2 + 25));
  }
  if (*((_DWORD *)this + 4) == -1) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 315, (uint64_t)"voc/tsr", 3, (uint64_t)"%u %.500s", v17, v18, *((_DWORD *)a2 + 25));
  }
  if (*((_DWORD *)this + 5) == -1) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 317, (uint64_t)"voc/tsr", 3, (uint64_t)"%u %.500s", v17, v18, *((_DWORD *)a2 + 25));
  }
  if (*((_DWORD *)this + 6) == -1) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 319, (uint64_t)"voc/tsr", 3, (uint64_t)"%u %.500s", v17, v18, *((_DWORD *)a2 + 25));
  }
  if (*((_DWORD *)this + 7) == -1) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 321, (uint64_t)"voc/tsr", 3, (uint64_t)"%u %.500s", v17, v18, *((_DWORD *)a2 + 25));
  }
  if (*((unsigned char *)this + 32))
  {
    *(_DWORD *)&v36[2] = 0;
    DgnTextFile::getHeaderFieldUnsigned(a2, "NumberOfVocs", (unsigned int *)&v36[2], 1, 0, 0xFFFFFFFF);
    if (*(_DWORD *)&v36[2] != 1) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 329, (uint64_t)"voc/tsr", 30, (uint64_t)"%u %u", v27, v28, *((_DWORD *)a2 + 25));
    }
  }
  else
  {
    *(void *)v36 = 0;
    DgnTextFile::getHeaderFieldUnsigned(a2, "MaxStateId", (unsigned int *)&v36[2], 1, 0, 0xFFFFFFFF);
    DgnTextFile::getHeaderFieldUnsigned(a2, "MaxRuleId", (unsigned int *)v36, 1, 0, 0xFFFFFFFF);
    StateMgr::preAllocToEnsureStateId(*(void *)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), *(unsigned int *)&v36[2], v29, v30, v31, v32, v33, v34);
    RuleMgr::preAllocToEnsureRuleId(*(RuleMgr **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 64), v36[0]);
  }
  DgnTextFileParser::verifyNoUnknownHeaderFields(a2, v22, v23, v24, v25, v26, v27, v28);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v37);
  DgnArray<DgnString>::releaseAll((uint64_t)&v38);
  return DgnIArray<Utterance *>::~DgnIArray((uint64_t)v40);
}

void sub_213F5CF20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnArray<DgnString>::releaseAll((uint64_t)va1);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void TextStateRule::parseBody(TextStateRule *this, DgnTextFileParser *a2)
{
  uint64_t FileVersion = DgnTextFile::getFileVersion(a2);
  if ((DgnTextFileParser::parseNextLine(a2) & 1) == 0) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 358, (uint64_t)"voc/tsr", 22, (uint64_t)"%u", v5, v6, *((_DWORD *)a2 + 25));
  }
  LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
  DgnString::DgnString((DgnString *)&v90, LineFieldString);
  uint64_t v8 = v90;
  if (*((unsigned char *)this + 32))
  {
    int v9 = v91;
    if (v91) {
      uint64_t v10 = v90;
    }
    else {
      uint64_t v10 = &byte_2140B33BB;
    }
    if (strcmp(v10, "VocMaxIdInfo"))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 364, (uint64_t)"voc/tsr", 19, (uint64_t)"%u", v11, v12, *((_DWORD *)a2 + 25));
      int v9 = v91;
      uint64_t v8 = v90;
    }
    if (v9) {
      uint64_t v13 = v8;
    }
    else {
      uint64_t v13 = &byte_2140B33BB;
    }
    if (!strcmp(v13, "VocMaxIdInfo"))
    {
      TextStateRule::parseVocMaxIdInfo(this, a2);
      if (DgnTextFileParser::atEof(a2)) {
        uint64_t v14 = "None";
      }
      else {
        uint64_t v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
      }
      DgnString::operator=((DgnString *)&v90, v14);
      uint64_t v8 = v90;
    }
  }
  int v15 = v91;
  if (v91) {
    BOOL v16 = v8;
  }
  else {
    BOOL v16 = &byte_2140B33BB;
  }
  if (!strcmp(v16, "StateDefinition"))
  {
    TextStateRule::parseStateDefinition(this, a2);
    if (DgnTextFileParser::atEof(a2)) {
      uint64_t v17 = "None";
    }
    else {
      uint64_t v17 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    }
    DgnString::operator=((DgnString *)&v90, v17);
    int v15 = v91;
    uint64_t v8 = v90;
  }
  if (v15) {
    uint64_t v18 = v8;
  }
  else {
    uint64_t v18 = &byte_2140B33BB;
  }
  if (!strcmp(v18, "StateName"))
  {
    TextStateRule::parseStateName(this, a2);
    if (DgnTextFileParser::atEof(a2)) {
      uint64_t v19 = "None";
    }
    else {
      uint64_t v19 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    }
    DgnString::operator=((DgnString *)&v90, v19);
    int v15 = v91;
    uint64_t v8 = v90;
  }
  if (v15) {
    uint64_t v20 = v8;
  }
  else {
    uint64_t v20 = &byte_2140B33BB;
  }
  if (!strcmp(v20, "StateAllowLM"))
  {
    TextStateRule::parseStateAllowLM(this, a2);
    if (DgnTextFileParser::atEof(a2)) {
      v21 = "None";
    }
    else {
      v21 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    }
    DgnString::operator=((DgnString *)&v90, v21);
    int v15 = v91;
    uint64_t v8 = v90;
  }
  if (v15) {
    uint64_t v22 = v8;
  }
  else {
    uint64_t v22 = &byte_2140B33BB;
  }
  if (!strcmp(v22, "StateWeightsName"))
  {
    TextStateRule::parseStateWeightsName(this, a2);
    if (DgnTextFileParser::atEof(a2)) {
      uint64_t v23 = "None";
    }
    else {
      uint64_t v23 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    }
    DgnString::operator=((DgnString *)&v90, v23);
    int v15 = v91;
    uint64_t v8 = v90;
  }
  if (!v15) {
    uint64_t v8 = &byte_2140B33BB;
  }
  if (!strcmp(v8, "StateWordPenalty"))
  {
    TextStateRule::parseStateWordPenalty(this, a2, v8);
    if (DgnTextFileParser::atEof(a2)) {
      uint64_t v24 = "None";
    }
    else {
      uint64_t v24 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    }
    DgnString::operator=((DgnString *)&v90, v24);
  }
  if (FileVersion != 0xC00000013)
  {
    if (v91) {
      uint64_t v25 = v90;
    }
    else {
      uint64_t v25 = &byte_2140B33BB;
    }
    if (!strcmp(v25, "StateMinStartTime"))
    {
      TextStateRule::parseStateMinStartTime(this, a2);
      if (DgnTextFileParser::atEof(a2)) {
        uint64_t v26 = "None";
      }
      else {
        uint64_t v26 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
      }
      DgnString::operator=((DgnString *)&v90, v26);
    }
    if (v91) {
      uint64_t v27 = v90;
    }
    else {
      uint64_t v27 = &byte_2140B33BB;
    }
    if (!strcmp(v27, "StateMaxStartTime"))
    {
      TextStateRule::parseStateMaxStartTime(this, a2);
      if (DgnTextFileParser::atEof(a2)) {
        uint64_t v28 = "None";
      }
      else {
        uint64_t v28 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
      }
      DgnString::operator=((DgnString *)&v90, v28);
    }
    if (v91) {
      uint64_t v29 = v90;
    }
    else {
      uint64_t v29 = &byte_2140B33BB;
    }
    if (!strcmp(v29, "StateMinEndTime"))
    {
      TextStateRule::parseStateMinEndTime(this, a2);
      if (DgnTextFileParser::atEof(a2)) {
        uint64_t v30 = "None";
      }
      else {
        uint64_t v30 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
      }
      DgnString::operator=((DgnString *)&v90, v30);
    }
    if (v91) {
      uint64_t v31 = v90;
    }
    else {
      uint64_t v31 = &byte_2140B33BB;
    }
    if (!strcmp(v31, "StateMaxEndTime"))
    {
      TextStateRule::parseStateMaxEndTime(this, a2);
      if (DgnTextFileParser::atEof(a2)) {
        uint64_t v32 = "None";
      }
      else {
        uint64_t v32 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
      }
      DgnString::operator=((DgnString *)&v90, v32);
    }
  }
  int v33 = v91;
  uint64_t v34 = v90;
  if (v91) {
    v35 = v90;
  }
  else {
    v35 = &byte_2140B33BB;
  }
  if (!strcmp(v35, "StateCollapsible"))
  {
    TextStateRule::parseStateCollapsible(this, a2);
    if (DgnTextFileParser::atEof(a2)) {
      v36 = "None";
    }
    else {
      v36 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    }
    DgnString::operator=((DgnString *)&v90, v36);
    int v33 = v91;
    uint64_t v34 = v90;
  }
  if (v33) {
    v37 = v34;
  }
  else {
    v37 = &byte_2140B33BB;
  }
  if (!strcmp(v37, "StateAllowCoart"))
  {
    TextStateRule::parseStateAllowCoart(this, a2);
    if (DgnTextFileParser::atEof(a2)) {
      uint64_t v38 = "None";
    }
    else {
      uint64_t v38 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    }
    DgnString::operator=((DgnString *)&v90, v38);
    int v33 = v91;
    uint64_t v34 = v90;
  }
  if (v33) {
    uint64_t v39 = v34;
  }
  else {
    uint64_t v39 = &byte_2140B33BB;
  }
  if (!strcmp(v39, "StateAllowSkip"))
  {
    TextStateRule::parseStateAllowSkip(this, a2);
    if (DgnTextFileParser::atEof(a2)) {
      v40 = "None";
    }
    else {
      v40 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    }
    DgnString::operator=((DgnString *)&v90, v40);
    int v33 = v91;
    uint64_t v34 = v90;
  }
  if (v33) {
    v41 = v34;
  }
  else {
    v41 = &byte_2140B33BB;
  }
  if (!strcmp(v41, "StateAllowLeftWordBoundary"))
  {
    TextStateRule::parseStateAllowLeftWordBoundary(this, a2);
    if (DgnTextFileParser::atEof(a2)) {
      v42 = "None";
    }
    else {
      v42 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    }
    DgnString::operator=((DgnString *)&v90, v42);
    int v33 = v91;
    uint64_t v34 = v90;
  }
  if (v33) {
    v43 = v34;
  }
  else {
    v43 = &byte_2140B33BB;
  }
  if (!strcmp(v43, "StateAllowRightWordBoundary"))
  {
    TextStateRule::parseStateAllowRightWordBoundary(this, a2);
    if (DgnTextFileParser::atEof(a2)) {
      v44 = "None";
    }
    else {
      v44 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    }
    DgnString::operator=((DgnString *)&v90, v44);
  }
  if (FileVersion == 19)
  {
    if (HIDWORD(FileVersion) != 12) {
      goto LABEL_141;
    }
  }
  else if (FileVersion != 0xD00000014)
  {
    goto LABEL_141;
  }
  if (v91) {
    v45 = v90;
  }
  else {
    v45 = &byte_2140B33BB;
  }
  if (!strcmp(v45, "StateAllowPrecedingNonAcousticWords"))
  {
    TextStateRule::parseStateAllowPrecedingNonAcousticWords(this, a2);
    if (DgnTextFileParser::atEof(a2)) {
      v46 = "None";
    }
    else {
      v46 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    }
    DgnString::operator=((DgnString *)&v90, v46);
  }
LABEL_141:
  int v47 = v91;
  v48 = v90;
  if (v91) {
    v49 = v90;
  }
  else {
    v49 = &byte_2140B33BB;
  }
  if (!strcmp(v49, "StateAllowPrefiltering"))
  {
    TextStateRule::parseStateAllowPrefiltering(this, a2);
    if (DgnTextFileParser::atEof(a2)) {
      v50 = "None";
    }
    else {
      v50 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    }
    DgnString::operator=((DgnString *)&v90, v50);
    int v47 = v91;
    v48 = v90;
  }
  if (v47) {
    v51 = v48;
  }
  else {
    v51 = &byte_2140B33BB;
  }
  if (!strcmp(v51, "StateAllowEndOfUtt"))
  {
    TextStateRule::parseStateAllowEndOfUtt(this, a2);
    if (DgnTextFileParser::atEof(a2)) {
      v52 = "None";
    }
    else {
      v52 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    }
    DgnString::operator=((DgnString *)&v90, v52);
    int v47 = v91;
    v48 = v90;
  }
  if (v47) {
    v53 = v48;
  }
  else {
    v53 = &byte_2140B33BB;
  }
  if (!strcmp(v53, "StateAliasState"))
  {
    TextStateRule::parseStateAliasState(this, a2);
    if (DgnTextFileParser::atEof(a2)) {
      v54 = "None";
    }
    else {
      v54 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    }
    DgnString::operator=((DgnString *)&v90, v54);
  }
  if (FileVersion == 19)
  {
    if (HIDWORD(FileVersion) == 12) {
      goto LABEL_185;
    }
  }
  else if (FileVersion == 0xD00000014)
  {
    goto LABEL_185;
  }
  int v55 = v91;
  v56 = v90;
  if (v91) {
    v57 = v90;
  }
  else {
    v57 = &byte_2140B33BB;
  }
  if (!strcmp(v57, "StatePrecedingNonAcousticWordState"))
  {
    TextStateRule::parseStatePrecedingNonAcousticWordState(this, a2);
    if (DgnTextFileParser::atEof(a2)) {
      v58 = "None";
    }
    else {
      v58 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    }
    DgnString::operator=((DgnString *)&v90, v58);
    int v55 = v91;
    v56 = v90;
  }
  if (v55) {
    v59 = v56;
  }
  else {
    v59 = &byte_2140B33BB;
  }
  if (!strcmp(v59, "StatePrecedingNonAcousticWordRequired"))
  {
    TextStateRule::parseStatePrecedingNonAcousticWordRequired(this, a2);
    if (DgnTextFileParser::atEof(a2)) {
      v60 = "None";
    }
    else {
      v60 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    }
    DgnString::operator=((DgnString *)&v90, v60);
  }
LABEL_185:
  int v61 = v91;
  v62 = v90;
  if (v91) {
    v63 = v90;
  }
  else {
    v63 = &byte_2140B33BB;
  }
  if (!strcmp(v63, "StateIncludedWord"))
  {
    TextStateRule::parseStateIncludedWord(this, a2);
    if (DgnTextFileParser::atEof(a2)) {
      v64 = "None";
    }
    else {
      v64 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    }
    DgnString::operator=((DgnString *)&v90, v64);
    int v61 = v91;
    v62 = v90;
  }
  if (v61) {
    v65 = v62;
  }
  else {
    v65 = &byte_2140B33BB;
  }
  if (!strcmp(v65, "StateTransitionState"))
  {
    TextStateRule::parseStateTransitionState(this, a2);
    if (DgnTextFileParser::atEof(a2)) {
      v66 = "None";
    }
    else {
      v66 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    }
    DgnString::operator=((DgnString *)&v90, v66);
    int v61 = v91;
    v62 = v90;
  }
  if (v61) {
    v67 = v62;
  }
  else {
    v67 = &byte_2140B33BB;
  }
  if (!strcmp(v67, "StateAllowedCollations"))
  {
    TextStateRule::parseStateAllowedCollations(this, a2);
    if (DgnTextFileParser::atEof(a2)) {
      v68 = "None";
    }
    else {
      v68 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    }
    DgnString::operator=((DgnString *)&v90, v68);
    int v61 = v91;
    v62 = v90;
  }
  if (v61) {
    v69 = v62;
  }
  else {
    v69 = &byte_2140B33BB;
  }
  if (!strcmp(v69, "StateEnv"))
  {
    TextStateRule::parseStateEnv(this, a2);
    if (DgnTextFileParser::atEof(a2)) {
      v70 = "None";
    }
    else {
      v70 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    }
    DgnString::operator=((DgnString *)&v90, v70);
    int v61 = v91;
    v62 = v90;
  }
  if (v61) {
    v71 = v62;
  }
  else {
    v71 = &byte_2140B33BB;
  }
  if (!strcmp(v71, "StateIncludedWordEnv"))
  {
    TextStateRule::parseStateIncludedWordEnv(this, a2);
    if (DgnTextFileParser::atEof(a2)) {
      v72 = "None";
    }
    else {
      v72 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    }
    DgnString::operator=((DgnString *)&v90, v72);
    int v61 = v91;
    v62 = v90;
  }
  if (v61) {
    v73 = v62;
  }
  else {
    v73 = &byte_2140B33BB;
  }
  if (!strcmp(v73, "RuleDefinition"))
  {
    TextStateRule::parseRuleDefinition(this, a2);
    if (DgnTextFileParser::atEof(a2)) {
      v74 = "None";
    }
    else {
      v74 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    }
    DgnString::operator=((DgnString *)&v90, v74);
    int v61 = v91;
    v62 = v90;
  }
  if (v61) {
    v75 = v62;
  }
  else {
    v75 = &byte_2140B33BB;
  }
  if (!strcmp(v75, "RuleName"))
  {
    TextStateRule::parseRuleName(this, a2);
    if (DgnTextFileParser::atEof(a2)) {
      v76 = "None";
    }
    else {
      v76 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    }
    DgnString::operator=((DgnString *)&v90, v76);
    int v61 = v91;
    v62 = v90;
  }
  if (v61) {
    v77 = v62;
  }
  else {
    v77 = &byte_2140B33BB;
  }
  if (!strcmp(v77, "RuleAllowLM"))
  {
    TextStateRule::parseRuleAllowLM(this, a2);
    if (DgnTextFileParser::atEof(a2)) {
      v78 = "None";
    }
    else {
      v78 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    }
    DgnString::operator=((DgnString *)&v90, v78);
    int v61 = v91;
    v62 = v90;
  }
  if (v61) {
    v79 = v62;
  }
  else {
    v79 = &byte_2140B33BB;
  }
  if (!strcmp(v79, "RuleAllowCoart"))
  {
    TextStateRule::parseRuleAllowCoart(this, a2);
    if (DgnTextFileParser::atEof(a2)) {
      v80 = "None";
    }
    else {
      v80 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    }
    DgnString::operator=((DgnString *)&v90, v80);
    int v61 = v91;
    v62 = v90;
  }
  if (v61) {
    v81 = v62;
  }
  else {
    v81 = &byte_2140B33BB;
  }
  if (!strcmp(v81, "RuleAllowPrefiltering"))
  {
    TextStateRule::parseRuleAllowPrefiltering(this, a2);
    if (DgnTextFileParser::atEof(a2)) {
      v82 = "None";
    }
    else {
      v82 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    }
    DgnString::operator=((DgnString *)&v90, v82);
    int v61 = v91;
    v62 = v90;
  }
  if (v61) {
    v83 = v62;
  }
  else {
    v83 = &byte_2140B33BB;
  }
  if (!strcmp(v83, "RuleDescription"))
  {
    TextStateRule::parseRuleDescription(this, a2);
    if (DgnTextFileParser::atEof(a2)) {
      v84 = "None";
    }
    else {
      v84 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    }
    DgnString::operator=((DgnString *)&v90, v84);
    int v61 = v91;
    v62 = v90;
  }
  if (v61) {
    v85 = v62;
  }
  else {
    v85 = &byte_2140B33BB;
  }
  if (!strcmp(v85, "RuleEnv"))
  {
    TextStateRule::parseRuleEnv(this, a2);
    if (DgnTextFileParser::atEof(a2)) {
      v86 = "None";
    }
    else {
      v86 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    }
    DgnString::operator=((DgnString *)&v90, v86);
    int v61 = v91;
    v62 = v90;
  }
  if (v61) {
    v87 = v62;
  }
  else {
    v87 = &byte_2140B33BB;
  }
  if (strcmp(v87, "None")) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 628, (uint64_t)"voc/tsr", 23, (uint64_t)"%u", v88, v89, *((_DWORD *)a2 + 25));
  }
  DgnString::~DgnString((DgnString *)&v90);
}

void sub_213F5DD04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void TextStateRule::parseVocMaxIdInfo(TextStateRule *this, DgnTextFileParser *a2)
{
  uint64_t v4 = (TextStateRule *)((char *)this + 40);
  int v5 = 1;
  do
  {
    DgnString::DgnString((DgnString *)&v47);
    DgnString::DgnString((DgnString *)v46);
    DgnString::DgnString((DgnString *)v44);
    DgnString::DgnString((DgnString *)v42);
    DgnString::DgnString((DgnString *)v40);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v46, LineFieldString);
    if (*((unsigned char *)this + 32))
    {
      uint64_t v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v47, v13);
      DgnString::operator=(v4, (DgnString *)&v47);
    }
    unsigned int LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v7, v8, v9, v10, v11, v12);
    int v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)v44, v15);
    BOOL v16 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v42, v16);
    uint64_t v17 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v40, v17);
    int v24 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v18, v19, v20, v21, v22, v23);
    if (*((_DWORD *)this + 12)) {
      uint64_t v25 = *(const char **)v4;
    }
    else {
      uint64_t v25 = &byte_2140B33BB;
    }
    if (v48) {
      uint64_t v26 = v47;
    }
    else {
      uint64_t v26 = &byte_2140B33BB;
    }
    if (strcmp(v25, v26)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 680, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v31, v32, *((_DWORD *)a2 + 25));
    }
    if (v45 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 682, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v31, v32, *((_DWORD *)a2 + 25));
    }
    if (v43 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 684, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v31, v32, *((_DWORD *)a2 + 25));
    }
    if (v41 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 686, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v31, v32, *((_DWORD *)a2 + 25));
    }
    if ((LineFieldInteger & 0x80000000) != 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 688, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v31, v32, *((_DWORD *)a2 + 25));
    }
    if (v24 < 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 690, (uint64_t)"voc/tsr", 18, (uint64_t)"%u", v31, v32, *((_DWORD *)a2 + 25));
    }
    StateMgr::preAllocToEnsureStateId(*(void *)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), LineFieldInteger, v27, v28, v29, v30, v31, v32);
    RuleMgr::preAllocToEnsureRuleId(*(RuleMgr **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 64), (unsigned __int16)v24);
    if (DgnTextFileParser::parseNextLine(a2))
    {
      int v33 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
      DgnString::DgnString((DgnString *)&v38, v33);
      if (v39) {
        uint64_t v34 = v38;
      }
      else {
        uint64_t v34 = &byte_2140B33BB;
      }
      BOOL v35 = strcmp(v34, "VocMaxIdInfo") != 0;
      DgnString::~DgnString((DgnString *)&v38);
    }
    else
    {
      BOOL v35 = 1;
    }
    DgnString::~DgnString((DgnString *)v40);
    DgnString::~DgnString((DgnString *)v42);
    DgnString::~DgnString((DgnString *)v44);
    DgnString::~DgnString((DgnString *)v46);
    DgnString::~DgnString((DgnString *)&v47);
    --v5;
  }
  while (!v35);
  if (v5) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 708, (uint64_t)"voc/tsr", 21, (uint64_t)"%u", v36, v37, *((_DWORD *)a2 + 25));
  }
}

void sub_213F5E0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va3, a7);
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v15 = va_arg(va3, void);
  uint64_t v17 = va_arg(va3, void);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va3);
  DgnString::~DgnString((DgnString *)(v7 - 96));
  _Unwind_Resume(a1);
}

void TextStateRule::parseStateDefinition(TextStateRule *this, DgnTextFileParser *a2)
{
  DgnString::DgnString((DgnString *)&v46);
  while (1)
  {
    DgnString::DgnString((DgnString *)&v44);
    DgnString::DgnString((DgnString *)v43);
    DgnString::DgnString((DgnString *)v41);
    DgnString::DgnString((DgnString *)v39);
    DgnString::DgnString((DgnString *)v37);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v43, LineFieldString);
    if (*((unsigned char *)this + 32))
    {
      uint64_t v11 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v44, v11);
    }
    uint64_t LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v5, v6, v7, v8, v9, v10);
    uint64_t v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)v41, v13);
    uint64_t v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v39, v14);
    uint64_t v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v37, v15);
    signed int v22 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v16, v17, v18, v19, v20, v21);
    if (*((_DWORD *)this + 12)) {
      uint64_t v23 = (const char *)*((void *)this + 5);
    }
    else {
      uint64_t v23 = &byte_2140B33BB;
    }
    if (v45) {
      int v24 = v44;
    }
    else {
      int v24 = &byte_2140B33BB;
    }
    if (strcmp(v23, v24)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 723, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v28, v29, *((_DWORD *)a2 + 25));
    }
    if (v42 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 725, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    }
    if (v40 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 727, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    }
    if (v38 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 729, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    }
    if ((int)LineFieldInteger <= 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 734, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    }
    if (v22 <= 0 && v22 != -1) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 739, (uint64_t)"voc/tsr", 18, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    }
    if (v22 == -1) {
      signed int v22 = 0;
    }
    if (v47 < (int)LineFieldInteger + 1) {
      BitArray::setSize((BitArray *)&v46, LineFieldInteger + 1);
    }
    uint64_t v30 = LineFieldInteger >> 5;
    int v31 = *(_DWORD *)(v46 + 4 * v30);
    if ((v31 & (1 << LineFieldInteger)) != 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 759, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v28, v29, *((_DWORD *)a2 + 25));
    }
    else {
      *(_DWORD *)(v46 + 4 * v30) = v31 | (1 << LineFieldInteger);
    }
    StateMgr::newState(*(StateMgr **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), v22, LineFieldInteger, v25, v26, v27, v28, v29);
    if (!DgnTextFileParser::parseNextLine(a2)) {
      break;
    }
    uint64_t v32 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::DgnString((DgnString *)&v35, v32);
    if (v36) {
      int v33 = v35;
    }
    else {
      int v33 = &byte_2140B33BB;
    }
    int v34 = strcmp(v33, "StateDefinition");
    DgnString::~DgnString((DgnString *)&v35);
    DgnString::~DgnString((DgnString *)v37);
    DgnString::~DgnString((DgnString *)v39);
    DgnString::~DgnString((DgnString *)v41);
    DgnString::~DgnString((DgnString *)v43);
    DgnString::~DgnString((DgnString *)&v44);
    if (v34) {
      goto LABEL_37;
    }
  }
  DgnString::~DgnString((DgnString *)v37);
  DgnString::~DgnString((DgnString *)v39);
  DgnString::~DgnString((DgnString *)v41);
  DgnString::~DgnString((DgnString *)v43);
  DgnString::~DgnString((DgnString *)&v44);
LABEL_37:
  StateMgr::doneEnsureStateId(*(void *)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this)
                                        + 56));
  BitArray::~BitArray((BitArray *)&v46);
}

void sub_213F5E528(_Unwind_Exception *a1)
{
  BitArray::~BitArray((BitArray *)(v1 - 96));
  _Unwind_Resume(a1);
}

void TextStateRule::parseStateName(TextStateRule *this, DgnTextFileParser *a2)
{
  DgnString::DgnString((DgnString *)&v47);
  while (1)
  {
    DgnString::DgnString((DgnString *)&v45);
    DgnString::DgnString((DgnString *)v44);
    DgnString::DgnString((DgnString *)&v42);
    DgnString::DgnString((DgnString *)v40);
    DgnString::DgnString((DgnString *)v38);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v44, LineFieldString);
    if (*((unsigned char *)this + 32))
    {
      uint64_t v11 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v45, v11);
    }
    signed int LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v5, v6, v7, v8, v9, v10);
    uint64_t v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)&v42, v13);
    uint64_t v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v40, v14);
    uint64_t v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v38, v15);
    int v22 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v16, v17, v18, v19, v20, v21);
    if (*((_DWORD *)this + 12)) {
      uint64_t v23 = (const char *)*((void *)this + 5);
    }
    else {
      uint64_t v23 = &byte_2140B33BB;
    }
    if (v46) {
      int v24 = v45;
    }
    else {
      int v24 = &byte_2140B33BB;
    }
    if (strcmp(v23, v24)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 794, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v28, v29, *((_DWORD *)a2 + 25));
    }
    if (v41 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 796, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    }
    if (v39 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 798, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    }
    if (v22) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 800, (uint64_t)"voc/tsr", 13, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    }
    if (LineFieldInteger <= 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 805, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    }
    if (v48 < LineFieldInteger + 1) {
      BitArray::setSize((BitArray *)&v47, LineFieldInteger + 1);
    }
    uint64_t v30 = LineFieldInteger >> 5;
    int v31 = *(_DWORD *)(v47 + 4 * v30);
    if ((v31 & (1 << LineFieldInteger)) != 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 818, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v28, v29, *((_DWORD *)a2 + 25));
    }
    else {
      *(_DWORD *)(v47 + 4 * v30) = v31 | (1 << LineFieldInteger);
    }
    uint64_t v32 = v43 ? v42 : &byte_2140B33BB;
    StateMgr::setName(*(StateMgr **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), LineFieldInteger, v32, v25, v26, v27, v28, v29);
    if (!DgnTextFileParser::parseNextLine(a2)) {
      break;
    }
    int v33 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::DgnString((DgnString *)&v36, v33);
    if (v37) {
      int v34 = v36;
    }
    else {
      int v34 = &byte_2140B33BB;
    }
    int v35 = strcmp(v34, "StateName");
    DgnString::~DgnString((DgnString *)&v36);
    DgnString::~DgnString((DgnString *)v38);
    DgnString::~DgnString((DgnString *)v40);
    DgnString::~DgnString((DgnString *)&v42);
    DgnString::~DgnString((DgnString *)v44);
    DgnString::~DgnString((DgnString *)&v45);
    if (v35) {
      goto LABEL_35;
    }
  }
  DgnString::~DgnString((DgnString *)v38);
  DgnString::~DgnString((DgnString *)v40);
  DgnString::~DgnString((DgnString *)&v42);
  DgnString::~DgnString((DgnString *)v44);
  DgnString::~DgnString((DgnString *)&v45);
LABEL_35:
  BitArray::~BitArray((BitArray *)&v47);
}

void sub_213F5E948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va3, a9);
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v17 = va_arg(va3, void);
  uint64_t v19 = va_arg(va3, void);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va3);
  BitArray::~BitArray((BitArray *)(v9 - 96));
  _Unwind_Resume(a1);
}

void TextStateRule::parseStateAllowLM(TextStateRule *this, DgnTextFileParser *a2)
{
  DgnString::DgnString((DgnString *)&v45);
  while (1)
  {
    DgnString::DgnString((DgnString *)&v43);
    DgnString::DgnString((DgnString *)v42);
    DgnString::DgnString((DgnString *)v40);
    DgnString::DgnString((DgnString *)v38);
    DgnString::DgnString((DgnString *)v36);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v42, LineFieldString);
    if (*((unsigned char *)this + 32))
    {
      uint64_t v11 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v43, v11);
    }
    uint64_t LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v5, v6, v7, v8, v9, v10);
    uint64_t v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)v40, v13);
    uint64_t v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v38, v14);
    uint64_t v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v36, v15);
    unsigned int v22 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v16, v17, v18, v19, v20, v21);
    if (*((_DWORD *)this + 12)) {
      uint64_t v23 = (const char *)*((void *)this + 5);
    }
    else {
      uint64_t v23 = &byte_2140B33BB;
    }
    if (v44) {
      int v24 = v43;
    }
    else {
      int v24 = &byte_2140B33BB;
    }
    if (strcmp(v23, v24)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 848, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v41 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 850, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v39 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 852, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v37 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 854, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v22 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 857, (uint64_t)"voc/tsr", 14, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if ((int)LineFieldInteger <= 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 862, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v46 < (int)LineFieldInteger + 1) {
      BitArray::setSize((BitArray *)&v45, LineFieldInteger + 1);
    }
    uint64_t v29 = LineFieldInteger >> 5;
    int v30 = *(_DWORD *)(v45 + 4 * v29);
    if ((v30 & (1 << LineFieldInteger)) != 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 875, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v27, v28, *((_DWORD *)a2 + 25));
    }
    else {
      *(_DWORD *)(v45 + 4 * v29) = v30 | (1 << LineFieldInteger);
    }
    StateMgr::setLMAllowed(*(StateMgr **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), LineFieldInteger, v22 == 1, 1, v25, v26, v27, v28);
    if (!DgnTextFileParser::parseNextLine(a2)) {
      break;
    }
    int v31 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::DgnString((DgnString *)&v34, v31);
    if (v35) {
      uint64_t v32 = v34;
    }
    else {
      uint64_t v32 = &byte_2140B33BB;
    }
    int v33 = strcmp(v32, "StateAllowLM");
    DgnString::~DgnString((DgnString *)&v34);
    DgnString::~DgnString((DgnString *)v36);
    DgnString::~DgnString((DgnString *)v38);
    DgnString::~DgnString((DgnString *)v40);
    DgnString::~DgnString((DgnString *)v42);
    DgnString::~DgnString((DgnString *)&v43);
    if (v33) {
      goto LABEL_34;
    }
  }
  DgnString::~DgnString((DgnString *)v36);
  DgnString::~DgnString((DgnString *)v38);
  DgnString::~DgnString((DgnString *)v40);
  DgnString::~DgnString((DgnString *)v42);
  DgnString::~DgnString((DgnString *)&v43);
LABEL_34:
  BitArray::~BitArray((BitArray *)&v45);
}

void sub_213F5ED94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va3, a9);
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v17 = va_arg(va3, void);
  uint64_t v19 = va_arg(va3, void);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va3);
  BitArray::~BitArray((BitArray *)(v9 - 96));
  _Unwind_Resume(a1);
}

void TextStateRule::parseStateWeightsName(TextStateRule *this, DgnTextFileParser *a2)
{
  DgnString::DgnString((DgnString *)&v49);
  while (1)
  {
    DgnString::DgnString((DgnString *)&v47);
    DgnString::DgnString((DgnString *)v46);
    DgnString::DgnString((DgnString *)v44);
    DgnString::DgnString((DgnString *)v42);
    DgnString::DgnString((DgnString *)v40);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v46, LineFieldString);
    if (*((unsigned char *)this + 32))
    {
      uint64_t v11 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v47, v11);
    }
    uint64_t LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v5, v6, v7, v8, v9, v10);
    uint64_t v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)v44, v13);
    uint64_t v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v42, v14);
    uint64_t v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v40, v15);
    int v22 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v16, v17, v18, v19, v20, v21);
    if (*((_DWORD *)this + 12)) {
      uint64_t v23 = (const char *)*((void *)this + 5);
    }
    else {
      uint64_t v23 = &byte_2140B33BB;
    }
    if (v48) {
      int v24 = v47;
    }
    else {
      int v24 = &byte_2140B33BB;
    }
    if (strcmp(v23, v24)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 905, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v25, v26, *((_DWORD *)a2 + 25));
    }
    if (v43 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 907, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v25, v26, *((_DWORD *)a2 + 25));
    }
    if (v41 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 909, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v25, v26, *((_DWORD *)a2 + 25));
    }
    if (v22) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 911, (uint64_t)"voc/tsr", 13, (uint64_t)"%u", v25, v26, *((_DWORD *)a2 + 25));
    }
    if ((int)LineFieldInteger <= 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 916, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v25, v26, *((_DWORD *)a2 + 25));
    }
    if (v50 < (int)LineFieldInteger + 1) {
      BitArray::setSize((BitArray *)&v49, LineFieldInteger + 1);
    }
    uint64_t v27 = LineFieldInteger >> 5;
    int v28 = *(_DWORD *)(v49 + 4 * v27);
    if ((v28 & (1 << LineFieldInteger)) != 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 929, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v25, v26, *((_DWORD *)a2 + 25));
    }
    else {
      *(_DWORD *)(v49 + 4 * v27) = v28 | (1 << LineFieldInteger);
    }
    if (v45 >= 2)
    {
      uint64_t v29 = *(void *)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 72);
      int v34 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v29 + 664))(v29, v44);
      if (v34 == 0xFFFF) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 944, (uint64_t)"voc/tsr", 27, (uint64_t)"%u %.500s %u %u", v32, v33, *((_DWORD *)a2 + 25));
      }
      StateMgr::setWeights(*(StateMgr **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), LineFieldInteger, v34, 1, v30, v31, v32, v33);
    }
    if (!DgnTextFileParser::parseNextLine(a2)) {
      break;
    }
    int v35 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::DgnString((DgnString *)&v38, v35);
    if (v39) {
      int v36 = v38;
    }
    else {
      int v36 = &byte_2140B33BB;
    }
    int v37 = strcmp(v36, "StateWeightsName");
    DgnString::~DgnString((DgnString *)&v38);
    DgnString::~DgnString((DgnString *)v40);
    DgnString::~DgnString((DgnString *)v42);
    DgnString::~DgnString((DgnString *)v44);
    DgnString::~DgnString((DgnString *)v46);
    DgnString::~DgnString((DgnString *)&v47);
    if (v37) {
      goto LABEL_36;
    }
  }
  DgnString::~DgnString((DgnString *)v40);
  DgnString::~DgnString((DgnString *)v42);
  DgnString::~DgnString((DgnString *)v44);
  DgnString::~DgnString((DgnString *)v46);
  DgnString::~DgnString((DgnString *)&v47);
LABEL_36:
  BitArray::~BitArray((BitArray *)&v49);
}

void sub_213F5F23C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va3, a9);
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v17 = va_arg(va3, void);
  uint64_t v19 = va_arg(va3, void);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va3);
  BitArray::~BitArray((BitArray *)(v9 - 96));
  _Unwind_Resume(a1);
}

void TextStateRule::parseStateWordPenalty(TextStateRule *this, DgnTextFileParser *a2, const char *a3)
{
  DgnString::DgnString((DgnString *)&v47);
  while (1)
  {
    DgnString::DgnString((DgnString *)&v45);
    DgnString::DgnString((DgnString *)v44);
    DgnString::DgnString((DgnString *)v42);
    DgnString::DgnString((DgnString *)v40);
    DgnString::DgnString((DgnString *)v38);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v44, LineFieldString);
    if (*((unsigned char *)this + 32))
    {
      uint64_t v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v45, v13);
      if (!strcmp(a3, "VocMaxIdInfo")) {
        DgnString::operator=((TextStateRule *)((char *)this + 40), (DgnString *)&v45);
      }
    }
    uint64_t LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v7, v8, v9, v10, v11, v12);
    uint64_t v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)v42, v15);
    uint64_t v16 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v40, v16);
    uint64_t v17 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v38, v17);
    int v24 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v18, v19, v20, v21, v22, v23);
    if (*((_DWORD *)this + 12)) {
      uint64_t v25 = (const char *)*((void *)this + 5);
    }
    else {
      uint64_t v25 = &byte_2140B33BB;
    }
    if (v46) {
      uint64_t v26 = v45;
    }
    else {
      uint64_t v26 = &byte_2140B33BB;
    }
    if (strcmp(v25, v26)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 970, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v29, v30, *((_DWORD *)a2 + 25));
    }
    if (v43 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 972, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v29, v30, *((_DWORD *)a2 + 25));
    }
    if (v41 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 974, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v29, v30, *((_DWORD *)a2 + 25));
    }
    if (v39 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 976, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v29, v30, *((_DWORD *)a2 + 25));
    }
    if ((int)LineFieldInteger <= 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 980, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v29, v30, *((_DWORD *)a2 + 25));
    }
    if (v48 < (int)LineFieldInteger + 1) {
      BitArray::setSize((BitArray *)&v47, LineFieldInteger + 1);
    }
    uint64_t v31 = LineFieldInteger >> 5;
    int v32 = *(_DWORD *)(v47 + 4 * v31);
    if ((v32 & (1 << LineFieldInteger)) != 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 993, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v29, v30, *((_DWORD *)a2 + 25));
    }
    else {
      *(_DWORD *)(v47 + 4 * v31) = v32 | (1 << LineFieldInteger);
    }
    if ((v24 - 1001) <= 0xFFFFF82E) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1003, (uint64_t)"voc/tsr", 26, (uint64_t)"%u %500s %d", v29, v30, *((_DWORD *)a2 + 25));
    }
    StateMgr::setWordPenalty(*(StateMgr **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), LineFieldInteger, v24, 1, v27, v28, v29, v30);
    if (!DgnTextFileParser::parseNextLine(a2)) {
      break;
    }
    uint64_t v33 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::DgnString((DgnString *)&v36, v33);
    if (v37) {
      int v34 = v36;
    }
    else {
      int v34 = &byte_2140B33BB;
    }
    int v35 = strcmp(v34, a3);
    DgnString::~DgnString((DgnString *)&v36);
    DgnString::~DgnString((DgnString *)v38);
    DgnString::~DgnString((DgnString *)v40);
    DgnString::~DgnString((DgnString *)v42);
    DgnString::~DgnString((DgnString *)v44);
    DgnString::~DgnString((DgnString *)&v45);
    if (v35) {
      goto LABEL_35;
    }
  }
  DgnString::~DgnString((DgnString *)v38);
  DgnString::~DgnString((DgnString *)v40);
  DgnString::~DgnString((DgnString *)v42);
  DgnString::~DgnString((DgnString *)v44);
  DgnString::~DgnString((DgnString *)&v45);
LABEL_35:
  BitArray::~BitArray((BitArray *)&v47);
}

void sub_213F5F6B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va3, a9);
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v17 = va_arg(va3, void);
  uint64_t v19 = va_arg(va3, void);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va3);
  BitArray::~BitArray((BitArray *)(v9 - 96));
  _Unwind_Resume(a1);
}

void TextStateRule::parseStateMinStartTime(TextStateRule *this, DgnTextFileParser *a2)
{
  DgnString::DgnString((DgnString *)&v47);
  do
  {
    DgnString::DgnString((DgnString *)&v45);
    DgnString::DgnString((DgnString *)v44);
    DgnString::DgnString((DgnString *)v42);
    DgnString::DgnString((DgnString *)v40);
    DgnString::DgnString((DgnString *)v38);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v44, LineFieldString);
    if (*((unsigned char *)this + 32))
    {
      uint64_t v11 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v45, v11);
    }
    signed int LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v5, v6, v7, v8, v9, v10);
    uint64_t v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)v42, v13);
    uint64_t v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v40, v14);
    uint64_t v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v38, v15);
    unsigned int v22 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v16, v17, v18, v19, v20, v21);
    if (*((_DWORD *)this + 12)) {
      uint64_t v23 = (const char *)*((void *)this + 5);
    }
    else {
      uint64_t v23 = &byte_2140B33BB;
    }
    if (v46) {
      int v24 = v45;
    }
    else {
      int v24 = &byte_2140B33BB;
    }
    if (strcmp(v23, v24)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1027, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v25, v26, *((_DWORD *)a2 + 25));
    }
    if (v43 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1029, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v25, v26, *((_DWORD *)a2 + 25));
    }
    if (v41 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1031, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v25, v26, *((_DWORD *)a2 + 25));
    }
    if (v39 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1033, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v25, v26, *((_DWORD *)a2 + 25));
    }
    if (LineFieldInteger <= 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1037, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v25, v26, *((_DWORD *)a2 + 25));
    }
    if (v48 < LineFieldInteger + 1) {
      BitArray::setSize((BitArray *)&v47, LineFieldInteger + 1);
    }
    uint64_t v27 = LineFieldInteger >> 5;
    int v28 = *(_DWORD *)(v47 + 4 * v27);
    if ((v28 & (1 << LineFieldInteger)) != 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1050, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v25, v26, *((_DWORD *)a2 + 25));
    }
    else {
      *(_DWORD *)(v47 + 4 * v27) = v28 | (1 << LineFieldInteger);
    }
    if (v22 - 268435201 <= 0xF00000FD) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1060, (uint64_t)"voc/tsr", 28, (uint64_t)"%u %500s %d %u", v25, v26, *((_DWORD *)a2 + 25));
    }
    *(void *)int v36 = 0;
    *(void *)int v37 = 0;
    StateMgr::getTimeConstraint(*(StateMgr **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), LineFieldInteger, &v37[1], v37, &v36[1], v36, v25, v26);
    v37[1] = v22;
    StateMgr::setTimeConstraint(*(StateMgr **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), LineFieldInteger, v22, v37[0], v36[1], v36[0], v29, v30);
    if (DgnTextFileParser::parseNextLine(a2))
    {
      uint64_t v31 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
      DgnString::DgnString((DgnString *)&v34, v31);
      if (v35) {
        int v32 = v34;
      }
      else {
        int v32 = &byte_2140B33BB;
      }
      BOOL v33 = strcmp(v32, "StateMinStartTime") != 0;
      DgnString::~DgnString((DgnString *)&v34);
    }
    else
    {
      BOOL v33 = 1;
    }
    DgnString::~DgnString((DgnString *)v38);
    DgnString::~DgnString((DgnString *)v40);
    DgnString::~DgnString((DgnString *)v42);
    DgnString::~DgnString((DgnString *)v44);
    DgnString::~DgnString((DgnString *)&v45);
  }
  while (!v33);
  BitArray::~BitArray((BitArray *)&v47);
}

void sub_213F5FB2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va3, a10);
  va_start(va2, a10);
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v18 = va_arg(va3, void);
  uint64_t v20 = va_arg(va3, void);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va3);
  DgnString::~DgnString((DgnString *)(v10 - 120));
  BitArray::~BitArray((BitArray *)(v10 - 104));
  _Unwind_Resume(a1);
}

void TextStateRule::parseStateMaxStartTime(TextStateRule *this, DgnTextFileParser *a2)
{
  DgnString::DgnString((DgnString *)&v47);
  do
  {
    DgnString::DgnString((DgnString *)&v45);
    DgnString::DgnString((DgnString *)v44);
    DgnString::DgnString((DgnString *)v42);
    DgnString::DgnString((DgnString *)v40);
    DgnString::DgnString((DgnString *)v38);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v44, LineFieldString);
    if (*((unsigned char *)this + 32))
    {
      uint64_t v11 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v45, v11);
    }
    signed int LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v5, v6, v7, v8, v9, v10);
    uint64_t v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)v42, v13);
    uint64_t v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v40, v14);
    uint64_t v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v38, v15);
    unsigned int v22 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v16, v17, v18, v19, v20, v21);
    if (*((_DWORD *)this + 12)) {
      uint64_t v23 = (const char *)*((void *)this + 5);
    }
    else {
      uint64_t v23 = &byte_2140B33BB;
    }
    if (v46) {
      int v24 = v45;
    }
    else {
      int v24 = &byte_2140B33BB;
    }
    if (strcmp(v23, v24)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1091, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v25, v26, *((_DWORD *)a2 + 25));
    }
    if (v43 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1093, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v25, v26, *((_DWORD *)a2 + 25));
    }
    if (v41 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1095, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v25, v26, *((_DWORD *)a2 + 25));
    }
    if (v39 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1097, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v25, v26, *((_DWORD *)a2 + 25));
    }
    if (LineFieldInteger <= 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1101, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v25, v26, *((_DWORD *)a2 + 25));
    }
    if (v48 < LineFieldInteger + 1) {
      BitArray::setSize((BitArray *)&v47, LineFieldInteger + 1);
    }
    uint64_t v27 = LineFieldInteger >> 5;
    int v28 = *(_DWORD *)(v47 + 4 * v27);
    if ((v28 & (1 << LineFieldInteger)) != 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1114, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v25, v26, *((_DWORD *)a2 + 25));
    }
    else {
      *(_DWORD *)(v47 + 4 * v27) = v28 | (1 << LineFieldInteger);
    }
    if (v22 - 268435201 <= 0xF00000FD) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1124, (uint64_t)"voc/tsr", 28, (uint64_t)"%u %500s %d %u", v25, v26, *((_DWORD *)a2 + 25));
    }
    *(void *)int v36 = 0;
    *(void *)int v37 = 0;
    StateMgr::getTimeConstraint(*(StateMgr **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), LineFieldInteger, &v37[1], v37, &v36[1], v36, v25, v26);
    v37[0] = v22;
    StateMgr::setTimeConstraint(*(StateMgr **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), LineFieldInteger, v37[1], v22, v36[1], v36[0], v29, v30);
    if (DgnTextFileParser::parseNextLine(a2))
    {
      uint64_t v31 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
      DgnString::DgnString((DgnString *)&v34, v31);
      if (v35) {
        int v32 = v34;
      }
      else {
        int v32 = &byte_2140B33BB;
      }
      BOOL v33 = strcmp(v32, "StateMaxStartTime") != 0;
      DgnString::~DgnString((DgnString *)&v34);
    }
    else
    {
      BOOL v33 = 1;
    }
    DgnString::~DgnString((DgnString *)v38);
    DgnString::~DgnString((DgnString *)v40);
    DgnString::~DgnString((DgnString *)v42);
    DgnString::~DgnString((DgnString *)v44);
    DgnString::~DgnString((DgnString *)&v45);
  }
  while (!v33);
  BitArray::~BitArray((BitArray *)&v47);
}

void sub_213F5FFAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va3, a10);
  va_start(va2, a10);
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v18 = va_arg(va3, void);
  uint64_t v20 = va_arg(va3, void);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va3);
  DgnString::~DgnString((DgnString *)(v10 - 120));
  BitArray::~BitArray((BitArray *)(v10 - 104));
  _Unwind_Resume(a1);
}

void TextStateRule::parseStateMinEndTime(TextStateRule *this, DgnTextFileParser *a2)
{
  DgnString::DgnString((DgnString *)&v47);
  do
  {
    DgnString::DgnString((DgnString *)&v45);
    DgnString::DgnString((DgnString *)v44);
    DgnString::DgnString((DgnString *)v42);
    DgnString::DgnString((DgnString *)v40);
    DgnString::DgnString((DgnString *)v38);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v44, LineFieldString);
    if (*((unsigned char *)this + 32))
    {
      uint64_t v11 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v45, v11);
    }
    signed int LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v5, v6, v7, v8, v9, v10);
    uint64_t v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)v42, v13);
    uint64_t v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v40, v14);
    uint64_t v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v38, v15);
    uint64_t v22 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v16, v17, v18, v19, v20, v21);
    if (*((_DWORD *)this + 12)) {
      uint64_t v23 = (const char *)*((void *)this + 5);
    }
    else {
      uint64_t v23 = &byte_2140B33BB;
    }
    if (v46) {
      int v24 = v45;
    }
    else {
      int v24 = &byte_2140B33BB;
    }
    if (strcmp(v23, v24)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1155, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v25, v26, *((_DWORD *)a2 + 25));
    }
    if (v43 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1157, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v25, v26, *((_DWORD *)a2 + 25));
    }
    if (v41 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1159, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v25, v26, *((_DWORD *)a2 + 25));
    }
    if (v39 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1161, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v25, v26, *((_DWORD *)a2 + 25));
    }
    if (LineFieldInteger <= 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1165, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v25, v26, *((_DWORD *)a2 + 25));
    }
    if (v48 < LineFieldInteger + 1) {
      BitArray::setSize((BitArray *)&v47, LineFieldInteger + 1);
    }
    uint64_t v27 = LineFieldInteger >> 5;
    int v28 = *(_DWORD *)(v47 + 4 * v27);
    if ((v28 & (1 << LineFieldInteger)) != 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1178, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v25, v26, *((_DWORD *)a2 + 25));
    }
    else {
      *(_DWORD *)(v47 + 4 * v27) = v28 | (1 << LineFieldInteger);
    }
    if ((v22 - 268435201) <= 0xF00000FD) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1188, (uint64_t)"voc/tsr", 28, (uint64_t)"%u %500s %d %u", v25, v26, *((_DWORD *)a2 + 25));
    }
    *(void *)int v36 = 0;
    *(void *)int v37 = 0;
    StateMgr::getTimeConstraint(*(StateMgr **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), LineFieldInteger, &v37[1], v37, &v36[1], v36, v25, v26);
    v36[1] = v22;
    StateMgr::setTimeConstraint(*(StateMgr **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), LineFieldInteger, v37[1], v37[0], v22, v36[0], v29, v30);
    if (DgnTextFileParser::parseNextLine(a2))
    {
      uint64_t v31 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
      DgnString::DgnString((DgnString *)&v34, v31);
      if (v35) {
        int v32 = v34;
      }
      else {
        int v32 = &byte_2140B33BB;
      }
      BOOL v33 = strcmp(v32, "StateMinEndTime") != 0;
      DgnString::~DgnString((DgnString *)&v34);
    }
    else
    {
      BOOL v33 = 1;
    }
    DgnString::~DgnString((DgnString *)v38);
    DgnString::~DgnString((DgnString *)v40);
    DgnString::~DgnString((DgnString *)v42);
    DgnString::~DgnString((DgnString *)v44);
    DgnString::~DgnString((DgnString *)&v45);
  }
  while (!v33);
  BitArray::~BitArray((BitArray *)&v47);
}

void sub_213F6042C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va3, a10);
  va_start(va2, a10);
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v18 = va_arg(va3, void);
  uint64_t v20 = va_arg(va3, void);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va3);
  DgnString::~DgnString((DgnString *)(v10 - 120));
  BitArray::~BitArray((BitArray *)(v10 - 104));
  _Unwind_Resume(a1);
}

void TextStateRule::parseStateMaxEndTime(TextStateRule *this, DgnTextFileParser *a2)
{
  DgnString::DgnString((DgnString *)&v47);
  do
  {
    DgnString::DgnString((DgnString *)&v45);
    DgnString::DgnString((DgnString *)v44);
    DgnString::DgnString((DgnString *)v42);
    DgnString::DgnString((DgnString *)v40);
    DgnString::DgnString((DgnString *)v38);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v44, LineFieldString);
    if (*((unsigned char *)this + 32))
    {
      uint64_t v11 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v45, v11);
    }
    signed int LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v5, v6, v7, v8, v9, v10);
    uint64_t v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)v42, v13);
    uint64_t v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v40, v14);
    uint64_t v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v38, v15);
    uint64_t v22 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v16, v17, v18, v19, v20, v21);
    if (*((_DWORD *)this + 12)) {
      uint64_t v23 = (const char *)*((void *)this + 5);
    }
    else {
      uint64_t v23 = &byte_2140B33BB;
    }
    if (v46) {
      int v24 = v45;
    }
    else {
      int v24 = &byte_2140B33BB;
    }
    if (strcmp(v23, v24)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1219, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v25, v26, *((_DWORD *)a2 + 25));
    }
    if (v43 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1221, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v25, v26, *((_DWORD *)a2 + 25));
    }
    if (v41 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1223, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v25, v26, *((_DWORD *)a2 + 25));
    }
    if (v39 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1225, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v25, v26, *((_DWORD *)a2 + 25));
    }
    if (LineFieldInteger <= 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1229, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v25, v26, *((_DWORD *)a2 + 25));
    }
    if (v48 < LineFieldInteger + 1) {
      BitArray::setSize((BitArray *)&v47, LineFieldInteger + 1);
    }
    uint64_t v27 = LineFieldInteger >> 5;
    int v28 = *(_DWORD *)(v47 + 4 * v27);
    if ((v28 & (1 << LineFieldInteger)) != 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1242, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v25, v26, *((_DWORD *)a2 + 25));
    }
    else {
      *(_DWORD *)(v47 + 4 * v27) = v28 | (1 << LineFieldInteger);
    }
    if ((v22 - 268435201) <= 0xF00000FD) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1252, (uint64_t)"voc/tsr", 28, (uint64_t)"%u %500s %d %u", v25, v26, *((_DWORD *)a2 + 25));
    }
    *(void *)int v36 = 0;
    *(void *)int v37 = 0;
    StateMgr::getTimeConstraint(*(StateMgr **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), LineFieldInteger, &v37[1], v37, &v36[1], v36, v25, v26);
    v36[0] = v22;
    StateMgr::setTimeConstraint(*(StateMgr **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), LineFieldInteger, v37[1], v37[0], v36[1], v22, v29, v30);
    if (DgnTextFileParser::parseNextLine(a2))
    {
      uint64_t v31 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
      DgnString::DgnString((DgnString *)&v34, v31);
      if (v35) {
        int v32 = v34;
      }
      else {
        int v32 = &byte_2140B33BB;
      }
      BOOL v33 = strcmp(v32, "StateMaxEndTime") != 0;
      DgnString::~DgnString((DgnString *)&v34);
    }
    else
    {
      BOOL v33 = 1;
    }
    DgnString::~DgnString((DgnString *)v38);
    DgnString::~DgnString((DgnString *)v40);
    DgnString::~DgnString((DgnString *)v42);
    DgnString::~DgnString((DgnString *)v44);
    DgnString::~DgnString((DgnString *)&v45);
  }
  while (!v33);
  BitArray::~BitArray((BitArray *)&v47);
}

void sub_213F608AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va3, a10);
  va_start(va2, a10);
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v18 = va_arg(va3, void);
  uint64_t v20 = va_arg(va3, void);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va3);
  DgnString::~DgnString((DgnString *)(v10 - 120));
  BitArray::~BitArray((BitArray *)(v10 - 104));
  _Unwind_Resume(a1);
}

void TextStateRule::parseStateCollapsible(TextStateRule *this, DgnTextFileParser *a2)
{
  DgnString::DgnString((DgnString *)&v46);
  while (1)
  {
    DgnString::DgnString((DgnString *)&v44);
    DgnString::DgnString((DgnString *)v43);
    DgnString::DgnString((DgnString *)v41);
    DgnString::DgnString((DgnString *)v39);
    DgnString::DgnString((DgnString *)v37);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v43, LineFieldString);
    if (*((unsigned char *)this + 32))
    {
      uint64_t v11 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v44, v11);
    }
    uint64_t LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v5, v6, v7, v8, v9, v10);
    uint64_t v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)v41, v13);
    uint64_t v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v39, v14);
    uint64_t v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v37, v15);
    unsigned int v22 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v16, v17, v18, v19, v20, v21);
    if (*((_DWORD *)this + 12)) {
      uint64_t v23 = (const char *)*((void *)this + 5);
    }
    else {
      uint64_t v23 = &byte_2140B33BB;
    }
    if (v45) {
      int v24 = v44;
    }
    else {
      int v24 = &byte_2140B33BB;
    }
    if (strcmp(v23, v24)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1283, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v28, v29, *((_DWORD *)a2 + 25));
    }
    if (v42 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1285, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    }
    if (v40 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1287, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    }
    if (v38 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1289, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    }
    if (v22 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1292, (uint64_t)"voc/tsr", 14, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    }
    if ((int)LineFieldInteger <= 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1297, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    }
    if (v47 < (int)LineFieldInteger + 1) {
      BitArray::setSize((BitArray *)&v46, LineFieldInteger + 1);
    }
    uint64_t v30 = LineFieldInteger >> 5;
    int v31 = *(_DWORD *)(v46 + 4 * v30);
    if ((v31 & (1 << LineFieldInteger)) != 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1310, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v28, v29, *((_DWORD *)a2 + 25));
    }
    else {
      *(_DWORD *)(v46 + 4 * v30) = v31 | (1 << LineFieldInteger);
    }
    StateMgr::setCollapsible(*(StateMgr **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), LineFieldInteger, v22 == 1, v25, v26, v27, v28, v29);
    if (!DgnTextFileParser::parseNextLine(a2)) {
      break;
    }
    int v32 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::DgnString((DgnString *)&v35, v32);
    if (v36) {
      BOOL v33 = v35;
    }
    else {
      BOOL v33 = &byte_2140B33BB;
    }
    int v34 = strcmp(v33, "StateCollapsible");
    DgnString::~DgnString((DgnString *)&v35);
    DgnString::~DgnString((DgnString *)v37);
    DgnString::~DgnString((DgnString *)v39);
    DgnString::~DgnString((DgnString *)v41);
    DgnString::~DgnString((DgnString *)v43);
    DgnString::~DgnString((DgnString *)&v44);
    if (v34) {
      goto LABEL_34;
    }
  }
  DgnString::~DgnString((DgnString *)v37);
  DgnString::~DgnString((DgnString *)v39);
  DgnString::~DgnString((DgnString *)v41);
  DgnString::~DgnString((DgnString *)v43);
  DgnString::~DgnString((DgnString *)&v44);
LABEL_34:
  BitArray::~BitArray((BitArray *)&v46);
}

void sub_213F60CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va3, a9);
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v17 = va_arg(va3, void);
  uint64_t v19 = va_arg(va3, void);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va3);
  BitArray::~BitArray((BitArray *)(v9 - 96));
  _Unwind_Resume(a1);
}

void TextStateRule::parseStateAllowCoart(TextStateRule *this, DgnTextFileParser *a2)
{
  DgnString::DgnString((DgnString *)&v45);
  while (1)
  {
    DgnString::DgnString((DgnString *)&v43);
    DgnString::DgnString((DgnString *)v42);
    DgnString::DgnString((DgnString *)v40);
    DgnString::DgnString((DgnString *)v38);
    DgnString::DgnString((DgnString *)v36);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v42, LineFieldString);
    if (*((unsigned char *)this + 32))
    {
      uint64_t v11 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v43, v11);
    }
    uint64_t LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v5, v6, v7, v8, v9, v10);
    uint64_t v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)v40, v13);
    uint64_t v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v38, v14);
    uint64_t v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v36, v15);
    unsigned int v22 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v16, v17, v18, v19, v20, v21);
    if (*((_DWORD *)this + 12)) {
      uint64_t v23 = (const char *)*((void *)this + 5);
    }
    else {
      uint64_t v23 = &byte_2140B33BB;
    }
    if (v44) {
      int v24 = v43;
    }
    else {
      int v24 = &byte_2140B33BB;
    }
    if (strcmp(v23, v24)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1340, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v41 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1342, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v39 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1344, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v37 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1346, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v22 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1349, (uint64_t)"voc/tsr", 14, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if ((int)LineFieldInteger <= 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1354, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v46 < (int)LineFieldInteger + 1) {
      BitArray::setSize((BitArray *)&v45, LineFieldInteger + 1);
    }
    uint64_t v29 = LineFieldInteger >> 5;
    int v30 = *(_DWORD *)(v45 + 4 * v29);
    if ((v30 & (1 << LineFieldInteger)) != 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1367, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v27, v28, *((_DWORD *)a2 + 25));
    }
    else {
      *(_DWORD *)(v45 + 4 * v29) = v30 | (1 << LineFieldInteger);
    }
    StateMgr::setCoartAllowed(*(StateMgr **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), LineFieldInteger, v22 == 1, 1, v25, v26, v27, v28);
    if (!DgnTextFileParser::parseNextLine(a2)) {
      break;
    }
    int v31 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::DgnString((DgnString *)&v34, v31);
    if (v35) {
      int v32 = v34;
    }
    else {
      int v32 = &byte_2140B33BB;
    }
    int v33 = strcmp(v32, "StateAllowCoart");
    DgnString::~DgnString((DgnString *)&v34);
    DgnString::~DgnString((DgnString *)v36);
    DgnString::~DgnString((DgnString *)v38);
    DgnString::~DgnString((DgnString *)v40);
    DgnString::~DgnString((DgnString *)v42);
    DgnString::~DgnString((DgnString *)&v43);
    if (v33) {
      goto LABEL_34;
    }
  }
  DgnString::~DgnString((DgnString *)v36);
  DgnString::~DgnString((DgnString *)v38);
  DgnString::~DgnString((DgnString *)v40);
  DgnString::~DgnString((DgnString *)v42);
  DgnString::~DgnString((DgnString *)&v43);
LABEL_34:
  BitArray::~BitArray((BitArray *)&v45);
}

void sub_213F61144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va3, a9);
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v17 = va_arg(va3, void);
  uint64_t v19 = va_arg(va3, void);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va3);
  BitArray::~BitArray((BitArray *)(v9 - 96));
  _Unwind_Resume(a1);
}

void TextStateRule::parseStateAllowSkip(TextStateRule *this, DgnTextFileParser *a2)
{
  DgnString::DgnString((DgnString *)&v45);
  while (1)
  {
    DgnString::DgnString((DgnString *)&v43);
    DgnString::DgnString((DgnString *)v42);
    DgnString::DgnString((DgnString *)v40);
    DgnString::DgnString((DgnString *)v38);
    DgnString::DgnString((DgnString *)v36);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v42, LineFieldString);
    if (*((unsigned char *)this + 32))
    {
      uint64_t v11 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v43, v11);
    }
    signed int LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v5, v6, v7, v8, v9, v10);
    uint64_t v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)v40, v13);
    uint64_t v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v38, v14);
    uint64_t v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v36, v15);
    unsigned int v22 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v16, v17, v18, v19, v20, v21);
    if (*((_DWORD *)this + 12)) {
      uint64_t v23 = (const char *)*((void *)this + 5);
    }
    else {
      uint64_t v23 = &byte_2140B33BB;
    }
    if (v44) {
      int v24 = v43;
    }
    else {
      int v24 = &byte_2140B33BB;
    }
    if (strcmp(v23, v24)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1398, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v41 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1400, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v39 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1402, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v37 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1404, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v22 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1407, (uint64_t)"voc/tsr", 14, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (LineFieldInteger <= 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1412, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v46 < LineFieldInteger + 1) {
      BitArray::setSize((BitArray *)&v45, LineFieldInteger + 1);
    }
    uint64_t v29 = LineFieldInteger >> 5;
    int v30 = *(_DWORD *)(v45 + 4 * v29);
    if ((v30 & (1 << LineFieldInteger)) != 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1425, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v27, v28, *((_DWORD *)a2 + 25));
    }
    else {
      *(_DWORD *)(v45 + 4 * v29) = v30 | (1 << LineFieldInteger);
    }
    StateMgr::setSkipAllowed(*(StateMgr **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), LineFieldInteger, v22 == 1, 1, v25, v26, v27, v28);
    if (!DgnTextFileParser::parseNextLine(a2)) {
      break;
    }
    int v31 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::DgnString((DgnString *)&v34, v31);
    if (v35) {
      int v32 = v34;
    }
    else {
      int v32 = &byte_2140B33BB;
    }
    int v33 = strcmp(v32, "StateAllowSkip");
    DgnString::~DgnString((DgnString *)&v34);
    DgnString::~DgnString((DgnString *)v36);
    DgnString::~DgnString((DgnString *)v38);
    DgnString::~DgnString((DgnString *)v40);
    DgnString::~DgnString((DgnString *)v42);
    DgnString::~DgnString((DgnString *)&v43);
    if (v33) {
      goto LABEL_34;
    }
  }
  DgnString::~DgnString((DgnString *)v36);
  DgnString::~DgnString((DgnString *)v38);
  DgnString::~DgnString((DgnString *)v40);
  DgnString::~DgnString((DgnString *)v42);
  DgnString::~DgnString((DgnString *)&v43);
LABEL_34:
  BitArray::~BitArray((BitArray *)&v45);
}

void sub_213F61590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va3, a9);
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v17 = va_arg(va3, void);
  uint64_t v19 = va_arg(va3, void);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va3);
  BitArray::~BitArray((BitArray *)(v9 - 96));
  _Unwind_Resume(a1);
}

void TextStateRule::parseStateAllowLeftWordBoundary(TextStateRule *this, DgnTextFileParser *a2)
{
  DgnString::DgnString((DgnString *)&v45);
  while (1)
  {
    DgnString::DgnString((DgnString *)&v43);
    DgnString::DgnString((DgnString *)v42);
    DgnString::DgnString((DgnString *)v40);
    DgnString::DgnString((DgnString *)v38);
    DgnString::DgnString((DgnString *)v36);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v42, LineFieldString);
    if (*((unsigned char *)this + 32))
    {
      uint64_t v11 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v43, v11);
    }
    signed int LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v5, v6, v7, v8, v9, v10);
    uint64_t v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)v40, v13);
    uint64_t v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v38, v14);
    uint64_t v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v36, v15);
    unsigned int v22 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v16, v17, v18, v19, v20, v21);
    if (*((_DWORD *)this + 12)) {
      uint64_t v23 = (const char *)*((void *)this + 5);
    }
    else {
      uint64_t v23 = &byte_2140B33BB;
    }
    if (v44) {
      int v24 = v43;
    }
    else {
      int v24 = &byte_2140B33BB;
    }
    if (strcmp(v23, v24)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1457, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v41 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1459, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v39 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1461, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v37 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1463, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v22 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1466, (uint64_t)"voc/tsr", 14, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (LineFieldInteger <= 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1471, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v46 < LineFieldInteger + 1) {
      BitArray::setSize((BitArray *)&v45, LineFieldInteger + 1);
    }
    uint64_t v29 = LineFieldInteger >> 5;
    int v30 = *(_DWORD *)(v45 + 4 * v29);
    if ((v30 & (1 << LineFieldInteger)) != 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1484, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v27, v28, *((_DWORD *)a2 + 25));
    }
    else {
      *(_DWORD *)(v45 + 4 * v29) = v30 | (1 << LineFieldInteger);
    }
    StateMgr::setLeftWBAllowed(*(StateMgr **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), LineFieldInteger, v22 == 1, 1, v25, v26, v27, v28);
    if (!DgnTextFileParser::parseNextLine(a2)) {
      break;
    }
    int v31 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::DgnString((DgnString *)&v34, v31);
    if (v35) {
      int v32 = v34;
    }
    else {
      int v32 = &byte_2140B33BB;
    }
    int v33 = strcmp(v32, "StateAllowLeftWordBoundary");
    DgnString::~DgnString((DgnString *)&v34);
    DgnString::~DgnString((DgnString *)v36);
    DgnString::~DgnString((DgnString *)v38);
    DgnString::~DgnString((DgnString *)v40);
    DgnString::~DgnString((DgnString *)v42);
    DgnString::~DgnString((DgnString *)&v43);
    if (v33) {
      goto LABEL_34;
    }
  }
  DgnString::~DgnString((DgnString *)v36);
  DgnString::~DgnString((DgnString *)v38);
  DgnString::~DgnString((DgnString *)v40);
  DgnString::~DgnString((DgnString *)v42);
  DgnString::~DgnString((DgnString *)&v43);
LABEL_34:
  BitArray::~BitArray((BitArray *)&v45);
}

void sub_213F619DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va3, a9);
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v17 = va_arg(va3, void);
  uint64_t v19 = va_arg(va3, void);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va3);
  BitArray::~BitArray((BitArray *)(v9 - 96));
  _Unwind_Resume(a1);
}

void TextStateRule::parseStateAllowRightWordBoundary(TextStateRule *this, DgnTextFileParser *a2)
{
  DgnString::DgnString((DgnString *)&v45);
  while (1)
  {
    DgnString::DgnString((DgnString *)&v43);
    DgnString::DgnString((DgnString *)v42);
    DgnString::DgnString((DgnString *)v40);
    DgnString::DgnString((DgnString *)v38);
    DgnString::DgnString((DgnString *)v36);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v42, LineFieldString);
    if (*((unsigned char *)this + 32))
    {
      uint64_t v11 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v43, v11);
    }
    signed int LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v5, v6, v7, v8, v9, v10);
    uint64_t v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)v40, v13);
    uint64_t v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v38, v14);
    uint64_t v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v36, v15);
    unsigned int v22 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v16, v17, v18, v19, v20, v21);
    if (*((_DWORD *)this + 12)) {
      uint64_t v23 = (const char *)*((void *)this + 5);
    }
    else {
      uint64_t v23 = &byte_2140B33BB;
    }
    if (v44) {
      int v24 = v43;
    }
    else {
      int v24 = &byte_2140B33BB;
    }
    if (strcmp(v23, v24)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1516, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v41 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1518, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v39 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1520, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v37 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1522, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v22 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1525, (uint64_t)"voc/tsr", 14, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (LineFieldInteger <= 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1530, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v46 < LineFieldInteger + 1) {
      BitArray::setSize((BitArray *)&v45, LineFieldInteger + 1);
    }
    uint64_t v29 = LineFieldInteger >> 5;
    int v30 = *(_DWORD *)(v45 + 4 * v29);
    if ((v30 & (1 << LineFieldInteger)) != 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1543, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v27, v28, *((_DWORD *)a2 + 25));
    }
    else {
      *(_DWORD *)(v45 + 4 * v29) = v30 | (1 << LineFieldInteger);
    }
    StateMgr::setRightWBAllowed(*(StateMgr **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), LineFieldInteger, v22 == 1, 1, v25, v26, v27, v28);
    if (!DgnTextFileParser::parseNextLine(a2)) {
      break;
    }
    int v31 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::DgnString((DgnString *)&v34, v31);
    if (v35) {
      int v32 = v34;
    }
    else {
      int v32 = &byte_2140B33BB;
    }
    int v33 = strcmp(v32, "StateAllowRightWordBoundary");
    DgnString::~DgnString((DgnString *)&v34);
    DgnString::~DgnString((DgnString *)v36);
    DgnString::~DgnString((DgnString *)v38);
    DgnString::~DgnString((DgnString *)v40);
    DgnString::~DgnString((DgnString *)v42);
    DgnString::~DgnString((DgnString *)&v43);
    if (v33) {
      goto LABEL_34;
    }
  }
  DgnString::~DgnString((DgnString *)v36);
  DgnString::~DgnString((DgnString *)v38);
  DgnString::~DgnString((DgnString *)v40);
  DgnString::~DgnString((DgnString *)v42);
  DgnString::~DgnString((DgnString *)&v43);
LABEL_34:
  BitArray::~BitArray((BitArray *)&v45);
}

void sub_213F61E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va3, a9);
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v17 = va_arg(va3, void);
  uint64_t v19 = va_arg(va3, void);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va3);
  BitArray::~BitArray((BitArray *)(v9 - 96));
  _Unwind_Resume(a1);
}

void TextStateRule::parseStateAllowPrecedingNonAcousticWords(TextStateRule *this, DgnTextFileParser *a2)
{
  DgnString::DgnString((DgnString *)&v52);
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  while (1)
  {
    DgnString::DgnString((DgnString *)&v48);
    DgnString::DgnString((DgnString *)v47);
    DgnString::DgnString((DgnString *)v45);
    DgnString::DgnString((DgnString *)v43);
    DgnString::DgnString((DgnString *)v41);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v47, LineFieldString);
    if (*((unsigned char *)this + 32))
    {
      uint64_t v11 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v48, v11);
    }
    int LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v5, v6, v7, v8, v9, v10);
    uint64_t v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)v45, v13);
    uint64_t v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v43, v14);
    uint64_t v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v41, v15);
    unsigned int v22 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v16, v17, v18, v19, v20, v21);
    if (*((_DWORD *)this + 12)) {
      uint64_t v23 = (const char *)*((void *)this + 5);
    }
    else {
      uint64_t v23 = &byte_2140B33BB;
    }
    if (v49) {
      int v24 = v48;
    }
    else {
      int v24 = &byte_2140B33BB;
    }
    if (strcmp(v23, v24)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1577, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v25, v26, *((_DWORD *)a2 + 25));
    }
    if (v46 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1579, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v25, v26, *((_DWORD *)a2 + 25));
    }
    if (v44 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1581, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v25, v26, *((_DWORD *)a2 + 25));
    }
    if (v42 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1583, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v25, v26, *((_DWORD *)a2 + 25));
    }
    if (v22 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1586, (uint64_t)"voc/tsr", 14, (uint64_t)"%u", v25, v26, *((_DWORD *)a2 + 25));
    }
    if (LineFieldInteger <= 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1591, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v25, v26, *((_DWORD *)a2 + 25));
    }
    if (v53 < LineFieldInteger + 1) {
      BitArray::setSize((BitArray *)&v52, LineFieldInteger + 1);
    }
    uint64_t v27 = LineFieldInteger >> 5;
    int v28 = *(_DWORD *)(v52 + 4 * v27);
    if ((v28 & (1 << LineFieldInteger)) != 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1605, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v25, v26, *((_DWORD *)a2 + 25));
    }
    else {
      *(_DWORD *)(v52 + 4 * v27) = v28 | (1 << LineFieldInteger);
    }
    unsigned int v29 = v51;
    while (v29 < LineFieldInteger + 1)
    {
      if (v29 == HIDWORD(v51))
      {
        DgnPrimArray<char>::reallocElts((uint64_t)&v50, 1, 1);
        unsigned int v29 = v51;
      }
      *(unsigned char *)(v50 + v29) = 0;
      unsigned int v29 = v51 + 1;
      LODWORD(v51) = v51 + 1;
    }
    *(unsigned char *)(v50 + LineFieldInteger) = v22;
    if (!DgnTextFileParser::parseNextLine(a2)) {
      break;
    }
    int v30 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::DgnString((DgnString *)&v39, v30);
    if (v40) {
      int v31 = v39;
    }
    else {
      int v31 = &byte_2140B33BB;
    }
    int v32 = strcmp(v31, "StateAllowPrecedingNonAcousticWords");
    DgnString::~DgnString((DgnString *)&v39);
    DgnString::~DgnString((DgnString *)v41);
    DgnString::~DgnString((DgnString *)v43);
    DgnString::~DgnString((DgnString *)v45);
    DgnString::~DgnString((DgnString *)v47);
    DgnString::~DgnString((DgnString *)&v48);
    if (v32) {
      goto LABEL_39;
    }
  }
  DgnString::~DgnString((DgnString *)v41);
  DgnString::~DgnString((DgnString *)v43);
  DgnString::~DgnString((DgnString *)v45);
  DgnString::~DgnString((DgnString *)v47);
  DgnString::~DgnString((DgnString *)&v48);
LABEL_39:
  if (v51) {
    StateMgr::upgradePrecedingNonAcousticWordsAllowed(*(StateMgr **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), (unsigned int *)&v50, v33, v34, v35, v36, v37, v38);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v50);
  BitArray::~BitArray((BitArray *)&v52);
}

void sub_213F622CC(_Unwind_Exception *a1)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 - 120);
  BitArray::~BitArray((BitArray *)(v1 - 104));
  _Unwind_Resume(a1);
}

void TextStateRule::parseStateAllowPrefiltering(TextStateRule *this, DgnTextFileParser *a2)
{
  DgnString::DgnString((DgnString *)&v45);
  while (1)
  {
    DgnString::DgnString((DgnString *)&v43);
    DgnString::DgnString((DgnString *)v42);
    DgnString::DgnString((DgnString *)v40);
    DgnString::DgnString((DgnString *)v38);
    DgnString::DgnString((DgnString *)v36);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v42, LineFieldString);
    if (*((unsigned char *)this + 32))
    {
      uint64_t v11 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v43, v11);
    }
    uint64_t LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v5, v6, v7, v8, v9, v10);
    uint64_t v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)v40, v13);
    uint64_t v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v38, v14);
    uint64_t v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v36, v15);
    unsigned int v22 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v16, v17, v18, v19, v20, v21);
    if (*((_DWORD *)this + 12)) {
      uint64_t v23 = (const char *)*((void *)this + 5);
    }
    else {
      uint64_t v23 = &byte_2140B33BB;
    }
    if (v44) {
      int v24 = v43;
    }
    else {
      int v24 = &byte_2140B33BB;
    }
    if (strcmp(v23, v24)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1650, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v41 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1652, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v39 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1654, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v37 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1656, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v22 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1659, (uint64_t)"voc/tsr", 14, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if ((int)LineFieldInteger <= 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1664, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v46 < (int)LineFieldInteger + 1) {
      BitArray::setSize((BitArray *)&v45, LineFieldInteger + 1);
    }
    uint64_t v29 = LineFieldInteger >> 5;
    int v30 = *(_DWORD *)(v45 + 4 * v29);
    if ((v30 & (1 << LineFieldInteger)) != 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1677, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v27, v28, *((_DWORD *)a2 + 25));
    }
    else {
      *(_DWORD *)(v45 + 4 * v29) = v30 | (1 << LineFieldInteger);
    }
    StateMgr::setPrefilteringAllowed(*(StateMgr **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), LineFieldInteger, v22 == 1, 1, v25, v26, v27, v28);
    if (!DgnTextFileParser::parseNextLine(a2)) {
      break;
    }
    int v31 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::DgnString((DgnString *)&v34, v31);
    if (v35) {
      int v32 = v34;
    }
    else {
      int v32 = &byte_2140B33BB;
    }
    int v33 = strcmp(v32, "StateAllowPrefiltering");
    DgnString::~DgnString((DgnString *)&v34);
    DgnString::~DgnString((DgnString *)v36);
    DgnString::~DgnString((DgnString *)v38);
    DgnString::~DgnString((DgnString *)v40);
    DgnString::~DgnString((DgnString *)v42);
    DgnString::~DgnString((DgnString *)&v43);
    if (v33) {
      goto LABEL_34;
    }
  }
  DgnString::~DgnString((DgnString *)v36);
  DgnString::~DgnString((DgnString *)v38);
  DgnString::~DgnString((DgnString *)v40);
  DgnString::~DgnString((DgnString *)v42);
  DgnString::~DgnString((DgnString *)&v43);
LABEL_34:
  BitArray::~BitArray((BitArray *)&v45);
}

void sub_213F62728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va3, a9);
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v17 = va_arg(va3, void);
  uint64_t v19 = va_arg(va3, void);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va3);
  BitArray::~BitArray((BitArray *)(v9 - 96));
  _Unwind_Resume(a1);
}

void TextStateRule::parseStateAllowEndOfUtt(TextStateRule *this, DgnTextFileParser *a2)
{
  DgnString::DgnString((DgnString *)&v45);
  while (1)
  {
    DgnString::DgnString((DgnString *)&v43);
    DgnString::DgnString((DgnString *)v42);
    DgnString::DgnString((DgnString *)v40);
    DgnString::DgnString((DgnString *)v38);
    DgnString::DgnString((DgnString *)v36);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v42, LineFieldString);
    if (*((unsigned char *)this + 32))
    {
      uint64_t v11 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v43, v11);
    }
    signed int LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v5, v6, v7, v8, v9, v10);
    uint64_t v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)v40, v13);
    uint64_t v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v38, v14);
    uint64_t v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v36, v15);
    unsigned int v22 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v16, v17, v18, v19, v20, v21);
    if (*((_DWORD *)this + 12)) {
      uint64_t v23 = (const char *)*((void *)this + 5);
    }
    else {
      uint64_t v23 = &byte_2140B33BB;
    }
    if (v44) {
      int v24 = v43;
    }
    else {
      int v24 = &byte_2140B33BB;
    }
    if (strcmp(v23, v24)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1708, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v41 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1710, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v39 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1712, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v37 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1714, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v22 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1717, (uint64_t)"voc/tsr", 14, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (LineFieldInteger <= 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1722, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v46 < LineFieldInteger + 1) {
      BitArray::setSize((BitArray *)&v45, LineFieldInteger + 1);
    }
    uint64_t v29 = LineFieldInteger >> 5;
    int v30 = *(_DWORD *)(v45 + 4 * v29);
    if ((v30 & (1 << LineFieldInteger)) != 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1735, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v27, v28, *((_DWORD *)a2 + 25));
    }
    else {
      *(_DWORD *)(v45 + 4 * v29) = v30 | (1 << LineFieldInteger);
    }
    StateMgr::setEndOfUtteranceAllowed(*(StateMgr **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), LineFieldInteger, v22 == 1, 1, v25, v26, v27, v28);
    if (!DgnTextFileParser::parseNextLine(a2)) {
      break;
    }
    int v31 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::DgnString((DgnString *)&v34, v31);
    if (v35) {
      int v32 = v34;
    }
    else {
      int v32 = &byte_2140B33BB;
    }
    int v33 = strcmp(v32, "StateAllowEndOfUtt");
    DgnString::~DgnString((DgnString *)&v34);
    DgnString::~DgnString((DgnString *)v36);
    DgnString::~DgnString((DgnString *)v38);
    DgnString::~DgnString((DgnString *)v40);
    DgnString::~DgnString((DgnString *)v42);
    DgnString::~DgnString((DgnString *)&v43);
    if (v33) {
      goto LABEL_34;
    }
  }
  DgnString::~DgnString((DgnString *)v36);
  DgnString::~DgnString((DgnString *)v38);
  DgnString::~DgnString((DgnString *)v40);
  DgnString::~DgnString((DgnString *)v42);
  DgnString::~DgnString((DgnString *)&v43);
LABEL_34:
  BitArray::~BitArray((BitArray *)&v45);
}

void sub_213F62B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va3, a9);
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v17 = va_arg(va3, void);
  uint64_t v19 = va_arg(va3, void);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va3);
  BitArray::~BitArray((BitArray *)(v9 - 96));
  _Unwind_Resume(a1);
}

void TextStateRule::parseStateAliasState(TextStateRule *this, DgnTextFileParser *a2)
{
  DgnString::DgnString((DgnString *)&v45);
  while (1)
  {
    DgnString::DgnString((DgnString *)&v43);
    DgnString::DgnString((DgnString *)v42);
    DgnString::DgnString((DgnString *)v40);
    DgnString::DgnString((DgnString *)v38);
    DgnString::DgnString((DgnString *)v36);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v42, LineFieldString);
    if (*((unsigned char *)this + 32))
    {
      uint64_t v11 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v43, v11);
    }
    signed int LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v5, v6, v7, v8, v9, v10);
    uint64_t v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)v40, v13);
    uint64_t v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v38, v14);
    uint64_t v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v36, v15);
    signed int v22 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v16, v17, v18, v19, v20, v21);
    if (*((_DWORD *)this + 12)) {
      uint64_t v23 = (const char *)*((void *)this + 5);
    }
    else {
      uint64_t v23 = &byte_2140B33BB;
    }
    if (v44) {
      int v24 = v43;
    }
    else {
      int v24 = &byte_2140B33BB;
    }
    if (strcmp(v23, v24)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1767, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v41 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1769, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v39 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1771, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v37 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1773, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (LineFieldInteger <= 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1778, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v22 <= 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1782, (uint64_t)"voc/tsr", 18, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v46 < LineFieldInteger + 1) {
      BitArray::setSize((BitArray *)&v45, LineFieldInteger + 1);
    }
    uint64_t v29 = LineFieldInteger >> 5;
    int v30 = *(_DWORD *)(v45 + 4 * v29);
    if ((v30 & (1 << LineFieldInteger)) != 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1796, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v27, v28, *((_DWORD *)a2 + 25));
    }
    else {
      *(_DWORD *)(v45 + 4 * v29) = v30 | (1 << LineFieldInteger);
    }
    StateMgr::setWordAliasState(*(StateMgr **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), LineFieldInteger, v22, 1, v25, v26, v27, v28);
    if (!DgnTextFileParser::parseNextLine(a2)) {
      break;
    }
    int v31 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::DgnString((DgnString *)&v34, v31);
    if (v35) {
      int v32 = v34;
    }
    else {
      int v32 = &byte_2140B33BB;
    }
    int v33 = strcmp(v32, "StateAliasState");
    DgnString::~DgnString((DgnString *)&v34);
    DgnString::~DgnString((DgnString *)v36);
    DgnString::~DgnString((DgnString *)v38);
    DgnString::~DgnString((DgnString *)v40);
    DgnString::~DgnString((DgnString *)v42);
    DgnString::~DgnString((DgnString *)&v43);
    if (v33) {
      goto LABEL_34;
    }
  }
  DgnString::~DgnString((DgnString *)v36);
  DgnString::~DgnString((DgnString *)v38);
  DgnString::~DgnString((DgnString *)v40);
  DgnString::~DgnString((DgnString *)v42);
  DgnString::~DgnString((DgnString *)&v43);
LABEL_34:
  BitArray::~BitArray((BitArray *)&v45);
}

void sub_213F62FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va3, a9);
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v17 = va_arg(va3, void);
  uint64_t v19 = va_arg(va3, void);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va3);
  BitArray::~BitArray((BitArray *)(v9 - 96));
  _Unwind_Resume(a1);
}

void TextStateRule::parseStatePrecedingNonAcousticWordState(TextStateRule *this, DgnTextFileParser *a2)
{
  DgnString::DgnString((DgnString *)&v45);
  while (1)
  {
    DgnString::DgnString((DgnString *)&v43);
    DgnString::DgnString((DgnString *)v42);
    DgnString::DgnString((DgnString *)v40);
    DgnString::DgnString((DgnString *)v38);
    DgnString::DgnString((DgnString *)v36);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v42, LineFieldString);
    if (*((unsigned char *)this + 32))
    {
      uint64_t v11 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v43, v11);
    }
    uint64_t LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v5, v6, v7, v8, v9, v10);
    uint64_t v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)v40, v13);
    uint64_t v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v38, v14);
    uint64_t v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v36, v15);
    uint64_t v22 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v16, v17, v18, v19, v20, v21);
    if (*((_DWORD *)this + 12)) {
      uint64_t v23 = (const char *)*((void *)this + 5);
    }
    else {
      uint64_t v23 = &byte_2140B33BB;
    }
    if (v44) {
      int v24 = v43;
    }
    else {
      int v24 = &byte_2140B33BB;
    }
    if (strcmp(v23, v24)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1829, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v41 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1831, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v39 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1833, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v37 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1835, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if ((int)LineFieldInteger <= 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1840, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if ((int)v22 <= 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1844, (uint64_t)"voc/tsr", 18, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v46 < (int)LineFieldInteger + 1) {
      BitArray::setSize((BitArray *)&v45, LineFieldInteger + 1);
    }
    uint64_t v29 = LineFieldInteger >> 5;
    int v30 = *(_DWORD *)(v45 + 4 * v29);
    if ((v30 & (1 << LineFieldInteger)) != 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1860, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v27, v28, *((_DWORD *)a2 + 25));
    }
    else {
      *(_DWORD *)(v45 + 4 * v29) = v30 | (1 << LineFieldInteger);
    }
    StateMgr::setPrecedingNonAcousticWordState(*(StateMgr **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), LineFieldInteger, v22, 1, v25, v26, v27, v28);
    if (!DgnTextFileParser::parseNextLine(a2)) {
      break;
    }
    int v31 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::DgnString((DgnString *)&v34, v31);
    if (v35) {
      int v32 = v34;
    }
    else {
      int v32 = &byte_2140B33BB;
    }
    int v33 = strcmp(v32, "StatePrecedingNonAcousticWordState");
    DgnString::~DgnString((DgnString *)&v34);
    DgnString::~DgnString((DgnString *)v36);
    DgnString::~DgnString((DgnString *)v38);
    DgnString::~DgnString((DgnString *)v40);
    DgnString::~DgnString((DgnString *)v42);
    DgnString::~DgnString((DgnString *)&v43);
    if (v33) {
      goto LABEL_34;
    }
  }
  DgnString::~DgnString((DgnString *)v36);
  DgnString::~DgnString((DgnString *)v38);
  DgnString::~DgnString((DgnString *)v40);
  DgnString::~DgnString((DgnString *)v42);
  DgnString::~DgnString((DgnString *)&v43);
LABEL_34:
  BitArray::~BitArray((BitArray *)&v45);
}

void sub_213F63404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va3, a9);
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v17 = va_arg(va3, void);
  uint64_t v19 = va_arg(va3, void);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va3);
  BitArray::~BitArray((BitArray *)(v9 - 96));
  _Unwind_Resume(a1);
}

void TextStateRule::parseStatePrecedingNonAcousticWordRequired(TextStateRule *this, DgnTextFileParser *a2)
{
  DgnString::DgnString((DgnString *)&v45);
  while (1)
  {
    DgnString::DgnString((DgnString *)&v43);
    DgnString::DgnString((DgnString *)v42);
    DgnString::DgnString((DgnString *)v40);
    DgnString::DgnString((DgnString *)v38);
    DgnString::DgnString((DgnString *)v36);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v42, LineFieldString);
    if (*((unsigned char *)this + 32))
    {
      uint64_t v11 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v43, v11);
    }
    uint64_t LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v5, v6, v7, v8, v9, v10);
    uint64_t v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)v40, v13);
    uint64_t v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v38, v14);
    uint64_t v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v36, v15);
    unsigned int v22 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v16, v17, v18, v19, v20, v21);
    if (*((_DWORD *)this + 12)) {
      uint64_t v23 = (const char *)*((void *)this + 5);
    }
    else {
      uint64_t v23 = &byte_2140B33BB;
    }
    if (v44) {
      int v24 = v43;
    }
    else {
      int v24 = &byte_2140B33BB;
    }
    if (strcmp(v23, v24)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1895, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v41 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1897, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v39 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1899, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v37 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1901, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v22 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1904, (uint64_t)"voc/tsr", 14, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if ((int)LineFieldInteger <= 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1909, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v46 < (int)LineFieldInteger + 1) {
      BitArray::setSize((BitArray *)&v45, LineFieldInteger + 1);
    }
    uint64_t v29 = LineFieldInteger >> 5;
    int v30 = *(_DWORD *)(v45 + 4 * v29);
    if ((v30 & (1 << LineFieldInteger)) != 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1923, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v27, v28, *((_DWORD *)a2 + 25));
    }
    else {
      *(_DWORD *)(v45 + 4 * v29) = v30 | (1 << LineFieldInteger);
    }
    StateMgr::setPrecedingNonAcousticWordRequired(*(StateMgr **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), LineFieldInteger, v22 == 1, 1, v25, v26, v27, v28);
    if (!DgnTextFileParser::parseNextLine(a2)) {
      break;
    }
    int v31 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::DgnString((DgnString *)&v34, v31);
    if (v35) {
      int v32 = v34;
    }
    else {
      int v32 = &byte_2140B33BB;
    }
    int v33 = strcmp(v32, "StatePrecedingNonAcousticWordRequired");
    DgnString::~DgnString((DgnString *)&v34);
    DgnString::~DgnString((DgnString *)v36);
    DgnString::~DgnString((DgnString *)v38);
    DgnString::~DgnString((DgnString *)v40);
    DgnString::~DgnString((DgnString *)v42);
    DgnString::~DgnString((DgnString *)&v43);
    if (v33) {
      goto LABEL_34;
    }
  }
  DgnString::~DgnString((DgnString *)v36);
  DgnString::~DgnString((DgnString *)v38);
  DgnString::~DgnString((DgnString *)v40);
  DgnString::~DgnString((DgnString *)v42);
  DgnString::~DgnString((DgnString *)&v43);
LABEL_34:
  BitArray::~BitArray((BitArray *)&v45);
}

void sub_213F63850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va3, a9);
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v17 = va_arg(va3, void);
  uint64_t v19 = va_arg(va3, void);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va3);
  BitArray::~BitArray((BitArray *)(v9 - 96));
  _Unwind_Resume(a1);
}

uint64_t TextStateRule::parseStateIncludedWord(TextStateRule *this, DgnTextFileParser *a2)
{
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  DgnString::DgnString((DgnString *)&v73);
  unsigned int v4 = 0;
  LOWORD(v5) = 127;
  do
  {
    DgnString::DgnString((DgnString *)&v71);
    DgnString::DgnString((DgnString *)v70);
    DgnString::DgnString((DgnString *)&v68);
    DgnString::DgnString((DgnString *)v66);
    DgnString::DgnString((DgnString *)v64);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v70, LineFieldString);
    if (*((unsigned char *)this + 32))
    {
      uint64_t v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v71, v13);
    }
    signed int LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v7, v8, v9, v10, v11, v12);
    uint64_t v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)&v68, v15);
    uint64_t v16 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v66, v16);
    uint64_t v17 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v64, v17);
    int v24 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v18, v19, v20, v21, v22, v23);
    if (*((_DWORD *)this + 12)) {
      uint64_t v25 = (const char *)*((void *)this + 5);
    }
    else {
      uint64_t v25 = &byte_2140B33BB;
    }
    if (v72) {
      uint64_t v26 = v71;
    }
    else {
      uint64_t v26 = &byte_2140B33BB;
    }
    if (strcmp(v25, v26)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1959, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v67 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1961, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v65 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1963, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v24) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1965, (uint64_t)"voc/tsr", 13, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (LineFieldInteger <= 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1970, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    BOOL v29 = v4 == 0;
    BOOL v30 = (unsigned __int16)v5 == 127;
    if (v29 && v30) {
      unsigned int v31 = LineFieldInteger;
    }
    else {
      unsigned int v31 = v4;
    }
    if (v29 && v30) {
      unsigned __int16 v32 = *(_WORD *)this;
    }
    else {
      unsigned __int16 v32 = v5;
    }
    if (v69) {
      int v33 = v68;
    }
    else {
      int v33 = &byte_2140B33BB;
    }
    unsigned int WordId = GetWordId(*(unsigned __int16 *)this, v33, "StateIncludedWord", ".tsr", 0, 0, v27, v28);
    if (LineFieldInteger != v31 || (unsigned __int16 v41 = v32, *(unsigned __int16 *)this != v32))
    {
      if (v74 < v31 + 1) {
        BitArray::setSize((BitArray *)&v73, v31 + 1);
      }
      uint64_t v42 = v31 >> 5;
      int v43 = *(_DWORD *)(v73 + 4 * v42);
      if ((v43 & (1 << v31)) != 0) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 1994, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v38, v39, *((_DWORD *)a2 + 25));
      }
      else {
        *(_DWORD *)(v73 + 4 * v42) = v43 | (1 << v31);
      }
      StateMgr::addWordIdArray(*(StateMgr **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * v32) + 56), v31, (uint64_t)&v75, 1, v36, v37, v38, v39);
      LODWORD(v76) = 0;
      unsigned __int16 v41 = *(_WORD *)this;
    }
    uint64_t v62 = 0;
    uint64_t v63 = 0;
    int v44 = *(WordList **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * v41) + 48);
    WordList::verifyVisible(v44, WordId, v34, v35, v36, v37, v38, v39);
    WordList::lookupAll((uint64_t *)v44, WordId, (uint64_t)&v62);
    int v45 = v63;
    if ((v76 + v63) > HIDWORD(v76))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v75, (v76 + v63 - HIDWORD(v76)), 1);
      int v45 = v63;
    }
    if (v45)
    {
      unint64_t v46 = 0;
      uint64_t v47 = v62;
      uint64_t v48 = v75;
      do
      {
        *(_DWORD *)(v48 + 4 * (v46 + v76)) = *(_DWORD *)(v47 + 4 * v46);
        ++v46;
        int v49 = v63;
      }
      while (v46 < v63);
    }
    else
    {
      int v49 = 0;
    }
    LODWORD(v76) = v76 + v49;
    if (DgnTextFileParser::parseNextLine(a2))
    {
      uint64_t v50 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
      DgnString::DgnString((DgnString *)&v60, v50);
      if (v61) {
        uint64_t v51 = v60;
      }
      else {
        uint64_t v51 = &byte_2140B33BB;
      }
      BOOL v52 = strcmp(v51, "StateIncludedWord") != 0;
      DgnString::~DgnString((DgnString *)&v60);
    }
    else
    {
      BOOL v52 = 1;
    }
    uint64_t v5 = *(unsigned __int16 *)this;
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v62);
    DgnString::~DgnString((DgnString *)v64);
    DgnString::~DgnString((DgnString *)v66);
    DgnString::~DgnString((DgnString *)&v68);
    DgnString::~DgnString((DgnString *)v70);
    DgnString::~DgnString((DgnString *)&v71);
    unsigned int v4 = LineFieldInteger;
  }
  while (!v52);
  if (v74 < LineFieldInteger + 1) {
    BitArray::setSize((BitArray *)&v73, LineFieldInteger + 1);
  }
  uint64_t v57 = LineFieldInteger >> 5;
  int v58 = *(_DWORD *)(v73 + 4 * v57);
  if ((v58 & (1 << LineFieldInteger)) != 0) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2035, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v55, v56, *((_DWORD *)a2 + 25));
  }
  else {
    *(_DWORD *)(v73 + 4 * v57) = v58 | (1 << LineFieldInteger);
  }
  StateMgr::addWordIdArray(*(StateMgr **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * v5) + 56), LineFieldInteger, (uint64_t)&v75, 1, v53, v54, v55, v56);
  BitArray::~BitArray((BitArray *)&v73);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v75);
}

void sub_213F63E38(_Unwind_Exception *a1)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 - 104);
  _Unwind_Resume(a1);
}

uint64_t TextStateRule::parseStateTransitionState(TextStateRule *this, DgnTextFileParser *a2)
{
  uint64_t v92 = 0;
  uint64_t v93 = 0;
  DgnString::DgnString((DgnString *)&v90);
  unsigned int v4 = 0;
  LODWORD(v5) = 127;
  uint64_t v6 = "StateTransitionState";
  do
  {
    DgnString::DgnString((DgnString *)&v88);
    DgnString::DgnString((DgnString *)v87);
    DgnString::DgnString((DgnString *)&v85);
    DgnString::DgnString((DgnString *)v83);
    DgnString::DgnString((DgnString *)v81);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v87, LineFieldString);
    if (*((unsigned char *)this + 32))
    {
      uint64_t v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v88, v14);
    }
    signed int LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v8, v9, v10, v11, v12, v13);
    uint64_t v16 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)&v85, v16);
    uint64_t v17 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v83, v17);
    uint64_t v18 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v81, v18);
    int v25 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v19, v20, v21, v22, v23, v24);
    if (*((_DWORD *)this + 12)) {
      uint64_t v26 = (const char *)*((void *)this + 5);
    }
    else {
      uint64_t v26 = &byte_2140B33BB;
    }
    if (v89) {
      uint64_t v27 = v88;
    }
    else {
      uint64_t v27 = &byte_2140B33BB;
    }
    if (strcmp(v26, v27)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2062, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v31, v32, *((_DWORD *)a2 + 25));
    }
    if (v84 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2064, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v31, v32, *((_DWORD *)a2 + 25));
    }
    if (v82 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2066, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v31, v32, *((_DWORD *)a2 + 25));
    }
    if (LineFieldInteger <= 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2071, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v31, v32, *((_DWORD *)a2 + 25));
    }
    if (v25 <= 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2075, (uint64_t)"voc/tsr", 18, (uint64_t)"%u", v31, v32, *((_DWORD *)a2 + 25));
    }
    if (!v4 && v5 == 127)
    {
      LODWORD(v5) = *(unsigned __int16 *)this;
      unsigned int v4 = LineFieldInteger;
    }
    if (!*((unsigned char *)this + 32))
    {
      int v33 = v86 ? v85 : &byte_2140B33BB;
      if (*v33) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2088, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v31, v32, *((_DWORD *)a2 + 25));
      }
    }
    if (v4 == LineFieldInteger && v5 == *(unsigned __int16 *)this)
    {
      uint64_t v34 = v93;
    }
    else
    {
      if (v91 < v4 + 1) {
        BitArray::setSize((BitArray *)&v90, v4 + 1);
      }
      uint64_t v35 = v4 >> 5;
      int v36 = *(_DWORD *)(v90 + 4 * v35);
      if ((v36 & (1 << v4)) != 0) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2105, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v31, v32, *((_DWORD *)a2 + 25));
      }
      else {
        *(_DWORD *)(v90 + 4 * v35) = v36 | (1 << v4);
      }
      int v78 = v25;
      uint64_t v37 = v6;
      signed int v38 = LineFieldInteger;
      uint64_t v39 = *(StateMgr **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * v5) + 56);
      BOOL RightWBAllowed = StateMgr::getRightWBAllowed(v39, v4, 1, v28, v29, v30, v31, v32);
      if (StateMgr::getSkipAllowed(v39, v4, 1, v41, v42, v43, v44, v45)
        && RightWBAllowed != StateMgr::getLeftWBAllowed(v39, v4, 1, v46, v47, v48, v49, v50))
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2122, (uint64_t)"voc/tsr", 9, (uint64_t)"%u %u", v49, v50, *((_DWORD *)a2 + 25));
      }
      if (v93)
      {
        unint64_t v51 = 0;
        do
        {
          BOOL v52 = *(StateMgr **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56);
          if (RightWBAllowed != StateMgr::getLeftWBAllowed(v52, *(_DWORD *)(v92 + 4 * v51), 1, v46, v47, v48, v49, v50)) {
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2132, (uint64_t)"voc/tsr", 6, (uint64_t)"%u %u %u", v56, v57, *((_DWORD *)a2 + 25));
          }
          if (StateMgr::getSkipAllowed(v52, *(_DWORD *)(v92 + 4 * v51), 1, v53, v54, v55, v56, v57)
            && RightWBAllowed != StateMgr::getRightWBAllowed(v52, *(_DWORD *)(v92 + 4 * v51), 1, v46, v47, v48, v49, v50))
          {
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2139, (uint64_t)"voc/tsr", 9, (uint64_t)"%u %u", v49, v50, *((_DWORD *)a2 + 25));
          }
          ++v51;
        }
        while (v51 < v93);
      }
      StateMgr::addStateTransition((unint64_t)v39, v4, &v92, 1, 0, 0, v49, v50);
      uint64_t v34 = 0;
      LODWORD(v93) = 0;
      signed int LineFieldInteger = v38;
      uint64_t v6 = v37;
      int v25 = v78;
    }
    if (v34 == HIDWORD(v93))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v92, 1, 1);
      uint64_t v34 = v93;
    }
    *(_DWORD *)(v92 + 4 * v34) = v25;
    LODWORD(v93) = v93 + 1;
    if (DgnTextFileParser::parseNextLine(a2))
    {
      int v58 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
      DgnString::DgnString((DgnString *)&v79, v58);
      if (v80) {
        v59 = v79;
      }
      else {
        v59 = &byte_2140B33BB;
      }
      BOOL v60 = strcmp(v59, v6) != 0;
      DgnString::~DgnString((DgnString *)&v79);
    }
    else
    {
      BOOL v60 = 1;
    }
    uint64_t v5 = *(unsigned __int16 *)this;
    DgnString::~DgnString((DgnString *)v81);
    DgnString::~DgnString((DgnString *)v83);
    DgnString::~DgnString((DgnString *)&v85);
    DgnString::~DgnString((DgnString *)v87);
    DgnString::~DgnString((DgnString *)&v88);
    unsigned int v4 = LineFieldInteger;
  }
  while (!v60);
  if (v91 < LineFieldInteger + 1) {
    BitArray::setSize((BitArray *)&v90, LineFieldInteger + 1);
  }
  uint64_t v66 = LineFieldInteger >> 5;
  int v67 = *(_DWORD *)(v90 + 4 * v66);
  if ((v67 & (1 << LineFieldInteger)) != 0) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2171, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v64, v65, *((_DWORD *)a2 + 25));
  }
  else {
    *(_DWORD *)(v90 + 4 * v66) = v67 | (1 << LineFieldInteger);
  }
  v68 = *(StateMgr **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * v5) + 56);
  BOOL v69 = StateMgr::getRightWBAllowed(v68, LineFieldInteger, 1, v61, v62, v63, v64, v65);
  if (v93)
  {
    BOOL v75 = v69;
    unint64_t v76 = 0;
    do
    {
      if (v75 != StateMgr::getLeftWBAllowed(*(StateMgr **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56), *(_DWORD *)(v92 + 4 * v76), 1, v70, v71, v72, v73, v74))errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2188, (uint64_t)"voc/tsr", 6, (uint64_t)"%u %u %u", v73, v74, *((_DWORD *)a2 + 25)); {
      ++v76;
      }
    }
    while (v76 < v93);
  }
  StateMgr::addStateTransition((unint64_t)v68, LineFieldInteger, &v92, 1, 0, 0, v73, v74);
  BitArray::~BitArray((BitArray *)&v90);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v92);
}

void sub_213F6463C(_Unwind_Exception *a1)
{
  BitArray::~BitArray((BitArray *)(v1 - 120));
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 - 104);
  _Unwind_Resume(a1);
}

uint64_t TextStateRule::parseStateAllowedCollations(TextStateRule *this, DgnTextFileParser *a2)
{
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  DgnString::DgnString((DgnString *)&v60);
  unsigned int v4 = 0;
  LODWORD(v5) = 127;
  do
  {
    DgnString::DgnString((DgnString *)&v58);
    DgnString::DgnString((DgnString *)v57);
    DgnString::DgnString((DgnString *)&v55);
    DgnString::DgnString((DgnString *)v53);
    DgnString::DgnString((DgnString *)v52);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v57, LineFieldString);
    if (*((unsigned char *)this + 32))
    {
      uint64_t v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v58, v13);
    }
    signed int LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v7, v8, v9, v10, v11, v12);
    uint64_t v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)&v55, v15);
    uint64_t v16 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v53, v16);
    uint64_t v17 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v52, v17);
    int v24 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v18, v19, v20, v21, v22, v23);
    if (*((_DWORD *)this + 12)) {
      int v25 = (const char *)*((void *)this + 5);
    }
    else {
      int v25 = &byte_2140B33BB;
    }
    if (v59) {
      uint64_t v26 = v58;
    }
    else {
      uint64_t v26 = &byte_2140B33BB;
    }
    if (strcmp(v25, v26)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2210, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v54 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2212, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v24) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2214, (uint64_t)"voc/tsr", 13, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (LineFieldInteger <= 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2219, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (!v4 && v5 == 127)
    {
      LODWORD(v5) = *(unsigned __int16 *)this;
      unsigned int v4 = LineFieldInteger;
    }
    if (v56) {
      uint64_t v29 = v55;
    }
    else {
      uint64_t v29 = &byte_2140B33BB;
    }
    if (!strcmp(v29, "_IDENTITY")) {
      __int16 v36 = -2;
    }
    else {
      __int16 v36 = CollMgr::lookupCollation(*(CollMgr **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 16), v29, v30, v31, v32, v33, v34, v35);
    }
    if (v4 == LineFieldInteger && v5 == *(unsigned __int16 *)this)
    {
      unsigned int v37 = v63;
    }
    else
    {
      if (v61 < v4 + 1) {
        BitArray::setSize((BitArray *)&v60, v4 + 1);
      }
      uint64_t v38 = v4 >> 5;
      int v39 = *(_DWORD *)(v60 + 4 * v38);
      if ((v39 & (1 << v4)) != 0) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2246, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v34, v35, *((_DWORD *)a2 + 25));
      }
      else {
        *(_DWORD *)(v60 + 4 * v38) = v39 | (1 << v4);
      }
      StateMgr::setColls(*(StateMgr **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * v5) + 56), v4, (uint64_t)&v62, 1, v32, v33, v34, v35);
      unsigned int v37 = 0;
      LODWORD(v63) = 0;
    }
    if (v37 == HIDWORD(v63))
    {
      DgnPrimArray<short>::reallocElts((uint64_t)&v62, 1, 1);
      unsigned int v37 = v63;
    }
    *(_WORD *)(v62 + 2 * v37) = v36;
    LODWORD(v63) = v37 + 1;
    if (DgnTextFileParser::parseNextLine(a2))
    {
      int v40 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
      DgnString::DgnString((DgnString *)&v50, v40);
      if (v51) {
        uint64_t v41 = v50;
      }
      else {
        uint64_t v41 = &byte_2140B33BB;
      }
      BOOL v42 = strcmp(v41, "StateAllowedCollations") != 0;
      DgnString::~DgnString((DgnString *)&v50);
    }
    else
    {
      BOOL v42 = 1;
    }
    uint64_t v5 = *(unsigned __int16 *)this;
    DgnString::~DgnString((DgnString *)v52);
    DgnString::~DgnString((DgnString *)v53);
    DgnString::~DgnString((DgnString *)&v55);
    DgnString::~DgnString((DgnString *)v57);
    DgnString::~DgnString((DgnString *)&v58);
    unsigned int v4 = LineFieldInteger;
  }
  while (!v42);
  if (v61 < LineFieldInteger + 1) {
    BitArray::setSize((BitArray *)&v60, LineFieldInteger + 1);
  }
  uint64_t v47 = LineFieldInteger >> 5;
  int v48 = *(_DWORD *)(v60 + 4 * v47);
  if ((v48 & (1 << LineFieldInteger)) != 0) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2282, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v45, v46, *((_DWORD *)a2 + 25));
  }
  else {
    *(_DWORD *)(v60 + 4 * v47) = v48 | (1 << LineFieldInteger);
  }
  StateMgr::setColls(*(StateMgr **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * v5) + 56), LineFieldInteger, (uint64_t)&v62, 1, v43, v44, v45, v46);
  BitArray::~BitArray((BitArray *)&v60);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v62);
}

void sub_213F64BA8(_Unwind_Exception *a1)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 - 104);
  _Unwind_Resume(a1);
}

void TextStateRule::parseStateEnv(TextStateRule *this, DgnTextFileParser *a2)
{
  DgnString::DgnString((DgnString *)&v68);
  unsigned int v4 = 0;
  uint64_t v66 = 0;
  unsigned int v67 = 0;
  int v5 = 127;
  do
  {
    DgnString::DgnString((DgnString *)&v64);
    DgnString::DgnString((DgnString *)v63);
    DgnString::DgnString((DgnString *)&v61);
    DgnString::DgnString((DgnString *)v59);
    DgnString::DgnString((DgnString *)v57);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v63, LineFieldString);
    if (*((unsigned char *)this + 32))
    {
      uint64_t v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v64, v13);
    }
    uint64_t LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v7, v8, v9, v10, v11, v12);
    uint64_t v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)&v61, v15);
    uint64_t v16 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v59, v16);
    uint64_t v17 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v57, v17);
    int v24 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v18, v19, v20, v21, v22, v23);
    if (*((_DWORD *)this + 12)) {
      int v25 = (const char *)*((void *)this + 5);
    }
    else {
      int v25 = &byte_2140B33BB;
    }
    if (v65) {
      uint64_t v26 = v64;
    }
    else {
      uint64_t v26 = &byte_2140B33BB;
    }
    if (strcmp(v25, v26)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2307, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v31, v32, *((_DWORD *)a2 + 25));
    }
    if (v58 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2309, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v31, v32, *((_DWORD *)a2 + 25));
    }
    if (v24) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2311, (uint64_t)"voc/tsr", 13, (uint64_t)"%u", v31, v32, *((_DWORD *)a2 + 25));
    }
    if ((int)LineFieldInteger <= 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2316, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v31, v32, *((_DWORD *)a2 + 25));
    }
    if ((v4 || v5 != 127) && (LineFieldInteger != v4 || *(unsigned __int16 *)this != v5))
    {
      if (v69 < v4 + 1) {
        BitArray::setSize((BitArray *)&v68, v4 + 1);
      }
      uint64_t v33 = v4 >> 5;
      int v34 = *(_DWORD *)(v68 + 4 * v33);
      if ((v34 & (1 << v4)) != 0) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2338, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v31, v32, *((_DWORD *)a2 + 25));
      }
      else {
        *(_DWORD *)(v68 + 4 * v33) = v34 | (1 << v4);
      }
    }
    uint64_t v35 = *(StateMgr **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 56);
    StateMgr::verifyVisible(v35, LineFieldInteger, v27, v28, v29, v30, v31, v32);
    __int16 v36 = (EnvMgr *)*((void *)v35 + 94);
    unsigned int ItemEnvIdMaybeNew = EnvMgr::getItemEnvIdMaybeNew(v36, LineFieldInteger, 1, v37, v38, v39, v40, v41);
    if (v62 <= 1) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2353, (uint64_t)"voc/tsr", 15, (uint64_t)"%u", v42, v43, *((_DWORD *)a2 + 25));
    }
    if (v60 <= 1) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2355, (uint64_t)"voc/tsr", 16, (uint64_t)"%u", v42, v43, *((_DWORD *)a2 + 25));
    }
    DgnTextFile::convertFromEnvValueFormat((uint64_t)v59, (uint64_t **)&v66);
    if (v62) {
      uint64_t v47 = v61;
    }
    else {
      uint64_t v47 = (EnvMgr *)&byte_2140B33BB;
    }
    EnvMgr::setData(v36, ItemEnvIdMaybeNew, v47, v66, v67, 1, v45, v46);
    if (DgnTextFileParser::parseNextLine(a2))
    {
      int v48 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
      DgnString::DgnString((DgnString *)&v55, v48);
      if (v56) {
        uint64_t v49 = v55;
      }
      else {
        uint64_t v49 = &byte_2140B33BB;
      }
      BOOL v50 = strcmp(v49, "StateEnv") != 0;
      DgnString::~DgnString((DgnString *)&v55);
    }
    else
    {
      BOOL v50 = 1;
    }
    int v5 = *(unsigned __int16 *)this;
    DgnString::~DgnString((DgnString *)v57);
    DgnString::~DgnString((DgnString *)v59);
    DgnString::~DgnString((DgnString *)&v61);
    DgnString::~DgnString((DgnString *)v63);
    DgnString::~DgnString((DgnString *)&v64);
    unsigned int v4 = LineFieldInteger;
  }
  while (!v50);
  if (v69 < (int)LineFieldInteger + 1) {
    BitArray::setSize((BitArray *)&v68, LineFieldInteger + 1);
  }
  uint64_t v53 = LineFieldInteger >> 5;
  int v54 = *(_DWORD *)(v68 + 4 * v53);
  if ((v54 & (1 << LineFieldInteger)) != 0) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2383, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v51, v52, *((_DWORD *)a2 + 25));
  }
  else {
    *(_DWORD *)(v68 + 4 * v53) = v54 | (1 << LineFieldInteger);
  }
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v66);
  BitArray::~BitArray((BitArray *)&v68);
}

void sub_213F65100(_Unwind_Exception *a1)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray(v1 - 120);
  BitArray::~BitArray((BitArray *)(v1 - 104));
  _Unwind_Resume(a1);
}

void TextStateRule::parseStateIncludedWordEnv(TextStateRule *this, DgnTextFileParser *a2)
{
  DgnString::DgnString((DgnString *)&v79);
  unsigned int v4 = 0;
  v77 = 0;
  unsigned int v78 = 0;
  int v5 = 127;
  do
  {
    DgnString::DgnString((DgnString *)&v75);
    DgnString::DgnString((DgnString *)v74);
    DgnString::DgnString((DgnString *)&v72);
    DgnString::DgnString((DgnString *)&v70);
    DgnString::DgnString((DgnString *)v68);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v74, LineFieldString);
    if (*((unsigned char *)this + 32))
    {
      uint64_t v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v75, v13);
    }
    uint64_t LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v7, v8, v9, v10, v11, v12);
    uint64_t v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)&v72, v15);
    uint64_t v16 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)&v70, v16);
    uint64_t v17 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v68, v17);
    int v24 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v18, v19, v20, v21, v22, v23);
    if (*((_DWORD *)this + 12)) {
      int v25 = (const char *)*((void *)this + 5);
    }
    else {
      int v25 = &byte_2140B33BB;
    }
    if (v76) {
      uint64_t v26 = v75;
    }
    else {
      uint64_t v26 = &byte_2140B33BB;
    }
    if (strcmp(v25, v26)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2407, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v27, v28, *((_DWORD *)a2 + 25));
    }
    if (v24) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2409, (uint64_t)"voc/tsr", 13, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if ((int)LineFieldInteger <= 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2414, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v27, v28, *((_DWORD *)a2 + 25));
    }
    if ((v4 || v5 != 127) && (LineFieldInteger != v4 || *(unsigned __int16 *)this != v5))
    {
      if (v80 < v4 + 1) {
        BitArray::setSize((BitArray *)&v79, v4 + 1);
      }
      uint64_t v29 = v4 >> 5;
      int v30 = *(_DWORD *)(v79 + 4 * v29);
      if ((v30 & (1 << v4)) != 0) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2436, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v27, v28, *((_DWORD *)a2 + 25));
      }
      else {
        *(_DWORD *)(v79 + 4 * v29) = v30 | (1 << v4);
      }
    }
    if (v73) {
      uint64_t v31 = v72;
    }
    else {
      uint64_t v31 = &byte_2140B33BB;
    }
    uint64_t WordId = GetWordId(*(unsigned __int16 *)this, v31, "StateIncludedWordEnv word", ".tsr", 0, 0, v27, v28);
    unsigned int v4 = LineFieldInteger;
    uint64_t v33 = *(void *)(**(void **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this);
    int v34 = *(WordList **)(v33 + 48);
    uint64_t v35 = *(StateMgr **)(v33 + 56);
    StateMgr::verifyVisible(v35, LineFieldInteger, v36, v37, v38, v39, v40, v41);
    WordList::verifyVisible(v34, WordId, v42, v43, v44, v45, v46, v47);
    int v48 = (EnvMgr *)*((void *)v35 + 95);
    unsigned int ItemPairEnvIdMaybeNew = EnvMgr::getItemPairEnvIdMaybeNew(v48, LineFieldInteger, WordId, 1, v49, v50, v51, v52);
    if (v71 <= 1) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2456, (uint64_t)"voc/tsr", 16, (uint64_t)"%u", v53, v54, *((_DWORD *)a2 + 25));
    }
    if (v69 <= 1) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2458, (uint64_t)"voc/tsr", 24, (uint64_t)"%u", v53, v54, *((_DWORD *)a2 + 25));
    }
    DgnTextFile::convertFromEnvValueFormat((uint64_t)v68, (uint64_t **)&v77);
    if (v71) {
      unsigned int v58 = v70;
    }
    else {
      unsigned int v58 = (EnvMgr *)&byte_2140B33BB;
    }
    EnvMgr::setData(v48, ItemPairEnvIdMaybeNew, v58, v77, v78, 1, v56, v57);
    if (DgnTextFileParser::parseNextLine(a2))
    {
      int v59 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
      DgnString::DgnString((DgnString *)&v66, v59);
      if (v67) {
        unsigned int v60 = v66;
      }
      else {
        unsigned int v60 = &byte_2140B33BB;
      }
      BOOL v61 = strcmp(v60, "StateIncludedWordEnv") != 0;
      DgnString::~DgnString((DgnString *)&v66);
    }
    else
    {
      BOOL v61 = 1;
    }
    int v5 = *(unsigned __int16 *)this;
    DgnString::~DgnString((DgnString *)v68);
    DgnString::~DgnString((DgnString *)&v70);
    DgnString::~DgnString((DgnString *)&v72);
    DgnString::~DgnString((DgnString *)v74);
    DgnString::~DgnString((DgnString *)&v75);
  }
  while (!v61);
  if (v80 < (int)LineFieldInteger + 1) {
    BitArray::setSize((BitArray *)&v79, LineFieldInteger + 1);
  }
  uint64_t v64 = LineFieldInteger >> 5;
  int v65 = *(_DWORD *)(v79 + 4 * v64);
  if ((v65 & (1 << LineFieldInteger)) != 0) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2486, (uint64_t)"voc/tsr", 4, (uint64_t)"%u %.500s %u %u", v62, v63, *((_DWORD *)a2 + 25));
  }
  else {
    *(_DWORD *)(v79 + 4 * v64) = v65 | (1 << LineFieldInteger);
  }
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v77);
  BitArray::~BitArray((BitArray *)&v79);
}

void sub_213F65668(_Unwind_Exception *a1)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray(v1 - 120);
  BitArray::~BitArray((BitArray *)(v1 - 104));
  _Unwind_Resume(a1);
}

void TextStateRule::parseRuleDefinition(TextStateRule *this, DgnTextFileParser *a2)
{
  DgnString::DgnString((DgnString *)&v46);
  while (1)
  {
    DgnString::DgnString((DgnString *)&v44);
    DgnString::DgnString((DgnString *)v43);
    DgnString::DgnString((DgnString *)v41);
    DgnString::DgnString((DgnString *)v39);
    DgnString::DgnString((DgnString *)v37);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v43, LineFieldString);
    if (*((unsigned char *)this + 32))
    {
      uint64_t v11 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v44, v11);
    }
    int LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v5, v6, v7, v8, v9, v10);
    uint64_t v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)v41, v13);
    uint64_t v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v39, v14);
    uint64_t v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v37, v15);
    unsigned int v22 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v16, v17, v18, v19, v20, v21);
    if (*((_DWORD *)this + 12)) {
      uint64_t v23 = (const char *)*((void *)this + 5);
    }
    else {
      uint64_t v23 = &byte_2140B33BB;
    }
    if (v45) {
      int v24 = v44;
    }
    else {
      int v24 = &byte_2140B33BB;
    }
    if (strcmp(v23, v24)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2506, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v28, v29, *((_DWORD *)a2 + 25));
    }
    if (v42 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2508, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    }
    if (v40 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2510, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    }
    if (v38 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2512, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    }
    if (LineFieldInteger <= 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2517, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    }
    if ((v22 & 0x80000000) != 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2522, (uint64_t)"voc/tsr", 18, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    }
    if (v47 <= (unsigned __int16)LineFieldInteger) {
      BitArray::setSize((BitArray *)&v46, (unsigned __int16)LineFieldInteger + 1);
    }
    uint64_t v30 = (unsigned __int16)LineFieldInteger >> 5;
    int v31 = *(_DWORD *)(v46 + 4 * v30);
    if ((v31 & (1 << LineFieldInteger)) != 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2542, (uint64_t)"voc/tsr", 5, (uint64_t)"%u %.500s %u %u", v28, v29, *((_DWORD *)a2 + 25));
    }
    else {
      *(_DWORD *)(v46 + 4 * v30) = v31 | (1 << LineFieldInteger);
    }
    RuleMgr::newRule(*(RuleMgr **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 64), v22, (unsigned __int16)LineFieldInteger, v25, v26, v27, v28, v29);
    if (!DgnTextFileParser::parseNextLine(a2)) {
      break;
    }
    uint64_t v32 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::DgnString((DgnString *)&v35, v32);
    if (v36) {
      uint64_t v33 = v35;
    }
    else {
      uint64_t v33 = &byte_2140B33BB;
    }
    int v34 = strcmp(v33, "RuleDefinition");
    DgnString::~DgnString((DgnString *)&v35);
    DgnString::~DgnString((DgnString *)v37);
    DgnString::~DgnString((DgnString *)v39);
    DgnString::~DgnString((DgnString *)v41);
    DgnString::~DgnString((DgnString *)v43);
    DgnString::~DgnString((DgnString *)&v44);
    if (v34) {
      goto LABEL_34;
    }
  }
  DgnString::~DgnString((DgnString *)v37);
  DgnString::~DgnString((DgnString *)v39);
  DgnString::~DgnString((DgnString *)v41);
  DgnString::~DgnString((DgnString *)v43);
  DgnString::~DgnString((DgnString *)&v44);
LABEL_34:
  BitArray::~BitArray((BitArray *)&v46);
}

void sub_213F65AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va4, a7);
  va_start(va3, a7);
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v15 = va_arg(va3, void);
  uint64_t v17 = va_arg(va3, void);
  va_copy(va4, va3);
  uint64_t v18 = va_arg(va4, void);
  uint64_t v20 = va_arg(va4, void);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va3);
  DgnString::~DgnString((DgnString *)va4);
  BitArray::~BitArray((BitArray *)(v7 - 96));
  _Unwind_Resume(a1);
}

void TextStateRule::parseRuleName(TextStateRule *this, DgnTextFileParser *a2)
{
  DgnString::DgnString((DgnString *)&v47);
  while (1)
  {
    DgnString::DgnString((DgnString *)&v45);
    DgnString::DgnString((DgnString *)v44);
    DgnString::DgnString((DgnString *)&v42);
    DgnString::DgnString((DgnString *)v40);
    DgnString::DgnString((DgnString *)v38);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v44, LineFieldString);
    if (*((unsigned char *)this + 32))
    {
      uint64_t v11 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v45, v11);
    }
    int LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v5, v6, v7, v8, v9, v10);
    uint64_t v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)&v42, v13);
    uint64_t v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v40, v14);
    uint64_t v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v38, v15);
    int v22 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v16, v17, v18, v19, v20, v21);
    if (*((_DWORD *)this + 12)) {
      uint64_t v23 = (const char *)*((void *)this + 5);
    }
    else {
      uint64_t v23 = &byte_2140B33BB;
    }
    if (v46) {
      int v24 = v45;
    }
    else {
      int v24 = &byte_2140B33BB;
    }
    if (strcmp(v23, v24)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2575, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v28, v29, *((_DWORD *)a2 + 25));
    }
    if (v41 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2577, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    }
    if (v39 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2579, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    }
    if (v22) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2581, (uint64_t)"voc/tsr", 13, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    }
    if (LineFieldInteger <= 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2586, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    }
    if (v48 <= (unsigned __int16)LineFieldInteger) {
      BitArray::setSize((BitArray *)&v47, (unsigned __int16)LineFieldInteger + 1);
    }
    uint64_t v30 = (unsigned __int16)LineFieldInteger >> 5;
    int v31 = *(_DWORD *)(v47 + 4 * v30);
    if ((v31 & (1 << LineFieldInteger)) != 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2599, (uint64_t)"voc/tsr", 5, (uint64_t)"%u %.500s %u %u", v28, v29, *((_DWORD *)a2 + 25));
    }
    else {
      *(_DWORD *)(v47 + 4 * v30) = v31 | (1 << LineFieldInteger);
    }
    uint64_t v32 = v43 ? v42 : &byte_2140B33BB;
    RuleMgr::setName(*(RuleMgr **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 64), (unsigned __int16)LineFieldInteger, v32, v25, v26, v27, v28, v29);
    if (!DgnTextFileParser::parseNextLine(a2)) {
      break;
    }
    uint64_t v33 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::DgnString((DgnString *)&v36, v33);
    if (v37) {
      int v34 = v36;
    }
    else {
      int v34 = &byte_2140B33BB;
    }
    int v35 = strcmp(v34, "RuleName");
    DgnString::~DgnString((DgnString *)&v36);
    DgnString::~DgnString((DgnString *)v38);
    DgnString::~DgnString((DgnString *)v40);
    DgnString::~DgnString((DgnString *)&v42);
    DgnString::~DgnString((DgnString *)v44);
    DgnString::~DgnString((DgnString *)&v45);
    if (v35) {
      goto LABEL_35;
    }
  }
  DgnString::~DgnString((DgnString *)v38);
  DgnString::~DgnString((DgnString *)v40);
  DgnString::~DgnString((DgnString *)&v42);
  DgnString::~DgnString((DgnString *)v44);
  DgnString::~DgnString((DgnString *)&v45);
LABEL_35:
  BitArray::~BitArray((BitArray *)&v47);
}

void sub_213F65EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va3, a9);
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v17 = va_arg(va3, void);
  uint64_t v19 = va_arg(va3, void);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va3);
  BitArray::~BitArray((BitArray *)(v9 - 96));
  _Unwind_Resume(a1);
}

void TextStateRule::parseRuleAllowLM(TextStateRule *this, DgnTextFileParser *a2)
{
  DgnString::DgnString((DgnString *)&v46);
  while (1)
  {
    DgnString::DgnString((DgnString *)&v44);
    DgnString::DgnString((DgnString *)v43);
    DgnString::DgnString((DgnString *)v41);
    DgnString::DgnString((DgnString *)v39);
    DgnString::DgnString((DgnString *)v37);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v43, LineFieldString);
    if (*((unsigned char *)this + 32))
    {
      uint64_t v11 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v44, v11);
    }
    int LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v5, v6, v7, v8, v9, v10);
    uint64_t v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)v41, v13);
    uint64_t v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v39, v14);
    uint64_t v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v37, v15);
    unsigned int v22 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v16, v17, v18, v19, v20, v21);
    if (*((_DWORD *)this + 12)) {
      uint64_t v23 = (const char *)*((void *)this + 5);
    }
    else {
      uint64_t v23 = &byte_2140B33BB;
    }
    if (v45) {
      int v24 = v44;
    }
    else {
      int v24 = &byte_2140B33BB;
    }
    if (strcmp(v23, v24)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2629, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v28, v29, *((_DWORD *)a2 + 25));
    }
    if (v42 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2631, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    }
    if (v40 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2633, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    }
    if (v38 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2635, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    }
    if (v22 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2638, (uint64_t)"voc/tsr", 14, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    }
    if (LineFieldInteger <= 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2643, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    }
    if (v47 <= (unsigned __int16)LineFieldInteger) {
      BitArray::setSize((BitArray *)&v46, (unsigned __int16)LineFieldInteger + 1);
    }
    uint64_t v30 = (unsigned __int16)LineFieldInteger >> 5;
    int v31 = *(_DWORD *)(v46 + 4 * v30);
    if ((v31 & (1 << LineFieldInteger)) != 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2656, (uint64_t)"voc/tsr", 5, (uint64_t)"%u %.500s %u %u", v28, v29, *((_DWORD *)a2 + 25));
    }
    else {
      *(_DWORD *)(v46 + 4 * v30) = v31 | (1 << LineFieldInteger);
    }
    RuleMgr::setLMAllowed(*(RuleMgr **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 64), (unsigned __int16)LineFieldInteger, v22 == 1, v25, v26, v27, v28, v29);
    if (!DgnTextFileParser::parseNextLine(a2)) {
      break;
    }
    uint64_t v32 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::DgnString((DgnString *)&v35, v32);
    if (v36) {
      uint64_t v33 = v35;
    }
    else {
      uint64_t v33 = &byte_2140B33BB;
    }
    int v34 = strcmp(v33, "RuleAllowLM");
    DgnString::~DgnString((DgnString *)&v35);
    DgnString::~DgnString((DgnString *)v37);
    DgnString::~DgnString((DgnString *)v39);
    DgnString::~DgnString((DgnString *)v41);
    DgnString::~DgnString((DgnString *)v43);
    DgnString::~DgnString((DgnString *)&v44);
    if (v34) {
      goto LABEL_34;
    }
  }
  DgnString::~DgnString((DgnString *)v37);
  DgnString::~DgnString((DgnString *)v39);
  DgnString::~DgnString((DgnString *)v41);
  DgnString::~DgnString((DgnString *)v43);
  DgnString::~DgnString((DgnString *)&v44);
LABEL_34:
  BitArray::~BitArray((BitArray *)&v46);
}

void sub_213F66330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va3, a9);
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v17 = va_arg(va3, void);
  uint64_t v19 = va_arg(va3, void);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va3);
  BitArray::~BitArray((BitArray *)(v9 - 96));
  _Unwind_Resume(a1);
}

void TextStateRule::parseRuleAllowCoart(TextStateRule *this, DgnTextFileParser *a2)
{
  DgnString::DgnString((DgnString *)&v46);
  while (1)
  {
    DgnString::DgnString((DgnString *)&v44);
    DgnString::DgnString((DgnString *)v43);
    DgnString::DgnString((DgnString *)v41);
    DgnString::DgnString((DgnString *)v39);
    DgnString::DgnString((DgnString *)v37);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v43, LineFieldString);
    if (*((unsigned char *)this + 32))
    {
      uint64_t v11 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v44, v11);
    }
    int LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v5, v6, v7, v8, v9, v10);
    uint64_t v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)v41, v13);
    uint64_t v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v39, v14);
    uint64_t v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v37, v15);
    unsigned int v22 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v16, v17, v18, v19, v20, v21);
    if (*((_DWORD *)this + 12)) {
      uint64_t v23 = (const char *)*((void *)this + 5);
    }
    else {
      uint64_t v23 = &byte_2140B33BB;
    }
    if (v45) {
      int v24 = v44;
    }
    else {
      int v24 = &byte_2140B33BB;
    }
    if (strcmp(v23, v24)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2686, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v28, v29, *((_DWORD *)a2 + 25));
    }
    if (v42 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2688, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    }
    if (v40 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2690, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    }
    if (v38 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2692, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    }
    if (v22 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2695, (uint64_t)"voc/tsr", 14, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    }
    if (LineFieldInteger <= 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2700, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    }
    if (v47 <= (unsigned __int16)LineFieldInteger) {
      BitArray::setSize((BitArray *)&v46, (unsigned __int16)LineFieldInteger + 1);
    }
    uint64_t v30 = (unsigned __int16)LineFieldInteger >> 5;
    int v31 = *(_DWORD *)(v46 + 4 * v30);
    if ((v31 & (1 << LineFieldInteger)) != 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2713, (uint64_t)"voc/tsr", 5, (uint64_t)"%u %.500s %u %u", v28, v29, *((_DWORD *)a2 + 25));
    }
    else {
      *(_DWORD *)(v46 + 4 * v30) = v31 | (1 << LineFieldInteger);
    }
    RuleMgr::setCoartAllowed(*(RuleMgr **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 64), (unsigned __int16)LineFieldInteger, v22 == 1, v25, v26, v27, v28, v29);
    if (!DgnTextFileParser::parseNextLine(a2)) {
      break;
    }
    uint64_t v32 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::DgnString((DgnString *)&v35, v32);
    if (v36) {
      uint64_t v33 = v35;
    }
    else {
      uint64_t v33 = &byte_2140B33BB;
    }
    int v34 = strcmp(v33, "RuleAllowCoart");
    DgnString::~DgnString((DgnString *)&v35);
    DgnString::~DgnString((DgnString *)v37);
    DgnString::~DgnString((DgnString *)v39);
    DgnString::~DgnString((DgnString *)v41);
    DgnString::~DgnString((DgnString *)v43);
    DgnString::~DgnString((DgnString *)&v44);
    if (v34) {
      goto LABEL_34;
    }
  }
  DgnString::~DgnString((DgnString *)v37);
  DgnString::~DgnString((DgnString *)v39);
  DgnString::~DgnString((DgnString *)v41);
  DgnString::~DgnString((DgnString *)v43);
  DgnString::~DgnString((DgnString *)&v44);
LABEL_34:
  BitArray::~BitArray((BitArray *)&v46);
}

void sub_213F66784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va3, a9);
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v17 = va_arg(va3, void);
  uint64_t v19 = va_arg(va3, void);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va3);
  BitArray::~BitArray((BitArray *)(v9 - 96));
  _Unwind_Resume(a1);
}

void TextStateRule::parseRuleAllowPrefiltering(TextStateRule *this, DgnTextFileParser *a2)
{
  DgnString::DgnString((DgnString *)&v46);
  while (1)
  {
    DgnString::DgnString((DgnString *)&v44);
    DgnString::DgnString((DgnString *)v43);
    DgnString::DgnString((DgnString *)v41);
    DgnString::DgnString((DgnString *)v39);
    DgnString::DgnString((DgnString *)v37);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v43, LineFieldString);
    if (*((unsigned char *)this + 32))
    {
      uint64_t v11 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v44, v11);
    }
    int LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v5, v6, v7, v8, v9, v10);
    uint64_t v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)v41, v13);
    uint64_t v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v39, v14);
    uint64_t v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v37, v15);
    unsigned int v22 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v16, v17, v18, v19, v20, v21);
    if (*((_DWORD *)this + 12)) {
      uint64_t v23 = (const char *)*((void *)this + 5);
    }
    else {
      uint64_t v23 = &byte_2140B33BB;
    }
    if (v45) {
      int v24 = v44;
    }
    else {
      int v24 = &byte_2140B33BB;
    }
    if (strcmp(v23, v24)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2744, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v28, v29, *((_DWORD *)a2 + 25));
    }
    if (v42 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2746, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    }
    if (v40 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2748, (uint64_t)"voc/tsr", 11, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    }
    if (v38 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2750, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    }
    if (v22 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2753, (uint64_t)"voc/tsr", 14, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    }
    if (LineFieldInteger <= 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2758, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    }
    if (v47 <= (unsigned __int16)LineFieldInteger) {
      BitArray::setSize((BitArray *)&v46, (unsigned __int16)LineFieldInteger + 1);
    }
    uint64_t v30 = (unsigned __int16)LineFieldInteger >> 5;
    int v31 = *(_DWORD *)(v46 + 4 * v30);
    if ((v31 & (1 << LineFieldInteger)) != 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2771, (uint64_t)"voc/tsr", 5, (uint64_t)"%u %.500s %u %u", v28, v29, *((_DWORD *)a2 + 25));
    }
    else {
      *(_DWORD *)(v46 + 4 * v30) = v31 | (1 << LineFieldInteger);
    }
    RuleMgr::setPrefilteringAllowed(*(RuleMgr **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 64), (unsigned __int16)LineFieldInteger, v22 == 1, v25, v26, v27, v28, v29);
    if (!DgnTextFileParser::parseNextLine(a2)) {
      break;
    }
    uint64_t v32 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::DgnString((DgnString *)&v35, v32);
    if (v36) {
      uint64_t v33 = v35;
    }
    else {
      uint64_t v33 = &byte_2140B33BB;
    }
    int v34 = strcmp(v33, "RuleAllowPrefiltering");
    DgnString::~DgnString((DgnString *)&v35);
    DgnString::~DgnString((DgnString *)v37);
    DgnString::~DgnString((DgnString *)v39);
    DgnString::~DgnString((DgnString *)v41);
    DgnString::~DgnString((DgnString *)v43);
    DgnString::~DgnString((DgnString *)&v44);
    if (v34) {
      goto LABEL_34;
    }
  }
  DgnString::~DgnString((DgnString *)v37);
  DgnString::~DgnString((DgnString *)v39);
  DgnString::~DgnString((DgnString *)v41);
  DgnString::~DgnString((DgnString *)v43);
  DgnString::~DgnString((DgnString *)&v44);
LABEL_34:
  BitArray::~BitArray((BitArray *)&v46);
}

void sub_213F66BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va3, a9);
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v17 = va_arg(va3, void);
  uint64_t v19 = va_arg(va3, void);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va3);
  BitArray::~BitArray((BitArray *)(v9 - 96));
  _Unwind_Resume(a1);
}

uint64_t TextStateRule::parseRuleDescription(TextStateRule *this, DgnTextFileParser *a2)
{
  uint64_t v74 = 0;
  uint64_t v75 = 0;
  DgnString::DgnString((DgnString *)&v72);
  unsigned __int16 v5 = 0;
  LODWORD(v6) = 127;
  do
  {
    DgnString::DgnString((DgnString *)&v70);
    DgnString::DgnString((DgnString *)v69);
    DgnString::DgnString((DgnString *)&v67);
    DgnString::DgnString((DgnString *)&v65);
    DgnString::DgnString((DgnString *)&v63);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v69, LineFieldString);
    if (*((unsigned char *)this + 32))
    {
      uint64_t v14 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v70, v14);
    }
    int LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v8, v9, v10, v11, v12, v13);
    uint64_t v16 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)&v67, v16);
    uint64_t v17 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)&v65, v17);
    uint64_t v18 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)&v63, v18);
    int v25 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v19, v20, v21, v22, v23, v24);
    if (*((_DWORD *)this + 12)) {
      uint64_t v26 = (const char *)*((void *)this + 5);
    }
    else {
      uint64_t v26 = &byte_2140B33BB;
    }
    if (v71) {
      uint64_t v27 = v70;
    }
    else {
      uint64_t v27 = &byte_2140B33BB;
    }
    if (strcmp(v26, v27)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2805, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v28, v29, *((_DWORD *)a2 + 25));
    }
    if (v64 >= 2)
    {
      uint64_t v30 = v68 ? v67 : &byte_2140B33BB;
      if (strcmp(v30, "Word")) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2809, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
      }
    }
    if (v25)
    {
      int v31 = v68 ? v67 : &byte_2140B33BB;
      if (strcmp(v31, "State") && strcmp(v31, "Rule") && strcmp(v31, "Word")) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2815, (uint64_t)"voc/tsr", 13, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
      }
    }
    if (LineFieldInteger <= 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2820, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v28, v29, *((_DWORD *)a2 + 25));
    }
    if (v6 == 127 && !v5)
    {
      LODWORD(v6) = *(unsigned __int16 *)this;
      unsigned __int16 v5 = LineFieldInteger;
    }
    if (v68) {
      uint64_t v32 = v67;
    }
    else {
      uint64_t v32 = &byte_2140B33BB;
    }
    if (!strcmp(v32, "StartOperation"))
    {
      int v40 = 3;
    }
    else
    {
      if (strcmp(v32, "EndOperation"))
      {
        if (strcmp(v32, "Word"))
        {
          if (!strcmp(v32, "State"))
          {
            if (!*((unsigned char *)this + 32))
            {
              uint64_t v44 = v66 ? v65 : &byte_2140B33BB;
              if (*v44) {
                errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2894, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v38, v39, *((_DWORD *)a2 + 25));
              }
            }
            if (v25 <= 0) {
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2900, (uint64_t)"voc/tsr", 18, (uint64_t)"%u", v38, v39, *((_DWORD *)a2 + 25));
            }
            int v40 = 1;
            int WordId = v25;
          }
          else
          {
            if (strcmp(v32, "Rule"))
            {
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2923, (uint64_t)"voc/tsr", 15, (uint64_t)"%u", v38, v39, *((_DWORD *)a2 + 25));
              int v25 = 0;
              int v40 = 3;
              goto LABEL_84;
            }
            if (!*((unsigned char *)this + 32))
            {
              int v45 = v66 ? v65 : &byte_2140B33BB;
              if (*v45) {
                errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2910, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v38, v39, *((_DWORD *)a2 + 25));
              }
            }
            if (v25 <= 0) {
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2916, (uint64_t)"voc/tsr", 18, (uint64_t)"%u", v38, v39, *((_DWORD *)a2 + 25));
            }
            int WordId = WordId & 0xFFFF0000 | (unsigned __int16)v25;
            int v40 = 2;
          }
LABEL_83:
          int v25 = 0;
          goto LABEL_84;
        }
        if ((v25 - 1001) <= 0xFFFFF82E) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2871, (uint64_t)"voc/tsr", 26, (uint64_t)"%u %500s %d", v33, v34, *((_DWORD *)a2 + 25));
        }
        if (!*((unsigned char *)this + 32))
        {
          unsigned int v42 = v66 ? v65 : &byte_2140B33BB;
          if (*v42) {
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2878, (uint64_t)"voc/tsr", 10, (uint64_t)"%u", v33, v34, *((_DWORD *)a2 + 25));
          }
        }
        if (v64) {
          int v43 = v63;
        }
        else {
          int v43 = &byte_2140B33BB;
        }
        int WordId = GetWordId(*(unsigned __int16 *)this, v43, "RuleDescription word", ".tsr", 0, 0, v33, v34);
        int v40 = 4;
        goto LABEL_84;
      }
      int v40 = 0;
    }
    if (v66) {
      unsigned int v41 = v65;
    }
    else {
      unsigned int v41 = &byte_2140B33BB;
    }
    if (!strcmp(v41, "Sequence"))
    {
      int WordId = 0;
      goto LABEL_83;
    }
    if (!strcmp(v41, "Alternative"))
    {
      int v25 = 0;
      int WordId = 1;
    }
    else if (!strcmp(v41, "Repeat"))
    {
      int v25 = 0;
      int WordId = 2;
    }
    else if (!strcmp(v41, "Optional"))
    {
      int v25 = 0;
      int WordId = 3;
    }
    else
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2862, (uint64_t)"voc/tsr", 16, (uint64_t)"%u", v38, v39, *((_DWORD *)a2 + 25));
      int WordId = 0;
      int v25 = 0;
    }
LABEL_84:
    if (*(unsigned __int16 *)this == v6 && v5 == (unsigned __int16)LineFieldInteger)
    {
      uint64_t v46 = v75;
    }
    else
    {
      if (v73 <= v5) {
        BitArray::setSize((BitArray *)&v72, v5 + 1);
      }
      uint64_t v47 = v5 >> 5;
      int v48 = *(_DWORD *)(v72 + 4 * v47);
      if ((v48 & (1 << v5)) != 0) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2938, (uint64_t)"voc/tsr", 5, (uint64_t)"%u %.500s %u %u", v38, v39, *((_DWORD *)a2 + 25));
      }
      else {
        *(_DWORD *)(v72 + 4 * v47) = v48 | (1 << v5);
      }
      RuleMgr::setDesc(*(void *)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * v6) + 64), v5, (uint64_t)&v74, v35, v36, v37, v38, v39);
      uint64_t v46 = 0;
      LODWORD(v75) = 0;
    }
    if (v46 == HIDWORD(v75))
    {
      DgnArray<RuleDesc>::reallocElts((uint64_t)&v74, 1, 1);
      LODWORD(v46) = v75;
    }
    uint64_t v49 = (int *)(v74 + 12 * v46);
    int *v49 = v40;
    v49[1] = v25;
    v49[2] = WordId;
    LODWORD(v75) = v75 + 1;
    if (DgnTextFileParser::parseNextLine(a2))
    {
      uint64_t v50 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
      DgnString::DgnString((DgnString *)&v61, v50);
      if (v62) {
        uint64_t v51 = v61;
      }
      else {
        uint64_t v51 = &byte_2140B33BB;
      }
      BOOL v52 = strcmp(v51, "RuleDescription") != 0;
      DgnString::~DgnString((DgnString *)&v61);
    }
    else
    {
      BOOL v52 = 1;
    }
    uint64_t v6 = *(unsigned __int16 *)this;
    DgnString::~DgnString((DgnString *)&v63);
    DgnString::~DgnString((DgnString *)&v65);
    DgnString::~DgnString((DgnString *)&v67);
    DgnString::~DgnString((DgnString *)v69);
    DgnString::~DgnString((DgnString *)&v70);
    unsigned __int16 v5 = LineFieldInteger;
  }
  while (!v52);
  if (v73 <= (unsigned __int16)LineFieldInteger) {
    BitArray::setSize((BitArray *)&v72, (unsigned __int16)LineFieldInteger + 1);
  }
  uint64_t v58 = (unsigned __int16)LineFieldInteger >> 5;
  int v59 = *(_DWORD *)(v72 + 4 * v58);
  if ((v59 & (1 << LineFieldInteger)) != 0) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2973, (uint64_t)"voc/tsr", 5, (uint64_t)"%u %.500s %u %u", v56, v57, *((_DWORD *)a2 + 25));
  }
  else {
    *(_DWORD *)(v72 + 4 * v58) = v59 | (1 << LineFieldInteger);
  }
  RuleMgr::setDesc(*(void *)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * v6) + 64), (unsigned __int16)LineFieldInteger, (uint64_t)&v74, v53, v54, v55, v56, v57);
  BitArray::~BitArray((BitArray *)&v72);
  return DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v74);
}

void sub_213F674DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va4, a8);
  va_start(va3, a8);
  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v16 = va_arg(va3, void);
  uint64_t v18 = va_arg(va3, void);
  va_copy(va4, va3);
  uint64_t v19 = va_arg(va4, void);
  uint64_t v21 = va_arg(va4, void);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  DgnString::~DgnString((DgnString *)va3);
  DgnString::~DgnString((DgnString *)va4);
  BitArray::~BitArray((BitArray *)(v8 - 120));
  DgnIArray<Utterance *>::~DgnIArray(v8 - 104);
  _Unwind_Resume(a1);
}

void TextStateRule::parseRuleEnv(TextStateRule *this, DgnTextFileParser *a2)
{
  DgnString::DgnString((DgnString *)&v65);
  unsigned __int16 v4 = 0;
  uint64_t v63 = 0;
  unsigned int v64 = 0;
  int v5 = 127;
  do
  {
    DgnString::DgnString((DgnString *)&v61);
    DgnString::DgnString((DgnString *)v60);
    DgnString::DgnString((DgnString *)&v58);
    DgnString::DgnString((DgnString *)v56);
    DgnString::DgnString((DgnString *)v54);
    LineFieldString = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
    DgnString::operator=((DgnString *)v60, LineFieldString);
    if (*((unsigned char *)this + 32))
    {
      uint64_t v13 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 2));
      DgnString::operator=((DgnString *)&v61, v13);
    }
    int LineFieldInteger = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 3), v7, v8, v9, v10, v11, v12);
    uint64_t v15 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 4));
    DgnString::operator=((DgnString *)&v58, v15);
    uint64_t v16 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 5));
    DgnString::operator=((DgnString *)v56, v16);
    uint64_t v17 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 6));
    DgnString::operator=((DgnString *)v54, v17);
    int v24 = DgnTextFileParser::getLineFieldInteger(a2, *((_DWORD *)this + 7), v18, v19, v20, v21, v22, v23);
    if (*((_DWORD *)this + 12)) {
      int v25 = (const char *)*((void *)this + 5);
    }
    else {
      int v25 = &byte_2140B33BB;
    }
    if (v62) {
      uint64_t v26 = v61;
    }
    else {
      uint64_t v26 = &byte_2140B33BB;
    }
    if (strcmp(v25, v26)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 2998, (uint64_t)"voc/tsr", 29, (uint64_t)"%u %500s %500s", v30, v31, *((_DWORD *)a2 + 25));
    }
    if (v55 >= 2) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 3000, (uint64_t)"voc/tsr", 12, (uint64_t)"%u", v30, v31, *((_DWORD *)a2 + 25));
    }
    if (v24) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 3002, (uint64_t)"voc/tsr", 13, (uint64_t)"%u", v30, v31, *((_DWORD *)a2 + 25));
    }
    if (LineFieldInteger <= 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 3007, (uint64_t)"voc/tsr", 17, (uint64_t)"%u", v30, v31, *((_DWORD *)a2 + 25));
    }
    if (!v4 && v5 == 127)
    {
      int v5 = *(unsigned __int16 *)this;
      unsigned __int16 v4 = LineFieldInteger;
    }
    if ((unsigned __int16)LineFieldInteger != v4 || *(unsigned __int16 *)this != v5)
    {
      if (v66 <= v4) {
        BitArray::setSize((BitArray *)&v65, v4 + 1);
      }
      uint64_t v32 = v4 >> 5;
      int v33 = *(_DWORD *)(v65 + 4 * v32);
      if ((v33 & (1 << v4)) != 0) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 3028, (uint64_t)"voc/tsr", 5, (uint64_t)"%u %.500s %u %u", v30, v31, *((_DWORD *)a2 + 25));
      }
      else {
        *(_DWORD *)(v65 + 4 * v32) = v33 | (1 << v4);
      }
    }
    uint64_t v34 = *(RuleMgr **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * *(unsigned __int16 *)this) + 64);
    RuleMgr::verifyRule(v34, (unsigned __int16)LineFieldInteger, 1, v27, v28, v29, v30, v31);
    uint64_t v35 = (EnvMgr *)*((void *)v34 + 10);
    unsigned int ItemEnvIdMaybeNew = EnvMgr::getItemEnvIdMaybeNew(v35, (unsigned __int16)LineFieldInteger, 1, v36, v37, v38, v39, v40);
    if (v59 <= 1) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 3043, (uint64_t)"voc/tsr", 15, (uint64_t)"%u", v41, v42, *((_DWORD *)a2 + 25));
    }
    if (v57 <= 1) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 3045, (uint64_t)"voc/tsr", 16, (uint64_t)"%u", v41, v42, *((_DWORD *)a2 + 25));
    }
    DgnTextFile::convertFromEnvValueFormat((uint64_t)v56, (uint64_t **)&v63);
    if (v59) {
      uint64_t v46 = v58;
    }
    else {
      uint64_t v46 = (EnvMgr *)&byte_2140B33BB;
    }
    EnvMgr::setData(v35, ItemEnvIdMaybeNew, v46, v63, v64, 1, v44, v45);
    if (DgnTextFileParser::parseNextLine(a2))
    {
      uint64_t v47 = DgnTextFileParser::getLineFieldString(a2, *((_DWORD *)this + 1));
      DgnString::DgnString((DgnString *)&v52, v47);
      if (v53) {
        int v48 = v52;
      }
      else {
        int v48 = &byte_2140B33BB;
      }
      BOOL v49 = strcmp(v48, "RuleEnv") != 0;
      DgnString::~DgnString((DgnString *)&v52);
    }
    else
    {
      BOOL v49 = 1;
    }
    int v5 = *(unsigned __int16 *)this;
    DgnString::~DgnString((DgnString *)v54);
    DgnString::~DgnString((DgnString *)v56);
    DgnString::~DgnString((DgnString *)&v58);
    DgnString::~DgnString((DgnString *)v60);
    DgnString::~DgnString((DgnString *)&v61);
    unsigned __int16 v4 = LineFieldInteger;
  }
  while (!v49);
  if (v66 <= (unsigned __int16)LineFieldInteger) {
    BitArray::setSize((BitArray *)&v65, (unsigned __int16)LineFieldInteger + 1);
  }
  if ((*(_DWORD *)(v65 + 4 * ((unsigned __int16)LineFieldInteger >> 5)) >> LineFieldInteger)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 3071, (uint64_t)"voc/tsr", 5, (uint64_t)"%u %.500s %u %u", v50, v51, *((_DWORD *)a2 + 25));
  }
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v63);
  BitArray::~BitArray((BitArray *)&v65);
}

void sub_213F67A44(_Unwind_Exception *a1)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray(v1 - 120);
  BitArray::~BitArray((BitArray *)(v1 - 104));
  _Unwind_Resume(a1);
}

void TextStateRule::loadStatesAndRules(TextStateRule *this, DFile *a2, __int16 a3)
{
  DgnTextFileParser::DgnTextFileParser((DgnTextFileParser *)v9);
  DgnTextFileParser::openDgnTextFileParser((uint64_t)v9, (uint64_t)a2, 0x61u, 1);
  *(_WORD *)this = a3;
  DgnString::DgnString((DgnString *)v8);
  TextStateRule::parseHeader(this, (DgnTextFileParser *)v9);
  TextStateRule::parseBody(this, (DgnTextFileParser *)v9);
  if (DgnTextFileParser::parseNextLine((DgnTextFileParser *)v9)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/tsr.cpp", 3084, (uint64_t)"voc/tsr", 23, (uint64_t)"%u", v6, v7, v9[100]);
  }
  DgnString::~DgnString((DgnString *)v8);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)v9);
}

void sub_213F67B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)va);
  _Unwind_Resume(a1);
}

void TextStateRule::saveStatesAndRules(TextStateRule *this, DFile *a2, unsigned int a3)
{
  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v629);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v629, (uint64_t)a2, 0x61u, 1);
  uint64_t v627 = 0;
  uint64_t v628 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v629, sTSR_Versions, (uint64_t)&v627, v5, v6, v7, v8, v9);
  DgnTextFileWriter::setFileType((uint64_t)v629, "TSR", (void *)(v627 + 8 * (v628 - 1)));
  *((_DWORD *)this + 1) = 0;
  *(_OWORD *)((char *)this + 12) = xmmword_2140A6240;
  *((_DWORD *)this + 7) = 5;
  v625 = 0;
  uint64_t v626 = 0;
  v619 = 0;
  unint64_t v10 = realloc_array(0, &v619, 0x18uLL, 0, 0, 1);
  v625 = v619;
  LODWORD(v626) = 6;
  HIDWORD(v626) = v10 >> 2;
  DgnArray<DgnString>::DgnArray(v624, 6);
  DgnString::operator=((DgnString *)(v624[0] + 16 * *((unsigned int *)this + 1)), "Type");
  v625[*((unsigned int *)this + 1)] = 0;
  DgnString::operator=((DgnString *)(v624[0] + 16 * *((unsigned int *)this + 3)), "IntValue1");
  v625[*((unsigned int *)this + 3)] = 1;
  DgnString::operator=((DgnString *)(v624[0] + 16 * *((unsigned int *)this + 4)), "StrValue1");
  v625[*((unsigned int *)this + 4)] = 0;
  DgnString::operator=((DgnString *)(v624[0] + 16 * *((unsigned int *)this + 5)), "StrValue2");
  v625[*((unsigned int *)this + 5)] = 0;
  DgnString::operator=((DgnString *)(v624[0] + 16 * *((unsigned int *)this + 6)), "StrValue3");
  v625[*((unsigned int *)this + 6)] = 0;
  DgnString::operator=((DgnString *)(v624[0] + 16 * *((unsigned int *)this + 7)), "IntValue2");
  v625[*((unsigned int *)this + 7)] = 1;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v629, (uint64_t)&v625, (uint64_t)v624);
  uint64_t v11 = *(RuleMgr **)(**(void **)VocMgr::smpVocMgr + 8 * a3);
  uint64_t v12 = *(unsigned __int16 *)(*((void *)v11 + 8) + 32);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v629, "MaxStateId", *(int *)(*((void *)v11 + 7) + 720));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v629, "MaxRuleId", v12);
  uint64_t v13 = (const StateMgr *)*((void *)v11 + 7);
  ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v13);
  while (v623)
  {
    uint64_t v20 = v622;
    uint64_t v21 = v620;
    int v22 = *(_DWORD *)(v620 + 4 * v622);
    if (v22)
    {
      int Parent = StateMgr::getParent(v13, *(_DWORD *)(v620 + 4 * v622), v14, v15, v16, v17, v18, v19);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "StateDefinition");
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v22);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), &byte_2140B33BB);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_2140B33BB);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_2140B33BB);
      if (Parent) {
        int v24 = Parent;
      }
      else {
        int v24 = -1;
      }
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 7), v24);
      DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v629);
      uint64_t v20 = v622;
      uint64_t v21 = v620;
      unsigned int v25 = *(_DWORD *)(v620 + 4 * v622);
    }
    else
    {
      unsigned int v25 = 0;
    }
    *(_DWORD *)(v21 + 4 * v20) = 0;
    unsigned int v26 = v622 + 1;
    BOOL v27 = v623 == 1;
    LODWORD(v622) = v622 + 1;
    --v623;
    if (v27)
    {
      uint64_t v622 = 0;
    }
    else
    {
      BOOL v28 = v26 >= v621;
      unsigned int v29 = v26 - v621;
      if (v28) {
        LODWORD(v622) = v29;
      }
    }
    ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v25, v14, v15, v16, v17, v18, v19);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v13);
  while (v623)
  {
    uint64_t v36 = v622;
    uint64_t v37 = v620;
    unsigned int v38 = *(_DWORD *)(v620 + 4 * v622);
    if (v38)
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "StateName");
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v38);
      unsigned int v39 = *((_DWORD *)this + 4);
      Name = (char *)StateMgr::getName(v13, v38, v40, v41, v42, v43, v44, v45);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, v39, Name);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_2140B33BB);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_2140B33BB);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 7), 0);
      DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v629);
      uint64_t v36 = v622;
      uint64_t v37 = v620;
      unsigned int v47 = *(_DWORD *)(v620 + 4 * v622);
    }
    else
    {
      unsigned int v47 = 0;
    }
    *(_DWORD *)(v37 + 4 * v36) = 0;
    unsigned int v48 = v622 + 1;
    BOOL v27 = v623 == 1;
    LODWORD(v622) = v622 + 1;
    --v623;
    if (v27)
    {
      uint64_t v622 = 0;
    }
    else
    {
      BOOL v28 = v48 >= v621;
      unsigned int v49 = v48 - v621;
      if (v28) {
        LODWORD(v622) = v49;
      }
    }
    ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v47, v30, v31, v32, v33, v34, v35);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v13);
  while (v623)
  {
    uint64_t v56 = v622;
    uint64_t v57 = v620;
    unsigned int v58 = *(_DWORD *)(v620 + 4 * v622);
    if (v58)
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "StateAllowLM");
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v58);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), &byte_2140B33BB);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_2140B33BB);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_2140B33BB);
      unsigned int v59 = *((_DWORD *)this + 7);
      BOOL LMAllowed = StateMgr::getLMAllowed(v13, v58, 1, v60, v61, v62, v63, v64);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, v59, LMAllowed);
      DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v629);
      uint64_t v56 = v622;
      uint64_t v57 = v620;
      unsigned int v66 = *(_DWORD *)(v620 + 4 * v622);
    }
    else
    {
      unsigned int v66 = 0;
    }
    *(_DWORD *)(v57 + 4 * v56) = 0;
    unsigned int v67 = v622 + 1;
    BOOL v27 = v623 == 1;
    LODWORD(v622) = v622 + 1;
    --v623;
    if (v27)
    {
      uint64_t v622 = 0;
    }
    else
    {
      BOOL v28 = v67 >= v621;
      unsigned int v68 = v67 - v621;
      if (v28) {
        LODWORD(v622) = v68;
      }
    }
    ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v66, v50, v51, v52, v53, v54, v55);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  v610 = v11;
  uint64_t v69 = *((void *)v11 + 9);
  v607 = v13;
  ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v13);
  while (v623)
  {
    uint64_t v76 = v622;
    uint64_t v77 = v620;
    int v78 = *(_DWORD *)(v620 + 4 * v622);
    if (v78)
    {
      if (StateMgr::getWeights(v607, *(_DWORD *)(v620 + 4 * v622), 1, v71, v72, v73, v74, v75) == 0xFFFF)uint64_t v79 = 0; {
      else
      }
        uint64_t v79 = (*(uint64_t (**)(uint64_t))(*(void *)v69 + 672))(v69);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "StateWeightsName");
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v78);
      if (v79 && *(_DWORD *)(v79 + 8)) {
        v81 = *(char **)v79;
      }
      else {
        v81 = &byte_2140B33BB;
      }
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), v81);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_2140B33BB);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_2140B33BB);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 7), 0);
      DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v629);
      uint64_t v76 = v622;
      uint64_t v77 = v620;
      unsigned int v80 = *(_DWORD *)(v620 + 4 * v622);
    }
    else
    {
      unsigned int v80 = 0;
    }
    *(_DWORD *)(v77 + 4 * v76) = 0;
    unsigned int v82 = v622 + 1;
    BOOL v27 = v623 == 1;
    LODWORD(v622) = v622 + 1;
    --v623;
    if (v27)
    {
      uint64_t v622 = 0;
    }
    else
    {
      BOOL v28 = v82 >= v621;
      unsigned int v83 = v82 - v621;
      if (v28) {
        LODWORD(v622) = v83;
      }
    }
    ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v80, v70, v71, v72, v73, v74, v75);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  unsigned int v84 = v607;
  ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v607);
  while (v623)
  {
    uint64_t v91 = v622;
    uint64_t v92 = v620;
    unsigned int v93 = *(_DWORD *)(v620 + 4 * v622);
    if (v93)
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "StateWordPenalty");
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v93);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), &byte_2140B33BB);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_2140B33BB);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_2140B33BB);
      unsigned int v94 = *((_DWORD *)this + 7);
      int WordPenalty = StateMgr::getWordPenalty(v607, v93, 1, v95, v96, v97, v98, v99);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, v94, WordPenalty);
      DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v629);
      uint64_t v91 = v622;
      uint64_t v92 = v620;
      unsigned int v101 = *(_DWORD *)(v620 + 4 * v622);
    }
    else
    {
      unsigned int v101 = 0;
    }
    *(_DWORD *)(v92 + 4 * v91) = 0;
    unsigned int v102 = v622 + 1;
    BOOL v27 = v623 == 1;
    LODWORD(v622) = v622 + 1;
    --v623;
    if (v27)
    {
      uint64_t v622 = 0;
    }
    else
    {
      BOOL v28 = v102 >= v621;
      unsigned int v103 = v102 - v621;
      if (v28) {
        LODWORD(v622) = v103;
      }
    }
    ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v101, v85, v86, v87, v88, v89, v90);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v607);
  while (v623)
  {
    uint64_t v110 = v622;
    uint64_t v111 = v620;
    uint64_t v112 = *(unsigned int *)(v620 + 4 * v622);
    if (v112)
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "StateMinStartTime");
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v112);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), &byte_2140B33BB);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_2140B33BB);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_2140B33BB);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 7), *(_DWORD *)(*((void *)v607 + 50) + 4 * v112));
      DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v629);
      uint64_t v110 = v622;
      uint64_t v111 = v620;
      unsigned int v113 = *(_DWORD *)(v620 + 4 * v622);
    }
    else
    {
      unsigned int v113 = 0;
    }
    *(_DWORD *)(v111 + 4 * v110) = 0;
    unsigned int v114 = v622 + 1;
    BOOL v27 = v623 == 1;
    LODWORD(v622) = v622 + 1;
    --v623;
    if (v27)
    {
      uint64_t v622 = 0;
    }
    else
    {
      BOOL v28 = v114 >= v621;
      unsigned int v115 = v114 - v621;
      if (v28) {
        LODWORD(v622) = v115;
      }
    }
    ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v113, v104, v105, v106, v107, v108, v109);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v607);
  while (v623)
  {
    uint64_t v122 = v622;
    uint64_t v123 = v620;
    uint64_t v124 = *(unsigned int *)(v620 + 4 * v622);
    if (v124)
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "StateMaxStartTime");
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v124);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), &byte_2140B33BB);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_2140B33BB);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_2140B33BB);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 7), *(_DWORD *)(*((void *)v607 + 52) + 4 * v124));
      DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v629);
      uint64_t v122 = v622;
      uint64_t v123 = v620;
      unsigned int v125 = *(_DWORD *)(v620 + 4 * v622);
    }
    else
    {
      unsigned int v125 = 0;
    }
    *(_DWORD *)(v123 + 4 * v122) = 0;
    unsigned int v126 = v622 + 1;
    BOOL v27 = v623 == 1;
    LODWORD(v622) = v622 + 1;
    --v623;
    if (v27)
    {
      uint64_t v622 = 0;
    }
    else
    {
      BOOL v28 = v126 >= v621;
      unsigned int v127 = v126 - v621;
      if (v28) {
        LODWORD(v622) = v127;
      }
    }
    ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v125, v116, v117, v118, v119, v120, v121);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v607);
  while (v623)
  {
    uint64_t v134 = v622;
    uint64_t v135 = v620;
    uint64_t v136 = *(unsigned int *)(v620 + 4 * v622);
    if (v136)
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "StateMinEndTime");
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v136);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), &byte_2140B33BB);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_2140B33BB);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_2140B33BB);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 7), *(_DWORD *)(*((void *)v607 + 54) + 4 * v136));
      DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v629);
      uint64_t v134 = v622;
      uint64_t v135 = v620;
      unsigned int v137 = *(_DWORD *)(v620 + 4 * v622);
    }
    else
    {
      unsigned int v137 = 0;
    }
    *(_DWORD *)(v135 + 4 * v134) = 0;
    unsigned int v138 = v622 + 1;
    BOOL v27 = v623 == 1;
    LODWORD(v622) = v622 + 1;
    --v623;
    if (v27)
    {
      uint64_t v622 = 0;
    }
    else
    {
      BOOL v28 = v138 >= v621;
      unsigned int v139 = v138 - v621;
      if (v28) {
        LODWORD(v622) = v139;
      }
    }
    ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v137, v128, v129, v130, v131, v132, v133);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v607);
  while (v623)
  {
    uint64_t v146 = v622;
    uint64_t v147 = v620;
    uint64_t v148 = *(unsigned int *)(v620 + 4 * v622);
    if (v148)
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "StateMaxEndTime");
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v148);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), &byte_2140B33BB);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_2140B33BB);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_2140B33BB);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 7), *(_DWORD *)(*((void *)v607 + 56) + 4 * v148));
      DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v629);
      uint64_t v146 = v622;
      uint64_t v147 = v620;
      unsigned int v149 = *(_DWORD *)(v620 + 4 * v622);
    }
    else
    {
      unsigned int v149 = 0;
    }
    *(_DWORD *)(v147 + 4 * v146) = 0;
    unsigned int v150 = v622 + 1;
    BOOL v27 = v623 == 1;
    LODWORD(v622) = v622 + 1;
    --v623;
    if (v27)
    {
      uint64_t v622 = 0;
    }
    else
    {
      BOOL v28 = v150 >= v621;
      unsigned int v151 = v150 - v621;
      if (v28) {
        LODWORD(v622) = v151;
      }
    }
    ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v149, v140, v141, v142, v143, v144, v145);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v607);
  while (v623)
  {
    uint64_t v158 = v622;
    uint64_t v159 = v620;
    unsigned int v160 = *(_DWORD *)(v620 + 4 * v622);
    if (v160)
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "StateCollapsible");
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v160);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), &byte_2140B33BB);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_2140B33BB);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_2140B33BB);
      unsigned int v161 = *((_DWORD *)this + 7);
      BOOL Collapsible = StateMgr::getCollapsible(v607, v160, v162, v163, v164, v165, v166, v167);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, v161, Collapsible);
      DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v629);
      uint64_t v158 = v622;
      uint64_t v159 = v620;
      unsigned int v169 = *(_DWORD *)(v620 + 4 * v622);
    }
    else
    {
      unsigned int v169 = 0;
    }
    *(_DWORD *)(v159 + 4 * v158) = 0;
    unsigned int v170 = v622 + 1;
    BOOL v27 = v623 == 1;
    LODWORD(v622) = v622 + 1;
    --v623;
    if (v27)
    {
      uint64_t v622 = 0;
    }
    else
    {
      BOOL v28 = v170 >= v621;
      unsigned int v171 = v170 - v621;
      if (v28) {
        LODWORD(v622) = v171;
      }
    }
    ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v169, v152, v153, v154, v155, v156, v157);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v607);
  while (v623)
  {
    uint64_t v178 = v622;
    uint64_t v179 = v620;
    unsigned int v180 = *(_DWORD *)(v620 + 4 * v622);
    if (v180)
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "StateAllowCoart");
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v180);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), &byte_2140B33BB);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_2140B33BB);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_2140B33BB);
      unsigned int v181 = *((_DWORD *)this + 7);
      BOOL CoartAllowed = StateMgr::getCoartAllowed(v607, v180, 1, v182, v183, v184, v185, v186);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, v181, CoartAllowed);
      DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v629);
      uint64_t v178 = v622;
      uint64_t v179 = v620;
      unsigned int v188 = *(_DWORD *)(v620 + 4 * v622);
    }
    else
    {
      unsigned int v188 = 0;
    }
    *(_DWORD *)(v179 + 4 * v178) = 0;
    unsigned int v189 = v622 + 1;
    BOOL v27 = v623 == 1;
    LODWORD(v622) = v622 + 1;
    --v623;
    if (v27)
    {
      uint64_t v622 = 0;
    }
    else
    {
      BOOL v28 = v189 >= v621;
      unsigned int v190 = v189 - v621;
      if (v28) {
        LODWORD(v622) = v190;
      }
    }
    ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v188, v172, v173, v174, v175, v176, v177);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v607);
  while (v623)
  {
    uint64_t v197 = v622;
    uint64_t v198 = v620;
    unsigned int v199 = *(_DWORD *)(v620 + 4 * v622);
    if (v199)
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "StateAllowSkip");
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v199);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), &byte_2140B33BB);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_2140B33BB);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_2140B33BB);
      unsigned int v200 = *((_DWORD *)this + 7);
      BOOL SkipAllowed = StateMgr::getSkipAllowed(v607, v199, 1, v201, v202, v203, v204, v205);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, v200, SkipAllowed);
      DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v629);
      uint64_t v197 = v622;
      uint64_t v198 = v620;
      unsigned int v207 = *(_DWORD *)(v620 + 4 * v622);
    }
    else
    {
      unsigned int v207 = 0;
    }
    *(_DWORD *)(v198 + 4 * v197) = 0;
    unsigned int v208 = v622 + 1;
    BOOL v27 = v623 == 1;
    LODWORD(v622) = v622 + 1;
    --v623;
    if (v27)
    {
      uint64_t v622 = 0;
    }
    else
    {
      BOOL v28 = v208 >= v621;
      unsigned int v209 = v208 - v621;
      if (v28) {
        LODWORD(v622) = v209;
      }
    }
    ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v207, v191, v192, v193, v194, v195, v196);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v607);
  while (v623)
  {
    uint64_t v216 = v622;
    uint64_t v217 = v620;
    unsigned int v218 = *(_DWORD *)(v620 + 4 * v622);
    if (v218)
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "StateAllowLeftWordBoundary");
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v218);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), &byte_2140B33BB);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_2140B33BB);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_2140B33BB);
      unsigned int v219 = *((_DWORD *)this + 7);
      BOOL LeftWBAllowed = StateMgr::getLeftWBAllowed(v607, v218, 1, v220, v221, v222, v223, v224);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, v219, LeftWBAllowed);
      DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v629);
      uint64_t v216 = v622;
      uint64_t v217 = v620;
      unsigned int v226 = *(_DWORD *)(v620 + 4 * v622);
    }
    else
    {
      unsigned int v226 = 0;
    }
    *(_DWORD *)(v217 + 4 * v216) = 0;
    unsigned int v227 = v622 + 1;
    BOOL v27 = v623 == 1;
    LODWORD(v622) = v622 + 1;
    --v623;
    if (v27)
    {
      uint64_t v622 = 0;
    }
    else
    {
      BOOL v28 = v227 >= v621;
      unsigned int v228 = v227 - v621;
      if (v28) {
        LODWORD(v622) = v228;
      }
    }
    ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v226, v210, v211, v212, v213, v214, v215);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v607);
  while (v623)
  {
    uint64_t v235 = v622;
    uint64_t v236 = v620;
    unsigned int v237 = *(_DWORD *)(v620 + 4 * v622);
    if (v237)
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "StateAllowRightWordBoundary");
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v237);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), &byte_2140B33BB);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_2140B33BB);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_2140B33BB);
      unsigned int v238 = *((_DWORD *)this + 7);
      BOOL RightWBAllowed = StateMgr::getRightWBAllowed(v607, v237, 1, v239, v240, v241, v242, v243);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, v238, RightWBAllowed);
      DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v629);
      uint64_t v235 = v622;
      uint64_t v236 = v620;
      unsigned int v245 = *(_DWORD *)(v620 + 4 * v622);
    }
    else
    {
      unsigned int v245 = 0;
    }
    *(_DWORD *)(v236 + 4 * v235) = 0;
    unsigned int v246 = v622 + 1;
    BOOL v27 = v623 == 1;
    LODWORD(v622) = v622 + 1;
    --v623;
    if (v27)
    {
      uint64_t v622 = 0;
    }
    else
    {
      BOOL v28 = v246 >= v621;
      unsigned int v247 = v246 - v621;
      if (v28) {
        LODWORD(v622) = v247;
      }
    }
    ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v245, v229, v230, v231, v232, v233, v234);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v607);
  while (v623)
  {
    uint64_t v254 = v622;
    uint64_t v255 = v620;
    unsigned int v256 = *(_DWORD *)(v620 + 4 * v622);
    if (v256)
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "StateAllowPrefiltering");
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v256);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), &byte_2140B33BB);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_2140B33BB);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_2140B33BB);
      unsigned int v257 = *((_DWORD *)this + 7);
      BOOL PrefilteringAllowed = StateMgr::getPrefilteringAllowed(v607, v256, v258, v259, v260, v261, v262, v263);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, v257, PrefilteringAllowed);
      DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v629);
      uint64_t v254 = v622;
      uint64_t v255 = v620;
      unsigned int v265 = *(_DWORD *)(v620 + 4 * v622);
    }
    else
    {
      unsigned int v265 = 0;
    }
    *(_DWORD *)(v255 + 4 * v254) = 0;
    unsigned int v266 = v622 + 1;
    BOOL v27 = v623 == 1;
    LODWORD(v622) = v622 + 1;
    --v623;
    if (v27)
    {
      uint64_t v622 = 0;
    }
    else
    {
      BOOL v28 = v266 >= v621;
      unsigned int v267 = v266 - v621;
      if (v28) {
        LODWORD(v622) = v267;
      }
    }
    ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v265, v248, v249, v250, v251, v252, v253);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v607);
  while (v623)
  {
    uint64_t v274 = v622;
    uint64_t v275 = v620;
    unsigned int v276 = *(_DWORD *)(v620 + 4 * v622);
    if (v276)
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "StateAllowEndOfUtt");
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v276);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), &byte_2140B33BB);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_2140B33BB);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_2140B33BB);
      unsigned int v277 = *((_DWORD *)this + 7);
      BOOL EndOfUtteranceAllowed = StateMgr::getEndOfUtteranceAllowed(v607, v276, v278, v279, v280, v281, v282, v283);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, v277, EndOfUtteranceAllowed);
      DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v629);
      uint64_t v274 = v622;
      uint64_t v275 = v620;
      unsigned int v285 = *(_DWORD *)(v620 + 4 * v622);
    }
    else
    {
      unsigned int v285 = 0;
    }
    *(_DWORD *)(v275 + 4 * v274) = 0;
    unsigned int v286 = v622 + 1;
    BOOL v27 = v623 == 1;
    LODWORD(v622) = v622 + 1;
    --v623;
    if (v27)
    {
      uint64_t v622 = 0;
    }
    else
    {
      BOOL v28 = v286 >= v621;
      unsigned int v287 = v286 - v621;
      if (v28) {
        LODWORD(v622) = v287;
      }
    }
    ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v285, v268, v269, v270, v271, v272, v273);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v607);
  while (v623)
  {
    int v294 = *(_DWORD *)(v620 + 4 * v622);
    if (v294)
    {
      int WordAliasState = StateMgr::getWordAliasState(v607, *(_DWORD *)(v620 + 4 * v622), 1, v289, v290, v291, v292, v293);
      if (WordAliasState)
      {
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "StateAliasState");
        DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v294);
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), &byte_2140B33BB);
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_2140B33BB);
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_2140B33BB);
        DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 7), WordAliasState);
        DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v629);
      }
    }
    unsigned int v296 = *(_DWORD *)(v620 + 4 * v622);
    *(_DWORD *)(v620 + 4 * v622) = 0;
    unsigned int v297 = v622 + 1;
    BOOL v27 = v623 == 1;
    LODWORD(v622) = v622 + 1;
    --v623;
    if (v27)
    {
      uint64_t v622 = 0;
    }
    else
    {
      BOOL v28 = v297 >= v621;
      unsigned int v298 = v297 - v621;
      if (v28) {
        LODWORD(v622) = v298;
      }
    }
    ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v296, v288, v289, v290, v291, v292, v293);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v607);
  while (v623)
  {
    int v305 = *(_DWORD *)(v620 + 4 * v622);
    if (v305)
    {
      int PrecedingNonAcousticWordState = StateMgr::getPrecedingNonAcousticWordState(v607, *(_DWORD *)(v620 + 4 * v622), v299, v300, v301, v302, v303, v304);
      if (PrecedingNonAcousticWordState)
      {
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "StatePrecedingNonAcousticWordState");
        DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v305);
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), &byte_2140B33BB);
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_2140B33BB);
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_2140B33BB);
        DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 7), PrecedingNonAcousticWordState);
        DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v629);
      }
    }
    unsigned int v307 = *(_DWORD *)(v620 + 4 * v622);
    *(_DWORD *)(v620 + 4 * v622) = 0;
    unsigned int v308 = v622 + 1;
    BOOL v27 = v623 == 1;
    LODWORD(v622) = v622 + 1;
    --v623;
    if (v27)
    {
      uint64_t v622 = 0;
    }
    else
    {
      BOOL v28 = v308 >= v621;
      unsigned int v309 = v308 - v621;
      if (v28) {
        LODWORD(v622) = v309;
      }
    }
    ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v307, v299, v300, v301, v302, v303, v304);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v607);
  while (v623)
  {
    uint64_t v316 = v622;
    uint64_t v317 = v620;
    unsigned int v318 = *(_DWORD *)(v620 + 4 * v622);
    if (v318)
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "StatePrecedingNonAcousticWordRequired");
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v318);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), &byte_2140B33BB);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_2140B33BB);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_2140B33BB);
      unsigned int v319 = *((_DWORD *)this + 7);
      BOOL PrecedingNonAcousticWordRequired = StateMgr::getPrecedingNonAcousticWordRequired(v607, v318, v320, v321, v322, v323, v324, v325);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, v319, PrecedingNonAcousticWordRequired);
      DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v629);
      uint64_t v316 = v622;
      uint64_t v317 = v620;
      unsigned int v327 = *(_DWORD *)(v620 + 4 * v622);
    }
    else
    {
      unsigned int v327 = 0;
    }
    *(_DWORD *)(v317 + 4 * v316) = 0;
    unsigned int v328 = v622 + 1;
    BOOL v27 = v623 == 1;
    LODWORD(v622) = v622 + 1;
    --v623;
    if (v27)
    {
      uint64_t v622 = 0;
    }
    else
    {
      BOOL v28 = v328 >= v621;
      unsigned int v329 = v328 - v621;
      if (v28) {
        LODWORD(v622) = v329;
      }
    }
    ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v327, v310, v311, v312, v313, v314, v315);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v607);
  while (v623)
  {
    int v336 = *(_DWORD *)(v620 + 4 * v622);
    if (v336)
    {
      uint64_t CollWords = StateMgr::getCollWords(v607, *(_DWORD *)(v620 + 4 * v622), 0xFFFFu, 1, v332, v333, v334, v335);
      unint64_t v338 = *(unsigned int *)(CollWords + 8);
      if (v338)
      {
        for (unint64_t i = 0; i < v338; ++i)
        {
          uint64_t v340 = *(unsigned int *)(*(void *)CollWords + 4 * i);
          uint64_t v341 = *((void *)v610 + 6);
          if (*(_DWORD *)(v341 + 388) > v340
            && *(unsigned char *)(*(void *)(v341 + 104) + v340)
            && *(_DWORD *)(*(void *)(v341 + 256) + 4 * v340) == v340)
          {
            WordName = GetWordName(a3, v340, 0, 0, v332, v333, v334, v335);
            DgnString::DgnString((DgnString *)&v617, WordName);
            DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "StateIncludedWord");
            DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v336);
            if (v618) {
              v343 = (char *)v617;
            }
            else {
              v343 = &byte_2140B33BB;
            }
            DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), v343);
            DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_2140B33BB);
            DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_2140B33BB);
            DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 7), 0);
            DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v629);
            DgnString::~DgnString((DgnString *)&v617);
            unint64_t v338 = *(unsigned int *)(CollWords + 8);
          }
        }
      }
    }
    unsigned int v344 = *(_DWORD *)(v620 + 4 * v622);
    *(_DWORD *)(v620 + 4 * v622) = 0;
    unsigned int v345 = v622 + 1;
    BOOL v27 = v623 == 1;
    LODWORD(v622) = v622 + 1;
    --v623;
    if (v27)
    {
      uint64_t v622 = 0;
    }
    else
    {
      BOOL v28 = v345 >= v621;
      unsigned int v346 = v345 - v621;
      if (v28) {
        LODWORD(v622) = v346;
      }
    }
    ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v344, v330, v331, v332, v333, v334, v335);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v607);
  while (v623)
  {
    int v353 = *(_DWORD *)(v620 + 4 * v622);
    if (v353)
    {
      uint64_t StateTransition = StateMgr::getStateTransition(v607, *(_DWORD *)(v620 + 4 * v622), 1, v348, v349, v350, v351, v352);
      if (*(_DWORD *)(StateTransition + 8))
      {
        unint64_t v355 = 0;
        do
        {
          int v356 = *(_DWORD *)(*(void *)StateTransition + 4 * v355);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "StateTransitionState");
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v353);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), &byte_2140B33BB);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_2140B33BB);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_2140B33BB);
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 7), v356);
          DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v629);
          ++v355;
        }
        while (v355 < *(unsigned int *)(StateTransition + 8));
      }
    }
    unsigned int v357 = *(_DWORD *)(v620 + 4 * v622);
    *(_DWORD *)(v620 + 4 * v622) = 0;
    unsigned int v358 = v622 + 1;
    BOOL v27 = v623 == 1;
    LODWORD(v622) = v622 + 1;
    --v623;
    if (v27)
    {
      uint64_t v622 = 0;
    }
    else
    {
      BOOL v28 = v358 >= v621;
      unsigned int v359 = v358 - v621;
      if (v28) {
        LODWORD(v622) = v359;
      }
    }
    ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v357, v347, v348, v349, v350, v351, v352);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  v360 = (CollMgr *)*((void *)v610 + 2);
  ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v607);
  while (v623)
  {
    uint64_t v367 = v622;
    uint64_t v368 = v620;
    int v369 = *(_DWORD *)(v620 + 4 * v622);
    if (v369)
    {
      uint64_t Colls = StateMgr::getColls(v84, *(_DWORD *)(v620 + 4 * v622), 1, v362, v363, v364, v365, v366);
      v617 = 0;
      uint64_t v618 = 0;
      DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)&v617, (uint64_t *)Colls, 0, *(_DWORD *)(Colls + 8));
      if (v618)
      {
        unint64_t v376 = 0;
        do
        {
          unsigned int v377 = *((unsigned __int16 *)v617 + v376);
          CollationName = "_IDENTITY";
          if (v377 != 65534) {
            CollationName = (const char *)CollMgr::getCollationName(v360, v377, (uint64_t)"_IDENTITY", v371, v372, v373, v374, v375);
          }
          DgnString::DgnString((DgnString *)&v615, CollationName);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "StateAllowedCollations");
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v369);
          if (v616) {
            v379 = v615;
          }
          else {
            v379 = &byte_2140B33BB;
          }
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), v379);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_2140B33BB);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_2140B33BB);
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 7), 0);
          DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v629);
          DgnString::~DgnString((DgnString *)&v615);
          ++v376;
        }
        while (v376 < v618);
      }
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v617);
      uint64_t v367 = v622;
      uint64_t v368 = v620;
      unsigned int v380 = *(_DWORD *)(v620 + 4 * v622);
      unsigned int v84 = v607;
    }
    else
    {
      unsigned int v380 = 0;
    }
    *(_DWORD *)(v368 + 4 * v367) = 0;
    unsigned int v381 = v622 + 1;
    BOOL v27 = v623 == 1;
    LODWORD(v622) = v622 + 1;
    --v623;
    if (v27)
    {
      uint64_t v622 = 0;
    }
    else
    {
      BOOL v28 = v381 >= v621;
      unsigned int v382 = v381 - v621;
      if (v28) {
        LODWORD(v622) = v382;
      }
    }
    ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v380, v361, v362, v363, v364, v365, v366);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  v383 = (EnvMgr *)*((void *)v84 + 94);
  v617 = 0;
  uint64_t v618 = 0;
  EnvMgr::getItemsWithEnv((unint64_t)v383, (uint64_t)&v617);
  DgnString::DgnString((DgnString *)&v615);
  if (v618)
  {
    unint64_t v384 = 0;
    do
    {
      unsigned int v385 = *((_DWORD *)v617 + v384);
      unsigned int ItemEnvId = EnvMgr::getItemEnvId(v383, v385);
      uint64_t NameIds = EnvMgr::getNameIds(v383, ItemEnvId, v387, v388, v389, v390, v391, v392);
      uint64_t Values = EnvMgr::getValues(v383, ItemEnvId, v394, v395, v396, v397, v398, v399);
      if (*(_DWORD *)(NameIds + 8))
      {
        v401 = (void *)Values;
        uint64_t v402 = 0;
        unint64_t v403 = 0;
        do
        {
          v404 = (char *)EnvMgr::getName(v383, *(unsigned __int16 *)(*(void *)NameIds + 2 * v403));
          DgnTextFile::convertToEnvValueFormat(*v401 + v402, (DgnString *)&v615);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "StateEnv");
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v385);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), v404);
          if (v616) {
            v405 = v615;
          }
          else {
            v405 = &byte_2140B33BB;
          }
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), v405);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_2140B33BB);
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 7), 0);
          DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v629);
          ++v403;
          v402 += 16;
        }
        while (v403 < *(unsigned int *)(NameIds + 8));
      }
      ++v384;
    }
    while (v384 < v618);
  }
  if (v617)
  {
    MemChunkFree(v617, 0);
    v617 = 0;
  }
  uint64_t v618 = 0;
  v614[0] = 0;
  v614[1] = 0;
  EnvMgr::getItemPairsWithEnv((unint64_t)v383, (uint64_t)&v617, (uint64_t)v614);
  if (v618)
  {
    unint64_t v410 = 0;
    do
    {
      int v411 = *((_DWORD *)v617 + v410);
      v412 = GetWordName(a3, *(_DWORD *)(v614[0] + 4 * v410), 0, 0, v406, v407, v408, v409);
      DgnString::DgnString((DgnString *)&v619, v412);
      unsigned int ItemPairEnvId = EnvMgr::getItemPairEnvId(v383, *((_DWORD *)v617 + v410), *(_DWORD *)(v614[0] + 4 * v410));
      uint64_t v420 = EnvMgr::getNameIds(v383, ItemPairEnvId, v414, v415, v416, v417, v418, v419);
      uint64_t v427 = EnvMgr::getValues(v383, ItemPairEnvId, v421, v422, v423, v424, v425, v426);
      if (*(_DWORD *)(v420 + 8))
      {
        v428 = (void *)v427;
        uint64_t v429 = 0;
        unint64_t v430 = 0;
        do
        {
          v431 = (char *)EnvMgr::getName(v383, *(unsigned __int16 *)(*(void *)v420 + 2 * v430));
          DgnTextFile::convertToEnvValueFormat(*v428 + v429, (DgnString *)&v615);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "StateIncludedWordEnv");
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v411);
          if (v620) {
            v432 = (char *)v619;
          }
          else {
            v432 = &byte_2140B33BB;
          }
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), v432);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), v431);
          if (v616) {
            v433 = v615;
          }
          else {
            v433 = &byte_2140B33BB;
          }
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), v433);
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 7), 0);
          DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v629);
          ++v430;
          v429 += 16;
        }
        while (v430 < *(unsigned int *)(v420 + 8));
      }
      DgnString::~DgnString((DgnString *)&v619);
      ++v410;
    }
    while (v410 < v618);
  }
  v611 = (RuleMgr *)*((void *)v610 + 8);
  if (!RuleMgr::isEmpty(v611))
  {
    ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v607);
    while (v623)
    {
      unsigned int v440 = *(_DWORD *)(v620 + 4 * v622);
      uint64_t ChildRules = StateMgr::getChildRules(v607, v440, v434, v435, v436, v437, v438, v439);
      if (*(_DWORD *)(ChildRules + 8))
      {
        unint64_t v448 = 0;
        do
        {
          int v449 = *(unsigned __int16 *)(*(void *)ChildRules + 2 * v448);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "RuleDefinition");
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v449);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), &byte_2140B33BB);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_2140B33BB);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_2140B33BB);
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 7), v440);
          DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v629);
          ++v448;
        }
        while (v448 < *(unsigned int *)(ChildRules + 8));
      }
      unsigned int v450 = *(_DWORD *)(v620 + 4 * v622);
      *(_DWORD *)(v620 + 4 * v622) = 0;
      unsigned int v451 = v622 + 1;
      BOOL v27 = v623 == 1;
      LODWORD(v622) = v622 + 1;
      --v623;
      if (v27)
      {
        uint64_t v622 = 0;
      }
      else
      {
        BOOL v28 = v451 >= v621;
        unsigned int v452 = v451 - v621;
        if (v28) {
          LODWORD(v622) = v452;
        }
      }
      ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v450, v441, v442, v443, v444, v445, v446);
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  }
  if (!RuleMgr::isEmpty(v611))
  {
    ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v607);
    while (v623)
    {
      uint64_t v465 = StateMgr::getChildRules(v607, *(_DWORD *)(v620 + 4 * v622), v453, v454, v455, v456, v457, v458);
      if (*(_DWORD *)(v465 + 8))
      {
        unint64_t v466 = 0;
        do
        {
          unsigned int v467 = *(unsigned __int16 *)(*(void *)v465 + 2 * v466);
          v468 = (const char *)RuleMgr::getName(v611, v467, v459, v460, v461, v462, v463, v464);
          DgnString::DgnString((DgnString *)&v612, v468);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "RuleName");
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v467);
          if (v613) {
            v469 = v612;
          }
          else {
            v469 = &byte_2140B33BB;
          }
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), v469);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_2140B33BB);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_2140B33BB);
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 7), 0);
          DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v629);
          DgnString::~DgnString((DgnString *)&v612);
          ++v466;
        }
        while (v466 < *(unsigned int *)(v465 + 8));
      }
      unsigned int v470 = *(_DWORD *)(v620 + 4 * v622);
      *(_DWORD *)(v620 + 4 * v622) = 0;
      unsigned int v471 = v622 + 1;
      BOOL v27 = v623 == 1;
      LODWORD(v622) = v622 + 1;
      --v623;
      if (v27)
      {
        uint64_t v622 = 0;
      }
      else
      {
        BOOL v28 = v471 >= v621;
        unsigned int v472 = v471 - v621;
        if (v28) {
          LODWORD(v622) = v472;
        }
      }
      ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v470, v459, v460, v461, v462, v463, v464);
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  }
  if (!RuleMgr::isEmpty(v611))
  {
    ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v607);
    while (v623)
    {
      uint64_t v485 = StateMgr::getChildRules(v607, *(_DWORD *)(v620 + 4 * v622), v473, v474, v475, v476, v477, v478);
      if (*(_DWORD *)(v485 + 8))
      {
        unint64_t v486 = 0;
        do
        {
          unsigned int v487 = *(unsigned __int16 *)(*(void *)v485 + 2 * v486);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "RuleAllowLM");
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v487);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), &byte_2140B33BB);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_2140B33BB);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_2140B33BB);
          unsigned int v488 = *((_DWORD *)this + 7);
          int v495 = RuleMgr::getLMAllowed(v611, v487, v489, v490, v491, v492, v493, v494);
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, v488, v495);
          DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v629);
          ++v486;
        }
        while (v486 < *(unsigned int *)(v485 + 8));
      }
      unsigned int v496 = *(_DWORD *)(v620 + 4 * v622);
      *(_DWORD *)(v620 + 4 * v622) = 0;
      unsigned int v497 = v622 + 1;
      BOOL v27 = v623 == 1;
      LODWORD(v622) = v622 + 1;
      --v623;
      if (v27)
      {
        uint64_t v622 = 0;
      }
      else
      {
        BOOL v28 = v497 >= v621;
        unsigned int v498 = v497 - v621;
        if (v28) {
          LODWORD(v622) = v498;
        }
      }
      ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v496, v479, v480, v481, v482, v483, v484);
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  }
  if (!RuleMgr::isEmpty(v611))
  {
    ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v607);
    while (v623)
    {
      uint64_t v511 = StateMgr::getChildRules(v607, *(_DWORD *)(v620 + 4 * v622), v499, v500, v501, v502, v503, v504);
      if (*(_DWORD *)(v511 + 8))
      {
        unint64_t v512 = 0;
        do
        {
          unsigned int v513 = *(unsigned __int16 *)(*(void *)v511 + 2 * v512);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "RuleAllowCoart");
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v513);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), &byte_2140B33BB);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_2140B33BB);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_2140B33BB);
          unsigned int v514 = *((_DWORD *)this + 7);
          int v521 = RuleMgr::getCoartAllowed(v611, v513, v515, v516, v517, v518, v519, v520);
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, v514, v521);
          DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v629);
          ++v512;
        }
        while (v512 < *(unsigned int *)(v511 + 8));
      }
      unsigned int v522 = *(_DWORD *)(v620 + 4 * v622);
      *(_DWORD *)(v620 + 4 * v622) = 0;
      unsigned int v523 = v622 + 1;
      BOOL v27 = v623 == 1;
      LODWORD(v622) = v622 + 1;
      --v623;
      if (v27)
      {
        uint64_t v622 = 0;
      }
      else
      {
        BOOL v28 = v523 >= v621;
        unsigned int v524 = v523 - v621;
        if (v28) {
          LODWORD(v622) = v524;
        }
      }
      ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v522, v505, v506, v507, v508, v509, v510);
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  }
  if (!RuleMgr::isEmpty(v611))
  {
    ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v607);
    while (v623)
    {
      uint64_t v537 = StateMgr::getChildRules(v607, *(_DWORD *)(v620 + 4 * v622), v525, v526, v527, v528, v529, v530);
      if (*(_DWORD *)(v537 + 8))
      {
        unint64_t v538 = 0;
        do
        {
          unsigned int v539 = *(unsigned __int16 *)(*(void *)v537 + 2 * v538);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "RuleAllowPrefiltering");
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v539);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), &byte_2140B33BB);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_2140B33BB);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_2140B33BB);
          unsigned int v540 = *((_DWORD *)this + 7);
          int v547 = RuleMgr::getPrefilteringAllowed(v611, v539, v541, v542, v543, v544, v545, v546);
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, v540, v547);
          DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v629);
          ++v538;
        }
        while (v538 < *(unsigned int *)(v537 + 8));
      }
      unsigned int v548 = *(_DWORD *)(v620 + 4 * v622);
      *(_DWORD *)(v620 + 4 * v622) = 0;
      unsigned int v549 = v622 + 1;
      BOOL v27 = v623 == 1;
      LODWORD(v622) = v622 + 1;
      --v623;
      if (v27)
      {
        uint64_t v622 = 0;
      }
      else
      {
        BOOL v28 = v549 >= v621;
        unsigned int v550 = v549 - v621;
        if (v28) {
          LODWORD(v622) = v550;
        }
      }
      ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v548, v531, v532, v533, v534, v535, v536);
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  }
  if (!RuleMgr::isEmpty(v611))
  {
    ParentFirstStateIdIterator::ParentFirstStateIdIterator((ParentFirstStateIdIterator *)&v619, v607);
    while (v623)
    {
      uint64_t v557 = StateMgr::getChildRules(v607, *(_DWORD *)(v620 + 4 * v622), v551, v552, v553, v554, v555, v556);
      v564 = (void *)v557;
      if (*(_DWORD *)(v557 + 8))
      {
        unint64_t v565 = 0;
        uint64_t v608 = v557;
        do
        {
          unsigned int v566 = *(unsigned __int16 *)(*v564 + 2 * v565);
          uint64_t Desc = RuleMgr::getDesc(v611, v566, v558, v559, v560, v561, v562, v563);
          if (*(_DWORD *)(Desc + 8))
          {
            uint64_t v568 = 0;
            unint64_t v569 = 0;
            do
            {
              DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "RuleDescription");
              DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), v566);
              uint64_t v570 = *(void *)Desc;
              switch(*(_DWORD *)(*(void *)Desc + v568))
              {
                case 0:
                  DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), "EndOperation");
                  unsigned int v571 = *((_DWORD *)this + 5);
                  unsigned int v572 = *(_DWORD *)(v570 + v568 + 8);
                  v573 = "Optional";
                  if (v572 <= 2) {
                    goto LABEL_374;
                  }
                  goto LABEL_375;
                case 1:
                  DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), "State");
                  DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_2140B33BB);
                  DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_2140B33BB);
                  int v580 = *(_DWORD *)(v570 + v568 + 8);
                  goto LABEL_377;
                case 2:
                  DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), "Rule");
                  DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_2140B33BB);
                  DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_2140B33BB);
                  int v580 = *(unsigned __int16 *)(v570 + v568 + 8);
                  goto LABEL_377;
                case 3:
                  DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), "StartOperation");
                  unsigned int v571 = *((_DWORD *)this + 5);
                  unsigned int v572 = *(_DWORD *)(v570 + v568 + 8);
                  v573 = "Optional";
                  if (v572 < 3) {
LABEL_374:
                  }
                    v573 = off_2641F5EE0[v572];
LABEL_375:
                  DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, v571, v573);
                  DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_2140B33BB);
                  int v580 = 0;
                  goto LABEL_377;
                case 4:
                  DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), "Word");
                  DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), &byte_2140B33BB);
                  unsigned int v574 = *((_DWORD *)this + 6);
                  v579 = GetWordName(a3, *(_DWORD *)(v570 + v568 + 8), 0, 0, v575, v576, v577, v578);
                  DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, v574, v579);
                  int v580 = *(_DWORD *)(v570 + v568 + 4);
LABEL_377:
                  DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 7), v580);
                  break;
                default:
                  break;
              }
              DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v629);
              ++v569;
              v568 += 12;
            }
            while (v569 < *(unsigned int *)(Desc + 8));
          }
          ++v565;
          v564 = (void *)v608;
        }
        while (v565 < *(unsigned int *)(v608 + 8));
      }
      unsigned int v581 = *(_DWORD *)(v620 + 4 * v622);
      *(_DWORD *)(v620 + 4 * v622) = 0;
      unsigned int v582 = v622 + 1;
      BOOL v27 = v623 == 1;
      LODWORD(v622) = v622 + 1;
      --v623;
      if (v27)
      {
        uint64_t v622 = 0;
      }
      else
      {
        BOOL v28 = v582 >= v621;
        unsigned int v583 = v582 - v621;
        if (v28) {
          LODWORD(v622) = v583;
        }
      }
      ParentFirstStateIdIterator::addChildStatesToQueue((StateMgr **)&v619, v581, v558, v559, v560, v561, v562, v563);
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v620);
  }
  v584 = (EnvMgr *)*((void *)v611 + 10);
  v619 = 0;
  uint64_t v620 = 0;
  EnvMgr::getItemsWithEnv((unint64_t)v584, (uint64_t)&v619);
  if (v620)
  {
    unint64_t v585 = 0;
    do
    {
      unsigned int v586 = *((_DWORD *)v619 + v585);
      unsigned int v587 = EnvMgr::getItemEnvId(v584, v586);
      uint64_t v594 = EnvMgr::getNameIds(v584, v587, v588, v589, v590, v591, v592, v593);
      uint64_t v601 = EnvMgr::getValues(v584, v587, v595, v596, v597, v598, v599, v600);
      if (*(_DWORD *)(v594 + 8))
      {
        v602 = (void *)v601;
        uint64_t v603 = 0;
        unint64_t v604 = 0;
        do
        {
          v605 = (char *)EnvMgr::getName(v584, *(unsigned __int16 *)(*(void *)v594 + 2 * v604));
          DgnTextFile::convertToEnvValueFormat(*v602 + v603, (DgnString *)&v615);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 1), "RuleEnv");
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 3), (unsigned __int16)v586);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 4), v605);
          if (v616) {
            v606 = v615;
          }
          else {
            v606 = &byte_2140B33BB;
          }
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 5), v606);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 6), &byte_2140B33BB);
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v629, *((_DWORD *)this + 7), 0);
          DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v629);
          ++v604;
          v603 += 16;
        }
        while (v604 < *(unsigned int *)(v594 + 8));
      }
      ++v585;
    }
    while (v585 < v620);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v619);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v614);
  DgnString::~DgnString((DgnString *)&v615);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v617);
  DgnArray<DgnString>::releaseAll((uint64_t)v624);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v625);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v627);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v629);
}

void sub_213F6A4E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33)
{
}

uint64_t *UserMgr::startupUserMgr(uint64_t a1)
{
  result = MemChunkAlloc(8uLL, 0);
  uint64_t *result = a1;
  UserMgr::smpUserMgr = (uint64_t)result;
  return result;
}

void UserMgr::printSize(UserMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/usermgr.cpp", 61, (DgnString *)&v31);
  if (v32) {
    uint64_t v15 = v31;
  }
  else {
    uint64_t v15 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v11, v12, v13, v14, a3, &byte_2140B33BB, a3, &byte_2140B33BB, v15);
  DgnString::~DgnString((DgnString *)&v31);
  if (a2 != -1) {
    xlprintf("%d ", v16, v17, v18, v19, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v16, v17, v18, v19, a3, &byte_2140B33BB);
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v20 = 4;
  }
  else {
    uint64_t v20 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/usermgr.cpp", 62, (DgnString *)&v31);
  if (v32) {
    unsigned int v25 = v31;
  }
  else {
    unsigned int v25 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v21, v22, v23, v24, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v25, v20, v20, 0);
  DgnString::~DgnString((DgnString *)&v31);
  *a4 += v20;
  *a5 += v20;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/user/usermgr.cpp", 63, (DgnString *)&v31);
  if (v32) {
    uint64_t v30 = v31;
  }
  else {
    uint64_t v30 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v26, v27, v28, v29, a3, &byte_2140B33BB, (35 - a3), (35 - a3), v30, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v31);
}

void sub_213F6A998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void MrecInitModule_btlat_kernel(void)
{
  if (!gParDebugLatticeConstruction)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugLatticeConstruction", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    *uint64_t v1 = &unk_26C4E0858;
    gParDebugLatticeConstruction = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugLatticeConstruction);
  }
  if (!gParDebugLatticeWatchTheseWords)
  {
    v2 = MemChunkAlloc(0x48uLL, 0);
    StringGlobalParamBase::StringGlobalParamBase((StringGlobalParamBase *)v2, "DebugLatticeWatchTheseWords", &byte_2140B33BB, &byte_2140B33BB, &byte_2140B33BB, 0, 0);
    void *v3 = &unk_26C4E18B8;
    gParDebugLatticeWatchTheseWords = (uint64_t)v3;
    unsigned __int16 v4 = (uint64_t *)GlobalParamMgr::smpGlobalParamMgr;
    GlobalParamMgr::addParam(v4, (GlobalParam **)&gParDebugLatticeWatchTheseWords);
  }
}

uint64_t BackTraceItem::computeHash(_DWORD *a1)
{
  HIDWORD(v2) = CWIDAC::computeHash((uint64_t)a1);
  LODWORD(v2) = HIDWORD(v2);
  HIDWORD(v2) = (v2 >> 19) + a1[6];
  LODWORD(v2) = HIDWORD(v2);
  HIDWORD(v2) = (v2 >> 19) + a1[7];
  LODWORD(v2) = HIDWORD(v2);
  HIDWORD(v2) = (v2 >> 19) + a1[8];
  LODWORD(v2) = HIDWORD(v2);
  HIDWORD(v2) = (v2 >> 19) + a1[9];
  LODWORD(v2) = HIDWORD(v2);
  HIDWORD(v2) = (v2 >> 19) + a1[10];
  LODWORD(v2) = HIDWORD(v2);
  HIDWORD(v2) = (v2 >> 19) + a1[11];
  LODWORD(v2) = HIDWORD(v2);
  HIDWORD(v2) = (v2 >> 19) + a1[13];
  LODWORD(v2) = HIDWORD(v2);
  return (v2 >> 19) + a1[14];
}

uint64_t BackTraceNodeCache::sizeObject(uint64_t a1, int a2)
{
  uint64_t v3 = sizeObject<unsigned int>(a1 + 8, a2);
  uint64_t v4 = 4;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v4 = 8;
  }
  if (a2 == 3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = v3;
  }
  else
  {
    uint64_t v5 = v3 + 1;
  }
  return v5 + v4;
}

uint64_t BackTraceNodeCache::createNodeCache(int a1, uint64_t a2, char a3, char a4)
{
  switch(a1)
  {
    case 0:
      uint64_t v7 = MemChunkAlloc(0x98uLL, 0);
      uint64_t result = BtNodeCacheType<BtTrigramNodeHashKey,BtTrigramNodeHashKey>::BtNodeCacheType((uint64_t)v7, a2, a3, a4);
      break;
    case 1:
      uint64_t v9 = MemChunkAlloc(0x98uLL, 0);
      uint64_t result = BtNodeCacheType<BtNodeHashKey,BtNodeKeyGenerator<false,true>>::BtNodeCacheType((uint64_t)v9, a2, a3, a4);
      break;
    case 2:
      unint64_t v10 = MemChunkAlloc(0x98uLL, 0);
      uint64_t result = BtNodeCacheType<BtNodeHashKey,BtNodeKeyGenerator<true,true>>::BtNodeCacheType((uint64_t)v10, a2, a3, a4);
      break;
    case 3:
      uint64_t v11 = MemChunkAlloc(0x98uLL, 0);
      uint64_t result = BtNodeCacheType<BtNodeHashKey,BtNodeKeyGenerator<true,false>>::BtNodeCacheType((uint64_t)v11, a2, a3, a4);
      break;
    case 4:
      uint64_t v12 = MemChunkAlloc(0x98uLL, 0);
      uint64_t result = BtNodeCacheType<BtUnigramNodeHashKey,BtUnigramNodeHashKey>::BtNodeCacheType((uint64_t)v12, a2, a3, 0);
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t BtNBestResult::init(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  if (v6) {
    DgnDelete<NetNBestAlg>(v6);
  }
  uint64_t v7 = MemChunkAlloc(0x98uLL, 0);
  uint64_t result = NetNBestAlg::NetNBestAlg((uint64_t)v7, a2, a3);
  *a1 = result;
  return result;
}

uint64_t DgnDelete<NetNBestAlg>(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    DgnPrimArray<unsigned int>::~DgnPrimArray(result + 136);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(v1 + 13));
    DgnPriorityQueue<NBestQueueItem>::~DgnPriorityQueue((uint64_t)(v1 + 4));
    BitArray::~BitArray((BitArray *)(v1 + 2));
    return MemChunkFree(v1, 0);
  }
  return result;
}

void BtNBestResult::prepare(uint64_t a1, uint64_t a2, unsigned int *a3, int a4)
{
  if (*(unsigned char *)(a1 + 93))
  {
    int v5 = *a3;
    *(_DWORD *)(a1 + 8) = *a3;
    *(_DWORD *)(a1 + 12) = a3[1];
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a3 + 2);
    if (!*(unsigned char *)(a1 + 94) && v5 != -50331650)
    {
      unsigned int v9 = *(_DWORD *)(*(void *)(**(void **)VocMgr::smpVocMgr + (((unint64_t)*a3 >> 22) & 0x3F8)) + 184);
      BitArray::setSizeNoGrow((BitArray *)(a1 + 40), 0);
      BitArray::setSize((BitArray *)(a1 + 40), v9);
      *(unsigned char *)(a1 + 92) = 0;
      *(void *)(a1 + 32) = a2;
      *(_DWORD *)(a1 + 88) = a4;
      int v10 = *(_DWORD *)(a1 + 64);
      if (v10 >= 1)
      {
        uint64_t v11 = (_DWORD *)(*(void *)(a1 + 56) + 8);
        uint64_t v12 = *(unsigned int *)(a1 + 64);
        do
        {
          *uint64_t v11 = 0;
          v11 += 4;
          --v12;
        }
        while (v12);
      }
      while (v10 < v9)
      {
        if (v10 == *(_DWORD *)(a1 + 68))
        {
          DgnArray<DgnPrimArray<double>>::reallocElts(a1 + 56, 1, 1);
          int v10 = *(_DWORD *)(a1 + 64);
        }
        uint64_t v13 = (void *)(*(void *)(a1 + 56) + 16 * v10);
        *uint64_t v13 = 0;
        v13[1] = 0;
        int v10 = *(_DWORD *)(a1 + 64) + 1;
        *(_DWORD *)(a1 + 64) = v10;
      }
      *(_DWORD *)(a1 + 80) = 0;
    }
  }
}

uint64_t sizeObject<HistoryAndBigScore>(uint64_t a1, int a2)
{
  uint64_t v10 = 0x70000000FFFFFFFELL;
  int v11 = 1879048192;
  uint64_t v4 = sizeObject((uint64_t)&v10, 2);
  if (a2 == 3) {
    return 0;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v5 = 12;
  }
  else {
    uint64_t v5 = 16;
  }
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    uint64_t v6 = v4;
    uint64_t v7 = *(unsigned int *)(a1 + 8);
    if ((int)v7 >= 1)
    {
      unint64_t v8 = v7 + 1;
      do
        v5 += sizeObject(*(void *)a1 + 12 * (v8-- - 2), a2);
      while (v8 > 1);
    }
    if (!a2) {
      v5 += v6 * (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
    }
  }
  return v5;
}

uint64_t BackTraceLatticeBuilder::BackTraceLatticeBuilder(uint64_t a1, Constraint *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, int a7, int a8, double a9, int a10, int a11, int a12, unsigned int a13, int a14, int a15, int a16, char a17, char a18, char a19, int a20,int a21,char a22,char a23,char a24,uint64_t a25,int a26)
{
  *(unsigned char *)a1 = a19;
  *(void *)(a1 + 4) = 0x7000000000000000;
  uint64_t v31 = *(void *)(a3 + 32);
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = v31;
  *(void *)(a1 + 32) = a4;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = a2;
  *(void *)(a1 + 56) = a5;
  *(unsigned char *)(a1 + 64) = a6;
  Hash<CWIDACPair,CWIDACPair,CWIDACPair,BigScorePair>::Hash(a1 + 72, 0, 128);
  *(void *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 196) = 0x3FFF;
  *(_OWORD *)(a1 + 200) = xmmword_2140866D0;
  *(void *)(a1 + 216) = 0;
  DgnString::DgnString((DgnString *)(a1 + 224));
  *(unsigned char *)(a1 + 277) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_DWORD *)(a1 + 328) = -16;
  *(void *)(a1 + 340) = 0x3FFFFCFFFFFDLL;
  *(_OWORD *)(a1 + 348) = xmmword_2140866D0;
  *(unsigned char *)(a1 + 364) = 0;
  *(_DWORD *)(a1 + 366) = 1310720000;
  *(_WORD *)(a1 + 370) = 0;
  *(_DWORD *)(a1 + 372) = -2;
  *(void *)(a1 + 376) = 1879048192;
  *(double *)(a1 + 384) = a9;
  *(_DWORD *)(a1 + 392) = a8;
  *(_DWORD *)(a1 + 396) = a10;
  *(_DWORD *)(a1 + 400) = a11;
  *(_DWORD *)(a1 + 404) = a12;
  *(_DWORD *)(a1 + 408) = a13;
  *(_DWORD *)(a1 + 412) = a14;
  *(_DWORD *)(a1 + 416) = a15;
  *(_DWORD *)(a1 + 420) = a16;
  *(unsigned char *)(a1 + 424) = a17;
  *(unsigned char *)(a1 + 425) = a18;
  *(_DWORD *)(a1 + 432) = a20;
  *(_DWORD *)(a1 + 436) = a21;
  *(unsigned char *)(a1 + 440) = a22;
  *(unsigned char *)(a1 + 441) = a23;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(unsigned char *)(a1 + 512) = a24;
  *(void *)(a1 + 520) = a25;
  *(_DWORD *)(a1 + 528) = a26;
  *(_DWORD *)(a1 + 532) = a7;
  *(_OWORD *)(a1 + 536) = 0u;
  *(void *)(a1 + 560) = 0;
  if (MemChunkRegion::isObjectFromCurrentRegion<Constraint>(a2, (const void *)a13))
  {
    uint64_t v33 = *(void *)(a1 + 48);
  }
  else
  {
    Constraint::cloneConstraint(a2, v32);
    uint64_t v33 = v34;
    *(void *)(a1 + 40) = v34;
    *(void *)(a1 + 48) = v34;
  }
  *(void *)(a1 + 280) = BackTraceNodeCache::createNodeCache(*(_DWORD *)(a1 + 532), v33, *(unsigned char *)(a1 + 64), a23);
  if (*(unsigned char *)(a1 + 425))
  {
    uint64_t v35 = MemChunkAlloc(0x70uLL, 0);
    *(void *)(a1 + 560) = Hash<BackTraceLinkPair,BackTraceLinkPair,BackTraceLinkPair,int>::Hash((uint64_t)v35, 0, 128);
  }
  uint64_t v36 = MemChunkAlloc(0x68uLL, 0);
  *(void *)(a1 + 288) = HashKEV<BackTraceItemHashKey,BackTraceItem,BackTraceItemHashKey>::HashKEV((uint64_t)v36, 0, 128);
  if (*(unsigned char *)(a1 + 512)) {
    *(unsigned char *)(*(void *)(a1 + 56) + 50) = 0;
  }
  return a1;
}

{
  uint64_t v26;

  return BackTraceLatticeBuilder::BackTraceLatticeBuilder(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26);
}

void sub_213F6B1D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, BackTraceItemCache *a10, uint64_t a11, uint64_t a12)
{
  Hash<CWIDACPair,CWIDACPair,CWIDACPair,BigScorePair>::~Hash(v12);
  _Unwind_Resume(a1);
}

BOOL MemChunkRegion::isObjectFromCurrentRegion<Constraint>(MemChunkRegion *a1, const void *a2)
{
  if (MemChunkRegion::smTlsID == -1) {
    goto LABEL_5;
  }
  uint64_t v3 = (void **)pthread_getspecific(MemChunkRegion::smTlsID);
  if (!v3) {
    goto LABEL_5;
  }
  uint64_t v4 = *v3;
  if (!*v3)
  {
    pthread_setspecific(MemChunkRegion::smTlsID, 0);
LABEL_5:
    uint64_t v4 = &gGlobalMemChunkRegion;
  }
  return v4 == (void *)MemChunkRegion::getBlockRegion(a1, a2);
}

void BackTraceItemCache::~BackTraceItemCache(BackTraceItemCache *this)
{
}

void BackTraceLatticeBuilder::~BackTraceLatticeBuilder(Constraint **this)
{
  this[5] = 0;
  DgnDelete<BackTraceNodeCache>((void (***)(void))this[35]);
  this[35] = 0;
  DgnDelete<Hash<CWIDAtFrame,CWIDAtFrame,CWIDAtFrame,unsigned int>>((void (***)(void))this[70]);
  this[70] = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 67));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 62));
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)(this + 60));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 58));
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)(this + 56));
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)(this + 39));
  DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)(this + 37));
  DgnDelete<Hash<CWIDAtFrame,CWIDAtFrame,CWIDAtFrame,unsigned int>>((void (***)(void))this[36]);
  BtNBestResult::~BtNBestResult((BtNBestResult *)(this + 23));
  Hash<CWIDACPair,CWIDACPair,CWIDACPair,BigScorePair>::~Hash((uint64_t)(this + 9));
}

void (***DgnDelete<BackTraceNodeCache>(void (***result)(void)))(void)
{
  if (result)
  {
    uint64_t v1 = result;
    (**result)(result);
    return (void (***)(void))MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t BackTraceLatticeBuilder::getLatticeType(BackTraceLatticeBuilder *this, int a2, int a3, int a4, BOOL a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = (int)this;
  if (a3 == 2)
  {
    if (this)
    {
      if ((a2 & 1) == 0) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/btlat.cpp", 501, (uint64_t)"kernel/btlat", 2, (uint64_t)"%.500s", a7, a8, (char)"Bigram lattice, node creation use right word, with no coarticulation");
      }
      return 0;
    }
    else if (a2)
    {
      return 2;
    }
    else
    {
      return 3;
    }
  }
  else if (a3 == 3)
  {
    if ((a2 & 1) == 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/btlat.cpp", 481, (uint64_t)"kernel/btlat", 2, (uint64_t)"%.500s", a7, a8, (char)"Trigram lattice with no coarticulation");
    }
    return v8 ^ 1u;
  }
  else
  {
    if (a4) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/btlat.cpp", 519, (uint64_t)"kernel/btlat", 2, (uint64_t)"%.500s", a7, a8, (char)"Unigram lattice does not work with SearchLatticeComputeOnlyBestTimes set to True");
    }
    return 4;
  }
}

uint64_t BackTraceLatticeBuilder::getLMScore(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, LMStats *a5)
{
  if (*(unsigned char *)(a1 + 512)) {
    *(unsigned char *)(*(void *)(a1 + 56) + 50) = 1;
  }
  int v10 = *(_DWORD *)(a2 + 4);
  v39[0] = *(_DWORD *)a2;
  v39[1] = v10;
  long long v40 = *(_OWORD *)(a2 + 8);
  int v11 = *(_DWORD *)(a3 + 4);
  unsigned int v41 = *(_DWORD *)a3;
  int v42 = v11;
  long long v43 = *(_OWORD *)(a3 + 8);
  uint64_t v12 = *Hash<CWIDACPair,CWIDACPair,CWIDACPair,BigScorePair>::findBucket(a1 + 72, (uint64_t)v39);
  if (v12)
  {
    if (a4) {
      *a4 = *(_DWORD *)(v12 + 64);
    }
    if (*(unsigned char *)(a1 + 512)) {
      *(unsigned char *)(*(void *)(a1 + 56) + 50) = 0;
    }
    uint64_t v13 = *(unsigned int *)(v12 + 60);
    goto LABEL_45;
  }
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  if (*(_DWORD *)a3 == -50331651) {
    uint64_t v14 = (unsigned int *)a2;
  }
  else {
    uint64_t v14 = (unsigned int *)a3;
  }
  uint64_t v15 = *(void *)(a1 + 48);
  if ((*(_DWORD *)(v15 + 68) & 0xFFFFFFFD) != 0)
  {
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t WeightsForState = Constraint::getWeightsForState(v15, v14);
    uint64_t v17 = WeightsForState;
    if ((*(_DWORD *)(*(void *)(a1 + 48) + 68) & 0xFFFFFFFD) != 0)
    {
      uint64_t v16 = 0;
      goto LABEL_32;
    }
    if (WeightsForState != 0xFFFF)
    {
      unint64_t v19 = (unint64_t)*v14 >> 25;
      unint64_t v20 = v19 + 1;
      if (HIDWORD(v38) <= v19)
      {
        uint64_t v35 = 0;
        HIDWORD(v38) = realloc_array(v37, &v35, 16 * v20, 16 * v38, 16 * v38, 1) >> 4;
        uint64_t v37 = v35;
      }
      unsigned int v34 = v19;
      if (v38 <= v20)
      {
        if (v38 <= v19)
        {
          uint64_t v23 = v19 - v38 + 1;
          uint64_t v24 = 16 * v38;
          do
          {
            unsigned int v25 = (char *)v37 + v24;
            *unsigned int v25 = 0;
            v25[1] = 0;
            v24 += 16;
            --v23;
          }
          while (v23);
        }
      }
      else
      {
        uint64_t v21 = (int)v38;
        if ((int)v38 > (int)v20)
        {
          uint64_t v22 = 16 * (int)v38 - 16;
          do
          {
            --v21;
            DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v37 + v22);
            v22 -= 16;
          }
          while (v21 > (v19 + 1));
        }
      }
      LODWORD(v38) = v19 + 1;
      uint64_t v26 = (char *)v37 + 16 * v19;
      uint64_t v27 = (char *)v37 + 16 * v34;
      unsigned int v30 = *((_DWORD *)v27 + 2);
      uint64_t v29 = (unsigned int *)(v27 + 8);
      unsigned int v28 = v30;
      if (v30 == *((_DWORD *)v26 + 3))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)v37 + 16 * v34, 1, 1);
        unsigned int v28 = *v29;
      }
      *(_DWORD *)(*(void *)v26 + 4 * v28) = v17;
      ++*v29;
      uint64_t v16 = &v37;
      goto LABEL_32;
    }
    uint64_t v16 = &v37;
  }
  uint64_t v17 = 0xFFFFLL;
LABEL_32:
  if (*(_DWORD *)(a3 + 20) == -83886084)
  {
    uint64_t v35 = *(void **)(a1 + 56);
    char v36 = 1;
    SearchLMScorer::setContext((uint64_t)v35, 4211081212, (unsigned int *)a2, 0, 1, (uint64_t)v16, a5, 0, 0xFAFFFFFC, 0xFAFFFFFC);
    if (*(_DWORD *)a3 == -50331651)
    {
      uint64_t v13 = SearchLMScorer::lmScoreFinalSilence(*(SearchLMScorer **)(a1 + 56), a5);
    }
    else if ((*(_DWORD *)a3 & 0xFFFFFF) == 0xFFFFF8)
    {
      uint64_t v13 = 0;
    }
    else
    {
      uint64_t v13 = *(_DWORD *)(a1 + 432)
          + SearchLMScorer::lmScoreNonSilCwidac(*(void *)(a1 + 56), (unsigned int *)a3, a5);
    }
    SearchLMContext::~SearchLMContext((SearchLMContext *)&v35);
    unsigned int v31 = 0;
  }
  else
  {
    uint64_t v35 = *(void **)(a1 + 56);
    char v36 = 1;
    SearchLMScorer::setContext((uint64_t)v35, 4211081212, (unsigned int *)a2, 0, 1, (uint64_t)v16, a5, 0, 0xFAFFFFFC, 0xFAFFFFFC);
    unsigned int v31 = SearchLMScorer::lmScoreNonAcousticWord(*(SearchLMScorer **)(a1 + 56), *(_DWORD *)(a3 + 20), v17, a5);
    SearchLMContext::~SearchLMContext((SearchLMContext *)&v35);
    unsigned int v32 = *(_DWORD *)(a3 + 20);
    uint64_t v35 = *(void **)(a1 + 56);
    char v36 = 1;
    SearchLMScorer::setContext((uint64_t)v35, 4211081212, (unsigned int *)a2, 0, 1, (uint64_t)v16, a5, 1, v32, 0xFAFFFFFC);
    uint64_t v13 = SearchLMScorer::lmScoreNonSilCwidac(*(void *)(a1 + 56), (unsigned int *)a3, a5)
        + v31
        + *(_DWORD *)(a1 + 432);
    SearchLMContext::~SearchLMContext((SearchLMContext *)&v35);
  }
  uint64_t v35 = (void *)__PAIR64__(v31, v13);
  Hash<CWIDACPair,CWIDACPair,CWIDACPair,BigScorePair>::add(a1 + 72, (uint64_t)v39, &v35);
  if (a4) {
    *a4 = v31;
  }
  if (*(unsigned char *)(a1 + 512)) {
    *(unsigned char *)(*(void *)(a1 + 56) + 50) = 0;
  }
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&v37);
LABEL_45:
  MrecInitModule_sdpres_sdapi();
  return v13;
}

void sub_213F6B984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void Hash<CWIDACPair,CWIDACPair,CWIDACPair,BigScorePair>::add(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned int v6 = *(_DWORD *)(a1 + 12);
  if (*(_DWORD *)(a1 + 8) >= v6 >> 1) {
    HashKEV<unsigned int,unsigned int,CWIDScope>::upSize(a1, 2 * v6);
  }
  int v7 = CWIDACPair::computeHash(a2);
  int v8 = *(_DWORD *)(a1 + 16);
  if (v8) {
    unsigned int v9 = (-1640531527 * v7) >> -(char)v8;
  }
  else {
    unsigned int v9 = 0;
  }
  uint64_t v10 = *(void *)(a1 + 80);
  uint64_t v11 = *(void *)(a1 + 32);
  if (!v11)
  {
    DgnPool::addChunk((DgnPool *)(a1 + 24));
    uint64_t v11 = *(void *)(a1 + 32);
  }
  uint64_t v12 = (void *)(v10 + 8 * v9);
  *(void *)(a1 + 32) = *(void *)v11;
  *(_DWORD *)(v11 + 8) = 0;
  CWIDACPair::CWIDACPair(v11 + 12, a2);
  *(void *)(v11 + 60) = *a3;
  *(_DWORD *)(v11 + 8) = v7;
  ++*(_DWORD *)(a1 + 8);
  if (*(unsigned char *)(a1 + 20))
  {
    *(void *)uint64_t v11 = *v12;
  }
  else
  {
    *(void *)uint64_t v11 = 0;
    uint64_t v13 = (void *)*v12;
    if (*v12)
    {
      do
      {
        uint64_t v12 = v13;
        uint64_t v13 = (void *)*v13;
      }
      while (v13);
    }
  }
  *uint64_t v12 = v11;
}

uint64_t BackTraceLatticeBuilder::bootStrap(BackTraceNodeCache **this, WordLattice *a2, PelScorer *a3, BOOL a4, LMStats *a5)
{
  uint64_t result = BackTraceNodeCache::createEndNode(this[35], a2);
  unsigned int v24 = result;
  uint64_t v7 = *((unsigned int *)this + 1);
  unsigned int v8 = v7 - 1;
  *((_DWORD *)this + 82) = v7 - 1;
  if ((int)v7 >= 1)
  {
    int v9 = 0;
    if (!*((unsigned char *)this[2] + 48)) {
      unsigned int v8 = v7;
    }
    int32x2_t v10 = vdup_n_s32(v8);
    do
    {
      uint64_t v11 = v7 - 1;
      uint64_t result = CWIDCrumbBank::hasRightSilenceCrumb(this[2], (int)v7 - 1);
      if (!result) {
        break;
      }
      int FinalSilFrameScore = CWIDCrumbBank::getFinalSilFrameScore(this[2], (int)v7 - 1);
      *(void *)unsigned int v25 = 0;
      uint64_t result = CWIDCrumbBank::getRightSilenceInfo((uint64_t)this[2], (int)v7 - 1, &v25[1], (int *)v25);
      uint64_t v13 = *((void *)this[3] + 1);
      unsigned int v14 = *(_DWORD *)(v13 + 36 * v25[1] + 32);
      int v15 = *(_DWORD *)(v13 + 36 * v14 + 28);
      v9 += FinalSilFrameScore;
      int v16 = *((unsigned __int8 *)this + 424);
      if (*((unsigned char *)this + 424) && v11 != v15) {
        goto LABEL_14;
      }
      int v17 = *(_DWORD *)(*((void *)a2 + 10) + 24 * v24);
      unsigned int v18 = *((unsigned char *)this + 512) ? v25[1] : v14;
      uint64_t v19 = (uint64_t)this[37] + 16 * v11;
      uint64_t v21 = (unsigned int *)(v19 + 8);
      unsigned int v20 = *(_DWORD *)(v19 + 8);
      if (v20 == *(_DWORD *)(v19 + 12))
      {
        uint64_t result = DgnArray<BackTraceItem>::reallocElts((uint64_t)this[37] + 16 * v11, 1, 1);
        unsigned int v20 = *v21;
        int v16 = *((unsigned __int8 *)this + 424);
      }
      unint64_t v22 = *(void *)v19 + ((unint64_t)v20 << 6);
      *(void *)unint64_t v22 = 0x3FFFFCFFFFFDLL;
      *(_OWORD *)(v22 + 8) = xmmword_2140866D0;
      *(int32x2_t *)(v22 + 24) = v10;
      *(_DWORD *)(v22 + 32) = 0;
      *(_DWORD *)(v22 + 36) = v9;
      *(void *)(v22 + 40) = 0x7000000070000000;
      *(_DWORD *)(v22 + 48) = v24;
      *(_DWORD *)(v22 + 52) = v17;
      *(_DWORD *)(v22 + 56) = v18;
      *(unsigned char *)(v22 + 60) = 0;
      unsigned int *v21 = v20 + 1;
      ++*((_DWORD *)this + 83);
      if (v16)
      {
LABEL_14:
        if (v11 == v15)
        {
          *((_DWORD *)this + 82) = v7 - 1;
          return result;
        }
      }
      --v7;
    }
    while ((unint64_t)(v11 + 1) > 1);
  }
  return result;
}

uint64_t BackTraceNodeCache::createEndNode(BackTraceNodeCache *this, WordLattice *a2)
{
  uint64_t Node = Lattice<WordLatticeLC>::createNode((uint64_t)a2);
  unsigned int v4 = *((_DWORD *)this + 4);
  if (v4 == *((_DWORD *)this + 5))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 8, 1, 1);
    unsigned int v4 = *((_DWORD *)this + 4);
  }
  *(_DWORD *)(*((void *)this + 1) + 4 * v4) = 0;
  ++*((_DWORD *)this + 4);
  return Node;
}

double BackTraceLatticeBuilder::assembleRightGerms(BackTraceLatticeBuilder *this, __n128 a2)
{
  *((_DWORD *)this + 84) = -2;
  uint64_t v2 = *((unsigned int *)this + 82);
  uint64_t v3 = *((void *)this + 37);
  if (*(_DWORD *)(v3 + 16 * v2 + 8))
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    int v7 = 0;
    unsigned int v20 = (char *)this + 312;
    int v8 = 1879048192;
    int v9 = -2;
    do
    {
      int32x2_t v10 = (int *)(*(void *)(v3 + 16 * v2) + v5);
      int v11 = *v10;
      int v12 = v10[9];
      int v13 = v10[14];
      if (*v10 == -50331651)
      {
        *((_DWORD *)this + 84) = v10[12];
        int v8 = v12;
        int v9 = v13;
      }
      else
      {
        __int16 v14 = *((_WORD *)v10 + 2);
        __int16 v15 = *((_WORD *)v10 + 3);
        a2 = *(__n128 *)(v10 + 2);
        char v16 = *((unsigned char *)v10 + 60);
        unsigned int v17 = *((_DWORD *)this + 80);
        if (v17 == *((_DWORD *)this + 81))
        {
          __int16 v21 = v15;
          __int16 v22 = v14;
          __n128 v23 = a2;
          DgnArray<RecogGerm>::reallocElts((uint64_t)v20, 1, 1);
          __int16 v15 = v21;
          __int16 v14 = v22;
          a2 = v23;
          unsigned int v17 = *((_DWORD *)this + 80);
          uint64_t v2 = *((unsigned int *)this + 82);
          uint64_t v3 = *((void *)this + 37);
        }
        uint64_t v18 = *((void *)this + 39) + 44 * v17;
        *(_DWORD *)uint64_t v18 = v11;
        *(_WORD *)(v18 + 4) = v14;
        *(_WORD *)(v18 + 6) = v15;
        *(__n128 *)(v18 + 8) = a2;
        *(unsigned char *)(v18 + 24) = v16;
        *(_DWORD *)(v18 + 26) = 1310720000;
        *(_WORD *)(v18 + 30) = 0;
        *(_DWORD *)(v18 + 32) = v13;
        *(_DWORD *)(v18 + 36) = v12;
        *(_DWORD *)(v18 + 40) = v7;
        *((_DWORD *)this + 80) = v17 + 1;
        ++v7;
      }
      ++v6;
      v5 += 64;
    }
    while (v6 < *(unsigned int *)(v3 + 16 * v2 + 8));
    if (*((_DWORD *)this + 84) != -2)
    {
      *((_DWORD *)this + 85) = -50331651;
      *((_DWORD *)this + 86) = 0x3FFF;
      a2.n128_u64[0] = 0xFFFFFFFE00000000;
      *(_OWORD *)((char *)this + 348) = xmmword_2140866D0;
      *((unsigned char *)this + 364) = 0;
      *(_DWORD *)((char *)this + 366) = 1310720000;
      *((_WORD *)this + 185) = 0;
      *((_DWORD *)this + 95) = v7;
      *((_DWORD *)this + 94) = v8;
      *((_DWORD *)this + 93) = v9;
    }
  }
  return a2.n128_f64[0];
}

uint64_t BackTraceLatticeBuilder::seedOneInContext(unint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4, int a5, int a6, unsigned int a7, int a8, uint64_t a9, LMStats *a10, uint64_t a11, char a12)
{
  uint64_t v18 = (VocMgr *)VocMgr::smpVocMgr;
  unint64_t v19 = *a3;
  if (*a3 >> 25 == 126) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(void *)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * (v19 >> 25)) + 56);
  }
  if (!BackTraceLatticeBuilder::canSeedInAcousticContext(a1, a4, (uint64_t)a3)) {
    return 0;
  }
  uint64_t v134 = v20;
  uint64_t v140 = v18;
  unsigned int v145 = a7;
  int v146 = a8;
  unint64_t v21 = *a4;
  if (v21 == -50331650)
  {
    BOOL v147 = 0;
    unsigned int v135 = 0;
    unsigned int v22 = a4[9];
    unsigned int v23 = v19;
    unsigned int v24 = v22;
  }
  else
  {
    unsigned int v25 = a4[8];
    uint64_t v26 = *(void *)(*(void *)(a1 + 24) + 8);
    uint64_t v27 = (_DWORD *)(v26 + 36 * v25);
    unsigned int v28 = v27[8];
    uint64_t v29 = v26 + 36 * v28;
    BOOL v147 = v27[6] != v27[7];
    if ((*(_DWORD *)(*(void *)(a1 + 48) + 68) & 0xFFFFFFFD) != 0)
    {
      int v30 = 0;
      LODWORD(v31) = a4[2];
    }
    else
    {
      uint64_t v31 = a4[2];
      int v30 = *(__int16 *)(*(void *)(*(void *)(*(void *)(**(void **)v18 + ((v21 >> 22) & 0x3F8)) + 56) + 288)
                       + 4 * v31);
    }
    unsigned int v32 = a4[1];
    unsigned int v163 = *a4;
    unsigned int v164 = v32;
    *(void *)((char *)&v165 + 4) = *(void *)(a4 + 3);
    unsigned int v33 = a4[5];
    LODWORD(v165) = v31;
    HIDWORD(v165) = v33;
    uint64_t v150 = *(void *)v29;
    long long v151 = *(_OWORD *)(v29 + 8);
    if (*(unsigned char *)(a1 + 512))
    {
      int v34 = *(_DWORD *)(a1 + 528);
      uint64_t v35 = v26 + 36 * (v25 - v34);
      unsigned int v163 = *(_DWORD *)v35;
      unsigned int v164 = *(_DWORD *)(v35 + 4);
      long long v165 = *(_OWORD *)(v35 + 8);
      uint64_t v36 = v26 + 36 * (v28 - v34);
      uint64_t v150 = *(void *)v36;
      long long v151 = *(_OWORD *)(v36 + 8);
    }
    int LMScore = BackTraceLatticeBuilder::getLMScore(a1, (uint64_t)&v150, (uint64_t)&v163, 0, a10);
    if (*(unsigned char *)(a1 + 512))
    {
      uint64_t v38 = *(void *)(*(void *)(a1 + 24) + 8);
      unsigned int v39 = (_DWORD *)(v38 + 36 * a4[8]);
      unsigned int v40 = v39[8];
      unsigned int v41 = v40 - *(_DWORD *)(a1 + 528);
      if (*v39 == -50331650) {
        int v42 = 0;
      }
      else {
        int v42 = *(_DWORD *)(v38 + 36 * v40 + 28);
      }
      unint64_t v47 = *a4;
      if (v47 >> 25 == 126 || (v47 & 0xFFFFFF) == 0xFFFFF8) {
        unsigned int v48 = 0;
      }
      else {
        unsigned int v48 = *(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(**(void **)VocMgr::smpVocMgr
      }
                                                                      + ((v47 >> 22) & 0x3F8))
                                                          + 48)
                                              + 592)
                                  + 2 * (v47 & 0xFFFFFF));
      unsigned int AccumHistScore = CWIDCrumbBank::getAccumHistScore(*(CWIDCrumbBank **)(a1 + 520), v42 - 1, v41, v48);
    }
    else
    {
      uint64_t v43 = *(void *)(*(void *)(a1 + 24) + 8);
      uint64_t v44 = (_DWORD *)(v43 + 36 * a4[8]);
      unsigned int v45 = v44[8];
      if (*v44 == -50331650) {
        int v46 = 0;
      }
      else {
        int v46 = *(_DWORD *)(v43 + 36 * v45 + 28);
      }
      int v49 = v46 - 1;
      unint64_t v50 = *a4;
      if (v50 >> 25 == 126 || (v50 & 0xFFFFFF) == 0xFFFFF8) {
        unsigned int v51 = 0;
      }
      else {
        unsigned int v51 = *(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(**(void **)VocMgr::smpVocMgr
      }
                                                                      + ((v50 >> 22) & 0x3F8))
                                                          + 48)
                                              + 592)
                                  + 2 * (v50 & 0xFFFFFF));
      unsigned int AccumHistScore = CWIDCrumbBank::getAccumHistScore(*(CWIDCrumbBank **)(a1 + 16), v49, v45, v51);
    }
    unsigned int v22 = a4[9];
    unsigned int v135 = AccumHistScore;
    unsigned int v24 = v22 - (LMScore + v30) - AccumHistScore;
    unsigned int v23 = *a3;
  }
  int v53 = 0;
  if (v23 >> 25 != 126 && (v23 & 0xFFFFFF) != 0xFFFFF8) {
    int v53 = *(_DWORD *)(a1 + 432);
  }
  if (v23 == -50331651)
  {
    unsigned int v54 = 0;
  }
  else
  {
    unsigned int v54 = a3[10];
    if (*(_DWORD *)(a1 + 336) != -2) {
      ++v54;
    }
  }
  uint64_t v55 = *(unsigned int *)(a1 + 328);
  uint64_t v56 = (_DWORD *)(*(void *)(*(void *)(a1 + 296) + 16 * v55) + ((unint64_t)v54 << 6));
  uint64_t v57 = (const WordLatticeLC *)v56[12];
  int v58 = v56[7];
  int v143 = v56[6];
  int v144 = v53;
  int v59 = v58 - v143;
  if (v58 == v143) {
    int v142 = 0;
  }
  else {
    int v142 = *(_DWORD *)(a1 + 436);
  }
  signed int v60 = a3[9];
  int v61 = v56[10];
  if (v23 != -50331651)
  {
    if (*(unsigned char *)(a1 + 512))
    {
      if (a12)
      {
        int v62 = v61 - (v60 + a6 + v56[11]);
        int v63 = v62 - a5;
        if (v62 < a5)
        {
          if (a3[5] == -83886084) {
            int v63 = 0;
          }
          v146 += v63;
          a5 = v61 - (v60 + a6 + v56[11]);
        }
      }
    }
  }
  if (*(unsigned char *)(a1 + 64))
  {
    if (v23 != -50331651 && !*(unsigned char *)(a1 + 440))
    {
      signed int v64 = v61 - (v22 + a6 + a5);
      if (v64 >= v60)
      {
        if (a12) {
          signed int v65 = v61 - (v22 + a6 + a5);
        }
        else {
          signed int v65 = v64 + 1;
        }
        if (!*(unsigned char *)(a1 + 512)) {
          signed int v65 = v64 + 1;
        }
        if (v64 != v60) {
          signed int v60 = v65;
        }
      }
      else
      {
        ++v60;
      }
    }
  }
  else
  {
    signed int v60 = 0;
  }
  unsigned int v139 = v24;
  int v141 = v56[8];
  unsigned int v66 = *(void **)(a1 + 280);
  int v67 = a5 + a6 + v60 + *(_DWORD *)(v66[1] + 4 * *(unsigned int *)(*(void *)(a9 + 80) + 24 * v57));
  int v68 = v67 + v22;
  v179[0] = v68;
  int v69 = *(_DWORD *)(a1 + 8);
  int v70 = 1879048192;
  int v71 = 1879048192;
  if (v69 != 1879048192)
  {
    int v70 = *(_DWORD *)(a1 + 8);
    if (*((unsigned __int8 *)a3 + 24) | *((unsigned __int8 *)a4 + 24)) {
      int v70 = *(_DWORD *)(a1 + 404) + v69;
    }
    if (v68 > v70) {
      return 0;
    }
    int v71 = v70 - v67;
  }
  unsigned int v72 = *a4;
  int v136 = v71;
  int v137 = v59;
  if (*(unsigned char *)(a1 + 425))
  {
    if (v72 == -50331650)
    {
      int v73 = -1;
    }
    else
    {
      uint64_t v74 = *(void *)(*(void *)(a1 + 24) + 8);
      unsigned int v75 = *(_DWORD *)(v74 + 36 * a4[8] + 32);
      if (*(_DWORD *)(v74 + 36 * v75) == -50331650) {
        int v73 = 0;
      }
      else {
        int v73 = *(_DWORD *)(v74 + 36 * *(unsigned int *)(v74 + 36 * v75 + 32) + 28);
      }
    }
    unsigned int v76 = a4[1];
    unsigned int v163 = *a4;
    unsigned int v164 = v76;
    long long v165 = *(_OWORD *)(a4 + 2);
    BOOL v166 = v147;
    unsigned int v167 = v23;
    int v168 = v73;
    int v169 = (int)v57;
    uint64_t v77 = *Hash<BackTraceLinkPair,BackTraceLinkPair,BackTraceLinkPair,int>::findBucket(*(void *)(a1 + 560), (uint64_t)&v163);
    if (!v77)
    {
      Hash<BackTraceLinkPair,BackTraceLinkPair,BackTraceLinkPair,int>::add(*(void *)(a1 + 560), (uint64_t)&v163, v179);
      goto LABEL_76;
    }
    if (*(_DWORD *)(v77 + 52) > v179[0])
    {
      *(_DWORD *)(v77 + 52) = v179[0];
LABEL_76:
      unsigned int v72 = *a4;
      unsigned int v23 = *a3;
      unsigned int v66 = *(void **)(a1 + 280);
      uint64_t v55 = *(unsigned int *)(a1 + 328);
      goto LABEL_77;
    }
    return 0;
  }
LABEL_77:
  uint64_t v132 = *(void *)(*(void *)(a1 + 24) + 8);
  unsigned int v133 = a4[8];
  unsigned int v79 = a4[1];
  unsigned int v80 = a4[2];
  v177[0] = v72;
  v177[1] = v79;
  uint64_t v178 = *((void *)a4 + 2);
  unsigned int v81 = a3[1];
  unsigned int v82 = a3[2];
  unsigned int Root = v23;
  unsigned int v173 = v81;
  int32x2_t v176 = *(int32x2_t *)(a3 + 4);
  v177[2] = v80;
  v177[3] = -2;
  unsigned int v174 = v82;
  int v175 = -2;
  char v171 = 0;
  uint64_t v138 = v132 + 36 * v133;
  unsigned int v148 = (*(uint64_t (**)(void *, uint64_t, uint64_t, _DWORD *, BOOL, unsigned int *, char *))(*v66 + 40))(v66, a9, v55, v177, *(_DWORD *)(v138 + 24) != *(_DWORD *)(v138 + 28), &Root, &v171);
  if (v171)
  {
    unsigned int v84 = *(_DWORD *)(a1 + 420);
    if (v84)
    {
      if (*(_DWORD *)(a9 + 24) > v84) {
        return 1;
      }
    }
    unsigned int v85 = *(_DWORD *)(a1 + 412);
    if (v85)
    {
      int v86 = *(_DWORD *)(a1 + 328);
      if (v86 != -16)
      {
        unsigned int v87 = *(_DWORD *)(a1 + 4) - v86;
        if (v87 >= 0x32)
        {
          LODWORD(v83) = *(_DWORD *)(a9 + 24);
          if ((double)v83 / (double)v87 > (double)v85 / 100.0) {
            return 1;
          }
        }
      }
    }
  }
  uint64_t v88 = *(unsigned int *)(*(void *)(a9 + 80) + 24 * v148);
  uint64_t v89 = *(void *)(*(void *)(a1 + 280) + 8);
  if (*(_DWORD *)(v89 + 4 * v88) > v67) {
    *(_DWORD *)(v89 + 4 * v88) = v67;
  }
  if ((*(_DWORD *)(*(void *)(a1 + 48) + 68) & 0xFFFFFFFD) == 0
    && Root >> 25 != 126
    && v174
    && *(unsigned char *)(*(void *)(v134 + 384) + v174))
  {
    unsigned int Root = v19 & 0xFE000000 | 0xFFFFFB;
    int32x2_t v176 = vdup_n_s32(0xFAFFFFFC);
    LOWORD(v173) = 0x3FFF;
  }
  if (*(unsigned char *)a1 && (Root & 0xFFFFFF) != 0xFFFFFB) {
    unsigned int Root = VocMgr::getRoot(v140, Root);
  }
  v170[0] = a5 - (v146 + v144);
  v170[1] = v146;
  v170[2] = a6;
  v170[3] = v144;
  v170[4] = v60 - v142 - v141;
  v170[5] = v141;
  v170[6] = v142;
  if (*(_DWORD *)(a1 + 532) == 4) {
    v176.i32[0] = -83886084;
  }
  WordLatticeLC::WordLatticeLC((uint64_t)&v163, (uint64_t)&Root, *(_DWORD *)(a1 + 328), v143 - *(_DWORD *)(a1 + 328), v137, (uint64_t)v170);
  unsigned int v162 = 0;
  if ((int)Lattice<WordLatticeLC>::maybeCreateAndConnectOrUpdateLink((uint64_t *)a9, v148, v57, (WordLatticeLC *)&v163, 0, &v162) >= 1&& ((unsigned int v91 = *(_DWORD *)(a1 + 416)) != 0 && *(_DWORD *)(a9 + 104) > v91|| (v92 = *(_DWORD *)(a1 + 408)) != 0&& (v93 = *(_DWORD *)(a1 + 328), v93 != -16)&& (v94 = *(_DWORD *)(a1 + 4) - v93, v94 >= 0x32)&& (LODWORD(v90) = *(_DWORD *)(a9 + 104), (double)v90 / (double)v94 > (double)v92 / 100.0)))
  {
    uint64_t v78 = 1;
  }
  else
  {
    if (*(_DWORD *)(a1 + 396)) {
      BackTraceLatticeBuilder::updateLinkBestPathScore(a1, v179[0], *(_DWORD *)(*(void *)(a9 + 128) + 136 * v162 + 112));
    }
    if (*a4 == -50331650)
    {
      if (v171)
      {
        uint64_t v95 = *(void **)(a1 + 280);
        int v96 = *(_DWORD *)(v95[1] + 4 * *(unsigned int *)(*(void *)(a9 + 80) + 24 * v148)) + v139;
        if (v96 <= v70)
        {
          uint64_t v150 = 0x3FFFFAFFFFFFLL;
          long long v151 = xmmword_2140866D0;
          uint64_t v156 = 0x3FFFFCFFFFFELL;
          long long v157 = xmmword_2140866D0;
          int v97 = (*(uint64_t (**)(void *, uint64_t, void, uint64_t *, void, uint64_t *, char *))(*v95 + 40))(v95, a9, 0, &v150, 0, &v156, &v171);
          int v98 = *(_DWORD *)(v138 + 24);
          int v99 = *(_DWORD *)(v138 + 28);
          uint64_t v156 = 0;
          *(void *)&long long v157 = 0;
          LODWORD(v158) = 0;
          *((void *)&v157 + 1) = v139;
          WordLatticeLC::WordLatticeLC((uint64_t)&v150, (uint64_t)a4, 0, v98, v99 - v98, (uint64_t)&v156);
          unsigned int Link = Lattice<WordLatticeLC>::createLink(a9, v97, v148, (WordLatticeLC *)&v150);
          Lattice<WordLatticeLC>::connectInLinkUnordered((uint64_t *)a9, Link);
          Lattice<WordLatticeLC>::connectOutLinkUnordered((uint64_t *)a9, Link);
          if (*(_DWORD *)(a1 + 396)) {
            BackTraceLatticeBuilder::updateLinkBestPathScore(a1, v96, *(_DWORD *)(*(void *)(a9 + 128) + 136 * Link + 112));
          }
          WordLatticeLC::~WordLatticeLC((WordLatticeLC *)&v150);
        }
      }
      else if (*(_DWORD *)(a1 + 396))
      {
        uint64_t v128 = *(unsigned int *)(*(void *)(a9 + 80) + 24 * v148 + 16);
        if (v128 != -2)
        {
          uint64_t v129 = *(void *)(a9 + 128);
          do
          {
            uint64_t v130 = v129 + 136 * v128;
            BackTraceLatticeBuilder::updateLinkBestPathScore(a1, vaddvq_s32(*(int32x4_t *)(v130 + 28))+ *(_DWORD *)(v130 + 44)+ *(_DWORD *)(v130 + 48)+ *(_DWORD *)(v130 + 52)+ *(_DWORD *)(*(void *)(*(void *)(a1 + 280) + 8)+ 4 * *(unsigned int *)(*(void *)(a9 + 80) + 24 * v148)), *(_DWORD *)(v130 + 112));
            uint64_t v129 = *(void *)(a9 + 128);
            uint64_t v128 = *(unsigned int *)(v129 + 136 * v128 + 124);
          }
          while (v128 != -2);
        }
      }
    }
    else
    {
      char v101 = (*((unsigned __int8 *)a4 + 24) | *((unsigned __int8 *)a3 + 24)) != 0;
      uint64_t v102 = *(void *)(v138 + 24);
      unsigned int v103 = a4[9];
      unsigned int v104 = *(_DWORD *)(*(void *)(a9 + 80) + 24 * v148);
      unsigned int v105 = v133;
      if (!*(unsigned char *)(a1 + 512)) {
        unsigned int v105 = *(_DWORD *)(v132 + 36 * v133 + 32);
      }
      unsigned int v106 = a4[1];
      LODWORD(v150) = *a4;
      HIDWORD(v150) = v106;
      long long v151 = *(_OWORD *)(a4 + 2);
      *(void *)&long long v152 = v102;
      *((void *)&v152 + 1) = __PAIR64__(v139, v145);
      *(void *)&long long v153 = __PAIR64__(v135, v103);
      *((void *)&v153 + 1) = __PAIR64__(v104, v148);
      unsigned int v154 = v105;
      char v155 = v101;
      if (v171 || BackTraceItemCache::needCreateBTItem((uint64_t *)(a1 + 288), (uint64_t)&v150))
      {
        uint64_t v107 = (void *)(a1 + 296);
        uint64_t v108 = *(void *)(*(void *)(a1 + 24) + 8);
        if (*(_DWORD *)(v108 + 36 * v133) == -50331650) {
          unsigned int v109 = 0;
        }
        else {
          unsigned int v109 = *(_DWORD *)(v108 + 36 * *(unsigned int *)(v108 + 36 * v133 + 32) + 28);
        }
        uint64_t v110 = *v107 + 16 * v109;
        uint64_t v112 = (unsigned int *)(v110 + 8);
        unsigned int v111 = *(_DWORD *)(v110 + 8);
        unsigned int v113 = v111;
        if (v111 == *(_DWORD *)(v110 + 12))
        {
          DgnArray<BackTraceItem>::reallocElts(*v107 + 16 * v109, 1, 1);
          unsigned int v113 = *v112;
        }
        unint64_t v114 = *(void *)v110 + ((unint64_t)v113 << 6);
        *(void *)unint64_t v114 = v150;
        *(_OWORD *)(v114 + 8) = v151;
        *(_OWORD *)(v114 + 24) = v152;
        *(_OWORD *)(v114 + 40) = v153;
        *(_DWORD *)(v114 + 56) = v154;
        *(unsigned char *)(v114 + 60) = v155;
        *uint64_t v112 = v113 + 1;
        ++*(_DWORD *)(a1 + 332);
        uint64_t v115 = *(void *)(a1 + 288);
        if (v115)
        {
          uint64_t v156 = a1 + 296;
          *(void *)&long long v157 = __PAIR64__(v111, v109);
          HashKEV<BackTraceItemHashKey,BackTraceItem,BackTraceItemHashKey>::add(v115, (uint64_t)&v156);
        }
        if (*(unsigned char *)(a1 + 277))
        {
          if (a11)
          {
            if (!*(unsigned char *)(a1 + 278))
            {
              int v116 = *(_DWORD *)(a11 + 8);
              if (v116 >= 1)
              {
                unsigned int v117 = v116 + 1;
                uint64_t v118 = *(void *)a11 + 8;
                uint64_t v119 = (int *)v118;
                do
                {
                  int v121 = *v119;
                  v119 += 3;
                  int v120 = v121;
                  if (v121 > v136) {
                    break;
                  }
                  unsigned int v122 = *(_DWORD *)(v118 - 8);
                  uint64_t v123 = *(unsigned int *)(*(void *)(*(void *)(a1 + 24) + 8) + 36 * v122 + 28);
                  BackTraceLatticeBuilder::getBackTraceItem((void *)a1, a9, a4, v101, v138, v122, v120, 0, (uint64_t)&v156, v148, a10);
                  uint64_t v124 = *v107 + 16 * v123;
                  unsigned int v126 = (unsigned int *)(v124 + 8);
                  unsigned int v125 = *(_DWORD *)(v124 + 8);
                  if (v125 == *(_DWORD *)(v124 + 12))
                  {
                    DgnArray<BackTraceItem>::reallocElts(v124, 1, 1);
                    unsigned int v125 = *v126;
                  }
                  unint64_t v127 = *(void *)v124 + ((unint64_t)v125 << 6);
                  *(void *)unint64_t v127 = v156;
                  *(_OWORD *)(v127 + 8) = v157;
                  *(_OWORD *)(v127 + 24) = v158;
                  *(_OWORD *)(v127 + 40) = v159;
                  *(_DWORD *)(v127 + 56) = v160;
                  *(unsigned char *)(v127 + 60) = v161;
                  *unsigned int v126 = v125 + 1;
                  ++*(_DWORD *)(a1 + 332);
                  --v117;
                  uint64_t v118 = (uint64_t)v119;
                }
                while (v117 > 1);
              }
            }
          }
        }
      }
    }
    uint64_t v78 = 0;
  }
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)&v163);
  return v78;
}

void sub_213F6CC3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
}

BOOL BackTraceLatticeBuilder::canSeedInAcousticContext(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  BOOL result = 1;
  if (*(unsigned char *)(a1 + 440))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 24) + 8) + 36 * a2[8];
    if (*(_DWORD *)(v3 + 24) != *(_DWORD *)(v3 + 28)
      || *(_DWORD *)a3 >> 25 == 126
      || (unint64_t v4 = *a2, v4 >> 25 == 126))
    {
      int v5 = 0;
    }
    else
    {
      int v5 = *(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(**(void **)VocMgr::smpVocMgr
                                                                   + ((v4 >> 22) & 0x3F8))
                                                       + 48)
                                           + 608)
                               + 2 * (v4 & 0xFFFFFF));
    }
    if (v5 != *(unsigned __int16 *)(a3 + 6)) {
      return 0;
    }
  }
  return result;
}

void Hash<BackTraceLinkPair,BackTraceLinkPair,BackTraceLinkPair,int>::add(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned int v6 = *(_DWORD *)(a1 + 12);
  if (*(_DWORD *)(a1 + 8) >= v6 >> 1) {
    HashKEV<unsigned int,unsigned int,CWIDScope>::upSize(a1, 2 * v6);
  }
  HIDWORD(v7) = CWIDAC::computeHash(a2);
  LODWORD(v7) = HIDWORD(v7);
  HIDWORD(v7) = (v7 >> 19) + *(_DWORD *)(a2 + 28);
  LODWORD(v7) = HIDWORD(v7);
  HIDWORD(v7) = (v7 >> 19) + *(_DWORD *)(a2 + 32);
  LODWORD(v7) = HIDWORD(v7);
  HIDWORD(v7) = (v7 >> 19) + *(_DWORD *)(a2 + 36);
  LODWORD(v7) = HIDWORD(v7);
  int v8 = (v7 >> 19) + *(unsigned __int8 *)(a2 + 24);
  int v9 = *(_DWORD *)(a1 + 16);
  if (v9) {
    unsigned int v10 = (-1640531527 * v8) >> -(char)v9;
  }
  else {
    unsigned int v10 = 0;
  }
  uint64_t v11 = *(void *)(a1 + 80);
  int v12 = *(void **)(a1 + 32);
  if (!v12)
  {
    DgnPool::addChunk((DgnPool *)(a1 + 24));
    int v12 = *(void **)(a1 + 32);
  }
  int v13 = (void *)(v11 + 8 * v10);
  *(void *)(a1 + 32) = *v12;
  BucketLink<BackTraceLinkPair,int>::BucketLink((uint64_t)v12, (int *)a2, a3);
  *(_DWORD *)(v14 + 8) = v8;
  ++*(_DWORD *)(a1 + 8);
  if (*(unsigned char *)(a1 + 20))
  {
    *(void *)uint64_t v14 = *v13;
  }
  else
  {
    *(void *)uint64_t v14 = 0;
    __int16 v15 = (void *)*v13;
    if (*v13)
    {
      do
      {
        int v13 = v15;
        __int16 v15 = (void *)*v15;
      }
      while (v15);
    }
  }
  *int v13 = v14;
}

uint64_t Lattice<WordLatticeLC>::maybeCreateAndConnectOrUpdateLink(uint64_t *a1, unsigned int a2, const WordLatticeLC *a3, WordLatticeLC *a4, int a5, _DWORD *a6)
{
  int v9 = (int)a3;
  uint64_t v12 = *(unsigned int *)(a1[10] + 24 * a2 + 20);
  if (v12 == -2)
  {
LABEL_6:
    unsigned int Link = (const WordLatticeLC *)Lattice<WordLatticeLC>::createLink((uint64_t)a1, a2, v9, a4);
    char v16 = Link;
    if (a6) {
      *a6 = Link;
    }
    if (a5)
    {
      Lattice<WordLatticeLC>::connectInLink(a1, Link);
      Lattice<WordLatticeLC>::connectOutLink(a1, v16);
    }
    else
    {
      Lattice<WordLatticeLC>::connectInLinkUnordered(a1, Link);
      Lattice<WordLatticeLC>::connectOutLinkUnordered(a1, v16);
    }
    return 1;
  }
  else
  {
    uint64_t v13 = a1[16];
    while (1)
    {
      if (*(_DWORD *)(v13 + 136 * v12 + 120) == v9)
      {
        int v14 = WordLatticeLC::cmpForDuplicateCheck(a4, (const WordLatticeLC *)(v13 + 136 * v12), a3);
        uint64_t v13 = a1[16];
        if (!v14) {
          break;
        }
      }
      uint64_t v12 = *(unsigned int *)(v13 + 136 * v12 + 128);
      if (v12 == -2) {
        goto LABEL_6;
      }
    }
    int v18 = WordLatticeLC::cmpForSameLinkWithDifferentScoresCheck(a4, (const WordLatticeLC *)(v13 + 136 * v12), a3);
    if (v18 >= 1)
    {
      uint64_t v19 = a1[16] + 136 * v12;
      BaseWordLatticeLC::operator=(v19, (uint64_t)a4);
      *(_DWORD *)(v19 + 88) = *((_DWORD *)a4 + 22);
      *(_DWORD *)(v19 + 92) = *((_DWORD *)a4 + 23);
      *(_OWORD *)(v19 + 96) = *((_OWORD *)a4 + 6);
    }
    if (a6) {
      *a6 = v12;
    }
    if (v18 <= 0) {
      return 0;
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
}

unint64_t BackTraceLatticeBuilder::updateLinkBestPathScore(unint64_t this, int a2, unsigned int a3)
{
  uint64_t v5 = this;
  unsigned int v6 = (uint64_t *)(this + 536);
  unsigned int v7 = *(_DWORD *)(this + 544);
  if (v7 <= a3)
  {
    do
    {
      if (v7 == *(_DWORD *)(v5 + 548))
      {
        this = DgnPrimArray<unsigned int>::reallocElts((uint64_t)v6, 1, 1);
        unsigned int v7 = *(_DWORD *)(v5 + 544);
      }
      uint64_t v8 = *(void *)(v5 + 536);
      *(_DWORD *)(v8 + 4 * v7) = 0x7FFFFFFF;
      unsigned int v7 = *(_DWORD *)(v5 + 544) + 1;
      *(_DWORD *)(v5 + 544) = v7;
    }
    while (v7 <= a3);
  }
  else
  {
    uint64_t v8 = *v6;
  }
  int v9 = a2 - *(_DWORD *)(v5 + 12);
  if (v9 < *(_DWORD *)(v8 + 4 * a3))
  {
    *(_DWORD *)(v8 + 4 * a3) = v9;
    if (*(_DWORD *)(v5 + 552) < v9) {
      *(_DWORD *)(v5 + 552) = v9;
    }
  }
  return this;
}

uint64_t BackTraceItemCache::needCreateBTItem(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (result)
  {
    uint64_t v4 = *HashKEV<BackTraceItemHashKey,BackTraceItem,BackTraceItemHashKey>::findBucket(result, (_DWORD *)a2);
    if (v4)
    {
      uint64_t result = 0;
      if (*(unsigned char *)(a2 + 60)) {
        *(unsigned char *)(*(void *)(**(void **)(v4 + 16) + 16 * *(unsigned int *)(v4 + 24))
      }
                 + ((unint64_t)*(unsigned int *)(v4 + 28) << 6)
                 + 60) = 1;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

double BackTraceLatticeBuilder::getBackTraceItem@<D0>(void *a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, unsigned int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, unsigned int a10, LMStats *a11)
{
  int v17 = -50331650;
  unint64_t v18 = *a3;
  if (v18 == -50331650)
  {
    int AccumHistScore = 0;
    int v20 = a7;
  }
  else
  {
    uint64_t v22 = *(void *)(a1[3] + 8) + 36 * a6;
    if ((*(_DWORD *)(a1[6] + 68) & 0xFFFFFFFD) != 0) {
      int v28 = 0;
    }
    else {
      int v28 = *(__int16 *)(*(void *)(*(void *)(*(void *)(**(void **)VocMgr::smpVocMgr + ((v18 >> 22) & 0x3F8))
    }
                                               + 56)
                                   + 288)
                       + 4 * a3[2]);
    unsigned int v23 = (CWIDCrumbBank *)a1[2];
    char v30 = a4;
    uint64_t v29 = a5;
    if (v18 >> 25 == 126 || (v18 & 0xFFFFFF) == 0xFFFFF8) {
      unsigned int v24 = 0;
    }
    else {
      unsigned int v24 = *(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(**(void **)VocMgr::smpVocMgr
    }
                                                                    + ((v18 >> 22) & 0x3F8))
                                                        + 48)
                                            + 592)
                                + 2 * (v18 & 0xFFFFFF));
    int AccumHistScore = CWIDCrumbBank::getAccumHistScore(v23, *(_DWORD *)(v22 + 28) - 1, a6, v24);
    int v20 = a7 - (v28 + BackTraceLatticeBuilder::getLMScore((uint64_t)a1, v22, (uint64_t)a3, 0, a11)) - AccumHistScore;
    int v17 = *a3;
    a4 = v30;
    a5 = v29;
  }
  int v25 = *(_DWORD *)(*(void *)(a2 + 80) + 24 * a10);
  unsigned int v26 = a3[1];
  *(_DWORD *)a9 = v17;
  *(_DWORD *)(a9 + 4) = v26;
  *(_OWORD *)(a9 + 8) = *(_OWORD *)(a3 + 2);
  double result = *(double *)(a5 + 24);
  *(double *)(a9 + 24) = result;
  *(_DWORD *)(a9 + 32) = a8;
  *(_DWORD *)(a9 + 36) = v20;
  *(_DWORD *)(a9 + 40) = a7;
  *(_DWORD *)(a9 + 44) = AccumHistScore;
  *(_DWORD *)(a9 + 48) = a10;
  *(_DWORD *)(a9 + 52) = v25;
  *(_DWORD *)(a9 + 56) = a6;
  *(unsigned char *)(a9 + 60) = a4;
  return result;
}

uint64_t BackTraceLatticeBuilder::stackDecode(BackTraceLatticeBuilder *this, WordLattice *a2, int a3, unsigned int *a4, unsigned int *a5, unsigned int *a6, unsigned int *a7, LMStats *a8)
{
  if (*((_DWORD *)this + 83))
  {
    uint64_t v12 = (char *)this + 448;
    unsigned int v40 = (char *)this + 480;
    unsigned int v41 = (char *)this + 464;
    unsigned int v39 = (void **)((char *)this + 496);
    uint64_t v35 = (char *)this + 312;
    uint64_t v36 = (uint64_t *)((char *)this + 288);
    uint64_t v13 = (char *)this + 184;
    uint64_t v38 = (char *)this + 448;
    do
    {
      uint64_t v14 = *((void *)this + 37);
      uint64_t v15 = *((unsigned int *)this + 82);
      if (!*(_DWORD *)(v14 + 16 * v15 + 8))
      {
        do
          LODWORD(v15) = v15 - 1;
        while (!*(_DWORD *)(v14 + 16 * v15 + 8));
        *((_DWORD *)this + 82) = v15;
      }
      CWIDCrumbBank::getFrameInfoForBTLat(*((_DWORD **)this + 2), *((unsigned __int8 *)this + 424), v15 - 1, (uint64_t)v12, (uint64_t)v41, (uint64_t)v40, v39, *((_DWORD *)this + 100));
      int v16 = *((_DWORD *)this + 107);
      int v17 = *(_DWORD *)(CWIDCrumbBank::getCrumbFrame(*((CWIDCrumbBank **)this + 2), *((_DWORD *)this + 82) - 1) + 24);
      uint64_t v18 = *((void *)this + 37) + 16 * *((unsigned int *)this + 82);
      *((_DWORD *)this + 83) -= *(_DWORD *)(v18 + 8);
      if (*((_DWORD *)this + 114))
      {
        BackTraceItemCache::clearCache(v36);
        BackTraceLatticeBuilder::assembleRightGerms(this, v19);
        int v20 = MemChunkAlloc(0x30uLL, 0);
        *((_DWORD *)v20 + 2) = 0;
        *((unsigned char *)v20 + 32) = 0;
        v20[3] = 0;
        *int v20 = (uint64_t)&unk_26C4E43C0;
        v20[5] = (uint64_t)v35;
        *((_DWORD *)v20 + 3) = *((_DWORD *)this + 80);
        Constraint::prunePreList(*((Constraint **)this + 6), (RecogGermIterator *)v20, 1, v21, v22, v23, v24, v25);
        unsigned int v26 = MemChunkAlloc(0x30uLL, 0);
        *((_DWORD *)v26 + 2) = 0;
        v26[3] = 0;
        *unsigned int v26 = (uint64_t)&unk_26C4E3330;
        v26[5] = (uint64_t)v12;
        int v27 = *((_DWORD *)this + 114);
        *((_DWORD *)v26 + 3) = v27;
        *a5 += v27;
        uint64_t v44 = 0x3FFFFAFFFFFFLL;
        long long v45 = xmmword_2140866D0;
        char v46 = 0;
        int v47 = 1310720000;
        __int16 v48 = 0;
        uint64_t v49 = 0x70000000FFFFFFFELL;
        *((unsigned char *)v26 + 32) = 0;
        *((_DWORD *)v26 + 2) = 0;
        if (*((_DWORD *)v26 + 3))
        {
          int v28 = v17 + v16;
          while (1)
          {
            (*(void (**)(uint64_t *, uint64_t *))(*v26 + 16))(v26, &v44);
            unsigned int v29 = *((_DWORD *)v26 + 2);
            BtNBestResult::prepare((uint64_t)v13, *((void *)this + 60) + 24 * v29, (unsigned int *)&v44, v28);
            if (BackTraceLatticeBuilder::seedAllRightGerms((unint64_t)this, (unsigned int *)&v44, v29, (uint64_t)a2, 0, a4, a6, a7, a8)|| (BackTraceLatticeBuilder::seedFinalSilence((unint64_t)this, (unsigned int *)&v44, v29, (uint64_t)a2, a3, a7, a8) & 1) != 0)
            {
              break;
            }
            int v30 = *((_DWORD *)v26 + 2) + 1;
            *((_DWORD *)v26 + 2) = v30;
            if (*((unsigned char *)v26 + 32))
            {
              (*(void (**)(uint64_t *))(*v26 + 24))(v26);
              int v30 = *((_DWORD *)v26 + 2);
            }
            if (v30 == *((_DWORD *)v26 + 3)) {
              goto LABEL_14;
            }
          }
          int v31 = 1;
        }
        else
        {
LABEL_14:
          int v31 = 0;
        }
        uint64_t v12 = v38;
        DgnDelete<RecogGermIterator>((void (***)(void))v26);
        DgnDelete<RecogGermIterator>((void (***)(void))v20);
        uint64_t v32 = *((void *)this + 37) + 16 * *((unsigned int *)this + 82);
        if (*(void *)v32)
        {
          MemChunkFree(*(void **)v32, 0);
          *(void *)uint64_t v32 = 0;
        }
        *(void *)(v32 + 8) = 0;
        *((_DWORD *)this + 80) = 0;
      }
      else
      {
        if (*(void *)v18)
        {
          MemChunkFree(*(void **)v18, 0);
          *(void *)uint64_t v18 = 0;
        }
        int v31 = 0;
        *(void *)(v18 + 8) = 0;
        uint64_t v12 = v38;
      }
    }
    while (*((_DWORD *)this + 83) && !v31);
    if (v31) {
      return 1;
    }
  }
  WordLattice::resortLatticeLinks(a2);
  return 0;
}

uint64_t *BackTraceItemCache::clearCache(uint64_t *this)
{
  uint64_t v1 = *this;
  if (*this)
  {
    *(_DWORD *)(v1 + 8) = 0;
    uint64_t v2 = *(unsigned int *)(v1 + 88);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        *(void *)(*(void *)(v1 + 80) + v3) = 0;
        v3 += 8;
      }
      while (v4 != v3);
    }
    return DgnPool::deleteAllWithoutDestroying((DgnPool *)(v1 + 24));
  }
  return this;
}

BOOL BackTraceLatticeBuilder::seedAllRightGerms(unint64_t a1, unsigned int *a2, unsigned int a3, uint64_t a4, uint64_t a5, _DWORD *a6, _DWORD *a7, _DWORD *a8, LMStats *a9)
{
  v86[0] = 0;
  v85[0] = 0;
  v85[1] = 0;
  if (*(_DWORD *)(a1 + 320))
  {
    uint64_t Legal = Constraint::getLegal(*(void *)(a1 + 48), a2, 0, 0, v86, *(_DWORD *)(a1 + 328), a6, 0, 0, (uint64_t)v85, 1);
    int v13 = v86[0];
    if (v86[0])
    {
      signed int v64 = (AcousticContextScores *)(*(void *)(a1 + 480) + 24 * a3);
      uint64_t v14 = (unsigned int *)*((void *)v64 + 2);
      if (v14 && v14[2] != 1879048192)
      {
        unsigned int v66 = BtNBestResult::maybeGetNBest<true>(a1 + 184);
        int v73 = 1;
        int v13 = v86[0];
      }
      else
      {
        int v73 = 0;
        unsigned int v66 = 0;
      }
      *a7 += v13;
      unint64_t v63 = *(unsigned __int16 *)(Legal + 8);
      if (*(_WORD *)(Legal + 8))
      {
        uint64_t v15 = 0;
        BOOL v16 = 1;
        uint64_t v72 = a3;
        int v68 = v14;
        do
        {
          uint64_t HistAndScore = AcousticContextScores::getHistAndScore(v64, (unsigned __int16)v15);
          BOOL v62 = v16;
          unsigned int v75 = (unsigned int *)HistAndScore;
          if (HistAndScore)
          {
            int v18 = *(_DWORD *)(HistAndScore + 8);
            char v19 = v73;
            if (v18 != 1879048192) {
              char v19 = 1;
            }
            if ((v19 & 1) == 0) {
              goto LABEL_73;
            }
            if (v18 != 1879048192)
            {
              uint64_t v65 = BtNBestResult::maybeGetNBest<false>(a1 + 184, (unsigned __int16)v15);
              goto LABEL_17;
            }
          }
          else if ((v73 & 1) == 0)
          {
            goto LABEL_73;
          }
          uint64_t v65 = 0;
LABEL_17:
          uint64_t v76 = *(void *)Legal + 16 * v15;
          if (*(_DWORD *)(v76 + 8))
          {
            uint64_t v20 = 0;
            unint64_t v21 = 0;
            uint64_t v71 = v15;
            while (2)
            {
              uint64_t v22 = *(void *)v76;
              uint64_t v23 = (unsigned int *)(*(void *)v76 + v20);
              uint64_t v24 = (void **)VocMgr::smpVocMgr;
              unint64_t v25 = (unint64_t)*v23 >> 25;
              if (v25 == 126) {
                uint64_t v26 = 0;
              }
              else {
                uint64_t v26 = *(void *)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * v25) + 56);
              }
              uint64_t v27 = v23[2];
              if (v27 && *(_WORD *)(*(void *)(v26 + 528) + 2 * v27) != 127) {
                *(_DWORD *)(v22 + v20 + 20) = -83886084;
              }
              unint64_t v28 = *a2;
              BOOL v29 = v28 >> 25 != 126 && a2[2] == v27;
              if ((!v29
                 || *(_WORD *)(*(void *)(*(void *)(*(void *)(**v24 + ((v28 >> 22) & 0x3F8)) + 56) + 528)
                             + 2 * v27) == 127)
                && !BackTraceLatticeBuilder::canSeedInLMContext(a1, a2, v23))
              {
                goto LABEL_72;
              }
              if (*(unsigned char *)(a1 + 512))
              {
                uint64_t v30 = *(void *)(*(void *)(a1 + 24) + 8);
                unsigned int v31 = *(_DWORD *)(v30 + 36 * *(unsigned int *)(v22 + v20 + 32) + 32);
                if (CWIDAC::operator==(v30 + 36 * v31, (uint64_t)a2))
                {
                  uint64_t v32 = (_DWORD *)AcousticContextScores::getHistAndScore((AcousticContextScores *)(*(void *)(a1 + 480) + 24 * v72), (unsigned __int16)v15);
                  if (v32)
                  {
                    BOOL v33 = v31 == *v32;
                    if (!v68)
                    {
LABEL_41:
                      BOOL v36 = 0;
                      BOOL v37 = 1;
                      goto LABEL_43;
                    }
                  }
                  else
                  {
                    BOOL v33 = 0;
                    if (!v68) {
                      goto LABEL_41;
                    }
                  }
                  if (v68[2] == 1879048192) {
                    goto LABEL_41;
                  }
                  BOOL v37 = v31 != *v68;
                  BOOL v36 = v31 == *v68;
LABEL_43:
                  if (v33 || !v37)
                  {
                    char v34 = 0;
                    char v74 = 0;
                  }
                  else
                  {
                    unsigned int v38 = v31 - *(_DWORD *)(a1 + 528);
                    char v34 = v38 == CWIDCrumbBank::getHistory(*(void *)(a1 + 520), *(_DWORD *)(a1 + 328) - 1, *(void *)(*(void *)(a1 + 24) + 8) + 36 * v38, (unsigned __int16)v15);
                    char v74 = v38 == CWIDCrumbBank::getSilHistory(*(void *)(a1 + 520), *(_DWORD *)(a1 + 328) - 1, *(void *)(*(void *)(a1 + 24) + 8) + 36 * v38);
                  }
                }
                else
                {
                  char v34 = 0;
                  char v74 = 0;
                  BOOL v36 = 1;
                }
                BOOL v35 = v36;
              }
              else
              {
                char v34 = 0;
                char v74 = 0;
                BOOL v35 = 1;
              }
              int v77 = *(__int16 *)(v22 + v20 + 26);
              int v84 = 0;
              int LMScore = 1879048192;
              if (v75)
              {
                unsigned int v40 = v75[2];
                if (v40 != 1879048192)
                {
                  a2[9] = v40;
                  unsigned int v41 = *v75;
                  a2[8] = *v75;
                  *((unsigned char *)a2 + 24) = *(unsigned char *)(*(void *)(a1 + 496) + v72);
                  if (*(unsigned char *)(a1 + 277)) {
                    unsigned int v67 = 0;
                  }
                  else {
                    unsigned int v67 = v75[1];
                  }
                  unsigned int v42 = a2[1];
                  unsigned int v81 = *a2;
                  unsigned int v82 = v42;
                  long long v83 = *(_OWORD *)(a2 + 2);
                  int v78 = *(_DWORD *)(v22 + v20);
                  int v79 = *(_DWORD *)(v22 + v20 + 4);
                  long long v80 = *(_OWORD *)(v23 + 2);
                  if (*(unsigned char *)(a1 + 512))
                  {
                    int v43 = *(_DWORD *)(a1 + 528);
                    uint64_t v44 = *(void *)(*(void *)(a1 + 24) + 8);
                    uint64_t v45 = v44 + 36 * (v41 - v43);
                    unsigned int v81 = *(_DWORD *)v45;
                    unsigned int v82 = *(_DWORD *)(v45 + 4);
                    long long v83 = *(_OWORD *)(v45 + 8);
                    char v46 = (int *)(v44 + 36 * (*(_DWORD *)(v22 + v20 + 32) - v43));
                    int v78 = *v46;
                    int v79 = v46[1];
                    long long v80 = *(_OWORD *)(v46 + 2);
                  }
                  int LMScore = BackTraceLatticeBuilder::getLMScore(a1, (uint64_t)&v81, (uint64_t)&v78, (unsigned int *)&v84, a9);
                  ++*a8;
                  if (BackTraceLatticeBuilder::seedOneInContext(a1, 0, v23, a2, LMScore, v77, v67, v84, a4, a9, v65, v34))goto LABEL_76; {
                }
                  }
              }
              if (v73)
              {
                unint64_t v47 = *v23;
                if (v47 >> 25 == 126
                  || (uint64_t v48 = *(void *)(*(void *)(**(void **)VocMgr::smpVocMgr + ((v47 >> 22) & 0x3F8)) + 48),
                      uint64_t v49 = v47 & 0xFFFFFF,
                      *(_WORD *)(*(void *)(v48 + 32) + 2 * v49) != 1)
                  || *(_WORD *)(*(void *)(v48 + 592) + 2 * v49))
                {
                  a2[9] = v68[2];
                  unsigned int v50 = *v68;
                  a2[8] = *v68;
                  *((unsigned char *)a2 + 24) = *(unsigned char *)(*(void *)(a1 + 496) + v72);
                  if (*(unsigned char *)(a1 + 277)) {
                    unsigned int v51 = 0;
                  }
                  else {
                    unsigned int v51 = v68[1];
                  }
                  int v52 = *(unsigned __int8 *)(a1 + 512);
                  if (*(unsigned char *)(a1 + 512)) {
                    BOOL v53 = v35;
                  }
                  else {
                    BOOL v53 = 0;
                  }
                  if (LMScore == 1879048192 || v53)
                  {
                    unsigned int v54 = a2[1];
                    unsigned int v81 = *a2;
                    unsigned int v82 = v54;
                    long long v83 = *(_OWORD *)(a2 + 2);
                    int v78 = *(_DWORD *)(v22 + v20);
                    int v79 = *(_DWORD *)(v22 + v20 + 4);
                    long long v80 = *(_OWORD *)(v23 + 2);
                    if (v52)
                    {
                      int v55 = *(_DWORD *)(a1 + 528);
                      uint64_t v56 = *(void *)(*(void *)(a1 + 24) + 8);
                      uint64_t v57 = v56 + 36 * (v50 - v55);
                      unsigned int v81 = *(_DWORD *)v57;
                      unsigned int v82 = *(_DWORD *)(v57 + 4);
                      long long v83 = *(_OWORD *)(v57 + 8);
                      int v58 = (int *)(v56 + 36 * (*(_DWORD *)(v22 + v20 + 32) - v55));
                      int v78 = *v58;
                      int v79 = v58[1];
                      long long v80 = *(_OWORD *)(v58 + 2);
                    }
                    int LMScore = BackTraceLatticeBuilder::getLMScore(a1, (uint64_t)&v81, (uint64_t)&v78, (unsigned int *)&v84, a9);
                  }
                  ++*a8;
                  if (BackTraceLatticeBuilder::seedOneInContext(a1, 0, v23, a2, LMScore, v77, v51, v84, a4, a9, (uint64_t)v66, v74))
                  {
LABEL_76:
                    BOOL v59 = v62;
                    goto LABEL_75;
                  }
                }
              }
              uint64_t v15 = v71;
LABEL_72:
              ++v21;
              v20 += 44;
              if (v21 >= *(unsigned int *)(v76 + 8)) {
                break;
              }
              continue;
            }
          }
LABEL_73:
          BOOL v16 = ++v15 < v63;
        }
        while (v15 != v63);
      }
    }
  }
  BOOL v59 = 0;
LABEL_75:
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v85);
  return v59;
}

void sub_213F6DD7C(_Unwind_Exception *a1)
{
  DgnIArray<Utterance *>::~DgnIArray(v1 - 112);
  _Unwind_Resume(a1);
}

uint64_t BackTraceLatticeBuilder::seedFinalSilence(unint64_t a1, unsigned int *a2, unsigned int a3, uint64_t a4, int a5, _DWORD *a6, LMStats *a7)
{
  unint64_t v14 = *a2;
  uint64_t v15 = v14 & 0xFFFFFF;
  BOOL v16 = (v14 & 0xFFFFFF) == 0xFFFFF8 || (v14 & 0xFE000000) == -67108864;
  if (v16
    || (uint64_t v17 = *(void *)(*(void *)(**(void **)VocMgr::smpVocMgr + ((v14 >> 22) & 0x3F8)) + 48),
        *(_WORD *)(*(void *)(v17 + 32) + 2 * v15) != 1)
    || *(_WORD *)(*(void *)(v17 + 592) + 2 * v15))
  {
    char CanSeedFinalSilence = Constraint::getCanSeedFinalSilence(*(void *)(a1 + 48), a2, *(_DWORD *)(a1 + 328));
  }
  else
  {
    char CanSeedFinalSilence = 0;
  }
  uint64_t v19 = *(void *)(a1 + 480);
  uint64_t v20 = a3;
  uint64_t v21 = v19 + 24 * a3;
  uint64_t v22 = *(unsigned __int8 ***)(v21 + 8);
  if (v22 && *((_DWORD *)v22 + 2) && (unsigned int v23 = **v22, v23 != 255))
  {
    if (v23 == 254) {
      uint64_t v24 = *(unsigned int **)(v19 + 24 * a3 + 16);
    }
    else {
      uint64_t v24 = (unsigned int *)(**(void **)v21 + 12 * v23);
    }
  }
  else
  {
    uint64_t v24 = 0;
  }
  if (*(_DWORD *)(a1 + 336) == -2) {
    return 0;
  }
  if (CanSeedFinalSilence)
  {
    if (!v24) {
      return 0;
    }
  }
  else
  {
    uint64_t result = 0;
    if (!a5 || !v24) {
      return result;
    }
  }
  if (v24[2] == 1879048192) {
    return 0;
  }
  char v36 = *(unsigned char *)(a1 + 512)
     && (uint64_t v26 = *(void *)(*(void *)(a1 + 24) + 8),
         unsigned int v27 = *(_DWORD *)(v26 + 36 * *(unsigned int *)(a1 + 372) + 32),
         uint64_t v28 = v26 + 36 * v27,
         CWIDAC::operator==(v28, (uint64_t)a2))
     && *(_DWORD *)(v28 + 28) == *(_DWORD *)(a1 + 328)
     && v27 != *v24;
  a2[9] = v24[2];
  unsigned int v29 = *v24;
  a2[8] = *v24;
  *((unsigned char *)a2 + 24) = *(unsigned char *)(*(void *)(a1 + 496) + v20);
  if (*(unsigned char *)(a1 + 277)) {
    unsigned int v30 = 0;
  }
  else {
    unsigned int v30 = v24[1];
  }
  unsigned int v31 = a2[1];
  unsigned int v37 = *a2;
  unsigned int v38 = v31;
  long long v39 = *(_OWORD *)(a2 + 2);
  if (*(unsigned char *)(a1 + 512))
  {
    uint64_t v32 = *(void *)(*(void *)(a1 + 24) + 8) + 36 * (v29 - *(_DWORD *)(a1 + 528));
    unsigned int v37 = *(_DWORD *)v32;
    unsigned int v38 = *(_DWORD *)(v32 + 4);
    long long v39 = *(_OWORD *)(v32 + 8);
  }
  int LMScore = BackTraceLatticeBuilder::getLMScore(a1, (uint64_t)&v37, a1 + 340, 0, a7);
  int v34 = *(__int16 *)(a1 + 366);
  ++*a6;
  uint64_t v35 = BtNBestResult::maybeGetNBest<false>(a1 + 184, 0);
  return BackTraceLatticeBuilder::seedOneInContext(a1, 0, (unsigned int *)(a1 + 340), a2, LMScore, v34, v30, 0, a4, a7, v35, v36);
}

void *BtNBestResult::maybeGetNBest<true>(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 93) || *(_DWORD *)(a1 + 8) == -50331650 || *(unsigned char *)(a1 + 94)) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 92)) {
    return (void *)(a1 + 72);
  }
  uint64_t NBest = NetNBestAlg::getNBest(*(NetNBestAlg **)a1, **(unsigned int **)(*(void *)(a1 + 32) + 16), *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 16) + 4), *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 16) + 8), *(_DWORD *)(a1 + 88));
  uint64_t v2 = (void *)(a1 + 72);
  uint64_t v5 = *(unsigned int *)(NBest + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 84);
  if (v5 > v6) {
    DgnArray<RuleDesc>::reallocElts(a1 + 72, v5 - v6, 0);
  }
  uint64_t v7 = *(unsigned int *)(a1 + 80);
  if (v7 < v5)
  {
    uint64_t v8 = v5 - v7;
    uint64_t v9 = 12 * v7;
    do
    {
      uint64_t v10 = *v2 + v9;
      *(void *)uint64_t v10 = 0x70000000FFFFFFFELL;
      *(_DWORD *)(v10 + 8) = 1879048192;
      v9 += 12;
      --v8;
    }
    while (v8);
  }
  *(_DWORD *)(a1 + 80) = v5;
  if (v5)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = (int *)(*(void *)NBest + v11);
      int v13 = *v12;
      LODWORD(v12) = v12[2];
      unint64_t v14 = (_DWORD *)(*v2 + v11);
      v14[1] = -1;
      v14[2] = v12;
      *unint64_t v14 = v13;
      v11 += 12;
    }
    while (12 * v5 != v11);
  }
  *(unsigned char *)(a1 + 92) = 1;
  return v2;
}

uint64_t AcousticContextScores::getHistAndScore(AcousticContextScores *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (!v2) {
    return 0;
  }
  if (*(_DWORD *)(v2 + 8) <= a2) {
    return 0;
  }
  unsigned int v3 = *(unsigned __int8 *)(*(void *)v2 + a2);
  if (v3 == 255) {
    return 0;
  }
  if (v3 == 254) {
    return *((void *)this + 2);
  }
  return **(void **)this + 12 * v3;
}

uint64_t BtNBestResult::maybeGetNBest<false>(uint64_t a1, unsigned int a2)
{
  if (!*(unsigned char *)(a1 + 93) || *(_DWORD *)(a1 + 8) == -50331650 || *(unsigned char *)(a1 + 94)) {
    return 0;
  }
  uint64_t v6 = a2 >> 5;
  int v7 = 1 << a2;
  if ((*(_DWORD *)(*(void *)(a1 + 40) + 4 * v6) & (1 << a2)) != 0) {
    return *(void *)(a1 + 56) + 16 * a2;
  }
  uint64_t HistAndScore = (unsigned int *)AcousticContextScores::getHistAndScore(*(AcousticContextScores **)(a1 + 32), a2);
  uint64_t NBest = NetNBestAlg::getNBest(*(NetNBestAlg **)a1, *HistAndScore, HistAndScore[1], HistAndScore[2], *(_DWORD *)(a1 + 88));
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v11 = a2;
  uint64_t v3 = v10 + 16 * a2;
  uint64_t v12 = *(unsigned int *)(NBest + 8);
  unsigned int v13 = *(_DWORD *)(v3 + 12);
  if (v12 > v13) {
    DgnArray<RuleDesc>::reallocElts(v3, v12 - v13, 0);
  }
  uint64_t v14 = v10 + 16 * v11;
  unsigned int v17 = *(_DWORD *)(v14 + 8);
  uint64_t v15 = (_DWORD *)(v14 + 8);
  uint64_t v16 = v17;
  if (v17 < v12)
  {
    uint64_t v18 = v12 - v16;
    uint64_t v19 = 12 * v16;
    do
    {
      uint64_t v20 = *(void *)v3 + v19;
      *(void *)uint64_t v20 = 0x70000000FFFFFFFELL;
      *(_DWORD *)(v20 + 8) = 1879048192;
      v19 += 12;
      --v18;
    }
    while (v18);
  }
  *uint64_t v15 = v12;
  if (v12)
  {
    uint64_t v21 = 0;
    do
    {
      uint64_t v22 = (int *)(*(void *)NBest + v21);
      int v23 = *v22;
      LODWORD(v22) = v22[2];
      uint64_t v24 = (_DWORD *)(*(void *)v3 + v21);
      v24[1] = -1;
      v24[2] = v22;
      *uint64_t v24 = v23;
      v21 += 12;
    }
    while (12 * v12 != v21);
  }
  *(_DWORD *)(*(void *)(a1 + 40) + 4 * v6) |= v7;
  return v3;
}

BOOL BackTraceLatticeBuilder::canSeedInLMContext(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v6 = a3[4];
  int Root = VocMgr::getRoot((VocMgr *)VocMgr::smpVocMgr, *a2);
  if (Root != -50331650 && v6 != -83886084 && v6 != Root) {
    return 0;
  }
  int v23 = 0;
  uint64_t v24 = 0;
  unint64_t v10 = *a3;
  if (v10 >> 25 == 126 || (v10 & 0xFFFFFF) == 0xFFFFF8) {
    unsigned int v11 = 0;
  }
  else {
    unsigned int v11 = *(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(**(void **)VocMgr::smpVocMgr
  }
                                                                  + ((v10 >> 22) & 0x3F8))
                                                      + 48)
                                          + 592)
                              + 2 * (v10 & 0xFFFFFF));
  uint64_t v13 = v11 + 1;
  unint64_t v25 = 0;
  HIDWORD(v24) = realloc_array(0, &v25, (16 * v13), 0, 0, 1) >> 4;
  int v23 = v25;
  if (v24 <= v13)
  {
    if (v24 <= v11)
    {
      unint64_t v16 = v11 - (unint64_t)v24 + 1;
      uint64_t v17 = 2 * v24;
      do
      {
        uint64_t v18 = &v23[v17];
        *uint64_t v18 = 0;
        v18[1] = 0;
        v17 += 2;
        --v16;
      }
      while (v16);
    }
  }
  else
  {
    uint64_t v14 = (int)v24;
    if ((int)v24 > (int)v13)
    {
      uint64_t v15 = 16 * (int)v24 - 16;
      do
      {
        --v14;
        DgnIArray<Utterance *>::~DgnIArray((uint64_t)v23 + v15);
        v15 -= 16;
      }
      while (v14 > v13);
    }
  }
  LODWORD(v24) = v11 + 1;
  uint64_t v19 = (char *)&v23[2 * v11];
  uint64_t v21 = (unsigned int *)(v19 + 8);
  unsigned int v20 = *((_DWORD *)v19 + 2);
  if (v20 == *((_DWORD *)v19 + 3))
  {
    DgnArray<RecogGerm>::reallocElts((uint64_t)&v23[2 * v11], 1, 1);
    unsigned int v20 = *v21;
  }
  RecogGerm::operator=(*(void *)v19 + 44 * v20, (uint64_t)a3);
  ++*v21;
  SearchLMScorer::setContext(*(void *)(a1 + 56), 4211081212, a2, (uint64_t)&v23, 0, 0, 0, a3[5] != -83886084, a3[5], 0xFAFFFFFC);
  BOOL v12 = RecogGerm::operator==(v23[2 * v11], (uint64_t)a3);
  DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)&v23);
  return v12;
}

void sub_213F6E5B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)va);
  _Unwind_Resume(a1);
}

void BackTraceLatticeBuilder::maybeEnableNBestGeneration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 && (*(void *)(a2 + 16) || *(_DWORD *)(a2 + 32)))
  {
    if (*(unsigned char *)(a1 + 512)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/btlat.cpp", 2797, (uint64_t)"kernel/btlat", 1, (uint64_t)"%.500s", a7, a8, (char)"TrigramsWithBigramLattice");
    }
    if ((*(_DWORD *)(a1 + 400) & 0x80000000) == 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/btlat.cpp", 2800, (uint64_t)"kernel/btlat", 1, (uint64_t)"%.500s", a7, a8, (char)"LatticeBestCrumbDistancemaxFrames");
    }
    *(unsigned char *)(a1 + 277) = 1;
    int v11 = *(unsigned __int8 *)(a1 + 424);
    *(unsigned char *)(a1 + 278) = v11;
    if (!v11)
    {
      BtNBestResult::init((uint64_t *)(a1 + 184), a2, a3);
    }
  }
}

_DWORD *BackTraceLatticeBuilder::pruneLinks(_DWORD *this, WordLattice *a2, int a3, double a4)
{
  LODWORD(a4) = this[99];
  unsigned int v4 = ((double)(this[1] * a3) / 1000000.0 * (double)*(unint64_t *)&a4);
  if (*((_DWORD *)a2 + 26) > v4)
  {
    unsigned int v6 = this;
    int v7 = this[138];
    unsigned int v20 = 0;
    uint64_t v21 = 0;
    unint64_t v8 = (v7 + 1);
    if (v7 == -1)
    {
      uint64_t v9 = 0;
      LODWORD(v21) = v8;
    }
    else
    {
      uint64_t v22 = 0;
      unint64_t v10 = realloc_array(0, &v22, 4 * (v7 + 1), 0, 0, 1);
      unint64_t v11 = 0;
      uint64_t v9 = v22;
      unsigned int v20 = v22;
      LODWORD(v21) = v8;
      HIDWORD(v21) = v10 >> 2;
      do
        v9[v11++] = 0;
      while (v11 < v8);
    }
    BOOL v12 = (uint64_t *)(v6 + 134);
    if (v6[136])
    {
      uint64_t v13 = 0;
      uint64_t v14 = *v12;
      while (1)
      {
        uint64_t v15 = *(unsigned int *)(v14 + 4 * v13);
        unint64_t v16 = v9;
        if ((int)v15 < 1) {
          goto LABEL_11;
        }
        if (v15 != 0x7FFFFFFF) {
          break;
        }
LABEL_12:
        if (++v13 >= (unint64_t)v6[136]) {
          goto LABEL_13;
        }
      }
      unint64_t v16 = &v9[v15];
LABEL_11:
      ++*v16;
      goto LABEL_12;
    }
LABEL_13:
    if (v8)
    {
      uint64_t v17 = 0;
      unsigned int v18 = 0;
      while (1)
      {
        int v19 = v9[v17];
        if (v19)
        {
          v18 += v19;
          if (v18 >= v4) {
            break;
          }
        }
        if (v8 == ++v17) {
          return (_DWORD *)DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v20);
        }
      }
      Lattice<WordLatticeLC>::pruneLinks((unint64_t)a2, v17, v12);
    }
    return (_DWORD *)DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v20);
  }
  return this;
}

void sub_213F6E82C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Lattice<WordLatticeLC>::pruneLinks(unint64_t a1, int a2, void *a3)
{
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  unint64_t v4 = *(unsigned int *)(a1 + 104);
  if (v4)
  {
    uint64_t v7 = 0;
    unsigned int v8 = 0;
    for (unint64_t i = 0; i < v4; ++i)
    {
      unsigned int v10 = *(_DWORD *)(*(void *)(a1 + 96) + 4 * i);
      if (*(_DWORD *)(*a3 + 4 * *(unsigned int *)(*(void *)(a1 + 128) + 136 * v10 + 112)) > a2)
      {
        if (v8 == HIDWORD(v24))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v23, 1, 1);
          unsigned int v8 = v24;
          uint64_t v7 = v23;
        }
        *(_DWORD *)(v7 + 4 * v8) = v10;
        unsigned int v8 = v24 + 1;
        LODWORD(v24) = v24 + 1;
        unint64_t v4 = *(unsigned int *)(a1 + 104);
      }
    }
  }
  while (v24)
  {
    unsigned int v11 = *(_DWORD *)(v23 + 4 * (v24 - 1));
    LODWORD(v24) = v24 - 1;
    Lattice<WordLatticeLC>::disconnectAndDestroyLink(a1, v11);
  }
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  unint64_t v12 = *(unsigned int *)(a1 + 40);
  if (v12)
  {
    uint64_t v13 = 0;
    unsigned int v14 = 0;
    unint64_t v15 = 0;
    unint64_t v16 = *(unsigned int *)(a1 + 56);
    unint64_t v17 = v16;
    do
    {
      if (v17)
      {
        unint64_t v18 = 0;
        int v19 = *(_DWORD *)(*(void *)(a1 + 32) + 4 * v15);
        do
        {
          if (v19 == *(_DWORD *)(*(void *)(a1 + 48) + 4 * v18))
          {
            if (v14 == HIDWORD(v22))
            {
              DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v21, 1, 1);
              unsigned int v14 = v22;
              uint64_t v13 = v21;
            }
            *(_DWORD *)(v13 + 4 * v14) = v19;
            unsigned int v14 = v22 + 1;
            LODWORD(v22) = v22 + 1;
            unint64_t v16 = *(unsigned int *)(a1 + 56);
          }
          ++v18;
        }
        while (v18 < v16);
        unint64_t v12 = *(unsigned int *)(a1 + 40);
        unint64_t v17 = v16;
      }
      ++v15;
    }
    while (v15 < v12);
    if (v14) {
      Lattice<WordLatticeLC>::destroyNodesUsingGcMarks(a1, (uint64_t)&v21);
    }
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v21);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v23);
}

void sub_213F6E9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t *BackTraceLatticeBuilder::makeLattice(BackTraceLatticeBuilder *this, __int16 a2, PelScorer *a3, int a4, char a5, int a6, LatticeStats *a7, int a8, unsigned int a9, unsigned int a10, char a11)
{
  *((_DWORD *)this + 107) = a8;
  *((_DWORD *)this + 1) = CWIDCrumbBank::getLastFrame(*((CWIDCrumbBank **)this + 2)) + 1;
  BackTraceLatticeBuilder::maybeEnableNBestGeneration((uint64_t)this, *((void *)this + 4), *((void *)this + 3), v16, v17, v18, v19, v20);
  *((_DWORD *)this + 83) = 0;
  uint64_t v21 = (void *)((char *)this + 296);
  uint64_t v22 = *((unsigned int *)this + 1);
  unsigned int v23 = *((_DWORD *)this + 77);
  if (v22 > v23) {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 296, v22 - v23, 0);
  }
  uint64_t v24 = *((unsigned int *)this + 76);
  if (v24 <= v22)
  {
    if (v24 < v22)
    {
      uint64_t v27 = v22 - v24;
      uint64_t v28 = 16 * v24;
      do
      {
        unsigned int v29 = (void *)(*v21 + v28);
        *unsigned int v29 = 0;
        v29[1] = 0;
        v28 += 16;
        --v27;
      }
      while (v27);
    }
  }
  else if ((int)v24 > (int)v22)
  {
    uint64_t v25 = (int)v24;
    uint64_t v26 = 16 * (int)v24 - 16;
    do
    {
      --v25;
      DgnIArray<Utterance *>::~DgnIArray(*v21 + v26);
      v26 -= 16;
    }
    while (v25 > (int)v22);
  }
  *((_DWORD *)this + 76) = v22;
  if (v22)
  {
    unsigned int v30 = (_DWORD *)(*v21 + 8);
    do
    {
      *unsigned int v30 = 0;
      v30 += 4;
      --v22;
    }
    while (v22);
  }
  unsigned int v74 = -2;
  int v73 = 1879048192;
  CWIDCrumbBank::getRightSilenceInfo(*((void *)this + 2), *((_DWORD *)this + 1) - 1, &v74, &v73);
  if (a5)
  {
    uint64_t v31 = *(void *)(*((void *)this + 3) + 8)
        + 36 * *(unsigned int *)(*(void *)(*((void *)this + 3) + 8) + 36 * v74 + 32);
    uint64_t v71 = 0x3FFFFCFFFFFDLL;
    long long v72 = xmmword_2140866D0;
    int LMScore = BackTraceLatticeBuilder::getLMScore((uint64_t)this, v31, (uint64_t)&v71, 0, (LatticeStats *)((char *)a7 + 48));
    int v33 = v73 + LMScore;
    v73 += LMScore;
  }
  else
  {
    int v33 = v73;
  }
  *((_DWORD *)this + 3) = v33;
  *((_DWORD *)this + 138) = 0x80000000;
  if (a6)
  {
    int v34 = *((_DWORD *)this + 98);
    if (v34 < 0)
    {
      double v36 = fround(*((double *)this + 48), 3);
      if (v73 < 0) {
        double v36 = -v36;
      }
      int v35 = (int)((v36 + (double)*((int *)this + 1)) * (double)v73 / (double)*((int *)this + 1));
    }
    else
    {
      int v35 = v34 + v33;
    }
  }
  else
  {
    int v35 = 1879048192;
  }
  *((_DWORD *)this + 2) = v35;
  int v37 = *((_DWORD *)this + 1) - *(char *)(*((void *)this + 2) + 48);
  unsigned int v38 = MemChunkAlloc(0x120uLL, 0);
  WordLattice::WordLattice((WordLattice *)v38, v37, a9, a10, a2, *((unsigned char *)this + 64), a11, 0, *(unsigned char *)this == 0);
  long long v39 = (LatticeStats *)((char *)a7 + 48);
  BackTraceLatticeBuilder::bootStrap((BackTraceNodeCache **)this, (WordLattice *)v38, v40, 0, v41);
  unsigned int v42 = (unsigned int *)((char *)a7 + 4);
  int v43 = (unsigned int *)((char *)a7 + 8);
  uint64_t v44 = (unsigned int *)a7;
  uint64_t v45 = (unsigned int *)((char *)a7 + 12);
  char v46 = v43;
  int v69 = v44;
  int v47 = BackTraceLatticeBuilder::stackDecode(this, (WordLattice *)v38, a4, v44, v42, v43, v45, v39);
  if (!v47)
  {
    unsigned int v51 = v69;
    goto LABEL_46;
  }
  unsigned int v66 = v45;
  unsigned int v67 = v46;
  char v68 = v47;
  DgnDelete<WordLattice>((uint64_t)v38);
  unsigned int v38 = MemChunkAlloc(0x120uLL, 0);
  WordLattice::WordLattice((WordLattice *)v38, v37, a9, a10, a2, *((unsigned char *)this + 64), a11, 1, *(unsigned char *)this == 0);
  if (*((unsigned char *)this + 425)) {
    Hash<BackTraceLinkPair,BackTraceLinkPair,BackTraceLinkPair,int>::removeAll(*((void *)this + 70));
  }
  *((unsigned char *)this + 424) = 1;
  *((unsigned char *)this + 277) = 0;
  *((void *)this + 51) = 0;
  *((void *)this + 52) = 0;
  uint64_t v49 = *((unsigned int *)this + 76);
  unsigned int v50 = v42;
  unsigned int v51 = v69;
  if ((int)v49 >= 1)
  {
    uint64_t v52 = 16 * v49 - 16;
    do
    {
      DgnIArray<Utterance *>::~DgnIArray(*v21 + v52);
      v52 -= 16;
    }
    while (v52 != -16);
  }
  unsigned int v53 = 0;
  *((_DWORD *)this + 76) = 0;
  *((_DWORD *)this + 83) = 0;
  uint64_t v54 = *((unsigned int *)this + 1);
  unsigned int v55 = *((_DWORD *)this + 77);
  if (v54 <= v55
    || (DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 296, v54 - v55, 0),
        unsigned int v53 = *((_DWORD *)this + 76),
        v53 <= v54))
  {
    if (v53 < v54)
    {
      uint64_t v58 = v54 - v53;
      uint64_t v59 = 16 * v53;
      do
      {
        signed int v60 = (void *)(*v21 + v59);
        void *v60 = 0;
        v60[1] = 0;
        v59 += 16;
        --v58;
      }
      while (v58);
    }
  }
  else
  {
    if ((int)v53 <= (int)v54)
    {
      *((_DWORD *)this + 76) = v54;
LABEL_43:
      int v61 = (_DWORD *)(*v21 + 8);
      do
      {
        *int v61 = 0;
        v61 += 4;
        --v54;
      }
      while (v54);
      goto LABEL_45;
    }
    uint64_t v56 = (int)v53;
    uint64_t v57 = 16 * (int)v53 - 16;
    do
    {
      --v56;
      DgnIArray<Utterance *>::~DgnIArray(*v21 + v57);
      v57 -= 16;
    }
    while (v56 > (int)v54);
  }
  *((_DWORD *)this + 76) = v54;
  if (v54) {
    goto LABEL_43;
  }
LABEL_45:
  (*(void (**)(void))(**((void **)this + 35) + 24))(*((void *)this + 35));
  *(_DWORD *)(*((void *)this + 35) + 16) = 0;
  BackTraceItemCache::clearCache((uint64_t *)this + 36);
  BackTraceLatticeBuilder::bootStrap((BackTraceNodeCache **)this, (WordLattice *)v38, v62, 0, v63);
  BackTraceLatticeBuilder::stackDecode(this, (WordLattice *)v38, a4, v69, v50, v67, v66, v39);
  LOBYTE(v47) = v68;
LABEL_46:
  if (*((_DWORD *)this + 99)) {
    char v64 = v47;
  }
  else {
    char v64 = 1;
  }
  if ((v64 & 1) == 0) {
    BackTraceLatticeBuilder::pruneLinks(this, (WordLattice *)v38, a10, v48);
  }
  WordLattice::getLatticeStats((uint64_t)v38, v51 + 4, v51 + 5, (unint64_t *)v51 + 3, (unint64_t *)v51 + 4);
  v51[10] += *((_DWORD *)this + 20);
  Hash<CWIDACPair,CWIDACPair,CWIDACPair,BigScorePair>::removeAll((uint64_t)this + 72);
  (*(void (**)(void))(**((void **)this + 35) + 24))(*((void *)this + 35));
  Lattice<WordLatticeLC>::gc(v38);
  Lattice<WordLatticeLC>::topSortInternal((uint64_t)v38, 0);
  return v38;
}

uint64_t Hash<BackTraceLinkPair,BackTraceLinkPair,BackTraceLinkPair,int>::removeAll(uint64_t result)
{
  uint64_t v1 = result;
  unint64_t v2 = *(unsigned int *)(result + 88);
  if (v2)
  {
    for (unint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = *(void *)(v1 + 80);
      uint64_t v5 = *(char **)(v4 + 8 * i);
      if (v5)
      {
        do
        {
          unsigned int v6 = *(char **)v5;
          uint64_t v7 = *(uint64_t (**)(char *))(v1 + 96);
          if (v7) {
            uint64_t result = v7(v5 + 12);
          }
          unsigned int v8 = *(uint64_t (**)(char *))(v1 + 104);
          if (v8) {
            uint64_t result = v8(v5 + 52);
          }
          *(void *)uint64_t v5 = *(void *)(v1 + 32);
          *(void *)(v1 + 32) = v5;
          uint64_t v5 = v6;
        }
        while (v6);
        uint64_t v4 = *(void *)(v1 + 80);
        unint64_t v2 = *(unsigned int *)(v1 + 88);
      }
      *(void *)(v4 + 8 * i) = 0;
    }
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

uint64_t Hash<CWIDACPair,CWIDACPair,CWIDACPair,BigScorePair>::removeAll(uint64_t result)
{
  uint64_t v1 = result;
  unint64_t v2 = *(unsigned int *)(result + 88);
  if (v2)
  {
    for (unint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = *(void *)(v1 + 80);
      uint64_t v5 = *(char **)(v4 + 8 * i);
      if (v5)
      {
        do
        {
          unsigned int v6 = *(char **)v5;
          uint64_t v7 = *(void (**)(char *))(v1 + 96);
          if (v7) {
            v7(v5 + 12);
          }
          unsigned int v8 = *(void (**)(char *))(v1 + 104);
          if (v8) {
            v8(v5 + 60);
          }
          uint64_t result = MrecInitModule_sdpres_sdapi();
          *(void *)uint64_t v5 = *(void *)(v1 + 32);
          *(void *)(v1 + 32) = v5;
          uint64_t v5 = v6;
        }
        while (v6);
        uint64_t v4 = *(void *)(v1 + 80);
        unint64_t v2 = *(unsigned int *)(v1 + 88);
      }
      *(void *)(v4 + 8 * i) = 0;
    }
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

uint64_t *BackTraceLatticeBuilder::makeSilentLattice(BackTraceLatticeBuilder *this, int a2, int a3, int a4, int a5, uint64_t a6, LatticeStats *a7)
{
  char v7 = (char)a7;
  char v9 = a5;
  __int16 v12 = (__int16)this;
  if (a2 == -16) {
    int v13 = a5;
  }
  else {
    int v13 = 1;
  }
  if (v13) {
    int v14 = a2;
  }
  else {
    int v14 = 2;
  }
  unint64_t v15 = MemChunkAlloc(0x120uLL, 0);
  WordLattice::WordLattice((WordLattice *)v15, v14, a3, a4, v12, v9, v7, 1, 1);
  int Node = Lattice<WordLatticeLC>::createNode(v16);
  int v18 = Lattice<WordLatticeLC>::createNode((uint64_t)v15);
  int v19 = Lattice<WordLatticeLC>::createNode((uint64_t)v15);
  uint64_t v25 = 0x3FFFFCFFFFFDLL;
  BOOL v20 = v14 > 1;
  long long v26 = xmmword_2140866D0;
  int v21 = v14 - v20;
  memset(v30, 0, sizeof(v30));
  int v31 = 0;
  WordLatticeLC::WordLatticeLC((uint64_t)v32, (uint64_t)&v25, v14 - v20, v20, 0, (uint64_t)v30);
  unsigned int Link = Lattice<WordLatticeLC>::createLink((uint64_t)v15, v18, Node, (WordLatticeLC *)v32);
  Lattice<WordLatticeLC>::connectInLinkUnordered(v15, Link);
  Lattice<WordLatticeLC>::connectOutLinkUnordered(v15, Link);
  v28[0] = -50331650;
  v28[1] = 0x3FFF;
  long long v29 = xmmword_2140866D0;
  uint64_t v25 = 0;
  long long v26 = 0uLL;
  int v27 = 0;
  WordLatticeLC::WordLatticeLC((uint64_t)v30, (uint64_t)v28, 0, v21, 0, (uint64_t)&v25);
  unsigned int v23 = Lattice<WordLatticeLC>::createLink((uint64_t)v15, v19, v18, (WordLatticeLC *)v30);
  Lattice<WordLatticeLC>::connectInLinkUnordered(v15, v23);
  Lattice<WordLatticeLC>::connectOutLinkUnordered(v15, v23);
  WordLattice::getLatticeStats((uint64_t)v15, (unsigned int *)(a6 + 16), (unsigned int *)(a6 + 20), (unint64_t *)(a6 + 24), (unint64_t *)(a6 + 32));
  Lattice<WordLatticeLC>::topSortInternal((uint64_t)v15, 0);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v30);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v32);
  return v15;
}

void sub_213F6F25C(_Unwind_Exception *a1)
{
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)(v1 - 192));
  _Unwind_Resume(a1);
}

void StringGlobalParam::~StringGlobalParam(StringGlobalParam *this)
{
  StringGlobalParamBase::~StringGlobalParamBase(this);

  JUMPOUT(0x216698730);
}

uint64_t NetNBestAlg::NetNBestAlg(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  DgnString::DgnString((DgnString *)(a1 + 16));
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 32) = 0xC00000010;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(void *)(a1 + 144) = 0;
  BitArray::setSize(v5, *(_DWORD *)(a3 + 16));
  return a1;
}

void sub_213F6F354(_Unwind_Exception *a1)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray(v3);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v4);
  DgnPriorityQueue<NBestQueueItem>::~DgnPriorityQueue(v2);
  BitArray::~BitArray(v1);
  _Unwind_Resume(a1);
}

void DgnPriorityQueue<NBestQueueItem>::~DgnPriorityQueue(uint64_t a1)
{
  for (; *(_DWORD *)(a1 + 64); *(void *)(a1 + 8) = Min)
  {
    Min = (void *)DgnHeap<NBestQueueItem>::extractMin(a1 + 56);
    void *Min = *(void *)(a1 + 8);
  }
  DgnIArray<Utterance *>::~DgnIArray(a1 + 56);

  DgnPool::~DgnPool((DgnPool *)a1);
}

uint64_t DgnHeap<NBestQueueItem>::extractMin(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8) - 1;
  uint64_t v2 = **(void **)a1;
  if (v1 < 1)
  {
    *(_DWORD *)(a1 + 8) = 0;
  }
  else
  {
    **(void **)a1 = *(void *)(*(void *)a1 + 8 * v1);
    *(_DWORD *)(a1 + 8) = v1;
    DgnHeap<NBestQueueItem>::heapifyDown(a1, 0);
  }
  return v2;
}

uint64_t DgnHeap<NBestQueueItem>::heapifyDown(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 8);
  while (1)
  {
    uint64_t v3 = (2 * a2) | 1u;
    if ((int)v3 >= v2
      || *(_DWORD *)(*(void *)(*(void *)a1 + 8 * v3) + 8) >= *(_DWORD *)(*(void *)(*(void *)a1 + 8 * a2)
                                                                                             + 8))
    {
      uint64_t v3 = a2;
    }
    uint64_t v4 = (2 * a2 + 2);
    if ((int)v4 >= v2
      || *(_DWORD *)(*(void *)(*(void *)a1 + 8 * v4) + 8) >= *(_DWORD *)(*(void *)(*(void *)a1 + 8 * v3)
                                                                                             + 8))
    {
      uint64_t v4 = v3;
    }
    if (v4 == a2) {
      break;
    }
    uint64_t v5 = *(void *)(*(void *)a1 + 8 * a2);
    *(void *)(*(void *)a1 + 8 * a2) = *(void *)(*(void *)a1 + 8 * v4);
    *(void *)(*(void *)a1 + 8 * v4) = v5;
    a2 = v4;
  }
  return a2;
}

uint64_t HashKEV<BackTraceItemHashKey,BackTraceItem,BackTraceItemHashKey>::HashKEV(uint64_t a1, const char *a2, int a3)
{
  HashBase::HashBase((HashBase *)a1, a2);
  *(void *)uint64_t v5 = &unk_26C4E4C18;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_DWORD *)(v5 + 72) = 0;
  *(void *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 88) = 0;
  int v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(void *)(a1 + 96) = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    int v7 = 20;
  }
  else {
    int v7 = 28;
  }
  *(_DWORD *)(a1 + 24) = 32;
  *(_DWORD *)(a1 + 28) = v7;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_213F6F58C(_Unwind_Exception *a1)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void HashKEV<BackTraceItemHashKey,BackTraceItem,BackTraceItemHashKey>::~HashKEV(uint64_t a1)
{
  HashKEV<BackTraceItemHashKey,BackTraceItem,BackTraceItemHashKey>::~HashKEV(a1);

  JUMPOUT(0x216698730);
}

uint64_t HashKEV<BackTraceItemHashKey,BackTraceItem,BackTraceItemHashKey>::~HashKEV(uint64_t a1)
{
  *(void *)a1 = &unk_26C4E4C18;
  if (*(_DWORD *)(a1 + 8)) {
    HashKEV<BackTraceItemHashKey,BackTraceItem,BackTraceItemHashKey>::removeAll(a1);
  }
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));

  return MrecInitModule_sdpres_sdapi();
}

uint64_t HashKEV<BackTraceItemHashKey,BackTraceItem,BackTraceItemHashKey>::removeAll(uint64_t result)
{
  uint64_t v1 = result;
  unint64_t v2 = *(unsigned int *)(result + 88);
  if (v2)
  {
    for (unint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = *(void *)(v1 + 80);
      uint64_t v5 = *(void **)(v4 + 8 * i);
      if (v5)
      {
        do
        {
          int v6 = (void *)*v5;
          int v7 = *(uint64_t (**)(void *))(v1 + 96);
          if (v7) {
            uint64_t result = v7(v5 + 2);
          }
          *uint64_t v5 = *(void *)(v1 + 32);
          *(void *)(v1 + 32) = v5;
          uint64_t v5 = v6;
        }
        while (v6);
        uint64_t v4 = *(void *)(v1 + 80);
        unint64_t v2 = *(unsigned int *)(v1 + 88);
      }
      *(void *)(v4 + 8 * i) = 0;
    }
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

void BtNBestResult::~BtNBestResult(BtNBestResult *this)
{
}

void SearchLMContext::~SearchLMContext(SearchLMContext *this)
{
  if (*((unsigned char *)this + 8)) {
    SearchLMScorer::unsetContext(*(void *)this);
  }
}

uint64_t *HashKEV<BackTraceItemHashKey,BackTraceItem,BackTraceItemHashKey>::findBucket(uint64_t a1, _DWORD *a2)
{
  int v4 = BackTraceItem::computeHash(a2);
  int v5 = *(_DWORD *)(a1 + 16);
  if (v5) {
    unsigned int v6 = (-1640531527 * v4) >> -(char)v5;
  }
  else {
    unsigned int v6 = 0;
  }
  int v7 = (uint64_t *)(*(void *)(a1 + 80) + 8 * v6);
  uint64_t v8 = *v7;
  if (*v7)
  {
    int v9 = v4;
    do
    {
      unsigned int v10 = (uint64_t *)v8;
      if (*(_DWORD *)(v8 + 8) == v9
        && BackTraceItem::operator==(a2, (_DWORD *)(*(void *)(**(void **)(v8 + 16) + 16 * *(unsigned int *)(v8 + 24))+ ((unint64_t)*(unsigned int *)(v8 + 28) << 6))))
      {
        break;
      }
      uint64_t v8 = *v10;
      int v7 = v10;
    }
    while (*v10);
  }
  return v7;
}

BOOL BackTraceItem::operator==(_DWORD *a1, _DWORD *a2)
{
  if (a1 == a2) {
    return 1;
  }
  BOOL result = CWIDAC::operator==((uint64_t)a1, (uint64_t)a2);
  if (result) {
    return a1[6] == a2[6]
  }
        && a1[7] == a2[7]
        && a1[8] == a2[8]
        && a1[9] == a2[9]
        && a1[10] == a2[10]
        && a1[11] == a2[11]
        && a1[12] == a2[12]
        && a1[13] == a2[13]
        && a1[14] == a2[14];
  return result;
}

uint64_t HashKEV<BackTraceItemHashKey,BackTraceItem,BackTraceItemHashKey>::add(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 12);
  if (*(_DWORD *)(a1 + 8) >= v4 >> 1) {
    HashKEV<unsigned int,unsigned int,CWIDScope>::upSize(a1, 2 * v4);
  }
  uint64_t result = BackTraceItem::computeHash((_DWORD *)(*(void *)(**(void **)a2 + 16 * *(unsigned int *)(a2 + 8))
                                               + ((unint64_t)*(unsigned int *)(a2 + 12) << 6)));
  int v6 = result;
  int v7 = *(_DWORD *)(a1 + 16);
  if (v7) {
    unsigned int v8 = (-1640531527 * result) >> -(char)v7;
  }
  else {
    unsigned int v8 = 0;
  }
  uint64_t v9 = *(void *)(a1 + 80);
  uint64_t v10 = *(void *)(a1 + 32);
  if (!v10)
  {
    uint64_t result = DgnPool::addChunk((DgnPool *)(a1 + 24));
    uint64_t v10 = *(void *)(a1 + 32);
  }
  unsigned int v11 = (void *)(v9 + 8 * v8);
  *(void *)(a1 + 32) = *(void *)v10;
  *(_DWORD *)(v10 + 8) = 0;
  *(_OWORD *)(v10 + 16) = *(_OWORD *)a2;
  *(_DWORD *)(v10 + 8) = v6;
  ++*(_DWORD *)(a1 + 8);
  if (*(unsigned char *)(a1 + 20))
  {
    *(void *)uint64_t v10 = *v11;
  }
  else
  {
    *(void *)uint64_t v10 = 0;
    __int16 v12 = (void *)*v11;
    if (*v11)
    {
      do
      {
        unsigned int v11 = v12;
        __int16 v12 = (void *)*v12;
      }
      while (v12);
    }
  }
  *unsigned int v11 = v10;
  return result;
}

BOOL RecogGerm::operator==(uint64_t a1, uint64_t a2)
{
  BOOL result = CWIDAC::operator==(a1, a2);
  if (result) {
    return *(unsigned __int16 *)(a1 + 26) == *(unsigned __int16 *)(a2 + 26)
  }
        && *(unsigned __int16 *)(a1 + 28) == *(unsigned __int16 *)(a2 + 28)
        && *(unsigned __int16 *)(a1 + 30) == *(unsigned __int16 *)(a2 + 30)
        && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32)
        && *(_DWORD *)(a1 + 36) == *(_DWORD *)(a2 + 36)
        && *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24);
  return result;
}

uint64_t BtNodeCacheType<BtTrigramNodeHashKey,BtTrigramNodeHashKey>::BtNodeCacheType(uint64_t a1, uint64_t a2, char a3, char a4)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a2;
  *(unsigned char *)(a1 + 32) = a3;
  *(unsigned char *)(a1 + 33) = a4;
  *(void *)a1 = &unk_26C4E0950;
  HashNCHV<BtTrigramNodeHashKey,BtTrigramNodeHashKey,BtTrigramNodeHashKey,unsigned int>::HashNCHV(a1 + 40, 0, 128);
  return a1;
}

void sub_213F6FAE4(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_26C4E1CF0;
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2);
  _Unwind_Resume(a1);
}

void *BtNodeCacheType<BtTrigramNodeHashKey,BtTrigramNodeHashKey>::~BtNodeCacheType(void *a1)
{
  *a1 = &unk_26C4E0950;
  HashNCHV<BtTrigramNodeHashKey,BtTrigramNodeHashKey,BtTrigramNodeHashKey,unsigned int>::~HashNCHV((uint64_t)(a1 + 5));
  *a1 = &unk_26C4E1CF0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 1));
  return a1;
}

void BtNodeCacheType<BtTrigramNodeHashKey,BtTrigramNodeHashKey>::~BtNodeCacheType(void *a1)
{
  *a1 = &unk_26C4E0950;
  HashNCHV<BtTrigramNodeHashKey,BtTrigramNodeHashKey,BtTrigramNodeHashKey,unsigned int>::~HashNCHV((uint64_t)(a1 + 5));
  *a1 = &unk_26C4E1CF0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 1));

  JUMPOUT(0x216698730);
}

BOOL BtNodeCacheType<BtTrigramNodeHashKey,BtTrigramNodeHashKey>::isEmpty(uint64_t a1)
{
  return *(_DWORD *)(a1 + 48) == 0;
}

uint64_t BtNodeCacheType<BtTrigramNodeHashKey,BtTrigramNodeHashKey>::removeAll(uint64_t a1)
{
  return HashNCHV<BtTrigramNodeHashKey,BtTrigramNodeHashKey,BtTrigramNodeHashKey,unsigned int>::removeAll(a1 + 40);
}

uint64_t BtNodeCacheType<BtTrigramNodeHashKey,BtTrigramNodeHashKey>::sizeObject(uint64_t a1, int a2)
{
  uint64_t v4 = sizeObject<unsigned int>(a1 + 8, a2);
  uint64_t v5 = 4;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v5 = 8;
  }
  if (a2 == 3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v5;
  }
  if (a2 == 3) {
    uint64_t v7 = v4;
  }
  else {
    uint64_t v7 = v4 + 1;
  }
  return v7 + Hash<CWIDAtFrame,CWIDAtFrame,CWIDAtFrame,unsigned int>::sizeObject(a1 + 40, a2) + v6;
}

uint64_t BtNodeCacheType<BtTrigramNodeHashKey,BtTrigramNodeHashKey>::findOrCreateNode(uint64_t a1, uint64_t a2, int a3, unsigned int *a4, char a5, int *a6, char *a7)
{
  unint64_t v13 = *a4;
  int v14 = v13 & 0xFE000000;
  if (*(unsigned char *)(a1 + 32)) {
    BOOL v15 = v14 == -100663296;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15 || v14 == -67108864) {
    goto LABEL_9;
  }
  uint64_t v27 = *(void *)(*(void *)(**(void **)VocMgr::smpVocMgr + ((v13 >> 22) & 0x3F8)) + 48);
  uint64_t v28 = *(void *)(a1 + 24);
  BOOL v29 = (*(_DWORD *)(v28 + 68) & 0xFFFFFFFD) != 0 || Constraint::isCoartAllowedForState(v28, a4);
  uint64_t v30 = v13 & 0xFFFFFF;
  BOOL v31 = v30 == 16777208 || !v29;
  if (v31
    || !*(_WORD *)(*(void *)(v27 + 592) + 2 * v30) && !*(_WORD *)(*(void *)(v27 + 608) + 2 * v30))
  {
    if (v29) {
      goto LABEL_29;
    }
LABEL_9:
    char v17 = 0;
    int v18 = -83886084;
    goto LABEL_10;
  }
  if (!*(unsigned char *)(a1 + 33)) {
    goto LABEL_9;
  }
LABEL_29:
  int v18 = *a6;
  char v17 = 1;
LABEL_10:
  unsigned int v19 = a4[1];
  v33[0] = *a4;
  v33[1] = v19;
  long long v34 = *(_OWORD *)(a4 + 2);
  int v35 = v18;
  int v36 = a3;
  char v37 = v17 & a5;
  uint64_t v20 = a1 + 40;
  Bucket = HashNCHV<BtTrigramNodeHashKey,BtTrigramNodeHashKey,BtTrigramNodeHashKey,unsigned int>::findBucket(a1 + 40, (uint64_t)v33);
  if (*Bucket)
  {
    char v22 = 0;
    p_int Node = (unsigned int *)(*Bucket + 44);
  }
  else
  {
    int Node = Lattice<WordLatticeLC>::createNode(a2);
    unsigned int v24 = *(_DWORD *)(a1 + 16);
    if (v24 == *(_DWORD *)(a1 + 20))
    {
      DgnPrimArray<unsigned int>::reallocElts(a1 + 8, 1, 1);
      unsigned int v24 = *(_DWORD *)(a1 + 16);
    }
    *(_DWORD *)(*(void *)(a1 + 8) + 4 * v24) = 1879048192;
    ++*(_DWORD *)(a1 + 16);
    p_int Node = (unsigned int *)&Node;
    HashNCHV<BtTrigramNodeHashKey,BtTrigramNodeHashKey,BtTrigramNodeHashKey,unsigned int>::add(v20, (uint64_t)v33, &Node);
    char v22 = 1;
  }
  uint64_t result = *p_Node;
  *a7 = v22;
  return result;
}

uint64_t HashNCHV<BtTrigramNodeHashKey,BtTrigramNodeHashKey,BtTrigramNodeHashKey,unsigned int>::HashNCHV(uint64_t a1, const char *a2, int a3)
{
  HashBase::HashBase((HashBase *)a1, a2);
  *(void *)uint64_t v5 = &unk_26C4E5228;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)this + 56) = 0u;
  *(_DWORD *)(v5 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 72) = 0;
  *(void *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 88) = 0;
  int v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  v11[1] = 0x3FFF;
  long long v12 = xmmword_2140866D0;
  unint64_t v13 = 0xFFFFFFF0FAFFFFFFLL;
  char v14 = 0;
  int v7 = gShadowDiagnosticShowIdealizedObjectSizes;
  int v8 = sizeObject((uint64_t)v11, 2);
  if (v7) {
    int v9 = 4;
  }
  else {
    int v9 = 8;
  }
  *(_DWORD *)(a1 + 24) = 48;
  *(_DWORD *)(a1 + 28) = v8 + v9 + 13;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 72) = 0;
  return a1;
}

void sub_213F6FF4C(_Unwind_Exception *a1)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void HashNCHV<BtTrigramNodeHashKey,BtTrigramNodeHashKey,BtTrigramNodeHashKey,unsigned int>::~HashNCHV(uint64_t a1)
{
  HashNCHV<BtTrigramNodeHashKey,BtTrigramNodeHashKey,BtTrigramNodeHashKey,unsigned int>::~HashNCHV(a1);

  JUMPOUT(0x216698730);
}

uint64_t HashNCHV<BtTrigramNodeHashKey,BtTrigramNodeHashKey,BtTrigramNodeHashKey,unsigned int>::~HashNCHV(uint64_t a1)
{
  *(void *)a1 = &unk_26C4E5228;
  if (*(_DWORD *)(a1 + 8)) {
    HashNCHV<BtTrigramNodeHashKey,BtTrigramNodeHashKey,BtTrigramNodeHashKey,unsigned int>::removeAll(a1);
  }
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));

  return MrecInitModule_sdpres_sdapi();
}

uint64_t HashNCHV<BtTrigramNodeHashKey,BtTrigramNodeHashKey,BtTrigramNodeHashKey,unsigned int>::removeAll(uint64_t result)
{
  uint64_t v1 = result;
  unint64_t v2 = *(unsigned int *)(result + 88);
  if (v2)
  {
    for (unint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = *(void *)(v1 + 80);
      uint64_t v5 = *(char **)(v4 + 8 * i);
      if (v5)
      {
        do
        {
          int v6 = *(char **)v5;
          int v7 = *(uint64_t (**)(void *))(v1 + 96);
          if (v7) {
            uint64_t result = v7((void *)v5 + 1);
          }
          int v8 = *(uint64_t (**)(char *))(v1 + 104);
          if (v8) {
            uint64_t result = v8(v5 + 44);
          }
          *(void *)uint64_t v5 = *(void *)(v1 + 32);
          *(void *)(v1 + 32) = v5;
          uint64_t v5 = v6;
        }
        while (v6);
        uint64_t v4 = *(void *)(v1 + 80);
        unint64_t v2 = *(unsigned int *)(v1 + 88);
      }
      *(void *)(v4 + 8 * i) = 0;
    }
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

uint64_t HashNCHV<BtTrigramNodeHashKey,BtTrigramNodeHashKey,BtTrigramNodeHashKey,unsigned int>::add(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned int v6 = *(_DWORD *)(a1 + 12);
  if (*(_DWORD *)(a1 + 8) >= v6 >> 1) {
    HashNCHV<BtTrigramNodeHashKey,BtTrigramNodeHashKey,BtTrigramNodeHashKey,unsigned int>::upSize(a1, 2 * v6);
  }
  uint64_t result = CWIDAC::computeHash(a2);
  HIDWORD(v8) = result;
  LODWORD(v8) = result;
  HIDWORD(v8) = (v8 >> 19) + *(_DWORD *)(a2 + 28);
  LODWORD(v8) = HIDWORD(v8);
  HIDWORD(v8) = (v8 >> 19) + *(unsigned __int8 *)(a2 + 32);
  LODWORD(v8) = HIDWORD(v8);
  int v9 = *(_DWORD *)(a1 + 16);
  unsigned int v10 = (-1640531527 * ((v8 >> 19) + *(_DWORD *)(a2 + 24))) >> -(char)v9;
  if (v9) {
    unsigned int v11 = v10;
  }
  else {
    unsigned int v11 = 0;
  }
  uint64_t v12 = *(void *)(a1 + 80);
  uint64_t v13 = *(void *)(a1 + 32);
  if (!v13)
  {
    uint64_t result = DgnPool::addChunk((DgnPool *)(a1 + 24));
    uint64_t v13 = *(void *)(a1 + 32);
  }
  char v14 = (void *)(v12 + 8 * v11);
  *(void *)(a1 + 32) = *(void *)v13;
  *(_DWORD *)(v13 + 8) = *(_DWORD *)a2;
  *(_DWORD *)(v13 + 12) = *(_DWORD *)(a2 + 4);
  *(_OWORD *)(v13 + 16) = *(_OWORD *)(a2 + 8);
  uint64_t v15 = *(void *)(a2 + 24);
  *(unsigned char *)(v13 + 40) = *(unsigned char *)(a2 + 32);
  *(void *)(v13 + 32) = v15;
  *(_DWORD *)(v13 + 44) = *a3;
  ++*(_DWORD *)(a1 + 8);
  if (*(unsigned char *)(a1 + 20))
  {
    *(void *)uint64_t v13 = *v14;
  }
  else
  {
    *(void *)uint64_t v13 = 0;
    uint64_t v16 = (void *)*v14;
    if (*v14)
    {
      do
      {
        char v14 = v16;
        uint64_t v16 = (void *)*v16;
      }
      while (v16);
    }
  }
  *char v14 = v13;
  return result;
}

void *HashNCHV<BtTrigramNodeHashKey,BtTrigramNodeHashKey,BtTrigramNodeHashKey,unsigned int>::findBucket(uint64_t a1, uint64_t a2)
{
  HIDWORD(v4) = CWIDAC::computeHash(a2);
  LODWORD(v4) = HIDWORD(v4);
  HIDWORD(v4) = (v4 >> 19) + *(_DWORD *)(a2 + 28);
  LODWORD(v4) = HIDWORD(v4);
  HIDWORD(v4) = (v4 >> 19) + *(unsigned __int8 *)(a2 + 32);
  LODWORD(v4) = HIDWORD(v4);
  int v5 = *(_DWORD *)(a1 + 16);
  unsigned int v6 = (-1640531527 * ((v4 >> 19) + *(_DWORD *)(a2 + 24))) >> -(char)v5;
  if (!v5) {
    unsigned int v6 = 0;
  }
  int v7 = (void *)(*(void *)(a1 + 80) + 8 * v6);
  do
  {
    unint64_t v8 = v7;
    int v7 = (void *)*v7;
  }
  while (v7 && !BtTrigramNodeHashKey::equalKeys((uint64_t)(v7 + 1), a2));
  return v8;
}

BOOL BtTrigramNodeHashKey::equalKeys(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)) {
    return 0;
  }
  BOOL result = CWIDAC::operator==(a1, a2);
  if (!result) {
    return result;
  }
  return *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32) && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
}

uint64_t HashNCHV<BtTrigramNodeHashKey,BtTrigramNodeHashKey,BtTrigramNodeHashKey,unsigned int>::upSize(uint64_t a1, int a2)
{
  unsigned int v17 = 0;
  RoundUpToPowerOf2(a2, &v17);
  unint64_t v4 = (uint64_t *)(a1 + 80);
  uint64_t v15 = 0;
  unsigned int v16 = 0;
  DgnIFixArray<BucketLinkKEV<unsigned int> *>::copyArraySlice(&v15, (void *)(a1 + 80), 0, *(_DWORD *)(a1 + 88));
  int v5 = *(void **)(a1 + 80);
  if (v5)
  {
    MemChunkFree(v5, 0);
    *unint64_t v4 = 0;
  }
  *(_DWORD *)(a1 + 88) = 0;
  unsigned int v6 = v17;
  *(_DWORD *)(a1 + 12) = a2;
  *(_DWORD *)(a1 + 16) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  unint64_t v7 = v16;
  if (v16)
  {
    unint64_t v8 = 0;
    do
    {
      int v9 = *(uint64_t **)(v15 + 8 * v8);
      if (v9)
      {
        do
        {
          unsigned int v10 = (uint64_t *)*v9;
          HIDWORD(v11) = CWIDAC::computeHash((uint64_t)(v9 + 1));
          LODWORD(v11) = HIDWORD(v11);
          HIDWORD(v11) = *((_DWORD *)v9 + 9) + (v11 >> 19);
          LODWORD(v11) = HIDWORD(v11);
          HIDWORD(v11) = (v11 >> 19) + *((unsigned __int8 *)v9 + 40);
          LODWORD(v11) = HIDWORD(v11);
          unsigned int v12 = (-1640531527 * ((v11 >> 19) + *((_DWORD *)v9 + 8))) >> -(char)v17;
          if (!v17) {
            unsigned int v12 = 0;
          }
          uint64_t v13 = *v4;
          *int v9 = *(void *)(*v4 + 8 * v12);
          *(void *)(v13 + 8 * v12) = v9;
          int v9 = v10;
        }
        while (v10);
        unint64_t v7 = v16;
      }
      ++v8;
    }
    while (v8 < v7);
  }
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v15);
}

void sub_213F7040C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t BtNodeCacheType<BtNodeHashKey,BtNodeKeyGenerator<false,true>>::BtNodeCacheType(uint64_t a1, uint64_t a2, char a3, char a4)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a2;
  *(unsigned char *)(a1 + 32) = a3;
  *(unsigned char *)(a1 + 33) = a4;
  *(void *)a1 = &unk_26C4E0890;
  HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::HashNCHV(a1 + 40, 0, 128);
  return a1;
}

void sub_213F7048C(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_26C4E1CF0;
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2);
  _Unwind_Resume(a1);
}

void *BtNodeCacheType<BtNodeHashKey,BtNodeKeyGenerator<false,true>>::~BtNodeCacheType(void *a1)
{
  *a1 = &unk_26C4E0890;
  HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::~HashNCHV((uint64_t)(a1 + 5));
  *a1 = &unk_26C4E1CF0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 1));
  return a1;
}

void BtNodeCacheType<BtNodeHashKey,BtNodeKeyGenerator<false,true>>::~BtNodeCacheType(void *a1)
{
  *a1 = &unk_26C4E0890;
  HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::~HashNCHV((uint64_t)(a1 + 5));
  *a1 = &unk_26C4E1CF0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 1));

  JUMPOUT(0x216698730);
}

BOOL BtNodeCacheType<BtNodeHashKey,BtNodeKeyGenerator<false,true>>::isEmpty(uint64_t a1)
{
  return *(_DWORD *)(a1 + 48) == 0;
}

uint64_t BtNodeCacheType<BtNodeHashKey,BtNodeKeyGenerator<false,true>>::removeAll(uint64_t a1)
{
  return HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::removeAll(a1 + 40);
}

uint64_t BtNodeCacheType<BtNodeHashKey,BtNodeKeyGenerator<false,true>>::sizeObject(uint64_t a1, int a2)
{
  uint64_t v4 = sizeObject<unsigned int>(a1 + 8, a2);
  uint64_t v5 = 4;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v5 = 8;
  }
  if (a2 == 3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v5;
  }
  if (a2 == 3) {
    uint64_t v7 = v4;
  }
  else {
    uint64_t v7 = v4 + 1;
  }
  return v7 + Hash<CWIDAtFrame,CWIDAtFrame,CWIDAtFrame,unsigned int>::sizeObject(a1 + 40, a2) + v6;
}

uint64_t BtNodeCacheType<BtNodeHashKey,BtNodeKeyGenerator<false,true>>::findOrCreateNode(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, char a5, unsigned int *a6, char *a7)
{
  if (!*(unsigned char *)(a1 + 32)
    || ((unint64_t v14 = *a4, (v14 & 0xFE000000) != 0xFA000000) ? (v15 = (v14 & 0xFE000000) == -67108864) : (v15 = 1), v15))
  {
    int v16 = 0;
  }
  else
  {
    uint64_t v23 = *(void *)(*(void *)(**(void **)VocMgr::smpVocMgr + ((v14 >> 22) & 0x3F8)) + 48);
    uint64_t v24 = *(void *)(a1 + 24);
    int v16 = (*(_DWORD *)(v24 + 68) & 0xFFFFFFFD) != 0 || Constraint::isCoartAllowedForState(v24, a4);
    uint64_t v25 = v14 & 0xFFFFFF;
    if (v25 != 16777208 && v16 != 0) {
      int v16 = !*(_WORD *)(*(void *)(v23 + 592) + 2 * v25)
    }
         && !*(_WORD *)(*(void *)(v23 + 608) + 2 * v25)
         || *(unsigned char *)(a1 + 33) != 0;
  }
  BtNodeKeyGenerator<false,true>::getKey(a3, (int *)a4, a5, a6, v16, (uint64_t)v28);
  uint64_t v17 = a1 + 40;
  Bucket = HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::findBucket(a1 + 40, (uint64_t)v28);
  if (*Bucket)
  {
    char v19 = 0;
    p_int Node = (unsigned int *)(*Bucket + 40);
  }
  else
  {
    int Node = Lattice<WordLatticeLC>::createNode(a2);
    unsigned int v21 = *(_DWORD *)(a1 + 16);
    if (v21 == *(_DWORD *)(a1 + 20))
    {
      DgnPrimArray<unsigned int>::reallocElts(a1 + 8, 1, 1);
      unsigned int v21 = *(_DWORD *)(a1 + 16);
    }
    *(_DWORD *)(*(void *)(a1 + 8) + 4 * v21) = 1879048192;
    ++*(_DWORD *)(a1 + 16);
    p_int Node = (unsigned int *)&Node;
    HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::add(v17, (uint64_t)v28, &Node);
    char v19 = 1;
  }
  uint64_t result = *p_Node;
  *a7 = v19;
  return result;
}

uint64_t HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::HashNCHV(uint64_t a1, const char *a2, int a3)
{
  HashBase::HashBase((HashBase *)a1, a2);
  *(void *)uint64_t v5 = &unk_26C4E5200;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)this + 56) = 0u;
  *(_DWORD *)(v5 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 72) = 0;
  *(void *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 88) = 0;
  int v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  v11[1] = 0x3FFF;
  long long v12 = xmmword_2140866D0;
  int v13 = -16;
  char v14 = 0;
  int v7 = gShadowDiagnosticShowIdealizedObjectSizes;
  int v8 = sizeObject((uint64_t)v11, 2);
  if (v7) {
    int v9 = 4;
  }
  else {
    int v9 = 8;
  }
  *(_DWORD *)(a1 + 24) = 48;
  *(_DWORD *)(a1 + 28) = v8 + v9 + 11;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 72) = 0;
  return a1;
}

void sub_213F708E4(_Unwind_Exception *a1)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::~HashNCHV(uint64_t a1)
{
  HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::~HashNCHV(a1);

  JUMPOUT(0x216698730);
}

uint64_t HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::~HashNCHV(uint64_t a1)
{
  *(void *)a1 = &unk_26C4E5200;
  if (*(_DWORD *)(a1 + 8)) {
    HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::removeAll(a1);
  }
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));

  return MrecInitModule_sdpres_sdapi();
}

uint64_t HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::removeAll(uint64_t result)
{
  uint64_t v1 = result;
  unint64_t v2 = *(unsigned int *)(result + 88);
  if (v2)
  {
    for (unint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = *(void *)(v1 + 80);
      uint64_t v5 = *(void **)(v4 + 8 * i);
      if (v5)
      {
        do
        {
          int v6 = (void *)*v5;
          int v7 = *(uint64_t (**)(void *))(v1 + 96);
          if (v7) {
            uint64_t result = v7(v5 + 1);
          }
          int v8 = *(uint64_t (**)(void *))(v1 + 104);
          if (v8) {
            uint64_t result = v8(v5 + 5);
          }
          *uint64_t v5 = *(void *)(v1 + 32);
          *(void *)(v1 + 32) = v5;
          uint64_t v5 = v6;
        }
        while (v6);
        uint64_t v4 = *(void *)(v1 + 80);
        unint64_t v2 = *(unsigned int *)(v1 + 88);
      }
      *(void *)(v4 + 8 * i) = 0;
    }
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

uint64_t BtNodeKeyGenerator<false,true>::getKey@<X0>(uint64_t result@<X0>, int *a2@<X1>, char a3@<W2>, unsigned int *a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v6 = *a2;
  __int16 v7 = *((_WORD *)a2 + 2);
  __int16 v8 = *((_WORD *)a2 + 3);
  long long v9 = *(_OWORD *)(a2 + 2);
  __int16 v10 = 0;
  if (a5)
  {
    if ((a3 & 1) == 0)
    {
      unint64_t v11 = *a4;
      if ((v6 & 0xFE000000) != 0xFC000000 && (v11 & 0xFE000000) != -67108864) {
        __int16 v10 = *(_WORD *)(*(void *)(*(void *)(*(void *)(**(void **)VocMgr::smpVocMgr + ((v11 >> 22) & 0x3F8))
      }
                                               + 48)
                                   + 592)
                       + 2 * (v11 & 0xFFFFFF));
    }
  }
  else
  {
    a3 = 0;
  }
  *(_DWORD *)a6 = v6;
  *(_WORD *)(a6 + 4) = v7;
  *(_WORD *)(a6 + 6) = v8;
  *(_OWORD *)(a6 + 8) = v9;
  *(_DWORD *)(a6 + 24) = result;
  *(_WORD *)(a6 + 28) = v10;
  *(unsigned char *)(a6 + 30) = a3;
  return result;
}

uint64_t HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::add(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned int v6 = *(_DWORD *)(a1 + 12);
  if (*(_DWORD *)(a1 + 8) >= v6 >> 1) {
    HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::upSize(a1, 2 * v6);
  }
  uint64_t result = CWIDAC::computeHash(a2);
  HIDWORD(v8) = result;
  LODWORD(v8) = result;
  HIDWORD(v8) = (v8 >> 19) + *(_DWORD *)(a2 + 24);
  LODWORD(v8) = HIDWORD(v8);
  HIDWORD(v8) = (v8 >> 19) + *(unsigned __int8 *)(a2 + 30);
  LODWORD(v8) = HIDWORD(v8);
  int v9 = *(_DWORD *)(a1 + 16);
  unsigned int v10 = (-1640531527 * ((v8 >> 19) + *(unsigned __int16 *)(a2 + 28))) >> -(char)v9;
  if (v9) {
    unsigned int v11 = v10;
  }
  else {
    unsigned int v11 = 0;
  }
  uint64_t v12 = *(void *)(a1 + 80);
  uint64_t v13 = *(void *)(a1 + 32);
  if (!v13)
  {
    uint64_t result = DgnPool::addChunk((DgnPool *)(a1 + 24));
    uint64_t v13 = *(void *)(a1 + 32);
  }
  char v14 = (void *)(v12 + 8 * v11);
  *(void *)(a1 + 32) = *(void *)v13;
  *(_DWORD *)(v13 + 8) = *(_DWORD *)a2;
  *(_DWORD *)(v13 + 12) = *(_DWORD *)(a2 + 4);
  *(_OWORD *)(v13 + 16) = *(_OWORD *)(a2 + 8);
  int v15 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(v13 + 35) = *(_DWORD *)(a2 + 27);
  *(_DWORD *)(v13 + 32) = v15;
  *(_DWORD *)(v13 + 40) = *a3;
  ++*(_DWORD *)(a1 + 8);
  if (*(unsigned char *)(a1 + 20))
  {
    *(void *)uint64_t v13 = *v14;
  }
  else
  {
    *(void *)uint64_t v13 = 0;
    int v16 = (void *)*v14;
    if (*v14)
    {
      do
      {
        char v14 = v16;
        int v16 = (void *)*v16;
      }
      while (v16);
    }
  }
  *char v14 = v13;
  return result;
}

void *HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::findBucket(uint64_t a1, uint64_t a2)
{
  HIDWORD(v4) = CWIDAC::computeHash(a2);
  LODWORD(v4) = HIDWORD(v4);
  HIDWORD(v4) = (v4 >> 19) + *(_DWORD *)(a2 + 24);
  LODWORD(v4) = HIDWORD(v4);
  HIDWORD(v4) = (v4 >> 19) + *(unsigned __int8 *)(a2 + 30);
  LODWORD(v4) = HIDWORD(v4);
  int v5 = *(_DWORD *)(a1 + 16);
  unsigned int v6 = (-1640531527 * ((v4 >> 19) + *(unsigned __int16 *)(a2 + 28))) >> -(char)v5;
  if (!v5) {
    unsigned int v6 = 0;
  }
  __int16 v7 = (void *)(*(void *)(a1 + 80) + 8 * v6);
  do
  {
    unint64_t v8 = v7;
    __int16 v7 = (void *)*v7;
  }
  while (v7 && !BtNodeHashKey::equalKeys((uint64_t)(v7 + 1), a2));
  return v8;
}

BOOL BtNodeHashKey::equalKeys(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
    return 0;
  }
  BOOL result = CWIDAC::operator==(a1, a2);
  if (!result) {
    return result;
  }
  return *(unsigned __int8 *)(a1 + 30) == *(unsigned __int8 *)(a2 + 30)
      && *(unsigned __int16 *)(a1 + 28) == *(unsigned __int16 *)(a2 + 28);
}

uint64_t HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::upSize(uint64_t a1, int a2)
{
  unsigned int v17 = 0;
  RoundUpToPowerOf2(a2, &v17);
  unint64_t v4 = (uint64_t *)(a1 + 80);
  uint64_t v15 = 0;
  unsigned int v16 = 0;
  DgnIFixArray<BucketLinkKEV<unsigned int> *>::copyArraySlice(&v15, (void *)(a1 + 80), 0, *(_DWORD *)(a1 + 88));
  int v5 = *(void **)(a1 + 80);
  if (v5)
  {
    MemChunkFree(v5, 0);
    *unint64_t v4 = 0;
  }
  *(_DWORD *)(a1 + 88) = 0;
  unsigned int v6 = v17;
  *(_DWORD *)(a1 + 12) = a2;
  *(_DWORD *)(a1 + 16) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  unint64_t v7 = v16;
  if (v16)
  {
    unint64_t v8 = 0;
    do
    {
      int v9 = *(uint64_t **)(v15 + 8 * v8);
      if (v9)
      {
        do
        {
          unsigned int v10 = (uint64_t *)*v9;
          HIDWORD(v11) = CWIDAC::computeHash((uint64_t)(v9 + 1));
          LODWORD(v11) = HIDWORD(v11);
          HIDWORD(v11) = *((_DWORD *)v9 + 8) + (v11 >> 19);
          LODWORD(v11) = HIDWORD(v11);
          HIDWORD(v11) = (v11 >> 19) + *((unsigned __int8 *)v9 + 38);
          LODWORD(v11) = HIDWORD(v11);
          unsigned int v12 = (-1640531527 * ((v11 >> 19) + *((unsigned __int16 *)v9 + 18))) >> -(char)v17;
          if (!v17) {
            unsigned int v12 = 0;
          }
          uint64_t v13 = *v4;
          *int v9 = *(void *)(*v4 + 8 * v12);
          *(void *)(v13 + 8 * v12) = v9;
          int v9 = v10;
        }
        while (v10);
        unint64_t v7 = v16;
      }
      ++v8;
    }
    while (v8 < v7);
  }
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v15);
}

void sub_213F70E40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t BtNodeCacheType<BtNodeHashKey,BtNodeKeyGenerator<true,false>>::BtNodeCacheType(uint64_t a1, uint64_t a2, char a3, char a4)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a2;
  *(unsigned char *)(a1 + 32) = a3;
  *(unsigned char *)(a1 + 33) = a4;
  *(void *)a1 = &unk_26C4E08D0;
  HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::HashNCHV(a1 + 40, 0, 128);
  return a1;
}

void sub_213F70EC0(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_26C4E1CF0;
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2);
  _Unwind_Resume(a1);
}

void *BtNodeCacheType<BtNodeHashKey,BtNodeKeyGenerator<true,false>>::~BtNodeCacheType(void *a1)
{
  *a1 = &unk_26C4E08D0;
  HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::~HashNCHV((uint64_t)(a1 + 5));
  *a1 = &unk_26C4E1CF0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 1));
  return a1;
}

void BtNodeCacheType<BtNodeHashKey,BtNodeKeyGenerator<true,false>>::~BtNodeCacheType(void *a1)
{
  *a1 = &unk_26C4E08D0;
  HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::~HashNCHV((uint64_t)(a1 + 5));
  *a1 = &unk_26C4E1CF0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 1));

  JUMPOUT(0x216698730);
}

BOOL BtNodeCacheType<BtNodeHashKey,BtNodeKeyGenerator<true,false>>::isEmpty(uint64_t a1)
{
  return *(_DWORD *)(a1 + 48) == 0;
}

uint64_t BtNodeCacheType<BtNodeHashKey,BtNodeKeyGenerator<true,false>>::removeAll(uint64_t a1)
{
  return HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::removeAll(a1 + 40);
}

uint64_t BtNodeCacheType<BtNodeHashKey,BtNodeKeyGenerator<true,false>>::sizeObject(uint64_t a1, int a2)
{
  uint64_t v4 = sizeObject<unsigned int>(a1 + 8, a2);
  uint64_t v5 = 4;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v5 = 8;
  }
  if (a2 == 3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v5;
  }
  if (a2 == 3) {
    uint64_t v7 = v4;
  }
  else {
    uint64_t v7 = v4 + 1;
  }
  return v7 + Hash<CWIDAtFrame,CWIDAtFrame,CWIDAtFrame,unsigned int>::sizeObject(a1 + 40, a2) + v6;
}

uint64_t BtNodeCacheType<BtNodeHashKey,BtNodeKeyGenerator<true,false>>::findOrCreateNode(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7)
{
  unsigned int v12 = *(_DWORD *)a4;
  unsigned int v13 = *(_DWORD *)a4 & 0xFE000000;
  if (*(unsigned char *)(a1 + 32)) {
    BOOL v14 = v13 == -100663296;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14 && v13 != -67108864)
  {
    uint64_t v23 = *(void *)(a1 + 24);
    if ((*(_DWORD *)(v23 + 68) & 0xFFFFFFFD) == 0)
    {
      Constraint::isCoartAllowedForState(v23, (unsigned int *)a4);
      unsigned int v12 = *(_DWORD *)a4;
    }
  }
  int v16 = *(_DWORD *)(a4 + 4);
  v25[0] = v12;
  v25[1] = v16;
  uint64_t v26 = *(void *)(a4 + 8);
  int32x2_t v27 = vdup_n_s32(0xFAFFFFFC);
  int v28 = a3;
  __int16 v29 = 0;
  char v30 = 0;
  uint64_t v17 = a1 + 40;
  Bucket = HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::findBucket(a1 + 40, (uint64_t)v25);
  if (*Bucket)
  {
    char v19 = 0;
    p_int Node = (unsigned int *)(*Bucket + 40);
  }
  else
  {
    int Node = Lattice<WordLatticeLC>::createNode(a2);
    unsigned int v21 = *(_DWORD *)(a1 + 16);
    if (v21 == *(_DWORD *)(a1 + 20))
    {
      DgnPrimArray<unsigned int>::reallocElts(a1 + 8, 1, 1);
      unsigned int v21 = *(_DWORD *)(a1 + 16);
    }
    *(_DWORD *)(*(void *)(a1 + 8) + 4 * v21) = 1879048192;
    ++*(_DWORD *)(a1 + 16);
    p_int Node = (unsigned int *)&Node;
    HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::add(v17, (uint64_t)v25, &Node);
    char v19 = 1;
  }
  uint64_t result = *p_Node;
  *a7 = v19;
  return result;
}

uint64_t BtNodeCacheType<BtNodeHashKey,BtNodeKeyGenerator<true,true>>::BtNodeCacheType(uint64_t a1, uint64_t a2, char a3, char a4)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a2;
  *(unsigned char *)(a1 + 32) = a3;
  *(unsigned char *)(a1 + 33) = a4;
  *(void *)a1 = &unk_26C4E0910;
  HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::HashNCHV(a1 + 40, 0, 128);
  return a1;
}

void sub_213F7120C(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_26C4E1CF0;
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2);
  _Unwind_Resume(a1);
}

void *BtNodeCacheType<BtNodeHashKey,BtNodeKeyGenerator<true,true>>::~BtNodeCacheType(void *a1)
{
  *a1 = &unk_26C4E0910;
  HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::~HashNCHV((uint64_t)(a1 + 5));
  *a1 = &unk_26C4E1CF0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 1));
  return a1;
}

void BtNodeCacheType<BtNodeHashKey,BtNodeKeyGenerator<true,true>>::~BtNodeCacheType(void *a1)
{
  *a1 = &unk_26C4E0910;
  HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::~HashNCHV((uint64_t)(a1 + 5));
  *a1 = &unk_26C4E1CF0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 1));

  JUMPOUT(0x216698730);
}

BOOL BtNodeCacheType<BtNodeHashKey,BtNodeKeyGenerator<true,true>>::isEmpty(uint64_t a1)
{
  return *(_DWORD *)(a1 + 48) == 0;
}

uint64_t BtNodeCacheType<BtNodeHashKey,BtNodeKeyGenerator<true,true>>::removeAll(uint64_t a1)
{
  return HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::removeAll(a1 + 40);
}

uint64_t BtNodeCacheType<BtNodeHashKey,BtNodeKeyGenerator<true,true>>::sizeObject(uint64_t a1, int a2)
{
  uint64_t v4 = sizeObject<unsigned int>(a1 + 8, a2);
  uint64_t v5 = 4;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v5 = 8;
  }
  if (a2 == 3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v5;
  }
  if (a2 == 3) {
    uint64_t v7 = v4;
  }
  else {
    uint64_t v7 = v4 + 1;
  }
  return v7 + Hash<CWIDAtFrame,CWIDAtFrame,CWIDAtFrame,unsigned int>::sizeObject(a1 + 40, a2) + v6;
}

uint64_t BtNodeCacheType<BtNodeHashKey,BtNodeKeyGenerator<true,true>>::findOrCreateNode(uint64_t a1, uint64_t a2, uint64_t a3, int32x2_t *a4, __int8 a5, unsigned int *a6, char *a7)
{
  if (!*(unsigned char *)(a1 + 32)
    || ((unint64_t v14 = a4->u32[0], (v14 & 0xFE000000) != 0xFA000000) ? (v15 = (v14 & 0xFE000000) == -67108864) : (v15 = 1), v15))
  {
    int v16 = 0;
  }
  else
  {
    uint64_t v23 = *(void *)(*(void *)(**(void **)VocMgr::smpVocMgr + ((v14 >> 22) & 0x3F8)) + 48);
    uint64_t v24 = *(void *)(a1 + 24);
    int v16 = (*(_DWORD *)(v24 + 68) & 0xFFFFFFFD) != 0 || Constraint::isCoartAllowedForState(v24, (unsigned int *)a4);
    uint64_t v25 = v14 & 0xFFFFFF;
    if (v25 != 16777208 && v16 != 0) {
      int v16 = !*(_WORD *)(*(void *)(v23 + 592) + 2 * v25)
    }
         && !*(_WORD *)(*(void *)(v23 + 608) + 2 * v25)
         || *(unsigned char *)(a1 + 33) != 0;
  }
  BtNodeKeyGenerator<true,true>::getKey(a3, a4, a5, a6, v16, v28);
  uint64_t v17 = a1 + 40;
  Bucket = HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::findBucket(a1 + 40, (uint64_t)v28);
  if (*Bucket)
  {
    char v19 = 0;
    p_int Node = (unsigned int *)(*Bucket + 40);
  }
  else
  {
    int Node = Lattice<WordLatticeLC>::createNode(a2);
    unsigned int v21 = *(_DWORD *)(a1 + 16);
    if (v21 == *(_DWORD *)(a1 + 20))
    {
      DgnPrimArray<unsigned int>::reallocElts(a1 + 8, 1, 1);
      unsigned int v21 = *(_DWORD *)(a1 + 16);
    }
    *(_DWORD *)(*(void *)(a1 + 8) + 4 * v21) = 1879048192;
    ++*(_DWORD *)(a1 + 16);
    p_int Node = (unsigned int *)&Node;
    HashNCHV<BtNodeHashKey,BtNodeHashKey,BtNodeHashKey,unsigned int>::add(v17, (uint64_t)v28, &Node);
    char v19 = 1;
  }
  uint64_t result = *p_Node;
  *a7 = v19;
  return result;
}

uint64_t BtNodeKeyGenerator<true,true>::getKey@<X0>(uint64_t result@<X0>, int32x2_t *a2@<X1>, __int8 a3@<W2>, unsigned int *a4@<X3>, int a5@<W4>, int32x2_t *a6@<X8>)
{
  __int32 v6 = a2->i32[0];
  __int16 v7 = a2->i16[2];
  __int16 v8 = a2->i16[3];
  int32x2_t v9 = a2[1];
  __int16 v10 = 0;
  if (a5)
  {
    if ((a3 & 1) == 0)
    {
      unint64_t v11 = *a4;
      if ((v6 & 0xFE000000) != 0xFC000000 && (v11 & 0xFE000000) != -67108864) {
        __int16 v10 = *(_WORD *)(*(void *)(*(void *)(*(void *)(**(void **)VocMgr::smpVocMgr + ((v11 >> 22) & 0x3F8))
      }
                                               + 48)
                                   + 592)
                       + 2 * (v11 & 0xFFFFFF));
    }
  }
  else
  {
    a3 = 0;
  }
  a6->i32[0] = v6;
  a6->i16[2] = v7;
  a6->i16[3] = v8;
  a6[1] = v9;
  a6[2] = vdup_n_s32(0xFAFFFFFC);
  a6[3].i32[0] = result;
  a6[3].i16[2] = v10;
  a6[3].i8[6] = a3;
  return result;
}

uint64_t BtNodeCacheType<BtUnigramNodeHashKey,BtUnigramNodeHashKey>::BtNodeCacheType(uint64_t a1, uint64_t a2, char a3, char a4)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a2;
  *(unsigned char *)(a1 + 32) = a3;
  *(unsigned char *)(a1 + 33) = a4;
  *(void *)a1 = &unk_26C4E0990;
  HashNCHV<BtUnigramNodeHashKey,BtUnigramNodeHashKey,BtUnigramNodeHashKey,unsigned int>::HashNCHV(a1 + 40, 0, 128);
  return a1;
}

void sub_213F7166C(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_26C4E1CF0;
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2);
  _Unwind_Resume(a1);
}

void *BtNodeCacheType<BtUnigramNodeHashKey,BtUnigramNodeHashKey>::~BtNodeCacheType(void *a1)
{
  *a1 = &unk_26C4E0990;
  HashNCHV<BtUnigramNodeHashKey,BtUnigramNodeHashKey,BtUnigramNodeHashKey,unsigned int>::~HashNCHV((uint64_t)(a1 + 5));
  *a1 = &unk_26C4E1CF0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 1));
  return a1;
}

void BtNodeCacheType<BtUnigramNodeHashKey,BtUnigramNodeHashKey>::~BtNodeCacheType(void *a1)
{
  *a1 = &unk_26C4E0990;
  HashNCHV<BtUnigramNodeHashKey,BtUnigramNodeHashKey,BtUnigramNodeHashKey,unsigned int>::~HashNCHV((uint64_t)(a1 + 5));
  *a1 = &unk_26C4E1CF0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 1));

  JUMPOUT(0x216698730);
}

BOOL BtNodeCacheType<BtUnigramNodeHashKey,BtUnigramNodeHashKey>::isEmpty(uint64_t a1)
{
  return *(_DWORD *)(a1 + 48) == 0;
}

uint64_t BtNodeCacheType<BtUnigramNodeHashKey,BtUnigramNodeHashKey>::removeAll(uint64_t a1)
{
  return HashNCHV<BtUnigramNodeHashKey,BtUnigramNodeHashKey,BtUnigramNodeHashKey,unsigned int>::removeAll(a1 + 40);
}

uint64_t BtNodeCacheType<BtUnigramNodeHashKey,BtUnigramNodeHashKey>::sizeObject(uint64_t a1, int a2)
{
  uint64_t v4 = sizeObject<unsigned int>(a1 + 8, a2);
  uint64_t v5 = 4;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v5 = 8;
  }
  if (a2 == 3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v5;
  }
  if (a2 == 3) {
    uint64_t v7 = v4;
  }
  else {
    uint64_t v7 = v4 + 1;
  }
  return v7 + Hash<CWIDAtFrame,CWIDAtFrame,CWIDAtFrame,unsigned int>::sizeObject(a1 + 40, a2) + v6;
}

uint64_t BtNodeCacheType<BtUnigramNodeHashKey,BtUnigramNodeHashKey>::findOrCreateNode(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4, uint64_t a5, uint64_t a6, char *a7)
{
  unsigned int v12 = *a4;
  unsigned int v13 = *a4 & 0xFE000000;
  if (*(unsigned char *)(a1 + 32)) {
    BOOL v14 = v13 == -100663296;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14 && v13 != -67108864)
  {
    uint64_t v23 = *(void *)(a1 + 24);
    if ((*(_DWORD *)(v23 + 68) & 0xFFFFFFFD) == 0)
    {
      Constraint::isCoartAllowedForState(v23, a4);
      unsigned int v12 = *a4;
    }
  }
  unsigned int v16 = a4[2];
  unint64_t v25 = a3 | ((unint64_t)(v12 >> 25) << 32);
  unsigned int v26 = v16;
  uint64_t v17 = a1 + 40;
  Bucket = HashNCHV<BtUnigramNodeHashKey,BtUnigramNodeHashKey,BtUnigramNodeHashKey,unsigned int>::findBucket(a1 + 40, (uint64_t)&v25);
  if (*Bucket)
  {
    char v19 = 0;
    p_int Node = (unsigned int *)(*Bucket + 20);
  }
  else
  {
    int Node = Lattice<WordLatticeLC>::createNode(a2);
    unsigned int v21 = *(_DWORD *)(a1 + 16);
    if (v21 == *(_DWORD *)(a1 + 20))
    {
      DgnPrimArray<unsigned int>::reallocElts(a1 + 8, 1, 1);
      unsigned int v21 = *(_DWORD *)(a1 + 16);
    }
    *(_DWORD *)(*(void *)(a1 + 8) + 4 * v21) = 1879048192;
    ++*(_DWORD *)(a1 + 16);
    p_int Node = (unsigned int *)&Node;
    HashNCHV<BtUnigramNodeHashKey,BtUnigramNodeHashKey,BtUnigramNodeHashKey,unsigned int>::add(v17, (uint64_t *)&v25, &Node);
    char v19 = 1;
  }
  uint64_t result = *p_Node;
  *a7 = v19;
  return result;
}

uint64_t HashNCHV<BtUnigramNodeHashKey,BtUnigramNodeHashKey,BtUnigramNodeHashKey,unsigned int>::HashNCHV(uint64_t a1, const char *a2, int a3)
{
  HashBase::HashBase((HashBase *)a1, a2);
  *(void *)uint64_t v5 = &unk_26C4E5250;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)this + 56) = 0u;
  *(_DWORD *)(v5 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 72) = 0;
  *(void *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 88) = 0;
  int v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    int v7 = 18;
  }
  else {
    int v7 = 22;
  }
  *(_DWORD *)(a1 + 24) = 32;
  *(_DWORD *)(a1 + 28) = v7;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 72) = 0;
  return a1;
}

void sub_213F719FC(_Unwind_Exception *a1)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void HashNCHV<BtUnigramNodeHashKey,BtUnigramNodeHashKey,BtUnigramNodeHashKey,unsigned int>::~HashNCHV(uint64_t a1)
{
  HashNCHV<BtUnigramNodeHashKey,BtUnigramNodeHashKey,BtUnigramNodeHashKey,unsigned int>::~HashNCHV(a1);

  JUMPOUT(0x216698730);
}

uint64_t HashNCHV<BtUnigramNodeHashKey,BtUnigramNodeHashKey,BtUnigramNodeHashKey,unsigned int>::~HashNCHV(uint64_t a1)
{
  *(void *)a1 = &unk_26C4E5250;
  if (*(_DWORD *)(a1 + 8)) {
    HashNCHV<BtUnigramNodeHashKey,BtUnigramNodeHashKey,BtUnigramNodeHashKey,unsigned int>::removeAll(a1);
  }
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));

  return MrecInitModule_sdpres_sdapi();
}

uint64_t HashNCHV<BtUnigramNodeHashKey,BtUnigramNodeHashKey,BtUnigramNodeHashKey,unsigned int>::removeAll(uint64_t result)
{
  uint64_t v1 = result;
  unint64_t v2 = *(unsigned int *)(result + 88);
  if (v2)
  {
    for (unint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = *(void *)(v1 + 80);
      uint64_t v5 = *(char **)(v4 + 8 * i);
      if (v5)
      {
        do
        {
          int v6 = *(char **)v5;
          int v7 = *(uint64_t (**)(void *))(v1 + 96);
          if (v7) {
            uint64_t result = v7((void *)v5 + 1);
          }
          __int16 v8 = *(uint64_t (**)(char *))(v1 + 104);
          if (v8) {
            uint64_t result = v8(v5 + 20);
          }
          *(void *)uint64_t v5 = *(void *)(v1 + 32);
          *(void *)(v1 + 32) = v5;
          uint64_t v5 = v6;
        }
        while (v6);
        uint64_t v4 = *(void *)(v1 + 80);
        unint64_t v2 = *(unsigned int *)(v1 + 88);
      }
      *(void *)(v4 + 8 * i) = 0;
    }
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

uint64_t HashNCHV<BtUnigramNodeHashKey,BtUnigramNodeHashKey,BtUnigramNodeHashKey,unsigned int>::add(uint64_t result, uint64_t *a2, _DWORD *a3)
{
  uint64_t v5 = result;
  unsigned int v6 = *(_DWORD *)(result + 12);
  if (*(_DWORD *)(result + 8) >= v6 >> 1) {
    uint64_t result = HashNCHV<BtUnigramNodeHashKey,BtUnigramNodeHashKey,BtUnigramNodeHashKey,unsigned int>::upSize(result, 2 * v6);
  }
  HIDWORD(v7) = *(_DWORD *)a2;
  LODWORD(v7) = *(_DWORD *)a2;
  HIDWORD(v7) = (v7 >> 19) + *((unsigned __int16 *)a2 + 2);
  LODWORD(v7) = HIDWORD(v7);
  int v8 = *(_DWORD *)(v5 + 16);
  unsigned int v9 = (-1640531527 * ((v7 >> 19) + *((_DWORD *)a2 + 2))) >> -(char)v8;
  if (v8) {
    unsigned int v10 = v9;
  }
  else {
    unsigned int v10 = 0;
  }
  uint64_t v11 = *(void *)(v5 + 80);
  uint64_t v12 = *(void *)(v5 + 32);
  if (!v12)
  {
    uint64_t result = DgnPool::addChunk((DgnPool *)(v5 + 24));
    uint64_t v12 = *(void *)(v5 + 32);
  }
  unsigned int v13 = (void *)(v11 + 8 * v10);
  *(void *)(v5 + 32) = *(void *)v12;
  uint64_t v14 = *a2;
  *(_DWORD *)(v12 + 16) = *((_DWORD *)a2 + 2);
  *(void *)(v12 + 8) = v14;
  *(_DWORD *)(v12 + 20) = *a3;
  ++*(_DWORD *)(v5 + 8);
  if (*(unsigned char *)(v5 + 20))
  {
    *(void *)uint64_t v12 = *v13;
  }
  else
  {
    *(void *)uint64_t v12 = 0;
    BOOL v15 = (void *)*v13;
    if (*v13)
    {
      do
      {
        unsigned int v13 = v15;
        BOOL v15 = (void *)*v15;
      }
      while (v15);
    }
  }
  *unsigned int v13 = v12;
  return result;
}

void *HashNCHV<BtUnigramNodeHashKey,BtUnigramNodeHashKey,BtUnigramNodeHashKey,unsigned int>::findBucket(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int16 *)(a2 + 4);
  HIDWORD(v3) = *(_DWORD *)a2;
  LODWORD(v3) = *(_DWORD *)a2;
  HIDWORD(v3) = (v3 >> 19) + v2;
  LODWORD(v3) = HIDWORD(v3);
  int v4 = *(_DWORD *)(a2 + 8);
  int v5 = *(_DWORD *)(a1 + 16);
  unsigned int v6 = (-1640531527 * ((v3 >> 19) + v4)) >> -(char)v5;
  if (!v5) {
    unsigned int v6 = 0;
  }
  unint64_t v7 = (void *)(*(void *)(a1 + 80) + 8 * v6);
  int v8 = (uint64_t *)*v7;
  if (!*v7) {
    return v7;
  }
  do
  {
    uint64_t result = v7;
    unint64_t v7 = v8;
    if (*((_DWORD *)v8 + 2) == *(_DWORD *)a2 && *((unsigned __int16 *)v8 + 6) == v2 && *((_DWORD *)v8 + 4) == v4) {
      break;
    }
    int v8 = (uint64_t *)*v8;
    uint64_t result = v7;
  }
  while (*v7);
  return result;
}

uint64_t HashNCHV<BtUnigramNodeHashKey,BtUnigramNodeHashKey,BtUnigramNodeHashKey,unsigned int>::upSize(uint64_t a1, int a2)
{
  unsigned int v19 = 0;
  RoundUpToPowerOf2(a2, &v19);
  int v4 = (uint64_t *)(a1 + 80);
  uint64_t v17 = 0;
  unsigned int v18 = 0;
  DgnIFixArray<BucketLinkKEV<unsigned int> *>::copyArraySlice(&v17, (void *)(a1 + 80), 0, *(_DWORD *)(a1 + 88));
  int v5 = *(void **)(a1 + 80);
  if (v5)
  {
    MemChunkFree(v5, 0);
    *int v4 = 0;
  }
  *(_DWORD *)(a1 + 88) = 0;
  unsigned int v6 = v19;
  *(_DWORD *)(a1 + 12) = a2;
  *(_DWORD *)(a1 + 16) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  uint64_t v7 = v18;
  if (v18)
  {
    uint64_t v8 = 0;
    unsigned int v9 = v19;
    char v10 = 32 - v19;
    do
    {
      uint64_t v11 = *(uint64_t **)(v17 + 8 * v8);
      if (v11)
      {
        do
        {
          uint64_t v12 = (uint64_t *)*v11;
          HIDWORD(v13) = *((_DWORD *)v11 + 2);
          LODWORD(v13) = HIDWORD(v13);
          HIDWORD(v13) = (v13 >> 19) + *((unsigned __int16 *)v11 + 6);
          LODWORD(v13) = HIDWORD(v13);
          unsigned int v14 = (-1640531527 * ((v13 >> 19) + *((_DWORD *)v11 + 4))) >> v10;
          if (!v9) {
            unsigned int v14 = 0;
          }
          uint64_t v15 = *v4;
          *uint64_t v11 = *(void *)(*v4 + 8 * v14);
          *(void *)(v15 + 8 * v14) = v11;
          uint64_t v11 = v12;
        }
        while (v12);
      }
      ++v8;
    }
    while (v8 != v7);
  }
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v17);
}

void sub_213F71E0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Hash<CWIDACPair,CWIDACPair,CWIDACPair,BigScorePair>::Hash(uint64_t a1, const char *a2, int a3)
{
  HashBase::HashBase((HashBase *)a1, a2);
  *(void *)uint64_t v5 = &unk_26C4E44C0;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)this + 56) = 0u;
  *(_DWORD *)(v5 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 72) = 0;
  *(void *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 88) = 0;
  int v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  v12[1] = 0x3FFF;
  long long v13 = xmmword_2140866D0;
  int v14 = 0x3FFF;
  long long v15 = xmmword_2140866D0;
  int v7 = gShadowDiagnosticShowIdealizedObjectSizes;
  int v8 = sizeObject((uint64_t)v12, 2);
  int v9 = sizeObject((uint64_t)&v16, 2);
  if (v7) {
    int v10 = 8;
  }
  else {
    int v10 = 12;
  }
  *(_DWORD *)(a1 + 24) = 80;
  *(_DWORD *)(a1 + 28) = v10 + v8 + v9;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 72) = 0;
  MrecInitModule_sdpres_sdapi();
  return a1;
}

void sub_213F71F48(_Unwind_Exception *a1)
{
  MrecInitModule_sdpres_sdapi();
  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void Hash<CWIDACPair,CWIDACPair,CWIDACPair,BigScorePair>::~Hash(uint64_t a1)
{
  Hash<CWIDACPair,CWIDACPair,CWIDACPair,BigScorePair>::~Hash(a1);

  JUMPOUT(0x216698730);
}

uint64_t Hash<CWIDACPair,CWIDACPair,CWIDACPair,BigScorePair>::~Hash(uint64_t a1)
{
  *(void *)a1 = &unk_26C4E44C0;
  if (*(_DWORD *)(a1 + 8)) {
    Hash<CWIDACPair,CWIDACPair,CWIDACPair,BigScorePair>::removeAll(a1);
  }
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));

  return MrecInitModule_sdpres_sdapi();
}

uint64_t Hash<BackTraceLinkPair,BackTraceLinkPair,BackTraceLinkPair,int>::Hash(uint64_t a1, const char *a2, int a3)
{
  HashBase::HashBase((HashBase *)a1, a2);
  *(void *)uint64_t v5 = &unk_26C4E4650;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)this + 56) = 0u;
  *(_DWORD *)(v5 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 72) = 0;
  *(void *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 88) = 0;
  int v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  v11[1] = 0x3FFF;
  long long v12 = xmmword_2140866D0;
  int v7 = gShadowDiagnosticShowIdealizedObjectSizes;
  int v8 = sizeObject((uint64_t)v11, 2);
  if (v7) {
    int v9 = 4;
  }
  else {
    int v9 = 8;
  }
  *(_DWORD *)(a1 + 24) = 64;
  *(_DWORD *)(a1 + 28) = v8 + v9 + 21;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 72) = 0;
  return a1;
}

void sub_213F7211C(_Unwind_Exception *a1)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void Hash<BackTraceLinkPair,BackTraceLinkPair,BackTraceLinkPair,int>::~Hash(uint64_t a1)
{
  Hash<BackTraceLinkPair,BackTraceLinkPair,BackTraceLinkPair,int>::~Hash(a1);

  JUMPOUT(0x216698730);
}

uint64_t Hash<BackTraceLinkPair,BackTraceLinkPair,BackTraceLinkPair,int>::~Hash(uint64_t a1)
{
  *(void *)a1 = &unk_26C4E4650;
  if (*(_DWORD *)(a1 + 8)) {
    Hash<BackTraceLinkPair,BackTraceLinkPair,BackTraceLinkPair,int>::removeAll(a1);
  }
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));

  return MrecInitModule_sdpres_sdapi();
}

void *Hash<CWIDACPair,CWIDACPair,CWIDACPair,BigScorePair>::findBucket(uint64_t a1, uint64_t a2)
{
  int v4 = CWIDACPair::computeHash(a2);
  int v5 = *(_DWORD *)(a1 + 16);
  if (v5) {
    unsigned int v6 = (-1640531527 * v4) >> -(char)v5;
  }
  else {
    unsigned int v6 = 0;
  }
  int v7 = (void *)(*(void *)(a1 + 80) + 8 * v6);
  uint64_t v8 = *v7;
  if (!*v7) {
    return v7;
  }
  int v9 = v4;
  do
  {
    int v10 = v7;
    int v7 = (void *)v8;
    if (*(_DWORD *)(v8 + 8) == v9 && CWIDAC::operator==(v8 + 12, a2) && CWIDAC::operator==((uint64_t)v7 + 36, a2 + 24)) {
      break;
    }
    uint64_t v8 = *v7;
    int v10 = v7;
  }
  while (*v7);
  return v10;
}

__n128 CWIDACPair::CWIDACPair(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  __n128 result = *(__n128 *)(a2 + 32);
  *(__n128 *)(a1 + 32) = result;
  return result;
}

unint64_t DgnArray<BackTraceItem>::reallocElts(uint64_t a1, uint64_t a2, int a3)
{
  int v3 = a2;
  if (a3) {
    int v3 = minAddAllocWithExtra(a2, *(_DWORD *)(a1 + 12));
  }
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 12) + v3;
  uint64_t v8 = 0;
  unint64_t result = realloc_array(*(void **)a1, &v8, (unint64_t)v6 << 6, v5 << 6, v5 << 6, 1);
  *(_DWORD *)(a1 + 12) = result >> 6;
  *(void *)a1 = v8;
  return result;
}

uint64_t *Hash<BackTraceLinkPair,BackTraceLinkPair,BackTraceLinkPair,int>::findBucket(uint64_t a1, uint64_t a2)
{
  HIDWORD(v4) = CWIDAC::computeHash(a2);
  LODWORD(v4) = HIDWORD(v4);
  HIDWORD(v4) = (v4 >> 19) + *(_DWORD *)(a2 + 28);
  LODWORD(v4) = HIDWORD(v4);
  HIDWORD(v4) = (v4 >> 19) + *(_DWORD *)(a2 + 32);
  LODWORD(v4) = HIDWORD(v4);
  HIDWORD(v4) = (v4 >> 19) + *(_DWORD *)(a2 + 36);
  LODWORD(v4) = HIDWORD(v4);
  int v5 = (v4 >> 19) + *(unsigned __int8 *)(a2 + 24);
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6) {
    unsigned int v7 = (-1640531527 * v5) >> -(char)v6;
  }
  else {
    unsigned int v7 = 0;
  }
  uint64_t v8 = (uint64_t *)(*(void *)(a1 + 80) + 8 * v7);
  uint64_t v9 = *v8;
  if (*v8)
  {
    do
    {
      int v10 = (uint64_t *)v9;
      if (*(_DWORD *)(v9 + 8) == v5 && BackTraceLinkPair::operator==(v9 + 12, a2)) {
        break;
      }
      uint64_t v9 = *v10;
      uint64_t v8 = v10;
    }
    while (*v10);
  }
  return v8;
}

BOOL BackTraceLinkPair::operator==(uint64_t a1, uint64_t a2)
{
  BOOL result = CWIDAC::operator==(a1, a2);
  if (result) {
    return *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24)
  }
        && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28)
        && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32)
        && *(_DWORD *)(a1 + 36) == *(_DWORD *)(a2 + 36);
  return result;
}

double BucketLink<BackTraceLinkPair,int>::BucketLink(uint64_t a1, int *a2, _DWORD *a3)
{
  int v3 = *a2;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 20) = *(_OWORD *)(a2 + 2);
  *(unsigned char *)(a1 + 36) = *((unsigned char *)a2 + 24);
  double result = *(double *)(a2 + 7);
  *(double *)(a1 + 40) = result;
  *(_DWORD *)(a1 + 48) = a2[9];
  *(_DWORD *)(a1 + 52) = *a3;
  return result;
}

double BaseWordLatticeLC::operator=(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  double result = *(double *)(a2 + 64);
  *(double *)(a1 + 64) = result;
  *(_DWORD *)(a1 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 72) = *(_DWORD *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  return result;
}

void UserDelta::printSize(UserDelta *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/udelta.cpp", 77, (DgnString *)&v90);
  if (v91) {
    int v16 = v90;
  }
  else {
    int v16 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_2140B33BB, a3, &byte_2140B33BB, v16);
  DgnString::~DgnString((DgnString *)&v90);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_2140B33BB);
  uint64_t v21 = (a3 + 1);
  uint64_t v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/udelta.cpp", 79, (DgnString *)&v90);
  if (v91) {
    int32x2_t v27 = v90;
  }
  else {
    int32x2_t v27 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v90);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/udelta.cpp", 79, (DgnString *)&v90);
  if (v91) {
    uint64_t v32 = v90;
  }
  else {
    uint64_t v32 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v90);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/udelta.cpp", 79, (DgnString *)&v90);
  if (v91) {
    char v37 = v90;
  }
  else {
    char v37 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v37, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v90);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/udelta.cpp", 79, (DgnString *)&v90);
  if (v91) {
    unsigned int v42 = v90;
  }
  else {
    unsigned int v42 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v42, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v90);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/udelta.cpp", 79, (DgnString *)&v90);
  if (v91) {
    int v47 = v90;
  }
  else {
    int v47 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v43, v44, v45, v46, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v47, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v90);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/udelta.cpp", 79, (DgnString *)&v90);
  if (v91) {
    uint64_t v52 = v90;
  }
  else {
    uint64_t v52 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v52, 4, 4, 0);
  uint64_t v89 = a3;
  DgnString::~DgnString((DgnString *)&v90);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v53 = 12;
  }
  else {
    uint64_t v53 = 16;
  }
  int v54 = *((_DWORD *)this + 8);
  unsigned int v55 = *((_DWORD *)this + 9);
  uint64_t v56 = this;
  BOOL v57 = v55 >= v54;
  uint64_t v58 = v55 - v54;
  if (v57)
  {
    uint64_t v60 = v54 & ~(v54 >> 31);
    int v54 = 0;
    uint64_t v59 = v53 + v60;
    v53 += v60 + v58;
  }
  else
  {
    uint64_t v59 = v53;
  }
  uint64_t v61 = v54;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/udelta.cpp", 79, (DgnString *)&v90);
  if (v91) {
    unsigned int v66 = v90;
  }
  else {
    unsigned int v66 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v62, v63, v64, v65, v21, &byte_2140B33BB, v22, v22, v66, v53, v59, v61);
  DgnString::~DgnString((DgnString *)&v90);
  *a4 += v53;
  *a5 += v59;
  *a6 += v61;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/udelta.cpp", 79, (DgnString *)&v90);
  if (v91) {
    uint64_t v71 = v90;
  }
  else {
    uint64_t v71 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v67, v68, v69, v70, v21, &byte_2140B33BB, v22, v22, v71, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v90);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v72 = 12;
  }
  else {
    uint64_t v72 = 16;
  }
  int v73 = *((_DWORD *)v56 + 14);
  unsigned int v74 = *((_DWORD *)v56 + 15);
  BOOL v57 = v74 >= v73;
  uint64_t v75 = v74 - v73;
  if (v57)
  {
    uint64_t v77 = v73 & ~(v73 >> 31);
    int v73 = 0;
    uint64_t v76 = v72 + v77;
    v72 += v77 + v75;
  }
  else
  {
    uint64_t v76 = v72;
  }
  uint64_t v78 = v73;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/udelta.cpp", 79, (DgnString *)&v90);
  if (v91) {
    long long v83 = v90;
  }
  else {
    long long v83 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v79, v80, v81, v82, v21, &byte_2140B33BB, v22, v22, v83, v72, v76, v78);
  DgnString::~DgnString((DgnString *)&v90);
  *a4 += v72;
  *a5 += v76;
  *a6 += v78;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/udelta.cpp", 80, (DgnString *)&v90);
  if (v91) {
    uint64_t v88 = v90;
  }
  else {
    uint64_t v88 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v84, v85, v86, v87, v89, &byte_2140B33BB, (35 - v89), (35 - v89), v88, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v90);
}

void sub_213F72A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void (***UserDelta::saveUserDelta(UserDelta *this, DFile *a2, DFileChecksums *a3, int a4))(void)
{
  unsigned int v7 = OpenAndWriteMrecHeader((uint64_t)a2, 0x64u, a4, "MRUDL!?", 23, 2);
  int v10 = 0;
  writeObject((uint64_t)v7, (int *)this, &v10);
  writeObject((uint64_t)v7, (int *)this + 1, &v10);
  writeObject((uint64_t)v7, (int *)this + 2, &v10);
  writeObject((uint64_t)v7, (int *)this + 3, &v10);
  writeObject((uint64_t)v7, (int *)this + 4, &v10);
  writeObject((uint64_t)v7, (int *)this + 5, &v10);
  writeObject<char>((uint64_t)v7, (uint64_t)this + 24, &v10);
  writeObject((uint64_t)v7, (int *)this + 10, &v10);
  writeObject<unsigned char>((uint64_t)v7, (uint64_t)this + 48, &v10);
  writeObjectChecksum((uint64_t)v7, &v10);
  uint64_t CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
  DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x64u, v10);
  return DgnDelete<DgnStream>((void (***)(void))v7);
}

uint64_t MrecInitLibrarySet_throughPhoneme(void)
{
  MrecInitLibrarySet_throughFileutil();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();

  return MrecInitModule_sdpres_sdapi();
}

void EmptyNet::~EmptyNet(EmptyNet *this)
{
  HmmNet::~HmmNet(this);

  JUMPOUT(0x216698730);
}

uint64_t EmptyNet::sizeObject(unsigned int *a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v4 = HmmNet::sizeObject(a1, a2);
  uint64_t v5 = sizeObject((uint64_t)(a1 + 29), v2);
  uint64_t v6 = sizeObject((uint64_t)(a1 + 32), v2);
  if (v2 == 3) {
    uint64_t v7 = v4;
  }
  else {
    uint64_t v7 = v4 + 1;
  }
  return v7 + v5 + v6;
}

uint64_t EmptyNet::getExitContext(EmptyNet *this)
{
  return *((void *)this + 1) + 40;
}

uint64_t EmptyNet::getExitContextPtr(EmptyNet *this)
{
  return 0;
}

uint64_t EmptyNet::getBestScore(uint64_t a1, void *a2)
{
  uint64_t result = *(__int16 *)(a1 + 138);
  if (result != 20000) {
    *a2 = a1 + 128;
  }
  return result;
}

uint64_t EmptyNet::scoreNetInternal(uint64_t this, int a2, int a3, int a4)
{
  uint64_t v4 = this;
  int v5 = *(__int16 *)(this + 124);
  int v6 = 20000;
  if (v5 != 20000)
  {
    int v7 = *(unsigned __int16 *)(*(void *)(this + 8) + 244);
    if (v7 == 20000) {
      LOWORD(v7) = 0;
    }
    int v8 = v5 - (__int16)v7;
    if (v8 <= a4) {
      int v6 = v8;
    }
    else {
      int v6 = 20000;
    }
  }
  *(void *)(this + 128) = *(void *)(this + 116);
  *(_WORD *)(this + 136) = v6;
  *(_WORD *)(this + 138) = v6;
  uint64_t v9 = *(void *)(this + 8);
  if (v6 != 20000)
  {
    if (*(_DWORD *)(v9 + 224) >= v6)
    {
      this = BestData::newOrTiedBestNode(v9 + 192, v6, (const Node *)(this + 128), 0);
      uint64_t v9 = *(void *)(v4 + 8);
    }
    uint64_t v10 = v9 + 4 * (v6 + 5000);
    ++*(_DWORD *)(v10 + 151392);
    ++*(_DWORD *)(v9 + 302468);
    ++*(_DWORD *)(v10 + 320);
    ++*(_DWORD *)(v9 + 302464);
  }
  *(_WORD *)(v4 + 108) = v6;
  *(_WORD *)(v4 + 110) = v6;
  if (v6 < *(__int16 *)(v9 + 246)) {
    *(_WORD *)(v9 + 246) = v6;
  }
  return this;
}

uint64_t EmptyNet::thresholdNetInternal(uint64_t this, int a2, int a3)
{
  if (*(__int16 *)(this + 110) <= a3)
  {
    int v3 = 1;
  }
  else
  {
    int v3 = 0;
    *(_WORD *)(this + 110) = 20000;
  }
  *(_DWORD *)(this + 104) = v3;
  return this;
}

uint64_t EmptyNet::calcNumActiveNodes(EmptyNet *this)
{
  return *((unsigned int *)this + 26);
}

uint64_t EmptyNet::unpackEmptySequence(uint64_t this, Node **a2, Node **a3)
{
  *(_DWORD *)(this + 136) = 1310740000;
  *(void *)(this + 140) = 0;
  *(_DWORD *)(this + 148) = -65536;
  *(unsigned char *)(this + 152) = 1;
  *a3 = (Node *)(this + 128);
  *a2 = (Node *)(this + 128);
  return this;
}

uint64_t EmptyNet::attachInPort(uint64_t this, unsigned int a2, Node *a3)
{
  *(void *)(*(void *)(this + 56) + 8 * a2) = this + 116;
  return this;
}

uint64_t HmmNet::isAcoustic(HmmNet *this)
{
  return 0;
}

void Imelda::printSize(Imelda *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/ldt.cpp", 76, (DgnString *)&v40);
  if (v41) {
    int v16 = v40;
  }
  else {
    int v16 = &unk_2140A65B4;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_2140A65B4, a3, &unk_2140A65B4, v16);
  DgnString::~DgnString((DgnString *)&v40);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_2140A65B4);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/ldt.cpp", 78, (DgnString *)&v40);
  if (v41) {
    uint64_t v25 = v40;
  }
  else {
    uint64_t v25 = &unk_2140A65B4;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v21, v22, v23, v24, (a3 + 1), &unk_2140A65B4, (34 - a3), (34 - a3), v25, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v40);
  *a4 += 4;
  *a5 += 4;
  uint64_t v26 = (char *)this + 8;
  uint64_t v27 = LinearTransform::sizeObject((uint64_t)this + 8, 0);
  uint64_t v28 = LinearTransform::sizeObject((uint64_t)v26, 1);
  uint64_t v29 = LinearTransform::sizeObject((uint64_t)v26, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/ldt.cpp", 78, (DgnString *)&v40);
  if (v41) {
    uint64_t v34 = v40;
  }
  else {
    uint64_t v34 = &unk_2140A65B4;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v30, v31, v32, v33, (a3 + 1), &unk_2140A65B4, (34 - a3), (34 - a3), v34, v27, v28, v29);
  DgnString::~DgnString((DgnString *)&v40);
  *a4 += v27;
  *a5 += v28;
  *a6 += v29;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/ldt.cpp", 79, (DgnString *)&v40);
  if (v41) {
    uint64_t v39 = v40;
  }
  else {
    uint64_t v39 = &unk_2140A65B4;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v35, v36, v37, v38, a3, &unk_2140A65B4, (35 - a3), (35 - a3), v39, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v40);
}

void sub_213F73094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void Imelda::saveImelda(Imelda *this, DFile *a2, DFileChecksums *a3, int a4, int a5)
{
  if (a4)
  {
    Imelda::saveImeldaText(this, a2, a5);
  }
  else
  {
    int v8 = OpenAndWriteMrecHeader((uint64_t)a2, 0x1Fu, a5, "MRLDB!?", 19, 3);
    unsigned int v10 = 0;
    writeObject((uint64_t)v8, (int *)this, &v10);
    LinearTransform::writeObject((Imelda *)((char *)this + 8), v8, &v10);
    writeObjectChecksum((uint64_t)v8, (int *)&v10);
    uint64_t CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
    DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x1Fu, v10);
    DgnDelete<DgnStream>((void (***)(void))v8);
  }
}

void Imelda::saveImeldaText(Imelda *this, DFile *a2, int a3)
{
  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v24);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v24, (uint64_t)a2, 0x20u, a3);
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v24, sLDT_Versions, (uint64_t)&v22, v6, v7, v8, v9, v10);
  DgnTextFileWriter::setFileType((uint64_t)v24, "LinearDiscriminantTransform", (void *)(v22 + 8 * (v23 - 1)));
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  v19[0] = 0;
  unint64_t v11 = realloc_array(0, v19, 0x10uLL, 0, 0, 1);
  uint64_t v20 = v19[0];
  LODWORD(v21) = 4;
  HIDWORD(v21) = v11 >> 2;
  DgnArray<DgnString>::DgnArray(v19, 4);
  DgnString::operator=((DgnString *)v19[0], "TableName");
  *uint64_t v20 = 0;
  DgnString::operator=((DgnString *)((char *)v19[0] + 16), "RowIndex");
  v20[1] = 3;
  DgnString::operator=((DgnString *)((char *)v19[0] + 32), "ColumnIndex");
  v20[2] = 3;
  DgnString::operator=((DgnString *)((char *)v19[0] + 48), "TableEntryInt");
  v20[3] = 1;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v24, (uint64_t)&v20, (uint64_t)v19);
  uint64_t v13 = *((unsigned int *)this + 2);
  uint64_t v12 = *((unsigned int *)this + 3);
  int v14 = *((_DWORD *)this + 12);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v24, "InputFeatureDim", v13);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v24, "OutputFeatureDim", v12);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v24, "ModelFeatureDim", *(unsigned int *)this);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v24, "TransformIntScale", 1 << v14);
  if (v12)
  {
    for (uint64_t i = 0; i != v12; ++i)
    {
      if (v13)
      {
        for (uint64_t j = 0; j != v13; ++j)
        {
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v24, 0, "LDAMatrix");
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v24, 1u, i);
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v24, 2u, j);
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v24, 3u, *(_DWORD *)(*(void *)(*((void *)this + 4) + 16 * i) + 4 * j));
          DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v24);
        }
      }
    }
  }
  v18[0] = 0;
  v18[1] = 0;
  DgnPrimArray<int>::copyArraySlice((unint64_t)v18, (uint64_t *)this + 2, 0, *((_DWORD *)this + 6));
  if (v12)
  {
    for (uint64_t k = 0; k != v12; ++k)
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v24, 0, "LDAOffset");
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v24, 1u, k);
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v24, 2u, 0);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v24, 3u, *(_DWORD *)(v18[0] + 4 * k));
      DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v24);
    }
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v18);
  DgnArray<DgnString>::releaseAll((uint64_t)v19);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v20);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v22);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v24);
}

void sub_213F73484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v11 = va_arg(va3, void);
  uint64_t v13 = va_arg(va3, void);
  DgnArray<DgnString>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va2);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)va3);
  _Unwind_Resume(a1);
}

void MrecInitModule_utteranc_channel(void)
{
  if (!gParDebugUttAddFrame)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugUttAddFrame", byte_2140A65D1, byte_2140A65D1, 0, 0, 0);
    *uint64_t v1 = &unk_26C4E0858;
    gParDebugUttAddFrame = (uint64_t)v1;
    int v2 = (uint64_t *)GlobalParamMgr::smpGlobalParamMgr;
    GlobalParamMgr::addParam(v2, (GlobalParam **)&gParDebugUttAddFrame);
  }
}

void PerFrameUttInfo::~PerFrameUttInfo(PerFrameUttInfo *this)
{
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 32);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 16);

  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this);
}

uint64_t Utterance::getMicrosecPerFrame(Utterance *this)
{
  return AcousticFormat::getMicrosecPerFrame((Utterance *)((char *)this + 40));
}

unint64_t DgnArray<EnergyInfo>::copyArraySlice(unint64_t result, void *a2, unsigned int a3, unsigned int a4)
{
  unint64_t v7 = result;
  *(_DWORD *)(result + 8) = 0;
  unsigned int v8 = *(_DWORD *)(result + 12);
  if (a4 <= v8)
  {
    unsigned int v9 = 0;
    unsigned int v10 = 0;
    if (!a4) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t result = DgnPrimArray<unsigned long long>::reallocElts(result, a4 - v8, 0);
    unsigned int v9 = *(_DWORD *)(v7 + 8);
  }
  unsigned int v11 = a4;
  unsigned int v10 = v9;
  do
  {
    *(void *)(*(void *)v7 + 8 * v10) = *(void *)(*a2 + 8 * a3);
    unsigned int v10 = *(_DWORD *)(v7 + 8) + 1;
    *(_DWORD *)(v7 + 8) = v10;
    ++a3;
    --v11;
  }
  while (v11);
LABEL_6:
  if (v10 < a4)
  {
    unint64_t v12 = a4 - (unint64_t)v10;
    uint64_t v13 = *(void *)v7 + 8 * v10 + 6;
    do
    {
      *(void *)(v13 - 6) = 1;
      v13 += 8;
      --v12;
    }
    while (v12);
  }
  *(_DWORD *)(v7 + 8) = a4;
  return result;
}

unint64_t DgnArray<PitchInfo>::copyArraySlice(unint64_t result, void *a2, unsigned int a3, unsigned int a4)
{
  unint64_t v7 = result;
  *(_DWORD *)(result + 8) = 0;
  unsigned int v8 = *(_DWORD *)(result + 12);
  if (a4 <= v8)
  {
    unsigned int v9 = 0;
    unsigned int v10 = 0;
    if (!a4) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t result = DgnPrimArray<unsigned long long>::reallocElts(result, a4 - v8, 0);
    unsigned int v9 = *(_DWORD *)(v7 + 8);
  }
  unsigned int v11 = a4;
  unsigned int v10 = v9;
  do
  {
    *(void *)(*(void *)v7 + 8 * v10) = *(void *)(*a2 + 8 * a3);
    unsigned int v10 = *(_DWORD *)(v7 + 8) + 1;
    *(_DWORD *)(v7 + 8) = v10;
    ++a3;
    --v11;
  }
  while (v11);
LABEL_6:
  if (v10 < a4)
  {
    unint64_t v12 = a4 - (unint64_t)v10;
    uint64_t v13 = (void *)(*(void *)v7 + 8 * v10);
    do
    {
      *v13++ = 0xFFFFFFFF00000000;
      --v12;
    }
    while (v12);
  }
  *(_DWORD *)(v7 + 8) = a4;
  return result;
}

void DgnArray<DgnPrimArray<double>>::copyArraySlice(uint64_t a1, void *a2, int a3, unsigned int a4)
{
  uint64_t v8 = *(unsigned int *)(a1 + 8);
  if ((int)v8 >= 1)
  {
    uint64_t v9 = 16 * v8 - 16;
    do
    {
      DgnPrimArray<unsigned int>::~DgnPrimArray(*(void *)a1 + v9);
      v9 -= 16;
    }
    while (v9 != -16);
  }
  *(_DWORD *)(a1 + 8) = 0;
  unsigned int v10 = *(_DWORD *)(a1 + 12);
  if (a4 <= v10)
  {
    unsigned int v11 = 0;
    unsigned int v12 = 0;
    if (!a4) {
      goto LABEL_14;
    }
  }
  else
  {
    DgnArray<DgnPrimArray<double>>::reallocElts(a1, a4 - v10, 0);
    unsigned int v11 = *(_DWORD *)(a1 + 8);
  }
  int v13 = 0;
  unsigned int v12 = v11;
  do
  {
    uint64_t v14 = *a2 + 16 * (a3 + v13);
    uint64_t v15 = (void *)(*(void *)a1 + 16 * v12);
    *uint64_t v15 = 0;
    v15[1] = 0;
    DgnPrimArray<double>::copyArraySlice((uint64_t)v15, (uint64_t *)v14, 0, *(_DWORD *)(v14 + 8));
    unsigned int v12 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v12;
    ++v13;
  }
  while (a4 != v13);
  if (v12 > a4)
  {
    if ((int)v12 > (int)a4)
    {
      uint64_t v16 = (int)v12;
      uint64_t v17 = 16 * (int)v12 - 16;
      do
      {
        --v16;
        DgnPrimArray<unsigned int>::~DgnPrimArray(*(void *)a1 + v17);
        v17 -= 16;
      }
      while (v16 > (int)a4);
    }
    goto LABEL_17;
  }
LABEL_14:
  if (v12 < a4)
  {
    unint64_t v18 = a4 - (unint64_t)v12;
    uint64_t v19 = 16 * v12;
    do
    {
      uint64_t v20 = (void *)(*(void *)a1 + v19);
      *uint64_t v20 = 0;
      v20[1] = 0;
      v19 += 16;
      --v18;
    }
    while (v18);
  }
LABEL_17:
  *(_DWORD *)(a1 + 8) = a4;
}

void Utterance::~Utterance(Utterance *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((unsigned char *)this + 416)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 270, (uint64_t)"channel/utteranc", 1, (uint64_t)"%s", a7, a8, (char)&errStr_channel_utteranc_E_DEL);
  }
  if (!*((void *)this + 53))
  {
    DgnDelete<EnvMgr>(*((EnvMgr **)this + 40));
    *((void *)this + 40) = 0;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 288);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 272);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 256);
  DgnIOwnArray<WaveData *>::releaseAll((uint64_t)this + 240);
  DgnIOwnArray<WaveData *>::releaseAll((uint64_t)this + 224);
  DgnIOwnArray<SynchronizedArray<DgnPrimArray<unsigned char>> *>::releaseAll((uint64_t)this + 200);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 184);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 168);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 152);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 136);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 120);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 104);
}

void Utterance::printSize(Utterance *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 286, (DgnString *)&v276);
  if (v277) {
    uint64_t v16 = (void *)v276;
  }
  else {
    uint64_t v16 = &unk_2140A65D1;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_2140A65D1, a3, &unk_2140A65D1, v16);
  DgnString::~DgnString((DgnString *)&v276);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_2140A65D1);
  uint64_t v21 = (a3 + 1);
  uint64_t v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 287, (DgnString *)&v276);
  if (v277) {
    uint64_t v27 = (void *)v276;
  }
  else {
    uint64_t v27 = &unk_2140A65D1;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_2140A65D1, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 288, (DgnString *)&v276);
  if (v277) {
    uint64_t v32 = (void *)v276;
  }
  else {
    uint64_t v32 = &unk_2140A65D1;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_2140A65D1, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 290, (DgnString *)&v276);
  if (v277) {
    uint64_t v37 = (void *)v276;
  }
  else {
    uint64_t v37 = &unk_2140A65D1;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &unk_2140A65D1, (34 - a3), (34 - a3), v37, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 292, (DgnString *)&v276);
  if (v277) {
    unsigned int v42 = (void *)v276;
  }
  else {
    unsigned int v42 = &unk_2140A65D1;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), &unk_2140A65D1, (34 - a3), (34 - a3), v42, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 294, (DgnString *)&v276);
  if (v277) {
    int v47 = (void *)v276;
  }
  else {
    int v47 = &unk_2140A65D1;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v43, v44, v45, v46, (a3 + 1), &unk_2140A65D1, (34 - a3), (34 - a3), v47, 8, 8, 0);
  uint64_t v273 = a3;
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 295, (DgnString *)&v276);
  if (v277) {
    uint64_t v52 = (void *)v276;
  }
  else {
    uint64_t v52 = &unk_2140A65D1;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, (a3 + 1), &unk_2140A65D1, (34 - a3), (34 - a3), v52, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += 8;
  *a5 += 8;
  uint64_t v53 = sizeObject((uint64_t)this + 40, 0);
  uint64_t v54 = sizeObject((uint64_t)this + 40, 1);
  uint64_t v55 = sizeObject((uint64_t)this + 40, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 297, (DgnString *)&v276);
  if (v277) {
    uint64_t v60 = (void *)v276;
  }
  else {
    uint64_t v60 = &unk_2140A65D1;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v56, v57, v58, v59, v21, &unk_2140A65D1, v22, v22, v60, v53, v54, v55);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += v53;
  *a5 += v54;
  *a6 += v55;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 298, (DgnString *)&v276);
  if (v277) {
    uint64_t v65 = (void *)v276;
  }
  else {
    uint64_t v65 = &unk_2140A65D1;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v61, v62, v63, v64, v21, &unk_2140A65D1, v22, v22, v65, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 300, (DgnString *)&v276);
  if (v277) {
    uint64_t v70 = (void *)v276;
  }
  else {
    uint64_t v70 = &unk_2140A65D1;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v66, v67, v68, v69, v21, &unk_2140A65D1, v22, v22, v70, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 302, (DgnString *)&v276);
  if (v277) {
    uint64_t v75 = (void *)v276;
  }
  else {
    uint64_t v75 = &unk_2140A65D1;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v71, v72, v73, v74, v21, &unk_2140A65D1, v22, v22, v75, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 304, (DgnString *)&v276);
  if (v277) {
    uint64_t v80 = (void *)v276;
  }
  else {
    uint64_t v80 = &unk_2140A65D1;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v76, v77, v78, v79, v21, &unk_2140A65D1, v22, v22, v80, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += 4;
  *a5 += 4;
  uint64_t v81 = sizeObject<DgnPrimArray<unsigned char>>((uint64_t)this + 104, 0);
  uint64_t v82 = sizeObject<DgnPrimArray<unsigned char>>((uint64_t)this + 104, 1);
  unint64_t v276 = 0;
  uint64_t v277 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v276);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 305, (DgnString *)&v276);
  if (v277) {
    uint64_t v87 = (void *)v276;
  }
  else {
    uint64_t v87 = &unk_2140A65D1;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v83, v84, v85, v86, v21, &unk_2140A65D1, v22, v22, v87, v81, v82, 0);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += v81;
  *a5 += v82;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v88 = 12;
  }
  else {
    uint64_t v88 = 16;
  }
  uint64_t v89 = *((unsigned int *)this + 44);
  unsigned int v90 = *((_DWORD *)this + 45);
  if (v90 >= v89)
  {
    uint64_t v91 = 0;
    if ((int)v89 > 0) {
      uint64_t v88 = (v88 | 2) + 2 * (v89 - 1);
    }
    uint64_t v92 = v88 + 2 * (v90 - v89);
  }
  else
  {
    uint64_t v91 = 2 * v89;
    uint64_t v92 = v88;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 307, (DgnString *)&v276);
  if (v277) {
    int v97 = (void *)v276;
  }
  else {
    int v97 = &unk_2140A65D1;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v93, v94, v95, v96, v21, &unk_2140A65D1, v22, v22, v97, v92, v88, v91);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += v92;
  *a5 += v88;
  *a6 += v91;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v98 = 12;
  }
  else {
    uint64_t v98 = 16;
  }
  uint64_t v99 = *((unsigned int *)this + 48);
  unsigned int v100 = *((_DWORD *)this + 49);
  if (v100 >= v99)
  {
    uint64_t v101 = 0;
    if ((int)v99 > 0) {
      v98 += 4 * (v99 - 1) + 4;
    }
    uint64_t v102 = v98 + 4 * (v100 - v99);
  }
  else
  {
    uint64_t v101 = 4 * v99;
    uint64_t v102 = v98;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 309, (DgnString *)&v276);
  if (v277) {
    uint64_t v107 = (void *)v276;
  }
  else {
    uint64_t v107 = &unk_2140A65D1;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v103, v104, v105, v106, v21, &unk_2140A65D1, v22, v22, v107, v102, v98, v101);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += v102;
  *a5 += v98;
  *a6 += v101;
  uint64_t v108 = sizeObject<SynchronizedArray<DgnPrimArray<unsigned char>> *>((uint64_t)this + 200, 0);
  uint64_t v109 = sizeObject<SynchronizedArray<DgnPrimArray<unsigned char>> *>((uint64_t)this + 200, 1);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 311, (DgnString *)&v276);
  if (v277) {
    unint64_t v114 = (void *)v276;
  }
  else {
    unint64_t v114 = &unk_2140A65D1;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v110, v111, v112, v113, v21, &unk_2140A65D1, v22, v22, v114, v108, v109, 0);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += v108;
  *a5 += v109;
  uint64_t v115 = sizeObject((uint64_t)this + 120, 0);
  uint64_t v116 = sizeObject((uint64_t)this + 120, 1);
  uint64_t v117 = sizeObject((uint64_t)this + 120, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 313, (DgnString *)&v276);
  if (v277) {
    unsigned int v122 = (void *)v276;
  }
  else {
    unsigned int v122 = &unk_2140A65D1;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v118, v119, v120, v121, v21, &unk_2140A65D1, v22, v22, v122, v115, v116, v117);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += v115;
  *a5 += v116;
  *a6 += v117;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 315, (DgnString *)&v276);
  if (v277) {
    unint64_t v127 = (void *)v276;
  }
  else {
    unint64_t v127 = &unk_2140A65D1;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v123, v124, v125, v126, v21, &unk_2140A65D1, v22, v22, v127, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v276);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 317, (DgnString *)&v276);
  if (v277) {
    uint64_t v132 = (void *)v276;
  }
  else {
    uint64_t v132 = &unk_2140A65D1;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v128, v129, v130, v131, v21, &unk_2140A65D1, v22, v22, v132, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v276);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 319, (DgnString *)&v276);
  if (v277) {
    int v137 = (void *)v276;
  }
  else {
    int v137 = &unk_2140A65D1;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v133, v134, v135, v136, v21, &unk_2140A65D1, v22, v22, v137, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v276);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 321, (DgnString *)&v276);
  if (v277) {
    int v142 = (void *)v276;
  }
  else {
    int v142 = &unk_2140A65D1;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v138, v139, v140, v141, v21, &unk_2140A65D1, v22, v22, v142, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v276);
  ++*a4;
  ++*a5;
  uint64_t v143 = sizeObject<WaveData *>((uint64_t)this + 224, 0);
  uint64_t v144 = sizeObject<WaveData *>((uint64_t)this + 224, 1);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 322, (DgnString *)&v276);
  if (v277) {
    unsigned int v149 = (void *)v276;
  }
  else {
    unsigned int v149 = &unk_2140A65D1;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v145, v146, v147, v148, v21, &unk_2140A65D1, v22, v22, v149, v143, v144, 0);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += v143;
  *a5 += v144;
  uint64_t v150 = sizeObject<WaveData *>((uint64_t)this + 240, 0);
  uint64_t v151 = sizeObject<WaveData *>((uint64_t)this + 240, 1);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 324, (DgnString *)&v276);
  if (v277) {
    uint64_t v156 = (void *)v276;
  }
  else {
    uint64_t v156 = &unk_2140A65D1;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v152, v153, v154, v155, v21, &unk_2140A65D1, v22, v22, v156, v150, v151, 0);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += v150;
  *a5 += v151;
  uint64_t v157 = sizeObject<DgnPrimArray<double>>((uint64_t)this + 256, 0);
  uint64_t v158 = sizeObject<DgnPrimArray<double>>((uint64_t)this + 256, 1);
  unint64_t v276 = 0;
  uint64_t v277 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v276);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 326, (DgnString *)&v276);
  if (v277) {
    unsigned int v163 = (void *)v276;
  }
  else {
    unsigned int v163 = &unk_2140A65D1;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v159, v160, v161, v162, v21, &unk_2140A65D1, v22, v22, v163, v157, v158, 0);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += v157;
  *a5 += v158;
  uint64_t v164 = sizeObject<DgnPrimArray<double>>((uint64_t)this + 272, 0);
  uint64_t v165 = sizeObject<DgnPrimArray<double>>((uint64_t)this + 272, 1);
  unint64_t v276 = 0;
  uint64_t v277 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v276);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 327, (DgnString *)&v276);
  if (v277) {
    unsigned int v170 = (void *)v276;
  }
  else {
    unsigned int v170 = &unk_2140A65D1;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v166, v167, v168, v169, v21, &unk_2140A65D1, v22, v22, v170, v164, v165, 0);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += v164;
  *a5 += v165;
  uint64_t v171 = sizeObject<DgnPrimArray<double>>((uint64_t)this + 288, 0);
  uint64_t v172 = sizeObject<DgnPrimArray<double>>((uint64_t)this + 288, 1);
  unint64_t v276 = 0;
  uint64_t v277 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v276);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 329, (DgnString *)&v276);
  if (v277) {
    uint64_t v177 = (void *)v276;
  }
  else {
    uint64_t v177 = &unk_2140A65D1;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v173, v174, v175, v176, v21, &unk_2140A65D1, v22, v22, v177, v171, v172, 0);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += v171;
  *a5 += v172;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v178 = 12;
  }
  else {
    uint64_t v178 = 16;
  }
  uint64_t v179 = *((unsigned int *)this + 78);
  unsigned int v180 = *((_DWORD *)this + 79);
  if (v180 >= v179)
  {
    uint64_t v181 = 0;
    if ((int)v179 > 0) {
      uint64_t v178 = (v178 | 2) + 2 * (v179 - 1);
    }
    uint64_t v182 = v178 + 2 * (v180 - v179);
  }
  else
  {
    uint64_t v181 = 2 * v179;
    uint64_t v182 = v178;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 330, (DgnString *)&v276);
  if (v277) {
    v187 = (void *)v276;
  }
  else {
    v187 = &unk_2140A65D1;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v183, v184, v185, v186, v21, &unk_2140A65D1, v22, v22, v187, v182, v178, v181);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += v182;
  *a5 += v178;
  *a6 += v181;
  unsigned int v188 = (EnvMgr *)*((void *)this + 40);
  if (v188)
  {
    unint64_t v275 = 0;
    unint64_t v276 = 0;
    unint64_t v274 = 0;
    EnvMgr::printSize(v188, 0xFFFFFFFFLL, v21, &v276, &v275, &v274);
    *a4 += v276;
    *a5 += v275;
    *a6 += v274;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v189 = 4;
  }
  else {
    uint64_t v189 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 331, (DgnString *)&v276);
  if (v277) {
    uint64_t v194 = (void *)v276;
  }
  else {
    uint64_t v194 = &unk_2140A65D1;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v190, v191, v192, v193, v21, &unk_2140A65D1, v22, v22, v194, v189, v189, 0);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += v189;
  *a5 += v189;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 332, (DgnString *)&v276);
  if (v277) {
    unsigned int v199 = (void *)v276;
  }
  else {
    unsigned int v199 = &unk_2140A65D1;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v195, v196, v197, v198, v21, &unk_2140A65D1, v22, v22, v199, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 334, (DgnString *)&v276);
  if (v277) {
    uint64_t v204 = (void *)v276;
  }
  else {
    uint64_t v204 = &unk_2140A65D1;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v200, v201, v202, v203, v21, &unk_2140A65D1, v22, v22, v204, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 335, (DgnString *)&v276);
  if (v277) {
    unsigned int v209 = (void *)v276;
  }
  else {
    unsigned int v209 = &unk_2140A65D1;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v205, v206, v207, v208, v21, &unk_2140A65D1, v22, v22, v209, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += 4;
  *a5 += 4;
  uint64_t v210 = SnapTime::sizeObject((uint64_t)this + 352, 0);
  uint64_t v211 = SnapTime::sizeObject((uint64_t)this + 352, 1);
  uint64_t v212 = SnapTime::sizeObject((uint64_t)this + 352, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 336, (DgnString *)&v276);
  if (v277) {
    uint64_t v217 = (void *)v276;
  }
  else {
    uint64_t v217 = &unk_2140A65D1;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v213, v214, v215, v216, v21, &unk_2140A65D1, v22, v22, v217, v210, v211, v212);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += v210;
  *a5 += v211;
  *a6 += v212;
  uint64_t v218 = SnapTime::sizeObject((uint64_t)this + 384, 0);
  uint64_t v219 = SnapTime::sizeObject((uint64_t)this + 384, 1);
  uint64_t v220 = SnapTime::sizeObject((uint64_t)this + 384, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 337, (DgnString *)&v276);
  if (v277) {
    v225 = (void *)v276;
  }
  else {
    v225 = &unk_2140A65D1;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v221, v222, v223, v224, v21, &unk_2140A65D1, v22, v22, v225, v218, v219, v220);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += v218;
  *a5 += v219;
  *a6 += v220;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 339, (DgnString *)&v276);
  if (v277) {
    uint64_t v230 = (void *)v276;
  }
  else {
    uint64_t v230 = &unk_2140A65D1;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v226, v227, v228, v229, v21, &unk_2140A65D1, v22, v22, v230, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v276);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 341, (DgnString *)&v276);
  if (v277) {
    uint64_t v235 = (void *)v276;
  }
  else {
    uint64_t v235 = &unk_2140A65D1;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v231, v232, v233, v234, v21, &unk_2140A65D1, v22, v22, v235, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v276);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 343, (DgnString *)&v276);
  if (v277) {
    uint64_t v240 = (void *)v276;
  }
  else {
    uint64_t v240 = &unk_2140A65D1;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v236, v237, v238, v239, v21, &unk_2140A65D1, v22, v22, v240, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v276);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 345, (DgnString *)&v276);
  if (v277) {
    unsigned int v245 = (void *)v276;
  }
  else {
    unsigned int v245 = &unk_2140A65D1;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v241, v242, v243, v244, v21, &unk_2140A65D1, v22, v22, v245, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v276);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 347, (DgnString *)&v276);
  if (v277) {
    uint64_t v250 = (void *)v276;
  }
  else {
    uint64_t v250 = &unk_2140A65D1;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v246, v247, v248, v249, v21, &unk_2140A65D1, v22, v22, v250, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v276);
  ++*a4;
  ++*a5;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v251 = 4;
  }
  else {
    uint64_t v251 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 349, (DgnString *)&v276);
  if (v277) {
    unsigned int v256 = (void *)v276;
  }
  else {
    unsigned int v256 = &unk_2140A65D1;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v252, v253, v254, v255, v21, &unk_2140A65D1, v22, v22, v256, v251, v251, 0);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += v251;
  *a5 += v251;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v257 = 4;
  }
  else {
    uint64_t v257 = 8;
  }
  uint64_t v258 = *((void *)this + 54);
  if (v258)
  {
    uint64_t v259 = (*(uint64_t (**)(uint64_t, void))(*(void *)v258 + 104))(v258, 0) + v257;
    uint64_t v260 = *((void *)this + 54);
    if (gShadowDiagnosticShowIdealizedObjectSizes) {
      uint64_t v257 = 4;
    }
    else {
      uint64_t v257 = 8;
    }
    if (v260
      && (v257 += (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v260 + 104))(v260, 1),
          (uint64_t v261 = *((void *)this + 54)) != 0))
    {
      uint64_t v262 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v261 + 104))(v261, 3);
    }
    else
    {
      uint64_t v262 = 0;
    }
  }
  else
  {
    uint64_t v262 = 0;
    uint64_t v259 = v257;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 351, (DgnString *)&v276);
  if (v277) {
    unsigned int v267 = (void *)v276;
  }
  else {
    unsigned int v267 = &unk_2140A65D1;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v263, v264, v265, v266, v21, &unk_2140A65D1, v22, v22, v267, v259, v257, v262);
  DgnString::~DgnString((DgnString *)&v276);
  *a4 += v259;
  *a5 += v257;
  *a6 += v262;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/utteranc.cpp", 352, (DgnString *)&v276);
  if (v277) {
    uint64_t v272 = (void *)v276;
  }
  else {
    uint64_t v272 = &unk_2140A65D1;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v268, v269, v270, v271, v273, &unk_2140A65D1, (35 - v273), (35 - v273), v272, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v276);
}

void sub_213F74EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<SynchronizedArray<DgnPrimArray<unsigned char>> *>(uint64_t a1, int a2)
{
  if (a2 == 3) {
    return 0;
  }
  int v4 = gShadowDiagnosticShowIdealizedObjectSizes;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v2 = 12;
  }
  else {
    uint64_t v2 = 16;
  }
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    uint64_t v6 = *(unsigned int *)(a1 + 8);
    if ((int)v6 >= 1)
    {
      unint64_t v7 = v6 + 1;
      int v8 = gShadowDiagnosticShowIdealizedObjectSizes;
      do
      {
        if (v8) {
          uint64_t v9 = 4;
        }
        else {
          uint64_t v9 = 8;
        }
        if (a2 != 2)
        {
          uint64_t v10 = *(void *)(*(void *)a1 + 8 * (v7 - 2));
          if (v10)
          {
            v9 += sizeObject<DgnPrimArray<unsigned char>>(v10 + 8, a2) + 5;
            int v8 = gShadowDiagnosticShowIdealizedObjectSizes;
          }
        }
        v2 += v9;
        --v7;
      }
      while (v7 > 1);
    }
    if (!a2)
    {
      char v11 = 2;
      if (!v4) {
        char v11 = 3;
      }
      v2 += (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8)) << v11;
    }
  }
  return v2;
}

uint64_t sizeObject<WaveData *>(uint64_t a1, int a2)
{
  if (a2 == 3) {
    return 0;
  }
  int v4 = gShadowDiagnosticShowIdealizedObjectSizes;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v2 = 12;
  }
  else {
    uint64_t v2 = 16;
  }
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    uint64_t v6 = *(unsigned int *)(a1 + 8);
    if ((int)v6 >= 1)
    {
      unint64_t v7 = v6 + 1;
      int v8 = gShadowDiagnosticShowIdealizedObjectSizes;
      do
      {
        if (v8) {
          uint64_t v9 = 4;
        }
        else {
          uint64_t v9 = 8;
        }
        if (a2 != 2)
        {
          uint64_t v10 = *(void *)(*(void *)a1 + 8 * (v7 - 2));
          if (v10)
          {
            v9 += sizeObject(v10, a2);
            int v8 = gShadowDiagnosticShowIdealizedObjectSizes;
          }
        }
        v2 += v9;
        --v7;
      }
      while (v7 > 1);
    }
    if (!a2)
    {
      char v11 = 2;
      if (!v4) {
        char v11 = 3;
      }
      v2 += (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8)) << v11;
    }
  }
  return v2;
}

EnvMgr *Utterance::getEnvMgr(Utterance *this)
{
  uint64_t result = (EnvMgr *)*((void *)this + 40);
  if (!result)
  {
    int v3 = MemChunkAlloc(0x110uLL, 0);
    uint64_t result = EnvMgr::EnvMgr((EnvMgr *)v3, 5u);
    *((void *)this + 40) = result;
  }
  return result;
}

uint64_t Utterance::getFeaturesPerFrame(Utterance *this)
{
  return *((unsigned int *)this + 18);
}

void *DgnIOwnArray<WaveData *>::releaseAll(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<WaveData>(*(WaveData **)(*(void *)a1 + v3));
      *(void *)(*(void *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  uint64_t result = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

unint64_t Utterance::setTransformedFrames(unint64_t result, __int16 a2, int a3, uint64_t a4)
{
  unint64_t v7 = result;
  unsigned int v8 = *(_DWORD *)(result + 176);
  if (v8 == *(_DWORD *)(result + 180))
  {
    uint64_t result = DgnPrimArray<short>::reallocElts(result + 168, 1, 1);
    unsigned int v8 = *(_DWORD *)(v7 + 176);
  }
  *(_WORD *)(*(void *)(v7 + 168) + 2 * v8) = a2;
  *(_DWORD *)(v7 + 176) = v8 + 1;
  unsigned int v9 = *(_DWORD *)(v7 + 192);
  if (v9 == *(_DWORD *)(v7 + 196))
  {
    uint64_t result = DgnPrimArray<unsigned int>::reallocElts(v7 + 184, 1, 1);
    unsigned int v9 = *(_DWORD *)(v7 + 192);
  }
  *(_DWORD *)(*(void *)(v7 + 184) + 4 * v9) = a3;
  ++*(_DWORD *)(v7 + 192);
  unsigned int v10 = *(_DWORD *)(v7 + 208);
  if (v10 == *(_DWORD *)(v7 + 212))
  {
    uint64_t result = DgnPrimArray<unsigned long long>::reallocElts(v7 + 200, 1, 1);
    unsigned int v10 = *(_DWORD *)(v7 + 208);
  }
  *(void *)(*(void *)(v7 + 200) + 8 * v10) = a4;
  *(_DWORD *)(v7 + 208) = v10 + 1;
  return result;
}

uint64_t Utterance::getTransformedFrames(uint64_t this, int a2, int a3)
{
  while (1)
  {
    if (*(unsigned char *)(this + 416)) {
      return 0;
    }
    uint64_t v3 = *(unsigned int *)(this + 176);
    if (v3) {
      break;
    }
LABEL_7:
    this = *(void *)(this + 424);
    if (!this) {
      return this;
    }
  }
  uint64_t v4 = 0;
  while (*(unsigned __int16 *)(*(void *)(this + 168) + 2 * v4) != a2
       || *(_DWORD *)(*(void *)(this + 184) + 4 * v4) != a3)
  {
    if (v3 == ++v4) {
      goto LABEL_7;
    }
  }
  return *(void *)(*(void *)(this + 200) + 8 * v4);
}

uint64_t Utterance::numCompleteRecogFrames(Utterance *this, unsigned int a2)
{
  unsigned int v2 = *((_DWORD *)this + 28);
  uint64_t result = 268435200;
  if (v2 != 268435200) {
    return v2 / a2;
  }
  return result;
}

void Utterance::Utterance(Utterance *this, Utterance *a2)
{
  *(void *)this = *(void *)a2;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
  *((void *)this + 4) = *((void *)a2 + 4);
  AcousticFormat::AcousticFormat((uint64_t)this + 40, (uint64_t)a2 + 40);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  DgnArray<DgnPrimArray<unsigned char>>::copyArraySlice((uint64_t)this + 104, (void *)a2 + 13, 0, *((_DWORD *)a2 + 28));
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  DgnArray<EnergyInfo>::copyArraySlice((unint64_t)this + 120, (void *)a2 + 15, 0, *((_DWORD *)a2 + 32));
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  DgnArray<PitchInfo>::copyArraySlice((unint64_t)this + 136, (void *)a2 + 17, 0, *((_DWORD *)a2 + 36));
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  DgnArray<FrameTypeInfo>::copyArraySlice((uint64_t)this + 152, (uint64_t *)a2 + 19, 0, *((_DWORD *)a2 + 40));
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  int v4 = *((_DWORD *)a2 + 54);
  *((_OWORD *)this + 15) = 0u;
  *((_DWORD *)this + 54) = v4;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 16) = 0u;
  DgnArray<DgnPrimArray<double>>::copyArraySlice((uint64_t)this + 256, (void *)a2 + 32, 0, *((_DWORD *)a2 + 66));
  *((void *)this + 34) = 0;
  *((void *)this + 35) = 0;
  DgnArray<DgnPrimArray<double>>::copyArraySlice((uint64_t)this + 272, (void *)a2 + 34, 0, *((_DWORD *)a2 + 70));
  *((void *)this + 36) = 0;
  *((void *)this + 37) = 0;
  DgnArray<DgnPrimArray<double>>::copyArraySlice((uint64_t)this + 288, (void *)a2 + 36, 0, *((_DWORD *)a2 + 74));
  *((void *)this + 38) = 0;
  *((void *)this + 39) = 0;
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 304, (uint64_t *)a2 + 38, 0, *((_DWORD *)a2 + 78));
  *((void *)this + 40) = *((void *)a2 + 40);
  *((_DWORD *)this + 82) = *((_DWORD *)a2 + 82);
  *((void *)this + 42) = *((void *)a2 + 42);
  *((_DWORD *)this + 86) = *((_DWORD *)a2 + 86);
  long long v5 = *((_OWORD *)a2 + 23);
  *((_OWORD *)this + 22) = *((_OWORD *)a2 + 22);
  *((_OWORD *)this + 23) = v5;
  long long v6 = *((_OWORD *)a2 + 25);
  *((_OWORD *)this + 24) = *((_OWORD *)a2 + 24);
  *((_OWORD *)this + 25) = v6;
  *((unsigned char *)this + 416) = *((unsigned char *)a2 + 416);
  *((unsigned char *)this + 417) = *((unsigned char *)a2 + 417);
  *((unsigned char *)this + 418) = *((unsigned char *)a2 + 418);
  *((unsigned char *)this + 419) = 1;
  *((unsigned char *)this + 420) = 0;
  uint64_t v7 = *((void *)a2 + 54);
  *((void *)this + 53) = a2;
  *((void *)this + 54) = v7;
  *((unsigned char *)a2 + 419) = 1;
  if (*((_DWORD *)a2 + 58))
  {
    unint64_t v8 = 0;
    do
    {
      unsigned int v9 = *(const WaveData **)(*((void *)a2 + 28) + 8 * v8);
      unsigned int v10 = MemChunkAlloc(0x40uLL, 0);
      WaveData::WaveData((WaveData *)v10, v9);
      unsigned int v11 = *((_DWORD *)this + 58);
      if (v11 == *((_DWORD *)this + 59))
      {
        DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 224, 1, 1);
        unsigned int v11 = *((_DWORD *)this + 58);
      }
      *(void *)(*((void *)this + 28) + 8 * v11) = v10;
      *((_DWORD *)this + 58) = v11 + 1;
      ++v8;
    }
    while (v8 < *((unsigned int *)a2 + 58));
  }
  if (*((_DWORD *)a2 + 62))
  {
    unint64_t v12 = 0;
    do
    {
      uint64_t v13 = *(const WaveData **)(*((void *)a2 + 30) + 8 * v12);
      uint64_t v14 = MemChunkAlloc(0x40uLL, 0);
      WaveData::WaveData((WaveData *)v14, v13);
      unsigned int v15 = *((_DWORD *)this + 62);
      if (v15 == *((_DWORD *)this + 63))
      {
        DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 240, 1, 1);
        unsigned int v15 = *((_DWORD *)this + 62);
      }
      *(void *)(*((void *)this + 30) + 8 * v15) = v14;
      *((_DWORD *)this + 62) = v15 + 1;
      ++v12;
    }
    while (v12 < *((unsigned int *)a2 + 62));
  }
}

void sub_213F75650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(a14);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(a13);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(a12);
  DgnIOwnArray<WaveData *>::releaseAll(v17);
  DgnIOwnArray<WaveData *>::releaseAll(v16);
  DgnIOwnArray<SynchronizedArray<DgnPrimArray<unsigned char>> *>::releaseAll(v15);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a9);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a10);
  PerFrameUttInfo::~PerFrameUttInfo(v14);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(a11);
  _Unwind_Resume(a1);
}

unint64_t Utterance::syncAfterRecognitionDone(unint64_t this)
{
  uint64_t v1 = this;
  *(unsigned char *)(*(void *)(this + 424) + 419) = 0;
  if (*(_DWORD *)(this + 176))
  {
    unint64_t v2 = 0;
    do
    {
      uint64_t v3 = MemChunkAlloc(0x18uLL, 0);
      unint64_t v4 = SynchronizedArray<DgnPrimArray<unsigned char>>::SynchronizedArray((uint64_t)v3);
      SynchronizedArray<DgnPrimArray<unsigned char>>::update(v4, *(void *)(*(void *)(v1 + 200) + 8 * v2));
      this = Utterance::setTransformedFrames(*(void *)(v1 + 424), *(_WORD *)(*(void *)(v1 + 168) + 2 * v2), *(_DWORD *)(*(void *)(v1 + 184) + 4 * v2), (uint64_t)v3);
      ++v2;
    }
    while (v2 < *(unsigned int *)(v1 + 176));
  }
  *(unsigned char *)(v1 + 419) = 0;
  return this;
}

uint64_t UttFeatureArraySynchronizedArray::update(uint64_t this, const Utterance *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((unsigned int *)a2 + 28);
  long long v5 = (void *)(this + 8);
  unsigned int v7 = *(_DWORD *)(this + 16);
  unsigned int v6 = *(_DWORD *)(this + 20);
  unsigned int v8 = v7;
  if (v4 > v6)
  {
    this = DgnArray<DgnPrimArray<double>>::reallocElts(this + 8, v4 - v6, 0);
    unsigned int v8 = *(_DWORD *)(v3 + 16);
  }
  if (v8 <= v4)
  {
    if (v8 < v4)
    {
      uint64_t v11 = 16 * v8;
      uint64_t v12 = v4 - v8;
      do
      {
        uint64_t v13 = (void *)(*v5 + v11);
        *uint64_t v13 = 0;
        v13[1] = 0;
        v11 += 16;
        --v12;
      }
      while (v12);
    }
  }
  else if ((int)v8 > (int)v4)
  {
    uint64_t v9 = (int)v8;
    uint64_t v10 = 16 * (int)v8 - 16;
    do
    {
      --v9;
      this = DgnPrimArray<unsigned int>::~DgnPrimArray(*v5 + v10);
      v10 -= 16;
    }
    while (v9 > (int)v4);
  }
  *(_DWORD *)(v3 + 16) = v4;
  if ((int)v7 < (int)v4)
  {
    do
    {
      uint64_t v14 = *((void *)a2 + 13) + 16 * v7;
      this = DgnPrimArray<unsigned char>::copyArraySlice(*v5 + 16 * v7++, (void *)v14, 0, *(_DWORD *)(v14 + 8));
    }
    while (v4 != v7);
  }
  if (!*((unsigned char *)a2 + 416)) {
    *(unsigned char *)uint64_t v3 = 1;
  }
  return this;
}

void DgnArray<FrameTypeInfo>::copyArraySlice(uint64_t a1, uint64_t *a2, unsigned int a3, unsigned int a4)
{
  *(_DWORD *)(a1 + 8) = 0;
  unsigned int v8 = *(_DWORD *)(a1 + 12);
  if (a4 <= v8)
  {
    unsigned int v9 = 0;
    unsigned int v10 = 0;
    if (!a4) {
      goto LABEL_6;
    }
  }
  else
  {
    DgnPrimArray<unsigned int>::reallocElts(a1, a4 - v8, 0);
    unsigned int v9 = *(_DWORD *)(a1 + 8);
  }
  uint64_t v11 = *a2;
  uint64_t v12 = *(void *)a1;
  unsigned int v13 = a4;
  unsigned int v10 = v9;
  do
  {
    *(_DWORD *)(v12 + 4 * v10++) = *(_DWORD *)(v11 + 4 * a3++);
    --v13;
  }
  while (v13);
LABEL_6:
  if (v10 < a4) {
    bzero((void *)(*(void *)a1 + 4 * v10), 4 * (~v10 + a4) + 4);
  }
  *(_DWORD *)(a1 + 8) = a4;
}

void *DgnIOwnArray<SynchronizedArray<DgnPrimArray<unsigned char>> *>::releaseAll(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<UttFeatureArraySynchronizedArray>(*(void *)(*(void *)a1 + v3));
      *(void *)(*(void *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  uint64_t result = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

void SigProcDescriptor::SigProcDescriptor(SigProcDescriptor *this)
{
  FeatureGeneratorSpec::FeatureGeneratorSpec(this);
  v2[10] = 0;
  v2[11] = 0;
  CharInfo::CharInfo((CharInfo *)(v2 + 12));
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  FeatureSelectorSpec::FeatureSelectorSpec((SigProcDescriptor *)((char *)this + 120));
  *((_OWORD *)this + 9) = 0u;
  *((_DWORD *)this + 44) = 0;
  *((_OWORD *)this + 10) = 0u;
  ChanStatsSpec::ChanStatsSpec((SigProcDescriptor *)((char *)this + 184));
  *(void *)((char *)this + 332) = 0;
}

void sub_213F75A50(_Unwind_Exception *a1)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 + 160);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v4);
  BitArray::~BitArray((BitArray *)(v1 + 128));
  DgnArray<FeatureFilterSpec>::releaseAll(v3);
  DgnArray<FeatureFilterSpec>::releaseAll(v2);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void SigProcDescriptor::~SigProcDescriptor(SigProcDescriptor *this)
{
  ChanStatsSpec::~ChanStatsSpec((SigProcDescriptor *)((char *)this + 184));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 160);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 144);
  BitArray::~BitArray((SigProcDescriptor *)((char *)this + 128));
  DgnArray<FeatureFilterSpec>::releaseAll((uint64_t)this + 104);
  DgnArray<FeatureFilterSpec>::releaseAll((uint64_t)this + 80);

  MrecInitModule_sdpres_sdapi();
}

uint64_t sizeObject<FeatureFilterSpec>(uint64_t a1, int a2)
{
  FeatureFilterSpec::FeatureFilterSpec((FeatureFilterSpec *)v10);
  uint64_t v4 = sizeObject((uint64_t)v10, 2);
  if (a2 == 3)
  {
    uint64_t v5 = 0;
  }
  else
  {
    if (gShadowDiagnosticShowIdealizedObjectSizes) {
      uint64_t v5 = 12;
    }
    else {
      uint64_t v5 = 16;
    }
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      uint64_t v6 = v4;
      uint64_t v7 = *(unsigned int *)(a1 + 8);
      if ((int)v7 >= 1)
      {
        unint64_t v8 = v7 + 1;
        do
          v5 += sizeObject(*(void *)a1 + 40 * (v8-- - 2), a2);
        while (v8 > 1);
      }
      if (!a2) {
        v5 += v6 * (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
      }
    }
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v11);
  return v5;
}

void sub_213F75CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void SigProcDescriptor::saveSPD(SigProcDescriptor *this, DFile *a2, int a3)
{
  uint64_t v6 = *((unsigned int *)this + 22);
  uint64_t v7 = *((unsigned int *)this + 28);
  int v96 = *((_DWORD *)this + 1);
  uint64_t v8 = *((unsigned int *)this + 31);
  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v108);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v108, (uint64_t)a2, 0x57u, a3);
  uint64_t v106 = 0;
  uint64_t v107 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v108, sSPD_Versions, (uint64_t)&v106, v9, v10, v11, v12, v13);
  DgnTextFileWriter::setFileType((uint64_t)v108, "SignalProcessorDescriptor", (void *)(v106 + 8 * (v107 - 1)));
  DgnString::DgnString((DgnString *)&v104);
  if ((unsigned __int16)(*(_WORD *)this - 1) < 4u) {
    DgnString::operator=((DgnString *)&v104, off_2641F5EF8[(__int16)(*(_WORD *)this - 1)]);
  }
  if (v105) {
    uint64_t v14 = v104;
  }
  else {
    uint64_t v14 = (const char *)&unk_2140A660A;
  }
  DgnTextFileWriter::setHeaderField((DgnTextFileWriter *)v108, "BasicFeatureType", v14);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v108, "MelLowFreqCutoff", *((unsigned int *)this + 8));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v108, "MelHighFreqCutoff", *((unsigned int *)this + 9));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v108, "MelCenterFreqLinearSpacing", *((unsigned int *)this + 10));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v108, "MelCenterFreqLinearSpacingHighCutoff", *((unsigned int *)this + 11));
  DgnTextFileWriter::setHeaderFieldReal((DgnTextFileWriter *)v108, "MelCenterFreqGeometricScale", *((double *)this + 6));
  int v15 = *(unsigned __int16 *)this;
  if (v15 != 3)
  {
    if (v15 != 2) {
      goto LABEL_10;
    }
    DgnTextFileWriter::setHeaderFieldReal((DgnTextFileWriter *)v108, "PLPExponent", *((double *)this + 8));
  }
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v108, "LPCOrder", *((unsigned int *)this + 18));
LABEL_10:
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v108, "SampleRateMin", *((unsigned int *)this + 2));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v108, "SampleRateMax", *((unsigned int *)this + 3));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v108, "FrameLengthInMicrosec", *((unsigned int *)this + 83));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v108, "AnalysisWindowLengthInMicrosec", *((unsigned int *)this + 84));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v108, "NumberOfSpectralWarpChoices", *((unsigned int *)this + 80));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v108, "BasicFeatureDim", *((unsigned int *)this + 1));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v108, "AntialiasFeatureFilters", v6);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v108, "AntialiasDecimationFactor", *((unsigned int *)this + 24));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v108, "BasicFeatureFilters", v7);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v108, "FinalFeatureDim", v8);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v108, "ModelFeatureDim", *((unsigned int *)this + 82));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v108, "FeatureScaleAndOffsetIntScale", 1 << *((_DWORD *)this + 44));
  DgnTextFileWriter::setHeaderFieldReal((DgnTextFileWriter *)v108, "PreemphCoeff", *((double *)this + 3));
  int v16 = *((unsigned __int16 *)this + 92);
  if (v16 == 1)
  {
    uint64_t v17 = "NoMeansNorm";
  }
  else
  {
    if (v16 != 2) {
      goto LABEL_15;
    }
    uint64_t v17 = "ChannelMeansSubtraction";
  }
  DgnString::operator=((DgnString *)&v104, v17);
LABEL_15:
  if (v105) {
    uint64_t v18 = v104;
  }
  else {
    uint64_t v18 = (const char *)&unk_2140A660A;
  }
  DgnTextFileWriter::setHeaderField((DgnTextFileWriter *)v108, "ChannelMeansNormalizationType", v18);
  int v19 = *((unsigned __int16 *)this + 104);
  if (v19 == 1)
  {
    uint64_t v20 = "NoVarianceNorm";
  }
  else
  {
    if (v19 != 2) {
      goto LABEL_23;
    }
    uint64_t v20 = "ChannelVarianceNorm";
  }
  DgnString::operator=((DgnString *)&v104, v20);
LABEL_23:
  if (v105) {
    uint64_t v21 = v104;
  }
  else {
    uint64_t v21 = (const char *)&unk_2140A660A;
  }
  DgnTextFileWriter::setHeaderField((DgnTextFileWriter *)v108, "ChannelVarianceNormalizationType", v21);
  unsigned int v22 = *((unsigned __int16 *)this + 132) - 1;
  if (v22 <= 2) {
    DgnString::operator=((DgnString *)&v104, off_2641F5F18[(__int16)v22]);
  }
  if (v105) {
    uint64_t v23 = v104;
  }
  else {
    uint64_t v23 = (const char *)&unk_2140A660A;
  }
  DgnTextFileWriter::setHeaderField((DgnTextFileWriter *)v108, "CDFNormalizationType", v23);
  if (*((_WORD *)this + 132) != 1) {
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v108, "CDFNormalizationSum", *((unsigned int *)this + 72));
  }
  int v24 = *((unsigned __int16 *)this + 146);
  if (v24 == 1)
  {
    uint64_t v25 = "NoMaximumNorm";
  }
  else
  {
    if (v24 != 2) {
      goto LABEL_38;
    }
    uint64_t v25 = "C0MaximumNorm";
  }
  DgnString::operator=((DgnString *)&v104, v25);
LABEL_38:
  if (v105) {
    uint64_t v26 = v104;
  }
  else {
    uint64_t v26 = (const char *)&unk_2140A660A;
  }
  DgnTextFileWriter::setHeaderField((DgnTextFileWriter *)v108, "ChannelMaxNormalizationType", v26);
  int v27 = *((unsigned __int16 *)this + 28);
  if (v27 == 1)
  {
    uint64_t v28 = "SplitRadixFloat";
  }
  else
  {
    if (v27 != 2) {
      goto LABEL_46;
    }
    uint64_t v28 = "SplitRadixInteger";
  }
  DgnString::operator=((DgnString *)&v104, v28);
LABEL_46:
  if (v105) {
    uint64_t v29 = v104;
  }
  else {
    uint64_t v29 = (const char *)&unk_2140A660A;
  }
  DgnTextFileWriter::setHeaderField((DgnTextFileWriter *)v108, "FourierTransformType", v29);
  DgnArray<DgnString>::DgnArray(v103, 4);
  uint64_t v98 = v6;
  uint64_t v109 = 0;
  unint64_t v30 = realloc_array(0, &v109, 0x10uLL, 0, 0, 1);
  unsigned int v100 = v109;
  int v101 = 4;
  int v102 = v30 >> 2;
  DgnString::operator=(*(DgnString **)v103, "Type");
  *unsigned int v100 = 0;
  DgnString::operator=((DgnString *)(*(void *)v103 + 16), "UnsVal1");
  v100[1] = 3;
  DgnString::operator=((DgnString *)(*(void *)v103 + 32), "IntVal1");
  v100[2] = 1;
  DgnString::operator=((DgnString *)(*(void *)v103 + 48), "IntVal2");
  v100[3] = 1;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v108, (uint64_t)&v100, (uint64_t)v103);
  uint64_t v97 = v7;
  if (v7)
  {
    uint64_t v99 = *((unsigned int *)this + 80);
    if (v99)
    {
      uint64_t v31 = 0;
      int v32 = 0;
      do
      {
        uint64_t v33 = *((void *)this + 39);
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v108, 0, "WarpChoiceInfo");
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v108, 1u, v32);
        DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 2u, *(unsigned __int8 *)(v33 + v31));
        DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 3u, *(_DWORD *)(v33 + v31 + 16));
        DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v108);
        ++v32;
        v31 += 24;
      }
      while (24 * v99 != v31);
      for (uint64_t i = 0; i != v99; ++i)
      {
        uint64_t v35 = *((void *)this + 39);
        uint64_t v36 = v35 + 24 * i;
        int v38 = *(_DWORD *)(v36 + 16);
        uint64_t v37 = (unsigned int *)(v36 + 16);
        if (v38)
        {
          uint64_t v39 = 0;
          unint64_t v40 = 0;
          uint64_t v41 = (void *)(v35 + 24 * i + 8);
          do
          {
            unsigned int v42 = (int *)(*v41 + v39);
            int v44 = *v42;
            int v43 = v42[1];
            DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v108, 0, "SpectralWarpChoiceCoordinates");
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v108, 1u, i);
            DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 2u, v44);
            DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 3u, v43);
            DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v108);
            ++v40;
            v39 += 8;
          }
          while (v40 < *v37);
        }
      }
    }
  }
  if (v98)
  {
    uint64_t v45 = 0;
    int v46 = 0;
    do
    {
      uint64_t v47 = *((void *)this + 10);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v108, 0, "AntialiasFeatureFilterInput");
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v108, 1u, v46);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 2u, *(_DWORD *)(v47 + v45 + 12) / *(_DWORD *)(v47 + v45));
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 3u, 0);
      DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v108);
      ++v46;
      v45 += 40;
    }
    while (40 * v98 != v45);
    uint64_t v48 = 0;
    uint64_t v49 = 32;
    do
    {
      uint64_t v50 = *((void *)this + 10);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v108, 0, "AntialiasFeatureFilterInverseScale");
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v108, 1u, v48);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 2u, *(_DWORD *)(v50 + v49));
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 3u, 0);
      DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v108);
      ++v48;
      v49 += 40;
    }
    while (v98 != v48);
    uint64_t v51 = 0;
    int v52 = 0;
    do
    {
      uint64_t v53 = *((void *)this + 10) + v51;
      int v55 = *(_DWORD *)(v53 + 4);
      int v54 = *(_DWORD *)(v53 + 8);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v108, 0, "AntialiasFeatureFilterRange");
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v108, 1u, v52);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 2u, -v54);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 3u, v55 + ~v54);
      DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v108);
      v51 += 40;
      ++v52;
    }
    while (40 * v98 != v51);
    for (uint64_t j = 0; j != v98; ++j)
    {
      uint64_t v57 = *((void *)this + 10);
      uint64_t v58 = v57 + 40 * j;
      int v60 = *(_DWORD *)(v58 + 4);
      uint64_t v59 = (unsigned int *)(v58 + 4);
      if (v60)
      {
        unint64_t v61 = 0;
        uint64_t v62 = v57 + 40 * j;
        uint64_t v63 = (_DWORD *)(v62 + 8);
        uint64_t v64 = (void *)(v62 + 16);
        do
        {
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v108, 0, "AntialiasFeatureFilterCoeff");
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v108, 1u, j);
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 2u, v61 - *v63);
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 3u, *(_DWORD *)(*v64 + 4 * v61));
          DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v108);
          ++v61;
        }
        while (v61 < *v59);
      }
    }
  }
  if (v97)
  {
    uint64_t v65 = 0;
    int v66 = 0;
    do
    {
      uint64_t v67 = *((void *)this + 13);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v108, 0, "BasicFeatureFilterInput");
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v108, 1u, v66);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 2u, *(_DWORD *)(v67 + v65 + 12) / *(_DWORD *)(v67 + v65));
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 3u, 0);
      DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v108);
      ++v66;
      v65 += 40;
    }
    while (40 * v97 != v65);
    uint64_t v68 = 0;
    uint64_t v69 = 32;
    do
    {
      uint64_t v70 = *((void *)this + 13);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v108, 0, "BasicFeatureFilterInverseScale");
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v108, 1u, v68);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 2u, *(_DWORD *)(v70 + v69));
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 3u, 0);
      DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v108);
      ++v68;
      v69 += 40;
    }
    while (v97 != v68);
    uint64_t v71 = 0;
    int v72 = 0;
    do
    {
      uint64_t v73 = *((void *)this + 13) + v71;
      int v75 = *(_DWORD *)(v73 + 4);
      int v74 = *(_DWORD *)(v73 + 8);
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v108, 0, "BasicFeatureFilterRange");
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v108, 1u, v72);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 2u, -v74);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 3u, v75 + ~v74);
      DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v108);
      v71 += 40;
      ++v72;
    }
    while (40 * v97 != v71);
    for (uint64_t k = 0; k != v97; ++k)
    {
      uint64_t v77 = *((void *)this + 13);
      uint64_t v78 = v77 + 40 * k;
      int v80 = *(_DWORD *)(v78 + 4);
      uint64_t v79 = (unsigned int *)(v78 + 4);
      if (v80)
      {
        unint64_t v81 = 0;
        uint64_t v82 = v77 + 40 * k;
        uint64_t v83 = (_DWORD *)(v82 + 8);
        uint64_t v84 = (void *)(v82 + 16);
        do
        {
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v108, 0, "BasicFeatureFilterCoeff");
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v108, 1u, k);
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 2u, v81 - *v83);
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 3u, *(_DWORD *)(*v84 + 4 * v81));
          DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v108);
          ++v81;
        }
        while (v81 < *v79);
      }
    }
  }
  uint64_t v85 = (v96 + v96 * v97);
  if (v85)
  {
    for (uint64_t m = 0; m != v85; ++m)
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v108, 0, "FeatureScaleAndOffset");
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v108, 1u, m);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 2u, *(_DWORD *)(*((void *)this + 18) + 4 * m));
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 3u, *(_DWORD *)(*((void *)this + 20) + 4 * m));
      DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v108);
    }
  }
  if (*((_WORD *)this + 146) == 2)
  {
    int v87 = 0;
    char v88 = 1;
    do
    {
      char v89 = v88;
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v108, 0, "ChannelMaxNormInitialCoordinates");
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v108, 1u, v87);
      if (v89)
      {
        DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 2u, *((_DWORD *)this + 74));
        unsigned int v90 = (int *)((char *)this + 300);
      }
      else
      {
        DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 2u, *((_DWORD *)this + 76));
        unsigned int v90 = (int *)((char *)this + 308);
      }
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 3u, *v90);
      DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v108);
      char v88 = 0;
      int v87 = 1;
    }
    while ((v89 & 1) != 0);
  }
  if (*((_WORD *)this + 92) != 1 && v85)
  {
    for (uint64_t n = 0; n != v85; ++n)
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v108, 0, "ChannelMeansTarget");
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v108, 1u, n);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 2u, *(unsigned __int8 *)(*((void *)this + 24) + n));
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 3u, 0);
      DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v108);
    }
  }
  if (*((_WORD *)this + 104) != 1 && v85)
  {
    for (iuint64_t i = 0; ii != v85; ++ii)
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v108, 0, "ChannelVarianceTarget");
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v108, 1u, ii);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 2u, *(unsigned __int8 *)(*((void *)this + 27) + ii));
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 3u, 0);
      DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v108);
    }
    for (juint64_t j = 0; jj != v85; ++jj)
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v108, 0, "ChannelVarianceRange");
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v108, 1u, jj);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 2u, *(unsigned __int8 *)(*((void *)this + 29) + jj));
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 3u, *(unsigned __int8 *)(*((void *)this + 31) + jj));
      DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v108);
    }
  }
  if (*((_WORD *)this + 132) != 1)
  {
    for (kuint64_t k = 0; kk != 256; ++kk)
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v108, 0, "CDFNormalizationTargetHistogram");
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v108, 1u, kk);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 2u, *(_DWORD *)(*((void *)this + 34) + 4 * kk));
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 3u, 0);
      DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v108);
    }
  }
  if (v85)
  {
    unsigned int v95 = 0;
    do
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v108, 0, "FeatureSelector");
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v108, 1u, v95);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 2u, (*(_DWORD *)(*((void *)this + 16) + 4 * (v95 >> 5)) >> v95) & 1);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v108, 3u, 0);
      DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v108);
      ++v95;
    }
    while (v85 != v95);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v100);
  DgnArray<DgnString>::releaseAll((uint64_t)v103);
  DgnString::~DgnString((DgnString *)&v104);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v106);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v108);
}

void sub_213F76ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va3, a8);
  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v15 = va_arg(va3, void);
  uint64_t v17 = va_arg(va3, void);
  DgnArray<DgnString>::releaseAll((uint64_t)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va2);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)va3);
  _Unwind_Resume(a1);
}

void SigProcDescriptor::saveSigProcDescriptor(SigProcDescriptor *this, DFile *a2, DFileChecksums *a3, int a4, int a5)
{
  if (a4)
  {
    SigProcDescriptor::saveSPD(this, a2, a5);
  }
  else
  {
    uint64_t v8 = OpenAndWriteMrecHeader((uint64_t)a2, 0x56u, a5, "MRSPD!?", 24, 6);
    unsigned int v10 = 0;
    writeObject(v8, this, &v10);
    writeObject<FeatureFilterSpec>(v8, (uint64_t)this + 80, &v10);
    writeObject(v8, (char *)this + 96, &v10);
    writeObject<FeatureFilterSpec>(v8, (uint64_t)this + 104, &v10);
    writeObject(v8, (SigProcDescriptor *)((char *)this + 120), &v10);
    writeObject(v8, (SigProcDescriptor *)((char *)this + 144), &v10);
    writeObject(v8, (SigProcDescriptor *)((char *)this + 184), &v10);
    writeObject((uint64_t)v8, (int *)this + 82, &v10);
    writeObject((uint64_t)v8, (int *)this + 83, &v10);
    writeObject((uint64_t)v8, (int *)this + 84, &v10);
    writeObjectChecksum((uint64_t)v8, (int *)&v10);
    uint64_t CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
    DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x56u, v10);
    DgnDelete<DgnStream>((void (***)(void))v8);
  }
}

uint64_t writeObject<FeatureFilterSpec>(DgnStream *a1, uint64_t a2, unsigned int *a3)
{
  int v9 = *(_DWORD *)(a2 + 8);
  uint64_t result = writeObject((uint64_t)a1, &v9, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      uint64_t result = writeObject(a1, (const FeatureFilterSpec *)(*(void *)a2 + v7), a3);
      ++v8;
      v7 += 40;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

void SigProcDescriptor::printSize(SigProcDescriptor *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/spd.cpp", 1365, (DgnString *)&v101);
  if (v102) {
    int v16 = v101;
  }
  else {
    int v16 = &unk_2140A660A;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_2140A660A, a3, &unk_2140A660A, v16);
  DgnString::~DgnString((DgnString *)&v101);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_2140A660A);
  uint64_t v21 = sizeObject((uint64_t)this, 0);
  uint64_t v22 = sizeObject((uint64_t)this, 1);
  uint64_t v23 = sizeObject((uint64_t)this, 3);
  uint64_t v24 = (a3 + 1);
  uint64_t v100 = a3;
  uint64_t v25 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/spd.cpp", 1367, (DgnString *)&v101);
  if (v102) {
    unint64_t v30 = v101;
  }
  else {
    unint64_t v30 = &unk_2140A660A;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v26, v27, v28, v29, v24, &unk_2140A660A, v25, v25, v30, v21, v22, v23);
  DgnString::~DgnString((DgnString *)&v101);
  *a4 += v21;
  *a5 += v22;
  *a6 += v23;
  uint64_t v31 = sizeObject<FeatureFilterSpec>((uint64_t)this + 80, 0);
  uint64_t v32 = sizeObject<FeatureFilterSpec>((uint64_t)this + 80, 1);
  uint64_t v33 = sizeObject<FeatureFilterSpec>((uint64_t)this + 80, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/spd.cpp", 1367, (DgnString *)&v101);
  if (v102) {
    int v38 = v101;
  }
  else {
    int v38 = &unk_2140A660A;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v34, v35, v36, v37, v24, &unk_2140A660A, v25, v25, v38, v31, v32, v33);
  DgnString::~DgnString((DgnString *)&v101);
  *a4 += v31;
  *a5 += v32;
  *a6 += v33;
  uint64_t v39 = sizeObject((uint64_t)this + 96, 0);
  uint64_t v40 = sizeObject((uint64_t)this + 96, 1);
  uint64_t v41 = sizeObject((uint64_t)this + 96, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/spd.cpp", 1367, (DgnString *)&v101);
  if (v102) {
    int v46 = v101;
  }
  else {
    int v46 = &unk_2140A660A;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v42, v43, v44, v45, v24, &unk_2140A660A, v25, v25, v46, v39, v40, v41);
  DgnString::~DgnString((DgnString *)&v101);
  *a4 += v39;
  *a5 += v40;
  *a6 += v41;
  uint64_t v47 = sizeObject<FeatureFilterSpec>((uint64_t)this + 104, 0);
  uint64_t v48 = sizeObject<FeatureFilterSpec>((uint64_t)this + 104, 1);
  uint64_t v49 = sizeObject<FeatureFilterSpec>((uint64_t)this + 104, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/spd.cpp", 1367, (DgnString *)&v101);
  if (v102) {
    int v54 = v101;
  }
  else {
    int v54 = &unk_2140A660A;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v50, v51, v52, v53, v24, &unk_2140A660A, v25, v25, v54, v47, v48, v49);
  DgnString::~DgnString((DgnString *)&v101);
  *a4 += v47;
  *a5 += v48;
  *a6 += v49;
  uint64_t v55 = sizeObject((uint64_t)this + 120, 0);
  uint64_t v56 = sizeObject((uint64_t)this + 120, 1);
  uint64_t v57 = sizeObject((uint64_t)this + 120, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/spd.cpp", 1367, (DgnString *)&v101);
  if (v102) {
    uint64_t v62 = v101;
  }
  else {
    uint64_t v62 = &unk_2140A660A;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, v24, &unk_2140A660A, v25, v25, v62, v55, v56, v57);
  DgnString::~DgnString((DgnString *)&v101);
  *a4 += v55;
  *a5 += v56;
  *a6 += v57;
  uint64_t v63 = sizeObject((char *)this + 144, 0);
  uint64_t v64 = sizeObject((char *)this + 144, 1);
  uint64_t v65 = sizeObject((char *)this + 144, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/spd.cpp", 1367, (DgnString *)&v101);
  if (v102) {
    uint64_t v70 = v101;
  }
  else {
    uint64_t v70 = &unk_2140A660A;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v66, v67, v68, v69, v24, &unk_2140A660A, v25, v25, v70, v63, v64, v65);
  DgnString::~DgnString((DgnString *)&v101);
  *a4 += v63;
  *a5 += v64;
  *a6 += v65;
  uint64_t v71 = (char *)this + 184;
  uint64_t v72 = sizeObject((char *)this + 184, 0);
  uint64_t v73 = sizeObject(v71, 1);
  uint64_t v74 = sizeObject(v71, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/spd.cpp", 1367, (DgnString *)&v101);
  if (v102) {
    uint64_t v79 = v101;
  }
  else {
    uint64_t v79 = &unk_2140A660A;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v75, v76, v77, v78, v24, &unk_2140A660A, v25, v25, v79, v72, v73, v74);
  DgnString::~DgnString((DgnString *)&v101);
  *a4 += v72;
  *a5 += v73;
  *a6 += v74;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/spd.cpp", 1367, (DgnString *)&v101);
  if (v102) {
    uint64_t v84 = v101;
  }
  else {
    uint64_t v84 = &unk_2140A660A;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v80, v81, v82, v83, v24, &unk_2140A660A, v25, v25, v84, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v101);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/spd.cpp", 1367, (DgnString *)&v101);
  if (v102) {
    char v89 = v101;
  }
  else {
    char v89 = &unk_2140A660A;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v85, v86, v87, v88, v24, &unk_2140A660A, v25, v25, v89, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v101);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/spd.cpp", 1367, (DgnString *)&v101);
  if (v102) {
    uint64_t v94 = v101;
  }
  else {
    uint64_t v94 = &unk_2140A660A;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v90, v91, v92, v93, v24, &unk_2140A660A, v25, v25, v94, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v101);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/spd.cpp", 1368, (DgnString *)&v101);
  if (v102) {
    uint64_t v99 = v101;
  }
  else {
    uint64_t v99 = &unk_2140A660A;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v95, v96, v97, v98, v100, &unk_2140A660A, (35 - v100), (35 - v100), v99, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v101);
}

void sub_213F77440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void *DgnArray<FeatureFilterSpec>::releaseAll(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 1)
  {
    uint64_t v3 = 40 * v2 - 24;
    do
    {
      DgnPrimArray<unsigned int>::~DgnPrimArray(*(void *)a1 + v3);
      v3 -= 40;
    }
    while (v3 != -24);
  }
  uint64_t result = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

uint64_t DgnSharedMemStream::DgnSharedMemStream(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v8 = DgnStream::DgnStream(a1, a4, 0);
  *(void *)uint64_t v8 = &unk_26C4E1DD0;
  *(_DWORD *)(v8 + DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)this + 56) = a3;
  *(void *)(v8 + 64) = a2;
  *(void *)(v8 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 72) = 0;
  int v9 = (FileSpec *)(v8 + 16);
  FileSpec::setEmpty((FileSpec *)(v8 + 16));
  DgnSharedMemSet::getMappedDSMName(*(DgnSharedMemSet **)(a1 + 64), a3, (DgnString *)&v19);
  if (v20) {
    unsigned int v10 = v19;
  }
  else {
    unsigned int v10 = (char *)&unk_2140A664D;
  }
  FileSpec::fillFromName(v9, v10);
  DgnString::~DgnString((DgnString *)&v19);
  if (a4 == 2)
  {
    if (*(_DWORD *)(a1 + 24)) {
      int v16 = *(void **)v9;
    }
    else {
      int v16 = &unk_2140A664D;
    }
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dsmstream.cpp", 58, (uint64_t)"dfutil/dsmstream", 2, (uint64_t)"%.500s", v14, v15, (char)v16);
  }
  if (a4) {
    int v17 = 4;
  }
  else {
    int v17 = 3;
  }
  DgnSharedMemStream::openDSM(a1, v17, -1, v11, v12, v13, v14, v15);
  return a1;
}

void sub_213F77600(_Unwind_Exception *a1)
{
  DgnStream::~DgnStream(v1);
  _Unwind_Resume(a1);
}

char *DgnSharedMemStream::openDSM(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = a3;
  if (*(void *)(a1 + 72))
  {
    if (*(_DWORD *)(a1 + 24)) {
      unsigned int v10 = *(void **)(a1 + 16);
    }
    else {
      unsigned int v10 = &unk_2140A664D;
    }
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dsmstream.cpp", 79, (uint64_t)"dfutil/dsmstream", 6, (uint64_t)"%.500s", a7, a8, (char)v10);
  }
  uint64_t result = DgnSharedMemSet::openDSMWithSizeEx(*(DSMSetData ***)(a1 + 64), *(unsigned int *)(a1 + 56), a2, &v13);
  if (!a2)
  {
    *(void *)(a1 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 72) = -1;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
    goto LABEL_10;
  }
  *(void *)(a1 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 72) = result;
  *(void *)(a1 + 40) = v13;
  *(void *)(a1 + 48) = 0;
  if ((a2 & 0xFFFFFFFE) != 2)
  {
LABEL_10:
    int v12 = 1;
    goto LABEL_11;
  }
  int v12 = 0;
LABEL_11:
  *(_DWORD *)(a1 + 8) = v12;
  return result;
}

void DgnSharedMemStream::DgnSharedMemStream(DgnSharedMemStream *this, DgnSharedMemSet *a2, unsigned int a3)
{
  uint64_t v6 = DgnStream::DgnStream((uint64_t)this, 0, 0);
  *(void *)uint64_t v6 = &unk_26C4E1DD0;
  *(_DWORD *)(v6 + DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)this + 56) = a3;
  *(void *)(v6 + 64) = a2;
  *(void *)(v6 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 72) = 0;
  uint64_t v7 = (FileSpec *)(v6 + 16);
  FileSpec::setEmpty((FileSpec *)(v6 + 16));
  DgnSharedMemSet::getMappedDSMName(*((DgnSharedMemSet **)this + 8), a3, (DgnString *)&v9);
  if (v10) {
    uint64_t v8 = v9;
  }
  else {
    uint64_t v8 = (char *)&unk_2140A664D;
  }
  FileSpec::fillFromName(v7, v8);
  DgnString::~DgnString((DgnString *)&v9);
}

void sub_213F777A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  DgnString::~DgnString((DgnString *)&a9);
  DgnStream::~DgnStream(v9);
  _Unwind_Resume(a1);
}

uint64_t DgnSharedMemStream::closeDSM(uint64_t this)
{
  uint64_t v1 = this;
  if (*(void *)(this + 72)) {
    this = DgnSharedMemSet::closeDSMEx(*(DgnSharedMemSet **)(this + 64), *(_DWORD *)(this + 56));
  }
  *(void *)(v1 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 72) = 0;
  return this;
}

void DgnSharedMemStream::~DgnSharedMemStream(DgnSharedMemStream *this)
{
  *(void *)this = &unk_26C4E1DD0;
  if (*((void *)this + 9)) {
    DgnSharedMemSet::closeDSMEx(*((DgnSharedMemSet **)this + 8), *((_DWORD *)this + 14));
  }

  DgnStream::~DgnStream(this);
}

{
  uint64_t vars8;

  DgnSharedMemStream::~DgnSharedMemStream(this);

  JUMPOUT(0x216698730);
}

void DgnSharedMemStream::seekFromBeg(DgnSharedMemStream *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*((void *)this + 9)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dsmstream.cpp", 137, (uint64_t)"dfutil/dsmstream", 1, (uint64_t)"%s", a7, a8, (char)&unk_2140A664D);
  }
  if (*((void *)this + 5) < a2)
  {
    if (*((void *)this + 9) == -1)
    {
      *((void *)this + 5) = a2;
    }
    else
    {
      if (*((_DWORD *)this + 6)) {
        int v10 = (void *)*((void *)this + 2);
      }
      else {
        int v10 = &unk_2140A664D;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dsmstream.cpp", 148, (uint64_t)"dfutil/dsmstream", 3, (uint64_t)"%.500s %llu %llu", a7, a8, (char)v10);
    }
  }
  *((void *)this + 6) = a2;
}

void DgnSharedMemStream::seekToEnd(DgnSharedMemStream *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*((void *)this + 9)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dsmstream.cpp", 157, (uint64_t)"dfutil/dsmstream", 1, (uint64_t)"%s", a7, a8, (char)&unk_2140A664D);
  }
  *((void *)this + 6) = *((void *)this + 5);
}

uint64_t DgnSharedMemStream::tell(DgnSharedMemStream *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*((void *)this + 9)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dsmstream.cpp", 166, (uint64_t)"dfutil/dsmstream", 1, (uint64_t)"%s", a7, a8, (char)&unk_2140A664D);
  }
  return *((void *)this + 6);
}

unint64_t DgnSharedMemStream::tell32(DgnSharedMemStream *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*((void *)this + 9)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dsmstream.cpp", 173, (uint64_t)"dfutil/dsmstream", 1, (uint64_t)"%s", a7, a8, (char)&unk_2140A664D);
  }
  unint64_t v9 = *((void *)this + 6);
  if (HIDWORD(v9))
  {
    if (*((_DWORD *)this + 6)) {
      int v10 = (void *)*((void *)this + 2);
    }
    else {
      int v10 = &unk_2140A664D;
    }
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dsmstream.cpp", 176, (uint64_t)"dfutil/dsmstream", 5, (uint64_t)"%.500s", a7, a8, (char)v10);
  }
  return v9;
}

BOOL DgnSharedMemStream::eof(DgnSharedMemStream *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*((void *)this + 9)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dsmstream.cpp", 183, (uint64_t)"dfutil/dsmstream", 1, (uint64_t)"%s", a7, a8, (char)&unk_2140A664D);
  }
  return *((void *)this + 6) == *((void *)this + 5);
}

uint64_t DgnSharedMemStream::peekForChar(DgnSharedMemStream *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*((void *)this + 9)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dsmstream.cpp", 198, (uint64_t)"dfutil/dsmstream", 1, (uint64_t)"%s", a7, a8, (char)&unk_2140A664D);
  }
  unint64_t v9 = *((void *)this + 6);
  if (v9 >= *((void *)this + 5)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *(char *)(*((void *)this + 9) + v9);
  }
}

size_t DgnSharedMemStream::readWithMode(uint64_t a1, void *__dst, size_t __n, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v9 = __n;
  if (*(void *)(a1 + 72))
  {
    if (!__n) {
      return v9;
    }
  }
  else
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dsmstream.cpp", 213, (uint64_t)"dfutil/dsmstream", 1, (uint64_t)"%s", a7, a8, (char)&unk_2140A664D);
    if (!v9) {
      return v9;
    }
  }
  uint64_t v12 = *(void *)(a1 + 48);
  unint64_t v13 = *(void *)(a1 + 40) - v12;
  size_t v14 = v9;
  if (v13 < v9)
  {
    if (a4 == 1)
    {
      if (*(_DWORD *)(a1 + 24)) {
        uint64_t v15 = *(void **)(a1 + 16);
      }
      else {
        uint64_t v15 = &unk_2140A664D;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dsmstream.cpp", 226, (uint64_t)"dfutil/dsmstream", 3, (uint64_t)"%.500s %llu %llu", a7, a8, (char)v15);
      LODWORD(v12) = *(_DWORD *)(a1 + 48);
    }
    size_t v14 = v13;
    size_t v9 = v13;
  }
  memcpy(__dst, (const void *)(*(void *)(a1 + 72) + v12), v14);
  *(void *)(a1 + 48) += v14;
  return v9;
}

void DgnSharedMemStream::writeBytes(DgnSharedMemStream *this, const char *__src, size_t __n, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = __n;
  if (!*((void *)this + 9)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dsmstream.cpp", 239, (uint64_t)"dfutil/dsmstream", 1, (uint64_t)"%s", a7, a8, (char)&unk_2140A664D);
  }
  if (*((_DWORD *)this + 2))
  {
    if (!v8) {
      return;
    }
  }
  else
  {
    if (*((_DWORD *)this + 6)) {
      uint64_t v11 = (void *)*((void *)this + 2);
    }
    else {
      uint64_t v11 = &unk_2140A664D;
    }
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dsmstream.cpp", 241, (uint64_t)"dfutil/dsmstream", 4, (uint64_t)"%.500s", a7, a8, (char)v11);
    if (!v8) {
      return;
    }
  }
  uint64_t v12 = *((void *)this + 9);
  if (v12 == -1)
  {
    unint64_t v17 = *((void *)this + 5);
    unint64_t v18 = *((void *)this + 6) + v8;
    *((void *)this + 6) = v18;
    if (v17 < v18) {
      *((void *)this + 5) = v18;
    }
  }
  else
  {
    size_t v13 = v8;
    uint64_t v14 = *((void *)this + 6);
    unint64_t v15 = v14 + v8;
    if (v15 > *((void *)this + 5))
    {
      if (*((_DWORD *)this + 6)) {
        int v16 = (void *)*((void *)this + 2);
      }
      else {
        int v16 = &unk_2140A664D;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dsmstream.cpp", 260, (uint64_t)"dfutil/dsmstream", 3, (uint64_t)"%.500s %llu %llu", a7, a8, (char)v16);
      uint64_t v12 = *((void *)this + 9);
      LODWORD(v14) = *((_DWORD *)this + 12);
    }
    memcpy((void *)(v12 + v14), __src, v13);
    *((void *)this + 6) = v15;
  }
}

uint64_t DgnSharedMemStream::writeSharedBytes(DgnSharedMemStream *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*((void *)this + 9)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dsmstream.cpp", 272, (uint64_t)"dfutil/dsmstream", 1, (uint64_t)"%s", a7, a8, (char)&unk_2140A664D);
  }
  if (*((_DWORD *)this + 2))
  {
    if (!a3) {
      return 0;
    }
  }
  else
  {
    if (*((_DWORD *)this + 6)) {
      uint64_t v11 = (void *)*((void *)this + 2);
    }
    else {
      uint64_t v11 = &unk_2140A664D;
    }
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dsmstream.cpp", 274, (uint64_t)"dfutil/dsmstream", 4, (uint64_t)"%.500s", a7, a8, (char)v11);
    if (!a3) {
      return 0;
    }
  }
  uint64_t v12 = *((void *)this + 6) + 15;
  unint64_t v13 = v12 & 0xFFFFFFFFFFFFFFF0;
  uint64_t v14 = (a3 + 3) & 0xFFFFFFFC;
  uint64_t v15 = *((void *)this + 9);
  unint64_t v16 = (v12 & 0xFFFFFFFFFFFFFFF0) + v14;
  if (v15 == -1)
  {
    *((void *)this + 6) = v16;
    if (*((void *)this + 5) >= v16) {
      return 0;
    }
    uint64_t v18 = 0;
    *((void *)this + 5) = v16;
  }
  else
  {
    if (v16 > *((void *)this + 5))
    {
      if (*((_DWORD *)this + 6)) {
        unint64_t v17 = (void *)*((void *)this + 2);
      }
      else {
        unint64_t v17 = &unk_2140A664D;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dsmstream.cpp", 305, (uint64_t)"dfutil/dsmstream", 3, (uint64_t)"%.500s %llu %llu", a7, a8, (char)v17);
      uint64_t v15 = *((void *)this + 9);
    }
    uint64_t v18 = v15 + (v12 & 0xFFFFFFF0);
    *((void *)this + 6) = v13;
    (*(void (**)(DgnSharedMemStream *, const char *, uint64_t))(*(void *)this + 80))(this, a2, a3);
    if (v14 != a3)
    {
      int v19 = a3 - v14;
      do
      {
        uint64_t v20 = *((void *)this + 9);
        uint64_t v21 = *((void *)this + 6);
        *((void *)this + 6) = v21 + 1;
        *(unsigned char *)(v20 + v21) = 0;
      }
      while (!__CFADD__(v19++, 1));
    }
  }
  return v18;
}

uint64_t DgnSharedMemStream::readSharedBytes(DgnSharedMemStream *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*((void *)this + 9))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dsmstream.cpp", 328, (uint64_t)"dfutil/dsmstream", 1, (uint64_t)"%s", a7, a8, (char)&unk_2140A664D);
    if (a2) {
      goto LABEL_3;
    }
    return 0;
  }
  if (!a2) {
    return 0;
  }
LABEL_3:
  uint64_t v10 = *((void *)this + 6) + 15;
  uint64_t v11 = *((void *)this + 9) + (v10 & 0xFFFFFFF0);
  unint64_t v12 = (v10 & 0xFFFFFFFFFFFFFFF0) + ((a2 + 3) & 0xFFFFFFFC);
  if (v12 > *((void *)this + 5))
  {
    if (*((_DWORD *)this + 6)) {
      unint64_t v13 = (void *)*((void *)this + 2);
    }
    else {
      unint64_t v13 = &unk_2140A664D;
    }
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dsmstream.cpp", 343, (uint64_t)"dfutil/dsmstream", 3, (uint64_t)"%.500s %llu %llu", a7, a8, (char)v13);
  }
  *((void *)this + 6) = v12;
  return v11;
}

void VocCompatData::loadVocCompatDataText(VocCompatData *this, DFile *a2)
{
  DgnTextFileParser::DgnTextFileParser((DgnTextFileParser *)v37);
  DgnTextFileParser::openDgnTextFileParser((uint64_t)v37, (uint64_t)a2, 0x68u, 1);
  DgnTextFileParser::verifyMatchingFileType((DgnTextFileParser *)v37, "VocCompatibility");
  v36[0] = 0;
  v36[1] = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v37, sVCC_Versions, (uint64_t)v36, v4, v5, v6, v7, v8);
  DgnTextFileParser::verifyFileVersionInRange((uint64_t)v37, (unsigned int *)v36, v9, v10, v11, v12, v13, v14);
  unint64_t FileVersion = DgnTextFile::getFileVersion((DgnTextFile *)v37);
  int v16 = FileVersion;
  unint64_t v17 = HIDWORD(FileVersion);
  if (HIDWORD(FileVersion) == 7 && FileVersion == 19) {
    int v19 = "TreeLMPerWordPenalty";
  }
  else {
    int v19 = "PrefiltererPerWordPenalty";
  }
  DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v37, v19, (unsigned int *)this, 1, 0, 0x3E8u);
  DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v37, "LMScale", (unsigned int *)this + 1, 1, 1u, 0x100u);
  if (v16 == 19)
  {
    if (v17 != 7) {
      goto LABEL_16;
    }
  }
  else if (v16 != 22 || v17 != 8)
  {
    goto LABEL_16;
  }
  DgnString::DgnString((DgnString *)&v34);
  DgnTextFile::getHeaderField((DgnTextFile *)v37, "VocName", (DgnString *)&v34, 1);
  if (v35) {
    uint64_t v20 = v34;
  }
  else {
    uint64_t v20 = (const char *)&unk_2140A6670;
  }
  VerifyVocName(v20, ".vcc");
  DgnString::~DgnString((DgnString *)&v34);
LABEL_16:
  DgnTextFile::getHeaderFieldUnsigned64((DgnTextFile *)v37, "LMStaticizationNoGroupingSize", (unint64_t *)this + 1, 1, 0, 0xFFFFFFFFuLL);
  DgnTextFileParser::verifyNoUnknownHeaderFields((DgnTextFileParser *)v37, v21, v22, v23, v24, v25, v26, v27);
  DgnTextFileParser::verifyMatchingNumFieldSpecs((DgnTextFileParser *)v37, 0, v28, v29, v30, v31, v32, v33);
  DgnTextFileParser::verifyNoBodyLines((DgnTextFileParser *)v37);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v36);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)v37);
}

void sub_213F78310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)va1);
  _Unwind_Resume(a1);
}

void VocCompatData::saveVocCompatDataText(VocCompatData *this, DFile *a2, int a3)
{
  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v15);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v15, (uint64_t)a2, 0x68u, a3);
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v15, sVCC_Versions, (uint64_t)&v13, v6, v7, v8, v9, v10);
  DgnTextFileWriter::setFileType((uint64_t)v15, "VocCompatibility", (void *)(v13 + 8 * (v14 - 1)));
  v12[0] = 0;
  v12[1] = 0;
  v11[0] = 0;
  v11[1] = 0;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v15, (uint64_t)v12, (uint64_t)v11);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v15, "PrefiltererPerWordPenalty", *(unsigned int *)this);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v15, "LMScale", *((unsigned int *)this + 1));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v15, "LMStaticizationNoGroupingSize", *((void *)this + 1));
  DgnArray<DgnString>::releaseAll((uint64_t)v11);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v12);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v13);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v15);
}

void sub_213F78450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)va);
  _Unwind_Resume(a1);
}

void VocCompatData::loadVocCompatData(VocCompatData *this, char **a2, DFileChecksums *a3, int a4)
{
  if (DFile::subFileExists((uint64_t)a2, 0x68u))
  {
    VocCompatData::loadVocCompatDataText(this, (DFile *)a2);
  }
  else
  {
    if (a4) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/vcc.cpp", 209, (uint64_t)"voc/vcc", 3, (uint64_t)"%s", v8, v9, (char)&unk_2140A6670);
    }
    uint64_t v21 = 0;
    int v10 = 1;
    uint64_t v11 = (DgnStream *)OpenAndReadMrecHeader((uint64_t)a2, 0x67u, 1, "MRVCCD!?", (_DWORD *)&v21 + 1, &v21);
    unsigned int v20 = 0;
    DgnString::DgnString((DgnString *)v19);
    BOOL v14 = HIDWORD(v21) == 18 && v21 == 1;
    int v15 = v14;
    if (v14)
    {
      int v16 = 18;
    }
    else
    {
      if (*((_DWORD *)a2 + 6)) {
        unint64_t v17 = a2[2];
      }
      else {
        unint64_t v17 = (char *)&unk_2140A6670;
      }
      MrecHeaderCheckVersions(v17, "MRVCCD!?", HIDWORD(v21), v21, 0x18u, 2u);
      int v10 = v21;
      int v16 = HIDWORD(v21);
    }
    MrecHeaderCheckLatestVersionIfShared((DFile *)a2, "MRVCCD!?", v16, v10, 24, 2, v12, v13);
    readObject((uint64_t)v11, this, &v20);
    readObject((uint64_t)v11, (_DWORD *)this + 1, &v20);
    if (v15) {
      readObject(v11, (DgnString *)v19, &v20);
    }
    readObject((uint64_t)v11, (void *)this + 1, &v20);
    readObjectChecksumAndVerify(v11, v20);
    uint64_t CurrentSubDirComponents = DFile::getCurrentSubDirComponents((DFile *)a2);
    DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x67u, v20);
    DgnDelete<DgnStream>((void (***)(void))v11);
    DgnString::~DgnString((DgnString *)v19);
  }
}

void sub_213F78668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void VocCompatData::saveVocCompatData(VocCompatData *this, DFile *a2, DFileChecksums *a3, int a4, int a5)
{
  if (a4)
  {
    VocCompatData::saveVocCompatDataText(this, a2, a5);
  }
  else
  {
    uint64_t v8 = OpenAndWriteMrecHeader((uint64_t)a2, 0x67u, a5, "MRVCCD!?", 24, 2);
    int v10 = 0;
    writeObject((uint64_t)v8, (int *)this, &v10);
    writeObject((uint64_t)v8, (int *)this + 1, &v10);
    writeObject((uint64_t)v8, (uint64_t *)this + 1, &v10);
    writeObjectChecksum((uint64_t)v8, &v10);
    uint64_t CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
    DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x67u, v10);
    DgnDelete<DgnStream>((void (***)(void))v8);
  }
}

void VocCompatData::printSize(VocCompatData *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/vcc.cpp", 277, (DgnString *)&v40);
  if (v41) {
    int v15 = v40;
  }
  else {
    int v15 = &unk_2140A6670;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v11, v12, v13, v14, a3, &unk_2140A6670, a3, &unk_2140A6670, v15);
  DgnString::~DgnString((DgnString *)&v40);
  if (a2 != -1) {
    xlprintf("%d ", v16, v17, v18, v19, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v16, v17, v18, v19, a3, &unk_2140A6670);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/vcc.cpp", 279, (DgnString *)&v40);
  if (v41) {
    uint64_t v24 = v40;
  }
  else {
    uint64_t v24 = &unk_2140A6670;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v20, v21, v22, v23, (a3 + 1), &unk_2140A6670, (34 - a3), (34 - a3), v24, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v40);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/vcc.cpp", 279, (DgnString *)&v40);
  if (v41) {
    uint64_t v29 = v40;
  }
  else {
    uint64_t v29 = &unk_2140A6670;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v25, v26, v27, v28, (a3 + 1), &unk_2140A6670, (34 - a3), (34 - a3), v29, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v40);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/vcc.cpp", 279, (DgnString *)&v40);
  if (v41) {
    uint64_t v34 = v40;
  }
  else {
    uint64_t v34 = &unk_2140A6670;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v30, v31, v32, v33, (a3 + 1), &unk_2140A6670, (34 - a3), (34 - a3), v34, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v40);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/vcc.cpp", 281, (DgnString *)&v40);
  if (v41) {
    uint64_t v39 = v40;
  }
  else {
    uint64_t v39 = &unk_2140A6670;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v35, v36, v37, v38, a3, &unk_2140A6670, (35 - a3), (35 - a3), v39, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v40);
}

void sub_213F789D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void SvcCompatData::SvcCompatData(SvcCompatData *this)
{
  *(void *)this = 0;
}

void SvcCompatData::SvcCompatData(SvcCompatData *this, const SvcCompatData *a2)
{
  *(void *)this = *(void *)a2;
}

_DWORD *SvcCompatData::SvcCompatData(_DWORD *result, int a2, int a3)
{
  char *result = a2;
  result[1] = a3;
  return result;
}

void (***SvcCompatData::loadSvcCompatData(SvcCompatData *this, DFile *a2, DFileChecksums *a3))(void)
{
  unsigned int v13 = 0;
  unsigned int v14 = 0;
  uint64_t v6 = (void (***)(void))OpenAndReadMrecHeader((uint64_t)a2, 0x51u, 0, "SCCBIN", &v14, &v13);
  if (*((_DWORD *)a2 + 6)) {
    uint64_t v7 = (char *)*((void *)a2 + 2);
  }
  else {
    uint64_t v7 = (char *)&unk_2140A6670;
  }
  MrecHeaderCheckVersions(v7, "SCCBIN", v14, v13, 0x11u, 2u);
  MrecHeaderCheckLatestVersionIfShared(a2, "SCCBIN", v14, v13, 17, 2, v8, v9);
  int v12 = 0;
  int v15 = 0;
  readObject((uint64_t)v6, &v15, &v12);
  *(_DWORD *)this = v15;
  readObject((uint64_t)v6, (_DWORD *)this + 1, &v12);
  if (a3)
  {
    uint64_t CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
    DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x51u, v12);
  }
  return DgnDelete<DgnStream>(v6);
}

void (***SvcCompatData::saveSvcCompatData(SvcCompatData *this, DFile *a2, DFileChecksums *a3))(void)
{
  uint64_t v6 = OpenAndWriteMrecHeader((uint64_t)a2, 0x51u, 0, "SCCBIN", 17, 2);
  int v7 = *(_DWORD *)this;
  int v10 = 0;
  int v11 = v7;
  writeObject((uint64_t)v6, &v11, &v10);
  writeObject((uint64_t)v6, (int *)this + 1, &v10);
  if (a3)
  {
    uint64_t CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
    DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x51u, v10);
  }
  return DgnDelete<DgnStream>((void (***)(void))v6);
}

void PrefiltererThreadWorker::printSize(PrefiltererThreadWorker *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 263, (DgnString *)&v102);
  if (v103) {
    uint64_t v16 = v102;
  }
  else {
    uint64_t v16 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_2140B33BB, a3, &byte_2140B33BB, v16);
  DgnString::~DgnString((DgnString *)&v102);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  uint64_t v97 = a2;
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_2140B33BB);
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v21 = 4;
  }
  else {
    uint64_t v21 = 8;
  }
  uint64_t v22 = (a3 + 1);
  uint64_t v98 = a3;
  uint64_t v23 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 265, (DgnString *)&v102);
  if (v103) {
    uint64_t v28 = v102;
  }
  else {
    uint64_t v28 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v24, v25, v26, v27, v22, &byte_2140B33BB, v23, v23, v28, v21, v21, 0);
  DgnString::~DgnString((DgnString *)&v102);
  *a4 += v21;
  *a5 += v21;
  uint64_t v29 = sizeObject((char *)this + 264, 0);
  uint64_t v30 = sizeObject((char *)this + 264, 1);
  uint64_t v31 = sizeObject((char *)this + 264, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 266, (DgnString *)&v102);
  if (v103) {
    uint64_t v36 = v102;
  }
  else {
    uint64_t v36 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v32, v33, v34, v35, v22, &byte_2140B33BB, v23, v23, v36, v29, v30, v31);
  DgnString::~DgnString((DgnString *)&v102);
  *a4 += v29;
  *a5 += v30;
  *a6 += v31;
  uint64_t v37 = sizeObject<DgnPrimArray<unsigned char>>((uint64_t)this + 360, 0) + 5;
  uint64_t v38 = sizeObject<DgnPrimArray<unsigned char>>((uint64_t)this + 360, 1) + 5;
  int v102 = 0;
  uint64_t v103 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v102);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 267, (DgnString *)&v102);
  if (v103) {
    uint64_t v43 = v102;
  }
  else {
    uint64_t v43 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v39, v40, v41, v42, v22, &byte_2140B33BB, v23, v23, v43, v37, v38, 0);
  DgnString::~DgnString((DgnString *)&v102);
  *a4 += v37;
  *a5 += v38;
  uint64_t v44 = sizeObject<ScoreFixArray>((uint64_t)this + 384, 0) + 5;
  uint64_t v45 = sizeObject<ScoreFixArray>((uint64_t)this + 384, 1) + 5;
  int v102 = 0;
  LODWORD(v103) = 0;
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v102);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 269, (DgnString *)&v102);
  if (v103) {
    uint64_t v50 = v102;
  }
  else {
    uint64_t v50 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v46, v47, v48, v49, v22, &byte_2140B33BB, v23, v23, v50, v44, v45, 0);
  DgnString::~DgnString((DgnString *)&v102);
  *a4 += v44;
  *a5 += v45;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v51 = 12;
  }
  else {
    uint64_t v51 = 16;
  }
  int v52 = *((_DWORD *)this + 102);
  unsigned int v53 = *((_DWORD *)this + 103);
  BOOL v54 = v53 >= v52;
  uint64_t v55 = v53 - v52;
  if (v54)
  {
    uint64_t v57 = v52 & ~(v52 >> 31);
    int v52 = 0;
    uint64_t v56 = v51 + v57;
    v51 += v57 + v55;
  }
  else
  {
    uint64_t v56 = v51;
  }
  uint64_t v58 = v52;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 270, (DgnString *)&v102);
  if (v103) {
    uint64_t v63 = v102;
  }
  else {
    uint64_t v63 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v59, v60, v61, v62, v22, &byte_2140B33BB, v23, v23, v63, v51, v56, v58);
  DgnString::~DgnString((DgnString *)&v102);
  *a4 += v51;
  *a5 += v56;
  *a6 += v58;
  uint64_t v64 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v64 = 12;
  }
  uint64_t v65 = *((unsigned int *)this + 106);
  if ((int)v65 <= 0) {
    uint64_t v66 = 0;
  }
  else {
    uint64_t v66 = 2 * v65;
  }
  uint64_t v67 = v66 + v64;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 272, (DgnString *)&v102);
  if (v103) {
    uint64_t v72 = v102;
  }
  else {
    uint64_t v72 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, v22, &byte_2140B33BB, v23, v23, v72, v67, v67, 0);
  DgnString::~DgnString((DgnString *)&v102);
  *a4 += v67;
  *a5 += v67;
  uint64_t v73 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v73 = 12;
  }
  uint64_t v74 = *((unsigned int *)this + 110);
  if ((int)v74 <= 0) {
    uint64_t v75 = 0;
  }
  else {
    uint64_t v75 = 2 * v74;
  }
  uint64_t v76 = v75 + v73;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 274, (DgnString *)&v102);
  if (v103) {
    uint64_t v81 = v102;
  }
  else {
    uint64_t v81 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v77, v78, v79, v80, v22, &byte_2140B33BB, v23, v23, v81, v76, v76, 0);
  DgnString::~DgnString((DgnString *)&v102);
  *a4 += v76;
  *a5 += v76;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 275, (DgnString *)&v102);
  if (v103) {
    uint64_t v86 = v102;
  }
  else {
    uint64_t v86 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v82, v83, v84, v85, v22, &byte_2140B33BB, v23, v23, v86, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v102);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 276, (DgnString *)&v102);
  if (v103) {
    uint64_t v91 = v102;
  }
  else {
    uint64_t v91 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v87, v88, v89, v90, v22, &byte_2140B33BB, v23, v23, v91, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v102);
  *a4 += 8;
  *a5 += 8;
  unint64_t v100 = 0;
  unint64_t v101 = 0;
  unint64_t v99 = 0;
  DgnThreadWorker::printSize(this, v97, v22, &v101, &v99, &v100);
  *a4 += v101;
  *a5 += v99;
  *a6 += v100;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 284, (DgnString *)&v102);
  if (v103) {
    uint64_t v96 = v102;
  }
  else {
    uint64_t v96 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v92, v93, v94, v95, v98, &byte_2140B33BB, (35 - v98), (35 - v98), v96, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v102);
}

void sub_213F79248(_Unwind_Exception *a1)
{
  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t PrefiltererThreadWorker::PrefiltererThreadWorker(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  DgnThreadWorker::DgnThreadWorker(a1, a2, a3, a4, a5);
  *uint64_t v6 = &unk_26C4E34B0;
  ReturnListQueue::ReturnListQueue((ReturnListQueue *)(v6 + 33), 0, 127);
  SynchronizedArray<DgnPrimArray<unsigned char>>::SynchronizedArray(a1 + 352);
  SynchronizedArray<ScoreFixArray>::SynchronizedArray(a1 + 376);
  *(void *)(a1 + 432) = 0;
  *(_DWORD *)(a1 + 440) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 400) = 0;
  *(_DWORD *)(a1 + 424) = 0;
  *(void *)(a1 + 448) = 4294967280;
  *(_DWORD *)(a1 + 4DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)this + 56) = 0;
  return a1;
}

void sub_213F79318(_Unwind_Exception *a1)
{
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v1 + 360);
  ReturnListQueue::~ReturnListQueue(v2);
  DgnThreadWorker::~DgnThreadWorker(v1);
  _Unwind_Resume(a1);
}

void PrefiltererThreadWorker::~PrefiltererThreadWorker(PrefiltererThreadWorker *this)
{
  *(void *)this = &unk_26C4E34B0;
  PrefiltererThreadWorker::reset(this);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 432);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 416);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 400);
  DgnArray<DgnVector>::releaseAll((uint64_t)this + 384);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 360);
  ReturnListQueue::~ReturnListQueue((PrefiltererThreadWorker *)((char *)this + 264));

  DgnThreadWorker::~DgnThreadWorker(this);
}

{
  uint64_t vars8;

  PrefiltererThreadWorker::~PrefiltererThreadWorker(this);

  JUMPOUT(0x216698730);
}

void PrefiltererThreadWorker::reset(PrefiltererThreadWorker *this)
{
  *((void *)this + DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)this + 56) = 4294967280;
  *((_DWORD *)this + 114) = 0;
  SynchronizedArray<DgnPrimArray<unsigned char>>::reset((uint64_t)this + 352);
  SynchronizedArray<ScoreFixArray>::reset((uint64_t)this + 376);
  ReturnListQueue::reset((PrefiltererThreadWorker *)((char *)this + 264));
  *((_DWORD *)this + 102) = 0;
}

uint64_t SynchronizedArray<ScoreFixArray>::reset(uint64_t result)
{
  uint64_t v1 = result;
  *(unsigned char *)uint64_t result = 0;
  *(_DWORD *)(result + 4) = -16;
  uint64_t v2 = *(unsigned int *)(result + 16);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 16 * v2 - 16;
    do
    {
      uint64_t result = DgnPrimFixArray<double>::~DgnPrimFixArray(*(void *)(v1 + 8) + v3);
      v3 -= 16;
    }
    while (v3 != -16);
  }
  *(_DWORD *)(v1 + 16) = 0;
  return result;
}

TreePrefilterer *PrefiltererThreadWorker::onStartup(PrefiltererThreadWorker *this)
{
  uint64_t v2 = MemChunkAlloc(0x25308uLL, 0);
  uint64_t result = TreePrefilterer::TreePrefilterer((TreePrefilterer *)v2);
  *((void *)this + 32) = result;
  return result;
}

void (***PrefiltererThreadWorker::onShutdown(PrefiltererThreadWorker *this))(void)
{
  PrefiltererThreadWorker::reset(this);
  uint64_t v2 = (void (***)(void))*((void *)this + 32);

  return DgnDelete<TreePrefilterer>(v2);
}

void (***DgnDelete<TreePrefilterer>(void (***result)(void)))(void)
{
  if (result)
  {
    uint64_t v1 = result;
    (**result)(result);
    return (void (***)(void))MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t PrefiltererThreadWorker::onPlay(PrefiltererThreadWorker *this)
{
  uint64_t v2 = *((void *)this + 6);
  *((_DWORD *)this + 112) = *(_DWORD *)(v2 + 1592);
  if (!*((unsigned char *)this + 352)) {
    SynchronizedArray<DgnPrimArray<unsigned char>>::update((unint64_t)this + 352, *(void *)(v2 + 1576));
  }
  uint64_t v3 = *(void *)(v2 + 1584);
  if (v3 && !*((unsigned char *)this + 376)) {
    SynchronizedArray<ScoreFixArray>::update((unint64_t)this + 376, v3);
  }
  ReturnListQueue::clear((PrefiltererThreadWorker *)((char *)this + 264));
  *(void *)((char *)this + 452) = 0;
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 32) + 96))(*((void *)this + 32));
  *((_DWORD *)this + 113) = result;
  return result;
}

unint64_t SynchronizedArray<ScoreFixArray>::update(unint64_t result, uint64_t a2)
{
  unint64_t v3 = result;
  int v4 = *(_DWORD *)(a2 + 16);
  uint64_t v5 = (void *)(result + 8);
  unsigned int v7 = *(_DWORD *)(result + 16);
  unsigned int v6 = *(_DWORD *)(result + 20);
  if (v6 > 0x1F3)
  {
    unsigned int v8 = *(_DWORD *)(a2 + 16);
  }
  else
  {
    uint64_t result = DgnArray<DgnPrimArray<double>>::reallocElts(result + 8, 500 - v6, 0);
    unsigned int v8 = *(_DWORD *)(a2 + 16);
    unsigned int v6 = *(_DWORD *)(v3 + 20);
  }
  if (v8 > v6) {
    uint64_t result = DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v5, v8 - v6, 0);
  }
  uint64_t v9 = *(unsigned int *)(v3 + 16);
  if (v9 <= v8)
  {
    if (v9 < v8)
    {
      uint64_t v12 = v8 - v9;
      uint64_t v13 = (_DWORD *)(*v5 + 16 * v9 + 8);
      do
      {
        *((void *)v13 - 1) = 0;
        *uint64_t v13 = 0;
        v13 += 4;
        --v12;
      }
      while (v12);
    }
  }
  else if ((int)v9 > (int)v8)
  {
    uint64_t v10 = (int)v9;
    uint64_t v11 = 16 * (int)v9 - 16;
    do
    {
      --v10;
      uint64_t result = DgnPrimFixArray<double>::~DgnPrimFixArray(*v5 + v11);
      v11 -= 16;
    }
    while (v10 > (int)v8);
  }
  *(_DWORD *)(v3 + 16) = v8;
  if ((int)v7 < v4)
  {
    do
    {
      uint64_t v14 = *(void *)(a2 + 8) + 16 * v7;
      uint64_t result = (unint64_t)DgnPrimFixArray<short>::copyArraySlice((uint64_t *)(*v5 + 16 * v7++), (uint64_t *)v14, 0, *(_DWORD *)(v14 + 8));
    }
    while (v4 != v7);
  }
  if (*(unsigned char *)a2) {
    *(unsigned char *)unint64_t v3 = 1;
  }
  if (*(_DWORD *)(v3 + 4) == -16) {
    *(_DWORD *)(v3 + 4) = *(_DWORD *)(a2 + 4);
  }
  return result;
}

uint64_t PrefiltererThreadWorker::playOne(PrefiltererThreadWorker *this)
{
  if (*((unsigned char *)this + 264)) {
    return 4;
  }
  unint64_t v3 = (PrefiltererThreadWorker *)((char *)this + 264);
  signed int v4 = *((_DWORD *)this + 113);
  if (*((_DWORD *)this + 92) <= v4)
  {
    if (*((unsigned char *)this + 352))
    {
      if (*((_DWORD *)this + 67) == -16)
      {
        *((_DWORD *)this + 67) = ReturnListQueue::getNextFrameTime((PrefiltererThreadWorker *)((char *)this + 264));
        (*(void (**)(void))(**((void **)this + 32) + 88))(*((void *)this + 32));
        signed int v4 = *((_DWORD *)this + 113);
      }
      TreePrefilterer::completeUtterance(*((TreePrefilterer **)this + 32), v4, v3);
      return 4;
    }
    int v12 = 2;
    goto LABEL_25;
  }
  BOOL v5 = TreePrefilterer::needLookaheadToScoreFrame(*((TreePrefilterer **)this + 32));
  uint64_t v6 = *((unsigned int *)this + 113);
  if (!v5) {
    goto LABEL_11;
  }
  if (*((_DWORD *)this + 98) <= (int)v6)
  {
    int v12 = 3;
LABEL_25:
    *((_DWORD *)this + 114) = v12;
    return 4;
  }
  DgnPrimFixArray<short>::copyArraySlice((uint64_t *)this + 52, (uint64_t *)(*((void *)this + 48) + 16 * v6), 0, *(_DWORD *)(*((void *)this + 48) + 16 * v6 + 8));
  LODWORD(v6) = *((_DWORD *)this + 113);
  if (*((_DWORD *)this + 67) == -16)
  {
    int v7 = *((_DWORD *)this + 95);
    if (v7 != -16 && v7 <= (int)v6)
    {
      *((_DWORD *)this + 67) = ReturnListQueue::getNextFrameTime(v3);
      (*(void (**)(void))(**((void **)this + 32) + 88))(*((void *)this + 32));
      LODWORD(v6) = *((_DWORD *)this + 113);
    }
  }
LABEL_11:
  uint64_t v8 = *((void *)this + 45) + 16 * v6;
  DgnPrimArray<unsigned char>::copyArraySlice((unint64_t)this + 400, (void *)v8, 0, *(_DWORD *)(v8 + 8));
  uint64_t v9 = 432;
  if (v5) {
    uint64_t v9 = 416;
  }
  TreePrefilterer::scoreFrame(*((void *)this + 32), *((unsigned int *)this + 113), (uint64_t)this + 400, (uint64_t *)((char *)this + v9), v3);
  int v10 = *((_DWORD *)this + 113) + 1;
  *((_DWORD *)this + 113) = v10;
  if (*((unsigned char *)this + 352) && *((_DWORD *)this + 92) <= v10) {
    return 0;
  }
  int v11 = *((_DWORD *)this + 112);
  if (v11 == -16) {
    return 1;
  }
  int NextFrameTime = ReturnListQueue::getNextFrameTime(v3);
  uint64_t result = 1;
  if (v11 < NextFrameTime)
  {
    *((_DWORD *)this + 114) = 1;
    return 4;
  }
  return result;
}

void PrefiltererThread::printSize(PrefiltererThread *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 461, (DgnString *)&v52);
  if (v53) {
    uint64_t v16 = v52;
  }
  else {
    uint64_t v16 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_2140B33BB, a3, &byte_2140B33BB, v16);
  uint64_t v48 = this;
  DgnString::~DgnString((DgnString *)&v52);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_2140B33BB);
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v21 = 4;
  }
  else {
    uint64_t v21 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 463, (DgnString *)&v52);
  if (v53) {
    uint64_t v26 = v52;
  }
  else {
    uint64_t v26 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v22, v23, v24, v25, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v26, v21, v21, 0);
  DgnString::~DgnString((DgnString *)&v52);
  *a4 += v21;
  *a5 += v21;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v27 = 4;
  }
  else {
    uint64_t v27 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 464, (DgnString *)&v52);
  if (v53) {
    uint64_t v32 = v52;
  }
  else {
    uint64_t v32 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v32, v27, v27, 0);
  DgnString::~DgnString((DgnString *)&v52);
  *a4 += v27;
  *a5 += v27;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 465, (DgnString *)&v52);
  if (v53) {
    uint64_t v37 = v52;
  }
  else {
    uint64_t v37 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v37, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v52);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 466, (DgnString *)&v52);
  if (v53) {
    uint64_t v42 = v52;
  }
  else {
    uint64_t v42 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v42, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v52);
  *a4 += 8;
  *a5 += 8;
  unint64_t v50 = 0;
  unint64_t v51 = 0;
  unint64_t v49 = 0;
  DgnThreadClient::printSize(v48, a2, (a3 + 1), &v51, &v49, &v50);
  *a4 += v51;
  *a5 += v49;
  *a6 += v50;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 474, (DgnString *)&v52);
  if (v53) {
    uint64_t v47 = v52;
  }
  else {
    uint64_t v47 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v43, v44, v45, v46, a3, &byte_2140B33BB, (35 - a3), (35 - a3), v47, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v52);
}

void sub_213F79CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t PrefiltererThread::reset(PrefiltererThread *this)
{
  *((void *)this + 199) = 4294967280;
  *((_DWORD *)this + 400) = 0;
  Latch<MemChunkRegion,LatchAdapter>::Latch(&v3, *((void *)this + 2));
  PrefiltererThreadWorker::reset(*((PrefiltererThreadWorker **)this + 7));
  return Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)&v3);
}

void sub_213F79D48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)va);
  _Unwind_Resume(a1);
}

void PrefiltererThread::scoreUntil(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ReturnListQueue *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_DWORD *)(a1 + 1592) = a2;
  int v10 = (_OWORD *)(a1 + 1576);
  *(void *)(a1 + 1576) = a3;
  *(void *)(a1 + 1584) = a4;
  DgnThreadClient::playAllUntilWorkerPauses((DgnThreadClient *)a1, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
  *int v10 = 0u;
  DgnThreadClient::pause((DgnThreadClient *)a1, v11, v12, v13, v14, v15, v16, v17);
  uint64_t v18 = *(_DWORD **)(a1 + 56);
  int v19 = v18[114];
  *(_DWORD *)(a1 + 1596) = v18[113];
  *(_DWORD *)(a1 + 1600) = v19;

  ReturnListQueue::copyIntoQueue((ReturnListQueue *)(v18 + 66), a5);
}

uint64_t ThreadedTreePrefilterer::ThreadedTreePrefilterer(uint64_t a1, int a2)
{
  Prefilterer::Prefilterer((Prefilterer *)a1);
  *signed int v4 = &unk_26C4E36F0;
  BOOL v5 = MemChunkAlloc(0x648uLL, 0);
  uint64_t v6 = DgnThread<PrefiltererThreadWorker>::DgnThread((uint64_t)v5, a2, 0, "Prefilterer");
  *(void *)uint64_t v6 = &unk_26C4E1800;
  *(void *)(v6 + 1592) = 4294967280;
  *(_DWORD *)(v6 + 1600) = 0;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 40) = *(void *)(v6 + 16);
  *(_WORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 48) = 0;
  *(void *)(a1 + DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)this + 56) = 0;
  DgnThreadClient::startup((DgnThreadClient *)v6);
  *(void *)(a1 + 32) = *(void *)(*(void *)(*(void *)(a1 + 24) + 56) + 256);
  return a1;
}

void sub_213F79E9C(_Unwind_Exception *a1)
{
}

void ThreadedTreePrefilterer::~ThreadedTreePrefilterer(DgnThreadClient **this)
{
  *this = (DgnThreadClient *)&unk_26C4E36F0;
  if (DgnThreadClient::isLive(this[3]) && !DgnThreadClient::hasErrored(this[3])) {
    DgnThreadClient::shutdown(this[3], v2, v3, v4, v5, v6, v7, v8);
  }
  this[4] = 0;
  this[5] = 0;
  DgnDelete<FrameTransformerThread>((void (***)(void))this[3]);
  this[3] = 0;

  MrecInitModule_sdpres_sdapi();
}

{
  uint64_t vars8;

  ThreadedTreePrefilterer::~ThreadedTreePrefilterer(this);

  JUMPOUT(0x216698730);
}

void ThreadedTreePrefilterer::printSize(ThreadedTreePrefilterer *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 567, (DgnString *)&v72);
  if (v73) {
    uint64_t v16 = (char *)v72;
  }
  else {
    uint64_t v16 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_2140B33BB, a3, &byte_2140B33BB, v16);
  DgnString::~DgnString((DgnString *)&v72);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_2140B33BB);
  unint64_t v71 = 0;
  unint64_t v72 = 0;
  unint64_t v70 = 0;
  Prefilterer::printSize(this, 0xFFFFFFFFLL, (a3 + 1), &v72, &v71, &v70);
  *a4 += v72;
  *a5 += v71;
  *a6 += v70;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 570, (DgnString *)&v72);
  if (v73) {
    uint64_t v25 = (char *)v72;
  }
  else {
    uint64_t v25 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v21, v22, v23, v24, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v25, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v72);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 571, (DgnString *)&v72);
  if (v73) {
    uint64_t v30 = (char *)v72;
  }
  else {
    uint64_t v30 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v26, v27, v28, v29, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v30, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v72);
  ++*a4;
  ++*a5;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v31 = 4;
  }
  else {
    uint64_t v31 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 572, (DgnString *)&v72);
  if (v73) {
    uint64_t v36 = (char *)v72;
  }
  else {
    uint64_t v36 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v32, v33, v34, v35, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v36, v31, v31, 0);
  DgnString::~DgnString((DgnString *)&v72);
  *a4 += v31;
  *a5 += v31;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v37 = 4;
  }
  else {
    uint64_t v37 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 573, (DgnString *)&v72);
  if (v73) {
    uint64_t v42 = (char *)v72;
  }
  else {
    uint64_t v42 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v42, v37, v37, 0);
  DgnString::~DgnString((DgnString *)&v72);
  *a4 += v37;
  *a5 += v37;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v43 = 4;
  }
  else {
    uint64_t v43 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 574, (DgnString *)&v72);
  if (v73) {
    uint64_t v48 = (char *)v72;
  }
  else {
    uint64_t v48 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v44, v45, v46, v47, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v48, v43, v43, 0);
  DgnString::~DgnString((DgnString *)&v72);
  *a4 += v43;
  *a5 += v43;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 576, (DgnString *)&v72);
  if (v73) {
    int v53 = (char *)v72;
  }
  else {
    int v53 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v49, v50, v51, v52, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v53, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v72);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 578, (DgnString *)&v72);
  if (v73) {
    uint64_t v58 = (char *)v72;
  }
  else {
    uint64_t v58 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v54, v55, v56, v57, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v58, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v72);
  ++*a4;
  ++*a5;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v59 = 4;
  }
  else {
    uint64_t v59 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 579, (DgnString *)&v72);
  if (v73) {
    uint64_t v64 = (char *)v72;
  }
  else {
    uint64_t v64 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v60, v61, v62, v63, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v64, v59, v59, 0);
  DgnString::~DgnString((DgnString *)&v72);
  *a4 += v59;
  *a5 += v59;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/thrdpref.cpp", 581, (DgnString *)&v72);
  if (v73) {
    uint64_t v69 = (char *)v72;
  }
  else {
    uint64_t v69 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v65, v66, v67, v68, a3, &byte_2140B33BB, (35 - a3), (35 - a3), v69, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v72);
}

void sub_213F7A478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t ThreadedTreePrefilterer::scoreFramesUntil(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ReturnListQueue *this)
{
  if (*(unsigned char *)(a1 + 17) || (int)ReturnListQueue::getNextFrameTime(this) > (int)a2) {
    return 0;
  }
  *(unsigned char *)(a1 + 16) = 1;
  PrefiltererThread::scoreUntil(*(void *)(a1 + 24), a2, a3, a4, this, v10, v11, v12);
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 17) = *(unsigned char *)this;
  return *(unsigned int *)(*(void *)(a1 + 24) + 1600);
}

uint64_t ThreadedTreePrefilterer::maybeStartScoring(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(unsigned char *)(a1 + 16)) {
    return 1;
  }
  if (*(unsigned char *)(a1 + 17)) {
    return 0;
  }
  uint64_t v10 = *(void *)(a1 + 24);
  *(_DWORD *)(v10 + 1592) = -16;
  uint64_t v11 = (_OWORD *)(v10 + 1576);
  *(void *)(v10 + 1576) = a2;
  *(void *)(v10 + 1584) = a3;
  DgnThreadClient::play((DgnThreadClient *)v10, a2, a3, a4, a5, a6, a7, a8);
  *uint64_t v11 = 0u;
  uint64_t result = 1;
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

uint64_t ThreadedTreePrefilterer::maybeStopScoring(ThreadedTreePrefilterer *this, uint64_t a2, ReturnListQueue *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*((unsigned char *)this + 16)
    || a2 && DgnThreadClient::getThreadState(*((DgnThreadClient **)this + 3)) != 4)
  {
    return 0;
  }
  uint64_t v10 = *((void *)this + 3);
  DgnThreadClient::pause((DgnThreadClient *)v10, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  uint64_t v11 = *(_DWORD **)(v10 + 56);
  int v12 = v11[114];
  *(_DWORD *)(v10 + 1596) = v11[113];
  *(_DWORD *)(v10 + 1600) = v12;
  ReturnListQueue::copyIntoQueue((ReturnListQueue *)(v11 + 66), a3);
  *((unsigned char *)this + 17) = *(unsigned char *)a3;
  *((unsigned char *)this + 16) = 0;
  return *(unsigned int *)(*((void *)this + 3) + 1600);
}

uint64_t ThreadedTreePrefilterer::setInjectCwids(uint64_t a1, uint64_t a2)
{
  Latch<MemChunkRegion,LatchAdapter>::Latch(&v5, *(void *)(a1 + 40));
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 32) + 40))(*(void *)(a1 + 32), a2);
  return Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)&v5);
}

void sub_213F7A6B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ThreadedTreePrefilterer::beginPrefSyncRecog(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  Latch<MemChunkRegion,LatchAdapter>::Latch(&v13, *(void *)(a1 + 40));
  (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 32) + 48))(*(void *)(a1 + 32), a2, a3, a4, a5, a6);
  *(unsigned char *)(a1 + 49) = 1;
  return Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)&v13);
}

void sub_213F7A770(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ThreadedTreePrefilterer::endPrefSyncRecog(ThreadedTreePrefilterer *this)
{
  Latch<MemChunkRegion,LatchAdapter>::Latch(&v3, *((void *)this + 5));
  (*(void (**)(void))(**((void **)this + 4) + 56))(*((void *)this + 4));
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)&v3);
  uint64_t result = PrefiltererThread::reset(*((PrefiltererThread **)this + 3));
  *((unsigned char *)this + 17) = 0;
  *((unsigned char *)this + 49) = 0;
  return result;
}

void sub_213F7A800(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ThreadedTreePrefilterer::makePelScoreCacheData(ThreadedTreePrefilterer *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 4) + 64))();
}

uint64_t ThreadedTreePrefilterer::setPelScoreCacheData(uint64_t a1, uint64_t a2)
{
  Latch<MemChunkRegion,LatchAdapter>::Latch(&v5, *(void *)(a1 + 40));
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 32) + 72))(*(void *)(a1 + 32), a2);
  return Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)&v5);
}

void sub_213F7A8B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ThreadedTreePrefilterer::initPrefilterer(ThreadedTreePrefilterer *this, int ***a2, unsigned int a3, int a4, char a5)
{
  *((void *)this + 7) = a2;
  *((_WORD *)this + 4) = a3;
  *((_DWORD *)this + 3) = a4;
  Latch<MemChunkRegion,LatchAdapter>::Latch(&v11, *((void *)this + 5));
  TreePrefilterer::initPrefilterer(*((TreePrefilterer **)this + 4), a2, a3, a4, a5, 1);
  *((unsigned char *)this + 48) = 1;
  return Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)&v11);
}

void sub_213F7A958(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ThreadedTreePrefilterer::getUserId(ThreadedTreePrefilterer *this)
{
  uint64_t v1 = *((void *)this + 7);
  if (v1) {
    return *(unsigned __int16 *)(v1 + 184);
  }
  else {
    return 0xFFFFLL;
  }
}

uint64_t ThreadedTreePrefilterer::getPrefiltererStats(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 80))();
}

uint64_t ThreadedTreePrefilterer::setSynchronousPrefiltererStats(ThreadedTreePrefilterer *this)
{
  Latch<MemChunkRegion,LatchAdapter>::Latch(&v3, *((void *)this + 5));
  (*(void (**)(void))(**((void **)this + 4) + 88))(*((void *)this + 4));
  return Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)&v3);
}

void sub_213F7AA18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ThreadedTreePrefilterer::getCurFrame(ThreadedTreePrefilterer *this)
{
  return *(unsigned int *)(*((void *)this + 3) + 1596);
}

uint64_t ThreadedTreePrefilterer::getPelScorer(ThreadedTreePrefilterer *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 4) + 160))();
}

uint64_t ThreadedTreePrefilterer::getThreadId(ThreadedTreePrefilterer *this)
{
  return *(unsigned int *)(*((void *)this + 3) + 28);
}

void PrefiltererThread::~PrefiltererThread(PrefiltererThread *this)
{
  DgnThreadClient::~DgnThreadClient(this);

  JUMPOUT(0x216698730);
}

uint64_t *DgnThread<PrefiltererThreadWorker>::newWorker(uint64_t a1)
{
  Latch<MemChunkRegion,LatchAdapter>::Latch(&v4, *(void *)(a1 + 16));
  uint64_t v2 = MemChunkAlloc(0x1D0uLL, *(MemChunkRegion **)(a1 + 16));
  PrefiltererThreadWorker::PrefiltererThreadWorker((uint64_t)v2, *(_DWORD *)(a1 + 12), a1, *(void *)(a1 + 16), *(_DWORD *)(a1 + 28));
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)&v4);
  return v2;
}

void sub_213F7AB14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ThreadedTreePrefilterer::setPrefiltererBuildParamSet(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 24))();
}

uint64_t ThreadedTreePrefilterer::getPrefiltererBuildParamSet(ThreadedTreePrefilterer *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 4) + 32))();
}

uint64_t ThreadedTreePrefilterer::isScoring(ThreadedTreePrefilterer *this)
{
  return *((unsigned __int8 *)this + 16);
}

uint64_t ThreadedTreePrefilterer::isInUseByRecog(ThreadedTreePrefilterer *this)
{
  return *((unsigned __int8 *)this + 49);
}

uint64_t Prefilterer::getWordToScoreAndDurationHash(Prefilterer *this)
{
  return 0;
}

uint64_t Prefilterer::getEffectiveLms(Prefilterer *this)
{
  return 0;
}

uint64_t DgnThread<PrefiltererThreadWorker>::DgnThread(uint64_t a1, int a2, uint64_t a3, char *a4)
{
  uint64_t v5 = (void *)DgnThreadClient::DgnThreadClient(a1, a2, a3, a4);
  *uint64_t v5 = &unk_26C4E5460;
  *(void *)(a1 + DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)this + 56) = DgnThread<PrefiltererThreadWorker>::newWorker((uint64_t)v5);
  return a1;
}

void sub_213F7ABE8(_Unwind_Exception *a1)
{
  DgnThreadClient::~DgnThreadClient(v1);
  _Unwind_Resume(a1);
}

void DgnThread<PrefiltererThreadWorker>::~DgnThread(DgnThreadClient *a1)
{
  DgnThreadClient::~DgnThreadClient(a1);

  JUMPOUT(0x216698730);
}

uint64_t sizeObject<ScoreFixArray>(uint64_t a1, int a2)
{
  uint64_t v2 = 0;
  uint64_t v9 = 0;
  int v10 = 0;
  uint64_t v3 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v3 = 12;
  }
  if (a2 != 3)
  {
    uint64_t v2 = gShadowDiagnosticShowIdealizedObjectSizes ? 12 : 16;
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      uint64_t v4 = *(unsigned int *)(a1 + 8);
      if ((int)v4 >= 1)
      {
        unint64_t v5 = v4 + 1;
        do
        {
          uint64_t v6 = *(unsigned int *)(*(void *)a1 + 16 * (v5 - 2) + 8);
          if ((int)v6 <= 0) {
            uint64_t v7 = 0;
          }
          else {
            uint64_t v7 = 2 * v6;
          }
          v2 += v3 + v7;
          --v5;
        }
        while (v5 > 1);
      }
      if (!a2) {
        v2 += v3 * (unint64_t)(*(_DWORD *)(a1 + 12) - v4);
      }
    }
  }
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v9);
  return v2;
}

uint64_t SynchronizedArray<ScoreFixArray>::SynchronizedArray(uint64_t a1)
{
  *(_DWORD *)(a1 + 4) = -16;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  SynchronizedArray<ScoreFixArray>::reset(a1);
  return a1;
}

void sub_213F7AD40(_Unwind_Exception *a1)
{
  DgnArray<DgnVector>::releaseAll(v1);
  _Unwind_Resume(a1);
}

void ParamValue::~ParamValue(ParamValue *this)
{
  if (*((unsigned char *)this + 32))
  {
    uint64_t v1 = (void *)*((void *)this + 3);
    if (v1) {
      MemChunkFree(v1, 0);
    }
  }
}

void ParamValue::ParamValue(ParamValue *this, const ParamValue *a2)
{
  *(_DWORD *)this = *(_DWORD *)a2;
  *((unsigned char *)this + 4) = *((unsigned char *)a2 + 4);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  int v3 = *((unsigned __int8 *)a2 + 32);
  uint64_t v4 = (const char *)*((void *)a2 + 3);
  if ((*(_DWORD *)a2 & 0xFFFFFFFE) == 4 && v3 != 0)
  {
    if (v4)
    {
      int v7 = strlen(*((const char **)a2 + 3));
      uint64_t v8 = MemChunkAlloc((v7 + 1), 0);
      uint64_t v9 = strcpy((char *)v8, v4);
      LOBYTE(v3) = *((unsigned char *)a2 + 32);
      uint64_t v4 = v9;
    }
    else
    {
      LOBYTE(v3) = 1;
    }
  }
  *((void *)this + 3) = v4;
  *((unsigned char *)this + 32) = v3;
}

uint64_t DynamicParamSet::DynamicParamSet(uint64_t a1, char *a2, int a3, unint64_t a4, uint64_t a5)
{
  DgnString::DgnString((DgnString *)a1);
  *(void *)(v10 + 32) = 0;
  uint64_t v11 = (void *)(v10 + 32);
  *(void *)(v10 + 40) = 0;
  *(_DWORD *)(v10 + 24) = a3;
  DgnString::operator=((DgnString *)v10, a2);
  *(void *)(a1 + 16) = a4;
  int v12 = (ParamSpecMgr *)ParamSpecMgr::smpParamSpecMgrArray[a3];
  unsigned int NumParamIds = ParamSpecMgr::getNumParamIds(v12);
  unsigned int v20 = NumParamIds;
  unsigned int v21 = *(_DWORD *)(a1 + 44);
  if (NumParamIds > v21) {
    DgnArray<FstSearchLeafLatticeDurationBackoffActiveToken>::reallocElts((uint64_t)v11, NumParamIds - v21, 0);
  }
  uint64_t v22 = *(unsigned int *)(a1 + 40);
  if (v22 <= v20)
  {
    if (v22 < v20)
    {
      uint64_t v25 = v20 - v22;
      uint64_t v26 = 40 * v22;
      do
      {
        uint64_t v27 = *v11 + v26;
        *(_DWORD *)uint64_t v27 = 0;
        *(unsigned char *)(v27 + 4) = 0;
        *(_DWORD *)(v27 + 8) = 0;
        *(void *)(v27 + 16) = 0;
        *(void *)(v27 + 24) = 0;
        *(unsigned char *)(v27 + 32) = 0;
        v26 += 40;
        --v25;
      }
      while (v25);
    }
  }
  else if ((int)v22 > (int)v20)
  {
    uint64_t v23 = (int)v22;
    uint64_t v24 = 40 * (int)v22 - 40;
    do
    {
      --v23;
      ParamValue::~ParamValue((ParamValue *)(*v11 + v24));
      v24 -= 40;
    }
    while (v23 > v20);
  }
  *(_DWORD *)(a1 + 40) = v20;
  if (*(_DWORD *)(a5 + 8))
  {
    unint64_t v28 = 0;
    do
    {
      unsigned int v29 = *(unsigned __int16 *)(*(void *)a5 + 2 * v28);
      uint64_t ParamByParamId = ParamSpecMgr::getParamByParamId(v12, v29, v14, v15, v16, v17, v18, v19);
      switch((*(unsigned int (**)(uint64_t))(*(void *)ParamByParamId + 24))(ParamByParamId))
      {
        case 1u:
          char Default_BOOL = ParamSpecMgr::ParamGetDefault_BOOL(v12, v29, a4, HIDWORD(a4), v16, v17, v18, v19);
          uint64_t v32 = *v11 + 40 * v29;
          *(_DWORD *)uint64_t v32 = 1;
          *(unsigned char *)(v32 + 4) = Default_BOOL;
          break;
        case 2u:
          int Default_int = ParamSpecMgr::ParamGetDefault_int(v12, v29, a4, HIDWORD(a4), v16, v17, v18, v19);
          uint64_t v34 = (_DWORD *)(*v11 + 40 * v29);
          *uint64_t v34 = 2;
          v34[2] = Default_int;
          break;
        case 3u:
          double Default_double = ParamSpecMgr::ParamGetDefault_double(v12, v29, a4, HIDWORD(a4), v16, v17, v18, v19);
          uint64_t v36 = *v11 + 40 * v29;
          *(_DWORD *)uint64_t v36 = 3;
          *(double *)(v36 + 16) = Default_double;
          break;
        case 4u:
          Default_string = (const char *)ParamSpecMgr::ParamGetDefault_string(v12, v29, a4, HIDWORD(a4), v16, v17, v18, v19);
          DynamicParamSet::setStringParameter(a1, v29, Default_string, 0);
          break;
        case 5u:
          Default_enumAsString = ParamSpecMgr::ParamGetDefault_enumAsString(v12, v29, a4, HIDWORD(a4), v16, v17, v18, v19);
          DynamicParamSet::setEnumParameter(a1, v29, Default_enumAsString, 0);
          break;
        default:
          break;
      }
      ++v28;
    }
    while (v28 < *(unsigned int *)(a5 + 8));
  }
  return a1;
}

void sub_213F7B0D4(_Unwind_Exception *a1)
{
  DgnArray<ParamValue>::releaseAll(v2);
  DgnString::~DgnString(v1);
  _Unwind_Resume(a1);
}

uint64_t DynamicParamSet::setBoolParameter(uint64_t this, unsigned int a2, char a3)
{
  uint64_t v3 = *(void *)(this + 32) + 40 * a2;
  *(_DWORD *)uint64_t v3 = 1;
  *(unsigned char *)(v3 + 4) = a3;
  return this;
}

uint64_t DynamicParamSet::setIntParameter(uint64_t this, unsigned int a2, int a3)
{
  uint64_t v3 = (_DWORD *)(*(void *)(this + 32) + 40 * a2);
  _DWORD *v3 = 2;
  v3[2] = a3;
  return this;
}

uint64_t DynamicParamSet::setDoubleParameter(uint64_t this, unsigned int a2, double a3)
{
  uint64_t v3 = *(void *)(this + 32) + 40 * a2;
  *(_DWORD *)uint64_t v3 = 3;
  *(double *)(v3 + 16) = a3;
  return this;
}

uint64_t DynamicParamSet::setStringParameter(uint64_t this, unsigned int a2, const char *__s, int a4)
{
  unint64_t v5 = __s;
  uint64_t v6 = this;
  uint64_t v7 = *(void *)(this + 32);
  uint64_t v9 = (_DWORD *)(v7 + 40 * a2);
  if (*v9 != 4 || (this = strcmp(*(const char **)(v7 + 40 * a2 + 24), __s), this))
  {
    *uint64_t v9 = 4;
    if (*(unsigned char *)(v7 + 40 * a2 + 32))
    {
      this = *(void *)(v7 + 40 * a2 + 24);
      if (this) {
        this = MemChunkFree((void *)this, 0);
      }
    }
    if (a4)
    {
      if (v5)
      {
        int v10 = strlen(v5);
        uint64_t v11 = MemChunkAlloc((v10 + 1), 0);
        this = (uint64_t)strcpy((char *)v11, v5);
        unint64_t v5 = (const char *)this;
      }
    }
    uint64_t v12 = *(void *)(v6 + 32) + 40 * a2;
    *(void *)(v12 + 24) = v5;
    *(unsigned char *)(v12 + 32) = a4;
  }
  return this;
}

uint64_t DynamicParamSet::setEnumParameter(uint64_t this, unsigned int a2, const char *__s, int a4)
{
  unint64_t v5 = __s;
  uint64_t v6 = this;
  uint64_t v7 = *(void *)(this + 32);
  uint64_t v9 = (_DWORD *)(v7 + 40 * a2);
  if (*v9 != 5 || (this = strcmp(*(const char **)(v7 + 40 * a2 + 24), __s), this))
  {
    *uint64_t v9 = 5;
    if (*(unsigned char *)(v7 + 40 * a2 + 32))
    {
      this = *(void *)(v7 + 40 * a2 + 24);
      if (this) {
        this = MemChunkFree((void *)this, 0);
      }
    }
    if (a4)
    {
      if (v5)
      {
        int v10 = strlen(v5);
        uint64_t v11 = MemChunkAlloc((v10 + 1), 0);
        this = (uint64_t)strcpy((char *)v11, v5);
        unint64_t v5 = (const char *)this;
      }
    }
    uint64_t v12 = *(void *)(v6 + 32) + 40 * a2;
    *(void *)(v12 + 24) = v5;
    *(unsigned char *)(v12 + 32) = a4;
  }
  return this;
}

void DynamicParamSet::DynamicParamSet(DynamicParamSet *this, const DynamicParamSet *a2)
{
  DgnString::DgnString(this);
  *(void *)(v4 + 32) = 0;
  uint64_t v5 = v4 + 32;
  *(void *)(v4 + 40) = 0;
  *(_DWORD *)(v4 + 24) = *((_DWORD *)a2 + 6);
  DgnString::operator=((DgnString *)v4, a2);
  *((void *)this + 2) = *((void *)a2 + 2);
  DgnArray<ParamValue>::copyArraySlice(v5, (void *)a2 + 4, 0, *((_DWORD *)a2 + 10));
}

void sub_213F7B39C(_Unwind_Exception *a1)
{
  DgnArray<ParamValue>::releaseAll(v2);
  DgnString::~DgnString(v1);
  _Unwind_Resume(a1);
}

uint64_t DynamicParamSet::setBoolParameter(DynamicParamSet *this, const char *a2, char a3)
{
  uint64_t result = ParamSpecMgr::getParamId(*((_DWORD *)this + 6), a2);
  uint64_t v6 = *((void *)this + 4) + 40 * result;
  *(_DWORD *)uint64_t v6 = 1;
  *(unsigned char *)(v6 + 4) = a3;
  return result;
}

uint64_t DynamicParamSet::setIntParameter(DynamicParamSet *this, const char *a2, int a3)
{
  uint64_t result = ParamSpecMgr::getParamId(*((_DWORD *)this + 6), a2);
  uint64_t v6 = (_DWORD *)(*((void *)this + 4) + 40 * result);
  *uint64_t v6 = 2;
  v6[2] = a3;
  return result;
}

uint64_t DynamicParamSet::setDoubleParameter(DynamicParamSet *this, const char *a2, double a3)
{
  uint64_t result = ParamSpecMgr::getParamId(*((_DWORD *)this + 6), a2);
  uint64_t v6 = *((void *)this + 4) + 40 * result;
  *(_DWORD *)uint64_t v6 = 3;
  *(double *)(v6 + 16) = a3;
  return result;
}

uint64_t DynamicParamSet::setStringParameter(DynamicParamSet *this, const char *a2, const char *a3, int a4)
{
  unsigned int ParamId = ParamSpecMgr::getParamId(*((_DWORD *)this + 6), a2);

  return DynamicParamSet::setStringParameter((uint64_t)this, ParamId, a3, a4);
}

uint64_t DynamicParamSet::setEnumParameter(DynamicParamSet *this, const char *a2, const char *a3, int a4)
{
  unsigned int ParamId = ParamSpecMgr::getParamId(*((_DWORD *)this + 6), a2);

  return DynamicParamSet::setEnumParameter((uint64_t)this, ParamId, a3, a4);
}

uint64_t DynamicParamSet::getBoolParameter(DynamicParamSet *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *((void *)this + 4);
  int v10 = *(_DWORD *)(v8 + 40 * a2);
  if (v10 != 1)
  {
    if (!v10)
    {
      uint64_t ParamByParamId = ParamSpecMgr::getParamByParamId(*((ParamSpecMgr **)&ParamSpecMgr::smpParamSpecMgrArray + *((unsigned int *)this + 6)), a2, a3, a4, a5, a6, a7, a8);
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dynparset.cpp", 341, (uint64_t)"dfutil/dynparset", 2, (uint64_t)"%.500s %.500s", v14, v15, *(void *)(ParamByParamId + 8));
    }
    uint64_t v16 = ParamSpecMgr::getParamByParamId(*((ParamSpecMgr **)&ParamSpecMgr::smpParamSpecMgrArray + *((unsigned int *)this + 6)), a2, a3, a4, a5, a6, a7, a8);
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dynparset.cpp", 347, (uint64_t)"dfutil/dynparset", 1, (uint64_t)"%.500s %.500s %.500s", v17, v18, *(void *)(v16 + 8));
    uint64_t v8 = *((void *)this + 4);
  }
  return *(unsigned __int8 *)(v8 + 40 * a2 + 4);
}

uint64_t DynamicParamSet::getIntParameter(DynamicParamSet *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *((void *)this + 4);
  int v10 = *(_DWORD *)(v8 + 40 * a2);
  if (v10 != 2)
  {
    if (!v10)
    {
      uint64_t ParamByParamId = ParamSpecMgr::getParamByParamId(*((ParamSpecMgr **)&ParamSpecMgr::smpParamSpecMgrArray + *((unsigned int *)this + 6)), a2, a3, a4, a5, a6, a7, a8);
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dynparset.cpp", 358, (uint64_t)"dfutil/dynparset", 2, (uint64_t)"%.500s %.500s", v14, v15, *(void *)(ParamByParamId + 8));
    }
    uint64_t v16 = ParamSpecMgr::getParamByParamId(*((ParamSpecMgr **)&ParamSpecMgr::smpParamSpecMgrArray + *((unsigned int *)this + 6)), a2, a3, a4, a5, a6, a7, a8);
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dynparset.cpp", 364, (uint64_t)"dfutil/dynparset", 1, (uint64_t)"%.500s %.500s %.500s", v17, v18, *(void *)(v16 + 8));
    uint64_t v8 = *((void *)this + 4);
  }
  return *(unsigned int *)(v8 + 40 * a2 + 8);
}

double DynamicParamSet::getDoubleParameter(DynamicParamSet *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *((void *)this + 4);
  int v10 = *(_DWORD *)(v8 + 40 * a2);
  if (v10 != 3)
  {
    if (!v10)
    {
      uint64_t ParamByParamId = ParamSpecMgr::getParamByParamId(*((ParamSpecMgr **)&ParamSpecMgr::smpParamSpecMgrArray + *((unsigned int *)this + 6)), a2, a3, a4, a5, a6, a7, a8);
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dynparset.cpp", 375, (uint64_t)"dfutil/dynparset", 2, (uint64_t)"%.500s %.500s", v14, v15, *(void *)(ParamByParamId + 8));
    }
    uint64_t v16 = ParamSpecMgr::getParamByParamId(*((ParamSpecMgr **)&ParamSpecMgr::smpParamSpecMgrArray + *((unsigned int *)this + 6)), a2, a3, a4, a5, a6, a7, a8);
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dynparset.cpp", 381, (uint64_t)"dfutil/dynparset", 1, (uint64_t)"%.500s %.500s %.500s", v17, v18, *(void *)(v16 + 8));
    uint64_t v8 = *((void *)this + 4);
  }
  return *(double *)(v8 + 40 * a2 + 16);
}

uint64_t DynamicParamSet::getStringParameter(DynamicParamSet *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *((void *)this + 4);
  int v10 = *(_DWORD *)(v8 + 40 * a2);
  if (v10 != 4)
  {
    if (!v10)
    {
      uint64_t ParamByParamId = ParamSpecMgr::getParamByParamId((ParamSpecMgr *)ParamSpecMgr::smpParamSpecMgrArray[*((unsigned int *)this + 6)], a2, a3, a4, a5, a6, a7, a8);
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dynparset.cpp", 392, (uint64_t)"dfutil/dynparset", 2, (uint64_t)"%.500s %.500s", v14, v15, *(void *)(ParamByParamId + 8));
    }
    uint64_t v16 = ParamSpecMgr::getParamByParamId((ParamSpecMgr *)ParamSpecMgr::smpParamSpecMgrArray[*((unsigned int *)this + 6)], a2, a3, a4, a5, a6, a7, a8);
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dynparset.cpp", 398, (uint64_t)"dfutil/dynparset", 1, (uint64_t)"%.500s %.500s %.500s", v17, v18, *(void *)(v16 + 8));
    uint64_t v8 = *((void *)this + 4);
  }
  return *(void *)(v8 + 40 * a2 + 24);
}

uint64_t DynamicParamSet::getEnumParameter(DynamicParamSet *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *((void *)this + 4);
  int v10 = *(_DWORD *)(v8 + 40 * a2);
  if (v10 != 5)
  {
    if (!v10)
    {
      uint64_t ParamByParamId = ParamSpecMgr::getParamByParamId(*((ParamSpecMgr **)&ParamSpecMgr::smpParamSpecMgrArray + *((unsigned int *)this + 6)), a2, a3, a4, a5, a6, a7, a8);
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dynparset.cpp", 409, (uint64_t)"dfutil/dynparset", 2, (uint64_t)"%.500s %.500s", v14, v15, *(void *)(ParamByParamId + 8));
    }
    uint64_t v16 = ParamSpecMgr::getParamByParamId(*((ParamSpecMgr **)&ParamSpecMgr::smpParamSpecMgrArray + *((unsigned int *)this + 6)), a2, a3, a4, a5, a6, a7, a8);
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dynparset.cpp", 415, (uint64_t)"dfutil/dynparset", 1, (uint64_t)"%.500s %.500s %.500s", v17, v18, *(void *)(v16 + 8));
    uint64_t v8 = *((void *)this + 4);
  }
  return *(void *)(v8 + 40 * a2 + 24);
}

uint64_t DynamicParamSet::getBoolParameter(DynamicParamSet *this, const char *a2)
{
  unsigned int ParamId = ParamSpecMgr::getParamId(*((_DWORD *)this + 6), a2);

  return DynamicParamSet::getBoolParameter(this, ParamId, v4, v5, v6, v7, v8, v9);
}

uint64_t DynamicParamSet::getIntParameter(DynamicParamSet *this, const char *a2)
{
  unsigned int ParamId = ParamSpecMgr::getParamId(*((_DWORD *)this + 6), a2);

  return DynamicParamSet::getIntParameter(this, ParamId, v4, v5, v6, v7, v8, v9);
}

double DynamicParamSet::getDoubleParameter(DynamicParamSet *this, const char *a2)
{
  unsigned int ParamId = ParamSpecMgr::getParamId(*((_DWORD *)this + 6), a2);

  return DynamicParamSet::getDoubleParameter(this, ParamId, v4, v5, v6, v7, v8, v9);
}

uint64_t DynamicParamSet::getEnumParameter(DynamicParamSet *this, const char *a2)
{
  unsigned int ParamId = ParamSpecMgr::getParamId(*((_DWORD *)this + 6), a2);

  return DynamicParamSet::getEnumParameter(this, ParamId, v4, v5, v6, v7, v8, v9);
}

void *DynamicParamSet::removeParameter(void *this, unsigned int a2)
{
  uint64_t v2 = this[4];
  if (*(unsigned char *)(v2 + 40 * a2 + 32))
  {
    uint64_t v4 = this;
    this = *(void **)(v2 + 40 * a2 + 24);
    if (this)
    {
      this = (void *)MemChunkFree(this, 0);
      uint64_t v2 = v4[4];
    }
    *(void *)(v2 + 40 * a2 + 24) = 0;
  }
  *(_DWORD *)(v2 + 40 * a2) = 0;
  return this;
}

void *DynamicParamSet::removeParameter(DynamicParamSet *this, const char *a2)
{
  unsigned int ParamId = ParamSpecMgr::getParamId(*((_DWORD *)this + 6), a2);

  return DynamicParamSet::removeParameter(this, ParamId);
}

uint64_t DynamicParamSet::validateSelf(DynamicParamSet *this)
{
  uint64_t v2 = *((unsigned int *)this + 5);
  uint64_t v3 = (ParamSpecMgr *)ParamSpecMgr::smpParamSpecMgrArray[*((unsigned int *)this + 6)];
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  ParamSpecMgr::getAllParamIdsSortedByName((unint64_t)v3, (uint64_t)&v39, *((unsigned int *)this + 4), v2);
  if (v40)
  {
    unint64_t v10 = 0;
    do
    {
      unsigned int v11 = v39[v10];
      uint64_t ParamByParamId = (const void *)ParamSpecMgr::getParamByParamId(v3, v11, v4, v5, v6, v7, v8, v9);
      int v13 = (*(uint64_t (**)(const void *))(*(void *)ParamByParamId + 24))(ParamByParamId);
      switch(v13)
      {
        case 2:
          int IntParameter = DynamicParamSet::getIntParameter(this, v11, v4, v5, v6, v7, v8, v9);
          IntParamSpec::validateValue(v17, IntParameter, *((_DWORD *)this + 4), *((_DWORD *)this + 5), v18, v19, v20, v21);
          break;
        case 3:
          double DoubleParameter = DynamicParamSet::getDoubleParameter(this, v11, v4, v5, v6, v7, v8, v9);
          DoubleParamSpec::validateValue(v23, DoubleParameter, *((_DWORD *)this + 4), *((_DWORD *)this + 5), v24, v25, v26, v27, v28);
          break;
        case 5:
          EnumParameter = (char *)DynamicParamSet::getEnumParameter(this, v11, v4, v5, v6, v7, v8, v9);
          EnumParamSpec::checkStringEnumValue(v15, EnumParameter, *((_DWORD *)this + 4), *((_DWORD *)this + 5));
          break;
      }
      ++v10;
    }
    while (v10 < v40);
  }
  unint64_t v29 = *((unsigned int *)this + 10);
  if (v29)
  {
    for (unint64_t i = 0; i < v29; ++i)
    {
      if (*(_DWORD *)(*((void *)this + 4) + 40 * i))
      {
        uint64_t v31 = v40;
        if (!v40) {
          goto LABEL_19;
        }
        uint64_t v32 = v39;
        uint64_t v33 = 0xFFFFFFFFLL;
        while (1)
        {
          int v34 = *v32++;
          if (v34 == (unsigned __int16)i) {
            break;
          }
          --v33;
          if (!--v31) {
            goto LABEL_19;
          }
        }
        if (!v33)
        {
LABEL_19:
          uint64_t v35 = ParamSpecMgr::getParamByParamId((ParamSpecMgr *)ParamSpecMgr::smpParamSpecMgrArray[*((unsigned int *)this + 6)], (unsigned __int16)i, v4, v5, v6, v7, v8, v9);
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dynparset.cpp", 532, (uint64_t)"dfutil/dynparset", 3, (uint64_t)"%.500s", v36, v37, *(void *)(v35 + 8));
          unint64_t v29 = *((unsigned int *)this + 10);
        }
      }
    }
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v39);
}

void sub_213F7BF6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void DgnArray<ParamValue>::copyArraySlice(uint64_t a1, void *a2, int a3, unsigned int a4)
{
  int v8 = *(_DWORD *)(a1 + 8);
  if (v8 >= 1)
  {
    uint64_t v9 = 40 * v8 - 40;
    do
    {
      ParamValue::~ParamValue((ParamValue *)(*(void *)a1 + v9));
      v9 -= 40;
    }
    while (v9 != -40);
  }
  *(_DWORD *)(a1 + 8) = 0;
  unsigned int v10 = *(_DWORD *)(a1 + 12);
  if (a4 <= v10)
  {
    unsigned int v11 = 0;
    unsigned int v12 = 0;
    if (!a4) {
      goto LABEL_14;
    }
  }
  else
  {
    DgnArray<FstSearchLeafLatticeDurationBackoffActiveToken>::reallocElts(a1, a4 - v10, 0);
    unsigned int v11 = *(_DWORD *)(a1 + 8);
  }
  int v13 = 0;
  unsigned int v12 = v11;
  do
  {
    ParamValue::ParamValue((ParamValue *)(*(void *)a1 + 40 * v12), (const ParamValue *)(*a2 + 40 * (a3 + v13)));
    unsigned int v12 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v12;
    ++v13;
  }
  while (a4 != v13);
  if (v12 > a4)
  {
    if ((int)v12 > (int)a4)
    {
      uint64_t v14 = (int)v12;
      uint64_t v15 = 40 * (int)v12 - 40;
      do
      {
        --v14;
        ParamValue::~ParamValue((ParamValue *)(*(void *)a1 + v15));
        v15 -= 40;
      }
      while (v14 > (int)a4);
    }
    goto LABEL_17;
  }
LABEL_14:
  if (v12 < a4)
  {
    unint64_t v16 = a4 - (unint64_t)v12;
    uint64_t v17 = 40 * v12;
    do
    {
      uint64_t v18 = *(void *)a1 + v17;
      *(_DWORD *)uint64_t v18 = 0;
      *(unsigned char *)(v18 + 4) = 0;
      *(_DWORD *)(v18 + 8) = 0;
      *(void *)(v18 + 16) = 0;
      *(void *)(v18 + 24) = 0;
      *(unsigned char *)(v18 + 32) = 0;
      v17 += 40;
      --v16;
    }
    while (v16);
  }
LABEL_17:
  *(_DWORD *)(a1 + 8) = a4;
}

uint64_t sdGetAndValidateParamSet(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = (ParamSetHolderMgr *)ParamSetHolderMgr::smpParamSetHolderMgr;
  unint64_t v10 = *a1;
  if (HIDWORD(*a1)) {
    throwBadSdapiArgument("SDhParamSetHolder", v10, a3, a4, a5, a6, a7, a8);
  }
  if ((v10 + 1) <= 1) {
    throwBadSdapiArgument("SDhParamSetHolder", v10, a3, a4, a5, a6, a7, a8);
  }
  ParamSetHolder = (ParamSetHolder *)ParamSetHolderMgr::getParamSetHolder(v9, v10, a3, a4, a5, a6, a7, a8);
  unint64_t v18 = a1[1];
  switch(v18)
  {
    case 1uLL:
      unint64_t v19 = a1[2];
      if (HIDWORD(v19)) {
        throwBadSdapiArgument("SDhAdapterParamSet", v19, v11, v12, v13, v14, v15, v16);
      }
      if ((v19 + 1) <= 1) {
        throwBadSdapiArgument("SDhAdapterParamSet", v19, v11, v12, v13, v14, v15, v16);
      }
      uint64_t ParamSet = ParamSetHolder::getParamSet(ParamSetHolder, v19, v11, v12, v13, v14, v15, v16);
      goto LABEL_71;
    case 2uLL:
      unint64_t v23 = a1[3];
      if (HIDWORD(v23)) {
        throwBadSdapiArgument("SDhChannelParamSet", v23, v11, v12, v13, v14, v15, v16);
      }
      if ((v23 + 1) <= 1) {
        throwBadSdapiArgument("SDhChannelParamSet", v23, v11, v12, v13, v14, v15, v16);
      }
      uint64_t ParamSet = ParamSetHolder::getParamSet(ParamSetHolder, v23, v11, v12, v13, v14, v15, v16);
      int v24 = 2;
      break;
    case 3uLL:
      unint64_t v25 = a1[4];
      if (HIDWORD(v25)) {
        throwBadSdapiArgument("SDhConfidenceParamSet", v25, v11, v12, v13, v14, v15, v16);
      }
      if ((v25 + 1) <= 1) {
        throwBadSdapiArgument("SDhConfidenceParamSet", v25, v11, v12, v13, v14, v15, v16);
      }
      uint64_t ParamSet = ParamSetHolder::getParamSet(ParamSetHolder, v25, v11, v12, v13, v14, v15, v16);
      int v24 = 3;
      break;
    case 4uLL:
      unint64_t v26 = a1[5];
      if (HIDWORD(v26)) {
        throwBadSdapiArgument("SDhLatticeNBestParamSet", v26, v11, v12, v13, v14, v15, v16);
      }
      if ((v26 + 1) <= 1) {
        throwBadSdapiArgument("SDhLatticeNBestParamSet", v26, v11, v12, v13, v14, v15, v16);
      }
      uint64_t ParamSet = ParamSetHolder::getParamSet(ParamSetHolder, v26, v11, v12, v13, v14, v15, v16);
      int v24 = 4;
      break;
    case 5uLL:
      unint64_t v27 = a1[6];
      if (HIDWORD(v27)) {
        throwBadSdapiArgument("SDhLatticePostProbParamSet", v27, v11, v12, v13, v14, v15, v16);
      }
      if ((v27 + 1) <= 1) {
        throwBadSdapiArgument("SDhLatticePostProbParamSet", v27, v11, v12, v13, v14, v15, v16);
      }
      uint64_t ParamSet = ParamSetHolder::getParamSet(ParamSetHolder, v27, v11, v12, v13, v14, v15, v16);
      int v24 = 5;
      break;
    case 6uLL:
      unint64_t v28 = a1[7];
      if (HIDWORD(v28)) {
        throwBadSdapiArgument("SDhPrefiltererBuildParamSet", v28, v11, v12, v13, v14, v15, v16);
      }
      if ((v28 + 1) <= 1) {
        throwBadSdapiArgument("SDhPrefiltererBuildParamSet", v28, v11, v12, v13, v14, v15, v16);
      }
      uint64_t ParamSet = ParamSetHolder::getParamSet(ParamSetHolder, v28, v11, v12, v13, v14, v15, v16);
      int v24 = 6;
      break;
    case 7uLL:
      unint64_t v29 = a1[8];
      if (HIDWORD(v29)) {
        throwBadSdapiArgument("SDhPrefiltererSearchParamSet", v29, v11, v12, v13, v14, v15, v16);
      }
      if ((v29 + 1) <= 1) {
        throwBadSdapiArgument("SDhPrefiltererSearchParamSet", v29, v11, v12, v13, v14, v15, v16);
      }
      uint64_t ParamSet = ParamSetHolder::getParamSet(ParamSetHolder, v29, v11, v12, v13, v14, v15, v16);
      int v24 = 7;
      break;
    case 8uLL:
      unint64_t v30 = a1[9];
      if (HIDWORD(v30)) {
        throwBadSdapiArgument("SDhPronGuessParamSet", v30, v11, v12, v13, v14, v15, v16);
      }
      if ((v30 + 1) <= 1) {
        throwBadSdapiArgument("SDhPronGuessParamSet", v30, v11, v12, v13, v14, v15, v16);
      }
      uint64_t ParamSet = ParamSetHolder::getParamSet(ParamSetHolder, v30, v11, v12, v13, v14, v15, v16);
      int v24 = 8;
      break;
    case 9uLL:
      unint64_t v31 = a1[10];
      if (HIDWORD(v31)) {
        throwBadSdapiArgument("SDhSausageParamSet", v31, v11, v12, v13, v14, v15, v16);
      }
      if ((v31 + 1) <= 1) {
        throwBadSdapiArgument("SDhSausageParamSet", v31, v11, v12, v13, v14, v15, v16);
      }
      uint64_t ParamSet = ParamSetHolder::getParamSet(ParamSetHolder, v31, v11, v12, v13, v14, v15, v16);
      int v24 = 9;
      break;
    case 0xAuLL:
      unint64_t v32 = a1[11];
      if (HIDWORD(v32)) {
        throwBadSdapiArgument("SDhSearchParamSet", v32, v11, v12, v13, v14, v15, v16);
      }
      if ((v32 + 1) <= 1) {
        throwBadSdapiArgument("SDhSearchParamSet", v32, v11, v12, v13, v14, v15, v16);
      }
      uint64_t ParamSet = ParamSetHolder::getParamSet(ParamSetHolder, v32, v11, v12, v13, v14, v15, v16);
      int v24 = 10;
      break;
    case 0xBuLL:
      unint64_t v33 = a1[12];
      if (HIDWORD(v33)) {
        throwBadSdapiArgument("SDhSearchCrossLayerParamSet", v33, v11, v12, v13, v14, v15, v16);
      }
      if ((v33 + 1) <= 1) {
        throwBadSdapiArgument("SDhSearchCrossLayerParamSet", v33, v11, v12, v13, v14, v15, v16);
      }
      uint64_t ParamSet = ParamSetHolder::getParamSet(ParamSetHolder, v33, v11, v12, v13, v14, v15, v16);
      int v24 = 11;
      break;
    case 0xCuLL:
      unint64_t v34 = a1[13];
      if (HIDWORD(v34)) {
        throwBadSdapiArgument("SDhUserDeltaParamSet", v34, v11, v12, v13, v14, v15, v16);
      }
      if ((v34 + 1) <= 1) {
        throwBadSdapiArgument("SDhUserDeltaParamSet", v34, v11, v12, v13, v14, v15, v16);
      }
      uint64_t ParamSet = ParamSetHolder::getParamSet(ParamSetHolder, v34, v11, v12, v13, v14, v15, v16);
      int v24 = 12;
      break;
    default:
      throwBadSdapiArgument("SDParamSetContainerType", a1[1], v11, v12, v13, v14, v15, v16);
      unint64_t v41 = a1[11];
      if (HIDWORD(v41)) {
        throwBadSdapiArgument("SDhSearchParamSet", v41, v35, v36, v37, v38, v39, v40);
      }
      if ((v41 + 1) <= 1) {
        throwBadSdapiArgument("SDhSearchParamSet", v41, v35, v36, v37, v38, v39, v40);
      }
      uint64_t ParamSet = ParamSetHolder::getParamSet(ParamSetHolder, v41, v35, v36, v37, v38, v39, v40);
      throwBadSdapiArgument("SDParamSetContainerType", v18, v42, v43, v44, v45, v46, v47);
LABEL_71:
      int v24 = 1;
      break;
  }
  if (v24 != *(_DWORD *)(ParamSet + 24)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdparamsetparam.cpp", 60, (uint64_t)"sdapi/sdparamsetparam", 1, (uint64_t)"%s", v20, v21, (char)&unk_2140A6712);
  }
  return ParamSet;
}

uint64_t SDParamSetParam_GetHandle(uint64_t a1, const char *a2)
{
  uint64_t v4 = SdapiInsurance::SdapiInsurance(v17, "SDParamSetParam_GetHandle", 1, 1, 193);
  if (v17[97])
  {
    if (!a2) {
      throwBadStringPointer(v4, v5, v6, v7, v8, v9, v10, v11);
    }
    v17[151] = 0;
    if (gbShowCalls)
    {
      if (gbShowCallPointerArguments) {
        uint64_t v12 = a1;
      }
      else {
        uint64_t v12 = 0;
      }
      xlprintf("Entering sdapi call %.500s(Masked:0x%016llx, '%.500s')\n", v5, v6, v7, v8, "SDParamSetParam_GetHandle", v12, a2);
    }
    unint64_t v13 = *(void *)(a1 + 8);
    if (v13 - 1 >= 0xC)
    {
      throwBadSdapiArgument("SDParamSetContainerType", v13, v6, v7, v8, v9, v10, v11);
      unint64_t v13 = 1;
    }
    unsigned int ParamIdByParamName = ParamSpecMgr::getParamIdByParamName((ParamSpecMgr *)ParamSpecMgr::smpParamSpecMgrArray[v13], a2);
    if (ParamIdByParamName == 0xFFFF) {
      uint64_t v15 = -1;
    }
    else {
      uint64_t v15 = ParamIdByParamName;
    }
  }
  else
  {
    uint64_t v15 = -1;
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v17);
  return v15;
}

void sub_213F7C784()
{
}

uint64_t SDParamSetParam_GetType(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = 1;
  SdapiInsurance::SdapiInsurance(v17, "SDParamSetParam_GetType", 1, 1, 194);
  if (v17[97])
  {
    if (gbShowCalls)
    {
      if (gbShowCallPointerArguments) {
        uint64_t v12 = a1;
      }
      else {
        uint64_t v12 = 0;
      }
      xlprintf("Entering sdapi call %.500s(Masked:0x%016llx, <Masked:SDh %lld>)\n", v5, v6, v7, v8, "SDParamSetParam_GetType", v12, a2);
    }
    unint64_t v13 = *(void *)(a1 + 8);
    if (v13 - 1 >= 0xC)
    {
      throwBadSdapiArgument("SDParamSetContainerType", v13, v6, v7, v8, v9, v10, v11);
      unint64_t v13 = 1;
    }
    uint64_t v14 = (ParamSpecMgr *)ParamSpecMgr::smpParamSpecMgrArray[v13];
    if (a2 == -1)
    {
      LOWORD(a2) = -1;
    }
    else
    {
      if (HIDWORD(a2) || (a2 & 0xFFFF0000) != 0) {
        throwBadSdapiArgument("SDhParamSetParam", a2, v6, v7, v8, v9, v10, v11);
      }
      if ((unsigned __int16)a2 == 0xFFFF || !(_WORD)a2) {
        throwBadSdapiArgument("SDhParamSetParam", a2, v6, v7, v8, v9, v10, v11);
      }
    }
    uint64_t ParamByParamId = ParamSpecMgr::getParamByParamId(v14, (unsigned __int16)a2, v6, v7, v8, v9, v10, v11);
    switch((*(unsigned int (**)(uint64_t))(*(void *)ParamByParamId + 24))(ParamByParamId))
    {
      case 1u:
        uint64_t v4 = 2;
        break;
      case 2u:
        uint64_t v4 = 3;
        break;
      case 3u:
        uint64_t v4 = 4;
        break;
      case 4u:
        uint64_t v4 = 5;
        break;
      case 5u:
        uint64_t v4 = 6;
        break;
      default:
        uint64_t v4 = 1;
        break;
    }
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v17);
  return v4;
}

void sub_213F7C990()
{
}

void SDParamSetParam_SetBoolValue(unint64_t *a1, unint64_t a2, unsigned int a3)
{
  SdapiInsurance::SdapiInsurance(v22, "SDParamSetParam_SetBoolValue", 1, 1, 202);
  if (v22[97])
  {
    if (gbShowCalls)
    {
      if (gbShowCallPointerArguments) {
        unint64_t v13 = a1;
      }
      else {
        unint64_t v13 = 0;
      }
      uint64_t v14 = "SD_TRUE";
      if (!a3) {
        uint64_t v14 = "SD_FALSE";
      }
      xlprintf("Entering sdapi call %.500s(Masked:0x%016llx, <Masked:SDh %lld>, %.500s)\n", v6, v7, v8, v9, "SDParamSetParam_SetBoolValue", v13, a2, v14);
    }
    uint64_t v21 = sdGetAndValidateParamSet(a1, v6, v7, v8, v9, v10, v11, v12);
    if (a2 == -1)
    {
      LOWORD(a2) = -1;
    }
    else
    {
      if (HIDWORD(a2) || (a2 & 0xFFFF0000) != 0) {
        throwBadSdapiArgument("SDhParamSetParam", a2, v15, v16, v17, v18, v19, v20);
      }
      if ((unsigned __int16)a2 == 0xFFFF || !(_WORD)a2) {
        throwBadSdapiArgument("SDhParamSetParam", a2, v15, v16, v17, v18, v19, v20);
      }
    }
    if (a3 >= 2) {
      throwBadSdapiArgument("SDBool", (int)a3, v15, v16, v17, v18, v19, v20);
    }
    (*(void (**)(uint64_t, void, BOOL))(*(void *)v21 + 64))(v21, (unsigned __int16)a2, a3 == 1);
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v22);
}

void sub_213F7CB24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2 == 2)
  {
    uint64_t v14 = (ApiState *)__cxa_begin_catch(a1);
    ApiState::handleDgnException(v14, v15);
  }
  else
  {
    if (a2 != 1)
    {
      SdapiInsurance::~SdapiInsurance((SdapiInsurance *)&a13);
      _Unwind_Resume(a1);
    }
    uint64_t v16 = __cxa_begin_catch(a1);
    ApiState::handleDgnMemoryException((uint64_t)v16);
  }
  __cxa_end_catch();
  JUMPOUT(0x213F7CB08);
}

void SDParamSetParam_SetIntValue(unint64_t *a1, unint64_t a2, uint64_t a3)
{
  SdapiInsurance::SdapiInsurance(v21, "SDParamSetParam_SetIntValue", 1, 1, 203);
  if (v21[97])
  {
    if (gbShowCalls)
    {
      if (gbShowCallPointerArguments) {
        unint64_t v13 = a1;
      }
      else {
        unint64_t v13 = 0;
      }
      xlprintf("Entering sdapi call %.500s(Masked:0x%016llx, <Masked:SDh %lld>, %lld)\n", v6, v7, v8, v9, "SDParamSetParam_SetIntValue", v13, a2, (int)a3);
    }
    uint64_t v20 = sdGetAndValidateParamSet(a1, v6, v7, v8, v9, v10, v11, v12);
    if (a2 == -1)
    {
      LOWORD(a2) = -1;
    }
    else
    {
      if (HIDWORD(a2) || (a2 & 0xFFFF0000) != 0) {
        throwBadSdapiArgument("SDhParamSetParam", a2, v14, v15, v16, v17, v18, v19);
      }
      if ((unsigned __int16)a2 == 0xFFFF || !(_WORD)a2) {
        throwBadSdapiArgument("SDhParamSetParam", a2, v14, v15, v16, v17, v18, v19);
      }
    }
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)v20 + 72))(v20, (unsigned __int16)a2, a3);
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v21);
}

void sub_213F7CCB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2 == 2)
  {
    uint64_t v14 = (ApiState *)__cxa_begin_catch(a1);
    ApiState::handleDgnException(v14, v15);
  }
  else
  {
    if (a2 != 1)
    {
      SdapiInsurance::~SdapiInsurance((SdapiInsurance *)&a13);
      _Unwind_Resume(a1);
    }
    uint64_t v16 = __cxa_begin_catch(a1);
    ApiState::handleDgnMemoryException((uint64_t)v16);
  }
  __cxa_end_catch();
  JUMPOUT(0x213F7CC94);
}

void SDParamSetParam_SetDoubleValue(unint64_t *a1, unint64_t a2, double a3)
{
  SdapiInsurance::SdapiInsurance(v29, "SDParamSetParam_SetDoubleValue", 1, 1, 204);
  if (v29[97])
  {
    if (gbShowCalls)
    {
      if (gbShowCallPointerArguments) {
        unint64_t v13 = a1;
      }
      else {
        unint64_t v13 = 0;
      }
      double v14 = eround(a3, 14);
      DgnString::formatFloat((DgnString *)0xE, v14, (DgnString *)&v27);
      if (v28) {
        uint64_t v19 = v27;
      }
      else {
        uint64_t v19 = &unk_2140A6712;
      }
      xlprintf("Entering sdapi call %.500s(Masked:0x%016llx, <Masked:SDh %lld>, %.500s)\n", v15, v16, v17, v18, "SDParamSetParam_SetDoubleValue", v13, a2, v19);
      DgnString::~DgnString((DgnString *)&v27);
    }
    uint64_t v26 = sdGetAndValidateParamSet(a1, v6, v7, v8, v9, v10, v11, v12);
    if (a2 == -1)
    {
      LOWORD(a2) = -1;
    }
    else
    {
      if (HIDWORD(a2) || (a2 & 0xFFFF0000) != 0) {
        throwBadSdapiArgument("SDhParamSetParam", a2, v20, v21, v22, v23, v24, v25);
      }
      if ((unsigned __int16)a2 == 0xFFFF || !(_WORD)a2) {
        throwBadSdapiArgument("SDhParamSetParam", a2, v20, v21, v22, v23, v24, v25);
      }
    }
    (*(void (**)(uint64_t, void, double))(*(void *)v26 + 80))(v26, (unsigned __int16)a2, a3);
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v29);
}

void sub_213F7CE80(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  DgnString::~DgnString((DgnString *)va);
  if (a2 == 2)
  {
    uint64_t v8 = (ApiState *)__cxa_begin_catch(a1);
    ApiState::handleDgnException(v8, v9);
  }
  else
  {
    if (a2 != 1)
    {
      SdapiInsurance::~SdapiInsurance((SdapiInsurance *)va1);
      _Unwind_Resume(a1);
    }
    uint64_t v10 = __cxa_begin_catch(a1);
    ApiState::handleDgnMemoryException((uint64_t)v10);
  }
  __cxa_end_catch();
  JUMPOUT(0x213F7CE5CLL);
}

void SDParamSetParam_SetStringValue(unint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = SdapiInsurance::SdapiInsurance(v22, "SDParamSetParam_SetStringValue", 1, 1, 205);
  if (v22[97])
  {
    if (!a3) {
      throwBadStringPointer(v6, v7, v8, v9, v10, v11, v12, v13);
    }
    v22[151] = 0;
    if (gbShowCalls)
    {
      if (gbShowCallPointerArguments) {
        double v14 = a1;
      }
      else {
        double v14 = 0;
      }
      xlprintf("Entering sdapi call %.500s(Masked:0x%016llx, <Masked:SDh %lld>, '%.500s')\n", v7, v8, v9, v10, "SDParamSetParam_SetStringValue", v14, a2, a3);
    }
    uint64_t v21 = sdGetAndValidateParamSet(a1, v7, v8, v9, v10, v11, v12, v13);
    if (a2 == -1)
    {
      LOWORD(a2) = -1;
    }
    else
    {
      if (HIDWORD(a2) || (a2 & 0xFFFF0000) != 0) {
        throwBadSdapiArgument("SDhParamSetParam", a2, v15, v16, v17, v18, v19, v20);
      }
      if ((unsigned __int16)a2 == 0xFFFF || !(_WORD)a2) {
        throwBadSdapiArgument("SDhParamSetParam", a2, v15, v16, v17, v18, v19, v20);
      }
    }
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)v21 + 88))(v21, (unsigned __int16)a2, a3);
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v22);
}

void sub_213F7D034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2 == 2)
  {
    uint64_t v15 = (ApiState *)__cxa_begin_catch(a1);
    ApiState::handleDgnException(v15, v16);
  }
  else
  {
    if (a2 != 1)
    {
      SdapiInsurance::~SdapiInsurance((SdapiInsurance *)&a14);
      _Unwind_Resume(a1);
    }
    uint64_t v17 = __cxa_begin_catch(a1);
    ApiState::handleDgnMemoryException((uint64_t)v17);
  }
  __cxa_end_catch();
  JUMPOUT(0x213F7D018);
}

void SDParamSetParam_SetEnumValue(unint64_t *a1, unint64_t a2, const char *a3)
{
  uint64_t v6 = SdapiInsurance::SdapiInsurance(v40, "SDParamSetParam_SetEnumValue", 1, 1, 206);
  if (v40[97])
  {
    if (!a3) {
      throwBadStringPointer(v6, v7, v8, v9, v10, v11, v12, v13);
    }
    v40[151] = 0;
    if (gbShowCalls)
    {
      if (gbShowCallPointerArguments) {
        double v14 = a1;
      }
      else {
        double v14 = 0;
      }
      xlprintf("Entering sdapi call %.500s(Masked:0x%016llx, <Masked:SDh %lld>, '%.500s')\n", v7, v8, v9, v10, "SDParamSetParam_SetEnumValue", v14, a2, a3);
    }
    uint64_t v21 = sdGetAndValidateParamSet(a1, v7, v8, v9, v10, v11, v12, v13);
    unint64_t v22 = a1[1];
    if (v22 - 1 >= 0xC)
    {
      throwBadSdapiArgument("SDParamSetContainerType", v22, v15, v16, v17, v18, v19, v20);
      unint64_t v22 = 1;
    }
    uint64_t v23 = (ParamSpecMgr *)ParamSpecMgr::smpParamSpecMgrArray[v22];
    unint64_t v24 = HIDWORD(a2);
    if (a2 == -1)
    {
      unsigned __int16 v25 = -1;
    }
    else
    {
      if (v24 || (a2 & 0xFFFF0000) != 0) {
        throwBadSdapiArgument("SDhParamSetParam", a2, v15, v16, v17, v18, v19, v20);
      }
      if ((unsigned __int16)a2 != 0xFFFF && (_WORD)a2)
      {
        unsigned __int16 v25 = a2;
      }
      else
      {
        throwBadSdapiArgument("SDhParamSetParam", a2, v15, v16, v17, v18, v19, v20);
        unsigned __int16 v25 = a2;
      }
    }
    uint64_t ParamByParamId = (void *)ParamSpecMgr::getParamByParamId(v23, v25, v15, v16, v17, v18, v19, v20);
    if (ParamByParamId) {
    uint64_t v39 = EnumParamSpec::convertEnumStringToInt((EnumParamSpec *)ParamByParamId, a3, v27, v28, v29, v30, v31, v32);
    }
    if (a2 == -1)
    {
      LOWORD(a2) = -1;
    }
    else
    {
      if (v24 || (a2 & 0xFFFF0000) != 0) {
        throwBadSdapiArgument("SDhParamSetParam", a2, v33, v34, v35, v36, v37, v38);
      }
      if ((unsigned __int16)a2 == 0xFFFF || !(_WORD)a2) {
        throwBadSdapiArgument("SDhParamSetParam", a2, v33, v34, v35, v36, v37, v38);
      }
    }
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)v21 + 96))(v21, (unsigned __int16)a2, v39);
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v40);
}

void sub_213F7D2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2 == 2)
  {
    uint64_t v15 = (ApiState *)__cxa_begin_catch(a1);
    ApiState::handleDgnException(v15, v16);
  }
  else
  {
    if (a2 != 1)
    {
      SdapiInsurance::~SdapiInsurance((SdapiInsurance *)&a14);
      _Unwind_Resume(a1);
    }
    uint64_t v17 = __cxa_begin_catch(a1);
    ApiState::handleDgnMemoryException((uint64_t)v17);
  }
  __cxa_end_catch();
  JUMPOUT(0x213F7D29CLL);
}

_DWORD *DFileChecksumBucket::DFileChecksumBucket(_DWORD *a1, _DWORD *a2)
{
  DgnString::DgnString((DgnString *)(a1 + 2));
  *a1 = *a2;
  DgnString::operator=(v4, (DgnString *)(a2 + 2));
  return a1;
}

void sub_213F7D36C(_Unwind_Exception *a1)
{
  DgnString::~DgnString(v1);
  _Unwind_Resume(a1);
}

BOOL DFileChecksumBucket::operator==(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 16)) {
    uint64_t v2 = *(const char **)(a1 + 8);
  }
  else {
    uint64_t v2 = &byte_2140B33BB;
  }
  if (*(_DWORD *)(a2 + 16)) {
    uint64_t v3 = *(const char **)(a2 + 8);
  }
  else {
    uint64_t v3 = &byte_2140B33BB;
  }
  return strcmp(v2, v3) == 0;
}

void DFileChecksums::DFileChecksums(DFileChecksums *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
}

void DFileChecksums::~DFileChecksums(DFileChecksums *this)
{
}

uint64_t DFileChecksums::operator=(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  DgnArray<DFileChecksumBucket>::copyArraySlice(a1, (void *)a2, 0, *(_DWORD *)(a2 + 8));
  return a1;
}

uint64_t DFileChecksums::operator==(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)) {
    return DgnArray<DFileChecksumBucket>::operator==(a1, (uint64_t *)a2);
  }
  else {
    return 0;
  }
}

uint64_t DgnArray<DFileChecksumBucket>::operator==(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 == a2) {
    return 1;
  }
  unsigned int v3 = *(_DWORD *)(a1 + 8);
  if (v3 != *((_DWORD *)a2 + 2)) {
    return 0;
  }
  uint64_t v4 = *a2;
  int v5 = v3 + 1;
  uint64_t v6 = 24 * v3 - 24;
  do
  {
    BOOL v7 = --v5 < 1;
    if (v5 < 1) {
      break;
    }
    uint64_t v8 = v6 - 24;
    BOOL v9 = DFileChecksumBucket::operator==(*(void *)a1 + v6, v4 + v6);
    uint64_t v6 = v8;
  }
  while (v9);
  return v7;
}

void DFileChecksums::addChecksum(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  SubFileExtensionString = GetSubFileExtensionString(a3);
  DgnString::DgnString((DgnString *)&v18);
  DFile::makeSubFileName(a2, SubFileExtensionString, (DgnString *)&v18);
  unsigned int v9 = *(_DWORD *)(a1 + 8);
  unsigned int v8 = *(_DWORD *)(a1 + 12);
  unsigned int v10 = v9 + 1;
  unsigned int v11 = v9;
  if (v9 + 1 > v8)
  {
    DgnArray<CWIDAC>::reallocElts(a1, v9 + 1 - v8, 0);
    unsigned int v11 = *(_DWORD *)(a1 + 8);
  }
  if (v11 <= v10)
  {
    if (v11 < v10)
    {
      int v14 = v9 - v11 + 1;
      uint64_t v15 = 24 * v11 + 8;
      do
      {
        DgnString::DgnString((DgnString *)(*(void *)a1 + v15));
        v15 += 24;
        --v14;
      }
      while (v14);
    }
  }
  else if ((int)v11 > (int)v10)
  {
    uint64_t v12 = (int)v11;
    uint64_t v13 = 24 * (int)v11 - 16;
    do
    {
      --v12;
      DgnString::~DgnString((DgnString *)(*(void *)a1 + v13));
      v13 -= 24;
    }
    while (v12 > (int)v10);
  }
  *(_DWORD *)(a1 + 8) = v10;
  uint64_t v16 = (_DWORD *)(*(void *)a1 + 24 * v9);
  if (v19) {
    uint64_t v17 = v18;
  }
  else {
    uint64_t v17 = &byte_2140B33BB;
  }
  *uint64_t v16 = a4;
  DgnString::operator=((DgnString *)(v16 + 2), v17);
  *(_DWORD *)(a1 + 16) ^= a4;
  DgnString::~DgnString((DgnString *)&v18);
}

void sub_213F7D64C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL DFileChecksums::present(DFileChecksums *this, const char *a2)
{
  return DFileChecksums::find(this, a2) != -1;
}

uint64_t DFileChecksums::find(DFileChecksums *this, const char *__s2)
{
  uint64_t v2 = *((unsigned int *)this + 2);
  if (!v2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = 0;
  for (unint64_t i = (_DWORD *)(*(void *)this + 16); ; i += 6)
  {
    uint64_t v6 = *i ? (const char *)*((void *)i - 1) : &byte_2140B33BB;
    if (!strcmp(v6, __s2)) {
      break;
    }
    if (v2 == ++v4) {
      return 0xFFFFFFFFLL;
    }
  }
  return v4;
}

uint64_t DFileChecksums::getChecksum(DFileChecksums *this, const char *a2)
{
  return *(unsigned int *)(*(void *)this + 24 * DFileChecksums::find(this, a2));
}

uint64_t DFileChecksums::getChecksum(DFileChecksums *this, unsigned int a2)
{
  return *(unsigned int *)(*(void *)this + 24 * a2);
}

char *DFileChecksums::getSubFileName(DFileChecksums *this, unsigned int a2)
{
  uint64_t v2 = *(void *)this + 24 * a2;
  if (*(_DWORD *)(v2 + 16)) {
    return *(char **)(v2 + 8);
  }
  else {
    return &byte_2140B33BB;
  }
}

uint64_t writeObject<DFileChecksumBucket>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v10 = *(_DWORD *)(a2 + 8);
  uint64_t result = writeObject(a1, &v10, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      unsigned int v9 = (int *)(*(void *)a2 + v7);
      writeObject(a1, v9, a3);
      uint64_t result = writeObject(a1, (uint64_t)(v9 + 2), a3);
      ++v8;
      v7 += 24;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

void readObject<DFileChecksumBucket>(DgnStream *a1, uint64_t a2, unsigned int *a3)
{
  unsigned int v16 = 0;
  readObject((uint64_t)a1, &v16, a3);
  unsigned int v6 = v16;
  unsigned int v7 = *(_DWORD *)(a2 + 12);
  if (v16 > v7) {
    DgnArray<CWIDAC>::reallocElts(a2, v16 - v7, 0);
  }
  unsigned int v8 = *(_DWORD *)(a2 + 8);
  uint64_t v9 = (int)v8;
  if (v6 >= v8)
  {
    if (v6 > v8)
    {
      unsigned int v11 = v6 - v8;
      uint64_t v12 = 24 * v8 + 8;
      do
      {
        DgnString::DgnString((DgnString *)(*(void *)a2 + v12));
        v12 += 24;
        --v11;
      }
      while (v11);
    }
  }
  else if ((int)v8 > (int)v6)
  {
    uint64_t v10 = 24 * (int)v8 - 16;
    do
    {
      --v9;
      DgnString::~DgnString((DgnString *)(*(void *)a2 + v10));
      v10 -= 24;
    }
    while (v9 > (int)v6);
  }
  *(_DWORD *)(a2 + 8) = v6;
  if (v6)
  {
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    do
    {
      uint64_t v15 = (_DWORD *)(*(void *)a2 + v13);
      readObject((uint64_t)a1, v15, a3);
      readObject(a1, (DgnString *)(v15 + 2), a3);
      ++v14;
      v13 += 24;
    }
    while (v14 < *(unsigned int *)(a2 + 8));
  }
}

uint64_t readObject(DgnStream *a1, DFileChecksums *a2, unsigned int *a3)
{
  readObject<DFileChecksumBucket>(a1, (uint64_t)a2, a3);

  return readObject((uint64_t)a1, (_DWORD *)a2 + 4, a3);
}

void *DgnArray<DFileChecksumBucket>::releaseAll(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 1)
  {
    uint64_t v3 = 24 * v2 - 16;
    do
    {
      DgnString::~DgnString((DgnString *)(*(void *)a1 + v3));
      v3 -= 24;
    }
    while (v3 != -16);
  }
  uint64_t result = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

void DgnArray<DFileChecksumBucket>::copyArraySlice(uint64_t a1, void *a2, int a3, unsigned int a4)
{
  int v8 = *(_DWORD *)(a1 + 8);
  if (v8 >= 1)
  {
    uint64_t v9 = 24 * v8 - 16;
    do
    {
      DgnString::~DgnString((DgnString *)(*(void *)a1 + v9));
      v9 -= 24;
    }
    while (v9 != -16);
  }
  *(_DWORD *)(a1 + 8) = 0;
  unsigned int v10 = *(_DWORD *)(a1 + 12);
  if (a4 <= v10)
  {
    unsigned int v11 = 0;
    unsigned int v12 = 0;
    if (!a4) {
      goto LABEL_14;
    }
  }
  else
  {
    DgnArray<CWIDAC>::reallocElts(a1, a4 - v10, 0);
    unsigned int v11 = *(_DWORD *)(a1 + 8);
  }
  int v13 = 0;
  unsigned int v12 = v11;
  do
  {
    DFileChecksumBucket::DFileChecksumBucket((_DWORD *)(*(void *)a1 + 24 * v12), (_DWORD *)(*a2 + 24 * (a3 + v13)));
    unsigned int v12 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v12;
    ++v13;
  }
  while (a4 != v13);
  if (v12 > a4)
  {
    if ((int)v12 > (int)a4)
    {
      uint64_t v14 = (int)v12;
      uint64_t v15 = 24 * (int)v12 - 16;
      do
      {
        --v14;
        DgnString::~DgnString((DgnString *)(*(void *)a1 + v15));
        v15 -= 24;
      }
      while (v14 > (int)a4);
    }
    goto LABEL_17;
  }
LABEL_14:
  unsigned int v16 = a4 - v12;
  if (a4 > v12)
  {
    uint64_t v17 = 24 * v12 + 8;
    do
    {
      DgnString::DgnString((DgnString *)(*(void *)a1 + v17));
      v17 += 24;
      --v16;
    }
    while (v16);
  }
LABEL_17:
  *(_DWORD *)(a1 + 8) = a4;
}

void throwDecodeSuccessorOverflow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void throwDecodeEndOfData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void throwTableCodeLimitExceeded(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void throwTableGenerationFailed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void throwEncodeUnknownSymbol(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

unint64_t HuffmanEncoder<unsigned short,unsigned int>::sortElements(uint64_t a1)
{
  return mrec_qsort_r<EncodeBuildAlphabetCountsUns16Cmp>(*(void *)(a1 + 120), *(unsigned int *)(a1 + 128), 8);
}

unint64_t mrec_qsort_r<EncodeBuildAlphabetCountsUns16Cmp>(unint64_t result, unint64_t a2, int64_t a3)
{
  int64_t v4 = -a3;
  BOOL v5 = a3 != 8;
  BOOL v6 = ((result | a3) & 7) == 0;
  if (((result | a3) & 7) != 0) {
    int v7 = 2;
  }
  else {
    int v7 = a3 != 8;
  }
  if (a2 < 7)
  {
LABEL_5:
    if ((uint64_t)(a2 * a3) > a3)
    {
      unint64_t v8 = result + a2 * a3;
      unint64_t v9 = result + a3;
      unint64_t v10 = result;
      do
      {
        if (v9 > result)
        {
          unint64_t v11 = v10;
          unint64_t v12 = v9;
          do
          {
            unint64_t v13 = v12;
            v12 += v4;
            uint64_t v14 = *(void *)v12;
            uint64_t v15 = *(void *)v13;
            unsigned int v16 = *(_DWORD *)(*(void *)v12 + 4);
            unsigned int v17 = *(_DWORD *)(*(void *)v13 + 4);
            BOOL v18 = v16 > v17;
            if (v16 == v17) {
              BOOL v18 = *(unsigned __int16 *)(v14 + 8) > *(unsigned __int16 *)(v15 + 8);
            }
            if (!v18) {
              break;
            }
            if (v7)
            {
              uint64_t v19 = 0;
              unint64_t v20 = v11 + a3;
              if (v6)
              {
                do
                {
                  uint64_t v21 = *(void *)(v20 + 8 * v19);
                  *(void *)(v20 + 8 * v19) = *(void *)(v11 + 8 * v19);
                  *(void *)(v11 + 8 * v19++) = v21;
                }
                while ((unint64_t)a3 >> 3 != v19);
              }
              else
              {
                do
                {
                  char v22 = *(unsigned char *)(v20 + v19);
                  *(unsigned char *)(v20 + v19) = *(unsigned char *)(v11 + v19);
                  *(unsigned char *)(v11 + v19++) = v22;
                }
                while (a3 != v19);
              }
            }
            else
            {
              *(void *)unint64_t v13 = v14;
              *(void *)unint64_t v12 = v15;
            }
            v11 += v4;
          }
          while (v12 > result);
        }
        v9 += a3;
        v10 += a3;
      }
      while (v9 < v8);
    }
    return result;
  }
  unint64_t v23 = (unint64_t)a3 >> 3;
  while (2)
  {
    unint64_t v24 = (unsigned char *)(result + (a2 >> 1) * a3);
    if (a2 == 7) {
      goto LABEL_106;
    }
    unint64_t v25 = result + (a2 - 1) * a3;
    if (a2 < 0x29)
    {
      uint64_t v27 = (unsigned char *)result;
      goto LABEL_35;
    }
    unint64_t v26 = (a2 >> 3) * a3;
    uint64_t v27 = (unsigned char *)(result + v26);
    unint64_t v28 = result + 2 * v26;
    uint64_t v29 = *(void *)result;
    uint64_t v30 = *(void *)(result + v26);
    unsigned int v31 = *(_DWORD *)(*(void *)result + 4);
    unsigned int v32 = *(_DWORD *)(v30 + 4);
    if (v31 == v32)
    {
      if (*(unsigned __int16 *)(v29 + 8) >= *(unsigned __int16 *)(v30 + 8)) {
        goto LABEL_28;
      }
LABEL_37:
      uint64_t v37 = *(void *)v28;
      unsigned int v38 = *(_DWORD *)(*(void *)v28 + 4);
      if (v32 == v38)
      {
        if (*(unsigned __int16 *)(v30 + 8) < *(unsigned __int16 *)(v37 + 8)) {
          goto LABEL_48;
        }
      }
      else if (v32 <= v38)
      {
        goto LABEL_48;
      }
      if (v31 == v38)
      {
        uint64_t v27 = (unsigned char *)(result + 2 * v26);
        if (*(unsigned __int16 *)(v29 + 8) < *(unsigned __int16 *)(v37 + 8)) {
          goto LABEL_48;
        }
      }
      else
      {
        uint64_t v27 = (unsigned char *)(result + 2 * v26);
        if (v31 <= v38) {
          goto LABEL_48;
        }
      }
      uint64_t v27 = (unsigned char *)result;
      goto LABEL_48;
    }
    if (v31 <= v32) {
      goto LABEL_37;
    }
LABEL_28:
    uint64_t v33 = *(void *)v28;
    unsigned int v34 = *(_DWORD *)(*(void *)v28 + 4);
    BOOL v35 = v32 > v34;
    if (v32 == v34) {
      BOOL v35 = *(unsigned __int16 *)(v30 + 8) > *(unsigned __int16 *)(v33 + 8);
    }
    if (!v35)
    {
      if (v31 == v34)
      {
        uint64_t v27 = (unsigned char *)result;
        if (*(unsigned __int16 *)(v29 + 8) < *(unsigned __int16 *)(v33 + 8)) {
          goto LABEL_48;
        }
      }
      else
      {
        uint64_t v27 = (unsigned char *)result;
        if (v31 <= v34) {
          goto LABEL_48;
        }
      }
      uint64_t v27 = (unsigned char *)(result + 2 * v26);
    }
LABEL_48:
    uint64_t v39 = &v24[-v26];
    uint64_t v40 = &v24[v26];
    uint64_t v41 = *(void *)&v24[-v26];
    uint64_t v42 = *(void *)v24;
    unsigned int v43 = *(_DWORD *)(v41 + 4);
    unsigned int v44 = *(_DWORD *)(*(void *)v24 + 4);
    if (v43 == v44)
    {
      if (*(unsigned __int16 *)(v41 + 8) >= *(unsigned __int16 *)(v42 + 8)) {
        goto LABEL_50;
      }
LABEL_57:
      uint64_t v48 = *(void *)v40;
      unsigned int v49 = *(_DWORD *)(*(void *)v40 + 4);
      if (v44 == v49)
      {
        if (*(unsigned __int16 *)(v42 + 8) < *(unsigned __int16 *)(v48 + 8)) {
          goto LABEL_68;
        }
      }
      else if (v44 <= v49)
      {
        goto LABEL_68;
      }
      if (v43 == v49)
      {
        v24 += v26;
        if (*(unsigned __int16 *)(v41 + 8) < *(unsigned __int16 *)(v48 + 8)) {
          goto LABEL_68;
        }
      }
      else
      {
        v24 += v26;
        if (v43 <= v49) {
          goto LABEL_68;
        }
      }
      unint64_t v24 = v39;
      goto LABEL_68;
    }
    if (v43 <= v44) {
      goto LABEL_57;
    }
LABEL_50:
    uint64_t v45 = *(void *)v40;
    unsigned int v46 = *(_DWORD *)(*(void *)v40 + 4);
    BOOL v47 = v44 > v46;
    if (v44 == v46) {
      BOOL v47 = *(unsigned __int16 *)(v42 + 8) > *(unsigned __int16 *)(v45 + 8);
    }
    if (!v47)
    {
      if (v43 == v46)
      {
        v24 -= v26;
        if (*(unsigned __int16 *)(v41 + 8) < *(unsigned __int16 *)(v45 + 8)) {
          goto LABEL_68;
        }
      }
      else
      {
        v24 -= v26;
        if (v43 <= v46) {
          goto LABEL_68;
        }
      }
      unint64_t v24 = v40;
    }
LABEL_68:
    uint64_t v50 = -(uint64_t)v26;
    uint64_t v36 = (unsigned char *)(v25 - 2 * v26);
    uint64_t v51 = (unsigned char *)(v25 + v50);
    uint64_t v52 = *(void *)v36;
    uint64_t v53 = *(void *)v51;
    unsigned int v54 = *(_DWORD *)(*(void *)v36 + 4);
    unsigned int v55 = *(_DWORD *)(*(void *)v51 + 4);
    if (v54 == v55)
    {
      if (*(unsigned __int16 *)(v52 + 8) >= *(unsigned __int16 *)(v53 + 8)) {
        goto LABEL_70;
      }
LABEL_74:
      uint64_t v58 = *(void *)v25;
      unsigned int v59 = *(_DWORD *)(*(void *)v25 + 4);
      if (v55 == v59)
      {
        if (*(unsigned __int16 *)(v53 + 8) < *(unsigned __int16 *)(v58 + 8)) {
          goto LABEL_85;
        }
      }
      else if (v55 <= v59)
      {
        goto LABEL_85;
      }
      if (v54 == v59)
      {
        if (*(unsigned __int16 *)(v52 + 8) < *(unsigned __int16 *)(v58 + 8)) {
          goto LABEL_35;
        }
      }
      else if (v54 <= v59)
      {
        goto LABEL_35;
      }
      goto LABEL_86;
    }
    if (v54 <= v55) {
      goto LABEL_74;
    }
LABEL_70:
    uint64_t v56 = *(void *)v25;
    unsigned int v57 = *(_DWORD *)(*(void *)v25 + 4);
    if (v55 == v57)
    {
      if (*(unsigned __int16 *)(v53 + 8) > *(unsigned __int16 *)(v56 + 8)) {
        goto LABEL_85;
      }
      goto LABEL_78;
    }
    if (v55 > v57)
    {
LABEL_85:
      uint64_t v36 = v51;
      goto LABEL_86;
    }
LABEL_78:
    if (v54 == v57)
    {
      if (*(unsigned __int16 *)(v52 + 8) < *(unsigned __int16 *)(v56 + 8)) {
        goto LABEL_86;
      }
LABEL_35:
      uint64_t v36 = (unsigned char *)(result + (a2 - 1) * a3);
      goto LABEL_86;
    }
    if (v54 > v57) {
      goto LABEL_35;
    }
LABEL_86:
    uint64_t v60 = *(void *)v27;
    uint64_t v61 = *(void *)v24;
    unsigned int v62 = *(_DWORD *)(*(void *)v27 + 4);
    unsigned int v63 = *(_DWORD *)(*(void *)v24 + 4);
    if (v62 != v63)
    {
      if (v62 > v63) {
        goto LABEL_88;
      }
LABEL_95:
      uint64_t v67 = *(void *)v36;
      unsigned int v68 = *(_DWORD *)(*(void *)v36 + 4);
      if (v63 == v68)
      {
        if (*(unsigned __int16 *)(v61 + 8) < *(unsigned __int16 *)(v67 + 8)) {
          goto LABEL_106;
        }
      }
      else if (v63 <= v68)
      {
        goto LABEL_106;
      }
      if (v62 == v68)
      {
        unint64_t v24 = v36;
        if (*(unsigned __int16 *)(v60 + 8) < *(unsigned __int16 *)(v67 + 8)) {
          goto LABEL_106;
        }
      }
      else
      {
        unint64_t v24 = v36;
        if (v62 <= v68) {
          goto LABEL_106;
        }
      }
      unint64_t v24 = v27;
      goto LABEL_106;
    }
    if (*(unsigned __int16 *)(v60 + 8) < *(unsigned __int16 *)(v61 + 8)) {
      goto LABEL_95;
    }
LABEL_88:
    uint64_t v64 = *(void *)v36;
    unsigned int v65 = *(_DWORD *)(*(void *)v36 + 4);
    BOOL v66 = v63 > v65;
    if (v63 == v65) {
      BOOL v66 = *(unsigned __int16 *)(v61 + 8) > *(unsigned __int16 *)(v64 + 8);
    }
    if (v66) {
      goto LABEL_106;
    }
    if (v62 == v65)
    {
      unint64_t v24 = v27;
      if (*(unsigned __int16 *)(v60 + 8) < *(unsigned __int16 *)(v64 + 8)) {
        goto LABEL_106;
      }
      goto LABEL_103;
    }
    unint64_t v24 = v27;
    if (v62 > v65) {
LABEL_103:
    }
      unint64_t v24 = v36;
LABEL_106:
    if (v7)
    {
      if (v6)
      {
        uint64_t v69 = (uint64_t *)result;
        unint64_t v70 = (unint64_t)a3 >> 3;
        do
        {
          uint64_t v71 = *v69;
          *v69++ = *(void *)v24;
          *(void *)unint64_t v24 = v71;
          v24 += 8;
          --v70;
        }
        while (v70);
      }
      else
      {
        int64_t v73 = a3;
        uint64_t v74 = (char *)result;
        do
        {
          char v75 = *v74;
          *v74++ = *v24;
          *v24++ = v75;
          --v73;
        }
        while (v73);
      }
    }
    else
    {
      uint64_t v72 = *(void *)result;
      *(void *)uint64_t result = *(void *)v24;
      *(void *)unint64_t v24 = v72;
    }
    int v76 = 0;
    unint64_t v77 = result + a3;
    uint64_t v78 = (void *)(result + (a2 - 1) * a3);
    uint64_t v79 = v78;
    uint64_t v80 = (unsigned char *)(result + a3);
    uint64_t v81 = (void *)(result + a3);
    while (1)
    {
LABEL_115:
      if (v80 > (unsigned char *)v79) {
        goto LABEL_130;
      }
      uint64_t v82 = *(void *)v80;
      unsigned int v83 = *(_DWORD *)(*(void *)v80 + 4);
      unsigned int v84 = *(_DWORD *)(*(void *)result + 4);
      BOOL v85 = v83 > v84;
      if (v83 != v84) {
        break;
      }
      unsigned int v86 = *(unsigned __int16 *)(v82 + 8);
      unsigned int v87 = *(unsigned __int16 *)(*(void *)result + 8);
      BOOL v85 = v86 > v87;
      if (v86 != v87) {
        break;
      }
      if (v7)
      {
        uint64_t v88 = 0;
        if (v6)
        {
          do
          {
            uint64_t v89 = v81[v88];
            v81[v88] = *(void *)&v80[8 * v88];
            *(void *)&v80[8 * v88++] = v89;
          }
          while (v23 != v88);
        }
        else
        {
          do
          {
            char v90 = *((unsigned char *)v81 + v88);
            *((unsigned char *)v81 + v88) = v80[v88];
            v80[v88++] = v90;
          }
          while (a3 != v88);
        }
      }
      else
      {
        uint64_t v103 = *v81;
        void *v81 = v82;
        *(void *)uint64_t v80 = v103;
      }
      uint64_t v81 = (void *)((char *)v81 + a3);
      int v76 = 1;
LABEL_148:
      v80 += a3;
    }
    if (!v85) {
      goto LABEL_148;
    }
LABEL_130:
    while (v80 <= (unsigned char *)v79)
    {
      uint64_t v91 = *v79;
      unsigned int v92 = *(_DWORD *)(*v79 + 4);
      unsigned int v93 = *(_DWORD *)(*(void *)result + 4);
      BOOL v94 = v92 > v93;
      if (v92 == v93
        && (unsigned int v95 = *(unsigned __int16 *)(v91 + 8),
            unsigned int v96 = *(unsigned __int16 *)(*(void *)result + 8),
            BOOL v94 = v95 > v96,
            v95 == v96))
      {
        if (v7)
        {
          uint64_t v97 = 0;
          if (v6)
          {
            do
            {
              uint64_t v98 = v79[v97];
              v79[v97] = v78[v97];
              v78[v97++] = v98;
            }
            while (v23 != v97);
          }
          else
          {
            do
            {
              char v99 = *((unsigned char *)v79 + v97);
              *((unsigned char *)v79 + v97) = *((unsigned char *)v78 + v97);
              *((unsigned char *)v78 + v97++) = v99;
            }
            while (a3 != v97);
          }
        }
        else
        {
          void *v79 = *v78;
          void *v78 = v91;
        }
        uint64_t v78 = (void *)((char *)v78 + v4);
        int v76 = 1;
      }
      else if (!v94)
      {
        if (v7)
        {
          uint64_t v100 = 0;
          if (v6)
          {
            do
            {
              uint64_t v101 = *(void *)&v80[8 * v100];
              *(void *)&v80[8 * v100] = v79[v100];
              v79[v100++] = v101;
            }
            while (v23 != v100);
          }
          else
          {
            do
            {
              char v102 = v80[v100];
              v80[v100] = *((unsigned char *)v79 + v100);
              *((unsigned char *)v79 + v100++) = v102;
            }
            while (a3 != v100);
          }
        }
        else
        {
          uint64_t v104 = *(void *)v80;
          *(void *)uint64_t v80 = v91;
          void *v79 = v104;
        }
        v80 += a3;
        uint64_t v79 = (void *)((char *)v79 + v4);
        int v76 = 1;
        goto LABEL_115;
      }
      uint64_t v79 = (void *)((char *)v79 + v4);
    }
    unint64_t v105 = result + a2 * a3;
    if (v76)
    {
      int64_t v106 = v80 - (unsigned char *)v81;
      if ((uint64_t)((uint64_t)v81 - result) >= v80 - (unsigned char *)v81) {
        unint64_t v107 = v80 - (unsigned char *)v81;
      }
      else {
        unint64_t v107 = (unint64_t)v81 - result;
      }
      if (v107)
      {
        if (v6)
        {
          uint64_t v108 = (uint64_t *)&v80[-v107];
          unint64_t v109 = v107 >> 3;
          uint64_t v110 = (uint64_t *)result;
          do
          {
            uint64_t v111 = *v110;
            *v110++ = *v108;
            *v108++ = v111;
            --v109;
          }
          while (v109);
        }
        else
        {
          uint64_t v112 = -(uint64_t)v107;
          uint64_t v113 = (char *)result;
          do
          {
            char v114 = *v113;
            *v113++ = v80[v112];
            v80[v112] = v114;
            BOOL v115 = __CFADD__(v112++, 1);
          }
          while (!v115);
        }
      }
      int64_t v116 = (char *)v78 - (char *)v79;
      unint64_t v117 = v105 - ((void)v78 + a3);
      if ((char *)v78 - (char *)v79 < (uint64_t)v117) {
        unint64_t v117 = (char *)v78 - (char *)v79;
      }
      if (v117)
      {
        if (v6)
        {
          uint64_t v118 = (void *)(v105 - v117);
          unint64_t v119 = v117 >> 3;
          do
          {
            uint64_t v120 = *(void *)v80;
            *(void *)uint64_t v80 = *v118;
            v80 += 8;
            *v118++ = v120;
            --v119;
          }
          while (v119);
        }
        else
        {
          uint64_t v121 = -(uint64_t)v117;
          do
          {
            char v122 = *v80;
            *v80++ = *(unsigned char *)(v105 + v121);
            *(unsigned char *)(v105 + v121) = v122;
            BOOL v115 = __CFADD__(v121++, 1);
          }
          while (!v115);
        }
      }
      if (v106 > a3) {
        uint64_t result = mrec_qsort_r<EncodeBuildAlphabetCountsUns16Cmp>();
      }
      if (v116 > a3)
      {
        uint64_t result = v105 - v116;
        a2 = v116 / (unint64_t)a3;
        BOOL v6 = (((v105 - v116) | a3) & 7) == 0;
        if ((((v105 - v116) | a3) & 7) != 0) {
          int v7 = 2;
        }
        else {
          int v7 = v5;
        }
        if (a2 < 7) {
          goto LABEL_5;
        }
        continue;
      }
    }
    else if ((uint64_t)(a2 * a3) > a3)
    {
      unint64_t v123 = result;
      do
      {
        if (v77 > result)
        {
          unint64_t v124 = v123;
          unint64_t v125 = v77;
          do
          {
            unint64_t v126 = v125;
            v125 += v4;
            uint64_t v127 = *(void *)v125;
            uint64_t v128 = *(void *)v126;
            unsigned int v129 = *(_DWORD *)(*(void *)v125 + 4);
            unsigned int v130 = *(_DWORD *)(*(void *)v126 + 4);
            BOOL v131 = v129 > v130;
            if (v129 == v130) {
              BOOL v131 = *(unsigned __int16 *)(v127 + 8) > *(unsigned __int16 *)(v128 + 8);
            }
            if (!v131) {
              break;
            }
            if (v7)
            {
              uint64_t v132 = 0;
              unint64_t v133 = v124 + a3;
              if (v6)
              {
                do
                {
                  uint64_t v134 = *(void *)(v133 + 8 * v132);
                  *(void *)(v133 + 8 * v132) = *(void *)(v124 + 8 * v132);
                  *(void *)(v124 + 8 * v132++) = v134;
                }
                while (v23 != v132);
              }
              else
              {
                do
                {
                  char v135 = *(unsigned char *)(v133 + v132);
                  *(unsigned char *)(v133 + v132) = *(unsigned char *)(v124 + v132);
                  *(unsigned char *)(v124 + v132++) = v135;
                }
                while (a3 != v132);
              }
            }
            else
            {
              *(void *)unint64_t v126 = v127;
              *(void *)unint64_t v125 = v128;
            }
            v124 += v4;
          }
          while (v125 > result);
        }
        v77 += a3;
        v123 += a3;
      }
      while (v77 < v105);
    }
    return result;
  }
}

void ForwardLatticeNodeIterator<WordLatticeLC>::next(void *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 3);
  unsigned int v3 = DgnPrimQueue<unsigned int,DgnPrimArray<unsigned int>>::dequeue((uint64_t)(a1 + 3));
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*(void *)(*a1 + 80) + 24 * *(unsigned int *)(*(void *)(*a1 + 16) + 4 * v3) + 20);
  if (v5 != -2)
  {
    uint64_t v6 = *(void *)(v4 + 128);
    do
    {
      uint64_t v7 = *(unsigned int *)(*(void *)(v4 + 80) + 24 * *(unsigned int *)(v6 + 136 * v5 + 120));
      uint64_t v8 = a1[1];
      int v9 = *(_DWORD *)(v8 + 4 * v7) - 1;
      *(_DWORD *)(v8 + 4 * v7) = v9;
      if (!v9)
      {
        DgnPrimQueue<unsigned int,DgnPrimArray<unsigned int>>::enqueue(v2, v7);
        uint64_t v4 = *a1;
        uint64_t v6 = *(void *)(*a1 + 128);
      }
      uint64_t v5 = *(unsigned int *)(v6 + 136 * v5 + 128);
    }
    while (v5 != -2);
  }
}

void WordLattice::~WordLattice(WordLattice *this)
{
  *(void *)this = &unk_26C4DF878;
  uint64_t v2 = (char *)this + 224;
  DgnString::~DgnString((WordLattice *)((char *)this + 272));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 256);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 240);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v2);

  Lattice<WordLatticeLC>::~Lattice(this);
}

{
  uint64_t vars8;

  WordLattice::~WordLattice(this);

  JUMPOUT(0x216698730);
}

void *Lattice<WordLatticeLC>::~Lattice(void *a1)
{
  *a1 = &unk_26C4E4D08;
  uint64_t v2 = (uint64_t)(a1 + 16);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 22));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 20));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 18));
  DgnArray<LatticeLink<WordLatticeLC>>::releaseAll(v2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 14));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 12));
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)(a1 + 10));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 8));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 6));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 4));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(a1 + 2));
  return a1;
}

void *DgnArray<LatticeLink<WordLatticeLC>>::releaseAll(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 1)
  {
    uint64_t v3 = 136 * v2 - 136;
    do
    {
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)(*(void *)a1 + v3));
      v3 -= 136;
    }
    while (v3 != -136);
  }
  uint64_t result = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

uint64_t ForwardLatticeNodeIterator<WordLatticeLC>::ForwardLatticeNodeIterator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v3 = a1 + 24;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  uint64_t v4 = *(unsigned int *)(a2 + 24);
  if (v4)
  {
    unint64_t v5 = 0;
    *(void *)(a1 + 8) = MemChunkAlloc(4 * v4, 0);
    *(_DWORD *)(a1 + 16) = v4;
    do
    {
      uint64_t v6 = *(void *)(*(void *)a1 + 16);
      uint64_t v7 = *(void *)(*(void *)a1 + 80);
      int v8 = *(_DWORD *)(v7 + 24 * *(unsigned int *)(v6 + 4 * v5) + 8);
      *(_DWORD *)(*(void *)(a1 + 8) + 4 * v5) = v8;
      if (!v8) {
        DgnPrimQueue<unsigned int,DgnPrimArray<unsigned int>>::enqueue(v3, *(_DWORD *)(v7 + 24 * *(unsigned int *)(v6 + 4 * v5)));
      }
      ++v5;
    }
    while (v5 < *(unsigned int *)(a1 + 16));
  }
  return a1;
}

void sub_213F7E8C8(_Unwind_Exception *a1)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2);
  DgnPrimFixArray<double>::~DgnPrimFixArray(v1);
  _Unwind_Resume(a1);
}

void MrecInitModule_lexnet_prefilt(void)
{
  if (!gParDebugShowPrefiltererStats)
  {
    v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugShowPrefiltererStats", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    *uint64_t v1 = &unk_26C4E0858;
    gParDebugShowPrefiltererStats = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowPrefiltererStats);
  }
  if (!gParDebugPrefiltererProcessing)
  {
    uint64_t v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "DebugPrefiltererProcessing", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    void *v3 = &unk_26C4E0858;
    gParDebugPrefiltererProcessing = (uint64_t)v3;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugPrefiltererProcessing);
  }
  if (!gParDebugShowPrefiltererBestActiveSeqs)
  {
    uint64_t v4 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v4, "DebugShowPrefiltererBestActiveSeqs", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    *unint64_t v5 = &unk_26C4E0858;
    gParDebugShowPrefiltererBestActiveSeqs = (uint64_t)v5;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowPrefiltererBestActiveSeqs);
  }
  if (!gParDebugShowPrefiltererEarliestTheory)
  {
    uint64_t v6 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v6, "DebugShowPrefiltererEarliestTheory", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    *uint64_t v7 = &unk_26C4E0858;
    gParDebugShowPrefiltererEarliestTheory = (uint64_t)v7;
    int v8 = (uint64_t *)GlobalParamMgr::smpGlobalParamMgr;
    GlobalParamMgr::addParam(v8, (GlobalParam **)&gParDebugShowPrefiltererEarliestTheory);
  }
}

void HmmDurationPenalties::initDurationsLookups(HmmDurationPenalties *this, double a2)
{
  *((double *)this + 1) = a2;
  if (a2 <= 0.0)
  {
    *((_DWORD *)this + 4) = 0;
    *((void *)this + 3) = 0;
    *((void *)this + 4) = 0;
  }
  else
  {
    *((_DWORD *)this + 4) = 25;
    long double v3 = DgnExp(-25.5 / a2);
    *((long double *)this + 3) = 1.0 / (1.0 - v3);
    *((long double *)this + 4) = 1.0 / v3;
    uint64_t v4 = *((unsigned int *)this + 4);
    unsigned int v5 = v4 + 1;
    unsigned int v6 = *((_DWORD *)this + 13);
    if ((int)v4 + 1 > v6) {
      DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 40, v4 + 1 - v6, 0);
    }
    *((_DWORD *)this + 12) = v5;
    unsigned int v7 = *((_DWORD *)this + 17);
    if (v5 > v7) {
      DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 56, v5 - v7, 0);
    }
    *((_DWORD *)this + 16) = v5;
    if (v4 <= 0x7FFFFFFE)
    {
      int v8 = v4 + 2;
      uint64_t v9 = v4;
      do
      {
        long double v10 = DgnExp(-((double)v9 + 0.5) / *((double *)this + 1));
        *(long double *)(*((void *)this + 5) + 8 * v9) = 1.0 / v10;
        *(long double *)(*((void *)this + 7) + 8 * v9) = 1.0 / (1.0 - v10);
        --v8;
        --v9;
      }
      while (v8 > 1);
    }
    unsigned int v11 = *((_DWORD *)this + 21);
    if (v5 > v11) {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 72, v5 - v11, 0);
    }
    *((_DWORD *)this + 20) = v5;
    if (v4 <= 0x7FFFFFFE)
    {
      unsigned int v12 = 0;
      uint64_t v13 = *((void *)this + 5);
      uint64_t v14 = *((void *)this + 9);
      do
      {
        unsigned int v15 = v12;
        unsigned int v16 = *((_DWORD *)this + 12);
        if (v16 <= v15 + 1) {
          unsigned int v16 = v15 + 1;
        }
        unsigned int v12 = v16 - 1;
        while (v12 != v15)
        {
          unsigned int v17 = v15 + 1;
          double v18 = *(double *)(*((void *)this + 7) + 8 * v15++);
          if (*(double *)(v13 + 8 * v4) >= v18)
          {
            unsigned int v12 = v17 - 1;
            break;
          }
        }
        *(_DWORD *)(v14 + 4 * v4) = v12;
      }
      while ((int)v4-- > 0);
    }
  }
  *(unsigned char *)this = 1;
}

uint64_t HmmDurationPenalties::sizeObject(uint64_t a1, int a2)
{
  uint64_t v4 = sizeObject<unsigned long long>(a1 + 40, a2);
  uint64_t v5 = sizeObject<unsigned long long>(a1 + 56, a2);
  uint64_t v6 = sizeObject<unsigned int>(a1 + 72, a2);
  uint64_t v7 = 24;
  if (a2 == 3) {
    uint64_t v7 = 0;
  }
  return (v7 | (a2 != 3) | (4 * (a2 != 3))) + v4 + v5 + v6;
}

uint64_t PrefStats::sizeObject(uint64_t a1, int a2)
{
  if (a2 == 3) {
    return 0;
  }
  else {
    return 72;
  }
}

double PrefStats::resetStats(PrefStats *this)
{
  *(_DWORD *)this = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)this + 56) = 0u;
  *((_DWORD *)this + 18) = 0;
  return result;
}

__n128 PrefStats::operator=(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  __n128 result = *(__n128 *)(a2 + 56);
  *(__n128 *)(a1 + DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)this + 56) = result;
  *(_DWORD *)(a1 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 72) = *(_DWORD *)(a2 + 72);
  return result;
}

int32x4_t PrefStats::operator-=(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 -= *(_DWORD *)a2;
  *(int64x2_t *)(a1 + 8) = vsubq_s64(*(int64x2_t *)(a1 + 8), *(int64x2_t *)(a2 + 8));
  *(int64x2_t *)(a1 + 24) = vsubq_s64(*(int64x2_t *)(a1 + 24), *(int64x2_t *)(a2 + 24));
  *(int64x2_t *)(a1 + 40) = vsubq_s64(*(int64x2_t *)(a1 + 40), *(int64x2_t *)(a2 + 40));
  int32x4_t result = vsubq_s32(*(int32x4_t *)(a1 + 56), *(int32x4_t *)(a2 + 56));
  *(int32x4_t *)(a1 + DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)this + 56) = result;
  *(_DWORD *)(a1 + 72) -= *(_DWORD *)(a2 + 72);
  return result;
}

void LexTreeNetScorer::LexTreeNetScorer(LexTreeNetScorer *this)
{
  *((unsigned char *)this + 64) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  uint64_t v2 = (char *)this + 151340;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(void *)((char *)this + 220) = 0xF0000000FLL;
  *((_DWORD *)this + 57) = 0;
  *((_OWORD *)this + 9461) = 0u;
  long double v3 = (char *)this + 151376;
  *((_OWORD *)this + 9469) = 0u;
  *((_OWORD *)this + 9462) = 0u;
  *((_OWORD *)this + 9463) = 0u;
  *((_OWORD *)this + 9464) = 0u;
  *((_OWORD *)this + 9465) = 0u;
  *((_OWORD *)this + 9466) = 0u;
  ReturnListMgr::ReturnListMgr((LexTreeNetScorer *)((char *)this + 151520));
  *((_OWORD *)this + 9489) = 0u;
  *((_OWORD *)this + 9488) = 0u;
  *((_OWORD *)this + 9487) = 0u;
  *((_OWORD *)this + 9486) = 0u;
  *((_OWORD *)this + 9485) = 0u;
  *((_OWORD *)this + 9484) = 0u;
  *((_OWORD *)this + 9483) = 0u;
  *((_OWORD *)this + 9482) = 0u;
  PelStats::resetStats((LexTreeNetScorer *)((char *)this + 151672));
  *((_DWORD *)this + 37962) = 0;
  *((_OWORD *)this + 9491) = 0u;
  *((_OWORD *)this + 9492) = 0u;
  *((_OWORD *)this + 9493) = 0u;
  *((_OWORD *)this + 9494) = 0u;
  *((_DWORD *)this + 37980) = 0;
  *((_OWORD *)this + 9498) = 0u;
  *((_OWORD *)this + 9499) = 0u;
  *((_OWORD *)this + 9500) = 0u;
  *((_OWORD *)this + 9501) = 0u;
  *((_OWORD *)this + 9502) = 0u;
  *((_OWORD *)this + 9503) = 0u;
  *((_OWORD *)this + 9504) = 0u;
  *((_OWORD *)this + 9505) = 0u;
  PelStats::resetStats((LexTreeNetScorer *)((char *)this + 151928));
  *((_DWORD *)this + 38026) = 0;
  *((_OWORD *)this + 9507) = 0u;
  *((_OWORD *)this + 9508) = 0u;
  *((_OWORD *)this + 9509) = 0u;
  *((_OWORD *)this + 9510) = 0u;
  *((_DWORD *)this + 38044) = 0;
  v2[300] = 0;
  *((void *)this + 189DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)this + 56) = 0;
  *(_OWORD *)((char *)this + 1516DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)this + 56) = 0u;
  *((_DWORD *)v2 + 3) = -1;
  *((_OWORD *)this + 9460) = 0u;
  unsigned int v4 = *((_DWORD *)v2 + 11);
  if (v4 == *((_DWORD *)v2 + 12))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)v3, 1, 1);
    unsigned int v4 = *((_DWORD *)v2 + 11);
  }
  uint64_t v5 = *(void *)(v2 + 36);
  *(_DWORD *)(v5 + 4 * v4) = 0;
  unsigned int v6 = *((_DWORD *)v2 + 11) + 1;
  *((_DWORD *)v2 + 11) = v6;
  for (int i = 35; i != 2585; i += 10)
  {
    if (v6 == *((_DWORD *)v2 + 12))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)v3, 1, 1);
      unsigned int v6 = *((_DWORD *)v2 + 11);
      uint64_t v5 = *(void *)(v2 + 36);
    }
    *(_DWORD *)(v5 + 4 * v6) = i & 0x7FFFFFFC;
    unsigned int v6 = *((_DWORD *)v2 + 11) + 1;
    *((_DWORD *)v2 + 11) = v6;
  }
  *((_DWORD *)v2 + 33) = 0;
  *(void *)(v2 + 140) = 0;
  v2[148] = 0;
  *(void *)(v2 + 1DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)this + 56) = 0;
  *((_DWORD *)this + 55) = 0;
  *((_DWORD *)this + DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)this + 56) = 0;
  *((_DWORD *)this + 62) = 0;
  *((void *)this + 30) = 0xFFFF00000000;
  *((_WORD *)this + 126) = -1;
  *((void *)this + 32) = 0x4E2000000000;
  bzero((char *)this + 264, 0x24E24uLL);
  *(void *)uint64_t v2 = 20000;
  *((_DWORD *)v2 + 2) = 0;
  *((_WORD *)this + 16) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
}

void sub_213F7F044(_Unwind_Exception *a1)
{
  ReturnListMgr::~ReturnListMgr(v5);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v4);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 + 151456);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 + 151440);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v1 + 151424);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v1 + 151408);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 + 151392);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v3);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 + 184);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 + 168);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 + 152);
  HmmDurationPenalties::~HmmDurationPenalties(v2);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 + 16);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1);
  _Unwind_Resume(a1);
}

void HmmDurationPenalties::~HmmDurationPenalties(HmmDurationPenalties *this)
{
}

void LexTreeNetScorer::~LexTreeNetScorer(LexTreeNetScorer *this)
{
  ReturnListMgr::~ReturnListMgr((LexTreeNetScorer *)((char *)this + 151520));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 151504);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 151456);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 151440);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 151424);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 151408);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 151392);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 151376);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 184);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 168);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 152);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 136);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 120);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 104);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16);

  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this);
}

void LexTreeNetScorer::printSize(LexTreeNetScorer *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 600, (DgnString *)&v381);
  if (v382) {
    unsigned int v16 = (char *)v381;
  }
  else {
    unsigned int v16 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_2140B33BB, a3, &byte_2140B33BB, v16);
  DgnString::~DgnString((DgnString *)&v381);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_2140B33BB);
  uint64_t v21 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v21 = 16;
  }
  uint64_t v22 = *((unsigned int *)this + 2);
  unsigned int v23 = *((_DWORD *)this + 3);
  uint64_t v24 = v21 + 4 * (v22 - 1) + 4;
  if ((int)v22 <= 0) {
    uint64_t v24 = v21;
  }
  if (v23 >= v22) {
    uint64_t v25 = v24;
  }
  else {
    uint64_t v25 = v21;
  }
  if (v23 >= v22) {
    uint64_t v26 = v24 + 4 * (v23 - v22);
  }
  else {
    uint64_t v26 = v21;
  }
  uint64_t v27 = this;
  if (v23 >= v22) {
    uint64_t v28 = 0;
  }
  else {
    uint64_t v28 = 4 * v22;
  }
  uint64_t v29 = (a3 + 1);
  uint64_t v377 = a3;
  uint64_t v30 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 601, (DgnString *)&v381);
  if (v382) {
    BOOL v35 = (char *)v381;
  }
  else {
    BOOL v35 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v31, v32, v33, v34, v29, &byte_2140B33BB, v30, v30, v35, v26, v25, v28);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += v26;
  *a5 += v25;
  *a6 += v28;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v36 = 12;
  }
  else {
    uint64_t v36 = 16;
  }
  uint64_t v37 = *((unsigned int *)v27 + 6);
  unsigned int v38 = *((_DWORD *)v27 + 7);
  uint64_t v39 = (unsigned int *)v27;
  if (v38 >= v37)
  {
    uint64_t v40 = 0;
    if ((int)v37 > 0) {
      v36 += 4 * (v37 - 1) + 4;
    }
    uint64_t v41 = v36 + 4 * (v38 - v37);
  }
  else
  {
    uint64_t v40 = 4 * v37;
    uint64_t v41 = v36;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 603, (DgnString *)&v381);
  if (v382) {
    unsigned int v46 = (char *)v381;
  }
  else {
    unsigned int v46 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v42, v43, v44, v45, v29, &byte_2140B33BB, v30, v30, v46, v41, v36, v40);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += v41;
  *a5 += v36;
  *a6 += v40;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 605, (DgnString *)&v381);
  if (v382) {
    uint64_t v51 = (char *)v381;
  }
  else {
    uint64_t v51 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v47, v48, v49, v50, v29, &byte_2140B33BB, v30, v30, v51, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v381);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 607, (DgnString *)&v381);
  if (v382) {
    uint64_t v56 = (char *)v381;
  }
  else {
    uint64_t v56 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v52, v53, v54, v55, v29, &byte_2140B33BB, v30, v30, v56, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v381);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 609, (DgnString *)&v381);
  if (v382) {
    uint64_t v61 = (char *)v381;
  }
  else {
    uint64_t v61 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v57, v58, v59, v60, v29, &byte_2140B33BB, v30, v30, v61, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 610, (DgnString *)&v381);
  if (v382) {
    BOOL v66 = (char *)v381;
  }
  else {
    BOOL v66 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v62, v63, v64, v65, v29, &byte_2140B33BB, v30, v30, v66, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 612, (DgnString *)&v381);
  if (v382) {
    uint64_t v71 = (char *)v381;
  }
  else {
    uint64_t v71 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v67, v68, v69, v70, v29, &byte_2140B33BB, v30, v30, v71, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 614, (DgnString *)&v381);
  if (v382) {
    int v76 = (char *)v381;
  }
  else {
    int v76 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v72, v73, v74, v75, v29, &byte_2140B33BB, v30, v30, v76, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 616, (DgnString *)&v381);
  if (v382) {
    uint64_t v81 = (char *)v381;
  }
  else {
    uint64_t v81 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v77, v78, v79, v80, v29, &byte_2140B33BB, v30, v30, v81, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 4;
  *a5 += 4;
  uint64_t v82 = HmmDurationPenalties::sizeObject((uint64_t)(v39 + 16), 0);
  uint64_t v83 = HmmDurationPenalties::sizeObject((uint64_t)(v39 + 16), 1);
  uint64_t v84 = HmmDurationPenalties::sizeObject((uint64_t)(v39 + 16), 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 617, (DgnString *)&v381);
  if (v382) {
    uint64_t v89 = (char *)v381;
  }
  else {
    uint64_t v89 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v85, v86, v87, v88, v29, &byte_2140B33BB, v30, v30, v89, v82, v83, v84);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += v82;
  *a5 += v83;
  *a6 += v84;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v90 = 12;
  }
  else {
    uint64_t v90 = 16;
  }
  uint64_t v91 = v39[40];
  unsigned int v92 = v39[41];
  if (v92 >= v91)
  {
    uint64_t v93 = 0;
    if ((int)v91 > 0) {
      v90 += 6 * (v91 - 1) + 6;
    }
    uint64_t v94 = v90 + 6 * (v92 - v91);
  }
  else
  {
    uint64_t v93 = 6 * v91;
    uint64_t v94 = v90;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 619, (DgnString *)&v381);
  if (v382) {
    char v99 = (char *)v381;
  }
  else {
    char v99 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v95, v96, v97, v98, v29, &byte_2140B33BB, v30, v30, v99, v94, v90, v93);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += v94;
  *a5 += v90;
  *a6 += v93;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v100 = 12;
  }
  else {
    uint64_t v100 = 16;
  }
  uint64_t v101 = v39[44];
  unsigned int v102 = v39[45];
  if (v102 >= v101)
  {
    uint64_t v103 = 0;
    if ((int)v101 > 0) {
      uint64_t v100 = (v100 | 2) + 2 * (v101 - 1);
    }
    uint64_t v104 = v100 + 2 * (v102 - v101);
  }
  else
  {
    uint64_t v103 = 2 * v101;
    uint64_t v104 = v100;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 620, (DgnString *)&v381);
  if (v382) {
    unint64_t v109 = (char *)v381;
  }
  else {
    unint64_t v109 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v105, v106, v107, v108, v29, &byte_2140B33BB, v30, v30, v109, v104, v100, v103);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += v104;
  *a5 += v100;
  *a6 += v103;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v110 = 12;
  }
  else {
    uint64_t v110 = 16;
  }
  uint64_t v111 = v39[48];
  unsigned int v112 = v39[49];
  if (v112 >= v111)
  {
    uint64_t v113 = 0;
    if ((int)v111 > 0) {
      v110 += 4 * (v111 - 1) + 4;
    }
    uint64_t v114 = v110 + 4 * (v112 - v111);
  }
  else
  {
    uint64_t v113 = 4 * v111;
    uint64_t v114 = v110;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 622, (DgnString *)&v381);
  if (v382) {
    unint64_t v119 = (char *)v381;
  }
  else {
    unint64_t v119 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v115, v116, v117, v118, v29, &byte_2140B33BB, v30, v30, v119, v114, v110, v113);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += v114;
  *a5 += v110;
  *a6 += v113;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 624, (DgnString *)&v381);
  if (v382) {
    unint64_t v124 = (char *)v381;
  }
  else {
    unint64_t v124 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v120, v121, v122, v123, v29, &byte_2140B33BB, v30, v30, v124, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 626, (DgnString *)&v381);
  if (v382) {
    unsigned int v129 = (char *)v381;
  }
  else {
    unsigned int v129 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v125, v126, v127, v128, v29, &byte_2140B33BB, v30, v30, v129, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 628, (DgnString *)&v381);
  if (v382) {
    uint64_t v134 = (char *)v381;
  }
  else {
    uint64_t v134 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v130, v131, v132, v133, v29, &byte_2140B33BB, v30, v30, v134, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 630, (DgnString *)&v381);
  if (v382) {
    uint64_t v139 = (char *)v381;
  }
  else {
    uint64_t v139 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v135, v136, v137, v138, v29, &byte_2140B33BB, v30, v30, v139, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 631, (DgnString *)&v381);
  if (v382) {
    uint64_t v144 = (char *)v381;
  }
  else {
    uint64_t v144 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v140, v141, v142, v143, v29, &byte_2140B33BB, v30, v30, v144, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 632, (DgnString *)&v381);
  if (v382) {
    unsigned int v149 = (char *)v381;
  }
  else {
    unsigned int v149 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v145, v146, v147, v148, v29, &byte_2140B33BB, v30, v30, v149, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 634, (DgnString *)&v381);
  if (v382) {
    uint64_t v154 = (char *)v381;
  }
  else {
    uint64_t v154 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v150, v151, v152, v153, v29, &byte_2140B33BB, v30, v30, v154, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 636, (DgnString *)&v381);
  if (v382) {
    uint64_t v159 = (char *)v381;
  }
  else {
    uint64_t v159 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v155, v156, v157, v158, v29, &byte_2140B33BB, v30, v30, v159, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 637, (DgnString *)&v381);
  if (v382) {
    uint64_t v164 = (char *)v381;
  }
  else {
    uint64_t v164 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v160, v161, v162, v163, v29, &byte_2140B33BB, v30, v30, v164, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 639, (DgnString *)&v381);
  if (v382) {
    uint64_t v169 = (char *)v381;
  }
  else {
    uint64_t v169 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v165, v166, v167, v168, v29, &byte_2140B33BB, v30, v30, v169, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 641, (DgnString *)&v381);
  if (v382) {
    uint64_t v174 = (char *)v381;
  }
  else {
    uint64_t v174 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v170, v171, v172, v173, v29, &byte_2140B33BB, v30, v30, v174, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 642, (DgnString *)&v381);
  if (v382) {
    uint64_t v179 = (char *)v381;
  }
  else {
    uint64_t v179 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v175, v176, v177, v178, v29, &byte_2140B33BB, v30, v30, v179, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 650, (DgnString *)&v381);
  if (v382) {
    uint64_t v184 = (char *)v381;
  }
  else {
    uint64_t v184 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v180, v181, v182, v183, v29, &byte_2140B33BB, v30, v30, v184, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 652, (DgnString *)&v381);
  if (v382) {
    uint64_t v189 = (char *)v381;
  }
  else {
    uint64_t v189 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v185, v186, v187, v188, v29, &byte_2140B33BB, v30, v30, v189, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 654, (DgnString *)&v381);
  if (v382) {
    uint64_t v194 = (char *)v381;
  }
  else {
    uint64_t v194 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v190, v191, v192, v193, v29, &byte_2140B33BB, v30, v30, v194, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 673, (DgnString *)&v381);
  if (v382) {
    unsigned int v199 = (char *)v381;
  }
  else {
    unsigned int v199 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v195, v196, v197, v198, v29, &byte_2140B33BB, v30, v30, v199, 151072, 151072, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 151072;
  *a5 += 151072;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 675, (DgnString *)&v381);
  if (v382) {
    uint64_t v204 = (char *)v381;
  }
  else {
    uint64_t v204 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v200, v201, v202, v203, v29, &byte_2140B33BB, v30, v30, v204, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 677, (DgnString *)&v381);
  if (v382) {
    unsigned int v209 = (char *)v381;
  }
  else {
    unsigned int v209 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v205, v206, v207, v208, v29, &byte_2140B33BB, v30, v30, v209, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 678, (DgnString *)&v381);
  if (v382) {
    uint64_t v214 = (char *)v381;
  }
  else {
    uint64_t v214 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v210, v211, v212, v213, v29, &byte_2140B33BB, v30, v30, v214, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 679, (DgnString *)&v381);
  if (v382) {
    uint64_t v219 = (char *)v381;
  }
  else {
    uint64_t v219 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v215, v216, v217, v218, v29, &byte_2140B33BB, v30, v30, v219, 4, 4, 0);
  v378 = v39;
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 680, (DgnString *)&v381);
  if (v382) {
    uint64_t v224 = (char *)v381;
  }
  else {
    uint64_t v224 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v220, v221, v222, v223, v29, &byte_2140B33BB, v30, v30, v224, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v225 = 4;
  }
  else {
    uint64_t v225 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 681, (DgnString *)&v381);
  if (v382) {
    uint64_t v230 = (char *)v381;
  }
  else {
    uint64_t v230 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v226, v227, v228, v229, v29, &byte_2140B33BB, v30, v30, v230, v225, v225, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += v225;
  *a5 += v225;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v231 = 4;
  }
  else {
    uint64_t v231 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 682, (DgnString *)&v381);
  if (v382) {
    uint64_t v236 = (char *)v381;
  }
  else {
    uint64_t v236 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v232, v233, v234, v235, v29, &byte_2140B33BB, v30, v30, v236, v231, v231, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += v231;
  *a5 += v231;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v237 = 12;
  }
  else {
    uint64_t v237 = 16;
  }
  uint64_t v238 = v378[37846];
  unsigned int v239 = v378[37847];
  if (v239 >= v238)
  {
    uint64_t v240 = 0;
    if ((int)v238 > 0) {
      v237 += 4 * (v238 - 1) + 4;
    }
    uint64_t v241 = v237 + 4 * (v239 - v238);
  }
  else
  {
    uint64_t v240 = 4 * v238;
    uint64_t v241 = v237;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 684, (DgnString *)&v381);
  if (v382) {
    uint64_t v246 = (char *)v381;
  }
  else {
    uint64_t v246 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v242, v243, v244, v245, v29, &byte_2140B33BB, v30, v30, v246, v241, v237, v240);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += v241;
  *a5 += v237;
  *a6 += v240;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v247 = 12;
  }
  else {
    uint64_t v247 = 16;
  }
  uint64_t v248 = v378[37850];
  unsigned int v249 = v378[37851];
  if (v249 >= v248)
  {
    uint64_t v250 = 0;
    if ((int)v248 > 0) {
      v247 += 4 * (v248 - 1) + 4;
    }
    uint64_t v251 = v247 + 4 * (v249 - v248);
  }
  else
  {
    uint64_t v250 = 4 * v248;
    uint64_t v251 = v247;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 686, (DgnString *)&v381);
  if (v382) {
    unsigned int v256 = (char *)v381;
  }
  else {
    unsigned int v256 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v252, v253, v254, v255, v29, &byte_2140B33BB, v30, v30, v256, v251, v247, v250);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += v251;
  *a5 += v247;
  *a6 += v250;
  uint64_t v257 = sizeObject<DgnPrimArray<unsigned char>>((uint64_t)(v378 + 37852), 0);
  uint64_t v258 = sizeObject<DgnPrimArray<unsigned char>>((uint64_t)(v378 + 37852), 1);
  unint64_t v381 = 0;
  uint64_t v382 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v381);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 688, (DgnString *)&v381);
  if (v382) {
    uint64_t v263 = (char *)v381;
  }
  else {
    uint64_t v263 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v259, v260, v261, v262, v29, &byte_2140B33BB, v30, v30, v263, v257, v258, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += v257;
  *a5 += v258;
  uint64_t v264 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)(v378 + 37856), 0);
  uint64_t v265 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)(v378 + 37856), 1);
  unint64_t v381 = 0;
  uint64_t v382 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v381);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 690, (DgnString *)&v381);
  if (v382) {
    uint64_t v270 = (char *)v381;
  }
  else {
    uint64_t v270 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v266, v267, v268, v269, v29, &byte_2140B33BB, v30, v30, v270, v264, v265, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += v264;
  *a5 += v265;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v271 = 12;
  }
  else {
    uint64_t v271 = 16;
  }
  uint64_t v272 = v378[37862];
  unsigned int v273 = v378[37863];
  if (v273 >= v272)
  {
    uint64_t v274 = 0;
    if ((int)v272 > 0) {
      v271 += 4 * (v272 - 1) + 4;
    }
    uint64_t v275 = v271 + 4 * (v273 - v272);
  }
  else
  {
    uint64_t v274 = 4 * v272;
    uint64_t v275 = v271;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 691, (DgnString *)&v381);
  if (v382) {
    uint64_t v280 = (char *)v381;
  }
  else {
    uint64_t v280 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v276, v277, v278, v279, v29, &byte_2140B33BB, v30, v30, v280, v275, v271, v274);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += v275;
  *a5 += v271;
  *a6 += v274;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v281 = 12;
  }
  else {
    uint64_t v281 = 16;
  }
  uint64_t v282 = v378[37866];
  unsigned int v283 = v378[37867];
  if (v283 >= v282)
  {
    uint64_t v284 = 0;
    if ((int)v282 > 0) {
      v281 += 4 * (v282 - 1) + 4;
    }
    uint64_t v285 = v281 + 4 * (v283 - v282);
  }
  else
  {
    uint64_t v284 = 4 * v282;
    uint64_t v285 = v281;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 693, (DgnString *)&v381);
  if (v382) {
    uint64_t v290 = (char *)v381;
  }
  else {
    uint64_t v290 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v286, v287, v288, v289, v29, &byte_2140B33BB, v30, v30, v290, v285, v281, v284);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += v285;
  *a5 += v281;
  *a6 += v284;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 695, (DgnString *)&v381);
  if (v382) {
    v295 = (char *)v381;
  }
  else {
    v295 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v291, v292, v293, v294, v29, &byte_2140B33BB, v30, v30, v295, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v296 = 4;
  }
  else {
    uint64_t v296 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 697, (DgnString *)&v381);
  if (v382) {
    uint64_t v301 = (char *)v381;
  }
  else {
    uint64_t v301 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v297, v298, v299, v300, v29, &byte_2140B33BB, v30, v30, v301, v296, v296, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += v296;
  *a5 += v296;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 699, (DgnString *)&v381);
  if (v382) {
    v306 = (char *)v381;
  }
  else {
    v306 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v302, v303, v304, v305, v29, &byte_2140B33BB, v30, v30, v306, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v381);
  ++*a4;
  ++*a5;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v307 = 4;
  }
  else {
    uint64_t v307 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 701, (DgnString *)&v381);
  if (v382) {
    uint64_t v312 = (char *)v381;
  }
  else {
    uint64_t v312 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v308, v309, v310, v311, v29, &byte_2140B33BB, v30, v30, v312, v307, v307, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += v307;
  *a5 += v307;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v313 = 12;
  }
  else {
    uint64_t v313 = 16;
  }
  uint64_t v314 = v378[37878];
  unsigned int v315 = v378[37879];
  if (v315 >= v314)
  {
    uint64_t v316 = 0;
    if ((int)v314 > 0) {
      v313 += 4 * (v314 - 1) + 4;
    }
    uint64_t v317 = v313 + 4 * (v315 - v314);
  }
  else
  {
    uint64_t v316 = 4 * v314;
    uint64_t v317 = v313;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 703, (DgnString *)&v381);
  if (v382) {
    uint64_t v322 = (char *)v381;
  }
  else {
    uint64_t v322 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v318, v319, v320, v321, v29, &byte_2140B33BB, v30, v30, v322, v317, v313, v316);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += v317;
  *a5 += v313;
  *a6 += v316;
  unint64_t v381 = 0;
  unint64_t v379 = 0;
  unint64_t v380 = 0;
  ReturnListMgr::printSize((ReturnListMgr *)(v378 + 37880), 0xFFFFFFFFLL, v29, &v381, &v380, &v379);
  *a4 += v381;
  *a5 += v380;
  *a6 += v379;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 706, (DgnString *)&v381);
  if (v382) {
    unsigned int v327 = (char *)v381;
  }
  else {
    unsigned int v327 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v323, v324, v325, v326, v29, &byte_2140B33BB, v30, v30, v327, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v381);
  ++*a4;
  ++*a5;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v328 = 4;
  }
  else {
    uint64_t v328 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 707, (DgnString *)&v381);
  if (v382) {
    uint64_t v333 = (char *)v381;
  }
  else {
    uint64_t v333 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v329, v330, v331, v332, v29, &byte_2140B33BB, v30, v30, v333, v328, v328, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += v328;
  *a5 += v328;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v334 = 4;
  }
  else {
    uint64_t v334 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 708, (DgnString *)&v381);
  if (v382) {
    v339 = (char *)v381;
  }
  else {
    v339 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v335, v336, v337, v338, v29, &byte_2140B33BB, v30, v30, v339, v334, v334, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += v334;
  *a5 += v334;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v340 = 4;
  }
  else {
    uint64_t v340 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 709, (DgnString *)&v381);
  if (v382) {
    unsigned int v345 = (char *)v381;
  }
  else {
    unsigned int v345 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v341, v342, v343, v344, v29, &byte_2140B33BB, v30, v30, v345, v340, v340, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += v340;
  *a5 += v340;
  uint64_t v346 = PelStats::sizeObject((uint64_t)(v378 + 37918), 0);
  uint64_t v347 = PelStats::sizeObject((uint64_t)(v378 + 37918), 1);
  uint64_t v348 = PelStats::sizeObject((uint64_t)(v378 + 37918), 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 723, (DgnString *)&v381);
  if (v382) {
    int v353 = (char *)v381;
  }
  else {
    int v353 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v349, v350, v351, v352, v29, &byte_2140B33BB, v30, v30, v353, v346, v347, v348);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += v346;
  *a5 += v347;
  *a6 += v348;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 724, (DgnString *)&v381);
  if (v382) {
    unsigned int v358 = (char *)v381;
  }
  else {
    unsigned int v358 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v354, v355, v356, v357, v29, &byte_2140B33BB, v30, v30, v358, 72, 72, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 72;
  *a5 += 72;
  uint64_t v359 = PelStats::sizeObject((uint64_t)(v378 + 37982), 0);
  uint64_t v360 = PelStats::sizeObject((uint64_t)(v378 + 37982), 1);
  uint64_t v361 = PelStats::sizeObject((uint64_t)(v378 + 37982), 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 726, (DgnString *)&v381);
  if (v382) {
    uint64_t v366 = (char *)v381;
  }
  else {
    uint64_t v366 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v362, v363, v364, v365, v29, &byte_2140B33BB, v30, v30, v366, v359, v360, v361);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += v359;
  *a5 += v360;
  *a6 += v361;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 728, (DgnString *)&v381);
  if (v382) {
    uint64_t v371 = (char *)v381;
  }
  else {
    uint64_t v371 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v367, v368, v369, v370, v29, &byte_2140B33BB, v30, v30, v371, 72, 72, 0);
  DgnString::~DgnString((DgnString *)&v381);
  *a4 += 72;
  *a5 += 72;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 729, (DgnString *)&v381);
  if (v382) {
    unint64_t v376 = (char *)v381;
  }
  else {
    unint64_t v376 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v372, v373, v374, v375, v377, &byte_2140B33BB, (35 - v377), (35 - v377), v376, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v381);
}

void sub_213F80EB0(_Unwind_Exception *a1)
{
  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

void *LexTreeNetScorer::fillPens(void *result, unsigned int a2, void *a3)
{
  uint64_t v3 = *(unsigned __int16 *)(result[21] + 2 * a2);
  unsigned int v4 = *(unsigned __int8 *)(result[18957] + 8);
  uint64_t v5 = result[19];
  int v6 = *(unsigned __int16 *)(v5 + 6 * a2);
  if (v6 == 0xFFFF || v6 == 0 || v3 == 0xFFFF || v4 == 0)
  {
    *(_DWORD *)(v5 + 6 * a2 + 2) = 0;
  }
  else
  {
    unsigned int v11 = result;
    *(void *)uint64_t v13 = 0;
    int32x4_t result = (void *)HmmDurationPenalties::durationToPens((uint64_t)(result + 8), *(__int16 *)(*a3 + 2 * v3), v4, &v13[1], v13);
    uint64_t v12 = v11[19] + 6 * a2;
    *(_WORD *)(v12 + 2) = v13[0];
    *(_WORD *)(v12 + 4) = v13[1];
  }
  return result;
}

uint64_t HmmDurationPenalties::durationToPens(uint64_t this, int a2, unsigned int a3, unsigned int *a4, unsigned int *a5)
{
  unsigned int v5 = *(_DWORD *)(this + 16);
  if (v5)
  {
    double v6 = (double)(int)(a3 + a2) / (double)a3;
    if (v6 <= *(double *)(this + 24)) {
      double v6 = *(double *)(this + 24);
    }
    if (v6 > *(double *)(this + 32)) {
      double v6 = *(double *)(this + 32);
    }
    LODWORD(v7) = -1;
    do
      uint64_t v7 = (v7 + 1);
    while (*(double *)(*(void *)(this + 40) + 8 * v7) < v6);
    *a4 = v7;
    unsigned int v8 = *(_DWORD *)(*(void *)(this + 72) + 4 * v7);
    do
      double v9 = *(double *)(*(void *)(this + 56) + 8 * v8++);
    while (v9 > v6);
    unsigned int v5 = v8 - 1;
  }
  else
  {
    *a4 = 0;
  }
  *a5 = v5;
  return this;
}

void LexTreeNetScorer::initScorer(unint64_t a1, __int16 a2, char a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10, uint64_t a11, int a12, int a13, char a14, uint64_t a15)
{
  unint64_t v20 = a1 + 151352;
  ReturnListMgr::initReturnLists((_WORD *)(a1 + 151520), a2);
  *(unsigned char *)(v20 + 288) = a3;
  *(void *)(v20 + 296) = a4;
  *(void *)(v20 + 304) = a5;
  DgnPrimArray<int>::copyArraySlice(a1, (uint64_t *)a10, 0, *(_DWORD *)(a10 + 8));
  *(void *)(a1 + 48) = a11;
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = a12;
  *(_DWORD *)(a1 + 212) = a13;
  *(_DWORD *)unint64_t v20 = a6;
  *(void *)(v20 + 8) = a7;
  *(void *)(v20 + 16) = a8;
  HmmDurationPenalties::initDurationsLookups((HmmDurationPenalties *)(a1 + 64), a9);
  *(unsigned char *)(v20 + 136) = a14;
  *(void *)(v20 + 144) = a15;
  if ((a14 & 1) == 0)
  {
    uint64_t v21 = (void *)(a1 + 152);
    int v22 = *(_DWORD *)(a1 + 52);
    unsigned int v23 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 48) * v22;
    unsigned int v24 = *(_DWORD *)(a1 + 164);
    unsigned int v25 = v23;
    BOOL v26 = v23 >= v24;
    uint64_t v27 = v23 - v24;
    if (v27 != 0 && v26)
    {
      DgnPrimStructArray<PelIdAndStayAndPassPen>::reallocElts(a1 + 152, v27, 0);
      int v22 = *(_DWORD *)(a1 + 52);
      unsigned int v25 = *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 48) * v22;
    }
    *(_DWORD *)(a1 + 160) = v23;
    uint64_t v28 = (void *)(a1 + 168);
    unsigned int v29 = *(_DWORD *)(a1 + 180);
    BOOL v26 = v25 >= v29;
    uint64_t v30 = v25 - v29;
    if (v30 != 0 && v26)
    {
      DgnPrimArray<short>::reallocElts(a1 + 168, v30, 0);
      int v22 = *(_DWORD *)(a1 + 52);
    }
    *(_DWORD *)(a1 + 176) = v25;
    PicMgr::getRightAndDoubleGenericPicNodes(*(void *)(v20 + 304), v22, &v40);
    uint64_t v31 = v41;
    if (v41)
    {
      uint64_t v32 = 0;
      uint64_t v33 = v40;
      uint64_t v34 = 2;
      do
      {
        BOOL v35 = *(_WORD **)(v33 + 8 * v32);
        if (v35)
        {
          *(_WORD *)(*v21 + v34 - 2) = *v35;
          *(_WORD *)(*v28 + 2 * v32) = v35[1];
        }
        else
        {
          uint64_t v36 = (_DWORD *)(*v21 + v34);
          *((_WORD *)v36 - 1) = -1;
          *(_WORD *)(*v28 + 2 * v32) = -1;
          _DWORD *v36 = 0;
        }
        ++v32;
        v34 += 6;
      }
      while (v31 != v32);
    }
    DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v40);
  }
}

unint64_t LexTreeNetScorer::updateScorerDurations(unint64_t result, uint64_t a2)
{
  unint64_t v3 = result;
  if (*(unsigned char *)(result + 151488))
  {
    unsigned int v4 = *(unsigned __int8 *)(*(void *)(result + 151656) + 8);
    unsigned int v5 = (void *)(result + 184);
    unsigned int v6 = *(_DWORD *)(a2 + 8);
    unsigned int v7 = *(_DWORD *)(result + 196);
    unsigned int v8 = v6;
    if (v6 > v7)
    {
      int32x4_t result = DgnPrimArray<unsigned int>::reallocElts(result + 184, v6 - v7, 0);
      unsigned int v8 = *(_DWORD *)(a2 + 8);
    }
    *(_DWORD *)(v3 + 192) = v6;
    if (v8)
    {
      uint64_t v9 = 0;
      unint64_t v10 = 0;
      uint64_t v11 = v3 + 64;
      do
      {
        if (v4)
        {
          *(void *)uint64_t v14 = 0;
          int32x4_t result = HmmDurationPenalties::durationToPens(v11, *(__int16 *)(*(void *)a2 + 2 * v10), v4, &v14[1], v14);
          uint64_t v12 = (_WORD *)(*v5 + v9);
          *uint64_t v12 = v14[0];
          v12[1] = v14[1];
          unsigned int v8 = *(_DWORD *)(a2 + 8);
        }
        else
        {
          *(_DWORD *)(*v5 + v9) = 0;
        }
        ++v10;
        v9 += 4;
      }
      while (v10 < v8);
    }
  }
  else if (*(_DWORD *)(result + 160))
  {
    unsigned int v13 = 0;
    do
      int32x4_t result = (unint64_t)LexTreeNetScorer::fillPens((void *)v3, v13++, (void *)a2);
    while (v13 < *(_DWORD *)(v3 + 160));
  }
  return result;
}

void LexTreeNetScorer::beginScorerSyncRecog(LexTreeNetScorer *this, int a2, const PrefiltererSearchParamSet *a3)
{
  unsigned int v5 = (char *)this + 152104;
  unsigned int v6 = (char *)this + 151648;
  unsigned int v7 = (char *)this + 151340;
  *((void *)this + 18935) = a3;
  uint64_t v8 = *((void *)this + 18957);
  uint64_t v9 = v8 + 56;
  uint64_t v10 = v8 + 72;
  if (*((_DWORD *)a3 + 12) == 1) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = v9;
  }
  LexTreeNetScorer::updateScorerDurations((unint64_t)this, v11);
  ReturnListMgr::beginRetListSyncRecog((LexTreeNetScorer *)((char *)this + 151520), *(const PrefiltererSearchParamSet **)(v7 + 140), v12, v13, v14, v15, v16, v17);
  uint64_t v18 = *(void *)v6;
  unsigned int v19 = ***((_DWORD ***)v6 + 1) - 2;
  *((_DWORD *)v7 + 33) = a2;
  unint64_t v20 = *(void *)(v18 + 120);
  *((void *)v6 + 2) = v20;
  PelScoreCache::addCacheClient(v20, this);
  PelStats::resetStats((LexTreeNetScorer *)((char *)this + 151672));
  *((_DWORD *)v6 + 50) = 0;
  *((_OWORD *)this + 9491) = 0u;
  *((_OWORD *)this + 9492) = 0u;
  *((_OWORD *)this + 9493) = 0u;
  *((_OWORD *)this + 9494) = 0u;
  *((_DWORD *)this + 37980) = 0;
  PelStats::resetStats((LexTreeNetScorer *)((char *)this + 151928));
  *(_DWORD *)unsigned int v5 = 0;
  *(_OWORD *)(v5 + 8) = 0u;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = 0u;
  *(_OWORD *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = 0u;
  *((_DWORD *)v5 + 18) = 0;
  unsigned int v23 = *(_DWORD **)(v7 + 140);
  *((_DWORD *)this + 50) = v23[10];
  int v24 = v23[36];
  if (v24 == -1)
  {
    *((_DWORD *)this + 51) = 5000;
  }
  else
  {
    int v25 = v23[33];
    int v26 = v23[34];
    *((_DWORD *)this + 51) = v25 - v24 + v26;
    if (v25 - v24 + v26 < 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lexnet.cpp", 935, (uint64_t)"prefilt/lexnet", 1, (uint64_t)"%d %d %d %d", v21, v22, v25 - v24 + v26);
    }
  }
  *((_DWORD *)this + 52) = *((_DWORD *)v7 + 58);
  unsigned int v27 = *((_DWORD *)v7 + 44);
  if (v19 > v27) {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 151504, v19 - v27, 0);
  }
  *((_DWORD *)v7 + 43) = v19;
  *((_DWORD *)this + 55) = 0;
  *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = 0;
  *((_DWORD *)this + 62) = 0;
  *((_WORD *)this + 126) = -1;
  *((void *)this + 32) = 0x4E2000000000;
  *((_DWORD *)v7 + 2) = 0;
  bzero((char *)this + 264, 0x24E24uLL);
  *(void *)unsigned int v7 = 20000;
  uint64_t v28 = *(void *)(v7 + 140);
  *((unsigned char *)this + 32) = *(unsigned char *)(v28 + 84);
  *((unsigned char *)this + 33) = *(unsigned char *)(v28 + 68);
  double v29 = 0.0;
  if (*(_DWORD *)(v28 + 64) != -1 && v7[300]) {
    double v29 = *(double *)(v28 + 56);
  }
  *((double *)this + 5) = v29;
  unsigned int v30 = *((_DWORD *)this + 7);
  if (v30 <= 0x7D0)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 16, 2001 - v30, 0);
    double v29 = *((double *)this + 5);
  }
  uint64_t v31 = 0;
  *((_DWORD *)this + 6) = 2001;
  int64x2_t v32 = (int64x2_t)xmmword_214085120;
  uint64_t v33 = *((void *)this + 2);
  int64x2_t v34 = vdupq_n_s64(2uLL);
  do
  {
    if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x7D1uLL), (uint64x2_t)v32)).u8[0]) {
      *(_DWORD *)(v33 + 4 * v31) = (v29 * (double)v31);
    }
    if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x7D1uLL), *(uint64x2_t *)&v32)).i32[1]) {
      *(_DWORD *)(v33 + 4 * v31 + 4) = (v29 * (double)(v31 + 1));
    }
    v31 += 2;
    int64x2_t v32 = vaddq_s64(v32, v34);
  }
  while (v31 != 2002);
  unsigned int v35 = *((_DWORD *)v7 + 15);
  int v36 = 256;
  do
  {
    if (v35 == *((_DWORD *)v7 + 16))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)(v7 + 52), 1, 1);
      unsigned int v35 = *((_DWORD *)v7 + 15);
    }
    *(_DWORD *)(*(void *)(v7 + 52) + 4 * v35) = 0;
    unsigned int v35 = *((_DWORD *)v7 + 15) + 1;
    *((_DWORD *)v7 + 15) = v35;
    --v36;
  }
  while (v36);
  uint64_t v37 = v7 + 68;
  unsigned int v38 = *((_DWORD *)v7 + 20);
  if (v38 <= 0xFF) {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)(v7 + 68), 256 - v38, 0);
  }
  unint64_t v39 = *((unsigned int *)v7 + 19);
  if (v39 <= 0x100)
  {
    if (v39 != 256)
    {
      uint64_t v41 = 16 * v39;
      do
      {
        uint64_t v42 = (void *)(*v37 + v41);
        void *v42 = 0;
        v42[1] = 0;
        v41 += 16;
      }
      while (v41 != 4096);
    }
  }
  else if ((int)v39 >= 257)
  {
    uint64_t v40 = 16 * v39 - 16;
    do
    {
      --v39;
      DgnPrimArray<unsigned int>::~DgnPrimArray(*v37 + v40);
      v40 -= 16;
    }
    while (v39 > 0x100);
  }
  *((_DWORD *)v7 + 19) = 256;
  uint64_t v43 = v7 + 84;
  unsigned int v44 = *((_DWORD *)v7 + 24);
  if (v44 <= 0xFF) {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)(v7 + 84), 256 - v44, 0);
  }
  unint64_t v45 = *((unsigned int *)v7 + 23);
  if (v45 <= 0x100)
  {
    if (v45 != 256)
    {
      uint64_t v47 = 16 * v45;
      do
      {
        uint64_t v48 = (void *)(*v43 + v47);
        void *v48 = 0;
        v48[1] = 0;
        v47 += 16;
      }
      while (v47 != 4096);
    }
  }
  else if ((int)v45 >= 257)
  {
    uint64_t v46 = 16 * v45 - 16;
    do
    {
      --v45;
      DgnPrimArray<unsigned int>::~DgnPrimArray(*v43 + v46);
      v46 -= 16;
    }
    while (v45 > 0x100);
  }
  *((_DWORD *)v7 + 23) = 256;
}

_DWORD *LexTreeNetScorer::endScorerSyncRecog(LexTreeNetScorer *this)
{
  uint64_t v2 = (PelScoreCache **)((char *)this + 151360);
  PelScoreCache::removeCacheClientOfFramesFromTimeOn(*((void *)this + 18958), *((_DWORD *)this + 55), (void *)1, this);
  PelScoreCache::removeCacheClient(v2[38], this);
  v2[38] = 0;
  *((_DWORD *)v2 + 38) = 0;
  *((_WORD *)this + 16) = 0;
  *((void *)this + 5) = 0;
  *((_DWORD *)this + 6) = 0;
  uint64_t v3 = *((unsigned int *)v2 + 22);
  if ((int)v3 >= 1)
  {
    unsigned int v4 = v2[10];
    unsigned int v5 = v2[2];
    unsigned int v6 = v2[6];
    uint64_t v7 = *(void *)*v2;
    unint64_t v8 = v3 + 1;
    do
    {
      unint64_t v9 = *((unsigned int *)v4 + (v8 - 2));
      *(_DWORD *)(v7
                + 24
                * *(unsigned int *)(*((void *)v6 + 2 * (v9 >> 24))
                                  + *((_DWORD *)v5 + (v9 >> 24)) * (v9 & 0xFFFFFF))) = 0;
      --v8;
    }
    while (v8 > 1);
  }
  *((_DWORD *)v2 + 22) = 0;
  *((_DWORD *)v2 + 10) = 0;
  uint64_t v10 = *((unsigned int *)v2 + 14);
  if ((int)v10 >= 1)
  {
    uint64_t v11 = 16 * v10 - 16;
    do
    {
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v2[6] + v11);
      v11 -= 16;
    }
    while (v11 != -16);
  }
  *((_DWORD *)v2 + 14) = 0;
  uint64_t v12 = *((unsigned int *)v2 + 18);
  if ((int)v12 >= 1)
  {
    uint64_t v13 = 16 * v12 - 16;
    do
    {
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v2[8] + v13);
      v13 -= 16;
    }
    while (v13 != -16);
  }
  *((_DWORD *)v2 + 18) = 0;
  int32x4_t result = ReturnListMgr::endRetListSyncRecog((_DWORD *)this + 37880);
  v2[15] = 0;
  return result;
}

uint64_t LexTreeNetScorer::getCurFrame(LexTreeNetScorer *this)
{
  return *((unsigned int *)this + 55);
}

BOOL LexTreeNetScorer::isPrefilteringListAvailable(LexTreeNetScorer *this, int a2)
{
  int v2 = *(_DWORD *)(*((void *)this + 18935) + 100) + a2;
  return *((_DWORD *)this + 62) + *((_DWORD *)this + 56) > v2 && *((_DWORD *)this + 55) > v2;
}

BOOL LexTreeNetScorer::needLookaheadToScoreFrame(LexTreeNetScorer *this)
{
  return *(_DWORD *)(*((void *)this + 18935) + 64) != -1
      && *((unsigned char *)this + 151640)
      && *((__int16 *)this + 126) != -1;
}

uint64_t LexTreeNetScorer::scoreFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = a1 + 151480;
  (*(void (**)(void, uint64_t, void, uint64_t, uint64_t, void))(**(void **)(a1 + 151648) + 56))(*(void *)(a1 + 151648), a2, 0, a3, a1 + 151672, 0);
  LexTreeNetScorer::initTreeThresholds((LexTreeNetScorer *)a1, (unsigned int *)(a1 + 151848), (unint64_t *)(a1 + 151856));
  LexTreeNetScorer::initLookaheadThresholds(a1, v7, a4);
  LexTreeNetScorer::initSeqsAndStats((int32x2_t *)a1);
  if (*(_DWORD *)(*(void *)v6 + 80) == 1) {
    LexTreeNetScorer::updateTree_Skip((LexTreeNetScorer *)a1);
  }
  else {
    LexTreeNetScorer::updateTree_NoSkip((LexTreeNetScorer *)a1);
  }
  (*(void (**)(void, void, uint64_t))(**(void **)(v6 + 168) + 64))(*(void *)(v6 + 168), *(unsigned int *)(a1 + 220), a1 + 151672);
  uint64_t result = PelScoreCache::removeCacheClientOfFrame(*(void *)(v6 + 184), *(_DWORD *)(a1 + 220), (void *)a1);
  ++*(_DWORD *)(a1 + 220);
  return result;
}

uint64_t LexTreeNetScorer::initTreeThresholds(LexTreeNetScorer *this, unsigned int *a2, unint64_t *a3)
{
  unsigned int v5 = (unsigned int *)((char *)this + 151336);
  uint64_t v6 = *((void *)this + 18935);
  int v7 = *(_DWORD *)(v6 + 132);
  uint64_t v8 = *((unsigned __int16 *)this + 126);
  if (v8 == 0xFFFF) {
    uint64_t v8 = 0;
  }
  else {
    v7 += *(_DWORD *)(v6 + 136);
  }
  unsigned int v9 = *a2;
  if (*a2 <= *v5) {
    unsigned int v9 = *v5;
  }
  *a2 = v9;
  *a3 += *v5;
  *unsigned int v5 = 0;
  *((_DWORD *)this + 59) = 0;
  uint64_t result = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 18958), v8);
  int v11 = *((_DWORD *)this + 59) + result;
  *((_DWORD *)this + 58) = v7;
  *((_DWORD *)this + 59) = v11;
  return result;
}

uint64_t LexTreeNetScorer::initLookaheadThresholds(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(result + 151480);
  if (*(_DWORD *)(v3 + 64) == -1 || !*(unsigned char *)(result + 151640) || *(__int16 *)(result + 252) == -1)
  {
    if (*(_DWORD *)(result + 151512))
    {
      int v9 = 0;
      uint64_t v10 = *(void *)(result + 151504);
      do
        *(_DWORD *)(v10 + 4 * (unsigned __int16)v9++) = *(_DWORD *)(result + 232);
      while (*(_DWORD *)(result + 151512) > (unsigned __int16)v9);
    }
    *(_DWORD *)(result + 216) = *(_DWORD *)(result + 232);
  }
  else
  {
    *(_DWORD *)(result + 216) = 0;
    if (*(_DWORD *)(result + 151512))
    {
      unsigned __int16 v4 = 0;
      uint64_t v5 = *a3;
      do
      {
        if (v4)
        {
          if (*(unsigned __int16 *)(**(void **)(result + 151656) + 56) == v4)
          {
            *(_DWORD *)(*(void *)(result + 151504) + 4 * v4) = *(_DWORD *)(result + 232);
          }
          else
          {
            int v6 = *(_DWORD *)(v3 + 64);
            if (v6 == -1) {
              int v7 = 5000;
            }
            else {
              int v7 = v6 - *(__int16 *)(v5 + 2 * v4);
            }
            if (v7 <= -5000) {
              int v7 = -5000;
            }
            *(_DWORD *)(*(void *)(result + 151504) + 4 * v4) = v7;
            if (v7 > *(_DWORD *)(result + 216)) {
              *(_DWORD *)(result + 216) = v7;
            }
          }
        }
        else
        {
          **(_DWORD **)(result + 151504) = *(_DWORD *)(result + 232);
        }
        ++v4;
      }
      while (*(_DWORD *)(result + 151512) > v4);
      int v8 = *(_DWORD *)(result + 216);
    }
    else
    {
      int v8 = 0;
    }
    int v11 = *(_DWORD *)(result + 232);
    if (v8 > v11) {
      *(_DWORD *)(result + 216) = v11;
    }
  }
  return result;
}

int32x2_t LexTreeNetScorer::initSeqsAndStats(int32x2_t *this)
{
  int32x2_t v1 = this[18935];
  int v2 = *(_DWORD *)(*(void *)&v1 + 72);
  if (v2 == -1) {
    int v2 = 5000;
  }
  if (this[32].i32[1] < v2) {
    int v2 = this[32].i32[1];
  }
  __int32 v3 = this[28].i32[0];
  __int32 v4 = this[27].i32[1] - v3;
  this[30].i32[0] = v2;
  __int32 v5 = *(_DWORD *)(*(void *)&v1 + 76);
  if (v2 > v5) {
    __int32 v5 = v2;
  }
  this[30].i32[0] = v5;
  this[30].i32[1] = v4;
  __int32 v6 = this[31].i32[0];
  this[31].i32[0] = (unsigned __int16)(v4 - v6);
  this[28].i32[0] = v6 + v3;
  this[28].i32[1] = v6;
  this[31].i16[2] = -1;
  int32x2_t result = vdup_n_s32(0x4E20u);
  this[32] = result;
  return result;
}

uint64_t LexTreeNetScorer::updateTree_Skip(LexTreeNetScorer *this)
{
  int v2 = (PelScoreCache **)((char *)this + 151344);
  int v67 = *((_DWORD *)this + 58);
  int v3 = *((_DWORD *)this + 60);
  int v62 = *((_DWORD *)this + 59);
  int v63 = *((_DWORD *)this + 51);
  if (v3 <= *((_DWORD *)this + 54)) {
    LexTreeNetScorer::seedSuccessors((unint64_t)this, *((_DWORD *)this + 37838), 0, 0, *(unsigned __int16 *)(**((void **)this + 18957) + 56), v3, *((_DWORD *)this + 61));
  }
  int v4 = *((_DWORD *)v2 + 26);
  if (!v4)
  {
    unsigned __int16 v65 = -1;
    int v5 = 20000;
    goto LABEL_52;
  }
  uint64_t v58 = (char *)(v2 + 15);
  uint64_t v59 = (char *)(v2 + 14);
  unsigned __int16 v65 = -1;
  int v66 = 20000;
  int v5 = 20000;
  uint64_t v64 = v2;
  do
  {
    unsigned int v6 = v4 - 1;
    unint64_t v7 = *((unsigned int *)v2[12] + v6);
    *((_DWORD *)v2 + 26) = v6;
    uint64_t v8 = 16 * (v7 >> 24);
    int v9 = (unsigned int *)(*(void *)((char *)v2[8] + v8)
                        + *((_DWORD *)v2[4] + (v7 >> 24)) * (v7 & 0xFFFFFF));
    unsigned int v10 = *((unsigned __int8 *)v9 + 19);
    if (*((unsigned __int8 *)v9 + 18) + 1 == v10)
    {
      if (*((_WORD *)v9 + 7))
      {
        int v11 = (char *)v9 + 10 * *((unsigned __int8 *)v9 + 19);
        int v12 = *((__int16 *)v11 + 13);
        int v13 = *((unsigned __int16 *)v11 + 11);
        int v14 = *((unsigned __int16 *)v11 + 6) + *((__int16 *)v11 + 8);
        int v15 = v14 >= v12 ? *((__int16 *)v11 + 13) : *((unsigned __int16 *)v11 + 6) + *((__int16 *)v11 + 8);
        if (v15 + v13 <= *((_DWORD *)this + 54))
        {
          uint64_t v16 = v11 + 20;
          if (v14 >= v12) {
            uint64_t v17 = 0;
          }
          else {
            uint64_t v17 = -1;
          }
          LexTreeNetScorer::seedSuccessors((unint64_t)this, v9[1], *((unsigned __int16 *)v9 + 5), *((unsigned __int16 *)v9 + 6), *(unsigned __int16 *)(*(void *)v2[2] + 24 * v9[1] + 16), v15 + v13, *(_WORD *)&v16[10 * v17 + 8]);
          int v9 = (unsigned int *)(*(void *)((char *)v2[8] + v8)
                              + *((_DWORD *)v2[4] + (v7 >> 24)) * (v7 & 0xFFFFFF));
        }
      }
    }
    else
    {
      ++v10;
    }
    int v18 = *((unsigned __int8 *)v9 + 16);
    int v19 = *((unsigned __int16 *)v9 + 4);
    v2[68] = (PelScoreCache *)((char *)v2[68] + 1);
    v2[69] = (PelScoreCache *)((char *)v2[69] + v10);
    if (!v10) {
      goto LABEL_47;
    }
    int v60 = v7;
    uint64_t v61 = v9;
    int v20 = 0;
    int v21 = v19 + (v10 - 1) * v18;
    uint64_t v22 = (_WORD *)v9 + 5 * v10 + 14;
    int v23 = -1;
    do
    {
      int v24 = (__int16)*(v22 - 6);
      int v25 = (unsigned __int16)*(v22 - 8);
      int v26 = v25 + v24;
      if (*((unsigned char *)this + 32))
      {
        if (v10 <= 1) {
          goto LABEL_26;
        }
      }
      else if (v10 < 3)
      {
LABEL_26:
        uint64_t v30 = -1;
        goto LABEL_27;
      }
      int v27 = (unsigned __int16)*(v22 - 13) + (__int16)*(v22 - 11);
      int v28 = v27 + v25;
      BOOL v29 = v27 < v24;
      if (v27 < v24) {
        int v26 = v28;
      }
      uint64_t v30 = -2;
      if (!v29) {
        uint64_t v30 = -1;
      }
LABEL_27:
      int v31 = (unsigned __int16)*(v22 - 2) + (__int16)*(v22 - 1);
      if (v31 >= v26) {
        int v32 = v26;
      }
      else {
        int v32 = (unsigned __int16)*(v22 - 2) + (__int16)*(v22 - 1);
      }
      if (v32 <= v67)
      {
        if (v31 <= v26) {
          uint64_t v33 = 0;
        }
        else {
          uint64_t v33 = v30;
        }
        unsigned int v34 = (unsigned __int16)*(v22 - 4);
        int ScoreAllowBackoff_updateNodeInSequence = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(v64[40], (unsigned __int16)*(v22 - 4), v32 - v62, v63);
        __int16 v36 = v22[5 * v33] - *((_WORD *)this + 114);
        *(v22 - 1) = ScoreAllowBackoff_updateNodeInSequence;
        *uint64_t v22 = v36;
        ++*((_DWORD *)this + (ScoreAllowBackoff_updateNodeInSequence + 5000) + 66);
        if (ScoreAllowBackoff_updateNodeInSequence < v66 || ScoreAllowBackoff_updateNodeInSequence == v66 && v34 < v65)
        {
          unsigned __int16 v65 = v34;
          int v66 = ScoreAllowBackoff_updateNodeInSequence;
        }
        if (ScoreAllowBackoff_updateNodeInSequence + v21 < v5) {
          int v5 = ScoreAllowBackoff_updateNodeInSequence + v21;
        }
        v20 += v10 & v23;
        int v23 = 0;
      }
      else
      {
        *(v22 - 1) = 20000;
      }
      v21 -= v18;
      v22 -= 5;
      --v10;
    }
    while (v10);
    if (!v20)
    {
      int v2 = v64;
      int v9 = v61;
LABEL_47:
      uint64_t v41 = *(void *)v2[2];
      uint64_t v42 = 24 * *v9;
      unint64_t v43 = *(unsigned int *)(v41 + v42);
      *(_DWORD *)(v41 + v42) = 0;
      int v37 = v43 & 0xFFFFFF;
      uint64_t v40 = (uint64_t)v2[10] + ((v43 >> 20) & 0xFF0);
      unint64_t v39 = (char *)(v40 + 8);
      uint64_t v38 = *(unsigned int *)(v40 + 8);
      if (v38 != *(_DWORD *)(v40 + 12)) {
        goto LABEL_49;
      }
LABEL_48:
      DgnPrimArray<unsigned int>::reallocElts(v40, 1, 1);
      uint64_t v38 = *(unsigned int *)v39;
      goto LABEL_49;
    }
    int v37 = v60;
    *((unsigned char *)v61 + 19) = v20;
    int v2 = v64;
    uint64_t v38 = *((unsigned int *)v64 + 30);
    unint64_t v39 = v58;
    uint64_t v40 = (uint64_t)v59;
    if (v38 == *((_DWORD *)v64 + 31)) {
      goto LABEL_48;
    }
LABEL_49:
    *(_DWORD *)(*(void *)v40 + 4 * v38) = v37;
    ++*(_DWORD *)v39;
    int v4 = *((_DWORD *)v2 + 26);
  }
  while (v4);
LABEL_52:
  *((_WORD *)this + 126) = v65;
  *((_DWORD *)this + 64) = v5;
  unsigned int v44 = *((_DWORD *)v2 + 30);
  unsigned int v45 = *((_DWORD *)v2 + 27);
  int v46 = v44;
  if (v44 > v45)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)(v2 + 12), v44 - v45, 0);
    int v46 = *((_DWORD *)v2 + 30);
  }
  *((_DWORD *)v2 + 26) = v44;
  if (v46 >= 1)
  {
    uint64_t v47 = v2[14];
    uint64_t v48 = v2[12];
    uint64_t v49 = v46 - 1;
    do
    {
      *(_DWORD *)uint64_t v48 = *((_DWORD *)v47 + v49);
      uint64_t v48 = (PelScoreCache *)((char *)v48 + 4);
      --v49;
    }
    while (v49 != -1);
  }
  *((_DWORD *)v2 + 30) = 0;
  int v50 = *((_DWORD *)this + 60);
  int v51 = *((_DWORD *)v2 + 1);
  if (v50 < v51)
  {
    *(_DWORD *)int v2 = *((_DWORD *)this + 61) - *((_DWORD *)this + 57);
    *((_DWORD *)v2 + 1) = v50;
    int v51 = v50;
  }
  if (v51 <= 19999)
  {
    int v52 = *((_DWORD *)v2 + 1) + PelScoreCache::getScoreNoBackoff(v2[40], 0) - *((_DWORD *)this + 59);
    int v53 = *((_DWORD *)this + 64);
    int v54 = v52 - v53;
    int v55 = 20000;
    if (v52 >= 20000) {
      int v54 = 20000;
    }
    if (v53 <= 19999) {
      int v56 = v54;
    }
    else {
      int v56 = v52;
    }
    if (v56 <= *((_DWORD *)this + 58))
    {
      if (v52 < v53)
      {
        *((_DWORD *)this + 64) = v52;
        *((_WORD *)this + 126) = -1;
        if (v52 >= 20000) {
          int v54 = 20000;
        }
        else {
          int v54 = 0;
        }
        int v53 = v52;
      }
      if (v53 <= 19999) {
        int v55 = v54;
      }
      else {
        int v55 = v52;
      }
    }
    *((_DWORD *)v2 + 1) = v55;
  }

  return LexTreeNetScorer::updateTrueBestPel((uint64_t)this);
}

uint64_t LexTreeNetScorer::updateTree_NoSkip(LexTreeNetScorer *this)
{
  int32x2_t v1 = this;
  int v2 = (PelScoreCache **)((char *)this + 151344);
  int v3 = *((_DWORD *)this + 58);
  int v54 = *((_DWORD *)this + 59);
  int v55 = *((_DWORD *)this + 51);
  int v4 = *((_DWORD *)this + 60);
  if (v4 <= *((_DWORD *)this + 54)) {
    LexTreeNetScorer::seedSuccessors((unint64_t)this, *((_DWORD *)this + 37838), 0, 0, *(unsigned __int16 *)(**((void **)this + 18957) + 56), v4, *((_DWORD *)this + 61));
  }
  int v5 = *((_DWORD *)v2 + 26);
  if (v5)
  {
    int v50 = (char *)(v2 + 15);
    int v51 = (char *)(v2 + 14);
    unsigned __int16 v57 = -1;
    int v58 = 20000;
    int v59 = 20000;
    int v56 = v2;
    while (1)
    {
      unsigned int v6 = v5 - 1;
      unint64_t v7 = *((unsigned int *)v2[12] + v6);
      *((_DWORD *)v2 + 26) = v6;
      int v8 = v7 & 0xFFFFFF;
      uint64_t v9 = 16 * (v7 >> 24);
      uint64_t v10 = *(void *)((char *)v2[8] + v9) + *((_DWORD *)v2[4] + (v7 >> 24)) * (v7 & 0xFFFFFF);
      unsigned int v11 = *(unsigned __int8 *)(v10 + 19);
      if (*(unsigned __int8 *)(v10 + 18) + 1 == v11)
      {
        if (*(_WORD *)(v10 + 14))
        {
          int v12 = *(unsigned __int16 *)(v10 + 10 * *(unsigned __int8 *)(v10 + 19) + 22)
              + *(__int16 *)(v10 + 10 * *(unsigned __int8 *)(v10 + 19) + 26);
          if (v12 <= *((_DWORD *)v1 + 54))
          {
            LexTreeNetScorer::seedSuccessors((unint64_t)v1, *(_DWORD *)(v10 + 4), *(unsigned __int16 *)(v10 + 10), *(unsigned __int16 *)(v10 + 12), *(unsigned __int16 *)(*(void *)v2[2] + 24 * *(unsigned int *)(v10 + 4) + 16), v12, *(_WORD *)(v10 + 10 * *(unsigned __int8 *)(v10 + 19) + 28));
            int v13 = (unsigned int *)(*(void *)((char *)v2[8] + v9) + (*((_DWORD *)v2[4] + (v7 >> 24)) * v8));
            goto LABEL_11;
          }
        }
      }
      else
      {
        ++v11;
      }
      int v13 = (unsigned int *)(*(void *)((char *)v2[8] + v9) + (*((_DWORD *)v2[4] + (v7 >> 24)) * v8));
LABEL_11:
      int v14 = *((unsigned __int8 *)v13 + 16);
      int v15 = *((unsigned __int16 *)v13 + 4);
      v2[68] = (PelScoreCache *)((char *)v2[68] + 1);
      v2[69] = (PelScoreCache *)((char *)v2[69] + v11);
      if (v11)
      {
        int v52 = v7;
        int v53 = v13;
        int v16 = 0;
        int v17 = v15 + (v11 - 1) * v14;
        int v18 = (_WORD *)v13 + 5 * v11 + 14;
        int v19 = -1;
        do
        {
          int v20 = (unsigned __int16)*(v18 - 8) + (__int16)*(v18 - 6);
          int v21 = (unsigned __int16)*(v18 - 2) + (__int16)*(v18 - 1);
          if (v21 >= v20) {
            int v22 = (unsigned __int16)*(v18 - 8) + (__int16)*(v18 - 6);
          }
          else {
            int v22 = (unsigned __int16)*(v18 - 2) + (__int16)*(v18 - 1);
          }
          if (v22 <= v3)
          {
            int v23 = v1;
            if (v21 <= v20) {
              uint64_t v24 = 0;
            }
            else {
              uint64_t v24 = -1;
            }
            unsigned int v25 = (unsigned __int16)*(v18 - 4);
            int ScoreAllowBackoff_updateNodeInSequence = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(v56[40], (unsigned __int16)*(v18 - 4), v22 - v54, v55);
            uint64_t v27 = 10 * v24;
            int32x2_t v1 = v23;
            LOWORD(v27) = *(_WORD *)((char *)v18 + v27) - *((_WORD *)v23 + 114);
            *(v18 - 1) = ScoreAllowBackoff_updateNodeInSequence;
            *int v18 = v27;
            ++*((_DWORD *)v23 + (ScoreAllowBackoff_updateNodeInSequence + 5000) + 66);
            if (ScoreAllowBackoff_updateNodeInSequence < v58
              || ScoreAllowBackoff_updateNodeInSequence == v58 && v25 < v57)
            {
              unsigned __int16 v57 = v25;
              int v58 = ScoreAllowBackoff_updateNodeInSequence;
            }
            int v28 = v59;
            if (ScoreAllowBackoff_updateNodeInSequence + v17 < v59) {
              int v28 = ScoreAllowBackoff_updateNodeInSequence + v17;
            }
            int v59 = v28;
            v16 += v11 & v19;
            int v19 = 0;
          }
          else
          {
            *(v18 - 1) = 20000;
          }
          v17 -= v14;
          v18 -= 5;
          --v11;
        }
        while (v11);
        if (v16)
        {
          int v29 = v52;
          *((unsigned char *)v53 + 19) = v16;
          int v2 = v56;
          uint64_t v30 = *((unsigned int *)v56 + 30);
          int v31 = v50;
          uint64_t v32 = (uint64_t)v51;
          if (v30 != *((_DWORD *)v56 + 31)) {
            goto LABEL_35;
          }
LABEL_34:
          DgnPrimArray<unsigned int>::reallocElts(v32, 1, 1);
          uint64_t v30 = *(unsigned int *)v31;
          goto LABEL_35;
        }
        int v2 = v56;
        int v13 = v53;
      }
      uint64_t v33 = *(void *)v2[2];
      uint64_t v34 = 24 * *v13;
      unint64_t v35 = *(unsigned int *)(v33 + v34);
      *(_DWORD *)(v33 + v34) = 0;
      int v29 = v35 & 0xFFFFFF;
      uint64_t v32 = (uint64_t)v2[10] + ((v35 >> 20) & 0xFF0);
      int v31 = (char *)(v32 + 8);
      uint64_t v30 = *(unsigned int *)(v32 + 8);
      if (v30 == *(_DWORD *)(v32 + 12)) {
        goto LABEL_34;
      }
LABEL_35:
      *(_DWORD *)(*(void *)v32 + 4 * v30) = v29;
      ++*(_DWORD *)v31;
      int v5 = *((_DWORD *)v2 + 26);
      if (!v5) {
        goto LABEL_38;
      }
    }
  }
  unsigned __int16 v57 = -1;
  int v59 = 20000;
LABEL_38:
  *((_WORD *)v1 + 126) = v57;
  *((_DWORD *)v1 + 64) = v59;
  unsigned int v36 = *((_DWORD *)v2 + 30);
  unsigned int v37 = *((_DWORD *)v2 + 27);
  int v38 = v36;
  if (v36 > v37)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)(v2 + 12), v36 - v37, 0);
    int v38 = *((_DWORD *)v2 + 30);
  }
  *((_DWORD *)v2 + 26) = v36;
  if (v38 >= 1)
  {
    unint64_t v39 = v2[14];
    uint64_t v40 = v2[12];
    uint64_t v41 = v38 - 1;
    do
    {
      *(_DWORD *)uint64_t v40 = *((_DWORD *)v39 + v41);
      uint64_t v40 = (PelScoreCache *)((char *)v40 + 4);
      --v41;
    }
    while (v41 != -1);
  }
  *((_DWORD *)v2 + 30) = 0;
  int v42 = *((_DWORD *)v1 + 60);
  int v43 = *((_DWORD *)v2 + 1);
  if (v42 < v43)
  {
    *(_DWORD *)int v2 = *((_DWORD *)v1 + 61) - *((_DWORD *)v1 + 57);
    *((_DWORD *)v2 + 1) = v42;
    int v43 = v42;
  }
  if (v43 <= 19999)
  {
    int v44 = *((_DWORD *)v2 + 1) + PelScoreCache::getScoreNoBackoff(v2[40], 0) - *((_DWORD *)v1 + 59);
    int v45 = *((_DWORD *)v1 + 64);
    int v46 = v44 - v45;
    int v47 = 20000;
    if (v44 >= 20000) {
      int v46 = 20000;
    }
    if (v45 <= 19999) {
      int v48 = v46;
    }
    else {
      int v48 = v44;
    }
    if (v48 <= *((_DWORD *)v1 + 58))
    {
      if (v44 < v45)
      {
        *((_DWORD *)v1 + 64) = v44;
        *((_WORD *)v1 + 126) = -1;
        if (v44 >= 20000) {
          int v46 = 20000;
        }
        else {
          int v46 = 0;
        }
        int v45 = v44;
      }
      if (v45 <= 19999) {
        int v47 = v46;
      }
      else {
        int v47 = v44;
      }
    }
    *((_DWORD *)v2 + 1) = v47;
  }

  return LexTreeNetScorer::updateTrueBestPel((uint64_t)v1);
}

uint64_t LexTreeNetScorer::getList(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  unsigned int v6 = (_DWORD *)(a1 + 151904);
  unsigned int v11 = 0;
  uint64_t result = ReturnListMgr::finishList(a1 + 151520, a2, a3, &v11);
  int v8 = v6[1] + *(_DWORD *)(a3 + 8);
  ++*v6;
  v6[1] = v8;
  unsigned int v9 = v6[3] + a4;
  v6[2] += v11;
  v6[3] = v9;
  unsigned int v10 = v6[4];
  if (v10 <= a4) {
    unsigned int v10 = a4;
  }
  v6[4] = v10;
  return result;
}

uint64_t LexTreeNetScorer::seedTreeAndEndWords(uint64_t result, uint64_t a2, int a3, signed int a4)
{
  unsigned int v6 = (_DWORD *)result;
  uint64_t v7 = *(void *)(result + 151480);
  int v8 = *(unsigned __int8 *)(v7 + 128);
  if (!*(unsigned char *)(v7 + 128) && *(_DWORD *)(result + 260) > a3) {
    *(_DWORD *)(result + 260) = a3;
  }
  int v9 = *(unsigned __int16 *)(a2 + 10);
  unsigned int v10 = *(_DWORD *)(a2 + 4);
  unsigned int v21 = 0;
  uint64_t v11 = **(void **)(result + 151360) + 24 * v10;
  __int16 v12 = *(_WORD *)(v11 + 20);
  unsigned int v13 = *(_DWORD *)(v11 + 4);
  if ((v12 & 0x4000) != 0)
  {
    unsigned int v21 = v13;
    unsigned int v15 = 1;
    int v16 = &v21;
  }
  else
  {
    if (v13 < 0x400000) {
      return result;
    }
    uint64_t v14 = *(void *)&v13 & 0x3FFFFFLL;
    unsigned int v15 = v13 >> 22;
    int v16 = (unsigned int *)(**(void **)(result + 151368) + 4 * v14);
  }
  uint64_t v17 = v15;
  do
  {
    int v18 = (*v16 >> 22) - v9;
    if (v18 >= v6[53]) {
      int v18 = v6[53];
    }
    int v19 = v18 + a3;
    if (v8 && v19 < v6[65]) {
      v6[65] = v19;
    }
    if (v19 > v6[52]) {
      break;
    }
    int v20 = *v16++;
    uint64_t result = ReturnListMgr::addToReturnList((ReturnListMgr *)(v6 + 37880), a4, v6[55], v20 & 0x3FFFFF, v19);
    --v17;
  }
  while (v17);
  return result;
}

unint64_t LexTreeNetScorer::seedSuccessors(unint64_t this, unsigned int a2, int a3, unsigned int a4, int a5, int a6, __int16 a7)
{
  uint64_t v8 = this;
  unint64_t v9 = this + 151360;
  uint64_t v10 = **(void **)(this + 151360);
  unsigned int v11 = a2;
  int v12 = *(unsigned __int16 *)(v10 + 24 * a2 + 18);
  unsigned int v13 = *(_DWORD *)(this + 151452);
  unsigned int v14 = *(_DWORD *)(this + 151448) + v12;
  if (v14 > v13)
  {
    int v15 = a6;
    this = DgnPrimArray<unsigned int>::reallocElts(this + 151440, v14 - v13, 1);
    a6 = v15;
    uint64_t v10 = **(void **)v9;
    int v12 = *(unsigned __int16 *)(v10 + 24 * v11 + 18);
  }
  *(void *)(v9 + 504) += v12;
  if (v12)
  {
    int v89 = a6;
    int v101 = a3;
    unsigned int v100 = v11;
    do
    {
      int v16 = v12 - 1;
      uint64_t v17 = (*(_DWORD *)(v10 + 24 * v11 + 8) + v12 - 1);
      unint64_t v18 = *(unsigned int *)(v10 + 24 * v17);
      if (v18)
      {
        if (!*(unsigned char *)(v8 + 33)
          || *(_DWORD *)(*(void *)(v8 + 16) + 4 * ((*(_WORD *)(v10 + 24 * v17 + 20) & 0x1FFFu) - a3))
           + a6 <= *(_DWORD *)(*(void *)(v9 + 144) + 4 * *(unsigned __int16 *)(v10 + 24 * v17 + 16)))
        {
          uint64_t v19 = *(void *)(*(void *)(v9 + 48) + 16 * (v18 >> 24))
              + *(_DWORD *)(*(void *)(v9 + 16) + 4 * (v18 >> 24)) * (v18 & 0xFFFFFF);
          *(_WORD *)(v19 + 26) = a6;
          *(_WORD *)(v19 + 28) = a7;
        }
      }
      else
      {
        uint64_t v20 = v10 + 24 * v17;
        __int16 v21 = *(_WORD *)(v20 + 20);
        __int16 v22 = v21 & 0x1FFF;
        unsigned int v23 = (v21 & 0x1FFF) - a3;
        uint64_t v24 = *(unsigned __int16 *)(v20 + 16);
        if (*(_DWORD *)(*(void *)(v8 + 16) + 4 * v23) + a6 <= *(_DWORD *)(*(void *)(v9 + 144) + 4 * v24))
        {
          int v25 = v21;
          uint64_t v26 = *(void *)v8;
          unsigned int v27 = *(_DWORD *)(*(void *)v8 + 4 * v24);
          int v28 = 1;
          if (v25 < 0)
          {
            int v31 = v17;
            LODWORD(v29) = v17;
          }
          else
          {
            uint64_t v29 = v17;
            do
            {
              LODWORD(v29) = *(_DWORD *)(v10 + 24 * v29 + 8);
              ++v28;
              uint64_t v30 = v10 + 24 * v29;
              v27 += *(_DWORD *)(v26 + 4 * *(unsigned __int16 *)(v30 + 16));
            }
            while ((*(__int16 *)(v30 + 20) & 0x80000000) == 0);
            int v31 = v29;
          }
          ++*(void *)(v9 + 512);
          *(void *)(v9 + 520) += v27;
          unsigned int v32 = *(_DWORD *)(v8 + 56);
          if (v32 <= a4)
          {
            int v35 = *(_DWORD *)(*(void *)(v9 + 120) + 44);
            int v36 = v35 * (a4 + 1 - v32);
            if (v36 >= 20000) {
              int v34 = 20000;
            }
            else {
              int v34 = v36;
            }
            unsigned int v37 = v35 * v28;
            if (v34 + v35 * v28 > 20000) {
              unsigned int v37 = 20000 - v34;
            }
            int v33 = v37 / v27;
          }
          else
          {
            LOBYTE(v33) = 0;
            LOWORD(v34) = 0;
          }
          uint64_t v38 = v27 + 1;
          int v39 = *(_DWORD *)(*(void *)(v9 + 16) + 4 * v38);
          __int16 v40 = *(_WORD *)(v10 + 24 * v29 + 18);
          uint64_t v41 = *(void *)(v9 + 64);
          uint64_t v42 = v41 + 16 * v38;
          int v45 = *(_DWORD *)(v42 + 8);
          int v43 = (unsigned int *)(v42 + 8);
          int v44 = v45;
          uint64_t v46 = 16 * v38;
          if (v45)
          {
            unsigned int v47 = v44 - 1;
            int v48 = *(_DWORD *)(*(void *)(v41 + 16 * v38) + 4 * v47);
            unsigned int *v43 = v47;
          }
          else
          {
            uint64_t v99 = 16 * v38;
            uint64_t v49 = *(void *)(v9 + 48) + 16 * v38;
            int v50 = *(_DWORD *)(v49 + 8);
            unsigned int v51 = *(_DWORD *)(v49 + 12);
            int v52 = (unsigned int *)(v49 + 8);
            unsigned int v53 = v50 + v39;
            if (v53 > v51)
            {
              __int16 v94 = v34;
              int v95 = v31;
              int v97 = v12;
              __int16 v96 = v22;
              __int16 v92 = *(_WORD *)(v10 + 24 * v29 + 18);
              char v93 = v33;
              int v91 = *(_DWORD *)(*(void *)(v9 + 16) + 4 * v38);
              uint64_t v90 = v52;
              DgnPrimArray<char>::reallocElts(*(void *)(v9 + 48) + 16 * v38, v53 - v51, 1);
              int v52 = v90;
              int v39 = v91;
              __int16 v40 = v92;
              LOBYTE(v33) = v93;
              LOWORD(v34) = v94;
              int v31 = v95;
              __int16 v22 = v96;
              uint64_t v38 = v27 + 1;
              int v12 = v97;
              a6 = v89;
              unsigned int v53 = *v90 + v91;
              uint64_t v10 = **(void **)v9;
              uint64_t v26 = *(void *)v8;
            }
            unsigned int *v52 = v53;
            uint64_t v54 = *(void *)(v9 + 32);
            int v48 = *(_DWORD *)(v54 + 4 * v38);
            *(_DWORD *)(v54 + 4 * v38) = v48 + 1;
            uint64_t v46 = v99;
          }
          uint64_t v55 = *(void *)(*(void *)(v9 + 48) + v46) + (v48 * v39);
          int v56 = (*(unsigned __int16 *)(v10 + 24 * v29 + 20) >> 13) & 1;
          *(_DWORD *)uint64_t v55 = v17;
          *(_DWORD *)(v55 + 4) = v31;
          *(_WORD *)(v55 + 8) = v34;
          *(_WORD *)(v55 + 10) = v22;
          *(_WORD *)(v55 + 12) = v28 + a4;
          *(_WORD *)(v55 + 14) = v40;
          *(unsigned char *)(v55 + 16) = v33;
          *(unsigned char *)(v55 + 17) = v56;
          *(unsigned char *)(v55 + 18) = v38 - 2;
          *(void *)(v55 + 20) = 0x4E2000000000FFFFLL;
          *(unsigned char *)(v55 + 19) = -1;
          *(_WORD *)(v55 + 28) = -1;
          uint64_t v57 = v10 + 24 * v17;
          this = *(unsigned __int16 *)(v57 + 16);
          LODWORD(v58) = *(_DWORD *)(v26 + 4 * this);
          if (v23)
          {
            unsigned int v59 = v23 / v58;
            if (v58 < 2)
            {
              __int16 v60 = 0;
            }
            else
            {
              v23 -= v23 / v58 * (v58 - 1);
              __int16 v60 = v59;
            }
          }
          else
          {
            __int16 v60 = 0;
          }
          a3 = v101;
          unsigned int v11 = v100;
          unint64_t v61 = v55 + 30;
          int v62 = *(unsigned __int8 *)(v9 + 128);
          if (v58 <= 1) {
            uint64_t v58 = 1;
          }
          else {
            uint64_t v58 = v58;
          }
          if (*(unsigned char *)(v9 + 128))
          {
            int v63 = v16;
            int v64 = v12;
            LODWORD(this) = *(_DWORD *)(v10 + 24 * v17 + 12) & 0xFFFFFF;
            uint64_t v65 = **(void **)(v9 + 136);
            uint64_t v66 = *(void *)(v8 + 184);
            do
            {
              int v67 = (__int16 *)(v65 + 4 * this);
              __int16 v68 = *v67;
              uint64_t v69 = (_WORD *)(v66 + 4 * (unsigned __int16)v67[1]);
              __int16 v70 = v69[1];
              LOWORD(v69) = *v69;
              *(_WORD *)unint64_t v61 = v68;
              *(_WORD *)(v61 + 2) = v70 + v23;
              *(_WORD *)(v61 + 4) = (_WORD)v69;
              *(_DWORD *)(v61 + 6) = -45536;
              v61 += 10;
              this = (this + 1);
              LOWORD(v23) = v60;
              --v58;
            }
            while (v58);
            int v12 = v64;
            int v16 = v63;
          }
          else
          {
            LODWORD(this) = (this + *(_DWORD *)(v8 + 48) * a5) * *(_DWORD *)(v8 + 52);
            uint64_t v71 = *(void *)(v8 + 152);
            do
            {
              uint64_t v72 = (__int16 *)(v71 + 6 * this);
              __int16 v73 = *v72;
              __int16 v74 = v72[2] + v23;
              LOWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = v72[1];
              *(_WORD *)unint64_t v61 = v73;
              *(_WORD *)(v61 + 2) = v74;
              *(_WORD *)(v61 + 4) = (_WORD)v72;
              *(_DWORD *)(v61 + 6) = -45536;
              v61 += 10;
              this = (this + 1);
              LOWORD(v23) = v60;
              --v58;
            }
            while (v58);
          }
          while (v61 <= v55 + 20 + 10 * (int)v27)
          {
            unsigned int v75 = *(_DWORD *)(v10 + 24 * v17 + 8);
            uint64_t v76 = *(unsigned __int16 *)(v10 + 24 * v75 + 16);
            LODWORD(this) = *(_DWORD *)(v26 + 4 * v76);
            if (v62)
            {
              unsigned int v77 = *(_DWORD *)(v10 + 24 * v75 + 12) & 0xFFFFFF;
              uint64_t v78 = **(void **)(v9 + 136);
              uint64_t v79 = *(void *)(v8 + 184);
              if (this <= 1) {
                this = 1;
              }
              else {
                this = this;
              }
              do
              {
                uint64_t v80 = (_WORD *)(v78 + 4 * v77);
                HIDWORD(v81) = *(_DWORD *)(v79 + 4 * (unsigned __int16)v80[1]);
                LODWORD(v81) = HIDWORD(v81);
                *(_WORD *)unint64_t v61 = *v80;
                *(_DWORD *)(v61 + 2) = v81 >> 16;
                *(_DWORD *)(v61 + 6) = -45536;
                v61 += 10;
                ++v77;
                --this;
              }
              while (this);
            }
            else
            {
              unsigned int v82 = (v76 + *(_DWORD *)(v8 + 48) * *(unsigned __int16 *)(v10 + 24 * v17 + 16))
                  * *(_DWORD *)(v8 + 52);
              uint64_t v83 = *(void *)(v8 + 152);
              if (this <= 1) {
                this = 1;
              }
              else {
                this = this;
              }
              do
              {
                uint64_t v84 = (__int16 *)(v83 + 6 * v82);
                __int16 v85 = *v84;
                __int16 v86 = v84[2];
                LOWORD(v84) = v84[1];
                *(_WORD *)unint64_t v61 = v85;
                *(_WORD *)(v61 + 2) = v86;
                *(_WORD *)(v61 + 4) = (_WORD)v84;
                *(_DWORD *)(v61 + 6) = -45536;
                v61 += 10;
                ++v82;
                --this;
              }
              while (this);
            }
            LODWORD(v17) = v75;
          }
          int v87 = v48 | ((v27 + 1) << 24);
          *(_DWORD *)uint64_t v57 = v87;
          *(_DWORD *)(*(void *)(v9 + 80) + 4 * (*(_DWORD *)(v9 + 88))++) = v87;
          *(_WORD *)(v55 + 26) = a6;
          *(_WORD *)(v55 + 28) = a7;
          *(unsigned char *)(v55 + 19) = 0;
        }
      }
      BOOL v88 = v12 <= 1;
      int v12 = v16;
    }
    while (!v88);
  }
  return this;
}

uint64_t LexTreeNetScorer::updateTrueBestPel(uint64_t this)
{
  int32x2_t v1 = (_DWORD *)this;
  uint64_t v2 = this + 151336;
  uint64_t v3 = *(void *)(this + 151480);
  int v4 = *(_DWORD *)(v3 + 76);
  int v50 = *(_DWORD *)(v3 + 80);
  *(_DWORD *)(this + 1513DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = 20000;
  unsigned int v5 = *(_DWORD *)(this + 200);
  if (v5)
  {
    unsigned int v6 = 0;
    BOOL v7 = 0;
    int v8 = 0;
    unint64_t v9 = (_DWORD *)(this + 264);
    int v10 = -5000;
    uint64_t v11 = 37768;
    do
    {
      if (*v9)
      {
        this = v1[58];
        if (v10 - v1[64] > (int)this) {
          break;
        }
        v6 += *v9;
        *unint64_t v9 = 0;
        if (v6 < v5) {
          int v12 = v8;
        }
        else {
          int v12 = v10;
        }
        if (v7)
        {
          BOOL v7 = 1;
        }
        else
        {
          int v8 = v12;
          BOOL v7 = v6 >= v5;
        }
      }
      ++v10;
      ++v9;
      --v11;
    }
    while (v11);
    if (v7)
    {
      int v13 = v8 - v1[64];
      *(_DWORD *)(v2 + 4) = v13;
      if (v13 < v1[58]) {
        v1[58] = v13;
      }
    }
  }
  for (int i = *(_DWORD *)(v2 + 112); i; int i = *(_DWORD *)(v2 + 112))
  {
    unsigned int v15 = i - 1;
    unint64_t v16 = *(unsigned int *)(*(void *)(v2 + 104) + 4 * v15);
    *(_DWORD *)(v2 + 112) = v15;
    uint64_t v17 = *(_DWORD *)(*(void *)(v2 + 40) + 4 * (v16 >> 24)) * (v16 & 0xFFFFFF);
    uint64_t v18 = *(void *)(*(void *)(v2 + 72) + 16 * (v16 >> 24));
    uint64_t v19 = (unsigned int *)(v18 + v17);
    int v20 = *(unsigned __int8 *)(v18 + v17 + 19);
    if (!*(unsigned char *)(v18 + v17 + 19)) {
      goto LABEL_39;
    }
    unsigned int v21 = 0;
    int v22 = v1[64];
    int v23 = v1[58];
    uint64_t v24 = (__int16 *)(v18 + v17 + 10 * *(unsigned __int8 *)(v18 + v17 + 19) + 26);
    int v25 = -1;
    do
    {
      int v26 = *v24;
      int v27 = v26 - v22;
      if (v26 >= 20000) {
        int v27 = 20000;
      }
      if (v22 <= 19999) {
        int v26 = v27;
      }
      if (v26 <= v23)
      {
        if (v26 <= v4) {
          LOWORD(v26) = v4;
        }
        *uint64_t v24 = v26;
        unsigned int v28 = (unsigned __int16)v24[1];
        if (v1[62] > v28) {
          v1[62] = v28;
        }
        ++*(_DWORD *)v2;
        v21 += v25 & v20;
        int v25 = 0;
      }
      else
      {
        *uint64_t v24 = 20000;
      }
      v24 -= 5;
      --v20;
    }
    while (v20);
    if (v21)
    {
      *((unsigned char *)v19 + 19) = v21;
      *((_WORD *)v19 + 13) = 20000;
      uint64_t v29 = *(unsigned int *)(v2 + 128);
      if (v29 == *(_DWORD *)(v2 + 132))
      {
        this = DgnPrimArray<unsigned int>::reallocElts(v2 + 120, 1, 1);
        uint64_t v29 = *(unsigned int *)(v2 + 128);
      }
      *(_DWORD *)(*(void *)(v2 + 120) + 4 * v29) = v16;
      ++*(_DWORD *)(v2 + 128);
      if (*((unsigned char *)v19 + 17))
      {
        unsigned int v30 = *((unsigned __int8 *)v19 + 18);
        if (v21 == v30 + 1)
        {
          int v31 = (char *)v19 + 10 * v21;
          int v32 = *((__int16 *)v31 + 13);
          int v33 = *((unsigned __int16 *)v31 + 11);
          int v34 = v33 + v32;
          if (v50 == 1)
          {
            int v35 = *((unsigned __int16 *)v19 + 5 * *((unsigned __int8 *)v19 + 18) + 11)
                + *((__int16 *)v19 + 5 * *((unsigned __int8 *)v19 + 18) + 13);
            int v36 = v35 + v33;
            if (v35 >= v32) {
              unsigned int v30 = v21;
            }
            else {
              int v34 = v36;
            }
          }
          else
          {
            unsigned int v30 = v21;
          }
          this = LexTreeNetScorer::seedTreeAndEndWords((uint64_t)v1, (uint64_t)v19, v34, v1[56] + *((unsigned __int16 *)v19 + 5 * v30 + 14));
        }
      }
    }
    else
    {
LABEL_39:
      uint64_t v37 = **(void **)(v2 + 24);
      uint64_t v38 = 24 * *v19;
      unint64_t v39 = *(unsigned int *)(v37 + v38);
      *(_DWORD *)(v37 + v38) = 0;
      uint64_t v40 = *(void *)(v2 + 88) + ((v39 >> 20) & 0xFF0);
      uint64_t v42 = (_DWORD *)(v40 + 8);
      uint64_t v41 = *(unsigned int *)(v40 + 8);
      if (v41 == *(_DWORD *)(v40 + 12))
      {
        this = DgnPrimArray<unsigned int>::reallocElts(*(void *)(v2 + 88) + ((v39 >> 20) & 0xFF0), 1, 1);
        uint64_t v41 = *v42;
      }
      *(_DWORD *)(*(void *)v40 + 4 * v41) = v39 & 0xFFFFFF;
      ++*v42;
    }
  }
  unsigned int v43 = *(_DWORD *)(v2 + 128);
  unsigned int v44 = *(_DWORD *)(v2 + 116);
  int v45 = v43;
  if (v43 > v44)
  {
    this = DgnPrimArray<unsigned int>::reallocElts(v2 + 104, v43 - v44, 0);
    int v45 = *(_DWORD *)(v2 + 128);
  }
  *(_DWORD *)(v2 + 112) = v43;
  if (v45 >= 1)
  {
    uint64_t v46 = *(void *)(v2 + 120);
    unsigned int v47 = *(_DWORD **)(v2 + 104);
    uint64_t v48 = v45 - 1;
    do
      *v47++ = *(_DWORD *)(v46 + 4 * v48--);
    while (v48 != -1);
  }
  *(_DWORD *)(v2 + 128) = 0;
  int v49 = *(_DWORD *)(v2 + 12);
  if (v49 < v1[65]) {
    v1[65] = v49;
  }
  return this;
}

unint64_t DgnPrimStructArray<PelIdAndStayAndPassPen>::reallocElts(uint64_t a1, uint64_t a2, int a3)
{
  int v3 = a2;
  if (a3) {
    int v3 = minAddAllocWithExtra(a2, *(_DWORD *)(a1 + 12));
  }
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 12) + v3;
  int v8 = 0;
  unint64_t result = realloc_array(*(void **)a1, &v8, 6 * v6, 6 * v5, 6 * v5, 1);
  *(_DWORD *)(a1 + 12) = result / 6;
  *(void *)a1 = v8;
  return result;
}

void MrecInitModule_memchunk_mrecutil(void)
{
  if (!gParDiagnosticVirtualCalculationInterval)
  {
    v0 = MemChunkAlloc(0x38uLL, 0);
    uint64_t v10 = 0x3E8FFFFFFFFLL;
    int32x2_t v1 = (void *)IntGlobalParamBase::IntGlobalParamBase((uint64_t)v0, (uint64_t)"DiagnosticVirtualCalculationInterval", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, 16, &v10, (uint64_t)SetShadowDiagnosticVirtualCalculationInterval);
    *int32x2_t v1 = &unk_26C4E05C8;
    gParDiagnosticVirtualCalculationInterval = (uint64_t)v1;
    gShadowDiagnosticVirtualCalculationInterval = 16;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticVirtualCalculationInterval);
  }
  if (!gParShowActualMemoryAndChunkOverheadStats)
  {
    uint64_t v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "ShowActualMemoryAndChunkOverheadStats", &byte_2140B33BB, &byte_2140B33BB, 0, SetShadowShowActualMemoryAndChunkOverheadStats, 0);
    void *v3 = &unk_26C4E0858;
    gParShowActualMemoryAndChunkOverheadStats = (uint64_t)v3;
    gShadowShowActualMemoryAndChunkOverheadStats = 0;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParShowActualMemoryAndChunkOverheadStats);
  }
  if (!gParShowMemChunkStatsOnThreadExit)
  {
    int v4 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v4, "ShowMemChunkStatsOnThreadExit", &byte_2140B33BB, &byte_2140B33BB, 0, SetShadowShowMemChunkStatsOnThreadExit, 0);
    *uint64_t v5 = &unk_26C4E0858;
    gParShowMemChunkStatsOnThreadExit = (uint64_t)v5;
    gShadowShowMemChunkStatsOnThreadExit = 0;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParShowMemChunkStatsOnThreadExit);
  }
  if (!gParShowMemStatsOnThreadExit)
  {
    unsigned int v6 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v6, "ShowMemStatsOnThreadExit", &byte_2140B33BB, &byte_2140B33BB, 0, SetShadowShowMemStatsOnThreadExit, 0);
    *BOOL v7 = &unk_26C4E0858;
    gParShowMemStatsOnThreadExit = (uint64_t)v7;
    gShadowShowMemStatsOnThreadExit = 0;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParShowMemStatsOnThreadExit);
  }
  if (!gParShowVirtualPrivateDetailsOnCalc)
  {
    int v8 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v8, "ShowVirtualPrivateDetailsOnCalc", &byte_2140B33BB, &byte_2140B33BB, 0, SetShadowShowVirtualPrivateDetailsOnCalc, 0);
    *unint64_t v9 = &unk_26C4E0858;
    gParShowVirtualPrivateDetailsOnCalc = (uint64_t)v9;
    gShadowShowVirtualPrivateDetailsOnCalc = 0;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParShowVirtualPrivateDetailsOnCalc);
  }
}

uint64_t GetRegionChecksum(MemChunkRegion *a1)
{
  if (a1)
  {
    return MemChunkRegion::calculateChecksum(a1);
  }
  if (MemChunkRegion::smTlsID != -1)
  {
    int v3 = (MemChunkRegion **)pthread_getspecific(MemChunkRegion::smTlsID);
    if (v3)
    {
      a1 = *v3;
      if (a1) {
        goto LABEL_10;
      }
      pthread_setspecific(MemChunkRegion::smTlsID, 0);
    }
  }
  a1 = (MemChunkRegion *)&gGlobalMemChunkRegion;
LABEL_10:
  return MemChunkRegion::calculateChecksum(a1);
}

uint64_t MemChunkRegion::calculateChecksum(MemChunkRegion *this)
{
  uint64_t v1 = (int8x16_t *)*((void *)this + 162);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  do
  {
    unint64_t v3 = ((v1[1].i64[1] * (v1[2].i64[0] + 16) + 31) & 0x3FFFF0000) + 0x10000;
    if ((v3 & 0x3FFFF0000) != 0)
    {
      uint64_t v4 = (v3 >> 2) & 0xFFFFC000;
      if (v4)
      {
        int8x16_t v5 = (int8x16_t)result;
        unsigned int v6 = v1;
        do
        {
          int8x16_t v7 = *v6++;
          int8x16_t v5 = veorq_s8(v7, v5);
          v4 -= 4;
        }
        while (v4);
        int8x8_t v8 = veor_s8(*(int8x8_t *)v5.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL));
        uint64_t result = (v8.i32[0] ^ v8.i32[1]);
      }
      else
      {
        unint64_t v9 = v1;
        do
        {
          int v10 = v9->i32[0];
          unint64_t v9 = (int8x16_t *)((char *)v9 + 4);
          uint64_t result = v10 ^ result;
          --v4;
        }
        while (v4);
      }
    }
    uint64_t v1 = (int8x16_t *)v1->i64[1];
  }
  while (v1);
  return result;
}

void ShowDeltaMemSummary(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  if (!a1)
  {
    if (MemChunkRegion::smTlsID == -1) {
      goto LABEL_6;
    }
    int8x16_t v7 = pthread_getspecific(MemChunkRegion::smTlsID);
    if (!v7) {
      goto LABEL_6;
    }
    a1 = (void *)*v7;
    if (!a1)
    {
      pthread_setspecific(MemChunkRegion::smTlsID, 0);
LABEL_6:
      a1 = &gGlobalMemChunkRegion;
    }
  }
  xlprintf("%-30.30s dT %9lld, dC %9lld, dM %8lld\n", a2, (uint64_t)a3, a4, a5, a2, a1[33540] - *a3, a1[33541] - a3[1], a1[33542] - a3[2]);
}

void MemStatsDisplayFromRef(MemChunkRegion *a1, uint64_t a2, int a3, BOOL a4, const char *a5, uint64_t a6, uint64_t a7)
{
  int v12 = a1;
  if (!a1)
  {
    if (MemChunkRegion::smTlsID != -1)
    {
      int v13 = (MemChunkRegion **)pthread_getspecific(MemChunkRegion::smTlsID);
      if (v13)
      {
        int v12 = *v13;
        if (*v13) {
          goto LABEL_7;
        }
        pthread_setspecific(MemChunkRegion::smTlsID, 0);
      }
    }
    int v12 = (MemChunkRegion *)&gGlobalMemChunkRegion;
  }
LABEL_7:
  if (a3) {
    MrecInitModule_sdpres_sdapi();
  }

  MemChunkRegion::memStatsDisplayFromRef(v12, a2, 0, 0, a5, a6, a7, &byte_2140B33BB);
}

void MemChunkRegion::memStatsDisplayFromRef(MemChunkRegion *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t a6, uint64_t a7, const char *a8)
{
  uint64_t v16 = *((void *)this + 33541);
  uint64_t v17 = *((void *)this + 33544);
  xlprintf("%sAlloc: %s\n", a2, a3, a4, (uint64_t)a5, a8, "------------------------------------------------------------------------");
  if (a5) {
    xgenprintf(1, a2, "%sAlloc: %s\n", v18, v19, a8, a5);
  }
  MemChunkRegion::printSomeStats(this, 1, a2, a3, a4, (v16 | a6 | v17 | a7) != 0, a6, a7, a8);
}

uint64_t *MemChunkRegion::newMemChunkRegion(MemChunkRegion *this, const char *a2)
{
  unint64_t v3 = MemChunkAlloc(0x418B0uLL, (MemChunkRegion *)&gGlobalMemChunkRegion);
  bzero(v3, 0x418B0uLL);
  MemChunkRegion::initMemChunkRegion((MemChunkRegion *)v3, (const char *)this);
  uint64_t v4 = MemChunkRegion::smpMemChunkRegions;
  v3[160] = (uint64_t)MemChunkRegion::smpMemChunkRegions;
  v4[159] = v3;
  MemChunkRegion::smpMemChunkRegions = v3;
  return v3;
}

void MemChunkRegion::initMemChunkRegion(MemChunkRegion *this, const char *a2)
{
  *((unsigned char *)this + 1264) = 0;
  DgnPRandom::initialize((uint64_t)this + 4, 0);
  *(_OWORD *)((char *)this + 12DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = 0u;
  *(_OWORD *)((char *)this + 1288) = 0u;
  bzero((char *)this + 6424, 0x3FF98uLL);
  size_t v4 = strlen(a2);
  if (v4 + 1 < 0x401) {
    uint64_t v5 = v4 + 1;
  }
  else {
    uint64_t v5 = 1024;
  }
  strcpy((char *)this + 240, a2)[v5] = 0;
  unsigned int v6 = (void *)((char *)this + 1304);
  for (unint64_t i = 8; i != 20; i += 4)
  {
    MemChunkAddChunk(i, 1024, v6, (uint64_t)this);
    v6 += 5;
  }
  int8x8_t v8 = (void *)((char *)this + 1424);
  do
  {
    MemChunkAddChunk(i, 512, v8, (uint64_t)this);
    v8 += 5;
    i += 4;
  }
  while (i != 36);
  unint64_t v9 = (void *)((char *)this + 1584);
  do
  {
    MemChunkAddChunk(i, 256, v9, (uint64_t)this);
    v9 += 5;
    i += 4;
  }
  while (i != 68);
  int v10 = 0;
  unsigned int v11 = 15;
  unsigned int v12 = 80;
  unsigned int v13 = 16;
  unint64_t v14 = 128;
  do
  {
    uint64_t v15 = 0;
    uint64_t v16 = v13;
    unsigned int v17 = v12;
    unsigned int v18 = v11;
    unint64_t v19 = v12;
    do
    {
      if (v10 == 4 && v15 == 3) {
        break;
      }
      MemChunkAddChunk(v19, v14, (void *)this + 5 * v18 + 5 * v15++ + 163, (uint64_t)this);
      v19 += v16;
    }
    while (v15 != 4);
    unsigned int v11 = v18 + v15;
    unsigned int v12 = 2 * v17;
    unsigned int v13 = 2 * v16;
    if (v14 < 4) {
      unint64_t v14 = 1;
    }
    else {
      v14 >>= 1;
    }
    ++v10;
  }
  while (v10 != 5);
  MemChunkAddChunk(0x800uLL, 4, (void *)this + 5 * v11 + 163, (uint64_t)this);
  MemChunkAddChunk(0xC00uLL, 4, (void *)this + 5 * v11 + 168, (uint64_t)this);
  MemChunkAddChunk(0x1000uLL, 4, (void *)this + 5 * v11 + 173, (uint64_t)this);
  MemChunkAddChunk(0x1800uLL, 4, (void *)this + 5 * v11 + 178, (uint64_t)this);
  MemChunkAddChunk(0x2000uLL, 4, (void *)this + 5 * v11 + 183, (uint64_t)this);
  MemChunkAddChunk(0x3000uLL, 4, (void *)this + 5 * v11 + 188, (uint64_t)this);
  MemChunkAddChunk(0x3C00uLL, 4, (void *)this + 5 * v11 + 193, (uint64_t)this);
  MemChunkAddChunk(0x5400uLL, 3, (void *)this + 5 * v11 + 198, (uint64_t)this);
  int v20 = (void *)((char *)this + 40 * v11 + 1624);
  MemChunkAddChunk(0x7C00uLL, 2, v20, (uint64_t)this);
  *((unsigned char *)this + 1264) = 1;
  if (v20[4] != 32736) {
    errWarnInternal("/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/memchunk.cpp", 2544, "mrecutil/memchunk", 2, "%llu %llu", v20[4], 32736);
  }
}

__n128 MemChunkRegion::getRegionStats@<Q0>(MemChunkRegion *this@<X0>, uint64_t a2@<X8>)
{
  if (!this)
  {
    if (MemChunkRegion::smTlsID == -1) {
      goto LABEL_6;
    }
    size_t v4 = (MemChunkRegion **)pthread_getspecific(MemChunkRegion::smTlsID);
    if (!v4) {
      goto LABEL_6;
    }
    this = *v4;
    if (!this)
    {
      pthread_setspecific(MemChunkRegion::smTlsID, 0);
LABEL_6:
      this = (MemChunkRegion *)&gGlobalMemChunkRegion;
    }
  }
  long long v5 = *((_OWORD *)this + 16773);
  *(_OWORD *)(a2 + 32) = *((_OWORD *)this + 16772);
  *(_OWORD *)(a2 + 48) = v5;
  long long v6 = *((_OWORD *)this + 16775);
  *(_OWORD *)(a2 + 64) = *((_OWORD *)this + 16774);
  *(_OWORD *)(a2 + 80) = v6;
  __n128 result = *((__n128 *)this + 16770);
  long long v8 = *((_OWORD *)this + 16771);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v8;
  return result;
}

void *MemChunkRegion::resetInternalLocalMaxAllocBytes(void *this, MemChunkRegion *a2)
{
  if (!this)
  {
    if (MemChunkRegion::smTlsID == -1) {
      goto LABEL_6;
    }
    uint64_t v2 = (uint64_t *)pthread_getspecific(MemChunkRegion::smTlsID);
    if (!v2) {
      goto LABEL_6;
    }
    this = (void *)*v2;
    if (!this)
    {
      pthread_setspecific(MemChunkRegion::smTlsID, 0);
LABEL_6:
      this = &gGlobalMemChunkRegion;
    }
  }
  this[33550] = this[33541];
  return this;
}

uint64_t MemChunkRegion::getAndResetInternalLocalMaxAllocBytes(MemChunkRegion *this, MemChunkRegion *a2)
{
  if (!this)
  {
    if (MemChunkRegion::smTlsID == -1) {
      goto LABEL_6;
    }
    uint64_t v2 = (MemChunkRegion **)pthread_getspecific(MemChunkRegion::smTlsID);
    if (!v2) {
      goto LABEL_6;
    }
    this = *v2;
    if (!this)
    {
      pthread_setspecific(MemChunkRegion::smTlsID, 0);
LABEL_6:
      this = (MemChunkRegion *)&gGlobalMemChunkRegion;
    }
  }
  unint64_t v3 = (void *)((char *)this + 268328);
  uint64_t result = *((void *)this + 33550);
  v3[9] = *v3;
  return result;
}

void MemChunkRegion::deleteMemChunkRegion(MemChunkRegion *this, MemChunkRegion *a2)
{
  if (this != (MemChunkRegion *)&gGlobalMemChunkRegion)
  {
    uint64_t v3 = *((void *)this + 160);
    if (v3) {
      *(void *)(v3 + 12DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = *((void *)this + 159);
    }
    uint64_t v4 = *((void *)this + 159);
    if (v4) {
      long long v5 = (void *)(v4 + 1280);
    }
    else {
      long long v5 = &MemChunkRegion::smpMemChunkRegions;
    }
    *long long v5 = v3;
    MemChunkRegion::shutdown(this, 0, 0, 0, 0, &byte_2140B33BB);
    if (this)
    {
      MemChunkFree(this, v6);
    }
  }
}

void MemChunkRegion::shutdown(MemChunkRegion *this, uint64_t a2, BOOL a3, int a4, BOOL a5, const char *a6)
{
  if (a2 && a4) {
    haveTerminatedSuccessfully();
  }
  int v10 = (uint64_t *)*((void *)this + 162);
  if (*((void *)this + 161)) {
    *((void *)this + 161) = 0;
  }
  if (!v10)
  {
    unint64_t v17 = 0;
    *((void *)this + 803) = 0;
LABEL_26:
    bzero((char *)this + 8 * v17 + 6432, 261880 - 8 * v17);
    goto LABEL_27;
  }
  do
  {
    while (1)
    {
      unsigned int v11 = v10;
      int v10 = (uint64_t *)v10[1];
      uint64_t v12 = *v11;
      if (*v11) {
        break;
      }
LABEL_13:
      *((void *)this + 162) = v10;
      if (!v10) {
        goto LABEL_16;
      }
    }
    if (*(_DWORD *)(v12 + 24) || *(void *)(v12 + 16))
    {
      if (this != (MemChunkRegion *)&gGlobalMemChunkRegion)
      {
        size_t v13 = ((v11[3] * (v11[4] + 16) + 31) & 0xFFFFFFFFFFFF0000) + 0x10000;
        do
        {
          *unsigned int v11 = *(void *)(v12 + 16);
          munmap((void *)v12, v13);
          uint64_t v12 = *v11;
        }
        while (*v11);
      }
      goto LABEL_13;
    }
    *((void *)this + 162) = v10;
    size_t v14 = ((v11[3] * (v11[4] + 16) + 31) & 0xFFFFFFFFFFFF0000) + 0x10000;
    munmap((void *)v12, v14);
    *((void *)this + 33541) -= v14;
    --*((void *)this + 33544);
  }
  while (v10);
LABEL_16:
  uint64_t v15 = *((void *)this + 162);
  *((void *)this + 803) = 0;
  if (!v15)
  {
    unint64_t v17 = 0;
    goto LABEL_26;
  }
  unint64_t v16 = 0;
  do
  {
    unint64_t v17 = *(void *)(v15 + 32);
    if (v16 + 1 < v17)
    {
      unint64_t v18 = ~v16 + v17;
      unint64_t v19 = (void *)((char *)this + 8 * v16 + 6432);
      do
      {
        *v19++ = v15;
        --v18;
      }
      while (v18);
    }
    uint64_t v15 = *(void *)(v15 + 8);
    unint64_t v16 = v17;
  }
  while (v15);
  if ((v17 + 1) >> 5 <= 0x3FE) {
    goto LABEL_26;
  }
LABEL_27:
  *((unsigned char *)this + 1264) = 0;
  BOOL v20 = gShadowShowMemStatsOnThreadExit != 0;
  if (a2) {
    BOOL v20 = a3;
  }
  if (v20)
  {
    if (a2 && haveTerminatedSuccessfully()) {
      MrecInitModule_sdpres_sdapi();
    }
    MemChunkRegion::memStatsDisplayFromRef(this, 0, a2, 1, (const char *)this + 240, 0, 0, a6);
  }
}

uint64_t MemChunkRegion::getBlockRegion(MemChunkRegion *this, const void *a2)
{
  uint64_t v2 = *((void *)this - 1);
  if (v2 == -3) {
    uint64_t v3 = (char *)this - 16;
  }
  else {
    uint64_t v3 = (char *)(*(void *)(v2 + 8) + 16);
  }
  return *(void *)v3;
}

unint64_t MemChunkSuggestAllocExtraItems(unint64_t a1, unint64_t a2, MemChunkRegion *a3)
{
  if (a3) {
    goto LABEL_7;
  }
  if (MemChunkRegion::smTlsID != -1)
  {
    long long v5 = (MemChunkRegion **)pthread_getspecific(MemChunkRegion::smTlsID);
    if (v5)
    {
      a3 = *v5;
      if (*v5) {
        goto LABEL_7;
      }
      pthread_setspecific(MemChunkRegion::smTlsID, 0);
    }
  }
  a3 = (MemChunkRegion *)&gGlobalMemChunkRegion;
LABEL_7:
  if (a1 > 0x7FE0) {
    unint64_t v6 = (a1 + 287) & 0xFFFFFFFFFFFFF000 | 0xEE0;
  }
  else {
    unint64_t v6 = *(void *)(*((void *)a3 + a1 + 803) + 32);
  }
  return (v6 - a1) / a2;
}

void *GetMemChunkRegionAndSuggestSize(void *a1, unint64_t a2, unint64_t *a3)
{
  if (a1)
  {
    uint64_t v5 = *(a1 - 1);
    if (v5 == -3) {
      unint64_t v6 = (void **)(a1 - 2);
    }
    else {
      unint64_t v6 = (void **)(*(void *)(v5 + 8) + 16);
    }
    uint64_t result = *v6;
  }
  else
  {
    if (MemChunkRegion::smTlsID != -1)
    {
      int8x16_t v7 = (void **)pthread_getspecific(MemChunkRegion::smTlsID);
      if (v7)
      {
        uint64_t result = *v7;
        if (result) {
          goto LABEL_11;
        }
        pthread_setspecific(MemChunkRegion::smTlsID, 0);
      }
    }
    uint64_t result = &gGlobalMemChunkRegion;
  }
LABEL_11:
  if (a2 > 0x7FE0) {
    unint64_t v9 = (a2 + 287) & 0xFFFFFFFFFFFFF000 | 0xEE0;
  }
  else {
    unint64_t v9 = *(void *)(result[a2 + 803] + 32);
  }
  *a3 = v9;
  return result;
}

uint64_t *MemChunkAlloc(unint64_t a1, MemChunkRegion *a2)
{
  uint64_t v2 = a2;
  if (!a2)
  {
    if (MemChunkRegion::smTlsID != -1)
    {
      uint64_t v4 = (MemChunkRegion **)pthread_getspecific(MemChunkRegion::smTlsID);
      if (v4)
      {
        uint64_t v2 = *v4;
        if (*v4) {
          goto LABEL_7;
        }
        pthread_setspecific(MemChunkRegion::smTlsID, 0);
      }
    }
    uint64_t v2 = (MemChunkRegion *)&gGlobalMemChunkRegion;
  }
LABEL_7:
  uint64_t v5 = (void *)((char *)v2 + 268320);
  if (a1 > 0x7FE0)
  {
    unint64_t v10 = (a1 + 31) & 0xFFFFFFFFFFFFF000;
    int64_t v11 = v10 + 4096;
    uint64_t v12 = (char *)mmap(0, v10 + 4096, 3, 4098, -1, 0);
    if (v12 == (char *)-1) {
      ThrowNewFailure((uint64_t)v2, v10 + 4096);
    }
    uint64_t v13 = *((void *)v2 + 33544);
    uint64_t v14 = *((void *)v2 + 33543) + 1;
    *((void *)v2 + 33543) = v14;
    *((void *)v2 + 33544) = v13 + 1;
    if (v13 >= *((void *)v2 + 33545))
    {
      *((void *)v2 + 33545) = v13 + 1;
      *((void *)v2 + 33548) = v14;
    }
    if (*((void *)v2 + 33546) < v11)
    {
      *((void *)v2 + 33546) = v11;
      *((void *)v2 + 33549) = v14;
    }
    int64_t v15 = *((void *)v2 + 33541) + v11;
    *v5 += v11;
    *((void *)v2 + 33541) = v15;
    if (v15 > *((void *)v2 + 33550)) {
      *((void *)v2 + 33550) = v15;
    }
    if (v15 > *((void *)v2 + 33551)) {
      *((void *)v2 + 33551) = v15;
    }
    if (v15 > *((void *)v2 + 33542))
    {
      *((void *)v2 + 33542) = v15;
      *((void *)v2 + 33547) = v14;
    }
    unint64_t v16 = &v12[16
             * DgnPRandom::normalizedNext((MemChunkRegion *)((char *)v2 + 4), ((v10 - a1 + 4064) >> 4) + 1)];
    long long v8 = (uint64_t *)(v16 + 32);
    *((void *)v16 + 2) = v2;
    *((void *)v16 + 3) = -3;
    *((_DWORD *)v16 + 3) = v11;
  }
  else
  {
    unint64_t v6 = (char **)*((void *)v2 + a1 + 803);
    int8x16_t v7 = *v6;
    if (*v6)
    {
      long long v8 = *(uint64_t **)v7;
      int v9 = *((_DWORD *)v7 + 6) + 1;
    }
    else
    {
      unint64_t v17 = v6[4];
      unint64_t v18 = v17 + 16;
      int64_t v19 = (((void)v6[3] * (void)(v17 + 16) + 31) & 0xFFFFFFFFFFFF0000) + 0x10000;
      int8x16_t v7 = (char *)mmap(0, v19, 3, 4098, -1, 0);
      if (v7 == (char *)-1) {
        ThrowNewFailure((uint64_t)v2, v19);
      }
      uint64_t v20 = *((void *)v2 + 33544);
      uint64_t v21 = *((void *)v2 + 33543) + 1;
      *((void *)v2 + 33543) = v21;
      *((void *)v2 + 33544) = v20 + 1;
      if (v20 >= *((void *)v2 + 33545))
      {
        *((void *)v2 + 33545) = v20 + 1;
        *((void *)v2 + 33548) = v21;
      }
      if (*((void *)v2 + 33546) < v19)
      {
        *((void *)v2 + 33546) = v19;
        *((void *)v2 + 33549) = v21;
      }
      int64_t v22 = *((void *)v2 + 33541) + v19;
      *v5 += v19;
      *((void *)v2 + 33541) = v22;
      if (v22 > *((void *)v2 + 33550)) {
        *((void *)v2 + 33550) = v22;
      }
      if (v22 > *((void *)v2 + 33551)) {
        *((void *)v2 + 33551) = v22;
      }
      if (v22 > *((void *)v2 + 33542))
      {
        *((void *)v2 + 33542) = v22;
        *((void *)v2 + 33547) = v21;
      }
      *((_DWORD *)v7 + 6) = 0;
      long long v8 = (uint64_t *)(v7 + 48);
      uint64_t v23 = (void)(v6[3] - 1) * (void)v18;
      uint64_t v24 = &v7[v23 + 48];
      if ((v23 & 0x8000000000000000) == 0)
      {
        int v25 = v7 + 64;
        do
        {
          *((void *)v25 - 3) = v7;
          *((void *)v25 - 2) = &v17[(void)v25];
          int v25 = &v18[(void)v25];
        }
        while (v25 - 16 <= v24);
      }
      *(void *)uint64_t v24 = 0;
      *(void *)int8x16_t v7 = v8;
      *((void *)v7 + 1) = v6;
      int v26 = *v6;
      *unint64_t v6 = v7;
      *((void *)v7 + 2) = v26;
      int v9 = 1;
    }
    *((_DWORD *)v7 + 6) = v9;
    uint64_t v27 = *v8;
    *(void *)int8x16_t v7 = *v8;
    if (!v27) {
      *unint64_t v6 = (char *)*((void *)v7 + 2);
    }
  }
  return v8;
}

uint64_t MemChunkFree(void *a1, MemChunkRegion *a2)
{
  uint64_t result = *(a1 - 1);
  if (result == -3)
  {
    size_t v9 = *((unsigned int *)a1 - 5);
    unint64_t v10 = (void *)(*(a1 - 2) + 268328);
    uint64_t result = (unint64_t)(a1 - 4) & 0xFFFFFFFFFFFFF000;
    goto LABEL_14;
  }
  uint64_t v4 = *(uint64_t **)(result + 8);
  uint64_t v5 = v4[2];
  int v6 = *(_DWORD *)(result + 24) - 1;
  *(_DWORD *)(result + 24) = v6;
  if (!v6)
  {
    uint64_t v11 = *v4;
    if (*v4 == result)
    {
      uint64_t v13 = *(void *)(result + 16);
      if (!v13) {
        goto LABEL_3;
      }
      *uint64_t v4 = v13;
    }
    else
    {
      while (v11)
      {
        uint64_t v12 = v11;
        uint64_t v11 = *(void *)(v11 + 16);
        if (v11 == result)
        {
          *(void *)(v12 + 16) = *(void *)(result + 16);
          break;
        }
      }
    }
    unint64_t v10 = (void *)(v5 + 268328);
    size_t v9 = ((v4[3] * (v4[4] + 16) + 31) & 0xFFFFFFFFFFFF0000) + 0x10000;
LABEL_14:
    uint64_t result = munmap((void *)result, v9);
    *v10 -= v9;
    --v10[3];
    return result;
  }
LABEL_3:
  uint64_t v7 = *(void *)result;
  if (!*(void *)result)
  {
    uint64_t v8 = *v4;
    *uint64_t v4 = result;
    *(void *)(result + 16) = v8;
  }
  *a1 = v7;
  *(void *)uint64_t result = a1;
  return result;
}

void MemChunkRegion::printSomeStats(MemChunkRegion *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, const char *a9)
{
  if ((a2 & 1) != 0 || a3)
  {
    uint64_t v11 = *((void *)this + 33541);
    uint64_t v31 = *((void *)this + 33543);
    uint64_t v12 = *((void *)this + 33545);
    uint64_t v33 = *((void *)this + 33544);
    uint64_t v13 = *((void *)this + 33546);
    uint64_t v16 = *((void *)this + 33548);
    uint64_t v32 = *((void *)this + 33549);
    int v17 = a4;
    int v30 = a5;
    xgenprintf(a2, a3, "%sAlloc: Memory alloc bytes: Tot %lldK, Max %lldK (at alloc #%lld)\n", a4, a5, a9, *((void *)this + 33540) / 1024, *((void *)this + 33542) / 1024, *((void *)this + 33547));
    xgenprintf(a2, a3, "%sAlloc: Memory alloc items: Tot %lld, Max %lld (at alloc #%lld)\n", v18, v19, a9, v31, v12, v16);
    xgenprintf(a2, a3, "%sAlloc: Memory alloc largest: %lldK (alloc #%lld)\n", v20, v21, a9, v13 / 1024, v32);
    if (v30)
    {
      if (v17 && (haveTerminatedSuccessfully() & 1) == 0 && a6)
      {
        xgenprintf(a2, a3, "%sAlloc: Finalize not called -- leaks detected.\n", v22, v23, a9);
      }
      else
      {
        if (!a6)
        {
          xgenprintf(a2, a3, "%sAlloc: Detected no leaks.\n", v22, v23, a9, v27, v28, v29);
          return;
        }
        xgenprintf(a2, a3, "%sAlloc: **** Leaks detected! ****\n", v22, v23, a9);
      }
    }
    uint64_t v24 = v11 - a7;
    if (v11 < a7) {
      uint64_t v24 = v11 - a7 + 1023;
    }
    xgenprintf(a2, a3, "%sAlloc: Memory alloc bytes: Cur %lldK, Ini %lldK, C-I %lldK\n", v22, v23, a9, v11 / 1024, a7 / 1024, v24 >> 10);
    xgenprintf(a2, a3, "%sAlloc: Memory alloc items: Cur %lld, Ini %lld, C-I %lld\n", v25, v26, a9, v33, a8, v33 - a8);
  }
}

void MemChunkInit(void)
{
  pthread_key_t v2 = 0;
  int v0 = pthread_key_create(&v2, 0);
  pthread_key_t v1 = v2;
  if (v0) {
    pthread_key_t v1 = -1;
  }
  MemChunkRegion::smTlsID = v1;
  MemChunkRegion::initMemChunkRegion((MemChunkRegion *)&gGlobalMemChunkRegion, "MREC first construction -> MREC last destruction:");
}

double MemChunkRegion::resetMaxAlloc(MemChunkRegion *this)
{
  uint64_t v1 = *((void *)this + 33541);
  *((void *)this + 33542) = v1;
  uint64_t v2 = *((void *)this + 33543);
  *((void *)this + 33545) = *((void *)this + 33544);
  *((void *)this + 33546) = 0;
  *((void *)this + 33547) = v2;
  *((void *)this + 33548) = v2;
  *((void *)this + 33549) = v2;
  *((void *)this + 33550) = v1;
  *((void *)this + 33551) = v1;
  double result = 0.0;
  *((_OWORD *)this + 16776) = 0u;
  *((_OWORD *)this + 16777) = 0u;
  *((_OWORD *)this + 16778) = 0u;
  return result;
}

void MemChunkAddChunk(unint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (((a1 + 15) & 0xFFFFFFFFFFFFFFF0) == a1)
  {
    int v6 = (uint64_t *)(a4 + 1296);
    uint64_t v7 = *(void *)(a4 + 1296);
    if (v7 && *(void *)(v7 + 32) < a1)
    {
      do
      {
        uint64_t v8 = v7;
        uint64_t v7 = *(void *)(v7 + 8);
      }
      while (v7 && *(void *)(v7 + 32) < a1);
      int v6 = (uint64_t *)(v8 + 8);
    }
    unint64_t v9 = ((a1 + 16) * a2 + 31) & 0xFFFFFFFFFFFF0000 | 0xFFE0;
    unint64_t v10 = v9 / (a1 + 16);
    unint64_t v11 = ((v9 % (a1 + 16) / v10) & 0xFFFFFFFFFFFFFFF0) + a1;
    if (v11 >= 0x7FE1)
    {
      errWarnInternal("/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/memchunk.cpp", 2335, "mrecutil/memchunk", 1, "%llu %llu", v11, 32736);
      uint64_t v7 = *v6;
    }
    a3[2] = a4;
    a3[3] = v10;
    a3[4] = v11;
    *a3 = 0;
    a3[1] = v7;
    *int v6 = (uint64_t)a3;
    if ((v11 & 0x8000000000000000) == 0)
    {
      do
      {
        uint64_t v12 = a4 + 8 * v11;
        if (*(void *)(v12 + 6424)) {
          break;
        }
        *(void *)(v12 + 6424) = a3;
      }
      while ((uint64_t)v11-- > 0);
    }
  }
}

void SetShadowDiagnosticVirtualCalculationInterval(void)
{
  gShadowDiagnosticVirtualCalculationInterval = *(_DWORD *)(gParDiagnosticVirtualCalculationInterval + 44);
}

void SetShadowShowActualMemoryAndChunkOverheadStats(void)
{
  gShadowShowActualMemoryAndChunkOverheadStats = *(unsigned char *)(gParShowActualMemoryAndChunkOverheadStats + 41);
}

void SetShadowShowMemChunkStatsOnThreadExit(void)
{
  gShadowShowMemChunkStatsOnThreadExit = *(unsigned char *)(gParShowMemChunkStatsOnThreadExit + 41);
}

void SetShadowShowMemStatsOnThreadExit(void)
{
  gShadowShowMemStatsOnThreadExit = *(unsigned char *)(gParShowMemStatsOnThreadExit + 41);
}

void SetShadowShowVirtualPrivateDetailsOnCalc(void)
{
  gShadowShowVirtualPrivateDetailsOnCalc = *(unsigned char *)(gParShowVirtualPrivateDetailsOnCalc + 41);
}

uint64_t MrecInitLibrary_frame(void)
{
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_wavedata_frame();

  return MrecInitModule_sdpres_sdapi();
}

uint64_t MrecInitLibrarySet_throughFrame(void)
{
  MrecInitLibrarySet_throughFileutil();

  return MrecInitLibrary_frame();
}

void ChannelMgr::ChannelMgr(ChannelMgr *this)
{
  *(void *)this = 0x10000001DLL;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 2) = 1;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0x10000001DLL;
  *((void *)this + 10) = 0;
  *((_DWORD *)this + 18) = 1;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((_DWORD *)this + 26) = 0;
  *((void *)this + 14) = 0;
  int v17 = (char *)this + 112;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0x10000001DLL;
  *((void *)this + 18) = 0;
  *((_OWORD *)this + 11) = 0u;
  uint64_t v2 = (char *)this + 176;
  *((_DWORD *)this + 34) = 1;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  *((_DWORD *)this + 42) = 0;
  *((_OWORD *)this + 12) = 0u;
  uint64_t v3 = (char *)this + 192;
  *((_OWORD *)this + 13) = 0u;
  uint64_t v4 = (char *)this + 208;
  *((_OWORD *)this + 14) = 0u;
  uint64_t v5 = (char *)this + 224;
  *((_OWORD *)this + 15) = 0u;
  int v6 = (char *)this + 240;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  uint64_t v7 = (char *)this + 304;
  DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 48, 1, 1);
  unsigned int v8 = *((_DWORD *)this + 50);
  int v9 = *((_DWORD *)this + 51);
  uint64_t v10 = *((unsigned int *)this + 14);
  *(void *)(*((void *)this + 6) + 8 * v10) = 0;
  *((_DWORD *)this + 14) = v10 + 1;
  if (v8 == v9)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)v3, 1, 1);
    unsigned int v8 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((void *)this + 24) + 4 * v8) = 0;
  ++*((_DWORD *)this + 50);
  unsigned int v11 = *((_DWORD *)this + 54);
  if (v11 == *((_DWORD *)this + 55))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)v4, 1, 1);
    unsigned int v11 = *((_DWORD *)this + 54);
  }
  *(_DWORD *)(*((void *)this + 26) + 4 * v11) = 0;
  ++*((_DWORD *)this + 54);
  unsigned int v12 = *((_DWORD *)this + 58);
  if (v12 == *((_DWORD *)this + 59))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)v5, 1, 1);
    unsigned int v12 = *((_DWORD *)this + 58);
  }
  *(_DWORD *)(*((void *)this + 28) + 4 * v12) = 0;
  ++*((_DWORD *)this + 58);
  unsigned int v13 = *((_DWORD *)this + 62);
  if (v13 == *((_DWORD *)this + 63))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)v6, 1, 1);
    unsigned int v13 = *((_DWORD *)this + 62);
  }
  *(_DWORD *)(*((void *)this + 30) + 4 * v13) = 0;
  ++*((_DWORD *)this + 62);
  unsigned int v14 = *((_DWORD *)this + 30);
  if (v14 == *((_DWORD *)this + 31))
  {
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)v17, 1, 1);
    unsigned int v14 = *((_DWORD *)this + 30);
  }
  *(void *)(*((void *)this + 14) + 8 * v14) = 0;
  *((_DWORD *)this + 30) = v14 + 1;
  unsigned int v15 = *((_DWORD *)this + 46);
  if (v15 == *((_DWORD *)this + 47))
  {
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)v2, 1, 1);
    unsigned int v15 = *((_DWORD *)this + 46);
  }
  *(void *)(*((void *)this + 22) + 8 * v15) = 0;
  *((_DWORD *)this + 46) = v15 + 1;
  unsigned int v16 = *((_DWORD *)this + 78);
  if (v16 == *((_DWORD *)this + 79))
  {
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)v7, 1, 1);
    unsigned int v16 = *((_DWORD *)this + 78);
  }
  *(void *)(*((void *)this + 38) + 8 * v16) = 0;
  *((_DWORD *)this + 78) = v16 + 1;
}

void sub_213F84B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  DgnIOwnArray<ParamSetBase *>::releaseAll(v16);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v17);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v18);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a13);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v14);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v22);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v21);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v20);
  DgnIOwnArray<SigProc *>::releaseAll(v19);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a12);
  DgnIOwnArray<Utterance *>::releaseAll(a14);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a11);
  DgnIOwnArray<Channel *>::releaseAll(v15);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a10);
  _Unwind_Resume(a1);
}

void ChannelMgr::closeChannel(ChannelMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  ChannelMgr::validateChannelId(this, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v10 = *(void *)(*((void *)this + 6) + 8 * a2);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v10 + 160))(v10))
  {
    ChannelMgr::validateChannelId(this, a2, v11, v12, v13, v14, v15, v16);
    uint64_t v17 = *(void *)(*((void *)this + 6) + 8 * a2);
    (*(void (**)(uint64_t))(*(void *)v17 + 96))(v17);
  }
  unint64_t v18 = *((unsigned int *)this + 30);
  if (v18)
  {
    unint64_t v19 = 0;
    uint64_t v20 = *((void *)this + 14);
    do
    {
      uint64_t v21 = *(_DWORD **)(v20 + 8 * v19);
      if (v21 && *v21 == a2)
      {
        --*(_DWORD *)(*((void *)this + 24) + 4 * a2);
        _DWORD *v21 = -1;
        unint64_t v18 = *((unsigned int *)this + 30);
      }
      ++v19;
    }
    while (v19 < v18);
  }
  *(_DWORD *)(*((void *)this + 26) + 4 * a2) = 0;
  *(_DWORD *)(*((void *)this + 28) + 4 * a2) = 0;
  *(_DWORD *)(*((void *)this + 30) + 4 * a2) = 0;
  ChannelMgr::validateChannelId(this, a2, v11, v12, v13, v14, v15, v16);
  DgnDelete<Channel>(*(void *)(*((void *)this + 6) + 8 * a2));
  *(void *)(*((void *)this + 6) + 8 * a2) = 0;
  *(_DWORD *)(*((void *)this + 24) + 4 * a2) = 0;
  uint64_t v22 = *((void *)this + 38);
  uint64_t v23 = *(void *)(v22 + 8 * a2);
  if (v23)
  {
    --*(_DWORD *)(v23 + 36);
    *(void *)(v22 + 8 * a2) = 0;
  }

  IdMgr<unsigned int>::recycleId((unsigned int *)this, a2);
}

void ChannelMgr::startupChannelMgr(ChannelMgr *this)
{
  uint64_t v1 = MemChunkAlloc(0x140uLL, 0);
  ChannelMgr::ChannelMgr((ChannelMgr *)v1);
  ChannelMgr::smpChannelMgr = v2;
}

void ChannelMgr::validateChannelId(ChannelMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 14) <= a2
    || !*(void *)(*((void *)this + 6) + 8 * a2)
    || !*(void *)(*((void *)this + 38) + 8 * a2))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/chanmgr.cpp", 295, (uint64_t)"channel/chanmgr", 2, (uint64_t)"%u", a7, a8, a2);
  }
}

uint64_t DgnDelete<Channel>(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    (*(void (**)(uint64_t))(*(void *)result + 72))(result);
    return MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t ChannelMgr::getChannelType(ChannelMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return *(unsigned int *)(*(void *)(*((void *)this + 6) + 8 * a2) + 68);
}

uint64_t ChannelMgr::sourceHasFeatData(ChannelMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  ChannelMgr::validateChannelId(this, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v10 = *(uint64_t (**)(void))(**(void **)(*((void *)this + 6) + 8 * a2) + 192);

  return v10();
}

uint64_t ChannelMgr::getUtterance(ChannelMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 30) <= a2 || (uint64_t result = *(void *)(*((void *)this + 14) + 8 * a2)) == 0)
  {
    uint64_t v10 = a2;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/chanmgr.cpp", 522, (uint64_t)"channel/chanmgr", 1, (uint64_t)"%u", a7, a8, a2);
    return *(void *)(*((void *)this + 14) + 8 * v10);
  }
  return result;
}

ChannelMgr *ChannelMgr::collectAvailableDataForUtt(ChannelMgr *this, Utterance *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(unsigned int *)a2;
  if ((v8 - 1) <= 0xFFFFFFFD)
  {
    int v9 = this;
    ChannelMgr::validateChannelId(this, *(_DWORD *)a2, a3, a4, a5, a6, a7, a8);
    uint64_t v10 = *(uint64_t (**)(void))(**(void **)(*((void *)v9 + 6) + 8 * v8) + 200);
    return (ChannelMgr *)v10();
  }
  return this;
}

double ChannelMgr::collectThroughUttFrame@<D0>(ChannelMgr *this@<X0>, Utterance *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _OWORD *a9@<X8>)
{
  uint64_t v9 = *(unsigned int *)a2;
  if ((v9 - 1) > 0xFFFFFFFD)
  {
    double result = 0.0;
    *a9 = 0u;
    a9[1] = 0u;
  }
  else
  {
    ChannelMgr::validateChannelId(this, *(_DWORD *)a2, a3, a4, a5, a6, a7, a8);
    uint64_t v11 = *(void (**)(void))(**(void **)(*((void *)this + 6) + 8 * v9) + 224);
    v11();
  }
  return result;
}

uint64_t ChannelMgr::setRecogCtlUtterance(ChannelMgr *this, Utterance *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(unsigned int *)a2;
  ChannelMgr::validateChannelId(this, *(_DWORD *)a2, a3, a4, a5, a6, a7, a8);
  uint64_t v10 = *(uint64_t (**)(void))(**(void **)(*((void *)this + 6) + 8 * v9) + 232);

  return v10();
}

uint64_t ChannelMgr::maybeSyncRecogCtlUtterance(ChannelMgr *this, Utterance *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(unsigned int *)a2;
  ChannelMgr::validateChannelId(this, *(_DWORD *)a2, a3, a4, a5, a6, a7, a8);
  uint64_t v10 = *(uint64_t (**)(void))(**(void **)(*((void *)this + 6) + 8 * v9) + 240);

  return v10();
}

uint64_t ChannelMgr::maybeStartCollectingDataForUtt(ChannelMgr *this, Utterance *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(unsigned int *)a2;
  if ((v8 - 1) > 0xFFFFFFFD) {
    return 0;
  }
  ChannelMgr::validateChannelId(this, *(_DWORD *)a2, a3, a4, a5, a6, a7, a8);
  uint64_t v10 = *(uint64_t (**)(void))(**(void **)(*((void *)this + 6) + 8 * v8) + 248);

  return v10();
}

double ChannelMgr::maybeStopCollectingDataForUtt@<D0>(ChannelMgr *this@<X0>, Utterance *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _OWORD *a9@<X8>)
{
  uint64_t v9 = *(unsigned int *)a2;
  if ((v9 - 1) > 0xFFFFFFFD)
  {
    double result = 0.0;
    *a9 = 0u;
    a9[1] = 0u;
  }
  else
  {
    ChannelMgr::validateChannelId(this, *(_DWORD *)a2, a3, a4, a5, a6, a7, a8);
    uint64_t v11 = *(void (**)(void))(**(void **)(*((void *)this + 6) + 8 * v9) + 256);
    v11();
  }
  return result;
}

Utterance *DgnDelete<Utterance>(Utterance *result)
{
  if (result)
  {
    Utterance::~Utterance(result);
    return (Utterance *)MemChunkFree(v1, 0);
  }
  return result;
}

void ChannelMgr::saveSigProc(ChannelMgr *a1, unsigned int a2, uint64_t a3, _DWORD *a4, int a5, int a6)
{
  LoadSaveTracker::LoadSaveTracker((LoadSaveTracker *)&v19);
  uint64_t SigProc = ChannelMgr::getSigProc(a1, a2, v12, v13, v14, v15, v16, v17);
  SigProc::saveSigProc(SigProc, a3, a4, a5, a6);
  LoadSaveTracker::~LoadSaveTracker((LoadSaveTracker *)&v19);
}

void sub_213F85338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t ChannelMgr::getSigProc(ChannelMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 46) <= a2 || (uint64_t result = *(void *)(*((void *)this + 22) + 8 * a2)) == 0)
  {
    uint64_t v10 = a2;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/chanmgr.cpp", 734, (uint64_t)"channel/chanmgr", 3, (uint64_t)"%u", a7, a8, a2);
    return *(void *)(*((void *)this + 22) + 8 * v10);
  }
  return result;
}

SigProc *DgnDelete<SigProc>(SigProc *result)
{
  if (result)
  {
    SigProc::~SigProc(result);
    return (SigProc *)MemChunkFree(v1, 0);
  }
  return result;
}

void ChannelMgr::printSize(ChannelMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/chanmgr.cpp", 850, (DgnString *)&v196);
  if (v197) {
    uint64_t v16 = (void *)v196;
  }
  else {
    uint64_t v16 = &unk_2140A677D;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_2140A677D, a3, &unk_2140A677D, v16);
  uint64_t v192 = a6;
  DgnString::~DgnString((DgnString *)&v196);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_2140A677D);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/chanmgr.cpp", 851, (DgnString *)&v196);
  if (v197) {
    uint64_t v25 = (void *)v196;
  }
  else {
    uint64_t v25 = &unk_2140A677D;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v21, v22, v23, v24, (a3 + 1), &unk_2140A677D, (a3 + 1), &unk_2140A677D, v25);
  DgnString::~DgnString((DgnString *)&v196);
  uint64_t v193 = (a3 + 1);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v26, v27, v28, v29, v193, &unk_2140A677D);
  unint64_t v30 = *((unsigned int *)this + 14);
  if (v30)
  {
    unint64_t v31 = 0;
    uint64_t v32 = 0;
    do
    {
      uint64_t v33 = *((void *)this + 6);
      if (*(void *)(v33 + 8 * v31))
      {
        unint64_t v196 = 0;
        unint64_t v194 = 0;
        unint64_t v195 = 0;
        (*(void (**)(void))(**(void **)(v33 + 8 * v31) + 288))();
        v32 += v196;
        unint64_t v30 = *((unsigned int *)this + 14);
      }
      ++v31;
    }
    while (v31 < v30);
  }
  else
  {
    uint64_t v32 = 0;
    unint64_t v30 = 0;
  }
  uint64_t v34 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v34 = 16;
  }
  char v35 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    char v35 = 3;
  }
  unint64_t v36 = v34 + v32 + ((unint64_t)*((unsigned int *)this + 15) << v35);
  uint64_t v37 = v34 + (v30 << v35);
  uint64_t v38 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/chanmgr.cpp", 851, (DgnString *)&v196);
  if (v197) {
    unsigned int v43 = (void *)v196;
  }
  else {
    unsigned int v43 = &unk_2140A677D;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v39, v40, v41, v42, v193, &unk_2140A677D, (34 - a3), (34 - a3), v43, v36, v37, 0);
  DgnString::~DgnString((DgnString *)&v196);
  *a4 += v36;
  *a5 += v37;
  *a6 = *a6;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/chanmgr.cpp", 852, (DgnString *)&v196);
  if (v197) {
    uint64_t v48 = (void *)v196;
  }
  else {
    uint64_t v48 = &unk_2140A677D;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v44, v45, v46, v47, v193, &unk_2140A677D, v193, &unk_2140A677D, v48);
  uint64_t v191 = a3;
  DgnString::~DgnString((DgnString *)&v196);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v49, v50, v51, v52, v193, &unk_2140A677D);
  unint64_t v53 = *((unsigned int *)this + 30);
  if (v53)
  {
    unint64_t v54 = 0;
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    do
    {
      uint64_t v58 = *((void *)this + 14);
      if (*(void *)(v58 + 8 * v54))
      {
        unint64_t v196 = 0;
        unint64_t v194 = 0;
        unint64_t v195 = 0;
        Utterance::printSize(*(Utterance **)(v58 + 8 * v54), v54, (v191 + 2), &v196, &v195, &v194);
        v57 += v196;
        v56 += v195;
        v55 += v194;
        unint64_t v53 = *((unsigned int *)this + 30);
      }
      ++v54;
    }
    while (v54 < v53);
  }
  else
  {
    uint64_t v57 = 0;
    uint64_t v56 = 0;
    uint64_t v55 = 0;
    unint64_t v53 = 0;
  }
  uint64_t v59 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v59 = 16;
  }
  uint64_t v60 = v59 + v57;
  uint64_t v61 = v59 + v56;
  char v62 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    char v62 = 3;
  }
  uint64_t v63 = v60 + ((unint64_t)*((unsigned int *)this + 31) << v62);
  uint64_t v64 = v61 + (v53 << v62);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/chanmgr.cpp", 852, (DgnString *)&v196);
  if (v197) {
    uint64_t v69 = (void *)v196;
  }
  else {
    uint64_t v69 = &unk_2140A677D;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v65, v66, v67, v68, v193, &unk_2140A677D, v38, v38, v69, v63, v64, v55);
  DgnString::~DgnString((DgnString *)&v196);
  *a4 += v63;
  *a5 += v64;
  *v192 += v55;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/chanmgr.cpp", 853, (DgnString *)&v196);
  if (v197) {
    __int16 v74 = (void *)v196;
  }
  else {
    __int16 v74 = &unk_2140A677D;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v70, v71, v72, v73, v193, &unk_2140A677D, v193, &unk_2140A677D, v74);
  DgnString::~DgnString((DgnString *)&v196);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v75, v76, v77, v78, v193, &unk_2140A677D);
  unint64_t v79 = *((unsigned int *)this + 46);
  if (v79)
  {
    unint64_t v80 = 0;
    uint64_t v81 = 0;
    uint64_t v82 = 0;
    uint64_t v83 = 0;
    uint64_t v84 = v192;
    do
    {
      uint64_t v85 = *((void *)this + 22);
      if (*(void *)(v85 + 8 * v80))
      {
        unint64_t v196 = 0;
        unint64_t v194 = 0;
        unint64_t v195 = 0;
        SigProc::printSize(*(SigProc **)(v85 + 8 * v80), v80, (v191 + 2), &v196, &v195, &v194);
        v83 += v196;
        v82 += v195;
        v81 += v194;
        unint64_t v79 = *((unsigned int *)this + 46);
      }
      ++v80;
    }
    while (v80 < v79);
  }
  else
  {
    uint64_t v83 = 0;
    uint64_t v82 = 0;
    uint64_t v81 = 0;
    unint64_t v79 = 0;
    uint64_t v84 = v192;
  }
  uint64_t v86 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v86 = 16;
  }
  uint64_t v87 = v86 + v83;
  uint64_t v88 = v86 + v82;
  char v89 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    char v89 = 3;
  }
  uint64_t v90 = v87 + ((unint64_t)*((unsigned int *)this + 47) << v89);
  uint64_t v91 = v88 + (v79 << v89);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/chanmgr.cpp", 853, (DgnString *)&v196);
  if (v197) {
    __int16 v96 = (void *)v196;
  }
  else {
    __int16 v96 = &unk_2140A677D;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v92, v93, v94, v95, v193, &unk_2140A677D, v38, v38, v96, v90, v91, v81);
  DgnString::~DgnString((DgnString *)&v196);
  *a4 += v90;
  *a5 += v91;
  *v84 += v81;
  uint64_t v97 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v97 = 16;
  }
  int v98 = *((_DWORD *)this + 6);
  unsigned int v99 = *((_DWORD *)this + 7);
  uint64_t v100 = v97 + 4 * (v98 - 1) + 4;
  if (v98 <= 0) {
    uint64_t v100 = v97;
  }
  BOOL v101 = v99 >= v98;
  uint64_t v102 = v100 + 4 * (v99 - v98);
  if (v101) {
    uint64_t v97 = v102;
  }
  uint64_t v103 = v97 + 24;
  uint64_t v104 = DgnPrimQueue<unsigned int,DgnPrimArray<unsigned int>>::sizeObject((_DWORD *)this + 4, 1u) + 12;
  uint64_t v105 = *((unsigned int *)this + 6);
  if (v105 <= *((_DWORD *)this + 7)) {
    uint64_t v106 = 0;
  }
  else {
    uint64_t v106 = 4 * v105;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/chanmgr.cpp", 855, (DgnString *)&v196);
  if (v197) {
    uint64_t v111 = (void *)v196;
  }
  else {
    uint64_t v111 = &unk_2140A677D;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v107, v108, v109, v110, v193, &unk_2140A677D, v38, v38, v111, v103, v104, v106);
  DgnString::~DgnString((DgnString *)&v196);
  *a4 += v103;
  *a5 += v104;
  *v84 += v106;
  uint64_t v112 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v112 = 16;
  }
  int v113 = *((_DWORD *)this + 22);
  unsigned int v114 = *((_DWORD *)this + 23);
  BOOL v101 = v114 >= v113;
  unsigned int v115 = v114 - v113;
  if (v101)
  {
    if (v113 > 0) {
      v112 += 4 * (v113 - 1) + 4;
    }
    v112 += 4 * v115;
  }
  uint64_t v116 = v112 + 24;
  uint64_t v117 = DgnPrimQueue<unsigned int,DgnPrimArray<unsigned int>>::sizeObject((_DWORD *)this + 20, 1u) + 12;
  uint64_t v118 = *((unsigned int *)this + 22);
  if (v118 <= *((_DWORD *)this + 23)) {
    uint64_t v119 = 0;
  }
  else {
    uint64_t v119 = 4 * v118;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/chanmgr.cpp", 856, (DgnString *)&v196);
  if (v197) {
    unint64_t v124 = (void *)v196;
  }
  else {
    unint64_t v124 = &unk_2140A677D;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v120, v121, v122, v123, v193, &unk_2140A677D, v38, v38, v124, v116, v117, v119);
  DgnString::~DgnString((DgnString *)&v196);
  *a4 += v116;
  *a5 += v117;
  *v84 += v119;
  uint64_t v125 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v125 = 16;
  }
  int v126 = *((_DWORD *)this + 38);
  unsigned int v127 = *((_DWORD *)this + 39);
  BOOL v101 = v127 >= v126;
  unsigned int v128 = v127 - v126;
  if (v101)
  {
    if (v126 > 0) {
      v125 += 4 * (v126 - 1) + 4;
    }
    v125 += 4 * v128;
  }
  uint64_t v129 = v125 + 24;
  uint64_t v130 = DgnPrimQueue<unsigned int,DgnPrimArray<unsigned int>>::sizeObject((_DWORD *)this + 36, 1u) + 12;
  uint64_t v131 = *((unsigned int *)this + 38);
  if (v131 <= *((_DWORD *)this + 39)) {
    uint64_t v132 = 0;
  }
  else {
    uint64_t v132 = 4 * v131;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/chanmgr.cpp", 858, (DgnString *)&v196);
  if (v197) {
    uint64_t v137 = (void *)v196;
  }
  else {
    uint64_t v137 = &unk_2140A677D;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v133, v134, v135, v136, v193, &unk_2140A677D, v38, v38, v137, v129, v130, v132);
  DgnString::~DgnString((DgnString *)&v196);
  *a4 += v129;
  *a5 += v130;
  *v84 += v132;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v138 = 12;
  }
  else {
    uint64_t v138 = 16;
  }
  uint64_t v139 = *((unsigned int *)this + 50);
  unsigned int v140 = *((_DWORD *)this + 51);
  if (v140 >= v139)
  {
    uint64_t v141 = 0;
    if ((int)v139 > 0) {
      v138 += 4 * (v139 - 1) + 4;
    }
    uint64_t v142 = v138 + 4 * (v140 - v139);
  }
  else
  {
    uint64_t v141 = 4 * v139;
    uint64_t v142 = v138;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/chanmgr.cpp", 860, (DgnString *)&v196);
  if (v197) {
    uint64_t v147 = (void *)v196;
  }
  else {
    uint64_t v147 = &unk_2140A677D;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v143, v144, v145, v146, v193, &unk_2140A677D, v38, v38, v147, v142, v138, v141);
  DgnString::~DgnString((DgnString *)&v196);
  *a4 += v142;
  *a5 += v138;
  *v84 += v141;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v148 = 12;
  }
  else {
    uint64_t v148 = 16;
  }
  uint64_t v149 = *((unsigned int *)this + 54);
  unsigned int v150 = *((_DWORD *)this + 55);
  if (v150 >= v149)
  {
    uint64_t v151 = 0;
    if ((int)v149 > 0) {
      v148 += 4 * (v149 - 1) + 4;
    }
    uint64_t v152 = v148 + 4 * (v150 - v149);
  }
  else
  {
    uint64_t v151 = 4 * v149;
    uint64_t v152 = v148;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/chanmgr.cpp", 862, (DgnString *)&v196);
  if (v197) {
    uint64_t v157 = (void *)v196;
  }
  else {
    uint64_t v157 = &unk_2140A677D;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v153, v154, v155, v156, v193, &unk_2140A677D, v38, v38, v157, v152, v148, v151);
  DgnString::~DgnString((DgnString *)&v196);
  *a4 += v152;
  *a5 += v148;
  *v84 += v151;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v158 = 12;
  }
  else {
    uint64_t v158 = 16;
  }
  uint64_t v159 = *((unsigned int *)this + 58);
  unsigned int v160 = *((_DWORD *)this + 59);
  if (v160 >= v159)
  {
    uint64_t v161 = 0;
    if ((int)v159 > 0) {
      v158 += 4 * (v159 - 1) + 4;
    }
    uint64_t v162 = v158 + 4 * (v160 - v159);
  }
  else
  {
    uint64_t v161 = 4 * v159;
    uint64_t v162 = v158;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/chanmgr.cpp", 864, (DgnString *)&v196);
  if (v197) {
    uint64_t v167 = (void *)v196;
  }
  else {
    uint64_t v167 = &unk_2140A677D;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v163, v164, v165, v166, v193, &unk_2140A677D, v38, v38, v167, v162, v158, v161);
  DgnString::~DgnString((DgnString *)&v196);
  *a4 += v162;
  *a5 += v158;
  *v84 += v161;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v168 = 12;
  }
  else {
    uint64_t v168 = 16;
  }
  uint64_t v169 = *((unsigned int *)this + 62);
  unsigned int v170 = *((_DWORD *)this + 63);
  if (v170 >= v169)
  {
    uint64_t v171 = 0;
    if ((int)v169 > 0) {
      v168 += 4 * (v169 - 1) + 4;
    }
    uint64_t v172 = v168 + 4 * (v170 - v169);
  }
  else
  {
    uint64_t v171 = 4 * v169;
    uint64_t v172 = v168;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/chanmgr.cpp", 866, (DgnString *)&v196);
  if (v197) {
    uint64_t v177 = (void *)v196;
  }
  else {
    uint64_t v177 = &unk_2140A677D;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v173, v174, v175, v176, v193, &unk_2140A677D, v38, v38, v177, v172, v168, v171);
  DgnString::~DgnString((DgnString *)&v196);
  *a4 += v172;
  *a5 += v168;
  *v84 += v171;
  uint64_t v178 = (char *)this + 304;
  uint64_t v179 = sizeObject<ParamSetBase *>((uint64_t)this + 304, 0);
  uint64_t v180 = sizeObject<ParamSetBase *>((uint64_t)v178, 1);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/chanmgr.cpp", 868, (DgnString *)&v196);
  if (v197) {
    uint64_t v185 = (void *)v196;
  }
  else {
    uint64_t v185 = &unk_2140A677D;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v181, v182, v183, v184, v193, &unk_2140A677D, v38, v38, v185, v179, v180, 0);
  DgnString::~DgnString((DgnString *)&v196);
  *a4 += v179;
  *a5 += v180;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/channel/chanmgr.cpp", 869, (DgnString *)&v196);
  if (v197) {
    uint64_t v190 = (void *)v196;
  }
  else {
    uint64_t v190 = &unk_2140A677D;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v186, v187, v188, v189, v191, &unk_2140A677D, (35 - v191), (35 - v191), v190, *a4, *a5, *v84);
  DgnString::~DgnString((DgnString *)&v196);
}

void sub_213F86044(_Unwind_Exception *a1)
{
  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t ChannelMgr::getThreadId(ChannelMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  ChannelMgr::validateChannelId(this, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v10 = *(uint64_t (**)(void))(**(void **)(*((void *)this + 6) + 8 * a2) + 296);

  return v10();
}

void *DgnIOwnArray<Channel *>::releaseAll(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<Channel>(*(void *)(*(void *)a1 + v3));
      *(void *)(*(void *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  uint64_t result = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

void *DgnIOwnArray<Utterance *>::releaseAll(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<Utterance>(*(Utterance **)(*(void *)a1 + v3));
      *(void *)(*(void *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  uint64_t result = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

void *DgnIOwnArray<SigProc *>::releaseAll(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<SigProc>(*(SigProc **)(*(void *)a1 + v3));
      *(void *)(*(void *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  uint64_t result = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

void WordDummySpec::WordDummySpec(WordDummySpec *this)
{
  *(void *)((char *)this + 6) = 0;
  *(void *)this = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
}

uint64_t WordDummySpec::readObject(WordDummySpec *this, DgnStream *a2, unsigned int *a3)
{
  readObject((uint64_t)a2, (_DWORD *)this + 2, a3);
  readObject(a2, (double *)this, a3);
  readObject((uint64_t)a2, (BOOL *)this + 12, a3);
  readObject((uint64_t)a2, (BOOL *)this + 13, a3);
  readObject((uint64_t)a2, (_DWORD *)this + 4, a3);
  readObject((uint64_t)a2, (_DWORD *)this + 5, a3);
  readObject((uint64_t)a2, (_DWORD *)this + 6, a3);

  return readObject((uint64_t)a2, (_DWORD *)this + 7, a3);
}

void WordNgramBuildSpec::WordNgramBuildSpec(WordNgramBuildSpec *this, const WordDummySpec *a2)
{
  *(void *)this = *(void *)a2;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_WORD *)this + 6) = *((_WORD *)a2 + 6);
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
}

void WordNgramBuildSpec::loadWordDummySpecText(WordNgramBuildSpec *this, DFile *a2)
{
  DgnTextFileParser::DgnTextFileParser((DgnTextFileParser *)v34);
  DgnTextFileParser::openDgnTextFileParser((uint64_t)v34, (uint64_t)a2, 0x6Du, 1);
  DgnTextFileParser::verifyMatchingFileType((DgnTextFileParser *)v34, "WordDummySpec");
  v33[0] = 0;
  v33[1] = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v34, sWDS_Versions, (uint64_t)v33, v4, v5, v6, v7, v8);
  DgnTextFileParser::verifyFileVersionInRange((uint64_t)v34, (unsigned int *)v33, v9, v10, v11, v12, v13, v14);
  uint64_t v15 = (_DWORD *)((char *)this + 8);
  DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v34, "Depth", (unsigned int *)this + 2, 1, 1u, 4u);
  if (*((_DWORD *)this + 2) >= 4u) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordt.cpp", 225, (uint64_t)"lm/wordt", 11, (uint64_t)"%u %.500s", v16, v17, *v15);
  }
  DgnTextFile::getHeaderFieldReal((DgnTextFile *)v34, "AlienWordMinimumCount", (double *)this, 1, -1.0, 1.0);
  if (*(double *)this != -1.0 && *(double *)this < 0.0) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordt.cpp", 233, (uint64_t)"lm/wordt", 10, (uint64_t)"%.500s", v18, v19, (char)"AlienWordMinimumCount");
  }
  DgnTextFile::getHeaderFieldBool((DgnTextFile *)v34, "AllowNewWordCloning", (BOOL *)this + 12, 1);
  DgnTextFile::getHeaderFieldBool((DgnTextFile *)v34, "UseIgnoreInContextLmId", (BOOL *)this + 13, 1);
  if (*v15 >= 2u)
  {
    DgnTextFile::getHeaderFieldInteger((DgnTextFile *)v34, "BuildMaximumBigramCountToDiscount", (int *)this + 4, 1, -1, 0x7FFFFFFF);
    DgnTextFile::getHeaderFieldInteger((DgnTextFile *)v34, "BuildMaximumNumBigramRecords", (int *)this + 5, 1, -1, 0x7FFFFFFF);
    if (*v15 >= 3u)
    {
      DgnTextFile::getHeaderFieldInteger((DgnTextFile *)v34, "BuildMaximumTrigramCountToDiscount", (int *)this + 6, 1, -1, 0x7FFFFFFF);
      DgnTextFile::getHeaderFieldInteger((DgnTextFile *)v34, "BuildMaximumNumTrigramRecords", (int *)this + 7, 1, -1, 0x7FFFFFFF);
    }
  }
  DgnTextFileParser::verifyNoUnknownHeaderFields((DgnTextFileParser *)v34, v20, v21, v22, v23, v24, v25, v26);
  DgnTextFileParser::verifyMatchingNumFieldSpecs((DgnTextFileParser *)v34, 0, v27, v28, v29, v30, v31, v32);
  DgnTextFileParser::verifyNoBodyLines((DgnTextFileParser *)v34);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v33);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)v34);
}

void sub_213F86594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)va);
  _Unwind_Resume(a1);
}

void WordNgramBuildSpec::loadWordNgramBuildSpecText(WordNgramBuildSpec *this, DFile *a2)
{
  DgnTextFileParser::DgnTextFileParser((DgnTextFileParser *)v34);
  DgnTextFileParser::openDgnTextFileParser((uint64_t)v34, (uint64_t)a2, 0x6Bu, 1);
  DgnTextFileParser::verifyMatchingFileType((DgnTextFileParser *)v34, "WordNGramBuildSpec");
  v33[0] = 0;
  v33[1] = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v34, sWBS_Versions, (uint64_t)v33, v4, v5, v6, v7, v8);
  DgnTextFileParser::verifyFileVersionInRange((uint64_t)v34, (unsigned int *)v33, v9, v10, v11, v12, v13, v14);
  uint64_t v15 = (_DWORD *)((char *)this + 8);
  DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v34, "Depth", (unsigned int *)this + 2, 1, 1u, 4u);
  if (*((_DWORD *)this + 2) >= 4u) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordt.cpp", 289, (uint64_t)"lm/wordt", 13, (uint64_t)"%u %.500s", v16, v17, *v15);
  }
  DgnTextFile::getHeaderFieldReal((DgnTextFile *)v34, "AlienWordMinimumCount", (double *)this, 1, -1.0, 1.0);
  if (*(double *)this != -1.0 && *(double *)this < 0.0) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordt.cpp", 297, (uint64_t)"lm/wordt", 12, (uint64_t)"%.500s", v18, v19, (char)"AlienWordMinimumCount");
  }
  DgnTextFile::getHeaderFieldBool((DgnTextFile *)v34, "AllowNewWordCloning", (BOOL *)this + 12, 1);
  DgnTextFile::getHeaderFieldBool((DgnTextFile *)v34, "UseIgnoreInContextLmId", (BOOL *)this + 13, 1);
  if (*v15 >= 2u)
  {
    DgnTextFile::getHeaderFieldInteger((DgnTextFile *)v34, "BuildMaximumBigramCountToDiscount", (int *)this + 4, 1, -1, 0x7FFFFFFF);
    DgnTextFile::getHeaderFieldInteger((DgnTextFile *)v34, "BuildMaximumNumBigramRecords", (int *)this + 5, 1, -1, 0x7FFFFFFF);
    if (*v15 >= 3u)
    {
      DgnTextFile::getHeaderFieldInteger((DgnTextFile *)v34, "BuildMaximumTrigramCountToDiscount", (int *)this + 6, 1, -1, 0x7FFFFFFF);
      DgnTextFile::getHeaderFieldInteger((DgnTextFile *)v34, "BuildMaximumNumTrigramRecords", (int *)this + 7, 1, -1, 0x7FFFFFFF);
    }
  }
  DgnTextFileParser::verifyNoUnknownHeaderFields((DgnTextFileParser *)v34, v20, v21, v22, v23, v24, v25, v26);
  DgnTextFileParser::verifyMatchingNumFieldSpecs((DgnTextFileParser *)v34, 0, v27, v28, v29, v30, v31, v32);
  DgnTextFileParser::verifyNoBodyLines((DgnTextFileParser *)v34);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v33);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)v34);
}

void sub_213F86814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)va);
  _Unwind_Resume(a1);
}

void (***WordNgramBuildSpec::loadWordNgramBuildSpecBinary(WordNgramBuildSpec *this, DFile *a2, DFileChecksums *a3))(void)
{
  uint64_t v11 = 0;
  uint64_t v6 = (DgnStream *)OpenAndReadMrecHeader((uint64_t)a2, 0x6Au, 1, "LMWBSBIN", (_DWORD *)&v11 + 1, &v11);
  if (*((_DWORD *)a2 + 6)) {
    uint64_t v7 = (char *)*((void *)a2 + 2);
  }
  else {
    uint64_t v7 = &byte_2140B33BB;
  }
  MrecHeaderCheckVersions(v7, "LMWBSBIN", HIDWORD(v11), v11, 0x18u, 1u);
  unsigned int v10 = 0;
  readObject((uint64_t)v6, (_DWORD *)this + 2, &v10);
  readObject(v6, (double *)this, &v10);
  readObject((uint64_t)v6, (BOOL *)this + 12, &v10);
  readObject((uint64_t)v6, (BOOL *)this + 13, &v10);
  readObject((uint64_t)v6, (_DWORD *)this + 4, &v10);
  readObject((uint64_t)v6, (_DWORD *)this + 5, &v10);
  readObject((uint64_t)v6, (_DWORD *)this + 6, &v10);
  readObject((uint64_t)v6, (_DWORD *)this + 7, &v10);
  readObjectChecksumAndVerify(v6, v10);
  uint64_t CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
  DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x6Au, v10);
  return DgnDelete<DgnStream>((void (***)(void))v6);
}

void WordNgramBuildSpec::loadWordNgramBuildSpec(WordNgramBuildSpec *this, DFile *a2, DFileChecksums *a3, int a4)
{
  if (a4) {
    WordNgramBuildSpec::loadWordNgramBuildSpecText(this, a2);
  }
  else {
    WordNgramBuildSpec::loadWordNgramBuildSpecBinary(this, a2, a3);
  }
}

void WordNgramBuildSpec::saveWordNgramBuildSpecText(WordNgramBuildSpec *this, DFile *a2, int a3)
{
  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v15);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v15, (uint64_t)a2, 0x6Bu, a3);
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v15, sWBS_Versions, (uint64_t)&v13, v6, v7, v8, v9, v10);
  DgnTextFileWriter::setFileType((uint64_t)v15, "WordNGramBuildSpec", (void *)(v13 + 8 * (v14 - 1)));
  v12[0] = 0;
  v12[1] = 0;
  v11[0] = 0;
  v11[1] = 0;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v15, (uint64_t)v12, (uint64_t)v11);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v15, "Depth", *((unsigned int *)this + 2));
  DgnTextFileWriter::setHeaderFieldReal((DgnTextFileWriter *)v15, "AlienWordMinimumCount", *(double *)this);
  DgnTextFileWriter::setHeaderFieldBool((DgnTextFileWriter *)v15, "AllowNewWordCloning", *((unsigned __int8 *)this + 12));
  DgnTextFileWriter::setHeaderFieldBool((DgnTextFileWriter *)v15, "UseIgnoreInContextLmId", *((unsigned __int8 *)this + 13));
  if (*((_DWORD *)this + 2) >= 2u)
  {
    DgnTextFileWriter::setHeaderFieldInteger((DgnTextFileWriter *)v15, "BuildMaximumBigramCountToDiscount", *((_DWORD *)this + 4));
    DgnTextFileWriter::setHeaderFieldInteger((DgnTextFileWriter *)v15, "BuildMaximumNumBigramRecords", *((_DWORD *)this + 5));
    if (*((_DWORD *)this + 2) >= 3u)
    {
      DgnTextFileWriter::setHeaderFieldInteger((DgnTextFileWriter *)v15, "BuildMaximumTrigramCountToDiscount", *((_DWORD *)this + 6));
      DgnTextFileWriter::setHeaderFieldInteger((DgnTextFileWriter *)v15, "BuildMaximumNumTrigramRecords", *((_DWORD *)this + 7));
    }
  }
  DgnArray<DgnString>::releaseAll((uint64_t)v11);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v12);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v13);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v15);
}

void sub_213F86B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)va);
  _Unwind_Resume(a1);
}

void (***WordNgramBuildSpec::saveWordNgramBuildSpecBinary(WordNgramBuildSpec *this, DFile *a2, DFileChecksums *a3, int a4))(void)
{
  uint64_t v7 = OpenAndWriteMrecHeader((uint64_t)a2, 0x6Au, a4, "LMWBSBIN", 24, 1);
  unsigned int v15 = 0;
  writeObject((uint64_t)v7, (int *)this + 2, &v15);
  writeObject(v7, (const double *)this, &v15, v8, v9, v10, v11, v12);
  writeObject((uint64_t)v7, (unsigned __int8 *)this + 12, &v15);
  writeObject((uint64_t)v7, (unsigned __int8 *)this + 13, &v15);
  writeObject((uint64_t)v7, (int *)this + 4, &v15);
  writeObject((uint64_t)v7, (int *)this + 5, &v15);
  writeObject((uint64_t)v7, (int *)this + 6, &v15);
  writeObject((uint64_t)v7, (int *)this + 7, &v15);
  writeObjectChecksum((uint64_t)v7, (int *)&v15);
  uint64_t CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
  DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x6Au, v15);
  return DgnDelete<DgnStream>((void (***)(void))v7);
}

void WordNgramBuildSpec::saveWordNgramBuildSpec(WordNgramBuildSpec *this, DFile *a2, DFileChecksums *a3, int a4, DFileChecksums *a5)
{
  if (a4) {
    WordNgramBuildSpec::saveWordNgramBuildSpecText(this, a2, (int)a5);
  }
  else {
    WordNgramBuildSpec::saveWordNgramBuildSpecBinary(this, a2, a3, (int)a5);
  }
}

uint64_t WordIdToHeadCloneWordIdMap::getHeadCloneForVisibleWordId(WordIdToHeadCloneWordIdMap *this, unsigned int a2)
{
  unsigned int v6 = a2;
  if (*((_DWORD *)this + 2) <= a2 && *((_DWORD *)this + 3) >= a2) {
    return 0xFFFFFFLL;
  }
  if (a2 >> 4 < *((_DWORD *)this + 34))
  {
    int v2 = (*(_DWORD *)(*((void *)this + 16) + 4 * (a2 >> 4)) >> (2 * (a2 & 0xF))) & 3;
    if (v2) {
      return a2 - v2;
    }
  }
  Bucket = HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket((uint64_t)this + 16, (int *)&v6);
  if (*Bucket) {
    uint64_t v5 = (int *)(*Bucket + 2);
  }
  else {
    uint64_t v5 = (int *)&v6;
  }
  return *v5;
}

uint64_t WordIdToHeadCloneWordIdMap::getHeadCloneForWordId(WordIdToHeadCloneWordIdMap *this, unsigned int a2)
{
  uint64_t v2 = *(void *)this;
  if (*(_DWORD *)(*(void *)this + 388) > a2 && *(unsigned char *)(*(void *)(v2 + 104) + a2)) {
    return WordIdToHeadCloneWordIdMap::getHeadCloneForVisibleWordId(this, *(_DWORD *)(*(void *)(v2 + 256) + 4 * a2));
  }
  else {
    return 0xFFFFFFLL;
  }
}

uint64_t WordIdToHeadCloneWordIdMap::addVisibleWordIdMap(WordIdToHeadCloneWordIdMap *this, unsigned int a2, unsigned int a3)
{
  unsigned int v7 = a3;
  unsigned int v8 = a2;
  BOOL v4 = a2 >= a3;
  unsigned int v5 = a2 - a3;
  if (v5 == 0 || !v4) {
    return Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::add((uint64_t)this + 16, (int *)&v8, &v7);
  }
  uint64_t result = WordIdToHeadCloneWordIdMap::setDecrementForWordId(this, a2, v5);
  if ((result & 1) == 0) {
    return Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::add((uint64_t)this + 16, (int *)&v8, &v7);
  }
  return result;
}

BOOL WordIdToHeadCloneWordIdMap::setDecrementForWordId(WordIdToHeadCloneWordIdMap *this, unsigned int a2, unsigned int a3)
{
  if (a3 <= 3)
  {
    char v4 = a2;
    unsigned int v6 = a2 >> 4;
    unsigned int v7 = *((_DWORD *)this + 34);
    if (a3 || v7 > v6)
    {
      if (v7 <= v6)
      {
        do
        {
          if (v7 == *((_DWORD *)this + 35))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 128, 1, 1);
            unsigned int v7 = *((_DWORD *)this + 34);
          }
          uint64_t v8 = *((void *)this + 16);
          *(_DWORD *)(v8 + 4 * v7) = 0;
          unsigned int v7 = *((_DWORD *)this + 34) + 1;
          *((_DWORD *)this + 34) = v7;
        }
        while (v7 <= v6);
      }
      else
      {
        uint64_t v8 = *((void *)this + 16);
      }
      *(_DWORD *)(v8 + 4 * v6) = *(_DWORD *)(v8 + 4 * v6) & ~(3 << (2 * (v4 & 0xF))) | (a3 << (2 * (v4 & 0xF)));
    }
  }
  return a3 < 4;
}

uint64_t Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::add(uint64_t result, int *a2, _DWORD *a3)
{
  uint64_t v5 = result;
  unsigned int v6 = *(_DWORD *)(result + 12);
  if (*(_DWORD *)(result + 8) >= v6 >> 1) {
    uint64_t result = HashKEV<unsigned int,unsigned int,CWIDScope>::upSize(result, 2 * v6);
  }
  int v7 = *a2;
  int v8 = *(_DWORD *)(v5 + 16);
  if (v8) {
    unsigned int v9 = (-1640531527 * *a2) >> -(char)v8;
  }
  else {
    unsigned int v9 = 0;
  }
  uint64_t v10 = *(void *)(v5 + 80);
  uint64_t v11 = *(void *)(v5 + 32);
  if (!v11)
  {
    uint64_t result = DgnPool::addChunk((DgnPool *)(v5 + 24));
    uint64_t v11 = *(void *)(v5 + 32);
  }
  uint64_t v12 = (void *)(v10 + 8 * v9);
  *(void *)(v5 + 32) = *(void *)v11;
  *(_DWORD *)(v11 + 8) = 0;
  *(_DWORD *)(v11 + 12) = *a2;
  *(_DWORD *)(v11 + 16) = *a3;
  *(_DWORD *)(v11 + 8) = v7;
  ++*(_DWORD *)(v5 + 8);
  if (*(unsigned char *)(v5 + 20))
  {
    *(void *)uint64_t v11 = *v12;
  }
  else
  {
    *(void *)uint64_t v11 = 0;
    uint64_t v13 = (void *)*v12;
    if (*v12)
    {
      do
      {
        uint64_t v12 = v13;
        uint64_t v13 = (void *)*v13;
      }
      while (v13);
    }
  }
  *uint64_t v12 = v11;
  return result;
}

BOOL WordIdToHeadCloneWordIdMap::isHeadCloneWordId(WordIdToHeadCloneWordIdMap *this, unsigned int a2)
{
  unsigned int v5 = a2;
  uint64_t v2 = *(void *)this;
  if (*(_DWORD *)(*(void *)this + 388) <= a2
    || !*(unsigned char *)(*(void *)(v2 + 104) + a2)
    || *(_DWORD *)(*(void *)(v2 + 256) + 4 * a2) != a2
    || a2 >> 4 < *((_DWORD *)this + 34)
    && ((*(_DWORD *)(*((void *)this + 16) + 4 * (a2 >> 4)) >> (2 * (a2 & 0xF))) & 3) != 0
    || *HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket((uint64_t)this + 16, (int *)&v5))
  {
    return 0;
  }
  if (v5 >= *((_DWORD *)this + 2)) {
    return v5 > *((_DWORD *)this + 3);
  }
  return 1;
}

uint64_t WordIdToHeadCloneWordIdMap::deleteWord(WordIdToHeadCloneWordIdMap *this, unsigned int a2)
{
  unsigned int v42 = a2;
  uint64_t result = WordIdToHeadCloneWordIdMap::isHeadCloneWordId(this, a2);
  if (!result)
  {
    uint64_t v14 = *(void *)this;
    if (*(_DWORD *)(*(void *)this + 388) > a2
      && *(unsigned char *)(*(void *)(v14 + 104) + a2)
      && *(_DWORD *)(*(void *)(v14 + 256) + 4 * a2) == a2)
    {
      WordIdToHeadCloneWordIdMap::setDecrementForWordId(this, a2, 0);
      return Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::removeIfPresent((uint64_t)this + 16, (int *)&v42);
    }
    return result;
  }
  char v5 = 2 * a2 + 2;
  unsigned int v6 = 1;
  unsigned int v7 = 0xFFFFFF;
  do
  {
    int v8 = a2 + v6;
    unsigned int v9 = (a2 + v6) >> 4;
    if (v9 >= *((_DWORD *)this + 34))
    {
      int v8 = 0xFFFFFF;
    }
    else if (v6 == ((*(_DWORD *)(*((void *)this + 16) + 4 * v9) >> (v5 & 0x1E)) & 3))
    {
      unsigned int v7 = a2 + v6;
    }
    else
    {
      int v8 = 0xFFFFFF;
    }
    if (v6 > 2) {
      break;
    }
    ++v6;
    v5 += 2;
  }
  while (v8 == 0xFFFFFF);
  uint64_t v10 = *((unsigned int *)this + 7);
  if (v10)
  {
    uint64_t v11 = (void *)*((void *)this + 12);
    uint64_t v12 = (uint64_t *)*v11;
    if (*v11)
    {
      LODWORD(v13) = 0;
    }
    else
    {
      uint64_t v13 = 0;
      unsigned int v15 = v11 + 1;
      do
      {
        if (v10 - 1 == v13) {
          goto LABEL_35;
        }
        uint64_t v12 = (uint64_t *)v15[v13++];
      }
      while (!v12);
    }
  }
  else
  {
    LODWORD(v13) = 0;
    uint64_t v12 = 0;
  }
  while (v13 < v10 && v7 == 0xFFFFFF)
  {
    if (*((_DWORD *)v12 + 4) == a2) {
      unsigned int v7 = *((_DWORD *)v12 + 3);
    }
    else {
      unsigned int v7 = 0xFFFFFF;
    }
    if (*v12)
    {
      uint64_t v12 = (uint64_t *)*v12;
    }
    else
    {
      uint64_t v13 = (v13 + 1);
      if (v13 < v10)
      {
        uint64_t v16 = *((void *)this + 12);
        uint64_t v12 = *(uint64_t **)(v16 + 8 * v13);
        if (!v12)
        {
          uint64_t v17 = (uint64_t **)(v16 + 8 * v13 + 8);
          uint64_t v18 = v10 - 1 - v13;
          while (v18)
          {
            uint64_t v19 = *v17++;
            uint64_t v12 = v19;
            LODWORD(v13) = v13 + 1;
            --v18;
            if (v19) {
              goto LABEL_33;
            }
          }
          break;
        }
      }
    }
LABEL_33:
    ;
  }
LABEL_35:
  unsigned int v41 = v7;
  if (v7 == 0xFFFFFF) {
    return result;
  }
  WordIdToHeadCloneWordIdMap::setDecrementForWordId(this, v7, 0);
  char v20 = 2 * a2 + 2;
  for (int i = 1; i != 4; ++i)
  {
    unsigned int v22 = (a2 + i) >> 4;
    if (v22 < *((_DWORD *)this + 34)
      && i == ((*(_DWORD *)(*((void *)this + 16) + 4 * v22) >> (v20 & 0x1E)) & 3)
      && a2 - v7 + i != 0)
    {
      WordIdToHeadCloneWordIdMap::setDecrementForWordId(this, a2 + i, 0);
      WordIdToHeadCloneWordIdMap::addVisibleWordIdMap(this, a2 + i, v7);
    }
    v20 += 2;
  }
  Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::removeIfPresent((uint64_t)this + 16, (int *)&v41);
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v24 = *((unsigned int *)this + 7);
  if (v24)
  {
    uint64_t v25 = (void *)*((void *)this + 12);
    uint64_t v26 = (uint64_t *)*v25;
    if (!*v25)
    {
      uint64_t v27 = 0;
      uint64_t v28 = v25 + 1;
      do
      {
        if (v24 - 1 == v27) {
          return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v39);
        }
        uint64_t v26 = (uint64_t *)v28[v27++];
      }
      while (!v26);
      goto LABEL_52;
    }
  }
  else
  {
    uint64_t v26 = 0;
  }
  LODWORD(v27) = 0;
LABEL_52:
  if (v27 >= v24) {
    return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v39);
  }
  uint64_t v29 = 0;
  unsigned int v30 = 0;
  while (1)
  {
    int v31 = *((_DWORD *)v26 + 3);
    if (v31 != v41 && *((_DWORD *)v26 + 4) == a2)
    {
      if (v30 == HIDWORD(v40))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v39, 1, 1);
        unsigned int v30 = v40;
        uint64_t v29 = v39;
      }
      *(_DWORD *)(v29 + 4 * v30) = v31;
      unsigned int v30 = v40 + 1;
      LODWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = v40 + 1;
      LODWORD(v24) = *((_DWORD *)this + 7);
    }
    uint64_t v32 = (uint64_t *)*v26;
    if (*v26) {
      goto LABEL_67;
    }
    uint64_t v27 = (v27 + 1);
    if (v27 >= v24)
    {
      uint64_t v32 = v26;
      goto LABEL_67;
    }
    uint64_t v33 = *((void *)this + 12);
    uint64_t v32 = *(uint64_t **)(v33 + 8 * v27);
    if (!v32) {
      break;
    }
LABEL_67:
    uint64_t v26 = v32;
    if (v27 >= v24) {
      goto LABEL_68;
    }
  }
  uint64_t v34 = (uint64_t *)(v33 + 8 * v27 + 8);
  uint64_t v35 = ~v27 + v24;
  while (v35)
  {
    unint64_t v36 = (uint64_t *)*v34++;
    uint64_t v32 = v36;
    LODWORD(v27) = v27 + 1;
    --v35;
    if (v36) {
      goto LABEL_67;
    }
  }
LABEL_68:
  if (v30)
  {
    unint64_t v37 = 0;
    do
    {
      unsigned int v38 = 0;
      unsigned int v38 = *(_DWORD *)(v39 + 4 * v37);
      Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::remove((uint64_t)this + 16, (int *)&v38);
      WordIdToHeadCloneWordIdMap::addVisibleWordIdMap(this, v38, v41);
      ++v37;
    }
    while (v37 < v40);
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v39);
}

void sub_213F873D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::removeIfPresent(uint64_t a1, int *a2)
{
  Bucket = (char **)HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket(a1, a2);
  char v4 = *Bucket;
  if (*Bucket) {
    Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::removeBucket(a1, Bucket);
  }
  return v4 != 0;
}

uint64_t **Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::remove(uint64_t a1, int *a2)
{
  uint64_t result = HashKEV<unsigned int,unsigned int,StateIdScope>::findBucket(a1, a2);
  if (*result)
  {
    return (uint64_t **)Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::removeBucket(a1, (char **)result);
  }
  return result;
}

uint64_t writeObject<unsigned int,unsigned int,WordIdScope,unsigned int>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v21 = *(_DWORD *)(a2 + 8);
  writeObject(a1, &v21, a3);
  int v20 = *(_DWORD *)(a2 + 12);
  writeObject(a1, &v20, a3);
  int v19 = *(unsigned __int8 *)(a2 + 20);
  uint64_t result = writeObject(a1, &v19, a3);
  uint64_t v7 = *(unsigned int *)(a2 + 12);
  if (!v7)
  {
    unsigned int v9 = 0;
    goto LABEL_8;
  }
  int v8 = *(void ***)(a2 + 80);
  unsigned int v9 = *v8;
  if (*v8)
  {
LABEL_8:
    LODWORD(v10) = 0;
    goto LABEL_9;
  }
  uint64_t v10 = 0;
  uint64_t v11 = v8 + 1;
  while (v7 - 1 != v10)
  {
    unsigned int v9 = v11[v10++];
    if (v9)
    {
LABEL_9:
      while (v10 < v7)
      {
        if (v9) {
          uint64_t v12 = (int *)v9 + 3;
        }
        else {
          uint64_t v12 = 0;
        }
        if (v9) {
          uint64_t v13 = (int *)(v9 + 2);
        }
        else {
          uint64_t v13 = 0;
        }
        writeObject(a1, v12, a3);
        uint64_t result = writeObject(a1, v13, a3);
        uint64_t v14 = (void *)*v9;
        uint64_t v7 = *(unsigned int *)(a2 + 12);
        if (!*v9)
        {
          uint64_t v10 = (v10 + 1);
          if (v10 >= v7)
          {
            uint64_t v14 = v9;
          }
          else
          {
            uint64_t v15 = *(void *)(a2 + 80);
            uint64_t v14 = *(void **)(v15 + 8 * v10);
            if (!v14)
            {
              uint64_t v16 = (void *)(v15 + 8 * v10 + 8);
              uint64_t v17 = ~v10 + v7;
              while (v17)
              {
                uint64_t v18 = (void *)*v16++;
                uint64_t v14 = v18;
                LODWORD(v10) = v10 + 1;
                --v17;
                if (v18) {
                  goto LABEL_24;
                }
              }
              return result;
            }
          }
        }
LABEL_24:
        unsigned int v9 = v14;
      }
      return result;
    }
  }
  return result;
}

void WordNgramTemplate::WordNgramTemplate(WordNgramTemplate *this, const WordList *a2, int a3, int a4)
{
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 2) = a2;
  *((_DWORD *)this + 6) = a3;
  *((_DWORD *)this + 7) = a4;
  *(unsigned char *)this = 0;
  *((void *)this + 20) = a2;
  *((void *)this + 21) = 0;
}

void WordNgramTemplate::WordNgramTemplate(WordNgramTemplate *this, const WordList *a2, int a3, int a4, const WordLanguageModel *a5)
{
  *((void *)this + 18) = 0;
  *((void *)this + 2) = a2;
  *((_DWORD *)this + 6) = a3;
  *((_DWORD *)this + 7) = a4;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = a2;
  *((void *)this + 21) = a5;
  WordNgramTemplate::fillInFromTemplateLanguageModel(this);
}

void sub_213F877A4(_Unwind_Exception *a1)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2);
  Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::~Hash(v1);
  _Unwind_Resume(a1);
}

uint64_t WordNgramTemplate::fillInFromTemplateLanguageModel(WordNgramTemplate *this)
{
  unint64_t v2 = *((void *)this + 21);
  *(unsigned char *)this = *(unsigned char *)(v2 + 80);
  v18[0] = 0;
  v18[1] = 0;
  v17[0] = 0;
  v17[1] = 0;
  WordLanguageModel::constructLmIdToWordIdMapping(v2, (uint64_t)v18, (uint64_t)v17);
  uint64_t v3 = *((void *)this + 20);
  if (*(_DWORD *)(v3 + 388))
  {
    unint64_t v4 = 0;
    do
    {
      if (*(unsigned char *)(*(void *)(v3 + 104) + v4))
      {
        if (v4 == *(_DWORD *)(*(void *)(v3 + 256) + 4 * v4))
        {
          unsigned int LmId = WordLanguageModel::getLmId(*((WordLanguageModel **)this + 21), v4);
          if (LmId != -1)
          {
            uint64_t v6 = *(unsigned int *)(v18[0] + 4 * LmId);
            if (v4 != v6) {
              WordIdToHeadCloneWordIdMap::addVisibleWordIdMap((WordNgramTemplate *)((char *)this + 16), v4, v6);
            }
          }
        }
      }
      ++v4;
      uint64_t v3 = *((void *)this + 20);
    }
    while (v4 < *(unsigned int *)(v3 + 388));
  }
  *((_DWORD *)this + 1) = 16777212;
  uint64_t v7 = (unsigned int *)*((void *)this + 21);
  uint64_t v8 = v7[28];
  if (v8 != -1)
  {
    unsigned int v9 = *(_DWORD *)(v18[0] + 4 * v8);
    HeadCloneForVisibleint WordId = 16777214;
    if (v9 != 16777214)
    {
      HeadCloneForVisibleint WordId = WordIdToHeadCloneWordIdMap::getHeadCloneForVisibleWordId((WordNgramTemplate *)((char *)this + 16), v9);
      uint64_t v7 = (unsigned int *)*((void *)this + 21);
    }
    *((_DWORD *)this + 1) = HeadCloneForVisibleWordId;
  }
  *((_DWORD *)this + 2) = 0xFFFFFF;
  uint64_t v11 = v7[29];
  if (v11 != -1)
  {
    HeadCloneForint WordId = 16777213;
    unsigned int v13 = *(_DWORD *)(v18[0] + 4 * v11);
    if (v13 != 16777213)
    {
      HeadCloneForint WordId = WordIdToHeadCloneWordIdMap::getHeadCloneForWordId((WordNgramTemplate *)((char *)this + 16), v13);
      uint64_t v7 = (unsigned int *)*((void *)this + 21);
    }
    *((_DWORD *)this + 2) = HeadCloneForWordId;
  }
  *((_DWORD *)this + 3) = 16777212;
  uint64_t v14 = v7[25];
  if (v14 != -1)
  {
    unsigned int v15 = *(_DWORD *)(v18[0] + 4 * v14);
    if (v15 != 0xFFFFFF) {
      *((_DWORD *)this + 3) = WordIdToHeadCloneWordIdMap::getHeadCloneForVisibleWordId((WordNgramTemplate *)((char *)this + 16), v15);
    }
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v17);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v18);
}

void sub_213F87940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t WordNgramTemplate::getHeadCloneForBuildWordId(WordNgramTemplate *this, uint64_t a2)
{
  switch(a2)
  {
    case 0xFFFFFF:
      return a2;
    case 0xFFFFFE:
      return *((unsigned int *)this + 1);
    case 0xFFFFFD:
      return *((unsigned int *)this + 2);
  }
  return WordIdToHeadCloneWordIdMap::getHeadCloneForVisibleWordId((WordNgramTemplate *)((char *)this + 16), a2);
}

uint64_t WordNgramTemplate::getHeadCloneForWordId(WordNgramTemplate *this, unsigned int a2)
{
  return WordIdToHeadCloneWordIdMap::getHeadCloneForWordId((WordNgramTemplate *)((char *)this + 16), a2);
}

BOOL WordNgramTemplate::isHeadCloneWordId(WordNgramTemplate *this, unsigned int a2)
{
  return WordIdToHeadCloneWordIdMap::isHeadCloneWordId((WordNgramTemplate *)((char *)this + 16), a2);
}

BOOL WordNgramTemplate::isFinalSilenceScoredVerify(WordNgramTemplate *this)
{
  return *((_DWORD *)this + 2) != 0xFFFFFF;
}

uint64_t WordNgramTemplate::addWord(uint64_t this, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = *(void *)(this + 160);
  if (*(_DWORD *)(v3 + 388) > a2
    && *(unsigned char *)(*(void *)(v3 + 104) + a2)
    && *(_DWORD *)(*(void *)(v3 + 256) + 4 * a2) == a2
    && a3 != 0xFFFFFF
    && *(unsigned char *)this)
  {
    char v5 = (WordIdToHeadCloneWordIdMap *)(this + 16);
    HeadCloneForint WordId = WordIdToHeadCloneWordIdMap::getHeadCloneForWordId((WordIdToHeadCloneWordIdMap *)(this + 16), a3);
    return WordIdToHeadCloneWordIdMap::addVisibleWordIdMap(v5, a2, HeadCloneForWordId);
  }
  return this;
}

uint64_t WordNgramTemplate::deleteWord(WordNgramTemplate *this, unsigned int a2)
{
  unint64_t v4 = (WordNgramTemplate *)((char *)this + 16);
  if (WordIdToHeadCloneWordIdMap::isHeadCloneWordId((WordNgramTemplate *)((char *)this + 16), a2))
  {
    if (*((_DWORD *)this + 1) == a2) {
      *((_DWORD *)this + 1) = 16777212;
    }
    if (*((_DWORD *)this + 2) == a2) {
      *((_DWORD *)this + 2) = 0xFFFFFF;
    }
    if (*((_DWORD *)this + 3) == a2) {
      *((_DWORD *)this + 3) = 16777212;
    }
  }

  return WordIdToHeadCloneWordIdMap::deleteWord(v4, a2);
}

void WordNgramTemplate::loadWordNgramTemplate(WordNgramTemplate *this, DFile *a2, DFileChecksums *a3, int a4)
{
  if (a4) {
    WordNgramTemplate::loadWordNgramTemplateText(this, a2);
  }
  else {
    WordNgramTemplate::loadWordNgramTemplateBinary(this, a2, a3);
  }
}

void WordNgramTemplate::loadWordNgramTemplateText(WordNgramTemplate *this, DFile *a2)
{
  DgnTextFileParser::DgnTextFileParser((DgnTextFileParser *)v85);
  DgnTextFileParser::openDgnTextFileParser((uint64_t)v85, (uint64_t)a2, 0x76u, 1);
  DgnTextFileParser::verifyMatchingFileType((DgnTextFileParser *)v85, "WordNGramTemplateText");
  v84[0] = 0;
  v84[1] = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v85, sWTT_Versions, (uint64_t)v84, v4, v5, v6, v7, v8);
  DgnTextFileParser::verifyFileVersionInRange((uint64_t)v85, (unsigned int *)v84, v9, v10, v11, v12, v13, v14);
  int v83 = 0;
  DgnTextFile::getHeaderFieldInteger((DgnTextFile *)v85, "BegWordId", &v83, 1, -3, 16777203);
  int v17 = v83;
  if (v83 < 0xFFFFF4) {
    goto LABEL_5;
  }
  if (v83 == -3)
  {
    *((_DWORD *)this + 1) = 16777213;
LABEL_8:
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordt.cpp", 1223, (uint64_t)"lm/wordt", 9, (uint64_t)"%.500s", v15, v16, (char)"BegWordId");
    goto LABEL_9;
  }
  if (v83 == -2)
  {
    int v17 = 16777214;
LABEL_5:
    *((_DWORD *)this + 1) = v17;
    goto LABEL_9;
  }
  *((_DWORD *)this + 1) = 16777212;
  if (v17 != -1) {
    goto LABEL_8;
  }
LABEL_9:
  int v82 = 0;
  DgnTextFile::getHeaderFieldInteger((DgnTextFile *)v85, "EndWordId", &v82, 1, -3, 16777203);
  int v20 = v82;
  if (v82 < 0xFFFFF4)
  {
LABEL_14:
    *((_DWORD *)this + 2) = v20;
    goto LABEL_17;
  }
  if (v82 == -3)
  {
    int v20 = 16777213;
    goto LABEL_14;
  }
  if (v82 == -2)
  {
    *((_DWORD *)this + 2) = 16777214;
  }
  else
  {
    *((_DWORD *)this + 2) = 0xFFFFFF;
    if (v20 == -1) {
      goto LABEL_17;
    }
  }
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordt.cpp", 1233, (uint64_t)"lm/wordt", 9, (uint64_t)"%.500s", v18, v19, (char)"EndWordId");
LABEL_17:
  DgnTextFile::getHeaderFieldBool((DgnTextFile *)v85, "AllowNewWordCloning", (BOOL *)this, 1);
  int v81 = 0;
  DgnTextFile::getHeaderFieldInteger((DgnTextFile *)v85, "IgnoreInContextWordId", &v81, 1, -1, 16777203);
  int v28 = v81;
  if (v81 == -1) {
    int v28 = 16777212;
  }
  *((_DWORD *)this + 3) = v28;
  DgnTextFileParser::verifyNoUnknownHeaderFields((DgnTextFileParser *)v85, v21, v22, v23, v24, v25, v26, v27);
  uint64_t v79 = 0;
  uint64_t v80 = 0;
  DgnTextFile::getLineFieldNames((uint64_t)v85, (uint64_t)&v79);
  v78[0] = 0;
  v78[1] = 0;
  DgnTextFile::getLineFieldFormats((uint64_t)v85, (unint64_t)v78);
  if (v80)
  {
    uint64_t v31 = 0;
    unint64_t v32 = 0;
    unsigned int v74 = -1;
    unsigned int v75 = -1;
    unsigned int v33 = -1;
    while (1)
    {
      uint64_t v34 = (const char **)(v79 + v31);
      if (*(_DWORD *)(v79 + v31 + 8))
      {
        uint64_t v35 = (char *)*v34;
        if (!strcmp(*v34, "TableName"))
        {
          if (*(_DWORD *)(v78[0] + 4 * v32)) {
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordt.cpp", 1265, (uint64_t)"lm/wordt", 7, (uint64_t)"%.500s %.500s", v29, v30, (char)v35);
          }
          unsigned int v33 = v32;
          goto LABEL_36;
        }
        if (!strcmp(v35, "Index1"))
        {
          if (*(_DWORD *)(v78[0] + 4 * v32) != 3) {
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordt.cpp", 1273, (uint64_t)"lm/wordt", 7, (uint64_t)"%.500s %.500s", v29, v30, (char)v35);
          }
          unsigned int v75 = v32;
          goto LABEL_36;
        }
        if (!strcmp(v35, "EntryValue1"))
        {
          if (*(_DWORD *)(v78[0] + 4 * v32) != 3) {
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordt.cpp", 1281, (uint64_t)"lm/wordt", 7, (uint64_t)"%.500s %.500s", v29, v30, (char)v35);
          }
          unsigned int v74 = v32;
          goto LABEL_36;
        }
      }
      else
      {
        uint64_t v35 = &byte_2140B33BB;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordt.cpp", 1285, (uint64_t)"lm/wordt", 6, (uint64_t)"%.500s", v29, v30, (char)v35);
LABEL_36:
      ++v32;
      v31 += 16;
      if (v32 >= v80) {
        goto LABEL_39;
      }
    }
  }
  unsigned int v33 = -1;
  unsigned int v74 = -1;
  unsigned int v75 = -1;
LABEL_39:
  unsigned int v36 = 0xFFFFFF;
  while (DgnTextFileParser::parseNextLine((DgnTextFileParser *)v85))
  {
    DgnString::DgnString((DgnString *)&v76);
    LineFieldString = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v85, v33);
    DgnString::operator=((DgnString *)&v76, LineFieldString);
    unsigned int LineFieldUnsigned = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v85, v75, v40, v41, v42, v43, v44, v45);
    unsigned int v53 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v85, v74, v47, v48, v49, v50, v51, v52);
    if (v77) {
      unint64_t v54 = v76;
    }
    else {
      unint64_t v54 = &byte_2140B33BB;
    }
    if (strcmp(v54, "WordIdToHeadCloneWordId"))
    {
      uint64_t CurrentLine = DgnTextFile::getCurrentLine((DgnTextFile *)v85);
      if (*(_DWORD *)(CurrentLine + 8)) {
        uint64_t v60 = *(char **)CurrentLine;
      }
      else {
        uint64_t v60 = &byte_2140B33BB;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordt.cpp", 1301, (uint64_t)"lm/wordt", 8, (uint64_t)"%.500s", v58, v59, (char)v60);
    }
    if (v36 != 0xFFFFFF && LineFieldUnsigned <= v36) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordt.cpp", 1307, (uint64_t)"lm/wordt", 4, (uint64_t)"%u", v55, v56, LineFieldUnsigned);
    }
    if (LineFieldUnsigned == v53) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordt.cpp", 1310, (uint64_t)"lm/wordt", 5, (uint64_t)"%u", v55, v56, LineFieldUnsigned);
    }
    uint64_t v61 = *((void *)this + 20);
    unsigned int v62 = *(_DWORD *)(v61 + 388);
    if (v62 <= LineFieldUnsigned
      || !*(unsigned char *)(*(void *)(v61 + 104) + LineFieldUnsigned)
      || *(_DWORD *)(*(void *)(v61 + 256) + 4 * LineFieldUnsigned) != LineFieldUnsigned)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordt.cpp", 1313, (uint64_t)"lm/wordt", 1, (uint64_t)"%u", v55, v56, LineFieldUnsigned);
      uint64_t v61 = *((void *)this + 20);
      unsigned int v62 = *(_DWORD *)(v61 + 388);
    }
    if (v62 <= v53
      || !*(unsigned char *)(*(void *)(v61 + 104) + v53)
      || *(_DWORD *)(*(void *)(v61 + 256) + 4 * v53) != v53)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordt.cpp", 1316, (uint64_t)"lm/wordt", 1, (uint64_t)"%u", v55, v56, v53);
    }
    if (!WordIdToHeadCloneWordIdMap::isHeadCloneWordId((WordNgramTemplate *)((char *)this + 16), v53)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordt.cpp", 1320, (uint64_t)"lm/wordt", 3, (uint64_t)"%u", v63, v64, v53);
    }
    WordIdToHeadCloneWordIdMap::addVisibleWordIdMap((WordNgramTemplate *)((char *)this + 16), LineFieldUnsigned, v53);
    DgnString::~DgnString((DgnString *)&v76);
    unsigned int v36 = LineFieldUnsigned;
  }
  uint64_t v65 = this;
  uint64_t v66 = *((unsigned int *)this + 1);
  if ((v66 | 2) != 0xFFFFFE)
  {
    uint64_t v67 = *((void *)this + 20);
    if (*(_DWORD *)(v67 + 388) <= v66
      || !*(unsigned char *)(*(void *)(v67 + 104) + v66)
      || *(_DWORD *)(*(void *)(v67 + 256) + 4 * v66) != v66)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordt.cpp", 1333, (uint64_t)"lm/wordt", 2, (uint64_t)"%u %.500s", v37, v38, *((_DWORD *)this + 1));
      LODWORD(v66) = *((_DWORD *)this + 1);
    }
    HeadCloneForVisibleint WordId = WordIdToHeadCloneWordIdMap::getHeadCloneForVisibleWordId((WordNgramTemplate *)((char *)this + 16), v66);
    uint64_t v65 = this;
    *((_DWORD *)this + 1) = HeadCloneForVisibleWordId;
  }
  uint64_t v69 = *((unsigned int *)v65 + 2);
  if ((v69 | 2) != 0xFFFFFF)
  {
    uint64_t v70 = *((void *)v65 + 20);
    if (*(_DWORD *)(v70 + 388) <= v69
      || !*(unsigned char *)(*(void *)(v70 + 104) + v69)
      || *(_DWORD *)(*(void *)(v70 + 256) + 4 * v69) != v69)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordt.cpp", 1343, (uint64_t)"lm/wordt", 2, (uint64_t)"%u %.500s", v37, v38, *((_DWORD *)v65 + 2));
      LODWORD(v69) = *((_DWORD *)this + 2);
    }
    int v71 = WordIdToHeadCloneWordIdMap::getHeadCloneForVisibleWordId((WordNgramTemplate *)((char *)this + 16), v69);
    uint64_t v65 = this;
    *((_DWORD *)this + 2) = v71;
  }
  uint64_t v72 = *((unsigned int *)v65 + 3);
  if (v72 != 16777212)
  {
    uint64_t v73 = *((void *)v65 + 20);
    if (*(_DWORD *)(v73 + 388) <= v72
      || !*(unsigned char *)(*(void *)(v73 + 104) + v72)
      || *(_DWORD *)(*(void *)(v73 + 256) + 4 * v72) != v72)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordt.cpp", 1353, (uint64_t)"lm/wordt", 2, (uint64_t)"%u %.500s", v37, v38, *((_DWORD *)v65 + 3));
      LODWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = *((_DWORD *)this + 3);
    }
    *((_DWORD *)this + 3) = WordIdToHeadCloneWordIdMap::getHeadCloneForVisibleWordId((WordNgramTemplate *)((char *)this + 16), v72);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v78);
  DgnArray<DgnString>::releaseAll((uint64_t)&v79);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v84);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)v85);
}

void sub_213F882FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va1, a13);
  va_start(va, a13);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)va1);
  _Unwind_Resume(a1);
}

void (***WordNgramTemplate::loadWordNgramTemplateBinary(WordNgramTemplate *this, DFile *a2, DFileChecksums *a3))(void)
{
  uint64_t v11 = 0;
  uint64_t v6 = (DgnStream *)OpenAndReadMrecHeader((uint64_t)a2, 0x75u, 1, "LMWTTBIN", (_DWORD *)&v11 + 1, &v11);
  if (*((_DWORD *)a2 + 6)) {
    uint64_t v7 = (char *)*((void *)a2 + 2);
  }
  else {
    uint64_t v7 = &byte_2140B33BB;
  }
  MrecHeaderCheckVersions(v7, "LMWTTBIN", HIDWORD(v11), v11, 0x18u, 1u);
  unsigned int v10 = 0;
  readObject((uint64_t)v6, (BOOL *)this, &v10);
  readObject((uint64_t)v6, (_DWORD *)this + 1, &v10);
  readObject((uint64_t)v6, (_DWORD *)this + 2, &v10);
  readObject((uint64_t)v6, (_DWORD *)this + 3, &v10);
  readObject<unsigned int,unsigned int,WordIdScope,unsigned int>((uint64_t)v6, (uint64_t)this + 32, &v10);
  readObject<unsigned int>(v6, (uint64_t)this + 144, &v10);
  readObjectChecksumAndVerify(v6, v10);
  uint64_t CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
  DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x75u, v10);
  return DgnDelete<DgnStream>((void (***)(void))v6);
}

void WordNgramTemplate::saveWordNgramTemplate(WordNgramTemplate *this, DFile *a2, DFileChecksums *a3, int a4, int a5)
{
  if (a4) {
    WordNgramTemplate::saveWordNgramTemplateText(this, a2, a5);
  }
  else {
    WordNgramTemplate::saveWordNgramTemplateBinary(this, a2, a3, a5);
  }
}

void WordNgramTemplate::saveWordNgramTemplateText(WordNgramTemplate *this, DFile *a2, int a3)
{
  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v33);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v33, (uint64_t)a2, 0x76u, a3);
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v33, sWTT_Versions, (uint64_t)&v31, v6, v7, v8, v9, v10);
  DgnTextFileWriter::setFileType((uint64_t)v33, "WordNGramTemplateText", (void *)(v31 + 8 * (v32 - 1)));
  unsigned int v11 = *((_DWORD *)this + 1);
  if (v11 == 16777214) {
    int v12 = -2;
  }
  else {
    int v12 = -1;
  }
  if (v11 == 16777213) {
    int v12 = -3;
  }
  if (v11 >= 0xFFFFF4) {
    int v13 = v12;
  }
  else {
    int v13 = *((_DWORD *)this + 1);
  }
  DgnTextFileWriter::setHeaderFieldInteger((DgnTextFileWriter *)v33, "BegWordId", v13);
  unsigned int v14 = *((_DWORD *)this + 2);
  if (v14 == 16777214) {
    int v15 = -2;
  }
  else {
    int v15 = -1;
  }
  if (v14 == 16777213) {
    int v15 = -3;
  }
  if (v14 >= 0xFFFFF4) {
    int v16 = v15;
  }
  else {
    int v16 = *((_DWORD *)this + 2);
  }
  DgnTextFileWriter::setHeaderFieldInteger((DgnTextFileWriter *)v33, "EndWordId", v16);
  DgnTextFileWriter::setHeaderFieldBool((DgnTextFileWriter *)v33, "AllowNewWordCloning", *(unsigned __int8 *)this);
  if (*((_DWORD *)this + 3) == 16777212) {
    int v17 = -1;
  }
  else {
    int v17 = *((_DWORD *)this + 3);
  }
  DgnTextFileWriter::setHeaderFieldInteger((DgnTextFileWriter *)v33, "IgnoreInContextWordId", v17);
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  DgnString::DgnString((DgnString *)v26, "TableName");
  unsigned int v18 = v30;
  if (v30 == HIDWORD(v30))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v29, 1, 1);
    unsigned int v18 = v30;
  }
  DgnString::DgnString((DgnString *)(v29 + 16 * v18), (const DgnString *)v26);
  LODWORD(v30) = v30 + 1;
  DgnString::~DgnString((DgnString *)v26);
  unsigned int v19 = v28;
  if (v28 == HIDWORD(v28))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v27, 1, 1);
    unsigned int v19 = v28;
  }
  *(_DWORD *)(v27 + 4 * v19) = 0;
  LODWORD(v28) = v19 + 1;
  unsigned int v20 = v30;
  DgnString::DgnString((DgnString *)v26, "Index1");
  unsigned int v21 = v30;
  if (v30 == HIDWORD(v30))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v29, 1, 1);
    unsigned int v21 = v30;
  }
  DgnString::DgnString((DgnString *)(v29 + 16 * v21), (const DgnString *)v26);
  LODWORD(v30) = v30 + 1;
  DgnString::~DgnString((DgnString *)v26);
  unsigned int v22 = v28;
  if (v28 == HIDWORD(v28))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v27, 1, 1);
    unsigned int v22 = v28;
  }
  *(_DWORD *)(v27 + 4 * v22) = 3;
  LODWORD(v28) = v22 + 1;
  unsigned int v23 = v30;
  DgnString::DgnString((DgnString *)v26, "EntryValue1");
  unsigned int v24 = v30;
  if (v30 == HIDWORD(v30))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v29, 1, 1);
    unsigned int v24 = v30;
  }
  DgnString::DgnString((DgnString *)(v29 + 16 * v24), (const DgnString *)v26);
  LODWORD(v30) = v30 + 1;
  DgnString::~DgnString((DgnString *)v26);
  unsigned int v25 = v28;
  if (v28 == HIDWORD(v28))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v27, 1, 1);
    unsigned int v25 = v28;
  }
  *(_DWORD *)(v27 + 4 * v25) = 3;
  LODWORD(v28) = v25 + 1;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v33, (uint64_t)&v27, (uint64_t)&v29);
  WordNgramTemplate::writeWordIdToHeadCloneWordId(this, (WordNgramTemplate *)((char *)this + 16), (DgnTextFileWriter *)v33, 0, v20, v23, "WordIdToHeadCloneWordId");
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v27);
  DgnArray<DgnString>::releaseAll((uint64_t)&v29);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v31);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v33);
}

void sub_213F887EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v11 = va_arg(va3, void);
  uint64_t v13 = va_arg(va3, void);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnArray<DgnString>::releaseAll((uint64_t)va1);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va2);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)va3);
  _Unwind_Resume(a1);
}

void (***WordNgramTemplate::saveWordNgramTemplateBinary(WordNgramTemplate *this, DFile *a2, DFileChecksums *a3, int a4))(void)
{
  uint64_t v7 = OpenAndWriteMrecHeader((uint64_t)a2, 0x75u, a4, "LMWTTBIN", 24, 1);
  int v10 = 0;
  writeObject((uint64_t)v7, (unsigned __int8 *)this, &v10);
  writeObject((uint64_t)v7, (int *)this + 1, &v10);
  writeObject((uint64_t)v7, (int *)this + 2, &v10);
  writeObject((uint64_t)v7, (int *)this + 3, &v10);
  writeObject<unsigned int,unsigned int,WordIdScope,unsigned int>((uint64_t)v7, (uint64_t)this + 32, &v10);
  writeObject<unsigned int>((uint64_t)v7, (uint64_t)this + 144, &v10);
  writeObjectChecksum((uint64_t)v7, &v10);
  uint64_t CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
  DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x75u, v10);
  return DgnDelete<DgnStream>((void (***)(void))v7);
}

void WordNgramTemplate::writeWordIdToHeadCloneWordId(WordNgramTemplate *this, const WordIdToHeadCloneWordIdMap *a2, DgnTextFileWriter *a3, unsigned int a4, unsigned int a5, unsigned int a6, char *a7)
{
  if (*(_DWORD *)(*(void *)a2 + 388))
  {
    unint64_t v14 = 0;
    do
    {
      uint64_t v15 = *((void *)this + 20);
      if (v14 < *(unsigned int *)(v15 + 388))
      {
        if (*(unsigned char *)(*(void *)(v15 + 104) + v14))
        {
          if (v14 == *(_DWORD *)(*(void *)(v15 + 256) + 4 * v14))
          {
            HeadCloneForVisibleint WordId = WordIdToHeadCloneWordIdMap::getHeadCloneForVisibleWordId(a2, v14);
            if (HeadCloneForVisibleWordId != 0xFFFFFF)
            {
              int v17 = HeadCloneForVisibleWordId;
              if (v14 != HeadCloneForVisibleWordId)
              {
                DgnTextFileWriter::setLineFieldValue(a3, a4, a7);
                DgnTextFileWriter::setLineFieldUnsignedValue(a3, a5, v14);
                DgnTextFileWriter::setLineFieldUnsignedValue(a3, a6, v17);
                DgnTextFileWriter::writeNextLine(a3);
              }
            }
          }
        }
      }
      ++v14;
    }
    while (v14 < *(unsigned int *)(*(void *)a2 + 388));
  }
}

void WordNgramTemplate::printSize(WordNgramTemplate *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordt.cpp", 1389, (DgnString *)&v69);
  if (v70) {
    int v16 = v69;
  }
  else {
    int v16 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_2140B33BB, a3, &byte_2140B33BB, v16);
  DgnString::~DgnString((DgnString *)&v69);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_2140B33BB);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordt.cpp", 1392, (DgnString *)&v69);
  if (v70) {
    unsigned int v25 = v69;
  }
  else {
    unsigned int v25 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v21, v22, v23, v24, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v25, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v69);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordt.cpp", 1392, (DgnString *)&v69);
  if (v70) {
    uint64_t v30 = v69;
  }
  else {
    uint64_t v30 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v26, v27, v28, v29, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v30, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v69);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordt.cpp", 1392, (DgnString *)&v69);
  if (v70) {
    uint64_t v35 = v69;
  }
  else {
    uint64_t v35 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v31, v32, v33, v34, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v35, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v69);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordt.cpp", 1392, (DgnString *)&v69);
  if (v70) {
    uint64_t v40 = v69;
  }
  else {
    uint64_t v40 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v36, v37, v38, v39, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v40, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v69);
  *a4 += 4;
  *a5 += 4;
  uint64_t v41 = sizeObject((char *)this + 56);
  uint64_t v42 = 8;
  uint64_t v43 = 12;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v44 = 8;
  }
  else {
    uint64_t v44 = 12;
  }
  char v45 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    char v45 = 3;
  }
  unint64_t v46 = (unint64_t)*((unsigned int *)this + 30) << v45;
  if (!gShadowDiagnosticShowIdealizedObjectSizes)
  {
    uint64_t v42 = 16;
    uint64_t v43 = 16;
  }
  int v47 = *((_DWORD *)this + 38);
  unsigned int v48 = *((_DWORD *)this + 39);
  BOOL v49 = v48 >= v47;
  unsigned int v50 = v48 - v47;
  if (v49)
  {
    if (v47 > 0) {
      v43 += 4 * (v47 - 1) + 4;
    }
    v43 += 4 * v50;
  }
  uint64_t v51 = v41 + v42 + v44 + v46 + v43 + 13;
  uint64_t v52 = sizeObject((char *)this + 56);
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v53 = 8;
  }
  else {
    uint64_t v53 = 12;
  }
  char v54 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    char v54 = 3;
  }
  unint64_t v55 = (unint64_t)*((unsigned int *)this + 30) << v54;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v56 = 8;
  }
  else {
    uint64_t v56 = 16;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v57 = 12;
  }
  else {
    uint64_t v57 = 16;
  }
  int v58 = *((_DWORD *)this + 38);
  if (v58 <= *((_DWORD *)this + 39) && v58 > 0) {
    v57 += 4 * (v58 - 1) + 4;
  }
  uint64_t v59 = v52 + v56 + v53 + v55 + v57 + 13;
  uint64_t v60 = sizeObject((char *)this + 56);
  uint64_t v61 = *((unsigned int *)this + 38);
  if (v61 <= *((_DWORD *)this + 39)) {
    uint64_t v62 = 0;
  }
  else {
    uint64_t v62 = 4 * v61;
  }
  uint64_t v63 = v62 + v60;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordt.cpp", 1392, (DgnString *)&v69);
  if (v70) {
    uint64_t v68 = v69;
  }
  else {
    uint64_t v68 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v64, v65, v66, v67, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v68, v51, v59, v63);
  DgnString::~DgnString((DgnString *)&v69);
  *a4 += v51;
  *a5 += v59;
  *a6 += v63;
}

void sub_213F88E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::Hash(uint64_t a1, const char *a2, int a3)
{
  HashBase::HashBase((HashBase *)a1, a2);
  *(void *)uint64_t v5 = &unk_26C4E4790;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = 0u;
  *(_OWORD *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = 0u;
  *(_DWORD *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = 0;
  *(void *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 88) = 0;
  int v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    int v7 = 16;
  }
  else {
    int v7 = 20;
  }
  *(_DWORD *)(a1 + 24) = 32;
  *(_DWORD *)(a1 + 28) = v7;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = 0;
  return a1;
}

void sub_213F88F30(_Unwind_Exception *a1)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

uint64_t Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::removeBucket(uint64_t result, char **a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *a2;
  *a2 = *(char **)*a2;
  uint64_t v4 = *(uint64_t (**)(char *))(result + 96);
  if (v4) {
    uint64_t result = v4(v3 + 12);
  }
  uint64_t v5 = *(uint64_t (**)(void *))(v2 + 104);
  if (v5) {
    uint64_t result = v5((void *)v3 + 2);
  }
  *(void *)uint64_t v3 = *(void *)(v2 + 32);
  *(void *)(v2 + 32) = v3;
  --*(_DWORD *)(v2 + 8);
  return result;
}

uint64_t *Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::reInit(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 8)) {
    Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::removeAll(a1);
  }
  uint64_t v4 = *(void **)(a1 + 80);
  if (v4)
  {
    MemChunkFree(v4, 0);
    *(void *)(a1 + 80) = 0;
  }
  *(_DWORD *)(a1 + 88) = 0;
  DgnPool::deleteAllWithoutDestroying((DgnPool *)(a1 + 24));
  int v5 = RoundUpToPowerOf2(a2, (unsigned int *)(a1 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v5;
  uint64_t result = HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  return result;
}

uint64_t TBlock::TBlock(uint64_t a1, uint64_t a2, char a3, uint64_t a4, void *a5, void *a6)
{
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  uint64_t v9 = a1 + 96;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  int v10 = (void **)(a1 + 120);
  *(void *)&long long v11 = -1;
  *((void *)&v11 + 1) = -1;
  *(_OWORD *)(a1 + 160) = v11;
  *(_OWORD *)(a1 + 176) = v11;
  *(_OWORD *)(a1 + 192) = v11;
  *(_OWORD *)(a1 + 208) = v11;
  *(unsigned char *)a1 = a3;
  *(void *)(a1 + 8) = -1;
  *(void *)(a1 + Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::Hash((uint64_t)this + 32, 0, 16) = -1;
  MEMORY[0x216698480](a1 + 48);
  if (a5) {
    uint64_t v12 = a5;
  }
  else {
    uint64_t v12 = &unk_2140A6820;
  }
  MEMORY[0x216698480](v9, v12);
  if (a6)
  {
    std::vector<TPItnTagHandle_fake **>::reserve(v10, a6[2]);
    uint64_t v15 = (void *)*a6;
    uint64_t v13 = a6 + 1;
    uint64_t v14 = v15;
    if (v15 != v13)
    {
      int v16 = (void *)(a1 + 136);
      uint64_t v17 = *(char **)(a1 + 128);
      do
      {
        if ((unint64_t)v17 >= *v16)
        {
          uint64_t v18 = (v17 - (unsigned char *)*v10) >> 3;
          if ((unint64_t)(v18 + 1) >> 61) {
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v19 = *v16 - (void)*v10;
          uint64_t v20 = v19 >> 2;
          if (v19 >> 2 <= (unint64_t)(v18 + 1)) {
            uint64_t v20 = v18 + 1;
          }
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v20;
          }
          if (v21) {
            uint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(a1 + 136, v21);
          }
          else {
            uint64_t v22 = 0;
          }
          uint64_t v23 = &v22[8 * v18];
          *(void *)uint64_t v23 = v14[4];
          uint64_t v17 = v23 + 8;
          unsigned int v25 = *(char **)(a1 + 120);
          uint64_t v24 = *(char **)(a1 + 128);
          if (v24 != v25)
          {
            do
            {
              uint64_t v26 = *((void *)v24 - 1);
              v24 -= 8;
              *((void *)v23 - 1) = v26;
              v23 -= 8;
            }
            while (v24 != v25);
            uint64_t v24 = (char *)*v10;
          }
          *(void *)(a1 + 120) = v23;
          *(void *)(a1 + 128) = v17;
          *(void *)(a1 + 136) = &v22[8 * v21];
          if (v24) {
            operator delete(v24);
          }
        }
        else
        {
          *(void *)uint64_t v17 = v14[4];
          v17 += 8;
        }
        *(void *)(a1 + 128) = v17;
        uint64_t v27 = (void *)v14[1];
        if (v27)
        {
          do
          {
            uint64_t v28 = v27;
            uint64_t v27 = (void *)*v27;
          }
          while (v27);
        }
        else
        {
          do
          {
            uint64_t v28 = (void *)v14[2];
            BOOL v29 = *v28 == (void)v14;
            uint64_t v14 = v28;
          }
          while (!v29);
        }
        uint64_t v14 = v28;
      }
      while (v28 != v13);
    }
  }
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = a4;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  return a1;
}

void sub_213F89200(_Unwind_Exception *exception_object)
{
  int v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 128) = v6;
    operator delete(v6);
  }
  if (*(char *)(v1 + 119) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*(void **)(v1 + 72));
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TBlock::setRule(uint64_t this, const TItnRule *a2)
{
  *(void *)(this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = a2;
  if (a2)
  {
    if (*((unsigned char *)a2 + 144)) {
      JUMPOUT(0x216698480);
    }
  }
  return this;
}

uint64_t TBlock::getMultiWordSeparator(unsigned char *a1, uint64_t a2)
{
  if (*a1) {
    return 0;
  }
  int v5 = (int *)(a1 + 48);
  if ((char)a1[71] < 0) {
    int v5 = *(int **)v5;
  }
  while (1)
  {
    int v6 = *v5;
    {
      operator new();
    }
    if (v6 > 159) {
      break;
    }
    if (v6 > 0x20 || ((1 << v6) & 0x100002600) == 0) {
      goto LABEL_25;
    }
LABEL_22:
    ++v5;
  }
  if (v6 >= 12288)
  {
    if (v6 != 65279 && v6 != 12288) {
      goto LABEL_25;
    }
    goto LABEL_22;
  }
  if (v6 == 160 || v6 == 8203) {
    goto LABEL_22;
  }
LABEL_25:
  uint64_t v9 = TStringParam::get((TStringParam *)(a2 + 4392));
  uint64_t v2 = *v5;
  if (v2)
  {
    int v10 = (__int32 *)v9;
    for (int i = (unsigned int *)v5; ; ++i)
    {
      {
        operator new();
      }
      __int32 v12 = TLocaleInfo::normalizeWidth(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v2);
      if (wcschr(v10, v12)) {
        break;
      }
      unsigned int v13 = i[1];
      uint64_t v2 = v13;
      if (!v13) {
        return v2;
      }
    }
    if (v5 == (int *)i) {
      return 0;
    }
    uint64_t v14 = 1;
    do
      int v15 = i[v14++];
    while (v15 == v2);
    if (!v15)
    {
      return 0;
    }
    else
    {
      {
        operator new();
      }
      if (v15 > 159)
      {
        if (v15 >= 12288)
        {
          if (v15 == 65279 || v15 == 12288) {
            return 0;
          }
        }
        else if (v15 == 160 || v15 == 8203)
        {
          return 0;
        }
      }
      else if (v15 <= 0x20 && ((1 << v15) & 0x100002600) != 0)
      {
        return 0;
      }
    }
  }
  return v2;
}

void sub_213F894F8(_Unwind_Exception *a1)
{
  MEMORY[0x216698730](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TBlock::format(uint64_t a1, unsigned int *a2, TLocaleInfo **a3, int a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = a3[4];
  if (v9 == (TLocaleInfo *)-1) {
    uint64_t v9 = *a3;
  }
  int v81 = v9;
  int v10 = a3[6];
  if (v10 == (TLocaleInfo *)-1) {
    int v10 = a3[2];
  }
  int v77 = v10;
  if (a3[5] == (TLocaleInfo *)-1) {
    long long v11 = a3[1];
  }
  else {
    long long v11 = a3[5];
  }
  if (a3[7] == (TLocaleInfo *)-1) {
    __int32 v12 = a3[3];
  }
  else {
    __int32 v12 = a3[7];
  }
  unint64_t v13 = *(void *)(a9 + 16);
  uint64_t v95 = a2;
  uint64_t v91 = (unsigned int *)v93;
  long long v92 = xmmword_214085190;
  char v94 = 1;
  if (v12 == (TLocaleInfo *)-1) {
    goto LABEL_65;
  }
  if (*(char *)(a1 + 119) < 0)
  {
    if (*(void *)(a1 + 104)) {
      goto LABEL_22;
    }
  }
  else if (*(unsigned char *)(a1 + 119))
  {
    goto LABEL_22;
  }
  unsigned int v15 = *a2;
  {
    operator new();
  }
  if (v15 - 65382 >= 0x38 && v15 - 12449 >= 0x56 && v15 - 12443 >= 4 && v15 - 12540 >= 3 && v15 - 65438 > 1) {
    goto LABEL_65;
  }
LABEL_22:
  int v16 = (unsigned int *)(a1 + 96);
  if (*(char *)(a1 + 119) < 0)
  {
    if (*(void *)(a1 + 104))
    {
      int v16 = *(unsigned int **)v16;
      goto LABEL_28;
    }
  }
  else if (*(unsigned char *)(a1 + 119))
  {
    goto LABEL_28;
  }
  int v16 = v95;
LABEL_28:
  uint64_t v76 = (int *)v16;
  uint64_t v17 = v95;
  int v18 = *v95;
  if (!*v95) {
    goto LABEL_65;
  }
  while (1)
  {
    {
      operator new();
    }
    if (v18 <= 159)
    {
      if (v18 > 0x20 || ((1 << v18) & 0x100002600) == 0) {
        goto LABEL_40;
      }
      goto LABEL_42;
    }
    if (v18 >= 12288) {
      break;
    }
    if (v18 != 160 && v18 != 8203) {
      goto LABEL_40;
    }
LABEL_42:
    int v20 = v17[1];
    ++v17;
    int v18 = v20;
    if (!v20) {
      goto LABEL_65;
    }
  }
  if (v18 == 12288 || v18 == 65279) {
    goto LABEL_42;
  }
LABEL_40:
  unsigned int v19 = *v17;
  {
    operator new();
  }
  if (TLocaleInfo::isPunct(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v19)) {
    goto LABEL_42;
  }
  if (!*v17) {
    goto LABEL_65;
  }
  if (v12 == (TLocaleInfo *)12)
  {
    {
      operator new();
    }
    TLocaleInfo::katakanaToRomaji(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v76, &v91);
    unint64_t v22 = *((void *)&v92 + 1);
    uint64_t v23 = v92;
    if (*((void *)&v92 + 1) >= (unint64_t)v92)
    {
      if (v94)
      {
LABEL_61:
        LODWORD(v87) = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v91, v22, (int *)&v87, 1uLL);
        unint64_t v21 = v91;
        --*((void *)&v92 + 1);
        goto LABEL_64;
      }
LABEL_62:
      unint64_t v21 = v91;
      if (v23) {
        v91[v23 - 1] = 0;
      }
      goto LABEL_64;
    }
LABEL_59:
    unint64_t v21 = v91;
    v91[v22] = 0;
LABEL_64:
    uint64_t v95 = v21;
    goto LABEL_65;
  }
  if (v12 == (TLocaleInfo *)11)
  {
    {
      operator new();
    }
    TLocaleInfo::katakanaToHiragana(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v76, (uint64_t)&v91);
    unint64_t v22 = *((void *)&v92 + 1);
    uint64_t v23 = v92;
    if (*((void *)&v92 + 1) >= (unint64_t)v92)
    {
      if (v94) {
        goto LABEL_61;
      }
      goto LABEL_62;
    }
    goto LABEL_59;
  }
  if (v12 == (TLocaleInfo *)10)
  {
    unint64_t v21 = (unsigned int *)v76;
    goto LABEL_64;
  }
LABEL_65:
  uint64_t v24 = *(void *)(a8 + 128);
  unsigned int v25 = *v95;
  if (*v95)
  {
    while (2)
    {
      {
        operator new();
      }
      unsigned int DigitExtended = v25 - 48;
      if ((int)v25 < 48) {
        goto LABEL_76;
      }
      if (v25 <= 0x39)
      {
LABEL_71:
        if (DigitExtended == -1 || v11 != (TLocaleInfo *)9) {
          goto LABEL_76;
        }
        uint64_t v27 = v95;
        {
          operator new();
        }
        unsigned int v28 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v27, &v95);
        if (arabicToRoman(v28, a9)) {
          TBuffer<wchar_t>::insert(a9, *(void *)(a9 + 16), (int *)v27, v95 - v27);
        }
      }
      else
      {
        if (v25 >= 0x660)
        {
          unsigned int DigitExtended = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v25);
          goto LABEL_71;
        }
LABEL_76:
        unsigned int v29 = *v95;
        {
          operator new();
        }
        if (v29 == 13 || v29 == 10)
        {
          uint64_t v31 = v95;
          if (*v95 == 13 && v95[1] == 10) {
            uint64_t v31 = v95 + 1;
          }
          uint64_t v95 = v31 + 1;
          WideNewLine = (int *)TStringParam::get((TStringParam *)(a7 + 144));
          if (!*WideNewLine) {
            WideNewLine = (int *)getWideNewLine();
          }
          uint64_t v33 = 0;
          while (WideNewLine[v33++])
            ;
          TBuffer<wchar_t>::insert(a9, *(void *)(a9 + 16), WideNewLine, v33 - 1);
        }
        else
        {
          if (*v95 == 223
            && !wcscmp(*(const __int32 **)(v24 + 8), dword_2140A6824)
            && !wcscmp(*(const __int32 **)v24, dword_2140A6834))
          {
            TBuffer<wchar_t>::insert(a9, *(void *)(a9 + 16), dword_2140A6844, 2uLL);
          }
          else
          {
            LODWORD(v87) = *v95;
            TBuffer<wchar_t>::insert(a9, *(void *)(a9 + 16), (int *)&v87, 1uLL);
          }
          ++v95;
        }
      }
      unsigned int v25 = *v95;
      if (!*v95) {
        break;
      }
      continue;
    }
  }
  if (v81 == (TLocaleInfo *)4)
  {
    if (v13 < *(void *)(a9 + 16))
    {
      uint64_t v42 = *(void *)a9;
      unint64_t v43 = v13;
      do
      {
        int v44 = TLocaleInfo::toLower(v24, *(unsigned int *)(v42 + 4 * v43));
        uint64_t v42 = *(void *)a9;
        *(_DWORD *)(*(void *)a9 + 4 * v43++) = v44;
      }
      while (v43 < *(void *)(a9 + 16));
    }
    goto LABEL_162;
  }
  if (v81 == (TLocaleInfo *)5)
  {
    uint64_t v87 = v89;
    long long v88 = xmmword_214085190;
    char v90 = 1;
    if (v13 < *(void *)(a9 + 16))
    {
      unint64_t v40 = v13;
      do
      {
        uint64_t v41 = *(unsigned int *)(*(void *)a9 + 4 * v40);
        if (v41 == 223)
        {
          TBuffer<wchar_t>::insert((uint64_t)&v87, *((unint64_t *)&v88 + 1), dword_2140A6850, 2uLL);
        }
        else
        {
          v96[0] = TLocaleInfo::toUpper(v24, v41);
          TBuffer<wchar_t>::insert((uint64_t)&v87, *((unint64_t *)&v88 + 1), v96, 1uLL);
        }
        ++v40;
      }
      while (v40 < *(void *)(a9 + 16));
    }
    TBuffer<wchar_t>::resize(a9, v13);
    TBuffer<wchar_t>::operator+=(a9, (uint64_t)&v87);
    if (v90 && v87 != v89 && v87) {
      MEMORY[0x216698730]();
    }
    goto LABEL_162;
  }
  if (v81 != (TLocaleInfo *)6) {
    goto LABEL_162;
  }
  int v83 = (const __int32 **)v24;
  unint64_t v35 = v13 + 1;
  uint64_t v36 = 4 * v13;
  while (2)
  {
    int v37 = *(_DWORD *)(*(void *)a9 + v36);
    {
      operator new();
    }
    if (v37 <= 159)
    {
      if (v37 > 0x20 || ((1 << v37) & 0x100002600) == 0) {
        break;
      }
      goto LABEL_124;
    }
    if (v37 >= 12288)
    {
      if (v37 != 65279 && v37 != 12288) {
        break;
      }
      goto LABEL_124;
    }
    if (v37 == 160 || v37 == 8203)
    {
LABEL_124:
      ++v35;
      v36 += 4;
      continue;
    }
    break;
  }
  uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(a7 + 17408));
  uint64_t v24 = (uint64_t)v83;
  uint64_t v46 = *(int *)(a7 + 4 * TParam::getValidConfig((TParam *)(a7 + 17408), ActiveConfigHandle) + 17568);
  if (!v46) {
    goto LABEL_153;
  }
  int v47 = *(_DWORD *)(*(void *)a9 + v36);
  {
    operator new();
  }
  if ((TLocaleInfo::isUpper(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v47) & 1) == 0)
  {
    if (v46 == -1 || (unint64_t v48 = v46 + v35, v48 > *(void *)(a9 + 16))) {
      unint64_t v48 = *(void *)(a9 + 16);
    }
    while (v35 < v48)
    {
      int v49 = *(_DWORD *)(*(void *)a9 + 4 * v35);
      {
        operator new();
      }
      ++v35;
      if (TLocaleInfo::isUpper(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v49)) {
        goto LABEL_162;
      }
    }
    if (wcscmp(*v83, dword_2140A685C)) {
      goto LABEL_161;
    }
LABEL_153:
    unint64_t v51 = *(void *)(a9 + 8);
    unint64_t v50 = *(void *)(a9 + 16);
    if (v50 >= v51)
    {
      if (*(unsigned char *)(a9 + 1048))
      {
        LODWORD(v87) = 0;
        TBuffer<wchar_t>::insert(a9, v50, (int *)&v87, 1uLL);
        --*(void *)(a9 + 16);
        uint64_t v52 = *(void *)a9;
      }
      else
      {
        uint64_t v52 = *(void *)a9;
        if (v51) {
          *(_DWORD *)(v52 + 4 * v51 - 4) = 0;
        }
      }
    }
    else
    {
      uint64_t v52 = *(void *)a9;
      *(_DWORD *)(*(void *)a9 + 4 * v50) = 0;
    }
    if (!wcsncmp((const __int32 *)(v52 + v36), dword_2140A686C, 2uLL)) {
      *(void *)(*(void *)a9 + v36) = 0x4A00000049;
    }
    else {
LABEL_161:
    }
      *(_DWORD *)(*(void *)a9 + v36) = TLocaleInfo::toUpper((uint64_t)v83, *(unsigned int *)(*(void *)a9 + v36));
  }
LABEL_162:
  if (*(_DWORD *)(v24 + 64) == 2)
  {
    uint64_t v53 = TParam::getActiveConfigHandle((TParam *)(a7 + 16912));
    uint64_t ValidConfig = TParam::getValidConfig((TParam *)(a7 + 16912), v53);
    int v55 = *(unsigned __int8 *)(a7 + ValidConfig + 17064);
    BOOL v56 = *(unsigned char *)(a7 + ValidConfig + 17064) != 0;
    uint64_t v57 = TParam::getActiveConfigHandle((TParam *)(a7 + 16664));
    int v84 = *(unsigned __int8 *)(a7 + TParam::getValidConfig((TParam *)(a7 + 16664), v57) + 16816);
    uint64_t v58 = TParam::getActiveConfigHandle((TParam *)(a7 + 17160));
    int v86 = *(unsigned __int8 *)(a7 + TParam::getValidConfig((TParam *)(a7 + 17160), v58) + 17312);
    {
      operator new();
    }
    int v59 = 1;
    if ((a6 - 32) >= 0x5F
      && ((a6 - 162) > 0xD || ((1 << (a6 + 94)) & 0x241B) == 0)
      && (a6 - 10629) >= 2
      && a6 != 8361)
    {
      int v59 = 0;
    }
    {
      operator new();
    }
    if (v13 < *(void *)(a9 + 16))
    {
      int v62 = (a6 - 65281) < 0x60 || (a6 - 65504) < 7 || a6 == 12288;
      do
      {
        uint64_t v63 = *(unsigned int *)(*(void *)a9 + 4 * v13);
        {
          operator new();
        }
        if ((TLocaleInfo::isAlpha(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v63) & 1) == 0)
        {
          {
            operator new();
          }
          if ((int)v63 > 159)
          {
            if ((int)v63 >= 12288)
            {
              if (v63 != 65279 && v63 != 12288) {
                goto LABEL_207;
              }
            }
            else if (v63 != 160 && v63 != 8203)
            {
LABEL_207:
              {
                operator new();
              }
              if ((int)v63 < 48
                || v63 >= 0x3A
                && (v63 < 0x660
                 || TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v63) == -1))
              {
                {
                  operator new();
                }
                if (TLocaleInfo::isPunct(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v63))
                {
                  v59 |= (v86 != 0) & (v62 ^ 1);
                  int v62 = v59 ^ 1;
                  if ((v59 ^ 1))
                  {
                    if ((explicit & 1) == 0
                    {
                      operator new();
                    }
                    int v71 = TLocaleInfo::toWide(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v63);
                  }
                  else
                  {
                    if ((explicit & 1) == 0
                    {
                      operator new();
                    }
                    int v71 = TLocaleInfo::toNarrow(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v63);
                  }
                  *(_DWORD *)(*(void *)a9 + 4 * v13) = v71;
                }
                else
                {
                  {
                    operator new();
                  }
                  int v59 = 1;
                  if ((v63 - 32) >= 0x5F
                    && ((v63 - 162) > 0xD || ((1 << (v63 + 94)) & 0x241B) == 0)
                    && (v63 - 10629) >= 2
                    && v63 != 8361)
                  {
                    int v59 = 0;
                  }
                  {
                    operator new();
                  }
                  int v62 = (v63 - 65281) < 0x60 || (v63 - 65504) < 7 || v63 == 12288;
                }
              }
              else
              {
                if (v84)
                {
                  if ((v68 & 1) == 0
                  {
                    operator new();
                  }
                  int v69 = TLocaleInfo::toNarrow(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v63);
                }
                else
                {
                  if ((v68 & 1) == 0
                  {
                    operator new();
                  }
                  int v69 = TLocaleInfo::toWide(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v63);
                }
                *(_DWORD *)(*(void *)a9 + 4 * v13) = v69;
                int v62 = v84 == 0;
                int v59 = v84 != 0;
              }
              goto LABEL_205;
            }
          }
          else if (v63 > 0x20 || ((1 << v63) & 0x100002600) == 0)
          {
            goto LABEL_207;
          }
        }
        if (v55)
        {
          if ((v66 & 1) == 0
          {
            operator new();
          }
          int v67 = TLocaleInfo::toNarrow(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v63);
        }
        else
        {
          if ((v66 & 1) == 0
          {
            operator new();
          }
          int v67 = TLocaleInfo::toWide(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v63);
        }
        *(_DWORD *)(*(void *)a9 + 4 * v13) = v67;
        int v59 = v56;
        int v62 = v55 == 0;
LABEL_205:
        ++v13;
      }
      while (v13 < *(void *)(a9 + 16));
    }
  }
  {
    operator new();
  }
  uint64_t v74 = a5;
  if (a4 > 159)
  {
    if (a4 >= 12288)
    {
      if (a4 != 65279 && a4 != 12288) {
        goto LABEL_280;
      }
    }
    else if (a4 != 160 && a4 != 8203)
    {
      goto LABEL_280;
    }
  }
  else if (a4 > 0x20 || ((1 << a4) & 0x100002600) == 0)
  {
    goto LABEL_280;
  }
  if ((unint64_t)v77 - 1 < 3) {
    uint64_t v74 = (uint64_t)v77 - 1;
  }
LABEL_280:
  if (v94 && v91 != (unsigned int *)v93 && v91) {
    MEMORY[0x216698730]();
  }
  return v74;
}

void sub_213F8A870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  MEMORY[0x216698730](v14, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x8A0]))
  {
    if (STACK[0x488] != a14 && STACK[0x488] != 0) {
      MEMORY[0x216698730]();
    }
  }
  _Unwind_Resume(a1);
}

uint64_t TBlock::applyControls(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v64 = v66;
  long long v65 = xmmword_214085190;
  char v67 = 1;
  int v6 = (__int32 *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0) {
    int v6 = *(__int32 **)v6;
  }
  int v7 = *v6;
  {
    operator new();
  }
  char isUpper = TLocaleInfo::isUpper(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v7);
  *(void *)&long long v9 = -1;
  *((void *)&v9 + 1) = -1;
  v63[3] = v9;
  v63[2] = v9;
  v63[1] = v9;
  v63[0] = v9;
  uint64_t v57 = a1;
  uint64_t MultiWordSeparator = TBlock::getMultiWordSeparator((unsigned char *)a1, a3);
  if (MultiWordSeparator)
  {
    if (*(_DWORD *)(*(void *)(a4 + 128) + 64) != 2) {
      goto LABEL_30;
    }
    {
      operator new();
    }
    if ((int)MultiWordSeparator > 159)
    {
      if ((int)MultiWordSeparator >= 12288)
      {
        if (MultiWordSeparator == 12288) {
          goto LABEL_18;
        }
        int v12 = 65279;
      }
      else
      {
        if (MultiWordSeparator == 160) {
          goto LABEL_18;
        }
        int v12 = 8203;
      }
      if (MultiWordSeparator == v12) {
        goto LABEL_18;
      }
    }
    else if (MultiWordSeparator <= 0x20 && ((1 << MultiWordSeparator) & 0x100002600) != 0)
    {
      goto LABEL_18;
    }
    {
      operator new();
    }
    if (!TLocaleInfo::isAlpha(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, MultiWordSeparator))
    {
      {
        operator new();
      }
      if (TLocaleInfo::isPunct(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, MultiWordSeparator))
      {
        uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(a3 + 17160));
        uint64_t ValidConfig = (TLocaleInfo *)TParam::getValidConfig((TParam *)(a3 + 17160), ActiveConfigHandle);
        if (*((unsigned char *)ValidConfig + a3 + 17312))
        {
          uint64_t GlobalLocaleInfo = TLocaleInfo::getGlobalLocaleInfo(ValidConfig);
          int v55 = TLocaleInfo::toNarrow(GlobalLocaleInfo, MultiWordSeparator);
        }
        else
        {
          uint64_t v54 = TLocaleInfo::getGlobalLocaleInfo(ValidConfig);
          int v55 = TLocaleInfo::toWide(v54, MultiWordSeparator);
        }
        int v16 = 1;
        goto LABEL_31;
      }
LABEL_30:
      int v16 = 0;
      int v55 = MultiWordSeparator;
      goto LABEL_31;
    }
LABEL_18:
    uint64_t v13 = TParam::getActiveConfigHandle((TParam *)(a3 + 16912));
    int v14 = *(unsigned __int8 *)(a3 + TParam::getValidConfig((TParam *)(a3 + 16912), v13) + 17064);
    if (v14)
    {
      if ((explicit & 1) == 0
      {
        operator new();
      }
      int v55 = TLocaleInfo::toNarrow(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, MultiWordSeparator);
    }
    else
    {
      if ((explicit & 1) == 0
      {
        operator new();
      }
      int v55 = TLocaleInfo::toWide(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, MultiWordSeparator);
    }
    int v16 = 0;
LABEL_31:
    uint64_t v20 = a1;
    do
    {
      while (1)
      {
        uint64_t v20 = *(void *)(v20 + 152);
        if (!v20)
        {
          int v23 = 0;
          goto LABEL_42;
        }
        if (*(char *)(v20 + 71) < 0) {
          break;
        }
        if (*(unsigned char *)(v20 + 71)) {
          goto LABEL_37;
        }
      }
    }
    while (!*(void *)(v20 + 56));
LABEL_37:
    if (*(char *)(v20 + 95) < 0)
    {
      uint64_t v21 = *(void *)(v20 + 72);
      uint64_t v22 = *(void *)(v20 + 80);
    }
    else
    {
      uint64_t v21 = v20 + 72;
      uint64_t v22 = *(unsigned __int8 *)(v20 + 95);
    }
    int v23 = *(_DWORD *)(v21 + 4 * v22 - 4);
LABEL_42:
    int v59 = (unsigned int *)v61;
    long long v60 = xmmword_214085190;
    char v62 = 1;
    uint64_t v24 = wcschr(v6, MultiWordSeparator);
    for (char i = 1; ; char i = 0)
    {
      if (!v24)
      {
        if (v62)
        {
          if (v59 != (unsigned int *)v61 && v59 != 0) {
            MEMORY[0x216698730]();
          }
        }
        goto LABEL_109;
      }
      TBuffer<wchar_t>::resize((uint64_t)&v59, 0);
      TBuffer<wchar_t>::insert((uint64_t)&v59, 0, v6, v24 - v6);
      {
        operator new();
      }
      int v25 = 0;
      if ((int)MultiWordSeparator <= 159) {
        break;
      }
      if ((int)MultiWordSeparator >= 12288)
      {
        if (MultiWordSeparator == 12288) {
          goto LABEL_56;
        }
        int v26 = 65279;
      }
      else
      {
        if (MultiWordSeparator == 160) {
          goto LABEL_56;
        }
        int v26 = 8203;
      }
      if (MultiWordSeparator != v26) {
        goto LABEL_55;
      }
LABEL_56:
      TItnControlState::set(v63, a2, isUpper, i & 1, v25, 1uLL);
      if (*v24 == MultiWordSeparator)
      {
        uint64_t v27 = 0;
        int v6 = v24;
        do
        {
          ++v27;
          __int32 v28 = v6[1];
          ++v6;
        }
        while (v28 == MultiWordSeparator);
      }
      else
      {
        uint64_t v27 = 0;
        int v6 = v24;
      }
      if (*((void *)&v60 + 1) >= (unint64_t)v60)
      {
        if (v62)
        {
          v68[0] = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v59, *((unint64_t *)&v60 + 1), v68, 1uLL);
          unsigned int v29 = v59;
          --*((void *)&v60 + 1);
        }
        else
        {
          unsigned int v29 = v59;
          if ((void)v60) {
            v59[(void)v60 - 1] = 0;
          }
        }
      }
      else
      {
        unsigned int v29 = v59;
        v59[*((void *)&v60 + 1)] = 0;
      }
      uint64_t v30 = TBlock::format(a1, v29, (TLocaleInfo **)v63, MultiWordSeparator, v27, v23, a3, a4, (uint64_t)&v64);
      uint64_t v31 = v30;
      if (*((void *)&v65 + 1)) {
        int v23 = *(_DWORD *)&v64[4 * *((void *)&v65 + 1) - 4];
      }
      if (v30) {
        int v32 = v16;
      }
      else {
        int v32 = 0;
      }
      if (v32 != 1)
      {
        int v34 = v55;
        if (!v30) {
          goto LABEL_85;
        }
        goto LABEL_83;
      }
      {
        operator new();
      }
      if ((v23 - 32) < 0x5F
        || (v23 - 162) <= 0xD && ((1 << (v23 + 94)) & 0x241B) != 0
        || (v23 - 10629) < 2
        || v23 == 8361)
      {
        {
          operator new();
        }
        int v33 = TLocaleInfo::toNarrow(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, MultiWordSeparator);
      }
      else
      {
        {
          operator new();
        }
        if ((v23 - 65281) >= 0x60 && (v23 - 65504) >= 7)
        {
          int v34 = v55;
          if (v23 != 12288) {
            goto LABEL_83;
          }
        }
        {
          operator new();
        }
        int v33 = TLocaleInfo::toWide(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, MultiWordSeparator);
      }
      int v34 = v33;
      do
      {
LABEL_83:
        v68[0] = v34;
        TBuffer<wchar_t>::insert((uint64_t)&v64, *((unint64_t *)&v65 + 1), v68, 1uLL);
        --v31;
      }
      while (v31);
      int v23 = v34;
LABEL_85:
      uint64_t v24 = wcschr(v6, MultiWordSeparator);
    }
    if (MultiWordSeparator <= 0x20 && ((1 << MultiWordSeparator) & 0x100002600) != 0) {
      goto LABEL_56;
    }
LABEL_55:
    int v25 = 1;
    goto LABEL_56;
  }
  char i = 1;
LABEL_109:
  TItnControlState::set(v63, a2, isUpper, i & 1, 1, 1uLL);
  uint64_t v36 = TParam::getActiveConfigHandle((TParam *)(a3 + 3792));
  size_t v37 = TParam::getValidConfig((TParam *)(a3 + 3792), v36);
  uint64_t v38 = a1;
  if (*(unsigned char *)(a3 + v37 + 3944))
  {
    BOOL v39 = 1;
  }
  else
  {
    if (*(char *)(a1 + 71) < 0) {
      uint64_t v40 = *(void *)(a1 + 56);
    }
    else {
      uint64_t v40 = *(unsigned __int8 *)(a1 + 71);
    }
    BOOL v39 = v40 == 0;
  }
  unsigned int v41 = !v39;
  uint64_t v42 = a1;
  do
  {
    while (1)
    {
      uint64_t v42 = *(void *)(v42 + 152);
      if (!v42)
      {
        int v45 = 0;
        goto LABEL_126;
      }
      if (*(char *)(v42 + 71) < 0) {
        break;
      }
      if (*(unsigned char *)(v42 + 71)) {
        goto LABEL_121;
      }
    }
  }
  while (!*(void *)(v42 + 56));
LABEL_121:
  if (*(char *)(v42 + 95) < 0)
  {
    uint64_t v43 = *(void *)(v42 + 72);
    uint64_t v44 = *(void *)(v42 + 80);
  }
  else
  {
    uint64_t v43 = v42 + 72;
    uint64_t v44 = *(unsigned __int8 *)(v42 + 95);
  }
  int v45 = *(_DWORD *)(v43 + 4 * v44 - 4);
LABEL_126:
  uint64_t v46 = *(void *)(a1 + 144);
  if (!v46)
  {
LABEL_132:
    int v47 = 0;
    goto LABEL_135;
  }
  while ((*(char *)(v46 + 71) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(v46 + 71))
    {
      unint64_t v48 = (int *)(v46 + 48);
      goto LABEL_134;
    }
LABEL_131:
    uint64_t v46 = *(void *)(v46 + 144);
    if (!v46) {
      goto LABEL_132;
    }
  }
  if (!*(void *)(v46 + 56)) {
    goto LABEL_131;
  }
  unint64_t v48 = *(int **)(v46 + 48);
LABEL_134:
  int v47 = *v48;
LABEL_135:
  if (*v6)
  {
    size_t v37 = wcslen(v6);
    __int32 v49 = v6[v37 - 1];
  }
  else
  {
    __int32 v49 = 0;
  }
  {
    if (v37) {
      operator new();
    }
  }
  if ((v49 - 19968) >> 4 < 0x51B) {
    goto LABEL_142;
  }
  {
    if (v37) {
      operator new();
    }
  }
  if ((v47 - 19968) >> 4 < 0x51B) {
    goto LABEL_142;
  }
  {
    if (v37) {
      operator new();
    }
  }
  if ((v49 - 65382) < 0x38
    || (v49 - 12449) < 0x56
    || (v49 - 12443) < 4
    || (v49 - 12540) < 3
    || (v49 - 65438) < 2)
  {
    goto LABEL_142;
  }
  {
    if (v37) {
      operator new();
    }
  }
  if ((v47 - 65382) < 0x38
    || (v47 - 12449) < 0x56
    || (v47 - 12443) < 4
    || (v47 - 12540) < 3
    || (v47 - 65438) < 2)
  {
    goto LABEL_142;
  }
  {
    if (v37) {
      operator new();
    }
  }
  if ((v49 - 12353) < 0x53 || (v49 - 12540) < 3 || (v49 - 12445) < 2) {
    goto LABEL_142;
  }
  {
    if (v37) {
      operator new();
    }
  }
  uint64_t v38 = v57;
  if ((v47 - 12353) < 0x53) {
    goto LABEL_142;
  }
  if ((v47 - 12540) < 3) {
    goto LABEL_142;
  }
  if ((v47 - 12445) < 2) {
    goto LABEL_142;
  }
  unint64_t v50 = (TLocaleInfo *)TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)v37);
  if ((v49 & 0xFFFFFFC0) == 0x3000) {
    goto LABEL_142;
  }
  unint64_t v51 = (TLocaleInfo *)TLocaleInfo::getGlobalLocaleInfo(v50);
  if ((v47 & 0xFFFFFFC0) == 0x3000) {
    goto LABEL_142;
  }
  uint64_t v52 = (TLocaleInfo *)TLocaleInfo::getGlobalLocaleInfo(v51);
  if ((v49 - 3585) > 0x5A)
  {
    uint64_t v38 = v57;
    goto LABEL_143;
  }
  TLocaleInfo::getGlobalLocaleInfo(v52);
  uint64_t v38 = v57;
  if ((v47 - 3585) <= 0x5A) {
LABEL_142:
  }
    unsigned int v41 = 0;
LABEL_143:
  *(void *)(v38 + 224) = TBlock::format(v38, (unsigned int *)v6, (TLocaleInfo **)v63, 32, v41, v45, a3, a4, (uint64_t)&v64);
  if (*((void *)&v65 + 1) >= (unint64_t)v65)
  {
    if (v67)
    {
      LODWORD(v59) = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v64, *((unint64_t *)&v65 + 1), (int *)&v59, 1uLL);
      --*((void *)&v65 + 1);
    }
    else if ((void)v65)
    {
      *(_DWORD *)&v64[4 * v65 - 4] = 0;
    }
  }
  else
  {
    *(_DWORD *)&v64[4 * *((void *)&v65 + 1)] = 0;
  }
  uint64_t result = MEMORY[0x216698480](v38 + 72);
  if (v67)
  {
    uint64_t result = (uint64_t)v64;
    if (v64 != v66)
    {
      if (v64) {
        return MEMORY[0x216698730]();
      }
    }
  }
  return result;
}

void sub_213F8B8CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  MEMORY[0x216698730](v12, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x8C8]))
  {
    unint64_t v14 = STACK[0x4B0];
    if (STACK[0x4B0] != a12)
    {
      if (v14) {
        MEMORY[0x216698730](v14, 0x1000C4052888210);
      }
    }
  }
  _Unwind_Resume(a1);
}

void TBlock::adjustResult(std::wstring *this)
{
  unsigned int v2 = HIBYTE(this[3].__r_.__value_.__r.__words[2]);
  if (SHIBYTE(this[3].__r_.__value_.__r.__words[2]) < 0)
  {
    unint64_t size = this[3].__r_.__value_.__l.__size_;
    if (size < 2) {
      return;
    }
  }
  else
  {
    if (v2 < 2) {
      return;
    }
    unint64_t size = HIBYTE(this[3].__r_.__value_.__r.__words[2]);
  }
  uint64_t v4 = (std::wstring::__raw *)&this[3];
  unint64_t v5 = size - 1;
  if ((v2 & 0x80) != 0)
  {
    if (*(_DWORD *)(v4->__words[0] + 4 * v5) != 46) {
      return;
    }
    std::wstring::size_type v6 = this[3].__r_.__value_.__l.__size_;
  }
  else
  {
    if (*((_DWORD *)v4->__words + v5) != 46) {
      return;
    }
    std::wstring::size_type v6 = HIBYTE(this[3].__r_.__value_.__r.__words[2]);
  }
  std::wstring::size_type v7 = v6 - 2;
  uint64_t v8 = this + 3;
  if ((v2 & 0x80) != 0) {
    uint64_t v8 = (std::wstring *)v4->__words[0];
  }
  signed int v9 = v8->__r_.__value_.__s.__data_[v7];
  {
    operator new();
  }
  if (TLocaleInfo::isAlpha(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v9))
  {
    std::wstring::pointer data = this[6].__r_.__value_.__l.__data_;
    if (data)
    {
      long long v11 = data + 18;
      if (*((char *)data + 95) < 0) {
        long long v11 = (void *)*v11;
      }
      if (*(_DWORD *)v11 == 46)
      {
        if (SHIBYTE(this[3].__r_.__value_.__r.__words[2]) < 0) {
          std::wstring::size_type v12 = this[3].__r_.__value_.__l.__size_;
        }
        else {
          std::wstring::size_type v12 = HIBYTE(this[3].__r_.__value_.__r.__words[2]);
        }
        std::wstring::resize(this + 3, v12 - 1, 0);
      }
    }
  }
}

void sub_213F8BBC4(_Unwind_Exception *a1)
{
  MEMORY[0x216698730](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

void throwBadLengthForNullPointer(char a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void throwBadStringPointer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void MrecInitModule_neuraln_neuraln(void)
{
  if (!gParDebugShowNNRunFunctSequence)
  {
    int v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugShowNNRunFunctSequence", byte_2140A68A9, byte_2140A68A9, 0, 0, 0);
    *uint64_t v1 = &unk_26C4E0858;
    gParDebugShowNNRunFunctSequence = (uint64_t)v1;
    unsigned int v2 = (uint64_t *)GlobalParamMgr::smpGlobalParamMgr;
    GlobalParamMgr::addParam(v2, (GlobalParam **)&gParDebugShowNNRunFunctSequence);
  }
}

void NeuralNet::~NeuralNet(NeuralNetImage **this)
{
}

NeuralNetImage *DgnDelete<NeuralNetImage>(NeuralNetImage *result)
{
  if (result)
  {
    NeuralNetImage::~NeuralNetImage(result);
    return (NeuralNetImage *)MemChunkFree(v1, 0);
  }
  return result;
}

NeuralNetState *DgnDelete<NeuralNetState>(NeuralNetState *result)
{
  if (result)
  {
    NeuralNetState::~NeuralNetState(result);
    return (NeuralNetState *)MemChunkFree(v1, 0);
  }
  return result;
}

void NeuralNet::saveNeuralNet(NeuralNet *this, DFile *a2, DFileChecksums *a3, int a4, int a5)
{
  unint64_t v5 = (NeuralNetImage *)*((void *)this + 10);
  if (a4) {
    NeuralNetImage::saveNeuralNetImageText(v5, a2, a5);
  }
  else {
    NeuralNetImage::saveNeuralNetImageBinary(v5, a2, a3, a5);
  }
}

void NeuralNetImage::saveNeuralNetImageText(NeuralNetImage *this, DFile *a2, int a3)
{
  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v36);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v36, (uint64_t)a2, 0x31u, a3);
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v36, sNNT_Versions, (uint64_t)&v34, v6, v7, v8, v9, v10);
  DgnTextFileWriter::setFileType((uint64_t)v36, "NeuralNetText", (void *)(v34 + 8 * (v35 - 1)));
  unsigned int v11 = *((unsigned __int16 *)this + 104) - 1;
  if (v11 < 3) {
    DgnTextFileWriter::setHeaderField((DgnTextFileWriter *)v36, "NeuralNetOutputType", off_2641F5F60[(__int16)v11]);
  }
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v36, "NumberOfNeurons", *((unsigned __int16 *)this + 105));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v36, "NumberOfBlocks", *((unsigned __int16 *)this + 106));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v36, "NumberOfInputNeurons", *((unsigned __int16 *)this + 107));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v36, "NumberOfOutputNeurons", *((unsigned __int16 *)this + 108));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v36, "InputFeatureDim", *((unsigned __int16 *)this + 109));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v36, "InputContextWindowSize", *((unsigned __int16 *)this + 110));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v36, "WeightIntScale", *((unsigned int *)this + 58));
  if ((*((_WORD *)this + 104) & 0xFFFE) == 2) {
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v36, "OutputFeatureScaleAndOffsetIntScale", *((unsigned __int16 *)this + 113));
  }
  DgnArray<DgnString>::DgnArray(v33, 6);
  size_t v37 = 0;
  unint64_t v12 = realloc_array(0, &v37, 0x18uLL, 0, 0, 1);
  uint64_t v30 = v37;
  int v31 = 6;
  int v32 = v12 >> 2;
  DgnString::operator=(*(DgnString **)v33, "TableName");
  *uint64_t v30 = 0;
  DgnString::operator=((DgnString *)(*(void *)v33 + 16), "UnsValue1");
  v30[1] = 3;
  DgnString::operator=((DgnString *)(*(void *)v33 + 32), "UnsValue2");
  v30[2] = 3;
  DgnString::operator=((DgnString *)(*(void *)v33 + 48), "IntValue1");
  void v30[3] = 1;
  DgnString::operator=((DgnString *)(*(void *)v33 + 64), "IntValue2");
  v30[4] = 1;
  DgnString::operator=((DgnString *)(*(void *)v33 + 80), "IntValue3");
  v30[5] = 1;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v36, (uint64_t)&v30, (uint64_t)v33);
  if (*((_WORD *)this + 105))
  {
    unint64_t v13 = 0;
    while (2)
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v36, 0, "Neuron");
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v36, 1u, v13);
      int v14 = *(unsigned __int16 *)(*((void *)this + 37) + 2 * v13);
      switch(*(_WORD *)(*((void *)this + 37) + 2 * v13))
      {
        case 0:
          goto LABEL_13;
        case 1:
          int v14 = 2;
          goto LABEL_13;
        case 2:
        case 3:
        case 5:
        case 6:
        case 7:
        case 8:
          goto LABEL_11;
        case 4:
          int v14 = 1;
          goto LABEL_13;
        case 9:
          goto LABEL_10;
        default:
          if (v14 == 91) {
LABEL_10:
          }
            int v14 = 3;
          else {
LABEL_11:
          }
            int v14 = 4 * (v14 == 3);
LABEL_13:
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v36, 2u, v14);
          unint64_t v15 = *((unsigned __int16 *)this + 107);
          if (v13 >= v15) {
            int v16 = *(_DWORD *)(*((void *)this + 2) + 4 * (v13 - v15));
          }
          else {
            int v16 = 0;
          }
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v36, 3u, v16);
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v36, 4u, 0);
          if (*((_WORD *)this + 104) == 1
            && (int v17 = *((unsigned __int16 *)this + 105),
                int v18 = *((unsigned __int16 *)this + 108),
                v13 >= (v17 - v18)))
          {
            DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v36, 5u, *(unsigned __int16 *)(*((void *)this + 24) + 2 * (v13 + v18 - v17)));
          }
          else
          {
            DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v36, 5u, -1);
          }
          DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v36);
          if (++v13 >= *((unsigned __int16 *)this + 105)) {
            break;
          }
          continue;
      }
      break;
    }
  }
  if (*((_WORD *)this + 106))
  {
    unint64_t v19 = 0;
    do
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v36, 0, "Block");
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v36, 1u, v19);
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v36, 2u, *(unsigned __int16 *)(*((void *)this + 39) + 2 * v19));
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v36, 3u, *(unsigned __int16 *)(*((void *)this + 41) + 2 * v19));
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v36, 4u, *(unsigned __int16 *)(*((void *)this + 43) + 2 * v19));
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v36, 5u, *(unsigned __int16 *)(*((void *)this + 45) + 2 * v19));
      DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v36);
      ++v19;
      unint64_t v20 = *((unsigned __int16 *)this + 106);
    }
    while (v19 < v20);
    if (*((_WORD *)this + 106))
    {
      unint64_t v21 = 0;
      uint64_t v22 = *((void *)this + 41);
      do
      {
        if (*(_WORD *)(v22 + 2 * v21))
        {
          unint64_t v23 = 0;
          uint64_t v24 = *(unsigned __int16 *)(*((void *)this + 43) + 2 * v21);
          int v25 = *(unsigned __int16 *)(*((void *)this + 39) + 2 * v21);
          uint64_t v26 = *((void *)this + 45);
          do
          {
            if (*(_WORD *)(v26 + 2 * v21))
            {
              unint64_t v27 = 0;
              uint64_t v28 = 16 * v24;
              do
              {
                DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v36, 0, "Weight");
                DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v36, 1u, v21);
                DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v36, 2u, v23 + v25);
                DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v36, 3u, v24 + v27);
                DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v36, 4u, *(__int16 *)(*(void *)(*(void *)this + v28) + 2 * v23));
                DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v36, 5u, 0);
                DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v36);
                ++v27;
                uint64_t v26 = *((void *)this + 45);
                v28 += 16;
              }
              while (v27 < *(unsigned __int16 *)(v26 + 2 * v21));
              uint64_t v22 = *((void *)this + 41);
            }
            ++v23;
          }
          while (v23 < *(unsigned __int16 *)(v22 + 2 * v21));
          LOWORD(v20) = *((_WORD *)this + 106);
        }
        ++v21;
      }
      while (v21 < (unsigned __int16)v20);
    }
  }
  if ((*((_WORD *)this + 104) & 0xFFFE) == 2 && *((_WORD *)this + 108))
  {
    unint64_t v29 = 0;
    do
    {
      DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v36, 0, "OutputFeatureScaleAndOffset");
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v36, 1u, v29);
      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v36, 2u, *(_DWORD *)(*((void *)this + 20) + 4 * v29));
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v36, 3u, *(_DWORD *)(*((void *)this + 22) + 4 * v29));
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v36, 4u, 0);
      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v36, 5u, 0);
      DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v36);
      ++v29;
    }
    while (v29 < *((unsigned __int16 *)this + 108));
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v30);
  DgnArray<DgnString>::releaseAll((uint64_t)v33);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v34);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v36);
}

void sub_213F8C41C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  DgnArray<DgnString>::releaseAll((uint64_t)va);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va1);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)va2);
  _Unwind_Resume(a1);
}

void (***NeuralNetImage::saveNeuralNetImageBinary(NeuralNetImage *this, DFile *a2, DFileChecksums *a3, int a4))(void)
{
  uint64_t v7 = OpenAndWriteMrecHeader((uint64_t)a2, 0x30u, a4, "MRNNB!?", 24, 7);
  int v10 = 0;
  writeObject<DgnPrimArray<short>>((uint64_t)v7, (uint64_t)this, &v10);
  writeObject<unsigned int>((uint64_t)v7, (uint64_t)this + 16, &v10);
  writeObject<unsigned short>((uint64_t)v7, (uint64_t)this + 32, &v10);
  writeObject<unsigned short>((uint64_t)v7, (uint64_t)this + 48, &v10);
  writeObject<unsigned short>((uint64_t)v7, (uint64_t)this + 64, &v10);
  writeObject<unsigned short>((uint64_t)v7, (uint64_t)this + 80, &v10);
  writeObject<unsigned int>((uint64_t)v7, (uint64_t)this + 96, &v10);
  writeObject<unsigned short>((uint64_t)v7, (uint64_t)this + 112, &v10);
  writeObject<unsigned short>((uint64_t)v7, (uint64_t)this + 128, &v10);
  writeObject<unsigned short>((uint64_t)v7, (uint64_t)this + 144, &v10);
  writeObject<unsigned int>((uint64_t)v7, (uint64_t)this + 160, &v10);
  writeObject<unsigned int>((uint64_t)v7, (uint64_t)this + 176, &v10);
  writeObject((uint64_t)v7, (unsigned __int16 *)this + 104, &v10);
  writeObject((uint64_t)v7, (unsigned __int16 *)this + 105, &v10);
  writeObject((uint64_t)v7, (unsigned __int16 *)this + 106, &v10);
  writeObject((uint64_t)v7, (unsigned __int16 *)this + 107, &v10);
  writeObject((uint64_t)v7, (unsigned __int16 *)this + 108, &v10);
  writeObject((uint64_t)v7, (unsigned __int16 *)this + 109, &v10);
  writeObject((uint64_t)v7, (unsigned __int16 *)this + 110, &v10);
  writeObject((uint64_t)v7, (unsigned __int16 *)this + 111, &v10);
  writeObject((uint64_t)v7, (unsigned __int16 *)this + 112, &v10);
  writeObject((uint64_t)v7, (unsigned __int16 *)this + 113, &v10);
  writeObject((uint64_t)v7, (int *)this + 58, &v10);
  writeObject<unsigned short>((uint64_t)v7, (uint64_t)this + 192, &v10);
  writeObject<unsigned short>((uint64_t)v7, (uint64_t)this + 296, &v10);
  writeObject<unsigned short>((uint64_t)v7, (uint64_t)this + 312, &v10);
  writeObject<unsigned short>((uint64_t)v7, (uint64_t)this + 328, &v10);
  writeObject<unsigned short>((uint64_t)v7, (uint64_t)this + 344, &v10);
  writeObject<unsigned short>((uint64_t)v7, (uint64_t)this + 360, &v10);
  writeObjectChecksum((uint64_t)v7, &v10);
  uint64_t CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
  DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x30u, v10);
  return DgnDelete<DgnStream>((void (***)(void))v7);
}

uint64_t NeuralNet::getWindowSize(NeuralNet *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = **((void **)this + 9);
  if (!v8)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/neuraln/neuraln.cpp", 299, (uint64_t)"neuraln/neuraln", 1, (uint64_t)"%s", a7, a8, (char)&errStr_neuraln_neuraln_E_JOIN_REQUIRED);
    uint64_t v8 = **((void **)this + 9);
  }
  return *(unsigned __int16 *)(v8 + 220);
}

uint64_t NeuralNet::getHalfWindowSize(NeuralNet *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = **((void **)this + 9);
  if (!v8)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/neuraln/neuraln.cpp", 307, (uint64_t)"neuraln/neuraln", 1, (uint64_t)"%s", a7, a8, (char)&errStr_neuraln_neuraln_E_JOIN_REQUIRED);
    uint64_t v8 = **((void **)this + 9);
  }
  return *(unsigned __int16 *)(v8 + 220) >> 1;
}

uint64_t NeuralNet::getFrameSize(NeuralNet *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = **((void **)this + 9);
  if (!v8)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/neuraln/neuraln.cpp", 320, (uint64_t)"neuraln/neuraln", 1, (uint64_t)"%s", a7, a8, (char)&errStr_neuraln_neuraln_E_JOIN_REQUIRED);
    uint64_t v8 = **((void **)this + 9);
  }
  return *(unsigned __int16 *)(v8 + 218);
}

uint64_t NeuralNet::getOutputSize(NeuralNet *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = **((void **)this + 9);
  if (!v8)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/neuraln/neuraln.cpp", 327, (uint64_t)"neuraln/neuraln", 1, (uint64_t)"%s", a7, a8, (char)&errStr_neuraln_neuraln_E_JOIN_REQUIRED);
    uint64_t v8 = **((void **)this + 9);
  }
  return *(unsigned __int16 *)(v8 + 216);
}

BOOL NeuralNet::isOutTypeBF(NeuralNet *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = **((void **)this + 9);
  if (!v8)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/neuraln/neuraln.cpp", 333, (uint64_t)"neuraln/neuraln", 1, (uint64_t)"%s", a7, a8, (char)&errStr_neuraln_neuraln_E_JOIN_REQUIRED);
    uint64_t v8 = **((void **)this + 9);
  }
  return *(unsigned __int16 *)(v8 + 208) == 2;
}

BOOL NeuralNet::isOutTypeConcatenatedBF(NeuralNet *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = **((void **)this + 9);
  if (!v8)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/neuraln/neuraln.cpp", 340, (uint64_t)"neuraln/neuraln", 1, (uint64_t)"%s", a7, a8, (char)&errStr_neuraln_neuraln_E_JOIN_REQUIRED);
    uint64_t v8 = **((void **)this + 9);
  }
  return *(unsigned __int16 *)(v8 + 208) == 3;
}

void NeuralNet::reset(NeuralNet *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!**((void **)this + 9)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/neuraln/neuraln.cpp", 353, (uint64_t)"neuraln/neuraln", 1, (uint64_t)"%s", a7, a8, (char)&errStr_neuraln_neuraln_E_JOIN_REQUIRED);
  }

  NeuralNet::initFastNeuralNet(this);
}

void NeuralNet::initFastNeuralNet(NeuralNet *this)
{
  uint64_t v2 = *((void *)this + 9);
  int v3 = *(_DWORD *)(v2 + 12) - *(_DWORD *)(v2 + 16);
  if (v3 >= 1)
  {
    uint64_t v4 = *(_DWORD **)(v2 + 56);
    uint64_t v5 = &v4[v3];
    uint64_t v6 = *(int **)(*(void *)v2 + 16);
    do
    {
      int v7 = *v6++;
      *v4++ = v7;
    }
    while (v4 < v5);
  }
  bzero(*(void **)(v2 + 88), 2 * *(unsigned int *)(v2 + 96));
  uint64_t v8 = *((void *)this + 9);
  uint64_t v9 = *(void **)(v8 + 72);
  size_t v10 = 2 * *(unsigned int *)(v8 + 80);

  bzero(v9, v10);
}

double NeuralNet::run(NeuralNet *a1, uint64_t *a2, unsigned int a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!**((void **)a1 + 9)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/neuraln/neuraln.cpp", 380, (uint64_t)"neuraln/neuraln", 1, (uint64_t)"%s", a7, a8, (char)&errStr_neuraln_neuraln_E_JOIN_REQUIRED);
  }
  if (!(a4 | a5)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/neuraln/neuraln.cpp", 382, (uint64_t)"neuraln/neuraln", 18, (uint64_t)"%s", a7, a8, (char)&errStr_neuraln_neuraln_E_BAD_RUN_API_OUTPUT_PARAMETERS);
  }
  NeuralNet::loadInputFastNeuralNet((uint64_t)a1, a2, a3);
  NeuralNet::runFastNeuralNet(a1);
  int v14 = (uint64_t *)*((void *)a1 + 9);
  if ((*(_WORD *)(*v14 + 208) & 0xFFFE) == 2)
  {
    if (a4)
    {
      FeatureFrame::setFeature(v14[19], (uint64_t)(v14 + 3));
      int v21 = 0;
      BinaryIntScale::setScale(&v21, *(unsigned __int16 *)(**((void **)a1 + 9) + 226));
      FeatureFrame::scaleFeatureToUns8(*(void *)(*((void *)a1 + 9) + 152), (void *)(**((void **)a1 + 9) + 160), (void *)(**((void **)a1 + 9) + 176), (BinaryIntScale *)&v21);
      uint64_t Feature = FeatureFrame::getFeature(*(FeatureFrame **)(*((void *)a1 + 9) + 152));
      DgnPrimArray<unsigned char>::copyArraySlice(a4, (void *)Feature, 0, *(_DWORD *)(Feature + 8));
    }
    if (a5)
    {
      int v16 = (void *)*((void *)a1 + 9);
      uint64_t v17 = *((unsigned int *)v16 + 8);
      if (v17)
      {
        int v18 = (double *)v16[3];
        unint64_t v19 = *(double **)a5;
        do
        {
          double v20 = *v18++;
          double result = v20;
          *v19++ = v20;
          --v17;
        }
        while (v17);
      }
    }
  }
  return result;
}

uint64_t NeuralNet::loadInputFastNeuralNet(uint64_t result, uint64_t *a2, unsigned int a3)
{
  uint64_t v3 = *(void *)(result + 80);
  unsigned int v4 = *(unsigned __int16 *)(v3 + 220);
  if (v4 == 1)
  {
    uint64_t v5 = *(void *)(result + 72);
    uint64_t v6 = *(unsigned int *)(v5 + 16);
    if (v6)
    {
      int v7 = *(unsigned __int8 **)(*a2 + 16 * (a3 % *((_DWORD *)a2 + 2)));
      double v8 = (double)*(int *)(v3 + 240);
      uint64_t v9 = *(_WORD **)(v5 + 72);
      do
      {
        unsigned int v10 = *v7++;
        double v11 = (double)v10;
        if ((double)v10 > 256.0) {
          double v11 = 256.0;
        }
        double v12 = v11 * v8;
        if (v12 >= 0.0) {
          double v13 = 0.5;
        }
        else {
          double v13 = -0.5;
        }
        *v9++ = (int)(v12 + v13);
        --v6;
      }
      while (v6);
    }
  }
  else
  {
    unsigned int v14 = a3 - (v4 >> 1);
    unsigned int v15 = a3 + (v4 >> 1);
    if (v14 <= v15)
    {
      uint64_t v16 = 0;
      unsigned int v17 = *((_DWORD *)a2 + 2);
      uint64_t v18 = *a2;
      uint64_t v19 = *(unsigned int *)(*a2 + 16 * (a3 % v17) + 8);
      do
      {
        if (v19)
        {
          double v20 = *(unsigned __int8 **)(v18 + 16 * (v14 % v17));
          double v21 = (double)*(int *)(v3 + 240);
          uint64_t v22 = *(void *)(*(void *)(result + 72) + 72);
          uint64_t v23 = v19;
          do
          {
            unsigned int v24 = *v20++;
            double v25 = (double)v24;
            if ((double)v24 > 256.0) {
              double v25 = 256.0;
            }
            double v26 = v25 * v21;
            if (v26 >= 0.0) {
              double v27 = 0.5;
            }
            else {
              double v27 = -0.5;
            }
            uint64_t v28 = (v16 + 1);
            *(_WORD *)(v22 + 2 * vHash<unsigned int,unsigned int,WordIdScope,unsigned int>::Hash((uint64_t)this + 32, 0, 16) = (int)(v26 + v27);
            LODWORD(vHash<unsigned int,unsigned int,WordIdScope,unsigned int>::Hash((uint64_t)this + 32, 0, 16) = v16 + 1;
            --v23;
          }
          while (v23);
        }
        else
        {
          uint64_t v28 = v16;
        }
        ++v14;
        uint64_t v16 = v28;
      }
      while (v14 <= v15);
    }
  }
  return result;
}

void NeuralNet::runFastNeuralNet(NeuralNet *this)
{
  uint64_t v2 = *(unsigned __int16 ***)(*((void *)this + 9) + 104);
  uint64_t v3 = NeuralNet::fastInputSendingWithDotProduct((uint64_t)this, *v2);
  uint64_t v5 = (int *)*((void *)this + 9);
  if (v5[5] >= 2)
  {
    uint64_t v6 = 1;
    do
    {
      int v7 = v2[v6];
      switch(*(_DWORD *)(*(void *)(*(void *)v5 + 96) + 4 * v6))
      {
        case 1:
          uint64_t v3 = NeuralNet::fastDpsSendingWithDotProduct((uint64_t)this, v7);
          break;
        case 2:
          uint64_t v3 = NeuralNet::fastLinearSendingWithDotProduct((uint64_t)this, v7);
          break;
        case 3:
          uint64_t v3 = NeuralNet::fastFeedbackSendingWithDotProduct(v3, v7);
          break;
        case 4:
          NeuralNet::fastOutputDps((uint64_t)this, v7);
          break;
        case 5:
          uint64_t v3 = NeuralNet::fastOutputLinear((uint64_t)this, v7, v4);
          break;
        case 6:
          NeuralNet::fastOutputDpsm((uint64_t)this, v7);
          break;
        case 7:
          uint64_t v3 = NeuralNet::fastReluSendingWithDotProduct((uint64_t)this, v7);
          break;
        case 8:
          double v4 = NeuralNet::fastOutputRelu((uint64_t)this, v7, v4);
          break;
        default:
          break;
      }
      ++v6;
      uint64_t v5 = (int *)*((void *)this + 9);
    }
    while (v6 < v5[5]);
  }
}

FeatureFrame *NeuralNetState::freeExecutionSpace(NeuralNetState *this)
{
  unint64_t v2 = *((unsigned int *)this + 28);
  if (v2)
  {
    unint64_t v3 = 0;
    uint64_t v4 = *((void *)this + 13);
    do
    {
      uint64_t v5 = *(void **)(v4 + 8 * v3);
      if (v5)
      {
        MemChunkFree(v5, 0);
        unint64_t v2 = *((unsigned int *)this + 28);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  uint64_t v6 = (FeatureFrame *)*((void *)this + 19);

  return DgnDelete<FeatureFrame>(v6);
}

uint64_t NeuralNet::fastInputSendingWithDotProduct(uint64_t a1, unsigned __int16 *a2)
{
  unint64_t v3 = (_WORD *)*((void *)a2 + 9);
  unint64_t v2 = (void *)*((void *)a2 + 10);
  if (*a2)
  {
    uint64_t v4 = (unsigned __int16 *)*((void *)a2 + 3);
    uint64_t v5 = &v4[*a2];
    uint64_t v6 = (void *)*((void *)a2 + 8);
    int v7 = (_WORD *)*((void *)a2 + 5);
    do
    {
      int v8 = *v4;
      int v9 = v8 - (unsigned __int16)*v7;
      if (v9)
      {
        *v3++ = v9;
        *v2++ = *v6;
        *int v7 = v8;
      }
      ++v4;
      v6 += 2;
      ++v7;
    }
    while (v4 < v5);
    uint64_t v10 = *((void *)a2 + 9);
    unint64_t v2 = (void *)*((void *)a2 + 10);
  }
  else
  {
    uint64_t v10 = *((void *)a2 + 9);
  }
  unint64_t v11 = (unint64_t)v3 - v10;
  if ((int)(((unint64_t)v3 - v10) >> 1) >= 1)
  {
    uint64_t v12 = 0;
    double v13 = (_DWORD *)*((void *)a2 + 2);
    uint64_t v14 = a2[1];
    uint64_t v15 = (v11 >> 1);
    do
    {
      if (v14)
      {
        uint64_t v16 = (__int16 *)v2[v12];
        unsigned int v17 = &v16[v14];
        int v18 = *(__int16 *)(v10 + 2 * v12);
        uint64_t v19 = v13;
        do
        {
          int v20 = *v16++;
          uint64_t result = (*v19 + v20 * v18);
          *v19++ = result;
        }
        while (v16 < v17);
      }
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t NeuralNet::fastLinearSendingWithDotProduct(uint64_t result, unsigned __int16 *a2)
{
  unint64_t v3 = (_WORD *)*((void *)a2 + 9);
  unint64_t v2 = (void *)*((void *)a2 + 10);
  if (*a2)
  {
    uint64_t v4 = (_WORD *)*((void *)a2 + 3);
    uint64_t v5 = &v4[*a2];
    uint64_t v6 = (void *)*((void *)a2 + 8);
    int v7 = (unsigned int *)*((void *)a2 + 1);
    do
    {
      unsigned int v8 = *v7++;
      int v9 = v8 / *(_DWORD *)(*(void *)(result + 80) + 232);
      int v10 = (unsigned __int16)*v4;
      if (v10 != (unsigned __int16)v9)
      {
        *v3++ = v9 - v10;
        *v2++ = *v6;
        *uint64_t v4 = v9;
      }
      ++v4;
      v6 += 2;
    }
    while (v4 < v5);
    uint64_t v11 = *((void *)a2 + 9);
    unint64_t v2 = (void *)*((void *)a2 + 10);
  }
  else
  {
    uint64_t v11 = *((void *)a2 + 9);
  }
  unint64_t v12 = (unint64_t)v3 - v11;
  if ((int)(((unint64_t)v3 - v11) >> 1) >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = (_DWORD *)*((void *)a2 + 2);
    uint64_t v15 = a2[1];
    uint64_t v16 = (v12 >> 1);
    do
    {
      if (v15)
      {
        unsigned int v17 = (__int16 *)v2[v13];
        int v18 = &v17[v15];
        int v19 = *(__int16 *)(v11 + 2 * v13);
        int v20 = v14;
        do
        {
          int v21 = *v17++;
          uint64_t result = (*v20 + v21 * v19);
          *v20++ = result;
        }
        while (v17 < v18);
      }
      ++v13;
    }
    while (v13 != v16);
  }
  return result;
}

uint64_t NeuralNet::fastDpsSendingWithDotProduct(uint64_t result, unsigned __int16 *a2)
{
  unint64_t v3 = (_WORD *)*((void *)a2 + 9);
  unint64_t v2 = (void *)*((void *)a2 + 10);
  if (*a2)
  {
    uint64_t v4 = (_WORD *)*((void *)a2 + 3);
    uint64_t v5 = &v4[*a2];
    uint64_t v6 = (void *)*((void *)a2 + 8);
    int v7 = (int *)*((void *)a2 + 1);
    int v8 = *(_DWORD *)(result + 52);
    do
    {
      int v10 = *v7++;
      int v9 = v10;
      if (v10 <= v8)
      {
        if (v9 >= *(_DWORD *)(result + 56)) {
          int v11 = (int)(*(double *)(result + 64) * (double)v9);
        }
        else {
          int v11 = -*(_DWORD *)(result + 48);
        }
      }
      else
      {
        int v11 = *(_DWORD *)(result + 48);
      }
      int v12 = *(unsigned __int16 *)(*(void *)(result + 40) + 2 * v11);
      int v13 = v12 - (unsigned __int16)*v4;
      if (v13)
      {
        *v3++ = v13;
        *v2++ = *v6;
        *uint64_t v4 = v12;
      }
      ++v4;
      v6 += 2;
    }
    while (v4 < v5);
    uint64_t v14 = *((void *)a2 + 9);
    unint64_t v2 = (void *)*((void *)a2 + 10);
  }
  else
  {
    uint64_t v14 = *((void *)a2 + 9);
  }
  unint64_t v15 = (unint64_t)v3 - v14;
  if ((int)(((unint64_t)v3 - v14) >> 1) >= 1)
  {
    uint64_t v16 = 0;
    unsigned int v17 = (_DWORD *)*((void *)a2 + 2);
    uint64_t v18 = a2[1];
    uint64_t v19 = (v15 >> 1);
    do
    {
      if (v18)
      {
        int v20 = (__int16 *)v2[v16];
        int v21 = &v20[v18];
        int v22 = *(__int16 *)(v14 + 2 * v16);
        uint64_t v23 = v17;
        do
        {
          int v24 = *v20++;
          uint64_t result = (*v23 + v24 * v22);
          *v23++ = result;
        }
        while (v20 < v21);
      }
      ++v16;
    }
    while (v16 != v19);
  }
  return result;
}

uint64_t NeuralNet::fastFeedbackSendingWithDotProduct(uint64_t a1, unsigned __int16 *a2)
{
  unint64_t v3 = (_WORD *)*((void *)a2 + 9);
  unint64_t v2 = (void *)*((void *)a2 + 10);
  if (*a2)
  {
    uint64_t v4 = (_WORD *)*((void *)a2 + 3);
    uint64_t v5 = (unsigned __int16 *)*((void *)a2 + 4);
    uint64_t v6 = &v4[*a2];
    int v7 = (void *)*((void *)a2 + 8);
    do
    {
      int v9 = *v5++;
      __int16 v8 = v9;
      int v10 = v9 - (unsigned __int16)*v4;
      if (v10)
      {
        *v3++ = v10;
        *v2++ = *v7;
        *uint64_t v4 = v8;
      }
      ++v4;
      v7 += 2;
    }
    while (v4 < v6);
    uint64_t v11 = *((void *)a2 + 9);
    unint64_t v2 = (void *)*((void *)a2 + 10);
  }
  else
  {
    uint64_t v11 = *((void *)a2 + 9);
  }
  unint64_t v12 = (unint64_t)v3 - v11;
  if ((int)(((unint64_t)v3 - v11) >> 1) >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = (_DWORD *)*((void *)a2 + 2);
    uint64_t v15 = a2[1];
    uint64_t v16 = (v12 >> 1);
    do
    {
      if (v15)
      {
        unsigned int v17 = (__int16 *)v2[v13];
        uint64_t v18 = &v17[v15];
        int v19 = *(__int16 *)(v11 + 2 * v13);
        int v20 = v14;
        do
        {
          int v21 = *v17++;
          uint64_t result = (*v20 + v21 * v19);
          *v20++ = result;
        }
        while (v17 < v18);
      }
      ++v13;
    }
    while (v13 != v16);
  }
  return result;
}

uint64_t NeuralNet::fastReluSendingWithDotProduct(uint64_t result, unsigned __int16 *a2)
{
  unint64_t v3 = (_WORD *)*((void *)a2 + 9);
  unint64_t v2 = (void *)*((void *)a2 + 10);
  if (*a2)
  {
    uint64_t v4 = (_WORD *)*((void *)a2 + 3);
    uint64_t v5 = &v4[*a2];
    uint64_t v6 = (void *)*((void *)a2 + 8);
    int v7 = (unsigned int *)*((void *)a2 + 1);
    do
    {
      unsigned int v8 = *v7++;
      int v9 = v8 / *(_DWORD *)(*(void *)(result + 80) + 232);
      if ((v9 & 0x8000) != 0) {
        LOWORD(v9) = 0;
      }
      int v10 = (unsigned __int16)*v4;
      if (v10 != (unsigned __int16)v9)
      {
        *v3++ = v9 - v10;
        *v2++ = *v6;
        *uint64_t v4 = v9;
      }
      ++v4;
      v6 += 2;
    }
    while (v4 < v5);
    uint64_t v11 = *((void *)a2 + 9);
    unint64_t v2 = (void *)*((void *)a2 + 10);
  }
  else
  {
    uint64_t v11 = *((void *)a2 + 9);
  }
  unint64_t v12 = (unint64_t)v3 - v11;
  if ((int)(((unint64_t)v3 - v11) >> 1) >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = (_DWORD *)*((void *)a2 + 2);
    uint64_t v15 = a2[1];
    uint64_t v16 = (v12 >> 1);
    do
    {
      if (v15)
      {
        unsigned int v17 = (__int16 *)v2[v13];
        uint64_t v18 = &v17[v15];
        int v19 = *(__int16 *)(v11 + 2 * v13);
        int v20 = v14;
        do
        {
          int v21 = *v17++;
          uint64_t result = (*v20 + v21 * v19);
          *v20++ = result;
        }
        while (v17 < v18);
      }
      ++v13;
    }
    while (v13 != v16);
  }
  return result;
}

uint64_t NeuralNet::fastOutputLinear(uint64_t result, unsigned __int16 *a2, double a3)
{
  if (*a2)
  {
    uint64_t v4 = (float *)*((void *)a2 + 6);
    unint64_t v3 = (double *)*((void *)a2 + 7);
    uint64_t v5 = &v3[*a2];
    uint64_t v6 = (_WORD *)*((void *)a2 + 3);
    int v7 = (int *)*((void *)a2 + 1);
    uint64_t v8 = *(void *)(result + 80);
    LODWORD(a3) = *(_DWORD *)(v8 + 240);
    double v9 = (double)*(unint64_t *)&a3;
    do
    {
      int v10 = *v7++;
      float v11 = *(float *)(v8 + 244) * (float)v10;
      *v4++ = v11;
      double v12 = v11;
      *v3++ = v12;
      *v6++ = (int)(v12 * v9);
    }
    while (v3 < v5);
  }
  return result;
}

void NeuralNet::fastOutputDps(uint64_t a1, unsigned __int16 *a2)
{
  if (*a2)
  {
    uint64_t v4 = (float *)*((void *)a2 + 6);
    unint64_t v3 = (double *)*((void *)a2 + 7);
    uint64_t v5 = &v3[*a2];
    uint64_t v6 = (_WORD *)*((void *)a2 + 3);
    int v7 = (int *)*((void *)a2 + 1);
    uint64_t v8 = *(void *)(a1 + 80);
    do
    {
      int v9 = *v7++;
      float v10 = *(float *)(v8 + 244) * (float)v9;
      *uint64_t v4 = v10;
      if (v10 >= -60.0)
      {
        if (v10 <= 60.0)
        {
          double v12 = -v10;
          goto LABEL_9;
        }
        unint64_t v11 = 0xC04E000000000000;
      }
      else
      {
        unint64_t v11 = 0x404E000000000000;
      }
      double v12 = *(double *)&v11;
LABEL_9:
      long double v13 = 1.0 / (DgnExp(v12) + 1.0);
      *v3++ = v13;
      uint64_t v8 = *(void *)(a1 + 80);
      LODWORD(v14) = *(_DWORD *)(v8 + 240);
      *v6++ = (int)(v13 * (double)v14);
      ++v4;
    }
    while (v3 < v5);
  }
}

void NeuralNet::fastOutputDpsm(uint64_t a1, unsigned __int16 *a2)
{
  if (!*a2) {
    return;
  }
  uint64_t v5 = (float *)*((void *)a2 + 6);
  uint64_t v4 = (double *)*((void *)a2 + 7);
  uint64_t v6 = &v4[*a2];
  int v7 = (int *)*((void *)a2 + 1);
  double v8 = 0.0;
  do
  {
    int v9 = *v7++;
    float v10 = *(float *)(*(void *)(a1 + 80) + 244) * (float)v9;
    *uint64_t v5 = v10;
    if (v10 > 60.0)
    {
      unint64_t v11 = 0x404E000000000000;
LABEL_7:
      long double v12 = *(double *)&v11;
      goto LABEL_9;
    }
    if (v10 < -60.0)
    {
      unint64_t v11 = 0xC04E000000000000;
      goto LABEL_7;
    }
    long double v12 = v10;
LABEL_9:
    double v13 = DgnExp(v12);
    *v4++ = v13;
    double v8 = v8 + v13;
    ++v5;
  }
  while (v4 < v6);
  if (*a2)
  {
    unint64_t v14 = (double *)*((void *)a2 + 7);
    uint64_t v15 = &v14[*a2];
    uint64_t v16 = (_WORD *)*((void *)a2 + 3);
    LODWORD(v13) = *(_DWORD *)(*(void *)(a1 + 80) + 240);
    double v17 = (double)*(unint64_t *)&v13;
    do
    {
      double v18 = *v14 / v8;
      *v14++ = v18;
      *v16++ = (int)(v18 * v17);
    }
    while (v14 < v15);
  }
}

double NeuralNet::fastOutputRelu(uint64_t a1, unsigned __int16 *a2, double result)
{
  if (*a2)
  {
    uint64_t v4 = (float *)*((void *)a2 + 6);
    unint64_t v3 = (double *)*((void *)a2 + 7);
    uint64_t v5 = &v3[*a2];
    uint64_t v6 = (_WORD *)*((void *)a2 + 3);
    int v7 = (int *)*((void *)a2 + 1);
    uint64_t v8 = *(void *)(a1 + 80);
    LODWORD(result) = *(_DWORD *)(v8 + 240);
    uint64_t result = (double)*(unint64_t *)&result;
    do
    {
      int v9 = *v7++;
      float v10 = *(float *)(v8 + 244) * (float)v9;
      *v4++ = v10;
      if (v10 <= 0.0) {
        float v10 = 0.0;
      }
      double v11 = v10;
      *v3++ = v11;
      *v6++ = (int)(v11 * result);
    }
    while (v3 < v5);
  }
  return result;
}

void NeuralNetImage::~NeuralNetImage(NeuralNetImage *this)
{
}

void NeuralNetState::~NeuralNetState(NeuralNetState *this)
{
}

uint64_t HashKEV<unsigned int,unsigned int,Uns32Scope>::HashKEV(uint64_t a1, const char *a2, int a3)
{
  HashBase::HashBase((HashBase *)a1, a2);
  *(void *)uint64_t v5 = &unk_26C4E4C68;
  *(_OWORD *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = 0u;
  *(_OWORD *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = 0u;
  *(_OWORD *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = 0u;
  *(_DWORD *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = 0;
  *(void *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = 0;
  *(_DWORD *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 88) = 0;
  int v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    int v7 = 12;
  }
  else {
    int v7 = 16;
  }
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = 16;
  *(_DWORD *)(a1 + 28) = v7;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = 0;
  return a1;
}

void sub_213F8D7AC(_Unwind_Exception *a1)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void HashKEV<unsigned int,unsigned int,Uns32Scope>::~HashKEV(uint64_t a1)
{
  HashKEV<unsigned int,unsigned int,Uns32Scope>::~HashKEV(a1);

  JUMPOUT(0x216698730);
}

uint64_t HashKEV<unsigned int,unsigned int,Uns32Scope>::~HashKEV(uint64_t a1)
{
  *(void *)a1 = &unk_26C4E4C68;
  if (*(_DWORD *)(a1 + 8)) {
    HashKEV<unsigned int,unsigned int,CWIDScope>::removeAll(a1);
  }
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));

  return MrecInitModule_sdpres_sdapi();
}

uint64_t DgnArray<DgnPrimArray<short>>::copyArraySlice(uint64_t result, void *a2, int a3, unsigned int a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *(unsigned int *)(result + 8);
  if ((int)v8 >= 1)
  {
    uint64_t v9 = 16 * v8 - 16;
    do
    {
      uint64_t result = DgnPrimArray<unsigned int>::~DgnPrimArray(*(void *)v7 + v9);
      v9 -= 16;
    }
    while (v9 != -16);
  }
  *(_DWORD *)(v7 + 8) = 0;
  unsigned int v10 = *(_DWORD *)(v7 + 12);
  if (a4 <= v10)
  {
    unsigned int v11 = 0;
    unsigned int v12 = 0;
    if (!a4) {
      goto LABEL_14;
    }
  }
  else
  {
    DgnArray<DgnPrimArray<double>>::reallocElts(v7, a4 - v10, 0);
    unsigned int v11 = *(_DWORD *)(v7 + 8);
  }
  int v13 = 0;
  unsigned int v12 = v11;
  do
  {
    uint64_t v14 = *a2 + 16 * (a3 + v13);
    uint64_t v15 = (void *)(*(void *)v7 + 16 * v12);
    *uint64_t v15 = 0;
    v15[1] = 0;
    uint64_t result = DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)v15, (uint64_t *)v14, 0, *(_DWORD *)(v14 + 8));
    unsigned int v12 = *(_DWORD *)(v7 + 8) + 1;
    *(_DWORD *)(v7 + 8) = v12;
    ++v13;
  }
  while (a4 != v13);
  if (v12 > a4)
  {
    if ((int)v12 > (int)a4)
    {
      uint64_t v16 = (int)v12;
      uint64_t v17 = 16 * (int)v12 - 16;
      do
      {
        --v16;
        uint64_t result = DgnPrimArray<unsigned int>::~DgnPrimArray(*(void *)v7 + v17);
        v17 -= 16;
      }
      while (v16 > (int)a4);
    }
    goto LABEL_17;
  }
LABEL_14:
  if (v12 < a4)
  {
    unint64_t v18 = a4 - (unint64_t)v12;
    uint64_t v19 = 16 * v12;
    do
    {
      int v20 = (void *)(*(void *)v7 + v19);
      *int v20 = 0;
      v20[1] = 0;
      v19 += 16;
      --v18;
    }
    while (v18);
  }
LABEL_17:
  *(_DWORD *)(v7 + 8) = a4;
  return result;
}

uint64_t SDApi_Initialize(unsigned int a1, unsigned int a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned int a9, unsigned int a10, ApiState *a11, void (*a12)(const char *, unint64_t), void *a13, void (*a14)(const char *, unint64_t), void *a15, void (*a16)(const char *, unint64_t), const char *a17, unsigned int a18)
{
  uint64_t v18 = 2;
  if (a3 && a4 <= 1 && a11 && a13 && a15)
  {
    if (ApiState::smpApiState)
    {
      return 3;
    }
    else
    {
      gbShowCalls = a7 != 0;
      gbShowCallsWithFileSpecArgs = a8 != 0;
      gbShowCallPointerArguments = a9 != 0;
      gbShowCallMemDeltas = a10 != 0;
      ApiState::startupHandlers(a11, a12, a13, a14, a15, a16);
      MrecBeginningOfTime();
      if (a17 && *a17) {
        logSetLinePrefix(a17);
      }
      logSetShowLineTimeStamps(a18 != 0);
      ApiState::startupApiState((ApiState *)"APPLE-FAKE-SDAPI-", v25);
      DgnString::DgnString((DgnString *)&v64);
      DgnString::preAllocate(v26, 4095);
      GetFullMrecDescription((DgnString *)&v64);
      AppendFullMrecMachineInfo((DgnString *)&v64);
      DgnString::printfAppend((DgnString *)&v64, "SDAPI v%u.%u\n", v27, v28, v29, 24, 407);
      DgnString::operator+=((DgnString *)&v64, "Current time: ");
      MrecTime::appendLocalTimeToString((MrecTime *)&v64, v30);
      DgnString::operator+=((DgnString *)&v64, "\n");
      if (v65) {
        int v31 = v64;
      }
      else {
        int v31 = &byte_2140B33BB;
      }
      xlprintString(v31);
      checkVersionAndSizes(a1, a2, a3, v32, v33, v34, v35, v36);
      SdapiInsurance::SdapiInsurance(v63, "SDApi_Initialize", 0, 0, 1);
      if (v63[97])
      {
        if (gbShowCalls)
        {
          uint64_t v43 = a1;
          uint64_t v44 = "SD_TRUE";
          if (a4) {
            int v45 = "SD_TRUE";
          }
          else {
            int v45 = "SD_FALSE";
          }
          if (a5) {
            uint64_t v46 = "SD_TRUE";
          }
          else {
            uint64_t v46 = "SD_FALSE";
          }
          if (a6) {
            int v47 = "SD_TRUE";
          }
          else {
            int v47 = "SD_FALSE";
          }
          if (a7) {
            unint64_t v48 = "SD_TRUE";
          }
          else {
            unint64_t v48 = "SD_FALSE";
          }
          if (a8) {
            __int32 v49 = "SD_TRUE";
          }
          else {
            __int32 v49 = "SD_FALSE";
          }
          if (a9) {
            unint64_t v50 = "SD_TRUE";
          }
          else {
            unint64_t v50 = "SD_FALSE";
          }
          unint64_t v51 = a17;
          if (a10) {
            uint64_t v52 = "SD_TRUE";
          }
          else {
            uint64_t v52 = "SD_FALSE";
          }
          if (gbShowCallPointerArguments) {
            uint64_t v53 = a3;
          }
          else {
            uint64_t v53 = 0;
          }
          if (gbShowCallPointerArguments) {
            uint64_t v54 = a11;
          }
          else {
            uint64_t v54 = 0;
          }
          int v55 = a12;
          BOOL v56 = a14;
          if (gbShowCallPointerArguments)
          {
            uint64_t v57 = (uint64_t)a13;
          }
          else
          {
            int v55 = 0;
            uint64_t v57 = 0;
          }
          if (gbShowCallPointerArguments)
          {
            uint64_t v58 = a15;
          }
          else
          {
            BOOL v56 = 0;
            uint64_t v58 = 0;
          }
          int v59 = a16;
          if (!gbShowCallPointerArguments)
          {
            int v59 = 0;
            unint64_t v51 = 0;
          }
          if (!a18) {
            uint64_t v44 = "SD_FALSE";
          }
          xlprintf("Entering sdapi call %.500s(%llu, %llu, Masked:0x%016llx, %.500s, %.500s, %.500s, %.500s, %.500s, %.500s, %.500s, Masked:0x%016llx, Masked:0x%016llx, Masked:0x%016llx, Masked:0x%016llx, Masked:0x%016llx, Masked:0x%016llx, Masked:0x%016llx, %.500s)\n", (uint64_t)v52, (uint64_t)v54, (uint64_t)v55, v57, "SDApi_Initialize", v43, a2, v53, v45, v46, v47, v48, v49, v50, v52, v54,
            v55,
            v57,
            v56,
            v58,
            v59,
            v51,
            v44);
        }
        if (a5 >= 2) {
          throwBadSdapiArgument("SDBool", (int)a5, v37, v38, v39, v40, v41, v42);
        }
        if (a6 >= 2) {
          throwBadSdapiArgument("SDBool", (int)a6, v37, v38, v39, v40, v41, v42);
        }
        if (a7 >= 2) {
          throwBadSdapiArgument("SDBool", (int)a7, v37, v38, v39, v40, v41, v42);
        }
        if (a8 >= 2) {
          throwBadSdapiArgument("SDBool", (int)a8, v37, v38, v39, v40, v41, v42);
        }
        if (a9 >= 2) {
          throwBadSdapiArgument("SDBool", (int)a9, v37, v38, v39, v40, v41, v42);
        }
        if (a10 >= 2) {
          throwBadSdapiArgument("SDBool", (int)a10, v37, v38, v39, v40, v41, v42);
        }
        if (a18 >= 2) {
          throwBadSdapiArgument("SDBool", (int)a18, v37, v38, v39, v40, v41, v42);
        }
        uint64_t v18 = 1;
      }
      else
      {
        uint64_t v18 = 4;
      }
      SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v63);
      DgnString::~DgnString((DgnString *)&v64);
    }
  }
  return v18;
}

void sub_213F8DDE8()
{
}

void checkVersionAndSizes(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 != 24 || a2 != 407) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdmisc.cpp", 54, (uint64_t)"sdapi/sdmisc", 1, (uint64_t)"%u %u %u %u", a7, a8, a1);
  }
  if (*(_DWORD *)a3 != 16) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdmisc.cpp", 58, (uint64_t)"sdapi/sdmisc", 2, (uint64_t)"%.500s %llu %.500s %llu", a7, a8, (char)"SDInitCheckRecord");
  }
  if (*(_DWORD *)(a3 + 4) == 175)
  {
    unint64_t v9 = 175;
  }
  else
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdmisc.cpp", 66, (uint64_t)"sdapi/sdmisc", 3, (uint64_t)"%d %d", a7, a8, *(_DWORD *)(a3 + 4));
    unint64_t v9 = *(unsigned int *)(a3 + 4);
    if (!v9) {
      return;
    }
  }
  uint64_t v10 = 0;
  for (unint64_t i = 0; i < v9; ++i)
  {
    uint64_t v12 = *(void *)(a3 + 8) + v10 * 8;
    int v13 = *(const char **)v12;
    if (strcmp(*(const char **)v12, (&checkVersionAndSizes(unsigned int,unsigned int,SDInitTypeSize const*)::types)[v10])|| *(_DWORD *)(v12 + 8) != LODWORD((&checkVersionAndSizes(unsigned int,unsigned int,SDInitTypeSize const*)::types)[v10 + 1]))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdmisc.cpp", 75, (uint64_t)"sdapi/sdmisc", 2, (uint64_t)"%.500s %llu %.500s %llu", v14, v15, (char)v13);
      unint64_t v9 = *(unsigned int *)(a3 + 4);
    }
    v10 += 2;
  }
}

void SDApi_CheckVersion(unsigned int a1, unsigned int a2, uint64_t a3)
{
  SdapiInsurance::SdapiInsurance(v14, "SDApi_CheckVersion", 1, 1, 4);
  if (v14[97])
  {
    if (gbShowCalls)
    {
      if (gbShowCallPointerArguments) {
        uint64_t v13 = a3;
      }
      else {
        uint64_t v13 = 0;
      }
      xlprintf("Entering sdapi call %.500s(%llu, %llu, Masked:0x%016llx)\n", v6, v7, v8, v9, "SDApi_CheckVersion", a1, a2, v13);
    }
    checkVersionAndSizes(a1, a2, a3, v8, v9, v10, v11, v12);
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v14);
}

uint64_t SDApi_HasErrored()
{
  uint64_t v0 = 1;
  SdapiInsurance::SdapiInsurance(v6, "SDApi_HasErrored", 1, 1, 5);
  if (v6[97])
  {
    if (gbShowCalls) {
      xlprintf("Entering sdapi call %s()\n", v1, v2, v3, v4, "SDApi_HasErrored");
    }
    uint64_t v0 = *(unsigned __int8 *)(ApiState::smpApiState + 1);
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v6);
  return v0;
}

void MrecInitModule_sputtdet_sigproc(void)
{
  if (!gParDebugUttDet)
  {
    uint64_t v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugUttDet", (const char *)&unk_2140A68F4, (const char *)&unk_2140A68F4, 0, 0, 0);
    *uint64_t v1 = &unk_26C4E0858;
    gParDebugUttDet = (uint64_t)v1;
    uint64_t v2 = (uint64_t *)GlobalParamMgr::smpGlobalParamMgr;
    GlobalParamMgr::addParam(v2, (GlobalParam **)&gParDebugUttDet);
  }
}

void MrecInitModule_filespec_mrecutil(void)
{
  if (!gParDiagnosticFileSpecBaseDirectoryMask)
  {
    uint64_t v0 = MemChunkAlloc(0x48uLL, 0);
    StringGlobalParamBase::StringGlobalParamBase((StringGlobalParamBase *)v0, "DiagnosticFileSpecBaseDirectoryMask", &byte_2140B33BB, &byte_2140B33BB, &byte_2140B33BB, 0, 0);
    *uint64_t v1 = &unk_26C4E18B8;
    gParDiagnosticFileSpecBaseDirectoryMasuint64_t k = (uint64_t)v1;
    uint64_t v2 = (uint64_t *)GlobalParamMgr::smpGlobalParamMgr;
    GlobalParamMgr::addParam(v2, (GlobalParam **)&gParDiagnosticFileSpecBaseDirectoryMask);
  }
}

void FileSpec::FileSpec(FileSpec *this, char *a2)
{
  DgnString::DgnString(this);
  DgnString::preAllocate(v4, 96);
  DgnString::operator=(this, a2);
}

void sub_213F8E330(_Unwind_Exception *a1)
{
  DgnString::~DgnString(v1);
  _Unwind_Resume(a1);
}

void FileSpec::FileSpec(FileSpec *this, const FileSpec *a2)
{
  DgnString::DgnString(this);
  DgnString::preAllocate(v4, 96);
  DgnString::operator=(this, a2);
}

void sub_213F8E388(_Unwind_Exception *a1)
{
  DgnString::~DgnString(v1);
  _Unwind_Resume(a1);
}

DgnString *FileSpec::operator=(DgnString *a1, DgnString *a2)
{
  DgnString::preAllocate((unint64_t)a1, 96);

  return DgnString::operator=(a1, a2);
}

void *FileSpec::setEmpty(FileSpec *this)
{
  uint64_t result = *(void **)this;
  if (result)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *(void *)this = 0;
  }
  *((void *)this + 1) = 0;
  return result;
}

DgnString *FileSpec::fillFromName(FileSpec *this, char *a2)
{
  DgnString::preAllocate((unint64_t)this, 96);

  return DgnString::operator=(this, a2);
}

DgnString *FileSpec::fillFromPathAndName(FileSpec *this, const char *__s, const char *a3)
{
  int v6 = strlen(__s);
  if (v6)
  {
    int v7 = __s[v6 - 1];
    BOOL v9 = v7 != 47 && v7 != 0;
  }
  else
  {
    BOOL v9 = 0;
  }
  int v10 = v6 + v9 + strlen(a3);
  if ((v10 + 1) > 0x60) {
    unint64_t v11 = (v10 + 1);
  }
  else {
    unint64_t v11 = 96;
  }
  uint64_t v12 = MemChunkAlloc(v11, 0);
  strcpy((char *)v12, __s);
  if (v9) {
    *(_WORD *)((char *)v12 + strlen((const char *)v12)) = 47;
  }
  strcat((char *)v12, a3);
  DgnString::preAllocate((unint64_t)this, 96);
  uint64_t result = DgnString::operator=(this, (char *)v12);
  if (v12)
  {
    return (DgnString *)MemChunkFree(v12, 0);
  }
  return result;
}

DgnString *FileSpec::fillFromDefPathAndName(FileSpec *this, char *__s, char *a3)
{
  int v6 = strchr(__s, 58);
  if (a3)
  {
    if (*a3 == 47 || (*a3 || !v6) && (!*a3 || !__s || !*__s)) {
      goto LABEL_8;
    }
  }
  else if (!v6)
  {
LABEL_8:
    DgnString::preAllocate((unint64_t)this, 96);
    return DgnString::operator=(this, a3);
  }
  int v8 = strlen(__s);
  unsigned int v9 = v8 + strlen(a3) + 2;
  if (v9 <= 0x60) {
    unint64_t v10 = 96;
  }
  else {
    unint64_t v10 = v9;
  }
  unint64_t v11 = MemChunkAlloc(v10, 0);
  uint64_t v12 = strcpy((char *)v11, __s);
  int v13 = strlen(v12);
  if (*((unsigned char *)v11 + (v13 - 1)) && *((unsigned char *)v11 + (v13 - 1)) != 47) {
    *(_WORD *)((char *)v11 + strlen((const char *)v11)) = 47;
  }
  strcat((char *)v11, a3);
  DgnString::preAllocate((unint64_t)this, 96);
  DgnString::operator=(this, (char *)v11);

  return (DgnString *)MemChunkFree(v11, 0);
}

BOOL FileSpec::operator==(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8)) {
    uint64_t v2 = *(const char **)a1;
  }
  else {
    uint64_t v2 = &byte_2140B33BB;
  }
  if (*(_DWORD *)(a2 + 8)) {
    uint64_t v3 = *(const char **)a2;
  }
  else {
    uint64_t v3 = &byte_2140B33BB;
  }
  return strcmp(v2, v3) == 0;
}

DgnString *FileSpec::getRelativeSourceFileName(FileSpec *this, DgnString *a2, DgnString *a3)
{
  DgnString::preAllocate((unint64_t)a2, 96);

  return DgnString::operator=(a2, (char *)this + 68);
}

DgnString *FileSpec::getDiagnosticMaskedName(FileSpec *this, DgnString *a2, DgnString *a3)
{
  DgnString::preAllocate((unint64_t)a2, 96);
  if (*(_DWORD *)(gParDiagnosticFileSpecBaseDirectoryMask + 64)
    && (uint64_t v5 = *(const char **)(gParDiagnosticFileSpecBaseDirectoryMask + 56), *v5)
    && (unsigned int v6 = strlen(v5), !strncmp((const char *)this, v5, v6)))
  {
    DgnString::operator=(a2, "<BASE>/");
    if (*(_DWORD *)(gParDiagnosticFileSpecBaseDirectoryMask + 64)) {
      int v8 = *(const char **)(gParDiagnosticFileSpecBaseDirectoryMask + 56);
    }
    else {
      int v8 = &byte_2140B33BB;
    }
    unsigned int v9 = (char *)this + strlen(v8);
    return DgnString::operator+=(a2, v9);
  }
  else
  {
    return DgnString::operator=(a2, (char *)this);
  }
}

DgnString *FileSpec::getDiagnosticMaskedName(FileSpec **this, DgnString *a2, DgnString *a3)
{
  if (*((_DWORD *)this + 2)) {
    uint64_t v3 = *this;
  }
  else {
    uint64_t v3 = (FileSpec *)&byte_2140B33BB;
  }
  return FileSpec::getDiagnosticMaskedName(v3, a2, a3);
}

_DWORD *FileSpec::fillInComponents(FileSpec *this, DgnString *a2, DgnString *a3, DgnString *a4, DgnString *a5, DgnString *a6)
{
  int v12 = DgnString::reverseFind(this, 46);
  int v13 = DgnString::reverseFind(this, 92);
  if (v13 <= (int)DgnString::reverseFind(this, 47)) {
    int v14 = 47;
  }
  else {
    int v14 = 92;
  }
  int v15 = DgnString::reverseFind(this, v14);
  uint64_t result = (_DWORD *)DgnString::reverseFind(this, 58);
  if (v15 <= (int)result) {
    int v17 = (int)result;
  }
  else {
    int v17 = v15;
  }
  uint64_t v18 = v17 + 1;
  int v19 = *((_DWORD *)this + 2);
  BOOL v20 = v19 != 0;
  int v21 = v19 - 1;
  if (v20) {
    int v22 = v21;
  }
  else {
    int v22 = 0;
  }
  if (v17 < 0)
  {
    if (a2) {
      *((_DWORD *)a2 + 2) = 0;
    }
    if (a6) {
      uint64_t result = DgnString::operator=(a6, "./");
    }
  }
  else
  {
    if (a2)
    {
      DgnString::preAllocate((unint64_t)a2, 96);
      if (*((_DWORD *)this + 2)) {
        uint64_t v23 = *(const char **)this;
      }
      else {
        uint64_t v23 = &byte_2140B33BB;
      }
      uint64_t result = DgnString::set(a2, v23, v18);
    }
    if (a6)
    {
      DgnString::preAllocate((unint64_t)a6, 96);
      if (*((_DWORD *)this + 2)) {
        int v24 = *(const char **)this;
      }
      else {
        int v24 = &byte_2140B33BB;
      }
      uint64_t result = DgnString::set(a6, v24, v18);
    }
  }
  unsigned int v25 = v12 - v18;
  if (v12 <= (int)v18)
  {
    unsigned int v25 = v22 - v18;
    if (a5)
    {
      *((_DWORD *)a5 + 2) = 0;
      unsigned int v25 = v22 - v18;
    }
LABEL_31:
    if (a4) {
      goto LABEL_41;
    }
LABEL_32:
    if (!a3) {
      return result;
    }
    goto LABEL_33;
  }
  if (!a5) {
    goto LABEL_31;
  }
  if (*((_DWORD *)this + 2)) {
    unint64_t v26 = *(char **)this;
  }
  else {
    unint64_t v26 = &byte_2140B33BB;
  }
  uint64_t result = DgnString::set(a5, &v26[v12 + 1], v22 + ~v12);
  if (!a4) {
    goto LABEL_32;
  }
LABEL_41:
  if (*((_DWORD *)this + 2)) {
    uint64_t v28 = *(char **)this;
  }
  else {
    uint64_t v28 = &byte_2140B33BB;
  }
  uint64_t result = DgnString::set(a4, &v28[(int)v18], v25);
  if (a3)
  {
LABEL_33:
    if (*((_DWORD *)this + 2)) {
      uint64_t v27 = *(char **)this;
    }
    else {
      uint64_t v27 = &byte_2140B33BB;
    }
    return DgnString::set(a3, &v27[v18], v22 - (int)v18);
  }
  return result;
}

_DWORD *FileSpec::getPathOnly(FileSpec *this, DgnString *a2)
{
  return FileSpec::fillInComponents(this, a2, 0, 0, 0, 0);
}

_DWORD *FileSpec::getNameOnly(FileSpec *this, DgnString *a2)
{
  return FileSpec::fillInComponents(this, 0, a2, 0, 0, 0);
}

BOOL FileSpec::isValid(char **this)
{
  if (*((_DWORD *)this + 2))
  {
    uint64_t v1 = *this;
    if (!*this) {
      return 0;
    }
  }
  else
  {
    uint64_t v1 = &byte_2140B33BB;
  }
  return *v1 != 0;
}

uint64_t FileSpec::sizeObject(uint64_t a1)
{
  return sizeObject(a1);
}

uint64_t DgnStream::DgnStream(uint64_t a1, int a2, const char *a3)
{
  *(void *)a1 = &unk_26C4E53A8;
  uint64_t v5 = (FileSpec *)(a1 + 16);
  if (a3) {
    unsigned int v6 = a3;
  }
  else {
    unsigned int v6 = "unnamed stream";
  }
  FileSpec::FileSpec(v5, v6);
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 256;
  *(_DWORD *)(a1 + 8) = a2;
  return a1;
}

void DgnStream::~DgnStream(DgnStream *this)
{
  *(void *)this = &unk_26C4E53A8;
  FileSpec::~FileSpec((DgnStream *)((char *)this + 16));
}

void DgnStream::printSize(DgnStream *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dstream.cpp", 65, (DgnString *)&v40);
  if (v41) {
    uint64_t v16 = v40;
  }
  else {
    uint64_t v16 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_2140B33BB, a3, &byte_2140B33BB, v16);
  DgnString::~DgnString((DgnString *)&v40);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_2140B33BB);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dstream.cpp", 67, (DgnString *)&v40);
  if (v41) {
    unsigned int v25 = v40;
  }
  else {
    unsigned int v25 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v21, v22, v23, v24, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v25, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v40);
  *a4 += 4;
  *a5 += 4;
  unint64_t v26 = (char *)this + 16;
  uint64_t v27 = FileSpec::sizeObject((uint64_t)this + 16);
  uint64_t v28 = FileSpec::sizeObject((uint64_t)v26);
  uint64_t v29 = FileSpec::sizeObject((uint64_t)v26);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dstream.cpp", 69, (DgnString *)&v40);
  if (v41) {
    uint64_t v34 = v40;
  }
  else {
    uint64_t v34 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v30, v31, v32, v33, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v34, v27, v28, v29);
  DgnString::~DgnString((DgnString *)&v40);
  *a4 += v27;
  *a5 += v28;
  *a6 += v29;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dstream.cpp", 71, (DgnString *)&v40);
  if (v41) {
    uint64_t v39 = v40;
  }
  else {
    uint64_t v39 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v35, v36, v37, v38, a3, &byte_2140B33BB, (35 - a3), (35 - a3), v39, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v40);
}

void sub_213F8EDB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t DgnStream::getLine(DgnStream *this, DgnString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 2) == 1)
  {
    if (*((_DWORD *)this + 6)) {
      unint64_t v10 = (char *)*((void *)this + 2);
    }
    else {
      unint64_t v10 = &byte_2140B33BB;
    }
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/dstream.cpp", 77, (uint64_t)"dfutil/dstream", 2, (uint64_t)"%.500s", a7, a8, (char)v10);
  }
  *((_DWORD *)a2 + 2) = 0;
  uint64_t result = (*(uint64_t (**)(DgnStream *))(*(void *)this + 56))(this);
  if ((result & 1) == 0)
  {
    do
    {
      char v14 = 0;
      uint64_t result = (*(uint64_t (**)(DgnStream *, char *, uint64_t, void))(*(void *)this + 72))(this, &v14, 1, 0);
      if (!result || v14 == 10) {
        break;
      }
      if (v14 == 13)
      {
        uint64_t result = (*(uint64_t (**)(DgnStream *))(*(void *)this + 64))(this);
        if (result == 10)
        {
          char v13 = 0;
          return (*(uint64_t (**)(DgnStream *, char *, uint64_t, uint64_t))(*(void *)this + 72))(this, &v13, 1, 1);
        }
        return result;
      }
      DgnString::appendCharWithGrow((unint64_t)a2, v14);
      uint64_t result = (*(uint64_t (**)(DgnStream *))(*(void *)this + 56))(this);
    }
    while (!result);
  }
  return result;
}

void DgnStream::streamPrintf(DgnStream *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  uint64_t v5 = MEMORY[0x270FA5388](this, a2, a3, a4, a5);
  int v7 = v6;
  uint64_t v8 = v5;
  uint64_t v20 = *MEMORY[0x263EF8340];
  DgnString::DgnString((DgnString *)&v18);
  v15[0] = 0;
  __unint64_t size = 0x2000;
  char __size_4 = 0;
  Buffer = (char *)DgnBuffer::getBuffer((DgnBuffer *)v15, 0);
  for (size_t i = __size; ; size_t i = __size)
  {
    int v11 = vsnprintf(Buffer, i, v7, va);
    if ((v11 & 0x80000000) == 0 && v11 < i) {
      break;
    }
    Buffer = (char *)DgnBuffer::getBuffer((DgnBuffer *)v15, 1);
  }
  if (v19) {
    uint64_t v12 = v18;
  }
  else {
    uint64_t v12 = &byte_2140B33BB;
  }
  if (__size_4) {
    char v13 = v12;
  }
  else {
    char v13 = v15;
  }
  size_t v14 = strlen(v13);
  (*(void (**)(uint64_t, const char *, size_t))(*(void *)v8 + 80))(v8, v13, v14);
  DgnString::~DgnString((DgnString *)&v18);
}

void sub_213F8F0E0(_Unwind_Exception *a1)
{
  DgnString::~DgnString(v1);
  _Unwind_Resume(a1);
}

void PelScoreCacheData::PelScoreCacheData(PelScoreCacheData *this)
{
  *(_DWORD *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
}

void PelScoreCacheData::~PelScoreCacheData(PelScoreCacheData *this)
{
}

uint64_t *PelScoreCacheData::clone(PelScoreCacheData *this)
{
  uint64_t v2 = MemChunkAlloc(0x18uLL, 0);
  *(_DWORD *)uint64_t v2 = 0;
  v2[2] = 0;
  v2[1] = 0;
  *(_DWORD *)uint64_t v2 = *(_DWORD *)this;
  DgnArray<DgnPrimArray<Uns16AndScore>>::copyArraySlice((uint64_t)(v2 + 1), (void *)this + 1, 0, *((_DWORD *)this + 4));
  return v2;
}

void PelScoreCacheData::printSize(PelScoreCacheData *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/scrcdat.cpp", 258, (DgnString *)&v40);
  if (v41) {
    uint64_t v16 = v40;
  }
  else {
    uint64_t v16 = &unk_2140A6908;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_2140A6908, a3, &unk_2140A6908, v16);
  DgnString::~DgnString((DgnString *)&v40);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_2140A6908);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/scrcdat.cpp", 259, (DgnString *)&v40);
  if (v41) {
    unsigned int v25 = v40;
  }
  else {
    unsigned int v25 = &unk_2140A6908;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v21, v22, v23, v24, (a3 + 1), &unk_2140A6908, (34 - a3), (34 - a3), v25, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v40);
  *a4 += 4;
  *a5 += 4;
  unint64_t v26 = (char *)this + 8;
  uint64_t v27 = sizeObject<DgnPrimArray<Uns16AndScore>>((uint64_t)this + 8, 0);
  uint64_t v28 = sizeObject<DgnPrimArray<Uns16AndScore>>((uint64_t)v26, 1);
  uint64_t v29 = sizeObject<DgnPrimArray<Uns16AndScore>>((uint64_t)v26, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/scrcdat.cpp", 261, (DgnString *)&v40);
  if (v41) {
    uint64_t v34 = v40;
  }
  else {
    uint64_t v34 = &unk_2140A6908;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v30, v31, v32, v33, (a3 + 1), &unk_2140A6908, (34 - a3), (34 - a3), v34, v27, v28, v29);
  DgnString::~DgnString((DgnString *)&v40);
  *a4 += v27;
  *a5 += v28;
  *a6 += v29;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/pel/scrcdat.cpp", 262, (DgnString *)&v40);
  if (v41) {
    uint64_t v39 = v40;
  }
  else {
    uint64_t v39 = &unk_2140A6908;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v35, v36, v37, v38, a3, &unk_2140A6908, (35 - a3), (35 - a3), v39, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v40);
}

void sub_213F8F3EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<DgnPrimArray<Uns16AndScore>>(uint64_t a1, int a2)
{
  v9[0] = 0;
  v9[1] = 0;
  sizeObject((uint64_t)v10, 2);
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v4 = 12;
  }
  else {
    uint64_t v4 = 16;
  }
  if (a2 == 3)
  {
    uint64_t v4 = 0;
  }
  else if ((a2 & 0xFFFFFFFE) != 2)
  {
    uint64_t v5 = *(unsigned int *)(a1 + 8);
    uint64_t v6 = v4;
    if ((int)v5 >= 1)
    {
      unint64_t v7 = v5 + 1;
      uint64_t v6 = v4;
      do
        v6 += sizeObject<Uns16AndScore>(*(void *)a1 + 16 * (v7-- - 2), a2);
      while (v7 > 1);
    }
    if (a2) {
      uint64_t v4 = v6;
    }
    else {
      uint64_t v4 = v6 + v4 * (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
    }
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v9);
  return v4;
}

void sub_213F8F4F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t DgnArray<DgnPrimArray<Uns16AndScore>>::copyArraySlice(uint64_t result, void *a2, int a3, unsigned int a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *(unsigned int *)(result + 8);
  if ((int)v8 >= 1)
  {
    uint64_t v9 = 16 * v8 - 16;
    do
    {
      uint64_t result = DgnPrimArray<unsigned int>::~DgnPrimArray(*(void *)v7 + v9);
      v9 -= 16;
    }
    while (v9 != -16);
  }
  *(_DWORD *)(v7 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 8) = 0;
  unsigned int v10 = *(_DWORD *)(v7 + 12);
  if (a4 <= v10)
  {
    unsigned int v11 = 0;
    unsigned int v12 = 0;
    if (!a4) {
      goto LABEL_14;
    }
  }
  else
  {
    DgnArray<DgnPrimArray<double>>::reallocElts(v7, a4 - v10, 0);
    unsigned int v11 = *(_DWORD *)(v7 + 8);
  }
  int v13 = 0;
  unsigned int v12 = v11;
  do
  {
    uint64_t v14 = *a2 + 16 * (a3 + v13);
    uint64_t v15 = (void *)(*(void *)v7 + 16 * v12);
    *uint64_t v15 = 0;
    v15[1] = 0;
    uint64_t result = DgnPrimArray<Uns16AndScore>::copyArraySlice((unint64_t)v15, (void *)v14, 0, *(_DWORD *)(v14 + 8));
    unsigned int v12 = *(_DWORD *)(v7 + 8) + 1;
    *(_DWORD *)(v7 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 8) = v12;
    ++v13;
  }
  while (a4 != v13);
  if (v12 > a4)
  {
    if ((int)v12 > (int)a4)
    {
      uint64_t v16 = (int)v12;
      uint64_t v17 = 16 * (int)v12 - 16;
      do
      {
        --v16;
        uint64_t result = DgnPrimArray<unsigned int>::~DgnPrimArray(*(void *)v7 + v17);
        v17 -= 16;
      }
      while (v16 > (int)a4);
    }
    goto LABEL_17;
  }
LABEL_14:
  if (v12 < a4)
  {
    unint64_t v18 = a4 - (unint64_t)v12;
    uint64_t v19 = 16 * v12;
    do
    {
      uint64_t v20 = (void *)(*(void *)v7 + v19);
      *uint64_t v20 = 0;
      v20[1] = 0;
      v19 += 16;
      --v18;
    }
    while (v18);
  }
LABEL_17:
  *(_DWORD *)(v7 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 8) = a4;
  return result;
}

unint64_t DgnPrimArray<Uns16AndScore>::copyArraySlice(unint64_t result, void *a2, int a3, unsigned int a4)
{
  unint64_t v7 = result;
  unsigned int v8 = *(_DWORD *)(result + 12);
  if (a4 <= v8)
  {
    *(_DWORD *)(result + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 8) = a4;
    if (!a4) {
      return result;
    }
  }
  else
  {
    uint64_t result = DgnPrimArray<unsigned int>::reallocElts(result, a4 - v8, 0);
    *(_DWORD *)(v7 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 8) = a4;
  }
  uint64_t v9 = 0;
  do
  {
    *(_DWORD *)(*(void *)v7 + 4 * v9) = *(_DWORD *)(*a2 + 4 * (a3 + v9));
    ++v9;
  }
  while (a4 != v9);
  return result;
}

uint64_t sizeObject<Uns16AndScore>(uint64_t a1, int a2)
{
  uint64_t v4 = sizeObject((uint64_t)v13, 2);
  uint64_t v5 = v4;
  if (a2 == 3)
  {
    uint64_t v6 = *(unsigned int *)(a1 + 8);
    BOOL v7 = v6 > *(_DWORD *)(a1 + 12);
    uint64_t v8 = v4 * v6;
    if (v7) {
      return v8;
    }
    else {
      return 0;
    }
  }
  else
  {
    if (gShadowDiagnosticShowIdealizedObjectSizes) {
      uint64_t v9 = 12;
    }
    else {
      uint64_t v9 = 16;
    }
    if (a2 != 2)
    {
      uint64_t v10 = *(unsigned int *)(a1 + 8);
      if (v10 <= *(_DWORD *)(a1 + 12))
      {
        if ((int)v10 >= 1)
        {
          unint64_t v11 = v10 + 1;
          do
            v9 += sizeObject(*(void *)a1 + 4 * (v11-- - 2), a2);
          while (v11 > 1);
        }
        if (!a2) {
          v9 += v5 * (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
        }
      }
    }
  }
  return v9;
}

uint64_t CombineTable::initCombineTable(uint64_t this, double a2)
{
  if (a2 == 0.0) {
    return this;
  }
  uint64_t v3 = this;
  double v4 = 1.0 / a2;
  long double v5 = DgnExp(1.0 / a2 * 0.5);
  uint64_t v8 = (int)(2.0 - a2 * DgnLog(v5 + -1.0));
  if ((int)v8 < 8001)
  {
    uint64_t v21 = 0;
    int v22 = 0;
    if (!v8)
    {
      uint64_t v9 = 0;
      goto LABEL_10;
    }
  }
  else
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/cmbtable.cpp", 141, (uint64_t)"mrecutil/cmbtable", 1, (uint64_t)"%g %d", v6, v7, SLOBYTE(a2));
    uint64_t v21 = 0;
    int v22 = 0;
  }
  uint64_t v9 = MemChunkAlloc(4 * v8, 0);
  uint64_t v21 = v9;
  int v22 = v8;
  if ((int)v8 >= 1)
  {
    uint64_t v10 = 0;
    int v11 = 0;
    do
    {
      long double v12 = DgnExp(v4 * (double)v11);
      *(_DWORD *)((char *)v21 + v10) = (int)(a2 * DgnLog(v12 + 1.0) + 0.5);
      --v11;
      v10 += 4;
    }
    while (4 * v8 != v10);
    uint64_t v9 = v21;
  }
LABEL_10:
  int v13 = v8 & ((int)v8 >> 31);
  uint64_t v14 = (_DWORD *)v9 + v8 - 1;
  while (1)
  {
    BOOL v15 = __OFSUB__(v8, 1);
    LODWORD(vDgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 8) = v8 - 1;
    if ((int)v8 < 0 != v15) {
      break;
    }
    if (*v14--)
    {
      int v13 = v8 + 1;
      break;
    }
  }
  if (v13 && !*(_DWORD *)(v3 + 8))
  {
    *(void *)uint64_t v3 = MemChunkAlloc(4 * v13, 0);
    *(_DWORD *)(v3 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 8) = v13;
  }
  if (v13 >= 1)
  {
    uint64_t v17 = v21;
    unint64_t v18 = *(_DWORD **)v3;
    uint64_t v19 = v13;
    do
    {
      int v20 = *(_DWORD *)v17;
      uint64_t v17 = (uint64_t *)((char *)v17 + 4);
      *v18++ = v20;
      --v19;
    }
    while (v19);
  }
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v21);
}

void sub_213F8F994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CombineTable::sizeObject(uint64_t a1, int a2)
{
  if (a2 == 3) {
    return 0;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t result = 8;
  }
  else {
    uint64_t result = 12;
  }
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    uint64_t v4 = *(unsigned int *)(a1 + 8);
    if ((int)v4 >= 1) {
      result += 4 * v4;
    }
  }
  return result;
}

uint64_t sizeObject<RecogResultToken>(uint64_t a1, int a2)
{
  memset(v10, 0, 24);
  v10[3] = 0xFFFFFFFF00000000;
  uint64_t v12 = 0;
  int v13 = 0;
  unsigned char v10[4] = 0;
  v10[5] = 0;
  char v11 = 0;
  uint64_t v4 = sizeObject((uint64_t)v10, 2);
  uint64_t v5 = 0;
  if (a2 != 3)
  {
    uint64_t v5 = gShadowDiagnosticShowIdealizedObjectSizes ? 12 : 16;
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      uint64_t v6 = v4;
      uint64_t v7 = *(unsigned int *)(a1 + 8);
      if ((int)v7 >= 1)
      {
        unint64_t v8 = v7 + 1;
        do
          v5 += sizeObject(*(void *)a1 + 96 * (v8-- - 2) + 32, a2) + 50;
        while (v8 > 1);
      }
      if (!a2) {
        v5 += (v6 + 50) * (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
      }
    }
  }
  return v5;
}

void RecogResultChoice::fillFromNBestChoice(unint64_t a1, uint64_t *a2, int a3, int a4, int a5, uint64_t a6, double a7, __n128 a8, __n128 a9)
{
  uint64_t v10 = a2;
  unint64_t v11 = a1;
  *(_DWORD *)(a1 + 44) = *((_DWORD *)a2 + 8);
  long long v12 = *(_OWORD *)((char *)a2 + 36);
  *(_OWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v12;
  *(void *)&long long v12 = *(uint64_t *)((char *)a2 + 52);
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v12;
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = *((_DWORD *)a2 + 15);
  *(_DWORD *)(a1 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 8) = 0;
  if (a6)
  {
    uint64_t v13 = a2[3];
    if (v13) {
      DgnArray<WordConfidenceInfo>::copyArraySlice(a6, (void *)v13, 0, *(_DWORD *)(v13 + 8));
    }
  }
  uint64_t v14 = (void *)v10[2];
  unsigned int v15 = *((_DWORD *)v10 + 2);
  uint64_t v16 = 112 * v15 - 24;
  int v17 = -1;
  while (v16 != -24)
  {
    unsigned int v18 = *(_DWORD *)(*v10 + v16);
    ++v17;
    v16 -= 112;
    if (v18 >> 25 != 126)
    {
      unsigned int v19 = v15 - v17;
      if (!v19) {
        goto LABEL_43;
      }
      goto LABEL_11;
    }
  }
  if (!v15)
  {
    unsigned int v19 = 0;
    goto LABEL_43;
  }
  unsigned int v19 = *(_DWORD *)(*v10 + 88) >> 25 == 126;
  if (*(_DWORD *)(*v10 + 88) >> 25 != 126) {
    goto LABEL_43;
  }
LABEL_11:
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  unsigned int v50 = v19;
  uint64_t v22 = 112 * v19;
  int v57 = a3;
  uint64_t v55 = v22;
  BOOL v56 = (void *)v10[2];
  do
  {
    uint64_t v23 = *v10;
    uint64_t v24 = *v10 + v21;
    uint64_t v25 = *(unsigned int *)(v24 + 88);
    if ((v25 & 0xFE000000) == 0xFC000000)
    {
      if (v14) {
        int v26 = *(_DWORD *)(*v14 + v20);
      }
      else {
        int v26 = -1;
      }
      addSilenceToken(v11, v24, a3, v26, *(int32x2_t *)&v12, (int8x8_t)a8.n128_u64[0]);
    }
    else
    {
      if ((v25 & 0xFE000000) == 0xFA000000 || a4 == 0) {
        int v28 = 0;
      }
      else {
        int v28 = *(_DWORD *)(v23 + v21 + 96);
      }
      int v61 = v28;
      if (v14) {
        int v29 = *(_DWORD *)(*v14 + v20);
      }
      else {
        int v29 = -1;
      }
      int v60 = v29;
      if (a5) {
        int Root = VocMgr::getRoot((VocMgr *)VocMgr::smpVocMgr, v25);
      }
      else {
        int Root = *(_DWORD *)(v24 + 88);
      }
      uint64_t v31 = v23 + v21;
      int v32 = *(_DWORD *)(v23 + v21 + 108);
      if (a3)
      {
        *(int8x8_t *)&long long v12 = vorr_s8(*(int8x8_t *)(v31 + 16), (int8x8_t)vceq_s32(*(int32x2_t *)(v31 + 16), (int32x2_t)0xFFFFFFFCFFFFFFC0));
        if (*(_DWORD *)(v31 + 24) == -4) {
          int v33 = -1;
        }
        else {
          int v33 = *(_DWORD *)(v31 + 24);
        }
      }
      else
      {
        *(void *)&long long v12 = -1;
        *((void *)&v12 + 1) = -1;
        int v33 = -1;
      }
      a8 = *(__n128 *)(v31 + 28);
      uint64_t v34 = *(void *)(v31 + 44);
      int v35 = *(_DWORD *)(v31 + 52);
      uint64_t v36 = *(void *)(v31 + 8);
      uint64_t v37 = *(void *)(v31 + 68);
      int v38 = *(_DWORD *)(v31 + 64);
      if (v38 == 1879048192)
      {
        char v39 = 0;
        int v38 = 0;
        a9 = 0uLL;
      }
      else
      {
        a9.n128_u64[0] = *(void *)(v23 + v21 + 56);
        char v39 = 1;
      }
      uint64_t v40 = *(unsigned int *)(v11 + 8);
      if (v40 == *(_DWORD *)(v11 + 12))
      {
        int v51 = Root;
        uint64_t v41 = v11;
        __n128 v53 = a8;
        long long v54 = v12;
        uint64_t v42 = v10;
        int v43 = v35;
        __n128 v52 = a9;
        unint64_t v44 = v11;
        char v45 = v39;
        DgnArray<RecogResultToken>::reallocElts(v41, 1, 1);
        char v39 = v45;
        unint64_t v11 = v44;
        a9 = v52;
        a8 = v53;
        int v35 = v43;
        uint64_t v10 = v42;
        long long v12 = v54;
        int Root = v51;
        LODWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = *(_DWORD *)(v44 + 8);
      }
      uint64_t v46 = *(void *)v11 + 96 * v40;
      *(_DWORD *)uint64_t v46 = 0;
      *(_WORD *)(v46 + 4) = v25 >> 25;
      *(_DWORD *)(v46 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 8) = v61;
      *(_DWORD *)(v46 + 12) = Root & 0xFFFFFF;
      *(_DWORD *)(v46 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v32 & 0xFFFFFF;
      *(void *)(v46 + 20) = v12;
      *(_DWORD *)(v46 + 2DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 8) = v33;
      *(__n128 *)(v46 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = a8;
      *(void *)(v46 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = v34;
      *(_DWORD *)(v46 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = v35;
      *(_DWORD *)(v46 + 60) = v60;
      *(void *)(v46 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = v36;
      *(void *)(v46 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = v37;
      *(unsigned char *)(v46 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = v39;
      *(void *)(v46 + 84) = a9.n128_u64[0];
      *(_DWORD *)(v46 + 92) = v38;
      ++*(_DWORD *)(v11 + 8);
      a3 = v57;
      uint64_t v22 = v55;
      uint64_t v14 = v56;
    }
    v21 += 112;
    v20 += 4;
  }
  while (v22 != v21);
  unsigned int v15 = *((_DWORD *)v10 + 2);
  unsigned int v19 = v50;
LABEL_43:
  if (v19 < v15)
  {
    unint64_t v47 = v19;
    uint64_t v48 = 112 * v19;
    do
    {
      if (v14) {
        int v49 = *(_DWORD *)(*v14 + 4 * v47);
      }
      else {
        int v49 = -1;
      }
      addSilenceToken(v11, *v10 + v48, a3, v49, *(int32x2_t *)&v12, (int8x8_t)a8.n128_u64[0]);
      ++v47;
      v48 += 112;
    }
    while (v47 < *((unsigned int *)v10 + 2));
  }
}

unint64_t addSilenceToken(unint64_t result, uint64_t a2, int a3, int a4, int32x2_t a5, int8x8_t a6)
{
  unint64_t v7 = result;
  if (a3)
  {
    a5 = *(int32x2_t *)(a2 + 16);
    a6 = (int8x8_t)vceq_s32(a5, (int32x2_t)0xFFFFFFFCFFFFFFC0);
    int8x8_t v8 = vorr_s8((int8x8_t)a5, a6);
    if (*(_DWORD *)(a2 + 24) == -4) {
      int v9 = -1;
    }
    else {
      int v9 = *(_DWORD *)(a2 + 24);
    }
  }
  else
  {
    int8x8_t v8 = (int8x8_t)-1;
    int v9 = -1;
  }
  int v10 = *(_DWORD *)(a2 + 88);
  long long v11 = *(_OWORD *)(a2 + 28);
  uint64_t v12 = *(void *)(a2 + 44);
  int v13 = *(_DWORD *)(a2 + 52);
  uint64_t v14 = *(void *)(a2 + 8);
  uint64_t v15 = *(void *)(a2 + 68);
  int v16 = *(_DWORD *)(a2 + 64);
  a5.i32[0] = 1879048192;
  if (v16 == 1879048192) {
    int v17 = 0;
  }
  else {
    int v17 = *(_DWORD *)(a2 + 64);
  }
  a6.i32[0] = *(_DWORD *)(a2 + 64);
  int8x8_t v18 = vand_s8(*(int8x8_t *)(a2 + 56), (int8x8_t)vdup_lane_s32((int32x2_t)vmvn_s8((int8x8_t)vceq_s32((int32x2_t)a6, a5)), 0));
  BOOL v19 = v16 != 1879048192;
  unsigned int v20 = *(_DWORD *)(result + 8);
  if (v20 == *(_DWORD *)(result + 12))
  {
    long long v22 = *(_OWORD *)(a2 + 28);
    int8x8_t v23 = v8;
    uint64_t result = DgnArray<RecogResultToken>::reallocElts(result, 1, 1);
    long long v11 = v22;
    int8x8_t v8 = v23;
    unsigned int v20 = *(_DWORD *)(v7 + 8);
  }
  uint64_t v21 = *(void *)v7 + 96 * v20;
  *(_DWORD *)uint64_t v21 = 1;
  *(_WORD *)(v21 + 4) = 127;
  *(_DWORD *)(v21 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 8) = 0;
  *(_DWORD *)(v21 + 12) = v10 & 0xFFFFFF;
  *(_DWORD *)(v21 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 16777212;
  *(int8x8_t *)(v21 + 20) = v8;
  *(_DWORD *)(v21 + 2DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 8) = v9;
  *(_OWORD *)(v21 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v11;
  *(void *)(v21 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = v12;
  *(_DWORD *)(v21 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = v13;
  *(_DWORD *)(v21 + 60) = a4;
  *(void *)(v21 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = v14;
  *(void *)(v21 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = v15;
  *(unsigned char *)(v21 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = v19;
  *(int8x8_t *)(v21 + 84) = v18;
  *(_DWORD *)(v21 + 92) = v17;
  ++*(_DWORD *)(v7 + 8);
  return result;
}

unint64_t DgnArray<RecogResultToken>::reallocElts(uint64_t a1, uint64_t a2, int a3)
{
  int v3 = a2;
  if (a3) {
    int v3 = minAddAllocWithExtra(a2, *(_DWORD *)(a1 + 12));
  }
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 12) + v3;
  int8x8_t v8 = 0;
  unint64_t result = realloc_array(*(void **)a1, &v8, 96 * v6, 96 * v5, 96 * v5, 1);
  *(_DWORD *)(a1 + 12) = result / 0x60;
  *(void *)a1 = v8;
  return result;
}

void MrecInitModule_pelsrvsm_pel(void)
{
  if (!gParDiagnosticPelScoringServerUseSeparateKernel)
  {
    uint64_t v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DiagnosticPelScoringServerUseSeparateKernel", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    *uint64_t v1 = &unk_26C4E0858;
    gParDiagnosticPelScoringServerUseSeparateKernel = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticPelScoringServerUseSeparateKernel);
  }
  if (!gParDiagnosticPelScoringUseFreeTime)
  {
    uint64_t v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "DiagnosticPelScoringUseFreeTime", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    void *v3 = &unk_26C4E0858;
    gParDiagnosticPelScoringUseFreeTime = (uint64_t)v3;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticPelScoringUseFreeTime);
  }
  if (!gParDebugPelScoringServer1)
  {
    uint64_t v4 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v4, "DebugPelScoringServer1", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    *uint64_t v5 = &unk_26C4E0858;
    gParDebugPelScoringServer1 = (uint64_t)v5;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugPelScoringServer1);
  }
  if (!gParDebugPelScoringServer2)
  {
    unsigned int v6 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v6, "DebugPelScoringServer2", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    *unint64_t v7 = &unk_26C4E0858;
    gParDebugPelScoringServer2 = (uint64_t)v7;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugPelScoringServer2);
  }
  if (!gParDebugPelScoringServer3)
  {
    int8x8_t v8 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v8, "DebugPelScoringServer3", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    *int v9 = &unk_26C4E0858;
    gParDebugPelScoringServer3 = (uint64_t)v9;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugPelScoringServer3);
  }
  if (!gParDebugPelScoringServer4)
  {
    int v10 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v10, "DebugPelScoringServer4", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    *long long v11 = &unk_26C4E0858;
    gParDebugPelScoringServer4 = (uint64_t)v11;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugPelScoringServer4);
  }
  if (!gParDebugGPUCheckPelScoreRange)
  {
    uint64_t v12 = MemChunkAlloc(0x48uLL, 0);
    long long v16 = xmmword_2140A6930;
    int v13 = (void *)DoubleGlobalParamBase::DoubleGlobalParamBase((uint64_t)v12, (uint64_t)"DebugGPUCheckPelScoreRange", (uint64_t)&byte_2140B33BB, (uint64_t)&byte_2140B33BB, &v16, 0, 0.0);
    *int v13 = &unk_26C4E1508;
    gParDebugGPUCheckPelScoreRange = (uint64_t)v13;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugGPUCheckPelScoreRange);
  }
  if (!gParDiagnosticGPUInitializePelScores)
  {
    uint64_t v14 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v14, "DiagnosticGPUInitializePelScores", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    *uint64_t v15 = &unk_26C4E0858;
    gParDiagnosticGPUInitializePelScores = (uint64_t)v15;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticGPUInitializePelScores);
  }
}

void DoubleGlobalParam::~DoubleGlobalParam(DoubleGlobalParam *this)
{
  MrecInitModule_sdpres_sdapi();

  JUMPOUT(0x216698730);
}

char *GetSubFileExtensionString(unsigned int a1)
{
  if (a1 > 0x76) {
    return 0;
  }
  else {
    return off_2641F6A68[a1];
  }
}

uint64_t GetIndexForLMSubDirExtensionString(const char *a1)
{
  char v1 = (char)a1;
  unsigned int v6 = 0;
  char v5 = 0;
  if (sscanf(a1, ".lm%u%c", &v6, &v5) != 1) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/subext.cpp", 71, (uint64_t)"dfutil/subext", 1, (uint64_t)"%.500s", v2, v3, v1);
  }
  return v6;
}

void NonCoartSyncNet::~NonCoartSyncNet(NonCoartSyncNet *this, Sequence *a2)
{
  BaseSyncNet::~BaseSyncNet(this, a2);

  JUMPOUT(0x216698730);
}

uint64_t NonCoartSyncNet::sizeObject(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v4 = BaseSyncNet::sizeObject(a1, a2);
  return sizeObject(a1 + 288, v2) + v4;
}

uint64_t NonCoartSyncNet::getExitContext(NonCoartSyncNet *this)
{
  return (uint64_t)this + 128;
}

uint64_t NonCoartSyncNet::scoreNetInternal(NonCoartSyncNet *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  if (*((unsigned char *)this + 282)) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = *((_DWORD *)this + 71) != 20000;
  }
  int v11 = *((_DWORD *)this + 26);
  int v23 = *((_DWORD *)this + 38);
  unsigned int v24 = 0;
  if (v11) {
    BOOL v12 = *((_DWORD *)this + 71) <= (int)a3;
  }
  else {
    BOOL v12 = 0;
  }
  *((unsigned char *)this + 282) = v12;
  *((_DWORD *)this + 71) = 20000;
  int v13 = BaseSyncNet::scoreIntSilNode1<true>((uint64_t)this, v12, *((unsigned __int8 *)this + 114), a3, a4, a5, a6, &v24);
  if (*((unsigned char *)this + 282))
  {
    uint64_t v14 = (uint64_t (*)(void *, char *, BOOL, uint64_t, uint64_t, uint64_t))*((void *)this + 25);
    uint64_t v15 = *((void *)this + 26);
    uint64_t v16 = *((void *)this + 1);
    unsigned __int16 v17 = -25064;
LABEL_11:
    ++*(_DWORD *)(v16 + (v17 | 0x40000u));
    uint64_t v18 = **((void **)this + 27);
    BOOL v19 = (void *)(v18 + (v15 >> 1));
    if (v15) {
      uint64_t v14 = *(uint64_t (**)(void *, char *, BOOL, uint64_t, uint64_t, uint64_t))(*v19 + v14);
    }
    int v20 = v14(v19, (char *)this + 288, *((unsigned __int16 *)this + 148) != 20000, a3, a4, a5);
    *((_DWORD *)this + 71) = v20;
    if (v20 != 20000 && v13 >= *(__int16 *)(v18 + 24 * (*(unsigned __int16 *)(v18 + 10) - 1) + 24)) {
      int v13 = *(__int16 *)(v18 + 24 * (*(unsigned __int16 *)(v18 + 10) - 1) + 24);
    }
    goto LABEL_16;
  }
  if (*((unsigned char *)this + 112))
  {
    uint64_t v14 = (uint64_t (*)(void *, char *, BOOL, uint64_t, uint64_t, uint64_t))*((void *)this + 23);
    uint64_t v15 = *((void *)this + 24);
    uint64_t v16 = *((void *)this + 1);
    unsigned __int16 v17 = -25060;
    goto LABEL_11;
  }
  if (v10) {
    *(_WORD *)(**((void **)this + 27)
  }
             + 24 * (*(unsigned __int16 *)(**((void **)this + 27) + 10) - 1)
             + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = 20000;
LABEL_16:
  uint64_t v21 = *((void *)this + 1);
  ++*(_DWORD *)(v21 + 302576);
  *(void *)(v21 + 302592) += v24;
  *((_WORD *)this + 54) = v13;
  if (v13 < *(__int16 *)(v21 + 246)) {
    *(_WORD *)(v21 + 246) = v13;
  }
  *((_DWORD *)this + 26) = v23;
  uint64_t result = (*(uint64_t (**)(NonCoartSyncNet *))(*(void *)this + 328))(this);
  *((_WORD *)this + 55) = result;
  return result;
}

uint64_t BaseSyncNet::scoreIntSilNode1<true>(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, _DWORD *a8)
{
  *(unsigned char *)(a1 + 113) = 0;
  int v11 = (unsigned char *)(a1 + 113);
  int v12 = *(_DWORD *)(a1 + 152);
  if (a2)
  {
    uint64_t v13 = *(void *)(a1 + 264);
    int v14 = *(_DWORD *)(v13 + 4);
    if (*(__int16 *)(v13 + 8) <= a4)
    {
      int v15 = (v12 != 0) | 0x20;
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v13 = 0;
    int v14 = -1;
  }
  if (!v12)
  {
    *(_DWORD *)(a1 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 248) = 1310740000;
    return 20000;
  }
  int v15 = 1;
LABEL_7:
  uint64_t v16 = a1 + 240;
  uint64_t v17 = *(void *)(a1 + 8);
  if (a3) {
    Node::scoreNodeWithPatternNBest(v16, v13, v14, v15, a5, a6, v17, 0, a7, v11, (HmmNet *)a1);
  }
  else {
    Node::scoreNodeWithPattern(v16, v13, v15, a5, a6, v17, 0, a7, v11, (HmmNet *)a1);
  }
  ++*a8;
  return *(__int16 *)(a1 + 248);
}

uint64_t NonCoartSyncNet::thresholdNetInternal(NonCoartSyncNet *this, uint64_t a2, int a3)
{
  uint64_t result = BaseSyncNet::scoreIntSilNode2((uint64_t)this, a2, a3);
  if (*((__int16 *)this + 55) <= a3)
  {
    int v6 = 1;
  }
  else
  {
    int v6 = 0;
    *((_WORD *)this + 55) = 20000;
  }
  *((_DWORD *)this + 26) = v6;
  return result;
}

uint64_t NonCoartSyncNet::calcNumActiveNodes(NonCoartSyncNet *this, int a2)
{
  uint64_t v2 = *((unsigned int *)this + 38);
  if (*((_DWORD *)this + 71) <= a2) {
    return Sequence::calcNumActiveNodes(**((void **)this + 27), a2) + v2;
  }
  return v2;
}

uint64_t *NonCoartSyncNet::addNodesSequential(uint64_t a1, Sequence *this, int a3)
{
  if (a3 == 2)
  {
    char v5 = Sequence::newSequence(this);
    uint64_t v6 = *(unsigned int *)(a1 + 224);
    *(void *)(*(void *)(a1 + 216) + 8 * v6) = v5;
    *(_DWORD *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = v6 + 1;
    return v5 + 2;
  }
  else if (a3)
  {
    return 0;
  }
  else
  {
    uint64_t result = (uint64_t *)(a1 + 240);
    *(unsigned char *)(a1 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 280) = 1;
  }
  return result;
}

uint64_t NonCoartSyncNet::attachInPort(NonCoartSyncNet *this, unsigned int a2, Node *a3)
{
  uint64_t result = PredStruct::addPred((uint64_t)a3 - 16, (uint64_t)this + 288);
  *(void *)(*((void *)this + 7) + 8 * a2) = (char *)this + 288;
  return result;
}

uint64_t PredStruct::addPred(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (_WORD *)result;
  uint64_t v4 = *(unsigned __int16 *)(result + 8);
  if (v4 == 2) {
    goto LABEL_7;
  }
  if (v4 == 1)
  {
    uint64_t v5 = *(void *)result;
    uint64_t result = (uint64_t)MemChunkAlloc(0x10uLL, 0);
    *(void *)uint64_t v3 = result;
    *(void *)uint64_t result = v5;
    *(void *)(*(void *)v3 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 8) = a2;
    LOWORD(v4) = v3[4];
    goto LABEL_13;
  }
  if (*(_WORD *)(result + 8))
  {
    if ((v4 & 7) != 0)
    {
LABEL_12:
      uint64_t v4 = (unsigned __int16)v3[4];
      *(void *)(*(void *)v3 + 8 * v4) = a2;
      goto LABEL_13;
    }
LABEL_7:
    size_t v6 = 8 * v4;
    if (v4 == 2) {
      unint64_t v7 = 64;
    }
    else {
      unint64_t v7 = 8 * v4 + 64;
    }
    int8x8_t v8 = *(void **)v3;
    int v9 = MemChunkAlloc(v7, 0);
    *(void *)uint64_t v3 = v9;
    uint64_t result = (uint64_t)memcpy(v9, v8, v6);
    if (v8) {
      uint64_t result = MemChunkFree(v8, 0);
    }
    goto LABEL_12;
  }
  *(void *)uint64_t result = a2;
LABEL_13:
  v3[4] = v4 + 1;
  return result;
}

void SigProc::~SigProc(SigProc *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 104)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/sigproc.cpp", 74, (uint64_t)"sigproc/sigproc", 1, (uint64_t)"%s", a7, a8, (char)&unk_2140A6973);
  }
  if (*((_DWORD *)this + 120)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/sigproc.cpp", 75, (uint64_t)"sigproc/sigproc", 2, (uint64_t)"%u", a7, a8, *((_DWORD *)this + 110));
  }
  DgnDelete<ChannelStats>(*((ChannelStats **)this + 49));
  DgnDelete<CTFTMgr>(*((CTFTMgr **)this + 50));
  DgnDelete<EnvMgr>(*((EnvMgr **)this + 53));
  DgnDelete<UserDelta>(*((void *)this + 54));
  DgnDelete<AdaptStatsHistory>(*((AdaptStatsHistory **)this + 59));
  FileHistory::~FileHistory((SigProc *)((char *)this + 448));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 408);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 376);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 360);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 344);

  SigProcDescriptor::~SigProcDescriptor(this);
}

ChannelStats *DgnDelete<ChannelStats>(ChannelStats *result)
{
  if (result)
  {
    ChannelStats::~ChannelStats(result);
    return (ChannelStats *)MemChunkFree(v1, 0);
  }
  return result;
}

CTFTMgr *DgnDelete<CTFTMgr>(CTFTMgr *result)
{
  if (result)
  {
    CTFTMgr::~CTFTMgr(result);
    return (CTFTMgr *)MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t DgnDelete<UserDelta>(uint64_t result)
{
  if (result)
  {
    char v1 = (void *)result;
    DgnPrimArray<unsigned int>::~DgnPrimArray(result + 48);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(v1 + 3));
    return MemChunkFree(v1, 0);
  }
  return result;
}

void SigProc::saveSigProc(uint64_t a1, uint64_t a2, _DWORD *a3, int a4, int a5)
{
  int64x2_t v25 = 0u;
  int64x2_t v26 = 0u;
  SnapTime::recordTime((SnapTime *)&v25, 1, 1, 1, 1);
  LoadSaveTracker::LoadSaveTracker((LoadSaveTracker *)&v24);
  if (a4)
  {
    BOOL v10 = a4 != 2;
  }
  else if (*(unsigned char *)(a1 + 484))
  {
    BOOL v10 = *(unsigned char *)(*(void *)(a1 + 424) + 264) != 0;
  }
  else
  {
    BOOL v10 = 0;
  }
  DFileOwner::DFileOwner((DFileOwner *)v23);
  *a3 = 1;
  int v11 = DFile::openDFile(a2, (const FileSpec *)1, 4, (uint64_t)v23);
  *a3 = 2;
  DFileChecksums::DFileChecksums((DFileChecksums *)v22);
  AdaptStatsHistory::saveASB(*(void (****)(void))(a1 + 472), (DFile *)v11, (DFileChecksums *)v22, v10, a5);
  EnvMgr::saveEnvMgr(*(EnvMgr **)(a1 + 424), (DFile *)v11, (DFileChecksums *)v22, v10, a5);
  SigProcDescriptor::saveSigProcDescriptor((SigProcDescriptor *)a1, (DFile *)v11, (DFileChecksums *)v22, v10, a5);
  WaveDecoder::saveWaveDecoder((WaveDecoder *)(a1 + 344), (DFile *)v11, (DFileChecksums *)v22, v10, a5);
  int v15 = *(ChannelStats **)(a1 + 392);
  if (v15) {
    ChannelStats::saveChannelStats(v15, (DFile *)v11, (DFileChecksums *)v22, v10, a5);
  }
  CTFTMgr::saveCTFT(*(CTFTMgr **)(a1 + 400), (DFile *)v11, (DFileChecksums *)v22, v10, a5, v12, v13, v14);
  if (!v10)
  {
    uint64_t v16 = *(UserDelta **)(a1 + 432);
    if (*((_DWORD *)v16 + 5)) {
      UserDelta::saveUserDelta(v16, (DFile *)v11, (DFileChecksums *)v22, a5);
    }
    uint64_t v17 = OpenAndWriteMrecHeader((uint64_t)v11, 0x52u, 0, "MRSCH!? ", 19, 2);
    v20.i32[0] = 0;
    writeObject((uint64_t)v17, (uint64_t)v22, &v20);
    writeObjectChecksum((uint64_t)v17, v20.i32);
    DgnDelete<DgnStream>((void (***)(void))v17);
  }
  int64x2_t v20 = 0u;
  int64x2_t v21 = 0u;
  SnapTime::recordTime((SnapTime *)&v20, 1, 1, 1, 1);
  int64x2_t v20 = vsubq_s64(v20, v25);
  int64x2_t v21 = vsubq_s64(v21, v26);
  uint64_t v18 = (FileHistory *)(a1 + 448);
  FileHistory::addEntryWithElapsedTime(v18, " saveSigProc time: ", (const SnapTime *)&v20);
  FileHistory::saveFileHistory(v18, (DFile *)v11, v10);
  DFileOwner::setRemoveFileOnDestruction((uint64_t)v23, 0);
  *a3 = 0;
  DFileChecksums::~DFileChecksums((DFileChecksums *)v22);
  DFileOwner::~DFileOwner((DFileOwner *)v23, v19);
  LoadSaveTracker::~LoadSaveTracker((LoadSaveTracker *)&v24);
}

void sub_213F90EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  DFileChecksums::~DFileChecksums((DFileChecksums *)&a13);
  DFileOwner::~DFileOwner((DFileOwner *)&a16, v22);
  LoadSaveTracker::~LoadSaveTracker((LoadSaveTracker *)&a21);
  _Unwind_Resume(a1);
}

void SigProc::decrementAdapterCount(SigProc *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = *((_DWORD *)this + 120);
  if (!v9)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/sigproc.cpp", 348, (uint64_t)"sigproc/sigproc", 3, (uint64_t)"%u", a7, a8, *((_DWORD *)this + 110));
    int v9 = *((_DWORD *)this + 120);
  }
  *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 120) = v9 - 1;
}

void SigProc::printSize(SigProc *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/sigproc.cpp", 359, (DgnString *)&v111);
  if (v112) {
    uint64_t v16 = (void *)v111;
  }
  else {
    uint64_t v16 = &unk_2140A6973;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_2140A6973, a3, &unk_2140A6973, v16);
  DgnString::~DgnString((DgnString *)&v111);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_2140A6973);
  uint64_t v21 = (a3 + 1);
  uint64_t v108 = a3;
  uint64_t v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/sigproc.cpp", 360, (DgnString *)&v111);
  if (v112) {
    uint64_t v27 = (void *)v111;
  }
  else {
    uint64_t v27 = &unk_2140A6973;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, v21, &unk_2140A6973, v22, v22, v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v111);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v28 = 12;
  }
  else {
    uint64_t v28 = 16;
  }
  uint64_t v29 = *((unsigned int *)this + 104);
  unsigned int v30 = *((_DWORD *)this + 105);
  if (v30 >= v29)
  {
    uint64_t v31 = 0;
    if ((int)v29 > 0) {
      v28 += 4 * (v29 - 1) + 4;
    }
    uint64_t v32 = v28 + 4 * (v30 - v29);
  }
  else
  {
    uint64_t v31 = 4 * v29;
    uint64_t v32 = v28;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/sigproc.cpp", 362, (DgnString *)&v111);
  if (v112) {
    uint64_t v37 = (void *)v111;
  }
  else {
    uint64_t v37 = &unk_2140A6973;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, v21, &unk_2140A6973, v22, v22, v37, v32, v28, v31);
  DgnString::~DgnString((DgnString *)&v111);
  *a4 += v32;
  *a5 += v28;
  *a6 += v31;
  uint64_t v38 = sizeObject((uint64_t)this + 448, 0);
  uint64_t v39 = sizeObject((uint64_t)this + 448, 1);
  uint64_t v40 = sizeObject((uint64_t)this + 448, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/sigproc.cpp", 363, (DgnString *)&v111);
  if (v112) {
    char v45 = (void *)v111;
  }
  else {
    char v45 = &unk_2140A6973;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v41, v42, v43, v44, v21, &unk_2140A6973, v22, v22, v45, v38, v39, v40);
  DgnString::~DgnString((DgnString *)&v111);
  *a4 += v38;
  *a5 += v39;
  *a6 += v40;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v46 = 4;
  }
  else {
    uint64_t v46 = 8;
  }
  uint64_t v47 = *((void *)this + 59);
  if (v47)
  {
    uint64_t v48 = sizeObject(v47, 0) + v46;
    uint64_t v49 = *((void *)this + 59);
    if (gShadowDiagnosticShowIdealizedObjectSizes) {
      uint64_t v46 = 4;
    }
    else {
      uint64_t v46 = 8;
    }
    if (v49 && (v46 += sizeObject(v49, 1), (uint64_t v50 = *((void *)this + 59)) != 0)) {
      uint64_t v51 = sizeObject(v50, 3);
    }
    else {
      uint64_t v51 = 0;
    }
  }
  else
  {
    uint64_t v51 = 0;
    uint64_t v48 = v46;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/sigproc.cpp", 365, (DgnString *)&v111);
  if (v112) {
    BOOL v56 = (void *)v111;
  }
  else {
    BOOL v56 = &unk_2140A6973;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v52, v53, v54, v55, v21, &unk_2140A6973, v22, v22, v56, v48, v46, v51);
  DgnString::~DgnString((DgnString *)&v111);
  *a4 += v48;
  *a5 += v46;
  *a6 += v51;
  unint64_t v110 = 0;
  unint64_t v111 = 0;
  unint64_t v109 = 0;
  SigProcDescriptor::printSize(this, 0xFFFFFFFFLL, v21, &v111, &v110, &v109);
  *a4 += v111;
  *a5 += v110;
  *a6 += v109;
  uint64_t v57 = sizeObject((char *)this + 344, 0);
  uint64_t v58 = sizeObject((char *)this + 344, 1);
  uint64_t v59 = sizeObject((char *)this + 344, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/sigproc.cpp", 368, (DgnString *)&v111);
  if (v112) {
    uint64_t v64 = (void *)v111;
  }
  else {
    uint64_t v64 = &unk_2140A6973;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v60, v61, v62, v63, v21, &unk_2140A6973, v22, v22, v64, v57, v58, v59);
  DgnString::~DgnString((DgnString *)&v111);
  *a4 += v57;
  *a5 += v58;
  *a6 += v59;
  int v65 = (CTFTMgr *)*((void *)this + 50);
  if (v65)
  {
    unint64_t v110 = 0;
    unint64_t v111 = 0;
    unint64_t v109 = 0;
    CTFTMgr::printSize(v65, 0xFFFFFFFFLL, v21, &v111, &v110, &v109);
    *a4 += v111;
    *a5 += v110;
    *a6 += v109;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v66 = 4;
  }
  else {
    uint64_t v66 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/sigproc.cpp", 369, (DgnString *)&v111);
  if (v112) {
    int v71 = (void *)v111;
  }
  else {
    int v71 = &unk_2140A6973;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v67, v68, v69, v70, v21, &unk_2140A6973, v22, v22, v71, v66, v66, 0);
  DgnString::~DgnString((DgnString *)&v111);
  *a4 += v66;
  *a5 += v66;
  uint64_t v72 = (ChannelStats *)*((void *)this + 49);
  if (v72)
  {
    unint64_t v110 = 0;
    unint64_t v111 = 0;
    unint64_t v109 = 0;
    ChannelStats::printSize(v72, 0xFFFFFFFFLL, v21, &v111, &v110, &v109);
    *a4 += v111;
    *a5 += v110;
    *a6 += v109;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v73 = 4;
  }
  else {
    uint64_t v73 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/sigproc.cpp", 371, (DgnString *)&v111);
  if (v112) {
    uint64_t v78 = (void *)v111;
  }
  else {
    uint64_t v78 = &unk_2140A6973;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v74, v75, v76, v77, v21, &unk_2140A6973, v22, v22, v78, v73, v73, 0);
  DgnString::~DgnString((DgnString *)&v111);
  *a4 += v73;
  *a5 += v73;
  uint64_t v79 = (EnvMgr *)*((void *)this + 53);
  if (v79)
  {
    unint64_t v110 = 0;
    unint64_t v111 = 0;
    unint64_t v109 = 0;
    EnvMgr::printSize(v79, 0xFFFFFFFFLL, v21, &v111, &v110, &v109);
    *a4 += v111;
    *a5 += v110;
    *a6 += v109;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v80 = 4;
  }
  else {
    uint64_t v80 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/sigproc.cpp", 372, (DgnString *)&v111);
  if (v112) {
    uint64_t v85 = (void *)v111;
  }
  else {
    uint64_t v85 = &unk_2140A6973;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v81, v82, v83, v84, v21, &unk_2140A6973, v22, v22, v85, v80, v80, 0);
  DgnString::~DgnString((DgnString *)&v111);
  *a4 += v80;
  *a5 += v80;
  int v86 = (UserDelta *)*((void *)this + 54);
  if (v86)
  {
    unint64_t v110 = 0;
    unint64_t v111 = 0;
    unint64_t v109 = 0;
    UserDelta::printSize(v86, 0xFFFFFFFFLL, v21, &v111, &v110, &v109);
    *a4 += v111;
    *a5 += v110;
    *a6 += v109;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v87 = 4;
  }
  else {
    uint64_t v87 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/sigproc.cpp", 374, (DgnString *)&v111);
  if (v112) {
    long long v92 = (void *)v111;
  }
  else {
    long long v92 = &unk_2140A6973;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, v21, &unk_2140A6973, v22, v22, v92, v87, v87, 0);
  DgnString::~DgnString((DgnString *)&v111);
  *a4 += v87;
  *a5 += v87;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/sigproc.cpp", 375, (DgnString *)&v111);
  if (v112) {
    uint64_t v97 = (void *)v111;
  }
  else {
    uint64_t v97 = &unk_2140A6973;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v93, v94, v95, v96, v21, &unk_2140A6973, v22, v22, v97, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v111);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/sigproc.cpp", 377, (DgnString *)&v111);
  if (v112) {
    uint64_t v102 = (void *)v111;
  }
  else {
    uint64_t v102 = &unk_2140A6973;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v98, v99, v100, v101, v21, &unk_2140A6973, v22, v22, v102, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v111);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sigproc/sigproc.cpp", 378, (DgnString *)&v111);
  if (v112) {
    uint64_t v107 = (void *)v111;
  }
  else {
    uint64_t v107 = &unk_2140A6973;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v103, v104, v105, v106, v108, &unk_2140A6973, (35 - v108), (35 - v108), v107, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v111);
}

void sub_213F91868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void MrecInitModule_sausage_kernel(void)
{
  if (!gParDebugSausageGenerationShowOperationTimes)
  {
    uint64_t v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugSausageGenerationShowOperationTimes", (const char *)&unk_2140A6974, (const char *)&unk_2140A6974, 0, 0, 0);
    *char v1 = &unk_26C4E0858;
    gParDebugSausageGenerationShowOperationTimes = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugSausageGenerationShowOperationTimes);
  }
  if (!gParDebugSausageGenerationInitialize)
  {
    uint64_t v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "DebugSausageGenerationInitialize", (const char *)&unk_2140A6974, (const char *)&unk_2140A6974, 0, 0, 0);
    void *v3 = &unk_26C4E0858;
    gParDebugSausageGenerationInitialize = (uint64_t)v3;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugSausageGenerationInitialize);
  }
  if (!gParDebugSausageGenerationMinimize)
  {
    uint64_t v4 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v4, "DebugSausageGenerationMinimize", (const char *)&unk_2140A6974, (const char *)&unk_2140A6974, 0, 0, 0);
    *uint64_t v5 = &unk_26C4E0858;
    gParDebugSausageGenerationMinimize = (uint64_t)v5;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugSausageGenerationMinimize);
  }
  if (!gParDebugSausageCombination)
  {
    size_t v6 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v6, "DebugSausageCombination", (const char *)&unk_2140A6974, (const char *)&unk_2140A6974, 0, 0, 0);
    *unint64_t v7 = &unk_26C4E0858;
    gParDebugSausageCombinatiouint64_t n = (uint64_t)v7;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugSausageCombination);
  }
  if (!gParDiagnosticSausageGenerationCommand)
  {
    int8x8_t v8 = MemChunkAlloc(0x48uLL, 0);
    StringGlobalParamBase::StringGlobalParamBase((StringGlobalParamBase *)v8, "DiagnosticSausageGenerationCommand", (const char *)&unk_2140A6974, (const char *)&unk_2140A6974, (char *)&unk_2140A6974, 0, 0);
    *int v9 = &unk_26C4E18B8;
    gParDiagnosticSausageGenerationCommand = (uint64_t)v9;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticSausageGenerationCommand);
  }
  if (!gParDebugFastSausageGeneration)
  {
    BOOL v10 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v10, "DebugFastSausageGeneration", (const char *)&unk_2140A6974, (const char *)&unk_2140A6974, 0, 0, 0);
    *int v11 = &unk_26C4E0858;
    gParDebugFastSausageGeneratiouint64_t n = (uint64_t)v11;
    uint64_t v12 = (uint64_t *)GlobalParamMgr::smpGlobalParamMgr;
    GlobalParamMgr::addParam(v12, (GlobalParam **)&gParDebugFastSausageGeneration);
  }
}

void CWIDProbPair::~CWIDProbPair(CWIDProbPair *this)
{
  *((void *)this + 5) = 0;
}

void SausageSlot::~SausageSlot(SausageSlot *this)
{
  *((unsigned char *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = 0;
  *((void *)this + 2) = 0xBFF0000000000000;
  DgnArray<CWIDProbPair>::releaseAll((uint64_t)this);
}

uint64_t sizeObject<CWIDProbPair>(uint64_t a1, int a2)
{
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    unsigned int v2 = 37;
  }
  else {
    unsigned int v2 = 41;
  }
  if (a2 == 3)
  {
    uint64_t v3 = 0;
  }
  else
  {
    if (gShadowDiagnosticShowIdealizedObjectSizes) {
      uint64_t v3 = 12;
    }
    else {
      uint64_t v3 = 16;
    }
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      uint64_t v6 = *(unsigned int *)(a1 + 8);
      if ((int)v6 >= 1)
      {
        unint64_t v7 = v6 + 1;
        do
          v3 += sizeObject(*(void *)a1 + 48 * (v7-- - 2), a2);
        while (v7 > 1);
      }
      if (!a2) {
        v3 += v2 * (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
      }
    }
  }
  DgnDelete<DgnArray<Germ>>(0);
  return v3;
}

void sub_213F91D70(_Unwind_Exception *a1)
{
}

uint64_t Sausage::adjustReferenceCounts(uint64_t this, int a2)
{
  uint64_t v3 = this;
  uint64_t v4 = (void **)VocMgr::smpVocMgr;
  uint64_t v5 = *(unsigned int *)(this + 28);
  if (!v5)
  {
    unint64_t v7 = 0;
    goto LABEL_8;
  }
  uint64_t v6 = *(void **)(this + 96);
  unint64_t v7 = (uint64_t *)*v6;
  if (*v6)
  {
LABEL_8:
    LODWORD(vDgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 8) = 0;
    goto LABEL_9;
  }
  uint64_t v8 = 0;
  int v9 = v6 + 1;
  while (v5 - 1 != v8)
  {
    unint64_t v7 = (uint64_t *)v9[v8++];
    if (v7)
    {
LABEL_9:
      while (v8 < v5)
      {
        unint64_t v10 = *((unsigned int *)v7 + 3);
        uint64_t v11 = *(void *)(**v4 + ((v10 >> 22) & 0x3F8));
        uint64_t v12 = *(void *)(v11 + 48);
        unsigned int v13 = v10 & 0xFFFFFF;
        if (a2)
        {
          Voc::addVocReferringSausageRef(v11);
          this = WordList::addIncludingSausageRef(v12, v13);
        }
        else
        {
          Voc::removeVocReferringSausageRef(v11);
          this = WordList::removeIncludingSausageRef(v12, v13);
        }
        uint64_t v14 = (uint64_t *)*v7;
        uint64_t v5 = *(unsigned int *)(v3 + 28);
        if (!*v7)
        {
          uint64_t v8 = (v8 + 1);
          if (v8 >= v5)
          {
            uint64_t v14 = v7;
          }
          else
          {
            uint64_t v15 = *(void *)(v3 + 96);
            uint64_t v14 = *(uint64_t **)(v15 + 8 * v8);
            if (!v14)
            {
              uint64_t v16 = (uint64_t *)(v15 + 8 * v8 + 8);
              uint64_t v17 = ~v8 + v5;
              while (v17)
              {
                uint64_t v18 = (uint64_t *)*v16++;
                uint64_t v14 = v18;
                LODWORD(vDgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 8) = v8 + 1;
                --v17;
                if (v18) {
                  goto LABEL_21;
                }
              }
              return this;
            }
          }
        }
LABEL_21:
        unint64_t v7 = v14;
      }
      return this;
    }
  }
  return this;
}

void Sausage::~Sausage(Sausage *this)
{
  if (*((unsigned char *)this + 120))
  {
    Sausage::adjustReferenceCounts((uint64_t)this, 0);
    *((unsigned char *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 120) = 0;
  }
  HashKEV<unsigned int,unsigned int,CWIDScope>::~HashKEV((uint64_t)this + 16);
  DgnIOwnArray<SausageSlot *>::releaseAll((uint64_t)this);
}

void Sausage::printSize(Sausage *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/sausage.cpp", 4231, (DgnString *)&v89);
  if (v90) {
    uint64_t v16 = v89;
  }
  else {
    uint64_t v16 = &unk_2140A6974;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_2140A6974, a3, &unk_2140A6974, v16);
  DgnString::~DgnString((DgnString *)&v89);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  uint64_t v87 = a6;
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_2140A6974);
  uint64_t v21 = sizeObject<SausageSlot *>((uint64_t)this, 0);
  uint64_t v22 = sizeObject<SausageSlot *>((uint64_t)this, 1);
  uint64_t v23 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/sausage.cpp", 4232, (DgnString *)&v89);
  if (v90) {
    uint64_t v28 = v89;
  }
  else {
    uint64_t v28 = &unk_2140A6974;
  }
  uint64_t v88 = (a3 + 1);
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v24, v25, v26, v27, v88, &unk_2140A6974, (34 - a3), (34 - a3), v28, v21, v22, 0);
  DgnString::~DgnString((DgnString *)&v89);
  *a4 += v21;
  *a5 += v22;
  uint64_t v29 = sizeObject((char *)this + 40);
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v30 = 8;
  }
  else {
    uint64_t v30 = 12;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    char v31 = 2;
  }
  else {
    char v31 = 3;
  }
  unint64_t v32 = (unint64_t)*((unsigned int *)this + 26) << v31;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v33 = 4;
  }
  else {
    uint64_t v33 = 8;
  }
  uint64_t v34 = v29 + v33 + v30 + v32 + 13;
  uint64_t v35 = sizeObject((char *)this + 40);
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v36 = 8;
  }
  else {
    uint64_t v36 = 12;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    char v37 = 2;
  }
  else {
    char v37 = 3;
  }
  unint64_t v38 = (unint64_t)*((unsigned int *)this + 26) << v37;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v39 = 4;
  }
  else {
    uint64_t v39 = 8;
  }
  uint64_t v40 = v35 + v39 + v36 + v38 + 13;
  uint64_t v41 = sizeObject((char *)this + 40);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/sausage.cpp", 4233, (DgnString *)&v89);
  if (v90) {
    uint64_t v46 = v89;
  }
  else {
    uint64_t v46 = &unk_2140A6974;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v42, v43, v44, v45, v88, &unk_2140A6974, v23, v23, v46, v34, v40, v41);
  DgnString::~DgnString((DgnString *)&v89);
  *a4 += v34;
  *a5 += v40;
  *v87 += v41;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/sausage.cpp", 4234, (DgnString *)&v89);
  if (v90) {
    uint64_t v51 = v89;
  }
  else {
    uint64_t v51 = &unk_2140A6974;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v47, v48, v49, v50, v88, &unk_2140A6974, v23, v23, v51, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v89);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/sausage.cpp", 4236, (DgnString *)&v89);
  if (v90) {
    BOOL v56 = v89;
  }
  else {
    BOOL v56 = &unk_2140A6974;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v52, v53, v54, v55, v88, &unk_2140A6974, v23, v23, v56, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v89);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/sausage.cpp", 4238, (DgnString *)&v89);
  if (v90) {
    uint64_t v61 = v89;
  }
  else {
    uint64_t v61 = &unk_2140A6974;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v57, v58, v59, v60, v88, &unk_2140A6974, v23, v23, v61, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v89);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/sausage.cpp", 4239, (DgnString *)&v89);
  if (v90) {
    uint64_t v66 = v89;
  }
  else {
    uint64_t v66 = &unk_2140A6974;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v62, v63, v64, v65, v88, &unk_2140A6974, v23, v23, v66, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v89);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/sausage.cpp", 4241, (DgnString *)&v89);
  if (v90) {
    int v71 = v89;
  }
  else {
    int v71 = &unk_2140A6974;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v67, v68, v69, v70, v88, &unk_2140A6974, v23, v23, v71, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v89);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/sausage.cpp", 4243, (DgnString *)&v89);
  if (v90) {
    uint64_t v76 = v89;
  }
  else {
    uint64_t v76 = &unk_2140A6974;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v72, v73, v74, v75, v88, &unk_2140A6974, v23, v23, v76, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v89);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/sausage.cpp", 4245, (DgnString *)&v89);
  if (v90) {
    uint64_t v81 = v89;
  }
  else {
    uint64_t v81 = &unk_2140A6974;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v77, v78, v79, v80, v88, &unk_2140A6974, v23, v23, v81, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v89);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/sausage.cpp", 4246, (DgnString *)&v89);
  if (v90) {
    int v86 = v89;
  }
  else {
    int v86 = &unk_2140A6974;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v82, v83, v84, v85, a3, &unk_2140A6974, (35 - a3), (35 - a3), v86, *a4, *a5, *v87);
  DgnString::~DgnString((DgnString *)&v89);
}

void sub_213F924C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<SausageSlot *>(uint64_t a1, int a2)
{
  if (a2 == 3) {
    return 0;
  }
  int v4 = gShadowDiagnosticShowIdealizedObjectSizes;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v2 = 12;
  }
  else {
    uint64_t v2 = 16;
  }
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    uint64_t v6 = *(unsigned int *)(a1 + 8);
    if ((int)v6 >= 1)
    {
      unint64_t v7 = v6 + 1;
      int v8 = gShadowDiagnosticShowIdealizedObjectSizes;
      do
      {
        if (v8) {
          uint64_t v9 = 4;
        }
        else {
          uint64_t v9 = 8;
        }
        if (a2 != 2)
        {
          uint64_t v10 = *(void *)(*(void *)a1 + 8 * (v7 - 2));
          if (v10)
          {
            v9 += sizeObject<CWIDProbPair>(v10, a2) + 9;
            int v8 = gShadowDiagnosticShowIdealizedObjectSizes;
          }
        }
        v2 += v9;
        --v7;
      }
      while (v7 > 1);
    }
    if (!a2)
    {
      char v11 = 2;
      if (!v4) {
        char v11 = 3;
      }
      v2 += (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8)) << v11;
    }
  }
  return v2;
}

void *DgnArray<CWIDProbPair>::releaseAll(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 1)
  {
    uint64_t v3 = 48 * v2 - 48;
    do
    {
      CWIDProbPair::~CWIDProbPair((CWIDProbPair *)(*(void *)a1 + v3));
      v3 -= 48;
    }
    while (v3 != -48);
  }
  uint64_t result = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 8) = 0;
  return result;
}

void *DgnIOwnArray<SausageSlot *>::releaseAll(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<SausageSlot>(*(SausageSlot **)(*(void *)a1 + v3));
      *(void *)(*(void *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  uint64_t result = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 8) = 0;
  return result;
}

SausageSlot *DgnDelete<SausageSlot>(SausageSlot *result)
{
  if (result)
  {
    SausageSlot::~SausageSlot(result);
    return (SausageSlot *)MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t SDVoc_New(FileSpec *a1, FileSpec *a2, uint64_t a3, unsigned int *a4, FileSpec *a5, unsigned int a6, unsigned int a7, void *a8, uint64_t a9)
{
  uint64_t v16 = SdapiInsurance::SdapiInsurance(v86, "SDVoc_New", 1, 1, 379);
  if (!v86[97])
  {
    uint64_t Voc = 0;
    goto LABEL_81;
  }
  if (!a1) {
    throwBadStringPointer(v16, (uint64_t)v17, v18, v19, v20, v21, v22, v23);
  }
  LOBYTE(v7DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 8) = 0;
  if (!a2) {
    throwBadStringPointer(v16, (uint64_t)v17, v18, v19, v20, v21, v22, v23);
  }
  LOBYTE(v7DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 8) = 0;
  if (!a5) {
    throwBadStringPointer(v16, (uint64_t)v17, v18, v19, v20, v21, v22, v23);
  }
  LOBYTE(v7DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 8) = 0;
  if (gbShowCalls | gbShowCallsWithFileSpecArgs)
  {
    DgnString::DgnString((DgnString *)&v84);
    DgnString::DgnString((DgnString *)&v78);
    FileSpec::getDiagnosticMaskedName(a1, (DgnString *)&v78, v24);
    DgnString::preAllocate((unint64_t)&v84, 96);
    if (v79) {
      uint64_t v25 = v78;
    }
    else {
      uint64_t v25 = (char *)&unk_2140A698A;
    }
    DgnString::formatStringInPlace((DgnString *)&v84, v25);
    DgnString::~DgnString((DgnString *)&v78);
    DgnString::DgnString((DgnString *)&v82);
    DgnString::DgnString((DgnString *)&v78);
    FileSpec::getDiagnosticMaskedName(a2, (DgnString *)&v78, v26);
    DgnString::preAllocate((unint64_t)&v82, 96);
    if (v79) {
      uint64_t v27 = v78;
    }
    else {
      uint64_t v27 = (char *)&unk_2140A698A;
    }
    DgnString::formatStringInPlace((DgnString *)&v82, v27);
    DgnString::~DgnString((DgnString *)&v78);
    DgnString::DgnString((DgnString *)&v80);
    DgnString::DgnString((DgnString *)&v78);
    FileSpec::getDiagnosticMaskedName(a5, (DgnString *)&v78, v28);
    DgnString::preAllocate((unint64_t)&v80, 96);
    if (v79) {
      uint64_t v29 = v78;
    }
    else {
      uint64_t v29 = (char *)&unk_2140A698A;
    }
    DgnString::formatStringInPlace((DgnString *)&v80, v29);
    DgnString::~DgnString((DgnString *)&v78);
    if (v85) {
      uint64_t v34 = v84;
    }
    else {
      uint64_t v34 = &unk_2140A698A;
    }
    uint64_t v35 = v82;
    if (!v83) {
      uint64_t v35 = (char *)&unk_2140A698A;
    }
    if (v81) {
      uint64_t v36 = v80;
    }
    else {
      uint64_t v36 = &unk_2140A698A;
    }
    char v37 = "SD_TRUE";
    if (a6) {
      unint64_t v38 = "SD_TRUE";
    }
    else {
      unint64_t v38 = "SD_FALSE";
    }
    if (!a7) {
      char v37 = "SD_FALSE";
    }
    if (gbShowCallPointerArguments) {
      uint64_t v39 = a4;
    }
    else {
      uint64_t v39 = 0;
    }
    if (gbShowCallPointerArguments) {
      uint64_t v40 = a8;
    }
    else {
      uint64_t v40 = 0;
    }
    uint64_t v41 = a9;
    if (!gbShowCallPointerArguments) {
      uint64_t v41 = 0;
    }
    xlprintf("Entering sdapi call %.500s(%.500s, %.500s, %lld, Masked:0x%016llx, %.500s, %.500s, %.500s, Masked:0x%016llx, Masked:0x%016llx)\n", v30, v31, v32, v33, "SDVoc_New", v34, v35, a3, v39, v36, v38, v37, v40, v41);
    DgnString::~DgnString((DgnString *)&v80);
    DgnString::~DgnString((DgnString *)&v82);
    DgnString::~DgnString((DgnString *)&v84);
  }
  if (a6 == 1 && a7 == 1) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdvoc.cpp", 260, (uint64_t)"sdapi/sdvoc", 23, (uint64_t)"%s", v22, v23, (char)&unk_2140A698A);
  }
  if (a5)
  {
    BOOL v42 = a4 == 0;
    BOOL v43 = *(unsigned __int8 *)a5 != 0;
    if (*(unsigned char *)a5) {
      BOOL v44 = 1;
    }
    else {
      BOOL v44 = a4 != 0;
    }
    if (a4 && *(unsigned char *)a5)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdvoc.cpp", 266, (uint64_t)"sdapi/sdvoc", 19, (uint64_t)"%s", v22, v23, (char)&errStr_sdapi_sdvoc_E_SHAREDMEM_HAVECACHEDIR);
      BOOL v42 = 0;
      BOOL v44 = 1;
    }
  }
  else
  {
    BOOL v43 = 0;
    BOOL v42 = a4 == 0;
    BOOL v44 = a4 != 0;
  }
  if (a6 == 1 && v44) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdvoc.cpp", 273, (uint64_t)"sdapi/sdvoc", 15, (uint64_t)"%s", v22, v23, (char)&errStr_sdapi_sdvoc_E_SHAREDMEM_REABSORB);
  }
  char v45 = !v44;
  if (a7 != 1) {
    char v45 = 1;
  }
  if ((v45 & 1) == 0) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdvoc.cpp", 277, (uint64_t)"sdapi/sdvoc", 16, (uint64_t)"%s", v22, v23, (char)&errStr_sdapi_sdvoc_E_SHAREDMEM_LOBOTOMIZE);
  }
  if (v43 && !OsFile::dirExists(a5, v17)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdvoc.cpp", 281, (uint64_t)"sdapi/sdvoc", 20, (uint64_t)"%.500s", v46, v47, (char)a5);
  }
  FileSpec::FileSpec((FileSpec *)&v84, (const char *)a1);
  FileSpec::FileSpec((FileSpec *)&v82);
  if (a2 && *(unsigned char *)a2)
  {
    char v50 = !v44;
    if (a3 == -1) {
      char v50 = 1;
    }
    if ((v50 & 1) == 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdvoc.cpp", 291, (uint64_t)"sdapi/sdvoc", 17, (uint64_t)"%s", v48, v49, (char)&errStr_sdapi_sdvoc_E_SHAREDMEM_STATICVOC);
    }
    FileSpec::fillFromName((FileSpec *)&v82, (char *)a2);
  }
  uint64_t v80 = a8;
  uint64_t v81 = a9;
  ProgressCallbackHandler::ProgressCallbackHandler((ProgressCallbackHandler *)&v78, (void (*)(unsigned int, const void *))ProgressCallbackWrapper, &v80);
  DFileOwner::DFileOwner((DFileOwner *)v77);
  DFileOwner::DFileOwner((DFileOwner *)v76);
  uint64_t v51 = DFile::openDFile((uint64_t)&v84, 0, 2, (uint64_t)v77);
  if (!FileSpec::isValid(&v82))
  {
    uint64_t v58 = 0;
    if (!v44) {
      goto LABEL_70;
    }
LABEL_72:
    DgnString::DgnString((DgnString *)v75);
    if (!v42)
    {
      DgnString::makeStringPrintf((DgnString *)"{%08x-%04x-%04x-%02x%02x-%02x%02x%02x%02x%02x%02x}", (const char *)*a4, v60, v61, v62, *a4, *((unsigned __int16 *)a4 + 2), *((unsigned __int16 *)a4 + 3), *((unsigned __int8 *)a4 + 8), *((unsigned __int8 *)a4 + 9), *((unsigned __int8 *)a4 + 10), *((unsigned __int8 *)a4 + 11), *((unsigned __int8 *)a4 + 12), *((unsigned __int8 *)a4 + 13), *((unsigned __int8 *)a4 + 14), *((unsigned __int8 *)a4 + 15));
      DgnString::operator=((DgnString *)v75, (DgnString *)v74);
      DgnString::~DgnString((DgnString *)v74);
    }
    DgnString::DgnString((DgnString *)v74, (const char *)a5);
    SetObject = (DSMSetData **)DgnSharedMemMgr::getMaybeCreateSetObjectEx((DgnSharedMemMgr *)DgnSharedMemMgr::smpDSMMgr, (const DgnString *)v74, (const DgnString *)v75, v63, v64, v65, v66, v67);
    DgnString::~DgnString((DgnString *)v74);
    DgnString::~DgnString((DgnString *)v75);
    goto LABEL_75;
  }
  uint64_t v58 = DFile::openDFile((uint64_t)&v82, 0, 9, (uint64_t)v76);
  if (v44) {
    goto LABEL_72;
  }
LABEL_70:
  SetObject = 0;
LABEL_75:
  uint64_t v68 = (ModelMgr *)ModelMgr::smpModelMgr;
  if (a6 >= 2) {
    throwBadSdapiArgument("SDBool", (int)a6, v52, v53, v54, v55, v56, v57);
  }
  if (a7 >= 2) {
    throwBadSdapiArgument("SDBool", (int)a7, v52, v53, v54, v55, v56, v57);
  }
  uint64_t Voc = ModelMgr::loadVoc(v68, (char **)v51, (DFile *)v58, SetObject, a3, a6 == 1, a7 == 1, (ProgressCallbackHandler *)&v78);
  DFileOwner::~DFileOwner((DFileOwner *)v76, v70);
  DFileOwner::~DFileOwner((DFileOwner *)v77, v71);
  ProgressCallbackHandler::~ProgressCallbackHandler((ProgressCallbackHandler *)&v78);
  FileSpec::~FileSpec((FileSpec *)&v82);
  FileSpec::~FileSpec((FileSpec *)&v84);
LABEL_81:
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v86);
  return Voc;
}

void sub_213F92EB0()
{
}

uint64_t SDVoc_Save(unint64_t a1, FileSpec *a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = SdapiInsurance::SdapiInsurance(v55, "SDVoc_Save", 1, 0, 380);
  if (v55[97])
  {
    if (!a2) {
      throwBadStringPointer(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    LOBYTE(v49) = 0;
    if (gbShowCalls | gbShowCallsWithFileSpecArgs)
    {
      DgnString::DgnString((DgnString *)&v53);
      DgnString::DgnString((DgnString *)&v49);
      FileSpec::getDiagnosticMaskedName(a2, (DgnString *)&v49, v18);
      DgnString::preAllocate((unint64_t)&v53, 96);
      if (v50) {
        uint64_t v19 = v49;
      }
      else {
        uint64_t v19 = (char *)&unk_2140A698A;
      }
      DgnString::formatStringInPlace((DgnString *)&v53, v19);
      DgnString::~DgnString((DgnString *)&v49);
      if (v54) {
        uint64_t v24 = v53;
      }
      else {
        uint64_t v24 = &unk_2140A698A;
      }
      uint64_t v25 = "SD_TRUE";
      if (!a3) {
        uint64_t v25 = "SD_FALSE";
      }
      if (gbShowCallPointerArguments) {
        uint64_t v26 = a4;
      }
      else {
        uint64_t v26 = 0;
      }
      if (gbShowCallPointerArguments) {
        uint64_t v27 = a5;
      }
      else {
        uint64_t v27 = 0;
      }
      xlprintf("Entering sdapi call %.500s(<SDh %lld>, %.500s, %.500s, Masked:0x%016llx, Masked:0x%016llx)\n", v20, v21, v22, v23, "SDVoc_Save", a1, v24, v25, v26, v27);
      DgnString::~DgnString((DgnString *)&v53);
    }
    if (*(unsigned char *)(ApiState::smpApiState + 1)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdvoc.cpp", 351, (uint64_t)"sdapi/sdvoc", 6, (uint64_t)"%s", v16, v17, (char)&errStr_sdapi_sdvoc_E_SAVE_AFTER_ERROR);
    }
    FileSpec::FileSpec((FileSpec *)&v53, (const char *)a2);
    FileSpec::FileSpec((FileSpec *)v52);
    if (HIDWORD(a1) || (a1 & 0xFFFF0000) != 0) {
      throwBadSdapiArgument("SDhVoc", a1, v28, v29, v30, v31, v32, v33);
    }
    if ((unsigned __int16)a1 - 1 >= 0x7B) {
      throwBadSdapiArgument("SDhVoc", a1, v28, v29, v30, v31, v32, v33);
    }
    if (*(void *)(ModelMgr::getVocOrThrow((ModelMgr *)ModelMgr::smpModelMgr, (unsigned __int16)a1, v28, v29, v30, v31, v32, v33)+ 136))errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdvoc.cpp", 358, (uint64_t)"sdapi/sdvoc", 22, (uint64_t)"%s", v34, v35, (char)&errStr_sdapi_sdvoc_E_VOC_UNLOADEDLM); {
    v51[0] = a4;
    }
    v51[1] = a5;
    ProgressCallbackHandler::ProgressCallbackHandler((ProgressCallbackHandler *)&v49, (void (*)(unsigned int, const void *))ProgressCallbackWrapper, v51);
    int v48 = 0;
    DgnString::DgnString((DgnString *)&v46);
    BOOL v42 = (ModelMgr *)ModelMgr::smpModelMgr;
    if (a3 >= 2) {
      throwBadSdapiArgument("SDBool", (int)a3, v36, v37, v38, v39, v40, v41);
    }
    ModelMgr::saveVoc(v42, (unsigned __int16)a1, (uint64_t)&v53, v52, &v48, 2, (DFileChecksums *)(a3 == 1), (ProgressCallbackHandler *)&v49, 0, 0);
    if (v48 == 2)
    {
      uint64_t v43 = 3;
    }
    else if (v48)
    {
      uint64_t v43 = 2;
    }
    else
    {
      uint64_t v43 = 1;
    }
    if (v47) {
      BOOL v44 = v46;
    }
    else {
      BOOL v44 = (char *)&unk_2140A698A;
    }
    ApiState::setLastResultCodeString((ApiState *)ApiState::smpApiState, v44);
    DgnString::~DgnString((DgnString *)&v46);
    ProgressCallbackHandler::~ProgressCallbackHandler((ProgressCallbackHandler *)&v49);
    FileSpec::~FileSpec((FileSpec *)v52);
    FileSpec::~FileSpec((FileSpec *)&v53);
  }
  else
  {
    uint64_t v43 = 0;
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v55);
  return v43;
}

void sub_213F932F0()
{
}

void SDVoc_Delete(unint64_t a1)
{
  SdapiInsurance::SdapiInsurance(v19, "SDVoc_Delete", 1, 0, 381);
  if (v19[97])
  {
    if (gbShowCalls) {
      xlprintf("Entering sdapi call %.500s(<SDh %lld>)\n", v2, v3, v4, v5, "SDVoc_Delete", a1);
    }
    if (HIDWORD(a1) || (a1 & 0xFFFF0000) != 0) {
      throwBadSdapiArgument("SDhVoc", a1, v3, v4, v5, v6, v7, v8);
    }
    if ((unsigned __int16)a1 - 1 >= 0x7B) {
      throwBadSdapiArgument("SDhVoc", a1, v3, v4, v5, v6, v7, v8);
    }
    uint64_t v9 = (ModelMgr *)ModelMgr::smpModelMgr;
    uint64_t VocOrThrow = ModelMgr::getVocOrThrow((ModelMgr *)ModelMgr::smpModelMgr, (unsigned __int16)a1, v3, v4, v5, v6, v7, v8);
    if (*(void *)(VocOrThrow + 136)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdvoc.cpp", 401, (uint64_t)"sdapi/sdvoc", 22, (uint64_t)"%s", v10, v11, (char)&errStr_sdapi_sdvoc_E_VOC_UNLOADEDLM);
    }
    if (*(_DWORD *)(VocOrThrow + 248)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdvoc.cpp", 404, (uint64_t)"sdapi/sdvoc", 3, (uint64_t)"%u", v10, v11, a1);
    }
    if ((*(unsigned int (**)(void))(**(void **)(VocOrThrow + 72) + 192))(*(void *)(VocOrThrow + 72))) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdvoc.cpp", 407, (uint64_t)"sdapi/sdvoc", 4, (uint64_t)"%u", v17, v18, a1);
    }
    ModelMgr::freeVoc(v9, (unsigned __int16)a1, v13, v14, v15, v16, v17, v18);
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v19);
}

void sub_213F934BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2 == 2)
  {
    uint64_t v12 = (ApiState *)__cxa_begin_catch(a1);
    ApiState::handleDgnException(v12, v13);
  }
  else
  {
    if (a2 != 1)
    {
      SdapiInsurance::~SdapiInsurance((SdapiInsurance *)&a11);
      _Unwind_Resume(a1);
    }
    uint64_t v14 = __cxa_begin_catch(a1);
    ApiState::handleDgnMemoryException((uint64_t)v14);
  }
  __cxa_end_catch();
  JUMPOUT(0x213F934A0);
}

void SDVoc_GetInfo(unint64_t a1, uint64_t a2)
{
  SdapiInsurance::SdapiInsurance(v19, "SDVoc_GetInfo", 1, 1, 382);
  if (v19[97])
  {
    if (gbShowCalls)
    {
      if (gbShowCallPointerArguments) {
        uint64_t v11 = a2;
      }
      else {
        uint64_t v11 = 0;
      }
      xlprintf("Entering sdapi call %.500s(<SDh %lld>, Masked:0x%016llx)\n", v4, v5, v6, v7, "SDVoc_GetInfo", a1, v11);
    }
    if (!a2) {
      throwBadLengthForNullPointer(1, "DgnVerifyWritePtr", v5, v6, v7, v8, v9, v10);
    }
    uint64_t v12 = (ModelMgr *)ModelMgr::smpModelMgr;
    if (HIDWORD(a1) || (a1 & 0xFFFF0000) != 0) {
      throwBadSdapiArgument("SDhVoc", a1, v5, v6, v7, v8, v9, v10);
    }
    if ((unsigned __int16)a1 - 1 >= 0x7B) {
      throwBadSdapiArgument("SDhVoc", a1, v5, v6, v7, v8, v9, v10);
    }
    uint64_t VocOrThrow = ModelMgr::getVocOrThrow(v12, (unsigned __int16)a1, v5, v6, v7, v8, v9, v10);
    uint64_t v14 = *(WordList **)(VocOrThrow + 48);
    uint64_t v16 = *(void *)(VocOrThrow + 64);
    uint64_t v15 = *(void *)(VocOrThrow + 72);
    *(_DWORD *)a2 = *((_DWORD *)v14 + 96);
    *(_DWORD *)(a2 + 4) = WordList::getValidIdCount(v14);
    *(_DWORD *)(a2 + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 8) = *(_DWORD *)(v16 + 36);
    uint64_t v17 = 1;
    if (**(_DWORD **)(VocOrThrow + 8)) {
      uint64_t v17 = 2;
    }
    *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v17;
    *(_DWORD *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = *(_DWORD *)(*(void *)(VocOrThrow + 32) + 4);
    *(_DWORD *)(a2 + 2DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 8) = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 568))(v15);
    *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = *(void *)(VocOrThrow + 248);
    *(_DWORD *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = Voc::getVocReferringLatticeRefCount((Voc *)VocOrThrow);
    *(_DWORD *)(a2 + 44) = Voc::getVocReferringPrefilterResultRefCount((Voc *)VocOrThrow);
    *(_DWORD *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = Voc::getVocReferringSausageRefCount((Voc *)VocOrThrow);
    *(_DWORD *)(a2 + 52) = Voc::getVocReferringReproRefCount((Voc *)VocOrThrow);
    *(_DWORD *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 608))(v15);
    BOOL v18 = *(_DWORD *)(VocOrThrow + 128) != -1
       && *(_DWORD *)(DgnSharedMemSet::getSetCacheDir(*(DgnSharedMemSet **)(VocOrThrow + 120)) + 8) < 2u;
    *(_DWORD *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = v18;
    *(_DWORD *)(a2 + 6DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 8) = Voc::canUnloadCachedLM((Voc *)VocOrThrow);
    *(_DWORD *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = *(void *)(VocOrThrow + 136) == 0;
    *(_DWORD *)(a2 + 60) = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 120))(v15);
    *(_DWORD *)(a2 + 76) = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 128))(v15);
    *(_DWORD *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = WordList::getRequiredWordTagsVersion(v14);
    *(_DWORD *)(a2 + 84) = WordList::getOptionalWordTagsVersion(v14);
    *(_DWORD *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 88) = *((_DWORD *)v14 + 138);
    *(_DWORD *)(a2 + 92) = *((_DWORD *)v14 + 129);
    *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 240))(v15);
    *(void *)(a2 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 104) = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 248))(v15);
    *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 112) = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 256))(v15);
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v19);
}

void sub_213F93874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2 == 2)
  {
    uint64_t v14 = (ApiState *)__cxa_begin_catch(a1);
    ApiState::handleDgnException(v14, v15);
  }
  else
  {
    if (a2 != 1)
    {
      SdapiInsurance::~SdapiInsurance((SdapiInsurance *)&a13);
      _Unwind_Resume(a1);
    }
    uint64_t v16 = __cxa_begin_catch(a1);
    ApiState::handleDgnMemoryException((uint64_t)v16);
  }
  __cxa_end_catch();
  JUMPOUT(0x213F93854);
}

void SDVoc_GetWords(unint64_t a1, unint64_t a2, char *a3, char *a4, void *a5, uint64_t a6, unsigned int *a7, void **a8, unsigned int *a9, void (*a10)(unint64_t, unsigned int, unsigned int, void *, unsigned int, void **, unsigned int *), unint64_t a11, _DWORD *a12)
{
  uint64_t v20 = SdapiInsurance::SdapiInsurance(v50, "SDVoc_GetWords", 1, 1, 385);
  if (v50[97])
  {
    if (!a3) {
      throwBadStringPointer(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    LOBYTE(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = 0;
    if (!a4) {
      throwBadStringPointer(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    LOBYTE(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = 0;
    if (gbShowCalls)
    {
      if (gbShowCallPointerArguments) {
        uint64_t v28 = a5;
      }
      else {
        uint64_t v28 = 0;
      }
      if (gbShowCallPointerArguments) {
        uint64_t v29 = a7;
      }
      else {
        uint64_t v29 = 0;
      }
      if (gbShowCallPointerArguments) {
        uint64_t v30 = a8;
      }
      else {
        uint64_t v30 = 0;
      }
      if (gbShowCallPointerArguments) {
        uint64_t v31 = a9;
      }
      else {
        uint64_t v31 = 0;
      }
      uint64_t v32 = a10;
      unint64_t v33 = a11;
      if (!gbShowCallPointerArguments)
      {
        uint64_t v32 = 0;
        unint64_t v33 = 0;
      }
      uint64_t v34 = a12;
      if (!gbShowCallPointerArguments) {
        uint64_t v34 = 0;
      }
      xlprintf("Entering sdapi call %.500s(<SDh %lld>, <SDh %lld>, '%.500s', '%.500s', Masked:0x%016llx, %llu, Masked:0x%016llx, Masked:0x%016llx, Masked:0x%016llx, Masked:0x%016llx, Masked:0x%016llx, Masked:0x%016llx)\n", v21, v22, v23, v24, "SDVoc_GetWords", a1, a2, a3, a4, v28, a6, v29, v30, v31, v32, v33, v34);
    }
    if (!a5 && a6) {
      throwBadLengthForNullPointer(a6, "DgnVerifyWritePtr", v22, v23, v24, v25, v26, v27);
    }
    if (!a7) {
      throwBadLengthForNullPointer(1, "DgnVerifyWritePtr", v22, v23, v24, v25, v26, v27);
    }
    if (!a8) {
      throwBadLengthForNullPointer(1, "DgnVerifyWritePtr", v22, v23, v24, v25, v26, v27);
    }
    if (!a9) {
      throwBadLengthForNullPointer(1, "DgnVerifyWritePtr", v22, v23, v24, v25, v26, v27);
    }
    if (!a12) {
      throwBadLengthForNullPointer(1, "DgnVerifyWritePtr", v22, v23, v24, v25, v26, v27);
    }
    if (a2 == -2)
    {
      LOWORD(a2) = -2;
      goto LABEL_48;
    }
    if (a2 != -1)
    {
      if (HIDWORD(a2) || (a2 & 0xFFFF0000) != 0) {
        throwBadSdapiArgument("SDhColl", a2, v22, v23, v24, v25, v26, v27);
      }
      if ((unsigned __int16)a2 != 0xFFFF && (_WORD)a2)
      {
LABEL_48:
        uint64_t v48 = 0;
        *(void *)uint64_t v49 = 0;
        uint64_t v35 = (ModelMgr *)ModelMgr::smpModelMgr;
        if (HIDWORD(a1) || (a1 & 0xFFFF0000) != 0) {
          throwBadSdapiArgument("SDhVoc", a1, v22, v23, v24, v25, v26, v27);
        }
        if ((unsigned __int16)a1 - 1 >= 0x7B) {
          throwBadSdapiArgument("SDhVoc", a1, v22, v23, v24, v25, v26, v27);
        }
        uint64_t v36 = *(void *)(ModelMgr::getVocOrThrow(v35, (unsigned __int16)a1, v22, v23, v24, v25, v26, v27) + 48);
        unsigned __int8 v47 = 0;
        WordList::getWordsWithPrefix(v36, (unsigned __int16)a2, a3, a4, (uint64_t)&v48, (uint64_t)&v47, v37, v38);
        unsigned int v39 = v49[0];
        if (v49[0] <= a6)
        {
          *a8 = a5;
          *a9 = a6;
          if (!v39)
          {
LABEL_62:
            *a7 = v39;
            *a12 = v47;
            DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v48);
            goto LABEL_63;
          }
        }
        else
        {
          ApiState::callReallocateArrayCallback((ApiState *)ApiState::smpApiState, a10, a11, 8, v49[0], a5, a6, a8, a9);
          if (!*a8 && *a9) {
            throwBadLengthForNullPointer(*a9, "DgnVerifyWritePtr", v40, v41, v42, v43, v44, v45);
          }
          unsigned int v39 = v49[0];
          if (!v49[0]) {
            goto LABEL_62;
          }
        }
        uint64_t v46 = 0;
        do
        {
          *((void *)*a8 + v46) = *(unsigned int *)(v48 + 4 * v46) + 1;
          ++v46;
        }
        while (v39 != v46);
        goto LABEL_62;
      }
      throwBadSdapiArgument("SDhColl", a2, v22, v23, v24, v25, v26, v27);
      if ((_WORD)a2 != 0xFFFF)
      {
        LOWORD(a2) = 0;
        goto LABEL_48;
      }
    }
    if (*a3) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdvoc.cpp", 521, (uint64_t)"sdapi/sdvoc", 12, (uint64_t)"%s", v26, v27, (char)&errStr_sdapi_sdvoc_E_PREFIXNOCOLLATION);
    }
    LOWORD(a2) = -1;
    goto LABEL_48;
  }
LABEL_63:
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v50);
}

void sub_213F93C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28)
{
  if (a2 == 2)
  {
    uint64_t v29 = (ApiState *)__cxa_begin_catch(a1);
    ApiState::handleDgnException(v29, v30);
  }
  else
  {
    if (a2 != 1)
    {
      SdapiInsurance::~SdapiInsurance((SdapiInsurance *)&a28);
      _Unwind_Resume(a1);
    }
    uint64_t v31 = __cxa_begin_catch(a1);
    ApiState::handleDgnMemoryException((uint64_t)v31);
  }
  __cxa_end_catch();
  JUMPOUT(0x213F93C34);
}

uint64_t SDVoc_GetAllowedWordCollations(unint64_t a1, uint64_t a2, unsigned int a3)
{
  SdapiInsurance::SdapiInsurance(v21, "SDVoc_GetAllowedWordCollations", 1, 1, 386);
  if (v21[97])
  {
    if (gbShowCalls)
    {
      if (gbShowCallPointerArguments) {
        uint64_t v13 = a2;
      }
      else {
        uint64_t v13 = 0;
      }
      xlprintf("Entering sdapi call %.500s(<SDh %lld>, Masked:0x%016llx, %llu)\n", v6, v7, v8, v9, "SDVoc_GetAllowedWordCollations", a1, v13, a3);
    }
    if (!a2 && a3) {
      throwBadLengthForNullPointer(a3, "DgnVerifyWritePtr", v7, v8, v9, v10, v11, v12);
    }
    uint64_t v14 = (ModelMgr *)ModelMgr::smpModelMgr;
    if (HIDWORD(a1) || (a1 & 0xFFFF0000) != 0) {
      throwBadSdapiArgument("SDhVoc", a1, v7, v8, v9, v10, v11, v12);
    }
    if ((unsigned __int16)a1 - 1 >= 0x7B) {
      throwBadSdapiArgument("SDhVoc", a1, v7, v8, v9, v10, v11, v12);
    }
    uint64_t VocOrThrow = ModelMgr::getVocOrThrow(v14, (unsigned __int16)a1, v7, v8, v9, v10, v11, v12);
    uint64_t Colls = WordList::getColls(*(WordList **)(VocOrThrow + 48));
    uint64_t v17 = *(unsigned int *)(Colls + 8);
    if (a3)
    {
      uint64_t v18 = 0;
      do
      {
        if (v17 == v18) {
          break;
        }
        uint64_t v19 = *(unsigned __int16 *)(*(void *)Colls + 2 * v18);
        if ((unsigned __int16)(v19 + 1) >= 2u)
        {
          if (v19 == 65534) {
            uint64_t v19 = -2;
          }
        }
        else
        {
          uint64_t v19 = -1;
        }
        *(void *)(a2 + 8 * v18++) = v19;
      }
      while (a3 != v18);
    }
  }
  else
  {
    uint64_t v17 = 0;
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v21);
  return v17;
}

void sub_213F93E88()
{
}

void SDVoc_SetAllowedWordCollations(unint64_t a1, uint64_t a2, unsigned int a3)
{
  SdapiInsurance::SdapiInsurance(v23, "SDVoc_SetAllowedWordCollations", 1, 0, 387);
  if (!v23[97]) {
    goto LABEL_36;
  }
  if (gbShowCalls)
  {
    if (gbShowCallPointerArguments) {
      uint64_t v13 = a2;
    }
    else {
      uint64_t v13 = 0;
    }
    xlprintf("Entering sdapi call %.500s(<SDh %lld>, Masked:0x%016llx, %llu)\n", v6, v7, v8, v9, "SDVoc_SetAllowedWordCollations", a1, v13, a3);
  }
  if (!a2 && a3)
  {
    throwBadLengthForNullPointer(a3, "DgnVerifyReadPtr", v7, v8, v9, v10, v11, v12);
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    goto LABEL_11;
  }
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  if (a3)
  {
LABEL_11:
    uint64_t v24 = 0;
    unint64_t v14 = realloc_array(0, &v24, 2 * a3, 0, 0, 1);
    uint64_t v15 = 0;
    uint64_t v21 = v24;
    LODWORD(v22) = a3;
    HIDWORD(v22) = v14 >> 1;
    do
    {
      unint64_t v16 = *(void *)(a2 + 8 * v15);
      if (v16 == -1)
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdvoc.cpp", 586, (uint64_t)"sdapi/sdvoc", 9, (uint64_t)"%s", v11, v12, (char)&errStr_sdapi_sdvoc_E_SETCOLL_WITH_NONE);
        unint64_t v16 = *(void *)(a2 + 8 * v15);
      }
      if (v16 == -1)
      {
        LOWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = -1;
      }
      else if (v16 == -2)
      {
        LOWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = -2;
      }
      else
      {
        if (HIDWORD(v16)) {
          BOOL v17 = 0;
        }
        else {
          BOOL v17 = (v16 & 0xFFFF0000) == 0;
        }
        if (!v17) {
          throwBadSdapiArgument("SDhColl", v16, v7, v8, v9, v10, v11, v12);
        }
        if ((unsigned __int16)v16 == 0xFFFF || (unsigned __int16)v16 == 0) {
          throwBadSdapiArgument("SDhColl", v16, v7, v8, v9, v10, v11, v12);
        }
      }
      v21[v15++] = v16;
    }
    while (a3 != v15);
    goto LABEL_30;
  }
  LODWORD(v22) = 0;
LABEL_30:
  uint64_t v19 = (ModelMgr *)ModelMgr::smpModelMgr;
  if (HIDWORD(a1) || (a1 & 0xFFFF0000) != 0) {
    throwBadSdapiArgument("SDhVoc", a1, v7, v8, v9, v10, v11, v12);
  }
  if ((unsigned __int16)a1 - 1 >= 0x7B) {
    throwBadSdapiArgument("SDhVoc", a1, v7, v8, v9, v10, v11, v12);
  }
  uint64_t VocOrThrow = ModelMgr::getVocOrThrow(v19, (unsigned __int16)a1, v7, v8, v9, v10, v11, v12);
  WordList::setColls(*(void *)(VocOrThrow + 48), (uint64_t)&v21);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v21);
LABEL_36:
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v23);
}

void sub_213F94120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  if (a2 == 2)
  {
    uint64_t v18 = (ApiState *)__cxa_begin_catch(a1);
    ApiState::handleDgnException(v18, v19);
  }
  else
  {
    if (a2 != 1)
    {
      SdapiInsurance::~SdapiInsurance((SdapiInsurance *)&a17);
      _Unwind_Resume(a1);
    }
    uint64_t v20 = __cxa_begin_catch(a1);
    ApiState::handleDgnMemoryException((uint64_t)v20);
  }
  __cxa_end_catch();
  JUMPOUT(0x213F940F0);
}

uint64_t SDVoc_GetCollationName(unint64_t a1, unint64_t a2, char *a3, unsigned int a4)
{
  SdapiInsurance::SdapiInsurance(v27, "SDVoc_GetCollationName", 1, 1, 389);
  if (v27[97])
  {
    if (gbShowCalls)
    {
      if (gbShowCallPointerArguments) {
        uint64_t v15 = a3;
      }
      else {
        uint64_t v15 = 0;
      }
      xlprintf("Entering sdapi call %.500s(<SDh %lld>, <SDh %lld>, Masked:0x%016llx, %llu)\n", v8, v9, v10, v11, "SDVoc_GetCollationName", a1, a2, v15, a4);
    }
    if (!a3 && a4) {
      throwBadLengthForNullPointer(a4, "DgnVerifyWritePtr", v9, v10, v11, v12, v13, v14);
    }
    unint64_t v16 = (ModelMgr *)ModelMgr::smpModelMgr;
    if (HIDWORD(a1) || (a1 & 0xFFFF0000) != 0) {
      throwBadSdapiArgument("SDhVoc", a1, v9, v10, v11, v12, v13, v14);
    }
    if ((unsigned __int16)a1 - 1 >= 0x7B) {
      throwBadSdapiArgument("SDhVoc", a1, v9, v10, v11, v12, v13, v14);
    }
    uint64_t v23 = *(CollMgr **)(ModelMgr::getVocOrThrow(v16, (unsigned __int16)a1, v9, v10, v11, v12, v13, v14) + 16);
    if (a2 == -1)
    {
      LOWORD(a2) = -1;
    }
    else if (a2 == -2)
    {
      LOWORD(a2) = -2;
    }
    else
    {
      if (HIDWORD(a2) || (a2 & 0xFFFF0000) != 0) {
        throwBadSdapiArgument("SDhColl", a2, v17, v18, v19, v20, v21, v22);
      }
      if ((unsigned __int16)a2 == 0xFFFF || !(_WORD)a2) {
        throwBadSdapiArgument("SDhColl", a2, v17, v18, v19, v20, v21, v22);
      }
    }
    CollationName = (const char *)CollMgr::getCollationName(v23, (unsigned __int16)a2, v17, v18, v19, v20, v21, v22);
    uint64_t v25 = sdUtilStrMove(a3, a4, CollationName);
  }
  else
  {
    uint64_t v25 = 0;
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v27);
  return v25;
}

void sub_213F94384()
{
}

uint64_t SDVoc_GetColls(unint64_t a1, void *a2, unsigned int a3)
{
  SdapiInsurance::SdapiInsurance(v30, "SDVoc_GetColls", 1, 1, 390);
  if (!v30[97])
  {
    uint64_t v26 = 0;
    goto LABEL_31;
  }
  if (gbShowCalls)
  {
    if (gbShowCallPointerArguments) {
      uint64_t v13 = a2;
    }
    else {
      uint64_t v13 = 0;
    }
    xlprintf("Entering sdapi call %.500s(<SDh %lld>, Masked:0x%016llx, %llu)\n", v6, v7, v8, v9, "SDVoc_GetColls", a1, v13, a3);
  }
  if (!a2 && a3) {
    throwBadLengthForNullPointer(a3, "DgnVerifyWritePtr", v7, v8, v9, v10, v11, v12);
  }
  uint64_t v14 = (ModelMgr *)ModelMgr::smpModelMgr;
  if (HIDWORD(a1) || (a1 & 0xFFFF0000) != 0) {
    throwBadSdapiArgument("SDhVoc", a1, v7, v8, v9, v10, v11, v12);
  }
  if ((unsigned __int16)a1 - 1 >= 0x7B) {
    throwBadSdapiArgument("SDhVoc", a1, v7, v8, v9, v10, v11, v12);
  }
  uint64_t VocOrThrow = ModelMgr::getVocOrThrow(v14, (unsigned __int16)a1, v7, v8, v9, v10, v11, v12);
  uint64_t ActiveCollations = CollMgr::getActiveCollations(*(CollMgr **)(VocOrThrow + 16));
  uint64_t v28 = 0;
  *(void *)uint64_t v29 = 0;
  uint64_t v17 = *(unsigned int *)(ActiveCollations + 8);
  if (v17)
  {
    uint64_t v31 = 0;
    v29[1] = realloc_array(0, &v31, 8 * v17, 0, 0, 1) >> 3;
    uint64_t v18 = v31;
    uint64_t v28 = v31;
    unint64_t v19 = *(unsigned int *)(ActiveCollations + 8);
    if (v19)
    {
      for (unint64_t i = 0; i < v19; ++i)
      {
        uint64_t v21 = *(unsigned __int16 *)(*(void *)ActiveCollations + 2 * i);
        unsigned int v22 = (unsigned __int16)(v21 + 1);
        if (v21 == 65534) {
          uint64_t v21 = -2;
        }
        if (v22 >= 2) {
          uint64_t v23 = v21;
        }
        else {
          uint64_t v23 = -1;
        }
        unsigned int v24 = v29[0];
        if (v29[0] == v29[1])
        {
          DgnPrimArray<unsigned long long>::reallocElts((uint64_t)&v28, 1, 1);
          unsigned int v24 = v29[0];
          unint64_t v19 = *(unsigned int *)(ActiveCollations + 8);
        }
        v28[v24] = v23;
        uint64_t v25 = v24 + 1;
        v29[0] = v24 + 1;
      }
      uint64_t v18 = v28;
      goto LABEL_29;
    }
  }
  else
  {
    uint64_t v18 = 0;
  }
  uint64_t v25 = v29[0];
LABEL_29:
  uint64_t v26 = sdUtilItemMove(8, v18, v25, a2, a3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v28);
LABEL_31:
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v30);
  return v26;
}

void sub_213F94618()
{
}

void MrecInitModule_wordlm_lm(void)
{
  if (!gParDebugShowClonedLmIdsOnLoad)
  {
    uint64_t v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugShowClonedLmIdsOnLoad", (const char *)&unk_2140A6A10, (const char *)&unk_2140A6A10, 0, 0, 0);
    *char v1 = &unk_26C4E0858;
    gParDebugShowClonedLmIdsOnLoad = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowClonedLmIdsOnLoad);
  }
  if (!gParDebugShowLMInfoOnLoad)
  {
    uint64_t v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "DebugShowLMInfoOnLoad", (const char *)&unk_2140A6A10, (const char *)&unk_2140A6A10, 0, 0, 0);
    void *v3 = &unk_26C4E0858;
    gParDebugShowLMInfoOnLoad = (uint64_t)v3;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowLMInfoOnLoad);
  }
  if (!gParDebugShowLMOnLoad)
  {
    uint64_t v4 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v4, "DebugShowLMOnLoad", (const char *)&unk_2140A6A10, (const char *)&unk_2140A6A10, 0, 0, 0);
    *uint64_t v5 = &unk_26C4E0858;
    gParDebugShowLMOnLoad = (uint64_t)v5;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowLMOnLoad);
  }
  if (!gParDebugShowWordLMDistributionOnLoad)
  {
    uint64_t v6 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v6, "DebugShowWordLMDistributionOnLoad", (const char *)&unk_2140A6A10, (const char *)&unk_2140A6A10, 0, 0, 0);
    *uint64_t v7 = &unk_26C4E0858;
    gParDebugShowWordLMDistributionOnLoad = (uint64_t)v7;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowWordLMDistributionOnLoad);
  }
  if (!gParDebugLMScoring)
  {
    uint64_t v8 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v8, "DebugLMScoring", (const char *)&unk_2140A6A10, (const char *)&unk_2140A6A10, 0, 0, 0);
    *uint64_t v9 = &unk_26C4E0858;
    gParDebugLMScoring = (uint64_t)v9;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugLMScoring);
  }
  if (!gParDebugLMAddDelete)
  {
    uint64_t v10 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v10, "DebugLMAddDelete", (const char *)&unk_2140A6A10, (const char *)&unk_2140A6A10, 0, 0, 0);
    *uint64_t v11 = &unk_26C4E0858;
    gParDebugLMAddDelete = (uint64_t)v11;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugLMAddDelete);
  }
  if (!gParDebugCopyLM)
  {
    uint64_t v12 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v12, "DebugCopyLM", (const char *)&unk_2140A6A10, (const char *)&unk_2140A6A10, 0, 0, 0);
    *uint64_t v13 = &unk_26C4E0858;
    gParDebugCopyLM = (uint64_t)v13;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugCopyLM);
  }
  if (!gParDebugWordLMBuild)
  {
    uint64_t v14 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v14, "DebugWordLMBuild", (const char *)&unk_2140A6A10, (const char *)&unk_2140A6A10, 0, 0, 0);
    *uint64_t v15 = &unk_26C4E0858;
    gParDebugWordLMBuild = (uint64_t)v15;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugWordLMBuild);
  }
  if (!gParDebugWordLMStaticization)
  {
    unint64_t v16 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v16, "DebugWordLMStaticization", (const char *)&unk_2140A6A10, (const char *)&unk_2140A6A10, 0, 0, 0);
    *uint64_t v17 = &unk_26C4E0858;
    gParDebugWordLMStaticizatiouint64_t n = (uint64_t)v17;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugWordLMStaticization);
  }
  if (!gParDebugWordLMBuildShowContextProbs)
  {
    uint64_t v18 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v18, "DebugWordLMBuildShowContextProbs", (const char *)&unk_2140A6A10, (const char *)&unk_2140A6A10, 0, 0, 0);
    *unint64_t v19 = &unk_26C4E0858;
    gParDebugWordLMBuildShowContextProbs = (uint64_t)v19;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugWordLMBuildShowContextProbs);
  }
  if (!gParDebugWordLMDynamicLoad)
  {
    uint64_t v20 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v20, "DebugWordLMDynamicLoad", (const char *)&unk_2140A6A10, (const char *)&unk_2140A6A10, 0, 0, 0);
    void *v21 = &unk_26C4E0858;
    gParDebugWordLMDynamicLoad = (uint64_t)v21;
    unsigned int v22 = (uint64_t *)GlobalParamMgr::smpGlobalParamMgr;
    GlobalParamMgr::addParam(v22, (GlobalParam **)&gParDebugWordLMDynamicLoad);
  }
}

uint64_t DiskNgramContextBiTriIsolatedCmp::compareElements(DiskNgramContextBiTriIsolatedCmp *this, void *a2, void *a3, const void *a4)
{
  uint64_t v4 = a2[1];
  double v5 = 0.0;
  double v6 = 0.0;
  if (v4) {
    double v6 = *(float *)a2 / (double)v4;
  }
  uint64_t v7 = a3[1];
  if (v7) {
    double v5 = *(float *)a3 / (double)v7;
  }
  if (v6 > v5) {
    return 0xFFFFFFFFLL;
  }
  double v9 = 0.0;
  double v10 = 0.0;
  if (v4) {
    double v10 = *(float *)a2 / (double)v4;
  }
  if (v7) {
    double v9 = *(float *)a3 / (double)v7;
  }
  if (v10 < v9) {
    return 1;
  }
  int v11 = *((unsigned __int8 *)a2 + 34);
  if (v11 == 3)
  {
    uint64_t result = 1;
    if (*((unsigned char *)a3 + 34) == 2) {
      return result;
    }
  }
  else
  {
    if (v11 == 2 && *((unsigned char *)a3 + 34) == 3) {
      return 0xFFFFFFFFLL;
    }
    LODWORD(result) = 0;
  }
  unsigned int v12 = *((_DWORD *)a2 + 6);
  unsigned int v13 = *((_DWORD *)a3 + 6);
  if (v12 < v13) {
    return 0xFFFFFFFFLL;
  }
  if (v12 > v13) {
    return 1;
  }
  if (result)
  {
    unsigned int v14 = *((_DWORD *)a2 + 7);
    unsigned int v15 = *((_DWORD *)a3 + 7);
    if (v14 >= v15) {
      return v14 > v15;
    }
    return 0xFFFFFFFFLL;
  }
  return 0;
}

uint64_t DiskNgramContextBiTriGroupTrigramsCmp::compareElements(DiskNgramContextBiTriGroupTrigramsCmp *this, float *a2, float *a3, const void *a4)
{
  uint64_t v4 = *((void *)a2 + 2);
  double v5 = 0.0;
  double v6 = 0.0;
  if (v4) {
    double v6 = a2[1] / (double)v4;
  }
  uint64_t v7 = *((void *)a3 + 2);
  if (v7) {
    double v5 = a3[1] / (double)v7;
  }
  if (v6 > v5) {
    return 0xFFFFFFFFLL;
  }
  double v9 = 0.0;
  double v10 = 0.0;
  if (v4) {
    double v10 = a2[1] / (double)v4;
  }
  if (v7) {
    double v9 = a3[1] / (double)v7;
  }
  if (v10 < v9) {
    return 1;
  }
  int v11 = *((unsigned __int8 *)a2 + 34);
  if (v11 == 3)
  {
    uint64_t result = 1;
    if (*((unsigned char *)a3 + 34) == 2) {
      return result;
    }
  }
  else
  {
    if (v11 == 2 && *((unsigned char *)a3 + 34) == 3) {
      return 0xFFFFFFFFLL;
    }
    LODWORD(result) = 0;
  }
  uint64_t v12 = *((void *)a2 + 1);
  double v13 = 0.0;
  double v14 = 0.0;
  if (v12) {
    double v14 = *a2 / (double)v12;
  }
  uint64_t v15 = *((void *)a3 + 1);
  if (v15) {
    double v13 = *a3 / (double)v15;
  }
  if (v14 > v13) {
    return 0xFFFFFFFFLL;
  }
  double v16 = 0.0;
  double v17 = 0.0;
  if (v12) {
    double v17 = *a2 / (double)v12;
  }
  if (v15) {
    double v16 = *a3 / (double)v15;
  }
  if (v17 < v16) {
    return 1;
  }
  unsigned int v18 = *((_DWORD *)a2 + 6);
  unsigned int v19 = *((_DWORD *)a3 + 6);
  if (v18 < v19) {
    return 0xFFFFFFFFLL;
  }
  if (v18 > v19) {
    return 1;
  }
  if (result)
  {
    unsigned int v20 = *((_DWORD *)a2 + 7);
    unsigned int v21 = *((_DWORD *)a3 + 7);
    if (v20 >= v21) {
      return v20 > v21;
    }
    return 0xFFFFFFFFLL;
  }
  return 0;
}

uint64_t DiskNgramContextBiTriGroupTrigramsWithBigramsCmp::compareElements(DiskNgramContextBiTriGroupTrigramsWithBigramsCmp *this, float *a2, float *a3, const void *a4)
{
  uint64_t v4 = *((void *)a2 + 2);
  double v5 = 0.0;
  double v6 = 0.0;
  if (v4) {
    double v6 = a2[1] / (double)v4;
  }
  uint64_t v7 = *((void *)a3 + 2);
  if (v7) {
    double v5 = a3[1] / (double)v7;
  }
  if (v6 > v5) {
    return 0xFFFFFFFFLL;
  }
  double v8 = 0.0;
  double v9 = 0.0;
  if (v4) {
    double v9 = a2[1] / (double)v4;
  }
  if (v7) {
    double v8 = a3[1] / (double)v7;
  }
  if (v9 < v8) {
    return 1;
  }
  unsigned int v10 = *((_DWORD *)a2 + 6);
  unsigned int v11 = *((_DWORD *)a3 + 6);
  if (v10 < v11) {
    return 0xFFFFFFFFLL;
  }
  if (v10 > v11) {
    return 1;
  }
  int v13 = *((unsigned __int8 *)a2 + 34);
  if (v13 == 3)
  {
    uint64_t result = 1;
    if (*((unsigned char *)a3 + 34) == 2) {
      return result;
    }
  }
  else
  {
    if (v13 == 2 && *((unsigned char *)a3 + 34) == 3) {
      return 0xFFFFFFFFLL;
    }
    LODWORD(result) = 0;
  }
  uint64_t v14 = *((void *)a2 + 1);
  double v15 = 0.0;
  double v16 = 0.0;
  if (v14) {
    double v16 = *a2 / (double)v14;
  }
  uint64_t v17 = *((void *)a3 + 1);
  if (v17) {
    double v15 = *a3 / (double)v17;
  }
  if (v16 > v15) {
    return 0xFFFFFFFFLL;
  }
  double v18 = 0.0;
  double v19 = 0.0;
  if (v14) {
    double v19 = *a2 / (double)v14;
  }
  if (v17) {
    double v18 = *a3 / (double)v17;
  }
  if (v19 < v18) {
    return 1;
  }
  if (result)
  {
    unsigned int v20 = *((_DWORD *)a2 + 7);
    unsigned int v21 = *((_DWORD *)a3 + 7);
    if (v20 < v21) {
      return 0xFFFFFFFFLL;
    }
    if (v20 > v21) {
      return 1;
    }
  }
  return 0;
}

uint64_t DiskNgramContextQuadIsolatedCmp::compareElements(DiskNgramContextQuadIsolatedCmp *this, void *a2, void *a3, const void *a4)
{
  uint64_t v4 = a2[1];
  double v5 = 0.0;
  double v6 = 0.0;
  if (v4) {
    double v6 = *(float *)a2 / (double)v4;
  }
  uint64_t v7 = a3[1];
  if (v7) {
    double v5 = *(float *)a3 / (double)v7;
  }
  if (v6 > v5) {
    return 0xFFFFFFFFLL;
  }
  double v8 = 0.0;
  double v9 = 0.0;
  if (v4) {
    double v9 = *(float *)a2 / (double)v4;
  }
  if (v7) {
    double v8 = *(float *)a3 / (double)v7;
  }
  if (v9 < v8) {
    return 1;
  }
  unsigned int v10 = *((_DWORD *)a2 + 6);
  unsigned int v11 = *((_DWORD *)a3 + 6);
  if (v10 < v11) {
    return 0xFFFFFFFFLL;
  }
  if (v10 > v11) {
    return 1;
  }
  unsigned int v13 = *((_DWORD *)a2 + 7);
  unsigned int v14 = *((_DWORD *)a3 + 7);
  BOOL v15 = v13 >= v14;
  BOOL v16 = v13 > v14;
  if (v15) {
    return v16;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t DiskNgramContextQuadGroupCmp::compareElements(DiskNgramContextQuadGroupCmp *this, float *a2, float *a3, const void *a4)
{
  uint64_t v4 = *((void *)a2 + 2);
  double v5 = 0.0;
  double v6 = 0.0;
  if (v4) {
    double v6 = a2[1] / (double)v4;
  }
  uint64_t v7 = *((void *)a3 + 2);
  if (v7) {
    double v5 = a3[1] / (double)v7;
  }
  if (v6 > v5) {
    return 0xFFFFFFFFLL;
  }
  double v8 = 0.0;
  double v9 = 0.0;
  if (v4) {
    double v9 = a2[1] / (double)v4;
  }
  if (v7) {
    double v8 = a3[1] / (double)v7;
  }
  if (v9 < v8) {
    return 1;
  }
  unsigned int v10 = *((_DWORD *)a2 + 6);
  unsigned int v11 = *((_DWORD *)a3 + 6);
  if (v10 < v11) {
    return 0xFFFFFFFFLL;
  }
  if (v10 > v11) {
    return 1;
  }
  uint64_t v12 = *((void *)a2 + 1);
  double v13 = 0.0;
  double v14 = 0.0;
  if (v12) {
    double v14 = *a2 / (double)v12;
  }
  uint64_t v15 = *((void *)a3 + 1);
  if (v15) {
    double v13 = *a3 / (double)v15;
  }
  if (v14 > v13) {
    return 0xFFFFFFFFLL;
  }
  double v16 = 0.0;
  double v17 = 0.0;
  if (v12) {
    double v17 = *a2 / (double)v12;
  }
  if (v15) {
    double v16 = *a3 / (double)v15;
  }
  if (v17 < v16) {
    return 1;
  }
  unsigned int v19 = *((_DWORD *)a2 + 7);
  unsigned int v20 = *((_DWORD *)a3 + 7);
  if (v19 >= v20) {
    return v19 > v20;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t WordIdAndCountCmp::compareElements(WordIdAndCountCmp *this, unsigned int *a2, unsigned int *a3, const void *a4)
{
  unsigned int v4 = a2[1];
  unsigned int v5 = a3[1];
  if (v4 == v5)
  {
    WordIdWordName = WordLanguageModel::getWordIdWordName(this, *a2);
    double v9 = WordLanguageModel::getWordIdWordName(this, *a3);
    return strcmp(WordIdWordName, v9);
  }
  else if (v4 > v5)
  {
    return 0xFFFFFFFFLL;
  }
  else
  {
    return 1;
  }
}

const char *WordLanguageModel::getWordIdWordName(WordLanguageModel *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 2);
  if (*(_DWORD *)(v2 + 388) > a2 && *(unsigned char *)(*(void *)(v2 + 104) + a2)) {
    return (const char *)(*(void *)(v2 + 224) + *(unsigned int *)(*(void *)(v2 + 200) + 4 * a2));
  }
  if (a2 - 16777212 > 3) {
    return "UNKNOWN";
  }
  return off_2641F6E20[a2 - 16777212];
}

void BigramData::BigramData(BigramData *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  DgnString::DgnString((BigramData *)((char *)this + 24));
  DgnString::DgnString((BigramData *)((char *)this + 40));
  DgnString::DgnString((BigramData *)((char *)this + 56));
  DgnString::DgnString((BigramData *)((char *)this + 72));
  *(void *)this = 0;
  *(_OWORD *)((char *)this + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 104) = 0u;
  *(_OWORD *)((char *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 120) = 0u;
  *(_OWORD *)((char *)this + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 16DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0u;
  *(_OWORD *)((char *)this + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0u;
  *(_OWORD *)((char *)this + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 248) = 0u;
  *((void *)this + 47) = 0;
  *(_OWORD *)((char *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 88) = 0u;
  *(_OWORD *)((char *)this + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 264) = 0u;
  *(_OWORD *)((char *)this + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 280) = 0u;
  *(_OWORD *)((char *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 296) = 0u;
  *(_OWORD *)((char *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 312) = 0u;
  *(_OWORD *)((char *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 328) = 0u;
  *(_OWORD *)((char *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 344) = 0u;
  *(_OWORD *)((char *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 360) = 0u;
}

void sub_213F952A8(_Unwind_Exception *a1)
{
  BitArray::~BitArray(v4);
  BitArray::~BitArray(v3);
  BitArray::~BitArray(v2);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1);
  _Unwind_Resume(a1);
}

void BigramData::~BigramData(BigramData *this)
{
}

void **BigramData::compact(void **this)
{
  BitArray::compact((BitArray *)(this + 3));
  BitArray::compact((BitArray *)(this + 5));
  BitArray::compact((BitArray *)(this + 9));
  BitArray::compact((BitArray *)(this + 7));
  DgnPrimArray<unsigned int>::compact((unint64_t)(this + 22));
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 24));
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 26));
  DgnPrimArray<unsigned char>::compact(this + 28);
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 30));
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 32));
  DgnPrimArray<unsigned char>::compact(this + 34);
  DgnPrimArray<unsigned int>::compact((unint64_t)(this + 36));
  DgnPrimArray<unsigned int>::compact((unint64_t)(this + 38));
  DgnPrimArray<unsigned int>::compact((unint64_t)(this + 40));
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 42));
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 44));

  return DgnPrimArray<unsigned char>::compact(this + 46);
}

uint64_t BigramData::bi1SetEmpty(uint64_t this, unsigned int a2)
{
  uint64_t v2 = a2 >> 5;
  *(_DWORD *)(*(void *)(this + 24) + 4 * v2) &= ~(1 << a2);
  if (*(_DWORD *)this)
  {
    int v3 = ~(1 << a2);
    *(_DWORD *)(*(void *)(this + 40) + 4 * v2) &= v3;
    *(_DWORD *)(*(void *)(this + 56) + 4 * v2) &= v3;
    if (*(_DWORD *)(this + 96)) {
      *(_DWORD *)(*(void *)(this + 72) + 4 * v2) &= v3;
    }
  }
  *(_DWORD *)(*(void *)(this + 176) + 4 * a2) = -1;
  *(_WORD *)(*(void *)(this + 192) + 2 * a2) = 0;
  return this;
}

void BigramData::printSize(BigramData *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 840, (DgnString *)&v226);
  if (v227) {
    double v16 = v226;
  }
  else {
    double v16 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_2140A6A10, a3, &unk_2140A6A10, v16);
  DgnString::~DgnString((DgnString *)&v226);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_2140A6A10);
  uint64_t v21 = (a3 + 1);
  uint64_t v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 843, (DgnString *)&v226);
  if (v227) {
    uint64_t v27 = v226;
  }
  else {
    uint64_t v27 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_2140A6A10, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v226);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 843, (DgnString *)&v226);
  if (v227) {
    uint64_t v32 = v226;
  }
  else {
    uint64_t v32 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_2140A6A10, (34 - a3), (34 - a3), v32, 4, 4, 0);
  uint64_t v225 = a3;
  DgnString::~DgnString((DgnString *)&v226);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v33 = 12;
  }
  else {
    uint64_t v33 = 16;
  }
  uint64_t v34 = *((unsigned int *)this + 4);
  unsigned int v35 = *((_DWORD *)this + 5);
  if (v35 >= v34)
  {
    uint64_t v36 = 0;
    if ((int)v34 > 0) {
      uint64_t v33 = (v33 | 2) + 2 * (v34 - 1);
    }
    uint64_t v37 = v33 + 2 * (v35 - v34);
  }
  else
  {
    uint64_t v36 = 2 * v34;
    uint64_t v37 = v33;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 843, (DgnString *)&v226);
  if (v227) {
    uint64_t v42 = v226;
  }
  else {
    uint64_t v42 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, v21, &unk_2140A6A10, v22, v22, v42, v37, v33, v36);
  DgnString::~DgnString((DgnString *)&v226);
  *a4 += v37;
  *a5 += v33;
  *a6 += v36;
  uint64_t v43 = BitArray::sizeObject((uint64_t)this + 24, 0);
  uint64_t v44 = BitArray::sizeObject((uint64_t)this + 24, 1);
  uint64_t v45 = BitArray::sizeObject((uint64_t)this + 24, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 843, (DgnString *)&v226);
  if (v227) {
    int v50 = v226;
  }
  else {
    int v50 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v46, v47, v48, v49, v21, &unk_2140A6A10, v22, v22, v50, v43, v44, v45);
  DgnString::~DgnString((DgnString *)&v226);
  *a4 += v43;
  *a5 += v44;
  *a6 += v45;
  uint64_t v51 = BitArray::sizeObject((uint64_t)this + 40, 0);
  uint64_t v52 = BitArray::sizeObject((uint64_t)this + 40, 1);
  uint64_t v53 = BitArray::sizeObject((uint64_t)this + 40, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 843, (DgnString *)&v226);
  if (v227) {
    uint64_t v58 = v226;
  }
  else {
    uint64_t v58 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v54, v55, v56, v57, v21, &unk_2140A6A10, v22, v22, v58, v51, v52, v53);
  DgnString::~DgnString((DgnString *)&v226);
  *a4 += v51;
  *a5 += v52;
  *a6 += v53;
  uint64_t v59 = BitArray::sizeObject((uint64_t)this + 56, 0);
  uint64_t v60 = BitArray::sizeObject((uint64_t)this + 56, 1);
  uint64_t v61 = BitArray::sizeObject((uint64_t)this + 56, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 843, (DgnString *)&v226);
  if (v227) {
    uint64_t v66 = v226;
  }
  else {
    uint64_t v66 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v62, v63, v64, v65, v21, &unk_2140A6A10, v22, v22, v66, v59, v60, v61);
  DgnString::~DgnString((DgnString *)&v226);
  *a4 += v59;
  *a5 += v60;
  *a6 += v61;
  uint64_t v67 = BitArray::sizeObject((uint64_t)this + 72, 0);
  uint64_t v68 = BitArray::sizeObject((uint64_t)this + 72, 1);
  uint64_t v69 = BitArray::sizeObject((uint64_t)this + 72, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 843, (DgnString *)&v226);
  if (v227) {
    uint64_t v74 = v226;
  }
  else {
    uint64_t v74 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v70, v71, v72, v73, v21, &unk_2140A6A10, v22, v22, v74, v67, v68, v69);
  DgnString::~DgnString((DgnString *)&v226);
  *a4 += v67;
  *a5 += v68;
  *a6 += v69;
  uint64_t v75 = HuffmanDecoder<unsigned short,unsigned int>::sizeObject((uint64_t)this + 88, 0);
  uint64_t v76 = HuffmanDecoder<unsigned short,unsigned int>::sizeObject((uint64_t)this + 88, 1);
  uint64_t v77 = HuffmanDecoder<unsigned short,unsigned int>::sizeObject((uint64_t)this + 88, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 843, (DgnString *)&v226);
  if (v227) {
    uint64_t v82 = v226;
  }
  else {
    uint64_t v82 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, v21, &unk_2140A6A10, v22, v22, v82, v75, v76, v77);
  DgnString::~DgnString((DgnString *)&v226);
  *a4 += v75;
  *a5 += v76;
  *a6 += v77;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v83 = 12;
  }
  else {
    uint64_t v83 = 16;
  }
  uint64_t v84 = *((unsigned int *)this + 46);
  unsigned int v85 = *((_DWORD *)this + 47);
  if (v85 >= v84)
  {
    uint64_t v86 = 0;
    if ((int)v84 > 0) {
      v83 += 4 * (v84 - 1) + 4;
    }
    uint64_t v87 = v83 + 4 * (v85 - v84);
  }
  else
  {
    uint64_t v86 = 4 * v84;
    uint64_t v87 = v83;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 843, (DgnString *)&v226);
  if (v227) {
    long long v92 = v226;
  }
  else {
    long long v92 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, v21, &unk_2140A6A10, v22, v22, v92, v87, v83, v86);
  DgnString::~DgnString((DgnString *)&v226);
  *a4 += v87;
  *a5 += v83;
  *a6 += v86;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v93 = 12;
  }
  else {
    uint64_t v93 = 16;
  }
  uint64_t v94 = *((unsigned int *)this + 50);
  unsigned int v95 = *((_DWORD *)this + 51);
  if (v95 >= v94)
  {
    uint64_t v96 = 0;
    if ((int)v94 > 0) {
      uint64_t v93 = (v93 | 2) + 2 * (v94 - 1);
    }
    uint64_t v97 = v93 + 2 * (v95 - v94);
  }
  else
  {
    uint64_t v96 = 2 * v94;
    uint64_t v97 = v93;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 843, (DgnString *)&v226);
  if (v227) {
    uint64_t v102 = v226;
  }
  else {
    uint64_t v102 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v98, v99, v100, v101, v21, &unk_2140A6A10, v22, v22, v102, v97, v93, v96);
  DgnString::~DgnString((DgnString *)&v226);
  *a4 += v97;
  *a5 += v93;
  *a6 += v96;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v103 = 12;
  }
  else {
    uint64_t v103 = 16;
  }
  uint64_t v104 = *((unsigned int *)this + 54);
  unsigned int v105 = *((_DWORD *)this + 55);
  if (v105 >= v104)
  {
    uint64_t v106 = 0;
    if ((int)v104 > 0) {
      uint64_t v103 = (v103 | 2) + 2 * (v104 - 1);
    }
    uint64_t v107 = v103 + 2 * (v105 - v104);
  }
  else
  {
    uint64_t v106 = 2 * v104;
    uint64_t v107 = v103;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 843, (DgnString *)&v226);
  if (v227) {
    int v112 = v226;
  }
  else {
    int v112 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v108, v109, v110, v111, v21, &unk_2140A6A10, v22, v22, v112, v107, v103, v106);
  DgnString::~DgnString((DgnString *)&v226);
  *a4 += v107;
  *a5 += v103;
  *a6 += v106;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v113 = 12;
  }
  else {
    uint64_t v113 = 16;
  }
  int v114 = *((_DWORD *)this + 58);
  unsigned int v115 = *((_DWORD *)this + 59);
  BOOL v116 = v115 >= v114;
  uint64_t v117 = v115 - v114;
  if (v116)
  {
    uint64_t v119 = v114 & ~(v114 >> 31);
    int v114 = 0;
    uint64_t v118 = v113 + v119;
    v113 += v119 + v117;
  }
  else
  {
    uint64_t v118 = v113;
  }
  uint64_t v120 = v114;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 843, (DgnString *)&v226);
  if (v227) {
    uint64_t v125 = v226;
  }
  else {
    uint64_t v125 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v121, v122, v123, v124, v21, &unk_2140A6A10, v22, v22, v125, v113, v118, v120);
  DgnString::~DgnString((DgnString *)&v226);
  *a4 += v113;
  *a5 += v118;
  *a6 += v120;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v126 = 12;
  }
  else {
    uint64_t v126 = 16;
  }
  uint64_t v127 = *((unsigned int *)this + 62);
  unsigned int v128 = *((_DWORD *)this + 63);
  if (v128 >= v127)
  {
    uint64_t v129 = 0;
    if ((int)v127 > 0) {
      uint64_t v126 = (v126 | 2) + 2 * (v127 - 1);
    }
    uint64_t v130 = v126 + 2 * (v128 - v127);
  }
  else
  {
    uint64_t v129 = 2 * v127;
    uint64_t v130 = v126;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 843, (DgnString *)&v226);
  if (v227) {
    uint64_t v135 = v226;
  }
  else {
    uint64_t v135 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v131, v132, v133, v134, v21, &unk_2140A6A10, v22, v22, v135, v130, v126, v129);
  DgnString::~DgnString((DgnString *)&v226);
  *a4 += v130;
  *a5 += v126;
  *a6 += v129;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v136 = 12;
  }
  else {
    uint64_t v136 = 16;
  }
  uint64_t v137 = *((unsigned int *)this + 66);
  unsigned int v138 = *((_DWORD *)this + 67);
  if (v138 >= v137)
  {
    uint64_t v139 = 0;
    if ((int)v137 > 0) {
      uint64_t v136 = (v136 | 2) + 2 * (v137 - 1);
    }
    uint64_t v140 = v136 + 2 * (v138 - v137);
  }
  else
  {
    uint64_t v139 = 2 * v137;
    uint64_t v140 = v136;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 843, (DgnString *)&v226);
  if (v227) {
    uint64_t v145 = v226;
  }
  else {
    uint64_t v145 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v141, v142, v143, v144, v21, &unk_2140A6A10, v22, v22, v145, v140, v136, v139);
  DgnString::~DgnString((DgnString *)&v226);
  *a4 += v140;
  *a5 += v136;
  *a6 += v139;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v146 = 12;
  }
  else {
    uint64_t v146 = 16;
  }
  int v147 = *((_DWORD *)this + 70);
  unsigned int v148 = *((_DWORD *)this + 71);
  BOOL v116 = v148 >= v147;
  uint64_t v149 = v148 - v147;
  if (v116)
  {
    uint64_t v151 = v147 & ~(v147 >> 31);
    int v147 = 0;
    uint64_t v150 = v146 + v151;
    v146 += v151 + v149;
  }
  else
  {
    uint64_t v150 = v146;
  }
  uint64_t v152 = v147;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 843, (DgnString *)&v226);
  if (v227) {
    uint64_t v157 = v226;
  }
  else {
    uint64_t v157 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v153, v154, v155, v156, v21, &unk_2140A6A10, v22, v22, v157, v146, v150, v152);
  DgnString::~DgnString((DgnString *)&v226);
  *a4 += v146;
  *a5 += v150;
  *a6 += v152;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v158 = 12;
  }
  else {
    uint64_t v158 = 16;
  }
  uint64_t v159 = *((unsigned int *)this + 74);
  unsigned int v160 = *((_DWORD *)this + 75);
  if (v160 >= v159)
  {
    uint64_t v161 = 0;
    if ((int)v159 > 0) {
      v158 += 4 * (v159 - 1) + 4;
    }
    uint64_t v162 = v158 + 4 * (v160 - v159);
  }
  else
  {
    uint64_t v161 = 4 * v159;
    uint64_t v162 = v158;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 843, (DgnString *)&v226);
  if (v227) {
    uint64_t v167 = v226;
  }
  else {
    uint64_t v167 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v163, v164, v165, v166, v21, &unk_2140A6A10, v22, v22, v167, v162, v158, v161);
  DgnString::~DgnString((DgnString *)&v226);
  *a4 += v162;
  *a5 += v158;
  *a6 += v161;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v168 = 12;
  }
  else {
    uint64_t v168 = 16;
  }
  uint64_t v169 = *((unsigned int *)this + 78);
  unsigned int v170 = *((_DWORD *)this + 79);
  if (v170 >= v169)
  {
    uint64_t v171 = 0;
    if ((int)v169 > 0) {
      v168 += 4 * (v169 - 1) + 4;
    }
    uint64_t v172 = v168 + 4 * (v170 - v169);
  }
  else
  {
    uint64_t v171 = 4 * v169;
    uint64_t v172 = v168;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 843, (DgnString *)&v226);
  if (v227) {
    uint64_t v177 = v226;
  }
  else {
    uint64_t v177 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v173, v174, v175, v176, v21, &unk_2140A6A10, v22, v22, v177, v172, v168, v171);
  DgnString::~DgnString((DgnString *)&v226);
  *a4 += v172;
  *a5 += v168;
  *a6 += v171;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v178 = 12;
  }
  else {
    uint64_t v178 = 16;
  }
  uint64_t v179 = *((unsigned int *)this + 82);
  unsigned int v180 = *((_DWORD *)this + 83);
  if (v180 >= v179)
  {
    uint64_t v181 = 0;
    if ((int)v179 > 0) {
      v178 += 4 * (v179 - 1) + 4;
    }
    uint64_t v182 = v178 + 4 * (v180 - v179);
  }
  else
  {
    uint64_t v181 = 4 * v179;
    uint64_t v182 = v178;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 843, (DgnString *)&v226);
  if (v227) {
    uint64_t v187 = v226;
  }
  else {
    uint64_t v187 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v183, v184, v185, v186, v21, &unk_2140A6A10, v22, v22, v187, v182, v178, v181);
  DgnString::~DgnString((DgnString *)&v226);
  *a4 += v182;
  *a5 += v178;
  *a6 += v181;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v188 = 12;
  }
  else {
    uint64_t v188 = 16;
  }
  uint64_t v189 = *((unsigned int *)this + 86);
  unsigned int v190 = *((_DWORD *)this + 87);
  if (v190 >= v189)
  {
    uint64_t v191 = 0;
    if ((int)v189 > 0) {
      uint64_t v188 = (v188 | 2) + 2 * (v189 - 1);
    }
    uint64_t v192 = v188 + 2 * (v190 - v189);
  }
  else
  {
    uint64_t v191 = 2 * v189;
    uint64_t v192 = v188;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 843, (DgnString *)&v226);
  if (v227) {
    int v197 = v226;
  }
  else {
    int v197 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v193, v194, v195, v196, v21, &unk_2140A6A10, v22, v22, v197, v192, v188, v191);
  DgnString::~DgnString((DgnString *)&v226);
  *a4 += v192;
  *a5 += v188;
  *a6 += v191;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v198 = 12;
  }
  else {
    uint64_t v198 = 16;
  }
  uint64_t v199 = *((unsigned int *)this + 90);
  unsigned int v200 = *((_DWORD *)this + 91);
  if (v200 >= v199)
  {
    uint64_t v201 = 0;
    if ((int)v199 > 0) {
      uint64_t v198 = (v198 | 2) + 2 * (v199 - 1);
    }
    uint64_t v202 = v198 + 2 * (v200 - v199);
  }
  else
  {
    uint64_t v201 = 2 * v199;
    uint64_t v202 = v198;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 843, (DgnString *)&v226);
  if (v227) {
    uint64_t v207 = v226;
  }
  else {
    uint64_t v207 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v203, v204, v205, v206, v21, &unk_2140A6A10, v22, v22, v207, v202, v198, v201);
  DgnString::~DgnString((DgnString *)&v226);
  *a4 += v202;
  *a5 += v198;
  *a6 += v201;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v208 = 12;
  }
  else {
    uint64_t v208 = 16;
  }
  int v209 = *((_DWORD *)this + 94);
  unsigned int v210 = *((_DWORD *)this + 95);
  BOOL v116 = v210 >= v209;
  uint64_t v211 = v210 - v209;
  if (v116)
  {
    uint64_t v213 = v209 & ~(v209 >> 31);
    int v209 = 0;
    uint64_t v212 = v208 + v213;
    v208 += v213 + v211;
  }
  else
  {
    uint64_t v212 = v208;
  }
  uint64_t v214 = v209;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 843, (DgnString *)&v226);
  if (v227) {
    uint64_t v219 = v226;
  }
  else {
    uint64_t v219 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v215, v216, v217, v218, v21, &unk_2140A6A10, v22, v22, v219, v208, v212, v214);
  DgnString::~DgnString((DgnString *)&v226);
  *a4 += v208;
  *a5 += v212;
  *a6 += v214;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 845, (DgnString *)&v226);
  if (v227) {
    uint64_t v224 = v226;
  }
  else {
    uint64_t v224 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v220, v221, v222, v223, v225, &unk_2140A6A10, (35 - v225), (35 - v225), v224, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v226);
}

void sub_213F9647C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void **BigramData::copyBigramData(int **this, const BigramData *a2)
{
  *this = *(int **)a2;
  unsigned int v4 = (char *)(this + 30);
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)(this + 1), (uint64_t *)a2 + 1, 0, *((_DWORD *)a2 + 4));
  BitArray::operator=(this + 3, (uint64_t)a2 + 24);
  BitArray::operator=(this + 5, (uint64_t)a2 + 40);
  BitArray::operator=(this + 7, (uint64_t)a2 + 56);
  BitArray::operator=(this + 9, (uint64_t)a2 + 72);
  HuffmanDecoder<unsigned short,unsigned int>::operator=((unint64_t)(this + 11), (uint64_t)a2 + 88);
  DgnPrimArray<int>::copyArraySlice((unint64_t)(this + 22), (uint64_t *)a2 + 22, 0, *((_DWORD *)a2 + 46));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)(this + 24), (uint64_t *)a2 + 24, 0, *((_DWORD *)a2 + 50));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)(this + 26), (uint64_t *)a2 + 26, 0, *((_DWORD *)a2 + 54));
  DgnPrimArray<unsigned char>::copyArraySlice((unint64_t)(this + 28), (void *)a2 + 28, 0, *((_DWORD *)a2 + 58));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)v4, (uint64_t *)a2 + 30, 0, *((_DWORD *)a2 + 62));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)(this + 32), (uint64_t *)a2 + 32, 0, *((_DWORD *)a2 + 66));
  DgnPrimArray<unsigned char>::copyArraySlice((unint64_t)(this + 34), (void *)a2 + 34, 0, *((_DWORD *)a2 + 70));
  DgnPrimArray<int>::copyArraySlice((unint64_t)(this + 36), (uint64_t *)a2 + 36, 0, *((_DWORD *)a2 + 74));
  DgnPrimArray<int>::copyArraySlice((unint64_t)(this + 38), (uint64_t *)a2 + 38, 0, *((_DWORD *)a2 + 78));
  DgnPrimArray<int>::copyArraySlice((unint64_t)(this + 40), (uint64_t *)a2 + 40, 0, *((_DWORD *)a2 + 82));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)(this + 42), (uint64_t *)a2 + 42, 0, *((_DWORD *)a2 + 86));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)(this + 44), (uint64_t *)a2 + 44, 0, *((_DWORD *)a2 + 90));
  DgnPrimArray<unsigned char>::copyArraySlice((unint64_t)(this + 46), (void *)a2 + 46, 0, *((_DWORD *)a2 + 94));

  return BigramData::compact((void **)this);
}

unint64_t HuffmanDecoder<unsigned short,unsigned int>::operator=(unint64_t a1, uint64_t a2)
{
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = *(void *)(a2 + 64);
  DgnPrimArray<int>::copyArraySlice(a1 + 72, (uint64_t *)(a2 + 72), 0, *(_DWORD *)(a2 + 80));
  return a1;
}

uint64_t BigramData::saveBinary(BigramData *this, DgnStream *a2, unsigned int *a3)
{
  writeObject((uint64_t)a2, (int *)this, a3);
  writeObject((uint64_t)a2, (int *)this + 1, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 8, a3);
  writeObject((uint64_t)a2, (uint64_t)this + 24, a3);
  writeObject((uint64_t)a2, (uint64_t)this + 40, a3);
  writeObject((uint64_t)a2, (uint64_t)this + 56, a3);
  writeObject((uint64_t)a2, (uint64_t)this + 72, a3);
  HuffmanDecoder<unsigned short,unsigned int>::writeObject((uint64_t)this + 88, (uint64_t)a2, a3);
  writeObject<unsigned int>((uint64_t)a2, (uint64_t)this + 176, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 192, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 208, a3);
  writeObject<unsigned char>((uint64_t)a2, (uint64_t)this + 224, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 240, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 256, a3);
  writeObject<unsigned char>((uint64_t)a2, (uint64_t)this + 272, a3);
  writeObject<unsigned int>((uint64_t)a2, (uint64_t)this + 288, a3);
  writeObject<unsigned int>((uint64_t)a2, (uint64_t)this + 304, a3);
  writeObject<unsigned int>((uint64_t)a2, (uint64_t)this + 320, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 336, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 352, a3);

  return writeObject<unsigned char>((uint64_t)a2, (uint64_t)this + 368, a3);
}

void BigramData::loadBinary(BigramData *this, DgnStream *a2, unsigned int *a3)
{
  readObject((uint64_t)a2, this, a3);
  readObject((uint64_t)a2, (_DWORD *)this + 1, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 8, a3);
  readObject(a2, (BigramData *)((char *)this + 24), a3);
  readObject(a2, (BigramData *)((char *)this + 40), a3);
  readObject(a2, (BigramData *)((char *)this + 56), a3);
  readObject(a2, (BigramData *)((char *)this + 72), a3);
  HuffmanDecoder<unsigned short,unsigned int>::readObject((unint64_t)this + 88, a2, a3);
  readObject<unsigned int>(a2, (uint64_t)this + 176, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 192, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 208, a3);
  readObject<unsigned char>(a2, (uint64_t)this + 224, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 240, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 256, a3);
  readObject<unsigned char>(a2, (uint64_t)this + 272, a3);
  readObject<unsigned int>(a2, (uint64_t)this + 288, a3);
  readObject<unsigned int>(a2, (uint64_t)this + 304, a3);
  readObject<unsigned int>(a2, (uint64_t)this + 320, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 336, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 352, a3);

  readObject<unsigned char>(a2, (uint64_t)this + 368, a3);
}

char *BigramData::saveBinaryShared(BigramData *this, DgnSharedMemStream *a2, int a3, unsigned int *a4)
{
  if (a3)
  {
    writeObject((uint64_t)a2, (int *)this, a4);
    writeObject((uint64_t)a2, (int *)this + 1, a4);
    writeSharedObject<short>(a2, (uint64_t)this + 8, a4);
    writeSharedObject(a2, (BigramData *)((char *)this + 24), a4);
    writeSharedObject(a2, (BigramData *)((char *)this + 40), a4);
    writeSharedObject(a2, (BigramData *)((char *)this + 56), a4);
    writeSharedObject(a2, (BigramData *)((char *)this + 72), a4);
    HuffmanDecoder<unsigned short,unsigned int>::writeObject((uint64_t)this + 88, (uint64_t)a2, a4);
  }
  else
  {
    writeSharedObject<short>(a2, (uint64_t)this + 8, a4);
    writeSharedObject(a2, (BigramData *)((char *)this + 24), a4);
    writeSharedObject(a2, (BigramData *)((char *)this + 40), a4);
    writeSharedObject(a2, (BigramData *)((char *)this + 56), a4);
    writeSharedObject(a2, (BigramData *)((char *)this + 72), a4);
  }
  writeSharedObject<unsigned int>(a2, (uint64_t)this + 176, a4);
  writeSharedObject<short>(a2, (uint64_t)this + 192, a4);
  writeSharedObject<short>(a2, (uint64_t)this + 208, a4);
  writeSharedObject<unsigned char>(a2, (uint64_t)this + 224, a4);
  writeSharedObject<short>(a2, (uint64_t)this + 240, a4);
  writeSharedObject<short>(a2, (uint64_t)this + 256, a4);
  writeSharedObject<unsigned char>(a2, (uint64_t)this + 272, a4);
  writeSharedObject<unsigned int>(a2, (uint64_t)this + 288, a4);
  writeSharedObject<unsigned int>(a2, (uint64_t)this + 304, a4);
  writeSharedObject<unsigned int>(a2, (uint64_t)this + 320, a4);
  writeSharedObject<short>(a2, (uint64_t)this + 336, a4);
  writeSharedObject<short>(a2, (uint64_t)this + 352, a4);

  return writeSharedObject<unsigned char>(a2, (uint64_t)this + 368, a4);
}

int *BigramData::loadBinaryShared(BigramData *this, DgnSharedMemStream *a2, int a3, unsigned int *a4)
{
  if (a3)
  {
    readObject((uint64_t)a2, this, a4);
    readObject((uint64_t)a2, (_DWORD *)this + 1, a4);
    readSharedObject<short>(a2, (uint64_t)this + 8, a4);
    readSharedObject(a2, (BigramData *)((char *)this + 24), a4);
    readSharedObject(a2, (BigramData *)((char *)this + 40), a4);
    readSharedObject(a2, (BigramData *)((char *)this + 56), a4);
    readSharedObject(a2, (BigramData *)((char *)this + 72), a4);
    HuffmanDecoder<unsigned short,unsigned int>::readObject((unint64_t)this + 88, a2, a4);
  }
  else
  {
    readSharedObject<short>(a2, (uint64_t)this + 8, a4);
    readSharedObject(a2, (BigramData *)((char *)this + 24), a4);
    readSharedObject(a2, (BigramData *)((char *)this + 40), a4);
    readSharedObject(a2, (BigramData *)((char *)this + 56), a4);
    readSharedObject(a2, (BigramData *)((char *)this + 72), a4);
  }
  readSharedObject<unsigned int>(a2, (uint64_t)this + 176, a4);
  readSharedObject<short>(a2, (uint64_t)this + 192, a4);
  readSharedObject<short>(a2, (uint64_t)this + 208, a4);
  readSharedObject<unsigned char>(a2, (uint64_t)this + 224, a4);
  readSharedObject<short>(a2, (uint64_t)this + 240, a4);
  readSharedObject<short>(a2, (uint64_t)this + 256, a4);
  readSharedObject<unsigned char>(a2, (uint64_t)this + 272, a4);
  readSharedObject<unsigned int>(a2, (uint64_t)this + 288, a4);
  readSharedObject<unsigned int>(a2, (uint64_t)this + 304, a4);
  readSharedObject<unsigned int>(a2, (uint64_t)this + 320, a4);
  readSharedObject<short>(a2, (uint64_t)this + 336, a4);
  readSharedObject<short>(a2, (uint64_t)this + 352, a4);

  return readSharedObject<unsigned char>(a2, (uint64_t)this + 368, a4);
}

uint64_t BigramData::computeLocalPreloadableBytes(BigramData *this)
{
  uint64_t v1 = *((unsigned int *)this + 50);
  if (v1 >= 2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 1;
    while (1)
    {
      uint64_t v5 = *(unsigned __int16 *)(*((void *)this + 24) + 2 * v4);
      if ((*(_DWORD *)(*((void *)this + 3) + 4 * (v4 >> 5)) >> v4))
      {
        int v6 = *((_DWORD *)this + 4);
        if (*(_WORD *)(*((void *)this + 24) + 2 * v4))
        {
          unsigned int v7 = 0;
          unsigned int v8 = *(_DWORD *)(*((void *)this + 22) + 4 * v4);
          uint64_t v9 = v5 << (v6 == 0);
          if ((unsigned __int16)(v5 + 1) <= 2u) {
            uint64_t v10 = 2;
          }
          else {
            uint64_t v10 = (unsigned __int16)(v5 + 1);
          }
          uint64_t v11 = v10 - 1;
          do
          {
            if (v6) {
              uint64_t v12 = (_WORD *)(*((void *)this + 1) + 2 * *(unsigned __int8 *)(*((void *)this + 28) + v8));
            }
            else {
              uint64_t v12 = (_WORD *)(*((void *)this + 26) + 2 * v8);
            }
            if (*v12 != 20000) {
              ++v7;
            }
            ++v8;
            --v11;
          }
          while (v11);
LABEL_24:
          if (v7 <= 1) {
            uint64_t v15 = 0;
          }
          else {
            uint64_t v15 = v9;
          }
          goto LABEL_28;
        }
      }
      else if (*(_WORD *)(*((void *)this + 24) + 2 * v4))
      {
        int v13 = 0;
        uint64_t v9 = 0;
        unsigned int v7 = 0;
        do
        {
          if (BigramData::getSearchScoreForIndex(this, v4, v13) != 20000)
          {
            if (*((_DWORD *)this + 4)) {
              uint64_t v14 = 3;
            }
            else {
              uint64_t v14 = 4;
            }
            v9 += v14;
            ++v7;
          }
          ++v13;
        }
        while (v5 != v13);
        goto LABEL_24;
      }
      uint64_t v15 = 0;
LABEL_28:
      v3 += v15;
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return 0;
}

uint64_t BigramData::getSearchScoreForIndex(BigramData *this, unsigned int a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(*((void *)this + 22) + 4 * a2);
  if (*(_WORD *)(*((void *)this + 24) + 2 * a2) != 1)
  {
    if (*(_DWORD *)this && ((*(_DWORD *)(*((void *)this + 5) + 4 * (a2 >> 5)) >> a2) & 1) != 0)
    {
      uint64_t v3 = (*(_DWORD *)(*((void *)this + 40) + 4 * v3) + a3);
      if (!*((_DWORD *)this + 4))
      {
        uint64_t v5 = *((void *)this + 44);
        goto LABEL_12;
      }
      uint64_t v4 = *((void *)this + 46);
    }
    else
    {
      uint64_t v3 = (v3 + a3);
      if (!*((_DWORD *)this + 4))
      {
        uint64_t v5 = *((void *)this + 32);
        goto LABEL_12;
      }
      uint64_t v4 = *((void *)this + 34);
    }
    uint64_t v3 = *(unsigned __int8 *)(v4 + v3);
LABEL_11:
    uint64_t v5 = *((void *)this + 1);
LABEL_12:
    LOWORD(v3) = *(_WORD *)(v5 + 2 * v3);
    return (unsigned __int16)v3;
  }
  if (*((_DWORD *)this + 4))
  {
    uint64_t v3 = *(_DWORD *)(*((void *)this + 22) + 4 * a2);
    goto LABEL_11;
  }
  return (unsigned __int16)v3;
}

uint64_t BigramData::initNewBigramData(uint64_t a1, BigramData *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 200);
  BigramData::configureBigramData(a2, 1, *(_DWORD *)(a1 + 16), *(const unsigned __int16 **)(a1 + 8));
  BigramData::preAllocateStaticBigramData(a2, v9);
  uint64_t v10 = 232;
  if (!*(_DWORD *)(a1 + 4)) {
    uint64_t v10 = 216;
  }
  BigramData::preAllocateDynamicBigramData((uint64_t)a2, *(_DWORD *)(a1 + 248), *(_DWORD *)(a1 + v10));
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  *(void *)uint64_t v45 = a4;
  unsigned int v11 = *(_DWORD *)(a4 + 12);
  if (v9 > v11) {
    DgnArray<DiskNgramContext>::reallocElts(a4, v9 - v11, 0);
  }
  unsigned int v12 = *(_DWORD *)(a5 + 12);
  uint64_t v46 = (void *)a5;
  uint64_t v48 = a2;
  if (v9 <= v12)
  {
    *(_DWORD *)(a5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v9;
    if (!v9) {
      goto LABEL_55;
    }
  }
  else
  {
    DgnPrimArray<unsigned long long>::reallocElts(a5, v9 - v12, 0);
    *(_DWORD *)(a5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v9;
  }
  uint64_t v13 = 0;
  do
    *(void *)(*(void *)a5 + 8 * v13++) = 0;
  while (v9 != v13);
  if (v9 >= 2)
  {
    for (uint64_t i = 1; i != v9; ++i)
    {
      LODWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = 0;
      LODWORD(v54) = 0;
      LODWORD(v52) = 0;
      uint64_t v15 = i >> 5;
      int v16 = 1 << i;
      uint64_t v17 = *(unsigned __int16 *)(*(void *)(a1 + 192) + 2 * i);
      if ((*(_DWORD *)(*(void *)(a1 + 24) + 4 * v15) & (1 << i)) != 0)
      {
        unint64_t v18 = v17 << (*(_DWORD *)(a1 + 16) == 0);
        if (*(_WORD *)(*(void *)(a1 + 192) + 2 * i))
        {
          unsigned __int16 v19 = 1;
          do
          {
            int v20 = *(_DWORD *)(a1 + 16);
            int v21 = v19 - 1;
            uint64_t v22 = (*(_DWORD *)(*(void *)(a1 + 176) + 4 * i) + v21);
            if (v20)
            {
              uint64_t v22 = *(unsigned __int8 *)(*(void *)(a1 + 224) + v22);
              uint64_t v23 = *(void *)(a1 + 8);
            }
            else
            {
              uint64_t v23 = *(void *)(a1 + 208);
            }
            int v24 = *(unsigned __int16 *)(v23 + 2 * v22);
            if (v24 != 20000)
            {
              unsigned int v25 = v56;
              if (v56 == HIDWORD(v56))
              {
                DgnPrimArray<short>::reallocElts((uint64_t)&v55, 1, 1);
                unsigned int v25 = v56;
                int v20 = *(_DWORD *)(a1 + 16);
              }
              *(_WORD *)(v55 + 2 * v25) = v19;
              LODWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = v25 + 1;
              if (v20)
              {
                char v26 = *(unsigned char *)(*(void *)(a1 + 224) + (*(_DWORD *)(*(void *)(a1 + 176) + 4 * i) + v21));
                uint64_t v27 = v52;
                if (v52 == (unint64_t)HIDWORD(v52))
                {
                  DgnPrimArray<char>::reallocElts((uint64_t)&v51, 1, 1);
                  uint64_t v27 = v52;
                }
                *(unsigned char *)(v51 + v27) = v26;
                int v28 = v52;
                uint64_t v29 = &v52;
              }
              else
              {
                int v28 = v54;
                if (v54 == HIDWORD(v54))
                {
                  DgnPrimArray<short>::reallocElts((uint64_t)&v53, 1, 1);
                  int v28 = v54;
                }
                v53[v28] = v24;
                uint64_t v29 = &v54;
              }
              *(_DWORD *)uint64_t v29 = v28 + 1;
            }
            ++v19;
          }
          while (v17 >= v19);
        }
        int v30 = 0;
      }
      else if (*(_WORD *)(*(void *)(a1 + 192) + 2 * i))
      {
        int v31 = 0;
        unint64_t v18 = 0;
        int v30 = 0;
        do
        {
          __int16 SearchSuccIdForIndex = BigramData::getSearchSuccIdForIndex((BigramData *)a1, i, v31);
          int SearchScoreForIndex = BigramData::getSearchScoreForIndex((BigramData *)a1, i, v31);
          __int16 v34 = SearchScoreForIndex;
          if (SearchScoreForIndex != 20000)
          {
            int v35 = *(_DWORD *)(a1 + 16);
            if (v35) {
              uint64_t v36 = 3;
            }
            else {
              uint64_t v36 = 4;
            }
            unsigned int v37 = v56;
            if (v56 == HIDWORD(v56))
            {
              DgnPrimArray<short>::reallocElts((uint64_t)&v55, 1, 1);
              unsigned int v37 = v56;
              int v35 = *(_DWORD *)(a1 + 16);
            }
            *(_WORD *)(v55 + 2 * v37) = SearchSuccIdForIndex;
            LODWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = v37 + 1;
            if (v35)
            {
              char SearchQuantizedScoreForIndex = BigramData::getSearchQuantizedScoreForIndex((BigramData *)a1, i, v31);
              uint64_t v39 = v52;
              if (v52 == (unint64_t)HIDWORD(v52))
              {
                DgnPrimArray<char>::reallocElts((uint64_t)&v51, 1, 1);
                uint64_t v39 = v52;
              }
              *(unsigned char *)(v51 + v39) = SearchQuantizedScoreForIndex;
              int v40 = v52;
              uint64_t v41 = &v52;
            }
            else
            {
              int v40 = v54;
              if (v54 == HIDWORD(v54))
              {
                DgnPrimArray<short>::reallocElts((uint64_t)&v53, 1, 1);
                int v40 = v54;
              }
              v53[v40] = v34;
              uint64_t v41 = &v54;
            }
            ++v30;
            v18 += v36;
            *(_DWORD *)uint64_t v41 = v40 + 1;
          }
          ++v31;
        }
        while (v17 != v31);
        LODWORD(v17) = 0;
        uint64_t v15 = i >> 5;
        int v16 = 1 << i;
      }
      else
      {
        int v30 = 0;
        unint64_t v18 = 0;
      }
      if (v56)
      {
        if (v56 == 1)
        {
          BigramData::fillBigramRecord(v48, i, (uint64_t)&v55, &v53, &v51);
        }
        else
        {
          BigramData::allocBi1(v48, i);
          *(_DWORD *)(*((void *)v48 + 5) + 4 * v15) |= v16;
          *(_WORD *)(*((void *)v48 + 24) + 2 * i) = v56;
          HuffmanEncoder<unsigned short,unsigned int>::addSuccessors(a3, (uint64_t)&v55);
          uint64_t v42 = **(void **)v45 + 56 * *(unsigned int *)(*(void *)v45 + 8);
          *(void *)uint64_t v42 = 0;
          *(void *)(v42 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
          *(void *)(v42 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
          *(void *)(v42 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = -1;
          strcpy((char *)(v42 + 32), " N");
          LODWORD(v42) = *(_DWORD *)(*(void *)v45 + 8);
          *(_DWORD *)(*(void *)v45 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v42 + 1;
          uint64_t v43 = **(void **)v45 + 56 * v42;
          *(unsigned char *)(v43 + 34) = 2;
          *(_DWORD *)(v43 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = i;
          *(_DWORD *)(v43 + 36) = i;
          *(_DWORD *)(v43 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = v30;
          *(_DWORD *)(v43 + 44) = v17;
          *(int64x2_t *)(v43 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = vdupq_n_s64(v18);
          *(void *)(*v46 + 8 * i) = **(void **)v45 + 56 * (*(_DWORD *)(*(void *)v45 + 8) - 1);
        }
      }
    }
  }
LABEL_55:
  if (!*(_DWORD *)(a3 + 128)) {
    HuffmanEncoder<unsigned short,unsigned int>::addValue(a3, 0);
  }
  uint64_t v50 = 0;
  memset(v49, 0, sizeof(v49));
  HuffmanEncoder<unsigned short,unsigned int>::finalizeTables(a3, (unint64_t)v49);
  HuffmanDecoder<unsigned short,unsigned int>::operator=((unint64_t)v48 + 88, (uint64_t)v49);
  HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)v49);
  BigramData::compact((void **)v48);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v51);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v53);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v55);
}

void sub_213F97504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v11 - 136);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v11 - 120);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v11 - 104);
  _Unwind_Resume(a1);
}

_DWORD *BigramData::configureBigramData(_DWORD *this, int a2, unsigned int a3, const unsigned __int16 *a4)
{
  int v6 = this;
  *this = a2;
  this[1] = a3 != 0;
  unsigned int v7 = (_WORD **)(this + 2);
  unsigned int v8 = this[5];
  if (a3 <= v8)
  {
    this[4] = a3;
    if (!a3) {
      return this;
    }
  }
  else
  {
    this = (_DWORD *)DgnPrimArray<short>::reallocElts((uint64_t)(this + 2), a3 - v8, 0);
    v6[4] = a3;
  }
  uint64_t v9 = *v7;
  uint64_t v10 = a3;
  do
  {
    __int16 v11 = *a4++;
    *v9++ = v11;
    --v10;
  }
  while (v10);
  return this;
}

void BigramData::preAllocateStaticBigramData(BigramData *this, unsigned int a2)
{
  BitArray::preAllocate((BigramData *)((char *)this + 24), a2);
  if (*(_DWORD *)this)
  {
    BitArray::preAllocate((BigramData *)((char *)this + 40), a2);
    BitArray::preAllocate((BigramData *)((char *)this + 56), a2);
    BitArray::preAllocate((BigramData *)((char *)this + 72), a2);
  }
  unsigned int v4 = *((_DWORD *)this + 47);
  if (a2 > v4) {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 176, a2 - v4, 0);
  }
  unsigned int v5 = *((_DWORD *)this + 51);
  if (a2 > v5)
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 192, a2 - v5, 0);
  }
}

uint64_t BigramData::preAllocateDynamicBigramData(uint64_t this, unsigned int a2, unsigned int a3)
{
  uint64_t v5 = this;
  unsigned int v6 = *(_DWORD *)(this + 252);
  BOOL v7 = a2 >= v6;
  uint64_t v8 = a2 - v6;
  if (v8 != 0 && v7) {
    this = DgnPrimArray<short>::reallocElts(this + 240, v8, 0);
  }
  if (*(_DWORD *)(v5 + 4))
  {
    if (*(_DWORD *)(v5 + 284) < a2)
    {
      __int16 v11 = 0;
      this = realloc_array(*(void **)(v5 + 272), &v11, a2, *(unsigned int *)(v5 + 280), *(unsigned int *)(v5 + 280), 1);
      *(_DWORD *)(v5 + 284) = this;
      *(void *)(v5 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = v11;
    }
    if (*(_DWORD *)(v5 + 236) < a3)
    {
      __int16 v11 = 0;
      this = realloc_array(*(void **)(v5 + 224), &v11, a3, *(unsigned int *)(v5 + 232), *(unsigned int *)(v5 + 232), 1);
      *(_DWORD *)(v5 + 236) = this;
      *(void *)(v5 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = v11;
    }
  }
  else
  {
    unsigned int v9 = *(_DWORD *)(v5 + 268);
    if (a2 > v9) {
      this = DgnPrimArray<short>::reallocElts(v5 + 256, a2 - v9, 0);
    }
    unsigned int v10 = *(_DWORD *)(v5 + 220);
    if (a3 > v10)
    {
      return DgnPrimArray<short>::reallocElts(v5 + 208, a3 - v10, 0);
    }
  }
  return this;
}

unint64_t DgnPrimArray<unsigned short>::add(unint64_t result, __int16 a2)
{
  unint64_t v3 = result;
  unsigned int v4 = *(_DWORD *)(result + 8);
  if (v4 == *(_DWORD *)(result + 12))
  {
    uint64_t result = DgnPrimArray<short>::reallocElts(result, 1, 1);
    unsigned int v4 = *(_DWORD *)(v3 + 8);
  }
  *(_WORD *)(*(void *)v3 + 2 * v4) = a2;
  *(_DWORD *)(v3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v4 + 1;
  return result;
}

unint64_t DgnPrimArray<unsigned char>::add(unint64_t result, char a2)
{
  unint64_t v3 = result;
  unsigned int v4 = *(_DWORD *)(result + 8);
  if (v4 == *(_DWORD *)(result + 12))
  {
    uint64_t result = DgnPrimArray<char>::reallocElts(result, 1, 1);
    unsigned int v4 = *(_DWORD *)(v3 + 8);
  }
  *(unsigned char *)(*(void *)v3 + v4) = a2;
  ++*(_DWORD *)(v3 + 8);
  return result;
}

uint64_t BigramData::getSearchSuccIdForIndex(BigramData *this, unsigned int a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(*((void *)this + 22) + 4 * a2);
  if (*(_WORD *)(*((void *)this + 24) + 2 * a2) == 1) {
    return WORD1(v3);
  }
  if (*(_DWORD *)this && ((*(_DWORD *)(*((void *)this + 5) + 4 * (a2 >> 5)) >> a2) & 1) != 0)
  {
    unsigned int v5 = *(_DWORD *)(*((void *)this + 40) + 4 * v3) + a3;
    uint64_t v6 = *((void *)this + 42);
  }
  else
  {
    unsigned int v5 = v3 + a3;
    uint64_t v6 = *((void *)this + 30);
  }
  return *(unsigned __int16 *)(v6 + 2 * v5);
}

uint64_t BigramData::getSearchQuantizedScoreForIndex(BigramData *this, unsigned int a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(*((void *)this + 22) + 4 * a2);
  if (*(_WORD *)(*((void *)this + 24) + 2 * a2) != 1)
  {
    if (*(_DWORD *)this && ((*(_DWORD *)(*((void *)this + 5) + 4 * (a2 >> 5)) >> a2) & 1) != 0)
    {
      LODWORD(v3) = *(_DWORD *)(*((void *)this + 40) + 4 * v3) + a3;
      uint64_t v4 = *((void *)this + 46);
    }
    else
    {
      LODWORD(v3) = v3 + a3;
      uint64_t v4 = *((void *)this + 34);
    }
    LOBYTE(v3) = *(unsigned char *)(v4 + v3);
  }
  return v3;
}

void BigramData::fillBigramRecord(BigramData *a1, unsigned int a2, uint64_t a3, _WORD **a4, void *a5)
{
  uint64_t v10 = *(unsigned int *)(a3 + 8);
  if (v10 == 1) {
    goto LABEL_5;
  }
  uint64_t v11 = 3;
  if (!*((_DWORD *)a1 + 4)) {
    uint64_t v11 = 4;
  }
  if (v11 * v10 < (unint64_t)(*(unsigned __int16 *)(*(void *)a3 + 2 * (v10 - 1)) << (*((_DWORD *)a1 + 4) == 0)))
  {
LABEL_5:
    BigramData::allocSearch(a1, a2, (unsigned __int16)*(_DWORD *)(a3 + 8));
    int v12 = *(_DWORD *)(a3 + 8);
    if (*((_DWORD *)a1 + 4))
    {
      if (v12)
      {
        unint64_t v13 = 0;
        do
        {
          BigramData::setSearchSuccIdForIndex((uint64_t)a1, a2, v13, *(_WORD *)(*(void *)a3 + 2 * v13));
          BigramData::setSearchQuantizedScoreForIndex((uint64_t)a1, a2, v13, *(unsigned __int8 *)(*a5 + v13));
          ++v13;
        }
        while (v13 < *(unsigned int *)(a3 + 8));
      }
    }
    else if (v12)
    {
      unint64_t v14 = 0;
      do
      {
        BigramData::setSearchSuccIdForIndex((uint64_t)a1, a2, v14, *(_WORD *)(*(void *)a3 + 2 * v14));
        BigramData::setSearchScoreForIndex((uint64_t)a1, a2, v14, (unsigned __int16)(*a4)[v14]);
        ++v14;
      }
      while (v14 < *(unsigned int *)(a3 + 8));
    }
  }
  else
  {
    BigramData::fillBigramRecordLookup((uint64_t)a1, a2, (unsigned __int16 **)a3, a4, a5);
  }
}

void BigramData::allocBi1(BigramData *this, unsigned int a2)
{
  if (*((_DWORD *)this + 50) <= a2)
  {
    uint64_t v4 = (char *)this + 192;
    unsigned int v5 = (char *)this + 176;
    uint64_t v6 = (BigramData *)((char *)this + 24);
    BOOL v7 = (BigramData *)((char *)this + 40);
    uint64_t v8 = (BigramData *)((char *)this + 56);
    unsigned int v9 = (BigramData *)((char *)this + 72);
    do
    {
      uint64_t v10 = *((unsigned int *)this + 46);
      if (v10 == *((_DWORD *)this + 47))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)v5, 1, 1);
        uint64_t v10 = *((unsigned int *)this + 46);
      }
      *(_DWORD *)(*((void *)this + 22) + 4 * v10) = -1;
      ++*((_DWORD *)this + 46);
      unsigned int v11 = *((_DWORD *)this + 50);
      if (v11 == *((_DWORD *)this + 51))
      {
        DgnPrimArray<short>::reallocElts((uint64_t)v4, 1, 1);
        unsigned int v11 = *((_DWORD *)this + 50);
      }
      *(_WORD *)(*((void *)this + 24) + 2 * v11) = 0;
      *((_DWORD *)this + 50) = v11 + 1;
      BitArray::add(v6, 0);
      if (*(_DWORD *)this)
      {
        BitArray::add(v7, 0);
        BitArray::add(v8, 0);
        BitArray::add(v9, 0);
      }
    }
    while (*((_DWORD *)this + 50) <= a2);
  }
}

uint64_t **HuffmanEncoder<unsigned short,unsigned int>::addSuccessors(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a2 + 8);
  unsigned __int16 v5 = **(_WORD **)a2;
  uint64_t result = HuffmanEncoder<unsigned short,unsigned int>::addValue(a1, v5);
  if (v4 >= 2)
  {
    uint64_t v7 = 2 * v4;
    uint64_t v8 = 2;
    do
    {
      unsigned __int16 v9 = *(_WORD *)(*(void *)a2 + v8);
      uint64_t result = HuffmanEncoder<unsigned short,unsigned int>::addValue(a1, v9 - v5);
      v8 += 2;
      unsigned __int16 v5 = v9;
    }
    while (v7 != v8);
  }
  return result;
}

uint64_t **HuffmanEncoder<unsigned short,unsigned int>::addValue(uint64_t a1, unsigned __int16 a2)
{
  unsigned __int16 v9 = a2;
  ++*(_DWORD *)a1;
  uint64_t v3 = a1 + 8;
  uint64_t result = Hash<unsigned short,unsigned short,HuffmanSymbol<unsigned short,unsigned int>,HuffmanSymbol<unsigned short,unsigned int>*>::findBucket(a1 + 8, &v9);
  if (*result)
  {
    ++*(_DWORD *)((*result)[2] + 4);
  }
  else
  {
    unsigned __int16 v5 = MemChunkAlloc(0xCuLL, 0);
    unsigned __int16 v6 = v9;
    *unsigned __int16 v5 = 0x100000000;
    *((_WORD *)v5 + 4) = v6;
    uint64_t v8 = v5;
    unsigned int v7 = *(_DWORD *)(a1 + 128);
    if (v7 == *(_DWORD *)(a1 + 132))
    {
      DgnPrimArray<unsigned long long>::reallocElts(a1 + 120, 1, 1);
      unsigned int v7 = *(_DWORD *)(a1 + 128);
    }
    *(void *)(*(void *)(a1 + 120) + 8 * v7) = v5;
    *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 128) = v7 + 1;
    return (uint64_t **)Hash<unsigned short,unsigned short,HuffmanSymbol<unsigned short,unsigned int>,HuffmanSymbol<unsigned short,unsigned int>*>::add(v3, &v9, &v8);
  }
  return result;
}

uint64_t HuffmanEncoder<unsigned short,unsigned int>::finalizeTables(uint64_t a1, unint64_t a2)
{
  v54[0] = 0;
  v54[1] = 0;
  uint64_t v4 = *(unsigned int *)(a1 + 128);
  if (v4 == 2)
  {
    HuffmanDecoder<unsigned short,unsigned int>::initializeTable(a2, 1, 2u);
    HuffmanDecoder<unsigned short,unsigned int>::addCode(a2, 0, 1, 0);
    unsigned __int16 v6 = *(uint64_t **)(a1 + 120);
    uint64_t v7 = *v6;
    *(void *)uint64_t v7 = 0x100000001;
    uint64_t v8 = v6[1];
    unsigned __int16 v9 = *(_WORD **)(a2 + 48);
    *unsigned __int16 v9 = *(_WORD *)(v8 + 8);
    *(void *)uint64_t v8 = 0x100000000;
    v9[1] = *(_WORD *)(v7 + 8);
  }
  else if (v4 == 1)
  {
    HuffmanDecoder<unsigned short,unsigned int>::initializeTable(a2, 1, 1u);
    HuffmanDecoder<unsigned short,unsigned int>::addCode(a2, 0, 1, 0);
    uint64_t v5 = **(void **)(a1 + 120);
    *(void *)uint64_t v5 = 0x100000000;
    **(_WORD **)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = *(_WORD *)(v5 + 8);
  }
  else
  {
    unsigned int v10 = HuffmanEncoder<unsigned short,unsigned int>::countsToLengths(a1, (uint64_t)v54);
    unsigned int v18 = v10;
    int v19 = *(_DWORD *)(v54[0] + 4 * v10);
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    if (v10 >= 0x20)
    {
      throwTableCodeLimitExceeded(v10, v11, v12, v13, v14, v15, v16, v17);
      unsigned int v21 = HIDWORD(v51);
      int v20 = v50;
    }
    else
    {
      int v20 = 0;
      unsigned int v21 = 0;
    }
    if (v21 < v18 + 1)
    {
      uint64_t v48 = 0;
      HIDWORD(v51) = realloc_array(v20, &v48, 4 * (v18 + 1), 4 * v51, 4 * v51, 1) >> 2;
      int v20 = v48;
      uint64_t v50 = v48;
    }
    int v22 = v4 - v19;
    LODWORD(v51) = v18 + 1;
    *(_DWORD *)int v20 = 0;
    *((_DWORD *)v20 + v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v22;
    uint64_t v23 = v52;
    if (HIDWORD(v53) < v18 + 1)
    {
      uint64_t v48 = 0;
      HIDWORD(v53) = realloc_array(v52, &v48, 4 * (v18 + 1), 4 * v53, 4 * v53, 1) >> 2;
      uint64_t v23 = v48;
      uint64_t v52 = v48;
    }
    LODWORD(v53) = v18 + 1;
    *uint64_t v23 = 0;
    HuffmanDecoder<unsigned short,unsigned int>::initializeTable(a2, v18, v4);
    unint64_t v24 = HuffmanDecoder<unsigned short,unsigned int>::addCode(a2, 0, v18, v22);
    if (v18)
    {
      unsigned int v31 = 1;
      unsigned __int8 v32 = v18;
      do
      {
        uint64_t v33 = --v32;
        uint64_t v34 = v54[0];
        unsigned int v35 = *(_DWORD *)(v54[0] + 4 * (v32 + 1)) + *((_DWORD *)v52 + v31 - 1);
        *((_DWORD *)v52 + v31) = v35 >> 1;
        int v36 = *(_DWORD *)(v34 + 4 * v32);
        if (v36)
        {
          v22 -= v36;
          unint64_t v24 = HuffmanDecoder<unsigned short,unsigned int>::addCode(a2, v35 << ~v32, v32, v22);
        }
        *((_DWORD *)v50 + vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v22;
        if (v35) {
          throwTableGenerationFailed(v24, v25, v33, v26, v27, v28, v29, v30);
        }
        ++v31;
      }
      while (v31 <= v18);
    }
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    uint64_t v55 = 0;
    unint64_t v37 = realloc_array(0, &v55, 4 * (v18 + 1), 0, 0, 1);
    uint64_t v38 = v55;
    uint64_t v48 = v55;
    LODWORD(v49) = v18 + 1;
    HIDWORD(v49) = v37 >> 2;
    bzero(v55, 4 * (v18 + 1));
    if (v4)
    {
      uint64_t v39 = *(uint64_t **)(a1 + 120);
      int v40 = v50;
      uint64_t v41 = *(void *)(a2 + 48);
      uint64_t v42 = v52;
      do
      {
        uint64_t v43 = *v39++;
        uint64_t v44 = *(unsigned int *)(v43 + 4);
        int v45 = v38[v44];
        unsigned int v46 = v40[v44] + v45;
        v38[v44] = v45 + 1;
        *(_WORD *)(v41 + 2 * v46) = *(_WORD *)(v43 + 8);
        *(_DWORD *)uint64_t v43 = v42[v18 - v44] + v45;
        --v4;
      }
      while (v4);
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v48);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v50);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v52);
  }
  *(unsigned char *)(a1 + 4) = 1;
  HuffmanDecoder<unsigned short,unsigned int>::configureIndexHelper(a2);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v54);
}

void sub_213F97FFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void);
  uint64_t v8 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v9 = va_arg(va3, void);
  uint64_t v11 = va_arg(va3, void);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va3);
  _Unwind_Resume(a1);
}

uint64_t BigramData::savePersistentAndFillInNewBigramData(BigramData *this, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v32 = a6 >> 5;
  uint64_t v8 = a6;
  int v31 = 1 << a6;
  if ((*(_DWORD *)(*((void *)this + 3) + 4 * v32) & (1 << a6)) != 0)
  {
    if (*(_WORD *)(*((void *)this + 24) + 2 * a6))
    {
      unsigned __int16 v9 = 1;
      do
      {
        int v10 = *((_DWORD *)this + 4);
        int v11 = v9 - 1;
        uint64_t v12 = (*(_DWORD *)(*((void *)this + 22) + 4 * v8) + v11);
        if (v10)
        {
          uint64_t v12 = *(unsigned __int8 *)(*((void *)this + 28) + v12);
          uint64_t v13 = *((void *)this + 1);
        }
        else
        {
          uint64_t v13 = *((void *)this + 26);
        }
        int v14 = *(unsigned __int16 *)(v13 + 2 * v12);
        if (v14 != 20000)
        {
          int v15 = v44;
          if (v44 == HIDWORD(v44))
          {
            DgnPrimArray<short>::reallocElts((uint64_t)&v43, 1, 1);
            int v15 = v44;
            int v10 = *((_DWORD *)this + 4);
          }
          v43[v15] = v9;
          LODWORD(v44) = v15 + 1;
          if (v10)
          {
            char v16 = *(unsigned char *)(*((void *)this + 28) + (*(_DWORD *)(*((void *)this + 22) + 4 * v8) + v11));
            uint64_t v17 = v40;
            if (v40 == (unint64_t)HIDWORD(v40))
            {
              DgnPrimArray<char>::reallocElts((uint64_t)&v39, 1, 1);
              uint64_t v17 = v40;
            }
            v39[v17] = v16;
            int v18 = v40;
            int v19 = &v40;
          }
          else
          {
            int v18 = v42;
            if (v42 == HIDWORD(v42))
            {
              DgnPrimArray<short>::reallocElts((uint64_t)&v41, 1, 1);
              int v18 = v42;
            }
            v41[v18] = v14;
            int v19 = &v42;
          }
          *(_DWORD *)int v19 = v18 + 1;
        }
        ++v9;
      }
      while (*(unsigned __int16 *)(*((void *)this + 24) + 2 * v8) >= v9);
    }
  }
  else if (*(_WORD *)(*((void *)this + 24) + 2 * a6))
  {
    unsigned int v21 = 0;
    do
    {
      __int16 SearchSuccIdForIndex = BigramData::getSearchSuccIdForIndex(this, a6, v21);
      int SearchScoreForIndex = BigramData::getSearchScoreForIndex(this, a6, v21);
      __int16 v24 = SearchScoreForIndex;
      if (SearchScoreForIndex != 20000)
      {
        int v25 = v44;
        if (v44 == HIDWORD(v44))
        {
          DgnPrimArray<short>::reallocElts((uint64_t)&v43, 1, 1);
          int v25 = v44;
        }
        v43[v25] = SearchSuccIdForIndex;
        LODWORD(v44) = v25 + 1;
        if (*((_DWORD *)this + 4))
        {
          char SearchQuantizedScoreForIndex = BigramData::getSearchQuantizedScoreForIndex(this, a6, v21);
          uint64_t v27 = v40;
          if (v40 == (unint64_t)HIDWORD(v40))
          {
            DgnPrimArray<char>::reallocElts((uint64_t)&v39, 1, 1);
            uint64_t v27 = v40;
          }
          v39[v27] = SearchQuantizedScoreForIndex;
          int v28 = v40;
          uint64_t v29 = &v40;
        }
        else
        {
          int v28 = v42;
          if (v42 == HIDWORD(v42))
          {
            DgnPrimArray<short>::reallocElts((uint64_t)&v41, 1, 1);
            int v28 = v42;
          }
          v41[v28] = v24;
          uint64_t v29 = &v42;
        }
        *(_DWORD *)uint64_t v29 = v28 + 1;
      }
      ++v21;
    }
    while (v21 < *(unsigned __int16 *)(*((void *)this + 24) + 2 * v8));
  }
  *(_DWORD *)(*(void *)(a4 + 176) + 4 * vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2);
  unint64_t v37 = 0;
  uint64_t v38 = 0;
  HuffmanEncoder<unsigned short,unsigned int>::encodeSuccessors(a5, (uint64_t *)&v43, (uint64_t)&v37);
  if (((4 * (v38 + 1)) | 2uLL) >= 2 * (unint64_t)(v44 + 1))
  {
    writeObjectArray(a2, v43, v44, a3);
  }
  else
  {
    *(_DWORD *)(*(void *)(a4 + 72) + 4 * v32) |= v31;
    unsigned __int16 v36 = v38;
    writeObject(a2, &v36, a3);
    writeObjectArray(a2, v37, v38, a3);
  }
  if (*((_DWORD *)this + 4)) {
    writeObjectArray(a2, v39, v40, a3);
  }
  else {
    writeObjectArray(a2, v41, v42, a3);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v37);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v39);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v41);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v43);
}

void sub_213F98430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va3, a7);
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v14 = va_arg(va3, void);
  uint64_t v16 = va_arg(va3, void);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va3);
  _Unwind_Resume(a1);
}

uint64_t HuffmanEncoder<unsigned short,unsigned int>::encodeSuccessors(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *((unsigned int *)a2 + 2);
  int v15 = 0;
  uint64_t v16 = 0;
  if (v5)
  {
    uint64_t v17 = 0;
    uint64_t v7 = 2 * v5;
    uint64_t v8 = 0;
    __int16 v9 = 0;
    HIDWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = realloc_array(0, &v17, 2 * v5, 0, 0, 1) >> 1;
    uint64_t v10 = v17;
    int v15 = v17;
    uint64_t v11 = *a2;
    int v12 = v16;
    do
    {
      __int16 v13 = *(_WORD *)(v11 + v8);
      if (v12 == HIDWORD(v16))
      {
        DgnPrimArray<short>::reallocElts((uint64_t)&v15, 1, 1);
        int v12 = v16;
        uint64_t v10 = v15;
        uint64_t v11 = *a2;
      }
      v10[v12++] = v13 - v9;
      LODWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v12;
      __int16 v9 = *(_WORD *)(v11 + v8);
      v8 += 2;
    }
    while (v7 != v8);
  }
  HuffmanEncoder<unsigned short,unsigned int>::encodeValues(a1, (uint64_t)&v15, a3);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v15);
}

void sub_213F98580(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t BigramData::fillInFullyLoadedBigramData(BigramData *this, BigramData *a2)
{
  uint64_t v4 = *((unsigned int *)this + 50);
  BigramData::configureBigramData(a2, 0, *((_DWORD *)this + 4), *((const unsigned __int16 **)this + 1));
  BigramData::preAllocateStaticBigramData(a2, v4);
  uint64_t v5 = 232;
  if (!*((_DWORD *)this + 1)) {
    uint64_t v5 = 216;
  }
  BigramData::preAllocateDynamicBigramData((uint64_t)a2, *((_DWORD *)this + 62), *(_DWORD *)((char *)this + v5));
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  if (v4 >= 2)
  {
    for (uint64_t i = 1; i != v4; ++i)
    {
      LODWORD(v33) = 0;
      LODWORD(v31) = 0;
      LODWORD(v29) = 0;
      if ((*(_DWORD *)(*((void *)this + 3) + 4 * (i >> 5)) >> i))
      {
        if (*(_WORD *)(*((void *)this + 24) + 2 * i))
        {
          unsigned __int16 v7 = 1;
          do
          {
            int v8 = *((_DWORD *)this + 4);
            int v9 = v7 - 1;
            uint64_t v10 = (*(_DWORD *)(*((void *)this + 22) + 4 * i) + v9);
            if (v8)
            {
              uint64_t v10 = *(unsigned __int8 *)(*((void *)this + 28) + v10);
              uint64_t v11 = *((void *)this + 1);
            }
            else
            {
              uint64_t v11 = *((void *)this + 26);
            }
            int v12 = *(unsigned __int16 *)(v11 + 2 * v10);
            if (v12 != 20000)
            {
              unsigned int v13 = v33;
              if (v33 == HIDWORD(v33))
              {
                DgnPrimArray<short>::reallocElts((uint64_t)&v32, 1, 1);
                unsigned int v13 = v33;
                int v8 = *((_DWORD *)this + 4);
              }
              *(_WORD *)(v32 + 2 * v13) = v7;
              LODWORD(v33) = v13 + 1;
              if (v8)
              {
                char v14 = *(unsigned char *)(*((void *)this + 28)
                               + (*(_DWORD *)(*((void *)this + 22) + 4 * i) + v9));
                uint64_t v15 = v29;
                if (v29 == (unint64_t)HIDWORD(v29))
                {
                  DgnPrimArray<char>::reallocElts((uint64_t)&v28, 1, 1);
                  uint64_t v15 = v29;
                }
                *(unsigned char *)(v28 + v15) = v14;
                int v16 = v29;
                uint64_t v17 = &v29;
              }
              else
              {
                int v16 = v31;
                if (v31 == HIDWORD(v31))
                {
                  DgnPrimArray<short>::reallocElts((uint64_t)&v30, 1, 1);
                  int v16 = v31;
                }
                v30[v16] = v12;
                uint64_t v17 = &v31;
              }
              *(_DWORD *)uint64_t v17 = v16 + 1;
            }
            ++v7;
          }
          while (*(unsigned __int16 *)(*((void *)this + 24) + 2 * i) >= v7);
        }
      }
      else if (*(_WORD *)(*((void *)this + 24) + 2 * i))
      {
        unsigned int v18 = 0;
        do
        {
          __int16 SearchSuccIdForIndex = BigramData::getSearchSuccIdForIndex(this, i, v18);
          int SearchScoreForIndex = BigramData::getSearchScoreForIndex(this, i, v18);
          __int16 v21 = SearchScoreForIndex;
          if (SearchScoreForIndex != 20000)
          {
            unsigned int v22 = v33;
            if (v33 == HIDWORD(v33))
            {
              DgnPrimArray<short>::reallocElts((uint64_t)&v32, 1, 1);
              unsigned int v22 = v33;
            }
            *(_WORD *)(v32 + 2 * v22) = SearchSuccIdForIndex;
            LODWORD(v33) = v22 + 1;
            if (*((_DWORD *)this + 4))
            {
              char SearchQuantizedScoreForIndex = BigramData::getSearchQuantizedScoreForIndex(this, i, v18);
              uint64_t v24 = v29;
              if (v29 == (unint64_t)HIDWORD(v29))
              {
                DgnPrimArray<char>::reallocElts((uint64_t)&v28, 1, 1);
                uint64_t v24 = v29;
              }
              *(unsigned char *)(v28 + vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = SearchQuantizedScoreForIndex;
              int v25 = v29;
              uint64_t v26 = &v29;
            }
            else
            {
              int v25 = v31;
              if (v31 == HIDWORD(v31))
              {
                DgnPrimArray<short>::reallocElts((uint64_t)&v30, 1, 1);
                int v25 = v31;
              }
              v30[v25] = v21;
              uint64_t v26 = &v31;
            }
            *(_DWORD *)uint64_t v26 = v25 + 1;
          }
          ++v18;
        }
        while (v18 < *(unsigned __int16 *)(*((void *)this + 24) + 2 * i));
      }
      if (v33) {
        BigramData::fillBigramRecord(a2, i, (uint64_t)&v32, &v30, &v28);
      }
    }
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v28);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v30);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v32);
}

void sub_213F988E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
}

void BigramData::fillBigramRecordLookup(uint64_t a1, unsigned int a2, unsigned __int16 **a3, _WORD **a4, void *a5)
{
  int v10 = (*a3)[*((_DWORD *)a3 + 2) - 1];
  BigramData::allocLookup((BigramData *)a1, a2, v10);
  if (*(_DWORD *)(a1 + 16))
  {
    if (v10)
    {
      int v11 = 0;
      unsigned int v12 = (unsigned __int16)(v10 + 1);
      if (v12 <= 2) {
        unsigned int v12 = 2;
      }
      unsigned int v13 = v12 - 1;
      do
      {
        *(unsigned char *)(*(void *)(a1 + 224) + (v11 + *(_DWORD *)(*(void *)(a1 + 176) + 4 * a2))) = 0;
        ++v11;
      }
      while (v13 != v11);
    }
    if (*((_DWORD *)a3 + 2))
    {
      unint64_t v14 = 0;
      do
      {
        *(unsigned char *)(*(void *)(a1 + 224) + (*a3)[v14] + *(_DWORD *)(*(void *)(a1 + 176) + 4 * a2) - 1) = *(unsigned char *)(*a5 + v14);
        ++v14;
      }
      while (v14 < *((unsigned int *)a3 + 2));
    }
  }
  else
  {
    if (v10)
    {
      unsigned int v15 = *(_DWORD *)(*(void *)(a1 + 176) + 4 * a2);
      uint64_t v16 = *(void *)(a1 + 208);
      if ((unsigned __int16)(v10 + 1) <= 2u) {
        uint64_t v17 = 2;
      }
      else {
        uint64_t v17 = (unsigned __int16)(v10 + 1);
      }
      uint64_t v18 = v17 - 1;
      do
      {
        *(_WORD *)(v16 + 2 * v15++) = 20000;
        --v18;
      }
      while (v18);
    }
    uint64_t v19 = *((unsigned int *)a3 + 2);
    if (v19)
    {
      int v20 = *a3;
      __int16 v21 = *a4;
      int v22 = *(_DWORD *)(*(void *)(a1 + 176) + 4 * a2);
      uint64_t v23 = *(void *)(a1 + 208);
      do
      {
        int v25 = *v20++;
        int v24 = v25;
        LOWORD(v25) = *v21++;
        *(_WORD *)(v23 + 2 * (v24 + v22 - 1)) = v25;
        --v19;
      }
      while (v19);
    }
  }
}

void BigramData::allocSearch(BigramData *this, unsigned int a2, int a3)
{
  BigramData::allocBi1(this, a2);
  *(_WORD *)(*((void *)this + 24) + 2 * a2) = a3;
  if (a3 == 1)
  {
    *(_DWORD *)(*((void *)this + 22) + 4 * a2) = -65536;
  }
  else
  {
    *(_DWORD *)(*((void *)this + 22) + 4 * a2) = *((_DWORD *)this + 62);
    unsigned int v6 = *((_DWORD *)this + 63);
    unsigned int v7 = *((_DWORD *)this + 62) + a3;
    if (v7 > v6)
    {
      DgnPrimArray<short>::reallocElts((uint64_t)this + 240, v7 - v6, 1);
      unsigned int v7 = *((_DWORD *)this + 62) + a3;
    }
    *((_DWORD *)this + 62) = v7;
    if (*((_DWORD *)this + 1))
    {
      unsigned int v8 = *((_DWORD *)this + 70) + a3;
      unsigned int v9 = *((_DWORD *)this + 71);
      if (v8 > v9)
      {
        DgnPrimArray<char>::reallocElts((uint64_t)this + 272, v8 - v9, 1);
        unsigned int v8 = *((_DWORD *)this + 70) + a3;
      }
      *((_DWORD *)this + 70) = v8;
    }
    else
    {
      unsigned int v10 = *((_DWORD *)this + 66) + a3;
      unsigned int v11 = *((_DWORD *)this + 67);
      if (v10 > v11)
      {
        DgnPrimArray<short>::reallocElts((uint64_t)this + 256, v10 - v11, 1);
        unsigned int v10 = *((_DWORD *)this + 66) + a3;
      }
      *((_DWORD *)this + 66) = v10;
    }
  }
}

uint64_t BigramData::setSearchSuccIdForIndex(uint64_t this, unsigned int a2, int a3, unsigned __int16 a4)
{
  uint64_t v4 = *(void *)(this + 176);
  uint64_t v5 = *(unsigned int *)(v4 + 4 * a2);
  if (*(_WORD *)(*(void *)(this + 192) + 2 * a2) == 1)
  {
    *(_DWORD *)(v4 + 4 * a2) = (unsigned __int16)*(_DWORD *)(v4 + 4 * a2) | (a4 << 16);
  }
  else
  {
    if (*(_DWORD *)this && ((*(_DWORD *)(*(void *)(this + 40) + 4 * (a2 >> 5)) >> a2) & 1) != 0)
    {
      unsigned int v6 = *(_DWORD *)(*(void *)(this + 320) + 4 * v5) + a3;
      uint64_t v7 = *(void *)(this + 336);
    }
    else
    {
      unsigned int v6 = v5 + a3;
      uint64_t v7 = *(void *)(this + 240);
    }
    *(_WORD *)(v7 + 2 * v6) = a4;
  }
  return this;
}

uint64_t BigramData::setSearchQuantizedScoreForIndex(uint64_t this, unsigned int a2, int a3, int a4)
{
  uint64_t v4 = *(void *)(this + 176);
  uint64_t v5 = *(unsigned int *)(v4 + 4 * a2);
  if (*(_WORD *)(*(void *)(this + 192) + 2 * a2) == 1)
  {
    *(_DWORD *)(v4 + 4 * a2) = v5 & 0xFFFF0000 | a4;
  }
  else
  {
    if (*(_DWORD *)this && ((*(_DWORD *)(*(void *)(this + 40) + 4 * (a2 >> 5)) >> a2) & 1) != 0)
    {
      unsigned int v6 = *(_DWORD *)(*(void *)(this + 320) + 4 * v5) + a3;
      uint64_t v7 = *(void *)(this + 368);
    }
    else
    {
      unsigned int v6 = v5 + a3;
      uint64_t v7 = *(void *)(this + 272);
    }
    *(unsigned char *)(v7 + v6) = a4;
  }
  return this;
}

uint64_t BigramData::setSearchScoreForIndex(uint64_t this, unsigned int a2, int a3, int a4)
{
  uint64_t v4 = *(void *)(this + 176);
  uint64_t v5 = *(unsigned int *)(v4 + 4 * a2);
  if (*(_WORD *)(*(void *)(this + 192) + 2 * a2) == 1)
  {
    *(_DWORD *)(v4 + 4 * a2) = v5 & 0xFFFF0000 | a4;
  }
  else
  {
    if (*(_DWORD *)this && ((*(_DWORD *)(*(void *)(this + 40) + 4 * (a2 >> 5)) >> a2) & 1) != 0)
    {
      unsigned int v6 = *(_DWORD *)(*(void *)(this + 320) + 4 * v5) + a3;
      uint64_t v7 = *(void *)(this + 352);
    }
    else
    {
      unsigned int v6 = v5 + a3;
      uint64_t v7 = *(void *)(this + 256);
    }
    *(_WORD *)(v7 + 2 * v6) = a4;
  }
  return this;
}

void BigramData::allocLookup(BigramData *this, unsigned int a2, int a3)
{
  BigramData::allocBi1(this, a2);
  uint64_t v6 = *((void *)this + 22);
  if (*((_DWORD *)this + 1))
  {
    *(_DWORD *)(v6 + 4 * a2) = *((_DWORD *)this + 58);
    unsigned int v7 = *((_DWORD *)this + 59);
    unsigned int v8 = *((_DWORD *)this + 58) + a3;
    if (v8 > v7)
    {
      DgnPrimArray<char>::reallocElts((uint64_t)this + 224, v8 - v7, 1);
      unsigned int v8 = *((_DWORD *)this + 58) + a3;
    }
    *((_DWORD *)this + 5DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v8;
  }
  else
  {
    *(_DWORD *)(v6 + 4 * a2) = *((_DWORD *)this + 54);
    unsigned int v9 = *((_DWORD *)this + 55);
    unsigned int v10 = *((_DWORD *)this + 54) + a3;
    if (v10 > v9)
    {
      DgnPrimArray<short>::reallocElts((uint64_t)this + 208, v10 - v9, 1);
      unsigned int v10 = *((_DWORD *)this + 54) + a3;
    }
    *((_DWORD *)this + 54) = v10;
  }
  *(_WORD *)(*((void *)this + 24) + 2 * a2) = a3;
  *(_DWORD *)(*((void *)this + 3) + 4 * (a2 >> 5)) |= 1 << a2;
}

void BigramData::fillBigramRecordPreload(BigramData *this, unsigned int a2, uint64_t a3, __int16 **a4, void *a5)
{
  uint64_t v10 = 3;
  if (!*((_DWORD *)this + 4)) {
    uint64_t v10 = 4;
  }
  if (v10 * (unint64_t)*(unsigned int *)(a3 + 8) >= *(unsigned __int16 *)(*(void *)a3
                                                                                + 2
                                                                                * (*(_DWORD *)(a3 + 8) - 1)) << (*((_DWORD *)this + 4) == 0))
  {
    BigramData::fillBigramRecordLookup((uint64_t)this, a2, (unsigned __int16 **)a3, a4, a5);
  }
  else
  {
    BigramData::allocSearch(this, a2, (unsigned __int16)*(_DWORD *)(a3 + 8));
    uint64_t v11 = *(unsigned int *)(a3 + 8);
    if (*((_DWORD *)this + 4))
    {
      if (v11)
      {
        unint64_t v12 = 0;
        do
        {
          unsigned int v13 = v12 + *(_DWORD *)(*((void *)this + 22) + 4 * a2);
          *(_WORD *)(*((void *)this + 30) + 2 * v13) = *(_WORD *)(*(void *)a3 + 2 * v12);
          *(unsigned char *)(*((void *)this + 34) + v13) = *(unsigned char *)(*a5 + v12++);
        }
        while (v12 < *(unsigned int *)(a3 + 8));
      }
    }
    else if (v11)
    {
      unint64_t v14 = *(unsigned __int16 **)a3;
      unsigned int v15 = *(_DWORD *)(*((void *)this + 22) + 4 * a2);
      uint64_t v16 = *((void *)this + 30);
      uint64_t v17 = *a4;
      uint64_t v18 = *((void *)this + 32);
      do
      {
        __int16 v19 = *v14++;
        *(_WORD *)(v16 + 2 * v15) = v19;
        __int16 v20 = *v17++;
        *(_WORD *)(v18 + 2 * v15++) = v20;
        --v11;
      }
      while (v11);
    }
  }
}

_DWORD *BigramData::addBigramScoreQuantization(_DWORD *this, unsigned __int8 a2, __int16 a3)
{
  uint64_t v4 = this;
  this[1] = 1;
  uint64_t v5 = (uint64_t)(this + 2);
  unsigned int v6 = this[4];
  if (!v6)
  {
    if (this[5])
    {
      unsigned int v7 = 0;
    }
    else
    {
      this = (_DWORD *)DgnPrimArray<short>::reallocElts((uint64_t)(this + 2), 1, 1);
      unsigned int v7 = v4[4];
    }
    *(_WORD *)(*((void *)v4 + 1) + 2 * v7) = 20000;
    unsigned int v6 = v7 + 1;
    v4[4] = v6;
  }
  if (v6 == v4[5])
  {
    this = (_DWORD *)DgnPrimArray<short>::reallocElts(v5, 1, 1);
    unsigned int v6 = v4[4];
  }
  *(_WORD *)(*((void *)v4 + 1) + 2 * v6) = a3;
  v4[4] = v6 + 1;
  return this;
}

unint64_t BigramData::allocLoaded(unint64_t this, unsigned int a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(void *)(this + 176);
  uint64_t v5 = a2;
  int v6 = *(_DWORD *)(v4 + 4 * a2);
  *(_DWORD *)(v4 + 4 * a2) = *(_DWORD *)(this + 312);
  unsigned int v7 = *(_DWORD *)(this + 312);
  if (v7 == *(_DWORD *)(this + 316))
  {
    this = DgnPrimArray<unsigned int>::reallocElts(this + 304, 1, 1);
    unsigned int v7 = *(_DWORD *)(v3 + 312);
  }
  *(_DWORD *)(*(void *)(v3 + 304) + 4 * v7) = v6;
  ++*(_DWORD *)(v3 + 312);
  int v8 = *(_DWORD *)(v3 + 344);
  unsigned int v9 = *(_DWORD *)(v3 + 328);
  if (v9 == *(_DWORD *)(v3 + 332))
  {
    this = DgnPrimArray<unsigned int>::reallocElts(v3 + 320, 1, 1);
    unsigned int v9 = *(_DWORD *)(v3 + 328);
  }
  *(_DWORD *)(*(void *)(v3 + 320) + 4 * v9) = v8;
  ++*(_DWORD *)(v3 + 328);
  int v10 = *(unsigned __int16 *)(*(void *)(v3 + 192) + 2 * v5);
  unsigned int v11 = *(_DWORD *)(v3 + 344) + v10;
  unsigned int v12 = *(_DWORD *)(v3 + 348);
  if (v11 > v12)
  {
    this = DgnPrimArray<short>::reallocElts(v3 + 336, v11 - v12, 1);
    unsigned int v11 = *(_DWORD *)(v3 + 344) + v10;
  }
  *(_DWORD *)(v3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 344) = v11;
  if (*(_DWORD *)(v3 + 4))
  {
    unsigned int v13 = *(_DWORD *)(v3 + 376) + v10;
    unsigned int v14 = *(_DWORD *)(v3 + 380);
    if (v13 > v14)
    {
      this = DgnPrimArray<char>::reallocElts(v3 + 368, v13 - v14, 1);
      unsigned int v13 = *(_DWORD *)(v3 + 376) + v10;
    }
    *(_DWORD *)(v3 + 376) = v13;
  }
  else
  {
    unsigned int v15 = *(_DWORD *)(v3 + 360) + v10;
    unsigned int v16 = *(_DWORD *)(v3 + 364);
    if (v15 > v16)
    {
      this = DgnPrimArray<short>::reallocElts(v3 + 352, v15 - v16, 1);
      unsigned int v15 = *(_DWORD *)(v3 + 360) + v10;
    }
    *(_DWORD *)(v3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 360) = v15;
  }
  *(_DWORD *)(*(void *)(v3 + 56) + 4 * (a2 >> 5)) |= 1 << a2;
  unsigned int v17 = *(_DWORD *)(v3 + 296);
  if (v17 == *(_DWORD *)(v3 + 300))
  {
    this = DgnPrimArray<unsigned int>::reallocElts(v3 + 288, 1, 1);
    unsigned int v17 = *(_DWORD *)(v3 + 296);
  }
  *(_DWORD *)(*(void *)(v3 + 288) + 4 * v17) = a2;
  ++*(_DWORD *)(v3 + 296);
  return this;
}

void TrigramData::TrigramData(TrigramData *this)
{
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  DgnString::DgnString((TrigramData *)((char *)this + 128));
  DgnString::DgnString((TrigramData *)((char *)this + 144));
  DgnString::DgnString((TrigramData *)((char *)this + 160));
  DgnString::DgnString((TrigramData *)((char *)this + 176));
  *((_OWORD *)this + 12) = 0u;
  *(void *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((void *)this + 60) = 0;
  TrigramData::allocTri1(this, 0, 0);
}

void sub_213F991E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, BitArray *a18)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray(v19 + 472);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v19 + 456);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v19 + 440);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v19 + 424);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v19 + 408);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v19 + 392);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v19 + 376);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v19 + 360);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v19 + 344);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v19 + 328);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v19 + 312);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v19 + 296);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v19 + 280);
  HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder(v24);
  BitArray::~BitArray(v23);
  BitArray::~BitArray(v22);
  BitArray::~BitArray(v21);
  BitArray::~BitArray(v20);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v19 + 112);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v19 + 96);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v19 + 80);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v19 + 64);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v19 + 48);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v19 + 32);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v18);
  _Unwind_Resume(a1);
}

void TrigramData::allocTri1(TrigramData *this, unsigned int a2, int a3)
{
  unsigned int v6 = *((_DWORD *)this + 14);
  if (v6 <= a2)
  {
    do
    {
      if (v6 == *((_DWORD *)this + 15))
      {
        DgnPrimArray<short>::reallocElts((uint64_t)this + 48, 1, 1);
        unsigned int v6 = *((_DWORD *)this + 14);
      }
      *(_WORD *)(*((void *)this + 6) + 2 * v6) = 0;
      *((_DWORD *)this + 14) = v6 + 1;
      uint64_t v8 = *((unsigned int *)this + 18);
      if (v8 == *((_DWORD *)this + 19))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 64, 1, 1);
        uint64_t v8 = *((unsigned int *)this + 18);
      }
      uint64_t v7 = *((void *)this + 8);
      *(_DWORD *)(v7 + 4 * vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = -1;
      ++*((_DWORD *)this + 18);
      unsigned int v6 = *((_DWORD *)this + 14);
    }
    while (v6 <= a2);
  }
  else
  {
    uint64_t v7 = *((void *)this + 8);
  }
  *(_WORD *)(*((void *)this + 6) + 2 * a2) = a3;
  *(_DWORD *)(v7 + 4 * a2) = *((_DWORD *)this + 22);
  unsigned int v9 = *((_DWORD *)this + 23);
  unsigned int v10 = *((_DWORD *)this + 22) + a3;
  if (v10 > v9)
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 80, v10 - v9, 1);
    unsigned int v10 = *((_DWORD *)this + 22) + a3;
  }
  *((_DWORD *)this + 22) = v10;
  if (*((_DWORD *)this + 1))
  {
    unsigned int v11 = *((_DWORD *)this + 31);
    unsigned int v12 = *((_DWORD *)this + 30) + a3;
    if (v12 > v11)
    {
      DgnPrimArray<char>::reallocElts((uint64_t)this + 112, v12 - v11, 1);
      unsigned int v12 = *((_DWORD *)this + 30) + a3;
    }
    *((_DWORD *)this + 30) = v12;
  }
  else
  {
    unsigned int v13 = *((_DWORD *)this + 27);
    unsigned int v14 = *((_DWORD *)this + 26) + a3;
    if (v14 > v13)
    {
      DgnPrimArray<short>::reallocElts((uint64_t)this + 96, v14 - v13, 1);
      unsigned int v14 = *((_DWORD *)this + 26) + a3;
    }
    *((_DWORD *)this + 26) = v14;
  }
  BitArray::addSize((TrigramData *)((char *)this + 128), a3);
  if (*(_DWORD *)this)
  {
    BitArray::addSize((TrigramData *)((char *)this + 144), a3);
    BitArray::addSize((TrigramData *)((char *)this + 160), a3);
    BitArray::addSize((TrigramData *)((char *)this + 176), a3);
  }
  unsigned int v15 = *((_DWORD *)this + 72) + a3;
  unsigned int v16 = *((_DWORD *)this + 73);
  if (v15 > v16)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 280, v15 - v16, 1);
    unsigned int v15 = *((_DWORD *)this + 72) + a3;
  }
  *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = v15;
  unsigned int v17 = *((_DWORD *)this + 76) + a3;
  unsigned int v18 = *((_DWORD *)this + 77);
  if (v17 > v18)
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 296, v17 - v18, 1);
    unsigned int v17 = *((_DWORD *)this + 76) + a3;
  }
  *((_DWORD *)this + 76) = v17;
}

void TrigramData::~TrigramData(TrigramData *this)
{
}

void **TrigramData::compact(void **this)
{
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 6));
  DgnPrimArray<unsigned int>::compact((unint64_t)(this + 8));
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 10));
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 12));
  DgnPrimArray<unsigned char>::compact(this + 14);
  BitArray::compact((BitArray *)(this + 16));
  BitArray::compact((BitArray *)(this + 18));
  BitArray::compact((BitArray *)(this + 20));
  BitArray::compact((BitArray *)(this + 22));
  DgnPrimArray<unsigned int>::compact((unint64_t)(this + 35));
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 37));
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 39));
  DgnPrimArray<unsigned char>::compact(this + 41);
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 43));
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 45));
  DgnPrimArray<unsigned char>::compact(this + 47);
  DgnPrimArray<unsigned int>::compact((unint64_t)(this + 49));
  DgnPrimArray<unsigned int>::compact((unint64_t)(this + 51));
  DgnPrimArray<unsigned int>::compact((unint64_t)(this + 53));
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 55));
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 57));

  return DgnPrimArray<unsigned char>::compact(this + 59);
}

void TrigramData::printSize(TrigramData *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1739, (DgnString *)&v293);
  if (v294) {
    unsigned int v16 = v293;
  }
  else {
    unsigned int v16 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_2140A6A10, a3, &unk_2140A6A10, v16);
  DgnString::~DgnString((DgnString *)&v293);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_2140A6A10);
  uint64_t v21 = (a3 + 1);
  uint64_t v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294) {
    uint64_t v27 = v293;
  }
  else {
    uint64_t v27 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_2140A6A10, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294) {
    uint64_t v32 = v293;
  }
  else {
    uint64_t v32 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_2140A6A10, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294) {
    unint64_t v37 = v293;
  }
  else {
    unint64_t v37 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &unk_2140A6A10, (34 - a3), (34 - a3), v37, 4, 4, 0);
  uint64_t v292 = a3;
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v38 = 12;
  }
  else {
    uint64_t v38 = 16;
  }
  uint64_t v39 = *((unsigned int *)this + 6);
  unsigned int v40 = *((_DWORD *)this + 7);
  if (v40 >= v39)
  {
    uint64_t v41 = 0;
    if ((int)v39 > 0) {
      uint64_t v38 = (v38 | 2) + 2 * (v39 - 1);
    }
    uint64_t v42 = v38 + 2 * (v40 - v39);
  }
  else
  {
    uint64_t v41 = 2 * v39;
    uint64_t v42 = v38;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294) {
    uint64_t v47 = v293;
  }
  else {
    uint64_t v47 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v43, v44, v45, v46, v21, &unk_2140A6A10, v22, v22, v47, v42, v38, v41);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += v42;
  *a5 += v38;
  *a6 += v41;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v48 = 12;
  }
  else {
    uint64_t v48 = 16;
  }
  uint64_t v49 = *((unsigned int *)this + 10);
  unsigned int v50 = *((_DWORD *)this + 11);
  if (v50 >= v49)
  {
    uint64_t v51 = 0;
    if ((int)v49 > 0) {
      uint64_t v48 = (v48 | 2) + 2 * (v49 - 1);
    }
    uint64_t v52 = v48 + 2 * (v50 - v49);
  }
  else
  {
    uint64_t v51 = 2 * v49;
    uint64_t v52 = v48;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294) {
    uint64_t v57 = v293;
  }
  else {
    uint64_t v57 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v53, v54, v55, v56, v21, &unk_2140A6A10, v22, v22, v57, v52, v48, v51);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += v52;
  *a5 += v48;
  *a6 += v51;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v58 = 12;
  }
  else {
    uint64_t v58 = 16;
  }
  uint64_t v59 = *((unsigned int *)this + 14);
  unsigned int v60 = *((_DWORD *)this + 15);
  if (v60 >= v59)
  {
    uint64_t v61 = 0;
    if ((int)v59 > 0) {
      uint64_t v58 = (v58 | 2) + 2 * (v59 - 1);
    }
    uint64_t v62 = v58 + 2 * (v60 - v59);
  }
  else
  {
    uint64_t v61 = 2 * v59;
    uint64_t v62 = v58;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294) {
    uint64_t v67 = v293;
  }
  else {
    uint64_t v67 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v63, v64, v65, v66, v21, &unk_2140A6A10, v22, v22, v67, v62, v58, v61);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += v62;
  *a5 += v58;
  *a6 += v61;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v68 = 12;
  }
  else {
    uint64_t v68 = 16;
  }
  uint64_t v69 = *((unsigned int *)this + 18);
  unsigned int v70 = *((_DWORD *)this + 19);
  if (v70 >= v69)
  {
    uint64_t v71 = 0;
    if ((int)v69 > 0) {
      v68 += 4 * (v69 - 1) + 4;
    }
    uint64_t v72 = v68 + 4 * (v70 - v69);
  }
  else
  {
    uint64_t v71 = 4 * v69;
    uint64_t v72 = v68;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294) {
    uint64_t v77 = v293;
  }
  else {
    uint64_t v77 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v73, v74, v75, v76, v21, &unk_2140A6A10, v22, v22, v77, v72, v68, v71);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += v72;
  *a5 += v68;
  *a6 += v71;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v78 = 12;
  }
  else {
    uint64_t v78 = 16;
  }
  uint64_t v79 = *((unsigned int *)this + 22);
  unsigned int v80 = *((_DWORD *)this + 23);
  if (v80 >= v79)
  {
    uint64_t v81 = 0;
    if ((int)v79 > 0) {
      uint64_t v78 = (v78 | 2) + 2 * (v79 - 1);
    }
    uint64_t v82 = v78 + 2 * (v80 - v79);
  }
  else
  {
    uint64_t v81 = 2 * v79;
    uint64_t v82 = v78;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294) {
    uint64_t v87 = v293;
  }
  else {
    uint64_t v87 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v83, v84, v85, v86, v21, &unk_2140A6A10, v22, v22, v87, v82, v78, v81);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += v82;
  *a5 += v78;
  *a6 += v81;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v88 = 12;
  }
  else {
    uint64_t v88 = 16;
  }
  uint64_t v89 = *((unsigned int *)this + 26);
  unsigned int v90 = *((_DWORD *)this + 27);
  if (v90 >= v89)
  {
    uint64_t v91 = 0;
    if ((int)v89 > 0) {
      uint64_t v88 = (v88 | 2) + 2 * (v89 - 1);
    }
    uint64_t v92 = v88 + 2 * (v90 - v89);
  }
  else
  {
    uint64_t v91 = 2 * v89;
    uint64_t v92 = v88;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294) {
    uint64_t v97 = v293;
  }
  else {
    uint64_t v97 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v93, v94, v95, v96, v21, &unk_2140A6A10, v22, v22, v97, v92, v88, v91);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += v92;
  *a5 += v88;
  *a6 += v91;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v98 = 12;
  }
  else {
    uint64_t v98 = 16;
  }
  int v99 = *((_DWORD *)this + 30);
  unsigned int v100 = *((_DWORD *)this + 31);
  BOOL v101 = v100 >= v99;
  uint64_t v102 = v100 - v99;
  if (v101)
  {
    uint64_t v104 = v99 & ~(v99 >> 31);
    int v99 = 0;
    uint64_t v103 = v98 + v104;
    v98 += v104 + v102;
  }
  else
  {
    uint64_t v103 = v98;
  }
  uint64_t v105 = v99;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294) {
    uint64_t v110 = v293;
  }
  else {
    uint64_t v110 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v106, v107, v108, v109, v21, &unk_2140A6A10, v22, v22, v110, v98, v103, v105);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += v98;
  *a5 += v103;
  *a6 += v105;
  uint64_t v111 = BitArray::sizeObject((uint64_t)this + 128, 0);
  uint64_t v112 = BitArray::sizeObject((uint64_t)this + 128, 1);
  uint64_t v113 = BitArray::sizeObject((uint64_t)this + 128, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294) {
    uint64_t v118 = v293;
  }
  else {
    uint64_t v118 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v114, v115, v116, v117, v21, &unk_2140A6A10, v22, v22, v118, v111, v112, v113);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += v111;
  *a5 += v112;
  *a6 += v113;
  uint64_t v119 = BitArray::sizeObject((uint64_t)this + 144, 0);
  uint64_t v120 = BitArray::sizeObject((uint64_t)this + 144, 1);
  uint64_t v121 = BitArray::sizeObject((uint64_t)this + 144, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294) {
    uint64_t v126 = v293;
  }
  else {
    uint64_t v126 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v122, v123, v124, v125, v21, &unk_2140A6A10, v22, v22, v126, v119, v120, v121);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += v119;
  *a5 += v120;
  *a6 += v121;
  uint64_t v127 = BitArray::sizeObject((uint64_t)this + 160, 0);
  uint64_t v128 = BitArray::sizeObject((uint64_t)this + 160, 1);
  uint64_t v129 = BitArray::sizeObject((uint64_t)this + 160, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294) {
    uint64_t v134 = v293;
  }
  else {
    uint64_t v134 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v130, v131, v132, v133, v21, &unk_2140A6A10, v22, v22, v134, v127, v128, v129);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += v127;
  *a5 += v128;
  *a6 += v129;
  uint64_t v135 = BitArray::sizeObject((uint64_t)this + 176, 0);
  uint64_t v136 = BitArray::sizeObject((uint64_t)this + 176, 1);
  uint64_t v137 = BitArray::sizeObject((uint64_t)this + 176, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294) {
    uint64_t v142 = v293;
  }
  else {
    uint64_t v142 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v138, v139, v140, v141, v21, &unk_2140A6A10, v22, v22, v142, v135, v136, v137);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += v135;
  *a5 += v136;
  *a6 += v137;
  uint64_t v143 = HuffmanDecoder<unsigned short,unsigned int>::sizeObject((uint64_t)this + 192, 0);
  uint64_t v144 = HuffmanDecoder<unsigned short,unsigned int>::sizeObject((uint64_t)this + 192, 1);
  uint64_t v145 = HuffmanDecoder<unsigned short,unsigned int>::sizeObject((uint64_t)this + 192, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294) {
    uint64_t v150 = v293;
  }
  else {
    uint64_t v150 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v146, v147, v148, v149, v21, &unk_2140A6A10, v22, v22, v150, v143, v144, v145);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += v143;
  *a5 += v144;
  *a6 += v145;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v151 = 12;
  }
  else {
    uint64_t v151 = 16;
  }
  uint64_t v152 = *((unsigned int *)this + 72);
  unsigned int v153 = *((_DWORD *)this + 73);
  if (v153 >= v152)
  {
    uint64_t v154 = 0;
    if ((int)v152 > 0) {
      v151 += 4 * (v152 - 1) + 4;
    }
    uint64_t v155 = v151 + 4 * (v153 - v152);
  }
  else
  {
    uint64_t v154 = 4 * v152;
    uint64_t v155 = v151;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294) {
    unsigned int v160 = v293;
  }
  else {
    unsigned int v160 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v156, v157, v158, v159, v21, &unk_2140A6A10, v22, v22, v160, v155, v151, v154);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += v155;
  *a5 += v151;
  *a6 += v154;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v161 = 12;
  }
  else {
    uint64_t v161 = 16;
  }
  uint64_t v162 = *((unsigned int *)this + 76);
  unsigned int v163 = *((_DWORD *)this + 77);
  if (v163 >= v162)
  {
    uint64_t v164 = 0;
    if ((int)v162 > 0) {
      uint64_t v161 = (v161 | 2) + 2 * (v162 - 1);
    }
    uint64_t v165 = v161 + 2 * (v163 - v162);
  }
  else
  {
    uint64_t v164 = 2 * v162;
    uint64_t v165 = v161;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294) {
    unsigned int v170 = v293;
  }
  else {
    unsigned int v170 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v166, v167, v168, v169, v21, &unk_2140A6A10, v22, v22, v170, v165, v161, v164);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += v165;
  *a5 += v161;
  *a6 += v164;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v171 = 12;
  }
  else {
    uint64_t v171 = 16;
  }
  uint64_t v172 = *((unsigned int *)this + 80);
  unsigned int v173 = *((_DWORD *)this + 81);
  if (v173 >= v172)
  {
    uint64_t v174 = 0;
    if ((int)v172 > 0) {
      uint64_t v171 = (v171 | 2) + 2 * (v172 - 1);
    }
    uint64_t v175 = v171 + 2 * (v173 - v172);
  }
  else
  {
    uint64_t v174 = 2 * v172;
    uint64_t v175 = v171;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294) {
    unsigned int v180 = v293;
  }
  else {
    unsigned int v180 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v176, v177, v178, v179, v21, &unk_2140A6A10, v22, v22, v180, v175, v171, v174);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += v175;
  *a5 += v171;
  *a6 += v174;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v181 = 12;
  }
  else {
    uint64_t v181 = 16;
  }
  int v182 = *((_DWORD *)this + 84);
  unsigned int v183 = *((_DWORD *)this + 85);
  BOOL v101 = v183 >= v182;
  uint64_t v184 = v183 - v182;
  if (v101)
  {
    uint64_t v186 = v182 & ~(v182 >> 31);
    int v182 = 0;
    uint64_t v185 = v181 + v186;
    v181 += v186 + v184;
  }
  else
  {
    uint64_t v185 = v181;
  }
  uint64_t v187 = v182;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294) {
    uint64_t v192 = v293;
  }
  else {
    uint64_t v192 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v188, v189, v190, v191, v21, &unk_2140A6A10, v22, v22, v192, v181, v185, v187);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += v181;
  *a5 += v185;
  *a6 += v187;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v193 = 12;
  }
  else {
    uint64_t v193 = 16;
  }
  uint64_t v194 = *((unsigned int *)this + 88);
  unsigned int v195 = *((_DWORD *)this + 89);
  if (v195 >= v194)
  {
    uint64_t v196 = 0;
    if ((int)v194 > 0) {
      uint64_t v193 = (v193 | 2) + 2 * (v194 - 1);
    }
    uint64_t v197 = v193 + 2 * (v195 - v194);
  }
  else
  {
    uint64_t v196 = 2 * v194;
    uint64_t v197 = v193;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294) {
    uint64_t v202 = v293;
  }
  else {
    uint64_t v202 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v198, v199, v200, v201, v21, &unk_2140A6A10, v22, v22, v202, v197, v193, v196);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += v197;
  *a5 += v193;
  *a6 += v196;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v203 = 12;
  }
  else {
    uint64_t v203 = 16;
  }
  uint64_t v204 = *((unsigned int *)this + 92);
  unsigned int v205 = *((_DWORD *)this + 93);
  if (v205 >= v204)
  {
    uint64_t v206 = 0;
    if ((int)v204 > 0) {
      uint64_t v203 = (v203 | 2) + 2 * (v204 - 1);
    }
    uint64_t v207 = v203 + 2 * (v205 - v204);
  }
  else
  {
    uint64_t v206 = 2 * v204;
    uint64_t v207 = v203;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294) {
    uint64_t v212 = v293;
  }
  else {
    uint64_t v212 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v208, v209, v210, v211, v21, &unk_2140A6A10, v22, v22, v212, v207, v203, v206);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += v207;
  *a5 += v203;
  *a6 += v206;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v213 = 12;
  }
  else {
    uint64_t v213 = 16;
  }
  int v214 = *((_DWORD *)this + 96);
  unsigned int v215 = *((_DWORD *)this + 97);
  BOOL v101 = v215 >= v214;
  uint64_t v216 = v215 - v214;
  if (v101)
  {
    uint64_t v218 = v214 & ~(v214 >> 31);
    int v214 = 0;
    uint64_t v217 = v213 + v218;
    v213 += v218 + v216;
  }
  else
  {
    uint64_t v217 = v213;
  }
  uint64_t v219 = v214;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294) {
    uint64_t v224 = v293;
  }
  else {
    uint64_t v224 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v220, v221, v222, v223, v21, &unk_2140A6A10, v22, v22, v224, v213, v217, v219);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += v213;
  *a5 += v217;
  *a6 += v219;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v225 = 12;
  }
  else {
    uint64_t v225 = 16;
  }
  uint64_t v226 = *((unsigned int *)this + 100);
  unsigned int v227 = *((_DWORD *)this + 101);
  if (v227 >= v226)
  {
    uint64_t v228 = 0;
    if ((int)v226 > 0) {
      v225 += 4 * (v226 - 1) + 4;
    }
    uint64_t v229 = v225 + 4 * (v227 - v226);
  }
  else
  {
    uint64_t v228 = 4 * v226;
    uint64_t v229 = v225;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294) {
    uint64_t v234 = v293;
  }
  else {
    uint64_t v234 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v230, v231, v232, v233, v21, &unk_2140A6A10, v22, v22, v234, v229, v225, v228);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += v229;
  *a5 += v225;
  *a6 += v228;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v235 = 12;
  }
  else {
    uint64_t v235 = 16;
  }
  uint64_t v236 = *((unsigned int *)this + 104);
  unsigned int v237 = *((_DWORD *)this + 105);
  if (v237 >= v236)
  {
    uint64_t v238 = 0;
    if ((int)v236 > 0) {
      v235 += 4 * (v236 - 1) + 4;
    }
    uint64_t v239 = v235 + 4 * (v237 - v236);
  }
  else
  {
    uint64_t v238 = 4 * v236;
    uint64_t v239 = v235;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294) {
    uint64_t v244 = v293;
  }
  else {
    uint64_t v244 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v240, v241, v242, v243, v21, &unk_2140A6A10, v22, v22, v244, v239, v235, v238);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += v239;
  *a5 += v235;
  *a6 += v238;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v245 = 12;
  }
  else {
    uint64_t v245 = 16;
  }
  uint64_t v246 = *((unsigned int *)this + 108);
  unsigned int v247 = *((_DWORD *)this + 109);
  if (v247 >= v246)
  {
    uint64_t v248 = 0;
    if ((int)v246 > 0) {
      v245 += 4 * (v246 - 1) + 4;
    }
    uint64_t v249 = v245 + 4 * (v247 - v246);
  }
  else
  {
    uint64_t v248 = 4 * v246;
    uint64_t v249 = v245;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294) {
    uint64_t v254 = v293;
  }
  else {
    uint64_t v254 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v250, v251, v252, v253, v21, &unk_2140A6A10, v22, v22, v254, v249, v245, v248);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += v249;
  *a5 += v245;
  *a6 += v248;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v255 = 12;
  }
  else {
    uint64_t v255 = 16;
  }
  uint64_t v256 = *((unsigned int *)this + 112);
  unsigned int v257 = *((_DWORD *)this + 113);
  if (v257 >= v256)
  {
    uint64_t v258 = 0;
    if ((int)v256 > 0) {
      uint64_t v255 = (v255 | 2) + 2 * (v256 - 1);
    }
    uint64_t v259 = v255 + 2 * (v257 - v256);
  }
  else
  {
    uint64_t v258 = 2 * v256;
    uint64_t v259 = v255;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294) {
    uint64_t v264 = v293;
  }
  else {
    uint64_t v264 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v260, v261, v262, v263, v21, &unk_2140A6A10, v22, v22, v264, v259, v255, v258);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += v259;
  *a5 += v255;
  *a6 += v258;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v265 = 12;
  }
  else {
    uint64_t v265 = 16;
  }
  uint64_t v266 = *((unsigned int *)this + 116);
  unsigned int v267 = *((_DWORD *)this + 117);
  if (v267 >= v266)
  {
    uint64_t v268 = 0;
    if ((int)v266 > 0) {
      uint64_t v265 = (v265 | 2) + 2 * (v266 - 1);
    }
    uint64_t v269 = v265 + 2 * (v267 - v266);
  }
  else
  {
    uint64_t v268 = 2 * v266;
    uint64_t v269 = v265;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294) {
    uint64_t v274 = v293;
  }
  else {
    uint64_t v274 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v270, v271, v272, v273, v21, &unk_2140A6A10, v22, v22, v274, v269, v265, v268);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += v269;
  *a5 += v265;
  *a6 += v268;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v275 = 12;
  }
  else {
    uint64_t v275 = 16;
  }
  int v276 = *((_DWORD *)this + 120);
  unsigned int v277 = *((_DWORD *)this + 121);
  BOOL v101 = v277 >= v276;
  uint64_t v278 = v277 - v276;
  if (v101)
  {
    uint64_t v280 = v276 & ~(v276 >> 31);
    int v276 = 0;
    uint64_t v279 = v275 + v280;
    v275 += v280 + v278;
  }
  else
  {
    uint64_t v279 = v275;
  }
  uint64_t v281 = v276;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1743, (DgnString *)&v293);
  if (v294) {
    uint64_t v286 = v293;
  }
  else {
    uint64_t v286 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v282, v283, v284, v285, v21, &unk_2140A6A10, v22, v22, v286, v275, v279, v281);
  DgnString::~DgnString((DgnString *)&v293);
  *a4 += v275;
  *a5 += v279;
  *a6 += v281;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 1744, (DgnString *)&v293);
  if (v294) {
    uint64_t v291 = v293;
  }
  else {
    uint64_t v291 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v287, v288, v289, v290, v292, &unk_2140A6A10, (35 - v292), (35 - v292), v291, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v293);
}

void sub_213F9AB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void **TrigramData::copyTrigramData(TrigramData *this, const TrigramData *a2)
{
  *(void *)this = *(void *)a2;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 16, (uint64_t *)a2 + 2, 0, *((_DWORD *)a2 + 6));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 32, (uint64_t *)a2 + 4, 0, *((_DWORD *)a2 + 10));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 48, (uint64_t *)a2 + 6, 0, *((_DWORD *)a2 + 14));
  DgnPrimArray<int>::copyArraySlice((unint64_t)this + 64, (uint64_t *)a2 + 8, 0, *((_DWORD *)a2 + 18));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 80, (uint64_t *)a2 + 10, 0, *((_DWORD *)a2 + 22));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 96, (uint64_t *)a2 + 12, 0, *((_DWORD *)a2 + 26));
  DgnPrimArray<unsigned char>::copyArraySlice((unint64_t)this + 112, (void *)a2 + 14, 0, *((_DWORD *)a2 + 30));
  BitArray::operator=((int **)this + 16, (uint64_t)a2 + 128);
  BitArray::operator=((int **)this + 18, (uint64_t)a2 + 144);
  BitArray::operator=((int **)this + 20, (uint64_t)a2 + 160);
  BitArray::operator=((int **)this + 22, (uint64_t)a2 + 176);
  HuffmanDecoder<unsigned short,unsigned int>::operator=((unint64_t)this + 192, (uint64_t)a2 + 192);
  DgnPrimArray<int>::copyArraySlice((unint64_t)this + 280, (uint64_t *)a2 + 35, 0, *((_DWORD *)a2 + 72));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 296, (uint64_t *)a2 + 37, 0, *((_DWORD *)a2 + 76));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 312, (uint64_t *)a2 + 39, 0, *((_DWORD *)a2 + 80));
  DgnPrimArray<unsigned char>::copyArraySlice((unint64_t)this + 328, (void *)a2 + 41, 0, *((_DWORD *)a2 + 84));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 344, (uint64_t *)a2 + 43, 0, *((_DWORD *)a2 + 88));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 360, (uint64_t *)a2 + 45, 0, *((_DWORD *)a2 + 92));
  DgnPrimArray<unsigned char>::copyArraySlice((unint64_t)this + 376, (void *)a2 + 47, 0, *((_DWORD *)a2 + 96));
  DgnPrimArray<int>::copyArraySlice((unint64_t)this + 392, (uint64_t *)a2 + 49, 0, *((_DWORD *)a2 + 100));
  DgnPrimArray<int>::copyArraySlice((unint64_t)this + 408, (uint64_t *)a2 + 51, 0, *((_DWORD *)a2 + 104));
  DgnPrimArray<int>::copyArraySlice((unint64_t)this + 424, (uint64_t *)a2 + 53, 0, *((_DWORD *)a2 + 108));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 440, (uint64_t *)a2 + 55, 0, *((_DWORD *)a2 + 112));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 456, (uint64_t *)a2 + 57, 0, *((_DWORD *)a2 + 116));
  DgnPrimArray<unsigned char>::copyArraySlice((unint64_t)this + 472, (void *)a2 + 59, 0, *((_DWORD *)a2 + 120));

  return TrigramData::compact((void **)this);
}

uint64_t TrigramData::saveBinary(TrigramData *this, DgnStream *a2, unsigned int *a3)
{
  writeObject((uint64_t)a2, (int *)this, a3);
  writeObject((uint64_t)a2, (int *)this + 1, a3);
  writeObject((uint64_t)a2, (int *)this + 2, a3);
  writeObject<short>((uint64_t)a2, (uint64_t)this + 16, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 32, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 48, a3);
  writeObject<unsigned int>((uint64_t)a2, (uint64_t)this + 64, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 80, a3);
  writeObject<short>((uint64_t)a2, (uint64_t)this + 96, a3);
  writeObject<unsigned char>((uint64_t)a2, (uint64_t)this + 112, a3);
  writeObject((uint64_t)a2, (uint64_t)this + 128, a3);
  writeObject((uint64_t)a2, (uint64_t)this + 144, a3);
  writeObject((uint64_t)a2, (uint64_t)this + 160, a3);
  writeObject((uint64_t)a2, (uint64_t)this + 176, a3);
  HuffmanDecoder<unsigned short,unsigned int>::writeObject((uint64_t)this + 192, (uint64_t)a2, a3);
  writeObject<unsigned int>((uint64_t)a2, (uint64_t)this + 280, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 296, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 312, a3);
  writeObject<unsigned char>((uint64_t)a2, (uint64_t)this + 328, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 344, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 360, a3);
  writeObject<unsigned char>((uint64_t)a2, (uint64_t)this + 376, a3);
  writeObject<unsigned int>((uint64_t)a2, (uint64_t)this + 392, a3);
  writeObject<unsigned int>((uint64_t)a2, (uint64_t)this + 408, a3);
  writeObject<unsigned int>((uint64_t)a2, (uint64_t)this + 424, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 440, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 456, a3);

  return writeObject<unsigned char>((uint64_t)a2, (uint64_t)this + 472, a3);
}

void TrigramData::loadBinary(TrigramData *this, DgnStream *a2, unsigned int *a3)
{
  readObject((uint64_t)a2, this, a3);
  readObject((uint64_t)a2, (_DWORD *)this + 1, a3);
  readObject((uint64_t)a2, (_DWORD *)this + 2, a3);
  readObject<short>(a2, (uint64_t)this + 16, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 32, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 48, a3);
  readObject<unsigned int>(a2, (uint64_t)this + 64, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 80, a3);
  readObject<short>(a2, (uint64_t)this + 96, a3);
  readObject<unsigned char>(a2, (uint64_t)this + 112, a3);
  readObject(a2, (TrigramData *)((char *)this + 128), a3);
  readObject(a2, (TrigramData *)((char *)this + 144), a3);
  readObject(a2, (TrigramData *)((char *)this + 160), a3);
  readObject(a2, (TrigramData *)((char *)this + 176), a3);
  HuffmanDecoder<unsigned short,unsigned int>::readObject((unint64_t)this + 192, a2, a3);
  readObject<unsigned int>(a2, (uint64_t)this + 280, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 296, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 312, a3);
  readObject<unsigned char>(a2, (uint64_t)this + 328, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 344, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 360, a3);
  readObject<unsigned char>(a2, (uint64_t)this + 376, a3);
  readObject<unsigned int>(a2, (uint64_t)this + 392, a3);
  readObject<unsigned int>(a2, (uint64_t)this + 408, a3);
  readObject<unsigned int>(a2, (uint64_t)this + 424, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 440, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 456, a3);

  readObject<unsigned char>(a2, (uint64_t)this + 472, a3);
}

char *TrigramData::saveBinaryShared(TrigramData *this, DgnSharedMemStream *a2, int a3, unsigned int *a4)
{
  if (a3)
  {
    writeObject((uint64_t)a2, (int *)this, a4);
    writeObject((uint64_t)a2, (int *)this + 1, a4);
    writeObject((uint64_t)a2, (int *)this + 2, a4);
    writeSharedObject<short>(a2, (uint64_t)this + 16, a4);
    writeSharedObject<short>(a2, (uint64_t)this + 32, a4);
    writeSharedObject<short>(a2, (uint64_t)this + 48, a4);
    writeSharedObject<unsigned int>(a2, (uint64_t)this + 64, a4);
    writeSharedObject<short>(a2, (uint64_t)this + 80, a4);
    writeSharedObject<short>(a2, (uint64_t)this + 96, a4);
    writeSharedObject<unsigned char>(a2, (uint64_t)this + 112, a4);
    writeSharedObject(a2, (TrigramData *)((char *)this + 128), a4);
    writeSharedObject(a2, (TrigramData *)((char *)this + 144), a4);
    writeSharedObject(a2, (TrigramData *)((char *)this + 160), a4);
    writeSharedObject(a2, (TrigramData *)((char *)this + 176), a4);
    HuffmanDecoder<unsigned short,unsigned int>::writeObject((uint64_t)this + 192, (uint64_t)a2, a4);
  }
  else
  {
    writeSharedObject<short>(a2, (uint64_t)this + 16, a4);
    writeSharedObject<short>(a2, (uint64_t)this + 32, a4);
    writeSharedObject<short>(a2, (uint64_t)this + 48, a4);
    writeSharedObject<unsigned int>(a2, (uint64_t)this + 64, a4);
    writeSharedObject<short>(a2, (uint64_t)this + 80, a4);
    writeSharedObject<short>(a2, (uint64_t)this + 96, a4);
    writeSharedObject<unsigned char>(a2, (uint64_t)this + 112, a4);
    writeSharedObject(a2, (TrigramData *)((char *)this + 128), a4);
    writeSharedObject(a2, (TrigramData *)((char *)this + 144), a4);
    writeSharedObject(a2, (TrigramData *)((char *)this + 160), a4);
    writeSharedObject(a2, (TrigramData *)((char *)this + 176), a4);
  }
  writeSharedObject<unsigned int>(a2, (uint64_t)this + 280, a4);
  writeSharedObject<short>(a2, (uint64_t)this + 296, a4);
  writeSharedObject<short>(a2, (uint64_t)this + 312, a4);
  writeSharedObject<unsigned char>(a2, (uint64_t)this + 328, a4);
  writeSharedObject<short>(a2, (uint64_t)this + 344, a4);
  writeSharedObject<short>(a2, (uint64_t)this + 360, a4);
  writeSharedObject<unsigned char>(a2, (uint64_t)this + 376, a4);
  writeSharedObject<unsigned int>(a2, (uint64_t)this + 392, a4);
  writeSharedObject<unsigned int>(a2, (uint64_t)this + 408, a4);
  writeSharedObject<unsigned int>(a2, (uint64_t)this + 424, a4);
  writeSharedObject<short>(a2, (uint64_t)this + 440, a4);
  writeSharedObject<short>(a2, (uint64_t)this + 456, a4);

  return writeSharedObject<unsigned char>(a2, (uint64_t)this + 472, a4);
}

int *TrigramData::loadBinaryShared(TrigramData *this, DgnSharedMemStream *a2, int a3, unsigned int *a4)
{
  if (a3)
  {
    readObject((uint64_t)a2, this, a4);
    readObject((uint64_t)a2, (_DWORD *)this + 1, a4);
    readObject((uint64_t)a2, (_DWORD *)this + 2, a4);
    readSharedObject<short>(a2, (uint64_t)this + 16, a4);
    readSharedObject<short>(a2, (uint64_t)this + 32, a4);
    readSharedObject<short>(a2, (uint64_t)this + 48, a4);
    readSharedObject<unsigned int>(a2, (uint64_t)this + 64, a4);
    readSharedObject<short>(a2, (uint64_t)this + 80, a4);
    readSharedObject<short>(a2, (uint64_t)this + 96, a4);
    readSharedObject<unsigned char>(a2, (uint64_t)this + 112, a4);
    readSharedObject(a2, (TrigramData *)((char *)this + 128), a4);
    readSharedObject(a2, (TrigramData *)((char *)this + 144), a4);
    readSharedObject(a2, (TrigramData *)((char *)this + 160), a4);
    readSharedObject(a2, (TrigramData *)((char *)this + 176), a4);
    HuffmanDecoder<unsigned short,unsigned int>::readObject((unint64_t)this + 192, a2, a4);
  }
  else
  {
    readSharedObject<short>(a2, (uint64_t)this + 16, a4);
    readSharedObject<short>(a2, (uint64_t)this + 32, a4);
    readSharedObject<short>(a2, (uint64_t)this + 48, a4);
    readSharedObject<unsigned int>(a2, (uint64_t)this + 64, a4);
    readSharedObject<short>(a2, (uint64_t)this + 80, a4);
    readSharedObject<short>(a2, (uint64_t)this + 96, a4);
    readSharedObject<unsigned char>(a2, (uint64_t)this + 112, a4);
    readSharedObject(a2, (TrigramData *)((char *)this + 128), a4);
    readSharedObject(a2, (TrigramData *)((char *)this + 144), a4);
    readSharedObject(a2, (TrigramData *)((char *)this + 160), a4);
    readSharedObject(a2, (TrigramData *)((char *)this + 176), a4);
  }
  readSharedObject<unsigned int>(a2, (uint64_t)this + 280, a4);
  readSharedObject<short>(a2, (uint64_t)this + 296, a4);
  readSharedObject<short>(a2, (uint64_t)this + 312, a4);
  readSharedObject<unsigned char>(a2, (uint64_t)this + 328, a4);
  readSharedObject<short>(a2, (uint64_t)this + 344, a4);
  readSharedObject<short>(a2, (uint64_t)this + 360, a4);
  readSharedObject<unsigned char>(a2, (uint64_t)this + 376, a4);
  readSharedObject<unsigned int>(a2, (uint64_t)this + 392, a4);
  readSharedObject<unsigned int>(a2, (uint64_t)this + 408, a4);
  readSharedObject<unsigned int>(a2, (uint64_t)this + 424, a4);
  readSharedObject<short>(a2, (uint64_t)this + 440, a4);
  readSharedObject<short>(a2, (uint64_t)this + 456, a4);

  return readSharedObject<unsigned char>(a2, (uint64_t)this + 472, a4);
}

uint64_t TrigramData::computeLocalPreloadableBytes(TrigramData *this)
{
  uint64_t v18 = *((unsigned int *)this + 14);
  if (v18 >= 2)
  {
    uint64_t v2 = 0;
    unint64_t v3 = 1;
    while (1)
    {
      if (v3 < *((unsigned int *)this + 14))
      {
        int v20 = *(unsigned __int16 *)(*((void *)this + 6) + 2 * v3);
        if (*(_WORD *)(*((void *)this + 6) + 2 * v3)) {
          break;
        }
      }
LABEL_33:
      if (++v3 == v18) {
        return v2;
      }
    }
    int v4 = 0;
    unint64_t v19 = v3;
    while (1)
    {
      uint64_t v5 = (*(_DWORD *)(*((void *)this + 8) + 4 * v3) + v4);
      uint64_t v6 = *(unsigned __int16 *)(*((void *)this + 37) + 2 * v5);
      if ((*(_DWORD *)(*((void *)this + 16) + 4 * (v5 >> 5)) >> v5))
      {
        int v7 = *((_DWORD *)this + 10);
        if (*(_WORD *)(*((void *)this + 37) + 2 * v5))
        {
          unsigned int v8 = 0;
          unsigned int v9 = *(_DWORD *)(*((void *)this + 35) + 4 * v5);
          uint64_t v10 = v6 << (v7 == 0);
          if ((unsigned __int16)(v6 + 1) <= 2u) {
            uint64_t v11 = 2;
          }
          else {
            uint64_t v11 = (unsigned __int16)(v6 + 1);
          }
          uint64_t v12 = v11 - 1;
          do
          {
            if (v7) {
              uint64_t v13 = (_WORD *)(*((void *)this + 4) + 2 * *(unsigned __int8 *)(*((void *)this + 41) + v9));
            }
            else {
              uint64_t v13 = (_WORD *)(*((void *)this + 39) + 2 * v9);
            }
            if (*v13 != 20000) {
              ++v8;
            }
            ++v9;
            --v12;
          }
          while (v12);
LABEL_27:
          if (v8 <= 1) {
            uint64_t v16 = 0;
          }
          else {
            uint64_t v16 = v10;
          }
          unint64_t v3 = v19;
          goto LABEL_32;
        }
      }
      else if (*(_WORD *)(*((void *)this + 37) + 2 * v5))
      {
        int v14 = 0;
        uint64_t v10 = 0;
        unsigned int v8 = 0;
        do
        {
          if (TrigramData::getSearchScoreForIndex(this, v5, v14) != 20000)
          {
            if (*((_DWORD *)this + 10)) {
              uint64_t v15 = 3;
            }
            else {
              uint64_t v15 = 4;
            }
            v10 += v15;
            ++v8;
          }
          ++v14;
        }
        while (v6 != v14);
        goto LABEL_27;
      }
      uint64_t v16 = 0;
LABEL_32:
      v2 += v16;
      if (++v4 == v20) {
        goto LABEL_33;
      }
    }
  }
  return 0;
}

uint64_t TrigramData::getSearchScoreForIndex(TrigramData *this, unsigned int a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(*((void *)this + 35) + 4 * a2);
  if (*(_WORD *)(*((void *)this + 37) + 2 * a2) != 1)
  {
    if (*(_DWORD *)this && ((*(_DWORD *)(*((void *)this + 18) + 4 * (a2 >> 5)) >> a2) & 1) != 0)
    {
      uint64_t v3 = (*(_DWORD *)(*((void *)this + 53) + 4 * v3) + a3);
      if (!*((_DWORD *)this + 10))
      {
        uint64_t v5 = *((void *)this + 57);
        goto LABEL_12;
      }
      uint64_t v4 = *((void *)this + 59);
    }
    else
    {
      uint64_t v3 = (v3 + a3);
      if (!*((_DWORD *)this + 10))
      {
        uint64_t v5 = *((void *)this + 45);
        goto LABEL_12;
      }
      uint64_t v4 = *((void *)this + 47);
    }
    uint64_t v3 = *(unsigned __int8 *)(v4 + v3);
LABEL_11:
    uint64_t v5 = *((void *)this + 4);
LABEL_12:
    LOWORD(v3) = *(_WORD *)(v5 + 2 * v3);
    return (unsigned __int16)v3;
  }
  if (*((_DWORD *)this + 10))
  {
    uint64_t v3 = *(_DWORD *)(*((void *)this + 35) + 4 * a2);
    goto LABEL_11;
  }
  return (unsigned __int16)v3;
}

uint64_t TrigramData::initNewTrigramData(uint64_t a1, TrigramData *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, char a7)
{
  unsigned int v9 = a2;
  uint64_t v11 = *(unsigned int *)(a1 + 56);
  TrigramData::configureTrigramData(a2, 1, *(_DWORD *)(a1 + 24), *(__int16 **)(a1 + 16), *(_DWORD *)(a1 + 40), *(const unsigned __int16 **)(a1 + 32));
  TrigramData::preAllocateStaticTrigramData(v9, v11, *(_DWORD *)(a1 + 88));
  uint64_t v12 = 336;
  if (!*(_DWORD *)(a1 + 8)) {
    uint64_t v12 = 320;
  }
  TrigramData::preAllocateDynamicTrigramData((uint64_t)v9, *(_DWORD *)(a1 + 352), *(_DWORD *)(a1 + v12));
  uint64_t v74 = 0;
  uint64_t v75 = 0;
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  uint64_t v70 = 0;
  uint64_t v71 = 0;
  if (v11 >= 2)
  {
    unint64_t v13 = 1;
    unint64_t v67 = (unint64_t)v9;
    uint64_t v56 = a5;
    uint64_t v62 = a4;
    uint64_t v58 = v11;
    do
    {
      if (v13 < *(unsigned int *)(a1 + 56))
      {
        uint64_t v14 = *(void *)(a1 + 48);
        if (*(_WORD *)(v14 + 2 * v13))
        {
          unint64_t v66 = v13;
          int v64 = *(unsigned __int16 *)(v14 + 2 * v13);
          TrigramData::allocTri1(v9, v13, v64);
          int v15 = 0;
          uint64_t v63 = 0;
          uint64_t v60 = *(unsigned int *)(a4 + 8);
          do
          {
            uint64_t v16 = (*(_DWORD *)(*(void *)(a1 + 64) + 4 * v66) + v15);
            int v65 = *(unsigned __int16 *)(*(void *)(a1 + 80) + 2 * v16);
            LODWORD(v75) = 0;
            LODWORD(v73) = 0;
            LODWORD(v71) = 0;
            uint64_t v17 = *(void *)(a1 + 296);
            uint64_t v18 = *(unsigned __int16 *)(v17 + 2 * v16);
            if ((*(_DWORD *)(*(void *)(a1 + 128) + 4 * (v16 >> 5)) >> v16))
            {
              uint64_t v19 = v18 << (*(_DWORD *)(a1 + 40) == 0);
              if (*(_WORD *)(v17 + 2 * v16))
              {
                unsigned __int16 v20 = 1;
                do
                {
                  int v21 = *(_DWORD *)(a1 + 40);
                  int v22 = v20 - 1;
                  uint64_t v23 = (*(_DWORD *)(*(void *)(a1 + 280) + 4 * v16) + v22);
                  if (v21)
                  {
                    uint64_t v23 = *(unsigned __int8 *)(*(void *)(a1 + 328) + v23);
                    uint64_t v24 = *(void *)(a1 + 32);
                  }
                  else
                  {
                    uint64_t v24 = *(void *)(a1 + 312);
                  }
                  int v25 = *(unsigned __int16 *)(v24 + 2 * v23);
                  if (v25 != 20000)
                  {
                    unsigned int v26 = v75;
                    if (v75 == HIDWORD(v75))
                    {
                      DgnPrimArray<short>::reallocElts((uint64_t)&v74, 1, 1);
                      unsigned int v26 = v75;
                      int v21 = *(_DWORD *)(a1 + 40);
                    }
                    *(_WORD *)(v74 + 2 * v26) = v20;
                    LODWORD(v75) = v26 + 1;
                    if (v21)
                    {
                      char v27 = *(unsigned char *)(*(void *)(a1 + 328)
                                     + (*(_DWORD *)(*(void *)(a1 + 280) + 4 * v16) + v22));
                      uint64_t v28 = v71;
                      if (v71 == (unint64_t)HIDWORD(v71))
                      {
                        DgnPrimArray<char>::reallocElts((uint64_t)&v70, 1, 1);
                        uint64_t v28 = v71;
                      }
                      *(unsigned char *)(v70 + v2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v27;
                      int v29 = v71;
                      uint64_t v30 = &v71;
                    }
                    else
                    {
                      int v29 = v73;
                      if (v73 == HIDWORD(v73))
                      {
                        DgnPrimArray<short>::reallocElts((uint64_t)&v72, 1, 1);
                        int v29 = v73;
                      }
                      v72[v29] = v25;
                      uint64_t v30 = &v73;
                    }
                    *(_DWORD *)uint64_t v30 = v29 + 1;
                  }
                  ++v20;
                }
                while (v18 >= v20);
              }
              int v31 = 0;
            }
            else if (*(_WORD *)(v17 + 2 * v16))
            {
              int v32 = 0;
              uint64_t v19 = 0;
              int v31 = 0;
              do
              {
                __int16 SearchSuccIdForIndex = TrigramData::getSearchSuccIdForIndex((TrigramData *)a1, v16, v32);
                int SearchScoreForIndex = TrigramData::getSearchScoreForIndex((TrigramData *)a1, v16, v32);
                __int16 v35 = SearchScoreForIndex;
                if (SearchScoreForIndex != 20000)
                {
                  int v36 = *(_DWORD *)(a1 + 40);
                  if (v36) {
                    uint64_t v37 = 3;
                  }
                  else {
                    uint64_t v37 = 4;
                  }
                  unsigned int v38 = v75;
                  if (v75 == HIDWORD(v75))
                  {
                    DgnPrimArray<short>::reallocElts((uint64_t)&v74, 1, 1);
                    unsigned int v38 = v75;
                    int v36 = *(_DWORD *)(a1 + 40);
                  }
                  *(_WORD *)(v74 + 2 * v3DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = SearchSuccIdForIndex;
                  LODWORD(v75) = v38 + 1;
                  if (v36)
                  {
                    char SearchQuantizedScoreForIndex = TrigramData::getSearchQuantizedScoreForIndex((TrigramData *)a1, v16, v32);
                    uint64_t v40 = v71;
                    if (v71 == (unint64_t)HIDWORD(v71))
                    {
                      DgnPrimArray<char>::reallocElts((uint64_t)&v70, 1, 1);
                      uint64_t v40 = v71;
                    }
                    *(unsigned char *)(v70 + vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = SearchQuantizedScoreForIndex;
                    int v41 = v71;
                    uint64_t v42 = &v71;
                  }
                  else
                  {
                    int v41 = v73;
                    if (v73 == HIDWORD(v73))
                    {
                      DgnPrimArray<short>::reallocElts((uint64_t)&v72, 1, 1);
                      int v41 = v73;
                    }
                    v72[v41] = v35;
                    uint64_t v42 = &v73;
                  }
                  ++v31;
                  v19 += v37;
                  *(_DWORD *)uint64_t v42 = v41 + 1;
                }
                ++v32;
              }
              while (v18 != v32);
              LODWORD(v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
            }
            else
            {
              int v31 = 0;
              uint64_t v19 = 0;
            }
            uint64_t v43 = (*(_DWORD *)(*(void *)(v67 + 64) + 4 * v66) + v15);
            *(_WORD *)(*(void *)(v67 + 80) + 2 * v43) = 0;
            if (*(_DWORD *)(v67 + 4)) {
              *(unsigned char *)(*(void *)(v67 + 112) + v43) = 0;
            }
            else {
              *(_WORD *)(*(void *)(v67 + 96) + 2 * v43) = 20000;
            }
            TrigramData::tri2SetUnallocated(v67, v43);
            *(_WORD *)(*(void *)(v67 + 80) + 2 * v43) = v65;
            if (*(_DWORD *)(a1 + 24)) {
              *(unsigned char *)(*(void *)(v67 + 112) + v43) = *(unsigned char *)(*(void *)(a1 + 112) + v16);
            }
            else {
              *(_WORD *)(*(void *)(v67 + 96) + 2 * v43) = *(_WORD *)(*(void *)(a1 + 96) + 2 * v16);
            }
            if (v75)
            {
              if (v75 == 1)
              {
                TrigramData::fillTrigramRecord(v67, v43, (uint64_t)&v74, &v72, &v70);
              }
              else
              {
                *(_DWORD *)(*(void *)(v67 + 144) + 4 * (v43 >> 5)) |= 1 << v43;
                *(_WORD *)(*(void *)(v67 + 296) + 2 * v43) = v75;
                HuffmanEncoder<unsigned short,unsigned int>::addSuccessors(a3, (uint64_t)&v74);
                uint64_t v44 = v62;
                uint64_t v45 = *(unsigned int *)(v62 + 8);
                if (v45 == *(_DWORD *)(v62 + 12))
                {
                  DgnArray<DiskNgramContext>::reallocElts(v62, 1, 1);
                  uint64_t v44 = v62;
                  LODWORD(v45) = *(_DWORD *)(v62 + 8);
                }
                uint64_t v46 = *(void *)v44 + 56 * v45;
                *(void *)uint64_t v46 = 0;
                *(void *)(v46 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
                *(void *)(v46 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
                *(void *)(v46 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = -1;
                strcpy((char *)(v46 + 32), " N");
                LODWORD(v46) = *(_DWORD *)(v44 + 8);
                *(_DWORD *)(v44 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v46 + 1;
                uint64_t v47 = *(void *)v44 + 56 * v46;
                *(unsigned char *)(v47 + 34) = 3;
                *(_DWORD *)(v47 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = v66;
                *(_DWORD *)(v47 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v65;
                *(_DWORD *)(v47 + 36) = v16;
                *(_DWORD *)(v47 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = v43;
                *(_DWORD *)(v47 + 44) = v31;
                *(_DWORD *)(v47 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = v18;
                *(void *)(v47 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v19;
                *(void *)(v47 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
                v63 += v19;
              }
            }
            ++v15;
          }
          while (v15 != v64);
          if (a7)
          {
            unint64_t v13 = v66;
            uint64_t v11 = v58;
            uint64_t v48 = v63;
            uint64_t v49 = v60;
            if (v66 >= *(unsigned int *)(v56 + 8))
            {
              unsigned int v9 = (TrigramData *)v67;
              a4 = v62;
            }
            else
            {
              uint64_t v50 = *(void *)(*(void *)v56 + 8 * v66);
              unsigned int v9 = (TrigramData *)v67;
              a4 = v62;
              if (v50)
              {
                uint64_t v48 = *(void *)(v50 + 8) + v63;
                *(void *)(v50 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v48;
              }
            }
          }
          else
          {
            unint64_t v13 = v66;
            unsigned int v9 = (TrigramData *)v67;
            a4 = v62;
            uint64_t v48 = v63;
            uint64_t v11 = v58;
            uint64_t v49 = v60;
          }
          uint64_t v51 = *(unsigned int *)(a4 + 8);
          if (v49 < v51)
          {
            float v52 = *(double *)(*a6 + 8 * v13);
            uint64_t v53 = (float *)(*(void *)a4 + 56 * v49 + 16);
            uint64_t v54 = v51 - v49;
            do
            {
              *(v53 - 3) = v52;
              *(void *)uint64_t v53 = v48;
              v53 += 14;
              --v54;
            }
            while (v54);
          }
        }
      }
      ++v13;
    }
    while (v13 != v11);
  }
  if (!*(_DWORD *)(a3 + 128)) {
    HuffmanEncoder<unsigned short,unsigned int>::addValue(a3, 0);
  }
  uint64_t v69 = 0;
  memset(v68, 0, sizeof(v68));
  HuffmanEncoder<unsigned short,unsigned int>::finalizeTables(a3, (unint64_t)v68);
  HuffmanDecoder<unsigned short,unsigned int>::operator=((unint64_t)v9 + 192, (uint64_t)v68);
  HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)v68);
  TrigramData::compact((void **)v9);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v70);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v72);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v74);
}

void sub_213F9C00C(_Unwind_Exception *a1)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 - 136);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 - 120);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 - 104);
  _Unwind_Resume(a1);
}

_DWORD *TrigramData::configureTrigramData(_DWORD *this, int a2, unsigned int a3, __int16 *a4, unsigned int a5, const unsigned __int16 *a6)
{
  uint64_t v10 = this;
  *this = a2;
  this[1] = a3 != 0;
  this[2] = a5 != 0;
  uint64_t v11 = (_WORD **)(this + 4);
  unsigned int v12 = this[7];
  if (a3 <= v12)
  {
    this[6] = a3;
    if (!a3) {
      goto LABEL_6;
    }
  }
  else
  {
    this = (_DWORD *)DgnPrimArray<short>::reallocElts((uint64_t)(this + 4), a3 - v12, 0);
    void v10[6] = a3;
  }
  unint64_t v13 = *v11;
  uint64_t v14 = a3;
  do
  {
    __int16 v15 = *a4++;
    *v13++ = v15;
    --v14;
  }
  while (v14);
LABEL_6:
  unsigned int v16 = v10[11];
  if (a5 <= v16)
  {
    v10[10] = a5;
    if (!a5) {
      return this;
    }
  }
  else
  {
    this = (_DWORD *)DgnPrimArray<short>::reallocElts((uint64_t)(v10 + 8), a5 - v16, 0);
    v10[10] = a5;
  }
  uint64_t v17 = (_WORD *)*((void *)v10 + 4);
  uint64_t v18 = a5;
  do
  {
    __int16 v19 = *a6++;
    *v17++ = v19;
    --v18;
  }
  while (v18);
  return this;
}

void TrigramData::preAllocateStaticTrigramData(TrigramData *this, unsigned int a2, unsigned int a3)
{
  unsigned int v6 = *((_DWORD *)this + 15);
  BOOL v7 = a2 >= v6;
  uint64_t v8 = a2 - v6;
  if (v8 != 0 && v7) {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 48, v8, 0);
  }
  unsigned int v9 = *((_DWORD *)this + 19);
  if (a2 > v9) {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 64, a2 - v9, 0);
  }
  unsigned int v10 = *((_DWORD *)this + 23);
  if (a3 > v10) {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 80, a3 - v10, 0);
  }
  if (*((_DWORD *)this + 1))
  {
    if (*((_DWORD *)this + 31) < a3)
    {
      uint64_t v14 = 0;
      *((_DWORD *)this + 31) = realloc_array(*((void **)this + 14), &v14, a3, *((unsigned int *)this + 30), *((unsigned int *)this + 30), 1);
      *((void *)this + 14) = v14;
    }
  }
  else
  {
    unsigned int v11 = *((_DWORD *)this + 27);
    if (a3 > v11) {
      DgnPrimArray<short>::reallocElts((uint64_t)this + 96, a3 - v11, 0);
    }
  }
  BitArray::preAllocate((TrigramData *)((char *)this + 128), a3);
  if (*(_DWORD *)this)
  {
    BitArray::preAllocate((TrigramData *)((char *)this + 144), a3);
    BitArray::preAllocate((TrigramData *)((char *)this + 160), a3);
    BitArray::preAllocate((TrigramData *)((char *)this + 176), a3);
  }
  unsigned int v12 = *((_DWORD *)this + 73);
  if (a3 > v12) {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 280, a3 - v12, 0);
  }
  unsigned int v13 = *((_DWORD *)this + 77);
  if (a3 > v13) {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 296, a3 - v13, 0);
  }
}

uint64_t TrigramData::preAllocateDynamicTrigramData(uint64_t this, unsigned int a2, unsigned int a3)
{
  uint64_t v5 = this;
  unsigned int v6 = *(_DWORD *)(this + 356);
  BOOL v7 = a2 >= v6;
  uint64_t v8 = a2 - v6;
  if (v8 != 0 && v7) {
    this = DgnPrimArray<short>::reallocElts(this + 344, v8, 0);
  }
  if (*(_DWORD *)(v5 + 8))
  {
    if (*(_DWORD *)(v5 + 388) < a2)
    {
      unsigned int v11 = 0;
      this = realloc_array(*(void **)(v5 + 376), &v11, a2, *(unsigned int *)(v5 + 384), *(unsigned int *)(v5 + 384), 1);
      *(_DWORD *)(v5 + 3HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 88) = this;
      *(void *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 376) = v11;
    }
    if (*(_DWORD *)(v5 + 340) < a3)
    {
      unsigned int v11 = 0;
      this = realloc_array(*(void **)(v5 + 328), &v11, a3, *(unsigned int *)(v5 + 336), *(unsigned int *)(v5 + 336), 1);
      *(_DWORD *)(v5 + 3DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = this;
      *(void *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 328) = v11;
    }
  }
  else
  {
    unsigned int v9 = *(_DWORD *)(v5 + 372);
    if (a2 > v9) {
      this = DgnPrimArray<short>::reallocElts(v5 + 360, a2 - v9, 0);
    }
    unsigned int v10 = *(_DWORD *)(v5 + 324);
    if (a3 > v10)
    {
      return DgnPrimArray<short>::reallocElts(v5 + 312, a3 - v10, 0);
    }
  }
  return this;
}

uint64_t TrigramData::getSearchSuccIdForIndex(TrigramData *this, unsigned int a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(*((void *)this + 35) + 4 * a2);
  if (*(_WORD *)(*((void *)this + 37) + 2 * a2) == 1) {
    return WORD1(v3);
  }
  if (*(_DWORD *)this && ((*(_DWORD *)(*((void *)this + 18) + 4 * (a2 >> 5)) >> a2) & 1) != 0)
  {
    unsigned int v5 = *(_DWORD *)(*((void *)this + 53) + 4 * v3) + a3;
    uint64_t v6 = *((void *)this + 55);
  }
  else
  {
    unsigned int v5 = v3 + a3;
    uint64_t v6 = *((void *)this + 43);
  }
  return *(unsigned __int16 *)(v6 + 2 * v5);
}

uint64_t TrigramData::getSearchQuantizedScoreForIndex(TrigramData *this, unsigned int a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(*((void *)this + 35) + 4 * a2);
  if (*(_WORD *)(*((void *)this + 37) + 2 * a2) != 1)
  {
    if (*(_DWORD *)this && ((*(_DWORD *)(*((void *)this + 18) + 4 * (a2 >> 5)) >> a2) & 1) != 0)
    {
      LODWORD(v3) = *(_DWORD *)(*((void *)this + 53) + 4 * v3) + a3;
      uint64_t v4 = *((void *)this + 59);
    }
    else
    {
      LODWORD(v3) = v3 + a3;
      uint64_t v4 = *((void *)this + 47);
    }
    LOBYTE(v3) = *(unsigned char *)(v4 + v3);
  }
  return v3;
}

unint64_t TrigramData::fillTrigramRecord(unint64_t a1, unsigned int a2, uint64_t a3, _WORD **a4, void *a5)
{
  uint64_t v10 = *(unsigned int *)(a3 + 8);
  if (v10 == 1) {
    goto LABEL_5;
  }
  uint64_t v11 = 3;
  if (!*(_DWORD *)(a1 + 40)) {
    uint64_t v11 = 4;
  }
  if (v11 * v10 < (unint64_t)(*(unsigned __int16 *)(*(void *)a3 + 2 * (v10 - 1)) << (*(_DWORD *)(a1 + 40) == 0)))
  {
LABEL_5:
    unint64_t result = TrigramData::allocSearch(a1, a2, (unsigned __int16)*(_DWORD *)(a3 + 8));
    int v13 = *(_DWORD *)(a3 + 8);
    if (*(_DWORD *)(a1 + 40))
    {
      if (v13)
      {
        unint64_t v14 = 0;
        do
        {
          TrigramData::setSearchSuccIdForIndex(a1, a2, v14, *(_WORD *)(*(void *)a3 + 2 * v14));
          unint64_t result = TrigramData::setSearchQuantizedScoreForIndex(a1, a2, v14, *(unsigned __int8 *)(*a5 + v14));
          ++v14;
        }
        while (v14 < *(unsigned int *)(a3 + 8));
      }
    }
    else if (v13)
    {
      unint64_t v15 = 0;
      do
      {
        TrigramData::setSearchSuccIdForIndex(a1, a2, v15, *(_WORD *)(*(void *)a3 + 2 * v15));
        unint64_t result = TrigramData::setSearchScoreForIndex(a1, a2, v15, (unsigned __int16)(*a4)[v15]);
        ++v15;
      }
      while (v15 < *(unsigned int *)(a3 + 8));
    }
  }
  else
  {
    return TrigramData::fillTrigramRecordLookup(a1, a2, (unsigned __int16 **)a3, a4, a5);
  }
  return result;
}

uint64_t TrigramData::savePersistentAndFillInNewTrigramData(TrigramData *this, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, unsigned int a7)
{
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  int v41 = 0;
  uint64_t v42 = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v9 = a6;
  if ((*(_DWORD *)(*((void *)this + 16) + 4 * (a6 >> 5)) >> a6))
  {
    if (*(_WORD *)(*((void *)this + 37) + 2 * a6))
    {
      unsigned __int16 v10 = 1;
      do
      {
        int v11 = *((_DWORD *)this + 10);
        int v12 = v10 - 1;
        uint64_t v13 = (*(_DWORD *)(*((void *)this + 35) + 4 * v9) + v12);
        if (v11)
        {
          uint64_t v13 = *(unsigned __int8 *)(*((void *)this + 41) + v13);
          uint64_t v14 = *((void *)this + 4);
        }
        else
        {
          uint64_t v14 = *((void *)this + 39);
        }
        int v15 = *(unsigned __int16 *)(v14 + 2 * v13);
        if (v15 != 20000)
        {
          int v16 = v44;
          if (v44 == HIDWORD(v44))
          {
            DgnPrimArray<short>::reallocElts((uint64_t)&v43, 1, 1);
            int v16 = v44;
            int v11 = *((_DWORD *)this + 10);
          }
          v43[v16] = v10;
          LODWORD(v44) = v16 + 1;
          if (v11)
          {
            char v17 = *(unsigned char *)(*((void *)this + 41) + (*(_DWORD *)(*((void *)this + 35) + 4 * v9) + v12));
            uint64_t v18 = v40;
            if (v40 == (unint64_t)HIDWORD(v40))
            {
              DgnPrimArray<char>::reallocElts((uint64_t)&v39, 1, 1);
              uint64_t v18 = v40;
            }
            v39[v18] = v17;
            int v19 = v40;
            unsigned __int16 v20 = &v40;
          }
          else
          {
            int v19 = v42;
            if (v42 == HIDWORD(v42))
            {
              DgnPrimArray<short>::reallocElts((uint64_t)&v41, 1, 1);
              int v19 = v42;
            }
            v41[v19] = v15;
            unsigned __int16 v20 = &v42;
          }
          *(_DWORD *)unsigned __int16 v20 = v19 + 1;
        }
        ++v10;
      }
      while (*(unsigned __int16 *)(*((void *)this + 37) + 2 * v9) >= v10);
    }
  }
  else if (*(_WORD *)(*((void *)this + 37) + 2 * a6))
  {
    unsigned int v22 = 0;
    do
    {
      __int16 SearchSuccIdForIndex = TrigramData::getSearchSuccIdForIndex(this, a6, v22);
      int SearchScoreForIndex = TrigramData::getSearchScoreForIndex(this, a6, v22);
      __int16 v25 = SearchScoreForIndex;
      if (SearchScoreForIndex != 20000)
      {
        int v26 = v44;
        if (v44 == HIDWORD(v44))
        {
          DgnPrimArray<short>::reallocElts((uint64_t)&v43, 1, 1);
          int v26 = v44;
        }
        v43[v26] = SearchSuccIdForIndex;
        LODWORD(v44) = v26 + 1;
        if (*((_DWORD *)this + 10))
        {
          char SearchQuantizedScoreForIndex = TrigramData::getSearchQuantizedScoreForIndex(this, a6, v22);
          uint64_t v28 = v40;
          if (v40 == (unint64_t)HIDWORD(v40))
          {
            DgnPrimArray<char>::reallocElts((uint64_t)&v39, 1, 1);
            uint64_t v28 = v40;
          }
          v39[v28] = SearchQuantizedScoreForIndex;
          int v29 = v40;
          uint64_t v30 = &v40;
        }
        else
        {
          int v29 = v42;
          if (v42 == HIDWORD(v42))
          {
            DgnPrimArray<short>::reallocElts((uint64_t)&v41, 1, 1);
            int v29 = v42;
          }
          v41[v29] = v25;
          uint64_t v30 = &v42;
        }
        *(_DWORD *)uint64_t v30 = v29 + 1;
      }
      ++v22;
    }
    while (v22 < *(unsigned __int16 *)(*((void *)this + 37) + 2 * v9));
  }
  *(_DWORD *)(*(void *)(a4 + 280) + 4 * a7) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2);
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  HuffmanEncoder<unsigned short,unsigned int>::encodeSuccessors(a5, (uint64_t *)&v43, (uint64_t)&v37);
  if (((4 * (v38 + 1)) | 2uLL) >= 2 * (unint64_t)(v44 + 1))
  {
    writeObjectArray(a2, v43, v44, a3);
  }
  else
  {
    *(_DWORD *)(*(void *)(a4 + 176) + 4 * (a7 >> 5)) |= 1 << a7;
    unsigned __int16 v36 = v38;
    writeObject(a2, &v36, a3);
    writeObjectArray(a2, v37, v38, a3);
  }
  if (*((_DWORD *)this + 10)) {
    writeObjectArray(a2, v39, v40, a3);
  }
  else {
    writeObjectArray(a2, v41, v42, a3);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v37);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v39);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v41);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v43);
}

void sub_213F9C9A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va3, a7);
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v14 = va_arg(va3, void);
  uint64_t v16 = va_arg(va3, void);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va3);
  _Unwind_Resume(a1);
}

uint64_t TrigramData::fillInFullyLoadedTrigramData(TrigramData *this, TrigramData *a2)
{
  uint64_t v4 = *((unsigned int *)this + 14);
  TrigramData::configureTrigramData(a2, 0, *((_DWORD *)this + 6), *((__int16 **)this + 2), *((_DWORD *)this + 10), *((const unsigned __int16 **)this + 4));
  TrigramData::preAllocateStaticTrigramData(a2, v4, *((_DWORD *)this + 22));
  uint64_t v5 = 336;
  if (!*((_DWORD *)this + 2)) {
    uint64_t v5 = 320;
  }
  TrigramData::preAllocateDynamicTrigramData((uint64_t)a2, *((_DWORD *)this + 88), *(_DWORD *)((char *)this + v5));
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  unsigned __int16 v36 = 0;
  uint64_t v37 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  if (v4 >= 2)
  {
    unint64_t v6 = 1;
    do
    {
      *(void *)uint64_t v33 = v6;
      if (v6 < *((unsigned int *)this + 14))
      {
        int v31 = *(unsigned __int16 *)(*((void *)this + 6) + 2 * v6);
        if (*(_WORD *)(*((void *)this + 6) + 2 * v6))
        {
          TrigramData::allocTri1(a2, v6, v31);
          int v7 = 0;
          do
          {
            uint64_t v8 = (*(_DWORD *)(*((void *)this + 8) + 4 * *(void *)v33) + v7);
            __int16 v32 = *(_WORD *)(*((void *)this + 10) + 2 * v8);
            LODWORD(v39) = 0;
            LODWORD(v37) = 0;
            LODWORD(v35) = 0;
            if ((*(_DWORD *)(*((void *)this + 16) + 4 * (v8 >> 5)) >> v8))
            {
              if (*(_WORD *)(*((void *)this + 37) + 2 * v8))
              {
                unsigned __int16 v9 = 1;
                do
                {
                  int v10 = *((_DWORD *)this + 10);
                  int v11 = v9 - 1;
                  uint64_t v12 = (*(_DWORD *)(*((void *)this + 35) + 4 * v8) + v11);
                  if (v10)
                  {
                    uint64_t v12 = *(unsigned __int8 *)(*((void *)this + 41) + v12);
                    uint64_t v13 = *((void *)this + 4);
                  }
                  else
                  {
                    uint64_t v13 = *((void *)this + 39);
                  }
                  int v14 = *(unsigned __int16 *)(v13 + 2 * v12);
                  if (v14 != 20000)
                  {
                    unsigned int v15 = v39;
                    if (v39 == HIDWORD(v39))
                    {
                      DgnPrimArray<short>::reallocElts((uint64_t)&v38, 1, 1);
                      unsigned int v15 = v39;
                      int v10 = *((_DWORD *)this + 10);
                    }
                    *(_WORD *)(v38 + 2 * v15) = v9;
                    LODWORD(v39) = v15 + 1;
                    if (v10)
                    {
                      char v16 = *(unsigned char *)(*((void *)this + 41)
                                     + (*(_DWORD *)(*((void *)this + 35) + 4 * v8) + v11));
                      uint64_t v17 = v35;
                      if (v35 == (unint64_t)HIDWORD(v35))
                      {
                        DgnPrimArray<char>::reallocElts((uint64_t)&v34, 1, 1);
                        uint64_t v17 = v35;
                      }
                      *(unsigned char *)(v34 + v17) = v16;
                      int v18 = v35;
                      int v19 = &v35;
                    }
                    else
                    {
                      int v18 = v37;
                      if (v37 == HIDWORD(v37))
                      {
                        DgnPrimArray<short>::reallocElts((uint64_t)&v36, 1, 1);
                        int v18 = v37;
                      }
                      v36[v18] = v14;
                      int v19 = &v37;
                    }
                    *(_DWORD *)int v19 = v18 + 1;
                  }
                  ++v9;
                }
                while (*(unsigned __int16 *)(*((void *)this + 37) + 2 * v8) >= v9);
              }
            }
            else if (*(_WORD *)(*((void *)this + 37) + 2 * v8))
            {
              unsigned int v20 = 0;
              do
              {
                __int16 SearchSuccIdForIndex = TrigramData::getSearchSuccIdForIndex(this, v8, v20);
                int SearchScoreForIndex = TrigramData::getSearchScoreForIndex(this, v8, v20);
                __int16 v23 = SearchScoreForIndex;
                if (SearchScoreForIndex != 20000)
                {
                  unsigned int v24 = v39;
                  if (v39 == HIDWORD(v39))
                  {
                    DgnPrimArray<short>::reallocElts((uint64_t)&v38, 1, 1);
                    unsigned int v24 = v39;
                  }
                  *(_WORD *)(v38 + 2 * vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = SearchSuccIdForIndex;
                  LODWORD(v39) = v24 + 1;
                  if (*((_DWORD *)this + 10))
                  {
                    char SearchQuantizedScoreForIndex = TrigramData::getSearchQuantizedScoreForIndex(this, v8, v20);
                    uint64_t v26 = v35;
                    if (v35 == (unint64_t)HIDWORD(v35))
                    {
                      DgnPrimArray<char>::reallocElts((uint64_t)&v34, 1, 1);
                      uint64_t v26 = v35;
                    }
                    *(unsigned char *)(v34 + v26) = SearchQuantizedScoreForIndex;
                    int v27 = v35;
                    uint64_t v28 = &v35;
                  }
                  else
                  {
                    int v27 = v37;
                    if (v37 == HIDWORD(v37))
                    {
                      DgnPrimArray<short>::reallocElts((uint64_t)&v36, 1, 1);
                      int v27 = v37;
                    }
                    v36[v27] = v23;
                    uint64_t v28 = &v37;
                  }
                  *(_DWORD *)uint64_t v28 = v27 + 1;
                }
                ++v20;
              }
              while (v20 < *(unsigned __int16 *)(*((void *)this + 37) + 2 * v8));
            }
            uint64_t v29 = (*(_DWORD *)(*((void *)a2 + 8) + 4 * *(void *)v33) + v7);
            *(_WORD *)(*((void *)a2 + 10) + 2 * v29) = 0;
            if (*((_DWORD *)a2 + 1)) {
              *(unsigned char *)(*((void *)a2 + 14) + v29) = 0;
            }
            else {
              *(_WORD *)(*((void *)a2 + 12) + 2 * v29) = 20000;
            }
            TrigramData::tri2SetUnallocated((uint64_t)a2, v29);
            *(_WORD *)(*((void *)a2 + 10) + 2 * v29) = v32;
            if (*((_DWORD *)this + 6)) {
              *(unsigned char *)(*((void *)a2 + 14) + v29) = *(unsigned char *)(*((void *)this + 14) + v8);
            }
            else {
              *(_WORD *)(*((void *)a2 + 12) + 2 * v29) = *(_WORD *)(*((void *)this + 12) + 2 * v8);
            }
            if (v39) {
              TrigramData::fillTrigramRecord((unint64_t)a2, v29, (uint64_t)&v38, &v36, &v34);
            }
            ++v7;
          }
          while (v7 != v31);
        }
      }
      unint64_t v6 = *(void *)v33 + 1;
    }
    while (*(void *)v33 + 1 != v4);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v34);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v36);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v38);
}

void sub_213F9CE20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

unint64_t TrigramData::fillTrigramRecordLookup(unint64_t a1, unsigned int a2, unsigned __int16 **a3, _WORD **a4, void *a5)
{
  int v10 = (*a3)[*((_DWORD *)a3 + 2) - 1];
  unint64_t result = TrigramData::allocLookup(a1, a2, v10);
  if (*(_DWORD *)(a1 + 40))
  {
    if (v10)
    {
      int v12 = 0;
      unsigned int v13 = (unsigned __int16)(v10 + 1);
      if (v13 <= 2) {
        unsigned int v13 = 2;
      }
      unsigned int v14 = v13 - 1;
      do
      {
        *(unsigned char *)(*(void *)(a1 + 328) + (v12 + *(_DWORD *)(*(void *)(a1 + 280) + 4 * a2))) = 0;
        ++v12;
      }
      while (v14 != v12);
    }
    if (*((_DWORD *)a3 + 2))
    {
      unint64_t v15 = 0;
      do
      {
        *(unsigned char *)(*(void *)(a1 + 328) + (*a3)[v15] + *(_DWORD *)(*(void *)(a1 + 280) + 4 * a2) - 1) = *(unsigned char *)(*a5 + v15);
        ++v15;
      }
      while (v15 < *((unsigned int *)a3 + 2));
    }
  }
  else
  {
    if (v10)
    {
      unsigned int v16 = *(_DWORD *)(*(void *)(a1 + 280) + 4 * a2);
      uint64_t v17 = *(void *)(a1 + 312);
      if ((unsigned __int16)(v10 + 1) <= 2u) {
        uint64_t v18 = 2;
      }
      else {
        uint64_t v18 = (unsigned __int16)(v10 + 1);
      }
      uint64_t v19 = v18 - 1;
      do
      {
        *(_WORD *)(v17 + 2 * v16++) = 20000;
        --v19;
      }
      while (v19);
    }
    uint64_t v20 = *((unsigned int *)a3 + 2);
    if (v20)
    {
      int v21 = *a3;
      unsigned int v22 = *a4;
      int v23 = *(_DWORD *)(*(void *)(a1 + 280) + 4 * a2);
      uint64_t v24 = *(void *)(a1 + 312);
      do
      {
        int v26 = *v21++;
        int v25 = v26;
        LOWORD(v26) = *v22++;
        *(_WORD *)(v24 + 2 * (v25 + v23 - 1)) = v26;
        --v20;
      }
      while (v20);
    }
  }
  return result;
}

unint64_t TrigramData::allocSearch(unint64_t this, unsigned int a2, int a3)
{
  uint64_t v3 = (_DWORD *)this;
  *(_WORD *)(*(void *)(this + 296) + 2 * a2) = a3;
  if (a3 == 1)
  {
    *(_DWORD *)(*(void *)(this + 280) + 4 * a2) = -65536;
  }
  else
  {
    *(_DWORD *)(*(void *)(this + 280) + 4 * a2) = *(_DWORD *)(this + 352);
    unsigned int v5 = *(_DWORD *)(this + 352) + a3;
    unsigned int v6 = *(_DWORD *)(this + 356);
    if (v5 > v6)
    {
      this = DgnPrimArray<short>::reallocElts(this + 344, v5 - v6, 1);
      unsigned int v5 = v3[88] + a3;
    }
    v3[88] = v5;
    if (v3[2])
    {
      unsigned int v7 = v3[96] + a3;
      unsigned int v8 = v3[97];
      if (v7 > v8)
      {
        this = DgnPrimArray<char>::reallocElts((uint64_t)(v3 + 94), v7 - v8, 1);
        unsigned int v7 = v3[96] + a3;
      }
      v3[96] = v7;
    }
    else
    {
      unsigned int v9 = v3[92] + a3;
      unsigned int v10 = v3[93];
      if (v9 > v10)
      {
        this = DgnPrimArray<short>::reallocElts((uint64_t)(v3 + 90), v9 - v10, 1);
        unsigned int v9 = v3[92] + a3;
      }
      v3[92] = v9;
    }
  }
  return this;
}

uint64_t TrigramData::setSearchSuccIdForIndex(uint64_t this, unsigned int a2, int a3, unsigned __int16 a4)
{
  uint64_t v4 = *(void *)(this + 280);
  uint64_t v5 = *(unsigned int *)(v4 + 4 * a2);
  if (*(_WORD *)(*(void *)(this + 296) + 2 * a2) == 1)
  {
    *(_DWORD *)(v4 + 4 * a2) = (unsigned __int16)*(_DWORD *)(v4 + 4 * a2) | (a4 << 16);
  }
  else
  {
    if (*(_DWORD *)this && ((*(_DWORD *)(*(void *)(this + 144) + 4 * (a2 >> 5)) >> a2) & 1) != 0)
    {
      unsigned int v6 = *(_DWORD *)(*(void *)(this + 424) + 4 * v5) + a3;
      uint64_t v7 = *(void *)(this + 440);
    }
    else
    {
      unsigned int v6 = v5 + a3;
      uint64_t v7 = *(void *)(this + 344);
    }
    *(_WORD *)(v7 + 2 * v6) = a4;
  }
  return this;
}

uint64_t TrigramData::setSearchQuantizedScoreForIndex(uint64_t this, unsigned int a2, int a3, int a4)
{
  uint64_t v4 = *(void *)(this + 280);
  uint64_t v5 = *(unsigned int *)(v4 + 4 * a2);
  if (*(_WORD *)(*(void *)(this + 296) + 2 * a2) == 1)
  {
    *(_DWORD *)(v4 + 4 * a2) = v5 & 0xFFFF0000 | a4;
  }
  else
  {
    if (*(_DWORD *)this && ((*(_DWORD *)(*(void *)(this + 144) + 4 * (a2 >> 5)) >> a2) & 1) != 0)
    {
      unsigned int v6 = *(_DWORD *)(*(void *)(this + 424) + 4 * v5) + a3;
      uint64_t v7 = *(void *)(this + 472);
    }
    else
    {
      unsigned int v6 = v5 + a3;
      uint64_t v7 = *(void *)(this + 376);
    }
    *(unsigned char *)(v7 + v6) = a4;
  }
  return this;
}

uint64_t TrigramData::setSearchScoreForIndex(uint64_t this, unsigned int a2, int a3, int a4)
{
  uint64_t v4 = *(void *)(this + 280);
  uint64_t v5 = *(unsigned int *)(v4 + 4 * a2);
  if (*(_WORD *)(*(void *)(this + 296) + 2 * a2) == 1)
  {
    *(_DWORD *)(v4 + 4 * a2) = v5 & 0xFFFF0000 | a4;
  }
  else
  {
    if (*(_DWORD *)this && ((*(_DWORD *)(*(void *)(this + 144) + 4 * (a2 >> 5)) >> a2) & 1) != 0)
    {
      unsigned int v6 = *(_DWORD *)(*(void *)(this + 424) + 4 * v5) + a3;
      uint64_t v7 = *(void *)(this + 456);
    }
    else
    {
      unsigned int v6 = v5 + a3;
      uint64_t v7 = *(void *)(this + 360);
    }
    *(_WORD *)(v7 + 2 * v6) = a4;
  }
  return this;
}

unint64_t TrigramData::allocLookup(unint64_t this, unsigned int a2, int a3)
{
  unint64_t v5 = this;
  uint64_t v6 = *(void *)(this + 280);
  uint64_t v7 = a2;
  if (*(_DWORD *)(this + 8))
  {
    *(_DWORD *)(v6 + 4 * a2) = *(_DWORD *)(this + 336);
    unsigned int v8 = *(_DWORD *)(this + 336) + a3;
    unsigned int v9 = *(_DWORD *)(this + 340);
    if (v8 > v9)
    {
      this = DgnPrimArray<char>::reallocElts(this + 328, v8 - v9, 1);
      unsigned int v8 = *(_DWORD *)(v5 + 336) + a3;
    }
    *(_DWORD *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 336) = v8;
  }
  else
  {
    *(_DWORD *)(v6 + 4 * a2) = *(_DWORD *)(this + 320);
    unsigned int v10 = *(_DWORD *)(this + 320) + a3;
    unsigned int v11 = *(_DWORD *)(this + 324);
    if (v10 > v11)
    {
      this = DgnPrimArray<short>::reallocElts(this + 312, v10 - v11, 1);
      unsigned int v10 = *(_DWORD *)(v5 + 320) + a3;
    }
    *(_DWORD *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 320) = v10;
  }
  *(_WORD *)(*(void *)(v5 + 296) + 2 * v7) = a3;
  *(_DWORD *)(*(void *)(v5 + 128) + 4 * (a2 >> 5)) |= 1 << a2;
  return this;
}

uint64_t TrigramData::fillTrigramRecordPreload(TrigramData *this, unsigned int a2, uint64_t a3, __int16 **a4, void *a5)
{
  uint64_t v10 = 3;
  if (!*((_DWORD *)this + 10)) {
    uint64_t v10 = 4;
  }
  if (v10 * (unint64_t)*(unsigned int *)(a3 + 8) >= *(unsigned __int16 *)(*(void *)a3
                                                                                + 2
                                                                                * (*(_DWORD *)(a3 + 8) - 1)) << (*((_DWORD *)this + 10) == 0))
  {
    return TrigramData::fillTrigramRecordLookup((unint64_t)this, a2, (unsigned __int16 **)a3, a4, a5);
  }
  else
  {
    uint64_t result = TrigramData::allocSearch((unint64_t)this, a2, (unsigned __int16)*(_DWORD *)(a3 + 8));
    uint64_t v12 = *(unsigned int *)(a3 + 8);
    if (*((_DWORD *)this + 10))
    {
      if (v12)
      {
        unint64_t v13 = 0;
        do
        {
          unsigned int v14 = v13 + *(_DWORD *)(*((void *)this + 35) + 4 * a2);
          *(_WORD *)(*((void *)this + 43) + 2 * v14) = *(_WORD *)(*(void *)a3 + 2 * v13);
          *(unsigned char *)(*((void *)this + 47) + v14) = *(unsigned char *)(*a5 + v13++);
        }
        while (v13 < *(unsigned int *)(a3 + 8));
      }
    }
    else if (v12)
    {
      unint64_t v15 = *(unsigned __int16 **)a3;
      unsigned int v16 = *(_DWORD *)(*((void *)this + 35) + 4 * a2);
      uint64_t v17 = *((void *)this + 43);
      uint64_t v18 = *a4;
      uint64_t v19 = *((void *)this + 45);
      do
      {
        __int16 v20 = *v15++;
        *(_WORD *)(v17 + 2 * vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v20;
        __int16 v21 = *v18++;
        *(_WORD *)(v19 + 2 * v16++) = v21;
        --v12;
      }
      while (v12);
    }
  }
  return result;
}

_DWORD *TrigramData::addTrigramBackoffWeightQuantization(_DWORD *this, unsigned __int8 a2, __int16 a3)
{
  uint64_t v4 = this;
  this[1] = 1;
  uint64_t v5 = (uint64_t)(this + 4);
  unsigned int v6 = this[6];
  if (!v6)
  {
    if (this[7])
    {
      unsigned int v7 = 0;
    }
    else
    {
      this = (_DWORD *)DgnPrimArray<short>::reallocElts((uint64_t)(this + 4), 1, 1);
      unsigned int v7 = v4[6];
    }
    *(_WORD *)(*((void *)v4 + 2) + 2 * v7) = 20000;
    unsigned int v6 = v7 + 1;
    v4[6] = v6;
  }
  if (v6 == v4[7])
  {
    this = (_DWORD *)DgnPrimArray<short>::reallocElts(v5, 1, 1);
    unsigned int v6 = v4[6];
  }
  *(_WORD *)(*((void *)v4 + 2) + 2 * v6) = a3;
  v4[6] = v6 + 1;
  return this;
}

_DWORD *TrigramData::addTrigramScoreQuantization(_DWORD *this, unsigned __int8 a2, __int16 a3)
{
  uint64_t v4 = this;
  this[2] = 1;
  uint64_t v5 = (uint64_t)(this + 8);
  unsigned int v6 = this[10];
  if (!v6)
  {
    if (this[11])
    {
      unsigned int v7 = 0;
    }
    else
    {
      this = (_DWORD *)DgnPrimArray<short>::reallocElts((uint64_t)(this + 8), 1, 1);
      unsigned int v7 = v4[10];
    }
    *(_WORD *)(*((void *)v4 + 4) + 2 * v7) = 20000;
    unsigned int v6 = v7 + 1;
    v4[10] = v6;
  }
  if (v6 == v4[11])
  {
    this = (_DWORD *)DgnPrimArray<short>::reallocElts(v5, 1, 1);
    unsigned int v6 = v4[10];
  }
  *(_WORD *)(*((void *)v4 + 4) + 2 * v6) = a3;
  v4[10] = v6 + 1;
  return this;
}

unint64_t TrigramData::allocLoaded(unint64_t this, unsigned int a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(void *)(this + 280);
  uint64_t v5 = a2;
  int v6 = *(_DWORD *)(v4 + 4 * a2);
  *(_DWORD *)(v4 + 4 * a2) = *(_DWORD *)(this + 416);
  unsigned int v7 = *(_DWORD *)(this + 416);
  if (v7 == *(_DWORD *)(this + 420))
  {
    this = DgnPrimArray<unsigned int>::reallocElts(this + 408, 1, 1);
    unsigned int v7 = *(_DWORD *)(v3 + 416);
  }
  *(_DWORD *)(*(void *)(v3 + 408) + 4 * v7) = v6;
  ++*(_DWORD *)(v3 + 416);
  int v8 = *(_DWORD *)(v3 + 448);
  unsigned int v9 = *(_DWORD *)(v3 + 432);
  if (v9 == *(_DWORD *)(v3 + 436))
  {
    this = DgnPrimArray<unsigned int>::reallocElts(v3 + 424, 1, 1);
    unsigned int v9 = *(_DWORD *)(v3 + 432);
  }
  *(_DWORD *)(*(void *)(v3 + 424) + 4 * v9) = v8;
  ++*(_DWORD *)(v3 + 432);
  int v10 = *(unsigned __int16 *)(*(void *)(v3 + 296) + 2 * v5);
  unsigned int v11 = *(_DWORD *)(v3 + 448) + v10;
  unsigned int v12 = *(_DWORD *)(v3 + 452);
  if (v11 > v12)
  {
    this = DgnPrimArray<short>::reallocElts(v3 + 440, v11 - v12, 1);
    unsigned int v11 = *(_DWORD *)(v3 + 448) + v10;
  }
  *(_DWORD *)(v3 + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = v11;
  if (*(_DWORD *)(v3 + 8))
  {
    unsigned int v13 = *(_DWORD *)(v3 + 480) + v10;
    unsigned int v14 = *(_DWORD *)(v3 + 484);
    if (v13 > v14)
    {
      this = DgnPrimArray<char>::reallocElts(v3 + 472, v13 - v14, 1);
      unsigned int v13 = *(_DWORD *)(v3 + 480) + v10;
    }
    *(_DWORD *)(v3 + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = v13;
  }
  else
  {
    unsigned int v15 = *(_DWORD *)(v3 + 464) + v10;
    unsigned int v16 = *(_DWORD *)(v3 + 468);
    if (v15 > v16)
    {
      this = DgnPrimArray<short>::reallocElts(v3 + 456, v15 - v16, 1);
      unsigned int v15 = *(_DWORD *)(v3 + 464) + v10;
    }
    *(_DWORD *)(v3 + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = v15;
  }
  *(_DWORD *)(*(void *)(v3 + 160) + 4 * (a2 >> 5)) |= 1 << a2;
  unsigned int v17 = *(_DWORD *)(v3 + 400);
  if (v17 == *(_DWORD *)(v3 + 404))
  {
    this = DgnPrimArray<unsigned int>::reallocElts(v3 + 392, 1, 1);
    unsigned int v17 = *(_DWORD *)(v3 + 400);
  }
  *(_DWORD *)(*(void *)(v3 + 392) + 4 * v17) = a2;
  ++*(_DWORD *)(v3 + 400);
  return this;
}

void QuadgramData::QuadgramData(QuadgramData *this)
{
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 2) = 0u;
  DgnString::DgnString((QuadgramData *)((char *)this + 112));
  DgnString::DgnString((QuadgramData *)((char *)this + 128));
  DgnString::DgnString((QuadgramData *)((char *)this + 144));
  *((_OWORD *)this + 10) = 0u;
  *(void *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((void *)this + 70) = 0;
  QuadgramData::allocQuad1(this, 0, 0);
}

void sub_213F9D7C8(_Unwind_Exception *a1)
{
  *(void *)(v7 - DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = v6;
  *(void *)(v7 - HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 88) = v5;
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 552);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 536);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 520);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 504);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 488);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 472);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 456);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 440);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 424);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 408);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 392);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 376);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 360);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 344);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 328);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 312);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 296);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 280);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 264);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 248);
  HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder(*(void *)(v7 - 96));
  BitArray::~BitArray(*(BitArray **)(v7 - 88));
  BitArray::~BitArray(v4);
  BitArray::~BitArray(v3);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 96);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 80);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 64);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 48);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 32);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1);
  _Unwind_Resume(a1);
}

void QuadgramData::allocQuad1(QuadgramData *this, unsigned int a2, int a3)
{
  unsigned int v6 = *((_DWORD *)this + 14);
  if (v6 <= a2)
  {
    do
    {
      if (v6 == *((_DWORD *)this + 15))
      {
        DgnPrimArray<short>::reallocElts((uint64_t)this + 48, 1, 1);
        unsigned int v6 = *((_DWORD *)this + 14);
      }
      *(_WORD *)(*((void *)this + 6) + 2 * v6) = 0;
      *((_DWORD *)this + 14) = v6 + 1;
      uint64_t v8 = *((unsigned int *)this + 18);
      if (v8 == *((_DWORD *)this + 19))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 64, 1, 1);
        uint64_t v8 = *((unsigned int *)this + 18);
      }
      uint64_t v7 = *((void *)this + 8);
      *(_DWORD *)(v7 + 4 * vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = -1;
      ++*((_DWORD *)this + 18);
      unsigned int v6 = *((_DWORD *)this + 14);
    }
    while (v6 <= a2);
  }
  else
  {
    uint64_t v7 = *((void *)this + 8);
  }
  *(_WORD *)(*((void *)this + 6) + 2 * a2) = a3;
  *(_DWORD *)(v7 + 4 * a2) = *((_DWORD *)this + 22);
  unsigned int v9 = *((_DWORD *)this + 23);
  unsigned int v10 = *((_DWORD *)this + 22) + a3;
  if (v10 > v9)
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 80, v10 - v9, 1);
    unsigned int v10 = *((_DWORD *)this + 22) + a3;
  }
  *((_DWORD *)this + 22) = v10;
  if (*(_DWORD *)this)
  {
    BitArray::addSize((QuadgramData *)((char *)this + 112), a3);
    BitArray::addSize((QuadgramData *)((char *)this + 128), a3);
    BitArray::addSize((QuadgramData *)((char *)this + 144), a3);
  }
  unsigned int v11 = *((_DWORD *)this + 64) + a3;
  unsigned int v12 = *((_DWORD *)this + 65);
  if (v11 > v12)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 248, v11 - v12, 1);
    unsigned int v11 = *((_DWORD *)this + 64) + a3;
  }
  *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = v11;
  unsigned int v13 = *((_DWORD *)this + 27);
  unsigned int v14 = *((_DWORD *)this + 26) + a3;
  if (v14 > v13)
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 96, v14 - v13, 1);
    unsigned int v14 = *((_DWORD *)this + 26) + a3;
  }
  *((_DWORD *)this + 26) = v14;
}

void QuadgramData::~QuadgramData(QuadgramData *this)
{
}

void **QuadgramData::compact(void **this)
{
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 6));
  DgnPrimArray<unsigned int>::compact((unint64_t)(this + 8));
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 10));
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 12));
  BitArray::compact((BitArray *)(this + 14));
  BitArray::compact((BitArray *)(this + 16));
  DgnPrimArray<unsigned int>::compact((unint64_t)(this + 31));
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 33));
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 35));
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 37));
  DgnPrimArray<unsigned char>::compact(this + 39);
  DgnPrimArray<unsigned int>::compact((unint64_t)(this + 41));
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 43));
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 45));
  DgnPrimArray<unsigned char>::compact(this + 47);
  DgnPrimArray<unsigned int>::compact((unint64_t)(this + 49));
  DgnPrimArray<unsigned int>::compact((unint64_t)(this + 51));
  DgnPrimArray<unsigned int>::compact((unint64_t)(this + 53));
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 55));
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 57));
  DgnPrimArray<unsigned char>::compact(this + 59);
  DgnPrimArray<unsigned int>::compact((unint64_t)(this + 61));
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 63));
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 65));
  DgnPrimArray<unsigned short>::compact((unint64_t)(this + 67));

  return DgnPrimArray<unsigned char>::compact(this + 69);
}

void QuadgramData::printSize(QuadgramData *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2771, (DgnString *)&v345);
  if (v346) {
    unsigned int v16 = v345;
  }
  else {
    unsigned int v16 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_2140A6A10, a3, &unk_2140A6A10, v16);
  DgnString::~DgnString((DgnString *)&v345);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_2140A6A10);
  uint64_t v21 = (a3 + 1);
  uint64_t v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346) {
    int v27 = v345;
  }
  else {
    int v27 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_2140A6A10, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346) {
    __int16 v32 = v345;
  }
  else {
    __int16 v32 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_2140A6A10, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346) {
    uint64_t v37 = v345;
  }
  else {
    uint64_t v37 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &unk_2140A6A10, (34 - a3), (34 - a3), v37, 4, 4, 0);
  uint64_t v344 = a3;
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v38 = 12;
  }
  else {
    uint64_t v38 = 16;
  }
  uint64_t v39 = *((unsigned int *)this + 6);
  unsigned int v40 = *((_DWORD *)this + 7);
  if (v40 >= v39)
  {
    uint64_t v41 = 0;
    if ((int)v39 > 0) {
      uint64_t v38 = (v38 | 2) + 2 * (v39 - 1);
    }
    uint64_t v42 = v38 + 2 * (v40 - v39);
  }
  else
  {
    uint64_t v41 = 2 * v39;
    uint64_t v42 = v38;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346) {
    uint64_t v47 = v345;
  }
  else {
    uint64_t v47 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v43, v44, v45, v46, v21, &unk_2140A6A10, v22, v22, v47, v42, v38, v41);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v42;
  *a5 += v38;
  *a6 += v41;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v48 = 12;
  }
  else {
    uint64_t v48 = 16;
  }
  uint64_t v49 = *((unsigned int *)this + 10);
  unsigned int v50 = *((_DWORD *)this + 11);
  if (v50 >= v49)
  {
    uint64_t v51 = 0;
    if ((int)v49 > 0) {
      uint64_t v48 = (v48 | 2) + 2 * (v49 - 1);
    }
    uint64_t v52 = v48 + 2 * (v50 - v49);
  }
  else
  {
    uint64_t v51 = 2 * v49;
    uint64_t v52 = v48;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346) {
    uint64_t v57 = v345;
  }
  else {
    uint64_t v57 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v53, v54, v55, v56, v21, &unk_2140A6A10, v22, v22, v57, v52, v48, v51);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v52;
  *a5 += v48;
  *a6 += v51;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v58 = 12;
  }
  else {
    uint64_t v58 = 16;
  }
  uint64_t v59 = *((unsigned int *)this + 14);
  unsigned int v60 = *((_DWORD *)this + 15);
  if (v60 >= v59)
  {
    uint64_t v61 = 0;
    if ((int)v59 > 0) {
      uint64_t v58 = (v58 | 2) + 2 * (v59 - 1);
    }
    uint64_t v62 = v58 + 2 * (v60 - v59);
  }
  else
  {
    uint64_t v61 = 2 * v59;
    uint64_t v62 = v58;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346) {
    unint64_t v67 = v345;
  }
  else {
    unint64_t v67 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v63, v64, v65, v66, v21, &unk_2140A6A10, v22, v22, v67, v62, v58, v61);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v62;
  *a5 += v58;
  *a6 += v61;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v68 = 12;
  }
  else {
    uint64_t v68 = 16;
  }
  uint64_t v69 = *((unsigned int *)this + 18);
  unsigned int v70 = *((_DWORD *)this + 19);
  if (v70 >= v69)
  {
    uint64_t v71 = 0;
    if ((int)v69 > 0) {
      v68 += 4 * (v69 - 1) + 4;
    }
    uint64_t v72 = v68 + 4 * (v70 - v69);
  }
  else
  {
    uint64_t v71 = 4 * v69;
    uint64_t v72 = v68;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346) {
    uint64_t v77 = v345;
  }
  else {
    uint64_t v77 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v73, v74, v75, v76, v21, &unk_2140A6A10, v22, v22, v77, v72, v68, v71);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v72;
  *a5 += v68;
  *a6 += v71;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v78 = 12;
  }
  else {
    uint64_t v78 = 16;
  }
  uint64_t v79 = *((unsigned int *)this + 22);
  unsigned int v80 = *((_DWORD *)this + 23);
  if (v80 >= v79)
  {
    uint64_t v81 = 0;
    if ((int)v79 > 0) {
      uint64_t v78 = (v78 | 2) + 2 * (v79 - 1);
    }
    uint64_t v82 = v78 + 2 * (v80 - v79);
  }
  else
  {
    uint64_t v81 = 2 * v79;
    uint64_t v82 = v78;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346) {
    uint64_t v87 = v345;
  }
  else {
    uint64_t v87 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v83, v84, v85, v86, v21, &unk_2140A6A10, v22, v22, v87, v82, v78, v81);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v82;
  *a5 += v78;
  *a6 += v81;
  uint64_t v88 = BitArray::sizeObject((uint64_t)this + 112, 0);
  uint64_t v89 = BitArray::sizeObject((uint64_t)this + 112, 1);
  uint64_t v90 = BitArray::sizeObject((uint64_t)this + 112, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346) {
    uint64_t v95 = v345;
  }
  else {
    uint64_t v95 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v91, v92, v93, v94, v21, &unk_2140A6A10, v22, v22, v95, v88, v89, v90);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v88;
  *a5 += v89;
  *a6 += v90;
  uint64_t v96 = BitArray::sizeObject((uint64_t)this + 128, 0);
  uint64_t v97 = BitArray::sizeObject((uint64_t)this + 128, 1);
  uint64_t v98 = BitArray::sizeObject((uint64_t)this + 128, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346) {
    uint64_t v103 = v345;
  }
  else {
    uint64_t v103 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v99, v100, v101, v102, v21, &unk_2140A6A10, v22, v22, v103, v96, v97, v98);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v96;
  *a5 += v97;
  *a6 += v98;
  uint64_t v104 = BitArray::sizeObject((uint64_t)this + 144, 0);
  uint64_t v105 = BitArray::sizeObject((uint64_t)this + 144, 1);
  uint64_t v106 = BitArray::sizeObject((uint64_t)this + 144, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346) {
    uint64_t v111 = v345;
  }
  else {
    uint64_t v111 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v107, v108, v109, v110, v21, &unk_2140A6A10, v22, v22, v111, v104, v105, v106);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v104;
  *a5 += v105;
  *a6 += v106;
  uint64_t v112 = HuffmanDecoder<unsigned short,unsigned int>::sizeObject((uint64_t)this + 160, 0);
  uint64_t v113 = HuffmanDecoder<unsigned short,unsigned int>::sizeObject((uint64_t)this + 160, 1);
  uint64_t v114 = HuffmanDecoder<unsigned short,unsigned int>::sizeObject((uint64_t)this + 160, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346) {
    uint64_t v119 = v345;
  }
  else {
    uint64_t v119 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v115, v116, v117, v118, v21, &unk_2140A6A10, v22, v22, v119, v112, v113, v114);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v112;
  *a5 += v113;
  *a6 += v114;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v120 = 12;
  }
  else {
    uint64_t v120 = 16;
  }
  uint64_t v121 = *((unsigned int *)this + 64);
  unsigned int v122 = *((_DWORD *)this + 65);
  if (v122 >= v121)
  {
    uint64_t v123 = 0;
    if ((int)v121 > 0) {
      v120 += 4 * (v121 - 1) + 4;
    }
    uint64_t v124 = v120 + 4 * (v122 - v121);
  }
  else
  {
    uint64_t v123 = 4 * v121;
    uint64_t v124 = v120;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346) {
    uint64_t v129 = v345;
  }
  else {
    uint64_t v129 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v125, v126, v127, v128, v21, &unk_2140A6A10, v22, v22, v129, v124, v120, v123);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v124;
  *a5 += v120;
  *a6 += v123;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v130 = 12;
  }
  else {
    uint64_t v130 = 16;
  }
  uint64_t v131 = *((unsigned int *)this + 26);
  unsigned int v132 = *((_DWORD *)this + 27);
  if (v132 >= v131)
  {
    uint64_t v133 = 0;
    if ((int)v131 > 0) {
      uint64_t v130 = (v130 | 2) + 2 * (v131 - 1);
    }
    uint64_t v134 = v130 + 2 * (v132 - v131);
  }
  else
  {
    uint64_t v133 = 2 * v131;
    uint64_t v134 = v130;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346) {
    uint64_t v139 = v345;
  }
  else {
    uint64_t v139 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v135, v136, v137, v138, v21, &unk_2140A6A10, v22, v22, v139, v134, v130, v133);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v134;
  *a5 += v130;
  *a6 += v133;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v140 = 12;
  }
  else {
    uint64_t v140 = 16;
  }
  uint64_t v141 = *((unsigned int *)this + 68);
  unsigned int v142 = *((_DWORD *)this + 69);
  if (v142 >= v141)
  {
    uint64_t v143 = 0;
    if ((int)v141 > 0) {
      uint64_t v140 = (v140 | 2) + 2 * (v141 - 1);
    }
    uint64_t v144 = v140 + 2 * (v142 - v141);
  }
  else
  {
    uint64_t v143 = 2 * v141;
    uint64_t v144 = v140;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346) {
    uint64_t v149 = v345;
  }
  else {
    uint64_t v149 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v145, v146, v147, v148, v21, &unk_2140A6A10, v22, v22, v149, v144, v140, v143);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v144;
  *a5 += v140;
  *a6 += v143;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v150 = 12;
  }
  else {
    uint64_t v150 = 16;
  }
  uint64_t v151 = *((unsigned int *)this + 76);
  unsigned int v152 = *((_DWORD *)this + 77);
  if (v152 >= v151)
  {
    uint64_t v153 = 0;
    if ((int)v151 > 0) {
      uint64_t v150 = (v150 | 2) + 2 * (v151 - 1);
    }
    uint64_t v154 = v150 + 2 * (v152 - v151);
  }
  else
  {
    uint64_t v153 = 2 * v151;
    uint64_t v154 = v150;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346) {
    uint64_t v159 = v345;
  }
  else {
    uint64_t v159 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v155, v156, v157, v158, v21, &unk_2140A6A10, v22, v22, v159, v154, v150, v153);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v154;
  *a5 += v150;
  *a6 += v153;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v160 = 12;
  }
  else {
    uint64_t v160 = 16;
  }
  int v161 = *((_DWORD *)this + 80);
  unsigned int v162 = *((_DWORD *)this + 81);
  BOOL v163 = v162 >= v161;
  uint64_t v164 = v162 - v161;
  if (v163)
  {
    uint64_t v166 = v161 & ~(v161 >> 31);
    int v161 = 0;
    uint64_t v165 = v160 + v166;
    v160 += v166 + v164;
  }
  else
  {
    uint64_t v165 = v160;
  }
  uint64_t v167 = v161;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346) {
    uint64_t v172 = v345;
  }
  else {
    uint64_t v172 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v168, v169, v170, v171, v21, &unk_2140A6A10, v22, v22, v172, v160, v165, v167);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v160;
  *a5 += v165;
  *a6 += v167;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v173 = 12;
  }
  else {
    uint64_t v173 = 16;
  }
  uint64_t v174 = *((unsigned int *)this + 84);
  unsigned int v175 = *((_DWORD *)this + 85);
  if (v175 >= v174)
  {
    uint64_t v176 = 0;
    if ((int)v174 > 0) {
      v173 += 4 * (v174 - 1) + 4;
    }
    uint64_t v177 = v173 + 4 * (v175 - v174);
  }
  else
  {
    uint64_t v176 = 4 * v174;
    uint64_t v177 = v173;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346) {
    int v182 = v345;
  }
  else {
    int v182 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v178, v179, v180, v181, v21, &unk_2140A6A10, v22, v22, v182, v177, v173, v176);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v177;
  *a5 += v173;
  *a6 += v176;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v183 = 12;
  }
  else {
    uint64_t v183 = 16;
  }
  uint64_t v184 = *((unsigned int *)this + 72);
  unsigned int v185 = *((_DWORD *)this + 73);
  if (v185 >= v184)
  {
    uint64_t v186 = 0;
    if ((int)v184 > 0) {
      uint64_t v183 = (v183 | 2) + 2 * (v184 - 1);
    }
    uint64_t v187 = v183 + 2 * (v185 - v184);
  }
  else
  {
    uint64_t v186 = 2 * v184;
    uint64_t v187 = v183;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346) {
    uint64_t v192 = v345;
  }
  else {
    uint64_t v192 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v188, v189, v190, v191, v21, &unk_2140A6A10, v22, v22, v192, v187, v183, v186);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v187;
  *a5 += v183;
  *a6 += v186;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v193 = 12;
  }
  else {
    uint64_t v193 = 16;
  }
  uint64_t v194 = *((unsigned int *)this + 88);
  unsigned int v195 = *((_DWORD *)this + 89);
  if (v195 >= v194)
  {
    uint64_t v196 = 0;
    if ((int)v194 > 0) {
      uint64_t v193 = (v193 | 2) + 2 * (v194 - 1);
    }
    uint64_t v197 = v193 + 2 * (v195 - v194);
  }
  else
  {
    uint64_t v196 = 2 * v194;
    uint64_t v197 = v193;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346) {
    uint64_t v202 = v345;
  }
  else {
    uint64_t v202 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v198, v199, v200, v201, v21, &unk_2140A6A10, v22, v22, v202, v197, v193, v196);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v197;
  *a5 += v193;
  *a6 += v196;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v203 = 12;
  }
  else {
    uint64_t v203 = 16;
  }
  uint64_t v204 = *((unsigned int *)this + 92);
  unsigned int v205 = *((_DWORD *)this + 93);
  if (v205 >= v204)
  {
    uint64_t v206 = 0;
    if ((int)v204 > 0) {
      uint64_t v203 = (v203 | 2) + 2 * (v204 - 1);
    }
    uint64_t v207 = v203 + 2 * (v205 - v204);
  }
  else
  {
    uint64_t v206 = 2 * v204;
    uint64_t v207 = v203;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346) {
    uint64_t v212 = v345;
  }
  else {
    uint64_t v212 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v208, v209, v210, v211, v21, &unk_2140A6A10, v22, v22, v212, v207, v203, v206);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v207;
  *a5 += v203;
  *a6 += v206;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v213 = 12;
  }
  else {
    uint64_t v213 = 16;
  }
  int v214 = *((_DWORD *)this + 96);
  unsigned int v215 = *((_DWORD *)this + 97);
  BOOL v163 = v215 >= v214;
  uint64_t v216 = v215 - v214;
  if (v163)
  {
    uint64_t v218 = v214 & ~(v214 >> 31);
    int v214 = 0;
    uint64_t v217 = v213 + v218;
    v213 += v218 + v216;
  }
  else
  {
    uint64_t v217 = v213;
  }
  uint64_t v219 = v214;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346) {
    uint64_t v224 = v345;
  }
  else {
    uint64_t v224 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v220, v221, v222, v223, v21, &unk_2140A6A10, v22, v22, v224, v213, v217, v219);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v213;
  *a5 += v217;
  *a6 += v219;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v225 = 12;
  }
  else {
    uint64_t v225 = 16;
  }
  uint64_t v226 = *((unsigned int *)this + 100);
  unsigned int v227 = *((_DWORD *)this + 101);
  if (v227 >= v226)
  {
    uint64_t v228 = 0;
    if ((int)v226 > 0) {
      v225 += 4 * (v226 - 1) + 4;
    }
    uint64_t v229 = v225 + 4 * (v227 - v226);
  }
  else
  {
    uint64_t v228 = 4 * v226;
    uint64_t v229 = v225;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346) {
    uint64_t v234 = v345;
  }
  else {
    uint64_t v234 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v230, v231, v232, v233, v21, &unk_2140A6A10, v22, v22, v234, v229, v225, v228);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v229;
  *a5 += v225;
  *a6 += v228;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v235 = 12;
  }
  else {
    uint64_t v235 = 16;
  }
  uint64_t v236 = *((unsigned int *)this + 104);
  unsigned int v237 = *((_DWORD *)this + 105);
  if (v237 >= v236)
  {
    uint64_t v238 = 0;
    if ((int)v236 > 0) {
      v235 += 4 * (v236 - 1) + 4;
    }
    uint64_t v239 = v235 + 4 * (v237 - v236);
  }
  else
  {
    uint64_t v238 = 4 * v236;
    uint64_t v239 = v235;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346) {
    uint64_t v244 = v345;
  }
  else {
    uint64_t v244 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v240, v241, v242, v243, v21, &unk_2140A6A10, v22, v22, v244, v239, v235, v238);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v239;
  *a5 += v235;
  *a6 += v238;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v245 = 12;
  }
  else {
    uint64_t v245 = 16;
  }
  uint64_t v246 = *((unsigned int *)this + 108);
  unsigned int v247 = *((_DWORD *)this + 109);
  if (v247 >= v246)
  {
    uint64_t v248 = 0;
    if ((int)v246 > 0) {
      v245 += 4 * (v246 - 1) + 4;
    }
    uint64_t v249 = v245 + 4 * (v247 - v246);
  }
  else
  {
    uint64_t v248 = 4 * v246;
    uint64_t v249 = v245;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346) {
    uint64_t v254 = v345;
  }
  else {
    uint64_t v254 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v250, v251, v252, v253, v21, &unk_2140A6A10, v22, v22, v254, v249, v245, v248);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v249;
  *a5 += v245;
  *a6 += v248;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v255 = 12;
  }
  else {
    uint64_t v255 = 16;
  }
  uint64_t v256 = *((unsigned int *)this + 112);
  unsigned int v257 = *((_DWORD *)this + 113);
  if (v257 >= v256)
  {
    uint64_t v258 = 0;
    if ((int)v256 > 0) {
      uint64_t v255 = (v255 | 2) + 2 * (v256 - 1);
    }
    uint64_t v259 = v255 + 2 * (v257 - v256);
  }
  else
  {
    uint64_t v258 = 2 * v256;
    uint64_t v259 = v255;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346) {
    uint64_t v264 = v345;
  }
  else {
    uint64_t v264 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v260, v261, v262, v263, v21, &unk_2140A6A10, v22, v22, v264, v259, v255, v258);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v259;
  *a5 += v255;
  *a6 += v258;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v265 = 12;
  }
  else {
    uint64_t v265 = 16;
  }
  uint64_t v266 = *((unsigned int *)this + 116);
  unsigned int v267 = *((_DWORD *)this + 117);
  if (v267 >= v266)
  {
    uint64_t v268 = 0;
    if ((int)v266 > 0) {
      uint64_t v265 = (v265 | 2) + 2 * (v266 - 1);
    }
    uint64_t v269 = v265 + 2 * (v267 - v266);
  }
  else
  {
    uint64_t v268 = 2 * v266;
    uint64_t v269 = v265;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346) {
    uint64_t v274 = v345;
  }
  else {
    uint64_t v274 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v270, v271, v272, v273, v21, &unk_2140A6A10, v22, v22, v274, v269, v265, v268);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v269;
  *a5 += v265;
  *a6 += v268;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v275 = 12;
  }
  else {
    uint64_t v275 = 16;
  }
  int v276 = *((_DWORD *)this + 120);
  unsigned int v277 = *((_DWORD *)this + 121);
  BOOL v163 = v277 >= v276;
  uint64_t v278 = v277 - v276;
  if (v163)
  {
    uint64_t v280 = v276 & ~(v276 >> 31);
    int v276 = 0;
    uint64_t v279 = v275 + v280;
    v275 += v280 + v278;
  }
  else
  {
    uint64_t v279 = v275;
  }
  uint64_t v281 = v276;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346) {
    uint64_t v286 = v345;
  }
  else {
    uint64_t v286 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v282, v283, v284, v285, v21, &unk_2140A6A10, v22, v22, v286, v275, v279, v281);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v275;
  *a5 += v279;
  *a6 += v281;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v287 = 12;
  }
  else {
    uint64_t v287 = 16;
  }
  uint64_t v288 = *((unsigned int *)this + 124);
  unsigned int v289 = *((_DWORD *)this + 125);
  if (v289 >= v288)
  {
    uint64_t v290 = 0;
    if ((int)v288 > 0) {
      v287 += 4 * (v288 - 1) + 4;
    }
    uint64_t v291 = v287 + 4 * (v289 - v288);
  }
  else
  {
    uint64_t v290 = 4 * v288;
    uint64_t v291 = v287;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346) {
    uint64_t v296 = v345;
  }
  else {
    uint64_t v296 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v292, v293, v294, v295, v21, &unk_2140A6A10, v22, v22, v296, v291, v287, v290);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v291;
  *a5 += v287;
  *a6 += v290;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v297 = 12;
  }
  else {
    uint64_t v297 = 16;
  }
  uint64_t v298 = *((unsigned int *)this + 128);
  unsigned int v299 = *((_DWORD *)this + 129);
  if (v299 >= v298)
  {
    uint64_t v300 = 0;
    if ((int)v298 > 0) {
      uint64_t v297 = (v297 | 2) + 2 * (v298 - 1);
    }
    uint64_t v301 = v297 + 2 * (v299 - v298);
  }
  else
  {
    uint64_t v300 = 2 * v298;
    uint64_t v301 = v297;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346) {
    v306 = v345;
  }
  else {
    v306 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v302, v303, v304, v305, v21, &unk_2140A6A10, v22, v22, v306, v301, v297, v300);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v301;
  *a5 += v297;
  *a6 += v300;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v307 = 12;
  }
  else {
    uint64_t v307 = 16;
  }
  uint64_t v308 = *((unsigned int *)this + 132);
  unsigned int v309 = *((_DWORD *)this + 133);
  if (v309 >= v308)
  {
    uint64_t v310 = 0;
    if ((int)v308 > 0) {
      uint64_t v307 = (v307 | 2) + 2 * (v308 - 1);
    }
    uint64_t v311 = v307 + 2 * (v309 - v308);
  }
  else
  {
    uint64_t v310 = 2 * v308;
    uint64_t v311 = v307;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346) {
    uint64_t v316 = v345;
  }
  else {
    uint64_t v316 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v312, v313, v314, v315, v21, &unk_2140A6A10, v22, v22, v316, v311, v307, v310);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v311;
  *a5 += v307;
  *a6 += v310;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v317 = 12;
  }
  else {
    uint64_t v317 = 16;
  }
  uint64_t v318 = *((unsigned int *)this + 136);
  unsigned int v319 = *((_DWORD *)this + 137);
  if (v319 >= v318)
  {
    uint64_t v320 = 0;
    if ((int)v318 > 0) {
      uint64_t v317 = (v317 | 2) + 2 * (v318 - 1);
    }
    uint64_t v321 = v317 + 2 * (v319 - v318);
  }
  else
  {
    uint64_t v320 = 2 * v318;
    uint64_t v321 = v317;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346) {
    uint64_t v326 = v345;
  }
  else {
    uint64_t v326 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v322, v323, v324, v325, v21, &unk_2140A6A10, v22, v22, v326, v321, v317, v320);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v321;
  *a5 += v317;
  *a6 += v320;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v327 = 12;
  }
  else {
    uint64_t v327 = 16;
  }
  int v328 = *((_DWORD *)this + 140);
  unsigned int v329 = *((_DWORD *)this + 141);
  BOOL v163 = v329 >= v328;
  uint64_t v330 = v329 - v328;
  if (v163)
  {
    uint64_t v332 = v328 & ~(v328 >> 31);
    int v328 = 0;
    uint64_t v331 = v327 + v332;
    v327 += v332 + v330;
  }
  else
  {
    uint64_t v331 = v327;
  }
  uint64_t v333 = v328;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2775, (DgnString *)&v345);
  if (v346) {
    uint64_t v338 = v345;
  }
  else {
    uint64_t v338 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v334, v335, v336, v337, v21, &unk_2140A6A10, v22, v22, v338, v327, v331, v333);
  DgnString::~DgnString((DgnString *)&v345);
  *a4 += v327;
  *a5 += v331;
  *a6 += v333;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 2776, (DgnString *)&v345);
  if (v346) {
    uint64_t v343 = v345;
  }
  else {
    uint64_t v343 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v339, v340, v341, v342, v344, &unk_2140A6A10, (35 - v344), (35 - v344), v343, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v345);
}

void sub_213F9F574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void **QuadgramData::copyQuadgramData(QuadgramData *this, const QuadgramData *a2)
{
  *(void *)this = *(void *)a2;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 16, (uint64_t *)a2 + 2, 0, *((_DWORD *)a2 + 6));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 32, (uint64_t *)a2 + 4, 0, *((_DWORD *)a2 + 10));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 48, (uint64_t *)a2 + 6, 0, *((_DWORD *)a2 + 14));
  DgnPrimArray<int>::copyArraySlice((unint64_t)this + 64, (uint64_t *)a2 + 8, 0, *((_DWORD *)a2 + 18));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 80, (uint64_t *)a2 + 10, 0, *((_DWORD *)a2 + 22));
  BitArray::operator=((int **)this + 14, (uint64_t)a2 + 112);
  BitArray::operator=((int **)this + 16, (uint64_t)a2 + 128);
  BitArray::operator=((int **)this + 18, (uint64_t)a2 + 144);
  HuffmanDecoder<unsigned short,unsigned int>::operator=((unint64_t)this + 160, (uint64_t)a2 + 160);
  DgnPrimArray<int>::copyArraySlice((unint64_t)this + 248, (uint64_t *)a2 + 31, 0, *((_DWORD *)a2 + 64));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 96, (uint64_t *)a2 + 12, 0, *((_DWORD *)a2 + 26));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 264, (uint64_t *)a2 + 33, 0, *((_DWORD *)a2 + 68));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 296, (uint64_t *)a2 + 37, 0, *((_DWORD *)a2 + 76));
  DgnPrimArray<unsigned char>::copyArraySlice((unint64_t)this + 312, (void *)a2 + 39, 0, *((_DWORD *)a2 + 80));
  DgnPrimArray<int>::copyArraySlice((unint64_t)this + 328, (uint64_t *)a2 + 41, 0, *((_DWORD *)a2 + 84));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 280, (uint64_t *)a2 + 35, 0, *((_DWORD *)a2 + 72));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 344, (uint64_t *)a2 + 43, 0, *((_DWORD *)a2 + 88));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 360, (uint64_t *)a2 + 45, 0, *((_DWORD *)a2 + 92));
  DgnPrimArray<unsigned char>::copyArraySlice((unint64_t)this + 376, (void *)a2 + 47, 0, *((_DWORD *)a2 + 96));
  DgnPrimArray<int>::copyArraySlice((unint64_t)this + 392, (uint64_t *)a2 + 49, 0, *((_DWORD *)a2 + 100));
  DgnPrimArray<int>::copyArraySlice((unint64_t)this + 408, (uint64_t *)a2 + 51, 0, *((_DWORD *)a2 + 104));
  DgnPrimArray<int>::copyArraySlice((unint64_t)this + 424, (uint64_t *)a2 + 53, 0, *((_DWORD *)a2 + 108));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 440, (uint64_t *)a2 + 55, 0, *((_DWORD *)a2 + 112));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 456, (uint64_t *)a2 + 57, 0, *((_DWORD *)a2 + 116));
  DgnPrimArray<unsigned char>::copyArraySlice((unint64_t)this + 472, (void *)a2 + 59, 0, *((_DWORD *)a2 + 120));
  DgnPrimArray<int>::copyArraySlice((unint64_t)this + 488, (uint64_t *)a2 + 61, 0, *((_DWORD *)a2 + 124));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 504, (uint64_t *)a2 + 63, 0, *((_DWORD *)a2 + 128));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 520, (uint64_t *)a2 + 65, 0, *((_DWORD *)a2 + 132));
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 536, (uint64_t *)a2 + 67, 0, *((_DWORD *)a2 + 136));
  DgnPrimArray<unsigned char>::copyArraySlice((unint64_t)this + 552, (void *)a2 + 69, 0, *((_DWORD *)a2 + 140));

  return QuadgramData::compact((void **)this);
}

uint64_t QuadgramData::saveBinary(QuadgramData *this, DgnStream *a2, unsigned int *a3)
{
  writeObject((uint64_t)a2, (int *)this, a3);
  writeObject((uint64_t)a2, (int *)this + 1, a3);
  writeObject((uint64_t)a2, (int *)this + 2, a3);
  writeObject<short>((uint64_t)a2, (uint64_t)this + 16, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 32, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 48, a3);
  writeObject<unsigned int>((uint64_t)a2, (uint64_t)this + 64, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 80, a3);
  writeObject((uint64_t)a2, (uint64_t)this + 112, a3);
  writeObject((uint64_t)a2, (uint64_t)this + 128, a3);
  writeObject((uint64_t)a2, (uint64_t)this + 144, a3);
  HuffmanDecoder<unsigned short,unsigned int>::writeObject((uint64_t)this + 160, (uint64_t)a2, a3);
  writeObject<unsigned int>((uint64_t)a2, (uint64_t)this + 248, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 96, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 264, a3);
  writeObject<short>((uint64_t)a2, (uint64_t)this + 296, a3);
  writeObject<unsigned char>((uint64_t)a2, (uint64_t)this + 312, a3);
  writeObject<unsigned int>((uint64_t)a2, (uint64_t)this + 328, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 280, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 344, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 360, a3);
  writeObject<unsigned char>((uint64_t)a2, (uint64_t)this + 376, a3);
  writeObject<unsigned int>((uint64_t)a2, (uint64_t)this + 392, a3);
  writeObject<unsigned int>((uint64_t)a2, (uint64_t)this + 408, a3);
  writeObject<unsigned int>((uint64_t)a2, (uint64_t)this + 424, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 440, a3);
  writeObject<short>((uint64_t)a2, (uint64_t)this + 456, a3);
  writeObject<unsigned char>((uint64_t)a2, (uint64_t)this + 472, a3);
  writeObject<unsigned int>((uint64_t)a2, (uint64_t)this + 488, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 504, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 520, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 536, a3);

  return writeObject<unsigned char>((uint64_t)a2, (uint64_t)this + 552, a3);
}

void QuadgramData::loadBinary(QuadgramData *this, DgnStream *a2, unsigned int *a3)
{
  readObject((uint64_t)a2, this, a3);
  readObject((uint64_t)a2, (_DWORD *)this + 1, a3);
  readObject((uint64_t)a2, (_DWORD *)this + 2, a3);
  readObject<short>(a2, (uint64_t)this + 16, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 32, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 48, a3);
  readObject<unsigned int>(a2, (uint64_t)this + 64, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 80, a3);
  readObject(a2, (QuadgramData *)((char *)this + 112), a3);
  readObject(a2, (QuadgramData *)((char *)this + 128), a3);
  readObject(a2, (QuadgramData *)((char *)this + 144), a3);
  HuffmanDecoder<unsigned short,unsigned int>::readObject((unint64_t)this + 160, a2, a3);
  readObject<unsigned int>(a2, (uint64_t)this + 248, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 96, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 264, a3);
  readObject<short>(a2, (uint64_t)this + 296, a3);
  readObject<unsigned char>(a2, (uint64_t)this + 312, a3);
  readObject<unsigned int>(a2, (uint64_t)this + 328, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 280, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 344, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 360, a3);
  readObject<unsigned char>(a2, (uint64_t)this + 376, a3);
  readObject<unsigned int>(a2, (uint64_t)this + 392, a3);
  readObject<unsigned int>(a2, (uint64_t)this + 408, a3);
  readObject<unsigned int>(a2, (uint64_t)this + 424, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 440, a3);
  readObject<short>(a2, (uint64_t)this + 456, a3);
  readObject<unsigned char>(a2, (uint64_t)this + 472, a3);
  readObject<unsigned int>(a2, (uint64_t)this + 488, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 504, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 520, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 536, a3);

  readObject<unsigned char>(a2, (uint64_t)this + 552, a3);
}

char *QuadgramData::saveBinaryShared(QuadgramData *this, DgnSharedMemStream *a2, int a3, unsigned int *a4)
{
  if (a3)
  {
    writeObject((uint64_t)a2, (int *)this, a4);
    writeObject((uint64_t)a2, (int *)this + 1, a4);
    writeObject((uint64_t)a2, (int *)this + 2, a4);
    writeSharedObject<short>(a2, (uint64_t)this + 16, a4);
    writeSharedObject<short>(a2, (uint64_t)this + 32, a4);
    writeSharedObject<short>(a2, (uint64_t)this + 48, a4);
    writeSharedObject<unsigned int>(a2, (uint64_t)this + 64, a4);
    writeSharedObject<short>(a2, (uint64_t)this + 80, a4);
    writeSharedObject(a2, (QuadgramData *)((char *)this + 112), a4);
    writeSharedObject(a2, (QuadgramData *)((char *)this + 128), a4);
    writeSharedObject(a2, (QuadgramData *)((char *)this + 144), a4);
    HuffmanDecoder<unsigned short,unsigned int>::writeObject((uint64_t)this + 160, (uint64_t)a2, a4);
  }
  else
  {
    writeSharedObject<short>(a2, (uint64_t)this + 16, a4);
    writeSharedObject<short>(a2, (uint64_t)this + 32, a4);
    writeSharedObject<short>(a2, (uint64_t)this + 48, a4);
    writeSharedObject<unsigned int>(a2, (uint64_t)this + 64, a4);
    writeSharedObject<short>(a2, (uint64_t)this + 80, a4);
    writeSharedObject(a2, (QuadgramData *)((char *)this + 112), a4);
    writeSharedObject(a2, (QuadgramData *)((char *)this + 128), a4);
    writeSharedObject(a2, (QuadgramData *)((char *)this + 144), a4);
  }
  writeSharedObject<unsigned int>(a2, (uint64_t)this + 248, a4);
  writeSharedObject<short>(a2, (uint64_t)this + 96, a4);
  writeSharedObject<short>(a2, (uint64_t)this + 264, a4);
  writeSharedObject<short>(a2, (uint64_t)this + 296, a4);
  writeSharedObject<unsigned char>(a2, (uint64_t)this + 312, a4);
  writeSharedObject<unsigned int>(a2, (uint64_t)this + 328, a4);
  writeSharedObject<short>(a2, (uint64_t)this + 280, a4);
  writeSharedObject<short>(a2, (uint64_t)this + 344, a4);
  writeSharedObject<short>(a2, (uint64_t)this + 360, a4);
  writeSharedObject<unsigned char>(a2, (uint64_t)this + 376, a4);
  writeSharedObject<unsigned int>(a2, (uint64_t)this + 392, a4);
  writeSharedObject<unsigned int>(a2, (uint64_t)this + 408, a4);
  writeSharedObject<unsigned int>(a2, (uint64_t)this + 424, a4);
  writeSharedObject<short>(a2, (uint64_t)this + 440, a4);
  writeSharedObject<short>(a2, (uint64_t)this + 456, a4);
  writeSharedObject<unsigned char>(a2, (uint64_t)this + 472, a4);
  writeSharedObject<unsigned int>(a2, (uint64_t)this + 488, a4);
  writeSharedObject<short>(a2, (uint64_t)this + 504, a4);
  writeSharedObject<short>(a2, (uint64_t)this + 520, a4);
  writeSharedObject<short>(a2, (uint64_t)this + 536, a4);

  return writeSharedObject<unsigned char>(a2, (uint64_t)this + 552, a4);
}

int *QuadgramData::loadBinaryShared(QuadgramData *this, DgnSharedMemStream *a2, int a3, unsigned int *a4)
{
  if (a3)
  {
    readObject((uint64_t)a2, this, a4);
    readObject((uint64_t)a2, (_DWORD *)this + 1, a4);
    readObject((uint64_t)a2, (_DWORD *)this + 2, a4);
    readSharedObject<short>(a2, (uint64_t)this + 16, a4);
    readSharedObject<short>(a2, (uint64_t)this + 32, a4);
    readSharedObject<short>(a2, (uint64_t)this + 48, a4);
    readSharedObject<unsigned int>(a2, (uint64_t)this + 64, a4);
    readSharedObject<short>(a2, (uint64_t)this + 80, a4);
    readSharedObject(a2, (QuadgramData *)((char *)this + 112), a4);
    readSharedObject(a2, (QuadgramData *)((char *)this + 128), a4);
    readSharedObject(a2, (QuadgramData *)((char *)this + 144), a4);
    HuffmanDecoder<unsigned short,unsigned int>::readObject((unint64_t)this + 160, a2, a4);
  }
  else
  {
    readSharedObject<short>(a2, (uint64_t)this + 16, a4);
    readSharedObject<short>(a2, (uint64_t)this + 32, a4);
    readSharedObject<short>(a2, (uint64_t)this + 48, a4);
    readSharedObject<unsigned int>(a2, (uint64_t)this + 64, a4);
    readSharedObject<short>(a2, (uint64_t)this + 80, a4);
    readSharedObject(a2, (QuadgramData *)((char *)this + 112), a4);
    readSharedObject(a2, (QuadgramData *)((char *)this + 128), a4);
    readSharedObject(a2, (QuadgramData *)((char *)this + 144), a4);
  }
  readSharedObject<unsigned int>(a2, (uint64_t)this + 248, a4);
  readSharedObject<short>(a2, (uint64_t)this + 96, a4);
  readSharedObject<short>(a2, (uint64_t)this + 264, a4);
  readSharedObject<short>(a2, (uint64_t)this + 296, a4);
  readSharedObject<unsigned char>(a2, (uint64_t)this + 312, a4);
  readSharedObject<unsigned int>(a2, (uint64_t)this + 328, a4);
  readSharedObject<short>(a2, (uint64_t)this + 280, a4);
  readSharedObject<short>(a2, (uint64_t)this + 344, a4);
  readSharedObject<short>(a2, (uint64_t)this + 360, a4);
  readSharedObject<unsigned char>(a2, (uint64_t)this + 376, a4);
  readSharedObject<unsigned int>(a2, (uint64_t)this + 392, a4);
  readSharedObject<unsigned int>(a2, (uint64_t)this + 408, a4);
  readSharedObject<unsigned int>(a2, (uint64_t)this + 424, a4);
  readSharedObject<short>(a2, (uint64_t)this + 440, a4);
  readSharedObject<short>(a2, (uint64_t)this + 456, a4);
  readSharedObject<unsigned char>(a2, (uint64_t)this + 472, a4);
  readSharedObject<unsigned int>(a2, (uint64_t)this + 488, a4);
  readSharedObject<short>(a2, (uint64_t)this + 504, a4);
  readSharedObject<short>(a2, (uint64_t)this + 520, a4);
  readSharedObject<short>(a2, (uint64_t)this + 536, a4);

  return readSharedObject<unsigned char>(a2, (uint64_t)this + 552, a4);
}

uint64_t QuadgramData::computeLocalPreloadableBytes(QuadgramData *this)
{
  uint64_t v16 = *((unsigned int *)this + 14);
  if (v16 < 2) {
    return 0;
  }
  uint64_t result = 0;
  for (unint64_t i = 1; i != v16; ++i)
  {
    if (i < *((unsigned int *)this + 14))
    {
      int v18 = *(unsigned __int16 *)(*((void *)this + 6) + 2 * i);
      if (*(_WORD *)(*((void *)this + 6) + 2 * i))
      {
        int v4 = 0;
        uint64_t v5 = *((void *)this + 12);
        unint64_t v17 = i;
        do
        {
          uint64_t v6 = (*(_DWORD *)(*((void *)this + 8) + 4 * i) + v4);
          if (*(_WORD *)(v5 + 2 * v6))
          {
            int v19 = v4;
            uint64_t v20 = result;
            unsigned int v7 = 0;
            uint64_t v8 = 0;
            char v9 = 0;
            do
            {
              unsigned int v10 = 0;
              uint64_t v11 = 9;
              if (!*((_DWORD *)this + 6)) {
                uint64_t v11 = 10;
              }
              v8 += v11;
              while (1)
              {
                uint64_t v12 = *(unsigned int *)(*((void *)this + 31) + 4 * v6);
                if (*(_DWORD *)this)
                {
                  uint64_t v13 = (char *)this + 280;
                  if ((*(_DWORD *)(*((void *)this + 14) + 4 * (v6 >> 5)) & (1 << v6)) != 0)
                  {
                    LODWORD(v12) = *(_DWORD *)(*((void *)this + 53) + 4 * v12);
                    uint64_t v13 = (char *)this + 504;
                  }
                }
                else
                {
                  uint64_t v13 = (char *)this + 280;
                }
                if (v10 >= *(unsigned __int16 *)(*(void *)v13 + 2 * (v12 + v7))) {
                  break;
                }
                if (QuadgramData::getScoreForIndex(this, v6, v7, v10) != 20000)
                {
                  uint64_t v14 = 3;
                  if (!*((_DWORD *)this + 10)) {
                    uint64_t v14 = 4;
                  }
                  v8 += v14;
                  char v9 = 1;
                }
                ++v10;
              }
              ++v7;
              uint64_t v5 = *((void *)this + 12);
            }
            while (v7 < *(unsigned __int16 *)(v5 + 2 * v6));
            if (v9) {
              uint64_t v15 = v8;
            }
            else {
              uint64_t v15 = 0;
            }
            uint64_t result = v20;
            unint64_t i = v17;
            int v4 = v19;
          }
          else
          {
            uint64_t v15 = 0;
          }
          result += v15;
          ++v4;
        }
        while (v4 != v18);
      }
    }
  }
  return result;
}

uint64_t QuadgramData::getScoreForIndex(QuadgramData *this, unsigned int a2, int a3, int a4)
{
  uint64_t v4 = *(unsigned int *)(*((void *)this + 31) + 4 * a2);
  if (*(_DWORD *)this && ((*(_DWORD *)(*((void *)this + 14) + 4 * (a2 >> 5)) >> a2) & 1) != 0)
  {
    uint64_t v5 = (*(_DWORD *)(*((void *)this + 61)
                                  + 4 * (*(_DWORD *)(*((void *)this + 53) + 4 * v4) + a3))
                      + a4);
    if (!*((_DWORD *)this + 10))
    {
      uint64_t v7 = *((void *)this + 67);
      return *(unsigned __int16 *)(v7 + 2 * v5);
    }
    uint64_t v6 = *((void *)this + 69);
  }
  else
  {
    uint64_t v5 = (*(_DWORD *)(*((void *)this + 41) + 4 * (v4 + a3)) + a4);
    if (!*((_DWORD *)this + 2))
    {
      uint64_t v7 = *((void *)this + 45);
      return *(unsigned __int16 *)(v7 + 2 * v5);
    }
    uint64_t v6 = *((void *)this + 47);
  }
  uint64_t v5 = *(unsigned __int8 *)(v6 + v5);
  uint64_t v7 = *((void *)this + 4);
  return *(unsigned __int16 *)(v7 + 2 * v5);
}

uint64_t QuadgramData::initNewQuadgramData(uint64_t a1, TrigramData *this, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v6 = this;
  uint64_t v8 = *(unsigned int *)(a1 + 56);
  TrigramData::configureTrigramData(this, 1, *(_DWORD *)(a1 + 24), *(__int16 **)(a1 + 16), *(_DWORD *)(a1 + 40), *(const unsigned __int16 **)(a1 + 32));
  QuadgramData::preAllocateStaticQuadgramData(v6, v8, *(_DWORD *)(a1 + 88));
  QuadgramData::preAllocateDynamicQuadgramData((uint64_t)v6, *(_DWORD *)(a1 + 272), *(_DWORD *)(a1 + 352));
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  if (v8 >= 2)
  {
    unint64_t v9 = 1;
    uint64_t v43 = a4;
    uint64_t v44 = v6;
    uint64_t v41 = v8;
    do
    {
      if (v9 < *(unsigned int *)(a1 + 56))
      {
        uint64_t v10 = *(void *)(a1 + 48);
        int v11 = *(unsigned __int16 *)(v10 + 2 * v9);
        if (*(_WORD *)(v10 + 2 * v9))
        {
          QuadgramData::allocQuad1(v6, v9, *(unsigned __int16 *)(v10 + 2 * v9));
          int v12 = 0;
          uint64_t v13 = 0;
          uint64_t v42 = *(unsigned int *)(a4 + 8);
          unint64_t v46 = v9;
          int v45 = v11;
          do
          {
            uint64_t v14 = (*(_DWORD *)(*(void *)(a1 + 64) + 4 * v9) + v12);
            int v15 = *(unsigned __int16 *)(*(void *)(a1 + 80) + 2 * v14);
            uint64_t v16 = (*(_DWORD *)(*((void *)v6 + 8) + 4 * v9) + v12);
            *(_WORD *)(*((void *)v6 + 10) + 2 * vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
            QuadgramData::quad2SetUnallocated((uint64_t)v6, v16);
            *(_WORD *)(*((void *)v6 + 10) + 2 * vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v15;
            LODWORD(v5DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
            if (*(_WORD *)(*(void *)(a1 + 96) + 2 * v14))
            {
              uint64_t v47 = v16;
              int v48 = v15;
              int v49 = v12;
              uint64_t v50 = v13;
              int v17 = 0;
              uint64_t v18 = 0;
              int v19 = 0;
              uint64_t v54 = v14 >> 5;
              int v20 = 1 << v14;
              do
              {
                uint64_t v21 = *(unsigned int *)(*(void *)(a1 + 248) + 4 * v14);
                int v22 = *(_DWORD *)(*(void *)(a1 + 248) + 4 * v14);
                uint64_t v23 = (void *)(a1 + 264);
                if (*(_DWORD *)a1)
                {
                  int v22 = *(_DWORD *)(*(void *)(a1 + 248) + 4 * v14);
                  uint64_t v23 = (void *)(a1 + 264);
                  if ((*(_DWORD *)(*(void *)(a1 + 112) + 4 * v54) & v20) != 0)
                  {
                    int v22 = *(_DWORD *)(*(void *)(a1 + 424) + 4 * v21);
                    uint64_t v23 = (void *)(a1 + 440);
                  }
                }
                unsigned __int16 v24 = 0;
                unsigned int v25 = 0;
                unsigned int v52 = v17 + 1;
                __int16 v51 = *(_WORD *)(*v23 + 2 * (v22 + v17));
                uint64_t v26 = 9;
                if (!*(_DWORD *)(a1 + 24)) {
                  uint64_t v26 = 10;
                }
                v18 += v26;
                if (!*(_DWORD *)a1)
                {
LABEL_22:
                  uint64_t v30 = (void *)(a1 + 280);
                  goto LABEL_23;
                }
                while (1)
                {
                  if ((*(_DWORD *)(*(void *)(a1 + 112) + 4 * v54) & v20) == 0) {
                    goto LABEL_22;
                  }
                  LODWORD(v21) = *(_DWORD *)(*(void *)(a1 + 424) + 4 * v21);
                  uint64_t v30 = (void *)(a1 + 504);
LABEL_23:
                  if (v25 >= *(unsigned __int16 *)(*v30 + 2 * (v21 + v17))) {
                    break;
                  }
                  unsigned __int16 Quad3SuccIdForIndex = QuadgramData::getQuad3SuccIdForIndex((QuadgramData *)a1, v14, v17, v25);
                  if (QuadgramData::getScoreForIndex((QuadgramData *)a1, v14, v17, v25) != 20000)
                  {
                    int v28 = *(_DWORD *)(a1 + 40);
                    HuffmanEncoder<unsigned short,unsigned int>::addValue(a3, Quad3SuccIdForIndex);
                    ++v19;
                    uint64_t v29 = 3;
                    if (!v28) {
                      uint64_t v29 = 4;
                    }
                    v18 += v29;
                    ++v24;
                  }
                  ++v25;
                  LODWORD(v21) = *(_DWORD *)(*(void *)(a1 + 248) + 4 * v14);
                  if (!*(_DWORD *)a1) {
                    goto LABEL_22;
                  }
                }
                if (v24)
                {
                  HuffmanEncoder<unsigned short,unsigned int>::addValue(a3, v24);
                  unsigned int v31 = v58;
                  if (v58 == HIDWORD(v58))
                  {
                    DgnPrimArray<short>::reallocElts((uint64_t)&v57, 1, 1);
                    unsigned int v31 = v58;
                  }
                  *(_WORD *)(v57 + 2 * v31) = v51;
                  LODWORD(v5DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v31 + 1;
                }
                ++v17;
              }
              while (v52 < *(unsigned __int16 *)(*(void *)(a1 + 96) + 2 * v14));
              a4 = v43;
              unint64_t v9 = v46;
              int v11 = v45;
              if (v58)
              {
                uint64_t v6 = v44;
                *(_DWORD *)(*((void *)v44 + 14) + 4 * (v47 >> 5)) |= 1 << v47;
                *(_WORD *)(*((void *)v44 + 12) + 2 * v47) = v58;
                HuffmanEncoder<unsigned short,unsigned int>::addSuccessors(a3, (uint64_t)&v57);
                uint64_t v32 = *(unsigned int *)(v43 + 8);
                if (v32 == *(_DWORD *)(v43 + 12))
                {
                  DgnArray<DiskNgramContext>::reallocElts(v43, 1, 1);
                  LODWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = *(_DWORD *)(v43 + 8);
                }
                uint64_t v33 = *(void *)v43 + 56 * v32;
                *(void *)uint64_t v33 = 0;
                *(void *)(v33 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
                *(void *)(v33 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
                *(void *)(v33 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = -1;
                strcpy((char *)(v33 + 32), " N");
                LODWORD(v33) = *(_DWORD *)(v43 + 8);
                *(_DWORD *)(v43 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v33 + 1;
                uint64_t v34 = *(void *)v43 + 56 * v33;
                *(unsigned char *)(v34 + 34) = 4;
                *(_DWORD *)(v34 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = v46;
                *(_DWORD *)(v34 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v48;
                *(_DWORD *)(v34 + 36) = v14;
                *(_DWORD *)(v34 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = v47;
                *(_DWORD *)(v34 + 44) = v52;
                *(_DWORD *)(v34 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = v19;
                *(void *)(v34 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v18;
                *(void *)(v34 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
                uint64_t v13 = v18 + v50;
              }
              else
              {
                uint64_t v6 = v44;
                uint64_t v13 = v50;
              }
              int v12 = v49;
            }
            ++v12;
          }
          while (v12 != v11);
          uint64_t v35 = *(unsigned int *)(a4 + 8);
          uint64_t v8 = v41;
          if (v42 < v35)
          {
            float v36 = *(double *)(*a5 + 8 * v9);
            uint64_t v37 = (float *)(*(void *)a4 + 56 * v42 + 16);
            uint64_t v38 = v35 - v42;
            do
            {
              *(v37 - 3) = v36;
              *(void *)uint64_t v37 = v13;
              v37 += 14;
              --v38;
            }
            while (v38);
          }
        }
      }
      ++v9;
    }
    while (v9 != v8);
  }
  if (!*(_DWORD *)(a3 + 128)) {
    HuffmanEncoder<unsigned short,unsigned int>::addValue(a3, 0);
  }
  uint64_t v56 = 0;
  memset(v55, 0, sizeof(v55));
  HuffmanEncoder<unsigned short,unsigned int>::finalizeTables(a3, (unint64_t)v55);
  HuffmanDecoder<unsigned short,unsigned int>::operator=((unint64_t)v6 + 160, (uint64_t)v55);
  HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)v55);
  QuadgramData::compact((void **)v6);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v57);
}

void sub_213FA09CC(_Unwind_Exception *a1)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 - 104);
  _Unwind_Resume(a1);
}

void QuadgramData::preAllocateStaticQuadgramData(QuadgramData *this, unsigned int a2, unsigned int a3)
{
  unsigned int v6 = *((_DWORD *)this + 15);
  BOOL v7 = a2 >= v6;
  uint64_t v8 = a2 - v6;
  if (v8 != 0 && v7) {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 48, v8, 0);
  }
  unsigned int v9 = *((_DWORD *)this + 19);
  if (a2 > v9) {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 64, a2 - v9, 0);
  }
  unsigned int v10 = *((_DWORD *)this + 27);
  if (a3 > v10) {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 96, a3 - v10, 0);
  }
  unsigned int v11 = *((_DWORD *)this + 65);
  if (a3 > v11) {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 248, a3 - v11, 0);
  }
  unsigned int v12 = *((_DWORD *)this + 23);
  if (a3 > v12) {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 80, a3 - v12, 0);
  }
  if (*(_DWORD *)this)
  {
    BitArray::preAllocate((QuadgramData *)((char *)this + 112), a3);
    BitArray::preAllocate((QuadgramData *)((char *)this + 128), a3);
    BitArray::preAllocate((QuadgramData *)((char *)this + 144), a3);
  }
}

uint64_t QuadgramData::preAllocateDynamicQuadgramData(uint64_t this, unsigned int a2, unsigned int a3)
{
  uint64_t v5 = this;
  unsigned int v6 = *(_DWORD *)(this + 292);
  BOOL v7 = a2 >= v6;
  uint64_t v8 = a2 - v6;
  if (v8 != 0 && v7) {
    this = DgnPrimArray<short>::reallocElts(this + 280, v8, 0);
  }
  unsigned int v9 = *(_DWORD *)(v5 + 276);
  if (a2 > v9) {
    this = DgnPrimArray<short>::reallocElts(v5 + 264, a2 - v9, 0);
  }
  unsigned int v10 = *(_DWORD *)(v5 + 340);
  if (a2 > v10) {
    this = DgnPrimArray<unsigned int>::reallocElts(v5 + 328, a2 - v10, 0);
  }
  if (*(_DWORD *)(v5 + 4))
  {
    if (*(_DWORD *)(v5 + 324) < a2)
    {
      uint64_t v14 = 0;
      this = realloc_array(*(void **)(v5 + 312), &v14, a2, *(unsigned int *)(v5 + 320), *(unsigned int *)(v5 + 320), 1);
      *(_DWORD *)(v5 + 3DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = this;
      *(void *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 312) = v14;
    }
  }
  else
  {
    unsigned int v11 = *(_DWORD *)(v5 + 308);
    if (a2 > v11) {
      this = DgnPrimArray<short>::reallocElts(v5 + 296, a2 - v11, 0);
    }
  }
  unsigned int v12 = *(_DWORD *)(v5 + 356);
  if (a3 > v12) {
    this = DgnPrimArray<short>::reallocElts(v5 + 344, a3 - v12, 0);
  }
  if (*(_DWORD *)(v5 + 8))
  {
    if (*(_DWORD *)(v5 + 388) < a3)
    {
      uint64_t v14 = 0;
      this = realloc_array(*(void **)(v5 + 376), &v14, a3, *(unsigned int *)(v5 + 384), *(unsigned int *)(v5 + 384), 1);
      *(_DWORD *)(v5 + 3HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 88) = this;
      *(void *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 376) = v14;
    }
  }
  else
  {
    unsigned int v13 = *(_DWORD *)(v5 + 372);
    if (a3 > v13) {
      return DgnPrimArray<short>::reallocElts(v5 + 360, a3 - v13, 0);
    }
  }
  return this;
}

uint64_t QuadgramData::getQuad3SuccIdForIndex(QuadgramData *this, unsigned int a2, int a3, int a4)
{
  uint64_t v4 = *(unsigned int *)(*((void *)this + 31) + 4 * a2);
  if (*(_DWORD *)this && ((*(_DWORD *)(*((void *)this + 14) + 4 * (a2 >> 5)) >> a2) & 1) != 0)
  {
    uint64_t v5 = (_DWORD *)(*((void *)this + 61) + 4 * (*(_DWORD *)(*((void *)this + 53) + 4 * v4) + a3));
    unsigned int v6 = (char *)this + 520;
  }
  else
  {
    uint64_t v5 = (_DWORD *)(*((void *)this + 41) + 4 * (v4 + a3));
    unsigned int v6 = (char *)this + 344;
  }
  return *(unsigned __int16 *)(*(void *)v6 + 2 * (*v5 + a4));
}

uint64_t QuadgramData::savePersistentAndFillInNewQuadgramData(QuadgramData *this, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, unsigned int a7)
{
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  unint64_t v67 = 0;
  uint64_t v68 = 0;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  if (*(_WORD *)(*((void *)this + 12) + 2 * a6))
  {
    unsigned int v9 = 0;
    uint64_t v50 = a6 >> 5;
    int v10 = 1 << a6;
    int v49 = (char *)this + 504;
    int v48 = (char *)this + 264;
    int v45 = (char *)this + 312;
    unint64_t v46 = (char *)this + 440;
    uint64_t v44 = (char *)this + 472;
    uint64_t v11 = a6;
    do
    {
      uint64_t v12 = *(unsigned int *)(*((void *)this + 31) + 4 * v11);
      int v13 = *(_DWORD *)this;
      int v14 = *(_DWORD *)(*((void *)this + 31) + 4 * v11);
      int v15 = v48;
      if (*(_DWORD *)this)
      {
        int v14 = *(_DWORD *)(*((void *)this + 31) + 4 * v11);
        int v15 = v48;
        if ((*(_DWORD *)(*((void *)this + 14) + 4 * v50) & v10) != 0)
        {
          int v14 = *(_DWORD *)(*((void *)this + 53) + 4 * v12);
          int v15 = v46;
        }
      }
      __int16 v16 = 0;
      unsigned int v17 = 0;
      __int16 v47 = *(_WORD *)(*v15 + 2 * (v14 + v9));
      while (1)
      {
        int v18 = v12;
        int v19 = (void *)((char *)this + 280);
        if (v13)
        {
          int v18 = v12;
          int v19 = (void *)((char *)this + 280);
          if ((*(_DWORD *)(*((void *)this + 14) + 4 * v50) & v10) != 0)
          {
            int v18 = *(_DWORD *)(*((void *)this + 53) + 4 * v12);
            int v19 = v49;
          }
        }
        if (v17 >= *(unsigned __int16 *)(*v19 + 2 * (v18 + v9))) {
          break;
        }
        __int16 Quad3SuccIdForIndex = QuadgramData::getQuad3SuccIdForIndex(this, a6, v9, v17);
        int ScoreForIndex = QuadgramData::getScoreForIndex(this, a6, v9, v17);
        __int16 v22 = ScoreForIndex;
        if (ScoreForIndex != 20000)
        {
          int v23 = v68;
          if (v68 == HIDWORD(v68))
          {
            DgnPrimArray<short>::reallocElts((uint64_t)&v67, 1, 1);
            int v23 = v68;
          }
          v67[v23] = Quad3SuccIdForIndex;
          LODWORD(v6DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v23 + 1;
          if (*((_DWORD *)this + 10))
          {
            Quantizedint ScoreForIndex = QuadgramData::getQuantizedScoreForIndex(this, a6, v9, v17);
            uint64_t v25 = v58;
            if (v58 == (unint64_t)HIDWORD(v58))
            {
              DgnPrimArray<char>::reallocElts((uint64_t)&v57, 1, 1);
              uint64_t v25 = v58;
            }
            v57[v25] = QuantizedScoreForIndex;
            int v26 = v58;
            int v27 = &v58;
          }
          else
          {
            int v26 = v60;
            if (v60 == HIDWORD(v60))
            {
              DgnPrimArray<short>::reallocElts((uint64_t)&v59, 1, 1);
              int v26 = v60;
            }
            v59[v26] = v22;
            int v27 = &v60;
          }
          ++v16;
          *(_DWORD *)int v27 = v26 + 1;
        }
        ++v17;
        LODWORD(v12) = *(_DWORD *)(*((void *)this + 31) + 4 * v11);
        int v13 = *(_DWORD *)this;
      }
      if (v16)
      {
        if (*((_DWORD *)this + 6))
        {
          if (v13 && (*(_DWORD *)(*((void *)this + 14) + 4 * v50) & v10) != 0)
          {
            LODWORD(v12) = *(_DWORD *)(*((void *)this + 53) + 4 * v12);
            int v28 = v44;
          }
          else
          {
            int v28 = v45;
          }
          char v29 = *(unsigned char *)(*v28 + v12 + v9);
          uint64_t v30 = v62;
          if (v62 == (unint64_t)HIDWORD(v62))
          {
            DgnPrimArray<char>::reallocElts((uint64_t)&v61, 1, 1);
            uint64_t v30 = v62;
          }
          v61[v30] = v29;
          int v31 = v62;
          uint64_t v32 = &v62;
        }
        else
        {
          __int16 BackoffWeight = QuadgramData::getBackoffWeight(this, a6, v9);
          int v31 = v64;
          if (v64 == HIDWORD(v64))
          {
            DgnPrimArray<short>::reallocElts((uint64_t)&v63, 1, 1);
            int v31 = v64;
          }
          v63[v31] = BackoffWeight;
          uint64_t v32 = &v64;
        }
        *(_DWORD *)uint64_t v32 = v31 + 1;
        int v34 = v70;
        if (v70 == HIDWORD(v70))
        {
          DgnPrimArray<short>::reallocElts((uint64_t)&v69, 1, 1);
          int v34 = v70;
        }
        v69[v34] = v47;
        LODWORD(v70) = v34 + 1;
        int v35 = v66;
        if (v66 == HIDWORD(v66))
        {
          DgnPrimArray<short>::reallocElts((uint64_t)&v65, 1, 1);
          int v35 = v66;
        }
        v65[v35] = v16;
        LODWORD(v66) = v35 + 1;
      }
      ++v9;
    }
    while (v9 < *(unsigned __int16 *)(*((void *)this + 12) + 2 * v11));
  }
  *(_DWORD *)(*(void *)(a4 + 248) + 4 * a7) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2);
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  __int16 v51 = 0;
  uint64_t v52 = 0;
  HuffmanEncoder<unsigned short,unsigned int>::encodeSuccessors(a5, (uint64_t *)&v69, (uint64_t)&v53);
  HuffmanEncoder<unsigned short,unsigned int>::encodeValues(a5, (uint64_t)&v65, (uint64_t)&v55);
  HuffmanEncoder<unsigned short,unsigned int>::encodeValues(a5, (uint64_t)&v67, (uint64_t)&v51);
  BOOL v37 = 4 * ((v54 + 1) + (unint64_t)(v56 + 1) + (v52 + 1)) + 12 < 2 * ((v70 + 1) + (unint64_t)(v66 + 1) + (v68 + 1)) + 4
     && v56 < 0x10000;
  if (v37)
  {
    *(_DWORD *)(*(void *)(a4 + 144) + 4 * (a7 >> 5)) |= 1 << a7;
    LOWORD(v71[0]) = v56;
    writeObject(a2, (unsigned __int16 *)v71, a3);
    writeObjectArray(a2, v55, v56, a3);
    LOWORD(v71[0]) = v54;
    writeObject(a2, (unsigned __int16 *)v71, a3);
    writeObjectArray(a2, v53, v54, a3);
  }
  else
  {
    writeObjectArray(a2, v65, v66, a3);
    writeObjectArray(a2, v69, v70, a3);
  }
  if (*((_DWORD *)this + 6)) {
    writeObjectArray(a2, v61, v62, a3);
  }
  else {
    writeObjectArray(a2, v63, v64, a3);
  }
  v71[0] = v68;
  writeObject(a2, v71, a3);
  if (v37)
  {
    v71[0] = v52;
    writeObject(a2, v71, a3);
    writeObjectArray(a2, v51, v52, a3);
  }
  else
  {
    writeObjectArray(a2, v67, v68, a3);
  }
  if (*((_DWORD *)this + 10)) {
    writeObjectArray(a2, v57, v58, a3);
  }
  else {
    writeObjectArray(a2, v59, v60, a3);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v51);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v53);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v55);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v57);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v59);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v61);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v63);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v65);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v67);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v69);
}

void sub_213FA133C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a25);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a27);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a29);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a31);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a33);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v33 - 176);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v33 - 160);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v33 - 144);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v33 - 128);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v33 - 112);
  _Unwind_Resume(a1);
}

uint64_t QuadgramData::getQuantizedScoreForIndex(QuadgramData *this, unsigned int a2, int a3, int a4)
{
  uint64_t v4 = *(unsigned int *)(*((void *)this + 31) + 4 * a2);
  if (*(_DWORD *)this && ((*(_DWORD *)(*((void *)this + 14) + 4 * (a2 >> 5)) >> a2) & 1) != 0)
  {
    uint64_t v5 = (_DWORD *)(*((void *)this + 61) + 4 * (*(_DWORD *)(*((void *)this + 53) + 4 * v4) + a3));
    unsigned int v6 = (char *)this + 552;
  }
  else
  {
    uint64_t v5 = (_DWORD *)(*((void *)this + 41) + 4 * (v4 + a3));
    unsigned int v6 = (char *)this + 376;
  }
  return *(unsigned __int8 *)(*(void *)v6 + (*v5 + a4));
}

uint64_t QuadgramData::getBackoffWeight(QuadgramData *this, unsigned int a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(*((void *)this + 31) + 4 * a2);
  if (!*(_DWORD *)this || ((*(_DWORD *)(*((void *)this + 14) + 4 * (a2 >> 5)) >> a2) & 1) == 0)
  {
    if (*((_DWORD *)this + 1))
    {
      unsigned int v5 = v3 + a3;
      uint64_t v6 = *((void *)this + 39);
      goto LABEL_7;
    }
    unsigned int v8 = v3 + a3;
    uint64_t v9 = *((void *)this + 37);
LABEL_10:
    BOOL v7 = (__int16 *)(v9 + 2 * v8);
    return *v7;
  }
  int v4 = *(_DWORD *)(*((void *)this + 53) + 4 * v3);
  if (!*((_DWORD *)this + 1))
  {
    unsigned int v8 = v4 + a3;
    uint64_t v9 = *((void *)this + 57);
    goto LABEL_10;
  }
  unsigned int v5 = v4 + a3;
  uint64_t v6 = *((void *)this + 59);
LABEL_7:
  BOOL v7 = (__int16 *)(*((void *)this + 2) + 2 * *(unsigned __int8 *)(v6 + v5));
  return *v7;
}

void HuffmanEncoder<unsigned short,unsigned int>::encodeValues(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a2 + 8))
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    unsigned int v7 = 0;
    uint64_t v8 = a1 + 8;
    unsigned int v9 = 32;
    do
    {
      unsigned int v17 = *Hash<unsigned short,unsigned short,HuffmanSymbol<unsigned short,unsigned int>,HuffmanSymbol<unsigned short,unsigned int>*>::findBucket(v8, (unsigned __int16 *)(*(void *)a2 + v5));
      if (!v17) {
        throwEncodeUnknownSymbol(*(_WORD *)(*(void *)a2 + v5), v10, v11, v12, v13, v14, v15, v16);
      }
      int v18 = (unsigned int *)v17[2];
      unsigned int v20 = *v18;
      unsigned int v19 = v18[1];
      if (v19 >= v9) {
        char v21 = v9;
      }
      else {
        char v21 = v18[1];
      }
      unsigned int v22 = v7 << v21;
      if (v19 == v9)
      {
        uint64_t v23 = *(unsigned int *)(a3 + 8);
        if (v23 == *(_DWORD *)(a3 + 12))
        {
          DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
          uint64_t v23 = *(unsigned int *)(a3 + 8);
        }
        unsigned int v7 = 0;
        *(_DWORD *)(*(void *)a3 + 4 * v23) = v22 | v20;
        ++*(_DWORD *)(a3 + 8);
        unsigned int v9 = 32;
      }
      else
      {
        unsigned int v24 = v19 - v9;
        if (v19 <= v9)
        {
          unsigned int v7 = v22 | v20;
          v9 -= v19;
        }
        else
        {
          uint64_t v25 = *(unsigned int *)(a3 + 8);
          if (v25 == *(_DWORD *)(a3 + 12))
          {
            DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
            uint64_t v25 = *(unsigned int *)(a3 + 8);
          }
          *(_DWORD *)(*(void *)a3 + 4 * v25) = v22 | (v20 >> v24);
          ++*(_DWORD *)(a3 + 8);
          unsigned int v9 = 32 - v24;
          unsigned int v7 = (0xFFFFFFFF >> -(char)v24) & v20;
        }
      }
      ++v6;
      v5 += 2;
    }
    while (v6 < *(unsigned int *)(a2 + 8));
  }
  else
  {
    unsigned int v7 = 0;
    LOBYTE(v9) = 32;
  }
  unsigned int v26 = *(_DWORD *)(a3 + 8);
  if (v26) {
    BOOL v27 = v7 == 0;
  }
  else {
    BOOL v27 = 0;
  }
  if (!v27)
  {
    if (v26 == *(_DWORD *)(a3 + 12))
    {
      DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
      unsigned int v26 = *(_DWORD *)(a3 + 8);
    }
    *(_DWORD *)(*(void *)a3 + 4 * v26) = v7 << v9;
    ++*(_DWORD *)(a3 + 8);
  }
}

uint64_t QuadgramData::fillInFullyLoadedQuadgramData(QuadgramData *this, QuadgramData *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *((unsigned int *)this + 14);
  TrigramData::configureTrigramData(a2, 0, *((_DWORD *)this + 6), *((__int16 **)this + 2), *((_DWORD *)this + 10), *((const unsigned __int16 **)this + 4));
  QuadgramData::preAllocateStaticQuadgramData(v2, v4, *((_DWORD *)this + 22));
  QuadgramData::preAllocateDynamicQuadgramData((uint64_t)v2, *((_DWORD *)this + 68), *((_DWORD *)this + 88));
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  uint64_t v48 = v4;
  if (v4 >= 2)
  {
    unint64_t v5 = 1;
    int v49 = v2;
    do
    {
      if (v5 < *((unsigned int *)this + 14))
      {
        int v50 = *(unsigned __int16 *)(*((void *)this + 6) + 2 * v5);
        if (*(_WORD *)(*((void *)this + 6) + 2 * v5))
        {
          QuadgramData::allocQuad1(v2, v5, v50);
          int v6 = 0;
          unint64_t v52 = v5;
          do
          {
            uint64_t v7 = (*(_DWORD *)(*((void *)this + 8) + 4 * v5) + v6);
            __int16 v51 = *(_WORD *)(*((void *)this + 10) + 2 * v7);
            LODWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = 0;
            if ((int)v70 >= 1)
            {
              uint64_t v8 = 16 * v70 - 16;
              do
              {
                DgnPrimArray<unsigned int>::~DgnPrimArray(v69 + v8);
                v8 -= 16;
              }
              while (v8 != -16);
            }
            LODWORD(v70) = 0;
            LODWORD(v6DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
            LODWORD(v66) = 0;
            if ((int)v64 >= 1)
            {
              uint64_t v9 = 16 * v64 - 16;
              do
              {
                DgnPrimArray<unsigned int>::~DgnPrimArray(v63 + v9);
                v9 -= 16;
              }
              while (v9 != -16);
            }
            int v53 = v6;
            LODWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = 0;
            if ((int)v62 >= 1)
            {
              uint64_t v10 = 16 * v62 - 16;
              do
              {
                DgnPrimArray<unsigned int>::~DgnPrimArray(v61 + v10);
                v10 -= 16;
              }
              while (v10 != -16);
            }
            LODWORD(v62) = 0;
            if (*(_WORD *)(*((void *)this + 12) + 2 * v7))
            {
              unsigned int v11 = 0;
              uint64_t v12 = v7 >> 5;
              int v13 = 1 << v7;
              do
              {
                uint64_t v14 = *((void *)this + 31);
                uint64_t v15 = *(unsigned int *)(v14 + 4 * v7);
                int v16 = *(_DWORD *)this;
                if (*(_DWORD *)this)
                {
                  unsigned int v17 = (char *)this + 264;
                  if ((*(_DWORD *)(*((void *)this + 14) + 4 * v12) & v13) != 0)
                  {
                    LODWORD(v15) = *(_DWORD *)(*((void *)this + 53) + 4 * v15);
                    unsigned int v17 = (char *)this + 440;
                  }
                }
                else
                {
                  unsigned int v17 = (char *)this + 264;
                }
                unsigned int v18 = 0;
                __int16 v54 = *(_WORD *)(*(void *)v17 + 2 * (v15 + v11));
                LODWORD(v60) = 0;
                LODWORD(v5DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
                LODWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = 0;
                while (1)
                {
                  uint64_t v19 = *(unsigned int *)(v14 + 4 * v7);
                  int v20 = v19;
                  char v21 = (char *)this + 280;
                  if (v16)
                  {
                    int v20 = v19;
                    char v21 = (char *)this + 280;
                    if ((*(_DWORD *)(*((void *)this + 14) + 4 * v12) & v13) != 0)
                    {
                      int v20 = *(_DWORD *)(*((void *)this + 53) + 4 * v19);
                      char v21 = (char *)this + 504;
                    }
                  }
                  if (v18 >= *(unsigned __int16 *)(*(void *)v21 + 2 * (v20 + v11))) {
                    break;
                  }
                  __int16 Quad3SuccIdForIndex = QuadgramData::getQuad3SuccIdForIndex(this, v7, v11, v18);
                  int ScoreForIndex = QuadgramData::getScoreForIndex(this, v7, v11, v18);
                  __int16 v24 = ScoreForIndex;
                  if (ScoreForIndex != 20000)
                  {
                    unsigned int v25 = v60;
                    if (v60 == HIDWORD(v60))
                    {
                      DgnPrimArray<short>::reallocElts((uint64_t)&v59, 1, 1);
                      unsigned int v25 = v60;
                    }
                    *(_WORD *)(v59 + 2 * v25) = Quad3SuccIdForIndex;
                    LODWORD(v60) = v25 + 1;
                    if (*((_DWORD *)this + 10))
                    {
                      Quantizedint ScoreForIndex = QuadgramData::getQuantizedScoreForIndex(this, v7, v11, v18);
                      uint64_t v27 = v56;
                      if (v56 == (unint64_t)HIDWORD(v56))
                      {
                        DgnPrimArray<char>::reallocElts((uint64_t)&v55, 1, 1);
                        uint64_t v27 = v56;
                      }
                      *(unsigned char *)(v55 + v27) = QuantizedScoreForIndex;
                      unsigned int v28 = v56;
                      char v29 = &v56;
                    }
                    else
                    {
                      unsigned int v28 = v58;
                      if (v58 == HIDWORD(v58))
                      {
                        DgnPrimArray<short>::reallocElts((uint64_t)&v57, 1, 1);
                        unsigned int v28 = v58;
                      }
                      *(_WORD *)(v57 + 2 * v2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v24;
                      char v29 = &v58;
                    }
                    *(_DWORD *)char v29 = v28 + 1;
                  }
                  ++v18;
                  uint64_t v14 = *((void *)this + 31);
                  int v16 = *(_DWORD *)this;
                }
                if (v58 | v56)
                {
                  if (*((_DWORD *)this + 6))
                  {
                    if (v16)
                    {
                      uint64_t v30 = (char *)this + 312;
                      if ((*(_DWORD *)(*((void *)this + 14) + 4 * v12) & v13) != 0)
                      {
                        LODWORD(v19) = *(_DWORD *)(*((void *)this + 53) + 4 * v19);
                        uint64_t v30 = (char *)this + 472;
                      }
                    }
                    else
                    {
                      uint64_t v30 = (char *)this + 312;
                    }
                    char v34 = *(unsigned char *)(*(void *)v30 + v19 + v11);
                    uint64_t v35 = v66;
                    if (v66 == (unint64_t)HIDWORD(v66))
                    {
                      DgnPrimArray<char>::reallocElts((uint64_t)&v65, 1, 1);
                      uint64_t v35 = v66;
                    }
                    *(unsigned char *)(v65 + v35) = v34;
                    unsigned int v32 = v66;
                    uint64_t v33 = &v66;
                  }
                  else
                  {
                    __int16 BackoffWeight = QuadgramData::getBackoffWeight(this, v7, v11);
                    unsigned int v32 = v68;
                    if (v68 == HIDWORD(v68))
                    {
                      DgnPrimArray<short>::reallocElts((uint64_t)&v67, 1, 1);
                      unsigned int v32 = v68;
                    }
                    *(_WORD *)(v67 + 2 * vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = BackoffWeight;
                    uint64_t v33 = &v68;
                  }
                  *(_DWORD *)uint64_t v33 = v32 + 1;
                  unsigned int v36 = v72;
                  if (v72 == HIDWORD(v72))
                  {
                    DgnPrimArray<short>::reallocElts((uint64_t)&v71, 1, 1);
                    unsigned int v36 = v72;
                  }
                  *(_WORD *)(v71 + 2 * v36) = v54;
                  LODWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = v36 + 1;
                  uint64_t v37 = v70;
                  if (v70 == (unint64_t)HIDWORD(v70))
                  {
                    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v69, 1, 1);
                    uint64_t v37 = v70;
                  }
                  uint64_t v38 = (void *)(v69 + 16 * v37);
                  *uint64_t v38 = 0;
                  v38[1] = 0;
                  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)v38, &v59, 0, v60);
                  LODWORD(v70) = v70 + 1;
                  uint64_t v39 = v62;
                  if (v62 == (unint64_t)HIDWORD(v62))
                  {
                    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v61, 1, 1);
                    uint64_t v39 = v62;
                  }
                  unsigned int v40 = (void *)(v61 + 16 * v39);
                  void *v40 = 0;
                  v40[1] = 0;
                  DgnPrimArray<unsigned char>::copyArraySlice((unint64_t)v40, &v55, 0, v56);
                  LODWORD(v62) = v62 + 1;
                  uint64_t v41 = v64;
                  if (v64 == (unint64_t)HIDWORD(v64))
                  {
                    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v63, 1, 1);
                    uint64_t v41 = v64;
                  }
                  uint64_t v42 = (void *)(v63 + 16 * v41);
                  void *v42 = 0;
                  v42[1] = 0;
                  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)v42, &v57, 0, v58);
                  LODWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = v64 + 1;
                }
                ++v11;
              }
              while (v11 < *(unsigned __int16 *)(*((void *)this + 12) + 2 * v7));
            }
            uint64_t v2 = v49;
            uint64_t v43 = (*(_DWORD *)(*((void *)v49 + 8) + 4 * v52) + v53);
            *(_WORD *)(*((void *)v49 + 10) + 2 * v43) = 0;
            QuadgramData::quad2SetUnallocated((uint64_t)v49, v43);
            *(_WORD *)(*((void *)v49 + 10) + 2 * v43) = v51;
            if (v72)
            {
              QuadgramData::fillQuad2BackoffWeights((unint64_t)v49, v7, &v71, &v67, &v65);
              uint64_t v44 = *((void *)this + 12);
              if (*(_WORD *)(v44 + 2 * v7))
              {
                uint64_t v45 = 0;
                unint64_t v46 = 0;
                do
                {
                  if (*(_DWORD *)(v69 + v45 + 8))
                  {
                    QuadgramData::fillQuadgramRecord((unint64_t)v49, v7, v46, v69 + v45, (void *)(v63 + v45), (void *)(v61 + v45));
                    uint64_t v44 = *((void *)this + 12);
                  }
                  ++v46;
                  v45 += 16;
                }
                while (v46 < *(unsigned __int16 *)(v44 + 2 * v7));
              }
            }
            int v6 = v53 + 1;
            unint64_t v5 = v52;
          }
          while (v53 + 1 != v50);
        }
      }
      ++v5;
    }
    while (v5 != v48);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v55);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v57);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v59);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&v61);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&v63);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v65);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v67);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&v69);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v71);
}

void sub_213FA1D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a24);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a26);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a28);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&a30);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v30 - 168);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v30 - 152);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v30 - 136);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v30 - 120);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v30 - 104);
  _Unwind_Resume(a1);
}

unint64_t QuadgramData::fillQuad2BackoffWeights(unint64_t a1, unsigned int a2, uint64_t *a3, uint64_t *a4, void *a5)
{
  unint64_t result = QuadgramData::allocQuad2(a1, a2, *((unsigned __int16 *)a3 + 4));
  uint64_t v11 = *((unsigned int *)a3 + 2);
  if (*(_DWORD *)(a1 + 4))
  {
    if (v11)
    {
      unint64_t v12 = 0;
      do
      {
        __int16 v13 = *(_WORD *)(*a3 + 2 * v12);
        uint64_t v14 = *(unsigned int *)(*(void *)(a1 + 248) + 4 * a2);
        if (*(_DWORD *)a1 && (*(_DWORD *)(*(void *)(a1 + 112) + 4 * (a2 >> 5)) & (1 << a2)) != 0)
        {
          LODWORD(v14) = *(_DWORD *)(*(void *)(a1 + 424) + 4 * v14);
          *(_WORD *)(*(void *)(a1 + 440) + 2 * (v12 + v14)) = v13;
          uint64_t v15 = (unsigned char *)(*a5 + v12);
          int v16 = (void *)(a1 + 472);
        }
        else
        {
          *(_WORD *)(*(void *)(a1 + 264) + 2 * (v12 + v14)) = v13;
          uint64_t v15 = (unsigned char *)(*a5 + v12);
          int v16 = (void *)(a1 + 312);
        }
        *(unsigned char *)(*v16 + (v12++ + v14)) = *v15;
        unint64_t v17 = *((unsigned int *)a3 + 2);
      }
      while (v12 < v17);
      goto LABEL_19;
    }
LABEL_18:
    LOWORD(v17) = 0;
    goto LABEL_19;
  }
  if (!v11) {
    goto LABEL_18;
  }
  uint64_t v18 = 0;
  uint64_t v19 = *a3;
  uint64_t v20 = *(unsigned int *)(*(void *)(a1 + 248) + 4 * a2);
  int v21 = *(_DWORD *)a1;
  uint64_t v22 = *a4;
  do
  {
    __int16 v23 = *(_WORD *)(v19 + 2 * v18);
    if (v21 && (*(_DWORD *)(*(void *)(a1 + 112) + 4 * (a2 >> 5)) & (1 << a2)) != 0)
    {
      int v24 = *(_DWORD *)(*(void *)(a1 + 424) + 4 * v20);
      *(_WORD *)(*(void *)(a1 + 440) + 2 * (v18 + vBitArray::~BitArray((BigramData *)((char *)this + 24)) = v23;
      unsigned int v25 = (unint64_t *)(a1 + 456);
    }
    else
    {
      *(_WORD *)(*(void *)(a1 + 264) + 2 * (v20 + v18)) = v23;
      int v24 = v20;
      unsigned int v25 = (unint64_t *)(a1 + 296);
    }
    unint64_t result = *v25;
    *(_WORD *)(result + 2 * (v18 + vBitArray::~BitArray((BigramData *)((char *)this + 24)) = *(_WORD *)(v22 + 2 * v18);
    ++v18;
  }
  while (v11 != v18);
  LOWORD(v17) = v11;
LABEL_19:
  *(_WORD *)(*(void *)(a1 + 96) + 2 * a2) = v17;
  return result;
}

unint64_t QuadgramData::fillQuadgramRecord(unint64_t a1, unsigned int a2, int a3, uint64_t a4, void *a5, void *a6)
{
  unint64_t result = QuadgramData::allocScoresForIndex(a1, a2, a3, *(unsigned __int16 *)(a4 + 8));
  LODWORD(v13) = *(_DWORD *)(a4 + 8);
  if (*(_DWORD *)(a1 + 8))
  {
    if (v13)
    {
      unint64_t v14 = 0;
      do
      {
        QuadgramData::setQuad3SuccIdForIndex(a1, a2, a3, v14, *(_WORD *)(*(void *)a4 + 2 * v14));
        unint64_t result = QuadgramData::setQuantizedScoreForIndex(a1, a2, a3, v14, *(unsigned char *)(*a6 + v14));
        ++v14;
        unint64_t v13 = *(unsigned int *)(a4 + 8);
      }
      while (v14 < v13);
    }
  }
  else if (v13)
  {
    unint64_t v15 = 0;
    do
    {
      QuadgramData::setQuad3SuccIdForIndex(a1, a2, a3, v15, *(_WORD *)(*(void *)a4 + 2 * v15));
      unint64_t result = QuadgramData::setScoreForIndex(a1, a2, a3, v15, *(_WORD *)(*a5 + 2 * v15));
      ++v15;
      unint64_t v13 = *(unsigned int *)(a4 + 8);
    }
    while (v15 < v13);
  }
  uint64_t v16 = *(unsigned int *)(*(void *)(a1 + 248) + 4 * a2);
  if (*(_DWORD *)a1 && ((*(_DWORD *)(*(void *)(a1 + 112) + 4 * (a2 >> 5)) >> a2) & 1) != 0)
  {
    LODWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = *(_DWORD *)(*(void *)(a1 + 424) + 4 * v16);
    unint64_t v17 = (void *)(a1 + 504);
  }
  else
  {
    unint64_t v17 = (void *)(a1 + 280);
  }
  *(_WORD *)(*v17 + 2 * (v16 + aDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 3)) = v13;
  return result;
}

unint64_t QuadgramData::allocQuad2(unint64_t this, unsigned int a2, int a3)
{
  uint64_t v4 = this;
  uint64_t v5 = a2;
  *(_DWORD *)(*(void *)(this + 248) + 4 * a2) = *(_DWORD *)(this + 272);
  unsigned int v6 = *(_DWORD *)(this + 272) + a3;
  unsigned int v7 = *(_DWORD *)(this + 276);
  if (v6 > v7)
  {
    this = DgnPrimArray<short>::reallocElts(this + 264, v6 - v7, 1);
    unsigned int v6 = *(_DWORD *)(v4 + 272) + a3;
  }
  *(_DWORD *)(v4 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = v6;
  if (*(_DWORD *)(v4 + 4))
  {
    unsigned int v8 = *(_DWORD *)(v4 + 320) + a3;
    unsigned int v9 = *(_DWORD *)(v4 + 324);
    if (v8 > v9)
    {
      this = DgnPrimArray<char>::reallocElts(v4 + 312, v8 - v9, 1);
      unsigned int v8 = *(_DWORD *)(v4 + 320) + a3;
    }
    *(_DWORD *)(v4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 320) = v8;
  }
  else
  {
    unsigned int v10 = *(_DWORD *)(v4 + 304) + a3;
    unsigned int v11 = *(_DWORD *)(v4 + 308);
    if (v10 > v11)
    {
      this = DgnPrimArray<short>::reallocElts(v4 + 296, v10 - v11, 1);
      unsigned int v10 = *(_DWORD *)(v4 + 304) + a3;
    }
    *(_DWORD *)(v4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304) = v10;
  }
  *(_WORD *)(*(void *)(v4 + 96) + 2 * v5) = a3;
  unsigned int v12 = *(_DWORD *)(v4 + 288) + a3;
  unsigned int v13 = *(_DWORD *)(v4 + 292);
  if (v12 > v13)
  {
    this = DgnPrimArray<short>::reallocElts(v4 + 280, v12 - v13, 1);
    unsigned int v12 = *(_DWORD *)(v4 + 288) + a3;
  }
  *(_DWORD *)(v4 + 2HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 88) = v12;
  unsigned int v14 = *(_DWORD *)(v4 + 336) + a3;
  unsigned int v15 = *(_DWORD *)(v4 + 340);
  if (v14 > v15)
  {
    this = DgnPrimArray<unsigned int>::reallocElts(v4 + 328, v14 - v15, 1);
    unsigned int v14 = *(_DWORD *)(v4 + 336) + a3;
  }
  *(_DWORD *)(v4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 336) = v14;
  return this;
}

unint64_t QuadgramData::allocScoresForIndex(unint64_t this, unsigned int a2, int a3, int a4)
{
  uint64_t v5 = this;
  uint64_t v6 = (*(_DWORD *)(*(void *)(this + 248) + 4 * a2) + a3);
  *(_DWORD *)(*(void *)(this + 328) + 4 * v6) = *(_DWORD *)(this + 352);
  unsigned int v7 = *(_DWORD *)(this + 352) + a4;
  unsigned int v8 = *(_DWORD *)(this + 356);
  if (v7 > v8)
  {
    this = DgnPrimArray<short>::reallocElts(this + 344, v7 - v8, 1);
    unsigned int v7 = *(_DWORD *)(v5 + 352) + a4;
  }
  *(_DWORD *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 352) = v7;
  if (*(_DWORD *)(v5 + 8))
  {
    unsigned int v9 = *(_DWORD *)(v5 + 384) + a4;
    unsigned int v10 = *(_DWORD *)(v5 + 388);
    if (v9 > v10)
    {
      this = DgnPrimArray<char>::reallocElts(v5 + 376, v9 - v10, 1);
      unsigned int v9 = *(_DWORD *)(v5 + 384) + a4;
    }
    *(_DWORD *)(v5 + 384) = v9;
  }
  else
  {
    unsigned int v11 = *(_DWORD *)(v5 + 368) + a4;
    unsigned int v12 = *(_DWORD *)(v5 + 372);
    if (v11 > v12)
    {
      this = DgnPrimArray<short>::reallocElts(v5 + 360, v11 - v12, 1);
      unsigned int v11 = *(_DWORD *)(v5 + 368) + a4;
    }
    *(_DWORD *)(v5 + 36DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v11;
  }
  *(_WORD *)(*(void *)(v5 + 280) + 2 * v6) = a4;
  return this;
}

uint64_t QuadgramData::setQuad3SuccIdForIndex(uint64_t this, unsigned int a2, int a3, int a4, __int16 a5)
{
  uint64_t v5 = *(unsigned int *)(*(void *)(this + 248) + 4 * a2);
  if (*(_DWORD *)this && ((*(_DWORD *)(*(void *)(this + 112) + 4 * (a2 >> 5)) >> a2) & 1) != 0)
  {
    uint64_t v6 = (_DWORD *)(*(void *)(this + 488) + 4 * (*(_DWORD *)(*(void *)(this + 424) + 4 * v5) + a3));
    unsigned int v7 = (void *)(this + 520);
  }
  else
  {
    uint64_t v6 = (_DWORD *)(*(void *)(this + 328) + 4 * (v5 + a3));
    unsigned int v7 = (void *)(this + 344);
  }
  *(_WORD *)(*v7 + 2 * (*v6 + a4)) = a5;
  return this;
}

uint64_t QuadgramData::setQuantizedScoreForIndex(uint64_t this, unsigned int a2, int a3, int a4, char a5)
{
  uint64_t v5 = *(unsigned int *)(*(void *)(this + 248) + 4 * a2);
  if (*(_DWORD *)this && ((*(_DWORD *)(*(void *)(this + 112) + 4 * (a2 >> 5)) >> a2) & 1) != 0)
  {
    uint64_t v6 = (_DWORD *)(*(void *)(this + 488) + 4 * (*(_DWORD *)(*(void *)(this + 424) + 4 * v5) + a3));
    unsigned int v7 = (void *)(this + 552);
  }
  else
  {
    uint64_t v6 = (_DWORD *)(*(void *)(this + 328) + 4 * (v5 + a3));
    unsigned int v7 = (void *)(this + 376);
  }
  *(unsigned char *)(*v7 + (*v6 + a4)) = a5;
  return this;
}

uint64_t QuadgramData::setScoreForIndex(uint64_t this, unsigned int a2, int a3, int a4, __int16 a5)
{
  uint64_t v5 = *(unsigned int *)(*(void *)(this + 248) + 4 * a2);
  if (*(_DWORD *)this && ((*(_DWORD *)(*(void *)(this + 112) + 4 * (a2 >> 5)) >> a2) & 1) != 0)
  {
    uint64_t v6 = (_DWORD *)(*(void *)(this + 488) + 4 * (*(_DWORD *)(*(void *)(this + 424) + 4 * v5) + a3));
    unsigned int v7 = (void *)(this + 536);
  }
  else
  {
    uint64_t v6 = (_DWORD *)(*(void *)(this + 328) + 4 * (v5 + a3));
    unsigned int v7 = (void *)(this + 360);
  }
  *(_WORD *)(*v7 + 2 * (*v6 + a4)) = a5;
  return this;
}

unint64_t QuadgramData::allocLoaded(unint64_t result, unsigned int a2, uint64_t *a3)
{
  unint64_t v5 = result;
  uint64_t v6 = *(void *)(result + 248);
  uint64_t v7 = a2;
  int v8 = *(_DWORD *)(v6 + 4 * a2);
  *(_DWORD *)(v6 + 4 * a2) = *(_DWORD *)(result + 416);
  unsigned int v9 = *(_DWORD *)(result + 416);
  if (v9 == *(_DWORD *)(result + 420))
  {
    unint64_t result = DgnPrimArray<unsigned int>::reallocElts(result + 408, 1, 1);
    unsigned int v9 = *(_DWORD *)(v5 + 416);
  }
  *(_DWORD *)(*(void *)(v5 + 408) + 4 * v9) = v8;
  ++*(_DWORD *)(v5 + 416);
  int v10 = *(_DWORD *)(v5 + 448);
  unsigned int v11 = *(_DWORD *)(v5 + 432);
  if (v11 == *(_DWORD *)(v5 + 436))
  {
    unint64_t result = DgnPrimArray<unsigned int>::reallocElts(v5 + 424, 1, 1);
    unsigned int v11 = *(_DWORD *)(v5 + 432);
  }
  *(_DWORD *)(*(void *)(v5 + 424) + 4 * v11) = v10;
  ++*(_DWORD *)(v5 + 432);
  uint64_t v12 = *(unsigned __int16 *)(*(void *)(v5 + 96) + 2 * v7);
  unsigned int v13 = *(_DWORD *)(v5 + 496) + v12;
  unsigned int v14 = *(_DWORD *)(v5 + 500);
  if (v13 > v14)
  {
    unint64_t result = DgnPrimArray<unsigned int>::reallocElts(v5 + 488, v13 - v14, 1);
    unsigned int v13 = *(_DWORD *)(v5 + 496) + v12;
  }
  *(_DWORD *)(v5 + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = v13;
  unsigned int v15 = *(_DWORD *)(v5 + 448) + v12;
  unsigned int v16 = *(_DWORD *)(v5 + 452);
  if (v15 > v16)
  {
    unint64_t result = DgnPrimArray<short>::reallocElts(v5 + 440, v15 - v16, 1);
    unsigned int v15 = *(_DWORD *)(v5 + 448) + v12;
  }
  *(_DWORD *)(v5 + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = v15;
  unsigned int v17 = *(_DWORD *)(v5 + 512) + v12;
  unsigned int v18 = *(_DWORD *)(v5 + 516);
  if (v17 > v18)
  {
    unint64_t result = DgnPrimArray<short>::reallocElts(v5 + 504, v17 - v18, 1);
    unsigned int v17 = *(_DWORD *)(v5 + 512) + v12;
  }
  *(_DWORD *)(v5 + 512) = v17;
  if (*(_DWORD *)(v5 + 4))
  {
    unsigned int v19 = *(_DWORD *)(v5 + 480) + v12;
    unsigned int v20 = *(_DWORD *)(v5 + 484);
    if (v19 > v20)
    {
      unint64_t result = DgnPrimArray<char>::reallocElts(v5 + 472, v19 - v20, 1);
      unsigned int v19 = *(_DWORD *)(v5 + 480) + v12;
    }
    *(_DWORD *)(v5 + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = v19;
    if (!v12) {
      goto LABEL_30;
    }
LABEL_19:
    for (uint64_t i = 0; i != v12; ++i)
    {
      *(_DWORD *)(*(void *)(v5 + 488) + 4 * (v10 + i)) = *(_DWORD *)(v5 + 528);
      uint64_t v24 = *a3;
      *(_WORD *)(*(void *)(v5 + 504) + 2 * (v10 + i)) = *(_WORD *)(*a3 + 2 * i);
      int v25 = *(unsigned __int16 *)(v24 + 2 * i);
      unsigned int v26 = *(_DWORD *)(v5 + 528) + v25;
      unsigned int v27 = *(_DWORD *)(v5 + 532);
      if (v26 > v27)
      {
        unint64_t result = DgnPrimArray<short>::reallocElts(v5 + 520, v26 - v27, 1);
        unsigned int v26 = *(_DWORD *)(v5 + 528) + v25;
      }
      *(_DWORD *)(v5 + 52DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v26;
      int v28 = *(unsigned __int16 *)(*a3 + 2 * i);
      if (*(_DWORD *)(v5 + 8))
      {
        unsigned int v29 = *(_DWORD *)(v5 + 560) + v28;
        unsigned int v30 = *(_DWORD *)(v5 + 564);
        if (v29 > v30)
        {
          unint64_t result = DgnPrimArray<char>::reallocElts(v5 + 552, v29 - v30, 1);
          unsigned int v29 = *(_DWORD *)(v5 + 560) + v28;
        }
        *(_DWORD *)(v5 + 560) = v29;
      }
      else
      {
        unsigned int v31 = *(_DWORD *)(v5 + 544) + v28;
        unsigned int v32 = *(_DWORD *)(v5 + 548);
        if (v31 > v32)
        {
          unint64_t result = DgnPrimArray<short>::reallocElts(v5 + 536, v31 - v32, 1);
          unsigned int v31 = *(_DWORD *)(v5 + 544) + v28;
        }
        *(_DWORD *)(v5 + 544) = v31;
      }
    }
    goto LABEL_30;
  }
  unsigned int v21 = *(_DWORD *)(v5 + 464) + v12;
  unsigned int v22 = *(_DWORD *)(v5 + 468);
  if (v21 > v22)
  {
    unint64_t result = DgnPrimArray<short>::reallocElts(v5 + 456, v21 - v22, 1);
    unsigned int v21 = *(_DWORD *)(v5 + 464) + v12;
  }
  *(_DWORD *)(v5 + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = v21;
  if (v12) {
    goto LABEL_19;
  }
LABEL_30:
  *(_DWORD *)(*(void *)(v5 + 128) + 4 * (a2 >> 5)) |= 1 << a2;
  unsigned int v33 = *(_DWORD *)(v5 + 400);
  if (v33 == *(_DWORD *)(v5 + 404))
  {
    unint64_t result = DgnPrimArray<unsigned int>::reallocElts(v5 + 392, 1, 1);
    unsigned int v33 = *(_DWORD *)(v5 + 400);
  }
  *(_DWORD *)(*(void *)(v5 + 392) + 4 * v33) = a2;
  ++*(_DWORD *)(v5 + 400);
  return result;
}

void WordLanguageModel::WordLanguageModel(WordLanguageModel *this, int a2, const WordList *a3)
{
  LanguageModel::LanguageModel(this, a2, a3);
  *(void *)uint64_t v4 = &unk_26C4E1A18;
  *(void *)(v4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = 0;
  *(_OWORD *)(v4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 120) = 0u;
  *(void *)(v4 + 20DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *(void *)(v4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = 0;
  *(void *)(v4 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
  *(_OWORD *)(v4 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 136) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_OWORD *)(v4 + 16DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  *(_OWORD *)(v4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 280) = 0u;
  *(_OWORD *)(v4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 296) = 0u;
  *(_OWORD *)(v4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 312) = 0u;
  *(_OWORD *)(v4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 328) = 0u;
  *(_OWORD *)(v4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 344) = 0u;
  BigramData::BigramData((BigramData *)(v4 + 360));
  TrigramData::TrigramData((WordLanguageModel *)((char *)this + 744));
  QuadgramData::QuadgramData((WordLanguageModel *)((char *)this + 1232));
  *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
  *((unsigned char *)this + 6DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 1;
  *((unsigned char *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = 0;
  *((_DWORD *)this + 29) = -1;
  *((void *)this + 5) = 0;
  *((void *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = 0;
  *((void *)this + 25) = 0;
  *((void *)this + 23) = 0;
  *(_OWORD *)((char *)this + 100) = xmmword_2140A69D0;
  *((void *)this + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *((void *)this + 29) = 0;
  *((_DWORD *)this + 60) = -1;
  *((void *)this + 9) = -1;
  *((_WORD *)this + 122) = 0;
  *((void *)this + 225) = 0;
  *(void *)((char *)this + 92) = 0;
  *(void *)((char *)this + 84) = 0;
  *((void *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
  *((void *)this + 33) = 0;
  *((void *)this + 31) = 0;
  *(void *)((char *)this + 269) = 0;
}

void sub_213FA27DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  TrigramData::~TrigramData(v15);
  BigramData::~BigramData(v16);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(v10 + 43));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(v10 + 41));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(v10 + 39));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(v10 + 37));
  DgnPrimArray<unsigned int>::~DgnPrimArray(v14);
  DgnIArray<Utterance *>::~DgnIArray(v13);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(v10 + 21));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(v10 + 19));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(v10 + 17));
  DgnPrimArray<unsigned int>::~DgnPrimArray(v12);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v11);
  LanguageModel::~LanguageModel(v10);
  _Unwind_Resume(a1);
}

void WordLanguageModel::~WordLanguageModel(WordLanguageModel *this)
{
  *(void *)this = &unk_26C4E1A18;
  DgnDelete<LanguageModel>(*((void (****)(void))this + 29));
  *((void *)this + 29) = 0;
  DgnDelete<DgnStream>(*((void (****)(void))this + 28));
  *((void *)this + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  DgnDelete<RealDFile>(*((void (****)(void))this + 5));
  *((void *)this + 5) = 0;
  DgnDelete<RecentBuffer>(*((RecentBuffer **)this + 1));
  *((void *)this + 1) = 0;
  QuadgramData::~QuadgramData((WordLanguageModel *)((char *)this + 1232));
  TrigramData::~TrigramData((WordLanguageModel *)((char *)this + 744));
  BigramData::~BigramData((WordLanguageModel *)((char *)this + 360));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 344);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 328);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 312);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 296);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 280);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 208);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 168);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 152);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 136);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 120);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48);

  LanguageModel::~LanguageModel((RecentBuffer **)this);
}

{
  uint64_t vars8;

  WordLanguageModel::~WordLanguageModel(this);

  JUMPOUT(0x216698730);
}

void WordLanguageModel::printSize(WordLanguageModel *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3657, (DgnString *)&v316);
  if (v317) {
    unsigned int v16 = (void *)v316;
  }
  else {
    unsigned int v16 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_2140A6A10, a3, &unk_2140A6A10, v16);
  DgnString::~DgnString((DgnString *)&v316);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_2140A6A10);
  unint64_t v315 = 0;
  unint64_t v316 = 0;
  uint64_t v21 = (a3 + 1);
  unint64_t v314 = 0;
  LanguageModel::printSize(this, 0xFFFFFFFFLL, v21, &v316, &v315, &v314);
  *a4 += v316;
  *a5 += v315;
  *a6 += v314;
  uint64_t v22 = *((void *)this + 5);
  if (v22)
  {
    unint64_t v315 = 0;
    unint64_t v316 = 0;
    unint64_t v314 = 0;
    (*(void (**)(uint64_t, uint64_t, void, unint64_t *, unint64_t *, unint64_t *))(*(void *)v22 + 16))(v22, 0xFFFFFFFFLL, (a3 + 1), &v316, &v315, &v314);
    *a4 += v316;
    *a5 += v315;
    *a6 += v314;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v23 = 4;
  }
  else {
    uint64_t v23 = 8;
  }
  uint64_t v313 = a3;
  uint64_t v24 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3663, (DgnString *)&v316);
  if (v317) {
    unsigned int v29 = (void *)v316;
  }
  else {
    unsigned int v29 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v25, v26, v27, v28, v21, &unk_2140A6A10, v24, v24, v29, v23, v23, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += v23;
  *a5 += v23;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v30 = 12;
  }
  else {
    uint64_t v30 = 16;
  }
  uint64_t v31 = *((unsigned int *)this + 14);
  unsigned int v32 = *((_DWORD *)this + 15);
  if (v32 >= v31)
  {
    uint64_t v33 = 0;
    if ((int)v31 > 0) {
      v30 += 8 * (v31 - 1) + 8;
    }
    uint64_t v34 = v30 + 8 * (v32 - v31);
  }
  else
  {
    uint64_t v33 = 8 * v31;
    uint64_t v34 = v30;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3665, (DgnString *)&v316);
  if (v317) {
    uint64_t v39 = (void *)v316;
  }
  else {
    uint64_t v39 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v35, v36, v37, v38, v21, &unk_2140A6A10, v24, v24, v39, v34, v30, v33);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += v34;
  *a5 += v30;
  *a6 += v33;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3666, (DgnString *)&v316);
  if (v317) {
    uint64_t v44 = (void *)v316;
  }
  else {
    uint64_t v44 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v40, v41, v42, v43, v21, &unk_2140A6A10, v24, v24, v44, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3668, (DgnString *)&v316);
  if (v317) {
    int v49 = (void *)v316;
  }
  else {
    int v49 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v45, v46, v47, v48, v21, &unk_2140A6A10, v24, v24, v49, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3670, (DgnString *)&v316);
  if (v317) {
    __int16 v54 = (void *)v316;
  }
  else {
    __int16 v54 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v50, v51, v52, v53, v21, &unk_2140A6A10, v24, v24, v54, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3671, (DgnString *)&v316);
  if (v317) {
    uint64_t v59 = (void *)v316;
  }
  else {
    uint64_t v59 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v55, v56, v57, v58, v21, &unk_2140A6A10, v24, v24, v59, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3672, (DgnString *)&v316);
  if (v317) {
    uint64_t v64 = (void *)v316;
  }
  else {
    uint64_t v64 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v60, v61, v62, v63, v21, &unk_2140A6A10, v24, v24, v64, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3674, (DgnString *)&v316);
  if (v317) {
    uint64_t v69 = (void *)v316;
  }
  else {
    uint64_t v69 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v65, v66, v67, v68, v21, &unk_2140A6A10, v24, v24, v69, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v316);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3676, (DgnString *)&v316);
  if (v317) {
    uint64_t v74 = (void *)v316;
  }
  else {
    uint64_t v74 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v70, v71, v72, v73, v21, &unk_2140A6A10, v24, v24, v74, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3678, (DgnString *)&v316);
  if (v317) {
    uint64_t v79 = (void *)v316;
  }
  else {
    uint64_t v79 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v75, v76, v77, v78, v21, &unk_2140A6A10, v24, v24, v79, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v316);
  ++*a4;
  ++*a5;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v80 = 12;
  }
  else {
    uint64_t v80 = 16;
  }
  uint64_t v81 = *((unsigned int *)this + 32);
  unsigned int v82 = *((_DWORD *)this + 33);
  if (v82 >= v81)
  {
    uint64_t v83 = 0;
    if ((int)v81 > 0) {
      v80 += 4 * (v81 - 1) + 4;
    }
    uint64_t v84 = v80 + 4 * (v82 - v81);
  }
  else
  {
    uint64_t v83 = 4 * v81;
    uint64_t v84 = v80;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3681, (DgnString *)&v316);
  if (v317) {
    uint64_t v89 = (void *)v316;
  }
  else {
    uint64_t v89 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v85, v86, v87, v88, v21, &unk_2140A6A10, v24, v24, v89, v84, v80, v83);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += v84;
  *a5 += v80;
  *a6 += v83;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v90 = 12;
  }
  else {
    uint64_t v90 = 16;
  }
  uint64_t v91 = *((unsigned int *)this + 36);
  unsigned int v92 = *((_DWORD *)this + 37);
  if (v92 >= v91)
  {
    uint64_t v93 = 0;
    if ((int)v91 > 0) {
      uint64_t v90 = (v90 | 2) + 2 * (v91 - 1);
    }
    uint64_t v94 = v90 + 2 * (v92 - v91);
  }
  else
  {
    uint64_t v93 = 2 * v91;
    uint64_t v94 = v90;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3683, (DgnString *)&v316);
  if (v317) {
    uint64_t v99 = (void *)v316;
  }
  else {
    uint64_t v99 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v95, v96, v97, v98, v21, &unk_2140A6A10, v24, v24, v99, v94, v90, v93);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += v94;
  *a5 += v90;
  *a6 += v93;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v100 = 12;
  }
  else {
    uint64_t v100 = 16;
  }
  int v101 = *((_DWORD *)this + 40);
  unsigned int v102 = *((_DWORD *)this + 41);
  BOOL v103 = v102 >= v101;
  uint64_t v104 = v102 - v101;
  if (v103)
  {
    uint64_t v106 = v101 & ~(v101 >> 31);
    int v101 = 0;
    uint64_t v105 = v100 + v106;
    v100 += v106 + v104;
  }
  else
  {
    uint64_t v105 = v100;
  }
  uint64_t v107 = v101;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3685, (DgnString *)&v316);
  if (v317) {
    uint64_t v112 = (void *)v316;
  }
  else {
    uint64_t v112 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v108, v109, v110, v111, v21, &unk_2140A6A10, v24, v24, v112, v100, v105, v107);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += v100;
  *a5 += v105;
  *a6 += v107;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v113 = 12;
  }
  else {
    uint64_t v113 = 16;
  }
  uint64_t v114 = *((unsigned int *)this + 44);
  unsigned int v115 = *((_DWORD *)this + 45);
  if (v115 >= v114)
  {
    uint64_t v116 = 0;
    if ((int)v114 > 0) {
      uint64_t v113 = (v113 | 2) + 2 * (v114 - 1);
    }
    uint64_t v117 = v113 + 2 * (v115 - v114);
  }
  else
  {
    uint64_t v116 = 2 * v114;
    uint64_t v117 = v113;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3688, (DgnString *)&v316);
  if (v317) {
    unsigned int v122 = (void *)v316;
  }
  else {
    unsigned int v122 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v118, v119, v120, v121, v21, &unk_2140A6A10, v24, v24, v122, v117, v113, v116);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += v117;
  *a5 += v113;
  *a6 += v116;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v123 = 4;
  }
  else {
    uint64_t v123 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3690, (DgnString *)&v316);
  if (v317) {
    uint64_t v128 = (void *)v316;
  }
  else {
    uint64_t v128 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v124, v125, v126, v127, v21, &unk_2140A6A10, v24, v24, v128, v123, v123, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += v123;
  *a5 += v123;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v129 = 4;
  }
  else {
    uint64_t v129 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3692, (DgnString *)&v316);
  if (v317) {
    uint64_t v134 = (void *)v316;
  }
  else {
    uint64_t v134 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v130, v131, v132, v133, v21, &unk_2140A6A10, v24, v24, v134, v129, v129, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += v129;
  *a5 += v129;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v135 = 4;
  }
  else {
    uint64_t v135 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3694, (DgnString *)&v316);
  if (v317) {
    uint64_t v140 = (void *)v316;
  }
  else {
    uint64_t v140 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v136, v137, v138, v139, v21, &unk_2140A6A10, v24, v24, v140, v135, v135, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += v135;
  *a5 += v135;
  uint64_t v141 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v141 = 16;
  }
  char v142 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    char v142 = 3;
  }
  uint64_t v143 = *((unsigned int *)this + 54);
  uint64_t v144 = (((*((_DWORD *)this + 55) - v143) + v143) << v142) + v141;
  uint64_t v145 = (v143 << v142) + v141;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3696, (DgnString *)&v316);
  if (v317) {
    uint64_t v150 = (void *)v316;
  }
  else {
    uint64_t v150 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v146, v147, v148, v149, v21, &unk_2140A6A10, v24, v24, v150, v144, v145, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += v144;
  *a5 += v145;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3700, (DgnString *)&v316);
  if (v317) {
    uint64_t v155 = (void *)v316;
  }
  else {
    uint64_t v155 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v151, v152, v153, v154, v21, &unk_2140A6A10, v24, v24, v155, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += 4;
  *a5 += 4;
  uint64_t v156 = *((void *)this + 28);
  if (v156)
  {
    unint64_t v315 = 0;
    unint64_t v316 = 0;
    unint64_t v314 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t *, unint64_t *, unint64_t *))(*(void *)v156 + 16))(v156, 0xFFFFFFFFLL, v21, &v316, &v315, &v314);
    *a4 += v316;
    *a5 += v315;
    *a6 += v314;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v157 = 4;
  }
  else {
    uint64_t v157 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3704, (DgnString *)&v316);
  if (v317) {
    unsigned int v162 = (void *)v316;
  }
  else {
    unsigned int v162 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v158, v159, v160, v161, v21, &unk_2140A6A10, v24, v24, v162, v157, v157, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += v157;
  *a5 += v157;
  uint64_t v163 = *((void *)this + 29);
  if (v163)
  {
    unint64_t v315 = 0;
    unint64_t v316 = 0;
    unint64_t v314 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t *, unint64_t *, unint64_t *))(*(void *)v163 + 16))(v163, 0xFFFFFFFFLL, v21, &v316, &v315, &v314);
    *a4 += v316;
    *a5 += v315;
    *a6 += v314;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v164 = 4;
  }
  else {
    uint64_t v164 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3706, (DgnString *)&v316);
  if (v317) {
    uint64_t v169 = (void *)v316;
  }
  else {
    uint64_t v169 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v165, v166, v167, v168, v21, &unk_2140A6A10, v24, v24, v169, v164, v164, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += v164;
  *a5 += v164;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3708, (DgnString *)&v316);
  if (v317) {
    uint64_t v174 = (void *)v316;
  }
  else {
    uint64_t v174 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v170, v171, v172, v173, v21, &unk_2140A6A10, v24, v24, v174, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3710, (DgnString *)&v316);
  if (v317) {
    uint64_t v179 = (void *)v316;
  }
  else {
    uint64_t v179 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v175, v176, v177, v178, v21, &unk_2140A6A10, v24, v24, v179, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3712, (DgnString *)&v316);
  if (v317) {
    uint64_t v184 = (void *)v316;
  }
  else {
    uint64_t v184 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v180, v181, v182, v183, v21, &unk_2140A6A10, v24, v24, v184, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v316);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3714, (DgnString *)&v316);
  if (v317) {
    uint64_t v189 = (void *)v316;
  }
  else {
    uint64_t v189 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v185, v186, v187, v188, v21, &unk_2140A6A10, v24, v24, v189, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v316);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3717, (DgnString *)&v316);
  if (v317) {
    uint64_t v194 = (void *)v316;
  }
  else {
    uint64_t v194 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v190, v191, v192, v193, v21, &unk_2140A6A10, v24, v24, v194, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3719, (DgnString *)&v316);
  if (v317) {
    uint64_t v199 = (void *)v316;
  }
  else {
    uint64_t v199 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v195, v196, v197, v198, v21, &unk_2140A6A10, v24, v24, v199, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3721, (DgnString *)&v316);
  if (v317) {
    uint64_t v204 = (void *)v316;
  }
  else {
    uint64_t v204 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v200, v201, v202, v203, v21, &unk_2140A6A10, v24, v24, v204, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3722, (DgnString *)&v316);
  if (v317) {
    uint64_t v209 = (void *)v316;
  }
  else {
    uint64_t v209 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v205, v206, v207, v208, v21, &unk_2140A6A10, v24, v24, v209, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3723, (DgnString *)&v316);
  if (v317) {
    int v214 = (void *)v316;
  }
  else {
    int v214 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v210, v211, v212, v213, v21, &unk_2140A6A10, v24, v24, v214, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3725, (DgnString *)&v316);
  if (v317) {
    uint64_t v219 = (void *)v316;
  }
  else {
    uint64_t v219 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v215, v216, v217, v218, v21, &unk_2140A6A10, v24, v24, v219, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3727, (DgnString *)&v316);
  if (v317) {
    uint64_t v224 = (void *)v316;
  }
  else {
    uint64_t v224 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v220, v221, v222, v223, v21, &unk_2140A6A10, v24, v24, v224, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v316);
  ++*a4;
  ++*a5;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v225 = 12;
  }
  else {
    uint64_t v225 = 16;
  }
  uint64_t v226 = *((unsigned int *)this + 72);
  unsigned int v227 = *((_DWORD *)this + 73);
  if (v227 >= v226)
  {
    uint64_t v228 = 0;
    if ((int)v226 > 0) {
      v225 += 4 * (v226 - 1) + 4;
    }
    uint64_t v229 = v225 + 4 * (v227 - v226);
  }
  else
  {
    uint64_t v228 = 4 * v226;
    uint64_t v229 = v225;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3729, (DgnString *)&v316);
  if (v317) {
    uint64_t v234 = (void *)v316;
  }
  else {
    uint64_t v234 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v230, v231, v232, v233, v21, &unk_2140A6A10, v24, v24, v234, v229, v225, v228);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += v229;
  *a5 += v225;
  *a6 += v228;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v235 = 12;
  }
  else {
    uint64_t v235 = 16;
  }
  uint64_t v236 = *((unsigned int *)this + 76);
  unsigned int v237 = *((_DWORD *)this + 77);
  if (v237 >= v236)
  {
    uint64_t v238 = 0;
    if ((int)v236 > 0) {
      uint64_t v235 = (v235 | 2) + 2 * (v236 - 1);
    }
    uint64_t v239 = v235 + 2 * (v237 - v236);
  }
  else
  {
    uint64_t v238 = 2 * v236;
    uint64_t v239 = v235;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3731, (DgnString *)&v316);
  if (v317) {
    uint64_t v244 = (void *)v316;
  }
  else {
    uint64_t v244 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v240, v241, v242, v243, v21, &unk_2140A6A10, v24, v24, v244, v239, v235, v238);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += v239;
  *a5 += v235;
  *a6 += v238;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v245 = 12;
  }
  else {
    uint64_t v245 = 16;
  }
  int v246 = *((_DWORD *)this + 80);
  unsigned int v247 = *((_DWORD *)this + 81);
  BOOL v103 = v247 >= v246;
  uint64_t v248 = v247 - v246;
  if (v103)
  {
    uint64_t v250 = v246 & ~(v246 >> 31);
    int v246 = 0;
    uint64_t v249 = v245 + v250;
    v245 += v250 + v248;
  }
  else
  {
    uint64_t v249 = v245;
  }
  uint64_t v251 = v246;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3733, (DgnString *)&v316);
  if (v317) {
    uint64_t v256 = (void *)v316;
  }
  else {
    uint64_t v256 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v252, v253, v254, v255, v21, &unk_2140A6A10, v24, v24, v256, v245, v249, v251);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += v245;
  *a5 += v249;
  *a6 += v251;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v257 = 12;
  }
  else {
    uint64_t v257 = 16;
  }
  uint64_t v258 = *((unsigned int *)this + 84);
  unsigned int v259 = *((_DWORD *)this + 85);
  if (v259 >= v258)
  {
    uint64_t v260 = 0;
    if ((int)v258 > 0) {
      uint64_t v257 = (v257 | 2) + 2 * (v258 - 1);
    }
    uint64_t v261 = v257 + 2 * (v259 - v258);
  }
  else
  {
    uint64_t v260 = 2 * v258;
    uint64_t v261 = v257;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3735, (DgnString *)&v316);
  if (v317) {
    uint64_t v266 = (void *)v316;
  }
  else {
    uint64_t v266 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v262, v263, v264, v265, v21, &unk_2140A6A10, v24, v24, v266, v261, v257, v260);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += v261;
  *a5 += v257;
  *a6 += v260;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v267 = 12;
  }
  else {
    uint64_t v267 = 16;
  }
  uint64_t v268 = *((unsigned int *)this + 88);
  unsigned int v269 = *((_DWORD *)this + 89);
  if (v269 >= v268)
  {
    uint64_t v270 = 0;
    if ((int)v268 > 0) {
      uint64_t v267 = (v267 | 2) + 2 * (v268 - 1);
    }
    uint64_t v271 = v267 + 2 * (v269 - v268);
  }
  else
  {
    uint64_t v270 = 2 * v268;
    uint64_t v271 = v267;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3737, (DgnString *)&v316);
  if (v317) {
    int v276 = (void *)v316;
  }
  else {
    int v276 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v272, v273, v274, v275, v21, &unk_2140A6A10, v24, v24, v276, v271, v267, v270);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += v271;
  *a5 += v267;
  *a6 += v270;
  unint64_t v315 = 0;
  unint64_t v316 = 0;
  unint64_t v314 = 0;
  BigramData::printSize((WordLanguageModel *)((char *)this + 360), 0xFFFFFFFFLL, v21, &v316, &v315, &v314);
  *a4 += v316;
  *a5 += v315;
  *a6 += v314;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3741, (DgnString *)&v316);
  if (v317) {
    uint64_t v281 = (void *)v316;
  }
  else {
    uint64_t v281 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v277, v278, v279, v280, v21, &unk_2140A6A10, v24, v24, v281, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3743, (DgnString *)&v316);
  if (v317) {
    uint64_t v286 = (void *)v316;
  }
  else {
    uint64_t v286 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v282, v283, v284, v285, v21, &unk_2140A6A10, v24, v24, v286, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += 4;
  *a5 += 4;
  unint64_t v315 = 0;
  unint64_t v316 = 0;
  unint64_t v314 = 0;
  TrigramData::printSize((WordLanguageModel *)((char *)this + 744), 0xFFFFFFFFLL, v21, &v316, &v315, &v314);
  *a4 += v316;
  *a5 += v315;
  *a6 += v314;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3748, (DgnString *)&v316);
  if (v317) {
    uint64_t v291 = (void *)v316;
  }
  else {
    uint64_t v291 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v287, v288, v289, v290, v21, &unk_2140A6A10, v24, v24, v291, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3750, (DgnString *)&v316);
  if (v317) {
    uint64_t v296 = (void *)v316;
  }
  else {
    uint64_t v296 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v292, v293, v294, v295, v21, &unk_2140A6A10, v24, v24, v296, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += 4;
  *a5 += 4;
  unint64_t v315 = 0;
  unint64_t v316 = 0;
  unint64_t v314 = 0;
  QuadgramData::printSize((WordLanguageModel *)((char *)this + 1232), 0xFFFFFFFFLL, v21, &v316, &v315, &v314);
  *a4 += v316;
  *a5 += v315;
  *a6 += v314;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v297 = 4;
  }
  else {
    uint64_t v297 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3756, (DgnString *)&v316);
  if (v317) {
    uint64_t v302 = (void *)v316;
  }
  else {
    uint64_t v302 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v298, v299, v300, v301, v21, &unk_2140A6A10, v24, v24, v302, v297, v297, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += v297;
  *a5 += v297;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3760, (DgnString *)&v316);
  if (v317) {
    uint64_t v307 = (void *)v316;
  }
  else {
    uint64_t v307 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v303, v304, v305, v306, v21, &unk_2140A6A10, v24, v24, v307, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v316);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3761, (DgnString *)&v316);
  if (v317) {
    uint64_t v312 = (void *)v316;
  }
  else {
    uint64_t v312 = &unk_2140A6A10;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v308, v309, v310, v311, v313, &unk_2140A6A10, (35 - v313), (35 - v313), v312, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v316);
}

void sub_213FA42C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void WordLanguageModel::initializeScoreToProb(WordLanguageModel *this, double a2, double a3)
{
  unsigned int v3 = (20 * *((_DWORD *)this + 8)) | 1;
  if (v3 != *((_DWORD *)this + 14))
  {
    unsigned int v5 = *((_DWORD *)this + 15);
    if (v3 > v5) {
      DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 48, v3 - v5, 0);
    }
    unint64_t v6 = 0;
    *((_DWORD *)this + 14) = v3;
    do
    {
      LODWORD(a3) = *((_DWORD *)this + 8);
      *(long double *)(*((void *)this + 6) + 8 * v6) = DgnExp(-(double)v6 / (double)*(unint64_t *)&a3);
      ++v6;
    }
    while (v6 < *((unsigned int *)this + 14));
  }
}

unint64_t WordLanguageModel::maybeAddAlienWordLmId(unint64_t this, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (*(_DWORD *)(this + 72) == -1)
  {
    unint64_t v14 = this;
    unsigned int v15 = *(_DWORD *)(this + 104);
    if (v15 >= 0xFFFFF1)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3792, (uint64_t)"lm/wordlm", 2, (uint64_t)"%u", a9, a10, *(_DWORD *)(this + 104));
      unsigned int v15 = *(_DWORD *)(v14 + 104);
    }
    WordLanguageModel::allocLmId(v14, v15);
    this = WordLanguageModel::computeAlienScore((WordLanguageModel *)v14, a4, a2, a3);
    *(_WORD *)(*(void *)(v14 + 168) + 2 * v15) = this;
    if (*(_DWORD *)(v14 + 64) >= 2u)
    {
      if (*(_DWORD *)(v14 + 336))
      {
        this = WordLanguageModel::computeAlienScore((WordLanguageModel *)v14, a5, a2, a3);
        *(_WORD *)(*(void *)(v14 + 328) + 2 * v15) = this;
      }
      *(_WORD *)(*(void *)(v14 + 344) + 2 * v15) = 0;
    }
    *(_DWORD *)(v14 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = v15;
  }
  return this;
}

unint64_t WordLanguageModel::allocLmId(unint64_t this, unsigned int a2)
{
  uint64_t v3 = this;
  if (*(_DWORD *)(this + 104) < a2 + 1) {
    *(_DWORD *)(this + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 104) = a2 + 1;
  }
  for (unsigned int i = *(_DWORD *)(this + 176); i <= a2; *(_DWORD *)(v3 + 176) = i)
  {
    if (i == *(_DWORD *)(v3 + 180))
    {
      this = DgnPrimArray<short>::reallocElts(v3 + 168, 1, 1);
      unsigned int i = *(_DWORD *)(v3 + 176);
    }
    *(_WORD *)(*(void *)(v3 + 168) + 2 * i++) = 20000;
  }
  if (*(_DWORD *)(v3 + 64) >= 2u)
  {
    unsigned int v5 = *(_DWORD *)(v3 + 336);
    if (v5 - 1 < a2)
    {
      do
      {
        if (v5 == *(_DWORD *)(v3 + 340))
        {
          this = DgnPrimArray<short>::reallocElts(v3 + 328, 1, 1);
          unsigned int v5 = *(_DWORD *)(v3 + 336);
        }
        *(_WORD *)(*(void *)(v3 + 328) + 2 * v5++) = 20000;
        *(_DWORD *)(v3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 336) = v5;
      }
      while (v5 <= a2);
    }
    for (unsigned int j = *(_DWORD *)(v3 + 352); j <= a2; *(_DWORD *)(v3 + 352) = j)
    {
      if (j == *(_DWORD *)(v3 + 356))
      {
        this = DgnPrimArray<short>::reallocElts(v3 + 344, 1, 1);
        unsigned int j = *(_DWORD *)(v3 + 352);
      }
      *(_WORD *)(*(void *)(v3 + 344) + 2 * j++) = 20000;
    }
    if (*(_DWORD *)(v3 + 560) > a2)
    {
      return BigramData::bi1SetEmpty(v3 + 360, a2);
    }
  }
  return this;
}

uint64_t WordLanguageModel::computeAlienScore(WordLanguageModel *this, uint64_t a2, double a3, double a4)
{
  double v5 = (double)a2;
  if (a3 == -1.0) {
    double v6 = a4;
  }
  else {
    double v6 = (double)a2 * a3;
  }
  double v7 = DgnExp(-20.0) * v5;
  if (v6 >= v7)
  {
    double v7 = v6;
    if (v6 > v5) {
      double v7 = v5;
    }
  }
  long double v8 = DgnLog(v7 / v5);
  LODWORD(v9) = *((_DWORD *)this + 8);
  return (int)(0.5 - v8 * (double)v9);
}

void WordLanguageModel::loadLM(WordLanguageModel *this, DFile *a2, DFile *a3, DFileChecksums *a4, DgnSharedMemStream *a5, unsigned int a6, BOOL a7, int a8, unsigned int a9, unsigned int a10, __int16 a11, BOOL *a12, BOOL *a13, double *a14)
{
  double v59 = -1.0;
  v60[0] = -1.0;
  if (DFile::subFileExists((uint64_t)a2, 0x73u))
  {
    WordLanguageModel::loadWns(this, a2, v60, &v59);
    if (a14) {
      *a14 = v59;
    }
  }
  int v20 = DFile::subFileExists((uint64_t)a2, 0x74u);
  int v21 = DFile::subFileExists((uint64_t)a2, 0x6Fu);
  int v24 = v21;
  if (v20)
  {
    if ((v21 & 1) != 0 || DFile::subFileExists((uint64_t)a2, 0x70u)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3858, (uint64_t)"lm/wordlm", 16, (uint64_t)"%s", v22, v23, (char)&unk_2140A6A10);
    }
    if ((a6 & 1) == 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3860, (uint64_t)"lm/wordlm", 53, (uint64_t)"%s", v22, v23, (char)&errStr_lm_wordlm_E_CANT_LOAD_TEXT_LANGUAGE_MODEL);
    }
    WordLanguageModel::loadText(this, a2, a8, a9, a10, v60[0], v59);
  }
  else
  {
    uint64_t v34 = DFile::subFileExists((uint64_t)a2, 0x70u);
    if (v24)
    {
      if (v34) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3871, (uint64_t)"lm/wordlm", 17, (uint64_t)"%s", v35, v36, (char)&errStr_lm_wordlm_E_WNB_WITH_OTHER_LM_FILE);
      }
      if (a6) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3873, (uint64_t)"lm/wordlm", 52, (uint64_t)"%s", v35, v36, (char)&errStr_lm_wordlm_E_LOADING_MIXED_TEXT_AND_BINARY_SUBFILES);
      }
      uint64_t v37 = this;
      if (!a5)
      {
        WordLanguageModel::loadBinary(this, a2, a4, a8, a9, a10);
        goto LABEL_27;
      }
      uint64_t v38 = a5;
      uint64_t v39 = a2;
      uint64_t v40 = a4;
      unsigned int v41 = 111;
    }
    else
    {
      if (!v34)
      {
        errThrowInternal(v34, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3910, (uint64_t)"lm/wordlm", 48, (uint64_t)"%s", v35, v36, (char)&errStr_lm_wordlm_E_NO_LM_FILE);
        goto LABEL_27;
      }
      if (a6) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3890, (uint64_t)"lm/wordlm", 52, (uint64_t)"%s", v35, v36, (char)&errStr_lm_wordlm_E_LOADING_MIXED_TEXT_AND_BINARY_SUBFILES);
      }
      if (!a5)
      {
        WordLanguageModel::loadDynamic(this, a2, a3, a4, a11, HIBYTE(a11), a12, a13, a8, a9, a10);
        goto LABEL_27;
      }
      uint64_t v37 = this;
      uint64_t v38 = a5;
      uint64_t v39 = a2;
      uint64_t v40 = a4;
      unsigned int v41 = 112;
    }
    WordLanguageModel::loadBinaryShared((uint64_t)v37, v38, v39, (uint64_t)v40, v41, 1);
  }
LABEL_27:
  if (*((_DWORD *)this + 16) >= 2u && *((unsigned char *)this + 244))
  {
    uint64_t v58 = 1;
    DFile::pushCurrentSubDirComponent(a2, (const SubDirExtension *)&v58, v26, v27, v28, v29, v30, v31);
    if (a3)
    {
      uint64_t v58 = 1;
      DFile::pushCurrentSubDirComponent(a3, (const SubDirExtension *)&v58, v42, v43, v44, v45, v46, v47);
    }
    *((void *)this + 29) = LanguageModel::CreateAndLoadLanguageModel(a2, a3, a4, a5, (DgnSharedMemStream *)*((unsigned __int8 *)this + 24), a6, 0, 1u, *((_DWORD *)this + 8), v56, *((const WordList **)this + 2), a8, a9, a10, a11, a12, a13, 0);
    DFile::popCurrentSubDirComponent((uint64_t)a2);
    if (a3) {
      DFile::popCurrentSubDirComponent((uint64_t)a3);
    }
  }
  unsigned int v48 = *((_DWORD *)this + 26);
  if (v48 >= 0xFFFF) {
    unsigned int v48 = 0xFFFF;
  }
  *((_DWORD *)this + 27) = v48;
  if (a6) {
    WordLanguageModel::checkWordListLMAgreement(this, v25, v26, v27, v28, v29, v30, v31);
  }
  WordLanguageModel::initializeScoreToProb(this, v32, v33);
  uint64_t v51 = *((unsigned int *)this + 28);
  if (v51 != -1)
  {
    unsigned int v52 = *(unsigned __int16 *)(*((void *)this + 21) + 2 * v51);
    if (v52 != 20000 && *((_DWORD *)this + 14) <= v52) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3968, (uint64_t)"lm/wordlm", 59, (uint64_t)"%.500s %u %u", v49, v50, (char)"unigram");
    }
  }
  uint64_t v53 = *((unsigned int *)this + 29);
  if (v53 != -1
    && *((_DWORD *)this + 14) <= *(unsigned __int16 *)(*((void *)this + 21) + 2 * v53))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3975, (uint64_t)"lm/wordlm", 67, (uint64_t)"%.500s %u %u", v49, v50, (char)"unigram");
  }
  uint64_t v54 = *((unsigned int *)this + 28);
  if (v54 != -1
    && *((_DWORD *)this + 84)
    && *((_DWORD *)this + 14) <= *(unsigned __int16 *)(*((void *)this + 41) + 2 * v54))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3983, (uint64_t)"lm/wordlm", 59, (uint64_t)"%.500s %u %u", v49, v50, (char)"unigram backoff");
  }
  uint64_t v55 = *((unsigned int *)this + 29);
  if (v55 != -1
    && *((_DWORD *)this + 84)
    && *((_DWORD *)this + 14) <= *(unsigned __int16 *)(*((void *)this + 41) + 2 * v55))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 3991, (uint64_t)"lm/wordlm", 67, (uint64_t)"%.500s %u %u", v49, v50, (char)"unigram backoff");
  }
}

void WordLanguageModel::loadWns(WordLanguageModel *this, DFile *a2, double *a3, double *a4)
{
  DgnTextFileParser::DgnTextFileParser((DgnTextFileParser *)v67);
  DgnTextFileParser::openDgnTextFileParser((uint64_t)v67, (uint64_t)a2, 0x73u, 1);
  DgnTextFileParser::verifyMatchingFileType((DgnTextFileParser *)v67, "WordNGramSpec");
  v66[0] = 0;
  v66[1] = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v67, sWNS_Versions, (uint64_t)v66, v8, v9, v10, v11, v12);
  DgnTextFileParser::verifyFileVersionInRange((uint64_t)v67, (unsigned int *)v66, v13, v14, v15, v16, v17, v18);
  unsigned int v65 = 0;
  DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v67, "Depth", &v65, 1, 1u, 4u);
  *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v65;
  unint64_t FileVersion = DgnTextFile::getFileVersion((DgnTextFile *)v67);
  int v20 = FileVersion;
  unint64_t v21 = HIDWORD(FileVersion);
  if (FileVersion == 19)
  {
    if (HIDWORD(FileVersion) != 12) {
      goto LABEL_12;
    }
  }
  else if (FileVersion != 24 || (HIDWORD(FileVersion) - 13) > 1)
  {
    goto LABEL_12;
  }
  DgnTextFile::getHeaderFieldReal((DgnTextFile *)v67, "AlienWordProbability", a3, 1, -1.0, 1.0);
  if (*a3 != -1.0 && *a3 < 0.0) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 4843, (uint64_t)"lm/wordlm", 4, (uint64_t)"%.500s", v22, v23, (char)"AlienWordProbability");
  }
  DgnTextFile::getHeaderFieldReal((DgnTextFile *)v67, "AlienWordMinimumCount", a4, 1, -1.0, 1.0);
  if (*a4 != -1.0 && *a4 < 0.0) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 4849, (uint64_t)"lm/wordlm", 4, (uint64_t)"%.500s", v24, v25, (char)"AlienWordMinimumCount");
  }
LABEL_12:
  v63[0] = 0;
  DgnTextFile::getHeaderFieldInteger((DgnTextFile *)v67, "AlienWordLmId", v63, 1, -1, 16777200);
  int v28 = v63[0];
  if (!v63[0])
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 4857, (uint64_t)"lm/wordlm", 4, (uint64_t)"%.500s", v26, v27, (char)"AlienWordLmId");
    int v28 = v63[0];
  }
  *((_DWORD *)this + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v28;
  if (v20 == 19)
  {
    if (v21 != 12) {
      goto LABEL_27;
    }
LABEL_19:
    int v29 = *a3 != -1.0;
    if (*a4 != -1.0) {
      ++v29;
    }
    if (v28 == -1) {
      int v30 = v29;
    }
    else {
      int v30 = v29 + 1;
    }
    if (v30 != 1)
    {
      if (v30)
      {
        uint64_t v31 = &errStr_lm_wordlm_E_WNS_NEW_WORD_BEHAVIOR_SPECIFIED_TWICE;
        uint64_t v32 = 13;
        uint64_t v33 = 4878;
      }
      else
      {
        uint64_t v31 = &errStr_lm_wordlm_E_WNS_NEW_WORD_BEHAVIOR_NOT_SPECIFIED;
        uint64_t v32 = 12;
        uint64_t v33 = 4876;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", v33, (uint64_t)"lm/wordlm", v32, (uint64_t)"%s", v26, v27, (char)v31);
    }
    goto LABEL_31;
  }
  if (v20 == 24 && (v21 - 13) <= 1) {
    goto LABEL_19;
  }
LABEL_27:
  if (v28 == -1) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 4883, (uint64_t)"lm/wordlm", 97, (uint64_t)"%s", v26, v27, (char)&errStr_lm_wordlm_E_WNS_ALIEN_WORD_LMID_NOT_SPECIFIED);
  }
LABEL_31:
  DgnTextFile::getHeaderFieldBool((DgnTextFile *)v67, "AllowNewWordCloning", (BOOL *)this + 80, 1);
  int v64 = 0;
  DgnTextFile::getHeaderFieldInteger((DgnTextFile *)v67, "IgnoreInContextLmId", &v64, 1, -1, 16777200);
  int v41 = v64;
  if (!v64)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 4893, (uint64_t)"lm/wordlm", 4, (uint64_t)"%.500s", v39, v40, (char)"IgnoreInContextLmId");
    int v41 = v64;
  }
  *((_DWORD *)this + 25) = v41;
  if (*((_DWORD *)this + 16) >= 2u)
  {
    DgnTextFile::getHeaderFieldInteger((DgnTextFile *)v67, "UnknownContextLmId", &v64, 1, -1, 16777200);
    int v44 = v64;
    if (!v64)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 4907, (uint64_t)"lm/wordlm", 4, (uint64_t)"%.500s", v42, v43, (char)"UnknownContextLmId");
      int v44 = v64;
    }
    if (v44 != -1 && *((_DWORD *)this + 18) == -1)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 4915, (uint64_t)"lm/wordlm", 14, (uint64_t)"%s", v42, v43, (char)&errStr_lm_wordlm_E_UNKNOWNCONTEXTLMID_WITHOUT_ALIENWORDLMID);
      int v44 = v64;
    }
    *((_DWORD *)this + 60) = v44;
    if (v20 == 19 && v21 == 12)
    {
      int v45 = -1;
    }
    else
    {
      int v64 = 0;
      DgnTextFile::getHeaderFieldInteger((DgnTextFile *)v67, "AlienWordContextLmId", &v64, 1, -1, 16777200);
      int v45 = v64;
      if (!v64)
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 4932, (uint64_t)"lm/wordlm", 4, (uint64_t)"%.500s", v46, v47, (char)"AlienWordContextLmId");
        int v45 = v64;
      }
    }
    *((_DWORD *)this + 19) = v45;
    DgnString::DgnString((DgnString *)v63);
    unsigned int v62 = 0;
    int HeaderField = DgnTextFile::getHeaderField((DgnTextFile *)v67, "BackoffSubDirectory", (DgnString *)v63, 0);
    int HeaderFieldUnsigned = DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v67, "BackoffAfterDepth", &v62, 0, 2u, 2u);
    if (HeaderField != HeaderFieldUnsigned) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 4950, (uint64_t)"lm/wordlm", 3, (uint64_t)"%s", v49, v50, (char)&errStr_lm_wordlm_E_WNS_ONLY_ONE_BACKOFF_FIELD);
    }
    if ((HeaderField & HeaderFieldUnsigned) == 1)
    {
      uint64_t v61 = 1;
      if (!SubDirExtension::isString((SubDirExtension *)&v61, (const char **)v63)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 4956, (uint64_t)"lm/wordlm", 4, (uint64_t)"%.500s", v52, v53, (char)"BackoffSubDirectory");
      }
      char v54 = 1;
      if (*((_DWORD *)this + 16) <= 1u) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 4957, (uint64_t)"lm/wordlm", 1, (uint64_t)"%s", v52, v53, (char)&errStr_lm_wordlm_E_BAD_UPPER_LM);
      }
    }
    else
    {
      char v54 = 0;
    }
    *((unsigned char *)this + 244) = v54;
    DgnTextFile::getHeaderFieldBool((DgnTextFile *)v67, "HasStaticComponentOnDisk", (BOOL *)this + 245, 1);
    DgnTextFile::getHeaderFieldBool((DgnTextFile *)v67, "LoadNgrams", (BOOL *)this + 68, 1);
    if (v20 == 19)
    {
      if (v21 != 12)
      {
LABEL_61:
        DgnString::~DgnString((DgnString *)v63);
        goto LABEL_62;
      }
    }
    else if (v20 != 24 || v21 != 13)
    {
      goto LABEL_61;
    }
    DgnTextFile::getHeaderFieldInteger((DgnTextFile *)v67, "BuildMaximumBigramCountToDiscount", (int *)this + 21, 1, -1, 0x7FFFFFFF);
    DgnTextFile::getHeaderFieldInteger((DgnTextFile *)v67, "BuildMaximumNumBigramRecords", (int *)this + 22, 1, -1, 0x7FFFFFFF);
    DgnString::~DgnString((DgnString *)v63);
    if (*((_DWORD *)this + 16) > 2u)
    {
      if (v20 != 19)
      {
        if (v21 != 13) {
          goto LABEL_62;
        }
LABEL_64:
        DgnTextFile::getHeaderFieldInteger((DgnTextFile *)v67, "BuildMaximumTrigramCountToDiscount", (int *)this + 23, 1, -1, 0x7FFFFFFF);
        DgnTextFile::getHeaderFieldInteger((DgnTextFile *)v67, "BuildMaximumNumTrigramRecords", (int *)this + 24, 1, -1, 0x7FFFFFFF);
        goto LABEL_62;
      }
      if (v21 == 12) {
        goto LABEL_64;
      }
    }
  }
LABEL_62:
  DgnTextFileParser::verifyNoUnknownHeaderFields((DgnTextFileParser *)v67, v34, v35, v36, v37, v38, v39, v40);
  DgnTextFileParser::verifyMatchingNumFieldSpecs((DgnTextFileParser *)v67, 0, v55, v56, v57, v58, v59, v60);
  DgnTextFileParser::verifyNoBodyLines((DgnTextFileParser *)v67);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v66);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)v67);
}

void sub_213FA5394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  DgnString::~DgnString((DgnString *)va);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va1);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)va2);
  _Unwind_Resume(a1);
}

void WordLanguageModel::loadText(WordLanguageModel *this, DFile *a2, int a3, unsigned int a4, unsigned int a5, double a6, double a7)
{
  DgnTextFileParser::DgnTextFileParser((DgnTextFileParser *)v1093);
  DgnTextFileParser::openDgnTextFileParser((uint64_t)v1093, (uint64_t)a2, 0x74u, 1);
  DgnTextFileParser::verifyMatchingFileType((DgnTextFileParser *)v1093, "WordNGramText");
  v1092[1] = 0;
  v1092[0] = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v1093, sWNT_Versions, (uint64_t)v1092, v11, v12, v13, v14, v15);
  DgnTextFileParser::verifyFileVersionInRange((uint64_t)v1093, (unsigned int *)v1092, v16, v17, v18, v19, v20, v21);
  unint64_t FileVersion = DgnTextFile::getFileVersion((DgnTextFile *)v1093);
  LODWORD(v10HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 88) = 0;
  DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v1093, "Depth", (unsigned int *)&v1088, 1, *((_DWORD *)this + 16), *((_DWORD *)this + 16));
  LODWORD(v10HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 88) = 0;
  DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v1093, "LMScale", (unsigned int *)&v1088, 1, *((_DWORD *)this + 8), *((_DWORD *)this + 8));
  WordLanguageModel::initializeScoreToProb(this, v23, v24);
  v1025 = (unsigned int *)((char *)this + 104);
  DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v1093, "NumLmIds", (unsigned int *)this + 26, 1, 2u, 0xFFFFF0u);
  WordLanguageModel::allocLmId((unint64_t)this, *((_DWORD *)this + 26) - 1);
  if (FileVersion == 19)
  {
    if (HIDWORD(FileVersion) != 5) {
      goto LABEL_7;
    }
LABEL_6:
    LODWORD(v10HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 88) = 0;
    DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v1093, "NumPermanentLmIds", (unsigned int *)&v1088, 1, 1u, *v1025);
    goto LABEL_7;
  }
  if (FileVersion == 24 && (HIDWORD(FileVersion) & 0xFFFFFFFE) == 6) {
    goto LABEL_6;
  }
LABEL_7:
  LODWORD(v10HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 88) = 0;
  DgnTextFile::getHeaderFieldInteger((DgnTextFile *)v1093, "BegLmId", (int *)&v1088, 1, -1, *v1025 - 1);
  *((_DWORD *)this + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = LODWORD(v1088);
  LODWORD(v10HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 88) = 0;
  DgnTextFile::getHeaderFieldInteger((DgnTextFile *)v1093, "EndLmId", (int *)&v1088, 1, -1, *((_DWORD *)this + 26) - 1);
  *((_DWORD *)this + 29) = LODWORD(v1088);
  unint64_t v1091 = 0;
  unint64_t v1021 = HIDWORD(FileVersion);
  if (FileVersion == 19)
  {
    if (HIDWORD(FileVersion) == 5) {
      goto LABEL_9;
    }
    goto LABEL_15;
  }
  if (FileVersion == 24)
  {
    if ((HIDWORD(FileVersion) & 0xFFFFFFFE) == 6)
    {
LABEL_9:
      DgnTextFile::getHeaderFieldUnsigned64((DgnTextFile *)v1093, "UnigramTotalCount", &v1091, 1, 1uLL, 0xFFFFFFFFuLL);
      unint64_t v1090 = 0;
      if (*((_DWORD *)this + 16) > 1u)
      {
        if (FileVersion == 19)
        {
          if (HIDWORD(FileVersion) != 5) {
            goto LABEL_21;
          }
          goto LABEL_20;
        }
        goto LABEL_18;
      }
      goto LABEL_31;
    }
LABEL_15:
    unint64_t v1090 = 0;
    if (*((_DWORD *)this + 16) <= 1u) {
      goto LABEL_31;
    }
    goto LABEL_21;
  }
  unint64_t v1090 = 0;
  if (*((_DWORD *)this + 16) > 1u)
  {
LABEL_18:
    if (FileVersion == 24 && (HIDWORD(FileVersion) & 0xFFFFFFFE) == 6) {
LABEL_20:
    }
      DgnTextFile::getHeaderFieldUnsigned64((DgnTextFile *)v1093, "UnigramBackoffTotalCount", &v1090, 1, 1uLL, 0xFFFFFFFFuLL);
LABEL_21:
    DgnTextFile::getHeaderFieldUnsigned((DgnTextFile *)v1093, "ContextSkipDistance", (unsigned int *)this + 68, 1, 0, 1u);
    if (*((_DWORD *)this + 16) >= 3u && *((_DWORD *)this + 68)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5545, (uint64_t)"lm/wordlm", 32, (uint64_t)"%d %d", v32, v33, *((_DWORD *)this + 16));
    }
    if (FileVersion == 19)
    {
      if (HIDWORD(FileVersion) != 5) {
        goto LABEL_30;
      }
    }
    else if (FileVersion != 24 || (HIDWORD(FileVersion) & 0xFFFFFFFE) != 6)
    {
      goto LABEL_30;
    }
    double v1088 = 0.0;
    DgnTextFile::getHeaderFieldReal((DgnTextFile *)v1093, "BigramAbsoluteDiscount", &v1088, 1, 0.0, 1.0);
LABEL_30:
    DgnTextFile::getHeaderFieldBool((DgnTextFile *)v1093, "HasWordIdToContextLmId", (BOOL *)this + 276, 1);
  }
LABEL_31:
  DgnTextFileParser::verifyNoUnknownHeaderFields((DgnTextFileParser *)v1093, v25, v26, v27, v28, v29, v30, v31);
  uint64_t v1089 = 0;
  double v1088 = 0.0;
  DgnTextFile::getLineFieldNames((uint64_t)v1093, (uint64_t)&v1088);
  v1087[1] = 0;
  v1087[0] = 0;
  DgnTextFile::getLineFieldFormats((uint64_t)v1093, (unint64_t)v1087);
  int v1015 = FileVersion;
  if (!v1089)
  {
    unsigned int v1030 = -1;
    unsigned int v1031 = -1;
    unsigned int v1024 = -1;
    unsigned int v1022 = -1;
    unsigned int v1026 = -1;
    goto LABEL_91;
  }
  uint64_t v36 = 0;
  unint64_t v37 = 0;
  unsigned int v1028 = -1;
  unsigned int v1030 = -1;
  unsigned int v1031 = -1;
  unsigned int v1024 = -1;
  unsigned int v1022 = -1;
  unsigned int v1026 = -1;
  do
  {
    uint64_t v38 = (const char **)(*(void *)&v1088 + v36);
    int v39 = *(_DWORD *)(*(void *)&v1088 + v36 + 8);
    if (v39)
    {
      uint64_t v40 = *v38;
      if (!strcmp(*v38, "TableName"))
      {
        if (*(_DWORD *)(v1087[0] + 4 * v37)) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5580, (uint64_t)"lm/wordlm", 39, (uint64_t)"%.500s %.500s", v34, v35, (char)v40);
        }
        unsigned int v1028 = v37;
        goto LABEL_77;
      }
    }
    else
    {
      uint64_t v40 = (const char *)&unk_2140A6A10;
    }
    if (!strcmp(v40, "Index1"))
    {
      if (*(_DWORD *)(v1087[0] + 4 * v37) != 3)
      {
        if (v39) {
          uint64_t v43 = *v38;
        }
        else {
          uint64_t v43 = (const char *)&unk_2140A6A10;
        }
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5588, (uint64_t)"lm/wordlm", 39, (uint64_t)"%.500s %.500s", v34, v35, (char)v43);
      }
      unsigned int v1030 = v37;
    }
    else
    {
      unsigned int v41 = *((_DWORD *)this + 16);
      if (v41 >= 2)
      {
        if (v39) {
          uint64_t v42 = *v38;
        }
        else {
          uint64_t v42 = (const char *)&unk_2140A6A10;
        }
        if (!strcmp(v42, "Index2"))
        {
          if (*(_DWORD *)(v1087[0] + 4 * v37) != 3)
          {
            if (v39) {
              int v45 = *v38;
            }
            else {
              int v45 = (const char *)&unk_2140A6A10;
            }
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5596, (uint64_t)"lm/wordlm", 39, (uint64_t)"%.500s %.500s", v34, v35, (char)v45);
          }
          unsigned int v1031 = v37;
          goto LABEL_77;
        }
        if (v41 >= 3)
        {
          if (v39) {
            int v44 = *v38;
          }
          else {
            int v44 = (const char *)&unk_2140A6A10;
          }
          if (!strcmp(v44, "Index3"))
          {
            if (*(_DWORD *)(v1087[0] + 4 * v37) != 3)
            {
              if (v39) {
                uint64_t v47 = *v38;
              }
              else {
                uint64_t v47 = (const char *)&unk_2140A6A10;
              }
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5604, (uint64_t)"lm/wordlm", 39, (uint64_t)"%.500s %.500s", v34, v35, (char)v47);
            }
            unsigned int v1024 = v37;
            goto LABEL_77;
          }
          if (v41 >= 4)
          {
            uint64_t v46 = v39 ? *v38 : (const char *)&unk_2140A6A10;
            if (!strcmp(v46, "Index4"))
            {
              if (*(_DWORD *)(v1087[0] + 4 * v37) != 3)
              {
                if (v39) {
                  uint64_t v49 = *v38;
                }
                else {
                  uint64_t v49 = (const char *)&unk_2140A6A10;
                }
                errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5612, (uint64_t)"lm/wordlm", 39, (uint64_t)"%.500s %.500s", v34, v35, (char)v49);
              }
              unsigned int v1022 = v37;
              goto LABEL_77;
            }
          }
        }
      }
      if (!v39)
      {
        unsigned int v48 = (const char *)&unk_2140A6A10;
LABEL_76:
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5624, (uint64_t)"lm/wordlm", 37, (uint64_t)"%.500s %u", v34, v35, (char)v48);
        goto LABEL_77;
      }
      unsigned int v48 = *v38;
      if (strcmp(*v38, "EntryValue1")) {
        goto LABEL_76;
      }
      if (*(_DWORD *)(v1087[0] + 4 * v37) != 1) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5620, (uint64_t)"lm/wordlm", 39, (uint64_t)"%.500s %.500s", v34, v35, (char)v48);
      }
      unsigned int v1026 = v37;
    }
LABEL_77:
    ++v37;
    v36 += 16;
  }
  while (v37 < v1089);
  if (v1028 == -1)
  {
LABEL_91:
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5626, (uint64_t)"lm/wordlm", 38, (uint64_t)"%.500s", v34, v35, (char)"TableName");
    unsigned int v1028 = -1;
  }
  if (v1030 == -1) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5627, (uint64_t)"lm/wordlm", 38, (uint64_t)"%.500s", v34, v35, (char)"Index1");
  }
  unsigned int v50 = *((_DWORD *)this + 16);
  if (v50 >= 2 && v1031 == -1)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5629, (uint64_t)"lm/wordlm", 38, (uint64_t)"%.500s", v34, v35, (char)"Index2");
    unsigned int v50 = *((_DWORD *)this + 16);
  }
  if (v50 >= 3 && v1024 == -1)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5631, (uint64_t)"lm/wordlm", 38, (uint64_t)"%.500s", v34, v35, (char)"Index3");
    unsigned int v50 = *((_DWORD *)this + 16);
  }
  if (v50 >= 4 && v1022 == -1) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5633, (uint64_t)"lm/wordlm", 38, (uint64_t)"%.500s", v34, v35, (char)"Index4");
  }
  if (v1026 == -1) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5634, (uint64_t)"lm/wordlm", 38, (uint64_t)"%.500s", v34, v35, (char)"EntryValue1");
  }
  DgnString::DgnString((DgnString *)&v1085);
  unsigned int v1019 = 0;
  unsigned int v1014 = 0;
  int v51 = 0;
  int v1029 = 0;
  unsigned int v1023 = 0;
  unsigned int v1042 = 0;
  unsigned int v1032 = 0;
  uint64_t v1084 = 0;
  uint64_t v1083 = 0;
  v1081 = 0;
  uint64_t v1082 = 0;
  uint64_t v1079 = 0;
  uint64_t v1080 = 0;
  uint64_t v1077 = 0;
  *(void *)v1078 = 0;
  uint64_t v1075 = 0;
  uint64_t v1076 = 0;
  uint64_t v1073 = 0;
  uint64_t v1074 = 0;
  uint64_t v1071 = 0;
  uint64_t v1072 = 0;
  v1069 = 0;
  uint64_t v1070 = 0;
  uint64_t v1067 = 0;
  uint64_t v1068 = 0;
  uint64_t v1065 = 0;
  *(void *)v1066 = 0;
  uint64_t v1063 = 0;
  uint64_t v1064 = 0;
  uint64_t v1061 = 0;
  uint64_t v1062 = 0;
  v1027 = (WordLanguageModel *)((char *)this + 360);
  uint64_t v1059 = 0;
  uint64_t v1060 = 0;
  uint64_t v1057 = 0;
  uint64_t v1058 = 0;
  uint64_t v1055 = 0;
  uint64_t v1056 = 0;
  uint64_t v1053 = 0;
  uint64_t v1054 = 0;
  uint64_t v52 = (WordLanguageModel *)((char *)this + 1232);
  v1048 = (WordLanguageModel *)((char *)this + 744);
  v1020 = (uint64_t *)((char *)this + 328);
  int v53 = -1;
  unsigned int v1039 = -1;
  uint64_t v54 = 0xFFFFFFFFLL;
  int v1044 = -1;
  unsigned int v1036 = -1;
  uint64_t v55 = 0xFFFFFFFFLL;
  int v1046 = -1;
  v1047 = (WordLanguageModel *)((char *)this + 1232);
  unsigned int v1041 = -1;
  int v1033 = 1;
  while (2)
  {
    int Line = DgnTextFileParser::parseNextLine((DgnTextFileParser *)v1093);
    DgnString::DgnString((DgnString *)&v1051);
    uint64_t v1043 = v54;
    uint64_t v1037 = v55;
    if (!Line)
    {
      signed int LineFieldInteger = 0;
      unsigned int LineFieldUnsigned = 0;
      goto LABEL_124;
    }
    LineFieldString = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v1093, v1028);
    DgnString::operator=((DgnString *)&v1051, LineFieldString);
    unsigned int LineFieldUnsigned = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1030, v60, v61, v62, v63, v64, v65);
    signed int LineFieldInteger = DgnTextFileParser::getLineFieldInteger((DgnTextFileParser *)v1093, v1026, v66, v67, v68, v69, v70, v71);
    if (v1033)
    {
      BOOL v72 = 0;
LABEL_117:
      if (LineFieldUnsigned < v1042)
      {
        uint64_t CurrentLine = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
        if (*(_DWORD *)(CurrentLine + 8)) {
          uint64_t v78 = *(void **)CurrentLine;
        }
        else {
          uint64_t v78 = &unk_2140A6A10;
        }
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5688, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v76, v77, (char)v78);
      }
    }
    else
    {
      if (v1052) {
        uint64_t v73 = v1051;
      }
      else {
        uint64_t v73 = (const char *)&unk_2140A6A10;
      }
      if (v1086) {
        uint64_t v74 = v1085;
      }
      else {
        uint64_t v74 = (const char *)&unk_2140A6A10;
      }
      BOOL v72 = strcmp(v73, v74) != 0;
      if (!v72) {
        goto LABEL_117;
      }
    }
    if (!v72)
    {
      char v79 = 0;
      if (LineFieldUnsigned == v1042 || (int v1035 = 0, v1041 == -1))
      {
        int v1035 = 0;
      }
      else
      {
LABEL_129:
        if (v1041 >= *((_DWORD *)this + 88) || *(_WORD *)(*((void *)this + 43) + 2 * v1041) == 20000) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5696, (uint64_t)"lm/wordlm", 42, (uint64_t)"%u", v57, v58, v1041);
        }
        BigramData::fillBigramRecord(v1027, v1041, (uint64_t)&v1083, &v1081, &v1079);
        LODWORD(v1084) = 0;
        LODWORD(v1082) = 0;
        LODWORD(v10DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = 0;
        if (v79)
        {
          LODWORD(v54) = v1043;
          goto LABEL_134;
        }
        unsigned int v1041 = -1;
      }
      if (LineFieldUnsigned != v1042 && v1039 != -1)
      {
        char v80 = 0;
LABEL_141:
        TrigramData::allocTri1(v1048, v1039, v1078[0]);
        if (*(_DWORD *)v1078)
        {
          unint64_t v81 = 0;
          do
          {
            unsigned int v82 = v81 + *(_DWORD *)(*((void *)this + 101) + 4 * v1039);
            uint64_t v83 = v82;
            *(_WORD *)(*((void *)this + 103) + 2 * v82) = 0;
            if (*((_DWORD *)this + 187)) {
              *(unsigned char *)(*((void *)this + 107) + v82) = 0;
            }
            else {
              *(_WORD *)(*((void *)this + 105) + 2 * v82) = 20000;
            }
            TrigramData::tri2SetUnallocated((uint64_t)v1048, v82);
            *(_WORD *)(*((void *)this + 103) + 2 * v83) = *(_WORD *)(v1077 + 2 * v81);
            if (*((_DWORD *)this + 192)) {
              *(unsigned char *)(*((void *)this + 107) + v83) = *(unsigned char *)(v1073 + v81);
            }
            else {
              *(_WORD *)(*((void *)this + 105) + 2 * v83) = *(_WORD *)(v1075 + 2 * v81);
            }
            ++v81;
          }
          while (v81 < *(unsigned int *)v1078);
        }
        *(_DWORD *)v1078 = 0;
        LODWORD(v1076) = 0;
        LODWORD(v1074) = 0;
        if (v80)
        {
          LODWORD(v54) = v1043;
          goto LABEL_152;
        }
        unsigned int v1039 = -1;
      }
      int v84 = 0;
      if (LineFieldUnsigned != v1042)
      {
        unsigned int v85 = v1036;
        if (v1036 != -1)
        {
LABEL_157:
          QuadgramData::allocQuad1(v52, v85, v1066[0]);
          if (*(_DWORD *)v1066)
          {
            uint64_t v86 = 0;
            unint64_t v87 = 0;
            do
            {
              unsigned int v88 = v87 + *(_DWORD *)(*((void *)this + 162) + 4 * v1036);
              *(_WORD *)(*((void *)this + 164) + 2 * vHuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 88) = 0;
              QuadgramData::quad2SetUnallocated((uint64_t)v1047, v88);
              *(_WORD *)(*((void *)this + 164) + 2 * vHuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 88) = *(_WORD *)(v1065 + 2 * v87);
              QuadgramData::fillQuad2BackoffWeights((unint64_t)v1047, v88, (uint64_t *)(v1063 + v86), (uint64_t *)(v1061 + v86), (void *)(v1059 + v86));
              v51 += *(_DWORD *)(v1063 + v86 + 8);
              ++v87;
              v86 += 16;
            }
            while (v87 < *(unsigned int *)v1066);
          }
          *(_DWORD *)v1066 = 0;
          if ((int)v1064 >= 1)
          {
            uint64_t v89 = 16 * v1064 - 16;
            do
            {
              DgnPrimArray<unsigned int>::~DgnPrimArray(v1063 + v89);
              v89 -= 16;
            }
            while (v89 != -16);
          }
          LODWORD(v10DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = 0;
          uint64_t v52 = (WordLanguageModel *)((char *)this + 1232);
          if ((int)v1062 >= 1)
          {
            uint64_t v90 = 16 * v1062 - 16;
            do
            {
              DgnPrimArray<unsigned int>::~DgnPrimArray(v1061 + v90);
              v90 -= 16;
            }
            while (v90 != -16);
          }
          LODWORD(v1062) = 0;
          if ((int)v1060 >= 1)
          {
            uint64_t v91 = 16 * v1060 - 16;
            do
            {
              DgnPrimArray<unsigned int>::~DgnPrimArray(v1059 + v91);
              v91 -= 16;
            }
            while (v91 != -16);
          }
          LODWORD(v1060) = 0;
          unsigned int v1036 = -1;
        }
      }
      BOOL v1034 = LineFieldUnsigned == v1042;
      if (v84 || LineFieldUnsigned != v1042)
      {
        LODWORD(v54) = v1043;
        goto LABEL_180;
      }
      if (*((_DWORD *)this + 16) >= 3u
        && (v1052 ? (unsigned int v92 = v1051) : (unsigned int v92 = (const char *)&unk_2140A6A10), !strcmp(v92, "TriSc")))
      {
        int v99 = 1;
        if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1031, v93, v94, v95, v96, v97, v98) != v1023)
        {
          BOOL v1034 = 1;
          unsigned int LineFieldUnsigned = v1042;
          if (v1043 != -1) {
            goto LABEL_182;
          }
        }
        unsigned int LineFieldUnsigned = v1042;
        BOOL v1034 = 1;
      }
      else
      {
        BOOL v1034 = 1;
        unsigned int LineFieldUnsigned = v1042;
      }
LABEL_192:
      if (*((_DWORD *)this + 16) < 4u) {
        goto LABEL_197;
      }
      uint64_t v104 = v1052 ? v1051 : (const char *)&unk_2140A6A10;
      if (strcmp(v104, "QuadSc")) {
        goto LABEL_197;
      }
      if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1031, v105, v106, v107, v108, v109, v110) != v1023)goto LABEL_203; {
      if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1024, v111, v112, v113, v114, v57, v58) == v1019)
      }
      {
LABEL_197:
        uint64_t v55 = v1037;
        if (!Line) {
          break;
        }
      }
      else
      {
        uint64_t v55 = v1037;
        if (v1037 != -1) {
          goto LABEL_204;
        }
LABEL_224:
        if (!Line) {
          break;
        }
      }
      goto LABEL_225;
    }
    LODWORD(v54) = v1043;
LABEL_124:
    if (v1041 != -1)
    {
      char v79 = 1;
      int v1035 = Line;
      goto LABEL_129;
    }
    int v1035 = Line;
LABEL_134:
    unsigned int v1041 = -1;
    if (v1039 != -1)
    {
      char v80 = 1;
      goto LABEL_141;
    }
LABEL_152:
    if (v1036 != -1)
    {
      int v84 = 1;
      unsigned int v1039 = -1;
      unsigned int v85 = v1036;
      goto LABEL_157;
    }
    BOOL v1034 = LineFieldUnsigned == v1042;
    unsigned int v1036 = -1;
    unsigned int v1039 = -1;
LABEL_180:
    if (v54 == -1)
    {
      uint64_t v1043 = 0xFFFFFFFFLL;
    }
    else
    {
      int v99 = 0;
LABEL_182:
      if (*((_DWORD *)this + 200) > v1043
        && (uint64_t v100 = *((void *)this + 99),
            LODWORD(v101) = *(unsigned __int16 *)(v100 + 2 * v1043),
            *(_WORD *)(v100 + 2 * v1043))
        || (errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5774, (uint64_t)"lm/wordlm", 47, (uint64_t)"%u %u", v57, v58, v1043), uint64_t v102 = *((void *)this + 99), LODWORD(v101) = *(unsigned __int16 *)(v102 + 2 * v1043), *(_WORD *)(v102 + 2 * v1043)))
      {
        unsigned int v103 = *(_DWORD *)(*((void *)this + 101) + 4 * v1043);
        uint64_t v101 = v101;
        while (v1044 != *(unsigned __int16 *)(*((void *)this + 103) + 2 * v103))
        {
          ++v103;
          if (!--v101) {
            goto LABEL_188;
          }
        }
        TrigramData::fillTrigramRecord((unint64_t)v1048, v103, (uint64_t)&v1071, &v1069, &v1067);
      }
      else
      {
LABEL_188:
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5794, (uint64_t)"lm/wordlm", 47, (uint64_t)"%u %u", v57, v58, v1043);
      }
      LODWORD(v10DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = 0;
      LODWORD(v1070) = 0;
      LODWORD(v106DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
      uint64_t v1043 = 0xFFFFFFFFLL;
      int v1044 = -1;
      if (v99) {
        goto LABEL_192;
      }
    }
LABEL_203:
    LODWORD(v55) = v1037;
    if (v1037 != -1)
    {
LABEL_204:
      unsigned int v115 = v55;
      uint64_t v116 = v55;
      if (*((_DWORD *)this + 322) > v55
        && (uint64_t v117 = *((void *)this + 160),
            int v118 = *(unsigned __int16 *)(v117 + 2 * v55),
            *(_WORD *)(v117 + 2 * v115))
        || (errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5815, (uint64_t)"lm/wordlm", 54, (uint64_t)"%u %u %u", v57, v58, v115), v119 = *((void *)this + 160), int v118 = *(unsigned __int16 *)(v119 + 2 * v1037), *(_WORD *)(v119 + 2 * v1037)))
      {
        int v120 = 0;
        char v121 = 0;
        while (2)
        {
          int v122 = *(_DWORD *)(*((void *)this + 162) + 4 * v116);
          while (1)
          {
            uint64_t v123 = (v122 + v120);
            if (v1046 == *(unsigned __int16 *)(*((void *)this + 164) + 2 * v123))
            {
              if (*(_WORD *)(*((void *)this + 166) + 2 * v123)) {
                break;
              }
            }
LABEL_217:
            if (++v120 == v118)
            {
              if (v121) {
                goto LABEL_223;
              }
              goto LABEL_222;
            }
          }
          int v124 = 0;
          while (1)
          {
            int v125 = *(_DWORD *)(*((void *)this + 185) + 4 * v123);
            uint64_t v126 = (char *)this + 1496;
            if (*((_DWORD *)this + 308))
            {
              int v125 = *(_DWORD *)(*((void *)this + 185) + 4 * v123);
              uint64_t v126 = (char *)this + 1496;
              if ((*(_DWORD *)(*((void *)this + 168) + 4 * (v123 >> 5)) & (1 << (v122 + v120))) != 0)
              {
                int v125 = *(_DWORD *)(*((void *)this + 207) + 4 * *(unsigned int *)(*((void *)this + 185) + 4 * v123));
                uint64_t v126 = (char *)this + 1672;
              }
            }
            if (v53 == *(unsigned __int16 *)(*(void *)v126 + 2 * (v125 + v124))) {
              break;
            }
            if (*(unsigned __int16 *)(*((void *)this + 166) + 2 * v123) == ++v124) {
              goto LABEL_217;
            }
          }
          QuadgramData::fillQuadgramRecord((unint64_t)v52, v123, v124, (uint64_t)&v1057, &v1055, &v1053);
          ++v120;
          char v121 = 1;
          if (v120 != v118) {
            continue;
          }
          break;
        }
      }
      else
      {
LABEL_222:
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5848, (uint64_t)"lm/wordlm", 54, (uint64_t)"%u %u %u", v57, v58, v1037);
      }
LABEL_223:
      ++v1029;
      LODWORD(v105DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
      LODWORD(v10DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = 0;
      LODWORD(v1054) = 0;
      uint64_t v55 = 0xFFFFFFFFLL;
      int v1046 = -1;
      int v53 = -1;
      goto LABEL_224;
    }
    uint64_t v55 = 0xFFFFFFFFLL;
    if (Line)
    {
LABEL_225:
      if (v1052) {
        uint64_t v127 = v1051;
      }
      else {
        uint64_t v127 = (const char *)&unk_2140A6A10;
      }
      if (!strcmp(v127, "UniSc"))
      {
        if (((v1033 | v1035 ^ 1) & 1) == 0)
        {
          uint64_t v274 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
          if (*(_DWORD *)(v274 + 8)) {
            uint64_t v277 = *(void **)v274;
          }
          else {
            uint64_t v277 = &unk_2140A6A10;
          }
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5867, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v275, v276, (char)v277);
        }
        if (*((_DWORD *)this + 16) >= 2u)
        {
          if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1031, v128, v129, v130, v131, v132, v133))
          {
            uint64_t v284 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v284 + 8)) {
              uint64_t v287 = *(void **)v284;
            }
            else {
              uint64_t v287 = &unk_2140A6A10;
            }
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5871, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v285, v286, (char)v287);
          }
          if (*((_DWORD *)this + 16) >= 3u)
          {
            if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1024, v278, v279, v280, v281, v282, v283))
            {
              uint64_t v294 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
              if (*(_DWORD *)(v294 + 8)) {
                uint64_t v297 = *(void **)v294;
              }
              else {
                uint64_t v297 = &unk_2140A6A10;
              }
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5875, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v295, v296, (char)v297);
            }
            if (*((_DWORD *)this + 16) >= 4u
              && DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1022, v288, v289, v290, v291, v292, v293))
            {
              uint64_t v298 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
              if (*(_DWORD *)(v298 + 8)) {
                uint64_t v301 = *(void **)v298;
              }
              else {
                uint64_t v301 = &unk_2140A6A10;
              }
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5879, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v299, v300, (char)v301);
            }
          }
        }
        if (((v1035 ^ 1) & v1034) == 1)
        {
          uint64_t v302 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
          if (*(_DWORD *)(v302 + 8)) {
            uint64_t v305 = *(void **)v302;
          }
          else {
            uint64_t v305 = &unk_2140A6A10;
          }
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5882, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v303, v304, (char)v305);
        }
        if (!LineFieldUnsigned || LineFieldUnsigned >= *v1025)
        {
          uint64_t v306 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
          if (*(_DWORD *)(v306 + 8)) {
            uint64_t v309 = *(void **)v306;
          }
          else {
            uint64_t v309 = &unk_2140A6A10;
          }
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5886, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v307, v308, (char)v309);
        }
        if (LineFieldInteger < 0 || LineFieldInteger >= *((_DWORD *)this + 14))
        {
          uint64_t v310 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
          if (*(_DWORD *)(v310 + 8)) {
            uint64_t v313 = *(void **)v310;
          }
          else {
            uint64_t v313 = &unk_2140A6A10;
          }
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5893, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v311, v312, (char)v313);
        }
        *(_WORD *)(*((void *)this + 21) + 2 * LineFieldUnsigned) = LineFieldInteger;
        unsigned int v1032 = LineFieldUnsigned;
        goto LABEL_814;
      }
      if (!strcmp(v127, "WordIdToLmId"))
      {
        if (v1035)
        {
          unint64_t v314 = v1086 ? v1085 : (const char *)&unk_2140A6A10;
          if (strcmp(v314, "UniSc"))
          {
            uint64_t v315 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v315 + 8)) {
              uint64_t v318 = *(void **)v315;
            }
            else {
              uint64_t v318 = &unk_2140A6A10;
            }
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5901, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v316, v317, (char)v318);
          }
        }
        if (*((_DWORD *)this + 16) >= 2u)
        {
          if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1031, v134, v135, v136, v137, v138, v139))
          {
            uint64_t v325 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v325 + 8)) {
              int v328 = *(void **)v325;
            }
            else {
              int v328 = &unk_2140A6A10;
            }
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5905, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v326, v327, (char)v328);
          }
          if (*((_DWORD *)this + 16) >= 3u)
          {
            if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1024, v319, v320, v321, v322, v323, v324))
            {
              uint64_t v335 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
              if (*(_DWORD *)(v335 + 8)) {
                uint64_t v338 = *(void **)v335;
              }
              else {
                uint64_t v338 = &unk_2140A6A10;
              }
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5909, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v336, v337, (char)v338);
            }
            if (*((_DWORD *)this + 16) >= 4u
              && DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1022, v329, v330, v331, v332, v333, v334))
            {
              uint64_t v339 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
              if (*(_DWORD *)(v339 + 8)) {
                uint64_t v342 = *(void **)v339;
              }
              else {
                uint64_t v342 = &unk_2140A6A10;
              }
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5913, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v340, v341, (char)v342);
            }
          }
        }
        if ((v1034 & ~v1035) == 1)
        {
          uint64_t v343 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
          if (*(_DWORD *)(v343 + 8)) {
            int v346 = *(void **)v343;
          }
          else {
            int v346 = &unk_2140A6A10;
          }
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5916, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v344, v345, (char)v346);
        }
        if (LineFieldUnsigned > 0xFFFFF3)
        {
          uint64_t v347 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
          if (*(_DWORD *)(v347 + 8)) {
            uint64_t v350 = *(void **)v347;
          }
          else {
            uint64_t v350 = &unk_2140A6A10;
          }
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5919, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v348, v349, (char)v350);
        }
        uint64_t v351 = *((void *)this + 2);
        if (*(_DWORD *)(v351 + 388) <= LineFieldUnsigned || !*(unsigned char *)(*(void *)(v351 + 104) + LineFieldUnsigned))
        {
          uint64_t v352 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
          if (*(_DWORD *)(v352 + 8)) {
            uint64_t v355 = *(void **)v352;
          }
          else {
            uint64_t v355 = &unk_2140A6A10;
          }
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5923, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v353, v354, (char)v355);
        }
        if (LineFieldInteger < 1
          || LineFieldInteger > (int)v1032
          || *(_WORD *)(*((void *)this + 21) + 2 * LineFieldInteger) == 20000)
        {
          uint64_t v356 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
          if (*(_DWORD *)(v356 + 8)) {
            uint64_t v359 = *(void **)v356;
          }
          else {
            uint64_t v359 = &unk_2140A6A10;
          }
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5928, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v357, v358, (char)v359);
        }
        WordLanguageModel::recordWordIdLmIdUsage(this, LineFieldUnsigned, LineFieldInteger);
        goto LABEL_814;
      }
      unsigned int v140 = *((_DWORD *)this + 16);
      if (v140 < 2) {
        goto LABEL_814;
      }
      if (!strcmp(v127, "WordIdToContextLmId"))
      {
        if (!v1035
          || (v1086 ? (uint64_t v360 = v1085) : (uint64_t v360 = (const char *)&unk_2140A6A10),
              !strcmp(v360, "UniSc")
           || !strcmp(v360, "WordIdToLmId")
           || ((uint64_t v361 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093), *(_DWORD *)(v361 + 8))
             ? (uint64_t v364 = *(void **)v361)
             : (uint64_t v364 = &unk_2140A6A10),
               errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5938, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v362, v363, (char)v364), *((_DWORD *)this + 16) >= 2u)))
        {
          if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1031, v141, v142, v143, v144, v145, v146))
          {
            uint64_t v371 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v371 + 8)) {
              uint64_t v374 = *(void **)v371;
            }
            else {
              uint64_t v374 = &unk_2140A6A10;
            }
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5942, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v372, v373, (char)v374);
          }
          if (*((_DWORD *)this + 16) >= 3u)
          {
            if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1024, v365, v366, v367, v368, v369, v370))
            {
              uint64_t v381 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
              if (*(_DWORD *)(v381 + 8)) {
                unint64_t v384 = *(void **)v381;
              }
              else {
                unint64_t v384 = &unk_2140A6A10;
              }
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5946, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v382, v383, (char)v384);
            }
            if (*((_DWORD *)this + 16) >= 4u
              && DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1022, v375, v376, v377, v378, v379, v380))
            {
              uint64_t v385 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
              if (*(_DWORD *)(v385 + 8)) {
                uint64_t v388 = *(void **)v385;
              }
              else {
                uint64_t v388 = &unk_2140A6A10;
              }
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5950, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v386, v387, (char)v388);
            }
          }
          if ((v1034 & ~v1035) == 1)
          {
            uint64_t v389 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v389 + 8)) {
              uint64_t v392 = *(void **)v389;
            }
            else {
              uint64_t v392 = &unk_2140A6A10;
            }
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5953, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v390, v391, (char)v392);
          }
        }
        if (LineFieldUnsigned > 0xFFFFF3)
        {
          uint64_t v393 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
          if (*(_DWORD *)(v393 + 8)) {
            uint64_t v396 = *(void **)v393;
          }
          else {
            uint64_t v396 = &unk_2140A6A10;
          }
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5956, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v394, v395, (char)v396);
        }
        uint64_t v397 = *((void *)this + 2);
        if (*(_DWORD *)(v397 + 388) <= LineFieldUnsigned || !*(unsigned char *)(*(void *)(v397 + 104) + LineFieldUnsigned))
        {
          uint64_t v398 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
          if (*(_DWORD *)(v398 + 8)) {
            v401 = *(void **)v398;
          }
          else {
            v401 = &unk_2140A6A10;
          }
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5960, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v399, v400, (char)v401);
        }
        if (LineFieldInteger < 1 || LineFieldInteger >= (int)*v1025)
        {
          uint64_t v402 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
          if (*(_DWORD *)(v402 + 8)) {
            v405 = *(void **)v402;
          }
          else {
            v405 = &unk_2140A6A10;
          }
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5964, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v403, v404, (char)v405);
        }
        if (!*((unsigned char *)this + 276))
        {
          uint64_t v406 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
          if (*(_DWORD *)(v406 + 8)) {
            uint64_t v409 = *(void **)v406;
          }
          else {
            uint64_t v409 = &unk_2140A6A10;
          }
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5967, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v407, v408, (char)v409);
        }
        unsigned int v410 = v1032;
        if (v1032 <= LineFieldInteger) {
          unsigned int v410 = LineFieldInteger;
        }
        unsigned int v1032 = v410;
        WordLanguageModel::recordWordIdContextLmIdUsage(this, LineFieldUnsigned, LineFieldInteger);
        goto LABEL_814;
      }
      if (!strcmp(v127, "UniBoSc"))
      {
        if (!v1035
          || (v1086 ? (int v411 = v1085) : (int v411 = (const char *)&unk_2140A6A10),
              !strcmp(v411, "UniSc")
           || !strcmp(v411, "WordIdToLmId")
           || !strcmp(v411, "WordIdToContextLmId")
           || ((uint64_t v412 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093), *(_DWORD *)(v412 + 8))
             ? (uint64_t v415 = *(void **)v412)
             : (uint64_t v415 = &unk_2140A6A10),
               errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5982, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v413, v414, (char)v415), *((_DWORD *)this + 16) >= 2u)))
        {
          if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1031, v147, v148, v149, v150, v151, v152))
          {
            uint64_t v422 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v422 + 8)) {
              uint64_t v425 = *(void **)v422;
            }
            else {
              uint64_t v425 = &unk_2140A6A10;
            }
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5986, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v423, v424, (char)v425);
          }
          if (*((_DWORD *)this + 16) >= 3u)
          {
            if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1024, v416, v417, v418, v419, v420, v421))
            {
              uint64_t v432 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
              if (*(_DWORD *)(v432 + 8)) {
                uint64_t v435 = *(void **)v432;
              }
              else {
                uint64_t v435 = &unk_2140A6A10;
              }
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5990, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v433, v434, (char)v435);
            }
            if (*((_DWORD *)this + 16) >= 4u
              && DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1022, v426, v427, v428, v429, v430, v431))
            {
              uint64_t v436 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
              if (*(_DWORD *)(v436 + 8)) {
                uint64_t v439 = *(void **)v436;
              }
              else {
                uint64_t v439 = &unk_2140A6A10;
              }
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5994, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v437, v438, (char)v439);
            }
          }
          if ((v1034 & ~v1035) == 1)
          {
            uint64_t v440 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v440 + 8)) {
              uint64_t v443 = *(void **)v440;
            }
            else {
              uint64_t v443 = &unk_2140A6A10;
            }
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5997, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v441, v442, (char)v443);
          }
        }
        if (LineFieldUnsigned - 1 >= v1032 || *(_WORD *)(*((void *)this + 21) + 2 * LineFieldUnsigned) == 20000)
        {
          uint64_t v444 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
          if (*(_DWORD *)(v444 + 8)) {
            v447 = *(void **)v444;
          }
          else {
            v447 = &unk_2140A6A10;
          }
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6002, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v445, v446, (char)v447);
        }
        if (LineFieldInteger < 0 || LineFieldInteger >= *((_DWORD *)this + 14))
        {
          uint64_t v448 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
          if (*(_DWORD *)(v448 + 8)) {
            unsigned int v451 = *(void **)v448;
          }
          else {
            unsigned int v451 = &unk_2140A6A10;
          }
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6007, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v449, v450, (char)v451);
        }
        if (*((_DWORD *)this + 84))
        {
          uint64_t v452 = *v1020;
        }
        else
        {
          unsigned int v539 = *((_DWORD *)this + 26);
          unsigned int v540 = *((_DWORD *)this + 85);
          unsigned int v541 = v539;
          if (v539 > v540)
          {
            DgnPrimArray<short>::reallocElts((uint64_t)v1020, v539 - v540, 0);
            unsigned int v541 = *v1025;
          }
          *((_DWORD *)this + 84) = v539;
          uint64_t v452 = *((void *)this + 41);
          if (v541) {
            memset_pattern16(*((void **)this + 41), &unk_2140A1DB0, 2 * v541);
          }
        }
        *(_WORD *)(v452 + 2 * LineFieldUnsigned) = LineFieldInteger;
        goto LABEL_814;
      }
      if (!strcmp(v127, "BoWt"))
      {
        if (!v1035
          || (v1086 ? (uint64_t v453 = v1085) : (uint64_t v453 = (const char *)&unk_2140A6A10),
              !strcmp(v453, "UniSc")
           || !strcmp(v453, "WordIdToLmId")
           || !strcmp(v453, "WordIdToContextLmId")
           || !strcmp(v453, "UniBoSc")
           || ((uint64_t v454 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093), *(_DWORD *)(v454 + 8))
             ? (uint64_t v457 = *(void **)v454)
             : (uint64_t v457 = &unk_2140A6A10),
               errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6026, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v455, v456, (char)v457), *((_DWORD *)this + 16) >= 2u)))
        {
          if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1031, v153, v154, v155, v156, v157, v158))
          {
            uint64_t v464 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v464 + 8)) {
              unsigned int v467 = *(void **)v464;
            }
            else {
              unsigned int v467 = &unk_2140A6A10;
            }
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6030, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v465, v466, (char)v467);
          }
          if (*((_DWORD *)this + 16) >= 3u)
          {
            if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1024, v458, v459, v460, v461, v462, v463))
            {
              uint64_t v474 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
              if (*(_DWORD *)(v474 + 8)) {
                uint64_t v477 = *(void **)v474;
              }
              else {
                uint64_t v477 = &unk_2140A6A10;
              }
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6034, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v475, v476, (char)v477);
            }
            if (*((_DWORD *)this + 16) >= 4u
              && DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1022, v468, v469, v470, v471, v472, v473))
            {
              uint64_t v478 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
              if (*(_DWORD *)(v478 + 8)) {
                uint64_t v481 = *(void **)v478;
              }
              else {
                uint64_t v481 = &unk_2140A6A10;
              }
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6038, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v479, v480, (char)v481);
            }
          }
          if ((v1034 & ~v1035) == 1)
          {
            uint64_t v482 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v482 + 8)) {
              uint64_t v485 = *(void **)v482;
            }
            else {
              uint64_t v485 = &unk_2140A6A10;
            }
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6041, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v483, v484, (char)v485);
          }
        }
        if (!LineFieldUnsigned || LineFieldUnsigned >= *v1025)
        {
          uint64_t v486 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
          if (*(_DWORD *)(v486 + 8)) {
            uint64_t v489 = *(void **)v486;
          }
          else {
            uint64_t v489 = &unk_2140A6A10;
          }
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6045, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v487, v488, (char)v489);
        }
        unsigned int v490 = v1032;
        if (v1032 <= LineFieldUnsigned) {
          unsigned int v490 = LineFieldUnsigned;
        }
        unsigned int v1032 = v490;
        signed int v491 = *((_DWORD *)this + 14);
        if (LineFieldInteger <= -v491 || LineFieldInteger >= v491)
        {
          uint64_t v492 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
          if (*(_DWORD *)(v492 + 8)) {
            int v495 = *(void **)v492;
          }
          else {
            int v495 = &unk_2140A6A10;
          }
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6054, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v493, v494, (char)v495);
        }
        *(_WORD *)(*((void *)this + 43) + 2 * LineFieldUnsigned) = LineFieldInteger;
        goto LABEL_814;
      }
      if (!strcmp(v127, "BiScQuant"))
      {
        if (!v1035
          || (v1086 ? (unsigned int v496 = v1085) : (unsigned int v496 = (const char *)&unk_2140A6A10),
              !strcmp(v496, "UniSc")
           || !strcmp(v496, "WordIdToLmId")
           || !strcmp(v496, "WordIdToContextLmId")
           || !strcmp(v496, "UniBoSc")
           || !strcmp(v496, "BoWt")
           || ((uint64_t v497 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093), *(_DWORD *)(v497 + 8))
             ? (uint64_t v500 = *(void **)v497)
             : (uint64_t v500 = &unk_2140A6A10),
               errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6066, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v498, v499, (char)v500), *((_DWORD *)this + 16) >= 2u)))
        {
          if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1031, v159, v160, v161, v162, v163, v164))
          {
            uint64_t v507 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v507 + 8)) {
              uint64_t v510 = *(void **)v507;
            }
            else {
              uint64_t v510 = &unk_2140A6A10;
            }
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6070, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v508, v509, (char)v510);
          }
          if (*((_DWORD *)this + 16) >= 3u)
          {
            if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1024, v501, v502, v503, v504, v505, v506))
            {
              uint64_t v517 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
              if (*(_DWORD *)(v517 + 8)) {
                uint64_t v520 = *(void **)v517;
              }
              else {
                uint64_t v520 = &unk_2140A6A10;
              }
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6074, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v518, v519, (char)v520);
            }
            if (*((_DWORD *)this + 16) >= 4u
              && DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1022, v511, v512, v513, v514, v515, v516))
            {
              uint64_t v521 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
              if (*(_DWORD *)(v521 + 8)) {
                unsigned int v524 = *(void **)v521;
              }
              else {
                unsigned int v524 = &unk_2140A6A10;
              }
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6078, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v522, v523, (char)v524);
            }
          }
        }
        char v525 = v1035;
        if (LineFieldUnsigned == 1) {
          char v525 = 0;
        }
        if (v525) {
          goto LABEL_616;
        }
        char v526 = v1035;
        if (LineFieldUnsigned == v1042 + 1) {
          char v526 = 1;
        }
        if ((v526 & 1) == 0)
        {
LABEL_616:
          uint64_t v527 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
          if (*(_DWORD *)(v527 + 8)) {
            uint64_t v530 = *(void **)v527;
          }
          else {
            uint64_t v530 = &unk_2140A6A10;
          }
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6082, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v528, v529, (char)v530);
        }
        if (LineFieldUnsigned - 256 <= 0xFFFFFF00)
        {
          uint64_t v531 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
          if (*(_DWORD *)(v531 + 8)) {
            uint64_t v534 = *(void **)v531;
          }
          else {
            uint64_t v534 = &unk_2140A6A10;
          }
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6085, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v532, v533, (char)v534);
        }
        if (LineFieldInteger < 0 || LineFieldInteger >= *((_DWORD *)this + 14))
        {
          uint64_t v535 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
          if (*(_DWORD *)(v535 + 8)) {
            unint64_t v538 = *(void **)v535;
          }
          else {
            unint64_t v538 = &unk_2140A6A10;
          }
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6089, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v536, v537, (char)v538);
        }
        BigramData::addBigramScoreQuantization(v1027, 0, LineFieldInteger);
        goto LABEL_814;
      }
      if (!strcmp(v127, "BiSc"))
      {
        if (v1035)
        {
          uint64_t v542 = v1086 ? v1085 : (const char *)&unk_2140A6A10;
          if (strcmp(v542, "UniSc")
            && strcmp(v542, "WordIdToLmId")
            && strcmp(v542, "WordIdToContextLmId")
            && strcmp(v542, "UniBoSc")
            && strcmp(v542, "BoWt")
            && strcmp(v542, "BiScQuant"))
          {
            uint64_t v543 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v543 + 8)) {
              uint64_t v546 = *(void **)v543;
            }
            else {
              uint64_t v546 = &unk_2140A6A10;
            }
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6103, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v544, v545, (char)v546);
          }
        }
        unsigned int v553 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1031, v165, v166, v167, v168, v169, v170);
        if (*((_DWORD *)this + 16) >= 3u)
        {
          if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1024, v547, v548, v549, v550, v551, v552))
          {
            uint64_t v560 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v560 + 8)) {
              uint64_t v563 = *(void **)v560;
            }
            else {
              uint64_t v563 = &unk_2140A6A10;
            }
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6108, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v561, v562, (char)v563);
          }
          if (*((_DWORD *)this + 16) >= 4u
            && DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1022, v554, v555, v556, v557, v558, v559))
          {
            uint64_t v564 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v564 + 8)) {
              v567 = *(void **)v564;
            }
            else {
              v567 = &unk_2140A6A10;
            }
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6112, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v565, v566, (char)v567);
          }
        }
        if (((v1035 | !v1034) & 1) == 0 && v553 <= v1023)
        {
          uint64_t v568 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
          if (*(_DWORD *)(v568 + 8)) {
            unsigned int v571 = *(void **)v568;
          }
          else {
            unsigned int v571 = &unk_2140A6A10;
          }
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6116, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v569, v570, (char)v571);
        }
        if (LineFieldUnsigned - 1 >= v1032
          || *(_WORD *)(*((void *)this + 43) + 2 * LineFieldUnsigned) == 20000
          || LineFieldUnsigned >= *v1025)
        {
          uint64_t v572 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
          if (*(_DWORD *)(v572 + 8)) {
            uint64_t v575 = *(void **)v572;
          }
          else {
            uint64_t v575 = &unk_2140A6A10;
          }
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6122, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v573, v574, (char)v575);
        }
        if (v553 - 1 >= v1032
          || *(_WORD *)(*((void *)this + 21) + 2 * v553) == 20000
          || v553 > 0xFFFE
          || v553 >= *v1025)
        {
          uint64_t v576 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
          if (*(_DWORD *)(v576 + 8)) {
            v579 = *(void **)v576;
          }
          else {
            v579 = &unk_2140A6A10;
          }
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6129, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v577, v578, (char)v579);
        }
        unsigned int v580 = v1084;
        if (v1084 == HIDWORD(v1084))
        {
          DgnPrimArray<short>::reallocElts((uint64_t)&v1083, 1, 1);
          unsigned int v580 = v1084;
        }
        *(_WORD *)(v1083 + 2 * v5DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = v553;
        LODWORD(v1084) = v580 + 1;
        signed int v581 = *((_DWORD *)this + 94);
        if (v581)
        {
          if (LineFieldInteger < 1 || LineFieldInteger >= v581)
          {
            uint64_t v582 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v582 + 8)) {
              unint64_t v585 = *(void **)v582;
            }
            else {
              unint64_t v585 = &unk_2140A6A10;
            }
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6143, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v583, v584, (char)v585);
          }
          uint64_t v586 = v1080;
          if (v1080 == (unint64_t)HIDWORD(v1080))
          {
            DgnPrimArray<char>::reallocElts((uint64_t)&v1079, 1, 1);
            uint64_t v586 = v1080;
          }
          *(unsigned char *)(v1079 + v586) = LineFieldInteger;
          LODWORD(v10DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = v1080 + 1;
        }
        else
        {
          if (LineFieldInteger < 0 || LineFieldInteger >= *((_DWORD *)this + 14))
          {
            uint64_t v587 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v587 + 8)) {
              uint64_t v590 = *(void **)v587;
            }
            else {
              uint64_t v590 = &unk_2140A6A10;
            }
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6151, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v588, v589, (char)v590);
          }
          int v591 = v1082;
          if (v1082 == HIDWORD(v1082))
          {
            DgnPrimArray<short>::reallocElts((uint64_t)&v1081, 1, 1);
            int v591 = v1082;
          }
          v1081[v591] = LineFieldInteger;
          LODWORD(v1082) = v591 + 1;
        }
        unsigned int v1041 = LineFieldUnsigned;
      }
      else
      {
        if (v140 < 3) {
          goto LABEL_814;
        }
        if (!strcmp(v127, "TriBoWtQuant"))
        {
          if (v1035)
          {
            uint64_t v592 = v1086 ? v1085 : (const char *)&unk_2140A6A10;
            if (strcmp(v592, "UniSc")
              && strcmp(v592, "WordIdToLmId")
              && strcmp(v592, "WordIdToContextLmId")
              && strcmp(v592, "UniBoSc")
              && strcmp(v592, "BoWt")
              && strcmp(v592, "BiScQuant")
              && strcmp(v592, "BiSc"))
            {
              uint64_t v593 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
              if (*(_DWORD *)(v593 + 8)) {
                uint64_t v596 = *(void **)v593;
              }
              else {
                uint64_t v596 = &unk_2140A6A10;
              }
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6167, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v594, v595, (char)v596);
            }
          }
          if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1031, v171, v172, v173, v174, v175, v176))
          {
            uint64_t v603 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v603 + 8)) {
              v606 = *(void **)v603;
            }
            else {
              v606 = &unk_2140A6A10;
            }
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6170, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v604, v605, (char)v606);
          }
          if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1024, v597, v598, v599, v600, v601, v602))
          {
            uint64_t v613 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v613 + 8)) {
              int v616 = *(void **)v613;
            }
            else {
              int v616 = &unk_2140A6A10;
            }
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6173, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v614, v615, (char)v616);
          }
          if (*((_DWORD *)this + 16) >= 4u
            && DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1022, v607, v608, v609, v610, v611, v612))
          {
            uint64_t v617 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v617 + 8)) {
              uint64_t v620 = *(void **)v617;
            }
            else {
              uint64_t v620 = &unk_2140A6A10;
            }
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6177, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v618, v619, (char)v620);
          }
          char v621 = v1035;
          if (LineFieldUnsigned == 1) {
            char v621 = 0;
          }
          if (v621) {
            goto LABEL_744;
          }
          char v622 = v1035;
          if (LineFieldUnsigned == v1042 + 1) {
            char v622 = 1;
          }
          if ((v622 & 1) == 0)
          {
LABEL_744:
            uint64_t v623 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v623 + 8)) {
              uint64_t v626 = *(void **)v623;
            }
            else {
              uint64_t v626 = &unk_2140A6A10;
            }
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6181, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v624, v625, (char)v626);
          }
          if (LineFieldUnsigned - 256 <= 0xFFFFFF00)
          {
            uint64_t v627 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v627 + 8)) {
              v630 = *(void **)v627;
            }
            else {
              v630 = &unk_2140A6A10;
            }
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6184, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v628, v629, (char)v630);
          }
          signed int v631 = *((_DWORD *)this + 14);
          if (LineFieldInteger <= -v631 || LineFieldInteger >= v631)
          {
            uint64_t v632 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v632 + 8)) {
              v635 = *(void **)v632;
            }
            else {
              v635 = &unk_2140A6A10;
            }
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6188, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v633, v634, (char)v635);
          }
          TrigramData::addTrigramBackoffWeightQuantization(v1048, 0, LineFieldInteger);
          goto LABEL_814;
        }
        if (!strcmp(v127, "TriScQuant"))
        {
          if (v1035)
          {
            v636 = v1086 ? v1085 : (const char *)&unk_2140A6A10;
            if (strcmp(v636, "UniSc")
              && strcmp(v636, "WordIdToLmId")
              && strcmp(v636, "WordIdToContextLmId")
              && strcmp(v636, "UniBoSc")
              && strcmp(v636, "BoWt")
              && strcmp(v636, "BiScQuant")
              && strcmp(v636, "BiSc")
              && strcmp(v636, "TriBoWtQuant"))
            {
              uint64_t v637 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
              if (*(_DWORD *)(v637 + 8)) {
                v640 = *(void **)v637;
              }
              else {
                v640 = &unk_2140A6A10;
              }
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6204, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v638, v639, (char)v640);
            }
          }
          if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1031, v177, v178, v179, v180, v181, v182))
          {
            uint64_t v647 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v647 + 8)) {
              v650 = *(void **)v647;
            }
            else {
              v650 = &unk_2140A6A10;
            }
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6207, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v648, v649, (char)v650);
          }
          if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1024, v641, v642, v643, v644, v645, v646))
          {
            uint64_t v657 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v657 + 8)) {
              v660 = *(void **)v657;
            }
            else {
              v660 = &unk_2140A6A10;
            }
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6210, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v658, v659, (char)v660);
          }
          if (*((_DWORD *)this + 16) >= 4u
            && DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1022, v651, v652, v653, v654, v655, v656))
          {
            uint64_t v661 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v661 + 8)) {
              v664 = *(void **)v661;
            }
            else {
              v664 = &unk_2140A6A10;
            }
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6214, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v662, v663, (char)v664);
          }
          char v665 = v1035;
          if (LineFieldUnsigned == 1) {
            char v665 = 0;
          }
          if (v665) {
            goto LABEL_798;
          }
          char v666 = v1035;
          if (LineFieldUnsigned == v1042 + 1) {
            char v666 = 1;
          }
          if ((v666 & 1) == 0)
          {
LABEL_798:
            uint64_t v667 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v667 + 8)) {
              v670 = *(void **)v667;
            }
            else {
              v670 = &unk_2140A6A10;
            }
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6218, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v668, v669, (char)v670);
          }
          if (LineFieldUnsigned - 256 <= 0xFFFFFF00)
          {
            uint64_t v671 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v671 + 8)) {
              v674 = *(void **)v671;
            }
            else {
              v674 = &unk_2140A6A10;
            }
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6221, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v672, v673, (char)v674);
          }
          if (LineFieldInteger < 0 || LineFieldInteger >= *((_DWORD *)this + 14))
          {
            uint64_t v675 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v675 + 8)) {
              v678 = *(void **)v675;
            }
            else {
              v678 = &unk_2140A6A10;
            }
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6225, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v676, v677, (char)v678);
          }
          TrigramData::addTrigramScoreQuantization(v1048, 0, LineFieldInteger);
          goto LABEL_814;
        }
        if (!strcmp(v127, "TriBoWt"))
        {
          if (v1035)
          {
            v679 = v1086 ? v1085 : (const char *)&unk_2140A6A10;
            if (strcmp(v679, "UniSc")
              && strcmp(v679, "WordIdToLmId")
              && strcmp(v679, "WordIdToContextLmId")
              && strcmp(v679, "UniBoSc")
              && strcmp(v679, "BoWt")
              && strcmp(v679, "BiScQuant")
              && strcmp(v679, "BiSc")
              && strcmp(v679, "TriBoWtQuant")
              && strcmp(v679, "TriScQuant"))
            {
              uint64_t v680 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
              if (*(_DWORD *)(v680 + 8)) {
                v683 = *(void **)v680;
              }
              else {
                v683 = &unk_2140A6A10;
              }
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6242, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v681, v682, (char)v683);
            }
          }
          unsigned int v553 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1031, v183, v184, v185, v186, v187, v188);
          if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1024, v684, v685, v686, v687, v688, v689))
          {
            uint64_t v696 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v696 + 8)) {
              v699 = *(void **)v696;
            }
            else {
              v699 = &unk_2140A6A10;
            }
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6246, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v697, v698, (char)v699);
          }
          if (*((_DWORD *)this + 16) >= 4u
            && DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1022, v690, v691, v692, v693, v694, v695))
          {
            uint64_t v700 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v700 + 8)) {
              v703 = *(void **)v700;
            }
            else {
              v703 = &unk_2140A6A10;
            }
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6250, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v701, v702, (char)v703);
          }
          if (((v1035 | !v1034) & 1) == 0 && v553 <= v1023)
          {
            uint64_t v704 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v704 + 8)) {
              v707 = *(void **)v704;
            }
            else {
              v707 = &unk_2140A6A10;
            }
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6254, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v705, v706, (char)v707);
          }
          if (LineFieldUnsigned - 1 >= v1032
            || *(_WORD *)(*((void *)this + 43) + 2 * LineFieldUnsigned) == 20000
            || LineFieldUnsigned >= *v1025)
          {
            uint64_t v708 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v708 + 8)) {
              v711 = *(void **)v708;
            }
            else {
              v711 = &unk_2140A6A10;
            }
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6260, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v709, v710, (char)v711);
          }
          if (v553 - 1 >= v1032
            || *(_WORD *)(*((void *)this + 43) + 2 * v553) == 20000
            || v553 > 0xFFFE
            || v553 >= *v1025)
          {
            uint64_t v712 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v712 + 8)) {
              v715 = *(void **)v712;
            }
            else {
              v715 = &unk_2140A6A10;
            }
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6267, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v713, v714, (char)v715);
          }
          unsigned int v716 = *(_DWORD *)v1078;
          if (*(_DWORD *)v1078 == *(_DWORD *)&v1078[2])
          {
            DgnPrimArray<short>::reallocElts((uint64_t)&v1077, 1, 1);
            unsigned int v716 = *(_DWORD *)v1078;
          }
          *(_WORD *)(v1077 + 2 * v7DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v553;
          *(_DWORD *)v1078 = v716 + 1;
          signed int v717 = *((_DWORD *)this + 192);
          if (v717)
          {
            if (LineFieldInteger < 1 || LineFieldInteger >= v717)
            {
              uint64_t v718 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
              if (*(_DWORD *)(v718 + 8)) {
                v721 = *(void **)v718;
              }
              else {
                v721 = &unk_2140A6A10;
              }
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6282, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v719, v720, (char)v721);
            }
            uint64_t v722 = v1074;
            if (v1074 == (unint64_t)HIDWORD(v1074))
            {
              DgnPrimArray<char>::reallocElts((uint64_t)&v1073, 1, 1);
              uint64_t v722 = v1074;
            }
            *(unsigned char *)(v1073 + v722) = LineFieldInteger;
            LODWORD(v1074) = v1074 + 1;
          }
          else
          {
            signed int v773 = *((_DWORD *)this + 14);
            if (LineFieldInteger <= -v773 || LineFieldInteger >= v773)
            {
              uint64_t v774 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
              if (*(_DWORD *)(v774 + 8)) {
                v777 = *(void **)v774;
              }
              else {
                v777 = &unk_2140A6A10;
              }
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6290, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v775, v776, (char)v777);
            }
            unsigned int v778 = v1076;
            if (v1076 == HIDWORD(v1076))
            {
              DgnPrimArray<short>::reallocElts((uint64_t)&v1075, 1, 1);
              unsigned int v778 = v1076;
            }
            *(_WORD *)(v1075 + 2 * v77DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = LineFieldInteger;
            LODWORD(v1076) = v778 + 1;
          }
          unsigned int v1039 = LineFieldUnsigned;
        }
        else
        {
          if (strcmp(v127, "TriSc"))
          {
            if (v140 >= 4)
            {
              if (!strcmp(v127, "QuadBoWtQuant"))
              {
                if (v1035)
                {
                  v784 = v1086 ? v1085 : (const char *)&unk_2140A6A10;
                  if (strcmp(v784, "UniSc")
                    && strcmp(v784, "WordIdToLmId")
                    && strcmp(v784, "WordIdToContextLmId")
                    && strcmp(v784, "UniBoSc")
                    && strcmp(v784, "BoWt")
                    && strcmp(v784, "BiScQuant")
                    && strcmp(v784, "BiSc")
                    && strcmp(v784, "TriBoWtQuant")
                    && strcmp(v784, "TriScQuant")
                    && strcmp(v784, "TriBoWt")
                    && strcmp(v784, "TriSc"))
                  {
                    uint64_t v785 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                    if (*(_DWORD *)(v785 + 8)) {
                      v788 = *(void **)v785;
                    }
                    else {
                      v788 = &unk_2140A6A10;
                    }
                    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6391, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v786, v787, (char)v788);
                  }
                }
                if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1031, v195, v196, v197, v198, v199, v200))
                {
                  uint64_t v795 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                  if (*(_DWORD *)(v795 + 8)) {
                    v798 = *(void **)v795;
                  }
                  else {
                    v798 = &unk_2140A6A10;
                  }
                  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6394, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v796, v797, (char)v798);
                }
                if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1024, v789, v790, v791, v792, v793, v794))
                {
                  uint64_t v805 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                  if (*(_DWORD *)(v805 + 8)) {
                    v808 = *(void **)v805;
                  }
                  else {
                    v808 = &unk_2140A6A10;
                  }
                  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6397, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v806, v807, (char)v808);
                }
                if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1022, v799, v800, v801, v802, v803, v804))
                {
                  uint64_t v809 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                  if (*(_DWORD *)(v809 + 8)) {
                    v812 = *(void **)v809;
                  }
                  else {
                    v812 = &unk_2140A6A10;
                  }
                  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6400, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v810, v811, (char)v812);
                }
                char v813 = v1035;
                if (LineFieldUnsigned == 1) {
                  char v813 = 0;
                }
                if (v813) {
                  goto LABEL_1008;
                }
                char v814 = v1035;
                if (LineFieldUnsigned == v1042 + 1) {
                  char v814 = 1;
                }
                if ((v814 & 1) == 0)
                {
LABEL_1008:
                  uint64_t v815 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                  if (*(_DWORD *)(v815 + 8)) {
                    v818 = *(void **)v815;
                  }
                  else {
                    v818 = &unk_2140A6A10;
                  }
                  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6404, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v816, v817, (char)v818);
                }
                if (LineFieldUnsigned - 256 <= 0xFFFFFF00)
                {
                  uint64_t v819 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                  if (*(_DWORD *)(v819 + 8)) {
                    v822 = *(void **)v819;
                  }
                  else {
                    v822 = &unk_2140A6A10;
                  }
                  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6407, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v820, v821, (char)v822);
                }
                signed int v823 = *((_DWORD *)this + 14);
                if (LineFieldInteger <= -v823 || LineFieldInteger >= v823)
                {
                  uint64_t v824 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                  if (*(_DWORD *)(v824 + 8)) {
                    v827 = *(void **)v824;
                  }
                  else {
                    v827 = &unk_2140A6A10;
                  }
                  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6411, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v825, v826, (char)v827);
                }
                TrigramData::addTrigramBackoffWeightQuantization(v52, 0, LineFieldInteger);
                goto LABEL_814;
              }
              if (!strcmp(v127, "QuadScQuant"))
              {
                if (v1035)
                {
                  v828 = v1086 ? v1085 : (const char *)&unk_2140A6A10;
                  if (strcmp(v828, "UniSc")
                    && strcmp(v828, "WordIdToLmId")
                    && strcmp(v828, "WordIdToContextLmId")
                    && strcmp(v828, "UniBoSc")
                    && strcmp(v828, "BoWt")
                    && strcmp(v828, "BiScQuant")
                    && strcmp(v828, "BiSc")
                    && strcmp(v828, "TriBoWtQuant")
                    && strcmp(v828, "TriScQuant")
                    && strcmp(v828, "TriBoWt")
                    && strcmp(v828, "TriSc")
                    && strcmp(v828, "QuadBoWtQuant"))
                  {
                    uint64_t v829 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                    if (*(_DWORD *)(v829 + 8)) {
                      v832 = *(void **)v829;
                    }
                    else {
                      v832 = &unk_2140A6A10;
                    }
                    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6431, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v830, v831, (char)v832);
                  }
                }
                if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1031, v201, v202, v203, v204, v205, v206))
                {
                  uint64_t v839 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                  if (*(_DWORD *)(v839 + 8)) {
                    v842 = *(void **)v839;
                  }
                  else {
                    v842 = &unk_2140A6A10;
                  }
                  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6434, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v840, v841, (char)v842);
                }
                if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1024, v833, v834, v835, v836, v837, v838))
                {
                  uint64_t v849 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                  if (*(_DWORD *)(v849 + 8)) {
                    v852 = *(void **)v849;
                  }
                  else {
                    v852 = &unk_2140A6A10;
                  }
                  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6437, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v850, v851, (char)v852);
                }
                if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1022, v843, v844, v845, v846, v847, v848))
                {
                  uint64_t v853 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                  if (*(_DWORD *)(v853 + 8)) {
                    v856 = *(void **)v853;
                  }
                  else {
                    v856 = &unk_2140A6A10;
                  }
                  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6440, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v854, v855, (char)v856);
                }
                char v857 = v1035;
                if (LineFieldUnsigned == 1) {
                  char v857 = 0;
                }
                if (v857) {
                  goto LABEL_1065;
                }
                char v858 = v1035;
                if (LineFieldUnsigned == v1042 + 1) {
                  char v858 = 1;
                }
                if ((v858 & 1) == 0)
                {
LABEL_1065:
                  uint64_t v859 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                  if (*(_DWORD *)(v859 + 8)) {
                    v862 = *(void **)v859;
                  }
                  else {
                    v862 = &unk_2140A6A10;
                  }
                  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6444, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v860, v861, (char)v862);
                }
                if (LineFieldUnsigned - 256 <= 0xFFFFFF00)
                {
                  uint64_t v863 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                  if (*(_DWORD *)(v863 + 8)) {
                    v866 = *(void **)v863;
                  }
                  else {
                    v866 = &unk_2140A6A10;
                  }
                  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6447, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v864, v865, (char)v866);
                }
                if (LineFieldInteger < 0 || LineFieldInteger >= *((_DWORD *)this + 14))
                {
                  uint64_t v867 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                  if (*(_DWORD *)(v867 + 8)) {
                    v870 = *(void **)v867;
                  }
                  else {
                    v870 = &unk_2140A6A10;
                  }
                  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6451, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v868, v869, (char)v870);
                }
                TrigramData::addTrigramScoreQuantization(v52, 0, LineFieldInteger);
                goto LABEL_814;
              }
              if (strcmp(v127, "QuadBoWt"))
              {
                if (!strcmp(v127, "QuadSc"))
                {
                  if (v1035)
                  {
                    uint64_t v219 = v1086 ? v1085 : (const char *)&unk_2140A6A10;
                    if (strcmp(v219, "UniSc")
                      && strcmp(v219, "WordIdToLmId")
                      && strcmp(v219, "WordIdToContextLmId")
                      && strcmp(v219, "UniBoSc")
                      && strcmp(v219, "BoWt")
                      && strcmp(v219, "BiScQuant")
                      && strcmp(v219, "BiSc")
                      && strcmp(v219, "TriBoWtQuant")
                      && strcmp(v219, "TriScQuant")
                      && strcmp(v219, "TriBoWt")
                      && strcmp(v219, "TriSc")
                      && strcmp(v219, "QuadBoWtQuant")
                      && strcmp(v219, "QuadScQuant")
                      && strcmp(v219, "QuadBoWt"))
                    {
                      uint64_t v220 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                      if (*(_DWORD *)(v220 + 8)) {
                        uint64_t v223 = *(void **)v220;
                      }
                      else {
                        uint64_t v223 = &unk_2140A6A10;
                      }
                      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6564, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v221, v222, (char)v223);
                    }
                  }
                  unsigned int v224 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1031, v213, v214, v215, v216, v217, v218);
                  unsigned int v231 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1024, v225, v226, v227, v228, v229, v230);
                  unsigned int v238 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1022, v232, v233, v234, v235, v236, v237);
                  int v239 = v1034 & ~v1035;
                  if (v239 == 1 && v224 < v1023)
                  {
                    uint64_t v240 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                    if (*(_DWORD *)(v240 + 8)) {
                      uint64_t v243 = *(void **)v240;
                    }
                    else {
                      uint64_t v243 = &unk_2140A6A10;
                    }
                    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6571, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v241, v242, (char)v243);
                  }
                  if (v224 != v1023) {
                    int v239 = 0;
                  }
                  if (v239 == 1 && v231 < v1019)
                  {
                    uint64_t v244 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                    if (*(_DWORD *)(v244 + 8)) {
                      unsigned int v247 = *(void **)v244;
                    }
                    else {
                      unsigned int v247 = &unk_2140A6A10;
                    }
                    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6575, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v245, v246, (char)v247);
                  }
                  if (v239 && v231 == v1019 && v238 <= v1014)
                  {
                    uint64_t v248 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                    if (*(_DWORD *)(v248 + 8)) {
                      uint64_t v251 = *(void **)v248;
                    }
                    else {
                      uint64_t v251 = &unk_2140A6A10;
                    }
                    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6580, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v249, v250, (char)v251);
                  }
                  if (LineFieldUnsigned - 1 >= v1032
                    || *(_WORD *)(*((void *)this + 43) + 2 * LineFieldUnsigned) == 20000
                    || LineFieldUnsigned >= *v1025)
                  {
                    uint64_t v252 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                    if (*(_DWORD *)(v252 + 8)) {
                      uint64_t v255 = *(void **)v252;
                    }
                    else {
                      uint64_t v255 = &unk_2140A6A10;
                    }
                    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6586, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v253, v254, (char)v255);
                  }
                  if (v224 - 1 >= v1032
                    || *(_WORD *)(*((void *)this + 43) + 2 * v224) == 20000
                    || v224 > 0xFFFE
                    || v224 >= *v1025)
                  {
                    uint64_t v256 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                    if (*(_DWORD *)(v256 + 8)) {
                      unsigned int v259 = *(void **)v256;
                    }
                    else {
                      unsigned int v259 = &unk_2140A6A10;
                    }
                    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6593, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v257, v258, (char)v259);
                  }
                  if (v231 - 1 >= v1032
                    || *(_WORD *)(*((void *)this + 43) + 2 * v231) == 20000
                    || v231 > 0xFFFE
                    || v231 >= *v1025)
                  {
                    uint64_t v260 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                    if (*(_DWORD *)(v260 + 8)) {
                      uint64_t v263 = *(void **)v260;
                    }
                    else {
                      uint64_t v263 = &unk_2140A6A10;
                    }
                    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6600, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v261, v262, (char)v263);
                  }
                  if (v238 - 1 >= v1032
                    || *(_WORD *)(*((void *)this + 21) + 2 * v238) == 20000
                    || v238 > 0xFFFE
                    || v238 >= *v1025)
                  {
                    uint64_t v264 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                    if (*(_DWORD *)(v264 + 8)) {
                      uint64_t v267 = *(void **)v264;
                    }
                    else {
                      uint64_t v267 = &unk_2140A6A10;
                    }
                    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6607, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v265, v266, (char)v267);
                  }
                  unsigned int v268 = v1058;
                  if (v1058 == HIDWORD(v1058))
                  {
                    DgnPrimArray<short>::reallocElts((uint64_t)&v1057, 1, 1);
                    unsigned int v268 = v1058;
                  }
                  int v1046 = (unsigned __int16)v224;
                  int v53 = (unsigned __int16)v231;
                  *(_WORD *)(v1057 + 2 * v26DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v238;
                  LODWORD(v105DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v268 + 1;
                  signed int v269 = *((_DWORD *)this + 318);
                  if (v269)
                  {
                    if (LineFieldInteger < 1 || LineFieldInteger >= v269)
                    {
                      uint64_t v270 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                      if (*(_DWORD *)(v270 + 8)) {
                        uint64_t v273 = *(void **)v270;
                      }
                      else {
                        uint64_t v273 = &unk_2140A6A10;
                      }
                      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6629, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v271, v272, (char)v273);
                    }
                    DgnPrimArray<unsigned char>::add((unint64_t)&v1053, LineFieldInteger);
                    unsigned int v1019 = v231;
                    unsigned int v1014 = v238;
                    uint64_t v55 = LineFieldUnsigned;
                    unsigned int v1023 = v224;
                  }
                  else
                  {
                    if (LineFieldInteger < 0 || LineFieldInteger >= *((_DWORD *)this + 14))
                    {
                      uint64_t v954 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                      if (*(_DWORD *)(v954 + 8)) {
                        v957 = *(void **)v954;
                      }
                      else {
                        v957 = &unk_2140A6A10;
                      }
                      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6637, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v955, v956, (char)v957);
                    }
                    DgnPrimArray<unsigned short>::add((unint64_t)&v1055, LineFieldInteger);
                    unsigned int v1019 = v231;
                    unsigned int v1014 = v238;
                    uint64_t v55 = LineFieldUnsigned;
                    unsigned int v1023 = v224;
                  }
                }
                goto LABEL_814;
              }
              if (v1035)
              {
                v871 = v1086 ? v1085 : (const char *)&unk_2140A6A10;
                if (strcmp(v871, "UniSc")
                  && strcmp(v871, "WordIdToLmId")
                  && strcmp(v871, "WordIdToContextLmId")
                  && strcmp(v871, "UniBoSc")
                  && strcmp(v871, "BoWt")
                  && strcmp(v871, "BiScQuant")
                  && strcmp(v871, "BiSc")
                  && strcmp(v871, "TriBoWtQuant")
                  && strcmp(v871, "TriScQuant")
                  && strcmp(v871, "TriBoWt")
                  && strcmp(v871, "TriSc")
                  && strcmp(v871, "QuadBoWtQuant")
                  && strcmp(v871, "QuadScQuant"))
                {
                  uint64_t v872 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                  if (*(_DWORD *)(v872 + 8)) {
                    v875 = *(void **)v872;
                  }
                  else {
                    v875 = &unk_2140A6A10;
                  }
                  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6472, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v873, v874, (char)v875);
                }
              }
              unsigned int v553 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1031, v207, v208, v209, v210, v211, v212);
              unsigned int v1038 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1024, v876, v877, v878, v879, v880, v881);
              if (DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1022, v882, v883, v884, v885, v886, v887))
              {
                uint64_t v888 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                if (*(_DWORD *)(v888 + 8)) {
                  v891 = *(void **)v888;
                }
                else {
                  v891 = &unk_2140A6A10;
                }
                errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6477, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v889, v890, (char)v891);
              }
              int v892 = v1034 & ~v1035;
              if (v892 == 1 && v553 < v1023)
              {
                uint64_t v893 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                if (*(_DWORD *)(v893 + 8)) {
                  v896 = *(void **)v893;
                }
                else {
                  v896 = &unk_2140A6A10;
                }
                errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6481, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v894, v895, (char)v896);
              }
              if (v892 && v553 == v1023 && v1038 <= v1019)
              {
                uint64_t v897 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                if (*(_DWORD *)(v897 + 8)) {
                  v900 = *(void **)v897;
                }
                else {
                  v900 = &unk_2140A6A10;
                }
                errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6485, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v898, v899, (char)v900);
              }
              if (LineFieldUnsigned - 1 >= v1032
                || *(_WORD *)(*((void *)this + 43) + 2 * LineFieldUnsigned) == 20000
                || LineFieldUnsigned >= *v1025)
              {
                uint64_t v901 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                if (*(_DWORD *)(v901 + 8)) {
                  v904 = *(void **)v901;
                }
                else {
                  v904 = &unk_2140A6A10;
                }
                errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6491, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v902, v903, (char)v904);
              }
              if (v553 - 1 >= v1032
                || *(_WORD *)(*((void *)this + 43) + 2 * v553) == 20000
                || v553 > 0xFFFE
                || v553 >= *v1025)
              {
                uint64_t v905 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                if (*(_DWORD *)(v905 + 8)) {
                  v908 = *(void **)v905;
                }
                else {
                  v908 = &unk_2140A6A10;
                }
                errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6498, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v906, v907, (char)v908);
              }
              if (v1038 - 1 >= v1032
                || *(_WORD *)(*((void *)this + 43) + 2 * v1038) == 20000
                || v1038 > 0xFFFE
                || v1038 >= *v1025)
              {
                uint64_t v909 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                if (*(_DWORD *)(v909 + 8)) {
                  v912 = *(void **)v909;
                }
                else {
                  v912 = &unk_2140A6A10;
                }
                errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6505, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v910, v911, (char)v912);
              }
              char v913 = v1035;
              if (LineFieldUnsigned > v1042) {
                char v913 = 1;
              }
              if ((v913 & 1) != 0 || v553 > v1023)
              {
                unsigned int v914 = *(_DWORD *)v1066;
                if (*(_DWORD *)v1066 == *(_DWORD *)&v1066[2])
                {
                  DgnPrimArray<short>::reallocElts((uint64_t)&v1065, 1, 1);
                  unsigned int v914 = *(_DWORD *)v1066;
                }
                *(_WORD *)(v1065 + 2 * v914) = v553;
                *(_DWORD *)v1066 = v914 + 1;
                unsigned int v915 = v1064;
                unsigned int v916 = v1064 + 1;
                if ((v1064 + 1) > HIDWORD(v1064))
                {
                  DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v1063, (v1064 + 1 - HIDWORD(v1064)), 1);
                  unsigned int v915 = v1064;
                  unsigned int v916 = v1064 + 1;
                }
                if (v915 <= v916)
                {
                  if (v915 < v916)
                  {
                    unint64_t v919 = v916 - (unint64_t)v915;
                    uint64_t v920 = 16 * v915;
                    do
                    {
                      v921 = (void *)(v1063 + v920);
                      void *v921 = 0;
                      v921[1] = 0;
                      v920 += 16;
                      --v919;
                    }
                    while (v919);
                  }
                }
                else if ((int)v915 > (int)v916)
                {
                  uint64_t v917 = (int)v915;
                  uint64_t v918 = 16 * (int)v915 - 16;
                  do
                  {
                    --v917;
                    DgnPrimArray<unsigned int>::~DgnPrimArray(v1063 + v918);
                    v918 -= 16;
                  }
                  while (v917 > (int)v916);
                }
                LODWORD(v10DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = v916;
                unsigned int v922 = v1062;
                unsigned int v923 = v1062 + 1;
                if ((v1062 + 1) > HIDWORD(v1062))
                {
                  DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v1061, (v1062 + 1 - HIDWORD(v1062)), 1);
                  unsigned int v922 = v1062;
                  unsigned int v923 = v1062 + 1;
                }
                if (v922 <= v923)
                {
                  if (v922 < v923)
                  {
                    unint64_t v926 = v923 - (unint64_t)v922;
                    uint64_t v927 = 16 * v922;
                    do
                    {
                      v928 = (void *)(v1061 + v927);
                      void *v928 = 0;
                      v928[1] = 0;
                      v927 += 16;
                      --v926;
                    }
                    while (v926);
                  }
                }
                else if ((int)v922 > (int)v923)
                {
                  uint64_t v924 = (int)v922;
                  uint64_t v925 = 16 * (int)v922 - 16;
                  do
                  {
                    --v924;
                    DgnPrimArray<unsigned int>::~DgnPrimArray(v1061 + v925);
                    v925 -= 16;
                  }
                  while (v924 > (int)v923);
                }
                LODWORD(v1062) = v923;
                unsigned int v929 = v1060;
                unsigned int v930 = v1060 + 1;
                if ((v1060 + 1) > HIDWORD(v1060))
                {
                  DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v1059, (v1060 + 1 - HIDWORD(v1060)), 1);
                  unsigned int v929 = v1060;
                  unsigned int v930 = v1060 + 1;
                }
                if (v929 <= v930)
                {
                  if (v929 < v930)
                  {
                    unint64_t v933 = v930 - (unint64_t)v929;
                    uint64_t v934 = 16 * v929;
                    do
                    {
                      v935 = (void *)(v1059 + v934);
                      void *v935 = 0;
                      v935[1] = 0;
                      v934 += 16;
                      --v933;
                    }
                    while (v933);
                  }
                }
                else if ((int)v929 > (int)v930)
                {
                  uint64_t v931 = (int)v929;
                  uint64_t v932 = 16 * (int)v929 - 16;
                  do
                  {
                    --v931;
                    DgnPrimArray<unsigned int>::~DgnPrimArray(v1059 + v932);
                    v932 -= 16;
                  }
                  while (v931 > (int)v930);
                }
                LODWORD(v1060) = v930;
              }
              uint64_t v936 = v1063 + 16 * (v1064 - 1);
              v938 = (unsigned int *)(v936 + 8);
              unsigned int v937 = *(_DWORD *)(v936 + 8);
              if (v937 == *(_DWORD *)(v936 + 12))
              {
                DgnPrimArray<short>::reallocElts(v1063 + 16 * (v1064 - 1), 1, 1);
                unsigned int v937 = *v938;
              }
              *(_WORD *)(*(void *)v936 + 2 * v937) = v1038;
              unsigned int *v938 = v937 + 1;
              signed int v939 = *((_DWORD *)this + 318);
              if (v939)
              {
                if (LineFieldInteger < 1 || LineFieldInteger >= v939)
                {
                  uint64_t v940 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                  if (*(_DWORD *)(v940 + 8)) {
                    v943 = *(void **)v940;
                  }
                  else {
                    v943 = &unk_2140A6A10;
                  }
                  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6531, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v941, v942, (char)v943);
                }
                uint64_t v944 = v1059 + 16 * (v1060 - 1);
                v946 = (unsigned int *)(v944 + 8);
                uint64_t v945 = *(unsigned int *)(v944 + 8);
                if (v945 == *(_DWORD *)(v944 + 12))
                {
                  DgnPrimArray<char>::reallocElts(v1059 + 16 * (v1060 - 1), 1, 1);
                  uint64_t v945 = *v946;
                }
                *(unsigned char *)(*(void *)v944 + v945) = LineFieldInteger;
                unsigned int v947 = *v946;
              }
              else
              {
                signed int v948 = *((_DWORD *)this + 14);
                if (LineFieldInteger <= -v948 || LineFieldInteger >= v948)
                {
                  uint64_t v949 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
                  if (*(_DWORD *)(v949 + 8)) {
                    v952 = *(void **)v949;
                  }
                  else {
                    v952 = &unk_2140A6A10;
                  }
                  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6540, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v950, v951, (char)v952);
                }
                uint64_t v953 = v1061 + 16 * (v1062 - 1);
                v946 = (unsigned int *)(v953 + 8);
                unsigned int v947 = *(_DWORD *)(v953 + 8);
                if (v947 == *(_DWORD *)(v953 + 12))
                {
                  DgnPrimArray<short>::reallocElts(v1061 + 16 * (v1062 - 1), 1, 1);
                  unsigned int v947 = *v946;
                }
                *(_WORD *)(*(void *)v953 + 2 * v947) = LineFieldInteger;
              }
              unsigned int *v946 = v947 + 1;
              unsigned int v1019 = v1038;
              unsigned int v1036 = LineFieldUnsigned;
              goto LABEL_706;
            }
LABEL_814:
            DgnString::operator=((DgnString *)&v1085, (DgnString *)&v1051);
            DgnString::~DgnString((DgnString *)&v1051);
            int v1033 = 0;
            unsigned int v1042 = LineFieldUnsigned;
            uint64_t v54 = v1043;
            continue;
          }
          if (v1035)
          {
            v723 = v1086 ? v1085 : (const char *)&unk_2140A6A10;
            if (strcmp(v723, "UniSc")
              && strcmp(v723, "WordIdToLmId")
              && strcmp(v723, "WordIdToContextLmId")
              && strcmp(v723, "UniBoSc")
              && strcmp(v723, "BoWt")
              && strcmp(v723, "BiScQuant")
              && strcmp(v723, "BiSc")
              && strcmp(v723, "TriBoWtQuant")
              && strcmp(v723, "TriScQuant")
              && strcmp(v723, "TriBoWt"))
            {
              uint64_t v724 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
              if (*(_DWORD *)(v724 + 8)) {
                v727 = *(void **)v724;
              }
              else {
                v727 = &unk_2140A6A10;
              }
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6309, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v725, v726, (char)v727);
            }
          }
          unsigned int v553 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1031, v189, v190, v191, v192, v193, v194);
          unsigned int v740 = DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1024, v728, v729, v730, v731, v732, v733);
          if (*((_DWORD *)this + 16) >= 4u
            && DgnTextFileParser::getLineFieldUnsigned((DgnTextFileParser *)v1093, v1022, v734, v735, v736, v737, v738, v739))
          {
            uint64_t v741 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v741 + 8)) {
              v744 = *(void **)v741;
            }
            else {
              v744 = &unk_2140A6A10;
            }
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6315, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v742, v743, (char)v744);
          }
          int v745 = v1034 & ~v1035;
          if (v745 == 1 && v553 < v1023)
          {
            uint64_t v746 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v746 + 8)) {
              v749 = *(void **)v746;
            }
            else {
              v749 = &unk_2140A6A10;
            }
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6319, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v747, v748, (char)v749);
          }
          if (v745 && v553 == v1023 && v740 <= v1019)
          {
            uint64_t v750 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v750 + 8)) {
              v753 = *(void **)v750;
            }
            else {
              v753 = &unk_2140A6A10;
            }
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6323, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v751, v752, (char)v753);
          }
          if (LineFieldUnsigned - 1 >= v1032
            || *(_WORD *)(*((void *)this + 43) + 2 * LineFieldUnsigned) == 20000
            || LineFieldUnsigned >= *v1025)
          {
            uint64_t v754 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v754 + 8)) {
              v757 = *(void **)v754;
            }
            else {
              v757 = &unk_2140A6A10;
            }
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6329, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v755, v756, (char)v757);
          }
          if (v553 - 1 >= v1032
            || *(_WORD *)(*((void *)this + 43) + 2 * v553) == 20000
            || v553 > 0xFFFE
            || v553 >= *v1025)
          {
            uint64_t v758 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v758 + 8)) {
              v761 = *(void **)v758;
            }
            else {
              v761 = &unk_2140A6A10;
            }
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6336, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v759, v760, (char)v761);
          }
          if (v740 - 1 >= v1032
            || *(_WORD *)(*((void *)this + 21) + 2 * v740) == 20000
            || v740 > 0xFFFE
            || v740 >= *v1025)
          {
            uint64_t v762 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
            if (*(_DWORD *)(v762 + 8)) {
              v765 = *(void **)v762;
            }
            else {
              v765 = &unk_2140A6A10;
            }
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6343, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v763, v764, (char)v765);
          }
          unsigned int v766 = v1072;
          if (v1072 == HIDWORD(v1072))
          {
            DgnPrimArray<short>::reallocElts((uint64_t)&v1071, 1, 1);
            unsigned int v766 = v1072;
          }
          int v1044 = (unsigned __int16)v553;
          *(_WORD *)(v1071 + 2 * v766) = v740;
          LODWORD(v10DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = v766 + 1;
          signed int v767 = *((_DWORD *)this + 196);
          if (v767)
          {
            if (LineFieldInteger < 1 || LineFieldInteger >= v767)
            {
              uint64_t v768 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
              if (*(_DWORD *)(v768 + 8)) {
                v771 = *(void **)v768;
              }
              else {
                v771 = &unk_2140A6A10;
              }
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6362, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v769, v770, (char)v771);
            }
            uint64_t v772 = v1068;
            if (v1068 == (unint64_t)HIDWORD(v1068))
            {
              DgnPrimArray<char>::reallocElts((uint64_t)&v1067, 1, 1);
              uint64_t v772 = v1068;
            }
            *(unsigned char *)(v1067 + v7DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = LineFieldInteger;
            LODWORD(v106DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v1068 + 1;
          }
          else
          {
            if (LineFieldInteger < 0 || LineFieldInteger >= *((_DWORD *)this + 14))
            {
              uint64_t v779 = DgnTextFile::getCurrentLine((DgnTextFile *)v1093);
              if (*(_DWORD *)(v779 + 8)) {
                v782 = *(void **)v779;
              }
              else {
                v782 = &unk_2140A6A10;
              }
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6370, (uint64_t)"lm/wordlm", 40, (uint64_t)"%.500s", v780, v781, (char)v782);
            }
            int v783 = v1070;
            if (v1070 == HIDWORD(v1070))
            {
              DgnPrimArray<short>::reallocElts((uint64_t)&v1069, 1, 1);
              int v783 = v1070;
            }
            v1069[v783] = LineFieldInteger;
            LODWORD(v1070) = v783 + 1;
          }
          unsigned int v1019 = v740;
          uint64_t v1043 = LineFieldUnsigned;
        }
      }
LABEL_706:
      unsigned int v1023 = v553;
      goto LABEL_814;
    }
    break;
  }
  DgnString::~DgnString((DgnString *)&v1051);
  if (v51 != v1029) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6651, (uint64_t)"lm/wordlm", 57, (uint64_t)"%u %u", v963, v964, v51);
  }
  uint64_t v965 = *((unsigned int *)this + 28);
  if (v965 != -1)
  {
    if (!v965
      || v965 > v1032
      || (*((_DWORD *)this + 16) < 2u ? (uint64_t v966 = *((void *)this + 21)) : (uint64_t v966 = *((void *)this + 43)),
          *(_WORD *)(v966 + 2 * v965) == 20000))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6686, (uint64_t)"lm/wordlm", 43, (uint64_t)"%u", v963, v964, *((_DWORD *)this + 28));
    }
  }
  uint64_t v967 = *((unsigned int *)this + 29);
  if (v967 != -1
    && (!v967 || v967 > v1032 || *(_WORD *)(*((void *)this + 21) + 2 * v967) == 20000))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6693, (uint64_t)"lm/wordlm", 44, (uint64_t)"%u", v963, v964, *((_DWORD *)this + 29));
  }
  if (*((_DWORD *)this + 16) >= 2u && v1032)
  {
    unsigned int v968 = 1;
    do
    {
      uint64_t v969 = v968;
      if (*(_WORD *)(*((void *)this + 21) + 2 * v968) != 20000)
      {
        if (*((_DWORD *)this + 84) && *(_WORD *)(*v1020 + 2 * v968) == 20000) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6703, (uint64_t)"lm/wordlm", 41, (uint64_t)"%u", v963, v964, v968);
        }
        if (*(_WORD *)(*((void *)this + 43) + 2 * v969) == 20000) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6705, (uint64_t)"lm/wordlm", 42, (uint64_t)"%u", v963, v964, v969);
        }
      }
      unsigned int v968 = v969 + 1;
    }
    while ((int)v969 + 1 <= v1032);
  }
  WordLanguageModel::throwOnBadBoWt(this, v958, v959, v960, v961, v962, v963, v964);
  WordLanguageModel::throwOnBadTriBoWt(this, v970, v971, v972, v973, v974, v975, v976);
  v1051 = 0;
  unint64_t v1052 = 0;
  unint64_t v979 = *v1025;
  if (!v979)
  {
    LODWORD(v1052) = 0;
    v1049 = 0;
    unint64_t v1050 = 0;
    goto LABEL_1241;
  }
  v1049 = 0;
  unsigned int v980 = realloc_array(0, &v1049, v979, 0, 0, 1);
  unint64_t v1050 = 0;
  v1051 = (const char *)v1049;
  unint64_t v981 = *v1025;
  unint64_t v1052 = __PAIR64__(v980, v979);
  v1049 = 0;
  if (!v981)
  {
LABEL_1241:
    LODWORD(v1050) = 0;
    goto LABEL_1242;
  }
  v1094 = 0;
  unsigned int v982 = realloc_array(0, &v1094, v981, 0, 0, 1);
  v983 = v1094;
  v1049 = v1094;
  uint64_t v984 = *v1025;
  unint64_t v1050 = __PAIR64__(v982, v981);
  if (v984)
  {
    v985 = v1051;
    do
    {
      *v985++ = 0;
      *v983++ = 0;
      --v984;
    }
    while (v984);
  }
LABEL_1242:
  uint64_t v986 = *(unsigned int *)(*((void *)this + 2) + 388);
  unsigned int v987 = *((_DWORD *)this + 32);
  if (!v987)
  {
    unsigned int v987 = *((_DWORD *)this + 36);
    if (!v987) {
      unsigned int v987 = *((_DWORD *)this + 40);
    }
  }
  if (v987 >= v986)
  {
    if (v986) {
      goto LABEL_1249;
    }
  }
  else
  {
    WordLanguageModel::recordWordIdInvalidLmIdUsage(this, v986 - 1);
    if (*((unsigned char *)this + 276)) {
      WordLanguageModel::recordWordIdInvalidContextLmIdUsage(this, v986 - 1);
    }
LABEL_1249:
    unint64_t v988 = 0;
    do
    {
      uint64_t v989 = *((void *)this + 2);
      if (v988 < *(unsigned int *)(v989 + 388))
      {
        if (*(unsigned char *)(*(void *)(v989 + 104) + v988))
        {
          uint64_t v990 = *(unsigned int *)(*(void *)(v989 + 256) + 4 * v988);
          if (v988 != v990)
          {
            if (*((_DWORD *)this + 32))
            {
              uint64_t v991 = *((void *)this + 15);
              int v992 = *(_DWORD *)(v991 + 4 * v988);
              int v993 = *(_DWORD *)(v991 + 4 * v990);
            }
            else
            {
              if (*((_DWORD *)this + 36))
              {
                uint64_t v994 = *((void *)this + 17);
                int v992 = *(unsigned __int16 *)(v994 + 2 * v988);
                if (v992 == 0xFFFF) {
                  int v992 = -1;
                }
                int v993 = *(unsigned __int16 *)(v994 + 2 * v990);
                BOOL v995 = v993 == 0xFFFF;
              }
              else
              {
                uint64_t v996 = *((void *)this + 19);
                int v992 = *(unsigned __int8 *)(v996 + v988);
                if (v992 == 255) {
                  int v992 = -1;
                }
                int v993 = *(unsigned __int8 *)(v996 + v990);
                BOOL v995 = v993 == 255;
              }
              if (v995) {
                int v993 = -1;
              }
            }
            if (v992 != v993) {
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6745, (uint64_t)"lm/wordlm", 46, (uint64_t)"%u %u", v977, v978, v988);
            }
            if (*((unsigned char *)this + 276))
            {
              if (*((_DWORD *)this + 72))
              {
                uint64_t v997 = *((void *)this + 35);
                int v998 = *(_DWORD *)(v997 + 4 * v988);
                int v999 = *(_DWORD *)(v997 + 4 * v990);
              }
              else
              {
                if (*((_DWORD *)this + 76))
                {
                  uint64_t v1000 = *((void *)this + 37);
                  int v998 = *(unsigned __int16 *)(v1000 + 2 * v988);
                  if (v998 == 0xFFFF) {
                    int v998 = -1;
                  }
                  int v999 = *(unsigned __int16 *)(v1000 + 2 * v990);
                  BOOL v1001 = v999 == 0xFFFF;
                }
                else
                {
                  uint64_t v1002 = *((void *)this + 39);
                  int v998 = *(unsigned __int8 *)(v1002 + v988);
                  if (v998 == 255) {
                    int v998 = -1;
                  }
                  int v999 = *(unsigned __int8 *)(v1002 + v990);
                  BOOL v1001 = v999 == 255;
                }
                if (v1001) {
                  int v999 = -1;
                }
              }
              if (v998 != v999) {
                errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6754, (uint64_t)"lm/wordlm", 61, (uint64_t)"%u %u", v977, v978, v988);
              }
            }
          }
        }
      }
      ++v988;
    }
    while (v986 != v988);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v1049);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v1051);
  if (v1015 == 19)
  {
    v1008 = (void **)((char *)this + 1232);
    if (v1021 != 5) {
      goto LABEL_1289;
    }
LABEL_1288:
    WordLanguageModel::maybeAddAlienWordLmId((unint64_t)this, a6, a7, v1091, v1090, v1003, v1004, v1005, v1006, v1007);
    goto LABEL_1289;
  }
  v1008 = (void **)((char *)this + 1232);
  if (v1015 == 24 && (v1021 & 0xFFFFFFFE) == 6) {
    goto LABEL_1288;
  }
LABEL_1289:
  if (*((_DWORD *)this + 18) == -1) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6770, (uint64_t)"lm/wordlm", 98, (uint64_t)"%s", v1006, v1007, (char)&errStr_lm_wordlm_E_WNT_ALIEN_WORD_LMID_NOT_SPECIFIED);
  }
  if (v1015 == 19)
  {
    if (v1021 != 5) {
      goto LABEL_1298;
    }
LABEL_1296:
    if (*((unsigned char *)this + 276))
    {
      *((_DWORD *)this + 19) = *((_DWORD *)this + 18);
      goto LABEL_1298;
    }
    goto LABEL_1301;
  }
  if (v1015 == 24 && v1021 == 6) {
    goto LABEL_1296;
  }
LABEL_1298:
  if (!*((unsigned char *)this + 276)
    || *((_DWORD *)this + 19) == -1
    && (errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6781, (uint64_t)"lm/wordlm", 66, (uint64_t)"%s", v1006, v1007, (char)&errStr_lm_wordlm_E_BAD_HAS_WORDID_TO_CONTEXT_LMID), !*((unsigned char *)this + 276)))
  {
LABEL_1301:
    if (*((_DWORD *)this + 19) != -1) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6783, (uint64_t)"lm/wordlm", 65, (uint64_t)"%s", v1006, v1007, (char)&errStr_lm_wordlm_E_ALIEN_WORD_CONTEXT_LMID_WITHOUT_CONTEXT_LMIDS);
    }
  }
  BigramData::compact((void **)v1027);
  TrigramData::compact((void **)v1048);
  QuadgramData::compact(v1008);
  BOOL v1013 = v1015 == 19 && v1021 == 5;
  WordLanguageModel::maybeRepairOutOfRangeWordIdsOrThrow(this, v1013, a3, a4, a5, v1009, v1010, v1011);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v1053);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v1055);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v1057);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&v1059);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&v1061);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&v1063);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v1065);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v1067);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v1069);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v1071);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v1073);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v1075);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v1077);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v1079);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v1081);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v1083);
  DgnString::~DgnString((DgnString *)&v1085);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v1087);
  DgnArray<DgnString>::releaseAll((uint64_t)&v1088);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v1092);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)v1093);
}

void sub_213FAAB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,char a44,uint64_t a45,char a46,uint64_t a47,char a48,uint64_t a49,char a50,uint64_t a51,char a52,uint64_t a53,char a54,uint64_t a55,char a56,uint64_t a57,char a58,uint64_t a59,char a60,uint64_t a61,char a62,uint64_t a63)
{
  DgnString::~DgnString((DgnString *)&a42);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a44);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a46);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a48);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&a50);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&a52);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&a54);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a56);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a58);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a60);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a62);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a64);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a66);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a68);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a70);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a72);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&STACK[0x208]);
  DgnString::~DgnString((DgnString *)&STACK[0x218]);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&STACK[0x228]);
  DgnArray<DgnString>::releaseAll((uint64_t)&STACK[0x238]);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&STACK[0x258]);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)&STACK[0x268]);
  _Unwind_Resume(a1);
}

void WordLanguageModel::loadBinary(WordLanguageModel *this, DFile *a2, DFileChecksums *a3, int a4, unsigned int a5, unsigned int a6)
{
  uint64_t v84 = 0;
  int v12 = 1;
  uint64_t v15 = (DgnStream *)OpenAndReadMrecHeader((uint64_t)a2, 0x6Fu, 1, "LMWNGBIN", (_DWORD *)&v84 + 1, &v84);
  int v16 = v84;
  BOOL v17 = HIDWORD(v84) == 19 && v84 == 13;
  int v18 = v17;
  unsigned int v77 = a5;
  unsigned int v78 = a6;
  int v76 = a4;
  if (v17)
  {
    int v19 = 0;
    int v20 = 19;
    int v16 = 13;
LABEL_12:
    int v21 = 1;
LABEL_13:
    int v22 = 1;
    goto LABEL_14;
  }
  switch(v84)
  {
    case 0x170000000ELL:
      int v19 = 0;
      int v20 = 23;
      goto LABEL_12;
    case 0x180000000FLL:
      int v12 = 0;
      int v19 = 0;
      int v21 = 1;
LABEL_42:
      int v20 = 24;
      goto LABEL_13;
    case 0x1800000010:
      int v12 = 0;
      int v19 = 1;
      int v20 = 24;
      goto LABEL_12;
    case 0x1800000011:
      int v12 = 0;
      int v21 = 0;
      int v19 = 1;
      goto LABEL_42;
  }
  if (*((_DWORD *)a2 + 6)) {
    uint64_t v75 = (char *)*((void *)a2 + 2);
  }
  else {
    uint64_t v75 = (char *)&unk_2140A6A10;
  }
  MrecHeaderCheckVersions(v75, "LMWNGBIN", HIDWORD(v84), v84, 0x18u, 0x12u);
  int v12 = 0;
  int v21 = 0;
  int v22 = 0;
  int v16 = v84;
  int v20 = HIDWORD(v84);
  int v19 = 1;
LABEL_14:
  MrecHeaderCheckLatestVersionIfShared(a2, "LMWNGBIN", v20, v16, 24, 18, v13, v14);
  if (DFile::subFileExists((uint64_t)a2, 0x73u)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5207, (uint64_t)"lm/wordlm", 84, (uint64_t)"%s", v23, v24, (char)&errStr_lm_wordlm_E_WNS_WNB_MISMATCH);
  }
  unsigned int v83 = 0;
  double v81 = -1.0;
  double v82 = -1.0;
  uint64_t v25 = (_DWORD *)((char *)this + 64);
  readObject((uint64_t)v15, (_DWORD *)this + 16, &v83);
  readObject((uint64_t)v15, (BOOL *)this + 68, &v83);
  if (v22)
  {
    readObject(v15, &v82, &v83);
    readObject(v15, &v81, &v83);
  }
  readObject((uint64_t)v15, (_DWORD *)this + 18, &v83);
  if (v19) {
    readObject((uint64_t)v15, (_DWORD *)this + 19, &v83);
  }
  readObject((uint64_t)v15, (BOOL *)this + 80, &v83);
  if (v21)
  {
    readObject((uint64_t)v15, (_DWORD *)this + 21, &v83);
    readObject((uint64_t)v15, (_DWORD *)this + 22, &v83);
    readObject((uint64_t)v15, (_DWORD *)this + 23, &v83);
    readObject((uint64_t)v15, (_DWORD *)this + 24, &v83);
  }
  readObject((uint64_t)v15, (_DWORD *)this + 25, &v83);
  readObject((uint64_t)v15, (_DWORD *)this + 60, &v83);
  readObject((uint64_t)v15, (BOOL *)this + 244, &v83);
  readObject((uint64_t)v15, (BOOL *)this + 245, &v83);
  unint64_t v80 = 0;
  WordLanguageModel::loadUnigramMembersBinary(this, v15, &v83, v22, &v80);
  unint64_t v79 = 0;
  if (*((_DWORD *)this + 16) >= 2u)
  {
    WordLanguageModel::loadBigramMembersBinary(this, v15, &v83, v22, &v79);
    BigramData::loadBinary((WordLanguageModel *)((char *)this + 360), v15, &v83);
    WordLanguageModel::verifyBoWtForBiSc(this, v26, v27, v28, v29, v30, v31, v32);
    WordLanguageModel::throwOnBadBoWt(this, v33, v34, v35, v36, v37, v38, v39);
    if (v18) {
      WordLanguageModel::verifyUniScForBiSc(this, v40, v41, v42, v43, v44, v45, v46);
    }
    if (*v25 >= 3u)
    {
      TrigramData::loadBinary((WordLanguageModel *)((char *)this + 744), v15, &v83);
      WordLanguageModel::throwOnBadTriBoWt(this, v47, v48, v49, v50, v51, v52, v53);
      if (v18) {
        WordLanguageModel::verifyUniScForTriSc(this, v54, v55, v56, v57, v58, v59, v60);
      }
      if (*v25 >= 4u)
      {
        QuadgramData::loadBinary((WordLanguageModel *)((char *)this + 1232), v15, &v83);
        if (v18) {
          WordLanguageModel::verifyUniScForQuadSc(this, v61, v62, v63, v64, v65, v66, v67);
        }
      }
    }
  }
  unsigned int v68 = v83;
  *((_DWORD *)this + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = v83;
  readObjectChecksumAndVerify(v15, v68);
  uint64_t CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
  DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x6Fu, v83);
  DgnDelete<DgnStream>((void (***)(void))v15);
  if (v12)
  {
    WordLanguageModel::maybeRepairOutOfRangeWordIdsOrThrow(this, 1, v76, v77, v78, v72, v73, v74);
    if (!v22) {
      goto LABEL_33;
    }
LABEL_36:
    WordLanguageModel::maybeAddAlienWordLmId((unint64_t)this, v82, v81, v80, v79, v70, v71, v72, v73, v74);
    if (v19) {
      return;
    }
    goto LABEL_37;
  }
  if (v22) {
    goto LABEL_36;
  }
LABEL_33:
  if (v19) {
    return;
  }
LABEL_37:
  if (*((unsigned char *)this + 276)) {
    *((_DWORD *)this + 19) = *((_DWORD *)this + 18);
  }
}

void WordLanguageModel::loadBinaryShared(uint64_t a1, DgnStream *a2, DFile *a3, uint64_t a4, unsigned int a5, int a6)
{
  if (a3)
  {
    LODWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
    LODWORD(v15) = 0;
    if (a5 == 112) {
      int v12 = "LMWNGDYN";
    }
    else {
      int v12 = "LMWNGBIN";
    }
    uint64_t v13 = (void (***)(void))OpenAndReadMrecHeader((uint64_t)a3, a5, 1, v12, &v16, &v15);
    DgnDelete<DgnStream>(v13);
  }
  unsigned int v17 = 0;
  unint64_t v16 = 0;
  if (a6)
  {
    readObject((uint64_t)a2, (_DWORD *)(a1 + 64), &v17);
    readObject((uint64_t)a2, (BOOL *)(a1 + 68), &v17);
    readObject((uint64_t)a2, (_DWORD *)(a1 + 72), &v17);
    readObject((uint64_t)a2, (_DWORD *)(a1 + 76), &v17);
    readObject((uint64_t)a2, (BOOL *)(a1 + 80), &v17);
    readObject((uint64_t)a2, (_DWORD *)(a1 + 100), &v17);
    readObject((uint64_t)a2, (_DWORD *)(a1 + 240), &v17);
    readObject((uint64_t)a2, (BOOL *)(a1 + 244), &v17);
    readObject((uint64_t)a2, (BOOL *)(a1 + 245), &v17);
    WordLanguageModel::loadUnigramMembersBinary((WordLanguageModel *)a1, a2, &v17, 0, &v16);
    unint64_t v15 = 0;
    if (*(_DWORD *)(a1 + 64) <= 1u)
    {
LABEL_14:
      readObject((uint64_t)a2, (_DWORD *)(a1 + 1824), &v17);
      goto LABEL_15;
    }
    WordLanguageModel::loadBigramMembersBinary((WordLanguageModel *)a1, a2, &v17, 0, &v15);
  }
  else
  {
    unint64_t v15 = 0;
    if (*(_DWORD *)(a1 + 64) <= 1u) {
      goto LABEL_15;
    }
  }
  BigramData::loadBinaryShared((BigramData *)(a1 + 360), a2, a6, &v17);
  if (*(_DWORD *)(a1 + 64) >= 3u)
  {
    TrigramData::loadBinaryShared((TrigramData *)(a1 + 744), a2, a6, &v17);
    if (*(_DWORD *)(a1 + 64) >= 4u) {
      QuadgramData::loadBinaryShared((QuadgramData *)(a1 + 1232), a2, a6, &v17);
    }
  }
  if (a6) {
    goto LABEL_14;
  }
LABEL_15:
  readObjectChecksumAndVerify(a2, v17);
  if (a3)
  {
    uint64_t CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a3);
    DFileChecksums::addChecksum(a4, CurrentSubDirComponents, a5, *(_DWORD *)(a1 + 1824));
  }
}

void WordLanguageModel::loadDynamic(WordLanguageModel *this, DFile *a2, DFile *a3, DFileChecksums *a4, int a5, int a6, BOOL *a7, BOOL *a8, BOOL a9, unsigned int a10, unsigned int a11)
{
  uint64_t v66 = 0;
  int v19 = 1;
  int v22 = (DgnStream *)OpenAndReadMrecHeader((uint64_t)a2, 0x70u, 1, "LMWNGDYN", (_DWORD *)&v66 + 1, &v66);
  int v23 = v66;
  BOOL v24 = HIDWORD(v66) == 19 && v66 == 12;
  int v25 = v24;
  int v59 = a5;
  int v60 = v25;
  uint64_t v58 = a8;
  if (v24)
  {
    int v26 = 0;
    int v27 = 19;
    int v23 = 12;
LABEL_17:
    int v28 = 1;
    goto LABEL_18;
  }
  switch(v66)
  {
    case 0x180000000DLL:
      int v26 = 0;
LABEL_16:
      int v27 = 24;
      goto LABEL_17;
    case 0x180000000ELL:
LABEL_15:
      int v26 = 1;
      goto LABEL_16;
    case 0x180000000FLL:
      int v19 = 0;
      goto LABEL_15;
  }
  if (*((_DWORD *)a2 + 6)) {
    uint64_t v57 = (char *)*((void *)a2 + 2);
  }
  else {
    uint64_t v57 = (char *)&unk_2140A6A10;
  }
  MrecHeaderCheckVersions(v57, "LMWNGDYN", HIDWORD(v66), v66, 0x18u, 0x10u);
  int v19 = 0;
  int v28 = 0;
  int v23 = v66;
  int v27 = HIDWORD(v66);
  int v26 = 1;
LABEL_18:
  MrecHeaderCheckLatestVersionIfShared(a2, "LMWNGDYN", v27, v23, 24, 16, v20, v21);
  if (DFile::subFileExists((uint64_t)a2, 0x73u)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 8772, (uint64_t)"lm/wordlm", 85, (uint64_t)"%s", v29, v30, (char)&errStr_lm_wordlm_E_WNS_WND_PRESENCE_MISMATCH);
  }
  unsigned int v65 = 0;
  double v63 = -1.0;
  double v64 = -1.0;
  readObject((uint64_t)v22, (_DWORD *)this + 16, &v65);
  readObject((uint64_t)v22, (BOOL *)this + 68, &v65);
  if (v28)
  {
    readObject(v22, &v64, &v65);
    readObject(v22, &v63, &v65);
  }
  readObject((uint64_t)v22, (_DWORD *)this + 18, &v65);
  if (v26) {
    readObject((uint64_t)v22, (_DWORD *)this + 19, &v65);
  }
  readObject((uint64_t)v22, (BOOL *)this + 80, &v65);
  if (v19)
  {
    readObject((uint64_t)v22, (_DWORD *)this + 21, &v65);
    readObject((uint64_t)v22, (_DWORD *)this + 22, &v65);
    readObject((uint64_t)v22, (_DWORD *)this + 23, &v65);
    readObject((uint64_t)v22, (_DWORD *)this + 24, &v65);
  }
  readObject((uint64_t)v22, (_DWORD *)this + 25, &v65);
  readObject((uint64_t)v22, (_DWORD *)this + 60, &v65);
  readObject((uint64_t)v22, (BOOL *)this + 244, &v65);
  readObject((uint64_t)v22, (BOOL *)this + 245, &v65);
  unsigned int v33 = *((_DWORD *)this + 16);
  if (v33 >= 2 && !a3 && *((unsigned char *)this + 245) && a6)
  {
    char v34 = 1;
    *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 1;
    *((unsigned char *)this + 6DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 1;
    *((_DWORD *)this + 60) = -1;
    *((_DWORD *)this + 19) = -1;
    *((_WORD *)this + 122) = 0;
    *(void *)((char *)this + 92) = 0;
    *(void *)((char *)this + 84) = 0;
    *a7 = 1;
    if (!*((unsigned char *)this + 245))
    {
      unint64_t v62 = 0;
      WordLanguageModel::loadUnigramMembersBinary(this, v22, &v65, v28, &v62);
      unint64_t v61 = 0;
      goto LABEL_37;
    }
LABEL_34:
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 8810, (uint64_t)"lm/wordlm", 6, (uint64_t)"%s", v31, v32, (char)&errStr_lm_wordlm_E_NO_STATIC_VOC);
    char v35 = v34;
    goto LABEL_35;
  }
  if (!*((unsigned char *)this + 245))
  {
    uint64_t v36 = *((void *)this + 5);
    goto LABEL_40;
  }
  char v34 = 0;
  char v35 = 0;
  if (!a3) {
    goto LABEL_34;
  }
LABEL_35:
  uint64_t v36 = (*(uint64_t (**)(DFile *))(*(void *)a3 + 88))(a3);
  *((void *)this + 5) = v36;
  if (v35)
  {
    unint64_t v62 = 0;
    WordLanguageModel::loadUnigramMembersBinary(this, v22, &v65, v28, &v62);
    unint64_t v61 = 0;
    if (v33 < 2)
    {
LABEL_38:
      unsigned int v39 = v65;
      *((_DWORD *)this + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = v65;
      readObjectChecksumAndVerify(v22, v39);
      uint64_t CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
      DFileChecksums::addChecksum((uint64_t)a4, CurrentSubDirComponents, 0x70u, v65);
      DgnDelete<DgnStream>((void (***)(void))v22);
      goto LABEL_53;
    }
LABEL_37:
    uint64_t v37 = MemChunkAlloc(0x728uLL, 0);
    WordLanguageModel::WordLanguageModel((WordLanguageModel *)v37, *((_DWORD *)this + 8), *((const WordList **)this + 2));
    WordLanguageModel::loadBigramMembersBinary(v38, v22, &v65, v28, &v61);
    DgnDelete<LanguageModel>((void (***)(void))v37);
    goto LABEL_38;
  }
LABEL_40:
  if (!v36 || (DFile::subFileExists(v36, 0x72u) & 1) == 0) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 8817, (uint64_t)"lm/wordlm", 18, (uint64_t)"%s", v31, v32, (char)&errStr_lm_wordlm_E_WND_WITH_NO_WNP_FILE);
  }
  uint64_t v46 = *((void *)this + 5);
  if (!v46 || (DFile::subFileExists(v46, 0x71u) & 1) == 0) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 8820, (uint64_t)"lm/wordlm", 19, (uint64_t)"%s", v31, v32, (char)&errStr_lm_wordlm_E_WND_WITH_NO_WNI_FILE);
  }
  unint64_t v62 = 0;
  WordLanguageModel::loadUnigramMembersBinary(this, v22, &v65, v28, &v62);
  unint64_t v61 = 0;
  if (*((_DWORD *)this + 16) >= 2u) {
    WordLanguageModel::loadBigramMembersBinary(this, v22, &v65, v28, &v61);
  }
  unsigned int v47 = v65;
  *((_DWORD *)this + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = v65;
  readObjectChecksumAndVerify(v22, v47);
  uint64_t v48 = DFile::getCurrentSubDirComponents(a2);
  DFileChecksums::addChecksum((uint64_t)a4, v48, 0x70u, v65);
  DgnDelete<DgnStream>((void (***)(void))v22);
  int PersistentAndIndex = WordLanguageModel::loadPersistentAndIndex(this);
  if (v59)
  {
    int v50 = PersistentAndIndex;
    WordLanguageModel::reabsorbStaticLM(this);
    BOOL *v58 = 1;
    if (v50)
    {
      WordLanguageModel::verifyUniScForBiSc(this, v51, v52, v41, v42, v43, v44, v45);
      if (*((_DWORD *)this + 16) >= 3u)
      {
        WordLanguageModel::verifyUniScForTriSc(this, v53, v54, v41, v42, v43, v44, v45);
        if (*((_DWORD *)this + 16) >= 4u) {
          WordLanguageModel::verifyUniScForQuadSc(this, v55, v56, v41, v42, v43, v44, v45);
        }
      }
    }
  }
LABEL_53:
  if (v60)
  {
    WordLanguageModel::maybeRepairOutOfRangeWordIdsOrThrow(this, 1, a9, a10, a11, v43, v44, v45);
    if (!v28) {
      goto LABEL_55;
    }
LABEL_58:
    WordLanguageModel::maybeAddAlienWordLmId((unint64_t)this, v64, v63, v62, v61, v41, v42, v43, v44, v45);
    if (v26) {
      return;
    }
    goto LABEL_59;
  }
  if (v28) {
    goto LABEL_58;
  }
LABEL_55:
  if (v26) {
    return;
  }
LABEL_59:
  if (*((unsigned char *)this + 276)) {
    *((_DWORD *)this + 19) = *((_DWORD *)this + 18);
  }
}

void WordLanguageModel::checkWordListLMAgreement(WordLanguageModel *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(unsigned int *)(*((void *)this + 2) + 388);
  int v10 = *((_DWORD *)this + 32);
  if (!v10)
  {
    int v10 = *((_DWORD *)this + 36);
    if (!v10) {
      int v10 = *((_DWORD *)this + 40);
    }
  }
  if (v9 != v10) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 9191, (uint64_t)"lm/wordlm", 49, (uint64_t)"%u %u", a7, a8, *(_DWORD *)(*((void *)this + 2) + 388));
  }
  if (v9)
  {
    for (unint64_t i = 0; i != v9; ++i)
    {
      uint64_t v12 = *((void *)this + 2);
      if (i < *(unsigned int *)(v12 + 388) && *(unsigned char *)(*(void *)(v12 + 104) + i))
      {
        if (*((_DWORD *)this + 32))
        {
          uint64_t v13 = *((void *)this + 15);
          int v14 = *(_DWORD *)(v13 + 4 * i);
          int v15 = *(_DWORD *)(v13 + 4 * *(unsigned int *)(*(void *)(v12 + 256) + 4 * i));
        }
        else
        {
          uint64_t v16 = *(unsigned int *)(*(void *)(v12 + 256) + 4 * i);
          if (*((_DWORD *)this + 36))
          {
            uint64_t v17 = *((void *)this + 17);
            if (*(unsigned __int16 *)(v17 + 2 * i) == 0xFFFF) {
              int v14 = -1;
            }
            else {
              int v14 = *(unsigned __int16 *)(v17 + 2 * i);
            }
            int v15 = *(unsigned __int16 *)(v17 + 2 * v16);
            BOOL v18 = v15 == 0xFFFF;
          }
          else
          {
            uint64_t v19 = *((void *)this + 19);
            if (*(unsigned __int8 *)(v19 + i) == 255) {
              int v14 = -1;
            }
            else {
              int v14 = *(unsigned __int8 *)(v19 + i);
            }
            int v15 = *(unsigned __int8 *)(v19 + v16);
            BOOL v18 = v15 == 255;
          }
          if (v18) {
            int v15 = -1;
          }
        }
        if (v14 != v15) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 9205, (uint64_t)"lm/wordlm", 8, (uint64_t)"%.500s %u %.500s %u %u %u", a7, a8, *(void *)(v12 + 224) + *(unsigned char *)(*(void *)(v12 + 200) + 4 * i));
        }
      }
      if (*((unsigned char *)this + 276))
      {
        uint64_t v20 = *((void *)this + 2);
        if (i < *(unsigned int *)(v20 + 388))
        {
          if (*(unsigned char *)(*(void *)(v20 + 104) + i))
          {
            if (*((_DWORD *)this + 72))
            {
              uint64_t v21 = *((void *)this + 35);
              int v22 = *(_DWORD *)(v21 + 4 * i);
              int v23 = *(_DWORD *)(v21 + 4 * *(unsigned int *)(*(void *)(v20 + 256) + 4 * i));
            }
            else
            {
              uint64_t v24 = *(unsigned int *)(*(void *)(v20 + 256) + 4 * i);
              if (*((_DWORD *)this + 76))
              {
                uint64_t v25 = *((void *)this + 37);
                if (*(unsigned __int16 *)(v25 + 2 * i) == 0xFFFF) {
                  int v22 = -1;
                }
                else {
                  int v22 = *(unsigned __int16 *)(v25 + 2 * i);
                }
                int v23 = *(unsigned __int16 *)(v25 + 2 * v24);
                BOOL v26 = v23 == 0xFFFF;
              }
              else
              {
                uint64_t v27 = *((void *)this + 39);
                if (*(unsigned __int8 *)(v27 + i) == 255) {
                  int v22 = -1;
                }
                else {
                  int v22 = *(unsigned __int8 *)(v27 + i);
                }
                int v23 = *(unsigned __int8 *)(v27 + v24);
                BOOL v26 = v23 == 255;
              }
              if (v26) {
                int v23 = -1;
              }
            }
            if (v22 != v23) {
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 9220, (uint64_t)"lm/wordlm", 62, (uint64_t)"%.500s %u %.500s %u %u %u", a7, a8, *(void *)(v20 + 224) + *(unsigned char *)(*(void *)(v20 + 200) + 4 * i));
            }
          }
        }
      }
    }
  }
}

uint64_t WordLanguageModel::getTotalPreloadableBytes(WordLanguageModel *this)
{
  uint64_t v1 = *((void *)this + 31);
  uint64_t v2 = *((void *)this + 29);
  if (v2) {
    v1 += (*(uint64_t (**)(uint64_t))(*(void *)v2 + 32))(v2);
  }
  return v1;
}

uint64_t WordLanguageModel::computeTotalPreloadableBytes(WordLanguageModel *this)
{
  if (*((unsigned char *)this + 68)) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = WordLanguageModel::computeLocalPreloadableBytes(this);
  }
  uint64_t v3 = *((void *)this + 29);
  if (v3) {
    v2 += (*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  return v2;
}

uint64_t WordLanguageModel::computeLocalPreloadableBytes(WordLanguageModel *this)
{
  if (*((_DWORD *)this + 16) < 2u) {
    return 0;
  }
  uint64_t v2 = BigramData::computeLocalPreloadableBytes((WordLanguageModel *)((char *)this + 360));
  if (*((_DWORD *)this + 16) >= 3u)
  {
    v2 += TrigramData::computeLocalPreloadableBytes((WordLanguageModel *)((char *)this + 744));
    if (*((_DWORD *)this + 16) >= 4u) {
      v2 += QuadgramData::computeLocalPreloadableBytes((WordLanguageModel *)((char *)this + 1232));
    }
  }
  return v2;
}

uint64_t WordLanguageModel::preloadBigramsAndTrigrams(uint64_t a1, unsigned int a2, uint64_t *a3, unsigned int *a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10 = 0;
  v23[0] = 0;
  v23[1] = 0;
  v22[0] = 0;
  v22[1] = 0;
  v21[0] = 0;
  v21[1] = 0;
  v20[0] = 0;
  v20[1] = 0;
  uint64_t v11 = *a3;
  do
  {
    if (*(_DWORD *)(v11 + 16 * v10 + 8))
    {
      unint64_t v12 = 0;
      do
      {
        int v13 = *(_DWORD *)(*(void *)(v11 + 16 * v10) + 4 * v12);
        unsigned int v14 = v13 & 0xE0000000;
        unsigned int v15 = v13 & 0x1FFFFFFF;
        if ((v13 & 0xE0000000) == 0x80000000)
        {
          WordLanguageModel::preloadTrigramRecord(a1, v15, (uint64_t)v23, v22, v21, (uint64_t)v20);
        }
        else if (v14 == 0x40000000)
        {
          WordLanguageModel::preloadBigramRecord(a1, v15, (uint64_t)v23, v22, v21, (uint64_t)v20);
        }
        else
        {
          if (v14 == -1610612736) {
            goto LABEL_13;
          }
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 4100, (uint64_t)"lm/wordlm", 71, (uint64_t)"%u", a7, a8, 0);
        }
        ++v12;
        uint64_t v11 = *a3;
      }
      while (v12 < *(unsigned int *)(*a3 + 16 * v10 + 8));
    }
    ++v10;
  }
  while (v10 <= a2);
  LODWORD(v12) = 0;
LABEL_13:
  *a4 = v10;
  *a5 = v12;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v20);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v21);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v22);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v23);
}

void sub_213FABEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v12 = va_arg(va3, void);
  uint64_t v14 = va_arg(va3, void);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va3);
  _Unwind_Resume(a1);
}

void WordLanguageModel::preloadBigramRecord(uint64_t a1, unsigned int a2, uint64_t a3, __int16 **a4, void *a5, uint64_t a6)
{
  WordLanguageModel::readBigramRecord(a1, a2, a3, (uint64_t)a4, (uint64_t)a5, a6);
  uint64_t v11 = (BigramData *)(a1 + 360);
  BigramData::bi1SetEmpty((uint64_t)v11, a2);

  BigramData::fillBigramRecordPreload(v11, a2, a3, a4, a5);
}

uint64_t WordLanguageModel::preloadTrigramRecord(uint64_t a1, unsigned int a2, uint64_t a3, __int16 **a4, void *a5, uint64_t a6)
{
  WordLanguageModel::readTrigramRecord(a1, a2, a3, (uint64_t)a4, (uint64_t)a5, a6);
  uint64_t v11 = (TrigramData *)(a1 + 744);
  TrigramData::tri2SetUnallocated((uint64_t)v11, a2);

  return TrigramData::fillTrigramRecordPreload(v11, a2, a3, a4, a5);
}

uint64_t WordLanguageModel::preloadQuadgrams(uint64_t a1, unsigned int a2, uint64_t *a3, unsigned int a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v26[0] = 0;
  v26[1] = 0;
  v25[0] = 0;
  v25[1] = 0;
  v24[0] = 0;
  v24[1] = 0;
  v23[0] = 0;
  v23[1] = 0;
  v22[0] = 0;
  v22[1] = 0;
  v21[0] = 0;
  v21[1] = 0;
  v20[0] = 0;
  v20[1] = 0;
  v19[0] = 0;
  v19[1] = 0;
  v18[0] = 0;
  v18[1] = 0;
  v17[0] = 0;
  v17[1] = 0;
  if (a4 <= a2)
  {
    unint64_t v10 = a5;
    uint64_t v11 = *a3;
    do
    {
      uint64_t v12 = a4;
      for (uint64_t i = v11 + 16 * a4; v10 < *(unsigned int *)(i + 8); uint64_t i = *a3 + 16 * v12)
      {
        int v14 = *(_DWORD *)(*(void *)(v11 + 16 * v12) + 4 * v10);
        if ((v14 & 0xE0000000) == 0xA0000000) {
          WordLanguageModel::preloadQuadgramRecord(a1, v14 & 0x1FFFFFFF, (uint64_t)v26, (uint64_t)v25, v24, (uint64_t)v23, v22, v21, v20, (uint64_t)v19, (uint64_t)v18, (uint64_t)v17);
        }
        else {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 4150, (uint64_t)"lm/wordlm", 71, (uint64_t)"%u", a7, a8, 0);
        }
        ++v10;
        uint64_t v11 = *a3;
      }
      unint64_t v10 = 0;
      a4 = v12 + 1;
    }
    while ((int)v12 + 1 <= a2);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v17);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v18);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v19);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v20);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v21);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v22);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v23);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v24);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v25);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v26);
}

void sub_213FAC180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a14);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a16);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a18);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a20);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a22);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a24);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a26);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v26 - 136);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v26 - 120);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v26 - 104);
  _Unwind_Resume(a1);
}

unint64_t WordLanguageModel::preloadQuadgramRecord(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, void *a7, void *a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  WordLanguageModel::readQuadgramRecord(a1, a2, a3, a4, (uint64_t)a5, a6, (uint64_t)a7, (uint64_t)a8, (uint64_t)a9, a10, a11, a12);
  uint64_t v19 = a1 + 1232;
  QuadgramData::quad2SetUnallocated(a1 + 1232, a2);
  unint64_t result = QuadgramData::allocQuad2(a1 + 1232, a2, *(unsigned __int16 *)(a3 + 8));
  uint64_t v50 = a4;
  int v21 = *(_DWORD *)(a4 + 8);
  if (*(_DWORD *)(a1 + 1256))
  {
    if (v21)
    {
      unint64_t v22 = 0;
      uint64_t v48 = a2 >> 5;
      int v23 = 1 << a2;
      do
      {
        uint64_t v24 = *(unsigned int *)(*(void *)(a1 + 1480) + 4 * a2);
        if (*(_DWORD *)(a1 + 1232) && (*(_DWORD *)(*(void *)(a1 + 1344) + 4 * v48) & v23) != 0)
        {
          LODWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = *(_DWORD *)(*(void *)(a1 + 1656) + 4 * v24);
          uint64_t v25 = (void *)(a1 + 1672);
        }
        else
        {
          uint64_t v25 = (void *)(a1 + 1496);
        }
        *(_WORD *)(*v25 + 2 * (v22 + vBitArray::~BitArray((BigramData *)((char *)this + 24)) = *(_WORD *)(*(void *)v50 + 2 * v22);
        unint64_t result = QuadgramData::allocScoresForIndex(a1 + 1232, a2, v22, *(unsigned __int16 *)(*(void *)a3 + 2 * v22));
        uint64_t v26 = *(unsigned int *)(*(void *)(a1 + 1480) + 4 * a2);
        if (*(_DWORD *)(a1 + 1232) && (*(_DWORD *)(*(void *)(a1 + 1344) + 4 * v48) & v23) != 0)
        {
          LODWORD(v26) = *(_DWORD *)(*(void *)(a1 + 1656) + 4 * v26);
          uint64_t v27 = (void *)(a1 + 1704);
        }
        else
        {
          uint64_t v27 = (void *)(a1 + 1544);
        }
        *(unsigned char *)(*v27 + (v22 + v26)) = *(unsigned char *)(*a7 + v22);
        ++v22;
        unint64_t v28 = *(unsigned int *)(v50 + 8);
      }
      while (v22 < v28);
      goto LABEL_26;
    }
LABEL_25:
    unint64_t v28 = 0;
    goto LABEL_26;
  }
  if (!v21) {
    goto LABEL_25;
  }
  unint64_t v29 = 0;
  unsigned int v47 = (void *)a6;
  uint64_t v49 = a2 >> 5;
  int v30 = 1 << a2;
  uint64_t v31 = *(unsigned int *)(*(void *)(a1 + 1480) + 4 * a2);
  int v32 = *(_DWORD *)(a1 + 1232);
  do
  {
    if (v32 && (*(_DWORD *)(*(void *)(a1 + 1344) + 4 * v49) & v30) != 0)
    {
      LODWORD(v31) = *(_DWORD *)(*(void *)(a1 + 1656) + 4 * v31);
      unsigned int v33 = (void *)(a1 + 1672);
    }
    else
    {
      unsigned int v33 = (void *)(a1 + 1496);
    }
    *(_WORD *)(*v33 + 2 * (v29 + v31)) = *(_WORD *)(*(void *)a4 + 2 * v29);
    unint64_t result = QuadgramData::allocScoresForIndex(a1 + 1232, a2, v29, *(unsigned __int16 *)(*(void *)a3 + 2 * v29));
    uint64_t v31 = *(unsigned int *)(*(void *)(a1 + 1480) + 4 * a2);
    int v32 = *(_DWORD *)(a1 + 1232);
    int v34 = *(_DWORD *)(*(void *)(a1 + 1480) + 4 * a2);
    char v35 = (void *)(a1 + 1528);
    if (v32)
    {
      int v34 = *(_DWORD *)(*(void *)(a1 + 1480) + 4 * a2);
      char v35 = (void *)(a1 + 1528);
      if ((*(_DWORD *)(*(void *)(a1 + 1344) + 4 * v49) & v30) != 0)
      {
        int v34 = *(_DWORD *)(*(void *)(a1 + 1656) + 4 * v31);
        char v35 = (void *)(a1 + 1688);
      }
    }
    *(_WORD *)(*v35 + 2 * (v29 + v34)) = *(_WORD *)(*v47 + 2 * v29);
    ++v29;
    unint64_t v28 = *(unsigned int *)(a4 + 8);
  }
  while (v29 < v28);
LABEL_26:
  if (*(_DWORD *)(a1 + 1272))
  {
    if (v28)
    {
      unint64_t v36 = 0;
      int v37 = 0;
      uint64_t v38 = *(void *)a3;
      do
      {
        LODWORD(v39) = *(unsigned __int16 *)(v38 + 2 * v36);
        if (*(_WORD *)(v38 + 2 * v36))
        {
          unint64_t v40 = 0;
          do
          {
            QuadgramData::setQuad3SuccIdForIndex(v19, a2, v36, v40, *(_WORD *)(*a5 + 2 * (v37 + v40)));
            unint64_t result = QuadgramData::setQuantizedScoreForIndex(v19, a2, v36, v40, *(unsigned char *)(*a9 + (v37 + v40)));
            ++v40;
            uint64_t v38 = *(void *)a3;
            unint64_t v39 = *(unsigned __int16 *)(*(void *)a3 + 2 * v36);
          }
          while (v40 < v39);
          unint64_t v28 = *(unsigned int *)(v50 + 8);
        }
        v37 += v39;
        ++v36;
      }
      while (v36 < v28);
    }
  }
  else if (v28)
  {
    unint64_t v41 = 0;
    int v42 = 0;
    uint64_t v43 = *(void *)a3;
    do
    {
      LODWORD(v44) = *(unsigned __int16 *)(v43 + 2 * v41);
      if (*(_WORD *)(v43 + 2 * v41))
      {
        unint64_t v45 = 0;
        do
        {
          QuadgramData::setQuad3SuccIdForIndex(v19, a2, v41, v45, *(_WORD *)(*a5 + 2 * (v42 + v45)));
          unint64_t result = QuadgramData::setScoreForIndex(v19, a2, v41, v45, *(_WORD *)(*a8 + 2 * (v42 + v45)));
          ++v45;
          uint64_t v43 = *(void *)a3;
          unint64_t v44 = *(unsigned __int16 *)(*(void *)a3 + 2 * v41);
        }
        while (v45 < v44);
        unint64_t v28 = *(unsigned int *)(v50 + 8);
      }
      v42 += v44;
      ++v41;
    }
    while (v41 < v28);
  }
  return result;
}

void WordLanguageModel::finalizeLM(uint64_t a1, LanguageModel *a2, DFile *a3, DFileChecksums *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10, uint64_t a11, unsigned __int8 a12, unint64_t a13, unint64_t a14)
{
  uint64_t v14 = a8;
  uint64_t v15 = a7;
  if (*(void *)(a1 + 232))
  {
    v47[0] = 1;
    DFile::pushCurrentSubDirComponent(a3, (const SubDirExtension *)v47, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    BYTE4(v33) = a10;
    LODWORD(v33) = a9;
    (*(void (**)(void, LanguageModel *, DFile *, DFileChecksums *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8, unint64_t, unint64_t))(**(void **)(a1 + 232) + 48))(*(void *)(a1 + 232), a2, a3, a4, a5, a6, v15, v14, v33, a11, a12, a13, a14);
    DFile::popCurrentSubDirComponent((uint64_t)a3);
    int v20 = (*(uint64_t (**)(void))(**(void **)(a1 + 232) + 696))();
    if (v20 != (*(unsigned int (**)(uint64_t))(*(void *)a1 + 696))(a1)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 4216, (uint64_t)"lm/wordlm", 68, (uint64_t)"%s", v21, v22, (char)&errStr_lm_wordlm_E_BACKOFF_MISMATCHED_ENDLMID);
    }
  }
  int v34 = a6;
  if (a14)
  {
    if (!a5)
    {
      if (*(void *)(a1 + 248))
      {
        LODWORD(v23) = 1000;
        if ((a14 & 0x8000000000000000) != 0 || a14 > a13 || (unint64_t v23 = 1000 * a14 / a13, v23))
        {
          (*(void (**)(void, void))(**(void **)(a1 + 224) + 24))(*(void *)(a1 + 224), *(unsigned int *)(a1 + 256));
          v47[0] = 0;
          v47[1] = 0;
          v46[0] = 0;
          v46[1] = 0;
          v45[0] = 0;
          v45[1] = 0;
          v44[0] = 0;
          v44[1] = 0;
          v43[0] = 0;
          v43[1] = 0;
          v42[0] = 0;
          v42[1] = 0;
          v41[0] = 0;
          v41[1] = 0;
          unsigned int v40 = 0;
          readObject<unsigned int>(*(RealDFileSubFileStream **)(a1 + 224), (uint64_t)v47, &v40);
          readObject<unsigned int>(*(RealDFileSubFileStream **)(a1 + 224), (uint64_t)v46, &v40);
          readObject<unsigned int>(*(RealDFileSubFileStream **)(a1 + 224), (uint64_t)v45, &v40);
          readObject<unsigned int>(*(RealDFileSubFileStream **)(a1 + 224), (uint64_t)v44, &v40);
          readObject<unsigned int>(*(RealDFileSubFileStream **)(a1 + 224), (uint64_t)v43, &v40);
          readObject<unsigned int>(*(RealDFileSubFileStream **)(a1 + 224), (uint64_t)v42, &v40);
          readObject<unsigned int>(*(RealDFileSubFileStream **)(a1 + 224), (uint64_t)v41, &v40);
          unsigned int v24 = 0;
          uint64_t v38 = 0;
          uint64_t v39 = 0;
          do
          {
            uint64_t v25 = v39;
            if (v39 == (unint64_t)HIDWORD(v39))
            {
              DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v38, 1, 1);
              uint64_t v25 = v39;
            }
            uint64_t v26 = (void *)(v38 + 16 * v25);
            *uint64_t v26 = 0;
            v26[1] = 0;
            LODWORD(v39) = v39 + 1;
            readObject<unsigned int>(*(RealDFileSubFileStream **)(a1 + 224), v38 + 16 * v24++, &v40);
          }
          while (v24 <= v23);
          (*(void (**)(void, void))(**(void **)(a1 + 224) + 24))(*(void *)(a1 + 224), *(unsigned int *)(a1 + 260));
          BigramData::preAllocateDynamicBigramData(a1 + 360, *(_DWORD *)(v46[0] + 4 * v23), *(_DWORD *)(v45[0] + 4 * v23));
          TrigramData::preAllocateDynamicTrigramData(a1 + 744, *(_DWORD *)(v44[0] + 4 * v23), *(_DWORD *)(v43[0] + 4 * v23));
          QuadgramData::preAllocateDynamicQuadgramData(a1 + 1232, *(_DWORD *)(v42[0] + 4 * v23), *(_DWORD *)(v41[0] + 4 * v23));
          uint64_t v37 = 0;
          WordLanguageModel::preloadBigramsAndTrigrams(a1, v23, &v38, (unsigned int *)&v37 + 1, &v37, v27, v28, v29);
          BigramData::compact((void **)(a1 + 360));
          TrigramData::compact((void **)(a1 + 744));
          WordLanguageModel::preloadQuadgrams(a1, v23, &v38, HIDWORD(v37), v37, v30, v31, v32);
          (*(void (**)(void, void))(**(void **)(a1 + 40) + 64))(*(void *)(a1 + 40), 0);
          QuadgramData::compact((void **)(a1 + 1232));
          DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&v38);
          uint64_t v15 = v15;
          uint64_t v14 = v14;
          DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v41);
          DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v42);
          DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v43);
          DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v44);
          DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v45);
          DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v46);
          DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v47);
        }
      }
    }
  }
  BYTE4(v33) = a10;
  LODWORD(v33) = a9;
  LanguageModel::finalizeLM(a1, a2, a3, a4, a5, v34, v15, v14, v33, a11, a12);
}

void sub_213FACA64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30)
{
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&a23);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a26);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a28);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a30);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v30 - 152);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v30 - 136);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v30 - 120);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v30 - 104);
  _Unwind_Resume(a1);
}

void readObject<unsigned int>(RealDFileSubFileStream *a1, uint64_t a2, unsigned int *a3)
{
  unsigned int v8 = 0;
  readObject(a1, &v8, a3);
  unsigned int v6 = v8;
  unsigned int v7 = *(_DWORD *)(a2 + 12);
  if (v8 > v7) {
    DgnPrimArray<unsigned int>::reallocElts(a2, v8 - v7, 0);
  }
  *(_DWORD *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v6;
  readObjectArray((char **)a1, *(char **)a2, v6, a3);
}

uint64_t WordLanguageModel::canSaveAsText(WordLanguageModel *this)
{
  uint64_t v2 = *((void *)this + 29);
  if (!v2) {
    return *((void *)this + 5) == 0;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 64))(v2);
  if (result) {
    return *((void *)this + 5) == 0;
  }
  return result;
}

RecentBuffer *WordLanguageModel::saveLM(RecentBuffer **this, DFile *a2, DFileChecksums *a3, uint64_t a4, DFileChecksums *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 16) < 2u
    || *((unsigned char *)this + 244)
    && (uint64_t v14 = 1,
        DFile::pushCurrentSubDirComponent(a2, (const SubDirExtension *)&v14, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8),
        (*(void (**)(RecentBuffer *, DFile *, DFileChecksums *, uint64_t, DFileChecksums *))(*(void *)this[29] + 72))(this[29], a2, a3, a4, a5), DFile::popCurrentSubDirComponent((uint64_t)a2), *((_DWORD *)this + 16) < 2u)|| !this[28])
  {
    if (a4)
    {
      WordLanguageModel::saveWns((WordLanguageModel *)this, a2, this[5] != 0, (int)a5);
      WordLanguageModel::saveText((WordLanguageModel *)this, a2, (int)a5);
    }
    else
    {
      WordLanguageModel::saveBinary((WordLanguageModel *)this, a2, a3, (int)a5);
    }
  }
  else
  {
    WordLanguageModel::saveDynamic((WordLanguageModel *)this, a2, a3, (int)a5);
  }
  uint64_t result = this[1];
  if (result) {
    return (RecentBuffer *)RecentBuffer::saveRecentBuffer(result, a2, a3, a4, a5);
  }
  return result;
}

void (***WordLanguageModel::saveDynamic(WordLanguageModel *this, DFile *a2, DFileChecksums *a3, int a4))(void)
{
  unsigned int v7 = OpenAndWriteMrecHeader((uint64_t)a2, 0x70u, a4, "LMWNGDYN", 24, 16);
  unsigned int v11 = 0;
  writeObject((uint64_t)v7, (int *)this + 16, &v11);
  writeObject((uint64_t)v7, (unsigned __int8 *)this + 68, &v11);
  writeObject((uint64_t)v7, (int *)this + 18, &v11);
  writeObject((uint64_t)v7, (int *)this + 19, &v11);
  writeObject((uint64_t)v7, (unsigned __int8 *)this + 80, &v11);
  writeObject((uint64_t)v7, (int *)this + 25, &v11);
  writeObject((uint64_t)v7, (int *)this + 60, &v11);
  writeObject((uint64_t)v7, (unsigned __int8 *)this + 244, &v11);
  unsigned __int8 v10 = 1;
  writeObject((uint64_t)v7, &v10, &v11);
  WordLanguageModel::saveUnigramMembersBinary(this, v7, &v11);
  if (*((_DWORD *)this + 16) >= 2u) {
    WordLanguageModel::saveBigramMembersBinary(this, v7, &v11);
  }
  writeObjectChecksum((uint64_t)v7, (int *)&v11);
  uint64_t CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
  DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x70u, v11);
  return DgnDelete<DgnStream>((void (***)(void))v7);
}

void WordLanguageModel::saveWns(WordLanguageModel *this, DFile *a2, unsigned int a3, int a4)
{
  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v21);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v21, (uint64_t)a2, 0x73u, a4);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v21, sWNS_Versions, (uint64_t)&v19, v8, v9, v10, v11, v12);
  DgnTextFileWriter::setFileType((uint64_t)v21, "WordNGramSpec", (void *)(v19 + 8 * (v20 - 1)));
  v18[0] = 0;
  v18[1] = 0;
  v17[0] = 0;
  v17[1] = 0;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v21, (uint64_t)v18, (uint64_t)v17);
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v21, "Depth", *((unsigned int *)this + 16));
  DgnTextFileWriter::setHeaderFieldInteger((DgnTextFileWriter *)v21, "AlienWordLmId", *((_DWORD *)this + 18));
  DgnTextFileWriter::setHeaderFieldBool((DgnTextFileWriter *)v21, "AllowNewWordCloning", *((unsigned __int8 *)this + 80));
  DgnTextFileWriter::setHeaderFieldInteger((DgnTextFileWriter *)v21, "IgnoreInContextLmId", *((_DWORD *)this + 25));
  if (*((_DWORD *)this + 16) >= 2u)
  {
    DgnTextFileWriter::setHeaderFieldInteger((DgnTextFileWriter *)v21, "UnknownContextLmId", *((_DWORD *)this + 60));
    DgnTextFileWriter::setHeaderFieldInteger((DgnTextFileWriter *)v21, "AlienWordContextLmId", *((_DWORD *)this + 19));
    if (*((void *)this + 29))
    {
      DgnString::DgnString((DgnString *)&v15);
      uint64_t v14 = 1;
      SubDirExtension::appendToString((DgnString *)&v14, (DgnString *)&v15);
      if (v16) {
        int v13 = v15;
      }
      else {
        int v13 = (const char *)&unk_2140A6A10;
      }
      DgnTextFileWriter::setHeaderField((DgnTextFileWriter *)v21, "BackoffSubDirectory", v13);
      DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v21, "BackoffAfterDepth", 2);
      DgnString::~DgnString((DgnString *)&v15);
    }
    DgnTextFileWriter::setHeaderFieldBool((DgnTextFileWriter *)v21, "HasStaticComponentOnDisk", a3);
    DgnTextFileWriter::setHeaderFieldBool((DgnTextFileWriter *)v21, "LoadNgrams", *((unsigned __int8 *)this + 68));
  }
  DgnArray<DgnString>::releaseAll((uint64_t)v17);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v18);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v19);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v21);
}

void sub_213FAD01C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va4, a2);
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void);
  uint64_t v8 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v9 = va_arg(va3, void);
  uint64_t v11 = va_arg(va3, void);
  va_copy(va4, va3);
  uint64_t v12 = va_arg(va4, void);
  uint64_t v14 = va_arg(va4, void);
  DgnString::~DgnString((DgnString *)va);
  DgnArray<DgnString>::releaseAll((uint64_t)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va2);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va3);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)va4);
  _Unwind_Resume(a1);
}

void WordLanguageModel::saveText(WordLanguageModel *this, DFile *a2, int a3)
{
  DgnTextFileWriter::DgnTextFileWriter((DgnTextFileWriter *)v193);
  DgnTextFileWriter::openDgnTextFileWriter((uint64_t)v193, (uint64_t)a2, 0x74u, a3);
  uint64_t v191 = 0;
  uint64_t v192 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v193, sWNT_Versions, (uint64_t)&v191, v6, v7, v8, v9, v10);
  DgnTextFileWriter::setFileType((uint64_t)v193, "WordNGramText", (void *)(v191 + 8 * (v192 - 1)));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v193, "Depth", *((unsigned int *)this + 16));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v193, "LMScale", *((unsigned int *)this + 8));
  DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v193, "NumLmIds", *((unsigned int *)this + 26));
  DgnTextFileWriter::setHeaderFieldInteger((DgnTextFileWriter *)v193, "BegLmId", *((_DWORD *)this + 28));
  DgnTextFileWriter::setHeaderFieldInteger((DgnTextFileWriter *)v193, "EndLmId", *((_DWORD *)this + 29));
  if (*((_DWORD *)this + 16) >= 2u)
  {
    DgnTextFileWriter::setHeaderFieldUnsigned((DgnTextFileWriter *)v193, "ContextSkipDistance", *((unsigned int *)this + 68));
    DgnTextFileWriter::setHeaderFieldBool((DgnTextFileWriter *)v193, "HasWordIdToContextLmId", *((unsigned __int8 *)this + 276));
  }
  uint64_t v189 = 0;
  uint64_t v190 = 0;
  uint64_t v187 = 0;
  uint64_t v188 = 0;
  DgnString::DgnString((DgnString *)&v185, "TableName");
  unsigned int v11 = v190;
  if (v190 == HIDWORD(v190))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v189, 1, 1);
    unsigned int v11 = v190;
  }
  DgnString::DgnString((DgnString *)(v189 + 16 * v11), (const DgnString *)&v185);
  LODWORD(v190) = v190 + 1;
  DgnString::~DgnString((DgnString *)&v185);
  unsigned int v12 = v188;
  if (v188 == HIDWORD(v188))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v187, 1, 1);
    unsigned int v12 = v188;
  }
  *(_DWORD *)(v187 + 4 * v12) = 0;
  LODWORD(v1HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 88) = v12 + 1;
  unsigned int v178 = v190;
  DgnString::DgnString((DgnString *)&v185, "Index1");
  unsigned int v13 = v190;
  if (v190 == HIDWORD(v190))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v189, 1, 1);
    unsigned int v13 = v190;
  }
  DgnString::DgnString((DgnString *)(v189 + 16 * v13), (const DgnString *)&v185);
  LODWORD(v190) = v190 + 1;
  DgnString::~DgnString((DgnString *)&v185);
  unsigned int v14 = v188;
  if (v188 == HIDWORD(v188))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v187, 1, 1);
    unsigned int v14 = v188;
  }
  *(_DWORD *)(v187 + 4 * v14) = 3;
  LODWORD(v1HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 88) = v14 + 1;
  unsigned int v15 = v190;
  unsigned int v179 = v190;
  unsigned int v16 = v190;
  unsigned int v177 = v190;
  if (*((_DWORD *)this + 16) >= 2u)
  {
    DgnString::DgnString((DgnString *)&v185, "Index2");
    unsigned int v17 = v190;
    if (v190 == HIDWORD(v190))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v189, 1, 1);
      unsigned int v17 = v190;
    }
    DgnString::DgnString((DgnString *)(v189 + 16 * v17), (const DgnString *)&v185);
    LODWORD(v190) = v190 + 1;
    DgnString::~DgnString((DgnString *)&v185);
    unsigned int v18 = v188;
    if (v188 == HIDWORD(v188))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v187, 1, 1);
      unsigned int v18 = v188;
    }
    *(_DWORD *)(v187 + 4 * v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 3;
    LODWORD(v1HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 88) = v18 + 1;
    unsigned int v15 = v190;
    if (*((_DWORD *)this + 16) < 3u)
    {
      unsigned int v179 = v190;
      unsigned int v16 = v190;
    }
    else
    {
      DgnString::DgnString((DgnString *)&v185, "Index3");
      unsigned int v19 = v190;
      if (v190 == HIDWORD(v190))
      {
        DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v189, 1, 1);
        unsigned int v19 = v190;
      }
      DgnString::DgnString((DgnString *)(v189 + 16 * v19), (const DgnString *)&v185);
      LODWORD(v190) = v190 + 1;
      DgnString::~DgnString((DgnString *)&v185);
      unsigned int v20 = v188;
      if (v188 == HIDWORD(v188))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v187, 1, 1);
        unsigned int v20 = v188;
      }
      *(_DWORD *)(v187 + 4 * v20) = 3;
      LODWORD(v1HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 88) = v20 + 1;
      unsigned int v16 = v190;
      if (*((_DWORD *)this + 16) < 4u)
      {
        unsigned int v179 = v190;
      }
      else
      {
        DgnString::DgnString((DgnString *)&v185, "Index4");
        unsigned int v21 = v190;
        if (v190 == HIDWORD(v190))
        {
          DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v189, 1, 1);
          unsigned int v21 = v190;
        }
        DgnString::DgnString((DgnString *)(v189 + 16 * v21), (const DgnString *)&v185);
        LODWORD(v190) = v190 + 1;
        DgnString::~DgnString((DgnString *)&v185);
        unsigned int v22 = v188;
        if (v188 == HIDWORD(v188))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v187, 1, 1);
          unsigned int v22 = v188;
        }
        *(_DWORD *)(v187 + 4 * v22) = 3;
        LODWORD(v1HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 88) = v22 + 1;
        unsigned int v179 = v190;
      }
    }
  }
  DgnString::DgnString((DgnString *)&v185, "EntryValue1");
  unsigned int v23 = v190;
  if (v190 == HIDWORD(v190))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v189, 1, 1);
    unsigned int v23 = v190;
  }
  DgnString::DgnString((DgnString *)(v189 + 16 * v23), (const DgnString *)&v185);
  LODWORD(v190) = v190 + 1;
  DgnString::~DgnString((DgnString *)&v185);
  unsigned int v24 = v188;
  if (v188 == HIDWORD(v188))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v187, 1, 1);
    unsigned int v24 = v188;
  }
  *(_DWORD *)(v187 + 4 * vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = 1;
  LODWORD(v1HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 88) = v24 + 1;
  DgnTextFileWriter::setLineFieldFormat((uint64_t)v193, (uint64_t)&v187, (uint64_t)&v189);
  unint64_t v25 = *((unsigned int *)this + 44);
  if (v25 >= 2)
  {
    for (unint64_t i = 1; i < v25; ++i)
    {
      int v27 = *(unsigned __int16 *)(*((void *)this + 21) + 2 * i);
      if (v27 != 20000)
      {
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v193, 0, "UniSc");
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v178, i);
        if (*((_DWORD *)this + 16) >= 2u)
        {
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v177, 0);
          if (*((_DWORD *)this + 16) >= 3u)
          {
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v15, 0);
            if (*((_DWORD *)this + 16) >= 4u) {
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v16, 0);
            }
          }
        }
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v179, v27);
        DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v193);
        unint64_t v25 = *((unsigned int *)this + 44);
      }
    }
  }
  unint64_t v28 = *((unsigned int *)this + 32);
  if (v28)
  {
    for (unint64_t j = 0; j < v28; ++j)
    {
      int v30 = *(_DWORD *)(*((void *)this + 15) + 4 * j);
      if (v30 != -1)
      {
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v193, 0, "WordIdToLmId");
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v178, j);
        if (*((_DWORD *)this + 16) >= 2u)
        {
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v177, 0);
          if (*((_DWORD *)this + 16) >= 3u)
          {
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v15, 0);
            if (*((_DWORD *)this + 16) >= 4u) {
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v16, 0);
            }
          }
        }
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v179, v30);
        DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v193);
        unint64_t v28 = *((unsigned int *)this + 32);
      }
    }
  }
  else
  {
    unint64_t v31 = *((unsigned int *)this + 36);
    if (v31)
    {
      for (unint64_t k = 0; k < v31; ++k)
      {
        int v33 = *(unsigned __int16 *)(*((void *)this + 17) + 2 * k);
        if (v33 != 0xFFFF)
        {
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v193, 0, "WordIdToLmId");
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v178, k);
          if (*((_DWORD *)this + 16) >= 2u)
          {
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v177, 0);
            if (*((_DWORD *)this + 16) >= 3u)
            {
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v15, 0);
              if (*((_DWORD *)this + 16) >= 4u) {
                DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v16, 0);
              }
            }
          }
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v179, v33);
          DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v193);
          unint64_t v31 = *((unsigned int *)this + 36);
        }
      }
    }
    else
    {
      unint64_t v34 = *((unsigned int *)this + 40);
      if (v34)
      {
        for (unint64_t m = 0; m < v34; ++m)
        {
          int v36 = *(unsigned __int8 *)(*((void *)this + 19) + m);
          if (v36 != 255)
          {
            DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v193, 0, "WordIdToLmId");
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v178, m);
            if (*((_DWORD *)this + 16) >= 2u)
            {
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v177, 0);
              if (*((_DWORD *)this + 16) >= 3u)
              {
                DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v15, 0);
                if (*((_DWORD *)this + 16) >= 4u) {
                  DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v16, 0);
                }
              }
            }
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v179, v36);
            DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v193);
            unint64_t v34 = *((unsigned int *)this + 40);
          }
        }
      }
    }
  }
  unsigned int v176 = v15;
  if (*((_DWORD *)this + 16) >= 2u)
  {
    if (*((unsigned char *)this + 276))
    {
      unint64_t v37 = *((unsigned int *)this + 72);
      if (v37)
      {
        for (unint64_t n = 0; n < v37; ++n)
        {
          int v39 = *(_DWORD *)(*((void *)this + 35) + 4 * n);
          if (v39 != -1)
          {
            DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v193, 0, "WordIdToContextLmId");
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v178, n);
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v177, 0);
            if (*((_DWORD *)this + 16) >= 3u)
            {
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v15, 0);
              if (*((_DWORD *)this + 16) >= 4u) {
                DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v16, 0);
              }
            }
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v179, v39);
            DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v193);
            unint64_t v37 = *((unsigned int *)this + 72);
          }
        }
      }
      else
      {
        unint64_t v40 = *((unsigned int *)this + 76);
        if (v40)
        {
          for (iunint64_t i = 0; ii < v40; ++ii)
          {
            int v42 = *(unsigned __int16 *)(*((void *)this + 37) + 2 * ii);
            if (v42 != 0xFFFF)
            {
              DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v193, 0, "WordIdToContextLmId");
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v178, ii);
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v177, 0);
              if (*((_DWORD *)this + 16) >= 3u)
              {
                DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v15, 0);
                if (*((_DWORD *)this + 16) >= 4u) {
                  DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v16, 0);
                }
              }
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v179, v42);
              DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v193);
              unint64_t v40 = *((unsigned int *)this + 76);
            }
          }
        }
        else
        {
          unint64_t v43 = *((unsigned int *)this + 80);
          if (v43)
          {
            for (junint64_t j = 0; jj < v43; ++jj)
            {
              int v45 = *(unsigned __int8 *)(*((void *)this + 39) + jj);
              if (v45 != 255)
              {
                DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v193, 0, "WordIdToContextLmId");
                DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v178, jj);
                DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v177, 0);
                if (*((_DWORD *)this + 16) >= 3u)
                {
                  DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v15, 0);
                  if (*((_DWORD *)this + 16) >= 4u) {
                    DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v16, 0);
                  }
                }
                DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v179, v45);
                DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v193);
                unint64_t v43 = *((unsigned int *)this + 80);
              }
            }
          }
        }
      }
    }
    unint64_t v46 = *((unsigned int *)this + 84);
    if (v46 >= 2)
    {
      for (kunint64_t k = 1; kk < v46; ++kk)
      {
        int v48 = *(unsigned __int16 *)(*((void *)this + 41) + 2 * kk);
        if (v48 != 20000)
        {
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v193, 0, "UniBoSc");
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v178, kk);
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v177, 0);
          if (*((_DWORD *)this + 16) >= 3u)
          {
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v15, 0);
            if (*((_DWORD *)this + 16) >= 4u) {
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v16, 0);
            }
          }
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v179, v48);
          DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v193);
          unint64_t v46 = *((unsigned int *)this + 84);
        }
      }
    }
    unint64_t v49 = *((unsigned int *)this + 88);
    if (v49 >= 2)
    {
      for (munint64_t m = 1; mm < v49; ++mm)
      {
        int v51 = *(__int16 *)(*((void *)this + 43) + 2 * mm);
        if (v51 != 20000)
        {
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v193, 0, "BoWt");
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v178, mm);
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v177, 0);
          if (*((_DWORD *)this + 16) >= 3u)
          {
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v15, 0);
            if (*((_DWORD *)this + 16) >= 4u) {
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v16, 0);
            }
          }
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v193, v179, v51);
          DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v193);
          unint64_t v49 = *((unsigned int *)this + 88);
        }
      }
    }
    if (*((_DWORD *)this + 94) >= 2u)
    {
      unint64_t v52 = 1;
      do
      {
        int v53 = *(unsigned __int16 *)(*((void *)this + 46) + 2 * v52);
        DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v193, 0, "BiScQuant");
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v178, v52);
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v177, 0);
        if (*((_DWORD *)this + 16) >= 3u)
        {
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v15, 0);
          if (*((_DWORD *)this + 16) >= 4u) {
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v16, 0);
          }
        }
        DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v179, v53);
        DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v193);
        ++v52;
      }
      while (v52 < *((unsigned int *)this + 94));
    }
    unsigned int v175 = v16;
    uint64_t v185 = 0;
    uint64_t v186 = 0;
    uint64_t v183 = 0;
    uint64_t v184 = 0;
    uint64_t v181 = 0;
    uint64_t v182 = 0;
    uint64_t v54 = this;
    uint64_t v180 = this;
    if (*((_DWORD *)this + 140) >= 2u)
    {
      uint64_t v55 = (WordLanguageModel *)((char *)this + 360);
      unint64_t v56 = 1;
      do
      {
        LODWORD(v186) = 0;
        LODWORD(v184) = 0;
        LODWORD(v182) = 0;
        if ((*(_DWORD *)(*((void *)v54 + 48) + 4 * (v56 >> 5)) >> v56))
        {
          uint64_t v57 = this;
          if (*(_WORD *)(*((void *)v54 + 69) + 2 * v56))
          {
            unsigned __int16 v58 = 1;
            do
            {
              int v59 = *((_DWORD *)v57 + 94);
              int v60 = v58 - 1;
              uint64_t v61 = (*(_DWORD *)(*((void *)v57 + 67) + 4 * v56) + v60);
              if (v59)
              {
                uint64_t v61 = *(unsigned __int8 *)(*((void *)v57 + 73) + v61);
                uint64_t v62 = *((void *)v57 + 46);
              }
              else
              {
                uint64_t v62 = *((void *)v57 + 71);
              }
              int v63 = *(unsigned __int16 *)(v62 + 2 * v61);
              if (v63 != 20000)
              {
                unsigned int v64 = v186;
                if (v186 == HIDWORD(v186))
                {
                  DgnPrimArray<short>::reallocElts((uint64_t)&v185, 1, 1);
                  unsigned int v64 = v186;
                  int v59 = *((_DWORD *)this + 94);
                }
                *(_WORD *)(v185 + 2 * vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = v58;
                LODWORD(v186) = v64 + 1;
                if (v59)
                {
                  char v65 = *(unsigned char *)(*((void *)this + 73)
                                 + (*(_DWORD *)(*((void *)this + 67) + 4 * v56) + v60));
                  uint64_t v66 = v182;
                  if (v182 == (unint64_t)HIDWORD(v182))
                  {
                    DgnPrimArray<char>::reallocElts((uint64_t)&v181, 1, 1);
                    uint64_t v66 = v182;
                  }
                  *(unsigned char *)(v181 + v66) = v65;
                  unsigned int v67 = v182;
                  unsigned int v68 = &v182;
                }
                else
                {
                  unsigned int v67 = v184;
                  if (v184 == HIDWORD(v184))
                  {
                    DgnPrimArray<short>::reallocElts((uint64_t)&v183, 1, 1);
                    unsigned int v67 = v184;
                  }
                  *(_WORD *)(v183 + 2 * v67) = v63;
                  unsigned int v68 = &v184;
                }
                *(_DWORD *)unsigned int v68 = v67 + 1;
              }
              ++v58;
              uint64_t v57 = this;
            }
            while (*(unsigned __int16 *)(*((void *)this + 69) + 2 * v56) >= v58);
          }
        }
        else if (*(_WORD *)(*((void *)v54 + 69) + 2 * v56))
        {
          unsigned int v69 = 0;
          do
          {
            __int16 SearchSuccIdForIndex = BigramData::getSearchSuccIdForIndex(v55, v56, v69);
            int SearchScoreForIndex = BigramData::getSearchScoreForIndex(v55, v56, v69);
            __int16 v72 = SearchScoreForIndex;
            if (SearchScoreForIndex != 20000)
            {
              unsigned int v73 = v186;
              if (v186 == HIDWORD(v186))
              {
                DgnPrimArray<short>::reallocElts((uint64_t)&v185, 1, 1);
                unsigned int v73 = v186;
              }
              *(_WORD *)(v185 + 2 * v73) = SearchSuccIdForIndex;
              LODWORD(v186) = v73 + 1;
              if (*((_DWORD *)this + 94))
              {
                char SearchQuantizedScoreForIndex = BigramData::getSearchQuantizedScoreForIndex(v55, v56, v69);
                uint64_t v75 = v182;
                if (v182 == (unint64_t)HIDWORD(v182))
                {
                  DgnPrimArray<char>::reallocElts((uint64_t)&v181, 1, 1);
                  uint64_t v75 = v182;
                }
                *(unsigned char *)(v181 + v75) = SearchQuantizedScoreForIndex;
                unsigned int v76 = v182;
                unsigned int v77 = &v182;
              }
              else
              {
                unsigned int v76 = v184;
                if (v184 == HIDWORD(v184))
                {
                  DgnPrimArray<short>::reallocElts((uint64_t)&v183, 1, 1);
                  unsigned int v76 = v184;
                }
                *(_WORD *)(v183 + 2 * v76) = v72;
                unsigned int v77 = &v184;
              }
              *(_DWORD *)unsigned int v77 = v76 + 1;
            }
            ++v69;
          }
          while (v69 < *(unsigned __int16 *)(*((void *)this + 69) + 2 * v56));
        }
        if (v186)
        {
          unint64_t v78 = 0;
          do
          {
            if (*((_DWORD *)this + 94)) {
              int v79 = *(unsigned __int8 *)(v181 + v78);
            }
            else {
              int v79 = *(unsigned __int16 *)(v183 + 2 * v78);
            }
            int v80 = *(unsigned __int16 *)(v185 + 2 * v78);
            DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v193, 0, "BiSc");
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v178, v56);
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v177, v80);
            if (*((_DWORD *)this + 16) >= 3u)
            {
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v15, 0);
              if (*((_DWORD *)this + 16) >= 4u) {
                DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v175, 0);
              }
            }
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v179, v79);
            DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v193);
            ++v78;
          }
          while (v78 < v186);
        }
        ++v56;
        uint64_t v54 = this;
      }
      while (v56 < *((unsigned int *)this + 140));
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v181);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v183);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v185);
    unsigned int v81 = v175;
    if (*((_DWORD *)v54 + 16) >= 3u)
    {
      double v82 = v54;
      if (*((_DWORD *)v54 + 192) >= 2u)
      {
        unint64_t v83 = 1;
        do
        {
          int v84 = *(__int16 *)(*((void *)v54 + 95) + 2 * v83);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v193, 0, "TriBoWtQuant");
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v178, v83);
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v177, 0);
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v15, 0);
          if (*((_DWORD *)v54 + 16) >= 4u) {
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v175, 0);
          }
          DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v193, v179, v84);
          DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v193);
          ++v83;
        }
        while (v83 < *((unsigned int *)v54 + 192));
      }
      if (*((_DWORD *)v54 + 196) >= 2u)
      {
        unint64_t v85 = 1;
        do
        {
          int v86 = *(unsigned __int16 *)(*((void *)v54 + 97) + 2 * v85);
          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v193, 0, "TriScQuant");
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v178, v85);
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v177, 0);
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v15, 0);
          if (*((_DWORD *)v54 + 16) >= 4u) {
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v175, 0);
          }
          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v179, v86);
          DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v193);
          ++v85;
        }
        while (v85 < *((unsigned int *)v54 + 196));
      }
      unint64_t v87 = *((unsigned int *)v54 + 200);
      if (v87 >= 2)
      {
        for (nunint64_t n = 1; nn < v87; ++nn)
        {
          uint64_t v89 = *((void *)v82 + 99);
          int v90 = *(unsigned __int16 *)(v89 + 2 * nn);
          if (*(_WORD *)(v89 + 2 * nn))
          {
            int v91 = 0;
            do
            {
              uint64_t v92 = (v91 + *(_DWORD *)(*((void *)v180 + 101) + 4 * nn));
              int v93 = *(unsigned __int16 *)(*((void *)v180 + 103) + 2 * v92);
              DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v193, 0, "TriBoWt");
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v178, nn);
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v177, v93);
              DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v176, 0);
              if (*((_DWORD *)v180 + 16) >= 4u) {
                DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v175, 0);
              }
              if (*((_DWORD *)v180 + 192)) {
                DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v179, *(unsigned __int8 *)(*((void *)v180 + 107) + v92));
              }
              else {
                DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v193, v179, *(__int16 *)(*((void *)v180 + 105) + 2 * v92));
              }
              DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v193);
              ++v91;
            }
            while (v90 != v91);
            double v82 = v180;
            unint64_t v87 = *((unsigned int *)v180 + 200);
          }
        }
      }
      uint64_t v185 = 0;
      uint64_t v186 = 0;
      uint64_t v183 = 0;
      uint64_t v184 = 0;
      uint64_t v181 = 0;
      uint64_t v182 = 0;
      if (v87 >= 2)
      {
        uint64_t v94 = (WordLanguageModel *)((char *)v82 + 744);
        for (unint64_t i1 = 1; i1 < v87; ++i1)
        {
          int v167 = *(unsigned __int16 *)(*((void *)v82 + 99) + 2 * i1);
          if (*(_WORD *)(*((void *)v82 + 99) + 2 * i1))
          {
            int v96 = 0;
            do
            {
              uint64_t v97 = v82;
              int v169 = v96;
              uint64_t v98 = (*(_DWORD *)(*((void *)v82 + 101) + 4 * i1) + v96);
              int v99 = *(unsigned __int16 *)(*((void *)v97 + 103) + 2 * v98);
              LODWORD(v186) = 0;
              LODWORD(v184) = 0;
              LODWORD(v182) = 0;
              if ((*(_DWORD *)(*((void *)v97 + 109) + 4 * (v98 >> 5)) >> v98))
              {
                uint64_t v100 = v180;
                if (*(_WORD *)(*((void *)v97 + 130) + 2 * v98))
                {
                  unsigned __int16 v101 = 1;
                  do
                  {
                    int v102 = *((_DWORD *)v100 + 196);
                    int v103 = v101 - 1;
                    uint64_t v104 = (*(_DWORD *)(*((void *)v100 + 128) + 4 * v98) + v103);
                    if (v102)
                    {
                      uint64_t v104 = *(unsigned __int8 *)(*((void *)v100 + 134) + v104);
                      uint64_t v105 = *((void *)v100 + 97);
                    }
                    else
                    {
                      uint64_t v105 = *((void *)v100 + 132);
                    }
                    int v106 = *(unsigned __int16 *)(v105 + 2 * v104);
                    if (v106 != 20000)
                    {
                      unsigned int v107 = v186;
                      if (v186 == HIDWORD(v186))
                      {
                        DgnPrimArray<short>::reallocElts((uint64_t)&v185, 1, 1);
                        unsigned int v107 = v186;
                        int v102 = *((_DWORD *)v180 + 196);
                      }
                      *(_WORD *)(v185 + 2 * v107) = v101;
                      LODWORD(v186) = v107 + 1;
                      if (v102)
                      {
                        char v108 = *(unsigned char *)(*((void *)v180 + 134)
                                        + (*(_DWORD *)(*((void *)v180 + 128) + 4 * v98) + v103));
                        uint64_t v109 = v182;
                        if (v182 == (unint64_t)HIDWORD(v182))
                        {
                          DgnPrimArray<char>::reallocElts((uint64_t)&v181, 1, 1);
                          uint64_t v109 = v182;
                        }
                        *(unsigned char *)(v181 + v109) = v108;
                        unsigned int v110 = v182;
                        uint64_t v111 = &v182;
                      }
                      else
                      {
                        unsigned int v110 = v184;
                        if (v184 == HIDWORD(v184))
                        {
                          DgnPrimArray<short>::reallocElts((uint64_t)&v183, 1, 1);
                          unsigned int v110 = v184;
                        }
                        *(_WORD *)(v183 + 2 * v110) = v106;
                        uint64_t v111 = &v184;
                      }
                      *(_DWORD *)uint64_t v111 = v110 + 1;
                    }
                    ++v101;
                    uint64_t v100 = v180;
                  }
                  while (*(unsigned __int16 *)(*((void *)v180 + 130) + 2 * v98) >= v101);
                }
              }
              else
              {
                uint64_t v100 = v180;
                if (*(_WORD *)(*((void *)v97 + 130) + 2 * v98))
                {
                  unsigned int v112 = 0;
                  do
                  {
                    __int16 v113 = TrigramData::getSearchSuccIdForIndex(v94, v98, v112);
                    int v114 = TrigramData::getSearchScoreForIndex(v94, v98, v112);
                    __int16 v115 = v114;
                    if (v114 != 20000)
                    {
                      unsigned int v116 = v186;
                      if (v186 == HIDWORD(v186))
                      {
                        DgnPrimArray<short>::reallocElts((uint64_t)&v185, 1, 1);
                        unsigned int v116 = v186;
                      }
                      *(_WORD *)(v185 + 2 * v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v113;
                      LODWORD(v186) = v116 + 1;
                      if (*((_DWORD *)v180 + 196))
                      {
                        char v117 = TrigramData::getSearchQuantizedScoreForIndex(v94, v98, v112);
                        uint64_t v118 = v182;
                        if (v182 == (unint64_t)HIDWORD(v182))
                        {
                          DgnPrimArray<char>::reallocElts((uint64_t)&v181, 1, 1);
                          uint64_t v118 = v182;
                        }
                        *(unsigned char *)(v181 + v11DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v117;
                        unsigned int v119 = v182;
                        int v120 = &v182;
                      }
                      else
                      {
                        unsigned int v119 = v184;
                        if (v184 == HIDWORD(v184))
                        {
                          DgnPrimArray<short>::reallocElts((uint64_t)&v183, 1, 1);
                          unsigned int v119 = v184;
                        }
                        *(_WORD *)(v183 + 2 * v119) = v115;
                        int v120 = &v184;
                      }
                      *(_DWORD *)int v120 = v119 + 1;
                    }
                    ++v112;
                    uint64_t v100 = v180;
                  }
                  while (v112 < *(unsigned __int16 *)(*((void *)v180 + 130) + 2 * v98));
                }
              }
              double v82 = v100;
              if (v186)
              {
                unint64_t v121 = 0;
                do
                {
                  if (*((_DWORD *)v82 + 196)) {
                    int v122 = *(unsigned __int8 *)(v181 + v121);
                  }
                  else {
                    int v122 = *(unsigned __int16 *)(v183 + 2 * v121);
                  }
                  int v123 = *(unsigned __int16 *)(v185 + 2 * v121);
                  DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v193, 0, "TriSc");
                  DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v178, i1);
                  DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v177, v99);
                  DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v176, v123);
                  if (*((_DWORD *)v82 + 16) >= 4u) {
                    DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v175, 0);
                  }
                  DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v179, v122);
                  DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v193);
                  ++v121;
                }
                while (v121 < v186);
              }
              int v96 = v169 + 1;
            }
            while (v169 + 1 != v167);
            unint64_t v87 = *((unsigned int *)v82 + 200);
            unsigned int v81 = v175;
          }
        }
      }
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v181);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v183);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v185);
      if (*((_DWORD *)v82 + 16) >= 4u)
      {
        if (*((_DWORD *)v82 + 314) >= 2u)
        {
          unint64_t v124 = 1;
          do
          {
            int v125 = *(__int16 *)(*((void *)v82 + 156) + 2 * v124);
            DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v193, 0, "QuadBoWtQuant");
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v178, v124);
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v177, 0);
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v176, 0);
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v81, 0);
            DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v193, v179, v125);
            DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v193);
            ++v124;
          }
          while (v124 < *((unsigned int *)v82 + 314));
        }
        if (*((_DWORD *)v82 + 318) >= 2u)
        {
          unint64_t v126 = 1;
          do
          {
            int v127 = *(unsigned __int16 *)(*((void *)v82 + 158) + 2 * v126);
            DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v193, 0, "QuadScQuant");
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v178, v126);
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v177, 0);
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v176, 0);
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v81, 0);
            DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v179, v127);
            DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v193);
            ++v126;
          }
          while (v126 < *((unsigned int *)v82 + 318));
        }
        unint64_t v128 = *((unsigned int *)v82 + 322);
        if (v128 >= 2)
        {
          uint64_t v129 = (WordLanguageModel *)((char *)v82 + 1232);
          uint64_t v166 = (void *)((char *)v82 + 1672);
          uint64_t v168 = (void *)((char *)v82 + 1496);
          *(void *)uint64_t v173 = (char *)v82 + 1704;
          uint64_t v130 = (void *)((char *)v82 + 1544);
          for (unint64_t i2 = 1; i2 < v128; ++i2)
          {
            int v170 = *(unsigned __int16 *)(*((void *)v180 + 160) + 2 * i2);
            if (*(_WORD *)(*((void *)v180 + 160) + 2 * i2))
            {
              int v132 = 0;
              uint64_t v133 = *((void *)v180 + 166);
              do
              {
                uint64_t v134 = (*(_DWORD *)(*((void *)v180 + 162) + 4 * i2) + v132);
                if (*(_WORD *)(v133 + 2 * v134))
                {
                  int v171 = v132;
                  unsigned int v135 = 0;
                  uint64_t v136 = v180;
                  int v137 = *(unsigned __int16 *)(*((void *)v180 + 164) + 2 * v134);
                  uint64_t v138 = v134 >> 5;
                  int v139 = 1 << (*(unsigned char *)(*((void *)v180 + 162) + 4 * i2) + v132);
                  do
                  {
                    uint64_t v140 = *(unsigned int *)(*((void *)v136 + 185) + 4 * v134);
                    if (*((_DWORD *)v136 + 308))
                    {
                      uint64_t v141 = v168;
                      if ((*(_DWORD *)(*((void *)v136 + 168) + 4 * v138) & v139) != 0)
                      {
                        LODWORD(v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = *(_DWORD *)(*((void *)v180 + 207) + 4 * v140);
                        uint64_t v141 = v166;
                      }
                    }
                    else
                    {
                      uint64_t v141 = v168;
                    }
                    int v142 = *(unsigned __int16 *)(*v141 + 2 * (v140 + v135));
                    DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v193, 0, "QuadBoWt");
                    DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v178, i2);
                    DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v177, v137);
                    DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v176, v142);
                    DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v175, 0);
                    if (*((_DWORD *)v180 + 314))
                    {
                      uint64_t v143 = *(unsigned int *)(*((void *)v180 + 185) + 4 * v134);
                      if (*((_DWORD *)v180 + 308))
                      {
                        uint64_t v144 = v130;
                        if ((*(_DWORD *)(*((void *)v180 + 168) + 4 * v138) & v139) != 0)
                        {
                          LODWORD(v143) = *(_DWORD *)(*((void *)v180 + 207) + 4 * v143);
                          uint64_t v144 = *(void **)v173;
                        }
                      }
                      else
                      {
                        uint64_t v144 = v130;
                      }
                      DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v179, *(unsigned __int8 *)(*v144 + v143 + v135));
                    }
                    else
                    {
                      int BackoffWeight = QuadgramData::getBackoffWeight(v129, v134, v135);
                      DgnTextFileWriter::setLineFieldIntegerValue((DgnTextFileWriter *)v193, v179, BackoffWeight);
                    }
                    DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v193);
                    ++v135;
                    uint64_t v136 = v180;
                    uint64_t v133 = *((void *)v180 + 166);
                  }
                  while (v135 < *(unsigned __int16 *)(v133 + 2 * v134));
                  int v132 = v171;
                }
                ++v132;
              }
              while (v132 != v170);
              unint64_t v128 = *((unsigned int *)v180 + 322);
            }
          }
          uint64_t v146 = v180;
          if (v128 >= 2)
          {
            for (unint64_t i3 = 1; i3 < v128; ++i3)
            {
              int v164 = *(unsigned __int16 *)(*((void *)v146 + 160) + 2 * i3);
              if (*(_WORD *)(*((void *)v146 + 160) + 2 * i3))
              {
                int v148 = 0;
                uint64_t v149 = *((void *)v146 + 166);
                *(void *)uint64_t v174 = i3;
                do
                {
                  uint64_t v150 = (*(_DWORD *)(*((void *)v180 + 162) + 4 * i3) + v148);
                  if (*(_WORD *)(v149 + 2 * v150))
                  {
                    int v165 = v148;
                    unsigned int v151 = 0;
                    int v172 = *(unsigned __int16 *)(*((void *)v180 + 164) + 2 * v150);
                    uint64_t v152 = v150 >> 5;
                    int v153 = 1 << (*(unsigned char *)(*((void *)v180 + 162) + 4 * i3) + v148);
                    unsigned int v154 = *(_DWORD *)(*((void *)v180 + 185) + 4 * v150);
                    int v155 = *((_DWORD *)v180 + 308);
                    do
                    {
                      unsigned int v156 = v154;
                      uint64_t v157 = v168;
                      if (v155)
                      {
                        unsigned int v156 = v154;
                        uint64_t v157 = v168;
                        if ((*(_DWORD *)(*((void *)v180 + 168) + 4 * v152) & v153) != 0)
                        {
                          unsigned int v156 = *(_DWORD *)(*((void *)v180 + 207) + 4 * v154);
                          uint64_t v157 = v166;
                        }
                      }
                      unsigned int v158 = 0;
                      int v159 = *(unsigned __int16 *)(*v157 + 2 * (v156 + v151));
                      while (1)
                      {
                        unsigned int v160 = v154;
                        uint64_t v161 = (void *)((char *)v180 + 1512);
                        if (v155)
                        {
                          unsigned int v160 = v154;
                          uint64_t v161 = (void *)((char *)v180 + 1512);
                          if ((*(_DWORD *)(*((void *)v180 + 168) + 4 * v152) & v153) != 0)
                          {
                            unsigned int v160 = *(_DWORD *)(*((void *)v180 + 207) + 4 * v154);
                            uint64_t v161 = (void *)((char *)v180 + 1736);
                          }
                        }
                        if (v158 >= *(unsigned __int16 *)(*v161 + 2 * (v160 + v151))) {
                          break;
                        }
                        int Quad3SuccIdForIndex = QuadgramData::getQuad3SuccIdForIndex(v129, v150, v151, v158);
                        int ScoreForIndex = QuadgramData::getScoreForIndex(v129, v150, v151, v158);
                        if (ScoreForIndex != 20000)
                        {
                          if (*((_DWORD *)v180 + 318)) {
                            int ScoreForIndex = QuadgramData::getQuantizedScoreForIndex(v129, v150, v151, v158);
                          }
                          DgnTextFileWriter::setLineFieldValue((DgnTextFileWriter *)v193, 0, "QuadSc");
                          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v178, v174[0]);
                          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v177, v172);
                          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v176, v159);
                          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v175, Quad3SuccIdForIndex);
                          DgnTextFileWriter::setLineFieldUnsignedValue((DgnTextFileWriter *)v193, v179, ScoreForIndex);
                          DgnTextFileWriter::writeNextLine((DgnTextFileWriter *)v193);
                        }
                        ++v158;
                        int v155 = *((_DWORD *)v180 + 308);
                        unsigned int v154 = *(_DWORD *)(*((void *)v180 + 185) + 4 * v150);
                      }
                      ++v151;
                      uint64_t v149 = *((void *)v180 + 166);
                    }
                    while (v151 < *(unsigned __int16 *)(v149 + 2 * v150));
                    unint64_t i3 = *(void *)v174;
                    int v148 = v165;
                  }
                  ++v148;
                }
                while (v148 != v164);
                uint64_t v146 = v180;
                unint64_t v128 = *((unsigned int *)v180 + 322);
              }
            }
          }
        }
      }
    }
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v187);
  DgnArray<DgnString>::releaseAll((uint64_t)&v189);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v191);
  DgnTextFileWriter::~DgnTextFileWriter((DgnTextFileWriter *)v193);
}

void sub_213FAEC1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31)
{
}

void (***WordLanguageModel::saveBinary(WordLanguageModel *this, DFile *a2, DFileChecksums *a3, int a4))(void)
{
  uint64_t v7 = OpenAndWriteMrecHeader((uint64_t)a2, 0x6Fu, a4, "LMWNGBIN", 24, 18);
  unsigned int v10 = 0;
  writeObject((uint64_t)v7, (int *)this + 16, &v10);
  writeObject((uint64_t)v7, (unsigned __int8 *)this + 68, &v10);
  writeObject((uint64_t)v7, (int *)this + 18, &v10);
  writeObject((uint64_t)v7, (int *)this + 19, &v10);
  writeObject((uint64_t)v7, (unsigned __int8 *)this + 80, &v10);
  writeObject((uint64_t)v7, (int *)this + 25, &v10);
  writeObject((uint64_t)v7, (int *)this + 60, &v10);
  writeObject((uint64_t)v7, (unsigned __int8 *)this + 244, &v10);
  writeObject((uint64_t)v7, (unsigned __int8 *)this + 245, &v10);
  WordLanguageModel::saveUnigramMembersBinary(this, v7, &v10);
  if (*((_DWORD *)this + 16) >= 2u)
  {
    WordLanguageModel::saveBigramMembersBinary(this, v7, &v10);
    BigramData::saveBinary((WordLanguageModel *)((char *)this + 360), v7, &v10);
    if (*((_DWORD *)this + 16) >= 3u)
    {
      TrigramData::saveBinary((WordLanguageModel *)((char *)this + 744), v7, &v10);
      if (*((_DWORD *)this + 16) >= 4u) {
        QuadgramData::saveBinary((WordLanguageModel *)((char *)this + 1232), v7, &v10);
      }
    }
  }
  writeObjectChecksum((uint64_t)v7, (int *)&v10);
  uint64_t CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
  DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x6Fu, v10);
  return DgnDelete<DgnStream>((void (***)(void))v7);
}

uint64_t WordLanguageModel::saveLMShared(WordLanguageModel *this, DgnSharedMemStream *a2, int a3)
{
  uint64_t result = WordLanguageModel::saveBinaryShared(this, a2, a3);
  if (*((_DWORD *)this + 16) >= 2u && *((unsigned char *)this + 244))
  {
    uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 29) + 80);
    return v5();
  }
  return result;
}

uint64_t WordLanguageModel::saveBinaryShared(WordLanguageModel *this, DgnSharedMemStream *a2, int a3)
{
  unsigned int v8 = 0;
  uint64_t v6 = (int *)((char *)this + 64);
  if (a3)
  {
    writeObject((uint64_t)a2, v6, &v8);
    writeObject((uint64_t)a2, (unsigned __int8 *)this + 68, &v8);
    writeObject((uint64_t)a2, (int *)this + 18, &v8);
    writeObject((uint64_t)a2, (int *)this + 19, &v8);
    writeObject((uint64_t)a2, (unsigned __int8 *)this + 80, &v8);
    writeObject((uint64_t)a2, (int *)this + 25, &v8);
    writeObject((uint64_t)a2, (int *)this + 60, &v8);
    writeObject((uint64_t)a2, (unsigned __int8 *)this + 244, &v8);
    writeObject((uint64_t)a2, (unsigned __int8 *)this + 245, &v8);
    WordLanguageModel::saveUnigramMembersBinary(this, a2, &v8);
    if (*((_DWORD *)this + 16) <= 1u)
    {
LABEL_9:
      writeObject((uint64_t)a2, (int *)this + 456, &v8);
      return writeObjectChecksum((uint64_t)a2, (int *)&v8);
    }
    WordLanguageModel::saveBigramMembersBinary(this, a2, &v8);
  }
  else if (*v6 <= 1)
  {
    return writeObjectChecksum((uint64_t)a2, (int *)&v8);
  }
  BigramData::saveBinaryShared((WordLanguageModel *)((char *)this + 360), a2, a3, &v8);
  if (*((_DWORD *)this + 16) >= 3u)
  {
    TrigramData::saveBinaryShared((WordLanguageModel *)((char *)this + 744), a2, a3, &v8);
    if (*((_DWORD *)this + 16) >= 4u) {
      QuadgramData::saveBinaryShared((WordLanguageModel *)((char *)this + 1232), a2, a3, &v8);
    }
  }
  if (a3) {
    goto LABEL_9;
  }
  return writeObjectChecksum((uint64_t)a2, (int *)&v8);
}

void WordLanguageModel::reloadLMShared(WordLanguageModel *this, DgnSharedMemStream *a2, int a3)
{
  WordLanguageModel::loadBinaryShared((uint64_t)this, a2, 0, 0, 0x6Fu, a3);
  if (*((_DWORD *)this + 16) >= 2u && *((unsigned char *)this + 244))
  {
    uint64_t v4 = *(void (**)(void))(**((void **)this + 29) + 88);
    v4();
  }
}

RecentBuffer *WordLanguageModel::saveVocAndSvc(unint64_t a1, DFile *a2, DFile *a3, DFileChecksums *a4, uint64_t a5, DFileChecksums *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(_DWORD *)(a1 + 64) == 1)
  {
    unsigned int v13 = *(uint64_t (**)(void))(*(void *)a1 + 72);
    return (RecentBuffer *)v13();
  }
  else
  {
    if (*(unsigned char *)(a1 + 244))
    {
      uint64_t v25 = 1;
      DFile::pushCurrentSubDirComponent(a2, (const SubDirExtension *)&v25, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7, a8);
      uint64_t v25 = 1;
      DFile::pushCurrentSubDirComponent(a3, (const SubDirExtension *)&v25, v19, v20, v21, v22, v23, v24);
      (*(void (**)(void, DFile *, DFile *, DFileChecksums *, uint64_t, DFileChecksums *, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 232) + 96))(*(void *)(a1 + 232), a2, a3, a4, a5, a6, a7, a8, a9);
      DFile::popCurrentSubDirComponent((uint64_t)a2);
      DFile::popCurrentSubDirComponent((uint64_t)a3);
    }
    WordLanguageModel::savePersistentAndIndex(a1, (uint64_t)a3, a5, (int)a6, a7, a8, a9, SHIDWORD(a9));
    WordLanguageModel::saveDynamic((WordLanguageModel *)a1, a2, a4, (int)a6);
    uint64_t result = *(RecentBuffer **)(a1 + 8);
    if (result) {
      return (RecentBuffer *)RecentBuffer::saveRecentBuffer(result, a2, a4, 0, a6);
    }
  }
  return result;
}

void WordLanguageModel::savePersistentAndIndex(unint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  unsigned int v12 = (DFile *)a2;
  uint64_t v216 = *MEMORY[0x263EF8340];
  unsigned int v14 = OpenAndWriteMrecHeader(a2, 0x72u, 0, "LMWNGPER", 23, 7);
  unsigned int v15 = OpenAndWriteMrecHeader((uint64_t)v12, 0x71u, a4, "LMWNGIND", 23, 11);
  int v208 = 0;
  unsigned int v207 = 0;
  uint64_t v16 = (*(uint64_t (**)(DgnStream *))(*(void *)v14 + 40))(v14);
  LODWORD(v198[0]) = 0;
  (*(void (**)(DgnStream *, uint64_t *, uint64_t))(*(void *)v14 + 80))(v14, v198, 4);
  LODWORD(v198[0]) = 0;
  (*(void (**)(DgnStream *, uint64_t *, uint64_t))(*(void *)v14 + 80))(v14, v198, 4);
  LODWORD(v198[0]) = 0;
  (*(void (**)(DgnStream *, uint64_t *, uint64_t))(*(void *)v14 + 80))(v14, v198, 4);
  (*(void (**)(DgnStream *))(*(void *)v14 + 48))(v14);
  uint64_t v17 = (*(uint64_t (**)(DgnStream *))(*(void *)v15 + 40))(v15);
  LODWORD(v198[0]) = 0;
  (*(void (**)(DgnStream *, uint64_t *, uint64_t))(*(void *)v15 + 80))(v15, v198, 4);
  LODWORD(v198[0]) = 0;
  (*(void (**)(DgnStream *, uint64_t *, uint64_t))(*(void *)v15 + 80))(v15, v198, 4);
  LODWORD(v198[0]) = 0;
  (*(void (**)(DgnStream *, uint64_t *, uint64_t))(*(void *)v15 + 80))(v15, v198, 4);
  if (*(unsigned char *)(a1 + 68))
  {
    v198[0] = 0;
    writeObject((uint64_t)v15, v198, &v207);
    BigramData::saveBinary((BigramData *)(a1 + 360), v15, &v207);
    if (*(_DWORD *)(a1 + 64) >= 3u)
    {
      TrigramData::saveBinary((TrigramData *)(a1 + 744), v15, &v207);
      if (*(_DWORD *)(a1 + 64) >= 4u) {
        QuadgramData::saveBinary((QuadgramData *)(a1 + 1232), v15, &v207);
      }
    }
    int v18 = 0;
    goto LABEL_144;
  }
  BigramData::BigramData((BigramData *)v206);
  int v203 = 0;
  char v204 = 0;
  Hash<unsigned short,unsigned short,HuffmanSymbol<unsigned short,unsigned int>,HuffmanSymbol<unsigned short,unsigned int>*>::Hash((uint64_t)v205, 0, 16);
  v205[15] = 0;
  v205[14] = 0;
  TrigramData::TrigramData((TrigramData *)v202);
  int v199 = 0;
  char v200 = 0;
  Hash<unsigned short,unsigned short,HuffmanSymbol<unsigned short,unsigned int>,HuffmanSymbol<unsigned short,unsigned int>*>::Hash((uint64_t)v201, 0, 16);
  v201[15] = 0;
  v201[14] = 0;
  QuadgramData::QuadgramData((QuadgramData *)v198);
  int v150 = a7;
  int v195 = 0;
  char v196 = 0;
  Hash<unsigned short,unsigned short,HuffmanSymbol<unsigned short,unsigned int>,HuffmanSymbol<unsigned short,unsigned int>*>::Hash((uint64_t)v197, 0, 16);
  v197[15] = 0;
  v197[14] = 0;
  uint64_t v19 = (void (***)(void))(*(uint64_t (**)(unint64_t))(*(void *)a1 + 464))(a1);
  long long v215 = 0u;
  long long v214 = 0u;
  long long v213 = 0u;
  memset(v212, 0, sizeof(v212));
  memset(v211, 0, sizeof(v211));
  memset(v210, 0, sizeof(v210));
  uint64_t v194 = 0;
  uint64_t v193 = 0;
  uint64_t v192 = 0;
  uint64_t v191 = 0;
  WordLanguageModel::constructLmIdToWordIdMapping(a1, (uint64_t)&v193, (uint64_t)&v191);
  int v137 = v12;
  uint64_t v189 = 0;
  uint64_t v190 = 0;
  long long v188 = 0u;
  long long v187 = 0u;
  long long v186 = 0u;
  long long v185 = 0u;
  long long v184 = 0u;
  long long v183 = 0u;
  LMStats::resetStats((LMStats *)v182);
  long long v179 = xmmword_2140A2670;
  int v180 = 1;
  char v181 = 1;
  uint64_t v20 = *(unsigned int *)(a1 + 104);
  unsigned int v177 = 0;
  uint64_t v178 = 0;
  uint64_t v136 = a3;
  uint64_t v140 = v15;
  if (!v20)
  {
    unsigned int v175 = 0;
    uint64_t v176 = 0;
    goto LABEL_18;
  }
  unsigned int v175 = 0;
  unint64_t v21 = realloc_array(0, &v175, 2 * v20, 0, 0, 1);
  uint64_t v176 = 0;
  unsigned int v177 = v175;
  uint64_t v22 = *(unsigned int *)(a1 + 104);
  HIDWORD(v17DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v21 >> 1;
  LODWORD(v17DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v20;
  unsigned int v175 = 0;
  if (!v22)
  {
LABEL_18:
    LODWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 176) = 0;
    goto LABEL_19;
  }
  int v172 = 0;
  unint64_t v23 = realloc_array(0, &v172, 8 * v22, 0, 0, 1);
  uint64_t v24 = v172;
  unsigned int v175 = v172;
  unint64_t v25 = *(unsigned int *)(a1 + 104);
  HIDWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 176) = v23 >> 3;
  LODWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 176) = v22;
  if (v25 >= 2)
  {
    for (unint64_t i = 1; i < v25; ++i)
    {
      if (*(_WORD *)(*(void *)(a1 + 168) + 2 * i) == 20000)
      {
        v177[i] = 20000;
        v24[i] = 0;
      }
      else
      {
        LODWORD(v190) = 0;
        (*(void (**)(unint64_t, uint64_t *, void, unsigned char *, long long *, void (***)(void)))(*(void *)a1 + 472))(a1, &v189, 0, v182, &v179, v19);
        LOBYTE(v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = 0;
        unint64_t WordIdWithMapping = WordLanguageModel::getWordIdWithMapping(a1, i, 0, (uint64_t)&v193, 0);
        unsigned int v28 = (*(uint64_t (**)(unint64_t, unint64_t, uint64_t, unsigned char *, void (***)(void), void, void, void, void **))(*(void *)a1 + 504))(a1, WordIdWithMapping, 0xFFFFLL, v182, v19, 0, 0, 0, &v172);
        (*(void (**)(unint64_t, void (***)(void)))(*(void *)a1 + 480))(a1, v19);
        v177[i] = v28;
        uint64_t v29 = 0;
        if (*(_DWORD *)(a1 + 56) > v28) {
          uint64_t v29 = *(void *)(*(void *)(a1 + 48) + 8 * v28);
        }
        uint64_t v24 = v175;
        *((void *)v175 + i) = v29;
        unint64_t v25 = *(unsigned int *)(a1 + 104);
      }
    }
  }
LABEL_19:
  uint64_t v138 = v17;
  uint64_t v139 = v16;
  uint64_t v141 = (_DWORD *)a1;
  uint64_t v143 = (BigramData *)(a1 + 360);
  BigramData::initNewBigramData(a1 + 360, (BigramData *)v206, (uint64_t)&v203, (uint64_t)&v213, (uint64_t)v211);
  uint64_t v30 = DWORD2(v213);
  if (DWORD2(v213))
  {
    unint64_t v31 = v177;
    uint64_t v32 = (double *)v175;
    int v33 = (int32x2_t *)(v213 + 32);
    do
    {
      uint64_t v34 = v33[-1].u32[0];
      double v35 = v32[v34];
      v33->i16[0] = v31[v34];
      *(float *)&double v35 = v35;
      v33[-4] = vdup_lane_s32(*(int32x2_t *)&v35, 0);
      v33 += 7;
      --v30;
    }
    while (v30);
  }
  if (*(_DWORD *)(a1 + 64) > 2u)
  {
    TrigramData::initNewTrigramData(a1 + 744, (TrigramData *)v202, (uint64_t)&v199, (uint64_t)&v214, (uint64_t)v211, &v175, v150 == 2);
    int v36 = DWORD2(v214);
    if (DWORD2(v214))
    {
      uint64_t v37 = 0;
      unint64_t v38 = 0;
      int v39 = (_DWORD *)a1;
      do
      {
        LODWORD(v190) = 0;
        (*(void (**)(_DWORD *, uint64_t *, void, unsigned char *, long long *, void (***)(void)))(*(void *)v39 + 472))(v39, &v189, 0, v182, &v179, v19);
        LOBYTE(v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = 0;
        unint64_t v40 = WordLanguageModel::getWordIdWithMapping((uint64_t)v39, *(_DWORD *)(v214 + v37 + 24), 0, (uint64_t)&v193, 0);
        __int16 v41 = (*(uint64_t (**)(_DWORD *, unint64_t, uint64_t, unsigned char *, void (***)(void), void, void, void, void **))(*(void *)v39 + 504))(v39, v40, 0xFFFFLL, v182, v19, 0, 0, 0, &v172);
        (*(void (**)(_DWORD *, void (***)(void)))(*(void *)v39 + 480))(v39, v19);
        int v42 = WordLanguageModel::getWordIdWithMapping((uint64_t)v39, *(_DWORD *)(v214 + v37 + 24), 1, (uint64_t)&v193, (uint64_t)&v191);
        uint64_t v43 = v190;
        if (v190 == (unint64_t)HIDWORD(v190))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v189, 1, 1);
          uint64_t v43 = v190;
        }
        *(_DWORD *)(v189 + 4 * v43) = v42;
        LODWORD(v190) = v190 + 1;
        int v39 = (_DWORD *)a1;
        (*(void (**)(unint64_t, uint64_t *, void, unsigned char *, long long *, void (***)(void)))(*(void *)a1 + 472))(a1, &v189, 0, v182, &v179, v19);
        unint64_t v44 = WordLanguageModel::getWordIdWithMapping(a1, *(_DWORD *)(v214 + v37 + 28), 0, (uint64_t)&v193, 0);
        __int16 v45 = (*(uint64_t (**)(unint64_t, unint64_t, uint64_t, unsigned char *, void (***)(void), void, void, void, void **))(*(void *)a1 + 504))(a1, v44, 0xFFFFLL, v182, v19, 0, 0, 0, &v172);
        (*(void (**)(_DWORD *, void (***)(void)))(*(void *)v39 + 480))(v39, v19);
        __int16 v46 = v45 + v41;
        double v47 = 0.0;
        if (*(_DWORD *)(a1 + 56) > (__int16)(v45 + v41)) {
          double v47 = *(double *)(*(void *)(a1 + 48) + 8 * v46);
        }
        uint64_t v48 = v214 + v37;
        *(_WORD *)(v48 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v46;
        float v49 = v47;
        *(float *)uint64_t v48 = v49;
        ++v38;
        int v36 = DWORD2(v214);
        v37 += 56;
      }
      while (v38 < DWORD2(v214));
    }
    else
    {
      int v39 = (_DWORD *)a1;
    }
    if ((DWORD2(v213) + v36) > HIDWORD(v213))
    {
      DgnArray<DiskNgramContext>::reallocElts((uint64_t)&v213, (DWORD2(v213) + v36 - HIDWORD(v213)), 1);
      int v36 = DWORD2(v214);
      int v39 = (_DWORD *)a1;
    }
    if (v36)
    {
      uint64_t v50 = 0;
      unint64_t v51 = 0;
      do
      {
        DiskNgramContext::operator=(v213 + 56 * (v51++ + DWORD2(v213)), v214 + v50);
        int v36 = DWORD2(v214);
        v50 += 56;
      }
      while (v51 < DWORD2(v214));
    }
    DWORD2(v213) += v36;
    if ((void)v214)
    {
      MemChunkFree((void *)v214, 0);
      *(void *)&long long v214 = 0;
      int v39 = (_DWORD *)a1;
    }
    *((void *)&v214 + 1) = 0;
    if (v39[16] >= 4u)
    {
      QuadgramData::initNewQuadgramData(a1 + 1232, (TrigramData *)v198, (uint64_t)&v195, (uint64_t)&v215, &v175);
      if (DWORD2(v215))
      {
        uint64_t v52 = 0;
        unint64_t v53 = 0;
        do
        {
          LODWORD(v190) = 0;
          (*(void (**)(unint64_t, uint64_t *, void, unsigned char *, long long *, void (***)(void)))(*(void *)a1 + 472))(a1, &v189, 0, v182, &v179, v19);
          LOBYTE(v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = 0;
          unint64_t v54 = WordLanguageModel::getWordIdWithMapping(a1, *(_DWORD *)(v215 + v52 + 24), 0, (uint64_t)&v193, 0);
          __int16 v55 = (*(uint64_t (**)(unint64_t, unint64_t, uint64_t, unsigned char *, void (***)(void), void, void, void, void **))(*(void *)a1 + 504))(a1, v54, 0xFFFFLL, v182, v19, 0, 0, 0, &v172);
          (*(void (**)(unint64_t, void (***)(void)))(*(void *)a1 + 480))(a1, v19);
          int v56 = WordLanguageModel::getWordIdWithMapping(a1, *(_DWORD *)(v215 + v52 + 24), 1, (uint64_t)&v193, (uint64_t)&v191);
          uint64_t v57 = v190;
          if (v190 == (unint64_t)HIDWORD(v190))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v189, 1, 1);
            uint64_t v57 = v190;
          }
          *(_DWORD *)(v189 + 4 * v57) = v56;
          LODWORD(v190) = v190 + 1;
          (*(void (**)(unint64_t, uint64_t *, void, unsigned char *, long long *, void (***)(void)))(*(void *)a1 + 472))(a1, &v189, 0, v182, &v179, v19);
          unint64_t v58 = WordLanguageModel::getWordIdWithMapping(a1, *(_DWORD *)(v215 + v52 + 28), 0, (uint64_t)&v193, 0);
          __int16 v59 = (*(uint64_t (**)(unint64_t, unint64_t, uint64_t, unsigned char *, void (***)(void), void, void, void, void **))(*(void *)a1 + 504))(a1, v58, 0xFFFFLL, v182, v19, 0, 0, 0, &v172);
          (*(void (**)(unint64_t, void (***)(void)))(*(void *)a1 + 480))(a1, v19);
          __int16 v60 = v59 + v55;
          double v61 = 0.0;
          if (*(_DWORD *)(a1 + 56) > (__int16)(v59 + v55)) {
            double v61 = *(double *)(*(void *)(a1 + 48) + 8 * v60);
          }
          uint64_t v62 = v215 + v52;
          *(_WORD *)(v62 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v60;
          float v63 = v61;
          *(float *)uint64_t v62 = v63;
          ++v53;
          v52 += 56;
        }
        while (v53 < DWORD2(v215));
      }
    }
  }
  DgnDelete<LMContextData>(v19);
  uint64_t v64 = 0;
  uint64_t v174 = 0;
  for (uint64_t j = 2; j != 5; ++j)
  {
    uint64_t v66 = LODWORD(v212[2 * j + 1]);
    if (v66)
    {
      unsigned int v67 = (uint64_t *)(v212[2 * j] + 8);
      do
      {
        uint64_t v68 = *v67;
        v67 += 7;
        v64 += v68;
        --v66;
      }
      while (v66);
      uint64_t v174 = v64;
    }
  }
  mrec_qsort_r<DiskNgramContextBiTriIsolatedCmp>(v213, DWORD2(v213), 0x38uLL, 0);
  mrec_qsort_r<DiskNgramContextQuadIsolatedCmp>(v215, DWORD2(v215), 0x38uLL, 0);
  char v69 = 0;
  unsigned int v70 = 0;
  int v71 = 0;
  unint64_t v72 = 0;
  unint64_t v73 = (unint64_t)((double)a6 * (double)v64 / (double)a5);
  for (uint64_t k = 2; k != 5; ++k)
  {
    uint64_t v75 = LODWORD(v212[2 * k + 1]);
    if (v75)
    {
      uint64_t v76 = 0;
      unsigned int v77 = (uint64_t *)(v212[2 * k] + 8);
      do
      {
        if (!(v69 & 1 | (v72 < v73)))
        {
          int v71 = k;
          unsigned int v70 = v76;
        }
        v69 |= (v69 | (v72 < v73)) ^ 1;
        uint64_t v78 = *v77;
        v77 += 7;
        v72 += v78;
        ++v76;
      }
      while (v75 != v76);
    }
  }
  if ((v69 & 1) == 0) {
    goto LABEL_72;
  }
  if (v71 == 2)
  {
    if (v150 == 2)
    {
      mrec_qsort_r<DiskNgramContextBiTriGroupTrigramsWithBigramsCmp>(v213 + 56 * v70, DWORD2(v213) - v70, 0x38uLL, 0);
    }
    else if (v150 == 1)
    {
      mrec_qsort_r<DiskNgramContextBiTriGroupTrigramsCmp>(v213 + 56 * v70, DWORD2(v213) - v70, 0x38uLL, 0);
    }
    if (a8 != 1) {
      goto LABEL_72;
    }
    uint64_t v79 = v215;
    unsigned int v80 = DWORD2(v215);
  }
  else
  {
    if (a8 != 1 || v71 != 4) {
      goto LABEL_72;
    }
    uint64_t v79 = v215 + 56 * v70;
    unsigned int v80 = DWORD2(v215) - v70;
  }
  mrec_qsort_r<DiskNgramContextQuadGroupCmp>(v79, v80, 0x38uLL, 0);
LABEL_72:
  if (v193)
  {
    MemChunkFree(v193, 0);
    uint64_t v193 = 0;
  }
  uint64_t v194 = 0;
  if (v191)
  {
    MemChunkFree(v191, 0);
    uint64_t v191 = 0;
  }
  uint64_t v192 = 0;
  writeObject((uint64_t)v140, &v174, &v207);
  int v172 = 0;
  uint64_t v173 = 0;
  int v170 = 0;
  HIDWORD(v173) = realloc_array(0, &v170, 0xFA0uLL, 0, 0, 1) >> 2;
  uint64_t v171 = 0;
  int v172 = v170;
  int v170 = 0;
  uint64_t v168 = 0;
  HIDWORD(v171) = realloc_array(0, &v168, 0xFA0uLL, 0, 0, 1) >> 2;
  uint64_t v169 = 0;
  int v170 = v168;
  uint64_t v168 = 0;
  uint64_t v166 = 0;
  HIDWORD(v169) = realloc_array(0, &v166, 0xFA0uLL, 0, 0, 1) >> 2;
  uint64_t v167 = 0;
  uint64_t v168 = v166;
  uint64_t v166 = 0;
  int v164 = 0;
  HIDWORD(v167) = realloc_array(0, &v164, 0xFA0uLL, 0, 0, 1) >> 2;
  uint64_t v165 = 0;
  uint64_t v166 = v164;
  int v164 = 0;
  uint64_t v162 = 0;
  HIDWORD(v165) = realloc_array(0, &v162, 0xFA0uLL, 0, 0, 1) >> 2;
  uint64_t v163 = 0;
  int v164 = v162;
  uint64_t v162 = 0;
  unsigned int v160 = 0;
  HIDWORD(v163) = realloc_array(0, &v160, 0xFA0uLL, 0, 0, 1) >> 2;
  uint64_t v161 = 0;
  uint64_t v162 = v160;
  unsigned int v160 = 0;
  unsigned int v158 = 0;
  HIDWORD(v161) = realloc_array(0, &v158, 0xFA0uLL, 0, 0, 1) >> 2;
  uint64_t v159 = 0;
  unsigned int v160 = v158;
  unsigned int v158 = 0;
  unsigned int v156 = 0;
  unint64_t v81 = realloc_array(0, &v156, 0x3E80uLL, 0, 0, 1);
  int v84 = 0;
  int v85 = 0;
  int v86 = 0;
  int v87 = 0;
  int v88 = 0;
  int v89 = 0;
  uint64_t v90 = 0;
  HIDWORD(v159) = v81 >> 4;
  uint64_t v157 = 0;
  unsigned int v158 = v156;
  unsigned int v156 = 0;
  uint64_t v91 = 2;
  do
  {
    uint64_t v142 = v91;
    unint64_t v92 = (unint64_t)&v212[2 * v91];
    if (*(_DWORD *)(v92 + 8))
    {
      unint64_t v93 = 0;
      unsigned int v151 = (unsigned int *)(v92 | 8);
      int v153 = &v212[2 * v91];
      do
      {
        uint64_t v155 = v90;
        unint64_t v94 = 1000 * v90;
        while (v94 >= v174 * (unint64_t)v173)
        {
          int v95 = (*(uint64_t (**)(DgnStream *))(*(void *)v14 + 48))(v14);
          uint64_t v96 = v173;
          if (v173 == (unint64_t)HIDWORD(v173))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v172, 1, 1);
            uint64_t v96 = v173;
          }
          *((_DWORD *)v172 + vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = v95;
          LODWORD(v173) = v173 + 1;
          uint64_t v97 = v171;
          if (v171 == (unint64_t)HIDWORD(v171))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v170, 1, 1);
            uint64_t v97 = v171;
          }
          *((_DWORD *)v170 + v97) = v89;
          LODWORD(v171) = v171 + 1;
          uint64_t v98 = v169;
          if (v169 == (unint64_t)HIDWORD(v169))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v168, 1, 1);
            uint64_t v98 = v169;
          }
          *((_DWORD *)v168 + v9DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v88;
          LODWORD(v169) = v169 + 1;
          uint64_t v99 = v167;
          if (v167 == (unint64_t)HIDWORD(v167))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v166, 1, 1);
            uint64_t v99 = v167;
          }
          *((_DWORD *)v166 + v99) = v87;
          LODWORD(v167) = v167 + 1;
          uint64_t v100 = v165;
          if (v165 == (unint64_t)HIDWORD(v165))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v164, 1, 1);
            uint64_t v100 = v165;
          }
          *((_DWORD *)v164 + v100) = v86;
          LODWORD(v165) = v165 + 1;
          uint64_t v101 = v163;
          if (v163 == (unint64_t)HIDWORD(v163))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v162, 1, 1);
            uint64_t v101 = v163;
          }
          *((_DWORD *)v162 + v101) = v85;
          LODWORD(v163) = v163 + 1;
          uint64_t v102 = v161;
          if (v161 == (unint64_t)HIDWORD(v161))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v160, 1, 1);
            uint64_t v102 = v161;
          }
          *((_DWORD *)v160 + v102) = v84;
          LODWORD(v161) = v161 + 1;
          uint64_t v103 = v159;
          if (v159 == (unint64_t)HIDWORD(v159))
          {
            DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v158, 1, 1);
            uint64_t v103 = v159;
          }
          uint64_t v104 = (char *)v158 + 16 * v103;
          *uint64_t v104 = 0;
          v104[1] = 0;
          DgnPrimArray<int>::copyArraySlice((unint64_t)v104, (uint64_t *)&v156, 0, v157);
          LODWORD(v159) = v159 + 1;
          LODWORD(v157) = 0;
        }
        uint64_t v105 = *v153;
        uint64_t v106 = *v153 + 56 * v93;
        uint64_t v107 = *(void *)(v106 + 8);
        int v108 = *(unsigned __int8 *)(v106 + 34);
        switch(v108)
        {
          case 2:
            unsigned int v116 = (_DWORD *)(v105 + 56 * v93);
            unsigned int v117 = v116[9];
            int v146 = v116[10];
            int v149 = v116[11];
            unsigned int v118 = v117;
            if (v117 >> 29)
            {
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 8344, (uint64_t)"lm/wordlm", 86, (uint64_t)"%.500s %u", v82, v83, (char)"Bi1Id");
              unsigned int v118 = *(_DWORD *)(*v153 + 56 * v93 + 36);
            }
            BigramData::savePersistentAndFillInNewBigramData(v143, (uint64_t)v14, &v208, (uint64_t)v206, (uint64_t)&v203, v118);
            v89 += v146;
            v88 += v149;
            int v112 = v117 | 0x40000000;
            break;
          case 3:
            __int16 v113 = (unsigned int *)(v105 + 56 * v93);
            unsigned int v148 = v113[12];
            uint64_t v114 = v113[10];
            unsigned int v145 = v113[11];
            unsigned int v115 = v114;
            if (v114 >> 29)
            {
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 8362, (uint64_t)"lm/wordlm", 86, (uint64_t)"%.500s %u", v114, v83, (char)"Tri2Index");
              uint64_t v105 = *v153;
              unsigned int v115 = *(_DWORD *)(*v153 + 56 * v93 + 40);
            }
            TrigramData::savePersistentAndFillInNewTrigramData((TrigramData *)(v141 + 186), (uint64_t)v14, &v208, (uint64_t)v202, (uint64_t)&v199, *(_DWORD *)(v105 + 56 * v93 + 36), v115);
            v87 += v145;
            v86 += v148;
            int v112 = v114 | 0x80000000;
            break;
          case 4:
            uint64_t v109 = (unsigned int *)(v105 + 56 * v93);
            unsigned int v147 = v109[12];
            uint64_t v110 = v109[10];
            unsigned int v144 = v109[11];
            unsigned int v111 = v110;
            if (v110 >> 29)
            {
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 8381, (uint64_t)"lm/wordlm", 86, (uint64_t)"%.500s %u", v110, v83, (char)"Quad2Index");
              uint64_t v105 = *v153;
              unsigned int v111 = *(_DWORD *)(*v153 + 56 * v93 + 40);
            }
            QuadgramData::savePersistentAndFillInNewQuadgramData((QuadgramData *)(v141 + 308), (uint64_t)v14, &v208, (uint64_t)v198, (uint64_t)&v195, *(_DWORD *)(v105 + 56 * v93 + 36), v111);
            v85 += v144;
            v84 += v147;
            int v112 = v110 | 0xA0000000;
            break;
          default:
            int v112 = 0;
            break;
        }
        uint64_t v119 = v157;
        if (v157 == (unint64_t)HIDWORD(v157))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v156, 1, 1);
          uint64_t v119 = v157;
        }
        *((_DWORD *)v156 + v119) = v112;
        uint64_t v90 = v107 + v155;
        LODWORD(v157) = v157 + 1;
        ++v93;
      }
      while (v93 < *v151);
    }
    uint64_t v91 = v142 + 1;
  }
  while (v142 != 4);
  if (v173 <= 0x3E8)
  {
    do
    {
      int v120 = (*(uint64_t (**)(DgnStream *))(*(void *)v14 + 48))(v14);
      uint64_t v121 = v173;
      if (v173 == (unint64_t)HIDWORD(v173))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v172, 1, 1);
        uint64_t v121 = v173;
      }
      *((_DWORD *)v172 + v121) = v120;
      LODWORD(v173) = v173 + 1;
      uint64_t v122 = v171;
      if (v171 == (unint64_t)HIDWORD(v171))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v170, 1, 1);
        uint64_t v122 = v171;
      }
      *((_DWORD *)v170 + v122) = v89;
      LODWORD(v171) = v171 + 1;
      uint64_t v123 = v169;
      if (v169 == (unint64_t)HIDWORD(v169))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v168, 1, 1);
        uint64_t v123 = v169;
      }
      *((_DWORD *)v168 + v123) = v88;
      LODWORD(v169) = v169 + 1;
      uint64_t v124 = v167;
      if (v167 == (unint64_t)HIDWORD(v167))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v166, 1, 1);
        uint64_t v124 = v167;
      }
      *((_DWORD *)v166 + v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = v87;
      LODWORD(v167) = v167 + 1;
      uint64_t v125 = v165;
      if (v165 == (unint64_t)HIDWORD(v165))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v164, 1, 1);
        uint64_t v125 = v165;
      }
      *((_DWORD *)v164 + v125) = v86;
      LODWORD(v165) = v165 + 1;
      uint64_t v126 = v163;
      if (v163 == (unint64_t)HIDWORD(v163))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v162, 1, 1);
        uint64_t v126 = v163;
      }
      *((_DWORD *)v162 + v126) = v85;
      LODWORD(v163) = v163 + 1;
      uint64_t v127 = v161;
      if (v161 == (unint64_t)HIDWORD(v161))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v160, 1, 1);
        uint64_t v127 = v161;
      }
      *((_DWORD *)v160 + v127) = v84;
      LODWORD(v161) = v161 + 1;
      uint64_t v128 = v159;
      if (v159 == (unint64_t)HIDWORD(v159))
      {
        DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v158, 1, 1);
        uint64_t v128 = v159;
      }
      uint64_t v129 = (char *)v158 + 16 * v128;
      *uint64_t v129 = 0;
      v129[1] = 0;
      DgnPrimArray<int>::copyArraySlice((unint64_t)v129, (uint64_t *)&v156, 0, v157);
      LODWORD(v159) = v159 + 1;
      LODWORD(v157) = 0;
    }
    while (v173 < 0x3E9);
  }
  unsigned int v15 = v140;
  a1 = (unint64_t)v141;
  uint64_t v17 = v138;
  uint64_t v16 = v139;
  int v18 = (*(uint64_t (**)(DgnStream *))(*(void *)v14 + 48))(v14);
  int v209 = v173;
  writeObject((uint64_t)v14, &v209, &v208);
  writeObjectArray((uint64_t)v14, (int *)v172, v173, &v208);
  int v209 = v171;
  writeObject((uint64_t)v14, &v209, &v208);
  writeObjectArray((uint64_t)v14, (int *)v170, v171, &v208);
  int v209 = v169;
  writeObject((uint64_t)v14, &v209, &v208);
  writeObjectArray((uint64_t)v14, (int *)v168, v169, &v208);
  int v209 = v167;
  writeObject((uint64_t)v14, &v209, &v208);
  writeObjectArray((uint64_t)v14, (int *)v166, v167, &v208);
  int v209 = v165;
  writeObject((uint64_t)v14, &v209, &v208);
  writeObjectArray((uint64_t)v14, (int *)v164, v165, &v208);
  int v209 = v163;
  writeObject((uint64_t)v14, &v209, &v208);
  writeObjectArray((uint64_t)v14, (int *)v162, v163, &v208);
  int v209 = v161;
  writeObject((uint64_t)v14, &v209, &v208);
  writeObjectArray((uint64_t)v14, (int *)v160, v161, &v208);
  if (v159)
  {
    uint64_t v130 = 0;
    unint64_t v131 = 0;
    do
    {
      writeObject<unsigned int>((uint64_t)v14, (uint64_t)v158 + v130, &v208);
      ++v131;
      v130 += 16;
    }
    while (v131 < v159);
  }
  BigramData::saveBinary((BigramData *)v206, v140, &v207);
  if (v141[16] >= 3u)
  {
    TrigramData::saveBinary((TrigramData *)v202, v140, &v207);
    if (v141[16] >= 4u) {
      QuadgramData::saveBinary((QuadgramData *)v198, v140, &v207);
    }
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v156);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&v158);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v160);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v162);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v164);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v166);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v168);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v170);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v172);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v175);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v177);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v189);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v191);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v193);
  for (uint64_t m = 64; m != -16; m -= 16)
    DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v210[m]);
  for (uint64_t n = 8; n != -2; n -= 2)
    DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v212[n]);
  HuffmanEncoder<unsigned short,unsigned int>::~HuffmanEncoder((uint64_t)&v195);
  QuadgramData::~QuadgramData((QuadgramData *)v198);
  HuffmanEncoder<unsigned short,unsigned int>::~HuffmanEncoder((uint64_t)&v199);
  TrigramData::~TrigramData((TrigramData *)v202);
  HuffmanEncoder<unsigned short,unsigned int>::~HuffmanEncoder((uint64_t)&v203);
  BigramData::~BigramData((BigramData *)v206);
  a3 = v136;
  unsigned int v12 = v137;
LABEL_144:
  writeObjectChecksum((uint64_t)v14, &v208);
  (*(void (**)(DgnStream *, uint64_t))(*(void *)v14 + 24))(v14, v16);
  LODWORD(v198[0]) = v208;
  (*(void (**)(DgnStream *, uint64_t *, uint64_t))(*(void *)v14 + 80))(v14, v198, 4);
  LODWORD(v198[0]) = v207;
  (*(void (**)(DgnStream *, uint64_t *, uint64_t))(*(void *)v14 + 80))(v14, v198, 4);
  LODWORD(v198[0]) = v18;
  (*(void (**)(DgnStream *, uint64_t *, uint64_t))(*(void *)v14 + 80))(v14, v198, 4);
  writeObjectChecksum((uint64_t)v15, (int *)&v207);
  (*(void (**)(DgnStream *, uint64_t))(*(void *)v15 + 24))(v15, v17);
  LODWORD(v198[0]) = v208;
  (*(void (**)(DgnStream *, uint64_t *, uint64_t))(*(void *)v15 + 80))(v15, v198, 4);
  LODWORD(v198[0]) = v207;
  (*(void (**)(DgnStream *, uint64_t *, uint64_t))(*(void *)v15 + 80))(v15, v198, 4);
  LODWORD(v198[0]) = v18;
  (*(void (**)(DgnStream *, uint64_t *, uint64_t))(*(void *)v15 + 80))(v15, v198, 4);
  DgnDelete<DgnStream>((void (***)(void))v14);
  (**(void (***)(DgnStream *))v15)(v15);
  MemChunkFree(v15, 0);
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 264) = v208;
  *(_DWORD *)(a1 + 26DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v207;
  uint64_t CurrentSubDirComponents = DFile::getCurrentSubDirComponents(v12);
  DFileChecksums::addChecksum(a3, CurrentSubDirComponents, 0x72u, v208);
  uint64_t v135 = DFile::getCurrentSubDirComponents(v12);
  DFileChecksums::addChecksum(a3, v135, 0x71u, v207);
}

void sub_213FB0FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a47);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a72);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&STACK[0x208]);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&STACK[0x218]);
  for (uint64_t i = 64; i != -16; i -= 16)
    DgnIArray<Utterance *>::~DgnIArray((uint64_t)&STACK[0x970] + i);
  for (uint64_t j = 64; j != -16; j -= 16)
    DgnIArray<Utterance *>::~DgnIArray(v72 - 192 + j);
  HuffmanEncoder<unsigned short,unsigned int>::~HuffmanEncoder((uint64_t)&STACK[0x228]);
  QuadgramData::~QuadgramData((QuadgramData *)&STACK[0x2B0]);
  HuffmanEncoder<unsigned short,unsigned int>::~HuffmanEncoder((uint64_t)&STACK[0x4E8]);
  TrigramData::~TrigramData((TrigramData *)&STACK[0x570]);
  HuffmanEncoder<unsigned short,unsigned int>::~HuffmanEncoder((uint64_t)&STACK[0x758]);
  BigramData::~BigramData((BigramData *)&STACK[0x7E0]);
  _Unwind_Resume(a1);
}

BOOL SubDirExtension::isString(SubDirExtension *this, const char **a2)
{
  DgnString::DgnString((DgnString *)&v8);
  SubDirExtension::appendToString(this, (DgnString *)&v8);
  if (v9) {
    uint64_t v4 = v8;
  }
  else {
    uint64_t v4 = (const char *)&unk_2140A6A10;
  }
  if (*((_DWORD *)a2 + 2)) {
    uint64_t v5 = *a2;
  }
  else {
    uint64_t v5 = (const char *)&unk_2140A6A10;
  }
  BOOL v6 = strcmp(v4, v5) == 0;
  DgnString::~DgnString((DgnString *)&v8);
  return v6;
}

void sub_213FB121C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t WordLanguageModel::loadUnigramMembersBinary(WordLanguageModel *this, DgnStream *a2, unsigned int *a3, int a4, unint64_t *a5)
{
  unsigned int v10 = (_DWORD *)((char *)this + 32);
  int v11 = *((_DWORD *)this + 8);
  v18[0] = 0;
  v18[1] = 0;
  DgnString::DgnString((DgnString *)v17);
  unsigned __int16 v16 = 0;
  int v15 = 0;
  readObject((uint64_t)a2, v10, a3);
  readObject((uint64_t)a2, (_DWORD *)this + 26, a3);
  if (a4) {
    readObject((uint64_t)a2, &v15, a3);
  }
  readObject((uint64_t)a2, (_DWORD *)this + 28, a3);
  readObject((uint64_t)a2, (_DWORD *)this + 29, a3);
  if (a4)
  {
    readObject((uint64_t)a2, a5, a3);
    readObject((uint64_t)a2, &v16, a3);
    readObject<unsigned int>(a2, (uint64_t)v18, a3);
    readObject(a2, (BitArray *)v17, a3);
  }
  readObject<unsigned int>(a2, (uint64_t)this + 120, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 136, a3);
  readObject<unsigned char>(a2, (uint64_t)this + 152, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 168, a3);
  if (*v10 != v11) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 5130, (uint64_t)"lm/wordlm", 34, (uint64_t)"%u %u", v12, v13, *v10);
  }
  BitArray::~BitArray((BitArray *)v17);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v18);
}

void sub_213FB13BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t WordLanguageModel::saveUnigramMembersBinary(WordLanguageModel *this, DgnStream *a2, unsigned int *a3)
{
  writeObject((uint64_t)a2, (int *)this + 8, a3);
  writeObject((uint64_t)a2, (int *)this + 26, a3);
  writeObject((uint64_t)a2, (int *)this + 28, a3);
  writeObject((uint64_t)a2, (int *)this + 29, a3);
  writeObject<unsigned int>((uint64_t)a2, (uint64_t)this + 120, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 136, a3);
  writeObject<unsigned char>((uint64_t)a2, (uint64_t)this + 152, a3);

  return writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 168, a3);
}

void WordLanguageModel::loadBigramMembersBinary(WordLanguageModel *this, DgnStream *a2, unsigned int *a3, int a4, unint64_t *a5)
{
  unsigned __int16 v11 = 0;
  double v10 = 0.0;
  readObject((uint64_t)a2, (_DWORD *)this + 66, a3);
  readObject((uint64_t)a2, (_DWORD *)this + 67, a3);
  if (a4)
  {
    readObject((uint64_t)a2, a5, a3);
    readObject((uint64_t)a2, &v11, a3);
    readObject((uint64_t)a2, (_DWORD *)this + 68, a3);
    readObject(a2, &v10, a3);
  }
  else
  {
    readObject((uint64_t)a2, (_DWORD *)this + 68, a3);
  }
  readObject((uint64_t)a2, (BOOL *)this + 276, a3);
  readObject<unsigned int>(a2, (uint64_t)this + 280, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 296, a3);
  readObject<unsigned char>(a2, (uint64_t)this + 312, a3);
  readObject<unsigned short>(a2, (uint64_t)this + 328, a3);
  readObject<short>(a2, (uint64_t)this + 344, a3);
}

void WordLanguageModel::verifyBoWtForBiSc(WordLanguageModel *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8 = *((unsigned int *)this + 140);
  if (v8 >= 2)
  {
    for (unint64_t i = 1; i < v8; ++i)
    {
      if (*(_WORD *)(*((void *)this + 69) + 2 * i)
        && (i >= *((unsigned int *)this + 88) || *(_WORD *)(*((void *)this + 43) + 2 * i) == 20000))
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6805, (uint64_t)"lm/wordlm", 42, (uint64_t)"%u", a7, a8, i);
        unint64_t v8 = *((unsigned int *)this + 140);
      }
    }
  }
}

void WordLanguageModel::throwOnBadBoWt(WordLanguageModel *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8 = *((unsigned int *)this + 88);
  if (v8 >= 2)
  {
    for (unint64_t i = 1; i < v8; ++i)
    {
      if (*(_WORD *)(*((void *)this + 43) + 2 * i)) {
        BOOL v11 = *(unsigned __int16 *)(*((void *)this + 43) + 2 * i) == 20000;
      }
      else {
        BOOL v11 = 1;
      }
      if (!v11 && (i >= *((unsigned int *)this + 140) || !*(_WORD *)(*((void *)this + 69) + 2 * i)))
      {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6819, (uint64_t)"lm/wordlm", 87, (uint64_t)"%u %d", a7, a8, i);
        unint64_t v8 = *((unsigned int *)this + 88);
      }
    }
  }
}

void WordLanguageModel::verifyUniScForBiSc(WordLanguageModel *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 140) >= 2u)
  {
    int v9 = (WordLanguageModel *)((char *)this + 360);
    uint64_t v10 = *((void *)this + 69);
    unint64_t v11 = 1;
    do
    {
      if (*(_WORD *)(v10 + 2 * v11))
      {
        if (*(_WORD *)(*((void *)this + 21) + 2 * v11) == 20000) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6831, (uint64_t)"lm/wordlm", 89, (uint64_t)"%u", a7, a8, v11);
        }
        uint64_t v10 = *((void *)this + 69);
        if ((*(_DWORD *)(*((void *)this + 48) + 4 * (v11 >> 5)) >> v11))
        {
          if (*(_WORD *)(v10 + 2 * v11))
          {
            int v12 = 1;
            unsigned __int16 v13 = 1;
            do
            {
              uint64_t v14 = (v12 + *(_DWORD *)(*((void *)this + 67) + 4 * v11) - 1);
              if (*((_DWORD *)this + 94))
              {
                uint64_t v14 = *(unsigned __int8 *)(*((void *)this + 73) + v14);
                uint64_t v15 = *((void *)this + 46);
              }
              else
              {
                uint64_t v15 = *((void *)this + 71);
              }
              if (*(_WORD *)(v15 + 2 * v14) != 20000 && *(_WORD *)(*((void *)this + 21) + 2 * v13) == 20000)
              {
                errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6842, (uint64_t)"lm/wordlm", 89, (uint64_t)"%u", a7, a8, v12);
                uint64_t v10 = *((void *)this + 69);
              }
              int v12 = ++v13;
            }
            while (v13 <= *(unsigned __int16 *)(v10 + 2 * v11));
          }
        }
        else if (*(_WORD *)(v10 + 2 * v11))
        {
          unsigned int v16 = 0;
          do
          {
            unsigned int SearchSuccIdForIndex = BigramData::getSearchSuccIdForIndex(v9, v11, v16);
            if (BigramData::getSearchScoreForIndex(v9, v11, v16) != 20000
              && *(_WORD *)(*((void *)this + 21) + 2 * SearchSuccIdForIndex) == 20000)
            {
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6857, (uint64_t)"lm/wordlm", 89, (uint64_t)"%u", a7, a8, SearchSuccIdForIndex);
            }
            ++v16;
            uint64_t v10 = *((void *)this + 69);
          }
          while (v16 < *(unsigned __int16 *)(v10 + 2 * v11));
        }
      }
      ++v11;
    }
    while (v11 < *((unsigned int *)this + 140));
  }
}

uint64_t WordLanguageModel::throwOnBadTriBoWt(WordLanguageModel *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v21[0] = 0;
  v21[1] = 0;
  v20[0] = 0;
  v20[1] = 0;
  v19[0] = 0;
  v19[1] = 0;
  unint64_t v8 = *((unsigned int *)this + 200);
  if (v8 < 2) {
    goto LABEL_19;
  }
  for (unint64_t i = 1; i < v8; ++i)
  {
    uint64_t v11 = *((void *)this + 99);
    int v12 = *(unsigned __int16 *)(v11 + 2 * i);
    if (!*(_WORD *)(v11 + 2 * i)) {
      continue;
    }
    int v13 = 0;
    do
    {
      uint64_t v14 = (*(_DWORD *)(*((void *)this + 101) + 4 * i) + v13);
      if (((*(_DWORD *)(*((void *)this + 109) + 4 * (v14 >> 5)) >> v14) & 1) == 0)
      {
        if (*(_WORD *)(*((void *)this + 130) + 2 * v14)) {
          goto LABEL_16;
        }
LABEL_15:
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6909, (uint64_t)"lm/wordlm", 88, (uint64_t)"%u %u %d", a7, a8, i);
        goto LABEL_16;
      }
      if (!*(_WORD *)(*((void *)this + 130) + 2 * v14)) {
        goto LABEL_15;
      }
      unsigned __int16 v15 = 1;
      while (1)
      {
        uint64_t v16 = *(_DWORD *)(*((void *)this + 128) + 4 * v14) + v15 - 1;
        if (*((_DWORD *)this + 196))
        {
          uint64_t v16 = *(unsigned __int8 *)(*((void *)this + 134) + v16);
          uint64_t v17 = *((void *)this + 97);
        }
        else
        {
          uint64_t v17 = *((void *)this + 132);
        }
        if (*(_WORD *)(v17 + 2 * v16) != 20000) {
          break;
        }
        if (*(unsigned __int16 *)(*((void *)this + 130) + 2 * v14) < ++v15) {
          goto LABEL_15;
        }
      }
LABEL_16:
      ++v13;
    }
    while (v13 != v12);
    unint64_t v8 = *((unsigned int *)this + 200);
  }
LABEL_19:
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v19);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v20);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v21);
}

void sub_213FB1ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void WordLanguageModel::verifyUniScForTriSc(WordLanguageModel *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 200) >= 2u)
  {
    uint64_t v9 = (WordLanguageModel *)((char *)this + 744);
    unint64_t v10 = 1;
    do
    {
      int v21 = *(unsigned __int16 *)(*((void *)this + 99) + 2 * v10);
      if (*(_WORD *)(*((void *)this + 99) + 2 * v10))
      {
        if (*(_WORD *)(*((void *)this + 21) + 2 * v10) != 20000
          || (errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6923, (uint64_t)"lm/wordlm", 89, (uint64_t)"%u", a7, a8, v10), int v21 = *(unsigned __int16 *)(*((void *)this + 99) + 2 * v10), *(_WORD *)(*((void *)this + 99) + 2 * v10)))
        {
          int v11 = 0;
          unint64_t v20 = v10;
          do
          {
            uint64_t v12 = (*(_DWORD *)(*((void *)this + 101) + 4 * v10) + v11);
            if (*(_WORD *)(*((void *)this + 21)
                          + 2 * *(unsigned __int16 *)(*((void *)this + 103) + 2 * v12)) == 20000)
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6935, (uint64_t)"lm/wordlm", 89, (uint64_t)"%u", a7, a8, *(_WORD *)(*((void *)this + 103) + 2 * v12));
            unsigned int v13 = *(unsigned __int16 *)(*((void *)this + 130) + 2 * v12);
            if ((*(_DWORD *)(*((void *)this + 109) + 4 * (v12 >> 5)) >> v12))
            {
              if (*(_WORD *)(*((void *)this + 130) + 2 * v12))
              {
                int v14 = 1;
                unsigned __int16 v15 = 1;
                do
                {
                  uint64_t v16 = (v14 + *(_DWORD *)(*((void *)this + 128) + 4 * v12) - 1);
                  if (*((_DWORD *)this + 196))
                  {
                    uint64_t v16 = *(unsigned __int8 *)(*((void *)this + 134) + v16);
                    uint64_t v17 = *((void *)this + 97);
                  }
                  else
                  {
                    uint64_t v17 = *((void *)this + 132);
                  }
                  if (*(_WORD *)(v17 + 2 * v16) != 20000 && *(_WORD *)(*((void *)this + 21) + 2 * v15) == 20000) {
                    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6950, (uint64_t)"lm/wordlm", 89, (uint64_t)"%u", a7, a8, v14);
                  }
                  int v14 = ++v15;
                }
                while (v15 <= v13);
              }
            }
            else if (*(_WORD *)(*((void *)this + 130) + 2 * v12))
            {
              int v18 = 0;
              do
              {
                unsigned int SearchSuccIdForIndex = TrigramData::getSearchSuccIdForIndex(v9, v12, v18);
                if (*(_WORD *)(*((void *)this + 21) + 2 * SearchSuccIdForIndex) == 20000) {
                  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6964, (uint64_t)"lm/wordlm", 89, (uint64_t)"%u", a7, a8, SearchSuccIdForIndex);
                }
                ++v18;
              }
              while (v13 != v18);
            }
            ++v11;
            unint64_t v10 = v20;
          }
          while (v11 != v21);
        }
      }
      ++v10;
    }
    while (v10 < *((unsigned int *)this + 200));
  }
}

void WordLanguageModel::verifyUniScForQuadSc(WordLanguageModel *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 322) >= 2u)
  {
    uint64_t v9 = (WordLanguageModel *)((char *)this + 1232);
    uint64_t v34 = (char *)this + 1496;
    unsigned int v28 = (char *)this + 1736;
    uint64_t v29 = (char *)this + 1672;
    uint64_t v30 = (char *)this + 1512;
    unint64_t v10 = 1;
    do
    {
      int v26 = *(unsigned __int16 *)(*((void *)this + 160) + 2 * v10);
      if (*(_WORD *)(*((void *)this + 160) + 2 * v10))
      {
        if (*(_WORD *)(*((void *)this + 21) + 2 * v10) != 20000
          || (errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6980, (uint64_t)"lm/wordlm", 89, (uint64_t)"%u", a7, a8, v10), int v26 = *(unsigned __int16 *)(*((void *)this + 160) + 2 * v10), *(_WORD *)(*((void *)this + 160) + 2 * v10)))
        {
          int v11 = 0;
          unint64_t v25 = v10;
          do
          {
            int v27 = v11;
            uint64_t v12 = (*(_DWORD *)(*((void *)this + 162) + 4 * v10) + v11);
            if (*(_WORD *)(*((void *)this + 21)
                          + 2 * *(unsigned __int16 *)(*((void *)this + 164) + 2 * v12)) == 20000)
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6991, (uint64_t)"lm/wordlm", 89, (uint64_t)"%u", a7, a8, *(_WORD *)(*((void *)this + 164) + 2 * v12));
            int v31 = *(unsigned __int16 *)(*((void *)this + 166) + 2 * v12);
            if (*(_WORD *)(*((void *)this + 166) + 2 * v12))
            {
              int v13 = 0;
              uint64_t v33 = v12 >> 5;
              int v32 = 1 << v12;
              do
              {
                uint64_t v14 = *(unsigned int *)(*((void *)this + 185) + 4 * v12);
                int v15 = *((_DWORD *)this + 308);
                int v16 = *(_DWORD *)(*((void *)this + 185) + 4 * v12);
                uint64_t v17 = v34;
                if (v15)
                {
                  int v16 = *(_DWORD *)(*((void *)this + 185) + 4 * v12);
                  uint64_t v17 = v34;
                  if ((*(_DWORD *)(*((void *)this + 168) + 4 * v33) & v32) != 0)
                  {
                    int v16 = *(_DWORD *)(*((void *)this + 207) + 4 * v14);
                    uint64_t v17 = v29;
                  }
                }
                uint64_t v18 = *(unsigned __int16 *)(*v17 + 2 * (v16 + v13));
                if (*(_WORD *)(*((void *)this + 21) + 2 * v18) == 20000)
                {
                  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 6999, (uint64_t)"lm/wordlm", 89, (uint64_t)"%u", a7, a8, v18);
                  LODWORD(v14) = *(_DWORD *)(*((void *)this + 185) + 4 * v12);
                  int v15 = *((_DWORD *)this + 308);
                }
                if (v15 && (*(_DWORD *)(*((void *)this + 168) + 4 * v33) & v32) != 0)
                {
                  LODWORD(v14) = *(_DWORD *)(*((void *)this + 207) + 4 * v14);
                  uint64_t v19 = (uint64_t *)v28;
                }
                else
                {
                  uint64_t v19 = (uint64_t *)v30;
                }
                unsigned int v20 = v14 + v13;
                uint64_t v21 = *v19;
                int v22 = *(unsigned __int16 *)(v21 + 2 * v20);
                if (*(_WORD *)(v21 + 2 * v20))
                {
                  int v23 = 0;
                  do
                  {
                    if (QuadgramData::getScoreForIndex(v9, v12, v13, v23) != 20000)
                    {
                      unsigned int Quad3SuccIdForIndex = QuadgramData::getQuad3SuccIdForIndex(v9, v12, v13, v23);
                      if (*(_WORD *)(*((void *)this + 21) + 2 * Quad3SuccIdForIndex) == 20000) {
                        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 7015, (uint64_t)"lm/wordlm", 89, (uint64_t)"%u", a7, a8, Quad3SuccIdForIndex);
                      }
                    }
                    ++v23;
                  }
                  while (v22 != v23);
                }
                ++v13;
              }
              while (v13 != v31);
            }
            int v11 = v27 + 1;
            unint64_t v10 = v25;
          }
          while (v27 + 1 != v26);
        }
      }
      ++v10;
    }
    while (v10 < *((unsigned int *)this + 322));
  }
}

void WordLanguageModel::maybeRepairOutOfRangeWordIdsOrThrow(WordLanguageModel *this, int a2, int a3, unsigned int a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a4 != 0xFFFFFF && a5 != 0xFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(*((void *)this + 2) + 388);
    if (v10)
    {
      unint64_t v13 = 0;
      unint64_t v14 = a4;
      unint64_t v15 = a5;
      while (1)
      {
        uint64_t v16 = *((void *)this + 2);
        if (v13 >= *(unsigned int *)(v16 + 388) || !*(unsigned char *)(*(void *)(v16 + 104) + v13)) {
          goto LABEL_32;
        }
        BOOL v17 = v13 < v14 || v13 > v15;
        int v18 = !v17;
        if (v18 == a3) {
          goto LABEL_32;
        }
        if (a2)
        {
          WordLanguageModel::recordWordIdInvalidLmIdUsage(this, v13);
          if (*((unsigned char *)this + 276)) {
            WordLanguageModel::recordWordIdInvalidContextLmIdUsage(this, v13);
          }
          goto LABEL_32;
        }
        if (*((_DWORD *)this + 32)) {
          break;
        }
        if (*((_DWORD *)this + 36))
        {
          int v19 = *(__int16 *)(*((void *)this + 17) + 2 * v13);
LABEL_23:
          if (v19 == -1) {
            goto LABEL_25;
          }
LABEL_24:
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 10027, (uint64_t)"lm/wordlm", 90, (uint64_t)"%u", a7, a8, v13);
          goto LABEL_25;
        }
        if (*(unsigned __int8 *)(*((void *)this + 19) + v13) != 255) {
          goto LABEL_24;
        }
LABEL_25:
        if (*((unsigned char *)this + 276))
        {
          if (*((_DWORD *)this + 72))
          {
            int v20 = *(_DWORD *)(*((void *)this + 35) + 4 * v13);
          }
          else
          {
            if (!*((_DWORD *)this + 76))
            {
              if (*(unsigned __int8 *)(*((void *)this + 39) + v13) == 255) {
                goto LABEL_32;
              }
LABEL_31:
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 10034, (uint64_t)"lm/wordlm", 90, (uint64_t)"%u", a7, a8, v13);
              goto LABEL_32;
            }
            int v20 = *(__int16 *)(*((void *)this + 37) + 2 * v13);
          }
          if (v20 != -1) {
            goto LABEL_31;
          }
        }
LABEL_32:
        if (v10 == ++v13) {
          return;
        }
      }
      int v19 = *(_DWORD *)(*((void *)this + 15) + 4 * v13);
      goto LABEL_23;
    }
  }
}

uint64_t WordLanguageModel::saveBigramMembersBinary(WordLanguageModel *this, DgnStream *a2, unsigned int *a3)
{
  writeObject((uint64_t)a2, (int *)this + 66, a3);
  writeObject((uint64_t)a2, (int *)this + 67, a3);
  writeObject((uint64_t)a2, (int *)this + 68, a3);
  writeObject((uint64_t)a2, (unsigned __int8 *)this + 276, a3);
  writeObject<unsigned int>((uint64_t)a2, (uint64_t)this + 280, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 296, a3);
  writeObject<unsigned char>((uint64_t)a2, (uint64_t)this + 312, a3);
  writeObject<unsigned short>((uint64_t)a2, (uint64_t)this + 328, a3);

  return writeObject<short>((uint64_t)a2, (uint64_t)this + 344, a3);
}

uint64_t WordLanguageModel::recordWordIdLmIdUsage(WordLanguageModel *this, unsigned int a2, int a3)
{
  if (!*((_DWORD *)this + 32) && !*((_DWORD *)this + 36) && !*((_DWORD *)this + 40))
  {
    if (*((_DWORD *)this + 41))
    {
      uint64_t v6 = 0;
    }
    else
    {
      DgnPrimArray<char>::reallocElts((uint64_t)this + 152, 1, 1);
      uint64_t v6 = *((unsigned int *)this + 40);
    }
    *(unsigned char *)(*((void *)this + 19) + v6) = -1;
    ++*((_DWORD *)this + 40);
  }
  uint64_t result = WordLanguageModel::maybeUncompactWordIdToLmIdArray((uint64_t)this, a3);
  unsigned int v8 = *((_DWORD *)this + 32);
  if (v8)
  {
    if (v8 <= a2)
    {
      do
      {
        if (v8 == *((_DWORD *)this + 33))
        {
          uint64_t result = DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 120, 1, 1);
          unsigned int v8 = *((_DWORD *)this + 32);
        }
        uint64_t v9 = *((void *)this + 15);
        *(_DWORD *)(v9 + 4 * vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = -1;
        unsigned int v8 = *((_DWORD *)this + 32) + 1;
        *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v8;
      }
      while (v8 <= a2);
    }
    else
    {
      uint64_t v9 = *((void *)this + 15);
    }
    *(_DWORD *)(v9 + 4 * a2) = a3;
  }
  else
  {
    unsigned int v10 = *((_DWORD *)this + 36);
    if (v10)
    {
      if (v10 <= a2)
      {
        do
        {
          if (v10 == *((_DWORD *)this + 37))
          {
            uint64_t result = DgnPrimArray<short>::reallocElts((uint64_t)this + 136, 1, 1);
            unsigned int v10 = *((_DWORD *)this + 36);
          }
          uint64_t v11 = *((void *)this + 17);
          *(_WORD *)(v11 + 2 * v10++) = -1;
          *((_DWORD *)this + 36) = v10;
        }
        while (v10 <= a2);
      }
      else
      {
        uint64_t v11 = *((void *)this + 17);
      }
      *(_WORD *)(v11 + 2 * a2) = a3;
    }
    else
    {
      for (unsigned int i = *((_DWORD *)this + 40); i <= a2; *((_DWORD *)this + 40) = i)
      {
        if (i == *((_DWORD *)this + 41))
        {
          uint64_t result = DgnPrimArray<char>::reallocElts((uint64_t)this + 152, 1, 1);
          unsigned int i = *((_DWORD *)this + 40);
        }
        *(unsigned char *)(*((void *)this + 19) + i) = -1;
        unsigned int i = *((_DWORD *)this + 40) + 1;
      }
      *(unsigned char *)(*((void *)this + 19) + a2) = a3;
    }
  }
  return result;
}

uint64_t WordLanguageModel::recordWordIdContextLmIdUsage(WordLanguageModel *this, unsigned int a2, int a3)
{
  if (!*((_DWORD *)this + 72) && !*((_DWORD *)this + 76) && !*((_DWORD *)this + 80))
  {
    if (*((_DWORD *)this + 81))
    {
      uint64_t v6 = 0;
    }
    else
    {
      DgnPrimArray<char>::reallocElts((uint64_t)this + 312, 1, 1);
      uint64_t v6 = *((unsigned int *)this + 80);
    }
    *(unsigned char *)(*((void *)this + 39) + v6) = -1;
    ++*((_DWORD *)this + 80);
  }
  uint64_t result = WordLanguageModel::maybeUncompactWordIdToContextLmIdArray((uint64_t)this, a3);
  unsigned int v8 = *((_DWORD *)this + 72);
  if (v8)
  {
    if (v8 <= a2)
    {
      do
      {
        if (v8 == *((_DWORD *)this + 73))
        {
          uint64_t result = DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 280, 1, 1);
          unsigned int v8 = *((_DWORD *)this + 72);
        }
        uint64_t v9 = *((void *)this + 35);
        *(_DWORD *)(v9 + 4 * vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = -1;
        unsigned int v8 = *((_DWORD *)this + 72) + 1;
        *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = v8;
      }
      while (v8 <= a2);
    }
    else
    {
      uint64_t v9 = *((void *)this + 35);
    }
    *(_DWORD *)(v9 + 4 * a2) = a3;
  }
  else
  {
    unsigned int v10 = *((_DWORD *)this + 76);
    if (v10)
    {
      if (v10 <= a2)
      {
        do
        {
          if (v10 == *((_DWORD *)this + 77))
          {
            uint64_t result = DgnPrimArray<short>::reallocElts((uint64_t)this + 296, 1, 1);
            unsigned int v10 = *((_DWORD *)this + 76);
          }
          uint64_t v11 = *((void *)this + 37);
          *(_WORD *)(v11 + 2 * v10++) = -1;
          *((_DWORD *)this + 76) = v10;
        }
        while (v10 <= a2);
      }
      else
      {
        uint64_t v11 = *((void *)this + 37);
      }
      *(_WORD *)(v11 + 2 * a2) = a3;
    }
    else
    {
      for (unsigned int i = *((_DWORD *)this + 80); i <= a2; *((_DWORD *)this + 80) = i)
      {
        if (i == *((_DWORD *)this + 81))
        {
          uint64_t result = DgnPrimArray<char>::reallocElts((uint64_t)this + 312, 1, 1);
          unsigned int i = *((_DWORD *)this + 80);
        }
        *(unsigned char *)(*((void *)this + 39) + i) = -1;
        unsigned int i = *((_DWORD *)this + 80) + 1;
      }
      *(unsigned char *)(*((void *)this + 39) + a2) = a3;
    }
  }
  return result;
}

_DWORD *WordLanguageModel::recordWordIdInvalidLmIdUsage(_DWORD *this, unsigned int a2)
{
  uint64_t v3 = (uint64_t)this;
  unsigned int v4 = this[32];
  if (v4
    || !this[36]
    && !this[40]
    && (!this[41]
      ? (this = (_DWORD *)DgnPrimArray<char>::reallocElts((uint64_t)(this + 38), 1, 1), uint64_t v9 = *(unsigned int *)(v3 + 160))
      : (uint64_t v9 = 0),
        *(unsigned char *)(*(void *)(v3 + 152) + v9) = -1,
        ++*(_DWORD *)(v3 + 160),
        (unsigned int v4 = *(_DWORD *)(v3 + 128)) != 0))
  {
    if (v4 <= a2)
    {
      do
      {
        if (v4 == *(_DWORD *)(v3 + 132))
        {
          this = (_DWORD *)DgnPrimArray<unsigned int>::reallocElts(v3 + 120, 1, 1);
          unsigned int v4 = *(_DWORD *)(v3 + 128);
        }
        uint64_t v5 = *(void *)(v3 + 120);
        *(_DWORD *)(v5 + 4 * v4) = -1;
        unsigned int v4 = *(_DWORD *)(v3 + 128) + 1;
        *(_DWORD *)(v3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 128) = v4;
      }
      while (v4 <= a2);
    }
    else
    {
      uint64_t v5 = *(void *)(v3 + 120);
    }
    *(_DWORD *)(v5 + 4 * a2) = -1;
  }
  else
  {
    unsigned int v6 = *(_DWORD *)(v3 + 144);
    if (v6)
    {
      if (v6 <= a2)
      {
        do
        {
          if (v6 == *(_DWORD *)(v3 + 148))
          {
            this = (_DWORD *)DgnPrimArray<short>::reallocElts(v3 + 136, 1, 1);
            unsigned int v6 = *(_DWORD *)(v3 + 144);
          }
          uint64_t v7 = *(void *)(v3 + 136);
          *(_WORD *)(v7 + 2 * v6++) = -1;
          *(_DWORD *)(v3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 144) = v6;
        }
        while (v6 <= a2);
      }
      else
      {
        uint64_t v7 = *(void *)(v3 + 136);
      }
      *(_WORD *)(v7 + 2 * a2) = -1;
    }
    else
    {
      for (unsigned int i = *(_DWORD *)(v3 + 160); i <= a2; *(_DWORD *)(v3 + 160) = i)
      {
        if (i == *(_DWORD *)(v3 + 164))
        {
          this = (_DWORD *)DgnPrimArray<char>::reallocElts(v3 + 152, 1, 1);
          unsigned int i = *(_DWORD *)(v3 + 160);
        }
        *(unsigned char *)(*(void *)(v3 + 152) + i) = -1;
        unsigned int i = *(_DWORD *)(v3 + 160) + 1;
      }
      *(unsigned char *)(*(void *)(v3 + 152) + a2) = -1;
    }
  }
  return this;
}

_DWORD *WordLanguageModel::recordWordIdInvalidContextLmIdUsage(_DWORD *this, unsigned int a2)
{
  uint64_t v3 = (uint64_t)this;
  unsigned int v4 = this[72];
  if (v4
    || !this[76]
    && !this[80]
    && (!this[81]
      ? (this = (_DWORD *)DgnPrimArray<char>::reallocElts((uint64_t)(this + 78), 1, 1), uint64_t v9 = *(unsigned int *)(v3 + 320))
      : (uint64_t v9 = 0),
        *(unsigned char *)(*(void *)(v3 + 312) + v9) = -1,
        ++*(_DWORD *)(v3 + 320),
        (unsigned int v4 = *(_DWORD *)(v3 + 288)) != 0))
  {
    if (v4 <= a2)
    {
      do
      {
        if (v4 == *(_DWORD *)(v3 + 292))
        {
          this = (_DWORD *)DgnPrimArray<unsigned int>::reallocElts(v3 + 280, 1, 1);
          unsigned int v4 = *(_DWORD *)(v3 + 288);
        }
        uint64_t v5 = *(void *)(v3 + 280);
        *(_DWORD *)(v5 + 4 * v4) = -1;
        unsigned int v4 = *(_DWORD *)(v3 + 288) + 1;
        *(_DWORD *)(v3 + 2HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 88) = v4;
      }
      while (v4 <= a2);
    }
    else
    {
      uint64_t v5 = *(void *)(v3 + 280);
    }
    *(_DWORD *)(v5 + 4 * a2) = -1;
  }
  else
  {
    unsigned int v6 = *(_DWORD *)(v3 + 304);
    if (v6)
    {
      if (v6 <= a2)
      {
        do
        {
          if (v6 == *(_DWORD *)(v3 + 308))
          {
            this = (_DWORD *)DgnPrimArray<short>::reallocElts(v3 + 296, 1, 1);
            unsigned int v6 = *(_DWORD *)(v3 + 304);
          }
          uint64_t v7 = *(void *)(v3 + 296);
          *(_WORD *)(v7 + 2 * v6++) = -1;
          *(_DWORD *)(v3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304) = v6;
        }
        while (v6 <= a2);
      }
      else
      {
        uint64_t v7 = *(void *)(v3 + 296);
      }
      *(_WORD *)(v7 + 2 * a2) = -1;
    }
    else
    {
      for (unsigned int i = *(_DWORD *)(v3 + 320); i <= a2; *(_DWORD *)(v3 + 320) = i)
      {
        if (i == *(_DWORD *)(v3 + 324))
        {
          this = (_DWORD *)DgnPrimArray<char>::reallocElts(v3 + 312, 1, 1);
          unsigned int i = *(_DWORD *)(v3 + 320);
        }
        *(unsigned char *)(*(void *)(v3 + 312) + i) = -1;
        unsigned int i = *(_DWORD *)(v3 + 320) + 1;
      }
      *(unsigned char *)(*(void *)(v3 + 312) + a2) = -1;
    }
  }
  return this;
}

unint64_t WordLanguageModel::constructLmIdToWordIdMapping(unint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  unsigned int v6 = *(_DWORD *)(result + 104);
  unsigned int v7 = *(_DWORD *)(a2 + 12);
  unsigned int v8 = v6;
  if (v6 > v7)
  {
    uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a2, v6 - v7, 0);
    unsigned int v8 = *(_DWORD *)(v5 + 104);
  }
  *(_DWORD *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v6;
  if (*(unsigned char *)(v5 + 276))
  {
    unsigned int v9 = *(_DWORD *)(a3 + 12);
    unsigned int v10 = v8;
    if (v8 > v9)
    {
      uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a3, v8 - v9, 0);
      unsigned int v10 = *(_DWORD *)(v5 + 104);
    }
    *(_DWORD *)(a3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v8;
    unsigned int v8 = v10;
  }
  if (v8)
  {
    unint64_t v11 = 0;
    uint64_t v12 = *(void *)a2;
    int v13 = *(unsigned __int8 *)(v5 + 276);
    do
    {
      *(_DWORD *)(v12 + 4 * v11) = 0xFFFFFF;
      if (v13) {
        *(_DWORD *)(*(void *)a3 + 4 * v11) = 0xFFFFFF;
      }
      ++v11;
    }
    while (v11 < *(unsigned int *)(v5 + 104));
  }
  int v14 = *(_DWORD *)(v5 + 128);
  if (v14 || (int v14 = *(_DWORD *)(v5 + 144)) != 0 || (int v14 = *(_DWORD *)(v5 + 160)) != 0)
  {
    unint64_t v15 = 0;
    uint64_t v16 = *(void *)(v5 + 16);
    do
    {
      if (v15 < *(unsigned int *)(v16 + 388)
        && *(unsigned char *)(*(void *)(v16 + 104) + v15)
        && v15 == *(_DWORD *)(*(void *)(v16 + 256) + 4 * v15))
      {
        if (*(_DWORD *)(v5 + 128))
        {
          unsigned int v17 = *(_DWORD *)(*(void *)(v5 + 120) + 4 * v15);
        }
        else
        {
          if (*(_DWORD *)(v5 + 144))
          {
            unsigned int v17 = *(unsigned __int16 *)(*(void *)(v5 + 136) + 2 * v15);
            BOOL v18 = v17 == 0xFFFF;
          }
          else
          {
            unsigned int v17 = *(unsigned __int8 *)(*(void *)(v5 + 152) + v15);
            BOOL v18 = v17 == 255;
          }
          if (v18) {
            unsigned int v17 = -1;
          }
        }
        if (v17 < *(_DWORD *)(v5 + 104) && *(_DWORD *)(*(void *)a2 + 4 * v17) == 0xFFFFFF) {
          *(_DWORD *)(*(void *)a2 + 4 * v17) = v15;
        }
        if (*(unsigned char *)(v5 + 276))
        {
          if (*(_DWORD *)(v5 + 288))
          {
            unsigned int v19 = *(_DWORD *)(*(void *)(v5 + 280) + 4 * v15);
          }
          else
          {
            if (*(_DWORD *)(v5 + 304))
            {
              unsigned int v19 = *(unsigned __int16 *)(*(void *)(v5 + 296) + 2 * v15);
              BOOL v20 = v19 == 0xFFFF;
            }
            else
            {
              unsigned int v19 = *(unsigned __int8 *)(*(void *)(v5 + 312) + v15);
              BOOL v20 = v19 == 255;
            }
            if (v20) {
              unsigned int v19 = -1;
            }
          }
          if (v19 < *(_DWORD *)(v5 + 104) && *(_DWORD *)(*(void *)a3 + 4 * v19) == 0xFFFFFF) {
            *(_DWORD *)(*(void *)a3 + 4 * v19) = v15;
          }
        }
      }
      ++v15;
    }
    while (v14 != v15);
  }
  uint64_t v21 = *(unsigned int *)(v5 + 112);
  if (v21 != -1 && *(_DWORD *)(*(void *)a2 + 4 * v21) == 0xFFFFFF)
  {
    *(_DWORD *)(*(void *)a2 + 4 * v21) = 16777214;
    if (*(unsigned char *)(v5 + 276)) {
      *(_DWORD *)(*(void *)a3 + 4 * *(unsigned int *)(v5 + BitArray::~BitArray((QuadgramData *)((char *)this + 112)) = 16777214;
    }
  }
  uint64_t v22 = *(unsigned int *)(v5 + 116);
  if (v22 != -1 && *(_DWORD *)(*(void *)a2 + 4 * v22) == 0xFFFFFF)
  {
    *(_DWORD *)(*(void *)a2 + 4 * v22) = 16777213;
    if (*(unsigned char *)(v5 + 276)) {
      *(_DWORD *)(*(void *)a3 + 4 * *(unsigned int *)(v5 + 116)) = 16777213;
    }
  }
  return result;
}

unint64_t WordLanguageModel::getWordIdWithMapping(uint64_t a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 == -1) {
    return 0xFFFFFFLL;
  }
  if (a2 == -2) {
    return 16777212;
  }
  if (a3 && *(unsigned char *)(a1 + 276))
  {
    if (*(_DWORD *)(a5 + 8) > a2) {
      return *(unsigned int *)(*(void *)a5 + 4 * a2);
    }
    a3 = 1;
  }
  else if (*(_DWORD *)(a4 + 8) > a2)
  {
    uint64_t v5 = *(unsigned int *)(*(void *)a4 + 4 * a2);
    if (v5 == 16777214 && (a3 & 1) == 0)
    {
      if (*(_DWORD *)(a1 + 112) == *(_DWORD *)(a1 + 116)) {
        return 16777213;
      }
      else {
        return 16777214;
      }
    }
    return v5;
  }
  return WordLanguageModel::getWordId((WordLanguageModel *)a1, a2, a3);
}

uint64_t mrec_qsort_r<DiskNgramContextBiTriIsolatedCmp>(uint64_t result, unint64_t a2, unint64_t a3, const void *a4)
{
  unint64_t v5 = a2;
  unsigned int v6 = (char *)result;
  uint64_t v7 = -(uint64_t)a3;
  if (((result | a3) & 7) != 0) {
    int v8 = 2;
  }
  else {
    int v8 = a3 != 8;
  }
  BOOL v108 = ((result | a3) & 7) == 0;
  int v109 = v8;
  if (a2 < 7)
  {
LABEL_118:
    if ((uint64_t)(v5 * a3) > (uint64_t)a3)
    {
      uint64_t v79 = &v6[v5 * a3];
      unsigned int v80 = &v6[a3];
      unint64_t v81 = v6;
      do
      {
        if (v80 > v6)
        {
          uint64_t v82 = v81;
          uint64_t v83 = (uint64_t *)v80;
          do
          {
            int v84 = v83;
            uint64_t v83 = (uint64_t *)((char *)v83 + v7);
            uint64_t result = DiskNgramContextBiTriIsolatedCmp::compareElements((DiskNgramContextBiTriIsolatedCmp *)result, v83, v84, a4);
            if ((int)result < 1) {
              break;
            }
            if (v109)
            {
              if (v108)
              {
                uint64_t v85 = 0;
                uint64_t v86 = (uint64_t)v82 + a3;
                do
                {
                  uint64_t v87 = *(void *)(v86 + 8 * v85);
                  *(void *)(v86 + 8 * v85) = v82[v85];
                  v82[v85++] = v87;
                }
                while (a3 >> 3 != v85);
              }
              else
              {
                uint64_t v89 = 0;
                uint64_t v90 = (uint64_t)v82 + a3;
                do
                {
                  char v91 = *(unsigned char *)(v90 + v89);
                  *(unsigned char *)(v90 + v89) = *((unsigned char *)v82 + v89);
                  *((unsigned char *)v82 + v89++) = v91;
                }
                while (a3 != v89);
              }
            }
            else
            {
              uint64_t v88 = *v84;
              uint64_t *v84 = *v83;
              uint64_t *v83 = v88;
            }
            uint64_t v82 = (void *)((char *)v82 + v7);
          }
          while (v83 > (uint64_t *)v6);
        }
        v80 += a3;
        unint64_t v81 = (void *)((char *)v81 + a3);
      }
      while (v80 < v79);
    }
    return result;
  }
  BOOL v106 = a3 != 8;
  unint64_t v9 = a3 >> 3;
  while (1)
  {
    unsigned int v10 = &v6[(v5 >> 1) * a3];
    if (v5 == 7) {
      goto LABEL_45;
    }
    unint64_t v11 = &v6[(v5 - 1) * a3];
    if (v5 >= 0x29)
    {
      uint64_t v105 = &v6[(v5 - 1) * a3];
      unint64_t v12 = (v5 >> 3) * a3;
      int v13 = (DiskNgramContextBiTriIsolatedCmp *)DiskNgramContextBiTriIsolatedCmp::compareElements((DiskNgramContextBiTriIsolatedCmp *)result, v6, &v6[v12], a4);
      int v14 = (int)v13;
      uint64_t v107 = &v6[v12];
      uint64_t v16 = DiskNgramContextBiTriIsolatedCmp::compareElements(v13, &v6[v12], &v6[2 * v12], v15);
      if (v14 < 0)
      {
        if ((v16 & 0x80000000) == 0)
        {
          uint64_t v16 = DiskNgramContextBiTriIsolatedCmp::compareElements((DiskNgramContextBiTriIsolatedCmp *)v16, v6, &v6[2 * v12], v17);
          if ((int)v16 >= 0) {
            BOOL v18 = v6;
          }
          else {
            BOOL v18 = &v6[2 * v12];
          }
          goto LABEL_18;
        }
      }
      else if ((int)v16 <= 0)
      {
        uint64_t v16 = DiskNgramContextBiTriIsolatedCmp::compareElements((DiskNgramContextBiTriIsolatedCmp *)v16, v6, &v6[2 * v12], v17);
        if ((int)v16 >= 0) {
          BOOL v18 = &v6[2 * v12];
        }
        else {
          BOOL v18 = v6;
        }
LABEL_18:
        uint64_t v107 = v18;
      }
      BOOL v20 = (DiskNgramContextBiTriIsolatedCmp *)DiskNgramContextBiTriIsolatedCmp::compareElements((DiskNgramContextBiTriIsolatedCmp *)v16, &v10[-v12], &v6[(v5 >> 1) * a3], v17);
      int v21 = (int)v20;
      uint64_t v23 = DiskNgramContextBiTriIsolatedCmp::compareElements(v20, &v6[(v5 >> 1) * a3], &v10[v12], v22);
      if (v21 < 0)
      {
        if ((v23 & 0x80000000) == 0)
        {
          uint64_t v23 = DiskNgramContextBiTriIsolatedCmp::compareElements((DiskNgramContextBiTriIsolatedCmp *)v23, &v10[-v12], &v10[v12], v24);
          if ((int)v23 >= 0) {
            v10 -= v12;
          }
          else {
            v10 += v12;
          }
        }
      }
      else if ((int)v23 <= 0)
      {
        uint64_t v23 = DiskNgramContextBiTriIsolatedCmp::compareElements((DiskNgramContextBiTriIsolatedCmp *)v23, &v10[-v12], &v10[v12], v24);
        if ((int)v23 >= 0) {
          v10 += v12;
        }
        else {
          v10 -= v12;
        }
      }
      unint64_t v25 = &v105[-2 * v12];
      unint64_t v11 = &v105[-v12];
      int v26 = (DiskNgramContextBiTriIsolatedCmp *)DiskNgramContextBiTriIsolatedCmp::compareElements((DiskNgramContextBiTriIsolatedCmp *)v23, v25, &v105[-v12], v24);
      int v27 = (int)v26;
      uint64_t result = DiskNgramContextBiTriIsolatedCmp::compareElements(v26, &v105[-v12], v105, v28);
      if (v27 < 0)
      {
        unsigned int v19 = v107;
        if ((result & 0x80000000) == 0)
        {
          unint64_t v11 = &v6[(v5 - 1) * a3];
          uint64_t result = DiskNgramContextBiTriIsolatedCmp::compareElements((DiskNgramContextBiTriIsolatedCmp *)result, v25, v105, a4);
          if ((int)result >= 0) {
            unint64_t v11 = v25;
          }
        }
      }
      else
      {
        unsigned int v19 = v107;
        if ((int)result <= 0)
        {
          unint64_t v11 = &v6[(v5 - 1) * a3];
          uint64_t result = DiskNgramContextBiTriIsolatedCmp::compareElements((DiskNgramContextBiTriIsolatedCmp *)result, v25, v105, a4);
          if ((int)result < 0) {
            unint64_t v11 = v25;
          }
        }
      }
      goto LABEL_36;
    }
    unsigned int v19 = v6;
LABEL_36:
    uint64_t v29 = (DiskNgramContextBiTriIsolatedCmp *)DiskNgramContextBiTriIsolatedCmp::compareElements((DiskNgramContextBiTriIsolatedCmp *)result, v19, v10, a4);
    int v30 = (int)v29;
    uint64_t result = DiskNgramContextBiTriIsolatedCmp::compareElements(v29, v10, v11, v31);
    if (v30 < 0)
    {
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = DiskNgramContextBiTriIsolatedCmp::compareElements((DiskNgramContextBiTriIsolatedCmp *)result, v19, v11, a4);
        if ((int)result >= 0) {
          unsigned int v10 = v19;
        }
        else {
          unsigned int v10 = v11;
        }
      }
    }
    else if ((int)result <= 0)
    {
      uint64_t result = DiskNgramContextBiTriIsolatedCmp::compareElements((DiskNgramContextBiTriIsolatedCmp *)result, v19, v11, a4);
      if ((int)result >= 0) {
        unsigned int v10 = v11;
      }
      else {
        unsigned int v10 = v19;
      }
    }
LABEL_45:
    if (v109)
    {
      if (v108)
      {
        int v32 = v6;
        unint64_t v33 = a3 >> 3;
        do
        {
          uint64_t v34 = *(void *)v32;
          *(void *)int v32 = *(void *)v10;
          v32 += 8;
          *(void *)unsigned int v10 = v34;
          v10 += 8;
          --v33;
        }
        while (v33);
      }
      else
      {
        unint64_t v36 = a3;
        uint64_t v37 = v6;
        do
        {
          char v38 = *v37;
          *v37++ = *v10;
          *v10++ = v38;
          --v36;
        }
        while (v36);
      }
    }
    else
    {
      uint64_t v35 = *(void *)v6;
      *(void *)unsigned int v6 = *(void *)v10;
      *(void *)unsigned int v10 = v35;
    }
    int v39 = 0;
    unint64_t v40 = &v6[a3];
    __int16 v41 = &v6[(v5 - 1) * a3];
    int v42 = v41;
    uint64_t v43 = &v6[a3];
LABEL_54:
    while (v43 <= v42)
    {
      uint64_t result = DiskNgramContextBiTriIsolatedCmp::compareElements((DiskNgramContextBiTriIsolatedCmp *)result, v43, v6, a4);
      if ((int)result > 0) {
        break;
      }
      if (!result)
      {
        if (v109)
        {
          if (v108)
          {
            uint64_t v44 = 0;
            do
            {
              uint64_t v45 = *(void *)&v40[8 * v44];
              *(void *)&v40[8 * v44] = *(void *)&v43[8 * v44];
              *(void *)&v43[8 * v44++] = v45;
            }
            while (v9 != v44);
          }
          else
          {
            uint64_t v54 = 0;
            do
            {
              char v55 = v40[v54];
              v40[v54] = v43[v54];
              v43[v54++] = v55;
            }
            while (a3 != v54);
          }
        }
        else
        {
          uint64_t v53 = *(void *)v40;
          *(void *)unint64_t v40 = *(void *)v43;
          *(void *)uint64_t v43 = v53;
        }
        v40 += a3;
        int v39 = 1;
      }
      v43 += a3;
    }
    while (v43 <= v42)
    {
      uint64_t result = DiskNgramContextBiTriIsolatedCmp::compareElements((DiskNgramContextBiTriIsolatedCmp *)result, v42, v6, a4);
      if ((result & 0x80000000) != 0)
      {
        if (v109)
        {
          if (v108)
          {
            uint64_t v51 = 0;
            do
            {
              uint64_t v52 = *(void *)&v43[8 * v51];
              *(void *)&v43[8 * v51] = *(void *)&v42[8 * v51];
              *(void *)&v42[8 * v51++] = v52;
            }
            while (v9 != v51);
          }
          else
          {
            uint64_t v57 = 0;
            do
            {
              char v58 = v43[v57];
              v43[v57] = v42[v57];
              v42[v57++] = v58;
            }
            while (a3 != v57);
          }
        }
        else
        {
          uint64_t v56 = *(void *)v43;
          *(void *)uint64_t v43 = *(void *)v42;
          *(void *)int v42 = v56;
        }
        v43 += a3;
        v42 += v7;
        int v39 = 1;
        goto LABEL_54;
      }
      if (!result)
      {
        if (v109)
        {
          if (v108)
          {
            uint64_t v46 = 0;
            do
            {
              uint64_t v47 = *(void *)&v42[8 * v46];
              *(void *)&v42[8 * v46] = *(void *)&v41[8 * v46];
              *(void *)&v41[8 * v46++] = v47;
            }
            while (v9 != v46);
          }
          else
          {
            uint64_t v49 = 0;
            do
            {
              char v50 = v42[v49];
              v42[v49] = v41[v49];
              v41[v49++] = v50;
            }
            while (a3 != v49);
          }
        }
        else
        {
          uint64_t v48 = *(void *)v42;
          *(void *)int v42 = *(void *)v41;
          *(void *)__int16 v41 = v48;
        }
        v41 += v7;
        int v39 = 1;
      }
      v42 += v7;
    }
    int64_t v59 = v5 * a3;
    __int16 v60 = &v6[v5 * a3];
    if (!v39) {
      break;
    }
    int64_t v61 = v43 - v40;
    if (v40 - v6 >= v43 - v40) {
      unint64_t v62 = v43 - v40;
    }
    else {
      unint64_t v62 = v40 - v6;
    }
    if (v62)
    {
      if (v108)
      {
        float v63 = &v43[-v62];
        unint64_t v64 = v62 >> 3;
        char v65 = v6;
        do
        {
          uint64_t v66 = *(void *)v65;
          *(void *)char v65 = *(void *)v63;
          v65 += 8;
          *(void *)float v63 = v66;
          v63 += 8;
          --v64;
        }
        while (v64);
      }
      else
      {
        uint64_t v67 = -(uint64_t)v62;
        uint64_t v68 = v6;
        do
        {
          char v69 = *v68;
          *v68++ = v43[v67];
          v43[v67] = v69;
          BOOL v70 = __CFADD__(v67++, 1);
        }
        while (!v70);
      }
    }
    int64_t v71 = v41 - v42;
    if (v41 - v42 >= v60 - &v41[a3]) {
      unint64_t v72 = v60 - &v41[a3];
    }
    else {
      unint64_t v72 = v41 - v42;
    }
    if (v72)
    {
      if (v108)
      {
        unint64_t v73 = &v60[-v72];
        unint64_t v74 = v72 >> 3;
        do
        {
          uint64_t v75 = *(void *)v43;
          *(void *)uint64_t v43 = *(void *)v73;
          v43 += 8;
          *(void *)unint64_t v73 = v75;
          v73 += 8;
          --v74;
        }
        while (v74);
      }
      else
      {
        uint64_t v76 = -(uint64_t)v72;
        do
        {
          char v77 = *v43;
          *v43++ = v60[v76];
          v60[v76] = v77;
          BOOL v70 = __CFADD__(v76++, 1);
        }
        while (!v70);
      }
    }
    if (v61 > (uint64_t)a3) {
      uint64_t result = mrec_qsort_r<DiskNgramContextBiTriIsolatedCmp>(v6, v61 / a3, a3, a4);
    }
    if (v71 <= (uint64_t)a3) {
      return result;
    }
    unsigned int v6 = &v60[-v71];
    unint64_t v5 = v71 / a3;
    int v78 = v106;
    if (((v6 | a3) & 7) != 0) {
      int v78 = 2;
    }
    BOOL v108 = ((v6 | a3) & 7) == 0;
    int v109 = v78;
    if (v5 < 7) {
      goto LABEL_118;
    }
  }
  unint64_t v92 = &v6[a3];
  if (v59 > (uint64_t)a3)
  {
    unint64_t v93 = v6;
    do
    {
      if (v92 > v6)
      {
        unint64_t v94 = v93;
        int v95 = (uint64_t *)v92;
        do
        {
          uint64_t v96 = v95;
          int v95 = (uint64_t *)((char *)v95 + v7);
          uint64_t result = DiskNgramContextBiTriIsolatedCmp::compareElements((DiskNgramContextBiTriIsolatedCmp *)result, v95, v96, a4);
          if ((int)result < 1) {
            break;
          }
          if (v109)
          {
            if (v108)
            {
              uint64_t v97 = 0;
              uint64_t v98 = (uint64_t)v94 + a3;
              do
              {
                uint64_t v99 = *(void *)(v98 + 8 * v97);
                *(void *)(v98 + 8 * v97) = v94[v97];
                v94[v97++] = v99;
              }
              while (v9 != v97);
            }
            else
            {
              uint64_t v101 = 0;
              uint64_t v102 = (uint64_t)v94 + a3;
              do
              {
                char v103 = *(unsigned char *)(v102 + v101);
                *(unsigned char *)(v102 + v101) = *((unsigned char *)v94 + v101);
                *((unsigned char *)v94 + v101++) = v103;
              }
              while (a3 != v101);
            }
          }
          else
          {
            uint64_t v100 = *v96;
            *uint64_t v96 = *v95;
            *int v95 = v100;
          }
          unint64_t v94 = (void *)((char *)v94 + v7);
        }
        while (v95 > (uint64_t *)v6);
      }
      v92 += a3;
      unint64_t v93 = (void *)((char *)v93 + a3);
    }
    while (v92 < v60);
  }
  return result;
}

uint64_t mrec_qsort_r<DiskNgramContextQuadIsolatedCmp>(uint64_t result, unint64_t a2, unint64_t a3, const void *a4)
{
  unint64_t v5 = a2;
  unsigned int v6 = (char *)result;
  uint64_t v7 = -(uint64_t)a3;
  if (((result | a3) & 7) != 0) {
    int v8 = 2;
  }
  else {
    int v8 = a3 != 8;
  }
  BOOL v108 = ((result | a3) & 7) == 0;
  int v109 = v8;
  if (a2 < 7)
  {
LABEL_118:
    if ((uint64_t)(v5 * a3) > (uint64_t)a3)
    {
      uint64_t v79 = &v6[v5 * a3];
      unsigned int v80 = &v6[a3];
      unint64_t v81 = v6;
      do
      {
        if (v80 > v6)
        {
          uint64_t v82 = v81;
          uint64_t v83 = (uint64_t *)v80;
          do
          {
            int v84 = v83;
            uint64_t v83 = (uint64_t *)((char *)v83 + v7);
            uint64_t result = DiskNgramContextQuadIsolatedCmp::compareElements((DiskNgramContextQuadIsolatedCmp *)result, v83, v84, a4);
            if ((int)result < 1) {
              break;
            }
            if (v109)
            {
              if (v108)
              {
                uint64_t v85 = 0;
                uint64_t v86 = (uint64_t)v82 + a3;
                do
                {
                  uint64_t v87 = *(void *)(v86 + 8 * v85);
                  *(void *)(v86 + 8 * v85) = v82[v85];
                  v82[v85++] = v87;
                }
                while (a3 >> 3 != v85);
              }
              else
              {
                uint64_t v89 = 0;
                uint64_t v90 = (uint64_t)v82 + a3;
                do
                {
                  char v91 = *(unsigned char *)(v90 + v89);
                  *(unsigned char *)(v90 + v89) = *((unsigned char *)v82 + v89);
                  *((unsigned char *)v82 + v89++) = v91;
                }
                while (a3 != v89);
              }
            }
            else
            {
              uint64_t v88 = *v84;
              uint64_t *v84 = *v83;
              uint64_t *v83 = v88;
            }
            uint64_t v82 = (void *)((char *)v82 + v7);
          }
          while (v83 > (uint64_t *)v6);
        }
        v80 += a3;
        unint64_t v81 = (void *)((char *)v81 + a3);
      }
      while (v80 < v79);
    }
    return result;
  }
  BOOL v106 = a3 != 8;
  unint64_t v9 = a3 >> 3;
  while (1)
  {
    unsigned int v10 = &v6[(v5 >> 1) * a3];
    if (v5 == 7) {
      goto LABEL_45;
    }
    unint64_t v11 = &v6[(v5 - 1) * a3];
    if (v5 >= 0x29)
    {
      uint64_t v105 = &v6[(v5 - 1) * a3];
      unint64_t v12 = (v5 >> 3) * a3;
      int v13 = (DiskNgramContextQuadIsolatedCmp *)DiskNgramContextQuadIsolatedCmp::compareElements((DiskNgramContextQuadIsolatedCmp *)result, v6, &v6[v12], a4);
      int v14 = (int)v13;
      uint64_t v107 = &v6[v12];
      uint64_t v16 = DiskNgramContextQuadIsolatedCmp::compareElements(v13, &v6[v12], &v6[2 * v12], v15);
      if (v14 < 0)
      {
        if ((v16 & 0x80000000) == 0)
        {
          uint64_t v16 = DiskNgramContextQuadIsolatedCmp::compareElements((DiskNgramContextQuadIsolatedCmp *)v16, v6, &v6[2 * v12], v17);
          if ((int)v16 >= 0) {
            BOOL v18 = v6;
          }
          else {
            BOOL v18 = &v6[2 * v12];
          }
          goto LABEL_18;
        }
      }
      else if ((int)v16 <= 0)
      {
        uint64_t v16 = DiskNgramContextQuadIsolatedCmp::compareElements((DiskNgramContextQuadIsolatedCmp *)v16, v6, &v6[2 * v12], v17);
        if ((int)v16 >= 0) {
          BOOL v18 = &v6[2 * v12];
        }
        else {
          BOOL v18 = v6;
        }
LABEL_18:
        uint64_t v107 = v18;
      }
      BOOL v20 = (DiskNgramContextQuadIsolatedCmp *)DiskNgramContextQuadIsolatedCmp::compareElements((DiskNgramContextQuadIsolatedCmp *)v16, &v10[-v12], &v6[(v5 >> 1) * a3], v17);
      int v21 = (int)v20;
      uint64_t v23 = DiskNgramContextQuadIsolatedCmp::compareElements(v20, &v6[(v5 >> 1) * a3], &v10[v12], v22);
      if (v21 < 0)
      {
        if ((v23 & 0x80000000) == 0)
        {
          uint64_t v23 = DiskNgramContextQuadIsolatedCmp::compareElements((DiskNgramContextQuadIsolatedCmp *)v23, &v10[-v12], &v10[v12], v24);
          if ((int)v23 >= 0) {
            v10 -= v12;
          }
          else {
            v10 += v12;
          }
        }
      }
      else if ((int)v23 <= 0)
      {
        uint64_t v23 = DiskNgramContextQuadIsolatedCmp::compareElements((DiskNgramContextQuadIsolatedCmp *)v23, &v10[-v12], &v10[v12], v24);
        if ((int)v23 >= 0) {
          v10 += v12;
        }
        else {
          v10 -= v12;
        }
      }
      unint64_t v25 = &v105[-2 * v12];
      unint64_t v11 = &v105[-v12];
      int v26 = (DiskNgramContextQuadIsolatedCmp *)DiskNgramContextQuadIsolatedCmp::compareElements((DiskNgramContextQuadIsolatedCmp *)v23, v25, &v105[-v12], v24);
      int v27 = (int)v26;
      uint64_t result = DiskNgramContextQuadIsolatedCmp::compareElements(v26, &v105[-v12], v105, v28);
      if (v27 < 0)
      {
        unsigned int v19 = v107;
        if ((result & 0x80000000) == 0)
        {
          unint64_t v11 = &v6[(v5 - 1) * a3];
          uint64_t result = DiskNgramContextQuadIsolatedCmp::compareElements((DiskNgramContextQuadIsolatedCmp *)result, v25, v105, a4);
          if ((int)result >= 0) {
            unint64_t v11 = v25;
          }
        }
      }
      else
      {
        unsigned int v19 = v107;
        if ((int)result <= 0)
        {
          unint64_t v11 = &v6[(v5 - 1) * a3];
          uint64_t result = DiskNgramContextQuadIsolatedCmp::compareElements((DiskNgramContextQuadIsolatedCmp *)result, v25, v105, a4);
          if ((int)result < 0) {
            unint64_t v11 = v25;
          }
        }
      }
      goto LABEL_36;
    }
    unsigned int v19 = v6;
LABEL_36:
    uint64_t v29 = (DiskNgramContextQuadIsolatedCmp *)DiskNgramContextQuadIsolatedCmp::compareElements((DiskNgramContextQuadIsolatedCmp *)result, v19, v10, a4);
    int v30 = (int)v29;
    uint64_t result = DiskNgramContextQuadIsolatedCmp::compareElements(v29, v10, v11, v31);
    if (v30 < 0)
    {
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = DiskNgramContextQuadIsolatedCmp::compareElements((DiskNgramContextQuadIsolatedCmp *)result, v19, v11, a4);
        if ((int)result >= 0) {
          unsigned int v10 = v19;
        }
        else {
          unsigned int v10 = v11;
        }
      }
    }
    else if ((int)result <= 0)
    {
      uint64_t result = DiskNgramContextQuadIsolatedCmp::compareElements((DiskNgramContextQuadIsolatedCmp *)result, v19, v11, a4);
      if ((int)result >= 0) {
        unsigned int v10 = v11;
      }
      else {
        unsigned int v10 = v19;
      }
    }
LABEL_45:
    if (v109)
    {
      if (v108)
      {
        int v32 = v6;
        unint64_t v33 = a3 >> 3;
        do
        {
          uint64_t v34 = *(void *)v32;
          *(void *)int v32 = *(void *)v10;
          v32 += 8;
          *(void *)unsigned int v10 = v34;
          v10 += 8;
          --v33;
        }
        while (v33);
      }
      else
      {
        unint64_t v36 = a3;
        uint64_t v37 = v6;
        do
        {
          char v38 = *v37;
          *v37++ = *v10;
          *v10++ = v38;
          --v36;
        }
        while (v36);
      }
    }
    else
    {
      uint64_t v35 = *(void *)v6;
      *(void *)unsigned int v6 = *(void *)v10;
      *(void *)unsigned int v10 = v35;
    }
    int v39 = 0;
    unint64_t v40 = &v6[a3];
    __int16 v41 = &v6[(v5 - 1) * a3];
    int v42 = v41;
    uint64_t v43 = &v6[a3];
LABEL_54:
    while (v43 <= v42)
    {
      uint64_t result = DiskNgramContextQuadIsolatedCmp::compareElements((DiskNgramContextQuadIsolatedCmp *)result, v43, v6, a4);
      if ((int)result > 0) {
        break;
      }
      if (!result)
      {
        if (v109)
        {
          if (v108)
          {
            uint64_t v44 = 0;
            do
            {
              uint64_t v45 = *(void *)&v40[8 * v44];
              *(void *)&v40[8 * v44] = *(void *)&v43[8 * v44];
              *(void *)&v43[8 * v44++] = v45;
            }
            while (v9 != v44);
          }
          else
          {
            uint64_t v54 = 0;
            do
            {
              char v55 = v40[v54];
              v40[v54] = v43[v54];
              v43[v54++] = v55;
            }
            while (a3 != v54);
          }
        }
        else
        {
          uint64_t v53 = *(void *)v40;
          *(void *)unint64_t v40 = *(void *)v43;
          *(void *)uint64_t v43 = v53;
        }
        v40 += a3;
        int v39 = 1;
      }
      v43 += a3;
    }
    while (v43 <= v42)
    {
      uint64_t result = DiskNgramContextQuadIsolatedCmp::compareElements((DiskNgramContextQuadIsolatedCmp *)result, v42, v6, a4);
      if ((result & 0x80000000) != 0)
      {
        if (v109)
        {
          if (v108)
          {
            uint64_t v51 = 0;
            do
            {
              uint64_t v52 = *(void *)&v43[8 * v51];
              *(void *)&v43[8 * v51] = *(void *)&v42[8 * v51];
              *(void *)&v42[8 * v51++] = v52;
            }
            while (v9 != v51);
          }
          else
          {
            uint64_t v57 = 0;
            do
            {
              char v58 = v43[v57];
              v43[v57] = v42[v57];
              v42[v57++] = v58;
            }
            while (a3 != v57);
          }
        }
        else
        {
          uint64_t v56 = *(void *)v43;
          *(void *)uint64_t v43 = *(void *)v42;
          *(void *)int v42 = v56;
        }
        v43 += a3;
        v42 += v7;
        int v39 = 1;
        goto LABEL_54;
      }
      if (!result)
      {
        if (v109)
        {
          if (v108)
          {
            uint64_t v46 = 0;
            do
            {
              uint64_t v47 = *(void *)&v42[8 * v46];
              *(void *)&v42[8 * v46] = *(void *)&v41[8 * v46];
              *(void *)&v41[8 * v46++] = v47;
            }
            while (v9 != v46);
          }
          else
          {
            uint64_t v49 = 0;
            do
            {
              char v50 = v42[v49];
              v42[v49] = v41[v49];
              v41[v49++] = v50;
            }
            while (a3 != v49);
          }
        }
        else
        {
          uint64_t v48 = *(void *)v42;
          *(void *)int v42 = *(void *)v41;
          *(void *)__int16 v41 = v48;
        }
        v41 += v7;
        int v39 = 1;
      }
      v42 += v7;
    }
    int64_t v59 = v5 * a3;
    __int16 v60 = &v6[v5 * a3];
    if (!v39) {
      break;
    }
    int64_t v61 = v43 - v40;
    if (v40 - v6 >= v43 - v40) {
      unint64_t v62 = v43 - v40;
    }
    else {
      unint64_t v62 = v40 - v6;
    }
    if (v62)
    {
      if (v108)
      {
        float v63 = &v43[-v62];
        unint64_t v64 = v62 >> 3;
        char v65 = v6;
        do
        {
          uint64_t v66 = *(void *)v65;
          *(void *)char v65 = *(void *)v63;
          v65 += 8;
          *(void *)float v63 = v66;
          v63 += 8;
          --v64;
        }
        while (v64);
      }
      else
      {
        uint64_t v67 = -(uint64_t)v62;
        uint64_t v68 = v6;
        do
        {
          char v69 = *v68;
          *v68++ = v43[v67];
          v43[v67] = v69;
          BOOL v70 = __CFADD__(v67++, 1);
        }
        while (!v70);
      }
    }
    int64_t v71 = v41 - v42;
    if (v41 - v42 >= v60 - &v41[a3]) {
      unint64_t v72 = v60 - &v41[a3];
    }
    else {
      unint64_t v72 = v41 - v42;
    }
    if (v72)
    {
      if (v108)
      {
        unint64_t v73 = &v60[-v72];
        unint64_t v74 = v72 >> 3;
        do
        {
          uint64_t v75 = *(void *)v43;
          *(void *)uint64_t v43 = *(void *)v73;
          v43 += 8;
          *(void *)unint64_t v73 = v75;
          v73 += 8;
          --v74;
        }
        while (v74);
      }
      else
      {
        uint64_t v76 = -(uint64_t)v72;
        do
        {
          char v77 = *v43;
          *v43++ = v60[v76];
          v60[v76] = v77;
          BOOL v70 = __CFADD__(v76++, 1);
        }
        while (!v70);
      }
    }
    if (v61 > (uint64_t)a3) {
      uint64_t result = mrec_qsort_r<DiskNgramContextQuadIsolatedCmp>(v6, v61 / a3, a3, a4);
    }
    if (v71 <= (uint64_t)a3) {
      return result;
    }
    unsigned int v6 = &v60[-v71];
    unint64_t v5 = v71 / a3;
    int v78 = v106;
    if (((v6 | a3) & 7) != 0) {
      int v78 = 2;
    }
    BOOL v108 = ((v6 | a3) & 7) == 0;
    int v109 = v78;
    if (v5 < 7) {
      goto LABEL_118;
    }
  }
  unint64_t v92 = &v6[a3];
  if (v59 > (uint64_t)a3)
  {
    unint64_t v93 = v6;
    do
    {
      if (v92 > v6)
      {
        unint64_t v94 = v93;
        int v95 = (uint64_t *)v92;
        do
        {
          uint64_t v96 = v95;
          int v95 = (uint64_t *)((char *)v95 + v7);
          uint64_t result = DiskNgramContextQuadIsolatedCmp::compareElements((DiskNgramContextQuadIsolatedCmp *)result, v95, v96, a4);
          if ((int)result < 1) {
            break;
          }
          if (v109)
          {
            if (v108)
            {
              uint64_t v97 = 0;
              uint64_t v98 = (uint64_t)v94 + a3;
              do
              {
                uint64_t v99 = *(void *)(v98 + 8 * v97);
                *(void *)(v98 + 8 * v97) = v94[v97];
                v94[v97++] = v99;
              }
              while (v9 != v97);
            }
            else
            {
              uint64_t v101 = 0;
              uint64_t v102 = (uint64_t)v94 + a3;
              do
              {
                char v103 = *(unsigned char *)(v102 + v101);
                *(unsigned char *)(v102 + v101) = *((unsigned char *)v94 + v101);
                *((unsigned char *)v94 + v101++) = v103;
              }
              while (a3 != v101);
            }
          }
          else
          {
            uint64_t v100 = *v96;
            *uint64_t v96 = *v95;
            *int v95 = v100;
          }
          unint64_t v94 = (void *)((char *)v94 + v7);
        }
        while (v95 > (uint64_t *)v6);
      }
      v92 += a3;
      unint64_t v93 = (void *)((char *)v93 + a3);
    }
    while (v92 < v60);
  }
  return result;
}

uint64_t mrec_qsort_r<DiskNgramContextBiTriGroupTrigramsCmp>(uint64_t result, unint64_t a2, unint64_t a3, const void *a4)
{
  unint64_t v5 = a2;
  unsigned int v6 = (float *)result;
  uint64_t v7 = -(uint64_t)a3;
  if (((result | a3) & 7) != 0) {
    int v8 = 2;
  }
  else {
    int v8 = a3 != 8;
  }
  BOOL v108 = ((result | a3) & 7) == 0;
  int v109 = v8;
  if (a2 < 7)
  {
LABEL_118:
    if ((uint64_t)(v5 * a3) > (uint64_t)a3)
    {
      uint64_t v79 = (float *)((char *)v6 + v5 * a3);
      unsigned int v80 = (float *)((char *)v6 + a3);
      unint64_t v81 = v6;
      do
      {
        if (v80 > v6)
        {
          uint64_t v82 = v81;
          uint64_t v83 = v80;
          do
          {
            int v84 = v83;
            uint64_t v83 = (float *)((char *)v83 + v7);
            uint64_t result = DiskNgramContextBiTriGroupTrigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsCmp *)result, v83, v84, a4);
            if ((int)result < 1) {
              break;
            }
            if (v109)
            {
              if (v108)
              {
                uint64_t v85 = 0;
                uint64_t v86 = (uint64_t)v82 + a3;
                do
                {
                  uint64_t v87 = *(void *)(v86 + 8 * v85);
                  *(void *)(v86 + 8 * v85) = *(void *)&v82[2 * v85];
                  *(void *)&v82[2 * v85++] = v87;
                }
                while (a3 >> 3 != v85);
              }
              else
              {
                uint64_t v89 = 0;
                uint64_t v90 = (uint64_t)v82 + a3;
                do
                {
                  char v91 = *(unsigned char *)(v90 + v89);
                  *(unsigned char *)(v90 + v89) = *((unsigned char *)v82 + v89);
                  *((unsigned char *)v82 + v89++) = v91;
                }
                while (a3 != v89);
              }
            }
            else
            {
              uint64_t v88 = *(void *)v84;
              *(void *)int v84 = *(void *)v83;
              *(void *)uint64_t v83 = v88;
            }
            uint64_t v82 = (float *)((char *)v82 + v7);
          }
          while (v83 > v6);
        }
        unsigned int v80 = (float *)((char *)v80 + a3);
        unint64_t v81 = (float *)((char *)v81 + a3);
      }
      while (v80 < v79);
    }
    return result;
  }
  BOOL v106 = a3 != 8;
  unint64_t v9 = a3 >> 3;
  while (1)
  {
    unsigned int v10 = (float *)((char *)v6 + (v5 >> 1) * a3);
    if (v5 == 7) {
      goto LABEL_45;
    }
    unint64_t v11 = (float *)((char *)v6 + (v5 - 1) * a3);
    if (v5 >= 0x29)
    {
      uint64_t v105 = (float *)((char *)v6 + (v5 - 1) * a3);
      unint64_t v12 = (v5 >> 3) * a3;
      int v13 = (DiskNgramContextBiTriGroupTrigramsCmp *)DiskNgramContextBiTriGroupTrigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsCmp *)result, v6, (float *)((char *)v6 + v12), a4);
      int v14 = (int)v13;
      uint64_t v107 = (float *)((char *)v6 + v12);
      uint64_t v16 = DiskNgramContextBiTriGroupTrigramsCmp::compareElements(v13, (float *)((char *)v6 + v12), (float *)((char *)v6 + 2 * v12), v15);
      if (v14 < 0)
      {
        if ((v16 & 0x80000000) == 0)
        {
          uint64_t v16 = DiskNgramContextBiTriGroupTrigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsCmp *)v16, v6, (float *)((char *)v6 + 2 * v12), v17);
          if ((int)v16 >= 0) {
            BOOL v18 = v6;
          }
          else {
            BOOL v18 = (float *)((char *)v6 + 2 * v12);
          }
          goto LABEL_18;
        }
      }
      else if ((int)v16 <= 0)
      {
        uint64_t v16 = DiskNgramContextBiTriGroupTrigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsCmp *)v16, v6, (float *)((char *)v6 + 2 * v12), v17);
        if ((int)v16 >= 0) {
          BOOL v18 = (float *)((char *)v6 + 2 * v12);
        }
        else {
          BOOL v18 = v6;
        }
LABEL_18:
        uint64_t v107 = v18;
      }
      BOOL v20 = (DiskNgramContextBiTriGroupTrigramsCmp *)DiskNgramContextBiTriGroupTrigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsCmp *)v16, (float *)((char *)v10 - v12), (float *)((char *)v6 + (v5 >> 1) * a3), v17);
      int v21 = (int)v20;
      uint64_t v23 = DiskNgramContextBiTriGroupTrigramsCmp::compareElements(v20, (float *)((char *)v6 + (v5 >> 1) * a3), (float *)((char *)v10 + v12), v22);
      if (v21 < 0)
      {
        if ((v23 & 0x80000000) == 0)
        {
          uint64_t v23 = DiskNgramContextBiTriGroupTrigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsCmp *)v23, (float *)((char *)v10 - v12), (float *)((char *)v10 + v12), v24);
          if ((int)v23 >= 0) {
            unsigned int v10 = (float *)((char *)v10 - v12);
          }
          else {
            unsigned int v10 = (float *)((char *)v10 + v12);
          }
        }
      }
      else if ((int)v23 <= 0)
      {
        uint64_t v23 = DiskNgramContextBiTriGroupTrigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsCmp *)v23, (float *)((char *)v10 - v12), (float *)((char *)v10 + v12), v24);
        if ((int)v23 >= 0) {
          unsigned int v10 = (float *)((char *)v10 + v12);
        }
        else {
          unsigned int v10 = (float *)((char *)v10 - v12);
        }
      }
      unint64_t v25 = (float *)((char *)v105 - 2 * v12);
      unint64_t v11 = (float *)((char *)v105 - v12);
      int v26 = (DiskNgramContextBiTriGroupTrigramsCmp *)DiskNgramContextBiTriGroupTrigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsCmp *)v23, v25, (float *)((char *)v105 - v12), v24);
      int v27 = (int)v26;
      uint64_t result = DiskNgramContextBiTriGroupTrigramsCmp::compareElements(v26, (float *)((char *)v105 - v12), v105, v28);
      if (v27 < 0)
      {
        unsigned int v19 = v107;
        if ((result & 0x80000000) == 0)
        {
          unint64_t v11 = (float *)((char *)v6 + (v5 - 1) * a3);
          uint64_t result = DiskNgramContextBiTriGroupTrigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsCmp *)result, v25, v105, a4);
          if ((int)result >= 0) {
            unint64_t v11 = v25;
          }
        }
      }
      else
      {
        unsigned int v19 = v107;
        if ((int)result <= 0)
        {
          unint64_t v11 = (float *)((char *)v6 + (v5 - 1) * a3);
          uint64_t result = DiskNgramContextBiTriGroupTrigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsCmp *)result, v25, v105, a4);
          if ((int)result < 0) {
            unint64_t v11 = v25;
          }
        }
      }
      goto LABEL_36;
    }
    unsigned int v19 = v6;
LABEL_36:
    uint64_t v29 = (DiskNgramContextBiTriGroupTrigramsCmp *)DiskNgramContextBiTriGroupTrigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsCmp *)result, v19, v10, a4);
    int v30 = (int)v29;
    uint64_t result = DiskNgramContextBiTriGroupTrigramsCmp::compareElements(v29, v10, v11, v31);
    if (v30 < 0)
    {
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = DiskNgramContextBiTriGroupTrigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsCmp *)result, v19, v11, a4);
        if ((int)result >= 0) {
          unsigned int v10 = v19;
        }
        else {
          unsigned int v10 = v11;
        }
      }
    }
    else if ((int)result <= 0)
    {
      uint64_t result = DiskNgramContextBiTriGroupTrigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsCmp *)result, v19, v11, a4);
      if ((int)result >= 0) {
        unsigned int v10 = v11;
      }
      else {
        unsigned int v10 = v19;
      }
    }
LABEL_45:
    if (v109)
    {
      if (v108)
      {
        int v32 = v6;
        unint64_t v33 = a3 >> 3;
        do
        {
          uint64_t v34 = *(void *)v32;
          *(void *)int v32 = *(void *)v10;
          v32 += 2;
          *(void *)unsigned int v10 = v34;
          v10 += 2;
          --v33;
        }
        while (v33);
      }
      else
      {
        unint64_t v36 = a3;
        uint64_t v37 = v6;
        do
        {
          char v38 = *(unsigned char *)v37;
          *(unsigned char *)uint64_t v37 = *(unsigned char *)v10;
          uint64_t v37 = (float *)((char *)v37 + 1);
          *(unsigned char *)unsigned int v10 = v38;
          unsigned int v10 = (float *)((char *)v10 + 1);
          --v36;
        }
        while (v36);
      }
    }
    else
    {
      uint64_t v35 = *(void *)v6;
      *(void *)unsigned int v6 = *(void *)v10;
      *(void *)unsigned int v10 = v35;
    }
    int v39 = 0;
    unint64_t v40 = (void *)((char *)v6 + a3);
    __int16 v41 = (float *)((char *)v6 + (v5 - 1) * a3);
    int v42 = v41;
    uint64_t v43 = (float *)((char *)v6 + a3);
LABEL_54:
    while (v43 <= v42)
    {
      uint64_t result = DiskNgramContextBiTriGroupTrigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsCmp *)result, v43, v6, a4);
      if ((int)result > 0) {
        break;
      }
      if (!result)
      {
        if (v109)
        {
          if (v108)
          {
            uint64_t v44 = 0;
            do
            {
              uint64_t v45 = v40[v44];
              v40[v44] = *(void *)&v43[2 * v44];
              *(void *)&v43[2 * v44++] = v45;
            }
            while (v9 != v44);
          }
          else
          {
            uint64_t v54 = 0;
            do
            {
              char v55 = *((unsigned char *)v40 + v54);
              *((unsigned char *)v40 + v54) = *((unsigned char *)v43 + v54);
              *((unsigned char *)v43 + v54++) = v55;
            }
            while (a3 != v54);
          }
        }
        else
        {
          uint64_t v53 = *v40;
          void *v40 = *(void *)v43;
          *(void *)uint64_t v43 = v53;
        }
        unint64_t v40 = (void *)((char *)v40 + a3);
        int v39 = 1;
      }
      uint64_t v43 = (float *)((char *)v43 + a3);
    }
    while (v43 <= v42)
    {
      uint64_t result = DiskNgramContextBiTriGroupTrigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsCmp *)result, v42, v6, a4);
      if ((result & 0x80000000) != 0)
      {
        if (v109)
        {
          if (v108)
          {
            uint64_t v51 = 0;
            do
            {
              uint64_t v52 = *(void *)&v43[2 * v51];
              *(void *)&v43[2 * v51] = *(void *)&v42[2 * v51];
              *(void *)&v42[2 * v51++] = v52;
            }
            while (v9 != v51);
          }
          else
          {
            uint64_t v57 = 0;
            do
            {
              char v58 = *((unsigned char *)v43 + v57);
              *((unsigned char *)v43 + v57) = *((unsigned char *)v42 + v57);
              *((unsigned char *)v42 + v57++) = v58;
            }
            while (a3 != v57);
          }
        }
        else
        {
          uint64_t v56 = *(void *)v43;
          *(void *)uint64_t v43 = *(void *)v42;
          *(void *)int v42 = v56;
        }
        uint64_t v43 = (float *)((char *)v43 + a3);
        int v42 = (float *)((char *)v42 + v7);
        int v39 = 1;
        goto LABEL_54;
      }
      if (!result)
      {
        if (v109)
        {
          if (v108)
          {
            uint64_t v46 = 0;
            do
            {
              uint64_t v47 = *(void *)&v42[2 * v46];
              *(void *)&v42[2 * v46] = *(void *)&v41[2 * v46];
              *(void *)&v41[2 * v46++] = v47;
            }
            while (v9 != v46);
          }
          else
          {
            uint64_t v49 = 0;
            do
            {
              char v50 = *((unsigned char *)v42 + v49);
              *((unsigned char *)v42 + v49) = *((unsigned char *)v41 + v49);
              *((unsigned char *)v41 + v49++) = v50;
            }
            while (a3 != v49);
          }
        }
        else
        {
          uint64_t v48 = *(void *)v42;
          *(void *)int v42 = *(void *)v41;
          *(void *)__int16 v41 = v48;
        }
        __int16 v41 = (float *)((char *)v41 + v7);
        int v39 = 1;
      }
      int v42 = (float *)((char *)v42 + v7);
    }
    int64_t v59 = v5 * a3;
    __int16 v60 = (float *)((char *)v6 + v5 * a3);
    if (!v39) {
      break;
    }
    int64_t v61 = (char *)v43 - (char *)v40;
    if ((char *)v40 - (char *)v6 >= (char *)v43 - (char *)v40) {
      unint64_t v62 = (char *)v43 - (char *)v40;
    }
    else {
      unint64_t v62 = (char *)v40 - (char *)v6;
    }
    if (v62)
    {
      if (v108)
      {
        float v63 = (void *)((char *)v43 - v62);
        unint64_t v64 = v62 >> 3;
        char v65 = v6;
        do
        {
          uint64_t v66 = *(void *)v65;
          *(void *)char v65 = *v63;
          v65 += 2;
          *v63++ = v66;
          --v64;
        }
        while (v64);
      }
      else
      {
        uint64_t v67 = -(uint64_t)v62;
        uint64_t v68 = v6;
        do
        {
          char v69 = *(unsigned char *)v68;
          *(unsigned char *)uint64_t v68 = *((unsigned char *)v43 + v67);
          uint64_t v68 = (float *)((char *)v68 + 1);
          *((unsigned char *)v43 + v67) = v69;
          BOOL v70 = __CFADD__(v67++, 1);
        }
        while (!v70);
      }
    }
    int64_t v71 = (char *)v41 - (char *)v42;
    if ((char *)v41 - (char *)v42 >= (char *)v60 - ((char *)v41 + a3)) {
      unint64_t v72 = (char *)v60 - ((char *)v41 + a3);
    }
    else {
      unint64_t v72 = (char *)v41 - (char *)v42;
    }
    if (v72)
    {
      if (v108)
      {
        unint64_t v73 = (char *)v60 - v72;
        unint64_t v74 = v72 >> 3;
        do
        {
          uint64_t v75 = *(void *)v43;
          *(void *)uint64_t v43 = *(void *)v73;
          v43 += 2;
          *(void *)unint64_t v73 = v75;
          v73 += 8;
          --v74;
        }
        while (v74);
      }
      else
      {
        uint64_t v76 = -(uint64_t)v72;
        do
        {
          char v77 = *(unsigned char *)v43;
          *(unsigned char *)uint64_t v43 = *((unsigned char *)v60 + v76);
          uint64_t v43 = (float *)((char *)v43 + 1);
          *((unsigned char *)v60 + v76) = v77;
          BOOL v70 = __CFADD__(v76++, 1);
        }
        while (!v70);
      }
    }
    if (v61 > (uint64_t)a3) {
      uint64_t result = mrec_qsort_r<DiskNgramContextBiTriGroupTrigramsCmp>(v6, v61 / a3, a3, a4);
    }
    if (v71 <= (uint64_t)a3) {
      return result;
    }
    unsigned int v6 = (float *)((char *)v60 - v71);
    unint64_t v5 = v71 / a3;
    int v78 = v106;
    if (((v6 | a3) & 7) != 0) {
      int v78 = 2;
    }
    BOOL v108 = ((v6 | a3) & 7) == 0;
    int v109 = v78;
    if (v5 < 7) {
      goto LABEL_118;
    }
  }
  unint64_t v92 = (float *)((char *)v6 + a3);
  if (v59 > (uint64_t)a3)
  {
    unint64_t v93 = v6;
    do
    {
      if (v92 > v6)
      {
        unint64_t v94 = v93;
        int v95 = v92;
        do
        {
          uint64_t v96 = v95;
          int v95 = (float *)((char *)v95 + v7);
          uint64_t result = DiskNgramContextBiTriGroupTrigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsCmp *)result, v95, v96, a4);
          if ((int)result < 1) {
            break;
          }
          if (v109)
          {
            if (v108)
            {
              uint64_t v97 = 0;
              uint64_t v98 = (uint64_t)v94 + a3;
              do
              {
                uint64_t v99 = *(void *)(v98 + 8 * v97);
                *(void *)(v98 + 8 * v97) = *(void *)&v94[2 * v97];
                *(void *)&v94[2 * v97++] = v99;
              }
              while (v9 != v97);
            }
            else
            {
              uint64_t v101 = 0;
              uint64_t v102 = (uint64_t)v94 + a3;
              do
              {
                char v103 = *(unsigned char *)(v102 + v101);
                *(unsigned char *)(v102 + v101) = *((unsigned char *)v94 + v101);
                *((unsigned char *)v94 + v101++) = v103;
              }
              while (a3 != v101);
            }
          }
          else
          {
            uint64_t v100 = *(void *)v96;
            *(void *)uint64_t v96 = *(void *)v95;
            *(void *)int v95 = v100;
          }
          unint64_t v94 = (float *)((char *)v94 + v7);
        }
        while (v95 > v6);
      }
      unint64_t v92 = (float *)((char *)v92 + a3);
      unint64_t v93 = (float *)((char *)v93 + a3);
    }
    while (v92 < v60);
  }
  return result;
}

uint64_t mrec_qsort_r<DiskNgramContextBiTriGroupTrigramsWithBigramsCmp>(uint64_t result, unint64_t a2, unint64_t a3, const void *a4)
{
  unint64_t v5 = a2;
  unsigned int v6 = (float *)result;
  uint64_t v7 = -(uint64_t)a3;
  if (((result | a3) & 7) != 0) {
    int v8 = 2;
  }
  else {
    int v8 = a3 != 8;
  }
  BOOL v108 = ((result | a3) & 7) == 0;
  int v109 = v8;
  if (a2 < 7)
  {
LABEL_118:
    if ((uint64_t)(v5 * a3) > (uint64_t)a3)
    {
      uint64_t v79 = (float *)((char *)v6 + v5 * a3);
      unsigned int v80 = (float *)((char *)v6 + a3);
      unint64_t v81 = v6;
      do
      {
        if (v80 > v6)
        {
          uint64_t v82 = v81;
          uint64_t v83 = v80;
          do
          {
            int v84 = v83;
            uint64_t v83 = (float *)((char *)v83 + v7);
            uint64_t result = DiskNgramContextBiTriGroupTrigramsWithBigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsWithBigramsCmp *)result, v83, v84, a4);
            if ((int)result < 1) {
              break;
            }
            if (v109)
            {
              if (v108)
              {
                uint64_t v85 = 0;
                uint64_t v86 = (uint64_t)v82 + a3;
                do
                {
                  uint64_t v87 = *(void *)(v86 + 8 * v85);
                  *(void *)(v86 + 8 * v85) = *(void *)&v82[2 * v85];
                  *(void *)&v82[2 * v85++] = v87;
                }
                while (a3 >> 3 != v85);
              }
              else
              {
                uint64_t v89 = 0;
                uint64_t v90 = (uint64_t)v82 + a3;
                do
                {
                  char v91 = *(unsigned char *)(v90 + v89);
                  *(unsigned char *)(v90 + v89) = *((unsigned char *)v82 + v89);
                  *((unsigned char *)v82 + v89++) = v91;
                }
                while (a3 != v89);
              }
            }
            else
            {
              uint64_t v88 = *(void *)v84;
              *(void *)int v84 = *(void *)v83;
              *(void *)uint64_t v83 = v88;
            }
            uint64_t v82 = (float *)((char *)v82 + v7);
          }
          while (v83 > v6);
        }
        unsigned int v80 = (float *)((char *)v80 + a3);
        unint64_t v81 = (float *)((char *)v81 + a3);
      }
      while (v80 < v79);
    }
    return result;
  }
  BOOL v106 = a3 != 8;
  unint64_t v9 = a3 >> 3;
  while (1)
  {
    unsigned int v10 = (float *)((char *)v6 + (v5 >> 1) * a3);
    if (v5 == 7) {
      goto LABEL_45;
    }
    unint64_t v11 = (float *)((char *)v6 + (v5 - 1) * a3);
    if (v5 >= 0x29)
    {
      uint64_t v105 = (float *)((char *)v6 + (v5 - 1) * a3);
      unint64_t v12 = (v5 >> 3) * a3;
      int v13 = (DiskNgramContextBiTriGroupTrigramsWithBigramsCmp *)DiskNgramContextBiTriGroupTrigramsWithBigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsWithBigramsCmp *)result, v6, (float *)((char *)v6 + v12), a4);
      int v14 = (int)v13;
      uint64_t v107 = (float *)((char *)v6 + v12);
      uint64_t v16 = DiskNgramContextBiTriGroupTrigramsWithBigramsCmp::compareElements(v13, (float *)((char *)v6 + v12), (float *)((char *)v6 + 2 * v12), v15);
      if (v14 < 0)
      {
        if ((v16 & 0x80000000) == 0)
        {
          uint64_t v16 = DiskNgramContextBiTriGroupTrigramsWithBigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsWithBigramsCmp *)v16, v6, (float *)((char *)v6 + 2 * v12), v17);
          if ((int)v16 >= 0) {
            BOOL v18 = v6;
          }
          else {
            BOOL v18 = (float *)((char *)v6 + 2 * v12);
          }
          goto LABEL_18;
        }
      }
      else if ((int)v16 <= 0)
      {
        uint64_t v16 = DiskNgramContextBiTriGroupTrigramsWithBigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsWithBigramsCmp *)v16, v6, (float *)((char *)v6 + 2 * v12), v17);
        if ((int)v16 >= 0) {
          BOOL v18 = (float *)((char *)v6 + 2 * v12);
        }
        else {
          BOOL v18 = v6;
        }
LABEL_18:
        uint64_t v107 = v18;
      }
      BOOL v20 = (DiskNgramContextBiTriGroupTrigramsWithBigramsCmp *)DiskNgramContextBiTriGroupTrigramsWithBigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsWithBigramsCmp *)v16, (float *)((char *)v10 - v12), (float *)((char *)v6 + (v5 >> 1) * a3), v17);
      int v21 = (int)v20;
      uint64_t v23 = DiskNgramContextBiTriGroupTrigramsWithBigramsCmp::compareElements(v20, (float *)((char *)v6 + (v5 >> 1) * a3), (float *)((char *)v10 + v12), v22);
      if (v21 < 0)
      {
        if ((v23 & 0x80000000) == 0)
        {
          uint64_t v23 = DiskNgramContextBiTriGroupTrigramsWithBigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsWithBigramsCmp *)v23, (float *)((char *)v10 - v12), (float *)((char *)v10 + v12), v24);
          if ((int)v23 >= 0) {
            unsigned int v10 = (float *)((char *)v10 - v12);
          }
          else {
            unsigned int v10 = (float *)((char *)v10 + v12);
          }
        }
      }
      else if ((int)v23 <= 0)
      {
        uint64_t v23 = DiskNgramContextBiTriGroupTrigramsWithBigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsWithBigramsCmp *)v23, (float *)((char *)v10 - v12), (float *)((char *)v10 + v12), v24);
        if ((int)v23 >= 0) {
          unsigned int v10 = (float *)((char *)v10 + v12);
        }
        else {
          unsigned int v10 = (float *)((char *)v10 - v12);
        }
      }
      unint64_t v25 = (float *)((char *)v105 - 2 * v12);
      unint64_t v11 = (float *)((char *)v105 - v12);
      int v26 = (DiskNgramContextBiTriGroupTrigramsWithBigramsCmp *)DiskNgramContextBiTriGroupTrigramsWithBigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsWithBigramsCmp *)v23, v25, (float *)((char *)v105 - v12), v24);
      int v27 = (int)v26;
      uint64_t result = DiskNgramContextBiTriGroupTrigramsWithBigramsCmp::compareElements(v26, (float *)((char *)v105 - v12), v105, v28);
      if (v27 < 0)
      {
        unsigned int v19 = v107;
        if ((result & 0x80000000) == 0)
        {
          unint64_t v11 = (float *)((char *)v6 + (v5 - 1) * a3);
          uint64_t result = DiskNgramContextBiTriGroupTrigramsWithBigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsWithBigramsCmp *)result, v25, v105, a4);
          if ((int)result >= 0) {
            unint64_t v11 = v25;
          }
        }
      }
      else
      {
        unsigned int v19 = v107;
        if ((int)result <= 0)
        {
          unint64_t v11 = (float *)((char *)v6 + (v5 - 1) * a3);
          uint64_t result = DiskNgramContextBiTriGroupTrigramsWithBigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsWithBigramsCmp *)result, v25, v105, a4);
          if ((int)result < 0) {
            unint64_t v11 = v25;
          }
        }
      }
      goto LABEL_36;
    }
    unsigned int v19 = v6;
LABEL_36:
    uint64_t v29 = (DiskNgramContextBiTriGroupTrigramsWithBigramsCmp *)DiskNgramContextBiTriGroupTrigramsWithBigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsWithBigramsCmp *)result, v19, v10, a4);
    int v30 = (int)v29;
    uint64_t result = DiskNgramContextBiTriGroupTrigramsWithBigramsCmp::compareElements(v29, v10, v11, v31);
    if (v30 < 0)
    {
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = DiskNgramContextBiTriGroupTrigramsWithBigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsWithBigramsCmp *)result, v19, v11, a4);
        if ((int)result >= 0) {
          unsigned int v10 = v19;
        }
        else {
          unsigned int v10 = v11;
        }
      }
    }
    else if ((int)result <= 0)
    {
      uint64_t result = DiskNgramContextBiTriGroupTrigramsWithBigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsWithBigramsCmp *)result, v19, v11, a4);
      if ((int)result >= 0) {
        unsigned int v10 = v11;
      }
      else {
        unsigned int v10 = v19;
      }
    }
LABEL_45:
    if (v109)
    {
      if (v108)
      {
        int v32 = v6;
        unint64_t v33 = a3 >> 3;
        do
        {
          uint64_t v34 = *(void *)v32;
          *(void *)int v32 = *(void *)v10;
          v32 += 2;
          *(void *)unsigned int v10 = v34;
          v10 += 2;
          --v33;
        }
        while (v33);
      }
      else
      {
        unint64_t v36 = a3;
        uint64_t v37 = v6;
        do
        {
          char v38 = *(unsigned char *)v37;
          *(unsigned char *)uint64_t v37 = *(unsigned char *)v10;
          uint64_t v37 = (float *)((char *)v37 + 1);
          *(unsigned char *)unsigned int v10 = v38;
          unsigned int v10 = (float *)((char *)v10 + 1);
          --v36;
        }
        while (v36);
      }
    }
    else
    {
      uint64_t v35 = *(void *)v6;
      *(void *)unsigned int v6 = *(void *)v10;
      *(void *)unsigned int v10 = v35;
    }
    int v39 = 0;
    unint64_t v40 = (void *)((char *)v6 + a3);
    __int16 v41 = (float *)((char *)v6 + (v5 - 1) * a3);
    int v42 = v41;
    uint64_t v43 = (float *)((char *)v6 + a3);
LABEL_54:
    while (v43 <= v42)
    {
      uint64_t result = DiskNgramContextBiTriGroupTrigramsWithBigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsWithBigramsCmp *)result, v43, v6, a4);
      if ((int)result > 0) {
        break;
      }
      if (!result)
      {
        if (v109)
        {
          if (v108)
          {
            uint64_t v44 = 0;
            do
            {
              uint64_t v45 = v40[v44];
              v40[v44] = *(void *)&v43[2 * v44];
              *(void *)&v43[2 * v44++] = v45;
            }
            while (v9 != v44);
          }
          else
          {
            uint64_t v54 = 0;
            do
            {
              char v55 = *((unsigned char *)v40 + v54);
              *((unsigned char *)v40 + v54) = *((unsigned char *)v43 + v54);
              *((unsigned char *)v43 + v54++) = v55;
            }
            while (a3 != v54);
          }
        }
        else
        {
          uint64_t v53 = *v40;
          void *v40 = *(void *)v43;
          *(void *)uint64_t v43 = v53;
        }
        unint64_t v40 = (void *)((char *)v40 + a3);
        int v39 = 1;
      }
      uint64_t v43 = (float *)((char *)v43 + a3);
    }
    while (v43 <= v42)
    {
      uint64_t result = DiskNgramContextBiTriGroupTrigramsWithBigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsWithBigramsCmp *)result, v42, v6, a4);
      if ((result & 0x80000000) != 0)
      {
        if (v109)
        {
          if (v108)
          {
            uint64_t v51 = 0;
            do
            {
              uint64_t v52 = *(void *)&v43[2 * v51];
              *(void *)&v43[2 * v51] = *(void *)&v42[2 * v51];
              *(void *)&v42[2 * v51++] = v52;
            }
            while (v9 != v51);
          }
          else
          {
            uint64_t v57 = 0;
            do
            {
              char v58 = *((unsigned char *)v43 + v57);
              *((unsigned char *)v43 + v57) = *((unsigned char *)v42 + v57);
              *((unsigned char *)v42 + v57++) = v58;
            }
            while (a3 != v57);
          }
        }
        else
        {
          uint64_t v56 = *(void *)v43;
          *(void *)uint64_t v43 = *(void *)v42;
          *(void *)int v42 = v56;
        }
        uint64_t v43 = (float *)((char *)v43 + a3);
        int v42 = (float *)((char *)v42 + v7);
        int v39 = 1;
        goto LABEL_54;
      }
      if (!result)
      {
        if (v109)
        {
          if (v108)
          {
            uint64_t v46 = 0;
            do
            {
              uint64_t v47 = *(void *)&v42[2 * v46];
              *(void *)&v42[2 * v46] = *(void *)&v41[2 * v46];
              *(void *)&v41[2 * v46++] = v47;
            }
            while (v9 != v46);
          }
          else
          {
            uint64_t v49 = 0;
            do
            {
              char v50 = *((unsigned char *)v42 + v49);
              *((unsigned char *)v42 + v49) = *((unsigned char *)v41 + v49);
              *((unsigned char *)v41 + v49++) = v50;
            }
            while (a3 != v49);
          }
        }
        else
        {
          uint64_t v48 = *(void *)v42;
          *(void *)int v42 = *(void *)v41;
          *(void *)__int16 v41 = v48;
        }
        __int16 v41 = (float *)((char *)v41 + v7);
        int v39 = 1;
      }
      int v42 = (float *)((char *)v42 + v7);
    }
    int64_t v59 = v5 * a3;
    __int16 v60 = (float *)((char *)v6 + v5 * a3);
    if (!v39) {
      break;
    }
    int64_t v61 = (char *)v43 - (char *)v40;
    if ((char *)v40 - (char *)v6 >= (char *)v43 - (char *)v40) {
      unint64_t v62 = (char *)v43 - (char *)v40;
    }
    else {
      unint64_t v62 = (char *)v40 - (char *)v6;
    }
    if (v62)
    {
      if (v108)
      {
        float v63 = (void *)((char *)v43 - v62);
        unint64_t v64 = v62 >> 3;
        char v65 = v6;
        do
        {
          uint64_t v66 = *(void *)v65;
          *(void *)char v65 = *v63;
          v65 += 2;
          *v63++ = v66;
          --v64;
        }
        while (v64);
      }
      else
      {
        uint64_t v67 = -(uint64_t)v62;
        uint64_t v68 = v6;
        do
        {
          char v69 = *(unsigned char *)v68;
          *(unsigned char *)uint64_t v68 = *((unsigned char *)v43 + v67);
          uint64_t v68 = (float *)((char *)v68 + 1);
          *((unsigned char *)v43 + v67) = v69;
          BOOL v70 = __CFADD__(v67++, 1);
        }
        while (!v70);
      }
    }
    int64_t v71 = (char *)v41 - (char *)v42;
    if ((char *)v41 - (char *)v42 >= (char *)v60 - ((char *)v41 + a3)) {
      unint64_t v72 = (char *)v60 - ((char *)v41 + a3);
    }
    else {
      unint64_t v72 = (char *)v41 - (char *)v42;
    }
    if (v72)
    {
      if (v108)
      {
        unint64_t v73 = (char *)v60 - v72;
        unint64_t v74 = v72 >> 3;
        do
        {
          uint64_t v75 = *(void *)v43;
          *(void *)uint64_t v43 = *(void *)v73;
          v43 += 2;
          *(void *)unint64_t v73 = v75;
          v73 += 8;
          --v74;
        }
        while (v74);
      }
      else
      {
        uint64_t v76 = -(uint64_t)v72;
        do
        {
          char v77 = *(unsigned char *)v43;
          *(unsigned char *)uint64_t v43 = *((unsigned char *)v60 + v76);
          uint64_t v43 = (float *)((char *)v43 + 1);
          *((unsigned char *)v60 + v76) = v77;
          BOOL v70 = __CFADD__(v76++, 1);
        }
        while (!v70);
      }
    }
    if (v61 > (uint64_t)a3) {
      uint64_t result = mrec_qsort_r<DiskNgramContextBiTriGroupTrigramsWithBigramsCmp>(v6, v61 / a3, a3, a4);
    }
    if (v71 <= (uint64_t)a3) {
      return result;
    }
    unsigned int v6 = (float *)((char *)v60 - v71);
    unint64_t v5 = v71 / a3;
    int v78 = v106;
    if (((v6 | a3) & 7) != 0) {
      int v78 = 2;
    }
    BOOL v108 = ((v6 | a3) & 7) == 0;
    int v109 = v78;
    if (v5 < 7) {
      goto LABEL_118;
    }
  }
  unint64_t v92 = (float *)((char *)v6 + a3);
  if (v59 > (uint64_t)a3)
  {
    unint64_t v93 = v6;
    do
    {
      if (v92 > v6)
      {
        unint64_t v94 = v93;
        int v95 = v92;
        do
        {
          uint64_t v96 = v95;
          int v95 = (float *)((char *)v95 + v7);
          uint64_t result = DiskNgramContextBiTriGroupTrigramsWithBigramsCmp::compareElements((DiskNgramContextBiTriGroupTrigramsWithBigramsCmp *)result, v95, v96, a4);
          if ((int)result < 1) {
            break;
          }
          if (v109)
          {
            if (v108)
            {
              uint64_t v97 = 0;
              uint64_t v98 = (uint64_t)v94 + a3;
              do
              {
                uint64_t v99 = *(void *)(v98 + 8 * v97);
                *(void *)(v98 + 8 * v97) = *(void *)&v94[2 * v97];
                *(void *)&v94[2 * v97++] = v99;
              }
              while (v9 != v97);
            }
            else
            {
              uint64_t v101 = 0;
              uint64_t v102 = (uint64_t)v94 + a3;
              do
              {
                char v103 = *(unsigned char *)(v102 + v101);
                *(unsigned char *)(v102 + v101) = *((unsigned char *)v94 + v101);
                *((unsigned char *)v94 + v101++) = v103;
              }
              while (a3 != v101);
            }
          }
          else
          {
            uint64_t v100 = *(void *)v96;
            *(void *)uint64_t v96 = *(void *)v95;
            *(void *)int v95 = v100;
          }
          unint64_t v94 = (float *)((char *)v94 + v7);
        }
        while (v95 > v6);
      }
      unint64_t v92 = (float *)((char *)v92 + a3);
      unint64_t v93 = (float *)((char *)v93 + a3);
    }
    while (v92 < v60);
  }
  return result;
}

uint64_t mrec_qsort_r<DiskNgramContextQuadGroupCmp>(uint64_t result, unint64_t a2, unint64_t a3, const void *a4)
{
  unint64_t v5 = a2;
  unsigned int v6 = (float *)result;
  uint64_t v7 = -(uint64_t)a3;
  if (((result | a3) & 7) != 0) {
    int v8 = 2;
  }
  else {
    int v8 = a3 != 8;
  }
  BOOL v108 = ((result | a3) & 7) == 0;
  int v109 = v8;
  if (a2 < 7)
  {
LABEL_118:
    if ((uint64_t)(v5 * a3) > (uint64_t)a3)
    {
      uint64_t v79 = (float *)((char *)v6 + v5 * a3);
      unsigned int v80 = (float *)((char *)v6 + a3);
      unint64_t v81 = v6;
      do
      {
        if (v80 > v6)
        {
          uint64_t v82 = v81;
          uint64_t v83 = v80;
          do
          {
            int v84 = v83;
            uint64_t v83 = (float *)((char *)v83 + v7);
            uint64_t result = DiskNgramContextQuadGroupCmp::compareElements((DiskNgramContextQuadGroupCmp *)result, v83, v84, a4);
            if ((int)result < 1) {
              break;
            }
            if (v109)
            {
              if (v108)
              {
                uint64_t v85 = 0;
                uint64_t v86 = (uint64_t)v82 + a3;
                do
                {
                  uint64_t v87 = *(void *)(v86 + 8 * v85);
                  *(void *)(v86 + 8 * v85) = *(void *)&v82[2 * v85];
                  *(void *)&v82[2 * v85++] = v87;
                }
                while (a3 >> 3 != v85);
              }
              else
              {
                uint64_t v89 = 0;
                uint64_t v90 = (uint64_t)v82 + a3;
                do
                {
                  char v91 = *(unsigned char *)(v90 + v89);
                  *(unsigned char *)(v90 + v89) = *((unsigned char *)v82 + v89);
                  *((unsigned char *)v82 + v89++) = v91;
                }
                while (a3 != v89);
              }
            }
            else
            {
              uint64_t v88 = *(void *)v84;
              *(void *)int v84 = *(void *)v83;
              *(void *)uint64_t v83 = v88;
            }
            uint64_t v82 = (float *)((char *)v82 + v7);
          }
          while (v83 > v6);
        }
        unsigned int v80 = (float *)((char *)v80 + a3);
        unint64_t v81 = (float *)((char *)v81 + a3);
      }
      while (v80 < v79);
    }
    return result;
  }
  BOOL v106 = a3 != 8;
  unint64_t v9 = a3 >> 3;
  while (1)
  {
    unsigned int v10 = (float *)((char *)v6 + (v5 >> 1) * a3);
    if (v5 == 7) {
      goto LABEL_45;
    }
    unint64_t v11 = (float *)((char *)v6 + (v5 - 1) * a3);
    if (v5 >= 0x29)
    {
      uint64_t v105 = (float *)((char *)v6 + (v5 - 1) * a3);
      unint64_t v12 = (v5 >> 3) * a3;
      int v13 = (DiskNgramContextQuadGroupCmp *)DiskNgramContextQuadGroupCmp::compareElements((DiskNgramContextQuadGroupCmp *)result, v6, (float *)((char *)v6 + v12), a4);
      int v14 = (int)v13;
      uint64_t v107 = (float *)((char *)v6 + v12);
      uint64_t v16 = DiskNgramContextQuadGroupCmp::compareElements(v13, (float *)((char *)v6 + v12), (float *)((char *)v6 + 2 * v12), v15);
      if (v14 < 0)
      {
        if ((v16 & 0x80000000) == 0)
        {
          uint64_t v16 = DiskNgramContextQuadGroupCmp::compareElements((DiskNgramContextQuadGroupCmp *)v16, v6, (float *)((char *)v6 + 2 * v12), v17);
          if ((int)v16 >= 0) {
            BOOL v18 = v6;
          }
          else {
            BOOL v18 = (float *)((char *)v6 + 2 * v12);
          }
          goto LABEL_18;
        }
      }
      else if ((int)v16 <= 0)
      {
        uint64_t v16 = DiskNgramContextQuadGroupCmp::compareElements((DiskNgramContextQuadGroupCmp *)v16, v6, (float *)((char *)v6 + 2 * v12), v17);
        if ((int)v16 >= 0) {
          BOOL v18 = (float *)((char *)v6 + 2 * v12);
        }
        else {
          BOOL v18 = v6;
        }
LABEL_18:
        uint64_t v107 = v18;
      }
      BOOL v20 = (DiskNgramContextQuadGroupCmp *)DiskNgramContextQuadGroupCmp::compareElements((DiskNgramContextQuadGroupCmp *)v16, (float *)((char *)v10 - v12), (float *)((char *)v6 + (v5 >> 1) * a3), v17);
      int v21 = (int)v20;
      uint64_t v23 = DiskNgramContextQuadGroupCmp::compareElements(v20, (float *)((char *)v6 + (v5 >> 1) * a3), (float *)((char *)v10 + v12), v22);
      if (v21 < 0)
      {
        if ((v23 & 0x80000000) == 0)
        {
          uint64_t v23 = DiskNgramContextQuadGroupCmp::compareElements((DiskNgramContextQuadGroupCmp *)v23, (float *)((char *)v10 - v12), (float *)((char *)v10 + v12), v24);
          if ((int)v23 >= 0) {
            unsigned int v10 = (float *)((char *)v10 - v12);
          }
          else {
            unsigned int v10 = (float *)((char *)v10 + v12);
          }
        }
      }
      else if ((int)v23 <= 0)
      {
        uint64_t v23 = DiskNgramContextQuadGroupCmp::compareElements((DiskNgramContextQuadGroupCmp *)v23, (float *)((char *)v10 - v12), (float *)((char *)v10 + v12), v24);
        if ((int)v23 >= 0) {
          unsigned int v10 = (float *)((char *)v10 + v12);
        }
        else {
          unsigned int v10 = (float *)((char *)v10 - v12);
        }
      }
      unint64_t v25 = (float *)((char *)v105 - 2 * v12);
      unint64_t v11 = (float *)((char *)v105 - v12);
      int v26 = (DiskNgramContextQuadGroupCmp *)DiskNgramContextQuadGroupCmp::compareElements((DiskNgramContextQuadGroupCmp *)v23, v25, (float *)((char *)v105 - v12), v24);
      int v27 = (int)v26;
      uint64_t result = DiskNgramContextQuadGroupCmp::compareElements(v26, (float *)((char *)v105 - v12), v105, v28);
      if (v27 < 0)
      {
        unsigned int v19 = v107;
        if ((result & 0x80000000) == 0)
        {
          unint64_t v11 = (float *)((char *)v6 + (v5 - 1) * a3);
          uint64_t result = DiskNgramContextQuadGroupCmp::compareElements((DiskNgramContextQuadGroupCmp *)result, v25, v105, a4);
          if ((int)result >= 0) {
            unint64_t v11 = v25;
          }
        }
      }
      else
      {
        unsigned int v19 = v107;
        if ((int)result <= 0)
        {
          unint64_t v11 = (float *)((char *)v6 + (v5 - 1) * a3);
          uint64_t result = DiskNgramContextQuadGroupCmp::compareElements((DiskNgramContextQuadGroupCmp *)result, v25, v105, a4);
          if ((int)result < 0) {
            unint64_t v11 = v25;
          }
        }
      }
      goto LABEL_36;
    }
    unsigned int v19 = v6;
LABEL_36:
    uint64_t v29 = (DiskNgramContextQuadGroupCmp *)DiskNgramContextQuadGroupCmp::compareElements((DiskNgramContextQuadGroupCmp *)result, v19, v10, a4);
    int v30 = (int)v29;
    uint64_t result = DiskNgramContextQuadGroupCmp::compareElements(v29, v10, v11, v31);
    if (v30 < 0)
    {
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = DiskNgramContextQuadGroupCmp::compareElements((DiskNgramContextQuadGroupCmp *)result, v19, v11, a4);
        if ((int)result >= 0) {
          unsigned int v10 = v19;
        }
        else {
          unsigned int v10 = v11;
        }
      }
    }
    else if ((int)result <= 0)
    {
      uint64_t result = DiskNgramContextQuadGroupCmp::compareElements((DiskNgramContextQuadGroupCmp *)result, v19, v11, a4);
      if ((int)result >= 0) {
        unsigned int v10 = v11;
      }
      else {
        unsigned int v10 = v19;
      }
    }
LABEL_45:
    if (v109)
    {
      if (v108)
      {
        int v32 = v6;
        unint64_t v33 = a3 >> 3;
        do
        {
          uint64_t v34 = *(void *)v32;
          *(void *)int v32 = *(void *)v10;
          v32 += 2;
          *(void *)unsigned int v10 = v34;
          v10 += 2;
          --v33;
        }
        while (v33);
      }
      else
      {
        unint64_t v36 = a3;
        uint64_t v37 = v6;
        do
        {
          char v38 = *(unsigned char *)v37;
          *(unsigned char *)uint64_t v37 = *(unsigned char *)v10;
          uint64_t v37 = (float *)((char *)v37 + 1);
          *(unsigned char *)unsigned int v10 = v38;
          unsigned int v10 = (float *)((char *)v10 + 1);
          --v36;
        }
        while (v36);
      }
    }
    else
    {
      uint64_t v35 = *(void *)v6;
      *(void *)unsigned int v6 = *(void *)v10;
      *(void *)unsigned int v10 = v35;
    }
    int v39 = 0;
    unint64_t v40 = (void *)((char *)v6 + a3);
    __int16 v41 = (float *)((char *)v6 + (v5 - 1) * a3);
    int v42 = v41;
    uint64_t v43 = (float *)((char *)v6 + a3);
LABEL_54:
    while (v43 <= v42)
    {
      uint64_t result = DiskNgramContextQuadGroupCmp::compareElements((DiskNgramContextQuadGroupCmp *)result, v43, v6, a4);
      if ((int)result > 0) {
        break;
      }
      if (!result)
      {
        if (v109)
        {
          if (v108)
          {
            uint64_t v44 = 0;
            do
            {
              uint64_t v45 = v40[v44];
              v40[v44] = *(void *)&v43[2 * v44];
              *(void *)&v43[2 * v44++] = v45;
            }
            while (v9 != v44);
          }
          else
          {
            uint64_t v54 = 0;
            do
            {
              char v55 = *((unsigned char *)v40 + v54);
              *((unsigned char *)v40 + v54) = *((unsigned char *)v43 + v54);
              *((unsigned char *)v43 + v54++) = v55;
            }
            while (a3 != v54);
          }
        }
        else
        {
          uint64_t v53 = *v40;
          void *v40 = *(void *)v43;
          *(void *)uint64_t v43 = v53;
        }
        unint64_t v40 = (void *)((char *)v40 + a3);
        int v39 = 1;
      }
      uint64_t v43 = (float *)((char *)v43 + a3);
    }
    while (v43 <= v42)
    {
      uint64_t result = DiskNgramContextQuadGroupCmp::compareElements((DiskNgramContextQuadGroupCmp *)result, v42, v6, a4);
      if ((result & 0x80000000) != 0)
      {
        if (v109)
        {
          if (v108)
          {
            uint64_t v51 = 0;
            do
            {
              uint64_t v52 = *(void *)&v43[2 * v51];
              *(void *)&v43[2 * v51] = *(void *)&v42[2 * v51];
              *(void *)&v42[2 * v51++] = v52;
            }
            while (v9 != v51);
          }
          else
          {
            uint64_t v57 = 0;
            do
            {
              char v58 = *((unsigned char *)v43 + v57);
              *((unsigned char *)v43 + v57) = *((unsigned char *)v42 + v57);
              *((unsigned char *)v42 + v57++) = v58;
            }
            while (a3 != v57);
          }
        }
        else
        {
          uint64_t v56 = *(void *)v43;
          *(void *)uint64_t v43 = *(void *)v42;
          *(void *)int v42 = v56;
        }
        uint64_t v43 = (float *)((char *)v43 + a3);
        int v42 = (float *)((char *)v42 + v7);
        int v39 = 1;
        goto LABEL_54;
      }
      if (!result)
      {
        if (v109)
        {
          if (v108)
          {
            uint64_t v46 = 0;
            do
            {
              uint64_t v47 = *(void *)&v42[2 * v46];
              *(void *)&v42[2 * v46] = *(void *)&v41[2 * v46];
              *(void *)&v41[2 * v46++] = v47;
            }
            while (v9 != v46);
          }
          else
          {
            uint64_t v49 = 0;
            do
            {
              char v50 = *((unsigned char *)v42 + v49);
              *((unsigned char *)v42 + v49) = *((unsigned char *)v41 + v49);
              *((unsigned char *)v41 + v49++) = v50;
            }
            while (a3 != v49);
          }
        }
        else
        {
          uint64_t v48 = *(void *)v42;
          *(void *)int v42 = *(void *)v41;
          *(void *)__int16 v41 = v48;
        }
        __int16 v41 = (float *)((char *)v41 + v7);
        int v39 = 1;
      }
      int v42 = (float *)((char *)v42 + v7);
    }
    int64_t v59 = v5 * a3;
    __int16 v60 = (float *)((char *)v6 + v5 * a3);
    if (!v39) {
      break;
    }
    int64_t v61 = (char *)v43 - (char *)v40;
    if ((char *)v40 - (char *)v6 >= (char *)v43 - (char *)v40) {
      unint64_t v62 = (char *)v43 - (char *)v40;
    }
    else {
      unint64_t v62 = (char *)v40 - (char *)v6;
    }
    if (v62)
    {
      if (v108)
      {
        float v63 = (void *)((char *)v43 - v62);
        unint64_t v64 = v62 >> 3;
        char v65 = v6;
        do
        {
          uint64_t v66 = *(void *)v65;
          *(void *)char v65 = *v63;
          v65 += 2;
          *v63++ = v66;
          --v64;
        }
        while (v64);
      }
      else
      {
        uint64_t v67 = -(uint64_t)v62;
        uint64_t v68 = v6;
        do
        {
          char v69 = *(unsigned char *)v68;
          *(unsigned char *)uint64_t v68 = *((unsigned char *)v43 + v67);
          uint64_t v68 = (float *)((char *)v68 + 1);
          *((unsigned char *)v43 + v67) = v69;
          BOOL v70 = __CFADD__(v67++, 1);
        }
        while (!v70);
      }
    }
    int64_t v71 = (char *)v41 - (char *)v42;
    if ((char *)v41 - (char *)v42 >= (char *)v60 - ((char *)v41 + a3)) {
      unint64_t v72 = (char *)v60 - ((char *)v41 + a3);
    }
    else {
      unint64_t v72 = (char *)v41 - (char *)v42;
    }
    if (v72)
    {
      if (v108)
      {
        unint64_t v73 = (char *)v60 - v72;
        unint64_t v74 = v72 >> 3;
        do
        {
          uint64_t v75 = *(void *)v43;
          *(void *)uint64_t v43 = *(void *)v73;
          v43 += 2;
          *(void *)unint64_t v73 = v75;
          v73 += 8;
          --v74;
        }
        while (v74);
      }
      else
      {
        uint64_t v76 = -(uint64_t)v72;
        do
        {
          char v77 = *(unsigned char *)v43;
          *(unsigned char *)uint64_t v43 = *((unsigned char *)v60 + v76);
          uint64_t v43 = (float *)((char *)v43 + 1);
          *((unsigned char *)v60 + v76) = v77;
          BOOL v70 = __CFADD__(v76++, 1);
        }
        while (!v70);
      }
    }
    if (v61 > (uint64_t)a3) {
      uint64_t result = mrec_qsort_r<DiskNgramContextQuadGroupCmp>(v6, v61 / a3, a3, a4);
    }
    if (v71 <= (uint64_t)a3) {
      return result;
    }
    unsigned int v6 = (float *)((char *)v60 - v71);
    unint64_t v5 = v71 / a3;
    int v78 = v106;
    if (((v6 | a3) & 7) != 0) {
      int v78 = 2;
    }
    BOOL v108 = ((v6 | a3) & 7) == 0;
    int v109 = v78;
    if (v5 < 7) {
      goto LABEL_118;
    }
  }
  unint64_t v92 = (float *)((char *)v6 + a3);
  if (v59 > (uint64_t)a3)
  {
    unint64_t v93 = v6;
    do
    {
      if (v92 > v6)
      {
        unint64_t v94 = v93;
        int v95 = v92;
        do
        {
          uint64_t v96 = v95;
          int v95 = (float *)((char *)v95 + v7);
          uint64_t result = DiskNgramContextQuadGroupCmp::compareElements((DiskNgramContextQuadGroupCmp *)result, v95, v96, a4);
          if ((int)result < 1) {
            break;
          }
          if (v109)
          {
            if (v108)
            {
              uint64_t v97 = 0;
              uint64_t v98 = (uint64_t)v94 + a3;
              do
              {
                uint64_t v99 = *(void *)(v98 + 8 * v97);
                *(void *)(v98 + 8 * v97) = *(void *)&v94[2 * v97];
                *(void *)&v94[2 * v97++] = v99;
              }
              while (v9 != v97);
            }
            else
            {
              uint64_t v101 = 0;
              uint64_t v102 = (uint64_t)v94 + a3;
              do
              {
                char v103 = *(unsigned char *)(v102 + v101);
                *(unsigned char *)(v102 + v101) = *((unsigned char *)v94 + v101);
                *((unsigned char *)v94 + v101++) = v103;
              }
              while (a3 != v101);
            }
          }
          else
          {
            uint64_t v100 = *(void *)v96;
            *(void *)uint64_t v96 = *(void *)v95;
            *(void *)int v95 = v100;
          }
          unint64_t v94 = (float *)((char *)v94 + v7);
        }
        while (v95 > v6);
      }
      unint64_t v92 = (float *)((char *)v92 + a3);
      unint64_t v93 = (float *)((char *)v93 + a3);
    }
    while (v92 < v60);
  }
  return result;
}

uint64_t WordLanguageModel::loadPersistentAndIndex(WordLanguageModel *this)
{
  unsigned int v52 = 0;
  unsigned int v53 = 0;
  uint64_t v2 = (const void *)OpenAndReadMrecHeader(*((void *)this + 5), 0x72u, 0, "LMWNGPER", &v53, &v52);
  if (v2) {
  *((void *)this + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v2;
  }
  BOOL v5 = v53 == 18 && v52 == 6;
  uint64_t v6 = v5;
  if (v5)
  {
    int v7 = 18;
    int v8 = 6;
  }
  else
  {
    uint64_t v9 = *((void *)this + 5);
    if (*(_DWORD *)(v9 + 24)) {
      unsigned int v10 = *(char **)(v9 + 16);
    }
    else {
      unsigned int v10 = (char *)&unk_2140A6A10;
    }
    MrecHeaderCheckVersions(v10, "LMWNGPER", v53, v52, 0x17u, 7u);
    int v8 = v52;
    int v7 = v53;
  }
  MrecHeaderCheckLatestVersionIfShared(*((DFile **)this + 5), "LMWNGPER", v7, v8, 23, 7, v3, v4);
  uint64_t v11 = *((void *)this + 28);
  unsigned int v54 = 0;
  (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(*(void *)v11 + 72))(v11, &v54, 4, 1);
  unsigned int v12 = v54;
  uint64_t v13 = *((void *)this + 28);
  unsigned int v54 = 0;
  (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(*(void *)v13 + 72))(v13, &v54, 4, 1);
  unsigned int v14 = v54;
  uint64_t v15 = *((void *)this + 28);
  unsigned int v54 = 0;
  (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(*(void *)v15 + 72))(v15, &v54, 4, 1);
  unsigned int v16 = v54;
  *((_DWORD *)this + 65) = (*(uint64_t (**)(void))(**((void **)this + 28) + 48))(*((void *)this + 28));
  unsigned int v52 = 0;
  unsigned int v53 = 0;
  unsigned int v19 = (DgnStream *)OpenAndReadMrecHeader(*((void *)this + 5), 0x71u, 1, "LMWNGIND", &v53, &v52);
  int v20 = v52;
  if (v53 == 19 && v52 == 10)
  {
    int v21 = 19;
  }
  else
  {
    uint64_t v22 = *((void *)this + 5);
    if (*(_DWORD *)(v22 + 24)) {
      uint64_t v23 = *(char **)(v22 + 16);
    }
    else {
      uint64_t v23 = (char *)&unk_2140A6A10;
    }
    MrecHeaderCheckVersions(v23, "LMWNGIND", v53, v52, 0x17u, 0xBu);
    int v20 = v52;
    int v21 = v53;
  }
  MrecHeaderCheckLatestVersionIfShared(*((DFile **)this + 5), "LMWNGIND", v21, v20, 23, 11, v17, v18);
  unsigned int v54 = 0;
  (*(void (**)(DgnStream *, unsigned int *, uint64_t, uint64_t))(*(void *)v19 + 72))(v19, &v54, 4, 1);
  unsigned int v24 = v54;
  unsigned int v54 = 0;
  (*(void (**)(DgnStream *, unsigned int *, uint64_t, uint64_t))(*(void *)v19 + 72))(v19, &v54, 4, 1);
  unsigned int v25 = v54;
  unsigned int v54 = 0;
  (*(void (**)(DgnStream *, unsigned int *, uint64_t, uint64_t))(*(void *)v19 + 72))(v19, &v54, 4, 1);
  *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = v54;
  if (v12 != v24 || v14 != v25) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 8580, (uint64_t)"lm/wordlm", 29, (uint64_t)"%u %u %u %u", v26, v27, v12);
  }
  if (v12 != *((_DWORD *)this + 66) || v14 != *((_DWORD *)this + 67)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 8589, (uint64_t)"lm/wordlm", 30, (uint64_t)"%.500s %u %u %u %u", v26, v27, (char)"The specified voc and svc are mismatched.  Details:");
  }
  if (v16 != *((_DWORD *)this + 64)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 8593, (uint64_t)"lm/wordlm", 69, (uint64_t)"%u %u", v26, v27, v16);
  }
  unsigned int v54 = 0;
  readObject((uint64_t)v19, (void *)this + 31, &v54);
  BigramData::loadBinary((WordLanguageModel *)((char *)this + 360), v19, &v54);
  WordLanguageModel::verifyBoWtForBiSc(this, v28, v29, v30, v31, v32, v33, v34);
  WordLanguageModel::throwOnBadBoWt(this, v35, v36, v37, v38, v39, v40, v41);
  if (*((_DWORD *)this + 16) >= 3u)
  {
    TrigramData::loadBinary((WordLanguageModel *)((char *)this + 744), v19, &v54);
    WordLanguageModel::throwOnBadTriBoWt(this, v42, v43, v44, v45, v46, v47, v48);
    if (*((_DWORD *)this + 16) >= 4u) {
      QuadgramData::loadBinary((WordLanguageModel *)((char *)this + 1232), v19, &v54);
    }
  }
  readObjectChecksumAndVerify(v19, v54);
  if (v25 != v54) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 8611, (uint64_t)"lm/wordlm", 31, (uint64_t)"%u %u", v49, v50, v25);
  }
  DgnDelete<DgnStream>((void (***)(void))v19);
  return v6;
}

void (***WordLanguageModel::reabsorbStaticLM(WordLanguageModel *this))(void)
{
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  LMStats::resetStats((LMStats *)v28);
  long long v25 = xmmword_2140A69E0;
  int v26 = 3;
  char v27 = 1;
  if (*((_DWORD *)this + 90))
  {
    unint64_t v2 = *((unsigned int *)this + 140);
    if (v2 >= 2)
    {
      for (unint64_t i = 1; i < v2; ++i)
      {
        if (*(_WORD *)(*((void *)this + 69) + 2 * i))
        {
          if (*((_DWORD *)this + 90))
          {
            uint64_t v4 = i >> 5;
            if ((*(_DWORD *)(*((void *)this + 50) + 4 * v4) & (1 << i)) != 0
              && (*(_DWORD *)(*((void *)this + 52) + 4 * v4) & (1 << i)) == 0)
            {
              WordLanguageModel::loadBigramRecord((uint64_t)this, i, (uint64_t)v28, (unsigned int *)&v25);
              unint64_t v2 = *((unsigned int *)this + 140);
            }
          }
        }
      }
    }
  }
  BigramData::BigramData((BigramData *)v24);
  BigramData::fillInFullyLoadedBigramData((WordLanguageModel *)((char *)this + 360), (BigramData *)v24);
  BigramData::copyBigramData((int **)this + 45, (const BigramData *)v24);
  BigramData::~BigramData((BigramData *)v24);
  BigramData::compact((void **)this + 45);
  if (*((_DWORD *)this + 16) >= 3u)
  {
    if (*((_DWORD *)this + 186))
    {
      unint64_t v7 = *((unsigned int *)this + 200);
      if (v7 >= 2)
      {
        for (unint64_t j = 1; j < v7; ++j)
        {
          uint64_t v9 = *((void *)this + 99);
          int v10 = *(unsigned __int16 *)(v9 + 2 * j);
          if (*(_WORD *)(v9 + 2 * j))
          {
            int v11 = 0;
            do
            {
              unsigned int v12 = v11 + *(_DWORD *)(*((void *)this + 101) + 4 * j);
              if (*(_WORD *)(*((void *)this + 130) + 2 * v12))
              {
                if (*((_DWORD *)this + 186))
                {
                  uint64_t v13 = v12 >> 5;
                  if ((*(_DWORD *)(*((void *)this + 111) + 4 * v13) & (1 << v12)) != 0
                    && (*(_DWORD *)(*((void *)this + 113) + 4 * v13) & (1 << v12)) == 0)
                  {
                    WordLanguageModel::loadTrigramRecord((uint64_t)this, v5, v6, v12, (uint64_t)v28, (unsigned int *)&v25);
                  }
                }
              }
              ++v11;
            }
            while (v10 != v11);
            unint64_t v7 = *((unsigned int *)this + 200);
          }
        }
      }
    }
    TrigramData::TrigramData((TrigramData *)v24);
    TrigramData::fillInFullyLoadedTrigramData((WordLanguageModel *)((char *)this + 744), (TrigramData *)v24);
    TrigramData::copyTrigramData((WordLanguageModel *)((char *)this + 744), (const TrigramData *)v24);
    TrigramData::~TrigramData((TrigramData *)v24);
    TrigramData::compact((void **)this + 93);
    if (*((_DWORD *)this + 16) > 3u)
    {
      if (*((_DWORD *)this + 308))
      {
        unint64_t v16 = *((unsigned int *)this + 322);
        if (v16 >= 2)
        {
          for (unint64_t k = 1; k < v16; ++k)
          {
            uint64_t v18 = *((void *)this + 160);
            int v19 = *(unsigned __int16 *)(v18 + 2 * k);
            if (*(_WORD *)(v18 + 2 * k))
            {
              int v20 = 0;
              do
              {
                unsigned int v21 = v20 + *(_DWORD *)(*((void *)this + 162) + 4 * k);
                if (*(_WORD *)(*((void *)this + 166) + 2 * v21))
                {
                  if (*((_DWORD *)this + 308))
                  {
                    uint64_t v22 = v21 >> 5;
                    if ((*(_DWORD *)(*((void *)this + 168) + 4 * v22) & (1 << v21)) != 0
                      && (*(_DWORD *)(*((void *)this + 170) + 4 * v22) & (1 << v21)) == 0)
                    {
                      WordLanguageModel::loadQuadgramRecord((uint64_t)this, v14, v15, v21, (uint64_t)v28, (unsigned int *)&v25);
                    }
                  }
                }
                ++v20;
              }
              while (v19 != v20);
              unint64_t v16 = *((unsigned int *)this + 322);
            }
          }
        }
      }
      QuadgramData::QuadgramData((QuadgramData *)v24);
      QuadgramData::fillInFullyLoadedQuadgramData((WordLanguageModel *)((char *)this + 1232), (QuadgramData *)v24);
      QuadgramData::copyQuadgramData((WordLanguageModel *)((char *)this + 1232), (const QuadgramData *)v24);
      QuadgramData::~QuadgramData((QuadgramData *)v24);
      QuadgramData::compact((void **)this + 154);
    }
  }
  DgnDelete<DgnStream>(*((void (****)(void))this + 28));
  *((void *)this + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  uint64_t result = DgnDelete<RealDFile>(*((void (****)(void))this + 5));
  *((void *)this + 5) = 0;
  *((void *)this + 33) = 0;
  return result;
}

void sub_213FB5844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void WordLanguageModel::loadBigramRecord(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int *a4)
{
  LoadSaveTracker::LoadSaveTracker((LoadSaveTracker *)&v22);
  int64x2_t v20 = 0u;
  int64x2_t v21 = 0u;
  SnapTime::recordTime((SnapTime *)&v20, 1, 0, 0, 0);
  (*(void (**)(void, void))(**(void **)(a1 + 224) + 24))(*(void *)(a1 + 224), *(unsigned int *)(*(void *)(a1 + 536) + 4 * a2));
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  v17[0] = 0;
  v17[1] = 0;
  v16[0] = 0;
  v16[1] = 0;
  v15[0] = 0;
  v15[1] = 0;
  (*(void (**)(void, void, void, uint64_t))(**(void **)(a1 + 224) + 96))(*(void *)(a1 + 224), a4[2], *a4, 1);
  WordLanguageModel::readBigramRecord(a1, a2, (uint64_t)&v18, (uint64_t)v17, (uint64_t)v16, (uint64_t)v15);
  BigramData::allocLoaded(a1 + 360, a2);
  if (*(_DWORD *)(a1 + 376))
  {
    if (v19)
    {
      unint64_t v8 = 0;
      do
      {
        BigramData::setSearchSuccIdForIndex(a1 + 360, a2, v8, *(_WORD *)(v18 + 2 * v8));
        BigramData::setSearchQuantizedScoreForIndex(a1 + 360, a2, v8, *(unsigned __int8 *)(v16[0] + v8));
        ++v8;
      }
      while (v8 < v19);
    }
  }
  else if (v19)
  {
    unint64_t v9 = 0;
    do
    {
      BigramData::setSearchSuccIdForIndex(a1 + 360, a2, v9, *(_WORD *)(v18 + 2 * v9));
      BigramData::setSearchScoreForIndex(a1 + 360, a2, v9, *(unsigned __int16 *)(v17[0] + 2 * v9));
      ++v9;
    }
    while (v9 < v19);
  }
  (*(void (**)(void, void))(**(void **)(a1 + 224) + 104))(*(void *)(a1 + 224), a4[1]);
  int64x2_t v13 = 0u;
  int64x2_t v14 = 0u;
  SnapTime::recordTime((SnapTime *)&v13, 1, 0, 0, 0);
  int64x2_t v10 = v14;
  int64x2_t v11 = v21;
  *(int64x2_t *)(a3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = vaddq_s64(vsubq_s64(v13, v20), *(int64x2_t *)(a3 + 56));
  *(int64x2_t *)(a3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = vaddq_s64(vsubq_s64(v10, v11), *(int64x2_t *)(a3 + 72));
  int v12 = *(_DWORD *)(a3 + 12) + *(unsigned __int16 *)(*(void *)(a1 + 552) + 2 * a2);
  ++*(_DWORD *)(a3 + 8);
  *(_DWORD *)(a3 + 12) = v12;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v15);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v16);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v17);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v18);
  LoadSaveTracker::~LoadSaveTracker((LoadSaveTracker *)&v22);
}

void sub_213FB5AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v13 = va_arg(va3, void);
  uint64_t v15 = va_arg(va3, void);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va3);
  LoadSaveTracker::~LoadSaveTracker((LoadSaveTracker *)(v5 - 49));
  _Unwind_Resume(a1);
}

void WordLanguageModel::loadTrigramRecord(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, unsigned int *a6)
{
  LoadSaveTracker::LoadSaveTracker((LoadSaveTracker *)&v24);
  int64x2_t v22 = 0u;
  int64x2_t v23 = 0u;
  SnapTime::recordTime((SnapTime *)&v22, 1, 0, 0, 0);
  (*(void (**)(void, void))(**(void **)(a1 + 224) + 24))(*(void *)(a1 + 224), *(unsigned int *)(*(void *)(a1 + 1024) + 4 * a4));
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  v19[0] = 0;
  v19[1] = 0;
  v18[0] = 0;
  v18[1] = 0;
  v17[0] = 0;
  v17[1] = 0;
  (*(void (**)(void, void, void, void))(**(void **)(a1 + 224) + 96))(*(void *)(a1 + 224), a6[3], *a6, *((unsigned __int8 *)a6 + 20));
  WordLanguageModel::readTrigramRecord(a1, a4, (uint64_t)&v20, (uint64_t)v19, (uint64_t)v18, (uint64_t)v17);
  TrigramData::allocLoaded(a1 + 744, a4);
  if (*(_DWORD *)(a1 + 784))
  {
    if (v21)
    {
      unint64_t v10 = 0;
      do
      {
        TrigramData::setSearchSuccIdForIndex(a1 + 744, a4, v10, *(_WORD *)(v20 + 2 * v10));
        TrigramData::setSearchQuantizedScoreForIndex(a1 + 744, a4, v10, *(unsigned __int8 *)(v18[0] + v10));
        ++v10;
      }
      while (v10 < v21);
    }
  }
  else if (v21)
  {
    unint64_t v11 = 0;
    do
    {
      TrigramData::setSearchSuccIdForIndex(a1 + 744, a4, v11, *(_WORD *)(v20 + 2 * v11));
      TrigramData::setSearchScoreForIndex(a1 + 744, a4, v11, *(unsigned __int16 *)(v19[0] + 2 * v11));
      ++v11;
    }
    while (v11 < v21);
  }
  (*(void (**)(void, void))(**(void **)(a1 + 224) + 104))(*(void *)(a1 + 224), a6[1]);
  int64x2_t v15 = 0u;
  int64x2_t v16 = 0u;
  SnapTime::recordTime((SnapTime *)&v15, 1, 0, 0, 0);
  int64x2_t v12 = v16;
  int64x2_t v13 = v23;
  *(int64x2_t *)(a5 + HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 88) = vaddq_s64(vsubq_s64(v15, v22), *(int64x2_t *)(a5 + 88));
  *(int64x2_t *)(a5 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 104) = vaddq_s64(vsubq_s64(v12, v13), *(int64x2_t *)(a5 + 104));
  int v14 = *(_DWORD *)(a5 + 28) + *(unsigned __int16 *)(*(void *)(a1 + 1040) + 2 * a4);
  ++*(_DWORD *)(a5 + 24);
  *(_DWORD *)(a5 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v14;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v17);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v18);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v19);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v20);
  LoadSaveTracker::~LoadSaveTracker((LoadSaveTracker *)&v24);
}

void sub_213FB5D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v13 = va_arg(va3, void);
  uint64_t v15 = va_arg(va3, void);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va3);
  LoadSaveTracker::~LoadSaveTracker((LoadSaveTracker *)(v5 - 49));
  _Unwind_Resume(a1);
}

void WordLanguageModel::loadQuadgramRecord(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, unsigned int *a6)
{
  LoadSaveTracker::LoadSaveTracker((LoadSaveTracker *)v48);
  int64x2_t v46 = 0u;
  int64x2_t v47 = 0u;
  SnapTime::recordTime((SnapTime *)&v46, 1, 0, 0, 0);
  (*(void (**)(void, void))(**(void **)(a1 + 224) + 24))(*(void *)(a1 + 224), *(unsigned int *)(*(void *)(a1 + 1480) + 4 * a4));
  v45[0] = 0;
  v45[1] = 0;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  v42[0] = 0;
  v42[1] = 0;
  v41[0] = 0;
  v41[1] = 0;
  v40[0] = 0;
  v40[1] = 0;
  v39[0] = 0;
  v39[1] = 0;
  v38[0] = 0;
  v38[1] = 0;
  v37[0] = 0;
  v37[1] = 0;
  v36[0] = 0;
  v36[1] = 0;
  v35[0] = 0;
  v35[1] = 0;
  (*(void (**)(void, void, void, void))(**(void **)(a1 + 224) + 96))(*(void *)(a1 + 224), a6[4], *a6, *((unsigned __int8 *)a6 + 20));
  WordLanguageModel::readQuadgramRecord(a1, a4, (uint64_t)v45, (uint64_t)&v43, (uint64_t)v42, (uint64_t)v41, (uint64_t)v40, (uint64_t)v39, (uint64_t)v38, (uint64_t)v37, (uint64_t)v36, (uint64_t)v35);
  QuadgramData::allocLoaded(a1 + 1232, a4, v45);
  uint64_t v10 = v44;
  if (*(_DWORD *)(a1 + 1256))
  {
    if (!v44) {
      goto LABEL_28;
    }
    unint64_t v11 = 0;
    do
    {
      __int16 v12 = *(_WORD *)(v43 + 2 * v11);
      uint64_t v13 = *(unsigned int *)(*(void *)(a1 + 1480) + 4 * a4);
      if (*(_DWORD *)(a1 + 1232) && (*(_DWORD *)(*(void *)(a1 + 1344) + 4 * (a4 >> 5)) & (1 << a4)) != 0)
      {
        LODWORD(v13) = *(_DWORD *)(*(void *)(a1 + 1656) + 4 * v13);
        *(_WORD *)(*(void *)(a1 + 1672) + 2 * (v11 + v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 3)) = v12;
        int v14 = (unsigned char *)(v40[0] + v11);
        uint64_t v15 = (void *)(a1 + 1704);
      }
      else
      {
        *(_WORD *)(*(void *)(a1 + 1496) + 2 * (v11 + v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 3)) = v12;
        int v14 = (unsigned char *)(v40[0] + v11);
        uint64_t v15 = (void *)(a1 + 1544);
      }
      *(unsigned char *)(*v15 + (v11++ + v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 3)) = *v14;
    }
    while (v11 < v44);
    if (!v44) {
      goto LABEL_28;
    }
  }
  else
  {
    if (!v44) {
      goto LABEL_28;
    }
    uint64_t v16 = 0;
    uint64_t v17 = v43;
    uint64_t v18 = *(unsigned int *)(*(void *)(a1 + 1480) + 4 * a4);
    int v19 = *(_DWORD *)(a1 + 1232);
    uint64_t v20 = v41[0];
    do
    {
      __int16 v21 = *(_WORD *)(v17 + 2 * v16);
      if (v19 && (*(_DWORD *)(*(void *)(a1 + 1344) + 4 * (a4 >> 5)) & (1 << a4)) != 0)
      {
        int v22 = *(_DWORD *)(*(void *)(a1 + 1656) + 4 * v18);
        *(_WORD *)(*(void *)(a1 + 1672) + 2 * (v16 + v22)) = v21;
        int64x2_t v23 = (void *)(a1 + 1688);
      }
      else
      {
        *(_WORD *)(*(void *)(a1 + 1496) + 2 * (v18 + v16)) = v21;
        int v22 = v18;
        int64x2_t v23 = (void *)(a1 + 1528);
      }
      *(_WORD *)(*v23 + 2 * (v16 + v22)) = *(_WORD *)(v20 + 2 * v16);
      ++v16;
    }
    while (v10 != v16);
  }
  unint64_t v24 = 0;
  int v25 = 0;
  do
  {
    LODWORD(v26) = *(unsigned __int16 *)(v45[0] + 2 * v24);
    if (*(_DWORD *)(a1 + 1272))
    {
      if (*(_WORD *)(v45[0] + 2 * v24))
      {
        unint64_t v27 = 0;
        do
        {
          uint64_t v28 = (v25 + v27);
          QuadgramData::setQuad3SuccIdForIndex(a1 + 1232, a4, v24, v27, *(_WORD *)(v42[0] + 2 * v28));
          QuadgramData::setQuantizedScoreForIndex(a1 + 1232, a4, v24, v27++, *(unsigned char *)(v38[0] + v28));
          unint64_t v26 = *(unsigned __int16 *)(v45[0] + 2 * v24);
        }
        while (v27 < v26);
      }
    }
    else if (*(_WORD *)(v45[0] + 2 * v24))
    {
      unint64_t v29 = 0;
      do
      {
        uint64_t v30 = (v25 + v29);
        QuadgramData::setQuad3SuccIdForIndex(a1 + 1232, a4, v24, v29, *(_WORD *)(v42[0] + 2 * v30));
        QuadgramData::setScoreForIndex(a1 + 1232, a4, v24, v29++, *(_WORD *)(v39[0] + 2 * v30));
        unint64_t v26 = *(unsigned __int16 *)(v45[0] + 2 * v24);
      }
      while (v29 < v26);
    }
    v25 += v26;
    *(_DWORD *)(a5 + 44) += v26;
    ++v24;
  }
  while (v24 < v44);
LABEL_28:
  (*(void (**)(void, void))(**(void **)(a1 + 224) + 104))(*(void *)(a1 + 224), a6[1]);
  int64x2_t v33 = 0u;
  int64x2_t v34 = 0u;
  SnapTime::recordTime((SnapTime *)&v33, 1, 0, 0, 0);
  int64x2_t v31 = v34;
  int64x2_t v32 = v47;
  *(int64x2_t *)(a5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 120) = vaddq_s64(vsubq_s64(v33, v46), *(int64x2_t *)(a5 + 120));
  *(int64x2_t *)(a5 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 136) = vaddq_s64(vsubq_s64(v31, v32), *(int64x2_t *)(a5 + 136));
  ++*(_DWORD *)(a5 + 40);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v35);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v36);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v37);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v38);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v39);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v40);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v41);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v42);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v43);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v45);
  LoadSaveTracker::~LoadSaveTracker((LoadSaveTracker *)v48);
}

void sub_213FB6258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a17);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a19);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a21);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a23);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a25);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a27);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a29);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a31);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v31 - 160);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v31 - 144);
  LoadSaveTracker::~LoadSaveTracker((LoadSaveTracker *)(v31 - 89));
  _Unwind_Resume(a1);
}

void WordLanguageModel::setLMScale(WordLanguageModel *this, unsigned int a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (*((void *)this + 5)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 8946, (uint64_t)"lm/wordlm", 21, (uint64_t)"%s", a9, a10, (char)&errStr_lm_wordlm_E_LMSCALE_ON_DISK);
  }
  double v12 = (double)a2;
  LODWORD(a4) = *((_DWORD *)this + 8);
  double v13 = (double)*(unint64_t *)&a4;
  double v14 = (double)a2 / v13;
  unsigned int v15 = *((_DWORD *)this + 16);
  if (v15 >= 4)
  {
    unsigned int v16 = *((_DWORD *)this + 318);
    if (v16)
    {
      unint64_t v73 = 0;
      uint64_t v74 = 0;
      DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)&v73, (uint64_t *)this + 158, 0, v16);
      unsigned int v17 = v74;
      if (v74)
      {
        uint64_t v18 = v73;
        uint64_t v19 = v74;
        do
        {
          unsigned int v20 = (unsigned __int16)*v18;
          if (v20 != 20000) {
            *uint64_t v18 = (int)((double)v20 * v14 + 0.5);
          }
          ++v18;
          --v19;
        }
        while (v19);
      }
      DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 1264, (uint64_t *)&v73, 0, v17);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v73);
    }
    else
    {
      uint64_t v21 = *((unsigned int *)this + 400);
      if (v21)
      {
        int v22 = (_WORD *)*((void *)this + 199);
        double v12 = 0.5;
        do
        {
          unsigned int v23 = (unsigned __int16)*v22;
          if (v23 != 20000)
          {
            double v13 = (double)v23 * v14 + 0.5;
            *int v22 = (int)v13;
          }
          ++v22;
          --v21;
        }
        while (v21);
      }
    }
    unsigned int v24 = *((_DWORD *)this + 314);
    if (v24)
    {
      unint64_t v73 = 0;
      uint64_t v74 = 0;
      DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)&v73, (uint64_t *)this + 156, 0, v24);
      unsigned int v25 = v74;
      if (v74)
      {
        unint64_t v26 = v73;
        uint64_t v27 = v74;
        do
        {
          int v28 = (unsigned __int16)*v26;
          if (v28 != 20000) {
            *unint64_t v26 = (int)((double)(__int16)v28 * v14 + 0.5);
          }
          ++v26;
          --v27;
        }
        while (v27);
      }
      DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 1248, (uint64_t *)&v73, 0, v25);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v73);
    }
    else
    {
      uint64_t v29 = *((unsigned int *)this + 384);
      if (v29)
      {
        uint64_t v30 = (_WORD *)*((void *)this + 191);
        double v12 = 0.5;
        do
        {
          int v31 = (unsigned __int16)*v30;
          if (v31 != 20000)
          {
            double v13 = (double)(__int16)v31 * v14 + 0.5;
            *uint64_t v30 = (int)v13;
          }
          ++v30;
          --v29;
        }
        while (v29);
      }
    }
    unsigned int v15 = *((_DWORD *)this + 16);
  }
  if (v15 >= 3)
  {
    unsigned int v32 = *((_DWORD *)this + 196);
    if (v32)
    {
      unint64_t v73 = 0;
      uint64_t v74 = 0;
      DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)&v73, (uint64_t *)this + 97, 0, v32);
      unsigned int v33 = v74;
      if (v74)
      {
        int64x2_t v34 = v73;
        uint64_t v35 = v74;
        do
        {
          unsigned int v36 = (unsigned __int16)*v34;
          if (v36 != 20000) {
            *int64x2_t v34 = (int)((double)v36 * v14 + 0.5);
          }
          ++v34;
          --v35;
        }
        while (v35);
      }
      DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 776, (uint64_t *)&v73, 0, v33);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v73);
    }
    else
    {
      unint64_t v37 = *((unsigned int *)this + 200);
      if (v37 >= 2)
      {
        uint64_t v38 = *((void *)this + 99);
        for (unint64_t i = 1; i < v37; ++i)
        {
          if (*(_WORD *)(v38 + 2 * i))
          {
            unsigned int v40 = 0;
            do
            {
              unsigned int v41 = v40 + *(_DWORD *)(*((void *)this + 101) + 4 * i);
              if (*(__int16 *)(*((void *)this + 103) + 2 * v41) != -1)
              {
                TrigramData::rescaleScores((void *)this + 93, v41, v14);
                uint64_t v38 = *((void *)this + 99);
              }
              ++v40;
            }
            while (v40 < *(unsigned __int16 *)(v38 + 2 * i));
            unint64_t v37 = *((unsigned int *)this + 200);
          }
        }
      }
    }
    unsigned int v42 = *((_DWORD *)this + 192);
    if (v42)
    {
      unint64_t v73 = 0;
      uint64_t v74 = 0;
      DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)&v73, (uint64_t *)this + 95, 0, v42);
      unsigned int v43 = v74;
      if (v74)
      {
        uint64_t v44 = v73;
        uint64_t v45 = v74;
        do
        {
          int v46 = (unsigned __int16)*v44;
          if (v46 != 20000) {
            _WORD *v44 = (int)((double)(__int16)v46 * v14 + 0.5);
          }
          ++v44;
          --v45;
        }
        while (v45);
      }
      DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 760, (uint64_t *)&v73, 0, v43);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v73);
    }
    else
    {
      uint64_t v47 = *((unsigned int *)this + 200);
      if (v47 >= 2)
      {
        uint64_t v48 = *((void *)this + 99);
        uint64_t v49 = 1;
        double v12 = 0.5;
        do
        {
          unsigned __int16 v50 = *(_WORD *)(v48 + 2 * v49);
          if (v50)
          {
            unint64_t v51 = 0;
            int v52 = *(_DWORD *)(*((void *)this + 101) + 4 * v49);
            uint64_t v53 = *((void *)this + 103);
            do
            {
              uint64_t v54 = (v52 + v51);
              if (*(__int16 *)(v53 + 2 * v54) != -1)
              {
                uint64_t v55 = *((void *)this + 105);
                int v56 = *(unsigned __int16 *)(v55 + 2 * v54);
                if (v56 != 20000)
                {
                  double v13 = (double)(__int16)v56 * v14 + 0.5;
                  *(_WORD *)(v55 + 2 * v54) = (int)v13;
                  unsigned __int16 v50 = *(_WORD *)(v48 + 2 * v49);
                }
              }
              ++v51;
            }
            while (v51 < v50);
          }
          ++v49;
        }
        while (v49 != v47);
      }
    }
  }
  if (*((_DWORD *)this + 16) >= 2u)
  {
    uint64_t v57 = *((unsigned int *)this + 84);
    if (v57)
    {
      char v58 = (_WORD *)*((void *)this + 41);
      double v12 = 0.5;
      do
      {
        unsigned int v59 = (unsigned __int16)*v58;
        if (v59 != 20000)
        {
          double v13 = (double)v59 * v14 + 0.5;
          _WORD *v58 = (int)v13;
        }
        ++v58;
        --v57;
      }
      while (v57);
    }
    uint64_t v60 = *((unsigned int *)this + 88);
    if (v60)
    {
      int64_t v61 = (_WORD *)*((void *)this + 43);
      double v12 = 0.5;
      do
      {
        int v62 = (unsigned __int16)*v61;
        if (v62 != 20000)
        {
          double v13 = (double)(__int16)v62 * v14 + 0.5;
          *int64_t v61 = (int)v13;
        }
        ++v61;
        --v60;
      }
      while (v60);
    }
    unsigned int v63 = *((_DWORD *)this + 94);
    if (v63)
    {
      unint64_t v73 = 0;
      uint64_t v74 = 0;
      DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)&v73, (uint64_t *)this + 46, 0, v63);
      unsigned int v64 = v74;
      if (v74)
      {
        char v65 = v73;
        uint64_t v66 = v74;
        do
        {
          unsigned int v67 = (unsigned __int16)*v65;
          if (v67 != 20000) {
            _WORD *v65 = (int)((double)v67 * v14 + 0.5);
          }
          ++v65;
          --v66;
        }
        while (v66);
      }
      DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 368, (uint64_t *)&v73, 0, v64);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v73);
    }
    else
    {
      unint64_t v68 = *((unsigned int *)this + 140);
      if (v68 >= 2)
      {
        for (unint64_t j = 1; j < v68; ++j)
        {
          if (*(_WORD *)(*((void *)this + 69) + 2 * j))
          {
            BigramData::rescaleScores((void *)this + 45, j, v14);
            unint64_t v68 = *((unsigned int *)this + 140);
          }
        }
      }
    }
  }
  uint64_t v70 = *((unsigned int *)this + 44);
  if (v70)
  {
    int64_t v71 = (_WORD *)*((void *)this + 21);
    double v12 = 0.5;
    do
    {
      unsigned int v72 = (unsigned __int16)*v71;
      if (v72 != 20000)
      {
        double v13 = (double)v72 * v14 + 0.5;
        _WORD *v71 = (int)v13;
      }
      ++v71;
      --v70;
    }
    while (v70);
  }
  *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = a2;
  WordLanguageModel::initializeScoreToProb(this, v12, v13);
}

void sub_213FB687C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void *TrigramData::rescaleScores(void *this, unsigned int a2, double a3)
{
  uint64_t v3 = this[37];
  int v4 = *(unsigned __int16 *)(v3 + 2 * a2);
  if (*(_WORD *)(v3 + 2 * a2))
  {
    if ((*(_DWORD *)(this[16] + 4 * (a2 >> 5)) >> a2))
    {
      uint64_t v5 = *(unsigned int *)(this[35] + 4 * a2);
      uint64_t v6 = (v5 + v4);
      if (v6 > v5)
      {
        uint64_t v7 = v6 - v5;
        unint64_t v8 = (_WORD *)(this[39] + 2 * v5);
        do
        {
          unsigned int v9 = (unsigned __int16)*v8;
          if (v9 != 20000) {
            *unint64_t v8 = (int)((double)v9 * a3 + 0.5);
          }
          ++v8;
          --v7;
        }
        while (v7);
      }
    }
    else
    {
      uint64_t v10 = this[35];
      uint64_t v11 = *(unsigned int *)(v10 + 4 * a2);
      if (v4 == 1)
      {
        int v12 = v11 & 0xFFFF0000;
        if ((unsigned __int16)*(_DWORD *)(v10 + 4 * a2) == 20000) {
          int v13 = 20000;
        }
        else {
          int v13 = (unsigned __int16)(int)((double)(unsigned __int16)*(_DWORD *)(v10 + 4 * a2) * a3 + 0.5);
        }
        *(_DWORD *)(v10 + 4 * a2) = v13 | v12;
      }
      else
      {
        uint64_t v14 = (v11 + v4);
        if (v14 > v11)
        {
          uint64_t v15 = v14 - v11;
          unsigned int v16 = (_WORD *)(this[45] + 2 * v11);
          do
          {
            unsigned int v17 = (unsigned __int16)*v16;
            if (v17 != 20000) {
              *unsigned int v16 = (int)((double)v17 * a3 + 0.5);
            }
            ++v16;
            --v15;
          }
          while (v15);
        }
      }
    }
  }
  return this;
}

void *BigramData::rescaleScores(void *this, unsigned int a2, double a3)
{
  uint64_t v3 = this[24];
  int v4 = *(unsigned __int16 *)(v3 + 2 * a2);
  if (*(_WORD *)(v3 + 2 * a2))
  {
    if ((*(_DWORD *)(this[3] + 4 * (a2 >> 5)) >> a2))
    {
      uint64_t v5 = *(unsigned int *)(this[22] + 4 * a2);
      uint64_t v6 = (v5 + v4);
      if (v6 > v5)
      {
        uint64_t v7 = v6 - v5;
        unint64_t v8 = (_WORD *)(this[26] + 2 * v5);
        do
        {
          unsigned int v9 = (unsigned __int16)*v8;
          if (v9 != 20000) {
            *unint64_t v8 = (int)((double)v9 * a3 + 0.5);
          }
          ++v8;
          --v7;
        }
        while (v7);
      }
    }
    else
    {
      uint64_t v10 = this[22];
      uint64_t v11 = *(unsigned int *)(v10 + 4 * a2);
      if (v4 == 1)
      {
        int v12 = v11 & 0xFFFF0000;
        if ((unsigned __int16)*(_DWORD *)(v10 + 4 * a2) == 20000) {
          int v13 = 20000;
        }
        else {
          int v13 = (unsigned __int16)(int)((double)(unsigned __int16)*(_DWORD *)(v10 + 4 * a2) * a3 + 0.5);
        }
        *(_DWORD *)(v10 + 4 * a2) = v13 | v12;
      }
      else
      {
        uint64_t v14 = (v11 + v4);
        if (v14 > v11)
        {
          uint64_t v15 = v14 - v11;
          unsigned int v16 = (_WORD *)(this[32] + 2 * v11);
          do
          {
            unsigned int v17 = (unsigned __int16)*v16;
            if (v17 != 20000) {
              *unsigned int v16 = (int)((double)v17 * a3 + 0.5);
            }
            ++v16;
            --v15;
          }
          while (v15);
        }
      }
    }
  }
  return this;
}

uint64_t WordLanguageModel::recentBufferUsesWord(WordLanguageModel *this)
{
  return 1;
}

BOOL WordLanguageModel::hasRecentBuffer(WordLanguageModel *this)
{
  uint64_t v2 = *((void *)this + 29);
  if (v2 && ((*(uint64_t (**)(uint64_t))(*(void *)v2 + 120))(v2) & 1) != 0) {
    return 1;
  }

  return LanguageModel::hasRecentBuffer(this);
}

uint64_t WordLanguageModel::getRecentBufferLength(WordLanguageModel *this)
{
  uint64_t v2 = *((void *)this + 29);
  if (v2) {
    unsigned int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 128))(v2);
  }
  else {
    unsigned int v3 = 0;
  }
  LODWORD(result) = LanguageModel::getRecentBufferLength(this);
  if (v3 <= result) {
    return result;
  }
  else {
    return v3;
  }
}

WordLanguageModel ***WordLanguageModel::addToRecent(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 232);
  if (v6) {
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v6 + 136))(v6, a2, a3);
  }

  return LanguageModel::addToRecent((WordLanguageModel ***)a1, a2, a3);
}

void WordLanguageModel::clearRecent(WordLanguageModel *this)
{
  uint64_t v2 = *((void *)this + 29);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 144))(v2);
  }

  LanguageModel::clearRecent(this);
}

uint64_t WordLanguageModel::checkWordIdLmIdValidityAgreement(WordLanguageModel *this, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 32))
  {
    int v11 = *(_DWORD *)(*((void *)this + 15) + 4 * a2);
    if (a3)
    {
LABEL_3:
      if (v11 == -1) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 9154, (uint64_t)"lm/wordlm", 50, (uint64_t)"%u %u", a7, a8, a2);
      }
      goto LABEL_14;
    }
  }
  else
  {
    if (*((_DWORD *)this + 36))
    {
      int v11 = *(unsigned __int16 *)(*((void *)this + 17) + 2 * a2);
      BOOL v12 = v11 == 0xFFFF;
    }
    else
    {
      int v11 = *(unsigned __int8 *)(*((void *)this + 19) + a2);
      BOOL v12 = v11 == 255;
    }
    if (v12) {
      int v11 = -1;
    }
    if (a3) {
      goto LABEL_3;
    }
  }
  if (v11 != -1) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 9159, (uint64_t)"lm/wordlm", 51, (uint64_t)"%u %u", a7, a8, a2);
  }
LABEL_14:
  if (!*((unsigned char *)this + 276)) {
    goto LABEL_28;
  }
  if (*((_DWORD *)this + 72))
  {
    int v13 = *(_DWORD *)(*((void *)this + 35) + 4 * a2);
    if (a3)
    {
LABEL_17:
      if (v13 == -1) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 9169, (uint64_t)"lm/wordlm", 63, (uint64_t)"%u %u", a7, a8, a2);
      }
      goto LABEL_28;
    }
  }
  else
  {
    if (*((_DWORD *)this + 76))
    {
      int v13 = *(unsigned __int16 *)(*((void *)this + 37) + 2 * a2);
      BOOL v14 = v13 == 0xFFFF;
    }
    else
    {
      int v13 = *(unsigned __int8 *)(*((void *)this + 39) + a2);
      BOOL v14 = v13 == 255;
    }
    if (v14) {
      int v13 = -1;
    }
    if (a3) {
      goto LABEL_17;
    }
  }
  if (v13 != -1) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 9175, (uint64_t)"lm/wordlm", 64, (uint64_t)"%u %u", a7, a8, a2);
  }
LABEL_28:
  uint64_t result = *((void *)this + 29);
  if (result)
  {
    unsigned int v16 = *(uint64_t (**)(void))(*(void *)result + 208);
    return v16();
  }
  return result;
}

void WordLanguageModel::verifyUnigrams(WordLanguageModel *this, const char *a2)
{
  unint64_t v2 = *((unsigned int *)this + 26);
  if (v2 >= 2)
  {
    char v3 = (char)a2;
    int v5 = *((_DWORD *)this + 14) - 1;
    for (unint64_t i = 1; i < v2; ++i)
    {
      int v7 = *(unsigned __int16 *)(*((void *)this + 21) + 2 * i);
      if (v7 != 20000 && v5 < v7)
      {
        WordLanguageModel::getLmIdWordName(this, i, 0);
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 9242, (uint64_t)"lm/wordlm", 74, (uint64_t)"%.500s %u %d %d %.500s", v9, v10, v3);
        unint64_t v2 = *((unsigned int *)this + 26);
      }
    }
  }
}

const char *WordLanguageModel::getLmIdWordName(WordLanguageModel *this, int a2, int a3)
{
  unsigned int WordId = WordLanguageModel::getWordId(this, a2, a3);
  uint64_t v6 = *((void *)this + 2);
  if (*(_DWORD *)(v6 + 388) > WordId && *(unsigned char *)(*(void *)(v6 + 104) + WordId)) {
    return (const char *)(*(void *)(v6 + 224) + *(unsigned int *)(*(void *)(v6 + 200) + 4 * WordId));
  }
  if (a2 == -1) {
    return "INVALID_LMID";
  }
  unint64_t v8 = "END_CONTEXT";
  uint64_t v9 = "UNKNOWN";
  if (!a2) {
    uint64_t v9 = "ZERO_LMID";
  }
  int v10 = *((_DWORD *)this + 29);
  if (a2 == -2) {
    uint64_t v9 = "NO_CONTEXT_LMID";
  }
  if (v10 != a2) {
    unint64_t v8 = v9;
  }
  int v11 = "STARTEND_CONTEXT";
  if (v10 != a2) {
    int v11 = "START_CONTEXT";
  }
  if (*((_DWORD *)this + 28) == a2) {
    return v11;
  }
  else {
    return v8;
  }
}

uint64_t WordLanguageModel::verifyLM(WordLanguageModel *this, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2)
  {
    uint64_t v11 = *(unsigned int *)(*((void *)this + 2) + 388);
    if (v11)
    {
      for (unint64_t i = 0; i != v11; ++i)
      {
        uint64_t v13 = *((void *)this + 2);
        BOOL v14 = i < *(unsigned int *)(v13 + 388) && *(unsigned __int8 *)(*(void *)(v13 + 104) + i) != 0;
        (*(void (**)(WordLanguageModel *, unint64_t, BOOL))(*(void *)this + 208))(this, i, v14);
      }
    }
  }
  WordLanguageModel::checkWordListLMAgreement(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  WordLanguageModel::verifyUnigrams(this, a3);
  if (*((_DWORD *)this + 16) >= 2u)
  {
    uint64_t v21 = *((void *)this + 29);
    if (v21) {
      (*(void (**)(uint64_t, uint64_t, const char *))(*(void *)v21 + 216))(v21, a2, a3);
    }
    WordLanguageModel::verifyBackoffUnigrams(this, a3, v15, v16, v17, v18, v19, v20);
    WordLanguageModel::verifyBigrams(this, a3, v22, v23, v24, v25, v26, v27);
    if (*((_DWORD *)this + 16) >= 3u)
    {
      WordLanguageModel::verifyTrigrams(this, a3, v28, v29, v30, v31, v32, v33);
      if (*((_DWORD *)this + 16) >= 4u) {
        WordLanguageModel::verifyQuadgrams(this, a3, v34, v35, v36, v37, v38, v39);
      }
    }
  }
  uint64_t result = *((void *)this + 1);
  if (result)
  {
    return MrecInitModule_sdpres_sdapi();
  }
  return result;
}

void WordLanguageModel::verifyBackoffUnigrams(WordLanguageModel *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 26) >= 2u)
  {
    char v8 = (char)a2;
    int v10 = *((_DWORD *)this + 14);
    int v11 = v10 - 1;
    uint64_t v12 = 1;
    int v30 = 1 - v10;
    while (1)
    {
      uint64_t v13 = 328;
      if (!*((_DWORD *)this + 84)) {
        uint64_t v13 = 168;
      }
      int v14 = *(unsigned __int16 *)(*(void *)((char *)this + v13) + 2 * v12);
      int v15 = *(unsigned __int16 *)(*((void *)this + 21) + 2 * v12);
      int v16 = *(unsigned __int16 *)(*((void *)this + 43) + 2 * v12);
      int v17 = (__int16)v16;
      if (v14 != 20000 && v15 != 20000 && v16 != 20000) {
        goto LABEL_18;
      }
      if (v14 != 20000 || v15 != 20000) {
        break;
      }
LABEL_30:
      if (v17 != 20000 && (v30 > v17 || v11 < v17))
      {
        WordLanguageModel::getLmIdWordName(this, v12, 0);
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 9333, (uint64_t)"lm/wordlm", 75, (uint64_t)"%.500s %u %d %d %.500s", v28, v29, v8);
      }
      if (++v12 >= (unint64_t)*((unsigned int *)this + 26)) {
        return;
      }
    }
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 9312, (uint64_t)"lm/wordlm", 72, (uint64_t)"%.500s %u %d %d %d", a7, a8, v8);
LABEL_18:
    if (v14 != 20000 && v11 < v14)
    {
      WordLanguageModel::getLmIdWordName(this, v12, 0);
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 9320, (uint64_t)"lm/wordlm", 73, (uint64_t)"%.500s %u %d %d %.500s", v22, v23, v8);
    }
    if (v15 != 20000 && v11 < v15)
    {
      WordLanguageModel::getLmIdWordName(this, v12, 0);
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 9326, (uint64_t)"lm/wordlm", 74, (uint64_t)"%.500s %u %d %d %.500s", v25, v26, v8);
    }
    goto LABEL_30;
  }
}

void WordLanguageModel::verifyBigrams(WordLanguageModel *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v39 = (char)a2;
  if (*((_DWORD *)this + 140) >= 2u)
  {
    int v40 = *((_DWORD *)this + 14) - 1;
    uint64_t v9 = (WordLanguageModel *)((char *)this + 360);
    for (unint64_t i = 1; i < *((unsigned int *)this + 140); ++i)
    {
      if (*(_WORD *)(*((void *)this + 69) + 2 * i))
      {
        if (*(_WORD *)(*((void *)this + 43) + 2 * i) == 20000) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 9353, (uint64_t)"lm/wordlm", 81, (uint64_t)"%.500s %u", a7, a8, v39);
        }
        if (!*(_DWORD *)v9)
        {
          uint64_t v11 = i >> 5;
          int v12 = 1 << i;
LABEL_11:
          unsigned int v13 = i;
LABEL_12:
          int v14 = *(_DWORD *)(*((void *)this + 48) + 4 * v11);
          unsigned int v15 = *(unsigned __int16 *)(*((void *)this + 69) + 2 * i);
          if ((v14 & v12) != 0)
          {
            unsigned int v16 = *((_DWORD *)this + 26);
            if (v16 > v15) {
              uint64_t v17 = v15 + 1;
            }
            else {
              uint64_t v17 = v16;
            }
            if (v17 >= 2)
            {
              for (uint64_t j = 1; j != v17; ++j)
              {
                uint64_t v19 = 328;
                if (!*((_DWORD *)this + 84)) {
                  uint64_t v19 = 168;
                }
                int v20 = *(unsigned __int16 *)(*(void *)((char *)this + v19) + 2 * j);
                if (v20 != 20000)
                {
                  uint64_t v21 = *(_DWORD *)(*((void *)this + 67) + 4 * i) + (unsigned __int16)j - 1;
                  if (*((_DWORD *)this + 94))
                  {
                    uint64_t v21 = *(unsigned __int8 *)(*((void *)this + 73) + v21);
                    uint64_t v22 = *((void *)this + 46);
                  }
                  else
                  {
                    uint64_t v22 = *((void *)this + 71);
                  }
                  int v23 = *(unsigned __int16 *)(v22 + 2 * v21);
                  if (v23 != 20000 && *(__int16 *)(*((void *)this + 43) + 2 * i) + v20 != v23 && v40 < v23)
                  {
                    WordLanguageModel::getLmIdWordName(this, v13, 1);
                    WordLanguageModel::getLmIdWordName(this, j, 0);
                    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 9394, (uint64_t)"lm/wordlm", 79, (uint64_t)"%.500s %u %u %d %.500s %.500s", v25, v26, v39);
                  }
                }
              }
            }
          }
          else
          {
            int v27 = v15 - 1;
            while (1)
            {
              unsigned int v28 = v27;
              if (!v27) {
                break;
              }
              unsigned int SearchSuccIdForIndex = BigramData::getSearchSuccIdForIndex(v9, v13, v27);
              int v27 = v28 - 1;
              if (*((_DWORD *)this + 26) > SearchSuccIdForIndex) {
                goto LABEL_38;
              }
            }
            if (*((_DWORD *)this + 26) <= BigramData::getSearchSuccIdForIndex(v9, v13, 0)) {
              continue;
            }
LABEL_38:
            unsigned int v30 = 0;
            do
            {
              unsigned int v31 = BigramData::getSearchSuccIdForIndex(v9, v13, v30);
              uint64_t v32 = 328;
              if (!*((_DWORD *)this + 84)) {
                uint64_t v32 = 168;
              }
              if (*(_WORD *)(*(void *)((char *)this + v32) + 2 * v31) != 20000)
              {
                unsigned int v33 = v31;
                int SearchScoreForIndex = BigramData::getSearchScoreForIndex(v9, v13, v30);
                if (SearchScoreForIndex != 20000)
                {
                  uint64_t v35 = 328;
                  if (!*((_DWORD *)this + 84)) {
                    uint64_t v35 = 168;
                  }
                  if (*(__int16 *)(*((void *)this + 43) + 2 * i)
                     + *(unsigned __int16 *)(*(void *)((char *)this + v35) + 2 * v33) != SearchScoreForIndex
                    && v40 < SearchScoreForIndex)
                  {
                    WordLanguageModel::getLmIdWordName(this, v13, 1);
                    WordLanguageModel::getLmIdWordName(this, v33, 0);
                    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 9449, (uint64_t)"lm/wordlm", 80, (uint64_t)"%.500s %u %u %d %.500s %.500s", v37, v38, v39);
                  }
                }
              }
              ++v30;
            }
            while (v30 <= v28);
          }
          continue;
        }
        uint64_t v11 = i >> 5;
        int v12 = 1 << i;
        if ((*(_DWORD *)(*((void *)this + 50) + 4 * v11) & (1 << i)) == 0) {
          goto LABEL_11;
        }
        unsigned int v13 = i;
        if ((*(_DWORD *)(*((void *)this + 52) + 4 * v11) & v12) != 0) {
          goto LABEL_12;
        }
      }
    }
  }
}

void WordLanguageModel::verifyTrigrams(WordLanguageModel *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v38 = (char)a2;
  if (*((_DWORD *)this + 200) >= 2u)
  {
    int v40 = *((_DWORD *)this + 14) - 1;
    unsigned int v41 = (WordLanguageModel *)((char *)this + 744);
    uint64_t v9 = *((void *)this + 99);
    unint64_t v10 = 1;
    do
    {
      if (*(_WORD *)(v9 + 2 * v10))
      {
        if (*(_WORD *)(*((void *)this + 43) + 2 * v10) == 20000)
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 9470, (uint64_t)"lm/wordlm", 82, (uint64_t)"%.500s %u", a7, a8, v38);
          uint64_t v9 = *((void *)this + 99);
        }
        if (*(_WORD *)(v9 + 2 * v10))
        {
          unsigned int v11 = 0;
          int v39 = v10;
          unint64_t v37 = v10;
          do
          {
            uint64_t v12 = *(_DWORD *)(*((void *)this + 101) + 4 * v10) + v11;
            uint64_t v13 = v12 >> 5;
            if ((!*((_DWORD *)this + 186)
               || (*(_DWORD *)(*((void *)this + 111) + 4 * v13) & (1 << (*(unsigned char *)(*((void *)this + 101) + 4 * v10)
                                                                                         + v11))) == 0
               || (*(_DWORD *)(*((void *)this + 113) + 4 * v13) & (1 << (*(unsigned char *)(*((void *)this + 101) + 4 * v10)
                                                                         + v11))) != 0)
              && *(__int16 *)(*((void *)this + 103) + 2 * v12) != -1)
            {
              unsigned int v14 = *(_DWORD *)(*((void *)this + 109) + 4 * v13);
              uint64_t v15 = *((void *)this + 130);
              if ((v14 >> (*(unsigned char *)(*((void *)this + 101) + 4 * v10) + v11)))
              {
                if (*(_WORD *)(v15 + 2 * v12))
                {
                  int v16 = 1;
                  unsigned __int16 v17 = 1;
                  do
                  {
                    if (*(_WORD *)(*((void *)this + 21) + 2 * v17) != 20000)
                    {
                      uint64_t v18 = (v16 + *(_DWORD *)(*((void *)this + 128) + 4 * v12) - 1);
                      if (*((_DWORD *)this + 196))
                      {
                        uint64_t v18 = *(unsigned __int8 *)(*((void *)this + 134) + v18);
                        uint64_t v19 = *((void *)this + 97);
                      }
                      else
                      {
                        uint64_t v19 = *((void *)this + 132);
                      }
                      int v20 = *(unsigned __int16 *)(v19 + 2 * v18);
                      if (v20 != 20000 && v40 < v20)
                      {
                        int v22 = *(unsigned __int16 *)(*((void *)this + 103) + 2 * v12);
                        WordLanguageModel::getLmIdWordName(this, v39, 1);
                        WordLanguageModel::getLmIdWordName(this, v22, 1);
                        WordLanguageModel::getLmIdWordName(this, v16, 0);
                        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 9505, (uint64_t)"lm/wordlm", 76, (uint64_t)"%.500s %u %u %u %d %.500s %.500s %.500s", v23, v24, v38);
                        uint64_t v15 = *((void *)this + 130);
                      }
                    }
                    int v16 = ++v17;
                  }
                  while (v17 <= *(unsigned __int16 *)(v15 + 2 * v12));
                }
              }
              else if (*(_WORD *)(v15 + 2 * v12))
              {
                unsigned int v25 = 0;
                do
                {
                  unsigned int SearchSuccIdForIndex = TrigramData::getSearchSuccIdForIndex(v41, v12, v25);
                  if (*(_WORD *)(*((void *)this + 21) + 2 * SearchSuccIdForIndex) != 20000)
                  {
                    int v27 = SearchSuccIdForIndex;
                    if (*((_DWORD *)this + 192)) {
                      unsigned int v28 = (__int16 *)(*((void *)this + 95)
                    }
                                      + 2 * *(unsigned __int8 *)(*((void *)this + 107) + v12));
                    else {
                      unsigned int v28 = (__int16 *)(*((void *)this + 105) + 2 * v12);
                    }
                    uint64_t v29 = *(unsigned __int16 *)(*((void *)this + 103) + 2 * v12);
                    int v30 = *(__int16 *)(*((void *)this + 43) + 2 * v29) + *v28;
                    uint64_t v31 = 328;
                    if (!*((_DWORD *)this + 84)) {
                      uint64_t v31 = 168;
                    }
                    int v32 = v30 + *(unsigned __int16 *)(*(void *)((char *)this + v31) + 2 * SearchSuccIdForIndex);
                    int SearchScoreForIndex = TrigramData::getSearchScoreForIndex(v41, v12, v25);
                    if (v32 != SearchScoreForIndex && v40 < SearchScoreForIndex)
                    {
                      WordLanguageModel::getLmIdWordName(this, v39, 1);
                      WordLanguageModel::getLmIdWordName(this, v29, 1);
                      WordLanguageModel::getLmIdWordName(this, v27, 0);
                      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 9539, (uint64_t)"lm/wordlm", 77, (uint64_t)"%.500s %u %u %u %d %.500s %.500s %.500s", v35, v36, v38);
                    }
                  }
                  ++v25;
                }
                while (v25 < *(unsigned __int16 *)(*((void *)this + 130) + 2 * v12));
              }
            }
            ++v11;
            uint64_t v9 = *((void *)this + 99);
            unint64_t v10 = v37;
          }
          while (v11 < *(unsigned __int16 *)(v9 + 2 * v37));
        }
      }
      ++v10;
    }
    while (v10 < *((unsigned int *)this + 200));
  }
}

void WordLanguageModel::verifyQuadgrams(WordLanguageModel *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v33 = (char)a2;
  if (*((_DWORD *)this + 322) >= 2u)
  {
    int v9 = *((_DWORD *)this + 14) - 1;
    unint64_t v10 = (WordLanguageModel *)((char *)this + 1232);
    uint64_t v31 = (char *)this + 1672;
    int v32 = (char *)this + 1496;
    unint64_t v37 = (char *)this + 1736;
    unsigned int v11 = (char *)this + 1512;
    uint64_t v12 = *((void *)this + 160);
    uint64_t v13 = 1;
    while (1)
    {
      if (*(_WORD *)(v12 + 2 * v13))
      {
        if (*(_WORD *)(*((void *)this + 43) + 2 * v13) == 20000)
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 9561, (uint64_t)"lm/wordlm", 83, (uint64_t)"%.500s %u", a7, a8, v33);
          uint64_t v12 = *((void *)this + 160);
        }
        if (*(_WORD *)(v12 + 2 * v13)) {
          break;
        }
      }
LABEL_34:
      if (++v13 >= (unint64_t)*((unsigned int *)this + 322)) {
        return;
      }
    }
    int v14 = 0;
    int v15 = *(_DWORD *)v10;
    int v38 = v13;
    uint64_t v29 = v13;
    while (1)
    {
      int v30 = v14;
      uint64_t v16 = (*(_DWORD *)(*((void *)this + 162) + 4 * v13) + v14);
      int v39 = *(unsigned __int16 *)(*((void *)this + 164) + 2 * v16);
      if (v15 && (*(_DWORD *)(*((void *)this + 168) + 4 * (v16 >> 5)) & (1 << v16)) != 0)
      {
        if ((*(_DWORD *)(*((void *)this + 170) + 4 * (v16 >> 5)) & (1 << v16)) != 0 && v39 != 0xFFFF)
        {
LABEL_17:
          if (*(_WORD *)(*((void *)this + 166) + 2 * v16))
          {
            unsigned int v18 = 0;
            uint64_t v41 = v16 >> 5;
            int v40 = 1 << v16;
            unsigned int v19 = *(_DWORD *)(*((void *)this + 185) + 4 * v16);
            uint64_t v34 = v16;
            do
            {
              unsigned int v20 = v19;
              uint64_t v21 = v32;
              if (v15)
              {
                unsigned int v20 = v19;
                uint64_t v21 = v32;
                if ((*(_DWORD *)(*((void *)this + 168) + 4 * v41) & v40) != 0)
                {
                  unsigned int v20 = *(_DWORD *)(*((void *)this + 207) + 4 * v19);
                  uint64_t v21 = v31;
                }
              }
              unsigned int v22 = 0;
              int v36 = *(unsigned __int16 *)(*v21 + 2 * (v20 + v18));
              unsigned int v35 = v18;
              while (1)
              {
                unsigned int v23 = v19;
                uint64_t v24 = v11;
                if (v15)
                {
                  unsigned int v23 = v19;
                  uint64_t v24 = v11;
                  if ((*(_DWORD *)(*((void *)this + 168) + 4 * v41) & v40) != 0)
                  {
                    unsigned int v23 = *(_DWORD *)(*((void *)this + 207) + 4 * v19);
                    uint64_t v24 = v37;
                  }
                }
                if (v22 >= *(unsigned __int16 *)(*v24 + 2 * (v23 + v18))) {
                  break;
                }
                unsigned int Quad3SuccIdForIndex = QuadgramData::getQuad3SuccIdForIndex(v10, v16, v18, v22);
                if (*(_WORD *)(*((void *)this + 21) + 2 * Quad3SuccIdForIndex) != 20000)
                {
                  int v26 = Quad3SuccIdForIndex;
                  if (v9 < (int)QuadgramData::getScoreForIndex(v10, v16, v18, v22))
                  {
                    WordLanguageModel::getLmIdWordName(this, v38, 1);
                    WordLanguageModel::getLmIdWordName(this, v39, 1);
                    WordLanguageModel::getLmIdWordName(this, v36, 1);
                    WordLanguageModel::getLmIdWordName(this, v26, 0);
                    unsigned int v18 = v35;
                    uint64_t v16 = v34;
                    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 9602, (uint64_t)"lm/wordlm", 78, (uint64_t)"%.500s %u %u %u %u %d %.500s %.500s %.500s %.500s", v27, v28, v33);
                  }
                }
                ++v22;
                int v15 = *((_DWORD *)this + 308);
                unsigned int v19 = *(_DWORD *)(*((void *)this + 185) + 4 * v16);
              }
              ++v18;
            }
            while (v18 < *(unsigned __int16 *)(*((void *)this + 166) + 2 * v16));
            uint64_t v12 = *((void *)this + 160);
            uint64_t v13 = v29;
          }
        }
      }
      else if (v39 != 0xFFFF)
      {
        goto LABEL_17;
      }
      int v14 = v30 + 1;
      if (v30 + 1 >= *(unsigned __int16 *)(v12 + 2 * v13)) {
        goto LABEL_34;
      }
    }
  }
}

uint64_t WordLanguageModel::getNumLoadedBigramBytes(WordLanguageModel *this)
{
  uint64_t result = *((void *)this + 29);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 240))(result);
  }
  if (*((_DWORD *)this + 16) >= 2u)
  {
    if (*((_DWORD *)this + 90)) {
      result += 4
    }
              * (*((unsigned int *)this + 168)
               + (unint64_t)*((unsigned int *)this + 164)
               + *((unsigned int *)this + 172))
              + *((unsigned int *)this + 184)
              + 2 * (*((unsigned int *)this + 180) + (unint64_t)*((unsigned int *)this + 176));
  }
  return result;
}

uint64_t WordLanguageModel::getNumLoadedTrigramBytes(WordLanguageModel *this)
{
  uint64_t result = *((void *)this + 29);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 248))(result);
  }
  if (*((_DWORD *)this + 16) >= 3u)
  {
    if (*((_DWORD *)this + 186)) {
      result += 4
    }
              * (*((unsigned int *)this + 290)
               + (unint64_t)*((unsigned int *)this + 286)
               + *((unsigned int *)this + 294))
              + *((unsigned int *)this + 306)
              + 2 * (*((unsigned int *)this + 302) + (unint64_t)*((unsigned int *)this + 298));
  }
  return result;
}

uint64_t WordLanguageModel::getNumLoadedQuadgramBytes(WordLanguageModel *this)
{
  uint64_t v2 = *((void *)this + 29);
  if (v2) {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 256))(v2);
  }
  else {
    uint64_t v3 = 0;
  }
  if (*((_DWORD *)this + 16) >= 4u && *((_DWORD *)this + 308)) {
    v3 += QuadgramData::sizeLoadedData((WordLanguageModel *)((char *)this + 1232));
  }
  return v3;
}

unint64_t QuadgramData::sizeLoadedData(QuadgramData *this)
{
  return *((unsigned int *)this + 120)
       + 4
       * (*((unsigned int *)this + 104)
        + (unint64_t)*((unsigned int *)this + 100)
        + *((unsigned int *)this + 108)
        + (unint64_t)*((unsigned int *)this + 124))
       + *((unsigned int *)this + 140)
       + 2
       * (*((unsigned int *)this + 116)
        + (unint64_t)*((unsigned int *)this + 112)
        + *((unsigned int *)this + 128)
        + (unint64_t)*((unsigned int *)this + 132)
        + *((unsigned int *)this + 136));
}

uint64_t WordLanguageModel::getNumInterpolatedLms(WordLanguageModel *this)
{
  uint64_t v2 = *((void *)this + 29);
  if (v2) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 568))();
  }
  else {
    return LanguageModel::getNumInterpolatedLms(this);
  }
}

uint64_t WordLanguageModel::setInterpolatedLmWeights(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 232);
  if (v1) {
    return (*(uint64_t (**)(void))(*(void *)v1 + 576))();
  }
  else {
    return LanguageModel::setInterpolatedLmWeights();
  }
}

uint64_t WordLanguageModel::getInterpolatedLmWeights(WordLanguageModel *this, unsigned int *a2)
{
  uint64_t v3 = *((void *)this + 29);
  if (v3) {
    return (*(uint64_t (**)(uint64_t, unsigned int *))(*(void *)v3 + 584))(v3, a2);
  }
  else {
    return LanguageModel::getInterpolatedLmWeights(this, a2);
  }
}

uint64_t WordLanguageModel::maybeUncompactWordIdToLmIdArray(uint64_t this, int a2)
{
  if ((a2 - 255) > 0xFFFFFEFF) {
    return this;
  }
  uint64_t v3 = this;
  unsigned int v4 = *(_DWORD *)(this + 160);
  if (v4)
  {
    int v5 = (uint64_t *)(this + 136);
    unsigned int v6 = *(_DWORD *)(this + 148);
    if (v4 <= v6)
    {
      *(_DWORD *)(this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 144) = v4;
      this = *(void *)(this + 152);
    }
    else
    {
      DgnPrimArray<short>::reallocElts(this + 136, v4 - v6, 0);
      unsigned int v7 = *(_DWORD *)(v3 + 160);
      *(_DWORD *)(v3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 144) = v4;
      this = *(void *)(v3 + 152);
      if (!v7)
      {
        if (!this) {
          goto LABEL_12;
        }
        goto LABEL_11;
      }
      unsigned int v4 = v7;
    }
    uint64_t v8 = 0;
    uint64_t v9 = *v5;
    do
    {
      int v10 = *(unsigned __int8 *)(this + v8);
      if (v10 == 255) {
        LOWORD(v10) = -1;
      }
      *(_WORD *)(v9 + 2 * v8++) = v10;
    }
    while (v4 != v8);
LABEL_11:
    this = MemChunkFree((void *)this, 0);
    *(void *)(v3 + 152) = 0;
LABEL_12:
    *(void *)(v3 + HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 160) = 0;
  }
  if ((a2 - 0xFFFF) <= 0xFFFEFFFF)
  {
    unsigned int v11 = *(_DWORD *)(v3 + 144);
    if (v11)
    {
      unsigned int v12 = *(_DWORD *)(v3 + 132);
      if (v11 <= v12)
      {
        *(_DWORD *)(v3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 128) = v11;
        this = *(void *)(v3 + 136);
      }
      else
      {
        DgnPrimArray<unsigned int>::reallocElts(v3 + 120, v11 - v12, 0);
        int v13 = *(_DWORD *)(v3 + 144);
        *(_DWORD *)(v3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 128) = v11;
        this = *(void *)(v3 + 136);
        if (!v13)
        {
          if (!this) {
            goto LABEL_25;
          }
          goto LABEL_24;
        }
      }
      unint64_t v14 = 0;
      uint64_t v15 = *(void *)(v3 + 120);
      do
      {
        int v16 = *(unsigned __int16 *)(this + 2 * v14);
        if (v16 == 0xFFFF) {
          int v16 = -1;
        }
        *(_DWORD *)(v15 + 4 * v14++) = v16;
      }
      while (v14 < *(unsigned int *)(v3 + 144));
LABEL_24:
      this = MemChunkFree((void *)this, 0);
      *(void *)(v3 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 136) = 0;
LABEL_25:
      *(void *)(v3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 144) = 0;
    }
  }
  return this;
}

uint64_t WordLanguageModel::maybeUncompactWordIdToContextLmIdArray(uint64_t this, int a2)
{
  if ((a2 - 255) > 0xFFFFFEFF) {
    return this;
  }
  uint64_t v3 = this;
  unsigned int v4 = *(_DWORD *)(this + 320);
  if (v4)
  {
    int v5 = (uint64_t *)(this + 296);
    unsigned int v6 = *(_DWORD *)(this + 308);
    if (v4 <= v6)
    {
      *(_DWORD *)(this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304) = v4;
      this = *(void *)(this + 312);
    }
    else
    {
      DgnPrimArray<short>::reallocElts(this + 296, v4 - v6, 0);
      unsigned int v7 = *(_DWORD *)(v3 + 320);
      *(_DWORD *)(v3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304) = v4;
      this = *(void *)(v3 + 312);
      if (!v7)
      {
        if (!this) {
          goto LABEL_12;
        }
        goto LABEL_11;
      }
      unsigned int v4 = v7;
    }
    uint64_t v8 = 0;
    uint64_t v9 = *v5;
    do
    {
      int v10 = *(unsigned __int8 *)(this + v8);
      if (v10 == 255) {
        LOWORD(v10) = -1;
      }
      *(_WORD *)(v9 + 2 * v8++) = v10;
    }
    while (v4 != v8);
LABEL_11:
    this = MemChunkFree((void *)this, 0);
    *(void *)(v3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 312) = 0;
LABEL_12:
    *(void *)(v3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 320) = 0;
  }
  if ((a2 - 0xFFFF) <= 0xFFFEFFFF)
  {
    unsigned int v11 = *(_DWORD *)(v3 + 304);
    if (v11)
    {
      unsigned int v12 = *(_DWORD *)(v3 + 292);
      if (v11 <= v12)
      {
        *(_DWORD *)(v3 + 2HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 88) = v11;
        this = *(void *)(v3 + 296);
      }
      else
      {
        DgnPrimArray<unsigned int>::reallocElts(v3 + 280, v11 - v12, 0);
        int v13 = *(_DWORD *)(v3 + 304);
        *(_DWORD *)(v3 + 2HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 88) = v11;
        this = *(void *)(v3 + 296);
        if (!v13)
        {
          if (!this) {
            goto LABEL_25;
          }
          goto LABEL_24;
        }
      }
      unint64_t v14 = 0;
      uint64_t v15 = *(void *)(v3 + 280);
      do
      {
        int v16 = *(unsigned __int16 *)(this + 2 * v14);
        if (v16 == 0xFFFF) {
          int v16 = -1;
        }
        *(_DWORD *)(v15 + 4 * v14++) = v16;
      }
      while (v14 < *(unsigned int *)(v3 + 304));
LABEL_24:
      this = MemChunkFree((void *)this, 0);
      *(void *)(v3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 296) = 0;
LABEL_25:
      *(void *)(v3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304) = 0;
    }
  }
  return this;
}

__n128 WordLanguageModel::fillInWordDummySpec(WordLanguageModel *this, __n128 *a2)
{
  a2->n128_u32[2] = *((_DWORD *)this + 16);
  a2->n128_u64[0] = 0xBFF0000000000000;
  a2->n128_u8[12] = *((unsigned char *)this + 80);
  a2->n128_u8[13] = *((_DWORD *)this + 25) != -1;
  __n128 result = *(__n128 *)((char *)this + 84);
  a2[1] = result;
  return result;
}

void WordLanguageModel::addWord(WordLanguageModel *this, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = a3;
  unsigned int v4 = a2;
  uint64_t v6 = *((void *)this + 29);
  if (v6) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 360))(v6, a2, a3);
  }
  uint64_t v7 = *(unsigned int *)(*(void *)(*((void *)this + 2) + 256) + 4 * v4);
  if (v7 == v4)
  {
    if (v3 == 0xFFFFFF || !*((unsigned char *)this + 80))
    {
      int v8 = *((_DWORD *)this + 18);
      int v10 = *((_DWORD *)this + 19);
    }
    else
    {
      if (*((_DWORD *)this + 32))
      {
        int v8 = *(_DWORD *)(*((void *)this + 15) + 4 * v3);
      }
      else
      {
        if (*((_DWORD *)this + 36))
        {
          int v13 = *(unsigned __int16 *)(*((void *)this + 17) + 2 * v3);
          BOOL v14 = v13 == 0xFFFF;
        }
        else
        {
          int v13 = *(unsigned __int8 *)(*((void *)this + 19) + v3);
          BOOL v14 = v13 == 255;
        }
        if (v14) {
          int v8 = -1;
        }
        else {
          int v8 = v13;
        }
      }
      if (*((unsigned char *)this + 276))
      {
        if (*((_DWORD *)this + 72))
        {
          int v10 = *(_DWORD *)(*((void *)this + 35) + 4 * v3);
        }
        else
        {
          if (*((_DWORD *)this + 76))
          {
            int v18 = *(unsigned __int16 *)(*((void *)this + 37) + 2 * v3);
            BOOL v19 = v18 == 0xFFFF;
          }
          else
          {
            int v18 = *(unsigned __int8 *)(*((void *)this + 39) + v3);
            BOOL v19 = v18 == 255;
          }
          if (v19) {
            int v10 = -1;
          }
          else {
            int v10 = v18;
          }
        }
      }
      else
      {
        int v10 = -1;
      }
    }
    WordLanguageModel::recordWordIdLmIdUsage(this, v4, v8);
    if (*((unsigned char *)this + 276)) {
      WordLanguageModel::recordWordIdContextLmIdUsage(this, v4, v10);
    }
    if (*((_DWORD *)this + 54))
    {
      unint64_t v20 = 0;
      do
        RecentBuffer::addWordId(*(RecentBuffer **)(*((void *)this + 26) + 8 * v20++), v4);
      while (v20 < *((unsigned int *)this + 54));
    }
  }
  else
  {
    if (*((_DWORD *)this + 32))
    {
      int v9 = *(_DWORD *)(*((void *)this + 15) + 4 * v7);
    }
    else
    {
      if (*((_DWORD *)this + 36))
      {
        int v11 = *(unsigned __int16 *)(*((void *)this + 17) + 2 * v7);
        BOOL v12 = v11 == 0xFFFF;
      }
      else
      {
        int v11 = *(unsigned __int8 *)(*((void *)this + 19) + v7);
        BOOL v12 = v11 == 255;
      }
      if (v12) {
        int v9 = -1;
      }
      else {
        int v9 = v11;
      }
    }
    WordLanguageModel::recordWordIdLmIdUsage(this, v4, v9);
    if (*((unsigned char *)this + 276))
    {
      if (*((_DWORD *)this + 72))
      {
        int v15 = *(_DWORD *)(*((void *)this + 35) + 4 * v7);
      }
      else
      {
        if (*((_DWORD *)this + 76))
        {
          int v16 = *(unsigned __int16 *)(*((void *)this + 37) + 2 * v7);
          BOOL v17 = v16 == 0xFFFF;
        }
        else
        {
          int v16 = *(unsigned __int8 *)(*((void *)this + 39) + v7);
          BOOL v17 = v16 == 255;
        }
        if (v17) {
          int v15 = -1;
        }
        else {
          int v15 = v16;
        }
      }
      WordLanguageModel::recordWordIdContextLmIdUsage(this, v4, v15);
    }
  }
}

_DWORD *WordLanguageModel::addUnmappedWord(WordLanguageModel *this, uint64_t a2)
{
  unsigned int v2 = a2;
  uint64_t v4 = *((void *)this + 29);
  if (v4) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 368))(v4, a2);
  }
  __n128 result = WordLanguageModel::recordWordIdInvalidLmIdUsage(this, v2);
  if (*((unsigned char *)this + 276))
  {
    return WordLanguageModel::recordWordIdInvalidContextLmIdUsage(this, v2);
  }
  return result;
}

uint64_t WordLanguageModel::deleteWord(WordLanguageModel *this, unsigned int a2, BOOL *a3, BOOL *a4)
{
  if (*((_DWORD *)this + 32))
  {
    *(_DWORD *)(*((void *)this + 15) + 4 * a2) = -1;
  }
  else if (*((_DWORD *)this + 36))
  {
    *(_WORD *)(*((void *)this + 17) + 2 * a2) = -1;
  }
  else
  {
    *(unsigned char *)(*((void *)this + 19) + a2) = -1;
  }
  if (*((unsigned char *)this + 276))
  {
    if (*((_DWORD *)this + 72))
    {
      uint64_t v8 = a2;
      *(_DWORD *)(*((void *)this + 35) + 4 * a2) = -1;
    }
    else
    {
      uint64_t v8 = a2;
      if (*((_DWORD *)this + 76)) {
        *(_WORD *)(*((void *)this + 37) + 2 * a2) = -1;
      }
      else {
        *(unsigned char *)(*((void *)this + 39) + a2) = -1;
      }
    }
  }
  else
  {
    uint64_t v8 = a2;
  }
  if (*(_DWORD *)(*(void *)(*((void *)this + 2) + 256) + 4 * v8) == a2 && *((_DWORD *)this + 54))
  {
    unint64_t v9 = 0;
    do
      RecentBuffer::deleteWordId(*(RecentBuffer **)(*((void *)this + 26) + 8 * v9++), a2, a3, a4);
    while (v9 < *((unsigned int *)this + 54));
  }
  uint64_t result = *((void *)this + 29);
  if (result)
  {
    int v11 = *(uint64_t (**)(void))(*(void *)result + 376);
    return v11();
  }
  return result;
}

uint64_t WordLanguageModel::recomputeRecentBufferHeadClonesAndCommonWords(WordLanguageModel *this)
{
  if (*((_DWORD *)this + 54))
  {
    unint64_t v2 = 0;
    do
      RecentBuffer::recomputeRecentBufferHeadClonesAndCommonWords(*(RecentBuffer **)(*((void *)this + 26) + 8 * v2++));
    while (v2 < *((unsigned int *)this + 54));
  }
  uint64_t result = *((void *)this + 29);
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 384);
    return v4();
  }
  return result;
}

uint64_t WordLanguageModel::recomputeRecentBufferRemainders(WordLanguageModel *this)
{
  if (*((_DWORD *)this + 54))
  {
    unint64_t v2 = 0;
    do
      RecentBuffer::recomputeRecentBufferRemainders(*(RecentBuffer **)(*((void *)this + 26) + 8 * v2++));
    while (v2 < *((unsigned int *)this + 54));
  }
  uint64_t result = *((void *)this + 29);
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 392);
    return v4();
  }
  return result;
}

void *WordLanguageModel::notifyEmptiedWordList(WordLanguageModel *this)
{
  unint64_t v2 = (void *)*((void *)this + 15);
  if (v2)
  {
    MemChunkFree(v2, 0);
    *((void *)this + 15) = 0;
  }
  *((void *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
  unsigned int v3 = (void *)*((void *)this + 17);
  if (v3)
  {
    MemChunkFree(v3, 0);
    *((void *)this + 17) = 0;
  }
  *((void *)this + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  uint64_t v4 = (void *)*((void *)this + 19);
  if (v4)
  {
    MemChunkFree(v4, 0);
    *((void *)this + 19) = 0;
  }
  *((void *)this + 20) = 0;
  int v5 = (void *)*((void *)this + 35);
  if (v5)
  {
    MemChunkFree(v5, 0);
    *((void *)this + 35) = 0;
  }
  *((void *)this + 36) = 0;
  uint64_t v6 = (void *)*((void *)this + 37);
  if (v6)
  {
    MemChunkFree(v6, 0);
    *((void *)this + 37) = 0;
  }
  *((void *)this + 3DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  uint64_t result = (void *)*((void *)this + 39);
  if (result)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *((void *)this + 39) = 0;
  }
  *((void *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = 0;
  return result;
}

void WordLanguageModel::verifyValidTopicWordLM(WordLanguageModel *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 16) >= 4u) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 10333, (uint64_t)"lm/wordlm", 23, (uint64_t)"%u %.500s", a7, a8, *((_DWORD *)this + 16));
  }
  if (*((void *)this + 5)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 10336, (uint64_t)"lm/wordlm", 25, (uint64_t)"%.500s", a7, a8, (char)"TopicWord");
  }
  if (*((void *)this + 29)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 10338, (uint64_t)"lm/wordlm", 33, (uint64_t)"%.500s", a7, a8, (char)"TopicWord");
  }
}

void WordLanguageModel::verifyConsistentWithWordNgramBuildSpec(WordLanguageModel *this, const WordNgramBuildSpec *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 16) != *((_DWORD *)a2 + 2)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 10347, (uint64_t)"lm/wordlm", 94, (uint64_t)"%u %u", a7, a8, *((_DWORD *)this + 16));
  }
  if (*((unsigned __int8 *)this + 80) != *((unsigned __int8 *)a2 + 12)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 10352, (uint64_t)"lm/wordlm", 95, (uint64_t)"%u %u", a7, a8, *((unsigned char *)this + 80));
  }
  if (*((_DWORD *)this + 25) == -1)
  {
    if (*((unsigned char *)a2 + 13)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 10355, (uint64_t)"lm/wordlm", 96, (uint64_t)"%s", a7, a8, (char)&errStr_lm_wordlm_E_WORDNGRAMBUILDSPEC_MISMATCH_IGNOREINCONTEXTLMID);
    }
  }
}

unint64_t WordLanguageModel::getWordId(WordLanguageModel *this, int a2, int a3)
{
  if (a2 == -1) {
    return 0xFFFFFFLL;
  }
  if (a2 == -2) {
    return 16777212;
  }
  if (a3 && *((unsigned char *)this + 276))
  {
    for (unint64_t result = 0; ; ++result)
    {
      unint64_t v5 = *((unsigned int *)this + 32);
      if (!*((_DWORD *)this + 32))
      {
        unint64_t v5 = *((unsigned int *)this + 36);
        if (!v5) {
          unint64_t v5 = *((unsigned int *)this + 40);
        }
      }
      if (result >= v5) {
        break;
      }
      if (*((_DWORD *)this + 72))
      {
        int v6 = *(_DWORD *)(*((void *)this + 35) + 4 * result);
      }
      else
      {
        if (*((_DWORD *)this + 76))
        {
          int v6 = *(unsigned __int16 *)(*((void *)this + 37) + 2 * result);
          BOOL v7 = v6 == 0xFFFF;
        }
        else
        {
          int v6 = *(unsigned __int8 *)(*((void *)this + 39) + result);
          BOOL v7 = v6 == 255;
        }
        if (v7) {
          int v6 = -1;
        }
      }
      if (v6 == a2)
      {
        if (result != 0xFFFFFF) {
          return result;
        }
        break;
      }
    }
    if (*((_DWORD *)this + 28) == a2) {
      return 16777214;
    }
    goto LABEL_46;
  }
  unint64_t result = 0;
  unsigned int v8 = *((_DWORD *)this + 32);
  if (!v8) {
    goto LABEL_26;
  }
LABEL_24:
  if (result >= v8) {
    goto LABEL_38;
  }
  int v9 = *(_DWORD *)(*((void *)this + 15) + 4 * result);
  while (v9 != a2)
  {
    unint64_t result = (result + 1);
    if (v8) {
      goto LABEL_24;
    }
LABEL_26:
    unsigned int v10 = *((_DWORD *)this + 36);
    if (v10)
    {
      if (result >= v10) {
        goto LABEL_38;
      }
      int v9 = *(unsigned __int16 *)(*((void *)this + 17) + 2 * result);
      BOOL v11 = v9 == 0xFFFF;
    }
    else
    {
      if (result >= *((_DWORD *)this + 40)) {
        goto LABEL_38;
      }
      int v9 = *(unsigned __int8 *)(*((void *)this + 19) + result);
      BOOL v11 = v9 == 255;
    }
    if (v11) {
      int v9 = -1;
    }
  }
  if (result == 0xFFFFFF)
  {
LABEL_38:
    if (*((_DWORD *)this + 28) != a2)
    {
LABEL_46:
      if (*((_DWORD *)this + 29) == a2) {
        return 16777213;
      }
      else {
        return 0xFFFFFFLL;
      }
    }
    if (a3) {
      return 16777214;
    }
    if (*((_DWORD *)this + 29) == a2) {
      return 16777213;
    }
    else {
      return 16777214;
    }
  }
  return result;
}

uint64_t WordLanguageModel::languageScore(WordLanguageModel *this, uint64_t a2, unsigned int a3, LMStats *a4, LMContextData *a5, LMScoreDetails *a6, uint64_t a7, uint64_t a8, BOOL *a9)
{
  ++*(_DWORD *)a4;
  unsigned int v16 = 0;
  if (a7 && a6 && *((void *)this + 1))
  {
    unsigned int v16 = *((_DWORD *)a6 + 2);
    LMScoreDetails::addDetails((unint64_t)a6, 0, 6, 1);
  }
  unsigned int LmId = WordLanguageModel::getLmId(this, a2);
  unsigned int v18 = LmId;
  if (*(_DWORD *)(*((void *)this + 2) + 388) > a2
    || a2 == 16777213 && *((_DWORD *)this + 29) < *((_DWORD *)this + 26))
  {
    int v19 = *((_DWORD *)this + 16);
    if (v19 == 1 || *((_DWORD *)a5 + 6) == 16777212)
    {
      LOWORD(v20) = *(_WORD *)(*((void *)this + 21) + 2 * LmId);
      if (!a6)
      {
LABEL_46:
        BOOL v24 = 1;
        goto LABEL_47;
      }
      __int16 v21 = *(_WORD *)(*((void *)this + 21) + 2 * LmId);
      unsigned int v22 = a6;
      int v23 = 0;
LABEL_45:
      LMScoreDetails::addDetails((unint64_t)v22, v21, v23, 0);
      goto LABEL_46;
    }
    if (*((_DWORD *)this + 27) <= LmId) {
      goto LABEL_35;
    }
    if (v19 == 2) {
      goto LABEL_31;
    }
    if (v19 != 3)
    {
      if (v19 != 4) {
        goto LABEL_35;
      }
      if (*((_DWORD *)a5 + 19) != -1)
      {
        int QuadgramScoreSearch = WordLanguageModel::findQuadgramScoreSearch(this, LmId, (uint64_t)a4, (uint64_t)a5);
        if (QuadgramScoreSearch != 20000)
        {
          int v23 = 3;
LABEL_34:
          if (QuadgramScoreSearch != 20000)
          {
LABEL_40:
            if (QuadgramScoreSearch >= 40 * *((_DWORD *)this + 8)) {
              int v31 = 40 * *((_DWORD *)this + 8);
            }
            else {
              int v31 = QuadgramScoreSearch;
            }
            int v20 = v31 & ~(v31 >> 31);
            if (!a6) {
              goto LABEL_46;
            }
            __int16 v21 = v31 & ~(unsigned __int16)(v31 >> 31);
            unsigned int v22 = a6;
            goto LABEL_45;
          }
LABEL_35:
          uint64_t v29 = *((void *)this + 29);
          if (v29)
          {
            char v33 = 0;
            int QuadgramScoreSearch = *((__int16 *)a5 + 16)
                                + *((__int16 *)a5 + 33)
                                + *((__int16 *)a5 + 42)
                                + (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, LMStats *, void, void, uint64_t, uint64_t, char *))(*(void *)v29 + 504))(v29, a2, 0xFFFFLL, a4, *((void *)a5 + 14), 0, a7, a8, &v33);
            int v23 = 4;
          }
          else
          {
            int v23 = 0;
            uint64_t v30 = 328;
            if (!*((_DWORD *)this + 84)) {
              uint64_t v30 = 168;
            }
            int QuadgramScoreSearch = *((__int16 *)a5 + 16)
                                + *((__int16 *)a5 + 33)
                                + *((__int16 *)a5 + 42)
                                + *(unsigned __int16 *)(*(void *)((char *)this + v30) + 2 * v18);
          }
          goto LABEL_40;
        }
      }
    }
    if (*((_DWORD *)a5 + 15) == -1
      || (!*((unsigned char *)a5 + 64)
        ? (int TrigramScoreSearch = WordLanguageModel::findTrigramScoreSearch((uint64_t)this, v18, (uint64_t)a4, (uint64_t)a5))
        : (int TrigramScoreSearch = WordLanguageModel::findTrigramScoreLookup((uint64_t)this, v18, (uint64_t)a5)),
          TrigramScoreSearch == 20000))
    {
LABEL_31:
      if (*((_DWORD *)a5 + 4) == -1) {
        goto LABEL_35;
      }
      int v27 = *((unsigned char *)a5 + 20)
          ? WordLanguageModel::findBigramScoreLookup((uint64_t)this, v18, (uint64_t)a5)
          : WordLanguageModel::findBigramScoreSearch((uint64_t)this, v18, (uint64_t)a4, (uint64_t)a5);
      if (v27 == 20000) {
        goto LABEL_35;
      }
      int v28 = *((__int16 *)a5 + 33) + v27;
      int TrigramScoreSearch = *((__int16 *)a5 + 42);
      int v23 = 1;
    }
    else
    {
      int v28 = *((__int16 *)a5 + 42);
      int v23 = 2;
    }
    int QuadgramScoreSearch = v28 + TrigramScoreSearch;
    goto LABEL_34;
  }
  if (a6) {
    LMScoreDetails::addDetails((unint64_t)a6, 0, 7, 0);
  }
  BOOL v24 = 0;
  LOWORD(v20) = 0;
LABEL_47:
  *a9 = v24;
  return LanguageModel::languageScoreFinish(this, a2, (__int16)v20, a6, a7, v16, a5);
}

uint64_t WordLanguageModel::findQuadgramScoreSearch(void *a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  BOOL v7 = (QuadgramData *)(a1 + 154);
  unint64_t v8 = *(unsigned int *)(a4 + 80);
  uint64_t v9 = *(unsigned int *)(a1[185] + 4 * v8);
  if (*((_DWORD *)a1 + 308) && ((*(_DWORD *)(a1[168] + ((v8 >> 3) & 0x1FFFFFFC)) >> v8) & 1) != 0)
  {
    LODWORD(v9) = *(_DWORD *)(a1[207] + 4 * v9);
    unsigned int v10 = a1 + 217;
  }
  else
  {
    unsigned int v10 = a1 + 189;
  }
  unsigned int v11 = 0;
  int v12 = *(unsigned __int16 *)(*v10 + 2 * (v9 + *(_DWORD *)(a4 + 76)));
  ++*(_DWORD *)(a3 + 48);
  unsigned int v13 = v12 - 1;
  if (v13 >= a2) {
    unsigned int v14 = a2;
  }
  else {
    unsigned int v14 = v13;
  }
  int v15 = 1;
  while (1)
  {
    int v16 = v15;
    unsigned int v17 = v11 + v14;
    unsigned int v18 = (v11 + v14) >> 1;
    unsigned int Quad3SuccIdForIndex = QuadgramData::getQuad3SuccIdForIndex(v7, *(_DWORD *)(a4 + 80), *(_DWORD *)(a4 + 76), v18);
    if (Quad3SuccIdForIndex == a2) {
      break;
    }
    if (Quad3SuccIdForIndex > a2)
    {
      if (v17 < 2) {
        goto LABEL_15;
      }
      unsigned int v14 = v18 - 1;
    }
    else
    {
      unsigned int v11 = v18 + 1;
    }
    int v15 = v16 + 1;
    if (v11 > v14)
    {
LABEL_15:
      *(_DWORD *)(a3 + 52) += v16;
      return 20000;
    }
  }
  *(_DWORD *)(a3 + 52) += v16;
  int v22 = *(_DWORD *)(a4 + 76);
  unsigned int v21 = *(_DWORD *)(a4 + 80);

  return QuadgramData::getScoreForIndex(v7, v21, v22, v17 >> 1);
}

uint64_t WordLanguageModel::findTrigramScoreLookup(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a3 + 60);
  if (*(unsigned __int16 *)(*(void *)(a1 + 1040) + 2 * v3) < a2) {
    return 20000;
  }
  uint64_t v5 = *(_DWORD *)(*(void *)(a1 + 1024) + 4 * v3) + (unsigned __int16)a2 - 1;
  if (*(_DWORD *)(a1 + 784))
  {
    uint64_t v5 = *(unsigned __int8 *)(*(void *)(a1 + 1072) + v5);
    uint64_t v6 = *(void *)(a1 + 776);
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 1056);
  }
  return *(unsigned __int16 *)(v6 + 2 * v5);
}

uint64_t WordLanguageModel::findTrigramScoreSearch(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7 = 0;
  unint64_t v8 = (TrigramData *)(a1 + 744);
  int v9 = *(unsigned __int16 *)(*(void *)(a1 + 1040) + 2 * *(unsigned int *)(a4 + 60));
  ++*(_DWORD *)(a3 + 32);
  unsigned int v10 = v9 - 1;
  if (v10 >= a2) {
    unsigned int v11 = a2;
  }
  else {
    unsigned int v11 = v10;
  }
  int v12 = 1;
  while (1)
  {
    int v13 = v12;
    unsigned int v14 = v7 + v11;
    unsigned int v15 = (v7 + v11) >> 1;
    unsigned int SearchSuccIdForIndex = TrigramData::getSearchSuccIdForIndex(v8, *(_DWORD *)(a4 + 60), v15);
    if (SearchSuccIdForIndex == a2) {
      break;
    }
    if (SearchSuccIdForIndex > a2)
    {
      if (v14 < 2) {
        goto LABEL_11;
      }
      unsigned int v11 = v15 - 1;
    }
    else
    {
      unsigned int v7 = v15 + 1;
    }
    int v12 = v13 + 1;
    if (v7 > v11)
    {
LABEL_11:
      *(_DWORD *)(a3 + 36) += v13;
      return 20000;
    }
  }
  *(_DWORD *)(a3 + 36) += v13;
  unsigned int v18 = *(_DWORD *)(a4 + 60);

  return TrigramData::getSearchScoreForIndex(v8, v18, v14 >> 1);
}

uint64_t WordLanguageModel::findBigramScoreLookup(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a3 + 16);
  if (*(unsigned __int16 *)(*(void *)(a1 + 552) + 2 * v3) < a2) {
    return 20000;
  }
  uint64_t v5 = *(_DWORD *)(*(void *)(a1 + 536) + 4 * v3) + (unsigned __int16)a2 - 1;
  if (*(_DWORD *)(a1 + 376))
  {
    uint64_t v5 = *(unsigned __int8 *)(*(void *)(a1 + 584) + v5);
    uint64_t v6 = *(void *)(a1 + 368);
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 568);
  }
  return *(unsigned __int16 *)(v6 + 2 * v5);
}

uint64_t WordLanguageModel::findBigramScoreSearch(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7 = 0;
  unint64_t v8 = (BigramData *)(a1 + 360);
  int v9 = *(unsigned __int16 *)(*(void *)(a1 + 552) + 2 * *(unsigned int *)(a4 + 16));
  ++*(_DWORD *)(a3 + 16);
  unsigned int v10 = v9 - 1;
  if (v10 >= a2) {
    unsigned int v11 = a2;
  }
  else {
    unsigned int v11 = v10;
  }
  int v12 = 1;
  while (1)
  {
    int v13 = v12;
    unsigned int v14 = v7 + v11;
    unsigned int v15 = (v7 + v11) >> 1;
    unsigned int SearchSuccIdForIndex = BigramData::getSearchSuccIdForIndex(v8, *(_DWORD *)(a4 + 16), v15);
    if (SearchSuccIdForIndex == a2) {
      break;
    }
    if (SearchSuccIdForIndex > a2)
    {
      if (v14 < 2) {
        goto LABEL_11;
      }
      unsigned int v11 = v15 - 1;
    }
    else
    {
      unsigned int v7 = v15 + 1;
    }
    int v12 = v13 + 1;
    if (v7 > v11)
    {
LABEL_11:
      *(_DWORD *)(a3 + 20) += v13;
      return 20000;
    }
  }
  *(_DWORD *)(a3 + 20) += v13;
  unsigned int v18 = *(_DWORD *)(a4 + 16);

  return BigramData::getSearchScoreForIndex(v8, v18, v14 >> 1);
}

uint64_t WordLanguageModel::languageScoreForSearch(WordLanguageModel *this, uint64_t a2, unsigned int a3, LMStats *a4, LMContextData *a5, uint64_t a6, BOOL *a7)
{
  ++*(_DWORD *)a4;
  unsigned int LmIdForSearch = WordLanguageModel::getLmIdForSearch(this, a2);
  unsigned int v14 = LmIdForSearch;
  if (a2 != 16777213 || *((_DWORD *)this + 29) < *((_DWORD *)this + 26))
  {
    int v15 = *((_DWORD *)this + 16);
    if (v15 == 1 || *((_DWORD *)a5 + 6) == 16777212)
    {
      LOWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = *(_WORD *)(*((void *)this + 21) + 2 * LmIdForSearch);
LABEL_40:
      BOOL v17 = 1;
      goto LABEL_41;
    }
    if (*((_DWORD *)this + 27) <= LmIdForSearch) {
      goto LABEL_31;
    }
    if (v15 == 2) {
      goto LABEL_18;
    }
    if (v15 != 3)
    {
      if (v15 != 4) {
        goto LABEL_31;
      }
      if (*((_DWORD *)a5 + 19) != -1)
      {
        int QuadgramScoreSearch = WordLanguageModel::findQuadgramScoreSearch(this, LmIdForSearch, (uint64_t)a4, (uint64_t)a5);
        if (QuadgramScoreSearch != 20000) {
          goto LABEL_30;
        }
      }
    }
    if (*((_DWORD *)a5 + 15) == -1
      || (!*((unsigned char *)a5 + 64)
        ? (int TrigramScoreSearch = WordLanguageModel::findTrigramScoreSearch((uint64_t)this, v14, (uint64_t)a4, (uint64_t)a5))
        : (int TrigramScoreSearch = WordLanguageModel::findTrigramScoreLookup((uint64_t)this, v14, (uint64_t)a5)),
          TrigramScoreSearch == 20000))
    {
LABEL_18:
      uint64_t v20 = *((unsigned int *)a5 + 4);
      if (v20 == -1) {
        goto LABEL_31;
      }
      if (*((unsigned char *)a5 + 20))
      {
        if (v14 > *(unsigned __int16 *)(*((void *)this + 69) + 2 * v20)) {
          goto LABEL_31;
        }
        uint64_t v21 = *(_DWORD *)(*((void *)this + 67) + 4 * v20) + (unsigned __int16)v14 - 1;
        if (*((_DWORD *)this + 94))
        {
          uint64_t v21 = *(unsigned __int8 *)(*((void *)this + 73) + v21);
          uint64_t v22 = *((void *)this + 46);
        }
        else
        {
          uint64_t v22 = *((void *)this + 71);
        }
        int BigramScoreSearch = *(unsigned __int16 *)(v22 + 2 * v21);
      }
      else
      {
        int BigramScoreSearch = WordLanguageModel::findBigramScoreSearch((uint64_t)this, v14, (uint64_t)a4, (uint64_t)a5);
      }
      if (BigramScoreSearch == 20000)
      {
LABEL_31:
        uint64_t v25 = *((void *)this + 29);
        if (v25)
        {
          char v29 = 0;
          int QuadgramScoreSearch = *((__int16 *)a5 + 16)
                              + *((__int16 *)a5 + 33)
                              + *((__int16 *)a5 + 42)
                              + (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, LMStats *, void, uint64_t, char *))(*(void *)v25 + 512))(v25, a2, 0xFFFFLL, a4, *((void *)a5 + 14), a6, &v29);
        }
        else
        {
          uint64_t v26 = 328;
          if (!*((_DWORD *)this + 84)) {
            uint64_t v26 = 168;
          }
          int QuadgramScoreSearch = *((__int16 *)a5 + 16)
                              + *((__int16 *)a5 + 33)
                              + *((__int16 *)a5 + 42)
                              + *(unsigned __int16 *)(*(void *)((char *)this + v26) + 2 * v14);
        }
        goto LABEL_36;
      }
      int v23 = *((__int16 *)a5 + 33) + BigramScoreSearch;
      int TrigramScoreSearch = *((__int16 *)a5 + 42);
    }
    else
    {
      int v23 = *((__int16 *)a5 + 42);
    }
    int QuadgramScoreSearch = v23 + TrigramScoreSearch;
LABEL_30:
    if (QuadgramScoreSearch != 20000)
    {
LABEL_36:
      if (QuadgramScoreSearch >= 40 * *((_DWORD *)this + 8)) {
        int v27 = 40 * *((_DWORD *)this + 8);
      }
      else {
        int v27 = QuadgramScoreSearch;
      }
      int v16 = v27 & ~(v27 >> 31);
      goto LABEL_40;
    }
    goto LABEL_31;
  }
  BOOL v17 = 0;
  LOWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
LABEL_41:
  *a7 = v17;
  return LanguageModel::languageScoreFinishForSearch(this, a2, (__int16)v16, a5);
}

uint64_t WordLanguageModel::getLmIdForSearch(WordLanguageModel *this, unsigned int a2)
{
  if (a2 == 16777208) {
    return 4294967294;
  }
  if (a2 == 16777213) {
    return *((unsigned int *)this + 29);
  }
  if (*((_DWORD *)this + 32)) {
    return *(unsigned int *)(*((void *)this + 15) + 4 * a2);
  }
  if (*((_DWORD *)this + 36))
  {
    unsigned int v3 = *(unsigned __int16 *)(*((void *)this + 17) + 2 * a2);
    BOOL v4 = v3 == 0xFFFF;
  }
  else
  {
    unsigned int v3 = *(unsigned __int8 *)(*((void *)this + 19) + a2);
    BOOL v4 = v3 == 255;
  }
  if (v4) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v3;
  }
}

unint64_t WordLanguageModel::languageScoreForPrefilterer(unint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  unsigned int v6 = *(_DWORD *)(a2 + 8);
  unsigned int v7 = *(_DWORD *)(a3 + 12);
  LODWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v6;
  if (v6 > v7)
  {
    unint64_t result = DgnPrimArray<short>::reallocElts(a3, v6 - v7, 0);
    LODWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(a3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v6;
  if (v8)
  {
    int v9 = *(unsigned int **)a2;
    int v10 = *(_DWORD *)(v5 + 128);
    uint64_t v11 = *(void *)(v5 + 168);
    uint64_t v8 = v8;
    int v12 = *(_WORD **)a3;
    do
    {
      unsigned int v14 = *v9++;
      uint64_t v13 = v14;
      if (v10)
      {
        unsigned int v15 = *(_DWORD *)(*(void *)(v5 + 120) + 4 * v13);
      }
      else
      {
        if (*(_DWORD *)(v5 + 144))
        {
          unsigned int v15 = *(unsigned __int16 *)(*(void *)(v5 + 136) + 2 * v13);
          BOOL v16 = v15 == 0xFFFF;
        }
        else
        {
          unsigned int v15 = *(unsigned __int8 *)(*(void *)(v5 + 152) + v13);
          BOOL v16 = v15 == 255;
        }
        if (v16) {
          unsigned int v15 = -1;
        }
      }
      *v12++ = *(_WORD *)(v11 + 2 * v15);
      --v8;
    }
    while (v8);
  }
  return result;
}

BOOL WordLanguageModel::isFinalSilenceScoredVerify(WordLanguageModel *this)
{
  return *((_DWORD *)this + 29) < *((_DWORD *)this + 26);
}

BOOL WordLanguageModel::hasAnyQuadgrams(WordLanguageModel *this)
{
  return *((_DWORD *)this + 16) > 3u;
}

BOOL WordLanguageModel::tri1HasTrigrams(WordLanguageModel *this, unsigned int a2)
{
  unsigned int v3 = *((_DWORD *)this + 16);
  if (v3 == 2)
  {
    int v4 = *((_DWORD *)this + 68);
    return v4 != 0;
  }
  if (v3 >= 3)
  {
    if (a2 < 0xFFFFF4)
    {
      MaybeContextunsigned int LmId = WordLanguageModel::getMaybeContextLmId(this, a2);
      if (*((_DWORD *)this + 200) > MaybeContextLmId)
      {
        int v4 = *(unsigned __int16 *)(*((void *)this + 99) + 2 * MaybeContextLmId);
        return v4 != 0;
      }
    }
    else if (a2 == 16777214)
    {
      uint64_t v6 = *((unsigned int *)this + 28);
      if (v6 < *((_DWORD *)this + 26) && *((_DWORD *)this + 200) > v6)
      {
        int v4 = *(unsigned __int16 *)(*((void *)this + 99) + 2 * v6);
        return v4 != 0;
      }
    }
  }
  return 0;
}

BOOL WordLanguageModel::quad1quad2HasQuadgrams(WordLanguageModel *this, unsigned int a2, unsigned int a3)
{
  unsigned int v4 = *((_DWORD *)this + 16);
  if (v4 == 2) {
    return *((_DWORD *)this + 68) > 1u;
  }
  if (v4 < 4) {
    return 0;
  }
  if (a2 <= 0xFFFFF3)
  {
    MaybeContextunsigned int LmId = WordLanguageModel::getMaybeContextLmId(this, a2);
  }
  else
  {
    if (a2 != 16777214) {
      return 0;
    }
    MaybeContextunsigned int LmId = *((_DWORD *)this + 28);
    if (MaybeContextLmId >= *((_DWORD *)this + 26)) {
      return 0;
    }
  }
  if (*((_DWORD *)this + 322) > MaybeContextLmId && *(_WORD *)(*((void *)this + 160) + 2 * MaybeContextLmId))
  {
    if (a3 <= 0xFFFFF3)
    {
      unsigned int v8 = WordLanguageModel::getMaybeContextLmId(this, a3);
    }
    else
    {
      if (a3 != 16777214) {
        return 0;
      }
      unsigned int v8 = *((_DWORD *)this + 28);
      if (v8 >= *((_DWORD *)this + 26)) {
        return 0;
      }
    }
    if (*((_DWORD *)this + 27) > v8) {
      return WordLanguageModel::findQuad2Index(this, MaybeContextLmId, v8) != -1;
    }
  }
  return 0;
}

uint64_t WordLanguageModel::findQuad2Index(WordLanguageModel *this, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = 0;
  if (*(unsigned __int16 *)(*((void *)this + 160) + 2 * a2) - 1 >= a3) {
    unsigned int v4 = a3;
  }
  else {
    unsigned int v4 = *(unsigned __int16 *)(*((void *)this + 160) + 2 * a2) - 1;
  }
  int v5 = *(_DWORD *)(*((void *)this + 162) + 4 * a2);
  uint64_t v6 = *((void *)this + 164);
  while (1)
  {
    unsigned int v7 = v4 + v3;
    uint64_t result = v5 + ((v4 + v3) >> 1);
    unsigned int v9 = *(unsigned __int16 *)(v6 + 2 * result);
    BOOL v10 = v9 > a3;
    if (v9 == a3) {
      break;
    }
    unsigned int v11 = v7 >> 1;
    if (v10)
    {
      if (v7 < 2) {
        return 0xFFFFFFFFLL;
      }
      unsigned int v4 = v11 - 1;
    }
    else
    {
      unsigned int v3 = v11 + 1;
    }
    if (v3 > v4) {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t WordLanguageModel::createContextData(WordLanguageModel *this)
{
  unint64_t v2 = MemChunkAlloc(0x78uLL, 0);
  uint64_t v3 = *((void *)this + 29);

  return WordLMContextData::WordLMContextData((uint64_t)v2, v3);
}

uint64_t WordLanguageModel::setContext(WordLanguageModel *this, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6)
{
  unsigned int v12 = *((_DWORD *)this + 16);
  if (v12 <= 1) {
    goto LABEL_57;
  }
  *(unsigned char *)(a6 + 12) = 1;
  unsigned int v13 = *(_DWORD *)(a2 + 8);
  if (v12 == 2)
  {
    unsigned int v14 = *((_DWORD *)this + 68);
    if (v14)
    {
      if (v14 < v13)
      {
        unsigned int v15 = (unsigned int **)(a6 + 40);
        if (!*(_DWORD *)(a6 + 52))
        {
          DgnPrimArray<unsigned int>::reallocElts(a6 + 40, 1, 0);
          unsigned int v14 = *((_DWORD *)this + 68);
        }
        unsigned int v13 = 1;
        *(_DWORD *)(a6 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = 1;
        **(_DWORD **)(a6 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = *(_DWORD *)(*(void *)a2 + 4 * v14);
        goto LABEL_19;
      }
      unsigned int v13 = 0;
LABEL_18:
      unsigned int v15 = (unsigned int **)a2;
      goto LABEL_19;
    }
  }
  if (*((_DWORD *)this + 25) == -1) {
    goto LABEL_18;
  }
  unsigned int v15 = (unsigned int **)(a6 + 96);
  *(_DWORD *)(a6 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 104) = 0;
  unsigned int v13 = *(_DWORD *)(a2 + 8);
  if (v13)
  {
    unint64_t v16 = 0;
    do
    {
      if (WordLanguageModel::getMaybeContextLmId(this, *(_DWORD *)(*(void *)a2 + 4 * v16)) != *((_DWORD *)this + 25))
      {
        int v17 = *(_DWORD *)(*(void *)a2 + 4 * v16);
        uint64_t v18 = *(unsigned int *)(a6 + 104);
        if (v18 == *(_DWORD *)(a6 + 108))
        {
          DgnPrimArray<unsigned int>::reallocElts(a6 + 96, 1, 1);
          uint64_t v18 = *(unsigned int *)(a6 + 104);
        }
        *(_DWORD *)(*(void *)(a6 + 96) + 4 * v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v17;
        ++*(_DWORD *)(a6 + 104);
      }
      ++v16;
    }
    while (v16 < *(unsigned int *)(a2 + 8));
    unsigned int v13 = *(_DWORD *)(a6 + 104);
  }
LABEL_19:
  if (v13 >= *((_DWORD *)this + 16) - 1) {
    unsigned int v13 = *((_DWORD *)this + 16) - 1;
  }
  *(_DWORD *)(a6 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = v13;
  unsigned int v19 = 16777212;
  *(_DWORD *)(a6 + HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 88) = 16777212;
  *(_DWORD *)(a6 + 6DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 16777212;
  *(_DWORD *)(a6 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = 16777212;
  switch(v13)
  {
    case 3u:
      uint64_t v20 = *v15;
      *(_DWORD *)(a6 + HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 88) = (*v15)[2];
LABEL_27:
      *(_DWORD *)(a6 + 6DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v20[1];
      goto LABEL_28;
    case 2u:
      uint64_t v20 = *v15;
      goto LABEL_27;
    case 1u:
      uint64_t v20 = *v15;
LABEL_28:
      unsigned int v19 = *v20;
      *(_DWORD *)(a6 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = *v20;
      break;
  }
  uint64_t v21 = *((void *)this + 29);
  if (v21)
  {
    (*(void (**)(uint64_t, uint64_t, void, uint64_t, unsigned int *, void))(*(void *)v21 + 472))(v21, a2, 0, a4, a5, *(void *)(a6 + 112));
    unsigned int v19 = *(_DWORD *)(a6 + 24);
  }
  *(_DWORD *)(a6 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = -1;
  *(unsigned char *)(a6 + 20) = 0;
  *(_DWORD *)(a6 + 60) = -1;
  *(unsigned char *)(a6 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = 0;
  *(_DWORD *)(a6 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = -1;
  *(_WORD *)(a6 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
  *(_WORD *)(a6 + 66) = 0;
  *(_WORD *)(a6 + 84) = 0;
  *(_DWORD *)(a6 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = -2;
  *(void *)(a6 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = -2;
  *(_DWORD *)(a6 + 92) = -2;
  switch(v19)
  {
    case 0xFFFFF8u:
    case 0xFFFFFEu:
      MaybeContextunsigned int LmId = *((_DWORD *)this + 28);
      if (MaybeContextLmId < *((_DWORD *)this + 26)) {
        goto LABEL_36;
      }
      goto LABEL_40;
    case 0xFFFFFCu:
      goto LABEL_40;
    case 0xFFFFFFu:
      MaybeContextunsigned int LmId = *((_DWORD *)this + 60);
      if (MaybeContextLmId != -1) {
        goto LABEL_36;
      }
LABEL_40:
      *(unsigned char *)(a6 + 13) = 1;
      break;
    default:
      MaybeContextunsigned int LmId = WordLanguageModel::getMaybeContextLmId(this, v19);
LABEL_36:
      *(_DWORD *)(a6 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = MaybeContextLmId;
      *(unsigned char *)(a6 + 13) = 0;
      unsigned int v23 = *((_DWORD *)this + 16);
      if (v23 < 3) {
        goto LABEL_54;
      }
      unsigned int v24 = *(_DWORD *)(a6 + 68);
      switch(v24)
      {
        case 0xFFFFF8u:
        case 0xFFFFFEu:
          unsigned int v25 = *((_DWORD *)this + 28);
          if (v25 < *((_DWORD *)this + 26)) {
            goto LABEL_43;
          }
          break;
        case 0xFFFFFCu:
          break;
        case 0xFFFFFFu:
          unsigned int v25 = *((_DWORD *)this + 60);
          if (v25 != -1) {
LABEL_43:
          }
            *(_DWORD *)(a6 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = v25;
          break;
        default:
          *(_DWORD *)(a6 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = WordLanguageModel::getMaybeContextLmId(this, v24);
          unsigned int v23 = *((_DWORD *)this + 16);
          break;
      }
      if (v23 < 4) {
        goto LABEL_54;
      }
      unsigned int v26 = *(_DWORD *)(a6 + 88);
      switch(v26)
      {
        case 0xFFFFFCu:
          goto LABEL_54;
        case 0xFFFFFEu:
          unsigned int v27 = *((_DWORD *)this + 28);
          if (v27 >= *((_DWORD *)this + 26)) {
            goto LABEL_54;
          }
          break;
        case 0xFFFFFFu:
          unsigned int v27 = *((_DWORD *)this + 60);
          if (v27 == -1) {
            goto LABEL_54;
          }
          break;
        default:
          unsigned int v27 = WordLanguageModel::getMaybeContextLmId(this, v26);
          break;
      }
      *(_DWORD *)(a6 + 92) = v27;
LABEL_54:
      WordLanguageModel::setBigramContext((uint64_t)this, a4, a5, a6);
      if (*((_DWORD *)this + 16) >= 3u)
      {
        WordLanguageModel::setTrigramContext((uint64_t)this, a4, a5, a6);
        if (*((_DWORD *)this + 16) >= 4u) {
          WordLanguageModel::setQuadgramContext((uint64_t)this, a4, a5, a6);
        }
      }
      break;
  }
LABEL_57:

  return LanguageModel::setContext((uint64_t)this, a2, a3, a4, (uint64_t)a5, a6);
}

void WordLanguageModel::setBigramContext(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  unint64_t v7 = *(unsigned int *)(a4 + 28);
  if (v7 <= 0xFFFFF0)
  {
    *(_WORD *)(a4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = *(_WORD *)(*(void *)(a1 + 344) + 2 * v7);
    if (*(_DWORD *)(a1 + 560) > v7)
    {
      if (*(_WORD *)(*(void *)(a1 + 552) + 2 * v7))
      {
        *(_DWORD *)(a4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v7;
        if (*(_DWORD *)(a1 + 360)
          && (*(_DWORD *)(*(void *)(a1 + 400) + 4 * (v7 >> 5)) & (1 << v7)) != 0
          && (*(_DWORD *)(*(void *)(a1 + 416) + 4 * (v7 >> 5)) & (1 << v7)) == 0)
        {
          WordLanguageModel::loadBigramRecord(a1, v7, a2, a3);
          LODWORD(v7) = *(_DWORD *)(a4 + 28);
        }
        *(unsigned char *)(a4 + 20) = (*(_DWORD *)(*(void *)(a1 + 384) + 4 * (v7 >> 5)) >> v7) & 1;
      }
    }
  }
}

void WordLanguageModel::setTrigramContext(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  unsigned int v6 = *(_DWORD *)(a4 + 28);
  if (*(_DWORD *)(a1 + 108) > v6)
  {
    uint64_t v7 = *(unsigned int *)(a4 + 72);
    if (*(_DWORD *)(a1 + 800) > v7)
    {
      uint64_t v8 = *(void *)(a1 + 792);
      int v9 = *(unsigned __int16 *)(v8 + 2 * v7);
      if (*(_WORD *)(v8 + 2 * v7))
      {
        unsigned int v10 = 0;
        unsigned int v11 = v9 - 1;
        if (v11 >= v6) {
          unsigned int v12 = *(_DWORD *)(a4 + 28);
        }
        else {
          unsigned int v12 = v11;
        }
        int v13 = *(_DWORD *)(*(void *)(a1 + 808) + 4 * v7);
        while (1)
        {
          unsigned int v14 = v12 + v10;
          unsigned int v15 = v13 + ((v12 + v10) >> 1);
          unsigned int v16 = *(unsigned __int16 *)(*(void *)(a1 + 824) + 2 * v15);
          if (v6 == v16) {
            break;
          }
          unsigned int v17 = v14 >> 1;
          if (v6 >= v16)
          {
            unsigned int v10 = v17 + 1;
          }
          else
          {
            if (v14 < 2) {
              goto LABEL_16;
            }
            unsigned int v12 = v17 - 1;
          }
          if (v10 > v12) {
            goto LABEL_16;
          }
        }
        *(_DWORD *)(a4 + 60) = v15;
      }
    }
  }
LABEL_16:
  unint64_t v18 = *(unsigned int *)(a4 + 60);
  if (v18 != -1)
  {
    if (*(_DWORD *)(a1 + 768)) {
      unsigned int v19 = (_WORD *)(*(void *)(a1 + 760) + 2 * *(unsigned __int8 *)(*(void *)(a1 + 856) + v18));
    }
    else {
      unsigned int v19 = (_WORD *)(*(void *)(a1 + 840) + 2 * v18);
    }
    *(_WORD *)(a4 + 66) = *v19;
    if (*(_DWORD *)(a1 + 744)
      && (*(_DWORD *)(*(void *)(a1 + 888) + 4 * (v18 >> 5)) & (1 << v18)) != 0
      && (*(_DWORD *)(*(void *)(a1 + 904) + 4 * (v18 >> 5)) & (1 << v18)) == 0)
    {
      WordLanguageModel::loadTrigramRecord(a1, a2, (uint64_t)a3, v18, a2, a3);
      LODWORD(v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *(_DWORD *)(a4 + 60);
    }
    *(unsigned char *)(a4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = (*(_DWORD *)(*(void *)(a1 + 872) + 4 * (v18 >> 5)) >> v18) & 1;
  }
}

uint64_t WordLanguageModel::setQuadgramContext(uint64_t this, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  int v5 = (void *)this;
  unsigned int v6 = *(_DWORD *)(a4 + 28);
  unsigned int v7 = *(_DWORD *)(this + 108);
  if (v7 > v6)
  {
    unsigned int v9 = *(_DWORD *)(a4 + 72);
    if (v7 > v9)
    {
      uint64_t v11 = *(unsigned int *)(a4 + 92);
      if (*(_DWORD *)(this + 1288) > v11)
      {
        if (*(_WORD *)(*(void *)(this + 1280) + 2 * v11))
        {
          this = WordLanguageModel::findQuad2Index((WordLanguageModel *)this, v11, v9);
          *(_DWORD *)(a4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = this;
          if (this != -1)
          {
            unsigned int v14 = this;
            if (*((_DWORD *)v5 + 308))
            {
              uint64_t v15 = this >> 5;
              if ((*(_DWORD *)(v5[168] + 4 * v15) & (1 << this)) != 0
                && (*(_DWORD *)(v5[170] + 4 * v15) & (1 << this)) == 0)
              {
                WordLanguageModel::loadQuadgramRecord((uint64_t)v5, v12, v13, this, a2, a3);
                unsigned int v14 = *(_DWORD *)(a4 + 80);
                unsigned int v6 = *(_DWORD *)(a4 + 28);
                BOOL v16 = *((_DWORD *)v5 + 308) == 0;
              }
              else
              {
                BOOL v16 = 0;
              }
            }
            else
            {
              BOOL v16 = 1;
            }
            unsigned int v17 = 0;
            if (*(unsigned __int16 *)(v5[166] + 2 * v14) - 1 >= v6) {
              unsigned int v18 = v6;
            }
            else {
              unsigned int v18 = *(unsigned __int16 *)(v5[166] + 2 * v14) - 1;
            }
            while (1)
            {
              int v19 = *(_DWORD *)(v5[185] + 4 * v14);
              uint64_t v20 = v5 + 187;
              if (!v16)
              {
                int v19 = *(_DWORD *)(v5[185] + 4 * v14);
                uint64_t v20 = v5 + 187;
                if ((*(_DWORD *)(v5[168] + 4 * (v14 >> 5)) & (1 << v14)) != 0)
                {
                  int v19 = *(_DWORD *)(v5[207] + 4 * *(unsigned int *)(v5[185] + 4 * v14));
                  uint64_t v20 = v5 + 209;
                }
              }
              unsigned int v21 = (v18 + v17) >> 1;
              this = *v20;
              unsigned int v22 = *(unsigned __int16 *)(this + 2 * (v19 + v21));
              if (v6 == v22) {
                break;
              }
              if (v6 >= v22)
              {
                unsigned int v17 = v21 + 1;
              }
              else
              {
                if (v18 + v17 < 2) {
                  goto LABEL_26;
                }
                unsigned int v18 = v21 - 1;
              }
              if (v17 > v18) {
                goto LABEL_26;
              }
            }
            *(_DWORD *)(a4 + 76) = v21;
          }
        }
      }
    }
  }
LABEL_26:
  int v23 = *(_DWORD *)(a4 + 76);
  if (v23 != -1)
  {
    this = QuadgramData::getBackoffWeight((QuadgramData *)(v5 + 154), *(_DWORD *)(a4 + 80), v23);
    *(_WORD *)(a4 + 84) = this;
  }
  return this;
}

void WordLanguageModel::unsetContext(WordLanguageModel *this, LMContextData *a2)
{
  if (*((_DWORD *)this + 16) >= 2u)
  {
    uint64_t v4 = *((void *)this + 29);
    if (v4) {
      (*(void (**)(uint64_t, void))(*(void *)v4 + 480))(v4, *((void *)a2 + 14));
    }
    *((unsigned char *)a2 + 12) = 0;
  }

  LanguageModel::unsetContext(this, a2);
}

BOOL WordLanguageModel::mayWordBeIgnoredInContext(WordLanguageModel *this, unsigned int a2)
{
  return *((_DWORD *)this + 25) != -1
      && WordLanguageModel::getMaybeContextLmId(this, a2) == *((_DWORD *)this + 25);
}

void WordLanguageModel::readBigramRecord(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v27 = 0;
  BOOL v12 = BigramData::isOnDiskCompressed((BigramData *)(a1 + 360), a2);
  unint64_t v13 = *(unsigned __int16 *)(*(void *)(a1 + 552) + 2 * a2);
  if (v12)
  {
    unsigned __int16 v26 = 0;
    readObject(*(RealDFileSubFileStream **)(a1 + 224), &v26, &v27);
    unsigned int v14 = v26;
    unsigned int v15 = *(_DWORD *)(a6 + 12);
    if (v26 > v15) {
      DgnPrimArray<unsigned int>::reallocElts(a6, v26 - v15, 0);
    }
    *(_DWORD *)(a6 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v14;
    readObjectArray(*(char ***)(a1 + 224), *(char **)a6, v14, &v27);
  }
  else
  {
    unsigned int v16 = *(_DWORD *)(a3 + 12);
    if (v13 > v16) {
      DgnPrimArray<short>::reallocElts(a3, v13 - v16, 0);
    }
    *(_DWORD *)(a3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v13;
    readObjectArray(*(char ***)(a1 + 224), *(char **)a3, v13, &v27);
  }
  if (*(_DWORD *)(a1 + 376))
  {
    unsigned int v17 = *(char **)a5;
    if (*(_DWORD *)(a5 + 12) < v13)
    {
      int v28 = 0;
      *(_DWORD *)(a5 + 12) = realloc_array(v17, &v28, v13, *(unsigned int *)(a5 + 8), *(unsigned int *)(a5 + 8), 1);
      unsigned int v17 = (char *)v28;
      *(void *)a5 = v28;
    }
    *(_DWORD *)(a5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v13;
    readObjectArray(*(char ***)(a1 + 224), v17, v13, &v27);
    if (!v12) {
      return;
    }
LABEL_16:
    uint64_t v24 = a1 + 448;
    unsigned int v25 = *(_DWORD *)(a3 + 12);
    if (v13 > v25) {
      DgnPrimArray<short>::reallocElts(a3, v13 - v25, 0);
    }
    *(_DWORD *)(a3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v13;
    HuffmanDecoder<unsigned short,unsigned int>::decodeSuccessors(v24, a6, a3, v18, v19, v20, v21, v22);
    return;
  }
  unsigned int v23 = *(_DWORD *)(a4 + 12);
  if (v13 > v23) {
    DgnPrimArray<short>::reallocElts(a4, v13 - v23, 0);
  }
  *(_DWORD *)(a4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v13;
  readObjectArray(*(char ***)(a1 + 224), *(char **)a4, v13, &v27);
  if (v12) {
    goto LABEL_16;
  }
}

BOOL BigramData::isOnDiskCompressed(BigramData *this, unsigned int a2)
{
  if (*(_DWORD *)this
    && (uint64_t v2 = a2 >> 5, (*(_DWORD *)(*((void *)this + 5) + 4 * v2) & (1 << a2)) != 0)
    && *((_DWORD *)this + 24))
  {
    return (*(_DWORD *)(*((void *)this + 9) + 4 * v2) & (1 << a2)) != 0;
  }
  else
  {
    return 0;
  }
}

void HuffmanDecoder<unsigned short,unsigned int>::decodeSuccessors(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  HuffmanDecoder<unsigned short,unsigned int>::decodeValues(a1, a2, a3, a4, a5, a6, a7, a8);
  unsigned int v17 = *(_DWORD *)(a3 + 8);
  if (v17)
  {
    unsigned __int16 v18 = 0;
    unsigned __int16 v19 = 0;
    uint64_t v20 = *(void *)a3;
    do
    {
      unsigned __int16 v21 = v19;
      uint64_t v22 = v18;
      unsigned int v23 = *(unsigned __int16 *)(v20 + 2 * v18);
      if ((v19 ^ 0xFFFFu) < v23)
      {
        throwDecodeSuccessorOverflow(v9, v10, v11, v12, v13, v14, v15, v16);
        uint64_t v20 = *(void *)a3;
        unsigned int v17 = *(_DWORD *)(a3 + 8);
        LOWORD(v23) = *(_WORD *)(*(void *)a3 + 2 * v22);
      }
      unsigned __int16 v19 = v21 + v23;
      *(_WORD *)(v20 + 2 * v22) = v21 + v23;
      unsigned __int16 v18 = v22 + 1;
    }
    while (v17 > (unsigned __int16)(v22 + 1));
  }
}

void WordLanguageModel::readTrigramRecord(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v27 = 0;
  BOOL v12 = TrigramData::isOnDiskCompressed((TrigramData *)(a1 + 744), a2);
  unint64_t v13 = *(unsigned __int16 *)(*(void *)(a1 + 1040) + 2 * a2);
  if (v12)
  {
    unsigned __int16 v26 = 0;
    readObject(*(RealDFileSubFileStream **)(a1 + 224), &v26, &v27);
    unsigned int v14 = v26;
    unsigned int v15 = *(_DWORD *)(a6 + 12);
    if (v26 > v15) {
      DgnPrimArray<unsigned int>::reallocElts(a6, v26 - v15, 0);
    }
    *(_DWORD *)(a6 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v14;
    readObjectArray(*(char ***)(a1 + 224), *(char **)a6, v14, &v27);
  }
  else
  {
    unsigned int v16 = *(_DWORD *)(a3 + 12);
    if (v13 > v16) {
      DgnPrimArray<short>::reallocElts(a3, v13 - v16, 0);
    }
    *(_DWORD *)(a3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v13;
    readObjectArray(*(char ***)(a1 + 224), *(char **)a3, v13, &v27);
  }
  if (*(_DWORD *)(a1 + 784))
  {
    unsigned int v17 = *(char **)a5;
    if (*(_DWORD *)(a5 + 12) < v13)
    {
      int v28 = 0;
      *(_DWORD *)(a5 + 12) = realloc_array(v17, &v28, v13, *(unsigned int *)(a5 + 8), *(unsigned int *)(a5 + 8), 1);
      unsigned int v17 = (char *)v28;
      *(void *)a5 = v28;
    }
    *(_DWORD *)(a5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v13;
    readObjectArray(*(char ***)(a1 + 224), v17, v13, &v27);
    if (!v12) {
      return;
    }
LABEL_16:
    uint64_t v24 = a1 + 936;
    unsigned int v25 = *(_DWORD *)(a3 + 12);
    if (v13 > v25) {
      DgnPrimArray<short>::reallocElts(a3, v13 - v25, 0);
    }
    *(_DWORD *)(a3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v13;
    HuffmanDecoder<unsigned short,unsigned int>::decodeSuccessors(v24, a6, a3, v18, v19, v20, v21, v22);
    return;
  }
  unsigned int v23 = *(_DWORD *)(a4 + 12);
  if (v13 > v23) {
    DgnPrimArray<short>::reallocElts(a4, v13 - v23, 0);
  }
  *(_DWORD *)(a4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v13;
  readObjectArray(*(char ***)(a1 + 224), *(char **)a4, v13, &v27);
  if (v12) {
    goto LABEL_16;
  }
}

BOOL TrigramData::isOnDiskCompressed(TrigramData *this, unsigned int a2)
{
  if (*(_DWORD *)this
    && (uint64_t v2 = a2 >> 5, (*(_DWORD *)(*((void *)this + 18) + 4 * v2) & (1 << a2)) != 0)
    && *((_DWORD *)this + 50))
  {
    return (*(_DWORD *)(*((void *)this + 22) + 4 * v2) & (1 << a2)) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t TrigramData::tri2SetUnallocated(uint64_t this, unsigned int a2)
{
  uint64_t v2 = a2 >> 5;
  *(_DWORD *)(*(void *)(this + 128) + 4 * v2) &= ~(1 << a2);
  if (*(_DWORD *)this)
  {
    int v3 = ~(1 << a2);
    *(_DWORD *)(*(void *)(this + 144) + 4 * v2) &= v3;
    *(_DWORD *)(*(void *)(this + 160) + 4 * v2) &= v3;
    if (*(_DWORD *)(this + 200)) {
      *(_DWORD *)(*(void *)(this + 176) + 4 * v2) &= v3;
    }
  }
  *(_DWORD *)(*(void *)(this + 280) + 4 * a2) = -1;
  *(_WORD *)(*(void *)(this + 296) + 2 * a2) = 0;
  return this;
}

void WordLanguageModel::readCompressedQuad3Data(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  unsigned __int16 v15 = 0;
  readObject(*(RealDFileSubFileStream **)(a1 + 224), &v15, a4);
  int v8 = v15;
  unsigned int v9 = *(_DWORD *)(a2 + 12);
  unsigned int v10 = v15;
  if (v15 > v9)
  {
    DgnPrimArray<unsigned int>::reallocElts(a2, v15 - v9, 0);
    unsigned int v10 = v15;
  }
  *(_DWORD *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v8;
  readObjectArray(*(char ***)(a1 + 224), *(char **)a2, v10, a4);
  unsigned __int16 v14 = 0;
  readObject(*(RealDFileSubFileStream **)(a1 + 224), &v14, a4);
  int v11 = v14;
  unsigned int v12 = *(_DWORD *)(a3 + 12);
  unsigned int v13 = v14;
  if (v14 > v12)
  {
    DgnPrimArray<unsigned int>::reallocElts(a3, v14 - v12, 0);
    unsigned int v13 = v14;
  }
  *(_DWORD *)(a3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v11;
  readObjectArray(*(char ***)(a1 + 224), *(char **)a3, v13, a4);
}

void WordLanguageModel::readUncompressedQuad3Data(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  readObjectArray(*(char ***)(a1 + 224), *(char **)a2, *(_DWORD *)(a2 + 8), a4);
  unsigned int v7 = *(char ***)(a1 + 224);
  int v8 = *(char **)a3;
  unsigned int v9 = *(_DWORD *)(a3 + 8);

  readObjectArray(v7, v8, v9, a4);
}

void WordLanguageModel::readQuadgramRecord(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unsigned int v49 = 0;
  BOOL v20 = QuadgramData::isOnDiskCompressed((QuadgramData *)(a1 + 1232), a2);
  unint64_t v21 = *(unsigned __int16 *)(*(void *)(a1 + 1328) + 2 * a2);
  unsigned int v22 = *(_DWORD *)(a3 + 12);
  if (v21 > v22) {
    DgnPrimArray<short>::reallocElts(a3, v21 - v22, 0);
  }
  *(_DWORD *)(a3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v21;
  unsigned int v23 = *(_DWORD *)(a4 + 12);
  if (v21 > v23) {
    DgnPrimArray<short>::reallocElts(a4, v21 - v23, 0);
  }
  *(_DWORD *)(a4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v21;
  if (v20) {
    WordLanguageModel::readCompressedQuad3Data(a1, a10, a11, &v49);
  }
  else {
    WordLanguageModel::readUncompressedQuad3Data(a1, a3, a4, &v49);
  }
  if (*(_DWORD *)(a1 + 1256))
  {
    uint64_t v24 = *(char **)a7;
    if (*(_DWORD *)(a7 + 12) < v21)
    {
      unsigned __int16 v50 = 0;
      *(_DWORD *)(a7 + 12) = realloc_array(v24, &v50, v21, *(unsigned int *)(a7 + 8), *(unsigned int *)(a7 + 8), 1);
      uint64_t v24 = (char *)v50;
      *(void *)a7 = v50;
    }
    *(_DWORD *)(a7 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v21;
    readObjectArray(*(char ***)(a1 + 224), v24, v21, &v49);
  }
  else
  {
    unsigned int v25 = *(_DWORD *)(a6 + 12);
    if (v21 > v25) {
      DgnPrimArray<short>::reallocElts(a6, v21 - v25, 0);
    }
    *(_DWORD *)(a6 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v21;
    readObjectArray(*(char ***)(a1 + 224), *(char **)a6, v21, &v49);
  }
  unsigned int v48 = 0;
  unsigned __int16 v26 = *(RealDFileSubFileStream **)(a1 + 224);
  if (v20)
  {
    readObject(v26, &v48, &v49);
    readObject<unsigned int>(*(RealDFileSubFileStream **)(a1 + 224), a12, &v49);
  }
  else
  {
    readObject<unsigned short>(v26, a5, &v49);
    unsigned int v48 = *(_DWORD *)(a5 + 8);
  }
  unsigned int v27 = v48;
  if (*(_DWORD *)(a1 + 1272))
  {
    int v28 = *(char **)a9;
    if (*(_DWORD *)(a9 + 12) < v48)
    {
      unsigned __int16 v50 = 0;
      *(_DWORD *)(a9 + 12) = realloc_array(v28, &v50, v48, *(unsigned int *)(a9 + 8), *(unsigned int *)(a9 + 8), 1);
      int v28 = (char *)v50;
      *(void *)a9 = v50;
    }
    *(_DWORD *)(a9 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v27;
    readObjectArray(*(char ***)(a1 + 224), v28, v27, &v49);
    if (!v20) {
      return;
    }
LABEL_26:
    uint64_t v35 = a1 + 1392;
    HuffmanDecoder<unsigned short,unsigned int>::decodeValues(v35, a10, a3, v29, v30, v31, v32, v33);
    HuffmanDecoder<unsigned short,unsigned int>::decodeSuccessors(v35, a11, a4, v36, v37, v38, v39, v40);
    unsigned int v46 = v48;
    unsigned int v47 = *(_DWORD *)(a5 + 12);
    if (v48 > v47) {
      DgnPrimArray<short>::reallocElts(a5, v48 - v47, 0);
    }
    *(_DWORD *)(a5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v46;
    HuffmanDecoder<unsigned short,unsigned int>::decodeValues(v35, a12, a5, v41, v42, v43, v44, v45);
    return;
  }
  unsigned int v34 = *(_DWORD *)(a8 + 12);
  if (v48 > v34) {
    DgnPrimArray<short>::reallocElts(a8, v48 - v34, 0);
  }
  *(_DWORD *)(a8 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v27;
  readObjectArray(*(char ***)(a1 + 224), *(char **)a8, v27, &v49);
  if (v20) {
    goto LABEL_26;
  }
}

BOOL QuadgramData::isOnDiskCompressed(QuadgramData *this, unsigned int a2)
{
  if (*(_DWORD *)this
    && (uint64_t v2 = a2 >> 5, (*(_DWORD *)(*((void *)this + 14) + 4 * v2) & (1 << a2)) != 0)
    && *((_DWORD *)this + 42))
  {
    return (*(_DWORD *)(*((void *)this + 18) + 4 * v2) & (1 << a2)) != 0;
  }
  else
  {
    return 0;
  }
}

void readObject<unsigned short>(RealDFileSubFileStream *a1, uint64_t a2, unsigned int *a3)
{
  unsigned int v8 = 0;
  readObject(a1, &v8, a3);
  unsigned int v6 = v8;
  unsigned int v7 = *(_DWORD *)(a2 + 12);
  if (v8 > v7) {
    DgnPrimArray<short>::reallocElts(a2, v8 - v7, 0);
  }
  *(_DWORD *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v6;
  readObjectArray((char **)a1, *(char **)a2, v6, a3);
}

void HuffmanDecoder<unsigned short,unsigned int>::decodeValues(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10 = *(_DWORD *)(a2 + 8);
  int v11 = *(unsigned int **)a2;
  unsigned int v12 = **(_DWORD **)a2;
  uint64_t v13 = *(unsigned int *)(a3 + 8);
  if (v13)
  {
    uint64_t v14 = 0;
    int v15 = 0;
    int v16 = 0;
    unsigned int v17 = 0;
    unsigned int v18 = 1;
    do
    {
      unsigned int v12 = (v17 >> -(char)v15) | (v12 << v15);
      if (v15 >= v16)
      {
        if (v18 >= v10) {
          goto LABEL_17;
        }
        unsigned int v17 = v11[v18++];
        if (v15 == v16)
        {
          int v16 = 32;
        }
        else
        {
          v12 |= v17 >> (v16 - v15);
          v17 <<= v15 - v16;
          int v16 = 32 - (v15 - v16);
        }
      }
      else
      {
        v16 -= v15;
        v17 <<= v15;
      }
      if (v12 >= *(_DWORD *)(a1 + 64))
      {
        uint64_t v22 = *(unsigned int *)(*(void *)(a1 + 72) + 4 * (v12 >> 21));
        unsigned int v21 = *(_DWORD *)(*(void *)a1 + 4 * v22);
      }
      else
      {
        unsigned int v19 = *(_DWORD *)(a1 + 68);
        do
        {
          unsigned int v20 = v19;
          unsigned int v21 = *(_DWORD *)(*(void *)a1 + 4 * v19--);
        }
        while (v12 < v21);
        uint64_t v22 = v20;
      }
      int v15 = *(unsigned __int8 *)(*(void *)(a1 + 16) + v22);
      *(_WORD *)(*(void *)a3 + 2 * v14++) = *(_WORD *)(*(void *)(a1 + 48)
                                                       + 2
                                                       * (((v12 - v21) >> -(char)v15)
                                                        + *(_DWORD *)(*(void *)(a1 + 32) + 4 * v22)));
    }
    while (v14 != v13);
  }
  else
  {
    LODWORD(v14) = 0;
    int v16 = 0;
    int v15 = 0;
    unsigned int v18 = 1;
LABEL_17:
    if (v14 < v13)
    {
      unsigned int v23 = v10 + 2;
      unint64_t v24 = v14;
      do
      {
        if (v15 >= v16)
        {
          if (v18 >= v23) {
            throwDecodeEndOfData(a1, a2, a3, a4, a5, a6, a7, a8);
          }
          ++v18;
          v16 += 32;
        }
        if (v12 >= *(_DWORD *)(a1 + 64))
        {
          uint64_t v28 = *(unsigned int *)(*(void *)(a1 + 72) + 4 * (v12 >> 21));
          unsigned int v27 = *(_DWORD *)(*(void *)a1 + 4 * v28);
        }
        else
        {
          unsigned int v25 = *(_DWORD *)(a1 + 68);
          do
          {
            unsigned int v26 = v25;
            unsigned int v27 = *(_DWORD *)(*(void *)a1 + 4 * v25--);
          }
          while (v12 < v27);
          uint64_t v28 = v26;
        }
        v16 -= v15;
        int v15 = *(unsigned __int8 *)(*(void *)(a1 + 16) + v28);
        *(_WORD *)(*(void *)a3 + 2 * v24++) = *(_WORD *)(*(void *)(a1 + 48)
                                                         + 2
                                                         * (((v12 - v27) >> -(char)v15)
                                                          + *(_DWORD *)(*(void *)(a1 + 32) + 4 * v28)));
        v12 <<= v15;
      }
      while (v24 < *(unsigned int *)(a3 + 8));
    }
  }
}

uint64_t QuadgramData::quad2SetUnallocated(uint64_t this, unsigned int a2)
{
  if (*(_DWORD *)this)
  {
    uint64_t v2 = a2 >> 5;
    *(_DWORD *)(*(void *)(this + 112) + 4 * v2) &= ~(1 << a2);
    *(_DWORD *)(*(void *)(this + 128) + 4 * v2) &= ~(1 << a2);
    if (*(_DWORD *)(this + 168)) {
      *(_DWORD *)(*(void *)(this + 144) + 4 * v2) &= ~(1 << a2);
    }
  }
  *(_DWORD *)(*(void *)(this + 248) + 4 * a2) = -1;
  *(_WORD *)(*(void *)(this + 96) + 2 * a2) = 0;
  return this;
}

uint64_t WordLanguageModel::beginLMSyncRecog(WordLanguageModel *this, int a2, LMContextData *a3)
{
  (*(void (**)(WordLanguageModel *, LMContextData *))(*(void *)this + 480))(this, a3);
  uint64_t result = *((void *)this + 5);
  if (result) {
    BOOL v6 = a2 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    unsigned int v7 = *(uint64_t (**)(void))(*(void *)result + 64);
    return v7();
  }
  return result;
}

uint64_t WordLanguageModel::beginRescoringInLMSyncRecog(WordLanguageModel *this, LMContextData *a2)
{
  (*(void (**)(WordLanguageModel *, LMContextData *))(*(void *)this + 480))(this, a2);
  uint64_t result = *((void *)this + 5);
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 64);
    return v4();
  }
  return result;
}

uint64_t WordLanguageModel::endLMSyncRecog(WordLanguageModel *this, int a2, LMContextData *a3)
{
  (*(void (**)(WordLanguageModel *, LMContextData *))(*(void *)this + 480))(this, a3);
  uint64_t result = *((void *)this + 5);
  if (result) {
    BOOL v6 = a2 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    unsigned int v7 = *(uint64_t (**)(void))(*(void *)result + 64);
    return v7();
  }
  return result;
}

void *WordLanguageModel::clearLoadedData(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = a2;
  uint64_t result = *(void **)(a1 + 232);
  if (result) {
    uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 432))(result, a2);
  }
  if (v2 <= 1 && *(_DWORD *)(a1 + 64) >= 2u && *(_DWORD *)(a1 + 360))
  {
    if (*(_DWORD *)(a1 + 656))
    {
      unint64_t v5 = 0;
      uint64_t v6 = *(void *)(a1 + 648);
      uint64_t v7 = *(void *)(a1 + 536);
      uint64_t v8 = *(void *)(a1 + 664);
      uint64_t v9 = *(void *)(a1 + 416);
      do
      {
        unint64_t v10 = *(unsigned int *)(v6 + 4 * v5);
        *(_DWORD *)(v7 + 4 * v10) = *(_DWORD *)(v8 + 4 * *(unsigned int *)(v7 + 4 * v10));
        *(_DWORD *)(v9 + ((v10 >> 3) & 0x1FFFFFFC)) &= ~(1 << v10);
        ++v5;
      }
      while (v5 < *(unsigned int *)(a1 + 656));
    }
    uint64_t result = BigramData::freeLoadedData((BigramData *)(a1 + 360));
  }
  if (v2)
  {
    if (v2 == 3)
    {
LABEL_20:
      if (*(_DWORD *)(a1 + 64) >= 4u && *(_DWORD *)(a1 + 1232))
      {
        if (*(_DWORD *)(a1 + 1632))
        {
          unint64_t v17 = 0;
          uint64_t v18 = *(void *)(a1 + 1624);
          uint64_t v19 = *(void *)(a1 + 1480);
          uint64_t v20 = *(void *)(a1 + 1640);
          uint64_t v21 = *(void *)(a1 + 1360);
          do
          {
            unint64_t v22 = *(unsigned int *)(v18 + 4 * v17);
            *(_DWORD *)(v19 + 4 * v22) = *(_DWORD *)(v20 + 4 * *(unsigned int *)(v19 + 4 * v22));
            *(_DWORD *)(v21 + ((v22 >> 3) & 0x1FFFFFFC)) &= ~(1 << v22);
            ++v17;
          }
          while (v17 < *(unsigned int *)(a1 + 1632));
        }
        return QuadgramData::freeLoadedData((QuadgramData *)(a1 + 1232));
      }
      return result;
    }
    if (v2 != 2) {
      return result;
    }
  }
  if (*(_DWORD *)(a1 + 64) >= 3u && *(_DWORD *)(a1 + 744))
  {
    if (*(_DWORD *)(a1 + 1144))
    {
      unint64_t v11 = 0;
      uint64_t v12 = *(void *)(a1 + 1136);
      uint64_t v13 = *(void *)(a1 + 1024);
      uint64_t v14 = *(void *)(a1 + 1152);
      uint64_t v15 = *(void *)(a1 + 904);
      do
      {
        unint64_t v16 = *(unsigned int *)(v12 + 4 * v11);
        *(_DWORD *)(v13 + 4 * vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = *(_DWORD *)(v14 + 4 * *(unsigned int *)(v13 + 4 * v16));
        *(_DWORD *)(v15 + ((v16 >> 3) & 0x1FFFFFFC)) &= ~(1 << v16);
        ++v11;
      }
      while (v11 < *(unsigned int *)(a1 + 1144));
    }
    uint64_t result = TrigramData::freeLoadedData((TrigramData *)(a1 + 744));
  }
  if (!v2) {
    goto LABEL_20;
  }
  return result;
}

void *BigramData::freeLoadedData(BigramData *this)
{
  unsigned int v2 = (void *)*((void *)this + 36);
  if (v2)
  {
    MemChunkFree(v2, 0);
    *((void *)this + 36) = 0;
  }
  *((void *)this + 37) = 0;
  int v3 = (void *)*((void *)this + 38);
  if (v3)
  {
    MemChunkFree(v3, 0);
    *((void *)this + 3DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  }
  *((void *)this + 39) = 0;
  uint64_t v4 = (void *)*((void *)this + 40);
  if (v4)
  {
    MemChunkFree(v4, 0);
    *((void *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = 0;
  }
  *((void *)this + 41) = 0;
  unint64_t v5 = (void *)*((void *)this + 42);
  if (v5)
  {
    MemChunkFree(v5, 0);
    *((void *)this + 42) = 0;
  }
  *((void *)this + 43) = 0;
  uint64_t v6 = (void *)*((void *)this + 44);
  if (v6)
  {
    MemChunkFree(v6, 0);
    *((void *)this + 44) = 0;
  }
  *((void *)this + 45) = 0;
  uint64_t result = (void *)*((void *)this + 46);
  if (result)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *((void *)this + 46) = 0;
  }
  *((void *)this + 47) = 0;
  return result;
}

void *TrigramData::freeLoadedData(TrigramData *this)
{
  unsigned int v2 = (void *)*((void *)this + 49);
  if (v2)
  {
    MemChunkFree(v2, 0);
    *((void *)this + 49) = 0;
  }
  *((void *)this + 50) = 0;
  int v3 = (void *)*((void *)this + 51);
  if (v3)
  {
    MemChunkFree(v3, 0);
    *((void *)this + 51) = 0;
  }
  *((void *)this + 52) = 0;
  uint64_t v4 = (void *)*((void *)this + 53);
  if (v4)
  {
    MemChunkFree(v4, 0);
    *((void *)this + 53) = 0;
  }
  *((void *)this + 54) = 0;
  unint64_t v5 = (void *)*((void *)this + 55);
  if (v5)
  {
    MemChunkFree(v5, 0);
    *((void *)this + 55) = 0;
  }
  *((void *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = 0;
  uint64_t v6 = (void *)*((void *)this + 57);
  if (v6)
  {
    MemChunkFree(v6, 0);
    *((void *)this + 57) = 0;
  }
  *((void *)this + 5DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  uint64_t result = (void *)*((void *)this + 59);
  if (result)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *((void *)this + 59) = 0;
  }
  *((void *)this + 60) = 0;
  return result;
}

void *QuadgramData::freeLoadedData(QuadgramData *this)
{
  unsigned int v2 = (void *)*((void *)this + 49);
  if (v2)
  {
    MemChunkFree(v2, 0);
    *((void *)this + 49) = 0;
  }
  *((void *)this + 50) = 0;
  int v3 = (void *)*((void *)this + 51);
  if (v3)
  {
    MemChunkFree(v3, 0);
    *((void *)this + 51) = 0;
  }
  *((void *)this + 52) = 0;
  uint64_t v4 = (void *)*((void *)this + 53);
  if (v4)
  {
    MemChunkFree(v4, 0);
    *((void *)this + 53) = 0;
  }
  *((void *)this + 54) = 0;
  unint64_t v5 = (void *)*((void *)this + 55);
  if (v5)
  {
    MemChunkFree(v5, 0);
    *((void *)this + 55) = 0;
  }
  *((void *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = 0;
  uint64_t v6 = (void *)*((void *)this + 57);
  if (v6)
  {
    MemChunkFree(v6, 0);
    *((void *)this + 57) = 0;
  }
  *((void *)this + 5DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  uint64_t v7 = (void *)*((void *)this + 59);
  if (v7)
  {
    MemChunkFree(v7, 0);
    *((void *)this + 59) = 0;
  }
  *((void *)this + 60) = 0;
  uint64_t v8 = (void *)*((void *)this + 61);
  if (v8)
  {
    MemChunkFree(v8, 0);
    *((void *)this + 61) = 0;
  }
  *((void *)this + 62) = 0;
  uint64_t v9 = (void *)*((void *)this + 63);
  if (v9)
  {
    MemChunkFree(v9, 0);
    *((void *)this + 63) = 0;
  }
  *((void *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = 0;
  unint64_t v10 = (void *)*((void *)this + 65);
  if (v10)
  {
    MemChunkFree(v10, 0);
    *((void *)this + 65) = 0;
  }
  *((void *)this + 66) = 0;
  unint64_t v11 = (void *)*((void *)this + 67);
  if (v11)
  {
    MemChunkFree(v11, 0);
    *((void *)this + 67) = 0;
  }
  *((void *)this + 6DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  uint64_t result = (void *)*((void *)this + 69);
  if (result)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *((void *)this + 69) = 0;
  }
  *((void *)this + 70) = 0;
  return result;
}

void WordLanguageModel::initForBuild(WordLanguageModel *this, const WordNgramBuildSpec *x1_0, const WordNgramTemplate *x2_0, double a2, double a3)
{
  *((void *)this + 226) = x1_0;
  *((void *)this + 227) = x2_0;
  *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = *((_DWORD *)x1_0 + 2);
  *((unsigned char *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = *((unsigned char *)x1_0 + 12);
  WordLanguageModel::initializeScoreToProb(this, a2, a3);
}

void WordLanguageModel::startBuildingNgramLM(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  *(void *)(a1 + 184) = a2;
  *(void *)(a1 + HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 192) = a3;
  *(void *)(a1 + 200) = a4;
  *(void *)(a1 + 1800) = a5;
  if (!*(_DWORD *)(a5 + 8))
  {
    unsigned int v10 = *(_DWORD *)(*(void *)(a1 + 16) + 388);
    unsigned int v11 = *(_DWORD *)(a2 + 12);
    unsigned int v12 = v10;
    if (v10 > v11)
    {
      DgnPrimArray<unsigned long long>::reallocElts(a2, v10 - v11, 0);
      unsigned int v12 = *(_DWORD *)(*(void *)(a1 + 16) + 388);
    }
    *(_DWORD *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v10;
    if (v12) {
      bzero(*(void **)a2, 8 * v12);
    }
    *a3 = 0;
    *a4 = 0;
    uint64_t v13 = *(unsigned int *)(a1 + 64);
    unsigned int v14 = *(_DWORD *)(a5 + 12);
    if (v13 > v14) {
      DgnPrimArray<unsigned long long>::reallocElts(a5, v13 - v14, 0);
    }
    uint64_t v15 = *(unsigned int *)(a5 + 8);
    if (v15 <= v13)
    {
      if (v15 < v13)
      {
        do
          *(void *)(*(void *)a5 + 8 * v15++) = 0;
        while (v13 != v15);
      }
    }
    else
    {
      DgnIOwnArray<HashKEV<unsigned int,unsigned int,StateIdScope> *>::destructAt((void (***)(void))a5, v13, v15 - v13);
    }
    *(_DWORD *)(a5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v13;
    **(void **)a5 = 0;
    if (*(_DWORD *)(a1 + 64) >= 2u)
    {
      unint64_t v16 = 1;
      do
      {
        unint64_t v17 = MemChunkAlloc(0x70uLL, 0);
        *(void *)(*(void *)a5 + 8 * v16++) = Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::Hash((uint64_t)v17, 0, *(_DWORD *)(*(void *)(a1 + 16) + 388));
      }
      while (v16 < *(unsigned int *)(a1 + 64));
    }
  }
}

uint64_t WordLanguageModel::addBuildNgramLM(uint64_t result, uint64_t a2, void *a3, void *a4)
{
  if (*(_DWORD *)(a2 + 8))
  {
    uint64_t v7 = result;
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      uint64_t result = WordLanguageModel::addBuildOneTranscriptNgramLM(v7, *(void *)a2 + v8, *a3 + v8, *(_DWORD *)(*a4 + 4 * v9++));
      v8 += 16;
    }
    while (v9 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

uint64_t WordLanguageModel::addBuildOneTranscriptNgramLM(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v50 = a4;
  uint64_t v42 = *(unsigned int *)(a2 + 8);
  uint64_t v39 = *(double **)(a1 + 192);
  uint64_t v40 = *(void **)(a1 + 184);
  uint64_t v43 = *(double **)(a1 + 200);
  uint64_t v6 = *(void **)(a1 + 1800);
  unsigned int v48 = 0;
  uint64_t v49 = 0;
  uint64_t v7 = *(unsigned int *)(a1 + 64);
  if (v7 >= 2)
  {
    unsigned int v46 = 0;
    unint64_t v9 = realloc_array(0, &v46, 4 * v7, 0, 0, 1);
    unsigned int v10 = v46;
    unsigned int v48 = (char *)v46;
    LODWORD(v49) = v7;
    HIDWORD(v49) = v9 >> 2;
    LODWORD(v7) = *(_DWORD *)(a1 + 64);
    if (v7 >= 2)
    {
      int v11 = -1;
      unint64_t v12 = 1;
      do
      {
        unint64_t v13 = *(unsigned int *)(a3 + 8);
        if (v12 <= v13)
        {
          HeadCloneForBuildunsigned int WordId = WordNgramTemplate::getHeadCloneForBuildWordId(*(WordNgramTemplate **)(a1 + 1816), *(unsigned int *)(*(void *)a3 + 4 * (v11 + v13)));
          unsigned int v10 = v48;
        }
        else
        {
          HeadCloneForBuildunsigned int WordId = 16777212;
        }
        v10[v12++] = HeadCloneForBuildWordId;
        --v11;
      }
      while (v12 < *(unsigned int *)(a1 + 64));
      LODWORD(v7) = *(_DWORD *)(a1 + 64);
    }
  }
  uint64_t v38 = (void *)a2;
  unsigned int v46 = 0;
  uint64_t v47 = 0;
  if (v7)
  {
    uint64_t v15 = 0;
    int v16 = 0;
    unint64_t v17 = 0;
    size_t v18 = 4;
    do
    {
      if (v18 != 4) {
        memset_pattern16(v45, &unk_2140A6A00, v18 - 4);
      }
      *(_DWORD *)&v44[v18] = 0xFFFFFF;
      if (v16 == HIDWORD(v47))
      {
        DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v46, 1, 1);
        int v16 = v47;
        uint64_t v15 = (char *)v46;
      }
      ++v17;
      uint64_t v19 = &v15[16 * v16];
      *(_DWORD *)uint64_t v19 = v17;
      memcpy(v19 + 4, v45, v18);
      int v16 = v47 + 1;
      LODWORD(v47) = v47 + 1;
      v18 += 4;
    }
    while (v17 < *(unsigned int *)(a1 + 64));
  }
  uint64_t v20 = v42;
  if (v42)
  {
    uint64_t v21 = 0;
    unsigned int v41 = *(_DWORD *)(*(void *)(a1 + 1816) + 4);
    do
    {
      unsigned int v22 = *(_DWORD *)(*v38 + 4 * v21);
      unsigned int v23 = WordNgramTemplate::getHeadCloneForBuildWordId(*(WordNgramTemplate **)(a1 + 1816), v22);
      unsigned int v25 = v23;
      unsigned int v26 = v43;
      if (v23 != 16777213)
      {
        if (v23 == 0xFFFFFF) {
          unsigned int v26 = v39;
        }
        else {
          unsigned int v26 = (double *)(*v40 + 8 * v23);
        }
      }
      LODWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = v50;
      *unsigned int v26 = *v26 + (double)v24;
      if (*(_DWORD *)(a1 + 64) >= 2u)
      {
        uint64_t v27 = 6;
        unint64_t v28 = 1;
        do
        {
          uint64_t v29 = 0;
          uint64_t v30 = (unsigned int *)v46;
          *((_DWORD *)v46 + 4 * v28 + 1) = v25;
          uint64_t v31 = v48 + 4;
          do
          {
            v30[v27 + v29] = *(_DWORD *)&v31[4 * v29];
            ++v29;
          }
          while (v28 != v29);
          uint64_t Bucket = Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::findBucket(*(void *)(*v6 + 8 * v28), &v30[4 * v28]);
          if (*(void *)Bucket) {
            *(_DWORD *)(*(void *)Bucket + 28) += v50;
          }
          else {
            Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::add(*(void *)(*v6 + 8 * v28), (_DWORD *)v46 + 4 * v28, &v50);
          }
          ++v28;
          unint64_t v33 = *(unsigned int *)(a1 + 64);
          v27 += 4;
        }
        while (v28 < v33);
        uint64_t v34 = (v33 - 1);
        uint64_t v35 = v48;
        if (v22 == 16777213)
        {
          unsigned int v25 = v41;
          if (v34 >= 2)
          {
            memset_pattern16(&v48[4 * (v34 - (v33 - 3))], &unk_2140A6A00, 4 * (v33 - 3) + 4);
            unsigned int v25 = v41;
          }
        }
        else if (v34 >= 2)
        {
          int v36 = v33 - 2;
          do
            *(_DWORD *)&v35[4 * v34--] = *(_DWORD *)&v35[4 * v36--];
          while ((v34 & 0xFFFFFFFE) != 0);
        }
        *((_DWORD *)v35 + 1) = v25;
        uint64_t v20 = v42;
      }
      ++v21;
    }
    while (v21 != v20);
  }
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v46);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v48);
}

void sub_213FBBBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::add(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  uint64_t v5 = result;
  unsigned int v6 = *(_DWORD *)(result + 12);
  if (*(_DWORD *)(result + 8) >= v6 >> 1) {
    uint64_t result = HashKEV<unsigned int,unsigned int,CWIDScope>::upSize(result, 2 * v6);
  }
  uint64_t v7 = *a2;
  if (v7)
  {
    int v8 = 0;
    uint64_t v9 = v7 - 1;
    do
    {
      HIDWORD(v10) = v8;
      LODWORD(v10) = v8;
      int v8 = a2[v9 + 1] + (v10 >> 19);
    }
    while ((unint64_t)v9--);
  }
  else
  {
    int v8 = 0;
  }
  int v12 = *(_DWORD *)(v5 + 16);
  if (v12) {
    unsigned int v13 = (-1640531527 * v8) >> -(char)v12;
  }
  else {
    unsigned int v13 = 0;
  }
  uint64_t v14 = *(void *)(v5 + 80);
  uint64_t v15 = *(void *)(v5 + 32);
  if (!v15)
  {
    uint64_t result = DgnPool::addChunk((DgnPool *)(v5 + 24));
    uint64_t v15 = *(void *)(v5 + 32);
    LODWORD(v7) = *a2;
  }
  *(void *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = *(void *)v15;
  *(_DWORD *)(v15 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *(_DWORD *)(v15 + 12) = v7;
  if (v7)
  {
    uint64_t v7 = v7;
    int v16 = (_DWORD *)(v15 + 16);
    unint64_t v17 = a2 + 1;
    do
    {
      int v18 = *v17++;
      *v16++ = v18;
      --v7;
    }
    while (v7);
  }
  uint64_t v19 = (void *)(v14 + 8 * v13);
  *(_DWORD *)(v15 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *a3;
  *(_DWORD *)(v15 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v8;
  ++*(_DWORD *)(v5 + 8);
  if (*(unsigned char *)(v5 + 20))
  {
    *(void *)uint64_t v15 = *v19;
  }
  else
  {
    *(void *)uint64_t v15 = 0;
    uint64_t v20 = (void *)*v19;
    if (*v19)
    {
      do
      {
        uint64_t v19 = v20;
        uint64_t v20 = (void *)*v20;
      }
      while (v20);
    }
  }
  *uint64_t v19 = v15;
  return result;
}

BOOL WordLanguageModel::endBuildingNgramLM(WordLanguageModel *this)
{
  WordLanguageModel::assignBuildLmIds(this);
  v8[0] = 0;
  v8[1] = 0;
  double v7 = 0.0;
  BOOL v2 = WordLanguageModel::buildUnigramData((uint64_t)this, (uint64_t)v8, &v7);
  if (v2)
  {
    v6[0] = 0;
    v6[1] = 0;
    v5[0] = 0;
    v5[1] = 0;
    if (*((_DWORD *)this + 16) >= 2u)
    {
      double v3 = v7;
      WordLanguageModel::buildNgramProbs((uint64_t)this, 2u, v8, (uint64_t)v6, (uint64_t)v5, v7);
      WordLanguageModel::buildBigramDataFromProbsAndWeights((uint64_t)this, *(void *)v6[0], *(void *)v5[0]);
      if (*((_DWORD *)this + 16) >= 3u)
      {
        WordLanguageModel::buildNgramProbs((uint64_t)this, 3u, v8, (uint64_t)v6, (uint64_t)v5, v3);
        WordLanguageModel::buildTrigramDataFromProbsAndWeights((uint64_t)this, *(void *)(v6[0] + 8), *(void *)(v5[0] + 8));
      }
    }
    DgnIOwnArray<HashKEV<unsigned int,unsigned int,StateIdScope> *>::releaseAll((uint64_t)v5);
    DgnIOwnArray<HashKEV<unsigned int,unsigned int,StateIdScope> *>::releaseAll((uint64_t)v6);
  }
  *((void *)this + 23) = 0;
  *((void *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = 0;
  *((void *)this + 25) = 0;
  *((void *)this + 225) = 0;
  *((void *)this + 227) = 0;
  *((void *)this + 226) = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v8);
  return v2;
}

void sub_213FBBE40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  DgnIOwnArray<HashKEV<unsigned int,unsigned int,StateIdScope> *>::releaseAll((uint64_t)va);
  DgnIOwnArray<HashKEV<unsigned int,unsigned int,StateIdScope> *>::releaseAll((uint64_t)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t WordLanguageModel::assignBuildLmIds(WordLanguageModel *this)
{
  uint64_t v2 = *((void *)this + 227);
  unsigned int v3 = *(_DWORD *)(v2 + 4);
  unsigned int v4 = *(_DWORD *)(v2 + 8);
  uint64_t v5 = (void *)*((void *)this + 23);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  WordLanguageModel::createBuildWordIdAndCountArray(this, (uint64_t)v5, v3, v4, (uint64_t)&v15);
  int v6 = v16;
  *((_DWORD *)this + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v16 + 1;
  *((_DWORD *)this + 26) = v6 + 2;
  uint64_t v7 = *(unsigned int *)(*((void *)this + 227) + 12);
  if (v7 == 16777212)
  {
    int v8 = 0;
    *((_DWORD *)this + 25) = -1;
    uint64_t v9 = (int *)((char *)this + 100);
  }
  else
  {
    *((_DWORD *)this + 25) = -1;
    uint64_t v9 = (int *)((char *)this + 100);
    if (*(unsigned char *)(*((void *)this + 226) + 13))
    {
      if (*(double *)(*v5 + 8 * v7) == 0.0)
      {
        *((_DWORD *)this + 25) = v6 + 2;
        *((_DWORD *)this + 26) = v6 + 3;
      }
      int v8 = 1;
    }
    else
    {
      int v8 = 0;
    }
  }
  WordLanguageModel::maybeAddBuildBegAndEndLmId((uint64_t)this);
  unsigned int v10 = *((_DWORD *)this + 26);
  if (v10 >= 0xFFFF) {
    unsigned int v10 = 0xFFFF;
  }
  *((_DWORD *)this + 27) = v10;
  WordLanguageModel::createBuildWordIdToLmIdArray((uint64_t)this, (uint64_t)&v15);
  if (v8 && *v9 == -1)
  {
    uint64_t v11 = *(unsigned int *)(*((void *)this + 227) + 12);
    if (*((_DWORD *)this + 32))
    {
      int v12 = *(_DWORD *)(*((void *)this + 15) + 4 * v11);
    }
    else
    {
      if (*((_DWORD *)this + 36))
      {
        int v12 = *(unsigned __int16 *)(*((void *)this + 17) + 2 * v11);
        BOOL v13 = v12 == 0xFFFF;
      }
      else
      {
        int v12 = *(unsigned __int8 *)(*((void *)this + 19) + v11);
        BOOL v13 = v12 == 255;
      }
      if (v13) {
        int v12 = -1;
      }
    }
    *uint64_t v9 = v12;
  }
  return DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v15);
}

void sub_213FBBFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL WordLanguageModel::buildUnigramData(uint64_t a1, uint64_t a2, double *a3)
{
  uint64_t v8 = *(void *)(a1 + 184);
  uint64_t v7 = *(double **)(a1 + 192);
  uint64_t v9 = *(double **)(a1 + 200);
  if (*(_DWORD *)(v8 + 8))
  {
    unint64_t v10 = 0;
    int v11 = 0;
    int v12 = 0;
    double v13 = 0.0;
    do
    {
      if (WordNgramTemplate::isHeadCloneWordId(*(WordNgramTemplate **)(a1 + 1816), v10))
      {
        double v14 = *(double *)(*(void *)v8 + 8 * v10);
        if (v14 <= 0.0)
        {
          ++v11;
        }
        else
        {
          double v13 = v13 + v14;
          ++v12;
        }
      }
      ++v10;
    }
    while (v10 < *(unsigned int *)(v8 + 8));
  }
  else
  {
    int v12 = 0;
    int v11 = 0;
    double v13 = 0.0;
  }
  if (*(_DWORD *)(*(void *)(a1 + 1816) + 8) == 16777213)
  {
    if (*v9 <= 0.0)
    {
      ++v11;
    }
    else
    {
      double v13 = v13 + *v9;
      ++v12;
    }
  }
  double v15 = v13 + *v7;
  double v16 = **(double **)(a1 + 1808);
  long double v19 = DgnExp(-20.0);
  double v20 = (double)(v12 + v11 + 1);
  double v21 = v15 * v19 / (1.0 - v20 * v19);
  if (v16 >= v21) {
    double v22 = v16;
  }
  else {
    double v22 = v21;
  }
  double v23 = v15 + v20 * v22;
  uint64_t v24 = (unint64_t)(v23 + 0.5);
  if (v24)
  {
    double v25 = v23 - (double)v24;
    if (v25 > 1.0 || v25 < -1.0)
    {
      double v50 = v15 + v20 * v22;
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 14124, (uint64_t)"lm/wordlm", 28, (uint64_t)"%f", v17, v18, SLOBYTE(v50));
    }
    uint64_t v27 = *(unsigned int *)(a1 + 104);
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    unint64_t v28 = realloc_array(0, &v53, 8 * v27, 0, 0, 1);
    uint64_t v29 = (char *)v53;
    unint64_t v51 = (double *)v53;
    unsigned int v30 = *(_DWORD *)(a1 + 104);
    LODWORD(v52) = v27;
    HIDWORD(v52) = v28 >> 3;
    *(void *)uint64_t v53 = 0;
    if (v30 >= 2) {
      bzero(v29 + 8, 8 * (v30 - 2) + 8);
    }
    if (*(_DWORD *)(v8 + 8))
    {
      unint64_t v31 = 0;
      do
      {
        int LmId = WordLanguageModel::getLmId((WordLanguageModel *)a1, v31);
        if (LmId != -1) {
          v51[LmId] = *(double *)(*(void *)v8 + 8 * v31) + v51[LmId];
        }
        ++v31;
      }
      while (v31 < *(unsigned int *)(v8 + 8));
    }
    if (*(_DWORD *)(*(void *)(a1 + 1816) + 8) == 16777213) {
      v51[*(unsigned int *)(a1 + 116)] = *v9;
    }
    uint64_t v33 = *(unsigned int *)(a1 + 104);
    if (v33 >= 2)
    {
      uint64_t v34 = v51 + 1;
      uint64_t v35 = v33 - 1;
      do
      {
        *uint64_t v34 = v22 + *v34;
        ++v34;
        --v35;
      }
      while (v35);
    }
    double v36 = *v7;
    unsigned int v37 = *(_DWORD *)(a1 + 180);
    if (v33 > v37) {
      DgnPrimArray<short>::reallocElts(a1 + 168, v33 - v37, 0);
    }
    *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 176) = v33;
    **(_WORD **)(a1 + 16DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 20000;
    double v38 = DgnLog(v22 / v23);
    LODWORD(v3) = *(_DWORD *)(a1 + 32);
    unsigned int v39 = *(_DWORD *)(a1 + 104);
    unsigned int v40 = *(_DWORD *)(a2 + 12);
    unsigned int v41 = v39;
    if (v39 > v40)
    {
      DgnPrimArray<unsigned long long>::reallocElts(a2, v39 - v40, 0);
      unsigned int v41 = *(_DWORD *)(a1 + 104);
    }
    *(_DWORD *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v39;
    uint64_t v42 = *(void **)a2;
    **(void **)a2 = 0;
    if (v41 >= 2)
    {
      int v43 = (int)(0.5 - v38 * (double)v3);
      for (unint64_t i = 1; i < v41; *(double *)&v42[i++] = v46)
      {
        double v45 = v51[i];
        if (v45 == v22)
        {
          *(_WORD *)(*(void *)(a1 + 168) + 2 * i) = v43;
          double v46 = v22 / v23;
        }
        else
        {
          double v46 = v45 / v23;
          long double v47 = DgnLog(v45 / v23);
          LODWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = *(_DWORD *)(a1 + 32);
          *(_WORD *)(*(void *)(a1 + 168) + 2 * i) = (int)(0.5 - v47 * (double)v48);
          uint64_t v42 = *(void **)a2;
          unsigned int v41 = *(_DWORD *)(a1 + 104);
        }
      }
    }
    *a3 = (v22 + v36) / v23;
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v51);
  }
  return v24 != 0;
}

void sub_213FBC378(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t WordLanguageModel::buildNgramProbs(uint64_t a1, unsigned int a2, void *a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v102 = a2 - 1;
  uint64_t v11 = *(void *)(**(void **)(a1 + 1800) + 8 * v102);
  uint64_t v116 = 0;
  uint64_t v117 = 0;
  int v12 = WordLanguageModel::computeCountHistogram((WordLanguageModel *)a1, a2, v11, (uint64_t)&v116);
  uint64_t v17 = *(void *)(a1 + 1808);
  uint64_t v18 = 24;
  if (a2 == 2) {
    uint64_t v18 = 16;
  }
  int v19 = *(_DWORD *)(v17 + v18);
  if (v19) {
    double v20 = WordLanguageModel::computeLOODiscount((uint64_t)v12, *(_DWORD *)(v17 + v18), (uint64_t)&v116, v13, v14, v15, v16);
  }
  else {
    double v20 = 0.0;
  }
  unsigned int v101 = a2 - 2;
  if (a2 == 2)
  {
    int v21 = *(_DWORD *)(v17 + 20);
    v115[0] = 2;
LABEL_9:
    memset(&v115[1], 255, 4 * a2);
    char v22 = 0;
    goto LABEL_10;
  }
  int v21 = *(_DWORD *)(v17 + 28);
  v115[0] = a2;
  if (a2) {
    goto LABEL_9;
  }
  char v22 = 1;
LABEL_10:
  v114[0] = 0;
  v114[1] = 0;
  DgnPrimArray<int>::copyArraySlice((unint64_t)v114, &v116, 0, v117);
  double v23 = WordLanguageModel::computeMinCountNotToPrune((WordLanguageModel *)a1, (uint64_t)v114, a2, v11, v21, v115);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v114);
  unsigned int v111 = a2;
  if ((v22 & 1) == 0) {
    memset(&v112, 255, 4 * a2);
  }
  int v24 = v102;
  unsigned int v109 = v102;
  if (v102) {
    memset(v110, 255, 4 * v102);
  }
  double v25 = MemChunkAlloc(0x70uLL, 0);
  Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,double>::Hash((uint64_t)v25, 0, 2 * *(_DWORD *)(v11 + 8) + 2);
  Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,double>::Hash((uint64_t)v108, 0, 2 * *(_DWORD *)(v11 + 8) + 2);
  Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,unsigned int>::Hash((uint64_t)v107, 0, 2 * *(_DWORD *)(v11 + 8) + 2);
  Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,unsigned int>::Hash((uint64_t)v106, 0, 2 * *(_DWORD *)(v11 + 8) + 2);
  uint64_t v26 = *(unsigned int *)(v11 + 12);
  if (v26)
  {
    uint64_t v27 = *(void **)(v11 + 80);
    unint64_t v28 = (uint64_t *)*v27;
    if (*v27)
    {
      LODWORD(v29) = 0;
    }
    else
    {
      uint64_t v29 = 0;
      unsigned int v30 = v27 + 1;
      do
      {
        if (v26 - 1 == v29) {
          goto LABEL_74;
        }
        unint64_t v28 = (uint64_t *)v30[v29++];
      }
      while (!v28);
    }
  }
  else
  {
    LODWORD(v29) = 0;
    unint64_t v28 = 0;
  }
  if (v29 < v26)
  {
    unsigned int v99 = a2 - 3;
    uint64_t v100 = v25;
    do
    {
      int v105 = *((_DWORD *)v28 + 7);
      if (v28) {
        uint64_t v31 = (uint64_t)v28 + 12;
      }
      else {
        uint64_t v31 = 0;
      }
      WordLanguageModel::setBuildLmIdNgramFromBuildWordIdNgram((WordLanguageModel *)a1, v31, &v111);
      if (v109) {
        memcpy(v110, v113, 4 * v109);
      }
      unsigned int v33 = *(_DWORD *)(a1 + 108);
      if (v33 > v112)
      {
        if (v111 == 2)
        {
          if (v113[0] >= 0xFFFFF1u) {
            goto LABEL_60;
          }
        }
        else if (v33 <= v113[0] || v113[1] >= 0xFFFFF1u)
        {
          goto LABEL_60;
        }
        LODWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v105;
        double v34 = (double)v32;
        if (v23 > v34)
        {
          if (v23 + -1.0 != v34) {
            goto LABEL_60;
          }
          unsigned int v35 = v111 - 1;
          while ((v35 & 0x80000000) == 0)
          {
            unsigned int v36 = *(&v111 + v35 + 1);
            unsigned int v37 = v115[v35-- + 1];
            if (v36 != v37)
            {
              if (v36 >= v37) {
                goto LABEL_60;
              }
              break;
            }
          }
        }
        double v120 = v34;
        Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,double>::add((uint64_t)v25, &v111, &v120);
        if (!v24
          || (double v104 = 0.0, LODWORD(v120) = v24, memcpy((char *)&v120 + 4, &v112, 4 * v102), (v101 & 0x80000000) != 0))
        {
          double v47 = 1.0;
        }
        else
        {
          double v38 = (void *)a5;
          double v39 = 1.0;
          if (v101)
          {
            size_t v40 = 4 * v101;
            unsigned int v41 = v99;
            while (1)
            {
              uint64_t v42 = *(void *)Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::findBucket(*(void *)(*(void *)a4 + 8 * v41), (unsigned int *)&v120);
              if (v42) {
                break;
              }
              unsigned int v43 = v41;
              uint64_t v44 = *(void *)(*v38 + 8 * v41);
              unsigned int v118 = v43 + 1;
              memcpy(&v119, &v121, v40);
              uint64_t Bucket = Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::findBucket(v44, &v118);
              if (*(void *)Bucket) {
                double v39 = v39 * *(double *)(*(void *)Bucket + 32);
              }
              LODWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 120) = v43 + 1;
              unsigned int v41 = v43 - 1;
              v40 -= 4;
              if (!v40) {
                goto LABEL_48;
              }
            }
            double v47 = v39 * *(double *)(v42 + 32);
            a5 = (uint64_t)v38;
            double v25 = v100;
            int v24 = v102;
          }
          else
          {
LABEL_48:
            double v46 = a6;
            if (HIDWORD(v120) != -1) {
              double v46 = *(double *)(*a3 + 8 * HIDWORD(v120));
            }
            double v47 = v39 * v46;
            a5 = (uint64_t)v38;
            double v25 = v100;
            int v24 = v102;
          }
        }
        double v104 = v47;
        uint64_t v48 = *(void *)Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::findBucket((uint64_t)v108, &v109);
        if (v48) {
          *(double *)(v48 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v104 + *(double *)(v48 + 32);
        }
        else {
          Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,double>::add((uint64_t)v108, &v109, &v104);
        }
        if ((v19 & 0x80000000) == 0 && v105 > v19)
        {
          uint64_t v49 = *(void *)Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::findBucket((uint64_t)v106, &v109);
          if (v49) {
            *(_DWORD *)(v49 + 28) += v105;
          }
          else {
            Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::add((uint64_t)v106, &v109, &v105);
          }
        }
      }
LABEL_60:
      uint64_t v50 = *(void *)Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::findBucket((uint64_t)v107, &v109);
      if (v50) {
        *(_DWORD *)(v50 + 28) += v105;
      }
      else {
        Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::add((uint64_t)v107, &v109, &v105);
      }
      unint64_t v51 = (uint64_t *)*v28;
      uint64_t v52 = *(unsigned int *)(v11 + 12);
      if (!*v28)
      {
        uint64_t v29 = (v29 + 1);
        if (v29 >= v52)
        {
          unint64_t v51 = v28;
        }
        else
        {
          uint64_t v53 = *(void *)(v11 + 80);
          unint64_t v51 = *(uint64_t **)(v53 + 8 * v29);
          if (!v51)
          {
            uint64_t v54 = (uint64_t *)(v53 + 8 * v29 + 8);
            uint64_t v55 = ~v29 + v52;
            while (v55)
            {
              int v56 = (uint64_t *)*v54++;
              unint64_t v51 = v56;
              LODWORD(v29) = v29 + 1;
              --v55;
              if (v56) {
                goto LABEL_71;
              }
            }
            break;
          }
        }
      }
LABEL_71:
      unint64_t v28 = v51;
    }
    while (v29 < v52);
  }
LABEL_74:
  uint64_t v57 = MemChunkAlloc(0x70uLL, 0);
  Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,double>::Hash((uint64_t)v57, 0, 2 * *((_DWORD *)v25 + 2) + 2);
  uint64_t v58 = *((unsigned int *)v25 + 3);
  if (!v58)
  {
    uint64_t v60 = 0;
    goto LABEL_81;
  }
  unsigned int v59 = (void **)v25[10];
  uint64_t v60 = *v59;
  if (*v59)
  {
LABEL_81:
    LODWORD(v61) = 0;
    goto LABEL_82;
  }
  uint64_t v61 = 0;
  int v62 = v59 + 1;
  do
  {
    if (v58 - 1 == v61) {
      goto LABEL_113;
    }
    uint64_t v60 = v62[v61++];
  }
  while (!v60);
LABEL_82:
  if (v61 >= v58) {
    goto LABEL_113;
  }
  while (1)
  {
    if (v60) {
      unsigned int v63 = (double *)(v60 + 4);
    }
    else {
      unsigned int v63 = 0;
    }
    if (v60) {
      unsigned int v64 = (char *)v60 + 12;
    }
    else {
      unsigned int v64 = 0;
    }
    uint64_t v65 = v109;
    if (v109)
    {
      uint64_t v66 = (int *)(v64 + 8);
      unsigned int v67 = v110;
      do
      {
        int v68 = *v66++;
        *v67++ = v68;
        --v65;
      }
      while (v65);
    }
    char v69 = (void *)Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::findBucket((uint64_t)v107, &v109);
    if (*v69) {
      uint64_t v70 = (_DWORD *)(*v69 + 28);
    }
    else {
      uint64_t v70 = 0;
    }
    double v71 = *v63;
    if (v19 < 0 || v19 >= (int)v71) {
      double *v63 = v71 - v20;
    }
    LODWORD(v23) = *v70;
    uint64_t v72 = Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::findBucket((uint64_t)v106, &v109);
    double v73 = (double)*(unint64_t *)&v23;
    if (*(void *)v72 && *(_DWORD *)(*(void *)v72 + 28) == *v70) {
      double v73 = v73 + 1.0;
    }
    double v120 = *v63 / v73;
    double *v63 = v120;
    uint64_t v74 = *(void *)Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::findBucket((uint64_t)v57, &v109);
    if (v74) {
      *(double *)(v74 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v120 + *(double *)(v74 + 32);
    }
    else {
      Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,double>::add((uint64_t)v57, &v109, &v120);
    }
    uint64_t v75 = (void *)*v60;
    uint64_t v76 = *((unsigned int *)v25 + 3);
    if (*v60) {
      goto LABEL_112;
    }
    uint64_t v61 = (v61 + 1);
    if (v61 >= v76)
    {
      uint64_t v75 = v60;
      goto LABEL_112;
    }
    uint64_t v77 = v25[10];
    uint64_t v75 = *(void **)(v77 + 8 * v61);
    if (!v75) {
      break;
    }
LABEL_112:
    uint64_t v60 = v75;
    if (v61 >= v76) {
      goto LABEL_113;
    }
  }
  int v78 = (void *)(v77 + 8 * v61 + 8);
  uint64_t v79 = ~v61 + v76;
  while (v79)
  {
    unsigned int v80 = (void *)*v78++;
    uint64_t v75 = v80;
    LODWORD(v61) = v61 + 1;
    --v79;
    if (v80) {
      goto LABEL_112;
    }
  }
LABEL_113:
  Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,unsigned int>::~Hash((uint64_t)v106);
  Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,unsigned int>::~Hash((uint64_t)v107);
  unint64_t v81 = MemChunkAlloc(0x70uLL, 0);
  Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,double>::Hash((uint64_t)v81, 0, 2 * *((_DWORD *)v57 + 2) + 2);
  uint64_t v82 = *((unsigned int *)v57 + 3);
  if (v82)
  {
    uint64_t v83 = (void *)v57[10];
    int v84 = (uint64_t *)*v83;
    if (!*v83)
    {
      uint64_t v85 = 0;
      uint64_t v86 = v83 + 1;
      do
      {
        if (v82 - 1 == v85) {
          goto LABEL_137;
        }
        int v84 = (uint64_t *)v86[v85++];
      }
      while (!v84);
      goto LABEL_121;
    }
  }
  else
  {
    int v84 = 0;
  }
  LODWORD(v85) = 0;
LABEL_121:
  if (v85 >= v82) {
    goto LABEL_137;
  }
  while (2)
  {
    if (v84) {
      uint64_t v87 = (unsigned int *)v84 + 3;
    }
    else {
      uint64_t v87 = 0;
    }
    uint64_t v88 = *(void *)Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::findBucket((uint64_t)v108, v87);
    if (v88) {
      double v89 = *(double *)(v88 + 32);
    }
    else {
      double v89 = 0.0;
    }
    v107[0] = (1.0 - *((double *)v84 + 4)) / (1.0 - v89);
    Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,double>::add((uint64_t)v81, v87, v107);
    uint64_t v90 = (uint64_t *)*v84;
    uint64_t v91 = *((unsigned int *)v57 + 3);
    if (*v84)
    {
LABEL_136:
      int v84 = v90;
      if (v85 >= v91) {
        goto LABEL_137;
      }
      continue;
    }
    break;
  }
  uint64_t v85 = (v85 + 1);
  if (v85 >= v91)
  {
    uint64_t v90 = v84;
    goto LABEL_136;
  }
  uint64_t v92 = v57[10];
  uint64_t v90 = *(uint64_t **)(v92 + 8 * v85);
  if (v90) {
    goto LABEL_136;
  }
  unint64_t v93 = (uint64_t *)(v92 + 8 * v85 + 8);
  uint64_t v94 = ~v85 + v91;
  while (v94)
  {
    int v95 = (uint64_t *)*v93++;
    uint64_t v90 = v95;
    LODWORD(v85) = v85 + 1;
    --v94;
    if (v95) {
      goto LABEL_136;
    }
  }
LABEL_137:
  (*(void (**)(uint64_t *))*v57)(v57);
  MemChunkFree(v57, 0);
  Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,double>::~Hash((uint64_t)v108);
  unsigned int v96 = *(_DWORD *)(a4 + 8);
  if (v96 == *(_DWORD *)(a4 + 12))
  {
    DgnPrimArray<unsigned long long>::reallocElts(a4, 1, 1);
    unsigned int v96 = *(_DWORD *)(a4 + 8);
  }
  *(void *)(*(void *)a4 + 8 * vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = v25;
  *(_DWORD *)(a4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v96 + 1;
  unsigned int v97 = *(_DWORD *)(a5 + 8);
  if (v97 == *(_DWORD *)(a5 + 12))
  {
    DgnPrimArray<unsigned long long>::reallocElts(a5, 1, 1);
    unsigned int v97 = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v97) = v81;
  *(_DWORD *)(a5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v97 + 1;
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v116);
}

void sub_213FBCCC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,unsigned int>::~Hash((uint64_t)&a26);
  Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,unsigned int>::~Hash((uint64_t)&a40);
  Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,double>::~Hash((uint64_t)&a54);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v54 - 184);
  _Unwind_Resume(a1);
}

uint64_t WordLanguageModel::buildBigramDataFromProbsAndWeights(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(_DWORD *)(a1 + 56);
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  uint64_t v7 = (_WORD **)(a1 + 344);
  unsigned int v8 = *(_DWORD *)(a1 + 104);
  unsigned int v9 = *(_DWORD *)(a1 + 356);
  unsigned int v10 = v8;
  if (v8 > v9)
  {
    DgnPrimArray<short>::reallocElts(a1 + 344, v8 - v9, 0);
    unsigned int v10 = *(_DWORD *)(a1 + 104);
  }
  unsigned __int16 v11 = v6 - 1;
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 352) = v8;
  int v12 = *(_WORD **)(a1 + 344);
  *int v12 = 20000;
  unint64_t v52 = 0xFFFFFFFF00000001;
  if (v10 >= 2)
  {
    unint64_t v13 = 1;
    do
    {
      if (*(_WORD *)(*(void *)(a1 + 168) + 2 * v13) == 20000)
      {
        v12[v13] = 20000;
      }
      else
      {
        HIDWORD(v52) = v13;
        uint64_t v14 = *(void *)Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::findBucket(a3, (unsigned int *)&v52);
        if (v14)
        {
          long double v15 = DgnLog(*(long double *)(v14 + 32));
          LODWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = *(_DWORD *)(a1 + 32);
          double v17 = -(v15 * (double)v16);
          int v12 = *(_WORD **)(a1 + 344);
          if (v17 <= 0.0)
          {
            int v18 = (int)(v17 + -0.5);
            if ((__int16)(1 - v6) > v18) {
              LOWORD(v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 1 - v6;
            }
          }
          else
          {
            int v18 = (int)(v17 + 0.5);
            if ((__int16)v11 < v18) {
              LOWORD(v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v6 - 1;
            }
          }
          v12[v13] = v18;
        }
        else
        {
          int v12 = *v7;
          (*v7)[v13] = 0;
        }
      }
      ++v13;
    }
    while (v13 < *(unsigned int *)(a1 + 104));
  }
  if (!*(_DWORD *)(a2 + 8)) {
    goto LABEL_63;
  }
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  uint64_t v19 = *(unsigned int *)(a2 + 12);
  if (v19)
  {
    double v20 = *(void ***)(a2 + 80);
    int v21 = *v20;
    if (!*v20)
    {
      uint64_t v22 = 0;
      double v23 = v20 + 1;
      while (v19 - 1 != v22)
      {
        int v21 = v23[v22++];
        if (v21) {
          goto LABEL_26;
        }
      }
      goto LABEL_47;
    }
  }
  else
  {
    int v21 = 0;
  }
  LODWORD(v22) = 0;
LABEL_26:
  if (v22 >= v19)
  {
LABEL_47:
    unint64_t v25 = 0;
    int v24 = 0;
    goto LABEL_48;
  }
  int v24 = 0;
  LODWORD(v25) = 0;
  while (1)
  {
    if (v21) {
      uint64_t v26 = (unsigned int *)v21 + 3;
    }
    else {
      uint64_t v26 = 0;
    }
    if (v25 == HIDWORD(v51))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v50, 1, 1);
      LODWORD(v25) = v51;
      int v24 = (char *)v50;
    }
    uint64_t v27 = *v26;
    *(_DWORD *)&v24[16 * v25] = v27;
    if (v27)
    {
      unint64_t v28 = &v24[16 * v25 + 4];
      uint64_t v29 = (int *)(v26 + 1);
      do
      {
        int v30 = *v29++;
        *(_DWORD *)unint64_t v28 = v30;
        v28 += 4;
        --v27;
      }
      while (v27);
      LODWORD(v25) = v51;
    }
    unint64_t v25 = (v25 + 1);
    LODWORD(v51) = v25;
    uint64_t v31 = (void *)*v21;
    uint64_t v32 = *(unsigned int *)(a2 + 12);
    if (*v21) {
      goto LABEL_45;
    }
    uint64_t v22 = (v22 + 1);
    if (v22 >= v32)
    {
      uint64_t v31 = v21;
      goto LABEL_45;
    }
    uint64_t v33 = *(void *)(a2 + 80);
    uint64_t v31 = *(void **)(v33 + 8 * v22);
    if (!v31) {
      break;
    }
LABEL_45:
    int v21 = v31;
    if (v22 >= v32) {
      goto LABEL_48;
    }
  }
  double v34 = (void *)(v33 + 8 * v22 + 8);
  uint64_t v35 = ~v22 + v32;
  while (v35)
  {
    unsigned int v36 = (void *)*v34++;
    uint64_t v31 = v36;
    LODWORD(v22) = v22 + 1;
    --v35;
    if (v36) {
      goto LABEL_45;
    }
  }
LABEL_48:
  mrec_qsort_r<BuildWordIdNgramCmp>(v24, v25, 16);
  unsigned int v37 = 0;
  v49[0] = 0;
  v49[1] = 0;
  unsigned int v38 = *(_DWORD *)(v50 + 8);
  unsigned int v39 = v51;
  do
  {
    if (v37 == v39 || (uint64_t v40 = v50, v38 != *(_DWORD *)(v50 + 16 * v37 + 8)))
    {
      BigramData::fillBigramRecord((BigramData *)(a1 + 360), v38, (uint64_t)&v55, &v53, v49);
      unsigned int v39 = v51;
      if (v37 == v51) {
        break;
      }
      LODWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = 0;
      LODWORD(v54) = 0;
      unsigned int v38 = *(_DWORD *)(v50 + 16 * v37-- + 8);
    }
    else
    {
      int v41 = *(_DWORD *)(v50 + 16 * v37 + 4);
      unsigned int v42 = v56;
      if (v56 == HIDWORD(v56))
      {
        DgnPrimArray<short>::reallocElts((uint64_t)&v55, 1, 1);
        unsigned int v42 = v56;
        uint64_t v40 = v50;
      }
      *(_WORD *)(v55 + 2 * v42) = v41;
      LODWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = v42 + 1;
      uint64_t Bucket = Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::findBucket(a2, (unsigned int *)(v40 + 16 * v37));
      double v44 = DgnLog(*(long double *)(*(void *)Bucket + 32));
      LODWORD(v45) = *(_DWORD *)(a1 + 32);
      if (v11 >= (int)(0.5 - v44 * (double)v45)) {
        unsigned __int16 v46 = (int)(0.5 - v44 * (double)v45);
      }
      else {
        unsigned __int16 v46 = v11;
      }
      int v47 = v54;
      if (v54 == HIDWORD(v54))
      {
        DgnPrimArray<short>::reallocElts((uint64_t)&v53, 1, 1);
        int v47 = v54;
      }
      v53[v47] = v46;
      LODWORD(v54) = v47 + 1;
      unsigned int v39 = v51;
    }
    ++v37;
  }
  while (v37 <= v39);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v49);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v50);
LABEL_63:
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v53);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v55);
}

void sub_213FBD140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t WordLanguageModel::buildTrigramDataFromProbsAndWeights(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(a1 + 56);
  unsigned __int16 v75 = v5 - 1;
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  uint64_t v83 = 0;
  uint64_t v84 = 0;
  uint64_t v81 = 0;
  uint64_t v82 = 0;
  uint64_t v79 = 0;
  uint64_t v80 = 0;
  if (*(_DWORD *)(a3 + 8))
  {
    uint64_t v77 = 0;
    uint64_t v78 = 0;
    uint64_t v7 = *(unsigned int *)(a3 + 12);
    if (v7)
    {
      uint64_t v8 = *(void ***)(a3 + 80);
      unsigned int v9 = *v8;
      if (!*v8)
      {
        uint64_t v10 = 0;
        unsigned __int16 v11 = v8 + 1;
        while (v7 - 1 != v10)
        {
          unsigned int v9 = v11[v10++];
          if (v9) {
            goto LABEL_9;
          }
        }
LABEL_30:
        unsigned int v13 = 0;
        int v12 = 0;
        goto LABEL_31;
      }
      LODWORD(v10) = 0;
    }
    else
    {
      LODWORD(v10) = 0;
      unsigned int v9 = 0;
    }
LABEL_9:
    if (v10 < v7)
    {
      int v12 = 0;
      unsigned int v13 = 0;
      while (1)
      {
        if (v9) {
          uint64_t v14 = (unsigned int *)v9 + 3;
        }
        else {
          uint64_t v14 = 0;
        }
        if (v13 == HIDWORD(v78))
        {
          DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v77, 1, 1);
          unsigned int v13 = v78;
          int v12 = (char *)v77;
        }
        uint64_t v15 = *v14;
        *(_DWORD *)&v12[16 * v13] = v15;
        if (v15)
        {
          unint64_t v16 = &v12[16 * v13 + 4];
          double v17 = (int *)(v14 + 1);
          do
          {
            int v18 = *v17++;
            *(_DWORD *)unint64_t v16 = v18;
            v16 += 4;
            --v15;
          }
          while (v15);
          unsigned int v13 = v78;
        }
        LODWORD(v7DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = ++v13;
        uint64_t v19 = (void *)*v9;
        uint64_t v20 = *(unsigned int *)(a3 + 12);
        if (!*v9)
        {
          uint64_t v10 = (v10 + 1);
          if (v10 >= v20)
          {
            uint64_t v19 = v9;
          }
          else
          {
            uint64_t v21 = *(void *)(a3 + 80);
            uint64_t v19 = *(void **)(v21 + 8 * v10);
            if (!v19)
            {
              uint64_t v22 = (void *)(v21 + 8 * v10 + 8);
              uint64_t v23 = ~v10 + v20;
              while (v23)
              {
                int v24 = (void *)*v22++;
                uint64_t v19 = v24;
                LODWORD(v10) = v10 + 1;
                --v23;
                if (v24) {
                  goto LABEL_28;
                }
              }
LABEL_31:
              mrec_qsort_r<BuildWordIdNgramCmp>(v12, v13, 16);
              unsigned int v25 = 0;
              unsigned int v26 = *(_DWORD *)(v77 + 8);
              int v27 = v78;
              while (2)
              {
                if (v25 == v27)
                {
                  LOWORD(v2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v86;
                  goto LABEL_43;
                }
                uint64_t v29 = v77;
                unsigned int v28 = v86;
                if (v26 == *(_DWORD *)(v77 + 16 * v25 + 8))
                {
                  int v30 = *(_DWORD *)(v77 + 16 * v25 + 4);
                  if (v86 == HIDWORD(v86))
                  {
                    DgnPrimArray<short>::reallocElts((uint64_t)&v85, 1, 1);
                    unsigned int v28 = v86;
                    uint64_t v29 = v77;
                  }
                  *(_WORD *)(v85 + 2 * v2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v30;
                  LODWORD(v86) = v28 + 1;
                  uint64_t Bucket = Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::findBucket(a3, (unsigned int *)(v29 + 16 * v25));
                  long double v32 = DgnLog(*(long double *)(*(void *)Bucket + 32));
                  LODWORD(v33) = *(_DWORD *)(a1 + 32);
                  double v34 = -(v32 * (double)v33);
                  unsigned int v35 = v84;
                  if (v34 <= 0.0)
                  {
                    if ((__int16)(1 - v5) <= (int)(v34 + -0.5)) {
                      __int16 v36 = (int)(v34 + -0.5);
                    }
                    else {
                      __int16 v36 = 1 - v5;
                    }
                    if (v84 == HIDWORD(v84))
                    {
LABEL_55:
                      DgnPrimArray<short>::reallocElts((uint64_t)&v83, 1, 1);
                      unsigned int v35 = v84;
                    }
                  }
                  else
                  {
                    if ((__int16)v75 >= (int)(v34 + 0.5)) {
                      __int16 v36 = (int)(v34 + 0.5);
                    }
                    else {
                      __int16 v36 = v5 - 1;
                    }
                    if (v84 == HIDWORD(v84)) {
                      goto LABEL_55;
                    }
                  }
                  *(_WORD *)(v83 + 2 * v35) = v36;
                  LODWORD(v84) = v35 + 1;
                }
                else
                {
LABEL_43:
                  TrigramData::allocTri1((TrigramData *)(a1 + 744), v26, (unsigned __int16)v28);
                  if (v86)
                  {
                    unint64_t v37 = 0;
                    uint64_t v38 = *(void *)(a1 + 824);
                    do
                    {
                      unsigned int v39 = v37 + *(_DWORD *)(*(void *)(a1 + 808) + 4 * v26);
                      uint64_t v40 = v39;
                      *(_WORD *)(v38 + 2 * v39) = 0;
                      if (*(_DWORD *)(a1 + 748)) {
                        *(unsigned char *)(*(void *)(a1 + 856) + v39) = 0;
                      }
                      else {
                        *(_WORD *)(*(void *)(a1 + 840) + 2 * v39) = 20000;
                      }
                      TrigramData::tri2SetUnallocated(a1 + 744, v39);
                      uint64_t v38 = *(void *)(a1 + 824);
                      *(_WORD *)(v38 + 2 * vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = *(_WORD *)(v85 + 2 * v37);
                      *(_WORD *)(*(void *)(a1 + 840) + 2 * vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = *(_WORD *)(v83 + 2 * v37++);
                    }
                    while (v37 < v86);
                  }
                  if (v25 == v78)
                  {
LABEL_58:
                    DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v77);
                    goto LABEL_59;
                  }
                  LODWORD(v86) = 0;
                  LODWORD(v84) = 0;
                  unsigned int v26 = *(_DWORD *)(v77 + 16 * v25-- + 8);
                }
                ++v25;
                int v27 = v78;
                if (v25 > v78) {
                  goto LABEL_58;
                }
                continue;
              }
            }
          }
        }
LABEL_28:
        unsigned int v9 = v19;
        if (v10 >= v20) {
          goto LABEL_31;
        }
      }
    }
    goto LABEL_30;
  }
LABEL_59:
  if (!*(_DWORD *)(a2 + 8)) {
    goto LABEL_109;
  }
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  uint64_t v41 = *(unsigned int *)(a2 + 12);
  if (v41)
  {
    unsigned int v42 = *(void ***)(a2 + 80);
    unsigned int v43 = *v42;
    if (!*v42)
    {
      uint64_t v44 = 0;
      unint64_t v45 = v42 + 1;
      while (v41 - 1 != v44)
      {
        unsigned int v43 = v45[v44++];
        if (v43) {
          goto LABEL_68;
        }
      }
      goto LABEL_89;
    }
  }
  else
  {
    unsigned int v43 = 0;
  }
  LODWORD(v44) = 0;
LABEL_68:
  if (v44 >= v41)
  {
LABEL_89:
    unint64_t v47 = 0;
    unsigned __int16 v46 = 0;
    goto LABEL_90;
  }
  unsigned __int16 v46 = 0;
  LODWORD(v47) = 0;
  while (1)
  {
    if (v43) {
      uint64_t v48 = (unsigned int *)v43 + 3;
    }
    else {
      uint64_t v48 = 0;
    }
    if (v47 == HIDWORD(v78))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v77, 1, 1);
      LODWORD(v47) = v78;
      unsigned __int16 v46 = (char *)v77;
    }
    uint64_t v49 = *v48;
    *(_DWORD *)&v46[16 * v47] = v49;
    if (v49)
    {
      uint64_t v50 = &v46[16 * v47 + 4];
      uint64_t v51 = (int *)(v48 + 1);
      do
      {
        int v52 = *v51++;
        *(_DWORD *)uint64_t v50 = v52;
        v50 += 4;
        --v49;
      }
      while (v49);
      LODWORD(v47) = v78;
    }
    unint64_t v47 = (v47 + 1);
    LODWORD(v7DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v47;
    uint64_t v53 = (void *)*v43;
    uint64_t v54 = *(unsigned int *)(a2 + 12);
    if (*v43) {
      goto LABEL_87;
    }
    uint64_t v44 = (v44 + 1);
    if (v44 >= v54)
    {
      uint64_t v53 = v43;
      goto LABEL_87;
    }
    uint64_t v55 = *(void *)(a2 + 80);
    uint64_t v53 = *(void **)(v55 + 8 * v44);
    if (!v53) {
      break;
    }
LABEL_87:
    unsigned int v43 = v53;
    if (v44 >= v54) {
      goto LABEL_90;
    }
  }
  uint64_t v56 = (void *)(v55 + 8 * v44 + 8);
  uint64_t v57 = ~v44 + v54;
  while (v57)
  {
    uint64_t v58 = (void *)*v56++;
    uint64_t v53 = v58;
    LODWORD(v44) = v44 + 1;
    --v57;
    if (v58) {
      goto LABEL_87;
    }
  }
LABEL_90:
  mrec_qsort_r<BuildWordIdNgramCmp>(v46, v47, 16);
  unsigned int v59 = 0;
  int v60 = 0;
  v76[0] = 0;
  v76[1] = 0;
  int v62 = *(_DWORD *)(v77 + 8);
  uint64_t v61 = *(unsigned int *)(v77 + 12);
  unsigned int v63 = v78;
  do
  {
    if (v59 != v63
      && (uint64_t v64 = v77, v61 == *(_DWORD *)(v77 + 16 * v59 + 12))
      && (uint64_t v65 = v77 + 16 * v59, v62 == *(_DWORD *)(v65 + 8)))
    {
      int v66 = *(_DWORD *)(v65 + 4);
      unsigned int v67 = v82;
      if (v82 == HIDWORD(v82))
      {
        DgnPrimArray<short>::reallocElts((uint64_t)&v81, 1, 1);
        unsigned int v67 = v82;
        uint64_t v64 = v77;
      }
      *(_WORD *)(v81 + 2 * v67) = v66;
      LODWORD(v82) = v67 + 1;
      uint64_t v68 = Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::findBucket(a2, (unsigned int *)(v64 + 16 * v59));
      double v69 = DgnLog(*(long double *)(*(void *)v68 + 32));
      LODWORD(v70) = *(_DWORD *)(a1 + 32);
      if (v75 >= (int)(0.5 - v69 * (double)v70)) {
        unsigned __int16 v71 = (int)(0.5 - v69 * (double)v70);
      }
      else {
        unsigned __int16 v71 = v75;
      }
      int v72 = v80;
      if (v80 == HIDWORD(v80))
      {
        DgnPrimArray<short>::reallocElts((uint64_t)&v79, 1, 1);
        int v72 = v80;
      }
      v79[v72] = v71;
      LODWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = v72 + 1;
      unsigned int v63 = v78;
    }
    else
    {
      TrigramData::fillTrigramRecord(a1 + 744, *(_DWORD *)(*(void *)(a1 + 808) + 4 * v61) + v60, (uint64_t)&v81, &v79, v76);
      unsigned int v63 = v78;
      if (v59 == v78) {
        break;
      }
      uint64_t v73 = v77 + 16 * v59;
      if (v61 == *(_DWORD *)(v73 + 12)) {
        ++v60;
      }
      else {
        int v60 = 0;
      }
      LODWORD(v82) = 0;
      LODWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = 0;
      int v62 = *(_DWORD *)(v73 + 8);
      uint64_t v61 = *(unsigned int *)(v73 + 12);
      --v59;
    }
    ++v59;
  }
  while (v59 <= v63);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v76);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v77);
LABEL_109:
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v79);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v81);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v83);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v85);
}

void sub_213FBD814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va5, a3);
  va_start(va4, a3);
  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v10 = va_arg(va3, void);
  uint64_t v12 = va_arg(va3, void);
  va_copy(va4, va3);
  uint64_t v13 = va_arg(va4, void);
  uint64_t v15 = va_arg(va4, void);
  va_copy(va5, va4);
  uint64_t v16 = va_arg(va5, void);
  uint64_t v18 = va_arg(va5, void);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va4);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va5);
  _Unwind_Resume(a1);
}

uint64_t WordLanguageModel::addWordDuringBuild(WordNgramTemplate **this, unsigned int a2)
{
  uint64_t result = WordNgramTemplate::isHeadCloneWordId(this[227], a2);
  if (result)
  {
    uint64_t v5 = (uint64_t)this[23];
    for (unsigned int i = *(_DWORD *)(v5 + 8); i <= a2; *(_DWORD *)(v5 + 8) = i)
    {
      if (i == *(_DWORD *)(v5 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned long long>::reallocElts(v5, 1, 1);
        unsigned int i = *(_DWORD *)(v5 + 8);
      }
      *(void *)(*(void *)v5 + 8 * i++) = 0;
    }
  }
  return result;
}

double WordLanguageModel::computeLOOLogLikelihoodDerivative(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t *a6, int a7)
{
  if (*((_DWORD *)a6 + 2) - 1 > a7) {
    unsigned int v7 = a7 + 1;
  }
  else {
    unsigned int v7 = *((_DWORD *)a6 + 2) - 1;
  }
  if (a7 < 0) {
    unsigned int v7 = *((_DWORD *)a6 + 2) - 1;
  }
  uint64_t v8 = *a6;
  double v9 = 0.0;
  if (v7 >= 2)
  {
    if (v7 + 1 > 3) {
      uint64_t v10 = v7 + 1;
    }
    else {
      uint64_t v10 = 3;
    }
    uint64_t v11 = 2;
    a3 = -1.0;
    do
    {
      LODWORD(a4) = *(_DWORD *)(v8 + 4 * v11);
      a4 = (double)v11 * (double)*(unint64_t *)&a4 / ((double)v11 + -1.0 - a1);
      double v9 = v9 + a4;
      ++v11;
    }
    while (v10 != v11);
  }
  LODWORD(a3) = *(_DWORD *)(v8 + 4);
  return (double)*(unint64_t *)&a3 / a1 - v9;
}

WordLanguageModel *WordLanguageModel::computeCountHistogram(WordLanguageModel *this, unsigned int a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7 = this;
  if (!*(_DWORD *)(a4 + 12)) {
    this = (WordLanguageModel *)DgnPrimArray<unsigned int>::reallocElts(a4, 1, 0);
  }
  *(_DWORD *)(a4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 1;
  **(_DWORD **)a4 = 0;
  unsigned int v26 = a2;
  if (a2) {
    this = (WordLanguageModel *)memset(&v27, 255, 4 * a2);
  }
  uint64_t v8 = *(unsigned int *)(a3 + 12);
  if (!v8)
  {
    uint64_t v10 = 0;
    goto LABEL_12;
  }
  double v9 = *(void **)(a3 + 80);
  uint64_t v10 = (uint64_t *)*v9;
  if (*v9)
  {
LABEL_12:
    LODWORD(v11) = 0;
    goto LABEL_13;
  }
  uint64_t v11 = 0;
  uint64_t v12 = v9 + 1;
  do
  {
    if (v8 - 1 == v11) {
      return this;
    }
    uint64_t v10 = (uint64_t *)v12[v11++];
  }
  while (!v10);
LABEL_13:
  if (v11 >= v8) {
    return this;
  }
  while (1)
  {
    uint64_t v13 = *((unsigned int *)v10 + 7);
    if (v10) {
      uint64_t v14 = (uint64_t)v10 + 12;
    }
    else {
      uint64_t v14 = 0;
    }
    this = WordLanguageModel::setBuildLmIdNgramFromBuildWordIdNgram(v7, v14, &v26);
    unsigned int v15 = *((_DWORD *)v7 + 27);
    if (v15 > v27)
    {
      if (v26 == 2)
      {
        if (v28 < 0xFFFFF1) {
          goto LABEL_25;
        }
      }
      else if (v15 > v28 && v29 < 0xFFFFF1)
      {
LABEL_25:
        unsigned int v17 = *(_DWORD *)(a4 + 8);
        unsigned int v18 = v17;
        if (v13 >= v17)
        {
          do
          {
            if (v17 == *(_DWORD *)(a4 + 12))
            {
              this = (WordLanguageModel *)DgnPrimArray<unsigned int>::reallocElts(a4, 1, 1);
              unsigned int v17 = *(_DWORD *)(a4 + 8);
            }
            uint64_t v19 = *(_DWORD **)a4;
            *(_DWORD *)(*(void *)a4 + 4 * v17) = 0;
            unsigned int v17 = *(_DWORD *)(a4 + 8) + 1;
            *(_DWORD *)(a4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v17;
            ++v18;
          }
          while (v18 <= v13);
        }
        else
        {
          uint64_t v19 = *(_DWORD **)a4;
        }
        ++v19[v13];
      }
    }
    uint64_t v20 = (uint64_t *)*v10;
    uint64_t v21 = *(unsigned int *)(a3 + 12);
    if (!*v10)
    {
      uint64_t v11 = (v11 + 1);
      if (v11 >= v21)
      {
        uint64_t v20 = v10;
        goto LABEL_39;
      }
      uint64_t v22 = *(void *)(a3 + 80);
      uint64_t v20 = *(uint64_t **)(v22 + 8 * v11);
      if (!v20) {
        break;
      }
    }
LABEL_39:
    uint64_t v10 = v20;
    if (v11 >= v21) {
      return this;
    }
  }
  uint64_t v23 = (uint64_t *)(v22 + 8 * v11 + 8);
  uint64_t v24 = ~v11 + v21;
  while (v24)
  {
    unsigned int v25 = (uint64_t *)*v23++;
    uint64_t v20 = v25;
    LODWORD(v11) = v11 + 1;
    --v24;
    if (v25) {
      goto LABEL_39;
    }
  }
  return this;
}

WordLanguageModel *WordLanguageModel::setBuildLmIdNgramFromBuildWordIdNgram(WordLanguageModel *this, uint64_t a2, _DWORD *a3)
{
  if (*a3)
  {
    uint64_t v5 = this;
    unint64_t v6 = 1;
    do
    {
      this = (WordLanguageModel *)WordLanguageModel::getLmId(v5, *(_DWORD *)(a2 + 4 * v6));
      a3[v6] = this;
    }
    while (v6++ < *a3);
  }
  return this;
}

double WordLanguageModel::computeLOODiscount(uint64_t a1, int a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  double v7 = 0.5;
  if (*(_DWORD *)(a3 + 8) >= 3u && *(_DWORD *)(*(void *)a3 + 4))
  {
    double v10 = WordLanguageModel::computeLOOLogLikelihoodDerivative(0.000001, a5, a6, a7, a1, (uint64_t *)a3, a2);
    double v16 = WordLanguageModel::computeLOOLogLikelihoodDerivative(0.999999, v12, v13, v14, v11, (uint64_t *)a3, a2);
    if (v10 >= 0.0 || v16 <= 0.0)
    {
      if (v10 <= 0.0 || v16 >= 0.0) {
        return v7;
      }
      double v20 = 0.499999;
    }
    else
    {
      double v20 = -0.499999;
    }
    double v7 = 0.499999;
    if (fabs(v20) > 0.000001)
    {
      do
      {
        double v21 = v20 * 0.5;
        double v22 = WordLanguageModel::computeLOOLogLikelihoodDerivative(v7, v17, v18, v19, v15, (uint64_t *)a3, a2);
        double v17 = -(v20 * 0.5);
        if (v22 <= 0.0) {
          double v23 = -(v20 * 0.5);
        }
        else {
          double v23 = v20 * 0.5;
        }
        double v7 = v7 + v23;
        double v20 = v20 * 0.5;
      }
      while (fabs(v21) > 0.000001);
    }
  }
  return v7;
}

double WordLanguageModel::computeMinCountNotToPrune(WordLanguageModel *this, uint64_t a2, unsigned int a3, uint64_t a4, int a5, _DWORD *a6)
{
  double v6 = 1.0;
  if (a5 < 0) {
    return v6;
  }
  int v11 = 0;
  unsigned int v12 = *(_DWORD *)(a2 + 8);
  do
  {
    if (!--v12) {
      return v6;
    }
    int v13 = v11;
    v11 += *(_DWORD *)(*(void *)a2 + 4 * v12);
  }
  while (v11 <= a5);
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  unsigned int v37 = a3;
  if (a3) {
    memset(&v38, 255, 4 * a3);
  }
  uint64_t v14 = *(unsigned int *)(a4 + 12);
  if (v14)
  {
    uint64_t v15 = *(void **)(a4 + 80);
    double v16 = (uint64_t *)*v15;
    if (!*v15)
    {
      uint64_t v17 = 0;
      double v18 = v15 + 1;
      while (v14 - 1 != v17)
      {
        double v16 = (uint64_t *)v18[v17++];
        if (v16) {
          goto LABEL_15;
        }
      }
      goto LABEL_38;
    }
  }
  else
  {
    double v16 = 0;
  }
  LODWORD(v17) = 0;
LABEL_15:
  if (v17 >= v14)
  {
LABEL_38:
    unint64_t v30 = 0;
    unsigned int v29 = 0;
    goto LABEL_39;
  }
  while (1)
  {
    if (*((_DWORD *)v16 + 7) == v12)
    {
      WordLanguageModel::setBuildLmIdNgramFromBuildWordIdNgram(this, (uint64_t)v16 + 12, &v37);
      unsigned int v19 = *((_DWORD *)this + 27);
      if (v19 > v38)
      {
        uint64_t v20 = v37;
        if (v37 == 2)
        {
          if (v39 < 0xFFFFF1) {
            goto LABEL_23;
          }
        }
        else if (v19 > v39 && v40 < 0xFFFFF1)
        {
LABEL_23:
          int v21 = v42;
          if (v42 == HIDWORD(v42))
          {
            DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v41, 1, 1);
            int v21 = v42;
          }
          double v22 = v41;
          *(_DWORD *)&v41[16 * v21] = v20;
          if (v20)
          {
            memcpy(&v22[16 * v21 + 4], &v38, 4 * v20);
            int v21 = v42;
          }
          LODWORD(v42) = v21 + 1;
        }
      }
    }
    double v23 = (uint64_t *)*v16;
    uint64_t v24 = *(unsigned int *)(a4 + 12);
    if (!*v16)
    {
      uint64_t v17 = (v17 + 1);
      if (v17 >= v24)
      {
        double v23 = v16;
        goto LABEL_36;
      }
      uint64_t v25 = *(void *)(a4 + 80);
      double v23 = *(uint64_t **)(v25 + 8 * v17);
      if (!v23) {
        break;
      }
    }
LABEL_36:
    double v16 = v23;
    if (v17 >= v24) {
      goto LABEL_37;
    }
  }
  unsigned int v26 = (uint64_t *)(v25 + 8 * v17 + 8);
  uint64_t v27 = ~v17 + v24;
  while (v27)
  {
    unsigned int v28 = (uint64_t *)*v26++;
    double v23 = v28;
    LODWORD(v17) = v17 + 1;
    --v27;
    if (v28) {
      goto LABEL_36;
    }
  }
LABEL_37:
  unsigned int v29 = v41;
  unint64_t v30 = v42;
LABEL_39:
  mrec_qsort_r<BuildWordIdNgramCmp>(v29, v30, 16);
  uint64_t v31 = v41;
  uint64_t v32 = *(unsigned int *)&v41[16 * (~v13 + a5)];
  *a6 = v32;
  if (v32)
  {
    unint64_t v33 = a6 + 1;
    double v34 = &v31[16 * (~v13 + a5) + 4];
    do
    {
      int v35 = *(_DWORD *)v34;
      v34 += 4;
      *v33++ = v35;
      --v32;
    }
    while (v32);
  }
  double v6 = (double)(v12 + 1);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v41);
  return v6;
}

void sub_213FBDF60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va);
  _Unwind_Resume(a1);
}

char *mrec_qsort_r<BuildWordIdNgramCmp>(char *result, unint64_t a2, int64_t a3)
{
  int64_t v4 = -a3;
  BOOL v5 = a3 != 8;
  BOOL v6 = ((result | a3) & 7) == 0;
  if (((result | a3) & 7) != 0) {
    int v7 = 2;
  }
  else {
    int v7 = a3 != 8;
  }
  if (a2 < 7)
  {
LABEL_5:
    if ((uint64_t)(a2 * a3) > a3)
    {
      uint64_t v8 = &result[a2 * a3];
      double v9 = &result[a3];
      double v10 = result;
      do
      {
        if (v9 > result)
        {
          int v11 = v10;
          unsigned int v12 = v9;
LABEL_9:
          int v13 = v12;
          unsigned int v12 = (_DWORD *)((char *)v12 + v4);
          unsigned int v14 = *v12 - 1;
          while ((v14 & 0x80000000) == 0)
          {
            unsigned int v15 = v12[v14 + 1];
            unsigned int v16 = *((_DWORD *)v13 + v14-- + 1);
            if (v15 != v16)
            {
              if (v15 >= v16)
              {
                if (v7)
                {
                  uint64_t v17 = 0;
                  uint64_t v18 = (uint64_t)v11 + a3;
                  if (v6)
                  {
                    do
                    {
                      uint64_t v19 = *(void *)(v18 + 8 * v17);
                      *(void *)(v18 + 8 * v17) = *(void *)&v11[2 * v17];
                      *(void *)&v11[2 * v17++] = v19;
                    }
                    while ((unint64_t)a3 >> 3 != v17);
                  }
                  else
                  {
                    do
                    {
                      char v20 = *(unsigned char *)(v18 + v17);
                      *(unsigned char *)(v18 + v17) = *((unsigned char *)v11 + v17);
                      *((unsigned char *)v11 + v17++) = v20;
                    }
                    while (a3 != v17);
                  }
                }
                else
                {
                  uint64_t v21 = *v13;
                  *int v13 = *(void *)v12;
                  *(void *)unsigned int v12 = v21;
                }
                int v11 = (_DWORD *)((char *)v11 + v4);
                if (v12 > (_DWORD *)result) {
                  goto LABEL_9;
                }
              }
              break;
            }
          }
        }
        v9 += a3;
        double v10 = (_DWORD *)((char *)v10 + a3);
      }
      while (v9 < v8);
    }
    return result;
  }
  unint64_t v22 = (unint64_t)a3 >> 3;
  while (1)
  {
    double v23 = &result[(a2 >> 1) * a3];
    if (a2 != 7)
    {
      uint64_t v24 = &result[(a2 - 1) * a3];
      if (a2 < 0x29)
      {
        unsigned int v26 = result;
        goto LABEL_40;
      }
      unint64_t v25 = (a2 >> 3) * a3;
      unsigned int v26 = &result[v25];
      uint64_t v27 = 2 * v25;
      unsigned int v28 = &result[2 * v25];
      unsigned int v29 = *(_DWORD *)result - 1;
      unsigned int v30 = v29;
      do
      {
        if ((v30 & 0x80000000) != 0) {
          goto LABEL_73;
        }
        unsigned int v31 = *(_DWORD *)&result[4 * v30 + 4];
        unsigned int v32 = *(_DWORD *)&v26[4 * v30-- + 4];
      }
      while (v31 == v32);
      if (v31 >= v32)
      {
LABEL_73:
        unsigned int v60 = *(_DWORD *)v26 - 1;
        do
        {
          if ((v60 & 0x80000000) != 0) {
            goto LABEL_77;
          }
          unsigned int v61 = *(_DWORD *)&v26[4 * v60 + 4];
          unsigned int v62 = *(_DWORD *)&v28[4 * v60-- + 4];
        }
        while (v61 == v62);
        if (v61 < v62)
        {
          do
          {
LABEL_77:
            if ((v29 & 0x80000000) != 0) {
              goto LABEL_81;
            }
            unsigned int v63 = *(_DWORD *)&result[4 * v29 + 4];
            unsigned int v64 = *(_DWORD *)&v28[4 * v29-- + 4];
            BOOL v65 = v63 >= v64;
          }
          while (v63 == v64);
          unsigned int v26 = result;
          if (v65) {
LABEL_81:
          }
            unsigned int v26 = &result[2 * v25];
        }
      }
      else
      {
        unsigned int v33 = *(_DWORD *)v26 - 1;
        do
        {
          if ((v33 & 0x80000000) != 0) {
            goto LABEL_34;
          }
          unsigned int v34 = *(_DWORD *)&v26[4 * v33 + 4];
          unsigned int v35 = *(_DWORD *)&v28[4 * v33-- + 4];
        }
        while (v34 == v35);
        if (v34 >= v35)
        {
LABEL_34:
          while ((v29 & 0x80000000) == 0)
          {
            unsigned int v36 = *(_DWORD *)&result[4 * v29 + 4];
            unsigned int v37 = *(_DWORD *)&v28[4 * v29-- + 4];
            if (v36 != v37)
            {
              if (v36 >= v37) {
                unsigned int v26 = result;
              }
              else {
                unsigned int v26 = &result[2 * v25];
              }
              goto LABEL_82;
            }
          }
          unsigned int v26 = result;
        }
      }
LABEL_82:
      uint64_t v66 = -(uint64_t)v25;
      unsigned int v67 = &v23[-v25];
      uint64_t v68 = &v23[v25];
      unsigned int v69 = *(_DWORD *)v67 - 1;
      unsigned int v70 = v69;
      do
      {
        if ((v70 & 0x80000000) != 0) {
          goto LABEL_95;
        }
        unsigned int v71 = *(_DWORD *)&v67[4 * v70 + 4];
        unsigned int v72 = *(_DWORD *)&v23[4 * v70-- + 4];
      }
      while (v71 == v72);
      if (v71 >= v72)
      {
LABEL_95:
        unsigned int v78 = *(_DWORD *)v23 - 1;
        do
        {
          if ((v78 & 0x80000000) != 0) {
            goto LABEL_99;
          }
          unsigned int v79 = *(_DWORD *)&v23[4 * v78 + 4];
          unsigned int v80 = *(_DWORD *)&v68[4 * v78-- + 4];
        }
        while (v79 == v80);
        if (v79 < v80)
        {
          do
          {
LABEL_99:
            if ((v69 & 0x80000000) != 0) {
              goto LABEL_103;
            }
            unsigned int v81 = *(_DWORD *)&v67[4 * v69 + 4];
            unsigned int v82 = *(_DWORD *)&v68[4 * v69-- + 4];
            BOOL v83 = v81 >= v82;
          }
          while (v81 == v82);
          double v23 = v67;
          if (v83) {
LABEL_103:
          }
            double v23 = v68;
        }
      }
      else
      {
        unsigned int v73 = *(_DWORD *)v23 - 1;
        do
        {
          if ((v73 & 0x80000000) != 0) {
            goto LABEL_90;
          }
          unsigned int v74 = *(_DWORD *)&v23[4 * v73 + 4];
          unsigned int v75 = *(_DWORD *)&v68[4 * v73-- + 4];
        }
        while (v74 == v75);
        if (v74 >= v75)
        {
LABEL_90:
          while ((v69 & 0x80000000) == 0)
          {
            unsigned int v76 = *(_DWORD *)&v67[4 * v69 + 4];
            unsigned int v77 = *(_DWORD *)&v68[4 * v69-- + 4];
            if (v76 != v77)
            {
              if (v76 >= v77) {
                double v23 = v67;
              }
              else {
                double v23 = v68;
              }
              goto LABEL_104;
            }
          }
          double v23 = v67;
        }
      }
LABEL_104:
      uint64_t v84 = &v24[-v27];
      uint64_t v85 = &v24[v66];
      unsigned int v86 = *(_DWORD *)v84 - 1;
      unsigned int v87 = v86;
      do
      {
        if ((v87 & 0x80000000) != 0) {
          goto LABEL_116;
        }
        unsigned int v88 = *(_DWORD *)&v84[4 * v87 + 4];
        unsigned int v89 = *(_DWORD *)&v85[4 * v87-- + 4];
      }
      while (v88 == v89);
      if (v88 >= v89)
      {
LABEL_116:
        unsigned int v95 = *(_DWORD *)v85 - 1;
        do
        {
          if ((v95 & 0x80000000) != 0) {
            goto LABEL_120;
          }
          unsigned int v96 = *(_DWORD *)&v85[4 * v95 + 4];
          unsigned int v97 = *(_DWORD *)&v24[4 * v95-- + 4];
        }
        while (v96 == v97);
        if (v96 < v97)
        {
          do
          {
LABEL_120:
            if ((v86 & 0x80000000) != 0) {
              goto LABEL_40;
            }
            unsigned int v98 = *(_DWORD *)&v84[4 * v86 + 4];
            unsigned int v99 = *(_DWORD *)&v24[4 * v86-- + 4];
          }
          while (v98 == v99);
          if (v98 < v99) {
LABEL_123:
          }
            uint64_t v24 = v84;
LABEL_40:
          unsigned int v38 = *(_DWORD *)v26 - 1;
          unsigned int v39 = v38;
          while ((v39 & 0x80000000) == 0)
          {
            unsigned int v40 = *(_DWORD *)&v26[4 * v39 + 4];
            unsigned int v41 = *(_DWORD *)&v23[4 * v39-- + 4];
            if (v40 != v41)
            {
              int v42 = *(_DWORD *)v23;
              if (v40 < v41)
              {
                int v43 = v42 - 1;
                do
                {
                  if (v43 < 0) {
                    goto LABEL_48;
                  }
                  unsigned int v44 = *(_DWORD *)&v23[4 * v43 + 4];
                  unsigned int v45 = *(_DWORD *)&v24[4 * v43-- + 4];
                }
                while (v44 == v45);
                if (v44 < v45) {
                  goto LABEL_65;
                }
                do
                {
LABEL_48:
                  if ((v38 & 0x80000000) != 0)
                  {
                    double v23 = v26;
                    if (v7) {
                      goto LABEL_66;
                    }
                    goto LABEL_126;
                  }
                  unsigned int v46 = *(_DWORD *)&v26[4 * v38 + 4];
                  unsigned int v47 = *(_DWORD *)&v24[4 * v38-- + 4];
                }
                while (v46 == v47);
                if (v46 >= v47) {
                  double v23 = v26;
                }
                else {
                  double v23 = v24;
                }
                if (v7) {
                  goto LABEL_66;
                }
LABEL_126:
                uint64_t v100 = *(void *)result;
                *(void *)uint64_t result = *(void *)v23;
                *(void *)double v23 = v100;
                goto LABEL_127;
              }
LABEL_56:
              int v48 = v42 - 1;
              do
              {
                if (v48 < 0) {
                  goto LABEL_60;
                }
                unsigned int v49 = *(_DWORD *)&v23[4 * v48 + 4];
                unsigned int v50 = *(_DWORD *)&v24[4 * v48-- + 4];
              }
              while (v49 == v50);
              if (v49 < v50)
              {
LABEL_60:
                while ((v38 & 0x80000000) == 0)
                {
                  unsigned int v51 = *(_DWORD *)&v26[4 * v38 + 4];
                  unsigned int v52 = *(_DWORD *)&v24[4 * v38-- + 4];
                  BOOL v53 = v51 >= v52;
                  if (v51 != v52)
                  {
                    double v23 = v26;
                    if (!v53) {
                      goto LABEL_65;
                    }
                    break;
                  }
                }
                double v23 = v24;
              }
              goto LABEL_65;
            }
          }
          int v42 = *(_DWORD *)v23;
          goto LABEL_56;
        }
      }
      else
      {
        unsigned int v90 = *(_DWORD *)v85 - 1;
        do
        {
          if ((v90 & 0x80000000) != 0) {
            goto LABEL_112;
          }
          unsigned int v91 = *(_DWORD *)&v85[4 * v90 + 4];
          unsigned int v92 = *(_DWORD *)&v24[4 * v90-- + 4];
        }
        while (v91 == v92);
        if (v91 >= v92)
        {
          do
          {
LABEL_112:
            if ((v86 & 0x80000000) != 0) {
              goto LABEL_123;
            }
            unsigned int v93 = *(_DWORD *)&v84[4 * v86 + 4];
            unsigned int v94 = *(_DWORD *)&v24[4 * v86-- + 4];
          }
          while (v93 == v94);
          if (v93 >= v94) {
            uint64_t v24 = v84;
          }
          goto LABEL_40;
        }
      }
      uint64_t v24 = v85;
      goto LABEL_40;
    }
LABEL_65:
    if (!v7) {
      goto LABEL_126;
    }
LABEL_66:
    if (v6)
    {
      uint64_t v54 = result;
      unint64_t v55 = (unint64_t)a3 >> 3;
      do
      {
        uint64_t v56 = *(void *)v54;
        *(void *)uint64_t v54 = *(void *)v23;
        v54 += 8;
        *(void *)double v23 = v56;
        v23 += 8;
        --v55;
      }
      while (v55);
    }
    else
    {
      int64_t v57 = a3;
      uint64_t v58 = result;
      do
      {
        char v59 = *v58;
        *v58++ = *v23;
        *v23++ = v59;
        --v57;
      }
      while (v57);
    }
LABEL_127:
    int v101 = 0;
    uint64_t v102 = &result[a3];
    char v103 = &result[(a2 - 1) * a3];
    double v104 = v103;
    int v105 = &result[a3];
    BOOL v106 = &result[a3];
    while (1)
    {
      while (v105 <= v104)
      {
        unsigned int v107 = *(_DWORD *)v105 - 1;
        do
        {
          if ((v107 & 0x80000000) != 0)
          {
            if (v7)
            {
              uint64_t v119 = 0;
              if (v6)
              {
                do
                {
                  uint64_t v120 = *(void *)&v106[8 * v119];
                  *(void *)&v106[8 * v119] = *(void *)&v105[8 * v119];
                  *(void *)&v105[8 * v119++] = v120;
                }
                while (v22 != v119);
              }
              else
              {
                do
                {
                  char v121 = v106[v119];
                  v106[v119] = v105[v119];
                  v105[v119++] = v121;
                }
                while (a3 != v119);
              }
            }
            else
            {
              uint64_t v123 = *(void *)v106;
              *(void *)BOOL v106 = *(void *)v105;
              *(void *)int v105 = v123;
            }
            v106 += a3;
            int v101 = 1;
            goto LABEL_162;
          }
          unsigned int v108 = *(_DWORD *)&v105[4 * v107 + 4];
          unsigned int v109 = *(_DWORD *)&result[4 * v107-- + 4];
        }
        while (v108 == v109);
        if (v108 >= v109) {
          break;
        }
LABEL_162:
        v105 += a3;
      }
LABEL_143:
      if (v105 > v104) {
        break;
      }
      unsigned int v114 = *(_DWORD *)v104 - 1;
      do
      {
        if ((v114 & 0x80000000) != 0)
        {
          if (v7)
          {
            uint64_t v110 = 0;
            if (v6)
            {
              do
              {
                uint64_t v111 = *(void *)&v104[8 * v110];
                *(void *)&v104[8 * v110] = *(void *)&v103[8 * v110];
                *(void *)&v103[8 * v110++] = v111;
              }
              while (v22 != v110);
            }
            else
            {
              do
              {
                char v112 = v104[v110];
                v104[v110] = v103[v110];
                v103[v110++] = v112;
              }
              while (a3 != v110);
            }
          }
          else
          {
            uint64_t v113 = *(void *)v104;
            *(void *)double v104 = *(void *)v103;
            *(void *)char v103 = v113;
          }
          v103 += v4;
          int v101 = 1;
LABEL_142:
          v104 += v4;
          goto LABEL_143;
        }
        unsigned int v115 = *(_DWORD *)&v104[4 * v114 + 4];
        unsigned int v116 = *(_DWORD *)&result[4 * v114-- + 4];
      }
      while (v115 == v116);
      if (v115 >= v116) {
        goto LABEL_142;
      }
      if (v7)
      {
        uint64_t v117 = 0;
        if (v6)
        {
          do
          {
            uint64_t v118 = *(void *)&v105[8 * v117];
            *(void *)&v105[8 * v117] = *(void *)&v104[8 * v117];
            *(void *)&v104[8 * v117++] = v118;
          }
          while (v22 != v117);
        }
        else
        {
          do
          {
            char v122 = v105[v117];
            v105[v117] = v104[v117];
            v104[v117++] = v122;
          }
          while (a3 != v117);
        }
      }
      else
      {
        uint64_t v124 = *(void *)v105;
        *(void *)int v105 = *(void *)v104;
        *(void *)double v104 = v124;
      }
      v105 += a3;
      v104 += v4;
      int v101 = 1;
    }
    uint64_t v125 = &result[a2 * a3];
    if (!v101) {
      break;
    }
    int64_t v126 = v105 - v106;
    if (v106 - result >= v105 - v106) {
      unint64_t v127 = v105 - v106;
    }
    else {
      unint64_t v127 = v106 - result;
    }
    if (v127)
    {
      if (v6)
      {
        uint64_t v128 = &v105[-v127];
        unint64_t v129 = v127 >> 3;
        uint64_t v130 = result;
        do
        {
          uint64_t v131 = *(void *)v130;
          *(void *)uint64_t v130 = *(void *)v128;
          v130 += 8;
          *(void *)uint64_t v128 = v131;
          v128 += 8;
          --v129;
        }
        while (v129);
      }
      else
      {
        uint64_t v132 = -(uint64_t)v127;
        uint64_t v133 = result;
        do
        {
          char v134 = *v133;
          *v133++ = v105[v132];
          v105[v132] = v134;
          BOOL v53 = __CFADD__(v132++, 1);
        }
        while (!v53);
      }
    }
    int64_t v135 = v103 - v104;
    int64_t v136 = v125 - &v103[a3];
    if (v103 - v104 < v136) {
      int64_t v136 = v103 - v104;
    }
    if (v136)
    {
      if (v6)
      {
        int v137 = &v125[-v136];
        unint64_t v138 = (unint64_t)v136 >> 3;
        do
        {
          uint64_t v139 = *(void *)v105;
          *(void *)int v105 = *(void *)v137;
          v105 += 8;
          *(void *)int v137 = v139;
          v137 += 8;
          --v138;
        }
        while (v138);
      }
      else
      {
        int64_t v140 = -v136;
        do
        {
          char v141 = *v105;
          *v105++ = v125[v140];
          v125[v140] = v141;
          BOOL v53 = __CFADD__(v140++, 1);
        }
        while (!v53);
      }
    }
    if (v126 > a3) {
      uint64_t result = (char *)mrec_qsort_r<BuildWordIdNgramCmp>();
    }
    if (v135 <= a3) {
      return result;
    }
    uint64_t result = &v125[-v135];
    a2 = v135 / (unint64_t)a3;
    BOOL v6 = ((((_BYTE)v125 - v135) | a3) & 7) == 0;
    if (((((_BYTE)v125 - v135) | a3) & 7) != 0) {
      int v7 = 2;
    }
    else {
      int v7 = v5;
    }
    if (a2 < 7) {
      goto LABEL_5;
    }
  }
  if ((uint64_t)(a2 * a3) > a3)
  {
    uint64_t v142 = result;
    do
    {
      if (v102 > result)
      {
        uint64_t v143 = v142;
        unsigned int v144 = v102;
LABEL_201:
        unsigned int v145 = v144;
        unsigned int v144 = (_DWORD *)((char *)v144 + v4);
        unsigned int v146 = *v144 - 1;
        while ((v146 & 0x80000000) == 0)
        {
          unsigned int v147 = v144[v146 + 1];
          unsigned int v148 = *((_DWORD *)v145 + v146-- + 1);
          if (v147 != v148)
          {
            if (v147 >= v148)
            {
              if (v7)
              {
                uint64_t v149 = 0;
                uint64_t v150 = (uint64_t)v143 + a3;
                if (v6)
                {
                  do
                  {
                    uint64_t v151 = *(void *)(v150 + 8 * v149);
                    *(void *)(v150 + 8 * v149) = *(void *)&v143[2 * v149];
                    *(void *)&v143[2 * v149++] = v151;
                  }
                  while (v22 != v149);
                }
                else
                {
                  do
                  {
                    char v152 = *(unsigned char *)(v150 + v149);
                    *(unsigned char *)(v150 + v149) = *((unsigned char *)v143 + v149);
                    *((unsigned char *)v143 + v149++) = v152;
                  }
                  while (a3 != v149);
                }
              }
              else
              {
                uint64_t v153 = *v145;
                *unsigned int v145 = *(void *)v144;
                *(void *)unsigned int v144 = v153;
              }
              uint64_t v143 = (_DWORD *)((char *)v143 + v4);
              if (v144 > (_DWORD *)result) {
                goto LABEL_201;
              }
            }
            break;
          }
        }
      }
      v102 += a3;
      uint64_t v142 = (_DWORD *)((char *)v142 + a3);
    }
    while (v102 < v125);
  }
  return result;
}

uint64_t WordLanguageModel::createBuildWordIdAndCountArray(WordIdAndCountCmp *a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5)
{
  unint64_t v7 = *(unsigned int *)(a2 + 8);
  if (v7)
  {
    unint64_t v9 = 0;
    uint64_t v10 = a4;
    uint64_t v11 = a3;
    do
    {
      if (v11 != v9 && v10 != v9)
      {
        double v12 = *(double *)(*(void *)a2 + 8 * v9);
        if (v12 > 0.0)
        {
          unsigned int v13 = *(_DWORD *)(a5 + 8);
          if (v13 == *(_DWORD *)(a5 + 12))
          {
            DgnPrimArray<unsigned long long>::reallocElts(a5, 1, 1);
            unsigned int v13 = *(_DWORD *)(a5 + 8);
            unint64_t v7 = *(unsigned int *)(a2 + 8);
          }
          unsigned int v14 = (_DWORD *)(*(void *)a5 + 8 * v13);
          *unsigned int v14 = v9;
          v14[1] = v12;
          *(_DWORD *)(a5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v13 + 1;
        }
      }
      ++v9;
    }
    while (v9 < v7);
  }
  uint64_t v15 = *(void *)a5;
  unint64_t v16 = *(unsigned int *)(a5 + 8);

  return mrec_qsort_r<WordIdAndCountCmp>(v15, v16, 8uLL, a1);
}

uint64_t WordLanguageModel::maybeAddBuildBegAndEndLmId(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 1816);
  int v2 = *(_DWORD *)(v1 + 4);
  int v3 = *(_DWORD *)(v1 + 8);
  if (v2 == 16777212)
  {
    int v4 = -1;
  }
  else
  {
    int v4 = *(_DWORD *)(this + 104);
    *(_DWORD *)(this + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 104) = v4 + 1;
  }
  *(_DWORD *)(this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 112) = v4;
  if (v3 == 0xFFFFFF)
  {
    *(_DWORD *)(this + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = -1;
  }
  else if (v3 == v2)
  {
    *(_DWORD *)(this + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v4;
  }
  else
  {
    int v5 = *(_DWORD *)(this + 104);
    *(_DWORD *)(this + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v5;
    *(_DWORD *)(this + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 104) = v5 + 1;
  }
  return this;
}

uint64_t WordLanguageModel::createBuildWordIdToLmIdArray(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 1816);
  uint64_t v6 = *(unsigned int *)(v4 + 4);
  uint64_t v5 = *(unsigned int *)(v4 + 8);
  unsigned int v7 = *(_DWORD *)(result + 104) - 1;
  unint64_t v8 = *(unsigned int *)(*(void *)(result + 16) + 388);
  if (v7 <= 0xFE)
  {
    if (*(_DWORD *)(result + 164) >= v8)
    {
      *(_DWORD *)(result + HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 160) = v8;
      unint64_t v9 = (_DWORD *)(result + 160);
      if (!v8)
      {
LABEL_13:
        unint64_t v16 = *(unsigned int *)(a2 + 8);
        if (v16)
        {
          uint64_t v17 = 0;
          unint64_t v18 = 0;
          int v19 = 1;
          do
          {
            uint64_t v20 = *(unsigned int *)(*(void *)a2 + v17);
            if (v20 != v6 && v20 != v5)
            {
              *(unsigned char *)(*(void *)(v3 + 152) + v20) = v19++;
              unint64_t v16 = *(unsigned int *)(a2 + 8);
            }
            ++v18;
            v17 += 8;
          }
          while (v18 < v16);
        }
        if ((v6 & 0xFFFFFFFD) != 0xFFFFFC) {
          *(unsigned char *)(*(void *)(v3 + 152) + v6) = *(_DWORD *)(v3 + 112);
        }
        if ((v5 & 0xFFFFFFFD) != 0xFFFFFD) {
          *(unsigned char *)(*(void *)(v3 + 152) + v5) = *(_DWORD *)(v3 + 116);
        }
        if (*v9)
        {
          unint64_t v22 = 0;
          do
          {
            uint64_t result = WordNgramTemplate::getHeadCloneForWordId(*(WordNgramTemplate **)(v3 + 1816), v22);
            if (result != 0xFFFFFF)
            {
              uint64_t result = WordNgramTemplate::isHeadCloneWordId(*(WordNgramTemplate **)(v3 + 1816), v22);
              if ((result & 1) == 0)
              {
                uint64_t result = WordNgramTemplate::getHeadCloneForWordId(*(WordNgramTemplate **)(v3 + 1816), v22);
                *(unsigned char *)(*(void *)(v3 + 152) + v22) = *(unsigned char *)(*(void *)(v3 + 152) + result);
              }
            }
            ++v22;
          }
          while (v22 < *v9);
        }
        return result;
      }
    }
    else
    {
      unsigned int v46 = 0;
      unint64_t v9 = (_DWORD *)(result + 160);
      int v10 = realloc_array(*(void **)(result + 152), &v46, v8, *(unsigned int *)(result + 160), *(unsigned int *)(result + 160), 1);
      *(void *)(v3 + 152) = v46;
      *unint64_t v9 = v8;
      *(_DWORD *)(v3 + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = v10;
    }
    unint64_t v14 = 0;
    do
    {
      uint64_t result = WordNgramTemplate::getHeadCloneForWordId(*(WordNgramTemplate **)(v3 + 1816), v14);
      if (result == 0xFFFFFF) {
        LOBYTE(v15) = -1;
      }
      else {
        int v15 = *(_DWORD *)(v3 + 72);
      }
      *(unsigned char *)(*(void *)(v3 + 152) + v14++) = v15;
    }
    while (v14 < *(unsigned int *)(v3 + 160));
    goto LABEL_13;
  }
  if (v7 <= 0xFFFE)
  {
    uint64_t v11 = (void *)(result + 136);
    unsigned int v12 = *(_DWORD *)(result + 148);
    if (v8 <= v12)
    {
      *(_DWORD *)(result + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 144) = v8;
      unsigned int v13 = (unsigned int *)(result + 144);
      if (!v8)
      {
        LODWORD(v2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
LABEL_40:
        uint64_t v29 = *(unsigned int *)(a2 + 8);
        if (v29)
        {
          unsigned int v30 = *(unsigned int **)a2;
          int v31 = 1;
          do
          {
            unsigned int v33 = *v30;
            v30 += 2;
            uint64_t v32 = v33;
            if (v33 != v6 && v32 != v5) {
              *(_WORD *)(*v11 + 2 * vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v31++;
            }
            --v29;
          }
          while (v29);
        }
        if ((v6 & 0xFFFFFFFD) != 0xFFFFFC) {
          *(_WORD *)(*(void *)(v3 + 136) + 2 * v6) = *(_DWORD *)(v3 + 112);
        }
        if ((v5 & 0xFFFFFFFD) != 0xFFFFFD) {
          *(_WORD *)(*(void *)(v3 + 136) + 2 * v5) = *(_DWORD *)(v3 + 116);
        }
        if (v28)
        {
          unint64_t v35 = 0;
          do
          {
            uint64_t result = WordNgramTemplate::getHeadCloneForWordId(*(WordNgramTemplate **)(v3 + 1816), v35);
            if (result != 0xFFFFFF)
            {
              uint64_t result = WordNgramTemplate::isHeadCloneWordId(*(WordNgramTemplate **)(v3 + 1816), v35);
              if ((result & 1) == 0)
              {
                uint64_t result = WordNgramTemplate::getHeadCloneForWordId(*(WordNgramTemplate **)(v3 + 1816), v35);
                *(_WORD *)(*(void *)(v3 + 136) + 2 * v35) = *(_WORD *)(*(void *)(v3 + 136)
                                                                       + 2 * result);
              }
            }
            ++v35;
          }
          while (v35 < *v13);
        }
        return result;
      }
    }
    else
    {
      DgnPrimArray<short>::reallocElts(result + 136, v8 - v12, 0);
      *(_DWORD *)(v3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 144) = v8;
      unsigned int v13 = (unsigned int *)(v3 + 144);
    }
    unint64_t v26 = 0;
    do
    {
      uint64_t result = WordNgramTemplate::getHeadCloneForWordId(*(WordNgramTemplate **)(v3 + 1816), v26);
      if (result == 0xFFFFFF) {
        LOWORD(v27) = -1;
      }
      else {
        int v27 = *(_DWORD *)(v3 + 72);
      }
      *(_WORD *)(*v11 + 2 * v26++) = v27;
      unint64_t v28 = *v13;
    }
    while (v26 < v28);
    goto LABEL_40;
  }
  double v23 = (void *)(result + 120);
  unsigned int v24 = *(_DWORD *)(result + 132);
  if (v8 > v24)
  {
    DgnPrimArray<unsigned int>::reallocElts(result + 120, v8 - v24, 0);
    *(_DWORD *)(v3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 128) = v8;
    unint64_t v25 = (_DWORD *)(v3 + 128);
    goto LABEL_60;
  }
  *(_DWORD *)(result + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 128) = v8;
  unint64_t v25 = (_DWORD *)(result + 128);
  if (v8)
  {
LABEL_60:
    unint64_t v36 = 0;
    do
    {
      uint64_t result = WordNgramTemplate::getHeadCloneForWordId(*(WordNgramTemplate **)(v3 + 1816), v36);
      if (result == 0xFFFFFF) {
        int v37 = -1;
      }
      else {
        int v37 = *(_DWORD *)(v3 + 72);
      }
      *(_DWORD *)(*v23 + 4 * v36++) = v37;
    }
    while (v36 < *v25);
  }
  unint64_t v38 = *(unsigned int *)(a2 + 8);
  if (v38)
  {
    unint64_t v39 = 0;
    unsigned int v40 = *(unsigned int **)a2;
    int v41 = 1;
    do
    {
      unsigned int v43 = *v40;
      v40 += 2;
      uint64_t v42 = v43;
      if (v43 != v6 && v42 != v5)
      {
        *(_DWORD *)(*v23 + 4 * v42) = v41++;
        unint64_t v38 = *(unsigned int *)(a2 + 8);
      }
      ++v39;
    }
    while (v39 < v38);
  }
  if ((v6 & 0xFFFFFFFD) != 0xFFFFFC) {
    *(_DWORD *)(*(void *)(v3 + 120) + 4 * v6) = *(_DWORD *)(v3 + 112);
  }
  if ((v5 & 0xFFFFFFFD) != 0xFFFFFD) {
    *(_DWORD *)(*(void *)(v3 + 120) + 4 * v5) = *(_DWORD *)(v3 + 116);
  }
  if (*v25)
  {
    unint64_t v45 = 0;
    do
    {
      uint64_t result = WordNgramTemplate::getHeadCloneForWordId(*(WordNgramTemplate **)(v3 + 1816), v45);
      if (result != 0xFFFFFF)
      {
        uint64_t result = WordNgramTemplate::isHeadCloneWordId(*(WordNgramTemplate **)(v3 + 1816), v45);
        if ((result & 1) == 0)
        {
          uint64_t result = WordNgramTemplate::getHeadCloneForWordId(*(WordNgramTemplate **)(v3 + 1816), v45);
          *(_DWORD *)(*(void *)(v3 + 120) + 4 * v45) = *(_DWORD *)(*(void *)(v3 + 120) + 4 * result);
        }
      }
      ++v45;
    }
    while (v45 < *v25);
  }
  return result;
}

uint64_t mrec_qsort_r<WordIdAndCountCmp>(uint64_t result, unint64_t a2, unint64_t a3, WordIdAndCountCmp *a4)
{
  uint64_t v4 = a4;
  unint64_t v6 = a2;
  unsigned int v7 = (unsigned int *)result;
  uint64_t v8 = -(uint64_t)a3;
  if (((result | a3) & 7) != 0) {
    int v9 = 2;
  }
  else {
    int v9 = a3 != 8;
  }
  BOOL v113 = ((result | a3) & 7) == 0;
  int v114 = v9;
  if (a2 < 7)
  {
LABEL_117:
    if ((uint64_t)(v6 * a3) > (uint64_t)a3)
    {
      unsigned int v79 = v4;
      uint64_t v111 = (unsigned int *)((char *)v7 + v6 * a3);
      unsigned int v80 = (unsigned int *)((char *)v7 + a3);
      unsigned int v81 = v7;
      do
      {
        if (v80 > v7)
        {
          unsigned int v82 = v81;
          BOOL v83 = v80;
          do
          {
            uint64_t v84 = v83;
            BOOL v83 = (unsigned int *)((char *)v83 + v8);
            uint64_t result = WordIdAndCountCmp::compareElements(v79, v83, v84, a4);
            if ((int)result < 1) {
              break;
            }
            if (v114)
            {
              if (v113)
              {
                uint64_t v85 = 0;
                uint64_t v86 = (uint64_t)v82 + a3;
                do
                {
                  uint64_t v87 = *(void *)(v86 + 8 * v85);
                  *(void *)(v86 + 8 * v85) = *(void *)&v82[2 * v85];
                  *(void *)&v82[2 * v85++] = v87;
                }
                while (a3 >> 3 != v85);
              }
              else
              {
                uint64_t v89 = 0;
                uint64_t v90 = (uint64_t)v82 + a3;
                do
                {
                  char v91 = *(unsigned char *)(v90 + v89);
                  *(unsigned char *)(v90 + v89) = *((unsigned char *)v82 + v89);
                  *((unsigned char *)v82 + v89++) = v91;
                }
                while (a3 != v89);
              }
            }
            else
            {
              uint64_t v88 = *(void *)v84;
              *(void *)uint64_t v84 = *(void *)v83;
              *(void *)BOOL v83 = v88;
            }
            unsigned int v82 = (unsigned int *)((char *)v82 + v8);
          }
          while (v83 > v7);
        }
        unsigned int v80 = (unsigned int *)((char *)v80 + a3);
        unsigned int v81 = (unsigned int *)((char *)v81 + a3);
      }
      while (v80 < v111);
    }
    return result;
  }
  BOOL v107 = a3 != 8;
  unint64_t v10 = a3 >> 3;
  while (1)
  {
    uint64_t v11 = (unsigned int *)((char *)v7 + (v6 >> 1) * a3);
    if (v6 == 7) {
      goto LABEL_44;
    }
    unsigned int v12 = (unsigned int *)((char *)v7 + (v6 - 1) * a3);
    if (v6 >= 0x29)
    {
      unsigned int v108 = (unsigned int *)((char *)v7 + (v6 - 1) * a3);
      unint64_t v13 = (v6 >> 3) * a3;
      unint64_t v14 = (unsigned int *)((char *)v7 + v13);
      unint64_t v105 = v13;
      int v15 = (unsigned int *)((char *)v7 + 2 * v13);
      int v16 = WordIdAndCountCmp::compareElements(v4, v7, (unsigned int *)((char *)v7 + v13), a4);
      unsigned int v109 = v14;
      int v18 = WordIdAndCountCmp::compareElements(v4, v14, v15, v17);
      if (v16 < 0)
      {
        if ((v18 & 0x80000000) == 0)
        {
          if ((int)WordIdAndCountCmp::compareElements(v4, v7, v15, v19) >= 0) {
            uint64_t v20 = v7;
          }
          else {
            uint64_t v20 = v15;
          }
          goto LABEL_18;
        }
      }
      else if (v18 <= 0)
      {
        if ((int)WordIdAndCountCmp::compareElements(v4, v7, v15, v19) >= 0) {
          uint64_t v20 = v15;
        }
        else {
          uint64_t v20 = v7;
        }
LABEL_18:
        unsigned int v109 = v20;
      }
      unint64_t v22 = (v6 >> 3) * a3;
      double v23 = (unsigned int *)((char *)v11 + v105);
      double v104 = (unsigned int *)((char *)v11 - v105);
      int v24 = WordIdAndCountCmp::compareElements(v4, (unsigned int *)((char *)v11 - v105), (unsigned int *)((char *)v7 + (v6 >> 1) * a3), v19);
      int v26 = WordIdAndCountCmp::compareElements(v4, (unsigned int *)((char *)v7 + (v6 >> 1) * a3), (unsigned int *)((char *)v11 + v105), v25);
      if (v24 < 0)
      {
        if ((v26 & 0x80000000) == 0)
        {
          uint64_t v11 = (unsigned int *)((char *)v11 - v105);
          if ((int)WordIdAndCountCmp::compareElements(v4, v104, v23, v27) < 0) {
            uint64_t v11 = v23;
          }
        }
      }
      else if (v26 <= 0)
      {
        uint64_t v11 = (unsigned int *)((char *)v11 - v105);
        if ((int)WordIdAndCountCmp::compareElements(v4, v104, v23, v27) >= 0) {
          uint64_t v11 = v23;
        }
      }
      unsigned int v12 = (unsigned int *)((char *)v108 - v105);
      BOOL v106 = (unsigned int *)((char *)v108 - 2 * v105);
      int v28 = WordIdAndCountCmp::compareElements(v4, (unsigned int *)((char *)v108 - 2 * v22), (unsigned int *)((char *)v108 - v22), v27);
      int v30 = WordIdAndCountCmp::compareElements(v4, (unsigned int *)((char *)v108 - v22), v108, v29);
      if (v28 < 0)
      {
        uint64_t v21 = v109;
        if ((v30 & 0x80000000) == 0)
        {
          unsigned int v12 = (unsigned int *)((char *)v7 + (v6 - 1) * a3);
          if ((int)WordIdAndCountCmp::compareElements(v4, v106, v108, a4) >= 0) {
            unsigned int v12 = v106;
          }
        }
      }
      else
      {
        uint64_t v21 = v109;
        if (v30 <= 0)
        {
          unsigned int v12 = (unsigned int *)((char *)v7 + (v6 - 1) * a3);
          if ((int)WordIdAndCountCmp::compareElements(v4, v106, v108, a4) < 0) {
            unsigned int v12 = v106;
          }
        }
      }
      goto LABEL_35;
    }
    uint64_t v21 = v7;
LABEL_35:
    int v31 = WordIdAndCountCmp::compareElements(v4, v21, v11, a4);
    uint64_t result = WordIdAndCountCmp::compareElements(v4, v11, v12, v32);
    if (v31 < 0)
    {
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = WordIdAndCountCmp::compareElements(v4, v21, v12, a4);
        if ((int)result >= 0) {
          uint64_t v11 = v21;
        }
        else {
          uint64_t v11 = v12;
        }
      }
    }
    else if ((int)result <= 0)
    {
      uint64_t result = WordIdAndCountCmp::compareElements(v4, v21, v12, a4);
      if ((int)result >= 0) {
        uint64_t v11 = v12;
      }
      else {
        uint64_t v11 = v21;
      }
    }
LABEL_44:
    if (v114)
    {
      if (v113)
      {
        unsigned int v33 = v7;
        unint64_t v34 = a3 >> 3;
        do
        {
          uint64_t v35 = *(void *)v33;
          *(void *)unsigned int v33 = *(void *)v11;
          v33 += 2;
          *(void *)uint64_t v11 = v35;
          v11 += 2;
          --v34;
        }
        while (v34);
      }
      else
      {
        unint64_t v37 = a3;
        unint64_t v38 = v7;
        do
        {
          char v39 = *(unsigned char *)v38;
          *(unsigned char *)unint64_t v38 = *(unsigned char *)v11;
          unint64_t v38 = (unsigned int *)((char *)v38 + 1);
          *(unsigned char *)uint64_t v11 = v39;
          uint64_t v11 = (unsigned int *)((char *)v11 + 1);
          --v37;
        }
        while (v37);
      }
    }
    else
    {
      uint64_t v36 = *(void *)v7;
      *(void *)unsigned int v7 = *(void *)v11;
      *(void *)uint64_t v11 = v36;
    }
    int v40 = 0;
    int v41 = (void *)((char *)v7 + a3);
    unint64_t v110 = v6;
    uint64_t v42 = (unsigned int *)((char *)v7 + (v6 - 1) * a3);
    unsigned int v43 = v42;
    unsigned int v44 = (unsigned int *)((char *)v7 + a3);
LABEL_53:
    while (v44 <= v43)
    {
      uint64_t result = WordIdAndCountCmp::compareElements(v4, v44, v7, a4);
      if ((int)result > 0) {
        break;
      }
      if (!result)
      {
        if (v114)
        {
          if (v113)
          {
            uint64_t v45 = 0;
            do
            {
              uint64_t v46 = v41[v45];
              v41[v45] = *(void *)&v44[2 * v45];
              *(void *)&v44[2 * v45++] = v46;
            }
            while (v10 != v45);
          }
          else
          {
            uint64_t v55 = 0;
            do
            {
              char v56 = *((unsigned char *)v41 + v55);
              *((unsigned char *)v41 + v55) = *((unsigned char *)v44 + v55);
              *((unsigned char *)v44 + v55++) = v56;
            }
            while (a3 != v55);
          }
        }
        else
        {
          uint64_t v54 = *v41;
          void *v41 = *(void *)v44;
          *(void *)unsigned int v44 = v54;
        }
        int v41 = (void *)((char *)v41 + a3);
        int v40 = 1;
      }
      unsigned int v44 = (unsigned int *)((char *)v44 + a3);
    }
    while (v44 <= v43)
    {
      uint64_t result = WordIdAndCountCmp::compareElements(v4, v43, v7, a4);
      if ((result & 0x80000000) != 0)
      {
        if (v114)
        {
          if (v113)
          {
            uint64_t v52 = 0;
            do
            {
              uint64_t v53 = *(void *)&v44[2 * v52];
              *(void *)&v44[2 * v52] = *(void *)&v43[2 * v52];
              *(void *)&v43[2 * v52++] = v53;
            }
            while (v10 != v52);
          }
          else
          {
            uint64_t v58 = 0;
            do
            {
              char v59 = *((unsigned char *)v44 + v58);
              *((unsigned char *)v44 + v5DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *((unsigned char *)v43 + v58);
              *((unsigned char *)v43 + v58++) = v59;
            }
            while (a3 != v58);
          }
        }
        else
        {
          uint64_t v57 = *(void *)v44;
          *(void *)unsigned int v44 = *(void *)v43;
          *(void *)unsigned int v43 = v57;
        }
        unsigned int v44 = (unsigned int *)((char *)v44 + a3);
        unsigned int v43 = (unsigned int *)((char *)v43 + v8);
        int v40 = 1;
        goto LABEL_53;
      }
      if (!result)
      {
        if (v114)
        {
          if (v113)
          {
            uint64_t v47 = 0;
            do
            {
              uint64_t v48 = *(void *)&v43[2 * v47];
              *(void *)&v43[2 * v47] = *(void *)&v42[2 * v47];
              *(void *)&v42[2 * v47++] = v48;
            }
            while (v10 != v47);
          }
          else
          {
            uint64_t v50 = 0;
            do
            {
              char v51 = *((unsigned char *)v43 + v50);
              *((unsigned char *)v43 + v50) = *((unsigned char *)v42 + v50);
              *((unsigned char *)v42 + v50++) = v51;
            }
            while (a3 != v50);
          }
        }
        else
        {
          uint64_t v49 = *(void *)v43;
          *(void *)unsigned int v43 = *(void *)v42;
          *(void *)uint64_t v42 = v49;
        }
        uint64_t v42 = (unsigned int *)((char *)v42 + v8);
        int v40 = 1;
      }
      unsigned int v43 = (unsigned int *)((char *)v43 + v8);
    }
    unsigned int v60 = (unsigned int *)((char *)v7 + v110 * a3);
    if (!v40) {
      break;
    }
    int64_t v61 = (char *)v44 - (char *)v41;
    if ((char *)v41 - (char *)v7 >= (char *)v44 - (char *)v41) {
      unint64_t v62 = (char *)v44 - (char *)v41;
    }
    else {
      unint64_t v62 = (char *)v41 - (char *)v7;
    }
    if (v62)
    {
      if (v113)
      {
        unsigned int v63 = (void *)((char *)v44 - v62);
        unint64_t v64 = v62 >> 3;
        BOOL v65 = v7;
        do
        {
          uint64_t v66 = *(void *)v65;
          *(void *)BOOL v65 = *v63;
          v65 += 2;
          *v63++ = v66;
          --v64;
        }
        while (v64);
      }
      else
      {
        uint64_t v67 = -(uint64_t)v62;
        uint64_t v68 = v7;
        do
        {
          char v69 = *(unsigned char *)v68;
          *(unsigned char *)uint64_t v68 = *((unsigned char *)v44 + v67);
          uint64_t v68 = (unsigned int *)((char *)v68 + 1);
          *((unsigned char *)v44 + v67) = v69;
          BOOL v70 = __CFADD__(v67++, 1);
        }
        while (!v70);
      }
    }
    int64_t v71 = (char *)v42 - (char *)v43;
    if ((char *)v42 - (char *)v43 >= (char *)v60 - ((char *)v42 + a3)) {
      unint64_t v72 = (char *)v60 - ((char *)v42 + a3);
    }
    else {
      unint64_t v72 = (char *)v42 - (char *)v43;
    }
    if (v72)
    {
      if (v113)
      {
        unsigned int v73 = (char *)v60 - v72;
        unint64_t v74 = v72 >> 3;
        do
        {
          uint64_t v75 = *(void *)v44;
          *(void *)unsigned int v44 = *(void *)v73;
          v44 += 2;
          *(void *)unsigned int v73 = v75;
          v73 += 8;
          --v74;
        }
        while (v74);
      }
      else
      {
        uint64_t v76 = -(uint64_t)v72;
        do
        {
          char v77 = *(unsigned char *)v44;
          *(unsigned char *)unsigned int v44 = *((unsigned char *)v60 + v76);
          unsigned int v44 = (unsigned int *)((char *)v44 + 1);
          *((unsigned char *)v60 + v76) = v77;
          BOOL v70 = __CFADD__(v76++, 1);
        }
        while (!v70);
      }
    }
    if (v61 > (uint64_t)a3) {
      uint64_t result = mrec_qsort_r<WordIdAndCountCmp>(v7, v61 / a3, a3, a4);
    }
    if (v71 <= (uint64_t)a3) {
      return result;
    }
    unsigned int v7 = (unsigned int *)((char *)v60 - v71);
    unint64_t v6 = v71 / a3;
    int v78 = v107;
    if ((((v60 - v71) | a3) & 7) != 0) {
      int v78 = 2;
    }
    BOOL v113 = (((v60 - v71) | a3) & 7) == 0;
    int v114 = v78;
    uint64_t v4 = a4;
    if (v6 < 7) {
      goto LABEL_117;
    }
  }
  unsigned int v92 = (unsigned int *)((char *)v7 + a3);
  if ((uint64_t)(v110 * a3) > (uint64_t)a3)
  {
    unsigned int v93 = v7;
    do
    {
      if (v92 > v7)
      {
        unsigned int v94 = v93;
        unsigned int v95 = v92;
        do
        {
          unsigned int v96 = v95;
          unsigned int v95 = (unsigned int *)((char *)v95 + v8);
          uint64_t result = WordIdAndCountCmp::compareElements(a4, v95, v96, a4);
          if ((int)result < 1) {
            break;
          }
          if (v114)
          {
            if (v113)
            {
              uint64_t v97 = 0;
              uint64_t v98 = (uint64_t)v94 + a3;
              do
              {
                uint64_t v99 = *(void *)(v98 + 8 * v97);
                *(void *)(v98 + 8 * v97) = *(void *)&v94[2 * v97];
                *(void *)&v94[2 * v97++] = v99;
              }
              while (v10 != v97);
            }
            else
            {
              uint64_t v101 = 0;
              uint64_t v102 = (uint64_t)v94 + a3;
              do
              {
                char v103 = *(unsigned char *)(v102 + v101);
                *(unsigned char *)(v102 + v101) = *((unsigned char *)v94 + v101);
                *((unsigned char *)v94 + v101++) = v103;
              }
              while (a3 != v101);
            }
          }
          else
          {
            uint64_t v100 = *(void *)v96;
            *(void *)unsigned int v96 = *(void *)v95;
            *(void *)unsigned int v95 = v100;
          }
          unsigned int v94 = (unsigned int *)((char *)v94 + v8);
        }
        while (v95 > v7);
      }
      unsigned int v92 = (unsigned int *)((char *)v92 + a3);
      unsigned int v93 = (unsigned int *)((char *)v93 + a3);
    }
    while (v92 < v60);
  }
  return result;
}

uint64_t Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,double>::add(uint64_t result, _DWORD *a2, void *a3)
{
  uint64_t v5 = result;
  unsigned int v6 = *(_DWORD *)(result + 12);
  if (*(_DWORD *)(result + 8) >= v6 >> 1) {
    uint64_t result = HashKEV<unsigned int,unsigned int,CWIDScope>::upSize(result, 2 * v6);
  }
  uint64_t v7 = *a2;
  if (v7)
  {
    int v8 = 0;
    uint64_t v9 = v7 - 1;
    do
    {
      HIDWORD(v10) = v8;
      LODWORD(v10) = v8;
      int v8 = a2[v9 + 1] + (v10 >> 19);
    }
    while ((unint64_t)v9--);
  }
  else
  {
    int v8 = 0;
  }
  int v12 = *(_DWORD *)(v5 + 16);
  if (v12) {
    unsigned int v13 = (-1640531527 * v8) >> -(char)v12;
  }
  else {
    unsigned int v13 = 0;
  }
  uint64_t v14 = *(void *)(v5 + 80);
  uint64_t v15 = *(void *)(v5 + 32);
  if (!v15)
  {
    uint64_t result = DgnPool::addChunk((DgnPool *)(v5 + 24));
    uint64_t v15 = *(void *)(v5 + 32);
    LODWORD(v7) = *a2;
  }
  *(void *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = *(void *)v15;
  *(_DWORD *)(v15 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *(_DWORD *)(v15 + 12) = v7;
  if (v7)
  {
    uint64_t v7 = v7;
    int v16 = (_DWORD *)(v15 + 16);
    uint64_t v17 = a2 + 1;
    do
    {
      int v18 = *v17++;
      *v16++ = v18;
      --v7;
    }
    while (v7);
  }
  int v19 = (void *)(v14 + 8 * v13);
  *(void *)(v15 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = *a3;
  *(_DWORD *)(v15 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v8;
  ++*(_DWORD *)(v5 + 8);
  if (*(unsigned char *)(v5 + 20))
  {
    *(void *)uint64_t v15 = *v19;
  }
  else
  {
    *(void *)uint64_t v15 = 0;
    uint64_t v20 = (void *)*v19;
    if (*v19)
    {
      do
      {
        int v19 = v20;
        uint64_t v20 = (void *)*v20;
      }
      while (v20);
    }
  }
  *int v19 = v15;
  return result;
}

uint64_t WordLanguageModel::dumpWordLM(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, DgnStream *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9 = a4;
  unsigned int v10 = a3;
  if (*(_DWORD *)(a2 + 8)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 14939, (uint64_t)"lm/wordlm", 91, (uint64_t)"%u", a7, a8, **(_WORD **)a2);
  }
  if (*(_DWORD *)(a1 + 64) < v10)
  {
    uint64_t v24 = *(unsigned int *)(a1 + 64);
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 14940, (uint64_t)"lm/wordlm", 92, (uint64_t)"%u %u", a7, a8, v10);
  }
  uint64_t v25 = a1;
  __int16 v26 = v10;
  __int16 v27 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  int v30 = 0;
  uint64_t v31 = -1;
  uint64_t v32 = -1;
  char v33 = v9;
  NGramIterator::next((NGramIterator *)&v25, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
  while (!HIBYTE(v27))
  {
    if (v29)
    {
      unint64_t v15 = 0;
      do
      {
        if (v15) {
          DgnStream::streamPrintf(a5, " ", v12, v13, v14);
        }
        DgnStream::streamPrintf(a5, "%u", v12, v13, v14, *(unsigned int *)(v28 + 4 * v15++), v24);
      }
      while (v15 < v29);
    }
    DgnStream::streamPrintf(a5, " %u %d\n", v12, v13, v14, (unsigned __int16)v30, SHIWORD(v30));
    NGramIterator::next((NGramIterator *)&v25, v16, v17, v18, v19, v20, v21, v22);
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v28);
}

void sub_213FBF8C4(_Unwind_Exception *a1)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1);
  _Unwind_Resume(a1);
}

void NGramIterator::NGramIterator(NGramIterator *this, const WordLanguageModel *a2, __int16 a3, char a4)
{
  *(void *)this = a2;
  *((_WORD *)this + 4) = a3;
  *((_WORD *)this + 5) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *((void *)this + 5) = -1;
  *((void *)this + 6) = -1;
  *((unsigned char *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = a4;
}

BOOL NGramIterator::next(NGramIterator *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((unsigned char *)this + 11)) {
    return 0;
  }
  switch(*((_WORD *)this + 4))
  {
    case 1:
      NGramIterator::next1(this, a2, a3, a4, a5, a6, a7, a8);
      break;
    case 2:
      if (*((unsigned char *)this + 56)) {
        NGramIterator::next2Backoff((unint64_t)this);
      }
      else {
        NGramIterator::next2((uint64_t *)this);
      }
      break;
    case 3:
      if (*((unsigned char *)this + 56)) {
        NGramIterator::next3Backoff(this);
      }
      else {
        NGramIterator::next3(this);
      }
      break;
    case 4:
      if (*((unsigned char *)this + 56)) {
        NGramIterator::next4Backoff(this);
      }
      else {
        NGramIterator::next4((uint64_t)this);
      }
      break;
    default:
      return *((unsigned char *)this + 11) == 0;
  }
  return *((unsigned char *)this + 11) == 0;
}

void NGramIterator::next1(NGramIterator *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((unsigned char *)this + 10)) {
    LODWORD(v9) = **((_DWORD **)this + 2) + 1;
  }
  else {
    LODWORD(v9) = 1;
  }
  *((unsigned char *)this + 10) = 1;
  unsigned int v10 = *(_DWORD **)this;
  unsigned int v11 = *(_DWORD *)(*(void *)this + 176);
  int v12 = v11 - v9;
  if (v11 > v9)
  {
    uint64_t v9 = v9;
    while (1)
    {
      uint64_t v13 = *((void *)v10 + 21);
      int v14 = *(unsigned __int16 *)(v13 + 2 * v9);
      if (v14 != 20000) {
        break;
      }
      ++v9;
      if (!--v12) {
        goto LABEL_19;
      }
    }
    if (v10[16] < 2u)
    {
      __int16 v15 = 20000;
    }
    else
    {
      __int16 v15 = *(_WORD *)(v13 + 2 * v9);
      if (v10[84]) {
        __int16 v15 = *(_WORD *)(*((void *)v10 + 41) + 2 * v9);
      }
      if (v15 < 0) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/lm/wordlm.cpp", 15067, (uint64_t)"lm/wordlm", 93, (uint64_t)"%d", a7, a8, v15);
      }
    }
    if (!*((_DWORD *)this + 7)) {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 16, 1, 0);
    }
    *((_DWORD *)this + 6) = 1;
    **((_DWORD **)this + 2) = v9;
    *((_WORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v14;
    *((_WORD *)this + 17) = v15;
    unsigned int v11 = *(_DWORD *)(*(void *)this + 176);
  }
  if (v9 >= v11) {
LABEL_19:
  }
    *((unsigned char *)this + 11) = 1;
}

unint64_t NGramIterator::next2Backoff(unint64_t this)
{
  unint64_t v1 = this;
  if (*(unsigned char *)(this + 10))
  {
    unsigned int v2 = *(_DWORD *)(this + 40) + 1;
    *(_DWORD *)(this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = v2;
  }
  else
  {
    *(void *)(this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = 0xFFFFFFFF00000001;
    unsigned int v2 = 1;
  }
  *(unsigned char *)(this + 10) = 1;
  uint64_t v3 = *(void *)this;
  unsigned int v4 = *(_DWORD *)(*(void *)this + 560);
  unsigned int v5 = v4 - v2;
  if (v4 > v2)
  {
    uint64_t v6 = *(void *)(v3 + 552);
    uint64_t v7 = v2;
    while (!*(_WORD *)(v6 + 2 * v7))
    {
      *(_DWORD *)(this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = ++v7;
      if (!--v5) {
        goto LABEL_13;
      }
    }
    __int16 v8 = *(_WORD *)(*(void *)(v3 + 344) + 2 * v7);
    unsigned int v9 = *(_DWORD *)(this + 28);
    if (v9 <= 1)
    {
      this = DgnPrimArray<unsigned int>::reallocElts(this + 16, 2 - v9, 0);
      uint64_t v3 = *(void *)v1;
    }
    *(_DWORD *)(v1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = 2;
    unsigned int v10 = *(_DWORD **)(v1 + 16);
    *unsigned int v10 = v7;
    v10[1] = -1;
    *(_WORD *)(v1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 20000;
    *(_WORD *)(v1 + 34) = v8;
    unsigned int v2 = *(_DWORD *)(v1 + 40);
    unsigned int v4 = *(_DWORD *)(v3 + 560);
  }
  if (v2 >= v4) {
LABEL_13:
  }
    *(unsigned char *)(v1 + 11) = 1;
  return this;
}

uint64_t *NGramIterator::next2(uint64_t *this)
{
  uint64_t v1 = (uint64_t)this;
  if (*((unsigned char *)this + 10))
  {
    unsigned int v2 = *((_DWORD *)this + 10);
    int v3 = *((_DWORD *)this + 11) + 1;
    *((_DWORD *)this + 11) = v3;
    uint64_t v4 = *this;
  }
  else
  {
    unsigned int v2 = 1;
    *((_DWORD *)this + 10) = 1;
    uint64_t v4 = *this;
    int v3 = (**(_DWORD **)(*this + 384) >> 1) & 1;
    *((_DWORD *)this + 11) = v3;
  }
  *((unsigned char *)this + 10) = 1;
  unsigned int v5 = *(_DWORD *)(v4 + 560);
  if (v2 >= v5) {
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v6 = *(void *)(v4 + 384);
    if ((*(_DWORD *)(v6 + 4 * (v2 >> 5)) >> v2))
    {
      if ((unsigned __int16)v3 > *(unsigned __int16 *)(*(void *)(v4 + 552) + 2 * v2)) {
        goto LABEL_11;
      }
      uint64_t v7 = (unsigned __int16)v3 + *(_DWORD *)(*(void *)(v4 + 536) + 4 * v2) - 1;
      if (*(_DWORD *)(v4 + 376))
      {
        uint64_t v7 = *(unsigned __int8 *)(*(void *)(v4 + 584) + v7);
        uint64_t v8 = *(void *)(v4 + 368);
      }
      else
      {
        uint64_t v8 = *(void *)(v4 + 568);
      }
      int v9 = *(unsigned __int16 *)(v8 + 2 * v7);
    }
    else
    {
      if (v3 >= *(unsigned __int16 *)(*(void *)(v4 + 552) + 2 * v2))
      {
LABEL_11:
        *(_DWORD *)(v1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = ++v2;
        if (v2 >= v5) {
          int v3 = 0;
        }
        else {
          int v3 = (*(_DWORD *)(v6 + 4 * (v2 >> 5)) >> v2) & 1;
        }
        *(_DWORD *)(v1 + 44) = v3;
        goto LABEL_19;
      }
      this = (uint64_t *)BigramData::getSearchScoreForIndex((BigramData *)(v4 + 360), v2, v3);
      int v9 = (int)this;
    }
    if (v9 != 20000) {
      break;
    }
    unsigned int v2 = *(_DWORD *)(v1 + 40);
    int v3 = *(_DWORD *)(v1 + 44) + 1;
    *(_DWORD *)(v1 + 44) = v3;
    uint64_t v4 = *(void *)v1;
LABEL_19:
    unsigned int v5 = *(_DWORD *)(v4 + 560);
    if (v2 >= v5) {
      goto LABEL_25;
    }
  }
  unint64_t v10 = *(unsigned int *)(v1 + 40);
  __int16 v11 = *(_WORD *)(*(void *)(*(void *)v1 + 344) + 2 * v10);
  if ((*(_DWORD *)(*(void *)(*(void *)v1 + 384) + ((v10 >> 3) & 0x1FFFFFFC)) >> v10))
  {
    int v12 = *(_DWORD *)(v1 + 44);
  }
  else
  {
    LOWORD(v12) = BigramData::getSearchSuccIdForIndex((BigramData *)(*(void *)v1 + 360), v10, *(_DWORD *)(v1 + 44));
    LODWORD(v10) = *(_DWORD *)(v1 + 40);
  }
  this = (uint64_t *)NGramIteratorData::set2(v1 + 16, v10, (unsigned __int16)v12, v9, v11);
  unsigned int v2 = *(_DWORD *)(v1 + 40);
  unsigned int v5 = *(_DWORD *)(*(void *)v1 + 560);
LABEL_25:
  if (v2 >= v5) {
    *(unsigned char *)(v1 + 11) = 1;
  }
  return this;
}

void NGramIterator::next3Backoff(NGramIterator *this)
{
  int v2 = *((unsigned __int8 *)this + 10);
  if (*((unsigned char *)this + 10))
  {
    unsigned int v3 = *((_DWORD *)this + 10);
    int v2 = *((_DWORD *)this + 11) + 1;
    *((_DWORD *)this + 11) = v2;
  }
  else
  {
    *((void *)this + 5) = 1;
    *((_DWORD *)this + 12) = -1;
    unsigned int v3 = 1;
  }
  *((unsigned char *)this + 10) = 1;
  uint64_t v4 = *(void *)this;
  unsigned int v5 = *(_DWORD *)(*(void *)this + 800);
  if (v3 >= v5) {
    goto LABEL_19;
  }
  uint64_t v6 = *(void *)(v4 + 792);
  while (!*(_WORD *)(v6 + 2 * v3) || v2 >= *(unsigned __int16 *)(v6 + 2 * v3))
  {
    int v2 = 0;
    *((_DWORD *)this + 10) = ++v3;
LABEL_13:
    *((_DWORD *)this + 11) = v2;
    if (v3 >= v5) {
      goto LABEL_19;
    }
  }
  uint64_t v8 = (*(_DWORD *)(*(void *)(v4 + 808) + 4 * v3) + v2);
  if (!*(_WORD *)(*(void *)(v4 + 1040) + 2 * v8))
  {
    ++v2;
    goto LABEL_13;
  }
  if (*(_DWORD *)(v4 + 768)) {
    int v9 = (__int16 *)(*(void *)(v4 + 760) + 2 * *(unsigned __int8 *)(*(void *)(v4 + 856) + v8));
  }
  else {
    int v9 = (__int16 *)(*(void *)(v4 + 840) + 2 * v8);
  }
  NGramIteratorData::set3((NGramIterator *)((char *)this + 16), v3, *(unsigned __int16 *)(*(void *)(v4 + 824) + 2 * v8), 0xFFFFu, 20000, *v9);
  unsigned int v5 = *(_DWORD *)(*(void *)this + 800);
LABEL_19:
  if (*((_DWORD *)this + 10) >= v5) {
    *((unsigned char *)this + 11) = 1;
  }
}

void NGramIterator::next3(NGramIterator *this)
{
  if (*((unsigned char *)this + 10))
  {
    ++*((_DWORD *)this + 12);
    unint64_t v2 = *((unsigned int *)this + 10);
    uint64_t v3 = *(void *)this;
    unint64_t v4 = *(unsigned int *)(*(void *)this + 800);
  }
  else
  {
    uint64_t v3 = *(void *)this;
    unint64_t v4 = *(unsigned int *)(*(void *)this + 800);
    if (v4 < 2)
    {
      unint64_t v2 = 1;
LABEL_9:
      *((_DWORD *)this + 10) = v2;
    }
    else
    {
      unint64_t v2 = 1;
      while (!*(_WORD *)(*(void *)(v3 + 792) + 2 * v2))
      {
        if (v4 == ++v2)
        {
          unint64_t v2 = *(unsigned int *)(*(void *)this + 800);
          goto LABEL_9;
        }
      }
      *((_DWORD *)this + 10) = v2;
      *((_DWORD *)this + 11) = 0;
      unint64_t v5 = *(unsigned int *)(*(void *)(v3 + 808) + 4 * v2);
      *((_DWORD *)this + 12) = (*(_DWORD *)(*(void *)(v3 + 872) + ((v5 >> 3) & 0x1FFFFFFC)) >> v5) & 1;
      unint64_t v2 = v2;
    }
  }
  *((unsigned char *)this + 10) = 1;
  if (v2 >= v4) {
    goto LABEL_33;
  }
  while (1)
  {
    uint64_t v6 = *(void *)(v3 + 792);
    int v7 = *(unsigned __int16 *)(v6 + 2 * v2);
    if (!*(_WORD *)(v6 + 2 * v2) || (int v8 = *((_DWORD *)this + 11), v8 >= v7))
    {
      int v18 = 0;
      unint64_t v19 = v2 + 1;
      *((void *)this + 5) = v19;
      if (v4 > v19)
      {
        if (*(_WORD *)(v6 + 2 * v19))
        {
          unint64_t v20 = *(unsigned int *)(*(void *)(v3 + 808) + 4 * v19);
          int v18 = (*(_DWORD *)(*(void *)(v3 + 872) + ((v20 >> 3) & 0x1FFFFFFC)) >> v20) & 1;
        }
        else
        {
          int v18 = 0;
        }
      }
      *((_DWORD *)this + 12) = v18;
      goto LABEL_32;
    }
    uint64_t v9 = *(void *)(v3 + 808);
    uint64_t v10 = (*(_DWORD *)(v9 + 4 * v2) + v8);
    uint64_t v11 = *(void *)(v3 + 872);
    uint64_t v12 = v10 >> 5;
    int v13 = *(_DWORD *)(v11 + 4 * v12);
    int v14 = 1 << (*(unsigned char *)(v9 + 4 * v2) + v8);
    int v15 = *((_DWORD *)this + 12);
    if ((v14 & v13) != 0)
    {
      if ((unsigned __int16)*((_DWORD *)this + 12) <= *(unsigned __int16 *)(*(void *)(v3 + 1040)
                                                                                         + 2 * v10))
      {
        uint64_t v16 = (unsigned __int16)*((_DWORD *)this + 12) + *(_DWORD *)(*(void *)(v3 + 1024) + 4 * v10) - 1;
        if (*(_DWORD *)(v3 + 784))
        {
          uint64_t v16 = *(unsigned __int8 *)(*(void *)(v3 + 1072) + v16);
          uint64_t v17 = *(void *)(v3 + 776);
        }
        else
        {
          uint64_t v17 = *(void *)(v3 + 1056);
        }
        int v23 = *(unsigned __int16 *)(v17 + 2 * v16);
        if (v23 != 20000) {
          goto LABEL_37;
        }
        int v22 = v15 + 1;
        goto LABEL_31;
      }
      goto LABEL_26;
    }
    if (v15 < *(unsigned __int16 *)(*(void *)(v3 + 1040) + 2 * v10)) {
      break;
    }
LABEL_26:
    *((_DWORD *)this + 11) = v8 + 1;
    if (v8 + 1 < v7)
    {
      int v22 = (*(_DWORD *)(v11 + 4 * ((*(_DWORD *)(v9 + 4 * v2) + v8 + 1) >> 5)) >> (*(unsigned char *)(v9 + 4 * v2)
                                                                                                 + v8
                                                                                                 + 1)) & 1;
LABEL_31:
      *((_DWORD *)this + 12) = v22;
    }
LABEL_32:
    unint64_t v2 = *((unsigned int *)this + 10);
    unint64_t v4 = *(unsigned int *)(v3 + 800);
    if (v2 >= v4) {
      goto LABEL_33;
    }
  }
  int SearchScoreForIndex = TrigramData::getSearchScoreForIndex((TrigramData *)(v3 + 744), *(_DWORD *)(v9 + 4 * v2) + v8, v15);
  if (SearchScoreForIndex == 20000)
  {
    ++*((_DWORD *)this + 12);
    uint64_t v3 = *(void *)this;
    goto LABEL_32;
  }
  LOWORD(v23) = SearchScoreForIndex;
  uint64_t v3 = *(void *)this;
  int v13 = *(_DWORD *)(*(void *)(*(void *)this + 872) + 4 * v12);
LABEL_37:
  unsigned int v24 = *(unsigned __int16 *)(*(void *)(v3 + 824) + 2 * v10);
  if ((v13 & v14) != 0)
  {
    int v25 = *((_DWORD *)this + 12);
  }
  else
  {
    LOWORD(v25) = TrigramData::getSearchSuccIdForIndex((TrigramData *)(v3 + 744), v10, *((_DWORD *)this + 12));
    uint64_t v3 = *(void *)this;
  }
  if (*(_DWORD *)(v3 + 768)) {
    __int16 v26 = (__int16 *)(*(void *)(v3 + 760) + 2 * *(unsigned __int8 *)(*(void *)(v3 + 856) + v10));
  }
  else {
    __int16 v26 = (__int16 *)(*(void *)(v3 + 840) + 2 * v10);
  }
  NGramIteratorData::set3((NGramIterator *)((char *)this + 16), *((_DWORD *)this + 10), v24, (unsigned __int16)v25, v23, *v26);
  unint64_t v4 = *(unsigned int *)(*(void *)this + 800);
LABEL_33:
  if (*((unsigned int *)this + 10) >= v4) {
    *((unsigned char *)this + 11) = 1;
  }
}

QuadgramData *NGramIterator::next4Backoff(QuadgramData *this)
{
  uint64_t v1 = this;
  if (*((unsigned char *)this + 10))
  {
    int v2 = *((_DWORD *)this + 12) + 1;
    *((_DWORD *)this + 12) = v2;
    uint64_t v3 = *(void **)this;
    unint64_t v4 = *(unsigned int *)(*(void *)this + 1288);
    unint64_t v5 = *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v3 = *(void **)this;
    unint64_t v4 = *(unsigned int *)(*(void *)this + 1288);
    if (v4 < 2)
    {
      unint64_t v5 = 1;
    }
    else
    {
      uint64_t v6 = 1;
      while (!*(_WORD *)(v3[160] + 2 * v6))
      {
        if (v4 == ++v6)
        {
          unint64_t v5 = *(unsigned int *)(*(void *)this + 1288);
          goto LABEL_10;
        }
      }
      unint64_t v5 = v6;
    }
LABEL_10:
    int v2 = 0;
    *((_DWORD *)this + 10) = v5;
    *((_DWORD *)this + 11) = 0;
    *((_DWORD *)this + 12) = 0;
    *((_DWORD *)this + 13) = -1;
  }
  *((unsigned char *)this + 10) = 1;
  if (v5 >= v4) {
    goto LABEL_28;
  }
  this = (QuadgramData *)(v3 + 154);
  uint64_t v7 = v3[160];
  while (1)
  {
    if (*(_WORD *)(v7 + 2 * v5))
    {
      int v8 = *((_DWORD *)v1 + 11);
      if (v8 < *(unsigned __int16 *)(v7 + 2 * v5)) {
        break;
      }
    }
    int v2 = 0;
    *((void *)v1 + 5) = ++v5;
LABEL_21:
    *((_DWORD *)v1 + 12) = v2;
    if (v5 >= v4) {
      goto LABEL_28;
    }
  }
  uint64_t v9 = (*(_DWORD *)(v3[162] + 4 * v5) + v8);
  if (v2 >= *(unsigned __int16 *)(v3[166] + 2 * v9))
  {
    int v2 = 0;
    *((_DWORD *)v1 + 11) = v8 + 1;
    goto LABEL_21;
  }
  uint64_t v10 = *(unsigned int *)(v3[185] + 4 * v9);
  if (*((_DWORD *)v3 + 308) && ((*(_DWORD *)(v3[168] + 4 * (v9 >> 5)) >> v9) & 1) != 0)
  {
    LODWORD(v10) = *(_DWORD *)(v3[207] + 4 * v10);
    if (*(_WORD *)(v3[217] + 2 * (v10 + v2)))
    {
      uint64_t v11 = v3 + 209;
      goto LABEL_27;
    }
    goto LABEL_25;
  }
  if (!*(_WORD *)(v3[189] + 2 * (v10 + v2)))
  {
LABEL_25:
    ++v2;
    goto LABEL_21;
  }
  uint64_t v11 = v3 + 187;
LABEL_27:
  unsigned int v12 = *(unsigned __int16 *)(v3[164] + 2 * v9);
  unsigned int v13 = *(unsigned __int16 *)(*v11 + 2 * (v10 + v2));
  __int16 BackoffWeight = QuadgramData::getBackoffWeight(this, v9, v2);
  this = (QuadgramData *)NGramIteratorData::set4((unint64_t)v1 + 16, *((_DWORD *)v1 + 10), v12, v13, 0xFFFF, 20000, BackoffWeight);
  unint64_t v4 = *(unsigned int *)(*(void *)v1 + 1288);
LABEL_28:
  if (*((unsigned int *)v1 + 10) >= v4) {
    *((unsigned char *)v1 + 11) = 1;
  }
  return this;
}

uint64_t NGramIterator::next4(uint64_t this)
{
  uint64_t v1 = this;
  if (*(unsigned char *)(this + 10))
  {
    int v2 = *(_DWORD *)(this + 52) + 1;
    *(_DWORD *)(this + 52) = v2;
    unint64_t v3 = *(unsigned int *)(this + 40);
    unint64_t v4 = *(void **)this;
    unint64_t v5 = *(unsigned int *)(*(void *)this + 1288);
  }
  else
  {
    unint64_t v4 = *(void **)this;
    unint64_t v5 = *(unsigned int *)(*(void *)this + 1288);
    if (v5 < 2)
    {
      unint64_t v3 = 1;
    }
    else
    {
      uint64_t v6 = 1;
      while (!*(_WORD *)(v4[160] + 2 * v6))
      {
        if (v5 == ++v6)
        {
          unint64_t v3 = *(unsigned int *)(*(void *)this + 1288);
          goto LABEL_10;
        }
      }
      unint64_t v3 = v6;
    }
LABEL_10:
    int v2 = 0;
    *(_DWORD *)(this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = v3;
    *(_DWORD *)(this + 44) = 0;
    *(void *)(this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = 0;
  }
  *(unsigned char *)(this + 10) = 1;
  if (v3 >= v5) {
    goto LABEL_33;
  }
  while (1)
  {
    uint64_t v7 = v4[160];
    int v8 = *(unsigned __int16 *)(v7 + 2 * v3);
    if (*(_WORD *)(v7 + 2 * v3))
    {
      int v9 = *(_DWORD *)(v1 + 44);
      if (v9 < v8) {
        break;
      }
    }
    int v2 = 0;
    *(void *)(v1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = (v3 + 1);
    *(_DWORD *)(v1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = 0;
LABEL_19:
    *(_DWORD *)(v1 + 52) = 0;
LABEL_20:
    unint64_t v3 = *(unsigned int *)(v1 + 40);
    unint64_t v5 = *((unsigned int *)v4 + 322);
    if (v3 >= v5) {
      goto LABEL_33;
    }
  }
  uint64_t v10 = (*(_DWORD *)(v4[162] + 4 * v3) + v9);
  int v11 = *(_DWORD *)(v1 + 48);
  if (v11 >= *(unsigned __int16 *)(v4[166] + 2 * v10))
  {
    int v2 = 0;
    *(void *)(v1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = 0;
    *(_DWORD *)(v1 + 44) = v9 + 1;
    goto LABEL_20;
  }
  uint64_t v12 = *(unsigned int *)(v4[185] + 4 * v10);
  if (*((_DWORD *)v4 + 308) && ((*(_DWORD *)(v4[168] + 4 * (v10 >> 5)) >> v10) & 1) != 0)
  {
    LODWORD(v12) = *(_DWORD *)(v4[207] + 4 * v12);
    unsigned int v13 = v4 + 217;
  }
  else
  {
    unsigned int v13 = v4 + 189;
  }
  if (v2 >= *(unsigned __int16 *)(*v13 + 2 * (v12 + v11)))
  {
    int v2 = 0;
    *(_DWORD *)(v1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = v11 + 1;
    goto LABEL_19;
  }
  this = QuadgramData::getScoreForIndex((QuadgramData *)(v4 + 154), v10, v11, v2);
  if (this == 20000)
  {
    int v2 = *(_DWORD *)(v1 + 52) + 1;
    *(_DWORD *)(v1 + 52) = v2;
    unint64_t v4 = *(void **)v1;
    goto LABEL_20;
  }
  __int16 v14 = this;
  int v15 = *(void **)v1;
  unsigned int v16 = *(unsigned __int16 *)(*(void *)(*(void *)v1 + 1312) + 2 * v10);
  int v17 = *(_DWORD *)(v1 + 48);
  uint64_t v18 = *(unsigned int *)(*(void *)(*(void *)v1 + 1480) + 4 * v10);
  if (*(_DWORD *)(*(void *)v1 + 1232) && ((*(_DWORD *)(v15[168] + 4 * (v10 >> 5)) >> v10) & 1) != 0)
  {
    LODWORD(v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *(_DWORD *)(v15[207] + 4 * v18);
    unint64_t v19 = v15 + 209;
  }
  else
  {
    unint64_t v19 = v15 + 187;
  }
  unsigned int v20 = *(unsigned __int16 *)(*v19 + 2 * (v18 + v17));
  int Quad3SuccIdForIndex = QuadgramData::getQuad3SuccIdForIndex((QuadgramData *)(*(void *)v1 + 1232), v10, v17, *(_DWORD *)(v1 + 52));
  __int16 BackoffWeight = QuadgramData::getBackoffWeight((QuadgramData *)(*(void *)v1 + 1232), v10, *(_DWORD *)(v1 + 48));
  this = NGramIteratorData::set4(v1 + 16, *(_DWORD *)(v1 + 40), v16, v20, Quad3SuccIdForIndex, v14, BackoffWeight);
  unint64_t v5 = *(unsigned int *)(*(void *)v1 + 1288);
LABEL_33:
  if (*(unsigned int *)(v1 + 40) >= v5) {
    *(unsigned char *)(v1 + 11) = 1;
  }
  return this;
}

unint64_t NGramIteratorData::set2(unint64_t this, int a2, int a3, __int16 a4, __int16 a5)
{
  unint64_t v9 = this;
  unsigned int v10 = *(_DWORD *)(this + 12);
  if (v10 <= 1) {
    this = DgnPrimArray<unsigned int>::reallocElts(this, 2 - v10, 0);
  }
  *(_DWORD *)(v9 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 2;
  int v11 = *(_DWORD **)v9;
  if (a3 == 0xFFFF) {
    int v12 = -1;
  }
  else {
    int v12 = a3;
  }
  *int v11 = a2;
  v11[1] = v12;
  *(_WORD *)(v9 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = a4;
  *(_WORD *)(v9 + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = a5;
  return this;
}

int8x8_t NGramIteratorData::set3(NGramIteratorData *this, int a2, unsigned int a3, unsigned int a4, __int16 a5, __int16 a6)
{
  unsigned int v12 = *((_DWORD *)this + 3);
  if (v12 <= 2) {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this, 3 - v12, 0);
  }
  *((_DWORD *)this + 2) = 3;
  uint64_t v13 = *(void *)this;
  *(_DWORD *)uint64_t v13 = a2;
  int8x8_t result = vorr_s8((int8x8_t)__PAIR64__(a4, a3), (int8x8_t)vceq_s32((int32x2_t)__PAIR64__(a4, a3), (int32x2_t)0xFFFF0000FFFFLL));
  *(int8x8_t *)(v13 + 4) = result;
  *((_WORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = a5;
  *((_WORD *)this + 9) = a6;
  return result;
}

unint64_t NGramIteratorData::set4(unint64_t this, int a2, unsigned int a3, unsigned int a4, int a5, __int16 a6, __int16 a7)
{
  unint64_t v13 = this;
  unsigned int v14 = *(_DWORD *)(this + 12);
  if (v14 <= 3) {
    this = DgnPrimArray<unsigned int>::reallocElts(this, 4 - v14, 0);
  }
  *(_DWORD *)(v13 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 4;
  uint64_t v15 = *(void *)v13;
  *(_DWORD *)uint64_t v15 = a2;
  *(int8x8_t *)(v15 + 4) = vorr_s8((int8x8_t)__PAIR64__(a4, a3), (int8x8_t)vceq_s32((int32x2_t)__PAIR64__(a4, a3), (int32x2_t)0xFFFF0000FFFFLL));
  if (a5 == 0xFFFF) {
    int v16 = -1;
  }
  else {
    int v16 = a5;
  }
  *(_DWORD *)(v15 + 12) = v16;
  *(_WORD *)(v13 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = a6;
  *(_WORD *)(v13 + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = a7;
  return this;
}

uint64_t WordLMContextData::WordLMContextData(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 16777212;
  *(void *)a1 = &unk_26C4E19F0;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = 0;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = 0;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = 0;
  *(void *)(a1 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 104) = 0;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 112) = 0;
  if (a2) {
    *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 112) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 464))(a2);
  }
  *(_WORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = -1;
  *(unsigned char *)(a1 + 20) = 0;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = -4278190084;
  *(_WORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = 0xFFFFFFFF00000000;
  *(unsigned char *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = 0;
  *(_WORD *)(a1 + 66) = 0;
  *(_OWORD *)(a1 + 6DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = xmmword_2140A69F0;
  *(void *)(a1 + HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 88) = 0xFFFFFFFE00FFFFFCLL;
  *(_WORD *)(a1 + 84) = 0;
  return a1;
}

void sub_213FC08A0(_Unwind_Exception *a1)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1);
  _Unwind_Resume(a1);
}

void WordLMContextData::~WordLMContextData(WordLMContextData *this)
{
  WordLMContextData::~WordLMContextData(this);

  JUMPOUT(0x216698730);
}

{
  *(void *)this = &unk_26C4E19F0;
  DgnDelete<LMContextData>(*((void (****)(void))this + 14));
  *((void *)this + 14) = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40);
}

uint64_t WordLMContextData::sizeObject(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v4 = 4;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v4 = 8;
  }
  if (a2 == 3) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  if (a2 != 2)
  {
    uint64_t v6 = *(void *)(a1 + 112);
    if (v6) {
      v5 += (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, a2);
    }
  }
  uint64_t v7 = sizeObject<unsigned int>(a1 + 40, v2);
  uint64_t v8 = sizeObject<unsigned int>(a1 + 96, v2);
  uint64_t v9 = 6;
  if (v2 == 3) {
    uint64_t v9 = 0;
  }
  return v9 + 2 * (v2 != 3) + v8 + v5 + v7 + 2 * (((v2 != 3) | (4 * (v2 != 3))) + 20 * (v2 != 3));
}

uint64_t HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder(uint64_t a1)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray(a1 + 72);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a1 + 48);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a1 + 32);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a1 + 16);

  return DgnPrimArray<unsigned int>::~DgnPrimArray(a1);
}

uint64_t HuffmanDecoder<unsigned short,unsigned int>::sizeObject(uint64_t a1, int a2)
{
  BOOL v4 = a2 != 3;
  uint64_t v5 = sizeObject<unsigned int>(a1, a2);
  uint64_t v6 = sizeObject<unsigned char>(a1 + 16, a2);
  uint64_t v7 = sizeObject<unsigned int>(a1 + 32, a2);
  uint64_t v8 = sizeObject<unsigned short>(a1 + 48, a2);
  return v5 + 8 * v4 + v6 + v7 + v8 + sizeObject<unsigned int>(a1 + 72, a2);
}

uint64_t HuffmanDecoder<unsigned short,unsigned int>::writeObject(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  writeObject<unsigned int>(a2, a1, a3);
  writeObject<unsigned char>(a2, a1 + 16, a3);
  writeObject<unsigned int>(a2, a1 + 32, a3);

  return writeObject<unsigned short>(a2, a1 + 48, a3);
}

unint64_t HuffmanDecoder<unsigned short,unsigned int>::readObject(unint64_t a1, DgnStream *a2, unsigned int *a3)
{
  readObject<unsigned int>(a2, a1, a3);
  readObject<unsigned char>(a2, a1 + 16, a3);
  readObject<unsigned int>(a2, a1 + 32, a3);
  readObject<unsigned short>(a2, a1 + 48, a3);

  return HuffmanDecoder<unsigned short,unsigned int>::configureIndexHelper(a1);
}

unint64_t HuffmanDecoder<unsigned short,unsigned int>::configureIndexHelper(unint64_t result)
{
  unsigned int v1 = *(_DWORD *)(result + 8);
  if (v1)
  {
    unint64_t v2 = result;
    if ((int)(v1 - 1) >= -1) {
      int v3 = -1;
    }
    else {
      int v3 = v1 - 1;
    }
    unsigned int v4 = v3 + 1;
    while ((--v1 & 0x80000000) == 0)
    {
      if ((*(_DWORD *)(*(void *)result + 4 * v1) & 0x1FFFFF) != 0)
      {
        unsigned int v4 = v1 + 1;
        int v3 = v1;
        break;
      }
    }
    uint64_t v5 = (uint64_t *)(result + 72);
    unsigned int v6 = *(_DWORD *)(result + 84);
    if (v6 <= 0x7FF) {
      int8x8_t result = DgnPrimArray<unsigned int>::reallocElts(result + 72, 2048 - v6, 0);
    }
    *(_DWORD *)(v2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = 2048;
    if ((v1 & 0x80000000) != 0)
    {
      *(void *)(v2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = 0;
      int v10 = *(_DWORD *)(v2 + 8);
    }
    else
    {
      uint64_t v7 = *(void *)v2;
      unint64_t v8 = *(unsigned int *)(*(void *)v2 + 4 * v3);
      *(_DWORD *)(v2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = (v8 & 0xFFE00000) + 0x200000;
      *(_DWORD *)(v2 + 6DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v3;
      for (unint64_t i = (v8 >> 21) + 1; ; ++i)
      {
        int v10 = *(_DWORD *)(v2 + 8);
        unint64_t v11 = v4 == v10 ? *(unsigned int *)(v2 + 80) : (unint64_t)*(unsigned int *)(v7 + 4 * v4) >> 21;
        if (i >= v11) {
          break;
        }
        *(_DWORD *)(*v5 + 4 * i) = v3;
      }
    }
    signed int v12 = v10 - 1;
    if (v3 < v10 - 1)
    {
      uint64_t v13 = *(void *)v2;
      if ((int)v4 < v12)
      {
        LODWORD(v14) = *(_DWORD *)(v13 + 4 * v4);
        do
        {
          unint64_t v15 = v14 >> 21;
          uint64_t v16 = v4 + 1;
          LODWORD(v14) = *(_DWORD *)(v13 + 4 * v16);
          if (v15 < v14 >> 21)
          {
            uint64_t v17 = *v5;
            do
            {
              *(_DWORD *)(v17 + 4 * v15++) = v4;
              unint64_t v14 = *(unsigned int *)(v13 + 4 * v16);
            }
            while (v15 < v14 >> 21);
            int v10 = *(_DWORD *)(v2 + 8);
          }
          signed int v12 = v10 - 1;
          ++v4;
        }
        while ((int)v16 < v10 - 1);
      }
      unint64_t v18 = (unint64_t)*(unsigned int *)(v13 + 4 * v12) >> 21;
      if (v18 < *(_DWORD *)(v2 + 80))
      {
        uint64_t v19 = *v5;
        do
          *(_DWORD *)(v19 + 4 * v18++) = *(_DWORD *)(v2 + 8) - 1;
        while (v18 < *(unsigned int *)(v2 + 80));
      }
    }
  }
  return result;
}

unint64_t DgnArray<DiskNgramContext>::reallocElts(uint64_t a1, uint64_t a2, int a3)
{
  int v3 = a2;
  if (a3) {
    int v3 = minAddAllocWithExtra(a2, *(_DWORD *)(a1 + 12));
  }
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 12) + v3;
  unint64_t v8 = 0;
  unint64_t result = realloc_array(*(void **)a1, &v8, 56 * v6, 56 * v5, 56 * v5, 1);
  *(_DWORD *)(a1 + 12) = result / 0x38;
  *(void *)a1 = v8;
  return result;
}

uint64_t Hash<unsigned short,unsigned short,HuffmanSymbol<unsigned short,unsigned int>,HuffmanSymbol<unsigned short,unsigned int>*>::add(uint64_t result, unsigned __int16 *a2, void *a3)
{
  uint64_t v5 = result;
  unsigned int v6 = *(_DWORD *)(result + 12);
  if (*(_DWORD *)(result + 8) >= v6 >> 1) {
    unint64_t result = HashKEV<unsigned int,unsigned int,CWIDScope>::upSize(result, 2 * v6);
  }
  int v7 = *a2;
  int v8 = *(_DWORD *)(v5 + 16);
  if (v8) {
    unsigned int v9 = (-1640531527 * v7) >> -(char)v8;
  }
  else {
    unsigned int v9 = 0;
  }
  uint64_t v10 = *(void *)(v5 + 80);
  uint64_t v11 = *(void *)(v5 + 32);
  if (!v11)
  {
    unint64_t result = DgnPool::addChunk((DgnPool *)(v5 + 24));
    uint64_t v11 = *(void *)(v5 + 32);
  }
  __int16 v12 = *a2;
  uint64_t v13 = (void *)(v10 + 8 * v9);
  *(void *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = *(void *)v11;
  *(_WORD *)(v11 + 12) = v12;
  *(void *)(v11 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = *a3;
  *(_DWORD *)(v11 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v7;
  ++*(_DWORD *)(v5 + 8);
  if (*(unsigned char *)(v5 + 20))
  {
    *(void *)uint64_t v11 = *v13;
  }
  else
  {
    *(void *)uint64_t v11 = 0;
    unint64_t v14 = (void *)*v13;
    if (*v13)
    {
      do
      {
        uint64_t v13 = v14;
        unint64_t v14 = (void *)*v14;
      }
      while (v14);
    }
  }
  *uint64_t v13 = v11;
  return result;
}

uint64_t **Hash<unsigned short,unsigned short,HuffmanSymbol<unsigned short,unsigned int>,HuffmanSymbol<unsigned short,unsigned int>*>::findBucket(uint64_t a1, unsigned __int16 *a2)
{
  int v2 = *a2;
  int v3 = *(_DWORD *)(a1 + 16);
  if (v3) {
    unsigned int v4 = (-1640531527 * v2) >> -(char)v3;
  }
  else {
    unsigned int v4 = 0;
  }
  unint64_t result = (uint64_t **)(*(void *)(a1 + 80) + 8 * v4);
  unsigned int v6 = *result;
  if (*result)
  {
    do
    {
      int v7 = (uint64_t **)v6;
      if (*((_DWORD *)v6 + 2) == v2 && *((unsigned __int16 *)v6 + 6) == v2) {
        break;
      }
      unsigned int v6 = (uint64_t *)*v6;
      unint64_t result = v7;
    }
    while (*v7);
  }
  return result;
}

unint64_t HuffmanDecoder<unsigned short,unsigned int>::initializeTable(unint64_t result, int a2, unsigned int a3)
{
  unint64_t v4 = result;
  unint64_t v5 = (a2 + 1);
  unsigned int v6 = *(_DWORD *)(result + 12);
  if (v5 > v6) {
    unint64_t result = DgnPrimArray<unsigned int>::reallocElts(result, v5 - v6, 0);
  }
  if (*(_DWORD *)(v4 + 28) < v5)
  {
    unsigned int v9 = 0;
    unint64_t result = realloc_array(*(void **)(v4 + 16), &v9, v5, *(unsigned int *)(v4 + 24), *(unsigned int *)(v4 + 24), 1);
    *(_DWORD *)(v4 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = result;
    *(void *)(v4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v9;
  }
  unsigned int v7 = *(_DWORD *)(v4 + 44);
  if (v5 > v7) {
    unint64_t result = DgnPrimArray<unsigned int>::reallocElts(v4 + 32, v5 - v7, 0);
  }
  unsigned int v8 = *(_DWORD *)(v4 + 60);
  if (a3 > v8) {
    unint64_t result = DgnPrimArray<short>::reallocElts(v4 + 48, a3 - v8, 0);
  }
  *(_DWORD *)(v4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = a3;
  return result;
}

unint64_t HuffmanDecoder<unsigned short,unsigned int>::addCode(unint64_t result, int a2, char a3, int a4)
{
  unint64_t v7 = result;
  unsigned int v8 = *(_DWORD *)(result + 8);
  if (v8 == *(_DWORD *)(result + 12))
  {
    unint64_t result = DgnPrimArray<unsigned int>::reallocElts(result, 1, 1);
    unsigned int v8 = *(_DWORD *)(v7 + 8);
  }
  *(_DWORD *)(*(void *)v7 + 4 * vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = a2;
  ++*(_DWORD *)(v7 + 8);
  unsigned int v9 = *(_DWORD *)(v7 + 24);
  if (v9 == *(_DWORD *)(v7 + 28))
  {
    unint64_t result = DgnPrimArray<char>::reallocElts(v7 + 16, 1, 1);
    unsigned int v9 = *(_DWORD *)(v7 + 24);
  }
  *(unsigned char *)(*(void *)(v7 + 16) + v9) = a3;
  ++*(_DWORD *)(v7 + 24);
  unsigned int v10 = *(_DWORD *)(v7 + 40);
  if (v10 == *(_DWORD *)(v7 + 44))
  {
    unint64_t result = DgnPrimArray<unsigned int>::reallocElts(v7 + 32, 1, 1);
    unsigned int v10 = *(_DWORD *)(v7 + 40);
  }
  *(_DWORD *)(*(void *)(v7 + 32) + 4 * v10) = a4;
  ++*(_DWORD *)(v7 + 40);
  return result;
}

uint64_t HuffmanEncoder<unsigned short,unsigned int>::countsToLengths(uint64_t a1, uint64_t a2)
{
  HuffmanEncoder<unsigned short,unsigned int>::sortElements(a1);
  unsigned int v4 = *(_DWORD *)(a1 + 128);
  unint64_t v5 = *(void **)(a1 + 120);
  uint64_t v6 = *v5;
  *(_DWORD *)(*v5 + 4) += *(_DWORD *)(v5[1] + 4);
  uint64_t v7 = v4 - 1;
  if (v7 > 1)
  {
    uint64_t v8 = v5[2];
    unint64_t v9 = 1;
    unsigned int v10 = 3;
    unsigned int v11 = 1;
    while (1)
    {
      uint64_t v12 = v5[v9];
      unsigned int v13 = *(_DWORD *)(v6 + 4);
      if (v10 < v4 && (unsigned int v14 = *(_DWORD *)(v8 + 4), v13 >= v14))
      {
        *(_DWORD *)(v12 + 4) = v14;
        uint64_t v8 = v5[v10++];
      }
      else
      {
        *(_DWORD *)(v12 + 4) = v13;
        *(_DWORD *)(v6 + 4) = v9;
        uint64_t v6 = v5[v11++];
      }
      if (v10 >= v4)
      {
        unsigned int v15 = *(_DWORD *)(v6 + 4);
      }
      else
      {
        if (v9 <= v11 - 1)
        {
          unsigned int v16 = *(_DWORD *)(v8 + 4);
LABEL_14:
          *(_DWORD *)(v12 + 4) += v16;
          uint64_t v8 = v5[v10++];
          goto LABEL_15;
        }
        unsigned int v15 = *(_DWORD *)(v6 + 4);
        unsigned int v16 = *(_DWORD *)(v8 + 4);
        if (v15 >= v16) {
          goto LABEL_14;
        }
      }
      *(_DWORD *)(v12 + 4) += v15;
      *(_DWORD *)(v6 + 4) = v9;
      uint64_t v6 = v5[v11++];
LABEL_15:
      if (v7 == ++v9)
      {
        unsigned int v17 = v4 - 2;
        *(_DWORD *)(v5[v4 - 2] + 4) = 0;
        if ((int)(v4 - 3) >= 0)
        {
          uint64_t v18 = v4 - 3;
          do
          {
            *(_DWORD *)(v5[v18] + 4) = *(_DWORD *)(v5[*(unsigned int *)(v5[v18] + 4)] + 4) + 1;
            --v18;
          }
          while (v18 != -1);
        }
        goto LABEL_21;
      }
    }
  }
  unsigned int v17 = v4 - 2;
  *(_DWORD *)(v5[v4 - 2] + 4) = 0;
LABEL_21:
  if (*(_DWORD *)a1 < 3u)
  {
    unsigned int v21 = 1;
  }
  else
  {
    unsigned int v19 = 2;
    int v20 = 1;
    unsigned int v21 = 1;
    do
    {
      ++v21;
      int v22 = v19 + 1;
      v19 += v20;
      int v20 = v22;
    }
    while (*(_DWORD *)a1 > v19);
  }
  if (v4 >= v21) {
    unsigned int v4 = v21;
  }
  unsigned int v23 = v4 + 1;
  unsigned int v24 = *(_DWORD *)(a2 + 12);
  if (v23 > v24) {
    DgnPrimArray<unsigned int>::reallocElts(a2, v23 - v24, 0);
  }
  uint64_t v25 = 0;
  *(_DWORD *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v23;
  uint64_t v26 = *(void *)a2;
  unsigned int v27 = 1;
  do
  {
    uint64_t v28 = v25;
    if ((v17 & 0x80000000) != 0)
    {
      unsigned int v30 = 0;
    }
    else
    {
      unsigned int v29 = 0;
      unsigned int v30 = v17 + 1;
      while (*(_DWORD *)(*(void *)(*(void *)(a1 + 120) + 8 * v17) + 4) == v25)
      {
        ++v29;
        --v17;
        if (v30 == v29)
        {
          unsigned int v17 = -1;
          goto LABEL_38;
        }
      }
      unsigned int v30 = v29;
    }
LABEL_38:
    *(_DWORD *)(v26 + 4 * v25) = v27 - v30;
    if (v27 > v30)
    {
      uint64_t v31 = *(void *)(a1 + 120);
      do
      {
        *(_DWORD *)(*(void *)(v31 + 8 * v7) + 4) = v25;
        LODWORD(v7) = v7 - 1;
        --v27;
      }
      while (v27 > v30);
    }
    unsigned int v27 = 2 * v30;
    uint64_t v25 = (v25 + 1);
  }
  while (2 * v30);
  unsigned int v32 = *(_DWORD *)(a2 + 12);
  if (v25 > v32) {
    DgnPrimArray<unsigned int>::reallocElts(a2, v25 - v32, 0);
  }
  *(_DWORD *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v25;
  return v28;
}

uint64_t Hash<unsigned short,unsigned short,HuffmanSymbol<unsigned short,unsigned int>,HuffmanSymbol<unsigned short,unsigned int>*>::Hash(uint64_t a1, const char *a2, int a3)
{
  HashBase::HashBase((HashBase *)a1, a2);
  *(void *)uint64_t v5 = &unk_26C4E47B8;
  *(_OWORD *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = 0u;
  *(_OWORD *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = 0u;
  *(_OWORD *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = 0u;
  *(_DWORD *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = 0;
  *(void *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = 0;
  *(_DWORD *)(v5 + HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 88) = 0;
  int v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = 0;
  *(void *)(a1 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 104) = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    int v7 = 14;
  }
  else {
    int v7 = 22;
  }
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = 32;
  *(_DWORD *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v7;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = 0;
  return a1;
}

void sub_213FC1438(_Unwind_Exception *a1)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void Hash<unsigned short,unsigned short,HuffmanSymbol<unsigned short,unsigned int>,HuffmanSymbol<unsigned short,unsigned int>*>::~Hash(uint64_t a1)
{
  Hash<unsigned short,unsigned short,HuffmanSymbol<unsigned short,unsigned int>,HuffmanSymbol<unsigned short,unsigned int>*>::~Hash(a1);

  JUMPOUT(0x216698730);
}

uint64_t Hash<unsigned short,unsigned short,HuffmanSymbol<unsigned short,unsigned int>,HuffmanSymbol<unsigned short,unsigned int>*>::~Hash(uint64_t a1)
{
  *(void *)a1 = &unk_26C4E47B8;
  if (*(_DWORD *)(a1 + 8)) {
    Hash<unsigned int,unsigned int,WordIdScope,unsigned int>::removeAll(a1);
  }
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));

  return MrecInitModule_sdpres_sdapi();
}

uint64_t HuffmanEncoder<unsigned short,unsigned int>::~HuffmanEncoder(uint64_t a1)
{
  return a1;
}

uint64_t DiskNgramContext::operator=(uint64_t result, uint64_t a2)
{
  *(void *)unint64_t result = *(void *)a2;
  *(_OWORD *)(result + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(result + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = *(void *)(a2 + 24);
  *(_WORD *)(result + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = *(_WORD *)(a2 + 32);
  *(unsigned char *)(result + 34) = *(unsigned char *)(a2 + 34);
  int v2 = *(unsigned __int8 *)(a2 + 34);
  if (v2 == 4 || v2 == 3)
  {
    *(_DWORD *)(result + 36) = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(result + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(result + 44) = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(result + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = *(_DWORD *)(a2 + 48);
  }
  else if (v2 == 2)
  {
    *(_DWORD *)(result + 36) = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(result + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(result + 44) = *(_DWORD *)(a2 + 44);
  }
  return result;
}

uint64_t Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::Hash(uint64_t a1, const char *a2, int a3)
{
  HashBase::HashBase((HashBase *)a1, a2);
  *(void *)uint64_t v5 = &unk_26C4E4628;
  *(_OWORD *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = 0u;
  *(_OWORD *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = 0u;
  *(_OWORD *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = 0u;
  *(_DWORD *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = 0;
  *(void *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = 0;
  *(_DWORD *)(v5 + HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 88) = 0;
  int v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = 0;
  *(void *)(a1 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 104) = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    int v7 = 28;
  }
  else {
    int v7 = 32;
  }
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = 32;
  *(_DWORD *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v7;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = 0;
  return a1;
}

void sub_213FC167C(_Unwind_Exception *a1)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::~Hash(uint64_t a1)
{
  Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::~Hash(a1);

  JUMPOUT(0x216698730);
}

uint64_t Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::~Hash(uint64_t a1)
{
  *(void *)a1 = &unk_26C4E4628;
  if (*(_DWORD *)(a1 + 8)) {
    Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::removeAll(a1);
  }
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));

  return MrecInitModule_sdpres_sdapi();
}

uint64_t Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::removeAll(uint64_t result)
{
  uint64_t v1 = result;
  unint64_t v2 = *(unsigned int *)(result + 88);
  if (v2)
  {
    for (unint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = *(void *)(v1 + 80);
      uint64_t v5 = *(char **)(v4 + 8 * i);
      if (v5)
      {
        do
        {
          int v6 = *(char **)v5;
          int v7 = *(uint64_t (**)(char *))(v1 + 96);
          if (v7) {
            unint64_t result = v7(v5 + 12);
          }
          uint64_t v8 = *(uint64_t (**)(char *))(v1 + 104);
          if (v8) {
            unint64_t result = v8(v5 + 28);
          }
          *(void *)uint64_t v5 = *(void *)(v1 + 32);
          *(void *)(v1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v5;
          uint64_t v5 = v6;
        }
        while (v6);
        uint64_t v4 = *(void *)(v1 + 80);
        unint64_t v2 = *(unsigned int *)(v1 + 88);
      }
      *(void *)(v4 + 8 * i) = 0;
    }
  }
  *(_DWORD *)(v1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  return result;
}

uint64_t Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::findBucket(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *a2;
  if (v2)
  {
    int v3 = 0;
    uint64_t v4 = v2 - 1;
    do
    {
      HIDWORD(v5) = v3;
      LODWORD(v5) = v3;
      int v3 = a2[v4 + 1] + (v5 >> 19);
    }
    while ((unint64_t)v4--);
  }
  else
  {
    int v3 = 0;
  }
  int v7 = *(_DWORD *)(a1 + 16);
  if (v7) {
    unsigned int v8 = (-1640531527 * v3) >> -(char)v7;
  }
  else {
    unsigned int v8 = 0;
  }
  uint64_t v9 = *(void *)(a1 + 80) + 8 * v8;
  uint64_t v10 = *(void *)v9;
  if (!*(void *)v9) {
    return v9;
  }
  while (1)
  {
    uint64_t result = v9;
    uint64_t v9 = v10;
    if (*(_DWORD *)(v10 + 8) == v3)
    {
      unint64_t v12 = *(unsigned int *)(v10 + 12);
      if (!v12) {
        return result;
      }
      if (*(_DWORD *)(v9 + 16) == a2[1]) {
        break;
      }
    }
LABEL_17:
    uint64_t v10 = *(void *)v9;
    uint64_t result = v9;
    if (!*(void *)v9) {
      return result;
    }
  }
  unint64_t v13 = 0;
  while (v12 - 1 != v13)
  {
    int v14 = *(_DWORD *)(v9 + 20 + 4 * v13);
    unsigned int v15 = a2[v13++ + 2];
    if (v14 != v15)
    {
      if (v13 >= v12) {
        return result;
      }
      goto LABEL_17;
    }
  }
  return result;
}

uint64_t Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,double>::Hash(uint64_t a1, const char *a2, int a3)
{
  HashBase::HashBase((HashBase *)a1, a2);
  *(void *)uint64_t v5 = &unk_26C4E45D8;
  *(_OWORD *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = 0u;
  *(_OWORD *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = 0u;
  *(_OWORD *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = 0u;
  *(_DWORD *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = 0;
  *(void *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = 0;
  *(_DWORD *)(v5 + HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 88) = 0;
  int v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = 0;
  *(void *)(a1 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 104) = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    int v7 = 32;
  }
  else {
    int v7 = 36;
  }
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = 48;
  *(_DWORD *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v7;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = 0;
  return a1;
}

void sub_213FC197C(_Unwind_Exception *a1)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,double>::~Hash(uint64_t a1)
{
  Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,double>::~Hash(a1);

  JUMPOUT(0x216698730);
}

uint64_t Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,double>::~Hash(uint64_t a1)
{
  *(void *)a1 = &unk_26C4E45D8;
  if (*(_DWORD *)(a1 + 8)) {
    Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,double>::removeAll(a1);
  }
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));

  return MrecInitModule_sdpres_sdapi();
}

uint64_t Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,double>::removeAll(uint64_t result)
{
  uint64_t v1 = result;
  unint64_t v2 = *(unsigned int *)(result + 88);
  if (v2)
  {
    for (unint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = *(void *)(v1 + 80);
      uint64_t v5 = *(char **)(v4 + 8 * i);
      if (v5)
      {
        do
        {
          int v6 = *(char **)v5;
          int v7 = *(uint64_t (**)(char *))(v1 + 96);
          if (v7) {
            uint64_t result = v7(v5 + 12);
          }
          unsigned int v8 = *(uint64_t (**)(void *))(v1 + 104);
          if (v8) {
            uint64_t result = v8((void *)v5 + 4);
          }
          *(void *)uint64_t v5 = *(void *)(v1 + 32);
          *(void *)(v1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v5;
          uint64_t v5 = v6;
        }
        while (v6);
        uint64_t v4 = *(void *)(v1 + 80);
        unint64_t v2 = *(unsigned int *)(v1 + 88);
      }
      *(void *)(v4 + 8 * i) = 0;
    }
  }
  *(_DWORD *)(v1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  return result;
}

uint64_t Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,unsigned int>::Hash(uint64_t a1, const char *a2, int a3)
{
  HashBase::HashBase((HashBase *)a1, a2);
  *(void *)uint64_t v5 = &unk_26C4E4600;
  *(_OWORD *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = 0u;
  *(_OWORD *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = 0u;
  *(_OWORD *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = 0u;
  *(_DWORD *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = 0;
  *(void *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = 0;
  *(_DWORD *)(v5 + HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 88) = 0;
  int v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = 0;
  *(void *)(a1 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 104) = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    int v7 = 28;
  }
  else {
    int v7 = 32;
  }
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = 32;
  *(_DWORD *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v7;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = 0;
  return a1;
}

void sub_213FC1B98(_Unwind_Exception *a1)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,unsigned int>::~Hash(uint64_t a1)
{
  Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,unsigned int>::~Hash(a1);

  JUMPOUT(0x216698730);
}

uint64_t Hash<BuildLmIdNgram,BuildLmIdNgram,BuildLmIdNgram,unsigned int>::~Hash(uint64_t a1)
{
  *(void *)a1 = &unk_26C4E4600;
  if (*(_DWORD *)(a1 + 8)) {
    Hash<BuildWordIdNgram,BuildWordIdNgram,BuildWordIdNgram,unsigned int>::removeAll(a1);
  }
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));

  return MrecInitModule_sdpres_sdapi();
}

uint64_t MiniFst::init(uint64_t this, const ArcGraph *a2, PelScoreCache *a3)
{
  uint64_t v3 = this;
  *(void *)(this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = a2;
  *(void *)(this + HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 88) = a3;
  uint64_t v4 = *((unsigned int *)a2 + 40);
  unsigned int v5 = v4 + 1;
  unsigned int v6 = *(_DWORD *)(this + 44);
  if ((int)v4 + 1 > v6) {
    this = DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(this + 32, v4 + 1 - v6, 0);
  }
  *(_DWORD *)(v3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = v5;
  unsigned int v7 = *(_DWORD *)(v3 + 60);
  if (v5 > v7) {
    this = DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(v3 + 48, v5 - v7, 0);
  }
  *(_DWORD *)(v3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = v5;
  *(_DWORD *)(v3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = 1;
  unsigned int v8 = *(_DWORD *)(v3 + 76);
  if (v4 > v8)
  {
    DgnPrimArray<unsigned int>::reallocElts(v3 + 64, v4 - v8, 0);
    *(_DWORD *)(v3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = v4;
LABEL_8:
    this = (uint64_t)memset(*(void **)(v3 + 64), 255, 4 * v4);
    goto LABEL_9;
  }
  *(_DWORD *)(v3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = v4;
  if (v4) {
    goto LABEL_8;
  }
LABEL_9:
  *(_DWORD *)(v3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = 0;
  return this;
}

uint64_t MiniFst::beginTopFstSyncRecog(uint64_t this)
{
  *(_DWORD *)(this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = 0;
  **(_DWORD **)(this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 5000;
  return this;
}

uint64_t MiniFst::seed(uint64_t this, int a2, int a3, int a4, int a5)
{
  uint64_t v5 = *(void *)(this + 32);
  if (*(_DWORD *)v5 > a2)
  {
    *(_DWORD *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = -2 - a4;
    *(_WORD *)(v5 + 12) = 0;
    int v6 = *(_DWORD *)(*(void *)(this + 80) + 144);
    *(_DWORD *)uint64_t v5 = a2;
    *(_DWORD *)(v5 + 4) = v6;
    *(_DWORD *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
    *(_DWORD *)(v5 + 20) = a3;
    *(_DWORD *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = a5;
    if (!*(_DWORD *)(this + 96)) {
      *(_DWORD *)(this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = 1;
    }
  }
  return this;
}

char *MiniFst::updateFrame(char *this, int *a2, int a3, int a4)
{
  *((_DWORD *)this + 26) = -1;
  unsigned int v4 = *((_DWORD *)this + 24);
  if (!v4) {
    return this;
  }
  uint64_t v5 = (uint64_t)this;
  *((_DWORD *)this + 25) = a4;
  int v6 = **((_DWORD **)this + 4);
  if (v4 <= (v6 > 4999))
  {
    LODWORD(v10) = 1;
    goto LABEL_55;
  }
  int v7 = a3;
  unint64_t v9 = v6 > 4999;
  uint64_t v10 = 1;
  do
  {
    uint64_t v11 = *(void *)(v5 + 32);
    uint64_t v12 = *(unsigned int *)(v11 + 28 * v9 + 4);
    if (*(_DWORD *)(*(void *)(v5 + 80) + 140) > (int)v12)
    {
      this = (char *)PelScoreCache::getScoreNoBackoff(*(PelScoreCache **)(v5 + 88), *(unsigned __int16 *)(v11 + 28 * v9 + 12));
      uint64_t v13 = *(void *)(v5 + 32) + 28 * v9;
      int v14 = *(_DWORD *)v13 + this;
      if (v14 - v7 <= *a2)
      {
        if (*a2 > v14) {
          *a2 = v14;
        }
        uint64_t v15 = *(void *)(v5 + 64);
        unsigned int v16 = *(_DWORD *)(v15 + 4 * v12);
        uint64_t v17 = *(void *)(v5 + 48);
        if (v16 == -1)
        {
          *(_DWORD *)(v15 + 4 * v12) = v10;
          if (!v17)
          {
            uint64_t v10 = (v10 + 1);
            int v7 = a3;
            goto LABEL_16;
          }
          uint64_t v18 = v17 + 28 * v10;
          uint64_t v10 = (v10 + 1);
          int v7 = a3;
        }
        else
        {
          uint64_t v18 = v17 + 28 * v16;
          int v7 = a3;
          if (v14 >= *(_DWORD *)v18) {
            goto LABEL_16;
          }
        }
        long long v19 = *(_OWORD *)(v13 + 12);
        *(_OWORD *)uint64_t v18 = *(_OWORD *)v13;
        *(_OWORD *)(v18 + 12) = v19;
        *(_DWORD *)uint64_t v18 = v14;
        goto LABEL_16;
      }
      int v7 = a3;
    }
    do
    {
LABEL_16:
      uint64_t v20 = *(void *)(v5 + 80);
      uint64_t v21 = *(void *)(v20 + 152);
      unsigned int v22 = *(_DWORD *)(v21 + 4 * v12);
      LODWORD(v21) = *(_DWORD *)(v21 + 4 * (v12 + 1));
      uint64_t v23 = v21 & 0xFFFFFFF;
      if (*(_DWORD *)(v20 + 140) > (v21 & 0xFFFFFFF))
      {
        int v24 = (v22 >> 20) & 0x3FF;
        this = (char *)PelScoreCache::getScoreNoBackoff(*(PelScoreCache **)(v5 + 88), (unsigned __int16)v22);
        uint64_t v25 = *(void *)(v5 + 32);
        int v26 = this + v24 + *(_DWORD *)(v25 + 28 * v9);
        if (v26 - v7 <= *a2)
        {
          if (*a2 > v26) {
            *a2 = v26;
          }
          uint64_t v27 = *(void *)(v5 + 64);
          unsigned int v28 = *(_DWORD *)(v27 + 4 * v23);
          uint64_t v29 = *(void *)(v5 + 48);
          if (v28 == -1)
          {
            *(_DWORD *)(v27 + 4 * v23) = v10;
            if (v29)
            {
              uint64_t v30 = v29 + 28 * v10;
              uint64_t v10 = (v10 + 1);
LABEL_25:
              *(_DWORD *)uint64_t v30 = v26;
              *(_DWORD *)(v30 + 4) = v23;
              uint64_t v31 = v25 + 28 * v9;
              *(_DWORD *)(v30 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *(_DWORD *)(v31 + 8);
              *(_WORD *)(v30 + 12) = v22;
              *(_DWORD *)(v30 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = *(_DWORD *)(v31 + 16) + v24;
              *(void *)(v30 + 20) = *(void *)(v31 + 20);
              goto LABEL_27;
            }
            uint64_t v10 = (v10 + 1);
          }
          else
          {
            uint64_t v30 = v29 + 28 * v28;
            if (v26 < *(_DWORD *)v30) {
              goto LABEL_25;
            }
          }
        }
      }
LABEL_27:
      LODWORD(v12) = v12 + 2;
    }
    while ((v22 & 0x80000000) == 0);
    ++v9;
  }
  while (v9 < *(unsigned int *)(v5 + 96));
  if (v10 >= 2)
  {
    uint64_t v32 = *(void *)(v5 + 48);
    uint64_t v33 = *(void *)(v5 + 80);
    uint64_t v34 = 1;
    while (1)
    {
      uint64_t v35 = *(unsigned int *)(v32 + 28 * v34 + 4);
      if ((*(_DWORD *)(*(void *)(v33 + 152) + 4 * v35) & 0x40000000) != 0) {
        break;
      }
LABEL_32:
      if (++v34 >= (unint64_t)v10)
      {
        if (v10 >= 2)
        {
          uint64_t v70 = 0;
          do
          {
            uint64_t v71 = *(void *)(v5 + 48) + v70;
            uint64_t v72 = *(unsigned int *)(v71 + 32);
            uint64_t v73 = *(void *)(v5 + 32) + v70;
            long long v74 = *(_OWORD *)(v71 + 28);
            *(_OWORD *)(v73 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = *(_OWORD *)(v71 + 40);
            *(_OWORD *)(v73 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v74;
            *(_DWORD *)(*(void *)(v5 + 64) + 4 * vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = -1;
            v70 += 28;
          }
          while (28 * v10 - 28 != v70);
        }
        goto LABEL_55;
      }
    }
    while (2)
    {
      uint64_t v36 = *(void *)(v33 + 152);
      unsigned int v37 = *(_DWORD *)(v36 + 4 * v35);
      uint64_t v38 = *(_DWORD *)(v36 + 4 * (v35 + 1)) & 0xFFFFFFF;
      if (*(_DWORD *)(v33 + 140) <= (int)v38)
      {
        int v39 = v7;
        uint64_t v40 = v10;
        int v41 = (v37 >> 20) & 0x3FF;
        int v42 = *(_DWORD *)(v32 + 28 * v34) + v41;
        if ((v37 & 0xFFFFF) <= 0xFFFF3) {
          int v43 = v37 & 0xFFFFF;
        }
        else {
          int v43 = v37 & 0xFFFFF | 0xF00000;
        }
        if (v42 - v39 > *a2) {
          goto LABEL_49;
        }
        if (*a2 > v42) {
          *a2 = v42;
        }
        unsigned int v44 = *(_DWORD *)(v5 + 8);
        if (v44 == *(_DWORD *)(v5 + 12))
        {
          this = (char *)DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts(v5, 1, 1);
          unsigned int v44 = *(_DWORD *)(v5 + 8);
        }
        *(_DWORD *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v44 + 1;
        uint64_t v45 = *(void *)v5;
        if (*(_DWORD *)(v5 + 104) == -1) {
          *(_DWORD *)(v5 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 104) = v44 + 1;
        }
        unsigned int v46 = v44;
        uint64_t v47 = v45 + 36 * v44;
        uint64_t v48 = (_OWORD *)(*(void *)(v5 + 48) + 28 * v34);
        long long v49 = *(_OWORD *)((char *)v48 + 12);
        *(_OWORD *)uint64_t v47 = *v48;
        *(_OWORD *)(v47 + 12) = v49;
        *(_DWORD *)uint64_t v47 = v42;
        int v50 = *(_DWORD *)(v47 + 16) + v41;
        uint64_t v32 = *(void *)(v5 + 48);
        int v51 = v43 + 2 * *(_DWORD *)(v32 + 28 * v34 + 20);
        *(_DWORD *)(v47 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v50;
        *(_DWORD *)(v47 + 20) = v51;
        uint64_t v52 = v45 + 36 * v46;
        int v53 = *(_DWORD *)(v5 + 100);
        *(_DWORD *)(v52 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v43;
        *(_DWORD *)(v52 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v53;
        uint64_t v33 = *(void *)(v5 + 80);
        if (*(_DWORD *)(v33 + 160) == v38) {
          goto LABEL_49;
        }
        uint64_t v54 = *(void *)(v5 + 64);
        unsigned int v55 = *(_DWORD *)(v54 + 4 * v38);
        if (v55 == -1)
        {
          *(_DWORD *)(v54 + 4 * v3DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v40;
          char v56 = (int *)(v32 + 28 * v40);
          uint64_t v10 = (v40 + 1);
          int v50 = *(_DWORD *)(v47 + 16);
          int v51 = *(_DWORD *)(v47 + 20);
LABEL_53:
          int v7 = a3;
          int *v56 = v42;
          v56[1] = v38;
          v56[2] = *(_DWORD *)(v5 + 8) - 1;
          v56[4] = v50;
          v56[5] = v51;
          v56[6] = *(_DWORD *)(v32 + 28 * v34 + 24);
        }
        else
        {
          char v56 = (int *)(v32 + 28 * v55);
          if (v42 < *v56)
          {
            uint64_t v10 = v40;
            goto LABEL_53;
          }
LABEL_49:
          uint64_t v10 = v40;
          int v7 = a3;
        }
      }
      LODWORD(v35) = v35 + 2;
      if ((v37 & 0x80000000) != 0) {
        goto LABEL_32;
      }
      continue;
    }
  }
LABEL_55:
  *(_DWORD *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = v10;
  int v57 = *(_DWORD *)(*(void *)(v5 + 80) + 144);
  uint64_t v58 = *(_DWORD **)(v5 + 32);
  _DWORD *v58 = 5000;
  v58[1] = v57;
  int v59 = *(_DWORD *)(v5 + 104);
  if (v59 != -1)
  {
    int v60 = *(_DWORD *)(v5 + 8);
    uint64_t v61 = (v60 - v59);
    unsigned int v62 = *(_DWORD *)(v5 + 28);
    if (v61 > v62) {
      DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts(v5 + 16, v61 - v62, 0);
    }
    *(_DWORD *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = v61;
    if (v60 != v59)
    {
      uint64_t v63 = 0;
      uint64_t v64 = 0;
      do
      {
        uint64_t v65 = *(void *)v5 + 36 * (v64 + *(_DWORD *)(v5 + 104));
        uint64_t v66 = *(void *)(v5 + 16) + v63;
        long long v67 = *(_OWORD *)v65;
        long long v68 = *(_OWORD *)(v65 + 16);
        *(_DWORD *)(v66 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = *(_DWORD *)(v65 + 32);
        *(_OWORD *)uint64_t v66 = v67;
        *(_OWORD *)(v66 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v68;
        ++v64;
        v63 += 36;
      }
      while (v61 != v64);
      LODWORD(v61) = *(_DWORD *)(v5 + 24);
    }
    char v69 = *(char **)(v5 + 16);
    return mrec_qsort_r<MiniFst::Trace>(v69, v61, 36);
  }
  return this;
}

char *mrec_qsort_r<MiniFst::Trace>(char *result, unint64_t a2, int64_t a3)
{
  int64_t v4 = -a3;
  BOOL v5 = a3 != 8;
  BOOL v6 = ((result | a3) & 7) == 0;
  if (((result | a3) & 7) != 0) {
    int v7 = 2;
  }
  else {
    int v7 = a3 != 8;
  }
  if (a2 < 7)
  {
LABEL_167:
    if ((uint64_t)(a2 * a3) > a3)
    {
      unsigned int v94 = &result[a2 * a3];
      unsigned int v95 = &result[a3];
      unsigned int v96 = result;
      do
      {
        if (v95 > result)
        {
          uint64_t v97 = v96;
          uint64_t v98 = v95;
          do
          {
            uint64_t v99 = v98;
            uint64_t v98 = (_DWORD *)((char *)v98 + v4);
            int v100 = v98[8];
            int v101 = v99[8];
            if (v100 == v101)
            {
              if (*v98 <= *v99) {
                break;
              }
            }
            else if (v100 < v101)
            {
              break;
            }
            if (v7)
            {
              uint64_t v102 = 0;
              uint64_t v103 = (uint64_t)v97 + a3;
              if (v6)
              {
                do
                {
                  uint64_t v104 = *(void *)(v103 + 8 * v102);
                  *(void *)(v103 + 8 * v102) = *(void *)&v97[2 * v102];
                  *(void *)&v97[2 * v102++] = v104;
                }
                while ((unint64_t)a3 >> 3 != v102);
              }
              else
              {
                do
                {
                  char v105 = *(unsigned char *)(v103 + v102);
                  *(unsigned char *)(v103 + v102) = *((unsigned char *)v97 + v102);
                  *((unsigned char *)v97 + v102++) = v105;
                }
                while (a3 != v102);
              }
            }
            else
            {
              uint64_t v106 = *(void *)v99;
              *(void *)uint64_t v99 = *(void *)v98;
              *(void *)uint64_t v98 = v106;
            }
            uint64_t v97 = (_DWORD *)((char *)v97 + v4);
          }
          while (v98 > (_DWORD *)result);
        }
        v95 += a3;
        unsigned int v96 = (_DWORD *)((char *)v96 + a3);
      }
      while (v95 < v94);
    }
    return result;
  }
  unint64_t v8 = (unint64_t)a3 >> 3;
  while (2)
  {
    unint64_t v9 = &result[(a2 >> 1) * a3];
    if (a2 == 7) {
      goto LABEL_93;
    }
    uint64_t v10 = &result[(a2 - 1) * a3];
    if (a2 < 0x29)
    {
      uint64_t v12 = result;
LABEL_19:
      long long v19 = &result[(a2 - 1) * a3];
      goto LABEL_72;
    }
    unint64_t v11 = (a2 >> 3) * a3;
    uint64_t v12 = &result[v11];
    uint64_t v13 = &result[2 * v11];
    int v14 = *((_DWORD *)result + 8);
    int v15 = *(_DWORD *)&result[v11 + 32];
    BOOL v16 = v14 < v15;
    if (v14 == v15) {
      BOOL v16 = *(_DWORD *)result < *(_DWORD *)v12;
    }
    if (!v16)
    {
      int v20 = *((_DWORD *)v13 + 8);
      if (v15 == v20)
      {
        if (*(_DWORD *)v12 > *(_DWORD *)v13) {
          goto LABEL_31;
        }
      }
      else if (v15 >= v20)
      {
        goto LABEL_31;
      }
      if (v14 == v20)
      {
        uint64_t v12 = result;
        if (*(_DWORD *)result < *(_DWORD *)v13) {
          goto LABEL_31;
        }
      }
      else
      {
        uint64_t v12 = result;
        if (v14 < v20) {
          goto LABEL_31;
        }
      }
      uint64_t v12 = &result[2 * v11];
      goto LABEL_31;
    }
    int v17 = *((_DWORD *)v13 + 8);
    BOOL v18 = v15 < v17;
    if (v15 == v17) {
      BOOL v18 = *(_DWORD *)v12 < *(_DWORD *)v13;
    }
    if (!v18)
    {
      if (v14 == v17)
      {
        uint64_t v12 = &result[2 * v11];
        if (*(_DWORD *)result < *(_DWORD *)v13) {
          goto LABEL_31;
        }
      }
      else
      {
        uint64_t v12 = &result[2 * v11];
        if (v14 < v17) {
          goto LABEL_31;
        }
      }
      uint64_t v12 = result;
    }
LABEL_31:
    uint64_t v21 = &v9[-v11];
    unsigned int v22 = &v9[v11];
    int v23 = *(_DWORD *)&v9[-v11 + 32];
    int v24 = *((_DWORD *)v9 + 8);
    BOOL v25 = v23 < v24;
    if (v23 == v24) {
      BOOL v25 = *(_DWORD *)v21 < *(_DWORD *)v9;
    }
    if (!v25)
    {
      int v28 = *((_DWORD *)v22 + 8);
      if (v24 == v28)
      {
        if (*(_DWORD *)v9 > *(_DWORD *)v22) {
          goto LABEL_52;
        }
      }
      else if (v24 >= v28)
      {
        goto LABEL_52;
      }
      if (v23 == v28)
      {
        v9 -= v11;
        if (*(_DWORD *)v21 < *(_DWORD *)v22) {
          goto LABEL_52;
        }
      }
      else
      {
        v9 -= v11;
        if (v23 < v28) {
          goto LABEL_52;
        }
      }
      unint64_t v9 = v22;
      goto LABEL_52;
    }
    int v26 = *((_DWORD *)v22 + 8);
    BOOL v27 = v24 < v26;
    if (v24 == v26) {
      BOOL v27 = *(_DWORD *)v9 < *(_DWORD *)v22;
    }
    if (!v27)
    {
      if (v23 == v26)
      {
        v9 += v11;
        if (*(_DWORD *)v21 < *(_DWORD *)v22) {
          goto LABEL_52;
        }
      }
      else
      {
        v9 += v11;
        if (v23 < v26) {
          goto LABEL_52;
        }
      }
      unint64_t v9 = v21;
    }
LABEL_52:
    uint64_t v29 = -(uint64_t)v11;
    long long v19 = &v10[-2 * v11];
    uint64_t v30 = &v10[v29];
    int v31 = *((_DWORD *)v19 + 8);
    int v32 = *((_DWORD *)v30 + 8);
    BOOL v33 = v31 < v32;
    if (v31 == v32) {
      BOOL v33 = *(_DWORD *)v19 < *(_DWORD *)v30;
    }
    if (v33)
    {
      int v34 = *((_DWORD *)v10 + 8);
      BOOL v35 = v32 < v34;
      if (v32 == v34) {
        BOOL v35 = *(_DWORD *)v30 < *(_DWORD *)v10;
      }
      if (!v35)
      {
        BOOL v36 = v31 < v34;
        if (v31 == v34) {
          BOOL v36 = *(_DWORD *)v19 < *(_DWORD *)v10;
        }
        if (v36) {
          goto LABEL_19;
        }
        goto LABEL_72;
      }
      goto LABEL_71;
    }
    int v37 = *((_DWORD *)v10 + 8);
    if (v32 == v37)
    {
      if (*(_DWORD *)v30 <= *(_DWORD *)v10) {
        goto LABEL_65;
      }
LABEL_71:
      long long v19 = v30;
      goto LABEL_72;
    }
    if (v32 >= v37) {
      goto LABEL_71;
    }
LABEL_65:
    BOOL v38 = v31 < v37;
    if (v31 == v37) {
      BOOL v38 = *(_DWORD *)v19 < *(_DWORD *)v10;
    }
    if (!v38) {
      goto LABEL_19;
    }
LABEL_72:
    int v39 = *((_DWORD *)v12 + 8);
    int v40 = *((_DWORD *)v9 + 8);
    BOOL v41 = v39 < v40;
    if (v39 == v40) {
      BOOL v41 = *(_DWORD *)v12 < *(_DWORD *)v9;
    }
    if (v41)
    {
      int v42 = *((_DWORD *)v19 + 8);
      BOOL v43 = v40 < v42;
      if (v40 == v42) {
        BOOL v43 = *(_DWORD *)v9 < *(_DWORD *)v19;
      }
      if (v43) {
        goto LABEL_93;
      }
      if (v39 == v42)
      {
        unint64_t v9 = v19;
        if (*(_DWORD *)v12 < *(_DWORD *)v19) {
          goto LABEL_93;
        }
      }
      else
      {
        unint64_t v9 = v19;
        if (v39 < v42) {
          goto LABEL_93;
        }
      }
      unint64_t v9 = v12;
      goto LABEL_93;
    }
    int v44 = *((_DWORD *)v19 + 8);
    if (v40 == v44)
    {
      if (*(_DWORD *)v9 > *(_DWORD *)v19) {
        goto LABEL_93;
      }
    }
    else if (v40 >= v44)
    {
      goto LABEL_93;
    }
    if (v39 == v44)
    {
      unint64_t v9 = v12;
      if (*(_DWORD *)v12 < *(_DWORD *)v19) {
        goto LABEL_93;
      }
      goto LABEL_92;
    }
    unint64_t v9 = v12;
    if (v39 >= v44) {
LABEL_92:
    }
      unint64_t v9 = v19;
LABEL_93:
    if (v7)
    {
      if (v6)
      {
        uint64_t v45 = result;
        unint64_t v46 = (unint64_t)a3 >> 3;
        do
        {
          uint64_t v47 = *(void *)v45;
          *(void *)uint64_t v45 = *(void *)v9;
          v45 += 8;
          *(void *)unint64_t v9 = v47;
          v9 += 8;
          --v46;
        }
        while (v46);
      }
      else
      {
        int64_t v49 = a3;
        int v50 = result;
        do
        {
          char v51 = *v50;
          *v50++ = *v9;
          *v9++ = v51;
          --v49;
        }
        while (v49);
      }
    }
    else
    {
      uint64_t v48 = *(void *)result;
      *(void *)uint64_t result = *(void *)v9;
      *(void *)unint64_t v9 = v48;
    }
    int v52 = 0;
    int v53 = &result[a3];
    uint64_t v54 = &result[(a2 - 1) * a3];
    unsigned int v55 = v54;
    char v56 = &result[a3];
    int v57 = &result[a3];
    while (1)
    {
LABEL_102:
      if (v56 > v55) {
        goto LABEL_116;
      }
      int v58 = *((_DWORD *)v56 + 8);
      int v59 = *((_DWORD *)result + 8);
      BOOL v60 = v58 < v59;
      if (v58 != v59) {
        break;
      }
      BOOL v60 = *(_DWORD *)v56 < *(_DWORD *)result;
      if (*(_DWORD *)v56 != *(_DWORD *)result) {
        break;
      }
      if (v7)
      {
        uint64_t v61 = 0;
        if (v6)
        {
          do
          {
            uint64_t v62 = *(void *)&v57[8 * v61];
            *(void *)&v57[8 * v61] = *(void *)&v56[8 * v61];
            *(void *)&v56[8 * v61++] = v62;
          }
          while (v8 != v61);
        }
        else
        {
          do
          {
            char v63 = v57[v61];
            v57[v61] = v56[v61];
            v56[v61++] = v63;
          }
          while (a3 != v61);
        }
      }
      else
      {
        uint64_t v74 = *(void *)v57;
        *(void *)int v57 = *(void *)v56;
        *(void *)char v56 = v74;
      }
      v57 += a3;
      int v52 = 1;
LABEL_135:
      v56 += a3;
    }
    if (v60) {
      goto LABEL_135;
    }
LABEL_116:
    while (v56 <= v55)
    {
      int v65 = *((_DWORD *)v55 + 8);
      int v66 = *((_DWORD *)result + 8);
      BOOL v67 = v65 < v66;
      if (v65 == v66 && (BOOL v67 = *(_DWORD *)v55 < *(_DWORD *)result, *(_DWORD *)v55 == *(_DWORD *)result))
      {
        if (v7)
        {
          uint64_t v68 = 0;
          if (v6)
          {
            do
            {
              uint64_t v69 = *(void *)&v55[8 * v68];
              *(void *)&v55[8 * v68] = *(void *)&v54[8 * v68];
              *(void *)&v54[8 * v68++] = v69;
            }
            while (v8 != v68);
          }
          else
          {
            do
            {
              char v70 = v55[v68];
              v55[v68] = v54[v68];
              v54[v68++] = v70;
            }
            while (a3 != v68);
          }
        }
        else
        {
          uint64_t v64 = *(void *)v55;
          *(void *)unsigned int v55 = *(void *)v54;
          *(void *)uint64_t v54 = v64;
        }
        v54 += v4;
        int v52 = 1;
      }
      else if (v67)
      {
        if (v7)
        {
          uint64_t v71 = 0;
          if (v6)
          {
            do
            {
              uint64_t v72 = *(void *)&v56[8 * v71];
              *(void *)&v56[8 * v71] = *(void *)&v55[8 * v71];
              *(void *)&v55[8 * v71++] = v72;
            }
            while (v8 != v71);
          }
          else
          {
            do
            {
              char v73 = v56[v71];
              v56[v71] = v55[v71];
              v55[v71++] = v73;
            }
            while (a3 != v71);
          }
        }
        else
        {
          uint64_t v75 = *(void *)v56;
          *(void *)char v56 = *(void *)v55;
          *(void *)unsigned int v55 = v75;
        }
        v56 += a3;
        v55 += v4;
        int v52 = 1;
        goto LABEL_102;
      }
      v55 += v4;
    }
    uint64_t v76 = &result[a2 * a3];
    if (v52)
    {
      int64_t v77 = v56 - v57;
      if (v57 - result >= v56 - v57) {
        unint64_t v78 = v56 - v57;
      }
      else {
        unint64_t v78 = v57 - result;
      }
      if (v78)
      {
        if (v6)
        {
          unsigned int v79 = &v56[-v78];
          unint64_t v80 = v78 >> 3;
          unsigned int v81 = result;
          do
          {
            uint64_t v82 = *(void *)v81;
            *(void *)unsigned int v81 = *(void *)v79;
            v81 += 8;
            *(void *)unsigned int v79 = v82;
            v79 += 8;
            --v80;
          }
          while (v80);
        }
        else
        {
          uint64_t v83 = -(uint64_t)v78;
          uint64_t v84 = result;
          do
          {
            char v85 = *v84;
            *v84++ = v56[v83];
            v56[v83] = v85;
            BOOL v86 = __CFADD__(v83++, 1);
          }
          while (!v86);
        }
      }
      int64_t v87 = v54 - v55;
      int64_t v88 = v76 - &v54[a3];
      if (v54 - v55 < v88) {
        int64_t v88 = v54 - v55;
      }
      if (v88)
      {
        if (v6)
        {
          uint64_t v89 = &v76[-v88];
          unint64_t v90 = (unint64_t)v88 >> 3;
          do
          {
            uint64_t v91 = *(void *)v56;
            *(void *)char v56 = *(void *)v89;
            v56 += 8;
            *(void *)uint64_t v89 = v91;
            v89 += 8;
            --v90;
          }
          while (v90);
        }
        else
        {
          int64_t v92 = -v88;
          do
          {
            char v93 = *v56;
            *v56++ = v76[v92];
            v76[v92] = v93;
            BOOL v86 = __CFADD__(v92++, 1);
          }
          while (!v86);
        }
      }
      if (v77 > a3) {
        uint64_t result = (char *)mrec_qsort_r<MiniFst::Trace>();
      }
      if (v87 > a3)
      {
        uint64_t result = &v76[-v87];
        a2 = v87 / (unint64_t)a3;
        BOOL v6 = ((((_BYTE)v76 - v87) | a3) & 7) == 0;
        if (((((_BYTE)v76 - v87) | a3) & 7) != 0) {
          int v7 = 2;
        }
        else {
          int v7 = v5;
        }
        if (a2 < 7) {
          goto LABEL_167;
        }
        continue;
      }
    }
    else if ((uint64_t)(a2 * a3) > a3)
    {
      BOOL v107 = result;
      do
      {
        if (v53 > result)
        {
          unsigned int v108 = v107;
          unsigned int v109 = v53;
          do
          {
            unint64_t v110 = v109;
            unsigned int v109 = (_DWORD *)((char *)v109 + v4);
            int v111 = v109[8];
            int v112 = v110[8];
            if (v111 == v112)
            {
              if (*v109 <= *v110) {
                break;
              }
            }
            else if (v111 < v112)
            {
              break;
            }
            if (v7)
            {
              uint64_t v113 = 0;
              uint64_t v114 = (uint64_t)v108 + a3;
              if (v6)
              {
                do
                {
                  uint64_t v115 = *(void *)(v114 + 8 * v113);
                  *(void *)(v114 + 8 * v113) = *(void *)&v108[2 * v113];
                  *(void *)&v108[2 * v113++] = v115;
                }
                while (v8 != v113);
              }
              else
              {
                do
                {
                  char v116 = *(unsigned char *)(v114 + v113);
                  *(unsigned char *)(v114 + v113) = *((unsigned char *)v108 + v113);
                  *((unsigned char *)v108 + v113++) = v116;
                }
                while (a3 != v113);
              }
            }
            else
            {
              uint64_t v117 = *(void *)v110;
              *(void *)unint64_t v110 = *(void *)v109;
              *(void *)unsigned int v109 = v117;
            }
            unsigned int v108 = (_DWORD *)((char *)v108 + v4);
          }
          while (v109 > (_DWORD *)result);
        }
        v53 += a3;
        BOOL v107 = (_DWORD *)((char *)v107 + a3);
      }
      while (v53 < v76);
    }
    return result;
  }
}

uint64_t sizeObject<MiniFst::Trace>(uint64_t a1, int a2)
{
  if (a2 == 3) {
    return 0;
  }
  uint64_t v2 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v2 = 16;
  }
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    int v3 = *(_DWORD *)(a1 + 8);
    uint64_t v4 = 22 * v3;
    if (v3 <= 0) {
      uint64_t v4 = 0;
    }
    v2 += v4;
    if (!a2) {
      v2 += 22 * (*(_DWORD *)(a1 + 12) - v3);
    }
  }
  return v2;
}

uint64_t sizeObject<MiniFst::Token>(uint64_t a1, int a2)
{
  if (a2 == 3) {
    return 0;
  }
  uint64_t v2 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v2 = 16;
  }
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    uint64_t v3 = *(unsigned int *)(a1 + 8);
    uint64_t v4 = 18 * v3;
    if ((int)v3 <= 0) {
      uint64_t v4 = 0;
    }
    v2 += v4;
    if (!a2) {
      v2 += 18 * (*(_DWORD *)(a1 + 12) - v3);
    }
  }
  return v2;
}

uint64_t AcousticNet::AcousticNet(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8)
{
  HmmNet::HmmNet(a1, a2, a3, a4, a5, a8);
  *(void *)uint64_t v11 = &unk_26C4DF360;
  *(_DWORD *)(v11 + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = a6;
  *(_DWORD *)(v11 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 120) = a7;
  PhnIndexSet::PhnIndexSet((PhnIndexSet *)(v11 + 128), 0);
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 144) = 0;
  *(void *)(a1 + 152) = 0xFFFFFFF000000000;
  return a1;
}

void sub_213FC2CF8(_Unwind_Exception *a1)
{
  HmmNet::~HmmNet(v1);
  _Unwind_Resume(a1);
}

void AcousticNet::~AcousticNet(AcousticNet *this)
{
  *(void *)this = &unk_26C4DF360;
  BitArray::~BitArray((AcousticNet *)((char *)this + 128));

  HmmNet::~HmmNet(this);
}

uint64_t AcousticNet::sizeObject(unsigned int *a1, uint64_t a2)
{
  uint64_t v4 = HmmNet::sizeObject(a1, a2);
  uint64_t v5 = PhnIndexSet::sizeObject(a1 + 32, a2);
  uint64_t v6 = 4;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v6 = 8;
  }
  if (a2 == 3) {
    uint64_t v6 = 0;
  }
  return v4 + 16 * (a2 != 3) + v5 + v6;
}

uint64_t AcousticNet::updateSilSeedTime(uint64_t this, int a2, int a3)
{
  int v3 = *(_DWORD *)(this + 152);
  if (v3) {
    BOOL v4 = a2 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (!v4)
  {
    if (v3) {
      int v5 = a3;
    }
    else {
      int v5 = -16;
    }
    *(_DWORD *)(this + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = v5;
  }
  return this;
}

BOOL AcousticNet::hasSilSeedTime(AcousticNet *this)
{
  return *((_DWORD *)this + 39) != -16;
}

uint64_t AcousticNet::getSilSeedTime(AcousticNet *this)
{
  return *((unsigned int *)this + 39);
}

uint64_t AcousticNet::unpackEnd(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 40))(a1))
  {
    return AcousticNet::unpackEndTrace((uint64_t *)a1, a2, a3);
  }
  else
  {
    uint64_t v7 = *(unsigned __int16 *)(*(void *)a2 + 4);
    uint64_t v8 = *(void *)(a1 + 8);
    unint64_t v9 = (unsigned int *)(v8 + 302848);
    uint64_t v10 = *(void *)(v8 + 16);
    uint64_t v11 = *(unsigned __int8 *)(*(void *)(v10 + 16) + v7);
    unsigned int v12 = a2[2];
    unsigned int v13 = *(_DWORD *)(v8 + 302852);
    unsigned int v14 = v12;
    if (v12 > v13)
    {
      DgnPrimArray<unsigned int>::reallocElts(v8 + 302840, v12 - v13, 0);
      unsigned int v14 = a2[2];
      uint64_t v8 = *(void *)(a1 + 8);
    }
    int v15 = (unsigned int *)(v8 + 302864);
    *unint64_t v9 = v12;
    unsigned int v16 = v14 * v11;
    unsigned int v17 = *(_DWORD *)(v8 + 302868);
    if (v16 > v17) {
      DgnPrimArray<unsigned int>::reallocElts(v8 + 302856, v16 - v17, 0);
    }
    *int v15 = v16;
    unsigned int v64 = 0;
    BOOL canLookupPic = PicMgr::canLookupPic(v10, *(unsigned __int16 **)a2);
    uint64_t v19 = *(void *)(a1 + 8);
    int v20 = (void *)(v19 + 302840);
    uint64_t v21 = (uint64_t *)(v19 + 302856);
    if (canLookupPic)
    {
      uint64_t EndDuplicatesLookup = PicMgr::getEndDuplicatesLookup(v10, a2, v20, v21, v19 + 302544, v19 + 302560);
    }
    else
    {
      uint64_t EndDuplicatesLookup = PicMgr::getEndDuplicatesSearch(v10, (uint64_t *)a2, v20, v21, &v64, v19 + 302560);
      uint64_t v23 = *(void *)(a1 + 8) + 302668;
      *(_DWORD *)v23 += v16;
      *(void *)(v23 + 4) += v64;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 312))(a1, v7, EndDuplicatesLookup);
    unsigned int v24 = a2[2];
    BOOL v25 = (_DWORD *)(*(void *)(a1 + 8) + 302656);
    int v26 = *(_DWORD *)(*(void *)(a1 + 8) + 302660) + EndDuplicatesLookup;
    *v25 += v24;
    v25[1] = v26;
    if (*(_DWORD *)(a1 + 52) == 2)
    {
      if (*(_DWORD *)(a1 + 40) == 3) {
        unsigned int v24 = EndDuplicatesLookup;
      }
      (*(void (**)(uint64_t, void))(*(void *)a1 + 136))(a1, v24 + 1);
    }
    if (!*(void *)(a1 + 144)) {
      (*(void (**)(uint64_t))(*(void *)a1 + 216))(a1);
    }
    BOOL v27 = *(unsigned int **)(a1 + 8);
    int v28 = v27 + 75724;
    unsigned int v29 = v27[75725];
    if (EndDuplicatesLookup > v29)
    {
      DgnPrimArray<unsigned long long>::reallocElts((uint64_t)(v27 + 75722), EndDuplicatesLookup - v29, 0);
      BOOL v27 = *(unsigned int **)(a1 + 8);
    }
    uint64_t v30 = v27 + 75728;
    *int v28 = EndDuplicatesLookup;
    unsigned int v31 = v27[75729];
    if (EndDuplicatesLookup > v31)
    {
      DgnPrimArray<unsigned long long>::reallocElts((uint64_t)(v27 + 75726), EndDuplicatesLookup - v31, 0);
      BOOL v27 = *(unsigned int **)(a1 + 8);
    }
    int v32 = v27 + 75720;
    *uint64_t v30 = EndDuplicatesLookup;
    unsigned int v33 = a2[2];
    unsigned int v34 = v27[75721];
    unsigned int v35 = v33;
    uint64_t v36 = v33 - v34;
    if (v33 > v34)
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)(v27 + 75718), v36, 0);
      unsigned int v35 = a2[2];
    }
    *int v32 = v33;
    if (v35)
    {
      uint64_t v37 = 0;
      unsigned int v38 = 0;
      unint64_t v39 = 0;
      unsigned int v40 = 0;
      do
      {
        BOOL v41 = (void *)(*(void *)(a1 + 8) + 302840);
        uint64_t v42 = *(unsigned int *)(*v41 + 4 * v39);
        if (v39 == v42)
        {
          uint64_t v43 = *(void *)a2 + v37;
          *(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 302872) + 4 * v39) = v40;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 232))(a1, v41[2] + 4 * v38, v11, v43, v41[6] + 8 * v40, v41[8] + 8 * v40, a3);
          ++v40;
        }
        else
        {
          *(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 302872) + 4 * v39) = *(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 302872)
                                                                                         + 4 * v42);
        }
        ++v39;
        v38 += v11;
        v37 += 12;
      }
      while (v39 < a2[2]);
    }
    uint64_t v44 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v36);
    *(void *)uint64_t v44 = 0x100000001;
    *(_DWORD *)(v44 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 1310740000;
    *(void *)(v44 + 12) = 0;
    *(_DWORD *)(v44 + 20) = -65536;
    if (EndDuplicatesLookup)
    {
      uint64_t v45 = 0;
      do
      {
        (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 120))(a1, v44, *(void *)(*(void *)(*(void *)(a1 + 8) + 302888) + v45));
        v45 += 8;
      }
      while (8 * EndDuplicatesLookup != v45);
    }
    unint64_t v46 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 192))(a1);
    uint64_t v47 = *(unsigned __int16 *)(a1 + 96);
    if (*(_DWORD *)(a1 + 40) == 4)
    {
      if (*(_WORD *)(a1 + 96))
      {
        uint64_t v48 = 0;
        int v49 = 0;
        do
        {
          if ((*(_DWORD *)(*v46 + 4 * (v48 >> 5)) >> v48)) {
            *(unsigned char *)(*(void *)(a1 + 88) + vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = ++v49;
          }
          ++v48;
        }
        while (v47 != v48);
      }
      unint64_t v50 = *(unsigned int *)(a1 + 80);
      if (v50 >= 2)
      {
        uint64_t v51 = 0;
        do
        {
          uint64_t v52 = *(void *)(*(void *)(*(void *)(a1 + 8) + 302904)
                          + 8 * *(unsigned int *)(*(void *)(*(void *)(a1 + 8) + 302872) + 4 * v51));
          uint64_t v53 = *(void *)(a1 + 72);
          uint64_t v54 = (v51 + 1);
          if (*(_DWORD *)(a1 + 52))
          {
            *(void *)(v53 + 8 * v54) = v52;
          }
          else
          {
            PredStruct::addPred(*(void *)(v53 + 8 * v54) + 16, v52);
            unint64_t v50 = *(unsigned int *)(a1 + 80);
          }
          unint64_t v55 = v51 + 2;
          ++v51;
        }
        while (v55 < v50);
      }
    }
    else
    {
      if (*(_WORD *)(a1 + 96))
      {
        uint64_t v56 = 0;
        unsigned int v57 = 0;
        do
        {
          if ((*(_DWORD *)(*v46 + 4 * (v56 >> 5)) >> v56)) {
            *(unsigned char *)(*(void *)(a1 + 88) + vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = *(unsigned char *)(*(void *)(*(void *)(a1 + 8) + 302872) + 4 * v57++)
          }
                                                   + 1;
          ++v56;
        }
        while (v47 != v56);
      }
      unint64_t v58 = *(unsigned int *)(a1 + 80);
      if (v58 >= 2)
      {
        uint64_t v59 = 0;
        do
        {
          uint64_t v60 = *(void *)(*(void *)(*(void *)(a1 + 8) + 302904) + 8 * v59);
          uint64_t v61 = *(void *)(a1 + 72);
          uint64_t v62 = (v59 + 1);
          if (*(_DWORD *)(a1 + 52))
          {
            *(void *)(v61 + 8 * v62) = v60;
          }
          else
          {
            PredStruct::addPred(*(void *)(v61 + 8 * v62) + 16, v60);
            unint64_t v58 = *(unsigned int *)(a1 + 80);
          }
          unint64_t v63 = v59 + 2;
          ++v59;
        }
        while (v63 < v58);
      }
    }
    (*(void (**)(uint64_t, void, void))(*(void *)a1 + 120))(a1, **(void **)(*(void *)(a1 + 8) + 302904), *(void *)(a1 + 144));
    return v44;
  }
}

uint64_t AcousticNet::unpackEndTrace(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  (*(void (**)(uint64_t *, void, void))(*a1 + 312))(a1, *(unsigned __int16 *)(*(void *)a2 + 4), a2[2]);
  if (*((_DWORD *)a1 + 13) == 2) {
    (*(void (**)(uint64_t *, void))(*a1 + 136))(a1, a2[2] + 1);
  }
  if (!a1[18]) {
    (*(void (**)(uint64_t *))(*a1 + 216))(a1);
  }
  uint64_t v6 = (unsigned int *)a1[1];
  uint64_t v7 = v6 + 75724;
  unsigned int v8 = a2[2];
  unsigned int v9 = v6[75725];
  unsigned int v10 = v8;
  if (v8 > v9)
  {
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)(v6 + 75722), v8 - v9, 0);
    uint64_t v6 = (unsigned int *)a1[1];
    unsigned int v10 = a2[2];
  }
  uint64_t v11 = v6 + 75728;
  *uint64_t v7 = v8;
  unsigned int v12 = v6[75729];
  if (v10 <= v12)
  {
    unsigned int v13 = v10;
  }
  else
  {
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)(v6 + 75726), v10 - v12, 0);
    uint64_t v6 = (unsigned int *)a1[1];
    unsigned int v13 = a2[2];
  }
  unsigned int v14 = v6 + 75720;
  *uint64_t v11 = v10;
  unsigned int v15 = v6[75721];
  unsigned int v16 = v13;
  uint64_t v17 = v13 - v15;
  if (v13 > v15)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)(v6 + 75718), v17, 0);
    unsigned int v16 = a2[2];
  }
  *unsigned int v14 = v13;
  if (v16)
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    unint64_t v20 = 0;
    do
    {
      uint64_t v21 = *(void *)a2 + v19;
      uint64_t v22 = *a1;
      uint64_t v23 = (void *)(a1[1] + 302872);
      *(_DWORD *)(*v23 + 4 * v20) = v20;
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 224))(a1, v21, v23[2] + v18, v23[4] + v18, a3);
      ++v20;
      v19 += 12;
      v18 += 8;
    }
    while (v20 < a2[2]);
  }
  uint64_t v24 = (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 128))(a1, v17);
  *(void *)uint64_t v24 = 0x100000001;
  *(_DWORD *)(v24 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 1310740000;
  *(void *)(v24 + 12) = 0;
  *(_DWORD *)(v24 + 20) = -65536;
  if (a2[2])
  {
    unint64_t v25 = 0;
    do
      (*(void (**)(uint64_t *, uint64_t, void))(*a1 + 120))(a1, v24, *(void *)(*(void *)(a1[1] + 302888) + 8 * v25++));
    while (v25 < a2[2]);
  }
  int v26 = (void *)(*(uint64_t (**)(uint64_t *))(*a1 + 192))(a1);
  uint64_t v27 = *((unsigned __int16 *)a1 + 48);
  if (*((_WORD *)a1 + 48))
  {
    uint64_t v28 = 0;
    int v29 = 0;
    do
    {
      if ((*(_DWORD *)(*v26 + 4 * (v28 >> 5)) >> v28)) {
        *(unsigned char *)(a1[11] + v2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = ++v29;
      }
      ++v28;
    }
    while (v27 != v28);
  }
  unint64_t v30 = *((unsigned int *)a1 + 20);
  if (v30 >= 2)
  {
    uint64_t v31 = 0;
    do
    {
      uint64_t v32 = *(void *)(*(void *)(a1[1] + 302904) + 8 * v31);
      uint64_t v33 = a1[9];
      uint64_t v34 = (v31 + 1);
      if (*((_DWORD *)a1 + 13))
      {
        *(void *)(v33 + 8 * v34) = v32;
      }
      else
      {
        PredStruct::addPred(*(void *)(v33 + 8 * v34) + 16, v32);
        unint64_t v30 = *((unsigned int *)a1 + 20);
      }
      unint64_t v35 = v31 + 2;
      ++v31;
    }
    while (v35 < v30);
  }
  (*(void (**)(uint64_t *, void, uint64_t))(*a1 + 120))(a1, **(void **)(a1[1] + 302904), a1[18]);
  return v24;
}

uint64_t AcousticNet::estimateActivePelsThisFrame(uint64_t this, BitArray *a2)
{
  uint64_t v2 = *(void *)(this + 144);
  if (v2) {
    *(_DWORD *)(*(void *)a2 + (((unint64_t)*(unsigned __int16 *)(v2 + 22) >> 3) & 0x1FFC)) |= 1 << *(_WORD *)(v2 + 22);
  }
  return this;
}

void MrecInitModule_recog_kernel(void)
{
  if (!gParDebugShowNetNodeStatsPerFrame)
  {
    uint64_t v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugShowNetNodeStatsPerFrame", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    *uint64_t v1 = &unk_26C4E0858;
    gParDebugShowNetNodeStatsPerFrame = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowNetNodeStatsPerFrame);
  }
  if (!gParDebugShowNetNodeStats)
  {
    uint64_t v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "DebugShowNetNodeStats", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    void *v3 = &unk_26C4E0858;
    gParDebugShowNetNodeStats = (uint64_t)v3;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowNetNodeStats);
  }
  if (!gParDebugRecognitionWatchTheseWords)
  {
    BOOL v4 = MemChunkAlloc(0x48uLL, 0);
    StringGlobalParamBase::StringGlobalParamBase((StringGlobalParamBase *)v4, "DebugRecognitionWatchTheseWords", &byte_2140B33BB, &byte_2140B33BB, &byte_2140B33BB, 0, 0);
    *int v5 = &unk_26C4E18B8;
    gParDebugRecognitionWatchTheseWords = (uint64_t)v5;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugRecognitionWatchTheseWords);
  }
  if (!gParDiagnosticFrameSpecificCommand)
  {
    uint64_t v6 = MemChunkAlloc(0x48uLL, 0);
    StringGlobalParamBase::StringGlobalParamBase((StringGlobalParamBase *)v6, "DiagnosticFrameSpecificCommand", &byte_2140B33BB, &byte_2140B33BB, &byte_2140B33BB, 0, 0);
    *uint64_t v7 = &unk_26C4E18B8;
    gParDiagnosticFrameSpecificCommand = (uint64_t)v7;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticFrameSpecificCommand);
  }
  if (!gParDebugAbortRecognition)
  {
    unsigned int v8 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v8, "DebugAbortRecognition", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    *unsigned int v9 = &unk_26C4E0858;
    gParDebugAbortRecognitiouint64_t n = (uint64_t)v9;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugAbortRecognition);
  }
  if (!gParDebugRecognitionWatchAllActiveWords)
  {
    unsigned int v10 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v10, "DebugRecognitionWatchAllActiveWords", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    *uint64_t v11 = &unk_26C4E0858;
    gParDebugRecognitionWatchAllActiveWords = (uint64_t)v11;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugRecognitionWatchAllActiveWords);
  }
  if (!gParDebugShowActiveWords)
  {
    unsigned int v12 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v12, "DebugShowActiveWords", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    *unsigned int v13 = &unk_26C4E0858;
    gParDebugShowActiveWords = (uint64_t)v13;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowActiveWords);
  }
  if (!gParDebugShowActiveStats)
  {
    unsigned int v14 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v14, "DebugShowActiveStats", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    *unsigned int v15 = &unk_26C4E0858;
    gParDebugShowActiveStats = (uint64_t)v15;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowActiveStats);
  }
  if (!gParDebugShowFinalActiveStats)
  {
    unsigned int v16 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v16, "DebugShowFinalActiveStats", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    *uint64_t v17 = &unk_26C4E0858;
    gParDebugShowFinalActiveStats = (uint64_t)v17;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowFinalActiveStats);
  }
  if (!gParDebugShowPerFrameRecognitionStats)
  {
    uint64_t v18 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v18, "DebugShowPerFrameRecognitionStats", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    *uint64_t v19 = &unk_26C4E0858;
    gParDebugShowPerFrameRecognitionStats = (uint64_t)v19;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowPerFrameRecognitionStats);
  }
  if (!gParDebugPartialFinalResults)
  {
    unint64_t v20 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v20, "DebugPartialFinalResults", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    void *v21 = &unk_26C4E0858;
    gParDebugPartialFinalResults = (uint64_t)v21;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugPartialFinalResults);
  }
  if (!gParDiagnosticSearchRecognitionNetType)
  {
    uint64_t v22 = (__n128 *)MemChunkAlloc(0x40uLL, 0);
    EnumParamRange::EnumParamRange((uint64_t)&v29, (uint64_t)&sDiagnosticSearchRecognitionNetTypeEnum);
    EnumGlobalParamBase::EnumGlobalParamBase(v22, (unint64_t)"DiagnosticSearchRecognitionNetType", (unint64_t)&byte_2140B33BB, (unint64_t)&byte_2140B33BB, 1u, &v29, 0);
    v22->n128_u64[0] = (unint64_t)&unk_26C4E0B78;
    gParDiagnosticSearchRecognitionNetType = (uint64_t)v22;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDiagnosticSearchRecognitionNetType);
  }
  if (!gParDebugSeeding)
  {
    uint64_t v23 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v23, "DebugSeeding", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    *uint64_t v24 = &unk_26C4E0858;
    gParDebugSeeding = (uint64_t)v24;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugSeeding);
  }
  if (!gParDebugPrefiltererDeactivation)
  {
    unint64_t v25 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v25, "DebugPrefiltererDeactivation", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    *int v26 = &unk_26C4E0858;
    gParDebugPrefiltererDeactivatiouint64_t n = (uint64_t)v26;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugPrefiltererDeactivation);
  }
  if (!gParDebugShowPartialResults)
  {
    uint64_t v27 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v27, "DebugShowPartialResults", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    *uint64_t v28 = &unk_26C4E0858;
    gParDebugShowPartialResults = (uint64_t)v28;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowPartialResults);
  }
}

double GermRecogGermIterator::getCurrentGermInternal(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  int v3 = (_DWORD *)(**(void **)(a1 + 40) + 8 * v2);
  *(_DWORD *)a2 = *v3;
  *(_DWORD *)(a2 + 4) = 0x3FFF;
  *(_OWORD *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = xmmword_2140866D0;
  *(unsigned char *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = 0;
  *(_WORD *)(a2 + 26) = 0;
  double result = 3.10503915e231;
  *(void *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0x70000000FFFFFFFELL;
  *(_DWORD *)(a2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = v2;
  *(_DWORD *)(a2 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v3[1];
  return result;
}

uint64_t GermRecogGermIterator::advanceUntilMatch(uint64_t this)
{
  if (*(unsigned char *)(this + 32))
  {
    unsigned int v2 = *(_DWORD *)(this + 8);
    int v1 = *(_DWORD *)(this + 12);
    if (v2 != v1)
    {
      uint64_t v3 = **(void **)(this + 40);
      int v4 = *(unsigned __int16 *)(this + 16);
      do
      {
        unsigned int v5 = *(_DWORD *)(v3 + 8 * v2);
        if (v4 == v5 >> 25)
        {
          uint64_t v6 = *(void *)(this + 24);
          if ((v5 & 0xFFFFFF) < *(_DWORD *)(v6 + 8)
            && ((*(_DWORD *)(*(void *)v6 + (((*(void *)&v5 & 0xFFFFFFuLL) >> 3) & 0x1FFFFC)) >> v5) & 1) != 0)
          {
            break;
          }
        }
        *(_DWORD *)(this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = ++v2;
      }
      while (v1 != v2);
    }
  }
  return this;
}

uint64_t RecognizerOptions::RecognizerOptions(uint64_t a1, char a2, int a3, int a4, int a5, char a6, uint64_t a7, uint64_t a8, double a9, long long a10, int a11, int a12, long long a13, long long a14, uint64_t a15, int a16, char a17, long long a18, long long a19, char a20,char a21,char a22,char a23,char a24,char a25,uint64_t a26,int a27,char a28,char a29,char a30,char a31,char a32,char a33,int a34,uint64_t a35,uint64_t a36,int a37,char a38,long long a39,int a40,int a41)
{
  *(_DWORD *)&unsigned char v46[16] = a37;
  *(void *)&v46[8] = a36;
  *(void *)unint64_t v46 = a35;
  *(unsigned char *)a1 = a2;
  *(_DWORD *)(a1 + 12) = a5;
  *(unsigned char *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = a6;
  *(unsigned char *)(a1 + 17) = a7;
  *(_DWORD *)(a1 + 20) = a8;
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = a11;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = a15;
  *(_DWORD *)(a1 + HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 88) = a16;
  *(unsigned char *)(a1 + 92) = a17;
  *(unsigned char *)(a1 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 136) = a20;
  *(unsigned char *)(a1 + 137) = a21;
  *(unsigned char *)(a1 + 13DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = a22;
  *(unsigned char *)(a1 + 139) = a23;
  *(unsigned char *)(a1 + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = a24;
  *(unsigned char *)(a1 + 141) = a25;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 144) = a26;
  *(_DWORD *)(a1 + 152) = a27;
  *(unsigned char *)(a1 + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = a28;
  *(unsigned char *)(a1 + 157) = a29;
  *(unsigned char *)(a1 + 15DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = a30;
  *(unsigned char *)(a1 + 159) = a31;
  *(unsigned char *)(a1 + HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 160) = a32;
  *(unsigned char *)(a1 + 161) = a33;
  *(_DWORD *)(a1 + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = a34;
  *(unsigned char *)(a1 + 16DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v46[0];
  *(unsigned char *)(a1 + 1HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 88) = a38;
  *(_DWORD *)(a1 + 20DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = a40;
  *(_DWORD *)(a1 + 212) = a41;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = a4;
  *(_OWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = a10;
  *(_DWORD *)(a1 + 44) = a12;
  *(_OWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = a13;
  *(_OWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = a14;
  *(double *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = a9;
  *(_OWORD *)(a1 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 104) = a18;
  *(_OWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 120) = a19;
  *(_OWORD *)(a1 + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = *(_OWORD *)&v46[4];
  *(_OWORD *)(a1 + HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 192) = a39;
  if (a12 != -1 && a4 + a3 - a12 < 0) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 733, (uint64_t)"kernel/recog", 5, (uint64_t)"%d %d %d %d", a7, a8, a4 + a3 - a12);
  }
  int v42 = *(_DWORD *)(a1 + 8) + *(_DWORD *)(a1 + 4);
  int v43 = *(_DWORD *)(a1 + 32);
  if (v42 - v43 < 0)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 744, (uint64_t)"kernel/recog", 6, (uint64_t)"%d %d %d %d", a7, a8, v42 - v43);
    int v42 = *(_DWORD *)(a1 + 8) + *(_DWORD *)(a1 + 4);
  }
  int v44 = v42 - *(_DWORD *)(a1 + 36);
  if (v44 < 0) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 756, (uint64_t)"kernel/recog", 7, (uint64_t)"%d %d %d %d", a7, a8, v44);
  }
  return a1;
}

uint64_t RecognizerOptions::RecognizerOptions(uint64_t a1, char a2, int a3, int a4, int a5, char a6, unsigned int a7, unsigned int a8, double a9, long long a10, int a11, int a12, long long a13, long long a14, uint64_t a15, int a16, char a17, long long a18, long long a19, char a20,char a21,char a22,char a23,char a24,char a25,uint64_t a26,int a27,char a28,char a29,char a30,char a31,char a32,char a33,int a34,uint64_t a35,uint64_t a36,int a37,char a38,long long a39,int a40,int a41)
{
  return RecognizerOptions::RecognizerOptions(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41);
}

double RecognizerOptions::RecognizerOptions(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 4) = *(void *)(a2 + 4);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_WORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = *(_WORD *)(a2 + 16);
  *(_OWORD *)(a1 + 20) = *(_OWORD *)(a2 + 20);
  *(_OWORD *)(a1 + 36) = *(_OWORD *)(a2 + 36);
  *(_OWORD *)(a1 + 52) = *(_OWORD *)(a2 + 52);
  *(_OWORD *)(a1 + 6DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *(_OWORD *)(a2 + 68);
  *(void *)(a1 + 84) = *(void *)(a2 + 84);
  *(unsigned char *)(a1 + 92) = *(unsigned char *)(a2 + 92);
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 120) = *(_OWORD *)(a2 + 120);
  *(_DWORD *)(a1 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 136) = *(_DWORD *)(a2 + 136);
  *(_WORD *)(a1 + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = *(_WORD *)(a2 + 140);
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 144) = *(void *)(a2 + 144);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = *(_DWORD *)(a2 + 156);
  *(_WORD *)(a1 + HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 160) = *(_WORD *)(a2 + 160);
  *(_DWORD *)(a1 + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = *(_DWORD *)(a2 + 164);
  *(unsigned char *)(a1 + 16DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *(unsigned char *)(a2 + 168);
  *(_OWORD *)(a1 + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = *(_OWORD *)(a2 + 172);
  *(unsigned char *)(a1 + 1HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 88) = *(unsigned char *)(a2 + 188);
  *(_OWORD *)(a1 + HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 192) = *(_OWORD *)(a2 + 192);
  double result = *(double *)(a2 + 208);
  *(double *)(a1 + 20DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = result;
  return result;
}

unint64_t RecognizerOptions::sizeObject(uint64_t a1, int a2)
{
  uint64_t v2 = a2 != 3;
  return (v2 & 0xFFFFFFFFFFFFFFFDLL | (8 * v2) | (4 * v2) | (2 * (v2 & 1)))
       + 4 * v2
       + 2 * v2
       + 8 * v2
       + 12 * v2
       + ((2 * v2) | (v2 << 7));
}

uint64_t SearchStats::resetStats(uint64_t this)
{
  *(void *)this = 0;
  *(_DWORD *)(this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *(void *)(this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
  *(_DWORD *)(this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = 0;
  return this;
}

double SearchStats::operator=(uint64_t a1, uint64_t a2)
{
  double result = *(double *)a2;
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = *(_DWORD *)(a2 + 24);
  return result;
}

int32x2_t SearchStats::operator-=(int32x2_t *a1, int32x2_t *a2)
{
  int32x2_t result = vsub_s32(*a1, *a2);
  *a1 = result;
  a1[1].i32[0] -= a2[1].i32[0];
  *(void *)&a1[2] -= *(void *)&a2[2];
  a1[3].i32[0] -= a2[3].i32[0];
  return result;
}

uint64_t Recognizer::Recognizer(uint64_t a1, char a2, int a3, __int16 a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  *(void *)a1 = &unk_26C4DF130;
  RecognizerOptions::RecognizerOptions(a1 + 8, a8);
  *(_OWORD *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = 0u;
  *(_OWORD *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = 0u;
  *(void *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = a5;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 264) = a6;
  if (a3 == 3) {
    int v19 = -1;
  }
  else {
    int v19 = 1;
  }
  *(_DWORD *)(a1 + 2HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 88) = v19;
  *(unsigned char *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304) = a2;
  *(_DWORD *)(a1 + 30DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = -16;
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 312) = a3;
  *(void *)(a1 + 3DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0xFFFFFFF0FFFFFFF0;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 328) = 0;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 336) = 0;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 352) = 0;
  *(_DWORD *)(a1 + 3DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = 0;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 376) = 0;
  *(void *)(a1 + 384) = 0;
  MergedActive::MergedActive((MergedActive *)(a1 + 392));
  *(_WORD *)(a1 + 52DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = a4;
  *(_OWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 536) = 0u;
  *(_OWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 552) = 0u;
  *(_OWORD *)(a1 + 56DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(void *)(a1 + 60DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0xF0000000FLL;
  *(_DWORD *)(a1 + 6DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
  *(unsigned char *)(a1 + 620) = 0;
  SearchLMScorer::SearchLMScorer(a1 + 624, *(_DWORD *)(a1 + 172), *(unsigned char *)(a1 + 176), *(_DWORD *)(a1 + 180), *(_DWORD *)(a1 + 184), *(unsigned char *)(a1 + 167), a9, a10, a11, a12);
  *(void *)(a1 + 8DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0x3FFFFCFFFFFDLL;
  *(_OWORD *)(a1 + 8DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = xmmword_2140866D0;
  *(unsigned char *)(a1 + 8DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = 0;
  *(_DWORD *)(a1 + 85DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 1310720000;
  *(_WORD *)(a1 + 862) = 0;
  *(void *)(a1 + 8DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = 0x70000000FFFFFFFELL;
  *(_DWORD *)(a1 + 8DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = 0;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 96DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 10DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0u;
  *(_OWORD *)(a1 + 10DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0u;
  PelStats::resetStats((PelStats *)(a1 + 880));
  *(_OWORD *)(a1 + 1HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 192) = 0u;
  *(_OWORD *)(a1 + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 176) = 0u;
  *(_OWORD *)(a1 + 1HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 160) = 0u;
  *(_OWORD *)(a1 + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 144) = 0u;
  *(_OWORD *)(a1 + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 128) = 0u;
  *(_OWORD *)(a1 + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 112) = 0u;
  LMStats::resetStats((LMStats *)(a1 + 1056));
  *(void *)(a1 + 120DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *(_DWORD *)(a1 + 12DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
  *(void *)(a1 + 12DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = 0;
  *(_DWORD *)(a1 + 12DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
  *(_OWORD *)(a1 + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 280) = 0u;
  *(_OWORD *)(a1 + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 296) = 0u;
  *(_OWORD *)(a1 + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 312) = 0u;
  *(_OWORD *)(a1 + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 328) = 0u;
  *(_OWORD *)(a1 + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 344) = 0u;
  *(_OWORD *)(a1 + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 360) = 0u;
  *(_OWORD *)(a1 + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 376) = 0u;
  *(_OWORD *)(a1 + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 392) = 0u;
  PelStats::resetStats((PelStats *)(a1 + 1240));
  *(_OWORD *)(a1 + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 552) = 0u;
  *(_OWORD *)(a1 + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 536) = 0u;
  *(_OWORD *)(a1 + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 520) = 0u;
  *(_OWORD *)(a1 + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 504) = 0u;
  *(_OWORD *)(a1 + 14HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 88) = 0u;
  *(_OWORD *)(a1 + 14DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = 0u;
  LMStats::resetStats((LMStats *)(a1 + 1416));
  *(void *)(a1 + 156DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *(_DWORD *)(a1 + 1576) = 0;
  *(void *)(a1 + 1584) = 0;
  *(_DWORD *)(a1 + 1592) = 0;
  LatticeStats::LatticeStats((LatticeStats *)(a1 + 1616));
  *(_OWORD *)(a1 + 22DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = 0u;
  *(_OWORD *)(a1 + 20DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = 0u;
  *(_OWORD *)(a1 + 20DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = 0u;
  *(_OWORD *)(a1 + 20DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = 0u;
  *(_OWORD *)(a1 + 20DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = 0u;
  *(_OWORD *)(a1 + 20HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 88) = 0u;
  *(_OWORD *)(a1 + 2DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 104) = 0u;
  *(_OWORD *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 120) = 0u;
  *(_OWORD *)(a1 + 2DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 136) = 0u;
  *(_OWORD *)(a1 + 2152) = 0u;
  *(_OWORD *)(a1 + 216DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 2184) = 0u;
  *(_OWORD *)(a1 + 2200) = 0u;
  *(_DWORD *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 264) = 0x3FFF;
  *(_OWORD *)(a1 + 226DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = xmmword_2140866D0;
  *(_OWORD *)(a1 + 22HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 88) = 0u;
  *(unsigned char *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304) = 0;
  *(_OWORD *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 360) = 0u;
  *(_OWORD *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 376) = 0u;
  int v20 = *(unsigned __int8 *)(a1 + 304);
  uint64_t v21 = 2 * (*(unsigned char *)(a1 + 304) == 0);
  *(_OWORD *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 344) = 0u;
  if (v20 && (a7 & 1) == 0) {
    uint64_t v21 = *(unsigned int *)(gParDiagnosticSearchRecognitionNetType + 44);
  }
  uint64_t v22 = MemChunkAlloc(0x4A098uLL, 0);
  uint64_t v23 = *(unsigned int *)(a1 + 312);
  int v28 = *(_DWORD *)(a1 + 288);
  uint64_t v24 = Active::Active(v22, v23, &v28, v21, *(void *)(a1 + 264));
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 296) = 0;
  *(void *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = 0;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 280) = v24;
  *(unsigned char *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 360) = 0;
  unint64_t v25 = *(unsigned int *)(*(void *)VocMgr::smpVocMgr + 8);
  if (*(_DWORD *)(a1 + 564) >= v25)
  {
    *(_DWORD *)(a1 + 560) = v25;
    if (!v25) {
      goto LABEL_11;
    }
  }
  else
  {
    __n128 v29 = 0;
    *(_DWORD *)(a1 + 5DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = realloc_array(*(void **)(a1 + 552), &v29, v25, *(unsigned int *)(a1 + 560), *(unsigned int *)(a1 + 560), 1);
    *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 552) = v29;
    *(_DWORD *)(a1 + 560) = v25;
  }
  bzero(*(void **)(a1 + 552), v25);
LABEL_11:
  *(void *)(a1 + 160DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *(void *)(a1 + 36DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 22DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = 0;
  *(_OWORD *)(a1 + 20DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = 0u;
  *(_OWORD *)(a1 + 20DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = 0u;
  *(_OWORD *)(a1 + 20DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = 0u;
  *(_OWORD *)(a1 + 20DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = 0u;
  *(_OWORD *)(a1 + 20HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 88) = 0u;
  *(_OWORD *)(a1 + 2DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 104) = 0u;
  *(_OWORD *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 120) = 0u;
  *(_OWORD *)(a1 + 2DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 136) = 0u;
  *(_OWORD *)(a1 + 2152) = 0u;
  *(_OWORD *)(a1 + 216DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 2184) = 0u;
  *(_OWORD *)(a1 + 2200) = 0u;
  *(void *)(a1 + 22DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
  *(_DWORD *)(a1 + 23DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = 0;
  *(_OWORD *)(a1 + 230DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 23DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = 0u;
  *(void *)(a1 + 2244) = 0x4E20FFFFFFFELL;
  *(unsigned char *)(a1 + 2252) = 0;
  *(void *)(a1 + 22DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = 0xFAFFFFFFFFFFFFF0;
  *(_DWORD *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 264) = 0x3FFF;
  *(_OWORD *)(a1 + 226DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = xmmword_2140866D0;
  if (*(_DWORD *)(a1 + 312) != 3)
  {
    int v26 = MemChunkAlloc(0x38uLL, 0);
    *(void *)(a1 + 36DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = CWIDCrumbBank::CWIDCrumbBank((CWIDCrumbBank *)v26, (const HistoryMgr *)(*(void *)(a1 + 280) + 72));
  }
  SearchLMScorer::setRecognizer(a1 + 624, a1);
  return a1;
}

void sub_213FC49B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, MergedActive *a15, uint64_t a16)
{
  SearchLMScorer::~SearchLMScorer(v20);
  DgnIArray<Utterance *>::~DgnIArray(v16 + 584);
  DgnIArray<Utterance *>::~DgnIArray(v16 + 568);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a16);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v19);
  MergedActive::~MergedActive(a15);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v18);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v16 + 240);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v17);
  _Unwind_Resume(a1);
}

void Recognizer::~Recognizer(Recognizer *this)
{
  *(void *)this = &unk_26C4DF130;
  DgnDelete<Active>(*((void *)this + 35));
  DgnDelete<PelScoreCacheData>(*((PelScoreCacheData **)this + 37));
  DgnDelete<CWIDCrumbBank>(*((void *)this + 46));
  DgnDelete<Constraint>(*((Constraint **)this + 277));
  DgnDelete<RecogGermIterator>(*((void (****)(void))this + 47));
  DgnDelete<RecogGermIterator>(*((void (****)(void))this + 48));
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 2376);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 2360);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 2344);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 2288);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 2224);
  SearchLMScorer::~SearchLMScorer((Recognizer *)((char *)this + 624));
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 584);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 568);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 552);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 536);
  MergedActive::~MergedActive((Recognizer *)((char *)this + 392));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 328);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 240);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 224);
}

{
  uint64_t vars8;

  Recognizer::~Recognizer(this);

  JUMPOUT(0x216698730);
}

uint64_t DgnDelete<Active>(uint64_t result)
{
  if (result)
  {
    int v1 = (void *)result;
    DgnIArray<Utterance *>::~DgnIArray(result + 303240);
    HashKEV<CWIDAC,CWIDAC,CWIDAC>::~HashKEV((uint64_t)(v1 + 37892));
    Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::~Hash((uint64_t)(v1 + 37878));
    ActiveWordMgr::~ActiveWordMgr((ActiveWordMgr *)(v1 + 2));
    return MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t DgnDelete<CWIDCrumbBank>(uint64_t result)
{
  if (result)
  {
    int v1 = (void *)result;
    DgnIOwnArray<CWIDCrumbWACSFrame *>::releaseAll(result);
    return MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t Recognizer::makeRecognizer(char a1, int a2, __int16 a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v19 = MemChunkAlloc(0x968uLL, 0);
  return Recognizer::Recognizer((uint64_t)v19, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

void Recognizer::printSize(Recognizer *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1154, (DgnString *)&v457);
  if (v458) {
    uint64_t v16 = (char *)v457;
  }
  else {
    uint64_t v16 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_2140B33BB, a3, &byte_2140B33BB, v16);
  DgnString::~DgnString((DgnString *)&v457);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_2140B33BB);
  uint64_t v21 = (a3 + 1);
  uint64_t v454 = a3;
  uint64_t v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1155, (DgnString *)&v457);
  if (v458) {
    uint64_t v27 = (char *)v457;
  }
  else {
    uint64_t v27 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, v21, &byte_2140B33BB, v22, v22, v27, 171, 171, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += 171;
  *a5 += 171;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v28 = 12;
  }
  else {
    uint64_t v28 = 16;
  }
  uint64_t v29 = *((unsigned int *)this + 58);
  unsigned int v30 = *((_DWORD *)this + 59);
  if (v30 >= v29)
  {
    uint64_t v31 = 0;
    if ((int)v29 > 0) {
      v28 += 4 * (v29 - 1) + 4;
    }
    uint64_t v32 = v28 + 4 * (v30 - v29);
  }
  else
  {
    uint64_t v31 = 4 * v29;
    uint64_t v32 = v28;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1157, (DgnString *)&v457);
  if (v458) {
    uint64_t v37 = (char *)v457;
  }
  else {
    uint64_t v37 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, v21, &byte_2140B33BB, v22, v22, v37, v32, v28, v31);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v32;
  *a5 += v28;
  *a6 += v31;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v38 = 12;
  }
  else {
    uint64_t v38 = 16;
  }
  uint64_t v39 = *((unsigned int *)this + 62);
  unsigned int v40 = *((_DWORD *)this + 63);
  if (v40 >= v39)
  {
    uint64_t v41 = 0;
    if ((int)v39 > 0) {
      v38 += 4 * (v39 - 1) + 4;
    }
    uint64_t v42 = v38 + 4 * (v40 - v39);
  }
  else
  {
    uint64_t v41 = 4 * v39;
    uint64_t v42 = v38;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1159, (DgnString *)&v457);
  if (v458) {
    uint64_t v47 = (char *)v457;
  }
  else {
    uint64_t v47 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v43, v44, v45, v46, v21, &byte_2140B33BB, v22, v22, v47, v42, v38, v41);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v42;
  *a5 += v38;
  *a6 += v41;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v48 = 4;
  }
  else {
    uint64_t v48 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1160, (DgnString *)&v457);
  if (v458) {
    uint64_t v53 = (char *)v457;
  }
  else {
    uint64_t v53 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v49, v50, v51, v52, v21, &byte_2140B33BB, v22, v22, v53, v48, v48, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v48;
  *a5 += v48;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v54 = 4;
  }
  else {
    uint64_t v54 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1161, (DgnString *)&v457);
  if (v458) {
    uint64_t v59 = (char *)v457;
  }
  else {
    uint64_t v59 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v55, v56, v57, v58, v21, &byte_2140B33BB, v22, v22, v59, v54, v54, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v54;
  *a5 += v54;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v60 = 4;
  }
  else {
    uint64_t v60 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1162, (DgnString *)&v457);
  if (v458) {
    int v65 = (char *)v457;
  }
  else {
    int v65 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v61, v62, v63, v64, v21, &byte_2140B33BB, v22, v22, v65, v60, v60, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v60;
  *a5 += v60;
  int v66 = (Active *)*((void *)this + 35);
  if (v66)
  {
    unint64_t v456 = 0;
    unint64_t v457 = 0;
    unint64_t v455 = 0;
    Active::printSize(v66, 0xFFFFFFFFLL, v21, &v457, &v456, &v455);
    *a4 += v457;
    *a5 += v456;
    *a6 += v455;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v67 = 4;
  }
  else {
    uint64_t v67 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1163, (DgnString *)&v457);
  if (v458) {
    uint64_t v72 = (char *)v457;
  }
  else {
    uint64_t v72 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, v21, &byte_2140B33BB, v22, v22, v72, v67, v67, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v67;
  *a5 += v67;
  uint64_t v73 = sizeObject((uint64_t)this + 288, 0);
  uint64_t v74 = sizeObject((uint64_t)this + 288, 1);
  uint64_t v75 = sizeObject((uint64_t)this + 288, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1164, (DgnString *)&v457);
  if (v458) {
    unint64_t v80 = (char *)v457;
  }
  else {
    unint64_t v80 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v76, v77, v78, v79, v21, &byte_2140B33BB, v22, v22, v80, v73, v74, v75);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v73;
  *a5 += v74;
  *a6 += v75;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v81 = 4;
  }
  else {
    uint64_t v81 = 8;
  }
  uint64_t v82 = *((void *)this + 37);
  if (v82)
  {
    uint64_t v83 = sizeObject(v82, 0) + v81;
    uint64_t v84 = *((void *)this + 37);
    if (gShadowDiagnosticShowIdealizedObjectSizes) {
      uint64_t v81 = 4;
    }
    else {
      uint64_t v81 = 8;
    }
    if (v84 && (v81 += sizeObject(v84, 1), (uint64_t v85 = *((void *)this + 37)) != 0)) {
      uint64_t v86 = sizeObject(v85, 3);
    }
    else {
      uint64_t v86 = 0;
    }
  }
  else
  {
    uint64_t v86 = 0;
    uint64_t v83 = v81;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1166, (DgnString *)&v457);
  if (v458) {
    uint64_t v91 = (char *)v457;
  }
  else {
    uint64_t v91 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v87, v88, v89, v90, v21, &byte_2140B33BB, v22, v22, v91, v83, v81, v86);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v83;
  *a5 += v81;
  *a6 += v86;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1167, (DgnString *)&v457);
  if (v458) {
    unsigned int v96 = (char *)v457;
  }
  else {
    unsigned int v96 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v92, v93, v94, v95, v21, &byte_2140B33BB, v22, v22, v96, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v457);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1169, (DgnString *)&v457);
  if (v458) {
    int v101 = (char *)v457;
  }
  else {
    int v101 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v97, v98, v99, v100, v21, &byte_2140B33BB, v22, v22, v101, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1170, (DgnString *)&v457);
  if (v458) {
    uint64_t v106 = (char *)v457;
  }
  else {
    uint64_t v106 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v102, v103, v104, v105, v21, &byte_2140B33BB, v22, v22, v106, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1172, (DgnString *)&v457);
  if (v458) {
    int v111 = (char *)v457;
  }
  else {
    int v111 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v107, v108, v109, v110, v21, &byte_2140B33BB, v22, v22, v111, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1174, (DgnString *)&v457);
  if (v458) {
    char v116 = (char *)v457;
  }
  else {
    char v116 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v112, v113, v114, v115, v21, &byte_2140B33BB, v22, v22, v116, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1176, (DgnString *)&v457);
  if (v458) {
    char v121 = (char *)v457;
  }
  else {
    char v121 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v117, v118, v119, v120, v21, &byte_2140B33BB, v22, v22, v121, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1177, (DgnString *)&v457);
  if (v458) {
    int64_t v126 = (char *)v457;
  }
  else {
    int64_t v126 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v122, v123, v124, v125, v21, &byte_2140B33BB, v22, v22, v126, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1179, (DgnString *)&v457);
  if (v458) {
    uint64_t v131 = (char *)v457;
  }
  else {
    uint64_t v131 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v127, v128, v129, v130, v21, &byte_2140B33BB, v22, v22, v131, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1180, (DgnString *)&v457);
  if (v458) {
    int64_t v136 = (char *)v457;
  }
  else {
    int64_t v136 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v132, v133, v134, v135, v21, &byte_2140B33BB, v22, v22, v136, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1181, (DgnString *)&v457);
  if (v458) {
    char v141 = (char *)v457;
  }
  else {
    char v141 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v137, v138, v139, v140, v21, &byte_2140B33BB, v22, v22, v141, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1183, (DgnString *)&v457);
  if (v458) {
    unsigned int v146 = (char *)v457;
  }
  else {
    unsigned int v146 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v142, v143, v144, v145, v21, &byte_2140B33BB, v22, v22, v146, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v457);
  ++*a4;
  ++*a5;
  unsigned int v147 = (CWIDCrumbBank *)*((void *)this + 46);
  if (v147)
  {
    unint64_t v456 = 0;
    unint64_t v457 = 0;
    unint64_t v455 = 0;
    CWIDCrumbBank::printSize(v147, 0xFFFFFFFFLL, v21, &v457, &v456, &v455);
    *a4 += v457;
    *a5 += v456;
    *a6 += v455;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v148 = 4;
  }
  else {
    uint64_t v148 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1195, (DgnString *)&v457);
  if (v458) {
    uint64_t v153 = (char *)v457;
  }
  else {
    uint64_t v153 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v149, v150, v151, v152, v21, &byte_2140B33BB, v22, v22, v153, v148, v148, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v148;
  *a5 += v148;
  unsigned int v154 = (RecogGermIterator *)*((void *)this + 47);
  if (v154)
  {
    unint64_t v456 = 0;
    unint64_t v457 = 0;
    unint64_t v455 = 0;
    RecogGermIterator::printSize(v154, 0xFFFFFFFFLL, v21, &v457, &v456, &v455);
    *a4 += v457;
    *a5 += v456;
    *a6 += v455;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v155 = 4;
  }
  else {
    uint64_t v155 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1196, (DgnString *)&v457);
  if (v458) {
    unsigned int v160 = (char *)v457;
  }
  else {
    unsigned int v160 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v156, v157, v158, v159, v21, &byte_2140B33BB, v22, v22, v160, v155, v155, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v155;
  *a5 += v155;
  uint64_t v161 = (RecogGermIterator *)*((void *)this + 48);
  if (v161)
  {
    unint64_t v456 = 0;
    unint64_t v457 = 0;
    unint64_t v455 = 0;
    RecogGermIterator::printSize(v161, 0xFFFFFFFFLL, v21, &v457, &v456, &v455);
    *a4 += v457;
    *a5 += v456;
    *a6 += v455;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v162 = 4;
  }
  else {
    uint64_t v162 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1198, (DgnString *)&v457);
  if (v458) {
    uint64_t v167 = (char *)v457;
  }
  else {
    uint64_t v167 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v163, v164, v165, v166, v21, &byte_2140B33BB, v22, v22, v167, v162, v162, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v162;
  *a5 += v162;
  uint64_t v168 = sizeObject((uint64_t)this + 392, 0);
  uint64_t v169 = sizeObject((uint64_t)this + 392, 1);
  uint64_t v170 = sizeObject((uint64_t)this + 392, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1200, (DgnString *)&v457);
  if (v458) {
    unsigned int v175 = (char *)v457;
  }
  else {
    unsigned int v175 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v171, v172, v173, v174, v21, &byte_2140B33BB, v22, v22, v175, v168, v169, v170);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v168;
  *a5 += v169;
  *a6 += v170;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1202, (DgnString *)&v457);
  if (v458) {
    int v180 = (char *)v457;
  }
  else {
    int v180 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v176, v177, v178, v179, v21, &byte_2140B33BB, v22, v22, v180, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += 2;
  *a5 += 2;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v181 = 12;
  }
  else {
    uint64_t v181 = 16;
  }
  uint64_t v182 = *((unsigned int *)this + 136);
  unsigned int v183 = *((_DWORD *)this + 137);
  if (v183 >= v182)
  {
    uint64_t v184 = 0;
    if ((int)v182 > 0) {
      uint64_t v181 = (v181 | 2) + 2 * (v182 - 1);
    }
    uint64_t v185 = v181 + 2 * (v183 - v182);
  }
  else
  {
    uint64_t v184 = 2 * v182;
    uint64_t v185 = v181;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1204, (DgnString *)&v457);
  if (v458) {
    uint64_t v190 = (char *)v457;
  }
  else {
    uint64_t v190 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v186, v187, v188, v189, v21, &byte_2140B33BB, v22, v22, v190, v185, v181, v184);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v185;
  *a5 += v181;
  *a6 += v184;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v191 = 12;
  }
  else {
    uint64_t v191 = 16;
  }
  int v192 = *((_DWORD *)this + 140);
  unsigned int v193 = *((_DWORD *)this + 141);
  BOOL v194 = v193 >= v192;
  uint64_t v195 = v193 - v192;
  if (v194)
  {
    uint64_t v197 = v192 & ~(v192 >> 31);
    int v192 = 0;
    uint64_t v196 = v191 + v197;
    v191 += v197 + v195;
  }
  else
  {
    uint64_t v196 = v191;
  }
  uint64_t v198 = v192;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1206, (DgnString *)&v457);
  if (v458) {
    int v203 = (char *)v457;
  }
  else {
    int v203 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v199, v200, v201, v202, v21, &byte_2140B33BB, v22, v22, v203, v191, v196, v198);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v191;
  *a5 += v196;
  *a6 += v198;
  uint64_t v204 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v204 = 16;
  }
  uint64_t v205 = *((unsigned int *)this + 144);
  char v206 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    char v206 = 3;
  }
  uint64_t v207 = (((*((_DWORD *)this + 145) - v205) + v205) << v206) + v204;
  uint64_t v208 = (v205 << v206) + v204;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1208, (DgnString *)&v457);
  if (v458) {
    long long v213 = (char *)v457;
  }
  else {
    long long v213 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v209, v210, v211, v212, v21, &byte_2140B33BB, v22, v22, v213, v207, v208, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v207;
  *a5 += v208;
  uint64_t v214 = sizeObject<RecogGerm>((uint64_t)this + 584, 0);
  uint64_t v215 = sizeObject<RecogGerm>((uint64_t)this + 584, 1);
  unint64_t v457 = 0x3FFFFAFFFFFFLL;
  long long v458 = xmmword_2140866D0;
  char v459 = 0;
  int v460 = 1310720000;
  __int16 v461 = 0;
  uint64_t v462 = 0x70000000FFFFFFFELL;
  sizeObject((uint64_t)&v457, 2);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1209, (DgnString *)&v457);
  if (v458) {
    uint64_t v220 = (char *)v457;
  }
  else {
    uint64_t v220 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v216, v217, v218, v219, v21, &byte_2140B33BB, v22, v22, v220, v214, v215, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v214;
  *a5 += v215;
  uint64_t v221 = sizeObject((uint64_t)this + 616, 0) + 17;
  uint64_t v222 = sizeObject((uint64_t)this + 616, 1) + 17;
  uint64_t v223 = sizeObject((uint64_t)this + 616, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1210, (DgnString *)&v457);
  if (v458) {
    uint64_t v228 = (char *)v457;
  }
  else {
    uint64_t v228 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v224, v225, v226, v227, v21, &byte_2140B33BB, v22, v22, v228, v221, v222, v223);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v221;
  *a5 += v222;
  *a6 += v223;
  unint64_t v456 = 0;
  unint64_t v457 = 0;
  unint64_t v455 = 0;
  SearchLMScorer::printSize((Recognizer *)((char *)this + 624), 0xFFFFFFFFLL, v21, &v457, &v456, &v455);
  *a4 += v457;
  *a5 += v456;
  *a6 += v455;
  uint64_t v229 = sizeObject((uint64_t)this + 832, 0);
  uint64_t v230 = sizeObject((uint64_t)this + 832, 1);
  uint64_t v231 = sizeObject((uint64_t)this + 832, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1213, (DgnString *)&v457);
  if (v458) {
    uint64_t v236 = (char *)v457;
  }
  else {
    uint64_t v236 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v232, v233, v234, v235, v21, &byte_2140B33BB, v22, v22, v236, v229, v230, v231);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v229;
  *a5 += v230;
  *a6 += v231;
  uint64_t v237 = PelStats::sizeObject((uint64_t)this + 880, 0);
  uint64_t v238 = PelStats::sizeObject((uint64_t)this + 880, 1);
  uint64_t v239 = PelStats::sizeObject((uint64_t)this + 880, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1215, (DgnString *)&v457);
  if (v458) {
    uint64_t v244 = (char *)v457;
  }
  else {
    uint64_t v244 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v240, v241, v242, v243, v21, &byte_2140B33BB, v22, v22, v244, v237, v238, v239);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v237;
  *a5 += v238;
  *a6 += v239;
  uint64_t v245 = LMStats::sizeObject((uint64_t)this + 1056, 0);
  uint64_t v246 = LMStats::sizeObject((uint64_t)this + 1056, 1);
  uint64_t v247 = LMStats::sizeObject((uint64_t)this + 1056, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1216, (DgnString *)&v457);
  if (v458) {
    uint64_t v252 = (char *)v457;
  }
  else {
    uint64_t v252 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v248, v249, v250, v251, v21, &byte_2140B33BB, v22, v22, v252, v245, v246, v247);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v245;
  *a5 += v246;
  *a6 += v247;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1217, (DgnString *)&v457);
  if (v458) {
    uint64_t v257 = (char *)v457;
  }
  else {
    uint64_t v257 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v253, v254, v255, v256, v21, &byte_2140B33BB, v22, v22, v257, 24, 24, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += 24;
  *a5 += 24;
  uint64_t v258 = PelStats::sizeObject((uint64_t)this + 1240, 0);
  uint64_t v259 = PelStats::sizeObject((uint64_t)this + 1240, 1);
  uint64_t v260 = PelStats::sizeObject((uint64_t)this + 1240, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1219, (DgnString *)&v457);
  if (v458) {
    uint64_t v265 = (char *)v457;
  }
  else {
    uint64_t v265 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v261, v262, v263, v264, v21, &byte_2140B33BB, v22, v22, v265, v258, v259, v260);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v258;
  *a5 += v259;
  *a6 += v260;
  uint64_t v266 = LMStats::sizeObject((uint64_t)this + 1416, 0);
  uint64_t v267 = LMStats::sizeObject((uint64_t)this + 1416, 1);
  uint64_t v268 = LMStats::sizeObject((uint64_t)this + 1416, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1221, (DgnString *)&v457);
  if (v458) {
    uint64_t v273 = (char *)v457;
  }
  else {
    uint64_t v273 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v269, v270, v271, v272, v21, &byte_2140B33BB, v22, v22, v273, v266, v267, v268);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v266;
  *a5 += v267;
  *a6 += v268;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1223, (DgnString *)&v457);
  if (v458) {
    uint64_t v278 = (char *)v457;
  }
  else {
    uint64_t v278 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v274, v275, v276, v277, v21, &byte_2140B33BB, v22, v22, v278, 24, 24, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += 24;
  *a5 += 24;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1226, (DgnString *)&v457);
  if (v458) {
    uint64_t v283 = (char *)v457;
  }
  else {
    uint64_t v283 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v279, v280, v281, v282, v21, &byte_2140B33BB, v22, v22, v283, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1249, (DgnString *)&v457);
  if (v458) {
    uint64_t v288 = (char *)v457;
  }
  else {
    uint64_t v288 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v284, v285, v286, v287, v21, &byte_2140B33BB, v22, v22, v288, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += 8;
  *a5 += 8;
  uint64_t v289 = LatticeStats::sizeObject((uint64_t)this + 1616, 0);
  uint64_t v290 = LatticeStats::sizeObject((uint64_t)this + 1616, 1);
  uint64_t v291 = LatticeStats::sizeObject((uint64_t)this + 1616, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1251, (DgnString *)&v457);
  if (v458) {
    uint64_t v296 = (char *)v457;
  }
  else {
    uint64_t v296 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v292, v293, v294, v295, v21, &byte_2140B33BB, v22, v22, v296, v289, v290, v291);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v289;
  *a5 += v290;
  *a6 += v291;
  uint64_t v297 = SnapTime::sizeObject((uint64_t)this + 2024, 0);
  uint64_t v298 = SnapTime::sizeObject((uint64_t)this + 2024, 1);
  uint64_t v299 = SnapTime::sizeObject((uint64_t)this + 2024, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1253, (DgnString *)&v457);
  if (v458) {
    uint64_t v304 = (char *)v457;
  }
  else {
    uint64_t v304 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v300, v301, v302, v303, v21, &byte_2140B33BB, v22, v22, v304, v297, v298, v299);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v297;
  *a5 += v298;
  *a6 += v299;
  uint64_t v305 = SnapTime::sizeObject((uint64_t)this + 2056, 0);
  uint64_t v306 = SnapTime::sizeObject((uint64_t)this + 2056, 1);
  uint64_t v307 = SnapTime::sizeObject((uint64_t)this + 2056, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1255, (DgnString *)&v457);
  if (v458) {
    uint64_t v312 = (char *)v457;
  }
  else {
    uint64_t v312 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v308, v309, v310, v311, v21, &byte_2140B33BB, v22, v22, v312, v305, v306, v307);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v305;
  *a5 += v306;
  *a6 += v307;
  uint64_t v313 = SnapTime::sizeObject((uint64_t)this + 2088, 0);
  uint64_t v314 = SnapTime::sizeObject((uint64_t)this + 2088, 1);
  uint64_t v315 = SnapTime::sizeObject((uint64_t)this + 2088, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1257, (DgnString *)&v457);
  if (v458) {
    uint64_t v320 = (char *)v457;
  }
  else {
    uint64_t v320 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v316, v317, v318, v319, v21, &byte_2140B33BB, v22, v22, v320, v313, v314, v315);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v313;
  *a5 += v314;
  *a6 += v315;
  uint64_t v321 = SnapTime::sizeObject((uint64_t)this + 2120, 0);
  uint64_t v322 = SnapTime::sizeObject((uint64_t)this + 2120, 1);
  uint64_t v323 = SnapTime::sizeObject((uint64_t)this + 2120, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1259, (DgnString *)&v457);
  if (v458) {
    int v328 = (char *)v457;
  }
  else {
    int v328 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v324, v325, v326, v327, v21, &byte_2140B33BB, v22, v22, v328, v321, v322, v323);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v321;
  *a5 += v322;
  *a6 += v323;
  uint64_t v329 = SnapTime::sizeObject((uint64_t)this + 2152, 0);
  uint64_t v330 = SnapTime::sizeObject((uint64_t)this + 2152, 1);
  uint64_t v331 = SnapTime::sizeObject((uint64_t)this + 2152, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1261, (DgnString *)&v457);
  if (v458) {
    uint64_t v336 = (char *)v457;
  }
  else {
    uint64_t v336 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v332, v333, v334, v335, v21, &byte_2140B33BB, v22, v22, v336, v329, v330, v331);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v329;
  *a5 += v330;
  *a6 += v331;
  uint64_t v337 = SnapTime::sizeObject((uint64_t)this + 2184, 0);
  uint64_t v338 = SnapTime::sizeObject((uint64_t)this + 2184, 1);
  uint64_t v339 = SnapTime::sizeObject((uint64_t)this + 2184, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1263, (DgnString *)&v457);
  if (v458) {
    uint64_t v344 = (char *)v457;
  }
  else {
    uint64_t v344 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v340, v341, v342, v343, v21, &byte_2140B33BB, v22, v22, v344, v337, v338, v339);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v337;
  *a5 += v338;
  *a6 += v339;
  uint64_t v345 = (Constraint *)*((void *)this + 277);
  if (v345)
  {
    unint64_t v456 = 0;
    unint64_t v457 = 0;
    unint64_t v455 = 0;
    Constraint::printSize(v345, 0xFFFFFFFFLL, v21, &v457, &v456, &v455);
    *a4 += v457;
    *a5 += v456;
    *a6 += v455;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v346 = 4;
  }
  else {
    uint64_t v346 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1265, (DgnString *)&v457);
  if (v458) {
    uint64_t v351 = (char *)v457;
  }
  else {
    uint64_t v351 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v347, v348, v349, v350, v21, &byte_2140B33BB, v22, v22, v351, v346, v346, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v346;
  *a5 += v346;
  uint64_t v352 = sizeObject<CWIDAC>((uint64_t)this + 2224, 0);
  uint64_t v353 = sizeObject<CWIDAC>((uint64_t)this + 2224, 1);
  HIDWORD(v457) = 0x3FFF;
  long long v458 = xmmword_2140866D0;
  sizeObject((uint64_t)&v457, 2);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1267, (DgnString *)&v457);
  if (v458) {
    uint64_t v358 = (char *)v457;
  }
  else {
    uint64_t v358 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v354, v355, v356, v357, v21, &byte_2140B33BB, v22, v22, v358, v352, v353, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v352;
  *a5 += v353;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1269, (DgnString *)&v457);
  if (v458) {
    uint64_t v363 = (char *)v457;
  }
  else {
    uint64_t v363 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v359, v360, v361, v362, v21, &byte_2140B33BB, v22, v22, v363, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v457);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1271, (DgnString *)&v457);
  if (v458) {
    uint64_t v368 = (char *)v457;
  }
  else {
    uint64_t v368 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v364, v365, v366, v367, v21, &byte_2140B33BB, v22, v22, v368, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1273, (DgnString *)&v457);
  if (v458) {
    uint64_t v373 = (char *)v457;
  }
  else {
    uint64_t v373 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v369, v370, v371, v372, v21, &byte_2140B33BB, v22, v22, v373, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1275, (DgnString *)&v457);
  if (v458) {
    uint64_t v378 = (char *)v457;
  }
  else {
    uint64_t v378 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v374, v375, v376, v377, v21, &byte_2140B33BB, v22, v22, v378, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v457);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1277, (DgnString *)&v457);
  if (v458) {
    uint64_t v383 = (char *)v457;
  }
  else {
    uint64_t v383 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v379, v380, v381, v382, v21, &byte_2140B33BB, v22, v22, v383, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += 4;
  *a5 += 4;
  uint64_t v384 = sizeObject((uint64_t)this + 2260, 0);
  uint64_t v385 = sizeObject((uint64_t)this + 2260, 1);
  uint64_t v386 = sizeObject((uint64_t)this + 2260, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1279, (DgnString *)&v457);
  if (v458) {
    uint64_t v391 = (char *)v457;
  }
  else {
    uint64_t v391 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v387, v388, v389, v390, v21, &byte_2140B33BB, v22, v22, v391, v384, v385, v386);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v384;
  *a5 += v385;
  *a6 += v386;
  uint64_t v392 = sizeObject<HistoryAndBigScore>((uint64_t)this + 2288, 0);
  uint64_t v393 = sizeObject<HistoryAndBigScore>((uint64_t)this + 2288, 1);
  unint64_t v457 = 0x70000000FFFFFFFELL;
  LODWORD(v45DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 1879048192;
  sizeObject((uint64_t)&v457, 2);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1281, (DgnString *)&v457);
  if (v458) {
    uint64_t v398 = (char *)v457;
  }
  else {
    uint64_t v398 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v394, v395, v396, v397, v21, &byte_2140B33BB, v22, v22, v398, v392, v393, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v392;
  *a5 += v393;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1282, (DgnString *)&v457);
  if (v458) {
    uint64_t v403 = (char *)v457;
  }
  else {
    uint64_t v403 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v399, v400, v401, v402, v21, &byte_2140B33BB, v22, v22, v403, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v457);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1284, (DgnString *)&v457);
  if (v458) {
    uint64_t v408 = (char *)v457;
  }
  else {
    uint64_t v408 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v404, v405, v406, v407, v21, &byte_2140B33BB, v22, v22, v408, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1286, (DgnString *)&v457);
  if (v458) {
    uint64_t v413 = (char *)v457;
  }
  else {
    uint64_t v413 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v409, v410, v411, v412, v21, &byte_2140B33BB, v22, v22, v413, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1288, (DgnString *)&v457);
  if (v458) {
    uint64_t v418 = (char *)v457;
  }
  else {
    uint64_t v418 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v414, v415, v416, v417, v21, &byte_2140B33BB, v22, v22, v418, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1290, (DgnString *)&v457);
  if (v458) {
    uint64_t v423 = (char *)v457;
  }
  else {
    uint64_t v423 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v419, v420, v421, v422, v21, &byte_2140B33BB, v22, v22, v423, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1292, (DgnString *)&v457);
  if (v458) {
    uint64_t v428 = (char *)v457;
  }
  else {
    uint64_t v428 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v424, v425, v426, v427, v21, &byte_2140B33BB, v22, v22, v428, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1294, (DgnString *)&v457);
  if (v458) {
    uint64_t v433 = (char *)v457;
  }
  else {
    uint64_t v433 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v429, v430, v431, v432, v21, &byte_2140B33BB, v22, v22, v433, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1296, (DgnString *)&v457);
  if (v458) {
    uint64_t v438 = (char *)v457;
  }
  else {
    uint64_t v438 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v434, v435, v436, v437, v21, &byte_2140B33BB, v22, v22, v438, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += 4;
  *a5 += 4;
  uint64_t v439 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v439 = 16;
  }
  uint64_t v440 = *((unsigned int *)this + 596);
  uint64_t v441 = 8 * v440;
  if ((int)v440 <= 0) {
    uint64_t v441 = 0;
  }
  uint64_t v442 = v441 + v439;
  uint64_t v443 = v441 + v439 + 8 * (*((_DWORD *)this + 597) - v440);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1298, (DgnString *)&v457);
  if (v458) {
    uint64_t v448 = (char *)v457;
  }
  else {
    uint64_t v448 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v444, v445, v446, v447, v21, &byte_2140B33BB, v22, v22, v448, v443, v442, 0);
  DgnString::~DgnString((DgnString *)&v457);
  *a4 += v443;
  *a5 += v442;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1299, (DgnString *)&v457);
  if (v458) {
    uint64_t v453 = (char *)v457;
  }
  else {
    uint64_t v453 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v449, v450, v451, v452, v454, &byte_2140B33BB, (35 - v454), (35 - v454), v453, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v457);
}

void sub_213FC70EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t Recognizer::beginTopRecSyncRecog(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  *(void *)(result + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = 0;
  *(_DWORD *)(result + 3DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = a2;
  *(void *)(result + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 352) = 0;
  *(void *)(result + 160DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *(void *)(result + 3DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0xFFFFFFF0FFFFFFF0;
  *(void *)(result + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 392) = a3;
  *(void *)(result + 2400) = a4;
  return result;
}

void (***Recognizer::endTopRecSyncRecog(Recognizer *this))(void)
{
  if (*((unsigned char *)this + 304))
  {
    uint64_t v2 = *(PelScoreCache **)(*((void *)this + 34) + 120);
    if (v2)
    {
      PelScoreCache::removeCacheClient(v2, this);
      *((unsigned char *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 360) = 0;
    }
  }
  Active::endActiveSyncRecog(*((Active **)this + 35));
  *((_DWORD *)this + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 136) = 0;
  size_t v3 = *((unsigned int *)this + 140);
  if (v3) {
    bzero(*((void **)this + 69), v3);
  }
  SearchLMScorer::endSearchLMScorerSyncRecog((Recognizer *)((char *)this + 624));
  DgnDelete<RecogGermIterator>(*((void (****)(void))this + 47));
  *((void *)this + 47) = 0;
  int32x2_t result = DgnDelete<RecogGermIterator>(*((void (****)(void))this + 48));
  *((void *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = 0;
  return result;
}

uint64_t Recognizer::beginTopRecPassSyncRecog(Recognizer *this, int a2, int a3, PelScorer *a4)
{
  *((void *)this + 34) = a4;
  *((_DWORD *)this + HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 88) = a2;
  int v6 = *((_DWORD *)this + 87);
  *((_DWORD *)this + 89) = v6 * a2;
  if (*((unsigned char *)this + 304))
  {
    unint64_t v7 = *((void *)a4 + 15);
    uint64_t v8 = *((void *)this + 33);
    uint64_t v9 = v8 + 56;
    uint64_t v10 = v8 + 72;
    if (v6 == 1) {
      uint64_t v11 = v9;
    }
    else {
      uint64_t v11 = v10;
    }
  }
  else
  {
    unint64_t v7 = 0;
    uint64_t v11 = 0;
  }
  Active::beginActiveSyncRecog(*((void *)this + 35), v11, v7, *((_DWORD *)this + 7), *((_DWORD *)this + 8));
  MrecInitModule_sdpres_sdapi();
  uint64_t v20 = 0x3FFFFCFFFFFELL;
  long long v21 = xmmword_2140866D0;
  uint64_t Bucket = Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::findBucket(*((void *)this + 35) + 303024, (uint64_t)&v20);
  if (!*Bucket || (uint64_t v13 = *(void ***)(*Bucket + 40)) == 0)
  {
    uint64_t v14 = *((void *)this + 35);
    if (*((unsigned char *)this + 304)) {
      uint64_t active = Active::newActiveWordSilence(v14, (uint64_t)&v20);
    }
    else {
      uint64_t active = Active::newActiveWordNonAcoustic(v14, (uint64_t)&v20);
    }
    uint64_t v13 = (void **)active;
  }
  ((void (*)(void **, void, void, uint64_t))(*v13)[3])(v13, 0, 0, 4294967294);
  if (*((_DWORD *)this + 78) != 3
    || (uint64_t result = (*(uint64_t (**)(void *))(*v13[1] + 32))(v13[1]), *((_DWORD *)this + 78) != 3))
  {
    uint64_t v17 = (void *)*((void *)this + 46);
    int v19 = *((_DWORD *)this + 72);
    uint64_t result = (uint64_t)CWIDCrumbBank::setFirstFrame(v17, &v19, 0);
  }
  if (v7)
  {
    PelScoreCache::addCacheClient(v7, this);
    *((unsigned char *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 360) = 1;
    uint64_t result = PelScoreCache::setCacheData(v7, *((const PelScoreCacheData **)this + 37));
  }
  *((_DWORD *)this + 77) = a3;
  if (*((_DWORD *)this + 72) == -1) {
    int v18 = a3 - 1;
  }
  else {
    int v18 = 0;
  }
  *((_DWORD *)this + 79) = v18;
  *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = v18;
  *((_DWORD *)this + 81) = 0;
  *((_DWORD *)this + 592) = 0;
  *((_DWORD *)this + 5HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 88) = 0;
  return result;
}

uint64_t Recognizer::endTopRecPassSyncRecog(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(this + 288);
  if (v2 == -1 || (int v2 = *(_DWORD *)(this + 308), v2 != -16))
  {
    if (*(_DWORD *)(this + 316) == v2 && *(_DWORD *)(this + 312) != 3 && *(unsigned char *)(this + 620))
    {
      this = Recognizer::collectLastFrameConfidencePredictors(this, *(unsigned int *)(this + 600));
      *(void *)(v1 + 612) = 4294967280;
      *(unsigned char *)(v1 + 620) = 0;
    }
  }
  if (*(unsigned char *)(v1 + 304))
  {
    this = *(void *)(*(void *)(v1 + 272) + 120);
    if (this)
    {
      signed int v3 = *(_DWORD *)(v1 + 320);
      BOOL v4 = *(_DWORD *)(v1 + 288) == 1;
      return PelScoreCache::removeCacheClientOfFramesFromTimeOn(this, v3, (void *)v4, (void *)v1);
    }
  }
  return this;
}

BOOL Recognizer::checkForDone(Recognizer *this)
{
  int v1 = *((_DWORD *)this + 72);
  if (v1 == -1) {
    return *((_DWORD *)this + 79) == v1;
  }
  int v1 = *((_DWORD *)this + 77);
  return v1 != -16 && *((_DWORD *)this + 79) == v1;
}

unint64_t Recognizer::collectLastFrameConfidencePredictors(unint64_t this, uint64_t a2)
{
  unint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 316);
  if (v4 == -16) {
    int v5 = -16;
  }
  else {
    int v5 = v4 - *(_DWORD *)(this + 288);
  }
  int v6 = (void *)(this + 224);
  for (int i = *(_DWORD *)(this + 232); v5 >= i; *(_DWORD *)(v3 + 232) = i)
  {
    if (i == *(_DWORD *)(v3 + 236))
    {
      this = DgnPrimArray<unsigned int>::reallocElts(v3 + 224, 1, 1);
      int i = *(_DWORD *)(v3 + 232);
    }
    *(_DWORD *)(*(void *)(v3 + 224) + 4 * i) = 0;
    int i = *(_DWORD *)(v3 + 232) + 1;
  }
  uint64_t v8 = (void *)(*(void *)(v3 + 280) + 303240);
  int v9 = *(_DWORD *)(*(void *)(v3 + 280) + 303248);
  int v10 = 0;
  if (v9 - 1 >= 0)
  {
    uint64_t v11 = *v8 + 8 * (v9 - 1);
    do
    {
      this = *(void *)(*(void *)v11 + 8);
      if (*(_DWORD *)(this + 104) || *(unsigned char *)(this + 112))
      {
        this = (*(uint64_t (**)(unint64_t, uint64_t))(*(void *)this + 80))(this, a2);
        v10 += this;
      }
      --v9;
      v11 -= 8;
    }
    while (v9 >= 1);
  }
  *(_DWORD *)(*v6 + 4 * v5) = v10;
  return this;
}

_DWORD *Recognizer::collectByFrameConfidencePredictors(_DWORD *this)
{
  uint64_t v1 = (uint64_t)this;
  int v2 = this[79];
  if (v2 == -16) {
    int v3 = -16;
  }
  else {
    int v3 = v2 - this[72];
  }
  int v4 = this + 56;
  for (int i = this[58]; v3 >= i; *(_DWORD *)(v1 + 232) = i)
  {
    if (i == *(_DWORD *)(v1 + 236))
    {
      this = (_DWORD *)DgnPrimArray<unsigned int>::reallocElts(v1 + 224, 1, 1);
      int i = *(_DWORD *)(v1 + 232);
    }
    *(_DWORD *)(*(void *)(v1 + 224) + 4 * i) = 0;
    int i = *(_DWORD *)(v1 + 232) + 1;
  }
  int v6 = *(_DWORD *)(*(void *)(v1 + 280) + 303248);
  int v7 = 0;
  if (v6 - 1 >= 0)
  {
    uint64_t v8 = (uint64_t *)(*(void *)(*(void *)(v1 + 280) + 303240) + 8 * (v6 - 1));
    do
    {
      uint64_t v9 = *v8--;
      v7 += *(_DWORD *)(*(void *)(v9 + 8) + 104);
      --v6;
    }
    while (v6);
  }
  *(_DWORD *)(*v4 + 4 * v3) = v7;
  return this;
}

unint64_t DgnPrimArray<unsigned int>::add(unint64_t result, int a2)
{
  unint64_t v3 = result;
  unsigned int v4 = *(_DWORD *)(result + 8);
  if (v4 == *(_DWORD *)(result + 12))
  {
    uint64_t result = DgnPrimArray<unsigned int>::reallocElts(result, 1, 1);
    unsigned int v4 = *(_DWORD *)(v3 + 8);
  }
  *(_DWORD *)(*(void *)v3 + 4 * v4) = a2;
  ++*(_DWORD *)(v3 + 8);
  return result;
}

int32x2_t Recognizer::adjustBestForBWBack(Recognizer *this, int a2)
{
  int v2 = *((_DWORD *)this + 79);
  int v3 = -16;
  if (v2 != -16) {
    int v3 = v2 - *((_DWORD *)this + 72);
  }
  if (v3 == *((_DWORD *)this + 77)) {
    int v4 = -16;
  }
  else {
    int v4 = v3;
  }
  return NetMgr::adjustBestForBWBack((NetMgr *)(*((void *)this + 35) + 16), a2, v4, (int *)this + 81);
}

unsigned __int8 *Recognizer::debugFrameStart(unsigned __int8 *this)
{
  if (*(_DWORD *)(gParDiagnosticFrameSpecificCommand + 64))
  {
    uint64_t v1 = this;
    this = *(unsigned __int8 **)(gParDiagnosticFrameSpecificCommand + 56);
    if (*this)
    {
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      DgnSplitStringIntoTokens(this, " \n\r,", (uint64_t)&v34, 0);
      unsigned int v4 = v35;
      if (v35)
      {
        unsigned int v5 = 0;
        do
        {
          unsigned int v6 = v5 + 1;
          uint64_t v7 = v34;
          uint64_t v8 = v5;
          if (v5 + 1 >= v4)
          {
            uint64_t v9 = v34 + 16 * v5;
            if (*(_DWORD *)(v9 + 8)) {
              int v10 = *(char **)v9;
            }
            else {
              int v10 = &byte_2140B33BB;
            }
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 1907, (uint64_t)"kernel/recog", 2, (uint64_t)"%.500s %u", v2, v3, (char)v10);
            uint64_t v7 = v34;
          }
          uint64_t v11 = v7 + 16 * v8;
          if (*(_DWORD *)(v11 + 8)) {
            uint64_t v12 = *(const char **)v11;
          }
          else {
            uint64_t v12 = &byte_2140B33BB;
          }
          uint64_t v13 = atoi(v12);
          if (v13 == *((_DWORD *)v1 + 79))
          {
            uint64_t v18 = v13;
            uint64_t v19 = v7 + 16 * v6;
            if (*(_DWORD *)(v19 + 8)) {
              uint64_t v20 = *(char **)v19;
            }
            else {
              uint64_t v20 = &byte_2140B33BB;
            }
            xlprintf("Attempting DiagnosticFrameSpecificCommand '%.500s' on frame %d\n", v14, v15, v16, v17, v20, v13);
            if (*(_DWORD *)(v19 + 8)) {
              long long v21 = *(const char **)v19;
            }
            else {
              long long v21 = &byte_2140B33BB;
            }
            if (!strcmp(v21, "DisplayObjectSizes()"))
            {
              InternalDisplayObjectSizes();
            }
            else if (!strcmp(v21, "DisplayMemStats()"))
            {
              MemStatsDisplayFromRef(0, 0, 1, 0, 0, 0, 0);
            }
            else if (!strcmp(v21, "DisplayMemChunkStats()"))
            {
              MrecInitModule_sdpres_sdapi();
            }
            else
            {
              uint64_t v22 = strcmp(v21, "ErrThrow()");
              if (v22)
              {
                uint64_t v25 = (MemChunkRegion *)strcmp(v21, "ErrThrowMemory()");
                if (!v25)
                {
                  CurrentRegiouint64_t n = MemChunkRegion::getCurrentRegion(v25);
                  ThrowNewFailure((uint64_t)CurrentRegion, 0);
                }
                if (*v21) {
                  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 433, (uint64_t)"kernel/recog", 3, (uint64_t)"%.500s", v30, v31, (char)v21);
                }
              }
              else
              {
                errThrowInternal(v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 424, (uint64_t)"kernel/recog", 8, (uint64_t)"%.500s", v23, v24, (char)v21);
              }
            }
            if (*(_DWORD *)(v19 + 8)) {
              uint64_t v32 = *(char **)v19;
            }
            else {
              uint64_t v32 = &byte_2140B33BB;
            }
            xlprintf("Finished DiagnosticFrameSpecificCommand '%.500s' on frame %d\n", v26, v27, v28, v29, v32, v18);
          }
          unsigned int v5 = v8 + 2;
          unsigned int v4 = v35;
        }
        while ((int)v8 + 2 < v35);
      }
      return (unsigned __int8 *)DgnArray<DgnString>::releaseAll((uint64_t)&v34);
    }
  }
  return this;
}

void sub_213FC7A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  DgnArray<DgnString>::releaseAll((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *Recognizer::endNonAcousticFrame(uint64_t *this)
{
  if (*((_DWORD *)this + 72) != -1)
  {
    uint64_t v1 = this;
    if (*((_DWORD *)this + 77) == -16)
    {
      uint64_t v2 = this[35];
      if (!*(_DWORD *)(v2 + 303248)
        || (uint64_t v5 = 0x3FFFFCFFFFFDLL,
            long long v6 = xmmword_2140866D0,
            this = Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::findBucket(v2 + 303024, (uint64_t)&v5),
            *this)
        && (uint64_t v3 = *(void *)(*this + 40)) != 0
        && ((uint64_t v4 = *(void *)(v3 + 8), *(_DWORD *)(v4 + 104)) || *(unsigned char *)(v4 + 112))
        && *(_DWORD *)(v1[35] + 303248) == 1)
      {
        *((_DWORD *)v1 + 77) = *((_DWORD *)v1 + 79) + 1;
      }
    }
  }
  return this;
}

uint64_t Recognizer::setRecogEndTime(uint64_t this, int a2)
{
  *(_DWORD *)(this + 30DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = a2;
  return this;
}

uint64_t Recognizer::checkForAbort(Recognizer *this)
{
  unsigned int v2 = *(_DWORD *)(*((void *)this + 35) + 88);
  int v3 = *((_DWORD *)this + 21);
  BOOL v4 = v3 > 0 && v2 >= v3;
  char v5 = v4;
  *((unsigned char *)this + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304) = v5;
  MemChunkRegion::getRegionStats(0, (uint64_t)&v18);
  if (!*((unsigned char *)this + 2304))
  {
    uint64_t v7 = *((unsigned int *)this + 22);
    if ((int)v7 < 1 || (BOOL v14 = v19 < v7, *((unsigned char *)this + 2304) = v19 >= v7, v14))
    {
      if (!*((unsigned char *)this + 304)) {
        goto LABEL_24;
      }
      int v10 = *((_DWORD *)this + 79);
      if (v10 < 50) {
        goto LABEL_24;
      }
      double v11 = (double)v2 / (double)v10;
      double v12 = *((double *)this + 201);
      if (v12 <= v11) {
        double v12 = (double)v2 / (double)v10;
      }
      int v13 = *((_DWORD *)this + 23);
      *((double *)this + 201) = v12;
      BOOL v14 = v11 < (double)v13 || v13 <= 0;
      BOOL v15 = !v14;
      *((unsigned char *)this + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304) = v15;
      if (v15)
      {
        uint64_t v8 = this;
        int v9 = 3;
      }
      else
      {
LABEL_24:
        int v16 = *((_DWORD *)this + 24);
        if (v16 < 1)
        {
          uint64_t v6 = 0;
          *((unsigned char *)this + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304) = 0;
          return v6;
        }
        BOOL v4 = *((_DWORD *)this + 302) >= v16;
        *((unsigned char *)this + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304) = v4;
        if (!v4) {
          return 0;
        }
        uint64_t v8 = this;
        int v9 = 4;
      }
    }
    else
    {
      uint64_t v8 = this;
      int v9 = 2;
    }
    Recognizer::setSearchAbortRecognizerStats((uint64_t)v8, v9);
    return 1;
  }
  uint64_t v6 = 1;
  Recognizer::setSearchAbortRecognizerStats((uint64_t)this, 1);
  return v6;
}

void Recognizer::setSearchAbortRecognizerStats(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 230DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = a2;
  unsigned int v3 = *(_DWORD *)(*(void *)(a1 + 280) + 88);
  *(_DWORD *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 312) = *(_DWORD *)(a1 + 1208);
  *(_DWORD *)(a1 + 23DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v3;
  MemChunkRegion::getRegionStats(0, (uint64_t)v6);
  *(void *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 320) = v6[1];
  int v4 = *(_DWORD *)(a1 + 316);
  if (v4) {
    double v5 = (double)v3 / (double)v4;
  }
  else {
    double v5 = 0.0;
  }
  *(double *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 328) = v5;
}

uint64_t Recognizer::turnOffPrefilterer(Recognizer *this)
{
  if (*((_DWORD *)this + 9)) {
    return 0;
  }
  int v2 = *(_DWORD *)(*((void *)this + 35) + 303248);
  if (v2 - 1 >= 0)
  {
    for (uint64_t i = *(void *)(*((void *)this + 35) + 303240) + 8 * (v2 - 1); ; i -= 8)
    {
      uint64_t v4 = *(void *)(*(void *)i + 8);
      if ((*(_DWORD *)(v4 + 104) || *(unsigned char *)(v4 + 112))
        && *(_DWORD *)(v4 + 16) != -50331651
        && *(unsigned char *)(*(void *)i + 36))
      {
        break;
      }
      if (--v2 <= 0) {
        return 1;
      }
    }
    return 0;
  }
  return 1;
}

void Recognizer::doFrame1(Recognizer *this)
{
  *((_DWORD *)this + 592) = 0;
  *((_DWORD *)this + 5HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 88) = 0;
}

void Recognizer::beginTopRecFrame(Recognizer *this, int a2)
{
  if (*((_DWORD *)this + 78) != 3) {
    CWIDCrumbBank::ensureCrumbFrame(*((_DWORD **)this + 46), a2);
  }
  *((_DWORD *)this + 400) = 0;
}

uint64_t Recognizer::doFrame2(Recognizer *this, uint64_t a2)
{
  if (*((unsigned char *)this + 304))
  {
    (*(void (**)(void, void, void, uint64_t, char *, void))(**((void **)this + 34) + 56))(*((void *)this + 34), *((unsigned int *)this + 79), 0, a2, (char *)this + 880, 0);
    if (!*((_DWORD *)this + 78))
    {
      if (*((unsigned char *)this + 25))
      {
        uint64_t v16 = *((void *)this + 35);
        if (*(_DWORD *)(v16 + 302984) == *(_DWORD *)(v16 + 302960)) {
          DgnIdFactory<NetNBestTraceNoTime<unsigned int>,1024u>::addChunk(v16 + 302952);
        }
      }
    }
  }
  int v3 = *((_DWORD *)this + 79);
  if (v3 != -16)
  {
    int v4 = *((_DWORD *)this + 72);
    int v5 = v3 - v4;
    if (v4 == 1)
    {
      if (v5 != -1) {
        goto LABEL_9;
      }
    }
    else if (v5 != *((_DWORD *)this + 77))
    {
      goto LABEL_9;
    }
  }
  int v5 = -16;
LABEL_9:
  if (*((_DWORD *)this + 78) == 3)
  {
    Recognizer::adjustBestForBWBack(this, 0);
    int v6 = 5000;
  }
  else
  {
    int v6 = NetMgr::normalizeBestAndComputeEstimatedThresh((NetMgr *)(*((void *)this + 35) + 16), v5, *((_DWORD *)this + 4) + *((_DWORD *)this + 3), (int *)this + 81);
    int v7 = *((_DWORD *)this + 81);
    unsigned int v8 = *((_DWORD *)this + 84);
    if (v8 == *((_DWORD *)this + 85))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 328, 1, 1);
      unsigned int v8 = *((_DWORD *)this + 84);
    }
    *(_DWORD *)(*((void *)this + 41) + 4 * vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v7;
    ++*((_DWORD *)this + 84);
  }
  int v9 = 5000;
  if (v5 != -16)
  {
    int v9 = *((_DWORD *)this + 150);
    *(void *)((char *)this + 612) = 4294967280;
    *((unsigned char *)this + 620) = 0;
  }
  int v10 = *((_DWORD *)this + 13);
  if (v10 == -1) {
    uint64_t v11 = 5000;
  }
  else {
    uint64_t v11 = (v6 - v10);
  }
  uint64_t result = Active::scoreActiveWords(*((void *)this + 35), *((unsigned int *)this + 79), v9, v6, *((_DWORD *)this + 5), v11, *((unsigned int *)this + 14));
  if (v5 != -16 && *((_DWORD *)this + 78) != 3) {
    uint64_t result = (uint64_t)Recognizer::collectByFrameConfidencePredictors(this);
  }
  *((_DWORD *)this + 86) = 0;
  if (*((unsigned char *)this + 304))
  {
    int v13 = *(PelScoreCache **)(*((void *)this + 34) + 120);
    int ScoreNoBackoff = PelScoreCache::getScoreNoBackoff(v13, 0);
    uint64_t v15 = *((void *)this + 34);
    *((_DWORD *)this + 86) = ScoreNoBackoff + *(__int16 *)(*((void *)this + 35) + 260);
    (*(void (**)(uint64_t, void, char *))(*(void *)v15 + 64))(v15, *((unsigned int *)this + 79), (char *)this + 880);
    uint64_t result = PelScoreCache::removeCacheClientOfFrame((uint64_t)v13, *((_DWORD *)this + 79), this);
    *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = *((_DWORD *)this + 72) + *((_DWORD *)this + 79);
  }
  return result;
}

uint64_t Recognizer::doFrame3(uint64_t a1, uint64_t a2)
{
  int v4 = NetMgr::computeThreshScore((NetMgr *)(*(void *)(a1 + 280) + 16), *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 40), *(_DWORD *)(a1 + 44), (unsigned int *)(a1 + 1216), (unint64_t *)(a1 + 1224));
  BOOL active = Active::thresholdActiveWords(*(Active **)(a1 + 280), *(_DWORD *)(a1 + 316), v4, *(_DWORD *)(a1 + 20));
  if (*(_DWORD *)(a1 + 312) == 3)
  {
    uint64_t v6 = *(void *)(a1 + 280);
    int v7 = *(_DWORD *)(a1 + 288);
    int v8 = *(_DWORD *)(a1 + 316);
    *(_DWORD *)(a1 + 604) = *(__int16 *)(v6 + 264);
    *(_DWORD *)(a1 + 600) = v4;
    *(_DWORD *)(a1 + 6DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v7;
    *(_DWORD *)(a1 + 60DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v8;
    *(_DWORD *)(a1 + 612) = v8 + v7;
    *(unsigned char *)(a1 + 620) = 1;
  }
  else
  {
    Recognizer::seedActiveWords(a1, v4, 20000, active, a2);
    int v9 = *(_DWORD *)(a1 + 316);
    int v10 = *(_DWORD *)(a1 + 248);
    if (v9 >= v10)
    {
      do
      {
        if (v10 == *(_DWORD *)(a1 + 252))
        {
          DgnPrimArray<unsigned int>::reallocElts(a1 + 240, 1, 1);
          int v10 = *(_DWORD *)(a1 + 248);
        }
        uint64_t v11 = *(void *)(a1 + 240);
        *(_DWORD *)(v11 + 4 * v10) = 0;
        int v10 = *(_DWORD *)(a1 + 248) + 1;
        *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 248) = v10;
        int v9 = *(_DWORD *)(a1 + 316);
      }
      while (v9 >= v10);
    }
    else
    {
      uint64_t v11 = *(void *)(a1 + 240);
    }
    *(_DWORD *)(v11 + 4 * v9) = *(_DWORD *)(a1 + 1600);
    uint64_t v6 = *(void *)(a1 + 280);
  }
  int v12 = *(__int16 *)(v6 + 216);
  if (v12 == 20000) {
    int v13 = -2;
  }
  else {
    int v13 = *(_DWORD *)(v6 + 208);
  }
  *(_DWORD *)(a1 + 2244) = v13;
  *(_DWORD *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 248) = v12;
  uint64_t v14 = *(void *)(v6 + 232);
  if (!v14)
  {
    *(unsigned char *)(a1 + 2252) = 0;
    goto LABEL_20;
  }
  *(unsigned char *)(a1 + 2252) = 1;
  unsigned int v15 = *(_DWORD *)(v14 + 16);
  *(_DWORD *)(a1 + 2260) = v15;
  *(_DWORD *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 264) = *(_DWORD *)(v14 + 20);
  *(_OWORD *)(a1 + 226DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *(_OWORD *)(v14 + 24);
  if (v15 >> 25 == 126)
  {
    int v16 = -16;
  }
  else
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)v14 + 96))(v14))
    {
      *(_DWORD *)(a1 + 22DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 104))(v14);
      goto LABEL_20;
    }
    int v16 = *(_DWORD *)(a1 + 316);
  }
  *(_DWORD *)(a1 + 22DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = v16;
LABEL_20:
  if (*(_DWORD *)(a1 + 312) != 1)
  {
    if (*(unsigned char *)(a1 + 304))
    {
      unsigned int v17 = *(_DWORD *)(a1 + 80);
      unsigned int v18 = *(_DWORD *)(a1 + 316);
      if (v17 && !(v18 % v17))
      {
        Active::prune(*(void (****)(void))(a1 + 280));
        unsigned int v18 = *(_DWORD *)(a1 + 316);
      }
      Active::pruneTimeConstrained(*(Active **)(a1 + 280), v18);
    }
    else
    {
      Active::prune(*(void (****)(void))(a1 + 280));
      Recognizer::endNonAcousticFrame((uint64_t *)a1);
    }
  }
  uint64_t result = Recognizer::endTopRecFrame((Recognizer *)a1, *(_DWORD *)(a1 + 316));
  *(_DWORD *)(a1 + 316) += *(_DWORD *)(a1 + 288);
  ++*(_DWORD *)(a1 + 1208);
  return result;
}

void Recognizer::seedActiveWords(uint64_t a1, int a2, int a3, int a4, uint64_t a5)
{
  int v9 = *(_DWORD *)(a1 + 312);
  if (v9 != 3) {
    a3 = *(__int16 *)(*(void *)(a1 + 280) + 264);
  }
  int v10 = *(_DWORD *)(a1 + 288);
  int v11 = *(_DWORD *)(a1 + 316);
  *(_DWORD *)(a1 + 604) = a3;
  *(_DWORD *)(a1 + 600) = a2;
  *(_DWORD *)(a1 + 6DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v10;
  *(_DWORD *)(a1 + 60DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v11;
  *(_DWORD *)(a1 + 612) = v11 + v10;
  *(unsigned char *)(a1 + 620) = 1;
  if (v9 == 3)
  {
    Recognizer::doBackward((Recognizer *)a1);
  }
  else
  {
    CWIDCrumbBank::setBestAccumScore(*(CWIDCrumbBank **)(a1 + 368), v11, *(_DWORD *)(a1 + 324));
    Recognizer::doFinalSilForward((Recognizer *)a1);
    if (a4)
    {
      Recognizer::doForward(a1, a5);
    }
  }
}

uint64_t Recognizer::endTopRecFrame(Recognizer *this, int a2)
{
  if (*((_DWORD *)this + 78) != 3) {
    CWIDCrumbBank::endCrumbFrame(*((CWIDCrumbBank **)this + 46), a2, *((_DWORD *)this + 86));
  }

  return MrecInitModule_sdpres_sdapi();
}

uint64_t Recognizer::getBestHistoryMaybeExtend(Recognizer *this, char a2, int a3, int *a4)
{
  uint64_t v8 = *((void *)this + 35);
  uint64_t v31 = 0x3FFFFCFFFFFDLL;
  long long v32 = xmmword_2140866D0;
  uint64_t Bucket = Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::findBucket(v8 + 303024, (uint64_t)&v31);
  if (!*Bucket
    || *((unsigned char *)this + 2304)
    || (a2 & 1) != 0
    || (uint64_t v10 = *(void *)(*Bucket + 40)) == 0
    || (uint64_t v11 = *(void *)(v10 + 8), (v12 = *(_DWORD *)(v11 + 104)) == 0) && (!*(unsigned char *)(v11 + 112) || (a3 & 1) == 0))
  {
    uint64_t v23 = *((void *)this + 35);
    if (*(_WORD *)(v23 + 216) == 20000)
    {
      int v24 = 1879048192;
      uint64_t v25 = 4294967294;
    }
    else
    {
      uint64_t v25 = *(unsigned int *)(v23 + 208);
      int v24 = 1879048192;
    }
    goto LABEL_38;
  }
  uint64_t v13 = *(unsigned int *)(v11 + 64);
  if (!v13) {
    goto LABEL_18;
  }
  uint64_t v14 = 0;
  unsigned int v15 = *(uint64_t **)(v11 + 56);
  do
  {
    uint64_t v17 = *v15++;
    uint64_t v16 = v17;
    if (*(__int16 *)(v17 + 8) < 20000) {
      uint64_t v14 = v16;
    }
    --v13;
  }
  while (v13);
  BOOL v18 = !v14 || a3 == 0;
  if (v18)
  {
LABEL_18:
    int v19 = 1879048192;
    goto LABEL_19;
  }
  int v19 = 20000;
  if (*(_WORD *)(v14 + 8) == 20000)
  {
LABEL_19:
    int v20 = -2;
    if (!v12)
    {
LABEL_35:
      int v24 = *((_DWORD *)this + 81) + v19;
      int v29 = *((_DWORD *)this + 79);
      uint64_t v25 = Recognizer::extendHistory((uint64_t)this, v20, (int *)(v11 + 16), 0, v29 + 1, v29 + 1);
      CWIDCrumbBank::addZeroFrameFinalSilHABS(*((void *)this + 46), v29, *(void *)(v10 + 8) + 16, v25, v24);
      goto LABEL_38;
    }
    goto LABEL_20;
  }
  int v20 = *(_DWORD *)v14;
  int v19 = *(__int16 *)(v14 + 8);
  if (!v12) {
    goto LABEL_35;
  }
LABEL_20:
  unsigned int v21 = *(_DWORD *)(v11 + 40);
  if (v21 < 2)
  {
    uint64_t v22 = 0;
  }
  else if (v21 - 3 >= 2)
  {
    BOOL v18 = v21 == 2;
    uint64_t v22 = 1;
    if (!v18) {
      uint64_t v22 = 255;
    }
  }
  else
  {
    uint64_t v22 = **(unsigned __int8 **)(v11 + 88);
  }
  uint64_t v26 = *(void *)(*(void *)(v11 + 72) + 8 * v22);
  int v27 = *(__int16 *)(v26 + 8);
  if (v19 <= v27) {
    goto LABEL_35;
  }
  if (v27 == 20000) {
    int v28 = -2;
  }
  else {
    int v28 = *(_DWORD *)v26;
  }
  int v24 = *((_DWORD *)this + 81) + v27;
  uint64_t v25 = Recognizer::extendHistory((uint64_t)this, v28, (int *)(v11 + 16), 0, *((_DWORD *)this + 79), *((_DWORD *)this + 79));
LABEL_38:
  *a4 = v24;
  return v25;
}

uint64_t Recognizer::extendHistory(uint64_t a1, int a2, int *a3, int a4, int a5, int a6)
{
  char v8 = 0;
  uint64_t result = HistoryMgr::extendHistory(*(void *)(a1 + 280) + 72, a2, a3, a4, a5, a6, &v8);
  if (v8) {
    ++*(_DWORD *)(a1 + 1212);
  }
  return result;
}

uint64_t Recognizer::makePartialResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, _DWORD *a6, uint64_t a7, unint64_t a8)
{
  int v16 = a6[2];
  if (v16 >= 1)
  {
    uint64_t v17 = 112 * v16 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(void *)a6 + v17))(*(void *)a6 + v17);
      v17 -= 112;
    }
    while (v17 != -112);
  }
  a6[2] = 0;
  *(_DWORD *)(a8 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  if (*(_DWORD *)(a1 + 2248) == 20000) {
    return 1879048192;
  }
  unsigned int v18 = *(_DWORD *)(a1 + 2244);
  if (v18 == -2) {
    return 1879048192;
  }
  *(void *)uint64_t v52 = a3;
  int v51 = a5;
  int v53 = *(_DWORD *)(a1 + 324);
  int v54 = *(_DWORD *)(a1 + 2248);
  HistoryMgr::getForwardContents(*(void *)(a1 + 280) + 72, v18, a7);
  memset(v69, 0, sizeof(v69));
  int v70 = 0;
  if (*(_DWORD *)(a7 + 8))
  {
    uint64_t v21 = 0;
    unint64_t v22 = 0;
    int v23 = 0;
    while (1)
    {
      uint64_t v24 = *(void *)a7 + v21;
      int v25 = *(_DWORD *)(v24 + 24);
      if ((v25 - v23) < *(_DWORD *)(a1 + 220)) {
        return (v53 + v54);
      }
      signed int v26 = *(_DWORD *)(v24 + 28);
      WordLatticeLC::WordLatticeLC((uint64_t)&v59, v24, v23, v25 - v23, v26 - v25, (uint64_t)v69);
      uint64_t v27 = a6[2];
      if (v27 == a6[3])
      {
        DgnArray<WordLatticeLC>::reallocElts((uint64_t)a6, 1, 1);
        LODWORD(v27) = a6[2];
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(void *)a6 + 112 * v27), (const WordLatticeLC *)&v59);
      ++a6[2];
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)&v59);
      uint64_t v28 = *(unsigned int *)(a8 + 8);
      if (v28 == *(_DWORD *)(a8 + 12))
      {
        int v20 = DgnPrimArray<unsigned int>::reallocElts(a8, 1, 1);
        uint64_t v28 = *(unsigned int *)(a8 + 8);
      }
      *(_DWORD *)(*(void *)a8 + 4 * v2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 1;
      ++*(_DWORD *)(a8 + 8);
      ++v22;
      v21 += 32;
      int v23 = v26;
      if (v22 >= *(unsigned int *)(a7 + 8)) {
        goto LABEL_17;
      }
    }
  }
  signed int v26 = 0;
LABEL_17:
  if (!*(unsigned char *)(a1 + 2252))
  {
    BOOL v33 = 1;
    if (!a2) {
      return (v53 + v54);
    }
    goto LABEL_29;
  }
  uint64_t v29 = a1 + 2260;
  unsigned int v30 = *(_DWORD *)(a1 + 2260);
  if (v30 >> 25 == 126)
  {
    int v31 = v30 & 0xFFFFFF;
    if ((v30 & 0xFFFFFF) == 0xFFFFFD && a6[2] == 1)
    {
      signed int v32 = *(_DWORD *)(a1 + 316);
      *(_DWORD *)(*(void *)a6 + 20) += v32 - v26;
      BOOL v33 = 1;
      signed int v26 = v32;
      if (!a2) {
        return (v53 + v54);
      }
LABEL_29:
      if (v33)
      {
        uint64_t v57 = 0x3FFFFAFFFFFCLL;
        long long v58 = xmmword_2140866D0;
        int v35 = a6[2];
        if (v35)
        {
          uint64_t v36 = *(void *)a6 + 112 * (v35 - 1);
          uint64_t v57 = *(void *)(v36 + 88);
          long long v58 = *(_OWORD *)(v36 + 96);
        }
        uint64_t v37 = *(PrefilterResult **)(a2 + 48);
        signed int v38 = *((_DWORD *)v37 + 4);
        uint64_t v39 = a4;
        if (v38 <= v26)
        {
          int v45 = 1;
        }
        else
        {
          while (1)
          {
            uint64_t GermsForFrame = PrefilterResult::getGermsForFrame(v37, v26);
            int v61 = -16;
            long long v62 = 0u;
            memset(v63, 0, sizeof(v63));
            uint64_t v64 = 1879048192;
            int v65 = 0;
            uint64_t v66 = -1;
            uint64_t v59 = &unk_26C4E0568;
            unint64_t v60 = 0xBFF0000000000000;
            HIDWORD(v67) = 0x3FFF;
            long long v68 = xmmword_2140866D0;
            int PartialResultWord = Recognizer::getPartialResultWord(a1, GermsForFrame, v26, (unsigned int *)&v57, (uint64_t)&v59, (int *)v56);
            if ((PartialResultWord & 1) == 0) {
              break;
            }
            int v42 = v62;
            if (v62 < *(_DWORD *)(a1 + 216)) {
              break;
            }
            uint64_t v43 = a6[2];
            if (v43 == a6[3])
            {
              DgnArray<WordLatticeLC>::reallocElts((uint64_t)a6, 1, 1);
              LODWORD(v43) = a6[2];
            }
            WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(void *)a6 + 112 * v43), (const WordLatticeLC *)&v59);
            ++a6[2];
            uint64_t v44 = *(unsigned int *)(a8 + 8);
            if (v44 == *(_DWORD *)(a8 + 12))
            {
              DgnPrimArray<unsigned int>::reallocElts(a8, 1, 1);
              uint64_t v44 = *(unsigned int *)(a8 + 8);
            }
            *(_DWORD *)(*(void *)a8 + 4 * v44) = 2;
            ++*(_DWORD *)(a8 + 8);
            v26 += v42;
            uint64_t v57 = v67;
            long long v58 = v68;
            WordLatticeLC::~WordLatticeLC((WordLatticeLC *)&v59);
            if (v38 <= v26)
            {
              int v45 = 1;
              goto LABEL_43;
            }
          }
          int v45 = PartialResultWord ^ 1;
          WordLatticeLC::~WordLatticeLC((WordLatticeLC *)&v59);
LABEL_43:
          uint64_t v39 = a4;
        }
        if (*(void *)v52 && v45)
        {
          signed int v46 = *(_DWORD *)(*(void *)v52 + 8);
          v56[0] = 0;
          v56[1] = 0;
          if (v46 > v26)
          {
            int v47 = 0;
            while ((v51 - v26) >= *(_DWORD *)(a1 + 208))
            {
              Recognizer::returnIncompleteGerms(v20, v26, *(void **)v52, v39, (uint64_t)v56);
              int v61 = -16;
              long long v62 = 0u;
              memset(v63, 0, sizeof(v63));
              uint64_t v64 = 1879048192;
              int v65 = 0;
              uint64_t v66 = -1;
              uint64_t v59 = &unk_26C4E0568;
              unint64_t v60 = 0xBFF0000000000000;
              HIDWORD(v67) = 0x3FFF;
              long long v68 = xmmword_2140866D0;
              if ((Recognizer::getPartialResultWord(a1, (uint64_t)v56, v26, (unsigned int *)&v57, (uint64_t)&v59, &v55) & 1) == 0) {
                goto LABEL_58;
              }
              int v48 = v62;
              if (v62 < *(_DWORD *)(a1 + 212)) {
                goto LABEL_58;
              }
              uint64_t v49 = a6[2];
              if (v49 == a6[3])
              {
                DgnArray<WordLatticeLC>::reallocElts((uint64_t)a6, 1, 1);
                LODWORD(v49) = a6[2];
              }
              WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(void *)a6 + 112 * v49), (const WordLatticeLC *)&v59);
              ++a6[2];
              uint64_t v50 = *(unsigned int *)(a8 + 8);
              if (v50 == *(_DWORD *)(a8 + 12))
              {
                DgnPrimArray<unsigned int>::reallocElts(a8, 1, 1);
                uint64_t v50 = *(unsigned int *)(a8 + 8);
              }
              *(_DWORD *)(*(void *)a8 + 4 * v50) = 3;
              ++*(_DWORD *)(a8 + 8);
              uint64_t v57 = v67;
              long long v58 = v68;
              if (*(_DWORD *)(a1 + 204) - 1 < ++v47)
              {
LABEL_58:
                WordLatticeLC::~WordLatticeLC((WordLatticeLC *)&v59);
                break;
              }
              v26 += v48;
              WordLatticeLC::~WordLatticeLC((WordLatticeLC *)&v59);
              if (v46 <= v26) {
                break;
              }
            }
          }
          DgnIArray<Utterance *>::~DgnIArray((uint64_t)v56);
        }
      }
      return (v53 + v54);
    }
    WordLatticeLC::WordLatticeLC((uint64_t)&v59, v29, v26, *(_DWORD *)(a1 + 316) - v26, 0, (uint64_t)v69);
    DgnArray<WordLatticeLC>::add((uint64_t)a6, (WordLatticeLC *)&v59);
    BOOL v33 = v31 != 16777213;
  }
  else
  {
    BOOL v33 = *(void *)(a1 + 392) == 0;
    int v34 = *(_DWORD *)(a1 + 2256);
    if ((v34 - v26) < *(_DWORD *)(a1 + 220)) {
      return (v53 + v54);
    }
    WordLatticeLC::WordLatticeLC((uint64_t)&v59, v29, v26, v34 - v26, *(_DWORD *)(a1 + 316) - v34, (uint64_t)v69);
    DgnArray<WordLatticeLC>::add((uint64_t)a6, (WordLatticeLC *)&v59);
  }
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)&v59);
  int v20 = DgnPrimArray<unsigned int>::add(a8, 1);
  signed int v26 = *(_DWORD *)(a1 + 316);
  if (a2) {
    goto LABEL_29;
  }
  return (v53 + v54);
}

void sub_213FC8CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

void DgnArray<WordLatticeLC>::add(uint64_t a1, WordLatticeLC *a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 8);
  if (v4 == *(_DWORD *)(a1 + 12))
  {
    DgnArray<WordLatticeLC>::reallocElts(a1, 1, 1);
    unsigned int v4 = *(_DWORD *)(a1 + 8);
  }
  WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(void *)a1 + 112 * v4), a2);
  ++*(_DWORD *)(a1 + 8);
}

uint64_t Recognizer::getPartialResultWord(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4, uint64_t a5, int *a6)
{
  if (!a2 || !*(_DWORD *)(a2 + 8)) {
    return 0;
  }
  int v12 = MemChunkAlloc(0x30uLL, 0);
  *((_DWORD *)v12 + 2) = 0;
  *((unsigned char *)v12 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
  v12[3] = 0;
  *int v12 = (uint64_t)&unk_26C4E2F98;
  v12[5] = a2;
  *((_DWORD *)v12 + 3) = *(_DWORD *)(a2 + 8);
  Constraint::prunePreList(*(Constraint **)(a1 + 2216), (RecogGermIterator *)v12, 1, v13, v14, v15, v16, v17);
  v67[0] = 0;
  uint64_t Legal = Constraint::getLegal(*(void *)(a1 + 2216), a4, 0, 1, (int *)v67 + 1, a3, v67, 0, 0, 0, 0);
  if (HIDWORD(v67[0]))
  {
    uint64_t v19 = Legal;
    int v42 = a3;
    uint64_t SeededWeights = Constraint::getSeededWeights(*(void *)(a1 + 2216), a4, a3);
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    LMStats::resetStats((LMStats *)v60);
    uint64_t v21 = a1 + 624;
    uint64_t v58 = v21;
    char v59 = 1;
    SearchLMScorer::setContext(v21, 4211081212, a4, v19, 1, SeededWeights, (LMStats *)v60, 0, 0xFAFFFFFC, 0xFAFFFFFC);
    uint64_t v56 = 0x3FFFFCFFFFFDLL;
    long long v57 = xmmword_2140866D0;
    unint64_t v22 = *(unsigned int *)(v19 + 8);
    if (v22)
    {
      uint64_t v41 = v12;
      unint64_t v23 = 0;
      int v45 = 0;
      int v24 = 20000;
      uint64_t v43 = v19;
      do
      {
        uint64_t v25 = *(void *)v19 + 16 * v23;
        unint64_t v26 = *(unsigned int *)(v25 + 8);
        if (*(_DWORD *)(v25 + 8))
        {
          unint64_t v44 = v23;
          uint64_t v27 = 0;
          unint64_t v28 = 0;
          do
          {
            uint64_t v29 = *(void *)v25 + v27;
            int v30 = *(__int16 *)(v29 + 30);
            if ((v30 & 0x80000000) == 0)
            {
              uint64_t v46 = *(void *)v29;
              *(_OWORD *)int v47 = *(_OWORD *)(v29 + 8);
              int v31 = *(__int16 *)(v29 + 28);
              int v32 = *(__int16 *)(v29 + 26);
              int v33 = SearchLMScorer::lmScoreNonSilCwidac(v21, (unsigned int *)&v46, (LMStats *)v60);
              if (v31 != 20000 && v32 != 20000 && v33 != 20000 && v32 + v31 + v33 < v24)
              {
                uint64_t v56 = v46;
                long long v57 = *(_OWORD *)v47;
                int v37 = (unsigned __int16)v30;
                if ((v30 & 0xFFFE) == 0) {
                  int v37 = 1;
                }
                int v45 = v37;
                int v24 = v32 + v31 + v33;
              }
              unint64_t v26 = *(unsigned int *)(v25 + 8);
            }
            ++v28;
            v27 += 44;
          }
          while (v28 < v26);
          uint64_t v19 = v43;
          unint64_t v23 = v44;
          unint64_t v22 = *(unsigned int *)(v43 + 8);
        }
        ++v23;
      }
      while (v23 < v22);
      if (v24 >= 20000)
      {
        uint64_t v39 = 0;
        int v12 = v41;
      }
      else
      {
        memset(v54, 0, sizeof(v54));
        int v55 = 0;
        WordLatticeLC::WordLatticeLC((uint64_t)&v46, (uint64_t)&v56, v42, v45, 0, (uint64_t)v54);
        int v12 = v41;
        *(void *)(a5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v47[0];
        long long v38 = *(_OWORD *)&v47[3];
        *(_OWORD *)(a5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = *(_OWORD *)&v47[1];
        *(_OWORD *)(a5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v38;
        *(_OWORD *)(a5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = *(_OWORD *)&v47[5];
        *(void *)(a5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = v47[7];
        *(_DWORD *)(a5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = v48;
        *(void *)(a5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = v49;
        *(_DWORD *)(a5 + HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 88) = v50;
        *(_WORD *)(a5 + 92) = v51;
        *(_WORD *)(a5 + 94) = v52;
        *(_OWORD *)(a5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = v53;
        WordLatticeLC::~WordLatticeLC((WordLatticeLC *)&v46);
        *a6 = v24;
        uint64_t v39 = 1;
      }
    }
    else
    {
      uint64_t v39 = 0;
    }
    SearchLMContext::~SearchLMContext((SearchLMContext *)&v58);
  }
  else
  {
    uint64_t v39 = 0;
  }
  DgnDelete<RecogGermIterator>((void (***)(void))v12);
  return v39;
}

void sub_213FC90E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
}

unint64_t Recognizer::returnIncompleteGerms(int a1, unsigned int a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(*a3 + 8 * a2);
  if (!v5) {
    return result;
  }
  uint64_t v8 = *(unsigned int *)(v5 + 12);
  if (v8)
  {
    int v9 = *(uint64_t ***)(v5 + 80);
    uint64_t v10 = *v9;
    if (*v9)
    {
      LODWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
    }
    else
    {
      uint64_t v11 = 1;
      while (v8 != v11)
      {
        uint64_t v10 = v9[v11++];
        if (v10)
        {
          LODWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v11 - 1;
          goto LABEL_11;
        }
      }
      uint64_t v10 = 0;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
LABEL_11:
  uint64_t v12 = *(unsigned int *)(v5 + 8);
  unsigned int v13 = *(_DWORD *)(a5 + 12);
  if (v12 > v13) {
    unint64_t result = DgnPrimArray<unsigned long long>::reallocElts(a5, v12 - v13, 0);
  }
  uint64_t v15 = *(unsigned int *)(a5 + 8);
  if (v15 < v12)
  {
    uint64_t v16 = v12 - v15;
    uint64_t v17 = *(void *)a5 + 8 * v15 + 6;
    do
    {
      *(void *)(v17 - 6) = 4211081215;
      v17 += 8;
      --v16;
    }
    while (v16);
  }
  *(_DWORD *)(a5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v12;
  if (v8 >= *(_DWORD *)(v5 + 12)) {
    return result;
  }
  for (unsigned int i = 0; ; ++i)
  {
    unint64_t v19 = *((unsigned int *)v10 + 2);
    if (v10) {
      int v20 = (unsigned __int16 *)v10 + 6;
    }
    else {
      int v20 = 0;
    }
    unsigned __int16 v21 = *v20;
    if (*((_DWORD *)v10 + 2) >> 25 < *(_DWORD *)(a4 + 8))
    {
      uint64_t v22 = *(void *)a4 + 16 * (v19 >> 25);
      if ((v19 & 0xFFFFFF) < *(_DWORD *)(v22 + 8))
      {
        __int16 v23 = *(_WORD *)(*(void *)v22 + 2 * (v19 & 0xFFFFFF));
        if (v23 != 20000) {
          v21 -= v23;
        }
      }
    }
    *(void *)(*(void *)a5 + 8 * i) = ((unint64_t)v20[1] << 48) | ((unint64_t)v21 << 32) | v19;
    int v24 = (uint64_t *)*v10;
    uint64_t v25 = *(unsigned int *)(v5 + 12);
    if (*v10) {
      goto LABEL_33;
    }
    uint64_t v8 = (v8 + 1);
    if (v8 >= v25)
    {
      int v24 = v10;
      goto LABEL_33;
    }
    uint64_t v26 = *(void *)(v5 + 80);
    int v24 = *(uint64_t **)(v26 + 8 * v8);
    if (!v24) {
      break;
    }
LABEL_33:
    uint64_t v10 = v24;
    if (v8 >= v25) {
      return result;
    }
  }
  uint64_t v27 = (uint64_t *)(v26 + 8 * v8 + 8);
  uint64_t v28 = ~v8 + v25;
  while (v28)
  {
    uint64_t v29 = (uint64_t *)*v27++;
    int v24 = v29;
    LODWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v8 + 1;
    --v28;
    if (v29) {
      goto LABEL_33;
    }
  }
  return result;
}

uint64_t *Recognizer::makeRecognizerResults(Recognizer *this, LatticeStats *a2, int a3)
{
  int v90 = 1879048192;
  int BestHistoryMaybeExtend = Recognizer::getBestHistoryMaybeExtend(this, (char)a2, *((unsigned __int8 *)this + 149), &v90);
  int v7 = v90;
  if (v90 == 1879048192 && (a3 & 1) == 0)
  {
    SilentLattice = 0;
    *((unsigned char *)this + 22DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = 1;
    return SilentLattice;
  }
  SnapTime::recordTime((Recognizer *)((char *)this + 2024), 1, 1, 1, 1);
  unsigned int v13 = (CWIDCrumbBank *)*((void *)this + 46);
  uint64_t v83 = VocMgr::smpVocMgr;
  if (*((_DWORD *)this + 77))
  {
    int v14 = CWIDCrumbBank::getLastFrame(v13) + 1;
    int v15 = *((_DWORD *)this + 77);
  }
  else
  {
    int v15 = 0;
    int v14 = 0;
  }
  if (v14) {
    BOOL v16 = BestHistoryMaybeExtend == -2;
  }
  else {
    BOOL v16 = 1;
  }
  int v17 = !v16;
  int v18 = *((_DWORD *)this + 43);
  if (v18 != 2)
  {
    if (v18 == 3)
    {
      BOOL v19 = 0;
      BOOL v20 = 0;
      int v18 = 1;
      goto LABEL_18;
    }
    int v18 = 3;
  }
  BOOL v19 = *((unsigned char *)this + 144) != 0;
  BOOL v20 = *((unsigned char *)this + 145) != 0;
LABEL_18:
  int LatticeType = BackTraceLatticeBuilder::getLatticeType((BackTraceLatticeBuilder *)v19, v20, v18, *((unsigned __int8 *)this + 148), v9, v10, v11, v12);
  int v86 = v14;
  int v81 = a3;
  int v82 = v15;
  int v84 = v17;
  if (!LatticeType
    && *((unsigned char *)this + 144)
    && *((_DWORD *)this + 43) == 2
    && (*((unsigned char *)this + 145) ? (int v27 = v17) : (int v27 = 0), v27 == 1))
  {
    int v24 = HistoryMgr::copyAndOverrideToBigramHistories((HistoryMgr *)(*((void *)this + 35) + 72));
    uint64_t v28 = MemChunkAlloc(0x38uLL, 0);
    uint64_t v29 = CWIDCrumbBank::CWIDCrumbBank((CWIDCrumbBank *)v28, (const HistoryMgr *)(*((void *)this + 35) + 72));
    CWIDCrumbBank::copy(v29, v13);
    CWIDCrumbBank::mergeCrumbs((void (***)(void))v28, v30);
    CWIDCrumbBank::updateCrumbHistory(v28, v24);
    char v22 = 1;
    uint64_t v23 = (uint64_t)v13;
    unsigned int v13 = (CWIDCrumbBank *)v28;
  }
  else
  {
    char v22 = 0;
    uint64_t v23 = 0;
    int v24 = 0;
  }
  Latch<MemChunkRegion,LatchAdapter>::Latch(v88, (uint64_t)&gGlobalMemChunkRegion);
  uint64_t v25 = MemChunkAlloc(0x238uLL, 0);
  uint64_t v85 = (Recognizer *)((char *)this + 624);
  if (*((unsigned char *)this + 8)) {
    char v26 = 0;
  }
  else {
    char v26 = *((unsigned char *)this + 146) == 0;
  }
  BackTraceLatticeBuilder::BackTraceLatticeBuilder((uint64_t)v25, *((Constraint **)this + 277), (uint64_t)v13, *((void *)this + 35) + 302952, (uint64_t)v85, *((unsigned char *)this + 304) != 0, LatticeType, *((_DWORD *)this + 28), *((double *)this + 13), *((_DWORD *)this + 29), *((_DWORD *)this + 30), *((_DWORD *)this + 31), *((_DWORD *)this + 32), *((_DWORD *)this + 33), *((_DWORD *)this + 34), *((_DWORD *)this + 35), *((unsigned char *)this + 147) != 0, *((unsigned char *)this + 148) != 0, v26,
    *((_DWORD *)this + 38),
    *((_DWORD *)this + 14),
    *((unsigned char *)this + 166),
    *((unsigned char *)this + 196),
    v22,
    v23,
    v24);
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)v88);
  if (v84)
  {
    if (v7 == 1879048192)
    {
      *(void *)uint64_t v88 = 0x3FFFFCFFFFFDLL;
      long long v89 = xmmword_2140866D0;
      unsigned int v31 = Recognizer::extendHistory((uint64_t)this, BestHistoryMaybeExtend, v88, 0, *((_DWORD *)this + 77), *((_DWORD *)this + 77));
      char v32 = CWIDCrumbBank::setTopChoiceHistoryExtendToEnd(v13, v31, *((_DWORD *)this + 77));
    }
    else
    {
      v88[0] = 1879048192;
      LODWORD(v91[0]) = -2;
      CWIDCrumbBank::getRightSilenceInfo((uint64_t)v13, v86 - 1, (unsigned int *)v91, v88);
      CWIDCrumbBank::setTopChoiceHistory((uint64_t *)v13, v91[0]);
      char v32 = 0;
    }
    int v35 = *((_DWORD *)this + 4) + *((_DWORD *)this + 3);
    Latch<MemChunkRegion,LatchAdapter>::Latch(v88, (uint64_t)&gGlobalMemChunkRegion);
    Lattice = BackTraceLatticeBuilder::makeLattice((BackTraceLatticeBuilder *)v25, *((_WORD *)this + 264), *((PelScorer **)this + 34), v7 == 1879048192, v32, *((unsigned __int8 *)this + 100), (Recognizer *)((char *)this + 1616), v35, *((_DWORD *)this + 88), *((_DWORD *)this + 89), (char)a2);
    SilentLattice = Lattice;
    BOOL v37 = v7 == 1879048192;
    if (*((unsigned char *)this + 304)) {
      int v38 = v81;
    }
    else {
      int v38 = 0;
    }
    *((unsigned char *)Lattice + 209) = v37;
    Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)v88);
    if (v23)
    {
      DgnDelete<CWIDCrumbBank>((uint64_t)v13);
      *((unsigned char *)SilentLattice + 207) = v82 == v86;
      int v33 = (void **)v83;
      if (v38)
      {
LABEL_40:
        unsigned int v39 = *((_DWORD *)this + 77);
        for (unsigned int i = *((_DWORD *)this + 58); v39 > i; *((_DWORD *)this + 58) = i)
        {
          if (i == *((_DWORD *)this + 59))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 224, 1, 1);
            unsigned int i = *((_DWORD *)this + 58);
          }
          *(_DWORD *)(*((void *)this + 28) + 4 * i) = 0;
          unsigned int i = *((_DWORD *)this + 58) + 1;
        }
        for (unsigned int j = *((_DWORD *)this + 62); v39 > j; *((_DWORD *)this + 62) = j)
        {
          if (j == *((_DWORD *)this + 63))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 240, 1, 1);
            unsigned int j = *((_DWORD *)this + 62);
          }
          *(_DWORD *)(*((void *)this + 30) + 4 * j) = 0;
          unsigned int j = *((_DWORD *)this + 62) + 1;
        }
        int v34 = 1;
        goto LABEL_51;
      }
    }
    else
    {
      *((unsigned char *)SilentLattice + 207) = v82 == v86;
      int v33 = (void **)v83;
      if (v38) {
        goto LABEL_40;
      }
    }
    int v34 = 0;
  }
  else
  {
    Latch<MemChunkRegion,LatchAdapter>::Latch(v88, (uint64_t)&gGlobalMemChunkRegion);
    SilentLattice = BackTraceLatticeBuilder::makeSilentLattice((BackTraceLatticeBuilder *)*((unsigned __int16 *)this + 264), *((_DWORD *)this + 77), *((_DWORD *)this + 88), *((_DWORD *)this + 89), *((unsigned __int8 *)this + 304), (uint64_t)this + 1616, a2);
    *(_WORD *)((char *)SilentLattice + 209) = 257;
    Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)v88);
    int v33 = (void **)v83;
    int v34 = 0;
    *((unsigned char *)SilentLattice + 207) = v82 == v86;
  }
LABEL_51:
  Latch<MemChunkRegion,LatchAdapter>::Latch(&v87, (uint64_t)&gGlobalMemChunkRegion);
  if (v25)
  {
    BackTraceLatticeBuilder::~BackTraceLatticeBuilder((BackTraceLatticeBuilder *)v25);
    MemChunkFree(v42, 0);
  }
  SnapTime::recordTime((Recognizer *)((char *)this + 2056), 1, 1, 1, 1);
  uint64_t v50 = *((void *)this + 277);
  if ((*(_DWORD *)(v50 + 68) & 0xFFFFFFFD) == 0 && *(_DWORD *)(v50 + 192)) {
    WordLattice::computeParseTokens((uint64_t)SilentLattice, v50 + 168, (uint64_t *)(v50 + 184));
  }
  if (*((unsigned char *)SilentLattice + 210)) {
    goto LABEL_57;
  }
  if (*((unsigned char *)this + 304))
  {
    if (*((unsigned char *)this + 146))
    {
      SnapTime::recordTime((Recognizer *)((char *)this + 2184), 1, 1, 1, 1);
      WordLattice::addSegmentations((WordLattice *)SilentLattice, *((const Active **)this + 35), *((const PhnMgr **)this + 32), *((const PicMgr **)this + 33));
      if (*((unsigned char *)SilentLattice + 210)) {
        goto LABEL_57;
      }
    }
  }
  if (!*((unsigned char *)this + 675))
  {
    int v58 = *((unsigned __int8 *)this + 678);
    if (!*((unsigned char *)this + 678))
    {
      int v59 = 0;
      goto LABEL_111;
    }
  }
  if (WordLattice::hasCollapsedWords((WordLattice *)SilentLattice))
  {
    int v59 = 0;
    int v58 = 0;
    goto LABEL_111;
  }
  SnapTime::recordTime((Recognizer *)((char *)this + 2088), 1, 1, 1, 1);
  *(void *)uint64_t v88 = 0;
  *(void *)&long long v89 = 0;
  if (!*((_DWORD *)SilentLattice + 26))
  {
LABEL_107:
    char v75 = 0;
    char v74 = 0;
    goto LABEL_108;
  }
  unint64_t v62 = 0;
  do
  {
    uint64_t v63 = SilentLattice[16] + 136 * *(unsigned int *)(SilentLattice[12] + 4 * v62);
    unsigned int v66 = *(_DWORD *)(v63 + 88);
    long long v64 = (unsigned int *)(v63 + 88);
    unsigned int v65 = v66;
    if (v66 >> 27 != 31)
    {
      unsigned int v67 = v89;
      if (!v89) {
        goto LABEL_90;
      }
      long long v68 = *(unsigned __int16 **)v88;
      uint64_t v69 = v89;
      uint64_t v70 = 0xFFFFFFFFLL;
      while (1)
      {
        int v71 = *v68++;
        if (v71 == v65 >> 25) {
          break;
        }
        --v70;
        if (!--v69) {
          goto LABEL_90;
        }
      }
      if (!v70)
      {
LABEL_90:
        uint64_t v72 = *((void *)this + 277);
        if ((*(_DWORD *)(v72 + 68) & 0xFFFFFFFD) == 0)
        {
          if (!Constraint::isLMAllowedForState(v72, v64)) {
            goto LABEL_96;
          }
          unsigned int v67 = v89;
        }
        if (v67 == DWORD1(v89))
        {
          DgnPrimArray<short>::reallocElts((uint64_t)v88, 1, 1);
          unsigned int v67 = v89;
        }
        *(_WORD *)(*(void *)v88 + 2 * v67) = v65 >> 25;
        LODWORD(v89) = v67 + 1;
      }
    }
LABEL_96:
    ++v62;
  }
  while (v62 < *((unsigned int *)SilentLattice + 26));
  if (!v89) {
    goto LABEL_107;
  }
  unint64_t v73 = 0;
  char v74 = 0;
  char v75 = 0;
  do
  {
    uint64_t v76 = *(void *)(*(void *)(**v33 + 8 * *(unsigned __int16 *)(*(void *)v88 + 2 * v73)) + 72);
    if (*((unsigned char *)this + 675)
      && (*(unsigned int (**)(uint64_t, unsigned int *))(*(void *)v76 + 448))(v76, v64))
    {
      char v75 = 1;
    }
    if (*((unsigned char *)this + 678) && (*(unsigned int (**)(uint64_t, void))(*(void *)v76 + 312))(v76, 0)) {
      char v74 = 1;
    }
    ++v73;
  }
  while (v73 < v89);
LABEL_108:
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v88);
  int v59 = v75 & 1;
  int v58 = v74 & 1;
  if (v59)
  {
LABEL_113:
    if (*((_DWORD *)this + 184)) {
      unsigned int v78 = **((_DWORD **)this + 91);
    }
    else {
      unsigned int v78 = -50331650;
    }
    if (v59) {
      unsigned int v79 = 4;
    }
    else {
      unsigned int v79 = 3;
    }
    int v77 = WordLattice::expandLMContext((WordLattice *)SilentLattice, v79, v78, *((_DWORD *)this + 48), (uint64_t)this + 1616, (_DWORD *)this + 584, (_DWORD *)this + 585);
    if (v77 != 1)
    {
      SnapTime::recordTime((Recognizer *)((char *)this + 2120), 1, 1, 1, 1);
      WordLattice::rescoreLatticeLM((WordLattice *)SilentLattice, v85, (Recognizer *)((char *)this + 1616), v59);
    }
    goto LABEL_121;
  }
LABEL_111:
  if (v58) {
    goto LABEL_113;
  }
  int v77 = 0;
LABEL_121:
  SnapTime::recordTime((Recognizer *)((char *)this + 2152), 1, 1, 1, 1);
  if (*((unsigned char *)this + 304) && *((unsigned char *)this + 146))
  {
    Lattice<WordLatticeLC>::minimize((uint64_t)SilentLattice);
  }
  else
  {
    unint64_t v80 = MemChunkAlloc(0x120uLL, 0);
    WordLattice::WordLattice((WordLattice *)v80, (const WordLattice *)SilentLattice, 0, 0, 0, 0, 0, 0);
    DgnDelete<WordLattice>((uint64_t)SilentLattice);
    SilentLattice = v80;
  }
  WordLattice::maybePruneToNumUniquePaths((uint64_t)SilentLattice, *((_DWORD *)this + 47));
  if (!*((unsigned char *)SilentLattice + 210) && v77 == 1) {
    *((unsigned char *)SilentLattice + 210) = 1;
  }
LABEL_57:
  uint64_t v51 = *((void *)this + 277);
  if ((*(_DWORD *)(v51 + 68) & 0xFFFFFFFD) == 0 && *(_DWORD *)(v51 + 192)) {
    WordLattice::fixStateIds((uint64_t)SilentLattice, v43, v44, v45, v46, v47, v48, v49);
  }
  if (v34)
  {
    uint64_t v52 = *(void *)(*((void *)this + 34) + 120);
    uint64_t v53 = *(unsigned int *)(v52 + 480);
    *(void *)uint64_t v88 = 0;
    *(void *)&long long v89 = 0;
    if (v53)
    {
      v91[0] = 0;
      unint64_t v54 = realloc_array(0, v91, 2 * v53, 0, 0, 1);
      uint64_t v55 = 0;
      uint64_t v56 = (unsigned __int16 *)v91[0];
      *(void **)uint64_t v88 = v91[0];
      LODWORD(v89) = v53;
      DWORD1(v89) = v54 >> 1;
      uint64_t v57 = *(void *)(v52 + 472) + 2;
      do
      {
        v56[v55] = *(_WORD *)(v57 + 1 * v55);
        ++v55;
      }
      while (v53 != v55);
    }
    else
    {
      uint64_t v56 = 0;
      LODWORD(v89) = 0;
    }
    unsigned int v60 = *((_DWORD *)this + 77);
    while (v60 > v53)
    {
      if (v53 == DWORD1(v89))
      {
        DgnPrimArray<short>::reallocElts((uint64_t)v88, 1, 1);
        LODWORD(v53) = v89;
        uint64_t v56 = *(unsigned __int16 **)v88;
      }
      v56[v53] = 0;
      LODWORD(v53) = v53 + 1;
      LODWORD(v89) = v53;
    }
    WordLattice::computeConfidencePredictorsForLinks((uint64_t)SilentLattice, (uint64_t)this + 224, (uint64_t *)this + 30, (__int16 **)v88);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v88);
  }
  *((unsigned char *)this + 22DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = 1;
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)&v87);
  return SilentLattice;
}

void sub_213FC9CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t Recognizer::shadowBest(Recognizer *this, Recognizer *a2, int a3, int a4, char a5)
{
  return NetMgr::shadowBest(*((void *)this + 35) + 16, (NetMgr *)(*((void *)a2 + 35) + 16), a3, a4, a5);
}

uint64_t *Recognizer::setPelScores(PelScoreCacheData **this, const PelScoreCacheData *a2)
{
  DgnDelete<PelScoreCacheData>(this[37]);
  if (a2) {
    unint64_t result = PelScoreCacheData::clone(a2);
  }
  else {
    unint64_t result = 0;
  }
  this[37] = (PelScoreCacheData *)result;
  return result;
}

uint64_t Recognizer::beginTrackingConfidenceStatistics(uint64_t this)
{
  *(_DWORD *)(this + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
  *(_DWORD *)(this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 248) = 0;
  return this;
}

_DWORD *Recognizer::setInitialContext(uint64_t a1, uint64_t *a2)
{
  return SearchLMScorer::setInitialContext((_DWORD *)(a1 + 624), a2);
}

__n128 Recognizer::setContextPars(uint64_t a1, __n128 *a2)
{
  unsigned int v4 = MemChunkAlloc(0x18uLL, 0);
  __n128 result = *a2;
  *(__n128 *)unsigned int v4 = *a2;
  *((_DWORD *)v4 + 4) = a2[1].n128_u32[0];
  *((unsigned char *)v4 + 20) = a2[1].n128_u8[4];
  *(void *)(a1 + 760) = v4;
  return result;
}

uint64_t Recognizer::setRightGermsBackward(Recognizer *this)
{
  unsigned int v2 = *(_DWORD *)(*((void *)this + 35) + 303248);
  *((_DWORD *)this + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = 0;
  unsigned int v3 = *((_DWORD *)this + 149);
  if (v2 > v3) {
    DgnArray<RecogGerm>::reallocElts((uint64_t)this + 584, v2 - v3, 0);
  }
  *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 144) = 0;
  unsigned int v4 = *((_DWORD *)this + 145);
  if (v2 > v4) {
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 568, v2 - v4, 0);
  }
  *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 144) = v2;
  uint64_t v5 = *(unsigned int *)(*((void *)this + 35) + 303248);
  if ((int)v5 - 1 < 0) {
    return 0;
  }
  uint64_t v6 = 0;
  uint64_t result = 0;
  uint64_t v8 = *(void *)(*((void *)this + 35) + 303240);
  int v9 = -1;
  do
  {
    uint64_t v10 = *(void *)(v8 + 8 * (v5 + v9));
    uint64_t v11 = *(void *)(v10 + 8);
    if (*(_DWORD *)(v11 + 104) || *(unsigned char *)(v11 + 112))
    {
      *(void *)(*((void *)this + 71) + 8 * v6) = v10;
      uint64_t v12 = *(void *)(v10 + 8);
      if (*((_DWORD *)this + 151) >= *(__int16 *)(v12 + 108))
      {
        unsigned int v13 = *(_DWORD *)(v12 + 16);
        if (v13 >> 25 == 126)
        {
          if (v13 == -50331650) {
            uint64_t result = v10;
          }
        }
        else
        {
          unsigned int v14 = *((_DWORD *)this + 148);
          uint64_t v15 = *((void *)this + 73) + 44 * v14;
          *(void *)uint64_t v15 = 0x3FFFFAFFFFFFLL;
          *(_OWORD *)(v15 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = xmmword_2140866D0;
          *((_DWORD *)this + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = v14 + 1;
          *(_DWORD *)uint64_t v15 = *(_DWORD *)(v12 + 16);
          *(_DWORD *)(v15 + 4) = *(_DWORD *)(v12 + 20);
          *(_OWORD *)(v15 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *(_OWORD *)(v12 + 24);
          *(unsigned char *)(v15 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = 0;
          *(_DWORD *)(v15 + 26) = 1310720000;
          *(_WORD *)(v15 + 30) = 0;
          *(void *)(v15 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0x70000000FFFFFFFELL;
          *(_DWORD *)(v15 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 40) = v6;
        }
      }
    }
    ++v6;
    --v9;
  }
  while (v5 != v6);
  return result;
}

uint64_t *Recognizer::doBackward(Recognizer *this)
{
  uint64_t v2 = Recognizer::setRightGermsBackward(this);
  DgnDelete<RecogGermIterator>(*((void (****)(void))this + 48));
  unsigned int v3 = MemChunkAlloc(0x30uLL, 0);
  *((_DWORD *)v3 + 2) = 0;
  *((unsigned char *)v3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
  v3[3] = 0;
  uint64_t *v3 = (uint64_t)&unk_26C4E43C0;
  v3[5] = (uint64_t)this + 584;
  *((_DWORD *)v3 + 3) = *((_DWORD *)this + 148);
  *((void *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = v3;
  Constraint::prunePreList(*((Constraint **)this + 277), (RecogGermIterator *)v3, 1, v4, v5, v6, v7, v8);
  DgnDelete<RecogGermIterator>(*((void (****)(void))this + 47));
  *((void *)this + 47) = 0;
  uint64_t result = MemChunkAlloc(0x30uLL, 0);
  result[3] = 0;
  uint64_t *result = (uint64_t)&unk_26C4E3330;
  result[5] = (uint64_t)this + 2224;
  int v10 = *((_DWORD *)this + 558);
  *((_DWORD *)result + 3) = v10;
  *((void *)this + 47) = result;
  uint64_t v32 = 0x3FFFFAFFFFFFLL;
  long long v33 = xmmword_2140866D0;
  char v34 = 0;
  *(_DWORD *)int v35 = 1310720000;
  *(_WORD *)&v35[4] = 0;
  uint64_t v36 = 0x70000000FFFFFFFELL;
  *((unsigned char *)result + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
  *((_DWORD *)result + 2) = 0;
  if (v10)
  {
    do
    {
      (*(void (**)(uint64_t *, uint64_t *))(*result + 16))(result, &v32);
      uint64_t v30 = v32;
      long long v31 = v33;
      if (v32 >> 25 == 126)
      {
        uint64_t v32 = 0x3FFFFCFFFFFDLL;
        long long v33 = xmmword_2140866D0;
      }
      int v29 = 0;
      uint64_t Legal = Constraint::getLegal(*((void *)this + 277), (unsigned int *)&v30, 0, 0, &v29, *((_DWORD *)this + 79), (_DWORD *)this + 308, 0, 0, 0, 0);
      if (v29)
      {
        uint64_t v12 = (void *)Legal;
        uint64_t v13 = *(unsigned __int16 *)(Legal + 8);
        if (*(_WORD *)(Legal + 8))
        {
          uint64_t v14 = 0;
          do
          {
            uint64_t v15 = *v12 + 16 * v14;
            if (*(_DWORD *)(v15 + 8))
            {
              unint64_t v16 = 0;
              uint64_t v17 = 40;
              do
              {
                uint64_t v18 = *(void *)(*((void *)this + 71) + 8 * *(unsigned int *)(*(void *)v15 + v17));
                Recognizer::seedOneBackward((uint64_t)this, v18, (unsigned __int16)v14, (unsigned int *)&v32);
                if (*((unsigned char *)this + 304) && v32 >> 25 != 126) {
                  Recognizer::seedOneBackward((uint64_t)this, v18, 0, (unsigned int *)&v32);
                }
                ++v16;
                v17 += 44;
              }
              while (v16 < *(unsigned int *)(v15 + 8));
            }
            ++v14;
          }
          while (v14 != v13);
        }
      }
      if (v2)
      {
        if (v30 >> 25 == 126
          || (uint64_t v19 = *(void *)(*(void *)(**(void **)VocMgr::smpVocMgr
                                          + (((unint64_t)v30 >> 22) & 0x3F8))
                              + 48),
              uint64_t v20 = v30 & 0xFFFFFF,
              *(_WORD *)(*(void *)(v19 + 32) + 2 * v20) != 1)
          || *(_WORD *)(*(void *)(v19 + 592) + 2 * v20))
        {
          if (Constraint::getCanSeedFinalSilence(*((void *)this + 277), (unsigned int *)&v30, *((_DWORD *)this + 79)))
          {
            uint64_t v22 = v32;
            long long v23 = v33;
            char v24 = v34;
            __int16 v25 = *(_WORD *)v35;
            int v26 = *(_DWORD *)&v35[2];
            uint64_t v27 = v36;
            int v28 = v37;
            Recognizer::seedOneBackward((uint64_t)this, v2, 0, (unsigned int *)&v22);
          }
        }
      }
      uint64_t result = (uint64_t *)*((void *)this + 47);
      int v21 = *((_DWORD *)result + 2) + 1;
      *((_DWORD *)result + 2) = v21;
      if (*((unsigned char *)result + 32))
      {
        (*(void (**)(uint64_t *))(*result + 24))(result);
        uint64_t result = (uint64_t *)*((void *)this + 47);
        int v21 = *((_DWORD *)result + 2);
      }
    }
    while (v21 != *((_DWORD *)result + 3));
  }
  return result;
}

uint64_t Recognizer::seedOneBackward(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  unint64_t v8 = *a4;
  if (v8 >> 25 == 126) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(**(void **)VocMgr::smpVocMgr + ((v8 >> 22) & 0x3F8))
  }
                                                     + 48)
                                         + 608)
                             + 2 * (v8 & 0xFFFFFF));
  uint64_t result = *(void *)(a2 + 8);
  if (a3
    || (*(unsigned char *)(a1 + 304) ? (BOOL v11 = (*(_DWORD *)(result + 16) & 0xFE000000) == -67108864) : (BOOL v11 = 1), v11))
  {
    unsigned int v12 = *(_DWORD *)(result + 40);
    if (v12 < 2)
    {
      uint64_t v13 = 0;
    }
    else if (v12 - 3 >= 2)
    {
      uint64_t v13 = 255;
      if (v12 == 2) {
        uint64_t v13 = 1;
      }
    }
    else
    {
      uint64_t v13 = *(unsigned __int8 *)(*(void *)(result + 88) + v9);
    }
    int v15 = 0;
    uint64_t v14 = *(void *)(result + 72) + 8 * v13;
  }
  else
  {
    uint64_t v14 = *(void *)(result + 72);
    int v15 = 1;
  }
  unint64_t v16 = *(int **)v14;
  int v17 = *(__int16 *)(*(void *)v14 + 8);
  if (*(_DWORD *)(a1 + 604) >= v17)
  {
    int v18 = (*(uint64_t (**)(uint64_t))(*(void *)result + 184))(result) + v17;
    int v19 = *(_DWORD *)(a1 + 612);
    int v20 = v19;
    if (v15) {
      int v20 = (*(uint64_t (**)(void))(**(void **)(a2 + 8) + 104))(*(void *)(a2 + 8));
    }
    unsigned int v21 = Recognizer::extendHistory(a1, *v16, (int *)(*(void *)(a2 + 8) + 16), v20 != v19, v20, v19);
    v23[0] = &unk_26C4E31F8;
    v23[1] = a2;
    return Recognizer::seedOneFromPort(a1, (uint64_t)v23, a3, v18, 0, 0, 0, 0, 0, v21, (uint64_t)a4, v22, 20000);
  }
  return result;
}

uint64_t Recognizer::seedOneFromPort(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8, int a9, unsigned int a10, uint64_t a11, int a12, int a13)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  unsigned int v21 = (unsigned int *)result;
  int v22 = *(_DWORD *)(a1 + 600);
  if (a13 == 20000) {
    int v23 = 0;
  }
  else {
    int v23 = a13;
  }
  uint64_t v24 = (a5 + a4 + a6 + a7 - a8 + v23);
  if (a13 != 20000) {
    v22 += *(_DWORD *)(a1 + 72);
  }
  if (*(unsigned char *)(a1 + 304))
  {
    int v25 = a9;
    if (a9 == -1)
    {
      int v22 = 5000;
LABEL_13:
      a4 = v24;
      goto LABEL_17;
    }
    int v26 = *(__int16 *)(a11 + 28);
    if (v26 == 20000)
    {
      if (!*(unsigned char *)(a1 + 165)) {
        int v25 = 0;
      }
      v22 -= v25;
      goto LABEL_13;
    }
    if (!*(unsigned char *)(a1 + 164)) {
      int v26 = 0;
    }
    a4 = v26 + v24;
    v22 -= a9;
  }
LABEL_17:
  if (a4 <= v22)
  {
    int v27 = *(_DWORD *)(a11 + 4);
    unsigned int v49 = *(_DWORD *)a11;
    int v50 = v27;
    long long v51 = *(_OWORD *)(a11 + 8);
    if (v49 >> 25 == 126)
    {
      uint64_t Bucket = Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::findBucket(*(void *)(a1 + 280) + 303024, (uint64_t)&v49);
      if (!*Bucket || (uint64_t v29 = *(void *)(*Bucket + 40)) == 0)
      {
        uint64_t v30 = *(void *)(a1 + 280);
        if (*(unsigned char *)(a1 + 304)) {
          uint64_t active = Active::newActiveWordSilence(v30, (uint64_t)&v49);
        }
        else {
          uint64_t active = Active::newActiveWordNonAcoustic(v30, (uint64_t)&v49);
        }
        uint64_t v29 = active;
      }
    }
    else
    {
      if (*(unsigned char *)(a1 + 166)) {
        HIWORD(v50) = a3;
      }
      unint64_t v48 = 0xFFFFFFFE00000000;
      BOOL v32 = MergedActive::convertToMergedCWIDAC((MergedActive *)(a1 + 392), &v49, (unsigned int *)&v48);
      long long v33 = Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::findBucket(*(void *)(a1 + 280) + 303024, (uint64_t)&v49);
      if (!*v33 || (uint64_t v29 = *(void *)(*v33 + 40)) == 0)
      {
        uint64_t v34 = *(void *)(a1 + 280);
        if (*(unsigned char *)(a1 + 304))
        {
          if (*(_DWORD *)(a1 + 312)) {
            BOOL v35 = 0;
          }
          else {
            BOOL v35 = *(unsigned char *)(a1 + 25) != 0;
          }
          uint64_t v36 = Active::newActiveWord(v34, &v49, a8, *(_DWORD *)(a1 + 76), v35);
        }
        else
        {
          uint64_t v36 = Active::newActiveWordNonAcoustic(v34, (uint64_t)&v49);
        }
        uint64_t v29 = v36;
      }
      if (v32)
      {
        unsigned int v37 = v21[3];
        unint64_t v46 = ((unint64_t)*v21 >> 25) | ((unint64_t)v21[2] << 32);
        unsigned int v47 = v37;
        MergedStateTransition::updateMergedStateTransition(*(void *)(v29 + 24), (unsigned __int16 *)&v46, (uint64_t)&v48);
        int MaxEndTime = Constraint::getMaxEndTime(*(void *)(a1 + 2216), (unsigned int *)a11);
        int v45 = *(_DWORD *)(v29 + 32);
        if (v45 <= MaxEndTime) {
          int v45 = MaxEndTime;
        }
        *(_DWORD *)(v29 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v45;
        if (Constraint::getSuccessorRecursivePrefilteringAllowed(*(unsigned __int16 **)(a1 + 2216), (unsigned int *)a11, v39, v40, v41, v42, v43, v44))
        {
          *(unsigned char *)(v29 + 36) = 1;
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v29 + 24))(v29, a3, v24, a10);
  }
  return result;
}

BOOL MergedActive::convertToMergedCWIDAC(MergedActive *a1, unsigned int *a2, unsigned int *a3)
{
  if (!*(void *)a1) {
    return 0;
  }
  unint64_t v6 = *a2;
  BOOL result = MergedActive::isCWIDAllowMerge(a1, *a2);
  if (result)
  {
    unint64_t v8 = *(StateMgr **)(*(void *)(**(void **)VocMgr::smpVocMgr + ((v6 >> 22) & 0x3F8)) + 56);
    unsigned int v9 = a2[2];
    *a3 = v9;
    if (*((unsigned char *)a1 + 128))
    {
      BOOL result = MergedActive::isStateAllowMerge(a1, v8, v9);
      if (result)
      {
        *((_WORD *)a2 + 2) = 0x3FFF;
        a2[2] = -1;
        BOOL result = 1;
      }
    }
    else
    {
      BOOL result = 0;
    }
    a3[1] = a2[3];
    if (*((unsigned char *)a1 + 129))
    {
      a2[3] = -3;
      return 1;
    }
  }
  return result;
}

uint64_t Recognizer::seedFromOnePredToOnePhoneForward(uint64_t result, uint64_t a2, unsigned int a3, int a4, int a5, unsigned int a6, unsigned int a7, uint64_t *a8)
{
  uint64_t v8 = *((unsigned int *)a8 + 2);
  if ((int)v8 >= 1)
  {
    uint64_t v11 = result;
    uint64_t v24 = (LMStats *)(result + 1056);
    uint64_t v25 = result + 624;
    unint64_t v12 = v8 + 1;
    do
    {
      unsigned int v13 = v12 - 2;
      uint64_t v14 = *a8;
      int v15 = (unsigned int *)(*a8 + 44 * (v12 - 2));
      if (!*(unsigned char *)(v11 + 361)
        || (BOOL result = *(void *)(v11 + 2216), (*(_DWORD *)(result + 68) & 0xFFFFFFFD) != 0)
        || (BOOL result = Constraint::isPrecedingNonAcousticWordRequiredForState(result, (unsigned int *)(*a8 + 44 * v13)),
            (result & 1) == 0))
      {
        if (a6 == -2)
        {
          int v16 = 0;
        }
        else
        {
          BOOL result = Constraint::getCanSeedUsingLatticeTimeConstraintSeedThreshScore(*(void *)(v11 + 2216), (uint64_t)v15, *(_DWORD *)(v11 + 324) + a4);
          int v16 = result;
        }
        if (a7 == -2
          || (unint64_t v18 = *v15, v18 >> 25 != 126)
          && (uint64_t v19 = *(void *)(*(void *)(**(void **)VocMgr::smpVocMgr + ((v18 >> 22) & 0x3F8)) + 48),
              uint64_t v20 = v18 & 0xFFFFFF,
              *(_WORD *)(*(void *)(v19 + 32) + 2 * v20) == 1)
          && !*(_WORD *)(*(void *)(v19 + 592) + 2 * v20))
        {
          int v17 = 0;
        }
        else
        {
          BOOL result = Constraint::getCanSeedUsingLatticeTimeConstraintSeedThreshScore(*(void *)(v11 + 2216), (uint64_t)v15, *(_DWORD *)(v11 + 324) + a5);
          int v17 = result;
        }
        if ((v16 | v17) == 1)
        {
          BOOL result = SearchLMScorer::lmScoreNonSilCwidac(v25, v15, v24);
          int v21 = result;
          if (v16) {
            BOOL result = Recognizer::seedOneFromPort(v11, a2, a3, a4, result, *(__int16 *)(v14 + 44 * v13 + 26), *(_DWORD *)(v11 + 152), *(_DWORD *)(v11 + 48), *(_DWORD *)(v11 + 156), a6, (uint64_t)v15, v22, 20000);
          }
          if (v17) {
            BOOL result = Recognizer::seedOneFromPort(v11, a2, 0, a5, v21, *(__int16 *)(v14 + 44 * v13 + 26), *(_DWORD *)(v11 + 152), *(_DWORD *)(v11 + 48), *(_DWORD *)(v11 + 156), a7, (uint64_t)v15, v22, 20000);
          }
        }
      }
      --v12;
    }
    while (v12 > 1);
  }
  return result;
}

uint64_t Recognizer::seedFromOnePredToOnePhoneWithNonAcousticWordForward(uint64_t result, uint64_t a2, unsigned int a3, int a4, int a5, unsigned int a6, unsigned int a7, uint64_t *a8, int a9, int **a10)
{
  uint64_t v10 = *((unsigned int *)a8 + 2);
  if ((int)v10 >= 1)
  {
    uint64_t v12 = result;
    uint64_t v29 = result + 624;
    int v28 = (LMStats *)(result + 1056);
    unint64_t v13 = v10 + 1;
    do
    {
      BOOL result = *(void *)(v12 + 2216);
      if ((*(_DWORD *)(result + 68) & 0xFFFFFFFD) == 0)
      {
        unsigned int v14 = v13 - 2;
        uint64_t v15 = *a8;
        int v16 = (unsigned int *)(*a8 + 44 * (v13 - 2));
        BOOL result = Constraint::isPrecedingNonAcousticWordValidForState(result, v16, a9);
        if (result)
        {
          if (v16[5] != -83886084)
          {
            if (a6 == -2)
            {
              int v17 = 0;
            }
            else
            {
              BOOL result = Constraint::getCanSeedUsingLatticeTimeConstraintSeedThreshScore(*(void *)(v12 + 2216), (uint64_t)v16, *(_DWORD *)(v12 + 324) + a4);
              int v17 = result;
            }
            if (a7 == -2)
            {
              int v18 = 0;
            }
            else
            {
              BOOL result = Constraint::getCanSeedUsingLatticeTimeConstraintSeedThreshScore(*(void *)(v12 + 2216), (uint64_t)v16, *(_DWORD *)(v12 + 324) + a5);
              int v18 = result;
            }
            if ((v17 | v18) == 1)
            {
              int v19 = SearchLMScorer::lmScoreNonSilCwidac(v29, v16, v28);
              BOOL result = *(void *)(v12 + 2216);
              if ((*(_DWORD *)(result + 68) & 0xFFFFFFFD) != 0
                || (v20 = v19, result = Constraint::getWeightsForState(result, v16), int v19 = v20, result == 0xFFFF))
              {
                int v21 = *a10;
              }
              else
              {
                int v21 = &(*a10)[result];
              }
              int v22 = *v21;
              int v23 = *(_DWORD *)(v12 + 68);
              if (v23 == -1 || v22 + v19 <= v23)
              {
                if (v17)
                {
                  int v24 = v19;
                  BOOL result = Recognizer::seedOneFromPort(v12, a2, a3, a4, v19, *(__int16 *)(v15 + 44 * v14 + 26), *(_DWORD *)(v12 + 152), *(_DWORD *)(v12 + 48), *(_DWORD *)(v12 + 156), a6, (uint64_t)v16, v25, v22);
                  int v19 = v24;
                }
                if (v18) {
                  BOOL result = Recognizer::seedOneFromPort(v12, a2, 0, a5, v19, *(__int16 *)(v15 + 44 * v14 + 26), *(_DWORD *)(v12 + 152), *(_DWORD *)(v12 + 48), *(_DWORD *)(v12 + 156), a7, (uint64_t)v16, v25, v22);
                }
              }
            }
          }
        }
      }
      --v13;
    }
    while (v13 > 1);
  }
  return result;
}

void *Recognizer::seedFromOnePredForward(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v285 = (void **)VocMgr::smpVocMgr;
  uint64_t v5 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  unint64_t v7 = *v5;
  int v6 = v5[1];
  unsigned int v312 = *v5;
  int v313 = v6;
  long long v314 = *(_OWORD *)(v5 + 2);
  int v8 = *(_DWORD *)(a1 + 604);
  uint64_t v284 = a2;
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  int v271 = (*(uint64_t (**)(void))(**(void **)(v9 + 8) + 184))(*(void *)(v9 + 8));
  if (*(_DWORD *)(a1 + 312)) {
    BOOL v264 = 0;
  }
  else {
    BOOL v264 = *(unsigned char *)(a1 + 25) != 0;
  }
  int v10 = v7 & 0xFE000000;
  uint64_t v11 = v7 & 0xFFFFFF;
  BOOL v12 = v11 == 16777208 || (v7 & 0xFE000000) != -67108864;
  if (v10 == -67108864 || v11 == 16777208)
  {
    unsigned int v270 = 0;
  }
  else
  {
    uint64_t v14 = (v7 >> 22) & 0x3F8;
    unsigned int v270 = *(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(**v285 + v14) + 48) + 608)
                               + 2 * v11);
    uint64_t v15 = *(void *)(*(void *)(**(void **)VocMgr::smpVocMgr + v14) + 48);
    if (*(_WORD *)(*(void *)(v15 + 32) + 2 * v11) == 1)
    {
      BOOL v12 = 0;
      int v16 = 0;
      int v17 = 0;
      if (!*(_WORD *)(*(void *)(v15 + 592) + 2 * v11)) {
        goto LABEL_26;
      }
    }
    else
    {
      BOOL v12 = 0;
    }
  }
  if (Constraint::getCanSeedFinalSilence(*(void *)(a1 + 2216), v5, *(_DWORD *)(a1 + 288) + *(_DWORD *)(a1 + 316)))
  {
    if (*(unsigned char *)(a1 + 673)) {
      BOOL v18 = v10 == -67108864;
    }
    else {
      BOOL v18 = 1;
    }
    int v17 = !v18;
    int v16 = 1;
  }
  else
  {
    int v16 = 0;
    int v17 = 0;
  }
LABEL_26:
  int v259 = v16;
  uint64_t v310 = 0;
  uint64_t v311 = 0;
  uint64_t v308 = 0x70000000FFFFFFFELL;
  int v309 = 1879048192;
  int v307 = 0;
  int v19 = (uint64_t *)(a1 + 2288);
  *(_DWORD *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 296) = 0;
  uint64_t v277 = a1;
  uint64_t v265 = (uint64_t *)(a1 + 2288);
  if (v8 >= a3)
  {
    uint64_t v33 = *(void *)(a1 + 2216);
    if ((*(_DWORD *)(v33 + 68) & 0xFFFFFFFD) != 0) {
      uint64_t SeededWeights = 0;
    }
    else {
      uint64_t SeededWeights = (SearchLMScorer **)Constraint::getSeededWeights(v33, v5, *(_DWORD *)(a1 + 288) + *(_DWORD *)(a1 + 316));
    }
    if (!*(unsigned char *)(a1 + 304))
    {
      uint64_t Legal = Constraint::getLegal(*(void *)(a1 + 2216), v5, 0, 0, &v307, *(_DWORD *)(a1 + 288) + *(_DWORD *)(a1 + 316), (_DWORD *)(a1 + 1232), 0, 0, 0, 0);
      uint64_t SeededPrecedingNonAcousticWords = 0;
      int v278 = 0;
LABEL_125:
      int v115 = *(_DWORD *)(Legal + 8);
      if (v115)
      {
LABEL_129:
        uint64_t v117 = (unsigned __int16)v115;
        unsigned int v118 = *(_DWORD *)(a1 + 2300);
        if (v117 > v118) {
          DgnArray<RuleDesc>::reallocElts((uint64_t)v19, v117 - v118, 0);
        }
        uint64_t v22 = v9;
        uint64_t v27 = Legal;
        int v23 = v8;
        uint64_t v119 = *(unsigned int *)(a1 + 2296);
        if (v119 < v117)
        {
          uint64_t v120 = v117 - v119;
          uint64_t v121 = 12 * v119;
          do
          {
            uint64_t v122 = *v19 + v121;
            *(void *)uint64_t v122 = 0x70000000FFFFFFFELL;
            *(_DWORD *)(v122 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 1879048192;
            v121 += 12;
            --v120;
          }
          while (v120);
        }
        int v32 = v117;
        *(_DWORD *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 296) = v117;
        uint64_t v30 = a1 + 624;
        long long v31 = (LMStats *)(a1 + 1056);
        uint64_t v294 = (SearchLMScorer *)(a1 + 624);
        LOBYTE(v295) = 1;
        int v25 = v278;
        uint64_t v26 = SeededPrecedingNonAcousticWords;
        goto LABEL_135;
      }
      if (*(_DWORD *)(Legal + 12)) {
        goto LABEL_127;
      }
      DgnArray<DgnPrimArray<double>>::reallocElts(Legal, 1, 0);
      unint64_t v131 = *(unsigned int *)(Legal + 8);
      if (v131 > 1)
      {
        if ((int)v131 >= 2)
        {
          uint64_t v132 = 16 * v131 - 16;
          do
          {
            --v131;
            DgnIArray<Utterance *>::~DgnIArray(*(void *)Legal + v132);
            v132 -= 16;
          }
          while (v131 > 1);
        }
        goto LABEL_128;
      }
      if (!v131)
      {
LABEL_127:
        char v116 = *(void **)Legal;
        *char v116 = 0;
        v116[1] = 0;
      }
LABEL_128:
      LOWORD(v115) = 1;
      *(_DWORD *)(Legal + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 1;
      goto LABEL_129;
    }
    uint64_t v305 = 0;
    uint64_t v306 = 0;
    unint64_t v34 = *(unsigned int *)(a1 + 544);
    uint64_t v275 = (int *)v5;
    uint64_t v261 = (void *)(a1 + 536);
    uint64_t v257 = Constraint::getLegal(*(void *)(a1 + 2216), v5, *(unsigned int *)(a1 + 36), 1, &v307, *(_DWORD *)(a1 + 288) + *(_DWORD *)(a1 + 316), (_DWORD *)(a1 + 1232), a1 + 536, (uint64_t *)(a1 + 552), a1 + 2360, 0);
    if (v7 == -50331650 && *(_DWORD *)(a1 + 2368))
    {
      uint64_t v35 = 0;
      unsigned int v36 = 0;
      while (1)
      {
        uint64_t v37 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v284 + 32))(v284, v270, *(unsigned int *)(a1 + 604));
        uint64_t v38 = v37;
        if (v37) {
          break;
        }
        ++v36;
        v35 += 12;
        if (v36 >= *(_DWORD *)(a1 + 2368)) {
          goto LABEL_45;
        }
      }
      if (v264 && !*(unsigned char *)(*(void *)(v9 + 8) + 114))
      {
        uint64_t v53 = v9;
        int v54 = -2;
      }
      else
      {
        uint64_t v53 = v9;
        int v54 = *(_DWORD *)(v37 + 4);
      }
      int v55 = *(__int16 *)(v37 + 8);
      HIDWORD(v30DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v54;
      uint64_t v56 = a1;
      int v57 = Recognizer::extendHistory(a1, *(_DWORD *)v37, v275, 0, *(_DWORD *)(a1 + 612), *(_DWORD *)(a1 + 612));
      int v58 = (uint64_t *)(*(void *)(v56 + 2360) + v35);
      uint64_t v59 = *v58;
      int v60 = *((_DWORD *)v58 + 2);
      int v61 = *(_DWORD *)(v56 + 612);
      unsigned int v62 = *(_DWORD *)(v56 + 2352);
      if (v62 == *(_DWORD *)(v56 + 2356))
      {
        DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(v56 + 2344, 1, 1);
        unsigned int v62 = *(_DWORD *)(v56 + 2352);
      }
      int v63 = v271 + v55;
      uint64_t v64 = *(void *)(v56 + 2344) + 28 * v62;
      *(void *)uint64_t v64 = v59;
      *(_DWORD *)(v64 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v60;
      *(_DWORD *)(v64 + 12) = v271 + v55;
      *(_WORD *)(v64 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v270;
      *(_DWORD *)(v64 + 20) = v57;
      *(_DWORD *)(v64 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = v61;
      ++*(_DWORD *)(v56 + 2352);
      uint64_t v65 = **(unsigned int **)(v56 + 256);
      unsigned int v66 = *(_DWORD *)(v56 + 2300);
      if (v65 > v66) {
        DgnArray<RuleDesc>::reallocElts((uint64_t)v265, v65 - v66, 0);
      }
      uint64_t v67 = *(unsigned int *)(v277 + 2296);
      if (v67 < v65)
      {
        uint64_t v68 = v65 - v67;
        uint64_t v69 = 12 * v67;
        do
        {
          uint64_t v70 = *v265 + v69;
          *(void *)uint64_t v70 = 0x70000000FFFFFFFELL;
          *(_DWORD *)(v70 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 1879048192;
          v69 += 12;
          --v68;
        }
        while (v68);
      }
      *(_DWORD *)(v277 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 296) = v65;
      if ((_WORD)v65)
      {
        uint64_t v71 = 0;
        do
        {
          int v72 = *(_DWORD *)(v277 + 324) + v63;
          int v73 = *(_DWORD *)(v38 + 4);
          if (v264 && *(unsigned char *)(*(void *)(v53 + 8) + 114) == 0) {
            int v73 = -2;
          }
          char v74 = (_DWORD *)(*(void *)(v277 + 2288) + v71);
          v74[1] = v73;
          v74[2] = v72;
          _DWORD *v74 = v57;
          v71 += 12;
        }
        while (12 * (unsigned __int16)v65 != v71);
      }
      Recognizer::dropCrumbs(v277, (unsigned int *)v275, a3, v271, &v308, v265);
      goto LABEL_107;
    }
LABEL_45:
    if (v12)
    {
      uint64_t v303 = 0;
      uint64_t v304 = 0;
      uint64_t v301 = 0;
      uint64_t v302 = 0;
      uint64_t v299 = 0;
      uint64_t v300 = 0;
      int v298 = -2;
      uint64_t v296 = 0;
      uint64_t v297 = 0;
      (*(void (**)(uint64_t, void **, uint64_t *, int *, uint64_t *, void **))(*(void *)v284 + 40))(v284, &v303, &v301, &v298, &v299, &v296);
      uint64_t v39 = v285;
      int v40 = v298;
      int v41 = v304;
      BOOL v42 = (int)v304 >= 1 && *(_DWORD *)v303 == -50331651;
      int v45 = (unsigned int *)v275;
      if ((int)v304 <= v42 + 1)
      {
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v296);
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v299);
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v301);
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v303);
LABEL_107:
        DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v305);
        return DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&v310);
      }
      unsigned int v272 = v42;
      HIDWORD(v294) = 0x3FFF;
      long long v295 = xmmword_2140866D0;
      uint64_t v267 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v284 + 32))(v284, 0, *(unsigned int *)(a1 + 604));
      int v75 = v298;
      if (!*(_DWORD *)(a1 + 2300)) {
        DgnArray<RuleDesc>::reallocElts((uint64_t)v265, 1, 0);
      }
      signed int v76 = v272;
      if (!*(_DWORD *)(a1 + 2296))
      {
        uint64_t v77 = *v265;
        *(void *)uint64_t v77 = 0x70000000FFFFFFFELL;
        *(_DWORD *)(v77 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 1879048192;
      }
      *(_DWORD *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 296) = 1;
      uint64_t v78 = v272;
      uint64_t v79 = (v41 - 2);
      unint64_t v80 = v303;
      if ((int)v79 > (int)v272)
      {
        int v279 = v41;
        int v252 = v8;
        uint64_t v254 = v9;
        unsigned __int16 v81 = 0;
        uint64_t v253 = *(void *)(*(void *)(**(void **)VocMgr::smpVocMgr
                                     + (((unint64_t)*((unsigned int *)v303 + v272) >> 22) & 0x3F8))
                         + 48);
        signed int v82 = v41 - 2;
        int v282 = -50331650;
        while (1)
        {
          int v83 = *(_DWORD *)(v301 + 4 * v79);
          *(_DWORD *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 296) = 0;
          if ((*((_DWORD *)v303 + v79) & 0xFFFFFF) != 0xFFFFF9) {
            break;
          }
          --v82;
LABEL_104:
          --v79;
          if (v82 <= v76)
          {
            unint64_t v80 = v303;
            uint64_t v9 = v254;
            int v8 = v252;
            int v45 = (unsigned int *)v275;
            uint64_t v39 = v285;
            int v41 = v279;
            uint64_t v78 = v272;
            unsigned int v104 = v282;
            goto LABEL_109;
          }
        }
        LODWORD(v294) = *((_DWORD *)v303 + v79);
        HIDWORD(v294) = 0x3FFF;
        long long v295 = xmmword_2140866D0;
        uint64_t v84 = (*(uint64_t (**)(uint64_t))(*(void *)v284 + 24))(v284);
        int v85 = v83 + 1;
        LODWORD(v295) = *(_DWORD *)(v84 + 8);
        HIDWORD(v295) = *((_DWORD *)v303 + v79) & 0xFE000000 | *((_DWORD *)v296 + v79) & 0xFFFFFF;
        DWORD2(v295) = v282;
        int v282 = *((_DWORD *)v303 + v79);
        int v86 = *(_DWORD *)(*(void *)(a1 + 328) + 4 * *(unsigned int *)(v301 + 4 * v79));
        int v75 = Recognizer::extendHistory(a1, v40, (int *)&v294, 0, v85, v85);
        if (v264 && *(unsigned char *)(*(void *)(v254 + 8) + 114) == 0) {
          int v87 = -2;
        }
        else {
          int v87 = *(_DWORD *)(v267 + 4);
        }
        unsigned int v88 = *((_DWORD *)v303 + --v82) & 0xFFFFFF;
        if (v88 == 16777209)
        {
          if (v79 < 2) {
            goto LABEL_92;
          }
          int v89 = *((_DWORD *)v303 + (v79 - 2));
          if (v89 == -50331651) {
            goto LABEL_92;
          }
          unsigned int v88 = v89 & 0xFFFFFF;
        }
        unsigned __int16 v81 = *(_WORD *)(*(void *)(v253 + 592) + 2 * v88);
LABEL_92:
        int v90 = *(_DWORD *)(v299 + 4 * v79);
        uint64_t v91 = a1;
        int v92 = v81 + 1;
        unsigned int v93 = *(_DWORD *)(v91 + 2300);
        if (v93 <= v81)
        {
          signed int v94 = v82;
          int v95 = v87;
          DgnArray<RuleDesc>::reallocElts((uint64_t)v265, v92 - v93, 0);
          int v87 = v95;
          signed int v82 = v94;
        }
        uint64_t v96 = *(unsigned int *)(v277 + 2296);
        if (v96 <= v81)
        {
          uint64_t v97 = v81 - v96 + 1;
          uint64_t v98 = 12 * v96;
          do
          {
            uint64_t v99 = *v265 + v98;
            *(void *)uint64_t v99 = 0x70000000FFFFFFFELL;
            *(_DWORD *)(v99 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 1879048192;
            v98 += 12;
            --v97;
          }
          while (v97);
        }
        *(_DWORD *)(v277 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 296) = v92;
        a1 = v277;
        uint64_t v100 = (int *)(*(void *)(v277 + 2288) + 12 * v81);
        v100[1] = v87;
        v100[2] = v90 + v86;
        *uint64_t v100 = v75;
        int v101 = *(_DWORD *)(v301 + 4 * v79);
        uint64_t v292 = 0;
        uint64_t v293 = 0;
        uint64_t v290 = 0;
        uint64_t v291 = 0;
        uint64_t v288 = 0;
        uint64_t v289 = 0;
        CWIDCrumbBank::getFrameInfo(*(void *)(v277 + 368), 0, v101, (uint64_t)&v292, (uint64_t)&v290, (uint64_t)&v288);
        if (v293)
        {
          uint64_t v102 = 0;
          unint64_t v103 = 0;
          while (!CWIDAC::operator==(v292 + v102, (uint64_t)&v294)
               || CWIDCrumbBank::getHistory(*(void *)(v277 + 368), v101, v292 + v102, v81) != v75)
          {
            ++v103;
            v102 += 24;
            if (v103 >= v293) {
              goto LABEL_102;
            }
          }
        }
        else
        {
LABEL_102:
          CWIDCrumbBank::addCrumbWACSRecordEFst(*(CWIDCrumbBank **)(v277 + 368), v101, (uint64_t)&v294, *(_DWORD *)(v299 + 4 * v79) + v271, &v308, v265, v81);
        }
        DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v288);
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v290);
        DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v292);
        int v40 = v75;
        signed int v76 = v272;
        goto LABEL_104;
      }
      unsigned int v104 = -50331650;
LABEL_109:
      unsigned int v105 = *((_DWORD *)v80 + v78);
      unint64_t v46 = v261;
      if ((v105 & 0xFFFFFF) != 0xFFFFF9)
      {
        unsigned int v106 = v45[2];
        unsigned int v312 = v105;
        int v313 = 0x3FFF;
        *(void *)&long long v314 = v106 | 0xFFFFFFFE00000000;
        *((void *)&v314 + 1) = v104 | 0xFAFFFFFC00000000;
      }
      uint64_t v107 = **(int ***)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v284 + 16))(v284) + 8) + 72);
      *uint64_t v107 = v75;
      v107[1] = 0;
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v296);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v299);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v301);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v303);
    }
    else
    {
      int v41 = 0;
      int v45 = (unsigned int *)v275;
      uint64_t v39 = v285;
      unint64_t v46 = (void *)(a1 + 536);
    }
    int v278 = v41;
    if (*(unsigned char *)(a1 + 361))
    {
      int v108 = v8;
      uint64_t v109 = *(void *)(a1 + 2216);
      if ((*(_DWORD *)(v109 + 68) & 0xFFFFFFFD) == 0)
      {
        unint64_t v110 = *v45;
        if (v110 >> 25 == 126
          || (uint64_t v111 = *(void *)(*(void *)(**(void **)VocMgr::smpVocMgr + ((v110 >> 22) & 0x3F8)) + 48),
              uint64_t v112 = v110 & 0xFFFFFF,
              *(_WORD *)(*(void *)(v111 + 32) + 2 * v112) != 1)
          || *(_WORD *)(*(void *)(v111 + 592) + 2 * v112))
        {
          uint64_t SeededPrecedingNonAcousticWords = Constraint::getSeededPrecedingNonAcousticWords(v109, v45);
          uint64_t v39 = v285;
          unint64_t v46 = v261;
LABEL_120:
          if (v34 < *(_DWORD *)(a1 + 544))
          {
            do
            {
              if ((PhnMgr::operator==(*(void *)(a1 + 256), *(void *)(**v39 + 8 * *(unsigned __int16 *)(*(void *)(a1 + 536) + 2 * v34)) + 184) & 1) == 0)errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/kernel/recog.cpp", 5223, (uint64_t)"kernel/recog", 4, (uint64_t)"%u", v113, v114, *(_WORD *)(*v46 + 2 * v34)); {
              ++v34;
              }
            }
            while (v34 < *(unsigned int *)(a1 + 544));
          }
          DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v305);
          int v19 = v265;
          int v8 = v108;
          uint64_t Legal = v257;
          goto LABEL_125;
        }
      }
    }
    else
    {
      int v108 = v8;
    }
    uint64_t SeededPrecedingNonAcousticWords = 0;
    goto LABEL_120;
  }
  if (v17 && (uint64_t v20 = *(void *)(a1 + 2216), (*(_DWORD *)(v20 + 68) & 0xFFFFFFFD) == 0))
  {
    unsigned int v47 = v5;
    int WeightsForState = Constraint::getWeightsForState(v20, v5);
    if (WeightsForState != 0xFFFF)
    {
      unint64_t v49 = (unint64_t)*v47 >> 25;
      unint64_t v50 = v49 + 1;
      if (HIDWORD(v311) <= v49)
      {
        uint64_t v294 = 0;
        HIDWORD(v311) = realloc_array(v310, (void **)&v294, 16 * v50, 16 * v311, 16 * v311, 1) >> 4;
        uint64_t v310 = v294;
      }
      if (v311 <= v50)
      {
        if (v311 <= v49)
        {
          uint64_t v245 = v49 - v311 + 1;
          uint64_t v246 = 16 * v311;
          do
          {
            uint64_t v247 = (void *)((char *)v310 + v246);
            *uint64_t v247 = 0;
            v247[1] = 0;
            v246 += 16;
            --v245;
          }
          while (v245);
        }
      }
      else
      {
        uint64_t v51 = (int)v311;
        if ((int)v311 > (int)v50)
        {
          uint64_t v52 = 16 * (int)v311 - 16;
          do
          {
            --v51;
            DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v310 + v52);
            v52 -= 16;
          }
          while (v51 > v50);
        }
      }
      LODWORD(v311) = v49 + 1;
      uint64_t v248 = (void *)((char *)v310 + 16 * v49);
      uint64_t v250 = (unsigned int *)(v248 + 1);
      unsigned int v249 = *((_DWORD *)v248 + 2);
      a1 = v277;
      if (v249 == *((_DWORD *)v248 + 3))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)v248, 1, 1);
        unsigned int v249 = *v250;
      }
      *(_DWORD *)(*v248 + 4 * v249) = WeightsForState;
      ++*v250;
    }
    uint64_t SeededWeights = &v310;
  }
  else
  {
    uint64_t SeededWeights = 0;
  }
  if (!*(_DWORD *)(a1 + 2300)) {
    DgnArray<RuleDesc>::reallocElts((uint64_t)v19, 1, 0);
  }
  int v21 = v17;
  uint64_t v22 = v9;
  int v23 = v8;
  if (!*(_DWORD *)(a1 + 2296))
  {
    uint64_t v24 = *v19;
    *(void *)uint64_t v24 = 0x70000000FFFFFFFELL;
    *(_DWORD *)(v24 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 1879048192;
  }
  int v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  int v286 = 0;
  int v28 = 0;
  uint64_t v29 = 0;
  int v256 = 0;
  *(_DWORD *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 296) = 1;
  uint64_t v30 = a1 + 624;
  uint64_t v294 = (SearchLMScorer *)(a1 + 624);
  long long v31 = (LMStats *)(a1 + 1056);
  LOBYTE(v295) = v21;
  int v32 = 0xFFFF;
  if (v21)
  {
LABEL_135:
    int v256 = 1;
    uint64_t v123 = v31;
    SearchLMScorer::setContext(v30, 4211081212, &v312, v27, 1, (uint64_t)SeededWeights, v31, 0, 0xFAFFFFFC, 0xFAFFFFFC);
    long long v31 = v123;
    int v286 = v25;
    int v28 = (void *)v26;
    uint64_t v29 = (void *)v27;
  }
  uint64_t v268 = v29;
  uint64_t v283 = v31;
  uint64_t v276 = v28;
  if (v23 < a3)
  {
    char v273 = 0;
    int v269 = 20000;
    uint64_t v124 = v22;
    unsigned int v125 = v32;
    int64_t v126 = (SearchLMScorer *)v30;
    goto LABEL_182;
  }
  char v273 = 0;
  int v269 = 20000;
  uint64_t v124 = v22;
  unsigned int v125 = v32;
  if (*(unsigned char *)(a1 + 304))
  {
    int64_t v126 = (SearchLMScorer *)v30;
    if (v270)
    {
      uint64_t v127 = v31;
      uint64_t v128 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v284 + 32))(v284, 0xFFFFLL, *(unsigned int *)(a1 + 604));
      if (v128)
      {
        if (v264)
        {
          uint64_t v129 = *(unsigned char **)(v22 + 8);
          if (v129[114]) {
            int v130 = *(_DWORD *)(v128 + 4);
          }
          else {
            int v130 = -2;
          }
        }
        else
        {
          int v130 = *(_DWORD *)(v128 + 4);
          uint64_t v129 = *(unsigned char **)(v22 + 8);
        }
        int v133 = *(__int16 *)(v128 + 8);
        HIDWORD(v30DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v130;
        int v134 = *(_DWORD *)v128;
        int v135 = (*(uint64_t (**)(unsigned char *))(*(void *)v129 + 104))(v129);
        int v269 = v271 + v133;
        LODWORD(v30DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = Recognizer::extendHistory(a1, v134, (int *)&v312, 1, v135, *(_DWORD *)(a1 + 612));
        char v273 = 1;
      }
      else
      {
        char v273 = 0;
        int v269 = 20000;
      }
      long long v31 = v127;
      if (v125) {
        goto LABEL_159;
      }
      goto LABEL_182;
    }
  }
  else
  {
    int64_t v126 = (SearchLMScorer *)v30;
  }
  if (v125)
  {
LABEL_159:
    uint64_t v280 = v126;
    uint64_t v136 = v124;
    uint64_t v137 = 0;
    uint64_t v138 = 4;
    uint64_t v139 = 8;
    unsigned int v262 = v125;
    uint64_t v140 = v125;
    while (1)
    {
      char v141 = (int *)(*v268 + v139);
      int v143 = *v141;
      uint64_t v142 = (uint64_t *)(v141 - 2);
      if (!v143)
      {
        BOOL v153 = v137 || *(unsigned char *)(a1 + 304) == 0;
        BOOL v154 = v153;
        if (!v286 && v154) {
          goto LABEL_180;
        }
      }
      uint64_t v144 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v284 + 32))(v284, (unsigned __int16)v137, *(unsigned int *)(a1 + 604));
      uint64_t v145 = v144;
      if (v144)
      {
        int v146 = *(__int16 *)(v144 + 8);
        unsigned int v147 = Recognizer::extendHistory(a1, *(_DWORD *)v144, (int *)&v312, 0, *(_DWORD *)(a1 + 612), *(_DWORD *)(a1 + 612));
        unsigned int v148 = v147;
        int v149 = v271 + v146;
        int v150 = *(_DWORD *)(a1 + 324) + v271 + v146;
        int v151 = *(_DWORD *)(v145 + 4);
        if (v264 && *(unsigned char *)(*(void *)(v136 + 8) + 114) == 0) {
          int v151 = -2;
        }
        uint64_t v152 = (int *)(*(void *)(a1 + 2288) + v138);
        *(v152 - 1) = v147;
        *uint64_t v152 = v151;
        v152[1] = v150;
        if (v147 != -2)
        {
          char v273 = 1;
          unsigned int v155 = v308;
          goto LABEL_179;
        }
        char v273 = 1;
      }
      else
      {
        int v149 = 20000;
      }
      unsigned int v155 = v308;
      if (v308 != -2)
      {
        unsigned int v148 = -2;
LABEL_179:
        Recognizer::seedFromOnePredToOnePhoneForward(a1, v284, v270, v149, v269, v148, v155, v142);
      }
LABEL_180:
      ++v137;
      v138 += 12;
      v139 += 16;
      if (v140 == v137)
      {
        uint64_t v124 = v136;
        int v19 = v265;
        unsigned int v125 = v262;
        int64_t v126 = v280;
        long long v31 = v283;
        break;
      }
    }
  }
LABEL_182:
  if (v259)
  {
    uint64_t v156 = v31;
    uint64_t v157 = 604;
    if (!*(unsigned char *)(a1 + 24)) {
      uint64_t v157 = 600;
    }
    uint64_t v158 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v284 + 32))(v284, 0, *(unsigned int *)(a1 + v157));
    uint64_t v159 = v158;
    if (v158)
    {
      int v160 = *(__int16 *)(v158 + 8);
      unsigned int v161 = Recognizer::extendHistory(a1, *(_DWORD *)v158, (int *)&v312, 0, *(_DWORD *)(a1 + 612), *(_DWORD *)(a1 + 612));
      unsigned int v162 = v161;
      int v163 = v271 + v160;
      int v164 = *(_DWORD *)(a1 + 324) + v163;
      int v165 = *(_DWORD *)(v159 + 4);
      if (v264 && *(unsigned char *)(*(void *)(v124 + 8) + 114) == 0) {
        int v165 = -2;
      }
      uint64_t v166 = *(unsigned int **)(a1 + 2288);
      v166[1] = v165;
      v166[2] = v164;
      *uint64_t v166 = v161;
      if (v256) {
        int v167 = SearchLMScorer::lmScoreFinalSilence(v126, v156);
      }
      else {
        int v167 = SearchLMScorer::lmScoreFinalSilenceWithoutActualLM((uint64_t)v126, 4211081212, &v312);
      }
      Recognizer::seedOneFromPort(a1, v284, v270, v163, v167, 0, 0, 0, *(_DWORD *)(a1 + 160), v162, a1 + 832, v251, 20000);
      char v273 = 1;
    }
  }
  if (!v28 || !*((_DWORD *)v28 + 2))
  {
    int v198 = v269;
    goto LABEL_317;
  }
  uint64_t v305 = 0;
  uint64_t v306 = 0;
  int v287 = *(_DWORD *)(a1 + 64) + *(_DWORD *)(a1 + 604);
  uint64_t v303 = 0;
  uint64_t v304 = 0;
  uint64_t v301 = 0;
  uint64_t v302 = 0;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v296 = 0;
  uint64_t v297 = 0;
  uint64_t v292 = 0;
  uint64_t v293 = 0;
  uint64_t v255 = v124;
  unsigned int v263 = v125;
  uint64_t v281 = v126;
  if (*((_DWORD *)SeededWeights + 2))
  {
    uint64_t v168 = *((unsigned int *)v28 + 2);
    if ((int)v168 >= 1)
    {
      do
      {
        uint64_t v169 = v168 - 1;
        unint64_t v170 = (unint64_t)*(unsigned int *)(*v28 + 4 * (v168 - 1)) >> 25;
        if (v170 < *((_DWORD *)SeededWeights + 2))
        {
          uint64_t v171 = (uint64_t)*SeededWeights + 16 * v170;
          uint64_t v172 = *(unsigned int *)(v171 + 8);
          if (v172)
          {
            LODWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304) = 0;
            uint64_t v173 = v296;
            uint64_t v260 = v168;
            if (!HIDWORD(v297))
            {
              uint64_t v290 = 0;
              HIDWORD(v297) = realloc_array(v296, &v290, 4uLL, 4 * v297, 4 * v297, 1) >> 2;
              uint64_t v173 = v290;
              uint64_t v296 = v290;
            }
            uint64_t v174 = 0;
            char v175 = 0;
            uint64_t v258 = v168 - 1;
            uint64_t v176 = (v168 - 1);
            LODWORD(v297) = 1;
            int v177 = 20000;
            *uint64_t v173 = 20000;
            do
            {
              uint64_t v178 = *(unsigned int *)(*(void *)v171 + 4 * v174);
              int v179 = SearchLMScorer::lmScoreNonAcousticWord(v281, *(_DWORD *)(*v276 + 4 * v176), v178, v283);
              int v180 = v179;
              int v181 = *(_DWORD *)(v277 + 60);
              BOOL v182 = v181 == -1 || v179 <= v181;
              char v184 = v182 && v179 + a3 <= v287;
              uint64_t v185 = v304;
              if (v304 == (unint64_t)HIDWORD(v304))
              {
                DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v303, 1, 1);
                uint64_t v185 = v304;
              }
              *((_DWORD *)v303 + v185) = v178;
              int v186 = v304;
              LODWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304) = v304 + 1;
              if (v177 > v180 || v186 == 0) {
                int v177 = v180;
              }
              if (v178 == 0xFFFF)
              {
                uint64_t v188 = (int *)v296;
              }
              else
              {
                unsigned int v189 = v297;
                if (v297 <= v178)
                {
                  do
                  {
                    if (v189 == HIDWORD(v297))
                    {
                      DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v296, 1, 1);
                      unsigned int v189 = v297;
                    }
                    uint64_t v190 = v296;
                    *((_DWORD *)v296 + v189) = 20000;
                    unsigned int v189 = v297 + 1;
                    LODWORD(v297) = v189;
                  }
                  while (v189 <= v178);
                }
                else
                {
                  uint64_t v190 = v296;
                }
                uint64_t v188 = (int *)v190 + v178;
              }
              v175 |= v184;
              *uint64_t v188 = v180;
              ++v174;
            }
            while (v174 != v172);
            a1 = v277;
            uint64_t v169 = v258;
            uint64_t v168 = v260;
            if (v175)
            {
              uint64_t v191 = v302;
              if (v302 == (unint64_t)HIDWORD(v302))
              {
                DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v301, 1, 1);
                uint64_t v191 = v302;
              }
              int v192 = (void *)(v301 + 16 * v191);
              *int v192 = 0;
              v192[1] = 0;
              DgnPrimArray<int>::copyArraySlice((unint64_t)v192, (uint64_t *)&v303, 0, v304);
              LODWORD(v302) = v302 + 1;
              uint64_t v193 = v300;
              if (v300 == (unint64_t)HIDWORD(v300))
              {
                DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v299, 1, 1);
                uint64_t v193 = v300;
              }
              *(_DWORD *)(v299 + 4 * v193) = v177;
              LODWORD(v300) = v300 + 1;
              uint64_t v194 = v293;
              if (v293 == (unint64_t)HIDWORD(v293))
              {
                DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v292, 1, 1);
                uint64_t v194 = v293;
              }
              uint64_t v195 = (void *)(v292 + 16 * v194);
              *uint64_t v195 = 0;
              v195[1] = 0;
              DgnPrimArray<int>::copyArraySlice((unint64_t)v195, (uint64_t *)&v296, 0, v297);
              LODWORD(v293) = v293 + 1;
              int v196 = *(_DWORD *)(*v276 + 4 * v176);
              uint64_t v197 = v306;
              if (v306 == (unint64_t)HIDWORD(v306))
              {
                DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v305, 1, 1);
                uint64_t v197 = v306;
              }
              *(_DWORD *)(v305 + 4 * v197) = v196;
              LODWORD(v306) = v306 + 1;
            }
          }
        }
        BOOL v182 = v168 <= 1;
        uint64_t v168 = v169;
        int v28 = v276;
      }
      while (!v182);
    }
  }
  else
  {
    uint64_t v290 = 0;
    unint64_t v199 = realloc_array(0, &v290, 4uLL, 0, 0, 1);
    uint64_t v296 = v290;
    LODWORD(v297) = 1;
    HIDWORD(v297) = v199 >> 2;
    if (!HIDWORD(v304))
    {
      uint64_t v290 = 0;
      HIDWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304) = realloc_array(v303, &v290, 4uLL, 4 * v304, 4 * v304, 1) >> 2;
      uint64_t v303 = v290;
    }
    LODWORD(vDgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 304) = 1;
    uint64_t v200 = *((unsigned int *)v28 + 2);
    if ((int)v200 >= 1)
    {
      unint64_t v201 = v200 + 1;
      do
      {
        uint64_t v202 = (v201 - 2);
        int v203 = SearchLMScorer::lmScoreNonAcousticWord(v126, *(_DWORD *)(*v28 + 4 * v202), 0xFFFFLL, v283);
        int v204 = v203;
        int v205 = *(_DWORD *)(a1 + 60);
        if ((v203 <= v205 || v205 == -1) && v203 + a3 <= v287)
        {
          *(_DWORD *)uint64_t v303 = 0xFFFF;
          uint64_t v208 = v302;
          if (v302 == (unint64_t)HIDWORD(v302))
          {
            DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v301, 1, 1);
            uint64_t v208 = v302;
          }
          uint64_t v209 = (void *)(v301 + 16 * v208);
          *uint64_t v209 = 0;
          v209[1] = 0;
          DgnPrimArray<int>::copyArraySlice((unint64_t)v209, (uint64_t *)&v303, 0, v304);
          LODWORD(v302) = v302 + 1;
          uint64_t v210 = v300;
          if (v300 == (unint64_t)HIDWORD(v300))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v299, 1, 1);
            uint64_t v210 = v300;
          }
          *(_DWORD *)(v299 + 4 * v210) = v204;
          LODWORD(v300) = v300 + 1;
          *(_DWORD *)uint64_t v296 = v204;
          uint64_t v211 = v293;
          if (v293 == (unint64_t)HIDWORD(v293))
          {
            DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v292, 1, 1);
            uint64_t v211 = v293;
          }
          uint64_t v212 = (void *)(v292 + 16 * v211);
          *uint64_t v212 = 0;
          v212[1] = 0;
          DgnPrimArray<int>::copyArraySlice((unint64_t)v212, (uint64_t *)&v296, 0, v297);
          LODWORD(v293) = v293 + 1;
          int v213 = *(_DWORD *)(*v28 + 4 * v202);
          uint64_t v214 = v306;
          if (v306 == (unint64_t)HIDWORD(v306))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v305, 1, 1);
            uint64_t v214 = v306;
          }
          *(_DWORD *)(v305 + 4 * v214) = v213;
          LODWORD(v306) = v306 + 1;
        }
        --v201;
      }
      while (v201 > 1);
    }
  }
  LODWORD(v215) = v306;
  if ((int)v306 >= 1)
  {
    if ((_BYTE)v295)
    {
      SearchLMScorer::unsetContext((uint64_t)v294);
      LODWORD(v215) = v306;
      LOBYTE(v295) = 0;
      uint64_t v290 = 0;
      uint64_t v291 = 0;
      int v19 = v265;
      if ((int)v306 < 1)
      {
LABEL_315:
        DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&v290);
        goto LABEL_316;
      }
    }
    else
    {
      LOBYTE(v295) = 0;
      uint64_t v290 = 0;
      uint64_t v291 = 0;
    }
    uint64_t v216 = v215;
    while (1)
    {
      uint64_t v215 = (v215 - 1);
      unint64_t v217 = *(unsigned int *)(v305 + 4 * v215);
      if (v270
        && (uint64_t v218 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v284 + 32))(v284, 0xFFFFLL, (v287 - *(_DWORD *)(v299 + 4 * v215)))) != 0)
      {
        if (v308 == -2)
        {
          if (v264)
          {
            uint64_t v219 = *(unsigned char **)(v255 + 8);
            if (v219[114]) {
              int v220 = *(_DWORD *)(v218 + 4);
            }
            else {
              int v220 = -2;
            }
          }
          else
          {
            int v220 = *(_DWORD *)(v218 + 4);
            uint64_t v219 = *(unsigned char **)(v255 + 8);
          }
          int v222 = *(__int16 *)(v218 + 8);
          HIDWORD(v30DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v220;
          int v223 = *(_DWORD *)v218;
          int v224 = (*(uint64_t (**)(unsigned char *))(*(void *)v219 + 104))(v219);
          int v269 = v271 + v222;
          LODWORD(v30DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = Recognizer::extendHistory(a1, v223, (int *)&v312, 1, v224, *(_DWORD *)(a1 + 612));
        }
        char v273 = 1;
        int v221 = 1;
      }
      else
      {
        int v221 = 0;
      }
      if (*(_DWORD *)(v301 + 16 * v215 + 8) != 1) {
        break;
      }
      unsigned int v225 = v291;
      if (**(_DWORD **)(v301 + 16 * v215) != 0xFFFF) {
        goto LABEL_287;
      }
      if ((int)v291 >= 1)
      {
        uint64_t v226 = 16 * v291 - 16;
        do
        {
          DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v290 + v226);
          v226 -= 16;
        }
        while (v226 != -16);
      }
      LODWORD(v291) = 0;
LABEL_300:
      uint64_t v288 = v281;
      LOBYTE(v289) = 1;
      SearchLMScorer::setContext((uint64_t)v281, 4211081212, &v312, (uint64_t)v268, 1, (uint64_t)&v290, v283, 1, v217, 0xFAFFFFFC);
      if (v263)
      {
        uint64_t v234 = 0;
        uint64_t v235 = 8;
        do
        {
          if (v234)
          {
            uint64_t v236 = (int *)(*v268 + v235);
            int v238 = *v236;
            uint64_t v237 = (uint64_t *)(v236 - 2);
            if (v238)
            {
              uint64_t v239 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v284 + 32))(v284, (unsigned __int16)v234, (v287 - *(_DWORD *)(v299 + 4 * v215)));
              if (v239)
              {
                int v240 = *(__int16 *)(v239 + 8);
                unsigned int v241 = Recognizer::extendHistory(a1, *(_DWORD *)v239, (int *)&v312, 0, *(_DWORD *)(a1 + 612), *(_DWORD *)(a1 + 612));
                int v242 = v271 + v240;
                char v273 = 1;
              }
              else
              {
                unsigned int v241 = -2;
                int v242 = 20000;
              }
              if (((v241 == -2) & ~v221) == 0)
              {
                if (v221) {
                  unsigned int v243 = v308;
                }
                else {
                  unsigned int v243 = -2;
                }
                Recognizer::seedFromOnePredToOnePhoneWithNonAcousticWordForward(a1, v284, v270, v242, v269, v241, v243, v237, *(_DWORD *)(v305 + 4 * v215), (int **)(v292 + 16 * v215));
              }
            }
          }
          ++v234;
          v235 += 16;
        }
        while (v263 != v234);
      }
      SearchLMContext::~SearchLMContext((SearchLMContext *)&v288);
      BOOL v182 = v216-- <= 1;
      int v19 = v265;
      if (v182) {
        goto LABEL_315;
      }
    }
    unsigned int v225 = v291;
LABEL_287:
    if (v225) {
      *((_DWORD *)v290 + 4 * v225 - 2) = 0;
    }
    unint64_t v227 = v217 >> 25;
    uint64_t v228 = (v217 >> 25) + 1;
    if (HIDWORD(v291) <= (v217 >> 25))
    {
      uint64_t v288 = 0;
      HIDWORD(v291) = realloc_array(v290, &v288, 16 * v228, 16 * v225, 16 * v225, 1) >> 4;
      uint64_t v290 = v288;
      unsigned int v225 = v291;
    }
    if (v225 <= v228)
    {
      if (v225 <= v227)
      {
        uint64_t v231 = v227 - v225 + 1;
        uint64_t v232 = 16 * v225;
        do
        {
          uint64_t v233 = (char *)v290 + v232;
          *uint64_t v233 = 0;
          v233[1] = 0;
          v232 += 16;
          --v231;
        }
        while (v231);
      }
    }
    else if ((int)v225 > (int)v228)
    {
      uint64_t v229 = (int)v225;
      uint64_t v230 = 16 * (int)v225 - 16;
      do
      {
        --v229;
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v290 + v230);
        v230 -= 16;
      }
      while (v229 > v228);
    }
    LODWORD(v291) = (v217 >> 25) + 1;
    DgnPrimArray<int>::copyArraySlice((unint64_t)v290 + 16 * v227, (uint64_t *)(v301 + 16 * v215), 0, *(_DWORD *)(v301 + 16 * v215 + 8));
    a1 = v277;
    goto LABEL_300;
  }
  int v19 = v265;
LABEL_316:
  int v198 = v269;
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&v292);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v296);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v299);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&v301);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v303);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v305);
LABEL_317:
  if ((v273 & 1) != 0 && *(_DWORD *)(a1 + 312) != 3)
  {
    if (v198 != 20000) {
      int v309 = *(_DWORD *)(a1 + 324) + v198;
    }
    Recognizer::dropCrumbs(a1, &v312, a3, v271, &v308, v19);
  }
  SearchLMContext::~SearchLMContext((SearchLMContext *)&v294);
  return DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&v310);
}

void sub_213FCC8F8(_Unwind_Exception *a1)
{
  DgnIArray<Utterance *>::~DgnIArray(v1 - 184);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v1 - 144);
  _Unwind_Resume(a1);
}

uint64_t Recognizer::dropCrumbs(uint64_t a1, unsigned int *a2, __int16 a3, __int16 a4, _DWORD *a5, uint64_t *a6)
{
  unint64_t v7 = *a2;
  if (v7 >> 25 == 126)
  {
    int v8 = *(CWIDCrumbBank **)(a1 + 368);
    int v9 = *(_DWORD *)(a1 + 608);
    __int16 v10 = a4 + a3;
    return CWIDCrumbBank::addCrumbWACSRecord(v8, v9, (uint64_t)a2, v10, a5, a6);
  }
  int v11 = *(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(**(void **)VocMgr::smpVocMgr + ((v7 >> 22) & 0x3F8))
                                                    + 56)
                                        + 528)
                            + 2 * a2[2]);
  int v8 = *(CWIDCrumbBank **)(a1 + 368);
  int v9 = *(_DWORD *)(a1 + 608);
  __int16 v10 = a4 + a3;
  if (v11 == 127) {
    return CWIDCrumbBank::addCrumbWACSRecord(v8, v9, (uint64_t)a2, v10, a5, a6);
  }
  return CWIDCrumbBank::addCrumbWACSRecordEFst(*(CWIDCrumbBank **)(a1 + 368), v9, (uint64_t)a2, v10, a5, a6, 0xFFFFu);
}

uint64_t Recognizer::doFinalSilForward(Recognizer *this)
{
  uint64_t v2 = *((void *)this + 35);
  uint64_t v19 = 0x3FFFFCFFFFFDLL;
  long long v20 = xmmword_2140866D0;
  uint64_t result = (uint64_t)Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::findBucket(v2 + 303024, (uint64_t)&v19);
  if (*(void *)result)
  {
    uint64_t v4 = *(void *)(*(void *)result + 40);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 8);
      if (*(_DWORD *)(v5 + 104) || *(unsigned char *)(v5 + 112))
      {
        unsigned int v6 = *(_DWORD *)(v5 + 40);
        if (v6 < 2)
        {
          uint64_t v7 = 0;
        }
        else if (v6 - 3 >= 2)
        {
          BOOL v8 = v6 == 2;
          uint64_t v7 = 1;
          if (!v8) {
            uint64_t v7 = 255;
          }
        }
        else
        {
          uint64_t v7 = **(unsigned __int8 **)(v5 + 88);
        }
        uint64_t v9 = *(void *)(*(void *)(v5 + 72) + 8 * v7);
        int v10 = *((_DWORD *)this + 78);
        if (v10) {
          BOOL v11 = 0;
        }
        else {
          BOOL v11 = *((unsigned char *)this + 25) != 0;
        }
        int v12 = *(__int16 *)(v9 + 8);
        if (!*((unsigned char *)this + 304))
        {
          uint64_t v19 = (uint64_t)&unk_26C4E31F8;
          *(void *)&long long v20 = v4;
          uint64_t result = Recognizer::seedOneFromPort((uint64_t)this, (uint64_t)&v19, 0, v12, 0, 0, 0, 0, 0, *(_DWORD *)v9, (uint64_t)this + 832, v18, 20000);
          int v10 = *((_DWORD *)this + 78);
        }
        if (v10 != 3)
        {
          int v13 = Recognizer::extendHistory((uint64_t)this, *(_DWORD *)v9, (int *)(*(void *)(v4 + 8) + 16), 0, *((_DWORD *)this + 153), *((_DWORD *)this + 153));
          int v14 = *((_DWORD *)this + 81) + v12;
          *((_DWORD *)this + 574) = 0;
          if (*((_DWORD *)this + 575)
            || (DgnArray<RuleDesc>::reallocElts((uint64_t)this + 2288, 1, 0), !*((_DWORD *)this + 574)))
          {
            uint64_t v15 = *((void *)this + 286);
            *(void *)uint64_t v15 = 0x70000000FFFFFFFELL;
            *(_DWORD *)(v15 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 1879048192;
          }
          *((_DWORD *)this + 574) = 1;
          int v16 = *(_DWORD *)(v9 + 4);
          if (v11) {
            int v16 = -2;
          }
          int v17 = (int *)*((void *)this + 286);
          v17[1] = v16;
          void v17[2] = v14;
          *int v17 = v13;
          return CWIDCrumbBank::addFinalSilHABS(*((CWIDCrumbBank **)this + 46), *((_DWORD *)this + 152), *(void *)(v4 + 8) + 16, v13, v14);
        }
      }
    }
  }
  return result;
}

void Recognizer::doForward(uint64_t a1, uint64_t a2)
{
  DgnDelete<RecogGermIterator>(*(void (****)(void))(a1 + 376));
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 376) = 0;
  if (a2)
  {
    uint64_t v9 = MemChunkAlloc(0x30uLL, 0);
    *((_DWORD *)v9 + 2) = 0;
    *((unsigned char *)v9 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = 0;
    v9[3] = 0;
    *uint64_t v9 = (uint64_t)&unk_26C4E2F98;
    v9[5] = a2;
    *((_DWORD *)v9 + 3) = *(_DWORD *)(a2 + 8);
    *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 376) = v9;
    int v10 = *(Constraint **)(a1 + 2216);
  }
  else
  {
    int v10 = *(Constraint **)(a1 + 2216);
    uint64_t v9 = 0;
  }
  Constraint::prunePreList(v10, (RecogGermIterator *)v9, 0, v4, v5, v6, v7, v8);
  int v11 = *(_DWORD *)(a1 + 604);
  int v12 = v11;
  if (!*(unsigned char *)(a1 + 24)) {
    int v12 = *(_DWORD *)(a1 + 600);
  }
  uint64_t v13 = *(void *)(a1 + 392);
  if (v13)
  {
    *(_DWORD *)(a1 + 40DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
    *(_DWORD *)(a1 + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 1;
  }
  int v14 = (uint64_t *)(a1 + 392);
  uint64_t v15 = (void *)(*(void *)(a1 + 280) + 303240);
  int v16 = *(_DWORD *)(*(void *)(a1 + 280) + 303248);
  if (v16 - 1 >= 0)
  {
    uint64_t v17 = 8 * (v16 - 1);
    do
    {
      int v18 = *(ActiveWord **)(*v15 + v17);
      uint64_t v19 = *((void *)v18 + 1);
      int v20 = *(__int16 *)(v19 + 108);
      if ((*(_DWORD *)(v19 + 104) || *(unsigned char *)(v19 + 112)) && *(_DWORD *)(v19 + 16) != -50331651 && v12 >= v20)
      {
        if (*(_DWORD *)(v19 + 24) == -1 || *(_DWORD *)(v19 + 28) == -3)
        {
          MergedActive::add(a1 + 392, v18);
        }
        else
        {
          v29[0] = &unk_26C4E31F8;
          v29[1] = v18;
          Recognizer::seedFromOnePredForward(a1, (uint64_t)v29, v20);
        }
        if (v11 >= v20) {
          ++*(_DWORD *)(a1 + 1600);
        }
      }
      --v16;
      v17 -= 8;
    }
    while (v16 >= 1);
    uint64_t v13 = *v14;
  }
  if (v13)
  {
    *(_DWORD *)(a1 + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 2;
    int v22 = *(_DWORD *)(a1 + 408);
    if (!v22) {
      goto LABEL_34;
    }
    for (unsigned int i = 0; i != v22; ++i)
    {
      uint64_t v24 = MergedActive::processMergedWord((MergedActive *)(a1 + 392), i, v12);
      uint64_t v25 = *(unsigned int *)(v24 + 24);
      if ((int)v25 >= 1)
      {
        do
        {
          uint64_t v26 = v25 - 1;
          uint64_t v27 = *(void *)(v24 + 16);
          if (*(_WORD *)(v27 + 2 * (v25 - 1)) != 20000)
          {
            *(_DWORD *)(v24 + HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 88) = v25 - 1;
            int v28 = *(void **)(*(void *)(v24 + 8) + 24);
            *(_WORD *)(v24 + 6DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0x3FFF;
            *(void *)(v24 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = *(void *)(*v28 + 8 * v26);
            Recognizer::seedFromOnePredForward(a1, v24, *(__int16 *)(v27 + 2 * v26));
          }
          uint64_t v25 = v26;
        }
        while ((unint64_t)(v26 + 1) > 1);
      }
    }
    if (*v14) {
LABEL_34:
    }
      *(_DWORD *)(a1 + 4DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = 0;
  }
}

unint64_t MergedActive::add(unint64_t this, ActiveWord *a2)
{
  uint64_t v3 = this;
  unsigned int v4 = *(_DWORD *)(this + 16);
  if (v4 == *(_DWORD *)(this + 20))
  {
    this = DgnPrimArray<unsigned long long>::reallocElts(this + 8, 1, 1);
    unsigned int v4 = *(_DWORD *)(v3 + 16);
  }
  *(void *)(*(void *)(v3 + 8) + 8 * v4) = a2;
  *(_DWORD *)(v3 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v4 + 1;
  return this;
}

uint64_t MergedActive::processMergedWord(MergedActive *this, unsigned int a2, int a3)
{
  uint64_t v6 = *(void *)(*(void *)(*((void *)this + 1) + 8 * a2) + 8);
  uint64_t v7 = (const PhnIndexSet *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 192))(v6);
  SeedMergedActiveWord::processMergedWord((MergedActive *)((char *)this + 32), *(ActiveWord **)(*((void *)this + 1) + 8 * a2), *(const HistoryMgr **)this, v7, a3);
  return (uint64_t)this + 32;
}

uint64_t Recognizer::setConstraint(Constraint **this, Constraint *a2)
{
  uint64_t result = (uint64_t)DgnDelete<Constraint>(this[277]);
  this[277] = a2;
  if (a2)
  {
    uint64_t result = Constraint::setupConstraint(a2);
    if (*((unsigned char *)this + 168)) {
      BOOL v5 = (*((_DWORD *)this[277] + 17) & 0xFFFFFFFD) == 0;
    }
    else {
      BOOL v5 = 0;
    }
    BOOL v7 = *((unsigned char *)this + 169)
      && (uint64_t v6 = this[277], (*((_DWORD *)v6 + 17) & 0xFFFFFFFD) == 0)
      && *((void *)v6 + 27) != 0;
    if (v5 || v7) {
      uint64_t result = MergedActive::initMergedActive((uint64_t)(this + 49), (uint64_t)this[35] + 72, v5, v7);
    }
  }
  *((void *)this[35] + 37875) = this[277];
  return result;
}

uint64_t Recognizer::addCrumbsToPrefilterResult(CWIDCrumbBank **this, char a2, const PrefilterResult *a3, unsigned int a4, PrefilterResult *a5)
{
  uint64_t v8 = this;
  uint64_t result = CWIDCrumbBank::getLastFrame(this[46]);
  if ((a2 & 1) == 0)
  {
    int v10 = result + 1;
    if (!*((unsigned char *)v8 + 2304) && v10 != 0)
    {
      if (!*(unsigned char *)a5 && !*((_DWORD *)a5 + 4)) {
        PrefilterResult::initEmpty(a5, v10);
      }
      uint64_t v47 = 0;
      uint64_t v48 = 0;
      v46[0] = 0;
      v46[1] = 0;
      v45[0] = 0;
      v45[1] = 0;
      if ((v10 & 0x80000000) == 0)
      {
        int v42 = a4 + 1;
        int v12 = v10;
        uint64_t v44 = v8;
        do
        {
          int v41 = v12;
          CWIDCrumbBank::getFrameInfo((unint64_t)v8[46], 0, v12, (uint64_t)&v47, (uint64_t)v46, (uint64_t)v45);
          if (v48)
          {
            unint64_t v13 = 0;
            do
            {
              unsigned int v14 = *(_DWORD *)(v47 + 24 * v13);
              if ((v14 + 0x8000000) >> 25 >= 5)
              {
                unsigned int v15 = **(_DWORD **)(v45[0] + 24 * v13 + 16);
                if (v15 != -2)
                {
                  uint64_t v32 = *((void *)v44[35] + 10);
                  if (*(_DWORD *)(v32 + 36 * v15) == -50331650
                    || (unsigned int v33 = *(_DWORD *)(v32 + 36 * v15 + 32), v33 == -2))
                  {
                    unsigned int v34 = 0;
                  }
                  else
                  {
                    unsigned int v34 = *(_DWORD *)(v32 + 36 * v33 + 28);
                  }
                  PrefilterResult::addEntry(a5, v34, *(_DWORD *)(v47 + 24 * v13), 20000);
                  int v35 = v42 + v34;
                  if (v34 >= a4) {
                    signed int v36 = v34 - a4;
                  }
                  else {
                    signed int v36 = 0;
                  }
                  if (v35 >= v10) {
                    signed int v37 = v10;
                  }
                  else {
                    signed int v37 = v35;
                  }
                  while (v36 < v37)
                  {
                    if (a3)
                    {
                      uint64_t GermsForFrame = PrefilterResult::getGermsForFrame(a3, v36);
                      uint64_t v39 = *(unsigned int *)(GermsForFrame + 8);
                      if (v39)
                      {
                        int v40 = (__int16 *)(*(void *)GermsForFrame + 4);
                        while (*((_DWORD *)v40 - 1) != v14)
                        {
                          v40 += 4;
                          if (!--v39) {
                            goto LABEL_69;
                          }
                        }
                        PrefilterResult::addEntry(a5, v36, v14, *v40);
                      }
                    }
                    else
                    {
                      PrefilterResult::addEntry(a5, v36, v14, 20000);
                    }
LABEL_69:
                    ++v36;
                  }
                }
                uint64_t v16 = v45[0];
                uint64_t v17 = *(void *)(v45[0] + 24 * v13);
                if (v17)
                {
                  unint64_t v18 = 0;
                  do
                  {
                    uint64_t v19 = *(unsigned int *)(v17 + 8);
                    int v20 = *(unsigned int **)(v16 + 24 * v13 + 16);
                    if (v20) {
                      unint64_t v21 = (v19 + 1);
                    }
                    else {
                      unint64_t v21 = v19;
                    }
                    if (v18 >= v21) {
                      break;
                    }
                    if (v18 != v19) {
                      int v20 = (unsigned int *)(*(void *)v17 + 12 * v18);
                    }
                    if (v20)
                    {
                      if (v20[2] != 1879048192)
                      {
                        unsigned int v22 = *v20;
                        if (v22 != -2)
                        {
                          uint64_t v23 = *((void *)v44[35] + 10);
                          if (*(_DWORD *)(v23 + 36 * v22) == -50331650
                            || (unsigned int v24 = *(_DWORD *)(v23 + 36 * v22 + 32), v24 == -2))
                          {
                            unsigned int v25 = 0;
                          }
                          else
                          {
                            unsigned int v25 = *(_DWORD *)(v23 + 36 * v24 + 28);
                          }
                          PrefilterResult::addEntry(a5, v25, v14, 20000);
                          int v26 = v42 + v25;
                          if (v25 >= a4) {
                            signed int v27 = v25 - a4;
                          }
                          else {
                            signed int v27 = 0;
                          }
                          if (v26 >= v10) {
                            signed int v28 = v10;
                          }
                          else {
                            signed int v28 = v26;
                          }
                          while (v27 < v28)
                          {
                            if (a3)
                            {
                              uint64_t v29 = PrefilterResult::getGermsForFrame(a3, v27);
                              uint64_t v30 = *(unsigned int *)(v29 + 8);
                              if (v30)
                              {
                                long long v31 = (__int16 *)(*(void *)v29 + 4);
                                while (*((_DWORD *)v31 - 1) != v14)
                                {
                                  v31 += 4;
                                  if (!--v30) {
                                    goto LABEL_47;
                                  }
                                }
                                PrefilterResult::addEntry(a5, v27, v14, *v31);
                              }
                            }
                            else
                            {
                              PrefilterResult::addEntry(a5, v27, v14, 20000);
                            }
LABEL_47:
                            ++v27;
                          }
                        }
                      }
                    }
                    ++v18;
                    uint64_t v16 = v45[0];
                    uint64_t v17 = *(void *)(v45[0] + 24 * v13);
                  }
                  while (v17);
                }
              }
              ++v13;
            }
            while (v13 < v48);
          }
          int v12 = v41 - 1;
          uint64_t v8 = v44;
        }
        while (v41 > 0);
      }
      DgnIArray<Utterance *>::~DgnIArray((uint64_t)v45);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v46);
      return DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v47);
    }
  }
  return result;
}

void sub_213FCD4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

unint64_t Recognizer::setEmbeddedTransducers(unint64_t result, uint64_t a2)
{
  if (a2) {
    return DgnArray<StateSpec>::copyArraySlice(result + 2376, (void *)a2, 0, *(_DWORD *)(a2 + 8));
  }
  return result;
}

void GermRecogGermIterator::~GermRecogGermIterator(GermRecogGermIterator *this)
{
  MrecInitModule_sdpres_sdapi();

  JUMPOUT(0x216698730);
}

void MergedActive::MergedActive(MergedActive *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  *((void *)this + 2) = 0;
  SeedMergedActiveWord::SeedMergedActiveWord((MergedActive *)((char *)this + 32));
  *((_WORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = 0;
}

void sub_213FCD590(_Unwind_Exception *a1)
{
  DgnIArray<Utterance *>::~DgnIArray(v1 + 8);
  _Unwind_Resume(a1);
}

void SeedMergedActiveWord::SeedMergedActiveWord(SeedMergedActiveWord *this)
{
  *(void *)this = &unk_26C4E2C10;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  DgnString::DgnString((SeedMergedActiveWord *)((char *)this + 32));
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((_DWORD *)this + 17) = 0x3FFF;
  *(_OWORD *)((char *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 72) = xmmword_2140866D0;
  *((_DWORD *)this + 22) = -1;
}

void sub_213FCD60C(_Unwind_Exception *a1)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 + 16);
  _Unwind_Resume(a1);
}

void SeedMergedActiveWord::~SeedMergedActiveWord(SeedMergedActiveWord *this)
{
  *(void *)this = &unk_26C4E2C10;
  DgnArray<PhnIndexSet>::releaseAll((uint64_t)this + 48);
  BitArray::~BitArray((SeedMergedActiveWord *)((char *)this + 32));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26C4E2C10;
  DgnArray<PhnIndexSet>::releaseAll((uint64_t)this + 48);
  BitArray::~BitArray((SeedMergedActiveWord *)((char *)this + 32));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16);

  JUMPOUT(0x216698730);
}

uint64_t SeedMergedActiveWord::getScoredWord(SeedMergedActiveWord *this)
{
  return *((void *)this + 1);
}

uint64_t SeedMergedActiveWord::getCWIDAC(SeedMergedActiveWord *this)
{
  return (uint64_t)this + 64;
}

uint64_t SeedMergedActiveWord::maybeGetActiveOutPort(SeedMergedActiveWord *this, unsigned int a2, int a3)
{
  if (a2 == 0xFFFF)
  {
    if (((*(_DWORD *)(*((void *)this + 4) + (((unint64_t)*((unsigned int *)this + 22) >> 3) & 0x1FFFFFFC)) >> *((_DWORD *)this + 22)) & 1) == 0) {
      return 0;
    }
    uint64_t result = **(void **)(*(void *)(*((void *)this + 1) + 8) + 72);
  }
  else
  {
    uint64_t result = ActiveWord::maybeGetNonSilOutPort(*((ActiveWord **)this + 1), a2);
    if (((*(_DWORD *)(*(void *)(*((void *)this + 6) + 16 * *((unsigned int *)this + 22)) + 4 * (a2 >> 5)) >> a2) & 1) == 0) {
      return 0;
    }
  }
  if (*(__int16 *)(result + 8) > a3) {
    return 0;
  }
  return result;
}

uint64_t SeedMergedActiveWord::expandEmbFstHistory(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 8) + 272))();
}

void MergedActive::~MergedActive(MergedActive *this)
{
  *((void *)this + 4) = &unk_26C4E2C10;
  DgnArray<PhnIndexSet>::releaseAll((uint64_t)this + 80);
  BitArray::~BitArray((MergedActive *)((char *)this + 64));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 8);
}

void *MemChunkRegion::getCurrentRegion(MemChunkRegion *this)
{
  if (MemChunkRegion::smTlsID != -1)
  {
    uint64_t v1 = (uint64_t *)pthread_getspecific(MemChunkRegion::smTlsID);
    if (v1)
    {
      uint64_t result = (void *)*v1;
      if (result) {
        return result;
      }
      pthread_setspecific(MemChunkRegion::smTlsID, 0);
    }
  }
  return &gGlobalMemChunkRegion;
}

BOOL MergedActive::isCWIDAllowMerge(MergedActive *this, unsigned int a2)
{
  uint64_t v2 = *(void **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * (a2 >> 25)) + 48);
  uint64_t v3 = a2 & 0xFFFFFF;
  if (*(unsigned __int16 *)(v2[4] + 2 * v3) < 2u) {
    return 0;
  }
  if (*(_WORD *)(v2[74] + 2 * v3)) {
    return 1;
  }
  return *(unsigned __int16 *)(v2[76] + 2 * v3) != 0;
}

BOOL MergedActive::isStateAllowMerge(MergedActive *this, StateMgr *a2, unsigned int a3)
{
  return !*(unsigned char *)(*((void *)a2 + 48) + a3)
      && *(unsigned char *)(*((void *)a2 + 40) + a3)
      && *(unsigned char *)(*((void *)a2 + 44) + a3)
      && *(unsigned char *)(*((void *)a2 + 46) + a3)
      && !*(_DWORD *)(*((void *)a2 + 36) + 4 * a3)
      && *(_DWORD *)(*((void *)a2 + 34) + 4 * a3) == 0xFFFF;
}

void SeedUnmergedActiveWord::~SeedUnmergedActiveWord(SeedUnmergedActiveWord *this)
{
}

uint64_t SeedUnmergedActiveWord::getScoredWord(SeedUnmergedActiveWord *this)
{
  return *((void *)this + 1);
}

uint64_t SeedUnmergedActiveWord::getCWIDAC(SeedUnmergedActiveWord *this)
{
  return *(void *)(*((void *)this + 1) + 8) + 16;
}

uint64_t SeedUnmergedActiveWord::maybeGetActiveOutPort(SeedUnmergedActiveWord *this, unsigned int a2, int a3)
{
  unsigned int v4 = (ActiveWord *)*((void *)this + 1);
  if (a2 == 0xFFFF) {
    uint64_t result = **(void **)(*((void *)v4 + 1) + 72);
  }
  else {
    uint64_t result = ActiveWord::maybeGetNonSilOutPort(v4, a2);
  }
  if (*(__int16 *)(result + 8) > a3) {
    return 0;
  }
  return result;
}

uint64_t SeedUnmergedActiveWord::expandEmbFstHistory(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 8) + 272))();
}

void *DgnIOwnArray<CWIDCrumbWACSFrame *>::releaseAll(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<CWIDCrumbWACSFrame>(*(CWIDCrumbWACSFrame **)(*(void *)a1 + v3));
      *(void *)(*(void *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  uint64_t result = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  return result;
}

CWIDCrumbWACSFrame *DgnDelete<CWIDCrumbWACSFrame>(CWIDCrumbWACSFrame *result)
{
  if (result)
  {
    CWIDCrumbWACSFrame::~CWIDCrumbWACSFrame(result);
    return (CWIDCrumbWACSFrame *)MemChunkFree(v1, 0);
  }
  return result;
}

void MrecInitLibrary_fst(void)
{
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_arcgraph_fst();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_fstcore_fst();
  MrecInitModule_fstsrch_fst();
  MrecInitModule_sdpres_sdapi();
  MrecInitModule_fwdbwd_fst();
  MrecInitModule_sdpres_sdapi();

  MrecInitModule_virtmap_fst();
}

void MrecInitLibrarySet_throughFst(void)
{
  MrecInitLibrarySet_throughKernel();

  MrecInitLibrary_fst();
}

void FeatureFrame::~FeatureFrame(FeatureFrame *this)
{
}

uint64_t FeatureFrame::getFeature(FeatureFrame *this)
{
  return (uint64_t)this + 8;
}

uint64_t FeatureFrame::getScaledFeature(FeatureFrame *this, unsigned int a2, int a3, int a4, const BinaryIntScale *a5)
{
  if (*((unsigned char *)this + 4))
  {
    LOBYTE(v5) = *(unsigned char *)(*((void *)this + 1) + a2);
  }
  else
  {
    uint64_t v6 = 1 << (*(_DWORD *)a5 - 1);
    if (!*(_DWORD *)a5) {
      LODWORD(v6) = 0;
    }
    int v5 = ((int)v6 + (int)((double)a4 + *(double *)(*((void *)this + 3) + 8 * a2) * (double)a3)) >> *(_DWORD *)a5;
    if (v5 <= 0) {
      char v7 = 0;
    }
    else {
      char v7 = -1;
    }
    if (v5 >= 0x100) {
      LOBYTE(v5) = v7;
    }
  }
  return v5;
}

void FeatureFrame::setFeature(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 4) = 0;
}

unint64_t FeatureFrame::scaleFeatureToUns8(unint64_t this, void *a2, void *a3, BinaryIntScale *a4)
{
  uint64_t v7 = this;
  unint64_t v8 = *(unsigned int *)(this + 32);
  int v9 = v8;
  if (*(_DWORD *)(this + 20) < v8)
  {
    uint64_t v11 = 0;
    this = realloc_array(*(void **)(this + 8), &v11, v8, *(unsigned int *)(this + 16), *(unsigned int *)(this + 16), 1);
    *(_DWORD *)(v7 + 20) = this;
    *(void *)(v7 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = v11;
    int v9 = *(_DWORD *)(v7 + 32);
  }
  *(_DWORD *)(v7 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v8;
  if (v9)
  {
    unint64_t v10 = 0;
    do
    {
      this = FeatureFrame::getScaledFeature((FeatureFrame *)v7, v10, *(_DWORD *)(*a2 + 4 * v10), *(_DWORD *)(*a3 + 4 * v10), a4);
      *(unsigned char *)(*(void *)(v7 + 8) + v10++) = this;
    }
    while (v10 < *(unsigned int *)(v7 + 32));
  }
  *(unsigned char *)(v7 + 4) = 1;
  return this;
}

void MrecInitModule_lookahsc_prefilt(void)
{
  if (!gParDebugPrefiltererLookahead)
  {
    uint64_t v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugPrefiltererLookahead", &byte_2140B33BB, &byte_2140B33BB, 0, 0, 0);
    *uint64_t v1 = &unk_26C4E0858;
    gParDebugPrefiltererLookahead = (uint64_t)v1;
    uint64_t v2 = (uint64_t *)GlobalParamMgr::smpGlobalParamMgr;
    GlobalParamMgr::addParam(v2, (GlobalParam **)&gParDebugPrefiltererLookahead);
  }
}

uint64_t SimpleLookaheadScorer::SimpleLookaheadScorer(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)a1 = &unk_26C4E3000;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = a2;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = a3;
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 24) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = a4;
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = -16;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray((void *)(a1 + 40), *(unsigned int *)(a2 + 128));
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = 0;
  if (a4) {
    uint64_t v7 = *(unsigned int *)(a2 + 128);
  }
  else {
    uint64_t v7 = 0;
  }
  DgnArray<ScoreFixArray>::DgnArray((void *)(a1 + 64), v7);
  *(void *)(a1 + HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 88) = 0;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = 0;
  int v8 = **(_DWORD **)(*(void *)(a1 + 8) + 64);
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = 0;
  int v9 = v8 - 2;
  if (v8 != 2)
  {
    *(void *)(a1 + HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 88) = MemChunkAlloc(2 * (v8 - 2), 0);
    *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = v9;
  }
  DgnPrimArray<unsigned char>::DgnPrimArray(a1 + 104, *(_DWORD *)(a2 + 40));
  uint64_t v10 = *(unsigned int *)(a2 + 40);
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 120) = 0;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 128) = 0;
  if (v10) {
    DgnPrimArray<short>::reallocElts(a1 + 120, v10, 0);
  }
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 128) = v10;
  return a1;
}

void sub_213FCDE78(_Unwind_Exception *a1)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray(v4);
  DgnPrimFixArray<double>::~DgnPrimFixArray(v3);
  ScoreFixArraySpinQueue::~ScoreFixArraySpinQueue(v2);
  FeatureArraySpinQueue::~FeatureArraySpinQueue(v1);
  _Unwind_Resume(a1);
}

void SimpleLookaheadScorer::~SimpleLookaheadScorer(SimpleLookaheadScorer *this)
{
  *(void *)this = &unk_26C4E3000;
  uint64_t v2 = (SimpleLookaheadScorer *)((char *)this + 40);
  *((void *)this + 7) = 0;
  uint64_t v3 = (SimpleLookaheadScorer *)((char *)this + 64);
  *((void *)this + 10) = 0;
  *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = -16;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 120);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 104);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)this + 88);
  ScoreFixArraySpinQueue::~ScoreFixArraySpinQueue(v3);
  FeatureArraySpinQueue::~FeatureArraySpinQueue(v2);
}

{
  uint64_t vars8;

  SimpleLookaheadScorer::~SimpleLookaheadScorer(this);

  JUMPOUT(0x216698730);
}

double SimpleLookaheadScorer::reset(SimpleLookaheadScorer *this)
{
  double result = 0.0;
  *((void *)this + 7) = 0;
  *((void *)this + 10) = 0;
  *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = -16;
  return result;
}

void SimpleLookaheadScorer::printSize(SimpleLookaheadScorer *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 125, (DgnString *)&v102);
  if (v103) {
    uint64_t v16 = v102;
  }
  else {
    uint64_t v16 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_2140B33BB, a3, &byte_2140B33BB, v16);
  DgnString::~DgnString((DgnString *)&v102);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_2140B33BB);
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v21 = 4;
  }
  else {
    uint64_t v21 = 8;
  }
  uint64_t v22 = (a3 + 1);
  uint64_t v23 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 126, (DgnString *)&v102);
  if (v103) {
    signed int v28 = v102;
  }
  else {
    signed int v28 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v24, v25, v26, v27, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v28, v21, v21, 0);
  DgnString::~DgnString((DgnString *)&v102);
  *a4 += v21;
  *a5 += v21;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v29 = 4;
  }
  else {
    uint64_t v29 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 127, (DgnString *)&v102);
  if (v103) {
    unsigned int v34 = v102;
  }
  else {
    unsigned int v34 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v30, v31, v32, v33, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v34, v29, v29, 0);
  DgnString::~DgnString((DgnString *)&v102);
  *a4 += v29;
  *a5 += v29;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 128, (DgnString *)&v102);
  if (v103) {
    uint64_t v39 = v102;
  }
  else {
    uint64_t v39 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v35, v36, v37, v38, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v39, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v102);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 129, (DgnString *)&v102);
  if (v103) {
    uint64_t v44 = v102;
  }
  else {
    uint64_t v44 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v40, v41, v42, v43, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v44, 4, 4, 0);
  uint64_t v101 = a3;
  DgnString::~DgnString((DgnString *)&v102);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 138, (DgnString *)&v102);
  if (v103) {
    unint64_t v49 = v102;
  }
  else {
    unint64_t v49 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v45, v46, v47, v48, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v49, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v102);
  *a4 += 4;
  *a5 += 4;
  uint64_t v50 = sizeObject<DgnPrimArray<unsigned char>>((uint64_t)this + 40, 0) + 8;
  uint64_t v51 = sizeObject<DgnPrimArray<unsigned char>>((uint64_t)this + 40, 1) + 8;
  uint64_t v102 = 0;
  uint64_t v103 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v102);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 139, (DgnString *)&v102);
  if (v103) {
    uint64_t v56 = v102;
  }
  else {
    uint64_t v56 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v52, v53, v54, v55, v22, &byte_2140B33BB, v23, v23, v56, v50, v51, 0);
  DgnString::~DgnString((DgnString *)&v102);
  *a4 += v50;
  *a5 += v51;
  uint64_t v57 = sizeObject<ScoreFixArray>((uint64_t)this + 64, 0) + 8;
  uint64_t v58 = sizeObject<ScoreFixArray>((uint64_t)this + 64, 1) + 8;
  uint64_t v102 = 0;
  LODWORD(v103) = 0;
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v102);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 140, (DgnString *)&v102);
  if (v103) {
    int v63 = v102;
  }
  else {
    int v63 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v59, v60, v61, v62, v22, &byte_2140B33BB, v23, v23, v63, v57, v58, 0);
  DgnString::~DgnString((DgnString *)&v102);
  *a4 += v57;
  *a5 += v58;
  uint64_t v64 = 8;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v64 = 12;
  }
  uint64_t v65 = *((unsigned int *)this + 24);
  if ((int)v65 <= 0) {
    uint64_t v66 = 0;
  }
  else {
    uint64_t v66 = 2 * v65;
  }
  uint64_t v67 = v66 + v64;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 142, (DgnString *)&v102);
  if (v103) {
    int v72 = v102;
  }
  else {
    int v72 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, v22, &byte_2140B33BB, v23, v23, v72, v67, v67, 0);
  DgnString::~DgnString((DgnString *)&v102);
  *a4 += v67;
  *a5 += v67;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v73 = 12;
  }
  else {
    uint64_t v73 = 16;
  }
  int v74 = *((_DWORD *)this + 28);
  unsigned int v75 = *((_DWORD *)this + 29);
  BOOL v76 = v75 >= v74;
  uint64_t v77 = v75 - v74;
  if (v76)
  {
    uint64_t v79 = v74 & ~(v74 >> 31);
    int v74 = 0;
    uint64_t v78 = v73 + v79;
    v73 += v79 + v77;
  }
  else
  {
    uint64_t v78 = v73;
  }
  uint64_t v80 = v74;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 143, (DgnString *)&v102);
  if (v103) {
    int v85 = v102;
  }
  else {
    int v85 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v81, v82, v83, v84, v22, &byte_2140B33BB, v23, v23, v85, v73, v78, v80);
  DgnString::~DgnString((DgnString *)&v102);
  *a4 += v73;
  *a5 += v78;
  *a6 += v80;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v86 = 12;
  }
  else {
    uint64_t v86 = 16;
  }
  uint64_t v87 = *((unsigned int *)this + 32);
  unsigned int v88 = *((_DWORD *)this + 33);
  if (v88 >= v87)
  {
    uint64_t v89 = 0;
    if ((int)v87 > 0) {
      uint64_t v86 = (v86 | 2) + 2 * (v87 - 1);
    }
    uint64_t v90 = v86 + 2 * (v88 - v87);
  }
  else
  {
    uint64_t v89 = 2 * v87;
    uint64_t v90 = v86;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 145, (DgnString *)&v102);
  if (v103) {
    int v95 = v102;
  }
  else {
    int v95 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v91, v92, v93, v94, v22, &byte_2140B33BB, v23, v23, v95, v90, v86, v89);
  DgnString::~DgnString((DgnString *)&v102);
  *a4 += v90;
  *a5 += v86;
  *a6 += v89;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 147, (DgnString *)&v102);
  if (v103) {
    uint64_t v100 = v102;
  }
  else {
    uint64_t v100 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v96, v97, v98, v99, v101, &byte_2140B33BB, (35 - v101), (35 - v101), v100, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v102);
}

void sub_213FCE628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t *SimpleLookaheadScorer::scoreForLookahead(uint64_t *result, int a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v5 = (uint64_t)result;
  if (a3)
  {
    int v8 = *((_DWORD *)result + 15);
    double result = (uint64_t *)FeatureArraySpinQueue::add((uint64_t)(result + 5), a3);
    if (*(_DWORD *)(v5 + 28))
    {
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      DgnPrimArray<unsigned char>::copyArraySlice((unint64_t)&v17, (void *)a3, 0, *(_DWORD *)(a3 + 8));
      LODWORD(v1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = *(_DWORD *)(v5 + 24);
      SimpleLookaheadScorer::doScore(v5, &v17);
      ScoreFixArraySpinQueue::add(v5 + 64, v5 + 88);
      double result = (uint64_t *)DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v17);
    }
    int v9 = *(_DWORD *)(v5 + 32);
    if (v9 == -16)
    {
      *(_DWORD *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = a2;
      int v9 = a2;
    }
    unsigned int v10 = *(_DWORD *)(*(void *)(v5 + 8) + 128);
    if (*(_DWORD *)(v5 + 60) >= v10)
    {
      if (v8 == v10) {
        *(_DWORD *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 32) = v9 + 1;
      }
      return SimpleLookaheadScorer::doOverallScore(v5, (uint64_t)a4);
    }
  }
  else
  {
    unsigned int v11 = *((_DWORD *)result + 15);
    if (*(_DWORD *)(result[1] + 128) > v11)
    {
      double result = SimpleLookaheadScorer::doOverallScore((uint64_t)result, (uint64_t)a4);
      unsigned int v11 = *(_DWORD *)(v5 + 60);
    }
    if (v11 >= 2)
    {
      do
      {
        unsigned int v12 = v11 - 1;
        int v13 = *(_DWORD *)(v5 + 56);
        if ((v13 + 1) < *(_DWORD *)(v5 + 48)) {
          int v14 = v13 + 1;
        }
        else {
          int v14 = 0;
        }
        *(_DWORD *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = v14;
        *(_DWORD *)(v5 + 60) = v12;
        if (*(_DWORD *)(v5 + 28))
        {
          int v15 = *(_DWORD *)(v5 + 84);
          if (v15)
          {
            *(_DWORD *)(v5 + 84) = --v15;
            if (v15)
            {
              int v16 = *(_DWORD *)(v5 + 80);
              if ((v16 + 1) < *(_DWORD *)(v5 + 72)) {
                int v15 = v16 + 1;
              }
              else {
                int v15 = 0;
              }
            }
          }
          *(_DWORD *)(v5 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = v15;
        }
        ++*(_DWORD *)(v5 + 32);
        double result = SimpleLookaheadScorer::doOverallScore(v5, (uint64_t)a4);
        unsigned int v11 = *(_DWORD *)(v5 + 60);
      }
      while (v11 > 1);
    }
    *a4 = 1;
  }
  return result;
}

void sub_213FCE7F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *SimpleLookaheadScorer::doOverallScore(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 28);
  if (v4 == 1)
  {
    SimpleLookaheadScorer::computeMinimumScore(a1);
  }
  else if (v4)
  {
    SimpleLookaheadScorer::computeCombinedScore(a1);
  }
  else
  {
    SimpleLookaheadScorer::computeSmoothFrame(a1);
    SimpleLookaheadScorer::doScore(a1, (unsigned __int8 **)(a1 + 104));
  }
  unsigned int v5 = *(_DWORD *)(a1 + 32);

  return SynchronizedArray<ScoreFixArray>::add(a2, v5, a1 + 88);
}

unint64_t FeatureArraySpinQueue::add(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 20);
  unsigned int v3 = *(_DWORD *)(a1 + 8);
  if (v2 >= v3)
  {
    int v5 = *(_DWORD *)(a1 + 16);
    if (v5 + 1 < v3) {
      int v4 = v5 + 1;
    }
    else {
      int v4 = 0;
    }
    *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v4;
    --v2;
  }
  else
  {
    *(_DWORD *)(a1 + 20) = v2 + 1;
    int v4 = *(_DWORD *)(a1 + 16);
  }
  return DgnPrimArray<unsigned char>::copyArraySlice(*(void *)a1 + 16 * ((v2 + v4) % v3), (void *)a2, 0, *(_DWORD *)(a2 + 8));
}

uint64_t SimpleLookaheadScorer::doScore(uint64_t result, unsigned __int8 **a2)
{
  unsigned int v2 = *(_DWORD *)(result + 96);
  if (v2)
  {
    uint64_t v4 = result;
    for (unsigned __int16 i = 0; i < v2; ++i)
    {
      if (i)
      {
        double result = *(void *)(v4 + 8);
        if (*(unsigned __int16 *)(*(void *)(result + 64) + 56) == i)
        {
          *(_WORD *)(*(void *)(v4 + 88) + 2 * i) = 20000;
        }
        else
        {
          double result = Lookahead::scoreOneForLookahead(result, a2, *(_DWORD *)(*(void *)(result + 104) + 4 * i));
          *(_WORD *)(*(void *)(v4 + 88) + 2 * i) = result;
          unsigned int v2 = *(_DWORD *)(v4 + 96);
        }
      }
      else
      {
        **(_WORD **)(v4 + HuffmanDecoder<unsigned short,unsigned int>::~HuffmanDecoder((uint64_t)this + 88) = 20000;
      }
    }
  }
  return result;
}

uint64_t *ScoreFixArraySpinQueue::add(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 20);
  unsigned int v3 = *(_DWORD *)(a1 + 8);
  if (v2 >= v3)
  {
    int v5 = *(_DWORD *)(a1 + 16);
    if (v5 + 1 < v3) {
      int v4 = v5 + 1;
    }
    else {
      int v4 = 0;
    }
    *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v4;
    --v2;
  }
  else
  {
    *(_DWORD *)(a1 + 20) = v2 + 1;
    int v4 = *(_DWORD *)(a1 + 16);
  }
  return DgnPrimFixArray<short>::copyArraySlice((uint64_t *)(*(void *)a1 + 16 * ((v2 + v4) % v3)), (uint64_t *)a2, 0, *(_DWORD *)(a2 + 8));
}

uint64_t SimpleLookaheadScorer::getNextFrameTime(SimpleLookaheadScorer *this)
{
  int v1 = *((_DWORD *)this + 8);
  if (v1 == -16) {
    int v1 = 0;
  }
  return (*((_DWORD *)this + 15) + v1);
}

uint64_t SimpleLookaheadScorer::scoreLookaheadUntil(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  v14[0] = 0;
  v14[1] = 0;
  int v8 = (*(uint64_t (**)(uint64_t *))(*a1 + 32))(a1);
  int v9 = *(_DWORD *)(a4 + 16);
  if (v9 <= a2)
  {
    for (int i = v8; ; ++i)
    {
      int v11 = *(_DWORD *)(a3 + 16);
      if (v11 <= i) {
        break;
      }
      uint64_t v12 = *(void *)(a3 + 8) + 16 * i;
      DgnPrimArray<unsigned char>::copyArraySlice((unint64_t)v14, (void *)v12, 0, *(_DWORD *)(v12 + 8));
      SimpleLookaheadScorer::scoreForLookahead(a1, i, (uint64_t)v14, (unsigned char *)a4);
      int v9 = *(_DWORD *)(a4 + 16);
      if (v9 > a2) {
        return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v14);
      }
    }
    if (*(unsigned char *)a3 && !*(unsigned char *)a4)
    {
      *(_DWORD *)(a4 + 4) = v9;
      SimpleLookaheadScorer::scoreForLookahead(a1, v11, 0, (unsigned char *)a4);
    }
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v14);
}

void sub_213FCEAE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t SimpleLookaheadScorer::computeSmoothFrame(uint64_t this)
{
  if (*(_DWORD *)(this + 24))
  {
    unint64_t v1 = 0;
    unsigned int v2 = *(_DWORD *)(*(void *)(*(void *)(this + 8) + 136) + 4 * (*(_DWORD *)(this + 60) - 1));
    do
    {
      uint64_t v3 = *(unsigned int *)(this + 60);
      if (v3)
      {
        int v4 = 0;
        int v5 = *(int **)(*(void *)(this + 8) + 120);
        unsigned int v6 = *(_DWORD *)(this + 56);
        unsigned int v7 = *(_DWORD *)(this + 48);
        do
        {
          unsigned int v8 = v6;
          if (v6 >= v7) {
            unsigned int v8 = v6 % v7;
          }
          int v9 = *v5++;
          v4 += v9 * *(unsigned __int8 *)(*(void *)(*(void *)(this + 40) + 16 * v8) + v1);
          ++v6;
          --v3;
        }
        while (v3);
      }
      else
      {
        int v4 = 0;
      }
      *(unsigned char *)(*(void *)(this + 104) + v1++) = (v4 + (v2 >> 1)) / v2;
    }
    while (v1 < *(unsigned int *)(this + 24));
  }
  return this;
}

uint64_t SimpleLookaheadScorer::computeMinimumScore(uint64_t this)
{
  unsigned int v1 = *(_DWORD *)(this + 96);
  if (v1)
  {
    unsigned __int16 v2 = 0;
    unsigned int v3 = *(_DWORD *)(this + 72);
    uint64_t v4 = *(void *)(this + 64);
    unsigned int v5 = *(_DWORD *)(this + 80);
    uint64_t v6 = *(unsigned int *)(this + 84);
    uint64_t v7 = *(void *)(this + 88);
    do
    {
      unsigned int v8 = v5;
      if (v5 >= v3) {
        unsigned int v8 = v5 % v3;
      }
      uint64_t v9 = *(void *)(v4 + 16 * v8);
      this = v2;
      __int16 v10 = *(_WORD *)(v9 + 2 * v2);
      uint64_t v11 = v6 - 1;
      unsigned int v12 = v5 + 1;
      if (v6 >= 2)
      {
        do
        {
          if (v12 >= v3) {
            uint64_t v13 = 16 * (v12 % v3);
          }
          else {
            uint64_t v13 = 16 * v12;
          }
          int v14 = *(__int16 *)(*(void *)(v4 + v13) + 2 * v2);
          if (v14 < v10) {
            __int16 v10 = v14;
          }
          ++v12;
          --v11;
        }
        while (v11);
      }
      *(_WORD *)(v7 + 2 * v2++) = v10;
    }
    while (v1 > v2);
  }
  return this;
}

uint64_t SimpleLookaheadScorer::computeCombinedScore(uint64_t this)
{
  unsigned int v1 = *(_DWORD *)(this + 96);
  if (v1)
  {
    unsigned __int16 v2 = 0;
    unsigned int v3 = *(_DWORD *)(this + 72);
    uint64_t v4 = *(void *)(this + 64);
    unsigned int v5 = *(_DWORD *)(this + 80);
    unsigned int v6 = *(_DWORD *)(this + 84);
    uint64_t v7 = *(void *)(this + 88);
    do
    {
      unsigned int v8 = v5;
      if (v5 >= v3) {
        unsigned int v8 = v5 % v3;
      }
      int v9 = *(__int16 *)(*(void *)(v4 + 16 * v8) + 2 * v2);
      if (v6 >= 2)
      {
        uint64_t v10 = *(void *)(this + 8);
        unsigned int v11 = v5 + 1;
        unsigned int v12 = v6 - 1;
        do
        {
          unsigned int v13 = v11;
          if (v11 >= v3) {
            unsigned int v13 = v11 % v3;
          }
          int v14 = *(__int16 *)(*(void *)(v4 + 16 * v13) + 2 * v2);
          unsigned int v16 = v14 - v9;
          BOOL v15 = v14 - v9 < 0;
          if (v14 < v9) {
            int v9 = v14;
          }
          if (v15) {
            unsigned int v17 = -v16;
          }
          else {
            unsigned int v17 = v16;
          }
          if (v17 < *(_DWORD *)(v10 + 80)) {
            v9 -= *(_DWORD *)(*(void *)(v10 + 72) + 4 * v17);
          }
          ++v11;
          --v12;
        }
        while (v12);
      }
      *(_WORD *)(v7 + 2 * v2++) = v9;
    }
    while (v1 > v2);
  }
  return this;
}

uint64_t *SynchronizedArray<ScoreFixArray>::add(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (v6 == *(_DWORD *)(a1 + 20))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts(a1 + 8, 1, 1);
    unsigned int v6 = *(_DWORD *)(a1 + 16);
  }
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = v7 + 16 * v6;
  *(void *)uint64_t v8 = 0;
  *(_DWORD *)(v8 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v6 + 1;
  unsigned int v9 = *(_DWORD *)(a3 + 8);

  return DgnPrimFixArray<short>::copyArraySlice((uint64_t *)(v7 + 16 * a2), (uint64_t *)a3, 0, v9);
}

void LookaheadScorerThreadWorker::~LookaheadScorerThreadWorker(LookaheadScorerThreadWorker *this)
{
  *(void *)this = &unk_26C4E3EB0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 288);

  DgnThreadWorker::~DgnThreadWorker(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26C4E3EB0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 288);
  DgnThreadWorker::~DgnThreadWorker(this);

  JUMPOUT(0x216698730);
}

uint64_t LookaheadScorerThreadWorker::onStartup(LookaheadScorerThreadWorker *this)
{
  uint64_t v2 = *((void *)this + 6);
  unsigned int v3 = MemChunkAlloc(0x88uLL, 0);
  *((void *)this + 33) = SimpleLookaheadScorer::SimpleLookaheadScorer((uint64_t)v3, *(void *)(v2 + 1576), *(void *)(v2 + 1584), *(_DWORD *)(v2 + 1592));
  uint64_t v4 = MemChunkAlloc(0x18uLL, 0);
  *((void *)this + 34) = SynchronizedArray<ScoreFixArray>::SynchronizedArray((uint64_t)v4);
  unsigned int v5 = MemChunkAlloc(0x18uLL, 0);
  uint64_t result = SynchronizedArray<DgnPrimArray<unsigned char>>::SynchronizedArray((uint64_t)v5);
  *((void *)this + 35) = result;
  return result;
}

uint64_t LookaheadScorerThreadWorker::onShutdown(LookaheadScorerThreadWorker *this)
{
  DgnDelete<SimpleLookaheadScorer>(*((void (****)(void))this + 33));
  DgnDelete<SynchronizedArray<ScoreFixArray>>(*((void *)this + 34));
  uint64_t v2 = *((void *)this + 35);

  return DgnDelete<UttFeatureArraySynchronizedArray>(v2);
}

void (***DgnDelete<SimpleLookaheadScorer>(void (***result)(void)))(void)
{
  if (result)
  {
    unsigned int v1 = result;
    (**result)(result);
    return (void (***)(void))MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t DgnDelete<SynchronizedArray<ScoreFixArray>>(uint64_t result)
{
  if (result)
  {
    unsigned int v1 = (void *)result;
    DgnArray<DgnVector>::releaseAll(result + 8);
    return MemChunkFree(v1, 0);
  }
  return result;
}

unsigned char *LookaheadScorerThreadWorker::onPlay(LookaheadScorerThreadWorker *this)
{
  uint64_t v1 = *((void *)this + 6);
  *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = *(_DWORD *)(v1 + 1604);
  uint64_t result = (unsigned char *)*((void *)this + 35);
  if (!*result) {
    return (unsigned char *)SynchronizedArray<DgnPrimArray<unsigned char>>::update((unint64_t)result, *(void *)(v1 + 1608));
  }
  return result;
}

uint64_t LookaheadScorerThreadWorker::playOne(LookaheadScorerThreadWorker *this)
{
  uint64_t v1 = *((void *)this + 34);
  if (*(unsigned char *)v1) {
    return 4;
  }
  int v4 = *((_DWORD *)this + 64);
  if (v4 != -16 && *(_DWORD *)(v1 + 16) > v4) {
    return 4;
  }
  int v5 = (*(uint64_t (**)(void))(**((void **)this + 33) + 32))(*((void *)this + 33));
  int v6 = v5;
  uint64_t v7 = *((void *)this + 35);
  if (*(_DWORD *)(v7 + 16) <= v5)
  {
    if (*(unsigned char *)v7)
    {
      uint64_t v10 = (uint64_t *)*((void *)this + 33);
      uint64_t v11 = *((void *)this + 34);
      *(_DWORD *)(v11 + 4) = *(_DWORD *)(v11 + 16);
      SimpleLookaheadScorer::scoreForLookahead(v10, v6, 0, (unsigned char *)v11);
    }
    return 4;
  }
  uint64_t v8 = *(void *)(v7 + 8) + 16 * v5;
  DgnPrimArray<unsigned char>::copyArraySlice((unint64_t)this + 288, (void *)v8, 0, *(_DWORD *)(v8 + 8));
  SimpleLookaheadScorer::scoreForLookahead(*((uint64_t **)this + 33), v6, (uint64_t)this + 288, *((unsigned char **)this + 34));
  int v9 = *((_DWORD *)this + 64);
  if (v9 != -16 && *(_DWORD *)(*((void *)this + 34) + 16) > v9) {
    return 4;
  }
  return 1;
}

uint64_t LookaheadScorerThreadWorker::reset(LookaheadScorerThreadWorker *this)
{
  Latch<MemChunkRegion,LatchAdapter>::Latch(&v6, *((void *)this + 5));
  uint64_t v2 = *((void *)this + 33);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  uint64_t v3 = *((void *)this + 35);
  if (v3) {
    SynchronizedArray<DgnPrimArray<unsigned char>>::reset(v3);
  }
  uint64_t v4 = *((void *)this + 34);
  if (v4) {
    SynchronizedArray<ScoreFixArray>::reset(v4);
  }
  *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = -16;
  return Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)&v6);
}

void sub_213FCF174(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)va);
  _Unwind_Resume(a1);
}

void LookaheadScorerThreadWorker::printSize(LookaheadScorerThreadWorker *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 635, (DgnString *)&v69);
  if (v70) {
    BOOL v15 = v69;
  }
  else {
    BOOL v15 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v11, v12, v13, v14, a3, &byte_2140B33BB, a3, &byte_2140B33BB, v15);
  DgnString::~DgnString((DgnString *)&v69);
  if (a2 != -1) {
    xlprintf("%d ", v16, v17, v18, v19, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v16, v17, v18, v19, a3, &byte_2140B33BB);
  uint64_t v20 = (a3 + 1);
  uint64_t v21 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 638, (DgnString *)&v69);
  if (v70) {
    uint64_t v26 = v69;
  }
  else {
    uint64_t v26 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v22, v23, v24, v25, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v26, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v69);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v27 = 4;
  }
  else {
    uint64_t v27 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 639, (DgnString *)&v69);
  if (v70) {
    uint64_t v32 = v69;
  }
  else {
    uint64_t v32 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v32, v27, v27, 0);
  DgnString::~DgnString((DgnString *)&v69);
  *a4 += v27;
  *a5 += v27;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v33 = 4;
  }
  else {
    uint64_t v33 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 640, (DgnString *)&v69);
  if (v70) {
    uint64_t v38 = v69;
  }
  else {
    uint64_t v38 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v34, v35, v36, v37, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v38, v33, v33, 0);
  DgnString::~DgnString((DgnString *)&v69);
  *a4 += v33;
  *a5 += v33;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v39 = 4;
  }
  else {
    uint64_t v39 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 641, (DgnString *)&v69);
  if (v70) {
    uint64_t v44 = v69;
  }
  else {
    uint64_t v44 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v40, v41, v42, v43, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v44, v39, v39, 0);
  uint64_t v64 = a3;
  DgnString::~DgnString((DgnString *)&v69);
  *a4 += v39;
  *a5 += v39;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v45 = 12;
  }
  else {
    uint64_t v45 = 16;
  }
  int v46 = *((_DWORD *)this + 74);
  unsigned int v47 = *((_DWORD *)this + 75);
  uint64_t v48 = a2;
  BOOL v49 = v47 >= v46;
  uint64_t v50 = v47 - v46;
  if (v49)
  {
    uint64_t v52 = v46 & ~(v46 >> 31);
    int v46 = 0;
    uint64_t v51 = v45 + v52;
    v45 += v52 + v50;
  }
  else
  {
    uint64_t v51 = v45;
  }
  uint64_t v53 = v46;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 643, (DgnString *)&v69);
  if (v70) {
    uint64_t v58 = v69;
  }
  else {
    uint64_t v58 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v54, v55, v56, v57, v20, &byte_2140B33BB, v21, v21, v58, v45, v51, v53);
  DgnString::~DgnString((DgnString *)&v69);
  *a4 += v45;
  *a5 += v51;
  *a6 += v53;
  unint64_t v67 = 0;
  unint64_t v68 = 0;
  unint64_t v66 = 0;
  DgnThreadWorker::printSize(this, v48, v20, &v68, &v66, &v67);
  *a4 += v68;
  *a5 += v66;
  *a6 += v67;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 651, (DgnString *)&v69);
  if (v70) {
    int v63 = v69;
  }
  else {
    int v63 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v59, v60, v61, v62, v64, &byte_2140B33BB, (35 - v64), (35 - v64), v63, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v69);
}

void sub_213FCF5AC(_Unwind_Exception *a1)
{
  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t LookaheadScorerThread::stopScoring(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  DgnThreadClient::pause((DgnThreadClient *)a1, a2, a3, a4, a5, a6, a7, a8);
  SynchronizedArray<ScoreFixArray>::update(a2, *(void *)(*(void *)(a1 + 56) + 272));
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 56) + 264) + 32))(*(void *)(*(void *)(a1 + 56) + 264));
  *(_DWORD *)(a1 + 1600) = result;
  *(unsigned char *)(a1 + 15DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = 0;
  return result;
}

void LookaheadScorerThread::printSize(LookaheadScorerThread *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 715, (DgnString *)&v68);
  if (v69) {
    uint64_t v16 = v68;
  }
  else {
    uint64_t v16 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &byte_2140B33BB, a3, &byte_2140B33BB, v16);
  uint64_t v64 = this;
  DgnString::~DgnString((DgnString *)&v68);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &byte_2140B33BB);
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v21 = 4;
  }
  else {
    uint64_t v21 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 717, (DgnString *)&v68);
  if (v69) {
    uint64_t v26 = v68;
  }
  else {
    uint64_t v26 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v22, v23, v24, v25, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v26, v21, v21, 0);
  DgnString::~DgnString((DgnString *)&v68);
  *a4 += v21;
  *a5 += v21;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v27 = 4;
  }
  else {
    uint64_t v27 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 718, (DgnString *)&v68);
  if (v69) {
    uint64_t v32 = v68;
  }
  else {
    uint64_t v32 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v32, v27, v27, 0);
  DgnString::~DgnString((DgnString *)&v68);
  *a4 += v27;
  *a5 += v27;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 719, (DgnString *)&v68);
  if (v69) {
    uint64_t v37 = v68;
  }
  else {
    uint64_t v37 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v37, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v68);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 720, (DgnString *)&v68);
  if (v69) {
    uint64_t v42 = v68;
  }
  else {
    uint64_t v42 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v42, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v68);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 722, (DgnString *)&v68);
  if (v69) {
    unsigned int v47 = v68;
  }
  else {
    unsigned int v47 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v43, v44, v45, v46, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v47, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v68);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 724, (DgnString *)&v68);
  if (v69) {
    uint64_t v52 = v68;
  }
  else {
    uint64_t v52 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v52, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v68);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v53 = 4;
  }
  else {
    uint64_t v53 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 725, (DgnString *)&v68);
  if (v69) {
    uint64_t v58 = v68;
  }
  else {
    uint64_t v58 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v54, v55, v56, v57, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v58, v53, v53, 0);
  DgnString::~DgnString((DgnString *)&v68);
  *a4 += v53;
  *a5 += v53;
  unint64_t v66 = 0;
  unint64_t v67 = 0;
  unint64_t v65 = 0;
  DgnThreadClient::printSize(v64, a2, (a3 + 1), &v67, &v65, &v66);
  *a4 += v67;
  *a5 += v65;
  *a6 += v66;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 734, (DgnString *)&v68);
  if (v69) {
    int v63 = v68;
  }
  else {
    int v63 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v59, v60, v61, v62, a3, &byte_2140B33BB, (35 - a3), (35 - a3), v63, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v68);
}

void sub_213FCFAD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void *ThreadedLookaheadScorer::ThreadedLookaheadScorer(void *a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  *a1 = &unk_26C4E3560;
  uint64_t v10 = MemChunkAlloc(0x650uLL, 0);
  uint64_t v11 = DgnThread<LookaheadScorerThreadWorker>::DgnThread((uint64_t)v10, a2, 0, "LookaheadScorer");
  *(void *)uint64_t v11 = &unk_26C4E2FC8;
  *(void *)(v11 + 1576) = a3;
  *(void *)(v11 + 1584) = a4;
  *(_DWORD *)(v11 + 1592) = a5;
  *(unsigned char *)(v11 + 15DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = 0;
  *(void *)(v11 + 1600) = 0xFFFFFFF000000000;
  *(void *)(v11 + 160DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
  a1[1] = v11;
  DgnThreadClient::startup((DgnThreadClient *)v11);
  return a1;
}

void ThreadedLookaheadScorer::~ThreadedLookaheadScorer(DgnThreadClient **this)
{
  *this = (DgnThreadClient *)&unk_26C4E3560;
  if (DgnThreadClient::isLive(this[1]) && !DgnThreadClient::hasErrored(this[1])) {
    DgnThreadClient::shutdown(this[1], v2, v3, v4, v5, v6, v7, v8);
  }
  DgnDelete<FrameTransformerThread>((void (***)(void))this[1]);
}

{
  uint64_t vars8;

  ThreadedLookaheadScorer::~ThreadedLookaheadScorer(this);

  JUMPOUT(0x216698730);
}

void ThreadedLookaheadScorer::printSize(ThreadedLookaheadScorer *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 769, (DgnString *)&v31);
  if (v32) {
    uint64_t v15 = v31;
  }
  else {
    uint64_t v15 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v11, v12, v13, v14, a3, &byte_2140B33BB, a3, &byte_2140B33BB, v15);
  DgnString::~DgnString((DgnString *)&v31);
  if (a2 != -1) {
    xlprintf("%d ", v16, v17, v18, v19, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v16, v17, v18, v19, a3, &byte_2140B33BB);
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v20 = 4;
  }
  else {
    uint64_t v20 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 771, (DgnString *)&v31);
  if (v32) {
    uint64_t v25 = v31;
  }
  else {
    uint64_t v25 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v21, v22, v23, v24, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v25, v20, v20, 0);
  DgnString::~DgnString((DgnString *)&v31);
  *a4 += v20;
  *a5 += v20;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/prefilt/lookahsc.cpp", 774, (DgnString *)&v31);
  if (v32) {
    uint64_t v30 = v31;
  }
  else {
    uint64_t v30 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v26, v27, v28, v29, a3, &byte_2140B33BB, (35 - a3), (35 - a3), v30, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v31);
}

void sub_213FCFE2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t ThreadedLookaheadScorer::reset(ThreadedLookaheadScorer *this)
{
  uint64_t v1 = *((void *)this + 1);
  uint64_t result = LookaheadScorerThreadWorker::reset(*(LookaheadScorerThreadWorker **)(v1 + 56));
  *(_DWORD *)(v1 + 1600) = 0;
  return result;
}

uint64_t ThreadedLookaheadScorer::getNextFrameTime(ThreadedLookaheadScorer *this)
{
  return *(unsigned int *)(*((void *)this + 1) + 1600);
}

uint64_t ThreadedLookaheadScorer::scoreLookaheadUntil(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)(a4 + 16) <= (int)a2 && !*(unsigned char *)a4)
  {
    uint64_t v9 = *(void *)(result + 8);
    *(unsigned char *)(v9 + 15DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = 1;
    *(_DWORD *)(v9 + 1604) = a2;
    *(void *)(v9 + 160DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = a3;
    DgnThreadClient::playAllUntilWorkerPauses((DgnThreadClient *)v9, a2, a3, a4, a5, a6, a7, a8);
    *(void *)(v9 + 160DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
    *(_DWORD *)(v9 + 1604) = -16;
    return LookaheadScorerThread::stopScoring(v9, a4, v10, v11, v12, v13, v14, v15);
  }
  return result;
}

BOOL ThreadedLookaheadScorer::maybeStartScoring(uint64_t a1, uint64_t a2)
{
  BOOL isScoring = LookaheadScorerThread::isScoring(*(LookaheadScorerThread **)(a1 + 8));
  uint64_t v12 = *(void *)(a1 + 8);
  if (!isScoring && !**(unsigned char **)(*(void *)(v12 + 56) + 272))
  {
    *(void *)(v12 + 160DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = a2;
    DgnThreadClient::play((DgnThreadClient *)v12, v5, v6, v7, v8, v9, v10, v11);
    *(unsigned char *)(v12 + 15DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = 1;
    *(void *)(v12 + 160DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 8) = 0;
    uint64_t v12 = *(void *)(a1 + 8);
  }

  return LookaheadScorerThread::isScoring((LookaheadScorerThread *)v12);
}

BOOL LookaheadScorerThread::isScoring(LookaheadScorerThread *this)
{
  if (!*((unsigned char *)this + 1596)) {
    return 0;
  }
  BOOL result = DgnThreadClient::isLive(this);
  if (result) {
    return !DgnThreadClient::hasErrored(this);
  }
  return result;
}

uint64_t ThreadedLookaheadScorer::maybeStopScoring(uint64_t a1, int a2, unint64_t a3)
{
  uint64_t result = LookaheadScorerThread::isScoring(*(LookaheadScorerThread **)(a1 + 8));
  if (result)
  {
    if (!a2 || (uint64_t result = DgnThreadClient::getThreadState(*(DgnThreadClient **)(a1 + 8)), result == 4))
    {
      uint64_t v13 = *(void *)(a1 + 8);
      return LookaheadScorerThread::stopScoring(v13, a3, v7, v8, v9, v10, v11, v12);
    }
  }
  return result;
}

uint64_t ThreadedLookaheadScorer::getThreadId(ThreadedLookaheadScorer *this)
{
  return *(unsigned int *)(*((void *)this + 1) + 28);
}

uint64_t SimpleLookaheadScorer::maybeStartScoring()
{
  return 0;
}

uint64_t LookaheadScorer::getThreadId(LookaheadScorer *this)
{
  return 0xFFFFFFFFLL;
}

void LookaheadScorerThread::~LookaheadScorerThread(LookaheadScorerThread *this)
{
  DgnThreadClient::~DgnThreadClient(this);

  JUMPOUT(0x216698730);
}

uint64_t *DgnThread<LookaheadScorerThreadWorker>::newWorker(uint64_t a1)
{
  Latch<MemChunkRegion,LatchAdapter>::Latch(&v4, *(void *)(a1 + 16));
  uint64_t v2 = MemChunkAlloc(0x130uLL, *(MemChunkRegion **)(a1 + 16));
  DgnThreadWorker::DgnThreadWorker((uint64_t)v2, *(_DWORD *)(a1 + 12), a1, *(void *)(a1 + 16), *(_DWORD *)(a1 + 28));
  uint64_t *v2 = (uint64_t)&unk_26C4E3EB0;
  *((_DWORD *)v2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 64) = -16;
  v2[37] = 0;
  *(_OWORD *)(v2 + 33) = 0u;
  *(_OWORD *)(v2 + 35) = 0u;
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)&v4);
  return v2;
}

void sub_213FD0130(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  Latch<MemChunkRegion,LatchAdapter>::release((uint64_t)va);
  _Unwind_Resume(a1);
}

void *DgnArray<ScoreFixArray>::DgnArray(void *a1, uint64_t a2)
{
  unsigned int v2 = a2;
  *a1 = 0;
  a1[1] = 0;
  if (a2)
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)a1, a2, 0);
    unsigned int v4 = *((_DWORD *)a1 + 2);
    if (v4 > v2)
    {
      if ((int)v4 > (int)v2)
      {
        uint64_t v5 = (int)v4;
        uint64_t v6 = 16 * (int)v4 - 16;
        do
        {
          --v5;
          DgnPrimFixArray<double>::~DgnPrimFixArray(*a1 + v6);
          v6 -= 16;
        }
        while (v5 > (int)v2);
      }
      goto LABEL_11;
    }
  }
  else
  {
    unsigned int v4 = 0;
  }
  if (v4 < v2)
  {
    unint64_t v7 = v2 - (unint64_t)v4;
    uint64_t v8 = (_DWORD *)(*a1 + 16 * v4 + 8);
    do
    {
      *((void *)v8 - 1) = 0;
      *uint64_t v8 = 0;
      v8 += 4;
      --v7;
    }
    while (v7);
  }
LABEL_11:
  *((_DWORD *)a1 + 2) = v2;
  return a1;
}

void ScoreFixArraySpinQueue::~ScoreFixArraySpinQueue(ScoreFixArraySpinQueue *this)
{
  *((void *)this + 2) = 0;
  DgnArray<DgnVector>::releaseAll((uint64_t)this);
}

void FeatureArraySpinQueue::~FeatureArraySpinQueue(FeatureArraySpinQueue *this)
{
  *((void *)this + 2) = 0;
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this);
}

uint64_t DgnThread<LookaheadScorerThreadWorker>::DgnThread(uint64_t a1, int a2, uint64_t a3, char *a4)
{
  uint64_t v5 = (void *)DgnThreadClient::DgnThreadClient(a1, a2, a3, a4);
  *uint64_t v5 = &unk_26C4E5498;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 56) = DgnThread<LookaheadScorerThreadWorker>::newWorker((uint64_t)v5);
  return a1;
}

void sub_213FD02B8(_Unwind_Exception *a1)
{
  DgnThreadClient::~DgnThreadClient(v1);
  _Unwind_Resume(a1);
}

void DgnThread<LookaheadScorerThreadWorker>::~DgnThread(DgnThreadClient *a1)
{
  DgnThreadClient::~DgnThreadClient(a1);

  JUMPOUT(0x216698730);
}

uint64_t ListDFileSubFileStream::ListDFileSubFileStream(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, char *a6)
{
  uint64_t v9 = (void *)DgnFileStream::DgnFileStream(a1, a2, a3, a4);
  *uint64_t v9 = &unk_26C4E30F8;
  uint64_t v10 = (DgnString *)(v9 + 14);
  DgnString::DgnString((DgnString *)(v9 + 14));
  *(void *)(a1 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 104) = a5;
  DgnString::operator=(v10, a6);
  return a1;
}

void sub_213FD0378(_Unwind_Exception *a1)
{
  DgnString::~DgnString(v2);
  DgnFileStream::~DgnFileStream(v1);
  _Unwind_Resume(a1);
}

void ListDFileSubFileStream::~ListDFileSubFileStream(ListDFileSubFileStream *this, uint64_t a2, const char *a3)
{
  *(void *)this = &unk_26C4E30F8;
  unsigned int v4 = (DFile *)*((void *)this + 13);
  if (v4)
  {
    if (*((_DWORD *)this + 30)) {
      uint64_t v5 = (const char *)*((void *)this + 14);
    }
    else {
      uint64_t v5 = (const char *)&unk_2140A6F24;
    }
    DFile::reportProgress(v4, v5, a3);
    *((void *)this + 13) = 0;
  }
  DgnString::~DgnString((ListDFileSubFileStream *)((char *)this + 112));

  DgnFileStream::~DgnFileStream(this);
}

{
  uint64_t vars8;

  ListDFileSubFileStream::~ListDFileSubFileStream(this, a2, a3);

  JUMPOUT(0x216698730);
}

void ListDFileSubFileStream::printSize(ListDFileSubFileStream *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 117, (DgnString *)&v43);
  if (v44) {
    uint64_t v16 = (void *)v43;
  }
  else {
    uint64_t v16 = &unk_2140A6F24;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_2140A6F24, a3, &unk_2140A6F24, v16);
  DgnString::~DgnString((DgnString *)&v43);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_2140A6F24);
  unint64_t v42 = 0;
  unint64_t v43 = 0;
  unint64_t v41 = 0;
  DgnFileStream::printSize(this, 0xFFFFFFFFLL, (a3 + 1), &v43, &v42, &v41);
  *a4 += v43;
  *a5 += v42;
  *a6 += v41;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v21 = 4;
  }
  else {
    uint64_t v21 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 120, (DgnString *)&v43);
  if (v44) {
    uint64_t v26 = (void *)v43;
  }
  else {
    uint64_t v26 = &unk_2140A6F24;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v22, v23, v24, v25, (a3 + 1), &unk_2140A6F24, (34 - a3), (34 - a3), v26, v21, v21, 0);
  DgnString::~DgnString((DgnString *)&v43);
  *a4 += v21;
  *a5 += v21;
  uint64_t v27 = (char *)this + 112;
  uint64_t v28 = sizeObject((char *)this + 112);
  uint64_t v29 = sizeObject(v27);
  uint64_t v30 = sizeObject(v27);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 122, (DgnString *)&v43);
  if (v44) {
    uint64_t v35 = (void *)v43;
  }
  else {
    uint64_t v35 = &unk_2140A6F24;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v31, v32, v33, v34, (a3 + 1), &unk_2140A6F24, (34 - a3), (34 - a3), v35, v28, v29, v30);
  DgnString::~DgnString((DgnString *)&v43);
  *a4 += v28;
  *a5 += v29;
  *a6 += v30;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 124, (DgnString *)&v43);
  if (v44) {
    uint64_t v40 = (void *)v43;
  }
  else {
    uint64_t v40 = &unk_2140A6F24;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v36, v37, v38, v39, a3, &unk_2140A6F24, (35 - a3), (35 - a3), v40, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v43);
}

void sub_213FD0714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void ListDFile::ListDFile(ListDFile *this, const FileSpec *a2)
{
  DFile::DFile(this, a2);
  *(void *)uint64_t v2 = &unk_26C4E5728;
  *(_OWORD *)(v2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = 0u;
  *(_OWORD *)(v2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 96) = 0u;
  *(_OWORD *)(v2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 112) = 0u;
  *(_OWORD *)(v2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 128) = 0u;
  *(void *)(v2 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 144) = 0;
}

uint64_t ListDFile::createReadOnlyClone(ListDFile *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 6)) {
    uint64_t v8 = (void *)*((void *)this + 2);
  }
  else {
    uint64_t v8 = &unk_2140A6F24;
  }
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 145, (uint64_t)"dfutil/listdf", 10, (uint64_t)"%.500s", a7, a8, (char)v8);
  return 0;
}

void ListDFile::~ListDFile(ListDFile *this)
{
  *(void *)this = &unk_26C4E5728;
  DgnDelete<RealDFile>(*((void (****)(void))this + 16));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 136);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 112);
  DgnArray<DgnString>::releaseAll((uint64_t)this + 96);
  DgnArray<DgnString>::releaseAll((uint64_t)this + 80);

  DFile::~DFile(this);
}

{
  uint64_t vars8;

  ListDFile::~ListDFile(this);

  JUMPOUT(0x216698730);
}

void ListDFile::printSize(ListDFile *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 162, (DgnString *)&v79);
  if (v80) {
    uint64_t v16 = (void *)v79;
  }
  else {
    uint64_t v16 = &unk_2140A6F24;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_2140A6F24, a3, &unk_2140A6F24, v16);
  DgnString::~DgnString((DgnString *)&v79);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_2140A6F24);
  unint64_t v78 = 0;
  unint64_t v79 = 0;
  uint64_t v21 = (a3 + 1);
  unint64_t v77 = 0;
  DFile::printSize(this, 0xFFFFFFFFLL, v21, &v79, &v78, &v77);
  *a4 += v79;
  *a5 += v78;
  *a6 += v77;
  uint64_t v22 = sizeObject<DgnString>((uint64_t)this + 80, 0);
  uint64_t v23 = sizeObject<DgnString>((uint64_t)this + 80, 1);
  uint64_t v24 = sizeObject<DgnString>((uint64_t)this + 80, 3);
  uint64_t v76 = a3;
  uint64_t v25 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 166, (DgnString *)&v79);
  if (v80) {
    uint64_t v30 = (void *)v79;
  }
  else {
    uint64_t v30 = &unk_2140A6F24;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v26, v27, v28, v29, v21, &unk_2140A6F24, v25, v25, v30, v22, v23, v24);
  DgnString::~DgnString((DgnString *)&v79);
  *a4 += v22;
  *a5 += v23;
  *a6 += v24;
  uint64_t v31 = sizeObject<DgnString>((uint64_t)this + 96, 0);
  uint64_t v32 = sizeObject<DgnString>((uint64_t)this + 96, 1);
  uint64_t v33 = sizeObject<DgnString>((uint64_t)this + 96, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 168, (DgnString *)&v79);
  if (v80) {
    uint64_t v38 = (void *)v79;
  }
  else {
    uint64_t v38 = &unk_2140A6F24;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v34, v35, v36, v37, v21, &unk_2140A6F24, v25, v25, v38, v31, v32, v33);
  DgnString::~DgnString((DgnString *)&v79);
  *a4 += v31;
  *a5 += v32;
  *a6 += v33;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v39 = 12;
  }
  else {
    uint64_t v39 = 16;
  }
  int v40 = *((_DWORD *)this + 30);
  unsigned int v41 = *((_DWORD *)this + 31);
  BOOL v42 = v41 >= v40;
  uint64_t v43 = v41 - v40;
  if (v42)
  {
    uint64_t v45 = v40 & ~(v40 >> 31);
    int v40 = 0;
    uint64_t v44 = v39 + v45;
    v39 += v45 + v43;
  }
  else
  {
    uint64_t v44 = v39;
  }
  uint64_t v46 = v40;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 170, (DgnString *)&v79);
  if (v80) {
    uint64_t v51 = (void *)v79;
  }
  else {
    uint64_t v51 = &unk_2140A6F24;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v47, v48, v49, v50, v21, &unk_2140A6F24, v25, v25, v51, v39, v44, v46);
  DgnString::~DgnString((DgnString *)&v79);
  *a4 += v39;
  *a5 += v44;
  *a6 += v46;
  uint64_t v52 = *((void *)this + 16);
  if (v52)
  {
    unint64_t v78 = 0;
    unint64_t v79 = 0;
    unint64_t v77 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t *, unint64_t *, unint64_t *))(*(void *)v52 + 16))(v52, 0xFFFFFFFFLL, v21, &v79, &v78, &v77);
    *a4 += v79;
    *a5 += v78;
    *a6 += v77;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v53 = 4;
  }
  else {
    uint64_t v53 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 172, (DgnString *)&v79);
  if (v80) {
    uint64_t v58 = (void *)v79;
  }
  else {
    uint64_t v58 = &unk_2140A6F24;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v54, v55, v56, v57, v21, &unk_2140A6F24, v25, v25, v58, v53, v53, 0);
  DgnString::~DgnString((DgnString *)&v79);
  *a4 += v53;
  *a5 += v53;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v59 = 12;
  }
  else {
    uint64_t v59 = 16;
  }
  int v60 = *((_DWORD *)this + 36);
  unsigned int v61 = *((_DWORD *)this + 37);
  BOOL v42 = v61 >= v60;
  uint64_t v62 = v61 - v60;
  if (v42)
  {
    uint64_t v64 = v60 & ~(v60 >> 31);
    int v60 = 0;
    uint64_t v63 = v59 + v64;
    v59 += v64 + v62;
  }
  else
  {
    uint64_t v63 = v59;
  }
  uint64_t v65 = v60;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 174, (DgnString *)&v79);
  if (v80) {
    int v70 = (void *)v79;
  }
  else {
    int v70 = &unk_2140A6F24;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v66, v67, v68, v69, v21, &unk_2140A6F24, v25, v25, v70, v59, v63, v65);
  DgnString::~DgnString((DgnString *)&v79);
  *a4 += v59;
  *a5 += v63;
  *a6 += v65;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 176, (DgnString *)&v79);
  if (v80) {
    unsigned int v75 = (void *)v79;
  }
  else {
    unsigned int v75 = &unk_2140A6F24;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v71, v72, v73, v74, v76, &unk_2140A6F24, (35 - v76), (35 - v76), v75, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v79);
}

void sub_213FD0DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void ListDFile::startUp(ListDFile *this)
{
  DgnTextFileParser::DgnTextFileParser((DgnTextFileParser *)v75);
  DgnTextFileParser::openDgnTextFileParser((DgnTextFileParser *)v75, (char **)this + 2);
  DgnTextFileParser::verifyMatchingFileType((DgnTextFileParser *)v75, "ListDFile");
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  DgnTextFile::legalDgnTextFileVersions((int)v75, sListDFile_Versions, (uint64_t)&v73, v2, v3, v4, v5, v6);
  DgnTextFileParser::verifyFileVersionInRange((uint64_t)v75, (unsigned int *)&v73, v7, v8, v9, v10, v11, v12);
  DgnTextFileParser::verifyNoUnknownHeaderFields((DgnTextFileParser *)v75, v13, v14, v15, v16, v17, v18, v19);
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  DgnTextFile::getLineFieldNames((uint64_t)v75, (uint64_t)&v71);
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  DgnTextFile::getLineFieldFormats((uint64_t)v75, (unint64_t)&v69);
  DgnTextFileParser::verifyMatchingNumFieldSpecs((DgnTextFileParser *)v75, 2, v20, v21, v22, v23, v24, v25);
  uint64_t v26 = v71;
  if (*(_DWORD *)(v71 + 8)) {
    uint64_t v27 = *(const char **)v71;
  }
  else {
    uint64_t v27 = (const char *)&unk_2140A6F24;
  }
  if (strcmp(v27, "InternalFileName"))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 210, (uint64_t)"dfutil/listdf", 4, (uint64_t)"%.500s %.500s", v28, v29, (char)"InternalFileName");
    uint64_t v26 = v71;
  }
  if (*v69)
  {
    if (*(_DWORD *)(v26 + 8)) {
      uint64_t v30 = *(void **)v26;
    }
    else {
      uint64_t v30 = &unk_2140A6F24;
    }
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 213, (uint64_t)"dfutil/listdf", 9, (uint64_t)"%.500s %.500s", v28, v29, (char)v30);
    uint64_t v26 = v71;
  }
  if (*(_DWORD *)(v26 + 24)) {
    uint64_t v31 = *(const char **)(v26 + 16);
  }
  else {
    uint64_t v31 = (const char *)&unk_2140A6F24;
  }
  if (strcmp(v31, "ExternalFileName")) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 216, (uint64_t)"dfutil/listdf", 4, (uint64_t)"%.500s %.500s", v32, v33, (char)"ExternalFileName");
  }
  if (v69[1])
  {
    if (*(_DWORD *)(v71 + 8)) {
      uint64_t v34 = *(const char **)v71;
    }
    else {
      uint64_t v34 = (const char *)&unk_2140A6F24;
    }
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 219, (uint64_t)"dfutil/listdf", 9, (uint64_t)"%.500s %.500s", v32, v33, (char)v34);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v69);
  DgnArray<DgnString>::releaseAll((uint64_t)&v71);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v73);
  DgnString::DgnString((DgnString *)&v73);
  DgnString::DgnString((DgnString *)&v71);
  DgnString::preAllocate((unint64_t)&v71, 256);
  uint64_t v35 = (void *)((char *)this + 96);
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  while (DgnTextFileParser::parseNextLine((DgnTextFileParser *)v75))
  {
    LineFieldString = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v75, 0);
    DgnString::operator=((DgnString *)&v73, LineFieldString);
    uint64_t v37 = DgnTextFileParser::getLineFieldString((DgnTextFileParser *)v75, 1u);
    DgnString::operator=((DgnString *)&v71, v37);
    if (DgnArray<DgnString>::find((unsigned int *)this + 20, (uint64_t)&v73) != -1)
    {
      uint64_t CurrentLine = DgnTextFile::getCurrentLine((DgnTextFile *)v75);
      if (*(_DWORD *)(CurrentLine + 8)) {
        unsigned int v41 = *(void **)CurrentLine;
      }
      else {
        unsigned int v41 = &unk_2140A6F24;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 234, (uint64_t)"dfutil/listdf", 5, (uint64_t)"%.500s", v39, v40, (char)v41);
    }
    if (DgnString::find((DgnString *)&v73, 92) != -1)
    {
      if (v74) {
        LOBYTE(v44) = (_BYTE)v73;
      }
      else {
        uint64_t v44 = &unk_2140A6F24;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 237, (uint64_t)"dfutil/listdf", 7, (uint64_t)"%.500s", v42, v43, (char)v44);
    }
    unsigned int v45 = v74;
    if (v74 <= 1)
    {
      LOBYTE(v46) = (_BYTE)v73;
      if (!v74) {
        uint64_t v46 = &unk_2140A6F24;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 240, (uint64_t)"dfutil/listdf", 7, (uint64_t)"%.500s", v42, v43, (char)v46);
      unsigned int v45 = v74;
    }
    if (v45) {
      uint64_t v47 = v73;
    }
    else {
      uint64_t v47 = (const char *)&unk_2140A6F24;
    }
    if (strcmp(v47, "*") || (v72 ? (uint64_t v55 = (unsigned char *)v71) : (uint64_t v55 = &unk_2140A6F24), !*v55))
    {
      if (v45 < 2) {
        goto LABEL_77;
      }
      unint64_t v50 = 0;
      int v51 = 1;
      while (2)
      {
        uint64_t v52 = v73;
        int v53 = v73[v50];
        if (v50 && v53 == 46)
        {
          if (v73[v50 - 1] != 47)
          {
            if (!v51) {
              uint64_t v52 = (const char *)&unk_2140A6F24;
            }
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 260, (uint64_t)"dfutil/listdf", 7, (uint64_t)"%.500s", v48, v49, (char)v52);
            uint64_t v52 = v73;
            int v53 = v73[v50];
            goto LABEL_49;
          }
        }
        else
        {
LABEL_49:
          if (v53 != 46)
          {
            if (!v50 || v52[v50 - 1] == 47)
            {
              if (!v74) {
                uint64_t v52 = (const char *)&unk_2140A6F24;
              }
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 265, (uint64_t)"dfutil/listdf", 7, (uint64_t)"%.500s", v48, v49, (char)v52);
              uint64_t v52 = v73;
              int v53 = v73[v50];
            }
            if (v53 == 47 && (!v50 || v52[v50 - 1] == 47))
            {
              if (!v74) {
                uint64_t v52 = (const char *)&unk_2140A6F24;
              }
              errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 270, (uint64_t)"dfutil/listdf", 7, (uint64_t)"%.500s", v48, v49, (char)v52);
            }
          }
        }
        ++v50;
        int v51 = v74;
        LODWORD(v54) = v74 - 1;
        if (v74) {
          unint64_t v54 = v54;
        }
        else {
          unint64_t v54 = 0;
        }
        if (v50 >= v54) {
          goto LABEL_77;
        }
        continue;
      }
    }
    DgnString::DgnString((DgnString *)&v67);
    FileSpec::getPathOnly((ListDFile *)((char *)this + 16), (DgnString *)&v67);
    FileSpec::FileSpec((FileSpec *)v66);
    if (v68) {
      uint64_t v56 = v67;
    }
    else {
      uint64_t v56 = (char *)&unk_2140A6F24;
    }
    if (v72) {
      uint64_t v57 = (char *)v71;
    }
    else {
      uint64_t v57 = (char *)&unk_2140A6F24;
    }
    FileSpec::fillFromDefPathAndName((FileSpec *)v66, v56, v57);
    uint64_t v58 = MemChunkAlloc(0x1B8uLL, 0);
    uint64_t v59 = RealDFile::RealDFile((RealDFile *)v58, (const FileSpec *)v66);
    *((void *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 16) = v59;
    RealDFile::startUp((uint64_t)v59, 0, 1, 1, 0, 0);
    FileSpec::~FileSpec((FileSpec *)v66);
    DgnString::~DgnString((DgnString *)&v67);
LABEL_77:
    uint64_t v60 = *((unsigned int *)this + 22);
    if (v60 == *((_DWORD *)this + 23))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 80, 1, 1);
      uint64_t v60 = *((unsigned int *)this + 22);
    }
    DgnString::DgnString((DgnString *)(*((void *)this + 10) + 16 * v60), (const DgnString *)&v73);
    ++*((_DWORD *)this + 22);
    uint64_t v61 = *((unsigned int *)this + 26);
    uint64_t v62 = v61;
    if (v61 == *((_DWORD *)this + 27))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 96, 1, 1);
      uint64_t v62 = *((unsigned int *)this + 26);
    }
    DgnString::DgnString((DgnString *)(*v35 + 16 * v62));
    ++*((_DWORD *)this + 26);
    DgnString::preAllocate(*((void *)this + 12) + 16 * v61, 96);
    DgnString::operator=((DgnString *)(*v35 + 16 * v61), (DgnString *)&v71);
    unsigned int v63 = *((_DWORD *)this + 30);
    if (v63 == *((_DWORD *)this + 31))
    {
      DgnPrimArray<char>::reallocElts((uint64_t)this + 112, 1, 1);
      unsigned int v63 = *((_DWORD *)this + 30);
    }
    *(unsigned char *)(*((void *)this + 14) + v63) = 0;
    *((_DWORD *)this + 30) = v63 + 1;
  }
  DgnArray<DgnString>::releaseAll((uint64_t)&v69);
  DgnString::~DgnString((DgnString *)&v71);
  DgnString::~DgnString((DgnString *)&v73);
  ListDFile::populateBackoffSubFileActiveArray(this, v64, v65);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)v75);
}

void sub_213FD1460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va2, a11);
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  DgnString::~DgnString((DgnString *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnTextFileParser::~DgnTextFileParser((DgnTextFileParser *)va2);
  _Unwind_Resume(a1);
}

void *ListDFile::populateBackoffSubFileActiveArray(void *this, uint64_t a2, const char *a3)
{
  uint64_t v3 = this[16];
  if (v3)
  {
    uint64_t v4 = (uint64_t)this;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    unint64_t v5 = *((unsigned int *)this + 22);
    if (v5)
    {
      uint64_t v6 = 0;
      unsigned int v7 = 0;
      for (unint64_t i = 0; i < v5; ++i)
      {
        uint64_t v9 = (const DgnString *)(*(void *)(v4 + 80) + v6);
        if (*((_DWORD *)v9 + 2)) {
          uint64_t v10 = *(const char **)v9;
        }
        else {
          uint64_t v10 = (const char *)&unk_2140A6F24;
        }
        if (strcmp(v10, "*"))
        {
          if (v7 == HIDWORD(v20))
          {
            DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v19, 1, 1);
            unsigned int v7 = v20;
          }
          DgnString::DgnString((DgnString *)(v19 + 16 * v7), v9);
          unsigned int v7 = v20 + 1;
          LODWORD(v20) = v20 + 1;
          unint64_t v5 = *(unsigned int *)(v4 + 88);
        }
        v6 += 16;
      }
      uint64_t v3 = *(void *)(v4 + 128);
    }
    unint64_t v11 = *(unsigned int *)(v3 + 160);
    if (*(_DWORD *)(v4 + 148) < v11)
    {
      uint64_t v21 = 0;
      *(_DWORD *)(v4 + 1DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 48) = realloc_array(*(void **)(v4 + 136), &v21, v11, *(unsigned int *)(v4 + 144), *(unsigned int *)(v4 + 144), 1);
      *(void *)(v4 + DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 136) = v21;
    }
    *(_DWORD *)(v4 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 144) = v11;
    if (v11 >= 2)
    {
      unsigned __int16 v12 = 1;
      while (1)
      {
        uint64_t v13 = v12;
        uint64_t v14 = (const char *)(*(void *)(v3 + 152) + ((unint64_t)v12 << 7));
        uint64_t v15 = (unsigned char *)(*(void *)(v4 + 136) + v12);
        *uint64_t v15 = 1;
        if (!*v14) {
          goto LABEL_27;
        }
        if (v20) {
          break;
        }
LABEL_28:
        unsigned __int16 v12 = v13 + 1;
        if (v11 <= (unsigned __int16)(v13 + 1)) {
          return DgnArray<DgnString>::releaseAll((uint64_t)&v19);
        }
      }
      uint64_t v16 = 0;
      unint64_t v17 = 0;
      while (1)
      {
        uint64_t v18 = *(_DWORD *)(v19 + v16 + 8) ? *(DgnString **)(v19 + v16) : (DgnString *)&unk_2140A6F24;
        if (!DgnString::compareNoCase(v18, v14, a3)) {
          break;
        }
        ++v17;
        v16 += 16;
        if (v17 >= v20) {
          goto LABEL_28;
        }
      }
      uint64_t v15 = (unsigned char *)(*(void *)(v4 + 136) + v13);
LABEL_27:
      *uint64_t v15 = 0;
      goto LABEL_28;
    }
    return DgnArray<DgnString>::releaseAll((uint64_t)&v19);
  }
  return this;
}

void sub_213FD16EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  DgnArray<DgnString>::releaseAll((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ListDFile::subFileExistsByExplicitExtension(ListDFile *this, char *a2)
{
  DgnString::DgnString((DgnString *)&v14);
  DFile::makeSubFileName((uint64_t)this + 56, a2, (DgnString *)&v14);
  if (*((_DWORD *)this + 22))
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = *((void *)this + 10) + v5;
      uint64_t v8 = *(_DWORD *)(v7 + 8) ? *(DgnString **)v7 : (DgnString *)&unk_2140A6F24;
      uint64_t v9 = (const char *)(v15 ? v14 : &unk_2140A6F24);
      if (!DgnString::compareNoCase(v8, v9, v4)) {
        break;
      }
      ++v6;
      v5 += 16;
      if (v6 >= *((unsigned int *)this + 22)) {
        goto LABEL_11;
      }
    }
    uint64_t v12 = *(_DWORD *)(*((void *)this + 12) + v5 + 8) > 1u;
  }
  else
  {
LABEL_11:
    uint64_t v10 = *((void *)this + 16);
    if (v10)
    {
      if (v15) {
        unint64_t v11 = v14;
      }
      else {
        unint64_t v11 = &unk_2140A6F24;
      }
      uint64_t v12 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v10 + 24))(v10, v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
  }
  DgnString::~DgnString((DgnString *)&v14);
  return v12;
}

void sub_213FD1828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *ListDFile::openSubFileByExplicitExtension(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12 = (char *)&unk_2140A6F24;
  if (a3 > 4 || ((1 << a3) & 0x19) == 0) {
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 345, (uint64_t)"dfutil/listdf", 3, (uint64_t)"%s", a7, a8, (char)&unk_2140A6F24);
  }
  DgnString::DgnString((DgnString *)&v30);
  DFile::makeSubFileName(a1 + 56, a2, (DgnString *)&v30);
  if (!*(_DWORD *)(a1 + 88)) {
    goto LABEL_24;
  }
  uint64_t v16 = 0;
  unint64_t v17 = 0;
  while (1)
  {
    uint64_t v18 = *(void *)(a1 + 80) + v16;
    uint64_t v19 = *(_DWORD *)(v18 + 8) ? *(DgnString **)v18 : (DgnString *)&unk_2140A6F24;
    uint64_t v20 = (const char *)(v31 ? v30 : &unk_2140A6F24);
    if (!DgnString::compareNoCase(v19, v20, v13)) {
      break;
    }
    ++v17;
    v16 += 16;
    if (v17 >= *(unsigned int *)(a1 + 88)) {
      goto LABEL_24;
    }
  }
  if (*(_DWORD *)(*(void *)(a1 + 96) + v16 + 8) <= 1u) {
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 356, (uint64_t)"dfutil/listdf", 1, (uint64_t)"%.500s", v14, v15, (char)a2);
  }
  if ((v17 & 0x80000000) != 0)
  {
LABEL_24:
    uint64_t v24 = *(void *)(a1 + 128);
    if (v24)
    {
      if (v31) {
        uint64_t v25 = v30;
      }
      else {
        uint64_t v25 = &unk_2140A6F24;
      }
      uint64_t v23 = (uint64_t *)(*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v24 + 32))(v24, v25, a3, a4);
    }
    else
    {
      errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 395, (uint64_t)"dfutil/listdf", 1, (uint64_t)"%.500s", v14, v15, (char)a2);
      uint64_t v23 = 0;
    }
  }
  else
  {
    DgnString::DgnString((DgnString *)&v28);
    FileSpec::getPathOnly((FileSpec *)(a1 + 16), (DgnString *)&v28);
    FileSpec::FileSpec((FileSpec *)v27);
    if (v29) {
      uint64_t v21 = v28;
    }
    else {
      uint64_t v21 = (char *)&unk_2140A6F24;
    }
    uint64_t v22 = *(void *)(a1 + 96) + v16;
    if (*(_DWORD *)(v22 + 8)) {
      uint64_t v12 = *(char **)v22;
    }
    FileSpec::fillFromDefPathAndName((FileSpec *)v27, v21, v12);
    uint64_t v23 = MemChunkAlloc(0x80uLL, 0);
    ListDFileSubFileStream::ListDFileSubFileStream((uint64_t)v23, 0, a4, (uint64_t)v27, a1, a2);
    *(unsigned char *)(*(void *)(a1 + 112) + v17) = 1;
    FileSpec::~FileSpec((FileSpec *)v27);
    DgnString::~DgnString((DgnString *)&v28);
  }
  DgnString::~DgnString((DgnString *)&v30);
  return v23;
}

void sub_213FD1AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  FileSpec::~FileSpec((FileSpec *)va);
  DgnString::~DgnString((DgnString *)va1);
  DgnString::~DgnString((DgnString *)va2);
  _Unwind_Resume(a1);
}

void ListDFile::removeSubFileByExplicitExtension(ListDFile *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

off_t ListDFile::getSubFileSizeByExplicitExtension(ListDFile *this, char *a2)
{
  DgnString::DgnString((DgnString *)&v28);
  DFile::makeSubFileName((uint64_t)this + 56, a2, (DgnString *)&v28);
  if (!*((_DWORD *)this + 22)) {
    goto LABEL_20;
  }
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  while (1)
  {
    uint64_t v9 = *((void *)this + 10) + v7;
    uint64_t v10 = *(_DWORD *)(v9 + 8) ? *(DgnString **)v9 : (DgnString *)&unk_2140A6F24;
    unint64_t v11 = (const char *)(v29 ? v28 : &unk_2140A6F24);
    if (!DgnString::compareNoCase(v10, v11, v4)) {
      break;
    }
    ++v8;
    v7 += 16;
    if (v8 >= *((unsigned int *)this + 22)) {
      goto LABEL_20;
    }
  }
  if (*(_DWORD *)(*((void *)this + 12) + v7 + 8) <= 1u) {
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 419, (uint64_t)"dfutil/listdf", 1, (uint64_t)"%.500s", v5, v6, (char)a2);
  }
  if ((v8 & 0x80000000) != 0)
  {
LABEL_20:
    uint64_t v15 = *((void *)this + 16);
    if (v15)
    {
      if (v29) {
        uint64_t v16 = v28;
      }
      else {
        uint64_t v16 = &unk_2140A6F24;
      }
      off_t FileSize = (*(uint64_t (**)(uint64_t, void *))(*(void *)v15 + 48))(v15, v16);
    }
    else
    {
      errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 444, (uint64_t)"dfutil/listdf", 1, (uint64_t)"%.500s", v5, v6, (char)a2);
      off_t FileSize = 0;
    }
  }
  else
  {
    DgnString::DgnString((DgnString *)&v26);
    FileSpec::getPathOnly((ListDFile *)((char *)this + 16), (DgnString *)&v26);
    FileSpec::FileSpec((FileSpec *)&v24);
    if (v27) {
      uint64_t v12 = v26;
    }
    else {
      uint64_t v12 = (char *)&unk_2140A6F24;
    }
    uint64_t v13 = *((void *)this + 12) + v7;
    if (*(_DWORD *)(v13 + 8)) {
      uint64_t v14 = *(char **)v13;
    }
    else {
      uint64_t v14 = (char *)&unk_2140A6F24;
    }
    FileSpec::fillFromDefPathAndName((FileSpec *)&v24, v12, v14);
    OsFile::openOsFile((const FileSpec *)&v24, 0);
    uint64_t v21 = v20;
    if (!v20)
    {
      if (v25) {
        LOBYTE(v22) = v24;
      }
      else {
        uint64_t v22 = &unk_2140A6F24;
      }
      errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/listdf.cpp", 434, (uint64_t)"dfutil/listdf", 2, (uint64_t)"%.500s %.500s", v18, v19, (char)v22);
    }
    off_t FileSize = OsFile::getFileSize(v21);
    DgnDelete<OsFile>(v21);
    FileSpec::~FileSpec((FileSpec *)&v24);
    DgnString::~DgnString((DgnString *)&v26);
  }
  DgnString::~DgnString((DgnString *)&v28);
  return FileSize;
}