void sub_213DF2C54()
{
  __cxa_end_catch();
  JUMPOUT(0x213DF2C5CLL);
}

void sub_213DF2C64()
{
}

uint64_t verifyPointerArgument<TPTokenHandle_fake **>(uint64_t result, char a2, char *a3, uint64_t a4, uint64_t a5)
{
  if (!result && (a2 & 1) == 0)
  {
    conditionalAssert(a3, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 279, a4, a5);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v9, a3);
    void *exception = byte_26C4DF190;
    v7 = (std::string *)(exception + 1);
    if (SHIBYTE(v10) < 0)
    {
      std::string::__init_copy_ctor_external(v7, (const std::string::value_type *)v9, *((std::string::size_type *)&v9 + 1));
    }
    else
    {
      long long v8 = v9;
      exception[3] = v10;
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    }
    void *exception = &unk_26C4E0430;
    exception[4] = 3;
  }
  return result;
}

void sub_213DF2D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t TPToken_Close(unint64_t a1)
{
  TReentrancyHandler::TReentrancyHandler((TReentrancyHandler *)&v17, "TPToken_Close");
  TLocaleHandler::TLocaleHandler((TLocaleHandler *)v16);
  MrecInitModule_sdpres_sdapi();
  if (!g_bInitialized)
  {
    conditionalAssert("Not initialized", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tptoken.cpp", 174, v2, v3);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v14, "Not initialized");
    void *exception = byte_26C4DF190;
    long long v9 = (std::string *)(exception + 1);
    if (SHIBYTE(v15) < 0)
    {
      std::string::__init_copy_ctor_external(v9, (const std::string::value_type *)v14, *((std::string::size_type *)&v14 + 1));
    }
    else
    {
      long long v12 = v14;
      exception[3] = v15;
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v12;
    }
    void *exception = &unk_26C4E0430;
    exception[4] = 4;
  }
  v4 = (_DWORD *)verifyTokenizerHandle(a1, "Bad input tokenizer handle");
  if (v4[30])
  {
    conditionalAssert("Tokenizer is referenced", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tptoken.cpp", 177, v5, v6);
    uint64_t v10 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v14, "Tokenizer is referenced");
    *uint64_t v10 = byte_26C4DF190;
    v11 = (std::string *)(v10 + 1);
    if (SHIBYTE(v15) < 0)
    {
      std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)v14, *((std::string::size_type *)&v14 + 1));
    }
    else
    {
      long long v13 = v14;
      v10[3] = v15;
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v13;
    }
    *uint64_t v10 = &unk_26C4E0430;
    v10[4] = 7;
  }
  (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
  MrecInitModule_sdpres_sdapi();
  TLocaleHandler::~TLocaleHandler(v16);
  TReentrancyHandler::ms_bIn = 0;
  return 0;
}

void sub_213DF2FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, locale_t a20)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v21)
  {
LABEL_6:
    MrecInitModule_sdpres_sdapi();
    TLocaleHandler::~TLocaleHandler(&a20);
    TReentrancyHandler::ms_bIn = 0;
    switch(a2)
    {
      case 7:
        v26 = (char *)__cxa_begin_catch(a1);
        v27 = v26 + 8;
        if (v26[31] < 0) {
          v27 = *(unsigned char **)v27;
        }
        handleException(v27, (uint64_t)"TPToken_Close", *((void *)v26 + 4), v24, v25);
        break;
      case 6:
        v30 = (char *)__cxa_begin_catch(a1);
        v31 = v30 + 8;
        if (v30[31] < 0) {
          v31 = *(unsigned char **)v31;
        }
        handleException(v31, (uint64_t)"TPToken_Close", 6, v28, v29);
        break;
      case 5:
        v34 = (char *)__cxa_begin_catch(a1);
        v35 = v34 + 8;
        if (v34[31] < 0) {
          v35 = *(unsigned char **)v35;
        }
LABEL_17:
        handleException(v35, (uint64_t)"TPToken_Close", 2, v32, v33);
        break;
      case 4:
        v38 = (char *)__cxa_begin_catch(a1);
        v39 = v38 + 8;
        if (v38[31] < 0) {
          v39 = *(unsigned char **)v39;
        }
        handleException(v39, (uint64_t)"TPToken_Close", 11, v36, v37);
        break;
      case 3:
        v40 = (char *)__cxa_begin_catch(a1);
        v35 = v40 + 8;
        if (v40[31] < 0) {
          v35 = *(unsigned char **)v35;
        }
        goto LABEL_17;
      case 2:
        v41 = __cxa_begin_catch(a1);
        v42 = (unsigned char *)(*(uint64_t (**)(void *))(*(void *)v41 + 16))(v41);
        handleException(v42, (uint64_t)"TPToken_Close", 1, v43, v44);
        break;
      default:
        if (a2 != 1) {
          _Unwind_Resume(a1);
        }
        v45 = __cxa_begin_catch(a1);
        v46 = (unsigned char *)(*(uint64_t (**)(void *))(*(void *)v45 + 16))(v45);
        handleException(v46, (uint64_t)"TPToken_Close", 2, v47, v48);
        break;
    }
    __cxa_end_catch();
    JUMPOUT(0x213DF2E50);
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

uint64_t TPToken_Tokenize(unint64_t a1, unint64_t a2, const char *a3, char *a4, char *a5, uint64_t *a6, const char *a7)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  TReentrancyHandler::TReentrancyHandler((TReentrancyHandler *)&v37, "TPToken_Tokenize");
  TLocaleHandler::TLocaleHandler((TLocaleHandler *)v36);
  MrecInitModule_sdpres_sdapi();
  if (!g_bInitialized)
  {
    conditionalAssert("Not initialized", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tptoken.cpp", 250, v14, v15);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(v33, "Not initialized");
    void *exception = byte_26C4DF190;
    v30 = (std::string *)(exception + 1);
    if ((v33[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v30, *(const std::string::value_type **)v33, *(std::string::size_type *)&v33[8]);
    }
    else
    {
      long long v32 = *(_OWORD *)v33;
      exception[3] = *(void *)&v33[16];
      *(_OWORD *)&v30->__r_.__value_.__l.__data_ = v32;
    }
    void *exception = &unk_26C4E0430;
    exception[4] = 4;
  }
  uint64_t v16 = verifyTokenizerHandle(a1, "Bad input tokenizer handle");
  if (!a2
    || (v19 = (TTokenizer *)v16,
        ((uint64_t)(*(void *)(*(void *)(v16 + 24) + 80) - *(void *)(*(void *)(v16 + 24) + 72)) >> 5) - 1 < a2))
  {
    conditionalAssert("Bad input parameter configuration handle", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tptoken.cpp", 254, v17, v18);
    v27 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(v33, "Bad input parameter configuration handle");
    void *v27 = byte_26C4DF190;
    uint64_t v28 = (std::string *)(v27 + 1);
    if ((v33[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v28, *(const std::string::value_type **)v33, *(std::string::size_type *)&v33[8]);
    }
    else
    {
      long long v31 = *(_OWORD *)v33;
      v27[3] = *(void *)&v33[16];
      *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v31;
    }
    void *v27 = &unk_26C4E0430;
    v27[4] = 3;
  }
  verifyStringArgument(a4, 0, 1, "Bad input text pointer", v18);
  verifyPointerArgument<TPTokenResultHandle_fake **>((uint64_t)a6, 0, "Bad output result handle pointer", v20, v21);
  if (a7)
  {
    *(void *)uint64_t v33 = v34;
    *(_OWORD *)&v33[8] = xmmword_214085190;
    char v35 = 1;
    uint64_t v22 = *(void *)(*((void *)v19 + 3) + 72) + 32 * a2;
    v23 = (int *)(v22 + 8);
    if (*(char *)(v22 + 31) < 0) {
      v23 = *(int **)v23;
    }
    TBuffer<wchar_t>::assign((uint64_t)v33, v23);
    v39 = v41;
    long long v40 = xmmword_214085190;
    char v42 = 1;
    uint64_t v24 = *(void *)(*((void *)v19 + 3) + 128);
    if (*(void *)&v33[16] >= *(void *)&v33[8])
    {
      if (v35)
      {
        int v38 = 0;
        TBuffer<wchar_t>::insert((uint64_t)v33, *(unint64_t *)&v33[16], &v38, 1uLL);
        uint64_t v25 = *(unsigned int **)v33;
        --*(void *)&v33[16];
      }
      else
      {
        uint64_t v25 = *(unsigned int **)v33;
        if (*(void *)&v33[8]) {
          *(_DWORD *)(*(void *)v33 + 4 * *(void *)&v33[8] - 4) = 0;
        }
      }
    }
    else
    {
      uint64_t v25 = *(unsigned int **)v33;
      *(_DWORD *)(*(void *)v33 + 4 * *(void *)&v33[16]) = 0;
    }
    TLocaleInfo::unicodeToMultiByte(v24, v25, (uint64_t)&v39);
    if (*((void *)&v40 + 1) >= (unint64_t)v40)
    {
      if (v42)
      {
        LOBYTE(v38) = 0;
        TBuffer<char>::insert((uint64_t)&v39, *((unint64_t *)&v40 + 1), (char *)&v38, 1uLL);
        --*((void *)&v40 + 1);
      }
      else if ((void)v40)
      {
        v39[(void)v40 - 1] = 0;
      }
    }
    else
    {
      v39[*((void *)&v40 + 1)] = 0;
    }
    saveDump(v19, v39, a3, a4, a5, a7);
    if (v42 && v39 != v41 && v39) {
      MEMORY[0x216698730]();
    }
    if (v35 && *(unsigned char **)v33 != v34 && *(void *)v33) {
      MEMORY[0x216698730]();
    }
  }
  *a6 = TTokenizer::tokenize((uint64_t)v19, a4, a3, a5, a2, 0);
  MrecInitModule_sdpres_sdapi();
  TLocaleHandler::~TLocaleHandler(v36);
  TReentrancyHandler::ms_bIn = 0;
  return 0;
}

void sub_213DF372C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v17)
  {
LABEL_6:
    MrecInitModule_sdpres_sdapi();
    TLocaleHandler::~TLocaleHandler((locale_t *)&STACK[0x438]);
    TReentrancyHandler::ms_bIn = 0;
    switch(a2)
    {
      case 7:
        uint64_t v22 = (char *)__cxa_begin_catch(a1);
        v23 = v22 + 8;
        if (v22[31] < 0) {
          v23 = *(unsigned char **)v23;
        }
        handleException(v23, (uint64_t)"TPToken_Tokenize", *((void *)v22 + 4), v20, v21);
        __cxa_end_catch();
        break;
      case 6:
        v26 = (char *)__cxa_begin_catch(a1);
        v27 = v26 + 8;
        if (v26[31] < 0) {
          v27 = *(unsigned char **)v27;
        }
        handleException(v27, (uint64_t)"TPToken_Tokenize", 6, v24, v25);
        __cxa_end_catch();
        break;
      case 5:
        v30 = (char *)__cxa_begin_catch(a1);
        long long v31 = v30 + 8;
        if (v30[31] < 0) {
          long long v31 = *(unsigned char **)v31;
        }
LABEL_17:
        handleException(v31, (uint64_t)"TPToken_Tokenize", 2, v28, v29);
        __cxa_end_catch();
        break;
      case 4:
        v34 = (char *)__cxa_begin_catch(a1);
        char v35 = v34 + 8;
        if (v34[31] < 0) {
          char v35 = *(unsigned char **)v35;
        }
        handleException(v35, (uint64_t)"TPToken_Tokenize", 11, v32, v33);
        __cxa_end_catch();
        break;
      case 3:
        uint64_t v36 = (char *)__cxa_begin_catch(a1);
        long long v31 = v36 + 8;
        if (v36[31] < 0) {
          long long v31 = *(unsigned char **)v31;
        }
        goto LABEL_17;
      case 2:
        char v37 = __cxa_begin_catch(a1);
        int v38 = (unsigned char *)(*(uint64_t (**)(void *))(*(void *)v37 + 16))(v37);
        handleException(v38, (uint64_t)"TPToken_Tokenize", 1, v39, v40);
        __cxa_end_catch();
        break;
      default:
        if (a2 != 1) {
          _Unwind_Resume(a1);
        }
        v41 = __cxa_begin_catch(a1);
        char v42 = (unsigned char *)(*(uint64_t (**)(void *))(*(void *)v41 + 16))(v41);
        handleException(v42, (uint64_t)"TPToken_Tokenize", 2, v43, v44);
        __cxa_end_catch();
        break;
    }
    JUMPOUT(0x213DF355CLL);
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

unsigned char *verifyStringArgument(unsigned char *result, char a2, char a3, char *a4, uint64_t a5)
{
  if (!result && (a2 & 1) == 0)
  {
    conditionalAssert(a4, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 297, (uint64_t)a4, a5);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v13, a4);
    void *exception = byte_26C4DF190;
    v7 = (std::string *)(exception + 1);
    if (SHIBYTE(v14) < 0)
    {
      std::string::__init_copy_ctor_external(v7, (const std::string::value_type *)v13, *((std::string::size_type *)&v13 + 1));
    }
    else
    {
      long long v11 = v13;
      exception[3] = v14;
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v11;
    }
    void *exception = &unk_26C4E0430;
    exception[4] = 3;
  }
  if (result && (a3 & 1) == 0 && !*result)
  {
    conditionalAssert(a4, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 298, (uint64_t)a4, a5);
    long long v9 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v13, a4);
    *long long v9 = byte_26C4DF190;
    uint64_t v10 = (std::string *)(v9 + 1);
    if (SHIBYTE(v14) < 0)
    {
      std::string::__init_copy_ctor_external(v10, (const std::string::value_type *)v13, *((std::string::size_type *)&v13 + 1));
    }
    else
    {
      long long v12 = v13;
      v9[3] = v14;
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v12;
    }
    *long long v9 = &unk_26C4E0430;
    v9[4] = 3;
  }
  return result;
}

void sub_213DF3C30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v16) {
    __cxa_free_exception(v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t verifyPointerArgument<TPTokenResultHandle_fake **>(uint64_t result, char a2, char *a3, uint64_t a4, uint64_t a5)
{
  if (!result && (a2 & 1) == 0)
  {
    conditionalAssert(a3, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 279, a4, a5);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v9, a3);
    void *exception = byte_26C4DF190;
    v7 = (std::string *)(exception + 1);
    if (SHIBYTE(v10) < 0)
    {
      std::string::__init_copy_ctor_external(v7, (const std::string::value_type *)v9, *((std::string::size_type *)&v9 + 1));
    }
    else
    {
      long long v8 = v9;
      exception[3] = v10;
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    }
    void *exception = &unk_26C4E0430;
    exception[4] = 3;
  }
  return result;
}

void sub_213DF3D60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t TPToken_DeleteResult(unint64_t a1, uint64_t a2)
{
  TReentrancyHandler::TReentrancyHandler((TReentrancyHandler *)&v20, "TPToken_DeleteResult");
  TLocaleHandler::TLocaleHandler((TLocaleHandler *)v19);
  MrecInitModule_sdpres_sdapi();
  if (!g_bInitialized)
  {
    conditionalAssert("Not initialized", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tptoken.cpp", 283, v4, v5);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v17, "Not initialized");
    void *exception = byte_26C4DF190;
    uint64_t v14 = (std::string *)(exception + 1);
    if (SHIBYTE(v18) < 0)
    {
      std::string::__init_copy_ctor_external(v14, (const std::string::value_type *)v17, *((std::string::size_type *)&v17 + 1));
    }
    else
    {
      long long v16 = v17;
      exception[3] = v18;
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v16;
    }
    void *exception = &unk_26C4E0430;
    exception[4] = 4;
  }
  uint64_t v6 = verifyTokenizerHandle(a1, "Bad input tokenizer handle");
  if (!a2
    || (uint64_t v9 = *(void *)(v6 + 96), a2 - 1 >= (unint64_t)((*(void *)(v6 + 104) - v9) >> 3))
    || !*(void *)(v9 + 8 * (a2 - 1)))
  {
    conditionalAssert("Bad input result handle", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tptoken.cpp", 287, v7, v8);
    long long v11 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v17, "Bad input result handle");
    void *v11 = byte_26C4DF190;
    long long v12 = (std::string *)(v11 + 1);
    if (SHIBYTE(v18) < 0)
    {
      std::string::__init_copy_ctor_external(v12, (const std::string::value_type *)v17, *((std::string::size_type *)&v17 + 1));
    }
    else
    {
      long long v15 = v17;
      v11[3] = v18;
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v15;
    }
    void *v11 = &unk_26C4E0430;
    v11[4] = 3;
  }
  TTokenizer::release(v6, a2);
  MrecInitModule_sdpres_sdapi();
  TLocaleHandler::~TLocaleHandler(v19);
  TReentrancyHandler::ms_bIn = 0;
  return 0;
}

void sub_213DF3FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, locale_t a20)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v21)
  {
LABEL_6:
    MrecInitModule_sdpres_sdapi();
    TLocaleHandler::~TLocaleHandler(&a20);
    TReentrancyHandler::ms_bIn = 0;
    switch(a2)
    {
      case 7:
        v26 = (char *)__cxa_begin_catch(a1);
        v27 = v26 + 8;
        if (v26[31] < 0) {
          v27 = *(unsigned char **)v27;
        }
        handleException(v27, (uint64_t)"TPToken_DeleteResult", *((void *)v26 + 4), v24, v25);
        break;
      case 6:
        v30 = (char *)__cxa_begin_catch(a1);
        long long v31 = v30 + 8;
        if (v30[31] < 0) {
          long long v31 = *(unsigned char **)v31;
        }
        handleException(v31, (uint64_t)"TPToken_DeleteResult", 6, v28, v29);
        break;
      case 5:
        v34 = (char *)__cxa_begin_catch(a1);
        char v35 = v34 + 8;
        if (v34[31] < 0) {
          char v35 = *(unsigned char **)v35;
        }
LABEL_17:
        handleException(v35, (uint64_t)"TPToken_DeleteResult", 2, v32, v33);
        break;
      case 4:
        int v38 = (char *)__cxa_begin_catch(a1);
        uint64_t v39 = v38 + 8;
        if (v38[31] < 0) {
          uint64_t v39 = *(unsigned char **)v39;
        }
        handleException(v39, (uint64_t)"TPToken_DeleteResult", 11, v36, v37);
        break;
      case 3:
        uint64_t v40 = (char *)__cxa_begin_catch(a1);
        char v35 = v40 + 8;
        if (v40[31] < 0) {
          char v35 = *(unsigned char **)v35;
        }
        goto LABEL_17;
      case 2:
        v41 = __cxa_begin_catch(a1);
        char v42 = (unsigned char *)(*(uint64_t (**)(void *))(*(void *)v41 + 16))(v41);
        handleException(v42, (uint64_t)"TPToken_DeleteResult", 1, v43, v44);
        break;
      default:
        if (a2 != 1) {
          _Unwind_Resume(a1);
        }
        v45 = __cxa_begin_catch(a1);
        v46 = (unsigned char *)(*(uint64_t (**)(void *))(*(void *)v45 + 16))(v45);
        handleException(v46, (uint64_t)"TPToken_DeleteResult", 2, v47, v48);
        break;
    }
    __cxa_end_catch();
    JUMPOUT(0x213DF3E40);
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

uint64_t TPToken_GetResultInfo(unint64_t a1, uint64_t a2, uint64_t a3)
{
  TReentrancyHandler::TReentrancyHandler((TReentrancyHandler *)&v23, "TPToken_GetResultInfo");
  TLocaleHandler::TLocaleHandler((TLocaleHandler *)v22);
  MrecInitModule_sdpres_sdapi();
  if (!g_bInitialized)
  {
    conditionalAssert("Not initialized", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tptoken.cpp", 301, v6, v7);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v20, "Not initialized");
    void *exception = byte_26C4DF190;
    long long v17 = (std::string *)(exception + 1);
    if (SHIBYTE(v21) < 0)
    {
      std::string::__init_copy_ctor_external(v17, (const std::string::value_type *)v20, *((std::string::size_type *)&v20 + 1));
    }
    else
    {
      long long v19 = v20;
      exception[3] = v21;
      *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v19;
    }
    void *exception = &unk_26C4E0430;
    exception[4] = 4;
  }
  uint64_t v8 = verifyTokenizerHandle(a1, "Bad input tokenizer handle");
  if (!a2
    || (v11 = v8, uint64_t v12 = *(void *)(v8 + 96), a2 - 1 >= (unint64_t)((*(void *)(v8 + 104) - v12) >> 3))
    || !*(void *)(v12 + 8 * (a2 - 1)))
  {
    conditionalAssert("Bad input result handle", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tptoken.cpp", 305, v9, v10);
    uint64_t v14 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v20, "Bad input result handle");
    *uint64_t v14 = byte_26C4DF190;
    long long v15 = (std::string *)(v14 + 1);
    if (SHIBYTE(v21) < 0)
    {
      std::string::__init_copy_ctor_external(v15, (const std::string::value_type *)v20, *((std::string::size_type *)&v20 + 1));
    }
    else
    {
      long long v18 = v20;
      v14[3] = v21;
      *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v18;
    }
    *uint64_t v14 = &unk_26C4E0430;
    v14[4] = 3;
  }
  verifyPointerArgument<TPTokenResultInfo>(a3, 0, "Bad output info pointer", v9, v10);
  TTokenizer::getResultInfo(v11, a2, a3);
  MrecInitModule_sdpres_sdapi();
  TLocaleHandler::~TLocaleHandler(v22);
  TReentrancyHandler::ms_bIn = 0;
  return 0;
}

void sub_213DF44F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, locale_t a20)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v21)
  {
LABEL_6:
    MrecInitModule_sdpres_sdapi();
    TLocaleHandler::~TLocaleHandler(&a20);
    TReentrancyHandler::ms_bIn = 0;
    switch(a2)
    {
      case 7:
        v26 = (char *)__cxa_begin_catch(a1);
        v27 = v26 + 8;
        if (v26[31] < 0) {
          v27 = *(unsigned char **)v27;
        }
        handleException(v27, (uint64_t)"TPToken_GetResultInfo", *((void *)v26 + 4), v24, v25);
        break;
      case 6:
        v30 = (char *)__cxa_begin_catch(a1);
        long long v31 = v30 + 8;
        if (v30[31] < 0) {
          long long v31 = *(unsigned char **)v31;
        }
        handleException(v31, (uint64_t)"TPToken_GetResultInfo", 6, v28, v29);
        break;
      case 5:
        v34 = (char *)__cxa_begin_catch(a1);
        char v35 = v34 + 8;
        if (v34[31] < 0) {
          char v35 = *(unsigned char **)v35;
        }
LABEL_17:
        handleException(v35, (uint64_t)"TPToken_GetResultInfo", 2, v32, v33);
        break;
      case 4:
        int v38 = (char *)__cxa_begin_catch(a1);
        uint64_t v39 = v38 + 8;
        if (v38[31] < 0) {
          uint64_t v39 = *(unsigned char **)v39;
        }
        handleException(v39, (uint64_t)"TPToken_GetResultInfo", 11, v36, v37);
        break;
      case 3:
        uint64_t v40 = (char *)__cxa_begin_catch(a1);
        char v35 = v40 + 8;
        if (v40[31] < 0) {
          char v35 = *(unsigned char **)v35;
        }
        goto LABEL_17;
      case 2:
        v41 = __cxa_begin_catch(a1);
        char v42 = (unsigned char *)(*(uint64_t (**)(void *))(*(void *)v41 + 16))(v41);
        handleException(v42, (uint64_t)"TPToken_GetResultInfo", 1, v43, v44);
        break;
      default:
        if (a2 != 1) {
          _Unwind_Resume(a1);
        }
        v45 = __cxa_begin_catch(a1);
        v46 = (unsigned char *)(*(uint64_t (**)(void *))(*(void *)v45 + 16))(v45);
        handleException(v46, (uint64_t)"TPToken_GetResultInfo", 2, v47, v48);
        break;
    }
    __cxa_end_catch();
    JUMPOUT(0x213DF4350);
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

uint64_t verifyPointerArgument<TPTokenResultInfo>(uint64_t result, char a2, char *a3, uint64_t a4, uint64_t a5)
{
  if (!result && (a2 & 1) == 0)
  {
    conditionalAssert(a3, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 279, a4, a5);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v9, a3);
    void *exception = byte_26C4DF190;
    uint64_t v7 = (std::string *)(exception + 1);
    if (SHIBYTE(v10) < 0)
    {
      std::string::__init_copy_ctor_external(v7, (const std::string::value_type *)v9, *((std::string::size_type *)&v9 + 1));
    }
    else
    {
      long long v8 = v9;
      exception[3] = v10;
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    }
    void *exception = &unk_26C4E0430;
    exception[4] = 3;
  }
  return result;
}

void sub_213DF488C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t TPToken_GetResultData(unint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, _DWORD *a6, _DWORD *a7)
{
  TReentrancyHandler::TReentrancyHandler((TReentrancyHandler *)&v41, "TPToken_GetResultData");
  TLocaleHandler::TLocaleHandler((TLocaleHandler *)v40);
  MrecInitModule_sdpres_sdapi();
  if (!g_bInitialized)
  {
    conditionalAssert("Not initialized", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tptoken.cpp", 322, v14, v15);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v38, "Not initialized");
    void *exception = byte_26C4DF190;
    char v35 = (std::string *)(exception + 1);
    if (SHIBYTE(v39) < 0)
    {
      std::string::__init_copy_ctor_external(v35, (const std::string::value_type *)v38, *((std::string::size_type *)&v38 + 1));
    }
    else
    {
      long long v37 = v38;
      exception[3] = v39;
      *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v37;
    }
    void *exception = &unk_26C4E0430;
    exception[4] = 4;
  }
  uint64_t v16 = verifyTokenizerHandle(a1, "Bad input tokenizer handle");
  if (!a2
    || (long long v19 = (void *)v16,
        uint64_t v20 = *(void *)(v16 + 96),
        a2 - 1 >= (unint64_t)((*(void *)(v16 + 104) - v20) >> 3))
    || !*(void *)(v20 + 8 * (a2 - 1)))
  {
    conditionalAssert("Bad input result handle", "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/tptoken.cpp", 326, v17, v18);
    uint64_t v32 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v38, "Bad input result handle");
    *uint64_t v32 = byte_26C4DF190;
    uint64_t v33 = (std::string *)(v32 + 1);
    if (SHIBYTE(v39) < 0)
    {
      std::string::__init_copy_ctor_external(v33, (const std::string::value_type *)v38, *((std::string::size_type *)&v38 + 1));
    }
    else
    {
      long long v36 = v38;
      v32[3] = v39;
      *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v36;
    }
    *uint64_t v32 = &unk_26C4E0430;
    v32[4] = 3;
  }
  TTokenizer::getResultInfo(v16, a2, (uint64_t)&v38);
  if (a3) {
    int v22 = DWORD1(v38);
  }
  else {
    int v22 = 0;
  }
  verifyPointerArgument<TPTokenState,unsigned int>((uint64_t)a3, v22, 1, "Bad output state pointer", v21);
  if (a4) {
    int v24 = v38;
  }
  else {
    int v24 = 0;
  }
  verifyPointerArgument<TPTokenTrans,unsigned int>((uint64_t)a4, v24, 1, "Bad output trans pointer", v23);
  if (a5) {
    int v26 = DWORD2(v38);
  }
  else {
    int v26 = 0;
  }
  verifyPointerArgument<char,unsigned int>((uint64_t)a5, v26, 1, "Bad output spelling buffer", v25);
  if (a6) {
    int v28 = HIDWORD(v38);
  }
  else {
    int v28 = 0;
  }
  verifyPointerArgument<unsigned int,unsigned int>((uint64_t)a6, v28, 1, "Bad output starting state pointer", v27);
  if (a7) {
    int v30 = v39;
  }
  else {
    int v30 = 0;
  }
  verifyPointerArgument<unsigned int,unsigned int>((uint64_t)a7, v30, 1, "Bad output accepting state pointer", v29);
  TTokenizer::getResultData(v19, a2, a3, a4, a5, a6, a7);
  MrecInitModule_sdpres_sdapi();
  TLocaleHandler::~TLocaleHandler(v40);
  TReentrancyHandler::ms_bIn = 0;
  return 0;
}

void sub_213DF4C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, locale_t a20)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v21)
  {
LABEL_6:
    MrecInitModule_sdpres_sdapi();
    TLocaleHandler::~TLocaleHandler(&a20);
    TReentrancyHandler::ms_bIn = 0;
    switch(a2)
    {
      case 7:
        int v26 = (char *)__cxa_begin_catch(a1);
        uint64_t v27 = v26 + 8;
        if (v26[31] < 0) {
          uint64_t v27 = *(unsigned char **)v27;
        }
        handleException(v27, (uint64_t)"TPToken_GetResultData", *((void *)v26 + 4), v24, v25);
        break;
      case 6:
        int v30 = (char *)__cxa_begin_catch(a1);
        long long v31 = v30 + 8;
        if (v30[31] < 0) {
          long long v31 = *(unsigned char **)v31;
        }
        handleException(v31, (uint64_t)"TPToken_GetResultData", 6, v28, v29);
        break;
      case 5:
        v34 = (char *)__cxa_begin_catch(a1);
        char v35 = v34 + 8;
        if (v34[31] < 0) {
          char v35 = *(unsigned char **)v35;
        }
LABEL_17:
        handleException(v35, (uint64_t)"TPToken_GetResultData", 2, v32, v33);
        break;
      case 4:
        long long v38 = (char *)__cxa_begin_catch(a1);
        uint64_t v39 = v38 + 8;
        if (v38[31] < 0) {
          uint64_t v39 = *(unsigned char **)v39;
        }
        handleException(v39, (uint64_t)"TPToken_GetResultData", 11, v36, v37);
        break;
      case 3:
        uint64_t v40 = (char *)__cxa_begin_catch(a1);
        char v35 = v40 + 8;
        if (v40[31] < 0) {
          char v35 = *(unsigned char **)v35;
        }
        goto LABEL_17;
      case 2:
        char v41 = __cxa_begin_catch(a1);
        char v42 = (unsigned char *)(*(uint64_t (**)(void *))(*(void *)v41 + 16))(v41);
        handleException(v42, (uint64_t)"TPToken_GetResultData", 1, v43, v44);
        break;
      default:
        if (a2 != 1) {
          _Unwind_Resume(a1);
        }
        v45 = __cxa_begin_catch(a1);
        v46 = (unsigned char *)(*(uint64_t (**)(void *))(*(void *)v45 + 16))(v45);
        handleException(v46, (uint64_t)"TPToken_GetResultData", 2, v47, v48);
        break;
    }
    __cxa_end_catch();
    JUMPOUT(0x213DF4A54);
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

uint64_t verifyPointerArgument<TPTokenState,unsigned int>(uint64_t result, int a2, int a3, char *a4, uint64_t a5)
{
  if (!result && a2 && a3)
  {
    conditionalAssert(a4, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 259, (uint64_t)a4, a5);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v14, a4);
    void *exception = byte_26C4DF190;
    long long v8 = (std::string *)(exception + 1);
    if (SHIBYTE(v15) < 0)
    {
      std::string::__init_copy_ctor_external(v8, (const std::string::value_type *)v14, *((std::string::size_type *)&v14 + 1));
    }
    else
    {
      long long v12 = v14;
      exception[3] = v15;
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v12;
    }
    void *exception = &unk_26C4E0430;
    exception[4] = 3;
  }
  if (a2) {
    BOOL v5 = result == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5 && (a3 & 1) == 0)
  {
    conditionalAssert(a4, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 260, (uint64_t)a4, a5);
    uint64_t v10 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v14, a4);
    *uint64_t v10 = byte_26C4DF190;
    uint64_t v11 = (std::string *)(v10 + 1);
    if (SHIBYTE(v15) < 0)
    {
      std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)v14, *((std::string::size_type *)&v14 + 1));
    }
    else
    {
      long long v13 = v14;
      v10[3] = v15;
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v13;
    }
    *uint64_t v10 = &unk_26C4E0430;
    v10[4] = 3;
  }
  return result;
}

void sub_213DF5074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v16) {
    __cxa_free_exception(v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t verifyPointerArgument<TPTokenTrans,unsigned int>(uint64_t result, int a2, int a3, char *a4, uint64_t a5)
{
  if (!result && a2 && a3)
  {
    conditionalAssert(a4, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 259, (uint64_t)a4, a5);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v14, a4);
    void *exception = byte_26C4DF190;
    long long v8 = (std::string *)(exception + 1);
    if (SHIBYTE(v15) < 0)
    {
      std::string::__init_copy_ctor_external(v8, (const std::string::value_type *)v14, *((std::string::size_type *)&v14 + 1));
    }
    else
    {
      long long v12 = v14;
      exception[3] = v15;
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v12;
    }
    void *exception = &unk_26C4E0430;
    exception[4] = 3;
  }
  if (a2) {
    BOOL v5 = result == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5 && (a3 & 1) == 0)
  {
    conditionalAssert(a4, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 260, (uint64_t)a4, a5);
    uint64_t v10 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v14, a4);
    *uint64_t v10 = byte_26C4DF190;
    uint64_t v11 = (std::string *)(v10 + 1);
    if (SHIBYTE(v15) < 0)
    {
      std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)v14, *((std::string::size_type *)&v14 + 1));
    }
    else
    {
      long long v13 = v14;
      v10[3] = v15;
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v13;
    }
    *uint64_t v10 = &unk_26C4E0430;
    v10[4] = 3;
  }
  return result;
}

void sub_213DF527C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v16) {
    __cxa_free_exception(v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t verifyPointerArgument<char,unsigned int>(uint64_t result, int a2, int a3, char *a4, uint64_t a5)
{
  if (!result && a2 && a3)
  {
    conditionalAssert(a4, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 259, (uint64_t)a4, a5);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v14, a4);
    void *exception = byte_26C4DF190;
    long long v8 = (std::string *)(exception + 1);
    if (SHIBYTE(v15) < 0)
    {
      std::string::__init_copy_ctor_external(v8, (const std::string::value_type *)v14, *((std::string::size_type *)&v14 + 1));
    }
    else
    {
      long long v12 = v14;
      exception[3] = v15;
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v12;
    }
    void *exception = &unk_26C4E0430;
    exception[4] = 3;
  }
  if (a2) {
    BOOL v5 = result == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5 && (a3 & 1) == 0)
  {
    conditionalAssert(a4, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 260, (uint64_t)a4, a5);
    uint64_t v10 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v14, a4);
    *uint64_t v10 = byte_26C4DF190;
    uint64_t v11 = (std::string *)(v10 + 1);
    if (SHIBYTE(v15) < 0)
    {
      std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)v14, *((std::string::size_type *)&v14 + 1));
    }
    else
    {
      long long v13 = v14;
      v10[3] = v15;
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v13;
    }
    *uint64_t v10 = &unk_26C4E0430;
    v10[4] = 3;
  }
  return result;
}

void sub_213DF5484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v16) {
    __cxa_free_exception(v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t verifyPointerArgument<unsigned int,unsigned int>(uint64_t result, int a2, int a3, char *a4, uint64_t a5)
{
  if (!result && a2 && a3)
  {
    conditionalAssert(a4, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 259, (uint64_t)a4, a5);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v14, a4);
    void *exception = byte_26C4DF190;
    long long v8 = (std::string *)(exception + 1);
    if (SHIBYTE(v15) < 0)
    {
      std::string::__init_copy_ctor_external(v8, (const std::string::value_type *)v14, *((std::string::size_type *)&v14 + 1));
    }
    else
    {
      long long v12 = v14;
      exception[3] = v15;
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v12;
    }
    void *exception = &unk_26C4E0430;
    exception[4] = 3;
  }
  if (a2) {
    BOOL v5 = result == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5 && (a3 & 1) == 0)
  {
    conditionalAssert(a4, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 260, (uint64_t)a4, a5);
    uint64_t v10 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v14, a4);
    *uint64_t v10 = byte_26C4DF190;
    uint64_t v11 = (std::string *)(v10 + 1);
    if (SHIBYTE(v15) < 0)
    {
      std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)v14, *((std::string::size_type *)&v14 + 1));
    }
    else
    {
      long long v13 = v14;
      v10[3] = v15;
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v13;
    }
    *uint64_t v10 = &unk_26C4E0430;
    v10[4] = 3;
  }
  return result;
}

{
  BOOL v5;
  void *exception;
  std::string *v8;
  void *v10;
  std::string *v11;
  long long v12;
  long long v13;
  long long v14;
  uint64_t v15;

  if (!result && a2 && a3)
  {
    conditionalAssert(a4, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 269, (uint64_t)a4, a5);
    exception = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v14, a4);
    void *exception = byte_26C4DF190;
    long long v8 = (std::string *)(exception + 1);
    if (SHIBYTE(v15) < 0)
    {
      std::string::__init_copy_ctor_external(v8, (const std::string::value_type *)v14, *((std::string::size_type *)&v14 + 1));
    }
    else
    {
      long long v12 = v14;
      exception[3] = v15;
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v12;
    }
    void *exception = &unk_26C4E0430;
    exception[4] = 3;
  }
  if (a2) {
    BOOL v5 = result == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5 && (a3 & 1) == 0)
  {
    conditionalAssert(a4, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 270, (uint64_t)a4, a5);
    uint64_t v10 = __cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v14, a4);
    *uint64_t v10 = byte_26C4DF190;
    uint64_t v11 = (std::string *)(v10 + 1);
    if (SHIBYTE(v15) < 0)
    {
      std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)v14, *((std::string::size_type *)&v14 + 1));
    }
    else
    {
      long long v13 = v14;
      v10[3] = v15;
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v13;
    }
    *uint64_t v10 = &unk_26C4E0430;
    v10[4] = 3;
  }
  return result;
}

void sub_213DF568C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v16) {
    __cxa_free_exception(v15);
  }
  _Unwind_Resume(exception_object);
}

void TReentrancyHandler::TReentrancyHandler(TReentrancyHandler *this, const char *a2)
{
  if (TReentrancyHandler::ms_bIn)
  {
    uint64_t CsIn = TReentrancyHandler::getCsIn(this);
    if (*(char *)(CsIn + 23) >= 0) {
      uint64_t v9 = CsIn;
    }
    else {
      uint64_t v9 = *(void *)CsIn;
    }
    tknPrintf("Error: code reentrancy, originally entered in %s and now again in %s.\n", v5, v6, v7, v8, v9, a2);
    std::string::basic_string[abi:ne180100]<0>(v16, &byte_2140B33BB);
    *(void *)__p = byte_26C4DF190;
    if (SHIBYTE(v17) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v16[0], (std::string::size_type)v16[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v16;
      uint64_t v19 = v17;
    }
    *(void *)__p = &unk_26C4E2CE8;
    if (v19 >= 0) {
      long long v12 = &__p[8];
    }
    else {
      long long v12 = *(const char **)&__p[8];
    }
    conditionalAssert(v12, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/dll/api.h", 58, v10, v11);
    *(void *)__p = byte_26C4DF190;
    if (SHIBYTE(v19) < 0) {
      operator delete(*(void **)&__p[8]);
    }
    if (SHIBYTE(v17) < 0) {
      operator delete(v16[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
    void *exception = byte_26C4DF190;
    long long v14 = (std::string *)(exception + 1);
    if ((__p[23] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    }
    else
    {
      long long v15 = *(_OWORD *)__p;
      exception[3] = *(void *)&__p[16];
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
    }
    void *exception = &unk_26C4E2CE8;
  }
  TReentrancyHandler::ms_bIn = 1;
  uint64_t v3 = TReentrancyHandler::getCsIn(this);
  MEMORY[0x216698410](v3, a2);
}

void sub_213DF5920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, void *a19, int a20,__int16 a21,char a22,char a23,int a24,__int16 a25,char a26,char a27)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((v28 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v27);
  goto LABEL_6;
}

uint64_t TReentrancyHandler::getCsIn(TReentrancyHandler *this)
{
  {
    operator new();
  }
  return TReentrancyHandler::getCsIn(void)::s_csIn;
}

void sub_213DF5A04(_Unwind_Exception *a1)
{
}

void TReentrancyException::~TReentrancyException(void **this)
{
  *this = byte_26C4DF190;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = byte_26C4DF190;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }

  JUMPOUT(0x216698730);
}

void TLocaleHandler::TLocaleHandler(TLocaleHandler *this)
{
  *((unsigned char *)this + 8) = 0;
  uint64_t v2 = (_xlocale *)TLocaleHandler::ms_MacLocale;
  if (!TLocaleHandler::ms_MacLocale)
  {
    uint64_t v2 = newlocale(2, "UTF-8", 0);
    TLocaleHandler::ms_MacLocale = (uint64_t)v2;
  }
  *(void *)this = uselocale(v2);
}

void TLocaleHandler::~TLocaleHandler(locale_t *this)
{
  if (!*((unsigned char *)this + 8))
  {
    uselocale(*this);
    *((unsigned char *)this + 8) = 1;
  }
}

void OUTLINED_FUNCTION_0_0()
{
  JUMPOUT(0x216698730);
}

__int32 **TWord::TWord(__int32 **a1, __int32 *a2, __int32 *a3, __int32 *a4, __int32 *a5)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
  a1[4] = 0;
  uint64_t v8 = v10;
  long long v9 = xmmword_214085190;
  char v11 = 1;
  getThirdField(a2, (uint64_t)&v8);
  unint64_t v6 = (unint64_t)a1[4] & 0xFFFFFFFFFFFFFFFCLL;
  if (!*((void *)&v9 + 1)) {
    v6 |= 2uLL;
  }
  a1[4] = (__int32 *)v6;
  if (v11 && v8 != v10 && v8) {
    MEMORY[0x216698730]();
  }
  return a1;
}

void sub_213DF5C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (LOBYTE(STACK[0x418])) {
    TWord::TWord((uint64_t)&a9);
  }
  _Unwind_Resume(a1);
}

__int32 *TWord::getSpokenForm(__int32 **a1, uint64_t a2)
{
  return getThirdField(*a1, a2);
}

BOOL TWord::applyMask(uint64_t a1, _DWORD *a2)
{
  return TLexicon::applyMask(*(void *)(a1 + 8), *(void *)(a1 + 16), a2, (uint64_t *)(a1 + 32));
}

BOOL TLexicon::applyMask(uint64_t a1, unint64_t a2, _DWORD *a3, uint64_t *a4)
{
  BOOL v4 = *a3 != 33;
  BOOL v5 = *a3 == 33;
  if (a2 != -1)
  {
    unint64_t v6 = 0;
    uint64_t v7 = &a3[*a3 == 33];
    while (1)
    {
      int v8 = v7[v6];
      if (v8 != 48) {
        break;
      }
      ++v6;
    }
    if (v8)
    {
      long long v12 = v14;
      long long v13 = xmmword_214085190;
      char v15 = 1;
      TLexicon::getOptionalTagBits(a1, a2, (uint64_t)&v12, a4);
      if (v6 < *((void *)&v13 + 1))
      {
        do
        {
          int v9 = v7[v6];
          if (!v9) {
            break;
          }
          if (v9 != 48 && *(_DWORD *)&v12[4 * v6] == 49)
          {
            if (v15 && v12 != v14) {
              MEMORY[0x216698730](v12, 0x1000C4052888210);
            }
            return v4;
          }
          ++v6;
        }
        while (*((void *)&v13 + 1) != v6);
      }
      if (v15)
      {
        if (v12 != v14 && v12 != 0) {
          MEMORY[0x216698730]();
        }
      }
    }
  }
  return v5;
}

void sub_213DF5DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (LOBYTE(STACK[0x418])) {
    TWord::TWord((uint64_t)&a9);
  }
  _Unwind_Resume(a1);
}

BOOL TLexicon::checkBits(uint64_t a1, unint64_t a2, void *a3, unint64_t a4, uint64_t *a5)
{
  if (a2 == -1) {
    return 1;
  }
  if ((*(unsigned char *)a5 & 4) == 0) {
    TLexicon::getOptionalTagBits(a1, a2, 0, a5);
  }
  if (!a4) {
    return 0;
  }
  if (((unint64_t)*a5 >> *a3)) {
    return 1;
  }
  uint64_t v9 = 1;
  do
  {
    unint64_t v10 = v9;
    if (a4 == v9) {
      break;
    }
    ++v9;
  }
  while ((((unint64_t)*a5 >> a3[v10]) & 1) == 0);
  return v10 < a4;
}

uint64_t TWord::getUnigramScore(TWord *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (v1 == -1) {
    uint64_t v2 = -1;
  }
  else {
    uint64_t v2 = *(void *)(*((void *)this + 1) + 104);
  }
  unsigned int v5 = 0;
  v4[0] = v2;
  v4[1] = v1;
  SDLm_LmScore(0, 0, 0, 0, 0, v4, 1u, (uint64_t)&v5, 1u, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  return v5;
}

void TWord::getCategoryTag(uint64_t a1, void *a2)
{
}

void TLexicon::getCategoryTag(unint64_t *a1, unint64_t a2, void *a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  TBuffer<wchar_t>::assign((uint64_t)a3, dword_21408D048);
  if (a2 != -1)
  {
    unint64_t v6 = a1[49];
    if (v6)
    {
      if (a1[50])
      {
        unint64_t v7 = v6 + 7;
        if (v7 <= 0x807)
        {
          SDWord_GetTagBits(a1[13], a2, 1uLL, v13, v7 >> 3);
          unint64_t v8 = a1[49];
          if (v8)
          {
            unint64_t v9 = 0;
            uint64_t v10 = 0;
            do
            {
              v10 |= ((uint64_t)(v13[v9 >> 3] >> (v9 & 7) << 63) >> 63) & (1 << v9);
              ++v9;
            }
            while (v8 != v9);
          }
          else
          {
            uint64_t v10 = 0;
          }
          TBuffer<wchar_t>::resize((uint64_t)a3, 0);
          TLocaleInfo::multiByteToUnicode((uint64_t)(a1 + 30), (unsigned __int8 *)(a1[52] + v10 + v10 * a1[51]), a1[51], (uint64_t)a3);
          uint64_t v11 = a3[2];
          if (v11)
          {
            unint64_t v12 = 0;
            while (*(_DWORD *)(*a3 + 4 * v12) != 32)
            {
              if (v11 == ++v12) {
                return;
              }
            }
            TBuffer<wchar_t>::resize((uint64_t)a3, v12);
          }
        }
      }
    }
  }
}

void TWord::getOptionalTagBits(uint64_t a1, uint64_t a2)
{
}

void TLexicon::getOptionalTagBits(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (a3)
  {
    TBuffer<wchar_t>::resize(a3, 0);
    unint64_t v8 = *(void *)(a1 + 384);
    if (*(unsigned char *)(a3 + 1048) && *(void *)(a3 + 8) < v8)
    {
      *(void *)(a3 + 8) = v8 + 1;
      operator new[]();
    }
    unint64_t v9 = *(void *)(a3 + 16);
    if (v9 < v8)
    {
      uint64_t v10 = *(void *)(a1 + 384);
      if (*(unsigned char *)(a3 + 1048)
        || ((v11 = *(void *)(a3 + 8), v11 >= v8) ? (uint64_t v10 = *(void *)(a1 + 384)) : (uint64_t v10 = *(void *)(a3 + 8)),
            v9 < v11 && v10 != v9))
      {
        memset_pattern16((void *)(*(void *)a3 + 4 * v9), "0", 4 * (v10 - v9));
      }
    }
    *(void *)(a3 + 16) = v8;
  }
  if (a2 != -1)
  {
    uint64_t v12 = *(void *)(a1 + 384);
    if (v12)
    {
      unint64_t v13 = v12 + 7;
      if (v13 <= 0x807)
      {
        SDWord_GetTagBits(*(void *)(a1 + 104), a2, 2uLL, v19, v13 >> 3);
        if (a3)
        {
          uint64_t v14 = *(void *)(a1 + 384);
          if (v14)
          {
            for (unint64_t i = 0; i != v14; ++i)
            {
              if ((v19[i >> 3] >> (i & 7))) {
                *(_DWORD *)(*(void *)a3 + 4 * i) = 49;
              }
            }
          }
        }
        if (a4)
        {
          uint64_t v16 = 0;
          uint64_t v17 = *a4 | 4;
          do
          {
            uint64_t v18 = v17 & ~(8 << v16);
            v17 |= 8 << v16;
            if (((v19[TWord::ms_pnOTBIndex[v16] >> 3] >> (TWord::ms_pnOTBIndex[v16] & 7)) & 1) == 0) {
              uint64_t v17 = v18;
            }
            *a4 = v17;
            ++v16;
          }
          while (v16 != 5);
        }
      }
    }
  }
}

uint64_t *TWord::getOptionalTagBits(TWord *this)
{
  uint64_t v1 = (uint64_t *)((char *)this + 32);
  if ((*((unsigned char *)this + 32) & 4) == 0) {
    TLexicon::getOptionalTagBits(*((void *)this + 1), *((void *)this + 2), 0, v1);
  }
  return v1;
}

uint64_t TWord::getWrittenForm(__int32 **a1, uint64_t a2)
{
  return TLexicon::getWrittenForm((int)a1, *a1, a2);
}

uint64_t TLexicon::getWrittenForm(int a1, __int32 *__s, uint64_t a3)
{
  unsigned int v5 = wcschr(__s, 92);
  if (v5)
  {
    if (v5 == __s)
    {
      __int32 v6 = __s[1];
      if (v6 == 92 || v6 == 0) {
        unsigned int v5 = __s + 1;
      }
      else {
        unsigned int v5 = __s;
      }
    }
    unint64_t v8 = v5 - __s;
    TBuffer<wchar_t>::resize(a3, 0);
    return TBuffer<wchar_t>::insert(a3, 0, __s, v8);
  }
  else
  {
    return TBuffer<wchar_t>::assign(a3, __s);
  }
}

__int32 *TWord::getWordSense(__int32 **a1, uint64_t a2)
{
  return getSecondField(*a1, a2);
}

uint64_t TWord::getTokenName(__int32 **a1, uint64_t a2)
{
  return TLexicon::getTokenName((int)a1, *a1, a2);
}

uint64_t TLexicon::getTokenName(int a1, __int32 *a2, uint64_t a3)
{
  TLexicon::getWrittenForm(a1, a2, a3);
  __int32 v6 = v8;
  long long v7 = xmmword_214085190;
  char v9 = 1;
  uint64_t result = (uint64_t)getSecondField(a2, (uint64_t)&v6);
  if (*((void *)&v7 + 1))
  {
    TBuffer<wchar_t>::insert(a3, *(void *)(a3 + 16), (int *)&unk_21408CFC4, 1uLL);
    uint64_t result = TBuffer<wchar_t>::operator+=(a3, (uint64_t)&v6);
  }
  if (v9)
  {
    uint64_t result = (uint64_t)v6;
    if (v6 != v8)
    {
      if (v6) {
        return MEMORY[0x216698730]();
      }
    }
  }
  return result;
}

void sub_213DF6498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (LOBYTE(STACK[0x418])) {
    TWord::TWord((uint64_t)&a9);
  }
  _Unwind_Resume(a1);
}

uint64_t TWord::getWordSpec(TWord *this)
{
  if (*((void *)this + 2) == -1) {
    return -1;
  }
  else {
    return *(void *)(*((void *)this + 1) + 104);
  }
}

uint64_t TWord::getHeadClone(uint64_t this)
{
  if ((*(unsigned char *)(this + 32) & 2) == 0) {
    return TLexicon::findHeadClone(*(void **)(this + 8), *(__int32 **)this);
  }
  return this;
}

uint64_t TLexicon::findHeadClone(void *a1, __int32 *a2)
{
  char v9 = (__int32 *)v11;
  long long v10 = xmmword_214085190;
  char v12 = 1;
  TLexicon::getTokenName((int)a1, a2, (uint64_t)&v9);
  if (*((void *)&v10 + 1) >= (unint64_t)v10)
  {
    if (v12)
    {
      int v13 = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v9, *((unint64_t *)&v10 + 1), &v13, 1uLL);
      uint64_t v3 = v9;
      --*((void *)&v10 + 1);
    }
    else
    {
      uint64_t v3 = v9;
      if ((void)v10) {
        v9[(void)v10 - 1] = 0;
      }
    }
  }
  else
  {
    uint64_t v3 = v9;
    v9[*((void *)&v10 + 1)] = 0;
  }
  uint64_t Word = TLexicon::findWord(a1, v3);
  uint64_t v5 = Word;
  if (!Word || (*(unsigned char *)(Word + 32) & 2) == 0)
  {
    if (*((void *)&v10 + 1) >= (unint64_t)v10)
    {
      if (v12)
      {
        int v13 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v9, *((unint64_t *)&v10 + 1), &v13, 1uLL);
        __int32 v6 = v9;
        --*((void *)&v10 + 1);
      }
      else
      {
        __int32 v6 = v9;
        if ((void)v10) {
          v9[(void)v10 - 1] = 0;
        }
      }
    }
    else
    {
      __int32 v6 = v9;
      v9[*((void *)&v10 + 1)] = 0;
    }
    uint64_t v7 = TLexicon::computeClones((uint64_t)a1, v6);
    if (v7) {
      uint64_t v5 = *(void *)(v7 + 24);
    }
    else {
      uint64_t v5 = 0;
    }
  }
  if (v12 && v9 != (__int32 *)v11 && v9) {
    MEMORY[0x216698730]();
  }
  return v5;
}

void sub_213DF6660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (LOBYTE(STACK[0x420]))
  {
    if (a10 != v10 && a10 != 0) {
      MEMORY[0x216698730]();
    }
  }
  _Unwind_Resume(a1);
}

void TWord::getClones(uint64_t a1, uint64_t a2)
{
  std::vector<TItnRule *>::resize(a2, 0);
  uint64_t v25 = (__int32 *)v27;
  long long v26 = xmmword_214085190;
  char v28 = 1;
  TLexicon::getTokenName(v4, *(__int32 **)a1, (uint64_t)&v25);
  uint64_t v5 = *(void *)(a1 + 8);
  if (*((void *)&v26 + 1) >= (unint64_t)v26)
  {
    if (v28)
    {
      v29[0] = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v25, *((unint64_t *)&v26 + 1), v29, 1uLL);
      __int32 v6 = v25;
      --*((void *)&v26 + 1);
    }
    else
    {
      __int32 v6 = v25;
      if ((void)v26) {
        v25[(void)v26 - 1] = 0;
      }
    }
  }
  else
  {
    __int32 v6 = v25;
    v25[*((void *)&v26 + 1)] = 0;
  }
  uint64_t v7 = TLexicon::computeClones(v5, v6);
  uint64_t v8 = v7;
  if (v7)
  {
    std::vector<TPItnTagHandle_fake **>::reserve((void **)a2, *(void *)(v7 + 8) - 1);
    uint64_t v9 = *(void *)(v8 + 8);
    if (v9)
    {
      uint64_t v10 = (uint64_t *)(v8 + 24);
      do
      {
        uint64_t v11 = *v10;
        if (*v10 != a1)
        {
          int v13 = *(void **)(a2 + 8);
          unint64_t v12 = *(void *)(a2 + 16);
          if ((unint64_t)v13 >= v12)
          {
            uint64_t v15 = ((uint64_t)v13 - *(void *)a2) >> 3;
            if ((unint64_t)(v15 + 1) >> 61) {
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v16 = v12 - *(void *)a2;
            uint64_t v17 = v16 >> 2;
            if (v16 >> 2 <= (unint64_t)(v15 + 1)) {
              uint64_t v17 = v15 + 1;
            }
            if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v18 = v17;
            }
            if (v18)
            {
              uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(a2 + 16, v18);
              uint64_t v11 = *v10;
            }
            else
            {
              uint64_t v19 = 0;
            }
            uint64_t v20 = &v19[8 * v15];
            *(void *)uint64_t v20 = v11;
            uint64_t v14 = v20 + 8;
            int v22 = *(char **)a2;
            int v21 = *(char **)(a2 + 8);
            if (v21 != *(char **)a2)
            {
              do
              {
                uint64_t v23 = *((void *)v21 - 1);
                v21 -= 8;
                *((void *)v20 - 1) = v23;
                v20 -= 8;
              }
              while (v21 != v22);
              int v21 = *(char **)a2;
            }
            *(void *)a2 = v20;
            *(void *)(a2 + 8) = v14;
            *(void *)(a2 + 16) = &v19[8 * v18];
            if (v21) {
              operator delete(v21);
            }
          }
          else
          {
            *int v13 = v11;
            uint64_t v14 = v13 + 1;
          }
          *(void *)(a2 + 8) = v14;
          uint64_t v9 = *(void *)(v8 + 8);
        }
        ++v10;
      }
      while (v10 != (uint64_t *)(v8 + 24 + 8 * v9));
    }
  }
  if (v28)
  {
    if (v25 != (__int32 *)v27 && v25 != 0) {
      MEMORY[0x216698730]();
    }
  }
}

void sub_213DF68BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (LOBYTE(STACK[0x418]))
  {
    if (a9 != v9 && a9 != 0) {
      MEMORY[0x216698730]();
    }
  }
  _Unwind_Resume(a1);
}

uint64_t TLexicon::computeClones(uint64_t a1, __int32 *a2)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  ++*(void *)(a1 + 472);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&__p, a2);
  int v4 = std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::find<std::wstring>(a1 + 176, (uint64_t)&__p);
  if (SHIBYTE(v58) < 0) {
    operator delete(__p);
  }
  if ((void *)(a1 + 184) != v4)
  {
    ++*(void *)(a1 + 496);
    return v4[7];
  }
  uint64_t Word = TLexicon::findWord((void *)a1, a2);
  if (Word && (*(unsigned char *)(Word + 32) & 1) != 0)
  {
    uint64_t v5 = 0;
    ++*(void *)(a1 + 496);
    return v5;
  }
  __p = v59;
  long long v58 = xmmword_214085190;
  char v60 = 1;
  getSecondField(a2, (uint64_t)&__p);
  v65 = v67;
  long long v66 = xmmword_214085190;
  char v68 = 1;
  TLocaleInfo::unicodeToMultiByte(a1 + 240, (unsigned int *)a2, (uint64_t)&v65);
  uint64_t v56 = 0;
  v55 = 0;
  int v54 = 0;
  unint64_t v8 = *(void *)(a1 + 104);
  if (*((void *)&v66 + 1) >= (unint64_t)v66)
  {
    if (v68)
    {
      LOBYTE(v47) = 0;
      TBuffer<char>::insert((uint64_t)&v65, *((unint64_t *)&v66 + 1), (char *)&v47, 1uLL);
      --*((void *)&v66 + 1);
    }
    else if ((void)v66)
    {
      v65[(void)v66 - 1] = 0;
    }
  }
  else
  {
    v65[*((void *)&v66 + 1)] = 0;
  }
  if (*((void *)&v58 + 1)) {
    uint64_t v9 = "\\"";
  }
  else {
    uint64_t v9 = "\\\\"";
  }
  SDVoc_GetWords(v8, 0xFFFFFFFFFFFFFFFELL, v65, v9, *(void **)(a1 + 432), *(unsigned int *)(a1 + 424), (unsigned int *)&v56 + 1, (void **)&v55, (unsigned int *)&v56, (void (*)(unint64_t, unsigned int, unsigned int, void *, unsigned int, void **, unsigned int *))callBackMRECArrayReallocator, 0, &v54);
  v52 = 0;
  v51 = 0;
  unint64_t v53 = 0;
  if (HIDWORD(v56))
  {
    unint64_t v14 = 0;
    do
    {
      ++*(void *)(a1 + 512);
      unint64_t v15 = v55[v14];
      uint64_t v16 = TStringParam::get((TStringParam *)(*(void *)(a1 + 336) + 496));
      if (!TLexicon::applyMask(a1, v15, v16, 0))
      {
        if (SDWord_GetName(*(void *)(a1 + 104), v15, (char *)&v64, 0x100u) < 0x101)
        {
          uint64_t v47 = v49;
          long long v48 = xmmword_214085190;
          char v50 = 1;
          if (TLocaleInfo::multiByteToUnicode(a1 + 240, (unsigned __int8 *)&v64, (uint64_t)&v47))
          {
            tknPrintf("Warning: '%s' : Can't convert to Unicode. Ignored.\n", v21, v22, v23, v24, &v64);
          }
          else
          {
            if (*((void *)&v48 + 1) >= (unint64_t)v48)
            {
              if (v50)
              {
                LODWORD(v61[0]) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v47, *((unint64_t *)&v48 + 1), (int *)v61, 1uLL);
                uint64_t v25 = (const __int32 *)v47;
                --*((void *)&v48 + 1);
              }
              else
              {
                uint64_t v25 = (const __int32 *)v47;
                if ((void)v48) {
                  *((_DWORD *)v47 + v48 - 1) = 0;
                }
              }
            }
            else
            {
              uint64_t v25 = (const __int32 *)v47;
              *((_DWORD *)v47 + *((void *)&v48 + 1)) = 0;
            }
            v63[0] = v25;
            v63[1] = 0;
            THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::find(a1 + 200, v63, v61);
            if (!v62 || (uint64_t v26 = *(void *)(v62 + 16)) == 0) {
              operator new[]();
            }
            uint64_t v27 = (char *)v52;
            if ((unint64_t)v52 >= v53)
            {
              int64_t v29 = ((unsigned char *)v52 - (unsigned char *)v51) >> 3;
              if ((unint64_t)(v29 + 1) >> 61) {
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v30 = (uint64_t)(v53 - (void)v51) >> 2;
              if (v30 <= v29 + 1) {
                unint64_t v30 = v29 + 1;
              }
              if (v53 - (unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v10 = v30;
              }
              if (v10) {
                long long v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v53, v10);
              }
              else {
                long long v31 = 0;
              }
              uint64_t v32 = &v31[8 * v29];
              *(void *)uint64_t v32 = v26;
              char v28 = v32 + 8;
              uint64_t v33 = (char *)v52;
              v34 = (char *)v51;
              if (v52 != v51)
              {
                do
                {
                  uint64_t v35 = *((void *)v33 - 1);
                  v33 -= 8;
                  *((void *)v32 - 1) = v35;
                  v32 -= 8;
                }
                while (v33 != v34);
                uint64_t v33 = (char *)v51;
              }
              v51 = v32;
              v52 = v28;
              unint64_t v53 = (unint64_t)&v31[8 * v10];
              if (v33) {
                operator delete(v33);
              }
            }
            else
            {
              *(void *)v52 = v26;
              char v28 = v27 + 8;
            }
            v52 = v28;
          }
          if (v50)
          {
            if (v47 != v49 && v47 != 0) {
              MEMORY[0x216698730]();
            }
          }
        }
        else
        {
          tknPrintf("Warning: The voc contains a >= %llu-byte word name, prefix is '%s'. Ignored.\n", v17, v18, v19, v20, 256, &v64);
        }
      }
      ++v14;
    }
    while (v14 < HIDWORD(v56));
  }
  if (v55 != *(void **)(a1 + 432))
  {
    tknPrintf("Warning: Inefficient head-clone search. Required dynamic allocation of size %llu\n", v10, v11, v12, v13, v56);
    uint64_t v37 = *(void *)(a1 + 432);
    if (v37) {
      MEMORY[0x216698710](v37, 0x80C80B8603338);
    }
    *(void *)(a1 + 432) = v55;
    *(_DWORD *)(a1 + 424) = v56;
  }
  long long v38 = (char *)v51;
  uint64_t v39 = v52;
  if (v51 == v52)
  {
    uint64_t v5 = 0;
    if (!v51) {
      goto LABEL_68;
    }
  }
  else
  {
    uint64_t v40 = *(void *)v51;
    uint64_t v41 = *(void *)(*(void *)v51 + 32);
    *(void *)(*(void *)v51 + 32) = v41 | 1;
    uint64_t v42 = v39 - v38;
    if ((unint64_t)v42 > 8 || (v41 & 2) == 0)
    {
      *(void *)(v40 + 32) = v41 | 3;
      if ((unint64_t)v42 >= 9)
      {
        unint64_t v43 = v42 >> 3;
        if (v43 <= 2) {
          unint64_t v43 = 2;
        }
        unint64_t v44 = v43 - 1;
        v45 = (uint64_t *)(v38 + 8);
        do
        {
          uint64_t v46 = *v45++;
          *(void *)(v46 + 32) |= 1uLL;
          --v44;
        }
        while (v44);
      }
      TWordBlock::create();
    }
    uint64_t v5 = 0;
  }
  v52 = v38;
  operator delete(v38);
LABEL_68:
  if (v68 && v65 != v67 && v65) {
    MEMORY[0x216698730]();
  }
  if (v60 && __p != v59 && __p) {
    MEMORY[0x216698730]();
  }
  return v5;
}

void sub_213DF7008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  uint64_t v25 = (void *)STACK[0x470];
  if (STACK[0x470])
  {
    STACK[0x478] = (unint64_t)v25;
    operator delete(v25);
  }
  if (LOBYTE(STACK[0xB08]))
  {
    unint64_t v26 = STACK[0x9F0];
    if (STACK[0x9F0] != a15)
    {
      if (v26) {
        MEMORY[0x216698730](v26, 0x1000C4077774924);
      }
    }
  }
  if (LOBYTE(STACK[0x8B8]))
  {
    unint64_t v27 = STACK[0x4A0];
    if (STACK[0x4A0] != a16)
    {
      if (v27) {
        MEMORY[0x216698730](v27, 0x1000C4052888210);
      }
    }
  }
  _Unwind_Resume(a1);
}

void TLexicon::getHomophones(void *a1, __int32 *a2, _DWORD *a3, void **a4)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  std::vector<TItnRule *>::resize((uint64_t)a4, 0);
  uint64_t Word = TLexicon::findWord(a1, a2);
  if (Word)
  {
    uint64_t v9 = Word;
    memset(v51, 0, 512);
    unsigned int WordsWithCommonPron = SDWord_GetWordsWithCommonPron(a1[13], *(void *)(Word + 16), v51, 0x100u);
    if (WordsWithCommonPron < 0x101)
    {
      if (!WordsWithCommonPron) {
        return;
      }
      uint64_t v16 = WordsWithCommonPron;
    }
    else
    {
      loggableUnicode((unsigned int *)a2, &__p);
      if (v44 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      tknPrintf("Warning: '%s' : Too many homophones to process.\n", v11, v12, v13, v14, p_p);
      if (SHIBYTE(v44) < 0) {
        operator delete(__p);
      }
      uint64_t v16 = 256;
    }
    for (uint64_t i = 0; i != v16; ++i)
    {
      unint64_t v18 = *((void *)v51 + i);
      if (v18 != *(void *)(v9 + 16) && !TLexicon::applyMask((uint64_t)a1, *((void *)v51 + i), a3, 0))
      {
        uint64_t v19 = TStringParam::get((TStringParam *)(a1[42] + 496));
        if (!TLexicon::applyMask((uint64_t)a1, v18, v19, 0))
        {
          if (SDWord_GetName(a1[13], v18, (char *)v50, 0x100u) < 0x101)
          {
            __p = v45;
            long long v44 = xmmword_214085190;
            char v46 = 1;
            if (TLocaleInfo::multiByteToUnicode((uint64_t)(a1 + 30), v50, (uint64_t)&__p))
            {
              tknPrintf("Warning: '%s' : Can't convert to Unicode. Ignored.\n", v24, v25, v26, v27, v50);
            }
            else
            {
              if (*((void *)&v44 + 1) >= (unint64_t)v44)
              {
                if (v46)
                {
                  LODWORD(v47[0]) = 0;
                  TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v44 + 1), (int *)v47, 1uLL);
                  char v28 = (const __int32 *)__p;
                  --*((void *)&v44 + 1);
                }
                else
                {
                  char v28 = (const __int32 *)__p;
                  if ((void)v44) {
                    *((_DWORD *)__p + v44 - 1) = 0;
                  }
                }
              }
              else
              {
                char v28 = (const __int32 *)__p;
                *((_DWORD *)__p + *((void *)&v44 + 1)) = 0;
              }
              v49[0] = v28;
              v49[1] = 0;
              THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::find((size_t)(a1 + 25), v49, v47);
              if (!v48 || (uint64_t v29 = *(void *)(v48 + 16)) == 0) {
                operator new[]();
              }
              long long v31 = a4[1];
              unint64_t v30 = (unint64_t)a4[2];
              if ((unint64_t)v31 >= v30)
              {
                uint64_t v33 = ((char *)v31 - (unsigned char *)*a4) >> 3;
                if ((unint64_t)(v33 + 1) >> 61) {
                  std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v34 = v30 - (void)*a4;
                uint64_t v35 = v34 >> 2;
                if (v34 >> 2 <= (unint64_t)(v33 + 1)) {
                  uint64_t v35 = v33 + 1;
                }
                if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v36 = v35;
                }
                if (v36) {
                  uint64_t v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(a4 + 2), v36);
                }
                else {
                  uint64_t v37 = 0;
                }
                long long v38 = &v37[8 * v33];
                *(void *)long long v38 = v29;
                uint64_t v32 = v38 + 8;
                uint64_t v40 = (char *)*a4;
                uint64_t v39 = (char *)a4[1];
                if (v39 != *a4)
                {
                  do
                  {
                    uint64_t v41 = *((void *)v39 - 1);
                    v39 -= 8;
                    *((void *)v38 - 1) = v41;
                    v38 -= 8;
                  }
                  while (v39 != v40);
                  uint64_t v39 = (char *)*a4;
                }
                *a4 = v38;
                a4[1] = v32;
                a4[2] = &v37[8 * v36];
                if (v39) {
                  operator delete(v39);
                }
              }
              else
              {
                void *v31 = v29;
                uint64_t v32 = v31 + 1;
              }
              a4[1] = v32;
            }
            if (v46)
            {
              if (__p != v45 && __p != 0) {
                MEMORY[0x216698730]();
              }
            }
          }
          else
          {
            tknPrintf("Warning: The voc contains a >= %llu-byte word name, prefix is '%s'. Ignored.\n", v20, v21, v22, v23, 256, v50);
          }
        }
      }
    }
  }
}

void sub_213DF7614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *TLexiconScore::TLexiconScore(uint64_t *a1, const __int32 *a2, unsigned int *a3, size_t a4, size_t a5, uint64_t a6)
{
  *((unsigned char *)a1 + 8) = 0;
  *a1 = 0;
  size_t v12 = wcslen((const __int32 *)a3);
  if (wcsncmp(a2, (const __int32 *)a3, v12))
  {
    size_t v39 = a4;
    if (*a2)
    {
      uint64_t v13 = (unsigned int *)a2;
      uint64_t v14 = a3;
      while (1)
      {
        if (!*v14) {
          goto LABEL_77;
        }
        unint64_t v49 = 0;
        TCollation::collateNext((void *)(a6 + 16), v13, &v49);
        unint64_t v48 = 0;
        TCollation::collateNext((void *)(a6 + 16), v14, &v48);
        if (v49 != v48
          || (uint64_t v15 = TLocaleInfo::removeDiacritics(a6, *v13),
              int v16 = TLocaleInfo::toLower(a6, v15),
              uint64_t v17 = TLocaleInfo::removeDiacritics(a6, *v14),
              v16 != TLocaleInfo::toLower(a6, v17)))
        {
          ++*((unsigned char *)a1 + 8);
        }
        signed int v18 = *v13;
        {
          operator new();
        }
        if (TLocaleInfo::isAlpha(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v18))
        {
          signed int v19 = *v14;
          {
            operator new();
          }
          if (TLocaleInfo::isAlpha(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v19)) {
            break;
          }
        }
LABEL_59:
        v13 += v49;
        v14 += v48;
        if (!*v13) {
          goto LABEL_77;
        }
      }
      int v20 = *v13;
      {
        operator new();
      }
      if (!TLocaleInfo::isLower(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v20)) {
        goto LABEL_18;
      }
      int v21 = *v14;
      {
        operator new();
      }
      if (TLocaleInfo::isUpper(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v21))
      {
        uint64_t v22 = *a1;
        if (v14 == a3) {
          uint64_t v23 = v22 | 1;
        }
        else {
          uint64_t v23 = v22 | 4;
        }
      }
      else
      {
LABEL_18:
        int v24 = *v13;
        {
          operator new();
        }
        if (!TLocaleInfo::isUpper(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v24)) {
          goto LABEL_27;
        }
        int v25 = *v14;
        {
          operator new();
        }
        if (!TLocaleInfo::isLower(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v25))
        {
LABEL_27:
          long long v44 = v46;
          long long v45 = xmmword_214085190;
          char v47 = 1;
          uint64_t v40 = v42;
          long long v41 = xmmword_214085190;
          char v43 = 1;
          TLocaleInfo::decomposeCharacter(a6, *v13, (uint64_t *)&v44);
          TLocaleInfo::decomposeCharacter(a6, *v14, (uint64_t *)&v40);
          if (*((void *)&v45 + 1) >= (unint64_t)v45)
          {
            if (v47)
            {
              v50[0] = 0;
              TBuffer<wchar_t>::insert((uint64_t)&v44, *((unint64_t *)&v45 + 1), v50, 1uLL);
              uint64_t v27 = (uint64_t)v44;
              --*((void *)&v45 + 1);
            }
            else
            {
              uint64_t v27 = (uint64_t)v44;
              if ((void)v45) {
                *(_DWORD *)&v44[4 * v45 - 4] = 0;
              }
            }
          }
          else
          {
            uint64_t v27 = (uint64_t)v44;
            *(_DWORD *)&v44[4 * *((void *)&v45 + 1)] = 0;
          }
          if (*((void *)&v41 + 1) >= (unint64_t)v41)
          {
            if (v43)
            {
              v50[0] = 0;
              TBuffer<wchar_t>::insert((uint64_t)&v40, *((unint64_t *)&v41 + 1), v50, 1uLL);
              uint64_t v28 = (uint64_t)v40;
              --*((void *)&v41 + 1);
            }
            else
            {
              uint64_t v28 = (uint64_t)v40;
              if ((void)v41) {
                *(_DWORD *)&v40[4 * v41 - 4] = 0;
              }
            }
          }
          else
          {
            uint64_t v28 = (uint64_t)v40;
            *(_DWORD *)&v40[4 * *((void *)&v41 + 1)] = 0;
          }
          if (!wcscmp((const __int32 *)(v27 + 4), (const __int32 *)(v28 + 4))) {
            goto LABEL_51;
          }
          int v29 = *v13;
          {
            operator new();
          }
          if (TLocaleInfo::isUpper(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v29))
          {
            if (*((void *)&v45 + 1) < 2uLL) {
              goto LABEL_51;
            }
            int v30 = *v14;
            {
              operator new();
            }
            char isLower = TLocaleInfo::isLower(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v30);
            char v32 = *((void *)&v41 + 1) > 1uLL ? 1 : isLower;
            if ((v32 & 1) == 0) {
              goto LABEL_51;
            }
            uint64_t v33 = 32;
          }
          else
          {
            uint64_t v33 = 16;
          }
          *a1 |= v33;
LABEL_51:
          if (v43 && v40 != v42 && v40) {
            MEMORY[0x216698730]();
          }
          if (v47 && v44 != v46 && v44) {
            MEMORY[0x216698730]();
          }
          goto LABEL_59;
        }
        uint64_t v26 = *a1;
        if (v13 == (unsigned int *)a2) {
          uint64_t v23 = v26 | 2;
        }
        else {
          uint64_t v23 = v26 | 8;
        }
      }
      *a1 = v23;
      goto LABEL_27;
    }
LABEL_77:
    size_t v34 = wcslen((const __int32 *)a3);
    uint64_t v35 = *a1;
    if ((*a1 & 5) != 0 && v34 < a5) {
      v35 |= 0x40uLL;
    }
    BOOL v37 = (v35 & 0x30) != 0 && v34 < v39;
    if ((*a1 & 5) != 0 && v34 < a5 || v37)
    {
      if (v37) {
        v35 |= 0x80uLL;
      }
      *a1 = v35;
    }
  }
  return a1;
}

void sub_213DF7D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  MEMORY[0x216698730](a10, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x458]) && a17 != a15 && a17) {
    MEMORY[0x216698730]();
  }
  if (LOBYTE(STACK[0x878]))
  {
    unint64_t v18 = STACK[0x460];
    if (STACK[0x460] != a16)
    {
      if (v18) {
        MEMORY[0x216698730](v18, 0x1000C4052888210);
      }
    }
  }
  _Unwind_Resume(a1);
}

uint64_t TCollation::collateNext(void *a1, unsigned int *a2, unint64_t *a3)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t result = *a2;
  BOOL v7 = v4 == v5 || result == 0;
  if (!v7 && a2[1]) {
    return TCollation::collateCharSlow((uint64_t)a1, a2, a3);
  }
  *a3 = 1;
  uint64_t v8 = a1[2];
  if (v8)
  {
    if ((unint64_t)(int)result < 0x10000) {
      return *(unsigned int *)(v8 + 4 * (int)result);
    }
  }
  return result;
}

void TLexiconParamManager::TLexiconParamManager(TLexiconParamManager *this, TLexicon *a2)
{
  TParamManager::TParamManager(this, 1, (TLexicon *)((char *)a2 + 240));
  *uint64_t v3 = &unk_26C4E2CB8;
  uint64_t v4 = (TParam *)(v3 + 18);
  TIntParam::TIntParam((TIntParam *)(v3 + 18), (uint64_t)&unk_214089B08, (uint64_t)&unk_214089B64, 256, 2, 4, 4, (uint64_t)&unk_214089F54, (uint64_t)&unk_214089F8C);
  TStringParam::TStringParam((char *)this + 496, &unk_214089F90, &unk_214089FC8, 0, &unk_21408A37C, &unk_21408A494, &unk_214089F8C);
  TIntParam::TIntParam((TLexiconParamManager *)((char *)this + 1872), (uint64_t)&unk_21408A4CC, (uint64_t)&unk_21408A558, 0, 1, 256, 4, (uint64_t)&unk_21408A494, (uint64_t)&unk_21408ACE4);
  TIntParam::TIntParam((TLexiconParamManager *)((char *)this + 2224), (uint64_t)&unk_21408AD24, (uint64_t)&unk_21408ADA8, 0, 1, 256, 4, (uint64_t)&unk_21408A494, (uint64_t)&unk_21408ACE4);
  TIntParam::TIntParam((TLexiconParamManager *)((char *)this + 2576), (uint64_t)&unk_21408B5C8, (uint64_t)&unk_21408B670, 0, 0, 0x7FFFFFFF, 2000, (uint64_t)&unk_21408A494, (uint64_t)&unk_214089F8C);
  TIntParam::TIntParam((TLexiconParamManager *)((char *)this + 2928), (uint64_t)&unk_21408B7E0, (uint64_t)&unk_21408B890, 0, 0, 0x7FFFFFFF, 5000, (uint64_t)&unk_21408A494, (uint64_t)&unk_214089F8C);
  TStringParam::TStringParam((char *)this + 3280, &unk_21408BA9C, &unk_21408BAD0, 256, &unk_214089F8C, &unk_21408BBEC, &unk_214089F8C);
  TStringParam::TStringParam((char *)this + 4656, &unk_21408BC24, &unk_21408BC54, 0, &unk_214089F8C, &unk_21408BD74, &unk_214089F8C);
  TStringParam::TStringParam((char *)this + 6032, &unk_21408BDAC, &unk_21408BDE8, 0, &unk_214089F8C, &unk_21408BD74, &unk_214089F8C);
  TStringParam::TStringParam((char *)this + 7408, &unk_21408BF10, &unk_21408BF58, 0, &unk_214089F8C, &unk_21408BD74, &unk_214089F8C);
  TStringParam::TStringParam((char *)this + 8784, &unk_21408C098);
  TStringParam::TStringParam((char *)this + 10160, &unk_21408C0F8, &unk_21408C140, 0, &unk_214089F8C, &unk_21408BD74, &unk_214089F8C);
  TStringParam::TStringParam((char *)this + 11536, &unk_21408C1E0, &unk_21408C224, 0, &unk_214089F8C, &unk_21408BD74, &unk_214089F8C);
  TStringParam::TStringParam((char *)this + 12912, &unk_21408C350, &unk_21408C3AC, 0, &unk_214089F8C, &unk_21408BD74, &unk_214089F8C);
  TStringParam::TStringParam((char *)this + 14288, &unk_21408C464, &unk_21408C4BC, 0, &unk_214089F8C, &unk_21408BD74, &unk_214089F8C);
  TStringParam::TStringParam((char *)this + 15664, &unk_21408C5E8);
  TStringParam::TStringParam((char *)this + 17040, &unk_21408C640, &unk_21408C678, 0, &unk_214089F8C, &unk_21408BD74, &unk_214089F8C);
  TStringParam::TStringParam((char *)this + 18416, &unk_21408C780, &unk_21408C7B4, 0, &unk_214089F8C, &unk_21408BD74, &unk_214089F8C);
  TStringParam::TStringParam((char *)this + 19792, &unk_21408C820, &unk_21408C854, 0, &unk_214089F8C, &unk_21408BD74, &unk_214089F8C);
  TIntParam::TIntParam((TLexiconParamManager *)((char *)this + 21168), (uint64_t)&unk_21408C8C0, (uint64_t)&unk_21408C904, 0, 0, 99, 29, (uint64_t)&unk_21408BD74, (uint64_t)&unk_214089F8C);
  TBoolParam::TBoolParam((uint64_t)this + 21520, (uint64_t)&unk_21408CB94, (uint64_t)&unk_21408CBE0, 0, 0, (uint64_t)&unk_21408A494, (uint64_t)&unk_214089F8C);
  TParamManager::add(this, v4);
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 496));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 1872));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 2224));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 2576));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 2928));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 3280));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 4656));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 6032));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 7408));
  MEMORY[0x216698480]((char *)this + 8824, &unk_21408CC48);
  MEMORY[0x216698480]((char *)this + 8848, &unk_21408BD74);
  MEMORY[0x216698480]((char *)this + 8872, &unk_214089F8C);
  std::vector<std::wstring>::vector(&v13, 4uLL);
  std::vector<std::wstring>::vector(&v12, 4uLL);
  uint64_t v5 = 0;
  __int32 v6 = (const __int32 *)&unk_21408CD40;
  do
  {
    MEMORY[0x216698480](&v13.__begin_[v5], v6);
    v6 += wcslen(v6) + 1;
    ++v5;
  }
  while (v5 != 4);
  TStringParam::setAllowables((uint64_t)this + 8784, (uint64_t)&v13, 0, 0);
  TStringParam::setOriginal((void *)this + 1098, 0, dword_21408CD9C);
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 8784));
  v14[0] = (void **)&v12;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](v14);
  v12.__begin_ = (std::vector<std::wstring>::pointer)&v13;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 10160));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 11536));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 12912));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 14288));
  MEMORY[0x216698480]((char *)this + 15704, &unk_21408CDB0);
  MEMORY[0x216698480]((char *)this + 15728, &unk_21408CE98);
  MEMORY[0x216698480]((char *)this + 15752, &unk_214089F8C);
  std::vector<std::wstring>::vector(&v13, 3uLL);
  std::vector<std::wstring>::vector(&v12, 3uLL);
  uint64_t v7 = 0;
  uint64_t v8 = (const __int32 *)&unk_21408CED8;
  uint64_t v9 = (const __int32 *)&unk_21408CF70;
  do
  {
    MEMORY[0x216698480](&v13.__begin_[v7], v8);
    if (v9)
    {
      MEMORY[0x216698480](&v12.__begin_[v7], v9);
      v9 += wcslen(v9) + 1;
    }
    v8 += wcslen(v8) + 1;
    ++v7;
  }
  while (v7 != 3);
  if (v9) {
    unint64_t v10 = &v12;
  }
  else {
    unint64_t v10 = 0;
  }
  TStringParam::setAllowables((uint64_t)this + 15664, (uint64_t)&v13, (uint64_t)v10, 0);
  TStringParam::setOriginal((void *)this + 1958, 0, dword_21408CF8C);
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 15664));
  v14[0] = (void **)&v12;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](v14);
  v12.__begin_ = (std::vector<std::wstring>::pointer)&v13;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 17040));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 18416));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 19792));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 21168));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 21520));
  *((void *)this + 2721) = a2;
}

void sub_213DF8658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18, void **a19, void **a20,void **a21,void **a22,void **a23,void **a24,void **a25,void **a26,uint64_t a27)
{
  a27 = v34 - 120;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  TBoolParam::~TBoolParam(v32);
  TParam::~TParam(v31);
  TStringParam::~TStringParam(v30);
  TStringParam::~TStringParam(v28);
  TStringParam::~TStringParam(a13);
  TStringParam::~TStringParam(v33);
  TStringParam::~TStringParam(a14);
  TStringParam::~TStringParam(a15);
  TStringParam::~TStringParam(a16);
  TStringParam::~TStringParam(a17);
  TStringParam::~TStringParam(v29);
  TStringParam::~TStringParam(a18);
  TStringParam::~TStringParam(a19);
  TStringParam::~TStringParam(a20);
  TStringParam::~TStringParam(a21);
  TParam::~TParam(a22);
  TParam::~TParam(a23);
  TParam::~TParam(a24);
  TParam::~TParam(a25);
  TStringParam::~TStringParam(a26);
  TParam::~TParam(a11);
  TParamManager::~TParamManager(v27);
  _Unwind_Resume(a1);
}

void TParamManager::TParamManager(TParamManager *this, char a2, const TLocaleInfo *a3)
{
  *((void *)this + 3) = 0;
  *(void *)this = &unk_26C4E0450;
  *((void *)this + 1) = -1;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 6) = (char *)this + 56;
  *((void *)this + 9) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 12) = (char *)this + 104;
  *((void *)this + 14) = 0;
  *((void *)this + 16) = a3;
  *((unsigned char *)this + 16) = a2;
  TParamManager::newConfig((uint64_t)this, (__int32 *)"H", -1);
  TParamManager::newConfig((uint64_t)this, (__int32 *)"R", 0);
  *((void *)this + 17) = -1;
  Registry = (void *)TRegisterable<TParamManager>::getRegistry();
  *((void *)this + 1) = TBaseRegistry<TLatticeProcessor *>::registerInstance(Registry, (uint64_t)this);
}

void sub_213DF88F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v8 = v5;
  std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::destroy(v4, *v7);
  std::vector<std::pair<unsigned long,std::wstring>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy(v3, *v6);
  unint64_t v10 = *v8;
  if (*v8)
  {
    v2[4] = v10;
    operator delete(v10);
  }
  TRegisterable<TParamManager>::~TRegisterable(v2);
  _Unwind_Resume(a1);
}

char *TLexiconParamManager::notifyChange(char *this, const TParam *a2)
{
  if (this + 4656 == (char *)a2)
  {
    uint64_t v2 = *((void *)this + 2721);
    this = TStringParam::get(a2);
    *(void *)(v2 + 248) = this;
  }
  return this;
}

void TLexicon::TLexicon(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_26C4E5388;
  *(void *)(a1 + 8) = -1;
  TAllocator::TAllocator((TAllocator *)(a1 + 16), 2048);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(unsigned char *)(a1 + 170) = 1;
  *(void *)(a1 + 136) = &unk_26C4E5348;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(unsigned char *)(a1 + 234) = 1;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = &unk_26C4E5308;
  TLocaleInfo::TLocaleInfo((TLocaleInfo *)(a1 + 240));
  *(void *)(a1 + 104) = a3;
  operator new();
}

void sub_213DF9708(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, TAllocator *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *__p,void *a63)
{
  if (a67 < 0)
  {
    operator delete(__p);
    if ((v72 & 1) == 0)
    {
LABEL_6:
      if (a26 < 0) {
        operator delete(a21);
      }
      TEnvManager::~TEnvManager(&a45);
      if (a2 == 1)
      {
        __cxa_begin_catch(a1);
        v75 = *(TDataSaver **)(v67 + 352);
        if (v75)
        {
          TDataSaver::~TDataSaver(v75);
          MEMORY[0x216698730]();
        }
        uint64_t v76 = *(void *)(v67 + 336);
        if (v76) {
          (*(void (**)(uint64_t))(*(void *)v76 + 8))(v76);
        }
        uint64_t v77 = *(void *)(v67 + 344);
        if (v77) {
          (*(void (**)(uint64_t))(*(void *)v77 + 8))(v77);
        }
        uint64_t v78 = *(void *)(v67 + 416);
        if (v78) {
          MEMORY[0x216698710](v78, 0x1000C8077774924);
        }
        uint64_t v79 = *(void *)(v67 + 432);
        if (v79) {
          MEMORY[0x216698710](v79, 0x80C80B8603338);
        }
        uint64_t v80 = *(void *)(v67 + 440);
        if (v80) {
          MEMORY[0x216698710](v80, 0x80C80B8603338);
        }
        __cxa_rethrow();
      }
      TCollation::~TCollation((TCollation *)(v67 + 256));
      THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::~THashBase(v70);
      std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::destroy(a14, *v68);
      THashBase<std::pair<wchar_t * const,TWordBlock *>,THashMapCompare<std::pair<wchar_t * const,TWordBlock *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t * const,TWordBlock *>,THash<wchar_t const*>>>::~THashBase(a17);
      v81 = *a15;
      if (*a15)
      {
        *(void *)(v67 + 120) = v81;
        operator delete(v81);
      }
      if (*(char *)(v67 + 95) < 0) {
        operator delete(*v69);
      }
      TAllocator::clear(a16);
      TRegisterable<TLexicon>::~TRegisterable((void *)v67);
      _Unwind_Resume(a1);
    }
  }
  else if (!v72)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v71);
  goto LABEL_6;
}

void sub_213DF99DC()
{
}

void sub_213DF99E8()
{
}

void sub_213DF9A4C(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x213DF9A58);
  }
  __clang_call_terminate(a1);
}

void TLexicon::overrideCollation(TLexicon *this)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  uint64_t v2 = (uint64_t *)*((void *)this + 14);
  uint64_t v3 = (uint64_t *)*((void *)this + 15);
  if (v3 == v2)
  {
    uint64_t v2 = (uint64_t *)*((void *)this + 15);
  }
  else
  {
    unint64_t v4 = 0;
    uint64_t v5 = 1;
    do
    {
      uint64_t v6 = v2[v5];
      if (v6)
      {
        MEMORY[0x216698710](v6, 0x1000C8052888210);
        uint64_t v2 = (uint64_t *)*((void *)this + 14);
        uint64_t v3 = (uint64_t *)*((void *)this + 15);
      }
      ++v4;
      v5 += 2;
    }
    while (v4 < ((char *)v3 - (char *)v2) >> 4);
  }
  *((void *)this + 15) = v2;
  unint64_t v7 = *((void *)this + 32);
  uint64_t v8 = (unsigned int *)*((void *)this + 33);
  uint64_t v40 = (__int32 *)v42;
  long long v41 = xmmword_214085190;
  char v43 = 1;
  __s = v47;
  long long v46 = xmmword_214085190;
  char v48 = 1;
  memset(&v39, 0, sizeof(v39));
  uint64_t v9 = (uint64_t)v2;
  unint64_t v34 = v7;
  if (v7)
  {
    unint64_t v35 = 1;
    do
    {
      TBuffer<wchar_t>::resize((uint64_t)&v40, 0);
      std::vector<std::string>::resize(&v39, 0);
      unint64_t v36 = v8;
      if (*v8)
      {
        do
        {
          TBuffer<char>::resize((uint64_t)&__s, 0);
          TLocaleInfo::unicodeToMultiByte((uint64_t)this + 240, v8, (uint64_t)&__s);
          std::vector<std::string>::pointer begin = v39.__begin_;
          if (v39.__end_ == v39.__begin_) {
            goto LABEL_27;
          }
          uint64_t v11 = 0;
          unint64_t v12 = 1;
          do
          {
            std::vector<std::wstring> v13 = (CharInfo *)&begin[v11];
            if (SHIBYTE(begin[v11].__r_.__value_.__r.__words[2]) < 0) {
              std::vector<std::wstring> v13 = *(CharInfo **)v13;
            }
            unint64_t v15 = *((void *)this + 12);
            unint64_t v14 = *((void *)this + 13);
            if (*((void *)&v46 + 1) >= (unint64_t)v46)
            {
              if (v48)
              {
                LOBYTE(__v.__first_) = 0;
                TBuffer<char>::insert((uint64_t)&__s, *((unint64_t *)&v46 + 1), (char *)&__v, 1uLL);
                --*((void *)&v46 + 1);
              }
              else if ((void)v46)
              {
                __s[(void)v46 - 1] = 0;
              }
            }
            else
            {
              __s[*((void *)&v46 + 1)] = 0;
            }
            int v16 = SDColl_StringCompare(v14, v15, v13, (CharInfo *)__s);
            std::vector<std::string>::pointer begin = v39.__begin_;
            BOOL v17 = v12++ >= 0xAAAAAAAAAAAAAAABLL * (((char *)v39.__end_ - (char *)v39.__begin_) >> 3);
            ++v11;
          }
          while (!v17 && v16 != 0);
          if (v16)
          {
LABEL_27:
            uint64_t v19 = 0;
            while (v8[v19++])
              ;
            TBuffer<wchar_t>::insert((uint64_t)&v40, *((unint64_t *)&v41 + 1), (int *)v8, v19 - 1);
            LODWORD(__v.__first_) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v40, *((unint64_t *)&v41 + 1), (int *)&__v, 1uLL);
            if (*((void *)&v46 + 1) >= (unint64_t)v46)
            {
              if (v48)
              {
                LOBYTE(__v.__first_) = 0;
                TBuffer<char>::insert((uint64_t)&__s, *((unint64_t *)&v46 + 1), (char *)&__v, 1uLL);
                --*((void *)&v46 + 1);
              }
              else if ((void)v46)
              {
                __s[(void)v46 - 1] = 0;
              }
            }
            else
            {
              __s[*((void *)&v46 + 1)] = 0;
            }
            std::string::basic_string[abi:ne180100]<0>(__p, __s);
            std::vector<std::string>::pointer end = v39.__end_;
            if (v39.__end_ >= v39.__end_cap_.__value_)
            {
              unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * (((char *)v39.__end_ - (char *)v39.__begin_) >> 3);
              unint64_t v24 = v23 + 1;
              if (v23 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * (((char *)v39.__end_cap_.__value_ - (char *)v39.__begin_) >> 3) > v24) {
                unint64_t v24 = 0x5555555555555556 * (((char *)v39.__end_cap_.__value_ - (char *)v39.__begin_) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v39.__end_cap_.__value_ - (char *)v39.__begin_) >> 3) >= 0x555555555555555) {
                unint64_t v25 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v25 = v24;
              }
              __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v39.__end_cap_;
              if (v25) {
                uint64_t v26 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)&v39.__end_cap_, v25);
              }
              else {
                uint64_t v26 = 0;
              }
              uint64_t v27 = v26 + v23;
              __v.__first_ = v26;
              __v.__begin_ = v27;
              __v.__end_cap_.__value_ = &v26[v25];
              long long v28 = *(_OWORD *)__p;
              v27->__r_.__value_.__r.__words[2] = v38;
              *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v28;
              __p[1] = 0;
              std::string::size_type v38 = 0;
              __p[0] = 0;
              __v.__end_ = v27 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&v39, &__v);
              int v29 = v39.__end_;
              std::__split_buffer<std::wstring>::~__split_buffer(&__v);
              v39.__end_ = v29;
              if (SHIBYTE(v38) < 0) {
                operator delete(__p[0]);
              }
            }
            else
            {
              long long v22 = *(_OWORD *)__p;
              v39.__end_->__r_.__value_.__r.__words[2] = v38;
              *(_OWORD *)&end->__r_.__value_.__l.__data_ = v22;
              v39.__end_ = end + 1;
            }
          }
          int v30 = &v8[wcslen((const __int32 *)v8)];
          unsigned int v31 = v30[1];
          uint64_t v8 = v30 + 1;
        }
        while (v31);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v39.__end_ - (char *)v39.__begin_) >> 3) >= 2)
      {
        LODWORD(__v.__first_) = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v40, *((unint64_t *)&v41 + 1), (int *)&__v, 1uLL);
        uint64_t v8 = v36;
        if (*v36) {
          operator new[]();
        }
      }
      ++v8;
      ++v35;
    }
    while (v35 <= v34);
    uint64_t v9 = *((void *)this + 14);
    uint64_t v2 = (uint64_t *)*((void *)this + 15);
  }
  unint64_t v32 = 126 - 2 * __clz(((uint64_t)v2 - v9) >> 4);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)sortByFirst;
  if (v2 == (uint64_t *)v9) {
    uint64_t v33 = 0;
  }
  else {
    uint64_t v33 = v32;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*,false>(v9, v2, (uint64_t (**)(uint64_t *, uint64_t *))&__v, v33, 1);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v39;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  if (v48 && __s != v47 && __s) {
    MEMORY[0x216698730]();
  }
  if (v43 && v40 != (__int32 *)v42)
  {
    if (v40) {
      MEMORY[0x216698730]();
    }
  }
}

void sub_213DFA0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  __p = &a19;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (LOBYTE(STACK[0x5C8]))
  {
    if (STACK[0x4B0] != a9 && STACK[0x4B0] != 0) {
      MEMORY[0x216698730]();
    }
  }
  if (LOBYTE(STACK[0x480]) && a22 != a10)
  {
    if (a22) {
      MEMORY[0x216698730]();
    }
  }
  _Unwind_Resume(a1);
}

void *TLexicon::validateLexicon(TLexicon *this)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  unsigned int v25 = 0;
  unsigned int v24 = 0;
  unint64_t v23 = 0;
  int v22 = 0;
  SDVoc_GetWords(*((void *)this + 13), 0xFFFFFFFFFFFFFFFFLL, &byte_2140B33BB, &byte_2140B33BB, 0, 0, &v25, (void **)&v23, &v24, (void (*)(unint64_t, unsigned int, unsigned int, void *, unsigned int, void **, unsigned int *))callBackMRECArrayReallocator, 0, &v22);
  uint64_t result = v23;
  if (v23)
  {
    if (!v25) {
      return (void *)MEMORY[0x216698710]();
    }
    for (unint64_t i = 0; i < v25; ++i)
    {
      unint64_t v4 = v23[i];
      uint64_t v5 = TStringParam::get((TStringParam *)(*((void *)this + 42) + 496));
      if (!TLexicon::applyMask((uint64_t)this, v4, v5, 0))
      {
        if (SDWord_GetName(*((void *)this + 13), v4, (char *)v27, 0x100u) < 0x101)
        {
          unint64_t v18 = (int *)v20;
          long long v19 = xmmword_214085190;
          char v21 = 1;
          char v14 = TLocaleInfo::multiByteToUnicode((uint64_t)this + 240, v27, (uint64_t)&v18);
          unint64_t v15 = "Warning: '%s' : Can't convert to Unicode.\n";
          if (v14) {
            goto LABEL_15;
          }
          if (*((void *)&v19 + 1) >= (unint64_t)v19)
          {
            if (v21)
            {
              int v26 = 0;
              TBuffer<wchar_t>::insert((uint64_t)&v18, *((unint64_t *)&v19 + 1), &v26, 1uLL);
              int v16 = v18;
              --*((void *)&v19 + 1);
            }
            else
            {
              int v16 = v18;
              if ((void)v19) {
                v18[(void)v19 - 1] = 0;
              }
            }
          }
          else
          {
            int v16 = v18;
            v18[*((void *)&v19 + 1)] = 0;
          }
          int v17 = TLexicon::checkName((uint64_t)this, v16, 0, 0xFFFFFFFFFFFFFFFFLL);
          unint64_t v15 = "Warning: '%s' : Invalid word found in voc.\n";
          if (v17) {
LABEL_15:
          }
            tknPrintf(v15, v10, v11, v12, v13, v27);
          if (v21 && v18 != (int *)v20)
          {
            if (v18) {
              MEMORY[0x216698730]();
            }
          }
        }
        else
        {
          tknPrintf("Warning: The voc contains a >= %llu-byte word name, prefix is '%s'.\n", v6, v7, v8, v9, 256, v27);
        }
      }
    }
    uint64_t result = v23;
    if (v23) {
      return (void *)MEMORY[0x216698710]();
    }
  }
  return result;
}

void sub_213DFA41C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  if (LOBYTE(STACK[0x448])) {
    TWord::TWord((uint64_t)va);
  }
  _Unwind_Resume(a1);
}

void THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::resize(uint64_t a1, uint64_t a2)
{
}

void *TRegisterable<TLexicon>::~TRegisterable(void *a1)
{
  *a1 = &unk_26C4E0520;
  if (a1[1] != -1)
  {
    Registry = (uint64_t *)TRegisterable<TLexicon>::getRegistry();
    uint64_t v3 = *Registry;
    *(void *)(Registry[1] + 8 * a1[1] - 8) = 0;
    uint64_t *Registry = v3 - 1;
  }
  return a1;
}

void TLexicon::~TLexicon(TLexicon *this)
{
  *(void *)this = &unk_26C4E5388;
  SDWord_DeleteList(*((void *)this + 13), (uint64_t)this + 448, 1u);
  uint64_t v2 = *((void *)this + 52);
  if (v2) {
    MEMORY[0x216698710](v2, 0x1000C8077774924);
  }
  uint64_t v3 = *((void *)this + 54);
  if (v3) {
    MEMORY[0x216698710](v3, 0x80C80B8603338);
  }
  uint64_t v4 = *((void *)this + 55);
  if (v4) {
    MEMORY[0x216698710](v4, 0x80C80B8603338);
  }
  uint64_t v5 = *((void *)this + 42);
  uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v5 + 144));
  uint64_t v7 = *(int *)(v5 + 4 * TParam::getValidConfig((TParam *)(v5 + 144), ActiveConfigHandle) + 304);
  uint64_t v8 = *(int *)(*((void *)this + 42) + 296);
  if (v7 > v8)
  {
    uint64_t v9 = 0;
    unint64_t v10 = v7 - v8;
    if (v10 <= 1) {
      uint64_t v11 = 1;
    }
    else {
      uint64_t v11 = v10;
    }
    do
    {
      uint64_t v12 = *((void *)this + 46);
      uint64_t v13 = *(void *)(v12 + 8 * v9);
      if (v13)
      {
        std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy(*(void *)(v12 + 8 * v9), *(void **)(v13 + 8));
        MEMORY[0x216698730](v13, 0x1020C4062D53EE8);
      }
      uint64_t v14 = *((void *)this + 47);
      uint64_t v15 = *(void *)(v14 + 8 * v9);
      if (v15)
      {
        std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy(*(void *)(v14 + 8 * v9), *(void **)(v15 + 8));
        MEMORY[0x216698730](v15, 0x1020C4062D53EE8);
      }
      uint64_t v16 = *((void *)this + 7);
      uint64_t v17 = *(void *)(v16 + 8 * v9);
      if (v17)
      {
        TAllocator::clear(*(TAllocator **)(v16 + 8 * v9));
        MEMORY[0x216698730](v17, 0x1010C40CCBCF24ELL);
      }
      uint64_t v18 = *((void *)this + 8);
      uint64_t v19 = *(void *)(v18 + 8 * v9);
      if (v19)
      {
        TAllocator::clear(*(TAllocator **)(v18 + 8 * v9));
        MEMORY[0x216698730](v19, 0x1010C40CCBCF24ELL);
      }
      ++v9;
    }
    while (v11 != v9);
    uint64_t v20 = *((void *)this + 46);
    if (v20) {
      MEMORY[0x216698710](v20, 0x20C8093837F09);
    }
    uint64_t v21 = *((void *)this + 47);
    if (v21) {
      MEMORY[0x216698710](v21, 0x20C8093837F09);
    }
    uint64_t v22 = *((void *)this + 7);
    if (v22) {
      MEMORY[0x216698710](v22, 0x20C8093837F09);
    }
    uint64_t v23 = *((void *)this + 8);
    if (v23) {
      MEMORY[0x216698710](v23, 0x20C8093837F09);
    }
  }
  uint64_t v24 = *((void *)this + 27);
  if (v24 >= 1)
  {
    unsigned int v25 = (void *)*((void *)this + 26);
    int v26 = &v25[v24];
    while (1)
    {
      uint64_t v27 = (void *)*v25;
      if (*v25) {
        break;
      }
      if (++v25 >= v26) {
        goto LABEL_32;
      }
    }
    do
    {
LABEL_65:
      v84 = (void *)v27[2];
      if (!*v84 || (MEMORY[0x216698710](*v84, 0x1000C8052888210), v27[2])) {
        MEMORY[0x216698730]();
      }
      uint64_t v27 = (void *)*v27;
    }
    while (v27);
    v85 = v25 + 1;
    while (v85 < v26)
    {
      v86 = (void *)*v85++;
      uint64_t v27 = v86;
      if (v86)
      {
        unsigned int v25 = v85 - 1;
        goto LABEL_65;
      }
    }
  }
LABEL_32:
  uint64_t v28 = *((void *)this + 19);
  if (v28 >= 1)
  {
    int v29 = (void *)*((void *)this + 18);
    int v30 = &v29[v28];
    while (1)
    {
      unsigned int v31 = (void *)*v29;
      if (*v29) {
        break;
      }
      if (++v29 >= v30) {
        goto LABEL_36;
      }
    }
    do
    {
LABEL_73:
      uint64_t v87 = v31[1];
      if (v87) {
        MEMORY[0x216698710](v87, 0x1000C8052888210);
      }
      uint64_t v88 = v31[2];
      if (v88) {
        MEMORY[0x216698730](v88, 0x1000C4057661CB1);
      }
      unsigned int v31 = (void *)*v31;
    }
    while (v31);
    v89 = v29 + 1;
    while (v89 < v30)
    {
      v90 = (void *)*v89++;
      unsigned int v31 = v90;
      if (v90)
      {
        int v29 = v89 - 1;
        goto LABEL_73;
      }
    }
  }
LABEL_36:
  unint64_t v32 = (TLexicon *)*((void *)this + 22);
  if (v32 != (TLexicon *)((char *)this + 184))
  {
    do
    {
      uint64_t v33 = *((void *)v32 + 7);
      if (v33) {
        MEMORY[0x216698730](v33, 0x1000C4057661CB1);
      }
      unint64_t v34 = (TLexicon *)*((void *)v32 + 1);
      if (v34)
      {
        do
        {
          unint64_t v35 = v34;
          unint64_t v34 = *(TLexicon **)v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          unint64_t v35 = (TLexicon *)*((void *)v32 + 2);
          BOOL v36 = *(void *)v35 == (void)v32;
          unint64_t v32 = v35;
        }
        while (!v36);
      }
      unint64_t v32 = v35;
    }
    while (v35 != (TLexicon *)((char *)this + 184));
  }
  uint64_t v38 = *((void *)this + 14);
  uint64_t v37 = *((void *)this + 15);
  if (v37 != v38)
  {
    unint64_t v39 = 0;
    uint64_t v40 = 8;
    do
    {
      uint64_t v41 = *(void *)(v38 + v40);
      if (v41)
      {
        MEMORY[0x216698710](v41, 0x1000C8052888210);
        uint64_t v38 = *((void *)this + 14);
        uint64_t v37 = *((void *)this + 15);
      }
      ++v39;
      v40 += 16;
    }
    while (v39 < (v37 - v38) >> 4);
  }
  uint64_t v42 = *((void *)this + 42);
  uint64_t v43 = TParam::getActiveConfigHandle((TParam *)(v42 + 21520));
  if (*(unsigned char *)(v42 + TParam::getValidConfig((TParam *)(v42 + 21520), v43) + 21672))
  {
    tknPrintString("-- TLexicon --\n");
    tknPrintf("  Clean calls   : %llu\n", v44, v45, v46, v47, *((void *)this + 65));
    tknPrintString("findWord\n");
    tknPrintf("  Cache lookups : %llu\n", v48, v49, v50, v51, *((void *)this + 57));
    tknPrintf("  Cache hits    : %llu\n", v52, v53, v54, v55, *((void *)this + 60));
    tknPrintString("collationSearch\n");
    tknPrintf("  Cache lookups : %llu\n", v56, v57, v58, v59, *((void *)this + 58));
    tknPrintf("  Cache hits    : %llu\n", v60, v61, v62, v63, *((void *)this + 61));
    tknPrintf("  Iterations    : %llu\n", v64, v65, v66, v67, *((void *)this + 63));
    tknPrintString("computeClones\n");
    tknPrintf("  Cache lookups : %llu\n", v68, v69, v70, v71, *((void *)this + 59));
    tknPrintf("  Cache hits    : %llu\n", v72, v73, v74, v75, *((void *)this + 62));
    tknPrintf("  Iterations    : %llu\n", v76, v77, v78, v79, *((void *)this + 64));
  }
  uint64_t v80 = (TDataSaver *)*((void *)this + 44);
  if (v80)
  {
    TDataSaver::~TDataSaver(v80);
    MEMORY[0x216698730]();
  }
  uint64_t v81 = *((void *)this + 42);
  if (v81) {
    (*(void (**)(uint64_t))(*(void *)v81 + 8))(v81);
  }
  uint64_t v82 = *((void *)this + 43);
  if (v82) {
    (*(void (**)(uint64_t))(*(void *)v82 + 8))(v82);
  }
  TCollation::~TCollation((TLexicon *)((char *)this + 256));
  THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::~THashBase((void *)this + 25);
  std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::destroy((uint64_t)this + 176, *((char **)this + 23));
  THashBase<std::pair<wchar_t * const,TWordBlock *>,THashMapCompare<std::pair<wchar_t * const,TWordBlock *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t * const,TWordBlock *>,THash<wchar_t const*>>>::~THashBase((void *)this + 17);
  v83 = (void *)*((void *)this + 14);
  if (v83)
  {
    *((void *)this + 15) = v83;
    operator delete(v83);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  TAllocator::clear((TLexicon *)((char *)this + 16));

  TRegisterable<TLexicon>::~TRegisterable(this);
}

{
  uint64_t vars8;

  TLexicon::~TLexicon(this);

  JUMPOUT(0x216698730);
}

uint64_t TLexicon::checkName(uint64_t a1, int *a2, char a3, unint64_t a4)
{
  unint64_t v4 = a4;
  uint64_t v55 = *MEMORY[0x263EF8340];
  if (a4 == -1)
  {
    uint64_t v8 = (TParam *)(*(void *)(a1 + 336) + 144);
    uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle(v8);
    unint64_t v4 = *((int *)v8 + TParam::getValidConfig(v8, ActiveConfigHandle) + 40);
  }
  __s = (__int32 *)v48;
  long long v47 = xmmword_214085190;
  char v49 = 1;
  TBuffer<wchar_t>::assign((uint64_t)&__s, a2);
  unint64_t v10 = *((void *)&v47 + 1);
  unint64_t v11 = v47;
  if (*((void *)&v47 + 1) >= (unint64_t)v47)
  {
    if (v49)
    {
      LODWORD(v51) = 0;
      TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v47 + 1), (int *)&v51, 1uLL);
      unint64_t v10 = --*((void *)&v47 + 1);
      uint64_t v12 = (unsigned int *)__s;
      unint64_t v11 = v47;
    }
    else
    {
      uint64_t v12 = (unsigned int *)__s;
      if (!(void)v47) {
        goto LABEL_11;
      }
      __s[(void)v47 - 1] = 0;
    }
  }
  else
  {
    uint64_t v12 = (unsigned int *)__s;
    __s[*((void *)&v47 + 1)] = 0;
  }
  if (v10 >= v11)
  {
    if (v49)
    {
      LODWORD(v51) = 0;
      TBuffer<wchar_t>::insert((uint64_t)&__s, v10, (int *)&v51, 1uLL);
      uint64_t v13 = __s;
      --*((void *)&v47 + 1);
      goto LABEL_14;
    }
    if (v11) {
      v12[v11 - 1] = 0;
    }
  }
  else
  {
    v12[v10] = 0;
  }
LABEL_11:
  uint64_t v13 = (__int32 *)v12;
LABEL_14:
  uint64_t v14 = wcschr(v13, 92);
  if (!v14) {
    goto LABEL_163;
  }
  unint64_t v15 = *((void *)&v47 + 1);
  if (*((void *)&v47 + 1) >= (unint64_t)v47)
  {
    if (v49)
    {
      LODWORD(v51) = 0;
      TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v47 + 1), (int *)&v51, 1uLL);
      uint64_t v16 = __s;
      unint64_t v15 = --*((void *)&v47 + 1);
    }
    else
    {
      uint64_t v16 = __s;
      if ((void)v47) {
        __s[(void)v47 - 1] = 0;
      }
    }
  }
  else
  {
    uint64_t v16 = __s;
    __s[*((void *)&v47 + 1)] = 0;
  }
  if (v14 == v16)
  {
    __int32 v17 = v14[1];
    if (v17) {
      uint64_t v18 = v14;
    }
    else {
      uint64_t v18 = v14 + 1;
    }
    if (v17 == 92) {
      ++v14;
    }
    else {
      uint64_t v14 = v18;
    }
  }
  if (!*v14)
  {
LABEL_163:
    if (*v12)
    {
      LODWORD(v19) = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      BOOL v22 = 0;
      goto LABEL_35;
    }
    goto LABEL_96;
  }
  if (v15 >= (unint64_t)v47)
  {
    if (v49)
    {
      LODWORD(v51) = 0;
      TBuffer<wchar_t>::insert((uint64_t)&__s, v15, (int *)&v51, 1uLL);
      --*((void *)&v47 + 1);
    }
    else if ((void)v47)
    {
      v16[(void)v47 - 1] = 0;
    }
  }
  else
  {
    v16[v15] = 0;
  }
  *uint64_t v14 = 0;
  uint64_t v20 = v14 + 1;
  uint64_t v24 = wcschr(v20, 92);
  BOOL v22 = v24 != 0;
  if (!v24)
  {
    if (*v20)
    {
      uint64_t v21 = 0;
LABEL_99:
      if (*v12)
      {
        LODWORD(v19) = 1;
      }
      else
      {
        uint64_t v19 = 1;
        if (!*v20) {
          goto LABEL_156;
        }
      }
LABEL_35:
      BOOL v43 = v22;
      uint64_t v51 = v53;
      long long v52 = xmmword_214085190;
      char v54 = 1;
      uint64_t v23 = a1 + 240;
      if (TLocaleInfo::unicodeToMultiByte(v23, v12, (uint64_t)&v51))
      {
        uint64_t v19 = 2;
LABEL_152:
        if (v54 && v51 != v53 && v51) {
          MEMORY[0x216698730]();
        }
        goto LABEL_156;
      }
      if (*((void *)&v52 + 1) >= (unint64_t)v52)
      {
        if (v54)
        {
          v45[0] = 0;
          TBuffer<char>::insert((uint64_t)&v51, *((unint64_t *)&v52 + 1), v45, 1uLL);
          --*((void *)&v52 + 1);
        }
        else if ((void)v52)
        {
          v51[(void)v52 - 1] = 0;
        }
      }
      else
      {
        v51[*((void *)&v52 + 1)] = 0;
      }
      unsigned int v25 = v51;
      TSegmenter::TSegmenter(v45, v51, v23, 0);
      for (; *v25; unsigned int v25 = *(char **)(v27 + 8))
      {
        uint64_t Segment = TSegmenter::getSegment((TSegmenter *)v45, v25);
        uint64_t v27 = Segment;
        int v28 = *(_DWORD *)(Segment + 24);
        if (v28 == 5 || v4 >= 3 && *(void *)(Segment + 16))
        {
LABEL_92:
          uint64_t v19 = 2;
          goto LABEL_151;
        }
        if (!v28)
        {
          int v29 = **(_DWORD **)Segment;
          {
            operator new();
          }
          if (v29 <= 8202)
          {
            if (v29 != 32 && v29 != 160) {
              continue;
            }
          }
          else
          {
            BOOL v30 = v29 == 8203 || v29 == 65279;
            if (!v30 && v29 != 12288) {
              continue;
            }
          }
          if (*((void *)&v52 + 1) >= (unint64_t)v52)
          {
            if (v54)
            {
              v44[0] = 0;
              TBuffer<char>::insert((uint64_t)&v51, *((unint64_t *)&v52 + 1), v44, 1uLL);
              --*((void *)&v52 + 1);
            }
            else if ((void)v52)
            {
              v51[(void)v52 - 1] = 0;
            }
          }
          else
          {
            v51[*((void *)&v52 + 1)] = 0;
          }
          if (v25 != v51 || **(unsigned char **)(v27 + 8))
          {
            if (*((void *)&v52 + 1) >= (unint64_t)v52)
            {
              if (v54)
              {
                v44[0] = 0;
                TBuffer<char>::insert((uint64_t)&v51, *((unint64_t *)&v52 + 1), v44, 1uLL);
                --*((void *)&v52 + 1);
              }
              else if ((void)v52)
              {
                v51[(void)v52 - 1] = 0;
              }
            }
            else
            {
              v51[*((void *)&v52 + 1)] = 0;
            }
            if (v25 == v51 || !**(unsigned char **)(v27 + 8)) {
              goto LABEL_92;
            }
          }
        }
      }
      if (v19)
      {
        TBuffer<char>::resize((uint64_t)&v51, 0);
        if (TLocaleInfo::unicodeToMultiByte(v23, (unsigned int *)v20, (uint64_t)&v51))
        {
          uint64_t v19 = 5;
          goto LABEL_151;
        }
        unsigned int v31 = (char *)TBuffer<char>::c_str((uint64_t)&v51);
        TSegmenter::TSegmenter(v44, v31, v23, 0);
        if (*v31)
        {
          while (1)
          {
            uint64_t v32 = TSegmenter::getSegment((TSegmenter *)v44, v31);
            uint64_t v33 = (int **)v32;
            int v34 = *(_DWORD *)(v32 + 24);
            if (v34 == 5 || v4 >= 3 && *(void *)(v32 + 16)) {
              break;
            }
            if (!v34)
            {
              if (*((void *)&v52 + 1) >= (unint64_t)v52)
              {
                if (v54)
                {
                  char v50 = 0;
                  uint64_t v32 = TBuffer<char>::insert((uint64_t)&v51, *((unint64_t *)&v52 + 1), &v50, 1uLL);
                  --*((void *)&v52 + 1);
                }
                else if ((void)v52)
                {
                  v51[(void)v52 - 1] = 0;
                }
              }
              else
              {
                v51[*((void *)&v52 + 1)] = 0;
              }
              if (v31 == v51 || !*(unsigned char *)v33[1] || (*v33)[1]) {
                break;
              }
              int v35 = **v33;
              TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)v32);
              if (v35 <= 8202)
              {
                if (v35 != 32 && v35 != 160) {
                  break;
                }
              }
              else if (v35 != 8203 && v35 != 65279 && v35 != 12288)
              {
                break;
              }
            }
            unsigned int v31 = (char *)v33[1];
            if (!*v31) {
              goto LABEL_127;
            }
          }
          TSegmenter::~TSegmenter((TSegmenter *)v44);
          uint64_t v19 = 5;
          goto LABEL_151;
        }
LABEL_127:
        TSegmenter::~TSegmenter((TSegmenter *)v44);
      }
      if (v43)
      {
        TBuffer<char>::resize((uint64_t)&v51, 0);
        if (TLocaleInfo::unicodeToMultiByte(v23, v21, (uint64_t)&v51))
        {
LABEL_148:
          uint64_t v19 = 3;
LABEL_151:
          TSegmenter::~TSegmenter((TSegmenter *)v45);
          goto LABEL_152;
        }
        BOOL v36 = (char *)TBuffer<char>::c_str((uint64_t)&v51);
        TSegmenter::TSegmenter(v44, v36, v23, 0);
        if (*v36)
        {
          while (1)
          {
            uint64_t v37 = TSegmenter::getSegment((TSegmenter *)v44, v36);
            uint64_t v38 = (int **)v37;
            int v39 = *(_DWORD *)(v37 + 24);
            if (v39 == 5 || v4 >= 3 && (*(void *)(v37 + 16) & 0xFFFFFFFFFFFFFFFBLL) != 0) {
              break;
            }
            if (!v39)
            {
              uint64_t v40 = (TLocaleInfo *)TBuffer<char>::c_str((uint64_t)&v51);
              if (v36 == (char *)v40 || !*(unsigned char *)v38[1] || (*v38)[1]) {
                break;
              }
              int v41 = **v38;
              TLocaleInfo::getGlobalLocaleInfo(v40);
              if (v41 <= 8202)
              {
                if (v41 != 32 && v41 != 160) {
                  break;
                }
              }
              else if (v41 != 8203 && v41 != 65279 && v41 != 12288)
              {
                break;
              }
            }
            BOOL v36 = (char *)v38[1];
            if (!*v36) {
              goto LABEL_149;
            }
          }
          TSegmenter::~TSegmenter((TSegmenter *)v44);
          goto LABEL_148;
        }
LABEL_149:
        TSegmenter::~TSegmenter((TSegmenter *)v44);
      }
      uint64_t v19 = 0;
      goto LABEL_151;
    }
LABEL_96:
    uint64_t v19 = 1;
    goto LABEL_156;
  }
  if (*((void *)&v47 + 1) >= (unint64_t)v47)
  {
    if (v49)
    {
      LODWORD(v51) = 0;
      TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v47 + 1), (int *)&v51, 1uLL);
      --*((void *)&v47 + 1);
    }
    else if ((void)v47)
    {
      __s[(void)v47 - 1] = 0;
    }
  }
  else
  {
    __s[*((void *)&v47 + 1)] = 0;
  }
  *uint64_t v24 = 0;
  uint64_t v21 = (unsigned int *)(v24 + 1);
  if (wcschr((__int32 *)v21, 92)) {
    goto LABEL_96;
  }
  uint64_t v19 = 1;
  if (*v21 && (a3 & 1) == 0) {
    goto LABEL_99;
  }
LABEL_156:
  if (v49 && __s != (__int32 *)v48 && __s) {
    MEMORY[0x216698730]();
  }
  return v19;
}

void sub_213DFB4B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  MEMORY[0x216698730](a11, 0x1070C40ADD13FEBLL);
  TSegmenter::~TSegmenter((TSegmenter *)&a28);
  if (LOBYTE(STACK[0x648]))
  {
    unint64_t v44 = STACK[0x530];
    if (STACK[0x530] != a9)
    {
      if (v44) {
        MEMORY[0x216698730](v44, 0x1000C4077774924);
      }
    }
  }
  if (LOBYTE(STACK[0x520]) && a42 != v42)
  {
    if (a42) {
      MEMORY[0x216698730]();
    }
  }
  _Unwind_Resume(a1);
}

uint64_t TBuffer<char>::c_str(uint64_t a1)
{
  unint64_t v3 = *(void *)(a1 + 8);
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= v3)
  {
    if (*(unsigned char *)(a1 + 280))
    {
      char v5 = 0;
      TBuffer<char>::insert(a1, v2, &v5, 1uLL);
      --*(void *)(a1 + 16);
    }
    else if (v3)
    {
      *(unsigned char *)(v3 + *(void *)a1 - 1) = 0;
    }
  }
  else
  {
    *(unsigned char *)(*(void *)a1 + v2) = 0;
  }
  return *(void *)a1;
}

void callBackMRECArrayReallocator(unint64_t a1, unsigned int a2, unsigned int a3, void *a4, unsigned int a5, void **a6, unsigned int *a7)
{
  *a7 = a3;
  operator new[]();
}

uint64_t TLexicon::findWord(void *a1, __int32 *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  ++a1[41];
  ++a1[57];
  v7[0] = a2;
  v7[1] = 0;
  THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::find((size_t)(a1 + 25), v7, &v8);
  if (*((void *)&v9 + 1) && (uint64_t v4 = *(void *)(*((void *)&v9 + 1) + 16)) != 0)
  {
    *(void *)(v4 + 24) = a1[41];
    ++a1[60];
  }
  else
  {
    uint64_t v8 = v10;
    long long v9 = xmmword_214085190;
    char v11 = 1;
    TLocaleInfo::unicodeToMultiByte((uint64_t)(a1 + 30), (unsigned int *)a2, (uint64_t)&v8);
    unint64_t v5 = a1[13];
    if (*((void *)&v9 + 1) >= (unint64_t)v9)
    {
      if (v11)
      {
        LOBYTE(v7[0]) = 0;
        TBuffer<char>::insert((uint64_t)&v8, *((unint64_t *)&v9 + 1), (char *)v7, 1uLL);
        --*((void *)&v9 + 1);
      }
      else if ((void)v9)
      {
        v8[v9 - 1] = 0;
      }
    }
    else
    {
      v8[*((void *)&v9 + 1)] = 0;
    }
    if (SDWord_GetHandle(v5, v8) != -1)
    {
      wcslen(a2);
      operator new[]();
    }
    uint64_t v4 = 0;
    if (v11 && v8 != v10 && v8) {
      MEMORY[0x216698730]();
    }
  }
  return v4;
}

void sub_213DFB890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  MEMORY[0x216698730](v51, 0x10F0C4030D8D1E0);
  if (a51 && a16 != v52)
  {
    if (a16) {
      MEMORY[0x216698730]();
    }
  }
  _Unwind_Resume(a1);
}

void TWordBlock::create()
{
}

BOOL TLexicon::findHeadClonesCollated(void *a1, unsigned int *a2, _DWORD *a3, size_t a4, size_t a5, void **a6)
{
  uint64_t v8 = a2;
  size_t v40 = wcslen((const __int32 *)a2);
  BOOL v43 = (__int32 *)v45;
  long long v44 = xmmword_214085190;
  char v46 = 1;
  unint64_t v10 = TLexicon::collationSearch(a1, v8);
  char v11 = v10;
  if (v10[1])
  {
    uint64_t v12 = v10 + 3;
    uint64_t v13 = (uint64_t)(a1 + 30);
    int v39 = v10;
    uint64_t v14 = (__int32 ***)(v10 + 3);
    do
    {
      unint64_t v15 = *v14;
      BOOL v16 = TLexicon::applyMask((uint64_t)(*v14)[1], (unint64_t)(*v14)[2], a3, (uint64_t *)*v14 + 4);
      if (!v16)
      {
        TLexicon::getWrittenForm(v16, *v15, (uint64_t)&v43);
        if (*((void *)&v44 + 1) >= (unint64_t)v44)
        {
          if (v46)
          {
            LODWORD(v47[0]) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v43, *((unint64_t *)&v44 + 1), (int *)v47, 1uLL);
            __int32 v17 = v43;
            --*((void *)&v44 + 1);
          }
          else
          {
            __int32 v17 = v43;
            if ((void)v44) {
              v43[(void)v44 - 1] = 0;
            }
          }
        }
        else
        {
          __int32 v17 = v43;
          v43[*((void *)&v44 + 1)] = 0;
        }
        TLexiconScore::TLexiconScore(v47, (const __int32 *)v8, (unsigned int *)v17, a4, a5, v13);
        uint64_t v19 = v47[0];
        uint64_t v18 = v47[1];
        uint64_t v20 = (__int32 ***)a6[1];
        unint64_t v21 = (unint64_t)a6[2];
        if ((unint64_t)v20 >= v21)
        {
          uint64_t v23 = v12;
          uint64_t v24 = a3;
          unsigned int v25 = v8;
          uint64_t v26 = v13;
          uint64_t v27 = ((char *)v20 - (unsigned char *)*a6) >> 5;
          unint64_t v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 59) {
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v29 = v21 - (void)*a6;
          if (v29 >> 4 > v28) {
            unint64_t v28 = v29 >> 4;
          }
          if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v30 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v30 = v28;
          }
          if (v30) {
            unsigned int v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,std::wstring>>>((uint64_t)(a6 + 2), v30);
          }
          else {
            unsigned int v31 = 0;
          }
          uint64_t v32 = (__int32 ***)&v31[32 * v27];
          *uint64_t v32 = v15;
          v32[1] = (__int32 **)v40;
          v32[2] = (__int32 **)v19;
          v32[3] = (__int32 **)v18;
          int v34 = (char *)*a6;
          uint64_t v33 = (char *)a6[1];
          int v35 = v32;
          uint64_t v13 = v26;
          if (v33 != *a6)
          {
            do
            {
              long long v36 = *((_OWORD *)v33 - 1);
              *((_OWORD *)v35 - 2) = *((_OWORD *)v33 - 2);
              *((_OWORD *)v35 - 1) = v36;
              v35 -= 4;
              v33 -= 32;
            }
            while (v33 != v34);
            uint64_t v33 = (char *)*a6;
          }
          uint64_t v8 = v25;
          BOOL v22 = v32 + 4;
          *a6 = v35;
          a6[1] = v32 + 4;
          a6[2] = &v31[32 * v30];
          a3 = v24;
          if (v33) {
            operator delete(v33);
          }
          uint64_t v12 = v23;
          char v11 = v39;
        }
        else
        {
          __int32 *v20 = v15;
          v20[1] = (__int32 **)v40;
          BOOL v22 = v20 + 4;
          v20[2] = (__int32 **)v19;
          v20[3] = (__int32 **)v18;
        }
        a6[1] = v22;
      }
      ++v14;
    }
    while (v14 != &v12[v11[1]]);
  }
  int v37 = *((unsigned __int8 *)v11 + 16);
  if (v46 && v43 != (__int32 *)v45 && v43) {
    MEMORY[0x216698730]();
  }
  return v37 != 0;
}

void sub_213DFBC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (LOBYTE(STACK[0x450]))
  {
    if (a16 != a10 && a16 != 0) {
      MEMORY[0x216698730]();
    }
  }
  _Unwind_Resume(a1);
}

void *TLexicon::collationSearch(void *a1, unsigned int *a2)
{
  ++a1[41];
  ++a1[58];
  uint64_t v27 = (__int32 *)v29;
  long long v28 = xmmword_214085190;
  char v30 = 1;
  TCollation::collate(a1 + 32, a2, (uint64_t)&v27);
  uint64_t v20 = v27;
  *(void *)&long long v21 = 0;
  THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::find((size_t)(a1 + 17), (const __int32 **)&v20, &v25);
  if (!v26)
  {
    memset(v24, 0, sizeof(v24));
    if (!wcschr((__int32 *)a2, 92) || !wcscmp((const __int32 *)a2, (const __int32 *)&unk_21408CFC4))
    {
      if (a1[14] == a1[15])
      {
        TLexicon::collationSearchInternal((uint64_t)a1, a2, v24, 0, 0, 0);
      }
      else
      {
        long long v21 = xmmword_214085190;
        char v23 = 1;
        uint64_t v19 = 100;
        uint64_t v20 = (__int32 *)v22;
        TLexicon::collationSearchRec((uint64_t)a1, (const __int32 *)a2, v24, (uint64_t)&v20, &v19);
        if (!v19)
        {
          loggableUnicode(a2, &__p);
          uint64_t v14 = v18 >= 0 ? &__p : (void **)__p;
          tknPrintf("Warning: '%s' : Ran over 100 voc searches due to mismatched collation tables. Giving up.\n", v10, v11, v12, v13, v14);
          if (v18 < 0) {
            operator delete(__p);
          }
        }
        if (v23 && v20 != (__int32 *)v22 && v20) {
          MEMORY[0x216698730]();
        }
      }
    }
    operator new[]();
  }
  uint64_t v4 = *(void **)(v26 + 16);
  uint64_t v5 = a1[41];
  void *v4 = v5;
  uint64_t v6 = v4[1];
  if (v6)
  {
    uint64_t v7 = v4 + 3;
    uint64_t v8 = 8 * v6;
    do
    {
      uint64_t v9 = *v7++;
      *(void *)(v9 + 24) = v5;
      v8 -= 8;
    }
    while (v8);
  }
  ++a1[61];
  if (v30)
  {
    if (v27 != (__int32 *)v29 && v27 != 0) {
      MEMORY[0x216698730]();
    }
  }
  return v4;
}

void sub_213DFBF78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (LOBYTE(STACK[0x458]) && a20 != v21 && a20) {
    MEMORY[0x216698730]();
  }
  char v23 = (void *)STACK[0x460];
  if (STACK[0x460])
  {
    STACK[0x468] = (unint64_t)v23;
    operator delete(v23);
  }
  if (LOBYTE(STACK[0x8A8]))
  {
    if (STACK[0x490] != v20 && STACK[0x490] != 0) {
      MEMORY[0x216698730]();
    }
  }
  _Unwind_Resume(a1);
}

uint64_t TLexicon::makeScore(uint64_t a1, const __int32 *a2, unsigned int *a3, size_t a4, size_t a5)
{
  TLexiconScore::TLexiconScore(&v6, a2, a3, a4, a5, a1 + 240);
  return v6;
}

BOOL TLexicon::findHeadClonesCollated(void *a1, unsigned int *a2, void *a3, unint64_t a4, size_t a5, size_t a6, void **a7)
{
  uint64_t v11 = a2;
  size_t v42 = wcslen((const __int32 *)a2);
  long long v44 = (__int32 *)v46;
  long long v45 = xmmword_214085190;
  char v47 = 1;
  uint64_t v13 = TLexicon::collationSearch(a1, v11);
  uint64_t v14 = v13;
  if (v13[1])
  {
    unint64_t v15 = v13 + 3;
    size_t v40 = v13 + 3;
    uint64_t v41 = (uint64_t)(a1 + 30);
    uint64_t v38 = a3;
    BOOL v16 = (__int32 ***)(v13 + 3);
    int v39 = v11;
    do
    {
      __int32 v17 = *v16;
      BOOL v18 = TLexicon::checkBits((uint64_t)(*v16)[1], (unint64_t)(*v16)[2], a3, a4, (uint64_t *)*v16 + 4);
      if (v18)
      {
        TLexicon::getWrittenForm(v18, *v17, (uint64_t)&v44);
        if (*((void *)&v45 + 1) >= (unint64_t)v45)
        {
          if (v47)
          {
            LODWORD(v48[0]) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v44, *((unint64_t *)&v45 + 1), (int *)v48, 1uLL);
            uint64_t v19 = v44;
            --*((void *)&v45 + 1);
          }
          else
          {
            uint64_t v19 = v44;
            if ((void)v45) {
              v44[(void)v45 - 1] = 0;
            }
          }
        }
        else
        {
          uint64_t v19 = v44;
          v44[*((void *)&v45 + 1)] = 0;
        }
        TLexiconScore::TLexiconScore(v48, (const __int32 *)v11, (unsigned int *)v19, a5, a6, v41);
        uint64_t v20 = v14;
        uint64_t v22 = v48[0];
        uint64_t v21 = v48[1];
        char v23 = (__int32 ***)a7[1];
        unint64_t v24 = (unint64_t)a7[2];
        if ((unint64_t)v23 >= v24)
        {
          uint64_t v26 = ((char *)v23 - (unsigned char *)*a7) >> 5;
          unint64_t v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 59) {
            std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v28 = v24 - (void)*a7;
          if (v28 >> 4 > v27) {
            unint64_t v27 = v28 >> 4;
          }
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v29 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v29 = v27;
          }
          if (v29) {
            char v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,std::wstring>>>((uint64_t)(a7 + 2), v29);
          }
          else {
            char v30 = 0;
          }
          unsigned int v31 = (__int32 ***)&v30[32 * v26];
          char *v31 = v17;
          v31[1] = (__int32 **)v42;
          v31[2] = (__int32 **)v22;
          v31[3] = (__int32 **)v21;
          uint64_t v33 = (char *)*a7;
          uint64_t v32 = (char *)a7[1];
          int v34 = v31;
          uint64_t v14 = v20;
          if (v32 != *a7)
          {
            do
            {
              long long v35 = *((_OWORD *)v32 - 1);
              *((_OWORD *)v34 - 2) = *((_OWORD *)v32 - 2);
              *((_OWORD *)v34 - 1) = v35;
              v34 -= 4;
              v32 -= 32;
            }
            while (v32 != v33);
            uint64_t v32 = (char *)*a7;
          }
          unint64_t v15 = v40;
          uint64_t v25 = v31 + 4;
          *a7 = v34;
          a7[1] = v31 + 4;
          a7[2] = &v30[32 * v29];
          if (v32) {
            operator delete(v32);
          }
          a3 = v38;
          uint64_t v11 = v39;
        }
        else
        {
          void *v23 = v17;
          v23[1] = (__int32 **)v42;
          uint64_t v25 = v23 + 4;
          v23[2] = (__int32 **)v22;
          v23[3] = (__int32 **)v21;
          uint64_t v14 = v20;
          unint64_t v15 = v40;
        }
        a7[1] = v25;
      }
      ++v16;
    }
    while (v16 != &v15[v14[1]]);
  }
  int v36 = *((unsigned __int8 *)v14 + 16);
  if (v47 && v44 != (__int32 *)v46 && v44) {
    MEMORY[0x216698730]();
  }
  return v36 != 0;
}

void sub_213DFC2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (LOBYTE(STACK[0x460]))
  {
    if (a18 != a10 && a18 != 0) {
      MEMORY[0x216698730]();
    }
  }
  _Unwind_Resume(a1);
}

void TLexicon::findHeadClonesCollatedPrefix(void *a1, char *a2, TSegmenter *a3, _DWORD *a4, size_t a5, size_t a6, void **a7)
{
  uint64_t v8 = a4;
  uint64_t v9 = a2;
  char v54 = 0;
  *(void *)uint64_t v67 = v69;
  long long v68 = xmmword_214085190;
  char v70 = 1;
  uint64_t v63 = (__int32 *)v65;
  long long v64 = xmmword_214085190;
  char v66 = 1;
  uint64_t v57 = (uint64_t)(a1 + 30);
  uint64_t v53 = (uint64_t)(a7 + 2);
  while (1)
  {
    uint64_t Segment = TSegmenter::getSegment(a3, v9);
    uint64_t v11 = (const __int32 **)Segment;
    if (!Segment) {
      break;
    }
    int v12 = *(_DWORD *)(Segment + 24);
    if (v12 == 5) {
      break;
    }
    uint64_t v9 = *(char **)(Segment + 8);
    if (v12)
    {
      uint64_t v13 = 0;
      uint64_t v14 = *(int **)Segment;
      while (v14[v13++])
        ;
      TBuffer<wchar_t>::insert((uint64_t)v67, *((unint64_t *)&v68 + 1), v14, v13 - 1);
LABEL_8:
      if (*((void *)&v68 + 1) > 0xFFuLL) {
        break;
      }
      if (*((void *)&v68 + 1) >= (unint64_t)v68)
      {
        if (v70)
        {
          LODWORD(__p[0]) = 0;
          TBuffer<wchar_t>::insert((uint64_t)v67, *((unint64_t *)&v68 + 1), (int *)__p, 1uLL);
          BOOL v16 = *(unsigned int **)v67;
          --*((void *)&v68 + 1);
        }
        else
        {
          BOOL v16 = *(unsigned int **)v67;
          if ((void)v68) {
            *(_DWORD *)(*(void *)v67 + 4 * v68 - 4) = 0;
          }
        }
      }
      else
      {
        BOOL v16 = *(unsigned int **)v67;
        *(_DWORD *)(*(void *)v67 + 4 * *((void *)&v68 + 1)) = 0;
      }
      uint64_t v19 = TLexicon::collationSearch(a1, v16);
      if (!v19[1]) {
        goto LABEL_88;
      }
      int v20 = *(_DWORD *)(*(void *)v67 + 4 * *((void *)&v68 + 1) - 4);
      {
        operator new();
      }
      if (v20 <= 8202)
      {
        if (v20 == 32 || v20 == 160) {
          goto LABEL_35;
        }
      }
      else
      {
        BOOL v21 = v20 == 8203 || v20 == 65279;
        if (v21 || v20 == 12288)
        {
LABEL_35:
          loggableUnicode(*(unsigned int **)v19[3], __p);
          uint64_t v26 = __p;
          if (v62 < 0) {
            uint64_t v26 = (void **)__p[0];
          }
          tknPrintf("Warning: '%s' : found a match that ends with a space. Ignored.\n", v22, v23, v24, v25, v26);
          if (v62 < 0) {
            operator delete(__p[0]);
          }
          goto LABEL_88;
        }
      }
      if (v19[1])
      {
        char v30 = (__int32 **)(v9 - a2);
        unsigned int v31 = (__int32 ***)(v19 + 3);
        do
        {
          uint64_t v32 = *v31;
          BOOL v33 = TLexicon::applyMask((uint64_t)(*v31)[1], (unint64_t)(*v31)[2], v8, (uint64_t *)*v31 + 4);
          if (!v33)
          {
            TLexicon::getWrittenForm(v33, *v32, (uint64_t)&v63);
            if (*((void *)&v68 + 1) >= (unint64_t)v68)
            {
              if (v70)
              {
                LODWORD(__p[0]) = 0;
                TBuffer<wchar_t>::insert((uint64_t)v67, *((unint64_t *)&v68 + 1), (int *)__p, 1uLL);
                int v34 = *(const __int32 **)v67;
                --*((void *)&v68 + 1);
              }
              else
              {
                int v34 = *(const __int32 **)v67;
                if ((void)v68) {
                  *(_DWORD *)(*(void *)v67 + 4 * v68 - 4) = 0;
                }
              }
            }
            else
            {
              int v34 = *(const __int32 **)v67;
              *(_DWORD *)(*(void *)v67 + 4 * *((void *)&v68 + 1)) = 0;
            }
            if (*((void *)&v64 + 1) >= (unint64_t)v64)
            {
              if (v66)
              {
                LODWORD(__p[0]) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v63, *((unint64_t *)&v64 + 1), (int *)__p, 1uLL);
                long long v35 = v63;
                --*((void *)&v64 + 1);
              }
              else
              {
                long long v35 = v63;
                if ((void)v64) {
                  v63[(void)v64 - 1] = 0;
                }
              }
            }
            else
            {
              long long v35 = v63;
              v63[*((void *)&v64 + 1)] = 0;
            }
            TLexiconScore::TLexiconScore((uint64_t *)__p, v34, (unsigned int *)v35, a5, a6, v57);
            int v36 = (__int32 **)__p[0];
            int v37 = (__int32 **)__p[1];
            uint64_t v38 = (__int32 ***)a7[1];
            unint64_t v39 = (unint64_t)a7[2];
            if ((unint64_t)v38 >= v39)
            {
              uint64_t v41 = ((char *)v38 - (unsigned char *)*a7) >> 5;
              unint64_t v42 = v41 + 1;
              if ((unint64_t)(v41 + 1) >> 59) {
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v43 = v39 - (void)*a7;
              if (v43 >> 4 > v42) {
                unint64_t v42 = v43 >> 4;
              }
              if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFE0) {
                unint64_t v44 = 0x7FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v44 = v42;
              }
              if (v44) {
                long long v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,std::wstring>>>(v53, v44);
              }
              else {
                long long v45 = 0;
              }
              char v46 = (__int32 ***)&v45[32 * v41];
              unsigned char *v46 = v32;
              v46[1] = v30;
              v46[2] = v36;
              v46[3] = v37;
              uint64_t v48 = (char *)*a7;
              char v47 = (char *)a7[1];
              char v49 = v46;
              if (v47 != *a7)
              {
                do
                {
                  long long v50 = *((_OWORD *)v47 - 1);
                  *((_OWORD *)v49 - 2) = *((_OWORD *)v47 - 2);
                  *((_OWORD *)v49 - 1) = v50;
                  v49 -= 4;
                  v47 -= 32;
                }
                while (v47 != v48);
                char v47 = (char *)*a7;
              }
              size_t v40 = v46 + 4;
              *a7 = v49;
              a7[1] = v46 + 4;
              a7[2] = &v45[32 * v44];
              if (v47) {
                operator delete(v47);
              }
            }
            else
            {
              void *v38 = v32;
              v38[1] = v30;
              size_t v40 = v38 + 4;
              v38[2] = v36;
              v38[3] = v37;
            }
            a7[1] = v40;
            uint64_t v8 = a4;
          }
          ++v31;
        }
        while (v31 != &v19[v19[1] + 3]);
      }
LABEL_88:
      if (!*((unsigned char *)v19 + 16)) {
        break;
      }
    }
    else
    {
      if (!*((void *)&v68 + 1)) {
        break;
      }
      __int32 v17 = *(const __int32 **)Segment;
      int v18 = **(_DWORD **)Segment;
      if (v18 == 9) {
        break;
      }
      if (*(_DWORD *)(*(void *)v67 + 4 * *((void *)&v68 + 1) - 4) == 32) {
        goto LABEL_42;
      }
      {
        operator new();
      }
      if (v18 <= 8202)
      {
        if (v18 == 32 || v18 == 160)
        {
LABEL_41:
          __int32 v17 = *v11;
          if (wcslen(*v11) > 2) {
            break;
          }
          goto LABEL_42;
        }
      }
      else if (v18 == 8203 || v18 == 12288 || v18 == 65279)
      {
        goto LABEL_41;
      }
      __int32 v17 = *v11;
LABEL_42:
      __int32 v27 = *v17;
      {
        operator new();
      }
      if (v27 != 13 && v27 != 10) {
        goto LABEL_53;
      }
      if (v54) {
        break;
      }
      char v54 = 1;
      if (*(_DWORD *)(*(void *)v67 + 4 * *((void *)&v68 + 1) - 4) != 45)
      {
        uint64_t v29 = TSegmenter::getSegment(a3, v9);
        if (!v29 || *(_DWORD *)(v29 + 24) == 5) {
          break;
        }
        char v54 = 1;
        if (**(_DWORD **)v29 != 45)
        {
LABEL_53:
          if (*(_DWORD *)(*(void *)v67 + 4 * *((void *)&v68 + 1) - 4) != 32)
          {
            TBuffer<wchar_t>::insert((uint64_t)v67, *((unint64_t *)&v68 + 1), (int *)&unk_21408CFBC, 1uLL);
            goto LABEL_8;
          }
        }
      }
    }
  }
  if (v66)
  {
    if (v63 != (__int32 *)v65 && v63 != 0) {
      MEMORY[0x216698730]();
    }
  }
  if (v70 && *(unsigned char **)v67 != v69)
  {
    if (*(void *)v67) {
      MEMORY[0x216698730]();
    }
  }
}

void sub_213DFC9D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24)
{
  MEMORY[0x216698730](v24, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x490]))
  {
    if (a24 != a11 && a24 != 0) {
      MEMORY[0x216698730]();
    }
  }
  if (LOBYTE(STACK[0x8B0]))
  {
    unint64_t v27 = STACK[0x498];
    if (STACK[0x498] != a12)
    {
      if (v27) {
        MEMORY[0x216698730](v27, 0x1000C4052888210);
      }
    }
  }
  _Unwind_Resume(a1);
}

uint64_t TLexicon::getPronCount(void *a1, __int32 *a2)
{
  uint64_t result = TLexicon::findWord(a1, a2);
  if (result)
  {
    SDWord_GetInfo(a1[13], *(void *)(result + 16), (uint64_t)v4);
    return (v4[1] + v4[0]);
  }
  return result;
}

void std::vector<std::string>::resize(std::vector<std::string> *this, std::vector<std::string>::size_type __sz)
{
  std::vector<std::string>::pointer end = this->__end_;
  std::vector<std::string>::size_type v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  BOOL v5 = __sz >= v4;
  std::vector<std::string>::size_type v6 = __sz - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::string>::__append(this, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = &this->__begin_[__sz];
    while (end != v7)
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(end[-1].__r_.__value_.__l.__data_);
      }
      --end;
    }
    this->__end_ = v7;
  }
}

uint64_t sortByFirst(const __int32 **a1, const __int32 **a2)
{
  return wcscmp(*a1, *a2) >> 31;
}

BOOL TLexicon::collationSearchInternal(uint64_t a1, unsigned int *a2, void **a3, _DWORD *a4, int a5, unint64_t a6)
{
  uint64_t v88 = *MEMORY[0x263EF8340];
  uint64_t v11 = v86;
  v84 = v86;
  long long v85 = xmmword_214085190;
  char v87 = 1;
  uint64_t v12 = a1 + 240;
  TLocaleInfo::unicodeToMultiByte(a1 + 240, a2, (uint64_t)&v84);
  uint64_t v81 = 0;
  uint64_t v80 = 0;
  int v79 = 0;
  unint64_t v14 = *(void *)(a1 + 96);
  unint64_t v13 = *(void *)(a1 + 104);
  if (*((void *)&v85 + 1) >= (unint64_t)v85)
  {
    if (v87)
    {
      LOBYTE(v75) = 0;
      TBuffer<char>::insert((uint64_t)&v84, *((unint64_t *)&v85 + 1), (char *)&v75, 1uLL);
      --*((void *)&v85 + 1);
    }
    else if ((void)v85)
    {
      v84[(void)v85 - 1] = 0;
    }
  }
  else
  {
    v84[*((void *)&v85 + 1)] = 0;
  }
  if (a5) {
    unint64_t v15 = &byte_2140B33BB;
  }
  else {
    unint64_t v15 = "\\"";
  }
  SDVoc_GetWords(v13, v14, v84, v15, *(void **)(a1 + 440), *(unsigned int *)(a1 + 428), (unsigned int *)&v81 + 1, (void **)&v80, (unsigned int *)&v81, (void (*)(unint64_t, unsigned int, unsigned int, void *, unsigned int, void **, unsigned int *))callBackMRECArrayReallocator, 0, &v79);
  uint64_t v75 = (int *)v77;
  long long v76 = xmmword_214085190;
  char v78 = 1;
  if (HIDWORD(v81))
  {
    unint64_t v16 = 0;
    uint64_t v65 = 0;
    uint64_t v66 = 0;
    long long v64 = (void *)(a1 + 256);
    do
    {
      ++*(void *)(a1 + 504);
      unint64_t v17 = v80[v16];
      int v18 = TStringParam::get((TStringParam *)(*(void *)(a1 + 336) + 496));
      if (!TLexicon::applyMask(a1, v17, v18, 0) && (!a4 || !TLexicon::applyMask(a1, v17, a4, 0)))
      {
        if (SDWord_GetName(*(void *)(a1 + 104), v17, (char *)v83, 0x100u) < 0x101)
        {
          __p = v73;
          long long v72 = xmmword_214085190;
          char v74 = 1;
          int v23 = TLocaleInfo::multiByteToUnicode(v12, v83, (uint64_t)&__p);
          if (v23)
          {
            tknPrintf("Warning: '%s' : Can't convert to Unicode. Ignored.\n", v24, v25, v26, v27, v83);
          }
          else
          {
            if (!a6) {
              goto LABEL_31;
            }
            uint64_t v67 = v69;
            long long v68 = xmmword_214085190;
            char v70 = 1;
            if (*((void *)&v72 + 1) >= (unint64_t)v72)
            {
              if (v74)
              {
                LODWORD(v82[0]) = 0;
                int v23 = TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v72 + 1), (int *)v82, 1uLL);
                uint64_t v28 = (__int32 *)__p;
                --*((void *)&v72 + 1);
              }
              else
              {
                uint64_t v28 = (__int32 *)__p;
                if ((void)v72) {
                  *((_DWORD *)__p + v72 - 1) = 0;
                }
              }
            }
            else
            {
              uint64_t v28 = (__int32 *)__p;
              *((_DWORD *)__p + *((void *)&v72 + 1)) = 0;
            }
            TLexicon::getWrittenForm(v23, v28, (uint64_t)&v67);
            unint64_t v29 = *((void *)&v68 + 1);
            if (v70 && v67 != v69 && v67) {
              MEMORY[0x216698730]();
            }
            if (v29 <= a6)
            {
LABEL_31:
              unint64_t v30 = *((void *)&v76 + 1);
              if (!*((void *)&v76 + 1))
              {
                TCollation::collate(v64, a2, (uint64_t)&v75);
                unint64_t v30 = *((void *)&v76 + 1);
              }
              if (v30 >= (unint64_t)v76)
              {
                if (v78)
                {
                  LODWORD(v67) = 0;
                  TBuffer<wchar_t>::insert((uint64_t)&v75, v30, (int *)&v67, 1uLL);
                  unsigned int v31 = v75;
                  --*((void *)&v76 + 1);
                }
                else
                {
                  unsigned int v31 = v75;
                  if ((void)v76) {
                    v75[(void)v76 - 1] = 0;
                  }
                }
              }
              else
              {
                unsigned int v31 = v75;
                v75[v30] = 0;
              }
              if (*((void *)&v72 + 1) >= (unint64_t)v72)
              {
                if (v74)
                {
                  LODWORD(v67) = 0;
                  TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v72 + 1), (int *)&v67, 1uLL);
                  uint64_t v32 = __p;
                  --*((void *)&v72 + 1);
                }
                else
                {
                  uint64_t v32 = __p;
                  if ((void)v72) {
                    *((_DWORD *)__p + v72 - 1) = 0;
                  }
                }
              }
              else
              {
                uint64_t v32 = __p;
                *((_DWORD *)__p + *((void *)&v72 + 1)) = 0;
              }
              if (!TCollation::collprefixcmp(v64, v31, (uint64_t)v32))
              {
                char v62 = v11;
                if (*((void *)&v72 + 1) >= (unint64_t)v72)
                {
                  if (v74)
                  {
                    LODWORD(v67) = 0;
                    TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v72 + 1), (int *)&v67, 1uLL);
                    BOOL v33 = (const __int32 *)__p;
                    --*((void *)&v72 + 1);
                  }
                  else
                  {
                    BOOL v33 = (const __int32 *)__p;
                    if ((void)v72) {
                      *((_DWORD *)__p + v72 - 1) = 0;
                    }
                  }
                }
                else
                {
                  BOOL v33 = (const __int32 *)__p;
                  *((_DWORD *)__p + *((void *)&v72 + 1)) = 0;
                }
                v82[0] = v33;
                v82[1] = 0;
                THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::find(a1 + 200, v82, &v67);
                if (!*((void *)&v68 + 1) || (uint64_t v34 = *(void *)(*((void *)&v68 + 1) + 16)) == 0) {
                  operator new[]();
                }
                ++v66;
                if ((*(unsigned char *)(v34 + 32) & 2) != 0
                  || TLexicon::findHeadClone(*(void **)(v34 + 8), *(__int32 **)v34) == v34)
                {
                  int v36 = a3[1];
                  unint64_t v35 = (unint64_t)a3[2];
                  if ((unint64_t)v36 >= v35)
                  {
                    uint64_t v38 = ((char *)v36 - (unsigned char *)*a3) >> 3;
                    if ((unint64_t)(v38 + 1) >> 61) {
                      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
                    }
                    uint64_t v39 = v35 - (void)*a3;
                    uint64_t v40 = v39 >> 2;
                    if (v39 >> 2 <= (unint64_t)(v38 + 1)) {
                      uint64_t v40 = v38 + 1;
                    }
                    if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v41 = v40;
                    }
                    if (v41) {
                      unint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(a3 + 2), v41);
                    }
                    else {
                      unint64_t v42 = 0;
                    }
                    uint64_t v43 = &v42[8 * v38];
                    *(void *)uint64_t v43 = v34;
                    int v37 = v43 + 8;
                    long long v45 = (char *)*a3;
                    unint64_t v44 = (char *)a3[1];
                    if (v44 == *a3)
                    {
                      uint64_t v11 = v62;
                    }
                    else
                    {
                      uint64_t v11 = v62;
                      do
                      {
                        uint64_t v46 = *((void *)v44 - 1);
                        v44 -= 8;
                        *((void *)v43 - 1) = v46;
                        v43 -= 8;
                      }
                      while (v44 != v45);
                      unint64_t v44 = (char *)*a3;
                    }
                    *a3 = v43;
                    a3[1] = v37;
                    a3[2] = &v42[8 * v41];
                    if (v44) {
                      operator delete(v44);
                    }
                  }
                  else
                  {
                    *int v36 = v34;
                    int v37 = v36 + 1;
                    uint64_t v11 = v62;
                  }
                  a3[1] = v37;
                  ++v65;
                }
                else
                {
                  uint64_t v11 = v62;
                }
              }
            }
          }
          if (v74)
          {
            if (__p != v73 && __p != 0) {
              MEMORY[0x216698730]();
            }
          }
        }
        else
        {
          tknPrintf("Warning: The voc contains a >= %llu-byte word name, prefix is '%s'. Ignored.\n", v19, v20, v21, v22, 256, v83);
        }
      }
      ++v16;
    }
    while (v16 < HIDWORD(v81));
  }
  else
  {
    uint64_t v65 = 0;
    uint64_t v66 = 0;
  }
  if (v80 != *(void **)(a1 + 440))
  {
    loggableUnicode(a2, &__p);
    if (v72 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    tknPrintf("Warning: '%s' : Inefficient voc search. Required dynamic allocation of size %llu\n", v48, v49, v50, v51, p_p, v81);
    if (SHIBYTE(v72) < 0) {
      operator delete(__p);
    }
    uint64_t v53 = *(void *)(a1 + 440);
    if (v53) {
      MEMORY[0x216698710](v53, 0x80C80B8603338);
    }
    *(void *)(a1 + 440) = v80;
    *(_DWORD *)(a1 + 428) = v81;
  }
  if (v66 == v65)
  {
    unint64_t v54 = ((unsigned char *)a3[1] - (unsigned char *)*a3) >> 3;
    if (v54 - v66 < v54)
    {
      uint64_t v55 = -v66;
      uint64_t v56 = (uint64_t)*a3 + 8 * v54;
      do
        *(void *)(*(void *)(v56 + 8 * v55) + 32) |= 1uLL;
      while (!__CFADD__(v55++, 1));
    }
  }
  int v58 = v79;
  if (v78)
  {
    if (v75 != (int *)v77 && v75 != 0) {
      MEMORY[0x216698730]();
    }
  }
  if (v87)
  {
    if (v84 != v11 && v84 != 0) {
      MEMORY[0x216698730]();
    }
  }
  return v58 == 1;
}

void sub_213DFD3F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (LOBYTE(STACK[0x8C0]))
  {
    unint64_t v19 = STACK[0x4A8];
    if (STACK[0x4A8] != v17)
    {
      if (v19) {
        MEMORY[0x216698730](v19, 0x1000C4052888210);
      }
    }
  }
  if (LOBYTE(STACK[0xCE0]))
  {
    if (STACK[0x8C8] != a17 && STACK[0x8C8] != 0) {
      MEMORY[0x216698730]();
    }
  }
  if (LOBYTE(STACK[0xF28]))
  {
    if (STACK[0xE10] != a15 && STACK[0xE10] != 0) {
      MEMORY[0x216698730]();
    }
  }
  _Unwind_Resume(a1);
}

uint64_t TLexicon::collationSearchRec(uint64_t a1, const __int32 *a2, void **a3, uint64_t a4, void *a5)
{
  if (*a5)
  {
    BOOL v5 = a5;
    uint64_t v7 = a3;
    int v10 = 0;
    while (*a2)
    {
      uint64_t v12 = *(void *)(a1 + 112);
      uint64_t v11 = *(void *)(a1 + 120);
      uint64_t v13 = (v11 - v12) >> 4;
      if (v11 == v12)
      {
        size_t v16 = 0;
        uint64_t v20 = *(void *)(a1 + 120);
      }
      else
      {
        uint64_t v14 = 0;
        unint64_t v15 = 0;
        size_t v16 = 0;
        uint64_t v11 = *(void *)(a1 + 112);
        do
        {
          uint64_t v17 = *(const __int32 **)(v11 + v14);
          size_t v18 = wcslen(v17);
          int v19 = wcsncmp(v17, a2, v18);
          uint64_t v11 = *(void *)(a1 + 112);
          uint64_t v20 = *(void *)(a1 + 120);
          if (v19 >= 1) {
            break;
          }
          if (v19 == 0 && v18 > v16)
          {
            uint64_t v13 = v15;
            size_t v16 = v18;
          }
          ++v15;
          v14 += 16;
        }
        while (v15 < (v20 - v11) >> 4);
        BOOL v5 = a5;
        uint64_t v7 = a3;
      }
      uint64_t v21 = v20 - v11;
      if (v13 == (v20 - v11) >> 4)
      {
        int v22 = *a2++;
        int v36 = v22;
        TBuffer<wchar_t>::insert(a4, *(void *)(a4 + 16), &v36, 1uLL);
      }
      else
      {
        int v23 = *(int **)(v11 + 16 * v13 + 8);
        if (!*v23) {
          return v10 & 1;
        }
        uint64_t v35 = v20 - v11;
        a2 += v16;
        unint64_t v24 = *(void *)(a4 + 16);
        do
        {
          uint64_t v25 = 0;
          while (v23[v25++])
            ;
          TBuffer<wchar_t>::insert(a4, *(void *)(a4 + 16), v23, v25 - 1);
          v10 |= TLexicon::collationSearchRec(a1, a2, v7, a4, v5);
          TBuffer<wchar_t>::resize(a4, v24);
          uint64_t v27 = &v23[wcslen(v23)];
          int v28 = v27[1];
          int v23 = v27 + 1;
        }
        while (v28);
        uint64_t v21 = v35;
      }
      if (v13 != v21 >> 4) {
        return v10 & 1;
      }
    }
    --*v5;
    unint64_t v30 = *(void *)(a4 + 8);
    unint64_t v29 = *(void *)(a4 + 16);
    if (v29 >= v30)
    {
      if (*(unsigned char *)(a4 + 1048))
      {
        int v37 = 0;
        TBuffer<wchar_t>::insert(a4, v29, &v37, 1uLL);
        --*(void *)(a4 + 16);
        unsigned int v31 = *(unsigned int **)a4;
      }
      else
      {
        unsigned int v31 = *(unsigned int **)a4;
        if (v30) {
          v31[v30 - 1] = 0;
        }
      }
    }
    else
    {
      unsigned int v31 = *(unsigned int **)a4;
      *(_DWORD *)(*(void *)a4 + 4 * v29) = 0;
    }
    LOBYTE(v10) = TLexicon::collationSearchInternal(a1, v31, v7, 0, 0, 0);
  }
  else
  {
    LOBYTE(v10) = 0;
  }
  return v10 & 1;
}

uint64_t THashBase<std::pair<wchar_t * const,TWordBlock *>,THashMapCompare<std::pair<wchar_t * const,TWordBlock *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t * const,TWordBlock *>,THash<wchar_t const*>>>::insert@<X0>(uint64_t a1@<X0>, const __int32 **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9 = *(void *)(a1 + 24);
  if (v9 == *(void *)(a1 + 16))
  {
    if (v9)
    {
      if (*(unsigned char *)(a1 + 34))
      {
        tknPrintf("Warning: hashtable resizing, size was %llu\n", (uint64_t)a2, a3, a4, a5, *(void *)(a1 + 24));
        uint64_t v9 = *(void *)(a1 + 16);
      }
      uint64_t v10 = 2 * v9;
    }
    else
    {
      uint64_t v10 = 10781;
    }
    THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::resize(a1, v10);
  }
  uint64_t v11 = *a2;
  size_t v12 = wcslen(*a2);
  unint64_t v13 = 0;
  uint64_t v14 = 4 * v12;
  if (4 * v12)
  {
    do
    {
      uint64_t v15 = *(char *)v11;
      uint64_t v11 = (const __int32 *)((char *)v11 + 1);
      unint64_t v13 = 33 * v13 + v15;
      --v14;
    }
    while (v14);
  }
  unint64_t v16 = v13 % *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 8) + 8 * v16;
  do
  {
    uint64_t v17 = *(void *)v17;
    if (!v17) {
      operator new();
    }
    uint64_t result = wcscmp(*(const __int32 **)(v17 + 8), *a2);
  }
  while (result);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v19 + 8 * v16;
  uint64_t v21 = v19 + 8 * *(void *)(a1 + 16);
  *(void *)a6 = v20;
  *(void *)(a6 + 8) = v21;
  *(void *)(a6 + 16) = v17;
  *(unsigned char *)(a6 + 24) = 0;
  return result;
}

uint64_t TLexicon::addTempWord(uint64_t a1, int *a2, int *a3, int *a4, const __int32 *a5)
{
  uint64_t v20 = (__int32 *)v22;
  long long v21 = xmmword_214085190;
  char v23 = 1;
  if (!a2
    || (TBuffer<wchar_t>::assign((uint64_t)&v20, a2), (a2 = (int *)*((void *)&v21 + 1)) == 0)
    || a3 && *a3
    || a4 && *a4)
  {
    TBuffer<wchar_t>::insert((uint64_t)&v20, (unint64_t)a2, (int *)&unk_21408CFC4, 1uLL);
  }
  if (a3)
  {
    uint64_t v9 = 0;
    while (a3[v9++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&v20, *((unint64_t *)&v21 + 1), a3, v9 - 1);
  }
  if (a4 && *a4)
  {
    TBuffer<wchar_t>::insert((uint64_t)&v20, *((unint64_t *)&v21 + 1), (int *)&unk_21408CFC4, 1uLL);
    uint64_t v11 = 0;
    while (a4[v11++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&v20, *((unint64_t *)&v21 + 1), a4, v11 - 1);
  }
  if (a5) {
    size_t v13 = wcslen(a5) + 2;
  }
  else {
    size_t v13 = 1;
  }
  size_t v14 = v13 + *((void *)&v21 + 1);
  if (v14 >> 62) {
    uint64_t v15 = -1;
  }
  else {
    uint64_t v15 = 4 * v14;
  }
  unint64_t v16 = (__int32 *)TAllocator::allocate((TAllocator *)(a1 + 16), v15);
  if (*((void *)&v21 + 1) >= (unint64_t)v21)
  {
    if (v23)
    {
      int v24 = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v20, *((unint64_t *)&v21 + 1), &v24, 1uLL);
      uint64_t v17 = v20;
      --*((void *)&v21 + 1);
    }
    else
    {
      uint64_t v17 = v20;
      if ((void)v21) {
        v20[(void)v21 - 1] = 0;
      }
    }
  }
  else
  {
    uint64_t v17 = v20;
    v20[*((void *)&v21 + 1)] = 0;
  }
  wcscpy(v16, v17);
  if (a5) {
    wcscpy(&v16[*((void *)&v21 + 1) + 1], a5);
  }
  uint64_t v18 = TAllocator::allocate((TAllocator *)(a1 + 16), 40);
  *(void *)uint64_t v18 = v16;
  *(void *)(v18 + 8) = a1;
  *(void *)(v18 + 16) = -1;
  *(_OWORD *)(v18 + 24) = xmmword_214089AD0;
  if (v23 && v20 != (__int32 *)v22 && v20) {
    MEMORY[0x216698730]();
  }
  return v18;
}

void sub_213DFDAD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (LOBYTE(STACK[0x420]) && a10 != v10)
  {
    if (a10) {
      MEMORY[0x216698730]();
    }
  }
  _Unwind_Resume(a1);
}

uint64_t THashBase<std::pair<wchar_t * const,TWordBlock *>,THashMapCompare<std::pair<wchar_t * const,TWordBlock *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t * const,TWordBlock *>,THash<wchar_t const*>>>::erase(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = **(void ***)a2;
  std::vector<std::string>::size_type v4 = *(void **)(a2 + 16);
  if (v3 != v4)
  {
    do
    {
      BOOL v5 = v3;
      unint64_t v3 = (void *)*v3;
    }
    while (v3 != v4);
    *BOOL v5 = *v4;
    --*(void *)(a1 + 24);
LABEL_5:
    JUMPOUT(0x216698730);
  }
  **(void **)a2 = *v3;
  uint64_t result = *(void *)(a2 + 16);
  --*(void *)(a1 + 24);
  if (result) {
    goto LABEL_5;
  }
  return result;
}

unint64_t *TLexicon::cleanCache(TLexicon *this)
{
  ++*((void *)this + 65);
  TAllocator::clear((TLexicon *)((char *)this + 16));
  unint64_t v2 = *((void *)this + 28);
  unint64_t v3 = (TParam *)(*((void *)this + 42) + 2576);
  uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle(v3);
  uint64_t result = (unint64_t *)TParam::getValidConfig(v3, ActiveConfigHandle);
  if (v2 < *((int *)v3 + (void)result + 40)) {
    return result;
  }
  std::vector<std::string>::size_type v6 = (TParam *)(*((void *)this + 42) + 2928);
  uint64_t v7 = TParam::getActiveConfigHandle(v6);
  uint64_t result = (unint64_t *)TParam::getValidConfig(v6, v7);
  uint64_t v8 = *((int *)v6 + (void)result + 40);
  unint64_t v9 = *((void *)this + 41) - v8;
  uint64_t v10 = *((void *)this + 19);
  if (v10 >= 1)
  {
    uint64_t v11 = (void *)*((void *)this + 18);
    size_t v12 = &v11[v10];
    while (1)
    {
      size_t v13 = (void *)*v11;
      if (*v11) {
        break;
      }
      if (++v11 >= v12) {
        goto LABEL_6;
      }
    }
    while (1)
    {
      while (1)
      {
        uint64_t result = (unint64_t *)v13[2];
        if (*result > v9) {
          break;
        }
        if (!v13[1] || (MEMORY[0x216698710](v13[1], 0x1000C8052888210), v13[2])) {
          MEMORY[0x216698730]();
        }
        v49[0] = v11;
        v49[1] = v12;
        v49[2] = v13;
        size_t v13 = (void *)*v13;
        if (!v13)
        {
          uint64_t v19 = v11 + 1;
          while (1)
          {
            uint64_t v11 = v19;
            if (v19 >= v12) {
              break;
            }
            ++v19;
            size_t v13 = (void *)*v11;
            if (*v11) {
              goto LABEL_21;
            }
          }
          size_t v13 = 0;
        }
LABEL_21:
        uint64_t result = (unint64_t *)THashBase<std::pair<wchar_t * const,TWordBlock *>,THashMapCompare<std::pair<wchar_t * const,TWordBlock *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t * const,TWordBlock *>,THash<wchar_t const*>>>::erase((uint64_t)this + 136, (uint64_t)v49);
        if (!v13) {
          goto LABEL_6;
        }
      }
      *result -= v9;
      size_t v13 = (void *)*v13;
      if (!v13) {
        break;
      }
LABEL_28:
      if (!v13) {
        goto LABEL_6;
      }
    }
    uint64_t v20 = v11 + 1;
    while (v20 < v12)
    {
      long long v21 = (void *)*v20++;
      size_t v13 = v21;
      if (v21)
      {
        uint64_t v11 = v20 - 1;
        goto LABEL_28;
      }
    }
  }
LABEL_6:
  uint64_t v14 = *((void *)this + 27);
  if (v14 < 1) {
    goto LABEL_10;
  }
  uint64_t v15 = (char *)this + 200;
  unint64_t v16 = (void *)*((void *)this + 26);
  uint64_t v17 = &v16[v14];
  while (1)
  {
    uint64_t v18 = (void *)*v16;
    if (*v16) {
      break;
    }
    if (++v16 >= v17) {
      goto LABEL_10;
    }
  }
  int v22 = (char *)this + 176;
  unint64_t v41 = v9;
  while (1)
  {
    uint64_t v23 = v18[2];
    unint64_t v24 = *(void *)(v23 + 24);
    BOOL v25 = v24 > v9;
    unint64_t v26 = v24 - v9;
    if (!v25)
    {
      long long v45 = (__int32 *)v47;
      long long v46 = xmmword_214085190;
      char v48 = 1;
      TLexicon::getTokenName((int)result, *(__int32 **)v23, (uint64_t)&v45);
      if (*((void *)&v46 + 1) >= (unint64_t)v46)
      {
        if (v48)
        {
          v50[0] = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v45, *((unint64_t *)&v46 + 1), v50, 1uLL);
          unint64_t v29 = v45;
          --*((void *)&v46 + 1);
        }
        else
        {
          unint64_t v29 = v45;
          if ((void)v46) {
            v45[(void)v46 - 1] = 0;
          }
        }
      }
      else
      {
        unint64_t v29 = v45;
        v45[*((void *)&v46 + 1)] = 0;
      }
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, v29);
      unint64_t v30 = std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::find<std::wstring>((uint64_t)v22, (uint64_t)__p);
      if (v44 < 0) {
        operator delete(__p[0]);
      }
      if ((void *)((char *)this + 184) != v30)
      {
        unsigned int v31 = v15;
        uint64_t v32 = v8;
        uint64_t v33 = v30[7];
        uint64_t v34 = (const __int32 ***)(v33 + 24);
        if (*(void *)(v33 + 8))
        {
          do
          {
            if (*((void *)&v46 + 1) >= (unint64_t)v46)
            {
              if (v48)
              {
                LODWORD(__p[0]) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v45, *((unint64_t *)&v46 + 1), (int *)__p, 1uLL);
                uint64_t v35 = v45;
                --*((void *)&v46 + 1);
              }
              else
              {
                uint64_t v35 = v45;
                if ((void)v46) {
                  v45[(void)v46 - 1] = 0;
                }
              }
            }
            else
            {
              uint64_t v35 = v45;
              v45[*((void *)&v46 + 1)] = 0;
            }
            int v36 = wcscmp(v35, **v34);
            int v37 = *v34++;
            v37[4] = (const __int32 *)((unint64_t)v37[4] & 0xFFFFFFFFFFFFFFFCLL | (2 * (v36 == 0)));
          }
          while (v34 != (const __int32 ***)(v33 + 24 + 8 * *(void *)(v33 + 8)));
        }
        MEMORY[0x216698730](v33, 0x1000C4057661CB1);
        int v22 = (char *)this + 176;
        std::__tree<std::__value_type<std::wstring,TPItnRuleHandle_fake **>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,TPItnRuleHandle_fake **>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,TPItnRuleHandle_fake **>>>::erase((uint64_t **)this + 22, (uint64_t)v30);
        uint64_t v8 = v32;
        uint64_t v15 = v31;
        unint64_t v9 = v41;
      }
      uint64_t v38 = (void *)v18[2];
      if (!*v38 || (MEMORY[0x216698710](*v38, 0x1000C8052888210), v18[2])) {
        MEMORY[0x216698730]();
      }
      v42[0] = v16;
      v42[1] = v17;
      v42[2] = v18;
      uint64_t v18 = (void *)*v18;
      if (!v18)
      {
        uint64_t v39 = v16 + 1;
        while (1)
        {
          unint64_t v16 = v39;
          if (v39 >= v17) {
            break;
          }
          ++v39;
          uint64_t v18 = (void *)*v16;
          if (*v16) {
            goto LABEL_65;
          }
        }
        uint64_t v18 = 0;
      }
LABEL_65:
      uint64_t result = (unint64_t *)THashBase<std::pair<wchar_t * const,TWordBlock *>,THashMapCompare<std::pair<wchar_t * const,TWordBlock *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t * const,TWordBlock *>,THash<wchar_t const*>>>::erase((uint64_t)v15, (uint64_t)v42);
      if (v48)
      {
        uint64_t result = (unint64_t *)v45;
        if (v45 != (__int32 *)v47 && v45 != 0) {
          uint64_t result = (unint64_t *)MEMORY[0x216698730]();
        }
      }
      goto LABEL_71;
    }
    *(void *)(v23 + 24) = v26;
    uint64_t v18 = (void *)*v18;
    if (!v18) {
      break;
    }
LABEL_71:
    if (!v18) {
      goto LABEL_10;
    }
  }
  uint64_t v27 = v16 + 1;
  while (v27 < v17)
  {
    int v28 = (void *)*v27++;
    uint64_t v18 = v28;
    if (v28)
    {
      unint64_t v16 = v27 - 1;
      goto LABEL_71;
    }
  }
LABEL_10:
  *((void *)this + 41) = v8;
  return result;
}

void sub_213DFE000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (LOBYTE(STACK[0x480]) && a22 != a11)
  {
    if (a22) {
      MEMORY[0x216698730]();
    }
  }
  _Unwind_Resume(a1);
}

void TLexicon::save(TLexicon *this, TDataManager *a2, FileSpec *a3)
{
  if (a3) {
    SDVoc_Save(*((void *)this + 13), a3, 1u, 0, 0);
  }
  if (a2)
  {
    BOOL v5 = (char *)this + 72;
    if (*((char *)this + 95) < 0) {
      BOOL v5 = *(const char **)v5;
    }
    TOutputModel::TOutputModel((TOutputModel *)v23, 0, a2, v5, *((const TDataManager **)this + 43));
    TDataManager::setIntVar(a2, "LexVersion");
    if (v24 >= 2)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v17);
      TOutputStream::TOutputStream(v16, &v17, (uint64_t)"LexParam", (uint64_t)this + 240);
      TParamManager::save(*((void **)this + 42), v16, 1);
      std::stringbuf::str();
      if ((v15 & 0x80u) == 0) {
        std::vector<std::string>::size_type v6 = __p;
      }
      else {
        std::vector<std::string>::size_type v6 = (void **)__p[0];
      }
      if ((v15 & 0x80u) == 0) {
        unint64_t v7 = v15;
      }
      else {
        unint64_t v7 = (unint64_t)__p[1];
      }
      (*(void (**)(TDataManager *, const char *, void **, unint64_t))(*(void *)a2 + 48))(a2, "LexParam", v6, v7);
      if ((char)v15 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v17 = (void *)*MEMORY[0x263F8C2C8];
      *(void **)((char *)&v17 + *((void *)v17 - 3)) = *(void **)(MEMORY[0x263F8C2C8] + 24);
      uint64_t v18 = MEMORY[0x263F8C318] + 16;
      if (v21 < 0) {
        operator delete(v20);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x2166986E0](&v22);
    }
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    if ((*(uint64_t (**)(void, const char *, void, void))(**((void **)this + 43) + 40))(*((void *)this + 43), "LexCollation", 0, 0))
    {
      TDataManager::getStringVar(*((void *)this + 43));
      if (v19 >= 0) {
        uint64_t v8 = &v17;
      }
      else {
        uint64_t v8 = v17;
      }
      if (v19 >= 0) {
        uint64_t v9 = HIBYTE(v19);
      }
      else {
        uint64_t v9 = v18;
      }
      (*(void (**)(TDataManager *, const char *, void *, uint64_t))(*(void *)a2 + 48))(a2, "LexCollation", v8, v9);
    }
    if ((*(uint64_t (**)(void, const char *, void, void))(**((void **)this + 43) + 40))(*((void *)this + 43), "LexUpgrade", 0, 0))
    {
      TDataManager::getStringVar(*((void *)this + 43));
      if (v19 >= 0) {
        uint64_t v10 = &v17;
      }
      else {
        uint64_t v10 = v17;
      }
      if (v19 >= 0) {
        uint64_t v11 = HIBYTE(v19);
      }
      else {
        uint64_t v11 = v18;
      }
      (*(void (**)(TDataManager *, const char *, void *, uint64_t))(*(void *)a2 + 48))(a2, "LexUpgrade", v10, v11);
    }
    if ((*(uint64_t (**)(void, const char *, void, void))(**((void **)this + 43) + 40))(*((void *)this + 43), "LexUpgradeSpelling", 0, 0))
    {
      TDataManager::getStringVar(*((void *)this + 43));
      if (v19 >= 0) {
        size_t v12 = &v17;
      }
      else {
        size_t v12 = v17;
      }
      if (v19 >= 0) {
        uint64_t v13 = HIBYTE(v19);
      }
      else {
        uint64_t v13 = v18;
      }
      (*(void (**)(TDataManager *, const char *, void *, uint64_t))(*(void *)a2 + 48))(a2, "LexUpgradeSpelling", v12, v13);
    }
    (*(void (**)(void))(**((void **)this + 43) + 24))(*((void *)this + 43));
    if (SHIBYTE(v19) < 0) {
      operator delete(v17);
    }
  }
}

void sub_213DFE4A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t TLexicon::loadUpgradeMap(TLexicon *this, int a2, uint64_t a3)
{
  uint64_t v4 = 368;
  if (!a2) {
    uint64_t v4 = 376;
  }
  uint64_t v3 = a3 - *(int *)(*((void *)this + 42) + 296);
  if (!*(void *)(*(void *)((char *)this + v4) + 8 * v3)) {
    operator new();
  }
  return *(void *)(*(void *)((char *)this + v4) + 8 * v3);
}

void sub_213DFF3F0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, TFileObjectParser *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, TAllocator *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  MEMORY[0x216698730](v58, 0x1070C40ADD13FEBLL);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    if (a14)
    {
      TFileObjectParser::~TFileObjectParser(a14);
      MEMORY[0x216698730]();
    }
    std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::destroy(a19, *(void **)(a19 + 8));
    MEMORY[0x216698730](a19, 0x1020C4062D53EE8);
    TAllocator::clear(a20);
    MEMORY[0x216698730](a20, 0x1010C40CCBCF24ELL);
    __cxa_rethrow();
  }
  TInputStream::~TInputStream((TInputStream *)&a35);
  std::istringstream::~istringstream((uint64_t)&a58);
  if (*(char *)(v59 - 193) < 0) {
    operator delete(*(void **)(v59 - 216));
  }
  _Unwind_Resume(a1);
}

void sub_213DFF6DC()
{
}

void sub_213DFF708(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x213DFF714);
  }
  __clang_call_terminate(a1);
}

uint64_t TLexicon::getNGramScore(TLexicon *this, const TWord *a2, const TWord *a3, const TWord *a4, const TWord *a5, int a6)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    uint64_t v8 = 0;
    if (!a3) {
      goto LABEL_14;
    }
    goto LABEL_9;
  }
  uint64_t v7 = *((void *)a2 + 2);
  if (v7 == -1)
  {
    uint64_t v24 = -1;
    uint64_t v25 = -1;
    if (a6)
    {
      uint64_t v9 = *((void *)this + 56);
      uint64_t v24 = *((void *)this + 13);
      uint64_t v25 = v9;
    }
  }
  else
  {
    uint64_t v24 = *(void *)(*((void *)a2 + 1) + 104);
    uint64_t v25 = v7;
  }
  uint64_t v8 = 1;
  if (a3)
  {
LABEL_9:
    uint64_t v10 = *((void *)a3 + 2);
    if (v10 == -1)
    {
      size_t v12 = &v24 + 2 * v8;
      *size_t v12 = -1;
      v12[1] = -1;
      if (a6)
      {
        uint64_t v13 = *((void *)this + 56);
        *size_t v12 = *((void *)this + 13);
        v12[1] = v13;
      }
    }
    else
    {
      uint64_t v11 = &v24 + 2 * v8;
      uint64_t *v11 = *(void *)(*((void *)a3 + 1) + 104);
      v11[1] = v10;
    }
    ++v8;
  }
LABEL_14:
  if (a4)
  {
    uint64_t v14 = *((void *)a4 + 2);
    if (v14 == -1)
    {
      unint64_t v16 = &v24 + 2 * v8;
      *unint64_t v16 = -1;
      v16[1] = -1;
      if (a6)
      {
        uint64_t v17 = *((void *)this + 56);
        *unint64_t v16 = *((void *)this + 13);
        v16[1] = v17;
      }
    }
    else
    {
      unsigned __int8 v15 = &v24 + 2 * v8;
      uint64_t *v15 = *(void *)(*((void *)a4 + 1) + 104);
      v15[1] = v14;
    }
    LODWORD(v8) = v8 + 1;
  }
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v18 = *((void *)a5 + 2);
  if (v18 != -1)
  {
    uint64_t v19 = *(void *)(*((void *)a5 + 1) + 104);
LABEL_24:
    uint64_t v22 = v19;
    uint64_t v23 = v18;
    goto LABEL_25;
  }
  uint64_t v22 = -1;
  uint64_t v23 = -1;
  if (a6)
  {
    uint64_t v19 = *((void *)this + 13);
    uint64_t v18 = *((void *)this + 56);
    goto LABEL_24;
  }
LABEL_25:
  int v21 = 0;
  SDLm_LmScore(0, 0, 0, &v24, v8, &v22, 1u, (uint64_t)&v21, 1u, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  return v21;
}

void TLexicon::mapWordSequence(TLexicon *a1, uint64_t *a2, unint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, unint64_t *a7)
{
  uint64_t v11 = (TParam *)(*((void *)a1 + 42) + 144);
  uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle(v11);
  TParam::getValidConfig(v11, ActiveConfigHandle);
  if (a3 >= 4) {
    unint64_t v13 = 4;
  }
  else {
    unint64_t v13 = a3;
  }
  *(void *)&long long v105 = 0;
  std::vector<TWord const*>::vector(&v103, v13, &v105);
  if (v104 != (unsigned char *)v103)
  {
    unint64_t v14 = 0;
    uint64_t v15 = 8 * a3 - 8;
    do
    {
      unint64_t v16 = *(__int32 **)(*a2 + v15);
      uint64_t Word = TLexicon::findWord(a1, v16);
      if (!Word) {
        uint64_t Word = TLexicon::addTempWord((uint64_t)a1, v16, 0, 0, 0);
      }
      v103[v14++] = Word;
      v15 -= 8;
    }
    while (v14 < (v104 - (unsigned char *)v103) >> 3);
  }
  v100 = 0;
  v101 = 0;
  v102 = 0;
  memset(v99, 0, sizeof(v99));
  uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v102, 1uLL);
  uint64_t v20 = &v18[8 * v19];
  *(void *)uint64_t v18 = v99;
  int v21 = v18 + 8;
  uint64_t v23 = v100;
  uint64_t v22 = v101;
  if (v101 != v100)
  {
    do
    {
      uint64_t v24 = *((void *)v22 - 1);
      v22 -= 8;
      *((void *)v18 - 1) = v24;
      v18 -= 8;
    }
    while (v22 != v23);
    uint64_t v22 = v100;
  }
  v100 = v18;
  v101 = v21;
  v102 = v20;
  if (v22) {
    operator delete(v22);
  }
  v101 = v21;
  v95 = 0;
  uint64_t v96 = 0;
  uint64_t v97 = 0;
  char v98 = 1;
  v94 = &unk_26C4E52E8;
  TAllocator::TAllocator((TAllocator *)v93, 2048);
  unint64_t v25 = (v101 - v100) >> 3;
  __p = 0;
  v91 = 0;
  uint64_t v92 = 0;
  uint64_t v26 = *a2;
  if (a3 >= (a2[1] - *a2) >> 3)
  {
    unint64_t v27 = 0;
  }
  else
  {
    unint64_t v27 = 0;
    do
    {
      TLexicon::mapWord((uint64_t)a1, *(void *)(v26 + 8 * a3), a4, a5, (uint64_t)&__p);
      THashBase<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THashMapCompare<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,std::equal_to<TDecodeLinkMapWord::THistory>>,THashMapFunction<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THash<TDecodeLinkMapWord::THistory>>>::clear(&v94);
      unint64_t v29 = __p;
      int v28 = v91;
      if (v91 != __p)
      {
        unint64_t v30 = 0;
        do
        {
          unint64_t v31 = v27;
          if (v27 < v25)
          {
            do
            {
              uint64_t v32 = (void *)TAllocator::allocate((TAllocator *)v93, 32);
              uint64_t v33 = v32;
              uint64_t v34 = *(void *)&v100[8 * v31];
              *uint64_t v32 = *((void *)__p + v30);
              v32[1] = v34;
              if (v34)
              {
                uint64_t v35 = *(void *)(v34 + 16);
                uint64_t v34 = *(void *)(v34 + 24);
              }
              else
              {
                uint64_t v35 = 0;
              }
              v32[2] = v35;
              v32[3] = v34 + v30;
              TDecodeLinkMapWord::computeHistory(v32, (uint64_t)&v88, &v103);
              v33[2] += TLexicon::getNGramScore(a1, *((const TWord **)&v89 + 1), (const TWord *)v89, *((const TWord **)&v88 + 1), (const TWord *)v88, 0);
              long long v105 = v88;
              long long v106 = v89;
              v107 = 0;
              THashBase<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THashMapCompare<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,std::equal_to<TDecodeLinkMapWord::THistory>>,THashMapFunction<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THash<TDecodeLinkMapWord::THistory>>>::find((uint64_t)&v94, &v105, &v86);
              if (v87)
              {
                uint64_t v39 = *(void *)(v87 + 40);
                unint64_t v40 = v33[2];
                unint64_t v41 = *(void *)(v39 + 16);
                if (v40 < v41 || v40 == v41 && v33[3] < *(void *)(v39 + 24)) {
                  *(void *)(v87 + 40) = v33;
                }
              }
              else
              {
                long long v105 = v88;
                long long v106 = v89;
                v107 = v33;
                THashBase<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THashMapCompare<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,std::equal_to<TDecodeLinkMapWord::THistory>>,THashMapFunction<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THash<TDecodeLinkMapWord::THistory>>>::insert((uint64_t)&v94, &v105, v36, v37, v38, (uint64_t)v85);
              }
              ++v31;
            }
            while (v25 != v31);
            unint64_t v29 = __p;
            int v28 = v91;
          }
          ++v30;
        }
        while (v30 < (v28 - v29) >> 3);
      }
      uint64_t v42 = v101 - v100;
      unint64_t v25 = v97 + ((v101 - v100) >> 3);
      std::vector<TPItnTagHandle_fake **>::reserve((void **)&v100, v25);
      if (v96 >= 1)
      {
        uint64_t v43 = v95;
        unint64_t v44 = (unint64_t)&v95[v96];
        while (1)
        {
          long long v45 = (void *)*v43;
          if (*v43) {
            break;
          }
          if ((unint64_t)++v43 >= v44) {
            goto LABEL_35;
          }
        }
        long long v46 = v101;
        do
        {
LABEL_38:
          if (v46 >= v102)
          {
            uint64_t v47 = (v46 - v100) >> 3;
            if ((unint64_t)(v47 + 1) >> 61) {
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v48 = (v102 - v100) >> 2;
            if (v48 <= v47 + 1) {
              unint64_t v48 = v47 + 1;
            }
            if ((unint64_t)(v102 - v100) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v49 = v48;
            }
            if (v49) {
              uint64_t v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)&v102, v49);
            }
            else {
              uint64_t v50 = 0;
            }
            uint64_t v51 = &v50[8 * v47];
            *(void *)uint64_t v51 = v45[5];
            long long v46 = v51 + 8;
            uint64_t v53 = v100;
            uint64_t v52 = v101;
            if (v101 != v100)
            {
              do
              {
                uint64_t v54 = *((void *)v52 - 1);
                v52 -= 8;
                *((void *)v51 - 1) = v54;
                v51 -= 8;
              }
              while (v52 != v53);
              uint64_t v52 = v100;
            }
            v100 = v51;
            v101 = v46;
            v102 = &v50[8 * v49];
            if (v52) {
              operator delete(v52);
            }
          }
          else
          {
            *(void *)long long v46 = v45[5];
            v46 += 8;
          }
          v101 = v46;
          long long v45 = (void *)*v45;
        }
        while (v45);
        uint64_t v55 = v43 + 1;
        while ((unint64_t)v55 < v44)
        {
          uint64_t v56 = (void *)*v55++;
          long long v45 = v56;
          if (v56)
          {
            uint64_t v43 = v55 - 1;
            goto LABEL_38;
          }
        }
      }
LABEL_35:
      unint64_t v27 = v42 >> 3;
      ++a3;
      uint64_t v26 = *a2;
    }
    while (a3 < (a2[1] - *a2) >> 3);
  }
  uint64_t v57 = 0;
  unint64_t v58 = v25 - v27;
  if (v25 > v27)
  {
    uint64_t v59 = &v100[8 * v27];
    do
    {
      uint64_t v60 = *(void **)v59;
      if (!v57 || (v61 = v60[2], unint64_t v62 = v57[2], v61 < v62) || v61 == v62 && v60[3] < v57[3]) {
        uint64_t v57 = *(void **)v59;
      }
      v59 += 8;
      --v58;
    }
    while (v58);
  }
  uint64_t v63 = (void **)(v57 + 1);
  if (v57[1])
  {
    long long v64 = a7 + 2;
    uint64_t v65 = (void *)a7[1];
    do
    {
      if ((unint64_t)v65 >= *v64)
      {
        uint64_t v66 = (uint64_t)((uint64_t)v65 - *a7) >> 3;
        if ((unint64_t)(v66 + 1) >> 61) {
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v67 = *v64 - *a7;
        uint64_t v68 = v67 >> 2;
        if (v67 >> 2 <= (unint64_t)(v66 + 1)) {
          uint64_t v68 = v66 + 1;
        }
        if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v69 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v69 = v68;
        }
        if (v69) {
          char v70 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(a7 + 2), v69);
        }
        else {
          char v70 = 0;
        }
        uint64_t v71 = &v70[8 * v66];
        *(void *)uint64_t v71 = *v57;
        uint64_t v65 = v71 + 8;
        uint64_t v73 = (char *)*a7;
        long long v72 = (char *)a7[1];
        if (v72 != (char *)*a7)
        {
          do
          {
            uint64_t v74 = *((void *)v72 - 1);
            v72 -= 8;
            *((void *)v71 - 1) = v74;
            v71 -= 8;
          }
          while (v72 != v73);
          long long v72 = (char *)*a7;
        }
        *a7 = (unint64_t)v71;
        a7[1] = (unint64_t)v65;
        a7[2] = (unint64_t)&v70[8 * v69];
        if (v72) {
          operator delete(v72);
        }
      }
      else
      {
        *v65++ = *v57;
      }
      a7[1] = (unint64_t)v65;
      uint64_t v57 = *v63;
      uint64_t v75 = *v63;
      uint64_t v76 = v75[1];
      uint64_t v63 = (void **)(v75 + 1);
    }
    while (v76);
  }
  else
  {
    uint64_t v65 = (void *)a7[1];
  }
  unint64_t v77 = *a7;
  char v78 = v65 - 1;
  if ((void *)*a7 != v65 && (unint64_t)v78 > v77)
  {
    unint64_t v80 = v77 + 8;
    do
    {
      uint64_t v81 = *(void *)(v80 - 8);
      *(void *)(v80 - 8) = *v78;
      *v78-- = v81;
      BOOL v82 = v80 >= (unint64_t)v78;
      v80 += 8;
    }
    while (!v82);
  }
  if (__p)
  {
    v91 = __p;
    operator delete(__p);
  }
  TAllocator::clear((TAllocator *)v93);
  THashBase<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THashMapCompare<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,std::equal_to<TDecodeLinkMapWord::THistory>>,THashMapFunction<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THash<TDecodeLinkMapWord::THistory>>>::~THashBase(&v94);
  if (v100)
  {
    v101 = v100;
    operator delete(v100);
  }
  if (v103)
  {
    v104 = v103;
    operator delete(v103);
  }
}

void sub_213DFFEE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  THashBase<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THashMapCompare<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,std::equal_to<TDecodeLinkMapWord::THistory>>,THashMapFunction<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THash<TDecodeLinkMapWord::THistory>>>::~THashBase(&a32);
  uint64_t v34 = *(void **)(v32 - 176);
  if (v34)
  {
    *(void *)(v32 - 168) = v34;
    operator delete(v34);
  }
  uint64_t v35 = *(void **)(v32 - 152);
  if (v35)
  {
    *(void *)(v32 - 144) = v35;
    operator delete(v35);
  }
  _Unwind_Resume(a1);
}

void TLexicon::mapWord(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = MEMORY[0x270FA5388](a1, a2, a3, a4, a5);
  uint64_t v7 = (void **)v6;
  int v9 = v8;
  uint64_t v11 = v10;
  unint64_t v13 = (__int32 *)v12;
  unint64_t v14 = (TLexicon *)v5;
  uint64_t v87 = (__int32 *)v12;
  std::vector<TItnRule *>::resize(v6, 0);
  uint64_t v15 = (TParam *)(*((void *)v14 + 42) + 144);
  uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle(v15);
  if (*((_DWORD *)v15 + TParam::getValidConfig(v15, ActiveConfigHandle) + 40) == v11)
  {
    uint64_t Word = TLexicon::findWord(v14, v13);
    if (!Word) {
      uint64_t Word = TLexicon::addTempWord((uint64_t)v14, v13, 0, 0, 0);
    }
    unint64_t v18 = (unint64_t)v7[2];
    uint64_t v19 = (uint64_t *)v7[1];
    if ((unint64_t)v19 >= v18)
    {
      uint64_t v42 = ((char *)v19 - (unsigned char *)*v7) >> 3;
      if ((unint64_t)(v42 + 1) >> 61) {
LABEL_115:
      }
        std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
      uint64_t v43 = v18 - (void)*v7;
      uint64_t v44 = v43 >> 2;
      if (v43 >> 2 <= (unint64_t)(v42 + 1)) {
        uint64_t v44 = v42 + 1;
      }
      if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v45 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v45 = v44;
      }
      if (v45) {
        long long v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(v7 + 2), v45);
      }
      else {
        long long v46 = 0;
      }
      uint64_t v47 = (uint64_t *)&v46[8 * v42];
      unint64_t v48 = &v46[8 * v45];
      *uint64_t v47 = Word;
      uint64_t v20 = v47 + 1;
      uint64_t v50 = (char *)*v7;
      unint64_t v49 = (char *)v7[1];
      if (v49 != *v7)
      {
        do
        {
          uint64_t v51 = *((void *)v49 - 1);
          v49 -= 8;
          *--uint64_t v47 = v51;
        }
        while (v49 != v50);
        unint64_t v49 = (char *)*v7;
      }
      std::string *v7 = v47;
      v7[1] = v20;
      v7[2] = v48;
      if (v49) {
        operator delete(v49);
      }
    }
    else
    {
      uint64_t *v19 = Word;
      uint64_t v20 = v19 + 1;
    }
    v7[1] = v20;
  }
  else
  {
    uint64_t UpgradeMap = TLexicon::loadUpgradeMap(v14, v9, v11);
    uint64_t v22 = std::__tree<std::__value_type<wchar_t const*,wchar_t const*>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,wchar_t const*>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,wchar_t const*>>>::__equal_range_multi<wchar_t const*>(UpgradeMap, (const __int32 **)&v87);
    if (v22 == v23
      || (uint64_t v24 = v22, v25 = v23, LODWORD(v22) = wcscmp((const __int32 *)v22[5], dword_21408D024), !v22))
    {
      v83 = (unsigned int *)v85;
      long long v84 = xmmword_214085190;
      char v86 = 1;
      int v79 = (unsigned int *)v81;
      long long v80 = xmmword_214085190;
      char v82 = 1;
      uint64_t v75 = (int *)v77;
      long long v76 = xmmword_214085190;
      char v78 = 1;
      TLexicon::getWrittenForm((int)v22, v87, (uint64_t)&v83);
      getSecondField(v87, (uint64_t)&v79);
      getThirdField(v87, (uint64_t)&v75);
      uint64_t v71 = (__int32 *)v73;
      long long v72 = xmmword_214085190;
      char v74 = 1;
      if (*((void *)&v84 + 1) >= (unint64_t)v84)
      {
        if (v86)
        {
          int v88 = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v83, *((unint64_t *)&v84 + 1), &v88, 1uLL);
          unint64_t v41 = v83;
          --*((void *)&v84 + 1);
        }
        else
        {
          unint64_t v41 = v83;
          if ((void)v84) {
            v83[(void)v84 - 1] = 0;
          }
        }
      }
      else
      {
        unint64_t v41 = v83;
        v83[*((void *)&v84 + 1)] = 0;
      }
      if (*((void *)&v80 + 1) >= (unint64_t)v80)
      {
        if (v82)
        {
          int v88 = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v79, *((unint64_t *)&v80 + 1), &v88, 1uLL);
          uint64_t v52 = v79;
          --*((void *)&v80 + 1);
        }
        else
        {
          uint64_t v52 = v79;
          if ((void)v80) {
            v79[(void)v80 - 1] = 0;
          }
        }
      }
      else
      {
        uint64_t v52 = v79;
        v79[*((void *)&v80 + 1)] = 0;
      }
      if (*((void *)&v76 + 1) >= (unint64_t)v76)
      {
        if (v78)
        {
          int v88 = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v75, *((unint64_t *)&v76 + 1), &v88, 1uLL);
          uint64_t v53 = v75;
          --*((void *)&v76 + 1);
        }
        else
        {
          uint64_t v53 = v75;
          if ((void)v76) {
            v75[(void)v76 - 1] = 0;
          }
        }
      }
      else
      {
        uint64_t v53 = v75;
        v75[*((void *)&v76 + 1)] = 0;
      }
      TLexicon::constructWordName((uint64_t)v14, v41, v52, v53, 1, (uint64_t)&v71);
      if (*((void *)&v72 + 1) >= (unint64_t)v72)
      {
        if (v74)
        {
          int v88 = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v71, *((unint64_t *)&v72 + 1), &v88, 1uLL);
          uint64_t v54 = v71;
          --*((void *)&v72 + 1);
        }
        else
        {
          uint64_t v54 = v71;
          if ((void)v72) {
            v71[(void)v72 - 1] = 0;
          }
        }
      }
      else
      {
        uint64_t v54 = v71;
        v71[*((void *)&v72 + 1)] = 0;
      }
      uint64_t v55 = TLexicon::findWord(v14, v54);
      if (!v55)
      {
        if (*((void *)&v72 + 1) >= (unint64_t)v72)
        {
          if (v74)
          {
            int v88 = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v71, *((unint64_t *)&v72 + 1), &v88, 1uLL);
            uint64_t v56 = v71;
            --*((void *)&v72 + 1);
          }
          else
          {
            uint64_t v56 = v71;
            if ((void)v72) {
              v71[(void)v72 - 1] = 0;
            }
          }
        }
        else
        {
          uint64_t v56 = v71;
          v71[*((void *)&v72 + 1)] = 0;
        }
        uint64_t v55 = TLexicon::addTempWord((uint64_t)v14, v56, 0, 0, 0);
      }
      unint64_t v57 = (unint64_t)v7[2];
      unint64_t v58 = (uint64_t *)v7[1];
      if ((unint64_t)v58 >= v57)
      {
        uint64_t v60 = ((char *)v58 - (unsigned char *)*v7) >> 3;
        if ((unint64_t)(v60 + 1) >> 61) {
          std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v61 = v57 - (void)*v7;
        uint64_t v62 = v61 >> 2;
        if (v61 >> 2 <= (unint64_t)(v60 + 1)) {
          uint64_t v62 = v60 + 1;
        }
        if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v63 = v62;
        }
        if (v63) {
          long long v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(v7 + 2), v63);
        }
        else {
          long long v64 = 0;
        }
        uint64_t v65 = (uint64_t *)&v64[8 * v60];
        uint64_t v66 = &v64[8 * v63];
        uint64_t *v65 = v55;
        uint64_t v59 = v65 + 1;
        uint64_t v68 = (char *)*v7;
        uint64_t v67 = (char *)v7[1];
        if (v67 != *v7)
        {
          do
          {
            uint64_t v69 = *((void *)v67 - 1);
            v67 -= 8;
            *--uint64_t v65 = v69;
          }
          while (v67 != v68);
          uint64_t v67 = (char *)*v7;
        }
        std::string *v7 = v65;
        v7[1] = v59;
        v7[2] = v66;
        if (v67) {
          operator delete(v67);
        }
      }
      else
      {
        *unint64_t v58 = v55;
        uint64_t v59 = v58 + 1;
      }
      v7[1] = v59;
      if (v74)
      {
        BOOL v70 = v71 == (__int32 *)v73 || v71 == 0;
        if (!v70) {
          MEMORY[0x216698730]();
        }
      }
      if (v78 && v75 != (int *)v77 && v75) {
        MEMORY[0x216698730]();
      }
      if (v82 && v79 != (unsigned int *)v81 && v79) {
        MEMORY[0x216698730]();
      }
      if (v86 && v83 != (unsigned int *)v85 && v83) {
        MEMORY[0x216698730]();
      }
    }
    else
    {
      do
      {
        uint64_t v26 = TLexicon::findWord(v14, (__int32 *)v24[5]);
        if (!v26) {
          uint64_t v26 = TLexicon::addTempWord((uint64_t)v14, (int *)v24[5], 0, 0, 0);
        }
        int v28 = (uint64_t *)v7[1];
        unint64_t v27 = (unint64_t)v7[2];
        if ((unint64_t)v28 >= v27)
        {
          uint64_t v30 = ((char *)v28 - (unsigned char *)*v7) >> 3;
          if ((unint64_t)(v30 + 1) >> 61) {
            goto LABEL_115;
          }
          uint64_t v31 = v27 - (void)*v7;
          uint64_t v32 = v31 >> 2;
          if (v31 >> 2 <= (unint64_t)(v30 + 1)) {
            uint64_t v32 = v30 + 1;
          }
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v33 = v32;
          }
          if (v33) {
            uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(v7 + 2), v33);
          }
          else {
            uint64_t v34 = 0;
          }
          uint64_t v35 = (uint64_t *)&v34[8 * v30];
          uint64_t *v35 = v26;
          unint64_t v29 = v35 + 1;
          uint64_t v37 = (char *)*v7;
          uint64_t v36 = (char *)v7[1];
          if (v36 != *v7)
          {
            do
            {
              uint64_t v38 = *((void *)v36 - 1);
              v36 -= 8;
              *--uint64_t v35 = v38;
            }
            while (v36 != v37);
            uint64_t v36 = (char *)*v7;
          }
          std::string *v7 = v35;
          v7[1] = v29;
          v7[2] = &v34[8 * v33];
          if (v36) {
            operator delete(v36);
          }
        }
        else
        {
          *int v28 = v26;
          unint64_t v29 = v28 + 1;
        }
        v7[1] = v29;
        uint64_t v39 = v24[1];
        if (v39)
        {
          do
          {
            unint64_t v40 = (uint64_t **)v39;
            uint64_t v39 = (uint64_t *)*v39;
          }
          while (v39);
        }
        else
        {
          do
          {
            unint64_t v40 = (uint64_t **)v24[2];
            BOOL v70 = *v40 == (uint64_t *)v24;
            uint64_t v24 = v40;
          }
          while (!v70);
        }
        uint64_t v24 = v40;
      }
      while (v40 != v25);
    }
  }
}

void sub_213E0065C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (LOBYTE(STACK[0x428]) && a11 != v15 && a11) {
    MEMORY[0x216698730]();
  }
  if (LOBYTE(STACK[0x848]))
  {
    unint64_t v17 = STACK[0x430];
    if (STACK[0x430] != v14)
    {
      if (v17) {
        MEMORY[0x216698730](v17, 0x1000C4052888210);
      }
    }
  }
  if (LOBYTE(STACK[0xC68]))
  {
    unint64_t v18 = STACK[0x850];
    if (STACK[0x850] != v13)
    {
      if (v18) {
        MEMORY[0x216698730](v18, 0x1000C4052888210);
      }
    }
  }
  if (*(unsigned char *)(v12 + 1048))
  {
    unint64_t v19 = STACK[0xC70];
    if (STACK[0xC70] != v11)
    {
      if (v19) {
        MEMORY[0x216698730](v19, 0x1000C4052888210);
      }
    }
  }
  _Unwind_Resume(a1);
}

void *THashBase<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THashMapCompare<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,std::equal_to<TDecodeLinkMapWord::THistory>>,THashMapFunction<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THash<TDecodeLinkMapWord::THistory>>>::clear(void *result)
{
  uint64_t v1 = result;
  unint64_t v2 = result[2];
  if (v2)
  {
    for (unint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = v1[1];
      uint64_t result = *(void **)(v4 + 8 * i);
      if (result)
      {
        do
        {
          uint64_t v5 = (void *)*result;
          MEMORY[0x216698730]();
          uint64_t result = v5;
        }
        while (v5);
        uint64_t v4 = v1[1];
        unint64_t v2 = v1[2];
      }
      *(void *)(v4 + 8 * i) = 0;
    }
  }
  v1[3] = 0;
  return result;
}

void TDecodeLinkMapWord::computeHistory(void *a1, uint64_t a2, void *a3)
{
  unint64_t v3 = 0;
  if (!a1) {
    goto LABEL_5;
  }
  do
  {
    unint64_t v4 = v3++;
    *(void *)(a2 + 8 * v4) = *a1;
    if (v4 > 2) {
      break;
    }
    a1 = (void *)a1[1];
  }
  while (a1);
  if (v4 <= 2)
  {
LABEL_5:
    unint64_t v5 = 0;
    size_t v6 = 32 - 8 * v3;
    while (v5 < (uint64_t)(a3[1] - *a3) >> 3)
    {
      *(void *)(a2 + 8 * v3 + 8 * v5) = *(void *)(*a3 + 8 * v5);
      ++v5;
      v6 -= 8;
      if (v3 + v5 == 4) {
        return;
      }
    }
    if (v3 + v5 <= 3) {
      bzero((void *)(a2 + 8 * v3 + 8 * v5), v6);
    }
  }
}

void *THashBase<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THashMapCompare<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,std::equal_to<TDecodeLinkMapWord::THistory>>,THashMapFunction<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THash<TDecodeLinkMapWord::THistory>>>::insert@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8 = *(void *)(a1 + 24);
  if (v8 == *(void *)(a1 + 16))
  {
    if (v8)
    {
      if (*(unsigned char *)(a1 + 34))
      {
        tknPrintf("Warning: hashtable resizing, size was %llu\n", (uint64_t)a2, a3, a4, a5, *(void *)(a1 + 24));
        uint64_t v8 = *(void *)(a1 + 16);
      }
      uint64_t v9 = 2 * v8;
    }
    else
    {
      uint64_t v9 = 10781;
    }
    THashBase<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THashMapCompare<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,std::equal_to<TDecodeLinkMapWord::THistory>>,THashMapFunction<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THash<TDecodeLinkMapWord::THistory>>>::resize(a1, v9);
  }
  uint64_t v10 = 0;
  unint64_t v11 = 0;
  do
    unint64_t v11 = 33 * v11 + *((char *)a2 + v10++);
  while (v10 != 32);
  uint64_t v13 = *(void *)(a1 + 8);
  unint64_t v12 = *(void *)(a1 + 16);
  uint64_t v14 = (void *)(v13 + 8 * (v11 % v12));
  uint64_t result = v14;
  do
  {
    uint64_t result = (void *)*result;
    if (!result) {
      operator new();
    }
  }
  while (result[1] != *a2 || result[2] != a2[1] || result[3] != a2[2] || result[4] != a2[3]);
  *(void *)a6 = v14;
  *(void *)(a6 + 8) = v13 + 8 * v12;
  *(void *)(a6 + 16) = result;
  *(unsigned char *)(a6 + 24) = 0;
  return result;
}

__int32 *getSecondField(__int32 *a1, uint64_t a2)
{
  TBuffer<wchar_t>::resize(a2, 0);
  if (*a1 != 92)
  {
LABEL_4:
    uint64_t result = wcschr(a1, 92);
    a1 = result;
    if (!result) {
      return result;
    }
    goto LABEL_7;
  }
  __int32 v4 = a1[1];
  if (v4 == 92)
  {
    ++a1;
  }
  else if (!v4)
  {
    goto LABEL_4;
  }
LABEL_7:
  size_t v6 = a1 + 1;
  uint64_t v7 = wcschr(v6, 92);
  if (v7)
  {
    unint64_t v8 = v7 - v6;
    TBuffer<wchar_t>::resize(a2, 0);
    return (__int32 *)TBuffer<wchar_t>::insert(a2, 0, v6, v8);
  }
  else
  {
    return (__int32 *)TBuffer<wchar_t>::assign(a2, v6);
  }
}

__int32 *getThirdField(__int32 *a1, uint64_t a2)
{
  TBuffer<wchar_t>::resize(a2, 0);
  if (*a1 != 92)
  {
LABEL_4:
    uint64_t result = wcschr(a1, 92);
    a1 = result;
    if (!result) {
      return result;
    }
    goto LABEL_7;
  }
  __int32 v4 = a1[1];
  if (v4 == 92)
  {
    ++a1;
  }
  else if (!v4)
  {
    goto LABEL_4;
  }
LABEL_7:
  uint64_t result = wcschr(a1 + 1, 92);
  if (result)
  {
    return (__int32 *)TBuffer<wchar_t>::assign(a2, result + 1);
  }
  return result;
}

BOOL TLexicon::constructWordName(uint64_t a1, unsigned int *a2, unsigned int *a3, int *a4, int a5, uint64_t a6)
{
  unint64_t v12 = (TParam *)(*(void *)(a1 + 336) + 144);
  uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle(v12);
  unint64_t v14 = *((int *)v12 + TParam::getValidConfig(v12, ActiveConfigHandle) + 40);
  TBuffer<wchar_t>::resize(a6, 0);
  if (*a2)
  {
    if (a5)
    {
      addToWordName(a2, a1 + 240, 1, 0, a6);
    }
    else
    {
      uint64_t v16 = 0;
      while (a2[v16++])
        ;
      TBuffer<wchar_t>::insert(a6, *(void *)(a6 + 16), (int *)a2, v16 - 1);
    }
    BOOL v15 = 0;
    if (!*a3)
    {
LABEL_10:
      if (!*a4) {
        goto LABEL_20;
      }
    }
  }
  else
  {
    BOOL v15 = *a3 == 0;
    if (!*a3) {
      goto LABEL_10;
    }
  }
  int v26 = 92;
  TBuffer<wchar_t>::insert(a6, *(void *)(a6 + 16), &v26, 1uLL);
  if (*a3)
  {
    if (a5)
    {
      addToWordName(a3, a1 + 240, 0, 0, a6);
    }
    else
    {
      uint64_t v18 = 0;
      while (a3[v18++])
        ;
      TBuffer<wchar_t>::insert(a6, *(void *)(a6 + 16), (int *)a3, v18 - 1);
    }
  }
  if (*a4)
  {
    int v27 = 92;
    TBuffer<wchar_t>::insert(a6, *(void *)(a6 + 16), &v27, 1uLL);
    if (!a5)
    {
      uint64_t v21 = 0;
      while (a4[v21++])
        ;
      TBuffer<wchar_t>::insert(a6, *(void *)(a6 + 16), a4, v21 - 1);
      if (v15) {
        return 1;
      }
      goto LABEL_25;
    }
    addToWordName((unsigned int *)a4, a1 + 240, 0, 1, a6);
  }
LABEL_20:
  if (v15) {
    return 1;
  }
LABEL_25:
  unint64_t v24 = *(void *)(a6 + 8);
  unint64_t v23 = *(void *)(a6 + 16);
  if (v23 >= v24)
  {
    if (*(unsigned char *)(a6 + 1048))
    {
      int v28 = 0;
      TBuffer<wchar_t>::insert(a6, v23, &v28, 1uLL);
      --*(void *)(a6 + 16);
      unint64_t v25 = *(int **)a6;
    }
    else
    {
      unint64_t v25 = *(int **)a6;
      if (v24) {
        v25[v24 - 1] = 0;
      }
    }
  }
  else
  {
    unint64_t v25 = *(int **)a6;
    *(_DWORD *)(*(void *)a6 + 4 * v23) = 0;
  }
  return TLexicon::checkName(a1, v25, 0, v14) != 0;
}

void addToWordName(unsigned int *a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  unint64_t v8 = a1;
  uint64_t v9 = *a1;
  {
    operator new();
  }
  if ((int)v9 > 159)
  {
    if ((int)v9 >= 12288)
    {
      if (v9 != 65279 && v9 != 12288) {
        goto LABEL_45;
      }
    }
    else if (v9 != 160 && v9 != 8203)
    {
      goto LABEL_45;
    }
  }
  else if (v9 > 0x20 || ((1 << v9) & 0x100002600) == 0)
  {
    goto LABEL_45;
  }
  if (a3)
  {
    {
      operator new();
    }
    if ((int)v9 <= 8202)
    {
      if (v9 != 32 && v9 != 160) {
        goto LABEL_45;
      }
    }
    else if (v9 != 8203 && v9 != 65279 && v9 != 12288)
    {
      goto LABEL_45;
    }
  }
  unint64_t v12 = v8 + 1;
  uint64_t v13 = v8[1];
  if (v13)
  {
    do
    {
      {
        operator new();
      }
      if ((int)v13 > 159)
      {
        if ((int)v13 >= 12288)
        {
          if (v13 != 65279 && v13 != 12288) {
            goto LABEL_44;
          }
        }
        else if (v13 != 160 && v13 != 8203)
        {
          goto LABEL_44;
        }
      }
      else if (v13 > 0x20 || ((1 << v13) & 0x100002600) == 0)
      {
        goto LABEL_44;
      }
      unsigned int v14 = v12[1];
      ++v12;
      uint64_t v13 = v14;
    }
    while (v14);
  }
  if ((a3 & 1) == 0)
  {
    uint64_t v13 = 0;
LABEL_44:
    unint64_t v8 = v12;
    uint64_t v9 = v13;
  }
LABEL_45:
  unint64_t v24 = *(TLocaleInfo **)(a2 + 72);
  if ((unint64_t)v24 >= 3)
  {
    {
      operator new();
    }
    uint64_t v9 = TLocaleInfo::normalizeWidth(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v9);
  }
  unint64_t v22 = *(void *)(a5 + 16);
  if (v9)
  {
    unint64_t v23 = *(void *)(a5 + 16);
    while (1)
    {
      unsigned int v16 = v8[1];
      ++v8;
      uint64_t v15 = v16;
      if ((a3 & 1) == 0)
      {
        {
          operator new();
        }
        if ((int)v9 > 159)
        {
          if ((int)v9 >= 12288)
          {
            if (v9 == 65279 || v9 == 12288)
            {
LABEL_62:
              if (v15)
              {
                do
                {
                  {
                    operator new();
                  }
                  if ((int)v15 > 159)
                  {
                    if ((int)v15 >= 12288)
                    {
                      if (v15 != 65279 && v15 != 12288) {
                        break;
                      }
                    }
                    else if (v15 != 160 && v15 != 8203)
                    {
                      break;
                    }
                  }
                  else if (v15 > 0x20 || ((1 << v15) & 0x100002600) == 0)
                  {
                    break;
                  }
                  unsigned int v17 = v8[1];
                  ++v8;
                  uint64_t v15 = v17;
                }
                while (v17);
              }
            }
          }
          else if (v9 == 160 || v9 == 8203)
          {
            goto LABEL_62;
          }
        }
        else if (v9 <= 0x20 && ((1 << v9) & 0x100002600) != 0)
        {
          goto LABEL_62;
        }
      }
      if ((unint64_t)v24 < 3)
      {
        int v18 = v9;
        uint64_t v9 = v15;
      }
      else
      {
        if (v15)
        {
          while (1)
          {
            int v18 = v9;
            uint64_t v19 = TLocaleInfo::composeCharacter(a2, v9, v15);
            if (!v19) {
              break;
            }
            uint64_t v9 = v19;
            if ((int)v15 >= 1611 && a4 && (v15 < 0x660 || (v15 & 0xFFFFFFFB) == 0x670)) {
              break;
            }
            unsigned int v20 = v8[1];
            ++v8;
            uint64_t v15 = v20;
            if (!v20) {
              goto LABEL_86;
            }
          }
        }
        else
        {
LABEL_86:
          int v18 = v9;
        }
        {
          operator new();
        }
        uint64_t v9 = TLocaleInfo::normalizeWidth(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v15);
      }
      int v26 = v18;
      TBuffer<wchar_t>::insert(a5, *(void *)(a5 + 16), &v26, 1uLL);
      {
        operator new();
      }
      if (v18 > 159)
      {
        if (v18 >= 12288)
        {
          if (v18 == 12288) {
            goto LABEL_101;
          }
          int v21 = 65279;
        }
        else
        {
          if (v18 == 160) {
            goto LABEL_101;
          }
          int v21 = 8203;
        }
        if (v18 == v21) {
          goto LABEL_101;
        }
LABEL_103:
        unint64_t v23 = *(void *)(a5 + 16);
        if (!v9) {
          goto LABEL_112;
        }
      }
      else
      {
        if (v18 > 0x20 || ((1 << v18) & 0x100002600) == 0) {
          goto LABEL_103;
        }
LABEL_101:
        if (!v9) {
          goto LABEL_112;
        }
      }
    }
  }
  unint64_t v23 = *(void *)(a5 + 16);
LABEL_112:
  if (!a3 || v23 > v22) {
    TBuffer<wchar_t>::resize(a5, v23);
  }
}

void sub_213E0136C(_Unwind_Exception *a1)
{
  MEMORY[0x216698730](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TBuffer<wchar_t>::operator+=(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= v5)
  {
    if (*(unsigned char *)(a2 + 1048))
    {
      int v8 = 0;
      TBuffer<wchar_t>::insert(a2, v4, &v8, 1uLL);
      unint64_t v4 = *(void *)(a2 + 16) - 1;
      *(void *)(a2 + 16) = v4;
      size_t v6 = *(int **)a2;
    }
    else
    {
      size_t v6 = *(int **)a2;
      if (v5) {
        v6[v5 - 1] = 0;
      }
    }
  }
  else
  {
    size_t v6 = *(int **)a2;
    *(_DWORD *)(*(void *)a2 + 4 * v4) = 0;
  }
  TBuffer<wchar_t>::insert(a1, *(void *)(a1 + 16), v6, v4);
  return a1;
}

uint64_t respellRoot(uint64_t a1, int *a2)
{
  unint64_t v5 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >= v5)
  {
    if (*(unsigned char *)(a1 + 1048))
    {
      int v17 = 0;
      TBuffer<wchar_t>::insert(a1, v4, &v17, 1uLL);
      --*(void *)(a1 + 16);
      size_t v6 = *(const __int32 **)a1;
    }
    else
    {
      size_t v6 = *(const __int32 **)a1;
      if (v5) {
        v6[v5 - 1] = 0;
      }
    }
  }
  else
  {
    size_t v6 = *(const __int32 **)a1;
    *(_DWORD *)(*(void *)a1 + 4 * v4) = 0;
  }
  if (!wcscmp(v6, dword_21408D054)) {
    return 1;
  }
  unint64_t StressPosition = findStressPosition(a2, 0);
  unint64_t v9 = *(void *)(a1 + 8);
  unint64_t v8 = *(void *)(a1 + 16);
  if (v8 >= v9)
  {
    if (*(unsigned char *)(a1 + 1048))
    {
      int v18 = 0;
      TBuffer<wchar_t>::insert(a1, v8, &v18, 1uLL);
      --*(void *)(a1 + 16);
      uint64_t v10 = *(int **)a1;
    }
    else
    {
      uint64_t v10 = *(int **)a1;
      if (v9) {
        v10[v9 - 1] = 0;
      }
    }
  }
  else
  {
    uint64_t v10 = *(int **)a1;
    *(_DWORD *)(*(void *)a1 + 4 * v8) = 0;
  }
  uint64_t v11 = findStressPosition(v10, 1);
  if (StressPosition >= *(void *)(a1 + 16)) {
    return 0;
  }
  __int32 v12 = *(_DWORD *)(*(void *)a1 + 4 * StressPosition);
  if (StressPosition == v11)
  {
    uint64_t v13 = s_pszAccentedVowels;
    unsigned int v14 = wcschr(s_pszAccentedVowels, v12);
    if (v14)
    {
      uint64_t v15 = s_pszUnaccentedVowels;
LABEL_21:
      *(_DWORD *)(*(void *)a1 + 4 * StressPosition) = *(__int32 *)((char *)v15 + (char *)v14 - (char *)v13);
    }
  }
  else
  {
    uint64_t v13 = s_pszUnaccentedVowels;
    unsigned int v14 = wcschr(s_pszUnaccentedVowels, v12);
    if (v14)
    {
      uint64_t v15 = s_pszAccentedVowels;
      goto LABEL_21;
    }
  }
  return 1;
}

uint64_t findStressPosition(int *a1, int a2)
{
  __int32 v4 = *a1;
  if (!*a1)
  {
    uint64_t v7 = 0;
LABEL_7:
    unint64_t v8 = 0;
    char v9 = 1;
    goto LABEL_8;
  }
  uint64_t v5 = 0;
  while (1)
  {
    size_t v6 = wcschr(s_pszAccentedVowels, v4);
    if (v6) {
      break;
    }
    uint64_t v7 = v5 + 1;
    __int32 v4 = a1[++v5];
    if (!v4) {
      goto LABEL_7;
    }
  }
  if (a2)
  {
    unint64_t v8 = v6;
    char v9 = 0;
    uint64_t v7 = v5;
LABEL_8:
    int v17 = v19;
    long long v18 = xmmword_214085190;
    char v20 = 1;
    TBuffer<wchar_t>::assign((uint64_t)&v17, a1);
    uint64_t v10 = v17;
    if ((v9 & 1) == 0) {
      *(_DWORD *)&v17[4 * v7] = *(__int32 *)((char *)s_pszUnaccentedVowels + (char *)v8 - (char *)s_pszAccentedVowels);
    }
    int v11 = DWORD2(v18) - 1;
    if (wcschr((__int32 *)"s", *(_DWORD *)&v10[4 * DWORD2(v18) - 4]))
    {
      if (*((void *)&v18 + 1) >= (unint64_t)v18)
      {
        if (v20)
        {
          int v21 = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v17, *((unint64_t *)&v18 + 1), &v21, 1uLL);
          uint64_t v12 = (uint64_t)v17;
          --*((void *)&v18 + 1);
        }
        else
        {
          uint64_t v12 = (uint64_t)v17;
          if ((void)v18) {
            *(_DWORD *)&v17[4 * v18 - 4] = 0;
          }
        }
      }
      else
      {
        uint64_t v12 = (uint64_t)v17;
        *(_DWORD *)&v17[4 * *((void *)&v18 + 1)] = 0;
      }
      int PreviousVowel = findPreviousVowel(v12, v11);
      if (PreviousVowel >= 0) {
        int v11 = PreviousVowel;
      }
    }
    if (*((void *)&v18 + 1) >= (unint64_t)v18)
    {
      if (v20)
      {
        int v21 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v17, *((unint64_t *)&v18 + 1), &v21, 1uLL);
        uint64_t v14 = (uint64_t)v17;
        --*((void *)&v18 + 1);
      }
      else
      {
        uint64_t v14 = (uint64_t)v17;
        if ((void)v18) {
          *(_DWORD *)&v17[4 * v18 - 4] = 0;
        }
      }
    }
    else
    {
      uint64_t v14 = (uint64_t)v17;
      *(_DWORD *)&v17[4 * *((void *)&v18 + 1)] = 0;
    }
    int v15 = findPreviousVowel(v14, v11);
    if (v15 >= 0) {
      uint64_t v5 = v15;
    }
    else {
      uint64_t v5 = v11;
    }
    if (v20 && v17 != v19 && v17) {
      MEMORY[0x216698730]();
    }
  }
  return v5;
}

void sub_213E0182C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (LOBYTE(STACK[0x420]) && a10 != v10)
  {
    if (a10) {
      MEMORY[0x216698730]();
    }
  }
  _Unwind_Resume(a1);
}

void TLexiconParamManager::~TLexiconParamManager(TLexiconParamManager *this)
{
  TLexiconParamManager::~TLexiconParamManager(this);

  JUMPOUT(0x216698730);
}

{
  uint64_t v2;
  void **v3;
  char *v4;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  uint64_t jj;
  uint64_t kk;
  uint64_t mm;
  uint64_t nn;
  uint64_t i1;
  uint64_t i2;
  uint64_t i3;
  uint64_t v18;
  void **v19;

  unint64_t v2 = 0;
  *(void *)this = &unk_26C4E2CB8;
  unint64_t v3 = (void **)((char *)this + 21520);
  *((void *)this + 2690) = &unk_26C4DF150;
  __int32 v4 = (char *)this + 21767;
  do
  {
    if (v4[v2] < 0) {
      operator delete(*(void **)((char *)this + v2 + 21744));
    }
    v2 -= 24;
  }
  while (v2 != -48);
  TParam::~TParam(v3);
  TParam::~TParam((void **)this + 2646);
  *((void *)this + 2474) = &unk_26C4DFCE0;
  uint64_t v19 = (void **)((char *)this + 21144);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  uint64_t v19 = (void **)((char *)this + 21120);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  uint64_t v19 = (void **)((char *)this + 21096);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (unint64_t i = 0; i != -1152; i -= 24)
  {
    if (*((char *)this + i + 21095) < 0) {
      operator delete(*(void **)((char *)this + i + 21072));
    }
  }
  TParam::~TParam((void **)this + 2474);
  *((void *)this + 2302) = &unk_26C4DFCE0;
  uint64_t v19 = (void **)((char *)this + 19768);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  uint64_t v19 = (void **)((char *)this + 19744);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  uint64_t v19 = (void **)((char *)this + 19720);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (j = 0; j != -1152; j -= 24)
  {
    if (*((char *)this + j + 19719) < 0) {
      operator delete(*(void **)((char *)this + j + 19696));
    }
  }
  TParam::~TParam((void **)this + 2302);
  *((void *)this + 2130) = &unk_26C4DFCE0;
  uint64_t v19 = (void **)((char *)this + 18392);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  uint64_t v19 = (void **)((char *)this + 18368);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  uint64_t v19 = (void **)((char *)this + 18344);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (k = 0; k != -1152; k -= 24)
  {
    if (*((char *)this + k + 18343) < 0) {
      operator delete(*(void **)((char *)this + k + 18320));
    }
  }
  TParam::~TParam((void **)this + 2130);
  *((void *)this + 1958) = &unk_26C4DFCE0;
  uint64_t v19 = (void **)((char *)this + 17016);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  uint64_t v19 = (void **)((char *)this + 16992);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  uint64_t v19 = (void **)((char *)this + 16968);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (m = 0; m != -1152; m -= 24)
  {
    if (*((char *)this + m + 16967) < 0) {
      operator delete(*(void **)((char *)this + m + 16944));
    }
  }
  TParam::~TParam((void **)this + 1958);
  *((void *)this + 1786) = &unk_26C4DFCE0;
  uint64_t v19 = (void **)((char *)this + 15640);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  uint64_t v19 = (void **)((char *)this + 15616);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  uint64_t v19 = (void **)((char *)this + 15592);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (n = 0; n != -1152; n -= 24)
  {
    if (*((char *)this + n + 15591) < 0) {
      operator delete(*(void **)((char *)this + n + 15568));
    }
  }
  TParam::~TParam((void **)this + 1786);
  *((void *)this + 1614) = &unk_26C4DFCE0;
  uint64_t v19 = (void **)((char *)this + 14264);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  uint64_t v19 = (void **)((char *)this + 14240);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  uint64_t v19 = (void **)((char *)this + 14216);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (iunint64_t i = 0; ii != -1152; ii -= 24)
  {
    if (*((char *)this + ii + 14215) < 0) {
      operator delete(*(void **)((char *)this + ii + 14192));
    }
  }
  TParam::~TParam((void **)this + 1614);
  *((void *)this + 1442) = &unk_26C4DFCE0;
  uint64_t v19 = (void **)((char *)this + 12888);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  uint64_t v19 = (void **)((char *)this + 12864);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  uint64_t v19 = (void **)((char *)this + 12840);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (jj = 0; jj != -1152; jj -= 24)
  {
    if (*((char *)this + jj + 12839) < 0) {
      operator delete(*(void **)((char *)this + jj + 12816));
    }
  }
  TParam::~TParam((void **)this + 1442);
  *((void *)this + 1270) = &unk_26C4DFCE0;
  uint64_t v19 = (void **)((char *)this + 11512);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  uint64_t v19 = (void **)((char *)this + 11488);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  uint64_t v19 = (void **)((char *)this + 11464);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (kk = 0; kk != -1152; kk -= 24)
  {
    if (*((char *)this + kk + 11463) < 0) {
      operator delete(*(void **)((char *)this + kk + 11440));
    }
  }
  TParam::~TParam((void **)this + 1270);
  *((void *)this + 1098) = &unk_26C4DFCE0;
  uint64_t v19 = (void **)((char *)this + 10136);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  uint64_t v19 = (void **)((char *)this + 10112);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  uint64_t v19 = (void **)((char *)this + 10088);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (mm = 0; mm != -1152; mm -= 24)
  {
    if (*((char *)this + mm + 10087) < 0) {
      operator delete(*(void **)((char *)this + mm + 10064));
    }
  }
  TParam::~TParam((void **)this + 1098);
  *((void *)this + 926) = &unk_26C4DFCE0;
  uint64_t v19 = (void **)((char *)this + 8760);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  uint64_t v19 = (void **)((char *)this + 8736);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  uint64_t v19 = (void **)((char *)this + 8712);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (nn = 0; nn != -1152; nn -= 24)
  {
    if (*((char *)this + nn + 8711) < 0) {
      operator delete(*(void **)((char *)this + nn + 8688));
    }
  }
  TParam::~TParam((void **)this + 926);
  *((void *)this + 754) = &unk_26C4DFCE0;
  uint64_t v19 = (void **)((char *)this + 7384);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  uint64_t v19 = (void **)((char *)this + 7360);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  uint64_t v19 = (void **)((char *)this + 7336);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (i1 = 0; i1 != -1152; i1 -= 24)
  {
    if (*((char *)this + i1 + 7335) < 0) {
      operator delete(*(void **)((char *)this + i1 + 7312));
    }
  }
  TParam::~TParam((void **)this + 754);
  *((void *)this + 582) = &unk_26C4DFCE0;
  uint64_t v19 = (void **)((char *)this + 6008);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  uint64_t v19 = (void **)((char *)this + 5984);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  uint64_t v19 = (void **)((char *)this + 5960);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (i2 = 0; i2 != -1152; i2 -= 24)
  {
    if (*((char *)this + i2 + 5959) < 0) {
      operator delete(*(void **)((char *)this + i2 + 5936));
    }
  }
  TParam::~TParam((void **)this + 582);
  *((void *)this + 410) = &unk_26C4DFCE0;
  uint64_t v19 = (void **)((char *)this + 4632);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  uint64_t v19 = (void **)((char *)this + 4608);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  uint64_t v19 = (void **)((char *)this + 4584);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (i3 = 0; i3 != -1152; i3 -= 24)
  {
    if (*((char *)this + i3 + 4583) < 0) {
      operator delete(*(void **)((char *)this + i3 + 4560));
    }
  }
  TParam::~TParam((void **)this + 410);
  TParam::~TParam((void **)this + 366);
  TParam::~TParam((void **)this + 322);
  TParam::~TParam((void **)this + 278);
  TParam::~TParam((void **)this + 234);
  *((void *)this + 62) = &unk_26C4DFCE0;
  uint64_t v19 = (void **)((char *)this + 1848);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  uint64_t v19 = (void **)((char *)this + 1824);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  uint64_t v19 = (void **)((char *)this + 1800);
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v19);
  long long v18 = 1152;
  do
  {
    if (*((char *)this + v18 + 647) < 0) {
      operator delete(*(void **)((char *)this + v18 + 624));
    }
    v18 -= 24;
  }
  while (v18);
  TParam::~TParam((void **)this + 62);
  TParam::~TParam((void **)this + 18);
  TParamManager::~TParamManager(this);
}

void TEnvManager::~TEnvManager(void **this)
{
  *this = &unk_26C4DF798;
  off_26C4DF7B0((TEnvManager *)this);
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  *this = &unk_26C4DFC18;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

{
  uint64_t vars8;

  TEnvManager::~TEnvManager(this);

  JUMPOUT(0x216698730);
}

void *THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::~THashBase(void *a1)
{
  *a1 = &unk_26C4E59C8;
  THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::clear(a1);
  uint64_t v2 = a1[1];
  if (v2) {
    MEMORY[0x216698710](v2, 0x20C8093837F09);
  }
  return a1;
}

void *THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::clear(void *result)
{
  uint64_t v1 = result;
  unint64_t v2 = result[2];
  if (v2)
  {
    for (unint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = v1[1];
      uint64_t result = *(void **)(v4 + 8 * i);
      if (result)
      {
        do
        {
          uint64_t v5 = (void *)*result;
          MEMORY[0x216698730]();
          uint64_t result = v5;
        }
        while (v5);
        uint64_t v4 = v1[1];
        unint64_t v2 = v1[2];
      }
      *(void *)(v4 + 8 * i) = 0;
    }
  }
  v1[3] = 0;
  return result;
}

void THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::~THashBase(void *a1)
{
  THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::~THashBase(a1);

  JUMPOUT(0x216698730);
}

void *THashBase<std::pair<wchar_t * const,TWordBlock *>,THashMapCompare<std::pair<wchar_t * const,TWordBlock *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t * const,TWordBlock *>,THash<wchar_t const*>>>::~THashBase(void *a1)
{
  *a1 = &unk_26C4E5A08;
  THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::clear(a1);
  uint64_t v2 = a1[1];
  if (v2) {
    MEMORY[0x216698710](v2, 0x20C8093837F09);
  }
  return a1;
}

void THashBase<std::pair<wchar_t * const,TWordBlock *>,THashMapCompare<std::pair<wchar_t * const,TWordBlock *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t * const,TWordBlock *>,THash<wchar_t const*>>>::~THashBase(void *a1)
{
  THashBase<std::pair<wchar_t * const,TWordBlock *>,THashMapCompare<std::pair<wchar_t * const,TWordBlock *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t * const,TWordBlock *>,THash<wchar_t const*>>>::~THashBase(a1);

  JUMPOUT(0x216698730);
}

size_t THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::find@<X0>(size_t result@<X0>, const __int32 **a2@<X1>, void *a3@<X8>)
{
  unint64_t v4 = *(void *)(result + 16);
  if (v4)
  {
    size_t v6 = result;
    uint64_t v7 = *a2;
    uint64_t result = wcslen(*a2);
    unint64_t v8 = 0;
    uint64_t v9 = 4 * result;
    if (4 * result)
    {
      do
      {
        uint64_t v10 = *(char *)v7;
        uint64_t v7 = (const __int32 *)((char *)v7 + 1);
        unint64_t v8 = 33 * v8 + v10;
        --v9;
      }
      while (v9);
    }
    unint64_t v11 = v8 % v4;
    uint64_t v12 = *(void *)(v6 + 8) + 8 * v11;
    while (1)
    {
      uint64_t v12 = *(void *)v12;
      if (!v12) {
        break;
      }
      uint64_t result = wcscmp(*(const __int32 **)(v12 + 8), *a2);
      if (!result)
      {
        uint64_t v13 = *(void *)(v6 + 8);
        uint64_t v14 = v13 + 8 * v11;
        uint64_t v15 = v13 + 8 * *(void *)(v6 + 16);
        *a3 = v14;
        a3[1] = v15;
        a3[2] = v12;
        return result;
      }
    }
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return result;
}

void *THashBase<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THashMapCompare<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,std::equal_to<TDecodeLinkMapWord::THistory>>,THashMapFunction<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THash<TDecodeLinkMapWord::THistory>>>::~THashBase(void *a1)
{
  *a1 = &unk_26C4E59A8;
  THashBase<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THashMapCompare<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,std::equal_to<TDecodeLinkMapWord::THistory>>,THashMapFunction<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THash<TDecodeLinkMapWord::THistory>>>::clear(a1);
  uint64_t v2 = a1[1];
  if (v2) {
    MEMORY[0x216698710](v2, 0x20C8093837F09);
  }
  return a1;
}

void THashBase<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THashMapCompare<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,std::equal_to<TDecodeLinkMapWord::THistory>>,THashMapFunction<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THash<TDecodeLinkMapWord::THistory>>>::~THashBase(void *a1)
{
  THashBase<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THashMapCompare<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,std::equal_to<TDecodeLinkMapWord::THistory>>,THashMapFunction<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THash<TDecodeLinkMapWord::THistory>>>::~THashBase(a1);

  JUMPOUT(0x216698730);
}

uint64_t findPreviousVowel(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  unsigned int v4 = a2 - 1;
  if (a2 >= 1
    && wcschr((__int32 *)"a", *(_DWORD *)(a1 + 4 * a2))
    && wcschr((__int32 *)"i", *(_DWORD *)(a1 + 4 * v4)))
  {
    LODWORD(v2) = v4;
  }
  uint64_t v5 = (__int32 *)(a1 + 4 * v2);
  do
  {
    BOOL v6 = __OFSUB__(v2, 1);
    uint64_t v2 = (v2 - 1);
    if ((int)v2 < 0 != v6) {
      return 0xFFFFFFFFLL;
    }
    __int32 v7 = *--v5;
  }
  while (!wcschr(s_pszUnaccentedVowels, v7));
  if ((v2 + 1) < 2) {
    return 0;
  }
  if (wcschr((__int32 *)"i", *v5))
  {
    if (wcschr((__int32 *)"a", *(_DWORD *)(a1 + 4 * (v2 - 1)))) {
      return (v2 - 1);
    }
    else {
      return v2;
    }
  }
  return v2;
}

std::vector<std::wstring> *__cdecl std::vector<std::wstring>::vector(std::vector<std::wstring> *this, std::vector<std::wstring>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<std::wstring>::__vallocate[abi:ne180100](this, __n);
    std::vector<std::wstring>::pointer end = this->__end_;
    size_t v5 = 24 * ((24 * __n - 24) / 0x18) + 24;
    bzero(end, v5);
    this->__end_ = (std::vector<std::wstring>::pointer)((char *)end + v5);
  }
  return this;
}

void sub_213E02680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void TRegisterable<TLexicon>::~TRegisterable(void *a1)
{
  TRegisterable<TLexicon>::~TRegisterable(a1);

  JUMPOUT(0x216698730);
}

void THashMap<wchar_t *,TWordBlock *,THash<wchar_t const*>,TWideCharEqualTo>::~THashMap(void *a1)
{
  THashBase<std::pair<wchar_t * const,TWordBlock *>,THashMapCompare<std::pair<wchar_t * const,TWordBlock *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t * const,TWordBlock *>,THash<wchar_t const*>>>::~THashBase(a1);

  JUMPOUT(0x216698730);
}

void THashMap<wchar_t const*,TWord *,THash<wchar_t const*>,TWideCharEqualTo>::~THashMap(void *a1)
{
  THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::~THashBase(a1);

  JUMPOUT(0x216698730);
}

uint64_t TRegisterable<TLexicon>::getRegistry()
{
  {
    operator new();
  }
  return TRegisterable<TLexicon>::getRegistry(void)::s_registry;
}

void sub_213E027B8(_Unwind_Exception *a1)
{
}

double THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::findNextPrime(uint64_t a1)
{
  unint64_t v1 = a1 | 1;
  double result = sqrt((double)v1);
  unint64_t v3 = (unint64_t)result;
  if ((unint64_t)result >= 4)
  {
    do
    {
      unint64_t v4 = 3;
      while (v1 % v4)
      {
        v4 += 2;
        if (v4 >= v3) {
          return result;
        }
      }
      v1 += 2;
      double result = sqrt((double)v1);
      unint64_t v3 = (unint64_t)result;
    }
    while ((unint64_t)result > 3);
  }
  return result;
}

void std::vector<std::string>::__append(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  size_t v5 = value;
  __int32 v7 = p_end_cap[-1].__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v7) >> 3) >= __n)
  {
    if (__n)
    {
      size_t v13 = 24 * ((24 * __n - 24) / 0x18) + 24;
      bzero(p_end_cap[-1].__value_, v13);
      __int32 v7 = (std::string *)((char *)v7 + v13);
    }
    this->__end_ = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)this->__begin_) >> 3);
    unint64_t v9 = v8 + __n;
    if (v8 + __n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)this->__begin_) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)p_end_cap;
    if (v11) {
      uint64_t v12 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::wstring>>((uint64_t)p_end_cap, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    __v.__first_ = v12;
    __v.__begin_ = v12 + v8;
    __v.__end_cap_.__value_ = &v12[v11];
    size_t v14 = 24 * ((24 * __n - 24) / 0x18) + 24;
    bzero(__v.__begin_, v14);
    __v.__end_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__begin_ + v14);
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::wstring>::~__split_buffer(&__v);
  }
}

void sub_213E02978(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  std::vector<std::string>::pointer begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  std::vector<std::wstring>::pointer end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::wstring>,std::reverse_iterator<std::wstring*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*,false>(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
  long long v10 = (uint64_t *)result;
LABEL_2:
  unint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    long long v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = ((char *)a2 - (char *)v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          double result = (*a3)(a2 - 2, v11);
          if (result)
          {
            uint64_t v22 = *v11;
            uint64_t *v11 = *(a2 - 2);
            *(a2 - 2) = v22;
            uint64_t v23 = v11[1];
            v11[1] = *(a2 - 1);
            *(a2 - 1) = v23;
          }
          break;
        case 3uLL:
          double result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(v11, v11 + 2, a2 - 2, a3);
          break;
        case 4uLL:
          double result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(v11, v11 + 2, v11 + 4, a2 - 2, a3);
          break;
        case 5uLL:
          double result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(v11, v11 + 2, v11 + 4, v11 + 6, a2 - 2, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*,std::pair<wchar_t const*,wchar_t *>*>((uint64_t)v11, a2, a2, (unsigned int (**)(uint64_t, uint64_t))a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    int v17 = &v11[2 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(v11, &v11[2 * (v15 >> 1)], a2 - 2, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(v11 + 2, v17 - 2, a2 - 4, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(v11 + 4, &v11[2 * v16 + 2], a2 - 6, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(v17 - 2, v17, &v11[2 * v16 + 2], a3);
      long long v18 = *(_OWORD *)v11;
      *(_OWORD *)unint64_t v11 = *(_OWORD *)v17;
      *(_OWORD *)int v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(&v11[2 * (v15 >> 1)], v11, a2 - 2, a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (((*a3)(v11 - 2, v11) & 1) == 0)
    {
      double result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<wchar_t const*,wchar_t *> *,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&)>(v11, a2, (uint64_t (**)(long long *, void *))a3);
      unint64_t v11 = (uint64_t *)result;
      goto LABEL_19;
    }
LABEL_14:
    uint64_t v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<wchar_t const*,wchar_t *> *,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&)>(v11, a2, (uint64_t (**)(void *, long long *))a3);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(v11, v19, a3);
    unint64_t v11 = v19 + 2;
    double result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(v19 + 2, a2, a3);
    if (result)
    {
      a4 = -v13;
      a2 = v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      double result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*,false>(v10, v19, a3, -v13, a5 & 1);
      unint64_t v11 = v19 + 2;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>((uint64_t)v11, a2, (uint64_t (**)(_OWORD *, void))a3);
  }
  else
  {
    return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>((uint64_t)v11, a2, (uint64_t (**)(_OWORD *, void *))a3);
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(uint64_t result, _OWORD *a2, uint64_t (**a3)(_OWORD *, void))
{
  if ((_OWORD *)result != a2)
  {
    uint64_t v18 = v3;
    uint64_t v19 = v4;
    char v6 = (void *)result;
    uint64_t v7 = (_OWORD *)(result + 16);
    if ((_OWORD *)(result + 16) != a2)
    {
      uint64_t v9 = 0;
      long long v10 = (_OWORD *)result;
      do
      {
        unint64_t v11 = v10;
        long long v10 = v7;
        double result = (*a3)(v7, v11);
        if (result)
        {
          long long v17 = *v10;
          uint64_t v12 = v9;
          while (1)
          {
            uint64_t v13 = (char *)v6 + v12;
            uint64_t v14 = *(void *)((char *)v6 + v12 + 8);
            *((void *)v13 + 2) = *(void *)((char *)v6 + v12);
            *((void *)v13 + 3) = v14;
            if (!v12) {
              break;
            }
            v12 -= 16;
            double result = (*a3)(&v17, (char *)v6 + v12);
            if ((result & 1) == 0)
            {
              unint64_t v15 = (void *)((char *)v6 + v12 + 16);
              goto LABEL_10;
            }
          }
          unint64_t v15 = v6;
LABEL_10:
          uint64_t v16 = *((void *)&v17 + 1);
          void *v15 = v17;
          v15[1] = v16;
        }
        uint64_t v7 = v10 + 1;
        v9 += 16;
      }
      while (v10 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(uint64_t result, _OWORD *a2, uint64_t (**a3)(_OWORD *, void *))
{
  if ((_OWORD *)result != a2)
  {
    uint64_t v15 = v3;
    uint64_t v16 = v4;
    char v6 = (_OWORD *)result;
    uint64_t v7 = (_OWORD *)(result + 16);
    if ((_OWORD *)(result + 16) != a2)
    {
      uint64_t v9 = (void *)(result - 16);
      do
      {
        long long v10 = v6;
        char v6 = v7;
        double result = (*a3)(v7, v10);
        if (result)
        {
          long long v14 = *v6;
          unint64_t v11 = v9;
          do
          {
            uint64_t v12 = v11[3];
            v11[4] = v11[2];
            v11[5] = v12;
            double result = (*a3)(&v14, v11);
            v11 -= 2;
          }
          while ((result & 1) != 0);
          uint64_t v13 = *((void *)&v14 + 1);
          v11[4] = v14;
          v11[5] = v13;
        }
        uint64_t v7 = v6 + 1;
        v9 += 2;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (**a4)(uint64_t *, uint64_t *))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, a2);
  if (v8)
  {
    uint64_t v10 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v10;
      unint64_t v11 = a3 + 1;
      uint64_t result = 1;
      uint64_t v12 = a1 + 1;
LABEL_9:
      uint64_t v15 = v11;
      goto LABEL_10;
    }
    *a1 = *a2;
    *a2 = v10;
    uint64_t v17 = a1[1];
    a1[1] = a2[1];
    a2[1] = v17;
    if ((*a4)(a3, a2))
    {
      uint64_t v18 = *a2;
      *a2 = *a3;
      *a3 = v18;
      unint64_t v11 = a3 + 1;
      uint64_t result = 2;
      uint64_t v12 = a2 + 1;
      goto LABEL_9;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    uint64_t v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    uint64_t v15 = a2 + 1;
    uint64_t v14 = a2[1];
    a2[1] = a3[1];
    a3[1] = v14;
    if ((*a4)(a2, a1))
    {
      uint64_t v16 = *a1;
      *a1 = *a2;
      uint64_t v12 = a1 + 1;
      *a2 = v16;
      uint64_t result = 2;
LABEL_10:
      uint64_t v19 = *v12;
      *uint64_t v12 = *v15;
      uint64_t *v15 = v19;
      return result;
    }
  }
  return 1;
}

void *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<wchar_t const*,wchar_t *> *,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&)>(void *a1, void *a2, uint64_t (**a3)(long long *, void *))
{
  uint64_t v4 = a2;
  long long v12 = *(_OWORD *)a1;
  if ((*a3)(&v12, a2 - 2))
  {
    char v6 = a1;
    do
      v6 += 2;
    while (((*a3)(&v12, v6) & 1) == 0);
  }
  else
  {
    uint64_t v7 = a1 + 2;
    do
    {
      char v6 = v7;
      if (v7 >= v4) {
        break;
      }
      int v8 = (*a3)(&v12, v7);
      uint64_t v7 = v6 + 2;
    }
    while (!v8);
  }
  if (v6 < v4)
  {
    do
      v4 -= 2;
    while (((*a3)(&v12, v4) & 1) != 0);
  }
  while (v6 < v4)
  {
    uint64_t v9 = *v6;
    *char v6 = *v4;
    void *v4 = v9;
    uint64_t v10 = v6[1];
    v6[1] = v4[1];
    v4[1] = v10;
    do
      v6 += 2;
    while (!(*a3)(&v12, v6));
    do
      v4 -= 2;
    while (((*a3)(&v12, v4) & 1) != 0);
  }
  if (v6 - 2 != a1)
  {
    *a1 = *(v6 - 2);
    a1[1] = *(v6 - 1);
  }
  *((_OWORD *)v6 - 1) = v12;
  return v6;
}

void *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<wchar_t const*,wchar_t *> *,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&)>(void *a1, void *a2, uint64_t (**a3)(void *, long long *))
{
  uint64_t v6 = 0;
  long long v13 = *(_OWORD *)a1;
  do
    v6 += 2;
  while (((*a3)(&a1[v6], &v13) & 1) != 0);
  uint64_t v7 = &a1[v6];
  if (v6 == 2)
  {
    do
    {
      if (v7 >= a2) {
        break;
      }
      a2 -= 2;
    }
    while (((*a3)(a2, &v13) & 1) == 0);
  }
  else
  {
    do
      a2 -= 2;
    while (!(*a3)(a2, &v13));
  }
  int v8 = &a1[v6];
  if (v7 < a2)
  {
    uint64_t v9 = a2;
    do
    {
      uint64_t v10 = *v8;
      *int v8 = *v9;
      *uint64_t v9 = v10;
      uint64_t v11 = v8[1];
      v8[1] = v9[1];
      v9[1] = v11;
      do
        v8 += 2;
      while (((*a3)(v8, &v13) & 1) != 0);
      do
        v9 -= 2;
      while (!(*a3)(v9, &v13));
    }
    while (v8 < v9);
  }
  uint64_t result = v8 - 2;
  if (v8 - 2 != a1)
  {
    *a1 = *(v8 - 2);
    a1[1] = *(v8 - 1);
  }
  *((_OWORD *)v8 - 1) = v13;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((*a3)(a2 - 2, a1))
      {
        uint64_t v8 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v8;
        uint64_t v9 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      uint64_t v10 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(a1, a1 + 2, a1 + 4, a3);
      uint64_t v11 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v11, v10))
    {
      long long v19 = *(_OWORD *)v11;
      uint64_t v14 = v12;
      while (1)
      {
        uint64_t v15 = (uint64_t *)((char *)a1 + v14);
        uint64_t v16 = *(uint64_t *)((char *)a1 + v14 + 40);
        v15[6] = *(uint64_t *)((char *)a1 + v14 + 32);
        v15[7] = v16;
        if (v14 == -32) {
          break;
        }
        v14 -= 16;
        if (((*a3)((uint64_t *)&v19, v15 + 2) & 1) == 0)
        {
          uint64_t v17 = (uint64_t *)((char *)a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      uint64_t v17 = a1;
LABEL_12:
      uint64_t v18 = *((void *)&v19 + 1);
      *uint64_t v17 = v19;
      v17[1] = v18;
      if (++v13 == 8) {
        return v11 + 2 == a2;
      }
    }
    uint64_t v10 = v11;
    v12 += 16;
    v11 += 2;
    if (v11 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t (**a5)(uint64_t *, uint64_t *))
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(a1, a2, a3, a5);
  uint64_t result = (*a5)(a4, a3);
  if (result)
  {
    uint64_t v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    uint64_t v12 = a3[1];
    a3[1] = a4[1];
    a4[1] = v12;
    uint64_t result = (*a5)(a3, a2);
    if (result)
    {
      uint64_t v13 = *a2;
      *a2 = *a3;
      *a3 = v13;
      uint64_t v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      uint64_t result = (*a5)(a2, a1);
      if (result)
      {
        uint64_t v15 = *a1;
        *a1 = *a2;
        *a2 = v15;
        uint64_t v16 = a1[1];
        a1[1] = a2[1];
        a2[1] = v16;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t (**a6)(uint64_t *, uint64_t *))
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(a1, a2, a3, a4, a6);
  uint64_t result = (*a6)(a5, a4);
  if (result)
  {
    uint64_t v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    uint64_t v14 = a4[1];
    a4[1] = a5[1];
    a5[1] = v14;
    uint64_t result = (*a6)(a4, a3);
    if (result)
    {
      uint64_t v15 = *a3;
      *a3 = *a4;
      *a4 = v15;
      uint64_t v16 = a3[1];
      a3[1] = a4[1];
      a4[1] = v16;
      uint64_t result = (*a6)(a3, a2);
      if (result)
      {
        uint64_t v17 = *a2;
        *a2 = *a3;
        *a3 = v17;
        uint64_t v18 = a2[1];
        a2[1] = a3[1];
        a3[1] = v18;
        uint64_t result = (*a6)(a2, a1);
        if (result)
        {
          uint64_t v19 = *a1;
          *a1 = *a2;
          *a2 = v19;
          uint64_t v20 = a1[1];
          a1[1] = a2[1];
          a2[1] = v20;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*,std::pair<wchar_t const*,wchar_t *>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unsigned int (**a4)(uint64_t, uint64_t))
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) >> 4;
    if ((uint64_t)a2 - a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = (_OWORD *)(a1 + 16 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      do
      {
        if ((*a4)((uint64_t)v14, a1))
        {
          uint64_t v15 = *v14;
          *uint64_t v14 = *(void *)a1;
          *(void *)a1 = v15;
          uint64_t v16 = v14[1];
          v14[1] = *(void *)(a1 + 8);
          *(void *)(a1 + 8) = v16;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(a1, a4, v9, (_OWORD *)a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 17)
    {
      uint64_t v17 = (unint64_t)v8 >> 4;
      uint64_t v18 = a2 - 2;
      do
      {
        uint64_t v20 = *(void *)a1;
        uint64_t v19 = *(void *)(a1 + 8);
        BOOL v21 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>((void *)a1, a4, v17);
        if (v18 == v21)
        {
          *BOOL v21 = v20;
          v21[1] = v19;
        }
        else
        {
          *BOOL v21 = *v18;
          v21[1] = v18[1];
          *uint64_t v18 = v20;
          v18[1] = v19;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(a1, (uint64_t)(v21 + 2), (uint64_t (**)(void *, long long *))a4, ((uint64_t)v21 - a1 + 16) >> 4);
        }
        v18 -= 2;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(uint64_t result, unsigned int (**a2)(void, void), uint64_t a3, _OWORD *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v20 = v4;
    uint64_t v21 = v5;
    uint64_t v7 = a4;
    uint64_t v8 = result;
    int64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v12 = ((uint64_t)a4 - result) >> 3;
      uint64_t v13 = v12 + 1;
      uint64_t v14 = (void *)(result + 16 * (v12 + 1));
      uint64_t v15 = v12 + 2;
      if (v12 + 2 < a3 && (*a2)(v14, v14 + 2))
      {
        v14 += 2;
        uint64_t v13 = v15;
      }
      uint64_t result = ((uint64_t (*)(void *, _OWORD *))*a2)(v14, v7);
      if ((result & 1) == 0)
      {
        long long v19 = *v7;
        do
        {
          uint64_t v16 = v14;
          *(void *)uint64_t v7 = *v14;
          *((void *)v7 + 1) = v14[1];
          if (v9 < v13) {
            break;
          }
          uint64_t v17 = (2 * v13) | 1;
          uint64_t v14 = (void *)(v8 + 16 * v17);
          uint64_t v18 = 2 * v13 + 2;
          if (v18 < a3)
          {
            if ((*a2)(v8 + 16 * v17, v14 + 2))
            {
              v14 += 2;
              uint64_t v17 = v18;
            }
          }
          uint64_t result = ((uint64_t (*)(void *, long long *))*a2)(v14, &v19);
          uint64_t v7 = v16;
          uint64_t v13 = v17;
        }
        while (!result);
        *uint64_t v16 = v19;
      }
    }
  }
  return result;
}

void *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(void *a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    int64_t v9 = &a1[2 * v6 + 2];
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)((uint64_t)&a1[2 * v6 + 2], (uint64_t)&a1[2 * v6 + 4]))
    {
      v9 += 2;
      uint64_t v10 = v11;
    }
    *a1 = *v9;
    a1[1] = v9[1];
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

double std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(void *, long long *), uint64_t a4)
{
  unint64_t v6 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v15 = v4;
    uint64_t v16 = v5;
    unint64_t v9 = v6 >> 1;
    uint64_t v10 = (void *)(a1 + 16 * (v6 >> 1));
    uint64_t v11 = (_OWORD *)(a2 - 16);
    if ((*a3)(v10, (long long *)(a2 - 16)))
    {
      long long v14 = *v11;
      do
      {
        uint64_t v13 = v10;
        *(void *)uint64_t v11 = *v10;
        *((void *)v11 + 1) = v10[1];
        if (!v9) {
          break;
        }
        unint64_t v9 = (v9 - 1) >> 1;
        uint64_t v10 = (void *)(a1 + 16 * v9);
        uint64_t v11 = v13;
      }
      while (((*a3)(v10, &v14) & 1) != 0);
      double result = *(double *)&v14;
      *uint64_t v13 = v14;
    }
  }
  return result;
}

void *std::__tree<std::__value_type<wchar_t const*,wchar_t const*>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,wchar_t const*>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,wchar_t const*>>>::__emplace_multi<std::pair<wchar_t *,wchar_t *>>(uint64_t **a1, _OWORD *a2)
{
  uint64_t v4 = operator new(0x30uLL);
  *((_OWORD *)v4 + 2) = *a2;
  leaf_high = (uint64_t **)std::__tree<std::__value_type<wchar_t const*,wchar_t const*>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,wchar_t const*>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,wchar_t const*>>>::__find_leaf_high((uint64_t)a1, &v7, (const __int32 **)v4 + 4);
  std::__tree<std::__value_type<wchar_t const*,unsigned long>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,unsigned long>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,unsigned long>>>::__insert_node_at(a1, v7, leaf_high, (uint64_t *)v4);
  return v4;
}

void sub_213E03C90(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<wchar_t const*,wchar_t const*>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,wchar_t const*>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,wchar_t const*>>>::__find_leaf_high(uint64_t a1, void *a2, const __int32 **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v5 = (void *)v4;
        if ((wcscmp(*a3, *(const __int32 **)(v4 + 32)) & 0x80000000) == 0) {
          break;
        }
        uint64_t v4 = *v5;
        double result = v5;
        if (!*v5) {
          goto LABEL_8;
        }
      }
      uint64_t v4 = v5[1];
    }
    while (v4);
    double result = v5 + 1;
  }
  else
  {
    double result = (void *)(a1 + 8);
  }
LABEL_8:
  *a2 = v5;
  return result;
}

void *std::vector<TWord const*>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<wchar_t const*>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_213E03D84(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void THashMap<TDecodeLinkMapWord::THistory,TDecodeLinkMapWord const*,THash<TDecodeLinkMapWord::THistory>,std::equal_to<TDecodeLinkMapWord::THistory>>::~THashMap(void *a1)
{
  THashBase<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THashMapCompare<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,std::equal_to<TDecodeLinkMapWord::THistory>>,THashMapFunction<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THash<TDecodeLinkMapWord::THistory>>>::~THashBase(a1);

  JUMPOUT(0x216698730);
}

uint64_t THashBase<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THashMapCompare<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,std::equal_to<TDecodeLinkMapWord::THistory>>,THashMapFunction<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THash<TDecodeLinkMapWord::THistory>>>::find@<X0>(uint64_t result@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  unint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    do
      unint64_t v5 = 33 * v5 + *((char *)a2 + v4++);
    while (v4 != 32);
    unint64_t v6 = v5 % v3;
    uint64_t v7 = *(void *)(result + 8);
    uint64_t v8 = (void *)(v7 + 8 * v6);
    unint64_t v9 = v8;
    while (1)
    {
      unint64_t v9 = (void *)*v9;
      if (!v9) {
        break;
      }
      double result = v9[4];
      if (v9[1] == *a2 && v9[2] == a2[1] && v9[3] == a2[2] && result == a2[3])
      {
        *a3 = v8;
        a3[1] = v7 + 8 * v3;
        a3[2] = v9;
        return result;
      }
    }
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return result;
}

void THashBase<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THashMapCompare<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,std::equal_to<TDecodeLinkMapWord::THistory>>,THashMapFunction<std::pair<TDecodeLinkMapWord::THistory const,TDecodeLinkMapWord const*>,THash<TDecodeLinkMapWord::THistory>>>::resize(uint64_t a1, uint64_t a2)
{
}

uint64_t **std::__tree<std::__value_type<wchar_t const*,wchar_t const*>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,wchar_t const*>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,wchar_t const*>>>::__equal_range_multi<wchar_t const*>(uint64_t a1, const __int32 **a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  unint64_t v3 = *(uint64_t **)(a1 + 8);
  if (!v3) {
    return (uint64_t **)v2;
  }
  while (1)
  {
    if (wcscmp(*a2, (const __int32 *)v3[4]) < 0)
    {
      uint64_t v2 = v3;
      goto LABEL_6;
    }
    if ((wcscmp((const __int32 *)v3[4], *a2) & 0x80000000) == 0) {
      break;
    }
    ++v3;
LABEL_6:
    unint64_t v3 = (uint64_t *)*v3;
    if (!v3) {
      return (uint64_t **)v2;
    }
  }
  uint64_t v7 = (uint64_t **)*v3;
  unint64_t v5 = (uint64_t **)v3;
  if (*v3)
  {
    unint64_t v5 = (uint64_t **)v3;
    do
    {
      int v8 = wcscmp((const __int32 *)v7[4], *a2);
      unint64_t v9 = v7 + 1;
      if (v8 >= 0)
      {
        unint64_t v9 = v7;
        unint64_t v5 = v7;
      }
      uint64_t v7 = (uint64_t **)*v9;
    }
    while (*v9);
  }
  uint64_t v10 = v3[1];
  if (v10)
  {
    do
    {
      int v11 = wcscmp(*a2, *(const __int32 **)(v10 + 32));
      uint64_t v12 = (uint64_t *)(v10 + 8);
      if (v11 < 0) {
        uint64_t v12 = (uint64_t *)v10;
      }
      uint64_t v10 = *v12;
    }
    while (*v12);
  }
  return v5;
}

void OUTLINED_FUNCTION_0_1()
{
  JUMPOUT(0x216698730);
}

uint64_t OUTLINED_FUNCTION_1(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t readObject(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned __int8 v9 = 0;
  readObject(a1, &v9, a3);
  if (v9 == 2) {
    char v6 = 2;
  }
  else {
    char v6 = 1;
  }
  *(unsigned char *)a2 = v6;
  if (*(unsigned char *)(a1 + 35))
  {
    unsigned __int8 v8 = 0;
    readObject(a1, &v8, a3);
  }
  return readObject(a1, (unsigned __int16 *)(a2 + 2), a3);
}

{
  uint64_t vars8;

  readObject(a1, (unsigned __int16 *)a2, a3);

  return readObject(a1, (_DWORD *)(a2 + 4), a3);
}

uLong StateMgr::computeOneStateIdNameChecksum(StateMgr *this, unsigned int a2)
{
  unsigned int v10 = a2;
  uLong v4 = computeCRC32(0, 0, 0);
  uint64_t v5 = *((void *)this + 12) + 16 * a2;
  if (*(_DWORD *)(v5 + 8)) {
    char v6 = *(const char **)v5;
  }
  else {
    char v6 = (const char *)&unk_21408D3EE;
  }
  uInt v7 = strlen(v6);
  unsigned int v8 = computeCRC32(v4, (const unsigned __int8 *)v6, v7);
  return computeCRC32(v8, &v10, 1u);
}

uLong StateMgr::computeStateIdNameChecksum(uLong this)
{
  *(_DWORD *)(this + 732) = 0;
  unint64_t v1 = *(unsigned int *)(this + 720);
  if (v1 >= 2)
  {
    uint64_t v2 = this;
    for (unint64_t i = 1; i < v1; ++i)
    {
      if (*(unsigned char *)(*(void *)(v2 + 544) + i))
      {
        if (*(unsigned char *)(*(void *)(v2 + 560) + i))
        {
          this = StateMgr::computeOneStateIdNameChecksum((StateMgr *)v2, i);
          *(_DWORD *)(v2 + 732) ^= this;
          unint64_t v1 = *(unsigned int *)(v2 + 720);
        }
      }
    }
  }
  return this;
}

void StateMgr::StateMgr(StateMgr *this, Voc *a2)
{
  uint64_t v37 = (char *)this + 48;
  uint64_t v38 = (char *)this + 16;
  uint64_t v35 = (char *)this + 80;
  uint64_t v36 = (char *)this + 64;
  unint64_t v33 = (char *)this + 112;
  uint64_t v34 = (char *)this + 96;
  int v26 = (char *)this + 176;
  unint64_t v24 = (char *)this + 192;
  uint64_t v23 = (char *)this + 208;
  uint64_t v22 = (char *)this + 224;
  unint64_t v25 = (char *)this + 240;
  uint64_t v31 = (char *)this + 256;
  uint64_t v32 = (char *)this + 128;
  unint64_t v29 = (char *)this + 272;
  uint64_t v30 = (char *)this + 144;
  int v27 = (char *)this + 288;
  int v28 = (char *)this + 160;
  uint64_t v20 = (char *)this + 416;
  uint64_t v21 = (char *)this + 400;
  long long v19 = (char *)this + 432;
  uLong v4 = (char *)this + 448;
  uint64_t v5 = (char *)this + 496;
  char v6 = (char *)this + 512;
  uInt v7 = (char *)this + 528;
  unsigned int v8 = (char *)this + 576;
  unsigned __int8 v9 = (char *)this + 592;
  unsigned int v10 = (char *)this + 608;
  *((_OWORD *)this + 44) = 0u;
  int v11 = (_OWORD *)((char *)this + 664);
  bzero(this, 0x290uLL);
  _OWORD *v11 = 0u;
  v11[1] = 0u;
  *((void *)this + 92) = a2;
  *((void *)this + 93) = *((void *)a2 + 6);
  uint64_t v12 = MemChunkAlloc(0x110uLL, 0);
  *((void *)this + 94) = EnvMgr::EnvMgr((EnvMgr *)v12, 2u);
  uint64_t v13 = MemChunkAlloc(0x110uLL, 0);
  *((void *)this + 95) = EnvMgr::EnvMgr((EnvMgr *)v13, 2u);
  *((unsigned char *)this + 656) = 1;
  *((_OWORD *)this + 45) = 0u;
  *((unsigned char *)this + 696) = 1;
  if (!*((_DWORD *)this + 3)) {
    DgnArray<DSMLocalRecord>::reallocElts((uint64_t)this, 1, 0);
  }
  if (!*((_DWORD *)this + 7)) {
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)v38, 1, 0);
  }
  if (!*((_DWORD *)this + 11))
  {
    v39[0] = 0;
    *((_DWORD *)this + 11) = realloc_array(*((void **)this + 4), v39, 1uLL, *((unsigned int *)this + 10), *((unsigned int *)this + 10), 1);
    *((void **)this + 4) = v39[0];
  }
  if (!*((_DWORD *)this + 15)) {
    DgnPrimArray<short>::reallocElts((uint64_t)v37, 1, 0);
  }
  if (!*((_DWORD *)this + 19)) {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)v36, 1, 0);
  }
  if (!*((_DWORD *)this + 23)) {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v35, 1, 0);
  }
  if (!*((_DWORD *)this + 27)) {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v34, 1, 0);
  }
  if (!*((_DWORD *)this + 31)) {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)v33, 1, 0);
  }
  if (!*((_DWORD *)this + 35)) {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v32, 1, 0);
  }
  if (!*((_DWORD *)this + 39)) {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v30, 1, 0);
  }
  if (!*((_DWORD *)this + 43)) {
    DgnPrimArray<short>::reallocElts((uint64_t)v28, 1, 0);
  }
  if (!*((_DWORD *)this + 47)) {
    DgnPrimArray<short>::reallocElts((uint64_t)v26, 1, 0);
  }
  if (!*((_DWORD *)this + 51)) {
    DgnPrimArray<short>::reallocElts((uint64_t)v24, 1, 0);
  }
  if (!*((_DWORD *)this + 55)) {
    DgnPrimArray<short>::reallocElts((uint64_t)v23, 1, 0);
  }
  if (!*((_DWORD *)this + 59)) {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v22, 1, 0);
  }
  if (!*((_DWORD *)this + 63)) {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v25, 1, 0);
  }
  if (!*((_DWORD *)this + 67)) {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v31, 1, 0);
  }
  if (!*((_DWORD *)this + 71)) {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)v29, 1, 0);
  }
  if (!*((_DWORD *)this + 75)) {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)v27, 1, 0);
  }
  if (!*((_DWORD *)this + 79))
  {
    v39[0] = 0;
    *((_DWORD *)this + 79) = realloc_array(*((void **)this + 38), v39, 1uLL, *((unsigned int *)this + 78), *((unsigned int *)this + 78), 1);
    *((void **)this + 38) = v39[0];
  }
  if (!*((_DWORD *)this + 83))
  {
    v39[0] = 0;
    *((_DWORD *)this + 83) = realloc_array(*((void **)this + 40), v39, 1uLL, *((unsigned int *)this + 82), *((unsigned int *)this + 82), 1);
    *((void **)this + 40) = v39[0];
  }
  if (!*((_DWORD *)this + 87))
  {
    v39[0] = 0;
    *((_DWORD *)this + 87) = realloc_array(*((void **)this + 42), v39, 1uLL, *((unsigned int *)this + 86), *((unsigned int *)this + 86), 1);
    *((void **)this + 42) = v39[0];
  }
  if (!*((_DWORD *)this + 91))
  {
    v39[0] = 0;
    *((_DWORD *)this + 91) = realloc_array(*((void **)this + 44), v39, 1uLL, *((unsigned int *)this + 90), *((unsigned int *)this + 90), 1);
    *((void **)this + 44) = v39[0];
  }
  if (!*((_DWORD *)this + 95))
  {
    v39[0] = 0;
    *((_DWORD *)this + 95) = realloc_array(*((void **)this + 46), v39, 1uLL, *((unsigned int *)this + 94), *((unsigned int *)this + 94), 1);
    *((void **)this + 46) = v39[0];
  }
  if (!*((_DWORD *)this + 99))
  {
    v39[0] = 0;
    *((_DWORD *)this + 99) = realloc_array(*((void **)this + 48), v39, 1uLL, *((unsigned int *)this + 98), *((unsigned int *)this + 98), 1);
    *((void **)this + 48) = v39[0];
  }
  if (!*((_DWORD *)this + 103)) {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)v21, 1, 0);
  }
  if (!*((_DWORD *)this + 107)) {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)v20, 1, 0);
  }
  if (!*((_DWORD *)this + 111)) {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)v19, 1, 0);
  }
  if (!*((_DWORD *)this + 115)) {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)v4, 1, 0);
  }
  if (!*((_DWORD *)this + 131)) {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)v6, 1, 0);
  }
  if (!*((_DWORD *)this + 123))
  {
    v39[0] = 0;
    *((_DWORD *)this + 123) = realloc_array(*((void **)this + 60), v39, 1uLL, *((unsigned int *)this + 122), *((unsigned int *)this + 122), 1);
    *((void **)this + 60) = v39[0];
  }
  if (!*((_DWORD *)this + 151)) {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v9, 1, 0);
  }
  if (!*((_DWORD *)this + 119))
  {
    v39[0] = 0;
    *((_DWORD *)this + 119) = realloc_array(*((void **)this + 58), v39, 1uLL, *((unsigned int *)this + 118), *((unsigned int *)this + 118), 1);
    *((void **)this + 58) = v39[0];
  }
  if (!*((_DWORD *)this + 127)) {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)v5, 1, 0);
  }
  if (!*((_DWORD *)this + 139))
  {
    v39[0] = 0;
    *((_DWORD *)this + 139) = realloc_array(*((void **)this + 68), v39, 1uLL, *((unsigned int *)this + 138), *((unsigned int *)this + 138), 1);
    *((void **)this + 68) = v39[0];
  }
  if (!*((_DWORD *)this + 143))
  {
    v39[0] = 0;
    *((_DWORD *)this + 143) = realloc_array(*((void **)this + 70), v39, 1uLL, *((unsigned int *)this + 142), *((unsigned int *)this + 142), 1);
    *((void **)this + 70) = v39[0];
  }
  if (!*((_DWORD *)this + 147)) {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v8, 1, 0);
  }
  if (!*((_DWORD *)this + 155)) {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v10, 1, 0);
  }
  if (!*((_DWORD *)this + 159))
  {
    v39[0] = 0;
    *((_DWORD *)this + 159) = realloc_array(*((void **)this + 78), v39, 1uLL, *((unsigned int *)this + 158), *((unsigned int *)this + 158), 1);
    *((void **)this + 78) = v39[0];
  }
  if (!*((_DWORD *)this + 169)) {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v11, 1, 0);
  }
  if (!*((_DWORD *)this + 135)) {
    DgnPrimArray<short>::reallocElts((uint64_t)v7, 1, 0);
  }
  LOWORD(v39[0]) = 0;
  StateMgr::newState(this, 0, (const unsigned __int16 *)v39, v14, v15, v16, v17, v18);
  **((unsigned char **)this + 68) = 0;
  **((unsigned char **)this + 70) = 0;
  *((_DWORD *)this + 183) = 0;
}

void sub_213E04990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _Unwind_Exception *exception_object, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray(v28 + 704);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v28 + 680);
  DgnArray<PhnIndexSet>::releaseAll(v29);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v28 + 640);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v28 + 624);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v36);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v35);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v34);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v28 + 560);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v28 + 544);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v33);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v32);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v31);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v28 + 480);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v28 + 464);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v30);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a15);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a16);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a17);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v28 + 384);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v28 + 368);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v28 + 352);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v28 + 336);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v28 + 320);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v28 + 304);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a23);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a25);
  DgnArray<DgnArray<ParseToken>>::releaseAll(a27);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(a21);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(a18);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a19);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a20);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a22);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a24);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(a26);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(a28);
  DgnPrimArray<unsigned int>::~DgnPrimArray(*(void *)(v37 - 144));
  DgnArray<DgnString>::releaseAll(*(void *)(v37 - 136));
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(*(void *)(v37 - 128));
  DgnPrimArray<unsigned int>::~DgnPrimArray(*(void *)(v37 - 120));
  DgnPrimArray<unsigned int>::~DgnPrimArray(*(void *)(v37 - 112));
  DgnPrimArray<unsigned int>::~DgnPrimArray(v28 + 32);
  DgnIOwnArray<BitArray *>::releaseAll(*(void *)(v37 - 104));
  DgnArray<DgnCollArray<unsigned int,WordList>>::releaseAll(v28);
  _Unwind_Resume(a1);
}

uint64_t StateMgr::newState(StateMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int16 v9 = 0;
  return StateMgr::newState(this, a2, &v9, a4, a5, a6, a7, a8);
}

{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  _DWORD *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int *v23;
  void v25[2];

  if (*((_DWORD *)this + 182) <= a3) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1552, (uint64_t)"voc/statemgr", 22, (uint64_t)"%u %u", a7, a8, *((_DWORD *)this + 180));
  }
  StateMgr::verifyStateFull(this, a2, 1, 1, a5, a6, a7, a8);
  uint64_t v13 = *((unsigned int *)this + 178);
  if (!v13) {
    goto LABEL_9;
  }
  uint64_t v14 = (int *)*((void *)this + 88);
  uint64_t v15 = 0xFFFFFFFFLL;
  while (1)
  {
    uint64_t v16 = *v14++;
    if (v16 == a3) {
      break;
    }
    --v15;
    if (!--v13) {
      goto LABEL_9;
    }
  }
  if (!v15) {
LABEL_9:
  }
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1558, (uint64_t)"voc/statemgr", 29, (uint64_t)"%u", v11, v12, a3);
  PhnIndexSet::PhnIndexSet((PhnIndexSet *)v25, *(_DWORD *)(*((void *)this + 92) + 184));
  *(_DWORD *)v25[0] |= 1u;
  uint64_t v17 = *((_DWORD *)this + 178);
  if (v17)
  {
    uint64_t v18 = *((unsigned int *)this + 178);
    long long v19 = (_DWORD *)*((void *)this + 88);
    while (*v19 != a3)
    {
      ++v19;
      if (!--v18) {
        goto LABEL_16;
      }
    }
    uint64_t v20 = v17 - 1;
    char *v19 = *(_DWORD *)(*((void *)this + 88) + 4 * v20);
    *((_DWORD *)this + 178) = v20;
  }
LABEL_16:
  *(unsigned char *)(*((void *)this + 68) + a3) = 1;
  *(unsigned char *)(*((void *)this + 70) + a3) = 1;
  BitArray::operator=((int **)(*((void *)this + 83) + 16 * a3), (uint64_t)v25);
  uint64_t v21 = *((void *)this + 16) + 16 * a2;
  uint64_t v23 = (unsigned int *)(v21 + 8);
  uint64_t v22 = *(_DWORD *)(v21 + 8);
  if (v22 == *(_DWORD *)(v21 + 12))
  {
    DgnPrimArray<unsigned int>::reallocElts(*((void *)this + 16) + 16 * a2, 1, 1);
    uint64_t v22 = *v23;
  }
  *(_DWORD *)(*(void *)v21 + 4 * v22) = a3;
  ++*v23;
  *(_DWORD *)(*((void *)this + 14) + 4 * a3) = a2;
  *(_WORD *)(*((void *)this + 6) + 2 * a3) = 0;
  *(_DWORD *)(*((void *)this + 8) + 4 * a3) = 0;
  *((_DWORD *)this + 183) ^= StateMgr::computeOneStateIdNameChecksum(this, a3);
  BitArray::~BitArray((BitArray *)v25);
  return a3;
}

void StateMgr::~StateMgr(EnvMgr **this)
{
  this[94] = 0;
  DgnDelete<EnvMgr>(this[95]);
  this[95] = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 88));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 85));
  DgnArray<PhnIndexSet>::releaseAll((uint64_t)(this + 83));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 80));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 78));
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)(this + 76));
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)(this + 74));
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)(this + 72));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 70));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 68));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 66));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 64));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 62));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 60));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 58));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 56));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 54));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 52));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 50));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 48));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 46));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 44));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 42));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 40));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 38));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 36));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 34));
  DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)(this + 32));
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)(this + 30));
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)(this + 28));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 26));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 24));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 22));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 20));
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)(this + 18));
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)(this + 16));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 14));
  DgnArray<DgnString>::releaseAll((uint64_t)(this + 12));
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)(this + 10));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 8));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 6));
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 4));
  DgnIOwnArray<BitArray *>::releaseAll((uint64_t)(this + 2));
  DgnArray<DgnCollArray<unsigned int,WordList>>::releaseAll((uint64_t)this);
}

void StateMgr::addPrimitiveBegPhonesArray(void *a1, unsigned int a2, uint64_t *a3)
{
  PhnIndexSet::PhnIndexSet((PhnIndexSet *)v11, *(_DWORD *)(a1[92] + 184));
  uint64_t v6 = v11[0];
  *(_DWORD *)v11[0] |= 1u;
  if (*((_DWORD *)a3 + 2))
  {
    unint64_t v7 = 0;
    uint64_t v8 = *a3;
    uint64_t v9 = *(void *)(a1[93] + 592);
    do
    {
      unint64_t v10 = *(unsigned __int16 *)(v9 + 2 * *(unsigned int *)(v8 + 4 * v7));
      *(_DWORD *)(v6 + ((v10 >> 3) & 0x1FFC)) |= 1 << v10;
      ++v7;
    }
    while (v7 < *((unsigned int *)a3 + 2));
  }
  BitArray::inplaceOrSameSize((_DWORD **)(a1[83] + 16 * a2), (const BitArray *)v11);
  BitArray::~BitArray((BitArray *)v11);
}

void sub_213E04E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void StateMgr::addPrimitiveBegPhones(StateMgr *this, unsigned int a2, unsigned int a3)
{
  PhnIndexSet::PhnIndexSet((PhnIndexSet *)v8, *(_DWORD *)(*((void *)this + 92) + 184));
  uint64_t v6 = v8[0];
  *(_DWORD *)v8[0] |= 1u;
  unint64_t v7 = *(unsigned __int16 *)(*(void *)(*((void *)this + 93) + 592) + 2 * a3);
  *(_DWORD *)(v6 + ((v7 >> 3) & 0x1FFC)) |= 1 << v7;
  BitArray::inplaceOrSameSize((_DWORD **)(*((void *)this + 83) + 16 * a2), (const BitArray *)v8);
  BitArray::~BitArray((BitArray *)v8);
}

void sub_213E04ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void StateMgr::recomputePrimitiveBegPhones(StateMgr *this, unsigned int a2)
{
  PhnIndexSet::PhnIndexSet((PhnIndexSet *)v5, *(_DWORD *)(*((void *)this + 92) + 184));
  BitArray::operator=((int **)(*((void *)this + 83) + 16 * a2), (uint64_t)v5);
  uLong v4 = *(_DWORD **)(*((void *)this + 83) + 16 * a2);
  *v4 |= 1u;
  StateMgr::addPrimitiveBegPhonesArray(this, a2, (uint64_t *)(*(void *)this + 80 * a2 + 8));
  BitArray::~BitArray((BitArray *)v5);
}

void sub_213E04F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void StateMgr::recomputeAllPrimitiveBegPhones(StateMgr *this)
{
  unint64_t v1 = *((unsigned int *)this + 180);
  if (v1 >= 2)
  {
    for (unint64_t i = 1; i < v1; ++i)
    {
      if (*(unsigned char *)(*((void *)this + 68) + i))
      {
        StateMgr::recomputePrimitiveBegPhones(this, i);
        unint64_t v1 = *((unsigned int *)this + 180);
      }
    }
  }
}

uint64_t StateMgr::declarePhnIndexSetsInitialized(uint64_t this)
{
  *(unsigned char *)(this + 656) = 1;
  return this;
}

BOOL StateMgr::isPrecedingNonAcousticWordForState(StateMgr *this, int a2, unsigned int a3)
{
  unsigned int v3 = *(_DWORD *)(*((void *)this + 64) + 4 * a3);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(unsigned int *)(*(void *)this + 80 * v3 + 16);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = *(int **)(*(void *)this + 80 * v3 + 8);
  for (uint64_t i = 0xFFFFFFFFLL; ; --i)
  {
    int v7 = *v5++;
    if (v7 == a2) {
      break;
    }
    if (!--v4) {
      return 0;
    }
  }
  return i != 0;
}

uint64_t StateMgr::isValidPrecedingNonAcousticWordStateForUpgrade(WordList **this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StateMgr::verifyState((StateMgr *)this, a2, a3, a4, a5, a6, a7, a8);
  if (*((_DWORD *)this[64] + a2)) {
    return 0;
  }
  StateMgr::verifyStateFull((StateMgr *)this, a2, 1, 0, v10, v11, v12, v13);
  uint64_t result = 0;
  if (!*((_DWORD *)this[28] + 4 * a2 + 2))
  {
    StateMgr::verifyStateFull((StateMgr *)this, a2, 1, 0, v15, v16, v17, v18);
    uint64_t result = 0;
    if (!*((_DWORD *)this[76] + 4 * a2 + 2))
    {
      uint64_t v25 = (uint64_t)*this + 80 * a2;
      int v27 = *(_DWORD *)(v25 + 16);
      int v26 = (unsigned int *)(v25 + 16);
      if (!v27) {
        return 0;
      }
      unint64_t v28 = 0;
      do
      {
        unsigned int v29 = *(_DWORD *)(*((void *)v26 - 1) + 4 * v28);
        WordList::verifyVisible(this[93], v29, v19, v20, v21, v22, v23, v24);
        uint64_t result = WordList::isGuessedWordByOptionalTag(this[93], v29);
        if ((result & 1) == 0) {
          break;
        }
        ++v28;
      }
      while (v28 < *v26);
    }
  }
  return result;
}

void StateMgr::verifyState(StateMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 180) <= a2 || !*(unsigned char *)(*((void *)this + 68) + a2)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1326, (uint64_t)"voc/statemgr", 1, (uint64_t)"%u", a7, a8, a2);
  }
}

uint64_t StateMgr::getStateTransition(StateMgr *this, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return *((void *)this + 28) + 16 * a2;
}

uint64_t StateMgr::resetPrecedingNonAcousticWordStates(uint64_t this)
{
  uint64_t v1 = this;
  unsigned int v2 = *(_DWORD *)(this + 720);
  unsigned int v3 = *(_DWORD *)(this + 524);
  unsigned int v4 = v2;
  if (v2 > v3)
  {
    this = DgnPrimArray<unsigned int>::reallocElts(this + 512, v2 - v3, 0);
    unsigned int v4 = *(_DWORD *)(v1 + 720);
  }
  *(_DWORD *)(v1 + 520) = v2;
  unsigned int v5 = v4;
  if (*(_DWORD *)(v1 + 492) < v4)
  {
    uint64_t v17 = 0;
    this = realloc_array(*(void **)(v1 + 480), &v17, v4, *(unsigned int *)(v1 + 488), *(unsigned int *)(v1 + 488), 1);
    *(_DWORD *)(v1 + 492) = this;
    *(void *)(v1 + 480) = v17;
    unsigned int v5 = *(_DWORD *)(v1 + 720);
  }
  *(_DWORD *)(v1 + 488) = v4;
  uint64_t v6 = (void *)(v1 + 592);
  unsigned int v7 = *(_DWORD *)(v1 + 604);
  if (v5 > v7) {
    this = DgnArray<DgnPrimArray<double>>::reallocElts(v1 + 592, v5 - v7, 0);
  }
  uint64_t v8 = *(unsigned int *)(v1 + 600);
  if (v8 <= v5)
  {
    if (v8 < v5)
    {
      uint64_t v11 = v5 - v8;
      uint64_t v12 = 16 * v8;
      do
      {
        uint64_t v13 = (void *)(*v6 + v12);
        *uint64_t v13 = 0;
        v13[1] = 0;
        v12 += 16;
        --v11;
      }
      while (v11);
    }
  }
  else if ((int)v8 > (int)v5)
  {
    uint64_t v9 = (int)v8;
    uint64_t v10 = 16 * (int)v8 - 16;
    do
    {
      --v9;
      this = DgnPrimArray<unsigned int>::~DgnPrimArray(*v6 + v10);
      v10 -= 16;
    }
    while (v9 > (int)v5);
  }
  *(_DWORD *)(v1 + 600) = v5;
  if (*(_DWORD *)(v1 + 720))
  {
    uint64_t v14 = 0;
    unint64_t v15 = 0;
    do
    {
      *(_DWORD *)(*(void *)(v1 + 512) + 4 * v15) = 0;
      *(unsigned char *)(*(void *)(v1 + 480) + v15) = 0;
      uint64_t v16 = *(void *)(v1 + 592);
      this = *(void *)(v16 + v14);
      if (this)
      {
        this = MemChunkFree((void *)this, 0);
        *(void *)(v16 + v14) = 0;
      }
      *(void *)(v16 + v14 + 8) = 0;
      ++v15;
      v14 += 16;
    }
    while (v15 < *(unsigned int *)(v1 + 720));
  }
  return this;
}

StateMgr *StateMgr::upgradePrecedingNonAcousticWordsAllowed(StateMgr *result, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)(*((void *)result + 93) + 516) >= 0x3Eu)
  {
    uint64_t v9 = a2[2];
    if (v9 >= 2)
    {
      uint64_t v10 = result;
      uint64_t v11 = (unsigned __int8 *)(*(void *)a2 + 1);
      uint64_t v12 = v9 - 1;
      while (1)
      {
        int v13 = *v11++;
        if (v13 == 1) {
          break;
        }
        if (!--v12) {
          return result;
        }
      }
      unsigned int Handle = StateMgr::getHandle(result, "GuessedWords", 0, a4, a5, a6, a7, a8);
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      if (!Handle
        || (unsigned int v21 = Handle,
            (StateMgr::isValidPrecedingNonAcousticWordStateForUpgrade((WordList **)v10, Handle, v15, v16, v17, v18, v19, v20) & 1) == 0))
      {
        WordList::getAllGuessedWordsByOptionalTag(*((void *)v10 + 93), (uint64_t)&v33);
        if (!v34) {
          return (StateMgr *)DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v33);
        }
        unsigned __int16 v35 = 0;
        unsigned int v21 = StateMgr::newState(v10, 0, &v35, v22, v23, v24, v25, v26);
        StateMgr::addWordIdArrayNoPhones(v10, v21, (uint64_t)&v33, 1, v27, v28, v29, v30);
      }
      unint64_t v31 = a2[2];
      if (v31 >= 2)
      {
        for (unint64_t i = 1; i < v31; ++i)
        {
          if (v21 != i && *(unsigned char *)(*(void *)a2 + i) == 1)
          {
            *(_DWORD *)(*((void *)v10 + 64) + 4 * i) = v21;
            StateMgr::addPrecedingNonAcousticWordStateRef((unint64_t)v10, v21, i);
            unint64_t v31 = a2[2];
          }
        }
      }
      return (StateMgr *)DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v33);
    }
  }
  return result;
}

void sub_213E0549C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t StateMgr::getHandle(StateMgr *this, const char *__s2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a3;
  if (a3) {
    StateMgr::verifyVisible(this, a3, a3, a4, a5, a6, a7, a8);
  }
  uint64_t v11 = *((void *)this + 16);
  uint64_t v12 = *(unsigned int *)(v11 + 16 * v8 + 8);
  if (!v12) {
    return 0;
  }
  int v13 = *(unsigned int **)(v11 + 16 * v8);
  uint64_t v14 = *((void *)this + 12);
  while (1)
  {
    unsigned int v16 = *v13++;
    uint64_t v15 = v16;
    uint64_t v17 = v14 + 16 * v16;
    int v18 = *(_DWORD *)(v17 + 8);
    uint64_t v19 = *(void **)v17;
    uint64_t v20 = (const char *)(v18 ? v19 : &unk_21408D3EE);
    if (*v20 && !strcmp(v20, __s2)) {
      break;
    }
    if (!--v12) {
      return 0;
    }
  }
  return v15;
}

uint64_t StateMgr::addWordIdArrayNoPhones(StateMgr *a1, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)(a3 + 8))
  {
    unint64_t v12 = 0;
    uint64_t v13 = a2;
    do
    {
      unint64_t v14 = *(unsigned int *)(*(void *)a3 + 4 * v12);
      if (StateMgr::isWordIdInState(a1, a2, *(_DWORD *)(*(void *)a3 + 4 * v12), a4, a5, a6, a7, a8)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 2046, (uint64_t)"voc/statemgr", 3, (uint64_t)"%u %u", v15, v16, v14);
      }
      WordList::addIncludingStateRef(*((void *)a1 + 93), v14);
      uint64_t v17 = *(BitArray **)(*((void *)a1 + 2) + 8 * a2);
      if (v17)
      {
        unsigned int v18 = *((_DWORD *)v17 + 2);
        if (v18 <= v14)
        {
          BitArray::addSize(v17, v14 + 1 - v18);
          BitArray::clearRange(*(BitArray **)(*((void *)a1 + 2) + 8 * a2), v18, v14 + 1);
          uint64_t v17 = *(BitArray **)(*((void *)a1 + 2) + 8 * a2);
        }
        *(_DWORD *)(*(void *)v17 + ((v14 >> 3) & 0x1FFFFFFC)) |= 1 << v14;
      }
      ++v12;
    }
    while (v12 < *(unsigned int *)(a3 + 8));
  }
  else
  {
    uint64_t v13 = a2;
  }
  uint64_t result = DgnCollArray<unsigned int,WordList>::addArray(*(void *)a1 + 80 * v13, a3);
  if (!*(void *)(*((void *)a1 + 2) + 8 * v13)
    && *(_DWORD *)(*(void *)a1 + 80 * v13 + 16) >= 0x1F4u)
  {
    return StateMgr::getBitWords(a1, a2);
  }
  return result;
}

unint64_t StateMgr::addPrecedingNonAcousticWordStateRef(unint64_t this, unsigned int a2, int a3)
{
  uint64_t v4 = *(void *)(this + 592) + 16 * a2;
  uint64_t v6 = (unsigned int *)(v4 + 8);
  unsigned int v5 = *(_DWORD *)(v4 + 8);
  if (v5 == *(_DWORD *)(v4 + 12))
  {
    this = DgnPrimArray<unsigned int>::reallocElts(*(void *)(this + 592) + 16 * a2, 1, 1);
    unsigned int v5 = *v6;
  }
  *(_DWORD *)(*(void *)v4 + 4 * v5) = a3;
  ++*v6;
  return this;
}

uint64_t StateMgr::loadStateMgr(StateMgr *this, DFile *a2, DFileChecksums *a3, int a4, unsigned int a5)
{
  *((unsigned char *)this + 656) = 0;
  uint64_t result = DFile::subFileExists((uint64_t)a2, 0x59u);
  if (!result) {
    return result;
  }
  *((void *)this + 92) = *(void *)(**(void **)VocMgr::smpVocMgr + 8 * a5);
  if (a4) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 746, (uint64_t)"voc/statemgr", 19, (uint64_t)"%s", v11, v12, (char)&unk_21408D3EE);
  }
  *(void *)v193 = 0;
  uint64_t MrecHeader = OpenAndReadMrecHeader((uint64_t)a2, 0x59u, 1, "MRSTA!? ", &v193[1], v193);
  uint64_t v16 = (DgnStream *)MrecHeader;
  *(unsigned char *)(MrecHeader + 35) = 0;
  int v17 = v193[0];
  BOOL v18 = v193[1] == 19 && v193[0] == 38;
  int v19 = !v18;
  int v175 = v19;
  v173 = a3;
  if (v18)
  {
    int v174 = 0;
    char v20 = 0;
    int v172 = 1;
    *(unsigned char *)(MrecHeader + 35) = 1;
    int v21 = 19;
    int v17 = 38;
    goto LABEL_20;
  }
  switch(*(void *)v193)
  {
    case 0x1400000027:
      int v174 = 0;
      char v20 = 0;
      int v172 = 1;
      *(unsigned char *)(MrecHeader + 35) = 1;
      int v21 = 20;
      goto LABEL_20;
    case 0x1600000028:
      char v20 = 0;
      int v174 = 1;
      *(unsigned char *)(MrecHeader + 35) = 1;
      int v21 = 22;
LABEL_19:
      int v172 = 1;
      goto LABEL_20;
    case 0x1700000029:
    case 0x170000002ALL:
      int v174 = 1;
      *(unsigned char *)(MrecHeader + 35) = 1;
      int v21 = 23;
      char v20 = 1;
      goto LABEL_19;
    case 0x180000002BLL:
      int v172 = 0;
      int v174 = 1;
      *(unsigned char *)(MrecHeader + 35) = 1;
      int v21 = 24;
      break;
    default:
      if (*((_DWORD *)a2 + 6)) {
        v171 = (char *)*((void *)a2 + 2);
      }
      else {
        v171 = (char *)&unk_21408D3EE;
      }
      MrecHeaderCheckVersions(v171, "MRSTA!? ", v193[1], v193[0], 0x18u, 0x2Cu);
      int v172 = 0;
      int v17 = v193[0];
      int v21 = v193[1];
      int v174 = 1;
      break;
  }
  char v20 = 1;
LABEL_20:
  MrecHeaderCheckLatestVersionIfShared(a2, "MRSTA!? ", v21, v17, 24, 44, v14, v15);
  unsigned int v192 = 0;
  v191[0] = 0;
  v191[1] = 0;
  uint64_t v189 = 0;
  uint64_t v190 = 0;
  uint64_t v187 = 0;
  uint64_t v188 = 0;
  uint64_t v185 = 0;
  uint64_t v186 = 0;
  uint64_t v183 = 0;
  uint64_t v184 = 0;
  readObject<DgnCollArray<unsigned int,WordList>>(v16, (uint64_t)this, &v192);
  readObject<unsigned char>(v16, (uint64_t)this + 32, &v192);
  if (!*((unsigned char *)v16 + 35) || (readObject<RuleSpec>((uint64_t)v16, (uint64_t)&v189, &v192), !*((unsigned char *)v16 + 35))) {
    readObject<unsigned short>(v16, (uint64_t)this + 48, &v192);
  }
  readObject<unsigned int>(v16, (uint64_t)this + 64, &v192);
  if (!*((unsigned char *)v16 + 35)
    || (readObject<DgnArray<RuleSpec>>((uint64_t)v16, (uint64_t)&v187, &v192), !*((unsigned char *)v16 + 35)))
  {
    readObject<DgnPrimArray<unsigned short>>(v16, (uint64_t)this + 80, &v192);
  }
  readObject<DgnString>(v16, (uint64_t)this + 96, &v192);
  readObject<unsigned int>(v16, (uint64_t)this + 112, &v192);
  readObject<DgnPrimArray<unsigned int>>(v16, (uint64_t)this + 128, &v192);
  readObject<DgnPrimArray<unsigned short>>(v16, (uint64_t)this + 144, &v192);
  if (!*((unsigned char *)v16 + 35)
    || (readObject<DgnArray<StateSpec>>((uint64_t)v16, (uint64_t)&v185, &v192), !*((unsigned char *)v16 + 35)))
  {
    readObject<DgnPrimArray<unsigned int>>(v16, (uint64_t)this + 224, &v192);
  }
  readObject<DgnPrimArray<unsigned short>>(v16, (uint64_t)this + 240, &v192);
  readObject<DgnArray<ParseToken>>((uint64_t)v16, (uint64_t)this + 256, &v192);
  readObject<unsigned int>(v16, (uint64_t)this + 272, &v192);
  readObject<int>(v16, (uint64_t)this + 288, &v192);
  readObject<unsigned char>(v16, (uint64_t)this + 304, &v192);
  readObject<unsigned char>(v16, (uint64_t)this + 320, &v192);
  readObject<unsigned char>(v16, (uint64_t)this + 336, &v192);
  readObject<unsigned char>(v16, (uint64_t)this + 352, &v192);
  readObject<unsigned char>(v16, (uint64_t)this + 368, &v192);
  readObject<unsigned char>(v16, (uint64_t)this + 384, &v192);
  if (v175)
  {
    readObject<unsigned int>(v16, (uint64_t)this + 400, &v192);
    readObject<unsigned int>(v16, (uint64_t)this + 416, &v192);
    readObject<unsigned int>(v16, (uint64_t)this + 432, &v192);
    readObject<unsigned int>(v16, (uint64_t)this + 448, &v192);
  }
  if (v20)
  {
    readObject<unsigned int>(v16, (uint64_t)this + 512, &v192);
    readObject<unsigned char>(v16, (uint64_t)this + 480, &v192);
    readObject<DgnPrimArray<unsigned int>>(v16, (uint64_t)this + 592, &v192);
  }
  else
  {
    readObject<unsigned char>(v16, (uint64_t)v191, &v192);
  }
  readObject<unsigned char>(v16, (uint64_t)this + 464, &v192);
  readObject<unsigned int>(v16, (uint64_t)this + 496, &v192);
  readObject<unsigned char>(v16, (uint64_t)this + 544, &v192);
  readObject<unsigned char>(v16, (uint64_t)this + 560, &v192);
  readObject<DgnPrimArray<unsigned int>>(v16, (uint64_t)this + 576, &v192);
  if (!*((unsigned char *)v16 + 35)
    || (readObject<DgnArray<StateSpec>>((uint64_t)v16, (uint64_t)&v183, &v192), !*((unsigned char *)v16 + 35)))
  {
    readObject<DgnPrimArray<unsigned int>>(v16, (uint64_t)this + 608, &v192);
  }
  readObject<unsigned int>(v16, (uint64_t)this + 704, &v192);
  uint64_t v22 = (unsigned int *)((char *)this + 720);
  readObject((uint64_t)v16, (_DWORD *)this + 180, &v192);
  readObject((uint64_t)v16, (_DWORD *)this + 181, &v192);
  if (v174) {
    readObject((uint64_t)v16, (_DWORD *)this + 183, &v192);
  }
  if (*((unsigned char *)v16 + 35))
  {
    unsigned __int16 v182 = 0;
    readObject((uint64_t)v16, &v182, &v192);
    v180 = 0;
    uint64_t v181 = 0;
    v178 = 0;
    uint64_t v179 = 0;
    readObject<unsigned int>(v16, (uint64_t)&v180, &v192);
    readObject<unsigned int>(v16, (uint64_t)&v178, &v192);
    if (v181)
    {
      unint64_t v27 = 0;
      do
        StateMgr::killStateInternal((EnvMgr **)this, *((unsigned int *)v180 + v27++), 0, 1, v23, v24, v25, v26);
      while (v27 < v181);
    }
    if (*v22)
    {
      unint64_t v28 = 0;
      do
      {
        uint64_t v176 = 0;
        uint64_t v177 = 0;
        uint64_t v29 = v183;
        unint64_t v30 = v183 + 16 * v28;
        if (*(_DWORD *)(v30 + 8))
        {
          uint64_t v31 = 0;
          unsigned int v32 = 0;
          unint64_t v33 = 0;
          do
          {
            uint64_t v34 = *(unsigned __int16 *)(*(void *)v30 + v31);
            if (v34 == v182)
            {
              uint64_t v35 = *(unsigned int *)(*(void *)v30 + v31 + 4);
              if (v32 == HIDWORD(v177))
              {
                DgnPrimArray<unsigned long long>::reallocElts((uint64_t)&v176, 1, 1);
                unsigned int v32 = v177;
              }
              *(void *)(v176 + 8 * v32) = v34 | (v35 << 32);
              unsigned int v32 = v177 + 1;
              LODWORD(v177) = v177 + 1;
              uint64_t v29 = v183;
            }
            ++v33;
            unint64_t v30 = v29 + 16 * v28;
            v31 += 8;
          }
          while (v33 < *(unsigned int *)(v30 + 8));
        }
        else
        {
          unsigned int v32 = 0;
        }
        DgnArray<StateSpec>::copyArraySlice(v30, &v176, 0, v32);
        DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v176);
        ++v28;
        unint64_t v36 = *v22;
      }
      while (v28 < v36);
      if (*v22)
      {
        unint64_t v37 = 0;
        do
        {
          uint64_t v38 = v179;
          if (v179)
          {
            uint64_t v39 = v178;
            uint64_t v40 = 0xFFFFFFFFLL;
            while (1)
            {
              int v41 = *v39++;
              if (v37 == v41) {
                break;
              }
              --v40;
              if (!--v38) {
                goto LABEL_73;
              }
            }
            if (v40)
            {
              uint64_t v176 = 0;
              uint64_t v177 = 0;
              uint64_t v42 = v187;
              unint64_t v43 = v187 + 16 * v37;
              if (*(_DWORD *)(v43 + 8))
              {
                uint64_t v44 = 0;
                uint64_t v45 = 0;
                unsigned int v46 = 0;
                unint64_t v47 = 0;
                do
                {
                  uint64_t v48 = *(void *)v43;
                  int v49 = *(unsigned __int16 *)(*(void *)v43 + v44);
                  if (v49 == v182)
                  {
                    if (v46 == HIDWORD(v177))
                    {
                      DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v176, 1, 1);
                      unsigned int v46 = v177;
                      uint64_t v45 = v176;
                      LOWORD(v49) = *(_WORD *)(v48 + v44);
                      uint64_t v42 = v187;
                    }
                    uint64_t v50 = (_WORD *)(v45 + 4 * v46);
                    *uint64_t v50 = v49;
                    v50[1] = *(_WORD *)(v48 + v44 + 2);
                    LODWORD(v177) = ++v46;
                  }
                  ++v47;
                  unint64_t v43 = v42 + 16 * v37;
                  v44 += 4;
                }
                while (v47 < *(unsigned int *)(v43 + 8));
              }
              else
              {
                unsigned int v46 = 0;
              }
              DgnArray<RuleSpec>::copyArraySlice(v43, &v176, 0, v46);
              DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v176);
              unint64_t v36 = *v22;
            }
          }
LABEL_73:
          ++v37;
        }
        while (v37 < v36);
      }
    }
    int v51 = v190;
    unsigned int v52 = *((_DWORD *)this + 15);
    LODWORD(v53) = v190;
    if (v190 > v52)
    {
      DgnPrimArray<short>::reallocElts((uint64_t)this + 48, v190 - v52, 0);
      LODWORD(v53) = v190;
    }
    *((_DWORD *)this + 14) = v51;
    if (v53)
    {
      uint64_t v54 = (_WORD *)*((void *)this + 6);
      uint64_t v53 = v53;
      uint64_t v55 = (__int16 *)(v189 + 2);
      do
      {
        __int16 v56 = *v55;
        v55 += 2;
        *v54++ = v56;
        --v53;
      }
      while (v53);
    }
    unint64_t v57 = (void *)((char *)this + 80);
    uint64_t v58 = v188;
    unsigned int v59 = *((_DWORD *)this + 23);
    if (v188 > v59) {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 80, v188 - v59, 0);
    }
    uint64_t v60 = *((unsigned int *)this + 22);
    if (v60 <= v58)
    {
      if (v60 < v58)
      {
        uint64_t v63 = v58 - v60;
        uint64_t v64 = 16 * v60;
        do
        {
          uint64_t v65 = (void *)(*v57 + v64);
          void *v65 = 0;
          v65[1] = 0;
          v64 += 16;
          --v63;
        }
        while (v63);
      }
    }
    else if ((int)v60 > (int)v58)
    {
      uint64_t v61 = (int)v60;
      uint64_t v62 = 16 * (int)v60 - 16;
      do
      {
        --v61;
        DgnPrimArray<unsigned int>::~DgnPrimArray(*v57 + v62);
        v62 -= 16;
      }
      while (v61 > (int)v58);
    }
    *((_DWORD *)this + 22) = v58;
    if (v188)
    {
      unint64_t v66 = 0;
      uint64_t v67 = v187;
      do
      {
        unsigned int v68 = *(_DWORD *)(v67 + 16 * v66 + 8);
        uint64_t v69 = *v57 + 16 * v66;
        unsigned int v70 = *(_DWORD *)(v69 + 12);
        LODWORD(v71) = v68;
        if (v68 > v70)
        {
          DgnPrimArray<short>::reallocElts(*v57 + 16 * v66, v68 - v70, 0);
          uint64_t v67 = v187;
          LODWORD(v71) = *(_DWORD *)(v187 + 16 * v66 + 8);
        }
        *(_DWORD *)(v69 + 8) = v68;
        if (v71)
        {
          long long v72 = *(_WORD **)(*v57 + 16 * v66);
          uint64_t v71 = v71;
          uint64_t v73 = (__int16 *)(*(void *)(v67 + 16 * v66) + 2);
          do
          {
            __int16 v74 = *v73;
            v73 += 2;
            *v72++ = v74;
            --v71;
          }
          while (v71);
        }
        ++v66;
      }
      while (v66 < v188);
    }
    uint64_t v75 = (void *)((char *)this + 224);
    uint64_t v76 = v186;
    unsigned int v77 = *((_DWORD *)this + 59);
    if (v186 > v77) {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 224, v186 - v77, 0);
    }
    uint64_t v78 = *((unsigned int *)this + 58);
    if (v78 <= v76)
    {
      if (v78 < v76)
      {
        uint64_t v81 = v76 - v78;
        uint64_t v82 = 16 * v78;
        do
        {
          v83 = (void *)(*v75 + v82);
          void *v83 = 0;
          v83[1] = 0;
          v82 += 16;
          --v81;
        }
        while (v81);
      }
    }
    else if ((int)v78 > (int)v76)
    {
      uint64_t v79 = (int)v78;
      uint64_t v80 = 16 * (int)v78 - 16;
      do
      {
        --v79;
        DgnPrimArray<unsigned int>::~DgnPrimArray(*v75 + v80);
        v80 -= 16;
      }
      while (v79 > (int)v76);
    }
    *((_DWORD *)this + 58) = v76;
    if (v186)
    {
      unint64_t v84 = 0;
      uint64_t v85 = v185;
      do
      {
        unsigned int v86 = *(_DWORD *)(v85 + 16 * v84 + 8);
        uint64_t v87 = *v75 + 16 * v84;
        unsigned int v88 = *(_DWORD *)(v87 + 12);
        unsigned int v89 = v86;
        if (v86 > v88)
        {
          DgnPrimArray<unsigned int>::reallocElts(*v75 + 16 * v84, v86 - v88, 0);
          uint64_t v85 = v185;
          unsigned int v89 = *(_DWORD *)(v185 + 16 * v84 + 8);
        }
        *(_DWORD *)(v87 + 8) = v86;
        if (v89)
        {
          unint64_t v90 = 0;
          uint64_t v91 = *(void *)(*v75 + 16 * v84);
          uint64_t v92 = (int *)(*(void *)(v85 + 16 * v84) + 4);
          do
          {
            int v93 = *v92;
            v92 += 2;
            *(_DWORD *)(v91 + 4 * v90++) = v93;
          }
          while (v90 < *(unsigned int *)(v85 + 16 * v84 + 8));
        }
        ++v84;
      }
      while (v84 < v186);
    }
    v94 = (void *)((char *)this + 608);
    uint64_t v95 = v184;
    unsigned int v96 = *((_DWORD *)this + 155);
    if (v184 > v96) {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 608, v184 - v96, 0);
    }
    uint64_t v97 = *((unsigned int *)this + 154);
    if (v97 <= v95)
    {
      if (v97 < v95)
      {
        uint64_t v100 = v95 - v97;
        uint64_t v101 = 16 * v97;
        do
        {
          v102 = (void *)(*v94 + v101);
          void *v102 = 0;
          v102[1] = 0;
          v101 += 16;
          --v100;
        }
        while (v100);
      }
    }
    else if ((int)v97 > (int)v95)
    {
      uint64_t v98 = (int)v97;
      uint64_t v99 = 16 * (int)v97 - 16;
      do
      {
        --v98;
        DgnPrimArray<unsigned int>::~DgnPrimArray(*v94 + v99);
        v99 -= 16;
      }
      while (v98 > (int)v95);
    }
    *((_DWORD *)this + 154) = v95;
    if (v184)
    {
      unint64_t v103 = 0;
      uint64_t v104 = v183;
      do
      {
        unsigned int v105 = *(_DWORD *)(v104 + 16 * v103 + 8);
        uint64_t v106 = *v94 + 16 * v103;
        unsigned int v107 = *(_DWORD *)(v106 + 12);
        unsigned int v108 = v105;
        if (v105 > v107)
        {
          DgnPrimArray<unsigned int>::reallocElts(*v94 + 16 * v103, v105 - v107, 0);
          uint64_t v104 = v183;
          unsigned int v108 = *(_DWORD *)(v183 + 16 * v103 + 8);
        }
        *(_DWORD *)(v106 + 8) = v105;
        if (v108)
        {
          unint64_t v109 = 0;
          uint64_t v110 = *(void *)(*v94 + 16 * v103);
          v111 = (int *)(*(void *)(v104 + 16 * v103) + 4);
          do
          {
            int v112 = *v111;
            v111 += 2;
            *(_DWORD *)(v110 + 4 * v109++) = v112;
          }
          while (v109 < *(unsigned int *)(v104 + 16 * v103 + 8));
        }
        ++v103;
      }
      while (v103 < v184);
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v178);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v180);
  }
  EnvMgr::loadEnvMgrFromStream(*((EnvMgr **)this + 94), a2, v16, &v192, 0);
  EnvMgr::loadEnvMgrFromStream(*((EnvMgr **)this + 95), a2, v16, &v192, 0);
  readObjectChecksumAndVerify(v16, v192);
  uint64_t CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
  DFileChecksums::addChecksum((uint64_t)v173, CurrentSubDirComponents, 0x59u, v192);
  if ((v20 & 1) == 0) {
    StateMgr::resetPrecedingNonAcousticWordStates((uint64_t)this);
  }
  LODWORD(v114) = *v22;
  if (v175) {
    goto LABEL_148;
  }
  unsigned int v115 = *((_DWORD *)this + 103);
  unsigned int v116 = *v22;
  if (v114 > v115)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 400, v114 - v115, 0);
    unsigned int v116 = *v22;
  }
  *((_DWORD *)this + 102) = v114;
  unsigned int v117 = *((_DWORD *)this + 107);
  unsigned int v118 = v116;
  if (v116 > v117)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 416, v116 - v117, 0);
    unsigned int v118 = *v22;
  }
  *((_DWORD *)this + 106) = v116;
  unsigned int v119 = *((_DWORD *)this + 111);
  unsigned int v120 = v118;
  if (v118 > v119)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 432, v118 - v119, 0);
    unsigned int v120 = *v22;
  }
  *((_DWORD *)this + 110) = v118;
  unsigned int v121 = *((_DWORD *)this + 115);
  unsigned int v122 = v120;
  if (v120 > v121)
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 448, v120 - v121, 0);
    unsigned int v122 = *v22;
  }
  *((_DWORD *)this + 114) = v120;
  if (v122)
  {
    unint64_t v123 = 0;
    uint64_t v124 = *((void *)this + 50);
    uint64_t v125 = *((void *)this + 52);
    uint64_t v126 = *((void *)this + 54);
    uint64_t v127 = *((void *)this + 56);
    do
    {
      *(_DWORD *)(v124 + 4 * v123) = -1;
      *(_DWORD *)(v125 + 4 * v123) = -1;
      *(_DWORD *)(v126 + 4 * v123) = -1;
      *(_DWORD *)(v127 + 4 * v123++) = -1;
      unint64_t v114 = *v22;
    }
    while (v123 < v114);
LABEL_148:
    if (*((_DWORD *)this + 173) < v114)
    {
      v180 = 0;
      *((_DWORD *)this + 173) = realloc_array(*((void **)this + 85), &v180, v114, *((unsigned int *)this + 172), *((unsigned int *)this + 172), 1);
      *((void *)this + 85) = v180;
    }
    goto LABEL_151;
  }
  LODWORD(v114) = 0;
LABEL_151:
  *((_DWORD *)this + 172) = v114;
  if (*((_DWORD *)this + 178))
  {
    unint64_t v128 = 0;
    do
      *(unsigned char *)(*((void *)this + 85) + *(unsigned int *)(*((void *)this + 88) + 4 * v128++)) = 1;
    while (v128 < *((unsigned int *)this + 178));
  }
  v129 = (void *)((char *)this + 664);
  uint64_t v130 = *((unsigned int *)this + 168);
  if ((int)v130 >= 1)
  {
    uint64_t v131 = 16 * v130 - 16;
    do
    {
      BitArray::~BitArray((BitArray *)(*v129 + v131));
      v131 -= 16;
    }
    while (v131 != -16);
  }
  *((_DWORD *)this + 168) = 0;
  unsigned int v132 = *((_DWORD *)this + 180);
  unsigned int v133 = *((_DWORD *)this + 169);
  if (v132 > v133) {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 664, v132 - v133, 0);
  }
  PhnIndexSet::PhnIndexSet((PhnIndexSet *)&v180, *(_DWORD *)(*((void *)this + 92) + 184));
  if (*v22)
  {
    unsigned int v134 = 0;
    unsigned int v135 = *((_DWORD *)this + 168);
    do
    {
      PhnIndexSet::PhnIndexSet((PhnIndexSet *)(*v129 + 16 * v135), (const PhnIndexSet *)&v180);
      unsigned int v135 = *((_DWORD *)this + 168) + 1;
      *((_DWORD *)this + 168) = v135;
      ++v134;
    }
    while (v134 < *((_DWORD *)this + 180));
  }
  BitArray::~BitArray((BitArray *)&v180);
  unint64_t v142 = *((unsigned int *)this + 180);
  int v143 = v142;
  if (*((_DWORD *)this + 159) < v142)
  {
    v180 = 0;
    *((_DWORD *)this + 159) = realloc_array(*((void **)this + 78), &v180, v142, *((unsigned int *)this + 158), *((unsigned int *)this + 158), 1);
    *((void *)this + 78) = v180;
    int v143 = *((_DWORD *)this + 180);
  }
  *((_DWORD *)this + 158) = v142;
  if (v143)
  {
    unint64_t v144 = 0;
    do
    {
      *(unsigned char *)(*((void *)this + 78) + v144++) = 0;
      unint64_t v145 = *((unsigned int *)this + 180);
    }
    while (v144 < v145);
    if (v145)
    {
      uint64_t v146 = *((void *)this + 92);
      uint64_t v147 = *(void *)(v146 + 48);
      uint64_t v148 = *(void *)(v146 + 16);
      v149 = (void *)(*(void *)this + 72);
      uint64_t v150 = *((unsigned int *)this + 180);
      do
      {
        *(v149 - 2) = WordIdCollSearchCmpFromWordId;
        *(v149 - 1) = v147;
        void *v149 = v148;
        v149 += 10;
        --v150;
      }
      while (v150);
    }
    v151 = (StateMgr *)((char *)this + 16);
    unsigned int v152 = *((_DWORD *)this + 7);
    if (v145 > v152) {
      DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 16, v145 - v152, 0);
    }
  }
  else
  {
    LODWORD(v145) = 0;
    v151 = (StateMgr *)((char *)this + 16);
  }
  uint64_t v153 = *((unsigned int *)this + 6);
  if (v153 <= v145)
  {
    if (v153 < v145)
    {
      do
        *(void *)(*(void *)v151 + 8 * v153++) = 0;
      while (v145 != v153);
    }
  }
  else
  {
    DgnIOwnArray<BitArray *>::destructAt(v151, v145, v153 - v145);
  }
  *((_DWORD *)this + 6) = v145;
  uint64_t v154 = *((unsigned int *)this + 180);
  if (v154)
  {
    uint64_t v155 = 0;
    do
    {
      *(void *)(*(void *)v151 + v155) = 0;
      v155 += 8;
    }
    while (8 * v154 != v155);
  }
  unsigned int v156 = *((_DWORD *)this + 43);
  unsigned int v157 = v154;
  if (v154 > v156)
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 160, v154 - v156, 0);
    unsigned int v157 = *v22;
  }
  *((_DWORD *)this + 42) = v154;
  unsigned int v158 = *((_DWORD *)this + 47);
  unsigned int v159 = v157;
  if (v157 > v158)
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 176, v157 - v158, 0);
    unsigned int v159 = *v22;
  }
  *((_DWORD *)this + 46) = v157;
  unsigned int v160 = *((_DWORD *)this + 51);
  unsigned int v161 = v159;
  if (v159 > v160)
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 192, v159 - v160, 0);
    unsigned int v161 = *v22;
  }
  *((_DWORD *)this + 50) = v159;
  unsigned int v162 = *((_DWORD *)this + 55);
  unsigned int v163 = v161;
  if (v161 > v162)
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 208, v161 - v162, 0);
    unsigned int v163 = *v22;
  }
  *((_DWORD *)this + 54) = v161;
  if (v163)
  {
    v164 = (_WORD *)*((void *)this + 20);
    v165 = (_WORD *)*((void *)this + 22);
    v166 = (_WORD *)*((void *)this + 24);
    uint64_t v167 = v163;
    v168 = (_WORD *)*((void *)this + 26);
    do
    {
      *v164++ = 0;
      *v165++ = 0;
      *v166++ = 0;
      *v168++ = 0;
      --v167;
    }
    while (v167);
  }
  unsigned int v169 = *((_DWORD *)this + 135);
  unsigned int v170 = v163;
  if (v163 > v169)
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 528, v163 - v169, 0);
    unsigned int v170 = *v22;
  }
  *((_DWORD *)this + 134) = v163;
  if (v170) {
    memset_pattern16(*((void **)this + 66), &unk_21408D480, 2 * v170);
  }
  if ((v20 & 1) == 0) {
    StateMgr::upgradePrecedingNonAcousticWordsAllowed(this, (unsigned int *)v191, v136, v137, v138, v139, v140, v141);
  }
  DgnDelete<DgnStream>((void (***)(void))v16);
  if ((v172 | v174 ^ 1) == 1) {
    StateMgr::computeStateIdNameChecksum((uLong)this);
  }
  DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)&v183);
  DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)&v185);
  DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)&v187);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v189);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v191);
}

void sub_213E067DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26)
{
  DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)&a20);
  DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)&a22);
  DgnArray<DgnArray<ParseToken>>::releaseAll((uint64_t)&a24);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a26);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v26 - 120);
  _Unwind_Resume(a1);
}

void readObject<DgnCollArray<unsigned int,WordList>>(DgnStream *a1, uint64_t a2, unsigned int *a3)
{
  unsigned int v16 = 0;
  readObject((uint64_t)a1, &v16, a3);
  uint64_t v6 = v16;
  unsigned int v7 = *(_DWORD *)(a2 + 12);
  if (v16 > v7) {
    DgnArray<DSMLocalRecord>::reallocElts(a2, v16 - v7, 0);
  }
  uint64_t v8 = *(unsigned int *)(a2 + 8);
  if (v8 <= v6)
  {
    if (v8 < v6)
    {
      uint64_t v11 = v6 - v8;
      uint64_t v12 = 80 * v8;
      do
      {
        uint64_t v13 = *(void *)a2 + v12;
        *(unsigned char *)uint64_t v13 = 0;
        *(_DWORD *)(v13 + 2) = 0;
        *(_OWORD *)(v13 + 8) = 0uLL;
        *(_OWORD *)(v13 + 24) = 0uLL;
        *(_OWORD *)(v13 + 40) = 0uLL;
        *(void *)(v13 + 64) = 0;
        *(void *)(v13 + 72) = 0;
        v12 += 80;
        --v11;
      }
      while (v11);
    }
  }
  else if ((int)v8 > (int)v6)
  {
    uint64_t v9 = (int)v8;
    uint64_t v10 = 80 * (int)v8 - 80;
    do
    {
      --v9;
      DgnCollArray<unsigned int,ParamSetIdCollCmpWithTemp>::~DgnCollArray(*(void *)a2 + v10);
      v10 -= 80;
    }
    while (v9 > (int)v6);
  }
  *(_DWORD *)(a2 + 8) = v6;
  if (v6)
  {
    uint64_t v14 = 0;
    unint64_t v15 = 0;
    do
    {
      DgnCollArray<unsigned int,WordList>::readObject(*(void *)a2 + v14, a1, a3);
      ++v15;
      v14 += 80;
    }
    while (v15 < *(unsigned int *)(a2 + 8));
  }
}

unint64_t readObject<DgnArray<RuleSpec>>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned int v17 = 0;
  unint64_t result = readObject(a1, &v17, a3);
  uint64_t v7 = v17;
  unsigned int v8 = *(_DWORD *)(a2 + 12);
  if (v17 > v8) {
    unint64_t result = DgnArray<DgnPrimArray<double>>::reallocElts(a2, v17 - v8, 0);
  }
  uint64_t v9 = *(unsigned int *)(a2 + 8);
  if (v9 <= v7)
  {
    if (v9 < v7)
    {
      uint64_t v12 = v7 - v9;
      uint64_t v13 = 16 * v9;
      do
      {
        uint64_t v14 = (void *)(*(void *)a2 + v13);
        *uint64_t v14 = 0;
        v14[1] = 0;
        v13 += 16;
        --v12;
      }
      while (v12);
    }
  }
  else if ((int)v9 > (int)v7)
  {
    uint64_t v10 = (int)v9;
    uint64_t v11 = 16 * (int)v9 - 16;
    do
    {
      --v10;
      unint64_t result = DgnIArray<Utterance *>::~DgnIArray(*(void *)a2 + v11);
      v11 -= 16;
    }
    while (v10 > (int)v7);
  }
  *(_DWORD *)(a2 + 8) = v7;
  if (v7)
  {
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    do
    {
      unint64_t result = readObject<RuleSpec>(a1, *(void *)a2 + v15, a3);
      ++v16;
      v15 += 16;
    }
    while (v16 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

void readObject<DgnPrimArray<unsigned short>>(DgnStream *a1, uint64_t a2, unsigned int *a3)
{
  unsigned int v16 = 0;
  readObject((uint64_t)a1, &v16, a3);
  uint64_t v6 = v16;
  unsigned int v7 = *(_DWORD *)(a2 + 12);
  if (v16 > v7) {
    DgnArray<DgnPrimArray<double>>::reallocElts(a2, v16 - v7, 0);
  }
  uint64_t v8 = *(unsigned int *)(a2 + 8);
  if (v8 <= v6)
  {
    if (v8 < v6)
    {
      uint64_t v11 = v6 - v8;
      uint64_t v12 = 16 * v8;
      do
      {
        uint64_t v13 = (void *)(*(void *)a2 + v12);
        *uint64_t v13 = 0;
        v13[1] = 0;
        v12 += 16;
        --v11;
      }
      while (v11);
    }
  }
  else if ((int)v8 > (int)v6)
  {
    uint64_t v9 = (int)v8;
    uint64_t v10 = 16 * (int)v8 - 16;
    do
    {
      --v9;
      DgnPrimArray<unsigned int>::~DgnPrimArray(*(void *)a2 + v10);
      v10 -= 16;
    }
    while (v9 > (int)v6);
  }
  *(_DWORD *)(a2 + 8) = v6;
  if (v6)
  {
    uint64_t v14 = 0;
    unint64_t v15 = 0;
    do
    {
      readObject<unsigned short>(a1, *(void *)a2 + v14, a3);
      ++v15;
      v14 += 16;
    }
    while (v15 < *(unsigned int *)(a2 + 8));
  }
}

unint64_t readObject<DgnArray<StateSpec>>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned int v17 = 0;
  unint64_t result = readObject(a1, &v17, a3);
  uint64_t v7 = v17;
  unsigned int v8 = *(_DWORD *)(a2 + 12);
  if (v17 > v8) {
    unint64_t result = DgnArray<DgnPrimArray<double>>::reallocElts(a2, v17 - v8, 0);
  }
  uint64_t v9 = *(unsigned int *)(a2 + 8);
  if (v9 <= v7)
  {
    if (v9 < v7)
    {
      uint64_t v12 = v7 - v9;
      uint64_t v13 = 16 * v9;
      do
      {
        uint64_t v14 = (void *)(*(void *)a2 + v13);
        *uint64_t v14 = 0;
        v14[1] = 0;
        v13 += 16;
        --v12;
      }
      while (v12);
    }
  }
  else if ((int)v9 > (int)v7)
  {
    uint64_t v10 = (int)v9;
    uint64_t v11 = 16 * (int)v9 - 16;
    do
    {
      --v10;
      unint64_t result = DgnIArray<Utterance *>::~DgnIArray(*(void *)a2 + v11);
      v11 -= 16;
    }
    while (v10 > (int)v7);
  }
  *(_DWORD *)(a2 + 8) = v7;
  if (v7)
  {
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    do
    {
      unint64_t result = readObject<StateSpec>(a1, *(void *)a2 + v15, a3);
      ++v16;
      v15 += 16;
    }
    while (v16 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

void readObject<int>(DgnStream *a1, uint64_t a2, unsigned int *a3)
{
  unsigned int v8 = 0;
  readObject((uint64_t)a1, &v8, a3);
  unsigned int v6 = v8;
  unsigned int v7 = *(_DWORD *)(a2 + 12);
  if (v8 > v7) {
    DgnPrimArray<unsigned int>::reallocElts(a2, v8 - v7, 0);
  }
  *(_DWORD *)(a2 + 8) = v6;
  readObjectArray(a1, *(int **)a2, v6, a3);
}

uint64_t StateMgr::killStateInternal(EnvMgr **this, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a3)
  {
    unsigned int ItemEnvId = EnvMgr::getItemEnvId(this[94], a2);
    if (ItemEnvId)
    {
      EnvMgr::killEnv(this[94], ItemEnvId, v13, v14, v15, v16, v17, v18);
      EnvMgr::setItemEnvId(this[94], a2, 0, v19, v20, v21, v22, v23);
    }
    uint64_t v24 = a2;
    uint64_t v25 = (uint64_t)*this + 80 * a2;
    int v27 = *(_DWORD *)(v25 + 16);
    uint64_t v26 = (unsigned int *)(v25 + 16);
    if (v27)
    {
      unint64_t v28 = 0;
      uint64_t v29 = v26 - 2;
      do
      {
        unsigned int ItemPairEnvId = EnvMgr::getItemPairEnvId(this[95], a2, *(_DWORD *)(*(void *)v29 + 4 * v28));
        if (ItemPairEnvId)
        {
          EnvMgr::killEnv(this[95], ItemPairEnvId, v31, v32, v33, v34, v35, v36);
          EnvMgr::setItemPairEnvId(this[95], a2, *(unsigned int *)(*(void *)v29 + 4 * v28), 0, v37, v38, v39, v40);
        }
        ++v28;
      }
      while (v28 < *v26);
    }
    *((_DWORD *)this + 183) ^= StateMgr::computeOneStateIdNameChecksum((StateMgr *)this, a2);
  }
  else
  {
    uint64_t v24 = a2;
  }
  int v41 = this[14];
  uint64_t v42 = *((unsigned int *)v41 + v24);
  unint64_t v43 = this[16];
  uint64_t v44 = (char *)v43 + 16 * v42;
  unsigned int v47 = *((_DWORD *)v44 + 2);
  uint64_t v45 = v44 + 8;
  uint64_t v46 = v47;
  if (v47)
  {
    uint64_t v48 = (_DWORD *)*((void *)v43 + 2 * v42);
    uint64_t v49 = v46;
    uint64_t v50 = v48;
    while (*v50 != a2)
    {
      ++v50;
      if (!--v49) {
        goto LABEL_17;
      }
    }
    int v51 = v46 - 1;
    *uint64_t v50 = v48[v51];
    _DWORD *v45 = v51;
  }
LABEL_17:
  *((_DWORD *)v41 + v24) = 0;
  *((_WORD *)this[6] + v24) = 0;
  *((_DWORD *)this[8] + v24) = 0;
  uint64_t v52 = (uint64_t)this[10] + 16 * v24;
  if (*(void *)v52)
  {
    MemChunkFree(*(void **)v52, 0);
    *(void *)uint64_t v52 = 0;
  }
  *(void *)(v52 + 8) = 0;
  uint64_t v53 = (uint64_t)this[12] + 16 * v24;
  if (*(void *)v53)
  {
    MemChunkFree(*(void **)v53, 0);
    *(void *)uint64_t v53 = 0;
  }
  *(void *)(v53 + 8) = 0;
  *((_WORD *)this[20] + v24) = 0;
  *((_WORD *)this[22] + v24) = 0;
  *((_WORD *)this[24] + v24) = 0;
  *((_WORD *)this[26] + v24) = 0;
  uint64_t v54 = (uint64_t)this[72] + 16 * v24;
  if (*(void *)v54)
  {
    MemChunkFree(*(void **)v54, 0);
    *(void *)uint64_t v54 = 0;
  }
  *(void *)(v54 + 8) = 0;
  uint64_t v55 = (uint64_t)this[76] + 16 * v24;
  if (*(void *)v55)
  {
    MemChunkFree(*(void **)v55, 0);
    *(void *)uint64_t v55 = 0;
  }
  *(void *)(v55 + 8) = 0;
  v76[0] = 0;
  v76[1] = 0;
  StateMgr::verifyStateFull((StateMgr *)this, a2, a3, 0, a5, a6, a7, a8);
  DgnCollArray<unsigned int,WordList>::setColls((uint64_t)*this + 80 * v24, (uint64_t)v76);
  while (*((_DWORD *)*this + 20 * v24 + 4))
    StateMgr::deleteWordIdNoPhones((StateMgr *)this, a2, **((unsigned int **)*this + 10 * v24 + 1), 0, v56, v57, v58, v59);
  DgnDelete<BitArray>(*((BitArray **)this[2] + v24));
  *((void *)this[2] + v24) = 0;
  if (a4)
  {
    uint64_t v65 = (uint64_t)this[28] + 16 * v24;
    if (*(void *)v65)
    {
      MemChunkFree(*(void **)v65, 0);
      *(void *)uint64_t v65 = 0;
    }
    *(void *)(v65 + 8) = 0;
    uint64_t v66 = (uint64_t)this[30] + 16 * v24;
    if (*(void *)v66)
    {
      MemChunkFree(*(void **)v66, 0);
      *(void *)uint64_t v66 = 0;
    }
    *(void *)(v66 + 8) = 0;
    uint64_t v67 = (uint64_t)this[32] + 16 * v24;
    if (*(void *)v67)
    {
      MemChunkFree(*(void **)v67, 0);
      *(void *)uint64_t v67 = 0;
    }
    *(void *)(v67 + 8) = 0;
  }
  else
  {
    StateMgr::setEmptyStateTransition((StateMgr *)this, a2, a3, v60, v61, v62, v63, v64);
  }
  *((unsigned char *)this[4] + v24) = 0;
  *((_DWORD *)this[34] + v24) = 0xFFFF;
  *((_DWORD *)this[36] + v24) = 0;
  *((unsigned char *)this[38] + v24) = 1;
  *((unsigned char *)this[40] + v24) = 1;
  *((unsigned char *)this[42] + v24) = 0;
  *((unsigned char *)this[44] + v24) = 1;
  *((unsigned char *)this[46] + v24) = 1;
  *((unsigned char *)this[48] + v24) = 0;
  *((_DWORD *)this[50] + v24) = -1;
  *((_DWORD *)this[52] + v24) = -1;
  *((_DWORD *)this[54] + v24) = -1;
  *((_DWORD *)this[56] + v24) = -1;
  *((unsigned char *)this[60] + v24) = 0;
  StateMgr::setPrecedingNonAcousticWordState((StateMgr *)this, a2, 0, a3, v61, v62, v63, v64);
  uint64_t v72 = (uint64_t)this[74] + 16 * v24;
  if (*(void *)v72)
  {
    MemChunkFree(*(void **)v72, 0);
    *(void *)uint64_t v72 = 0;
  }
  *(void *)(v72 + 8) = 0;
  *((unsigned char *)this[58] + v24) = 1;
  *((unsigned char *)this[85] + v24) = 1;
  StateMgr::setWordAliasState((StateMgr *)this, a2, 0, a3, v68, v69, v70, v71);
  unsigned int v73 = *((_DWORD *)this + 178);
  if (v73 == *((_DWORD *)this + 179))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)(this + 88), 1, 1);
    unsigned int v73 = *((_DWORD *)this + 178);
  }
  *((_DWORD *)this[88] + v73) = a2;
  ++*((_DWORD *)this + 178);
  *((unsigned char *)this[68] + v24) = 0;
  *((unsigned char *)this[70] + v24) = 0;
  PhnIndexSet::PhnIndexSet((PhnIndexSet *)v75, *((_DWORD *)this[92] + 46));
  BitArray::operator=((int **)this[83] + 2 * v24, (uint64_t)v75);
  BitArray::~BitArray((BitArray *)v75);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v76);
}

void sub_213E071C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

BOOL StateMgr::isEmpty(StateMgr *this)
{
  int v1 = *((_DWORD *)this + 178);
  if (*((_DWORD *)this + 181)) {
    ++v1;
  }
  return *((_DWORD *)this + 180) == v1 + 1 && *(_DWORD *)(*((void *)this + 18) + 8) == 0;
}

void StateMgr::makeSpecialEouStateId(StateMgr *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int16 v15 = -1;
  unsigned int v9 = StateMgr::newState(this, 0, &v15, a4, a5, a6, a7, a8);
  *((_DWORD *)this + 181) = v9;
  *(unsigned char *)(*((void *)this + 70) + v9) = 0;
  *(unsigned char *)(*((void *)this + 58) + *((unsigned int *)this + 181)) = 0;
  *(unsigned char *)(*((void *)this + 85) + *((unsigned int *)this + 181)) = 0;
  unsigned int v14 = *((_DWORD *)this + 181);

  StateMgr::setEndOfUtteranceAllowed(this, v14, 1, 0, v10, v11, v12, v13);
}

uint64_t StateMgr::newState(StateMgr *this, unsigned int a2, const unsigned __int16 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StateMgr::verifyStateFull(this, a2, 1, 1, a5, a6, a7, a8);
  PhnIndexSet::PhnIndexSet((PhnIndexSet *)v77, *(_DWORD *)(*((void *)this + 92) + 184));
  *(_DWORD *)v77[0] |= 1u;
  int v13 = *((_DWORD *)this + 178);
  if (v13)
  {
    unsigned int v14 = v13 - 1;
    uint64_t v15 = *(unsigned int *)(*((void *)this + 88) + 4 * v14);
    *((_DWORD *)this + 178) = v14;
    *(unsigned char *)(*((void *)this + 68) + v15) = 1;
    *(unsigned char *)(*((void *)this + 70) + v15) = *a3 == 0;
    BitArray::operator=((int **)(*((void *)this + 83) + 16 * v15), (uint64_t)v77);
    if (!v15) {
      goto LABEL_94;
    }
    goto LABEL_91;
  }
  uint64_t v15 = *((unsigned int *)this + 180);
  if (v15 == -1)
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1391, (uint64_t)"voc/statemgr", 16, (uint64_t)"%s", v11, v12, (char)&errStr_voc_statemgr_E_TOO_MANY_STATES);
    uint64_t v15 = *((unsigned int *)this + 180);
  }
  *((_DWORD *)this + 180) = v15 + 1;
  unsigned int v16 = *((_DWORD *)this + 2);
  if (v16 == *((_DWORD *)this + 3))
  {
    DgnArray<DSMLocalRecord>::reallocElts((uint64_t)this, 1, 1);
    unsigned int v16 = *((_DWORD *)this + 2);
  }
  uint64_t v17 = *(void *)this + 80 * v16;
  *(unsigned char *)uint64_t v17 = 0;
  *(_DWORD *)(v17 + 2) = 0;
  *(_OWORD *)(v17 + 8) = 0u;
  *(_OWORD *)(v17 + 24) = 0u;
  *(_OWORD *)(v17 + 40) = 0u;
  *(void *)(v17 + 64) = 0;
  *(void *)(v17 + 72) = 0;
  ++*((_DWORD *)this + 2);
  uint64_t v18 = *((void *)this + 92);
  uint64_t v19 = *(void *)(v18 + 48);
  uint64_t v20 = *(void *)(v18 + 16);
  uint64_t v21 = (void *)(*(void *)this + 80 * (*((_DWORD *)this + 180) - 1));
  v21[7] = WordIdCollSearchCmpFromWordId;
  v21[8] = v19;
  v21[9] = v20;
  unsigned int v22 = *((_DWORD *)this + 6);
  if (v22 == *((_DWORD *)this + 7))
  {
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 16, 1, 1);
    unsigned int v22 = *((_DWORD *)this + 6);
  }
  *(void *)(*((void *)this + 2) + 8 * v22) = 0;
  *((_DWORD *)this + 6) = v22 + 1;
  unsigned int v23 = *((_DWORD *)this + 10);
  if (v23 == *((_DWORD *)this + 11))
  {
    DgnPrimArray<char>::reallocElts((uint64_t)this + 32, 1, 1);
    unsigned int v23 = *((_DWORD *)this + 10);
  }
  *(unsigned char *)(*((void *)this + 4) + v23) = 0;
  ++*((_DWORD *)this + 10);
  int v24 = *((_DWORD *)this + 14);
  if (v24 == *((_DWORD *)this + 15))
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 48, 1, 1);
    int v24 = *((_DWORD *)this + 14);
  }
  *((_DWORD *)this + 14) = v24 + 1;
  int v25 = *((_DWORD *)this + 18);
  if (v25 == *((_DWORD *)this + 19))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 64, 1, 1);
    int v25 = *((_DWORD *)this + 18);
  }
  *((_DWORD *)this + 18) = v25 + 1;
  unsigned int v26 = *((_DWORD *)this + 22);
  if (v26 == *((_DWORD *)this + 23))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 80, 1, 1);
    unsigned int v26 = *((_DWORD *)this + 22);
  }
  int v27 = (void *)(*((void *)this + 10) + 16 * v26);
  void *v27 = 0;
  v27[1] = 0;
  ++*((_DWORD *)this + 22);
  unsigned int v28 = *((_DWORD *)this + 26);
  if (v28 == *((_DWORD *)this + 27))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 96, 1, 1);
    unsigned int v28 = *((_DWORD *)this + 26);
  }
  DgnString::DgnString((DgnString *)(*((void *)this + 12) + 16 * v28));
  ++*((_DWORD *)this + 26);
  int v29 = *((_DWORD *)this + 30);
  if (v29 == *((_DWORD *)this + 31))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 112, 1, 1);
    int v29 = *((_DWORD *)this + 30);
  }
  *((_DWORD *)this + 30) = v29 + 1;
  unsigned int v30 = *((_DWORD *)this + 34);
  if (v30 == *((_DWORD *)this + 35))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 128, 1, 1);
    unsigned int v30 = *((_DWORD *)this + 34);
  }
  uint64_t v31 = (void *)(*((void *)this + 16) + 16 * v30);
  void *v31 = 0;
  v31[1] = 0;
  ++*((_DWORD *)this + 34);
  unsigned int v32 = *((_DWORD *)this + 42);
  if (v32 == *((_DWORD *)this + 43))
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 160, 1, 1);
    unsigned int v32 = *((_DWORD *)this + 42);
  }
  *(_WORD *)(*((void *)this + 20) + 2 * v32) = 0;
  *((_DWORD *)this + 42) = v32 + 1;
  unsigned int v33 = *((_DWORD *)this + 46);
  if (v33 == *((_DWORD *)this + 47))
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 176, 1, 1);
    unsigned int v33 = *((_DWORD *)this + 46);
  }
  *(_WORD *)(*((void *)this + 22) + 2 * v33) = 0;
  *((_DWORD *)this + 46) = v33 + 1;
  unsigned int v34 = *((_DWORD *)this + 50);
  if (v34 == *((_DWORD *)this + 51))
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 192, 1, 1);
    unsigned int v34 = *((_DWORD *)this + 50);
  }
  *(_WORD *)(*((void *)this + 24) + 2 * v34) = 0;
  *((_DWORD *)this + 50) = v34 + 1;
  unsigned int v35 = *((_DWORD *)this + 54);
  if (v35 == *((_DWORD *)this + 55))
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 208, 1, 1);
    unsigned int v35 = *((_DWORD *)this + 54);
  }
  *(_WORD *)(*((void *)this + 26) + 2 * v35) = 0;
  *((_DWORD *)this + 54) = v35 + 1;
  unsigned int v36 = *((_DWORD *)this + 146);
  if (v36 == *((_DWORD *)this + 147))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 576, 1, 1);
    unsigned int v36 = *((_DWORD *)this + 146);
  }
  uint64_t v37 = (void *)(*((void *)this + 72) + 16 * v36);
  *uint64_t v37 = 0;
  v37[1] = 0;
  ++*((_DWORD *)this + 146);
  unsigned int v38 = *((_DWORD *)this + 154);
  if (v38 == *((_DWORD *)this + 155))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 608, 1, 1);
    unsigned int v38 = *((_DWORD *)this + 154);
  }
  uint64_t v39 = (void *)(*((void *)this + 76) + 16 * v38);
  void *v39 = 0;
  v39[1] = 0;
  ++*((_DWORD *)this + 154);
  unsigned int v40 = *((_DWORD *)this + 38);
  if (v40 == *((_DWORD *)this + 39))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 144, 1, 1);
    unsigned int v40 = *((_DWORD *)this + 38);
  }
  int v41 = (void *)(*((void *)this + 18) + 16 * v40);
  void *v41 = 0;
  v41[1] = 0;
  ++*((_DWORD *)this + 38);
  unsigned int v42 = *((_DWORD *)this + 58);
  if (v42 == *((_DWORD *)this + 59))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 224, 1, 1);
    unsigned int v42 = *((_DWORD *)this + 58);
  }
  unint64_t v43 = (void *)(*((void *)this + 28) + 16 * v42);
  *unint64_t v43 = 0;
  v43[1] = 0;
  ++*((_DWORD *)this + 58);
  unsigned int v44 = *((_DWORD *)this + 62);
  if (v44 == *((_DWORD *)this + 63))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 240, 1, 1);
    unsigned int v44 = *((_DWORD *)this + 62);
  }
  uint64_t v45 = (void *)(*((void *)this + 30) + 16 * v44);
  void *v45 = 0;
  v45[1] = 0;
  ++*((_DWORD *)this + 62);
  unsigned int v46 = *((_DWORD *)this + 66);
  if (v46 == *((_DWORD *)this + 67))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 256, 1, 1);
    unsigned int v46 = *((_DWORD *)this + 66);
  }
  unsigned int v47 = (void *)(*((void *)this + 32) + 16 * v46);
  *unsigned int v47 = 0;
  v47[1] = 0;
  ++*((_DWORD *)this + 66);
  unsigned int v48 = *((_DWORD *)this + 70);
  if (v48 == *((_DWORD *)this + 71))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 272, 1, 1);
    unsigned int v48 = *((_DWORD *)this + 70);
  }
  *(_DWORD *)(*((void *)this + 34) + 4 * v48) = 0xFFFF;
  ++*((_DWORD *)this + 70);
  unsigned int v49 = *((_DWORD *)this + 74);
  if (v49 == *((_DWORD *)this + 75))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 288, 1, 1);
    unsigned int v49 = *((_DWORD *)this + 74);
  }
  *(_DWORD *)(*((void *)this + 36) + 4 * v49) = 0;
  ++*((_DWORD *)this + 74);
  unsigned int v50 = *((_DWORD *)this + 78);
  if (v50 == *((_DWORD *)this + 79))
  {
    DgnPrimArray<char>::reallocElts((uint64_t)this + 304, 1, 1);
    unsigned int v50 = *((_DWORD *)this + 78);
  }
  *(unsigned char *)(*((void *)this + 38) + v50) = 1;
  ++*((_DWORD *)this + 78);
  unsigned int v51 = *((_DWORD *)this + 82);
  if (v51 == *((_DWORD *)this + 83))
  {
    DgnPrimArray<char>::reallocElts((uint64_t)this + 320, 1, 1);
    unsigned int v51 = *((_DWORD *)this + 82);
  }
  *(unsigned char *)(*((void *)this + 40) + v51) = 1;
  ++*((_DWORD *)this + 82);
  unsigned int v52 = *((_DWORD *)this + 86);
  if (v52 == *((_DWORD *)this + 87))
  {
    DgnPrimArray<char>::reallocElts((uint64_t)this + 336, 1, 1);
    unsigned int v52 = *((_DWORD *)this + 86);
  }
  *(unsigned char *)(*((void *)this + 42) + v52) = 0;
  ++*((_DWORD *)this + 86);
  unsigned int v53 = *((_DWORD *)this + 90);
  if (v53 == *((_DWORD *)this + 91))
  {
    DgnPrimArray<char>::reallocElts((uint64_t)this + 352, 1, 1);
    unsigned int v53 = *((_DWORD *)this + 90);
  }
  *(unsigned char *)(*((void *)this + 44) + v53) = 1;
  ++*((_DWORD *)this + 90);
  unsigned int v54 = *((_DWORD *)this + 94);
  if (v54 == *((_DWORD *)this + 95))
  {
    DgnPrimArray<char>::reallocElts((uint64_t)this + 368, 1, 1);
    unsigned int v54 = *((_DWORD *)this + 94);
  }
  *(unsigned char *)(*((void *)this + 46) + v54) = 1;
  ++*((_DWORD *)this + 94);
  unsigned int v55 = *((_DWORD *)this + 98);
  if (v55 == *((_DWORD *)this + 99))
  {
    DgnPrimArray<char>::reallocElts((uint64_t)this + 384, 1, 1);
    unsigned int v55 = *((_DWORD *)this + 98);
  }
  *(unsigned char *)(*((void *)this + 48) + v55) = 0;
  ++*((_DWORD *)this + 98);
  unsigned int v56 = *((_DWORD *)this + 102);
  if (v56 == *((_DWORD *)this + 103))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 400, 1, 1);
    unsigned int v56 = *((_DWORD *)this + 102);
  }
  *(_DWORD *)(*((void *)this + 50) + 4 * v56) = -1;
  ++*((_DWORD *)this + 102);
  unsigned int v57 = *((_DWORD *)this + 106);
  if (v57 == *((_DWORD *)this + 107))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 416, 1, 1);
    unsigned int v57 = *((_DWORD *)this + 106);
  }
  *(_DWORD *)(*((void *)this + 52) + 4 * v57) = -1;
  ++*((_DWORD *)this + 106);
  unsigned int v58 = *((_DWORD *)this + 110);
  if (v58 == *((_DWORD *)this + 111))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 432, 1, 1);
    unsigned int v58 = *((_DWORD *)this + 110);
  }
  *(_DWORD *)(*((void *)this + 54) + 4 * v58) = -1;
  ++*((_DWORD *)this + 110);
  unsigned int v59 = *((_DWORD *)this + 114);
  if (v59 == *((_DWORD *)this + 115))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 448, 1, 1);
    unsigned int v59 = *((_DWORD *)this + 114);
  }
  *(_DWORD *)(*((void *)this + 56) + 4 * v59) = -1;
  ++*((_DWORD *)this + 114);
  unsigned int v60 = *((_DWORD *)this + 130);
  if (v60 == *((_DWORD *)this + 131))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 512, 1, 1);
    unsigned int v60 = *((_DWORD *)this + 130);
  }
  *(_DWORD *)(*((void *)this + 64) + 4 * v60) = 0;
  ++*((_DWORD *)this + 130);
  unsigned int v61 = *((_DWORD *)this + 122);
  if (v61 == *((_DWORD *)this + 123))
  {
    DgnPrimArray<char>::reallocElts((uint64_t)this + 480, 1, 1);
    unsigned int v61 = *((_DWORD *)this + 122);
  }
  *(unsigned char *)(*((void *)this + 60) + v61) = 0;
  ++*((_DWORD *)this + 122);
  unsigned int v62 = *((_DWORD *)this + 150);
  if (v62 == *((_DWORD *)this + 151))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 592, 1, 1);
    unsigned int v62 = *((_DWORD *)this + 150);
  }
  uint64_t v63 = (void *)(*((void *)this + 74) + 16 * v62);
  *uint64_t v63 = 0;
  v63[1] = 0;
  ++*((_DWORD *)this + 150);
  unsigned int v64 = *((_DWORD *)this + 118);
  if (v64 == *((_DWORD *)this + 119))
  {
    DgnPrimArray<char>::reallocElts((uint64_t)this + 464, 1, 1);
    unsigned int v64 = *((_DWORD *)this + 118);
  }
  *(unsigned char *)(*((void *)this + 58) + v64) = 1;
  ++*((_DWORD *)this + 118);
  unsigned int v65 = *((_DWORD *)this + 172);
  if (v65 == *((_DWORD *)this + 173))
  {
    DgnPrimArray<char>::reallocElts((uint64_t)this + 680, 1, 1);
    unsigned int v65 = *((_DWORD *)this + 172);
  }
  *(unsigned char *)(*((void *)this + 85) + v65) = 1;
  ++*((_DWORD *)this + 172);
  unsigned int v66 = *((_DWORD *)this + 126);
  if (v66 == *((_DWORD *)this + 127))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 496, 1, 1);
    unsigned int v66 = *((_DWORD *)this + 126);
  }
  *(_DWORD *)(*((void *)this + 62) + 4 * v66) = 0;
  ++*((_DWORD *)this + 126);
  unsigned int v67 = *((_DWORD *)this + 134);
  if (v67 == *((_DWORD *)this + 135))
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 528, 1, 1);
    unsigned int v67 = *((_DWORD *)this + 134);
  }
  *(_WORD *)(*((void *)this + 66) + 2 * v67) = 127;
  *((_DWORD *)this + 134) = v67 + 1;
  unsigned int v68 = *((_DWORD *)this + 138);
  if (v68 == *((_DWORD *)this + 139))
  {
    DgnPrimArray<char>::reallocElts((uint64_t)this + 544, 1, 1);
    unsigned int v68 = *((_DWORD *)this + 138);
  }
  *(unsigned char *)(*((void *)this + 68) + v68) = 1;
  ++*((_DWORD *)this + 138);
  BOOL v69 = *a3 == 0;
  unsigned int v70 = *((_DWORD *)this + 142);
  if (v70 == *((_DWORD *)this + 143))
  {
    DgnPrimArray<char>::reallocElts((uint64_t)this + 560, 1, 1);
    unsigned int v70 = *((_DWORD *)this + 142);
  }
  *(unsigned char *)(*((void *)this + 70) + v70) = v69;
  ++*((_DWORD *)this + 142);
  unsigned int v71 = *((_DWORD *)this + 158);
  if (v71 == *((_DWORD *)this + 159))
  {
    DgnPrimArray<char>::reallocElts((uint64_t)this + 624, 1, 1);
    unsigned int v71 = *((_DWORD *)this + 158);
  }
  *(unsigned char *)(*((void *)this + 78) + v71) = 0;
  ++*((_DWORD *)this + 158);
  unsigned int v72 = *((_DWORD *)this + 168);
  if (v72 == *((_DWORD *)this + 169))
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 664, 1, 1);
    unsigned int v72 = *((_DWORD *)this + 168);
  }
  PhnIndexSet::PhnIndexSet((PhnIndexSet *)(*((void *)this + 83) + 16 * v72), (const PhnIndexSet *)v77);
  ++*((_DWORD *)this + 168);
  if (v15)
  {
LABEL_91:
    uint64_t v73 = *((void *)this + 16) + 16 * a2;
    uint64_t v75 = (unsigned int *)(v73 + 8);
    unsigned int v74 = *(_DWORD *)(v73 + 8);
    if (v74 == *(_DWORD *)(v73 + 12))
    {
      DgnPrimArray<unsigned int>::reallocElts(*((void *)this + 16) + 16 * a2, 1, 1);
      unsigned int v74 = *v75;
    }
    *(_DWORD *)(*(void *)v73 + 4 * v74) = v15;
    ++*v75;
  }
LABEL_94:
  *(_DWORD *)(*((void *)this + 14) + 4 * v15) = a2;
  *(_WORD *)(*((void *)this + 6) + 2 * v15) = *a3;
  *(_DWORD *)(*((void *)this + 8) + 4 * v15) = 0;
  if (*(unsigned char *)(*((void *)this + 70) + v15)) {
    *((_DWORD *)this + 183) ^= StateMgr::computeOneStateIdNameChecksum(this, v15);
  }
  BitArray::~BitArray((BitArray *)v77);
  return v15;
}

void sub_213E07DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  BitArray::~BitArray((BitArray *)va);
  _Unwind_Resume(a1);
}

void StateMgr::setEndOfUtteranceAllowed(StateMgr *this, unsigned int a2, char a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StateMgr::verifyStateFull(this, a2, a4, 0, a5, a6, a7, a8);
  if (*(_WORD *)(*((void *)this + 20) + 2 * a2)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 2230, (uint64_t)"voc/statemgr", 13, (uint64_t)"%.500s %d %.500s %d", v11, v12, (char)"setEndOfUtteranceAllowed");
  }
  if (*(_WORD *)(*((void *)this + 24) + 2 * a2)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 2233, (uint64_t)"voc/statemgr", 13, (uint64_t)"%.500s %d %.500s %d", v11, v12, (char)"setEndOfUtteranceAllowed");
  }
  if (*(_WORD *)(*((void *)this + 26) + 2 * a2)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 2236, (uint64_t)"voc/statemgr", 13, (uint64_t)"%.500s %d %.500s %d", v11, v12, (char)"setEndOfUtteranceAllowed");
  }
  *(unsigned char *)(*((void *)this + 4) + a2) = a3;
}

void (***StateMgr::saveStateMgr(void (***this)(void), DFile *a2, DFileChecksums *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8))(void)
{
  uint64_t v11 = (uint64_t)this;
  int v12 = *((_DWORD *)this + 178);
  if (*((_DWORD *)this + 181)) {
    ++v12;
  }
  if (*((_DWORD *)this + 180) != v12 + 1 || *((_DWORD *)this[18] + 2))
  {
    if (a4) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1115, (uint64_t)"voc/statemgr", 18, (uint64_t)"%s", a7, a8, (char)&errStr_voc_statemgr_E_MIXED_TEXT_AND_BINARY_SUBFILES);
    }
    int v13 = OpenAndWriteMrecHeader((uint64_t)a2, 0x59u, a5, "MRSTA!? ", 24, 44);
    unsigned int v15 = 0;
    writeObject<DgnCollArray<unsigned int,WordList>>((uint64_t)v13, v11, &v15);
    writeObject<unsigned char>((uint64_t)v13, v11 + 32, &v15);
    writeObject<unsigned short>((uint64_t)v13, v11 + 48, &v15);
    writeObject<unsigned int>((uint64_t)v13, v11 + 64, &v15);
    writeObject<DgnPrimArray<unsigned short>>((uint64_t)v13, v11 + 80, &v15);
    writeObject<DgnString>((uint64_t)v13, v11 + 96, &v15);
    writeObject<unsigned int>((uint64_t)v13, v11 + 112, &v15);
    writeObject<DgnPrimArray<unsigned int>>((uint64_t)v13, v11 + 128, &v15);
    writeObject<DgnPrimArray<unsigned short>>((uint64_t)v13, v11 + 144, &v15);
    writeObject<DgnPrimArray<unsigned int>>((uint64_t)v13, v11 + 224, &v15);
    writeObject<DgnPrimArray<unsigned short>>((uint64_t)v13, v11 + 240, &v15);
    writeObject<DgnArray<ParseToken>>((uint64_t)v13, v11 + 256, &v15);
    writeObject<unsigned int>((uint64_t)v13, v11 + 272, &v15);
    writeObject<unsigned int>((uint64_t)v13, v11 + 288, &v15);
    writeObject<unsigned char>((uint64_t)v13, v11 + 304, &v15);
    writeObject<unsigned char>((uint64_t)v13, v11 + 320, &v15);
    writeObject<unsigned char>((uint64_t)v13, v11 + 336, &v15);
    writeObject<unsigned char>((uint64_t)v13, v11 + 352, &v15);
    writeObject<unsigned char>((uint64_t)v13, v11 + 368, &v15);
    writeObject<unsigned char>((uint64_t)v13, v11 + 384, &v15);
    writeObject<unsigned int>((uint64_t)v13, v11 + 400, &v15);
    writeObject<unsigned int>((uint64_t)v13, v11 + 416, &v15);
    writeObject<unsigned int>((uint64_t)v13, v11 + 432, &v15);
    writeObject<unsigned int>((uint64_t)v13, v11 + 448, &v15);
    writeObject<unsigned int>((uint64_t)v13, v11 + 512, &v15);
    writeObject<unsigned char>((uint64_t)v13, v11 + 480, &v15);
    writeObject<DgnPrimArray<unsigned int>>((uint64_t)v13, v11 + 592, &v15);
    writeObject<unsigned char>((uint64_t)v13, v11 + 464, &v15);
    writeObject<unsigned int>((uint64_t)v13, v11 + 496, &v15);
    writeObject<unsigned char>((uint64_t)v13, v11 + 544, &v15);
    writeObject<unsigned char>((uint64_t)v13, v11 + 560, &v15);
    writeObject<DgnPrimArray<unsigned int>>((uint64_t)v13, v11 + 576, &v15);
    writeObject<DgnPrimArray<unsigned int>>((uint64_t)v13, v11 + 608, &v15);
    writeObject<unsigned int>((uint64_t)v13, v11 + 704, &v15);
    writeObject((uint64_t)v13, (int *)(v11 + 720), &v15);
    writeObject((uint64_t)v13, (int *)(v11 + 724), &v15);
    writeObject((uint64_t)v13, (int *)(v11 + 732), &v15);
    EnvMgr::saveEnvMgrToStream(*(EnvMgr **)(v11 + 752), v13, &v15, 1, 0);
    EnvMgr::saveEnvMgrToStream(*(EnvMgr **)(v11 + 760), v13, &v15, 1, 0);
    writeObjectChecksum((uint64_t)v13, (int *)&v15);
    uint64_t CurrentSubDirComponents = DFile::getCurrentSubDirComponents(a2);
    DFileChecksums::addChecksum((uint64_t)a3, CurrentSubDirComponents, 0x59u, v15);
    return DgnDelete<DgnStream>((void (***)(void))v13);
  }
  return this;
}

uint64_t writeObject<DgnCollArray<unsigned int,WordList>>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v9 = *(_DWORD *)(a2 + 8);
  uint64_t result = writeObject(a1, &v9, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      uint64_t result = DgnCollArray<unsigned int,WordList>::writeObject((unsigned __int8 *)(*(void *)a2 + v7), a1, a3);
      ++v8;
      v7 += 80;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

uint64_t writeObject<DgnPrimArray<unsigned short>>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v9 = *(_DWORD *)(a2 + 8);
  uint64_t result = writeObject(a1, &v9, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      uint64_t result = writeObject<unsigned short>(a1, *(void *)a2 + v7, a3);
      ++v8;
      v7 += 16;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

uint64_t writeObject<DgnPrimArray<unsigned int>>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v9 = *(_DWORD *)(a2 + 8);
  uint64_t result = writeObject(a1, &v9, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      uint64_t result = writeObject<unsigned int>(a1, *(void *)a2 + v7, a3);
      ++v8;
      v7 += 16;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

void StateMgr::printSize(StateMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1143, (DgnString *)&v500);
  if (v501) {
    unsigned int v16 = (void *)v500;
  }
  else {
    unsigned int v16 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_21408D3EE, a3, &unk_21408D3EE, v16);
  DgnString::~DgnString((DgnString *)&v500);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_21408D3EE);
  uint64_t v21 = sizeObject<DgnCollArray<unsigned int,WordList>>((uint64_t)this, 0);
  uint64_t v22 = sizeObject<DgnCollArray<unsigned int,WordList>>((uint64_t)this, 1);
  LOBYTE(v500) = 0;
  *(_DWORD *)((char *)&v500 + 2) = 0;
  long long v501 = 0u;
  long long v502 = 0u;
  long long v503 = 0u;
  uint64_t v504 = 0;
  uint64_t v505 = 0;
  DgnCollArray<unsigned int,ParamSetIdCollCmpWithTemp>::~DgnCollArray((uint64_t)&v500);
  uint64_t v23 = (a3 + 1);
  uint64_t v497 = a3;
  uint64_t v24 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if (v501) {
    int v29 = (void *)v500;
  }
  else {
    int v29 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v25, v26, v27, v28, v23, &unk_21408D3EE, v24, v24, v29, v21, v22, 0);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v21;
  *a5 += v22;
  uint64_t v30 = sizeObject<BitArray *>((uint64_t)this + 16, 0);
  uint64_t v31 = sizeObject<BitArray *>((uint64_t)this + 16, 1);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if (v501) {
    unsigned int v36 = (void *)v500;
  }
  else {
    unsigned int v36 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v32, v33, v34, v35, v23, &unk_21408D3EE, v24, v24, v36, v30, v31, 0);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v30;
  *a5 += v31;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v37 = 12;
  }
  else {
    uint64_t v37 = 16;
  }
  int v38 = *((_DWORD *)this + 10);
  unsigned int v39 = *((_DWORD *)this + 11);
  BOOL v40 = v39 >= v38;
  uint64_t v41 = v39 - v38;
  if (v40)
  {
    uint64_t v43 = v38 & ~(v38 >> 31);
    int v38 = 0;
    uint64_t v42 = v37 + v43;
    v37 += v43 + v41;
  }
  else
  {
    uint64_t v42 = v37;
  }
  uint64_t v44 = v38;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if (v501) {
    unsigned int v49 = (void *)v500;
  }
  else {
    unsigned int v49 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v45, v46, v47, v48, v23, &unk_21408D3EE, v24, v24, v49, v37, v42, v44);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v37;
  *a5 += v42;
  *a6 += v44;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v50 = 12;
  }
  else {
    uint64_t v50 = 16;
  }
  uint64_t v51 = *((unsigned int *)this + 14);
  unsigned int v52 = *((_DWORD *)this + 15);
  if (v52 >= v51)
  {
    uint64_t v53 = 0;
    if ((int)v51 > 0) {
      uint64_t v50 = (v50 | 2) + 2 * (v51 - 1);
    }
    uint64_t v54 = v50 + 2 * (v52 - v51);
  }
  else
  {
    uint64_t v53 = 2 * v51;
    uint64_t v54 = v50;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if (v501) {
    unsigned int v59 = (void *)v500;
  }
  else {
    unsigned int v59 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v55, v56, v57, v58, v23, &unk_21408D3EE, v24, v24, v59, v54, v50, v53);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v54;
  *a5 += v50;
  *a6 += v53;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v60 = 12;
  }
  else {
    uint64_t v60 = 16;
  }
  uint64_t v61 = *((unsigned int *)this + 18);
  unsigned int v62 = *((_DWORD *)this + 19);
  if (v62 >= v61)
  {
    uint64_t v63 = 0;
    if ((int)v61 > 0) {
      v60 += 4 * (v61 - 1) + 4;
    }
    uint64_t v64 = v60 + 4 * (v62 - v61);
  }
  else
  {
    uint64_t v63 = 4 * v61;
    uint64_t v64 = v60;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if (v501) {
    BOOL v69 = (void *)v500;
  }
  else {
    BOOL v69 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v65, v66, v67, v68, v23, &unk_21408D3EE, v24, v24, v69, v64, v60, v63);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v64;
  *a5 += v60;
  *a6 += v63;
  uint64_t v70 = sizeObject<DgnPrimArray<unsigned short>>((uint64_t)this + 80, 0);
  uint64_t v71 = sizeObject<DgnPrimArray<unsigned short>>((uint64_t)this + 80, 1);
  unint64_t v500 = 0;
  *(void *)&long long v501 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v500);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if (v501) {
    uint64_t v76 = (void *)v500;
  }
  else {
    uint64_t v76 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v72, v73, v74, v75, v23, &unk_21408D3EE, v24, v24, v76, v70, v71, 0);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v70;
  *a5 += v71;
  uint64_t v77 = sizeObject<DgnString>((uint64_t)this + 96, 0);
  uint64_t v78 = sizeObject<DgnString>((uint64_t)this + 96, 1);
  uint64_t v79 = sizeObject<DgnString>((uint64_t)this + 96, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if (v501) {
    unint64_t v84 = (void *)v500;
  }
  else {
    unint64_t v84 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v80, v81, v82, v83, v23, &unk_21408D3EE, v24, v24, v84, v77, v78, v79);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v77;
  *a5 += v78;
  *a6 += v79;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v85 = 12;
  }
  else {
    uint64_t v85 = 16;
  }
  uint64_t v86 = *((unsigned int *)this + 30);
  unsigned int v87 = *((_DWORD *)this + 31);
  if (v87 >= v86)
  {
    uint64_t v88 = 0;
    if ((int)v86 > 0) {
      v85 += 4 * (v86 - 1) + 4;
    }
    uint64_t v89 = v85 + 4 * (v87 - v86);
  }
  else
  {
    uint64_t v88 = 4 * v86;
    uint64_t v89 = v85;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if (v501) {
    v94 = (void *)v500;
  }
  else {
    v94 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v90, v91, v92, v93, v23, &unk_21408D3EE, v24, v24, v94, v89, v85, v88);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v89;
  *a5 += v85;
  *a6 += v88;
  uint64_t v95 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)this + 128, 0);
  uint64_t v96 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)this + 128, 1);
  unint64_t v500 = 0;
  *(void *)&long long v501 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v500);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if (v501) {
    uint64_t v101 = (void *)v500;
  }
  else {
    uint64_t v101 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v97, v98, v99, v100, v23, &unk_21408D3EE, v24, v24, v101, v95, v96, 0);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v95;
  *a5 += v96;
  uint64_t v102 = sizeObject<DgnPrimArray<unsigned short>>((uint64_t)this + 144, 0);
  uint64_t v103 = sizeObject<DgnPrimArray<unsigned short>>((uint64_t)this + 144, 1);
  unint64_t v500 = 0;
  *(void *)&long long v501 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v500);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if (v501) {
    unsigned int v108 = (void *)v500;
  }
  else {
    unsigned int v108 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v104, v105, v106, v107, v23, &unk_21408D3EE, v24, v24, v108, v102, v103, 0);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v102;
  *a5 += v103;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v109 = 12;
  }
  else {
    uint64_t v109 = 16;
  }
  uint64_t v110 = *((unsigned int *)this + 42);
  unsigned int v111 = *((_DWORD *)this + 43);
  if (v111 >= v110)
  {
    uint64_t v112 = 0;
    if ((int)v110 > 0) {
      uint64_t v109 = (v109 | 2) + 2 * (v110 - 1);
    }
    uint64_t v113 = v109 + 2 * (v111 - v110);
  }
  else
  {
    uint64_t v112 = 2 * v110;
    uint64_t v113 = v109;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if (v501) {
    unsigned int v118 = (void *)v500;
  }
  else {
    unsigned int v118 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v114, v115, v116, v117, v23, &unk_21408D3EE, v24, v24, v118, v113, v109, v112);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v113;
  *a5 += v109;
  *a6 += v112;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v119 = 12;
  }
  else {
    uint64_t v119 = 16;
  }
  uint64_t v120 = *((unsigned int *)this + 46);
  unsigned int v121 = *((_DWORD *)this + 47);
  if (v121 >= v120)
  {
    uint64_t v122 = 0;
    if ((int)v120 > 0) {
      uint64_t v119 = (v119 | 2) + 2 * (v120 - 1);
    }
    uint64_t v123 = v119 + 2 * (v121 - v120);
  }
  else
  {
    uint64_t v122 = 2 * v120;
    uint64_t v123 = v119;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if (v501) {
    unint64_t v128 = (void *)v500;
  }
  else {
    unint64_t v128 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v124, v125, v126, v127, v23, &unk_21408D3EE, v24, v24, v128, v123, v119, v122);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v123;
  *a5 += v119;
  *a6 += v122;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v129 = 12;
  }
  else {
    uint64_t v129 = 16;
  }
  uint64_t v130 = *((unsigned int *)this + 50);
  unsigned int v131 = *((_DWORD *)this + 51);
  if (v131 >= v130)
  {
    uint64_t v132 = 0;
    if ((int)v130 > 0) {
      uint64_t v129 = (v129 | 2) + 2 * (v130 - 1);
    }
    uint64_t v133 = v129 + 2 * (v131 - v130);
  }
  else
  {
    uint64_t v132 = 2 * v130;
    uint64_t v133 = v129;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if (v501) {
    uint64_t v138 = (void *)v500;
  }
  else {
    uint64_t v138 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v134, v135, v136, v137, v23, &unk_21408D3EE, v24, v24, v138, v133, v129, v132);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v133;
  *a5 += v129;
  *a6 += v132;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v139 = 12;
  }
  else {
    uint64_t v139 = 16;
  }
  uint64_t v140 = *((unsigned int *)this + 54);
  unsigned int v141 = *((_DWORD *)this + 55);
  if (v141 >= v140)
  {
    uint64_t v142 = 0;
    if ((int)v140 > 0) {
      uint64_t v139 = (v139 | 2) + 2 * (v140 - 1);
    }
    uint64_t v143 = v139 + 2 * (v141 - v140);
  }
  else
  {
    uint64_t v142 = 2 * v140;
    uint64_t v143 = v139;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if (v501) {
    uint64_t v148 = (void *)v500;
  }
  else {
    uint64_t v148 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v144, v145, v146, v147, v23, &unk_21408D3EE, v24, v24, v148, v143, v139, v142);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v143;
  *a5 += v139;
  *a6 += v142;
  uint64_t v149 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)this + 224, 0);
  uint64_t v150 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)this + 224, 1);
  unint64_t v500 = 0;
  *(void *)&long long v501 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v500);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if (v501) {
    uint64_t v155 = (void *)v500;
  }
  else {
    uint64_t v155 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v151, v152, v153, v154, v23, &unk_21408D3EE, v24, v24, v155, v149, v150, 0);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v149;
  *a5 += v150;
  uint64_t v156 = sizeObject<DgnPrimArray<unsigned short>>((uint64_t)this + 240, 0);
  uint64_t v157 = sizeObject<DgnPrimArray<unsigned short>>((uint64_t)this + 240, 1);
  unint64_t v500 = 0;
  *(void *)&long long v501 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v500);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if (v501) {
    unsigned int v162 = (void *)v500;
  }
  else {
    unsigned int v162 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v158, v159, v160, v161, v23, &unk_21408D3EE, v24, v24, v162, v156, v157, 0);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v156;
  *a5 += v157;
  uint64_t v163 = sizeObject<DgnArray<ParseToken>>((uint64_t)this + 256, 0);
  uint64_t v164 = sizeObject<DgnArray<ParseToken>>((uint64_t)this + 256, 1);
  unint64_t v500 = 0;
  *(void *)&long long v501 = 0;
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v500);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if (v501) {
    unsigned int v169 = (void *)v500;
  }
  else {
    unsigned int v169 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v165, v166, v167, v168, v23, &unk_21408D3EE, v24, v24, v169, v163, v164, 0);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v163;
  *a5 += v164;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v170 = 12;
  }
  else {
    uint64_t v170 = 16;
  }
  uint64_t v171 = *((unsigned int *)this + 70);
  unsigned int v172 = *((_DWORD *)this + 71);
  if (v172 >= v171)
  {
    uint64_t v173 = 0;
    if ((int)v171 > 0) {
      v170 += 4 * (v171 - 1) + 4;
    }
    uint64_t v174 = v170 + 4 * (v172 - v171);
  }
  else
  {
    uint64_t v173 = 4 * v171;
    uint64_t v174 = v170;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if (v501) {
    uint64_t v179 = (void *)v500;
  }
  else {
    uint64_t v179 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v175, v176, v177, v178, v23, &unk_21408D3EE, v24, v24, v179, v174, v170, v173);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v174;
  *a5 += v170;
  *a6 += v173;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v180 = 12;
  }
  else {
    uint64_t v180 = 16;
  }
  uint64_t v181 = *((unsigned int *)this + 74);
  unsigned int v182 = *((_DWORD *)this + 75);
  if (v182 >= v181)
  {
    uint64_t v183 = 0;
    if ((int)v181 > 0) {
      v180 += 4 * (v181 - 1) + 4;
    }
    uint64_t v184 = v180 + 4 * (v182 - v181);
  }
  else
  {
    uint64_t v183 = 4 * v181;
    uint64_t v184 = v180;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if (v501) {
    uint64_t v189 = (void *)v500;
  }
  else {
    uint64_t v189 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v185, v186, v187, v188, v23, &unk_21408D3EE, v24, v24, v189, v184, v180, v183);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v184;
  *a5 += v180;
  *a6 += v183;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v190 = 12;
  }
  else {
    uint64_t v190 = 16;
  }
  int v191 = *((_DWORD *)this + 78);
  unsigned int v192 = *((_DWORD *)this + 79);
  BOOL v40 = v192 >= v191;
  uint64_t v193 = v192 - v191;
  if (v40)
  {
    uint64_t v195 = v191 & ~(v191 >> 31);
    int v191 = 0;
    uint64_t v194 = v190 + v195;
    v190 += v195 + v193;
  }
  else
  {
    uint64_t v194 = v190;
  }
  uint64_t v196 = v191;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if (v501) {
    v201 = (void *)v500;
  }
  else {
    v201 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v197, v198, v199, v200, v23, &unk_21408D3EE, v24, v24, v201, v190, v194, v196);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v190;
  *a5 += v194;
  *a6 += v196;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v202 = 12;
  }
  else {
    uint64_t v202 = 16;
  }
  int v203 = *((_DWORD *)this + 82);
  unsigned int v204 = *((_DWORD *)this + 83);
  BOOL v40 = v204 >= v203;
  uint64_t v205 = v204 - v203;
  if (v40)
  {
    uint64_t v207 = v203 & ~(v203 >> 31);
    int v203 = 0;
    uint64_t v206 = v202 + v207;
    v202 += v207 + v205;
  }
  else
  {
    uint64_t v206 = v202;
  }
  uint64_t v208 = v203;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if (v501) {
    v213 = (void *)v500;
  }
  else {
    v213 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v209, v210, v211, v212, v23, &unk_21408D3EE, v24, v24, v213, v202, v206, v208);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v202;
  *a5 += v206;
  *a6 += v208;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v214 = 12;
  }
  else {
    uint64_t v214 = 16;
  }
  int v215 = *((_DWORD *)this + 86);
  unsigned int v216 = *((_DWORD *)this + 87);
  BOOL v40 = v216 >= v215;
  uint64_t v217 = v216 - v215;
  if (v40)
  {
    uint64_t v219 = v215 & ~(v215 >> 31);
    int v215 = 0;
    uint64_t v218 = v214 + v219;
    v214 += v219 + v217;
  }
  else
  {
    uint64_t v218 = v214;
  }
  uint64_t v220 = v215;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if (v501) {
    v225 = (void *)v500;
  }
  else {
    v225 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v221, v222, v223, v224, v23, &unk_21408D3EE, v24, v24, v225, v214, v218, v220);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v214;
  *a5 += v218;
  *a6 += v220;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v226 = 12;
  }
  else {
    uint64_t v226 = 16;
  }
  int v227 = *((_DWORD *)this + 90);
  unsigned int v228 = *((_DWORD *)this + 91);
  BOOL v40 = v228 >= v227;
  uint64_t v229 = v228 - v227;
  if (v40)
  {
    uint64_t v231 = v227 & ~(v227 >> 31);
    int v227 = 0;
    uint64_t v230 = v226 + v231;
    v226 += v231 + v229;
  }
  else
  {
    uint64_t v230 = v226;
  }
  uint64_t v232 = v227;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if (v501) {
    v237 = (void *)v500;
  }
  else {
    v237 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v233, v234, v235, v236, v23, &unk_21408D3EE, v24, v24, v237, v226, v230, v232);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v226;
  *a5 += v230;
  *a6 += v232;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v238 = 12;
  }
  else {
    uint64_t v238 = 16;
  }
  int v239 = *((_DWORD *)this + 94);
  unsigned int v240 = *((_DWORD *)this + 95);
  BOOL v40 = v240 >= v239;
  uint64_t v241 = v240 - v239;
  if (v40)
  {
    uint64_t v243 = v239 & ~(v239 >> 31);
    int v239 = 0;
    uint64_t v242 = v238 + v243;
    v238 += v243 + v241;
  }
  else
  {
    uint64_t v242 = v238;
  }
  uint64_t v244 = v239;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if (v501) {
    v249 = (void *)v500;
  }
  else {
    v249 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v245, v246, v247, v248, v23, &unk_21408D3EE, v24, v24, v249, v238, v242, v244);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v238;
  *a5 += v242;
  *a6 += v244;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v250 = 12;
  }
  else {
    uint64_t v250 = 16;
  }
  int v251 = *((_DWORD *)this + 98);
  unsigned int v252 = *((_DWORD *)this + 99);
  BOOL v40 = v252 >= v251;
  uint64_t v253 = v252 - v251;
  if (v40)
  {
    uint64_t v255 = v251 & ~(v251 >> 31);
    int v251 = 0;
    uint64_t v254 = v250 + v255;
    v250 += v255 + v253;
  }
  else
  {
    uint64_t v254 = v250;
  }
  uint64_t v256 = v251;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if (v501) {
    v261 = (void *)v500;
  }
  else {
    v261 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v257, v258, v259, v260, v23, &unk_21408D3EE, v24, v24, v261, v250, v254, v256);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v250;
  *a5 += v254;
  *a6 += v256;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v262 = 12;
  }
  else {
    uint64_t v262 = 16;
  }
  uint64_t v263 = *((unsigned int *)this + 102);
  unsigned int v264 = *((_DWORD *)this + 103);
  if (v264 >= v263)
  {
    uint64_t v265 = 0;
    if ((int)v263 > 0) {
      v262 += 4 * (v263 - 1) + 4;
    }
    uint64_t v266 = v262 + 4 * (v264 - v263);
  }
  else
  {
    uint64_t v265 = 4 * v263;
    uint64_t v266 = v262;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if (v501) {
    v271 = (void *)v500;
  }
  else {
    v271 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v267, v268, v269, v270, v23, &unk_21408D3EE, v24, v24, v271, v266, v262, v265);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v266;
  *a5 += v262;
  *a6 += v265;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v272 = 12;
  }
  else {
    uint64_t v272 = 16;
  }
  uint64_t v273 = *((unsigned int *)this + 106);
  unsigned int v274 = *((_DWORD *)this + 107);
  if (v274 >= v273)
  {
    uint64_t v275 = 0;
    if ((int)v273 > 0) {
      v272 += 4 * (v273 - 1) + 4;
    }
    uint64_t v276 = v272 + 4 * (v274 - v273);
  }
  else
  {
    uint64_t v275 = 4 * v273;
    uint64_t v276 = v272;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if (v501) {
    v281 = (void *)v500;
  }
  else {
    v281 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v277, v278, v279, v280, v23, &unk_21408D3EE, v24, v24, v281, v276, v272, v275);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v276;
  *a5 += v272;
  *a6 += v275;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v282 = 12;
  }
  else {
    uint64_t v282 = 16;
  }
  uint64_t v283 = *((unsigned int *)this + 110);
  unsigned int v284 = *((_DWORD *)this + 111);
  if (v284 >= v283)
  {
    uint64_t v285 = 0;
    if ((int)v283 > 0) {
      v282 += 4 * (v283 - 1) + 4;
    }
    uint64_t v286 = v282 + 4 * (v284 - v283);
  }
  else
  {
    uint64_t v285 = 4 * v283;
    uint64_t v286 = v282;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if (v501) {
    v291 = (void *)v500;
  }
  else {
    v291 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v287, v288, v289, v290, v23, &unk_21408D3EE, v24, v24, v291, v286, v282, v285);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v286;
  *a5 += v282;
  *a6 += v285;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v292 = 12;
  }
  else {
    uint64_t v292 = 16;
  }
  uint64_t v293 = *((unsigned int *)this + 114);
  unsigned int v294 = *((_DWORD *)this + 115);
  if (v294 >= v293)
  {
    uint64_t v295 = 0;
    if ((int)v293 > 0) {
      v292 += 4 * (v293 - 1) + 4;
    }
    uint64_t v296 = v292 + 4 * (v294 - v293);
  }
  else
  {
    uint64_t v295 = 4 * v293;
    uint64_t v296 = v292;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if (v501) {
    v301 = (void *)v500;
  }
  else {
    v301 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v297, v298, v299, v300, v23, &unk_21408D3EE, v24, v24, v301, v296, v292, v295);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v296;
  *a5 += v292;
  *a6 += v295;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v302 = 12;
  }
  else {
    uint64_t v302 = 16;
  }
  uint64_t v303 = *((unsigned int *)this + 130);
  unsigned int v304 = *((_DWORD *)this + 131);
  if (v304 >= v303)
  {
    uint64_t v305 = 0;
    if ((int)v303 > 0) {
      v302 += 4 * (v303 - 1) + 4;
    }
    uint64_t v306 = v302 + 4 * (v304 - v303);
  }
  else
  {
    uint64_t v305 = 4 * v303;
    uint64_t v306 = v302;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if (v501) {
    v311 = (void *)v500;
  }
  else {
    v311 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v307, v308, v309, v310, v23, &unk_21408D3EE, v24, v24, v311, v306, v302, v305);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v306;
  *a5 += v302;
  *a6 += v305;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v312 = 12;
  }
  else {
    uint64_t v312 = 16;
  }
  int v313 = *((_DWORD *)this + 122);
  unsigned int v314 = *((_DWORD *)this + 123);
  BOOL v40 = v314 >= v313;
  uint64_t v315 = v314 - v313;
  if (v40)
  {
    uint64_t v317 = v313 & ~(v313 >> 31);
    int v313 = 0;
    uint64_t v316 = v312 + v317;
    v312 += v317 + v315;
  }
  else
  {
    uint64_t v316 = v312;
  }
  uint64_t v318 = v313;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if (v501) {
    v323 = (void *)v500;
  }
  else {
    v323 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v319, v320, v321, v322, v23, &unk_21408D3EE, v24, v24, v323, v312, v316, v318);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v312;
  *a5 += v316;
  *a6 += v318;
  uint64_t v324 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)this + 592, 0);
  uint64_t v325 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)this + 592, 1);
  unint64_t v500 = 0;
  *(void *)&long long v501 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v500);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if (v501) {
    v330 = (void *)v500;
  }
  else {
    v330 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v326, v327, v328, v329, v23, &unk_21408D3EE, v24, v24, v330, v324, v325, 0);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v324;
  *a5 += v325;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v331 = 12;
  }
  else {
    uint64_t v331 = 16;
  }
  int v332 = *((_DWORD *)this + 118);
  unsigned int v333 = *((_DWORD *)this + 119);
  BOOL v40 = v333 >= v332;
  uint64_t v334 = v333 - v332;
  if (v40)
  {
    uint64_t v336 = v332 & ~(v332 >> 31);
    int v332 = 0;
    uint64_t v335 = v331 + v336;
    v331 += v336 + v334;
  }
  else
  {
    uint64_t v335 = v331;
  }
  uint64_t v337 = v332;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if (v501) {
    v342 = (void *)v500;
  }
  else {
    v342 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v338, v339, v340, v341, v23, &unk_21408D3EE, v24, v24, v342, v331, v335, v337);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v331;
  *a5 += v335;
  *a6 += v337;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v343 = 12;
  }
  else {
    uint64_t v343 = 16;
  }
  uint64_t v344 = *((unsigned int *)this + 126);
  unsigned int v345 = *((_DWORD *)this + 127);
  if (v345 >= v344)
  {
    uint64_t v346 = 0;
    if ((int)v344 > 0) {
      v343 += 4 * (v344 - 1) + 4;
    }
    uint64_t v347 = v343 + 4 * (v345 - v344);
  }
  else
  {
    uint64_t v346 = 4 * v344;
    uint64_t v347 = v343;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if (v501) {
    v352 = (void *)v500;
  }
  else {
    v352 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v348, v349, v350, v351, v23, &unk_21408D3EE, v24, v24, v352, v347, v343, v346);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v347;
  *a5 += v343;
  *a6 += v346;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v353 = 12;
  }
  else {
    uint64_t v353 = 16;
  }
  int v354 = *((_DWORD *)this + 138);
  unsigned int v355 = *((_DWORD *)this + 139);
  BOOL v40 = v355 >= v354;
  uint64_t v356 = v355 - v354;
  if (v40)
  {
    uint64_t v358 = v354 & ~(v354 >> 31);
    int v354 = 0;
    uint64_t v357 = v353 + v358;
    v353 += v358 + v356;
  }
  else
  {
    uint64_t v357 = v353;
  }
  uint64_t v359 = v354;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if (v501) {
    v364 = (void *)v500;
  }
  else {
    v364 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v360, v361, v362, v363, v23, &unk_21408D3EE, v24, v24, v364, v353, v357, v359);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v353;
  *a5 += v357;
  *a6 += v359;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v365 = 12;
  }
  else {
    uint64_t v365 = 16;
  }
  int v366 = *((_DWORD *)this + 142);
  unsigned int v367 = *((_DWORD *)this + 143);
  BOOL v40 = v367 >= v366;
  uint64_t v368 = v367 - v366;
  if (v40)
  {
    uint64_t v370 = v366 & ~(v366 >> 31);
    int v366 = 0;
    uint64_t v369 = v365 + v370;
    v365 += v370 + v368;
  }
  else
  {
    uint64_t v369 = v365;
  }
  uint64_t v371 = v366;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if (v501) {
    v376 = (void *)v500;
  }
  else {
    v376 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v372, v373, v374, v375, v23, &unk_21408D3EE, v24, v24, v376, v365, v369, v371);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v365;
  *a5 += v369;
  *a6 += v371;
  uint64_t v377 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)this + 576, 0);
  uint64_t v378 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)this + 576, 1);
  unint64_t v500 = 0;
  *(void *)&long long v501 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v500);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if (v501) {
    v383 = (void *)v500;
  }
  else {
    v383 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v379, v380, v381, v382, v23, &unk_21408D3EE, v24, v24, v383, v377, v378, 0);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v377;
  *a5 += v378;
  uint64_t v384 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)this + 608, 0);
  uint64_t v385 = sizeObject<DgnPrimArray<unsigned int>>((uint64_t)this + 608, 1);
  unint64_t v500 = 0;
  *(void *)&long long v501 = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v500);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if (v501) {
    v390 = (void *)v500;
  }
  else {
    v390 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v386, v387, v388, v389, v23, &unk_21408D3EE, v24, v24, v390, v384, v385, 0);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v384;
  *a5 += v385;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v391 = 12;
  }
  else {
    uint64_t v391 = 16;
  }
  int v392 = *((_DWORD *)this + 158);
  unsigned int v393 = *((_DWORD *)this + 159);
  BOOL v40 = v393 >= v392;
  uint64_t v394 = v393 - v392;
  if (v40)
  {
    uint64_t v396 = v392 & ~(v392 >> 31);
    int v392 = 0;
    uint64_t v395 = v391 + v396;
    v391 += v396 + v394;
  }
  else
  {
    uint64_t v395 = v391;
  }
  uint64_t v397 = v392;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if (v501) {
    v402 = (void *)v500;
  }
  else {
    v402 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v398, v399, v400, v401, v23, &unk_21408D3EE, v24, v24, v402, v391, v395, v397);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v391;
  *a5 += v395;
  *a6 += v397;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v403 = 12;
  }
  else {
    uint64_t v403 = 16;
  }
  uint64_t v404 = *((unsigned int *)this + 162);
  unsigned int v405 = *((_DWORD *)this + 163);
  if (v405 >= v404)
  {
    uint64_t v406 = 0;
    if ((int)v404 > 0) {
      v403 += 4 * (v404 - 1) + 4;
    }
    uint64_t v407 = v403 + 4 * (v405 - v404);
  }
  else
  {
    uint64_t v406 = 4 * v404;
    uint64_t v407 = v403;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if (v501) {
    v412 = (void *)v500;
  }
  else {
    v412 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v408, v409, v410, v411, v23, &unk_21408D3EE, v24, v24, v412, v407, v403, v406);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v407;
  *a5 += v403;
  *a6 += v406;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if (v501) {
    v417 = (void *)v500;
  }
  else {
    v417 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v413, v414, v415, v416, v23, &unk_21408D3EE, v24, v24, v417, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v500);
  ++*a4;
  ++*a5;
  uint64_t v418 = sizeObject<PhnIndexSet>((uint64_t)this + 664, 0);
  uint64_t v419 = sizeObject<PhnIndexSet>((uint64_t)this + 664, 1);
  uint64_t v420 = sizeObject<PhnIndexSet>((uint64_t)this + 664, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if (v501) {
    v425 = (void *)v500;
  }
  else {
    v425 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v421, v422, v423, v424, v23, &unk_21408D3EE, v24, v24, v425, v418, v419, v420);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v418;
  *a5 += v419;
  *a6 += v420;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v426 = 12;
  }
  else {
    uint64_t v426 = 16;
  }
  uint64_t v427 = *((unsigned int *)this + 178);
  unsigned int v428 = *((_DWORD *)this + 179);
  if (v428 >= v427)
  {
    uint64_t v429 = 0;
    if ((int)v427 > 0) {
      v426 += 4 * (v427 - 1) + 4;
    }
    uint64_t v430 = v426 + 4 * (v428 - v427);
  }
  else
  {
    uint64_t v429 = 4 * v427;
    uint64_t v430 = v426;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if (v501) {
    v435 = (void *)v500;
  }
  else {
    v435 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v431, v432, v433, v434, v23, &unk_21408D3EE, v24, v24, v435, v430, v426, v429);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v430;
  *a5 += v426;
  *a6 += v429;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if (v501) {
    v440 = (void *)v500;
  }
  else {
    v440 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v436, v437, v438, v439, v23, &unk_21408D3EE, v24, v24, v440, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if (v501) {
    v445 = (void *)v500;
  }
  else {
    v445 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v441, v442, v443, v444, v23, &unk_21408D3EE, v24, v24, v445, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if (v501) {
    v450 = (void *)v500;
  }
  else {
    v450 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v446, v447, v448, v449, v23, &unk_21408D3EE, v24, v24, v450, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if (v501) {
    v455 = (void *)v500;
  }
  else {
    v455 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v451, v452, v453, v454, v23, &unk_21408D3EE, v24, v24, v455, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v456 = 12;
  }
  else {
    uint64_t v456 = 16;
  }
  uint64_t v457 = *((unsigned int *)this + 134);
  unsigned int v458 = *((_DWORD *)this + 135);
  if (v458 >= v457)
  {
    uint64_t v459 = 0;
    if ((int)v457 > 0) {
      uint64_t v456 = (v456 | 2) + 2 * (v457 - 1);
    }
    uint64_t v460 = v456 + 2 * (v458 - v457);
  }
  else
  {
    uint64_t v459 = 2 * v457;
    uint64_t v460 = v456;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1145, (DgnString *)&v500);
  if (v501) {
    v465 = (void *)v500;
  }
  else {
    v465 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v461, v462, v463, v464, v23, &unk_21408D3EE, v24, v24, v465, v460, v456, v459);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v460;
  *a5 += v456;
  *a6 += v459;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v466 = 4;
  }
  else {
    uint64_t v466 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1146, (DgnString *)&v500);
  if (v501) {
    v471 = (void *)v500;
  }
  else {
    v471 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v467, v468, v469, v470, v23, &unk_21408D3EE, v24, v24, v471, v466, v466, 0);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v466;
  *a5 += v466;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v472 = 4;
  }
  else {
    uint64_t v472 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1147, (DgnString *)&v500);
  if (v501) {
    v477 = (void *)v500;
  }
  else {
    v477 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v473, v474, v475, v476, v23, &unk_21408D3EE, v24, v24, v477, v472, v472, 0);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v472;
  *a5 += v472;
  v478 = (EnvMgr *)*((void *)this + 94);
  if (v478)
  {
    unint64_t v499 = 0;
    unint64_t v500 = 0;
    unint64_t v498 = 0;
    EnvMgr::printSize(v478, 0xFFFFFFFFLL, v23, &v500, &v499, &v498);
    *a4 += v500;
    *a5 += v499;
    *a6 += v498;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v479 = 4;
  }
  else {
    uint64_t v479 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1149, (DgnString *)&v500);
  if (v501) {
    v484 = (void *)v500;
  }
  else {
    v484 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v480, v481, v482, v483, v23, &unk_21408D3EE, v24, v24, v484, v479, v479, 0);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v479;
  *a5 += v479;
  v485 = (EnvMgr *)*((void *)this + 95);
  if (v485)
  {
    unint64_t v499 = 0;
    unint64_t v500 = 0;
    unint64_t v498 = 0;
    EnvMgr::printSize(v485, 0xFFFFFFFFLL, v23, &v500, &v499, &v498);
    *a4 += v500;
    *a5 += v499;
    *a6 += v498;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v486 = 4;
  }
  else {
    uint64_t v486 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1151, (DgnString *)&v500);
  if (v501) {
    v491 = (void *)v500;
  }
  else {
    v491 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v487, v488, v489, v490, v23, &unk_21408D3EE, v24, v24, v491, v486, v486, 0);
  DgnString::~DgnString((DgnString *)&v500);
  *a4 += v486;
  *a5 += v486;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1152, (DgnString *)&v500);
  if (v501) {
    v496 = (void *)v500;
  }
  else {
    v496 = &unk_21408D3EE;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v492, v493, v494, v495, v497, &unk_21408D3EE, (35 - v497), (35 - v497), v496, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v500);
}

void sub_213E0A764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<DgnCollArray<unsigned int,WordList>>(uint64_t a1, int a2)
{
  uint64_t v2 = 0;
  v9[0] = 0;
  int v10 = 0;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  if (a2 != 3)
  {
    uint64_t v2 = gShadowDiagnosticShowIdealizedObjectSizes ? 12 : 16;
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      uint64_t v5 = *(unsigned int *)(a1 + 8);
      if ((int)v5 >= 1)
      {
        unint64_t v6 = v5 + 1;
        do
        {
          if (a2 == 2) {
            uint64_t v7 = 80;
          }
          else {
            uint64_t v7 = DgnCollArray<unsigned int,ParamSetIdCollCmpWithTemp>::sizeObject(*(void *)a1 + 80 * (v6 - 2), a2);
          }
          v2 += v7;
          --v6;
        }
        while (v6 > 1);
      }
      if (!a2) {
        v2 += 80 * (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
      }
    }
  }
  DgnCollArray<unsigned int,ParamSetIdCollCmpWithTemp>::~DgnCollArray((uint64_t)v9);
  return v2;
}

void sub_213E0A944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sizeObject<BitArray *>(uint64_t a1, int a2)
{
  if (a2 == 3) {
    return 0;
  }
  int v4 = gShadowDiagnosticShowIdealizedObjectSizes;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v2 = 12;
  }
  else {
    uint64_t v2 = 16;
  }
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    uint64_t v6 = *(unsigned int *)(a1 + 8);
    if ((int)v6 >= 1)
    {
      unint64_t v7 = v6 + 1;
      int v8 = gShadowDiagnosticShowIdealizedObjectSizes;
      do
      {
        if (v8) {
          uint64_t v9 = 4;
        }
        else {
          uint64_t v9 = 8;
        }
        if (a2 != 2)
        {
          uint64_t v10 = *(void *)(*(void *)a1 + 8 * (v7 - 2));
          if (v10)
          {
            v9 += BitArray::sizeObject(v10, a2);
            int v8 = gShadowDiagnosticShowIdealizedObjectSizes;
          }
        }
        v2 += v9;
        --v7;
      }
      while (v7 > 1);
    }
    if (!a2)
    {
      char v11 = 2;
      if (!v4) {
        char v11 = 3;
      }
      v2 += (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8)) << v11;
    }
  }
  return v2;
}

uint64_t sizeObject<DgnPrimArray<unsigned short>>(uint64_t a1, int a2)
{
  uint64_t v2 = 0;
  v9[0] = 0;
  v9[1] = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v3 = 12;
  }
  else {
    uint64_t v3 = 16;
  }
  if (a2 != 3)
  {
    if ((a2 & 0xFFFFFFFE) == 2)
    {
      uint64_t v2 = v3;
    }
    else
    {
      uint64_t v6 = *(unsigned int *)(a1 + 8);
      uint64_t v2 = v3;
      if ((int)v6 >= 1)
      {
        unint64_t v7 = v6 + 1;
        uint64_t v2 = v3;
        do
          v2 += sizeObject<unsigned short>(*(void *)a1 + 16 * (v7-- - 2), a2);
        while (v7 > 1);
      }
      if (!a2) {
        v2 += v3 * (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
      }
    }
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v9);
  return v2;
}

void sub_213E0AB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *StateMgr::getName(StateMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StateMgr::verifyVisible(this, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v10 = (_DWORD *)(*((void *)this + 12) + 16 * a2);
  if (v10[2]) {
    return *(void **)v10;
  }
  else {
    return &unk_21408D3EE;
  }
}

unint64_t DgnPrimArray<unsigned int>::compact(unint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 8);
  uint64_t v2 = *(unsigned int *)(result + 12);
  if (v1 != v2)
  {
    unint64_t v3 = result;
    if (v1)
    {
      int v4 = 0;
      uint64_t result = realloc_array(*(void **)result, &v4, 4 * v1, 4 * v1, 4 * v2, 0);
      *(_DWORD *)(v3 + 12) = result >> 2;
      *(void *)unint64_t v3 = v4;
    }
    else
    {
      uint64_t result = *(void *)result;
      if (*(void *)v3) {
        uint64_t result = MemChunkFree((void *)result, 0);
      }
      *(void *)unint64_t v3 = 0;
      *(_DWORD *)(v3 + 12) = 0;
    }
  }
  return result;
}

uint64_t StateMgr::precedingNonAcousticWordStateValid(StateMgr *this, uint64_t a2, uint64_t a3, DgnString *a4, uint64_t a5)
{
  if (!a3) {
    return 1;
  }
  if (*(_DWORD *)(*((void *)this + 74) + 16 * a2 + 8))
  {
    DgnString::stringPrintf(a4, "State %d is a precedingNonAcousticWordState for other states", a3, (uint64_t)a4, a5, a2);
  }
  else if (*(_DWORD *)(*((void *)this + 64) + 4 * a3))
  {
    DgnString::stringPrintf(a4, "PrecedingNonAcousticWordState %d has another state as its precedingNonAcousticWordState", a3, (uint64_t)a4, a5, a3);
  }
  else
  {
    if (!*(_DWORD *)(*((void *)this + 62) + 4 * a3)) {
      return 1;
    }
    DgnString::stringPrintf(a4, "PrecedingNonAcousticWordState %d has a word alias state", a3, (uint64_t)a4, a5, a3);
  }
  return 0;
}

void StateMgr::verifyVisible(StateMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 180) <= a2 || !*(unsigned char *)(*((void *)this + 70) + a2)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1332, (uint64_t)"voc/statemgr", 1, (uint64_t)"%u", a7, a8, a2);
  }
}

void StateMgr::verifyStateFull(StateMgr *this, unsigned int a2, int a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 || (a4 & 1) == 0)
  {
    unsigned int v8 = *((_DWORD *)this + 180);
    if (a3)
    {
      if (v8 > a2)
      {
        uint64_t v9 = *((void *)this + 70);
        goto LABEL_8;
      }
    }
    else if (v8 > a2)
    {
      uint64_t v9 = *((void *)this + 68);
LABEL_8:
      if (*(unsigned char *)(v9 + a2)) {
        return;
      }
    }
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1339, (uint64_t)"voc/statemgr", 1, (uint64_t)"%u", a7, a8, a2);
  }
}

void StateMgr::verifyAliasingValid(StateMgr *this, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a3 && (*(_DWORD *)(*((void *)this + 72) + 16 * a2 + 8) || *(_DWORD *)(*((void *)this + 62) + 4 * a3))) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1344, (uint64_t)"voc/statemgr", 9, (uint64_t)"%s", a7, a8, (char)&errStr_voc_statemgr_E_CHAINED_WORD_ALIAS);
  }
}

void StateMgr::verifyPrecedingNonAcousticWordStateValid(StateMgr *this, uint64_t a2, uint64_t a3)
{
  DgnString::DgnString((DgnString *)&v10);
  if ((StateMgr::precedingNonAcousticWordStateValid(this, a2, a3, (DgnString *)&v10, v6) & 1) == 0)
  {
    if (v11) {
      LOBYTE(v9) = v10;
    }
    else {
      uint64_t v9 = &unk_21408D3EE;
    }
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1354, (uint64_t)"voc/statemgr", 35, (uint64_t)"%.500s", v7, v8, (char)v9);
  }
  DgnString::~DgnString((DgnString *)&v10);
}

void sub_213E0AE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t StateMgr::preAllocToEnsureStateId(uint64_t this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = (StateMgr *)this;
  *(unsigned char *)(this + 696) = 1;
  *(unsigned char *)(this + 656) = 0;
  for (unsigned int i = *(_DWORD *)(this + 720); i < a2; unsigned int i = *((_DWORD *)v9 + 180))
  {
    unsigned __int16 v12 = 0;
    this = StateMgr::newState(v9, 0, &v12, a4, a5, a6, a7, a8);
  }
  if (i >= 2)
  {
    uint64_t v11 = 1;
    do
    {
      this = StateMgr::killState(v9, v11, 1, a4, a5, a6, a7, a8);
      uint64_t v11 = (v11 + 1);
    }
    while (v11 < *((_DWORD *)v9 + 180));
  }
  *((_DWORD *)v9 + 182) = a2;
  return this;
}

uint64_t StateMgr::killState(StateMgr *this, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StateMgr::verifyStateFull(this, a2, a3, 0, a5, a6, a7, a8);
  if (*(_DWORD *)(*((void *)this + 16) + 16 * a2 + 8)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1834, (uint64_t)"voc/statemgr", 12, (uint64_t)"%.500s %d %.500s %d %d", v13, v14, (char)"delete");
  }
  if (*(_DWORD *)(*((void *)this + 18) + 16 * a2 + 8)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1837, (uint64_t)"voc/statemgr", 12, (uint64_t)"%.500s %d %.500s %d %d", v13, v14, (char)"delete");
  }
  if (*(_DWORD *)(*((void *)this + 10) + 16 * a2 + 8)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1841, (uint64_t)"voc/statemgr", 12, (uint64_t)"%.500s %d %.500s %d %d", v13, v14, (char)"delete");
  }
  if (*(_WORD *)(*((void *)this + 20) + 2 * a2)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1844, (uint64_t)"voc/statemgr", 13, (uint64_t)"%.500s %d %.500s %d", v13, v14, (char)"delete");
  }
  if (*(_WORD *)(*((void *)this + 22) + 2 * a2)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1847, (uint64_t)"voc/statemgr", 13, (uint64_t)"%.500s %d %.500s %d", v13, v14, (char)"delete");
  }
  if (*(_WORD *)(*((void *)this + 24) + 2 * a2)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1850, (uint64_t)"voc/statemgr", 13, (uint64_t)"%.500s %d %.500s %d", v13, v14, (char)"delete");
  }
  if (*(_WORD *)(*((void *)this + 26) + 2 * a2)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1853, (uint64_t)"voc/statemgr", 13, (uint64_t)"%.500s %d %.500s %d", v13, v14, (char)"delete");
  }
  if (*(_DWORD *)(*((void *)this + 72) + 16 * a2 + 8)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1857, (uint64_t)"voc/statemgr", 12, (uint64_t)"%.500s %d %.500s %d %d", v13, v14, (char)"delete");
  }
  if (*(_DWORD *)(*((void *)this + 74) + 16 * a2 + 8)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1861, (uint64_t)"voc/statemgr", 12, (uint64_t)"%.500s %d %.500s %d %d", v13, v14, (char)"delete");
  }
  if (*(_DWORD *)(*((void *)this + 76) + 16 * a2 + 8)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1865, (uint64_t)"voc/statemgr", 12, (uint64_t)"%.500s %d %.500s %d %d", v13, v14, (char)"delete");
  }

  return StateMgr::killStateInternal((EnvMgr **)this, a2, a3, 0, v11, v12, v13, v14);
}

uint64_t StateMgr::doneEnsureStateId(uint64_t this)
{
  *(_DWORD *)(this + 728) = 0;
  return this;
}

void sub_213E0B4E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  BitArray::~BitArray((BitArray *)va);
  _Unwind_Resume(a1);
}

BOOL StateMgr::allTransitioningStatesAlreadyHaveRPA(StateMgr *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 76);
  unint64_t v3 = *(unsigned int *)(v2 + 16 * a2 + 8);
  if (v3)
  {
    uint64_t v4 = 0;
    BOOL v5 = 0;
    uint64_t v6 = *(void *)(v2 + 16 * a2);
    do
    {
      uint64_t v7 = *(unsigned int *)(v6 + 4 * v4);
      if (v7 != a2 && *(unsigned char *)(*((void *)this + 85) + v7) != 1) {
        break;
      }
      BOOL v5 = ++v4 >= v3;
    }
    while (v3 != v4);
  }
  else
  {
    return 1;
  }
  return v5;
}

BOOL StateMgr::allTransitioningStatesHavePA(StateMgr *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 76);
  unint64_t v3 = *(unsigned int *)(v2 + 16 * a2 + 8);
  if (v3)
  {
    uint64_t v4 = 0;
    BOOL v5 = 0;
    uint64_t v6 = *(void *)(v2 + 16 * a2);
    do
    {
      uint64_t v7 = *(unsigned int *)(v6 + 4 * v4);
      if (v7 != a2 && !*(unsigned char *)(*((void *)this + 58) + v7)) {
        break;
      }
      BOOL v5 = ++v4 >= v3;
    }
    while (v3 != v4);
  }
  else
  {
    return 1;
  }
  return v5;
}

BOOL StateMgr::anyTransitionedStatesHavePA(StateMgr *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 28);
  unint64_t v3 = *(unsigned int *)(v2 + 16 * a2 + 8);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(v2 + 16 * a2);
    BOOL v6 = 1;
    do
    {
      uint64_t v7 = *(unsigned int *)(v5 + 4 * v4);
      if (v7 != a2 && *(unsigned char *)(*((void *)this + 58) + v7)) {
        break;
      }
      BOOL v6 = ++v4 < v3;
    }
    while (v3 != v4);
  }
  else
  {
    return 0;
  }
  return v6;
}

BOOL StateMgr::changeRecursivePrefilteringAllowed(StateMgr *this, unsigned int a2)
{
  uint64_t v3 = a2;
  if (*(unsigned char *)(*((void *)this + 58) + a2) == 1)
  {
    BOOL result = StateMgr::allTransitioningStatesAlreadyHaveRPA(this, a2);
    if (result)
    {
      *(unsigned char *)(*((void *)this + 85) + v3) = 1;
      return result;
    }
  }
  else if (*(_DWORD *)(*((void *)this + 28) + 16 * a2 + 8))
  {
    BOOL result = StateMgr::anyTransitionedStatesHavePA(this, a2);
    if (result) {
      return result;
    }
  }
  else
  {
    *(unsigned char *)(*((void *)this + 85) + a2) = 0;
    BOOL result = StateMgr::allTransitioningStatesHavePA(this, a2);
    if (result) {
      return result;
    }
  }
  *((unsigned char *)this + 696) = 1;
  return result;
}

uint64_t StateMgr::setColls(StateMgr *a1, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StateMgr::verifyStateFull(a1, a2, a4, 0, a5, a6, a7, a8);
  uint64_t v11 = *(void *)a1 + 80 * a2;

  return DgnCollArray<unsigned int,WordList>::setColls(v11, a3);
}

uint64_t StateMgr::deleteWordIdNoPhones(StateMgr *this, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!StateMgr::isWordIdInState(this, a2, a3, a4, a5, a6, a7, a8)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 2105, (uint64_t)"voc/statemgr", 4, (uint64_t)"%u %u", v12, v13, a3);
  }
  if (*(_WORD *)(*((void *)this + 20) + 2 * a2)
    && WordList::getIncludingLatticeRefCount(*(WordList **)(*((void *)this + 92) + 48), a3))
  {
    WordList::getIncludingLatticeRefCount(*(WordList **)(*((void *)this + 92) + 48), a3);
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 2112, (uint64_t)"voc/statemgr", 14, (uint64_t)"%.500s %d %d %d %d", v14, v15, (char)"word");
  }
  if (*(_WORD *)(*((void *)this + 24) + 2 * a2)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 2116, (uint64_t)"voc/statemgr", 13, (uint64_t)"%.500s %d %.500s %d", v12, v13, (char)"word");
  }
  if (*(_WORD *)(*((void *)this + 26) + 2 * a2)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 2119, (uint64_t)"voc/statemgr", 13, (uint64_t)"%.500s %d %.500s %d", v12, v13, (char)"word");
  }
  if (a4)
  {
    unsigned int ItemPairEnvId = EnvMgr::getItemPairEnvId(*((EnvMgr **)this + 95), a2, a3);
    if (ItemPairEnvId)
    {
      EnvMgr::killEnv(*((EnvMgr **)this + 95), ItemPairEnvId, v17, v18, v19, v20, v21, v22);
      EnvMgr::setItemPairEnvId(*((EnvMgr **)this + 95), a2, a3, 0, v23, v24, v25, v26);
    }
  }
  DgnCollArray<unsigned int,WordList>::remove(*(void *)this + 80 * a2, a3);
  uint64_t result = WordList::removeIncludingStateRef(*((void *)this + 93), a3);
  uint64_t v28 = *(void **)(*((void *)this + 2) + 8 * a2);
  if (v28) {
    *(_DWORD *)(*v28 + 4 * (a3 >> 5)) &= ~(1 << a3);
  }
  return result;
}

BitArray *DgnDelete<BitArray>(BitArray *result)
{
  if (result)
  {
    BitArray::~BitArray(result);
    return (BitArray *)MemChunkFree(v1, 0);
  }
  return result;
}

void *StateMgr::setEmptyStateTransition(StateMgr *this, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StateMgr::verifyStateFull(this, a2, a3, 0, a5, a6, a7, a8);
  uint64_t v12 = a2;
  if (*(_WORD *)(*((void *)this + 20) + 2 * a2)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 3116, (uint64_t)"voc/statemgr", 13, (uint64_t)"%.500s %d %.500s %d", v10, v11, (char)"setEmptyStateTransition");
  }
  if (*(_WORD *)(*((void *)this + 24) + 2 * a2)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 3118, (uint64_t)"voc/statemgr", 13, (uint64_t)"%.500s %d %.500s %d", v10, v11, (char)"setEmptyStateTransition");
  }
  if (*(_WORD *)(*((void *)this + 26) + 2 * a2)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 3121, (uint64_t)"voc/statemgr", 13, (uint64_t)"%.500s %d %.500s %d", v10, v11, (char)"setEmptyStateTransition");
  }
  if (!*((unsigned char *)this + 696) && !*(unsigned char *)(*((void *)this + 58) + a2))
  {
    uint64_t v13 = *((void *)this + 85);
    if (*(unsigned char *)(v13 + a2) == 1)
    {
      if (StateMgr::allTransitioningStatesHavePA(this, a2)) {
        *(unsigned char *)(v13 + a2) = 0;
      }
      else {
        *((unsigned char *)this + 696) = 1;
      }
    }
  }
  uint64_t v14 = *((void *)this + 28) + 16 * a2;
  unsigned int v16 = (void *)(v14 + 8);
  unint64_t v15 = *(unsigned int *)(v14 + 8);
  uint64_t v17 = *(void **)v14;
  if (*(_DWORD *)(v14 + 8))
  {
    unint64_t v18 = 0;
    uint64_t v19 = *((void *)this + 76);
    do
    {
      uint64_t v20 = *((unsigned int *)v17 + v18);
      uint64_t v21 = v19 + 16 * v20;
      unsigned int v24 = *(_DWORD *)(v21 + 8);
      uint64_t v22 = (_DWORD *)(v21 + 8);
      uint64_t v23 = v24;
      if (v24)
      {
        uint64_t v25 = *(_DWORD **)(v19 + 16 * v20);
        uint64_t v26 = v23;
        uint64_t v27 = v25;
        while (*v27 != a2)
        {
          ++v27;
          if (!--v26) {
            goto LABEL_21;
          }
        }
        _DWORD *v27 = v25[(v23 - 1)];
        *uint64_t v22 = v23 - 1;
        unint64_t v15 = *(unsigned int *)v16;
      }
LABEL_21:
      ++v18;
    }
    while (v18 < v15);
  }
  if (v17)
  {
    MemChunkFree(v17, 0);
    *(void *)uint64_t v14 = 0;
  }
  *unsigned int v16 = 0;
  uint64_t v28 = *((void *)this + 30) + 16 * a2;
  if (*(void *)v28)
  {
    MemChunkFree(*(void **)v28, 0);
    *(void *)uint64_t v28 = 0;
  }
  *(void *)(v28 + 8) = 0;
  uint64_t v29 = *((void *)this + 32) + 16 * v12;
  uint64_t result = *(void **)v29;
  if (*(void *)v29)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *(void *)uint64_t v29 = 0;
  }
  *(void *)(v29 + 8) = 0;
  return result;
}

void StateMgr::setPrecedingNonAcousticWordState(StateMgr *this, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a4)
  {
    StateMgr::verifyStateFull(this, a2, 1, 0, a5, a6, a7, a8);
    StateMgr::verifyStateFull(this, a3, 1, 1, v11, v12, v13, v14);
    StateMgr::verifyPrecedingNonAcousticWordStateValid(this, a2, a3);
  }
  else
  {
    DgnString::DgnString((DgnString *)v32);
    DgnString::~DgnString((DgnString *)v32);
  }
  uint64_t v21 = *((void *)this + 64);
  uint64_t v22 = *(unsigned int *)(v21 + 4 * a2);
  if (v22)
  {
    uint64_t v23 = *((void *)this + 74);
    uint64_t v24 = v23 + 16 * v22;
    unsigned int v27 = *(_DWORD *)(v24 + 8);
    uint64_t v25 = (_DWORD *)(v24 + 8);
    uint64_t v26 = v27;
    if (v27)
    {
      uint64_t v28 = *(_DWORD **)(v23 + 16 * v22);
      uint64_t v29 = v26;
      uint64_t v30 = v28;
      while (*v30 != a2)
      {
        ++v30;
        if (!--v29) {
          goto LABEL_11;
        }
      }
      int v31 = v26 - 1;
      _DWORD *v30 = v28[v31];
      *uint64_t v25 = v31;
    }
  }
LABEL_11:
  *(_DWORD *)(v21 + 4 * a2) = a3;
  if (a3) {
    StateMgr::addPrecedingNonAcousticWordStateRef((unint64_t)this, a3, a2);
  }
  if (*(_DWORD *)(*((void *)this + 10) + 16 * a2 + 8)) {
    RuleMgr::alteredStateInRule(*(RuleMgr **)(*((void *)this + 92) + 64), a2, v15, v16, v17, v18, v19, v20);
  }
}

void StateMgr::setWordAliasState(StateMgr *this, unsigned int a2, unsigned int a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a4)
  {
    StateMgr::verifyStateFull(this, a2, 1, 0, a5, a6, a7, a8);
    StateMgr::verifyStateFull(this, a3, 1, 1, v11, v12, v13, v14);
    StateMgr::verifyAliasingValid(this, a2, a3, v15, v16, v17, v18, v19);
    uint64_t v22 = a2;
    if (*(_WORD *)(*((void *)this + 20) + 2 * a2)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 3312, (uint64_t)"voc/statemgr", 13, (uint64_t)"%.500s %d %.500s %d", v20, v21, (char)"setWordAliasState");
    }
    if (*(_WORD *)(*((void *)this + 24) + 2 * a2)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 3314, (uint64_t)"voc/statemgr", 13, (uint64_t)"%.500s %d %.500s %d", v20, v21, (char)"setWordAliasState");
    }
    if (*(_WORD *)(*((void *)this + 26) + 2 * a2)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 3317, (uint64_t)"voc/statemgr", 13, (uint64_t)"%.500s %d %.500s %d", v20, v21, (char)"setWordAliasState");
    }
  }
  else
  {
    uint64_t v22 = a2;
  }
  uint64_t v23 = *((void *)this + 62);
  uint64_t v24 = *(unsigned int *)(v23 + 4 * v22);
  if (v24)
  {
    uint64_t v25 = *((void *)this + 72);
    uint64_t v26 = v25 + 16 * v24;
    unsigned int v29 = *(_DWORD *)(v26 + 8);
    unsigned int v27 = (_DWORD *)(v26 + 8);
    uint64_t v28 = v29;
    if (v29)
    {
      uint64_t v30 = *(_DWORD **)(v25 + 16 * v24);
      uint64_t v31 = v28;
      uint64_t v32 = v30;
      while (*v32 != a2)
      {
        ++v32;
        if (!--v31) {
          goto LABEL_14;
        }
      }
      int v33 = v28 - 1;
      *uint64_t v32 = v30[v33];
      _DWORD *v27 = v33;
      if (!a3) {
        goto LABEL_17;
      }
LABEL_15:
      StateMgr::addAliasingStateRef((unint64_t)this, a3, a2);
      *(_DWORD *)(*((void *)this + 62) + 4 * v22) = a3;
      goto LABEL_18;
    }
  }
LABEL_14:
  if (a3) {
    goto LABEL_15;
  }
LABEL_17:
  *(_DWORD *)(v23 + 4 * v22) = 0;
LABEL_18:
  if (*(_DWORD *)(*((void *)this + 10) + 16 * v22 + 8))
  {
    uint64_t v34 = *(RuleMgr **)(*((void *)this + 92) + 64);
    RuleMgr::alteredStateInRule(v34, a2);
  }
}

void StateMgr::setStateCharacteristicsForRuleState(StateMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a3;
  StateMgr::verifyState(this, a2, a3, a4, a5, a6, a7, a8);
  StateMgr::verifyState(this, v8, v11, v12, v13, v14, v15, v16);
  *(_DWORD *)(*((void *)this + 34) + 4 * a2) = *(_DWORD *)(*((void *)this + 34) + 4 * v8);
  *(_DWORD *)(*((void *)this + 36) + 4 * a2) = *(_DWORD *)(*((void *)this + 36) + 4 * v8);
  *(unsigned char *)(*((void *)this + 38) + a2) = *(unsigned char *)(*((void *)this + 38) + v8);
  *(unsigned char *)(*((void *)this + 40) + a2) = *(unsigned char *)(*((void *)this + 40) + v8);
  *(unsigned char *)(*((void *)this + 48) + a2) = *(unsigned char *)(*((void *)this + 48) + v8);
  *(_DWORD *)(*((void *)this + 50) + 4 * a2) = *(_DWORD *)(*((void *)this + 50) + 4 * v8);
  *(_DWORD *)(*((void *)this + 52) + 4 * a2) = *(_DWORD *)(*((void *)this + 52) + 4 * v8);
  *(_DWORD *)(*((void *)this + 54) + 4 * a2) = *(_DWORD *)(*((void *)this + 54) + 4 * v8);
  *(_DWORD *)(*((void *)this + 56) + 4 * a2) = *(_DWORD *)(*((void *)this + 56) + 4 * v8);
  StateMgr::setPrecedingNonAcousticWordState(this, a2, *(_DWORD *)(*((void *)this + 64) + 4 * v8), 0);
  *(unsigned char *)(*((void *)this + 60) + a2) = *(unsigned char *)(*((void *)this + 60) + v8);
  uint64_t v21 = *((void *)this + 58);
  int v22 = *(unsigned __int8 *)(v21 + v8);
  if (*(unsigned __int8 *)(v21 + a2) != v22)
  {
    *(unsigned char *)(v21 + a2) = v22;
    if (!*((unsigned char *)this + 696)) {
      StateMgr::changeRecursivePrefilteringAllowed(this, a2);
    }
  }
  *(unsigned char *)(*((void *)this + 44) + a2) = *(unsigned char *)(*((void *)this + 44) + v8);
  *(unsigned char *)(*((void *)this + 46) + a2) = *(unsigned char *)(*((void *)this + 46) + v8);
  *(unsigned char *)(*((void *)this + 4) + a2) = 0;
  *(unsigned char *)(*((void *)this + 42) + a2) = 0;
  if (*(_DWORD *)(*((void *)this + 62) + 4 * v8)) {
    unsigned int v23 = *(_DWORD *)(*((void *)this + 62) + 4 * v8);
  }
  else {
    unsigned int v23 = v8;
  }
  StateMgr::setWordAliasState(this, a2, v23, 0, v17, v18, v19, v20);
  *(_DWORD *)(*((void *)this + 8) + 4 * a2) = v8;
}

uint64_t StateMgr::setName(StateMgr *this, unsigned int a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StateMgr::verifyVisible(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  StateMgr::verifyVisible(this, a2, v11, v12, v13, v14, v15, v16);
  if (a2) {
    uint64_t v22 = *(unsigned int *)(*((void *)this + 14) + 4 * a2);
  }
  else {
    uint64_t v22 = 0;
  }
  uint64_t result = StateMgr::getHandle(this, a3, v22, v17, v18, v19, v20, v21);
  if (result != a2)
  {
    if (result) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 1957, (uint64_t)"voc/statemgr", 2, (uint64_t)"%.500s", v24, v25, (char)a3);
    }
    *((_DWORD *)this + 183) ^= StateMgr::computeOneStateIdNameChecksum(this, a2);
    DgnString::operator=((DgnString *)(*((void *)this + 12) + 16 * a2), a3);
    uint64_t result = StateMgr::computeOneStateIdNameChecksum(this, a2);
    *((_DWORD *)this + 183) ^= result;
  }
  return result;
}

uint64_t StateMgr::getParent(StateMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2) {
    return *(unsigned int *)(*((void *)this + 14) + 4 * a2);
  }
  else {
    return 0;
  }
}

void StateMgr::setWeights(StateMgr *this, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StateMgr::verifyStateFull(this, a2, a4, 0, a5, a6, a7, a8);
  (*(void (**)(void))(**(void **)(*((void *)this + 92) + 72) + 688))();
  *(_DWORD *)(*((void *)this + 34) + 4 * a2) = a3;
  if (*(_DWORD *)(*((void *)this + 10) + 16 * a2 + 8))
  {
    uint64_t v17 = *(RuleMgr **)(*((void *)this + 92) + 64);
    RuleMgr::alteredStateInRule(v17, a2, v11, v12, v13, v14, v15, v16);
  }
}

uint64_t StateMgr::getWeights(StateMgr *this, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return *(unsigned int *)(*((void *)this + 34) + 4 * a2);
}

void StateMgr::setWordPenalty(StateMgr *this, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StateMgr::verifyStateFull(this, a2, a4, 0, a5, a6, a7, a8);
  if ((a3 - 1001) <= 0xFFFFF82E) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 2007, (uint64_t)"voc/statemgr", 32, (uint64_t)"%s", v15, v16, (char)&errStr_voc_statemgr_E_WORDPENALTY);
  }
  *(_DWORD *)(*((void *)this + 36) + 4 * a2) = a3;
  if (*(_DWORD *)(*((void *)this + 10) + 16 * a2 + 8))
  {
    uint64_t v17 = *(RuleMgr **)(*((void *)this + 92) + 64);
    RuleMgr::alteredStateInRule(v17, a2, v11, v12, v13, v14, v15, v16);
  }
}

uint64_t StateMgr::getWordPenalty(StateMgr *this, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return *(unsigned int *)(*((void *)this + 36) + 4 * a2);
}

void StateMgr::checkCollIdExposed(StateMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StateMgr::verifyVisible(this, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v17 = *(void *)this + 80 * a2;

  DgnCollArray<unsigned int,WordList>::checkCollIdExposed(v17, a3, v11, v12, v13, v14, v15, v16);
}

void DgnCollArray<unsigned int,WordList>::checkCollIdExposed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 != 0xFFFF
    && (!*(unsigned char *)a1 || !*(unsigned char *)(a1 + 5) || *(unsigned __int16 *)(a1 + 2) != a2)
    && (*(_DWORD *)(a1 + 32) <= a2 || !*(void *)(*(void *)(a1 + 24) + 8 * a2)))
  {
    errorBadCollationId(a2, a2, a3, a4, a5, a6, a7, a8);
  }
}

BOOL StateMgr::isWordIdInState(StateMgr *this, unsigned int a2, unsigned int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StateMgr::verifyStateFull(this, a2, a4, 0, a5, a6, a7, a8);
  uint64_t v11 = *(void *)(*((void *)this + 2) + 8 * a2);
  if (v11
    || *(_DWORD *)(*(void *)this + 80 * a2 + 16) >= 0x1F4u
    && (StateMgr::getBitWords(this, a2), (uint64_t v11 = *(void *)(*((void *)this + 2) + 8 * a2)) != 0))
  {
    if (*(_DWORD *)(v11 + 8) > a3) {
      return (*(_DWORD *)(*(void *)v11 + 4 * (a3 >> 5)) >> a3) & 1;
    }
    return 0;
  }
  uint64_t v13 = *(unsigned int *)(*(void *)this + 80 * a2 + 16);
  if (!v13) {
    return 0;
  }
  uint64_t v14 = *(int **)(*(void *)this + 80 * a2 + 8);
  for (uint64_t i = 0xFFFFFFFFLL; ; --i)
  {
    int v16 = *v14++;
    if (v16 == a3) {
      break;
    }
    if (!--v13) {
      return 0;
    }
  }
  return i != 0;
}

uint64_t DgnCollArray<unsigned int,WordList>::addArray(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 8);
  if (v2)
  {
    unint64_t v4 = result;
    unsigned int v5 = *(_DWORD *)(result + 16);
    if (v5)
    {
      int v6 = onePlusHighestSet32(v5);
      unsigned int v7 = *(_DWORD *)(v4 + 16);
      BOOL v8 = v6 * v2 > v7;
      int v2 = *(_DWORD *)(a2 + 8);
    }
    else
    {
      unsigned int v7 = 0;
      BOOL v8 = 1;
    }
    DgnCollArray<unsigned int,WordList>::preAllocate(v4, v2 + v7);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    DgnPrimArray<int>::copyArraySlice((unint64_t)&v23, (uint64_t *)a2, 0, *(_DWORD *)(a2 + 8));
    if (*(unsigned char *)v4)
    {
      unsigned __int16 v13 = *(_WORD *)(v4 + 2);
      long long v25 = *(_OWORD *)(v4 + 64);
      unsigned __int16 v26 = v13;
      mrec_qsort_r<WordList>(v23, v24, 4uLL, (CollMgr **)&v25, v9, v10, v11, v12);
      unsigned int v14 = *(unsigned __int16 *)(v4 + 2);
      if (v8) {
        DgnCollArray<unsigned int,WordList>::mergeLargeSortedArray(v4, &v23, v14);
      }
      else {
        DgnCollArray<unsigned int,WordList>::mergeSmallSortedArray(v4, &v23, v14);
      }
    }
    else
    {
      int v15 = *(_DWORD *)(a2 + 8);
      unsigned int v16 = *(_DWORD *)(v4 + 20);
      unsigned int v17 = *(_DWORD *)(v4 + 16) + v15;
      if (v17 > v16)
      {
        DgnPrimArray<unsigned int>::reallocElts(v4 + 8, v17 - v16, 1);
        int v15 = *(_DWORD *)(a2 + 8);
      }
      if (v15)
      {
        unint64_t v18 = 0;
        uint64_t v19 = *(void *)a2;
        uint64_t v20 = *(void *)(v4 + 8);
        do
        {
          *(_DWORD *)(v20 + 4 * (v18 + *(_DWORD *)(v4 + 16))) = *(_DWORD *)(v19 + 4 * v18);
          ++v18;
          unint64_t v21 = *(unsigned int *)(a2 + 8);
        }
        while (v18 < v21);
      }
      else
      {
        LODWORD(v21) = 0;
      }
      *(_DWORD *)(v4 + 16) += v21;
    }
    if (*(_DWORD *)(v4 + 32))
    {
      unsigned __int16 v22 = 0;
      do
      {
        if (*(void *)(*(void *)(v4 + 24) + 8 * v22))
        {
          long long v25 = *(_OWORD *)(v4 + 64);
          unsigned __int16 v26 = v22;
          mrec_qsort_r<WordList>(v23, v24, 4uLL, (CollMgr **)&v25, v9, v10, v11, v12);
          if (v8) {
            DgnCollArray<unsigned int,WordList>::mergeLargeSortedArray(v4, &v23, v22);
          }
          else {
            DgnCollArray<unsigned int,WordList>::mergeSmallSortedArray(v4, &v23, v22);
          }
        }
        ++v22;
      }
      while (*(_DWORD *)(v4 + 32) > v22);
    }
    return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v23);
  }
  return result;
}

void sub_213E0C684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t StateMgr::getBitWords(StateMgr *this, unsigned int a2)
{
  uint64_t result = *(void *)(*((void *)this + 2) + 8 * a2);
  if (!result)
  {
    uint64_t v4 = a2;
    uint64_t v5 = *(void *)this;
    unsigned int v6 = *(_DWORD *)(*((void *)this + 93) + 388);
    unsigned int v7 = MemChunkAlloc(0x10uLL, 0);
    BitArray::BitArray((BitArray *)v7, v6);
    BitArray::clearRange(v8, 0, *((_DWORD *)v8 + 2));
    uint64_t v9 = v5 + 80 * v4;
    int v11 = *(_DWORD *)(v9 + 16);
    uint64_t v10 = (unsigned int *)(v9 + 16);
    if (v11)
    {
      unint64_t v12 = 0;
      uint64_t v13 = *(void *)(v5 + 80 * v4 + 8);
      uint64_t v14 = *v7;
      do
      {
        *(_DWORD *)(v14 + (((unint64_t)*(unsigned int *)(v13 + 4 * v12) >> 3) & 0x1FFFFFFC)) |= 1 << *(_DWORD *)(v13 + 4 * v12);
        ++v12;
      }
      while (v12 < *v10);
    }
    *(void *)(*((void *)this + 2) + 8 * v4) = v7;
    return *(void *)(*((void *)this + 2) + 8 * v4);
  }
  return result;
}

void StateMgr::addWordIdArray(StateMgr *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a4;
  StateMgr::verifyState(a1, a2, a3, a4, a5, a6, a7, a8);
  unint64_t v12 = *(void *)a1 + 80 * a2;
  StateMgr::verifyState(a1, a2, v13, v14, v15, v16, v17, v18);
  DgnCollArray<unsigned int,WordList>::preAllocate(v12, *(_DWORD *)(a3 + 8) + *(_DWORD *)(*(void *)a1 + 80 * a2 + 16));
  StateMgr::addWordIdArrayNoPhones(a1, a2, a3, v8, v19, v20, v21, v22);

  StateMgr::addPrimitiveBegPhonesArray(a1, a2, (uint64_t *)a3);
}

unint64_t DgnCollArray<unsigned int,WordList>::preAllocate(unint64_t result, unsigned int a2)
{
  unint64_t v3 = result;
  unsigned int v4 = *(_DWORD *)(result + 20);
  BOOL v5 = a2 >= v4;
  uint64_t v6 = a2 - v4;
  if (v6 != 0 && v5) {
    uint64_t result = DgnPrimArray<unsigned int>::reallocElts(result + 8, v6, 0);
  }
  unint64_t v7 = *(unsigned int *)(v3 + 32);
  if (v7)
  {
    for (unint64_t i = 0; i < v7; ++i)
    {
      uint64_t result = *(void *)(*(void *)(v3 + 24) + 8 * i);
      if (result)
      {
        unsigned int v9 = *(_DWORD *)(result + 12);
        if (a2 > v9)
        {
          uint64_t result = DgnPrimArray<unsigned int>::reallocElts(result, a2 - v9, 0);
          unint64_t v7 = *(unsigned int *)(v3 + 32);
        }
      }
    }
  }
  return result;
}

void StateMgr::addWordIdsToStatesWithId(StateMgr *this, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 180))
  {
    unint64_t v11 = 0;
    do
    {
      if (*(unsigned char *)(*((void *)this + 68) + v11))
      {
        if (StateMgr::isWordIdInState(this, v11, a3, 0, a5, a6, a7, a8)) {
          StateMgr::addWordIdArray(this, v11, a2, 0, a5, a6, a7, a8);
        }
      }
      ++v11;
    }
    while (v11 < *((unsigned int *)this + 180));
  }
}

uint64_t DgnCollArray<unsigned int,WordList>::remove(uint64_t result, int a2)
{
  unint64_t v2 = *(unsigned int *)(result + 16);
  if (*(unsigned char *)result)
  {
    if (v2)
    {
      unint64_t v3 = 0;
      uint64_t v4 = *(void *)(result + 8);
      while (*(_DWORD *)(v4 + 4 * v3) != a2)
      {
        if (v2 == ++v3) {
          goto LABEL_6;
        }
      }
      LODWORD(v2) = v2 - 1;
      if (v2 > v3)
      {
        do
        {
          *(_DWORD *)(v4 + 4 * v3) = *(_DWORD *)(v4 + 4 * v3 + 4);
          unint64_t v2 = (*(_DWORD *)(result + 16) - 1);
          ++v3;
        }
        while (v3 < v2);
      }
    }
    else
    {
LABEL_6:
      LODWORD(v2) = v2 - 1;
    }
  }
  else
  {
    if (!v2) {
      goto LABEL_17;
    }
    uint64_t v5 = *(unsigned int *)(result + 16);
    uint64_t v6 = *(_DWORD **)(result + 8);
    while (*v6 != a2)
    {
      ++v6;
      if (!--v5) {
        goto LABEL_17;
      }
    }
    LODWORD(v2) = v2 - 1;
    *uint64_t v6 = *(_DWORD *)(*(void *)(result + 8) + 4 * v2);
  }
  *(_DWORD *)(result + 16) = v2;
LABEL_17:
  unsigned int v7 = *(_DWORD *)(result + 32);
  if (v7)
  {
    unsigned __int16 v8 = 0;
    uint64_t v9 = *(void *)(result + 24);
    do
    {
      uint64_t v10 = *(uint64_t **)(v9 + 8 * v8);
      if (v10)
      {
        unint64_t v11 = *((unsigned int *)v10 + 2);
        if (v11)
        {
          unint64_t v12 = 0;
          uint64_t v13 = *v10;
          while (*(_DWORD *)(v13 + 4 * v12) != a2)
          {
            if (v11 == ++v12) {
              goto LABEL_24;
            }
          }
          LODWORD(v11) = v11 - 1;
          if (v11 > v12)
          {
            do
            {
              *(_DWORD *)(v13 + 4 * v12) = *(_DWORD *)(v13 + 4 * v12 + 4);
              unint64_t v11 = (*((_DWORD *)v10 + 2) - 1);
              ++v12;
            }
            while (v12 < v11);
            unsigned int v7 = *(_DWORD *)(result + 32);
          }
        }
        else
        {
LABEL_24:
          LODWORD(v11) = v11 - 1;
        }
        *((_DWORD *)v10 + 2) = v11;
      }
      ++v8;
    }
    while (v7 > v8);
  }
  return result;
}

uint64_t StateMgr::deleteWordIdArrayNoPhones(StateMgr *this, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10 = a2;
  uint64_t v12 = a2;
  if (*(_WORD *)(*((void *)this + 24) + 2 * a2)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 2149, (uint64_t)"voc/statemgr", 13, (uint64_t)"%.500s %d %.500s %d", a7, a8, (char)"word");
  }
  if (*(_WORD *)(*((void *)this + 26) + 2 * v12)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 2152, (uint64_t)"voc/statemgr", 13, (uint64_t)"%.500s %d %.500s %d", a7, a8, (char)"word");
  }
  if (*(_DWORD *)(a3 + 8))
  {
    unint64_t v13 = 0;
    unsigned int v33 = v10;
    do
    {
      unint64_t v14 = *(unsigned int *)(*(void *)a3 + 4 * v13);
      if (!StateMgr::isWordIdInState(this, v10, *(_DWORD *)(*(void *)a3 + 4 * v13), a4, a5, a6, a7, a8)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 2163, (uint64_t)"voc/statemgr", 4, (uint64_t)"%u %u", v15, v16, v14);
      }
      if (*(_WORD *)(*((void *)this + 20) + 2 * v12)
        && WordList::getIncludingLatticeRefCount(*(WordList **)(*((void *)this + 92) + 48), v14))
      {
        WordList::getIncludingLatticeRefCount(*(WordList **)(*((void *)this + 92) + 48), v14);
        unsigned int v10 = v33;
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 2170, (uint64_t)"voc/statemgr", 14, (uint64_t)"%.500s %d %d %d %d", v17, v18, (char)"word");
      }
      if (a4)
      {
        unsigned int ItemPairEnvId = EnvMgr::getItemPairEnvId(*((EnvMgr **)this + 95), v10, v14);
        if (ItemPairEnvId)
        {
          EnvMgr::killEnv(*((EnvMgr **)this + 95), ItemPairEnvId, v20, v21, v22, v23, v24, v25);
          EnvMgr::setItemPairEnvId(*((EnvMgr **)this + 95), v10, v14, 0, v26, v27, v28, v29);
        }
      }
      WordList::removeIncludingStateRef(*((void *)this + 93), v14);
      uint64_t v30 = *(void **)(*((void *)this + 2) + 8 * v12);
      if (v30) {
        *(_DWORD *)(*v30 + ((v14 >> 3) & 0x1FFFFFFC)) &= ~(1 << v14);
      }
      ++v13;
    }
    while (v13 < *(unsigned int *)(a3 + 8));
  }
  uint64_t v31 = *(void *)this + 80 * v12;

  return DgnCollArray<unsigned int,WordList>::removeArray(v31, a3);
}

uint64_t DgnCollArray<unsigned int,WordList>::removeArray(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 8);
  if (v2)
  {
    uint64_t v4 = result;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    DgnPrimArray<int>::copyArraySlice((unint64_t)&v18, (uint64_t *)a2, 0, v2);
    if (*(unsigned char *)v4)
    {
      unsigned __int16 v9 = *(_WORD *)(v4 + 2);
      long long v20 = *(_OWORD *)(v4 + 64);
      unsigned __int16 v21 = v9;
      mrec_qsort_r<WordList>(v18, v19, 4uLL, (CollMgr **)&v20, v5, v6, v7, v8);
      DgnCollArray<unsigned int,WordList>::removeSortedArray(v4, (uint64_t)&v18, *(unsigned __int16 *)(v4 + 2));
    }
    else
    {
      unint64_t v10 = *(unsigned int *)(a2 + 8);
      if (v10)
      {
        unint64_t v11 = 0;
        uint64_t v12 = *(void *)a2;
        unsigned int v13 = *(_DWORD *)(v4 + 16);
        do
        {
          if (v13)
          {
            uint64_t v14 = v13;
            uint64_t v15 = *(_DWORD **)(v4 + 8);
            while (*v15 != *(_DWORD *)(v12 + 4 * v11))
            {
              ++v15;
              if (!--v14) {
                goto LABEL_12;
              }
            }
            _DWORD *v15 = *(_DWORD *)(*(void *)(v4 + 8) + 4 * --v13);
            *(_DWORD *)(v4 + 16) = v13;
            unint64_t v10 = *(unsigned int *)(a2 + 8);
          }
LABEL_12:
          ++v11;
        }
        while (v11 < v10);
      }
    }
    unsigned int v16 = *(_DWORD *)(v4 + 32);
    if (v16)
    {
      for (unsigned __int16 i = 0; i < v16; ++i)
      {
        if (*(void *)(*(void *)(v4 + 24) + 8 * i))
        {
          long long v20 = *(_OWORD *)(v4 + 64);
          unsigned __int16 v21 = i;
          mrec_qsort_r<WordList>(v18, v19, 4uLL, (CollMgr **)&v20, v5, v6, v7, v8);
          DgnCollArray<unsigned int,WordList>::removeSortedArray(v4, (uint64_t)&v18, i);
          unsigned int v16 = *(_DWORD *)(v4 + 32);
        }
      }
    }
    return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v18);
  }
  return result;
}

void sub_213E0CE34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void StateMgr::deleteWordIdArray(StateMgr *a1, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StateMgr::deleteWordIdArrayNoPhones(a1, a2, a3, a4, a5, a6, a7, a8);
  StateMgr::verifyState(a1, a2, v10, v11, v12, v13, v14, v15);
  if (*(_DWORD *)(*(void *)a1 + 80 * a2 + 16) <= 5u)
  {
    StateMgr::recomputePrimitiveBegPhones(a1, a2);
  }
}

void StateMgr::deleteWordIdsFromStatesWithId(StateMgr *this, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 180))
  {
    unint64_t v11 = 0;
    do
    {
      if (*(unsigned char *)(*((void *)this + 68) + v11))
      {
        if (StateMgr::isWordIdInState(this, v11, a3, 0, a5, a6, a7, a8)) {
          StateMgr::deleteWordIdArray(this, v11, a2, 0, a5, a6, a7, a8);
        }
      }
      ++v11;
    }
    while (v11 < *((unsigned int *)this + 180));
  }
}

BOOL StateMgr::getEndOfUtteranceAllowed(StateMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return *(unsigned char *)(*((void *)this + 4) + a2) != 0;
}

BOOL StateMgr::isStateInRule(StateMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a3;
  StateMgr::verifyVisible(this, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v11 = *((void *)this + 10);
  uint64_t v12 = *(unsigned int *)(v11 + 16 * a2 + 8);
  if (!v12) {
    return 0;
  }
  uint64_t v13 = *(unsigned __int16 **)(v11 + 16 * a2);
  for (uint64_t i = 0xFFFFFFFFLL; ; --i)
  {
    int v15 = *v13++;
    if (v15 == v8) {
      break;
    }
    if (!--v12) {
      return 0;
    }
  }
  return i != 0;
}

unint64_t StateMgr::includeStateInRule(unint64_t this, unsigned int a2, __int16 a3)
{
  uint64_t v4 = *(void *)(this + 80) + 16 * a2;
  uint64_t v6 = (unsigned int *)(v4 + 8);
  unsigned int v5 = *(_DWORD *)(v4 + 8);
  if (v5 == *(_DWORD *)(v4 + 12))
  {
    this = DgnPrimArray<short>::reallocElts(*(void *)(this + 80) + 16 * a2, 1, 1);
    unsigned int v5 = *v6;
  }
  *(_WORD *)(*(void *)v4 + 2 * v5) = a3;
  *uint64_t v6 = v5 + 1;
  return this;
}

uint64_t StateMgr::unincludeStateInRule(uint64_t this, unsigned int a2, int a3)
{
  uint64_t v3 = *(void *)(this + 80);
  uint64_t v4 = v3 + 16 * a2;
  unsigned int v7 = *(_DWORD *)(v4 + 8);
  unsigned int v5 = (_DWORD *)(v4 + 8);
  uint64_t v6 = v7;
  if (v7)
  {
    int v8 = *(_WORD **)(v3 + 16 * a2);
    uint64_t v9 = v6;
    for (uint64_t i = v8; (unsigned __int16)*i != a3; ++i)
    {
      if (!--v9) {
        return this;
      }
    }
    int v11 = v6 - 1;
    *uint64_t i = v8[v11];
    *unsigned int v5 = v11;
  }
  return this;
}

void StateMgr::getWordsWithPrefix(StateMgr *a1, unsigned int a2, uint64_t a3, char *a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StateMgr::verifyVisible(a1, a2, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
  DgnCollArray<unsigned int,WordList>::checkCollIdExposed(*(void *)a1 + 80 * a2, a3, v15, v16, v17, v18, v19, v20);
  uint64_t v22 = *(void *)a1;
  if (a3 == 0xFFFF || *(unsigned char *)(v22 + 80 * a2) && *(unsigned __int16 *)(v22 + 80 * a2 + 2) == a3) {
    uint64_t v23 = v22 + 80 * a2 + 8;
  }
  else {
    uint64_t v23 = *(void *)(*(void *)(v22 + 80 * a2 + 24) + 8 * a3);
  }
  uint64_t v24 = *((void *)a1 + 93);

  WordList::getWordsWithPrefix(v24, v23, a3, a4, a5, a6, a7, v21);
}

uint64_t StateMgr::getCollWords(StateMgr *this, unsigned int a2, unsigned int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StateMgr::verifyStateFull(this, a2, a4, 0, a5, a6, a7, a8);
  uint64_t v11 = *(void *)this;
  if (a3 == 0xFFFF || *(unsigned char *)(v11 + 80 * a2) && *(unsigned __int16 *)(v11 + 80 * a2 + 2) == a3) {
    return v11 + 80 * a2 + 8;
  }
  else {
    return *(void *)(*(void *)(v11 + 80 * a2 + 24) + 8 * a3);
  }
}

uint64_t StateMgr::getColls(StateMgr *this, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return *(void *)this + 80 * a2 + 40;
}

uint64_t DgnCollArray<unsigned int,WordList>::setColls(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = (uint64_t *)(result + 40);
  if (result + 40 == a2)
  {
    unsigned int v4 = *(_DWORD *)(a2 + 8);
    goto LABEL_8;
  }
  unsigned int v4 = *(_DWORD *)(a2 + 8);
  if (*(_DWORD *)(result + 48) != v4)
  {
LABEL_8:
    DgnPrimArray<unsigned short>::copyArraySlice(result + 40, (uint64_t *)a2, 0, v4);
    uint64_t result = DgnCollArray<unsigned int,ParamSetIdCollCmpWithTemp>::wipeOtherArrays(v2);
    if (!*(unsigned char *)v2 || !*(unsigned char *)(v2 + 4)) {
      *(unsigned char *)uint64_t v2 = 0;
    }
    *(unsigned char *)(v2 + 5) = 0;
    int v14 = *(_DWORD *)(v2 + 48);
    if (!v14) {
      return result;
    }
    if (v14 != 1)
    {
      unint64_t v15 = 0;
      int v16 = 1;
      do
      {
        uint64_t v17 = *(void *)(v2 + 40);
        unsigned int v18 = *(unsigned __int16 *)(v17 + 2 * v15);
        if (*(unsigned char *)v2 && v18 == *(unsigned __int16 *)(v2 + 2))
        {
          if (v18 == 65534)
          {
            int v16 = 0;
            *(unsigned char *)(v2 + 5) = 1;
          }
        }
        else
        {
          if (v18 == 65534)
          {
            int v16 = 0;
            *(unsigned char *)uint64_t v2 = 1;
            *(_DWORD *)(v2 + 2) = 16842750;
          }
          else
          {
            unsigned int v19 = *(_DWORD *)(v2 + 32);
            if (v19 <= v18)
            {
              int v20 = v18 - v19 + 1;
              do
              {
                if (v19 == *(_DWORD *)(v2 + 36))
                {
                  DgnPrimArray<unsigned long long>::reallocElts(v2 + 24, 1, 1);
                  unsigned int v19 = *(_DWORD *)(v2 + 32);
                }
                *(void *)(*(void *)(v2 + 24) + 8 * v19++) = 0;
                *(_DWORD *)(v2 + 32) = v19;
                --v20;
              }
              while (v20);
            }
            uint64_t v21 = MemChunkAlloc(0x10uLL, 0);
            *uint64_t v21 = 0;
            v21[1] = 0;
            *(void *)(*(void *)(v2 + 24) + 8 * *(unsigned __int16 *)(*(void *)(v2 + 40) + 2 * v15)) = v21;
            DgnPrimArray<int>::copyArraySlice(*(void *)(*(void *)(v2 + 24) + 8 * *(unsigned __int16 *)(*(void *)(v2 + 40) + 2 * v15)), (uint64_t *)(v2 + 8), 0, *(_DWORD *)(v2 + 16));
            uint64_t v17 = *(void *)(v2 + 40);
          }
          uint64_t result = DgnCollArray<unsigned int,WordList>::sortCollation(v2, *(unsigned __int16 *)(v17 + 2 * v15), v8, v9, v10, v11, v12, v13);
          int v14 = *(_DWORD *)(v2 + 48);
        }
        ++v15;
      }
      while (v15 < (v14 - v16));
      if (v16 != 1) {
        return result;
      }
    }
    uint64_t v22 = (v14 - 1);
    if (*(unsigned char *)v2)
    {
      uint64_t v23 = *(void *)(v2 + 40);
      if (*(unsigned char *)(v2 + 4))
      {
        unsigned int v24 = *(unsigned __int16 *)(v23 + 2 * v22);
        if (v24 == 65534)
        {
          *(unsigned char *)(v2 + 5) = 1;
          return result;
        }
        unsigned int v25 = *(_DWORD *)(v2 + 32);
        if (v25 <= v24)
        {
          int v26 = v24 - v25 + 1;
          do
          {
            if (v25 == *(_DWORD *)(v2 + 36))
            {
              DgnPrimArray<unsigned long long>::reallocElts(v2 + 24, 1, 1);
              unsigned int v25 = *(_DWORD *)(v2 + 32);
            }
            *(void *)(*(void *)(v2 + 24) + 8 * v25++) = 0;
            *(_DWORD *)(v2 + 32) = v25;
            --v26;
          }
          while (v26);
        }
        uint64_t v27 = MemChunkAlloc(0x10uLL, 0);
        uint64_t *v27 = 0;
        v27[1] = 0;
        *(void *)(*(void *)(v2 + 24) + 8 * *(unsigned __int16 *)(*(void *)(v2 + 40) + 2 * v22)) = v27;
        DgnPrimArray<int>::copyArraySlice(*(void *)(*(void *)(v2 + 24) + 8 * *(unsigned __int16 *)(*(void *)(v2 + 40) + 2 * v22)), (uint64_t *)(v2 + 8), 0, *(_DWORD *)(v2 + 16));
        uint64_t v23 = *(void *)(v2 + 40);
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v23 = *v3;
    }
    *(unsigned char *)uint64_t v2 = 1;
    *(_WORD *)(v2 + 4) = 256;
    *(_WORD *)(v2 + 2) = *(_WORD *)(v23 + 2 * v22);
LABEL_42:
    unsigned int v28 = *(unsigned __int16 *)(v23 + 2 * v22);
    return DgnCollArray<unsigned int,WordList>::sortCollation(v2, v28, v8, v9, v10, v11, v12, v13);
  }
  uint64_t v5 = *(unsigned int *)(result + 48);
  while ((int)v5 >= 1)
  {
    uint64_t v6 = *v3 + 2 * v5;
    int v7 = *(unsigned __int16 *)(*(void *)a2 - 2 + 2 * v5--);
    if (*(unsigned __int16 *)(v6 - 2) != v7)
    {
      unsigned int v4 = *(_DWORD *)(result + 48);
      goto LABEL_8;
    }
  }
  return result;
}

void StateMgr::setLMAllowed(StateMgr *this, uint64_t a2, char a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StateMgr::verifyStateFull(this, a2, a4, 0, a5, a6, a7, a8);
  *(unsigned char *)(*((void *)this + 38) + a2) = a3;
  if (*(_DWORD *)(*((void *)this + 10) + 16 * a2 + 8))
  {
    uint64_t v17 = *(RuleMgr **)(*((void *)this + 92) + 64);
    RuleMgr::alteredStateInRule(v17, a2, v11, v12, v13, v14, v15, v16);
  }
}

BOOL StateMgr::getLMAllowed(StateMgr *this, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return *(unsigned char *)(*((void *)this + 38) + a2) != 0;
}

void StateMgr::setPrecedingNonAcousticWordRequired(StateMgr *this, uint64_t a2, char a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StateMgr::verifyStateFull(this, a2, a4, 0, a5, a6, a7, a8);
  if (a3)
  {
    uint64_t v17 = a2;
    if (!*(_DWORD *)(*((void *)this + 64) + 4 * a2)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 2468, (uint64_t)"voc/statemgr", 36, (uint64_t)"%u", v15, v16, a2);
    }
  }
  else
  {
    uint64_t v17 = a2;
  }
  *(unsigned char *)(*((void *)this + 60) + v17) = a3;
  if (*(_DWORD *)(*((void *)this + 10) + 16 * v17 + 8))
  {
    unsigned int v18 = *(RuleMgr **)(*((void *)this + 92) + 64);
    RuleMgr::alteredStateInRule(v18, a2, v11, v12, v13, v14, v15, v16);
  }
}

uint64_t StateMgr::getPrecedingNonAcousticWordState(StateMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return *(unsigned int *)(*((void *)this + 64) + 4 * a2);
}

BOOL StateMgr::getPrecedingNonAcousticWordRequired(StateMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return *(unsigned char *)(*((void *)this + 60) + a2) != 0;
}

void StateMgr::setPrefilteringAllowed(StateMgr *this, uint64_t a2, char a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StateMgr::verifyStateFull(this, a2, a4, 0, a5, a6, a7, a8);
  uint64_t v17 = *((void *)this + 58);
  int v18 = *(unsigned __int8 *)(v17 + a2);
  *(unsigned char *)(v17 + a2) = a3;
  if (*((unsigned char *)this + 696)) {
    BOOL v19 = 1;
  }
  else {
    BOOL v19 = v18 == *(unsigned __int8 *)(*((void *)this + 58) + a2);
  }
  if (!v19) {
    StateMgr::changeRecursivePrefilteringAllowed(this, a2);
  }
  if (*(_DWORD *)(*((void *)this + 10) + 16 * a2 + 8))
  {
    int v20 = *(RuleMgr **)(*((void *)this + 92) + 64);
    RuleMgr::alteredStateInRule(v20, a2, v11, v12, v13, v14, v15, v16);
  }
}

BOOL StateMgr::getPrefilteringAllowed(StateMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return *(unsigned char *)(*((void *)this + 58) + a2) != 0;
}

void StateMgr::setCoartAllowed(StateMgr *this, uint64_t a2, char a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StateMgr::verifyStateFull(this, a2, a4, 0, a5, a6, a7, a8);
  *(unsigned char *)(*((void *)this + 40) + a2) = a3;
  if (*(_DWORD *)(*((void *)this + 10) + 16 * a2 + 8))
  {
    uint64_t v17 = *(RuleMgr **)(*((void *)this + 92) + 64);
    RuleMgr::alteredStateInRule(v17, a2, v11, v12, v13, v14, v15, v16);
  }
}

BOOL StateMgr::getCoartAllowed(StateMgr *this, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return *(unsigned char *)(*((void *)this + 40) + a2) != 0;
}

void StateMgr::setSkipAllowed(StateMgr *this, unsigned int a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StateMgr::verifyStateFull(this, a2, a4, 0, a5, a6, a7, a8);
  if ((*(_DWORD *)(*((void *)this + 76) + 16 * a2 + 8) || *(_DWORD *)(*((void *)this + 28) + 16 * a2 + 8))
    && *(unsigned __int8 *)(*((void *)this + 44) + a2) != *(unsigned __int8 *)(*((void *)this + 46) + a2))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 2550, (uint64_t)"voc/statemgr", 24, (uint64_t)"%s", v11, v12, (char)&errStr_voc_statemgr_E_SKIPPABLE_WB_MISMATCH);
  }
  *(unsigned char *)(*((void *)this + 42) + a2) = a3;
  if (a3)
  {
    VocMgr::beginRuleStateRecursiveOperation((uint64_t *)VocMgr::smpVocMgr);
    StateMgr::verifyStateNotInAllSkippableLoop((unint64_t)this, a2, a2, v13, v14, v15, v16, v17);
    int v18 = (VocMgr *)VocMgr::smpVocMgr;
    VocMgr::endRuleStateRecursiveOperation(v18);
  }
}

unint64_t StateMgr::verifyStateNotInAllSkippableLoop(unint64_t this, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(this + 624);
  if (!*(unsigned char *)(v8 + a2))
  {
    uint64_t v11 = this;
    uint64_t v12 = a2;
    *(unsigned char *)(v8 + a2) = 1;
    unsigned int v13 = *(_DWORD *)(this + 648);
    if (v13 == *(_DWORD *)(this + 652))
    {
      this = DgnPrimArray<unsigned int>::reallocElts(this + 640, 1, 1);
      unsigned int v13 = *(_DWORD *)(v11 + 648);
    }
    *(_DWORD *)(*(void *)(v11 + 640) + 4 * v13) = a2;
    ++*(_DWORD *)(v11 + 648);
    if (*(unsigned char *)(*(void *)(v11 + 336) + v12))
    {
      uint64_t v14 = *(void *)(v11 + 224);
      if (*(_DWORD *)(v14 + 16 * v12 + 8))
      {
        unint64_t v15 = 0;
        do
        {
          unsigned int v16 = *(_DWORD *)(*(void *)(v14 + 16 * v12) + 4 * v15);
          if (v16 == a3)
          {
            errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 2757, (uint64_t)"voc/statemgr", 23, (uint64_t)"%d %d", a7, a8, a3);
            unsigned int v16 = *(_DWORD *)(*(void *)(*(void *)(v11 + 224) + 16 * v12) + 4 * v15);
          }
          this = StateMgr::verifyStateNotInAllSkippableLoop((StateMgr *)v11, v16, a3);
          ++v15;
          uint64_t v14 = *(void *)(v11 + 224);
        }
        while (v15 < *(unsigned int *)(v14 + 16 * v12 + 8));
      }
    }
  }
  return this;
}

BOOL StateMgr::getSkipAllowed(StateMgr *this, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return *(unsigned char *)(*((void *)this + 42) + a2) != 0;
}

void StateMgr::setLeftWBAllowed(StateMgr *this, unsigned int a2, char a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StateMgr::verifyStateFull(this, a2, a4, 0, a5, a6, a7, a8);
  if (*(_DWORD *)(*((void *)this + 10) + 16 * a2 + 8)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 2577, (uint64_t)"voc/statemgr", 12, (uint64_t)"%.500s %d %.500s %d %d", v11, v12, (char)"setLeftWBAllowed");
  }
  if (*(_DWORD *)(*((void *)this + 76) + 16 * a2 + 8))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 2581, (uint64_t)"voc/statemgr", 12, (uint64_t)"%.500s %d %.500s %d %d", v11, v12, (char)"setLeftWBAllowed");
    if (*(_DWORD *)(*((void *)this + 76) + 16 * a2 + 8)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 2585, (uint64_t)"voc/statemgr", 12, (uint64_t)"%.500s %d %.500s %d %d", v13, v14, (char)"setLeftWBAllowed");
    }
  }
  *(unsigned char *)(*((void *)this + 44) + a2) = a3;
}

BOOL StateMgr::getLeftWBAllowed(StateMgr *this, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return *(unsigned char *)(*((void *)this + 44) + a2) != 0;
}

void StateMgr::setRightWBAllowed(StateMgr *this, unsigned int a2, char a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StateMgr::verifyStateFull(this, a2, a4, 0, a5, a6, a7, a8);
  if (*(_DWORD *)(*((void *)this + 10) + 16 * a2 + 8)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 2606, (uint64_t)"voc/statemgr", 12, (uint64_t)"%.500s %d %.500s %d %d", v11, v12, (char)"setRightWBAllowed");
  }
  if (*(_DWORD *)(*((void *)this + 76) + 16 * a2 + 8))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 2610, (uint64_t)"voc/statemgr", 12, (uint64_t)"%.500s %d %.500s %d %d", v11, v12, (char)"setRightWBAllowed");
    if (*(_DWORD *)(*((void *)this + 76) + 16 * a2 + 8)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 2614, (uint64_t)"voc/statemgr", 12, (uint64_t)"%.500s %d %.500s %d %d", v13, v14, (char)"setRightWBAllowed");
    }
  }
  *(unsigned char *)(*((void *)this + 46) + a2) = a3;
}

BOOL StateMgr::getRightWBAllowed(StateMgr *this, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return *(unsigned char *)(*((void *)this + 46) + a2) != 0;
}

void StateMgr::setCollapsible(StateMgr *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8 = a3;
  StateMgr::verifyState(this, a2, a3, a4, a5, a6, a7, a8);
  *(unsigned char *)(*((void *)this + 48) + a2) = v8;
  if (*(_DWORD *)(*((void *)this + 10) + 16 * a2 + 8))
  {
    uint64_t v17 = *(RuleMgr **)(*((void *)this + 92) + 64);
    RuleMgr::alteredStateInRule(v17, a2, v11, v12, v13, v14, v15, v16);
  }
}

BOOL StateMgr::getCollapsible(StateMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return *(unsigned char *)(*((void *)this + 48) + a2) != 0;
}

void StateMgr::setTimeConstraint(StateMgr *this, unsigned int a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a6;
  unsigned int v9 = a5;
  StateMgr::verifyStateFull(this, a2, 1, 0, a5, a6, a7, a8);
  if (a3 != -1 && a3 > a4) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 2659, (uint64_t)"voc/statemgr", 34, (uint64_t)"%u %.500s %u %.500s %u", v14, v15, a2);
  }
  if (v9 != -1 && v9 > v8) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 2666, (uint64_t)"voc/statemgr", 34, (uint64_t)"%u %.500s %u %.500s %u", v14, v15, a2);
  }
  if (a3 != -1 && v8 != -1 && a3 >= v8) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 2673, (uint64_t)"voc/statemgr", 34, (uint64_t)"%u %.500s %u %.500s %u", v14, v15, a2);
  }
  *(_DWORD *)(*((void *)this + 50) + 4 * a2) = a3;
  *(_DWORD *)(*((void *)this + 52) + 4 * a2) = a4;
  *(_DWORD *)(*((void *)this + 54) + 4 * a2) = v9;
  *(_DWORD *)(*((void *)this + 56) + 4 * a2) = v8;
}

void StateMgr::getTimeConstraint(StateMgr *this, unsigned int a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6, uint64_t a7, uint64_t a8)
{
  *a3 = *(_DWORD *)(*((void *)this + 50) + 4 * a2);
  *a4 = *(_DWORD *)(*((void *)this + 52) + 4 * a2);
  *a5 = *(_DWORD *)(*((void *)this + 54) + 4 * a2);
  *a6 = *(_DWORD *)(*((void *)this + 56) + 4 * a2);
}

uint64_t StateMgr::getIncludingRules(StateMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return *((void *)this + 10) + 16 * a2;
}

void StateMgr::addChildRule(StateMgr *this, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  StateMgr::verifyStateFull(this, a2, 1, 1, a5, a6, a7, a8);
  uint64_t v11 = *((void *)this + 18);
  uint64_t v12 = v11 + 16 * a2;
  uint64_t v14 = (unsigned int *)(v12 + 8);
  unsigned int v13 = *(_DWORD *)(v12 + 8);
  if (!v13) {
    goto LABEL_7;
  }
  uint64_t v15 = *(unsigned __int16 **)v12;
  uint64_t v16 = 0xFFFFFFFFLL;
  uint64_t v17 = *(unsigned int *)(v12 + 8);
  while (1)
  {
    int v18 = *v15++;
    if (v18 == a3) {
      break;
    }
    --v16;
    if (!--v17) {
      goto LABEL_7;
    }
  }
  if (!v16)
  {
LABEL_7:
    if (v13 == *(_DWORD *)(v11 + 16 * a2 + 12))
    {
      DgnPrimArray<short>::reallocElts(v12, 1, 1);
      unsigned int v13 = *v14;
    }
    *(_WORD *)(*(void *)v12 + 2 * v13) = a3;
    *uint64_t v14 = v13 + 1;
  }
}

uint64_t StateMgr::getChildRuleCount(StateMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return *(unsigned int *)(*((void *)this + 18) + 16 * a2 + 8);
}

uint64_t StateMgr::getChildRules(StateMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return *((void *)this + 18) + 16 * a2;
}

double StateMgr::endRecursiveOperation(StateMgr *this)
{
  if (*((_DWORD *)this + 162))
  {
    unint64_t v2 = 0;
    do
      *(unsigned char *)(*((void *)this + 78) + *(unsigned int *)(*((void *)this + 80) + 4 * v2++)) = 0;
    while (v2 < *((unsigned int *)this + 162));
  }
  uint64_t v3 = (void *)*((void *)this + 80);
  if (v3)
  {
    MemChunkFree(v3, 0);
    *((void *)this + 80) = 0;
  }
  double result = 0.0;
  *((void *)this + 81) = 0;
  return result;
}

uint64_t StateMgr::getChildStates(StateMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return *((void *)this + 16) + 16 * a2;
}

unint64_t StateMgr::addAliasingStateRef(unint64_t this, unsigned int a2, int a3)
{
  uint64_t v4 = *(void *)(this + 576) + 16 * a2;
  uint64_t v6 = (unsigned int *)(v4 + 8);
  unsigned int v5 = *(_DWORD *)(v4 + 8);
  if (v5 == *(_DWORD *)(v4 + 12))
  {
    this = DgnPrimArray<unsigned int>::reallocElts(*(void *)(this + 576) + 16 * a2, 1, 1);
    unsigned int v5 = *v6;
  }
  *(_DWORD *)(*(void *)v4 + 4 * v5) = a3;
  ++*v6;
  return this;
}

unint64_t StateMgr::addTransitioningStateRef(unint64_t this, unsigned int a2, int a3)
{
  uint64_t v4 = *(void *)(this + 608) + 16 * a2;
  uint64_t v6 = (unsigned int *)(v4 + 8);
  unsigned int v5 = *(_DWORD *)(v4 + 8);
  if (v5 == *(_DWORD *)(v4 + 12))
  {
    this = DgnPrimArray<unsigned int>::reallocElts(*(void *)(this + 608) + 16 * a2, 1, 1);
    unsigned int v5 = *v6;
  }
  *(_DWORD *)(*(void *)v4 + 4 * v5) = a3;
  ++*v6;
  return this;
}

uint64_t StateMgr::getStateTransitionNumParseTokens(StateMgr *this, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return *((void *)this + 30) + 16 * a2;
}

uint64_t StateMgr::getStateTransitionParseTokens(StateMgr *this, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return *((void *)this + 32) + 16 * a2;
}

void StateMgr::fastEmptyTransitionsForKill(uint64_t a1, uint64_t a2)
{
  BitArray::BitArray((BitArray *)v39, *(_DWORD *)(a1 + 720));
  if (*(_DWORD *)(a2 + 8))
  {
    unint64_t v8 = 0;
    do
    {
      unint64_t v9 = *(unsigned int *)(*(void *)a2 + 4 * v8);
      *(_DWORD *)(v39[0] + ((v9 >> 3) & 0x1FFFFFFC)) |= 1 << v9;
      StateMgr::verifyStateFull((StateMgr *)a1, v9, 0, 0, v4, v5, v6, v7);
      if (*(_WORD *)(*(void *)(a1 + 160) + 2 * v9)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 3037, (uint64_t)"voc/statemgr", 13, (uint64_t)"%.500s %d %.500s %d", v6, v7, (char)"fastEmptyTransitionsForKill");
      }
      if (*(_WORD *)(*(void *)(a1 + 192) + 2 * v9)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 3040, (uint64_t)"voc/statemgr", 13, (uint64_t)"%.500s %d %.500s %d", v6, v7, (char)"fastEmptyTransitionsForKill");
      }
      if (*(_WORD *)(*(void *)(a1 + 208) + 2 * v9)) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 3043, (uint64_t)"voc/statemgr", 13, (uint64_t)"%.500s %d %.500s %d", v6, v7, (char)"fastEmptyTransitionsForKill");
      }
      if (!*(unsigned char *)(a1 + 696)
        && !*(unsigned char *)(*(void *)(a1 + 464) + v9)
        && *(unsigned char *)(*(void *)(a1 + 680) + v9) == 1
        && !StateMgr::allTransitioningStatesHavePA((StateMgr *)a1, v9))
      {
        *(unsigned char *)(a1 + 696) = 1;
      }
      ++v8;
      unint64_t v10 = *(unsigned int *)(a2 + 8);
    }
    while (v8 < v10);
    if (v10)
    {
      unint64_t v11 = 0;
      do
      {
        uint64_t v12 = *(unsigned int *)(*(void *)a2 + 4 * v11);
        uint64_t v13 = *(void *)(a1 + 224) + 16 * v12;
        uint64_t v15 = (void *)(v13 + 8);
        unint64_t v14 = *(unsigned int *)(v13 + 8);
        if (*(_DWORD *)(v13 + 8))
        {
          unint64_t v16 = 0;
          uint64_t v17 = *(void *)v13;
          uint64_t v18 = v39[0];
          do
          {
            unint64_t v19 = *(unsigned int *)(v17 + 4 * v16);
            if (((*(_DWORD *)(v18 + ((v19 >> 3) & 0x1FFFFFFC)) >> v19) & 1) == 0)
            {
              uint64_t v20 = *(void *)(a1 + 608);
              uint64_t v21 = v20 + 16 * v19;
              unsigned int v24 = *(_DWORD *)(v21 + 8);
              uint64_t v22 = (_DWORD *)(v21 + 8);
              uint64_t v23 = v24;
              if (v24)
              {
                unsigned int v25 = *(_DWORD **)(v20 + 16 * v19);
                uint64_t v26 = v23;
                uint64_t v27 = v25;
                while (*v27 != v12)
                {
                  ++v27;
                  if (!--v26) {
                    goto LABEL_20;
                  }
                }
                _DWORD *v27 = v25[(v23 - 1)];
                *uint64_t v22 = v23 - 1;
                unint64_t v14 = *(unsigned int *)v15;
              }
            }
LABEL_20:
            ++v16;
          }
          while (v16 < v14);
        }
        uint64_t v28 = *(void *)(a1 + 608);
        uint64_t v29 = v28 + 16 * v12;
        unsigned int v32 = *(_DWORD *)(v29 + 8);
        uint64_t v30 = (unsigned int *)(v29 + 8);
        unsigned int v31 = v32;
        if (v32)
        {
          unsigned int v33 = 0;
          uint64_t v34 = *(void *)(v28 + 16 * v12);
          uint64_t v35 = v39[0];
          do
          {
            unint64_t v36 = *(unsigned int *)(v34 + 4 * v33);
            if ((*(_DWORD *)(v35 + ((v36 >> 3) & 0x1FFFFFFC)) >> v36))
            {
              *(_DWORD *)(v34 + 4 * v33) = *(_DWORD *)(v34 + 4 * --v31);
              unsigned int *v30 = v31;
              --v33;
            }
            ++v33;
          }
          while (v33 < v31);
        }
        if (*(void *)v13)
        {
          MemChunkFree(*(void **)v13, 0);
          *(void *)uint64_t v13 = 0;
        }
        void *v15 = 0;
        uint64_t v37 = *(void *)(a1 + 240) + 16 * v12;
        if (*(void *)v37)
        {
          MemChunkFree(*(void **)v37, 0);
          *(void *)uint64_t v37 = 0;
        }
        *(void *)(v37 + 8) = 0;
        uint64_t v38 = *(void *)(a1 + 256) + 16 * v12;
        if (*(void *)v38)
        {
          MemChunkFree(*(void **)v38, 0);
          *(void *)uint64_t v38 = 0;
        }
        *(void *)(v38 + 8) = 0;
        ++v11;
      }
      while (v11 < *(unsigned int *)(a2 + 8));
    }
  }
  BitArray::~BitArray((BitArray *)v39);
}

void sub_213E0E80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  BitArray::~BitArray((BitArray *)va);
  _Unwind_Resume(a1);
}

void StateMgr::addStateTransition(unint64_t a1, unsigned int a2, uint64_t *a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a6;
  unsigned int v10 = a2;
  StateMgr::verifyStateFull((StateMgr *)a1, a2, a4, 0, a5, a6, a7, a8);
  uint64_t v16 = v10;
  if (*(unsigned char *)(*(void *)(a1 + 336) + v10)
    && *(unsigned __int8 *)(*(void *)(a1 + 368) + v10) != *(unsigned __int8 *)(*(void *)(a1 + 352) + v10))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 3193, (uint64_t)"voc/statemgr", 24, (uint64_t)"%s", v14, v15, (char)&errStr_voc_statemgr_E_SKIPPABLE_WB_MISMATCH);
  }
  LODWORD(v17) = *((_DWORD *)a3 + 2);
  if (v17)
  {
    uint64_t v84 = v8;
    unint64_t v18 = 0;
    do
    {
      uint64_t v19 = *(unsigned int *)(*a3 + 4 * v18);
      BOOL v20 = *(unsigned char *)(*(void *)(a1 + 368) + v10) == 0;
      StateMgr::verifyStateFull((StateMgr *)a1, *(_DWORD *)(*a3 + 4 * v18), 0, 0, v12, v13, v14, v15);
      if (((v20 ^ (*(unsigned char *)(*(void *)(a1 + 352) + v19) != 0)) & 1) == 0) {
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 3199, (uint64_t)"voc/statemgr", 25, (uint64_t)"%s", v23, v24, (char)&errStr_voc_statemgr_E_TRANSITION_WB_MISMATCH);
      }
      StateMgr::verifyStateFull((StateMgr *)a1, v19, 0, 0, v21, v22, v23, v24);
      if (*(unsigned char *)(*(void *)(a1 + 336) + v19))
      {
        BOOL v25 = *(unsigned char *)(*(void *)(a1 + 368) + v10) == 0;
        StateMgr::verifyStateFull((StateMgr *)a1, v19, 0, 0, v12, v13, v14, v15);
        if (((v25 ^ (*(unsigned char *)(*(void *)(a1 + 368) + v19) != 0)) & 1) == 0) {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/voc/statemgr.cpp", 3203, (uint64_t)"voc/statemgr", 24, (uint64_t)"%s", v14, v15, (char)&errStr_voc_statemgr_E_SKIPPABLE_WB_MISMATCH);
        }
      }
      ++v18;
      unint64_t v17 = *((unsigned int *)a3 + 2);
    }
    while (v18 < v17);
    uint64_t v8 = v84;
  }
  uint64_t v26 = *(void *)(a1 + 224) + 16 * v10;
  int v28 = *(_DWORD *)(v26 + 8);
  uint64_t v27 = (_DWORD *)(v26 + 8);
  unsigned int v29 = *(_DWORD *)(v26 + 12);
  uint64_t v30 = v28 + v17 - v29;
  uint64_t v31 = a5;
  if (v28 + (int)v17 > v29)
  {
    DgnPrimArray<unsigned int>::reallocElts(*(void *)(a1 + 224) + 16 * v10, v30, 1);
    uint64_t v31 = a5;
    LODWORD(v17) = *((_DWORD *)a3 + 2);
  }
  if (v17)
  {
    unint64_t v32 = 0;
    uint64_t v33 = *a3;
    uint64_t v34 = *(void *)v26;
    do
    {
      *(_DWORD *)(v34 + 4 * (v32 + *v27)) = *(_DWORD *)(v33 + 4 * v32);
      ++v32;
      unint64_t v35 = *((unsigned int *)a3 + 2);
    }
    while (v32 < v35);
  }
  else
  {
    LODWORD(v35) = 0;
  }
  *v27 += v35;
  if (*(unsigned char *)(*(void *)(a1 + 336) + v10) == 1)
  {
    VocMgr::beginRuleStateRecursiveOperation((uint64_t *)VocMgr::smpVocMgr);
    StateMgr::verifyStateNotInAllSkippableLoop(a1, v10, v10, v36, v37, v38, v39, v40);
    VocMgr::endRuleStateRecursiveOperation((VocMgr *)VocMgr::smpVocMgr);
    uint64_t v31 = a5;
  }
  if (*(_WORD *)(*(void *)(a1 + 48) + 2 * v10))
  {
    unsigned int v41 = *(_DWORD *)(v8 + 8);
    uint64_t v85 = v10;
    uint64_t v42 = *(void *)(a1 + 240) + 16 * v10;
    unsigned int v43 = *(_DWORD *)(v42 + 12);
    unsigned int v44 = *(_DWORD *)(v42 + 8) + v41;
    if (v44 > v43)
    {
      DgnPrimArray<short>::reallocElts(v42, v44 - v43, 1);
      uint64_t v31 = a5;
      unsigned int v41 = *(_DWORD *)(v8 + 8);
    }
    uint64_t v45 = v8;
    unsigned int v83 = v10;
    if (v41)
    {
      unint64_t v46 = 0;
      int v47 = 0;
      uint64_t v48 = 8;
      do
      {
        int v49 = *(_DWORD *)(v31 + 8);
        int v50 = *(_DWORD *)(*(void *)v45 + v48);
        uint64_t v51 = *(void *)(a1 + 240) + 16 * v85;
        uint64_t v53 = (unsigned int *)(v51 + 8);
        unsigned int v52 = *(_DWORD *)(v51 + 8);
        if (v52 == *(_DWORD *)(v51 + 12))
        {
          DgnPrimArray<short>::reallocElts(*(void *)(a1 + 240) + 16 * v85, 1, 1);
          uint64_t v31 = a5;
          unsigned int v52 = *v53;
          unsigned int v41 = *(_DWORD *)(v45 + 8);
        }
        *(_WORD *)(*(void *)v51 + 2 * v52) = v50 + v49;
        *uint64_t v53 = v52 + 1;
        v47 += v50 + v49;
        ++v46;
        v48 += 16;
      }
      while (v46 < v41);
    }
    else
    {
      int v47 = 0;
    }
    uint64_t v54 = *(void *)(a1 + 256) + 16 * v85;
    unsigned int v55 = *(_DWORD *)(v54 + 12);
    unsigned int v56 = *(_DWORD *)(v54 + 8) + v47;
    uint64_t v57 = v45;
    if (v56 > v55)
    {
      DgnPrimArray<unsigned int>::reallocElts(v54, v56 - v55, 1);
      uint64_t v31 = a5;
      unsigned int v41 = *(_DWORD *)(v45 + 8);
    }
    unsigned int v10 = v83;
    uint64_t v16 = v85;
    if (v41)
    {
      unint64_t v58 = 0;
      do
      {
        uint64_t v59 = *(void *)(a1 + 256) + 16 * v85;
        unsigned int v60 = *(_DWORD *)(v31 + 8);
        unsigned int v62 = (unsigned int *)(v59 + 8);
        unsigned int v61 = *(_DWORD *)(v59 + 8);
        unsigned int v63 = *(_DWORD *)(v59 + 12);
        if (v61 + v60 > v63)
        {
          DgnPrimArray<unsigned int>::reallocElts(*(void *)(a1 + 256) + 16 * v85, v61 + v60 - v63, 1);
          uint64_t v31 = a5;
          unsigned int v60 = *(_DWORD *)(a5 + 8);
          unsigned int v61 = *v62;
        }
        if (v60)
        {
          uint64_t v64 = *(void *)v59;
          uint64_t v65 = v60;
          uint64_t v66 = *(void *)v31 + 2;
          unsigned int v67 = v61;
          do
          {
            *(_DWORD *)(v64 + 4 * v67) = *(_DWORD *)(v66 - 2);
            v66 += 4;
            ++v67;
            --v65;
          }
          while (v65);
        }
        *unsigned int v62 = v60 + v61;
        uint64_t v68 = *(void *)(a1 + 256) + 16 * v85;
        uint64_t v69 = *(void *)v57 + 16 * v58;
        unsigned int v70 = *(_DWORD *)(v69 + 8);
        uint64_t v72 = (unsigned int *)(v68 + 8);
        unsigned int v71 = *(_DWORD *)(v68 + 8);
        unsigned int v73 = *(_DWORD *)(v68 + 12);
        if (v71 + v70 > v73)
        {
          DgnPrimArray<unsigned int>::reallocElts(*(void *)(a1 + 256) + 16 * v85, v71 + v70 - v73, 1);
          uint64_t v31 = a5;
          unsigned int v70 = *(_DWORD *)(v69 + 8);
          unsigned int v71 = *v72;
        }
        if (v70)
        {
          uint64_t v74 = *(void *)v68;
          uint64_t v75 = v70;
          uint64_t v76 = *(void *)v69 + 2;
          unsigned int v77 = v71;
          do
          {
            *(_DWORD *)(v74 + 4 * v77) = *(_DWORD *)(v76 - 2);
            v76 += 4;
            ++v77;
            --v75;
          }
          while (v75);
        }
        *uint64_t v72 = v70 + v71;
        ++v58;
      }
      while (v58 < *(unsigned int *)(v57 + 8));
    }
  }
  if (*((_DWORD *)a3 + 2))
  {
    unint64_t v78 = 0;
    LOBYTE(v79) = 0;
    do
    {
      uint64_t v80 = *(unsigned int *)(*a3 + 4 * v78);
      BOOL v79 = v79 || *(unsigned __int8 *)(*(void *)(a1 + 680) + v80) == 1;
      StateMgr::addTransitioningStateRef(a1, v80, v10);
      ++v78;
    }
    while (v78 < *((unsigned int *)a3 + 2));
  }
  else
  {
    BOOL v79 = 0;
  }
  if (!*(unsigned char *)(a1 + 696))
  {
    uint64_t v81 = *(void *)(a1 + 680);
    if (*(unsigned char *)(v81 + v16)) {
      BOOL v82 = 0;
    }
    else {
      BOOL v82 = v79;
    }
    if (v82)
    {
      if (StateMgr::allTransitioningStatesAlreadyHaveRPA((StateMgr *)a1, v10)) {
        *(unsigned char *)(v81 + v16) = 1;
      }
      else {
        *(unsigned char *)(a1 + 696) = 1;
      }
    }
  }
}

uint64_t StateMgr::getWordAliasState(StateMgr *this, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return *(unsigned int *)(*((void *)this + 62) + 4 * a2);
}

void StateMgr::notifyPronsChanged(StateMgr *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 180) >= 2u)
  {
    unint64_t v10 = 1;
    do
    {
      if (*(unsigned char *)(*((void *)this + 68) + v10) && *(_DWORD *)(a2 + 8))
      {
        for (unint64_t i = 0; i < *(unsigned int *)(a2 + 8); ++i)
        {
          if (StateMgr::isWordIdInState(this, v10, *(_DWORD *)(*(void *)a2 + 4 * i), 0, a5, a6, a7, a8))
          {
            StateMgr::verifyState(this, v10, v12, v13, a5, a6, a7, a8);
            if (*(_DWORD *)(*(void *)this + 80 * v10 + 16) <= 5u)
            {
              StateMgr::recomputePrimitiveBegPhones(this, v10);
              break;
            }
            StateMgr::addPrimitiveBegPhones(this, v10, *(_DWORD *)(*(void *)a2 + 4 * i));
          }
        }
      }
      ++v10;
    }
    while (v10 < *((unsigned int *)this + 180));
  }
}

_DWORD **StateMgr::mergeBegPhones(void *a1, unsigned int a2, _DWORD **a3)
{
  **a3 |= 1u;
  uint64_t v6 = a2;
  uint64_t v7 = *(unsigned int *)(a1[62] + 4 * a2);
  if (!v7) {
    uint64_t v7 = a2;
  }
  double result = BitArray::inplaceOrSameSize(a3, (const BitArray *)(a1[83] + 16 * v7));
  if (*(unsigned char *)(a1[42] + a2))
  {
    uint64_t v9 = a1[28];
    if (*(_DWORD *)(v9 + 16 * v6 + 8))
    {
      unint64_t v10 = 0;
      do
      {
        double result = (_DWORD **)StateMgr::mergeBegPhones(a1, *(unsigned int *)(*(void *)(v9 + 16 * v6) + 4 * v10++), a3);
        uint64_t v9 = a1[28];
      }
      while (v10 < *(unsigned int *)(v9 + 16 * v6 + 8));
    }
  }
  return result;
}

_DWORD **StateMgr::mergeNextPhones(_DWORD **result, unsigned int a2, _DWORD **a3)
{
  **a3 |= 1u;
  uint64_t v3 = result[28];
  if (v3[4 * a2 + 2])
  {
    uint64_t v5 = result;
    unint64_t v6 = 0;
    uint64_t v7 = a2;
    uint64_t v8 = 4 * a2;
    do
    {
      double result = StateMgr::mergeBegPhones(v5, *(_DWORD *)(*(void *)&v3[v8] + 4 * v6++), a3);
      uint64_t v3 = (_DWORD *)v5[28];
    }
    while (v6 < v3[4 * v7 + 2]);
  }
  return result;
}

uint64_t StateMgr::cacheAllWordInStateInfo(uint64_t this)
{
  unint64_t v1 = *(unsigned int *)(this + 24);
  if (v1 >= 2)
  {
    uint64_t v2 = this;
    unint64_t v3 = 1;
    uint64_t v4 = 96;
    do
    {
      if (*(unsigned char *)(*(void *)(v2 + 544) + v3)
        && !*(void *)(*(void *)(v2 + 16) + 8 * v3)
        && *(_DWORD *)(*(void *)v2 + v4) >= 0x1F4u)
      {
        this = StateMgr::getBitWords((StateMgr *)v2, v3);
        unint64_t v1 = *(unsigned int *)(v2 + 24);
      }
      ++v3;
      v4 += 80;
    }
    while (v3 < v1);
  }
  return this;
}

void *DgnArray<DgnCollArray<unsigned int,WordList>>::releaseAll(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 1)
  {
    uint64_t v3 = 80 * v2 - 80;
    do
    {
      DgnCollArray<unsigned int,ParamSetIdCollCmpWithTemp>::~DgnCollArray(*(void *)a1 + v3);
      v3 -= 80;
    }
    while (v3 != -80);
  }
  double result = *(void **)a1;
  if (*(void *)a1)
  {
    double result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

uint64_t DgnIOwnArray<DgnPrimArray<unsigned int> *>::destructAt(uint64_t result, int a2, int a3)
{
  if (a3 + a2 > a2)
  {
    uint64_t v3 = (void *)result;
    uint64_t v4 = a2;
    uint64_t v5 = a3 + a2 - 1;
    do
    {
      double result = DgnDelete<DgnPrimArray<unsigned int>>(*(void *)(*v3 + 8 * v5));
      *(void *)(*v3 + 8 * v5) = 0;
    }
    while (v5-- > v4);
  }
  return result;
}

void *DgnIOwnArray<BitArray *>::releaseAll(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<BitArray>(*(BitArray **)(*(void *)a1 + v3));
      *(void *)(*(void *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  double result = *(void **)a1;
  if (*(void *)a1)
  {
    double result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

BitArray *DgnIOwnArray<BitArray *>::destructAt(BitArray *result, int a2, int a3)
{
  if (a3 + a2 > a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = a2;
    uint64_t v5 = a3 + a2 - 1;
    do
    {
      double result = DgnDelete<BitArray>(*(BitArray **)(*(void *)v3 + 8 * v5));
      *(void *)(*(void *)v3 + 8 * v5) = 0;
    }
    while (v5-- > v4);
  }
  return result;
}

void DgnCollArray<unsigned int,WordList>::readObject(uint64_t a1, DgnStream *a2, unsigned int *a3)
{
  readObject<unsigned int>(a2, a1 + 8, a3);
  readObject<unsigned short>(a2, a1 + 40, a3);
  uint64_t v15 = 0;
  readObject((uint64_t)a2, &v15, a3);
  readObject((uint64_t)a2, &v15, a3);
  *(unsigned char *)a1 = v15 != 0;
  readObject((uint64_t)a2, (_DWORD *)&v15 + 1, a3);
  *(_WORD *)(a1 + 2) = WORD2(v15);
  readObject((uint64_t)a2, &v15, a3);
  *(unsigned char *)(a1 + 4) = v15 != 0;
  readObject((uint64_t)a2, &v15, a3);
  *(unsigned char *)(a1 + 5) = v15 != 0;
  unsigned int v14 = 0;
  readObject((uint64_t)a2, &v14, a3);
  LODWORD(v6) = *(_DWORD *)(a1 + 32);
  if (v6)
  {
    unint64_t v7 = 0;
    do
    {
      DgnDelete<DgnPrimArray<unsigned int>>(*(void *)(*(void *)(a1 + 24) + 8 * v7));
      *(void *)(*(void *)(a1 + 24) + 8 * v7++) = 0;
      unint64_t v6 = *(unsigned int *)(a1 + 32);
    }
    while (v7 < v6);
  }
  uint64_t v8 = (void *)(a1 + 24);
  uint64_t v9 = v14;
  unsigned int v10 = *(_DWORD *)(a1 + 36);
  if (v14 > v10)
  {
    DgnPrimArray<unsigned long long>::reallocElts(a1 + 24, v14 - v10, 0);
    LODWORD(v6) = *(_DWORD *)(a1 + 32);
  }
  if (v6 <= v9)
  {
    if (v6 < v9)
    {
      unint64_t v6 = v6;
      do
        *(void *)(*v8 + 8 * v6++) = 0;
      while (v9 != v6);
    }
  }
  else
  {
    DgnIOwnArray<DgnPrimArray<unsigned int> *>::destructAt(a1 + 24, v9, v6 - v9);
  }
  *(_DWORD *)(a1 + 32) = v9;
  if (v9)
  {
    unint64_t v11 = 0;
    do
    {
      int v13 = 0;
      readObject((uint64_t)a2, &v13, a3);
      *(void *)(*v8 + 8 * v11) = 0;
      if (v13)
      {
        uint64_t v12 = MemChunkAlloc(0x10uLL, 0);
        *uint64_t v12 = 0;
        v12[1] = 0;
        *(void *)(*v8 + 8 * v11) = v12;
        readObject<unsigned int>(a2, *(void *)(*v8 + 8 * v11), a3);
      }
      ++v11;
    }
    while (v11 < *(unsigned int *)(a1 + 32));
  }
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
}

unint64_t DgnArray<StateSpec>::copyArraySlice(unint64_t result, void *a2, unsigned int a3, unsigned int a4)
{
  unint64_t v7 = result;
  *(_DWORD *)(result + 8) = 0;
  unsigned int v8 = *(_DWORD *)(result + 12);
  if (a4 <= v8)
  {
    if (!a4) {
      goto LABEL_6;
    }
  }
  else
  {
    double result = DgnPrimArray<unsigned long long>::reallocElts(result, a4 - v8, 0);
  }
  unsigned int v9 = *(_DWORD *)(v7 + 8);
  unsigned int v10 = a4;
  do
  {
    *(void *)(*(void *)v7 + 8 * v9) = *(void *)(*a2 + 8 * a3);
    unsigned int v9 = *(_DWORD *)(v7 + 8) + 1;
    *(_DWORD *)(v7 + 8) = v9;
    ++a3;
    --v10;
  }
  while (v10);
LABEL_6:
  *(_DWORD *)(v7 + 8) = a4;
  return result;
}

unint64_t DgnArray<RuleSpec>::copyArraySlice(unint64_t result, uint64_t *a2, unsigned int a3, unsigned int a4)
{
  unint64_t v7 = result;
  *(_DWORD *)(result + 8) = 0;
  unsigned int v8 = *(_DWORD *)(result + 12);
  if (a4 <= v8)
  {
    unsigned int v9 = 0;
    unsigned int v10 = 0;
    if (!a4) {
      goto LABEL_6;
    }
  }
  else
  {
    double result = DgnPrimArray<unsigned int>::reallocElts(result, a4 - v8, 0);
    unsigned int v9 = *(_DWORD *)(v7 + 8);
  }
  uint64_t v11 = *a2;
  uint64_t v12 = *(void *)v7;
  unsigned int v13 = a4;
  unsigned int v10 = v9;
  do
  {
    *(_DWORD *)(v12 + 4 * v10++) = *(_DWORD *)(v11 + 4 * a3++);
    --v13;
  }
  while (v13);
LABEL_6:
  if (v10 < a4)
  {
    unint64_t v14 = a4 - (unint64_t)v10;
    uint64_t v15 = *(void *)v7 + 4 * v10 + 2;
    do
    {
      *(_DWORD *)(v15 - 2) = 127;
      v15 += 4;
      --v14;
    }
    while (v14);
  }
  *(_DWORD *)(v7 + 8) = a4;
  return result;
}

uint64_t DgnCollArray<unsigned int,WordList>::writeObject(unsigned __int8 *a1, uint64_t a2, _DWORD *a3)
{
  writeObject<unsigned int>(a2, (uint64_t)(a1 + 8), a3);
  writeObject<unsigned short>(a2, (uint64_t)(a1 + 40), a3);
  int v13 = 0;
  writeObject(a2, &v13, a3);
  int v12 = *a1;
  writeObject(a2, &v12, a3);
  int v11 = *((unsigned __int16 *)a1 + 1);
  writeObject(a2, &v11, a3);
  int v10 = a1[4];
  writeObject(a2, &v10, a3);
  int v9 = a1[5];
  writeObject(a2, &v9, a3);
  int v8 = *((_DWORD *)a1 + 8);
  uint64_t result = writeObject(a2, &v8, a3);
  if (*((_DWORD *)a1 + 8))
  {
    unint64_t v7 = 0;
    do
    {
      int v8 = *(void *)(*((void *)a1 + 3) + 8 * v7) != 0;
      uint64_t result = writeObject(a2, &v8, a3);
      if (v8) {
        uint64_t result = writeObject<unsigned int>(a2, *(void *)(*((void *)a1 + 3) + 8 * v7), a3);
      }
      ++v7;
    }
    while (v7 < *((unsigned int *)a1 + 8));
  }
  return result;
}

uint64_t DgnCollArray<unsigned int,WordList>::mergeLargeSortedArray(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  __int16 v3 = a3;
  if (*(unsigned char *)a1 && *(unsigned __int16 *)(a1 + 2) == a3) {
    uint64_t v6 = a1 + 8;
  }
  else {
    uint64_t v6 = *(void *)(*(void *)(a1 + 24) + 8 * a3);
  }
  unsigned int v7 = *(_DWORD *)(v6 + 8);
  unsigned int v8 = *((_DWORD *)a2 + 2) + v7;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  DgnPrimArray<int>::copyArraySlice((unint64_t)&v32, (uint64_t *)v6, 0, v7);
  unsigned int v14 = *(_DWORD *)(v6 + 12);
  if (v8 > v14) {
    DgnPrimArray<unsigned int>::reallocElts(v6, v8 - v14, 0);
  }
  unsigned int v15 = 0;
  *(_DWORD *)(v6 + 8) = v8;
  long long v30 = *(_OWORD *)(a1 + 64);
  __int16 v31 = v3;
  unsigned int v16 = v33;
  unsigned int v17 = *((_DWORD *)a2 + 2);
  unsigned int v18 = 0;
  unsigned int v19 = 0;
  if (v33 && v17)
  {
    unsigned int v19 = 0;
    unsigned int v18 = 0;
    unsigned int v15 = 0;
    do
    {
      int v20 = WordList::compareElements((CollMgr **)&v30, (unsigned int *)(v32 + 4 * v15), (unsigned int *)(*a2 + 4 * v18), v9, v10, v11, v12, v13);
      uint64_t v21 = (_DWORD *)(v32 + 4 * v15);
      if (v20 < 1) {
        ++v15;
      }
      else {
        uint64_t v21 = (_DWORD *)(*a2 + 4 * v18);
      }
      *(_DWORD *)(*(void *)v6 + 4 * v19) = *v21;
      if (v20 > 0) {
        ++v18;
      }
      ++v19;
      unsigned int v16 = v33;
      unsigned int v17 = *((_DWORD *)a2 + 2);
    }
    while (v15 < v33 && v18 < v17);
  }
  if (v15 < v16)
  {
    uint64_t v23 = v32;
    uint64_t v24 = *(void *)v6;
    unint64_t v25 = v15;
    do
      *(_DWORD *)(v24 + 4 * v19++) = *(_DWORD *)(v23 + 4 * v25++);
    while (v25 < v33);
    unsigned int v17 = *((_DWORD *)a2 + 2);
  }
  if (v18 < v17)
  {
    uint64_t v26 = *a2;
    uint64_t v27 = *(void *)v6;
    unint64_t v28 = v18;
    do
      *(_DWORD *)(v27 + 4 * v19++) = *(_DWORD *)(v26 + 4 * v28++);
    while (v28 < *((unsigned int *)a2 + 2));
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v32);
}

void sub_213E0F824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t DgnCollArray<unsigned int,WordList>::mergeSmallSortedArray(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  __int16 v3 = a3;
  if (*(unsigned char *)a1 && *(unsigned __int16 *)(a1 + 2) == a3) {
    uint64_t v6 = (void **)(a1 + 8);
  }
  else {
    uint64_t v6 = *(void ***)(*(void *)(a1 + 24) + 8 * a3);
  }
  uint64_t v7 = *((unsigned int *)v6 + 2);
  uint64_t v8 = *((unsigned int *)a2 + 2);
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  if (v8 + v7)
  {
    unint64_t v25 = 0;
    HIDWORD(v24) = realloc_array(0, &v25, 4 * (v8 + v7), 0, 0, 1) >> 2;
    int v9 = v25;
    uint64_t v23 = v25;
  }
  else
  {
    int v9 = 0;
  }
  LODWORD(v24) = v8 + v7;
  uint64_t v10 = (uint64_t)*v6;
  if (v8)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = *a2;
    do
    {
      LODWORD(v25) = *(_DWORD *)(v13 + 4 * v11);
      long long v26 = *(_OWORD *)(a1 + 64);
      __int16 v27 = v3;
      char v28 = 0;
      int v14 = DgnPrimArray<unsigned int>::searchLastOrBefore(v6, v12, *((_DWORD *)v6 + 2), (uint64_t)&v25, *(uint64_t (**)(uint64_t, uint64_t))(a1 + 56));
      LODWORD(v15) = v14 + 1;
      if (v14 == -1) {
        uint64_t v15 = v12;
      }
      else {
        uint64_t v15 = v15;
      }
      if (v12 < v15)
      {
        unsigned int v16 = (int *)(v10 + 4 * v12);
        uint64_t v17 = v15 - v12;
        do
        {
          int v18 = *v16++;
          *v9++ = v18;
          --v17;
        }
        while (v17);
      }
      *v9++ = *(_DWORD *)(v13 + 4 * v11++);
      uint64_t v12 = v15;
    }
    while (v11 != v8);
  }
  else
  {
    LODWORD(v15) = 0;
  }
  if (v15 < v7)
  {
    unsigned int v19 = (int *)(v10 + 4 * v15);
    uint64_t v20 = v7 - v15;
    do
    {
      int v21 = *v19++;
      *v9++ = v21;
      --v20;
    }
    while (v20);
  }
  if (*v6)
  {
    MemChunkFree(*v6, 0);
    *uint64_t v6 = 0;
  }
  *uint64_t v6 = v23;
  v6[1] = v24;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v23);
}

void sub_213E0F9DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t mrec_qsort_r<WordList>(uint64_t result, unint64_t a2, unint64_t a3, CollMgr **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a4;
  unint64_t v10 = a2;
  uint64_t v11 = (unsigned int *)result;
  uint64_t v12 = -(uint64_t)a3;
  if (((result | a3) & 7) != 0) {
    int v13 = 2;
  }
  else {
    int v13 = a3 != 8;
  }
  BOOL v141 = ((result | a3) & 7) == 0;
  int v142 = v13;
  if (a2 < 7)
  {
LABEL_117:
    if ((uint64_t)(v10 * a3) > (uint64_t)a3)
    {
      uint64_t v107 = v8;
      uint64_t v139 = (unsigned int *)((char *)v11 + v10 * a3);
      unsigned int v108 = (unsigned int *)((char *)v11 + a3);
      uint64_t v109 = v11;
      do
      {
        if (v108 > v11)
        {
          uint64_t v110 = v109;
          unsigned int v111 = v108;
          do
          {
            uint64_t v112 = v111;
            unsigned int v111 = (unsigned int *)((char *)v111 + v12);
            uint64_t result = WordList::compareElements(v107, v111, v112, a4, a5, a6, a7, a8);
            if ((int)result < 1) {
              break;
            }
            if (v142)
            {
              if (v141)
              {
                uint64_t v113 = 0;
                uint64_t v114 = (uint64_t)v110 + a3;
                do
                {
                  uint64_t v115 = *(void *)(v114 + 8 * v113);
                  *(void *)(v114 + 8 * v113) = *(void *)&v110[2 * v113];
                  *(void *)&v110[2 * v113++] = v115;
                }
                while (a3 >> 3 != v113);
              }
              else
              {
                uint64_t v117 = 0;
                uint64_t v118 = (uint64_t)v110 + a3;
                do
                {
                  char v119 = *(unsigned char *)(v118 + v117);
                  *(unsigned char *)(v118 + v117) = *((unsigned char *)v110 + v117);
                  *((unsigned char *)v110 + v117++) = v119;
                }
                while (a3 != v117);
              }
            }
            else
            {
              uint64_t v116 = *(void *)v112;
              *(void *)uint64_t v112 = *(void *)v111;
              *(void *)unsigned int v111 = v116;
            }
            uint64_t v110 = (unsigned int *)((char *)v110 + v12);
          }
          while (v111 > v11);
        }
        unsigned int v108 = (unsigned int *)((char *)v108 + a3);
        uint64_t v109 = (unsigned int *)((char *)v109 + a3);
      }
      while (v108 < v139);
    }
    return result;
  }
  BOOL v135 = a3 != 8;
  unint64_t v14 = a3 >> 3;
  while (1)
  {
    uint64_t v15 = (unsigned int *)((char *)v11 + (v10 >> 1) * a3);
    if (v10 == 7) {
      goto LABEL_44;
    }
    unsigned int v16 = (unsigned int *)((char *)v11 + (v10 - 1) * a3);
    if (v10 >= 0x29)
    {
      uint64_t v136 = (unsigned int *)((char *)v11 + (v10 - 1) * a3);
      unint64_t v17 = (v10 >> 3) * a3;
      int v18 = (unsigned int *)((char *)v11 + v17);
      unint64_t v133 = v17;
      unsigned int v19 = (unsigned int *)((char *)v11 + 2 * v17);
      int v20 = WordList::compareElements(v8, v11, (unsigned int *)((char *)v11 + v17), a4, a5, a6, a7, a8);
      uint64_t v137 = v18;
      int v26 = WordList::compareElements(v8, v18, v19, v21, v22, v23, v24, v25);
      if (v20 < 0)
      {
        if ((v26 & 0x80000000) == 0)
        {
          if ((int)WordList::compareElements(v8, v11, v19, v27, v28, v29, v30, v31) >= 0) {
            uint64_t v32 = v11;
          }
          else {
            uint64_t v32 = v19;
          }
          goto LABEL_18;
        }
      }
      else if (v26 <= 0)
      {
        if ((int)WordList::compareElements(v8, v11, v19, v27, v28, v29, v30, v31) >= 0) {
          uint64_t v32 = v19;
        }
        else {
          uint64_t v32 = v11;
        }
LABEL_18:
        uint64_t v137 = v32;
      }
      unint64_t v34 = (v10 >> 3) * a3;
      unint64_t v35 = (unsigned int *)((char *)v15 + v133);
      uint64_t v132 = (unsigned int *)((char *)v15 - v133);
      int v36 = WordList::compareElements(v8, (unsigned int *)((char *)v15 - v133), (unsigned int *)((char *)v11 + (v10 >> 1) * a3), v27, v28, v29, v30, v31);
      int v42 = WordList::compareElements(v8, (unsigned int *)((char *)v11 + (v10 >> 1) * a3), (unsigned int *)((char *)v15 + v133), v37, v38, v39, v40, v41);
      if (v36 < 0)
      {
        if ((v42 & 0x80000000) == 0)
        {
          uint64_t v15 = (unsigned int *)((char *)v15 - v133);
          if ((int)WordList::compareElements(v8, v132, v35, v43, v44, v45, v46, v47) < 0) {
            uint64_t v15 = v35;
          }
        }
      }
      else if (v42 <= 0)
      {
        uint64_t v15 = (unsigned int *)((char *)v15 - v133);
        if ((int)WordList::compareElements(v8, v132, v35, v43, v44, v45, v46, v47) >= 0) {
          uint64_t v15 = v35;
        }
      }
      unsigned int v16 = (unsigned int *)((char *)v136 - v133);
      uint64_t v134 = (unsigned int *)((char *)v136 - 2 * v133);
      int v48 = WordList::compareElements(v8, (unsigned int *)((char *)v136 - 2 * v34), (unsigned int *)((char *)v136 - v34), v43, v44, v45, v46, v47);
      int v54 = WordList::compareElements(v8, (unsigned int *)((char *)v136 - v34), v136, v49, v50, v51, v52, v53);
      if (v48 < 0)
      {
        uint64_t v33 = v137;
        if ((v54 & 0x80000000) == 0)
        {
          unsigned int v16 = (unsigned int *)((char *)v11 + (v10 - 1) * a3);
          if ((int)WordList::compareElements(v8, v134, v136, a4, a5, a6, a7, a8) >= 0) {
            unsigned int v16 = v134;
          }
        }
      }
      else
      {
        uint64_t v33 = v137;
        if (v54 <= 0)
        {
          unsigned int v16 = (unsigned int *)((char *)v11 + (v10 - 1) * a3);
          if ((int)WordList::compareElements(v8, v134, v136, a4, a5, a6, a7, a8) < 0) {
            unsigned int v16 = v134;
          }
        }
      }
      goto LABEL_35;
    }
    uint64_t v33 = v11;
LABEL_35:
    int v55 = WordList::compareElements(v8, v33, v15, a4, a5, a6, a7, a8);
    uint64_t result = WordList::compareElements(v8, v15, v16, v56, v57, v58, v59, v60);
    if (v55 < 0)
    {
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = WordList::compareElements(v8, v33, v16, a4, a5, a6, a7, a8);
        if ((int)result >= 0) {
          uint64_t v15 = v33;
        }
        else {
          uint64_t v15 = v16;
        }
      }
    }
    else if ((int)result <= 0)
    {
      uint64_t result = WordList::compareElements(v8, v33, v16, a4, a5, a6, a7, a8);
      if ((int)result >= 0) {
        uint64_t v15 = v16;
      }
      else {
        uint64_t v15 = v33;
      }
    }
LABEL_44:
    if (v142)
    {
      if (v141)
      {
        unsigned int v61 = v11;
        unint64_t v62 = a3 >> 3;
        do
        {
          uint64_t v63 = *(void *)v61;
          *(void *)unsigned int v61 = *(void *)v15;
          v61 += 2;
          *(void *)uint64_t v15 = v63;
          v15 += 2;
          --v62;
        }
        while (v62);
      }
      else
      {
        unint64_t v65 = a3;
        uint64_t v66 = v11;
        do
        {
          char v67 = *(unsigned char *)v66;
          *(unsigned char *)uint64_t v66 = *(unsigned char *)v15;
          uint64_t v66 = (unsigned int *)((char *)v66 + 1);
          *(unsigned char *)uint64_t v15 = v67;
          uint64_t v15 = (unsigned int *)((char *)v15 + 1);
          --v65;
        }
        while (v65);
      }
    }
    else
    {
      uint64_t v64 = *(void *)v11;
      *(void *)uint64_t v11 = *(void *)v15;
      *(void *)uint64_t v15 = v64;
    }
    int v68 = 0;
    uint64_t v69 = (void *)((char *)v11 + a3);
    unint64_t v138 = v10;
    unsigned int v70 = (unsigned int *)((char *)v11 + (v10 - 1) * a3);
    unsigned int v71 = v70;
    uint64_t v72 = (unsigned int *)((char *)v11 + a3);
LABEL_53:
    while (v72 <= v71)
    {
      uint64_t result = WordList::compareElements(v8, v72, v11, a4, a5, a6, a7, a8);
      if ((int)result > 0) {
        break;
      }
      if (!result)
      {
        if (v142)
        {
          if (v141)
          {
            uint64_t v73 = 0;
            do
            {
              uint64_t v74 = v69[v73];
              v69[v73] = *(void *)&v72[2 * v73];
              *(void *)&v72[2 * v73++] = v74;
            }
            while (v14 != v73);
          }
          else
          {
            uint64_t v83 = 0;
            do
            {
              char v84 = *((unsigned char *)v69 + v83);
              *((unsigned char *)v69 + v83) = *((unsigned char *)v72 + v83);
              *((unsigned char *)v72 + v83++) = v84;
            }
            while (a3 != v83);
          }
        }
        else
        {
          uint64_t v82 = *v69;
          *uint64_t v69 = *(void *)v72;
          *(void *)uint64_t v72 = v82;
        }
        uint64_t v69 = (void *)((char *)v69 + a3);
        int v68 = 1;
      }
      uint64_t v72 = (unsigned int *)((char *)v72 + a3);
    }
    while (v72 <= v71)
    {
      uint64_t result = WordList::compareElements(v8, v71, v11, a4, a5, a6, a7, a8);
      if ((result & 0x80000000) != 0)
      {
        if (v142)
        {
          if (v141)
          {
            uint64_t v80 = 0;
            do
            {
              uint64_t v81 = *(void *)&v72[2 * v80];
              *(void *)&v72[2 * v80] = *(void *)&v71[2 * v80];
              *(void *)&v71[2 * v80++] = v81;
            }
            while (v14 != v80);
          }
          else
          {
            uint64_t v86 = 0;
            do
            {
              char v87 = *((unsigned char *)v72 + v86);
              *((unsigned char *)v72 + v86) = *((unsigned char *)v71 + v86);
              *((unsigned char *)v71 + v86++) = v87;
            }
            while (a3 != v86);
          }
        }
        else
        {
          uint64_t v85 = *(void *)v72;
          *(void *)uint64_t v72 = *(void *)v71;
          *(void *)unsigned int v71 = v85;
        }
        uint64_t v72 = (unsigned int *)((char *)v72 + a3);
        unsigned int v71 = (unsigned int *)((char *)v71 + v12);
        int v68 = 1;
        goto LABEL_53;
      }
      if (!result)
      {
        if (v142)
        {
          if (v141)
          {
            uint64_t v75 = 0;
            do
            {
              uint64_t v76 = *(void *)&v71[2 * v75];
              *(void *)&v71[2 * v75] = *(void *)&v70[2 * v75];
              *(void *)&v70[2 * v75++] = v76;
            }
            while (v14 != v75);
          }
          else
          {
            uint64_t v78 = 0;
            do
            {
              char v79 = *((unsigned char *)v71 + v78);
              *((unsigned char *)v71 + v78) = *((unsigned char *)v70 + v78);
              *((unsigned char *)v70 + v78++) = v79;
            }
            while (a3 != v78);
          }
        }
        else
        {
          uint64_t v77 = *(void *)v71;
          *(void *)unsigned int v71 = *(void *)v70;
          *(void *)unsigned int v70 = v77;
        }
        unsigned int v70 = (unsigned int *)((char *)v70 + v12);
        int v68 = 1;
      }
      unsigned int v71 = (unsigned int *)((char *)v71 + v12);
    }
    uint64_t v88 = (unsigned int *)((char *)v11 + v138 * a3);
    if (!v68) {
      break;
    }
    int64_t v89 = (char *)v72 - (char *)v69;
    if ((char *)v69 - (char *)v11 >= (char *)v72 - (char *)v69) {
      unint64_t v90 = (char *)v72 - (char *)v69;
    }
    else {
      unint64_t v90 = (char *)v69 - (char *)v11;
    }
    if (v90)
    {
      if (v141)
      {
        uint64_t v91 = (void *)((char *)v72 - v90);
        unint64_t v92 = v90 >> 3;
        uint64_t v93 = v11;
        do
        {
          uint64_t v94 = *(void *)v93;
          *(void *)uint64_t v93 = *v91;
          v93 += 2;
          *v91++ = v94;
          --v92;
        }
        while (v92);
      }
      else
      {
        uint64_t v95 = -(uint64_t)v90;
        uint64_t v96 = v11;
        do
        {
          char v97 = *(unsigned char *)v96;
          *(unsigned char *)uint64_t v96 = *((unsigned char *)v72 + v95);
          uint64_t v96 = (unsigned int *)((char *)v96 + 1);
          *((unsigned char *)v72 + v95) = v97;
          BOOL v98 = __CFADD__(v95++, 1);
        }
        while (!v98);
      }
    }
    int64_t v99 = (char *)v70 - (char *)v71;
    if ((char *)v70 - (char *)v71 >= (char *)v88 - ((char *)v70 + a3)) {
      unint64_t v100 = (char *)v88 - ((char *)v70 + a3);
    }
    else {
      unint64_t v100 = (char *)v70 - (char *)v71;
    }
    if (v100)
    {
      if (v141)
      {
        uint64_t v101 = (char *)v88 - v100;
        unint64_t v102 = v100 >> 3;
        do
        {
          uint64_t v103 = *(void *)v72;
          *(void *)uint64_t v72 = *(void *)v101;
          v72 += 2;
          *(void *)uint64_t v101 = v103;
          v101 += 8;
          --v102;
        }
        while (v102);
      }
      else
      {
        uint64_t v104 = -(uint64_t)v100;
        do
        {
          char v105 = *(unsigned char *)v72;
          *(unsigned char *)uint64_t v72 = *((unsigned char *)v88 + v104);
          uint64_t v72 = (unsigned int *)((char *)v72 + 1);
          *((unsigned char *)v88 + v104) = v105;
          BOOL v98 = __CFADD__(v104++, 1);
        }
        while (!v98);
      }
    }
    if (v89 > (uint64_t)a3) {
      uint64_t result = mrec_qsort_r<WordList>(v11, v89 / a3, a3, a4);
    }
    if (v99 <= (uint64_t)a3) {
      return result;
    }
    uint64_t v11 = (unsigned int *)((char *)v88 - v99);
    unint64_t v10 = v99 / a3;
    int v106 = v135;
    if ((((v88 - v99) | a3) & 7) != 0) {
      int v106 = 2;
    }
    BOOL v141 = (((v88 - v99) | a3) & 7) == 0;
    int v142 = v106;
    uint64_t v8 = a4;
    if (v10 < 7) {
      goto LABEL_117;
    }
  }
  uint64_t v120 = (unsigned int *)((char *)v11 + a3);
  if ((uint64_t)(v138 * a3) > (uint64_t)a3)
  {
    unsigned int v121 = v11;
    do
    {
      if (v120 > v11)
      {
        uint64_t v122 = v121;
        uint64_t v123 = v120;
        do
        {
          uint64_t v124 = v123;
          uint64_t v123 = (unsigned int *)((char *)v123 + v12);
          uint64_t result = WordList::compareElements(a4, v123, v124, a4, a5, a6, a7, a8);
          if ((int)result < 1) {
            break;
          }
          if (v142)
          {
            if (v141)
            {
              uint64_t v125 = 0;
              uint64_t v126 = (uint64_t)v122 + a3;
              do
              {
                uint64_t v127 = *(void *)(v126 + 8 * v125);
                *(void *)(v126 + 8 * v125) = *(void *)&v122[2 * v125];
                *(void *)&v122[2 * v125++] = v127;
              }
              while (v14 != v125);
            }
            else
            {
              uint64_t v129 = 0;
              uint64_t v130 = (uint64_t)v122 + a3;
              do
              {
                char v131 = *(unsigned char *)(v130 + v129);
                *(unsigned char *)(v130 + v129) = *((unsigned char *)v122 + v129);
                *((unsigned char *)v122 + v129++) = v131;
              }
              while (a3 != v129);
            }
          }
          else
          {
            uint64_t v128 = *(void *)v124;
            *(void *)uint64_t v124 = *(void *)v123;
            *(void *)uint64_t v123 = v128;
          }
          uint64_t v122 = (unsigned int *)((char *)v122 + v12);
        }
        while (v123 > v11);
      }
      uint64_t v120 = (unsigned int *)((char *)v120 + a3);
      unsigned int v121 = (unsigned int *)((char *)v121 + a3);
    }
    while (v120 < v88);
  }
  return result;
}

uint64_t DgnCollArray<unsigned int,WordList>::removeSortedArray(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (*(unsigned char *)a1 && *(unsigned __int16 *)(a1 + 2) == a3) {
    uint64_t v4 = a1 + 8;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(a1 + 24) + 8 * a3);
  }
  unsigned int v5 = *(_DWORD *)(v4 + 8);
  int v6 = *(_DWORD *)(a2 + 8);
  LODWORD(v22) = **(_DWORD **)a2;
  long long v23 = *(_OWORD *)(a1 + 64);
  __int16 v24 = a3;
  char v25 = 0;
  unsigned int Equal = DgnPrimArray<unsigned int>::searchFirstEqual((void *)v4, 0, v5, (uint64_t)&v22, *(uint64_t (**)(uint64_t, uint64_t))(a1 + 56));
  unsigned int v8 = v5 - v6;
  uint64_t v22 = 0;
  *(void *)&long long v23 = 0;
  DgnPrimArray<int>::copyArraySlice((unint64_t)&v22, (uint64_t *)v4, 0, *(_DWORD *)(v4 + 8));
  unsigned int v9 = *(_DWORD *)(v4 + 12);
  if (v8 > v9) {
    DgnPrimArray<unsigned int>::reallocElts(v4, v8 - v9, 0);
  }
  *(_DWORD *)(v4 + 8) = v8;
  if (Equal < v5)
  {
    int v10 = 0;
    uint64_t v11 = v22;
    uint64_t v12 = *(_DWORD **)a2;
    unsigned int v13 = Equal;
    do
    {
      int v14 = *(_DWORD *)(v11 + 4 * v13);
      if (v14 == v12[v10])
      {
        unsigned int v15 = v13 + 1;
        if (++v10 == *(_DWORD *)(a2 + 8) && v15 < v5)
        {
          uint64_t v17 = *(void *)v4;
          int v18 = (int *)(v11 + 4 * v15);
          unsigned int v19 = ~v13 + v5;
          do
          {
            int v20 = *v18++;
            *(_DWORD *)(v17 + 4 * Equal++) = v20;
            --v19;
          }
          while (v19);
          return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v22);
        }
        ++v13;
      }
      else
      {
        *(_DWORD *)(*(void *)v4 + 4 * Equal++) = v14;
        ++v13;
      }
    }
    while (v13 < v5);
  }
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v22);
}

void sub_213E10314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t DgnPrimArray<unsigned int>::searchFirstEqual(void *a1, int a2, int a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v5 = 0xFFFFFFFFLL;
  if (a3)
  {
    int v6 = a2;
    if (a3 > a2)
    {
      int v10 = a3 - 1;
      do
      {
        int v11 = v10 + v6;
        if (v10 + v6 < 0 != __OFADD__(v10, v6)) {
          ++v11;
        }
        uint64_t v5 = (v11 >> 1);
        int v12 = a5(*a1 + 4 * v5, a4);
        if (v12)
        {
          if (v12 >= 0) {
            int v10 = v5 - 1;
          }
          else {
            int v6 = v5 + 1;
          }
        }
        else
        {
          BOOL v13 = v10 == v6;
          int v10 = v5;
          if (v13) {
            return v5;
          }
        }
      }
      while (v6 <= v10);
      return 0xFFFFFFFFLL;
    }
  }
  return v5;
}

uint64_t DgnCollArray<unsigned int,WordList>::sortCollation(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(unsigned char *)a1 && *(unsigned __int16 *)(a1 + 2) == a2) {
    uint64_t v8 = a1 + 8;
  }
  else {
    uint64_t v8 = *(void *)(*(void *)(a1 + 24) + 8 * a2);
  }
  long long v10 = *(_OWORD *)(a1 + 64);
  __int16 v11 = a2;
  return mrec_qsort_r<WordList>(*(void *)v8, *(unsigned int *)(v8 + 8), 4uLL, (CollMgr **)&v10, a5, a6, a7, a8);
}

void MrecInitModule_fstcore_fst(void)
{
  if (!gParDebugFstLatticeConstruction)
  {
    uint64_t v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugFstLatticeConstruction", (const char *)&unk_21408D4B3, (const char *)&unk_21408D4B3, 0, 0, 0);
    *unint64_t v1 = &unk_26C4E0858;
    gParDebugFstLatticeConstruction = (uint64_t)v1;
    uint64_t v2 = (uint64_t *)GlobalParamMgr::smpGlobalParamMgr;
    GlobalParamMgr::addParam(v2, (GlobalParam **)&gParDebugFstLatticeConstruction);
  }
}

uint64_t FstCore::FstCore(uint64_t a1, long long *a2, __int16 a3, uint64_t a4, uint64_t a5, const ArcGraph *a6)
{
  *(void *)a1 = 0x7FFFFFFFF0;
  *(_WORD *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = -16;
  *(unsigned char *)(a1 + 44) = 0;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  PelStats::resetStats((PelStats *)(a1 + 80));
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  PelStats::resetStats((PelStats *)(a1 + 256));
  SearchStats::resetStats(a1 + 432);
  SearchStats::resetStats(a1 + 464);
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  LatticeStats::LatticeStats((LatticeStats *)(a1 + 688));
  *(_DWORD *)(a1 + 1096) = 0;
  *(void *)(a1 + 1104) = 0;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_OWORD *)(a1 + 1312) = 0u;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_OWORD *)(a1 + 1360) = 0u;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(_OWORD *)(a1 + 1392) = 0u;
  *(_OWORD *)(a1 + 1408) = 0u;
  *(_OWORD *)(a1 + 1424) = 0u;
  *(_OWORD *)(a1 + 1440) = 0u;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(_OWORD *)(a1 + 1488) = 0u;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_OWORD *)(a1 + 1536) = 0u;
  *(_OWORD *)(a1 + 1552) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_OWORD *)(a1 + 1616) = 0u;
  *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 8);
  *(unsigned char *)(a1 + 1112) = *((unsigned char *)a2 + 79);
  if (a4) {
    int v12 = *(const PicMgr **)(a4 + 48);
  }
  else {
    int v12 = 0;
  }
  if (*((unsigned char *)a2 + 78))
  {
    BOOL v13 = MemChunkAlloc(0x138uLL, 0);
    int v14 = FwdBwd::FwdBwd((FwdBwd *)v13, v12);
  }
  else
  {
    FstCore::generateDecoder(*((_DWORD *)a2 + 7), *((unsigned __int8 *)a2 + 76), *((unsigned __int8 *)a2 + 64), *((unsigned __int8 *)a2 + 77), *((_DWORD *)a2 + 9) != 5000, *((_DWORD *)a2 + 17), *((_DWORD *)a2 + 18), v11);
  }
  *(void *)(a1 + 16) = v14;
  *((void *)v14 + 13) = a1 + 1120;
  long long v15 = *a2;
  *((void *)&v15 + 1) = *(void *)((char *)a2 + 12);
  *(_OWORD *)((char *)v14 + 8) = v15;
  SearchItf::setHashPropagateBestTokensFirst((uint64_t)v14, *((_DWORD *)a2 + 5));
  unsigned int v16 = *(_DWORD **)(a1 + 16);
  v16[7] = *((_DWORD *)a2 + 6);
  (*(void (**)(_DWORD *, const PicMgr *))(*(void *)v16 + 96))(v16, v12);
  (*(void (**)(void, const PicMgr *, uint64_t))(**(void **)(a1 + 16) + 104))(*(void *)(a1 + 16), v12, a5);
  uint64_t v17 = *(void *)(a1 + 16);
  *(void *)(v17 + 56) = a4;
  uint64_t v18 = **(void **)(a4 + 48);
  *(_DWORD *)(v17 + 64) = *(_DWORD *)v18;
  *(_WORD *)(v17 + 68) = *(_WORD *)(v18 + 56);
  *(void *)(v17 + 72) = *((void *)a2 + 4);
  SearchItf::setArcGraph((SearchItf *)v17, a6);
  (*(void (**)(void, void, BOOL))(**(void **)(a1 + 16) + 144))(*(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 24), a5 == 2);
  *(void *)(a1 + 60) = *((void *)a2 + 5);
  unsigned int v19 = MemChunkAlloc(0xD0uLL, 0);
  *(void *)(a1 + 72) = SearchLMScorer::SearchLMScorer((uint64_t)v19, *((_DWORD *)a2 + 12), *((unsigned char *)a2 + 52), *((_DWORD *)a2 + 14), *((_DWORD *)a2 + 15), 0, 0, 0, 0, 0);
  return a1;
}

void FstCore::~FstCore(SearchItf **this)
{
  this[2] = 0;
  DgnDelete<SearchLMScorer>(this[9]);
  this[9] = 0;
  DgnDelete<Constraint>(this[138]);
  this[138] = 0;
}

uint64_t DgnDelete<SearchItf>(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = (void *)result;
    (*(void (**)(uint64_t))(*(void *)result + 16))(result);
    return MemChunkFree(v1, 0);
  }
  return result;
}

SearchLMScorer *DgnDelete<SearchLMScorer>(SearchLMScorer *result)
{
  if (result)
  {
    SearchLMScorer::~SearchLMScorer(result);
    return (SearchLMScorer *)MemChunkFree(v1, 0);
  }
  return result;
}

Constraint *DgnDelete<Constraint>(Constraint *result)
{
  if (result)
  {
    Constraint::~Constraint(result);
    return (Constraint *)MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t FstCore::beginTopRecPassSyncRecogEmbedded(FstCore *this, int a2, uint64_t a3, PelScorer *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *((void *)this + 4) = a4;
  int v9 = *((_DWORD *)this + 12) * a2;
  *((_DWORD *)this + 13) = a2;
  *((_DWORD *)this + 14) = v9;
  *((_DWORD *)this + 10) = a3;
  *(_DWORD *)this = a5;
  uint64_t v10 = *((void *)this + 2);
  int v11 = *(_DWORD *)(v10 + 128);
  if (v11)
  {
    if (v11 != 1) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 202, (uint64_t)"fst/fstcore", 4, (uint64_t)&errStr_fst_fstcore_E_FST_TOO_MANY_EMBEDDED_TRANSDUCERS, a7, a8, *(_DWORD *)(v10 + 128));
    }
    uint64_t ArcGraphOrThrow = ArcGraphMgr::getArcGraphOrThrow((ArcGraphMgr *)ArcGraphMgr::smpArcGraphMgr, *(unsigned __int16 *)(*(void *)(v10 + 120) + 6), a3, (uint64_t)a4, a5, a6, a7, a8);
    uint64_t v10 = *((void *)this + 2);
  }
  else
  {
    uint64_t ArcGraphOrThrow = 0;
  }
  int v14 = *(uint64_t (**)(uint64_t, PelScorer *, uint64_t))(*(void *)v10 + 48);

  return v14(v10, a4, ArcGraphOrThrow);
}

uint64_t FstCore::beginTopRecPassSyncRecog(FstCore *this, int a2, uint64_t a3, PelScorer *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  FstCore::beginTopRecPassSyncRecogEmbedded(this, a2, a3, a4, 0, a6, a7, a8);
  PelScoreCache::addCacheClient(*(void *)(*((void *)this + 4) + 120), this);
  *((unsigned char *)this + 44) = 1;

  return FstCore::seedTheory(this, 0, 0, 4294967294);
}

uint64_t FstCore::seedTheory(FstCore *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*((unsigned char *)this + 24)) {
    a3 = (2 * a3) | 1u;
  }
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, char *))(**((void **)this + 2) + 112))(*((void *)this + 2), a2, a3, a4, (char *)this + 432);
}

uint64_t FstCore::endTopRecPassSyncRecog(FstCore *this)
{
  uint64_t v2 = *(PelScoreCache **)(*((void *)this + 4) + 120);
  PelScoreCache::removeCacheClientOfFramesFromTimeOn((uint64_t)v2, *(_DWORD *)this, (void *)1, this);
  v3.n128_f64[0] = PelScoreCache::removeCacheClient(v2, this);
  *((unsigned char *)this + 44) = 0;
  *((void *)this + 4) = 0;
  uint64_t v4 = *(uint64_t (**)(__n128))(**((void **)this + 2) + 56);

  return v4(v3);
}

uint64_t FstCore::endTopRecPassSyncRecogEmbedded(FstCore *this)
{
  *((void *)this + 4) = 0;
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 56))();
}

uint64_t FstCore::doFrame(unsigned int *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (void *)*((void *)a1 + 4);
  uint64_t v5 = v4[15];
  (*(void (**)(void *, uint64_t, void, uint64_t, unsigned int *, void))(*v4 + 56))(v4, v3, 0, a2, a1 + 20, *((unsigned __int8 *)a1 + 1112));
  FstCore::doFrameEmbedded((FstCore *)a1, 5000, 1);
  (*(void (**)(void, uint64_t, unsigned int *))(**((void **)a1 + 4) + 64))(*((void *)a1 + 4), v3, a1 + 20);

  return PelScoreCache::removeCacheClientOfFrame(v5, v3, a1);
}

uint64_t FstCore::doFrameEmbedded(FstCore *this, uint64_t a2, int a3)
{
  if (*((unsigned char *)this + 24))
  {
    uint64_t v6 = (2 * *(_DWORD *)this);
    if (a3)
    {
      uint64_t v7 = (SearchItf *)*((void *)this + 2);
      if (*(int *)this <= 0) {
        int v8 = -1;
      }
      else {
        int v8 = v6 - 1;
      }
      int v9 = (*(uint64_t (**)(void))(*(void *)v7 + 184))(*((void *)this + 2));
      a2 = SearchItf::normalizeBestAndComputeEstimatedThresh(v7, v8, v9);
    }
    (*(void (**)(void, uint64_t, uint64_t, char *, void))(**((void **)this + 2) + 8))(*((void *)this + 2), v6, a2, (char *)this + 432, 0);
    if (a3)
    {
      uint64_t v10 = (SearchItf *)*((void *)this + 2);
      int v11 = (*(uint64_t (**)(SearchItf *))(*(void *)v10 + 184))(v10);
      SearchItf::normalizeBestAndComputeEstimatedThresh(v10, v6, v11);
    }
    int v12 = *(uint64_t (**)(void))(**((void **)this + 2) + 8);
  }
  else
  {
    if (a3)
    {
      BOOL v13 = (SearchItf *)*((void *)this + 2);
      if (*(int *)this <= 0) {
        int v14 = -1;
      }
      else {
        int v14 = *(_DWORD *)this - 1;
      }
      int v15 = (*(uint64_t (**)(void))(*(void *)v13 + 184))(*((void *)this + 2));
      SearchItf::normalizeBestAndComputeEstimatedThresh(v13, v14, v15);
    }
    int v12 = *(uint64_t (**)(void))(**((void **)this + 2) + 8);
  }
  uint64_t result = v12();
  ++*((_DWORD *)this + 108);
  ++*(_DWORD *)this;
  return result;
}

uint64_t FstCore::getNActiveStates(FstCore *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 152))();
}

uint64_t FstCore::setRecogEndTime(uint64_t this, int a2)
{
  *(_DWORD *)(this + 40) = a2;
  return this;
}

uint64_t FstCore::beginTopRecSyncRecog(uint64_t a1, int a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 48) = a2;
  *(_DWORD *)a1 = -16;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_OWORD *)(a1 + 1312) = 0u;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_OWORD *)(a1 + 1360) = 0u;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(_OWORD *)(a1 + 1392) = 0u;
  *(_OWORD *)(a1 + 1408) = 0u;
  *(_OWORD *)(a1 + 1424) = 0u;
  *(_OWORD *)(a1 + 1440) = 0u;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(_OWORD *)(a1 + 1488) = 0u;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_OWORD *)(a1 + 1536) = 0u;
  *(_OWORD *)(a1 + 1552) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_OWORD *)(a1 + 1616) = 0u;
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), a3);
  uint64_t v4 = ***(uint64_t (****)(void))(a1 + 16);

  return v4();
}

double FstStats::resetStats(FstStats *this)
{
  double result = 0.0;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

double FstCore::endTopRecSyncRecog(FstCore *this)
{
  (*(void (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  double result = 0.0;
  *((_OWORD *)this + 70) = 0u;
  *((_OWORD *)this + 71) = 0u;
  *((_OWORD *)this + 72) = 0u;
  *((_OWORD *)this + 73) = 0u;
  *((_OWORD *)this + 74) = 0u;
  *((_OWORD *)this + 75) = 0u;
  *((_OWORD *)this + 76) = 0u;
  *((_OWORD *)this + 77) = 0u;
  *((_OWORD *)this + 78) = 0u;
  *((_OWORD *)this + 79) = 0u;
  *((_OWORD *)this + 80) = 0u;
  *((_OWORD *)this + 81) = 0u;
  *((_OWORD *)this + 82) = 0u;
  *((_OWORD *)this + 83) = 0u;
  *((_OWORD *)this + 84) = 0u;
  *((_OWORD *)this + 85) = 0u;
  *((_OWORD *)this + 86) = 0u;
  *((_OWORD *)this + 87) = 0u;
  *((_OWORD *)this + 88) = 0u;
  *((_OWORD *)this + 89) = 0u;
  *((_OWORD *)this + 90) = 0u;
  *((_OWORD *)this + 91) = 0u;
  *((_OWORD *)this + 92) = 0u;
  *((_OWORD *)this + 93) = 0u;
  *((_OWORD *)this + 94) = 0u;
  *((_OWORD *)this + 95) = 0u;
  *((_OWORD *)this + 96) = 0u;
  *((_OWORD *)this + 97) = 0u;
  *((_OWORD *)this + 98) = 0u;
  *((_OWORD *)this + 99) = 0u;
  *((_OWORD *)this + 100) = 0u;
  *((_OWORD *)this + 101) = 0u;
  return result;
}

BOOL FstCore::checkForDone(FstCore *this)
{
  int v1 = *((_DWORD *)this + 10);
  return v1 != -16 && *(_DWORD *)this == v1;
}

void FstCore::printSize(FstCore *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 382, (DgnString *)&v228);
  if (v229) {
    unsigned int v16 = (void *)v228;
  }
  else {
    unsigned int v16 = &unk_21408D4B3;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_21408D4B3, a3, &unk_21408D4B3, v16);
  DgnString::~DgnString((DgnString *)&v228);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_21408D4B3);
  uint64_t v21 = (a3 + 1);
  uint64_t v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 383, (DgnString *)&v228);
  if (v229) {
    __int16 v27 = (void *)v228;
  }
  else {
    __int16 v27 = &unk_21408D4B3;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_21408D4B3, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 384, (DgnString *)&v228);
  if (v229) {
    uint64_t v32 = (void *)v228;
  }
  else {
    uint64_t v32 = &unk_21408D4B3;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_21408D4B3, (34 - a3), (34 - a3), v32, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += 2;
  *a5 += 2;
  uint64_t v33 = *((void *)this + 2);
  if (v33)
  {
    unint64_t v227 = 0;
    unint64_t v228 = 0;
    unint64_t v226 = 0;
    (*(void (**)(uint64_t, uint64_t, void, unint64_t *, unint64_t *, unint64_t *))(*(void *)v33 + 64))(v33, 0xFFFFFFFFLL, (a3 + 1), &v228, &v227, &v226);
    *a4 += v228;
    *a5 += v227;
    *a6 += v226;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v34 = 4;
  }
  else {
    uint64_t v34 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 385, (DgnString *)&v228);
  if (v229) {
    uint64_t v39 = (void *)v228;
  }
  else {
    uint64_t v39 = &unk_21408D4B3;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v35, v36, v37, v38, (a3 + 1), &unk_21408D4B3, (34 - a3), (34 - a3), v39, v34, v34, 0);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += v34;
  *a5 += v34;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 387, (DgnString *)&v228);
  if (v229) {
    uint64_t v44 = (void *)v228;
  }
  else {
    uint64_t v44 = &unk_21408D4B3;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v40, v41, v42, v43, (a3 + 1), &unk_21408D4B3, (34 - a3), (34 - a3), v44, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v228);
  ++*a4;
  ++*a5;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v45 = 4;
  }
  else {
    uint64_t v45 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 388, (DgnString *)&v228);
  if (v229) {
    uint64_t v50 = (void *)v228;
  }
  else {
    uint64_t v50 = &unk_21408D4B3;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v46, v47, v48, v49, (a3 + 1), &unk_21408D4B3, (34 - a3), (34 - a3), v50, v45, v45, 0);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += v45;
  *a5 += v45;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 390, (DgnString *)&v228);
  if (v229) {
    int v55 = (void *)v228;
  }
  else {
    int v55 = &unk_21408D4B3;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v51, v52, v53, v54, (a3 + 1), &unk_21408D4B3, (34 - a3), (34 - a3), v55, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 392, (DgnString *)&v228);
  if (v229) {
    uint64_t v60 = (void *)v228;
  }
  else {
    uint64_t v60 = &unk_21408D4B3;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v56, v57, v58, v59, (a3 + 1), &unk_21408D4B3, (34 - a3), (34 - a3), v60, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v228);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 394, (DgnString *)&v228);
  if (v229) {
    unint64_t v65 = (void *)v228;
  }
  else {
    unint64_t v65 = &unk_21408D4B3;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v61, v62, v63, v64, (a3 + 1), &unk_21408D4B3, (34 - a3), (34 - a3), v65, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 396, (DgnString *)&v228);
  if (v229) {
    unsigned int v70 = (void *)v228;
  }
  else {
    unsigned int v70 = &unk_21408D4B3;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v66, v67, v68, v69, (a3 + 1), &unk_21408D4B3, (34 - a3), (34 - a3), v70, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 398, (DgnString *)&v228);
  if (v229) {
    uint64_t v75 = (void *)v228;
  }
  else {
    uint64_t v75 = &unk_21408D4B3;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v71, v72, v73, v74, (a3 + 1), &unk_21408D4B3, (34 - a3), (34 - a3), v75, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 400, (DgnString *)&v228);
  if (v229) {
    uint64_t v80 = (void *)v228;
  }
  else {
    uint64_t v80 = &unk_21408D4B3;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v76, v77, v78, v79, (a3 + 1), &unk_21408D4B3, (34 - a3), (34 - a3), v80, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 402, (DgnString *)&v228);
  if (v229) {
    uint64_t v85 = (void *)v228;
  }
  else {
    uint64_t v85 = &unk_21408D4B3;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v81, v82, v83, v84, (a3 + 1), &unk_21408D4B3, (34 - a3), (34 - a3), v85, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += 4;
  *a5 += 4;
  uint64_t v86 = (SearchLMScorer *)*((void *)this + 9);
  if (v86)
  {
    unint64_t v227 = 0;
    unint64_t v228 = 0;
    unint64_t v226 = 0;
    SearchLMScorer::printSize(v86, 0xFFFFFFFFLL, (a3 + 1), &v228, &v227, &v226);
    *a4 += v228;
    *a5 += v227;
    *a6 += v226;
  }
  uint64_t v225 = a3;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v87 = 4;
  }
  else {
    uint64_t v87 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 404, (DgnString *)&v228);
  if (v229) {
    unint64_t v92 = (void *)v228;
  }
  else {
    unint64_t v92 = &unk_21408D4B3;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, (a3 + 1), &unk_21408D4B3, (34 - a3), (34 - a3), v92, v87, v87, 0);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += v87;
  *a5 += v87;
  uint64_t v93 = PelStats::sizeObject((uint64_t)this + 80, 0);
  uint64_t v94 = PelStats::sizeObject((uint64_t)this + 80, 1);
  uint64_t v95 = PelStats::sizeObject((uint64_t)this + 80, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 406, (DgnString *)&v228);
  if (v229) {
    unint64_t v100 = (void *)v228;
  }
  else {
    unint64_t v100 = &unk_21408D4B3;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v96, v97, v98, v99, v21, &unk_21408D4B3, v22, v22, v100, v93, v94, v95);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += v93;
  *a5 += v94;
  *a6 += v95;
  uint64_t v101 = PelStats::sizeObject((uint64_t)this + 256, 0);
  uint64_t v102 = PelStats::sizeObject((uint64_t)this + 256, 1);
  uint64_t v103 = PelStats::sizeObject((uint64_t)this + 256, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 408, (DgnString *)&v228);
  if (v229) {
    unsigned int v108 = (void *)v228;
  }
  else {
    unsigned int v108 = &unk_21408D4B3;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v104, v105, v106, v107, v21, &unk_21408D4B3, v22, v22, v108, v101, v102, v103);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += v101;
  *a5 += v102;
  *a6 += v103;
  uint64_t v109 = sizeObject((uint64_t)this + 432, 0);
  uint64_t v110 = sizeObject((uint64_t)this + 432, 1);
  uint64_t v111 = sizeObject((uint64_t)this + 432, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 410, (DgnString *)&v228);
  if (v229) {
    uint64_t v116 = (void *)v228;
  }
  else {
    uint64_t v116 = &unk_21408D4B3;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v112, v113, v114, v115, v21, &unk_21408D4B3, v22, v22, v116, v109, v110, v111);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += v109;
  *a5 += v110;
  *a6 += v111;
  uint64_t v117 = sizeObject((uint64_t)this + 464, 0);
  uint64_t v118 = sizeObject((uint64_t)this + 464, 1);
  uint64_t v119 = sizeObject((uint64_t)this + 464, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 412, (DgnString *)&v228);
  if (v229) {
    uint64_t v124 = (void *)v228;
  }
  else {
    uint64_t v124 = &unk_21408D4B3;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v120, v121, v122, v123, v21, &unk_21408D4B3, v22, v22, v124, v117, v118, v119);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += v117;
  *a5 += v118;
  *a6 += v119;
  uint64_t v125 = SnapTime::sizeObject((uint64_t)this + 496, 0);
  uint64_t v126 = SnapTime::sizeObject((uint64_t)this + 496, 1);
  uint64_t v127 = SnapTime::sizeObject((uint64_t)this + 496, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 414, (DgnString *)&v228);
  if (v229) {
    uint64_t v132 = (void *)v228;
  }
  else {
    uint64_t v132 = &unk_21408D4B3;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v128, v129, v130, v131, v21, &unk_21408D4B3, v22, v22, v132, v125, v126, v127);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += v125;
  *a5 += v126;
  *a6 += v127;
  uint64_t v133 = SnapTime::sizeObject((uint64_t)this + 528, 0);
  uint64_t v134 = SnapTime::sizeObject((uint64_t)this + 528, 1);
  uint64_t v135 = SnapTime::sizeObject((uint64_t)this + 528, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 416, (DgnString *)&v228);
  if (v229) {
    uint64_t v140 = (void *)v228;
  }
  else {
    uint64_t v140 = &unk_21408D4B3;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v136, v137, v138, v139, v21, &unk_21408D4B3, v22, v22, v140, v133, v134, v135);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += v133;
  *a5 += v134;
  *a6 += v135;
  uint64_t v141 = SnapTime::sizeObject((uint64_t)this + 560, 0);
  uint64_t v142 = SnapTime::sizeObject((uint64_t)this + 560, 1);
  uint64_t v143 = SnapTime::sizeObject((uint64_t)this + 560, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 418, (DgnString *)&v228);
  if (v229) {
    uint64_t v148 = (void *)v228;
  }
  else {
    uint64_t v148 = &unk_21408D4B3;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v144, v145, v146, v147, v21, &unk_21408D4B3, v22, v22, v148, v141, v142, v143);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += v141;
  *a5 += v142;
  *a6 += v143;
  uint64_t v149 = SnapTime::sizeObject((uint64_t)this + 592, 0);
  uint64_t v150 = SnapTime::sizeObject((uint64_t)this + 592, 1);
  uint64_t v151 = SnapTime::sizeObject((uint64_t)this + 592, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 420, (DgnString *)&v228);
  if (v229) {
    uint64_t v156 = (void *)v228;
  }
  else {
    uint64_t v156 = &unk_21408D4B3;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v152, v153, v154, v155, v21, &unk_21408D4B3, v22, v22, v156, v149, v150, v151);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += v149;
  *a5 += v150;
  *a6 += v151;
  uint64_t v157 = SnapTime::sizeObject((uint64_t)this + 624, 0);
  uint64_t v158 = SnapTime::sizeObject((uint64_t)this + 624, 1);
  uint64_t v159 = SnapTime::sizeObject((uint64_t)this + 624, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 422, (DgnString *)&v228);
  if (v229) {
    uint64_t v164 = (void *)v228;
  }
  else {
    uint64_t v164 = &unk_21408D4B3;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v160, v161, v162, v163, v21, &unk_21408D4B3, v22, v22, v164, v157, v158, v159);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += v157;
  *a5 += v158;
  *a6 += v159;
  uint64_t v165 = SnapTime::sizeObject((uint64_t)this + 656, 0);
  uint64_t v166 = SnapTime::sizeObject((uint64_t)this + 656, 1);
  uint64_t v167 = SnapTime::sizeObject((uint64_t)this + 656, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 424, (DgnString *)&v228);
  if (v229) {
    unsigned int v172 = (void *)v228;
  }
  else {
    unsigned int v172 = &unk_21408D4B3;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v168, v169, v170, v171, v21, &unk_21408D4B3, v22, v22, v172, v165, v166, v167);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += v165;
  *a5 += v166;
  *a6 += v167;
  uint64_t v173 = LatticeStats::sizeObject((uint64_t)this + 688, 0);
  uint64_t v174 = LatticeStats::sizeObject((uint64_t)this + 688, 1);
  uint64_t v175 = LatticeStats::sizeObject((uint64_t)this + 688, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 426, (DgnString *)&v228);
  if (v229) {
    uint64_t v180 = (void *)v228;
  }
  else {
    uint64_t v180 = &unk_21408D4B3;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v176, v177, v178, v179, v21, &unk_21408D4B3, v22, v22, v180, v173, v174, v175);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += v173;
  *a5 += v174;
  *a6 += v175;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 428, (DgnString *)&v228);
  if (v229) {
    uint64_t v185 = (void *)v228;
  }
  else {
    uint64_t v185 = &unk_21408D4B3;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v181, v182, v183, v184, v21, &unk_21408D4B3, v22, v22, v185, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 430, (DgnString *)&v228);
  if (v229) {
    uint64_t v190 = (void *)v228;
  }
  else {
    uint64_t v190 = &unk_21408D4B3;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v186, v187, v188, v189, v21, &unk_21408D4B3, v22, v22, v190, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += 4;
  *a5 += 4;
  int v191 = (Constraint *)*((void *)this + 138);
  if (v191)
  {
    unint64_t v227 = 0;
    unint64_t v228 = 0;
    unint64_t v226 = 0;
    Constraint::printSize(v191, 0xFFFFFFFFLL, v21, &v228, &v227, &v226);
    *a4 += v228;
    *a5 += v227;
    *a6 += v226;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v192 = 4;
  }
  else {
    uint64_t v192 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 432, (DgnString *)&v228);
  if (v229) {
    uint64_t v197 = (void *)v228;
  }
  else {
    uint64_t v197 = &unk_21408D4B3;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v193, v194, v195, v196, v21, &unk_21408D4B3, v22, v22, v197, v192, v192, 0);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += v192;
  *a5 += v192;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 434, (DgnString *)&v228);
  if (v229) {
    uint64_t v202 = (void *)v228;
  }
  else {
    uint64_t v202 = &unk_21408D4B3;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v198, v199, v200, v201, v21, &unk_21408D4B3, v22, v22, v202, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v228);
  ++*a4;
  ++*a5;
  uint64_t v203 = FstStats::sizeObject((uint64_t)this + 1120, 0);
  uint64_t v204 = FstStats::sizeObject((uint64_t)this + 1120, 1);
  uint64_t v205 = FstStats::sizeObject((uint64_t)this + 1120, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 435, (DgnString *)&v228);
  if (v229) {
    uint64_t v210 = (void *)v228;
  }
  else {
    uint64_t v210 = &unk_21408D4B3;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v206, v207, v208, v209, v21, &unk_21408D4B3, v22, v22, v210, v203, v204, v205);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += v203;
  *a5 += v204;
  *a6 += v205;
  uint64_t v211 = (char *)this + 1376;
  uint64_t v212 = FstStats::sizeObject((uint64_t)this + 1376, 0);
  uint64_t v213 = FstStats::sizeObject((uint64_t)v211, 1);
  uint64_t v214 = FstStats::sizeObject((uint64_t)v211, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 437, (DgnString *)&v228);
  if (v229) {
    uint64_t v219 = (void *)v228;
  }
  else {
    uint64_t v219 = &unk_21408D4B3;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v215, v216, v217, v218, v21, &unk_21408D4B3, v22, v22, v219, v212, v213, v214);
  DgnString::~DgnString((DgnString *)&v228);
  *a4 += v212;
  *a5 += v213;
  *a6 += v214;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 438, (DgnString *)&v228);
  if (v229) {
    uint64_t v224 = (void *)v228;
  }
  else {
    uint64_t v224 = &unk_21408D4B3;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v220, v221, v222, v223, v225, &unk_21408D4B3, (35 - v225), (35 - v225), v224, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v228);
}

void sub_213E1221C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

WordLattice *FstCore::makeRecognizerResults(FstCore *this, LatticeStats *a2)
{
  uint64_t v26 = 0;
  int v27 = 0;
  uint64_t v24 = 0;
  int v25 = 0;
  int v23 = 1879048192;
  v22[0] = 0;
  v22[1] = 0;
  if ((*(unsigned int (**)(void, uint64_t *, uint64_t *, int *, void *))(**((void **)this + 2) + 80))(*((void *)this + 2), &v26, &v24, &v23, v22))
  {
    SnapTime::recordTime((FstCore *)((char *)this + 496), 1, 1, 1, 1);
    SilentLattice = (WordLattice *)MemChunkAlloc(0x120uLL, 0);
    WordLattice::WordLattice(SilentLattice, *((_DWORD *)this + 10), *((_DWORD *)this + 13), *((_DWORD *)this + 14), *((_WORD *)this + 4), 1, (char)a2, 0, 1);
    (*(void (**)(void, WordLattice *, uint64_t *, uint64_t *, void))(**((void **)this + 2) + 72))(*((void *)this + 2), SilentLattice, &v26, &v24, *((unsigned __int8 *)this + 24));
    uint64_t v21 = 0;
    if (FstCore::maybeAddGrammarStates(this, (unsigned int **)SilentLattice, &v21, v5, v6, v7, v8, v9))
    {
      DgnDelete<WordLattice>((uint64_t)SilentLattice);
      SilentLattice = v21;
    }
    SnapTime::recordTime((FstCore *)((char *)this + 528), 1, 1, 1, 1);
    uint64_t v10 = *((void *)this + 138);
    if (*(_DWORD *)(v10 + 192)) {
      int v11 = (uint64_t *)(v10 + 184);
    }
    else {
      int v11 = 0;
    }
    WordLattice::computeParseTokens((uint64_t)SilentLattice, v10 + 168, v11);
    Lattice<WordLatticeLC>::minimize((uint64_t)SilentLattice);
    int v12 = FstCore::maybeRescoreLattice(this, SilentLattice);
    SnapTime::recordTime((FstCore *)((char *)this + 624), 1, 1, 1, 1);
    Lattice<WordLatticeLC>::minimize((uint64_t)SilentLattice);
    WordLattice::maybePruneToNumUniquePaths((uint64_t)SilentLattice, *((_DWORD *)this + 15));
    *((unsigned char *)SilentLattice + 210) = v12 == 1;
    WordLattice::fixStateIds((uint64_t)SilentLattice, v13, v14, v15, v16, v17, v18, v19);
  }
  else
  {
    SilentLattice = (WordLattice *)BackTraceLatticeBuilder::makeSilentLattice((BackTraceLatticeBuilder *)*((unsigned __int16 *)this + 4), *((_DWORD *)this + 10), *((_DWORD *)this + 13), *((_DWORD *)this + 14), 1, (uint64_t)this + 688, a2);
    *((unsigned char *)SilentLattice + 209) = 1;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v22);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v24);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v26);
  return SilentLattice;
}

void sub_213E124B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray(v4 - 48);
  _Unwind_Resume(a1);
}

uint64_t FstCore::maybeAddGrammarStates(FstCore *this, unsigned int **a2, WordLattice **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = (WordLattice *)a2;
  unsigned int v11 = *a2[2];
  int v12 = (unsigned __int16 *)*((void *)this + 138);
  uint64_t v124 = *(StateMgr **)(*(void *)(**(void **)VocMgr::smpVocMgr + 8 * *v12) + 56);
  if (*((_DWORD *)v12 + 44) == 1)
  {
    unsigned int v13 = **((_DWORD **)v12 + 21);
    uint64_t StateTransition = StateMgr::getStateTransition(v124, v13, 0, a4, a5, a6, a7, a8);
    int v15 = *(_DWORD *)(StateTransition + 8);
    if (!v15 || v15 == 1 && **(_DWORD **)StateTransition == v13)
    {
      uint64_t v16 = *((unsigned int *)v9 + 26);
      if (v16)
      {
        uint64_t v17 = (unsigned int *)*((void *)v9 + 12);
        uint64_t v18 = *((void *)v9 + 16);
        do
        {
          unsigned int v19 = *v17++;
          uint64_t v20 = v18 + 136 * v19;
          int v21 = *(_DWORD *)(v20 + 88) & 0xFFFFFF;
          *(_WORD *)(v20 + 92) = 0x3FFF;
          if ((v21 - 16777213) >= 2) {
            unsigned int v22 = v13;
          }
          else {
            unsigned int v22 = 0;
          }
          *(_DWORD *)(v20 + 96) = v22;
          --v16;
        }
        while (v16);
      }
      return 0;
    }
  }
  uint64_t v126 = MemChunkAlloc(0x68uLL, 0);
  HashKEV<ComposeLatticeNode,ComposeLatticeNode,ComposeLatticeNode>::HashKEV((uint64_t)v126, 0, 16);
  uint64_t v125 = MemChunkAlloc(0x70uLL, 0);
  Hash<CwidStatePair,CwidStatePair,CwidStatePair,BOOL>::Hash((uint64_t)v125, 0, 16);
  v140[0] = 0;
  v140[1] = 0;
  uint64_t v141 = 0;
  TEHeapSort<TimeQueEl>::make_space((uint64_t)v140, 64);
  uint64_t v121 = this;
  uint64_t v138 = 0;
  uint64_t v139 = 0;
  uint64_t v24 = *(unsigned int *)(*((void *)v9 + 10) + 24 * v11 + 20);
  if (v24 == -2)
  {
    unsigned int v25 = 2;
  }
  else
  {
    LODWORD(v26) = *((_DWORD *)v12 + 44);
    unsigned int v25 = 2;
    do
    {
      if (v26)
      {
        unint64_t v27 = 0;
        do
        {
          unint64_t v134 = 0;
          uint64_t v28 = *((void *)v9 + 16) + 136 * v24;
          unsigned int v29 = *(_DWORD *)(*((void *)v9 + 10) + 24 * *(unsigned int *)(v28 + 120));
          LODWORD(v28) = *(_DWORD *)(v28 + 88);
          v136.n128_u64[0] = __PAIR64__(*(_DWORD *)(*((void *)v12 + 21) + 4 * v27), v29);
          v136.n128_u64[1] = v28 | 0xFAFFFFFC00000000;
          unsigned int v137 = v25;
          if (HashKEV<ComposeLatticeNode,ComposeLatticeNode,ComposeLatticeNode>::insert((uint64_t)v126, &v136, &v134))
          {
            v136.n128_u32[0] = *(_DWORD *)(*((void *)v9 + 16) + 136 * v24 + 20)
                             + *(_DWORD *)(*((void *)v9 + 16) + 136 * v24 + 16)
                             + *(_DWORD *)(*((void *)v9 + 16) + 136 * v24 + 24);
            v136.n128_u64[1] = v134;
            TEHeapSort<TimeQueEl>::add_to_heap((uint64_t)v140, &v136);
            ++v25;
          }
          unsigned int v30 = v139;
          if (v139 == (unint64_t)HIDWORD(v139))
          {
            DgnArray<CWIDAC>::reallocElts((uint64_t)&v138, 1, 1);
            unsigned int v30 = v139;
          }
          uint64_t v31 = v138 + 24 * v30;
          *(_DWORD *)uint64_t v31 = 0;
          *(_DWORD *)(v31 + 4) = v25 - 1;
          *(void *)(v31 + 8) = 0xFAFFFFFC00000000;
          *(_DWORD *)(v31 + 16) = -83886084;
          *(_DWORD *)(v31 + 20) = v24;
          LODWORD(v139) = v139 + 1;
          ++v27;
          unint64_t v26 = *((unsigned int *)v12 + 44);
        }
        while (v27 < v26);
      }
      uint64_t v24 = *(unsigned int *)(*((void *)v9 + 16) + 136 * v24 + 128);
    }
    while (v24 != -2);
  }
  unint64_t v134 = 0;
  uint64_t v135 = 0;
  v136.n128_u64[0] = 0;
  unint64_t v32 = realloc_array(0, (void **)&v136, 0x40uLL, 0, 0, 1);
  uint64_t v120 = a3;
  unint64_t v134 = v136.n128_u64[0];
  LODWORD(v135) = 16;
  HIDWORD(v135) = v32 >> 2;
  if ((int)v141 >= 2)
  {
    uint64_t v33 = v9;
    while (1)
    {
      LODWORD(v133) = -16;
      *((void *)&v133 + 1) = 0;
      TEHeapSort<TimeQueEl>::remove_from_heap((int *)v140, &v133);
      uint64_t v39 = 0;
      uint64_t v40 = (unsigned int *)*((void *)&v133 + 1);
      LODWORD(v135) = 0;
      int v41 = *(_DWORD *)(*((void *)&v133 + 1) + 4);
      if (!HIDWORD(v135))
      {
        DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v134, 1, 1);
        uint64_t v39 = v135;
      }
      *(_DWORD *)(v134 + 4 * v39) = v41;
      BOOL v42 = __CFADD__(v135, 1);
      int v43 = v135 + 1;
      LODWORD(v135) = v135 + 1;
      if (!v42) {
        break;
      }
LABEL_61:
      if ((int)v141 <= 1) {
        goto LABEL_62;
      }
    }
    while (1)
    {
      unsigned int v44 = v43 - 1;
      uint64_t v45 = *(unsigned int *)(v134 + 4 * v44);
      LODWORD(v135) = v44;
      unsigned int v46 = *(_DWORD *)(*((void *)v124 + 62) + 4 * v45);
      if (!v46) {
        unsigned int v46 = v45;
      }
      uint64_t v47 = *(void *)v124 + 80 * v46;
      uint64_t v48 = *(unsigned int *)(v47 + 16);
      uint64_t v49 = StateMgr::getStateTransition(v124, v45, 0, v34, v35, v36, v37, v38);
      uint64_t v51 = v49;
      uint64_t v123 = v48;
      if (!v48 && *(_DWORD *)(v49 + 8))
      {
        unint64_t v52 = 0;
        unsigned int v53 = v135;
        do
        {
          int v54 = *(_DWORD *)(*(void *)v51 + 4 * v52);
          if (v53 == HIDWORD(v135))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v134, 1, 1);
            unsigned int v53 = v135;
          }
          *(_DWORD *)(v134 + 4 * v53) = v54;
          unsigned int v53 = v135 + 1;
          LODWORD(v135) = v135 + 1;
          ++v52;
        }
        while (v52 < *(unsigned int *)(v51 + 8));
      }
      uint64_t v55 = *(unsigned int *)(*((void *)v9 + 10) + 24 * *(unsigned int *)(*((void *)v9 + 2) + 4 * *v40) + 20);
      if (v55 != -2) {
        break;
      }
LABEL_60:
      int v43 = v135;
      if (!v135) {
        goto LABEL_61;
      }
    }
    uint64_t v122 = (int **)(v47 + 8);
    uint64_t v56 = *((void *)v9 + 16);
    while (1)
    {
      unsigned int v57 = *(_DWORD *)(v56 + 136 * v55 + 88);
      int v58 = v57 & 0xFFFFFF;
      if ((v57 & 0xFFFFFF) == 0xFFFFFD)
      {
        if (StateMgr::getEndOfUtteranceAllowed(v124, v45, v50, v34, v35, v36, v37, v38))
        {
          unsigned int v59 = v40[4];
          uint64_t v60 = *((void *)v40 + 1);
          unsigned int v61 = v139;
          if (v139 == (unint64_t)HIDWORD(v139))
          {
            DgnArray<CWIDAC>::reallocElts((uint64_t)&v138, 1, 1);
            unsigned int v61 = v139;
          }
          uint64_t v62 = v138 + 24 * v61;
          *(_DWORD *)uint64_t v62 = v59;
          *(_DWORD *)(v62 + 4) = 1;
          *(_DWORD *)(v62 + 8) = v45;
          *(void *)(v62 + 12) = v60;
          *(_DWORD *)(v62 + 20) = v55;
          LODWORD(v139) = v139 + 1;
        }
      }
      else
      {
        uint64_t v131 = (void *)__PAIR64__(v45, v57);
        Bucket = Hash<CwidStatePair,CwidStatePair,CwidStatePair,BOOL>::findBucket((uint64_t)v125, &v131);
        if (*Bucket)
        {
          if (*((unsigned char *)*Bucket + 20)) {
            goto LABEL_52;
          }
        }
        else
        {
          if (v123)
          {
            uint64_t v64 = v123;
            unint64_t v65 = *v122;
            while (1)
            {
              int v66 = *v65++;
              if (v66 == v58) {
                break;
              }
              if (!--v64) {
                goto LABEL_50;
              }
            }
            v136.n128_u8[0] = 1;
            Hash<CwidStatePair,CwidStatePair,CwidStatePair,BOOL>::add((uint64_t)v125, &v131, &v136);
LABEL_52:
            if (*(_DWORD *)(v51 + 8))
            {
              unint64_t v67 = 0;
              do
              {
                unsigned int v68 = *(_DWORD *)(*(void *)v51 + 4 * v67);
                uint64_t v129 = 0;
                uint64_t v69 = *((void *)v9 + 16) + 136 * v55;
                unsigned int v70 = *(_DWORD *)(*((void *)v9 + 10) + 24 * *(unsigned int *)(v69 + 120));
                LODWORD(v69) = *(_DWORD *)(v69 + 88);
                v136.n128_u64[0] = __PAIR64__(v68, v70);
                v136.n128_u64[1] = v69 | 0xFAFFFFFC00000000;
                unsigned int v137 = v25;
                if (HashKEV<ComposeLatticeNode,ComposeLatticeNode,ComposeLatticeNode>::insert((uint64_t)v126, &v136, &v129))
                {
                  v136.n128_u32[0] = *(_DWORD *)(*((void *)v9 + 16) + 136 * v55 + 20)
                                   + *(_DWORD *)(*((void *)v9 + 16) + 136 * v55 + 16)
                                   + *(_DWORD *)(*((void *)v9 + 16) + 136 * v55 + 24);
                  v136.n128_u64[1] = (unint64_t)v129;
                  TEHeapSort<TimeQueEl>::add_to_heap((uint64_t)v140, &v136);
                  ++v25;
                }
                unsigned int v71 = v40[4];
                int v72 = *((_DWORD *)v129 + 4);
                uint64_t v73 = *((void *)v40 + 1);
                unsigned int v74 = v139;
                if (v139 == (unint64_t)HIDWORD(v139))
                {
                  DgnArray<CWIDAC>::reallocElts((uint64_t)&v138, 1, 1);
                  unsigned int v74 = v139;
                }
                uint64_t v75 = v138 + 24 * v74;
                *(_DWORD *)uint64_t v75 = v71;
                *(_DWORD *)(v75 + 4) = v72;
                *(_DWORD *)(v75 + 8) = v45;
                *(void *)(v75 + 12) = v73;
                *(_DWORD *)(v75 + 20) = v55;
                LODWORD(v139) = v139 + 1;
                ++v67;
                uint64_t v9 = v33;
              }
              while (v67 < *(unsigned int *)(v51 + 8));
            }
            goto LABEL_59;
          }
LABEL_50:
          v136.n128_u8[0] = 0;
          Hash<CwidStatePair,CwidStatePair,CwidStatePair,BOOL>::add((uint64_t)v125, &v131, &v136);
        }
      }
LABEL_59:
      uint64_t v56 = *((void *)v9 + 16);
      uint64_t v55 = *(unsigned int *)(v56 + 136 * v55 + 128);
      if (v55 == -2) {
        goto LABEL_60;
      }
    }
  }
LABEL_62:
  unint64_t v76 = v139;
  __n128 v136 = 0uLL;
  if (v139)
  {
    *(void *)&long long v133 = 0;
    unint64_t v77 = realloc_array(0, (void **)&v133, 8 * v139, 0, 0, 1);
    uint64_t v78 = 0;
    unint64_t v79 = v77 >> 3;
    unint64_t v80 = v133;
    v136.n128_u64[0] = v133;
    v136.n128_u64[1] = __PAIR64__(v79, v76);
    uint64_t v81 = (unsigned int *)(v133 + 4);
    uint64_t v82 = (unsigned int *)(v138 + 4);
    do
    {
      unsigned int v83 = *v82;
      if (*v82 == 1)
      {
        *uint64_t v82 = v25;
        unsigned int v83 = v25;
      }
      *(v81 - 1) = v78;
      unsigned int *v81 = v83;
      ++v78;
      v81 += 2;
      v82 += 6;
    }
    while (v76 != v78);
    unint64_t v84 = v76;
  }
  else
  {
    unint64_t v80 = 0;
    unint64_t v84 = 0;
    v136.n128_u32[2] = 0;
  }
  mrec_qsort_r<SortLink>(v80, v84, 8);
  long long v133 = 0uLL;
  unsigned int v85 = v25 + 1;
  if (v25 == -1)
  {
    uint64_t v86 = 0;
  }
  else
  {
    uint64_t v131 = 0;
    HIDWORD(v133) = realloc_array(0, &v131, 4 * (v25 + 1), 0, 0, 1) >> 2;
    uint64_t v86 = v131;
    *(void *)&long long v133 = v131;
  }
  DWORD2(v133) = v25 + 1;
  if (v76)
  {
    uint64_t v87 = 0;
    uint64_t v88 = (unsigned int *)v136.n128_u64[0];
    uint64_t v89 = v138;
    unsigned int v90 = v25 + 1;
    do
    {
      unsigned int v91 = *v88;
      v88 += 2;
      uint64_t v92 = v89 + 24 * v91;
      unsigned int v95 = *(_DWORD *)(v92 + 4);
      uint64_t v93 = (unsigned int *)(v92 + 4);
      uint64_t v94 = v95;
      if (v95 != v90)
      {
        v86[v94] = v87;
        unsigned int v90 = *v93;
      }
      ++v87;
    }
    while (v84 != v87);
  }
  uint64_t v131 = 0;
  uint64_t v132 = 0;
  if (v25 == -1)
  {
    LODWORD(v132) = 0;
  }
  else
  {
    uint64_t v129 = 0;
    unint64_t v96 = realloc_array(0, &v129, 4 * (v25 + 1), 0, 0, 1);
    uint64_t v131 = v129;
    LODWORD(v132) = v25 + 1;
    HIDWORD(v132) = v96 >> 2;
    bzero(v129, 4 * (v25 + 1));
  }
  uint64_t v129 = 0;
  uint64_t v130 = 0;
  unsigned int v97 = 1;
  DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v129, 1, 1);
  uint64_t v98 = v129;
  uint64_t v99 = v131;
  *((_DWORD *)v129 + v130) = v25;
  LODWORD(v130) = v130 + 1;
  v99[v25] = 1;
  int v100 = v130;
  if (v130)
  {
    unsigned int v97 = 1;
    do
    {
      uint64_t v101 = v98[--v100];
      LODWORD(v130) = v100;
      if (v101)
      {
        unsigned int v102 = *(_DWORD *)(v133 + 4 * v101);
        do
        {
          unsigned int v103 = *(_DWORD *)(v136.n128_u64[0] + 8 * v102);
          if (*(_DWORD *)(v138 + 24 * v103 + 4) != v101) {
            break;
          }
          uint64_t v104 = *(unsigned int *)(v138 + 24 * v103);
          if (!*((_DWORD *)v131 + v104))
          {
            *((_DWORD *)v131 + v104) = 1;
            uint64_t v105 = v130;
            if (v130 == (unint64_t)HIDWORD(v130))
            {
              DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v129, 1, 1);
              uint64_t v105 = v130;
              uint64_t v98 = v129;
            }
            v98[v105] = v104;
            int v100 = v130 + 1;
            LODWORD(v130) = v130 + 1;
            ++v97;
          }
          ++v102;
        }
        while (v102 < v76);
      }
    }
    while (v100);
  }
  uint64_t v106 = MemChunkAlloc(0x120uLL, 0);
  WordLattice::WordLattice((WordLattice *)v106, *((_DWORD *)v121 + 10), *((_DWORD *)v121 + 13), *((_DWORD *)v121 + 14), *((_WORD *)v121 + 4), 1, 0, 0, 1);
  uint64_t v127 = 0;
  uint64_t v128 = 0;
  if (v97)
  {
    uint64_t v142 = 0;
    HIDWORD(v128) = realloc_array(0, &v142, 4 * v97, 0, 0, 1) >> 2;
    uint64_t v127 = v142;
  }
  LODWORD(v128) = v97;
  if (v85)
  {
    uint64_t v107 = 0;
    int v108 = 0;
    uint64_t v109 = 4 * v85;
    do
    {
      if (*(int *)((char *)v131 + v107) < 1)
      {
        *(_DWORD *)((char *)v131 + v107) = -1;
      }
      else
      {
        *(_DWORD *)((char *)v131 + v107) = v108;
        v127[v108++] = Lattice<WordLatticeLC>::createNode((uint64_t)v106);
      }
      v107 += 4;
    }
    while (v109 != v107);
  }
  unint64_t v110 = v139;
  if (v139)
  {
    uint64_t v111 = 0;
    unint64_t v112 = 0;
    do
    {
      uint64_t v113 = *(unsigned int *)(v138 + v111 + 4);
      uint64_t v114 = (unsigned int *)v131;
      if ((*((_DWORD *)v131 + v113) & 0x80000000) == 0)
      {
        uint64_t v115 = *(unsigned int *)(v138 + v111);
        if ((*((_DWORD *)v131 + v115) & 0x80000000) == 0)
        {
          uint64_t v116 = v138 + v111;
          uint64_t v117 = *((void *)v9 + 16) + 136 * *(unsigned int *)(v138 + v111 + 20);
          int v118 = *(_DWORD *)(v117 + 88) & 0xFFFFFF;
          *(_WORD *)(v117 + 92) = 0x3FFF;
          if ((v118 - 16777213) >= 2) {
            int v119 = *(_DWORD *)(v116 + 8);
          }
          else {
            int v119 = 0;
          }
          *(_DWORD *)(v117 + 96) = v119;
          *(void *)(v117 + 104) = *(void *)(v116 + 12);
          Lattice<WordLatticeLC>::maybeCreateAndConnectLink(v106, v127[v114[v115]], (const WordLatticeLC *)v127[v114[v113]], (WordLatticeLC *)v117, 1, 0);
          unint64_t v110 = v139;
        }
      }
      ++v112;
      v111 += 24;
    }
    while (v112 < v110);
  }
  *uint64_t v120 = (WordLattice *)v106;
  DgnDelete<Hash<CWIDAtFrame,CWIDAtFrame,CWIDAtFrame,unsigned int>>((void (***)(void))v126);
  DgnDelete<Hash<CWIDAtFrame,CWIDAtFrame,CWIDAtFrame,unsigned int>>((void (***)(void))v125);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v127);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v129);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v131);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v133);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v136);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v134);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v138);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v140);
  return 1;
}

void sub_213E12F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a19);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a21);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a23);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a27);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a25);
  DgnIArray<Utterance *>::~DgnIArray(v27 - 152);
  DgnIArray<Utterance *>::~DgnIArray(v27 - 136);
  _Unwind_Resume(a1);
}

uint64_t Lattice<WordLatticeLC>::minimize(uint64_t result)
{
  if (!*(unsigned char *)(result + 8))
  {
    unint64_t v1 = result;
    double result = (uint64_t)Lattice<WordLatticeLC>::gc((void *)result);
    if (*(_DWORD *)(v1 + 24) >= 2u)
    {
      Lattice<WordLatticeLC>::minimizeDAG(v1);
      double result = Lattice<WordLatticeLC>::topSortInternal(v1, 0);
    }
    *(unsigned char *)(v1 + 8) = 1;
  }
  return result;
}

uint64_t FstCore::maybeRescoreLattice(FstCore *this, WordLattice *a2)
{
  uint64_t v4 = (void **)VocMgr::smpVocMgr;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v31, 1, 1);
  unsigned int v5 = -50331650;
  *(_DWORD *)(v31 + 4 * v32) = -50331650;
  LODWORD(v32) = v32 + 1;
  SearchLMScorer::setInitialContext(*((_DWORD **)this + 9), &v31);
  uint64_t v6 = *((void *)this + 9);
  if (!*(unsigned char *)(v6 + 51))
  {
    int v7 = *(unsigned __int8 *)(v6 + 54);
    if (!v7)
    {
      int v24 = 0;
      goto LABEL_32;
    }
  }
  SnapTime::recordTime((FstCore *)((char *)this + 560), 1, 1, 1, 1);
  unsigned int v29 = 0;
  uint64_t v30 = 0;
  if (!*((_DWORD *)a2 + 26))
  {
LABEL_30:
    char v21 = 0;
    char v20 = 0;
    goto LABEL_31;
  }
  unint64_t v8 = 0;
  do
  {
    uint64_t v9 = *((void *)a2 + 16) + 136 * *(unsigned int *)(*((void *)a2 + 12) + 4 * v8);
    unsigned int v12 = *(_DWORD *)(v9 + 88);
    uint64_t v10 = (unsigned int *)(v9 + 88);
    unsigned int v11 = v12;
    if (v12 >> 27 != 31)
    {
      int v13 = v30;
      if (!v30) {
        goto LABEL_12;
      }
      uint64_t v14 = v29;
      uint64_t v15 = v30;
      uint64_t v16 = 0xFFFFFFFFLL;
      while (1)
      {
        int v17 = *v14++;
        if (v17 == v11 >> 25) {
          break;
        }
        --v16;
        if (!--v15) {
          goto LABEL_12;
        }
      }
      if (!v16)
      {
LABEL_12:
        uint64_t v18 = *((void *)this + 138);
        if ((*(_DWORD *)(v18 + 68) & 0xFFFFFFFD) == 0)
        {
          if (!Constraint::isLMAllowedForState(v18, v10)) {
            goto LABEL_18;
          }
          int v13 = v30;
        }
        if (v13 == HIDWORD(v30))
        {
          DgnPrimArray<short>::reallocElts((uint64_t)&v29, 1, 1);
          int v13 = v30;
        }
        v29[v13] = v11 >> 25;
        LODWORD(v30) = v13 + 1;
      }
    }
LABEL_18:
    ++v8;
  }
  while (v8 < *((unsigned int *)a2 + 26));
  if (!v30) {
    goto LABEL_30;
  }
  unint64_t v19 = 0;
  char v20 = 0;
  char v21 = 0;
  do
  {
    uint64_t v22 = *(void *)(*(void *)(**v4 + 8 * v29[v19]) + 72);
    uint64_t v23 = *((void *)this + 9);
    if (*(unsigned char *)(v23 + 51))
    {
      if ((*(unsigned int (**)(void, unsigned int *))(*(void *)v22 + 448))(*(void *)(*(void *)(**v4 + 8 * v29[v19]) + 72), v10))
      {
        char v21 = 1;
      }
      uint64_t v23 = *((void *)this + 9);
    }
    if (*(unsigned char *)(v23 + 54) && (*(unsigned int (**)(uint64_t, void))(*(void *)v22 + 312))(v22, 0)) {
      char v20 = 1;
    }
    ++v19;
  }
  while (v19 < v30);
LABEL_31:
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v29);
  int v24 = v21 & 1;
  int v7 = v20 & 1;
  if ((v21 & 1) == 0)
  {
LABEL_32:
    if (!v7)
    {
      uint64_t v25 = 0;
      goto LABEL_42;
    }
  }
  uint64_t v26 = *((void *)this + 9);
  if (*(_DWORD *)(v26 + 112)) {
    unsigned int v5 = **(_DWORD **)(v26 + 104);
  }
  if (v24) {
    unsigned int v27 = 4;
  }
  else {
    unsigned int v27 = 3;
  }
  uint64_t v25 = WordLattice::expandLMContext(a2, v27, v5, *((_DWORD *)this + 16), (uint64_t)this + 688, (_DWORD *)this + 274, (_DWORD *)this + 275);
  if (v25 != 1)
  {
    SnapTime::recordTime((FstCore *)((char *)this + 592), 1, 1, 1, 1);
    WordLattice::rescoreLatticeLM(a2, *((SearchLMScorer **)this + 9), (FstCore *)((char *)this + 688), v24);
  }
LABEL_42:
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v31);
  return v25;
}

void sub_213E13378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void FstCore::estimateActivePelsThisFrame(FstCore *this, BitArray *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t FstCore::makeRecognizer(long long *a1, __int16 a2, uint64_t a3, uint64_t a4, const ArcGraph *a5)
{
  uint64_t v10 = MemChunkAlloc(0x660uLL, 0);

  return FstCore::FstCore((uint64_t)v10, a1, a2, a3, a4, a5);
}

__n128 FstCoreOptions::FstCoreOptions(uint64_t a1, int a2, int a3, char a4, int a5, int a6, int a7, int a8, __n128 a9, int a10, int a11, char a12, int a13, int a14, char a15, int a16, int a17, char a18, char a19, char a20,char a21)
{
  __n128 result = a9;
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(unsigned char *)(a1 + 8) = a4;
  *(_DWORD *)(a1 + 12) = a5;
  *(_DWORD *)(a1 + 16) = a6;
  *(_DWORD *)(a1 + 20) = a7;
  *(_DWORD *)(a1 + 24) = a8;
  *(__n128 *)(a1 + 28) = a9;
  *(_DWORD *)(a1 + 44) = a10;
  *(_DWORD *)(a1 + 48) = a11;
  *(unsigned char *)(a1 + 52) = a12;
  *(_DWORD *)(a1 + 56) = a13;
  *(_DWORD *)(a1 + 60) = a14;
  *(unsigned char *)(a1 + 64) = a15;
  *(_DWORD *)(a1 + 68) = a16;
  *(_DWORD *)(a1 + 72) = a17;
  *(unsigned char *)(a1 + 76) = a18;
  *(unsigned char *)(a1 + 77) = a19;
  *(unsigned char *)(a1 + 78) = a20;
  *(unsigned char *)(a1 + 79) = a21;
  return result;
}

double FstCoreOptions::FstCoreOptions(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(_OWORD *)(a1 + 28) = *(_OWORD *)(a2 + 28);
  *(void *)(a1 + 44) = *(void *)(a2 + 44);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  double result = *(double *)(a2 + 68);
  *(double *)(a1 + 68) = result;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  return result;
}

uint64_t TEHeapSort<TimeQueEl>::make_space(uint64_t a1, int a2)
{
  uint64_t v4 = (a2 + 1);
  unsigned int v5 = *(_DWORD *)(a1 + 12);
  if (v4 > v5) {
    DgnArray<DgnPrimArray<double>>::reallocElts(a1, v4 - v5, 0);
  }
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  if (v6 < v4)
  {
    uint64_t v7 = v4 - v6;
    unint64_t v8 = (void *)(*(void *)a1 + 16 * v6 + 8);
    do
    {
      *((_DWORD *)v8 - 2) = -16;
      *unint64_t v8 = 0;
      v8 += 2;
      --v7;
    }
    while (v7);
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = 1;
  *(_DWORD *)(a1 + 20) = a2;
  return 0;
}

uint64_t HashKEV<ComposeLatticeNode,ComposeLatticeNode,ComposeLatticeNode>::insert(uint64_t a1, _DWORD *a2, void *a3)
{
  unsigned int v6 = *(_DWORD *)(a1 + 12);
  if (*(_DWORD *)(a1 + 8) >= v6 >> 1) {
    HashKEV<unsigned int,unsigned int,CWIDScope>::upSize(a1, 2 * v6);
  }
  int v7 = a2[1];
  HIDWORD(v8) = *a2;
  LODWORD(v8) = *a2;
  HIDWORD(v8) = (v8 >> 19) + v7;
  LODWORD(v8) = HIDWORD(v8);
  int v10 = a2[2];
  int v9 = a2[3];
  HIDWORD(v8) = (v8 >> 19) + v9;
  LODWORD(v8) = HIDWORD(v8);
  int v11 = (v8 >> 19) + v10;
  int v12 = *(_DWORD *)(a1 + 16);
  if (v12) {
    uint64_t v13 = (-1640531527 * v11) >> -(char)v12;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(void *)(a1 + 80);
  uint64_t v15 = *(uint64_t **)(v14 + 8 * v13);
  if (!v15)
  {
LABEL_13:
    uint64_t v16 = *(void *)(a1 + 32);
    if (!v16)
    {
      DgnPool::addChunk((DgnPool *)(a1 + 24));
      uint64_t v16 = *(void *)(a1 + 32);
    }
    *(void *)(a1 + 32) = *(void *)v16;
    *(_DWORD *)(v16 + 8) = 0;
    long long v17 = *(_OWORD *)a2;
    *(_DWORD *)(v16 + 28) = a2[4];
    *(_OWORD *)(v16 + 12) = v17;
    *a3 = v16 + 12;
    *(_DWORD *)(v16 + 8) = v11;
    ++*(_DWORD *)(a1 + 8);
    if (*(unsigned char *)(a1 + 20))
    {
      *(void *)uint64_t v16 = *(void *)(v14 + 8 * v13);
    }
    else
    {
      *(void *)uint64_t v16 = 0;
      uint64_t v18 = *(void **)(v14 + 8 * v13);
      if (v18)
      {
        do
        {
          unint64_t v19 = v18;
          uint64_t v18 = (void *)*v18;
        }
        while (v18);
        void *v19 = v16;
        return 1;
      }
    }
    *(void *)(v14 + 8 * v13) = v16;
    return 1;
  }
  while (*((_DWORD *)v15 + 2) != v11
       || *((_DWORD *)v15 + 3) != *a2
       || *((_DWORD *)v15 + 4) != v7
       || *((_DWORD *)v15 + 5) != v10
       || *((_DWORD *)v15 + 6) != v9)
  {
    uint64_t v15 = (uint64_t *)*v15;
    if (!v15) {
      goto LABEL_13;
    }
  }
  uint64_t result = 0;
  *a3 = (char *)v15 + 12;
  return result;
}

__n128 TEHeapSort<TimeQueEl>::add_to_heap(uint64_t a1, __n128 *a2)
{
  signed int v5 = *(_DWORD *)(a1 + 16);
  signed int v4 = *(_DWORD *)(a1 + 20);
  if (v5 >= v4)
  {
    uint64_t v6 = (2 * v4);
    unsigned int v7 = *(_DWORD *)(a1 + 12);
    if (v6 > v7) {
      DgnArray<DgnPrimArray<double>>::reallocElts(a1, v6 - v7, 0);
    }
    uint64_t v8 = *(unsigned int *)(a1 + 8);
    if (v8 < v6)
    {
      uint64_t v9 = v6 - v8;
      int v10 = (void *)(*(void *)a1 + 16 * v8 + 8);
      do
      {
        *((_DWORD *)v10 - 2) = -16;
        *int v10 = 0;
        v10 += 2;
        --v9;
      }
      while (v9);
    }
    *(_DWORD *)(a1 + 8) = v6;
    *(_DWORD *)(a1 + 20) = 2 * *(_DWORD *)(a1 + 20) - 1;
  }
  uint64_t v11 = *(void *)a1;
  int v12 = (_OWORD *)(*(void *)a1 + 16 * v5);
  if (v5 >= 2)
  {
    int v14 = v5;
    while (1)
    {
      uint64_t v13 = (_DWORD *)(v11 + 16 * (v14 >> 1));
      if ((signed __int32)a2->n128_u32[0] <= *v13) {
        break;
      }
      *int v12 = *(_OWORD *)v13;
      int v12 = (_OWORD *)(v11 + 16 * (v14 >> 1));
      BOOL v15 = v14 > 3;
      v14 >>= 1;
      if (!v15) {
        goto LABEL_13;
      }
    }
  }
  uint64_t v13 = v12;
LABEL_13:
  __n128 result = *a2;
  *(__n128 *)uint64_t v13 = *a2;
  *(_DWORD *)(a1 + 16) = v5 + 1;
  return result;
}

uint64_t TEHeapSort<TimeQueEl>::remove_from_heap(int *a1, _OWORD *a2)
{
  if (a1[4] < 2) {
    return 0;
  }
  uint64_t v3 = *(void *)a1;
  *a2 = *(_OWORD *)(*(void *)a1 + 16);
  int v4 = a1[4];
  int v5 = v4 - 1;
  a1[4] = v4 - 1;
  uint64_t v6 = (int *)(v3 + 16 * (v4 - 1));
  int v7 = *v6;
  uint64_t v15 = *(void *)(v6 + 1);
  int v16 = v6[3];
  int v8 = 1;
  if (v4 < 4) {
    goto LABEL_17;
  }
  int v9 = 2;
  int v10 = 3;
  int v11 = 1;
  while (1)
  {
    int v12 = *(_DWORD *)(v3 + 16 * v9);
    if (v7 <= v12)
    {
      if (v10 >= v5)
      {
        uint64_t v13 = v9;
        int v10 = v9;
      }
      else
      {
        if (*(_DWORD *)(v3 + 16 * v10) <= v12) {
          int v10 = v9;
        }
        uint64_t v13 = v10;
      }
      goto LABEL_14;
    }
    if (v10 >= v5 || v7 > *(_DWORD *)(v3 + 16 * v10)) {
      break;
    }
    uint64_t v13 = v10;
LABEL_14:
    int v8 = v10;
    *(_OWORD *)(v3 + 16 * v11) = *(_OWORD *)(v3 + 16 * v13);
    int v9 = 2 * v10;
    int v10 = (2 * v10) | 1;
    int v5 = a1[4];
    int v11 = v8;
    if (v9 >= v5) {
      goto LABEL_17;
    }
  }
  int v8 = v11;
LABEL_17:
  uint64_t v14 = v3 + 16 * v8;
  *(_DWORD *)uint64_t v14 = v7;
  *(void *)(v14 + 4) = v15;
  *(_DWORD *)(v14 + 12) = v16;
  return 1;
}

uint64_t Hash<CwidStatePair,CwidStatePair,CwidStatePair,BOOL>::add(uint64_t result, _DWORD *a2, unsigned char *a3)
{
  uint64_t v5 = result;
  unsigned int v6 = *(_DWORD *)(result + 12);
  if (*(_DWORD *)(result + 8) >= v6 >> 1) {
    __n128 result = HashKEV<unsigned int,unsigned int,CWIDScope>::upSize(result, 2 * v6);
  }
  HIDWORD(v7) = *a2;
  LODWORD(v7) = *a2;
  int v8 = (v7 >> 19) + a2[1];
  int v9 = *(_DWORD *)(v5 + 16);
  if (v9) {
    unsigned int v10 = (-1640531527 * v8) >> -(char)v9;
  }
  else {
    unsigned int v10 = 0;
  }
  uint64_t v11 = *(void *)(v5 + 80);
  uint64_t v12 = *(void *)(v5 + 32);
  if (!v12)
  {
    __n128 result = DgnPool::addChunk((DgnPool *)(v5 + 24));
    uint64_t v12 = *(void *)(v5 + 32);
  }
  uint64_t v13 = (void *)(v11 + 8 * v10);
  *(void *)(v5 + 32) = *(void *)v12;
  *(_DWORD *)(v12 + 8) = 0;
  *(void *)(v12 + 12) = *(void *)a2;
  *(unsigned char *)(v12 + 20) = *a3;
  *(_DWORD *)(v12 + 8) = v8;
  ++*(_DWORD *)(v5 + 8);
  if (*(unsigned char *)(v5 + 20))
  {
    *(void *)uint64_t v12 = *v13;
  }
  else
  {
    *(void *)uint64_t v12 = 0;
    uint64_t v14 = (void *)*v13;
    if (*v13)
    {
      do
      {
        uint64_t v13 = v14;
        uint64_t v14 = (void *)*v14;
      }
      while (v14);
    }
  }
  *uint64_t v13 = v12;
  return result;
}

unint64_t mrec_qsort_r<SortLink>(unint64_t result, unint64_t a2, int64_t a3)
{
  int64_t v4 = -a3;
  BOOL v5 = a3 != 8;
  BOOL v6 = ((result | a3) & 7) == 0;
  if (((result | a3) & 7) != 0) {
    int v7 = 2;
  }
  else {
    int v7 = a3 != 8;
  }
  if (a2 < 7)
  {
LABEL_121:
    if ((uint64_t)(a2 * a3) > a3)
    {
      unint64_t v82 = result + a2 * a3;
      unint64_t v83 = result + a3;
      unint64_t v84 = result;
      do
      {
        if (v83 > result)
        {
          unint64_t v85 = v84;
          unint64_t v86 = v83;
          do
          {
            unint64_t v87 = v86;
            v86 += v4;
            if (*(_DWORD *)(v86 + 4) <= *(_DWORD *)(v87 + 4)) {
              break;
            }
            if (v7)
            {
              uint64_t v88 = 0;
              unint64_t v89 = v85 + a3;
              if (v6)
              {
                do
                {
                  uint64_t v90 = *(void *)(v89 + 8 * v88);
                  *(void *)(v89 + 8 * v88) = *(void *)(v85 + 8 * v88);
                  *(void *)(v85 + 8 * v88++) = v90;
                }
                while ((unint64_t)a3 >> 3 != v88);
              }
              else
              {
                do
                {
                  char v91 = *(unsigned char *)(v89 + v88);
                  *(unsigned char *)(v89 + v88) = *(unsigned char *)(v85 + v88);
                  *(unsigned char *)(v85 + v88++) = v91;
                }
                while (a3 != v88);
              }
            }
            else
            {
              uint64_t v92 = *(void *)v87;
              *(void *)unint64_t v87 = *(void *)v86;
              *(void *)unint64_t v86 = v92;
            }
            v85 += v4;
          }
          while (v86 > result);
        }
        v83 += a3;
        v84 += a3;
      }
      while (v83 < v82);
    }
  }
  else
  {
    unint64_t v8 = (unint64_t)a3 >> 3;
    while (1)
    {
      int v9 = (unsigned char *)(result + (a2 >> 1) * a3);
      if (a2 != 7)
      {
        unint64_t v10 = result + (a2 - 1) * a3;
        if (a2 < 0x29)
        {
          unint64_t v12 = result;
          unint64_t v27 = result + (a2 - 1) * a3;
        }
        else
        {
          unint64_t v11 = (a2 >> 3) * a3;
          unint64_t v12 = result + v11;
          uint64_t v13 = 2 * v11;
          unint64_t v14 = result + 2 * v11;
          unsigned int v15 = *(_DWORD *)(result + 4);
          unsigned int v16 = *(_DWORD *)(result + v11 + 4);
          unsigned int v17 = *(_DWORD *)(v14 + 4);
          if (v15 >= v17) {
            unint64_t v18 = result + 2 * v11;
          }
          else {
            unint64_t v18 = result;
          }
          if (v16 > v17) {
            unint64_t v18 = result + v11;
          }
          if (v15 >= v17) {
            unint64_t v14 = result;
          }
          if (v16 >= v17) {
            unint64_t v12 = v14;
          }
          if (v15 >= v16) {
            unint64_t v12 = v18;
          }
          uint64_t v19 = -(uint64_t)v11;
          char v20 = &v9[-v11];
          char v21 = &v9[v11];
          unsigned int v22 = *((_DWORD *)v20 + 1);
          unsigned int v23 = *((_DWORD *)v9 + 1);
          unsigned int v24 = *((_DWORD *)v21 + 1);
          if (v22 >= v24) {
            uint64_t v25 = v21;
          }
          else {
            uint64_t v25 = v20;
          }
          if (v23 > v24) {
            uint64_t v25 = (unsigned char *)(result + (a2 >> 1) * a3);
          }
          if (v22 >= v24) {
            char v21 = v20;
          }
          if (v23 >= v24) {
            int v9 = v21;
          }
          if (v22 >= v23) {
            int v9 = v25;
          }
          unint64_t v26 = v10 - v13;
          unint64_t v27 = v10 + v19;
          unsigned int v28 = *(_DWORD *)(v26 + 4);
          unsigned int v29 = *(_DWORD *)(v27 + 4);
          unsigned int v30 = *(_DWORD *)(v10 + 4);
          if (v28 >= v29)
          {
            if (v29 <= v30)
            {
              if (v28 >= v30) {
                unint64_t v27 = result + (a2 - 1) * a3;
              }
              else {
                unint64_t v27 = v26;
              }
            }
          }
          else if (v29 >= v30)
          {
            if (v28 >= v30) {
              unint64_t v27 = v26;
            }
            else {
              unint64_t v27 = result + (a2 - 1) * a3;
            }
          }
        }
        unsigned int v31 = *(_DWORD *)(v12 + 4);
        unsigned int v32 = *((_DWORD *)v9 + 1);
        unsigned int v33 = *(_DWORD *)(v27 + 4);
        if (v31 >= v33) {
          uint64_t v34 = (unsigned char *)v27;
        }
        else {
          uint64_t v34 = (unsigned char *)v12;
        }
        if (v32 > v33) {
          uint64_t v34 = v9;
        }
        if (v31 < v33) {
          unint64_t v12 = v27;
        }
        if (v32 >= v33) {
          int v9 = (unsigned char *)v12;
        }
        if (v31 >= v32) {
          int v9 = v34;
        }
      }
      if (v7)
      {
        if (v6)
        {
          uint64_t v35 = (uint64_t *)result;
          unint64_t v36 = (unint64_t)a3 >> 3;
          do
          {
            uint64_t v37 = *v35;
            *v35++ = *(void *)v9;
            *(void *)int v9 = v37;
            v9 += 8;
            --v36;
          }
          while (v36);
        }
        else
        {
          int64_t v39 = a3;
          uint64_t v40 = (char *)result;
          do
          {
            char v41 = *v40;
            *v40++ = *v9;
            *v9++ = v41;
            --v39;
          }
          while (v39);
        }
      }
      else
      {
        uint64_t v38 = *(void *)result;
        *(void *)__n128 result = *(void *)v9;
        *(void *)int v9 = v38;
      }
      int v42 = 0;
      unint64_t v43 = result + a3;
      unsigned int v44 = (void *)(result + (a2 - 1) * a3);
      uint64_t v45 = v44;
      unsigned int v46 = (unsigned char *)(result + a3);
      uint64_t v47 = (void *)(result + a3);
LABEL_60:
      while (v46 <= (unsigned char *)v45)
      {
        unsigned int v48 = *((_DWORD *)v46 + 1);
        unsigned int v49 = *(_DWORD *)(result + 4);
        if (v48 > v49) {
          break;
        }
        if (v48 == v49)
        {
          if (v7)
          {
            uint64_t v50 = 0;
            if (v6)
            {
              do
              {
                uint64_t v51 = v47[v50];
                v47[v50] = *(void *)&v46[8 * v50];
                *(void *)&v46[8 * v50++] = v51;
              }
              while (v8 != v50);
            }
            else
            {
              do
              {
                char v52 = *((unsigned char *)v47 + v50);
                *((unsigned char *)v47 + v50) = v46[v50];
                v46[v50++] = v52;
              }
              while (a3 != v50);
            }
          }
          else
          {
            uint64_t v62 = *v47;
            *uint64_t v47 = *(void *)v46;
            *(void *)unsigned int v46 = v62;
          }
          uint64_t v47 = (void *)((char *)v47 + a3);
          int v42 = 1;
        }
        v46 += a3;
      }
      while (v46 <= (unsigned char *)v45)
      {
        unsigned int v57 = *((_DWORD *)v45 + 1);
        unsigned int v58 = *(_DWORD *)(result + 4);
        if (v57 < v58)
        {
          if (v7)
          {
            uint64_t v59 = 0;
            if (v6)
            {
              do
              {
                uint64_t v60 = *(void *)&v46[8 * v59];
                *(void *)&v46[8 * v59] = v45[v59];
                v45[v59++] = v60;
              }
              while (v8 != v59);
            }
            else
            {
              do
              {
                char v61 = v46[v59];
                v46[v59] = *((unsigned char *)v45 + v59);
                *((unsigned char *)v45 + v59++) = v61;
              }
              while (a3 != v59);
            }
          }
          else
          {
            uint64_t v63 = *(void *)v46;
            *(void *)unsigned int v46 = *v45;
            void *v45 = v63;
          }
          v46 += a3;
          uint64_t v45 = (void *)((char *)v45 + v4);
          int v42 = 1;
          goto LABEL_60;
        }
        if (v57 == v58)
        {
          if (v7)
          {
            uint64_t v53 = 0;
            if (v6)
            {
              do
              {
                uint64_t v54 = v45[v53];
                v45[v53] = v44[v53];
                v44[v53++] = v54;
              }
              while (v8 != v53);
            }
            else
            {
              do
              {
                char v55 = *((unsigned char *)v45 + v53);
                *((unsigned char *)v45 + v53) = *((unsigned char *)v44 + v53);
                *((unsigned char *)v44 + v53++) = v55;
              }
              while (a3 != v53);
            }
          }
          else
          {
            uint64_t v56 = *v45;
            void *v45 = *v44;
            *unsigned int v44 = v56;
          }
          unsigned int v44 = (void *)((char *)v44 + v4);
          int v42 = 1;
        }
        uint64_t v45 = (void *)((char *)v45 + v4);
      }
      unint64_t v64 = result + a2 * a3;
      if (!v42) {
        break;
      }
      int64_t v65 = v46 - (unsigned char *)v47;
      if ((uint64_t)((uint64_t)v47 - result) >= v46 - (unsigned char *)v47) {
        unint64_t v66 = v46 - (unsigned char *)v47;
      }
      else {
        unint64_t v66 = (unint64_t)v47 - result;
      }
      if (v66)
      {
        if (v6)
        {
          unint64_t v67 = (uint64_t *)&v46[-v66];
          unint64_t v68 = v66 >> 3;
          uint64_t v69 = (uint64_t *)result;
          do
          {
            uint64_t v70 = *v69;
            *v69++ = *v67;
            *v67++ = v70;
            --v68;
          }
          while (v68);
        }
        else
        {
          uint64_t v71 = -(uint64_t)v66;
          int v72 = (char *)result;
          do
          {
            char v73 = *v72;
            *v72++ = v46[v71];
            v46[v71] = v73;
            BOOL v74 = __CFADD__(v71++, 1);
          }
          while (!v74);
        }
      }
      int64_t v75 = (char *)v44 - (char *)v45;
      unint64_t v76 = v64 - ((void)v44 + a3);
      if ((char *)v44 - (char *)v45 < (uint64_t)v76) {
        unint64_t v76 = (char *)v44 - (char *)v45;
      }
      if (v76)
      {
        if (v6)
        {
          unint64_t v77 = (void *)(v64 - v76);
          unint64_t v78 = v76 >> 3;
          do
          {
            uint64_t v79 = *(void *)v46;
            *(void *)unsigned int v46 = *v77;
            v46 += 8;
            *v77++ = v79;
            --v78;
          }
          while (v78);
        }
        else
        {
          uint64_t v80 = -(uint64_t)v76;
          do
          {
            char v81 = *v46;
            *v46++ = *(unsigned char *)(v64 + v80);
            *(unsigned char *)(v64 + v80) = v81;
            BOOL v74 = __CFADD__(v80++, 1);
          }
          while (!v74);
        }
      }
      if (v65 > a3) {
        __n128 result = mrec_qsort_r<SortLink>();
      }
      if (v75 <= a3) {
        return result;
      }
      __n128 result = v64 - v75;
      a2 = v75 / (unint64_t)a3;
      BOOL v6 = (((v64 - v75) | a3) & 7) == 0;
      if ((((v64 - v75) | a3) & 7) != 0) {
        int v7 = 2;
      }
      else {
        int v7 = v5;
      }
      if (a2 < 7) {
        goto LABEL_121;
      }
    }
    if ((uint64_t)(a2 * a3) > a3)
    {
      unint64_t v93 = result;
      do
      {
        if (v43 > result)
        {
          unint64_t v94 = v93;
          unint64_t v95 = v43;
          do
          {
            unint64_t v96 = v95;
            v95 += v4;
            if (*(_DWORD *)(v95 + 4) <= *(_DWORD *)(v96 + 4)) {
              break;
            }
            if (v7)
            {
              uint64_t v97 = 0;
              unint64_t v98 = v94 + a3;
              if (v6)
              {
                do
                {
                  uint64_t v99 = *(void *)(v98 + 8 * v97);
                  *(void *)(v98 + 8 * v97) = *(void *)(v94 + 8 * v97);
                  *(void *)(v94 + 8 * v97++) = v99;
                }
                while (v8 != v97);
              }
              else
              {
                do
                {
                  char v100 = *(unsigned char *)(v98 + v97);
                  *(unsigned char *)(v98 + v97) = *(unsigned char *)(v94 + v97);
                  *(unsigned char *)(v94 + v97++) = v100;
                }
                while (a3 != v97);
              }
            }
            else
            {
              uint64_t v101 = *(void *)v96;
              *(void *)unint64_t v96 = *(void *)v95;
              *(void *)unint64_t v95 = v101;
            }
            v94 += v4;
          }
          while (v95 > result);
        }
        v43 += a3;
        v93 += a3;
      }
      while (v43 < v64);
    }
  }
  return result;
}

uint64_t Lattice<WordLatticeLC>::createNode(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 72);
  if (v2)
  {
    unsigned int v3 = v2 - 1;
    uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 64) + 4 * v3);
    *(_DWORD *)(a1 + 72) = v3;
    uint64_t v5 = *(void *)(a1 + 80);
  }
  else
  {
    uint64_t v4 = *(unsigned int *)(a1 + 88);
    unsigned int v6 = v4;
    if (v4 == *(_DWORD *)(a1 + 92))
    {
      DgnArray<CWIDAC>::reallocElts(a1 + 80, 1, 1);
      unsigned int v6 = *(_DWORD *)(a1 + 88);
    }
    uint64_t v5 = *(void *)(a1 + 80);
    uint64_t v7 = v5 + 24 * v6;
    *(_OWORD *)uint64_t v7 = xmmword_214085BE0;
    *(void *)(v7 + 16) = 0x100000001;
    *(_DWORD *)(a1 + 88) = v6 + 1;
  }
  int v8 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = v8 + 1;
  uint64_t v9 = v5 + 24 * v4;
  unsigned int v10 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)uint64_t v9 = v10;
  *(_DWORD *)(v9 + 4) = v8;
  *(_OWORD *)(v9 + 8) = xmmword_21408D4A0;
  if (v10 == *(_DWORD *)(a1 + 28))
  {
    DgnPrimArray<unsigned int>::reallocElts(a1 + 16, 1, 1);
    unsigned int v10 = *(_DWORD *)(a1 + 24);
  }
  *(_DWORD *)(*(void *)(a1 + 16) + 4 * v10) = v4;
  ++*(_DWORD *)(a1 + 24);
  unsigned int v11 = *(_DWORD *)(a1 + 40);
  if (v11 == *(_DWORD *)(a1 + 44))
  {
    DgnPrimArray<unsigned int>::reallocElts(a1 + 32, 1, 1);
    unsigned int v11 = *(_DWORD *)(a1 + 40);
  }
  *(_DWORD *)(*(void *)(a1 + 32) + 4 * v11) = v4;
  ++*(_DWORD *)(a1 + 40);
  unsigned int v12 = *(_DWORD *)(a1 + 56);
  if (v12 == *(_DWORD *)(a1 + 60))
  {
    DgnPrimArray<unsigned int>::reallocElts(a1 + 48, 1, 1);
    unsigned int v12 = *(_DWORD *)(a1 + 56);
  }
  *(_DWORD *)(*(void *)(a1 + 48) + 4 * v12) = v4;
  ++*(_DWORD *)(a1 + 56);
  *(unsigned char *)(a1 + 8) = 0;
  return v4;
}

uint64_t Lattice<WordLatticeLC>::maybeCreateAndConnectLink(uint64_t *a1, unsigned int a2, const WordLatticeLC *a3, WordLatticeLC *this, int a5, _DWORD *a6)
{
  int v9 = (int)a3;
  uint64_t v12 = *(unsigned int *)(a1[10] + 24 * a2 + 20);
  if (v12 == -2)
  {
LABEL_7:
    Link = (const WordLatticeLC *)Lattice<WordLatticeLC>::createLink((uint64_t)a1, a2, v9, this);
    unsigned int v15 = Link;
    if (a6) {
      *a6 = *(_DWORD *)(a1[16] + 136 * Link + 112);
    }
    if (a5)
    {
      Lattice<WordLatticeLC>::connectInLink(a1, Link);
      Lattice<WordLatticeLC>::connectOutLink(a1, v15);
    }
    else
    {
      Lattice<WordLatticeLC>::connectInLinkUnordered(a1, Link);
      Lattice<WordLatticeLC>::connectOutLinkUnordered(a1, v15);
    }
    return 1;
  }
  uint64_t v13 = a1[16];
  while (*(_DWORD *)(v13 + 136 * v12 + 120) != v9)
  {
LABEL_6:
    uint64_t v12 = *(unsigned int *)(v13 + 136 * v12 + 128);
    if (v12 == -2) {
      goto LABEL_7;
    }
  }
  if (WordLatticeLC::cmpForDuplicateCheck(this, (const WordLatticeLC *)(v13 + 136 * v12), a3))
  {
    uint64_t v13 = a1[16];
    goto LABEL_6;
  }
  uint64_t result = 0;
  if (a6) {
    *a6 = *(_DWORD *)(a1[16] + 136 * v12 + 112);
  }
  return result;
}

ActiveWordEmbeddedFst *FstCore::makeFstActiveWord(uint64_t a1, uint64_t a2, long long *a3, __int16 a4, uint64_t a5, unsigned __int16 a6, PelScorer *a7, unsigned int a8, unsigned int a9, unsigned int a10)
{
  unsigned int v17 = (ActiveWordMgr *)(a2 + 16);
  unint64_t v18 = MemChunkAlloc(0xC0uLL, 0);
  FstHmmNet::FstHmmNet((uint64_t)v18, (uint64_t)v17, a1, 1, 1, 0, a10, 0, a9, a4, a7, a8, a3, a5, a6);
  uint64_t v19 = MemChunkAlloc(0x28uLL, 0);

  return ActiveWordEmbeddedFst::ActiveWordEmbeddedFst((ActiveWordEmbeddedFst *)v19, v17, (HmmNet *)v18);
}

uint64_t FstCore::getBestExitScore(FstCore *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 160))();
}

uint64_t FstCore::getBestScoreMaybeUpdateFstNode(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 168))();
}

uint64_t FstCore::expandEmbFstHistory(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 176))();
}

uint64_t FstStats::sizeObject(uint64_t a1, int a2)
{
  uint64_t v4 = SnapTime::sizeObject(a1, a2);
  uint64_t v5 = SnapTime::sizeObject(a1 + 32, a2) + v4;
  uint64_t v6 = SnapTime::sizeObject(a1 + 64, a2);
  uint64_t v7 = v5 + v6 + SnapTime::sizeObject(a1 + 96, a2);
  uint64_t v8 = SnapTime::sizeObject(a1 + 128, a2);
  uint64_t v9 = v8 + SnapTime::sizeObject(a1 + 160, a2);
  uint64_t v10 = v7 + v9 + SnapTime::sizeObject(a1 + 192, a2);
  return v10 + SnapTime::sizeObject(a1 + 224, a2);
}

__n128 FstStats::operator=(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v3;
  long long v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  long long v5 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v5;
  long long v6 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v6;
  long long v7 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v7;
  long long v8 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v8;
  __n128 result = *(__n128 *)(a2 + 224);
  long long v10 = *(_OWORD *)(a2 + 240);
  *(__n128 *)(a1 + 224) = result;
  *(_OWORD *)(a1 + 240) = v10;
  return result;
}

int64x2_t FstStats::operator-=(int64x2_t *a1, int64x2_t *a2)
{
  int64x2_t v2 = a1[1];
  *a1 = vsubq_s64(*a1, *a2);
  a1[1] = vsubq_s64(v2, a2[1]);
  int64x2_t v3 = a1[3];
  a1[2] = vsubq_s64(a1[2], a2[2]);
  a1[3] = vsubq_s64(v3, a2[3]);
  int64x2_t v4 = a1[5];
  a1[4] = vsubq_s64(a1[4], a2[4]);
  a1[5] = vsubq_s64(v4, a2[5]);
  int64x2_t v5 = a1[7];
  a1[6] = vsubq_s64(a1[6], a2[6]);
  a1[7] = vsubq_s64(v5, a2[7]);
  int64x2_t v6 = a1[9];
  a1[8] = vsubq_s64(a1[8], a2[8]);
  a1[9] = vsubq_s64(v6, a2[9]);
  int64x2_t v7 = a1[11];
  a1[10] = vsubq_s64(a1[10], a2[10]);
  a1[11] = vsubq_s64(v7, a2[11]);
  int64x2_t v8 = a1[13];
  a1[12] = vsubq_s64(a1[12], a2[12]);
  a1[13] = vsubq_s64(v8, a2[13]);
  int64x2_t v9 = a1[15];
  a1[14] = vsubq_s64(a1[14], a2[14]);
  int64x2_t result = vsubq_s64(v9, a2[15]);
  a1[15] = result;
  return result;
}

uint64_t FstCore::getRequiredVirtMapSize(FstCore *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 120))();
}

uint64_t FstCore::makePartialResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, void))(**(void **)(a1 + 16) + 88))(*(void *)(a1 + 16), a2, a3, *(unsigned __int8 *)(a1 + 24));
}

void FstCore::setConstraint(Constraint **this, Constraint *a2)
{
  DgnDelete<Constraint>(this[138]);
  this[138] = a2;
  if (a2)
  {
    Constraint::setupConstraint(a2);
    int64x2_t v6 = this[138];
    *((void *)this[9] + 16) = v6;
    uint64_t v7 = *((void *)this[2] + 5);
    int64x2_t v8 = (void *)((char *)v6 + 168);
    int64x2_t v9 = (void *)(v7 + 216);
    int v10 = *((_DWORD *)v6 + 48);
    if (v10) {
      uint64_t v11 = (uint64_t)v6 + 184;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(unsigned int *)(v7 + 224);
    if (v12) {
      BOOL v13 = v8 == v9;
    }
    else {
      BOOL v13 = 1;
    }
    if (!v13)
    {
      if (*((_DWORD *)v6 + 44) == v12)
      {
        uint64_t v14 = *v9 - 4;
        while ((int)v12 >= 1)
        {
          uint64_t v15 = *v8 + 4 * v12;
          int v16 = *(_DWORD *)(v14 + 4 * v12--);
          if (*(_DWORD *)(v15 - 4) != v16) {
            goto LABEL_13;
          }
        }
      }
      else
      {
LABEL_13:
        errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 1774, (uint64_t)"fst/fstcore", 2, (uint64_t)"%s", v4, v5, (char)&unk_21408D4B3);
      }
    }
    if (*(_DWORD *)(v7 + 240)) {
      BOOL v17 = v10 == 0;
    }
    else {
      BOOL v17 = 1;
    }
    if (!v17 && (DgnArray<DgnArray<ParseToken>>::operator==(v11, v7 + 232) & 1) == 0) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstcore.cpp", 1777, (uint64_t)"fst/fstcore", 3, (uint64_t)"%s", v18, v19, (char)&errStr_fst_fstcore_E_FST_START_TOKENS_DO_NOT_MATCH);
    }
  }
}

unint64_t FstCore::setEmbeddedTransducers(unint64_t result, uint64_t a2)
{
  if (a2) {
    return DgnArray<StateSpec>::copyArraySlice(*(void *)(result + 16) + 120, (void *)a2, 0, *(_DWORD *)(a2 + 8));
  }
  return result;
}

void LatticeStats::LatticeStats(LatticeStats *this)
{
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  LMStats::resetStats((LatticeStats *)((char *)this + 48));
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  LMStats::resetStats((LatticeStats *)((char *)this + 256));
  LatticeStats::resetStats(this);
}

void *Lattice<WordLatticeLC>::gc(void *a1)
{
  Lattice<WordLatticeLC>::gcNonTerminal((unint64_t)a1);
  Lattice<WordLatticeLC>::gcNonInitial((unint64_t)a1);
  int64x2_t v2 = (void *)a1[22];
  if (v2)
  {
    MemChunkFree(v2, 0);
    a1[22] = 0;
  }
  a1[23] = 0;
  int64x2_t result = (void *)a1[20];
  if (result)
  {
    int64x2_t result = (void *)MemChunkFree(result, 0);
    a1[20] = 0;
  }
  a1[21] = 0;
  return result;
}

uint64_t Lattice<WordLatticeLC>::minimizeDAG(unint64_t a1)
{
  do
  {
    do
    {
      char v2 = Lattice<WordLatticeLC>::reduceDAGOnceBackward(a1);
      char v3 = Lattice<WordLatticeLC>::reduceDAGOnceForward(a1);
      uint64_t result = Lattice<WordLatticeLC>::removeMultiLinks(a1, v4, v5);
    }
    while ((result & 1) != 0);
  }
  while ((v3 & 1) != 0 || (v2 & 1) != 0);
  return result;
}

unint64_t Lattice<WordLatticeLC>::gcNonTerminal(unint64_t a1)
{
  Lattice<WordLatticeLC>::gcSetup(a1);
  if (*(_DWORD *)(a1 + 56))
  {
    unint64_t v2 = 0;
    uint64_t v3 = *(void *)(a1 + 48);
    uint64_t v4 = *(void *)(a1 + 80);
    uint64_t v5 = *(void *)(a1 + 16);
    unsigned int v6 = *(_DWORD *)(a1 + 24);
    do
    {
      unsigned int v7 = *(_DWORD *)(v3 + 4 * v2);
      *(_DWORD *)(v4 + 24 * v7) = v6;
      *(_DWORD *)(v5 + 4 * v6) = v7;
      unsigned int v6 = *(_DWORD *)(a1 + 24) + 1;
      *(_DWORD *)(a1 + 24) = v6;
      ++v2;
    }
    while (v2 < *(unsigned int *)(a1 + 56));
  }
  else
  {
    unsigned int v6 = *(_DWORD *)(a1 + 24);
  }
  DgnPrimArray<int>::copyArraySlice(a1 + 48, (uint64_t *)(a1 + 16), 0, v6);
  *(_DWORD *)(a1 + 40) = 0;
  if (*(_DWORD *)(a1 + 24))
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(a1 + 16);
      unsigned int v10 = *(_DWORD *)(v9 + 4 * v8);
      uint64_t v11 = *(void *)(a1 + 80);
      if (*(_DWORD *)(v11 + 24 * v10 + 8))
      {
        uint64_t v12 = *(unsigned int *)(v11 + 24 * v10 + 16);
        if (v12 != -2)
        {
          uint64_t v13 = *(void *)(a1 + 128);
          uint64_t v14 = *(void *)(a1 + 96);
          do
          {
            unsigned int v15 = *(_DWORD *)(v13 + 136 * v12 + 116);
            int v16 = (_DWORD *)(v11 + 24 * v15);
            if (*v16 == -1)
            {
              uint64_t v17 = *(unsigned int *)(a1 + 24);
              *int v16 = v17;
              *(_DWORD *)(v9 + 4 * v17) = v15;
              ++*(_DWORD *)(a1 + 24);
            }
            uint64_t v18 = *(unsigned int *)(a1 + 104);
            uint64_t v19 = v13 + 136 * v12;
            *(_DWORD *)(v19 + 112) = v18;
            *(_DWORD *)(v14 + 4 * v18) = v12;
            ++*(_DWORD *)(a1 + 104);
            uint64_t v12 = *(unsigned int *)(v19 + 124);
          }
          while (v12 != -2);
        }
      }
      else
      {
        uint64_t v20 = *(unsigned int *)(a1 + 40);
        if (v20 == *(_DWORD *)(a1 + 44))
        {
          DgnPrimArray<unsigned int>::reallocElts(a1 + 32, 1, 1);
          uint64_t v20 = *(unsigned int *)(a1 + 40);
        }
        *(_DWORD *)(*(void *)(a1 + 32) + 4 * v20) = v10;
        ++*(_DWORD *)(a1 + 40);
      }
      ++v8;
    }
    while (v8 < *(unsigned int *)(a1 + 24));
  }

  return Lattice<WordLatticeLC>::gcCleanup(a1);
}

unint64_t Lattice<WordLatticeLC>::gcNonInitial(unint64_t a1)
{
  Lattice<WordLatticeLC>::gcSetup(a1);
  if (*(_DWORD *)(a1 + 40))
  {
    unint64_t v2 = 0;
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 80);
    uint64_t v5 = *(void *)(a1 + 16);
    unsigned int v6 = *(_DWORD *)(a1 + 24);
    do
    {
      unsigned int v7 = *(_DWORD *)(v3 + 4 * v2);
      *(_DWORD *)(v4 + 24 * v7) = v6;
      *(_DWORD *)(v5 + 4 * v6) = v7;
      unsigned int v6 = *(_DWORD *)(a1 + 24) + 1;
      *(_DWORD *)(a1 + 24) = v6;
      ++v2;
    }
    while (v2 < *(unsigned int *)(a1 + 40));
  }
  else
  {
    unsigned int v6 = *(_DWORD *)(a1 + 24);
  }
  DgnPrimArray<int>::copyArraySlice(a1 + 32, (uint64_t *)(a1 + 16), 0, v6);
  *(_DWORD *)(a1 + 56) = 0;
  if (*(_DWORD *)(a1 + 24))
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(a1 + 16);
      unsigned int v10 = *(_DWORD *)(v9 + 4 * v8);
      uint64_t v11 = *(void *)(a1 + 80);
      if (*(_DWORD *)(v11 + 24 * v10 + 12))
      {
        uint64_t v12 = *(unsigned int *)(v11 + 24 * v10 + 20);
        if (v12 != -2)
        {
          uint64_t v13 = *(void *)(a1 + 128);
          uint64_t v14 = *(void *)(a1 + 96);
          do
          {
            unsigned int v15 = *(_DWORD *)(v13 + 136 * v12 + 120);
            int v16 = (_DWORD *)(v11 + 24 * v15);
            if (*v16 == -1)
            {
              uint64_t v17 = *(unsigned int *)(a1 + 24);
              *int v16 = v17;
              *(_DWORD *)(v9 + 4 * v17) = v15;
              ++*(_DWORD *)(a1 + 24);
            }
            uint64_t v18 = *(unsigned int *)(a1 + 104);
            uint64_t v19 = v13 + 136 * v12;
            *(_DWORD *)(v19 + 112) = v18;
            *(_DWORD *)(v14 + 4 * v18) = v12;
            ++*(_DWORD *)(a1 + 104);
            uint64_t v12 = *(unsigned int *)(v19 + 128);
          }
          while (v12 != -2);
        }
      }
      else
      {
        uint64_t v20 = *(unsigned int *)(a1 + 56);
        if (v20 == *(_DWORD *)(a1 + 60))
        {
          DgnPrimArray<unsigned int>::reallocElts(a1 + 48, 1, 1);
          uint64_t v20 = *(unsigned int *)(a1 + 56);
        }
        *(_DWORD *)(*(void *)(a1 + 48) + 4 * v20) = v10;
        ++*(_DWORD *)(a1 + 56);
      }
      ++v8;
    }
    while (v8 < *(unsigned int *)(a1 + 24));
  }

  return Lattice<WordLatticeLC>::gcCleanup(a1);
}

unint64_t Lattice<WordLatticeLC>::gcSetup(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 80);
    LODWORD(v5) = *(_DWORD *)(a1 + 40);
    do
    {
      if (!*(_DWORD *)(v4 + 24 * *(unsigned int *)(v3 + 4 * (v2 - 1)) + 12))
      {
        LODWORD(v5) = v5 - 1;
        if (v5 > (int)v2 - 1)
        {
          unint64_t v6 = (v2 - 1);
          do
          {
            *(_DWORD *)(v3 + 4 * v6) = *(_DWORD *)(v3 + 4 * v6 + 4);
            unint64_t v5 = (*(_DWORD *)(a1 + 40) - 1);
            ++v6;
          }
          while (v6 < v5);
        }
        *(_DWORD *)(a1 + 40) = v5;
      }
      BOOL v7 = v2-- <= 1;
    }
    while (!v7);
  }
  uint64_t v8 = *(unsigned int *)(a1 + 56);
  if ((int)v8 >= 1)
  {
    uint64_t v9 = *(void *)(a1 + 48);
    uint64_t v10 = *(void *)(a1 + 80);
    LODWORD(v11) = *(_DWORD *)(a1 + 56);
    do
    {
      if (!*(_DWORD *)(v10 + 24 * *(unsigned int *)(v9 + 4 * (v8 - 1)) + 8))
      {
        LODWORD(v11) = v11 - 1;
        if (v11 > (int)v8 - 1)
        {
          unint64_t v12 = (v8 - 1);
          do
          {
            *(_DWORD *)(v9 + 4 * v12) = *(_DWORD *)(v9 + 4 * v12 + 4);
            unint64_t v11 = (*(_DWORD *)(a1 + 56) - 1);
            ++v12;
          }
          while (v12 < v11);
        }
        *(_DWORD *)(a1 + 56) = v11;
      }
      BOOL v7 = v8-- <= 1;
    }
    while (!v7);
  }
  DgnPrimArray<int>::copyArraySlice(a1 + 176, (uint64_t *)(a1 + 16), 0, *(_DWORD *)(a1 + 24));
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v13 = *(unsigned int *)(a1 + 184);
  if ((int)v13 >= 1)
  {
    uint64_t v14 = *(void *)(a1 + 176);
    uint64_t v15 = *(void *)(a1 + 80);
    unint64_t v16 = v13 + 1;
    do
      *(_DWORD *)(v15 + 24 * *(unsigned int *)(v14 + 4 * (v16-- - 2))) = -1;
    while (v16 > 1);
  }
  unint64_t result = DgnPrimArray<int>::copyArraySlice(a1 + 160, (uint64_t *)(a1 + 96), 0, *(_DWORD *)(a1 + 104));
  *(_DWORD *)(a1 + 104) = 0;
  uint64_t v18 = *(unsigned int *)(a1 + 168);
  if ((int)v18 >= 1)
  {
    uint64_t v19 = *(void *)(a1 + 160);
    uint64_t v20 = *(void *)(a1 + 128);
    unint64_t v21 = v18 + 1;
    do
      *(_DWORD *)(v20 + 136 * *(unsigned int *)(v19 + 4 * (v21-- - 2)) + 112) = -1;
    while (v21 > 1);
  }
  return result;
}

unint64_t Lattice<WordLatticeLC>::gcCleanup(unint64_t result)
{
  unint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 168);
  if ((int)v2 >= 1)
  {
    unint64_t v3 = v2 + 1;
    do
    {
      unsigned int v4 = *(_DWORD *)(*(void *)(v1 + 160) + 4 * (v3 - 2));
      if (*(_DWORD *)(*(void *)(v1 + 128) + 136 * v4 + 112) == -1) {
        unint64_t result = Lattice<WordLatticeLC>::disconnectAndDestroyLink(v1, v4);
      }
      --v3;
    }
    while (v3 > 1);
  }
  uint64_t v5 = *(unsigned int *)(v1 + 184);
  if ((int)v5 >= 1)
  {
    unint64_t v6 = v5 + 1;
    do
    {
      unsigned int v7 = *(_DWORD *)(*(void *)(v1 + 176) + 4 * (v6 - 2));
      uint64_t v8 = *(void *)(v1 + 80);
      if (*(_DWORD *)(v8 + 24 * v7) == -1)
      {
        *(void *)(v8 + 24 * v7 + 16) = 0x100000001;
        unint64_t result = Lattice<WordLatticeLC>::destroyNode(v1, v7);
      }
      --v6;
    }
    while (v6 > 1);
  }
  return result;
}

unint64_t Lattice<WordLatticeLC>::disconnectAndDestroyLink(unint64_t a1, unsigned int a2)
{
  Lattice<WordLatticeLC>::disconnectInLink(a1, a2);
  Lattice<WordLatticeLC>::disconnectOutLink(a1, a2);

  return Lattice<WordLatticeLC>::destroyLinkNoDuplicateCheck(a1, a2);
}

unint64_t Lattice<WordLatticeLC>::destroyNode(unint64_t result, unsigned int a2)
{
  unint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 80);
  uint64_t v5 = *(unsigned int *)(v4 + 24 * a2);
  if (v5 != -1)
  {
    unsigned int v6 = *(_DWORD *)(result + 24) - 1;
    uint64_t v7 = *(void *)(result + 16);
    unsigned int v8 = *(_DWORD *)(v7 + 4 * v6);
    *(_DWORD *)(v7 + 4 * v5) = v8;
    *(_DWORD *)(v4 + 24 * v8) = v5;
    *(_DWORD *)(result + 24) = v6;
  }
  if (!*(_DWORD *)(v4 + 24 * a2 + 8))
  {
    unint64_t v10 = *(unsigned int *)(result + 40);
    if (v10)
    {
      unint64_t v11 = 0;
      uint64_t v12 = *(void *)(result + 32);
      while (*(_DWORD *)(v12 + 4 * v11) != a2)
      {
        if (v10 == ++v11) {
          goto LABEL_4;
        }
      }
      if (v11 != -1)
      {
        LODWORD(v10) = v10 - 1;
        if (v10 > v11)
        {
          do
          {
            *(_DWORD *)(v12 + 4 * v11) = *(_DWORD *)(v12 + 4 * v11 + 4);
            unint64_t v10 = (*(_DWORD *)(result + 40) - 1);
            ++v11;
          }
          while (v11 < v10);
        }
        *(_DWORD *)(result + 40) = v10;
      }
    }
  }
LABEL_4:
  if (!*(_DWORD *)(v4 + 24 * a2 + 12))
  {
    unint64_t v13 = *(unsigned int *)(result + 56);
    if (v13)
    {
      unint64_t v14 = 0;
      uint64_t v15 = *(void *)(result + 48);
      while (*(_DWORD *)(v15 + 4 * v14) != a2)
      {
        if (v13 == ++v14) {
          goto LABEL_5;
        }
      }
      if (v14 != -1)
      {
        LODWORD(v13) = v13 - 1;
        if (v13 > v14)
        {
          do
          {
            *(_DWORD *)(v15 + 4 * v14) = *(_DWORD *)(v15 + 4 * v14 + 4);
            unint64_t v13 = (*(_DWORD *)(result + 56) - 1);
            ++v14;
          }
          while (v14 < v13);
        }
        *(_DWORD *)(result + 56) = v13;
      }
    }
  }
LABEL_5:
  unsigned int v9 = *(_DWORD *)(result + 72);
  if (v9 == *(_DWORD *)(result + 76))
  {
    unint64_t result = DgnPrimArray<unsigned int>::reallocElts(result + 64, 1, 1);
    unsigned int v9 = *(_DWORD *)(v3 + 72);
  }
  *(_DWORD *)(*(void *)(v3 + 64) + 4 * v9) = a2;
  ++*(_DWORD *)(v3 + 72);
  return result;
}

unint64_t Lattice<WordLatticeLC>::disconnectInLink(unint64_t result, unsigned int a2)
{
  uint64_t v3 = *(void *)(result + 128);
  unsigned int v4 = *(_DWORD *)(v3 + 136 * a2 + 120);
  uint64_t v5 = *(void *)(result + 80);
  if (*(_DWORD *)(v5 + 24 * v4) != -1)
  {
    unint64_t v6 = result;
    uint64_t v7 = v5 + 24 * v4;
    unsigned int v10 = *(_DWORD *)(v7 + 16);
    unsigned int v8 = (_DWORD *)(v7 + 16);
    uint64_t v9 = v10;
    BOOL v11 = v10 == (unint64_t)a2;
    if (v10 != -2 && v9 != a2)
    {
      do
      {
        uint64_t v13 = v3 + 136 * v9;
        unsigned int v14 = *(_DWORD *)(v13 + 124);
        unsigned int v8 = (_DWORD *)(v13 + 124);
        uint64_t v9 = v14;
        BOOL v11 = v14 == (unint64_t)a2;
      }
      while (v14 != -2 && v9 != a2);
    }
    if (v11)
    {
      *unsigned int v8 = *(_DWORD *)(v3 + 136 * a2 + 124);
      uint64_t v16 = v5 + 24 * v4;
      int v17 = *(_DWORD *)(v16 + 8) - 1;
      *(_DWORD *)(v16 + 8) = v17;
      if (!v17)
      {
        unsigned int v18 = *(_DWORD *)(result + 40);
        if (v18 == *(_DWORD *)(result + 44))
        {
          unint64_t result = DgnPrimArray<unsigned int>::reallocElts(result + 32, 1, 1);
          unsigned int v18 = *(_DWORD *)(v6 + 40);
          uint64_t v3 = *(void *)(v6 + 128);
        }
        *(_DWORD *)(*(void *)(v6 + 32) + 4 * v18) = v4;
        ++*(_DWORD *)(v6 + 40);
      }
    }
  }
  *(_DWORD *)(v3 + 136 * a2 + 120) = -2;
  return result;
}

unint64_t Lattice<WordLatticeLC>::disconnectOutLink(unint64_t result, unsigned int a2)
{
  uint64_t v3 = *(void *)(result + 128);
  unsigned int v4 = *(_DWORD *)(v3 + 136 * a2 + 116);
  uint64_t v5 = *(void *)(result + 80);
  if (*(_DWORD *)(v5 + 24 * v4) != -1)
  {
    unint64_t v6 = result;
    uint64_t v7 = v5 + 24 * v4;
    unsigned int v10 = *(_DWORD *)(v7 + 20);
    unsigned int v8 = (_DWORD *)(v7 + 20);
    uint64_t v9 = v10;
    BOOL v11 = v10 == (unint64_t)a2;
    if (v10 != -2 && v9 != a2)
    {
      do
      {
        uint64_t v13 = v3 + 136 * v9;
        unsigned int v14 = *(_DWORD *)(v13 + 128);
        unsigned int v8 = (_DWORD *)(v13 + 128);
        uint64_t v9 = v14;
        BOOL v11 = v14 == (unint64_t)a2;
      }
      while (v14 != -2 && v9 != a2);
    }
    if (v11)
    {
      *unsigned int v8 = *(_DWORD *)(v3 + 136 * a2 + 128);
      uint64_t v16 = v5 + 24 * v4;
      int v17 = *(_DWORD *)(v16 + 12) - 1;
      *(_DWORD *)(v16 + 12) = v17;
      if (!v17)
      {
        unsigned int v18 = *(_DWORD *)(result + 56);
        if (v18 == *(_DWORD *)(result + 60))
        {
          unint64_t result = DgnPrimArray<unsigned int>::reallocElts(result + 48, 1, 1);
          unsigned int v18 = *(_DWORD *)(v6 + 56);
          uint64_t v3 = *(void *)(v6 + 128);
        }
        *(_DWORD *)(*(void *)(v6 + 48) + 4 * v18) = v4;
        ++*(_DWORD *)(v6 + 56);
      }
    }
  }
  *(_DWORD *)(v3 + 136 * a2 + 116) = -2;
  return result;
}

unint64_t Lattice<WordLatticeLC>::destroyLinkNoDuplicateCheck(unint64_t result, unsigned int a2)
{
  unint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 128);
  uint64_t v5 = *(unsigned int *)(v4 + 136 * a2 + 112);
  if (v5 != -1)
  {
    unsigned int v6 = *(_DWORD *)(result + 104) - 1;
    uint64_t v7 = *(void *)(result + 96);
    unsigned int v8 = *(_DWORD *)(v7 + 4 * v6);
    *(_DWORD *)(v7 + 4 * v5) = v8;
    *(_DWORD *)(v4 + 136 * v8 + 112) = v5;
    *(_DWORD *)(result + 104) = v6;
  }
  unsigned int v9 = *(_DWORD *)(result + 120);
  if (v9 == *(_DWORD *)(result + 124))
  {
    unint64_t result = DgnPrimArray<unsigned int>::reallocElts(result + 112, 1, 1);
    unsigned int v9 = *(_DWORD *)(v3 + 120);
  }
  *(_DWORD *)(*(void *)(v3 + 112) + 4 * v9) = a2;
  ++*(_DWORD *)(v3 + 120);
  return result;
}

uint64_t Lattice<WordLatticeLC>::removeMultiLinks(unint64_t a1, uint64_t a2, const WordLatticeLC *a3)
{
  unint64_t v3 = *(unsigned int *)(a1 + 24);
  if (v3)
  {
    unint64_t v5 = 0;
    char v6 = 0;
    do
    {
      unsigned int v7 = *(_DWORD *)(*(void *)(a1 + 80) + 24 * *(unsigned int *)(*(void *)(a1 + 16) + 4 * v5) + 20);
      if (v7 != -2)
      {
        do
        {
          unsigned int v8 = v7;
          uint64_t v9 = *(void *)(a1 + 128) + 136 * v7;
          while (2)
          {
            unsigned int v10 = *(_DWORD *)(v9 + 128);
            while (1)
            {
              if (v10 == -2)
              {
                unsigned int v7 = *(_DWORD *)(*(void *)(a1 + 128) + 136 * v8 + 128);
                goto LABEL_13;
              }
              uint64_t v11 = *(void *)(a1 + 128);
              unsigned int v12 = v10;
              if (*(_DWORD *)(v11 + 136 * v8 + 120) != *(_DWORD *)(v11 + 136 * v10 + 120)) {
                goto LABEL_11;
              }
              int v13 = WordLatticeLC::cmpForMultiLinkCheck((WordLatticeLC *)(v11 + 136 * v8), (const WordLatticeLC *)(v11 + 136 * v10), a3);
              if (v13 < 1) {
                break;
              }
              unsigned int v10 = *(_DWORD *)(*(void *)(a1 + 128) + 136 * v10 + 128);
              Lattice<WordLatticeLC>::disconnectAndDestroyLink(a1, v12);
              char v6 = 1;
            }
            uint64_t v11 = *(void *)(a1 + 128);
            if ((v13 & 0x80000000) == 0)
            {
LABEL_11:
              uint64_t v9 = v11 + 136 * v10;
              continue;
            }
            break;
          }
          unsigned int v7 = *(_DWORD *)(v11 + 136 * v8 + 128);
          Lattice<WordLatticeLC>::disconnectAndDestroyLink(a1, v8);
          char v6 = 1;
LABEL_13:
          ;
        }
        while (v7 != -2);
        unint64_t v3 = *(unsigned int *)(a1 + 24);
      }
      ++v5;
    }
    while (v5 < v3);
  }
  else
  {
    char v6 = 0;
  }
  return v6 & 1;
}

uint64_t Lattice<WordLatticeLC>::reduceDAGOnceBackward(unint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  if (v2)
  {
    __b = 0;
    unint64_t v3 = realloc_array(0, &__b, 4 * v2, 0, 0, 1);
    uint64_t v37 = __b;
    LODWORD(v38) = v2;
    HIDWORD(v38) = v3 >> 2;
    if ((int)v2 >= 1) {
      memset(__b, 255, 4 * v2);
    }
  }
  else
  {
    LODWORD(v38) = 0;
  }
  uint64_t v4 = *(unsigned int *)(a1 + 56);
  __b = 0;
  uint64_t v36 = 0;
  if (v4)
  {
    unsigned int v33 = 0;
    unint64_t v5 = realloc_array(0, &v33, 4 * v4, 0, 0, 1);
    char v6 = v33;
    __b = v33;
    uint64_t v7 = *(unsigned int *)(a1 + 56);
    LODWORD(v36) = v4;
    HIDWORD(v36) = v5 >> 2;
    if ((int)v7 >= 1)
    {
      uint64_t v8 = *(void *)(a1 + 48);
      uint64_t v9 = *(void *)(a1 + 80);
      unint64_t v10 = v7 + 1;
      uint64_t v11 = v37;
      do
      {
        unsigned int v12 = *(_DWORD *)(v8 + 4 * (v10 - 2));
        v6[(v10 - 2)] = v12;
        v11[*(unsigned int *)(v9 + 24 * v12)] = 0;
        --v10;
      }
      while (v10 > 1);
    }
  }
  else
  {
    LODWORD(v36) = 0;
  }
  unsigned int v33 = 0;
  uint64_t v34 = 0;
  unsigned int v31 = 0;
  uint64_t v32 = 0;
  uint64_t v13 = *(unsigned int *)(a1 + 24);
  if (v13)
  {
    int64_t v39 = 0;
    HIDWORD(v34) = realloc_array(0, &v39, 4 * v13, 0, 0, 1) >> 2;
    unsigned int v33 = v39;
    LODWORD(v13) = *(_DWORD *)(a1 + 24);
    unsigned int v14 = HIDWORD(v32);
  }
  else
  {
    unsigned int v14 = 0;
  }
  if (v14 < v13)
  {
    int64_t v39 = 0;
    HIDWORD(v32) = realloc_array(v31, &v39, 4 * v13, 4 * v32, 4 * v32, 1) >> 2;
    unsigned int v31 = v39;
  }
  if (v36)
  {
    char v15 = 0;
    int v16 = 0;
    do
    {
      (*(void (**)(unint64_t, void **))(*(void *)a1 + 40))(a1, &__b);
      unint64_t v17 = v36;
      if (v36 >= 2)
      {
        uint64_t v18 = 0;
        unint64_t v19 = 1;
        do
        {
          if (Lattice<WordLatticeLC>::cmpNodesByOutLinksIgnoreNodes(a1, *((_DWORD *)__b + v18), *((_DWORD *)__b + v19)))
          {
            uint64_t v18 = v19;
          }
          else
          {
            Lattice<WordLatticeLC>::copyInLinks(a1, *((_DWORD *)__b + v19), (const WordLatticeLC *)*((unsigned int *)__b + v18));
            Lattice<WordLatticeLC>::destroyAllLinks(a1, *((_DWORD *)__b + v19));
            int v20 = *((_DWORD *)__b + v19);
            uint64_t v21 = v32;
            if (v32 == (unint64_t)HIDWORD(v32))
            {
              DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v31, 1, 1);
              uint64_t v21 = v32;
            }
            *((_DWORD *)v31 + v21) = v20;
            LODWORD(v32) = v32 + 1;
            char v15 = 1;
          }
          ++v19;
          unint64_t v17 = v36;
        }
        while (v19 < v36);
      }
      LODWORD(v34) = 0;
      if (v17)
      {
        unint64_t v22 = 0;
        uint64_t v23 = *(void *)(a1 + 80);
        do
        {
          uint64_t v24 = *(unsigned int *)(v23 + 24 * *((unsigned int *)__b + v22) + 16);
          if (v24 != -2)
          {
            uint64_t v25 = *(void *)(a1 + 128);
            unint64_t v26 = v37;
            do
            {
              unsigned int v27 = *(_DWORD *)(v25 + 136 * v24 + 116);
              if ((v26[*(unsigned int *)(v23 + 24 * v27)] & 0x80000000) != 0)
              {
                uint64_t v28 = v34;
                if (v34 == (unint64_t)HIDWORD(v34))
                {
                  DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v33, 1, 1);
                  uint64_t v28 = v34;
                  uint64_t v23 = *(void *)(a1 + 80);
                  unint64_t v26 = v37;
                  uint64_t v25 = *(void *)(a1 + 128);
                }
                *((_DWORD *)v33 + v28) = v27;
                LODWORD(v34) = v34 + 1;
                v26[*(unsigned int *)(v23 + 24 * v27)] = v16 + 1;
              }
              uint64_t v24 = *(unsigned int *)(v25 + 136 * v24 + 124);
            }
            while (v24 != -2);
            unint64_t v17 = v36;
          }
          ++v22;
        }
        while (v22 < v17);
        unsigned int v29 = v34;
      }
      else
      {
        unsigned int v29 = 0;
      }
      DgnPrimArray<int>::copyArraySlice((unint64_t)&__b, (uint64_t *)&v33, 0, v29);
      ++v16;
    }
    while (v36);
  }
  else
  {
    char v15 = 0;
  }
  if (v32) {
    Lattice<WordLatticeLC>::destroyNodesUsingGcMarks(a1, (uint64_t)&v31);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v31);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v33);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&__b);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v37);
  return v15 & 1;
}

void sub_213E15840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Lattice<WordLatticeLC>::reduceDAGOnceForward(unint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  if (v2)
  {
    __b = 0;
    unint64_t v3 = realloc_array(0, &__b, 4 * v2, 0, 0, 1);
    uint64_t v37 = __b;
    LODWORD(v38) = v2;
    HIDWORD(v38) = v3 >> 2;
    if ((int)v2 >= 1) {
      memset(__b, 255, 4 * v2);
    }
  }
  else
  {
    LODWORD(v38) = 0;
  }
  uint64_t v4 = *(unsigned int *)(a1 + 40);
  __b = 0;
  uint64_t v36 = 0;
  if (v4)
  {
    unsigned int v33 = 0;
    unint64_t v5 = realloc_array(0, &v33, 4 * v4, 0, 0, 1);
    char v6 = v33;
    __b = v33;
    uint64_t v7 = *(unsigned int *)(a1 + 40);
    LODWORD(v36) = v4;
    HIDWORD(v36) = v5 >> 2;
    if ((int)v7 >= 1)
    {
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = *(void *)(a1 + 80);
      unint64_t v10 = v7 + 1;
      uint64_t v11 = v37;
      do
      {
        unsigned int v12 = *(_DWORD *)(v8 + 4 * (v10 - 2));
        v6[(v10 - 2)] = v12;
        v11[*(unsigned int *)(v9 + 24 * v12)] = 0;
        --v10;
      }
      while (v10 > 1);
    }
  }
  else
  {
    LODWORD(v36) = 0;
  }
  unsigned int v33 = 0;
  uint64_t v34 = 0;
  unsigned int v31 = 0;
  uint64_t v32 = 0;
  uint64_t v13 = *(unsigned int *)(a1 + 24);
  if (v13)
  {
    int64_t v39 = 0;
    HIDWORD(v34) = realloc_array(0, &v39, 4 * v13, 0, 0, 1) >> 2;
    unsigned int v33 = v39;
    LODWORD(v13) = *(_DWORD *)(a1 + 24);
    unsigned int v14 = HIDWORD(v32);
  }
  else
  {
    unsigned int v14 = 0;
  }
  if (v14 < v13)
  {
    int64_t v39 = 0;
    HIDWORD(v32) = realloc_array(v31, &v39, 4 * v13, 4 * v32, 4 * v32, 1) >> 2;
    unsigned int v31 = v39;
  }
  if (v36)
  {
    char v15 = 0;
    int v16 = 0;
    do
    {
      (*(void (**)(unint64_t, void **))(*(void *)a1 + 32))(a1, &__b);
      unint64_t v17 = v36;
      if (v36 >= 2)
      {
        uint64_t v18 = 0;
        unint64_t v19 = 1;
        do
        {
          if (Lattice<WordLatticeLC>::cmpNodesByInLinksIgnoreNodes(a1, *((_DWORD *)__b + v18), *((_DWORD *)__b + v19)))
          {
            uint64_t v18 = v19;
          }
          else
          {
            Lattice<WordLatticeLC>::copyOutLinks(a1, *((_DWORD *)__b + v19), (const WordLatticeLC *)*((unsigned int *)__b + v18));
            Lattice<WordLatticeLC>::destroyAllLinks(a1, *((_DWORD *)__b + v19));
            int v20 = *((_DWORD *)__b + v19);
            uint64_t v21 = v32;
            if (v32 == (unint64_t)HIDWORD(v32))
            {
              DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v31, 1, 1);
              uint64_t v21 = v32;
            }
            *((_DWORD *)v31 + v21) = v20;
            LODWORD(v32) = v32 + 1;
            char v15 = 1;
          }
          ++v19;
          unint64_t v17 = v36;
        }
        while (v19 < v36);
      }
      LODWORD(v34) = 0;
      if (v17)
      {
        unint64_t v22 = 0;
        uint64_t v23 = *(void *)(a1 + 80);
        do
        {
          uint64_t v24 = *(unsigned int *)(v23 + 24 * *((unsigned int *)__b + v22) + 20);
          if (v24 != -2)
          {
            uint64_t v25 = *(void *)(a1 + 128);
            unint64_t v26 = v37;
            do
            {
              unsigned int v27 = *(_DWORD *)(v25 + 136 * v24 + 120);
              if ((v26[*(unsigned int *)(v23 + 24 * v27)] & 0x80000000) != 0)
              {
                uint64_t v28 = v34;
                if (v34 == (unint64_t)HIDWORD(v34))
                {
                  DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v33, 1, 1);
                  uint64_t v28 = v34;
                  uint64_t v23 = *(void *)(a1 + 80);
                  unint64_t v26 = v37;
                  uint64_t v25 = *(void *)(a1 + 128);
                }
                *((_DWORD *)v33 + v28) = v27;
                LODWORD(v34) = v34 + 1;
                v26[*(unsigned int *)(v23 + 24 * v27)] = v16 + 1;
              }
              uint64_t v24 = *(unsigned int *)(v25 + 136 * v24 + 128);
            }
            while (v24 != -2);
            unint64_t v17 = v36;
          }
          ++v22;
        }
        while (v22 < v17);
        unsigned int v29 = v34;
      }
      else
      {
        unsigned int v29 = 0;
      }
      DgnPrimArray<int>::copyArraySlice((unint64_t)&__b, (uint64_t *)&v33, 0, v29);
      ++v16;
    }
    while (v36);
  }
  else
  {
    char v15 = 0;
  }
  if (v32) {
    Lattice<WordLatticeLC>::destroyNodesUsingGcMarks(a1, (uint64_t)&v31);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v31);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v33);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&__b);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v37);
  return v15 & 1;
}

void sub_213E15C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Lattice<WordLatticeLC>::cmpNodesByOutLinksIgnoreNodes(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (a2 == a3) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 80);
  unsigned int v6 = *(_DWORD *)(v5 + 24 * a2 + 12);
  unsigned int v7 = *(_DWORD *)(v5 + 24 * a3 + 12);
  if (v6 == v7)
  {
    unsigned int v8 = *(_DWORD *)(v5 + 24 * a2 + 20);
    if (v8 == -2)
    {
      return 0;
    }
    else
    {
      uint64_t v9 = (unsigned int *)(v5 + 24 * a3 + 20);
      while (1)
      {
        unsigned int v10 = *v9;
        uint64_t result = Lattice<WordLatticeLC>::cmpOutLink(a1, v8, (const WordLatticeLC *)*v9);
        if (result) {
          break;
        }
        uint64_t v11 = *(void *)(a1 + 128);
        uint64_t v12 = v11 + 136 * v8;
        uint64_t v9 = (unsigned int *)(v11 + 136 * v10 + 128);
        unsigned int v8 = *(_DWORD *)(v12 + 128);
        if (v8 == -2) {
          return 0;
        }
      }
    }
  }
  else if (v6 < v7)
  {
    return 0xFFFFFFFFLL;
  }
  else
  {
    return 1;
  }
  return result;
}

void Lattice<WordLatticeLC>::copyInLinks(uint64_t a1, unsigned int a2, const WordLatticeLC *a3)
{
  uint64_t v3 = *(void *)(a1 + 80);
  uint64_t v4 = *(unsigned int *)(v3 + 24 * a2 + 16);
  if (v4 != -2)
  {
    int v5 = (int)a3;
    int v7 = 0;
    unsigned int v22 = a3;
    uint64_t v8 = *(unsigned int *)(v3 + 24 * a3 + 16);
    uint64_t v9 = *(void *)(a1 + 128);
    char v10 = 1;
    unsigned int v11 = -2;
    do
    {
      if (v8 != -2)
      {
        do
        {
          uint64_t v12 = v8;
          unsigned int v13 = v8;
          int v14 = WordLatticeLC::cmp((WordLatticeLC *)(v9 + 136 * v8), (const WordLatticeLC *)(v9 + 136 * v4), a3);
          if (v14)
          {
            uint64_t v9 = *(void *)(a1 + 128);
            if ((v14 & 0x80000000) == 0) {
              goto LABEL_12;
            }
          }
          else
          {
            uint64_t v9 = *(void *)(a1 + 128);
            unsigned int v15 = *(_DWORD *)(v9 + 136 * v13 + 116);
            unsigned int v16 = *(_DWORD *)(v9 + 136 * v4 + 116);
            if (v15 == v16) {
              goto LABEL_16;
            }
            if (*(_DWORD *)(*(void *)(a1 + 80) + 24 * v15 + 4) >= *(_DWORD *)(*(void *)(a1 + 80) + 24 * v16 + 4)) {
              goto LABEL_12;
            }
          }
          char v10 = 0;
          uint64_t v8 = *(unsigned int *)(v9 + 136 * v13 + 124);
          unsigned int v11 = v12;
        }
        while (v8 != -2);
        unsigned int v11 = v12;
      }
      uint64_t v12 = 4294967294;
LABEL_12:
      Link = (const WordLatticeLC *)Lattice<WordLatticeLC>::createLink(a1, *(_DWORD *)(v9 + 136 * v4 + 116), v5, (WordLatticeLC *)(v9 + 136 * v4));
      unsigned int v18 = Link;
      if (v10)
      {
        *(_DWORD *)(*(void *)(a1 + 80) + 24 * v22 + 16) = Link;
        uint64_t v19 = *(void *)(a1 + 128);
      }
      else
      {
        uint64_t v19 = *(void *)(a1 + 128);
        *(_DWORD *)(v19 + 136 * v11 + 124) = Link;
      }
      *(_DWORD *)(v19 + 136 * Link + 124) = v12;
      Lattice<WordLatticeLC>::connectOutLink((uint64_t *)a1, Link);
      char v10 = 0;
      ++v7;
      uint64_t v9 = *(void *)(a1 + 128);
      unsigned int v11 = v18;
LABEL_16:
      uint64_t v4 = *(unsigned int *)(v9 + 136 * v4 + 124);
      uint64_t v8 = v12;
    }
    while (v4 != -2);
    if (v7)
    {
      *(unsigned char *)(a1 + 8) = 0;
      uint64_t v20 = *(void *)(a1 + 80);
      int v21 = *(_DWORD *)(v20 + 24 * v22 + 8);
      if (!v21)
      {
        DgnPrimArray<unsigned int>::removeKeepOrder((uint64_t *)(a1 + 32), v5);
        uint64_t v20 = *(void *)(a1 + 80);
        int v21 = *(_DWORD *)(v20 + 24 * v22 + 8);
      }
      *(_DWORD *)(v20 + 24 * v22 + 8) = v21 + v7;
    }
  }
}

unint64_t Lattice<WordLatticeLC>::destroyAllLinks(unint64_t result, unsigned int a2)
{
  unint64_t v2 = result;
  uint64_t v3 = *(void *)(result + 80);
  unsigned int v5 = *(_DWORD *)(v3 + 24 * a2 + 20);
  if (v5 != -2)
  {
    do
    {
      unsigned int v6 = *(_DWORD *)(*(void *)(v2 + 128) + 136 * v5 + 128);
      uint64_t result = Lattice<WordLatticeLC>::disconnectAndDestroyLink(v2, v5);
      unsigned int v5 = v6;
    }
    while (v6 != -2);
    uint64_t v3 = *(void *)(v2 + 80);
  }
  unsigned int v7 = *(_DWORD *)(v3 + 24 * a2 + 16);
  if (v7 != -2)
  {
    do
    {
      unsigned int v8 = *(_DWORD *)(*(void *)(v2 + 128) + 136 * v7 + 124);
      uint64_t result = Lattice<WordLatticeLC>::disconnectAndDestroyLink(v2, v7);
      unsigned int v7 = v8;
    }
    while (v8 != -2);
  }
  return result;
}

unint64_t Lattice<WordLatticeLC>::destroyNodesUsingGcMarks(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a2 + 8);
  if (v4)
  {
    unsigned int v5 = *(unsigned int **)a2;
    uint64_t v6 = *(void *)(a1 + 80);
    do
    {
      unsigned int v7 = *v5++;
      *(_DWORD *)(v6 + 24 * v7) = -1;
      --v4;
    }
    while (v4);
  }
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v8 = *(unsigned int *)(a1 + 24);
  if (v8)
  {
    uint64_t v34 = 0;
    HIDWORD(v33) = realloc_array(0, &v34, 4 * v8, 0, 0, 1) >> 2;
    uint64_t v9 = v34;
    uint64_t v32 = v34;
    unint64_t v10 = *(unsigned int *)(a1 + 24);
    if (v10)
    {
      for (unint64_t i = 0; i < v10; ++i)
      {
        uint64_t v12 = *(void *)(a1 + 16);
        unsigned int v13 = (_DWORD *)(*(void *)(a1 + 80) + 24 * *(unsigned int *)(v12 + 4 * i));
        if (*v13 != -1)
        {
          uint64_t v14 = v33;
          *unsigned int v13 = v33;
          int v15 = *(_DWORD *)(v12 + 4 * i);
          if (v14 == HIDWORD(v33))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v32, 1, 1);
            uint64_t v14 = v33;
            uint64_t v9 = v32;
          }
          v9[v14] = v15;
          LODWORD(v33) = v33 + 1;
          unint64_t v10 = *(unsigned int *)(a1 + 24);
        }
      }
    }
  }
  DgnPrimArray<int>::copyArraySlice(a1 + 16, (uint64_t *)&v32, 0, v33);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v32);
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v16 = *(unsigned int *)(a1 + 40);
  if (v16)
  {
    uint64_t v34 = 0;
    HIDWORD(v33) = realloc_array(0, &v34, 4 * v16, 0, 0, 1) >> 2;
    unint64_t v17 = v34;
    uint64_t v32 = v34;
    unint64_t v18 = *(unsigned int *)(a1 + 40);
    if (v18)
    {
      for (unint64_t j = 0; j < v18; ++j)
      {
        unsigned int v20 = *(_DWORD *)(*(void *)(a1 + 32) + 4 * j);
        if (*(_DWORD *)(*(void *)(a1 + 80) + 24 * v20) != -1)
        {
          uint64_t v21 = v33;
          if (v33 == (unint64_t)HIDWORD(v33))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v32, 1, 1);
            uint64_t v21 = v33;
            unint64_t v17 = v32;
          }
          v17[v21] = v20;
          LODWORD(v33) = v33 + 1;
          unint64_t v18 = *(unsigned int *)(a1 + 40);
        }
      }
    }
  }
  DgnPrimArray<int>::copyArraySlice(a1 + 32, (uint64_t *)&v32, 0, v33);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v32);
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v22 = *(unsigned int *)(a1 + 56);
  if (v22)
  {
    uint64_t v34 = 0;
    HIDWORD(v33) = realloc_array(0, &v34, 4 * v22, 0, 0, 1) >> 2;
    uint64_t v23 = v34;
    uint64_t v32 = v34;
    unint64_t v24 = *(unsigned int *)(a1 + 56);
    if (v24)
    {
      for (unint64_t k = 0; k < v24; ++k)
      {
        unsigned int v26 = *(_DWORD *)(*(void *)(a1 + 48) + 4 * k);
        if (*(_DWORD *)(*(void *)(a1 + 80) + 24 * v26) != -1)
        {
          uint64_t v27 = v33;
          if (v33 == (unint64_t)HIDWORD(v33))
          {
            DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v32, 1, 1);
            uint64_t v27 = v33;
            uint64_t v23 = v32;
          }
          v23[v27] = v26;
          LODWORD(v33) = v33 + 1;
          unint64_t v24 = *(unsigned int *)(a1 + 56);
        }
      }
    }
  }
  DgnPrimArray<int>::copyArraySlice(a1 + 48, (uint64_t *)&v32, 0, v33);
  unint64_t result = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v32);
  if (*(_DWORD *)(a2 + 8))
  {
    unint64_t v29 = 0;
    unsigned int v30 = *(_DWORD *)(a1 + 72);
    do
    {
      int v31 = *(_DWORD *)(*(void *)a2 + 4 * v29);
      if (v30 == *(_DWORD *)(a1 + 76))
      {
        unint64_t result = DgnPrimArray<unsigned int>::reallocElts(a1 + 64, 1, 1);
        unsigned int v30 = *(_DWORD *)(a1 + 72);
      }
      *(_DWORD *)(*(void *)(a1 + 64) + 4 * v30) = v31;
      unsigned int v30 = *(_DWORD *)(a1 + 72) + 1;
      *(_DWORD *)(a1 + 72) = v30;
      ++v29;
    }
    while (v29 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

void sub_213E162F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Lattice<WordLatticeLC>::cmpOutLink(uint64_t a1, unsigned int a2, const WordLatticeLC *a3)
{
  if (a2 == a3) {
    return 0;
  }
  unsigned int v4 = a3;
  uint64_t result = WordLatticeLC::cmp((WordLatticeLC *)(*(void *)(a1 + 128) + 136 * a2), (const WordLatticeLC *)(*(void *)(a1 + 128) + 136 * a3), a3);
  if (!result)
  {
    uint64_t v7 = *(void *)(a1 + 128);
    unsigned int v8 = *(_DWORD *)(v7 + 136 * a2 + 120);
    unsigned int v9 = *(_DWORD *)(v7 + 136 * v4 + 120);
    if (v8 == v9)
    {
      return 0;
    }
    else if (*(_DWORD *)(*(void *)(a1 + 80) + 24 * v8 + 4) < *(_DWORD *)(*(void *)(a1 + 80) + 24 * v9 + 4))
    {
      return 0xFFFFFFFFLL;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t Lattice<WordLatticeLC>::createLink(uint64_t a1, int a2, int a3, WordLatticeLC *a4)
{
  WordLatticeLC::WordLatticeLC((WordLatticeLC *)v15, a4);
  int v7 = *(_DWORD *)(a1 + 120);
  if (v7)
  {
    unsigned int v8 = v7 - 1;
    uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 112) + 4 * v8);
    *(_DWORD *)(a1 + 120) = v8;
  }
  else
  {
    uint64_t v9 = *(unsigned int *)(a1 + 136);
    unsigned int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 140))
    {
      DgnArray<LatticeLink<WordLatticeLC>>::reallocElts(a1 + 128, 1, 1);
      unsigned int v10 = *(_DWORD *)(a1 + 136);
    }
    uint64_t v11 = *(void *)(a1 + 128) + 136 * v10;
    *(_DWORD *)(v11 + 16) = -16;
    *(_OWORD *)(v11 + 20) = 0u;
    *(_OWORD *)(v11 + 36) = 0u;
    *(_OWORD *)(v11 + 48) = 0u;
    *(void *)(v11 + 64) = 1879048192;
    *(_DWORD *)(v11 + 72) = 0;
    *(void *)(v11 + 80) = -1;
    *(void *)uint64_t v11 = &unk_26C4E0568;
    *(void *)(v11 + 8) = 0xBFF0000000000000;
    *(_DWORD *)(v11 + 92) = 0x3FFF;
    *(_OWORD *)(v11 + 96) = xmmword_2140866D0;
    ++*(_DWORD *)(a1 + 136);
  }
  uint64_t v12 = *(void *)(a1 + 128) + 136 * v9;
  *(void *)(v12 + 8) = v15[1];
  *(_OWORD *)(v12 + 16) = v16;
  *(_OWORD *)(v12 + 32) = v17;
  *(_OWORD *)(v12 + 48) = v18;
  *(void *)(v12 + 64) = v19;
  *(_DWORD *)(v12 + 72) = v20;
  *(void *)(v12 + 80) = v21;
  *(_DWORD *)(v12 + 88) = v22;
  *(_WORD *)(v12 + 92) = v23;
  *(_WORD *)(v12 + 94) = v24;
  *(_OWORD *)(v12 + 96) = v25;
  unsigned int v13 = *(_DWORD *)(a1 + 104);
  *(_DWORD *)(v12 + 112) = v13;
  *(_DWORD *)(v12 + 116) = a2;
  *(_DWORD *)(v12 + 120) = a3;
  *(void *)(v12 + 124) = 0x100000001;
  if (v13 == *(_DWORD *)(a1 + 108))
  {
    DgnPrimArray<unsigned int>::reallocElts(a1 + 96, 1, 1);
    unsigned int v13 = *(_DWORD *)(a1 + 104);
  }
  *(_DWORD *)(*(void *)(a1 + 96) + 4 * v13) = v9;
  ++*(_DWORD *)(a1 + 104);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v15);
  return v9;
}

void sub_213E16588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void Lattice<WordLatticeLC>::connectOutLink(uint64_t *a1, const WordLatticeLC *a2)
{
  uint64_t v4 = a1[16];
  unsigned int v5 = a2;
  unsigned int v6 = *(_DWORD *)(v4 + 136 * a2 + 116);
  uint64_t v7 = a1[10];
  uint64_t v8 = v7 + 24 * v6;
  unsigned int v11 = *(_DWORD *)(v8 + 20);
  unsigned int v10 = (int *)(v8 + 20);
  unsigned int v9 = v11;
  if (v11 == -2)
  {
    int v12 = -2;
  }
  else
  {
    do
    {
      int v13 = Lattice<WordLatticeLC>::cmpOutLink((uint64_t)a1, v9, a2);
      if (v13)
      {
        if (v13 >= 1)
        {
          int v12 = *v10;
          uint64_t v4 = a1[16];
          goto LABEL_9;
        }
      }
      else
      {
        DuplicateLinkError(*(_DWORD *)(a1[16] + 136 * v5 + 112), *(_DWORD *)(a1[16] + 136 * *v10 + 112), v14, v15, v16, v17, v18, v19);
      }
      uint64_t v4 = a1[16];
      uint64_t v20 = v4 + 136 * *v10;
      unsigned int v21 = *(_DWORD *)(v20 + 128);
      unsigned int v10 = (int *)(v20 + 128);
      unsigned int v9 = v21;
    }
    while (v21 != -2);
    int v12 = -2;
LABEL_9:
    uint64_t v7 = a1[10];
  }
  *unsigned int v10 = (int)a2;
  *(_DWORD *)(v4 + 136 * v5 + 128) = v12;
  uint64_t v22 = v7 + 24 * v6;
  int v23 = *(_DWORD *)(v22 + 12);
  *(_DWORD *)(v22 + 12) = v23 + 1;
  if (!v23)
  {
    DgnPrimArray<unsigned int>::removeKeepOrder(a1 + 6, v6);
  }
}

uint64_t DgnPrimArray<unsigned int>::removeKeepOrder(uint64_t *a1, int a2)
{
  unint64_t v2 = *((unsigned int *)a1 + 2);
  if (!v2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  uint64_t v5 = *a1;
  while (*(_DWORD *)(v5 + 4 * result) != a2)
  {
    if (v2 == ++result) {
      return 0xFFFFFFFFLL;
    }
  }
  LODWORD(v2) = v2 - 1;
  if (v2 > result)
  {
    unint64_t v6 = result;
    do
    {
      *(_DWORD *)(v5 + 4 * v6) = *(_DWORD *)(v5 + 4 * v6 + 4);
      unint64_t v2 = (*((_DWORD *)a1 + 2) - 1);
      ++v6;
    }
    while (v6 < v2);
  }
  *((_DWORD *)a1 + 2) = v2;
  return result;
}

void WordLatticeLC::WordLatticeLC(WordLatticeLC *this, const WordLatticeLC *a2)
{
  BaseWordLatticeLC::BaseWordLatticeLC((uint64_t)this, (uint64_t)a2);
  *(void *)uint64_t v3 = &unk_26C4E0568;
  *(_DWORD *)(v3 + 88) = *((_DWORD *)a2 + 22);
  *(_DWORD *)(v3 + 92) = *((_DWORD *)a2 + 23);
  *(_OWORD *)(v3 + 96) = *((_OWORD *)a2 + 6);
}

double BaseWordLatticeLC::BaseWordLatticeLC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C4E14A8;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  double result = *(double *)(a2 + 64);
  *(double *)(a1 + 64) = result;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  return result;
}

unint64_t DgnArray<LatticeLink<WordLatticeLC>>::reallocElts(uint64_t a1, uint64_t a2, int a3)
{
  int v3 = a2;
  if (a3) {
    int v3 = minAddAllocWithExtra(a2, *(_DWORD *)(a1 + 12));
  }
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 12) + v3;
  uint64_t v8 = 0;
  unint64_t result = realloc_array(*(void **)a1, &v8, 136 * v6, 136 * v5, 136 * v5, 1);
  *(_DWORD *)(a1 + 12) = result / 0x88;
  *(void *)a1 = v8;
  return result;
}

uint64_t Lattice<WordLatticeLC>::cmpNodesByInLinksIgnoreNodes(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (a2 == a3) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 80);
  unsigned int v6 = *(_DWORD *)(v5 + 24 * a2 + 8);
  unsigned int v7 = *(_DWORD *)(v5 + 24 * a3 + 8);
  if (v6 == v7)
  {
    unsigned int v8 = *(_DWORD *)(v5 + 24 * a2 + 16);
    if (v8 == -2)
    {
      return 0;
    }
    else
    {
      unsigned int v9 = (unsigned int *)(v5 + 24 * a3 + 16);
      while (1)
      {
        unsigned int v10 = *v9;
        uint64_t result = Lattice<WordLatticeLC>::cmpInLink(a1, v8, (const WordLatticeLC *)*v9);
        if (result) {
          break;
        }
        uint64_t v11 = *(void *)(a1 + 128);
        uint64_t v12 = v11 + 136 * v8;
        unsigned int v9 = (unsigned int *)(v11 + 136 * v10 + 124);
        unsigned int v8 = *(_DWORD *)(v12 + 124);
        if (v8 == -2) {
          return 0;
        }
      }
    }
  }
  else if (v6 < v7)
  {
    return 0xFFFFFFFFLL;
  }
  else
  {
    return 1;
  }
  return result;
}

void Lattice<WordLatticeLC>::copyOutLinks(uint64_t a1, unsigned int a2, const WordLatticeLC *a3)
{
  uint64_t v3 = *(void *)(a1 + 80);
  uint64_t v4 = *(unsigned int *)(v3 + 24 * a2 + 20);
  if (v4 != -2)
  {
    int v5 = (int)a3;
    int v7 = 0;
    unsigned int v22 = a3;
    uint64_t v8 = *(unsigned int *)(v3 + 24 * a3 + 20);
    uint64_t v9 = *(void *)(a1 + 128);
    char v10 = 1;
    unsigned int v11 = -2;
    do
    {
      if (v8 != -2)
      {
        do
        {
          uint64_t v12 = v8;
          unsigned int v13 = v8;
          int v14 = WordLatticeLC::cmp((WordLatticeLC *)(v9 + 136 * v8), (const WordLatticeLC *)(v9 + 136 * v4), a3);
          if (v14)
          {
            uint64_t v9 = *(void *)(a1 + 128);
            if ((v14 & 0x80000000) == 0) {
              goto LABEL_12;
            }
          }
          else
          {
            uint64_t v9 = *(void *)(a1 + 128);
            unsigned int v15 = *(_DWORD *)(v9 + 136 * v13 + 120);
            unsigned int v16 = *(_DWORD *)(v9 + 136 * v4 + 120);
            if (v15 == v16) {
              goto LABEL_16;
            }
            if (*(_DWORD *)(*(void *)(a1 + 80) + 24 * v15 + 4) >= *(_DWORD *)(*(void *)(a1 + 80) + 24 * v16 + 4)) {
              goto LABEL_12;
            }
          }
          char v10 = 0;
          uint64_t v8 = *(unsigned int *)(v9 + 136 * v13 + 128);
          unsigned int v11 = v12;
        }
        while (v8 != -2);
        unsigned int v11 = v12;
      }
      uint64_t v12 = 4294967294;
LABEL_12:
      Linunint64_t k = (const WordLatticeLC *)Lattice<WordLatticeLC>::createLink(a1, v5, *(_DWORD *)(v9 + 136 * v4 + 120), (WordLatticeLC *)(v9 + 136 * v4));
      unsigned int v18 = Link;
      if (v10)
      {
        *(_DWORD *)(*(void *)(a1 + 80) + 24 * v22 + 20) = Link;
        uint64_t v19 = *(void *)(a1 + 128);
      }
      else
      {
        uint64_t v19 = *(void *)(a1 + 128);
        *(_DWORD *)(v19 + 136 * v11 + 128) = Link;
      }
      *(_DWORD *)(v19 + 136 * Link + 128) = v12;
      Lattice<WordLatticeLC>::connectInLink((uint64_t *)a1, Link);
      char v10 = 0;
      ++v7;
      uint64_t v9 = *(void *)(a1 + 128);
      unsigned int v11 = v18;
LABEL_16:
      uint64_t v4 = *(unsigned int *)(v9 + 136 * v4 + 128);
      uint64_t v8 = v12;
    }
    while (v4 != -2);
    if (v7)
    {
      *(unsigned char *)(a1 + 8) = 0;
      uint64_t v20 = *(void *)(a1 + 80);
      int v21 = *(_DWORD *)(v20 + 24 * v22 + 12);
      if (!v21)
      {
        DgnPrimArray<unsigned int>::removeKeepOrder((uint64_t *)(a1 + 48), v5);
        uint64_t v20 = *(void *)(a1 + 80);
        int v21 = *(_DWORD *)(v20 + 24 * v22 + 12);
      }
      *(_DWORD *)(v20 + 24 * v22 + 12) = v21 + v7;
    }
  }
}

uint64_t Lattice<WordLatticeLC>::cmpInLink(uint64_t a1, unsigned int a2, const WordLatticeLC *a3)
{
  if (a2 == a3) {
    return 0;
  }
  unsigned int v4 = a3;
  uint64_t result = WordLatticeLC::cmp((WordLatticeLC *)(*(void *)(a1 + 128) + 136 * a2), (const WordLatticeLC *)(*(void *)(a1 + 128) + 136 * a3), a3);
  if (!result)
  {
    uint64_t v7 = *(void *)(a1 + 128);
    unsigned int v8 = *(_DWORD *)(v7 + 136 * a2 + 116);
    unsigned int v9 = *(_DWORD *)(v7 + 136 * v4 + 116);
    if (v8 == v9)
    {
      return 0;
    }
    else if (*(_DWORD *)(*(void *)(a1 + 80) + 24 * v8 + 4) < *(_DWORD *)(*(void *)(a1 + 80) + 24 * v9 + 4))
    {
      return 0xFFFFFFFFLL;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void Lattice<WordLatticeLC>::connectInLink(uint64_t *a1, const WordLatticeLC *a2)
{
  uint64_t v4 = a1[16];
  unsigned int v5 = a2;
  unsigned int v6 = *(_DWORD *)(v4 + 136 * a2 + 120);
  uint64_t v7 = a1[10];
  uint64_t v8 = v7 + 24 * v6;
  unsigned int v11 = *(_DWORD *)(v8 + 16);
  char v10 = (int *)(v8 + 16);
  unsigned int v9 = v11;
  if (v11 == -2)
  {
    int v12 = -2;
  }
  else
  {
    do
    {
      int v13 = Lattice<WordLatticeLC>::cmpInLink((uint64_t)a1, v9, a2);
      if (v13)
      {
        if (v13 >= 1)
        {
          int v12 = *v10;
          uint64_t v4 = a1[16];
          goto LABEL_9;
        }
      }
      else
      {
        DuplicateLinkError(*(_DWORD *)(a1[16] + 136 * v5 + 112), *(_DWORD *)(a1[16] + 136 * *v10 + 112), v14, v15, v16, v17, v18, v19);
      }
      uint64_t v4 = a1[16];
      uint64_t v20 = v4 + 136 * *v10;
      unsigned int v21 = *(_DWORD *)(v20 + 124);
      char v10 = (int *)(v20 + 124);
      unsigned int v9 = v21;
    }
    while (v21 != -2);
    int v12 = -2;
LABEL_9:
    uint64_t v7 = a1[10];
  }
  *char v10 = (int)a2;
  *(_DWORD *)(v4 + 136 * v5 + 124) = v12;
  uint64_t v22 = v7 + 24 * v6;
  int v23 = *(_DWORD *)(v22 + 8);
  *(_DWORD *)(v22 + 8) = v23 + 1;
  if (!v23)
  {
    DgnPrimArray<unsigned int>::removeKeepOrder(a1 + 4, v6);
  }
}

uint64_t Lattice<WordLatticeLC>::topSortInternal(uint64_t a1, int a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  unsigned int v5 = (void *)(a1 + 16);
  BOOL v74 = 0;
  uint64_t v75 = 0;
  if (v4)
  {
    v73[0] = 0;
    unint64_t v6 = realloc_array(0, v73, 4 * v4, 0, 0, 1);
    uint64_t v7 = v73[0];
    BOOL v74 = v73[0];
    int v8 = *(_DWORD *)(a1 + 24);
    LODWORD(v75) = v4;
    HIDWORD(v75) = v6 >> 2;
    if (!v8)
    {
      unsigned int v21 = 0;
      goto LABEL_36;
    }
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = *(void *)(a1 + 16);
    uint64_t v12 = *(void *)(a1 + 80);
    do
    {
      unsigned int v13 = *(_DWORD *)(v11 + 4 * v9);
      int v14 = *(_DWORD *)(v12 + 24 * v13 + 8);
      if (!v14)
      {
        if (v9 == v10)
        {
          int v14 = 0;
        }
        else
        {
          if (a2) {
            goto LABEL_66;
          }
          unsigned int v15 = *(_DWORD *)(v11 + 4 * v10);
          *(_DWORD *)(v11 + 4 * v9) = v15;
          *(_DWORD *)(v12 + 24 * v15) = v9;
          *(_DWORD *)(v11 + 4 * v10) = v13;
          *(_DWORD *)(v12 + 24 * v13) = v10;
          int v14 = v7[v10];
          v7[v10] = 0;
        }
        uint64_t v10 = (v10 + 1);
      }
      v7[v9++] = v14;
    }
    while (v9 < *(unsigned int *)(a1 + 24));
    if (v10 >= 2)
    {
      if (a2)
      {
        uint64_t v16 = (unsigned int *)(*v5 + 4);
        uint64_t v17 = *(unsigned int *)*v5;
        uint64_t v18 = v10 - 1;
        while (1)
        {
          unsigned int v20 = *v16++;
          uint64_t v19 = v20;
          if (v17 == v20
            || *(_DWORD *)(*(void *)(a1 + 80) + 24 * v17 + 4) >= *(_DWORD *)(*(void *)(a1 + 80)
                                                                             + 24 * v19
                                                                             + 4))
          {
            goto LABEL_66;
          }
          uint64_t v17 = v19;
          if (!--v18) {
            goto LABEL_19;
          }
        }
      }
      (*(void (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 24))(a1, v5, v10);
      if ((int)v10 >= 1)
      {
        uint64_t v67 = *(void *)(a1 + 16);
        uint64_t v68 = *(void *)(a1 + 80);
        unint64_t v69 = v10;
        uint64_t v70 = *(void *)(a1 + 32);
        do
        {
          BOOL v71 = v69-- > 1;
          *(_DWORD *)(v68 + 24 * *(unsigned int *)(v67 + 4 * v69)) = v69;
          *(_DWORD *)(v70 + 4 * v69) = *(_DWORD *)(v67 + 4 * v69);
        }
        while (v71);
      }
    }
  }
  else
  {
    LODWORD(v10) = 0;
    LODWORD(v75) = 0;
  }
LABEL_19:
  unsigned int v21 = *(_DWORD *)(a1 + 24);
  if (v21)
  {
    unint64_t v22 = 0;
    unsigned int v23 = 0;
    uint64_t v24 = *(void *)(a1 + 16);
    uint64_t v25 = *(void *)(a1 + 80);
    do
    {
      uint64_t v26 = *(unsigned int *)(v25 + 24 * *(unsigned int *)(v24 + 4 * v22) + 20);
      if (v26 != -2)
      {
        uint64_t v27 = *(void *)(a1 + 128);
        uint64_t v28 = v74;
        do
        {
          uint64_t v29 = *(unsigned int *)(v27 + 136 * v26 + 112);
          if (v23 != v29)
          {
            if (a2) {
              goto LABEL_66;
            }
            uint64_t v30 = *(void *)(a1 + 96);
            unsigned int v31 = *(_DWORD *)(v30 + 4 * v29);
            unsigned int v32 = *(_DWORD *)(v30 + 4 * v23);
            *(_DWORD *)(v30 + 4 * v29) = v32;
            *(_DWORD *)(v27 + 136 * v32 + 112) = v29;
            *(_DWORD *)(v30 + 4 * v23) = v31;
            *(_DWORD *)(v27 + 136 * v31 + 112) = v23;
          }
          uint64_t v33 = *(unsigned int *)(v25 + 24 * *(unsigned int *)(v27 + 136 * v26 + 120));
          int v34 = v28[v33] - 1;
          v28[v33] = v34;
          if (!v34)
          {
            if (v33 != v10)
            {
              if (a2) {
                goto LABEL_66;
              }
              unsigned int v35 = *(_DWORD *)(v24 + 4 * v33);
              unsigned int v36 = *(_DWORD *)(v24 + 4 * v10);
              *(_DWORD *)(v24 + 4 * v33) = v36;
              *(_DWORD *)(v25 + 24 * v36) = v33;
              *(_DWORD *)(v24 + 4 * v10) = v35;
              *(_DWORD *)(v25 + 24 * v35) = v10;
              v28[v33] = v28[v10];
              v28[v10] = 0;
            }
            LODWORD(v10) = v10 + 1;
          }
          uint64_t v26 = *(unsigned int *)(v27 + 136 * v26 + 128);
          ++v23;
        }
        while (v26 != -2);
        unsigned int v21 = *(_DWORD *)(a1 + 24);
      }
      ++v22;
    }
    while (v22 < v21);
  }
LABEL_36:
  unsigned int v37 = *(_DWORD *)(a1 + 56);
  if (v37 >= 2)
  {
    if (a2)
    {
      int v38 = v37 - 1;
      unsigned int v39 = v21 - 2;
      while (1)
      {
        BOOL v40 = __OFSUB__(v38--, 1);
        if (v38 < 0 != v40) {
          break;
        }
        unsigned int v41 = *(_DWORD *)(*v5 + 4 * v39);
        unsigned int v42 = *(_DWORD *)(*v5 + 4 * (v39 + 1));
        if (v41 != v42)
        {
          --v39;
          if (*(_DWORD *)(*(void *)(a1 + 80) + 24 * v41 + 4) < *(_DWORD *)(*(void *)(a1 + 80) + 24 * v42 + 4)) {
            continue;
          }
        }
        goto LABEL_66;
      }
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, a1 + 48);
      if ((int)(v37 - 1) < 0) {
        goto LABEL_60;
      }
      uint64_t v43 = *(void *)(a1 + 16);
      uint64_t v44 = *(void *)(a1 + 80);
      uint64_t v45 = (unsigned int *)(*(void *)(a1 + 48) + 4 * (v37 - 1));
      unsigned int v46 = *(_DWORD *)(a1 + 24) - 1;
      do
      {
        unsigned int v47 = *v45--;
        *(_DWORD *)(v43 + 4 * v46) = v47;
        *(_DWORD *)(v44 + 24 * v47) = v46--;
        --v37;
      }
      while (v37);
    }
  }
  if (a2)
  {
    unsigned int v48 = *(_DWORD *)(a1 + 24);
    if (v48)
    {
      unsigned __int8 v49 = 0;
      uint64_t v50 = *(unsigned int **)(a1 + 16);
      uint64_t v51 = *(void *)(a1 + 80);
      char v52 = 1;
      uint64_t v53 = *(unsigned int *)(a1 + 24);
      do
      {
        unsigned int v55 = *v50++;
        unsigned int v54 = v55;
        int v56 = *(_DWORD *)(v51 + 24 * v55 + 8);
        if ((v52 & 1) == 0 && !v56) {
          goto LABEL_66;
        }
        int v57 = *(_DWORD *)(v51 + 24 * v54 + 12);
        if ((v49 & (v57 != 0)) != 0) {
          goto LABEL_66;
        }
        v49 |= v57 == 0;
        v52 &= v56 == 0;
      }
      while (--v53);
    }
    DgnPrimArray<unsigned char>::DgnPrimArray((uint64_t)v73, v48);
    size_t v58 = *(unsigned int *)(a1 + 24);
    if ((int)v58 >= 1) {
      bzero(v73[0], v58);
    }
    uint64_t v59 = *(unsigned int *)(a1 + 104);
    if (v59)
    {
      uint64_t v60 = *(unsigned int **)(a1 + 96);
      uint64_t v61 = *(void *)(a1 + 128);
      uint64_t v62 = *(void *)(a1 + 80);
      uint64_t v63 = v73[0];
      while (1)
      {
        unsigned int v64 = *v60++;
        uint64_t v65 = v61 + 136 * v64;
        v63[*(unsigned int *)(v62 + 24 * *(unsigned int *)(v65 + 116))] = 1;
        if (v63[*(unsigned int *)(v62 + 24 * *(unsigned int *)(v65 + 120))]) {
          break;
        }
        if (!--v59) {
          goto LABEL_59;
        }
      }
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v73);
LABEL_66:
      uint64_t v66 = 0;
      goto LABEL_67;
    }
LABEL_59:
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v73);
  }
LABEL_60:
  uint64_t v66 = 1;
LABEL_67:
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v74);
  return v66;
}

void sub_213E1717C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t HashKEV<ComposeLatticeNode,ComposeLatticeNode,ComposeLatticeNode>::HashKEV(uint64_t a1, const char *a2, int a3)
{
  HashBase::HashBase((HashBase *)a1, a2);
  *(void *)uint64_t v5 = &unk_26C4E4BF0;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_DWORD *)(v5 + 72) = 0;
  *(void *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 88) = 0;
  int v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(void *)(a1 + 96) = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    int v7 = 28;
  }
  else {
    int v7 = 32;
  }
  *(_DWORD *)(a1 + 24) = 32;
  *(_DWORD *)(a1 + 28) = v7;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_213E17250(_Unwind_Exception *a1)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void HashKEV<ComposeLatticeNode,ComposeLatticeNode,ComposeLatticeNode>::~HashKEV(uint64_t a1)
{
  HashKEV<ComposeLatticeNode,ComposeLatticeNode,ComposeLatticeNode>::~HashKEV(a1);

  JUMPOUT(0x216698730);
}

uint64_t HashKEV<ComposeLatticeNode,ComposeLatticeNode,ComposeLatticeNode>::~HashKEV(uint64_t a1)
{
  *(void *)a1 = &unk_26C4E4BF0;
  if (*(_DWORD *)(a1 + 8)) {
    HashKEV<unsigned int,unsigned int,CWIDScope>::removeAll(a1);
  }
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));

  return MrecInitModule_sdpres_sdapi();
}

uint64_t Hash<CwidStatePair,CwidStatePair,CwidStatePair,BOOL>::Hash(uint64_t a1, const char *a2, int a3)
{
  HashBase::HashBase((HashBase *)a1, a2);
  *(void *)uint64_t v5 = &unk_26C4E45B0;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_DWORD *)(v5 + 72) = 0;
  *(void *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 88) = 0;
  int v6 = RoundUpToPowerOf2(a3, (unsigned int *)(v5 + 16));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v6;
  HashKEV<unsigned int,unsigned int,CWIDScope>::initBuckets((uint64_t *)a1);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    int v7 = 17;
  }
  else {
    int v7 = 21;
  }
  *(_DWORD *)(a1 + 24) = 32;
  *(_DWORD *)(a1 + 28) = v7;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_213E173E0(_Unwind_Exception *a1)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray(v2);
  DgnPool::~DgnPool(v1);
  MrecInitModule_sdpres_sdapi();
  _Unwind_Resume(a1);
}

void Hash<CwidStatePair,CwidStatePair,CwidStatePair,BOOL>::~Hash(uint64_t a1)
{
  Hash<CwidStatePair,CwidStatePair,CwidStatePair,BOOL>::~Hash(a1);

  JUMPOUT(0x216698730);
}

uint64_t Hash<CwidStatePair,CwidStatePair,CwidStatePair,BOOL>::~Hash(uint64_t a1)
{
  *(void *)a1 = &unk_26C4E45B0;
  if (*(_DWORD *)(a1 + 8)) {
    Hash<StateSpec,StateSpec,StateSpec,BOOL>::removeAll(a1);
  }
  DgnPrimFixArray<double>::~DgnPrimFixArray(a1 + 80);
  DgnPool::~DgnPool((DgnPool *)(a1 + 24));

  return MrecInitModule_sdpres_sdapi();
}

uint64_t **Hash<CwidStatePair,CwidStatePair,CwidStatePair,BOOL>::findBucket(uint64_t a1, _DWORD *a2)
{
  int v2 = a2[1];
  HIDWORD(v3) = *a2;
  LODWORD(v3) = *a2;
  int v4 = (v3 >> 19) + v2;
  int v5 = *(_DWORD *)(a1 + 16);
  if (v5) {
    unsigned int v6 = (-1640531527 * v4) >> -(char)v5;
  }
  else {
    unsigned int v6 = 0;
  }
  uint64_t result = (uint64_t **)(*(void *)(a1 + 80) + 8 * v6);
  int v8 = *result;
  if (*result)
  {
    do
    {
      unint64_t v9 = (uint64_t **)v8;
      if (*((_DWORD *)v8 + 2) == v4 && *((_DWORD *)v8 + 3) == *a2 && *((_DWORD *)v8 + 4) == v2) {
        break;
      }
      int v8 = (uint64_t *)*v8;
      uint64_t result = v9;
    }
    while (*v9);
  }
  return result;
}

uint64_t *Lattice<WordLatticeLC>::connectInLinkUnordered(uint64_t *result, unsigned int a2)
{
  uint64_t v3 = result[16] + 136 * a2;
  unsigned int v4 = *(_DWORD *)(v3 + 120);
  uint64_t v5 = result[10] + 24 * v4;
  int v6 = *(_DWORD *)(v5 + 16);
  *(_DWORD *)(v5 + 16) = a2;
  *(_DWORD *)(v3 + 124) = v6;
  int v7 = *(_DWORD *)(v5 + 8);
  *(_DWORD *)(v5 + 8) = v7 + 1;
  if (!v7) {
    return (uint64_t *)DgnPrimArray<unsigned int>::removeKeepOrder(result + 4, v4);
  }
  return result;
}

uint64_t *Lattice<WordLatticeLC>::connectOutLinkUnordered(uint64_t *result, unsigned int a2)
{
  uint64_t v3 = result[16] + 136 * a2;
  unsigned int v4 = *(_DWORD *)(v3 + 116);
  uint64_t v5 = result[10] + 24 * v4;
  int v6 = *(_DWORD *)(v5 + 20);
  *(_DWORD *)(v5 + 20) = a2;
  *(_DWORD *)(v3 + 128) = v6;
  int v7 = *(_DWORD *)(v5 + 12);
  *(_DWORD *)(v5 + 12) = v7 + 1;
  if (!v7) {
    return (uint64_t *)DgnPrimArray<unsigned int>::removeKeepOrder(result + 6, v4);
  }
  return result;
}

void (***DgnDelete<Recognizer>(void (***result)(void)))(void)
{
  if (result)
  {
    unint64_t v1 = result;
    (**result)(result);
    return (void (***)(void))MemChunkFree(v1, 0);
  }
  return result;
}

void TTokenizerParamManager::TTokenizerParamManager(TTokenizerParamManager *this, TLocaleInfo *a2)
{
  TParamManager::TParamManager(this, 0, a2);
  *uint64_t v3 = &unk_26C4E32C8;
  unint64_t v9 = (TParam *)(v3 + 18);
  TBoolParam::TBoolParam((uint64_t)(v3 + 18), (uint64_t)"S", (uint64_t)"I", 0, 0, (uint64_t)"9", (uint64_t)&dword_21408D8B4);
  TBoolParam::TBoolParam((uint64_t)this + 392, (uint64_t)"P", (uint64_t)"I", 0, 0, (uint64_t)"9", (uint64_t)&dword_21408D8B4);
  TBoolParam::TBoolParam((uint64_t)this + 640, (uint64_t)"T", (uint64_t)"T", 0, 0, (uint64_t)"9", (uint64_t)&dword_21408D8B4);
  TBoolParam::TBoolParam((uint64_t)this + 888, (uint64_t)"A", (uint64_t)"I", 0, 0, (uint64_t)"9", (uint64_t)&dword_21408D8B4);
  TBoolParam::TBoolParam((uint64_t)this + 1136, (uint64_t)"M", (uint64_t)"I", 0, 1, (uint64_t)"9", (uint64_t)&dword_21408D8B4);
  TBoolParam::TBoolParam((uint64_t)this + 1384, (uint64_t)"T", (uint64_t)"I", 0, 1, (uint64_t)"9", (uint64_t)&dword_21408D8B4);
  TBoolParam::TBoolParam((uint64_t)this + 1632, (uint64_t)"T", (uint64_t)"A", 0, 1, (uint64_t)"1", (uint64_t)&dword_21408D8B4);
  TBoolParam::TBoolParam((uint64_t)this + 1880, (uint64_t)"S", (uint64_t)"I", 0, 0, (uint64_t)"9", (uint64_t)&dword_21408D8B4);
  TBoolParam::TBoolParam((uint64_t)this + 2128, (uint64_t)"M", (uint64_t)"I", 0, 1, (uint64_t)"1", (uint64_t)"1");
  TStringParam::TStringParam((char *)this + 2376, "C", "A", 0, "'", "1", &dword_21408D8B4);
  TStringParam::TStringParam((char *)this + 3752, "C", "A", 0, &dword_21408D8B4, "1", &dword_21408D8B4);
  TBoolParam::TBoolParam((uint64_t)this + 5128, (uint64_t)"D", (uint64_t)"I", 0, 1, (uint64_t)"9", (uint64_t)&dword_21408D8B4);
  TBoolParam::TBoolParam((uint64_t)this + 5376, (uint64_t)"D", (uint64_t)"I", 0, 0, (uint64_t)"9", (uint64_t)&dword_21408D8B4);
  TBoolParam::TBoolParam((uint64_t)this + 5624, (uint64_t)"D", (uint64_t)"I", 0, 0, (uint64_t)"9", (uint64_t)&dword_21408D8B4);
  TBoolParam::TBoolParam((uint64_t)this + 5872, (uint64_t)"D", (uint64_t)"I", 0, 0, (uint64_t)"9", (uint64_t)&dword_21408D8B4);
  TBoolParam::TBoolParam((uint64_t)this + 6120, (uint64_t)"D", (uint64_t)"I", 0, 0, (uint64_t)"9", (uint64_t)&dword_21408D8B4);
  TStringParam::TStringParam((char *)this + 6368, "D", "B", 0, &dword_21408D8B4, "1", "1");
  TBoolParam::TBoolParam((uint64_t)this + 7744, (uint64_t)"C", (uint64_t)"R", 0, 0, (uint64_t)"9", (uint64_t)&dword_21408D8B4);
  TStringParam::TStringParam((char *)this + 7992, "C", "S", 256, &dword_21408D8B4, "9", &dword_21408D8B4);
  TStringParam::TStringParam((char *)this + 9368, "C", "W", 0, "x", "1", "1");
  TStringParam::TStringParam((char *)this + 10744, "V", "T", 0, &dword_21408D8B4, "9", &dword_21408D8B4);
  TBoolParam::TBoolParam((uint64_t)this + 12120, (uint64_t)"U", (uint64_t)"I", 0, 1, (uint64_t)"9", (uint64_t)&dword_21408D8B4);
  TBoolParam::TBoolParam((uint64_t)this + 12368, (uint64_t)"R", (uint64_t)"I", 0, 0, (uint64_t)"9", (uint64_t)&dword_21408D8B4);
  TBoolParam::TBoolParam((uint64_t)this + 12616, (uint64_t)"C", (uint64_t)"N", 0, 1, (uint64_t)"1", (uint64_t)&dword_21408D8B4);
  TBoolParam::TBoolParam((uint64_t)this + 12864, (uint64_t)"C", (uint64_t)"T", 0, 0, (uint64_t)"1", (uint64_t)&dword_21408D8B4);
  TBoolParam::TBoolParam((uint64_t)this + 13112, (uint64_t)"D", (uint64_t)"I", 0, 0, (uint64_t)"9", (uint64_t)&dword_21408D8B4);
  TBoolParam::TBoolParam((uint64_t)this + 13360, (uint64_t)"H", (uint64_t)"S", 0, 0, (uint64_t)"1", (uint64_t)&dword_21408D8B4);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 13608), (uint64_t)"N", (uint64_t)"I", 0, 0, 1000, 30, (uint64_t)"9", (uint64_t)&dword_21408D8B4);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 13960), (uint64_t)"M", (uint64_t)"I", 0, 0, 1000, 5, (uint64_t)"9", (uint64_t)&dword_21408D8B4);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 14312), (uint64_t)"N", (uint64_t)"W", 0, 0, 4, 0, (uint64_t)"1", (uint64_t)&dword_21408D8B4);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 14664), (uint64_t)"P", (uint64_t)"T", 0, 0, 300, 0, (uint64_t)"1", (uint64_t)&dword_21408D8B4);
  TBoolParam::TBoolParam((uint64_t)this + 15016, (uint64_t)"P", (uint64_t)"I", 0, 0, (uint64_t)"9", (uint64_t)"1");
  TBoolParam::TBoolParam((uint64_t)this + 15264, (uint64_t)"A", (uint64_t)"I", 0, 1, (uint64_t)"1", (uint64_t)&dword_21408D8B4);
  TBoolParam::TBoolParam((uint64_t)this + 15512, (uint64_t)"M", (uint64_t)"I", 0, 1, (uint64_t)"1", (uint64_t)"1");
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 15760), (uint64_t)"P", (uint64_t)"T", 0, -1, 100, 10, (uint64_t)"1", (uint64_t)&dword_21408D8B4);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 16112), (uint64_t)"C", (uint64_t)"P", 0, 1, 256, 4, (uint64_t)"1", (uint64_t)&dword_21408D8B4);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 16464), (uint64_t)"A", (uint64_t)"P", 0, 1, 256, 4, (uint64_t)"1", (uint64_t)&dword_21408D8B4);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 16816), (uint64_t)"P", (uint64_t)"S", 0, -1, 100, 20, (uint64_t)"1", (uint64_t)&dword_21408D8B4);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 17168), (uint64_t)"P", (uint64_t)"S", 0, -1, 100, 30, (uint64_t)"1", (uint64_t)&dword_21408D8B4);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 17520), (uint64_t)"P", (uint64_t)"S", 0, -1, 100, 40, (uint64_t)"1", (uint64_t)&dword_21408D8B4);
  TBoolParam::TBoolParam((uint64_t)this + 17872, (uint64_t)"O", (uint64_t)"O", 0, 0, (uint64_t)"1", (uint64_t)&dword_21408D8B4);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 18120), (uint64_t)"P", (uint64_t)"S", 0, -1, 100, -1, (uint64_t)"1", (uint64_t)&dword_21408D8B4);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 18472), (uint64_t)"P", (uint64_t)"S", 0, -1, 100, 50, (uint64_t)"1", (uint64_t)&dword_21408D8B4);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 18824), (uint64_t)"P", (uint64_t)"S", 0, -1, 100, 60, (uint64_t)"1", (uint64_t)&dword_21408D8B4);
  TBoolParam::TBoolParam((uint64_t)this + 19176, (uint64_t)"U", (uint64_t)"I", 0, 1, (uint64_t)"1", (uint64_t)"1");
  TBoolParam::TBoolParam((uint64_t)this + 19424, (uint64_t)"U", (uint64_t)"I", 0, 1, (uint64_t)"1", (uint64_t)"1");
  TBoolParam::TBoolParam((uint64_t)this + 19672, (uint64_t)"U", (uint64_t)"I", 0, 1, (uint64_t)"1", (uint64_t)"1");
  TBoolParam::TBoolParam((uint64_t)this + 19920, (uint64_t)"U", (uint64_t)"I", 0, 1, (uint64_t)"1", (uint64_t)"1");
  TBoolParam::TBoolParam((uint64_t)this + 20168, (uint64_t)"U", (uint64_t)"I", 0, 0, (uint64_t)"1", (uint64_t)"1");
  TBoolParam::TBoolParam((uint64_t)this + 20416, (uint64_t)"U", (uint64_t)"I", 0, 1, (uint64_t)"1", (uint64_t)"1");
  TBoolParam::TBoolParam((uint64_t)this + 20664, (uint64_t)"L", (uint64_t)"I", 0, 0, (uint64_t)"1", (uint64_t)&dword_21408D8B4);
  TBoolParam::TBoolParam((uint64_t)this + 20912, (uint64_t)"L", (uint64_t)"I", 0, 0, (uint64_t)"1", (uint64_t)&dword_21408D8B4);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 21160), (uint64_t)"M", (uint64_t)"M", 0, 1, 100, 10, (uint64_t)"1", (uint64_t)&dword_21408D8B4);
  TBoolParam::TBoolParam((uint64_t)this + 21512, (uint64_t)"L", (uint64_t)"L", 0, 0, (uint64_t)"9", (uint64_t)&dword_21408D8B4);
  TBoolParam::TBoolParam((uint64_t)this + 21760, (uint64_t)"L", (uint64_t)"L", 0, 0, (uint64_t)"9", (uint64_t)&dword_21408D8B4);
  TBoolParam::TBoolParam((uint64_t)this + 22008, (uint64_t)"D", (uint64_t)"D", 32, 1, (uint64_t)"9", (uint64_t)&dword_21408D8B4);
  TBoolParam::TBoolParam((uint64_t)this + 22256, (uint64_t)"D", (uint64_t)"D", 288, 1, (uint64_t)"1", (uint64_t)&dword_21408D8B4);
  TStringParam::TStringParam((char *)this + 22504, "D", "D", 32, &dword_21408D8B4, "9", &dword_21408D8B4);
  TStringParam::TStringParam((char *)this + 23880, "D", "D", 288, &dword_21408D8B4, "1", &dword_21408D8B4);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 25256), (uint64_t)"D", (uint64_t)"D", 32, -1, 10, 5, (uint64_t)"9", (uint64_t)&dword_21408D8B4);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 25608), (uint64_t)"D", (uint64_t)"D", 288, -1, 10, 5, (uint64_t)"1", (uint64_t)&dword_21408D8B4);
  TStringParam::TStringParam((char *)this + 25960, "D");
  TStringParam::TStringParam((char *)this + 27336, "D");
  TFloatParam::TFloatParam((uint64_t)this + 28712, (uint64_t)"D", (uint64_t)"D", 32, (uint64_t)"9", (uint64_t)&dword_21408D8B4, 0.0);
  TFloatParam::TFloatParam((uint64_t)this + 29248, (uint64_t)"D", (uint64_t)"D", 288, (uint64_t)"1", (uint64_t)&dword_21408D8B4, 0.0);
  TParamManager::add(this, v9);
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 392));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 640));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 888));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 1136));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 1384));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 1632));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 1880));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 2128));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 2376));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 3752));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 5128));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 5376));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 5624));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 5872));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 6120));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 6368));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 7744));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 7992));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 9368));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 10744));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 12120));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 12368));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 12616));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 12864));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 13112));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 13360));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 13608));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 13960));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 14312));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 14664));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 15016));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 15264));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 15512));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 15760));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 16112));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 16464));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 16816));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 17168));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 17520));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 17872));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 18120));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 18472));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 18824));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 19176));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 19424));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 19672));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 19920));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 20168));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 20416));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 20664));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 20912));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 21160));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 21512));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 21760));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 22008));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 22256));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 22504));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 23880));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 25256));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 25608));
  MEMORY[0x216698480]((char *)this + 26000, "D");
  MEMORY[0x216698480]((char *)this + 26024, "9");
  MEMORY[0x216698480]((char *)this + 26048, &dword_21408D8B4);
  *((void *)this + 3259) |= 0x20uLL;
  std::vector<std::wstring>::vector(&v11, 4uLL);
  std::vector<std::wstring>::vector(&v10, 4uLL);
  uint64_t v4 = 0;
  uint64_t v5 = (const __int32 *)"a";
  do
  {
    MEMORY[0x216698480](&v11.__begin_[v4], v5);
    v5 += wcslen(v5) + 1;
    ++v4;
  }
  while (v4 != 4);
  TStringParam::setAllowables((uint64_t)this + 25960, (uint64_t)&v11, 0, 0);
  TStringParam::setOriginal((void *)this + 3245, 0, &dword_21408D8B4);
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 25960));
  v12[0] = (void **)&v10;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](v12);
  v10.__begin_ = (std::vector<std::wstring>::pointer)&v11;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
  MEMORY[0x216698480]((char *)this + 27376, "D");
  MEMORY[0x216698480]((char *)this + 27400, "1");
  MEMORY[0x216698480]((char *)this + 27424, &dword_21408D8B4);
  *((void *)this + 3431) |= 0x120uLL;
  std::vector<std::wstring>::vector(&v11, 4uLL);
  std::vector<std::wstring>::vector(&v10, 4uLL);
  uint64_t v6 = 0;
  int v7 = (const __int32 *)"a";
  do
  {
    MEMORY[0x216698480](&v11.__begin_[v6], v7);
    v7 += wcslen(v7) + 1;
    ++v6;
  }
  while (v6 != 4);
  TStringParam::setAllowables((uint64_t)this + 27336, (uint64_t)&v11, 0, 0);
  TStringParam::setOriginal((void *)this + 3417, 0, &dword_21408D8B4);
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 27336));
  v12[0] = (void **)&v10;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](v12);
  v10.__begin_ = (std::vector<std::wstring>::pointer)&v11;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 28712));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 29248));
  *(void *)&long long v8 = -1;
  *((void *)&v8 + 1) = -1;
  *(_OWORD *)((char *)this + 29784) = v8;
  *(_OWORD *)((char *)this + 29800) = v8;
}

void sub_213E18970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18, void **a19, void **a20,void **a21,void **a22,void **a23,void **a24,void **a25,void **a26,void **a27,void **a28,void **a29,void **a30,void **a31,void **a32,void **a33,void **a34,void **a35,void **a36,void **a37,void **a38,void **a39,void **a40,void **a41,void **a42,void **a43,void **a44,void **a45,void **a46,void **a47,void **a48,void **a49,void **a50,void **a51,void **a52,void **a53,void **a54)
{
  *(void *)(v62 - 144) = v62 - 120;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100]((void ***)(v62 - 144));
  TParam::~TParam(v60);
  TParam::~TParam(v55);
  TStringParam::~TStringParam(v59);
  TStringParam::~TStringParam(v58);
  TParam::~TParam(v57);
  TParam::~TParam(v56);
  TStringParam::~TStringParam(v61);
  TStringParam::~TStringParam(a11);
  TBoolParam::~TBoolParam(a12);
  TBoolParam::~TBoolParam(a13);
  TBoolParam::~TBoolParam(a14);
  TBoolParam::~TBoolParam(a15);
  TParam::~TParam(a16);
  TBoolParam::~TBoolParam(a17);
  TBoolParam::~TBoolParam(a18);
  TBoolParam::~TBoolParam(a19);
  TBoolParam::~TBoolParam(a20);
  TBoolParam::~TBoolParam(a21);
  TBoolParam::~TBoolParam(a22);
  TBoolParam::~TBoolParam(a23);
  TBoolParam::~TBoolParam(a24);
  TParam::~TParam(a25);
  TParam::~TParam(a26);
  TParam::~TParam(a27);
  TBoolParam::~TBoolParam(a28);
  TParam::~TParam(a29);
  TParam::~TParam(a30);
  TParam::~TParam(a31);
  TParam::~TParam(a32);
  TParam::~TParam(a33);
  TParam::~TParam(a34);
  TBoolParam::~TBoolParam(a35);
  TBoolParam::~TBoolParam(a36);
  TBoolParam::~TBoolParam(a37);
  TParam::~TParam(a38);
  TParam::~TParam(a39);
  TParam::~TParam(a40);
  TParam::~TParam(a41);
  TBoolParam::~TBoolParam(a42);
  TBoolParam::~TBoolParam(a43);
  TBoolParam::~TBoolParam(a44);
  TBoolParam::~TBoolParam(a45);
  TBoolParam::~TBoolParam(a46);
  TBoolParam::~TBoolParam(a47);
  TStringParam::~TStringParam(a48);
  TStringParam::~TStringParam(a49);
  TStringParam::~TStringParam(a50);
  TBoolParam::~TBoolParam(a51);
  TStringParam::~TStringParam(a52);
  TBoolParam::~TBoolParam(a53);
  TBoolParam::~TBoolParam(a54);
  TBoolParam::~TBoolParam(*(void ***)(v62 - 256));
  TBoolParam::~TBoolParam(*(void ***)(v62 - 248));
  TBoolParam::~TBoolParam(*(void ***)(v62 - 240));
  TStringParam::~TStringParam(*(void ***)(v62 - 232));
  TStringParam::~TStringParam(*(void ***)(v62 - 224));
  TBoolParam::~TBoolParam(*(void ***)(v62 - 216));
  TBoolParam::~TBoolParam(*(void ***)(v62 - 208));
  TBoolParam::~TBoolParam(*(void ***)(v62 - 200));
  TBoolParam::~TBoolParam(*(void ***)(v62 - 192));
  TBoolParam::~TBoolParam(*(void ***)(v62 - 184));
  TBoolParam::~TBoolParam(*(void ***)(v62 - 176));
  TBoolParam::~TBoolParam(*(void ***)(v62 - 168));
  TBoolParam::~TBoolParam(*(void ***)(v62 - 160));
  TBoolParam::~TBoolParam(*(void ***)(v62 - 152));
  TParamManager::~TParamManager(v54);
  _Unwind_Resume(a1);
}

void TTokenizerParamManager::notifyChange(TTokenizerParamManager *this, const TParam *a2)
{
  if ((TTokenizerParamManager *)((char *)this + 3752) == a2)
  {
    uint64_t v3 = TStringParam::get(a2);
    if (wcslen((const __int32 *)v3))
    {
      uint64_t v4 = (unsigned int *)TStringParam::get(a2);
      loggableUnicode(v4, __p);
      if (v11 >= 0) {
        unint64_t v9 = __p;
      }
      else {
        unint64_t v9 = (void **)__p[0];
      }
      tknPrintf("Warning: CharacterMapping contains an odd number of characters: <%s>\n", v5, v6, v7, v8, v9);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_213E18E68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *TTokenizerParamManager::upgradeParam(void *this, const TParam *a2)
{
  uint64_t v3 = this;
  if (this + 2397 == (void *)a2)
  {
    uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle(a2);
    uint64_t ValidConfig = TParam::getValidConfig(a2, ActiveConfigHandle);
    uint64_t v6 = (TParam *)(v3 + 2102);
    if (!*((unsigned char *)v3 + ValidConfig + 19328)) {
      goto LABEL_23;
    }
    uint64_t v7 = v3[17];
    v3[2116] &= ~(1 << (v7 + 33));
LABEL_20:
    return (void *)TParam::notifyChange((uint64_t)v6, v7);
  }
  if (this + 2428 == (void *)a2)
  {
    uint64_t v8 = TParam::getActiveConfigHandle(a2);
    uint64_t v9 = TParam::getValidConfig(a2, v8);
    uint64_t v6 = (TParam *)(v3 + 2146);
    if (!*((unsigned char *)v3 + v9 + 19576)) {
      goto LABEL_23;
    }
    uint64_t v7 = v3[17];
    v3[2160] &= ~(1 << (v7 + 33));
    goto LABEL_20;
  }
  if (this + 2459 == (void *)a2)
  {
    uint64_t v10 = TParam::getActiveConfigHandle(a2);
    uint64_t v11 = TParam::getValidConfig(a2, v10);
    uint64_t v6 = (TParam *)(v3 + 2190);
    if (!*((unsigned char *)v3 + v11 + 19824)) {
      goto LABEL_23;
    }
    uint64_t v7 = v3[17];
    v3[2204] &= ~(1 << (v7 + 33));
    goto LABEL_20;
  }
  if (this + 2521 != (void *)a2)
  {
    if (this + 2552 != (void *)a2)
    {
      if (this + 2490 != (void *)a2) {
        return this;
      }
      uint64_t v20 = TParam::getActiveConfigHandle(a2);
      uint64_t v21 = TParam::getValidConfig(a2, v20);
      uint64_t v6 = (TParam *)(v3 + 2353);
      if (*((unsigned char *)v3 + v21 + 20072))
      {
        uint64_t v7 = v3[17];
        v3[2367] &= ~(1 << (v7 + 33));
        goto LABEL_20;
      }
      goto LABEL_23;
    }
    uint64_t v18 = TParam::getActiveConfigHandle(a2);
    uint64_t v19 = TParam::getValidConfig(a2, v18);
    uint64_t v6 = (TParam *)(v3 + 2309);
    if (*((unsigned char *)v3 + v19 + 20568))
    {
      uint64_t v7 = v3[17];
      v3[2323] &= ~(1 << (v7 + 33));
      goto LABEL_20;
    }
LABEL_23:
    uint64_t v15 = TParam::getActiveConfigHandle(v6);
    uint64_t v16 = v6;
    goto LABEL_24;
  }
  uint64_t v12 = TParam::getActiveConfigHandle(a2);
  int v13 = *((unsigned __int8 *)v3 + TParam::getValidConfig(a2, v12) + 20320);
  int v14 = (TParam *)(v3 + 2265);
  uint64_t v15 = TParam::getActiveConfigHandle(v14);
  uint64_t v16 = v14;
  if (!v13)
  {
LABEL_24:
    int v17 = -1;
    goto LABEL_25;
  }
  int v17 = 45;
LABEL_25:

  return (void *)TIntParam::set(v16, v15, v17);
}

uint64_t TTokenizerParamManager::initializeParamConfigs(TTokenizerParamManager *this)
{
  uint64_t Config = TParamManager::getConfig((uint64_t)this, (__int32 *)"A");
  *((void *)this + 3724) = Config;
  if (Config == -1) {
    *((void *)this + 3724) = TParamManager::newConfig((uint64_t)this, (__int32 *)"A", 1);
  }
  uint64_t v3 = TParamManager::getConfig((uint64_t)this, (__int32 *)"B");
  *((void *)this + 3725) = v3;
  if (v3 == -1)
  {
    unint64_t v4 = TParamManager::newConfig((uint64_t)this, (__int32 *)"B", 1);
    *((void *)this + 3725) = v4;
    *((unsigned char *)this + v4 + 18024) = 1;
    *((void *)this + 2248) |= 1 << (v4 + 9);
    TParam::notifyChange((uint64_t)this + 17872, v4);
  }
  uint64_t v5 = TParamManager::getConfig((uint64_t)this, (__int32 *)"A");
  *((void *)this + 3726) = v5;
  if (v5 == -1)
  {
    unint64_t v6 = TParamManager::newConfig((uint64_t)this, (__int32 *)"A", 1);
    *((void *)this + 3726) = v6;
    TIntParam::setOriginal((TTokenizerParamManager *)((char *)this + 14312), v6, 0);
    TIntParam::setOriginal((TTokenizerParamManager *)((char *)this + 17520), *((void *)this + 3726), -1);
    TIntParam::setOriginal((TTokenizerParamManager *)((char *)this + 18120), *((void *)this + 3726), -1);
    TIntParam::setOriginal((TTokenizerParamManager *)((char *)this + 18472), *((void *)this + 3726), -1);
    TIntParam::setOriginal((TTokenizerParamManager *)((char *)this + 18824), *((void *)this + 3726), -1);
  }
  uint64_t result = TParamManager::getConfig((uint64_t)this, (__int32 *)"F");
  *((void *)this + 3723) = result;
  if (result == -1)
  {
    unint64_t v8 = TParamManager::newConfig((uint64_t)this, (__int32 *)"F", *((void *)this + 3724));
    *((void *)this + 3723) = v8;
    *((unsigned char *)this + v8 + 792) = 1;
    *((void *)this + 94) |= 1 << (v8 + 9);
    return TParam::notifyChange((uint64_t)this + 640, v8);
  }
  return result;
}

void TTokenizerParamManager::~TTokenizerParamManager(void **this)
{
  TTokenizerParamManager::~TTokenizerParamManager(this);

  JUMPOUT(0x216698730);
}

{
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t n;
  uint64_t ii;
  uint64_t jj;
  uint64_t v31;
  uint64_t kk;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t mm;
  uint64_t nn;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void **v49;

  *this = &unk_26C4E32C8;
  TParam::~TParam(this + 3656);
  TParam::~TParam(this + 3589);
  this[3417] = &unk_26C4DFCE0;
  unsigned __int8 v49 = this + 3586;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  unsigned __int8 v49 = this + 3583;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  unsigned __int8 v49 = this + 3580;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  for (unint64_t i = 0; i != -144; i -= 3)
  {
    if (SHIBYTE(this[i + 3579]) < 0) {
      operator delete(this[i + 3577]);
    }
  }
  TParam::~TParam(this + 3417);
  this[3245] = &unk_26C4DFCE0;
  unsigned __int8 v49 = this + 3414;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  unsigned __int8 v49 = this + 3411;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  unsigned __int8 v49 = this + 3408;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  for (unint64_t j = 0; j != -144; j -= 3)
  {
    if (SHIBYTE(this[j + 3407]) < 0) {
      operator delete(this[j + 3405]);
    }
  }
  TParam::~TParam(this + 3245);
  TParam::~TParam(this + 3201);
  TParam::~TParam(this + 3157);
  this[2985] = &unk_26C4DFCE0;
  unsigned __int8 v49 = this + 3154;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  unsigned __int8 v49 = this + 3151;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  unsigned __int8 v49 = this + 3148;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  for (unint64_t k = 0; k != -144; k -= 3)
  {
    if (SHIBYTE(this[k + 3147]) < 0) {
      operator delete(this[k + 3145]);
    }
  }
  TParam::~TParam(this + 2985);
  this[2813] = &unk_26C4DFCE0;
  unsigned __int8 v49 = this + 2982;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  unsigned __int8 v49 = this + 2979;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  unsigned __int8 v49 = this + 2976;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  for (m = 0; m != -144; m -= 3)
  {
    if (SHIBYTE(this[m + 2975]) < 0) {
      operator delete(this[m + 2973]);
    }
  }
  TParam::~TParam(this + 2813);
  unint64_t v6 = 0;
  this[2782] = &unk_26C4DF150;
  do
  {
    if (SHIBYTE(this[v6 + 2812]) < 0) {
      operator delete(this[v6 + 2810]);
    }
    v6 -= 3;
  }
  while (v6 != -6);
  TParam::~TParam(this + 2782);
  uint64_t v7 = 0;
  this[2751] = &unk_26C4DF150;
  do
  {
    if (SHIBYTE(this[v7 + 2781]) < 0) {
      operator delete(this[v7 + 2779]);
    }
    v7 -= 3;
  }
  while (v7 != -6);
  TParam::~TParam(this + 2751);
  unint64_t v8 = 0;
  this[2720] = &unk_26C4DF150;
  do
  {
    if (SHIBYTE(this[v8 + 2750]) < 0) {
      operator delete(this[v8 + 2748]);
    }
    v8 -= 3;
  }
  while (v8 != -6);
  TParam::~TParam(this + 2720);
  uint64_t v9 = 0;
  this[2689] = &unk_26C4DF150;
  do
  {
    if (SHIBYTE(this[v9 + 2719]) < 0) {
      operator delete(this[v9 + 2717]);
    }
    v9 -= 3;
  }
  while (v9 != -6);
  TParam::~TParam(this + 2689);
  TParam::~TParam(this + 2645);
  uint64_t v10 = 0;
  this[2614] = &unk_26C4DF150;
  do
  {
    if (SHIBYTE(this[v10 + 2644]) < 0) {
      operator delete(this[v10 + 2642]);
    }
    v10 -= 3;
  }
  while (v10 != -6);
  TParam::~TParam(this + 2614);
  uint64_t v11 = 0;
  this[2583] = &unk_26C4DF150;
  do
  {
    if (SHIBYTE(this[v11 + 2613]) < 0) {
      operator delete(this[v11 + 2611]);
    }
    v11 -= 3;
  }
  while (v11 != -6);
  TParam::~TParam(this + 2583);
  uint64_t v12 = 0;
  this[2552] = &unk_26C4DF150;
  do
  {
    if (SHIBYTE(this[v12 + 2582]) < 0) {
      operator delete(this[v12 + 2580]);
    }
    v12 -= 3;
  }
  while (v12 != -6);
  TParam::~TParam(this + 2552);
  int v13 = 0;
  this[2521] = &unk_26C4DF150;
  do
  {
    if (SHIBYTE(this[v13 + 2551]) < 0) {
      operator delete(this[v13 + 2549]);
    }
    v13 -= 3;
  }
  while (v13 != -6);
  TParam::~TParam(this + 2521);
  int v14 = 0;
  this[2490] = &unk_26C4DF150;
  do
  {
    if (SHIBYTE(this[v14 + 2520]) < 0) {
      operator delete(this[v14 + 2518]);
    }
    v14 -= 3;
  }
  while (v14 != -6);
  TParam::~TParam(this + 2490);
  uint64_t v15 = 0;
  this[2459] = &unk_26C4DF150;
  do
  {
    if (SHIBYTE(this[v15 + 2489]) < 0) {
      operator delete(this[v15 + 2487]);
    }
    v15 -= 3;
  }
  while (v15 != -6);
  TParam::~TParam(this + 2459);
  uint64_t v16 = 0;
  this[2428] = &unk_26C4DF150;
  do
  {
    if (SHIBYTE(this[v16 + 2458]) < 0) {
      operator delete(this[v16 + 2456]);
    }
    v16 -= 3;
  }
  while (v16 != -6);
  TParam::~TParam(this + 2428);
  int v17 = 0;
  this[2397] = &unk_26C4DF150;
  do
  {
    if (SHIBYTE(this[v17 + 2427]) < 0) {
      operator delete(this[v17 + 2425]);
    }
    v17 -= 3;
  }
  while (v17 != -6);
  TParam::~TParam(this + 2397);
  TParam::~TParam(this + 2353);
  TParam::~TParam(this + 2309);
  TParam::~TParam(this + 2265);
  uint64_t v18 = 0;
  this[2234] = &unk_26C4DF150;
  do
  {
    if (SHIBYTE(this[v18 + 2264]) < 0) {
      operator delete(this[v18 + 2262]);
    }
    v18 -= 3;
  }
  while (v18 != -6);
  TParam::~TParam(this + 2234);
  TParam::~TParam(this + 2190);
  TParam::~TParam(this + 2146);
  TParam::~TParam(this + 2102);
  TParam::~TParam(this + 2058);
  TParam::~TParam(this + 2014);
  TParam::~TParam(this + 1970);
  uint64_t v19 = 0;
  this[1939] = &unk_26C4DF150;
  do
  {
    if (SHIBYTE(this[v19 + 1969]) < 0) {
      operator delete(this[v19 + 1967]);
    }
    v19 -= 3;
  }
  while (v19 != -6);
  TParam::~TParam(this + 1939);
  uint64_t v20 = 0;
  this[1908] = &unk_26C4DF150;
  do
  {
    if (SHIBYTE(this[v20 + 1938]) < 0) {
      operator delete(this[v20 + 1936]);
    }
    v20 -= 3;
  }
  while (v20 != -6);
  TParam::~TParam(this + 1908);
  uint64_t v21 = 0;
  this[1877] = &unk_26C4DF150;
  do
  {
    if (SHIBYTE(this[v21 + 1907]) < 0) {
      operator delete(this[v21 + 1905]);
    }
    v21 -= 3;
  }
  while (v21 != -6);
  TParam::~TParam(this + 1877);
  TParam::~TParam(this + 1833);
  TParam::~TParam(this + 1789);
  TParam::~TParam(this + 1745);
  TParam::~TParam(this + 1701);
  unint64_t v22 = 0;
  this[1670] = &unk_26C4DF150;
  do
  {
    if (SHIBYTE(this[v22 + 1700]) < 0) {
      operator delete(this[v22 + 1698]);
    }
    v22 -= 3;
  }
  while (v22 != -6);
  TParam::~TParam(this + 1670);
  unsigned int v23 = 0;
  this[1639] = &unk_26C4DF150;
  do
  {
    if (SHIBYTE(this[v23 + 1669]) < 0) {
      operator delete(this[v23 + 1667]);
    }
    v23 -= 3;
  }
  while (v23 != -6);
  TParam::~TParam(this + 1639);
  uint64_t v24 = 0;
  this[1608] = &unk_26C4DF150;
  do
  {
    if (SHIBYTE(this[v24 + 1638]) < 0) {
      operator delete(this[v24 + 1636]);
    }
    v24 -= 3;
  }
  while (v24 != -6);
  TParam::~TParam(this + 1608);
  uint64_t v25 = 0;
  this[1577] = &unk_26C4DF150;
  do
  {
    if (SHIBYTE(this[v25 + 1607]) < 0) {
      operator delete(this[v25 + 1605]);
    }
    v25 -= 3;
  }
  while (v25 != -6);
  TParam::~TParam(this + 1577);
  uint64_t v26 = 0;
  this[1546] = &unk_26C4DF150;
  do
  {
    if (SHIBYTE(this[v26 + 1576]) < 0) {
      operator delete(this[v26 + 1574]);
    }
    v26 -= 3;
  }
  while (v26 != -6);
  TParam::~TParam(this + 1546);
  uint64_t v27 = 0;
  this[1515] = &unk_26C4DF150;
  do
  {
    if (SHIBYTE(this[v27 + 1545]) < 0) {
      operator delete(this[v27 + 1543]);
    }
    v27 -= 3;
  }
  while (v27 != -6);
  TParam::~TParam(this + 1515);
  this[1343] = &unk_26C4DFCE0;
  unsigned __int8 v49 = this + 1512;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  unsigned __int8 v49 = this + 1509;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  unsigned __int8 v49 = this + 1506;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  for (n = 0; n != -144; n -= 3)
  {
    if (SHIBYTE(this[n + 1505]) < 0) {
      operator delete(this[n + 1503]);
    }
  }
  TParam::~TParam(this + 1343);
  this[1171] = &unk_26C4DFCE0;
  unsigned __int8 v49 = this + 1340;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  unsigned __int8 v49 = this + 1337;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  unsigned __int8 v49 = this + 1334;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  for (iunint64_t i = 0; ii != -144; ii -= 3)
  {
    if (SHIBYTE(this[ii + 1333]) < 0) {
      operator delete(this[ii + 1331]);
    }
  }
  TParam::~TParam(this + 1171);
  this[999] = &unk_26C4DFCE0;
  unsigned __int8 v49 = this + 1168;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  unsigned __int8 v49 = this + 1165;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  unsigned __int8 v49 = this + 1162;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  for (junint64_t j = 0; jj != -144; jj -= 3)
  {
    if (SHIBYTE(this[jj + 1161]) < 0) {
      operator delete(this[jj + 1159]);
    }
  }
  TParam::~TParam(this + 999);
  unsigned int v31 = 0;
  this[968] = &unk_26C4DF150;
  do
  {
    if (SHIBYTE(this[v31 + 998]) < 0) {
      operator delete(this[v31 + 996]);
    }
    v31 -= 3;
  }
  while (v31 != -6);
  TParam::~TParam(this + 968);
  this[796] = &unk_26C4DFCE0;
  unsigned __int8 v49 = this + 965;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  unsigned __int8 v49 = this + 962;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  unsigned __int8 v49 = this + 959;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  for (kunint64_t k = 0; kk != -144; kk -= 3)
  {
    if (SHIBYTE(this[kk + 958]) < 0) {
      operator delete(this[kk + 956]);
    }
  }
  TParam::~TParam(this + 796);
  uint64_t v33 = 0;
  this[765] = &unk_26C4DF150;
  do
  {
    if (SHIBYTE(this[v33 + 795]) < 0) {
      operator delete(this[v33 + 793]);
    }
    v33 -= 3;
  }
  while (v33 != -6);
  TParam::~TParam(this + 765);
  int v34 = 0;
  this[734] = &unk_26C4DF150;
  do
  {
    if (SHIBYTE(this[v34 + 764]) < 0) {
      operator delete(this[v34 + 762]);
    }
    v34 -= 3;
  }
  while (v34 != -6);
  TParam::~TParam(this + 734);
  unsigned int v35 = 0;
  this[703] = &unk_26C4DF150;
  do
  {
    if (SHIBYTE(this[v35 + 733]) < 0) {
      operator delete(this[v35 + 731]);
    }
    v35 -= 3;
  }
  while (v35 != -6);
  TParam::~TParam(this + 703);
  unsigned int v36 = 0;
  this[672] = &unk_26C4DF150;
  do
  {
    if (SHIBYTE(this[v36 + 702]) < 0) {
      operator delete(this[v36 + 700]);
    }
    v36 -= 3;
  }
  while (v36 != -6);
  TParam::~TParam(this + 672);
  unsigned int v37 = 0;
  this[641] = &unk_26C4DF150;
  do
  {
    if (SHIBYTE(this[v37 + 671]) < 0) {
      operator delete(this[v37 + 669]);
    }
    v37 -= 3;
  }
  while (v37 != -6);
  TParam::~TParam(this + 641);
  this[469] = &unk_26C4DFCE0;
  unsigned __int8 v49 = this + 638;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  unsigned __int8 v49 = this + 635;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  unsigned __int8 v49 = this + 632;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  for (mm = 0; mm != -144; mm -= 3)
  {
    if (SHIBYTE(this[mm + 631]) < 0) {
      operator delete(this[mm + 629]);
    }
  }
  TParam::~TParam(this + 469);
  this[297] = &unk_26C4DFCE0;
  unsigned __int8 v49 = this + 466;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  unsigned __int8 v49 = this + 463;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  unsigned __int8 v49 = this + 460;
  std::vector<std::wstring>::__destroy_vector::operator()[abi:ne180100](&v49);
  for (nn = 0; nn != -144; nn -= 3)
  {
    if (SHIBYTE(this[nn + 459]) < 0) {
      operator delete(this[nn + 457]);
    }
  }
  TParam::~TParam(this + 297);
  BOOL v40 = 0;
  this[266] = &unk_26C4DF150;
  do
  {
    if (SHIBYTE(this[v40 + 296]) < 0) {
      operator delete(this[v40 + 294]);
    }
    v40 -= 3;
  }
  while (v40 != -6);
  TParam::~TParam(this + 266);
  unsigned int v41 = 0;
  this[235] = &unk_26C4DF150;
  do
  {
    if (SHIBYTE(this[v41 + 265]) < 0) {
      operator delete(this[v41 + 263]);
    }
    v41 -= 3;
  }
  while (v41 != -6);
  TParam::~TParam(this + 235);
  unsigned int v42 = 0;
  this[204] = &unk_26C4DF150;
  do
  {
    if (SHIBYTE(this[v42 + 234]) < 0) {
      operator delete(this[v42 + 232]);
    }
    v42 -= 3;
  }
  while (v42 != -6);
  TParam::~TParam(this + 204);
  uint64_t v43 = 0;
  this[173] = &unk_26C4DF150;
  do
  {
    if (SHIBYTE(this[v43 + 203]) < 0) {
      operator delete(this[v43 + 201]);
    }
    v43 -= 3;
  }
  while (v43 != -6);
  TParam::~TParam(this + 173);
  uint64_t v44 = 0;
  this[142] = &unk_26C4DF150;
  do
  {
    if (SHIBYTE(this[v44 + 172]) < 0) {
      operator delete(this[v44 + 170]);
    }
    v44 -= 3;
  }
  while (v44 != -6);
  TParam::~TParam(this + 142);
  uint64_t v45 = 0;
  this[111] = &unk_26C4DF150;
  do
  {
    if (SHIBYTE(this[v45 + 141]) < 0) {
      operator delete(this[v45 + 139]);
    }
    v45 -= 3;
  }
  while (v45 != -6);
  TParam::~TParam(this + 111);
  unsigned int v46 = 0;
  this[80] = &unk_26C4DF150;
  do
  {
    if (SHIBYTE(this[v46 + 110]) < 0) {
      operator delete(this[v46 + 108]);
    }
    v46 -= 3;
  }
  while (v46 != -6);
  TParam::~TParam(this + 80);
  unsigned int v47 = 0;
  this[49] = &unk_26C4DF150;
  do
  {
    if (SHIBYTE(this[v47 + 79]) < 0) {
      operator delete(this[v47 + 77]);
    }
    v47 -= 3;
  }
  while (v47 != -6);
  TParam::~TParam(this + 49);
  unsigned int v48 = 0;
  this[18] = &unk_26C4DF150;
  do
  {
    if (SHIBYTE(this[v48 + 48]) < 0) {
      operator delete(this[v48 + 46]);
    }
    v48 -= 3;
  }
  while (v48 != -6);
  TParam::~TParam(this + 18);
  TParamManager::~TParamManager((TParamManager *)this);
}

uint64_t TFloatParam::TFloatParam(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v9 = TParam::TParam(a1, 3, a2, a3, a4, a5, a6);
  *(void *)uint64_t v9 = &unk_26C4DF7E0;
  *(double *)(v9 + 152) = a7;
  *(void *)(v9 + 112) |= 0x200uLL;
  TParam::notifyChange(v9, 0);
  return a1;
}

void sub_213E19394(_Unwind_Exception *a1)
{
  TParam::~TParam(v1);
  _Unwind_Resume(a1);
}

void CTModelRelevance::~CTModelRelevance(CTModelRelevance *this)
{
  *(void *)this = 0;
  int v2 = (char *)this + 8;
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 8);
  DgnArray<DgnArray<DgnPrimArray<long long>>>::releaseAll((uint64_t)this + 24);
  DgnArray<DgnArray<DgnPrimArray<long long>>>::releaseAll((uint64_t)this + 24);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v2);
}

void *DgnArray<DgnArray<DgnPrimArray<long long>>>::releaseAll(uint64_t a1)
{
  DgnArray<DgnArray<DgnPrimArray<long long>>>::destructAt((void *)a1, 0, *(_DWORD *)(a1 + 8));
  uint64_t result = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

uint64_t sizeObject<DgnArray<DgnPrimArray<long long>>>(uint64_t a1, int a2)
{
  v9[0] = 0;
  v9[1] = 0;
  v10[0] = 0;
  v10[1] = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    unsigned int v4 = 12;
  }
  else {
    unsigned int v4 = 16;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v10);
  uint64_t v5 = 0;
  if (a2 != 3)
  {
    uint64_t v5 = gShadowDiagnosticShowIdealizedObjectSizes ? 12 : 16;
    if ((a2 & 0xFFFFFFFE) != 2)
    {
      uint64_t v6 = *(unsigned int *)(a1 + 8);
      if ((int)v6 >= 1)
      {
        unint64_t v7 = v6 + 1;
        do
          v5 += sizeObject<DgnPrimArray<double>>(*(void *)a1 + 16 * (v7-- - 2), a2);
        while (v7 > 1);
      }
      if (!a2) {
        v5 += v4 * (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
      }
    }
  }
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v9);
  return v5;
}

void sub_213E1A85C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t CTModelRelevance::computeModelRelevance(CTModelRelevance *this, PelMgr *a2, unsigned int a3, double a4, int a5, int a6, int a7, int a8, char a9)
{
  *(void *)this = 0;
  uint64_t v12 = *((unsigned int *)a2 + 33);
  int v218 = *((_DWORD *)a2 + 4);
  BOOL v13 = (a6 ^ 1 | a7) == 1 && a5 == 0;
  if (!v13 || (a9 & 1) == 0)
  {
    uint64_t v15 = (v12 + 1);
LABEL_11:
    int v14 = 1;
    unsigned int v16 = v15;
    goto LABEL_12;
  }
  int v14 = 0;
  uint64_t v15 = (v12 + 1);
  unsigned int v16 = 2;
  if (v218 == 1 && (a8 & 1) == 0) {
    goto LABEL_11;
  }
LABEL_12:
  int v225 = v14;
  uint64_t v216 = v15;
  int v17 = (void *)((char *)this + 8);
  unsigned int v18 = *((_DWORD *)this + 5);
  if (v12 > v18) {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 8, v12 - v18, 0);
  }
  uint64_t v213 = v17;
  uint64_t v19 = *((unsigned int *)this + 4);
  if (v19 <= v12)
  {
    uint64_t v20 = v17;
    if (v19 < v12)
    {
      uint64_t v23 = v12 - v19;
      uint64_t v24 = 16 * v19;
      do
      {
        uint64_t v25 = (void *)(*v17 + v24);
        *uint64_t v25 = 0;
        v25[1] = 0;
        v24 += 16;
        --v23;
      }
      while (v23);
    }
  }
  else
  {
    uint64_t v20 = v17;
    if ((int)v19 > (int)v12)
    {
      uint64_t v21 = (int)v19;
      uint64_t v22 = 16 * (int)v19 - 16;
      do
      {
        --v21;
        DgnPrimArray<unsigned int>::~DgnPrimArray(*v17 + v22);
        v22 -= 16;
      }
      while (v21 > (int)v12);
    }
  }
  *((_DWORD *)this + 4) = v12;
  if (v12)
  {
    uint64_t v26 = 0;
    while (1)
    {
      uint64_t v27 = *v20 + v26;
      unsigned int v28 = *(_DWORD *)(v27 + 12);
      if (v16 > v28) {
        break;
      }
      *(_DWORD *)(v27 + 8) = v16;
      if (v16) {
        goto LABEL_27;
      }
LABEL_28:
      v26 += 16;
      if (16 * v12 == v26) {
        goto LABEL_29;
      }
    }
    DgnPrimArray<unsigned long long>::reallocElts(*v20 + v26, v16 - v28, 0);
    *(_DWORD *)(v27 + 8) = v16;
LABEL_27:
    bzero(*(void **)(*v20 + v26), 8 * v16);
    goto LABEL_28;
  }
LABEL_29:
  int v29 = a8;
  if (v218 != 1) {
    int v29 = 1;
  }
  if (v29) {
    uint64_t v30 = v12;
  }
  else {
    uint64_t v30 = (v216 * v12) >> 1;
  }
  *((_DWORD *)this + 10) = v30;
  unsigned int v31 = (void *)((char *)this + 24);
  unsigned int v32 = *((_DWORD *)this + 9);
  if (v30 > v32) {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v31, v30 - v32, 0);
  }
  uint64_t v33 = *((unsigned int *)this + 8);
  if (v33 <= v30)
  {
    if (v33 < v30)
    {
      uint64_t v34 = v30 - v33;
      uint64_t v35 = 16 * v33;
      do
      {
        unsigned int v36 = (void *)(*v31 + v35);
        *unsigned int v36 = 0;
        v36[1] = 0;
        v35 += 16;
        --v34;
      }
      while (v34);
    }
  }
  else
  {
    DgnArray<DgnArray<DgnPrimArray<long long>>>::destructAt(v31, v30, v33 - v30);
  }
  *((_DWORD *)this + 8) = v30;
  uint64_t v224 = (void *)((char *)this + 24);
  if (*((_DWORD *)this + 10))
  {
    uint64_t v37 = 0;
    uint64_t v38 = v16;
    uint64_t v39 = (int)v16;
    unsigned int v215 = v16;
    uint64_t v220 = (int)v16;
    do
    {
      uint64_t v222 = v37;
      uint64_t v40 = *v31 + 16 * v37;
      unsigned int v41 = *(_DWORD *)(v40 + 12);
      if (v16 > v41) {
        DgnArray<DgnPrimArray<double>>::reallocElts(v40, v16 - v41, 0);
      }
      uint64_t v42 = *(unsigned int *)(v40 + 8);
      if (v42 <= v16)
      {
        if (v42 < v16)
        {
          uint64_t v45 = v38 - v42;
          uint64_t v46 = 16 * v42;
          do
          {
            unsigned int v47 = (void *)(*(void *)v40 + v46);
            *unsigned int v47 = 0;
            v47[1] = 0;
            v46 += 16;
            --v45;
          }
          while (v45);
        }
      }
      else if ((int)v42 > (int)v16)
      {
        uint64_t v43 = (int)v42;
        uint64_t v44 = 16 * (int)v42 - 16;
        do
        {
          --v43;
          DgnPrimArray<unsigned int>::~DgnPrimArray(*(void *)v40 + v44);
          v44 -= 16;
        }
        while (v43 > v39);
      }
      *(_DWORD *)(v40 + 8) = v16;
      if (v16)
      {
        unint64_t v48 = 0;
        uint64_t v49 = *(void *)(*v224 + 16 * v222);
        size_t v50 = 8;
        uint64_t v51 = 8;
        do
        {
          unint64_t v52 = v48 + 1;
          unint64_t v53 = *(unsigned int *)(v49 + v51 + 4);
          if (v48 >= v53)
          {
            DgnPrimArray<unsigned long long>::reallocElts(v49 + v51 - 8, (v48 - v53 + 1), 0);
            uint64_t v55 = *(void *)(*v224 + 16 * v222);
            int v54 = v52;
          }
          else
          {
            int v54 = v48 + 1;
            uint64_t v55 = v49;
          }
          *(_DWORD *)(v49 + v51) = v54;
          bzero(*(void **)(v55 + v51 - 8), v50);
          v51 += 16;
          v50 += 8;
          uint64_t v49 = v55;
          unint64_t v48 = v52;
        }
        while (v38 != v52);
      }
      uint64_t v39 = v220;
      uint64_t v37 = v222 + 1;
      unsigned int v16 = v215;
      unsigned int v31 = (void *)((char *)this + 24);
    }
    while (v222 + 1 < (unint64_t)*((unsigned int *)this + 10));
  }
  v237[0] = 0;
  v237[1] = 0;
  uint64_t v235 = 0;
  uint64_t v236 = 0;
  if (v216)
  {
    unint64_t v228 = 0;
    HIDWORD(v236) = realloc_array(0, &v228, 8 * v216, 0, 0, 1) >> 3;
    uint64_t v235 = v228;
  }
  LODWORD(v236) = v216;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v234, v216);
  if (v216)
  {
    uint64_t v56 = 0;
    int v57 = 1;
    do
    {
      if (v56) {
        int v58 = 2;
      }
      else {
        int v58 = 1;
      }
      if (v225) {
        unsigned int v59 = v57;
      }
      else {
        unsigned int v59 = v58;
      }
      uint64_t v60 = v234[0] + v56;
      unsigned int v61 = *(_DWORD *)(v234[0] + v56 + 12);
      if (v59 > v61) {
        DgnPrimArray<unsigned long long>::reallocElts(v234[0] + v56, v59 - v61, 0);
      }
      *(_DWORD *)(v60 + 8) = v59;
      v56 += 16;
      ++v57;
    }
    while (16 * v216 != v56);
  }
  uint64_t v62 = ((double)a3 * 256.0 + 0.5);
  *(void *)this = v62;
  double v63 = 40.7436654;
  double v64 = 100.0 / a4;
  if (v218 == 1) {
    double v63 = 1.0;
  }
  double v65 = (double)v62 * v63 + 0.5;
  int64_t v66 = ((unint64_t)v65 & 0x3FFFFFFFFFFFLL) << 10;
  if (v218 == 1)
  {
    uint64_t v103 = *((unsigned int *)a2 + 38);
    v233[0] = 0;
    v233[1] = 0;
    uint64_t v231 = 0;
    int v232 = 0;
    if (a8) {
      int v104 = 1;
    }
    else {
      int v104 = v12;
    }
    int v105 = v104 * v12;
    if (v104 * v12)
    {
      uint64_t v231 = MemChunkAlloc(8 * (v104 * v12), 0);
      int v232 = v105;
    }
    unint64_t v221 = 0;
    unsigned int v219 = 0;
    unsigned int v106 = 0;
    double v107 = 1.0 / (double)(1 << (*((_DWORD *)a2 + 40) + *((_DWORD *)a2 + 41)));
    double v108 = (double)v66;
    uint64_t v68 = v213;
    while (1)
    {
      if (!PelMgr::getComponentByIndex((unint64_t)a2, v106, (uint64_t)v237, (uint64_t)v233))
      {
        DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v231);
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v233);
        goto LABEL_234;
      }
      uint64_t v109 = v235;
      *uint64_t v235 = 1;
      if (v12)
      {
        unint64_t v110 = (unsigned int *)v237[0];
        uint64_t v111 = v109 + 1;
        uint64_t v112 = v12;
        do
        {
          unsigned int v113 = *v110++;
          *v111++ = v113;
          --v112;
        }
        while (v112);
      }
      uint64_t v114 = v234[0];
      **(void **)v234[0] = 0x400000;
      if (v216 >= 2)
      {
        uint64_t v115 = 1;
        do
        {
          int v116 = 0;
          uint64_t v117 = v115++;
          if (v115 <= 1) {
            uint64_t v118 = 1;
          }
          else {
            uint64_t v118 = v115;
          }
          if (v225) {
            int v119 = 1;
          }
          else {
            int v119 = v117;
          }
          uint64_t v120 = *(void **)(v114 + 16 * v117);
          if (!v225) {
            uint64_t v118 = 2;
          }
          do
          {
            int v121 = v116;
            if (v116) {
              char v122 = 8;
            }
            else {
              char v122 = 15;
            }
            *v120++ = (v109[v117] << v122) * v109[v116];
            v116 += v119;
            --v118;
          }
          while (v118);
        }
        while (v115 != v216);
        uint64_t v123 = 256;
        if (!v121) {
          uint64_t v123 = 0x8000;
        }
        unint64_t v221 = v123;
      }
      if (a8) {
        break;
      }
      LODWORD(v228) = v12;
      HIDWORD(v228) = v12;
      int v230 = 0;
      int v229 = 0;
      if (v12 * v12)
      {
        int v229 = MemChunkAlloc(8 * (v12 * v12), 0);
        int v230 = v12 * v12;
      }
      if (v12)
      {
        uint64_t v136 = 0;
        unsigned int v137 = v231;
        do
        {
          uint64_t v138 = 0;
          uint64_t v139 = (int *)v233[0];
          int v140 = (int)v228;
          uint64_t v141 = v229;
          do
          {
            if (v103)
            {
              uint64_t v142 = (uint64_t *)*((void *)a2 + 23);
              double v143 = 0.0;
              uint64_t v144 = v103;
              uint64_t v145 = v139;
              do
              {
                int v146 = *v145++;
                double v147 = (double)v146;
                uint64_t v148 = *v142;
                v142 += 2;
                double v143 = v143 + v147 * (double)*(int *)(*(void *)(v148 + 16 * v136) + 4 * v138);
                --v144;
              }
              while (v144);
            }
            else
            {
              double v143 = 0.0;
            }
            double v149 = v107 * v143;
            *(double *)&v137[(v12 * v136 + v138)] = v149;
            if (a6) {
              *(double *)&v141[(v136 + v140 * v138)] = v149;
            }
            ++v138;
          }
          while (v138 != v12);
          ++v136;
        }
        while (v136 != v12);
      }
      if (a6)
      {
        DgnMatrix::invert((double **)&v228, (uint64_t)&v226);
        if (v12)
        {
          uint64_t v150 = 0;
          int v151 = v226;
          uint64_t v152 = v227;
          uint64_t v153 = v234[0];
          do
          {
            if (v225) {
              uint64_t v154 = v150;
            }
            else {
              uint64_t v154 = 1;
            }
            uint64_t v155 = v150 + 1;
            if (v154)
            {
              uint64_t v156 = 0;
              uint64_t v157 = *(void *)(v153 + 16 * v155);
              do
              {
                if (v225) {
                  int v158 = v156;
                }
                else {
                  int v158 = v150;
                }
                if (v225) {
                  uint64_t v159 = v156 + 1;
                }
                else {
                  uint64_t v159 = 1;
                }
                *(void *)(v157 + 8 * v159) += (uint64_t)(*(double *)(v152 + 8 * (v150 + v151 * v158))
                                                        * (double)v221);
                ++v156;
              }
              while (v154 != v156);
            }
            ++v150;
          }
          while (v155 != v12);
        }
        DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v227);
      }
      DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v229);
      if (v12) {
        goto LABEL_191;
      }
LABEL_212:
      uint64_t v179 = *((unsigned int *)this + 10);
      if (v179)
      {
        uint64_t v180 = 0;
        int v181 = 0;
        unsigned int v182 = 0;
        uint64_t v183 = v231;
        uint64_t v184 = v234[0];
        do
        {
          if (a8)
          {
            int v185 = v180;
          }
          else
          {
            int v185 = v181 + v182 * v12;
            if (v181 + 1 <= v182)
            {
              ++v181;
            }
            else
            {
              ++v182;
              int v181 = 0;
            }
          }
          double v186 = *(double *)&v183[v185];
          if (v186 < 0.0) {
            double v187 = -0.5;
          }
          else {
            double v187 = 0.5;
          }
          uint64_t v188 = v180 + 1;
          if (v16)
          {
            uint64_t v189 = 0;
            double v190 = v187 + v186 * v108;
            if (v225) {
              int v191 = 1;
            }
            else {
              int v191 = v180 + 1;
            }
            uint64_t v192 = *(void *)(*v224 + 16 * v180);
            uint64_t v193 = 1;
            do
            {
              uint64_t v194 = 0;
              uint64_t v195 = *(void *)(v184 + 16 * (v191 * v189));
              uint64_t v196 = *(void *)(v192 + 16 * v189);
              do
              {
                *(void *)(v196 + 8 * v194) += (*(void *)(v195 + 8 * v194) * (uint64_t)v190) >> 18;
                ++v194;
              }
              while (v193 != v194);
              ++v189;
              ++v193;
            }
            while (v189 != v16);
          }
          uint64_t v180 = v188;
        }
        while (v188 != v179);
      }
      unsigned int v106 = ((double)++v219 * v64 + 0.5);
    }
    if (!v12) {
      goto LABEL_212;
    }
    uint64_t v124 = 0;
    uint64_t v125 = (int *)v233[0];
    uint64_t v126 = v231;
    do
    {
      if (v103)
      {
        uint64_t v127 = (uint64_t *)*((void *)a2 + 23);
        double v128 = 0.0;
        uint64_t v129 = v103;
        uint64_t v130 = v125;
        do
        {
          int v131 = *v130++;
          double v132 = (double)v131;
          uint64_t v133 = *v127;
          v127 += 2;
          double v128 = v128 + v132 * (double)*(int *)(*(void *)(v133 + 16 * v124) + 4 * v124);
          --v129;
        }
        while (v129);
      }
      else
      {
        double v128 = 0.0;
      }
      double v134 = v107 * v128;
      *(double *)&v126[v124] = v134;
      if (a6)
      {
        double v134 = (double)v221 / v134;
        if (v225) {
          uint64_t v135 = v124 + 1;
        }
        else {
          uint64_t v135 = 1;
        }
        ++v124;
        *(void *)(*(void *)(v114 + 16 * v124) + 8 * v135) += (uint64_t)v134;
      }
      else
      {
        ++v124;
      }
    }
    while (v124 != v12);
LABEL_191:
    int v160 = 0;
    uint64_t v161 = 0;
    uint64_t v162 = v231;
    uint64_t v163 = (unsigned int *)v237[0];
    uint64_t v164 = v235;
    do
    {
      if (a8)
      {
        LODWORD(v134) = v163[v161];
        double v165 = *(double *)&v162[v161] * (double)*(unint64_t *)&v134;
      }
      else
      {
        double v165 = 0.0;
        uint64_t v166 = v12;
        uint64_t v167 = v163;
        int v168 = v160;
        do
        {
          unsigned int v169 = *v167++;
          double v165 = v165 + *(double *)&v162[v168++] * (double)v169;
          --v166;
        }
        while (v166);
      }
      if (v165 < 0.0) {
        double v134 = -0.5;
      }
      else {
        double v134 = 0.5;
      }
      uint64_t v170 = v161 + 1;
      if (v16)
      {
        int v171 = 0;
        double v172 = v134 + v165 * v108;
        if (v225) {
          int v173 = 1;
        }
        else {
          int v173 = v161 + 1;
        }
        uint64_t v174 = *(void **)(*v213 + 16 * v161);
        uint64_t v175 = v16;
        do
        {
          int v176 = v171;
          if (v171) {
            char v177 = 8;
          }
          else {
            char v177 = 15;
          }
          *v174++ += (v164[v176] * ((uint64_t)v172 << v177)) >> 18;
          int v171 = v176 + v173;
          --v175;
        }
        while (v175);
        uint64_t v178 = 256;
        if (!v176) {
          uint64_t v178 = 0x8000;
        }
        unint64_t v221 = v178;
      }
      v160 += v12;
      uint64_t v161 = v170;
    }
    while (v170 != v12);
    goto LABEL_212;
  }
  unsigned int v219 = 0;
  unsigned int v67 = 0;
  unint64_t v228 = 0;
  int v229 = 0;
  uint64_t v68 = v213;
  while (PelMgr::getComponentByIndex((unint64_t)a2, v67, (uint64_t)v237, (uint64_t)&v228, v65))
  {
    unint64_t v69 = v235;
    *uint64_t v235 = 1;
    if (v12)
    {
      uint64_t v70 = (unsigned int *)v237[0];
      BOOL v71 = v69 + 1;
      uint64_t v72 = v12;
      do
      {
        unsigned int v73 = *v70++;
        *v71++ = v73;
        --v72;
      }
      while (v72);
    }
    uint64_t v74 = v234[0];
    **(void **)v234[0] = 0x400000;
    if (v216 >= 2)
    {
      uint64_t v75 = (unsigned int *)v228;
      uint64_t v76 = 1;
      do
      {
        int v77 = 0;
        uint64_t v78 = v76++;
        if (v225) {
          LODWORD(v79) = v76;
        }
        else {
          LODWORD(v79) = 2;
        }
        if (v225) {
          int v80 = 1;
        }
        else {
          int v80 = v78;
        }
        uint64_t v81 = *(void *)(v74 + 16 * v78);
        unsigned int v82 = v79 - 1;
        if (v79 <= 1) {
          uint64_t v79 = 1;
        }
        else {
          uint64_t v79 = v79;
        }
        unint64_t v83 = *(void **)(v74 + 16 * v78);
        do
        {
          if (v77) {
            char v84 = 8;
          }
          else {
            char v84 = 15;
          }
          *v83++ = (v69[v78] << v84) * v69[v77];
          v77 += v80;
          --v79;
        }
        while (v79);
        if (a6)
        {
          uint64_t v85 = v75[v78 - 1];
          *(void *)(v81 + 8 * v82) += (uint64_t)((double)(unint64_t)((v85 << v84) * v85) * 0.0245436926);
        }
      }
      while (v76 != v216);
    }
    if (v12)
    {
      uint64_t v86 = 0;
      unint64_t v87 = v228;
      uint64_t v88 = v237[0];
      do
      {
        uint64_t v89 = v86 + 1;
        if (v16)
        {
          uint64_t v90 = 0;
          unint64_t v91 = (v87[v86] * v87[v86]);
          uint64_t v92 = *(unsigned int *)(v88 + 4 * v86);
          uint64_t v93 = 16 * v86;
          uint64_t v94 = *(void *)(*v213 + 16 * v86);
          if (v225) {
            int v95 = 1;
          }
          else {
            int v95 = v89;
          }
          uint64_t v96 = *(void *)(*v224 + v93);
          uint64_t v97 = 1;
          unint64_t v98 = (v66 + (v91 >> 1)) / v91;
          do
          {
            uint64_t v99 = 0;
            if (v95 * v90) {
              char v100 = 8;
            }
            else {
              char v100 = 15;
            }
            *(void *)(v94 + 8 * v90) += (v69[(v95 * v90)] * v98 * (v92 << v100)) >> 18;
            uint64_t v101 = *(void *)(v74 + 16 * (v95 * v90));
            uint64_t v102 = *(void *)(v96 + 16 * v90);
            do
            {
              *(void *)(v102 + 8 * v99) += (uint64_t)(*(void *)(v101 + 8 * v99) * v98) >> 18;
              ++v99;
            }
            while (v97 != v99);
            ++v90;
            ++v97;
          }
          while (v90 != v16);
        }
        uint64_t v86 = v89;
      }
      while (v89 != v12);
    }
    double v65 = (double)++v219 * v64 + 0.5;
    unsigned int v67 = v65;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v228);
LABEL_234:
  uint64_t v197 = v219 >> 1;
  if (v12)
  {
    for (uint64_t i = 0; i != v12; ++i)
    {
      if (v16)
      {
        uint64_t v199 = *(unint64_t **)(*v68 + 16 * i);
        uint64_t v200 = v16;
        do
        {
          unint64_t v201 = (*v199 + v197) / v219;
          if ((*v199 & 0x8000000000000000) != 0) {
            unint64_t v201 = -(uint64_t)((v197 - *v199) / v219);
          }
          *v199++ = v201;
          --v200;
        }
        while (v200);
      }
    }
  }
  uint64_t v202 = *((unsigned int *)this + 10);
  if (v202)
  {
    for (uint64_t j = 0; j != v202; ++j)
    {
      if (v16)
      {
        uint64_t v204 = 0;
        uint64_t v205 = *(void *)(*v224 + 16 * j);
        uint64_t v206 = 1;
        do
        {
          uint64_t v207 = 0;
          uint64_t v208 = *(void *)(v205 + 16 * v204);
          do
          {
            uint64_t v209 = *(void *)(v208 + 8 * v207);
            unint64_t v210 = (v197 - v209) / (unint64_t)v219;
            BOOL v13 = v209 >= 0;
            unint64_t v211 = (v209 + v197) / (unint64_t)v219;
            if (!v13) {
              unint64_t v211 = -(uint64_t)v210;
            }
            *(void *)(v208 + 8 * v207++) = v211;
          }
          while (v206 != v207);
          ++v204;
          ++v206;
        }
        while (v204 != v16);
      }
    }
  }
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v234);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v235);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v237);
}

void sub_213E1B5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,char a32)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&a30);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a32);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v32 - 184);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v32 - 168);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v32 - 152);
  _Unwind_Resume(a1);
}

uint64_t CTPelAccum::CTPelAccum(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6, char a7, char a8, char a9, int a10, uint64_t a11, double **a12, uint64_t a13)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(unsigned char *)(a1 + 20) = a4;
  *(unsigned char *)(a1 + 21) = a5 | a9;
  *(unsigned char *)(a1 + 23) = a6;
  *(unsigned char *)(a1 + 24) = a7;
  *(unsigned char *)(a1 + 25) = a8;
  *(unsigned char *)(a1 + 26) = a9;
  *(_DWORD *)(a1 + 28) = a10;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(void *)(a1 + 40) = a11;
  *(void *)(a1 + 48) = a13;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 132);
  *(unsigned char *)(a1 + 22) = 0;
  CTPelAccum::init(a1, a12);
  return a1;
}

void sub_213E1B724(_Unwind_Exception *a1)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray(v2 + 144);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v5);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v4);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v3);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v1);
  _Unwind_Resume(a1);
}

void CTPelAccum::init(uint64_t a1, double **a2)
{
  BOOL v3 = *(_DWORD *)(*(void *)a1 + 16) == 1 && *(unsigned char *)(a1 + 20) == 0;
  if (*(_DWORD *)(a1 + 28)) {
    char v4 = CTPelAccum::determineNumSignificantSingularValues(a1, a2);
  }
  else {
    char v4 = 0;
  }
  *(unsigned char *)(a1 + 27) = v4;
  *(void *)(a1 + 56) = 0;
  if (*(unsigned char *)(a1 + 26))
  {
    *(_DWORD *)(a1 + 160) = 0;
    uint64_t v5 = (_DWORD *)(a1 + 160);
    *(_DWORD *)(a1 + 96) = 0;
    unsigned int v6 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 120) = v6;
    unint64_t v7 = (unsigned char *)(a1 + 24);
    if (!*(unsigned char *)(a1 + 24)) {
      goto LABEL_25;
    }
    unint64_t v8 = (void **)(a1 + 104);
    unsigned int v9 = *(_DWORD *)(a1 + 116);
    unsigned int v10 = v6;
    if (v6 > v9)
    {
      DgnPrimArray<unsigned long long>::reallocElts(a1 + 104, v6 - v9, 0);
      unsigned int v10 = *(_DWORD *)(a1 + 16);
    }
    *(_DWORD *)(a1 + 112) = v6;
    if (v10) {
      goto LABEL_12;
    }
    goto LABEL_13;
  }
  if (v3)
  {
    unsigned int v11 = (*(_DWORD *)(a1 + 16) + *(_DWORD *)(a1 + 16) * *(_DWORD *)(a1 + 16)) >> 1;
    *(_DWORD *)(a1 + 96) = v11;
    uint64_t v12 = (_DWORD *)(a1 + 96);
  }
  else
  {
    uint64_t v12 = (_DWORD *)(a1 + 96);
    if (v4) {
      unsigned int v11 = *(_DWORD *)(a1 + 32);
    }
    else {
      unsigned int v11 = *(_DWORD *)(a1 + 16);
    }
    *(_DWORD *)(a1 + 96) = v11;
  }
  *(_DWORD *)(a1 + 160) = v11;
  uint64_t v5 = (_DWORD *)(a1 + 160);
  *(_DWORD *)(a1 + 120) = 0;
  unint64_t v7 = (unsigned char *)(a1 + 24);
  if (!*(unsigned char *)(a1 + 24))
  {
LABEL_25:
    if (!*(unsigned char *)(a1 + 23)) {
      return;
    }
    goto LABEL_26;
  }
  BOOL v13 = *(_DWORD *)(*(void *)a1 + 16) == 1 && *(unsigned char *)(a1 + 20) == 0;
  if (!*(unsigned char *)(a1 + 25)) {
    BOOL v13 = 1;
  }
  uint64_t v33 = *(unsigned int *)(a1 + 16);
  if (v13) {
    unsigned int v34 = v33 + 1;
  }
  else {
    unsigned int v34 = 2;
  }
  uint64_t v35 = (void *)(a1 + 64);
  unsigned int v36 = *(_DWORD *)(a1 + 76);
  if (v33 > v36) {
    DgnArray<DgnPrimArray<double>>::reallocElts(a1 + 64, v33 - v36, 0);
  }
  uint64_t v37 = *(unsigned int *)(a1 + 72);
  if (v37 <= v33)
  {
    if (v37 < v33)
    {
      uint64_t v40 = v33 - v37;
      uint64_t v41 = 16 * v37;
      do
      {
        uint64_t v42 = (void *)(*v35 + v41);
        void *v42 = 0;
        v42[1] = 0;
        v41 += 16;
        --v40;
      }
      while (v40);
    }
  }
  else if ((int)v37 > (int)v33)
  {
    uint64_t v38 = (int)v37;
    uint64_t v39 = 16 * (int)v37 - 16;
    do
    {
      --v38;
      DgnPrimArray<unsigned int>::~DgnPrimArray(*v35 + v39);
      v39 -= 16;
    }
    while (v38 > (int)v33);
  }
  *(_DWORD *)(a1 + 72) = v33;
  if (*(_DWORD *)(a1 + 16))
  {
    uint64_t v43 = 0;
    unint64_t v44 = 0;
    while (1)
    {
      uint64_t v45 = *v35 + v43;
      unsigned int v46 = *(_DWORD *)(v45 + 12);
      if (v34 > v46) {
        break;
      }
      *(_DWORD *)(v45 + 8) = v34;
      if (v34) {
        goto LABEL_71;
      }
LABEL_72:
      ++v44;
      v43 += 16;
      if (v44 >= *(unsigned int *)(a1 + 16)) {
        goto LABEL_73;
      }
    }
    DgnPrimArray<unsigned long long>::reallocElts(*v35 + v43, v34 - v46, 0);
    *(_DWORD *)(v45 + 8) = v34;
LABEL_71:
    bzero(*(void **)(*v35 + v43), 8 * v34);
    goto LABEL_72;
  }
LABEL_73:
  unsigned int v47 = (v34 + v34 * v34) >> 1;
  unint64_t v8 = (void **)(a1 + 80);
  unsigned int v48 = *(_DWORD *)(a1 + 92);
  unsigned int v49 = *(_DWORD *)(a1 + 96) * v47;
  unsigned int v10 = v49;
  if (v49 > v48)
  {
    DgnPrimArray<unsigned long long>::reallocElts(a1 + 80, v49 - v48, 0);
    unsigned int v10 = *v12 * v47;
  }
  *(_DWORD *)(a1 + 88) = v49;
  if (v10) {
LABEL_12:
  }
    bzero(*v8, 8 * v10);
LABEL_13:
  if (!*v7 || *(unsigned char *)(a1 + 21)) {
    goto LABEL_25;
  }
LABEL_26:
  uint64_t v14 = *(unsigned int *)(a1 + 16);
  uint64_t v15 = (void *)(a1 + 128);
  unsigned int v16 = *(_DWORD *)(a1 + 140);
  if (v14 > v16) {
    DgnArray<DgnPrimArray<double>>::reallocElts(a1 + 128, v14 - v16, 0);
  }
  uint64_t v17 = *(unsigned int *)(a1 + 136);
  if (v17 <= v14)
  {
    if (v17 < v14)
    {
      uint64_t v20 = v14 - v17;
      uint64_t v21 = 16 * v17;
      do
      {
        uint64_t v22 = (void *)(*v15 + v21);
        *uint64_t v22 = 0;
        v22[1] = 0;
        v21 += 16;
        --v20;
      }
      while (v20);
    }
  }
  else if ((int)v17 > (int)v14)
  {
    uint64_t v18 = (int)v17;
    uint64_t v19 = 16 * (int)v17 - 16;
    do
    {
      --v18;
      DgnPrimArray<unsigned int>::~DgnPrimArray(*v15 + v19);
      v19 -= 16;
    }
    while (v18 > (int)v14);
  }
  unsigned int v23 = v14 + 1;
  *(_DWORD *)(a1 + 136) = v14;
  if (*(_DWORD *)(a1 + 16))
  {
    uint64_t v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v15 + v24;
      unsigned int v27 = *(_DWORD *)(v26 + 12);
      if (v23 > v27) {
        break;
      }
      *(_DWORD *)(v26 + 8) = v23;
      if (v14 != -1) {
        goto LABEL_41;
      }
LABEL_42:
      ++v25;
      v24 += 16;
      if (v25 >= *(unsigned int *)(a1 + 16)) {
        goto LABEL_43;
      }
    }
    DgnPrimArray<unsigned long long>::reallocElts(*v15 + v24, v23 - v27, 0);
    *(_DWORD *)(v26 + 8) = v23;
LABEL_41:
    bzero(*(void **)(*v15 + v24), 8 * (v14 + 1));
    goto LABEL_42;
  }
LABEL_43:
  unsigned int v28 = (v23 * (v14 + 2)) >> 1;
  unsigned int v29 = *(_DWORD *)(a1 + 156);
  unsigned int v30 = *(_DWORD *)(a1 + 160) * v28;
  unsigned int v31 = v30;
  if (v30 > v29)
  {
    DgnPrimArray<unsigned long long>::reallocElts(a1 + 144, v30 - v29, 0);
    unsigned int v31 = *v5 * v28;
  }
  *(_DWORD *)(a1 + 152) = v30;
  if (v31)
  {
    uint64_t v32 = *(void **)(a1 + 144);
    bzero(v32, 8 * v31);
  }
}

void CTPelAccum::~CTPelAccum(CTPelAccum *this)
{
}

uint64_t CTPelAccum::determineNumSignificantSingularValues(uint64_t a1, double **a2)
{
  uint64_t v2 = 0;
  if (a2)
  {
    if (*(void *)(a1 + 40))
    {
      uint64_t v2 = *(void *)(a1 + 48);
      if (v2)
      {
        uint64_t v3 = *(unsigned int *)(*(void *)a1 + 132);
        double v4 = **a2;
        double v5 = 0.0 - v4;
        if (v4 < 0.0) {
          double v4 = 0.0 - v4;
        }
        if (v3 < 2)
        {
          LODWORD(v7) = 1;
        }
        else
        {
          LODWORD(v5) = *(_DWORD *)(a1 + 28);
          double v6 = (double)*(unint64_t *)&v5 * 0.01 * v4;
          uint64_t v7 = 1;
          while (1)
          {
            double v8 = (*a2)[v7];
            if (v8 < 0.0) {
              double v8 = 0.0 - v8;
            }
            if (v8 < v6) {
              break;
            }
            if (v3 == ++v7)
            {
              LODWORD(v7) = *(_DWORD *)(*(void *)a1 + 132);
              break;
            }
          }
        }
        *(_DWORD *)(a1 + 32) = v7;
        return 1;
      }
    }
  }
  return v2;
}

void CTPelAccum::reset(CTPelAccum *this)
{
  *((void *)this + 7) = 0;
  if (*((unsigned char *)this + 24))
  {
    if (*((unsigned char *)this + 26))
    {
      uint64_t v2 = (void **)((char *)this + 104);
      unsigned int v3 = *((_DWORD *)this + 4);
      unsigned int v4 = *((_DWORD *)this + 29);
      unsigned int v5 = v3;
      if (v3 > v4)
      {
        DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 104, v3 - v4, 0);
        unsigned int v5 = *((_DWORD *)this + 4);
      }
      *((_DWORD *)this + 28) = v3;
      LODWORD(v6) = v5;
      if (!v5) {
        goto LABEL_23;
      }
    }
    else
    {
      BOOL v7 = *(_DWORD *)(*(void *)this + 16) == 1 && *((unsigned char *)this + 20) == 0;
      if (!*((unsigned char *)this + 25)) {
        BOOL v7 = 1;
      }
      uint64_t v6 = *((unsigned int *)this + 4);
      if (v7) {
        unsigned int v8 = v6 + 1;
      }
      else {
        unsigned int v8 = 2;
      }
      if (v6)
      {
        uint64_t v9 = 0;
        do
        {
          if (v8) {
            bzero(*(void **)(*((void *)this + 8) + v9), 8 * v8);
          }
          v9 += 16;
        }
        while (16 * v6 != v9);
      }
      unsigned int v5 = *((_DWORD *)this + 24) * ((v8 + v8 * v8) >> 1);
      if (!v5)
      {
LABEL_23:
        if (*((unsigned char *)this + 24) && !*((unsigned char *)this + 21)) {
          goto LABEL_27;
        }
        goto LABEL_25;
      }
      uint64_t v2 = (void **)((char *)this + 80);
    }
    bzero(*v2, 8 * v5);
    goto LABEL_23;
  }
LABEL_25:
  if (!*((unsigned char *)this + 23)) {
    goto LABEL_36;
  }
  LODWORD(v6) = *((_DWORD *)this + 4);
LABEL_27:
  if (v6)
  {
    uint64_t v10 = 0;
    int v11 = v6 + 1;
    do
    {
      if (v6 != -1) {
        bzero(*(void **)(*((void *)this + 16) + v10), 8 * (v6 + 1));
      }
      v10 += 16;
    }
    while (16 * v6 != v10);
  }
  else
  {
    int v11 = 1;
  }
  int v12 = *((_DWORD *)this + 40);
  if (v12 * ((v11 * (v6 + 2)) >> 1)) {
    bzero(*((void **)this + 18), 8 * v12 * ((v11 * (v6 + 2)) >> 1));
  }
LABEL_36:
  *((unsigned char *)this + 22) = 0;
}

uint64_t writeObject<DgnPrimArray<long long>>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v9 = *(_DWORD *)(a2 + 8);
  uint64_t result = writeObject(a1, &v9, a3);
  if (*(_DWORD *)(a2 + 8))
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      uint64_t result = writeObject<unsigned long long>(a1, *(void *)a2 + v7, a3);
      ++v8;
      v7 += 16;
    }
    while (v8 < *(unsigned int *)(a2 + 8));
  }
  return result;
}

void CTPelAccum::addAccum(CTPelAccum *this, const CTPelAccum *a2, char a3)
{
  *((void *)this + 7) += *((void *)a2 + 7);
  if (*((unsigned char *)this + 24))
  {
    if (*((unsigned char *)this + 26))
    {
      int v4 = *((_DWORD *)this + 4);
      if (v4)
      {
        unsigned int v5 = (uint64_t *)*((void *)a2 + 13);
        uint64_t v6 = (void *)*((void *)this + 13);
        uint64_t v7 = *((unsigned int *)this + 4);
        do
        {
          uint64_t v8 = *v5++;
          *v6++ += v8;
          --v7;
        }
        while (v7);
      }
      goto LABEL_37;
    }
    BOOL v9 = *(_DWORD *)(*(void *)this + 16) == 1 && *((unsigned char *)this + 20) == 0;
    if (!*((unsigned char *)this + 25)) {
      BOOL v9 = 1;
    }
    int v10 = *((_DWORD *)this + 4);
    if (v9) {
      uint64_t v11 = (v10 + 1);
    }
    else {
      uint64_t v11 = 2;
    }
    uint64_t v57 = *((unsigned int *)this + 4);
    if (v10)
    {
      uint64_t v12 = 0;
      uint64_t v13 = *((void *)a2 + 8);
      do
      {
        if (v11)
        {
          uint64_t v14 = *(uint64_t **)(v13 + 16 * v12);
          uint64_t v15 = *(void **)(*((void *)this + 8) + 16 * v12);
          uint64_t v16 = v11;
          do
          {
            uint64_t v17 = *v14++;
            *v15++ += v17;
            --v16;
          }
          while (v16);
        }
        ++v12;
      }
      while (v12 != v57);
    }
    unsigned int v51 = (v11 + v11 * v11) >> 1;
    int v53 = *((_DWORD *)this + 24);
    if ((a3 & 1) != 0 || !*((unsigned char *)a2 + 27))
    {
      uint64_t v26 = v53 * v51;
      if (v26)
      {
        unsigned int v27 = (uint64_t *)*((void *)a2 + 10);
        unsigned int v28 = (void *)*((void *)this + 10);
        do
        {
          uint64_t v29 = *v27++;
          *v28++ += v29;
          --v26;
        }
        while (v26);
      }
    }
    else if (v53)
    {
      char v48 = a3;
      unsigned int v49 = this;
      int v55 = 0;
      for (unsigned int i = 0; i != v53; ++i)
      {
        if (v57 != -1)
        {
          unsigned int v19 = 0;
          int v20 = 0;
          uint64_t v21 = *((void *)v49 + 10);
          int v22 = 2;
          uint64_t v23 = 1;
          do
          {
            uint64_t v24 = 0;
            do
            {
              *(void *)(v21 + 8 * (v55 + (v19 >> 1) + v24)) += (uint64_t)(CTPelAccum::getDataDataAccumUnscaled(a2, i, v20, v24)+ 0.5);
              ++v24;
            }
            while (v23 != v24);
            ++v23;
            v19 += v22;
            v22 += 2;
          }
          while (v20++ != v57);
        }
        v55 += v51;
      }
      int v4 = v57;
      this = v49;
      a3 = v48;
LABEL_37:
      if (!*((unsigned char *)this + 21)) {
        goto LABEL_40;
      }
      goto LABEL_38;
    }
    int v4 = v57;
    goto LABEL_37;
  }
LABEL_38:
  if (!*((unsigned char *)this + 23)) {
    return;
  }
  int v4 = *((_DWORD *)this + 4);
LABEL_40:
  if (v4)
  {
    uint64_t v30 = 0;
    int v31 = v4 + 1;
    uint64_t v32 = *((void *)a2 + 16);
    do
    {
      if (v4 != -1)
      {
        uint64_t v33 = *(uint64_t **)(v32 + 16 * v30);
        unsigned int v34 = *(void **)(*((void *)this + 16) + 16 * v30);
        uint64_t v35 = (v4 + 1);
        do
        {
          uint64_t v36 = *v33++;
          *v34++ += v36;
          --v35;
        }
        while (v35);
      }
      ++v30;
    }
    while (v30 != v4);
  }
  else
  {
    int v31 = 1;
  }
  unsigned int v52 = (v31 * (v4 + 2)) >> 1;
  int v54 = *((_DWORD *)this + 40);
  if ((a3 & 1) != 0 || !*((unsigned char *)a2 + 27))
  {
    uint64_t v44 = v54 * v52;
    if (v44)
    {
      uint64_t v45 = (uint64_t *)*((void *)a2 + 18);
      unsigned int v46 = (void *)*((void *)this + 18);
      do
      {
        uint64_t v47 = *v45++;
        *v46++ += v47;
        --v44;
      }
      while (v44);
    }
  }
  else
  {
    size_t v50 = this;
    if (v54)
    {
      int v58 = 0;
      unsigned int v37 = 0;
      int v56 = v31;
      do
      {
        if (v31)
        {
          unsigned int v38 = 0;
          int v39 = 0;
          uint64_t v40 = *((void *)v50 + 18);
          int v41 = 2;
          uint64_t v42 = 1;
          do
          {
            uint64_t v43 = 0;
            int v59 = v39 + 1;
            do
            {
              *(void *)(v40 + 8 * (v58 + (v38 >> 1) + v43)) += (uint64_t)(CTPelAccum::getMeanMeanAccumUnscaled(a2, v37, v39, v43)+ 0.5);
              ++v43;
            }
            while (v42 != v43);
            ++v42;
            v38 += v41;
            v41 += 2;
            int v31 = v56;
            ++v39;
          }
          while (v59 != v56);
        }
        ++v37;
        v58 += v52;
      }
      while (v37 != v54);
    }
  }
}

double CTPelAccum::getDataDataAccumUnscaled(CTPelAccum *this, unsigned int a2, int a3, int a4)
{
  BOOL v4 = *(_DWORD *)(*(void *)this + 16) == 1 && *((unsigned char *)this + 20) == 0;
  if (v4 || !*((unsigned char *)this + 25)) {
    int v5 = *((_DWORD *)this + 4) + 1;
  }
  else {
    int v5 = 2;
  }
  unsigned int v6 = a4 + ((a3 + a3 * a3) >> 1);
  unsigned int v7 = (v5 + v5 * v5) >> 1;
  if (!*((unsigned char *)this + 27)) {
    return (double)*(uint64_t *)(*((void *)this + 10) + 8 * (v6 + v7 * a2));
  }
  uint64_t v8 = *((unsigned int *)this + 8);
  if (!v8) {
    return 0.0;
  }
  BOOL v9 = (int *)*((void *)this + 6);
  int v10 = *v9;
  uint64_t v11 = *((void *)v9 + 1);
  double result = 0.0;
  do
  {
    double result = result + *(double *)(v11 + 8 * a2) * (double)*(uint64_t *)(*((void *)this + 10) + 8 * v6);
    v6 += v7;
    a2 += v10;
    --v8;
  }
  while (v8);
  return result;
}

double CTPelAccum::getMeanMeanAccumUnscaled(CTPelAccum *this, unsigned int a2, int a3, int a4)
{
  unsigned int v4 = a4 + ((a3 + a3 * a3) >> 1);
  unsigned int v5 = (*((_DWORD *)this + 4) + 2 + (*((_DWORD *)this + 4) + 2) * *((_DWORD *)this + 4)) >> 1;
  if (!*((unsigned char *)this + 27)) {
    return (double)*(uint64_t *)(*((void *)this + 18) + 8 * (v4 + v5 * a2));
  }
  uint64_t v6 = *((unsigned int *)this + 8);
  if (!v6) {
    return 0.0;
  }
  unsigned int v7 = (int *)*((void *)this + 6);
  int v8 = *v7;
  uint64_t v9 = *((void *)v7 + 1);
  double result = 0.0;
  do
  {
    double result = result + *(double *)(v9 + 8 * a2) * (double)*(uint64_t *)(*((void *)this + 18) + 8 * v4);
    v4 += v5;
    a2 += v8;
    --v6;
  }
  while (v6);
  return result;
}

uint64_t CTPelAccum::scaleAccum(uint64_t this, double a2)
{
  if (a2 != 1.0)
  {
    *(void *)(this + 56) = (unint64_t)((double)*(uint64_t *)(this + 56) * a2 + 0.5);
    if (!*(unsigned char *)(this + 24)) {
      goto LABEL_35;
    }
    if (*(unsigned char *)(this + 26))
    {
      LODWORD(v2) = *(_DWORD *)(this + 16);
      if (v2)
      {
        unsigned int v3 = *(uint64_t **)(this + 104);
        uint64_t v4 = *(unsigned int *)(this + 16);
        do
        {
          if (*v3 < 0) {
            double v5 = -0.5;
          }
          else {
            double v5 = 0.5;
          }
          *unsigned int v3 = (uint64_t)(v5 + (double)*v3 * a2);
          ++v3;
          --v4;
        }
        while (v4);
      }
    }
    else
    {
      BOOL v6 = *(_DWORD *)(*(void *)this + 16) == 1 && *(unsigned char *)(this + 20) == 0;
      if (!*(unsigned char *)(this + 25)) {
        BOOL v6 = 1;
      }
      uint64_t v2 = *(unsigned int *)(this + 16);
      if (v6) {
        uint64_t v7 = (v2 + 1);
      }
      else {
        uint64_t v7 = 2;
      }
      if (v2)
      {
        for (uint64_t i = 0; i != v2; ++i)
        {
          if (v7)
          {
            uint64_t v9 = *(uint64_t **)(*(void *)(this + 64) + 16 * i);
            uint64_t v10 = v7;
            do
            {
              if (*v9 < 0) {
                double v11 = -0.5;
              }
              else {
                double v11 = 0.5;
              }
              *uint64_t v9 = (uint64_t)(v11 + (double)*v9 * a2);
              ++v9;
              --v10;
            }
            while (v10);
          }
        }
      }
      uint64_t v12 = *(_DWORD *)(this + 96) * ((v7 + v7 * v7) >> 1);
      if (v12)
      {
        uint64_t v13 = *(uint64_t **)(this + 80);
        do
        {
          if (*v13 < 0) {
            double v14 = -0.5;
          }
          else {
            double v14 = 0.5;
          }
          *uint64_t v13 = (uint64_t)(v14 + (double)*v13 * a2);
          ++v13;
          --v12;
        }
        while (v12);
      }
    }
    if (*(unsigned char *)(this + 21))
    {
LABEL_35:
      if (!*(unsigned char *)(this + 23)) {
        return this;
      }
      LODWORD(v2) = *(_DWORD *)(this + 16);
    }
    if (v2)
    {
      uint64_t v15 = 0;
      int v16 = v2 + 1;
      do
      {
        if (v2 != -1)
        {
          uint64_t v17 = *(uint64_t **)(*(void *)(this + 128) + 16 * v15);
          uint64_t v18 = (v2 + 1);
          do
          {
            if (*v17 < 0) {
              double v19 = -0.5;
            }
            else {
              double v19 = 0.5;
            }
            *uint64_t v17 = (uint64_t)(v19 + (double)*v17 * a2);
            ++v17;
            --v18;
          }
          while (v18);
        }
        ++v15;
      }
      while (v15 != v2);
    }
    else
    {
      int v16 = 1;
    }
    int v20 = *(_DWORD *)(this + 160);
    if (v20)
    {
      int v21 = 0;
      int v22 = 0;
      unsigned int v23 = (v16 * (v2 + 2)) >> 1;
      do
      {
        if (v16)
        {
          unsigned int v24 = 0;
          int v25 = 0;
          uint64_t v26 = *(void *)(this + 144);
          int v27 = 2;
          uint64_t v28 = 1;
          do
          {
            uint64_t v29 = 0;
            int v30 = v21 + (v24 >> 1);
            ++v25;
            do
            {
              uint64_t v31 = *(void *)(v26 + 8 * (v30 + v29));
              if (v31 < 0) {
                double v32 = -0.5;
              }
              else {
                double v32 = 0.5;
              }
              *(void *)(v26 + 8 * (v30 + v29++)) = (uint64_t)(v32 + (double)v31 * a2);
            }
            while (v28 != v29);
            ++v28;
            v24 += v27;
            v27 += 2;
          }
          while (v25 != v16);
        }
        ++v22;
        v21 += v23;
      }
      while (v22 != v20);
    }
  }
  return this;
}

unint64_t CTPelAccum::sizeObject(uint64_t a1, int a2)
{
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v4 = 8;
  }
  else {
    uint64_t v4 = 16;
  }
  uint64_t v5 = sizeObject<DgnPrimArray<double>>(a1 + 64, a2);
  uint64_t v6 = sizeObject<unsigned long long>(a1 + 80, a2);
  uint64_t v7 = sizeObject<unsigned long long>(a1 + 104, a2);
  uint64_t v8 = sizeObject<DgnPrimArray<double>>(a1 + 128, a2);
  uint64_t v9 = sizeObject<unsigned long long>(a1 + 144, a2);
  if (a2 == 3) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = v4;
  }
  uint64_t v11 = 12;
  if (a2 == 3) {
    uint64_t v11 = 0;
  }
  return (v11 & 0xFFFFFFFFFFFFFFFDLL | (2 * (a2 != 3)))
       + v5
       + v6
       + v7
       + v8
       + v9
       + ((2 * (a2 != 3)) | (8 * (a2 != 3)))
       + v10;
}

BOOL CTPelAccum::adaptOneFrame(uint64_t *a1, unsigned int a2, int a3, AdaptStats *a4, int a5, uint64_t a6, double a7, double a8)
{
  if (a7 != 0.0)
  {
    unsigned int v15 = a2;
    int v282 = 0;
    uint64_t v281 = 0;
    uint64_t v17 = *(unsigned __int16 *)(*(void *)(*a1 + 288) + 2 * a2);
    long long v280 = 0u;
    long long v279 = 0u;
    long long v278 = 0u;
    long long v277 = 0u;
    long long v276 = 0u;
    long long v275 = 0u;
    long long v274 = 0u;
    long long v273 = 0u;
    PelStats::resetStats((PelStats *)v272);
    if (!*(_DWORD *)(a6 + 8)) {
      a6 = PelScorer::setFrameStaticsForGenoneAdapt((PelScorer *)a1[1], v17, a3, (PelStats *)v272, v18, v19, v20, v21);
    }
    v271[0] = 0;
    v271[1] = 0;
    DgnPrimArray<unsigned char>::copyArraySlice((unint64_t)v271, (void *)a6, 0, *(_DWORD *)(a6 + 8));
    double ComponentProbs = PelScorer::getComponentProbs((PelScorer *)a1[1], v15, (uint64_t)&v281, a5);
    if (ComponentProbs == 0.0)
    {
      BOOL v8 = 0;
LABEL_245:
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v271);
      DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v281);
      return v8;
    }
    if (*((unsigned char *)a1 + 24)) {
      BOOL v252 = *((unsigned char *)a1 + 21) == 0;
    }
    else {
      BOOL v252 = 0;
    }
    int v242 = *(_DWORD *)(*a1 + 16);
    int v239 = a4;
    unsigned int v23 = v15;
    BOOL v24 = v242 != 1 || *((unsigned char *)a1 + 20) != 0;
    uint64_t v269 = 0;
    unint64_t v270 = 0;
    uint64_t v267 = 0;
    uint64_t v268 = 0;
    unint64_t v25 = (*((_DWORD *)a1 + 4) + 1);
    uint64_t v265 = 0;
    unsigned int v26 = realloc_array(0, &v265, v25, 0, 0, 1);
    uint64_t v269 = v265;
    unint64_t v270 = __PAIR64__(v26, v25);
    *(unsigned char *)uint64_t v265 = 1;
    LODWORD(v28) = *((_DWORD *)a1 + 4);
    if (v28)
    {
      unint64_t v29 = 0;
      do
      {
        v269[v29 + 1] = *(unsigned char *)(v271[0] + v29);
        unint64_t v28 = *((unsigned int *)a1 + 4);
        ++v29;
      }
      while (v29 < v28);
    }
    if (!*((unsigned char *)a1 + 25)) {
      BOOL v24 = 0;
    }
    if (*((unsigned char *)a1 + 24))
    {
      unsigned int v30 = (v28 + 2 + (v28 + 2) * v28) >> 1;
      unsigned int v31 = 2 * v28 + 2;
      if (v24) {
        unsigned int v32 = v31;
      }
      else {
        unsigned int v32 = v30;
      }
      uint64_t v33 = v267;
      if (HIDWORD(v268) < v32)
      {
        uint64_t v265 = 0;
        HIDWORD(v268) = realloc_array(v267, &v265, 8 * v32, 8 * v268, 8 * v268, 1) >> 3;
        uint64_t v33 = v265;
        uint64_t v267 = v265;
      }
      LODWORD(v268) = v32;
      *uint64_t v33 = 0x400000;
      if (v24) {
        v33[1] = 0;
      }
      LODWORD(v28) = *((_DWORD *)a1 + 4);
      uint64_t v34 = (v28 + 1);
      unsigned int v15 = v23;
      if (v34 >= 2)
      {
        uint64_t v35 = v269;
        uint64_t v36 = 1;
        do
        {
          int v37 = 0;
          uint64_t v38 = v36++;
          if (v36 <= 1) {
            uint64_t v39 = 1;
          }
          else {
            uint64_t v39 = v36;
          }
          if (v24) {
            int v40 = v38;
          }
          else {
            int v40 = 1;
          }
          unsigned int v41 = 2 * v38;
          if (v24) {
            uint64_t v39 = 2;
          }
          else {
            unsigned int v41 = (v36 * v38) >> 1;
          }
          do
          {
            if (v37) {
              char v42 = 8;
            }
            else {
              char v42 = 15;
            }
            v33[v41++] = ((unint64_t)v35[v38] << v42)
                       * (unint64_t)v35[v37];
            v37 += v40;
            --v39;
          }
          while (v39);
        }
        while (v36 != v34);
      }
    }
    uint64_t v265 = 0;
    uint64_t v266 = 0;
    uint64_t v263 = 0;
    uint64_t v264 = 0;
    if (v252 || *((unsigned char *)a1 + 23))
    {
      int v43 = v28 + 1;
      if (v28 == -1)
      {
        int v44 = 0;
        unsigned int v45 = 0;
        int v46 = -1;
      }
      else
      {
        v261 = 0;
        HIDWORD(v266) = realloc_array(0, &v261, 4 * (v28 + 1), 0, 0, 1) >> 2;
        uint64_t v265 = v261;
        int v46 = *((_DWORD *)a1 + 4);
        unsigned int v45 = HIDWORD(v264);
        int v44 = v46 + 1;
      }
      LODWORD(v266) = v43;
      unsigned int v47 = (v44 * (v46 + 2)) >> 1;
      if (v45 < v47)
      {
        v261 = 0;
        HIDWORD(v2DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 64) = realloc_array(v263, &v261, 8 * ((v44 * (v46 + 2)) >> 1), 8 * v264, 8 * v264, 1) >> 3;
        uint64_t v263 = v261;
      }
      LODWORD(v2DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 64) = v47;
    }
    unsigned int v238 = v15;
    uint64_t v237 = v15;
    char v48 = (int *)(*(void *)(*a1 + 456) + 4 * v15);
    int v50 = *v48;
    int v49 = v48[1];
    v261 = 0;
    uint64_t v262 = 0;
    unint64_t v51 = (v49 - v50);
    if (v49 == v50)
    {
      unsigned int v52 = 0;
      LODWORD(v262) = v49 - v50;
    }
    else
    {
      v260[0] = 0;
      unint64_t v53 = realloc_array(0, v260, 16 * v51, 0, 0, 1);
      uint64_t v54 = 0;
      unint64_t v55 = v53 >> 4;
      unsigned int v52 = v260[0];
      v261 = v260[0];
      LODWORD(v262) = v49 - v50;
      HIDWORD(v262) = v55;
      uint64_t v56 = v281;
      uint64_t v57 = (char *)v260[0] + 8;
      unint64_t v51 = (v49 - v50);
      do
      {
        *uint64_t v57 = v54;
        v27.n128_f64[0] = *(double *)(v56 + 8 * v54) / ComponentProbs;
        *((void *)v57 - 1) = v27.n128_u64[0];
        ++v54;
        v57 += 4;
      }
      while (v49 - v50 != v54);
    }
    unint64_t v240 = v51;
    mrec_qsort_r<CompAndProb>((unint64_t)v52, v51, 16, v27);
    v260[0] = 0;
    v260[1] = 0;
    v259[0] = 0;
    v259[1] = 0;
    v258[0] = 0;
    v258[1] = 0;
    v255[1] = 0;
    uint64_t v256 = 0;
    int v257 = 0;
    v255[0] = 0;
    uint64_t v58 = *a1;
    if (v242 == 1)
    {
      DgnArray<DgnArray<DgnPrimArray<int>>>::copyArraySlice((uint64_t)v255, (void *)(v58 + 184), 0, *(_DWORD *)(v58 + 192));
      uint64_t v58 = *a1;
      unsigned int v236 = *(_DWORD *)(*a1 + 152);
      int v60 = *(_DWORD *)(*a1 + 160);
      int v59 = *(_DWORD *)(*a1 + 164);
      int v61 = *((_DWORD *)a1 + 4);
      if (*((unsigned char *)a1 + 20)) {
        int v62 = 1;
      }
      else {
        int v62 = *((_DWORD *)a1 + 4);
      }
      int v63 = v61 * v62;
      if (v61 * v62 && !v257)
      {
        uint64_t v256 = MemChunkAlloc(8 * (v61 * v62), 0);
        int v257 = v63;
        uint64_t v58 = *a1;
      }
      char v64 = v60 + v59;
    }
    else
    {
      unsigned int v236 = 0;
      char v64 = 0;
    }
    unint64_t v65 = v240;
    double v66 = 0.0;
    if (v49 == v50)
    {
LABEL_244:
      DgnArray<DgnArray<DgnPrimArray<int>>>::releaseAll((uint64_t)v255);
      BOOL v8 = v66 > 0.0;
      DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v256);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v258);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v259);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v260);
      DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v261);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v263);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v265);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v267);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v269);
      goto LABEL_245;
    }
    uint64_t v67 = 0;
    double v68 = 1.0 / (double)(1 << v64);
    double v69 = a7 * 256.0;
    int v235 = *(_DWORD *)(*(void *)(v58 + 272) + 4 * v17);
    while (1)
    {
      uint64_t v70 = (char *)v261 + 16 * v67;
      double v71 = *(double *)v70;
      double v72 = v69 * *(double *)v70 + 0.5;
      unsigned int v73 = v72;
      if (v72) {
        break;
      }
LABEL_243:
      if (++v67 == v65) {
        goto LABEL_244;
      }
    }
    uint64_t v241 = v67;
    int v74 = *((_DWORD *)v70 + 2);
    a1[7] += v73;
    if (v239) {
      AdaptStats::update(v239, *(_DWORD *)(*(void *)(*a1 + 416) + 4 * v237), v72, 256);
    }
    double v75 = (double)v73 + 0.5;
    if (v242 == 1)
    {
      PelMgr::unpackPelMixtureComponent(*a1, v238, v74, (uint64_t)v260, (uint64_t)v258);
    }
    else
    {
      if (!*((unsigned char *)a1 + 26)) {
        double v75 = (double)v73 * 40.7436654 + 0.5;
      }
      PelMgr::unpackPelMixtureComponent(*a1, v238, v74, (uint64_t)v260, (uint64_t)v259, (double)v73 * 40.7436654 + 0.5);
    }
    if (v252 || *((unsigned char *)a1 + 23))
    {
      int v77 = v265;
      unsigned int v78 = 1;
      *(_DWORD *)uint64_t v265 = 1;
      LODWORD(v79) = *((_DWORD *)a1 + 4);
      if (!v79) {
        goto LABEL_80;
      }
      unint64_t v80 = 0;
      uint64_t v81 = v260[0];
      do
      {
        v77[v80 + 1] = v81[v80];
        unint64_t v79 = *((unsigned int *)a1 + 4);
        ++v80;
      }
      while (v80 < v79);
      unsigned int v78 = v79 + 1;
      if (v79 == -1)
      {
        unsigned int v78 = 0;
        LODWORD(v79) = -1;
      }
      else
      {
LABEL_80:
        unsigned int v82 = 0;
        uint64_t v83 = 0;
        char v84 = v263;
        int v85 = 2;
        uint64_t v86 = 1;
        do
        {
          uint64_t v87 = 0;
          uint64_t v88 = v77[v83];
          uint64_t v89 = v83 + 1;
          do
          {
            if (v87 | v83) {
              char v90 = 15;
            }
            else {
              char v90 = 22;
            }
            if (v87) {
              BOOL v91 = v83 == 0;
            }
            else {
              BOOL v91 = 1;
            }
            if (!v91) {
              char v90 = 8;
            }
            v84[(v82 >> 1) + v87] = (v88 << v90) * v77[v87];
            ++v87;
          }
          while (v86 != v87);
          ++v86;
          v82 += v85;
          v85 += 2;
          ++v83;
        }
        while (v89 != v78);
      }
    }
    else
    {
      LODWORD(v79) = *((_DWORD *)a1 + 4);
      unsigned int v78 = v79 + 1;
    }
    int64_t v249 = ((unint64_t)v75 & 0x3FFFFFFFFFFFLL) << 10;
    unsigned int v253 = (v78 * (v79 + 2)) >> 1;
    unsigned int v254 = v78;
    if (v242 == 1)
    {
      int v92 = *((unsigned __int8 *)a1 + 20);
      if (*((unsigned char *)a1 + 20))
      {
        if (v79)
        {
          uint64_t v93 = 0;
          uint64_t v94 = (int *)v258[0];
          int v95 = (uint64_t *)v255[0];
          uint64_t v96 = v256;
          do
          {
            double v97 = 0.0;
            if (v236)
            {
              uint64_t v98 = v236;
              uint64_t v99 = v95;
              char v100 = v94;
              do
              {
                int v101 = *v100++;
                double v102 = (double)v101;
                uint64_t v103 = *v99;
                v99 += 2;
                double v76 = (double)*(int *)(*(void *)(v103 + 16 * v93) + 4 * v93);
                double v97 = v97 + v102 * v76;
                --v98;
              }
              while (v98);
            }
            *(double *)&v96[v93++] = v68 * v97;
          }
          while (v93 != v79);
          goto LABEL_156;
        }
      }
      else if (v79)
      {
        uint64_t v147 = 0;
        uint64_t v148 = v256;
        do
        {
          uint64_t v149 = 0;
          uint64_t v150 = (int *)v258[0];
          int v151 = (uint64_t *)v255[0];
          do
          {
            double v152 = 0.0;
            if (v236)
            {
              uint64_t v153 = v236;
              uint64_t v154 = v151;
              uint64_t v155 = v150;
              do
              {
                int v156 = *v155++;
                double v157 = (double)v156;
                uint64_t v158 = *v154;
                v154 += 2;
                double v76 = (double)*(int *)(*(void *)(v158 + 16 * v147) + 4 * v149);
                double v152 = v152 + v157 * v76;
                --v153;
              }
              while (v153);
            }
            *(double *)&v148[(v79 * v147 + v149++)] = v68 * v152;
          }
          while (v149 != v79);
          ++v147;
        }
        while (v147 != v79);
LABEL_156:
        BOOL v251 = *((unsigned char *)a1 + 24) != 0;
        BOOL v159 = v79 != 0;
        if (*((unsigned char *)a1 + 24)) {
          BOOL v160 = v79 == 0;
        }
        else {
          BOOL v160 = 1;
        }
        if (!v160)
        {
          int v161 = 0;
          uint64_t v162 = 0;
          uint64_t v163 = v256;
          uint64_t v164 = (unsigned int *)v260[0];
          if (v92) {
            BOOL v165 = *((unsigned char *)a1 + 25) == 0;
          }
          else {
            BOOL v165 = 1;
          }
          char v166 = v165;
          uint64_t v167 = v269;
          do
          {
            if (v92)
            {
              LODWORD(v76) = v164[v162];
              double v168 = *(double *)&v163[v162] * (double)*(unint64_t *)&v76;
            }
            else
            {
              double v168 = 0.0;
              uint64_t v169 = v79;
              uint64_t v170 = v164;
              int v171 = v161;
              do
              {
                unsigned int v172 = *v170++;
                double v168 = v168 + *(double *)&v163[v171++] * (double)v172;
                --v169;
              }
              while (v169);
            }
            if (v168 < 0.0) {
              double v76 = -0.5;
            }
            else {
              double v76 = 0.5;
            }
            uint64_t v173 = (uint64_t)(v76 + v168 * (double)v249);
            if (v166)
            {
              if (v78)
              {
                uint64_t v174 = 0;
                uint64_t v175 = *(void *)(a1[8] + 16 * v162);
                do
                {
                  if (v174) {
                    char v176 = 8;
                  }
                  else {
                    char v176 = 15;
                  }
                  *(void *)(v175 + 8 * v174) += ((v173 << v176) * v167[v174]) >> 18;
                  ++v174;
                }
                while (v78 != v174);
              }
            }
            else
            {
              uint64_t v177 = 0;
              uint64_t v178 = *(void *)(a1[8] + 16 * v162);
              char v179 = 1;
              char v180 = 15;
              do
              {
                char v181 = v179;
                *(void *)(v178 + 8 * v177) += ((v173 << v180) * v167[v177 * (v162 + 1)]) >> 18;
                char v180 = 8;
                uint64_t v177 = 1;
                char v179 = 0;
              }
              while ((v181 & 1) != 0);
            }
            ++v162;
            v161 += v79;
          }
          while (v162 != v79);
        }
        if (v252)
        {
LABEL_191:
          int v182 = 0;
          uint64_t v183 = 0;
          uint64_t v184 = v256;
          int v185 = v269;
          double v186 = (unsigned int *)v265;
          if (v79 <= 1) {
            uint64_t v187 = 1;
          }
          else {
            uint64_t v187 = v79;
          }
          do
          {
            if (v92)
            {
              LOBYTE(v76) = v185[v183 + 1];
              double v188 = *(double *)&v184[v183] * (double)*(unint64_t *)&v76;
            }
            else
            {
              double v188 = 0.0;
              uint64_t v189 = v185 + 1;
              uint64_t v190 = v187;
              int v191 = v182;
              do
              {
                unsigned int v192 = *v189++;
                double v188 = v188 + *(double *)&v184[v191++] * (double)v192;
                --v190;
              }
              while (v190);
            }
            if (v188 < 0.0) {
              double v76 = -0.5;
            }
            else {
              double v76 = 0.5;
            }
            if (v78)
            {
              uint64_t v193 = 0;
              double v194 = v76 + v188 * (double)v249;
              uint64_t v195 = *(void *)(a1[16] + 16 * v183);
              do
              {
                if (v193) {
                  char v196 = 8;
                }
                else {
                  char v196 = 15;
                }
                *(void *)(v195 + 8 * v193) += (((uint64_t)v194 << v196) * v186[v193]) >> 18;
                ++v193;
              }
              while (v78 != v193);
            }
            ++v183;
            v182 += v79;
          }
          while (v183 != v187);
LABEL_208:
          uint64_t v197 = *((unsigned int *)a1 + 24);
          if (v197)
          {
            int v198 = 0;
            int v199 = 0;
            uint64_t v200 = 0;
            int v201 = 0;
            unsigned int v202 = 0;
            uint64_t v203 = v256;
            uint64_t v204 = v267;
            uint64_t v205 = v263;
            if (v78 <= 1) {
              int v206 = 1;
            }
            else {
              int v206 = v78;
            }
            int v207 = 1;
            while (1)
            {
              if (v92)
              {
                int v208 = v200;
              }
              else
              {
                int v208 = v201 + v202 * v79;
                if (v201 + 1 <= v202)
                {
                  ++v201;
                }
                else
                {
                  ++v202;
                  int v201 = 0;
                }
              }
              double v209 = *(double *)&v203[v208];
              uint64_t v210 = v207 & 0x7FFFFFFF;
              if (v209 < 0.0) {
                double v211 = -0.5;
              }
              else {
                double v211 = 0.5;
              }
              uint64_t v212 = (uint64_t)(v211 + v209 * (double)v249);
              if (!v251) {
                goto LABEL_234;
              }
              if (v92 && *((unsigned char *)a1 + 25)) {
                break;
              }
              if (v78)
              {
                unsigned int v221 = 0;
                int v222 = 0;
                uint64_t v223 = a1[10];
                int v224 = 2;
                uint64_t v225 = 1;
                do
                {
                  uint64_t v226 = 0;
                  ++v222;
                  do
                  {
                    *(void *)(v223 + 8 * (v198 + (v221 >> 1) + v226)) += (v204[(v221 >> 1)
                                                                                               + v226]
                                                                                          * v212) >> 18;
                    ++v226;
                  }
                  while (v225 != v226);
                  ++v225;
                  v221 += v224;
                  v224 += 2;
                  unsigned int v78 = v254;
                }
                while (v222 != v254);
LABEL_234:
                if ((v252 || *((unsigned char *)a1 + 23)) && v78)
                {
                  unsigned int v227 = 0;
                  int v228 = 0;
                  uint64_t v229 = a1[18];
                  int v230 = 2;
                  uint64_t v231 = 1;
                  do
                  {
                    unsigned int v232 = v227 >> 1;
                    ++v228;
                    uint64_t v233 = v231;
                    do
                    {
                      *(void *)(v229 + 8 * (v198 + v232)) += (v205[v232] * v212) >> 18;
                      ++v232;
                      --v233;
                    }
                    while (v233);
                    ++v231;
                    v227 += v230;
                    v230 += 2;
                  }
                  while (v228 != v206);
                }
              }
              ++v200;
              v199 += 3;
              int v207 = v210 + 1;
              v198 += v253;
              if (v200 == v197) {
                goto LABEL_242;
              }
            }
            uint64_t v213 = 0;
            uint64_t v214 = a1[10];
            char v215 = 1;
            uint64_t v216 = 1;
            do
            {
              uint64_t v217 = 0;
              char v218 = v215;
              int v219 = v199 + ((v213 + v213 * v213) >> 1);
              uint64_t v220 = (char *)v204 + 16 * v210 * v213;
              do
              {
                *(void *)(v214 + 8 * (v219 + v217)) += (*(void *)&v220[8 * v217] * v212) >> 18;
                ++v217;
              }
              while (v216 != v217);
              char v215 = 0;
              ++v216;
              uint64_t v213 = 1;
            }
            while ((v218 & 1) != 0);
            goto LABEL_234;
          }
          goto LABEL_242;
        }
LABEL_189:
        if (!*((unsigned char *)a1 + 23) || !v159) {
          goto LABEL_208;
        }
        goto LABEL_191;
      }
      BOOL v251 = *((unsigned char *)a1 + 24) != 0;
      if (v252) {
        goto LABEL_208;
      }
      BOOL v159 = 0;
      goto LABEL_189;
    }
    if (!v79)
    {
LABEL_242:
      double v66 = v66 + v71;
      unint64_t v65 = v240;
      uint64_t v67 = v241;
      if (v66 > a8) {
        goto LABEL_244;
      }
      goto LABEL_243;
    }
    int v104 = 0;
    int v105 = 0;
    unint64_t v106 = 0;
    uint64_t v248 = v259[0];
    int v250 = *((unsigned __int8 *)a1 + 27);
    int v243 = v74 + v235;
    uint64_t v245 = (unsigned int *)v260[0];
    int v247 = *((unsigned __int8 *)a1 + 24);
    double v107 = v269;
    uint64_t v246 = v79;
    double v108 = v267;
    uint64_t v244 = v271[0];
    uint64_t v109 = v78;
    int v110 = 2;
    uint64_t v111 = (unsigned int *)v265;
    while (1)
    {
      unint64_t v112 = (*(_DWORD *)(v248 + 4 * v106) * *(_DWORD *)(v248 + 4 * v106));
      unint64_t v113 = v249 + (v112 >> 1);
      unint64_t v114 = v113 / v112;
      if (v250)
      {
        uint64_t v115 = v113 / v112;
        if (v106 < *((unsigned int *)a1 + 8)) {
          uint64_t v115 = (uint64_t)((double)(unint64_t)v249
        }
                         * *(double *)(*(void *)(a1[5] + 8) + 8 * (v243 + *(_DWORD *)a1[5] * v106))
                         + 0.5);
      }
      else
      {
        uint64_t v115 = v113 / v112;
      }
      if (!v247) {
        goto LABEL_119;
      }
      uint64_t v116 = v245[v106];
      unint64_t v117 = v114 * v116;
      if (*((unsigned char *)a1 + 25))
      {
        if (!*((unsigned char *)a1 + 26))
        {
          uint64_t v118 = 0;
          uint64_t v119 = *(void *)(a1[8] + 16 * v106);
          uint64_t v120 = a1[10];
          char v121 = 1;
          char v122 = 15;
          uint64_t v123 = 1;
          do
          {
            uint64_t v124 = 0;
            *(void *)(v119 + 8 * v118) += (uint64_t)(((unint64_t)v107[v118 * (v106 + 1)] << v122)
                                                    * v117) >> 18;
            char v125 = v121;
            do
            {
              *(void *)(v120 + 8 * (v105 + ((v118 + v118 * v118) >> 1) + v124)) += (uint64_t)(v108[2 * ((v110 * v118) >> 1) + v124] * v114) >> 18;
              ++v124;
            }
            while (v123 != v124);
            char v121 = 0;
            ++v123;
            char v122 = 8;
            uint64_t v118 = 1;
          }
          while ((v125 & 1) != 0);
          goto LABEL_119;
        }
      }
      else if (!*((unsigned char *)a1 + 26))
      {
        if (v250) {
          BOOL v137 = v106 < *((unsigned int *)a1 + 8);
        }
        else {
          BOOL v137 = 1;
        }
        if (v254)
        {
          unsigned int v138 = 0;
          uint64_t v139 = 0;
          uint64_t v140 = *(void *)(a1[8] + 16 * v106);
          int v141 = 2;
          uint64_t v142 = v267;
          uint64_t v143 = 1;
          do
          {
            if (v139) {
              char v144 = 8;
            }
            else {
              char v144 = 15;
            }
            *(void *)(v140 + 8 * v139) += (uint64_t)(((unint64_t)v107[v139] << v144) * v117) >> 18;
            if (v137)
            {
              uint64_t v145 = 0;
              uint64_t v146 = a1[10];
              do
              {
                *(void *)(v146 + 8 * (v104 + (v138 >> 1) + v145)) += (v142[(v138 >> 1)
                                                                                           + v145]
                                                                                      * v115) >> 18;
                ++v145;
              }
              while (v143 != v145);
            }
            ++v139;
            ++v143;
            v138 += v141;
            v141 += 2;
          }
          while (v139 != v109);
        }
        goto LABEL_119;
      }
      *(void *)(a1[13] + 8 * v106) += (uint64_t)(((unint64_t)v75 << 25)
                                                * (*(unsigned __int8 *)(v244 + v106) - v116)) >> 18;
LABEL_119:
      if (v252 || *((unsigned char *)a1 + 23))
      {
        BOOL v126 = !v250 || v106 < *((unsigned int *)a1 + 8);
        if (v254)
        {
          unsigned int v127 = 0;
          uint64_t v128 = 0;
          uint64_t v129 = *(void *)(a1[16] + 16 * v106);
          int v130 = 2;
          int v131 = v263;
          uint64_t v132 = 1;
          do
          {
            if (v128) {
              char v133 = 8;
            }
            else {
              char v133 = 15;
            }
            *(void *)(v129 + 8 * v128) += (uint64_t)(((unint64_t)v107[v106 + 1] << v133)
                                                    * v114
                                                    * v111[v128]) >> 18;
            if (v126)
            {
              unsigned int v134 = v127 >> 1;
              uint64_t v135 = a1[18];
              uint64_t v136 = v132;
              do
              {
                *(void *)(v135 + 8 * (v104 + v134)) += (v131[v134] * v115) >> 18;
                ++v134;
                --v136;
              }
              while (v136);
            }
            ++v128;
            ++v132;
            v127 += v130;
            v130 += 2;
          }
          while (v128 != v109);
        }
      }
      ++v106;
      v105 += 3;
      v110 += 2;
      v104 += v253;
      if (v106 == v246) {
        goto LABEL_242;
      }
    }
  }
  return 0;
}

void sub_213E1D72C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,char a46,uint64_t a47,char a48)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a44);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a46);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a48);
  DgnPrimFixArray<double>::~DgnPrimFixArray(v48 - 168);
  _Unwind_Resume(a1);
}

unint64_t mrec_qsort_r<CompAndProb>(unint64_t result, unint64_t a2, int64_t a3, __n128 a4)
{
  int64_t v5 = -a3;
  BOOL v6 = a3 != 8;
  BOOL v7 = ((result | a3) & 7) == 0;
  if (((result | a3) & 7) != 0) {
    int v8 = 2;
  }
  else {
    int v8 = a3 != 8;
  }
  if (a2 < 7)
  {
LABEL_5:
    if ((uint64_t)(a2 * a3) > a3)
    {
      unint64_t v9 = result + a2 * a3;
      unint64_t v10 = result + a3;
      unint64_t v11 = result;
      do
      {
        if (v10 > result)
        {
          unint64_t v12 = v11;
          unint64_t v13 = v10;
          do
          {
            unint64_t v14 = v13;
            v13 += v5;
            double v15 = *(double *)v14;
            if (*(double *)v13 == *(double *)v14)
            {
              if (*(_DWORD *)(v13 + 8) <= *(_DWORD *)(v14 + 8)) {
                break;
              }
            }
            else if (*(double *)v13 > *(double *)v14)
            {
              break;
            }
            if (v8)
            {
              uint64_t v16 = 0;
              unint64_t v17 = v12 + a3;
              if (v7)
              {
                do
                {
                  uint64_t v18 = *(void *)(v17 + 8 * v16);
                  *(void *)(v17 + 8 * v16) = *(void *)(v12 + 8 * v16);
                  *(void *)(v12 + 8 * v16++) = v18;
                }
                while ((unint64_t)a3 >> 3 != v16);
              }
              else
              {
                do
                {
                  char v19 = *(unsigned char *)(v17 + v16);
                  *(unsigned char *)(v17 + v16) = *(unsigned char *)(v12 + v16);
                  *(unsigned char *)(v12 + v16++) = v19;
                }
                while (a3 != v16);
              }
            }
            else
            {
              *(void *)unint64_t v14 = *(void *)v13;
              *(double *)unint64_t v13 = v15;
            }
            v12 += v5;
          }
          while (v13 > result);
        }
        v10 += a3;
        v11 += a3;
      }
      while (v10 < v9);
    }
    return result;
  }
  unint64_t v20 = (unint64_t)a3 >> 3;
  while (2)
  {
    uint64_t v21 = (unsigned char *)(result + (a2 >> 1) * a3);
    if (a2 == 7) {
      goto LABEL_25;
    }
    unint64_t v25 = result + (a2 - 1) * a3;
    if (a2 < 0x29)
    {
      unint64_t v27 = result;
      goto LABEL_110;
    }
    unint64_t v26 = (a2 >> 3) * a3;
    unint64_t v27 = result + v26;
    unint64_t v28 = result + 2 * v26;
    double v29 = *(double *)result;
    double v30 = *(double *)(result + v26);
    if (*(double *)result == v30)
    {
      if (*(_DWORD *)(result + 8) < *(_DWORD *)(v27 + 8)) {
        goto LABEL_33;
      }
    }
    else if (*(double *)result > v30)
    {
LABEL_33:
      double v31 = *(double *)v28;
      if (v30 == *(double *)v28)
      {
        if (*(_DWORD *)(v27 + 8) < *(_DWORD *)(v28 + 8)) {
          goto LABEL_127;
        }
      }
      else if (v30 > *(double *)v28)
      {
        goto LABEL_127;
      }
      if (v29 == v31)
      {
        unint64_t v27 = result + 2 * v26;
        if (*(_DWORD *)(result + 8) < *(_DWORD *)(v28 + 8)) {
          goto LABEL_127;
        }
      }
      else
      {
        unint64_t v27 = result + 2 * v26;
        if (v29 > v31) {
          goto LABEL_127;
        }
      }
      unint64_t v27 = result;
      goto LABEL_127;
    }
    double v76 = *(double *)v28;
    if (v30 == *(double *)v28)
    {
      if (*(_DWORD *)(v27 + 8) > *(_DWORD *)(v28 + 8)) {
        goto LABEL_127;
      }
    }
    else if (v30 <= *(double *)v28)
    {
      goto LABEL_127;
    }
    if (v29 != v76)
    {
      unint64_t v27 = result;
      if (v29 > v76) {
        goto LABEL_127;
      }
      goto LABEL_126;
    }
    unint64_t v27 = result;
    if (*(_DWORD *)(result + 8) >= *(_DWORD *)(v28 + 8)) {
LABEL_126:
    }
      unint64_t v27 = result + 2 * v26;
LABEL_127:
    int v77 = &v21[-v26];
    unsigned int v78 = &v21[v26];
    double v79 = *(double *)&v21[-v26];
    double v80 = *(double *)v21;
    if (v79 == *(double *)v21)
    {
      if (*((_DWORD *)v77 + 2) < *((_DWORD *)v21 + 2)) {
        goto LABEL_129;
      }
    }
    else if (v79 > *(double *)v21)
    {
LABEL_129:
      double v81 = *(double *)v78;
      if (v80 == *(double *)v78)
      {
        if (*((_DWORD *)v21 + 2) < *((_DWORD *)v78 + 2)) {
          goto LABEL_148;
        }
      }
      else if (v80 > *(double *)v78)
      {
        goto LABEL_148;
      }
      if (v79 == v81)
      {
        v21 += v26;
        if (*((_DWORD *)v77 + 2) < *((_DWORD *)v78 + 2)) {
          goto LABEL_148;
        }
      }
      else
      {
        v21 += v26;
        if (v79 > v81) {
          goto LABEL_148;
        }
      }
      uint64_t v21 = v77;
      goto LABEL_148;
    }
    double v82 = *(double *)v78;
    if (v80 == *(double *)v78)
    {
      if (*((_DWORD *)v21 + 2) > *((_DWORD *)v78 + 2)) {
        goto LABEL_148;
      }
    }
    else if (v80 <= *(double *)v78)
    {
      goto LABEL_148;
    }
    if (v79 != v82)
    {
      v21 -= v26;
      if (v79 > v82) {
        goto LABEL_148;
      }
      goto LABEL_147;
    }
    v21 -= v26;
    if (*((_DWORD *)v77 + 2) >= *((_DWORD *)v78 + 2)) {
LABEL_147:
    }
      uint64_t v21 = v78;
LABEL_148:
    uint64_t v83 = -(uint64_t)v26;
    unint64_t v75 = v25 - 2 * v26;
    unint64_t v84 = v25 + v83;
    double v85 = *(double *)v75;
    double v86 = *(double *)(v25 + v83);
    if (*(double *)v75 == v86)
    {
      if (*(_DWORD *)(v75 + 8) < *(_DWORD *)(v84 + 8)) {
        goto LABEL_150;
      }
LABEL_154:
      double v88 = *(double *)v25;
      if (v86 == *(double *)v25)
      {
        if (*(_DWORD *)(v84 + 8) > *(_DWORD *)(v25 + 8)) {
          goto LABEL_165;
        }
      }
      else if (v86 <= *(double *)v25)
      {
        goto LABEL_165;
      }
      if (v85 == v88)
      {
        if (*(_DWORD *)(v75 + 8) >= *(_DWORD *)(v25 + 8)) {
          goto LABEL_110;
        }
      }
      else if (v85 <= v88)
      {
        goto LABEL_110;
      }
      goto LABEL_166;
    }
    if (*(double *)v75 <= v86) {
      goto LABEL_154;
    }
LABEL_150:
    double v87 = *(double *)v25;
    if (v86 == *(double *)v25)
    {
      if (*(_DWORD *)(v84 + 8) < *(_DWORD *)(v25 + 8)) {
        goto LABEL_165;
      }
      goto LABEL_158;
    }
    if (v86 > *(double *)v25)
    {
LABEL_165:
      unint64_t v75 = v25 + v83;
      goto LABEL_166;
    }
LABEL_158:
    if (v85 == v87)
    {
      if (*(_DWORD *)(v75 + 8) >= *(_DWORD *)(v25 + 8)) {
        goto LABEL_166;
      }
LABEL_110:
      unint64_t v75 = result + (a2 - 1) * a3;
      goto LABEL_166;
    }
    if (v85 > v87) {
      goto LABEL_110;
    }
LABEL_166:
    a4.n128_u64[0] = *(void *)v27;
    double v89 = *(double *)v21;
    if (*(double *)v27 == *(double *)v21)
    {
      if (*(_DWORD *)(v27 + 8) < *((_DWORD *)v21 + 2)) {
        goto LABEL_168;
      }
LABEL_172:
      double v91 = *(double *)v75;
      if (v89 == *(double *)v75)
      {
        if (*((_DWORD *)v21 + 2) > *(_DWORD *)(v75 + 8)) {
          goto LABEL_25;
        }
      }
      else if (v89 <= *(double *)v75)
      {
        goto LABEL_25;
      }
      if (a4.n128_f64[0] == v91)
      {
        uint64_t v21 = (unsigned char *)v27;
        if (*(_DWORD *)(v27 + 8) < *(_DWORD *)(v75 + 8)) {
          goto LABEL_25;
        }
      }
      else
      {
        uint64_t v21 = (unsigned char *)v27;
        if (a4.n128_f64[0] > v91) {
          goto LABEL_25;
        }
      }
      uint64_t v21 = (unsigned char *)v75;
      goto LABEL_25;
    }
    if (*(double *)v27 <= *(double *)v21) {
      goto LABEL_172;
    }
LABEL_168:
    double v90 = *(double *)v75;
    if (v89 == *(double *)v75)
    {
      if (*((_DWORD *)v21 + 2) < *(_DWORD *)(v75 + 8)) {
        goto LABEL_25;
      }
    }
    else if (v89 > *(double *)v75)
    {
      goto LABEL_25;
    }
    if (a4.n128_f64[0] == v90)
    {
      uint64_t v21 = (unsigned char *)v75;
      if (*(_DWORD *)(v27 + 8) >= *(_DWORD *)(v75 + 8)) {
        goto LABEL_184;
      }
    }
    else
    {
      uint64_t v21 = (unsigned char *)v75;
      if (a4.n128_f64[0] <= v90) {
LABEL_184:
      }
        uint64_t v21 = (unsigned char *)v27;
    }
LABEL_25:
    if (v8)
    {
      if (v7)
      {
        int v22 = (uint64_t *)result;
        unint64_t v23 = (unint64_t)a3 >> 3;
        do
        {
          uint64_t v24 = *v22;
          *v22++ = *(void *)v21;
          *(void *)uint64_t v21 = v24;
          v21 += 8;
          --v23;
        }
        while (v23);
      }
      else
      {
        int64_t v33 = a3;
        uint64_t v34 = (char *)result;
        do
        {
          char v35 = *v34;
          *v34++ = *v21;
          *v21++ = v35;
          --v33;
        }
        while (v33);
      }
    }
    else
    {
      double v32 = *(double *)result;
      *(void *)double result = *(void *)v21;
      *(double *)uint64_t v21 = v32;
    }
    int v36 = 0;
    unint64_t v37 = result + a3;
    uint64_t v38 = (unint64_t *)(result + (a2 - 1) * a3);
    uint64_t v39 = v38;
    int v40 = (unint64_t *)(result + a3);
    unsigned int v41 = (void *)(result + a3);
    while (1)
    {
LABEL_40:
      if (v40 > v39) {
        goto LABEL_56;
      }
      a4.n128_u64[0] = *v40;
      if (*(double *)v40 == *(double *)result) {
        break;
      }
      if (*(double *)v40 <= *(double *)result) {
        goto LABEL_56;
      }
LABEL_76:
      int v40 = (unint64_t *)((char *)v40 + a3);
    }
    unsigned int v42 = *((_DWORD *)v40 + 2);
    unsigned int v43 = *(_DWORD *)(result + 8);
    if (v42 == v43)
    {
      if (v8)
      {
        uint64_t v44 = 0;
        if (v7)
        {
          do
          {
            unint64_t v45 = v41[v44];
            v41[v44] = v40[v44];
            v40[v44++] = v45;
          }
          while (v20 != v44);
        }
        else
        {
          do
          {
            char v46 = *((unsigned char *)v41 + v44);
            *((unsigned char *)v41 + v44) = *((unsigned char *)v40 + v44);
            *((unsigned char *)v40 + v44++) = v46;
          }
          while (a3 != v44);
        }
      }
      else
      {
        unint64_t v55 = *v41;
        void *v41 = a4.n128_u64[0];
        unint64_t *v40 = v55;
      }
      unsigned int v41 = (void *)((char *)v41 + a3);
      int v36 = 1;
      goto LABEL_76;
    }
    if (v42 < v43) {
      goto LABEL_76;
    }
LABEL_56:
    while (v40 <= v39)
    {
      a4.n128_u64[0] = *v39;
      if (*(double *)v39 == *(double *)result)
      {
        unsigned int v47 = *((_DWORD *)v39 + 2);
        unsigned int v48 = *(_DWORD *)(result + 8);
        if (v47 == v48)
        {
          if (v8)
          {
            uint64_t v49 = 0;
            if (v7)
            {
              do
              {
                unint64_t v50 = v39[v49];
                v39[v49] = v38[v49];
                v38[v49++] = v50;
              }
              while (v20 != v49);
            }
            else
            {
              do
              {
                char v51 = *((unsigned char *)v39 + v49);
                *((unsigned char *)v39 + v49) = *((unsigned char *)v38 + v49);
                *((unsigned char *)v38 + v49++) = v51;
              }
              while (a3 != v49);
            }
          }
          else
          {
            unint64_t *v39 = *v38;
            unint64_t *v38 = a4.n128_u64[0];
          }
          uint64_t v38 = (unint64_t *)((char *)v38 + v5);
          int v36 = 1;
        }
        else if (v47 < v48)
        {
LABEL_68:
          if (v8)
          {
            uint64_t v52 = 0;
            if (v7)
            {
              do
              {
                unint64_t v53 = v40[v52];
                v40[v52] = v39[v52];
                v39[v52++] = v53;
              }
              while (v20 != v52);
            }
            else
            {
              do
              {
                char v54 = *((unsigned char *)v40 + v52);
                *((unsigned char *)v40 + v52) = *((unsigned char *)v39 + v52);
                *((unsigned char *)v39 + v52++) = v54;
              }
              while (a3 != v52);
            }
          }
          else
          {
            unint64_t v56 = *v40;
            unint64_t *v40 = a4.n128_u64[0];
            unint64_t *v39 = v56;
          }
          int v40 = (unint64_t *)((char *)v40 + a3);
          uint64_t v39 = (unint64_t *)((char *)v39 + v5);
          int v36 = 1;
          goto LABEL_40;
        }
      }
      else if (*(double *)v39 > *(double *)result)
      {
        goto LABEL_68;
      }
      uint64_t v39 = (unint64_t *)((char *)v39 + v5);
    }
    unint64_t v57 = result + a2 * a3;
    if (v36)
    {
      int64_t v58 = (char *)v40 - (char *)v41;
      if ((uint64_t)((uint64_t)v41 - result) >= (char *)v40 - (char *)v41) {
        unint64_t v59 = (char *)v40 - (char *)v41;
      }
      else {
        unint64_t v59 = (unint64_t)v41 - result;
      }
      if (v59)
      {
        if (v7)
        {
          int v60 = (uint64_t *)((char *)v40 - v59);
          unint64_t v61 = v59 >> 3;
          int v62 = (uint64_t *)result;
          do
          {
            uint64_t v63 = *v62;
            *v62++ = *v60;
            *v60++ = v63;
            --v61;
          }
          while (v61);
        }
        else
        {
          uint64_t v64 = -(uint64_t)v59;
          unint64_t v65 = (char *)result;
          do
          {
            char v66 = *v65;
            *v65++ = *((unsigned char *)v40 + v64);
            *((unsigned char *)v40 + vDgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 64) = v66;
            BOOL v67 = __CFADD__(v64++, 1);
          }
          while (!v67);
        }
      }
      int64_t v68 = (char *)v38 - (char *)v39;
      unint64_t v69 = v57 - ((void)v38 + a3);
      if ((char *)v38 - (char *)v39 < (uint64_t)v69) {
        unint64_t v69 = (char *)v38 - (char *)v39;
      }
      if (v69)
      {
        if (v7)
        {
          uint64_t v70 = (unint64_t *)(v57 - v69);
          unint64_t v71 = v69 >> 3;
          do
          {
            unint64_t v72 = *v40;
            *v40++ = *v70;
            *v70++ = v72;
            --v71;
          }
          while (v71);
        }
        else
        {
          uint64_t v73 = -(uint64_t)v69;
          do
          {
            char v74 = *(unsigned char *)v40;
            *(unsigned char *)int v40 = *(unsigned char *)(v57 + v73);
            int v40 = (unint64_t *)((char *)v40 + 1);
            *(unsigned char *)(v57 + v73) = v74;
            BOOL v67 = __CFADD__(v73++, 1);
          }
          while (!v67);
        }
      }
      if (v58 > a3) {
        double result = mrec_qsort_r<CompAndProb>(a4);
      }
      if (v68 > a3)
      {
        double result = v57 - v68;
        a2 = v68 / (unint64_t)a3;
        BOOL v7 = (((v57 - v68) | a3) & 7) == 0;
        if ((((v57 - v68) | a3) & 7) != 0) {
          int v8 = 2;
        }
        else {
          int v8 = v6;
        }
        if (a2 < 7) {
          goto LABEL_5;
        }
        continue;
      }
    }
    else if ((uint64_t)(a2 * a3) > a3)
    {
      unint64_t v92 = result;
      do
      {
        if (v37 > result)
        {
          unint64_t v93 = v92;
          unint64_t v94 = v37;
          do
          {
            unint64_t v95 = v94;
            v94 += v5;
            double v96 = *(double *)v95;
            if (*(double *)v94 == *(double *)v95)
            {
              if (*(_DWORD *)(v94 + 8) <= *(_DWORD *)(v95 + 8)) {
                break;
              }
            }
            else if (*(double *)v94 > *(double *)v95)
            {
              break;
            }
            if (v8)
            {
              uint64_t v97 = 0;
              unint64_t v98 = v93 + a3;
              if (v7)
              {
                do
                {
                  uint64_t v99 = *(void *)(v98 + 8 * v97);
                  *(void *)(v98 + 8 * v97) = *(void *)(v93 + 8 * v97);
                  *(void *)(v93 + 8 * v97++) = v99;
                }
                while (v20 != v97);
              }
              else
              {
                do
                {
                  char v100 = *(unsigned char *)(v98 + v97);
                  *(unsigned char *)(v98 + v97) = *(unsigned char *)(v93 + v97);
                  *(unsigned char *)(v93 + v97++) = v100;
                }
                while (a3 != v97);
              }
            }
            else
            {
              *(void *)unint64_t v95 = *(void *)v94;
              *(double *)unint64_t v94 = v96;
            }
            v93 += v5;
          }
          while (v94 > result);
        }
        v37 += a3;
        v92 += a3;
      }
      while (v37 < v57);
    }
    return result;
  }
}

uint64_t CTPelAccum::addModelRelevance(uint64_t result, void *a2, unsigned int a3)
{
  int v3 = *(_DWORD *)(*(void *)result + 16);
  BOOL v4 = v3 == 1 && *(unsigned char *)(result + 20) == 0;
  uint64_t v5 = *(void *)(result + 56);
  if ((unint64_t)((double)v5 * 0.00390625 + 0.5) < a3)
  {
    *(void *)(result + 56) = *a2 + v5;
    if (!*(unsigned char *)(result + 25)) {
      BOOL v4 = 1;
    }
    BOOL v6 = !v4 && *(unsigned char *)(result + 21) == 0;
    if (*(unsigned char *)(result + 24))
    {
      if (!*(unsigned char *)(result + 26))
      {
        BOOL v7 = v3 == 1 && *(unsigned char *)(result + 20) == 0;
        if (!*(unsigned char *)(result + 25)) {
          BOOL v7 = 1;
        }
        uint64_t v8 = *(unsigned int *)(result + 16);
        if (v7) {
          uint64_t v9 = (v8 + 1);
        }
        else {
          uint64_t v9 = 2;
        }
        if (v8)
        {
          uint64_t v10 = 0;
          do
          {
            if (v9)
            {
              uint64_t v11 = 0;
              uint64_t v12 = 16 * v10;
              uint64_t v13 = v10 + 1;
              if (v6) {
                uint64_t v14 = v10 + 1;
              }
              else {
                uint64_t v14 = 1;
              }
              uint64_t v15 = *(void *)(a2[1] + v12);
              uint64_t v16 = *(void **)(*(void *)(result + 64) + v12);
              uint64_t v17 = v9;
              do
              {
                *v16++ += *(void *)(v15 + 8 * v11);
                v11 += v14;
                --v17;
              }
              while (v17);
            }
            else
            {
              uint64_t v13 = v10 + 1;
            }
            uint64_t v10 = v13;
          }
          while (v13 != v8);
        }
        uint64_t v18 = *(unsigned int *)(result + 96);
        if (v18)
        {
          int v19 = 0;
          uint64_t v20 = 0;
          do
          {
            uint64_t v21 = v20 + 1;
            if (v9)
            {
              unsigned int v22 = 0;
              uint64_t v23 = 0;
              if (v6) {
                int v24 = v20 + 1;
              }
              else {
                int v24 = 1;
              }
              uint64_t v25 = *(void *)(a2[3] + 16 * v20);
              uint64_t v26 = *(void *)(result + 80);
              int v27 = 2;
              uint64_t v28 = 1;
              do
              {
                unsigned int v29 = 0;
                uint64_t v30 = 0;
                uint64_t v31 = *(void *)(v25 + 16 * (v24 * v23++));
                do
                {
                  *(void *)(v26 + 8 * (v19 + (v22 >> 1) + v30++)) += *(void *)(v31 + 8 * v29);
                  v29 += v24;
                }
                while (v28 != v30);
                ++v28;
                v22 += v27;
                v27 += 2;
              }
              while (v23 != v9);
            }
            v19 += (v9 + v9 * v9) >> 1;
            uint64_t v20 = v21;
          }
          while (v21 != v18);
        }
      }
      if (!*(unsigned char *)(result + 21)) {
        goto LABEL_44;
      }
    }
    if (*(unsigned char *)(result + 23))
    {
LABEL_44:
      uint64_t v32 = *(unsigned int *)(result + 16);
      if (v32)
      {
        uint64_t v33 = 0;
        int v34 = v32 + 1;
        do
        {
          if (v32 != -1)
          {
            char v35 = *(uint64_t **)(a2[1] + 16 * v33);
            int v36 = *(void **)(*(void *)(result + 128) + 16 * v33);
            uint64_t v37 = (v32 + 1);
            do
            {
              uint64_t v38 = *v35++;
              *v36++ += v38;
              --v37;
            }
            while (v37);
          }
          ++v33;
        }
        while (v33 != v32);
      }
      else
      {
        int v34 = 1;
      }
      uint64_t v39 = *(unsigned int *)(result + 160);
      if (v39)
      {
        int v40 = 0;
        uint64_t v41 = 0;
        unsigned int v42 = (v34 * (v32 + 2)) >> 1;
        do
        {
          if (v34)
          {
            unsigned int v43 = 0;
            uint64_t v44 = 0;
            uint64_t v45 = *(void *)(a2[3] + 16 * v41);
            uint64_t v46 = *(void *)(result + 144);
            int v47 = 2;
            uint64_t v48 = 1;
            do
            {
              uint64_t v49 = 0;
              uint64_t v50 = *(void *)(v45 + 16 * v44++);
              do
              {
                *(void *)(v46 + 8 * (v40 + (v43 >> 1) + v49)) += *(void *)(v50 + 8 * v49);
                ++v49;
              }
              while (v48 != v49);
              ++v48;
              v43 += v47;
              v47 += 2;
            }
            while (v44 != v34);
          }
          ++v41;
          v40 += v42;
        }
        while (v41 != v39);
      }
    }
  }
  return result;
}

double ConstrainedTransAccMgr::ConstrainedTransAccMgr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = 0;
  return result;
}

void ConstrainedTransAccMgr::~ConstrainedTransAccMgr(CTModelRelevance **this)
{
  ConstrainedTransAccMgr::releaseAccum(this);
  uint64_t v2 = this[7];
  if (v2)
  {
    MemChunkFree(v2, 0);
    this[7] = 0;
  }
  this[8] = 0;
  this[1] = 0;
  this[2] = 0;
  *this = 0;
  int v3 = this[3];
  if (v3) {
    CTFTMgr::resetOnlineCTList(v3);
  }
  this[3] = 0;
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(this + 7));
  DgnIOwnArray<CTPelAccum *>::releaseAll((uint64_t)(this + 5));
}

GenoneClassTree *ConstrainedTransAccMgr::releaseAccum(CTModelRelevance **this)
{
  DgnDelete<CTModelRelevance>(this[4]);
  this[4] = 0;
  DgnIOwnArray<CTPelAccum *>::releaseAll((uint64_t)(this + 5));
  double result = this[2];
  if (result)
  {
    return (GenoneClassTree *)GenoneClassTree::release(result);
  }
  return result;
}

void *CTFTMgr::resetOnlineCTList(CTFTMgr *this)
{
  DgnArray<LinearTransform>::releaseAll((uint64_t)this + 224);
  double result = (void *)*((void *)this + 30);
  if (result)
  {
    double result = (void *)MemChunkFree(result, 0);
    *((void *)this + 30) = 0;
  }
  *((void *)this + 31) = 0;
  *((_DWORD *)this + 54) = 0;
  *((_DWORD *)this + 4) = 0;
  return result;
}

uint64_t ConstrainedTransAccMgr::initAccum(ConstrainedTransAccMgr *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v49 = a2;
  if (a2)
  {
    uint64_t v52 = *(PelMgr **)((*(uint64_t (**)(void))(**((void **)this + 1) + 200))(*((void *)this + 1)) + 56);
    uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 208))(*((void *)this + 1));
    uint64_t v10 = result;
    int v11 = 0;
    BOOL v12 = 0;
    char v13 = 0;
    char v14 = 1;
    BOOL v50 = 1;
    BOOL v51 = 1;
    BOOL v15 = 1;
    unsigned int v16 = 1;
  }
  else
  {
    uint64_t PelMgr = AdaptController::getPelMgr(*(AdaptController **)this, a2, a3, a4, a5, a6, a7, a8);
    uint64_t v20 = *(void **)this;
    uint64_t v10 = *(void *)(*(void *)this + 32);
    uint64_t v52 = (PelMgr *)PelMgr;
    int v21 = *(_DWORD *)(PelMgr + 16);
    unsigned int v22 = *(unsigned __int8 **)(*(void *)this + 8);
    BOOL v50 = v22[96] != 0;
    BOOL v51 = v22[332] != 0;
    int v23 = v22[81];
    int v24 = v22[82];
    if (!(v24 | v23))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/contrnac.cpp", 2383, (uint64_t)"recogctl/contrnac", 2, (uint64_t)"%s", v18, v19, (char)&errStr_recogctl_contrnac_E_IDENTITY_TRANSFORM);
      unsigned int v22 = *(unsigned __int8 **)(*(void *)this + 8);
    }
    if (v23) {
      BOOL v25 = 1;
    }
    else {
      BOOL v25 = v24 == 0;
    }
    char v13 = !v25;
    int v26 = v22[83];
    char v14 = v22[83] != 0;
    BOOL v15 = *((_WORD *)v20 + 26) != 0;
    BOOL v12 = *((unsigned char *)v20 + 48) != 0;
    if (*((unsigned char *)v20 + 53)) {
      int v27 = 2;
    }
    else {
      int v27 = *((unsigned __int8 *)v20 + 52);
    }
    uint64_t v28 = (uint64_t *)((char *)this + 56);
    uint64_t result = GenoneClassTree::initForType(*((void *)this + 2), v27, (uint64_t)this + 56);
    unsigned int v48 = result;
    if (result == 1)
    {
      uint64_t result = *v28;
      if (*v28)
      {
        uint64_t result = MemChunkFree((void *)result, 0);
        *uint64_t v28 = 0;
      }
      *((void *)this + 8) = 0;
    }
    if (v23) {
      BOOL v29 = v26 == 0;
    }
    else {
      BOOL v29 = 0;
    }
    if (!v29 || v21 == 1)
    {
      int v11 = 0;
      unsigned int v16 = v48;
    }
    else
    {
      unsigned int v16 = v48;
      if (*(void *)this)
      {
        int v11 = *(_DWORD *)(*(void *)(*(void *)this + 8) + 160);
        if (v11) {
          uint64_t result = GenoneClassTree::decomposeInverseVariancesForTransformationMatrixAdaptation(*((GenoneClassTree **)this
        }
                                                                                               + 2));
      }
      else
      {
        int v11 = 0;
      }
      char v14 = 0;
    }
  }
  uint64_t v31 = (void *)((char *)this + 40);
  unsigned int v32 = *((_DWORD *)this + 13);
  if (v16 > v32) {
    uint64_t result = DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 40, v16 - v32, 0);
  }
  uint64_t v33 = *((unsigned int *)this + 12);
  if (v33 <= v16)
  {
    if (v33 < v16)
    {
      do
        *(void *)(*v31 + 8 * v33++) = 0;
      while (v16 != v33);
    }
  }
  else
  {
    uint64_t result = (uint64_t)DgnIOwnArray<CTPelAccum *>::destructAt((ConstrainedTransAccMgr *)((char *)this + 40), v16, v33 - v16);
  }
  *((_DWORD *)this + 12) = v16;
  if (v16)
  {
    for (unint64_t i = 0; i != v16; *(void *)(*v31 + 8 * i++) = result)
    {
      char v35 = MemChunkAlloc(0xA8uLL, 0);
      uint64_t v36 = *((void *)this + 2);
      if (v36)
      {
        if (i >= *(unsigned int *)(v36 + 272)) {
          uint64_t v37 = 0;
        }
        else {
          uint64_t v37 = (double **)(*(void *)(v36 + 264) + 16 * i);
        }
        uint64_t v38 = v36 + 240;
        if (i >= *(unsigned int *)(v36 + 288)) {
          uint64_t v36 = 0;
        }
        else {
          uint64_t v36 = *(void *)(v36 + 280) + 24 * i;
        }
      }
      else
      {
        uint64_t v37 = 0;
        uint64_t v38 = 0;
      }
      uint64_t result = CTPelAccum::CTPelAccum((uint64_t)v35, (uint64_t)v52, v10, v51, v50, v12, v15, v14, v13, v11, v38, v37, v36);
    }
  }
  if ((v49 & 1) == 0)
  {
    uint64_t v39 = *(void *)(*(void *)this + 8);
    uint64_t v40 = 352;
    if (v15) {
      uint64_t v40 = 72;
    }
    uint64_t v41 = 152;
    if (!v15) {
      uint64_t v41 = 392;
    }
    uint64_t v42 = 384;
    if (v15) {
      uint64_t v42 = 112;
    }
    unsigned int v43 = *(_DWORD *)(v39 + v41);
    if (v43)
    {
      int v44 = *(_DWORD *)(v39 + v42);
      double v45 = *(double *)(v39 + v40);
      if (v45 != 0.0 && v44 != 0)
      {
        int v47 = MemChunkAlloc(0x30uLL, 0);
        *(_OWORD *)(v47 + 1) = 0u;
        *(_OWORD *)(v47 + 3) = 0u;
        *((void *)this + 4) = v47;
        return CTModelRelevance::computeModelRelevance((CTModelRelevance *)v47, v52, v43, v45, v12, v15, v50, v51, v14);
      }
    }
  }
  return result;
}

CTModelRelevance *DgnDelete<CTModelRelevance>(CTModelRelevance *result)
{
  if (result)
  {
    CTModelRelevance::~CTModelRelevance(result);
    return (CTModelRelevance *)MemChunkFree(v1, 0);
  }
  return result;
}

void *DgnIOwnArray<CTPelAccum *>::releaseAll(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<CTPelAccum>(*(CTPelAccum **)(*(void *)a1 + v3));
      *(void *)(*(void *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  uint64_t result = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

BOOL ConstrainedTransAccMgr::adaptPel(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  int v10 = a3;
  unsigned int v12 = a2;
  int v14 = *(_DWORD *)(a4 + 8);
  if (v14)
  {
    BOOL v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    int v18 = *((_DWORD *)a1 + 12);
    BOOL v19 = 1;
  }
  else
  {
    uint64_t v20 = (AdaptController *)*a1;
    uint64_t v16 = *a1 + 40;
    BOOL v15 = *(AdaptStats **)(*a1 + 152);
    if (*(unsigned char *)(*a1 + 52)) {
      BOOL v19 = 1;
    }
    else {
      BOOL v19 = *((unsigned char *)v20 + 53) != 0;
    }
    int v18 = *((_DWORD *)a1 + 12);
    uint64_t v17 = *(unsigned __int16 *)(*(void *)(AdaptController::getPelMgr(v20, a2, a3, a4, a5, a6, a7, a8) + 288)
                              + 2 * a2);
  }
  if (v18 == 1)
  {
    uint64_t v21 = 0;
    if (v14)
    {
LABEL_9:
      int v22 = 0;
      double v23 = 1.0;
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v21 = *(unsigned int *)(a1[7] + 4 * v17);
    if (v14) {
      goto LABEL_9;
    }
  }
  uint64_t v24 = *(void *)(*a1 + 8);
  uint64_t v25 = 376;
  if (v19) {
    uint64_t v25 = 104;
  }
  double v23 = *(double *)(v24 + v25);
  int v22 = *(unsigned char *)(v24 + 140) && *(unsigned char *)(v16 + 13) && *(_DWORD *)(a1[3] + 12) == *(_DWORD *)a1[3];
LABEL_17:
  int v26 = *(uint64_t **)(a1[5] + 8 * v21);

  return CTPelAccum::adaptOneFrame(v26, v12, v22, v15, v10, a4, a9, v23);
}

uint64_t ConstrainedTransAccMgr::downScaleAccum(uint64_t this, unsigned int a2, unsigned int a3, double a4)
{
  if (a2)
  {
    if (a3)
    {
      if (!(a2 % a3))
      {
        uint64_t v4 = this;
        uint64_t v5 = *(unsigned int *)(this + 48);
        if (v5)
        {
          uint64_t v7 = 0;
          uint64_t v8 = 8 * v5;
          do
          {
            this = CTPelAccum::scaleAccum(*(void *)(*(void *)(v4 + 40) + v7), a4);
            v7 += 8;
          }
          while (v8 != v7);
        }
      }
    }
  }
  return this;
}

unint64_t ConstrainedTransAccMgr::getFrameCountsByTNode(unint64_t result, uint64_t a2)
{
  unint64_t v3 = result;
  unsigned int v4 = *(_DWORD *)(*(void *)(result + 16) + 200);
  unsigned int v5 = *(_DWORD *)(a2 + 12);
  if (v4 > v5) {
    uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a2, v4 - v5, 0);
  }
  *(_DWORD *)(a2 + 8) = v4;
  if (*(_DWORD *)(v3 + 48))
  {
    unint64_t v6 = 0;
    uint64_t v7 = *(void *)(v3 + 40);
    uint64_t v8 = *(void *)a2;
    do
    {
      *(_DWORD *)(v8 + 4 * v6) = ((double)*(uint64_t *)(*(void *)(v7 + 8 * v6) + 56) * 0.00390625 + 0.5);
      ++v6;
    }
    while (v6 < *(unsigned int *)(v3 + 48));
  }
  return result;
}

uint64_t *ConstrainedTransAccMgr::computeGlobalSmoothing(AdaptController **this, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = *((unsigned int *)this + 12);
  uint64_t PelMgr = AdaptController::getPelMgr(*this, a3, a4, a5, a6, a7, a8, a9);
  BOOL v15 = *this;
  uint64_t v16 = *((void *)*this + 4);
  uint64_t v17 = (unsigned __int8 *)*((void *)*this + 1);
  int v18 = v17[332];
  int v19 = v17[83];
  int v20 = v17[81];
  int v21 = v17[82];
  if (!(v21 | v20)) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/contrnac.cpp", 2719, (uint64_t)"recogctl/contrnac", 2, (uint64_t)"%s", v12, v13, (char)&errStr_recogctl_contrnac_E_IDENTITY_TRANSFORM);
  }
  if (v20) {
    BOOL v22 = 1;
  }
  else {
    BOOL v22 = v21 == 0;
  }
  char v23 = !v22;
  uint64_t v24 = MemChunkAlloc(0xA8uLL, 0);
  uint64_t v25 = v24;
  if (*((unsigned char *)v15 + 52)) {
    char v26 = 1;
  }
  else {
    char v26 = *((unsigned char *)v15 + 53) != 0;
  }
  CTPelAccum::CTPelAccum((uint64_t)v24, PelMgr, v16, v18 != 0, *(unsigned char *)(*((void *)*this + 1) + 96) != 0, *((unsigned char *)v15 + 48) != 0, v26, v19 != 0, v23, 0, 0, 0, 0);
  if (v11)
  {
    uint64_t v27 = 0;
    do
    {
      CTPelAccum::addAccum((CTPelAccum *)v25, *(const CTPelAccum **)((char *)this[5] + v27), 0);
      v27 += 8;
    }
    while (8 * v11 != v27);
  }
  double v28 = (double)v25[7] * 0.00390625;
  if (v28 <= 0.0)
  {
    DgnDelete<CTPelAccum>((CTPelAccum *)v25);
    return 0;
  }
  else
  {
    CTPelAccum::scaleAccum((uint64_t)v25, a2 / v28);
  }
  return v25;
}

CTPelAccum *DgnDelete<CTPelAccum>(CTPelAccum *result)
{
  if (result)
  {
    CTPelAccum::~CTPelAccum(result);
    return (CTPelAccum *)MemChunkFree(v1, 0);
  }
  return result;
}

void ConstrainedTransAccMgr::printSize(ConstrainedTransAccMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/contrnac.cpp", 2766, (DgnString *)&v78);
  if (v79) {
    BOOL v15 = v78;
  }
  else {
    BOOL v15 = &unk_2140991C1;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v11, v12, v13, v14, a3, &unk_2140991C1, a3, &unk_2140991C1, v15);
  DgnString::~DgnString((DgnString *)&v78);
  if (a2 != -1) {
    xlprintf("%d ", v16, v17, v18, v19, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v16, v17, v18, v19, a3, &unk_2140991C1);
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v20 = 4;
  }
  else {
    uint64_t v20 = 8;
  }
  uint64_t v21 = (a3 + 1);
  uint64_t v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/contrnac.cpp", 2767, (DgnString *)&v78);
  if (v79) {
    uint64_t v27 = v78;
  }
  else {
    uint64_t v27 = &unk_2140991C1;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_2140991C1, (34 - a3), (34 - a3), v27, v20, v20, 0);
  DgnString::~DgnString((DgnString *)&v78);
  *a4 += v20;
  *a5 += v20;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v28 = 4;
  }
  else {
    uint64_t v28 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/contrnac.cpp", 2768, (DgnString *)&v78);
  if (v79) {
    uint64_t v33 = v78;
  }
  else {
    uint64_t v33 = &unk_2140991C1;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v29, v30, v31, v32, (a3 + 1), &unk_2140991C1, (34 - a3), (34 - a3), v33, v28, v28, 0);
  DgnString::~DgnString((DgnString *)&v78);
  *a4 += v28;
  *a5 += v28;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v34 = 4;
  }
  else {
    uint64_t v34 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/contrnac.cpp", 2769, (DgnString *)&v78);
  if (v79) {
    uint64_t v39 = v78;
  }
  else {
    uint64_t v39 = &unk_2140991C1;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v35, v36, v37, v38, (a3 + 1), &unk_2140991C1, (34 - a3), (34 - a3), v39, v34, v34, 0);
  DgnString::~DgnString((DgnString *)&v78);
  *a4 += v34;
  *a5 += v34;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v40 = 12;
  }
  else {
    uint64_t v40 = 16;
  }
  uint64_t v41 = *((unsigned int *)this + 16);
  unsigned int v42 = *((_DWORD *)this + 17);
  if (v42 >= v41)
  {
    uint64_t v43 = 0;
    if ((int)v41 > 0) {
      v40 += 4 * (v41 - 1) + 4;
    }
    uint64_t v44 = v40 + 4 * (v42 - v41);
  }
  else
  {
    uint64_t v43 = 4 * v41;
    uint64_t v44 = v40;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/contrnac.cpp", 2771, (DgnString *)&v78);
  if (v79) {
    char v49 = v78;
  }
  else {
    char v49 = &unk_2140991C1;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v45, v46, v47, v48, (a3 + 1), &unk_2140991C1, (34 - a3), (34 - a3), v49, v44, v40, v43);
  DgnString::~DgnString((DgnString *)&v78);
  *a4 += v44;
  *a5 += v40;
  *a6 += v43;
  uint64_t v50 = sizeObject<CTPelAccum *>((uint64_t)this + 40, 0);
  uint64_t v51 = sizeObject<CTPelAccum *>((uint64_t)this + 40, 1);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/contrnac.cpp", 2772, (DgnString *)&v78);
  if (v79) {
    unint64_t v56 = v78;
  }
  else {
    unint64_t v56 = &unk_2140991C1;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v52, v53, v54, v55, (a3 + 1), &unk_2140991C1, (34 - a3), (34 - a3), v56, v50, v51, 0);
  DgnString::~DgnString((DgnString *)&v78);
  *a4 += v50;
  *a5 += v51;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v57 = 4;
  }
  else {
    uint64_t v57 = 8;
  }
  uint64_t v58 = *((void *)this + 4);
  if (v58)
  {
    uint64_t v75 = a3;
    uint64_t v76 = (a3 + 1);
    uint64_t v59 = sizeObject<DgnPrimArray<double>>(v58 + 8, 0);
    uint64_t v60 = v57 + v59 + sizeObject<DgnArray<DgnPrimArray<long long>>>(v58 + 24, 0) + 12;
    uint64_t v61 = *((void *)this + 4);
    if (gShadowDiagnosticShowIdealizedObjectSizes) {
      uint64_t v57 = 4;
    }
    else {
      uint64_t v57 = 8;
    }
    if (v61)
    {
      uint64_t v62 = sizeObject<DgnPrimArray<double>>(v61 + 8, 1);
      v57 += v62 + sizeObject<DgnArray<DgnPrimArray<long long>>>(v61 + 24, 1) + 12;
      uint64_t v63 = *((void *)this + 4);
      uint64_t v21 = v76;
      if (v63)
      {
        unsigned int v78 = 0;
        uint64_t v79 = 0;
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v78);
        uint64_t v64 = sizeObject<DgnArray<DgnPrimArray<long long>>>(v63 + 24, 3);
      }
      else
      {
        uint64_t v64 = 0;
      }
      a3 = v75;
    }
    else
    {
      uint64_t v64 = 0;
      a3 = v75;
      uint64_t v21 = v76;
    }
  }
  else
  {
    uint64_t v64 = 0;
    uint64_t v60 = v57;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/contrnac.cpp", 2774, (DgnString *)&v78);
  if (v79) {
    unint64_t v69 = v78;
  }
  else {
    unint64_t v69 = &unk_2140991C1;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v65, v66, v67, v68, v21, &unk_2140991C1, v22, v22, v69, v60, v57, v64);
  DgnString::~DgnString((DgnString *)&v78);
  *a4 += v60;
  *a5 += v57;
  *a6 += v64;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/contrnac.cpp", 2776, (DgnString *)&v78);
  if (v79) {
    char v74 = v78;
  }
  else {
    char v74 = &unk_2140991C1;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v70, v71, v72, v73, a3, &unk_2140991C1, (35 - a3), (35 - a3), v74, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v78);
}

void sub_213E1F298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<CTPelAccum *>(uint64_t a1, int a2)
{
  if (a2 == 3) {
    return 0;
  }
  int v4 = gShadowDiagnosticShowIdealizedObjectSizes;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v2 = 12;
  }
  else {
    uint64_t v2 = 16;
  }
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    uint64_t v6 = *(unsigned int *)(a1 + 8);
    if ((int)v6 >= 1)
    {
      unint64_t v7 = v6 + 1;
      int v8 = gShadowDiagnosticShowIdealizedObjectSizes;
      do
      {
        if (v8) {
          uint64_t v9 = 4;
        }
        else {
          uint64_t v9 = 8;
        }
        if (a2 != 2)
        {
          uint64_t v10 = *(void *)(*(void *)a1 + 8 * (v7 - 2));
          if (v10)
          {
            v9 += CTPelAccum::sizeObject(v10, a2);
            int v8 = gShadowDiagnosticShowIdealizedObjectSizes;
          }
        }
        v2 += v9;
        --v7;
      }
      while (v7 > 1);
    }
    if (!a2)
    {
      char v11 = 2;
      if (!v4) {
        char v11 = 3;
      }
      v2 += (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8)) << v11;
    }
  }
  return v2;
}

BOOL ConstrainedTransAccMgr::computeTransform(ConstrainedTransAccMgr *this, uint64_t a2, double a3, SnapTime *a4, unsigned int *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v194 = a2;
  if (a5) {
    *a5 = 0;
  }
  if (a2)
  {
    uint64_t v11 = *(void *)((*(uint64_t (**)(void))(**((void **)this + 1) + 200))(*((void *)this + 1)) + 56);
    uint64_t v19 = (*(uint64_t (**)(void))(**((void **)this + 1) + 208))(*((void *)this + 1));
    unsigned int v20 = 0;
    int v193 = 0;
    uint64_t v185 = 0;
    unsigned int v21 = 0;
    char v22 = 0;
    unsigned int v23 = 0;
    uint64_t v187 = v11;
    BOOL v198 = *(_DWORD *)(v11 + 16) == 1;
    uint64_t v24 = (char *)this + 40;
    unsigned int v25 = *((_DWORD *)this + 12);
    BOOL v191 = 1;
    char v26 = 1;
    char v27 = 1;
    int v200 = 1;
    char v202 = 0;
LABEL_21:
    int v199 = 1;
    goto LABEL_22;
  }
  uint64_t PelMgr = AdaptController::getPelMgr(*(AdaptController **)this, a2, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, a9);
  uint64_t v29 = *(unsigned char **)this;
  uint64_t v30 = *(void *)(*(void *)this + 32);
  uint64_t v31 = *(void *)this + 40;
  uint64_t v32 = *(void *)(*(void *)this + 8);
  char v26 = *(unsigned char *)(v32 + 332) != 0;
  char v27 = *(unsigned char *)(v32 + 96) != 0;
  int v33 = *(unsigned __int8 *)(v32 + 81);
  int v34 = *(unsigned __int8 *)(v32 + 82);
  BOOL v35 = *(unsigned char *)(v32 + 82) != 0;
  if (!(v34 | v33))
  {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/contrnac.cpp", 2890, (uint64_t)"recogctl/contrnac", 2, (uint64_t)"%s", v17, v18, (char)&errStr_recogctl_contrnac_E_IDENTITY_TRANSFORM);
    uint64_t v32 = *(void *)(*(void *)this + 8);
  }
  uint64_t v185 = v31;
  if (v33) {
    BOOL v36 = 1;
  }
  else {
    BOOL v36 = v34 == 0;
  }
  int v37 = !v36;
  uint64_t v187 = PelMgr;
  int v193 = v37;
  BOOL v191 = *(unsigned char *)(v32 + 83) != 0;
  int v200 = v35;
  if (v29[52])
  {
    BOOL v38 = v29[48] != 0;
    BOOL v198 = *(_DWORD *)(PelMgr + 16) == 1;
    uint64_t v24 = (char *)this + 40;
    unsigned int v25 = *((_DWORD *)this + 12);
    int v39 = v29[53];
    unsigned int v21 = *(_DWORD *)(v32 + 84);
    unsigned int v20 = *(_DWORD *)(v32 + 156);
    char v202 = v38;
    if (!v39)
    {
      uint64_t v19 = v30;
      char v22 = 0;
      unsigned int v23 = *(_DWORD *)(v32 + 100);
      goto LABEL_21;
    }
LABEL_18:
    uint64_t v19 = v30;
    int v40 = *(_DWORD *)(v32 + 148);
    char v22 = 0;
    if (v40 == -1) {
      unsigned int v23 = 0;
    }
    else {
      unsigned int v23 = *(_DWORD *)(v32 + 144) + v40;
    }
    goto LABEL_21;
  }
  BOOL v198 = *(_DWORD *)(PelMgr + 16) == 1;
  uint64_t v24 = (char *)this + 40;
  unsigned int v25 = *((_DWORD *)this + 12);
  char v202 = v29[48] != 0;
  if (v29[53])
  {
    unsigned int v21 = *(_DWORD *)(v32 + 84);
    unsigned int v20 = *(_DWORD *)(v32 + 156);
    goto LABEL_18;
  }
  uint64_t v19 = v30;
  int v199 = 0;
  unsigned int v20 = *(_DWORD *)(v32 + 360);
  unsigned int v23 = *(_DWORD *)(v32 + 372);
  char v22 = 1;
  unsigned int v21 = v20;
LABEL_22:
  uint64_t v229 = 0;
  uint64_t v230 = 0;
  unsigned int v227 = 0;
  uint64_t v228 = 0;
  unsigned int v197 = v25;
  if (v25 >= 2)
  {
    double v41 = (double)*(int *)(*(void *)(*(void *)this + 8) + 68) / 10000.0;
    int v42 = v199;
    if (v41 <= 0.0) {
      int v42 = 0;
    }
    if (v42 != 1) {
      goto LABEL_34;
    }
    uint64_t v43 = *(unsigned int *)(*((void *)this + 7)
                          + 4
                          * **(unsigned __int16 **)(AdaptController::getPelMgr(*(AdaptController **)this, v12, v13, v14, v15, v16, v17, v18)+ 288));
    uint64_t v44 = *((void *)this + 5);
    uint64_t v45 = *(void *)(v44 + 8 * v43);
    double v46 = (double)*(uint64_t *)(v45 + 56);
    uint64_t v47 = v197;
    double v48 = 0.0;
    do
    {
      if (v43) {
        double v48 = v48 + (double)*(uint64_t *)(*(void *)v44 + 56) * 0.00390625;
      }
      --v43;
      v44 += 8;
      --v47;
    }
    while (v47);
    double v49 = 0.0;
    if (v48 > 0.0)
    {
      if (v46 * 0.00390625 / v48 <= v41) {
        goto LABEL_34;
      }
      double v49 = v41 * v48 / (v46 * 0.00390625);
    }
    CTPelAccum::scaleAccum(v45, v49);
LABEL_34:
    uint64_t v216 = 0;
    uint64_t v217 = 0;
    ConstrainedTransAccMgr::getFrameCountsByTNode((unint64_t)this, (uint64_t)&v216);
    GenoneClassTree::getDynamicClasses(*((void *)this + 2), (uint64_t *)&v216, v23, v20, v21, (uint64_t)&v229, (uint64_t)&v227);
    if (*(unsigned char *)(*(void *)(*(void *)this + 8) + 80) && v230 >= 2)
    {
      double v211 = 0;
      uint64_t v212 = 0;
      unsigned int v50 = v228;
      if (v228 == HIDWORD(v228))
      {
        DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v227, 1, 1);
        unsigned int v50 = v228;
      }
      uint64_t v51 = &v227[2 * v50];
      void *v51 = 0;
      v51[1] = 0;
      DgnPrimArray<int>::copyArraySlice((unint64_t)v51, (uint64_t *)&v211, 0, v212);
      LODWORD(v228) = v228 + 1;
      unint64_t v52 = v230;
      if (v230)
      {
        unint64_t v53 = 0;
        uint64_t v54 = v229;
        do
        {
          if (LODWORD(v54[2 * v53 + 1]))
          {
            unint64_t v55 = 0;
            unsigned int v56 = v212;
            do
            {
              int v57 = *(_DWORD *)(v54[2 * v53] + 4 * v55);
              if (v56 == HIDWORD(v212))
              {
                DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v211, 1, 1);
                unsigned int v56 = v212;
                uint64_t v54 = v229;
              }
              *((_DWORD *)v211 + v56) = v57;
              unsigned int v56 = v212 + 1;
              LODWORD(v212) = v212 + 1;
              ++v55;
            }
            while (v55 < LODWORD(v54[2 * v53 + 1]));
            unint64_t v52 = v230;
          }
          ++v53;
        }
        while (v53 < v52);
      }
      else
      {
        unint64_t v52 = 0;
      }
      if (v52 == HIDWORD(v230))
      {
        DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v229, 1, 1);
        unint64_t v52 = v230;
      }
      uint64_t v68 = &v229[16 * v52];
      *(void *)uint64_t v68 = 0;
      *((void *)v68 + 1) = 0;
      DgnPrimArray<int>::copyArraySlice((unint64_t)v68, (uint64_t *)&v211, 0, v212);
      LODWORD(v230) = v230 + 1;
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v211);
      unsigned int v183 = 1;
    }
    else
    {
      unsigned int v183 = 0;
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v216);
    goto LABEL_78;
  }
  if (v20 <= ((double)*(uint64_t *)(**(void **)v24 + 56) * 0.00390625 + 0.5))
  {
    uint64_t v216 = 0;
    HIDWORD(v230) = realloc_array(0, &v216, 0x10uLL, 0, 0, 1) >> 4;
    uint64_t v58 = v216;
    uint64_t v229 = (char *)v216;
    unint64_t v59 = v230;
    if (v230 <= 1)
    {
      if (!v230)
      {
        *(void *)uint64_t v216 = 0;
        v58[1] = 0;
      }
    }
    else if ((int)v230 >= 2)
    {
      uint64_t v60 = 16 * v230 - 16;
      do
      {
        --v59;
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v229[v60]);
        v60 -= 16;
      }
      while (v59 > 1);
    }
    LODWORD(v230) = 1;
    uint64_t v61 = v229;
    unsigned int v62 = *((_DWORD *)v229 + 2);
    if (v62 == *((_DWORD *)v229 + 3))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)v229, 1, 1);
      unsigned int v62 = v61[2];
    }
    *(_DWORD *)(*(void *)v61 + 4 * v62) = 0;
    ++v61[2];
    if (!HIDWORD(v228))
    {
      uint64_t v216 = 0;
      HIDWORD(v228) = realloc_array(v227, &v216, 0x10uLL, 16 * v228, 16 * v228, 1) >> 4;
      unsigned int v227 = v216;
    }
    unint64_t v63 = v228;
    if (v228 <= 1)
    {
      if (!v228)
      {
        uint64_t v65 = v227;
        *unsigned int v227 = 0;
        v65[1] = 0;
      }
    }
    else if ((int)v228 >= 2)
    {
      uint64_t v64 = 16 * v228 - 16;
      do
      {
        --v63;
        DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v227 + v64);
        v64 -= 16;
      }
      while (v63 > 1);
    }
    LODWORD(v228) = 1;
    uint64_t v66 = v227;
    unsigned int v67 = *((_DWORD *)v227 + 2);
    if (v67 == *((_DWORD *)v227 + 3))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)v227, 1, 1);
      unsigned int v67 = *((_DWORD *)v66 + 2);
    }
    unsigned int v183 = 0;
    *(_DWORD *)(*v66 + 4 * v67) = 0;
    ++*((_DWORD *)v66 + 2);
  }
  else
  {
    unsigned int v183 = 0;
  }
LABEL_78:
  uint64_t v69 = v230;
  SnapTime::recordTime(a4, 1, 1, 1, 1);
  if (!v69) {
    goto LABEL_87;
  }
  if (v194)
  {
    unsigned int v77 = 1;
LABEL_83:
    unsigned int v78 = *(_DWORD *)(*((void *)this + 3) + 136);
    SnapTime::recordTime(a4, 1, 1, 1, 1);
    if (v78 >= v77) {
      unsigned int v79 = v77;
    }
    else {
      unsigned int v79 = v78;
    }
    if (v69 < v79) {
      goto LABEL_87;
    }
    if (v199)
    {
      unsigned int v204 = 1 << *(_DWORD *)(*((void *)this + 3) + 4);
      if (v194)
      {
        unsigned int v192 = 0;
        goto LABEL_98;
      }
      goto LABEL_95;
    }
    if (v194)
    {
      unsigned int v192 = 0;
      unsigned int v204 = 0x4000;
      goto LABEL_98;
    }
LABEL_96:
    double v81 = (unsigned int *)(*(void *)(*(void *)this + 8) + 384);
    unsigned int v204 = 0x4000;
    goto LABEL_97;
  }
  if (*(unsigned char *)(v185 + 13))
  {
    unsigned int v77 = *(_DWORD *)(*(void *)(*(void *)this + 8) + 144);
    goto LABEL_83;
  }
  if (!v199) {
    goto LABEL_96;
  }
  unsigned int v204 = 1 << *(_DWORD *)(*((void *)this + 3) + 4);
LABEL_95:
  double v81 = (unsigned int *)(*(void *)(*(void *)this + 8) + 112);
LABEL_97:
  unsigned int v192 = *v81;
LABEL_98:
  char v190 = v22 ^ (v193 | v27 | v22);
  if ((v193 | (v27 | v22)))
  {
    uint64_t v83 = v187;
    BOOL v82 = v191;
  }
  else
  {
    BOOL v82 = v191;
    uint64_t v83 = v187;
    if (v191) {
      char v190 = v26 | !v198;
    }
  }
  uint64_t v186 = v69;
  if ((v194 & 1) == 0)
  {
    uint64_t v189 = 0;
    char v196 = 0;
    uint64_t v85 = *(void *)(*(void *)this + 8);
    uint64_t v86 = 368;
    if (v199) {
      uint64_t v86 = 92;
    }
    uint64_t v87 = 364;
    if (v199) {
      uint64_t v87 = 88;
    }
    unsigned int v84 = *(_DWORD *)(v85 + v87);
    if (v186 < 2) {
      goto LABEL_112;
    }
    int v88 = *(_DWORD *)(v85 + v86);
    if (!v88) {
      goto LABEL_112;
    }
    uint64_t v189 = (CTPelAccum *)ConstrainedTransAccMgr::computeGlobalSmoothing((AdaptController **)this, (double)v88, v70, v71, v72, v73, v74, v75, v76);
    SnapTime::recordTime(a4, 1, 1, 1, 1);
    if (v189)
    {
      char v196 = 1;
      goto LABEL_112;
    }
LABEL_87:
    BOOL v80 = 0;
    goto LABEL_270;
  }
  char v196 = 0;
  unsigned int v84 = 0;
  uint64_t v189 = 0;
LABEL_112:
  double v89 = MemChunkAlloc(0xA8uLL, 0);
  CTPelAccum::CTPelAccum((uint64_t)v89, v83, v19, v26, v27, v202, v199, v82, v193, 0, 0, 0, 0);
  double v90 = (DgnMatrix *)*((unsigned int *)v89 + 4);
  if (v82) {
    __int16 v91 = 2;
  }
  else {
    __int16 v91 = 1;
  }
  if (v193) {
    __int16 v91 = 3;
  }
  unsigned __int16 v203 = v91;
  if (v193) {
    uint64_t v92 = 0;
  }
  else {
    uint64_t v92 = v90;
  }
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(&v225, v92);
  unint64_t v93 = v226;
  if (v226)
  {
    uint64_t v94 = 0;
    unint64_t v95 = 0;
    if ((v82 & (v193 ^ 1)) != 0) {
      unsigned int v96 = 1;
    }
    else {
      unsigned int v96 = v90;
    }
    do
    {
      uint64_t v97 = v225 + v94;
      unsigned int v98 = *(_DWORD *)(v225 + v94 + 12);
      if (v96 > v98)
      {
        DgnPrimArray<unsigned int>::reallocElts(v225 + v94, v96 - v98, 0);
        unint64_t v93 = v226;
      }
      *(_DWORD *)(v97 + 8) = v96;
      ++v95;
      v94 += 16;
    }
    while (v95 < v93);
  }
  int v201 = v82 | v200;
  if (v201) {
    unsigned int v99 = v90;
  }
  else {
    unsigned int v99 = 0;
  }
  uint64_t v223 = 0;
  uint64_t v224 = 0;
  if (v99)
  {
    uint64_t v216 = 0;
    HIDWORD(v224) = realloc_array(0, &v216, 4 * v99, 0, 0, 1) >> 2;
    uint64_t v223 = v216;
  }
  LODWORD(v224) = v99;
  DgnArray<LinearTransform>::DgnArray(&v221, v186);
  int v219 = 0;
  uint64_t v220 = 0;
  if (v199)
  {
    uint64_t v216 = 0;
    unint64_t v100 = realloc_array(0, &v216, 4 * v186, 0, 0, 1);
    int v219 = v216;
    LODWORD(v220) = v186;
    HIDWORD(v220) = v100 >> 2;
  }
  uint64_t v101 = 0;
  unsigned int v102 = 0;
  uint64_t v216 = 0;
  uint64_t v217 = 0;
  int v218 = 0;
  int v215 = 0;
  uint64_t v182 = (v186 - 1);
  if (v186 <= 1) {
    uint64_t v103 = 1;
  }
  else {
    uint64_t v103 = v186;
  }
  uint64_t v195 = v103;
  uint64_t v214 = 0;
  do
  {
    CTPelAccum::reset((CTPelAccum *)v89);
    int v104 = v229;
    if (*(_DWORD *)&v229[16 * v101 + 8])
    {
      unint64_t v105 = 0;
      do
      {
        CTPelAccum::addAccum((CTPelAccum *)v89, *(const CTPelAccum **)(*(void *)v24 + 8 * *(unsigned int *)(v104[2 * v101] + 4 * v105++)), 0);
        int v104 = v229;
      }
      while (v105 < *(unsigned int *)&v229[16 * v101 + 8]);
    }
    if ((v196 & 1) != 0 && (unint64_t)((double)v89[7] * 0.00390625 + 0.5) < v84) {
      CTPelAccum::addAccum((CTPelAccum *)v89, v189, 0);
    }
    unint64_t v106 = (void *)*((void *)this + 4);
    if (v106) {
      CTPelAccum::addModelRelevance((uint64_t)v89, v106, v192);
    }
    DgnMatrix::makeIdentity(v90, (uint64_t)&v211);
    uint64_t v216 = v211;
    DgnPrimFixArray<double>::copyArraySlice((uint64_t)&v217, &v212, 0, v213);
    unsigned int v107 = v197;
    DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v212);
    LODWORD(v212) = 0;
    double v211 = 0;
    if (v90)
    {
      double v211 = (LinearTransform *)MemChunkAlloc(8 * (void)v90, 0);
      LODWORD(v212) = v90;
      bzero(v211, 8 * (void)v90);
    }
    DgnPrimFixArray<double>::copyArraySlice((uint64_t)&v214, (uint64_t *)&v211, 0, v90);
    DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v211);
    if (v199)
    {
      if ((v190 & 1) == 0
        && !ConstrainedTransAccMgr::computeInitialTransform(this, (CTPelAccum *)v89, v198, (DgnMatrix *)&v216))
      {
        DgnMatrix::makeIdentity(v90, (uint64_t)&v211);
        uint64_t v216 = v211;
        DgnPrimFixArray<double>::copyArraySlice((uint64_t)&v217, &v212, 0, v213);
        DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v212);
        LODWORD(v212) = 0;
        double v211 = 0;
        if (v90)
        {
          double v211 = (LinearTransform *)MemChunkAlloc(8 * (void)v90, 0);
          LODWORD(v212) = v90;
          bzero(v211, 8 * (void)v90);
        }
        DgnPrimFixArray<double>::copyArraySlice((uint64_t)&v214, (uint64_t *)&v211, 0, v90);
        DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v211);
      }
      int v108 = ConstrainedTransAccMgr::computeIterativeTransform((uint64_t *)this, (uint64_t)v89, v194, v198, v191, v193, (int *)&v216, &v214, a3);
    }
    else
    {
      int v108 = ConstrainedTransAccMgr::computeMeansTransform(this, (CTPelAccum *)v89, v198, (DgnMatrix *)&v216);
    }
    if (!v108 || !fillIntTransform((uint64_t)&v216, &v214, &v225, &v223, v204, v203, v201, v90))
    {
      DgnMatrix::makeIdentity(v90, (uint64_t)&v211);
      uint64_t v216 = v211;
      DgnPrimFixArray<double>::copyArraySlice((uint64_t)&v217, &v212, 0, v213);
      DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v212);
      LODWORD(v212) = 0;
      double v211 = 0;
      if (v90)
      {
        double v211 = (LinearTransform *)MemChunkAlloc(8 * (void)v90, 0);
        LODWORD(v212) = v90;
        bzero(v211, 8 * (void)v90);
      }
      DgnPrimFixArray<double>::copyArraySlice((uint64_t)&v214, (uint64_t *)&v211, 0, v90);
      ++v102;
      DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v211);
      fillIntTransform((uint64_t)&v216, &v214, &v225, &v223, v204, v203, v201, v90);
    }
    LinearTransform::setSize(v221 + 72 * v101, (int)v90, (int)v90);
    LinearTransform::setTransform(v221 + 72 * v101, (uint64_t)&v225, v203, (uint64_t)&v223, v201, v204, 0, v109);
    if (v199)
    {
      double v110 = DgnMatrix::determinant((double **)&v216);
      double v111 = DgnLog(v110) * (double)v204;
      if (v111 >= 0.0) {
        double v112 = 0.5;
      }
      else {
        double v112 = -0.5;
      }
      v219[v101] = (int)(v111 + v112);
    }
    ++v101;
  }
  while (v101 != v195);
  DgnDelete<CTPelAccum>((CTPelAccum *)v89);
  DgnDelete<CTPelAccum>(v189);
  SnapTime::recordTime(a4, 1, 1, 1, 1);
  uint64_t v117 = v187;
  unsigned int v118 = (20 * (int)v186 + 50) / 0x64u;
  BOOL v80 = v102 <= v118;
  if (v102 <= v118)
  {
    double v211 = 0;
    uint64_t v212 = 0;
    unsigned int v119 = v186;
    v210[0] = 0;
    v210[1] = 0;
    uint64_t v120 = a5;
    if (v183)
    {
      if (v230 <= v182)
      {
        if (v230 < v182)
        {
          uint64_t v123 = v182 - v230;
          uint64_t v124 = 16 * v230;
          do
          {
            char v125 = &v229[v124];
            *(void *)char v125 = 0;
            *((void *)v125 + 1) = 0;
            v124 += 16;
            --v123;
          }
          while (v123);
        }
      }
      else if ((int)v230 > (int)v182)
      {
        uint64_t v121 = (int)v230;
        uint64_t v122 = 16 * (int)v230 - 16;
        do
        {
          --v121;
          DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v229[v122]);
          v122 -= 16;
        }
        while (v121 > (int)v182);
      }
      LODWORD(v230) = v186 - 1;
      if (v228 <= v182)
      {
        if (v228 < v182)
        {
          uint64_t v128 = v182 - v228;
          uint64_t v129 = 2 * v228;
          do
          {
            int v130 = &v227[v129];
            *int v130 = 0;
            v130[1] = 0;
            v129 += 2;
            --v128;
          }
          while (v128);
        }
      }
      else if ((int)v228 > (int)v182)
      {
        uint64_t v126 = (int)v228;
        uint64_t v127 = 16 * (int)v228 - 16;
        do
        {
          --v126;
          DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v227 + v127);
          v127 -= 16;
        }
        while (v126 > (int)v182);
      }
      LODWORD(v228) = v186 - 1;
      DgnArray<LinearTransform>::copyArraySlice((uint64_t)&v211, &v221, v182, 1u);
      DgnPrimArray<int>::copyArraySlice((unint64_t)v210, (uint64_t *)&v219, v182, 1u);
      uint64_t v131 = (int)v222;
      if (v222 <= v182)
      {
        if (v222 < v182)
        {
          int v133 = ~v222 + v186;
          uint64_t v134 = 72 * v222;
          do
          {
            LinearTransform::LinearTransform((LinearTransform *)(v221 + v134));
            v134 += 72;
            --v133;
          }
          while (v133);
        }
      }
      else if ((int)v222 > (int)v182)
      {
        uint64_t v132 = 72 * (int)v222 - 72;
        do
        {
          --v131;
          LinearTransform::~LinearTransform((LinearTransform *)(v221 + v132));
          v132 -= 72;
        }
        while (v131 > (int)v182);
      }
      unsigned int v119 = v186 - 1;
      unsigned int v222 = v186 - 1;
      LODWORD(v220) = v186 - 1;
    }
    if (v194)
    {
      CTFTMgr::setOnlineCTList(*((_DWORD **)this + 3), (uint64_t)&v221, (uint64_t)&v219);
    }
    else if (v199)
    {
      uint64_t v135 = *((void *)this + 2);
      uint64_t v136 = v135 + 120;
      uint64_t v137 = 152;
      if (*(unsigned char *)(v185 + 13)) {
        uint64_t v136 = v135 + 152;
      }
      else {
        uint64_t v137 = 120;
      }
      int v138 = *(_DWORD *)(*(void *)(v135 + v137) + 4 * (*(_DWORD *)(v136 + 8) - 1));
      int v208 = 0;
      uint64_t v209 = 0;
      int v139 = v138 + 1;
      if (v138 != -1)
      {
        int v206 = 0;
        HIDWORD(v209) = realloc_array(0, &v206, 4 * (v138 + 1), 0, 0, 1) >> 2;
        int v208 = (char *)v206;
        uint64_t v135 = *((void *)this + 2);
      }
      LODWORD(v209) = v139;
      int v206 = 0;
      uint64_t v207 = 0;
      DgnPrimArray<int>::copyArraySlice((unint64_t)&v206, (uint64_t *)(v135 + 192), 0, *(_DWORD *)(v135 + 200));
      if (v209)
      {
        unint64_t v140 = 0;
        int v141 = v208;
        do
          *(_DWORD *)&v141[4 * v140++] = -1;
        while (v140 < v209);
      }
      unint64_t v142 = v228;
      if (v228)
      {
        unint64_t v143 = 0;
        char v144 = v227;
        uint64_t v145 = (unsigned int *)v206;
        uint64_t v146 = v208;
        do
        {
          uint64_t v147 = &v144[2 * v143];
          int v149 = *((_DWORD *)v147 + 2);
          uint64_t v148 = (unsigned int *)(v147 + 1);
          if (v149)
          {
            unint64_t v150 = 0;
            uint64_t v151 = v144[2 * v143];
            do
              *(_DWORD *)&v146[4 * v145[*(unsigned int *)(v151 + 4 * v150++)]] = v143;
            while (v150 < *v148);
            unint64_t v142 = v228;
          }
          ++v143;
        }
        while (v143 < v142);
      }
      if (*(unsigned char *)(v185 + 12))
      {
        CTFTMgr::setSpeakerCTList(*((_DWORD **)this + 3), (uint64_t)&v221, (uint64_t)&v219, (uint64_t)&v208, (uint64_t)&v211, (uint64_t)v210);
      }
      else if (*(unsigned char *)(v185 + 13))
      {
        if (*(unsigned char *)(*(void *)(*(void *)this + 8) + 140))
        {
          uint64_t v173 = *((void *)this + 3);
          if (*(_DWORD *)(v173 + 12) == *(_DWORD *)v173
            && v119 == *(_DWORD *)(v173 + 136)
            && v183 == *(_DWORD *)(v173 + 176))
          {
            if (v209)
            {
              uint64_t v174 = 0;
              while (1)
              {
                int v175 = *(_DWORD *)&v208[v174];
                if (v175 != -1 && (!v119 || v175 != *(_DWORD *)(*(void *)(v173 + 40) + v174))) {
                  break;
                }
                v174 += 4;
                if (4 * v209 == v174) {
                  goto LABEL_255;
                }
              }
            }
            else
            {
LABEL_255:
              if (v119)
              {
                for (uint64_t i = 0; i != v119; ++i)
                  multiplyIntTransform((LinearTransform *)(v221 + 72 * i), (const LinearTransform *)(*(void *)(*((void *)this + 3) + 144) + 72 * i), v204, v203, v201, v90, &v219[i]);
              }
              for (unsigned int j = 0; j < v183; unsigned int j = 1)
                multiplyIntTransform(v211, *(const LinearTransform **)(*((void *)this + 3) + 184), v204, v203, v201, v90, v210[0]);
            }
          }
        }
        CTFTMgr::setChannelCTList(*((_DWORD **)this + 3), (uint64_t)&v221, (uint64_t)&v219, (uint64_t)&v208, (uint64_t)&v211, (uint64_t)v210);
      }
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v206);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v208);
    }
    else
    {
      unsigned int v205 = v119;
      int v208 = 0;
      uint64_t v209 = 0;
      uint64_t v152 = *((void *)this + 2);
      int v206 = 0;
      uint64_t v207 = 0;
      if (v228)
      {
        int v153 = 0;
        unint64_t v154 = 0;
        do
        {
          LODWORD(v207) = 0;
          uint64_t v155 = v227;
          if (LODWORD(v227[2 * v154 + 1]))
          {
            unsigned int v156 = 0;
            unint64_t v157 = 0;
            do
            {
              uint64_t v158 = *(void *)(*((void *)this + 2) + 208) + 16 * *(unsigned int *)(v155[2 * v154] + 4 * v157);
              unint64_t v159 = *(unsigned int *)(v158 + 8);
              if (*(_DWORD *)(v158 + 8))
              {
                unint64_t v160 = 0;
                do
                {
                  unint64_t v161 = *(unsigned int *)(*(void *)v158 + 4 * v160);
                  if ((*(_DWORD *)(*(void *)(v152 + 64) + ((v161 >> 3) & 0x1FFFFFFC)) >> v161))
                  {
                    int v162 = *(unsigned __int16 *)(*(void *)(v152 + 32) + 2 * v161);
                    if (v162 != 65534)
                    {
                      if (v156 == HIDWORD(v207))
                      {
                        DgnPrimArray<short>::reallocElts((uint64_t)&v206, 1, 1);
                        unsigned int v156 = v207;
                        unint64_t v159 = *(unsigned int *)(v158 + 8);
                      }
                      *((_WORD *)v206 + v156++) = v162;
                      LODWORD(v207) = v156;
                    }
                  }
                  ++v160;
                }
                while (v160 < v159);
                uint64_t v155 = v227;
              }
              ++v157;
            }
            while (v157 < LODWORD(v155[2 * v154 + 1]));
            int v153 = v209;
            unsigned int v107 = v197;
            uint64_t v117 = v187;
          }
          if (v153 == HIDWORD(v209))
          {
            DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v208, 1, 1);
            int v153 = v209;
          }
          uint64_t v163 = &v208[16 * v153];
          *(void *)uint64_t v163 = 0;
          *((void *)v163 + 1) = 0;
          DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)v163, (uint64_t *)&v206, 0, v207);
          int v153 = v209 + 1;
          LODWORD(v209) = v209 + 1;
          ++v154;
        }
        while (v154 < v228);
      }
      unint64_t v164 = v222;
      if (v222)
      {
        unint64_t v165 = 0;
        char v166 = v208;
        do
        {
          if (*(_DWORD *)&v166[16 * v165 + 8])
          {
            unint64_t v167 = 0;
            do
            {
              uint64_t v168 = *(unsigned __int16 *)(*(void *)&v166[16 * v165] + 2 * v167);
              int v169 = *(_DWORD *)(*(void *)(v117 + 272) + 4 * v168);
              int v170 = *(_DWORD *)(*(void *)(v117 + 272) + 4 * v168 + 4);
              int v171 = v170 - v169;
              if (v170 != v169)
              {
                uint64_t v172 = 0;
                do
                {
                  ConstrainedTransAccMgr::copyBackMeans((AdaptController **)this, v168, v172, (LinearTransform *)(v221 + 72 * v165), v113, v114, v115, v116);
                  uint64_t v172 = (v172 + 1);
                }
                while (v171 != v172);
                char v166 = v208;
              }
              ++v167;
            }
            while (v167 < *(unsigned int *)&v166[16 * v165 + 8]);
            unint64_t v164 = v222;
            unsigned int v107 = v197;
          }
          ++v165;
        }
        while (v165 < v164);
      }
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v206);
      DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&v208);
      uint64_t v120 = a5;
      unsigned int v119 = v205;
    }
    if (v107)
    {
      uint64_t v178 = *(uint64_t **)v24;
      uint64_t v179 = v107;
      do
      {
        uint64_t v180 = *v178++;
        *(unsigned char *)(v180 + 22) = 1;
        --v179;
      }
      while (v179);
    }
    SnapTime::recordTime(a4, 1, 1, 1, 1);
    if (v120) {
      *uint64_t v120 = v119;
    }
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v210);
    DgnArray<LinearTransform>::releaseAll((uint64_t)&v211);
    BOOL v80 = 1;
  }
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v214);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v217);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v219);
  DgnArray<LinearTransform>::releaseAll((uint64_t)&v221);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v223);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&v225);
LABEL_270:
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&v227);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&v229);
  return v80;
}

void sub_213E208D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,char a41)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a32);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a34);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a36);
  DgnArray<LinearTransform>::releaseAll((uint64_t)&a38);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&a41);
  DgnPrimFixArray<double>::~DgnPrimFixArray(a29);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v41 - 216);
  DgnArray<LinearTransform>::releaseAll(v41 - 200);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v41 - 184);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v41 - 168);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v41 - 152);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll(v41 - 136);
  _Unwind_Resume(a1);
}

BOOL ConstrainedTransAccMgr::computeInitialTransform(ConstrainedTransAccMgr *this, CTPelAccum *a2, int a3, DgnMatrix *a4)
{
  int v8 = (DgnMatrix *)*((unsigned int *)a2 + 4);
  DgnMatrix::makeIdentity(v8, (uint64_t)&v21);
  if (ConstrainedTransAccMgr::computeMeansTransform(this, a2, a3, (DgnMatrix *)&v21))
  {
    DgnMatrix::invert(&v21, (uint64_t)&v19);
    int v9 = v19;
    BOOL v10 = v19 != 0;
    if (v19 && v8)
    {
      unsigned int v11 = 0;
      uint64_t v12 = v20;
      int v13 = *(_DWORD *)a4;
      uint64_t v14 = *((void *)a4 + 1);
      do
      {
        uint64_t v15 = v8;
        unsigned int v16 = v11;
        unsigned int v17 = v11;
        do
        {
          *(void *)(v14 + 8 * v17) = *(void *)(v12 + 8 * v16);
          v17 += v13;
          v16 += v9;
          uint64_t v15 = (DgnMatrix *)((char *)v15 - 1);
        }
        while (v15);
        ++v11;
      }
      while (v11 != v8);
    }
    DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v20);
  }
  else
  {
    BOOL v10 = 0;
  }
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v22);
  return v10;
}

void sub_213E20B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ConstrainedTransAccMgr::computeIterativeTransform(uint64_t *a1, uint64_t a2, int a3, int a4, int a5, int a6, int *a7, void *a8, double a9)
{
  if (*(unsigned char *)(a2 + 20)) {
    int v10 = 0;
  }
  else {
    int v10 = a4;
  }
  double v11 = (double)*(uint64_t *)(a2 + 56) * 0.00390625;
  if (v11 != 0.0)
  {
    int v177 = v10;
    uint64_t v181 = *(unsigned int *)(a2 + 16);
    if (*a1) {
      int v19 = *(_DWORD *)(*(void *)(*a1 + 8) + 168);
    }
    else {
      int v19 = 0;
    }
    int v219 = 0;
    uint64_t v220 = 0;
    if (v10)
    {
      uint64_t v216 = 0;
      unint64_t v20 = realloc_array(0, &v216, 4 * v181, 0, 0, 1);
      unsigned int v21 = v216;
      int v219 = v216;
      LODWORD(v220) = v181;
      HIDWORD(v220) = v20 >> 2;
      *(_DWORD *)uint64_t v216 = 0;
      if (v181 >= 2)
      {
        int v22 = 0;
        for (uint64_t i = 1; i != v181; ++i)
        {
          v22 += i;
          v21[i] = v22;
        }
      }
    }
    uint64_t v24 = *a1;
    unsigned int v162 = 1;
    if ((v177 | a5 ^ 1) == 1 && !a3) {
      unsigned int v162 = *(_DWORD *)(*(void *)(v24 + 8) + 116);
    }
    if (a5 & 1) != 0 || (a6)
    {
      unsigned int v25 = 0;
      if (!v24)
      {
        BOOL v26 = 1;
        goto LABEL_21;
      }
    }
    else
    {
      unsigned int v25 = *(unsigned __int8 *)(*(void *)(v24 + 8) + 82);
    }
    BOOL v26 = *(unsigned char *)(*(void *)(v24 + 8) + 164) != 0;
LABEL_21:
    BOOL v166 = v26;
    LODWORD(v216) = v181;
    HIDWORD(v216) = v181;
    int v27 = HIDWORD(v216) * HIDWORD(v216);
    int v218 = 0;
    uint64_t v217 = 0;
    if (HIDWORD(v216) * HIDWORD(v216))
    {
      uint64_t v217 = MemChunkAlloc(8 * (HIDWORD(v216) * HIDWORD(v216)), 0);
      int v218 = v27;
    }
    if (!v162)
    {
LABEL_173:
      char v12 = 1;
LABEL_178:
      DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v217);
      DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v219);
      return v12 & 1;
    }
    BOOL v28 = 0;
    int v161 = 0;
    double v29 = 1.0 / v11 / 1000.0;
    double v184 = (double)v19 * 0.1 * (1.0 / v11 * v29 * ((double)v19 * 0.1));
    uint64_t v30 = v181;
    uint64_t v176 = (v25 + v181) * (v25 + v181);
    uint64_t v190 = v25 + v181;
    uint64_t v178 = 8 * v190;
    uint64_t v168 = 8 * v176;
    double v167 = v11;
    double v165 = -v11;
    double v31 = 1.0;
    if (a3) {
      double v31 = a9;
    }
    double v163 = v31;
    uint64_t v191 = v25;
    uint64_t v198 = v25 - 1;
    unsigned int v192 = 1 - v25;
    uint64_t v180 = v25;
    uint64_t v179 = a8;
    uint64_t v185 = a7;
    char v174 = a5;
    int v175 = a6;
    int v164 = a3;
    uint64_t v32 = (uint64_t *)a2;
    unsigned int v193 = v25;
    while (1)
    {
      unint64_t v33 = 8 * v181;
      if (v30) {
        break;
      }
LABEL_172:
      BOOL v28 = ++v161 >= v162;
      if (v161 == v162) {
        goto LABEL_173;
      }
    }
    unint64_t v34 = 0;
    char v182 = v28;
    while (1)
    {
      *(void *)unsigned int v183 = v34;
      if (v175)
      {
        LODWORD(v214) = 0;
        unsigned int v213 = 0;
        BOOL v35 = MemChunkAlloc(v33, 0);
        unsigned int v213 = (double *)v35;
        LODWORD(v214) = v30;
        bzero(v35, v33);
        v35[v34] = 0x3FF0000000000000;
        uint64_t v36 = a7[1];
        if (v36)
        {
          int v37 = *a7;
          uint64_t v38 = *((void *)a7 + 1);
          unsigned int v39 = v34;
          do
          {
            double v40 = *(double *)v35++;
            *(double *)(v38 + 8 * v39) = v40;
            v39 += v37;
            --v36;
          }
          while (v36);
        }
        *(double *)(*a8 + 8 * v34) = (double)*(uint64_t *)(v32[13] + 8 * v34)
                                   * -0.0000305175781
                                   / ((double)v32[7]
                                    * 0.00390625);
        uint64_t v41 = (uint64_t **)&v213;
        goto LABEL_171;
      }
      LODWORD(v213) = v190;
      HIDWORD(v213) = v190;
      int v215 = 0;
      uint64_t v214 = 0;
      if (v176)
      {
        uint64_t v214 = MemChunkAlloc(v168, 0);
        int v215 = v176;
      }
      unsigned int v212 = 0;
      double v211 = 0;
      if (v190)
      {
        int v42 = MemChunkAlloc(v178, 0);
        double v211 = v42;
        unsigned int v212 = v190;
        bzero(v42, v178);
        if (v174) {
          goto LABEL_38;
        }
      }
      else
      {
        int v42 = 0;
        if (v174)
        {
LABEL_38:
          unint64_t v34 = *(void *)v183;
          if (v177) {
            unsigned int v43 = v183[0] + 1;
          }
          else {
            unsigned int v43 = 1;
          }
          unsigned int v44 = v183[0];
          if (v177) {
            unsigned int v44 = v219[*(void *)v183] + v183[0];
          }
          uint64_t v45 = *(uint64_t **)(v32[8] + 16 * *(void *)v183);
          double v46 = (double)*v45 * 0.0000305175781;
          double v47 = (double)v45[v43];
          double DataDataAccumUnscaled = CTPelAccum::getDataDataAccumUnscaled((CTPelAccum *)v32, v44, 0, 0);
          double v172 = CTPelAccum::getDataDataAccumUnscaled((CTPelAccum *)v32, v44, v43, 0);
          double v170 = CTPelAccum::getDataDataAccumUnscaled((CTPelAccum *)v32, v44, v43, v43);
          double v48 = 32768.0;
          if (v43) {
            double v49 = 256.0;
          }
          else {
            double v49 = 32768.0;
          }
          if (!v43) {
            double v48 = 4194304.0;
          }
          double v169 = v48;
          if (v43) {
            double v50 = 256.0;
          }
          else {
            double v50 = 4194304.0;
          }
          double v51 = v47 / v49;
          if (v177)
          {
            unint64_t v52 = 0;
            int v194 = v219;
            while (v52 >= *(void *)v183)
            {
              if (v52 != *(void *)v183)
              {
                unsigned int v53 = v194[v52] + v183[0];
                unint64_t v54 = v52 + 1;
                unint64_t v55 = (CTPelAccum *)v32;
                unsigned int v56 = v53;
                int v57 = v52 + 1;
                int v58 = v183[0] + 1;
                goto LABEL_58;
              }
              ++v52;
LABEL_59:
              if (v52 == v30) {
                goto LABEL_60;
              }
            }
            unsigned int v53 = v194[*(void *)v183] + v52;
            unint64_t v54 = v52 + 1;
            unint64_t v55 = (CTPelAccum *)v32;
            unsigned int v56 = v53;
            int v57 = v183[0] + 1;
            int v58 = v52 + 1;
LABEL_58:
            double v59 = CTPelAccum::getDataDataAccumUnscaled(v55, v56, v57, v58) * 0.00390625;
            double v60 = CTPelAccum::getDataDataAccumUnscaled((CTPelAccum *)v32, v53, v183[0] + 1, 0) * 0.0000305175781;
            double v61 = CTPelAccum::getDataDataAccumUnscaled((CTPelAccum *)v32, v53, v54, 0) * 0.0000305175781;
            double v62 = CTPelAccum::getDataDataAccumUnscaled((CTPelAccum *)v32, v53, 0, 0);
            double v63 = *(double *)(*((void *)v185 + 1) + 8 * (v52 + v52 * *v185));
            double v64 = *(double *)(*a8 + 8 * v52);
            double v51 = v51 - (v60 * v64 + v63 * v59);
            double v46 = v46 - (v62 * 0.000000238418579 * v64 + v63 * v61);
            unint64_t v52 = v54;
            unsigned int v25 = v193;
            goto LABEL_59;
          }
LABEL_60:
          double v65 = DataDataAccumUnscaled * 0.000000238418579;
          double v187 = v170 / v50;
          double v195 = v172 / v169;
          double v66 = v195 * v195 - v65 * (v170 / v50);
          double v67 = 0.0 - v66;
          if (v66 >= 0.0) {
            double v67 = v195 * v195 - v65 * (v170 / v50);
          }
          char v12 = v182;
          a7 = v185;
          if (v67 < 1.0e-10) {
            goto LABEL_177;
          }
          double v68 = (v51 * v65 - v195 * v46) / v66;
          double v69 = v167 * v65 / v66 * -4.0;
          double v70 = v69 + v68 * v68;
          if (v70 < 0.0) {
            goto LABEL_177;
          }
          double v71 = (DgnSqrt(v69 + v68 * v68) - v68) * 0.5;
          double v72 = (-v68 - DgnSqrt(v70)) * 0.5;
          if (v71 <= 0.0 || v72 >= 1.0) {
            goto LABEL_177;
          }
          BOOL v74 = v71 + v72 <= 2.0 || v72 <= 0.0;
          if (!v74 || v65 == 0.0) {
            goto LABEL_177;
          }
          double v75 = v46 + -v195 * v71;
          double v76 = v75 / v65;
          char v77 = v177;
          if (v72 <= 0.0) {
            char v77 = 1;
          }
          if ((v77 & 1) != 0
            || (double v173 = v75 / v65,
                double v171 = DgnLog(v71),
                long double v78 = DgnLog(v72),
                double v79 = (v46 + -v195 * v72) / v65,
                double v76 = v173,
                v51 * v71
              + v167 * v171
              + v46 * v173
              + (v173 * (v65 * v173) + v187 * v71 * v71 + (v195 + v195) * v173 * v71) * -0.5 >= v51 * v72
                                                                                              + v167 * v78
                                                                                              + v46 * v79
                                                                                              + (v79 * (v65 * v79)
                                                                                               + v187 * v72 * v72
                                                                                               + (v195 + v195)
                                                                                               * v79
                                                                                               * v72)
                                                                                              * -0.5))
          {
            double v79 = v76;
            double v72 = v71;
          }
          double v80 = 1.0 - a9 + a9 * v72;
          if (!v164) {
            double v80 = v72;
          }
          double v81 = v211;
          *(double *)&v211[*(void *)v183] = v80;
          uint64_t v82 = v185[1];
          if (v82)
          {
            int v83 = *v185;
            uint64_t v84 = *((void *)v185 + 1);
            unsigned int v85 = v183[0];
            do
            {
              uint64_t v86 = *v81++;
              *(void *)(v84 + 8 * v85) = v86;
              v85 += v83;
              --v82;
            }
            while (v82);
          }
          *(double *)(*a8 + 8 * *(void *)v183) = v163 * v79;
          goto LABEL_170;
        }
      }
      char v196 = v42;
      if (v177) {
        unsigned int v87 = v219[*(void *)v183] + v183[0];
      }
      else {
        unsigned int v87 = v183[0];
      }
      if (v190)
      {
        int v88 = 0;
        uint64_t v89 = 0;
        uint64_t v188 = *(void *)(*(void *)(a2 + 64) + 16 * *(void *)v183);
        uint64_t v90 = v213;
        __int16 v91 = v214;
        do
        {
          uint64_t v92 = 0;
          uint64_t v93 = 0;
          uint64_t v94 = v89++;
          unsigned int v95 = v89 - v25;
          double v96 = 256.0;
          if (v89 == v191) {
            double v96 = 32768.0;
          }
          *(double *)&v196[v94] = v29 * ((double)*(uint64_t *)(v188 + 8 * v95) / v96);
          if (v89 == v191) {
            double v97 = 0.0;
          }
          else {
            double v97 = v184;
          }
          do
          {
            double v98 = CTPelAccum::getDataDataAccumUnscaled((CTPelAccum *)a2, v87, v95, v192 + v93);
            double v99 = 32768.0;
            if (!((v192 + v93) | v95)) {
              double v99 = 4194304.0;
            }
            if (v198 != v93 && v89 != v191) {
              double v99 = 256.0;
            }
            double v101 = v29 * (v98 / v99);
            if (v94 == v93) {
              double v102 = v97;
            }
            else {
              double v102 = 0.0;
            }
            *(double *)&uint64_t v103 = v102 + v101;
            v91[(v94 + v92)] = v103;
            v91[(v88 + v93)] = v103;
            v92 += v90;
            ++v93;
          }
          while (v89 != v93);
          v88 += v90;
          unsigned int v25 = v193;
        }
        while (v89 != v190);
      }
      a8 = v179;
      a7 = v185;
      uint64_t v32 = (uint64_t *)a2;
      uint64_t v30 = v181;
      char v12 = v182;
      if (v177)
      {
        LODWORD(v208) = v190;
        HIDWORD(v208) = v190;
        int v210 = 0;
        uint64_t v209 = 0;
        unint64_t v104 = *(void *)v183;
        if (v176)
        {
          uint64_t v209 = MemChunkAlloc(v168, 0);
          int v210 = v176;
        }
        unint64_t v105 = 0;
        do
        {
          if (v105 != v104)
          {
            unint64_t v189 = v105;
            LODWORD(v204) = 0;
            unsigned __int16 v203 = 0;
            if (v190)
            {
              unint64_t v106 = MemChunkAlloc(v178, 0);
              unsigned __int16 v203 = v106;
              LODWORD(v204) = v190;
            }
            else
            {
              unint64_t v106 = 0;
            }
            unsigned int v107 = v189;
            if (v25) {
              *unint64_t v106 = *(void *)(*a8 + 8 * v189);
            }
            int v108 = *a7;
            uint64_t v109 = *((void *)a7 + 1);
            double v110 = &v106[v180];
            do
            {
              *v110++ = *(void *)(v109 + 8 * v107);
              v107 += v108;
              --v30;
            }
            while (v30);
            int v111 = v189;
            if (v189 <= v104) {
              unint64_t v112 = v104;
            }
            else {
              unint64_t v112 = v189;
            }
            if (v189 >= v104) {
              int v111 = v104;
            }
            if (v190)
            {
              int v113 = 0;
              int v197 = 0;
              unsigned int v114 = v219[v112] + v111;
              int v115 = v208;
              uint64_t v116 = v209;
              uint64_t v117 = 1;
              do
              {
                uint64_t v118 = 0;
                int v119 = v197++;
                int v120 = v197 - v25;
                do
                {
                  double v121 = CTPelAccum::getDataDataAccumUnscaled((CTPelAccum *)a2, v114, v120, v192 + v118);
                  unsigned int v25 = v193;
                  double v122 = 32768.0;
                  if (!((v192 + v118) | v120)) {
                    double v122 = 4194304.0;
                  }
                  if (v198 != v118 && v197 != v193) {
                    double v122 = 256.0;
                  }
                  *(double *)&uint64_t v124 = v29 * (v121 / v122);
                  v116[v119] = v124;
                  v116[(v113 + v118)] = v124;
                  v119 += v115;
                  ++v118;
                }
                while (v117 != v118);
                ++v117;
                v113 += v115;
              }
              while (v197 != v190);
            }
            DgnVector::operator*((uint64_t *)&v203, (int *)&v208, (uint64_t)&v206);
            uint64_t v125 = v212;
            uint64_t v32 = (uint64_t *)a2;
            uint64_t v30 = v181;
            char v12 = v182;
            if (v212)
            {
              uint64_t v126 = v206;
              uint64_t v127 = (double *)v211;
              do
              {
                double v128 = *v126++;
                *uint64_t v127 = *v127 - v128;
                ++v127;
                --v125;
              }
              while (v125);
            }
            DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v206);
            DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v203);
            a8 = v179;
            a7 = v185;
            unint64_t v105 = v189;
            unint64_t v104 = *(void *)v183;
          }
          ++v105;
        }
        while (v105 != v30);
        DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v209);
      }
      DgnMatrix::invert(&v213, (uint64_t)&v208);
      unint64_t v34 = *(void *)v183;
      if (!v208) {
        goto LABEL_176;
      }
      BOOL v129 = v166;
      if (!*(void *)v183) {
        BOOL v129 = 0;
      }
      if (!v129)
      {
        DgnMatrix::cofactorMatrix((double **)a7, (uint64_t)&v203);
        uint64_t v216 = v203;
        DgnPrimFixArray<double>::copyArraySlice((uint64_t)&v217, &v204, 0, v205);
        DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v204);
      }
      LODWORD(v204) = 0;
      unsigned __int16 v203 = 0;
      if (v190) {
        break;
      }
      int v130 = 0;
      if (v25) {
        goto LABEL_151;
      }
LABEL_152:
      int v131 = (int)v216;
      uint64_t v132 = v217;
      int v133 = &v130[v180];
      uint64_t v134 = v30;
      unsigned int v135 = v183[0];
      do
      {
        *v133++ = v132[v135];
        v135 += v131;
        --v134;
      }
      while (v134);
      DgnVector::operator*((uint64_t *)&v203, (int *)&v208, (uint64_t)&v206);
      uint64_t v136 = v207;
      if (v207)
      {
        uint64_t v137 = v206;
        double v138 = 0.0;
        int v139 = (double *)v203;
        unint64_t v140 = v206;
        uint64_t v141 = v207;
        do
        {
          double v142 = *v140++;
          double v143 = v142;
          double v144 = *v139++;
          double v138 = v138 + v143 * v144;
          --v141;
        }
        while (v141);
        double v145 = 0.0;
        uint64_t v146 = (double *)v211;
        do
        {
          double v147 = *v137++;
          double v148 = v147;
          double v149 = *v146++;
          double v145 = v145 + v148 * v149;
          --v136;
        }
        while (v136);
      }
      else
      {
        double v138 = 0.0;
        double v145 = 0.0;
      }
      double v150 = v29 * v138;
      if (v29 * v138 < 1.0e-10 || (double v151 = v150 * -4.0 * v165 + v145 * v145, v151 < 0.0))
      {
        DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v206);
        DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v203);
LABEL_176:
        DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v209);
LABEL_177:
        DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v211);
        DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v214);
        goto LABEL_178;
      }
      double v152 = DgnSqrt(v151);
      DgnVector::operator*((uint64_t)&v203, (uint64_t)v200, v29 * ((v152 - v145) / (v150 + v150)));
      DgnVector::operator+((uint64_t)&v211, v200, (uint64_t)v201);
      DgnMatrix::operator*(&v208, v201, (uint64_t)v202);
      DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)v201);
      DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)v200);
      uint64_t v153 = v202[0];
      if (v25) {
        *(void *)(*a8 + 8 * *(void *)v183) = *(void *)v202[0];
      }
      int v154 = *a7;
      uint64_t v155 = *((void *)a7 + 1);
      unsigned int v156 = (uint64_t *)(v153 + v180 * 8);
      uint64_t v157 = v30;
      unsigned int v158 = v183[0];
      do
      {
        uint64_t v159 = *v156++;
        *(void *)(v155 + 8 * v158) = v159;
        v158 += v154;
        --v157;
      }
      while (v157);
      DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)v202);
      DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v206);
      DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v203);
      DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v209);
LABEL_170:
      DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v211);
      uint64_t v41 = &v214;
LABEL_171:
      DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)v41);
      ++v34;
      unint64_t v33 = 8 * v181;
      if (v34 == v30) {
        goto LABEL_172;
      }
    }
    int v130 = MemChunkAlloc(v178, 0);
    unsigned __int16 v203 = v130;
    LODWORD(v204) = v190;
    if (!v25) {
      goto LABEL_152;
    }
LABEL_151:
    *int v130 = 0;
    goto LABEL_152;
  }
  char v12 = 0;
  return v12 & 1;
}

void sub_213E21964(_Unwind_Exception *a1)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 - 168);
  _Unwind_Resume(a1);
}

uint64_t ConstrainedTransAccMgr::computeMeansTransform(ConstrainedTransAccMgr *this, CTPelAccum *a2, int a3, DgnMatrix *a4)
{
  unsigned int v5 = a2;
  int v7 = *(unsigned __int8 *)(*(void *)this + 48);
  if (*((unsigned char *)a2 + 20)) {
    int v8 = 0;
  }
  else {
    int v8 = a3;
  }
  uint64_t v9 = *((unsigned int *)a2 + 4);
  char v77 = 0;
  uint64_t v78 = 0;
  int v59 = v8;
  if (v8 == 1)
  {
    BOOL v74 = 0;
    unint64_t v10 = realloc_array(0, &v74, 4 * v9, 0, 0, 1);
    double v11 = v74;
    char v77 = v74;
    LODWORD(v78) = v9;
    HIDWORD(v78) = v10 >> 2;
    *(_DWORD *)BOOL v74 = 0;
    if (v9 >= 2)
    {
      int v12 = 0;
      for (uint64_t i = 1; i != v9; ++i)
      {
        v12 += i;
        v11[i] = v12;
      }
    }
  }
  uint64_t v65 = v9;
  double v14 = (double)*((uint64_t *)v5 + 7) * 0.00390625;
  if (v14 != 0.0)
  {
    int v55 = 1;
    if (v7)
    {
      if (a3)
      {
        int v55 = *(_DWORD *)(*(void *)(*(void *)this + 8) + 388);
        if (!v55)
        {
          uint64_t v53 = 1;
          goto LABEL_54;
        }
      }
    }
    int v56 = 0;
    double v15 = 1.0 / (v14 * 1000.0);
    LODWORD(v16) = v9;
    int v60 = v16 * v16;
    uint64_t v57 = 8 * (v16 * v16);
    uint64_t v58 = 8 * v9;
    double v66 = v5;
    while (!v16)
    {
LABEL_50:
      uint64_t v53 = 1;
      if (++v56 == v55) {
        goto LABEL_54;
      }
    }
    unint64_t v17 = 0;
    while (1)
    {
      LODWORD(v74) = v16;
      HIDWORD(v74) = v16;
      int v76 = 0;
      double v75 = 0;
      if (v60)
      {
        double v75 = MemChunkAlloc(v57, 0);
        int v76 = v60;
      }
      unsigned int v73 = 0;
      double v72 = 0;
      uint64_t v18 = MemChunkAlloc(v58, 0);
      double v72 = (double *)v18;
      unsigned int v73 = v16;
      if (v59) {
        unint64_t v19 = (v77[v17] + v17);
      }
      else {
        unint64_t v19 = v17;
      }
      int v20 = 0;
      uint64_t v21 = 0;
      unint64_t v62 = v17;
      uint64_t v63 = *(void *)(*((void *)v5 + 16) + 16 * v17);
      int v22 = (int)v74;
      unsigned int v23 = v75;
      uint64_t v24 = 1;
      double v64 = v18;
      do
      {
        uint64_t v25 = 0;
        uint64_t v26 = v21++;
        *(double *)&v18[v26] = v15 * ((double)*(uint64_t *)(v63 + 8 * v21) * 0.00390625);
        do
        {
          unint64_t v27 = v19;
          double MeanMeanAccumUnscaled = CTPelAccum::getMeanMeanAccumUnscaled(v66, v19, v21, (int)v25 + 1);
          unint64_t v19 = v27;
          *(double *)&uint64_t v29 = v15 * (MeanMeanAccumUnscaled * 0.00390625);
          v23[v26] = v29;
          v23[(v20 + v25)] = v29;
          LODWORD(v26) = v26 + v22;
          ++v25;
        }
        while (v24 != v25);
        ++v24;
        v20 += v22;
        uint64_t v18 = v64;
        uint64_t v16 = v65;
      }
      while (v21 != v65);
      unint64_t v30 = v62;
      if (v59)
      {
        LODWORD(v69) = v65;
        HIDWORD(v69) = v65;
        int v71 = 0;
        double v70 = 0;
        if (v60)
        {
          double v70 = MemChunkAlloc(v57, 0);
          int v71 = v60;
        }
        unint64_t v31 = 0;
        do
        {
          if (v31 != v30)
          {
            DgnMatrix::getRow((uint64_t *)a4, v31, (uint64_t)v68);
            int v32 = 0;
            int v33 = 0;
            if (v31 <= v30) {
              unint64_t v34 = v30;
            }
            else {
              unint64_t v34 = v31;
            }
            if (v31 >= v30) {
              int v35 = v30;
            }
            else {
              int v35 = v31;
            }
            unsigned int v36 = v77[v34] + v35;
            int v37 = v69;
            uint64_t v38 = v70;
            uint64_t v39 = 1;
            do
            {
              uint64_t v40 = 0;
              unsigned int v41 = v33++;
              do
              {
                *(double *)&uint64_t v42 = v15 * (CTPelAccum::getMeanMeanAccumUnscaled(v66, v36, v33, (int)v40 + 1) * 0.00390625);
                v38[v41] = v42;
                v38[(v32 + v40)] = v42;
                v41 += v37;
                ++v40;
              }
              while (v39 != v40);
              ++v39;
              v32 += v37;
              uint64_t v16 = v65;
            }
            while (v33 != v65);
            DgnVector::operator*(v68, (int *)&v69, (uint64_t)v67);
            uint64_t v43 = v73;
            unint64_t v30 = v62;
            if (v73)
            {
              unsigned int v44 = (double *)v67[0];
              uint64_t v45 = v72;
              do
              {
                double v46 = *v44++;
                double *v45 = *v45 - v46;
                ++v45;
                --v43;
              }
              while (v43);
            }
            DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)v67);
            DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)v68);
          }
          ++v31;
        }
        while (v31 != v16);
        DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v70);
      }
      DgnMatrix::invert((double **)&v74, (uint64_t)&v69);
      if (!v69) {
        break;
      }
      DgnMatrix::operator*(&v69, &v72, (uint64_t)v68);
      uint64_t v47 = *((unsigned int *)a4 + 1);
      unsigned int v5 = v66;
      if (v47)
      {
        double v48 = (uint64_t *)v68[0];
        int v49 = *(_DWORD *)a4;
        unsigned int v50 = v30;
        uint64_t v51 = *((void *)a4 + 1);
        do
        {
          uint64_t v52 = *v48++;
          *(void *)(v51 + 8 * v50) = v52;
          v50 += v49;
          --v47;
        }
        while (v47);
      }
      DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)v68);
      DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v70);
      DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v72);
      DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v75);
      unint64_t v17 = v30 + 1;
      if (v17 == v16) {
        goto LABEL_50;
      }
    }
    DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v70);
    DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v72);
    DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v75);
  }
  uint64_t v53 = 0;
LABEL_54:
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v77);
  return v53;
}

void sub_213E21EEC(_Unwind_Exception *a1)
{
  DgnPrimArray<unsigned int>::~DgnPrimArray(v1 - 120);
  _Unwind_Resume(a1);
}

BOOL fillIntTransform(uint64_t a1, double **a2, uint64_t *a3, _DWORD **a4, unsigned int a5, int a6, int a7, unsigned int a8)
{
  if (a6 == 3 || !a8)
  {
LABEL_19:
    BOOL v12 = 1;
    if (a8 && a7)
    {
      unint64_t v19 = *a2;
      double v20 = (double)a5;
      uint64_t v21 = *a4;
      uint64_t v22 = a8 - 1;
      do
      {
        double v23 = *v19++;
        double v24 = v23 * v20;
        if (v23 * v20 >= 0.0) {
          double v25 = 0.5;
        }
        else {
          double v25 = -0.5;
        }
        *v21++ = (int)(v24 + v25);
        BOOL v12 = v24 <= 1073741820.0 && v24 >= -1073741820.0;
        BOOL v27 = v22-- != 0;
      }
      while (v12 && v27);
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = *(void *)(a1 + 8);
    double v10 = (double)a5;
    uint64_t v11 = *a3;
    while (a6 == 2)
    {
      BOOL v12 = 0;
      double v13 = *(double *)(v9 + 8 * (v8 + v8 * *(_DWORD *)a1)) * v10;
      if (v13 >= 0.0) {
        double v14 = 0.5;
      }
      else {
        double v14 = -0.5;
      }
      **(_DWORD **)(v11 + 16 * v8) = (int)(v13 + v14);
      if (v13 < -32768.0 || v13 > 32767.0) {
        return v12;
      }
LABEL_18:
      if (++v8 == a8) {
        goto LABEL_19;
      }
    }
    uint64_t v15 = 0;
    uint64_t v16 = *(void *)(v11 + 16 * v8);
    while (1)
    {
      BOOL v12 = 0;
      double v17 = *(double *)(v9 + 8 * (v8 + *(_DWORD *)a1 * v15)) * v10;
      double v18 = v17 >= 0.0 ? 0.5 : -0.5;
      *(_DWORD *)(v16 + 4 * v15) = (int)(v17 + v18);
      if (v17 < -32768.0 || v17 > 32767.0) {
        break;
      }
      if (a8 == ++v15) {
        goto LABEL_18;
      }
    }
  }
  return v12;
}

void DgnArray<LinearTransform>::copyArraySlice(uint64_t a1, void *a2, int a3, unsigned int a4)
{
  int v8 = *(_DWORD *)(a1 + 8);
  if (v8 >= 1)
  {
    uint64_t v9 = 72 * v8 - 72;
    do
    {
      LinearTransform::~LinearTransform((LinearTransform *)(*(void *)a1 + v9));
      v9 -= 72;
    }
    while (v9 != -72);
  }
  *(_DWORD *)(a1 + 8) = 0;
  unsigned int v10 = *(_DWORD *)(a1 + 12);
  if (a4 <= v10)
  {
    unsigned int v11 = 0;
    unsigned int v12 = 0;
    if (!a4) {
      goto LABEL_14;
    }
  }
  else
  {
    DgnArray<LinearTransform>::reallocElts(a1, a4 - v10, 0);
    unsigned int v11 = *(_DWORD *)(a1 + 8);
  }
  int v13 = 0;
  unsigned int v12 = v11;
  do
  {
    LinearTransform::LinearTransform((LinearTransform *)(*(void *)a1 + 72 * v12), (const LinearTransform *)(*a2 + 72 * (a3 + v13)));
    unsigned int v12 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v12;
    ++v13;
  }
  while (a4 != v13);
  if (v12 > a4)
  {
    if ((int)v12 > (int)a4)
    {
      uint64_t v14 = (int)v12;
      uint64_t v15 = 72 * (int)v12 - 72;
      do
      {
        --v14;
        LinearTransform::~LinearTransform((LinearTransform *)(*(void *)a1 + v15));
        v15 -= 72;
      }
      while (v14 > (int)a4);
    }
    goto LABEL_17;
  }
LABEL_14:
  unsigned int v16 = a4 - v12;
  if (a4 > v12)
  {
    uint64_t v17 = 72 * v12;
    do
    {
      LinearTransform::LinearTransform((LinearTransform *)(*(void *)a1 + v17));
      v17 += 72;
      --v16;
    }
    while (v16);
  }
LABEL_17:
  *(_DWORD *)(a1 + 8) = a4;
}

unint64_t CTFTMgr::setSpeakerCTList(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v11 = a1 + 16;
  DgnArray<LinearTransform>::copyArraySlice((uint64_t)(a1 + 16), (void *)a2, 0, *(_DWORD *)(a2 + 8));
  DgnPrimArray<int>::copyArraySlice((unint64_t)(a1 + 20), (uint64_t *)a3, 0, *(_DWORD *)(a3 + 8));
  a1[14] = a1[18];
  DgnPrimArray<int>::copyArraySlice((unint64_t)(a1 + 6), (uint64_t *)a4, 0, *(_DWORD *)(a4 + 8));
  DgnArray<LinearTransform>::copyArraySlice((uint64_t)(a1 + 26), (void *)a5, 0, *(_DWORD *)(a5 + 8));
  unint64_t result = DgnPrimArray<int>::copyArraySlice((unint64_t)(a1 + 30), (uint64_t *)a6, 0, *(_DWORD *)(a6 + 8));
  a1[24] = a1[28];
  int v13 = a1[14];
  if (v13) {
    int v13 = *(_DWORD *)(*(void *)v11 + 4);
  }
  a1[2] = v13;
  return result;
}

uint64_t multiplyIntTransform(LinearTransform *a1, const LinearTransform *a2, unsigned int a3, int a4, int a5, DgnMatrix *this, int *a7)
{
  DgnMatrix::makeIdentity(this, (uint64_t)&v44);
  DgnMatrix::makeIdentity(this, (uint64_t)&v42);
  DgnMatrix::makeIdentity(this, (uint64_t)&v40);
  int v39 = 0;
  uint64_t v38 = 0;
  if (this)
  {
    uint64_t v38 = (double *)MemChunkAlloc(8 * this, 0);
    int v39 = (int)this;
    bzero(v38, 8 * this);
    unsigned int v36 = (double *)MemChunkAlloc(8 * this, 0);
    int v37 = (int)this;
    bzero(v36, 8 * this);
    unint64_t v34 = (double *)MemChunkAlloc(8 * this, 0);
    int v35 = (int)this;
    bzero(v34, 8 * this);
  }
  else
  {
    int v37 = 0;
    unsigned int v36 = 0;
    int v35 = 0;
    unint64_t v34 = 0;
  }
  LinearTransform::getUnscaledData((int *)a1, &v44, &v38);
  LinearTransform::getUnscaledData((int *)a2, &v42, &v36);
  if (a4 == 3)
  {
    if (a5)
    {
      DgnVector::operator+((uint64_t)&v36, &v38, (uint64_t)&v31);
      DgnPrimFixArray<double>::copyArraySlice((uint64_t)&v34, (uint64_t *)&v31, 0, v32);
      DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v31);
    }
    uint64_t v14 = 0;
  }
  else
  {
    DgnMatrix::operator*(&v44, (DgnMatrix *)&v42, (uint64_t)&v31);
    uint64_t v40 = (double *)v31;
    DgnPrimFixArray<double>::copyArraySlice((uint64_t)v41, &v32, 0, v33);
    DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v32);
    uint64_t v14 = this;
    if (a5)
    {
      DgnMatrix::operator*(&v44, &v36, (uint64_t)&v29);
      DgnVector::operator+((uint64_t)&v29, &v38, (uint64_t)&v31);
      DgnPrimFixArray<double>::copyArraySlice((uint64_t)&v34, (uint64_t *)&v31, 0, v32);
      DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v31);
      DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v29);
      uint64_t v14 = this;
    }
  }
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(&v29, (uint64_t)v14);
  unint64_t v15 = v30;
  if (v30)
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    if (a4 == 2) {
      unsigned int v18 = 1;
    }
    else {
      unsigned int v18 = this;
    }
    do
    {
      uint64_t v19 = v29 + v16;
      unsigned int v20 = *(_DWORD *)(v29 + v16 + 12);
      if (v18 > v20)
      {
        DgnPrimArray<unsigned int>::reallocElts(v29 + v16, v18 - v20, 0);
        unint64_t v15 = v30;
      }
      *(_DWORD *)(v19 + 8) = v18;
      ++v17;
      v16 += 16;
    }
    while (v17 < v15);
  }
  if (a5) {
    unsigned int v21 = this;
  }
  else {
    unsigned int v21 = 0;
  }
  BOOL v27 = 0;
  uint64_t v28 = 0;
  if (v21)
  {
    unint64_t v31 = 0;
    HIDWORD(v28) = realloc_array(0, &v31, 4 * v21, 0, 0, 1) >> 2;
    BOOL v27 = v31;
  }
  LODWORD(v28) = v21;
  if (!fillIntTransform((uint64_t)&v40, &v34, &v29, &v27, a3, a4, a5, this))
  {
    DgnMatrix::makeIdentity(this, (uint64_t)&v31);
    uint64_t v40 = (double *)v31;
    DgnPrimFixArray<double>::copyArraySlice((uint64_t)v41, &v32, 0, v33);
    DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v32);
    LODWORD(v32) = 0;
    unint64_t v31 = 0;
    if (this)
    {
      unint64_t v31 = MemChunkAlloc(8 * this, 0);
      LODWORD(v32) = this;
      bzero(v31, 8 * this);
    }
    DgnPrimFixArray<double>::copyArraySlice((uint64_t)&v34, (uint64_t *)&v31, 0, this);
    DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v31);
    fillIntTransform((uint64_t)&v40, &v34, &v29, &v27, a3, a4, a5, this);
  }
  LinearTransform::setSize((uint64_t)a1, (int)this, (int)this);
  LinearTransform::setTransform((uint64_t)a1, (uint64_t)&v29, a4, (uint64_t)&v27, a5, a3, 0, v22);
  double v23 = DgnMatrix::determinant(&v40);
  double v24 = DgnLog(v23) * (double)a3;
  double v25 = 0.5;
  if (v24 < 0.0) {
    double v25 = -0.5;
  }
  *a7 = (int)(v24 + v25);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v27);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)&v29);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v34);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v36);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v38);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)v41);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v43);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v45);
}

void sub_213E226D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&a14);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&a12);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&a17);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&a19);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&a21);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&a24);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&a27);
  DgnPrimFixArray<double>::~DgnPrimFixArray(v27 - 104);
  _Unwind_Resume(a1);
}

unint64_t CTFTMgr::setChannelCTList(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v11 = a1 + 36;
  DgnArray<LinearTransform>::copyArraySlice((uint64_t)(a1 + 36), (void *)a2, 0, *(_DWORD *)(a2 + 8));
  DgnPrimArray<int>::copyArraySlice((unint64_t)(a1 + 40), (uint64_t *)a3, 0, *(_DWORD *)(a3 + 8));
  a1[34] = a1[38];
  DgnPrimArray<int>::copyArraySlice((unint64_t)(a1 + 10), (uint64_t *)a4, 0, *(_DWORD *)(a4 + 8));
  DgnArray<LinearTransform>::copyArraySlice((uint64_t)(a1 + 46), (void *)a5, 0, *(_DWORD *)(a5 + 8));
  unint64_t result = DgnPrimArray<int>::copyArraySlice((unint64_t)(a1 + 50), (uint64_t *)a6, 0, *(_DWORD *)(a6 + 8));
  a1[44] = a1[48];
  int v13 = a1[34];
  if (v13) {
    int v13 = *(_DWORD *)(*(void *)v11 + 4);
  }
  a1[3] = v13;
  return result;
}

uint64_t ConstrainedTransAccMgr::copyBackMeans(AdaptController **this, uint64_t a2, uint64_t a3, LinearTransform *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = a3;
  unsigned int v10 = a2;
  unint64_t PelMgr = AdaptController::getPelMgr(*this, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  uint64_t v13 = PelMgr;
  v23[0] = 0;
  v23[1] = 0;
  v22[0] = 0;
  v22[1] = 0;
  v21[0] = 0;
  v21[1] = 0;
  int v14 = *(_DWORD *)(PelMgr + 16);
  if (v14 == 1) {
    PelMgr::unpackGenoneComponent(PelMgr, v10, v9, (uint64_t)v23, (uint64_t)v21);
  }
  else {
    PelMgr::unpackGenoneComponent(PelMgr, v10, v9, (uint64_t)v23, (uint64_t)v22, v12);
  }
  v20[0] = 0;
  v20[1] = 0;
  LinearTransform::transformMeans((int *)a4, (uint64_t)v23, (uint64_t)v20);
  if (v14 == 1) {
    PelMgr::packGenoneComponent(v13, v10, v9, v20, v21, 1, v15, v16, v17, v18);
  }
  else {
    PelMgr::packGenoneComponent(v13, v10, v9, v20, v22, v15);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v20);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v21);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v22);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v23);
}

void sub_213E229B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

unint64_t CTFTMgr::setOnlineCTList(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5 = a1 + 56;
  DgnArray<LinearTransform>::copyArraySlice((uint64_t)(a1 + 56), (void *)a2, 0, *(_DWORD *)(a2 + 8));
  unint64_t result = DgnPrimArray<int>::copyArraySlice((unint64_t)(a1 + 60), (uint64_t *)a3, 0, *(_DWORD *)(a3 + 8));
  int v7 = a1[58];
  a1[54] = v7;
  if (v7) {
    int v7 = *(_DWORD *)(*(void *)v5 + 4);
  }
  a1[4] = v7;
  return result;
}

double DgnVector::operator+@<D0>(uint64_t a1@<X0>, double **a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  double result = DgnPrimFixArray<double>::copyArraySlice(a3, (uint64_t *)a1, 0, *(_DWORD *)(a1 + 8));
  uint64_t v6 = *(unsigned int *)(a3 + 8);
  if (v6)
  {
    int v7 = *a2;
    int v8 = *(double **)a3;
    do
    {
      double v9 = *v7++;
      double result = v9 + *v8;
      *v8++ = result;
      --v6;
    }
    while (v6);
  }
  return result;
}

void *DgnArray<DgnArray<DgnPrimArray<long long>>>::destructAt(void *result, int a2, int a3)
{
  unint64_t v3 = result;
  uint64_t v4 = a3 + a2;
  uint64_t v5 = a2;
  uint64_t v6 = v4 + 1;
  for (uint64_t i = 16 * v4 - 16; --v6 > v5; uint64_t i = v8)
  {
    uint64_t v8 = i - 16;
    double result = DgnArray<DgnPrimArray<unsigned char>>::releaseAll(*v3 + i);
  }
  return result;
}

void *DgnArray<DgnArray<DgnPrimArray<int>>>::releaseAll(uint64_t a1)
{
  DgnArray<DgnArray<DgnPrimArray<int>>>::destructAt((void *)a1, 0, *(_DWORD *)(a1 + 8));
  double result = *(void **)a1;
  if (*(void *)a1)
  {
    double result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

void *DgnArray<DgnArray<DgnPrimArray<int>>>::destructAt(void *result, int a2, int a3)
{
  unint64_t v3 = result;
  uint64_t v4 = a3 + a2;
  uint64_t v5 = a2;
  uint64_t v6 = v4 + 1;
  for (uint64_t i = 16 * v4 - 16; --v6 > v5; uint64_t i = v8)
  {
    uint64_t v8 = i - 16;
    double result = DgnArray<DgnPrimArray<unsigned char>>::releaseAll(*v3 + i);
  }
  return result;
}

uint64_t DgnArray<DgnArray<DgnPrimArray<int>>>::copyArraySlice(uint64_t a1, void *a2, int a3, unsigned int a4)
{
  uint64_t result = (uint64_t)DgnArray<DgnArray<DgnPrimArray<int>>>::destructAt((void *)a1, 0, *(_DWORD *)(a1 + 8));
  *(_DWORD *)(a1 + 8) = 0;
  unsigned int v9 = *(_DWORD *)(a1 + 12);
  if (a4 <= v9)
  {
    unsigned int v10 = 0;
    unsigned int v11 = 0;
    if (!a4) {
      goto LABEL_8;
    }
  }
  else
  {
    DgnArray<DgnPrimArray<double>>::reallocElts(a1, a4 - v9, 0);
    unsigned int v10 = *(_DWORD *)(a1 + 8);
  }
  int v12 = 0;
  unsigned int v11 = v10;
  do
  {
    uint64_t v13 = *a2 + 16 * (a3 + v12);
    int v14 = (void *)(*(void *)a1 + 16 * v11);
    *int v14 = 0;
    v14[1] = 0;
    uint64_t result = DgnArray<DgnPrimArray<unsigned int>>::copyArraySlice((uint64_t)v14, (void *)v13, 0, *(_DWORD *)(v13 + 8));
    unsigned int v11 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v11;
    ++v12;
  }
  while (a4 != v12);
  if (v11 > a4)
  {
    uint64_t result = (uint64_t)DgnArray<DgnArray<DgnPrimArray<int>>>::destructAt((void *)a1, a4, v11 - a4);
    goto LABEL_11;
  }
LABEL_8:
  if (v11 < a4)
  {
    unint64_t v15 = a4 - (unint64_t)v11;
    uint64_t v16 = 16 * v11;
    do
    {
      double v17 = (void *)(*(void *)a1 + v16);
      *double v17 = 0;
      v17[1] = 0;
      v16 += 16;
      --v15;
    }
    while (v15);
  }
LABEL_11:
  *(_DWORD *)(a1 + 8) = a4;
  return result;
}

CTPelAccum *DgnIOwnArray<CTPelAccum *>::destructAt(CTPelAccum *result, int a2, int a3)
{
  if (a3 + a2 > a2)
  {
    unint64_t v3 = result;
    uint64_t v4 = a2;
    uint64_t v5 = a3 + a2 - 1;
    do
    {
      uint64_t result = DgnDelete<CTPelAccum>(*(CTPelAccum **)(*(void *)v3 + 8 * v5));
      *(void *)(*(void *)v3 + 8 * v5) = 0;
    }
    while (v5-- > v4);
  }
  return result;
}

void *DgnArray<LinearTransform>::DgnArray(void *a1, uint64_t a2)
{
  unsigned int v2 = a2;
  *a1 = 0;
  a1[1] = 0;
  if (a2)
  {
    DgnArray<LinearTransform>::reallocElts((uint64_t)a1, a2, 0);
    unsigned int v4 = *((_DWORD *)a1 + 2);
    if (v4 > v2)
    {
      if ((int)v4 > (int)v2)
      {
        uint64_t v5 = (int)v4;
        uint64_t v6 = 72 * (int)v4 - 72;
        do
        {
          --v5;
          LinearTransform::~LinearTransform((LinearTransform *)(*a1 + v6));
          v6 -= 72;
        }
        while (v5 > (int)v2);
      }
      goto LABEL_11;
    }
  }
  else
  {
    unsigned int v4 = 0;
  }
  unsigned int v7 = v2 - v4;
  if (v2 > v4)
  {
    uint64_t v8 = 72 * v4;
    do
    {
      LinearTransform::LinearTransform((LinearTransform *)(*a1 + v8));
      v8 += 72;
      --v7;
    }
    while (v7);
  }
LABEL_11:
  *((_DWORD *)a1 + 2) = v2;
  return a1;
}

unint64_t DgnArray<LinearTransform>::reallocElts(uint64_t a1, uint64_t a2, int a3)
{
  int v3 = a2;
  if (a3) {
    int v3 = minAddAllocWithExtra(a2, *(_DWORD *)(a1 + 12));
  }
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 12) + v3;
  uint64_t v8 = 0;
  unint64_t result = realloc_array(*(void **)a1, &v8, 72 * v6, 72 * v5, 72 * v5, 1);
  *(_DWORD *)(a1 + 12) = result / 0x48;
  *(void *)a1 = v8;
  return result;
}

void DgnSharedMemMgr::DgnSharedMemMgr(DgnSharedMemMgr *this, const char *a2)
{
  int v3 = DgnString::DgnString(this, a2);
  recursive_mutex_init((_opaque_pthread_mutex_t *)((char *)v3 + 16));
  *((_DWORD *)this + 20) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 11) = 0;
}

void sub_213E22ECC(_Unwind_Exception *a1)
{
  DgnString::~DgnString(v1);
  _Unwind_Resume(a1);
}

void DgnSharedMemMgr::startupDSMMgr(DgnSharedMemMgr *this, const char *a2)
{
  int v3 = MemChunkAlloc(0x70uLL, 0);
  DgnSharedMemMgr::DgnSharedMemMgr((DgnSharedMemMgr *)v3, (const char *)this);
  DgnSharedMemMgr::smpDSMMgr = v4;
}

void DgnSharedMemMgr::printSize(DgnSharedMemMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmmgr.cpp", 78, (DgnString *)&v77);
  if (v78) {
    uint64_t v16 = (void *)v77;
  }
  else {
    uint64_t v16 = &unk_2140991C2;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_2140991C2, a3, &unk_2140991C2, v16);
  BOOL v74 = a5;
  DgnString::~DgnString((DgnString *)&v77);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_2140991C2);
  uint64_t v21 = sizeObject(this);
  uint64_t v22 = sizeObject(this);
  uint64_t v23 = sizeObject(this);
  uint64_t v24 = (a3 + 1);
  uint64_t v73 = a3;
  uint64_t v25 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmmgr.cpp", 80, (DgnString *)&v77);
  if (v78) {
    unsigned int v30 = (void *)v77;
  }
  else {
    unsigned int v30 = &unk_2140991C2;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v26, v27, v28, v29, v24, &unk_2140991C2, v25, v25, v30, v21, v22, v23);
  DgnString::~DgnString((DgnString *)&v77);
  *a4 += v21;
  *v74 += v22;
  *a6 += v23;
  uint64_t v31 = sizeObject((uint64_t)this + 16, 0);
  uint64_t v32 = sizeObject((uint64_t)this + 16, 1);
  uint64_t v33 = sizeObject((uint64_t)this + 16, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmmgr.cpp", 81, (DgnString *)&v77);
  if (v78) {
    uint64_t v38 = (void *)v77;
  }
  else {
    uint64_t v38 = &unk_2140991C2;
  }
  uint64_t v72 = v25;
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v34, v35, v36, v37, v24, &unk_2140991C2, v25, v25, v38, v31, v32, v33);
  DgnString::~DgnString((DgnString *)&v77);
  *a4 += v31;
  *v74 += v32;
  *a6 += v33;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmmgr.cpp", 82, (DgnString *)&v77);
  if (v78) {
    uint64_t v43 = (void *)v77;
  }
  else {
    uint64_t v43 = &unk_2140991C2;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v39, v40, v41, v42, v24, &unk_2140991C2, v24, &unk_2140991C2, v43);
  int v71 = a6;
  DgnString::~DgnString((DgnString *)&v77);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v44, v45, v46, v47, v24, &unk_2140991C2);
  unint64_t v48 = *((unsigned int *)this + 26);
  if (v48)
  {
    unint64_t v49 = 0;
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    uint64_t v53 = a4;
    do
    {
      uint64_t v54 = *((void *)this + 12);
      if (*(void *)(v54 + 8 * v49))
      {
        unint64_t v76 = 0;
        unint64_t v77 = 0;
        unint64_t v75 = 0;
        DgnSharedMemSet::printSize(*(DSMSetData ***)(v54 + 8 * v49), v49, (v73 + 2), &v77, &v76, &v75);
        v52 += v77;
        v51 += v76;
        v50 += v75;
        unint64_t v48 = *((unsigned int *)this + 26);
      }
      ++v49;
    }
    while (v49 < v48);
  }
  else
  {
    uint64_t v52 = 0;
    uint64_t v51 = 0;
    uint64_t v50 = 0;
    unint64_t v48 = 0;
    uint64_t v53 = a4;
  }
  uint64_t v55 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v55 = 16;
  }
  uint64_t v56 = v55 + v52;
  uint64_t v57 = v55 + v51;
  char v58 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    char v58 = 3;
  }
  uint64_t v59 = v56 + ((unint64_t)*((unsigned int *)this + 27) << v58);
  uint64_t v60 = v57 + (v48 << v58);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmmgr.cpp", 82, (DgnString *)&v77);
  if (v78) {
    uint64_t v65 = (void *)v77;
  }
  else {
    uint64_t v65 = &unk_2140991C2;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v61, v62, v63, v64, v24, &unk_2140991C2, v72, v72, v65, v59, v60, v50);
  DgnString::~DgnString((DgnString *)&v77);
  *v53 += v59;
  *v74 += v60;
  *v71 += v50;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmmgr.cpp", 84, (DgnString *)&v77);
  if (v78) {
    double v70 = (void *)v77;
  }
  else {
    double v70 = &unk_2140991C2;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v66, v67, v68, v69, v73, &unk_2140991C2, (35 - v73), (35 - v73), v70, *v53, *v74, *v71);
  DgnString::~DgnString((DgnString *)&v77);
}

void sub_213E2336C(_Unwind_Exception *a1)
{
  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t DgnSharedMemMgr::getMaybeCreateSetObjectEx(DgnSharedMemMgr *this, const DgnString *a2, const DgnString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/mrecutil/dsmmgr.cpp", 115, (uint64_t)"mrecutil/dsmmgr", 2, (uint64_t)"%s", a7, a8, (char)&unk_2140991C2);
  DgnString::DgnString((DgnString *)&v26, this);
  DgnString::operator+=(&v26, (uint64_t)a3);
  uint64_t v11 = *((unsigned int *)this + 26);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  ++*((_DWORD *)this + 20);
  uint64_t v12 = (void *)((char *)this + 96);
  *((void *)this + 11) = pthread_self();
  if (v11)
  {
    uint64_t v14 = 0;
    while (1)
    {
      uint64_t SetPrefixName = DgnSharedMemSet::getSetPrefixName(*(DgnSharedMemSet **)(*v12 + 8 * v14));
      uint64_t v16 = *(_DWORD *)(SetPrefixName + 8) ? *(const char **)SetPrefixName : (const char *)&unk_2140991C2;
      uint64_t v17 = (const char *)(v27 ? v26 : &unk_2140991C2);
      if (!strcmp(v16, v17))
      {
        uint64_t SetCacheDir = DgnSharedMemSet::getSetCacheDir(*(DgnSharedMemSet **)(*v12 + 8 * v14));
        uint64_t v19 = *(_DWORD *)(SetCacheDir + 8) ? *(const char **)SetCacheDir : (const char *)&unk_2140991C2;
        uint64_t v20 = *((_DWORD *)a2 + 2) ? *(const char **)a2 : (const char *)&unk_2140991C2;
        if (!strcmp(v19, v20)) {
          break;
        }
      }
      if (v11 == ++v14)
      {
        LODWORD(v14) = v11;
        goto LABEL_21;
      }
    }
  }
  else
  {
    LODWORD(v14) = 0;
  }
  if (v14 == v11)
  {
LABEL_21:
    Set = DgnSharedMemSet::createSet(a2, (const DgnString *)&v26, v13);
    unsigned int v22 = *((_DWORD *)this + 26);
    if (v22 == *((_DWORD *)this + 27))
    {
      DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 96, 1, 1);
      unsigned int v22 = *((_DWORD *)this + 26);
    }
    *(void *)(*((void *)this + 12) + 8 * v22) = Set;
    *((_DWORD *)this + 26) = v22 + 1;
  }
  uint64_t v23 = *(void *)(*((void *)this + 12) + 8 * v14);
  int v24 = *((_DWORD *)this + 20) - 1;
  *((_DWORD *)this + 20) = v24;
  if (!v24) {
    *((void *)this + 11) = 0;
  }
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 16));
  DgnString::~DgnString((DgnString *)&v26);
  return v23;
}

void sub_213E23554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  int v14 = *(_DWORD *)(v11 + 80) - 1;
  *(_DWORD *)(v11 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = v14;
  if (!v14) {
    *(void *)(v11 + 88) = 0;
  }
  pthread_mutex_unlock(v12);
  DgnString::~DgnString((DgnString *)&a11);
  _Unwind_Resume(a1);
}

uint64_t loggableToken(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v6);
  if (*(char *)(a1 + 23) < 0) {
    a1 = *(void *)a1;
  }
  size_t v2 = strlen((const char *)a1);
  int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, a1, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" (", 2);
  uint64_t v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)") : ", 4);
  std::stringbuf::str();
  v6[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v6 + *(void *)(v6[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v6[1] = MEMORY[0x263F8C318] + 16;
  if (v7 < 0) {
    operator delete((void *)v6[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2166986E0](&v8);
}

void sub_213E23718(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void TLexerLexicon::TLexerLexicon(TLexerLexicon *this, const TLocaleInfo *a2)
{
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  operator new();
}

void sub_213E23790(_Unwind_Exception *a1)
{
  MEMORY[0x216698730](v2, 0x60C40CE5A77A8);
  uint64_t v4 = *(void **)(v1 + 24);
  if (v4)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

void TLexerLexicon::~TLexerLexicon(TLexerLexicon *this)
{
  uint64_t v2 = (TRegExp *)*((void *)this + 6);
  if (v2)
  {
    TRegExp::~TRegExp(v2);
    MEMORY[0x216698730]();
  }
  int v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v4;
    operator delete(v4);
  }
}

void TLexerLexicon::addRegExp(char **a1, __int32 *a2, uint64_t a3)
{
  TRegExp::add((uint64_t)a1[6], a2, (a1[1] - *a1) >> 3);
  unint64_t v5 = (unint64_t)a1[2];
  unsigned int v6 = a1[1];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = *a1;
    uint64_t v9 = (v6 - *a1) >> 3;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)(a1 + 2), v12);
      uint64_t v8 = *a1;
      unsigned int v6 = a1[1];
    }
    else
    {
      uint64_t v13 = 0;
    }
    int v14 = &v13[8 * v9];
    uint64_t v15 = &v13[8 * v12];
    *(void *)int v14 = a3;
    char v7 = v14 + 8;
    while (v6 != v8)
    {
      uint64_t v16 = *((void *)v6 - 1);
      v6 -= 8;
      *((void *)v14 - 1) = v16;
      v14 -= 8;
    }
    *a1 = v14;
    a1[1] = v7;
    a1[2] = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(void *)unsigned int v6 = a3;
    char v7 = v6 + 8;
  }
  a1[1] = v7;
}

void TLexerLexicon::addLiteral(char **a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = (__int32 *)v8;
  long long v7 = xmmword_214085190;
  char v9 = 1;
  TRegExp::stringToRegExp(a2, (uint64_t)&v6, 0, 0);
  if (*((void *)&v7 + 1) >= (unint64_t)v7)
  {
    if (v9)
    {
      int v10 = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v6, *((unint64_t *)&v7 + 1), &v10, 1uLL);
      unint64_t v5 = v6;
      --*((void *)&v7 + 1);
    }
    else
    {
      unint64_t v5 = v6;
      if ((void)v7) {
        v6[(void)v7 - 1] = 0;
      }
    }
  }
  else
  {
    unint64_t v5 = v6;
    v6[*((void *)&v7 + 1)] = 0;
  }
  TLexerLexicon::addRegExp(a1, v5, a3);
  if (v9 && v6 != (__int32 *)v8)
  {
    if (v6) {
      MEMORY[0x216698730]();
    }
  }
}

void sub_213E23AB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (LOBYTE(STACK[0x420])) {
    TSegmenter::findSegmentEnd((uint64_t *)va, v2);
  }
  _Unwind_Resume(a1);
}

void TLexerLexicon::addString(void *a1, int a2, uint64_t a3, int a4)
{
  uint64_t v8 = (uint64_t)(a1 + 5);
  unint64_t v9 = a1[5];
  int v10 = (char *)a1[4];
  if ((unint64_t)v10 >= v9)
  {
    unint64_t v12 = (void **)(a1 + 3);
    uint64_t v13 = (char *)a1[3];
    uint64_t v14 = (v10 - v13) >> 4;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 60) {
      std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v16 = v9 - (void)v13;
    if (v16 >> 3 > v15) {
      unint64_t v15 = v16 >> 3;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17)
    {
      uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TGrammarCompiler::TArgument>>(v8, v17);
      uint64_t v13 = (char *)a1[3];
      int v10 = (char *)a1[4];
    }
    else
    {
      uint64_t v18 = 0;
    }
    uint64_t v19 = &v18[16 * v14];
    *(void *)uint64_t v19 = a3;
    uint64_t v20 = &v18[16 * v17];
    *((_DWORD *)v19 + 2) = a2;
    *((_DWORD *)v19 + 3) = a4;
    uint64_t v11 = v19 + 16;
    if (v10 != v13)
    {
      do
      {
        *((_OWORD *)v19 - 1) = *((_OWORD *)v10 - 1);
        v19 -= 16;
        v10 -= 16;
      }
      while (v10 != v13);
      uint64_t v13 = (char *)*v12;
    }
    a1[3] = v19;
    a1[4] = v11;
    a1[5] = v20;
    if (v13) {
      operator delete(v13);
    }
  }
  else
  {
    *(void *)int v10 = a3;
    uint64_t v11 = v10 + 16;
    *((_DWORD *)v10 + 2) = a2;
    *((_DWORD *)v10 + 3) = a4;
  }
  a1[4] = v11;
}

TRegExpCompiler *TLexerLexicon::doneAdding(TRegExp **this)
{
  return TRegExp::doneAdding(this[6]);
}

uint64_t TLexerLexicon::findLongestMatch(uint64_t a1, unsigned int **a2, TAllocator *this)
{
  uint64_t v4 = (const __int32 **)a2;
  uint64_t v6 = *(void *)(a1 + 24);
  long long v7 = *a2;
  uint64_t v8 = *(void *)(a1 + 32) - v6;
  if (v8)
  {
    uint64_t v9 = 0;
    unint64_t v10 = v8 >> 4;
    unsigned int v11 = *v7;
    if (v10 <= 1) {
      unint64_t v10 = 1;
    }
    uint64_t v12 = v6 + 8;
    while (v11 != *(_DWORD *)(v12 + v9))
    {
      v9 += 16;
      if (!--v10) {
        goto LABEL_44;
      }
    }
    uint64_t v13 = (const __int32 *)(v7 + 1);
    unsigned int v14 = v7[1];
    BOOL v15 = v14 == v11;
    for (i = v7 + 1; !v15 && v14 != 0; BOOL v15 = *i == v11)
    {
      if (v14 == 92 && i[1]) {
        uint64_t v18 = 2;
      }
      else {
        uint64_t v18 = 1;
      }
      i += v18;
      unsigned int v14 = *i;
    }
    if (v14 == v11)
    {
      void *v4 = v13;
      uint64_t v19 = (char *)((char *)i - (char *)v13);
      size_t v20 = i - v13;
      if ((v20 + 1) >> 62) {
        uint64_t v21 = -1;
      }
      else {
        uint64_t v21 = 4 * (v20 + 1);
      }
      unsigned int v22 = (__int32 *)TAllocator::allocate(this, v21);
      wcsncpy(v22, *v4, v20);
      *(_DWORD *)&v19[(void)v22] = 0;
      uint64_t v23 = *(void *)(a1 + 24) + v9;
      int v24 = *(_DWORD *)(v23 + 8);
      int v25 = *(_DWORD *)(v23 + 12);
      uint64_t v26 = v22;
      for (unsigned int j = v22; ; ++j)
      {
        int v28 = *v26;
        if (*v26 == 92)
        {
          if (v25 == 2)
          {
            int v28 = v26[1];
            if (v28 == v24 || v28 == 92) {
              ++v26;
            }
            else {
              int v28 = 92;
            }
          }
          else if (v25 == 1)
          {
            int v30 = v26[1];
            ++v26;
            int v29 = v30;
            if (v30 == 114) {
              int v31 = 13;
            }
            else {
              int v31 = v29;
            }
            if (v29 == 116) {
              int v31 = 9;
            }
            if (v29 == 110) {
              int v28 = 10;
            }
            else {
              int v28 = v31;
            }
          }
          else
          {
            int v28 = 92;
          }
        }
        else if (!v28)
        {
          *unsigned int j = 0;
          void *v4 = i + 1;
          return *(void *)(*(void *)(a1 + 24) + v9);
        }
        *unsigned int j = v28;
        ++v26;
      }
    }
  }
LABEL_44:
  __p = 0;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  TRegExp::match(*(void **)(a1 + 48), v7, 2, (uint64_t)&__p);
  uint64_t v33 = (char *)__p;
  if (v56 == __p) {
    goto LABEL_67;
  }
  uint64_t v53 = (void *)a1;
  uint64_t v54 = v4;
  uint64_t v34 = 0;
  unint64_t v35 = 0;
  unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((v56 - (unsigned char *)__p) >> 3);
  do
  {
    uint64_t v37 = &v33[v34];
    signed int v38 = *(_DWORD *)(*(void *)&v33[v34 + 8] - 4);
    {
      operator new();
    }
    if (!TLocaleInfo::isAlpha(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v38)) {
      goto LABEL_60;
    }
    int v39 = **((_DWORD **)v37 + 1);
    {
      operator new();
    }
    uint64_t v40 = TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo;
    if ((v39 < 48
       || v39 >= 0x3A
       && (v39 < 0x660
        || TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v39) == -1))
      && (TLocaleInfo::isAlpha(v40, v39) & 1) == 0)
    {
LABEL_60:
      if (v36 == 0xAAAAAAAAAAAAAAABLL * ((v56 - (unsigned char *)__p) >> 3)
        || (v41 = *((void *)v37 + 1), unint64_t v42 = *((void *)__p + 3 * v36 + 1), v41 > v42)
        || v41 == v42 && *(void *)&v33[v34 + 16] < *((void *)__p + 3 * v36 + 2))
      {
        unint64_t v36 = v35;
      }
    }
    ++v35;
    uint64_t v33 = (char *)__p;
    unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * ((v56 - (unsigned char *)__p) >> 3);
    v34 += 24;
  }
  while (v35 < v43);
  uint64_t v4 = v54;
  if (v36 == v43)
  {
LABEL_67:
    uint64_t v44 = (void *)TAllocator::allocate(this, 8);
    uint64_t v45 = (uint64_t)(*v4 + 1);
    *uint64_t v44 = *(unsigned int *)*v4;
    void *v4 = (const __int32 *)v45;
    uint64_t v46 = __p;
    uint64_t v51 = -1;
    if (!__p) {
      return v51;
    }
  }
  else
  {
    size_t v47 = (uint64_t)(*((void *)__p + 3 * v36 + 1) - (void)*v54) >> 2;
    if ((v47 + 1) >> 62) {
      uint64_t v48 = -1;
    }
    else {
      uint64_t v48 = 4 * (v47 + 1);
    }
    unint64_t v49 = (__int32 *)TAllocator::allocate(this, v48);
    wcsncpy(v49, *v54, v47);
    v49[v47] = 0;
    uint64_t v46 = __p;
    uint64_t v50 = (char *)__p + 24 * v36;
    *uint64_t v54 = (const __int32 *)*((void *)v50 + 1);
    uint64_t v51 = *(void *)(*v53 + 8 * *((void *)v50 + 2));
  }
  uint64_t v56 = v46;
  operator delete(v46);
  return v51;
}

void sub_213E24024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  MEMORY[0x216698730](v13, 0x1070C40ADD13FEBLL);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t TLexer::TLexer(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v9 = a1 + 32;
  TAllocator::TAllocator((TAllocator *)(a1 + 32), 2048);
  *(void *)(a1 + 88) = 0;
  unint64_t v10 = (char **)(a1 + 88);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 104) = 0;
  if (a5) {
    uint64_t v11 = a5;
  }
  else {
    uint64_t v11 = v9;
  }
  *(void *)(a1 + 72) = v11;
  *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = a4;
  *(void *)(a1 + 24) = 0;
  MEMORY[0x216698410](a1, "'string'");
  uint64_t v32 = a2;
  int v12 = *a2;
  if (*a2)
  {
    do
    {
      {
        operator new();
      }
      if (v12 > 159)
      {
        if (v12 >= 12288)
        {
          if (v12 != 65279 && v12 != 12288)
          {
LABEL_19:
            uint64_t LongestMatch = TLexerLexicon::findLongestMatch(*(void *)(a1 + 80), &v32, *(TAllocator **)(a1 + 72));
            uint64_t v16 = v15;
            unint64_t v17 = (void *)TAllocator::allocate(*(TAllocator **)(a1 + 72), 24);
            uint64_t v18 = v17;
            *unint64_t v17 = LongestMatch;
            v17[1] = v16;
            v17[2] = 0;
            size_t v20 = *(void **)(a1 + 96);
            unint64_t v19 = *(void *)(a1 + 104);
            if ((unint64_t)v20 >= v19)
            {
              uint64_t v22 = ((char *)v20 - *v10) >> 3;
              if ((unint64_t)(v22 + 1) >> 61) {
                std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v23 = v19 - (void)*v10;
              uint64_t v24 = v23 >> 2;
              if (v23 >> 2 <= (unint64_t)(v22 + 1)) {
                uint64_t v24 = v22 + 1;
              }
              if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v25 = v24;
              }
              if (v25) {
                uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>(a1 + 104, v25);
              }
              else {
                uint64_t v26 = 0;
              }
              int v27 = &v26[8 * v22];
              *(void *)int v27 = v18;
              uint64_t v21 = v27 + 8;
              int v29 = *(char **)(a1 + 88);
              int v28 = *(char **)(a1 + 96);
              if (v28 != v29)
              {
                do
                {
                  uint64_t v30 = *((void *)v28 - 1);
                  v28 -= 8;
                  *((void *)v27 - 1) = v30;
                  v27 -= 8;
                }
                while (v28 != v29);
                int v28 = *v10;
              }
              *(void *)(a1 + 88) = v27;
              *(void *)(a1 + 96) = v21;
              *(void *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 104) = &v26[8 * v25];
              if (v28) {
                operator delete(v28);
              }
            }
            else
            {
              void *v20 = v17;
              uint64_t v21 = v20 + 1;
            }
            *(void *)(a1 + 96) = v21;
            uint64_t v13 = v32;
            goto LABEL_17;
          }
        }
        else if (v12 != 160 && v12 != 8203)
        {
          goto LABEL_19;
        }
      }
      else if (v12 > 0x20 || ((1 << v12) & 0x100002600) == 0)
      {
        goto LABEL_19;
      }
      uint64_t v13 = ++v32;
LABEL_17:
      int v12 = *v13;
    }
    while (*v13);
  }
  return a1;
}

void sub_213E242EC(_Unwind_Exception *a1)
{
  MEMORY[0x216698730](v4, 0x1070C40ADD13FEBLL);
  uint64_t v6 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 96) = v6;
    operator delete(v6);
  }
  TAllocator::clear(v2);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

void TLexer::TLexer(TLexer *this, TInputStream *a2, unint64_t a3, const TLexerLexicon *a4, TAllocator *a5)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  TAllocator::TAllocator((TLexer *)((char *)this + 32), 2048);
  *((void *)this + 11) = 0;
  size_t v47 = (char **)((char *)this + 88);
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  if (a5) {
    unint64_t v10 = a5;
  }
  else {
    unint64_t v10 = v9;
  }
  *((void *)this + 9) = v10;
  *((void *)this + 10) = a4;
  *((void *)this + 3) = 0;
  if (*((char *)a2 + 39) >= 0) {
    uint64_t v11 = (char *)a2 + 16;
  }
  else {
    uint64_t v11 = (char *)*((void *)a2 + 2);
  }
  MEMORY[0x216698410](this, v11);
  MEMORY[0x216698480]((char *)a2 + 128, &unk_2140991E8);
  __s1 = (__int32 *)v55;
  long long v54 = xmmword_214085190;
  char v56 = 1;
LABEL_8:
  while (TInputStream::getNextLine((uint64_t)a2, (uint64_t)&__s1))
  {
    if (*((void *)&v54 + 1) >= (unint64_t)v54)
    {
      if (v56)
      {
        *(_DWORD *)__p = 0;
        TBuffer<wchar_t>::insert((uint64_t)&__s1, *((unint64_t *)&v54 + 1), (int *)__p, 1uLL);
        int v12 = __s1;
        --*((void *)&v54 + 1);
      }
      else
      {
        int v12 = __s1;
        if ((void)v54) {
          __s1[(void)v54 - 1] = 0;
        }
      }
    }
    else
    {
      int v12 = __s1;
      __s1[*((void *)&v54 + 1)] = 0;
    }
    uint64_t v52 = v12;
    int v13 = *v12;
    if (*v12)
    {
      while (1)
      {
        {
          operator new();
        }
        if (v13 > 159)
        {
          if (v13 >= 12288)
          {
            if (v13 == 65279 || v13 == 12288)
            {
LABEL_27:
              unsigned int v14 = ++v52;
              goto LABEL_28;
            }
          }
          else if (v13 == 160 || v13 == 8203)
          {
            goto LABEL_27;
          }
        }
        else if (v13 <= 0x20 && ((1 << v13) & 0x100002600) != 0)
        {
          goto LABEL_27;
        }
        unsigned int v14 = v52;
        if (!wcsncmp(v52, (const __int32 *)"/", 2uLL)) {
          goto LABEL_8;
        }
        if (!wcsncmp(v14, (const __int32 *)"/", 2uLL))
        {
          while (TInputStream::getNextLine((uint64_t)a2, (uint64_t)&__s1))
          {
            if (*((void *)&v54 + 1) >= (unint64_t)v54)
            {
              if (v56)
              {
                *(_DWORD *)__p = 0;
                TBuffer<wchar_t>::insert((uint64_t)&__s1, *((unint64_t *)&v54 + 1), (int *)__p, 1uLL);
                int v28 = __s1;
                --*((void *)&v54 + 1);
              }
              else
              {
                int v28 = __s1;
                if ((void)v54) {
                  __s1[(void)v54 - 1] = 0;
                }
              }
            }
            else
            {
              int v28 = __s1;
              __s1[*((void *)&v54 + 1)] = 0;
            }
            int v29 = wcsstr(v28, (const __int32 *)"*");
            if (v29)
            {
              unsigned int v14 = v29 + 2;
              uint64_t v52 = v29 + 2;
              break;
            }
          }
          if ((*(unsigned char *)(*(void *)a2 + *(void *)(**(void **)a2 - 24) + 32) & 2) != 0)
          {
            uint64_t v40 = (char *)a2 + 16;
            if (*((char *)a2 + 39) < 0) {
              uint64_t v40 = (char *)*((void *)a2 + 2);
            }
            tknPrintf("Error: %s (%llu) : /* */ mismatch", v24, v25, v26, v27, v40, *((void *)a2 + 8));
            std::string::basic_string[abi:ne180100]<0>(v48, &byte_2140B33BB);
            *(void *)__p = byte_26C4DF190;
            if (SHIBYTE(v49) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v48[0], (std::string::size_type)v48[1]);
            }
            else
            {
              *(_OWORD *)&__p[8] = *(_OWORD *)v48;
              uint64_t v51 = v49;
            }
            *(void *)__p = &unk_26C4E13E0;
            if (v51 >= 0) {
              unint64_t v43 = &__p[8];
            }
            else {
              unint64_t v43 = *(const char **)&__p[8];
            }
            conditionalAssert(v43, "/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/shared/lexer.cpp", 339, v41, v42);
            *(void *)__p = byte_26C4DF190;
            if (SHIBYTE(v51) < 0) {
              operator delete(*(void **)&__p[8]);
            }
            if (SHIBYTE(v49) < 0) {
              operator delete(v48[0]);
            }
            exception = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(__p, &byte_2140B33BB);
            void *exception = byte_26C4DF190;
            uint64_t v45 = (std::string *)(exception + 1);
            if ((__p[23] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external(v45, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
            }
            else
            {
              long long v46 = *(_OWORD *)__p;
              exception[3] = *(void *)&__p[16];
              *(_OWORD *)&v45->__r_.__value_.__l.__data_ = v46;
            }
            void *exception = &unk_26C4E13E0;
          }
        }
        else
        {
          uint64_t LongestMatch = TLexerLexicon::findLongestMatch(*((void *)this + 10), (unsigned int **)&v52, *((TAllocator **)this + 9));
          uint64_t v17 = v16;
          uint64_t v18 = (void *)TAllocator::allocate(*((TAllocator **)this + 9), 24);
          unint64_t v19 = v18;
          uint64_t v20 = *((void *)a2 + 8);
          *uint64_t v18 = LongestMatch;
          v18[1] = v17;
          v18[2] = v20;
          uint64_t v22 = (void *)*((void *)this + 12);
          unint64_t v21 = *((void *)this + 13);
          if ((unint64_t)v22 >= v21)
          {
            uint64_t v30 = ((char *)v22 - *v47) >> 3;
            if ((unint64_t)(v30 + 1) >> 61) {
              std::vector<std::wstring>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v31 = v21 - (void)*v47;
            uint64_t v32 = v31 >> 2;
            if (v31 >> 2 <= (unint64_t)(v30 + 1)) {
              uint64_t v32 = v30 + 1;
            }
            if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v33 = v32;
            }
            if (v33) {
              uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TParam *>>((uint64_t)this + 104, v33);
            }
            else {
              uint64_t v34 = 0;
            }
            unint64_t v35 = &v34[8 * v30];
            *(void *)unint64_t v35 = v19;
            uint64_t v23 = v35 + 8;
            uint64_t v37 = (char *)*((void *)this + 11);
            unint64_t v36 = (char *)*((void *)this + 12);
            if (v36 != v37)
            {
              do
              {
                uint64_t v38 = *((void *)v36 - 1);
                v36 -= 8;
                *((void *)v35 - 1) = v38;
                v35 -= 8;
              }
              while (v36 != v37);
              unint64_t v36 = *v47;
            }
            *((void *)this + 11) = v35;
            *((void *)this + 12) = v23;
            *((void *)this + 13) = &v34[8 * v33];
            if (v36) {
              operator delete(v36);
            }
          }
          else
          {
            *uint64_t v22 = v18;
            uint64_t v23 = v22 + 1;
          }
          *((void *)this + 12) = v23;
          unsigned int v14 = v52;
        }
LABEL_28:
        int v13 = *v14;
        if (!*v14) {
          goto LABEL_8;
        }
      }
    }
  }
  if (v56)
  {
    if (__s1 != (__int32 *)v55 && __s1 != 0) {
      MEMORY[0x216698730]();
    }
  }
}

void sub_213E2492C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, TAllocator *a12, uint64_t a13, uint64_t a14, void **a15, void *a16, uint64_t a17, uint64_t a18, void *__p, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (LOBYTE(STACK[0x490]))
  {
    if (a24 != a13 && a24 != 0) {
      MEMORY[0x216698730]();
    }
  }
  uint64_t v27 = *a15;
  if (*a15)
  {
    *(void *)(v24 + 96) = v27;
    operator delete(v27);
  }
  TAllocator::clear(a12);
  if (*(char *)(v24 + 23) < 0) {
    operator delete(*(void **)v24);
  }
  _Unwind_Resume(a1);
}

uint64_t *ArcGraphMgr::startupArcGraphMgr(uint64_t a1)
{
  unint64_t result = MemChunkAlloc(8uLL, 0);
  *unint64_t result = a1;
  ArcGraphMgr::smpArcGraphMgr = (uint64_t)result;
  return result;
}

void ArcGraphMgr::printSize(ArcGraphMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/agmgr.cpp", 64, (DgnString *)&v31);
  if (v32) {
    uint64_t v15 = v31;
  }
  else {
    uint64_t v15 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v11, v12, v13, v14, a3, &byte_2140B33BB, a3, &byte_2140B33BB, v15);
  DgnString::~DgnString((DgnString *)&v31);
  if (a2 != -1) {
    xlprintf("%d ", v16, v17, v18, v19, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v16, v17, v18, v19, a3, &byte_2140B33BB);
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v20 = 4;
  }
  else {
    uint64_t v20 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/agmgr.cpp", 65, (DgnString *)&v31);
  if (v32) {
    uint64_t v25 = v31;
  }
  else {
    uint64_t v25 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v21, v22, v23, v24, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v25, v20, v20, 0);
  DgnString::~DgnString((DgnString *)&v31);
  *a4 += v20;
  *a5 += v20;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/agmgr.cpp", 66, (DgnString *)&v31);
  if (v32) {
    uint64_t v30 = v31;
  }
  else {
    uint64_t v30 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v26, v27, v28, v29, a3, &byte_2140B33BB, (35 - a3), (35 - a3), v30, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v31);
}

void sub_213E24C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t ArcGraphMgr::getArcGraphOrThrow(ArcGraphMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)(*(void *)this + 8) <= a2 || (uint64_t result = *(void *)(**(void **)this + 8 * a2)) == 0)
  {
    uint64_t v10 = a2;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/agmgr.cpp", 73, (uint64_t)"fst/agmgr", 1, (uint64_t)"%u", a7, a8, a2);
    return *(void *)(**(void **)this + 8 * v10);
  }
  return result;
}

void checkValidityOfDouble(const double *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = *((unsigned __int8 *)a1 + 6);
  if ((*((unsigned char *)a1 + 7) & 0x7F) != 0 || v8 > 0xF)
  {
    if ((*((unsigned char *)a1 + 7) & 0x7F) == 0x7F && v8 >= 0xF0) {
      errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/littlend.cpp", 93, (uint64_t)"dfutil/littlend", 2, (uint64_t)"%.500s %02x %02x %02x %02x %02x %02x %02x %02x", a7, a8, (char)"illegal (NaN/infinity)");
    }
  }
  else if (*(unsigned __int8 *)a1 | *((unsigned __int8 *)a1 + 1) {
         || *((unsigned char *)a1 + 2)
  }
         || *((unsigned char *)a1 + 3)
         || *((unsigned char *)a1 + 4)
         || *((unsigned char *)a1 + 5)
         || *((unsigned char *)a1 + 6))
  {
    errThrowInternal(1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/dfutil/littlend.cpp", 89, (uint64_t)"dfutil/littlend", 2, (uint64_t)"%.500s %02x %02x %02x %02x %02x %02x %02x %02x", a7, a8, (char)"denormalized");
  }
}

void RecogCtlMgr::RecogCtlMgr(RecogCtlMgr *this)
{
  *(void *)this = 0x100010000001DLL;
  *((void *)this + 1) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((void *)this + 11) = 0x10000001DLL;
  *((void *)this + 13) = 0;
  *((_DWORD *)this + 24) = 1;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((void *)this + 19) = 0x10000001DLL;
  *((void *)this + 21) = 0;
  *((_DWORD *)this + 40) = 1;
  *((_DWORD *)this + 48) = 0;
  *((_OWORD *)this + 11) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  uint64_t v2 = (char *)this + 248;
  *((void *)this + 25) = 0x10000001DLL;
  *((void *)this + 27) = 0;
  *((_DWORD *)this + 52) = 1;
  *((_OWORD *)this + 14) = 0u;
  *((_DWORD *)this + 60) = 0;
  *(_OWORD *)((char *)this + 2DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 64) = 0u;
  *(_OWORD *)((char *)this + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = 0u;
  int v3 = (char *)this + 280;
  *((void *)this + 37) = 0x10000001DLL;
  *((void *)this + 39) = 0;
  *((_DWORD *)this + 76) = 1;
  *((_OWORD *)this + 20) = 0u;
  *((_DWORD *)this + 84) = 0;
  *(_OWORD *)((char *)this + 344) = 0u;
  uint64_t v4 = (char *)this + 344;
  *((void *)this + 47) = 0;
  *((void *)this + 45) = 0x10000001DLL;
  *((_DWORD *)this + 92) = 1;
  *((_DWORD *)this + 100) = 0;
  *(_OWORD *)((char *)this + 408) = 0u;
  unint64_t v5 = (char *)this + 408;
  *((_OWORD *)this + 24) = 0u;
  *((void *)this + 53) = 0x10000001DLL;
  *((void *)this + 55) = 0;
  *((_DWORD *)this + 108) = 1;
  *((_DWORD *)this + 116) = 0;
  *((_OWORD *)this + 28) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *((void *)this + 61) = 0x10000001DLL;
  *((void *)this + 63) = 0;
  *((_DWORD *)this + 124) = 1;
  *((_DWORD *)this + 132) = 0;
  *((_OWORD *)this + 32) = 0u;
  uint64_t v13 = (char *)this + 472;
  *(_OWORD *)((char *)this + 536) = 0u;
  DgnPrimArray<unsigned long long>::reallocElts((uint64_t)this + 56, 1, 1);
  int v6 = *((_DWORD *)this + 65);
  unsigned int v7 = *((_DWORD *)this + 64);
  uint64_t v8 = *((unsigned int *)this + 16);
  *(void *)(*((void *)this + 7) + 8 * v8) = 0;
  *((_DWORD *)this + 16) = v8 + 1;
  if (v7 == v6)
  {
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)v2, 1, 1);
    unsigned int v7 = *((_DWORD *)this + 64);
  }
  *(void *)(*((void *)this + 31) + 8 * v7) = 0;
  *((_DWORD *)this + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 64) = v7 + 1;
  unsigned int v9 = *((_DWORD *)this + 72);
  if (v9 == *((_DWORD *)this + 73))
  {
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)v3, 1, 1);
    unsigned int v9 = *((_DWORD *)this + 72);
  }
  *(void *)(*((void *)this + 35) + 8 * v9) = 0;
  *((_DWORD *)this + 72) = v9 + 1;
  unsigned int v10 = *((_DWORD *)this + 88);
  if (v10 == *((_DWORD *)this + 89))
  {
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)v4, 1, 1);
    unsigned int v10 = *((_DWORD *)this + 88);
  }
  *(void *)(*((void *)this + 43) + 8 * v10) = 0;
  *((_DWORD *)this + 88) = v10 + 1;
  unsigned int v11 = *((_DWORD *)this + 104);
  if (v11 == *((_DWORD *)this + 105))
  {
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)v5, 1, 1);
    unsigned int v11 = *((_DWORD *)this + 104);
  }
  *(void *)(*((void *)this + 51) + 8 * v11) = 0;
  *((_DWORD *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 104) = v11 + 1;
  unsigned int v12 = *((_DWORD *)this + 120);
  if (v12 == *((_DWORD *)this + 121))
  {
    DgnPrimArray<unsigned long long>::reallocElts((uint64_t)v13, 1, 1);
    unsigned int v12 = *((_DWORD *)this + 120);
  }
  *(void *)(*((void *)this + 59) + 8 * v12) = 0;
  *((_DWORD *)this + 120) = v12 + 1;
}

void sub_213E25108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  DgnIOwnArray<VirtMap *>::releaseAll(a17);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a16);
  DgnIOwnArray<AdaptControllerResults *>::releaseAll(a18);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a15);
  DgnIOwnArray<Sausage *>::releaseAll(v24);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v23);
  DgnIOwnArray<PrefilterResult *>::releaseAll(v22);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v21);
  DgnIOwnArray<WordLattice *>::releaseAll(v19);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v18);
  DgnIOwnArray<RecogControllerBase *>::releaseAll(v26);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v25);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a13);
  DgnIOwnArray<AdaptApplyResult *>::releaseAll(a14);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a9);
  DgnIOwnArray<AdaptAccumResult *>::releaseAll(a10);
  DgnIOwnArray<AdaptController *>::releaseAll(v20);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a11);
  DgnPrimArray<unsigned int>::~DgnPrimArray(a12);
  _Unwind_Resume(a1);
}

void RecogCtlMgr::deleteRecogController(RecogCtlMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t RecogController = RecogCtlMgr::getRecogController(this, a2, a3, a4, a5, a6, a7, a8);
  if (((*(uint64_t (**)(uint64_t))(*(void *)RecogController + 104))(RecogController) & 1) == 0
    && (*(unsigned int (**)(uint64_t))(*(void *)RecogController + 96))(RecogController))
  {
    (*(void (**)(uint64_t))(*(void *)RecogController + 120))(RecogController);
  }
  DgnDelete<RecogControllerBase>(*(void (****)(void))(*((void *)this + 31) + 8 * a2));
  *(void *)(*((void *)this + 31) + 8 * a2) = 0;
  if (a2)
  {
    int v11 = *((_DWORD *)this + 68);
    if (v11)
    {
      uint64_t v12 = *((unsigned int *)this + 68);
      uint64_t v13 = (_DWORD *)*((void *)this + 33);
      while (*v13 != a2)
      {
        ++v13;
        if (!--v12) {
          goto LABEL_11;
        }
      }
      unsigned int v14 = v11 - 1;
      *uint64_t v13 = *(_DWORD *)(*((void *)this + 33) + 4 * v14);
      *((_DWORD *)this + 68) = v14;
    }
  }
LABEL_11:

  IdMgr<unsigned int>::recycleId((unsigned int *)this + 50, a2);
}

void *DgnIOwnArray<AdaptAccumResult *>::releaseAll(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<AdaptAccumResult>(*(AdaptAccumResult **)(*(void *)a1 + v3));
      *(void *)(*(void *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  uint64_t result = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

void *DgnIOwnArray<AdaptApplyResult *>::releaseAll(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<AdaptApplyResult>(*(AdaptApplyResult **)(*(void *)a1 + v3));
      *(void *)(*(void *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  uint64_t result = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

void *DgnIOwnArray<WordLattice *>::releaseAll(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<WordLattice>(*(void *)(*(void *)a1 + v3));
      *(void *)(*(void *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  uint64_t result = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

void *DgnIOwnArray<PrefilterResult *>::releaseAll(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<PrefilterResult>(*(PrefilterResult **)(*(void *)a1 + v3));
      *(void *)(*(void *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  uint64_t result = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

void *DgnIOwnArray<Sausage *>::releaseAll(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<Sausage>(*(Sausage **)(*(void *)a1 + v3));
      *(void *)(*(void *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  uint64_t result = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

void *DgnIOwnArray<AdaptControllerResults *>::releaseAll(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<AdaptControllerResults>(*(AdaptControllerResults **)(*(void *)a1 + v3));
      *(void *)(*(void *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  uint64_t result = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

void *DgnIOwnArray<VirtMap *>::releaseAll(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<VirtMap>(*(VirtMap **)(*(void *)a1 + v3));
      *(void *)(*(void *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  uint64_t result = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

void RecogCtlMgr::startupRecogCtlMgr(RecogCtlMgr *this)
{
  uint64_t v1 = MemChunkAlloc(0x228uLL, 0);
  RecogCtlMgr::RecogCtlMgr((RecogCtlMgr *)v1);
  RecogCtlMgr::smpRecogCtlMgr = v2;
}

void RecogCtlMgr::printSize(RecogCtlMgr *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 210, (DgnString *)&v329);
  if (v330) {
    uint64_t v15 = (void *)v329;
  }
  else {
    uint64_t v15 = &unk_214099256;
  }
  uint64_t v325 = a3;
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v11, v12, v13, v14, a3, &unk_214099256, a3, &unk_214099256, v15);
  DgnString::~DgnString((DgnString *)&v329);
  if (a2 != -1) {
    xlprintf("%d ", v16, v17, v18, v19, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v16, v17, v18, v19, a3, &unk_214099256);
  uint64_t v20 = (a3 + 1);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 212, (DgnString *)&v329);
  if (v330) {
    uint64_t v25 = (void *)v329;
  }
  else {
    uint64_t v25 = &unk_214099256;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v21, v22, v23, v24, (a3 + 1), &unk_214099256, (a3 + 1), &unk_214099256, v25);
  uint64_t v324 = a6;
  DgnString::~DgnString((DgnString *)&v329);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v26, v27, v28, v29, (a3 + 1), &unk_214099256);
  unint64_t v30 = *((unsigned int *)this + 16);
  if (v30)
  {
    unint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    unint64_t v35 = a5;
    do
    {
      uint64_t v36 = *((void *)this + 7);
      if (*(void *)(v36 + 8 * v31))
      {
        unint64_t v328 = 0;
        unint64_t v329 = 0;
        unint64_t v327 = 0;
        AdaptController::printSize(*(AdaptController **)(v36 + 8 * v31), v31, (v325 + 2), &v329, &v328, &v327);
        v34 += v329;
        v33 += v328;
        v32 += v327;
        unint64_t v30 = *((unsigned int *)this + 16);
      }
      ++v31;
    }
    while (v31 < v30);
  }
  else
  {
    uint64_t v34 = 0;
    uint64_t v33 = 0;
    uint64_t v32 = 0;
    unint64_t v30 = 0;
    unint64_t v35 = a5;
  }
  uint64_t v37 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v37 = 16;
  }
  uint64_t v38 = v37 + v34;
  uint64_t v39 = v37 + v33;
  char v40 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    char v40 = 3;
  }
  uint64_t v41 = v38 + ((unint64_t)*((unsigned int *)this + 17) << v40);
  uint64_t v42 = v39 + (v30 << v40);
  uint64_t v43 = (34 - v325);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 212, (DgnString *)&v329);
  if (v330) {
    uint64_t v48 = (void *)v329;
  }
  else {
    uint64_t v48 = &unk_214099256;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v44, v45, v46, v47, v20, &unk_214099256, v43, v43, v48, v41, v42, v32);
  DgnString::~DgnString((DgnString *)&v329);
  *a4 += v41;
  *v35 += v42;
  *v324 += v32;
  uint64_t v49 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v49 = 16;
  }
  uint64_t v50 = *((unsigned int *)this + 12);
  unsigned int v51 = *((_DWORD *)this + 13);
  uint64_t v52 = (v49 | 2) + 2 * (v50 - 1);
  if ((int)v50 <= 0) {
    uint64_t v52 = v49;
  }
  if (v51 >= v50) {
    uint64_t v53 = v52;
  }
  else {
    uint64_t v53 = v49;
  }
  if (v51 >= v50) {
    uint64_t v54 = v52 + 2 * (v51 - v50);
  }
  else {
    uint64_t v54 = v49;
  }
  if (v51 >= v50) {
    uint64_t v55 = 0;
  }
  else {
    uint64_t v55 = 2 * v50;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 213, (DgnString *)&v329);
  if (v330) {
    uint64_t v60 = (void *)v329;
  }
  else {
    uint64_t v60 = &unk_214099256;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v56, v57, v58, v59, v20, &unk_214099256, v43, v43, v60, v54, v53, v55);
  DgnString::~DgnString((DgnString *)&v329);
  *a4 += v54;
  *v35 += v53;
  *v324 += v55;
  uint64_t v61 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v61 = 16;
  }
  int v62 = *((_DWORD *)this + 4);
  unsigned int v63 = *((_DWORD *)this + 5);
  BOOL v64 = v63 >= v62;
  unsigned int v65 = v63 - v62;
  if (v64)
  {
    if (v62 > 0) {
      uint64_t v61 = (v61 | 2) + 2 * (v62 - 1);
    }
    v61 += 2 * v65;
  }
  uint64_t v66 = v61 + 20;
  uint64_t v67 = DgnPrimQueue<unsigned short,DgnPrimArray<unsigned short>>::sizeObject((_DWORD *)this + 2, 1u) + 8;
  uint64_t v68 = *((unsigned int *)this + 4);
  if (v68 <= *((_DWORD *)this + 5)) {
    uint64_t v69 = 0;
  }
  else {
    uint64_t v69 = 2 * v68;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 215, (DgnString *)&v329);
  if (v330) {
    BOOL v74 = (void *)v329;
  }
  else {
    BOOL v74 = &unk_214099256;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v70, v71, v72, v73, v20, &unk_214099256, v43, v43, v74, v66, v67, v69);
  DgnString::~DgnString((DgnString *)&v329);
  *a4 += v66;
  *v35 += v67;
  *v324 += v69;
  uint64_t v75 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v75 = 16;
  }
  int v76 = *((_DWORD *)this + 28);
  unsigned int v77 = *((_DWORD *)this + 29);
  BOOL v64 = v77 >= v76;
  unsigned int v78 = v77 - v76;
  if (v64)
  {
    if (v76 > 0) {
      v75 += 4 * (v76 - 1) + 4;
    }
    v75 += 4 * v78;
  }
  uint64_t v79 = v75 + 24;
  uint64_t v80 = DgnPrimQueue<unsigned int,DgnPrimArray<unsigned int>>::sizeObject((_DWORD *)this + 26, 1u) + 12;
  uint64_t v81 = *((unsigned int *)this + 28);
  if (v81 <= *((_DWORD *)this + 29)) {
    uint64_t v82 = 0;
  }
  else {
    uint64_t v82 = 4 * v81;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 217, (DgnString *)&v329);
  if (v330) {
    unsigned int v87 = (void *)v329;
  }
  else {
    unsigned int v87 = &unk_214099256;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v83, v84, v85, v86, v20, &unk_214099256, v43, v43, v87, v79, v80, v82);
  DgnString::~DgnString((DgnString *)&v329);
  *a4 += v79;
  *v35 += v80;
  *v324 += v82;
  uint64_t v88 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v88 = 16;
  }
  int v89 = *((_DWORD *)this + 44);
  unsigned int v90 = *((_DWORD *)this + 45);
  BOOL v64 = v90 >= v89;
  unsigned int v91 = v90 - v89;
  if (v64)
  {
    if (v89 > 0) {
      v88 += 4 * (v89 - 1) + 4;
    }
    v88 += 4 * v91;
  }
  uint64_t v92 = v88 + 24;
  uint64_t v93 = DgnPrimQueue<unsigned int,DgnPrimArray<unsigned int>>::sizeObject((_DWORD *)this + 42, 1u) + 12;
  uint64_t v94 = *((unsigned int *)this + 44);
  if (v94 <= *((_DWORD *)this + 45)) {
    uint64_t v95 = 0;
  }
  else {
    uint64_t v95 = 4 * v94;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 219, (DgnString *)&v329);
  if (v330) {
    unint64_t v100 = (void *)v329;
  }
  else {
    unint64_t v100 = &unk_214099256;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v96, v97, v98, v99, v20, &unk_214099256, v43, v43, v100, v92, v93, v95);
  DgnString::~DgnString((DgnString *)&v329);
  *a4 += v92;
  *v35 += v93;
  *v324 += v95;
  uint64_t v101 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v101 = 16;
  }
  int v102 = *((_DWORD *)this + 56);
  unsigned int v103 = *((_DWORD *)this + 57);
  BOOL v64 = v103 >= v102;
  unsigned int v104 = v103 - v102;
  if (v64)
  {
    if (v102 > 0) {
      v101 += 4 * (v102 - 1) + 4;
    }
    v101 += 4 * v104;
  }
  uint64_t v105 = v101 + 24;
  uint64_t v106 = DgnPrimQueue<unsigned int,DgnPrimArray<unsigned int>>::sizeObject((_DWORD *)this + 54, 1u) + 12;
  uint64_t v107 = *((unsigned int *)this + 56);
  if (v107 <= *((_DWORD *)this + 57)) {
    uint64_t v108 = 0;
  }
  else {
    uint64_t v108 = 4 * v107;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 221, (DgnString *)&v329);
  if (v330) {
    int v113 = (void *)v329;
  }
  else {
    int v113 = &unk_214099256;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v109, v110, v111, v112, v20, &unk_214099256, v43, v43, v113, v105, v106, v108);
  DgnString::~DgnString((DgnString *)&v329);
  *a4 += v105;
  *v35 += v106;
  *v324 += v108;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 223, (DgnString *)&v329);
  if (v330) {
    uint64_t v118 = (void *)v329;
  }
  else {
    uint64_t v118 = &unk_214099256;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v114, v115, v116, v117, v20, &unk_214099256, v20, &unk_214099256, v118);
  DgnString::~DgnString((DgnString *)&v329);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v119, v120, v121, v122, v20, &unk_214099256);
  unint64_t v123 = *((unsigned int *)this + 64);
  if (v123)
  {
    unint64_t v124 = 0;
    uint64_t v125 = 0;
    uint64_t v126 = 0;
    uint64_t v127 = 0;
    do
    {
      uint64_t v128 = *((void *)this + 31);
      if (*(void *)(v128 + 8 * v124))
      {
        unint64_t v328 = 0;
        unint64_t v329 = 0;
        unint64_t v327 = 0;
        (*(void (**)(void))(**(void **)(v128 + 8 * v124) + 280))();
        v127 += v329;
        v126 += v328;
        v125 += v327;
        unint64_t v123 = *((unsigned int *)this + 64);
      }
      ++v124;
    }
    while (v124 < v123);
  }
  else
  {
    uint64_t v127 = 0;
    uint64_t v126 = 0;
    uint64_t v125 = 0;
    unint64_t v123 = 0;
  }
  uint64_t v129 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v129 = 16;
  }
  uint64_t v130 = v129 + v127;
  uint64_t v131 = v129 + v126;
  char v132 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    char v132 = 3;
  }
  uint64_t v133 = v130 + ((unint64_t)*((unsigned int *)this + 65) << v132);
  uint64_t v134 = v131 + (v123 << v132);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 223, (DgnString *)&v329);
  if (v330) {
    int v139 = (void *)v329;
  }
  else {
    int v139 = &unk_214099256;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v135, v136, v137, v138, v20, &unk_214099256, v43, v43, v139, v133, v134, v125);
  DgnString::~DgnString((DgnString *)&v329);
  *a4 += v133;
  *a5 += v134;
  *v324 += v125;
  uint64_t v140 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v140 = 16;
  }
  uint64_t v141 = *((unsigned int *)this + 68);
  unsigned int v142 = *((_DWORD *)this + 69);
  uint64_t v143 = v140 + 4 * (v141 - 1) + 4;
  if ((int)v141 <= 0) {
    uint64_t v143 = v140;
  }
  if (v142 >= v141) {
    uint64_t v144 = v143;
  }
  else {
    uint64_t v144 = v140;
  }
  if (v142 >= v141) {
    uint64_t v145 = v143 + 4 * (v142 - v141);
  }
  else {
    uint64_t v145 = v140;
  }
  if (v142 >= v141) {
    uint64_t v146 = 0;
  }
  else {
    uint64_t v146 = 4 * v141;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 225, (DgnString *)&v329);
  if (v330) {
    double v151 = (void *)v329;
  }
  else {
    double v151 = &unk_214099256;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v147, v148, v149, v150, v20, &unk_214099256, v43, v43, v151, v145, v144, v146);
  DgnString::~DgnString((DgnString *)&v329);
  *a4 += v145;
  *a5 += v144;
  *v324 += v146;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 226, (DgnString *)&v329);
  if (v330) {
    unsigned int v156 = (void *)v329;
  }
  else {
    unsigned int v156 = &unk_214099256;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v152, v153, v154, v155, v20, &unk_214099256, v20, &unk_214099256, v156);
  DgnString::~DgnString((DgnString *)&v329);
  uint64_t v323 = v20;
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v157, v158, v159, v160, v20, &unk_214099256);
  unint64_t v161 = *((unsigned int *)this + 72);
  if (v161)
  {
    unint64_t v162 = 0;
    uint64_t v163 = 0;
    uint64_t v164 = 0;
    uint64_t v165 = 0;
    BOOL v166 = a4;
    do
    {
      uint64_t v167 = *((void *)this + 35);
      if (*(void *)(v167 + 8 * v162))
      {
        unint64_t v328 = 0;
        unint64_t v329 = 0;
        unint64_t v327 = 0;
        (*(void (**)(void, unint64_t, void, unint64_t *, unint64_t *, unint64_t *))(**(void **)(v167 + 8 * v162) + 64))(*(void *)(v167 + 8 * v162), v162, (v325 + 2), &v329, &v328, &v327);
        v165 += v329;
        v164 += v328;
        v163 += v327;
        unint64_t v161 = *((unsigned int *)this + 72);
      }
      ++v162;
    }
    while (v162 < v161);
  }
  else
  {
    uint64_t v165 = 0;
    uint64_t v164 = 0;
    uint64_t v163 = 0;
    unint64_t v161 = 0;
    BOOL v166 = a4;
  }
  uint64_t v168 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v168 = 16;
  }
  uint64_t v169 = v168 + v165;
  uint64_t v170 = v168 + v164;
  char v171 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    char v171 = 3;
  }
  uint64_t v172 = v169 + ((unint64_t)*((unsigned int *)this + 73) << v171);
  uint64_t v173 = v170 + (v161 << v171);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 226, (DgnString *)&v329);
  if (v330) {
    int v177 = (void *)v329;
  }
  else {
    int v177 = &unk_214099256;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v174, (uint64_t)&unk_214099256, v175, v176, v323, &unk_214099256, v43, v43, v177, v172, v173, v163);
  DgnString::~DgnString((DgnString *)&v329);
  *v166 += v172;
  *a5 += v173;
  *v324 += v163;
  uint64_t v178 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v178 = 16;
  }
  int v179 = *((_DWORD *)this + 80);
  unsigned int v180 = *((_DWORD *)this + 81);
  uint64_t v181 = v178 + 4 * (v179 - 1) + 4;
  if (v179 <= 0) {
    uint64_t v181 = v178;
  }
  BOOL v64 = v180 >= v179;
  uint64_t v182 = v181 + 4 * (v180 - v179);
  if (v64) {
    uint64_t v178 = v182;
  }
  uint64_t v183 = v178 + 24;
  uint64_t v184 = DgnPrimQueue<unsigned int,DgnPrimArray<unsigned int>>::sizeObject((_DWORD *)this + 78, 1u) + 12;
  uint64_t v185 = *((unsigned int *)this + 80);
  if (v185 <= *((_DWORD *)this + 81)) {
    uint64_t v186 = 0;
  }
  else {
    uint64_t v186 = 4 * v185;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 228, (DgnString *)&v329);
  if (v330) {
    uint64_t v191 = (void *)v329;
  }
  else {
    uint64_t v191 = &unk_214099256;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v187, v188, v189, v190, v323, &unk_214099256, v43, v43, v191, v183, v184, v186);
  DgnString::~DgnString((DgnString *)&v329);
  *v166 += v183;
  *a5 += v184;
  *v324 += v186;
  uint64_t v192 = sizeObject<PrefilterResult *>((uint64_t)this + 344, 0);
  uint64_t v193 = sizeObject<PrefilterResult *>((uint64_t)this + 344, 1);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 230, (DgnString *)&v329);
  if (v330) {
    uint64_t v198 = (void *)v329;
  }
  else {
    uint64_t v198 = &unk_214099256;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v194, v195, v196, v197, v323, &unk_214099256, v43, v43, v198, v192, v193, 0);
  DgnString::~DgnString((DgnString *)&v329);
  *v166 += v192;
  *a5 += v193;
  uint64_t v199 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v199 = 16;
  }
  int v200 = *((_DWORD *)this + 96);
  unsigned int v201 = *((_DWORD *)this + 97);
  BOOL v64 = v201 >= v200;
  unsigned int v202 = v201 - v200;
  if (v64)
  {
    if (v200 > 0) {
      v199 += 4 * (v200 - 1) + 4;
    }
    v199 += 4 * v202;
  }
  uint64_t v203 = v199 + 24;
  uint64_t v204 = DgnPrimQueue<unsigned int,DgnPrimArray<unsigned int>>::sizeObject((_DWORD *)this + 94, 1u) + 12;
  uint64_t v205 = *((unsigned int *)this + 96);
  if (v205 <= *((_DWORD *)this + 97)) {
    uint64_t v206 = 0;
  }
  else {
    uint64_t v206 = 4 * v205;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 232, (DgnString *)&v329);
  if (v330) {
    double v211 = (void *)v329;
  }
  else {
    double v211 = &unk_214099256;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v207, v208, v209, v210, v323, &unk_214099256, v43, v43, v211, v203, v204, v206);
  DgnString::~DgnString((DgnString *)&v329);
  *a4 += v203;
  *a5 += v204;
  *v324 += v206;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 233, (DgnString *)&v329);
  if (v330) {
    uint64_t v216 = (void *)v329;
  }
  else {
    uint64_t v216 = &unk_214099256;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v212, v213, v214, v215, v323, &unk_214099256, v323, &unk_214099256, v216);
  DgnString::~DgnString((DgnString *)&v329);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v217, v218, v219, v220, v323, &unk_214099256);
  unint64_t v221 = *((unsigned int *)this + 104);
  if (v221)
  {
    unint64_t v222 = 0;
    uint64_t v223 = 0;
    uint64_t v224 = 0;
    uint64_t v225 = 0;
    do
    {
      uint64_t v226 = *((void *)this + 51);
      if (*(void *)(v226 + 8 * v222))
      {
        unint64_t v328 = 0;
        unint64_t v329 = 0;
        unint64_t v327 = 0;
        Sausage::printSize(*(Sausage **)(v226 + 8 * v222), v222, (v325 + 2), &v329, &v328, &v327);
        v225 += v329;
        v224 += v328;
        v223 += v327;
        unint64_t v221 = *((unsigned int *)this + 104);
      }
      ++v222;
    }
    while (v222 < v221);
  }
  else
  {
    uint64_t v225 = 0;
    uint64_t v224 = 0;
    uint64_t v223 = 0;
    unint64_t v221 = 0;
  }
  uint64_t v227 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v227 = 16;
  }
  uint64_t v228 = v227 + v225;
  uint64_t v229 = v227 + v224;
  char v230 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    char v230 = 3;
  }
  uint64_t v231 = v228 + ((unint64_t)*((unsigned int *)this + 105) << v230);
  uint64_t v232 = v229 + (v221 << v230);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 233, (DgnString *)&v329);
  if (v330) {
    uint64_t v237 = (void *)v329;
  }
  else {
    uint64_t v237 = &unk_214099256;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v233, v234, v235, v236, v323, &unk_214099256, v43, v43, v237, v231, v232, v223);
  DgnString::~DgnString((DgnString *)&v329);
  *a4 += v231;
  *a5 += v232;
  *v324 += v223;
  uint64_t v238 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v238 = 16;
  }
  int v239 = *((_DWORD *)this + 112);
  unsigned int v240 = *((_DWORD *)this + 113);
  uint64_t v241 = v238 + 4 * (v239 - 1) + 4;
  if (v239 <= 0) {
    uint64_t v241 = v238;
  }
  BOOL v64 = v240 >= v239;
  uint64_t v242 = v241 + 4 * (v240 - v239);
  if (v64) {
    uint64_t v238 = v242;
  }
  uint64_t v243 = v238 + 24;
  uint64_t v244 = DgnPrimQueue<unsigned int,DgnPrimArray<unsigned int>>::sizeObject((_DWORD *)this + 110, 1u) + 12;
  uint64_t v245 = *((unsigned int *)this + 112);
  if (v245 <= *((_DWORD *)this + 113)) {
    uint64_t v246 = 0;
  }
  else {
    uint64_t v246 = 4 * v245;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 235, (DgnString *)&v329);
  if (v330) {
    BOOL v251 = (void *)v329;
  }
  else {
    BOOL v251 = &unk_214099256;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v247, v248, v249, v250, v323, &unk_214099256, v43, v43, v251, v243, v244, v246);
  DgnString::~DgnString((DgnString *)&v329);
  *a4 += v243;
  *a5 += v244;
  *v324 += v246;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 237, (DgnString *)&v329);
  if (v330) {
    uint64_t v256 = (void *)v329;
  }
  else {
    uint64_t v256 = &unk_214099256;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v252, v253, v254, v255, v323, &unk_214099256, v323, &unk_214099256, v256);
  DgnString::~DgnString((DgnString *)&v329);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v257, v258, v259, v260, v323, &unk_214099256);
  unint64_t v261 = *((unsigned int *)this + 120);
  if (v261)
  {
    unint64_t v262 = 0;
    uint64_t v263 = 0;
    uint64_t v264 = 0;
    uint64_t v265 = 0;
    do
    {
      uint64_t v266 = *((void *)this + 59);
      if (*(void *)(v266 + 8 * v262))
      {
        unint64_t v328 = 0;
        unint64_t v329 = 0;
        unint64_t v327 = 0;
        AdaptControllerResults::printSize(*(AdaptControllerResults **)(v266 + 8 * v262), v262, (v325 + 2), &v329, &v328, &v327);
        v265 += v329;
        v264 += v328;
        v263 += v327;
        unint64_t v261 = *((unsigned int *)this + 120);
      }
      ++v262;
    }
    while (v262 < v261);
  }
  else
  {
    uint64_t v265 = 0;
    uint64_t v264 = 0;
    uint64_t v263 = 0;
    unint64_t v261 = 0;
  }
  uint64_t v267 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v267 = 16;
  }
  uint64_t v268 = v267 + v265;
  uint64_t v269 = v267 + v264;
  char v270 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    char v270 = 3;
  }
  uint64_t v271 = v268 + ((unint64_t)*((unsigned int *)this + 121) << v270);
  uint64_t v272 = v269 + (v261 << v270);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 237, (DgnString *)&v329);
  if (v330) {
    long long v277 = (void *)v329;
  }
  else {
    long long v277 = &unk_214099256;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v273, v274, v275, v276, v323, &unk_214099256, v43, v43, v277, v271, v272, v263);
  DgnString::~DgnString((DgnString *)&v329);
  *a4 += v271;
  *a5 += v272;
  *v324 += v263;
  uint64_t v278 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v278 = 16;
  }
  int v279 = *((_DWORD *)this + 128);
  unsigned int v280 = *((_DWORD *)this + 129);
  uint64_t v281 = v278 + 4 * (v279 - 1) + 4;
  if (v279 <= 0) {
    uint64_t v281 = v278;
  }
  BOOL v64 = v280 >= v279;
  uint64_t v282 = v281 + 4 * (v280 - v279);
  if (v64) {
    uint64_t v278 = v282;
  }
  uint64_t v283 = v278 + 24;
  uint64_t v284 = DgnPrimQueue<unsigned int,DgnPrimArray<unsigned int>>::sizeObject((_DWORD *)this + 126, 1u) + 12;
  uint64_t v285 = *((unsigned int *)this + 128);
  if (v285 <= *((_DWORD *)this + 129)) {
    uint64_t v286 = 0;
  }
  else {
    uint64_t v286 = 4 * v285;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 239, (DgnString *)&v329);
  if (v330) {
    v291 = (void *)v329;
  }
  else {
    v291 = &unk_214099256;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v287, v288, v289, v290, v323, &unk_214099256, v43, v43, v291, v283, v284, v286);
  DgnString::~DgnString((DgnString *)&v329);
  *a4 += v283;
  *a5 += v284;
  *v324 += v286;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 240, (DgnString *)&v329);
  if (v330) {
    uint64_t v296 = (void *)v329;
  }
  else {
    uint64_t v296 = &unk_214099256;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v292, v293, v294, v295, v323, &unk_214099256, v323, &unk_214099256, v296);
  DgnString::~DgnString((DgnString *)&v329);
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v297, v298, v299, v300, v323, &unk_214099256);
  unint64_t v301 = *((unsigned int *)this + 136);
  if (v301)
  {
    unint64_t v302 = 0;
    uint64_t v303 = 0;
    uint64_t v304 = 0;
    uint64_t v305 = 0;
    do
    {
      uint64_t v306 = *((void *)this + 67);
      if (*(void *)(v306 + 8 * v302))
      {
        unint64_t v328 = 0;
        unint64_t v329 = 0;
        unint64_t v327 = 0;
        VirtMap::printSize(*(VirtMap **)(v306 + 8 * v302), v302, (v325 + 2), &v329, &v328, &v327);
        v305 += v329;
        v304 += v328;
        v303 += v327;
        unint64_t v301 = *((unsigned int *)this + 136);
      }
      ++v302;
    }
    while (v302 < v301);
  }
  else
  {
    uint64_t v305 = 0;
    uint64_t v304 = 0;
    uint64_t v303 = 0;
    unint64_t v301 = 0;
  }
  uint64_t v307 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v307 = 16;
  }
  uint64_t v308 = v307 + v305;
  uint64_t v309 = v307 + v304;
  char v310 = 2;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    char v310 = 3;
  }
  uint64_t v311 = v308 + ((unint64_t)*((unsigned int *)this + 137) << v310);
  uint64_t v312 = v309 + (v301 << v310);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 240, (DgnString *)&v329);
  if (v330) {
    uint64_t v317 = (void *)v329;
  }
  else {
    uint64_t v317 = &unk_214099256;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v313, v314, v315, v316, v323, &unk_214099256, v43, v43, v317, v311, v312, v303);
  DgnString::~DgnString((DgnString *)&v329);
  *a4 += v311;
  *a5 += v312;
  *v324 += v303;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 241, (DgnString *)&v329);
  if (v330) {
    uint64_t v322 = (void *)v329;
  }
  else {
    uint64_t v322 = &unk_214099256;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v318, v319, v320, v321, v325, &unk_214099256, (35 - v325), (35 - v325), v322, *a4, *a5, *v324);
  DgnString::~DgnString((DgnString *)&v329);
}

void sub_213E26A68(_Unwind_Exception *a1)
{
  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t sizeObject<PrefilterResult *>(uint64_t a1, int a2)
{
  if (a2 == 3) {
    return 0;
  }
  int v4 = gShadowDiagnosticShowIdealizedObjectSizes;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v2 = 12;
  }
  else {
    uint64_t v2 = 16;
  }
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    uint64_t v6 = *(unsigned int *)(a1 + 8);
    if ((int)v6 >= 1)
    {
      unint64_t v7 = v6 + 1;
      int v8 = gShadowDiagnosticShowIdealizedObjectSizes;
      do
      {
        if (v8) {
          uint64_t v9 = 4;
        }
        else {
          uint64_t v9 = 8;
        }
        if (a2 != 2)
        {
          uint64_t v10 = *(void *)(*(void *)a1 + 8 * (v7 - 2));
          if (v10)
          {
            v9 += PrefilterResult::sizeObject(v10, a2);
            int v8 = gShadowDiagnosticShowIdealizedObjectSizes;
          }
        }
        v2 += v9;
        --v7;
      }
      while (v7 > 1);
    }
    if (!a2)
    {
      char v11 = 2;
      if (!v4) {
        char v11 = 3;
      }
      v2 += (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8)) << v11;
    }
  }
  return v2;
}

uint64_t IdMgr<unsigned short>::getNextId(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  if (*(_DWORD *)(a1 + 32) <= *(_DWORD *)a1)
  {
    __int16 v3 = *(_WORD *)(a1 + 6);
    do
    {
      DgnPrimQueue<unsigned short,DgnPrimArray<unsigned short>>::enqueue(v1, v3);
      __int16 v3 = *(_WORD *)(a1 + 6) + 1;
      *(_WORD *)(a1 + 6) = v3;
    }
    while (*(_DWORD *)(a1 + 32) <= *(_DWORD *)a1);
  }

  return DgnPrimQueue<unsigned short,DgnPrimArray<unsigned short>>::dequeue(v1);
}

AdaptController *DgnDelete<AdaptController>(AdaptController *result)
{
  if (result)
  {
    AdaptController::~AdaptController(result);
    return (AdaptController *)MemChunkFree(v1, 0);
  }
  return result;
}

void IdMgr<unsigned short>::recycleId(unsigned int *a1, __int16 a2)
{
  int v4 = a1 + 2;
  DgnPrimQueue<unsigned short,DgnPrimArray<unsigned short>>::enqueue((uint64_t)(a1 + 2), a2);
  unsigned int v5 = *a1;
  unsigned int v6 = a1[8];
  if (v6 > *a1)
  {
    unsigned __int16 v7 = a2 + 1;
    int v8 = *((unsigned __int16 *)a1 + 3);
    unsigned int v9 = v6 - 1;
    do
    {
      if (v7 != (unsigned __int16)v8) {
        break;
      }
      a1[8] = v9;
      unsigned int v10 = a1[7];
      if (!v10) {
        unsigned int v10 = a1[4];
      }
      unsigned int v11 = v10 - 1;
      a1[7] = v10 - 1;
      int v12 = v8 - 1;
      *((_WORD *)a1 + 3) = v8 - 1;
      if (v9)
      {
        if (!v11) {
          unsigned int v11 = a1[4];
        }
        LOWORD(v8) = *(_WORD *)(*v4 + 2 * (v11 - 1)) + 1;
      }
      unsigned __int16 v7 = v8;
      int v8 = v12;
    }
    while (v9-- > v5);
  }
}

AdaptAccumResult *DgnDelete<AdaptAccumResult>(AdaptAccumResult *result)
{
  if (result)
  {
    AdaptAccumResult::~AdaptAccumResult(result);
    return (AdaptAccumResult *)MemChunkFree(v1, 0);
  }
  return result;
}

AdaptApplyResult *DgnDelete<AdaptApplyResult>(AdaptApplyResult *result)
{
  if (result)
  {
    AdaptApplyResult::~AdaptApplyResult(result);
    return (AdaptApplyResult *)MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t RecogCtlMgr::newRecogController(uint64_t a1, uint64_t a2, const RecogSpec *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, PrefiltererSearchParamSet *a8, SearchCrossLayerParamSet *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t NextId = IdMgr<unsigned int>::getNextId((_DWORD *)(a1 + 200));
  for (unsigned int i = *(_DWORD *)(a1 + 256); i <= NextId; *(_DWORD *)(a1 + 256) = i)
  {
    if (i == *(_DWORD *)(a1 + 260))
    {
      DgnPrimArray<unsigned long long>::reallocElts(a1 + 248, 1, 1);
      unsigned int i = *(_DWORD *)(a1 + 256);
    }
    *(void *)(*(void *)(a1 + 248) + 8 * i++) = 0;
  }
  RecogControllerBase::makeRecogController(a2, a3, a7, a8, a9);
  uint64_t v22 = v21;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v21 + 16))(v21, a4, a5, a6, a10, a11, a12, a13, a14);
  *(void *)(*(void *)(a1 + 248) + 8 * NextId) = v22;
  unsigned int v23 = *(_DWORD *)(a1 + 272);
  if (v23 == *(_DWORD *)(a1 + 276))
  {
    DgnPrimArray<unsigned int>::reallocElts(a1 + 264, 1, 1);
    unsigned int v23 = *(_DWORD *)(a1 + 272);
  }
  *(_DWORD *)(*(void *)(a1 + 264) + 4 * v23) = NextId;
  ++*(_DWORD *)(a1 + 272);
  return NextId;
}

uint64_t RecogCtlMgr::getRecogController(RecogCtlMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 64) <= a2 || (uint64_t result = *(void *)(*((void *)this + 31) + 8 * a2)) == 0)
  {
    uint64_t v10 = a2;
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/rctlmgr.cpp", 408, (uint64_t)"recogctl/rctlmgr", 8, (uint64_t)"%u", a7, a8, a2);
    return *(void *)(*((void *)this + 31) + 8 * v10);
  }
  return result;
}

void (***DgnDelete<RecogControllerBase>(void (***result)(void)))(void)
{
  if (result)
  {
    uint64_t v1 = result;
    (**result)(result);
    return (void (***)(void))MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t RecogCtlMgr::getVirtMap(RecogCtlMgr *this, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  int v4 = (void *)((char *)this + 536);
  uint64_t v5 = *((unsigned int *)this + 136);
  unsigned int v6 = a2 >> 6;
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v7 = 0;
  unsigned int v8 = -1;
  do
  {
    uint64_t result = *(void *)(*v4 + 8 * v7);
    if (!*(unsigned char *)(result + 60))
    {
      if (v6 + 1 == *(_DWORD *)(result + 56)) {
        goto LABEL_29;
      }
      unsigned int v8 = v7;
    }
    ++v7;
  }
  while (v5 != v7);
  if (v8 == -1)
  {
LABEL_11:
    unsigned int v11 = MemChunkAlloc(0x40uLL, 0);
    VirtMap::VirtMap((VirtMap *)v11);
    uint64_t v10 = *((unsigned int *)this + 136);
    unsigned int v12 = v10;
    if (v10 == *((_DWORD *)this + 137))
    {
      DgnPrimArray<unsigned long long>::reallocElts((uint64_t)v4, 1, 1);
      unsigned int v12 = *((_DWORD *)this + 136);
    }
    *(void *)(*((void *)this + 67) + 8 * v12) = 0;
    *((_DWORD *)this + 136) = v12 + 1;
    *(void *)(*((void *)this + 67) + 8 * v10) = v11;
  }
  else
  {
    uint64_t v10 = v8;
  }
  uint64_t v13 = *(void *)(*v4 + 8 * v10);
  unsigned int v14 = *(_DWORD *)(v13 + 56);
  if (v6 >= v14)
  {
    uint64_t v15 = v6 + 1;
    *(_DWORD *)(v13 + 56) = v15;
    unsigned int v16 = *(_DWORD *)(v13 + 12);
    if (v16 <= v6) {
      DgnArray<DgnPrimArray<double>>::reallocElts(v13, v15 - v16, 0);
    }
    uint64_t v17 = *(unsigned int *)(v13 + 8);
    if (v17 <= v15)
    {
      if (v17 <= v6)
      {
        unint64_t v20 = ((unint64_t)a2 >> 6) - v17 + 1;
        uint64_t v21 = (_DWORD *)(*(void *)v13 + 16 * v17 + 8);
        do
        {
          *((void *)v21 - 1) = 0;
          *uint64_t v21 = 0;
          v21 += 4;
          --v20;
        }
        while (v20);
      }
    }
    else if ((int)v17 > (int)v15)
    {
      uint64_t v18 = (int)v17;
      uint64_t v19 = 16 * (int)v17 - 16;
      do
      {
        --v18;
        DgnPrimFixArray<double>::~DgnPrimFixArray(*(void *)v13 + v19);
        v19 -= 16;
      }
      while (v18 > v15);
    }
    *(_DWORD *)(v13 + 8) = v15;
    unsigned int v22 = *(_DWORD *)(v13 + 56);
    unsigned int v23 = *(_DWORD *)(v13 + 28);
    unsigned int v14 = v22;
    if (v22 > v23)
    {
      DgnPrimArray<unsigned long long>::reallocElts(v13 + 16, v22 - v23, 0);
      unsigned int v14 = *(_DWORD *)(v13 + 56);
    }
    *(_DWORD *)(v13 + 24) = v22;
    *(_DWORD *)(v13 + 52) = 0;
  }
  bzero(*(void **)(v13 + 16), 8 * v14);
  uint64_t result = *(void *)(*v4 + 8 * v10);
LABEL_29:
  *(unsigned char *)(result + 60) = 1;
  return result;
}

uint64_t RecogCtlMgr::releaseVirtMap(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(unsigned int *)(result + 544);
    if (v2)
    {
      for (unsigned int i = *(void **)(result + 536); *i != a2; ++i)
      {
        if (!--v2) {
          return result;
        }
      }
      *(unsigned char *)(a2 + 60) = 0;
    }
  }
  return result;
}

PrefilterResult *DgnDelete<PrefilterResult>(PrefilterResult *result)
{
  if (result)
  {
    PrefilterResult::~PrefilterResult(result);
    return (PrefilterResult *)MemChunkFree(v1, 0);
  }
  return result;
}

Sausage *DgnDelete<Sausage>(Sausage *result)
{
  if (result)
  {
    Sausage::~Sausage(result);
    return (Sausage *)MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t DgnThreadTrace::add(uint64_t a1, int a2, char a3)
{
  unsigned int v6 = *(_DWORD *)(a1 + 24);
  if (v6 == *(_DWORD *)(a1 + 28))
  {
    DgnPrimArray<char>::reallocElts(a1 + 16, 1, 1);
    unsigned int v6 = *(_DWORD *)(a1 + 24);
  }
  *(unsigned char *)(*(void *)(a1 + 16) + v6) = a3;
  ++*(_DWORD *)(a1 + 24);
  uint64_t result = mach_absolute_time();
  uint64_t v8 = result;
  unsigned int v9 = *(_DWORD *)(a1 + 40);
  if (v9 == *(_DWORD *)(a1 + 44))
  {
    uint64_t result = DgnPrimArray<unsigned long long>::reallocElts(a1 + 32, 1, 1);
    unsigned int v9 = *(_DWORD *)(a1 + 40);
  }
  *(void *)(*(void *)(a1 + 32) + 8 * v9) = v8;
  *(_DWORD *)(a1 + 40) = v9 + 1;
  unsigned int v10 = *(_DWORD *)(a1 + 56);
  if (v10 == *(_DWORD *)(a1 + 60))
  {
    uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a1 + 48, 1, 1);
    unsigned int v10 = *(_DWORD *)(a1 + 56);
  }
  *(_DWORD *)(*(void *)(a1 + 48) + 4 * v10) = a2;
  ++*(_DWORD *)(a1 + 56);
  if (*(unsigned char *)a1)
  {
    uint64_t CurrentCpuMicrosec = ClockTimer::getCurrentCpuMicrosec((ClockTimer *)&ClockTimer::smClockTimer);
    unsigned int v12 = *(_DWORD *)(a1 + 72);
    if (v12 == *(_DWORD *)(a1 + 76))
    {
      DgnPrimArray<unsigned long long>::reallocElts(a1 + 64, 1, 1);
      unsigned int v12 = *(_DWORD *)(a1 + 72);
    }
    *(void *)(*(void *)(a1 + 64) + 8 * v12) = CurrentCpuMicrosec;
    *(_DWORD *)(a1 + 72) = v12 + 1;
    uint64_t result = ClockTimer::getCurrentCpuMicrosec((ClockTimer *)&ClockTimer::smClockTimer);
    uint64_t v13 = result;
    unsigned int v14 = *(_DWORD *)(a1 + 88);
    if (v14 == *(_DWORD *)(a1 + 92))
    {
      uint64_t result = DgnPrimArray<unsigned long long>::reallocElts(a1 + 80, 1, 1);
      unsigned int v14 = *(_DWORD *)(a1 + 88);
    }
    *(void *)(*(void *)(a1 + 80) + 8 * v14) = v13;
    *(_DWORD *)(a1 + 88) = v14 + 1;
  }
  if (*(unsigned char *)(a1 + 1))
  {
    uint64_t result = ClockTimer::getCurrentMicrosec((ClockTimer *)&ClockTimer::smClockTimer);
    uint64_t v15 = result;
    unsigned int v16 = *(_DWORD *)(a1 + 104);
    if (v16 == *(_DWORD *)(a1 + 108))
    {
      uint64_t result = DgnPrimArray<unsigned long long>::reallocElts(a1 + 96, 1, 1);
      unsigned int v16 = *(_DWORD *)(a1 + 104);
    }
    *(void *)(*(void *)(a1 + 96) + 8 * v16) = v15;
    *(_DWORD *)(a1 + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 104) = v16 + 1;
  }
  return result;
}

void *DgnIOwnArray<AdaptController *>::releaseAll(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<AdaptController>(*(AdaptController **)(*(void *)a1 + v3));
      *(void *)(*(void *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  uint64_t result = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

void *DgnIOwnArray<RecogControllerBase *>::releaseAll(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<RecogControllerBase>(*(void (****)(void))(*(void *)a1 + v3));
      *(void *)(*(void *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  uint64_t result = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

VirtMap *DgnDelete<VirtMap>(VirtMap *result)
{
  if (result)
  {
    VirtMap::~VirtMap(result);
    return (VirtMap *)MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t DgnPrimQueue<unsigned short,DgnPrimArray<unsigned short>>::sizeObject(_DWORD *a1, unsigned int a2)
{
  uint64_t v4 = sizeObject<unsigned short>((uint64_t)a1, a2);
  uint64_t v5 = 12;
  if (a2 == 3) {
    uint64_t v5 = 0;
  }
  uint64_t result = v5 + v4;
  if (a2 > 3 || a2 == 1)
  {
    unsigned int v7 = a1[2];
    if (a1[6] < v7)
    {
      unsigned int v8 = 0;
      unsigned int v10 = a1[4];
      unsigned int v9 = a1[5];
      do
      {
        if (v9 >= v10)
        {
          if (v8 >= v10 && v8 < v9) {
            goto LABEL_15;
          }
        }
        else if (v8 < v9 || v8 >= v10)
        {
          goto LABEL_15;
        }
        result -= 2;
LABEL_15:
        ++v8;
      }
      while (v7 != v8);
    }
  }
  return result;
}

void DgnPrimQueue<unsigned short,DgnPrimArray<unsigned short>>::enqueue(uint64_t a1, __int16 a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 24);
  int v5 = *(_DWORD *)(a1 + 8);
  if (v4 == v5)
  {
    int v6 = *(_DWORD *)(a1 + 12);
    if (v4 == v6)
    {
      DgnPrimArray<short>::reallocElts(a1, 1, 1);
      int v6 = *(_DWORD *)(a1 + 12);
      unsigned int v4 = *(_DWORD *)(a1 + 24);
    }
    *(_DWORD *)(a1 + 8) = v6;
    unsigned int v7 = v6 - v4;
    if (v4)
    {
      uint64_t v8 = *(unsigned int *)(a1 + 16);
      if (v8)
      {
        memmove((void *)(*(void *)a1 + 2 * v8 + 2 * v7), (const void *)(*(void *)a1 + 2 * v8), 2 * (v4 - v8));
        unsigned int v4 = *(_DWORD *)(a1 + 20);
        *(_DWORD *)(a1 + 16) += v7;
      }
      else
      {
        *(_DWORD *)(a1 + 20) = v4;
      }
    }
    else
    {
      *(void *)(a1 + 16) = 0;
    }
    bzero((void *)(*(void *)a1 + 2 * v4), 2 * v7);
    int v5 = *(_DWORD *)(a1 + 8);
    unsigned int v4 = *(_DWORD *)(a1 + 24);
  }
  uint64_t v9 = *(unsigned int *)(a1 + 20);
  *(_WORD *)(*(void *)a1 + 2 * v9) = a2;
  if (v9 + 1 == v5) {
    int v10 = 0;
  }
  else {
    int v10 = v9 + 1;
  }
  *(_DWORD *)(a1 + 20) = v10;
  *(_DWORD *)(a1 + 24) = v4 + 1;
}

uint64_t DgnPrimQueue<unsigned short,DgnPrimArray<unsigned short>>::dequeue(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 16);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)a1 + 2 * v1);
  *(_WORD *)(*(void *)a1 + 2 * v1) = 0;
  unsigned int v3 = v1 + 1;
  *(_DWORD *)(a1 + 16) = v3;
  int v4 = *(_DWORD *)(a1 + 24) - 1;
  *(_DWORD *)(a1 + 24) = v4;
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 8);
    BOOL v6 = v3 >= v5;
    unsigned int v7 = v3 - v5;
    if (v6) {
      *(_DWORD *)(a1 + 16) = v7;
    }
  }
  else
  {
    *(void *)(a1 + 16) = 0;
  }
  return v2;
}

void AdaptAccumResult::~AdaptAccumResult(AdaptAccumResult *this)
{
  uint64_t v1 = (void *)*((void *)this + 1);
  if (v1) {
    MemChunkFree(v1, 0);
  }
}

void AdaptApplyResult::~AdaptApplyResult(AdaptApplyResult *this)
{
  uint64_t v1 = (void *)*((void *)this + 1);
  if (v1) {
    MemChunkFree(v1, 0);
  }
}

uint64_t SDEnv_GetData(unint64_t *a1, EnvMgr *a2, void *a3, unsigned int a4)
{
  uint64_t v8 = SdapiInsurance::SdapiInsurance(v89, "SDEnv_GetData", 1, 1, 91);
  if (!v89[97]) {
    goto LABEL_107;
  }
  if (!a2) {
    throwBadStringPointer(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  char v90 = 0;
  if (gbShowCalls)
  {
    if (gbShowCallPointerArguments) {
      unsigned int v16 = a1;
    }
    else {
      unsigned int v16 = 0;
    }
    if (gbShowCallPointerArguments) {
      uint64_t v17 = a3;
    }
    else {
      uint64_t v17 = 0;
    }
    xlprintf("Entering sdapi call %.500s(Masked:0x%016llx, '%.500s', Masked:0x%016llx, %llu)\n", v9, v10, v11, v12, "SDEnv_GetData", v16, a2, v17, a4);
  }
  if (!a1) {
    throwBadLengthForNullPointer(1, "DgnVerifyReadPtr", v10, v11, v12, v13, v14, v15);
  }
  char v90 = 0;
  if (!a3 && a4) {
    throwBadLengthForNullPointer(a4, "DgnVerifyWritePtr", v10, v11, v12, v13, v14, v15);
  }
  if (!*(unsigned char *)a2) {
    errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdenv.cpp", 48, (uint64_t)"sdapi/sdenv", 1, (uint64_t)"%s", v14, v15, (char)&errStr_sdapi_sdenv_E_EMPTYNAME);
  }
  switch(*a1)
  {
    case 1uLL:
      uint64_t v18 = (EnvHolderMgr *)EnvHolderMgr::smpEnvHolderMgr;
      unint64_t v19 = a1[1];
      if (v19 == -1)
      {
        LODWORD(v19) = -1;
      }
      else
      {
        if (HIDWORD(v19)) {
          throwBadSdapiArgument("SDhEnvHolder", v19, v10, v11, v12, v13, v14, v15);
        }
        if ((v19 + 1) <= 1) {
          throwBadSdapiArgument("SDhEnvHolder", v19, v10, v11, v12, v13, v14, v15);
        }
      }
      EnvMgr = *(EnvMgr **)EnvHolderMgr::getEnvHolder(v18, v19, v10, v11, v12, v13, v14, v15);
      unsigned int TopEnvId = EnvMgr::getTopEnvId(EnvMgr);
      break;
    case 2uLL:
      uint64_t v61 = (ModelMgr *)ModelMgr::smpModelMgr;
      unint64_t v62 = a1[1];
      if (HIDWORD(v62) || (v62 & 0xFFFF0000) != 0) {
        throwBadSdapiArgument("SDhVoc", a1[1], v10, v11, v12, v13, v14, v15);
      }
      if ((unsigned __int16)v62 - 1 >= 0x7B) {
        throwBadSdapiArgument("SDhVoc", v62, v10, v11, v12, v13, v14, v15);
      }
      uint64_t v69 = *(RuleMgr **)(ModelMgr::getVocOrThrow(v61, (unsigned __int16)v62, v10, v11, v12, v13, v14, v15) + 64);
      EnvMgr = (EnvMgr *)*((void *)v69 + 10);
      unint64_t v70 = a1[2];
      if (HIDWORD(v70) || (v70 & 0xFFFF0000) != 0) {
        throwBadSdapiArgument("SDhRule", v70, v63, v64, v65, v66, v67, v68);
      }
      if ((unsigned __int16)v70 == 0xFFFF || !(_WORD)v70) {
        throwBadSdapiArgument("SDhRule", v70, v63, v64, v65, v66, v67, v68);
      }
      RuleMgr::verifyRule(v69, (unsigned __int16)v70, 1, v64, v65, v66, v67, v68);
      unsigned int TopEnvId = EnvMgr::getItemEnvId(EnvMgr, (unsigned __int16)v70);
      break;
    case 3uLL:
      uint64_t v47 = (ChannelMgr *)ChannelMgr::smpChannelMgr;
      unint64_t v48 = a1[1];
      if (v48 == -1)
      {
        LODWORD(v48) = -1;
      }
      else
      {
        if (HIDWORD(v48)) {
          throwBadSdapiArgument("SDhSigProc", v48, v10, v11, v12, v13, v14, v15);
        }
        if ((v48 + 1) <= 1) {
          throwBadSdapiArgument("SDhSigProc", v48, v10, v11, v12, v13, v14, v15);
        }
      }
      EnvMgr = *(EnvMgr **)(ChannelMgr::getSigProc(v47, v48, v10, v11, v12, v13, v14, v15) + 424);
      unsigned int TopEnvId = EnvMgr::getTopEnvId(EnvMgr);
      break;
    case 4uLL:
      uint64_t v49 = (ModelMgr *)ModelMgr::smpModelMgr;
      unint64_t v50 = a1[1];
      if (HIDWORD(v50) || (v50 & 0xFFFF0000) != 0) {
        throwBadSdapiArgument("SDhVoc", a1[1], v10, v11, v12, v13, v14, v15);
      }
      if ((unsigned __int16)v50 - 1 >= 0x7B) {
        throwBadSdapiArgument("SDhVoc", v50, v10, v11, v12, v13, v14, v15);
      }
      uint64_t v57 = *(StateMgr **)(ModelMgr::getVocOrThrow(v49, (unsigned __int16)v50, v10, v11, v12, v13, v14, v15) + 56);
      EnvMgr = (EnvMgr *)*((void *)v57 + 94);
      unint64_t v58 = a1[2];
      if (HIDWORD(v58)) {
        throwBadSdapiArgument("SDhState", v58, v51, v52, v53, v54, v55, v56);
      }
      if ((v58 + 1) <= 1) {
        throwBadSdapiArgument("SDhState", v58, v51, v52, v53, v54, v55, v56);
      }
      StateMgr::verifyVisible(v57, v58, v51, v52, v53, v54, v55, v56);
      unsigned int TopEnvId = EnvMgr::getItemEnvId(EnvMgr, v58);
      break;
    case 5uLL:
      unint64_t v20 = (ModelMgr *)ModelMgr::smpModelMgr;
      unint64_t v21 = a1[1];
      if (HIDWORD(v21) || (v21 & 0xFFFF0000) != 0) {
        throwBadSdapiArgument("SDhVoc", a1[1], v10, v11, v12, v13, v14, v15);
      }
      if ((unsigned __int16)v21 - 1 >= 0x7B) {
        throwBadSdapiArgument("SDhVoc", v21, v10, v11, v12, v13, v14, v15);
      }
      uint64_t VocOrThrow = ModelMgr::getVocOrThrow(v20, (unsigned __int16)v21, v10, v11, v12, v13, v14, v15);
      uint64_t v29 = *(StateMgr **)(VocOrThrow + 56);
      EnvMgr = (EnvMgr *)*((void *)v29 + 95);
      unint64_t v31 = a1[2];
      if (HIDWORD(v31)) {
        throwBadSdapiArgument("SDhState", a1[2], v22, v23, v24, v25, v26, v27);
      }
      if ((v31 + 1) <= 1) {
        throwBadSdapiArgument("SDhState", v31, v22, v23, v24, v25, v26, v27);
      }
      StateMgr::verifyVisible(v29, v31, v22, v23, v24, v25, v26, v27);
      unint64_t v38 = a1[3];
      if ((v38 - 1) >> 32) {
        throwBadSdapiArgument("SDhWord", v38, v32, v33, v34, v35, v36, v37);
      }
      if ((v38 - 1) >= 0xFFFFF4) {
        throwBadSdapiArgument("SDhWord", v38, v32, v33, v34, v35, v36, v37);
      }
      WordList::verifyVisible(*(WordList **)(VocOrThrow + 48), v38 - 1, v32, v33, v34, v35, v36, v37);
      unsigned int TopEnvId = EnvMgr::getItemPairEnvId(EnvMgr, v31, (int)v38 - 1);
      break;
    case 6uLL:
      uint64_t v71 = (ModelMgr *)ModelMgr::smpModelMgr;
      unint64_t v72 = a1[1];
      if (HIDWORD(v72) || (v72 & 0xFFFF0000) != 0) {
        throwBadSdapiArgument("SDhUser", v72, v10, v11, v12, v13, v14, v15);
      }
      if ((unsigned __int16)v72 == 0xFFFF || !(_WORD)v72) {
        throwBadSdapiArgument("SDhUser", v72, v10, v11, v12, v13, v14, v15);
      }
      EnvMgr = *(EnvMgr **)ModelMgr::getUserOrThrow(v71, (unsigned __int16)v72, v10, v11, v12, v13, v14, v15);
      unsigned int TopEnvId = EnvMgr::getTopEnvId(EnvMgr);
      break;
    case 7uLL:
      uint64_t v73 = (ChannelMgr *)ChannelMgr::smpChannelMgr;
      unint64_t v74 = a1[1];
      if (HIDWORD(v74)) {
        throwBadSdapiArgument("SDhUtt", v74, v10, v11, v12, v13, v14, v15);
      }
      if ((v74 + 1) <= 1) {
        throwBadSdapiArgument("SDhUtt", v74, v10, v11, v12, v13, v14, v15);
      }
      Utterance = (Utterance *)ChannelMgr::getUtterance(v73, v74, v10, v11, v12, v13, v14, v15);
      EnvMgr = Utterance::getEnvMgr(Utterance);
      unsigned int TopEnvId = EnvMgr::getTopEnvId(EnvMgr);
      break;
    case 8uLL:
      uint64_t v59 = (ModelMgr *)ModelMgr::smpModelMgr;
      unint64_t v60 = a1[1];
      if (HIDWORD(v60) || (v60 & 0xFFFF0000) != 0) {
        throwBadSdapiArgument("SDhVoc", v60, v10, v11, v12, v13, v14, v15);
      }
      if ((unsigned __int16)v60 - 1 >= 0x7B) {
        throwBadSdapiArgument("SDhVoc", v60, v10, v11, v12, v13, v14, v15);
      }
      EnvMgr = *(EnvMgr **)ModelMgr::getVocOrThrow(v59, (unsigned __int16)v60, v10, v11, v12, v13, v14, v15);
      unsigned int TopEnvId = EnvMgr::getTopEnvId(EnvMgr);
      break;
    case 9uLL:
      int v76 = (ModelMgr *)ModelMgr::smpModelMgr;
      unint64_t v77 = a1[1];
      if (HIDWORD(v77) || (v77 & 0xFFFF0000) != 0) {
        throwBadSdapiArgument("SDhVoc", a1[1], v10, v11, v12, v13, v14, v15);
      }
      if ((unsigned __int16)v77 - 1 >= 0x7B) {
        throwBadSdapiArgument("SDhVoc", v77, v10, v11, v12, v13, v14, v15);
      }
      uint64_t v84 = *(WordList **)(ModelMgr::getVocOrThrow(v76, (unsigned __int16)v77, v10, v11, v12, v13, v14, v15) + 48);
      EnvMgr = (EnvMgr *)*((void *)v84 + 3);
      unint64_t v85 = a1[2];
      if ((v85 - 1) >> 32) {
        throwBadSdapiArgument("SDhWord", v85, v78, v79, v80, v81, v82, v83);
      }
      if ((v85 - 1) >= 0xFFFFF4) {
        throwBadSdapiArgument("SDhWord", v85, v78, v79, v80, v81, v82, v83);
      }
      WordList::verifyVisible(v84, v85 - 1, v78, v79, v80, v81, v82, v83);
      unsigned int TopEnvId = EnvMgr::getItemEnvId(EnvMgr, (int)v85 - 1);
      break;
    case 0xAuLL:
      uint64_t v45 = (ParamSetHolderMgr *)ParamSetHolderMgr::smpParamSetHolderMgr;
      unint64_t v46 = a1[1];
      if (HIDWORD(v46)) {
        throwBadSdapiArgument("SDhParamSetHolder", v46, v10, v11, v12, v13, v14, v15);
      }
      if ((v46 + 1) <= 1) {
        throwBadSdapiArgument("SDhParamSetHolder", v46, v10, v11, v12, v13, v14, v15);
      }
      EnvMgr = *(EnvMgr **)(ParamSetHolderMgr::getParamSetHolder(v45, v46, v10, v11, v12, v13, v14, v15) + 1112);
      unsigned int TopEnvId = EnvMgr::getTopEnvId(EnvMgr);
      break;
    default:
      throwBadSdapiArgument("SDEnvContainerType", *a1, v10, v11, v12, v13, v14, v15);
      goto LABEL_107;
  }
  if (TopEnvId && (uint64_t Data = EnvMgr::getData(EnvMgr, TopEnvId, a2, v40, v41, v42, v43, v44)) != 0) {
    uint64_t v87 = sdUtilItemMove(1, *(const void **)Data, *(unsigned int *)(Data + 8), a3, a4);
  }
  else {
LABEL_107:
  }
    uint64_t v87 = 0;
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v89);
  return v87;
}

void sub_213E27F7C()
{
}

void SDEnv_SetData(unint64_t *a1, EnvMgr *a2, const unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v8 = SdapiInsurance::SdapiInsurance(v266, "SDEnv_SetData", 1, 1, 92);
  if (v266[97])
  {
    if (!a2) {
      throwBadStringPointer(v8, v9, v10, v11, v12, v13, v14, v15);
    }
    char v267 = 0;
    if (gbShowCalls)
    {
      if (gbShowCallPointerArguments) {
        unsigned int v16 = a1;
      }
      else {
        unsigned int v16 = 0;
      }
      if (gbShowCallPointerArguments) {
        uint64_t v17 = a3;
      }
      else {
        uint64_t v17 = 0;
      }
      xlprintf("Entering sdapi call %.500s(Masked:0x%016llx, '%.500s', Masked:0x%016llx, %llu)\n", v9, v10, v11, v12, "SDEnv_SetData", v16, a2, v17, a4);
    }
    if (!a1) {
      throwBadLengthForNullPointer(1, "DgnVerifyReadPtr", v10, v11, v12, v13, v14, v15);
    }
    char v267 = 0;
    if (!a3 && a4) {
      throwBadLengthForNullPointer(a4, "DgnVerifyReadPtr", v10, v11, v12, v13, v14, v15);
    }
    char v267 = 0;
    int v18 = *(unsigned __int8 *)a2;
    if (!*(unsigned char *)a2)
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdenv.cpp", 166, (uint64_t)"sdapi/sdenv", 1, (uint64_t)"%s", v14, v15, (char)&errStr_sdapi_sdenv_E_EMPTYNAME);
      int v18 = *(unsigned __int8 *)a2;
    }
    if (v18 == 95) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/sdapi/sdenv.cpp", 167, (uint64_t)"sdapi/sdenv", 2, (uint64_t)"%.500s", v14, v15, (char)a2);
    }
    switch(*a1)
    {
      case 1uLL:
        unint64_t v19 = (EnvHolderMgr *)EnvHolderMgr::smpEnvHolderMgr;
        unint64_t v20 = a1[1];
        if (v20 == -1)
        {
          LODWORD(v20) = -1;
        }
        else
        {
          if (HIDWORD(v20)) {
            throwBadSdapiArgument("SDhEnvHolder", v20, v10, v11, v12, v13, v14, v15);
          }
          if ((v20 + 1) <= 1) {
            throwBadSdapiArgument("SDhEnvHolder", v20, v10, v11, v12, v13, v14, v15);
          }
        }
        EnvMgr = *(EnvMgr **)EnvHolderMgr::getEnvHolder(v19, v20, v10, v11, v12, v13, v14, v15);
        unsigned int TopEnvIdMaybeNew = EnvMgr::getTopEnvIdMaybeNew(EnvMgr, a4 != 0, v246, v247, v248, v249, v250, v251);
        if (TopEnvIdMaybeNew)
        {
          EnvMgr::setData(EnvMgr, TopEnvIdMaybeNew, a2, a3, a4, 0, v252, v253);
          if (!a4
            && !*(_DWORD *)(EnvMgr::getNameIds(EnvMgr, TopEnvIdMaybeNew, v254, v255, v256, v257, v258, v259) + 8))
          {
            goto LABEL_135;
          }
        }
        break;
      case 2uLL:
        uint64_t v141 = (ModelMgr *)ModelMgr::smpModelMgr;
        unint64_t v142 = a1[1];
        if (HIDWORD(v142) || (v142 & 0xFFFF0000) != 0) {
          throwBadSdapiArgument("SDhVoc", a1[1], v10, v11, v12, v13, v14, v15);
        }
        if ((unsigned __int16)v142 - 1 >= 0x7B) {
          throwBadSdapiArgument("SDhVoc", v142, v10, v11, v12, v13, v14, v15);
        }
        uint64_t v149 = *(RuleMgr **)(ModelMgr::getVocOrThrow(v141, (unsigned __int16)v142, v10, v11, v12, v13, v14, v15) + 64);
        uint64_t v98 = (EnvMgr *)*((void *)v149 + 10);
        unint64_t v99 = a1[2];
        if (HIDWORD(v99) || (v99 & 0xFFFF0000) != 0) {
          throwBadSdapiArgument("SDhRule", v99, v143, v144, v145, v146, v147, v148);
        }
        if ((unsigned __int16)v99 == 0xFFFF || !(_WORD)v99) {
          throwBadSdapiArgument("SDhRule", v99, v143, v144, v145, v146, v147, v148);
        }
        RuleMgr::verifyRule(v149, (unsigned __int16)v99, 1, v144, v145, v146, v147, v148);
        LODWORD(v99) = (unsigned __int16)v99;
        unsigned int ItemEnvIdMaybeNew = EnvMgr::getItemEnvIdMaybeNew(v98, (unsigned __int16)v99, a4 != 0, v150, v151, v152, v153, v154);
        if (ItemEnvIdMaybeNew)
        {
          EnvMgr::setData(v98, ItemEnvIdMaybeNew, a2, a3, a4, 0, v155, v156);
          if (!a4
            && !*(_DWORD *)(EnvMgr::getNameIds(v98, ItemEnvIdMaybeNew, v157, v158, v159, v160, v161, v162) + 8))
          {
            goto LABEL_69;
          }
        }
        break;
      case 3uLL:
        uint64_t v87 = (ChannelMgr *)ChannelMgr::smpChannelMgr;
        unint64_t v88 = a1[1];
        if (v88 == -1)
        {
          LODWORD(v88) = -1;
        }
        else
        {
          if (HIDWORD(v88)) {
            throwBadSdapiArgument("SDhSigProc", v88, v10, v11, v12, v13, v14, v15);
          }
          if ((v88 + 1) <= 1) {
            throwBadSdapiArgument("SDhSigProc", v88, v10, v11, v12, v13, v14, v15);
          }
        }
        EnvMgr = *(EnvMgr **)(ChannelMgr::getSigProc(v87, v88, v10, v11, v12, v13, v14, v15) + 424);
        unsigned int TopEnvIdMaybeNew = EnvMgr::getTopEnvIdMaybeNew(EnvMgr, a4 != 0, v232, v233, v234, v235, v236, v237);
        if (TopEnvIdMaybeNew)
        {
          EnvMgr::setData(EnvMgr, TopEnvIdMaybeNew, a2, a3, a4, 0, v238, v239);
          if (!a4
            && !*(_DWORD *)(EnvMgr::getNameIds(EnvMgr, TopEnvIdMaybeNew, v240, v241, v242, v243, v244, v245) + 8))
          {
            goto LABEL_135;
          }
        }
        break;
      case 4uLL:
        int v89 = (ModelMgr *)ModelMgr::smpModelMgr;
        unint64_t v90 = a1[1];
        if (HIDWORD(v90) || (v90 & 0xFFFF0000) != 0) {
          throwBadSdapiArgument("SDhVoc", a1[1], v10, v11, v12, v13, v14, v15);
        }
        if ((unsigned __int16)v90 - 1 >= 0x7B) {
          throwBadSdapiArgument("SDhVoc", v90, v10, v11, v12, v13, v14, v15);
        }
        uint64_t v97 = *(StateMgr **)(ModelMgr::getVocOrThrow(v89, (unsigned __int16)v90, v10, v11, v12, v13, v14, v15) + 56);
        uint64_t v98 = (EnvMgr *)*((void *)v97 + 94);
        unint64_t v99 = a1[2];
        if (HIDWORD(v99)) {
          throwBadSdapiArgument("SDhState", v99, v91, v92, v93, v94, v95, v96);
        }
        if ((v99 + 1) <= 1) {
          throwBadSdapiArgument("SDhState", v99, v91, v92, v93, v94, v95, v96);
        }
        StateMgr::verifyVisible(v97, v99, v91, v92, v93, v94, v95, v96);
        unsigned int ItemEnvIdMaybeNew = EnvMgr::getItemEnvIdMaybeNew(v98, v99, a4 != 0, v100, v101, v102, v103, v104);
        if (ItemEnvIdMaybeNew)
        {
          EnvMgr::setData(v98, ItemEnvIdMaybeNew, a2, a3, a4, 0, v105, v106);
          if (!a4
            && !*(_DWORD *)(EnvMgr::getNameIds(v98, ItemEnvIdMaybeNew, v108, v109, v110, v111, v112, v113) + 8))
          {
LABEL_69:
            EnvMgr::killEnv(v98, ItemEnvIdMaybeNew, v114, v115, v116, v117, v118, v119);
            EnvMgr::setItemEnvId(v98, v99, 0, v120, v121, v122, v123, v124);
          }
        }
        break;
      case 5uLL:
        unint64_t v21 = (ModelMgr *)ModelMgr::smpModelMgr;
        unint64_t v22 = a1[1];
        if (HIDWORD(v22) || (v22 & 0xFFFF0000) != 0) {
          throwBadSdapiArgument("SDhVoc", a1[1], v10, v11, v12, v13, v14, v15);
        }
        if ((unsigned __int16)v22 - 1 >= 0x7B) {
          throwBadSdapiArgument("SDhVoc", v22, v10, v11, v12, v13, v14, v15);
        }
        uint64_t VocOrThrow = ModelMgr::getVocOrThrow(v21, (unsigned __int16)v22, v10, v11, v12, v13, v14, v15);
        unint64_t v30 = *(StateMgr **)(VocOrThrow + 56);
        unint64_t v31 = (EnvMgr *)*((void *)v30 + 95);
        unint64_t v32 = a1[2];
        if (HIDWORD(v32)) {
          throwBadSdapiArgument("SDhState", a1[2], v23, v24, v25, v26, v27, v28);
        }
        if ((v32 + 1) <= 1) {
          throwBadSdapiArgument("SDhState", v32, v23, v24, v25, v26, v27, v28);
        }
        StateMgr::verifyVisible(v30, v32, v23, v24, v25, v26, v27, v28);
        unint64_t v39 = a1[3];
        if ((v39 - 1) >> 32) {
          throwBadSdapiArgument("SDhWord", v39, v33, v34, v35, v36, v37, v38);
        }
        if ((v39 - 1) >= 0xFFFFF4) {
          throwBadSdapiArgument("SDhWord", v39, v33, v34, v35, v36, v37, v38);
        }
        WordList::verifyVisible(*(WordList **)(VocOrThrow + 48), v39 - 1, v33, v34, v35, v36, v37, v38);
        unsigned int ItemPairEnvIdMaybeNew = EnvMgr::getItemPairEnvIdMaybeNew(v31, v32, v39 - 1, a4 != 0, v40, v41, v42, v43);
        if (ItemPairEnvIdMaybeNew)
        {
          EnvMgr::setData(v31, ItemPairEnvIdMaybeNew, a2, a3, a4, 0, v44, v45);
          if (!a4
            && !*(_DWORD *)(EnvMgr::getNameIds(v31, ItemPairEnvIdMaybeNew, v47, v48, v49, v50, v51, v52) + 8))
          {
            EnvMgr::killEnv(v31, ItemPairEnvIdMaybeNew, v53, v54, v55, v56, v57, v58);
            EnvMgr::setItemPairEnvId(v31, v32, v39 - 1, 0, v59, v60, v61, v62);
          }
        }
        break;
      case 6uLL:
        uint64_t v163 = (ModelMgr *)ModelMgr::smpModelMgr;
        unint64_t v164 = a1[1];
        if (HIDWORD(v164) || (v164 & 0xFFFF0000) != 0) {
          throwBadSdapiArgument("SDhUser", v164, v10, v11, v12, v13, v14, v15);
        }
        if ((unsigned __int16)v164 == 0xFFFF || !(_WORD)v164) {
          throwBadSdapiArgument("SDhUser", v164, v10, v11, v12, v13, v14, v15);
        }
        EnvMgr = *(EnvMgr **)ModelMgr::getUserOrThrow(v163, (unsigned __int16)v164, v10, v11, v12, v13, v14, v15);
        unsigned int TopEnvIdMaybeNew = EnvMgr::getTopEnvIdMaybeNew(EnvMgr, a4 != 0, v165, v166, v167, v168, v169, v170);
        if (TopEnvIdMaybeNew)
        {
          EnvMgr::setData(EnvMgr, TopEnvIdMaybeNew, a2, a3, a4, 0, v171, v172);
          if (!a4
            && !*(_DWORD *)(EnvMgr::getNameIds(EnvMgr, TopEnvIdMaybeNew, v173, v174, v175, v176, v177, v178) + 8))
          {
            goto LABEL_135;
          }
        }
        break;
      case 7uLL:
        int v179 = (ChannelMgr *)ChannelMgr::smpChannelMgr;
        unint64_t v180 = a1[1];
        if (HIDWORD(v180)) {
          throwBadSdapiArgument("SDhUtt", v180, v10, v11, v12, v13, v14, v15);
        }
        if ((v180 + 1) <= 1) {
          throwBadSdapiArgument("SDhUtt", v180, v10, v11, v12, v13, v14, v15);
        }
        Utterance = (Utterance *)ChannelMgr::getUtterance(v179, v180, v10, v11, v12, v13, v14, v15);
        EnvMgr = Utterance::getEnvMgr(Utterance);
        unsigned int TopEnvIdMaybeNew = EnvMgr::getTopEnvIdMaybeNew(EnvMgr, a4 != 0, v182, v183, v184, v185, v186, v187);
        if (TopEnvIdMaybeNew)
        {
          EnvMgr::setData(EnvMgr, TopEnvIdMaybeNew, a2, a3, a4, 0, v188, v189);
          if (!a4
            && !*(_DWORD *)(EnvMgr::getNameIds(EnvMgr, TopEnvIdMaybeNew, v190, v191, v192, v193, v194, v195) + 8))
          {
            goto LABEL_135;
          }
        }
        break;
      case 8uLL:
        uint64_t v125 = (ModelMgr *)ModelMgr::smpModelMgr;
        unint64_t v126 = a1[1];
        if (HIDWORD(v126) || (v126 & 0xFFFF0000) != 0) {
          throwBadSdapiArgument("SDhVoc", v126, v10, v11, v12, v13, v14, v15);
        }
        if ((unsigned __int16)v126 - 1 >= 0x7B) {
          throwBadSdapiArgument("SDhVoc", v126, v10, v11, v12, v13, v14, v15);
        }
        EnvMgr = *(EnvMgr **)ModelMgr::getVocOrThrow(v125, (unsigned __int16)v126, v10, v11, v12, v13, v14, v15);
        unsigned int TopEnvIdMaybeNew = EnvMgr::getTopEnvIdMaybeNew(EnvMgr, a4 != 0, v127, v128, v129, v130, v131, v132);
        if (TopEnvIdMaybeNew)
        {
          EnvMgr::setData(EnvMgr, TopEnvIdMaybeNew, a2, a3, a4, 0, v133, v134);
          if (!a4
            && !*(_DWORD *)(EnvMgr::getNameIds(EnvMgr, TopEnvIdMaybeNew, v135, v136, v137, v138, v139, v140) + 8))
          {
            goto LABEL_135;
          }
        }
        break;
      case 9uLL:
        uint64_t v196 = (ModelMgr *)ModelMgr::smpModelMgr;
        unint64_t v197 = a1[1];
        if (HIDWORD(v197) || (v197 & 0xFFFF0000) != 0) {
          throwBadSdapiArgument("SDhVoc", a1[1], v10, v11, v12, v13, v14, v15);
        }
        if ((unsigned __int16)v197 - 1 >= 0x7B) {
          throwBadSdapiArgument("SDhVoc", v197, v10, v11, v12, v13, v14, v15);
        }
        uint64_t v204 = *(WordList **)(ModelMgr::getVocOrThrow(v196, (unsigned __int16)v197, v10, v11, v12, v13, v14, v15) + 48);
        uint64_t v205 = (EnvMgr *)*((void *)v204 + 3);
        unint64_t v206 = a1[2];
        if ((v206 - 1) >> 32) {
          throwBadSdapiArgument("SDhWord", v206, v198, v199, v200, v201, v202, v203);
        }
        if ((v206 - 1) >= 0xFFFFF4) {
          throwBadSdapiArgument("SDhWord", v206, v198, v199, v200, v201, v202, v203);
        }
        WordList::verifyVisible(v204, v206 - 1, v198, v199, v200, v201, v202, v203);
        unsigned int v214 = EnvMgr::getItemEnvIdMaybeNew(v205, v206 - 1, a4 != 0, v207, v208, v209, v210, v211);
        if (v214)
        {
          EnvMgr::setData(v205, v214, a2, a3, a4, 0, v212, v213);
          if (!a4 && !*(_DWORD *)(EnvMgr::getNameIds(v205, v214, v215, v216, v217, v218, v219, v220) + 8))
          {
            EnvMgr::killEnv(v205, v214, v221, v222, v223, v224, v225, v226);
            EnvMgr::setItemEnvId(v205, v206 - 1, 0, v227, v228, v229, v230, v231);
          }
        }
        break;
      case 0xAuLL:
        uint64_t v63 = (ParamSetHolderMgr *)ParamSetHolderMgr::smpParamSetHolderMgr;
        unint64_t v64 = a1[1];
        if (HIDWORD(v64)) {
          throwBadSdapiArgument("SDhParamSetHolder", v64, v10, v11, v12, v13, v14, v15);
        }
        if ((v64 + 1) <= 1) {
          throwBadSdapiArgument("SDhParamSetHolder", v64, v10, v11, v12, v13, v14, v15);
        }
        EnvMgr = *(EnvMgr **)(ParamSetHolderMgr::getParamSetHolder(v63, v64, v10, v11, v12, v13, v14, v15) + 1112);
        unsigned int TopEnvIdMaybeNew = EnvMgr::getTopEnvIdMaybeNew(EnvMgr, a4 != 0, v66, v67, v68, v69, v70, v71);
        if (TopEnvIdMaybeNew)
        {
          EnvMgr::setData(EnvMgr, TopEnvIdMaybeNew, a2, a3, a4, 0, v72, v73);
          if (!a4
            && !*(_DWORD *)(EnvMgr::getNameIds(EnvMgr, TopEnvIdMaybeNew, v75, v76, v77, v78, v79, v80) + 8))
          {
LABEL_135:
            EnvMgr::killEnv(EnvMgr, TopEnvIdMaybeNew, v81, v82, v83, v84, v85, v86);
            EnvMgr::setTopEnvId(EnvMgr, 0, v260, v261, v262, v263, v264, v265);
          }
        }
        break;
      default:
        throwBadSdapiArgument("SDEnvContainerType", *a1, v10, v11, v12, v13, v14, v15);
        break;
    }
  }
  SdapiInsurance::~SdapiInsurance((SdapiInsurance *)v266);
}

void sub_213E28B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2 == 2)
  {
    uint64_t v15 = (ApiState *)__cxa_begin_catch(a1);
    ApiState::handleDgnException(v15, v16);
  }
  else
  {
    if (a2 != 1)
    {
      SdapiInsurance::~SdapiInsurance((SdapiInsurance *)&a14);
      _Unwind_Resume(a1);
    }
    uint64_t v17 = __cxa_begin_catch(a1);
    ApiState::handleDgnMemoryException((uint64_t)v17);
  }
  __cxa_end_catch();
  JUMPOUT(0x213E28AE4);
}

uint64_t onePlusHighestSet32(unsigned int a1)
{
  unsigned int v1 = 32 - __clz(a1);
  if (a1) {
    return v1;
  }
  else {
    return 0;
  }
}

uint64_t SearchItf::beginTopRecPassSyncRecogBase(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 120);
  *(_DWORD *)(result + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = 0;
  return result;
}

uint64_t SearchItf::endTopRecPassSyncRecogBase(uint64_t this)
{
  *(void *)(this + 32) = 0;
  *(_DWORD *)(this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = 1879048192;
  return this;
}

uint64_t SearchItf::unsetArcGraph(SearchItf *this)
{
  uint64_t result = (*(uint64_t (**)(SearchItf *))(*(void *)this + 136))(this);
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  return result;
}

uint64_t SearchItf::setArcGraph(SearchItf *this, const ArcGraph *a2)
{
  *((void *)this + 5) = a2;
  (*(void (**)(SearchItf *))(*(void *)this + 128))(this);
  uint64_t result = VocMgr::getVocOrThrow((VocMgr *)VocMgr::smpVocMgr, *(unsigned __int16 *)(*((void *)this + 5) + 174), v3, v4, v5, v6, v7, v8);
  *((void *)this + 6) = *(void *)(result + 48);
  return result;
}

void SearchItf::SearchItf(SearchItf *this)
{
  *(void *)this = &unk_26C4E58B8;
  *(_OWORD *)((char *)this + 8) = xmmword_214099270;
  *((void *)this + 3) = 0x4E2000000000;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_DWORD *)this + 16) = 0;
  *((_WORD *)this + 34) = -1;
  *((void *)this + 9) = 0x4E2000000064;
  *((_DWORD *)this + 20) = 1879048192;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
}

void SearchItf::~SearchItf(SearchItf *this)
{
  *(void *)this = &unk_26C4E58B8;
  unsigned int v1 = (char *)this + 88;
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)this + 120);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v1);
}

void SearchItf::printSize(SearchItf *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/srchitf.cpp", 104, (DgnString *)&v141);
  if (v142) {
    uint64_t v15 = v141;
  }
  else {
    uint64_t v15 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v11, v12, v13, v14, a3, &byte_2140B33BB, a3, &byte_2140B33BB, v15);
  DgnString::~DgnString((DgnString *)&v141);
  if (a2 != -1) {
    xlprintf("%d ", v16, v17, v18, v19, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v16, v17, v18, v19, a3, &byte_2140B33BB);
  uint64_t v20 = (a3 + 1);
  uint64_t v21 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/srchitf.cpp", 105, (DgnString *)&v141);
  if (v142) {
    uint64_t v26 = v141;
  }
  else {
    uint64_t v26 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v22, v23, v24, v25, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v26, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v141);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/srchitf.cpp", 106, (DgnString *)&v141);
  if (v142) {
    unint64_t v31 = v141;
  }
  else {
    unint64_t v31 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v27, v28, v29, v30, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v31, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v141);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/srchitf.cpp", 107, (DgnString *)&v141);
  if (v142) {
    uint64_t v36 = v141;
  }
  else {
    uint64_t v36 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v32, v33, v34, v35, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v36, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v141);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/srchitf.cpp", 108, (DgnString *)&v141);
  if (v142) {
    uint64_t v41 = v141;
  }
  else {
    uint64_t v41 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v37, v38, v39, v40, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v41, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v141);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/srchitf.cpp", 110, (DgnString *)&v141);
  if (v142) {
    unint64_t v46 = v141;
  }
  else {
    unint64_t v46 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v42, v43, v44, v45, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v46, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v141);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/srchitf.cpp", 112, (DgnString *)&v141);
  if (v142) {
    uint64_t v51 = v141;
  }
  else {
    uint64_t v51 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v47, v48, v49, v50, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v51, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v141);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v52 = 4;
  }
  else {
    uint64_t v52 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/srchitf.cpp", 113, (DgnString *)&v141);
  if (v142) {
    uint64_t v57 = v141;
  }
  else {
    uint64_t v57 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v53, v54, v55, v56, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v57, v52, v52, 0);
  DgnString::~DgnString((DgnString *)&v141);
  *a4 += v52;
  *a5 += v52;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v58 = 4;
  }
  else {
    uint64_t v58 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/srchitf.cpp", 114, (DgnString *)&v141);
  if (v142) {
    uint64_t v63 = v141;
  }
  else {
    uint64_t v63 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v59, v60, v61, v62, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v63, v58, v58, 0);
  DgnString::~DgnString((DgnString *)&v141);
  *a4 += v58;
  *a5 += v58;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v64 = 4;
  }
  else {
    uint64_t v64 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/srchitf.cpp", 115, (DgnString *)&v141);
  if (v142) {
    uint64_t v69 = v141;
  }
  else {
    uint64_t v69 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v65, v66, v67, v68, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v69, v64, v64, 0);
  DgnString::~DgnString((DgnString *)&v141);
  *a4 += v64;
  *a5 += v64;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v70 = 4;
  }
  else {
    uint64_t v70 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/srchitf.cpp", 116, (DgnString *)&v141);
  if (v142) {
    uint64_t v75 = v141;
  }
  else {
    uint64_t v75 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v71, v72, v73, v74, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v75, v70, v70, 0);
  DgnString::~DgnString((DgnString *)&v141);
  *a4 += v70;
  *a5 += v70;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/srchitf.cpp", 117, (DgnString *)&v141);
  if (v142) {
    uint64_t v80 = v141;
  }
  else {
    uint64_t v80 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v76, v77, v78, v79, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v80, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v141);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/srchitf.cpp", 119, (DgnString *)&v141);
  if (v142) {
    uint64_t v85 = v141;
  }
  else {
    uint64_t v85 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v81, v82, v83, v84, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v85, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v141);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/srchitf.cpp", 121, (DgnString *)&v141);
  if (v142) {
    unint64_t v90 = v141;
  }
  else {
    unint64_t v90 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v86, v87, v88, v89, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v90, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v141);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/srchitf.cpp", 123, (DgnString *)&v141);
  if (v142) {
    uint64_t v95 = v141;
  }
  else {
    uint64_t v95 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v91, v92, v93, v94, (a3 + 1), &byte_2140B33BB, (34 - a3), (34 - a3), v95, 4, 4, 0);
  uint64_t v139 = a3;
  uint64_t v96 = a6;
  DgnString::~DgnString((DgnString *)&v141);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/srchitf.cpp", 125, (DgnString *)&v141);
  if (v142) {
    uint64_t v101 = v141;
  }
  else {
    uint64_t v101 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v97, v98, v99, v100, v20, &byte_2140B33BB, v21, v21, v101, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v141);
  *a4 += 4;
  *a5 += 4;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v102 = 12;
  }
  else {
    uint64_t v102 = 16;
  }
  uint64_t v103 = *((unsigned int *)this + 24);
  unsigned int v104 = *((_DWORD *)this + 25);
  if (v104 >= v103)
  {
    uint64_t v105 = 0;
    if ((int)v103 > 0) {
      v102 += 4 * (v103 - 1) + 4;
    }
    uint64_t v106 = v102 + 4 * (v104 - v103);
  }
  else
  {
    uint64_t v105 = 4 * v103;
    uint64_t v106 = v102;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/srchitf.cpp", 127, (DgnString *)&v141);
  if (v142) {
    uint64_t v111 = v141;
  }
  else {
    uint64_t v111 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v107, v108, v109, v110, v20, &byte_2140B33BB, v21, v21, v111, v106, v102, v105);
  DgnString::~DgnString((DgnString *)&v141);
  *a4 += v106;
  *a5 += v102;
  *v96 += v105;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v112 = 4;
  }
  else {
    uint64_t v112 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/srchitf.cpp", 128, (DgnString *)&v141);
  if (v142) {
    uint64_t v117 = v141;
  }
  else {
    uint64_t v117 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v113, v114, v115, v116, v20, &byte_2140B33BB, v21, v21, v117, v112, v112, 0);
  DgnString::~DgnString((DgnString *)&v141);
  *a4 += v112;
  *a5 += v112;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v118 = 4;
  }
  else {
    uint64_t v118 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/srchitf.cpp", 129, (DgnString *)&v141);
  if (v142) {
    uint64_t v123 = v141;
  }
  else {
    uint64_t v123 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v119, v120, v121, v122, v20, &byte_2140B33BB, v21, v21, v123, v118, v118, 0);
  DgnString::~DgnString((DgnString *)&v141);
  *a4 += v118;
  *a5 += v118;
  uint64_t v124 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v124 = 16;
  }
  uint64_t v125 = *((unsigned int *)this + 32);
  uint64_t v126 = 8 * v125;
  if ((int)v125 <= 0) {
    uint64_t v126 = 0;
  }
  uint64_t v127 = v126 + v124;
  uint64_t v128 = v126 + v124 + 8 * (*((_DWORD *)this + 33) - v125);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/srchitf.cpp", 131, (DgnString *)&v141);
  if (v142) {
    uint64_t v133 = v141;
  }
  else {
    uint64_t v133 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v129, v130, v131, v132, v20, &byte_2140B33BB, v21, v21, v133, v128, v127, 0);
  DgnString::~DgnString((DgnString *)&v141);
  *a4 += v128;
  *a5 += v127;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/srchitf.cpp", 132, (DgnString *)&v141);
  if (v142) {
    uint64_t v138 = v141;
  }
  else {
    uint64_t v138 = &byte_2140B33BB;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v134, v135, v136, v137, v139, &byte_2140B33BB, (35 - v139), (35 - v139), v138, *a4, *a5, *v96);
  DgnString::~DgnString((DgnString *)&v141);
}

void sub_213E2974C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t SearchItf::setHashPropagateBestTokensFirst(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

uint64_t SearchItf::normalizeBestAndComputeEstimatedThresh(SearchItf *this, int a2, int a3)
{
  if (a3 == 20000 || a2 <= -1) {
    int v5 = 0;
  }
  else {
    int v5 = a3;
  }
  int v6 = *((_DWORD *)this + 20) + v5;
  *((_DWORD *)this + 20) = v6;
  unsigned int v7 = *((_DWORD *)this + 24);
  if (v7 == *((_DWORD *)this + 25))
  {
    DgnPrimArray<unsigned int>::reallocElts((uint64_t)this + 88, 1, 1);
    unsigned int v7 = *((_DWORD *)this + 24);
  }
  *(_DWORD *)(*((void *)this + 11) + 4 * v7) = v6;
  ++*((_DWORD *)this + 24);
  *(_DWORD *)(*((void *)this + 4) + 256) = v5;
  return 20000;
}

void MrecInitModule_adaptctl_recogctl(void)
{
  if (!gParDebugShowSegmentation)
  {
    uint64_t v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugShowSegmentation", byte_21409929B, byte_21409929B, 0, 0, 0);
    *unsigned int v1 = &unk_26C4E0858;
    gParDebugShowSegmentation = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugShowSegmentation);
  }
  if (!gParDebugAdaptationStartup)
  {
    uint64_t v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "DebugAdaptationStartup", byte_21409929B, byte_21409929B, 0, 0, 0);
    *uint64_t v3 = &unk_26C4E0858;
    gParDebugAdaptationStartup = (uint64_t)v3;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugAdaptationStartup);
  }
  if (!gParDebugAdaptationAccumulate)
  {
    uint64_t v4 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v4, "DebugAdaptationAccumulate", byte_21409929B, byte_21409929B, 0, 0, 0);
    *int v5 = &unk_26C4E0858;
    gParDebugAdaptationAccumulate = (uint64_t)v5;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugAdaptationAccumulate);
  }
  if (!gParDebugAdaptationApply)
  {
    int v6 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v6, "DebugAdaptationApply", byte_21409929B, byte_21409929B, 0, 0, 0);
    void *v7 = &unk_26C4E0858;
    gParDebugAdaptationApply = (uint64_t)v7;
    uint64_t v8 = (uint64_t *)GlobalParamMgr::smpGlobalParamMgr;
    GlobalParamMgr::addParam(v8, (GlobalParam **)&gParDebugAdaptationApply);
  }
}

void AdaptControllerResults::~AdaptControllerResults(AdaptControllerResults *this)
{
  *((void *)this + 4) = 0;
  DgnDelete<PelScoreCacheData>(*((PelScoreCacheData **)this + 5));
  *((void *)this + 5) = 0;
  DgnDelete<PelScoreCacheData>(*((PelScoreCacheData **)this + 6));
  *((void *)this + 6) = 0;
  DgnDelete<NBestChoiceList>(*((NBestChoiceList **)this + 7));
  *((void *)this + 7) = 0;
  PhnMgr::~PhnMgr((AdaptControllerResults *)((char *)this + 64));
  DgnString::~DgnString((AdaptControllerResults *)((char *)this + 16));
}

PelScoreCacheData *DgnDelete<PelScoreCacheData>(PelScoreCacheData *result)
{
  if (result)
  {
    PelScoreCacheData::~PelScoreCacheData(result);
    return (PelScoreCacheData *)MemChunkFree(v1, 0);
  }
  return result;
}

void AdaptControllerResults::printSize(AdaptControllerResults *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 427, (DgnString *)&v80);
  if (v81) {
    uint64_t v16 = (void *)v80;
  }
  else {
    uint64_t v16 = &unk_21409929B;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_21409929B, a3, &unk_21409929B, v16);
  DgnString::~DgnString((DgnString *)&v80);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_21409929B);
  uint64_t v21 = (a3 + 1);
  uint64_t v77 = a3;
  uint64_t v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 429, (DgnString *)&v80);
  if (v81) {
    uint64_t v27 = (void *)v80;
  }
  else {
    uint64_t v27 = &unk_21409929B;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, v21, &unk_21409929B, v22, v22, v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v80);
  *a4 += 4;
  *a5 += 4;
  uint64_t v28 = sizeObject((uint64_t)this + 4, 0);
  uint64_t v29 = sizeObject((uint64_t)this + 4, 1);
  uint64_t v30 = sizeObject((uint64_t)this + 4, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 431, (DgnString *)&v80);
  if (v81) {
    uint64_t v35 = (void *)v80;
  }
  else {
    uint64_t v35 = &unk_21409929B;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v31, v32, v33, v34, v21, &unk_21409929B, v22, v22, v35, v28, v29, v30);
  DgnString::~DgnString((DgnString *)&v80);
  *a4 += v28;
  *a5 += v29;
  *a6 += v30;
  uint64_t v36 = sizeObject((char *)this + 16);
  uint64_t v37 = sizeObject((char *)this + 16);
  uint64_t v38 = sizeObject((char *)this + 16);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 433, (DgnString *)&v80);
  if (v81) {
    uint64_t v43 = (void *)v80;
  }
  else {
    uint64_t v43 = &unk_21409929B;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v39, v40, v41, v42, v21, &unk_21409929B, v22, v22, v43, v36, v37, v38);
  DgnString::~DgnString((DgnString *)&v80);
  *a4 += v36;
  *a5 += v37;
  *a6 += v38;
  uint64_t v44 = (Segmentation *)*((void *)this + 4);
  if (v44)
  {
    unint64_t v79 = 0;
    unint64_t v80 = 0;
    unint64_t v78 = 0;
    Segmentation::printSize(v44, 0xFFFFFFFFLL, v21, &v80, &v79, &v78);
    *a4 += v80;
    *a5 += v79;
    *a6 += v78;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v45 = 4;
  }
  else {
    uint64_t v45 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 435, (DgnString *)&v80);
  if (v81) {
    uint64_t v50 = (void *)v80;
  }
  else {
    uint64_t v50 = &unk_21409929B;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v46, v47, v48, v49, v21, &unk_21409929B, v22, v22, v50, v45, v45, 0);
  DgnString::~DgnString((DgnString *)&v80);
  *a4 += v45;
  *a5 += v45;
  unint64_t v79 = 0;
  unint64_t v80 = 0;
  unint64_t v78 = 0;
  PhnMgr::printSize((AdaptControllerResults *)((char *)this + 64), 0xFFFFFFFFLL, v21, &v80, &v79, &v78);
  *a4 += v80;
  *a5 += v79;
  *a6 += v78;
  uint64_t v51 = (PelScoreCacheData *)*((void *)this + 5);
  if (v51)
  {
    unint64_t v79 = 0;
    unint64_t v80 = 0;
    unint64_t v78 = 0;
    PelScoreCacheData::printSize(v51, 0xFFFFFFFFLL, v21, &v80, &v79, &v78);
    *a4 += v80;
    *a5 += v79;
    *a6 += v78;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v52 = 4;
  }
  else {
    uint64_t v52 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 438, (DgnString *)&v80);
  if (v81) {
    uint64_t v57 = (void *)v80;
  }
  else {
    uint64_t v57 = &unk_21409929B;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v53, v54, v55, v56, v21, &unk_21409929B, v22, v22, v57, v52, v52, 0);
  DgnString::~DgnString((DgnString *)&v80);
  *a4 += v52;
  *a5 += v52;
  uint64_t v58 = (PelScoreCacheData *)*((void *)this + 6);
  if (v58)
  {
    unint64_t v79 = 0;
    unint64_t v80 = 0;
    unint64_t v78 = 0;
    PelScoreCacheData::printSize(v58, 0xFFFFFFFFLL, v21, &v80, &v79, &v78);
    *a4 += v80;
    *a5 += v79;
    *a6 += v78;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v59 = 4;
  }
  else {
    uint64_t v59 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 440, (DgnString *)&v80);
  if (v81) {
    uint64_t v64 = (void *)v80;
  }
  else {
    uint64_t v64 = &unk_21409929B;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v60, v61, v62, v63, v21, &unk_21409929B, v22, v22, v64, v59, v59, 0);
  DgnString::~DgnString((DgnString *)&v80);
  *a4 += v59;
  *a5 += v59;
  uint64_t v65 = (NBestChoiceList *)*((void *)this + 7);
  if (v65)
  {
    unint64_t v79 = 0;
    unint64_t v80 = 0;
    unint64_t v78 = 0;
    NBestChoiceList::printSize(v65, 0xFFFFFFFFLL, v21, &v80, &v79, &v78);
    *a4 += v80;
    *a5 += v79;
    *a6 += v78;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v66 = 4;
  }
  else {
    uint64_t v66 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 442, (DgnString *)&v80);
  if (v81) {
    uint64_t v71 = (void *)v80;
  }
  else {
    uint64_t v71 = &unk_21409929B;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v67, v68, v69, v70, v21, &unk_21409929B, v22, v22, v71, v66, v66, 0);
  DgnString::~DgnString((DgnString *)&v80);
  *a4 += v66;
  *a5 += v66;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 444, (DgnString *)&v80);
  if (v81) {
    uint64_t v76 = (void *)v80;
  }
  else {
    uint64_t v76 = &unk_21409929B;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v72, v73, v74, v75, v77, &unk_21409929B, (35 - v77), (35 - v77), v76, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v80);
}

void sub_213E2A164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void AdaptAccumStats::printSize(AdaptAccumStats *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 455, (DgnString *)&v70);
  if (v71) {
    uint64_t v16 = v70;
  }
  else {
    uint64_t v16 = &unk_21409929B;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_21409929B, a3, &unk_21409929B, v16);
  DgnString::~DgnString((DgnString *)&v70);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_21409929B);
  uint64_t v21 = SnapTime::sizeObject((uint64_t)this, 0);
  uint64_t v22 = SnapTime::sizeObject((uint64_t)this, 1);
  uint64_t v23 = SnapTime::sizeObject((uint64_t)this, 3);
  uint64_t v24 = (a3 + 1);
  uint64_t v69 = a3;
  uint64_t v25 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 457, (DgnString *)&v70);
  if (v71) {
    uint64_t v30 = v70;
  }
  else {
    uint64_t v30 = &unk_21409929B;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v26, v27, v28, v29, v24, &unk_21409929B, v25, v25, v30, v21, v22, v23);
  DgnString::~DgnString((DgnString *)&v70);
  *a4 += v21;
  *a5 += v22;
  *a6 += v23;
  uint64_t v31 = SnapTime::sizeObject((uint64_t)this + 32, 0);
  uint64_t v32 = SnapTime::sizeObject((uint64_t)this + 32, 1);
  uint64_t v33 = SnapTime::sizeObject((uint64_t)this + 32, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 459, (DgnString *)&v70);
  if (v71) {
    uint64_t v38 = v70;
  }
  else {
    uint64_t v38 = &unk_21409929B;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v34, v35, v36, v37, v24, &unk_21409929B, v25, v25, v38, v31, v32, v33);
  DgnString::~DgnString((DgnString *)&v70);
  *a4 += v31;
  *a5 += v32;
  *a6 += v33;
  uint64_t v39 = SnapTime::sizeObject((uint64_t)this + 64, 0);
  uint64_t v40 = SnapTime::sizeObject((uint64_t)this + 64, 1);
  uint64_t v41 = SnapTime::sizeObject((uint64_t)this + 64, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 461, (DgnString *)&v70);
  if (v71) {
    uint64_t v46 = v70;
  }
  else {
    uint64_t v46 = &unk_21409929B;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v42, v43, v44, v45, v24, &unk_21409929B, v25, v25, v46, v39, v40, v41);
  DgnString::~DgnString((DgnString *)&v70);
  *a4 += v39;
  *a5 += v40;
  *a6 += v41;
  uint64_t v47 = SnapTime::sizeObject((uint64_t)this + 96, 0);
  uint64_t v48 = SnapTime::sizeObject((uint64_t)this + 96, 1);
  uint64_t v49 = SnapTime::sizeObject((uint64_t)this + 96, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 463, (DgnString *)&v70);
  if (v71) {
    uint64_t v54 = v70;
  }
  else {
    uint64_t v54 = &unk_21409929B;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v50, v51, v52, v53, v24, &unk_21409929B, v25, v25, v54, v47, v48, v49);
  DgnString::~DgnString((DgnString *)&v70);
  *a4 += v47;
  *a5 += v48;
  *a6 += v49;
  uint64_t v55 = (char *)this + 128;
  uint64_t v56 = SnapTime::sizeObject((uint64_t)this + 128, 0);
  uint64_t v57 = SnapTime::sizeObject((uint64_t)v55, 1);
  uint64_t v58 = SnapTime::sizeObject((uint64_t)v55, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 465, (DgnString *)&v70);
  if (v71) {
    uint64_t v63 = v70;
  }
  else {
    uint64_t v63 = &unk_21409929B;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v59, v60, v61, v62, v24, &unk_21409929B, v25, v25, v63, v56, v57, v58);
  DgnString::~DgnString((DgnString *)&v70);
  *a4 += v56;
  *a5 += v57;
  *a6 += v58;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 466, (DgnString *)&v70);
  if (v71) {
    uint64_t v68 = v70;
  }
  else {
    uint64_t v68 = &unk_21409929B;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v64, v65, v66, v67, v69, &unk_21409929B, (35 - v69), (35 - v69), v68, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v70);
}

void sub_213E2A604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t AdaptController::getPelMgr(AdaptController *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return *(void *)(ModelMgr::getUserOrThrow((ModelMgr *)ModelMgr::smpModelMgr, *((unsigned __int16 *)this + 1), a3, a4, a5, a6, a7, a8)+ 56);
}

void AdaptApplyStats::printSize(AdaptApplyStats *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 585, (DgnString *)&v70);
  if (v71) {
    uint64_t v16 = v70;
  }
  else {
    uint64_t v16 = &unk_21409929B;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_21409929B, a3, &unk_21409929B, v16);
  DgnString::~DgnString((DgnString *)&v70);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_21409929B);
  uint64_t v21 = SnapTime::sizeObject((uint64_t)this, 0);
  uint64_t v22 = SnapTime::sizeObject((uint64_t)this, 1);
  uint64_t v23 = SnapTime::sizeObject((uint64_t)this, 3);
  uint64_t v24 = (a3 + 1);
  uint64_t v69 = a3;
  uint64_t v25 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 587, (DgnString *)&v70);
  if (v71) {
    uint64_t v30 = v70;
  }
  else {
    uint64_t v30 = &unk_21409929B;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v26, v27, v28, v29, v24, &unk_21409929B, v25, v25, v30, v21, v22, v23);
  DgnString::~DgnString((DgnString *)&v70);
  *a4 += v21;
  *a5 += v22;
  *a6 += v23;
  uint64_t v31 = SnapTime::sizeObject((uint64_t)this + 32, 0);
  uint64_t v32 = SnapTime::sizeObject((uint64_t)this + 32, 1);
  uint64_t v33 = SnapTime::sizeObject((uint64_t)this + 32, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 589, (DgnString *)&v70);
  if (v71) {
    uint64_t v38 = v70;
  }
  else {
    uint64_t v38 = &unk_21409929B;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v34, v35, v36, v37, v24, &unk_21409929B, v25, v25, v38, v31, v32, v33);
  DgnString::~DgnString((DgnString *)&v70);
  *a4 += v31;
  *a5 += v32;
  *a6 += v33;
  uint64_t v39 = SnapTime::sizeObject((uint64_t)this + 64, 0);
  uint64_t v40 = SnapTime::sizeObject((uint64_t)this + 64, 1);
  uint64_t v41 = SnapTime::sizeObject((uint64_t)this + 64, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 591, (DgnString *)&v70);
  if (v71) {
    uint64_t v46 = v70;
  }
  else {
    uint64_t v46 = &unk_21409929B;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v42, v43, v44, v45, v24, &unk_21409929B, v25, v25, v46, v39, v40, v41);
  DgnString::~DgnString((DgnString *)&v70);
  *a4 += v39;
  *a5 += v40;
  *a6 += v41;
  uint64_t v47 = SnapTime::sizeObject((uint64_t)this + 96, 0);
  uint64_t v48 = SnapTime::sizeObject((uint64_t)this + 96, 1);
  uint64_t v49 = SnapTime::sizeObject((uint64_t)this + 96, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 593, (DgnString *)&v70);
  if (v71) {
    uint64_t v54 = v70;
  }
  else {
    uint64_t v54 = &unk_21409929B;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v50, v51, v52, v53, v24, &unk_21409929B, v25, v25, v54, v47, v48, v49);
  DgnString::~DgnString((DgnString *)&v70);
  *a4 += v47;
  *a5 += v48;
  *a6 += v49;
  uint64_t v55 = (char *)this + 128;
  uint64_t v56 = SnapTime::sizeObject((uint64_t)this + 128, 0);
  uint64_t v57 = SnapTime::sizeObject((uint64_t)v55, 1);
  uint64_t v58 = SnapTime::sizeObject((uint64_t)v55, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 595, (DgnString *)&v70);
  if (v71) {
    uint64_t v63 = v70;
  }
  else {
    uint64_t v63 = &unk_21409929B;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v59, v60, v61, v62, v24, &unk_21409929B, v25, v25, v63, v56, v57, v58);
  DgnString::~DgnString((DgnString *)&v70);
  *a4 += v56;
  *a5 += v57;
  *a6 += v58;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 596, (DgnString *)&v70);
  if (v71) {
    uint64_t v68 = v70;
  }
  else {
    uint64_t v68 = &unk_21409929B;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v64, v65, v66, v67, v69, &unk_21409929B, (35 - v69), (35 - v69), v68, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v70);
}

void sub_213E2AACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

void AdaptController::~AdaptController(AdaptController *this)
{
  AdaptController::releaseAccumulators(this);
  if (*((_DWORD *)this + 10))
  {
    SigProc = (SigProc *)ChannelMgr::getSigProc((ChannelMgr *)ChannelMgr::smpChannelMgr, *((_DWORD *)this + 1), v2, v3, v4, v5, v6, v7);
    SigProc::decrementAdapterCount(SigProc, v9, v10, v11, v12, v13, v14, v15);
    UserOrThrow = (User *)ModelMgr::getUserOrThrow((ModelMgr *)ModelMgr::smpModelMgr, *((unsigned __int16 *)this + 1), v16, v17, v18, v19, v20, v21);
    User::decrementAdapterCount(UserOrThrow, v23, v24, v25, v26, v27, v28, v29);
  }
  uint64_t v30 = *((void *)this + 1);
  if (v30)
  {
    --*(_DWORD *)(v30 + 36);
    *((void *)this + 1) = 0;
  }
  uint64_t v31 = *((void *)this + 2);
  if (v31)
  {
    --*(_DWORD *)(v31 + 36);
    *((void *)this + 2) = 0;
  }
  uint64_t v32 = *((void *)this + 3);
  if (v32)
  {
    --*(_DWORD *)(v32 + 36);
    *((void *)this + 3) = 0;
  }
  DgnDelete<PelScorer>(*((void *)this + 4));
  *((void *)this + 4) = 0;
  uint64_t v33 = (void *)*((void *)this + 20);
  if (v33) {
    MemChunkFree(v33, 0);
  }
  *((void *)this + 20) = 0;
  uint64_t v34 = (void *)*((void *)this + 21);
  if (v34) {
    MemChunkFree(v34, 0);
  }
  *((void *)this + 21) = 0;
  DgnIOwnArray<WeightAccum *>::releaseAll((uint64_t)this + 96);
  DgnArray<DgnIOwnArray<BasisAccum *>>::releaseAll((uint64_t)this + 80);
  AdaptConfig::clear((void *)this + 5);
}

void *AdaptController::releaseAccumulators(AdaptController *this)
{
  DgnDelete<DgnPrimArray<unsigned int>>(*((void *)this + 18));
  *((void *)this + 18) = 0;
  DgnDelete<DgnPrimArray<unsigned int>>(*((void *)this + 19));
  *((void *)this + 19) = 0;
  DgnDelete<ConstrainedTransAccMgr>(*((ConstrainedTransAccMgr **)this + 7));
  *((void *)this + 7) = 0;
  DgnDelete<IntruderMgr>(*((IntruderMgr **)this + 8));
  *((void *)this + 8) = 0;
  DgnDelete<WarpChooser>(*((WarpChooser **)this + 9));
  *((void *)this + 9) = 0;
  DgnDelete<DurAccum>(*((void *)this + 14));
  *((void *)this + 14) = 0;
  DgnArray<DgnIOwnArray<BasisAccum *>>::releaseAll((uint64_t)this + 80);
  uint64_t result = DgnIOwnArray<WeightAccum *>::releaseAll((uint64_t)this + 96);
  *((unsigned char *)this + 137) = 0;
  return result;
}

void AdaptController::printSize(AdaptController *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 798, (DgnString *)&v190);
  if (v191) {
    uint64_t v16 = (void *)v190;
  }
  else {
    uint64_t v16 = &unk_21409929B;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_21409929B, a3, &unk_21409929B, v16);
  DgnString::~DgnString((DgnString *)&v190);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_21409929B);
  uint64_t v21 = (a3 + 1);
  uint64_t v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 799, (DgnString *)&v190);
  if (v191) {
    uint64_t v27 = (void *)v190;
  }
  else {
    uint64_t v27 = &unk_21409929B;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_21409929B, (34 - a3), (34 - a3), v27, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v190);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 800, (DgnString *)&v190);
  if (v191) {
    uint64_t v32 = (void *)v190;
  }
  else {
    uint64_t v32 = &unk_21409929B;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_21409929B, (34 - a3), (34 - a3), v32, 2, 2, 0);
  DgnString::~DgnString((DgnString *)&v190);
  *a4 += 2;
  *a5 += 2;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 801, (DgnString *)&v190);
  if (v191) {
    uint64_t v37 = (void *)v190;
  }
  else {
    uint64_t v37 = &unk_21409929B;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &unk_21409929B, (34 - a3), (34 - a3), v37, 4, 4, 0);
  uint64_t v187 = a3;
  DgnString::~DgnString((DgnString *)&v190);
  *a4 += 4;
  *a5 += 4;
  uint64_t v38 = *((void *)this + 4);
  if (v38)
  {
    unint64_t v189 = 0;
    unint64_t v190 = 0;
    unint64_t v188 = 0;
    (*(void (**)(uint64_t, uint64_t, void, unint64_t *, unint64_t *, unint64_t *))(*(void *)v38 + 32))(v38, 0xFFFFFFFFLL, (a3 + 1), &v190, &v189, &v188);
    *a4 += v190;
    *a5 += v189;
    *a6 += v188;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v39 = 4;
  }
  else {
    uint64_t v39 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 803, (DgnString *)&v190);
  if (v191) {
    uint64_t v44 = (void *)v190;
  }
  else {
    uint64_t v44 = &unk_21409929B;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v40, v41, v42, v43, v21, &unk_21409929B, v22, v22, v44, v39, v39, 0);
  DgnString::~DgnString((DgnString *)&v190);
  *a4 += v39;
  *a5 += v39;
  uint64_t v45 = sizeObject((uint64_t)this + 40, 0);
  uint64_t v46 = sizeObject((uint64_t)this + 40, 1);
  uint64_t v47 = sizeObject((uint64_t)this + 40, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 804, (DgnString *)&v190);
  if (v191) {
    uint64_t v52 = (void *)v190;
  }
  else {
    uint64_t v52 = &unk_21409929B;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, v21, &unk_21409929B, v22, v22, v52, v45, v46, v47);
  DgnString::~DgnString((DgnString *)&v190);
  *a4 += v45;
  *a5 += v46;
  *a6 += v47;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v53 = 4;
  }
  else {
    uint64_t v53 = 8;
  }
  uint64_t v54 = *((void *)this + 1);
  if (v54)
  {
    uint64_t v55 = (*(uint64_t (**)(uint64_t, void))(*(void *)v54 + 104))(v54, 0) + v53;
    uint64_t v56 = *((void *)this + 1);
    if (gShadowDiagnosticShowIdealizedObjectSizes) {
      uint64_t v53 = 4;
    }
    else {
      uint64_t v53 = 8;
    }
    if (v56
      && (v53 += (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v56 + 104))(v56, 1),
          (uint64_t v57 = *((void *)this + 1)) != 0))
    {
      uint64_t v58 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v57 + 104))(v57, 3);
    }
    else
    {
      uint64_t v58 = 0;
    }
  }
  else
  {
    uint64_t v58 = 0;
    uint64_t v55 = v53;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 806, (DgnString *)&v190);
  if (v191) {
    uint64_t v63 = (void *)v190;
  }
  else {
    uint64_t v63 = &unk_21409929B;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v59, v60, v61, v62, v21, &unk_21409929B, v22, v22, v63, v55, v53, v58);
  DgnString::~DgnString((DgnString *)&v190);
  *a4 += v55;
  *a5 += v53;
  *a6 += v58;
  uint64_t v64 = (IntruderMgr *)*((void *)this + 8);
  if (v64)
  {
    unint64_t v189 = 0;
    unint64_t v190 = 0;
    unint64_t v188 = 0;
    IntruderMgr::printSize(v64, 0xFFFFFFFFLL, v21, &v190, &v189, &v188);
    *a4 += v190;
    *a5 += v189;
    *a6 += v188;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v65 = 4;
  }
  else {
    uint64_t v65 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 808, (DgnString *)&v190);
  if (v191) {
    uint64_t v70 = (void *)v190;
  }
  else {
    uint64_t v70 = &unk_21409929B;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v66, v67, v68, v69, v21, &unk_21409929B, v22, v22, v70, v65, v65, 0);
  DgnString::~DgnString((DgnString *)&v190);
  *a4 += v65;
  *a5 += v65;
  int v71 = (WarpChooser *)*((void *)this + 9);
  if (v71)
  {
    unint64_t v189 = 0;
    unint64_t v190 = 0;
    unint64_t v188 = 0;
    WarpChooser::printSize(v71, 0xFFFFFFFFLL, v21, &v190, &v189, &v188);
    *a4 += v190;
    *a5 += v189;
    *a6 += v188;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v72 = 4;
  }
  else {
    uint64_t v72 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 810, (DgnString *)&v190);
  if (v191) {
    uint64_t v77 = (void *)v190;
  }
  else {
    uint64_t v77 = &unk_21409929B;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v73, v74, v75, v76, v21, &unk_21409929B, v22, v22, v77, v72, v72, 0);
  DgnString::~DgnString((DgnString *)&v190);
  *a4 += v72;
  *a5 += v72;
  unint64_t v78 = (ConstrainedTransAccMgr *)*((void *)this + 7);
  if (v78)
  {
    unint64_t v189 = 0;
    unint64_t v190 = 0;
    unint64_t v188 = 0;
    ConstrainedTransAccMgr::printSize(v78, 0xFFFFFFFFLL, v21, &v190, &v189, &v188);
    *a4 += v190;
    *a5 += v189;
    *a6 += v188;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v79 = 4;
  }
  else {
    uint64_t v79 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 812, (DgnString *)&v190);
  if (v191) {
    uint64_t v84 = (void *)v190;
  }
  else {
    uint64_t v84 = &unk_21409929B;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v80, v81, v82, v83, v21, &unk_21409929B, v22, v22, v84, v79, v79, 0);
  DgnString::~DgnString((DgnString *)&v190);
  *a4 += v79;
  *a5 += v79;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 814, (DgnString *)&v190);
  if (v191) {
    uint64_t v89 = (void *)v190;
  }
  else {
    uint64_t v89 = &unk_21409929B;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v85, v86, v87, v88, v21, &unk_21409929B, v22, v22, v89, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v190);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 816, (DgnString *)&v190);
  if (v191) {
    uint64_t v94 = (void *)v190;
  }
  else {
    uint64_t v94 = &unk_21409929B;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v90, v91, v92, v93, v21, &unk_21409929B, v22, v22, v94, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v190);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 818, (DgnString *)&v190);
  if (v191) {
    uint64_t v99 = (void *)v190;
  }
  else {
    uint64_t v99 = &unk_21409929B;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v95, v96, v97, v98, v21, &unk_21409929B, v22, v22, v99, 8, 8, 0);
  DgnString::~DgnString((DgnString *)&v190);
  *a4 += 8;
  *a5 += 8;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 819, (DgnString *)&v190);
  if (v191) {
    unsigned int v104 = (void *)v190;
  }
  else {
    unsigned int v104 = &unk_21409929B;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v100, v101, v102, v103, v21, &unk_21409929B, v22, v22, v104, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v190);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 821, (DgnString *)&v190);
  if (v191) {
    uint64_t v109 = (void *)v190;
  }
  else {
    uint64_t v109 = &unk_21409929B;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v105, v106, v107, v108, v21, &unk_21409929B, v22, v22, v109, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v190);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 823, (DgnString *)&v190);
  if (v191) {
    uint64_t v114 = (void *)v190;
  }
  else {
    uint64_t v114 = &unk_21409929B;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v110, v111, v112, v113, v21, &unk_21409929B, v22, v22, v114, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v190);
  ++*a4;
  ++*a5;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 824, (DgnString *)&v190);
  if (v191) {
    uint64_t v119 = (void *)v190;
  }
  else {
    uint64_t v119 = &unk_21409929B;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v115, v116, v117, v118, v21, &unk_21409929B, v22, v22, v119, 1, 1, 0);
  DgnString::~DgnString((DgnString *)&v190);
  ++*a4;
  ++*a5;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v120 = 4;
  }
  else {
    uint64_t v120 = 8;
  }
  uint64_t v121 = *((void *)this + 18);
  if (v121)
  {
    uint64_t v122 = sizeObject(v121, 0) + v120;
    uint64_t v123 = *((void *)this + 18);
    if (gShadowDiagnosticShowIdealizedObjectSizes) {
      uint64_t v120 = 4;
    }
    else {
      uint64_t v120 = 8;
    }
    if (v123 && (v120 += sizeObject(v123, 1), (uint64_t v124 = *((void *)this + 18)) != 0)) {
      uint64_t v125 = sizeObject(v124, 3);
    }
    else {
      uint64_t v125 = 0;
    }
  }
  else
  {
    uint64_t v125 = 0;
    uint64_t v122 = v120;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 825, (DgnString *)&v190);
  if (v191) {
    uint64_t v130 = (void *)v190;
  }
  else {
    uint64_t v130 = &unk_21409929B;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v126, v127, v128, v129, v21, &unk_21409929B, v22, v22, v130, v122, v120, v125);
  DgnString::~DgnString((DgnString *)&v190);
  *a4 += v122;
  *a5 += v120;
  *a6 += v125;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v131 = 4;
  }
  else {
    uint64_t v131 = 8;
  }
  uint64_t v132 = *((void *)this + 19);
  if (v132)
  {
    uint64_t v133 = sizeObject(v132, 0) + v131;
    uint64_t v134 = *((void *)this + 19);
    if (gShadowDiagnosticShowIdealizedObjectSizes) {
      uint64_t v131 = 4;
    }
    else {
      uint64_t v131 = 8;
    }
    if (v134 && (v131 += sizeObject(v134, 1), (uint64_t v135 = *((void *)this + 19)) != 0)) {
      uint64_t v136 = sizeObject(v135, 3);
    }
    else {
      uint64_t v136 = 0;
    }
  }
  else
  {
    uint64_t v136 = 0;
    uint64_t v133 = v131;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 827, (DgnString *)&v190);
  if (v191) {
    uint64_t v141 = (void *)v190;
  }
  else {
    uint64_t v141 = &unk_21409929B;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v137, v138, v139, v140, v21, &unk_21409929B, v22, v22, v141, v133, v131, v136);
  DgnString::~DgnString((DgnString *)&v190);
  *a4 += v133;
  *a5 += v131;
  *a6 += v136;
  uint64_t v142 = sizeObject<DgnIOwnArray<BasisAccum *>>((uint64_t)this + 80, 0);
  uint64_t v143 = sizeObject<DgnIOwnArray<BasisAccum *>>((uint64_t)this + 80, 1);
  uint64_t v144 = sizeObject<DgnIOwnArray<BasisAccum *>>((uint64_t)this + 80, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 829, (DgnString *)&v190);
  if (v191) {
    uint64_t v149 = (void *)v190;
  }
  else {
    uint64_t v149 = &unk_21409929B;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v145, v146, v147, v148, v21, &unk_21409929B, v22, v22, v149, v142, v143, v144);
  DgnString::~DgnString((DgnString *)&v190);
  *a4 += v142;
  *a5 += v143;
  *a6 += v144;
  uint64_t v150 = sizeObject<WeightAccum *>((uint64_t)this + 96, 0);
  uint64_t v151 = sizeObject<WeightAccum *>((uint64_t)this + 96, 1);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 831, (DgnString *)&v190);
  if (v191) {
    uint64_t v156 = (void *)v190;
  }
  else {
    uint64_t v156 = &unk_21409929B;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v152, v153, v154, v155, v21, &unk_21409929B, v22, v22, v156, v150, v151, 0);
  DgnString::~DgnString((DgnString *)&v190);
  *a4 += v150;
  *a5 += v151;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v157 = 4;
  }
  else {
    uint64_t v157 = 8;
  }
  uint64_t v158 = *((void *)this + 14);
  if (v158)
  {
    uint64_t v159 = DurAccum::sizeObject(v158, 0) + v157;
    uint64_t v160 = *((void *)this + 14);
    if (gShadowDiagnosticShowIdealizedObjectSizes) {
      uint64_t v157 = 4;
    }
    else {
      uint64_t v157 = 8;
    }
    if (v160 && (v157 += DurAccum::sizeObject(v160, 1), (uint64_t v161 = *((void *)this + 14)) != 0)) {
      uint64_t v162 = DurAccum::sizeObject(v161, 3);
    }
    else {
      uint64_t v162 = 0;
    }
  }
  else
  {
    uint64_t v162 = 0;
    uint64_t v159 = v157;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 832, (DgnString *)&v190);
  if (v191) {
    uint64_t v167 = (void *)v190;
  }
  else {
    uint64_t v167 = &unk_21409929B;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v163, v164, v165, v166, v21, &unk_21409929B, v22, v22, v167, v159, v157, v162);
  DgnString::~DgnString((DgnString *)&v190);
  *a4 += v159;
  *a5 += v157;
  *a6 += v162;
  uint64_t v168 = (AdaptAccumStats *)*((void *)this + 20);
  if (v168)
  {
    unint64_t v189 = 0;
    unint64_t v190 = 0;
    unint64_t v188 = 0;
    AdaptAccumStats::printSize(v168, 0xFFFFFFFFLL, v21, &v190, &v189, &v188);
    *a4 += v190;
    *a5 += v189;
    *a6 += v188;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v169 = 4;
  }
  else {
    uint64_t v169 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 834, (DgnString *)&v190);
  if (v191) {
    uint64_t v174 = (void *)v190;
  }
  else {
    uint64_t v174 = &unk_21409929B;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v170, v171, v172, v173, v21, &unk_21409929B, v22, v22, v174, v169, v169, 0);
  DgnString::~DgnString((DgnString *)&v190);
  *a4 += v169;
  *a5 += v169;
  uint64_t v175 = (AdaptApplyStats *)*((void *)this + 21);
  if (v175)
  {
    unint64_t v189 = 0;
    unint64_t v190 = 0;
    unint64_t v188 = 0;
    AdaptApplyStats::printSize(v175, 0xFFFFFFFFLL, v21, &v190, &v189, &v188);
    *a4 += v190;
    *a5 += v189;
    *a6 += v188;
  }
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v176 = 4;
  }
  else {
    uint64_t v176 = 8;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 836, (DgnString *)&v190);
  if (v191) {
    uint64_t v181 = (void *)v190;
  }
  else {
    uint64_t v181 = &unk_21409929B;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v177, v178, v179, v180, v21, &unk_21409929B, v22, v22, v181, v176, v176, 0);
  DgnString::~DgnString((DgnString *)&v190);
  *a4 += v176;
  *a5 += v176;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/recogctl/adaptctl.cpp", 837, (DgnString *)&v190);
  if (v191) {
    uint64_t v186 = (void *)v190;
  }
  else {
    uint64_t v186 = &unk_21409929B;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v182, v183, v184, v185, v187, &unk_21409929B, (35 - v187), (35 - v187), v186, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v190);
}

void sub_213E2BC8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  DgnString::~DgnString((DgnString *)va);
  _Unwind_Resume(a1);
}

uint64_t sizeObject<DgnIOwnArray<BasisAccum *>>(uint64_t a1, int a2)
{
  uint64_t v2 = 0;
  v9[0] = 0;
  v9[1] = 0;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v3 = 12;
  }
  else {
    uint64_t v3 = 16;
  }
  if (a2 != 3)
  {
    if ((a2 & 0xFFFFFFFE) == 2)
    {
      uint64_t v2 = v3;
    }
    else
    {
      uint64_t v6 = *(unsigned int *)(a1 + 8);
      uint64_t v2 = v3;
      if ((int)v6 >= 1)
      {
        unint64_t v7 = v6 + 1;
        uint64_t v2 = v3;
        do
          v2 += sizeObject<BasisAccum *>(*(void *)a1 + 16 * (v7-- - 2), a2);
        while (v7 > 1);
      }
      if (!a2) {
        v2 += v3 * (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8));
      }
    }
  }
  DgnIOwnArray<BasisAccum *>::releaseAll((uint64_t)v9);
  return v2;
}

void sub_213E2BDD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sizeObject<WeightAccum *>(uint64_t a1, int a2)
{
  if (a2 == 3) {
    return 0;
  }
  int v4 = gShadowDiagnosticShowIdealizedObjectSizes;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v2 = 12;
  }
  else {
    uint64_t v2 = 16;
  }
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    uint64_t v6 = *(unsigned int *)(a1 + 8);
    if ((int)v6 >= 1)
    {
      unint64_t v7 = v6 + 1;
      int v8 = gShadowDiagnosticShowIdealizedObjectSizes;
      do
      {
        if (v8) {
          uint64_t v9 = 4;
        }
        else {
          uint64_t v9 = 8;
        }
        if (a2 != 2)
        {
          uint64_t v10 = *(void *)(*(void *)a1 + 8 * (v7 - 2));
          if (v10)
          {
            v9 += WeightAccum::sizeObject(v10, a2);
            int v8 = gShadowDiagnosticShowIdealizedObjectSizes;
          }
        }
        v2 += v9;
        --v7;
      }
      while (v7 > 1);
    }
    if (!a2)
    {
      char v11 = 2;
      if (!v4) {
        char v11 = 3;
      }
      v2 += (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8)) << v11;
    }
  }
  return v2;
}

ConstrainedTransAccMgr *DgnDelete<ConstrainedTransAccMgr>(ConstrainedTransAccMgr *result)
{
  if (result)
  {
    ConstrainedTransAccMgr::~ConstrainedTransAccMgr(result);
    return (ConstrainedTransAccMgr *)MemChunkFree(v1, 0);
  }
  return result;
}

IntruderMgr *DgnDelete<IntruderMgr>(IntruderMgr *result)
{
  if (result)
  {
    IntruderMgr::~IntruderMgr(result);
    return (IntruderMgr *)MemChunkFree(v1, 0);
  }
  return result;
}

WarpChooser *DgnDelete<WarpChooser>(WarpChooser *result)
{
  if (result)
  {
    WarpChooser::~WarpChooser(result);
    return (WarpChooser *)MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t DgnDelete<DurAccum>(uint64_t result)
{
  if (result)
  {
    unsigned int v1 = (void *)result;
    DgnPrimArray<unsigned int>::~DgnPrimArray(result + 24);
    DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)(v1 + 1));
    return MemChunkFree(v1, 0);
  }
  return result;
}

void *DgnArray<DgnIOwnArray<BasisAccum *>>::releaseAll(uint64_t a1)
{
  DgnArray<DgnIOwnArray<BasisAccum *>>::destructAt((void *)a1, 0, *(_DWORD *)(a1 + 8));
  uint64_t result = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

void *DgnIOwnArray<WeightAccum *>::releaseAll(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<WeightAccum>(*(void *)(*(void *)a1 + v3));
      *(void *)(*(void *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  uint64_t result = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

IntruderSet *DgnDelete<IntruderSet>(IntruderSet *result)
{
  if (result)
  {
    IntruderSet::~IntruderSet(result);
    return (IntruderSet *)MemChunkFree(v1, 0);
  }
  return result;
}

uint64_t *Hash<CWIDAC,CWIDAC,CWIDAC,ActiveWord *>::findBucket(uint64_t a1, uint64_t a2)
{
  int v4 = CWIDAC::computeHash(a2);
  int v5 = *(_DWORD *)(a1 + 16);
  if (v5) {
    unsigned int v6 = (-1640531527 * v4) >> -(char)v5;
  }
  else {
    unsigned int v6 = 0;
  }
  unint64_t v7 = (uint64_t *)(*(void *)(a1 + 80) + 8 * v6);
  uint64_t v8 = *v7;
  if (*v7)
  {
    int v9 = v4;
    do
    {
      uint64_t v10 = (uint64_t *)v8;
      if (*(_DWORD *)(v8 + 8) == v9 && CWIDAC::operator==(v8 + 12, a2)) {
        break;
      }
      uint64_t v8 = *v10;
      unint64_t v7 = v10;
    }
    while (*v10);
  }
  return v7;
}

uint64_t sizeObject<BasisAccum *>(uint64_t a1, int a2)
{
  if (a2 == 3) {
    return 0;
  }
  int v4 = gShadowDiagnosticShowIdealizedObjectSizes;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v2 = 12;
  }
  else {
    uint64_t v2 = 16;
  }
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    uint64_t v6 = *(unsigned int *)(a1 + 8);
    if ((int)v6 >= 1)
    {
      unint64_t v7 = v6 + 1;
      int v8 = gShadowDiagnosticShowIdealizedObjectSizes;
      do
      {
        if (v8) {
          uint64_t v9 = 4;
        }
        else {
          uint64_t v9 = 8;
        }
        if (a2 != 2)
        {
          uint64_t v10 = *(void *)(*(void *)a1 + 8 * (v7 - 2));
          if (v10)
          {
            v9 += BasisAccum::sizeObject(v10, a2);
            int v8 = gShadowDiagnosticShowIdealizedObjectSizes;
          }
        }
        v2 += v9;
        --v7;
      }
      while (v7 > 1);
    }
    if (!a2)
    {
      char v11 = 2;
      if (!v4) {
        char v11 = 3;
      }
      v2 += (unint64_t)(*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8)) << v11;
    }
  }
  return v2;
}

void *DgnIOwnArray<BasisAccum *>::releaseAll(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 8 * v2 - 8;
    do
    {
      DgnDelete<BasisAccum>(*(void *)(*(void *)a1 + v3));
      *(void *)(*(void *)a1 + v3) = 0;
      v3 -= 8;
    }
    while (v3 != -8);
  }
  uint64_t result = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t result = (void *)MemChunkFree(result, 0);
    *(void *)a1 = 0;
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

uint64_t DgnDelete<BasisAccum>(uint64_t result)
{
  if (result)
  {
    unsigned int v1 = (void *)result;
    DgnPrimFixArray<double>::~DgnPrimFixArray(result + 32);
    DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)(v1 + 2));
    return MemChunkFree(v1, 0);
  }
  return result;
}

void *DgnArray<DgnIOwnArray<BasisAccum *>>::destructAt(void *result, int a2, int a3)
{
  uint64_t v3 = result;
  uint64_t v4 = a3 + a2;
  uint64_t v5 = a2;
  uint64_t v6 = v4 + 1;
  for (uint64_t i = 16 * v4 - 16; --v6 > v5; uint64_t i = v8)
  {
    uint64_t v8 = i - 16;
    uint64_t result = DgnIOwnArray<BasisAccum *>::releaseAll(*v3 + i);
  }
  return result;
}

uint64_t DgnDelete<WeightAccum>(uint64_t result)
{
  if (result)
  {
    unsigned int v1 = (void *)result;
    DgnPrimFixArray<double>::~DgnPrimFixArray(result + 8);
    return MemChunkFree(v1, 0);
  }
  return result;
}

void MrecInitModule_fstsrch_fst(void)
{
  if (!gParDebugFstBestPath)
  {
    uint64_t v0 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v0, "DebugFstBestPath", (const char *)&unk_214099300, (const char *)&unk_214099300, 0, 0, 0);
    *unsigned int v1 = &unk_26C4E0858;
    gParDebugFstBestPath = (uint64_t)v1;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugFstBestPath);
  }
  if (!gParDebugFstRecognition)
  {
    uint64_t v2 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v2, "DebugFstRecognition", (const char *)&unk_214099300, (const char *)&unk_214099300, 0, 0, 0);
    *uint64_t v3 = &unk_26C4E0858;
    gParDebugFstRecognition = (uint64_t)v3;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugFstRecognition);
  }
  if (!gParDebugFstSeeding)
  {
    uint64_t v4 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v4, "DebugFstSeeding", (const char *)&unk_214099300, (const char *)&unk_214099300, 0, 0, 0);
    *uint64_t v5 = &unk_26C4E0858;
    gParDebugFstSeeding = (uint64_t)v5;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugFstSeeding);
  }
  if (!gParDebugFstSeedingMini)
  {
    uint64_t v6 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v6, "DebugFstSeedingMini", (const char *)&unk_214099300, (const char *)&unk_214099300, 0, 0, 0);
    void *v7 = &unk_26C4E0858;
    gParDebugFstSeedingMinuint64_t i = (uint64_t)v7;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugFstSeedingMini);
  }
  if (!gParDebugFstScoring)
  {
    uint64_t v8 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v8, "DebugFstScoring", (const char *)&unk_214099300, (const char *)&unk_214099300, 0, 0, 0);
    *uint64_t v9 = &unk_26C4E0858;
    gParDebugFstScoring = (uint64_t)v9;
    GlobalParamMgr::addParam((uint64_t *)GlobalParamMgr::smpGlobalParamMgr, (GlobalParam **)&gParDebugFstScoring);
  }
  if (!gParDebugFstDumpTraces)
  {
    uint64_t v10 = MemChunkAlloc(0x30uLL, 0);
    BoolGlobalParamBase::BoolGlobalParamBase((BoolGlobalParamBase *)v10, "DebugFstDumpTraces", (const char *)&unk_214099300, (const char *)&unk_214099300, 0, 0, 0);
    void *v11 = &unk_26C4E0858;
    gParDebugFstDumpTraces = (uint64_t)v11;
    uint64_t v12 = (uint64_t *)GlobalParamMgr::smpGlobalParamMgr;
    GlobalParamMgr::addParam(v12, (GlobalParam **)&gParDebugFstDumpTraces);
  }
}

int64x2_t FstSearchLateLatticeHashBackoff::advanceDeltas(FstSearchLateLatticeHashBackoff *this, int a2, int a3, SearchStats *a4, int a5)
{
  v96[0] = a2;
  int64x2_t v94 = 0u;
  int64x2_t v95 = 0u;
  SnapTime::recordTime((SnapTime *)&v94, 1, 0, 0, 0);
  v92.n128_u64[0] = 0xFFFFFFFF00000000;
  v92.n128_u32[2] = -1;
  v92.n128_u16[6] = -2;
  unint64_t v93 = 0;
  *((_DWORD *)this + 58) = a3;
  int v10 = *((_DWORD *)this + 2);
  uint64_t v72 = (int *)((char *)this + 232);
  unint64_t v11 = *((unsigned int *)this + 50);
  if (v11)
  {
    int v71 = a5;
    for (unint64_t i = 0; i < v11; ++i)
    {
      uint64_t v13 = *((void *)this + 24);
      uint64_t v14 = v13 + 24 * i;
      uint64_t v15 = *(unsigned int *)(v14 + 4);
      uint64_t v16 = *((void *)this + 5);
      if (*(_DWORD *)(v16 + 160) != v15)
      {
        if (*(_DWORD *)(v16 + 140) > (int)v15)
        {
          int v17 = *((_DWORD *)this + 19) + *((_DWORD *)this + 58) >= 5000
              ? 5000
              : *((_DWORD *)this + 19) + *((_DWORD *)this + 58);
          signed __int32 ScoreAllowBackoff_updateNodeInSequence = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(v13 + 24 * i + 12), *(_DWORD *)v14, v17);
          signed __int32 v19 = *((_DWORD *)this + 58);
          if (ScoreAllowBackoff_updateNodeInSequence - v10 <= v19)
          {
            if (v19 > ScoreAllowBackoff_updateNodeInSequence) {
              *uint64_t v72 = ScoreAllowBackoff_updateNodeInSequence;
            }
            uint64_t v20 = (__n128 *)(*((void *)this + 24) + 24 * i);
            unint64_t v21 = v20[1].n128_u64[0];
            __n128 v92 = *v20;
            unint64_t v93 = v21;
            v92.n128_u32[0] = ScoreAllowBackoff_updateNodeInSequence;
            FstSearchLateLatticeHashBackoff::maybeInsertHashedToken((uint64_t)this, &v92);
          }
        }
        unsigned int v22 = v15;
        do
        {
          uint64_t v23 = *((void *)this + 5);
          uint64_t v24 = *(void *)(v23 + 152);
          unsigned int v25 = *(_DWORD *)(v24 + 4 * v22);
          int v26 = *(_DWORD *)(v24 + 4 * (v22 + 1));
          int v27 = *(_DWORD *)(v23 + 140);
          if (v27 <= v26)
          {
            if (v27 <= (int)v15 && *((unsigned char *)this + 356) != 0)
            {
              unsigned int v35 = (v25 & 0xFFFFF) <= 0xFFFF3 ? v25 & 0xFFFFF : v25 & 0xFFFFF | 0xF00000;
              if (v35 != 16777210)
              {
                DgnString::DgnString((DgnString *)&v89);
                ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v35, (DgnString *)&v89, v36, v37, v38, v39, v40);
                uint64_t v45 = &unk_214099300;
                if (v89.i32[2]) {
                  uint64_t v45 = (void *)v89.i64[0];
                }
                xprintf("Seed from state %d score %d trace %d, %s\n", v41, v42, v43, v44, v15, *(unsigned int *)(*((void *)this + 24) + 24 * i), *(unsigned int *)(*((void *)this + 24) + 24 * i + 8), v45);
                MiniFst::seed((uint64_t)this + 240, *(_DWORD *)(*((void *)this + 24) + 24 * i), *(_DWORD *)(*((void *)this + 24) + 24 * i + 20), *(_DWORD *)(*((void *)this + 24) + 24 * i + 8), v26);
                DgnString::~DgnString((DgnString *)&v89);
              }
            }
          }
          else
          {
            int v28 = (v25 >> 20) & 0x3FF;
            if (*((_DWORD *)this + 19) + *((_DWORD *)this + 58) >= 5000) {
              int v29 = 5000;
            }
            else {
              int v29 = *((_DWORD *)this + 19) + *((_DWORD *)this + 58);
            }
            int v30 = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), (unsigned __int16)*(_DWORD *)(v24 + 4 * v22), *(_DWORD *)(*((void *)this + 24) + 24 * i) + v28, v29);
            int v31 = *((_DWORD *)this + 58);
            if (v30 - v10 <= v31)
            {
              if (v31 > v30) {
                *uint64_t v72 = v30;
              }
              uint64_t v32 = (__n128 *)(*((void *)this + 24) + 24 * i);
              unint64_t v33 = v32[1].n128_u64[0];
              __n128 v92 = *v32;
              HIDWORD(v93) = HIDWORD(v33);
              v92.n128_u64[0] = __PAIR64__(v26, v30);
              v92.n128_u16[6] = v25;
              LODWORD(v93) = v33 + v28;
              FstSearchLateLatticeHashBackoff::maybeInsertHashedToken((uint64_t)this, &v92);
            }
          }
          v22 += 2;
        }
        while ((v25 & 0x80000000) == 0);
        unint64_t v11 = *((unsigned int *)this + 50);
      }
    }
    a3 = *v72;
    a5 = v71;
  }
  int v91 = a3 + v10;
  if (*((unsigned char *)this + 356)) {
    MiniFst::updateFrame((char *)this + 240, v72, v10, a2);
  }
  int64x2_t v89 = 0u;
  int64x2_t v90 = 0u;
  SnapTime::recordTime((SnapTime *)&v89, 1, 0, 0, 0);
  int64x2_t v89 = vsubq_s64(v89, v94);
  int64x2_t v90 = vsubq_s64(v90, v95);
  uint64_t v46 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v47 = vaddq_s64(v46[1], v90);
  int64x2_t *v46 = vaddq_s64(*v46, v89);
  v46[1] = v47;
  int64x2_t v87 = 0u;
  int64x2_t v88 = 0u;
  SnapTime::recordTime((SnapTime *)&v87, 1, 0, 0, 0);
  FstSearchLateLatticeHashBackoff::applyCutoffOnEmitting((uint64_t)this, *((_DWORD *)this + 4), &v91);
  int64x2_t v85 = 0u;
  int64x2_t v86 = 0u;
  SnapTime::recordTime((SnapTime *)&v85, 1, 0, 0, 0);
  int64x2_t v48 = vsubq_s64(v85, v87);
  uint64_t v49 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v50 = v49[3];
  int64x2_t v51 = vaddq_s64(v49[2], v48);
  int64x2_t v85 = v48;
  int64x2_t v86 = vsubq_s64(v86, v88);
  int64x2_t v52 = vaddq_s64(v50, v86);
  v49[2] = v51;
  void v49[3] = v52;
  int64x2_t v83 = 0u;
  int64x2_t v84 = 0u;
  SnapTime::recordTime((SnapTime *)&v83, 1, 0, 0, 0);
  uint64_t v53 = *((void *)this + 24);
  uint64_t v54 = *((void *)this + 26);
  *((void *)this + 24) = v54;
  *((void *)this + 26) = v53;
  LODWORD(v53) = *((_DWORD *)this + 51);
  uint64_t v55 = *((void *)this + 27);
  *((void *)this + 25) = v55;
  *((_DWORD *)this + 54) = 0;
  *((_DWORD *)this + 55) = v53;
  unint64_t v56 = *((unsigned int *)this + 6);
  if (v56 && v55 && v56 < v55) {
    mrec_nth_element<FstSearchLateLatticeHashBackoffcmpTok>(v54, v56, v55);
  }
  int64x2_t v81 = 0u;
  int64x2_t v82 = 0u;
  SnapTime::recordTime((SnapTime *)&v81, 1, 0, 0, 0);
  int64x2_t v57 = vsubq_s64(v81, v83);
  uint64_t v58 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v59 = v58[5];
  int64x2_t v60 = vaddq_s64(v58[4], v57);
  int64x2_t v81 = v57;
  int64x2_t v82 = vsubq_s64(v82, v84);
  int64x2_t v61 = vaddq_s64(v59, v82);
  v58[4] = v60;
  v58[5] = v61;
  int64x2_t v79 = 0u;
  int64x2_t v80 = 0u;
  SnapTime::recordTime((SnapTime *)&v79, 1, 0, 0, 0);
  VirtMap::setEmpty(*((void *)this + 14));
  int64x2_t v77 = 0u;
  int64x2_t v78 = 0u;
  SnapTime::recordTime((SnapTime *)&v77, 1, 0, 0, 0);
  int64x2_t v62 = vsubq_s64(v77, v79);
  uint64_t v63 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v64 = v63[9];
  int64x2_t v65 = vaddq_s64(v63[8], v62);
  int64x2_t v77 = v62;
  int64x2_t v78 = vsubq_s64(v78, v80);
  int64x2_t v66 = vaddq_s64(v64, v78);
  v63[8] = v65;
  v63[9] = v66;
  int64x2_t v75 = 0u;
  int64x2_t v76 = 0u;
  SnapTime::recordTime((SnapTime *)&v75, 1, 0, 0, 0);
  *((_DWORD *)this + 54) = 0;
  uint64_t v67 = *((unsigned int *)this + 50);
  *((_DWORD *)this + 38) = v67;
  if (a4)
  {
    *((void *)a4 + 2) += v67;
    if (*((_DWORD *)a4 + 2) > v67) {
      LODWORD(v67) = *((_DWORD *)a4 + 2);
    }
    *((_DWORD *)a4 + 2) = v67;
  }
  if (*((unsigned char *)this + 356)) {
    FstSearchLateLatticeHashBackoff::seedFromMiniFst((uint64_t)this, v96);
  }
  if (a5) {
    FstSearchLateLatticeHashBackoff::propagateNulls((uint64_t)this, v91, a2, a4);
  }
  *((_DWORD *)this + 56) = a2;
  int64x2_t v73 = 0u;
  int64x2_t v74 = 0u;
  SnapTime::recordTime((SnapTime *)&v73, 1, 0, 0, 0);
  uint64_t v68 = (int64x2_t *)*((void *)this + 13);
  int64x2_t result = vaddq_s64(v68[6], vsubq_s64(v73, v75));
  int64x2_t v70 = vaddq_s64(v68[7], vsubq_s64(v74, v76));
  v68[6] = result;
  v68[7] = v70;
  return result;
}

void sub_213E2CC60(_Unwind_Exception *exception_object)
{
}

uint64_t PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(PelScoreCache *this, uint64_t a2, int a3, int a4)
{
  if (!*((unsigned char *)this + 494))
  {
    int v8 = PelScoreCache::computePelScoreNoCache(this, a2);
    return (v8 + a3 - *((_DWORD *)this + 64));
  }
  uint64_t v7 = *((void *)this + 8);
  int v8 = *(__int16 *)(v7 + 2 * a2);
  if (v8 != 20046) {
    return (v8 + a3 - *((_DWORD *)this + 64));
  }
  uint64_t v9 = a2;
  uint64_t v10 = *(unsigned __int16 *)(**((void **)this + 2) + 2 * a2);
  if (v10 == 0xFFFF) {
    goto LABEL_20;
  }
  int v12 = *(__int16 *)(v7 + 2 * v10);
  if (v12 == 20046)
  {
    if (*((unsigned char *)this + 492))
    {
      uint64_t v13 = *(unsigned __int16 *)(**((void **)this + 3) + 2 * v10);
      if (*(_DWORD *)(*((void *)this + 18) + 4 * v13) == -1) {
        PelScoreCache::computeGenScores(this, *(unsigned __int16 *)(**((void **)this + 3) + 2 * v10));
      }
      int v12 = PelScoreCache::computePelScoreFromGenScores(this, v10, v13);
    }
    else
    {
      int v12 = PelScoreCache::computePelScore(this, *(unsigned __int16 *)(**((void **)this + 2) + 2 * a2));
    }
  }
  uint64_t result = (a3 - *((_DWORD *)this + 64) + v12);
  if ((int)result < a4)
  {
LABEL_20:
    if (*((unsigned char *)this + 492))
    {
      uint64_t v15 = *(unsigned __int16 *)(**((void **)this + 3) + 2 * a2);
      if (*(_DWORD *)(*((void *)this + 18) + 4 * v15) == -1) {
        PelScoreCache::computeGenScores(this, *(unsigned __int16 *)(**((void **)this + 3) + 2 * v9));
      }
      int v8 = PelScoreCache::computePelScoreFromGenScores(this, a2, v15);
    }
    else
    {
      int v8 = PelScoreCache::computePelScore(this, a2);
    }
    return (v8 + a3 - *((_DWORD *)this + 64));
  }
  return result;
}

__n128 FstSearchLateLatticeHashBackoff::maybeInsertHashedToken(uint64_t a1, __n128 *a2)
{
  unint64_t v4 = a2->n128_u32[1];
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = v4 & 0x3F;
  uint64_t v7 = *(uint64_t **)(a1 + 112);
  uint64_t v8 = v7[2];
  uint64_t v9 = *(uint64_t **)(v8 + 8 * v5);
  if (!v9)
  {
    uint64_t v10 = *((unsigned int *)v7 + 12);
    uint64_t v11 = *((unsigned int *)v7 + 13);
    uint64_t v12 = *v7;
    if (v10 >= v11)
    {
      uint64_t v13 = v12 + 16 * v11;
      int v15 = *(_DWORD *)(v13 + 8);
      uint64_t v14 = (_DWORD *)(v13 + 8);
      if (!v15)
      {
        *(void *)(v12 + 16 * v11) = MemChunkAlloc(0x100uLL, 0);
        *uint64_t v14 = 64;
        uint64_t v12 = *v7;
        uint64_t v8 = v7[2];
        LODWORD(v10) = *((_DWORD *)v7 + 12);
        uint64_t v11 = *((unsigned int *)v7 + 13);
      }
      *(void *)(v8 + 8 * v5) = v12 + 16 * v11;
      *((_DWORD *)v7 + 13) = v11 + 1;
    }
    else
    {
      *(void *)(v8 + 8 * v5) = v12 + 16 * v10;
    }
    *((_DWORD *)v7 + 12) = v10 + 1;
    uint64_t v16 = *(void *)(v7[2] + 8 * v5);
    memset(*(void **)v16, 255, 4 * *(unsigned int *)(v16 + 8));
    unsigned int v18 = *((_DWORD *)v7 + 10);
    if (v18 == *((_DWORD *)v7 + 11))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)(v7 + 4), 1, 1);
      unsigned int v18 = *((_DWORD *)v7 + 10);
    }
    *(_DWORD *)(v7[4] + 4 * v18) = v5;
    ++*((_DWORD *)v7 + 10);
    uint64_t v9 = *(uint64_t **)(v7[2] + 8 * v5);
  }
  uint64_t v19 = *v9;
  unsigned int v20 = *(_DWORD *)(v19 + 4 * v6);
  unint64_t v21 = (void *)(a1 + 208);
  if (v20 == -1)
  {
    *(_DWORD *)(v19 + 4 * v6) = *(_DWORD *)(a1 + 216);
    unsigned int v23 = *(_DWORD *)(a1 + 216);
    if (v23 == *(_DWORD *)(a1 + 220))
    {
      DgnArray<CWIDAC>::reallocElts((uint64_t)v21, 1, 1);
      unsigned int v23 = *(_DWORD *)(a1 + 216);
    }
    uint64_t v24 = (__n128 *)(*(void *)(a1 + 208) + 24 * v23);
    __n128 result = *a2;
    v24[1].n128_u64[0] = a2[1].n128_u64[0];
    *uint64_t v24 = result;
    ++*(_DWORD *)(a1 + 216);
  }
  else
  {
    unsigned int v22 = (__n128 *)(*v21 + 24 * v20);
    if ((signed __int32)v22->n128_u32[0] > (signed __int32)a2->n128_u32[0])
    {
      __n128 result = *a2;
      v22[1].n128_u64[0] = a2[1].n128_u64[0];
      *unsigned int v22 = result;
    }
  }
  return result;
}

uint64_t FstSearchLateLatticeHashBackoff::applyCutoffOnEmitting(uint64_t this, unsigned int a2, int *a3)
{
  unint64_t v4 = *(unsigned int *)(this + 216);
  if (v4 > a2)
  {
    uint64_t v6 = this;
    uint64_t v7 = (void *)(this + 208);
    uint64_t v8 = a2;
    this = mrec_nth_element<FstSearchLateLatticeHashBackoffcmpTok>(*(void *)(this + 208), a2, v4);
    int v9 = *(_DWORD *)(*v7 + 24 * a2);
    if (*a3 > v9) {
      *a3 = v9;
    }
    unsigned int v10 = *(_DWORD *)(v6 + 220);
    if (a2 > v10) {
      this = DgnArray<CWIDAC>::reallocElts((uint64_t)v7, a2 - v10, 0);
    }
    uint64_t v11 = *(unsigned int *)(v6 + 216);
    if (v11 < a2)
    {
      uint64_t v12 = v8 - v11;
      uint64_t v13 = (void *)(*v7 + 24 * v11 + 16);
      do
      {
        *(v13 - 2) = 0xFFFFFFFF00000000;
        *((_DWORD *)v13 - 2) = -1;
        *((_WORD *)v13 - 2) = -2;
        *uint64_t v13 = 0;
        v13 += 3;
        --v12;
      }
      while (v12);
    }
    *(_DWORD *)(v6 + 216) = a2;
  }
  return this;
}

uint64_t mrec_nth_element<FstSearchLateLatticeHashBackoffcmpTok>(uint64_t result, unint64_t a2, unint64_t a3)
{
  if (a3 >= 2)
  {
    uint64_t v3 = 0;
    do
    {
      unint64_t v4 = (_DWORD *)(result + 24 * v3);
      uint64_t v5 = 0;
      if ((result & 7) != 0)
      {
        uint64_t v6 = &v4[6 * (a3 >> 1)];
        do
        {
          char v7 = *((unsigned char *)v4 + v5);
          *((unsigned char *)v4 + v5) = *((unsigned char *)v6 + v5);
          *((unsigned char *)v6 + v5++) = v7;
        }
        while (v5 != 24);
      }
      else
      {
        uint64_t v8 = result + 24 * (v3 + (a3 >> 1));
        do
        {
          uint64_t v9 = *(void *)((char *)v4 + v5);
          *(void *)((char *)v4 + v5) = *(void *)(v8 + v5);
          *(void *)(v8 + v5) = v9;
          v5 += 8;
        }
        while (v5 != 24);
      }
      unsigned int v10 = (_DWORD *)(result + 24 * (v3 + a3) - 24);
      uint64_t v11 = (_DWORD *)(result + 24 * v3);
      do
      {
        uint64_t v12 = v11 + 6;
        while (1)
        {
          uint64_t v11 = v12;
          if (v12 >= v10) {
            break;
          }
          v12 += 6;
          if (*v11 > *v4)
          {
            uint64_t v13 = (char *)v11;
            while (*v10 >= *v4)
            {
              v10 -= 6;
              if (v11 >= v10) {
                goto LABEL_22;
              }
            }
            uint64_t v14 = 0;
            if ((result & 7) != 0)
            {
              do
              {
                char v15 = *v13;
                *v13++ = *((unsigned char *)v10 + v14);
                *((unsigned char *)v10 + v14++) = v15;
              }
              while (v14 != 24);
            }
            else
            {
              do
              {
                uint64_t v16 = *(void *)v13;
                *(void *)uint64_t v13 = *(void *)((char *)v10 + v14);
                v13 += 8;
                *(void *)((char *)v10 + v14) = v16;
                v14 += 8;
              }
              while (v14 != 24);
            }
            v10 -= 6;
            break;
          }
        }
LABEL_22:
        ;
      }
      while (v11 < v10);
      if (*v11 > *v4) {
        v11 -= 6;
      }
      if (v11 > v4)
      {
        uint64_t v17 = 0;
        if ((result & 7) != 0)
        {
          do
          {
            char v18 = *((unsigned char *)v11 + v17);
            *((unsigned char *)v11 + v17) = *((unsigned char *)v4 + v17);
            *((unsigned char *)v4 + v17++) = v18;
          }
          while (v17 != 24);
        }
        else
        {
          do
          {
            uint64_t v19 = *(void *)((char *)v11 + v17);
            *(void *)((char *)v11 + v17) = *(void *)((char *)v4 + v17);
            *(void *)((char *)v4 + v17) = v19;
            v17 += 8;
          }
          while (v17 != 24);
        }
      }
      unint64_t v20 = ((char *)v11 - (char *)v4) / 0x18uLL;
      if (v20 <= a2)
      {
        if (v20 >= a2) {
          return result;
        }
        unint64_t v21 = v20 + 1;
        v3 += v21;
        a2 -= v21;
        unint64_t v20 = a3 - v21;
      }
      a3 = v20;
    }
    while (v20 > 1);
  }
  return result;
}

uint64_t FstSearchLateLatticeHashBackoff::seedFromMiniFst(uint64_t this, int *a2)
{
  if (*(unsigned char *)(this + 356))
  {
    uint64_t v2 = this;
    unsigned int v3 = *(_DWORD *)(this + 264);
    if (v3 >= *(_DWORD *)(this + 20)) {
      unsigned int v3 = *(_DWORD *)(this + 20);
    }
    if (v3)
    {
      uint64_t v4 = 0;
      unsigned int v5 = 0;
      uint64_t v22 = this + 192;
      unsigned int v23 = (void *)(this + 160);
      do
      {
        uint64_t v6 = (int *)(*(void *)(v2 + 256) + v4);
        int v7 = *v6;
        int v9 = v6[4];
        int v8 = v6[5];
        int v10 = v6[6];
        int v11 = v6[7];
        int v12 = v6[2];
        v25[0] = 0;
        v25[1] = 0;
        if ((v12 & 0x80000000) == 0)
        {
          while (1)
            ;
        }
        unsigned int v13 = -2 - v12;
        if (v11 == 16777213)
        {
          int v11 = 16777209;
          if (*(_DWORD *)(*v23 + 36 * v13) == 16777209) {
            unsigned int v13 = *(_DWORD *)(*(void *)(v2 + 176) + 16 * *(unsigned int *)(*v23 + 36 * v13 + 8) + 12);
          }
        }
        int v14 = *a2;
        uint64_t v15 = *(unsigned int *)(v2 + 168);
        if (v15 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)v23, 1, 1);
          LODWORD(v15) = *(_DWORD *)(v2 + 168);
        }
        uint64_t v16 = *(void *)(v2 + 160);
        uint64_t v17 = v16 + 36 * v15;
        *(_DWORD *)uint64_t v17 = v11;
        *(_DWORD *)(v17 + 4) = v14;
        *(void *)(v17 + 8) = 0xFFFFFFFFLL;
        *(_DWORD *)(v17 + 16) = v7;
        *(_DWORD *)(v17 + 20) = v13;
        *(_DWORD *)(v17 + 24) = v9;
        *(_DWORD *)(v17 + 28) = v8;
        *(_WORD *)(v17 + 32) = -2;
        unsigned int v18 = *(_DWORD *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v18 + 1;
        *(_DWORD *)(v16 + 36 * v18 + 12) = 1;
        uint64_t v19 = *(unsigned int *)(v2 + 200);
        if (v19 == *(_DWORD *)(v2 + 204))
        {
          DgnArray<CWIDAC>::reallocElts(v22, 1, 1);
          LODWORD(v19) = *(_DWORD *)(v2 + 200);
        }
        uint64_t v20 = *(void *)(v2 + 192) + 24 * v19;
        *(_DWORD *)uint64_t v20 = v7;
        *(_DWORD *)(v20 + 4) = v10;
        *(_DWORD *)(v20 + 8) = v18;
        *(_WORD *)(v20 + 12) = -2;
        *(_DWORD *)(v20 + 16) = v9;
        *(_DWORD *)(v20 + 20) = v8;
        ++*(_DWORD *)(v2 + 200);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v25);
        ++v5;
        unsigned int v21 = *(_DWORD *)(v2 + 264);
        if (v21 >= *(_DWORD *)(v2 + 20)) {
          unsigned int v21 = *(_DWORD *)(v2 + 20);
        }
        v4 += 36;
      }
      while (v5 < v21);
    }
  }
  return this;
}

void sub_213E2D40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLateLatticeHashBackoff::propagateNulls(uint64_t this, int a2, int a3, SearchStats *a4)
{
  uint64_t v4 = this;
  int v5 = *(_DWORD *)(this + 168);
  uint64_t v6 = (uint64_t *)(this + 192);
  unsigned int v7 = *(_DWORD *)(this + 200);
  uint64_t v56 = this + 192;
  if (v7)
  {
    int v49 = *(_DWORD *)(this + 168);
    unint64_t v8 = 0;
    int64x2_t v50 = a4;
    uint64_t v51 = this + 160;
    int v54 = a2;
    do
    {
      uint64_t v9 = *(unsigned int *)(*(void *)(v4 + 192) + 24 * v8 + 4);
      uint64_t v10 = *(void *)(v4 + 40);
      if (*(_DWORD *)(v10 + 160) != v9
        && (*(_DWORD *)(v10 + 140) <= (int)v9 || (*(_DWORD *)(*(void *)(v10 + 152) + 4 * v9) & 0x40000000) != 0))
      {
        unsigned int v11 = *(_DWORD *)(*(void *)(v4 + 192) + 24 * v8 + 4);
        do
        {
          uint64_t v12 = *(void *)(v4 + 40);
          uint64_t v13 = *(void *)(v12 + 152);
          unsigned int v14 = *(_DWORD *)(v13 + 4 * v11);
          int v15 = *(_DWORD *)(v13 + 4 * (v11 + 1));
          int v16 = *(_DWORD *)(v12 + 140);
          if (v16 <= v15)
          {
            int v17 = (v14 & 0xFFFFF) <= 0xFFFF3 ? v14 & 0xFFFFF : v14 & 0xFFFFF | 0xF00000;
            if (v16 > (int)v9 || v17 == 16777210)
            {
              int v19 = (v14 >> 20) & 0x3FF;
              uint64_t v20 = *v6;
              uint64_t v21 = *v6 + 24 * v8;
              int v22 = *(_DWORD *)v21 + v19;
              if (v22 <= a2)
              {
                int v23 = *(_DWORD *)(v21 + 8);
                this = *(unsigned __int16 *)(v21 + 12);
                __int16 v24 = *(_WORD *)(v21 + 14);
                int v25 = *(_DWORD *)(v21 + 20);
                int v26 = *(_DWORD *)(v21 + 16) + v19;
                if (v17 == 16777210)
                {
                  if (v7 == *(_DWORD *)(v4 + 204))
                  {
                    __int16 v57 = *(_WORD *)(v21 + 14);
                    unsigned int v59 = *(unsigned __int16 *)(v21 + 12);
                    int v27 = *(_DWORD *)(v21 + 8);
                    DgnArray<CWIDAC>::reallocElts(v56, 1, 1);
                    int v23 = v27;
                    __int16 v24 = v57;
                    this = v59;
                    a2 = v54;
                    uint64_t v6 = (uint64_t *)v56;
                    unsigned int v7 = *(_DWORD *)(v4 + 200);
                    uint64_t v20 = *(void *)(v4 + 192);
                  }
                  uint64_t v28 = v20 + 24 * v7;
                  *(_DWORD *)uint64_t v28 = v22;
                }
                else
                {
                  int v29 = v22 - v26;
                  if (v17 == 16777214)
                  {
                    int v30 = 0;
                  }
                  else
                  {
                    int v29 = *(_DWORD *)v21 + v19;
                    int v30 = *(_DWORD *)(v21 + 16) + v19;
                  }
                  if (v17 == 16777214) {
                    int v31 = *(_DWORD *)(v21 + 16) + v19;
                  }
                  else {
                    int v31 = 0;
                  }
                  if (v17 == 16777209) {
                    int v32 = v22;
                  }
                  else {
                    int v32 = v29;
                  }
                  if (v17 == 16777209) {
                    int v33 = v26;
                  }
                  else {
                    int v33 = v30;
                  }
                  if (v17 == 16777209) {
                    int v31 = 0;
                  }
                  else {
                    int v25 = v17 + 2 * v25 + 1;
                  }
                  uint64_t v34 = *(unsigned int *)(v4 + 168);
                  __int16 v58 = v24;
                  unsigned int v60 = this;
                  int v55 = v31;
                  if (v34 == *(_DWORD *)(v4 + 172))
                  {
                    int v35 = v23;
                    int v52 = v32;
                    DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts(v51, 1, 1);
                    a2 = v54;
                    int v31 = v55;
                    int v32 = v52;
                    int v23 = v35;
                    __int16 v24 = v58;
                    this = v60;
                    uint64_t v6 = (uint64_t *)v56;
                    LODWORD(v34) = *(_DWORD *)(v4 + 168);
                  }
                  uint64_t v36 = *(void *)(v4 + 160) + 36 * v34;
                  *(_DWORD *)uint64_t v36 = v17;
                  *(_DWORD *)(v36 + 4) = a3;
                  *(void *)(v36 + 8) = 0xFFFFFFFFLL;
                  *(_DWORD *)(v36 + 16) = v32;
                  *(_DWORD *)(v36 + 20) = v23;
                  *(_DWORD *)(v36 + 24) = v33;
                  *(_DWORD *)(v36 + 28) = v25;
                  *(_WORD *)(v36 + 32) = this;
                  int v23 = *(_DWORD *)(v4 + 168);
                  *(_DWORD *)(v4 + 168) = v23 + 1;
                  uint64_t v37 = *(unsigned int *)(v4 + 200);
                  if (v37 == *(_DWORD *)(v4 + 204))
                  {
                    int v38 = v23;
                    int v39 = v32;
                    DgnArray<CWIDAC>::reallocElts(v56, 1, 1);
                    a2 = v54;
                    int v31 = v55;
                    int v32 = v39;
                    int v23 = v38;
                    __int16 v24 = v58;
                    this = v60;
                    uint64_t v6 = (uint64_t *)v56;
                    LODWORD(v37) = *(_DWORD *)(v4 + 200);
                  }
                  int v26 = v31 + v33;
                  uint64_t v28 = *v6 + 24 * v37;
                  *(_DWORD *)uint64_t v28 = v31 + v32;
                }
                *(_DWORD *)(v28 + 4) = v15;
                *(_DWORD *)(v28 + 8) = v23;
                *(_WORD *)(v28 + 12) = this;
                *(_WORD *)(v28 + 14) = v24;
                *(_DWORD *)(v28 + 16) = v26;
                *(_DWORD *)(v28 + 20) = v25;
                unsigned int v7 = *(_DWORD *)(v4 + 200) + 1;
                *(_DWORD *)(v4 + 200) = v7;
              }
            }
          }
          v11 += 2;
        }
        while ((v14 & 0x80000000) == 0);
      }
      ++v8;
    }
    while (v8 < v7);
    unsigned int v40 = *(_DWORD *)(v4 + 152);
    if (v7 > v40)
    {
      this = (uint64_t)mrec_qsort_r<FstSearchLateLatticeHashBackoffActiveToken>((char *)(*(void *)(v4 + 192) + 24 * v40), v7 - v40, 24);
      uint64_t v6 = (uint64_t *)v56;
      unsigned int v40 = *(_DWORD *)(v4 + 152);
      unsigned int v7 = *(_DWORD *)(v4 + 200);
    }
    a4 = v50;
    int v5 = v49;
    if (v40 < v7)
    {
      unint64_t v41 = v40;
      uint64_t v42 = 24 * v40;
      do
      {
        uint64_t v43 = *v6 + v42;
        if (*(_DWORD *)(v43 + 4) != *(_DWORD *)(*v6 + 24 * (v41 - 1) + 4))
        {
          uint64_t v44 = *v6 + 24 * v40;
          long long v45 = *(_OWORD *)v43;
          *(void *)(v44 + 16) = *(void *)(v43 + 16);
          *(_OWORD *)uint64_t v44 = v45;
          ++v40;
          unsigned int v7 = *(_DWORD *)(v4 + 200);
        }
        ++v41;
        v42 += 24;
      }
      while (v41 < v7);
    }
    if (v50) {
      goto LABEL_52;
    }
  }
  else
  {
    unsigned int v40 = *(_DWORD *)(this + 152);
    if (a4) {
LABEL_52:
    }
      *((_DWORD *)a4 + 1) += *(_DWORD *)(v4 + 168) - v5;
  }
  unsigned int v46 = *(_DWORD *)(v4 + 204);
  if (v40 > v46)
  {
    this = DgnArray<CWIDAC>::reallocElts(v56, v40 - v46, 0);
    uint64_t v6 = (uint64_t *)v56;
    unsigned int v7 = *(_DWORD *)(v4 + 200);
  }
  if (v7 < v40)
  {
    unint64_t v47 = v40 - (unint64_t)v7;
    int64x2_t v48 = (void *)(*v6 + 24 * v7 + 16);
    do
    {
      *(v48 - 2) = 0xFFFFFFFF00000000;
      *((_DWORD *)v48 - 2) = -1;
      *((_WORD *)v48 - 2) = -2;
      *int64x2_t v48 = 0;
      v48 += 3;
      --v47;
    }
    while (v47);
  }
  *(_DWORD *)(v4 + 200) = v40;
  return this;
}

char *mrec_qsort_r<FstSearchLateLatticeHashBackoffActiveToken>(char *result, unint64_t a2, int64_t a3)
{
  int64_t v4 = -a3;
  BOOL v5 = a3 != 8;
  BOOL v6 = ((result | a3) & 7) == 0;
  if (((result | a3) & 7) != 0) {
    int v7 = 2;
  }
  else {
    int v7 = a3 != 8;
  }
  if (a2 < 7)
  {
LABEL_5:
    if ((uint64_t)(a2 * a3) > a3)
    {
      unint64_t v8 = &result[a2 * a3];
      uint64_t v9 = &result[a3];
      uint64_t v10 = result;
      do
      {
        if (v9 > result)
        {
          unsigned int v11 = v10;
          uint64_t v12 = v9;
          do
          {
            uint64_t v13 = v12;
            uint64_t v12 = (_DWORD *)((char *)v12 + v4);
            int v14 = v12[1];
            int v15 = v13[1];
            if (v14 == v15)
            {
              if (*v13 >= *v12) {
                break;
              }
            }
            else if (v14 < v15)
            {
              break;
            }
            if (v7)
            {
              uint64_t v16 = 0;
              uint64_t v17 = (uint64_t)v11 + a3;
              if (v6)
              {
                do
                {
                  uint64_t v18 = *(void *)(v17 + 8 * v16);
                  *(void *)(v17 + 8 * v16) = *(void *)&v11[2 * v16];
                  *(void *)&v11[2 * v16++] = v18;
                }
                while ((unint64_t)a3 >> 3 != v16);
              }
              else
              {
                do
                {
                  char v19 = *(unsigned char *)(v17 + v16);
                  *(unsigned char *)(v17 + v16) = *((unsigned char *)v11 + v16);
                  *((unsigned char *)v11 + v16++) = v19;
                }
                while (a3 != v16);
              }
            }
            else
            {
              uint64_t v20 = *(void *)v13;
              *(void *)uint64_t v13 = *(void *)v12;
              *(void *)uint64_t v12 = v20;
            }
            unsigned int v11 = (_DWORD *)((char *)v11 + v4);
          }
          while (v12 > (_DWORD *)result);
        }
        v9 += a3;
        uint64_t v10 = (_DWORD *)((char *)v10 + a3);
      }
      while (v9 < v8);
    }
    return result;
  }
  unint64_t v21 = (unint64_t)a3 >> 3;
  while (2)
  {
    int v22 = &result[(a2 >> 1) * a3];
    if (a2 == 7) {
      goto LABEL_25;
    }
    int v26 = &result[(a2 - 1) * a3];
    if (a2 < 0x29)
    {
      uint64_t v28 = result;
      goto LABEL_110;
    }
    unint64_t v27 = (a2 >> 3) * a3;
    uint64_t v28 = &result[v27];
    int v29 = &result[2 * v27];
    int v30 = *((_DWORD *)result + 1);
    int v31 = *(_DWORD *)&result[v27 + 4];
    if (v30 == v31)
    {
      if (*(_DWORD *)v28 <= *(_DWORD *)result) {
        goto LABEL_33;
      }
    }
    else if (v30 >= v31)
    {
LABEL_33:
      int v32 = *((_DWORD *)v29 + 1);
      if (v31 == v32)
      {
        if (*(_DWORD *)v29 < *(_DWORD *)v28) {
          goto LABEL_129;
        }
      }
      else if (v31 >= v32)
      {
        goto LABEL_129;
      }
      if (v30 == v32)
      {
        if (*(_DWORD *)result != *(_DWORD *)v29)
        {
          uint64_t v28 = result;
          if (*(_DWORD *)v29 > *(_DWORD *)result) {
            goto LABEL_129;
          }
        }
      }
      else
      {
        uint64_t v28 = result;
        if (v30 < v32) {
          goto LABEL_129;
        }
      }
      uint64_t v28 = &result[2 * v27];
      goto LABEL_129;
    }
    int v78 = *((_DWORD *)v29 + 1);
    if (v31 == v78)
    {
      if (*(_DWORD *)v29 > *(_DWORD *)v28) {
        goto LABEL_129;
      }
    }
    else if (v31 < v78)
    {
      goto LABEL_129;
    }
    if (v30 != v78)
    {
      uint64_t v28 = &result[2 * v27];
      if (v30 < v78) {
        goto LABEL_129;
      }
      goto LABEL_128;
    }
    uint64_t v28 = result;
    if (*(_DWORD *)result != *(_DWORD *)v29)
    {
      uint64_t v28 = &result[2 * v27];
      if (*(_DWORD *)v29 <= *(_DWORD *)result) {
LABEL_128:
      }
        uint64_t v28 = result;
    }
LABEL_129:
    int64x2_t v79 = &v22[-v27];
    int64x2_t v80 = &v22[v27];
    int v81 = *(_DWORD *)&v22[-v27 + 4];
    int v82 = *((_DWORD *)v22 + 1);
    if (v81 == v82)
    {
      if (*(_DWORD *)v22 <= *(_DWORD *)v79) {
        goto LABEL_131;
      }
    }
    else if (v81 >= v82)
    {
LABEL_131:
      int v83 = *((_DWORD *)v80 + 1);
      if (v82 == v83)
      {
        if (*(_DWORD *)v80 < *(_DWORD *)v22) {
          goto LABEL_152;
        }
      }
      else if (v82 >= v83)
      {
        goto LABEL_152;
      }
      if (v81 == v83)
      {
        if (*(_DWORD *)v79 != *(_DWORD *)v80)
        {
          v22 -= v27;
          if (*(_DWORD *)v80 > *(_DWORD *)v79) {
            goto LABEL_152;
          }
        }
      }
      else
      {
        v22 -= v27;
        if (v81 < v83) {
          goto LABEL_152;
        }
      }
      int v22 = v80;
      goto LABEL_152;
    }
    int v84 = *((_DWORD *)v80 + 1);
    if (v82 == v84)
    {
      if (*(_DWORD *)v80 > *(_DWORD *)v22) {
        goto LABEL_152;
      }
    }
    else if (v82 < v84)
    {
      goto LABEL_152;
    }
    if (v81 != v84)
    {
      v22 += v27;
      if (v81 < v84) {
        goto LABEL_152;
      }
      goto LABEL_151;
    }
    if (*(_DWORD *)v79 == *(_DWORD *)v80 || (v22 += v27, *(_DWORD *)v80 <= *(_DWORD *)v79)) {
LABEL_151:
    }
      int v22 = v79;
LABEL_152:
    uint64_t v85 = -(uint64_t)v27;
    int64x2_t v77 = &v26[-2 * v27];
    int64x2_t v86 = &v26[v85];
    int v87 = *((_DWORD *)v77 + 1);
    int v88 = *((_DWORD *)v86 + 1);
    if (v87 == v88)
    {
      if (*(_DWORD *)v86 <= *(_DWORD *)v77)
      {
LABEL_154:
        int v89 = *((_DWORD *)v26 + 1);
        if (v88 == v89)
        {
          if (*(_DWORD *)v26 < *(_DWORD *)v86) {
            goto LABEL_167;
          }
LABEL_162:
          if (v87 == v89)
          {
            if (*(_DWORD *)v77 != *(_DWORD *)v26 && *(_DWORD *)v26 > *(_DWORD *)v77) {
              goto LABEL_168;
            }
          }
          else if (v87 < v89)
          {
            goto LABEL_168;
          }
LABEL_110:
          int64x2_t v77 = &result[(a2 - 1) * a3];
          goto LABEL_168;
        }
        if (v88 < v89) {
          goto LABEL_162;
        }
LABEL_167:
        int64x2_t v77 = v86;
        goto LABEL_168;
      }
    }
    else if (v87 >= v88)
    {
      goto LABEL_154;
    }
    int v90 = *((_DWORD *)v26 + 1);
    if (v88 == v90)
    {
      if (*(_DWORD *)v26 > *(_DWORD *)v86) {
        goto LABEL_167;
      }
    }
    else if (v88 < v90)
    {
      goto LABEL_167;
    }
    if (v87 != v90)
    {
      if (v87 >= v90) {
        goto LABEL_168;
      }
      goto LABEL_110;
    }
    if (*(_DWORD *)v77 != *(_DWORD *)v26 && *(_DWORD *)v26 > *(_DWORD *)v77) {
      goto LABEL_110;
    }
LABEL_168:
    int v91 = *((_DWORD *)v28 + 1);
    int v92 = *((_DWORD *)v22 + 1);
    if (v91 != v92)
    {
      if (v91 >= v92) {
        goto LABEL_170;
      }
LABEL_174:
      int v94 = *((_DWORD *)v77 + 1);
      if (v92 == v94)
      {
        if (*(_DWORD *)v77 > *(_DWORD *)v22) {
          goto LABEL_25;
        }
      }
      else if (v92 < v94)
      {
        goto LABEL_25;
      }
      if (v91 == v94)
      {
        if (*(_DWORD *)v28 != *(_DWORD *)v77)
        {
          int v22 = v77;
          if (*(_DWORD *)v77 > *(_DWORD *)v28) {
            goto LABEL_25;
          }
        }
      }
      else
      {
        int v22 = v77;
        if (v91 < v94) {
          goto LABEL_25;
        }
      }
      int v22 = v28;
      goto LABEL_25;
    }
    if (*(_DWORD *)v22 > *(_DWORD *)v28) {
      goto LABEL_174;
    }
LABEL_170:
    int v93 = *((_DWORD *)v77 + 1);
    if (v92 == v93)
    {
      if (*(_DWORD *)v77 < *(_DWORD *)v22) {
        goto LABEL_25;
      }
    }
    else if (v92 >= v93)
    {
      goto LABEL_25;
    }
    if (v91 == v93)
    {
      if (*(_DWORD *)v28 == *(_DWORD *)v77) {
        goto LABEL_192;
      }
      int v22 = v28;
      if (*(_DWORD *)v77 <= *(_DWORD *)v28) {
        goto LABEL_192;
      }
    }
    else
    {
      int v22 = v28;
      if (v91 >= v93) {
LABEL_192:
      }
        int v22 = v77;
    }
LABEL_25:
    if (v7)
    {
      if (v6)
      {
        int v23 = result;
        unint64_t v24 = (unint64_t)a3 >> 3;
        do
        {
          uint64_t v25 = *(void *)v23;
          *(void *)int v23 = *(void *)v22;
          v23 += 8;
          *(void *)int v22 = v25;
          v22 += 8;
          --v24;
        }
        while (v24);
      }
      else
      {
        int64_t v34 = a3;
        int v35 = result;
        do
        {
          char v36 = *v35;
          *v35++ = *v22;
          *v22++ = v36;
          --v34;
        }
        while (v34);
      }
    }
    else
    {
      uint64_t v33 = *(void *)result;
      *(void *)__n128 result = *(void *)v22;
      *(void *)int v22 = v33;
    }
    int v37 = 0;
    int v38 = &result[a3];
    int v39 = &result[(a2 - 1) * a3];
    unsigned int v40 = v39;
    unint64_t v41 = &result[a3];
    uint64_t v42 = &result[a3];
    while (1)
    {
LABEL_40:
      if (v41 > v40) {
        goto LABEL_56;
      }
      int v43 = *((_DWORD *)v41 + 1);
      int v44 = *((_DWORD *)result + 1);
      if (v43 == v44) {
        break;
      }
      if (v43 >= v44) {
        goto LABEL_56;
      }
LABEL_76:
      v41 += a3;
    }
    if (*(_DWORD *)v41 == *(_DWORD *)result)
    {
      if (v7)
      {
        uint64_t v45 = 0;
        if (v6)
        {
          do
          {
            uint64_t v46 = *(void *)&v42[8 * v45];
            *(void *)&v42[8 * v45] = *(void *)&v41[8 * v45];
            *(void *)&v41[8 * v45++] = v46;
          }
          while (v21 != v45);
        }
        else
        {
          do
          {
            char v47 = v42[v45];
            v42[v45] = v41[v45];
            v41[v45++] = v47;
          }
          while (a3 != v45);
        }
      }
      else
      {
        uint64_t v57 = *(void *)v42;
        *(void *)uint64_t v42 = *(void *)v41;
        *(void *)unint64_t v41 = v57;
      }
      v42 += a3;
      int v37 = 1;
      goto LABEL_76;
    }
    if (*(_DWORD *)result > *(_DWORD *)v41) {
      goto LABEL_76;
    }
LABEL_56:
    while (v41 <= v40)
    {
      int v49 = *((_DWORD *)v40 + 1);
      int v50 = *((_DWORD *)result + 1);
      if (v49 == v50)
      {
        if (*(_DWORD *)v40 == *(_DWORD *)result)
        {
          if (v7)
          {
            uint64_t v51 = 0;
            if (v6)
            {
              do
              {
                uint64_t v52 = *(void *)&v40[8 * v51];
                *(void *)&v40[8 * v51] = *(void *)&v39[8 * v51];
                *(void *)&v39[8 * v51++] = v52;
              }
              while (v21 != v51);
            }
            else
            {
              do
              {
                char v53 = v40[v51];
                v40[v51] = v39[v51];
                v39[v51++] = v53;
              }
              while (a3 != v51);
            }
          }
          else
          {
            uint64_t v48 = *(void *)v40;
            *(void *)unsigned int v40 = *(void *)v39;
            *(void *)int v39 = v48;
          }
          v39 += v4;
          int v37 = 1;
        }
        else if (*(_DWORD *)result > *(_DWORD *)v40)
        {
LABEL_68:
          if (v7)
          {
            uint64_t v54 = 0;
            if (v6)
            {
              do
              {
                uint64_t v55 = *(void *)&v41[8 * v54];
                *(void *)&v41[8 * v54] = *(void *)&v40[8 * v54];
                *(void *)&v40[8 * v54++] = v55;
              }
              while (v21 != v54);
            }
            else
            {
              do
              {
                char v56 = v41[v54];
                v41[v54] = v40[v54];
                v40[v54++] = v56;
              }
              while (a3 != v54);
            }
          }
          else
          {
            uint64_t v58 = *(void *)v41;
            *(void *)unint64_t v41 = *(void *)v40;
            *(void *)unsigned int v40 = v58;
          }
          v41 += a3;
          v40 += v4;
          int v37 = 1;
          goto LABEL_40;
        }
      }
      else if (v49 < v50)
      {
        goto LABEL_68;
      }
      v40 += v4;
    }
    unsigned int v59 = &result[a2 * a3];
    if (v37)
    {
      int64_t v60 = v41 - v42;
      if (v42 - result >= v41 - v42) {
        unint64_t v61 = v41 - v42;
      }
      else {
        unint64_t v61 = v42 - result;
      }
      if (v61)
      {
        if (v6)
        {
          int64x2_t v62 = &v41[-v61];
          unint64_t v63 = v61 >> 3;
          int64x2_t v64 = result;
          do
          {
            uint64_t v65 = *(void *)v64;
            *(void *)int64x2_t v64 = *(void *)v62;
            v64 += 8;
            *(void *)int64x2_t v62 = v65;
            v62 += 8;
            --v63;
          }
          while (v63);
        }
        else
        {
          uint64_t v66 = -(uint64_t)v61;
          uint64_t v67 = result;
          do
          {
            char v68 = *v67;
            *v67++ = v41[v66];
            v41[v66] = v68;
            BOOL v69 = __CFADD__(v66++, 1);
          }
          while (!v69);
        }
      }
      int64_t v70 = v39 - v40;
      int64_t v71 = v59 - &v39[a3];
      if (v39 - v40 < v71) {
        int64_t v71 = v39 - v40;
      }
      if (v71)
      {
        if (v6)
        {
          uint64_t v72 = &v59[-v71];
          unint64_t v73 = (unint64_t)v71 >> 3;
          do
          {
            uint64_t v74 = *(void *)v41;
            *(void *)unint64_t v41 = *(void *)v72;
            v41 += 8;
            *(void *)uint64_t v72 = v74;
            v72 += 8;
            --v73;
          }
          while (v73);
        }
        else
        {
          int64_t v75 = -v71;
          do
          {
            char v76 = *v41;
            *v41++ = v59[v75];
            v59[v75] = v76;
            BOOL v69 = __CFADD__(v75++, 1);
          }
          while (!v69);
        }
      }
      if (v60 > a3) {
        __n128 result = (char *)mrec_qsort_r<FstSearchLateLatticeHashBackoffActiveToken>();
      }
      if (v70 > a3)
      {
        __n128 result = &v59[-v70];
        a2 = v70 / (unint64_t)a3;
        BOOL v6 = ((((_BYTE)v59 - v70) | a3) & 7) == 0;
        if (((((_BYTE)v59 - v70) | a3) & 7) != 0) {
          int v7 = 2;
        }
        else {
          int v7 = v5;
        }
        if (a2 < 7) {
          goto LABEL_5;
        }
        continue;
      }
    }
    else if ((uint64_t)(a2 * a3) > a3)
    {
      int64x2_t v95 = result;
      do
      {
        if (v38 > result)
        {
          uint64_t v96 = v95;
          uint64_t v97 = v38;
          do
          {
            uint64_t v98 = v97;
            uint64_t v97 = (_DWORD *)((char *)v97 + v4);
            int v99 = v97[1];
            int v100 = v98[1];
            if (v99 == v100)
            {
              if (*v98 >= *v97) {
                break;
              }
            }
            else if (v99 < v100)
            {
              break;
            }
            if (v7)
            {
              uint64_t v101 = 0;
              uint64_t v102 = (uint64_t)v96 + a3;
              if (v6)
              {
                do
                {
                  uint64_t v103 = *(void *)(v102 + 8 * v101);
                  *(void *)(v102 + 8 * v101) = *(void *)&v96[2 * v101];
                  *(void *)&v96[2 * v101++] = v103;
                }
                while (v21 != v101);
              }
              else
              {
                do
                {
                  char v104 = *(unsigned char *)(v102 + v101);
                  *(unsigned char *)(v102 + v101) = *((unsigned char *)v96 + v101);
                  *((unsigned char *)v96 + v101++) = v104;
                }
                while (a3 != v101);
              }
            }
            else
            {
              uint64_t v105 = *(void *)v98;
              *(void *)uint64_t v98 = *(void *)v97;
              *(void *)uint64_t v97 = v105;
            }
            uint64_t v96 = (_DWORD *)((char *)v96 + v4);
          }
          while (v97 > (_DWORD *)result);
        }
        v38 += a3;
        int64x2_t v95 = (_DWORD *)((char *)v95 + a3);
      }
      while (v38 < v59);
    }
    return result;
  }
}

uint64_t FstSearchLateLatticeHashBackoff::getTraceTimeBoundaries(uint64_t result, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(result + 168);
  if (!v5)
  {
    unsigned int v14 = 0;
    LODWORD(v10) = 0;
    *(_DWORD *)(a3 + 8) = 0;
    uint64_t v11 = *a2;
    uint64_t v12 = *(void *)a3;
LABEL_23:
    int v17 = 1879048192;
    goto LABEL_24;
  }
  uint64_t v6 = result;
  unsigned int v7 = *(_DWORD *)(*(void *)(result + 160) + 36 * (v5 - 1) + 4) + 1;
  if (*(_DWORD *)(*(void *)(result + 160) + 36 * (v5 - 1) + 4) != -1 && *((_DWORD *)a2 + 2) == 0)
  {
    __n128 result = (uint64_t)MemChunkAlloc(4* (*(_DWORD *)(*(void *)(result + 160) + 36 * (v5 - 1) + 4) + 1), 0);
    *a2 = result;
    *((_DWORD *)a2 + 2) = v7;
  }
  unsigned int v9 = *(_DWORD *)(a3 + 12);
  if (v7 > v9) {
    __n128 result = DgnPrimArray<unsigned int>::reallocElts(a3, v7 - v9, 0);
  }
  unint64_t v10 = *(unsigned int *)(v6 + 168);
  *(_DWORD *)(a3 + 8) = v7;
  uint64_t v11 = *a2;
  uint64_t v12 = *(void *)a3;
  if (!v10)
  {
    unsigned int v14 = 0;
    LODWORD(v10) = 0;
    goto LABEL_23;
  }
  unint64_t v13 = 0;
  unsigned int v14 = 0;
  uint64_t v15 = *(void *)(v6 + 160);
  uint64_t v16 = *(void *)(v6 + 176);
  int v17 = 1879048192;
  do
  {
    uint64_t v18 = v15 + 36 * v13;
    int v19 = *(_DWORD *)(v18 + 4);
    uint64_t v20 = *(unsigned int *)(v18 + 8);
    __n128 result = v18 + 4;
    int v21 = *(_DWORD *)(v16 + 16 * v20);
    if (v14 == v19)
    {
      if (v17 >= v21) {
        int v17 = v21;
      }
    }
    else
    {
      if ((int)v14 < v19)
      {
        do
        {
          *(_DWORD *)(v12 + 4 * v14) = v17;
          *(_DWORD *)(v11 + 4 * v14++) = v13;
          int v17 = 1879048192;
        }
        while ((signed int)v14 < *(_DWORD *)result);
        unint64_t v10 = *(unsigned int *)(v6 + 168);
      }
      int v17 = v21;
    }
    ++v13;
  }
  while (v13 < v10);
  uint64_t v12 = *(void *)a3;
LABEL_24:
  *(_DWORD *)(v11 + 4 * v14) = v10;
  *(_DWORD *)(v12 + 4 * v14) = v17;
  return result;
}

int64x2_t FstSearchLateLatticeHashBackoff::vite(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  FstSearchLateLatticeHashBackoff::advanceDeltas((FstSearchLateLatticeHashBackoff *)this, a2, a3, a4, a5);
  int64x2_t v11 = 0u;
  int64x2_t v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  int64x2_t v9 = 0u;
  int64x2_t v10 = 0u;
  SnapTime::recordTime((SnapTime *)&v9, 1, 0, 0, 0);
  uint64_t v6 = this[13];
  int64x2_t result = vaddq_s64(v6[14], vsubq_s64(v9, v11));
  int64x2_t v8 = vaddq_s64(v6[15], vsubq_s64(v10, v12));
  v6[14] = result;
  v6[15] = v8;
  return result;
}

int64x2_t FstSearchLateLatticeHashBackoff::reset(FstSearchLateLatticeHashBackoff *this)
{
  *((_DWORD *)this + 42) = 0;
  *((_DWORD *)this + 46) = 0;
  *((_DWORD *)this + 50) = 0;
  int64x2_t v7 = 0u;
  int64x2_t v8 = 0u;
  SnapTime::recordTime((SnapTime *)&v7, 1, 0, 0, 0);
  int64x2_t v5 = 0u;
  int64x2_t v6 = 0u;
  SnapTime::recordTime((SnapTime *)&v5, 1, 0, 0, 0);
  uint64_t v2 = (int64x2_t *)*((void *)this + 13);
  int64x2_t result = vaddq_s64(v2[10], vsubq_s64(v5, v7));
  int64x2_t v4 = vaddq_s64(v2[11], vsubq_s64(v6, v8));
  v2[10] = result;
  v2[11] = v4;
  return result;
}

double FstSearchLateLatticeHashBackoff::doFrame(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  if (a3 >= 20000) {
    a3 = 20000;
  }
  *(void *)&double result = FstSearchLateLatticeHashBackoff::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearchLateLatticeHashBackoff::beginTopRecPassSyncRecog(FstSearchLateLatticeHashBackoff *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 240, a3, *((PelScoreCache **)this + 4));
    uint64_t result = ArcGraph::findBackoffState(*((void *)this + 5));
    *((_DWORD *)this + 88) = result;
    *((unsigned char *)this + 356) = 1;
  }
  return result;
}

uint64_t FstSearchLateLatticeHashBackoff::endTopRecPassSyncRecog(int64x2_t **this)
{
  int64x2_t v10 = 0u;
  int64x2_t v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  FstSearchLateLatticeHashBackoff::generateTraceTokensFromTraces((FstSearchLateLatticeHashBackoff *)this);
  FstSearchLateLatticeHashBackoff::generateTraceTokensForLateLattice((FstSearchLateLatticeHashBackoff *)this);
  int64x2_t v8 = 0u;
  int64x2_t v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  int64x2_t v2 = vsubq_s64(v8, v10);
  unsigned int v3 = this[13];
  int64x2_t v4 = v3[13];
  int64x2_t v5 = vaddq_s64(v3[12], v2);
  int64x2_t v8 = v2;
  int64x2_t v9 = vsubq_s64(v9, v11);
  int64x2_t v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + 58) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

int32x4_t FstSearchLateLatticeHashBackoff::generateTraceTokensFromTraces(FstSearchLateLatticeHashBackoff *this)
{
  int64x2_t v2 = (void *)((char *)this + 176);
  uint64_t v3 = *((unsigned int *)this + 42);
  unsigned int v4 = *((_DWORD *)this + 47);
  if (v3 > v4) {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 176, v3 - v4, 0);
  }
  uint64_t v6 = *((unsigned int *)this + 46);
  if (v6 < v3)
  {
    uint64_t v7 = v3 - v6;
    int64x2_t v8 = (_OWORD *)(*v2 + 16 * v6);
    result.i64[0] = 0;
    do
    {
      *v8++ = xmmword_2140992A0;
      --v7;
    }
    while (v7);
  }
  *((_DWORD *)this + 46) = v3;
  uint64_t v9 = *((unsigned int *)this + 42);
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *((void *)this + 22);
    int64x2_t v12 = (_OWORD *)(*((void *)this + 20) + 16);
    do
    {
      *((_DWORD *)v12 - 2) = v10;
      int32x4_t v13 = *(int32x4_t *)v12;
      int64x2_t v12 = (_OWORD *)((char *)v12 + 36);
      int32x4_t result = vuzp1q_s32(v13, (int32x4_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 0xCuLL));
      *(int32x4_t *)(v11 + 16 * v10++) = result;
    }
    while (v9 != v10);
  }
  return result;
}

uint64_t FstSearchLateLatticeHashBackoff::generateTraceTokensForLateLattice(FstSearchLateLatticeHashBackoff *this)
{
  unsigned int v1 = this;
  v131[1] = 0;
  uint64_t v132 = 0;
  int v133 = 0;
  v131[0] = 0;
  FstSearchLateLatticeHashBackoff::getTraceTimeBoundaries((uint64_t)this, &v132, (uint64_t)v131);
  uint64_t v129 = 0;
  int v130 = 0;
  uint64_t v127 = 0;
  int v128 = 0;
  v126[0] = 0;
  v126[1] = 0;
  int v125 = 1879048192;
  int v2 = (*(uint64_t (**)(FstSearchLateLatticeHashBackoff *, uint64_t *, uint64_t *, int *, void *))(*(void *)v1 + 80))(v1, &v129, &v127, &v125, v126);
  int v9 = *((_DWORD *)v1 + 7);
  int v10 = *((_DWORD *)v1 + 2);
  uint64_t v122 = -1;
  __int16 v124 = 256;
  __int16 v123 = *((_WORD *)v1 + 34);
  if (v2)
  {
    uint64_t v120 = 0;
    uint64_t v121 = 0;
    uint64_t v11 = (uint64_t *)((char *)v1 + 160);
    uint64_t v12 = *((unsigned int *)v1 + 42);
    if (v12)
    {
      unsigned int v13 = 0;
      uint64_t v105 = (uint64_t *)((char *)v1 + 160);
      int v102 = v10;
      int v103 = v9;
      while (1)
      {
        while (1)
        {
          while (1)
          {
            --v12;
            uint64_t v14 = *v11;
            if (*(unsigned char *)(v129 + v12)) {
              break;
            }
            *(_DWORD *)(v14 + 36 * v12 + 8) = -1;
            if (!v12) {
              goto LABEL_77;
            }
          }
          uint64_t v15 = (unsigned int *)(v14 + 36 * v12);
          uint64_t v16 = *v15;
          uint64_t v17 = *((void *)v1 + 6);
          if (*(_DWORD *)(v17 + 388) > v16 && *(unsigned char *)(*(void *)(v17 + 104) + v16)) {
            __int16 v18 = *(_WORD *)(*(void *)(v17 + 72) + 2 * *(unsigned int *)(*(void *)(v17 + 48) + 4 * v16));
          }
          else {
            __int16 v18 = 0;
          }
          uint64_t v19 = *((void *)v1 + 11);
          int v20 = *(_DWORD *)(v19 + 4 * v15[1]);
          unsigned int v22 = v15[2];
          int v21 = v15 + 2;
          uint64_t v23 = *((void *)v1 + 22);
          int v24 = *((_DWORD *)v1 + 3);
          int v25 = *(_DWORD *)(v126[0] + 4 * v12);
          HIWORD(v122) = v18;
          uint64_t v109 = (int32x2_t *)(v23 + 16 * v22);
          unsigned __int32 v26 = v109[1].u32[1];
          if ((v26 & 0x80000000) == 0) {
            break;
          }
          *int v21 = v13;
          if (v13 == HIDWORD(v121))
          {
            DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v120, 1, 1);
            unsigned int v13 = v121;
          }
          *((_OWORD *)v120 + v13) = *(_OWORD *)v109->i8;
          unsigned int v13 = v121 + 1;
          LODWORD(v121) = v121 + 1;
          *(_DWORD *)(*v11 + 36 * v12 + 12) = 1;
          if (!v12) {
            goto LABEL_77;
          }
        }
        uint64_t v110 = v12;
        uint64_t v113 = v109[1].u32[1];
        uint64_t v27 = v14 + 36 * v26;
        uint64_t v28 = *(unsigned int *)(v27 + 4);
        unint64_t v29 = v28 ? *(unsigned int *)(v132 + 4 * (v28 - 1)) : 0;
        int v114 = v24 + v125 - v25;
        uint64_t v108 = (int32x2_t *)(v23 + 16 * *(unsigned int *)(v27 + 8));
        int v107 = v20 + v109->i32[0] - *(_DWORD *)(v19 + 4 * v28) - v108->i32[0];
        int v106 = v108->i32[0] - *(_DWORD *)(v131[0] + 4 * v28);
        unsigned int v30 = v13;
        if (v29 < *(unsigned int *)(v132 + 4 * v28)) {
          break;
        }
LABEL_42:
        if (v13 >= v30)
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 150, (uint64_t)"fst/fstsrch", 2, (uint64_t)"%s", v7, v8, (char)&unk_214099300);
          unsigned int v30 = v121;
        }
        mrec_qsort_r<FstSearchLateLatticeHashBackoffcmpTokLmhst>((char *)v120 + 16 * v13, v30 - v13, 16);
        unint64_t v45 = v13 + 1;
        unsigned int v46 = v121;
        if (v45 < v121)
        {
          uint64_t v47 = 16 * (v13 + 1);
          unsigned int v48 = v13;
          do
          {
            if (*(_DWORD *)((char *)v120 + v47 + 8) != *((_DWORD *)v120 + 4 * v48 + 2))
            {
              *((_OWORD *)v120 + ++v48) = *(_OWORD *)((char *)v120 + v47);
              unsigned int v46 = v121;
            }
            ++v45;
            v47 += 16;
          }
          while (v45 < v46);
          LODWORD(v45) = v48 + 1;
        }
        int v49 = (char *)v120;
        if (HIDWORD(v121) < v45)
        {
          uint64_t v118 = 0;
          HIDWORD(v121) = realloc_array(v120, &v118, 16 * v45, 16 * v46, 16 * v46, 1) >> 4;
          int v49 = (char *)v118;
          uint64_t v120 = v118;
          unsigned int v46 = v121;
        }
        if (v46 < v45)
        {
          unint64_t v50 = v45 - (unint64_t)v46;
          uint64_t v51 = &v49[16 * v46];
          do
          {
            *(_OWORD *)uint64_t v51 = xmmword_2140992A0;
            v51 += 16;
            --v50;
          }
          while (v50);
        }
        LODWORD(v121) = v45;
        mrec_qsort_r<FstSearchLateLatticeHashBackoffcmpTok>(&v49[16 * v13], v45 - v13, 16);
        uint64_t v52 = 16 * v13;
        int v53 = v114;
        if (*(_DWORD *)((char *)v120 + v52) + v10 < v114) {
          int v53 = *((_DWORD *)v120 + 4 * v13) + v10;
        }
        unsigned int v54 = v121;
        unsigned int v55 = *((_DWORD *)v1 + 5) + v13;
        if (v121 < v55) {
          unsigned int v55 = v121;
        }
        uint64_t v56 = *((void *)v1 + 20);
        *(_DWORD *)(v56 + 36 * v110 + 8) = v13;
        if (v13 >= v55)
        {
          unsigned int v60 = v13;
        }
        else
        {
          while (*(_DWORD *)((char *)v120 + v52) <= v53)
          {
            uint64_t v57 = *(unsigned int *)((char *)v120 + v52 + 12);
            if ((v57 & 0x80000000) == 0)
            {
              *(unsigned char *)(v129 + v57) = 1;
              int v58 = v57 == v113 ? 0 : v106 + v9;
              int v59 = v58 + v107 + *(_DWORD *)(v126[0] + 4 * v110);
              if (*(_DWORD *)(v126[0] + 4 * v57) > v59) {
                *(_DWORD *)(v126[0] + 4 * v57) = v59;
              }
            }
            ++v13;
            v52 += 16;
            if (v55 == v13)
            {
              unsigned int v13 = v55;
              break;
            }
          }
          uint64_t v56 = *v11;
          unsigned int v60 = *(_DWORD *)(*v11 + 36 * v110 + 8);
          unsigned int v54 = v121;
        }
        *(_DWORD *)(v56 + 36 * v110 + 12) = v13 - v60;
        if (HIDWORD(v121) < v13)
        {
          uint64_t v118 = 0;
          HIDWORD(v121) = realloc_array(v120, &v118, 16 * v13, 16 * v54, 16 * v54, 1) >> 4;
          uint64_t v120 = v118;
          unsigned int v54 = v121;
        }
        if (v54 < v13)
        {
          unint64_t v61 = v13 - (unint64_t)v54;
          int64x2_t v62 = (char *)v120 + 16 * v54;
          do
          {
            *v62++ = xmmword_2140992A0;
            --v61;
          }
          while (v61);
        }
        LODWORD(v121) = v13;
        if (!v110)
        {
LABEL_77:
          unint64_t v63 = v120;
          int v64 = HIDWORD(v121);
          unsigned int v65 = *((_DWORD *)v1 + 42);
          goto LABEL_79;
        }
      }
      uint64_t v104 = v12;
      unsigned int v112 = v106 + v9;
      int v111 = v20 + v109->i32[0] - v108->i32[0];
      uint64_t v31 = 36 * v29;
      while (1)
      {
        if (v113 == v29) {
          unsigned int v32 = 0;
        }
        else {
          unsigned int v32 = v112;
        }
        uint64_t v33 = *((void *)v1 + 20);
        int64_t v34 = (_OWORD *)(*((void *)v1 + 22) + 16 * *(unsigned int *)(v33 + v31 + 8));
        if ((int)(v111 + v32 + *(_DWORD *)v34) <= v114)
        {
          int v35 = (ArcGraph **)v1;
          int v36 = *(_DWORD *)(v33 + 36 * v110);
          int v37 = *(_DWORD *)(v33 + v31);
          BOOL v38 = v37 != 16777209
             && ArcGraph::lexToCWID(v35[5], *(_DWORD *)(v33 + v31), v3, v4, v5, v6, v7, v8) >> 25 != 126;
          if (v36 == 16777209)
          {
            unsigned int v1 = (FstSearchLateLatticeHashBackoff *)v35;
            if (v38) {
              goto LABEL_35;
            }
          }
          else
          {
            BOOL v39 = v36 == 16777214 || v37 == 16777213;
            unsigned int v1 = (FstSearchLateLatticeHashBackoff *)v35;
            if (!v39)
            {
LABEL_35:
              BOOL isLexPelPhnMatch = FstSearchLateLatticeHashBackoff::isLexPelPhnMatch((uint64_t)v1, v29, (uint64_t)&v122);
              unsigned int v1 = (FstSearchLateLatticeHashBackoff *)v35;
              if (isLexPelPhnMatch)
              {
                uint64_t v41 = v121;
                if (v121 == (unint64_t)HIDWORD(v121))
                {
                  DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v120, 1, 1);
                  uint64_t v41 = v121;
                  unsigned int v1 = (FstSearchLateLatticeHashBackoff *)v35;
                }
                *((_OWORD *)v120 + v41) = *v34;
                uint64_t v42 = v121;
                LODWORD(v121) = v121 + 1;
                int v43 = (int32x2_t *)((char *)v120 + 16 * v42);
                v43[1].i32[1] = v29;
                *int v43 = vadd_s32(vsub_s32(vadd_s32(*v109, vdup_n_s32(v32)), *v108), *v43);
                int v44 = *(_DWORD *)(*v105 + 36 * v110);
                if (v44 != 16777209) {
                  v43[1].i32[0] = v44 + 2 * v43[1].i32[0] + 1;
                }
              }
            }
          }
        }
        ++v29;
        v31 += 36;
        if (v29 >= *(unsigned int *)(v132 + 4 * v28))
        {
          unsigned int v30 = v121;
          uint64_t v12 = v104;
          uint64_t v11 = v105;
          int v10 = v102;
          int v9 = v103;
          goto LABEL_42;
        }
      }
    }
    unsigned int v65 = 0;
    unsigned int v13 = 0;
    int v64 = 0;
    unint64_t v63 = 0;
LABEL_79:
    uint64_t v66 = (void *)*((void *)v1 + 22);
    *((void *)v1 + 22) = v63;
    uint64_t v120 = v66;
    int v67 = *((_DWORD *)v1 + 47);
    *((_DWORD *)v1 + 46) = v13;
    *((_DWORD *)v1 + 47) = v64;
    LODWORD(v121) = 0;
    HIDWORD(v121) = v67;
    unsigned int v119 = 0;
    uint64_t v118 = 0;
    if (v65)
    {
      char v68 = MemChunkAlloc(4 * v65, 0);
      uint64_t v118 = v68;
      unsigned int v119 = v65;
      if (*((_DWORD *)v1 + 42))
      {
        uint64_t v69 = 0;
        unint64_t v70 = 0;
        unsigned int v65 = 0;
        do
        {
          int64_t v71 = (long long *)(*v11 + v69);
          if (*((_DWORD *)v71 + 2) == -1)
          {
            *((_DWORD *)v68 + v70) = -1;
          }
          else
          {
            if (v70 != v65)
            {
              uint64_t v72 = *v11 + 36 * v65;
              long long v73 = *v71;
              long long v74 = v71[1];
              *(_WORD *)(v72 + 32) = *((_WORD *)v71 + 16);
              *(_OWORD *)uint64_t v72 = v73;
              *(_OWORD *)(v72 + 16) = v74;
            }
            *((_DWORD *)v68 + v70) = v65++;
          }
          ++v70;
          unint64_t v75 = *((unsigned int *)v1 + 42);
          v69 += 36;
        }
        while (v70 < v75);
        unsigned int v76 = *((_DWORD *)v1 + 43);
        if (v65 > v76)
        {
          DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)v11, v65 - v76, 0);
          LODWORD(v75) = *((_DWORD *)v1 + 42);
        }
        if (v75 < v65)
        {
          unint64_t v77 = v65 - (unint64_t)v75;
          int v78 = (_WORD *)(*v11 + 36 * v75 + 32);
          do
          {
            *((_OWORD *)v78 - 2) = xmmword_2140992B0;
            *((_OWORD *)v78 - 1) = xmmword_2140992C0;
            *int v78 = -2;
            v78 += 18;
            --v77;
          }
          while (v77);
        }
      }
      else
      {
        unsigned int v65 = 0;
      }
    }
    *((_DWORD *)v1 + 42) = v65;
    uint64_t v79 = *((unsigned int *)v1 + 46);
    if (v79)
    {
      int64x2_t v80 = v118;
      int v81 = (_DWORD *)(*((void *)v1 + 22) + 12);
      do
      {
        uint64_t v82 = *v81;
        if ((v82 & 0x80000000) == 0) {
          _DWORD *v81 = v80[v82];
        }
        v81 += 4;
        --v79;
      }
      while (v79);
    }
    DgnArray<FstSearchLateLatticeHashBackoffActiveToken>::DgnArray(&v115, *((unsigned int *)v1 + 50));
    unint64_t v83 = *((unsigned int *)v1 + 50);
    if (v83)
    {
      uint64_t v84 = 0;
      unint64_t v85 = 0;
      unsigned int v86 = 0;
      int v87 = v118;
      int v88 = v115;
      do
      {
        uint64_t v89 = *((unsigned int *)v1 + 38);
        if (v86 < v89 && v85 == v89) {
          *((_DWORD *)v1 + 38) = v86;
        }
        int v91 = (long long *)(*((void *)v1 + 24) + v84);
        uint64_t v92 = *((unsigned int *)v91 + 2);
        if (v92 == -1 || v87[v92] != -1)
        {
          int v93 = (char *)&v88[6 * v86];
          long long v94 = *v91;
          *((void *)v93 + 2) = *((void *)v91 + 2);
          *(_OWORD *)int v93 = v94;
          uint64_t v95 = *(unsigned int *)(*((void *)v1 + 24) + v84 + 8);
          if (v95 != -1) {
            LODWORD(v95) = v87[v95];
          }
          v88[6 * v86++ + 2] = v95;
          unint64_t v83 = *((unsigned int *)v1 + 50);
        }
        ++v85;
        v84 += 24;
      }
      while (v85 < v83);
    }
    else
    {
      unsigned int v86 = 0;
    }
    if (v86 < *((_DWORD *)v1 + 38)) {
      *((_DWORD *)v1 + 38) = v86;
    }
    LODWORD(v96) = v117;
    uint64_t v97 = (char *)v115;
    if (v117 < v86)
    {
      uint64_t v134 = 0;
      unint64_t v96 = realloc_array(v115, &v134, 24 * v86, 24 * v116, 24 * v116, 1) / 0x18;
      uint64_t v97 = (char *)v134;
    }
    if (v116 < v86)
    {
      unint64_t v98 = v86 - (unint64_t)v116;
      int v99 = &v97[24 * v116 + 16];
      do
      {
        *((void *)v99 - 2) = 0xFFFFFFFF00000000;
        *((_DWORD *)v99 - 2) = -1;
        *((_WORD *)v99 - 2) = -2;
        *(void *)int v99 = 0;
        v99 += 24;
        --v98;
      }
      while (v98);
    }
    int v100 = (void *)*((void *)v1 + 24);
    *((void *)v1 + 24) = v97;
    uint64_t v115 = v100;
    LODWORD(v100) = *((_DWORD *)v1 + 51);
    *((_DWORD *)v1 + 50) = v86;
    *((_DWORD *)v1 + 51) = v96;
    unsigned int v116 = 0;
    unsigned int v117 = v100;
    DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v115);
    DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v118);
    DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v120);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v126);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v127);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v129);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v131);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v132);
}

void sub_213E2EF44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&a25);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a27);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a31);
  DgnPrimFixArray<double>::~DgnPrimFixArray(v31 - 160);
  DgnPrimFixArray<double>::~DgnPrimFixArray(v31 - 144);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v31 - 128);
  DgnPrimFixArray<double>::~DgnPrimFixArray(v31 - 112);
  _Unwind_Resume(a1);
}

void FstSearchLateLatticeHashBackoff::printSize(FstSearchLateLatticeHashBackoff *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v116);
  if (v117) {
    uint64_t v16 = v116;
  }
  else {
    uint64_t v16 = &unk_214099300;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_214099300, a3, &unk_214099300, v16);
  DgnString::~DgnString((DgnString *)&v116);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_214099300);
  uint64_t v21 = (a3 + 1);
  uint64_t v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v116);
  if (v117) {
    uint64_t v27 = v116;
  }
  else {
    uint64_t v27 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v116);
  if (v117) {
    unsigned int v32 = v116;
  }
  else {
    unsigned int v32 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v116);
  if (v117) {
    int v37 = v116;
  }
  else {
    int v37 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v37, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v116);
  if (v117) {
    uint64_t v42 = v116;
  }
  else {
    uint64_t v42 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v42, 4, 4, 0);
  uint64_t v111 = a2;
  unsigned int v112 = a6;
  uint64_t v113 = a3;
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  uint64_t v43 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v43 = 16;
  }
  uint64_t v44 = *((unsigned int *)this + 42);
  uint64_t v45 = 24 * v44;
  if ((int)v44 <= 0) {
    uint64_t v45 = 0;
  }
  uint64_t v46 = v45 + v43;
  uint64_t v47 = v45 + v43 + 24 * (*((_DWORD *)this + 43) - v44);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v116);
  if (v117) {
    uint64_t v52 = v116;
  }
  else {
    uint64_t v52 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, v21, &unk_214099300, v22, v22, v52, v47, v46, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v47;
  *a5 += v46;
  uint64_t v53 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v53 = 16;
  }
  uint64_t v54 = *((unsigned int *)this + 46);
  uint64_t v55 = 16 * v54;
  if ((int)v54 <= 0) {
    uint64_t v55 = 0;
  }
  uint64_t v56 = v55 + v53;
  uint64_t v57 = v55 + v53 + 16 * (*((_DWORD *)this + 47) - v54);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v116);
  if (v117) {
    int64x2_t v62 = v116;
  }
  else {
    int64x2_t v62 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, v21, &unk_214099300, v22, v22, v62, v57, v56, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v57;
  *a5 += v56;
  uint64_t v63 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v63 = 16;
  }
  int v64 = *((_DWORD *)this + 50);
  uint64_t v65 = 22 * v64;
  if (v64 <= 0) {
    uint64_t v65 = 0;
  }
  uint64_t v66 = v65 + v63;
  uint64_t v67 = v65 + v63 + 22 * (*((_DWORD *)this + 51) - v64);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v116);
  if (v117) {
    uint64_t v72 = v116;
  }
  else {
    uint64_t v72 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, v21, &unk_214099300, v22, v22, v72, v67, v66, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v67;
  *a5 += v66;
  uint64_t v73 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v73 = 16;
  }
  int v74 = *((_DWORD *)this + 54);
  uint64_t v75 = 22 * v74;
  if (v74 <= 0) {
    uint64_t v75 = 0;
  }
  uint64_t v76 = v75 + v73;
  uint64_t v77 = v75 + v73 + 22 * (*((_DWORD *)this + 55) - v74);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v116);
  if (v117) {
    uint64_t v82 = v116;
  }
  else {
    uint64_t v82 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, v21, &unk_214099300, v22, v22, v82, v77, v76, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v77;
  *a5 += v76;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v116);
  if (v117) {
    int v87 = v116;
  }
  else {
    int v87 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v83, v84, v85, v86, v21, &unk_214099300, v22, v22, v87, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v116);
  if (v117) {
    uint64_t v92 = v116;
  }
  else {
    uint64_t v92 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, v21, &unk_214099300, v22, v22, v92, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v116);
  if (v117) {
    uint64_t v97 = v116;
  }
  else {
    uint64_t v97 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v93, v94, v95, v96, v21, &unk_214099300, v22, v22, v97, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  uint64_t v98 = sizeObject((uint64_t)this + 240, 0);
  uint64_t v99 = sizeObject((uint64_t)this + 240, 1);
  uint64_t v100 = sizeObject((uint64_t)this + 240, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v116);
  if (v117) {
    uint64_t v105 = v116;
  }
  else {
    uint64_t v105 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v101, v102, v103, v104, v21, &unk_214099300, v22, v22, v105, v98, v99, v100);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v98;
  *a5 += v99;
  *v112 += v100;
  unint64_t v114 = 0;
  unint64_t v115 = 0;
  SearchItf::printSize(this, v111, v21, &v115, &v114, &v114);
  *a4 += v115;
  *a5 += v114;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v116);
  if (v117) {
    uint64_t v110 = v116;
  }
  else {
    uint64_t v110 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v106, v107, v108, v109, v113, &unk_214099300, (35 - v113), (35 - v113), v110, *a4, *a5, *v112);
  DgnString::~DgnString((DgnString *)&v116);
}

void sub_213E2F710(_Unwind_Exception *a1)
{
  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t FstSearchLateLatticeHashBackoff::getBestTrace(uint64_t a1, void *a2, void *a3, int a4)
{
  if (a4) {
    unint64_t v4 = 0;
  }
  else {
    unint64_t v4 = *(unsigned int *)(a1 + 152);
  }
  unint64_t v5 = *(unsigned int *)(a1 + 200);
  if (v4 >= v5) {
    goto LABEL_21;
  }
  uint64_t v6 = 24 * v4;
  int v7 = 1879048192;
  uint64_t v8 = 0xFFFFFFFFLL;
  do
  {
    uint64_t v9 = *(void *)(a1 + 192);
    if (!a4 || (uint64_t v10 = *(unsigned int *)(v9 + v6 + 8), v10 == -1))
    {
      if (*(_DWORD *)(*(void *)(a1 + 40) + 160) != *(_DWORD *)(v9 + v6 + 4)) {
        goto LABEL_19;
      }
      uint64_t v10 = *(unsigned int *)(v9 + v6 + 8);
    }
    if (a2) {
      *(unsigned char *)(*a2 + v10) = 1;
    }
    if (a3) {
      *(unsigned char *)(*a3 + v10) = 1;
    }
    uint64_t v11 = *(void *)(a1 + 160) + 36 * v10;
    int v12 = *(_DWORD *)(v11 + 16) + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v11 + 4));
    if (v7 > v12) {
      uint64_t v8 = v10;
    }
    if (v7 >= v12) {
      int v7 = v12;
    }
    unint64_t v5 = *(unsigned int *)(a1 + 200);
LABEL_19:
    ++v4;
    v6 += 24;
  }
  while (v4 < v5);
  if (v8 == 0xFFFFFFFFLL)
  {
LABEL_21:
    uint64_t v13 = *(unsigned int *)(a1 + 168);
    uint64_t v8 = 0xFFFFFFFFLL;
    while (v13)
    {
      --v13;
      if ((a4 & 1) != 0 || *(_DWORD *)(*(void *)(a1 + 160) + 36 * v13) == 16777213)
      {
        if (a2) {
          *(unsigned char *)(*a2 + v13) = 1;
        }
        uint64_t v8 = v13;
        if (a3) {
          *(unsigned char *)(*a3 + v13) = 1;
        }
        return v8;
      }
    }
  }
  return v8;
}

BOOL FstSearchLateLatticeHashBackoff::findBestPath(uint64_t a1, uint64_t **a2, uint64_t a3, int *a4, uint64_t a5)
{
  unint64_t v10 = *(unsigned int *)(a1 + 168);
  if (v10) {
    BOOL v11 = *(_DWORD *)(a3 + 8) == 0;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    *(void *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v10;
  }
  if (v10) {
    BOOL v12 = *((_DWORD *)a2 + 2) == 0;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12)
  {
    *a2 = MemChunkAlloc(v10, 0);
    *((_DWORD *)a2 + 2) = v10;
  }
  else if (!v10)
  {
    goto LABEL_16;
  }
  uint64_t v13 = 0;
  do
  {
    *((unsigned char *)*a2 + v13) = 0;
    *(unsigned char *)(*(void *)a3 + v13++) = 0;
  }
  while (v10 != v13);
LABEL_16:
  unsigned int BestTrace = FstSearchLateLatticeHashBackoff::getBestTrace(a1, a2, (void *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1)
  {
    int v20 = 1879048192;
  }
  else
  {
    uint64_t v15 = *(void *)(a1 + 160);
    uint64_t v16 = v15 + 36 * BestTrace;
    unsigned int v18 = *(_DWORD *)(v16 + 4);
    uint64_t v17 = (int *)(v16 + 4);
    int v19 = v17[3] + *(_DWORD *)(*(void *)(a1 + 88) + 4 * v18);
    *a4 = v19;
    int v20 = 1879048192;
    if (v19 != 1879048192)
    {
      int v21 = *(_DWORD *)(a1 + 168);
      if (v21)
      {
        unsigned int v22 = v21 - 1;
        int v23 = 1879048192;
        int v24 = *v17;
        do
        {
          uint64_t v25 = v22;
          if (*(_DWORD *)(v15 + 36 * v22 + 4) == v24
            && *(_DWORD *)(v15 + 36 * v22) == 16777213
            && !*((unsigned char *)*a2 + v22))
          {
            *((unsigned char *)*a2 + v22) = 2;
            *(unsigned char *)(*(void *)a3 + v22) = 1;
            uint64_t v15 = *(void *)(a1 + 160);
            if (v23 >= *(_DWORD *)(*(void *)(a1 + 176) + 16 * *(unsigned int *)(v15 + 36 * v22 + 8))
                      + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v15 + 36 * v22 + 4)))
              int v23 = *(_DWORD *)(*(void *)(a1 + 176) + 16 * *(unsigned int *)(v15 + 36 * v22 + 8))
                  + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v15 + 36 * v22 + 4));
          }
          --v22;
        }
        while (v25);
        int v19 = *a4;
        unsigned int v26 = *(_DWORD *)(a1 + 168);
      }
      else
      {
        unsigned int v26 = 0;
        int v23 = 1879048192;
      }
      int v27 = *(_DWORD *)(a1 + 28);
      BOOL v28 = __OFSUB__(v19, v23);
      int v29 = v19 - v23;
      if ((v29 < 0) ^ v28 | (v29 == 0)) {
        int v30 = 0;
      }
      else {
        int v30 = v29;
      }
      unsigned int v31 = *(_DWORD *)(a5 + 12);
      unsigned int v32 = v26;
      if (v26 > v31)
      {
        DgnPrimArray<unsigned int>::reallocElts(a5, v26 - v31, 0);
        unsigned int v32 = *(_DWORD *)(a1 + 168);
      }
      *(_DWORD *)(a5 + 8) = v26;
      int v20 = *a4;
      if (v32)
      {
        uint64_t v33 = 0;
        unint64_t v34 = 0;
        int v35 = v20 - (v30 + v27) + *(_DWORD *)(a1 + 12);
        do
        {
          uint64_t v36 = *a2;
          int v37 = *((unsigned __int8 *)*a2 + v34);
          if (v37 == 2)
          {
            uint64_t v38 = *(void *)a5;
            if (*(_DWORD *)(*(void *)(a1 + 176) + 16 * *(unsigned int *)(*(void *)(a1 + 160) + v33 + 8))
               + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(*(void *)(a1 + 160) + v33 + 4)) <= v35)
            {
              *(_DWORD *)(v38 + 4 * v34) = v30 + v27;
              *((unsigned char *)v36 + v34) = 1;
            }
            else
            {
              *(_DWORD *)(v38 + 4 * v34) = 1879048192;
              *((unsigned char *)v36 + v34) = 0;
            }
          }
          else if (v37 == 1)
          {
            *(_DWORD *)(*(void *)a5 + 4 * v34) = 0;
          }
          else
          {
            *(_DWORD *)(*(void *)a5 + 4 * v34) = 1879048192;
          }
          ++v34;
          v33 += 36;
        }
        while (v34 < *(unsigned int *)(a1 + 168));
        int v20 = *a4;
      }
    }
  }
  return v20 != 1879048192;
}

unint64_t FstSearchLateLatticeHashBackoff::createLatticeNodes(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7)
{
  uint64_t v8 = a2;
  uint64_t v9 = a1;
  uint64_t v10 = *(unsigned int *)(a1 + 168);
  if (v10) {
    BOOL v11 = *((_DWORD *)a2 + 2) == 0;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    *a2 = MemChunkAlloc(4 * v10, 0);
    *((_DWORD *)v8 + 2) = v10;
  }
  unint64_t result = Lattice<WordLatticeLC>::createNode(a4);
  int v13 = result;
  unsigned int v14 = *(_DWORD *)(a3 + 8);
  if (v14 == *(_DWORD *)(a3 + 12))
  {
    unint64_t result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
    unsigned int v14 = *(_DWORD *)(a3 + 8);
  }
  *(_DWORD *)(*(void *)a3 + 4 * v14) = v13;
  ++*(_DWORD *)(a3 + 8);
  unsigned int v15 = *(_DWORD *)(v9 + 168);
  uint64_t v17 = a6;
  uint64_t v16 = a7;
  if (v15)
  {
    unint64_t result = 2;
    int v18 = -1;
    uint64_t v47 = v8;
    uint64_t v48 = a3;
    uint64_t v50 = v9;
    do
    {
      --v15;
      int v19 = *v8;
      *((_DWORD *)*v8 + v15) = -1;
      if (*(unsigned char *)(*v17 + v15))
      {
        uint64_t v20 = v15;
        uint64_t v21 = *(void *)(v9 + 160);
        uint64_t v22 = *(unsigned int *)(*(void *)(v9 + 88) + 4 * *(unsigned int *)(v21 + 36 * v15 + 4));
        if (*(unsigned char *)(*v16 + v15))
        {
          if (*(unsigned char *)(*v17 + v15) != 1 || v18 == -1)
          {
            int Node = Lattice<WordLatticeLC>::createNode(a4);
            *((_DWORD *)*v8 + v15) = *(_DWORD *)(a3 + 8);
            uint64_t v25 = *(unsigned int *)(a3 + 8);
            if (v25 == *(_DWORD *)(a3 + 12))
            {
              DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
              uint64_t v25 = *(unsigned int *)(a3 + 8);
            }
            *(_DWORD *)(*(void *)a3 + 4 * v25) = Node;
            int v26 = *(_DWORD *)(a3 + 8);
            *(_DWORD *)(a3 + 8) = v26 + 1;
            uint64_t v17 = a6;
            uint64_t v16 = a7;
            if (*(unsigned char *)(*a6 + v15) == 1) {
              int v18 = v26;
            }
            uint64_t v21 = *(void *)(v9 + 160);
            unint64_t result = 2;
          }
          else
          {
            *((_DWORD *)v19 + v15) = v18;
          }
        }
        int v27 = (unsigned int *)(v21 + 36 * v15);
        if ((int)v27[3] >= 1)
        {
          int v49 = v18;
          uint64_t v28 = *v27;
          unsigned int v29 = *(_DWORD *)(v21 + 36 * v15 + 8);
          do
          {
            uint64_t v30 = *(void *)(v9 + 176);
            uint64_t v31 = v29;
            unsigned int v32 = (_DWORD *)(v30 + 16 * v29);
            uint64_t v33 = v32[3];
            if ((v32[3] & 0x80000000) != 0)
            {
              *v32 += v22;
            }
            else
            {
              if (v28 == 16777209)
              {
                uint64_t v34 = *a5 + 16 * v33;
                uint64_t v36 = (_DWORD *)(v34 + 8);
                uint64_t v35 = *(unsigned int *)(v34 + 8);
                uint64_t v37 = *(void *)(v9 + 176);
                if (v35 == *(_DWORD *)(v34 + 12))
                {
                  uint64_t v38 = v20;
                  uint64_t v39 = v22;
                  uint64_t v40 = v28;
                  DgnPrimArray<unsigned int>::reallocElts(v34, 1, 1);
                  uint64_t v28 = v40;
                  uint64_t v22 = v39;
                  uint64_t v20 = v38;
                  uint64_t v9 = v50;
                  uint64_t v17 = a6;
                  unint64_t result = 2;
                  uint64_t v16 = a7;
                  uint64_t v35 = *v36;
                  uint64_t v21 = *(void *)(v50 + 160);
                  uint64_t v37 = *(void *)(v50 + 176);
                }
                *(_DWORD *)(*(void *)v34 + 4 * v35) = v15;
                ++*v36;
                uint64_t v33 = v32[3];
              }
              else
              {
                *(unsigned char *)(*v16 + v33) = 1;
                uint64_t v37 = v30;
              }
              uint64_t v41 = v21 + 36 * v33;
              int v42 = *(_DWORD *)(*(void *)(v9 + 88) + 4 * *(unsigned int *)(v41 + 4));
              uint64_t v43 = (int *)(v37 + 16 * *(unsigned int *)(v41 + 8));
              int v44 = v22 + *v32 - v42;
              int v45 = *v43;
              LODWORD(v43) = v43[1];
              *unsigned int v32 = v44 - v45;
              *(_DWORD *)(v30 + 16 * v31 + 4) -= v43;
              *(unsigned char *)(*v17 + v33) = 2;
              uint64_t v21 = *(void *)(v9 + 160);
            }
            unsigned int v29 = v31 + 1;
          }
          while ((int)v31 + 1 < *(_DWORD *)(v21 + 36 * v20 + 12)
                               + *(_DWORD *)(v21 + 36 * v20 + 8));
          uint64_t v8 = v47;
          a3 = v48;
          int v18 = v49;
        }
      }
    }
    while (v15);
  }
  return result;
}

uint64_t FstSearchLateLatticeHashBackoff::buildWordLattice(uint64_t a1, uint64_t *a2, void *a3, void *a4, char a5)
{
  uint64_t v28 = 0;
  unsigned int v29 = 0;
  int v30 = 0;
  uint64_t v27 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v26, *(unsigned int *)(a1 + 168));
  uint64_t v9 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v9, 0, 128);
  v9[4] = (uint64_t)a2;
  FstSearchLateLatticeHashBackoff::createLatticeNodes(a1, &v29, (uint64_t)&v27, (uint64_t)a2, v26, a3, a4);
  uint64_t v23 = (uint64_t)v9;
  uint64_t v24 = *(unsigned int *)(a1 + 168);
  if (v24)
  {
    uint64_t v11 = 0;
    int v12 = v28;
    do
    {
      if (*(unsigned char *)(*a3 + v11))
      {
        uint64_t v13 = *(void *)(a1 + 160);
        if ((*(_DWORD *)(v13 + 36 * v11) - 16777209) >= 2 && *(int *)(v13 + 36 * v11 + 12) >= 1)
        {
          int v14 = *(_DWORD *)(v13 + 36 * v11 + 8);
          do
          {
            uint64_t v15 = *(void *)(a1 + 176) + 16 * v14;
            uint64_t v16 = *(unsigned int *)(v15 + 12);
            if (v16 == -1) {
              unsigned int v17 = 0;
            }
            else {
              unsigned int v17 = v12 - *((_DWORD *)v29 + v16);
            }
            uint64_t v18 = *(unsigned int *)(v27 + 4 * v17);
            if (*(unsigned char *)(*a4 + v11)) {
              FstSearchLateLatticeHashBackoff::createLatticeLink(a1, v11, (int *)v15, 0xFFFFFFFFLL, v18, (const WordLatticeLC *)*(unsigned int *)(v27 + 4 * (v12 - *((_DWORD *)v29 + v11))), a2, v10, a5);
            }
            uint64_t v19 = v26[0];
            if (*(_DWORD *)(v26[0] + 16 * v11 + 8))
            {
              unint64_t v20 = 0;
              do
              {
                uint64_t v21 = *(unsigned int *)(*(void *)(v19 + 16 * v11) + 4 * v20);
                FstSearchLateLatticeHashBackoff::createLatticeLink(a1, v11, (int *)v15, v21, v18, (const WordLatticeLC *)*(unsigned int *)(v27 + 4 * (v12 - *((_DWORD *)v29 + v21))), a2, v10, a5);
                ++v20;
                uint64_t v19 = v26[0];
              }
              while (v20 < *(unsigned int *)(v26[0] + 16 * v11 + 8));
            }
            ++v14;
          }
          while (v14 < *(_DWORD *)(*(void *)(a1 + 160) + 36 * v11 + 12)
                      + *(_DWORD *)(*(void *)(a1 + 160) + 36 * v11 + 8));
        }
      }
      ++v11;
    }
    while (v11 != v24);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>(v23);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v26);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v27);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v29);
}

void sub_213E30088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearchLateLatticeHashBackoff::createLatticeLink(uint64_t a1, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, const WordLatticeLC *a6, uint64_t *a7, uint64_t a8, char a9)
{
  unsigned int v11 = a5;
  unsigned int v12 = a4;
  uint64_t v16 = *(void *)(a1 + 160);
  if ((a4 & 0x80000000) != 0 || (uint64_t v17 = v16 + 36 * a4, v18 = *(_DWORD *)(v17 + 12), v18 < 1))
  {
    uint64_t v22 = 0;
  }
  else
  {
    unsigned int v19 = *(_DWORD *)(v17 + 8);
    int v20 = v18 + v19;
    do
    {
      uint64_t v21 = *(void *)(a1 + 176);
      if (*(_DWORD *)(v21 + 16 * v19 + 12) == a2) {
        uint64_t v22 = (_DWORD *)(v21 + 16 * v19);
      }
      else {
        uint64_t v22 = 0;
      }
      ++v19;
    }
    while ((int)v19 < v20 && !v22);
  }
  ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *(_DWORD *)(v16 + 36 * a2), (uint64_t)a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8, (uint64_t)v46);
  int v23 = a3[1];
  if (v22)
  {
    v23 += v22[1];
    int v24 = *v22 + *a3;
  }
  else
  {
    int v24 = *a3;
  }
  if (v46[0] >> 25 == 126)
  {
    int v25 = 0;
    int v26 = v23;
  }
  else
  {
    int v25 = *(_DWORD *)(a1 + 136);
    int v26 = v23 - v25;
  }
  int v27 = v24 - v23;
  if ((v12 & 0x80000000) != 0)
  {
    int v28 = 0;
  }
  else
  {
    int v28 = *(_DWORD *)(a1 + 140);
    v26 -= v28;
  }
  int v40 = v26;
  uint64_t v41 = 0;
  int v42 = v25;
  int v43 = v27;
  int v44 = 0;
  int v45 = v28;
  unsigned int v29 = a3[3];
  uint64_t v30 = *(void *)(a1 + 160);
  if (v29 == -1)
  {
    int v32 = 0;
    if (a9) {
      goto LABEL_26;
    }
  }
  else
  {
    int v31 = *(_DWORD *)(v30 + 36 * v29 + 4);
    if (a9)
    {
      if (v31 >= 1) {
        --v31;
      }
      int v32 = (v31 >> 1) + 1;
LABEL_26:
      int v33 = *(_DWORD *)(v30 + 36 * a2 + 4);
      if (v33 >= 1) {
        --v33;
      }
      int v34 = v33 >> 1;
      int v35 = v34 - v32 + 1;
      if ((v12 & 0x80000000) == 0)
      {
        int v36 = *(_DWORD *)(v30 + 36 * v12 + 4);
        if (v36 >= 1) {
          --v36;
        }
        int v37 = v36 >> 1;
        goto LABEL_35;
      }
LABEL_36:
      int v38 = 0;
      goto LABEL_37;
    }
    int v32 = v31 + 1;
  }
  int v34 = *(_DWORD *)(v30 + 36 * a2 + 4);
  int v35 = v34 - v32 + 1;
  if ((v12 & 0x80000000) != 0) {
    goto LABEL_36;
  }
  int v37 = *(_DWORD *)(v30 + 36 * v12 + 4);
LABEL_35:
  int v38 = v37 - v34;
LABEL_37:
  WordLatticeLC::WordLatticeLC((uint64_t)v39, (uint64_t)v46, v32, v35, v38, (uint64_t)&v40);
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v11, a6, (WordLatticeLC *)v39);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v39);
}

void sub_213E302D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

uint64_t DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>(uint64_t result)
{
  if (result)
  {
    DgnPrimArray<unsigned int>::~DgnPrimArray(result + 16);
    inited = (void *)MrecInitModule_sdpres_sdapi();
    return MemChunkFree(inited, 0);
  }
  return result;
}

uint64_t Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(uint64_t *a1, unsigned int a2, const WordLatticeLC *a3, WordLatticeLC *this)
{
  unsigned int v8 = *(_DWORD *)(a1[10] + 24 * a2 + 20);
  while (v8 != -2)
  {
    uint64_t v9 = a1[16];
    unsigned int v10 = v8;
    if (*(_DWORD *)(v9 + 136 * v8 + 120) == a3)
    {
      uint64_t result = WordLatticeLC::cmpForMultiLinkCheck((WordLatticeLC *)(v9 + 136 * v8), this, a3);
      if ((int)result > 0) {
        return result;
      }
      unsigned int v8 = *(_DWORD *)(a1[16] + 136 * v8 + 128);
      if ((result & 0x80000000) != 0) {
        Lattice<WordLatticeLC>::disconnectAndDestroyLink((unint64_t)a1, v10);
      }
    }
    else
    {
      unsigned int v8 = *(_DWORD *)(v9 + 136 * v8 + 128);
    }
  }

  return Lattice<WordLatticeLC>::maybeCreateAndConnectLink(a1, a2, a3, this, 1, 0);
}

uint64_t FstSearchLateLatticeHashBackoff::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(void *)(this + 112) = a2;
  if (*(unsigned char *)(this + 356)) {
    return MiniFst::beginTopFstSyncRecog(this + 240);
  }
  return this;
}

uint64_t FstSearchLateLatticeHashBackoff::endTopRecSyncRecog(FstSearchLateLatticeHashBackoff *this)
{
  VirtMap::setEmpty(*((void *)this + 14));
  uint64_t result = *((void *)this + 14);
  *((void *)this + 14) = 0;
  return result;
}

uint64_t FstSearchLateLatticeHashBackoff::getBestExitScore(FstSearchLateLatticeHashBackoff *this)
{
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  *((_DWORD *)this + 57) = -1;
  unint64_t v1 = *((unsigned int *)this + 38);
  unint64_t v2 = *((unsigned int *)this + 50);
  if (v1 >= v2) {
    goto LABEL_16;
  }
  unint64_t v4 = 0;
  unsigned int v5 = 0;
  uint64_t v6 = 24 * v1;
  do
  {
    uint64_t v7 = *((void *)this + 24) + v6;
    if (*(_DWORD *)(*((void *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      unsigned int v8 = *(_DWORD *)(v7 + 8);
      if (v8 != -1 && *(_DWORD *)(*((void *)this + 20) + 36 * v8 + 4) == *((_DWORD *)this + 56))
      {
        if (v5 == HIDWORD(v18))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v17, 1, 1);
          unsigned int v5 = v18;
          unint64_t v4 = v17;
        }
        v4[v5] = v8;
        unsigned int v5 = v18 + 1;
        LODWORD(v18) = v18 + 1;
        unint64_t v2 = *((unsigned int *)this + 50);
      }
    }
    ++v1;
    v6 += 24;
  }
  while (v1 < v2);
  if (v5)
  {
    uint64_t v9 = *((void *)this + 20);
    uint64_t v10 = v5;
    int v11 = 1879048192;
    do
    {
      unsigned int v13 = *v4++;
      unsigned int v12 = v13;
      int v14 = *(_DWORD *)(v9 + 36 * v13 + 16);
      if (v11 > v14)
      {
        *((_DWORD *)this + 57) = *(_DWORD *)(v9 + 36 * v12 + 20);
        int v11 = v14;
      }
      --v10;
    }
    while (v10);
  }
  else
  {
LABEL_16:
    int v11 = 1879048192;
  }
  if (v11 >= 20000) {
    uint64_t v15 = 20000;
  }
  else {
    uint64_t v15 = v11;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v17);
  return v15;
}

void sub_213E305C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t FstSearchLateLatticeHashBackoff::getBestScoreMaybeUpdateFstNode(FstSearchLateLatticeHashBackoff *this, Node *a2)
{
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v2 = *((unsigned int *)this + 50);
  if (v2)
  {
    uint64_t v3 = (int *)*((void *)this + 24);
    __int16 v4 = -1;
    int v5 = 1879048192;
    uint64_t v6 = v3;
    do
    {
      int v8 = *v6;
      v6 += 6;
      int v7 = v8;
      if (v5 > v8)
      {
        __int16 v4 = *((_WORD *)v3 + 6);
        int v5 = v7;
      }
      uint64_t v3 = v6;
      --v2;
    }
    while (v2);
    uint64_t v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000) {
        uint64_t v9 = 20000;
      }
      else {
        uint64_t v9 = v5;
      }
    }
  }
  else
  {
    uint64_t v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

uint64_t FstSearchLateLatticeHashBackoff::seedTheory(FstSearchLateLatticeHashBackoff *this, int a2, int a3, int a4, SearchStats *a5)
{
  if (a4 == -2)
  {
    int v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    unsigned int v11 = *((_DWORD *)this + 42);
    if (v11 == *((_DWORD *)this + 43))
    {
      DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)this + 160, 1, 1);
      unsigned int v11 = *((_DWORD *)this + 42);
    }
    uint64_t v12 = *((void *)this + 20) + 36 * v11;
    *(_DWORD *)uint64_t v12 = a4;
    *(_DWORD *)(v12 + 4) = a3;
    *(void *)(v12 + 8) = 0xFFFFFFFFLL;
    *(_DWORD *)(v12 + 16) = a2;
    *(void *)(v12 + 20) = 0xFFFFFFFFLL;
    *(_DWORD *)(v12 + 28) = 0;
    *(_WORD *)(v12 + 32) = -2;
    int v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  int v13 = *(_DWORD *)(*((void *)this + 5) + 144);
  unsigned int v14 = *((_DWORD *)this + 50);
  if (v14 == *((_DWORD *)this + 51))
  {
    DgnArray<CWIDAC>::reallocElts((uint64_t)this + 192, 1, 1);
    unsigned int v14 = *((_DWORD *)this + 50);
  }
  uint64_t v15 = *((void *)this + 24) + 24 * v14;
  *(_DWORD *)uint64_t v15 = a2;
  *(_DWORD *)(v15 + 4) = v13;
  *(_DWORD *)(v15 + 8) = v9;
  *(_WORD *)(v15 + 12) = -2;
  *(void *)(v15 + 16) = 0;
  LODWORD(v15) = *((_DWORD *)this + 50) + 1;
  *((_DWORD *)this + 50) = v15;
  *((_DWORD *)this + 38) = v15;

  return FstSearchLateLatticeHashBackoff::propagateNulls((uint64_t)this, 20000, a3, a5);
}

uint64_t FstSearchLateLatticeHashBackoff::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(unsigned int *)(result + 228);
  if (v8 != -1)
  {
    uint64_t v9 = result;
    uint64_t v10 = (unsigned int *)(*(void *)(result + 160) + 36 * v8);
    for (i = v10[5]; i != -1; uint64_t v8 = v16)
    {
      uint64_t v16 = i;
      uint64_t result = *(void *)(v9 + 40);
      if (*v10 == 16777209)
      {
        int v17 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        uint64_t result = ArcGraph::lexToCWID((ArcGraph *)result, *v10, a3, (uint64_t)a4, a5, a6, a7, a8);
        int v17 = result;
      }
      uint64_t v18 = *(unsigned int *)(a2 + 8);
      if (v18 == *(_DWORD *)(a2 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        uint64_t v18 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(void *)a2 + 4 * v18) = v17;
      ++*(_DWORD *)(a2 + 8);
      uint64_t v19 = *(unsigned int *)(a6 + 8);
      if (v19 == *(_DWORD *)(a6 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        uint64_t v19 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(void *)a6 + 4 * v19) = v8;
      ++*(_DWORD *)(a6 + 8);
      uint64_t v20 = *(void *)(v9 + 160);
      int v21 = *(_DWORD *)(v20 + 36 * v8 + 4);
      uint64_t v22 = *(unsigned int *)(a3 + 8);
      if (v22 == *(_DWORD *)(a3 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        uint64_t v22 = *(unsigned int *)(a3 + 8);
        uint64_t v20 = *(void *)(v9 + 160);
      }
      *(_DWORD *)(*(void *)a3 + 4 * v22) = v21;
      ++*(_DWORD *)(a3 + 8);
      int v23 = *(_DWORD *)(v20 + 36 * v8 + 16);
      uint64_t v24 = *(unsigned int *)(a5 + 8);
      if (v24 == *(_DWORD *)(a5 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        uint64_t v24 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(void *)a5 + 4 * v24) = v23;
      ++*(_DWORD *)(a5 + 8);
      uint64_t v10 = (unsigned int *)(*(void *)(v9 + 160) + 36 * v16);
      uint64_t i = v10[5];
    }
    *a4 = *v10;
  }
  return result;
}

BOOL FstSearchLateLatticeHashBackoff::isLexPelPhnMatch(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 160);
  uint64_t v4 = *(unsigned int *)(v3 + 36 * a2);
  __int16 v15 = 0;
  if ((v4 - 16777209) > 5 || ((1 << (v4 + 7)) & 0x31) == 0)
  {
    int v13 = *(void **)(a1 + 48);
    uint64_t v6 = (__int16 *)(v13[9] + 2 * *(unsigned int *)(v13[6] + 4 * v4));
    int v14 = *(unsigned __int16 *)(v13[4] + 2 * v4);
    if (!v14)
    {
      uint64_t v11 = 0xFFFFFFFFLL;
      goto LABEL_13;
    }
    if (v14 == 2)
    {
      *(_WORD *)(a3 + 2) = *v6;
      *(_WORD *)a3 = *(_WORD *)(a1 + 68);
      *(unsigned char *)(a3 + 10) = 0;
      uint64_t v11 = 1;
      goto LABEL_13;
    }
    uint64_t v11 = (v14 - 1);
    if (v14 != 1)
    {
      *(_WORD *)(a3 + 2) = v6[v14 - 2];
      *(_WORD *)a3 = v6[v14 - 3];
      *(unsigned char *)(a3 + 10) = 0;
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v6 = &v15;
  }
  unsigned int v7 = *(_DWORD *)(*(void *)(a1 + 176) + 16 * *(unsigned int *)(v3 + 36 * a2 + 8) + 12);
  if ((v7 & 0x80000000) != 0)
  {
    __int16 v10 = *(_WORD *)(a1 + 68);
  }
  else
  {
    uint64_t v8 = *(unsigned int *)(v3 + 36 * v7);
    uint64_t v9 = *(void *)(a1 + 48);
    if (*(_DWORD *)(v9 + 388) > v8 && *(unsigned char *)(*(void *)(v9 + 104) + v8)) {
      __int16 v10 = *(_WORD *)(*(void *)(v9 + 72)
    }
                     + 2 * *(unsigned int *)(*(void *)(v9 + 48) + 4 * v8)
                     + 2 * (*(unsigned __int16 *)(*(void *)(v9 + 32) + 2 * v8) - 1));
    else {
      __int16 v10 = 0;
    }
  }
  uint64_t v11 = 0;
  *(_WORD *)(a3 + 2) = v10;
  *(_WORD *)a3 = *(_WORD *)(a1 + 68);
  *(unsigned char *)(a3 + 10) = 1;
LABEL_13:
  *(_WORD *)(a3 + 4) = v6[v11];
  return *PicMgr::getPicNode(*(void *)(*(void *)(a1 + 56) + 48), *(unsigned __int8 *)(*(void *)(*(void *)(*(void *)(a1 + 56) + 48) + 16)+ (unsigned __int16)v6[v11])- 1, (unsigned __int16 *)a3) == *(unsigned __int16 *)(*(void *)(a1 + 160) + 36 * a2 + 32);
}

char *mrec_qsort_r<FstSearchLateLatticeHashBackoffcmpTokLmhst>(char *result, unint64_t a2, int64_t a3)
{
  int64_t v4 = -a3;
  BOOL v5 = a3 != 8;
  BOOL v6 = ((result | a3) & 7) == 0;
  if (((result | a3) & 7) != 0) {
    int v7 = 2;
  }
  else {
    int v7 = a3 != 8;
  }
  if (a2 < 7)
  {
LABEL_5:
    if ((uint64_t)(a2 * a3) > a3)
    {
      uint64_t v8 = &result[a2 * a3];
      uint64_t v9 = &result[a3];
      __int16 v10 = result;
      do
      {
        if (v9 > result)
        {
          uint64_t v11 = v10;
          uint64_t v12 = v9;
          do
          {
            int v13 = v12;
            uint64_t v12 = (_DWORD *)((char *)v12 + v4);
            int v14 = v12[2];
            int v15 = v13[2];
            if (v14 <= v15 && (v14 < v15 || *v12 <= *v13)) {
              break;
            }
            if (v7)
            {
              uint64_t v16 = 0;
              uint64_t v17 = (uint64_t)v11 + a3;
              if (v6)
              {
                do
                {
                  uint64_t v18 = *(void *)(v17 + 8 * v16);
                  *(void *)(v17 + 8 * v16) = *(void *)&v11[2 * v16];
                  *(void *)&v11[2 * v16++] = v18;
                }
                while ((unint64_t)a3 >> 3 != v16);
              }
              else
              {
                do
                {
                  char v19 = *(unsigned char *)(v17 + v16);
                  *(unsigned char *)(v17 + v16) = *((unsigned char *)v11 + v16);
                  *((unsigned char *)v11 + v16++) = v19;
                }
                while (a3 != v16);
              }
            }
            else
            {
              uint64_t v20 = *(void *)v13;
              *(void *)int v13 = *(void *)v12;
              *(void *)uint64_t v12 = v20;
            }
            uint64_t v11 = (_DWORD *)((char *)v11 + v4);
          }
          while (v12 > (_DWORD *)result);
        }
        v9 += a3;
        __int16 v10 = (_DWORD *)((char *)v10 + a3);
      }
      while (v9 < v8);
    }
    return result;
  }
  unint64_t v21 = (unint64_t)a3 >> 3;
  while (1)
  {
    uint64_t v22 = &result[(a2 >> 1) * a3];
    if (a2 == 7) {
      goto LABEL_101;
    }
    int v23 = &result[(a2 - 1) * a3];
    if (a2 < 0x29)
    {
      int v25 = result;
      goto LABEL_82;
    }
    unint64_t v24 = (a2 >> 3) * a3;
    int v25 = &result[v24];
    int v26 = &result[2 * v24];
    int v27 = *((_DWORD *)result + 2);
    int v28 = *(_DWORD *)&result[v24 + 8];
    if (v27 > v28 || v27 >= v28 && *(_DWORD *)result >= *(_DWORD *)v25)
    {
      int v30 = *((_DWORD *)v26 + 2);
      if (v28 <= v30 && (v28 < v30 || *(_DWORD *)v25 <= *(_DWORD *)v26))
      {
        if (v27 > v30 || (int v25 = result, v27 >= v30) && (int v25 = result, *(_DWORD *)result >= *(_DWORD *)v26)) {
LABEL_38:
        }
          int v25 = &result[2 * v24];
      }
    }
    else
    {
      int v29 = *((_DWORD *)v26 + 2);
      if (v28 > v29 || v28 >= v29 && *(_DWORD *)v25 >= *(_DWORD *)v26)
      {
        int v25 = result;
        if (v27 <= v29)
        {
          if (v27 < v29) {
            goto LABEL_38;
          }
          int v25 = &result[2 * v24];
          if (*(_DWORD *)result >= *(_DWORD *)v26) {
            int v25 = result;
          }
        }
      }
    }
    int v31 = &v22[-v24];
    int v32 = &v22[v24];
    int v33 = *(_DWORD *)&v22[-v24 + 8];
    int v34 = *((_DWORD *)v22 + 2);
    if (v33 > v34 || v33 >= v34 && *(_DWORD *)v31 >= *(_DWORD *)v22)
    {
      int v36 = *((_DWORD *)v32 + 2);
      if (v34 <= v36 && (v34 < v36 || *(_DWORD *)v22 <= *(_DWORD *)v32))
      {
        if (v33 <= v36)
        {
          if (v33 < v36)
          {
LABEL_62:
            v22 -= v24;
            goto LABEL_63;
          }
          v22 -= v24;
          if (*(_DWORD *)v31 < *(_DWORD *)v32) {
            goto LABEL_63;
          }
        }
LABEL_57:
        uint64_t v22 = v32;
      }
    }
    else
    {
      int v35 = *((_DWORD *)v32 + 2);
      if (v34 > v35 || v34 >= v35 && *(_DWORD *)v22 >= *(_DWORD *)v32)
      {
        if (v33 > v35) {
          goto LABEL_62;
        }
        if (v33 < v35) {
          goto LABEL_57;
        }
        if (*(_DWORD *)v31 >= *(_DWORD *)v32) {
          v22 -= v24;
        }
        else {
          v22 += v24;
        }
      }
    }
LABEL_63:
    uint64_t v37 = -(uint64_t)v24;
    int v38 = &v23[-2 * v24];
    uint64_t v39 = &v23[v37];
    int v40 = *((_DWORD *)v38 + 2);
    int v41 = *((_DWORD *)v39 + 2);
    if (v40 > v41 || v40 >= v41 && *(_DWORD *)v38 >= *(_DWORD *)v39)
    {
      int v43 = *((_DWORD *)v23 + 2);
      if (v41 > v43 || v41 >= v43 && *(_DWORD *)v39 > *(_DWORD *)v23)
      {
LABEL_81:
        int v23 = v39;
        goto LABEL_82;
      }
      if (v40 <= v43 && (v40 < v43 || *(_DWORD *)v38 < *(_DWORD *)v23)) {
LABEL_78:
      }
        int v23 = v38;
    }
    else
    {
      int v42 = *((_DWORD *)v23 + 2);
      if (v41 <= v42 && (v41 < v42 || *(_DWORD *)v39 < *(_DWORD *)v23)) {
        goto LABEL_81;
      }
      if (v40 > v42) {
        goto LABEL_78;
      }
      if (v40 >= v42 && *(_DWORD *)v38 >= *(_DWORD *)v23) {
        int v23 = v38;
      }
    }
LABEL_82:
    int v44 = *((_DWORD *)v25 + 2);
    int v45 = *((_DWORD *)v22 + 2);
    if (v44 <= v45 && (v44 < v45 || *(_DWORD *)v25 < *(_DWORD *)v22))
    {
      int v46 = *((_DWORD *)v23 + 2);
      if (v45 <= v46 && (v45 < v46 || *(_DWORD *)v22 < *(_DWORD *)v23)) {
        goto LABEL_101;
      }
      if (v44 <= v46)
      {
        if (v44 >= v46)
        {
          if (*(_DWORD *)v25 >= *(_DWORD *)v23) {
            uint64_t v22 = v25;
          }
          else {
            uint64_t v22 = v23;
          }
          goto LABEL_101;
        }
LABEL_95:
        uint64_t v22 = v23;
        goto LABEL_101;
      }
LABEL_100:
      uint64_t v22 = v25;
      goto LABEL_101;
    }
    int v47 = *((_DWORD *)v23 + 2);
    if (v45 > v47 || v45 >= v47 && *(_DWORD *)v22 > *(_DWORD *)v23) {
      goto LABEL_101;
    }
    if (v44 > v47) {
      goto LABEL_95;
    }
    if (v44 < v47) {
      goto LABEL_100;
    }
    uint64_t v22 = v25;
    if (*(_DWORD *)v25 >= *(_DWORD *)v23) {
      goto LABEL_95;
    }
LABEL_101:
    if (v7)
    {
      if (v6)
      {
        uint64_t v48 = result;
        unint64_t v49 = (unint64_t)a3 >> 3;
        do
        {
          uint64_t v50 = *(void *)v48;
          *(void *)uint64_t v48 = *(void *)v22;
          v48 += 8;
          *(void *)uint64_t v22 = v50;
          v22 += 8;
          --v49;
        }
        while (v49);
      }
      else
      {
        int64_t v52 = a3;
        uint64_t v53 = result;
        do
        {
          char v54 = *v53;
          *v53++ = *v22;
          *v22++ = v54;
          --v52;
        }
        while (v52);
      }
    }
    else
    {
      uint64_t v51 = *(void *)result;
      *(void *)uint64_t result = *(void *)v22;
      *(void *)uint64_t v22 = v51;
    }
    int v55 = 0;
    uint64_t v56 = &result[a3];
    uint64_t v57 = &result[(a2 - 1) * a3];
    uint64_t v58 = v57;
    uint64_t v59 = &result[a3];
    uint64_t v60 = &result[a3];
LABEL_110:
    while (v59 <= v58)
    {
      int v61 = *((_DWORD *)v59 + 2);
      int v62 = *((_DWORD *)result + 2);
      if (v61 > v62) {
        break;
      }
      if (v61 >= v62)
      {
        if (*(_DWORD *)v59 == *(_DWORD *)result)
        {
          if (v7)
          {
            uint64_t v63 = 0;
            if (v6)
            {
              do
              {
                uint64_t v64 = *(void *)&v60[8 * v63];
                *(void *)&v60[8 * v63] = *(void *)&v59[8 * v63];
                *(void *)&v59[8 * v63++] = v64;
              }
              while (v21 != v63);
            }
            else
            {
              do
              {
                char v65 = v60[v63];
                v60[v63] = v59[v63];
                v59[v63++] = v65;
              }
              while (a3 != v63);
            }
          }
          else
          {
            uint64_t v75 = *(void *)v60;
            *(void *)uint64_t v60 = *(void *)v59;
            *(void *)uint64_t v59 = v75;
          }
          v60 += a3;
          int v55 = 1;
        }
        else if (*(_DWORD *)v59 > *(_DWORD *)result)
        {
          break;
        }
      }
      v59 += a3;
    }
    while (v59 <= v58)
    {
      int v67 = *((_DWORD *)v58 + 2);
      int v68 = *((_DWORD *)result + 2);
      if (v67 <= v68)
      {
        if (v67 < v68) {
          goto LABEL_136;
        }
        if (*(_DWORD *)v58 == *(_DWORD *)result)
        {
          if (v7)
          {
            uint64_t v69 = 0;
            if (v6)
            {
              do
              {
                uint64_t v70 = *(void *)&v58[8 * v69];
                *(void *)&v58[8 * v69] = *(void *)&v57[8 * v69];
                *(void *)&v57[8 * v69++] = v70;
              }
              while (v21 != v69);
            }
            else
            {
              do
              {
                char v71 = v58[v69];
                v58[v69] = v57[v69];
                v57[v69++] = v71;
              }
              while (a3 != v69);
            }
          }
          else
          {
            uint64_t v66 = *(void *)v58;
            *(void *)uint64_t v58 = *(void *)v57;
            *(void *)uint64_t v57 = v66;
          }
          v57 += v4;
          int v55 = 1;
        }
        else if (*(_DWORD *)v58 <= *(_DWORD *)result)
        {
LABEL_136:
          if (v7)
          {
            uint64_t v72 = 0;
            if (v6)
            {
              do
              {
                uint64_t v73 = *(void *)&v59[8 * v72];
                *(void *)&v59[8 * v72] = *(void *)&v58[8 * v72];
                *(void *)&v58[8 * v72++] = v73;
              }
              while (v21 != v72);
            }
            else
            {
              do
              {
                char v74 = v59[v72];
                v59[v72] = v58[v72];
                v58[v72++] = v74;
              }
              while (a3 != v72);
            }
          }
          else
          {
            uint64_t v76 = *(void *)v59;
            *(void *)uint64_t v59 = *(void *)v58;
            *(void *)uint64_t v58 = v76;
          }
          v59 += a3;
          v58 += v4;
          int v55 = 1;
          goto LABEL_110;
        }
      }
      v58 += v4;
    }
    uint64_t v77 = &result[a2 * a3];
    if (!v55) {
      break;
    }
    int64_t v78 = v59 - v60;
    if (v60 - result >= v59 - v60) {
      unint64_t v79 = v59 - v60;
    }
    else {
      unint64_t v79 = v60 - result;
    }
    if (v79)
    {
      if (v6)
      {
        uint64_t v80 = &v59[-v79];
        unint64_t v81 = v79 >> 3;
        uint64_t v82 = result;
        do
        {
          uint64_t v83 = *(void *)v82;
          *(void *)uint64_t v82 = *(void *)v80;
          v82 += 8;
          *(void *)uint64_t v80 = v83;
          v80 += 8;
          --v81;
        }
        while (v81);
      }
      else
      {
        uint64_t v84 = -(uint64_t)v79;
        uint64_t v85 = result;
        do
        {
          char v86 = *v85;
          *v85++ = v59[v84];
          v59[v84] = v86;
          BOOL v87 = __CFADD__(v84++, 1);
        }
        while (!v87);
      }
    }
    int64_t v88 = v57 - v58;
    int64_t v89 = v77 - &v57[a3];
    if (v57 - v58 < v89) {
      int64_t v89 = v57 - v58;
    }
    if (v89)
    {
      if (v6)
      {
        uint64_t v90 = &v77[-v89];
        unint64_t v91 = (unint64_t)v89 >> 3;
        do
        {
          uint64_t v92 = *(void *)v59;
          *(void *)uint64_t v59 = *(void *)v90;
          v59 += 8;
          *(void *)uint64_t v90 = v92;
          v90 += 8;
          --v91;
        }
        while (v91);
      }
      else
      {
        int64_t v93 = -v89;
        do
        {
          char v94 = *v59;
          *v59++ = v77[v93];
          v77[v93] = v94;
          BOOL v87 = __CFADD__(v93++, 1);
        }
        while (!v87);
      }
    }
    if (v78 > a3) {
      uint64_t result = (char *)mrec_qsort_r<FstSearchLateLatticeHashBackoffcmpTokLmhst>();
    }
    if (v88 <= a3) {
      return result;
    }
    uint64_t result = &v77[-v88];
    a2 = v88 / (unint64_t)a3;
    BOOL v6 = ((((_BYTE)v77 - v88) | a3) & 7) == 0;
    if (((((_BYTE)v77 - v88) | a3) & 7) != 0) {
      int v7 = 2;
    }
    else {
      int v7 = v5;
    }
    if (a2 < 7) {
      goto LABEL_5;
    }
  }
  if ((uint64_t)(a2 * a3) > a3)
  {
    uint64_t v95 = result;
    do
    {
      if (v56 > result)
      {
        uint64_t v96 = v95;
        uint64_t v97 = v56;
        do
        {
          uint64_t v98 = v97;
          uint64_t v97 = (_DWORD *)((char *)v97 + v4);
          int v99 = v97[2];
          int v100 = v98[2];
          if (v99 <= v100 && (v99 < v100 || *v97 <= *v98)) {
            break;
          }
          if (v7)
          {
            uint64_t v101 = 0;
            uint64_t v102 = (uint64_t)v96 + a3;
            if (v6)
            {
              do
              {
                uint64_t v103 = *(void *)(v102 + 8 * v101);
                *(void *)(v102 + 8 * v101) = *(void *)&v96[2 * v101];
                *(void *)&v96[2 * v101++] = v103;
              }
              while (v21 != v101);
            }
            else
            {
              do
              {
                char v104 = *(unsigned char *)(v102 + v101);
                *(unsigned char *)(v102 + v101) = *((unsigned char *)v96 + v101);
                *((unsigned char *)v96 + v101++) = v104;
              }
              while (a3 != v101);
            }
          }
          else
          {
            uint64_t v105 = *(void *)v98;
            *(void *)uint64_t v98 = *(void *)v97;
            *(void *)uint64_t v97 = v105;
          }
          uint64_t v96 = (_DWORD *)((char *)v96 + v4);
        }
        while (v97 > (_DWORD *)result);
      }
      v56 += a3;
      uint64_t v95 = (_DWORD *)((char *)v95 + a3);
    }
    while (v56 < v77);
  }
  return result;
}

char *mrec_qsort_r<FstSearchLateLatticeHashBackoffcmpTok>(char *result, unint64_t a2, int64_t a3)
{
  int64_t v4 = -a3;
  BOOL v5 = a3 != 8;
  BOOL v6 = ((result | a3) & 7) == 0;
  if (((result | a3) & 7) != 0) {
    int v7 = 2;
  }
  else {
    int v7 = a3 != 8;
  }
  if (a2 < 7)
  {
LABEL_157:
    if ((uint64_t)(a2 * a3) > a3)
    {
      BOOL v87 = &result[a2 * a3];
      int64_t v88 = &result[a3];
      int64_t v89 = result;
      do
      {
        if (v88 > result)
        {
          uint64_t v90 = v89;
          unint64_t v91 = v88;
          do
          {
            uint64_t v92 = v91;
            unint64_t v91 = (_DWORD *)((char *)v91 + v4);
            if (*v91 <= *v92) {
              break;
            }
            if (v7)
            {
              uint64_t v93 = 0;
              uint64_t v94 = (uint64_t)v90 + a3;
              if (v6)
              {
                do
                {
                  uint64_t v95 = *(void *)(v94 + 8 * v93);
                  *(void *)(v94 + 8 * v93) = *(void *)&v90[2 * v93];
                  *(void *)&v90[2 * v93++] = v95;
                }
                while ((unint64_t)a3 >> 3 != v93);
              }
              else
              {
                do
                {
                  char v96 = *(unsigned char *)(v94 + v93);
                  *(unsigned char *)(v94 + v93) = *((unsigned char *)v90 + v93);
                  *((unsigned char *)v90 + v93++) = v96;
                }
                while (a3 != v93);
              }
            }
            else
            {
              uint64_t v97 = *(void *)v92;
              *(void *)uint64_t v92 = *(void *)v91;
              *(void *)unint64_t v91 = v97;
            }
            uint64_t v90 = (_DWORD *)((char *)v90 + v4);
          }
          while (v91 > (_DWORD *)result);
        }
        v88 += a3;
        int64_t v89 = (_DWORD *)((char *)v89 + a3);
      }
      while (v88 < v87);
    }
  }
  else
  {
    unint64_t v8 = (unint64_t)a3 >> 3;
    while (1)
    {
      uint64_t v9 = &result[(a2 >> 1) * a3];
      if (a2 != 7)
      {
        __int16 v10 = &result[(a2 - 1) * a3];
        if (a2 <= 0x28)
        {
          int v22 = *(_DWORD *)result;
          int v33 = *(_DWORD *)v9;
          int v13 = result;
          int v42 = *(_DWORD *)v10;
        }
        else
        {
          unint64_t v11 = (a2 >> 3) * a3;
          uint64_t v12 = 2 * v11;
          int v13 = &result[2 * v11];
          int v14 = *(_DWORD *)result;
          int v15 = *(_DWORD *)&result[v11];
          int v16 = *(_DWORD *)v13;
          if (*(_DWORD *)result >= *(_DWORD *)v13) {
            int v17 = *(_DWORD *)v13;
          }
          else {
            int v17 = *(_DWORD *)result;
          }
          if (v14 >= v16) {
            uint64_t v18 = &result[2 * v11];
          }
          else {
            uint64_t v18 = result;
          }
          if (v15 > v16)
          {
            int v17 = *(_DWORD *)&result[v11];
            uint64_t v18 = &result[v11];
          }
          if (v14 <= v16) {
            int v19 = *(_DWORD *)v13;
          }
          else {
            int v19 = *(_DWORD *)result;
          }
          if (v14 >= v16) {
            int v13 = result;
          }
          BOOL v20 = v15 < v16;
          if (v15 >= v16) {
            int v21 = v19;
          }
          else {
            int v21 = *(_DWORD *)&result[v11];
          }
          if (v20) {
            int v13 = &result[v11];
          }
          if (v14 < v15) {
            int v22 = v21;
          }
          else {
            int v22 = v17;
          }
          if (v14 >= v15) {
            int v13 = v18;
          }
          uint64_t v23 = -(uint64_t)v11;
          unint64_t v24 = &v9[-v11];
          int v25 = &v9[v11];
          int v26 = *(_DWORD *)v24;
          int v27 = *(_DWORD *)v9;
          int v28 = *(_DWORD *)v25;
          if (*(_DWORD *)v24 >= *(_DWORD *)v25) {
            int v29 = *(_DWORD *)v25;
          }
          else {
            int v29 = *(_DWORD *)v24;
          }
          if (v26 >= v28) {
            int v30 = v25;
          }
          else {
            int v30 = v24;
          }
          if (v27 > v28)
          {
            int v29 = *(_DWORD *)v9;
            int v30 = &result[(a2 >> 1) * a3];
          }
          if (v26 <= v28) {
            int v31 = *(_DWORD *)v25;
          }
          else {
            int v31 = *(_DWORD *)v24;
          }
          if (v26 >= v28) {
            int v25 = v24;
          }
          if (v27 >= v28) {
            int v32 = v31;
          }
          else {
            int v32 = *(_DWORD *)v9;
          }
          if (v27 >= v28) {
            uint64_t v9 = v25;
          }
          if (v26 < v27) {
            int v33 = v32;
          }
          else {
            int v33 = v29;
          }
          if (v26 >= v27) {
            uint64_t v9 = v30;
          }
          int v34 = &v10[-v12];
          int v35 = &v10[v23];
          int v36 = *(_DWORD *)v34;
          int v37 = *(_DWORD *)v35;
          int v38 = *(_DWORD *)v10;
          if (*(_DWORD *)v34 >= *(_DWORD *)v10) {
            int v39 = *(_DWORD *)v10;
          }
          else {
            int v39 = *(_DWORD *)v34;
          }
          if (v36 >= v38) {
            int v40 = &result[(a2 - 1) * a3];
          }
          else {
            int v40 = v34;
          }
          if (v37 > v38)
          {
            int v39 = *(_DWORD *)v35;
            int v40 = v35;
          }
          if (v36 <= v38) {
            int v41 = *(_DWORD *)v10;
          }
          else {
            int v41 = *(_DWORD *)v34;
          }
          if (v36 >= v38) {
            __int16 v10 = v34;
          }
          if (v37 >= v38) {
            int v42 = v41;
          }
          else {
            int v42 = *(_DWORD *)v35;
          }
          if (v37 < v38) {
            __int16 v10 = v35;
          }
          if (v36 >= v37)
          {
            int v42 = v39;
            __int16 v10 = v40;
          }
        }
        if (v22 >= v42) {
          int v43 = v10;
        }
        else {
          int v43 = v13;
        }
        if (v33 > v42) {
          int v43 = v9;
        }
        if (v22 >= v42) {
          __int16 v10 = v13;
        }
        if (v33 >= v42) {
          uint64_t v9 = v10;
        }
        if (v22 >= v33) {
          uint64_t v9 = v43;
        }
      }
      if (v7)
      {
        if (v6)
        {
          int v44 = result;
          unint64_t v45 = (unint64_t)a3 >> 3;
          do
          {
            uint64_t v46 = *(void *)v44;
            *(void *)int v44 = *(void *)v9;
            v44 += 8;
            *(void *)uint64_t v9 = v46;
            v9 += 8;
            --v45;
          }
          while (v45);
        }
        else
        {
          int64_t v48 = a3;
          unint64_t v49 = result;
          do
          {
            char v50 = *v49;
            *v49++ = *v9;
            *v9++ = v50;
            --v48;
          }
          while (v48);
        }
      }
      else
      {
        uint64_t v47 = *(void *)result;
        *(void *)uint64_t result = *(void *)v9;
        *(void *)uint64_t v9 = v47;
      }
      int v51 = 0;
      int64_t v52 = &result[a3];
      uint64_t v53 = &result[(a2 - 1) * a3];
      char v54 = v53;
      int v55 = &result[a3];
      uint64_t v56 = &result[a3];
LABEL_96:
      while (v55 <= v54 && *(_DWORD *)v55 <= *(_DWORD *)result)
      {
        if (*(_DWORD *)v55 == *(_DWORD *)result)
        {
          if (v7)
          {
            uint64_t v57 = 0;
            if (v6)
            {
              do
              {
                uint64_t v58 = *(void *)&v56[8 * v57];
                *(void *)&v56[8 * v57] = *(void *)&v55[8 * v57];
                *(void *)&v55[8 * v57++] = v58;
              }
              while (v8 != v57);
            }
            else
            {
              do
              {
                char v59 = v56[v57];
                v56[v57] = v55[v57];
                v55[v57++] = v59;
              }
              while (a3 != v57);
            }
          }
          else
          {
            uint64_t v67 = *(void *)v56;
            *(void *)uint64_t v56 = *(void *)v55;
            *(void *)int v55 = v67;
          }
          v56 += a3;
          int v51 = 1;
        }
        v55 += a3;
      }
      while (v55 <= v54)
      {
        if (*(_DWORD *)v54 < *(_DWORD *)result)
        {
          if (v7)
          {
            uint64_t v64 = 0;
            if (v6)
            {
              do
              {
                uint64_t v65 = *(void *)&v55[8 * v64];
                *(void *)&v55[8 * v64] = *(void *)&v54[8 * v64];
                *(void *)&v54[8 * v64++] = v65;
              }
              while (v8 != v64);
            }
            else
            {
              do
              {
                char v66 = v55[v64];
                v55[v64] = v54[v64];
                v54[v64++] = v66;
              }
              while (a3 != v64);
            }
          }
          else
          {
            uint64_t v68 = *(void *)v55;
            *(void *)int v55 = *(void *)v54;
            *(void *)char v54 = v68;
          }
          v55 += a3;
          v54 += v4;
          int v51 = 1;
          goto LABEL_96;
        }
        if (*(_DWORD *)v54 == *(_DWORD *)result)
        {
          if (v7)
          {
            uint64_t v60 = 0;
            if (v6)
            {
              do
              {
                uint64_t v61 = *(void *)&v54[8 * v60];
                *(void *)&v54[8 * v60] = *(void *)&v53[8 * v60];
                *(void *)&v53[8 * v60++] = v61;
              }
              while (v8 != v60);
            }
            else
            {
              do
              {
                char v62 = v54[v60];
                v54[v60] = v53[v60];
                v53[v60++] = v62;
              }
              while (a3 != v60);
            }
          }
          else
          {
            uint64_t v63 = *(void *)v54;
            *(void *)char v54 = *(void *)v53;
            *(void *)uint64_t v53 = v63;
          }
          v53 += v4;
          int v51 = 1;
        }
        v54 += v4;
      }
      uint64_t v69 = &result[a2 * a3];
      if (!v51) {
        break;
      }
      int64_t v70 = v55 - v56;
      if (v56 - result >= v55 - v56) {
        unint64_t v71 = v55 - v56;
      }
      else {
        unint64_t v71 = v56 - result;
      }
      if (v71)
      {
        if (v6)
        {
          uint64_t v72 = &v55[-v71];
          unint64_t v73 = v71 >> 3;
          char v74 = result;
          do
          {
            uint64_t v75 = *(void *)v74;
            *(void *)char v74 = *(void *)v72;
            v74 += 8;
            *(void *)uint64_t v72 = v75;
            v72 += 8;
            --v73;
          }
          while (v73);
        }
        else
        {
          uint64_t v76 = -(uint64_t)v71;
          uint64_t v77 = result;
          do
          {
            char v78 = *v77;
            *v77++ = v55[v76];
            v55[v76] = v78;
            BOOL v79 = __CFADD__(v76++, 1);
          }
          while (!v79);
        }
      }
      int64_t v80 = v53 - v54;
      int64_t v81 = v69 - &v53[a3];
      if (v53 - v54 < v81) {
        int64_t v81 = v53 - v54;
      }
      if (v81)
      {
        if (v6)
        {
          uint64_t v82 = &v69[-v81];
          unint64_t v83 = (unint64_t)v81 >> 3;
          do
          {
            uint64_t v84 = *(void *)v55;
            *(void *)int v55 = *(void *)v82;
            v55 += 8;
            *(void *)uint64_t v82 = v84;
            v82 += 8;
            --v83;
          }
          while (v83);
        }
        else
        {
          int64_t v85 = -v81;
          do
          {
            char v86 = *v55;
            *v55++ = v69[v85];
            v69[v85] = v86;
            BOOL v79 = __CFADD__(v85++, 1);
          }
          while (!v79);
        }
      }
      if (v70 > a3) {
        uint64_t result = (char *)mrec_qsort_r<FstSearchLateLatticeHashBackoffcmpTok>();
      }
      if (v80 <= a3) {
        return result;
      }
      uint64_t result = &v69[-v80];
      a2 = v80 / (unint64_t)a3;
      BOOL v6 = ((((_BYTE)v69 - v80) | a3) & 7) == 0;
      if (((((_BYTE)v69 - v80) | a3) & 7) != 0) {
        int v7 = 2;
      }
      else {
        int v7 = v5;
      }
      if (a2 < 7) {
        goto LABEL_157;
      }
    }
    if ((uint64_t)(a2 * a3) > a3)
    {
      uint64_t v98 = result;
      do
      {
        if (v52 > result)
        {
          int v99 = v98;
          int v100 = v52;
          do
          {
            uint64_t v101 = v100;
            int v100 = (_DWORD *)((char *)v100 + v4);
            if (*v100 <= *v101) {
              break;
            }
            if (v7)
            {
              uint64_t v102 = 0;
              uint64_t v103 = (uint64_t)v99 + a3;
              if (v6)
              {
                do
                {
                  uint64_t v104 = *(void *)(v103 + 8 * v102);
                  *(void *)(v103 + 8 * v102) = *(void *)&v99[2 * v102];
                  *(void *)&v99[2 * v102++] = v104;
                }
                while (v8 != v102);
              }
              else
              {
                do
                {
                  char v105 = *(unsigned char *)(v103 + v102);
                  *(unsigned char *)(v103 + v102) = *((unsigned char *)v99 + v102);
                  *((unsigned char *)v99 + v102++) = v105;
                }
                while (a3 != v102);
              }
            }
            else
            {
              uint64_t v106 = *(void *)v101;
              *(void *)uint64_t v101 = *(void *)v100;
              *(void *)int v100 = v106;
            }
            int v99 = (_DWORD *)((char *)v99 + v4);
          }
          while (v100 > (_DWORD *)result);
        }
        v52 += a3;
        uint64_t v98 = (_DWORD *)((char *)v98 + a3);
      }
      while (v52 < v69);
    }
  }
  return result;
}

void FstSearchLateLatticeHashBackoff::checkSearchParametersValidityForArcGraph(FstSearchLateLatticeHashBackoff *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *((void *)this + 5);
  if (*(unsigned char *)(v8 + 178))
  {
    int v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(unsigned char *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    }
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    }
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(void *)(**(void **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((void *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if (a2)
      {
        if (!*(unsigned char *)(v8 + 203)) {
          return;
        }
      }
      else if (*(unsigned char *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(unsigned char *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

void FstSearchLateLatticeHashBackoff::getHistory(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 == -1)
  {
    *(_DWORD *)(a3 + 8) = 0;
  }
  else
  {
    int v9 = a4;
    LODWORD(v11) = 0;
    uint64_t v12 = a2;
    uint64_t v13 = a2;
    do
    {
      int v14 = (_DWORD *)(*(void *)(a1 + 160) + 36 * v13);
      if (*v14 == 16777209) {
        uint64_t v11 = v11;
      }
      else {
        uint64_t v11 = (v11 + 1);
      }
      uint64_t v13 = v14[5];
    }
    while (v13 != -1);
    unsigned int v15 = *(_DWORD *)(a3 + 12);
    if (v11 > v15) {
      DgnArray<PrefilterResultFrame>::reallocElts(a3, v11 - v15, 0);
    }
    uint64_t v16 = *(unsigned int *)(a3 + 8);
    if (v16 < v11)
    {
      uint64_t v17 = v11 - v16;
      uint64_t v18 = *(void *)a3 + 32 * v16;
      do
      {
        *(void *)uint64_t v18 = 0x3FFFFAFFFFFFLL;
        *(_OWORD *)(v18 + 8) = xmmword_2140866D0;
        *(void *)(v18 + 24) = 0x1F0000001FLL;
        v18 += 32;
        --v17;
      }
      while (v17);
    }
    *(_DWORD *)(a3 + 8) = v11;
    if (v11)
    {
      uint64_t v19 = *(void *)(a1 + 160);
      int v20 = -16;
      do
      {
        int v21 = (unsigned int *)(v19 + 36 * v12);
        int v22 = v21[1];
        if (*v21 == 16777209)
        {
          if (v9)
          {
            int v23 = v22 - 1;
            if (v22 < 1) {
              int v23 = v22;
            }
            int v20 = (v23 >> 1) + 1;
          }
          else
          {
            int v20 = v22 + 1;
          }
        }
        else
        {
          if (v9)
          {
            int v24 = v22 - 1;
            if (v22 < 1) {
              int v24 = v21[1];
            }
            int v22 = v24 >> 1;
          }
          ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *v21, a3, a4, a5, a6, a7, a8, (uint64_t)v28);
          if (v20 == -16) {
            int v25 = v22 + 1;
          }
          else {
            int v25 = v20;
          }
          int v26 = v28[1];
          uint64_t v11 = (v11 - 1);
          uint64_t v27 = *(void *)a3 + 32 * v11;
          *(_DWORD *)uint64_t v27 = v28[0];
          *(_DWORD *)(v27 + 4) = v26;
          *(_OWORD *)(v27 + 8) = v29;
          *(_DWORD *)(v27 + 24) = v22 + 1;
          *(_DWORD *)(v27 + 28) = v25;
          uint64_t v19 = *(void *)(a1 + 160);
          int v20 = -16;
        }
        uint64_t v12 = *(unsigned int *)(v19 + 36 * v12 + 20);
      }
      while (v12 != -1);
    }
  }
}

uint64_t FstSearchLateLatticeHashBackoff::makePartialResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    uint64_t v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(void *)a2 + v9))(*(void *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  unsigned int BestTrace = FstSearchLateLatticeHashBackoff::getBestTrace(a1, 0, 0, 1);
  if (BestTrace == -1) {
    return 1879048192;
  }
  unsigned int v15 = BestTrace;
  FstSearchLateLatticeHashBackoff::getHistory(a1, BestTrace, a3, a4, v11, v12, v13, v14);
  memset(v25, 0, sizeof(v25));
  int v26 = 0;
  if (*(_DWORD *)(a3 + 8))
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    int v18 = 0;
    do
    {
      uint64_t v19 = *(void *)a3 + v16;
      int v20 = *(_DWORD *)(v19 + 28);
      WordLatticeLC::WordLatticeLC((uint64_t)v24, v19, v18, *(_DWORD *)(v19 + 24) - v18, v20 - *(_DWORD *)(v19 + 24), (uint64_t)v25);
      uint64_t v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(void *)a2 + 112 * v21), (const WordLatticeLC *)v24);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v24);
      ++v17;
      v16 += 32;
      int v18 = v20;
    }
    while (v17 < *(unsigned int *)(a3 + 8));
  }
  uint64_t v22 = *(void *)(a1 + 160) + 36 * v15;
  return (*(_DWORD *)(v22 + 16) + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_213E31E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int64x2_t FstSearchLateLatticeHash::advanceDeltas(FstSearchLateLatticeHash *this, int a2, signed __int32 a3, SearchStats *a4, int a5)
{
  v97[0] = a2;
  int64x2_t v95 = 0u;
  int64x2_t v96 = 0u;
  SnapTime::recordTime((SnapTime *)&v95, 1, 0, 0, 0);
  v93.n128_u64[0] = 0xFFFFFFFF00000000;
  v93.n128_u32[2] = -1;
  v93.n128_u16[6] = -2;
  unint64_t v94 = 0;
  *((_DWORD *)this + 58) = a3;
  __int16 v10 = (signed __int32 *)((char *)this + 232);
  int v11 = *((_DWORD *)this + 2);
  unint64_t v12 = *((unsigned int *)this + 50);
  if (v12)
  {
    int v72 = a5;
    unint64_t v73 = a4;
    for (unint64_t i = 0; i < v12; ++i)
    {
      uint64_t v14 = *((void *)this + 24);
      unsigned int v15 = (int *)(v14 + 24 * i);
      uint64_t v16 = v15[1];
      uint64_t v17 = *((void *)this + 5);
      if (*(_DWORD *)(v17 + 160) != v16)
      {
        if (*(_DWORD *)(v17 + 140) > (int)v16)
        {
          int v18 = *v15;
          signed __int32 v19 = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(v14 + 24 * i + 12))+ v18;
          signed __int32 v20 = *((_DWORD *)this + 58);
          if (v19 - v11 <= v20)
          {
            if (v20 > v19) {
              *__int16 v10 = v19;
            }
            uint64_t v21 = (__n128 *)(*((void *)this + 24) + 24 * i);
            unint64_t v22 = v21[1].n128_u64[0];
            __n128 v93 = *v21;
            unint64_t v94 = v22;
            v93.n128_u32[0] = v19;
            FstSearchLateLatticeHashBackoff::maybeInsertHashedToken((uint64_t)this, &v93);
          }
        }
        unsigned int v23 = v16;
        do
        {
          uint64_t v24 = *((void *)this + 5);
          uint64_t v25 = *(void *)(v24 + 152);
          unsigned int v26 = *(_DWORD *)(v25 + 4 * v23);
          int v27 = *(_DWORD *)(v25 + 4 * (v23 + 1));
          int v28 = *(_DWORD *)(v24 + 140);
          if (v28 <= v27)
          {
            if (v28 <= (int)v16 && *((unsigned char *)this + 356) != 0)
            {
              unsigned int v36 = (v26 & 0xFFFFF) <= 0xFFFF3 ? v26 & 0xFFFFF : v26 & 0xFFFFF | 0xF00000;
              if (v36 != 16777210)
              {
                DgnString::DgnString((DgnString *)&v90);
                ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v36, (DgnString *)&v90, v37, v38, v39, v40, v41);
                uint64_t v46 = &unk_214099300;
                if (v90.i32[2]) {
                  uint64_t v46 = (void *)v90.i64[0];
                }
                xprintf("Seed from state %d score %d trace %d, %s\n", v42, v43, v44, v45, v16, *(unsigned int *)(*((void *)this + 24) + 24 * i), *(unsigned int *)(*((void *)this + 24) + 24 * i + 8), v46);
                MiniFst::seed((uint64_t)this + 240, *(_DWORD *)(*((void *)this + 24) + 24 * i), *(_DWORD *)(*((void *)this + 24) + 24 * i + 20), *(_DWORD *)(*((void *)this + 24) + 24 * i + 8), v27);
                DgnString::~DgnString((DgnString *)&v90);
              }
            }
          }
          else
          {
            int v29 = (v26 >> 20) & 0x3FF;
            int ScoreNoBackoff = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), (unsigned __int16)*(_DWORD *)(v25 + 4 * v23));
            uint64_t v31 = *((void *)this + 24) + 24 * i;
            signed __int32 v32 = ScoreNoBackoff + v29 + *(_DWORD *)v31;
            signed __int32 v33 = *((_DWORD *)this + 58);
            if (v32 - v11 <= v33)
            {
              if (v33 > v32) {
                *__int16 v10 = v32;
              }
              uint64_t v34 = *(void *)(v31 + 16);
              __n128 v93 = *(__n128 *)v31;
              HIDWORD(v94) = HIDWORD(v34);
              v93.n128_u64[0] = __PAIR64__(v27, v32);
              v93.n128_u16[6] = v26;
              LODWORD(v94) = v34 + v29;
              FstSearchLateLatticeHashBackoff::maybeInsertHashedToken((uint64_t)this, &v93);
            }
          }
          v23 += 2;
        }
        while ((v26 & 0x80000000) == 0);
        unint64_t v12 = *((unsigned int *)this + 50);
      }
    }
    a3 = *v10;
    a4 = v73;
    a5 = v72;
  }
  int v92 = a3 + v11;
  if (*((unsigned char *)this + 356)) {
    MiniFst::updateFrame((char *)this + 240, (int *)this + 58, v11, a2);
  }
  int64x2_t v90 = 0u;
  int64x2_t v91 = 0u;
  SnapTime::recordTime((SnapTime *)&v90, 1, 0, 0, 0);
  int64x2_t v90 = vsubq_s64(v90, v95);
  int64x2_t v91 = vsubq_s64(v91, v96);
  uint64_t v47 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v48 = vaddq_s64(v47[1], v91);
  *uint64_t v47 = vaddq_s64(*v47, v90);
  v47[1] = v48;
  int64x2_t v88 = 0u;
  int64x2_t v89 = 0u;
  SnapTime::recordTime((SnapTime *)&v88, 1, 0, 0, 0);
  FstSearchLateLatticeHashBackoff::applyCutoffOnEmitting((uint64_t)this, *((_DWORD *)this + 4), &v92);
  int64x2_t v86 = 0u;
  int64x2_t v87 = 0u;
  SnapTime::recordTime((SnapTime *)&v86, 1, 0, 0, 0);
  int64x2_t v49 = vsubq_s64(v86, v88);
  char v50 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v51 = v50[3];
  int64x2_t v52 = vaddq_s64(v50[2], v49);
  int64x2_t v86 = v49;
  int64x2_t v87 = vsubq_s64(v87, v89);
  int64x2_t v53 = vaddq_s64(v51, v87);
  v50[2] = v52;
  int v50[3] = v53;
  int64x2_t v84 = 0u;
  int64x2_t v85 = 0u;
  SnapTime::recordTime((SnapTime *)&v84, 1, 0, 0, 0);
  uint64_t v54 = *((void *)this + 24);
  uint64_t v55 = *((void *)this + 26);
  *((void *)this + 24) = v55;
  *((void *)this + 26) = v54;
  LODWORD(v54) = *((_DWORD *)this + 51);
  uint64_t v56 = *((void *)this + 27);
  *((void *)this + 25) = v56;
  *((_DWORD *)this + 54) = 0;
  *((_DWORD *)this + 55) = v54;
  unint64_t v57 = *((unsigned int *)this + 6);
  if (v57 && v56 && v57 < v56) {
    mrec_nth_element<FstSearchLateLatticeHashBackoffcmpTok>(v55, v57, v56);
  }
  int64x2_t v82 = 0u;
  int64x2_t v83 = 0u;
  SnapTime::recordTime((SnapTime *)&v82, 1, 0, 0, 0);
  int64x2_t v58 = vsubq_s64(v82, v84);
  char v59 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v60 = v59[5];
  int64x2_t v61 = vaddq_s64(v59[4], v58);
  int64x2_t v82 = v58;
  int64x2_t v83 = vsubq_s64(v83, v85);
  int64x2_t v62 = vaddq_s64(v60, v83);
  v59[4] = v61;
  v59[5] = v62;
  int64x2_t v80 = 0u;
  int64x2_t v81 = 0u;
  SnapTime::recordTime((SnapTime *)&v80, 1, 0, 0, 0);
  VirtMap::setEmpty(*((void *)this + 14));
  int64x2_t v78 = 0u;
  int64x2_t v79 = 0u;
  SnapTime::recordTime((SnapTime *)&v78, 1, 0, 0, 0);
  int64x2_t v63 = vsubq_s64(v78, v80);
  uint64_t v64 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v65 = v64[9];
  int64x2_t v66 = vaddq_s64(v64[8], v63);
  int64x2_t v78 = v63;
  int64x2_t v79 = vsubq_s64(v79, v81);
  int64x2_t v67 = vaddq_s64(v65, v79);
  v64[8] = v66;
  v64[9] = v67;
  int64x2_t v76 = 0u;
  int64x2_t v77 = 0u;
  SnapTime::recordTime((SnapTime *)&v76, 1, 0, 0, 0);
  *((_DWORD *)this + 54) = 0;
  uint64_t v68 = *((unsigned int *)this + 50);
  *((_DWORD *)this + 38) = v68;
  if (a4)
  {
    *((void *)a4 + 2) += v68;
    if (*((_DWORD *)a4 + 2) > v68) {
      LODWORD(v68) = *((_DWORD *)a4 + 2);
    }
    *((_DWORD *)a4 + 2) = v68;
  }
  if (*((unsigned char *)this + 356)) {
    FstSearchLateLatticeHash::seedFromMiniFst((uint64_t)this, v97);
  }
  if (a5) {
    FstSearchLateLatticeHashBackoff::propagateNulls((uint64_t)this, v92, a2, a4);
  }
  *((_DWORD *)this + 56) = a2;
  int64x2_t v74 = 0u;
  int64x2_t v75 = 0u;
  SnapTime::recordTime((SnapTime *)&v74, 1, 0, 0, 0);
  uint64_t v69 = (int64x2_t *)*((void *)this + 13);
  int64x2_t result = vaddq_s64(v69[6], vsubq_s64(v74, v76));
  int64x2_t v71 = vaddq_s64(v69[7], vsubq_s64(v75, v77));
  v69[6] = result;
  v69[7] = v71;
  return result;
}

void sub_213E32418(_Unwind_Exception *exception_object)
{
}

uint64_t PelScoreCache::getScoreNoBackoff(PelScoreCache *this, uint64_t a2)
{
  if (*((unsigned char *)this + 494))
  {
    int v4 = *(__int16 *)(*((void *)this + 8) + 2 * a2);
    if (v4 == 20046)
    {
      if (*((unsigned char *)this + 495))
      {
        int v4 = 19999;
      }
      else if (*((unsigned char *)this + 492))
      {
        uint64_t v6 = *(unsigned __int16 *)(**((void **)this + 3) + 2 * a2);
        if (*(_DWORD *)(*((void *)this + 18) + 4 * v6) == -1) {
          PelScoreCache::computeGenScores(this, *(unsigned __int16 *)(**((void **)this + 3) + 2 * a2));
        }
        int v4 = PelScoreCache::computePelScoreFromGenScores(this, a2, v6);
      }
      else
      {
        int v4 = PelScoreCache::computePelScore(this, a2);
      }
    }
  }
  else
  {
    int v4 = PelScoreCache::computePelScoreNoCache(this, a2);
  }
  return (v4 - *((_DWORD *)this + 64));
}

uint64_t FstSearchLateLatticeHash::seedFromMiniFst(uint64_t this, int *a2)
{
  if (*(unsigned char *)(this + 356))
  {
    uint64_t v2 = this;
    unsigned int v3 = *(_DWORD *)(this + 264);
    if (v3 >= *(_DWORD *)(this + 20)) {
      unsigned int v3 = *(_DWORD *)(this + 20);
    }
    if (v3)
    {
      uint64_t v4 = 0;
      unsigned int v5 = 0;
      uint64_t v22 = this + 192;
      unsigned int v23 = (void *)(this + 160);
      do
      {
        uint64_t v6 = (int *)(*(void *)(v2 + 256) + v4);
        int v7 = *v6;
        int v9 = v6[4];
        int v8 = v6[5];
        int v10 = v6[6];
        int v11 = v6[7];
        int v12 = v6[2];
        v25[0] = 0;
        v25[1] = 0;
        if ((v12 & 0x80000000) == 0)
        {
          while (1)
            ;
        }
        unsigned int v13 = -2 - v12;
        if (v11 == 16777213)
        {
          int v11 = 16777209;
          if (*(_DWORD *)(*v23 + 36 * v13) == 16777209) {
            unsigned int v13 = *(_DWORD *)(*(void *)(v2 + 176) + 16 * *(unsigned int *)(*v23 + 36 * v13 + 8) + 12);
          }
        }
        int v14 = *a2;
        uint64_t v15 = *(unsigned int *)(v2 + 168);
        if (v15 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)v23, 1, 1);
          LODWORD(v15) = *(_DWORD *)(v2 + 168);
        }
        uint64_t v16 = *(void *)(v2 + 160);
        uint64_t v17 = v16 + 36 * v15;
        *(_DWORD *)uint64_t v17 = v11;
        *(_DWORD *)(v17 + 4) = v14;
        *(void *)(v17 + 8) = 0xFFFFFFFFLL;
        *(_DWORD *)(v17 + 16) = v7;
        *(_DWORD *)(v17 + 20) = v13;
        *(_DWORD *)(v17 + 24) = v9;
        *(_DWORD *)(v17 + 28) = v8;
        *(_WORD *)(v17 + 32) = -2;
        unsigned int v18 = *(_DWORD *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v18 + 1;
        *(_DWORD *)(v16 + 36 * v18 + 12) = 1;
        uint64_t v19 = *(unsigned int *)(v2 + 200);
        if (v19 == *(_DWORD *)(v2 + 204))
        {
          DgnArray<CWIDAC>::reallocElts(v22, 1, 1);
          LODWORD(v19) = *(_DWORD *)(v2 + 200);
        }
        uint64_t v20 = *(void *)(v2 + 192) + 24 * v19;
        *(_DWORD *)uint64_t v20 = v7;
        *(_DWORD *)(v20 + 4) = v10;
        *(_DWORD *)(v20 + 8) = v18;
        *(_WORD *)(v20 + 12) = -2;
        *(_DWORD *)(v20 + 16) = v9;
        *(_DWORD *)(v20 + 20) = v8;
        ++*(_DWORD *)(v2 + 200);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v25);
        ++v5;
        unsigned int v21 = *(_DWORD *)(v2 + 264);
        if (v21 >= *(_DWORD *)(v2 + 20)) {
          unsigned int v21 = *(_DWORD *)(v2 + 20);
        }
        v4 += 36;
      }
      while (v5 < v21);
    }
  }
  return this;
}

void sub_213E32700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

int64x2_t FstSearchLateLatticeHash::vite(int64x2_t **this, int a2, signed __int32 a3, SearchStats *a4, int a5)
{
  FstSearchLateLatticeHash::advanceDeltas((FstSearchLateLatticeHash *)this, a2, a3, a4, a5);
  int64x2_t v11 = 0u;
  int64x2_t v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  int64x2_t v9 = 0u;
  int64x2_t v10 = 0u;
  SnapTime::recordTime((SnapTime *)&v9, 1, 0, 0, 0);
  uint64_t v6 = this[13];
  int64x2_t result = vaddq_s64(v6[14], vsubq_s64(v9, v11));
  int64x2_t v8 = vaddq_s64(v6[15], vsubq_s64(v10, v12));
  v6[14] = result;
  v6[15] = v8;
  return result;
}

int64x2_t FstSearchLateLatticeHash::reset(FstSearchLateLatticeHash *this)
{
  *((_DWORD *)this + 42) = 0;
  *((_DWORD *)this + 46) = 0;
  *((_DWORD *)this + 50) = 0;
  int64x2_t v7 = 0u;
  int64x2_t v8 = 0u;
  SnapTime::recordTime((SnapTime *)&v7, 1, 0, 0, 0);
  int64x2_t v5 = 0u;
  int64x2_t v6 = 0u;
  SnapTime::recordTime((SnapTime *)&v5, 1, 0, 0, 0);
  uint64_t v2 = (int64x2_t *)*((void *)this + 13);
  int64x2_t result = vaddq_s64(v2[10], vsubq_s64(v5, v7));
  int64x2_t v4 = vaddq_s64(v2[11], vsubq_s64(v6, v8));
  v2[10] = result;
  v2[11] = v4;
  return result;
}

double FstSearchLateLatticeHash::doFrame(int64x2_t **this, int a2, signed __int32 a3, SearchStats *a4, int a5)
{
  if (a3 >= 20000) {
    a3 = 20000;
  }
  *(void *)&double result = FstSearchLateLatticeHash::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearchLateLatticeHash::beginTopRecPassSyncRecog(FstSearchLateLatticeHash *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 240, a3, *((PelScoreCache **)this + 4));
    uint64_t result = ArcGraph::findBackoffState(*((void *)this + 5));
    *((_DWORD *)this + 88) = result;
    *((unsigned char *)this + 356) = 1;
  }
  return result;
}

uint64_t FstSearchLateLatticeHash::endTopRecPassSyncRecog(int64x2_t **this)
{
  int64x2_t v10 = 0u;
  int64x2_t v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  FstSearchLateLatticeHashBackoff::generateTraceTokensFromTraces((FstSearchLateLatticeHashBackoff *)this);
  FstSearchLateLatticeHash::generateTraceTokensForLateLattice((FstSearchLateLatticeHash *)this);
  int64x2_t v8 = 0u;
  int64x2_t v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  int64x2_t v2 = vsubq_s64(v8, v10);
  unsigned int v3 = this[13];
  int64x2_t v4 = v3[13];
  int64x2_t v5 = vaddq_s64(v3[12], v2);
  int64x2_t v8 = v2;
  int64x2_t v9 = vsubq_s64(v9, v11);
  int64x2_t v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + 58) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

uint64_t FstSearchLateLatticeHash::generateTraceTokensForLateLattice(FstSearchLateLatticeHash *this)
{
  unint64_t v1 = this;
  v131[1] = 0;
  uint64_t v132 = 0;
  int v133 = 0;
  v131[0] = 0;
  FstSearchLateLatticeHashBackoff::getTraceTimeBoundaries((uint64_t)this, &v132, (uint64_t)v131);
  uint64_t v129 = 0;
  int v130 = 0;
  uint64_t v127 = 0;
  int v128 = 0;
  v126[0] = 0;
  v126[1] = 0;
  int v125 = 1879048192;
  int v2 = (*(uint64_t (**)(FstSearchLateLatticeHash *, uint64_t *, uint64_t *, int *, void *))(*(void *)v1 + 80))(v1, &v129, &v127, &v125, v126);
  int v9 = *((_DWORD *)v1 + 7);
  int v10 = *((_DWORD *)v1 + 2);
  uint64_t v122 = -1;
  __int16 v124 = 256;
  __int16 v123 = *((_WORD *)v1 + 34);
  if (v2)
  {
    uint64_t v120 = 0;
    uint64_t v121 = 0;
    int64x2_t v11 = (uint64_t *)((char *)v1 + 160);
    uint64_t v12 = *((unsigned int *)v1 + 42);
    if (v12)
    {
      unsigned int v13 = 0;
      char v105 = (uint64_t *)((char *)v1 + 160);
      int v102 = v10;
      int v103 = v9;
      while (1)
      {
        while (1)
        {
          while (1)
          {
            --v12;
            uint64_t v14 = *v11;
            if (*(unsigned char *)(v129 + v12)) {
              break;
            }
            *(_DWORD *)(v14 + 36 * v12 + 8) = -1;
            if (!v12) {
              goto LABEL_77;
            }
          }
          uint64_t v15 = (unsigned int *)(v14 + 36 * v12);
          uint64_t v16 = *v15;
          uint64_t v17 = *((void *)v1 + 6);
          if (*(_DWORD *)(v17 + 388) > v16 && *(unsigned char *)(*(void *)(v17 + 104) + v16)) {
            __int16 v18 = *(_WORD *)(*(void *)(v17 + 72) + 2 * *(unsigned int *)(*(void *)(v17 + 48) + 4 * v16));
          }
          else {
            __int16 v18 = 0;
          }
          uint64_t v19 = *((void *)v1 + 11);
          int v20 = *(_DWORD *)(v19 + 4 * v15[1]);
          unsigned int v22 = v15[2];
          unsigned int v21 = v15 + 2;
          uint64_t v23 = *((void *)v1 + 22);
          int v24 = *((_DWORD *)v1 + 3);
          int v25 = *(_DWORD *)(v126[0] + 4 * v12);
          HIWORD(v122) = v18;
          uint64_t v109 = (int32x2_t *)(v23 + 16 * v22);
          unsigned __int32 v26 = v109[1].u32[1];
          if ((v26 & 0x80000000) == 0) {
            break;
          }
          *unsigned int v21 = v13;
          if (v13 == HIDWORD(v121))
          {
            DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v120, 1, 1);
            unsigned int v13 = v121;
          }
          *((_OWORD *)v120 + v13) = *(_OWORD *)v109->i8;
          unsigned int v13 = v121 + 1;
          LODWORD(v121) = v121 + 1;
          *(_DWORD *)(*v11 + 36 * v12 + 12) = 1;
          if (!v12) {
            goto LABEL_77;
          }
        }
        uint64_t v110 = v12;
        uint64_t v113 = v109[1].u32[1];
        uint64_t v27 = v14 + 36 * v26;
        uint64_t v28 = *(unsigned int *)(v27 + 4);
        unint64_t v29 = v28 ? *(unsigned int *)(v132 + 4 * (v28 - 1)) : 0;
        int v114 = v24 + v125 - v25;
        uint64_t v108 = (int32x2_t *)(v23 + 16 * *(unsigned int *)(v27 + 8));
        int v107 = v20 + v109->i32[0] - *(_DWORD *)(v19 + 4 * v28) - v108->i32[0];
        int v106 = v108->i32[0] - *(_DWORD *)(v131[0] + 4 * v28);
        unsigned int v30 = v13;
        if (v29 < *(unsigned int *)(v132 + 4 * v28)) {
          break;
        }
LABEL_42:
        if (v13 >= v30)
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 150, (uint64_t)"fst/fstsrch", 2, (uint64_t)"%s", v7, v8, (char)&unk_214099300);
          unsigned int v30 = v121;
        }
        mrec_qsort_r<FstSearchLateLatticeHashBackoffcmpTokLmhst>((char *)v120 + 16 * v13, v30 - v13, 16);
        unint64_t v45 = v13 + 1;
        unsigned int v46 = v121;
        if (v45 < v121)
        {
          uint64_t v47 = 16 * (v13 + 1);
          unsigned int v48 = v13;
          do
          {
            if (*(_DWORD *)((char *)v120 + v47 + 8) != *((_DWORD *)v120 + 4 * v48 + 2))
            {
              *((_OWORD *)v120 + ++v48) = *(_OWORD *)((char *)v120 + v47);
              unsigned int v46 = v121;
            }
            ++v45;
            v47 += 16;
          }
          while (v45 < v46);
          LODWORD(v45) = v48 + 1;
        }
        int64x2_t v49 = (char *)v120;
        if (HIDWORD(v121) < v45)
        {
          uint64_t v118 = 0;
          HIDWORD(v121) = realloc_array(v120, &v118, 16 * v45, 16 * v46, 16 * v46, 1) >> 4;
          int64x2_t v49 = (char *)v118;
          uint64_t v120 = v118;
          unsigned int v46 = v121;
        }
        if (v46 < v45)
        {
          unint64_t v50 = v45 - (unint64_t)v46;
          int64x2_t v51 = &v49[16 * v46];
          do
          {
            *(_OWORD *)int64x2_t v51 = xmmword_2140992A0;
            v51 += 16;
            --v50;
          }
          while (v50);
        }
        LODWORD(v121) = v45;
        mrec_qsort_r<FstSearchLateLatticeHashBackoffcmpTok>(&v49[16 * v13], v45 - v13, 16);
        uint64_t v52 = 16 * v13;
        int v53 = v114;
        if (*(_DWORD *)((char *)v120 + v52) + v10 < v114) {
          int v53 = *((_DWORD *)v120 + 4 * v13) + v10;
        }
        unsigned int v54 = v121;
        unsigned int v55 = *((_DWORD *)v1 + 5) + v13;
        if (v121 < v55) {
          unsigned int v55 = v121;
        }
        uint64_t v56 = *((void *)v1 + 20);
        *(_DWORD *)(v56 + 36 * v110 + 8) = v13;
        if (v13 >= v55)
        {
          unsigned int v60 = v13;
        }
        else
        {
          while (*(_DWORD *)((char *)v120 + v52) <= v53)
          {
            uint64_t v57 = *(unsigned int *)((char *)v120 + v52 + 12);
            if ((v57 & 0x80000000) == 0)
            {
              *(unsigned char *)(v129 + v57) = 1;
              int v58 = v57 == v113 ? 0 : v106 + v9;
              int v59 = v58 + v107 + *(_DWORD *)(v126[0] + 4 * v110);
              if (*(_DWORD *)(v126[0] + 4 * v57) > v59) {
                *(_DWORD *)(v126[0] + 4 * v57) = v59;
              }
            }
            ++v13;
            v52 += 16;
            if (v55 == v13)
            {
              unsigned int v13 = v55;
              break;
            }
          }
          uint64_t v56 = *v11;
          unsigned int v60 = *(_DWORD *)(*v11 + 36 * v110 + 8);
          unsigned int v54 = v121;
        }
        *(_DWORD *)(v56 + 36 * v110 + 12) = v13 - v60;
        if (HIDWORD(v121) < v13)
        {
          uint64_t v118 = 0;
          HIDWORD(v121) = realloc_array(v120, &v118, 16 * v13, 16 * v54, 16 * v54, 1) >> 4;
          uint64_t v120 = v118;
          unsigned int v54 = v121;
        }
        if (v54 < v13)
        {
          unint64_t v61 = v13 - (unint64_t)v54;
          int64x2_t v62 = (char *)v120 + 16 * v54;
          do
          {
            *v62++ = xmmword_2140992A0;
            --v61;
          }
          while (v61);
        }
        LODWORD(v121) = v13;
        if (!v110)
        {
LABEL_77:
          int64x2_t v63 = v120;
          int v64 = HIDWORD(v121);
          unsigned int v65 = *((_DWORD *)v1 + 42);
          goto LABEL_79;
        }
      }
      uint64_t v104 = v12;
      unsigned int v112 = v106 + v9;
      int v111 = v20 + v109->i32[0] - v108->i32[0];
      uint64_t v31 = 36 * v29;
      while (1)
      {
        if (v113 == v29) {
          unsigned int v32 = 0;
        }
        else {
          unsigned int v32 = v112;
        }
        uint64_t v33 = *((void *)v1 + 20);
        uint64_t v34 = (_OWORD *)(*((void *)v1 + 22) + 16 * *(unsigned int *)(v33 + v31 + 8));
        if ((int)(v111 + v32 + *(_DWORD *)v34) <= v114)
        {
          int v35 = (ArcGraph **)v1;
          int v36 = *(_DWORD *)(v33 + 36 * v110);
          int v37 = *(_DWORD *)(v33 + v31);
          BOOL v38 = v37 != 16777209
             && ArcGraph::lexToCWID(v35[5], *(_DWORD *)(v33 + v31), v3, v4, v5, v6, v7, v8) >> 25 != 126;
          if (v36 == 16777209)
          {
            unint64_t v1 = (FstSearchLateLatticeHash *)v35;
            if (v38) {
              goto LABEL_35;
            }
          }
          else
          {
            BOOL v39 = v36 == 16777214 || v37 == 16777213;
            unint64_t v1 = (FstSearchLateLatticeHash *)v35;
            if (!v39)
            {
LABEL_35:
              BOOL isLexPelPhnMatch = FstSearchLateLatticeHashBackoff::isLexPelPhnMatch((uint64_t)v1, v29, (uint64_t)&v122);
              unint64_t v1 = (FstSearchLateLatticeHash *)v35;
              if (isLexPelPhnMatch)
              {
                uint64_t v41 = v121;
                if (v121 == (unint64_t)HIDWORD(v121))
                {
                  DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v120, 1, 1);
                  uint64_t v41 = v121;
                  unint64_t v1 = (FstSearchLateLatticeHash *)v35;
                }
                *((_OWORD *)v120 + v41) = *v34;
                uint64_t v42 = v121;
                LODWORD(v121) = v121 + 1;
                uint64_t v43 = (int32x2_t *)((char *)v120 + 16 * v42);
                v43[1].i32[1] = v29;
                *uint64_t v43 = vadd_s32(vsub_s32(vadd_s32(*v109, vdup_n_s32(v32)), *v108), *v43);
                int v44 = *(_DWORD *)(*v105 + 36 * v110);
                if (v44 != 16777209) {
                  v43[1].i32[0] = v44 + 2 * v43[1].i32[0] + 1;
                }
              }
            }
          }
        }
        ++v29;
        v31 += 36;
        if (v29 >= *(unsigned int *)(v132 + 4 * v28))
        {
          unsigned int v30 = v121;
          uint64_t v12 = v104;
          int64x2_t v11 = v105;
          int v10 = v102;
          int v9 = v103;
          goto LABEL_42;
        }
      }
    }
    unsigned int v65 = 0;
    unsigned int v13 = 0;
    int v64 = 0;
    int64x2_t v63 = 0;
LABEL_79:
    int64x2_t v66 = (void *)*((void *)v1 + 22);
    *((void *)v1 + 22) = v63;
    uint64_t v120 = v66;
    int v67 = *((_DWORD *)v1 + 47);
    *((_DWORD *)v1 + 46) = v13;
    *((_DWORD *)v1 + 47) = v64;
    LODWORD(v121) = 0;
    HIDWORD(v121) = v67;
    unsigned int v119 = 0;
    uint64_t v118 = 0;
    if (v65)
    {
      uint64_t v68 = MemChunkAlloc(4 * v65, 0);
      uint64_t v118 = v68;
      unsigned int v119 = v65;
      if (*((_DWORD *)v1 + 42))
      {
        uint64_t v69 = 0;
        unint64_t v70 = 0;
        unsigned int v65 = 0;
        do
        {
          int64x2_t v71 = (long long *)(*v11 + v69);
          if (*((_DWORD *)v71 + 2) == -1)
          {
            *((_DWORD *)v68 + v70) = -1;
          }
          else
          {
            if (v70 != v65)
            {
              uint64_t v72 = *v11 + 36 * v65;
              long long v73 = *v71;
              long long v74 = v71[1];
              *(_WORD *)(v72 + 32) = *((_WORD *)v71 + 16);
              *(_OWORD *)uint64_t v72 = v73;
              *(_OWORD *)(v72 + 16) = v74;
            }
            *((_DWORD *)v68 + v70) = v65++;
          }
          ++v70;
          unint64_t v75 = *((unsigned int *)v1 + 42);
          v69 += 36;
        }
        while (v70 < v75);
        unsigned int v76 = *((_DWORD *)v1 + 43);
        if (v65 > v76)
        {
          DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)v11, v65 - v76, 0);
          LODWORD(v75) = *((_DWORD *)v1 + 42);
        }
        if (v75 < v65)
        {
          unint64_t v77 = v65 - (unint64_t)v75;
          int64x2_t v78 = (_WORD *)(*v11 + 36 * v75 + 32);
          do
          {
            *((_OWORD *)v78 - 2) = xmmword_2140992B0;
            *((_OWORD *)v78 - 1) = xmmword_2140992C0;
            *int64x2_t v78 = -2;
            v78 += 18;
            --v77;
          }
          while (v77);
        }
      }
      else
      {
        unsigned int v65 = 0;
      }
    }
    *((_DWORD *)v1 + 42) = v65;
    uint64_t v79 = *((unsigned int *)v1 + 46);
    if (v79)
    {
      int64x2_t v80 = v118;
      int64x2_t v81 = (_DWORD *)(*((void *)v1 + 22) + 12);
      do
      {
        uint64_t v82 = *v81;
        if ((v82 & 0x80000000) == 0) {
          _DWORD *v81 = v80[v82];
        }
        v81 += 4;
        --v79;
      }
      while (v79);
    }
    DgnArray<FstSearchLateLatticeHashBackoffActiveToken>::DgnArray(&v115, *((unsigned int *)v1 + 50));
    unint64_t v83 = *((unsigned int *)v1 + 50);
    if (v83)
    {
      uint64_t v84 = 0;
      unint64_t v85 = 0;
      unsigned int v86 = 0;
      int64x2_t v87 = v118;
      int64x2_t v88 = v115;
      do
      {
        uint64_t v89 = *((unsigned int *)v1 + 38);
        if (v86 < v89 && v85 == v89) {
          *((_DWORD *)v1 + 38) = v86;
        }
        int64x2_t v91 = (long long *)(*((void *)v1 + 24) + v84);
        uint64_t v92 = *((unsigned int *)v91 + 2);
        if (v92 == -1 || v87[v92] != -1)
        {
          __n128 v93 = (char *)&v88[6 * v86];
          long long v94 = *v91;
          *((void *)v93 + 2) = *((void *)v91 + 2);
          *(_OWORD *)__n128 v93 = v94;
          uint64_t v95 = *(unsigned int *)(*((void *)v1 + 24) + v84 + 8);
          if (v95 != -1) {
            LODWORD(v95) = v87[v95];
          }
          v88[6 * v86++ + 2] = v95;
          unint64_t v83 = *((unsigned int *)v1 + 50);
        }
        ++v85;
        v84 += 24;
      }
      while (v85 < v83);
    }
    else
    {
      unsigned int v86 = 0;
    }
    if (v86 < *((_DWORD *)v1 + 38)) {
      *((_DWORD *)v1 + 38) = v86;
    }
    LODWORD(v96) = v117;
    uint64_t v97 = (char *)v115;
    if (v117 < v86)
    {
      uint64_t v134 = 0;
      unint64_t v96 = realloc_array(v115, &v134, 24 * v86, 24 * v116, 24 * v116, 1) / 0x18;
      uint64_t v97 = (char *)v134;
    }
    if (v116 < v86)
    {
      unint64_t v98 = v86 - (unint64_t)v116;
      int v99 = &v97[24 * v116 + 16];
      do
      {
        *((void *)v99 - 2) = 0xFFFFFFFF00000000;
        *((_DWORD *)v99 - 2) = -1;
        *((_WORD *)v99 - 2) = -2;
        *(void *)int v99 = 0;
        v99 += 24;
        --v98;
      }
      while (v98);
    }
    int v100 = (void *)*((void *)v1 + 24);
    *((void *)v1 + 24) = v97;
    unint64_t v115 = v100;
    LODWORD(v100) = *((_DWORD *)v1 + 51);
    *((_DWORD *)v1 + 50) = v86;
    *((_DWORD *)v1 + 51) = v96;
    unsigned int v116 = 0;
    unsigned int v117 = v100;
    DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v115);
    DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v118);
    DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v120);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v126);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v127);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v129);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v131);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v132);
}

void sub_213E33330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&a25);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a27);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a31);
  DgnPrimFixArray<double>::~DgnPrimFixArray(v31 - 160);
  DgnPrimFixArray<double>::~DgnPrimFixArray(v31 - 144);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v31 - 128);
  DgnPrimFixArray<double>::~DgnPrimFixArray(v31 - 112);
  _Unwind_Resume(a1);
}

void FstSearchLateLatticeHash::printSize(FstSearchLateLatticeHash *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v116);
  if (v117) {
    uint64_t v16 = v116;
  }
  else {
    uint64_t v16 = &unk_214099300;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_214099300, a3, &unk_214099300, v16);
  DgnString::~DgnString((DgnString *)&v116);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_214099300);
  uint64_t v21 = (a3 + 1);
  uint64_t v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v116);
  if (v117) {
    uint64_t v27 = v116;
  }
  else {
    uint64_t v27 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v116);
  if (v117) {
    unsigned int v32 = v116;
  }
  else {
    unsigned int v32 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v116);
  if (v117) {
    int v37 = v116;
  }
  else {
    int v37 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v37, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v116);
  if (v117) {
    uint64_t v42 = v116;
  }
  else {
    uint64_t v42 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v42, 4, 4, 0);
  uint64_t v111 = a2;
  unsigned int v112 = a6;
  uint64_t v113 = a3;
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  uint64_t v43 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v43 = 16;
  }
  uint64_t v44 = *((unsigned int *)this + 42);
  uint64_t v45 = 24 * v44;
  if ((int)v44 <= 0) {
    uint64_t v45 = 0;
  }
  uint64_t v46 = v45 + v43;
  uint64_t v47 = v45 + v43 + 24 * (*((_DWORD *)this + 43) - v44);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v116);
  if (v117) {
    uint64_t v52 = v116;
  }
  else {
    uint64_t v52 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, v21, &unk_214099300, v22, v22, v52, v47, v46, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v47;
  *a5 += v46;
  uint64_t v53 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v53 = 16;
  }
  uint64_t v54 = *((unsigned int *)this + 46);
  uint64_t v55 = 16 * v54;
  if ((int)v54 <= 0) {
    uint64_t v55 = 0;
  }
  uint64_t v56 = v55 + v53;
  uint64_t v57 = v55 + v53 + 16 * (*((_DWORD *)this + 47) - v54);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v116);
  if (v117) {
    int64x2_t v62 = v116;
  }
  else {
    int64x2_t v62 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, v21, &unk_214099300, v22, v22, v62, v57, v56, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v57;
  *a5 += v56;
  uint64_t v63 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v63 = 16;
  }
  int v64 = *((_DWORD *)this + 50);
  uint64_t v65 = 22 * v64;
  if (v64 <= 0) {
    uint64_t v65 = 0;
  }
  uint64_t v66 = v65 + v63;
  uint64_t v67 = v65 + v63 + 22 * (*((_DWORD *)this + 51) - v64);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v116);
  if (v117) {
    uint64_t v72 = v116;
  }
  else {
    uint64_t v72 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, v21, &unk_214099300, v22, v22, v72, v67, v66, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v67;
  *a5 += v66;
  uint64_t v73 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v73 = 16;
  }
  int v74 = *((_DWORD *)this + 54);
  uint64_t v75 = 22 * v74;
  if (v74 <= 0) {
    uint64_t v75 = 0;
  }
  uint64_t v76 = v75 + v73;
  uint64_t v77 = v75 + v73 + 22 * (*((_DWORD *)this + 55) - v74);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v116);
  if (v117) {
    uint64_t v82 = v116;
  }
  else {
    uint64_t v82 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, v21, &unk_214099300, v22, v22, v82, v77, v76, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v77;
  *a5 += v76;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v116);
  if (v117) {
    int64x2_t v87 = v116;
  }
  else {
    int64x2_t v87 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v83, v84, v85, v86, v21, &unk_214099300, v22, v22, v87, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v116);
  if (v117) {
    uint64_t v92 = v116;
  }
  else {
    uint64_t v92 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, v21, &unk_214099300, v22, v22, v92, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v116);
  if (v117) {
    uint64_t v97 = v116;
  }
  else {
    uint64_t v97 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v93, v94, v95, v96, v21, &unk_214099300, v22, v22, v97, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  uint64_t v98 = sizeObject((uint64_t)this + 240, 0);
  uint64_t v99 = sizeObject((uint64_t)this + 240, 1);
  uint64_t v100 = sizeObject((uint64_t)this + 240, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v116);
  if (v117) {
    char v105 = v116;
  }
  else {
    char v105 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v101, v102, v103, v104, v21, &unk_214099300, v22, v22, v105, v98, v99, v100);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v98;
  *a5 += v99;
  *v112 += v100;
  unint64_t v114 = 0;
  unint64_t v115 = 0;
  SearchItf::printSize(this, v111, v21, &v115, &v114, &v114);
  *a4 += v115;
  *a5 += v114;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v116);
  if (v117) {
    uint64_t v110 = v116;
  }
  else {
    uint64_t v110 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v106, v107, v108, v109, v113, &unk_214099300, (35 - v113), (35 - v113), v110, *a4, *a5, *v112);
  DgnString::~DgnString((DgnString *)&v116);
}

void sub_213E33AFC(_Unwind_Exception *a1)
{
  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

BOOL FstSearchLateLatticeHash::findBestPath(uint64_t a1, uint64_t **a2, uint64_t a3, int *a4, uint64_t a5)
{
  unint64_t v10 = *(unsigned int *)(a1 + 168);
  if (v10) {
    BOOL v11 = *(_DWORD *)(a3 + 8) == 0;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    *(void *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v10;
  }
  if (v10) {
    BOOL v12 = *((_DWORD *)a2 + 2) == 0;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12)
  {
    *a2 = MemChunkAlloc(v10, 0);
    *((_DWORD *)a2 + 2) = v10;
  }
  else if (!v10)
  {
    goto LABEL_16;
  }
  uint64_t v13 = 0;
  do
  {
    *((unsigned char *)*a2 + v13) = 0;
    *(unsigned char *)(*(void *)a3 + v13++) = 0;
  }
  while (v10 != v13);
LABEL_16:
  unsigned int BestTrace = FstSearchLateLatticeHashBackoff::getBestTrace(a1, a2, (void *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1)
  {
    int v20 = 1879048192;
  }
  else
  {
    uint64_t v15 = *(void *)(a1 + 160);
    uint64_t v16 = v15 + 36 * BestTrace;
    unsigned int v18 = *(_DWORD *)(v16 + 4);
    uint64_t v17 = (int *)(v16 + 4);
    int v19 = v17[3] + *(_DWORD *)(*(void *)(a1 + 88) + 4 * v18);
    *a4 = v19;
    int v20 = 1879048192;
    if (v19 != 1879048192)
    {
      int v21 = *(_DWORD *)(a1 + 168);
      if (v21)
      {
        unsigned int v22 = v21 - 1;
        int v23 = 1879048192;
        int v24 = *v17;
        do
        {
          uint64_t v25 = v22;
          if (*(_DWORD *)(v15 + 36 * v22 + 4) == v24
            && *(_DWORD *)(v15 + 36 * v22) == 16777213
            && !*((unsigned char *)*a2 + v22))
          {
            *((unsigned char *)*a2 + v22) = 2;
            *(unsigned char *)(*(void *)a3 + v22) = 1;
            uint64_t v15 = *(void *)(a1 + 160);
            if (v23 >= *(_DWORD *)(*(void *)(a1 + 176) + 16 * *(unsigned int *)(v15 + 36 * v22 + 8))
                      + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v15 + 36 * v22 + 4)))
              int v23 = *(_DWORD *)(*(void *)(a1 + 176) + 16 * *(unsigned int *)(v15 + 36 * v22 + 8))
                  + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v15 + 36 * v22 + 4));
          }
          --v22;
        }
        while (v25);
        int v19 = *a4;
        unsigned int v26 = *(_DWORD *)(a1 + 168);
      }
      else
      {
        unsigned int v26 = 0;
        int v23 = 1879048192;
      }
      int v27 = *(_DWORD *)(a1 + 28);
      BOOL v28 = __OFSUB__(v19, v23);
      int v29 = v19 - v23;
      if ((v29 < 0) ^ v28 | (v29 == 0)) {
        int v30 = 0;
      }
      else {
        int v30 = v29;
      }
      unsigned int v31 = *(_DWORD *)(a5 + 12);
      unsigned int v32 = v26;
      if (v26 > v31)
      {
        DgnPrimArray<unsigned int>::reallocElts(a5, v26 - v31, 0);
        unsigned int v32 = *(_DWORD *)(a1 + 168);
      }
      *(_DWORD *)(a5 + 8) = v26;
      int v20 = *a4;
      if (v32)
      {
        uint64_t v33 = 0;
        unint64_t v34 = 0;
        int v35 = v20 - (v30 + v27) + *(_DWORD *)(a1 + 12);
        do
        {
          uint64_t v36 = *a2;
          int v37 = *((unsigned __int8 *)*a2 + v34);
          if (v37 == 2)
          {
            uint64_t v38 = *(void *)a5;
            if (*(_DWORD *)(*(void *)(a1 + 176) + 16 * *(unsigned int *)(*(void *)(a1 + 160) + v33 + 8))
               + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(*(void *)(a1 + 160) + v33 + 4)) <= v35)
            {
              *(_DWORD *)(v38 + 4 * v34) = v30 + v27;
              *((unsigned char *)v36 + v34) = 1;
            }
            else
            {
              *(_DWORD *)(v38 + 4 * v34) = 1879048192;
              *((unsigned char *)v36 + v34) = 0;
            }
          }
          else if (v37 == 1)
          {
            *(_DWORD *)(*(void *)a5 + 4 * v34) = 0;
          }
          else
          {
            *(_DWORD *)(*(void *)a5 + 4 * v34) = 1879048192;
          }
          ++v34;
          v33 += 36;
        }
        while (v34 < *(unsigned int *)(a1 + 168));
        int v20 = *a4;
      }
    }
  }
  return v20 != 1879048192;
}

uint64_t FstSearchLateLatticeHash::buildWordLattice(uint64_t a1, uint64_t *a2, void *a3, void *a4, char a5)
{
  uint64_t v28 = 0;
  int v29 = 0;
  int v30 = 0;
  uint64_t v27 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v26, *(unsigned int *)(a1 + 168));
  int v9 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v9, 0, 128);
  v9[4] = (uint64_t)a2;
  FstSearchLateLatticeHashBackoff::createLatticeNodes(a1, &v29, (uint64_t)&v27, (uint64_t)a2, v26, a3, a4);
  uint64_t v23 = (uint64_t)v9;
  uint64_t v24 = *(unsigned int *)(a1 + 168);
  if (v24)
  {
    uint64_t v11 = 0;
    int v12 = v28;
    do
    {
      if (*(unsigned char *)(*a3 + v11))
      {
        uint64_t v13 = *(void *)(a1 + 160);
        if ((*(_DWORD *)(v13 + 36 * v11) - 16777209) >= 2 && *(int *)(v13 + 36 * v11 + 12) >= 1)
        {
          int v14 = *(_DWORD *)(v13 + 36 * v11 + 8);
          do
          {
            uint64_t v15 = *(void *)(a1 + 176) + 16 * v14;
            uint64_t v16 = *(unsigned int *)(v15 + 12);
            if (v16 == -1) {
              unsigned int v17 = 0;
            }
            else {
              unsigned int v17 = v12 - *((_DWORD *)v29 + v16);
            }
            uint64_t v18 = *(unsigned int *)(v27 + 4 * v17);
            if (*(unsigned char *)(*a4 + v11)) {
              FstSearchLateLatticeHash::createLatticeLink(a1, v11, (int *)v15, 0xFFFFFFFFLL, v18, (const WordLatticeLC *)*(unsigned int *)(v27 + 4 * (v12 - *((_DWORD *)v29 + v11))), a2, v10, a5);
            }
            uint64_t v19 = v26[0];
            if (*(_DWORD *)(v26[0] + 16 * v11 + 8))
            {
              unint64_t v20 = 0;
              do
              {
                uint64_t v21 = *(unsigned int *)(*(void *)(v19 + 16 * v11) + 4 * v20);
                FstSearchLateLatticeHash::createLatticeLink(a1, v11, (int *)v15, v21, v18, (const WordLatticeLC *)*(unsigned int *)(v27 + 4 * (v12 - *((_DWORD *)v29 + v21))), a2, v10, a5);
                ++v20;
                uint64_t v19 = v26[0];
              }
              while (v20 < *(unsigned int *)(v26[0] + 16 * v11 + 8));
            }
            ++v14;
          }
          while (v14 < *(_DWORD *)(*(void *)(a1 + 160) + 36 * v11 + 12)
                      + *(_DWORD *)(*(void *)(a1 + 160) + 36 * v11 + 8));
        }
      }
      ++v11;
    }
    while (v11 != v24);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>(v23);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v26);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v27);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v29);
}

void sub_213E34030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearchLateLatticeHash::createLatticeLink(uint64_t a1, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, const WordLatticeLC *a6, uint64_t *a7, uint64_t a8, char a9)
{
  unsigned int v11 = a5;
  unsigned int v12 = a4;
  uint64_t v16 = *(void *)(a1 + 160);
  if ((a4 & 0x80000000) != 0 || (uint64_t v17 = v16 + 36 * a4, v18 = *(_DWORD *)(v17 + 12), v18 < 1))
  {
    unsigned int v22 = 0;
  }
  else
  {
    unsigned int v19 = *(_DWORD *)(v17 + 8);
    int v20 = v18 + v19;
    do
    {
      uint64_t v21 = *(void *)(a1 + 176);
      if (*(_DWORD *)(v21 + 16 * v19 + 12) == a2) {
        unsigned int v22 = (_DWORD *)(v21 + 16 * v19);
      }
      else {
        unsigned int v22 = 0;
      }
      ++v19;
    }
    while ((int)v19 < v20 && !v22);
  }
  ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *(_DWORD *)(v16 + 36 * a2), (uint64_t)a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8, (uint64_t)v46);
  int v23 = a3[1];
  if (v22)
  {
    v23 += v22[1];
    int v24 = *v22 + *a3;
  }
  else
  {
    int v24 = *a3;
  }
  if (v46[0] >> 25 == 126)
  {
    int v25 = 0;
    int v26 = v23;
  }
  else
  {
    int v25 = *(_DWORD *)(a1 + 136);
    int v26 = v23 - v25;
  }
  int v27 = v24 - v23;
  if ((v12 & 0x80000000) != 0)
  {
    int v28 = 0;
  }
  else
  {
    int v28 = *(_DWORD *)(a1 + 140);
    v26 -= v28;
  }
  int v40 = v26;
  uint64_t v41 = 0;
  int v42 = v25;
  int v43 = v27;
  int v44 = 0;
  int v45 = v28;
  unsigned int v29 = a3[3];
  uint64_t v30 = *(void *)(a1 + 160);
  if (v29 == -1)
  {
    int v32 = 0;
    if (a9) {
      goto LABEL_26;
    }
  }
  else
  {
    int v31 = *(_DWORD *)(v30 + 36 * v29 + 4);
    if (a9)
    {
      if (v31 >= 1) {
        --v31;
      }
      int v32 = (v31 >> 1) + 1;
LABEL_26:
      int v33 = *(_DWORD *)(v30 + 36 * a2 + 4);
      if (v33 >= 1) {
        --v33;
      }
      int v34 = v33 >> 1;
      int v35 = v34 - v32 + 1;
      if ((v12 & 0x80000000) == 0)
      {
        int v36 = *(_DWORD *)(v30 + 36 * v12 + 4);
        if (v36 >= 1) {
          --v36;
        }
        int v37 = v36 >> 1;
        goto LABEL_35;
      }
LABEL_36:
      int v38 = 0;
      goto LABEL_37;
    }
    int v32 = v31 + 1;
  }
  int v34 = *(_DWORD *)(v30 + 36 * a2 + 4);
  int v35 = v34 - v32 + 1;
  if ((v12 & 0x80000000) != 0) {
    goto LABEL_36;
  }
  int v37 = *(_DWORD *)(v30 + 36 * v12 + 4);
LABEL_35:
  int v38 = v37 - v34;
LABEL_37:
  WordLatticeLC::WordLatticeLC((uint64_t)v39, (uint64_t)v46, v32, v35, v38, (uint64_t)&v40);
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v11, a6, (WordLatticeLC *)v39);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v39);
}

void sub_213E3427C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLateLatticeHash::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(void *)(this + 112) = a2;
  if (*(unsigned char *)(this + 356)) {
    return MiniFst::beginTopFstSyncRecog(this + 240);
  }
  return this;
}

uint64_t FstSearchLateLatticeHash::endTopRecSyncRecog(FstSearchLateLatticeHash *this)
{
  VirtMap::setEmpty(*((void *)this + 14));
  uint64_t result = *((void *)this + 14);
  *((void *)this + 14) = 0;
  return result;
}

uint64_t FstSearchLateLatticeHash::getBestExitScore(FstSearchLateLatticeHash *this)
{
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  *((_DWORD *)this + 57) = -1;
  unint64_t v1 = *((unsigned int *)this + 38);
  unint64_t v2 = *((unsigned int *)this + 50);
  if (v1 >= v2) {
    goto LABEL_16;
  }
  uint64_t v4 = 0;
  unsigned int v5 = 0;
  uint64_t v6 = 24 * v1;
  do
  {
    uint64_t v7 = *((void *)this + 24) + v6;
    if (*(_DWORD *)(*((void *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      unsigned int v8 = *(_DWORD *)(v7 + 8);
      if (v8 != -1 && *(_DWORD *)(*((void *)this + 20) + 36 * v8 + 4) == *((_DWORD *)this + 56))
      {
        if (v5 == HIDWORD(v18))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v17, 1, 1);
          unsigned int v5 = v18;
          uint64_t v4 = v17;
        }
        v4[v5] = v8;
        unsigned int v5 = v18 + 1;
        LODWORD(v18) = v18 + 1;
        unint64_t v2 = *((unsigned int *)this + 50);
      }
    }
    ++v1;
    v6 += 24;
  }
  while (v1 < v2);
  if (v5)
  {
    uint64_t v9 = *((void *)this + 20);
    uint64_t v10 = v5;
    int v11 = 1879048192;
    do
    {
      unsigned int v13 = *v4++;
      unsigned int v12 = v13;
      int v14 = *(_DWORD *)(v9 + 36 * v13 + 16);
      if (v11 > v14)
      {
        *((_DWORD *)this + 57) = *(_DWORD *)(v9 + 36 * v12 + 20);
        int v11 = v14;
      }
      --v10;
    }
    while (v10);
  }
  else
  {
LABEL_16:
    int v11 = 1879048192;
  }
  if (v11 >= 20000) {
    uint64_t v15 = 20000;
  }
  else {
    uint64_t v15 = v11;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v17);
  return v15;
}

void sub_213E34428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t FstSearchLateLatticeHash::getBestScoreMaybeUpdateFstNode(FstSearchLateLatticeHash *this, Node *a2)
{
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v2 = *((unsigned int *)this + 50);
  if (v2)
  {
    uint64_t v3 = (int *)*((void *)this + 24);
    __int16 v4 = -1;
    int v5 = 1879048192;
    uint64_t v6 = v3;
    do
    {
      int v8 = *v6;
      v6 += 6;
      int v7 = v8;
      if (v5 > v8)
      {
        __int16 v4 = *((_WORD *)v3 + 6);
        int v5 = v7;
      }
      uint64_t v3 = v6;
      --v2;
    }
    while (v2);
    uint64_t v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000) {
        uint64_t v9 = 20000;
      }
      else {
        uint64_t v9 = v5;
      }
    }
  }
  else
  {
    uint64_t v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

uint64_t FstSearchLateLatticeHash::seedTheory(FstSearchLateLatticeHash *this, int a2, int a3, int a4, SearchStats *a5)
{
  if (a4 == -2)
  {
    int v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    unsigned int v11 = *((_DWORD *)this + 42);
    if (v11 == *((_DWORD *)this + 43))
    {
      DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)this + 160, 1, 1);
      unsigned int v11 = *((_DWORD *)this + 42);
    }
    uint64_t v12 = *((void *)this + 20) + 36 * v11;
    *(_DWORD *)uint64_t v12 = a4;
    *(_DWORD *)(v12 + 4) = a3;
    *(void *)(v12 + 8) = 0xFFFFFFFFLL;
    *(_DWORD *)(v12 + 16) = a2;
    *(void *)(v12 + 20) = 0xFFFFFFFFLL;
    *(_DWORD *)(v12 + 28) = 0;
    *(_WORD *)(v12 + 32) = -2;
    int v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  int v13 = *(_DWORD *)(*((void *)this + 5) + 144);
  unsigned int v14 = *((_DWORD *)this + 50);
  if (v14 == *((_DWORD *)this + 51))
  {
    DgnArray<CWIDAC>::reallocElts((uint64_t)this + 192, 1, 1);
    unsigned int v14 = *((_DWORD *)this + 50);
  }
  uint64_t v15 = *((void *)this + 24) + 24 * v14;
  *(_DWORD *)uint64_t v15 = a2;
  *(_DWORD *)(v15 + 4) = v13;
  *(_DWORD *)(v15 + 8) = v9;
  *(_WORD *)(v15 + 12) = -2;
  *(void *)(v15 + 16) = 0;
  LODWORD(v15) = *((_DWORD *)this + 50) + 1;
  *((_DWORD *)this + 50) = v15;
  *((_DWORD *)this + 38) = v15;

  return FstSearchLateLatticeHashBackoff::propagateNulls((uint64_t)this, 20000, a3, a5);
}

uint64_t FstSearchLateLatticeHash::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(unsigned int *)(result + 228);
  if (v8 != -1)
  {
    uint64_t v9 = result;
    uint64_t v10 = (unsigned int *)(*(void *)(result + 160) + 36 * v8);
    for (i = v10[5]; i != -1; uint64_t v8 = v16)
    {
      uint64_t v16 = i;
      uint64_t result = *(void *)(v9 + 40);
      if (*v10 == 16777209)
      {
        int v17 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        uint64_t result = ArcGraph::lexToCWID((ArcGraph *)result, *v10, a3, (uint64_t)a4, a5, a6, a7, a8);
        int v17 = result;
      }
      uint64_t v18 = *(unsigned int *)(a2 + 8);
      if (v18 == *(_DWORD *)(a2 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        uint64_t v18 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(void *)a2 + 4 * v18) = v17;
      ++*(_DWORD *)(a2 + 8);
      uint64_t v19 = *(unsigned int *)(a6 + 8);
      if (v19 == *(_DWORD *)(a6 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        uint64_t v19 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(void *)a6 + 4 * v19) = v8;
      ++*(_DWORD *)(a6 + 8);
      uint64_t v20 = *(void *)(v9 + 160);
      int v21 = *(_DWORD *)(v20 + 36 * v8 + 4);
      uint64_t v22 = *(unsigned int *)(a3 + 8);
      if (v22 == *(_DWORD *)(a3 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        uint64_t v22 = *(unsigned int *)(a3 + 8);
        uint64_t v20 = *(void *)(v9 + 160);
      }
      *(_DWORD *)(*(void *)a3 + 4 * v22) = v21;
      ++*(_DWORD *)(a3 + 8);
      int v23 = *(_DWORD *)(v20 + 36 * v8 + 16);
      uint64_t v24 = *(unsigned int *)(a5 + 8);
      if (v24 == *(_DWORD *)(a5 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        uint64_t v24 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(void *)a5 + 4 * v24) = v23;
      ++*(_DWORD *)(a5 + 8);
      uint64_t v10 = (unsigned int *)(*(void *)(v9 + 160) + 36 * v16);
      uint64_t i = v10[5];
    }
    *a4 = *v10;
  }
  return result;
}

void FstSearchLateLatticeHash::checkSearchParametersValidityForArcGraph(FstSearchLateLatticeHash *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *((void *)this + 5);
  if (*(unsigned char *)(v8 + 178))
  {
    int v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(unsigned char *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    }
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    }
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(void *)(**(void **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((void *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if (a2)
      {
        if (!*(unsigned char *)(v8 + 203)) {
          return;
        }
      }
      else if (*(unsigned char *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(unsigned char *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

uint64_t FstSearchLateLatticeHash::makePartialResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    uint64_t v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(void *)a2 + v9))(*(void *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  unsigned int BestTrace = FstSearchLateLatticeHashBackoff::getBestTrace(a1, 0, 0, 1);
  if (BestTrace == -1) {
    return 1879048192;
  }
  unsigned int v15 = BestTrace;
  FstSearchLateLatticeHashBackoff::getHistory(a1, BestTrace, a3, a4, v11, v12, v13, v14);
  memset(v25, 0, sizeof(v25));
  int v26 = 0;
  if (*(_DWORD *)(a3 + 8))
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    int v18 = 0;
    do
    {
      uint64_t v19 = *(void *)a3 + v16;
      int v20 = *(_DWORD *)(v19 + 28);
      WordLatticeLC::WordLatticeLC((uint64_t)v24, v19, v18, *(_DWORD *)(v19 + 24) - v18, v20 - *(_DWORD *)(v19 + 24), (uint64_t)v25);
      uint64_t v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(void *)a2 + 112 * v21), (const WordLatticeLC *)v24);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v24);
      ++v17;
      v16 += 32;
      int v18 = v20;
    }
    while (v17 < *(unsigned int *)(a3 + 8));
  }
  uint64_t v22 = *(void *)(a1 + 160) + 36 * v15;
  return (*(_DWORD *)(v22 + 16) + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_213E34B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t FstSearchLatticeHashBackoff::generateNullTraces(unint64_t this, int a2, unsigned int a3)
{
  unint64_t v3 = *(unsigned int *)(this + 200);
  if (v3 > a3)
  {
    uint64_t v5 = this;
    uint64_t v6 = this + 160;
    uint64_t v7 = this + 176;
    unint64_t v8 = a3;
    uint64_t v9 = *(void *)(this + 192);
    uint64_t v10 = 28 * a3;
    do
    {
      if ((*(_DWORD *)(v9 + v10 + 24) & 0x80000000) == 0)
      {
        int v11 = *(_DWORD *)(v5 + 184);
        uint64_t v12 = *(unsigned int *)(v5 + 168);
        if (v12 == *(_DWORD *)(v5 + 172))
        {
          this = DgnArray<DgnPrimArray<double>>::reallocElts(v6, 1, 1);
          uint64_t v12 = *(unsigned int *)(v5 + 168);
        }
        uint64_t v13 = (_DWORD *)(*(void *)(v5 + 160) + 16 * v12);
        *uint64_t v13 = 16777210;
        v13[1] = a2;
        v13[2] = v11;
        v13[3] = 0;
        int v14 = *(_DWORD *)(v5 + 168) + 1;
        *(_DWORD *)(v5 + 168) = v14;
        unsigned int v15 = *(_DWORD *)(v5 + 184);
        if (v15 == *(_DWORD *)(v5 + 188))
        {
          this = DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts(v7, 1, 1);
          unsigned int v15 = *(_DWORD *)(v5 + 184);
          int v14 = *(_DWORD *)(v5 + 168);
        }
        uint64_t v16 = *(void *)(v5 + 176) + 20 * v15;
        *(_DWORD *)(v5 + 184) = v15 + 1;
        uint64_t v9 = *(void *)(v5 + 192);
        uint64_t v17 = v9 + v10;
        *(_DWORD *)uint64_t v16 = *(_DWORD *)(v9 + v10);
        *(void *)&long long v18 = *(void *)(v9 + v10 + 16);
        DWORD2(v18) = *(_DWORD *)(v9 + v10 + 8);
        HIDWORD(v18) = *(_DWORD *)(v9 + v10 + 24);
        *(_OWORD *)(v16 + 4) = v18;
        *(_DWORD *)(v17 + 24) = -1;
        *(_DWORD *)(v17 + 8) = v14 - 1;
        unint64_t v3 = *(unsigned int *)(v5 + 200);
      }
      ++v8;
      v10 += 28;
    }
    while (v8 < v3);
  }
  return this;
}

int64x2_t FstSearchLatticeHashBackoff::advanceDeltas(FstSearchLatticeHashBackoff *this, int a2, int a3, SearchStats *a4, int a5)
{
  v96[0] = a2;
  int64x2_t v94 = 0u;
  int64x2_t v95 = 0u;
  SnapTime::recordTime((SnapTime *)&v94, 1, 0, 0, 0);
  *(void *)uint64_t v93 = 0xFFFFFFFF00000000;
  *(_DWORD *)&v93[8] = -1;
  *(_WORD *)&v93[12] = -2;
  *(void *)&v93[16] = 0;
  *(_DWORD *)&v93[24] = -1;
  *((_DWORD *)this + 58) = a3;
  int v10 = *((_DWORD *)this + 2);
  uint64_t v73 = (int *)((char *)this + 232);
  unint64_t v11 = *((unsigned int *)this + 50);
  if (v11)
  {
    int v71 = a5;
    uint64_t v72 = a4;
    for (unint64_t i = 0; i < v11; ++i)
    {
      uint64_t v13 = *((void *)this + 24);
      uint64_t v14 = v13 + 28 * i;
      uint64_t v15 = *(unsigned int *)(v14 + 4);
      uint64_t v16 = *((void *)this + 5);
      if (*(_DWORD *)(v16 + 160) != v15)
      {
        if (*(_DWORD *)(v16 + 140) > (int)v15)
        {
          int v17 = *((_DWORD *)this + 19) + *((_DWORD *)this + 58) >= 5000
              ? 5000
              : *((_DWORD *)this + 19) + *((_DWORD *)this + 58);
          int ScoreAllowBackoff_updateNodeInSequence = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(v13 + 28 * i + 12), *(_DWORD *)v14, v17);
          int v19 = *((_DWORD *)this + 58);
          if (ScoreAllowBackoff_updateNodeInSequence - v10 <= v19)
          {
            if (v19 > ScoreAllowBackoff_updateNodeInSequence) {
              *uint64_t v73 = ScoreAllowBackoff_updateNodeInSequence;
            }
            int v20 = (_OWORD *)(*((void *)this + 24) + 28 * i);
            long long v21 = *(_OWORD *)((char *)v20 + 12);
            *(_OWORD *)uint64_t v93 = *v20;
            *(_OWORD *)&v93[12] = v21;
            *(_DWORD *)uint64_t v93 = ScoreAllowBackoff_updateNodeInSequence;
            FstSearchLatticeHashBackoff::maybeInsertHashedToken((uint64_t)this, (int *)v93);
          }
        }
        unsigned int v22 = v15;
        do
        {
          uint64_t v23 = *((void *)this + 5);
          uint64_t v24 = *(void *)(v23 + 152);
          unsigned int v25 = *(_DWORD *)(v24 + 4 * v22);
          int v26 = *(_DWORD *)(v24 + 4 * (v22 + 1));
          int v27 = *(_DWORD *)(v23 + 140);
          if (v27 <= v26)
          {
            if (v27 <= (int)v15 && *((unsigned char *)this + 356) != 0)
            {
              unsigned int v35 = (v25 & 0xFFFFF) <= 0xFFFF3 ? v25 & 0xFFFFF : v25 & 0xFFFFF | 0xF00000;
              if (v35 != 16777210)
              {
                DgnString::DgnString((DgnString *)&v90);
                ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v35, (DgnString *)&v90, v36, v37, v38, v39, v40);
                int v45 = &unk_214099300;
                if (v90.i32[2]) {
                  int v45 = (void *)v90.i64[0];
                }
                xprintf("Seed from state %d score %d trace %d, %s\n", v41, v42, v43, v44, v15, *(unsigned int *)(*((void *)this + 24) + 28 * i), *(unsigned int *)(*((void *)this + 24) + 28 * i + 8), v45);
                MiniFst::seed((uint64_t)this + 240, *(_DWORD *)(*((void *)this + 24) + 28 * i), *(_DWORD *)(*((void *)this + 24) + 28 * i + 20), *(_DWORD *)(*((void *)this + 24) + 28 * i + 8), v26);
                DgnString::~DgnString((DgnString *)&v90);
              }
            }
          }
          else
          {
            int v28 = (v25 >> 20) & 0x3FF;
            if (*((_DWORD *)this + 19) + *((_DWORD *)this + 58) >= 5000) {
              int v29 = 5000;
            }
            else {
              int v29 = *((_DWORD *)this + 19) + *((_DWORD *)this + 58);
            }
            int v30 = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), (unsigned __int16)*(_DWORD *)(v24 + 4 * v22), *(_DWORD *)(*((void *)this + 24) + 28 * i) + v28, v29);
            int v31 = *((_DWORD *)this + 58);
            if (v30 - v10 <= v31)
            {
              if (v31 > v30) {
                *uint64_t v73 = v30;
              }
              int v32 = (_OWORD *)(*((void *)this + 24) + 28 * i);
              long long v33 = *(_OWORD *)((char *)v32 + 12);
              *(_OWORD *)uint64_t v93 = *v32;
              *(_OWORD *)&v93[12] = v33;
              *(_DWORD *)uint64_t v93 = v30;
              *(_DWORD *)&v93[4] = v26;
              *(_WORD *)&v93[12] = v25;
              *(_DWORD *)&v93[16] = DWORD1(v33) + v28;
              FstSearchLatticeHashBackoff::maybeInsertHashedToken((uint64_t)this, (int *)v93);
            }
          }
          v22 += 2;
        }
        while ((v25 & 0x80000000) == 0);
        unint64_t v11 = *((unsigned int *)this + 50);
      }
    }
    a3 = *v73;
    a4 = v72;
    a5 = v71;
  }
  int v92 = a3 + v10;
  if (*((unsigned char *)this + 356)) {
    MiniFst::updateFrame((char *)this + 240, v73, v10, a2);
  }
  int64x2_t v90 = 0u;
  int64x2_t v91 = 0u;
  SnapTime::recordTime((SnapTime *)&v90, 1, 0, 0, 0);
  int64x2_t v90 = vsubq_s64(v90, v94);
  int64x2_t v91 = vsubq_s64(v91, v95);
  uint64_t v46 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v47 = vaddq_s64(v46[1], v91);
  int64x2_t *v46 = vaddq_s64(*v46, v90);
  v46[1] = v47;
  int64x2_t v88 = 0u;
  int64x2_t v89 = 0u;
  SnapTime::recordTime((SnapTime *)&v88, 1, 0, 0, 0);
  FstSearchLatticeHashBackoff::applyCutoffOnEmitting((uint64_t)this, *((_DWORD *)this + 4), &v92);
  int64x2_t v86 = 0u;
  int64x2_t v87 = 0u;
  SnapTime::recordTime((SnapTime *)&v86, 1, 0, 0, 0);
  int64x2_t v48 = vsubq_s64(v86, v88);
  uint64_t v49 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v50 = v49[3];
  int64x2_t v51 = vaddq_s64(v49[2], v48);
  int64x2_t v86 = v48;
  int64x2_t v87 = vsubq_s64(v87, v89);
  int64x2_t v52 = vaddq_s64(v50, v87);
  v49[2] = v51;
  void v49[3] = v52;
  int64x2_t v84 = 0u;
  int64x2_t v85 = 0u;
  SnapTime::recordTime((SnapTime *)&v84, 1, 0, 0, 0);
  uint64_t v53 = *((void *)this + 24);
  uint64_t v54 = *((void *)this + 26);
  *((void *)this + 24) = v54;
  *((void *)this + 26) = v53;
  LODWORD(v53) = *((_DWORD *)this + 51);
  uint64_t v55 = *((void *)this + 27);
  *((void *)this + 25) = v55;
  *((_DWORD *)this + 54) = 0;
  *((_DWORD *)this + 55) = v53;
  unint64_t v56 = *((unsigned int *)this + 6);
  if (v56 && v55 && v56 < v55) {
    mrec_nth_element<FstSearchLatticeHashBackoffcmpTok>(v54, v56, v55);
  }
  FstSearchLatticeHashBackoff::generateNullTraces((unint64_t)this, a2, 0);
  int64x2_t v82 = 0u;
  int64x2_t v83 = 0u;
  SnapTime::recordTime((SnapTime *)&v82, 1, 0, 0, 0);
  int64x2_t v57 = vsubq_s64(v82, v84);
  uint64_t v58 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v59 = v58[5];
  int64x2_t v60 = vaddq_s64(v58[4], v57);
  int64x2_t v82 = v57;
  int64x2_t v83 = vsubq_s64(v83, v85);
  int64x2_t v61 = vaddq_s64(v59, v83);
  v58[4] = v60;
  v58[5] = v61;
  int64x2_t v80 = 0u;
  int64x2_t v81 = 0u;
  SnapTime::recordTime((SnapTime *)&v80, 1, 0, 0, 0);
  VirtMap::setEmpty(*((void *)this + 14));
  int64x2_t v78 = 0u;
  int64x2_t v79 = 0u;
  SnapTime::recordTime((SnapTime *)&v78, 1, 0, 0, 0);
  int64x2_t v62 = vsubq_s64(v78, v80);
  uint64_t v63 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v64 = v63[9];
  int64x2_t v65 = vaddq_s64(v63[8], v62);
  int64x2_t v78 = v62;
  int64x2_t v79 = vsubq_s64(v79, v81);
  int64x2_t v66 = vaddq_s64(v64, v79);
  v63[8] = v65;
  v63[9] = v66;
  int64x2_t v76 = 0u;
  int64x2_t v77 = 0u;
  SnapTime::recordTime((SnapTime *)&v76, 1, 0, 0, 0);
  *((_DWORD *)this + 54) = 0;
  uint64_t v67 = *((unsigned int *)this + 50);
  *((_DWORD *)this + 38) = v67;
  if (a4)
  {
    *((void *)a4 + 2) += v67;
    if (*((_DWORD *)a4 + 2) > v67) {
      LODWORD(v67) = *((_DWORD *)a4 + 2);
    }
    *((_DWORD *)a4 + 2) = v67;
  }
  if (*((unsigned char *)this + 356)) {
    FstSearchLatticeHashBackoff::seedFromMiniFst((uint64_t)this, v96);
  }
  if (a5) {
    FstSearchLatticeHashBackoff::propagateNulls(this, v92, a2, a4);
  }
  *((_DWORD *)this + 56) = a2;
  int64x2_t v74 = 0u;
  int64x2_t v75 = 0u;
  SnapTime::recordTime((SnapTime *)&v74, 1, 0, 0, 0);
  uint64_t v68 = (int64x2_t *)*((void *)this + 13);
  int64x2_t result = vaddq_s64(v68[6], vsubq_s64(v74, v76));
  int64x2_t v70 = vaddq_s64(v68[7], vsubq_s64(v75, v77));
  v68[6] = result;
  v68[7] = v70;
  return result;
}

void sub_213E35254(_Unwind_Exception *exception_object)
{
}

__n128 FstSearchLatticeHashBackoff::maybeInsertHashedToken(uint64_t a1, int *a2)
{
  unint64_t v4 = a2[1];
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = v4 & 0x3F;
  uint64_t v7 = *(uint64_t **)(a1 + 112);
  uint64_t v8 = v7[2];
  uint64_t v9 = *(void **)(v8 + 8 * v5);
  if (!v9)
  {
    uint64_t v10 = *((unsigned int *)v7 + 12);
    uint64_t v11 = *((unsigned int *)v7 + 13);
    uint64_t v12 = *v7;
    if (v10 >= v11)
    {
      uint64_t v13 = v12 + 16 * v11;
      int v15 = *(_DWORD *)(v13 + 8);
      uint64_t v14 = (_DWORD *)(v13 + 8);
      if (!v15)
      {
        *(void *)(v12 + 16 * v11) = MemChunkAlloc(0x100uLL, 0);
        *uint64_t v14 = 64;
        uint64_t v12 = *v7;
        uint64_t v8 = v7[2];
        LODWORD(v10) = *((_DWORD *)v7 + 12);
        uint64_t v11 = *((unsigned int *)v7 + 13);
      }
      *(void *)(v8 + 8 * v5) = v12 + 16 * v11;
      *((_DWORD *)v7 + 13) = v11 + 1;
    }
    else
    {
      *(void *)(v8 + 8 * v5) = v12 + 16 * v10;
    }
    *((_DWORD *)v7 + 12) = v10 + 1;
    uint64_t v16 = *(void *)(v7[2] + 8 * v5);
    memset(*(void **)v16, 255, 4 * *(unsigned int *)(v16 + 8));
    unsigned int v18 = *((_DWORD *)v7 + 10);
    if (v18 == *((_DWORD *)v7 + 11))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)(v7 + 4), 1, 1);
      unsigned int v18 = *((_DWORD *)v7 + 10);
    }
    *(_DWORD *)(v7[4] + 4 * v18) = v5;
    ++*((_DWORD *)v7 + 10);
    uint64_t v9 = *(void **)(v7[2] + 8 * v5);
  }
  uint64_t v19 = *(unsigned int *)(*v9 + 4 * v6);
  if (v19 == -1)
  {
    *(_DWORD *)(*v9 + 4 * v6) = *(_DWORD *)(a1 + 216);
    a2[6] = -1;
    unsigned int v20 = *(_DWORD *)(a1 + 216);
    if (v20 == *(_DWORD *)(a1 + 220))
    {
      DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(a1 + 208, 1, 1);
      unsigned int v20 = *(_DWORD *)(a1 + 216);
    }
    uint64_t v21 = *(void *)(a1 + 208) + 28 * v20;
    __n128 result = *(__n128 *)a2;
    *(_OWORD *)(v21 + 12) = *(_OWORD *)(a2 + 3);
    *(__n128 *)uint64_t v21 = result;
    ++*(_DWORD *)(a1 + 216);
    return result;
  }
  int v22 = a2[5];
  uint64_t v23 = *(void *)(a1 + 208);
  uint64_t v24 = (int *)(v23 + 28 * v19);
  if (v22 == v24[5])
  {
    if (*v24 <= *a2) {
      return result;
    }
LABEL_16:
    __n128 result = *(__n128 *)a2;
    *(_OWORD *)(v24 + 3) = *(_OWORD *)(a2 + 3);
    *(__n128 *)uint64_t v24 = result;
    return result;
  }
  uint64_t v25 = v19 ^ 0xFFFFFFFFLL;
  int v26 = *v24;
  uint64_t v27 = v23 + 28 * v19;
  unsigned int v30 = *(_DWORD *)(v27 + 24);
  int v28 = (_DWORD *)(v27 + 24);
  uint64_t v29 = v30;
  if ((v30 & 0x80000000) != 0)
  {
    unsigned int v32 = 1;
    int v34 = *v24;
LABEL_25:
    if (v32 >= *(_DWORD *)(a1 + 20))
    {
      int v42 = *a2;
      if (v34 <= *a2) {
        return result;
      }
      if ((v25 & 0x80000000) != 0)
      {
        a2[6] = v29;
        goto LABEL_16;
      }
      uint64_t v31 = *(void *)(a1 + 176);
      uint64_t v43 = (_DWORD *)(v31 + 20 * v25);
      a2[6] = v43[4];
      int v44 = a2[4];
      *uint64_t v43 = v42;
      v43[1] = v44;
      int v45 = a2[2];
      v43[2] = v22;
      v43[3] = v45;
      uint64_t v33 = v25;
      goto LABEL_35;
    }
    a2[6] = v29;
    uint64_t v33 = *(unsigned int *)(a1 + 184);
    int v37 = *(_DWORD *)(a1 + 188);
    *int v28 = v33;
    unsigned int v38 = v33;
    if (v33 == v37)
    {
      DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts(a1 + 176, 1, 1);
      unsigned int v38 = *(_DWORD *)(a1 + 184);
      int v22 = a2[5];
    }
    uint64_t v31 = *(void *)(a1 + 176);
    uint64_t v39 = (_DWORD *)(v31 + 20 * v38);
    *(_DWORD *)(a1 + 184) = v38 + 1;
    int v40 = a2[4];
    _DWORD *v39 = *a2;
    v39[1] = v40;
    int v41 = a2[2];
    void v39[2] = v22;
    v39[3] = v41;
    v39[4] = a2[6];
    if ((v33 & 0x80000000) == 0)
    {
      uint64_t v23 = *(void *)(a1 + 208);
      int v26 = *(_DWORD *)(v23 + 28 * v19);
      int v42 = *(_DWORD *)(v31 + 20 * v33);
      goto LABEL_35;
    }
  }
  else
  {
    uint64_t v31 = *(void *)(a1 + 176);
    unsigned int v32 = 1;
    uint64_t v33 = v29;
    int v34 = *v24;
    while (1)
    {
      unsigned int v35 = (int *)(v31 + 20 * v33);
      int v36 = *v35;
      if (v35[2] == v22) {
        break;
      }
      if (v34 <= v36)
      {
        uint64_t v25 = v33;
        int v34 = *v35;
      }
      ++v32;
      uint64_t v33 = *(unsigned int *)(v31 + 20 * v33 + 16);
      if ((v33 & 0x80000000) != 0) {
        goto LABEL_25;
      }
    }
    int v42 = *a2;
    if (v36 > *a2)
    {
      uint64_t v46 = (_DWORD *)(v31 + 20 * v33);
      a2[6] = v46[4];
      int *v35 = v42;
      v46[1] = a2[4];
      v35[2] = v22;
      v46[3] = a2[2];
LABEL_35:
      if (v26 > v42)
      {
        uint64_t v47 = v31 + 20 * v33;
        uint64_t v48 = v23 + 28 * v19;
        int v49 = *(_DWORD *)(v47 + 12);
        *(_DWORD *)uint64_t v47 = v26;
        *(void *)&long long v50 = *(void *)(v48 + 16);
        int v51 = *(_DWORD *)(v48 + 24);
        DWORD2(v50) = *(_DWORD *)(v48 + 8);
        HIDWORD(v50) = *(_DWORD *)(v47 + 16);
        uint64_t v52 = *(void *)(v47 + 4);
        *(_OWORD *)(v47 + 4) = v50;
        __n128 result = *(__n128 *)a2;
        *(_OWORD *)(v48 + 12) = *(_OWORD *)(a2 + 3);
        *(__n128 *)uint64_t v48 = result;
        uint64_t v53 = *(void *)(a1 + 208) + 28 * v19;
        *(_DWORD *)uint64_t v53 = v42;
        *(_DWORD *)(v53 + 8) = v49;
        *(void *)(v53 + 16) = v52;
        *(_DWORD *)(v53 + 24) = v51;
      }
    }
  }
  return result;
}

uint64_t FstSearchLatticeHashBackoff::applyCutoffOnEmitting(uint64_t this, unsigned int a2, int *a3)
{
  unint64_t v4 = *(unsigned int *)(this + 216);
  if (v4 > a2)
  {
    uint64_t v6 = this;
    uint64_t v7 = (void *)(this + 208);
    uint64_t v8 = a2;
    this = mrec_nth_element<FstSearchLatticeHashBackoffcmpTok>(*(void *)(this + 208), a2, v4);
    int v9 = *(_DWORD *)(*v7 + 28 * a2);
    if (*a3 > v9) {
      *a3 = v9;
    }
    unsigned int v10 = *(_DWORD *)(v6 + 220);
    if (a2 > v10) {
      this = DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)v7, a2 - v10, 0);
    }
    uint64_t v11 = *(unsigned int *)(v6 + 216);
    if (v11 < a2)
    {
      uint64_t v12 = v8 - v11;
      uint64_t v13 = *v7 + 28 * v11 + 12;
      do
      {
        *(void *)(v13 - 12) = 0xFFFFFFFF00000000;
        *(_DWORD *)(v13 - 4) = -1;
        *(_WORD *)uint64_t v13 = -2;
        *(_DWORD *)(v13 + 4) = 0;
        *(_DWORD *)(v13 + 8) = 0;
        *(_DWORD *)(v13 + 12) = -1;
        v13 += 28;
        --v12;
      }
      while (v12);
    }
    *(_DWORD *)(v6 + 216) = a2;
  }
  return this;
}

uint64_t mrec_nth_element<FstSearchLatticeHashBackoffcmpTok>(uint64_t result, unint64_t a2, unint64_t a3)
{
  if (a3 >= 2)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = 0;
      unint64_t v5 = (_DWORD *)(result + 28 * v3);
      uint64_t v6 = &v5[7 * (a3 >> 1)];
      do
      {
        char v7 = *((unsigned char *)v5 + v4);
        *((unsigned char *)v5 + v4) = *((unsigned char *)v6 + v4);
        *((unsigned char *)v6 + v4++) = v7;
      }
      while (v4 != 28);
      uint64_t v8 = (_DWORD *)(result + 28 * (v3 + a3) - 28);
      int v9 = (_DWORD *)(result + 28 * v3);
      do
      {
        unsigned int v10 = v9 + 7;
        while (1)
        {
          int v9 = v10;
          if (v10 >= v8) {
            break;
          }
          v10 += 7;
          if (*v9 > *v5)
          {
            uint64_t v11 = (char *)v9;
            while (*v8 >= *v5)
            {
              v8 -= 7;
              if (v9 >= v8) {
                goto LABEL_16;
              }
            }
            for (uint64_t i = 0; i != 28; ++i)
            {
              char v13 = *v11;
              *v11++ = *((unsigned char *)v8 + i);
              *((unsigned char *)v8 + i) = v13;
            }
            v8 -= 7;
            break;
          }
        }
LABEL_16:
        ;
      }
      while (v9 < v8);
      if (*v9 > *v5) {
        v9 -= 7;
      }
      if (v9 > v5)
      {
        for (uint64_t j = 0; j != 28; ++j)
        {
          char v15 = *((unsigned char *)v9 + j);
          *((unsigned char *)v9 + j) = *((unsigned char *)v5 + j);
          *((unsigned char *)v5 + j) = v15;
        }
      }
      unint64_t v16 = ((char *)v9 - (char *)v5) / 0x1CuLL;
      if (v16 <= a2)
      {
        if (v16 >= a2) {
          return result;
        }
        unint64_t v17 = v16 + 1;
        v3 += v17;
        a2 -= v17;
        unint64_t v16 = a3 - v17;
      }
      a3 = v16;
    }
    while (v16 > 1);
  }
  return result;
}

uint64_t FstSearchLatticeHashBackoff::seedFromMiniFst(uint64_t this, int *a2)
{
  if (*(unsigned char *)(this + 356))
  {
    uint64_t v2 = this;
    unsigned int v3 = *(_DWORD *)(this + 264);
    if (v3 >= *(_DWORD *)(this + 20)) {
      unsigned int v3 = *(_DWORD *)(this + 20);
    }
    if (v3)
    {
      unint64_t v4 = 0;
      uint64_t v46 = this + 176;
      uint64_t v47 = (void *)(this + 160);
      uint64_t v39 = this + 192;
      do
      {
        unint64_t v5 = (int *)(*(void *)(v2 + 256) + 36 * v4);
        int v6 = v5[4];
        int v7 = v5[5];
        int v8 = v5[6];
        int v44 = *v5;
        int v45 = v5[7];
        unsigned int v9 = v5[2];
        uint64_t v48 = 0;
        uint64_t v49 = 0;
        int v42 = v7;
        int v43 = v6;
        int v41 = v8;
        if ((v9 & 0x80000000) != 0)
        {
          LODWORD(v13) = -2 - v9;
        }
        else
        {
          uint64_t v10 = 0;
          unsigned int v11 = 0;
          do
          {
            if (v11 == HIDWORD(v49))
            {
              DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v48, 1, 1);
              unsigned int v11 = v49;
              uint64_t v10 = v48;
            }
            *(_DWORD *)(v10 + 4 * v11) = v9;
            uint64_t v12 = v49;
            unsigned int v11 = v49 + 1;
            LODWORD(v49) = v49 + 1;
            unsigned int v9 = *(_DWORD *)(*(void *)(v2 + 240) + 36 * v9 + 8);
          }
          while ((v9 & 0x80000000) == 0);
          LODWORD(v13) = -2 - v9;
          if ((v12 & 0x80000000) == 0)
          {
            int v14 = v12 + 1;
            uint64_t v15 = 4 * v12;
            do
            {
              unsigned int v16 = *(_DWORD *)(v48 + v15);
              uint64_t v17 = *(void *)(v2 + 240);
              unsigned int v18 = (int *)(v17 + 36 * v16);
              int v19 = *v18;
              uint64_t v20 = *((void *)v18 + 2);
              unsigned int v21 = *(_DWORD *)(v2 + 184);
              if (v21 == *(_DWORD *)(v2 + 188))
              {
                DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts(v46, 1, 1);
                unsigned int v21 = *(_DWORD *)(v2 + 184);
                uint64_t v17 = *(void *)(v2 + 240);
              }
              uint64_t v22 = *(void *)(v2 + 176) + 20 * v21;
              *(_DWORD *)(v2 + 184) = v21 + 1;
              *(_DWORD *)uint64_t v22 = v19;
              *(void *)(v22 + 4) = v20;
              *(_DWORD *)(v22 + 12) = v13;
              *(_DWORD *)(v22 + 16) = -1;
              uint64_t v23 = *(void *)(v17 + 36 * v16 + 28);
              uint64_t v24 = *(unsigned int *)(v2 + 168);
              if (v24 == *(_DWORD *)(v2 + 172))
              {
                DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v47, 1, 1);
                uint64_t v24 = *(unsigned int *)(v2 + 168);
              }
              uint64_t v25 = *(void *)(v2 + 160);
              uint64_t v26 = v25 + 16 * v24;
              *(void *)uint64_t v26 = v23;
              *(_DWORD *)(v26 + 8) = v21;
              *(_DWORD *)(v26 + 12) = 0;
              uint64_t v13 = *(unsigned int *)(v2 + 168);
              *(_DWORD *)(v2 + 168) = v13 + 1;
              *(_DWORD *)(v25 + 16 * v13 + 12) = 1;
              --v14;
              v15 -= 4;
            }
            while (v14 > 0);
          }
        }
        unsigned int v27 = *(_DWORD *)(v2 + 184);
        if (v27 == *(_DWORD *)(v2 + 188))
        {
          DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts(v46, 1, 1);
          unsigned int v27 = *(_DWORD *)(v2 + 184);
        }
        uint64_t v28 = *(void *)(v2 + 176);
        *(_DWORD *)(v2 + 184) = v27 + 1;
        uint64_t v29 = (_DWORD *)(v28 + 20 * v27);
        *uint64_t v29 = v44;
        v29[1] = v43;
        v29[2] = v42;
        int v29[3] = v13;
        v29[4] = -1;
        if (v45 == 16777213)
        {
          int v45 = 16777209;
          if (*(_DWORD *)(*v47 + 16 * v13) == 16777209)
          {
            unsigned int v27 = *(_DWORD *)(*v47 + 16 * v13 + 8);
            int v45 = 16777209;
          }
        }
        int v30 = *a2;
        uint64_t v31 = *(unsigned int *)(v2 + 168);
        if (v31 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v47, 1, 1);
          uint64_t v31 = *(unsigned int *)(v2 + 168);
        }
        uint64_t v32 = *(void *)(v2 + 160);
        uint64_t v33 = (int *)(v32 + 16 * v31);
        *uint64_t v33 = v45;
        v33[1] = v30;
        v33[2] = v27;
        v33[3] = 0;
        uint64_t v34 = *(unsigned int *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v34 + 1;
        *(_DWORD *)(v32 + 16 * v34 + 12) = 1;
        uint64_t v35 = *(unsigned int *)(v2 + 200);
        if (v35 == *(_DWORD *)(v2 + 204))
        {
          DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(v39, 1, 1);
          LODWORD(v35) = *(_DWORD *)(v2 + 200);
        }
        uint64_t v36 = *(void *)(v2 + 192) + 28 * v35;
        *(_DWORD *)uint64_t v36 = v44;
        *(_DWORD *)(v36 + 4) = v41;
        *(_DWORD *)(v36 + 8) = v34;
        *(_WORD *)(v36 + 12) = -2;
        *(_DWORD *)(v36 + 16) = v43;
        *(_DWORD *)(v36 + 20) = v42;
        *(_DWORD *)(v36 + 24) = -1;
        ++*(_DWORD *)(v2 + 200);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v48);
        ++v4;
        LODWORD(v37) = *(_DWORD *)(v2 + 264);
        unsigned int v38 = *(_DWORD *)(v2 + 20);
        if (v37 >= v38) {
          unint64_t v37 = v38;
        }
        else {
          unint64_t v37 = v37;
        }
      }
      while (v4 < v37);
    }
  }
  return this;
}

void sub_213E35BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t FstSearchLatticeHashBackoff::propagateNulls(FstSearchLatticeHashBackoff *this, int a2, int a3, SearchStats *a4)
{
  unint64_t v4 = this;
  int v5 = *((_DWORD *)this + 42);
  int v6 = (void *)((char *)this + 192);
  LODWORD(v7) = *((_DWORD *)this + 50);
  if (!v7)
  {
    unsigned int v46 = *((_DWORD *)this + 38) - 1;
    if (a4) {
      goto LABEL_54;
    }
    goto LABEL_55;
  }
  int v66 = *((_DWORD *)this + 42);
  unint64_t v8 = 0;
  uint64_t v67 = a4;
  uint64_t v68 = (char *)this + 160;
  uint64_t v69 = (uint64_t *)((char *)this + 176);
  int v77 = a2;
  uint64_t v72 = (char *)this + 192;
  do
  {
    uint64_t v9 = *(unsigned int *)(*((void *)v4 + 24) + 28 * v8 + 4);
    uint64_t v10 = *((void *)v4 + 5);
    if (*(_DWORD *)(v10 + 160) != v9
      && (*(_DWORD *)(v10 + 140) <= (int)v9 || (*(_DWORD *)(*(void *)(v10 + 152) + 4 * v9) & 0x40000000) != 0))
    {
      unsigned int v11 = *(_DWORD *)(*((void *)v4 + 24) + 28 * v8 + 4);
      unint64_t v74 = v8;
      do
      {
        uint64_t v12 = *((void *)v4 + 5);
        uint64_t v13 = *(void *)(v12 + 152);
        unsigned int v14 = *(_DWORD *)(v13 + 4 * v11);
        int v15 = *(_DWORD *)(v13 + 4 * (v11 + 1));
        int v16 = *(_DWORD *)(v12 + 140);
        if (v16 > v15) {
          goto LABEL_34;
        }
        int v17 = (v14 & 0xFFFFF) <= 0xFFFF3 ? v14 & 0xFFFFF : v14 & 0xFFFFF | 0xF00000;
        if (v16 <= (int)v9 && v17 != 16777210) {
          goto LABEL_34;
        }
        int v19 = (v14 >> 20) & 0x3FF;
        uint64_t v20 = *v6;
        uint64_t v21 = *v6 + 28 * v8;
        int v22 = *(_DWORD *)v21 + v19;
        if (v22 > a2) {
          goto LABEL_34;
        }
        int v23 = *(_DWORD *)(v21 + 8);
        __int16 v24 = *(_WORD *)(v21 + 12);
        __int16 v25 = *(_WORD *)(v21 + 14);
        int v26 = *(_DWORD *)(v21 + 20);
        int v27 = *(_DWORD *)(v21 + 24);
        int v28 = *(_DWORD *)(v21 + 16) + v19;
        if (v17 == 16777210)
        {
          if (v7 != *((_DWORD *)v4 + 51)) {
            goto LABEL_33;
          }
        }
        else
        {
          if (v17 == 16777214) {
            int v29 = v28;
          }
          else {
            int v29 = 0;
          }
          if (v17 == 16777214) {
            int v30 = 0;
          }
          else {
            int v30 = v28;
          }
          unsigned int v31 = *((_DWORD *)v4 + 46);
          int v75 = v28;
          __int16 v76 = v25;
          if (v31 == *((_DWORD *)v4 + 47))
          {
            int v82 = v26;
            int v78 = v23;
            __int16 v32 = v24;
            int v70 = v29;
            int v71 = v30;
            DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts((uint64_t)v69, 1, 1);
            int v29 = v70;
            int v30 = v71;
            a2 = v77;
            int v23 = v78;
            int v28 = v75;
            __int16 v25 = v76;
            int v26 = v82;
            __int16 v24 = v32;
            unsigned int v31 = *((_DWORD *)v4 + 46);
          }
          int v26 = v17 + 2 * v26 + 1;
          int v33 = v22 - v29;
          uint64_t v34 = (int *)(*((void *)v4 + 22) + 20 * v31);
          *((_DWORD *)v4 + 46) = v31 + 1;
          int *v34 = v33;
          v34[1] = v30;
          v34[2] = v26;
          v34[3] = v23;
          v34[4] = v27;
          uint64_t v35 = *((unsigned int *)v4 + 42);
          if (v35 == *((_DWORD *)v4 + 43))
          {
            int v83 = v26;
            int v80 = v27;
            __int16 v36 = v24;
            DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v68, 1, 1);
            int v28 = v75;
            __int16 v25 = v76;
            int v26 = v83;
            __int16 v24 = v36;
            int v27 = v80;
            a2 = v77;
            uint64_t v35 = *((unsigned int *)v4 + 42);
          }
          unint64_t v7 = *((void *)v4 + 20) + 16 * v35;
          *(_DWORD *)unint64_t v7 = v17;
          *(_DWORD *)(v7 + 4) = a3;
          *(_DWORD *)(v7 + 8) = v31;
          *(_DWORD *)(v7 + 12) = 0;
          int v23 = *((_DWORD *)v4 + 42);
          *((_DWORD *)v4 + 42) = v23 + 1;
          LODWORD(v7) = *((_DWORD *)v4 + 50);
          int v6 = v72;
          if (v7 != *((_DWORD *)v4 + 51)) {
            goto LABEL_32;
          }
        }
        int v79 = v23;
        int v84 = v26;
        int v81 = v27;
        uint64_t v37 = (uint64_t)v6;
        __int16 v38 = v24;
        uint64_t v39 = v9;
        int v40 = v6;
        __int16 v41 = v25;
        int v42 = v22;
        int v43 = v4;
        int v44 = v28;
        DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(v37, 1, 1);
        int v28 = v44;
        unint64_t v4 = v43;
        int v22 = v42;
        int v26 = v84;
        __int16 v25 = v41;
        int v6 = v40;
        uint64_t v9 = v39;
        unint64_t v8 = v74;
        int v23 = v79;
        int v27 = v81;
        __int16 v24 = v38;
        a2 = v77;
        LODWORD(v7) = *((_DWORD *)v4 + 50);
LABEL_32:
        uint64_t v20 = *v6;
LABEL_33:
        unint64_t v7 = v20 + 28 * v7;
        *(_DWORD *)unint64_t v7 = v22;
        *(_DWORD *)(v7 + 4) = v15;
        *(_DWORD *)(v7 + 8) = v23;
        *(_WORD *)(v7 + 12) = v24;
        *(_WORD *)(v7 + 14) = v25;
        *(_DWORD *)(v7 + 16) = v28;
        *(_DWORD *)(v7 + 20) = v26;
        *(_DWORD *)(v7 + 24) = v27;
        LODWORD(v7) = *((_DWORD *)v4 + 50) + 1;
        *((_DWORD *)v4 + 50) = v7;
LABEL_34:
        v11 += 2;
      }
      while ((v14 & 0x80000000) == 0);
    }
    ++v8;
  }
  while (v8 < v7);
  unsigned int v45 = *((_DWORD *)v4 + 38);
  if (v7 > v45)
  {
    mrec_qsort_r<FstSearchLateLatticeHashBackoffActiveToken>((char *)(*((void *)v4 + 24) + 28 * v45), v7 - v45, 28);
    unsigned int v45 = *((_DWORD *)v4 + 38);
    LODWORD(v7) = *((_DWORD *)v4 + 50);
  }
  unsigned int v46 = v45 - 1;
  if (v45 < v7)
  {
    unint64_t v47 = v45;
    do
    {
      uint64_t v48 = *v6;
      if (*(_DWORD *)(*v6 + 28 * v47 + 4) == *(_DWORD *)(*v6 + 28 * (v47 - 1) + 4))
      {
        if (v45 - v46 < *((_DWORD *)v4 + 5))
        {
          int v49 = *(_DWORD *)(v48 + 28 * v47 + 20);
          if (v49 != *(_DWORD *)(v48 + 28 * v46 + 20))
          {
            uint64_t v50 = *(unsigned int *)(v48 + 28 * v46 + 24);
            uint64_t v51 = v50;
            if ((v50 & 0x80000000) != 0)
            {
LABEL_47:
              if (v51 == 0xFFFFFFFFLL)
              {
                unsigned int v53 = *((_DWORD *)v4 + 46);
                if (v53 == *((_DWORD *)v4 + 47))
                {
                  DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts((uint64_t)v69, 1, 1);
                  unsigned int v53 = *((_DWORD *)v4 + 46);
                  uint64_t v48 = *((void *)v4 + 24);
                  int v49 = *(_DWORD *)(v48 + 28 * v47 + 20);
                  LODWORD(v50) = *(_DWORD *)(v48 + 28 * v46 + 24);
                }
                uint64_t v54 = (_DWORD *)(*((void *)v4 + 22) + 20 * v53);
                *((_DWORD *)v4 + 46) = v53 + 1;
                uint64_t v55 = (_DWORD *)(v48 + 28 * v47);
                int v56 = v55[4];
                *uint64_t v54 = *v55;
                v54[1] = v56;
                LODWORD(v55) = v55[2];
                v54[2] = v49;
                v54[3] = v55;
                v54[4] = v50;
                *(_DWORD *)(v48 + 28 * v46 + 24) = v53;
                ++v45;
              }
            }
            else
            {
              uint64_t v52 = *v69;
              uint64_t v51 = *(unsigned int *)(v48 + 28 * v46 + 24);
              while (v49 != *(_DWORD *)(v52 + 20 * v51 + 8))
              {
                uint64_t v51 = *(unsigned int *)(v52 + 20 * v51 + 16);
                if ((v51 & 0x80000000) != 0) {
                  goto LABEL_47;
                }
              }
            }
          }
        }
      }
      else
      {
        int64x2_t v57 = (long long *)(v48 + 28 * v47);
        unsigned int v45 = v46 + 2;
        ++v46;
        long long v58 = *v57;
        int64x2_t v59 = (_OWORD *)(v48 + 28 * v46);
        *(_OWORD *)((char *)v59 + 12) = *(long long *)((char *)v57 + 12);
        *int64x2_t v59 = v58;
      }
      ++v47;
      unint64_t v7 = *((unsigned int *)v4 + 50);
    }
    while (v47 < v7);
  }
  a4 = v67;
  int v5 = v66;
  if (v67) {
LABEL_54:
  }
    *((_DWORD *)a4 + 1) += *((_DWORD *)v4 + 42) - v5;
LABEL_55:
  uint64_t v60 = v46 + 1;
  unsigned int v61 = *((_DWORD *)v4 + 51);
  if (v60 > v61)
  {
    DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)v6, v60 - v61, 0);
    LODWORD(v7) = *((_DWORD *)v4 + 50);
  }
  if (v7 < v60)
  {
    uint64_t v62 = v60 - v7;
    uint64_t v63 = *v6 + 28 * v7 + 12;
    do
    {
      *(void *)(v63 - 12) = 0xFFFFFFFF00000000;
      *(_DWORD *)(v63 - 4) = -1;
      *(_WORD *)uint64_t v63 = -2;
      *(_DWORD *)(v63 + 4) = 0;
      *(_DWORD *)(v63 + 8) = 0;
      *(_DWORD *)(v63 + 12) = -1;
      v63 += 28;
      --v62;
    }
    while (v62);
  }
  *((_DWORD *)v4 + 50) = v60;
  unsigned int v64 = *((_DWORD *)v4 + 38);

  return FstSearchLatticeHashBackoff::generateNullTraces((unint64_t)v4, a3, v64);
}

unint64_t FstSearchLatticeHashBackoff::getCandidateTokensForTrace(unint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(int *)(a2 + 12) >= 1)
  {
    unint64_t v5 = result;
    int v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(v5 + 176);
      unint64_t v8 = (int32x2_t *)(v7 + 20 * (*(_DWORD *)(a2 + 8) + v6));
      uint64_t v9 = v8[1].u32[1];
      if (v9 == -1 || (uint64_t v10 = *(void *)(v5 + 160), *(_DWORD *)(v10 + 16 * v9) != 16777210))
      {
        uint64_t v19 = *(unsigned int *)(a3 + 8);
        if (v19 == *(_DWORD *)(a3 + 12))
        {
          __n128 result = DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts(a3, 1, 1);
          LODWORD(v19) = *(_DWORD *)(a3 + 8);
        }
        uint64_t v20 = *(void *)a3 + 20 * v19;
        long long v21 = *(_OWORD *)v8->i8;
        *(_DWORD *)(v20 + 16) = v8[2].i32[0];
        *(_OWORD *)uint64_t v20 = v21;
        LODWORD(v20) = *(_DWORD *)(a3 + 8);
        *(_DWORD *)(a3 + 8) = v20 + 1;
        *(_DWORD *)(*(void *)a3 + 20 * v20 + 16) = -1;
      }
      else
      {
        uint64_t v11 = *(unsigned int *)(v10 + 16 * v9 + 8);
        if ((v11 & 0x80000000) == 0)
        {
          int32x2_t v12 = vsub_s32(*v8, *(int32x2_t *)(v7 + 20 * v11));
          unsigned int v13 = *(_DWORD *)(a3 + 8);
          do
          {
            uint64_t v14 = *(void *)(v5 + 176);
            if (v13 == *(_DWORD *)(a3 + 12))
            {
              __n128 result = DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts(a3, 1, 1);
              unsigned int v13 = *(_DWORD *)(a3 + 8);
            }
            int v15 = (long long *)(v14 + 20 * v11);
            uint64_t v16 = *(void *)a3 + 20 * v13;
            long long v17 = *v15;
            *(_DWORD *)(v16 + 16) = *((_DWORD *)v15 + 4);
            *(_OWORD *)uint64_t v16 = v17;
            LODWORD(v15) = *(_DWORD *)(a3 + 8);
            unsigned int v13 = v15 + 1;
            *(_DWORD *)(a3 + 8) = v15 + 1;
            unsigned int v18 = (int32x2_t *)(*(void *)a3 + 20 * v15);
            *unsigned int v18 = vadd_s32(v12, *v18);
            v18[2].i32[0] = -1;
            uint64_t v11 = *(unsigned int *)(v14 + 20 * v11 + 16);
          }
          while ((v11 & 0x80000000) == 0);
        }
      }
      ++v6;
    }
    while (v6 < *(_DWORD *)(a2 + 12));
  }
  return result;
}

double FstSearchLatticeHashBackoff::annihilateNullActiveTokens(FstSearchLatticeHashBackoff *this)
{
  if (*((_DWORD *)this + 50))
  {
    unint64_t v2 = 0;
    do
    {
      uint64_t v3 = *((void *)this + 24);
      unint64_t v4 = (long long *)(v3 + 28 * v2);
      uint64_t v5 = *((unsigned int *)v4 + 2);
      if ((v5 & 0x80000000) != 0 || (uint64_t v6 = *((void *)this + 20), *(_DWORD *)(v6 + 16 * v5) != 16777210))
      {
        uint64_t v19 = *((unsigned int *)this + 54);
        if (v19 == *((_DWORD *)this + 55))
        {
          DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)this + 208, 1, 1);
          LODWORD(v19) = *((_DWORD *)this + 54);
        }
        uint64_t v20 = (_OWORD *)(*((void *)this + 26) + 28 * v19);
        long long v21 = *v4;
        *(_OWORD *)((char *)v20 + 12) = *(long long *)((char *)v4 + 12);
        _OWORD *v20 = v21;
        ++*((_DWORD *)this + 54);
      }
      else
      {
        uint64_t v7 = *(unsigned int *)(v6 + 16 * v5 + 8);
        if ((v7 & 0x80000000) == 0)
        {
          unint64_t v8 = (_DWORD *)(*((void *)this + 22) + 20 * v7);
          int v9 = *(_DWORD *)v4 - *v8;
          int v10 = *(_DWORD *)(v3 + 28 * v2 + 16) - v8[1];
          unsigned int v11 = *((_DWORD *)this + 54);
          do
          {
            if (v11 == *((_DWORD *)this + 55))
            {
              DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)this + 208, 1, 1);
              unsigned int v11 = *((_DWORD *)this + 54);
            }
            int32x2_t v12 = (_OWORD *)(*((void *)this + 26) + 28 * v11);
            long long v13 = *v4;
            *(_OWORD *)((char *)v12 + 12) = *(long long *)((char *)v4 + 12);
            *int32x2_t v12 = v13;
            unsigned int v14 = *((_DWORD *)this + 54);
            unsigned int v11 = v14 + 1;
            *((_DWORD *)this + 54) = v14 + 1;
            int v15 = (_DWORD *)(*((void *)this + 26) + 28 * v14);
            uint64_t v16 = (_DWORD *)(*((void *)this + 22) + 20 * v7);
            int v17 = v16[2];
            void v15[2] = v16[3];
            int v18 = v16[1];
            uint64_t v7 = v16[4];
            _DWORD *v15 = v9 + *v16;
            v15[4] = v10 + v18;
            v15[5] = v17;
            v15[6] = -1;
          }
          while ((v7 & 0x80000000) == 0);
        }
      }
      ++v2;
    }
    while (v2 < *((unsigned int *)this + 50));
  }
  uint64_t v22 = *((void *)this + 24);
  *((void *)this + 24) = *((void *)this + 26);
  *((void *)this + 26) = v22;
  LODWORD(v22) = *((_DWORD *)this + 51);
  double result = *((double *)this + 27);
  *((double *)this + 25) = result;
  *((_DWORD *)this + 54) = 0;
  *((_DWORD *)this + 55) = v22;
  return result;
}

unint64_t FstSearchLatticeHashBackoff::annihilateNullTraces(unint64_t this)
{
  if (*(_DWORD *)(this + 168))
  {
    unint64_t v1 = this;
    uint64_t v2 = 0;
    uint64_t v3 = (void *)(this + 176);
    do
    {
      uint64_t v37 = *(void *)(v1 + 160);
      __int16 v38 = 0;
      uint64_t v39 = 0;
      FstSearchLatticeHashBackoff::getCandidateTokensForTrace(v1, v37 + 16 * v2, (uint64_t)&v38);
      unsigned int v4 = v39;
      uint64_t v5 = (char *)v38;
      if (v39 < 2
        || (mrec_qsort_r<FstSearchLateLatticeHashBackoffcmpTokLmhst>((char *)v38 + 20, (v39 - 1), 20),
            unsigned int v4 = v39,
            uint64_t v5 = (char *)v38,
            v39 < 2))
      {
        unsigned int v7 = 0;
        long long v9 = xmmword_2140992A0;
      }
      else
      {
        uint64_t v6 = 0;
        unsigned int v7 = 0;
        uint64_t v8 = 20 * v39 - 20;
        long long v9 = xmmword_2140992A0;
        do
        {
          int v10 = &v5[v6];
          int v11 = *(_DWORD *)&v5[v6 + 28];
          if (v11 != *(_DWORD *)&v5[20 * v7 + 8] && *((_DWORD *)v5 + 2) != v11)
          {
            ++v7;
            long long v12 = *(_OWORD *)(v10 + 20);
            long long v13 = &v5[20 * v7];
            *((_DWORD *)v13 + 4) = *((_DWORD *)v10 + 9);
            *(_OWORD *)long long v13 = v12;
          }
          v6 += 20;
        }
        while (v8 != v6);
      }
      uint64_t v14 = v7 + 1;
      if (HIDWORD(v39) < v14)
      {
        int v40 = 0;
        HIDWORD(v39) = realloc_array(v5, &v40, 20 * v14, 20 * v4, 20 * v4, 1) / 0x14;
        uint64_t v5 = (char *)v40;
        __int16 v38 = v40;
        unsigned int v4 = v39;
        long long v9 = xmmword_2140992A0;
      }
      if (v4 < v14)
      {
        uint64_t v15 = v14 - v4;
        uint64_t v16 = &v5[20 * v4 + 16];
        do
        {
          *((_OWORD *)v16 - 1) = v9;
          *(_DWORD *)uint64_t v16 = -1;
          v16 += 20;
          --v15;
        }
        while (v15);
      }
      LODWORD(v39) = v7 + 1;
      mrec_qsort_r<FstSearchLateLatticeHashBackoffcmpTok>(v5 + 20, v7, 20);
      unint64_t v17 = v39;
      unint64_t v18 = *(unsigned int *)(v1 + 20);
      uint64_t v36 = v2;
      if (v39 > v18)
      {
        if (HIDWORD(v39) < v18)
        {
          int v40 = 0;
          HIDWORD(v39) = realloc_array(v38, &v40, 20 * v18, 20 * v39, 20 * v39, 1)
                       / 0x14;
          __int16 v38 = v40;
          unint64_t v17 = v39;
        }
        if (v17 < v18)
        {
          unint64_t v19 = v18 - v17;
          uint64_t v20 = (char *)v38 + 20 * v17 + 16;
          do
          {
            *((_OWORD *)v20 - 1) = xmmword_2140992A0;
            _DWORD *v20 = -1;
            v20 += 5;
            --v19;
          }
          while (v19);
        }
        LODWORD(v39) = v18;
        unint64_t v17 = v18;
      }
      if (v17)
      {
        uint64_t v21 = 0;
        unint64_t v22 = 0;
        uint64_t v23 = v37 + 16 * v2;
        __int16 v24 = (_DWORD *)(v23 + 12);
        __int16 v25 = (_DWORD *)(v23 + 8);
        uint64_t v26 = 0xFFFFFFFFLL;
        do
        {
          if (*v24 <= (int)v22)
          {
            uint64_t v30 = *(unsigned int *)(v1 + 184);
            uint64_t v31 = *(void *)(v1 + 176);
            *(_DWORD *)(v31 + 20 * v26 + 16) = v30;
            __int16 v32 = (char *)v38;
            if (v30 == *(_DWORD *)(v1 + 188))
            {
              DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts((uint64_t)v3, 1, 1);
              unsigned int v33 = *(_DWORD *)(v1 + 184);
              uint64_t v31 = *(void *)(v1 + 176);
              unint64_t v17 = v39;
            }
            else
            {
              unsigned int v33 = v30;
            }
            uint64_t v34 = v31 + 20 * v33;
            long long v35 = *(_OWORD *)&v32[v21];
            *(_DWORD *)(v34 + 16) = *(_DWORD *)&v32[v21 + 16];
            *(_OWORD *)uint64_t v34 = v35;
            ++*(_DWORD *)(v1 + 184);
          }
          else
          {
            uint64_t v27 = *v3 + 20 * (v22 + *v25);
            long long v28 = *(_OWORD *)((char *)v38 + v21);
            *(_DWORD *)(v27 + 16) = *(_DWORD *)((char *)v38 + v21 + 16);
            *(_OWORD *)uint64_t v27 = v28;
            unsigned int v29 = v22 + *v25;
            if (v22) {
              *(_DWORD *)(*v3 + 20 * (v22 + *v25 - 1) + 16) = v29;
            }
            uint64_t v30 = v29;
          }
          ++v22;
          v21 += 20;
          uint64_t v26 = v30;
        }
        while (v22 < v17);
      }
      *(_DWORD *)(v37 + 16 * v36 + 12) = 0;
      this = DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v38);
      uint64_t v2 = v36 + 1;
    }
    while (v36 + 1 < (unint64_t)*(unsigned int *)(v1 + 168));
  }
  return this;
}

void sub_213E367E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t FstSearchLatticeHashBackoff::annihilateNullLongestFinal(unint64_t this)
{
  LODWORD(v1) = *(_DWORD *)(this + 168);
  if (v1)
  {
    uint64_t v2 = this;
    uint64_t v3 = (uint64_t *)(this + 160);
    unsigned int v4 = (uint64_t *)(this + 176);
    uint64_t v29 = this + 160;
    do
    {
      uint64_t v1 = (v1 - 1);
      uint64_t v5 = *v3;
      int v6 = *(_DWORD *)(*v3 + 16 * v1);
      if (v6 == 16777210)
      {
        uint64_t v7 = v5 + 16 * v1;
        uint64_t v8 = *v4;
        uint64_t v9 = *v4 + 20 * *(unsigned int *)(v7 + 8);
        uint64_t v10 = *(unsigned int *)(v9 + 12);
        if (v10 != -1)
        {
          int32x2_t v11 = *(int32x2_t *)v9;
          long long v12 = (int *)(v5 + 16 * v10);
          int v13 = *v12;
          uint64_t v15 = v12[2];
          int v14 = v12[3];
          int v16 = *(_DWORD *)(v2 + 184);
          int v17 = *(_DWORD *)(v7 + 4);
          uint64_t v18 = *(unsigned int *)(v2 + 168);
          if (v18 == *(_DWORD *)(v2 + 172))
          {
            this = DgnArray<DgnPrimArray<double>>::reallocElts(v29, 1, 1);
            uint64_t v18 = *(unsigned int *)(v2 + 168);
            uint64_t v5 = *(void *)(v2 + 160);
            uint64_t v8 = *(void *)(v2 + 176);
          }
          unint64_t v19 = (_DWORD *)(v5 + 16 * v18);
          _DWORD *v19 = v13;
          v19[1] = v17;
          locale_t v19[2] = v16;
          v19[3] = v14;
          ++*(_DWORD *)(v2 + 168);
          if (v15 != 0xFFFFFFFFLL)
          {
            int32x2_t v20 = vsub_s32(v11, *(int32x2_t *)(v8 + 20 * v15));
            int v21 = *(_DWORD *)(v2 + 184);
            unsigned int v22 = -1;
            do
            {
              unsigned int v23 = v21;
              if ((v22 & 0x80000000) == 0) {
                *(_DWORD *)(v8 + 20 * v22 + 16) = v21;
              }
              __int16 v24 = (int32x2_t *)(v8 + 20 * v15);
              int32x2_t v25 = *v24;
              int32x2_t v26 = v24[1];
              unsigned int v27 = v23;
              if (v23 == *(_DWORD *)(v2 + 188))
              {
                this = DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts((uint64_t)v4, 1, 1);
                unsigned int v27 = *(_DWORD *)(v2 + 184);
                uint64_t v8 = *(void *)(v2 + 176);
              }
              long long v28 = (int32x2_t *)(v8 + 20 * v27);
              *long long v28 = vadd_s32(v20, v25);
              v28[1] = v26;
              v28[2].i32[0] = -1;
              int v21 = *(_DWORD *)(v2 + 184) + 1;
              *(_DWORD *)(v2 + 184) = v21;
              uint64_t v8 = *(void *)(v2 + 176);
              uint64_t v15 = *(unsigned int *)(v8 + 20 * v15 + 16);
              unsigned int v22 = v23;
            }
            while (v15 != -1);
          }
          uint64_t v3 = (uint64_t *)v29;
          if (v13 == 16777213) {
            return this;
          }
        }
      }
      else if (v6 == 16777213)
      {
        return this;
      }
    }
    while (v1);
  }
  return this;
}

uint64_t FstSearchLatticeHashBackoff::collectTraces(FstSearchLatticeHashBackoff *this)
{
  uint64_t v2 = *((unsigned int *)this + 42);
  unsigned int v43 = 0;
  int v42 = 0;
  if (v2)
  {
    uint64_t v3 = MemChunkAlloc(4 * v2, 0);
    unint64_t v4 = 0;
    int v42 = v3;
    unsigned int v43 = v2;
    do
      *((_DWORD *)v3 + v4++) = 0;
    while (v4 < v43);
  }
  unint64_t v5 = *((unsigned int *)this + 50);
  if (v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = v42;
    uint64_t v8 = (unsigned int *)(*((void *)this + 24) + 8);
    do
    {
      unsigned int v10 = *v8;
      v8 += 7;
      uint64_t v9 = v10;
      if (v10 != -1)
      {
        *((_DWORD *)v7 + v9) = 1;
        unint64_t v5 = *((unsigned int *)this + 50);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  LODWORD(v11) = *((_DWORD *)this + 42);
  if (v11)
  {
    char v12 = 0;
    int v13 = (uint64_t *)((char *)this + 160);
    int v14 = v42;
    do
    {
      uint64_t v11 = (v11 - 1);
      if (v12)
      {
        char v12 = 1;
      }
      else if (*(_DWORD *)(*v13 + 16 * v11) == 16777213)
      {
        char v12 = 1;
        *((_DWORD *)v14 + v11) = 1;
      }
      else
      {
        char v12 = 0;
      }
      if (*((_DWORD *)v14 + v11))
      {
        uint64_t v15 = *(unsigned int *)(*v13 + 16 * v11 + 8);
        if (v15 != -1)
        {
          uint64_t v16 = *((void *)this + 22);
          do
          {
            uint64_t v17 = *(unsigned int *)(v16 + 20 * v15 + 12);
            if (v17 != -1) {
              *((_DWORD *)v14 + v17) = 1;
            }
            uint64_t v15 = *(unsigned int *)(v16 + 20 * v15 + 16);
          }
          while (v15 != -1);
        }
      }
    }
    while (v11);
    unsigned int v18 = *((_DWORD *)this + 42);
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    if (v18)
    {
      unint64_t v19 = 0;
      unsigned int v20 = 0;
      do
      {
        if (*((_DWORD *)v42 + v19))
        {
          uint64_t v21 = *v13;
          if (v19 != v20)
          {
            *(_OWORD *)(v21 + 16 * v20) = *(_OWORD *)(v21 + 16 * v19);
            uint64_t v21 = *v13;
          }
          unsigned int v22 = v41;
          *(_DWORD *)(v21 + 16 * v20 + 8) = v41;
          uint64_t v23 = *(unsigned int *)(v21 + 16 * v19 + 8);
          if (v23 == -1)
          {
            uint64_t v24 = v40;
            unsigned int v25 = v22;
          }
          else
          {
            uint64_t v26 = *((void *)this + 22);
            unsigned int v25 = v22;
            do
            {
              if (v25 == HIDWORD(v41))
              {
                DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts((uint64_t)&v40, 1, 1);
                unsigned int v25 = v41;
              }
              uint64_t v24 = v40;
              uint64_t v27 = v40 + 20 * v25;
              *(_OWORD *)uint64_t v27 = *(_OWORD *)(v26 + 20 * v23);
              LODWORD(v41) = ++v25;
              unsigned int v30 = *(_DWORD *)(v27 + 12);
              long long v28 = (_DWORD *)(v27 + 12);
              uint64_t v29 = v30;
              v28[1] = v25;
              if (v30 != -1) {
                *long long v28 = *((_DWORD *)v42 + v29);
              }
              uint64_t v26 = *((void *)this + 22);
              uint64_t v23 = *(unsigned int *)(v26 + 20 * v23 + 16);
            }
            while (v23 != -1);
            uint64_t v21 = *v13;
            unsigned int v22 = *(_DWORD *)(*v13 + 16 * v20 + 8);
          }
          *(_DWORD *)(v24 + 20 * (v25 - 1) + 16) = -1;
          *(_DWORD *)(v21 + 16 * v20 + 12) = v25 - v22;
          *((_DWORD *)v42 + v19) = v20++;
          unsigned int v18 = *((_DWORD *)this + 42);
        }
        ++v19;
      }
      while (v19 < v18);
      unsigned int v31 = *((_DWORD *)this + 43);
      if (v20 > v31)
      {
        DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 160, v20 - v31, 0);
        unsigned int v18 = *((_DWORD *)this + 42);
      }
      if (v18 < v20)
      {
        unint64_t v32 = v20 - (unint64_t)v18;
        unsigned int v33 = (_OWORD *)(*v13 + 16 * v18);
        do
        {
          *v33++ = xmmword_2140992B0;
          --v32;
        }
        while (v32);
      }
    }
    else
    {
      unsigned int v20 = 0;
    }
  }
  else
  {
    unsigned int v20 = 0;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
  }
  *((_DWORD *)this + 42) = v20;
  uint64_t v34 = *((void *)this + 22);
  *((void *)this + 22) = v40;
  uint64_t v40 = v34;
  LODWORD(v34) = *((_DWORD *)this + 47);
  *((void *)this + 23) = v41;
  LODWORD(v41) = 0;
  HIDWORD(v41) = v34;
  uint64_t v35 = *((unsigned int *)this + 50);
  if (v35)
  {
    uint64_t v36 = v42;
    uint64_t v37 = (_DWORD *)(*((void *)this + 24) + 8);
    do
    {
      uint64_t v38 = *v37;
      if (v38 != -1) {
        *uint64_t v37 = *((_DWORD *)v36 + v38);
      }
      v37 += 7;
      --v35;
    }
    while (v35);
  }
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v40);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v42);
}

void sub_213E36D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

int64x2_t FstSearchLatticeHashBackoff::vite(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  FstSearchLatticeHashBackoff::advanceDeltas((FstSearchLatticeHashBackoff *)this, a2, a3, a4, a5);
  int64x2_t v13 = 0u;
  int64x2_t v14 = 0u;
  SnapTime::recordTime((SnapTime *)&v13, 1, 0, 0, 0);
  if (a2 >= 1)
  {
    unsigned int v7 = *((_DWORD *)this + 18);
    if (v7)
    {
      if (!(a2 % v7)) {
        FstSearchLatticeHashBackoff::collectTraces((FstSearchLatticeHashBackoff *)this);
      }
    }
  }
  int64x2_t v11 = 0u;
  int64x2_t v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  uint64_t v8 = this[13];
  int64x2_t result = vaddq_s64(v8[14], vsubq_s64(v11, v13));
  int64x2_t v10 = vaddq_s64(v8[15], vsubq_s64(v12, v14));
  v8[14] = result;
  v8[15] = v10;
  return result;
}

int64x2_t FstSearchLatticeHashBackoff::reset(FstSearchLatticeHashBackoff *this)
{
  *((_DWORD *)this + 42) = 0;
  *((_DWORD *)this + 46) = 0;
  *((_DWORD *)this + 50) = 0;
  int64x2_t v7 = 0u;
  int64x2_t v8 = 0u;
  SnapTime::recordTime((SnapTime *)&v7, 1, 0, 0, 0);
  int64x2_t v5 = 0u;
  int64x2_t v6 = 0u;
  SnapTime::recordTime((SnapTime *)&v5, 1, 0, 0, 0);
  uint64_t v2 = (int64x2_t *)*((void *)this + 13);
  int64x2_t result = vaddq_s64(v2[10], vsubq_s64(v5, v7));
  int64x2_t v4 = vaddq_s64(v2[11], vsubq_s64(v6, v8));
  v2[10] = result;
  v2[11] = v4;
  return result;
}

double FstSearchLatticeHashBackoff::doFrame(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  if (a3 >= 20000) {
    a3 = 20000;
  }
  *(void *)&double result = FstSearchLatticeHashBackoff::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearchLatticeHashBackoff::beginTopRecPassSyncRecog(FstSearchLatticeHashBackoff *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 240, a3, *((PelScoreCache **)this + 4));
    uint64_t result = ArcGraph::findBackoffState(*((void *)this + 5));
    *((_DWORD *)this + 88) = result;
    *((unsigned char *)this + 356) = 1;
  }
  return result;
}

uint64_t FstSearchLatticeHashBackoff::endTopRecPassSyncRecog(int64x2_t **this)
{
  int64x2_t v10 = 0u;
  int64x2_t v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  FstSearchLatticeHashBackoff::collectTraces((FstSearchLatticeHashBackoff *)this);
  FstSearchLatticeHashBackoff::annihilateNullTraces((unint64_t)this);
  FstSearchLatticeHashBackoff::annihilateNullActiveTokens((FstSearchLatticeHashBackoff *)this);
  FstSearchLatticeHashBackoff::annihilateNullLongestFinal((unint64_t)this);
  FstSearchLatticeHashBackoff::collectTraces((FstSearchLatticeHashBackoff *)this);
  int64x2_t v8 = 0u;
  int64x2_t v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  int64x2_t v2 = vsubq_s64(v8, v10);
  uint64_t v3 = this[13];
  int64x2_t v4 = v3[13];
  int64x2_t v5 = vaddq_s64(v3[12], v2);
  int64x2_t v8 = v2;
  int64x2_t v9 = vsubq_s64(v9, v11);
  int64x2_t v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + 58) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

void FstSearchLatticeHashBackoff::printSize(FstSearchLatticeHashBackoff *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v116);
  if (v117) {
    uint64_t v16 = v116;
  }
  else {
    uint64_t v16 = &unk_214099300;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_214099300, a3, &unk_214099300, v16);
  DgnString::~DgnString((DgnString *)&v116);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_214099300);
  uint64_t v21 = (a3 + 1);
  uint64_t v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v116);
  if (v117) {
    uint64_t v27 = v116;
  }
  else {
    uint64_t v27 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v116);
  if (v117) {
    unint64_t v32 = v116;
  }
  else {
    unint64_t v32 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v116);
  if (v117) {
    uint64_t v37 = v116;
  }
  else {
    uint64_t v37 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v37, 4, 4, 0);
  uint64_t v111 = a2;
  unsigned int v112 = a6;
  uint64_t v113 = a3;
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v116);
  if (v117) {
    int v42 = v116;
  }
  else {
    int v42 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v42, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  uint64_t v43 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v43 = 16;
  }
  uint64_t v44 = *((unsigned int *)this + 42);
  uint64_t v45 = 16 * v44;
  if ((int)v44 <= 0) {
    uint64_t v45 = 0;
  }
  uint64_t v46 = v45 + v43;
  uint64_t v47 = v45 + v43 + 16 * (*((_DWORD *)this + 43) - v44);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v116);
  if (v117) {
    uint64_t v52 = v116;
  }
  else {
    uint64_t v52 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v52, v47, v46, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v47;
  *a5 += v46;
  uint64_t v53 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v53 = 16;
  }
  uint64_t v54 = *((unsigned int *)this + 46);
  uint64_t v55 = 20 * v54;
  if ((int)v54 <= 0) {
    uint64_t v55 = 0;
  }
  uint64_t v56 = v55 + v53;
  uint64_t v57 = v55 + v53 + 20 * (*((_DWORD *)this + 47) - v54);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v116);
  if (v117) {
    uint64_t v62 = v116;
  }
  else {
    uint64_t v62 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, v21, &unk_214099300, v22, v22, v62, v57, v56, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v57;
  *a5 += v56;
  uint64_t v63 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v63 = 16;
  }
  int v64 = *((_DWORD *)this + 50);
  uint64_t v65 = 26 * v64;
  if (v64 <= 0) {
    uint64_t v65 = 0;
  }
  uint64_t v66 = v65 + v63;
  uint64_t v67 = v65 + v63 + 26 * (*((_DWORD *)this + 51) - v64);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v116);
  if (v117) {
    uint64_t v72 = v116;
  }
  else {
    uint64_t v72 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, v21, &unk_214099300, v22, v22, v72, v67, v66, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v67;
  *a5 += v66;
  uint64_t v73 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v73 = 16;
  }
  int v74 = *((_DWORD *)this + 54);
  uint64_t v75 = 26 * v74;
  if (v74 <= 0) {
    uint64_t v75 = 0;
  }
  uint64_t v76 = v75 + v73;
  uint64_t v77 = v75 + v73 + 26 * (*((_DWORD *)this + 55) - v74);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v116);
  if (v117) {
    int v82 = v116;
  }
  else {
    int v82 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, v21, &unk_214099300, v22, v22, v82, v77, v76, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v77;
  *a5 += v76;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v116);
  if (v117) {
    int64x2_t v87 = v116;
  }
  else {
    int64x2_t v87 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v83, v84, v85, v86, v21, &unk_214099300, v22, v22, v87, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v116);
  if (v117) {
    int v92 = v116;
  }
  else {
    int v92 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, v21, &unk_214099300, v22, v22, v92, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v116);
  if (v117) {
    uint64_t v97 = v116;
  }
  else {
    uint64_t v97 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v93, v94, v95, v96, v21, &unk_214099300, v22, v22, v97, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  uint64_t v98 = sizeObject((uint64_t)this + 240, 0);
  uint64_t v99 = sizeObject((uint64_t)this + 240, 1);
  uint64_t v100 = sizeObject((uint64_t)this + 240, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v116);
  if (v117) {
    char v105 = v116;
  }
  else {
    char v105 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v101, v102, v103, v104, v21, &unk_214099300, v22, v22, v105, v98, v99, v100);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v98;
  *a5 += v99;
  *v112 += v100;
  unint64_t v114 = 0;
  unint64_t v115 = 0;
  SearchItf::printSize(this, v111, v21, &v115, &v114, &v114);
  *a4 += v115;
  *a5 += v114;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v116);
  if (v117) {
    uint64_t v110 = v116;
  }
  else {
    uint64_t v110 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v106, v107, v108, v109, v113, &unk_214099300, (35 - v113), (35 - v113), v110, *a4, *a5, *v112);
  DgnString::~DgnString((DgnString *)&v116);
}

void sub_213E376F0(_Unwind_Exception *a1)
{
  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t FstSearchLatticeHashBackoff::getBestTrace(uint64_t a1, void *a2, void *a3, int a4)
{
  if (a4) {
    unint64_t v4 = 0;
  }
  else {
    unint64_t v4 = *(unsigned int *)(a1 + 152);
  }
  unint64_t v5 = *(unsigned int *)(a1 + 200);
  if (v4 >= v5) {
    goto LABEL_21;
  }
  uint64_t v6 = 28 * v4;
  int v7 = 1879048192;
  uint64_t v8 = 0xFFFFFFFFLL;
  do
  {
    uint64_t v9 = *(void *)(a1 + 192);
    if (!a4 || (uint64_t v10 = *(unsigned int *)(v9 + v6 + 8), v10 == -1))
    {
      if (*(_DWORD *)(*(void *)(a1 + 40) + 160) != *(_DWORD *)(v9 + v6 + 4)) {
        goto LABEL_19;
      }
      uint64_t v10 = *(unsigned int *)(v9 + v6 + 8);
    }
    if (a2) {
      *(unsigned char *)(*a2 + v10) = 1;
    }
    if (a3) {
      *(unsigned char *)(*a3 + v10) = 1;
    }
    int v11 = *(_DWORD *)(*(void *)(a1 + 176) + 20 * *(unsigned int *)(*(void *)(a1 + 160) + 16 * v10 + 8))
        + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(*(void *)(a1 + 160) + 16 * v10 + 4));
    if (v7 > v11) {
      uint64_t v8 = v10;
    }
    if (v7 >= v11) {
      int v7 = *(_DWORD *)(*(void *)(a1 + 176) + 20 * *(unsigned int *)(*(void *)(a1 + 160) + 16 * v10 + 8))
    }
         + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(*(void *)(a1 + 160) + 16 * v10 + 4));
    unint64_t v5 = *(unsigned int *)(a1 + 200);
LABEL_19:
    ++v4;
    v6 += 28;
  }
  while (v4 < v5);
  if (v8 == 0xFFFFFFFFLL)
  {
LABEL_21:
    uint64_t v12 = *(unsigned int *)(a1 + 168);
    uint64_t v8 = 0xFFFFFFFFLL;
    while (v12)
    {
      --v12;
      if ((a4 & 1) != 0 || *(_DWORD *)(*(void *)(a1 + 160) + 16 * v12) == 16777213)
      {
        if (a2) {
          *(unsigned char *)(*a2 + v12) = 1;
        }
        uint64_t v8 = v12;
        if (a3) {
          *(unsigned char *)(*a3 + v12) = 1;
        }
        return v8;
      }
    }
  }
  return v8;
}

BOOL FstSearchLatticeHashBackoff::findBestPath(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8 = *(unsigned int *)(a1 + 168);
  if (v8) {
    BOOL v9 = *(_DWORD *)(a3 + 8) == 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    *(void *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v8;
  }
  if (v8) {
    BOOL v10 = *(_DWORD *)(a2 + 8) == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    *(void *)a2 = MemChunkAlloc(v8, 0);
    *(_DWORD *)(a2 + 8) = v8;
LABEL_14:
    uint64_t v11 = 0;
    do
    {
      *(unsigned char *)(*(void *)a2 + v11) = 0;
      *(unsigned char *)(*(void *)a3 + v11++) = 0;
    }
    while (v8 != v11);
    goto LABEL_16;
  }
  if (v8) {
    goto LABEL_14;
  }
LABEL_16:
  unsigned int BestTrace = FstSearchLatticeHashBackoff::getBestTrace(a1, (void *)a2, (void *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1) {
    return 0;
  }
  uint64_t v13 = *(void *)(a1 + 160) + 16 * BestTrace;
  LODWORD(v13) = *(_DWORD *)(*(void *)(a1 + 176) + 20 * *(unsigned int *)(v13 + 8))
               + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v13 + 4));
  *a4 = v13;
  return v13 != 1879048192;
}

unint64_t FstSearchLatticeHashBackoff::createLatticeNodes(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7)
{
  unint64_t v8 = a2;
  uint64_t v9 = a1;
  uint64_t v10 = *(unsigned int *)(a1 + 168);
  if (v10) {
    BOOL v11 = *((_DWORD *)a2 + 2) == 0;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    *a2 = MemChunkAlloc(4 * v10, 0);
    *((_DWORD *)v8 + 2) = v10;
  }
  unint64_t result = Lattice<WordLatticeLC>::createNode(a4);
  int v13 = result;
  unsigned int v14 = *(_DWORD *)(a3 + 8);
  if (v14 == *(_DWORD *)(a3 + 12))
  {
    unint64_t result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
    unsigned int v14 = *(_DWORD *)(a3 + 8);
  }
  *(_DWORD *)(*(void *)a3 + 4 * v14) = v13;
  ++*(_DWORD *)(a3 + 8);
  unsigned int v15 = *(_DWORD *)(v9 + 168);
  uint64_t v17 = a6;
  uint64_t v16 = a7;
  if (v15)
  {
    unint64_t result = 2;
    int v18 = -1;
    uint64_t v47 = v8;
    uint64_t v48 = a3;
    uint64_t v50 = v9;
    do
    {
      --v15;
      uint64_t v19 = *v8;
      *((_DWORD *)*v8 + v15) = -1;
      if (*(unsigned char *)(*v17 + v15))
      {
        uint64_t v20 = v15;
        uint64_t v21 = *(void *)(v9 + 160);
        uint64_t v22 = *(unsigned int *)(*(void *)(v9 + 88) + 4 * *(unsigned int *)(v21 + 16 * v15 + 4));
        if (*(unsigned char *)(*v16 + v15))
        {
          if (*(unsigned char *)(*v17 + v15) != 1 || v18 == -1)
          {
            int Node = Lattice<WordLatticeLC>::createNode(a4);
            *((_DWORD *)*v8 + v15) = *(_DWORD *)(a3 + 8);
            uint64_t v25 = *(unsigned int *)(a3 + 8);
            if (v25 == *(_DWORD *)(a3 + 12))
            {
              DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
              uint64_t v25 = *(unsigned int *)(a3 + 8);
            }
            *(_DWORD *)(*(void *)a3 + 4 * v25) = Node;
            int v26 = *(_DWORD *)(a3 + 8);
            *(_DWORD *)(a3 + 8) = v26 + 1;
            uint64_t v17 = a6;
            uint64_t v16 = a7;
            if (*(unsigned char *)(*a6 + v15) == 1) {
              int v18 = v26;
            }
            uint64_t v21 = *(void *)(v9 + 160);
            unint64_t result = 2;
          }
          else
          {
            *((_DWORD *)v19 + v15) = v18;
          }
        }
        uint64_t v27 = (unsigned int *)(v21 + 16 * v15);
        if ((int)v27[3] >= 1)
        {
          int v49 = v18;
          uint64_t v28 = *v27;
          unsigned int v29 = v27[2];
          do
          {
            uint64_t v30 = *(void *)(v9 + 176);
            unsigned int v31 = v29;
            unint64_t v32 = (_DWORD *)(v30 + 20 * v29);
            uint64_t v33 = v32[3];
            if ((v32[3] & 0x80000000) != 0)
            {
              *v32 += v22;
            }
            else
            {
              if (v28 == 16777209)
              {
                uint64_t v34 = *a5 + 16 * v33;
                uint64_t v36 = (_DWORD *)(v34 + 8);
                uint64_t v35 = *(unsigned int *)(v34 + 8);
                uint64_t v37 = *(void *)(v9 + 176);
                if (v35 == *(_DWORD *)(v34 + 12))
                {
                  uint64_t v38 = v20;
                  uint64_t v39 = v22;
                  uint64_t v40 = v28;
                  DgnPrimArray<unsigned int>::reallocElts(v34, 1, 1);
                  uint64_t v28 = v40;
                  uint64_t v22 = v39;
                  uint64_t v20 = v38;
                  uint64_t v9 = v50;
                  uint64_t v17 = a6;
                  unint64_t result = 2;
                  uint64_t v16 = a7;
                  uint64_t v35 = *v36;
                  uint64_t v21 = *(void *)(v50 + 160);
                  uint64_t v37 = *(void *)(v50 + 176);
                }
                *(_DWORD *)(*(void *)v34 + 4 * v35) = v15;
                ++*v36;
                uint64_t v33 = v32[3];
              }
              else
              {
                *(unsigned char *)(*v16 + v33) = 1;
                uint64_t v37 = v30;
              }
              uint64_t v41 = v21 + 16 * v33;
              int v42 = *(_DWORD *)(*(void *)(v9 + 88) + 4 * *(unsigned int *)(v41 + 4));
              uint64_t v43 = (int *)(v37 + 20 * *(unsigned int *)(v41 + 8));
              int v44 = v22 + *v32 - v42;
              int v45 = *v43;
              LODWORD(v43) = v43[1];
              *unint64_t v32 = v44 - v45;
              *(_DWORD *)(v30 + 20 * v31 + 4) -= v43;
              *(unsigned char *)(*v17 + v33) = 2;
              uint64_t v21 = *(void *)(v9 + 160);
            }
            unsigned int v29 = v31 + 1;
          }
          while ((int)(v31 + 1) < *(_DWORD *)(v21 + 16 * v20 + 12) + *(_DWORD *)(v21 + 16 * v20 + 8));
          unint64_t v8 = v47;
          a3 = v48;
          int v18 = v49;
        }
      }
    }
    while (v15);
  }
  return result;
}

uint64_t FstSearchLatticeHashBackoff::buildWordLattice(uint64_t a1, uint64_t *a2, void *a3, void *a4, char a5)
{
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  int v31 = 0;
  uint64_t v28 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v27, *(unsigned int *)(a1 + 168));
  unint64_t v8 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v8, 0, 128);
  v8[4] = (uint64_t)a2;
  FstSearchLatticeHashBackoff::createLatticeNodes(a1, &v30, (uint64_t)&v28, (uint64_t)a2, v27, a3, a4);
  uint64_t v23 = (uint64_t)v8;
  uint64_t v24 = *(unsigned int *)(a1 + 168);
  if (v24)
  {
    uint64_t v10 = 0;
    int v11 = v29;
    do
    {
      if (*(unsigned char *)(*a3 + v10))
      {
        uint64_t v12 = *(void *)(a1 + 160);
        if ((*(_DWORD *)(v12 + 16 * v10) - 16777209) >= 2)
        {
          uint64_t v13 = v12 + 16 * v10;
          if (*(int *)(v13 + 12) >= 1)
          {
            int v14 = *(_DWORD *)(v13 + 8);
            do
            {
              uint64_t v15 = *(void *)(a1 + 176) + 20 * v14;
              uint64_t v16 = *(unsigned int *)(v15 + 12);
              if (v16 == -1) {
                unsigned int v17 = 0;
              }
              else {
                unsigned int v17 = v11 - *((_DWORD *)v30 + v16);
              }
              uint64_t v18 = *(unsigned int *)(v28 + 4 * v17);
              if (*(unsigned char *)(*a4 + v10)) {
                FstSearchLatticeHashBackoff::createLatticeLink((ArcGraph **)a1, v10, (int *)v15, 0xFFFFFFFFLL, v18, (const WordLatticeLC *)*(unsigned int *)(v28 + 4 * (v11 - *((_DWORD *)v30 + v10))), a2, v9, a5);
              }
              uint64_t v19 = v27[0];
              if (*(_DWORD *)(v27[0] + 16 * v10 + 8))
              {
                unint64_t v20 = 0;
                do
                {
                  uint64_t v21 = *(unsigned int *)(*(void *)(v19 + 16 * v10) + 4 * v20);
                  FstSearchLatticeHashBackoff::createLatticeLink((ArcGraph **)a1, v10, (int *)v15, v21, v18, (const WordLatticeLC *)*(unsigned int *)(v28 + 4 * (v11 - *((_DWORD *)v30 + v21))), a2, v9, a5);
                  ++v20;
                  uint64_t v19 = v27[0];
                }
                while (v20 < *(unsigned int *)(v27[0] + 16 * v10 + 8));
              }
              ++v14;
            }
            while (v14 < *(_DWORD *)(*(void *)(a1 + 160) + 16 * v10 + 12)
                        + *(_DWORD *)(*(void *)(a1 + 160) + 16 * v10 + 8));
          }
        }
      }
      ++v10;
    }
    while (v10 != v24);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>(v23);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v27);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v28);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v30);
}

void sub_213E37EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearchLatticeHashBackoff::createLatticeLink(ArcGraph **this, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, const WordLatticeLC *a6, uint64_t *a7, uint64_t a8, char a9)
{
  unsigned int v11 = a5;
  unsigned int v12 = a4;
  if ((a4 & 0x80000000) != 0) {
    SilenceToken = 0;
  }
  else {
    SilenceToken = (_DWORD *)FstSearchLatticeHashBackoff::getSilenceToken((FstSearchLatticeHashBackoff *)this, a4, a2);
  }
  ArcGraph::lexToCWIDAC(this[5], *((_DWORD *)this[20] + 4 * a2), (uint64_t)a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8, (uint64_t)v40);
  int v17 = a3[1];
  if (SilenceToken)
  {
    v17 += SilenceToken[1];
    int v18 = *SilenceToken + *a3;
  }
  else
  {
    int v18 = *a3;
  }
  if (v40[0] >> 25 == 126)
  {
    int v19 = 0;
    int v20 = v17;
  }
  else
  {
    int v19 = *((_DWORD *)this + 34);
    int v20 = v17 - v19;
  }
  int v21 = v18 - v17;
  if ((v12 & 0x80000000) != 0)
  {
    int v22 = 0;
  }
  else
  {
    int v22 = *((_DWORD *)this + 35);
    v20 -= v22;
  }
  int v34 = v20;
  uint64_t v35 = 0;
  int v36 = v19;
  int v37 = v21;
  int v38 = 0;
  int v39 = v22;
  uint64_t v23 = a3[3];
  uint64_t v24 = this[20];
  if (v23 == -1)
  {
    int v26 = 0;
    if (a9) {
      goto LABEL_19;
    }
  }
  else
  {
    int v25 = *((_DWORD *)v24 + 4 * v23 + 1);
    if (a9)
    {
      if (v25 >= 1) {
        --v25;
      }
      int v26 = (v25 >> 1) + 1;
LABEL_19:
      int v27 = *((_DWORD *)v24 + 4 * a2 + 1);
      if (v27 >= 1) {
        --v27;
      }
      int v28 = v27 >> 1;
      int v29 = v28 - v26 + 1;
      if ((v12 & 0x80000000) == 0)
      {
        int v30 = *((_DWORD *)v24 + 4 * v12 + 1);
        if (v30 >= 1) {
          --v30;
        }
        int v31 = v30 >> 1;
        goto LABEL_28;
      }
LABEL_29:
      int v32 = 0;
      goto LABEL_30;
    }
    int v26 = v25 + 1;
  }
  int v28 = *((_DWORD *)v24 + 4 * a2 + 1);
  int v29 = v28 - v26 + 1;
  if ((v12 & 0x80000000) != 0) {
    goto LABEL_29;
  }
  int v31 = *((_DWORD *)v24 + 4 * v12 + 1);
LABEL_28:
  int v32 = v31 - v28;
LABEL_30:
  WordLatticeLC::WordLatticeLC((uint64_t)v33, (uint64_t)v40, v26, v29, v32, (uint64_t)&v34);
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v11, a6, (WordLatticeLC *)v33);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v33);
}

void sub_213E380C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLatticeHashBackoff::getSilenceToken(FstSearchLatticeHashBackoff *this, unsigned int a2, int a3)
{
  uint64_t v3 = *((void *)this + 20) + 16 * a2;
  int v4 = *(_DWORD *)(v3 + 12);
  if (v4 < 1) {
    return 0;
  }
  unsigned int v5 = *(_DWORD *)(v3 + 8);
  int v6 = v4 + v5;
  uint64_t v7 = *((void *)this + 22);
  do
  {
    if (*(_DWORD *)(v7 + 20 * v5 + 12) == a3) {
      uint64_t result = v7 + 20 * v5;
    }
    else {
      uint64_t result = 0;
    }
    ++v5;
  }
  while ((int)v5 < v6 && !result);
  return result;
}

uint64_t FstSearchLatticeHashBackoff::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(void *)(this + 112) = a2;
  if (*(unsigned char *)(this + 356)) {
    return MiniFst::beginTopFstSyncRecog(this + 240);
  }
  return this;
}

uint64_t FstSearchLatticeHashBackoff::endTopRecSyncRecog(FstSearchLatticeHashBackoff *this)
{
  VirtMap::setEmpty(*((void *)this + 14));
  uint64_t result = *((void *)this + 14);
  *((void *)this + 14) = 0;
  return result;
}

uint64_t FstSearchLatticeHashBackoff::getBestExitScore(FstSearchLatticeHashBackoff *this)
{
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  *((_DWORD *)this + 57) = -1;
  unint64_t v1 = *((unsigned int *)this + 38);
  unint64_t v2 = *((unsigned int *)this + 50);
  if (v1 >= v2) {
    goto LABEL_19;
  }
  uint64_t v4 = 0;
  unsigned int v5 = 0;
  uint64_t v6 = 28 * v1;
  do
  {
    uint64_t v7 = *((void *)this + 24) + v6;
    if (*(_DWORD *)(*((void *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      uint64_t v8 = *(unsigned int *)(v7 + 8);
      if (v8 != -1 && *(_DWORD *)(*((void *)this + 20) + 16 * v8 + 4) == *((_DWORD *)this + 56))
      {
        if (v5 == HIDWORD(v22))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v21, 1, 1);
          unsigned int v5 = v22;
          uint64_t v4 = v21;
        }
        *(_DWORD *)(v4 + 4 * v5) = v8;
        unsigned int v5 = v22 + 1;
        LODWORD(v22) = v22 + 1;
        unint64_t v2 = *((unsigned int *)this + 50);
      }
    }
    ++v1;
    v6 += 28;
  }
  while (v1 < v2);
  if (v5)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *((void *)this + 20);
    int v11 = 1879048192;
    do
    {
      uint64_t v12 = v10 + 16 * *(unsigned int *)(v4 + 4 * v9);
      int v13 = *(_DWORD *)(v12 + 12);
      if (v13 >= 1)
      {
        unsigned int v14 = *(_DWORD *)(v12 + 8);
        int v15 = v13 + v14;
        uint64_t v16 = *((void *)this + 22);
        do
        {
          unsigned int v17 = v14;
          int v18 = *(_DWORD *)(v16 + 20 * v14);
          if (v11 > v18)
          {
            *((_DWORD *)this + 57) = *(_DWORD *)(v16 + 20 * v17 + 12);
            int v11 = v18;
          }
          unsigned int v14 = v17 + 1;
        }
        while ((int)(v17 + 1) < v15);
      }
      ++v9;
    }
    while (v9 != v5);
  }
  else
  {
LABEL_19:
    int v11 = 1879048192;
  }
  if (v11 >= 20000) {
    uint64_t v19 = 20000;
  }
  else {
    uint64_t v19 = v11;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v21);
  return v19;
}

void sub_213E382E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t FstSearchLatticeHashBackoff::getBestScoreMaybeUpdateFstNode(FstSearchLatticeHashBackoff *this, Node *a2)
{
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v2 = *((unsigned int *)this + 50);
  if (v2)
  {
    uint64_t v3 = (int *)*((void *)this + 24);
    __int16 v4 = -1;
    int v5 = 1879048192;
    uint64_t v6 = v3;
    do
    {
      int v8 = *v6;
      v6 += 7;
      int v7 = v8;
      if (v5 > v8)
      {
        __int16 v4 = *((_WORD *)v3 + 6);
        int v5 = v7;
      }
      uint64_t v3 = v6;
      --v2;
    }
    while (v2);
    uint64_t v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000) {
        uint64_t v9 = 20000;
      }
      else {
        uint64_t v9 = v5;
      }
    }
  }
  else
  {
    uint64_t v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

unint64_t FstSearchLatticeHashBackoff::seedTheory(FstSearchLatticeHashBackoff *this, int a2, int a3, int a4, SearchStats *a5)
{
  if (a4 == -2)
  {
    int v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    unsigned int v11 = *((_DWORD *)this + 46);
    if (v11 == *((_DWORD *)this + 47))
    {
      DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts((uint64_t)this + 176, 1, 1);
      unsigned int v11 = *((_DWORD *)this + 46);
    }
    uint64_t v12 = *((void *)this + 22) + 20 * v11;
    *(_OWORD *)(v12 + 4) = xmmword_2140992D0;
    *((_DWORD *)this + 46) = v11 + 1;
    *(_DWORD *)uint64_t v12 = a2;
    unsigned int v13 = *((_DWORD *)this + 42);
    if (v13 == *((_DWORD *)this + 43))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 160, 1, 1);
      unsigned int v13 = *((_DWORD *)this + 42);
    }
    unsigned int v14 = (_DWORD *)(*((void *)this + 20) + 16 * v13);
    *unsigned int v14 = a4;
    v14[1] = a3;
    v14[2] = v11;
    v14[3] = 1;
    int v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  int v15 = *(_DWORD *)(*((void *)this + 5) + 144);
  unsigned int v16 = *((_DWORD *)this + 50);
  if (v16 == *((_DWORD *)this + 51))
  {
    DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)this + 192, 1, 1);
    unsigned int v16 = *((_DWORD *)this + 50);
  }
  uint64_t v17 = *((void *)this + 24) + 28 * v16;
  *(_DWORD *)uint64_t v17 = a2;
  *(_DWORD *)(v17 + 4) = v15;
  *(_DWORD *)(v17 + 8) = v9;
  *(_WORD *)(v17 + 12) = -2;
  *(void *)(v17 + 16) = 0;
  *(_DWORD *)(v17 + 24) = -1;
  LODWORD(v17) = *((_DWORD *)this + 50) + 1;
  *((_DWORD *)this + 50) = v17;
  *((_DWORD *)this + 38) = v17;

  return FstSearchLatticeHashBackoff::propagateNulls(this, 20000, a3, a5);
}

uint64_t FstSearchLatticeHashBackoff::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(unsigned int *)(result + 228);
  if (v8 != -1)
  {
    int v9 = (void *)result;
    uint64_t v10 = (unsigned int *)(*(void *)(result + 160) + 16 * v8);
    for (i = *(unsigned int *)(*(void *)(result + 176) + 20 * v10[2] + 12); i != -1; uint64_t v8 = v16)
    {
      uint64_t v16 = i;
      uint64_t result = v9[5];
      if (*v10 == 16777209)
      {
        int v17 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        uint64_t result = ArcGraph::lexToCWID((ArcGraph *)result, *v10, a3, (uint64_t)a4, a5, a6, a7, a8);
        int v17 = result;
      }
      uint64_t v18 = *(unsigned int *)(a2 + 8);
      if (v18 == *(_DWORD *)(a2 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        uint64_t v18 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(void *)a2 + 4 * v18) = v17;
      ++*(_DWORD *)(a2 + 8);
      uint64_t v19 = *(unsigned int *)(a6 + 8);
      if (v19 == *(_DWORD *)(a6 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        uint64_t v19 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(void *)a6 + 4 * v19) = v8;
      ++*(_DWORD *)(a6 + 8);
      uint64_t v20 = v9[20];
      int v21 = *(_DWORD *)(v20 + 16 * v8 + 4);
      uint64_t v22 = *(unsigned int *)(a3 + 8);
      if (v22 == *(_DWORD *)(a3 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        uint64_t v22 = *(unsigned int *)(a3 + 8);
        uint64_t v20 = v9[20];
      }
      *(_DWORD *)(*(void *)a3 + 4 * v22) = v21;
      ++*(_DWORD *)(a3 + 8);
      int v23 = *(_DWORD *)(v9[22] + 20 * *(unsigned int *)(v20 + 16 * v8 + 8));
      uint64_t v24 = *(unsigned int *)(a5 + 8);
      if (v24 == *(_DWORD *)(a5 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        uint64_t v24 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(void *)a5 + 4 * v24) = v23;
      ++*(_DWORD *)(a5 + 8);
      uint64_t v10 = (unsigned int *)(v9[20] + 16 * v16);
      uint64_t i = *(unsigned int *)(v9[22] + 20 * v10[2] + 12);
    }
    *a4 = *v10;
  }
  return result;
}

void FstSearchLatticeHashBackoff::checkSearchParametersValidityForArcGraph(FstSearchLatticeHashBackoff *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *((void *)this + 5);
  if (*(unsigned char *)(v8 + 178))
  {
    int v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(unsigned char *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    }
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    }
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(void *)(**(void **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((void *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if (a2)
      {
        if (!*(unsigned char *)(v8 + 203)) {
          return;
        }
      }
      else if (*(unsigned char *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(unsigned char *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

void FstSearchLatticeHashBackoff::getHistory(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 == -1)
  {
    *(_DWORD *)(a3 + 8) = 0;
  }
  else
  {
    int v9 = a4;
    LODWORD(v11) = 0;
    uint64_t v12 = a2;
    uint64_t v13 = a2;
    do
    {
      unsigned int v14 = (_DWORD *)(*(void *)(a1 + 160) + 16 * v13);
      if (*v14 == 16777209) {
        uint64_t v11 = v11;
      }
      else {
        uint64_t v11 = (v11 + 1);
      }
      uint64_t v13 = *(unsigned int *)(*(void *)(a1 + 176) + 20 * v14[2] + 12);
    }
    while (v13 != -1);
    unsigned int v15 = *(_DWORD *)(a3 + 12);
    if (v11 > v15) {
      DgnArray<PrefilterResultFrame>::reallocElts(a3, v11 - v15, 0);
    }
    uint64_t v16 = *(unsigned int *)(a3 + 8);
    if (v16 < v11)
    {
      uint64_t v17 = v11 - v16;
      uint64_t v18 = *(void *)a3 + 32 * v16;
      do
      {
        *(void *)uint64_t v18 = 0x3FFFFAFFFFFFLL;
        *(_OWORD *)(v18 + 8) = xmmword_2140866D0;
        *(void *)(v18 + 24) = 0x1F0000001FLL;
        v18 += 32;
        --v17;
      }
      while (v17);
    }
    *(_DWORD *)(a3 + 8) = v11;
    if (v11)
    {
      uint64_t v19 = *(void *)(a1 + 160);
      int v20 = -16;
      do
      {
        int v21 = (unsigned int *)(v19 + 16 * v12);
        int v22 = v21[1];
        if (*v21 == 16777209)
        {
          if (v9)
          {
            int v23 = v22 - 1;
            if (v22 < 1) {
              int v23 = v22;
            }
            int v20 = (v23 >> 1) + 1;
          }
          else
          {
            int v20 = v22 + 1;
          }
        }
        else
        {
          if (v9)
          {
            int v24 = v22 - 1;
            if (v22 < 1) {
              int v24 = v21[1];
            }
            int v22 = v24 >> 1;
          }
          ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *v21, a3, a4, a5, a6, a7, a8, (uint64_t)v28);
          if (v20 == -16) {
            int v25 = v22 + 1;
          }
          else {
            int v25 = v20;
          }
          int v26 = v28[1];
          uint64_t v11 = (v11 - 1);
          uint64_t v27 = *(void *)a3 + 32 * v11;
          *(_DWORD *)uint64_t v27 = v28[0];
          *(_DWORD *)(v27 + 4) = v26;
          *(_OWORD *)(v27 + 8) = v29;
          *(_DWORD *)(v27 + 24) = v22 + 1;
          *(_DWORD *)(v27 + 28) = v25;
          uint64_t v19 = *(void *)(a1 + 160);
          int v20 = -16;
        }
        uint64_t v12 = *(unsigned int *)(*(void *)(a1 + 176) + 20 * *(unsigned int *)(v19 + 16 * v12 + 8) + 12);
      }
      while (v12 != -1);
    }
  }
}

uint64_t FstSearchLatticeHashBackoff::makePartialResult(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    uint64_t v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(void *)a2 + v9))(*(void *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  unsigned int BestTrace = FstSearchLatticeHashBackoff::getBestTrace((uint64_t)a1, 0, 0, 1);
  if (BestTrace == -1) {
    return 1879048192;
  }
  unsigned int v15 = BestTrace;
  FstSearchLatticeHashBackoff::getHistory((uint64_t)a1, BestTrace, a3, a4, v11, v12, v13, v14);
  memset(v25, 0, sizeof(v25));
  int v26 = 0;
  if (*(_DWORD *)(a3 + 8))
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    int v18 = 0;
    do
    {
      uint64_t v19 = *(void *)a3 + v16;
      int v20 = *(_DWORD *)(v19 + 28);
      WordLatticeLC::WordLatticeLC((uint64_t)v24, v19, v18, *(_DWORD *)(v19 + 24) - v18, v20 - *(_DWORD *)(v19 + 24), (uint64_t)v25);
      uint64_t v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(void *)a2 + 112 * v21), (const WordLatticeLC *)v24);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v24);
      ++v17;
      v16 += 32;
      int v18 = v20;
    }
    while (v17 < *(unsigned int *)(a3 + 8));
  }
  uint64_t v22 = a1[20] + 16 * v15;
  return (*(_DWORD *)(a1[22] + 20 * *(unsigned int *)(v22 + 8))
                      + *(_DWORD *)(a1[11] + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_213E38BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int64x2_t FstSearchLatticeHash::advanceDeltas(FstSearchLatticeHash *this, int a2, int a3, SearchStats *a4, int a5)
{
  v96[0] = a2;
  int64x2_t v94 = 0u;
  int64x2_t v95 = 0u;
  SnapTime::recordTime((SnapTime *)&v94, 1, 0, 0, 0);
  *(void *)uint64_t v93 = 0xFFFFFFFF00000000;
  *(_DWORD *)&v93[8] = -1;
  *(_WORD *)&v93[12] = -2;
  *(void *)&v93[16] = 0;
  *(_DWORD *)&v93[24] = -1;
  *((_DWORD *)this + 58) = a3;
  uint64_t v10 = (int *)((char *)this + 232);
  int v11 = *((_DWORD *)this + 2);
  unint64_t v12 = *((unsigned int *)this + 50);
  if (v12)
  {
    int v72 = a5;
    uint64_t v73 = a4;
    for (unint64_t i = 0; i < v12; ++i)
    {
      uint64_t v14 = *((void *)this + 24);
      unsigned int v15 = (int *)(v14 + 28 * i);
      uint64_t v16 = v15[1];
      uint64_t v17 = *((void *)this + 5);
      if (*(_DWORD *)(v17 + 160) != v16)
      {
        if (*(_DWORD *)(v17 + 140) > (int)v16)
        {
          int v18 = *v15;
          int v19 = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(v14 + 28 * i + 12))+ v18;
          int v20 = *((_DWORD *)this + 58);
          if (v19 - v11 <= v20)
          {
            if (v20 > v19) {
              *uint64_t v10 = v19;
            }
            uint64_t v21 = (_OWORD *)(*((void *)this + 24) + 28 * i);
            long long v22 = *(_OWORD *)((char *)v21 + 12);
            *(_OWORD *)uint64_t v93 = *v21;
            *(_OWORD *)&v93[12] = v22;
            *(_DWORD *)uint64_t v93 = v19;
            FstSearchLatticeHashBackoff::maybeInsertHashedToken((uint64_t)this, (int *)v93);
          }
        }
        unsigned int v23 = v16;
        do
        {
          uint64_t v24 = *((void *)this + 5);
          uint64_t v25 = *(void *)(v24 + 152);
          unsigned int v26 = *(_DWORD *)(v25 + 4 * v23);
          int v27 = *(_DWORD *)(v25 + 4 * (v23 + 1));
          int v28 = *(_DWORD *)(v24 + 140);
          if (v28 <= v27)
          {
            if (v28 <= (int)v16 && *((unsigned char *)this + 356) != 0)
            {
              unsigned int v36 = (v26 & 0xFFFFF) <= 0xFFFF3 ? v26 & 0xFFFFF : v26 & 0xFFFFF | 0xF00000;
              if (v36 != 16777210)
              {
                DgnString::DgnString((DgnString *)&v90);
                ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v36, (DgnString *)&v90, v37, v38, v39, v40, v41);
                uint64_t v46 = &unk_214099300;
                if (v90.i32[2]) {
                  uint64_t v46 = (void *)v90.i64[0];
                }
                xprintf("Seed from state %d score %d trace %d, %s\n", v42, v43, v44, v45, v16, *(unsigned int *)(*((void *)this + 24) + 28 * i), *(unsigned int *)(*((void *)this + 24) + 28 * i + 8), v46);
                MiniFst::seed((uint64_t)this + 240, *(_DWORD *)(*((void *)this + 24) + 28 * i), *(_DWORD *)(*((void *)this + 24) + 28 * i + 20), *(_DWORD *)(*((void *)this + 24) + 28 * i + 8), v27);
                DgnString::~DgnString((DgnString *)&v90);
              }
            }
          }
          else
          {
            int v29 = (v26 >> 20) & 0x3FF;
            int ScoreNoBackoff = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), (unsigned __int16)*(_DWORD *)(v25 + 4 * v23));
            uint64_t v31 = *((void *)this + 24) + 28 * i;
            int v32 = ScoreNoBackoff + v29 + *(_DWORD *)v31;
            int v33 = *((_DWORD *)this + 58);
            if (v32 - v11 <= v33)
            {
              if (v33 > v32) {
                *uint64_t v10 = v32;
              }
              long long v34 = *(_OWORD *)(v31 + 12);
              *(_OWORD *)uint64_t v93 = *(_OWORD *)v31;
              *(_OWORD *)&v93[12] = v34;
              *(_DWORD *)uint64_t v93 = v32;
              *(_DWORD *)&v93[4] = v27;
              *(_WORD *)&v93[12] = v26;
              *(_DWORD *)&v93[16] = DWORD1(v34) + v29;
              FstSearchLatticeHashBackoff::maybeInsertHashedToken((uint64_t)this, (int *)v93);
            }
          }
          v23 += 2;
        }
        while ((v26 & 0x80000000) == 0);
        unint64_t v12 = *((unsigned int *)this + 50);
      }
    }
    a3 = *v10;
    a4 = v73;
    a5 = v72;
  }
  int v92 = a3 + v11;
  if (*((unsigned char *)this + 356)) {
    MiniFst::updateFrame((char *)this + 240, (int *)this + 58, v11, a2);
  }
  int64x2_t v90 = 0u;
  int64x2_t v91 = 0u;
  SnapTime::recordTime((SnapTime *)&v90, 1, 0, 0, 0);
  int64x2_t v90 = vsubq_s64(v90, v94);
  int64x2_t v91 = vsubq_s64(v91, v95);
  uint64_t v47 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v48 = vaddq_s64(v47[1], v91);
  *uint64_t v47 = vaddq_s64(*v47, v90);
  v47[1] = v48;
  int64x2_t v88 = 0u;
  int64x2_t v89 = 0u;
  SnapTime::recordTime((SnapTime *)&v88, 1, 0, 0, 0);
  FstSearchLatticeHashBackoff::applyCutoffOnEmitting((uint64_t)this, *((_DWORD *)this + 4), &v92);
  int64x2_t v86 = 0u;
  int64x2_t v87 = 0u;
  SnapTime::recordTime((SnapTime *)&v86, 1, 0, 0, 0);
  int64x2_t v49 = vsubq_s64(v86, v88);
  uint64_t v50 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v51 = v50[3];
  int64x2_t v52 = vaddq_s64(v50[2], v49);
  int64x2_t v86 = v49;
  int64x2_t v87 = vsubq_s64(v87, v89);
  int64x2_t v53 = vaddq_s64(v51, v87);
  v50[2] = v52;
  int v50[3] = v53;
  int64x2_t v84 = 0u;
  int64x2_t v85 = 0u;
  SnapTime::recordTime((SnapTime *)&v84, 1, 0, 0, 0);
  uint64_t v54 = *((void *)this + 24);
  uint64_t v55 = *((void *)this + 26);
  *((void *)this + 24) = v55;
  *((void *)this + 26) = v54;
  LODWORD(v54) = *((_DWORD *)this + 51);
  uint64_t v56 = *((void *)this + 27);
  *((void *)this + 25) = v56;
  *((_DWORD *)this + 54) = 0;
  *((_DWORD *)this + 55) = v54;
  unint64_t v57 = *((unsigned int *)this + 6);
  if (v57 && v56 && v57 < v56) {
    mrec_nth_element<FstSearchLatticeHashBackoffcmpTok>(v55, v57, v56);
  }
  FstSearchLatticeHashBackoff::generateNullTraces((unint64_t)this, a2, 0);
  int64x2_t v82 = 0u;
  int64x2_t v83 = 0u;
  SnapTime::recordTime((SnapTime *)&v82, 1, 0, 0, 0);
  int64x2_t v58 = vsubq_s64(v82, v84);
  uint64_t v59 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v60 = v59[5];
  int64x2_t v61 = vaddq_s64(v59[4], v58);
  int64x2_t v82 = v58;
  int64x2_t v83 = vsubq_s64(v83, v85);
  int64x2_t v62 = vaddq_s64(v60, v83);
  v59[4] = v61;
  v59[5] = v62;
  int64x2_t v80 = 0u;
  int64x2_t v81 = 0u;
  SnapTime::recordTime((SnapTime *)&v80, 1, 0, 0, 0);
  VirtMap::setEmpty(*((void *)this + 14));
  int64x2_t v78 = 0u;
  int64x2_t v79 = 0u;
  SnapTime::recordTime((SnapTime *)&v78, 1, 0, 0, 0);
  int64x2_t v63 = vsubq_s64(v78, v80);
  int v64 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v65 = v64[9];
  int64x2_t v66 = vaddq_s64(v64[8], v63);
  int64x2_t v78 = v63;
  int64x2_t v79 = vsubq_s64(v79, v81);
  int64x2_t v67 = vaddq_s64(v65, v79);
  v64[8] = v66;
  v64[9] = v67;
  int64x2_t v76 = 0u;
  int64x2_t v77 = 0u;
  SnapTime::recordTime((SnapTime *)&v76, 1, 0, 0, 0);
  *((_DWORD *)this + 54) = 0;
  uint64_t v68 = *((unsigned int *)this + 50);
  *((_DWORD *)this + 38) = v68;
  if (a4)
  {
    *((void *)a4 + 2) += v68;
    if (*((_DWORD *)a4 + 2) > v68) {
      LODWORD(v68) = *((_DWORD *)a4 + 2);
    }
    *((_DWORD *)a4 + 2) = v68;
  }
  if (*((unsigned char *)this + 356)) {
    FstSearchLatticeHash::seedFromMiniFst((uint64_t)this, v96);
  }
  if (a5) {
    FstSearchLatticeHashBackoff::propagateNulls(this, v92, a2, a4);
  }
  *((_DWORD *)this + 56) = a2;
  int64x2_t v74 = 0u;
  int64x2_t v75 = 0u;
  SnapTime::recordTime((SnapTime *)&v74, 1, 0, 0, 0);
  uint64_t v69 = (int64x2_t *)*((void *)this + 13);
  int64x2_t result = vaddq_s64(v69[6], vsubq_s64(v74, v76));
  int64x2_t v71 = vaddq_s64(v69[7], vsubq_s64(v75, v77));
  v69[6] = result;
  v69[7] = v71;
  return result;
}

void sub_213E39198(_Unwind_Exception *exception_object)
{
}

uint64_t FstSearchLatticeHash::seedFromMiniFst(uint64_t this, int *a2)
{
  if (*(unsigned char *)(this + 356))
  {
    uint64_t v2 = this;
    unsigned int v3 = *(_DWORD *)(this + 264);
    if (v3 >= *(_DWORD *)(this + 20)) {
      unsigned int v3 = *(_DWORD *)(this + 20);
    }
    if (v3)
    {
      unint64_t v4 = 0;
      uint64_t v46 = this + 176;
      uint64_t v47 = (void *)(this + 160);
      uint64_t v39 = this + 192;
      do
      {
        int v5 = (int *)(*(void *)(v2 + 256) + 36 * v4);
        int v6 = v5[4];
        int v7 = v5[5];
        int v8 = v5[6];
        int v44 = *v5;
        int v45 = v5[7];
        unsigned int v9 = v5[2];
        uint64_t v48 = 0;
        uint64_t v49 = 0;
        int v42 = v7;
        int v43 = v6;
        int v41 = v8;
        if ((v9 & 0x80000000) != 0)
        {
          LODWORD(v13) = -2 - v9;
        }
        else
        {
          uint64_t v10 = 0;
          unsigned int v11 = 0;
          do
          {
            if (v11 == HIDWORD(v49))
            {
              DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v48, 1, 1);
              unsigned int v11 = v49;
              uint64_t v10 = v48;
            }
            *(_DWORD *)(v10 + 4 * v11) = v9;
            uint64_t v12 = v49;
            unsigned int v11 = v49 + 1;
            LODWORD(v49) = v49 + 1;
            unsigned int v9 = *(_DWORD *)(*(void *)(v2 + 240) + 36 * v9 + 8);
          }
          while ((v9 & 0x80000000) == 0);
          LODWORD(v13) = -2 - v9;
          if ((v12 & 0x80000000) == 0)
          {
            int v14 = v12 + 1;
            uint64_t v15 = 4 * v12;
            do
            {
              unsigned int v16 = *(_DWORD *)(v48 + v15);
              uint64_t v17 = *(void *)(v2 + 240);
              int v18 = (int *)(v17 + 36 * v16);
              int v19 = *v18;
              uint64_t v20 = *((void *)v18 + 2);
              unsigned int v21 = *(_DWORD *)(v2 + 184);
              if (v21 == *(_DWORD *)(v2 + 188))
              {
                DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts(v46, 1, 1);
                unsigned int v21 = *(_DWORD *)(v2 + 184);
                uint64_t v17 = *(void *)(v2 + 240);
              }
              uint64_t v22 = *(void *)(v2 + 176) + 20 * v21;
              *(_DWORD *)(v2 + 184) = v21 + 1;
              *(_DWORD *)uint64_t v22 = v19;
              *(void *)(v22 + 4) = v20;
              *(_DWORD *)(v22 + 12) = v13;
              *(_DWORD *)(v22 + 16) = -1;
              uint64_t v23 = *(void *)(v17 + 36 * v16 + 28);
              uint64_t v24 = *(unsigned int *)(v2 + 168);
              if (v24 == *(_DWORD *)(v2 + 172))
              {
                DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v47, 1, 1);
                uint64_t v24 = *(unsigned int *)(v2 + 168);
              }
              uint64_t v25 = *(void *)(v2 + 160);
              uint64_t v26 = v25 + 16 * v24;
              *(void *)uint64_t v26 = v23;
              *(_DWORD *)(v26 + 8) = v21;
              *(_DWORD *)(v26 + 12) = 0;
              uint64_t v13 = *(unsigned int *)(v2 + 168);
              *(_DWORD *)(v2 + 168) = v13 + 1;
              *(_DWORD *)(v25 + 16 * v13 + 12) = 1;
              --v14;
              v15 -= 4;
            }
            while (v14 > 0);
          }
        }
        unsigned int v27 = *(_DWORD *)(v2 + 184);
        if (v27 == *(_DWORD *)(v2 + 188))
        {
          DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts(v46, 1, 1);
          unsigned int v27 = *(_DWORD *)(v2 + 184);
        }
        uint64_t v28 = *(void *)(v2 + 176);
        *(_DWORD *)(v2 + 184) = v27 + 1;
        int v29 = (_DWORD *)(v28 + 20 * v27);
        *int v29 = v44;
        v29[1] = v43;
        v29[2] = v42;
        int v29[3] = v13;
        v29[4] = -1;
        if (v45 == 16777213)
        {
          int v45 = 16777209;
          if (*(_DWORD *)(*v47 + 16 * v13) == 16777209)
          {
            unsigned int v27 = *(_DWORD *)(*v47 + 16 * v13 + 8);
            int v45 = 16777209;
          }
        }
        int v30 = *a2;
        uint64_t v31 = *(unsigned int *)(v2 + 168);
        if (v31 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v47, 1, 1);
          uint64_t v31 = *(unsigned int *)(v2 + 168);
        }
        uint64_t v32 = *(void *)(v2 + 160);
        int v33 = (int *)(v32 + 16 * v31);
        *int v33 = v45;
        v33[1] = v30;
        v33[2] = v27;
        v33[3] = 0;
        uint64_t v34 = *(unsigned int *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v34 + 1;
        *(_DWORD *)(v32 + 16 * v34 + 12) = 1;
        uint64_t v35 = *(unsigned int *)(v2 + 200);
        if (v35 == *(_DWORD *)(v2 + 204))
        {
          DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(v39, 1, 1);
          LODWORD(v35) = *(_DWORD *)(v2 + 200);
        }
        uint64_t v36 = *(void *)(v2 + 192) + 28 * v35;
        *(_DWORD *)uint64_t v36 = v44;
        *(_DWORD *)(v36 + 4) = v41;
        *(_DWORD *)(v36 + 8) = v34;
        *(_WORD *)(v36 + 12) = -2;
        *(_DWORD *)(v36 + 16) = v43;
        *(_DWORD *)(v36 + 20) = v42;
        *(_DWORD *)(v36 + 24) = -1;
        ++*(_DWORD *)(v2 + 200);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v48);
        ++v4;
        LODWORD(v37) = *(_DWORD *)(v2 + 264);
        unsigned int v38 = *(_DWORD *)(v2 + 20);
        if (v37 >= v38) {
          unint64_t v37 = v38;
        }
        else {
          unint64_t v37 = v37;
        }
      }
      while (v4 < v37);
    }
  }
  return this;
}

void sub_213E39530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t FstSearchLatticeHash::annihilateNullTraces(unint64_t this)
{
  if (*(_DWORD *)(this + 168))
  {
    unint64_t v1 = this;
    uint64_t v2 = 0;
    unsigned int v3 = (void *)(this + 176);
    do
    {
      uint64_t v37 = *(void *)(v1 + 160);
      unsigned int v38 = 0;
      uint64_t v39 = 0;
      FstSearchLatticeHashBackoff::getCandidateTokensForTrace(v1, v37 + 16 * v2, (uint64_t)&v38);
      unsigned int v4 = v39;
      int v5 = (char *)v38;
      if (v39 < 2
        || (mrec_qsort_r<FstSearchLateLatticeHashBackoffcmpTokLmhst>((char *)v38 + 20, (v39 - 1), 20),
            unsigned int v4 = v39,
            int v5 = (char *)v38,
            v39 < 2))
      {
        unsigned int v7 = 0;
        long long v9 = xmmword_2140992A0;
      }
      else
      {
        uint64_t v6 = 0;
        unsigned int v7 = 0;
        uint64_t v8 = 20 * v39 - 20;
        long long v9 = xmmword_2140992A0;
        do
        {
          uint64_t v10 = &v5[v6];
          int v11 = *(_DWORD *)&v5[v6 + 28];
          if (v11 != *(_DWORD *)&v5[20 * v7 + 8] && *((_DWORD *)v5 + 2) != v11)
          {
            ++v7;
            long long v12 = *(_OWORD *)(v10 + 20);
            uint64_t v13 = &v5[20 * v7];
            *((_DWORD *)v13 + 4) = *((_DWORD *)v10 + 9);
            *(_OWORD *)uint64_t v13 = v12;
          }
          v6 += 20;
        }
        while (v8 != v6);
      }
      uint64_t v14 = v7 + 1;
      if (HIDWORD(v39) < v14)
      {
        uint64_t v40 = 0;
        HIDWORD(v39) = realloc_array(v5, &v40, 20 * v14, 20 * v4, 20 * v4, 1) / 0x14;
        int v5 = (char *)v40;
        unsigned int v38 = v40;
        unsigned int v4 = v39;
        long long v9 = xmmword_2140992A0;
      }
      if (v4 < v14)
      {
        uint64_t v15 = v14 - v4;
        unsigned int v16 = &v5[20 * v4 + 16];
        do
        {
          *((_OWORD *)v16 - 1) = v9;
          *(_DWORD *)unsigned int v16 = -1;
          v16 += 20;
          --v15;
        }
        while (v15);
      }
      LODWORD(v39) = v7 + 1;
      mrec_qsort_r<FstSearchLateLatticeHashBackoffcmpTok>(v5 + 20, v7, 20);
      unint64_t v17 = v39;
      unint64_t v18 = *(unsigned int *)(v1 + 20);
      uint64_t v36 = v2;
      if (v39 > v18)
      {
        if (HIDWORD(v39) < v18)
        {
          uint64_t v40 = 0;
          HIDWORD(v39) = realloc_array(v38, &v40, 20 * v18, 20 * v39, 20 * v39, 1)
                       / 0x14;
          unsigned int v38 = v40;
          unint64_t v17 = v39;
        }
        if (v17 < v18)
        {
          unint64_t v19 = v18 - v17;
          uint64_t v20 = (char *)v38 + 20 * v17 + 16;
          do
          {
            *((_OWORD *)v20 - 1) = xmmword_2140992A0;
            _DWORD *v20 = -1;
            v20 += 5;
            --v19;
          }
          while (v19);
        }
        LODWORD(v39) = v18;
        unint64_t v17 = v18;
      }
      if (v17)
      {
        uint64_t v21 = 0;
        unint64_t v22 = 0;
        uint64_t v23 = v37 + 16 * v2;
        uint64_t v24 = (_DWORD *)(v23 + 12);
        uint64_t v25 = (_DWORD *)(v23 + 8);
        uint64_t v26 = 0xFFFFFFFFLL;
        do
        {
          if (*v24 <= (int)v22)
          {
            uint64_t v30 = *(unsigned int *)(v1 + 184);
            uint64_t v31 = *(void *)(v1 + 176);
            *(_DWORD *)(v31 + 20 * v26 + 16) = v30;
            uint64_t v32 = (char *)v38;
            if (v30 == *(_DWORD *)(v1 + 188))
            {
              DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts((uint64_t)v3, 1, 1);
              unsigned int v33 = *(_DWORD *)(v1 + 184);
              uint64_t v31 = *(void *)(v1 + 176);
              unint64_t v17 = v39;
            }
            else
            {
              unsigned int v33 = v30;
            }
            uint64_t v34 = v31 + 20 * v33;
            long long v35 = *(_OWORD *)&v32[v21];
            *(_DWORD *)(v34 + 16) = *(_DWORD *)&v32[v21 + 16];
            *(_OWORD *)uint64_t v34 = v35;
            ++*(_DWORD *)(v1 + 184);
          }
          else
          {
            uint64_t v27 = *v3 + 20 * (v22 + *v25);
            long long v28 = *(_OWORD *)((char *)v38 + v21);
            *(_DWORD *)(v27 + 16) = *(_DWORD *)((char *)v38 + v21 + 16);
            *(_OWORD *)uint64_t v27 = v28;
            unsigned int v29 = v22 + *v25;
            if (v22) {
              *(_DWORD *)(*v3 + 20 * (v22 + *v25 - 1) + 16) = v29;
            }
            uint64_t v30 = v29;
          }
          ++v22;
          v21 += 20;
          uint64_t v26 = v30;
        }
        while (v22 < v17);
      }
      *(_DWORD *)(v37 + 16 * v36 + 12) = 0;
      this = DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v38);
      uint64_t v2 = v36 + 1;
    }
    while (v36 + 1 < (unint64_t)*(unsigned int *)(v1 + 168));
  }
  return this;
}

void sub_213E398C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLatticeHash::collectTraces(FstSearchLatticeHash *this)
{
  uint64_t v2 = *((unsigned int *)this + 42);
  unsigned int v43 = 0;
  int v42 = 0;
  if (v2)
  {
    unsigned int v3 = MemChunkAlloc(4 * v2, 0);
    unint64_t v4 = 0;
    int v42 = v3;
    unsigned int v43 = v2;
    do
      *((_DWORD *)v3 + v4++) = 0;
    while (v4 < v43);
  }
  unint64_t v5 = *((unsigned int *)this + 50);
  if (v5)
  {
    unint64_t v6 = 0;
    unsigned int v7 = v42;
    uint64_t v8 = (unsigned int *)(*((void *)this + 24) + 8);
    do
    {
      unsigned int v10 = *v8;
      v8 += 7;
      uint64_t v9 = v10;
      if (v10 != -1)
      {
        *((_DWORD *)v7 + v9) = 1;
        unint64_t v5 = *((unsigned int *)this + 50);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  LODWORD(v11) = *((_DWORD *)this + 42);
  if (v11)
  {
    char v12 = 0;
    uint64_t v13 = (uint64_t *)((char *)this + 160);
    uint64_t v14 = v42;
    do
    {
      uint64_t v11 = (v11 - 1);
      if (v12)
      {
        char v12 = 1;
      }
      else if (*(_DWORD *)(*v13 + 16 * v11) == 16777213)
      {
        char v12 = 1;
        *((_DWORD *)v14 + v11) = 1;
      }
      else
      {
        char v12 = 0;
      }
      if (*((_DWORD *)v14 + v11))
      {
        uint64_t v15 = *(unsigned int *)(*v13 + 16 * v11 + 8);
        if (v15 != -1)
        {
          uint64_t v16 = *((void *)this + 22);
          do
          {
            uint64_t v17 = *(unsigned int *)(v16 + 20 * v15 + 12);
            if (v17 != -1) {
              *((_DWORD *)v14 + v17) = 1;
            }
            uint64_t v15 = *(unsigned int *)(v16 + 20 * v15 + 16);
          }
          while (v15 != -1);
        }
      }
    }
    while (v11);
    unsigned int v18 = *((_DWORD *)this + 42);
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    if (v18)
    {
      unint64_t v19 = 0;
      unsigned int v20 = 0;
      do
      {
        if (*((_DWORD *)v42 + v19))
        {
          uint64_t v21 = *v13;
          if (v19 != v20)
          {
            *(_OWORD *)(v21 + 16 * v20) = *(_OWORD *)(v21 + 16 * v19);
            uint64_t v21 = *v13;
          }
          unsigned int v22 = v41;
          *(_DWORD *)(v21 + 16 * v20 + 8) = v41;
          uint64_t v23 = *(unsigned int *)(v21 + 16 * v19 + 8);
          if (v23 == -1)
          {
            uint64_t v24 = v40;
            unsigned int v25 = v22;
          }
          else
          {
            uint64_t v26 = *((void *)this + 22);
            unsigned int v25 = v22;
            do
            {
              if (v25 == HIDWORD(v41))
              {
                DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts((uint64_t)&v40, 1, 1);
                unsigned int v25 = v41;
              }
              uint64_t v24 = v40;
              uint64_t v27 = v40 + 20 * v25;
              *(_OWORD *)uint64_t v27 = *(_OWORD *)(v26 + 20 * v23);
              LODWORD(v41) = ++v25;
              unsigned int v30 = *(_DWORD *)(v27 + 12);
              long long v28 = (_DWORD *)(v27 + 12);
              uint64_t v29 = v30;
              v28[1] = v25;
              if (v30 != -1) {
                *long long v28 = *((_DWORD *)v42 + v29);
              }
              uint64_t v26 = *((void *)this + 22);
              uint64_t v23 = *(unsigned int *)(v26 + 20 * v23 + 16);
            }
            while (v23 != -1);
            uint64_t v21 = *v13;
            unsigned int v22 = *(_DWORD *)(*v13 + 16 * v20 + 8);
          }
          *(_DWORD *)(v24 + 20 * (v25 - 1) + 16) = -1;
          *(_DWORD *)(v21 + 16 * v20 + 12) = v25 - v22;
          *((_DWORD *)v42 + v19) = v20++;
          unsigned int v18 = *((_DWORD *)this + 42);
        }
        ++v19;
      }
      while (v19 < v18);
      unsigned int v31 = *((_DWORD *)this + 43);
      if (v20 > v31)
      {
        DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 160, v20 - v31, 0);
        unsigned int v18 = *((_DWORD *)this + 42);
      }
      if (v18 < v20)
      {
        unint64_t v32 = v20 - (unint64_t)v18;
        unsigned int v33 = (_OWORD *)(*v13 + 16 * v18);
        do
        {
          *v33++ = xmmword_2140992B0;
          --v32;
        }
        while (v32);
      }
    }
    else
    {
      unsigned int v20 = 0;
    }
  }
  else
  {
    unsigned int v20 = 0;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
  }
  *((_DWORD *)this + 42) = v20;
  uint64_t v34 = *((void *)this + 22);
  *((void *)this + 22) = v40;
  uint64_t v40 = v34;
  LODWORD(v34) = *((_DWORD *)this + 47);
  *((void *)this + 23) = v41;
  LODWORD(v41) = 0;
  HIDWORD(v41) = v34;
  uint64_t v35 = *((unsigned int *)this + 50);
  if (v35)
  {
    uint64_t v36 = v42;
    uint64_t v37 = (_DWORD *)(*((void *)this + 24) + 8);
    do
    {
      uint64_t v38 = *v37;
      if (v38 != -1) {
        *uint64_t v37 = *((_DWORD *)v36 + v38);
      }
      v37 += 7;
      --v35;
    }
    while (v35);
  }
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v40);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v42);
}

void sub_213E39C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

int64x2_t FstSearchLatticeHash::vite(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  FstSearchLatticeHash::advanceDeltas((FstSearchLatticeHash *)this, a2, a3, a4, a5);
  int64x2_t v13 = 0u;
  int64x2_t v14 = 0u;
  SnapTime::recordTime((SnapTime *)&v13, 1, 0, 0, 0);
  if (a2 >= 1)
  {
    unsigned int v7 = *((_DWORD *)this + 18);
    if (v7)
    {
      if (!(a2 % v7)) {
        FstSearchLatticeHash::collectTraces((FstSearchLatticeHash *)this);
      }
    }
  }
  int64x2_t v11 = 0u;
  int64x2_t v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  uint64_t v8 = this[13];
  int64x2_t result = vaddq_s64(v8[14], vsubq_s64(v11, v13));
  int64x2_t v10 = vaddq_s64(v8[15], vsubq_s64(v12, v14));
  v8[14] = result;
  v8[15] = v10;
  return result;
}

int64x2_t FstSearchLatticeHash::reset(FstSearchLatticeHash *this)
{
  *((_DWORD *)this + 42) = 0;
  *((_DWORD *)this + 46) = 0;
  *((_DWORD *)this + 50) = 0;
  int64x2_t v7 = 0u;
  int64x2_t v8 = 0u;
  SnapTime::recordTime((SnapTime *)&v7, 1, 0, 0, 0);
  int64x2_t v5 = 0u;
  int64x2_t v6 = 0u;
  SnapTime::recordTime((SnapTime *)&v5, 1, 0, 0, 0);
  uint64_t v2 = (int64x2_t *)*((void *)this + 13);
  int64x2_t result = vaddq_s64(v2[10], vsubq_s64(v5, v7));
  int64x2_t v4 = vaddq_s64(v2[11], vsubq_s64(v6, v8));
  v2[10] = result;
  v2[11] = v4;
  return result;
}

double FstSearchLatticeHash::doFrame(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  if (a3 >= 20000) {
    a3 = 20000;
  }
  *(void *)&double result = FstSearchLatticeHash::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearchLatticeHash::beginTopRecPassSyncRecog(FstSearchLatticeHash *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 240, a3, *((PelScoreCache **)this + 4));
    uint64_t result = ArcGraph::findBackoffState(*((void *)this + 5));
    *((_DWORD *)this + 88) = result;
    *((unsigned char *)this + 356) = 1;
  }
  return result;
}

uint64_t FstSearchLatticeHash::endTopRecPassSyncRecog(int64x2_t **this)
{
  int64x2_t v10 = 0u;
  int64x2_t v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  FstSearchLatticeHash::collectTraces((FstSearchLatticeHash *)this);
  FstSearchLatticeHash::annihilateNullTraces((unint64_t)this);
  FstSearchLatticeHashBackoff::annihilateNullActiveTokens((FstSearchLatticeHashBackoff *)this);
  FstSearchLatticeHashBackoff::annihilateNullLongestFinal((unint64_t)this);
  FstSearchLatticeHash::collectTraces((FstSearchLatticeHash *)this);
  int64x2_t v8 = 0u;
  int64x2_t v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  int64x2_t v2 = vsubq_s64(v8, v10);
  unsigned int v3 = this[13];
  int64x2_t v4 = v3[13];
  int64x2_t v5 = vaddq_s64(v3[12], v2);
  int64x2_t v8 = v2;
  int64x2_t v9 = vsubq_s64(v9, v11);
  int64x2_t v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + 58) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

void FstSearchLatticeHash::printSize(FstSearchLatticeHash *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v116);
  if (v117) {
    uint64_t v16 = v116;
  }
  else {
    uint64_t v16 = &unk_214099300;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_214099300, a3, &unk_214099300, v16);
  DgnString::~DgnString((DgnString *)&v116);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_214099300);
  uint64_t v21 = (a3 + 1);
  uint64_t v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v116);
  if (v117) {
    uint64_t v27 = v116;
  }
  else {
    uint64_t v27 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v116);
  if (v117) {
    unint64_t v32 = v116;
  }
  else {
    unint64_t v32 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v116);
  if (v117) {
    uint64_t v37 = v116;
  }
  else {
    uint64_t v37 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v37, 4, 4, 0);
  uint64_t v111 = a2;
  unsigned int v112 = a6;
  uint64_t v113 = a3;
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v116);
  if (v117) {
    int v42 = v116;
  }
  else {
    int v42 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v42, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  uint64_t v43 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v43 = 16;
  }
  uint64_t v44 = *((unsigned int *)this + 42);
  uint64_t v45 = 16 * v44;
  if ((int)v44 <= 0) {
    uint64_t v45 = 0;
  }
  uint64_t v46 = v45 + v43;
  uint64_t v47 = v45 + v43 + 16 * (*((_DWORD *)this + 43) - v44);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v116);
  if (v117) {
    int64x2_t v52 = v116;
  }
  else {
    int64x2_t v52 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v52, v47, v46, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v47;
  *a5 += v46;
  uint64_t v53 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v53 = 16;
  }
  uint64_t v54 = *((unsigned int *)this + 46);
  uint64_t v55 = 20 * v54;
  if ((int)v54 <= 0) {
    uint64_t v55 = 0;
  }
  uint64_t v56 = v55 + v53;
  uint64_t v57 = v55 + v53 + 20 * (*((_DWORD *)this + 47) - v54);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v116);
  if (v117) {
    int64x2_t v62 = v116;
  }
  else {
    int64x2_t v62 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, v21, &unk_214099300, v22, v22, v62, v57, v56, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v57;
  *a5 += v56;
  uint64_t v63 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v63 = 16;
  }
  int v64 = *((_DWORD *)this + 50);
  uint64_t v65 = 26 * v64;
  if (v64 <= 0) {
    uint64_t v65 = 0;
  }
  uint64_t v66 = v65 + v63;
  uint64_t v67 = v65 + v63 + 26 * (*((_DWORD *)this + 51) - v64);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v116);
  if (v117) {
    int v72 = v116;
  }
  else {
    int v72 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, v21, &unk_214099300, v22, v22, v72, v67, v66, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v67;
  *a5 += v66;
  uint64_t v73 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v73 = 16;
  }
  int v74 = *((_DWORD *)this + 54);
  uint64_t v75 = 26 * v74;
  if (v74 <= 0) {
    uint64_t v75 = 0;
  }
  uint64_t v76 = v75 + v73;
  uint64_t v77 = v75 + v73 + 26 * (*((_DWORD *)this + 55) - v74);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v116);
  if (v117) {
    int64x2_t v82 = v116;
  }
  else {
    int64x2_t v82 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, v21, &unk_214099300, v22, v22, v82, v77, v76, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v77;
  *a5 += v76;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v116);
  if (v117) {
    int64x2_t v87 = v116;
  }
  else {
    int64x2_t v87 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v83, v84, v85, v86, v21, &unk_214099300, v22, v22, v87, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v116);
  if (v117) {
    int v92 = v116;
  }
  else {
    int v92 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, v21, &unk_214099300, v22, v22, v92, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v116);
  if (v117) {
    uint64_t v97 = v116;
  }
  else {
    uint64_t v97 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v93, v94, v95, v96, v21, &unk_214099300, v22, v22, v97, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  uint64_t v98 = sizeObject((uint64_t)this + 240, 0);
  uint64_t v99 = sizeObject((uint64_t)this + 240, 1);
  uint64_t v100 = sizeObject((uint64_t)this + 240, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v116);
  if (v117) {
    char v105 = v116;
  }
  else {
    char v105 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v101, v102, v103, v104, v21, &unk_214099300, v22, v22, v105, v98, v99, v100);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v98;
  *a5 += v99;
  *v112 += v100;
  unint64_t v114 = 0;
  unint64_t v115 = 0;
  SearchItf::printSize(this, v111, v21, &v115, &v114, &v114);
  *a4 += v115;
  *a5 += v114;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v116);
  if (v117) {
    uint64_t v110 = v116;
  }
  else {
    uint64_t v110 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v106, v107, v108, v109, v113, &unk_214099300, (35 - v113), (35 - v113), v110, *a4, *a5, *v112);
  DgnString::~DgnString((DgnString *)&v116);
}

void sub_213E3A600(_Unwind_Exception *a1)
{
  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

BOOL FstSearchLatticeHash::findBestPath(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8 = *(unsigned int *)(a1 + 168);
  if (v8) {
    BOOL v9 = *(_DWORD *)(a3 + 8) == 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    *(void *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v8;
  }
  if (v8) {
    BOOL v10 = *(_DWORD *)(a2 + 8) == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    *(void *)a2 = MemChunkAlloc(v8, 0);
    *(_DWORD *)(a2 + 8) = v8;
LABEL_14:
    uint64_t v11 = 0;
    do
    {
      *(unsigned char *)(*(void *)a2 + v11) = 0;
      *(unsigned char *)(*(void *)a3 + v11++) = 0;
    }
    while (v8 != v11);
    goto LABEL_16;
  }
  if (v8) {
    goto LABEL_14;
  }
LABEL_16:
  unsigned int BestTrace = FstSearchLatticeHashBackoff::getBestTrace(a1, (void *)a2, (void *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1) {
    return 0;
  }
  uint64_t v13 = *(void *)(a1 + 160) + 16 * BestTrace;
  LODWORD(v13) = *(_DWORD *)(*(void *)(a1 + 176) + 20 * *(unsigned int *)(v13 + 8))
               + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v13 + 4));
  *a4 = v13;
  return v13 != 1879048192;
}

uint64_t FstSearchLatticeHash::buildWordLattice(uint64_t a1, uint64_t *a2, void *a3, void *a4, char a5)
{
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  int v31 = 0;
  uint64_t v28 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v27, *(unsigned int *)(a1 + 168));
  unint64_t v8 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v8, 0, 128);
  v8[4] = (uint64_t)a2;
  FstSearchLatticeHashBackoff::createLatticeNodes(a1, &v30, (uint64_t)&v28, (uint64_t)a2, v27, a3, a4);
  uint64_t v23 = (uint64_t)v8;
  uint64_t v24 = *(unsigned int *)(a1 + 168);
  if (v24)
  {
    uint64_t v10 = 0;
    int v11 = v29;
    do
    {
      if (*(unsigned char *)(*a3 + v10))
      {
        uint64_t v12 = *(void *)(a1 + 160);
        if ((*(_DWORD *)(v12 + 16 * v10) - 16777209) >= 2)
        {
          uint64_t v13 = v12 + 16 * v10;
          if (*(int *)(v13 + 12) >= 1)
          {
            int v14 = *(_DWORD *)(v13 + 8);
            do
            {
              uint64_t v15 = *(void *)(a1 + 176) + 20 * v14;
              uint64_t v16 = *(unsigned int *)(v15 + 12);
              if (v16 == -1) {
                unsigned int v17 = 0;
              }
              else {
                unsigned int v17 = v11 - *((_DWORD *)v30 + v16);
              }
              uint64_t v18 = *(unsigned int *)(v28 + 4 * v17);
              if (*(unsigned char *)(*a4 + v10)) {
                FstSearchLatticeHash::createLatticeLink((ArcGraph **)a1, v10, (int *)v15, 0xFFFFFFFFLL, v18, (const WordLatticeLC *)*(unsigned int *)(v28 + 4 * (v11 - *((_DWORD *)v30 + v10))), a2, v9, a5);
              }
              uint64_t v19 = v27[0];
              if (*(_DWORD *)(v27[0] + 16 * v10 + 8))
              {
                unint64_t v20 = 0;
                do
                {
                  uint64_t v21 = *(unsigned int *)(*(void *)(v19 + 16 * v10) + 4 * v20);
                  FstSearchLatticeHash::createLatticeLink((ArcGraph **)a1, v10, (int *)v15, v21, v18, (const WordLatticeLC *)*(unsigned int *)(v28 + 4 * (v11 - *((_DWORD *)v30 + v21))), a2, v9, a5);
                  ++v20;
                  uint64_t v19 = v27[0];
                }
                while (v20 < *(unsigned int *)(v27[0] + 16 * v10 + 8));
              }
              ++v14;
            }
            while (v14 < *(_DWORD *)(*(void *)(a1 + 160) + 16 * v10 + 12)
                        + *(_DWORD *)(*(void *)(a1 + 160) + 16 * v10 + 8));
          }
        }
      }
      ++v10;
    }
    while (v10 != v24);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>(v23);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v27);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v28);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v30);
}

void sub_213E3A97C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearchLatticeHash::createLatticeLink(ArcGraph **this, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, const WordLatticeLC *a6, uint64_t *a7, uint64_t a8, char a9)
{
  unsigned int v11 = a5;
  unsigned int v12 = a4;
  if ((a4 & 0x80000000) != 0) {
    SilenceToken = 0;
  }
  else {
    SilenceToken = (_DWORD *)FstSearchLatticeHashBackoff::getSilenceToken((FstSearchLatticeHashBackoff *)this, a4, a2);
  }
  ArcGraph::lexToCWIDAC(this[5], *((_DWORD *)this[20] + 4 * a2), (uint64_t)a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8, (uint64_t)v40);
  int v17 = a3[1];
  if (SilenceToken)
  {
    v17 += SilenceToken[1];
    int v18 = *SilenceToken + *a3;
  }
  else
  {
    int v18 = *a3;
  }
  if (v40[0] >> 25 == 126)
  {
    int v19 = 0;
    int v20 = v17;
  }
  else
  {
    int v19 = *((_DWORD *)this + 34);
    int v20 = v17 - v19;
  }
  int v21 = v18 - v17;
  if ((v12 & 0x80000000) != 0)
  {
    int v22 = 0;
  }
  else
  {
    int v22 = *((_DWORD *)this + 35);
    v20 -= v22;
  }
  int v34 = v20;
  uint64_t v35 = 0;
  int v36 = v19;
  int v37 = v21;
  int v38 = 0;
  int v39 = v22;
  uint64_t v23 = a3[3];
  uint64_t v24 = this[20];
  if (v23 == -1)
  {
    int v26 = 0;
    if (a9) {
      goto LABEL_19;
    }
  }
  else
  {
    int v25 = *((_DWORD *)v24 + 4 * v23 + 1);
    if (a9)
    {
      if (v25 >= 1) {
        --v25;
      }
      int v26 = (v25 >> 1) + 1;
LABEL_19:
      int v27 = *((_DWORD *)v24 + 4 * a2 + 1);
      if (v27 >= 1) {
        --v27;
      }
      int v28 = v27 >> 1;
      int v29 = v28 - v26 + 1;
      if ((v12 & 0x80000000) == 0)
      {
        int v30 = *((_DWORD *)v24 + 4 * v12 + 1);
        if (v30 >= 1) {
          --v30;
        }
        int v31 = v30 >> 1;
        goto LABEL_28;
      }
LABEL_29:
      int v32 = 0;
      goto LABEL_30;
    }
    int v26 = v25 + 1;
  }
  int v28 = *((_DWORD *)v24 + 4 * a2 + 1);
  int v29 = v28 - v26 + 1;
  if ((v12 & 0x80000000) != 0) {
    goto LABEL_29;
  }
  int v31 = *((_DWORD *)v24 + 4 * v12 + 1);
LABEL_28:
  int v32 = v31 - v28;
LABEL_30:
  WordLatticeLC::WordLatticeLC((uint64_t)v33, (uint64_t)v40, v26, v29, v32, (uint64_t)&v34);
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v11, a6, (WordLatticeLC *)v33);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v33);
}

void sub_213E3AB8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLatticeHash::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(void *)(this + 112) = a2;
  if (*(unsigned char *)(this + 356)) {
    return MiniFst::beginTopFstSyncRecog(this + 240);
  }
  return this;
}

uint64_t FstSearchLatticeHash::endTopRecSyncRecog(FstSearchLatticeHash *this)
{
  VirtMap::setEmpty(*((void *)this + 14));
  uint64_t result = *((void *)this + 14);
  *((void *)this + 14) = 0;
  return result;
}

uint64_t FstSearchLatticeHash::getBestExitScore(FstSearchLatticeHash *this)
{
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  *((_DWORD *)this + 57) = -1;
  unint64_t v1 = *((unsigned int *)this + 38);
  unint64_t v2 = *((unsigned int *)this + 50);
  if (v1 >= v2) {
    goto LABEL_19;
  }
  uint64_t v4 = 0;
  unsigned int v5 = 0;
  uint64_t v6 = 28 * v1;
  do
  {
    uint64_t v7 = *((void *)this + 24) + v6;
    if (*(_DWORD *)(*((void *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      uint64_t v8 = *(unsigned int *)(v7 + 8);
      if (v8 != -1 && *(_DWORD *)(*((void *)this + 20) + 16 * v8 + 4) == *((_DWORD *)this + 56))
      {
        if (v5 == HIDWORD(v22))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v21, 1, 1);
          unsigned int v5 = v22;
          uint64_t v4 = v21;
        }
        *(_DWORD *)(v4 + 4 * v5) = v8;
        unsigned int v5 = v22 + 1;
        LODWORD(v22) = v22 + 1;
        unint64_t v2 = *((unsigned int *)this + 50);
      }
    }
    ++v1;
    v6 += 28;
  }
  while (v1 < v2);
  if (v5)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *((void *)this + 20);
    int v11 = 1879048192;
    do
    {
      uint64_t v12 = v10 + 16 * *(unsigned int *)(v4 + 4 * v9);
      int v13 = *(_DWORD *)(v12 + 12);
      if (v13 >= 1)
      {
        unsigned int v14 = *(_DWORD *)(v12 + 8);
        int v15 = v13 + v14;
        uint64_t v16 = *((void *)this + 22);
        do
        {
          unsigned int v17 = v14;
          int v18 = *(_DWORD *)(v16 + 20 * v14);
          if (v11 > v18)
          {
            *((_DWORD *)this + 57) = *(_DWORD *)(v16 + 20 * v17 + 12);
            int v11 = v18;
          }
          unsigned int v14 = v17 + 1;
        }
        while ((int)(v17 + 1) < v15);
      }
      ++v9;
    }
    while (v9 != v5);
  }
  else
  {
LABEL_19:
    int v11 = 1879048192;
  }
  if (v11 >= 20000) {
    uint64_t v19 = 20000;
  }
  else {
    uint64_t v19 = v11;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v21);
  return v19;
}

void sub_213E3AD60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t FstSearchLatticeHash::getBestScoreMaybeUpdateFstNode(FstSearchLatticeHash *this, Node *a2)
{
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v2 = *((unsigned int *)this + 50);
  if (v2)
  {
    unsigned int v3 = (int *)*((void *)this + 24);
    __int16 v4 = -1;
    int v5 = 1879048192;
    uint64_t v6 = v3;
    do
    {
      int v8 = *v6;
      v6 += 7;
      int v7 = v8;
      if (v5 > v8)
      {
        __int16 v4 = *((_WORD *)v3 + 6);
        int v5 = v7;
      }
      unsigned int v3 = v6;
      --v2;
    }
    while (v2);
    uint64_t v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000) {
        uint64_t v9 = 20000;
      }
      else {
        uint64_t v9 = v5;
      }
    }
  }
  else
  {
    uint64_t v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

unint64_t FstSearchLatticeHash::seedTheory(FstSearchLatticeHash *this, int a2, int a3, int a4, SearchStats *a5)
{
  if (a4 == -2)
  {
    int v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    unsigned int v11 = *((_DWORD *)this + 46);
    if (v11 == *((_DWORD *)this + 47))
    {
      DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts((uint64_t)this + 176, 1, 1);
      unsigned int v11 = *((_DWORD *)this + 46);
    }
    uint64_t v12 = *((void *)this + 22) + 20 * v11;
    *(_OWORD *)(v12 + 4) = xmmword_2140992D0;
    *((_DWORD *)this + 46) = v11 + 1;
    *(_DWORD *)uint64_t v12 = a2;
    unsigned int v13 = *((_DWORD *)this + 42);
    if (v13 == *((_DWORD *)this + 43))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 160, 1, 1);
      unsigned int v13 = *((_DWORD *)this + 42);
    }
    unsigned int v14 = (_DWORD *)(*((void *)this + 20) + 16 * v13);
    *unsigned int v14 = a4;
    v14[1] = a3;
    v14[2] = v11;
    v14[3] = 1;
    int v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  int v15 = *(_DWORD *)(*((void *)this + 5) + 144);
  unsigned int v16 = *((_DWORD *)this + 50);
  if (v16 == *((_DWORD *)this + 51))
  {
    DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)this + 192, 1, 1);
    unsigned int v16 = *((_DWORD *)this + 50);
  }
  uint64_t v17 = *((void *)this + 24) + 28 * v16;
  *(_DWORD *)uint64_t v17 = a2;
  *(_DWORD *)(v17 + 4) = v15;
  *(_DWORD *)(v17 + 8) = v9;
  *(_WORD *)(v17 + 12) = -2;
  *(void *)(v17 + 16) = 0;
  *(_DWORD *)(v17 + 24) = -1;
  LODWORD(v17) = *((_DWORD *)this + 50) + 1;
  *((_DWORD *)this + 50) = v17;
  *((_DWORD *)this + 38) = v17;

  return FstSearchLatticeHashBackoff::propagateNulls(this, 20000, a3, a5);
}

uint64_t FstSearchLatticeHash::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(unsigned int *)(result + 228);
  if (v8 != -1)
  {
    int v9 = (void *)result;
    uint64_t v10 = (unsigned int *)(*(void *)(result + 160) + 16 * v8);
    for (i = *(unsigned int *)(*(void *)(result + 176) + 20 * v10[2] + 12); i != -1; uint64_t v8 = v16)
    {
      uint64_t v16 = i;
      uint64_t result = v9[5];
      if (*v10 == 16777209)
      {
        int v17 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        uint64_t result = ArcGraph::lexToCWID((ArcGraph *)result, *v10, a3, (uint64_t)a4, a5, a6, a7, a8);
        int v17 = result;
      }
      uint64_t v18 = *(unsigned int *)(a2 + 8);
      if (v18 == *(_DWORD *)(a2 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        uint64_t v18 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(void *)a2 + 4 * v18) = v17;
      ++*(_DWORD *)(a2 + 8);
      uint64_t v19 = *(unsigned int *)(a6 + 8);
      if (v19 == *(_DWORD *)(a6 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        uint64_t v19 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(void *)a6 + 4 * v19) = v8;
      ++*(_DWORD *)(a6 + 8);
      uint64_t v20 = v9[20];
      int v21 = *(_DWORD *)(v20 + 16 * v8 + 4);
      uint64_t v22 = *(unsigned int *)(a3 + 8);
      if (v22 == *(_DWORD *)(a3 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        uint64_t v22 = *(unsigned int *)(a3 + 8);
        uint64_t v20 = v9[20];
      }
      *(_DWORD *)(*(void *)a3 + 4 * v22) = v21;
      ++*(_DWORD *)(a3 + 8);
      int v23 = *(_DWORD *)(v9[22] + 20 * *(unsigned int *)(v20 + 16 * v8 + 8));
      uint64_t v24 = *(unsigned int *)(a5 + 8);
      if (v24 == *(_DWORD *)(a5 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        uint64_t v24 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(void *)a5 + 4 * v24) = v23;
      ++*(_DWORD *)(a5 + 8);
      uint64_t v10 = (unsigned int *)(v9[20] + 16 * v16);
      uint64_t i = *(unsigned int *)(v9[22] + 20 * v10[2] + 12);
    }
    *a4 = *v10;
  }
  return result;
}

void FstSearchLatticeHash::checkSearchParametersValidityForArcGraph(FstSearchLatticeHash *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *((void *)this + 5);
  if (*(unsigned char *)(v8 + 178))
  {
    int v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(unsigned char *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    }
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    }
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(void *)(**(void **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((void *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if (a2)
      {
        if (!*(unsigned char *)(v8 + 203)) {
          return;
        }
      }
      else if (*(unsigned char *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(unsigned char *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

uint64_t FstSearchLatticeHash::makePartialResult(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    uint64_t v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(void *)a2 + v9))(*(void *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  unsigned int BestTrace = FstSearchLatticeHashBackoff::getBestTrace((uint64_t)a1, 0, 0, 1);
  if (BestTrace == -1) {
    return 1879048192;
  }
  unsigned int v15 = BestTrace;
  FstSearchLatticeHashBackoff::getHistory((uint64_t)a1, BestTrace, a3, a4, v11, v12, v13, v14);
  memset(v25, 0, sizeof(v25));
  int v26 = 0;
  if (*(_DWORD *)(a3 + 8))
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    int v18 = 0;
    do
    {
      uint64_t v19 = *(void *)a3 + v16;
      int v20 = *(_DWORD *)(v19 + 28);
      WordLatticeLC::WordLatticeLC((uint64_t)v24, v19, v18, *(_DWORD *)(v19 + 24) - v18, v20 - *(_DWORD *)(v19 + 24), (uint64_t)v25);
      uint64_t v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(void *)a2 + 112 * v21), (const WordLatticeLC *)v24);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v24);
      ++v17;
      v16 += 32;
      int v18 = v20;
    }
    while (v17 < *(unsigned int *)(a3 + 8));
  }
  uint64_t v22 = a1[20] + 16 * v15;
  return (*(_DWORD *)(a1[22] + 20 * *(unsigned int *)(v22 + 8))
                      + *(_DWORD *)(a1[11] + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_213E3B4B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t FstSearchDurationHashBackoff::maybeInitDurModel(FstSearchDurationHashBackoff *this, const PicMgr *a2, int a3)
{
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  PicMgr::getPelDurIdMap((uint64_t)a2, (uint64_t)&v15);
  if (a3 == 1) {
    uint64_t v6 = 56;
  }
  else {
    uint64_t v6 = 72;
  }
  uint64_t v7 = v16;
  unsigned int v8 = *((_DWORD *)this + 51);
  if (v16 <= v8)
  {
    *((_DWORD *)this + 50) = v16;
    if (!v7) {
      goto LABEL_13;
    }
  }
  else
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 192, v16 - v8, 0);
    *((_DWORD *)this + 50) = v7;
  }
  uint64_t v9 = 0;
  uint64_t v10 = v15;
  uint64_t v11 = *((void *)this + 24);
  do
  {
    if (!(_WORD)v9 || (uint64_t v12 = *(unsigned __int16 *)(v10 + 2 * v9), v12 == 0xFFFF)) {
      __int16 v13 = 0;
    }
    else {
      __int16 v13 = *(_WORD *)(*(void *)((char *)a2 + v6) + 2 * v12);
    }
    *(_WORD *)(v11 + 2 * v9++) = v13;
  }
  while (v7 != v9);
LABEL_13:
  *((unsigned char *)this + 208) = *((unsigned char *)a2 + 8);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 3);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v15);
}

void sub_213E3B5B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int64x2_t FstSearchDurationHashBackoff::advanceDeltas(FstSearchDurationHashBackoff *this, int a2, int a3, SearchStats *a4, int a5)
{
  v105[0] = a2;
  int64x2_t v103 = 0u;
  int64x2_t v104 = 0u;
  SnapTime::recordTime((SnapTime *)&v103, 1, 0, 0, 0);
  *(void *)uint64_t v102 = 0xFFFFFFFF00000000;
  *(_DWORD *)&v102[8] = -1;
  *(_WORD *)&v102[12] = -2;
  *(void *)&v102[16] = 0;
  *(_DWORD *)&v102[24] = 0;
  uint64_t v10 = (int *)((char *)this + 256);
  *((_DWORD *)this + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 64) = a3;
  int v82 = *((_DWORD *)this + 2);
  unint64_t v11 = *((unsigned int *)this + 56);
  if (v11)
  {
    int v78 = a5;
    uint64_t v79 = a4;
    unint64_t v12 = 0;
    int v81 = *((_DWORD *)this + 53);
    int v80 = *((unsigned __int8 *)this + 208);
    int v13 = *((_DWORD *)this + 2);
    do
    {
      uint64_t v14 = *((void *)this + 27);
      uint64_t v15 = v14 + 28 * v12;
      uint64_t v16 = *(unsigned int *)(v15 + 4);
      uint64_t v17 = *((void *)this + 5);
      if (*(_DWORD *)(v17 + 160) != v16)
      {
        if (*(_DWORD *)(v17 + 140) > (int)v16)
        {
          if (*((_DWORD *)this + 19) + *((_DWORD *)this + 64) >= 5000) {
            int v18 = 5000;
          }
          else {
            int v18 = *((_DWORD *)this + 19) + *((_DWORD *)this + 64);
          }
          int ScoreAllowBackoff_updateNodeInSequence = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(v14 + 28 * v12 + 12), *(_DWORD *)v15, v18);
          int v20 = (long long *)(*((void *)this + 27) + 28 * v12);
          long long v21 = *v20;
          *(_OWORD *)&v102[12] = *(long long *)((char *)v20 + 12);
          *(_OWORD *)uint64_t v102 = v21;
          int v22 = WORD6(v21);
          if (WORD6(v21))
          {
            if (*(int *)&v102[20] >= 1) {
              int v23 = v80 - *(_DWORD *)&v102[20];
            }
            else {
              int v23 = v80;
            }
            int v22 = v23 & ((*(_DWORD *)&v102[20] - v80) >> 31);
            *(_DWORD *)&v102[20] -= v80;
            *(_DWORD *)&v102[24] += v22;
          }
          int v24 = v22 + ScoreAllowBackoff_updateNodeInSequence;
          if (v24 - v13 <= *v10)
          {
            if (*v10 > v24) {
              *uint64_t v10 = v24;
            }
            *(_DWORD *)uint64_t v102 = v24;
            FstSearchDurationHashBackoff::maybeInsertHashedToken((uint64_t)this, (uint64_t)v102);
          }
        }
        unsigned int v25 = v16;
        do
        {
          uint64_t v26 = *((void *)this + 5);
          uint64_t v27 = *(void *)(v26 + 152);
          unsigned int v28 = *(_DWORD *)(v27 + 4 * v25);
          int v29 = *(_DWORD *)(v27 + 4 * (v25 + 1));
          int v30 = *(_DWORD *)(v26 + 140);
          if (v30 <= v29)
          {
            if (v30 <= (int)v16 && *((unsigned char *)this + 380) != 0)
            {
              unsigned int v40 = (v28 & 0xFFFFF) <= 0xFFFF3 ? v28 & 0xFFFFF : v28 & 0xFFFFF | 0xF00000;
              if (v40 != 16777210)
              {
                DgnString::DgnString((DgnString *)&v99);
                ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v40, (DgnString *)&v99, v41, v42, v43, v44, v45);
                uint64_t v50 = &unk_214099300;
                if (v99.i32[2]) {
                  uint64_t v50 = (void *)v99.i64[0];
                }
                xprintf("Seed from state %d score %d trace %d, %s\n", v46, v47, v48, v49, v16, *(unsigned int *)(*((void *)this + 27) + 28 * v12), *(unsigned int *)(*((void *)this + 27) + 28 * v12 + 8), v50);
                MiniFst::seed((uint64_t)this + 264, *(_DWORD *)(*((void *)this + 27) + 28 * v12), 0, *(_DWORD *)(*((void *)this + 27) + 28 * v12 + 8), v29);
                DgnString::~DgnString((DgnString *)&v99);
              }
            }
          }
          else
          {
            int v31 = (v28 >> 20) & 0x3FF;
            if (*((_DWORD *)this + 19) + *((_DWORD *)this + 64) >= 5000) {
              int v32 = 5000;
            }
            else {
              int v32 = *((_DWORD *)this + 19) + *((_DWORD *)this + 64);
            }
            int v33 = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), (unsigned __int16)*(_DWORD *)(v27 + 4 * v25), *(_DWORD *)(*((void *)this + 27) + 28 * v12) + v31, v32);
            int v34 = (long long *)(*((void *)this + 27) + 28 * v12);
            long long v35 = *v34;
            *(_OWORD *)&v102[12] = *(long long *)((char *)v34 + 12);
            *(_OWORD *)uint64_t v102 = v35;
            int v36 = *(_DWORD *)&v102[20] & ~(*(int *)&v102[20] >> 31);
            int v37 = (unsigned __int16)v28;
            if ((_WORD)v28)
            {
              int v37 = *(__int16 *)(*((void *)this + 24) + 2 * (unsigned __int16)v28);
              v36 -= v37 & (v37 >> 31);
              int v38 = v81;
            }
            else
            {
              int v38 = 0;
            }
            int v13 = v82;
            int v51 = v38 + v36;
            *(_DWORD *)&v102[20] = v37;
            *(_DWORD *)&v102[24] += v51;
            int v52 = v51 + v33;
            if (v52 - v82 <= *v10)
            {
              if (*v10 > v52) {
                *uint64_t v10 = v52;
              }
              *(_DWORD *)uint64_t v102 = v52;
              *(_DWORD *)&v102[4] = v29;
              *(_WORD *)&v102[12] = v28;
              *(_DWORD *)&v102[16] += v31;
              FstSearchDurationHashBackoff::maybeInsertHashedToken((uint64_t)this, (uint64_t)v102);
            }
          }
          v25 += 2;
        }
        while ((v28 & 0x80000000) == 0);
        unint64_t v11 = *((unsigned int *)this + 56);
      }
      ++v12;
    }
    while (v12 < v11);
    a3 = *v10;
    a4 = v79;
    a5 = v78;
  }
  int v101 = a3 + v82;
  if (*((unsigned char *)this + 380)) {
    MiniFst::updateFrame((char *)this + 264, (int *)this + 64, v82, a2);
  }
  int64x2_t v99 = 0u;
  int64x2_t v100 = 0u;
  SnapTime::recordTime((SnapTime *)&v99, 1, 0, 0, 0);
  int64x2_t v99 = vsubq_s64(v99, v103);
  int64x2_t v100 = vsubq_s64(v100, v104);
  uint64_t v53 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v54 = vaddq_s64(v53[1], v100);
  *uint64_t v53 = vaddq_s64(*v53, v99);
  v53[1] = v54;
  int64x2_t v97 = 0u;
  int64x2_t v98 = 0u;
  SnapTime::recordTime((SnapTime *)&v97, 1, 0, 0, 0);
  FstSearchDurationHashBackoff::applyCutoffOnEmitting((uint64_t)this, *((_DWORD *)this + 4), &v101);
  int64x2_t v95 = 0u;
  int64x2_t v96 = 0u;
  SnapTime::recordTime((SnapTime *)&v95, 1, 0, 0, 0);
  int64x2_t v55 = vsubq_s64(v95, v97);
  uint64_t v56 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v57 = v56[3];
  int64x2_t v58 = vaddq_s64(v56[2], v55);
  int64x2_t v95 = v55;
  int64x2_t v96 = vsubq_s64(v96, v98);
  int64x2_t v59 = vaddq_s64(v57, v96);
  v56[2] = v58;
  v56[3] = v59;
  int64x2_t v93 = 0u;
  int64x2_t v94 = 0u;
  SnapTime::recordTime((SnapTime *)&v93, 1, 0, 0, 0);
  uint64_t v60 = *((void *)this + 27);
  uint64_t v61 = *((void *)this + 29);
  *((void *)this + 27) = v61;
  *((void *)this + 29) = v60;
  LODWORD(v60) = *((_DWORD *)this + 57);
  uint64_t v62 = *((void *)this + 30);
  *((void *)this + 28) = v62;
  *((_DWORD *)this + 60) = 0;
  *((_DWORD *)this + 61) = v60;
  unint64_t v63 = *((unsigned int *)this + 6);
  if (v63 && v62 && v63 < v62) {
    mrec_nth_element<FstSearchLatticeHashBackoffcmpTok>(v61, v63, v62);
  }
  int64x2_t v91 = 0u;
  int64x2_t v92 = 0u;
  SnapTime::recordTime((SnapTime *)&v91, 1, 0, 0, 0);
  int64x2_t v64 = vsubq_s64(v91, v93);
  uint64_t v65 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v66 = v65[5];
  int64x2_t v67 = vaddq_s64(v65[4], v64);
  int64x2_t v91 = v64;
  int64x2_t v92 = vsubq_s64(v92, v94);
  int64x2_t v68 = vaddq_s64(v66, v92);
  v65[4] = v67;
  v65[5] = v68;
  int64x2_t v89 = 0u;
  int64x2_t v90 = 0u;
  SnapTime::recordTime((SnapTime *)&v89, 1, 0, 0, 0);
  VirtMap::setEmpty(*((void *)this + 14));
  int64x2_t v87 = 0u;
  int64x2_t v88 = 0u;
  SnapTime::recordTime((SnapTime *)&v87, 1, 0, 0, 0);
  int64x2_t v69 = vsubq_s64(v87, v89);
  uint64_t v70 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v71 = v70[9];
  int64x2_t v72 = vaddq_s64(v70[8], v69);
  int64x2_t v87 = v69;
  int64x2_t v88 = vsubq_s64(v88, v90);
  int64x2_t v73 = vaddq_s64(v71, v88);
  v70[8] = v72;
  v70[9] = v73;
  int64x2_t v85 = 0u;
  int64x2_t v86 = 0u;
  SnapTime::recordTime((SnapTime *)&v85, 1, 0, 0, 0);
  *((_DWORD *)this + 60) = 0;
  uint64_t v74 = *((unsigned int *)this + 56);
  *((_DWORD *)this + 38) = v74;
  if (a4)
  {
    *((void *)a4 + 2) += v74;
    if (*((_DWORD *)a4 + 2) > v74) {
      LODWORD(v74) = *((_DWORD *)a4 + 2);
    }
    *((_DWORD *)a4 + 2) = v74;
  }
  if (*((unsigned char *)this + 380)) {
    FstSearchDurationHashBackoff::seedFromMiniFst((uint64_t)this, v105);
  }
  if (a5) {
    FstSearchDurationHashBackoff::propagateNulls(this, v101, a2, a4);
  }
  *((_DWORD *)this + 62) = a2;
  int64x2_t v83 = 0u;
  int64x2_t v84 = 0u;
  SnapTime::recordTime((SnapTime *)&v83, 1, 0, 0, 0);
  uint64_t v75 = (int64x2_t *)*((void *)this + 13);
  int64x2_t result = vaddq_s64(v75[6], vsubq_s64(v83, v85));
  int64x2_t v77 = vaddq_s64(v75[7], vsubq_s64(v84, v86));
  v75[6] = result;
  v75[7] = v77;
  return result;
}

void sub_213E3BC18(_Unwind_Exception *exception_object)
{
}

__n128 FstSearchDurationHashBackoff::maybeInsertHashedToken(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(unsigned int *)(a2 + 4);
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = v4 & 0x3F;
  uint64_t v7 = *(uint64_t **)(a1 + 112);
  uint64_t v8 = v7[2];
  uint64_t v9 = *(uint64_t **)(v8 + 8 * v5);
  if (!v9)
  {
    uint64_t v10 = *((unsigned int *)v7 + 12);
    uint64_t v11 = *((unsigned int *)v7 + 13);
    uint64_t v12 = *v7;
    if (v10 >= v11)
    {
      uint64_t v13 = v12 + 16 * v11;
      int v15 = *(_DWORD *)(v13 + 8);
      uint64_t v14 = (_DWORD *)(v13 + 8);
      if (!v15)
      {
        *(void *)(v12 + 16 * v11) = MemChunkAlloc(0x100uLL, 0);
        *uint64_t v14 = 64;
        uint64_t v12 = *v7;
        uint64_t v8 = v7[2];
        LODWORD(v10) = *((_DWORD *)v7 + 12);
        uint64_t v11 = *((unsigned int *)v7 + 13);
      }
      *(void *)(v8 + 8 * v5) = v12 + 16 * v11;
      *((_DWORD *)v7 + 13) = v11 + 1;
    }
    else
    {
      *(void *)(v8 + 8 * v5) = v12 + 16 * v10;
    }
    *((_DWORD *)v7 + 12) = v10 + 1;
    uint64_t v16 = *(void *)(v7[2] + 8 * v5);
    memset(*(void **)v16, 255, 4 * *(unsigned int *)(v16 + 8));
    unsigned int v18 = *((_DWORD *)v7 + 10);
    if (v18 == *((_DWORD *)v7 + 11))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)(v7 + 4), 1, 1);
      unsigned int v18 = *((_DWORD *)v7 + 10);
    }
    *(_DWORD *)(v7[4] + 4 * v18) = v5;
    ++*((_DWORD *)v7 + 10);
    uint64_t v9 = *(uint64_t **)(v7[2] + 8 * v5);
  }
  uint64_t v19 = *v9;
  unsigned int v20 = *(_DWORD *)(v19 + 4 * v6);
  long long v21 = (void *)(a1 + 232);
  if (v20 == -1)
  {
    *(_DWORD *)(v19 + 4 * v6) = *(_DWORD *)(a1 + 240);
    unsigned int v23 = *(_DWORD *)(a1 + 240);
    if (v23 == *(_DWORD *)(a1 + 244))
    {
      DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)v21, 1, 1);
      unsigned int v23 = *(_DWORD *)(a1 + 240);
    }
    uint64_t v24 = *(void *)(a1 + 232) + 28 * v23;
    __n128 result = *(__n128 *)a2;
    *(_OWORD *)(v24 + 12) = *(_OWORD *)(a2 + 12);
    *(__n128 *)uint64_t v24 = result;
    ++*(_DWORD *)(a1 + 240);
  }
  else
  {
    uint64_t v22 = *v21 + 28 * v20;
    if (*(_DWORD *)v22 > *(_DWORD *)a2)
    {
      __n128 result = *(__n128 *)a2;
      *(_OWORD *)(v22 + 12) = *(_OWORD *)(a2 + 12);
      *(__n128 *)uint64_t v22 = result;
    }
  }
  return result;
}

uint64_t FstSearchDurationHashBackoff::applyCutoffOnEmitting(uint64_t this, unsigned int a2, int *a3)
{
  unint64_t v4 = *(unsigned int *)(this + 240);
  if (v4 > a2)
  {
    uint64_t v6 = this;
    uint64_t v7 = (void *)(this + 232);
    uint64_t v8 = a2;
    this = mrec_nth_element<FstSearchLatticeHashBackoffcmpTok>(*(void *)(this + 232), a2, v4);
    int v9 = *(_DWORD *)(*v7 + 28 * a2);
    if (*a3 > v9) {
      *a3 = v9;
    }
    unsigned int v10 = *(_DWORD *)(v6 + 244);
    if (a2 > v10) {
      this = DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)v7, a2 - v10, 0);
    }
    uint64_t v11 = *(unsigned int *)(v6 + 240);
    if (v11 < a2)
    {
      uint64_t v12 = v8 - v11;
      uint64_t v13 = *v7 + 28 * v11 + 12;
      do
      {
        *(void *)(v13 - 12) = 0xFFFFFFFF00000000;
        *(_DWORD *)(v13 - 4) = -1;
        *(_WORD *)uint64_t v13 = -2;
        *(void *)(v13 + 8) = 0;
        *(_DWORD *)(v13 + 4) = 0;
        v13 += 28;
        --v12;
      }
      while (v12);
    }
    *(_DWORD *)(v6 + 240) = a2;
  }
  return this;
}

uint64_t FstSearchDurationHashBackoff::seedFromMiniFst(uint64_t this, int *a2)
{
  if (*(unsigned char *)(this + 380))
  {
    uint64_t v2 = this;
    unsigned int v3 = *(_DWORD *)(this + 288);
    if (v3 >= *(_DWORD *)(this + 20)) {
      unsigned int v3 = *(_DWORD *)(this + 20);
    }
    if (v3)
    {
      uint64_t v5 = 0;
      unsigned int v6 = 0;
      uint64_t v20 = this + 216;
      long long v21 = (void *)(this + 160);
      do
      {
        uint64_t v7 = (int *)(*(void *)(v2 + 280) + v5);
        int v8 = *v7;
        int v10 = v7[6];
        int v9 = v7[7];
        int v11 = v7[2];
        v22[0] = 0;
        v22[1] = 0;
        if ((v11 & 0x80000000) == 0)
        {
          while (1)
            ;
        }
        unsigned int v12 = -2 - v11;
        if (v9 == 16777213)
        {
          int v9 = 16777209;
          if (*(_DWORD *)(*v21 + 28 * v12) == 16777209) {
            unsigned int v12 = *(_DWORD *)(*(void *)(v2 + 176) + 16 * *(unsigned int *)(*v21 + 28 * v12 + 8) + 8);
          }
        }
        int v13 = *a2;
        uint64_t v14 = *(unsigned int *)(v2 + 168);
        if (v14 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)v21, 1, 1);
          LODWORD(v14) = *(_DWORD *)(v2 + 168);
        }
        int v15 = (int *)(*(void *)(v2 + 160) + 28 * v14);
        int *v15 = v9;
        v15[1] = v13;
        void v15[2] = -1;
        v15[3] = v8;
        v15[5] = 0;
        v15[6] = 0;
        v15[4] = v12;
        int v16 = *(_DWORD *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v16 + 1;
        uint64_t v17 = *(unsigned int *)(v2 + 224);
        if (v17 == *(_DWORD *)(v2 + 228))
        {
          DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(v20, 1, 1);
          LODWORD(v17) = *(_DWORD *)(v2 + 224);
        }
        uint64_t v18 = *(void *)(v2 + 216) + 28 * v17;
        *(_DWORD *)uint64_t v18 = v8;
        *(_DWORD *)(v18 + 4) = v10;
        *(_DWORD *)(v18 + 8) = v16;
        *(_WORD *)(v18 + 12) = -2;
        *(void *)(v18 + 16) = 0;
        *(_DWORD *)(v18 + 24) = 0;
        ++*(_DWORD *)(v2 + 224);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v22);
        ++v6;
        unsigned int v19 = *(_DWORD *)(v2 + 288);
        if (v19 >= *(_DWORD *)(v2 + 20)) {
          unsigned int v19 = *(_DWORD *)(v2 + 20);
        }
        v5 += 36;
      }
      while (v6 < v19);
    }
  }
  return this;
}

void sub_213E3C09C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void *FstSearchDurationHashBackoff::propagateNulls(FstSearchDurationHashBackoff *this, int a2, int a3, SearchStats *a4)
{
  int v5 = *((_DWORD *)this + 42);
  __n128 result = (void *)((char *)this + 216);
  unsigned int v7 = *((_DWORD *)this + 56);
  int64x2_t v58 = result;
  if (!v7)
  {
    unsigned int v38 = *((_DWORD *)this + 38);
    if (a4) {
      goto LABEL_42;
    }
    goto LABEL_43;
  }
  int v47 = v5;
  unint64_t v8 = 0;
  uint64_t v48 = a4;
  int v57 = a2;
  do
  {
    uint64_t v9 = *(unsigned int *)(*((void *)this + 27) + 28 * v8 + 4);
    uint64_t v10 = *((void *)this + 5);
    if (*(_DWORD *)(v10 + 160) != v9
      && (*(_DWORD *)(v10 + 140) <= (int)v9 || (*(_DWORD *)(*(void *)(v10 + 152) + 4 * v9) & 0x40000000) != 0))
    {
      unsigned int v11 = *(_DWORD *)(*((void *)this + 27) + 28 * v8 + 4);
      unsigned int v55 = v11;
      unint64_t v56 = v8;
      do
      {
        uint64_t v12 = *((void *)this + 5);
        uint64_t v13 = *(void *)(v12 + 152);
        unsigned int v14 = *(_DWORD *)(v13 + 4 * v11);
        int v15 = *(_DWORD *)(v13 + 4 * (v11 + 1));
        int v16 = *(_DWORD *)(v12 + 140);
        if (v16 > v15) {
          goto LABEL_32;
        }
        int v17 = (v14 & 0xFFFFF) <= 0xFFFF3 ? v14 & 0xFFFFF : v14 & 0xFFFFF | 0xF00000;
        if (v16 <= (int)v9 && v17 != 16777210) {
          goto LABEL_32;
        }
        int v19 = (v14 >> 20) & 0x3FF;
        uint64_t v20 = *result;
        uint64_t v21 = *result + 28 * v8;
        int v22 = *(_DWORD *)v21 + v19;
        if (v22 > a2) {
          goto LABEL_32;
        }
        int v23 = *(_DWORD *)(v21 + 8);
        __int16 v24 = *(_WORD *)(v21 + 12);
        __int16 v25 = *(_WORD *)(v21 + 14);
        int v26 = *(_DWORD *)(v21 + 24);
        int v27 = *(_DWORD *)(v21 + 16) + v19;
        if (v17 == 16777210)
        {
          if (v7 != *((_DWORD *)this + 57)) {
            goto LABEL_31;
          }
        }
        else
        {
          if (v17 == 16777214) {
            int v28 = *(_DWORD *)(v21 + 16) + v19;
          }
          else {
            int v28 = 0;
          }
          if (v17 == 16777214) {
            int v29 = 0;
          }
          else {
            int v29 = v27;
          }
          uint64_t v30 = *((unsigned int *)this + 42);
          if (v30 == *((_DWORD *)this + 43))
          {
            __int16 v52 = v25;
            __int16 v53 = v24;
            int v50 = v29;
            int v51 = v23;
            int v49 = v28;
            DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)this + 160, 1, 1);
            int v28 = v49;
            int v29 = v50;
            int v23 = v51;
            __int16 v25 = v52;
            __int16 v24 = v53;
            a2 = v57;
            __n128 result = v58;
            LODWORD(v30) = *((_DWORD *)this + 42);
          }
          int v31 = 0;
          int v32 = (int *)(*((void *)this + 20) + 28 * v30);
          *int v32 = v17;
          v32[1] = a3;
          v32[2] = -1;
          v32[3] = v22 - v28;
          v32[4] = v23;
          v32[5] = v29;
          v32[6] = v26;
          int v23 = *((_DWORD *)this + 42);
          *((_DWORD *)this + 42) = v23 + 1;
          unsigned int v7 = *((_DWORD *)this + 56);
          int v26 = 0;
          if (v7 != *((_DWORD *)this + 57)) {
            goto LABEL_30;
          }
        }
        __int16 v33 = v24;
        int v34 = v27;
        __int16 v35 = v25;
        int v36 = v23;
        DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)result, 1, 1);
        int v23 = v36;
        __int16 v25 = v35;
        int v27 = v34;
        LODWORD(v9) = v55;
        unint64_t v8 = v56;
        __int16 v24 = v33;
        a2 = v57;
        __n128 result = v58;
        unsigned int v7 = *((_DWORD *)this + 56);
        int v31 = v26;
LABEL_30:
        uint64_t v20 = *result;
        int v26 = v31;
LABEL_31:
        uint64_t v37 = v20 + 28 * v7;
        *(_DWORD *)uint64_t v37 = v22;
        *(_DWORD *)(v37 + 4) = v15;
        *(_DWORD *)(v37 + 8) = v23;
        *(_WORD *)(v37 + 12) = v24;
        *(_WORD *)(v37 + 14) = v25;
        *(_DWORD *)(v37 + 16) = v27;
        *(_DWORD *)(v37 + 20) = 0;
        *(_DWORD *)(v37 + 24) = v26;
        unsigned int v7 = *((_DWORD *)this + 56) + 1;
        *((_DWORD *)this + 56) = v7;
LABEL_32:
        v11 += 2;
      }
      while ((v14 & 0x80000000) == 0);
    }
    ++v8;
  }
  while (v8 < v7);
  unsigned int v38 = *((_DWORD *)this + 38);
  if (v7 > v38)
  {
    mrec_qsort_r<FstSearchLateLatticeHashBackoffActiveToken>((char *)(*((void *)this + 27) + 28 * v38), v7 - v38, 28);
    __n128 result = v58;
    unsigned int v38 = *((_DWORD *)this + 38);
    unsigned int v7 = *((_DWORD *)this + 56);
  }
  a4 = v48;
  int v5 = v47;
  if (v38 < v7)
  {
    unint64_t v39 = v38;
    uint64_t v40 = 28 * v38;
    do
    {
      uint64_t v41 = *result + v40;
      if (*(_DWORD *)(v41 + 4) != *(_DWORD *)(*result + 28 * (v39 - 1) + 4))
      {
        uint64_t v42 = (_OWORD *)(*result + 28 * v38);
        long long v43 = *(_OWORD *)v41;
        *(_OWORD *)((char *)v42 + 12) = *(_OWORD *)(v41 + 12);
        _OWORD *v42 = v43;
        ++v38;
        unsigned int v7 = *((_DWORD *)this + 56);
      }
      ++v39;
      v40 += 28;
    }
    while (v39 < v7);
  }
  if (v48) {
LABEL_42:
  }
    *((_DWORD *)a4 + 1) += *((_DWORD *)this + 42) - v5;
LABEL_43:
  unsigned int v44 = *((_DWORD *)this + 57);
  if (v38 > v44)
  {
    DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)result, v38 - v44, 0);
    __n128 result = v58;
    unsigned int v7 = *((_DWORD *)this + 56);
  }
  if (v7 < v38)
  {
    unint64_t v45 = v38 - (unint64_t)v7;
    uint64_t v46 = *result + 28 * v7 + 12;
    do
    {
      *(void *)(v46 - 12) = 0xFFFFFFFF00000000;
      *(_DWORD *)(v46 - 4) = -1;
      *(_WORD *)uint64_t v46 = -2;
      *(void *)(v46 + 8) = 0;
      *(_DWORD *)(v46 + 4) = 0;
      v46 += 28;
      --v45;
    }
    while (v45);
  }
  *((_DWORD *)this + 56) = v38;
  return result;
}

uint64_t FstSearchDurationHashBackoff::collectTraces(FstSearchDurationHashBackoff *this)
{
  unint64_t v2 = *((unsigned int *)this + 42);
  int v36 = 0;
  __int16 v35 = 0;
  if (v2)
  {
    unsigned int v3 = MemChunkAlloc(4 * v2, 0);
    unint64_t v4 = 0;
    __int16 v35 = v3;
    int v36 = v2;
    do
      *((_DWORD *)v3 + v4++) = 0;
    while (v4 < v2);
  }
  else
  {
    unsigned int v3 = 0;
  }
  unint64_t v5 = *((unsigned int *)this + 56);
  if (v5)
  {
    unint64_t v6 = 0;
    unsigned int v7 = (unsigned int *)(*((void *)this + 27) + 8);
    do
    {
      unsigned int v9 = *v7;
      v7 += 7;
      uint64_t v8 = v9;
      if (v9 != -1)
      {
        *((_DWORD *)v3 + v8) = 1;
        unint64_t v5 = *((unsigned int *)this + 56);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  int v10 = *((_DWORD *)this + 42);
  if (!v10) {
    goto LABEL_32;
  }
  unsigned int v11 = (uint64_t *)((char *)this + 160);
  unsigned int v12 = v10 - 1;
  do
  {
    uint64_t v13 = v12;
    if (*((_DWORD *)v3 + v12))
    {
      uint64_t v14 = *(unsigned int *)(*v11 + 28 * v12 + 16);
      if (v14 != -1) {
        *((_DWORD *)v3 + v14) = 1;
      }
    }
    --v12;
  }
  while (v13);
  unsigned int v15 = *((_DWORD *)this + 42);
  if (v15)
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    unsigned int v18 = 0;
    do
    {
      if (*((_DWORD *)v3 + v17))
      {
        uint64_t v19 = *v11;
        if (v17 != v18)
        {
          uint64_t v20 = (long long *)(v19 + v16);
          uint64_t v21 = (_OWORD *)(v19 + 28 * v18);
          long long v22 = *v20;
          *(_OWORD *)((char *)v21 + 12) = *(long long *)((char *)v20 + 12);
          *uint64_t v21 = v22;
          uint64_t v19 = *v11;
        }
        uint64_t v23 = v19 + 28 * v18;
        unsigned int v26 = *(_DWORD *)(v23 + 16);
        __int16 v24 = (_DWORD *)(v23 + 16);
        uint64_t v25 = v26;
        if (v26 != -1) {
          *__int16 v24 = *((_DWORD *)v3 + v25);
        }
        *((_DWORD *)v3 + v17) = v18++;
        unsigned int v15 = *((_DWORD *)this + 42);
      }
      ++v17;
      v16 += 28;
    }
    while (v17 < v15);
    unsigned int v27 = *((_DWORD *)this + 43);
    if (v18 > v27)
    {
      DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)this + 160, v18 - v27, 0);
      unsigned int v15 = *((_DWORD *)this + 42);
    }
    if (v15 < v18)
    {
      unint64_t v28 = v18 - (unint64_t)v15;
      int v29 = (_DWORD *)(*v11 + 28 * v15 + 24);
      do
      {
        *(_OWORD *)(v29 - 6) = xmmword_2140992B0;
        *((void *)v29 - 1) = 0xFFFFFFFFLL;
        *int v29 = 0;
        v29 += 7;
        --v28;
      }
      while (v28);
    }
  }
  else
  {
LABEL_32:
    unsigned int v18 = 0;
  }
  *((_DWORD *)this + 42) = v18;
  uint64_t v30 = *((unsigned int *)this + 56);
  if (v30)
  {
    int v31 = v35;
    int v32 = (_DWORD *)(*((void *)this + 27) + 8);
    do
    {
      uint64_t v33 = *v32;
      if (v33 != -1) {
        *int v32 = *((_DWORD *)v31 + v33);
      }
      v32 += 7;
      --v30;
    }
    while (v30);
  }
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v35);
}

void sub_213E3C684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int64x2_t FstSearchDurationHashBackoff::vite(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  FstSearchDurationHashBackoff::advanceDeltas((FstSearchDurationHashBackoff *)this, a2, a3, a4, a5);
  int64x2_t v13 = 0u;
  int64x2_t v14 = 0u;
  SnapTime::recordTime((SnapTime *)&v13, 1, 0, 0, 0);
  if (a2 >= 1)
  {
    unsigned int v7 = *((_DWORD *)this + 18);
    if (v7)
    {
      if (!(a2 % v7)) {
        FstSearchDurationHashBackoff::collectTraces((FstSearchDurationHashBackoff *)this);
      }
    }
  }
  int64x2_t v11 = 0u;
  int64x2_t v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  uint64_t v8 = this[13];
  int64x2_t result = vaddq_s64(v8[14], vsubq_s64(v11, v13));
  int64x2_t v10 = vaddq_s64(v8[15], vsubq_s64(v12, v14));
  v8[14] = result;
  v8[15] = v10;
  return result;
}

int64x2_t FstSearchDurationHashBackoff::reset(FstSearchDurationHashBackoff *this)
{
  *((_DWORD *)this + 42) = 0;
  *((_DWORD *)this + 46) = 0;
  *((_DWORD *)this + 56) = 0;
  int64x2_t v7 = 0u;
  int64x2_t v8 = 0u;
  SnapTime::recordTime((SnapTime *)&v7, 1, 0, 0, 0);
  int64x2_t v5 = 0u;
  int64x2_t v6 = 0u;
  SnapTime::recordTime((SnapTime *)&v5, 1, 0, 0, 0);
  unint64_t v2 = (int64x2_t *)*((void *)this + 13);
  int64x2_t result = vaddq_s64(v2[10], vsubq_s64(v5, v7));
  int64x2_t v4 = vaddq_s64(v2[11], vsubq_s64(v6, v8));
  v2[10] = result;
  v2[11] = v4;
  return result;
}

double FstSearchDurationHashBackoff::doFrame(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  if (a3 >= 20000) {
    a3 = 20000;
  }
  *(void *)&double result = FstSearchDurationHashBackoff::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearchDurationHashBackoff::beginTopRecPassSyncRecog(FstSearchDurationHashBackoff *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 264, a3, *((PelScoreCache **)this + 4));
    uint64_t result = ArcGraph::findBackoffState(*((void *)this + 5));
    *((_DWORD *)this + 94) = result;
    *((unsigned char *)this + 3DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = 1;
  }
  return result;
}

uint64_t FstSearchDurationHashBackoff::endTopRecPassSyncRecog(FstSearchDurationHashBackoff *this)
{
  int64x2_t v10 = 0u;
  int64x2_t v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  FstSearchDurationHashBackoff::generateTraceTokensFromTraces((unint64_t)this);
  int64x2_t v8 = 0u;
  int64x2_t v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  int64x2_t v2 = vsubq_s64(v8, v10);
  unsigned int v3 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v4 = v3[13];
  int64x2_t v5 = vaddq_s64(v3[12], v2);
  int64x2_t v8 = v2;
  int64x2_t v9 = vsubq_s64(v9, v11);
  int64x2_t v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 64) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

unint64_t FstSearchDurationHashBackoff::generateTraceTokensFromTraces(unint64_t this)
{
  uint64_t v1 = this;
  int64x2_t v2 = (void *)(this + 176);
  uint64_t v3 = *(unsigned int *)(this + 168);
  unsigned int v4 = *(_DWORD *)(this + 188);
  if (v3 > v4) {
    this = DgnArray<DgnPrimArray<double>>::reallocElts(this + 176, v3 - v4, 0);
  }
  uint64_t v5 = *(unsigned int *)(v1 + 184);
  if (v5 < v3)
  {
    uint64_t v6 = v3 - v5;
    int64x2_t v7 = (_OWORD *)(*v2 + 16 * v5);
    do
    {
      *v7++ = xmmword_2140992E0;
      --v6;
    }
    while (v6);
  }
  *(_DWORD *)(v1 + 184) = v3;
  uint64_t v8 = *(unsigned int *)(v1 + 168);
  if (v8)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(v1 + 176);
    int64x2_t v11 = (_OWORD *)(*(void *)(v1 + 160) + 12);
    do
    {
      *((_DWORD *)v11 - 1) = v9;
      int64x2_t v12 = (float *)(v10 + 16 * v9);
      float32x2x2_t v13 = (float32x2x2_t)*v11;
      int64x2_t v11 = (_OWORD *)((char *)v11 + 28);
      float32x2x2_t v14 = v13;
      unint64_t v15 = vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u64[0];
      vst2_f32(v12, v14);
      ++v9;
    }
    while (v8 != v9);
  }
  return this;
}

void FstSearchDurationHashBackoff::printSize(FstSearchDurationHashBackoff *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v116);
  if (v117) {
    uint64_t v16 = v116;
  }
  else {
    uint64_t v16 = &unk_214099300;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_214099300, a3, &unk_214099300, v16);
  DgnString::~DgnString((DgnString *)&v116);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_214099300);
  uint64_t v21 = (a3 + 1);
  uint64_t v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v116);
  if (v117) {
    unsigned int v27 = v116;
  }
  else {
    unsigned int v27 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v116);
  if (v117) {
    int v32 = v116;
  }
  else {
    int v32 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v116);
  if (v117) {
    uint64_t v37 = v116;
  }
  else {
    uint64_t v37 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v37, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v116);
  if (v117) {
    uint64_t v42 = v116;
  }
  else {
    uint64_t v42 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v42, 4, 4, 0);
  uint64_t v111 = a2;
  unsigned int v112 = a6;
  uint64_t v113 = a3;
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  uint64_t v43 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v43 = 16;
  }
  uint64_t v44 = *((unsigned int *)this + 42);
  uint64_t v45 = 28 * v44;
  if ((int)v44 <= 0) {
    uint64_t v45 = 0;
  }
  uint64_t v46 = v45 + v43;
  uint64_t v47 = v45 + v43 + 28 * (*((_DWORD *)this + 43) - v44);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v116);
  if (v117) {
    __int16 v52 = v116;
  }
  else {
    __int16 v52 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, v21, &unk_214099300, v22, v22, v52, v47, v46, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v47;
  *a5 += v46;
  uint64_t v53 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v53 = 16;
  }
  uint64_t v54 = *((unsigned int *)this + 46);
  uint64_t v55 = 16 * v54;
  if ((int)v54 <= 0) {
    uint64_t v55 = 0;
  }
  uint64_t v56 = v55 + v53;
  uint64_t v57 = v55 + v53 + 16 * (*((_DWORD *)this + 47) - v54);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v116);
  if (v117) {
    uint64_t v62 = v116;
  }
  else {
    uint64_t v62 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, v21, &unk_214099300, v22, v22, v62, v57, v56, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v57;
  *a5 += v56;
  uint64_t v63 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v63 = 16;
  }
  int v64 = *((_DWORD *)this + 56);
  uint64_t v65 = 26 * v64;
  if (v64 <= 0) {
    uint64_t v65 = 0;
  }
  uint64_t v66 = v65 + v63;
  uint64_t v67 = v65 + v63 + 26 * (*((_DWORD *)this + 57) - v64);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v116);
  if (v117) {
    int64x2_t v72 = v116;
  }
  else {
    int64x2_t v72 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, v21, &unk_214099300, v22, v22, v72, v67, v66, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v67;
  *a5 += v66;
  uint64_t v73 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v73 = 16;
  }
  int v74 = *((_DWORD *)this + 60);
  uint64_t v75 = 26 * v74;
  if (v74 <= 0) {
    uint64_t v75 = 0;
  }
  uint64_t v76 = v75 + v73;
  uint64_t v77 = v75 + v73 + 26 * (*((_DWORD *)this + 61) - v74);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v116);
  if (v117) {
    int v82 = v116;
  }
  else {
    int v82 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, v21, &unk_214099300, v22, v22, v82, v77, v76, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v77;
  *a5 += v76;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v116);
  if (v117) {
    int64x2_t v87 = v116;
  }
  else {
    int64x2_t v87 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v83, v84, v85, v86, v21, &unk_214099300, v22, v22, v87, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v116);
  if (v117) {
    int64x2_t v92 = v116;
  }
  else {
    int64x2_t v92 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, v21, &unk_214099300, v22, v22, v92, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v116);
  if (v117) {
    int64x2_t v97 = v116;
  }
  else {
    int64x2_t v97 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v93, v94, v95, v96, v21, &unk_214099300, v22, v22, v97, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  uint64_t v98 = sizeObject((uint64_t)this + 264, 0);
  uint64_t v99 = sizeObject((uint64_t)this + 264, 1);
  uint64_t v100 = sizeObject((uint64_t)this + 264, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v116);
  if (v117) {
    char v105 = v116;
  }
  else {
    char v105 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v101, v102, v103, v104, v21, &unk_214099300, v22, v22, v105, v98, v99, v100);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v98;
  *a5 += v99;
  *v112 += v100;
  unint64_t v114 = 0;
  unint64_t v115 = 0;
  SearchItf::printSize(this, v111, v21, &v115, &v114, &v114);
  *a4 += v115;
  *a5 += v114;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v116);
  if (v117) {
    uint64_t v110 = v116;
  }
  else {
    uint64_t v110 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v106, v107, v108, v109, v113, &unk_214099300, (35 - v113), (35 - v113), v110, *a4, *a5, *v112);
  DgnString::~DgnString((DgnString *)&v116);
}

void sub_213E3D0E8(_Unwind_Exception *a1)
{
  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t FstSearchDurationHashBackoff::getBestTrace(uint64_t a1, void *a2, void *a3, int a4)
{
  if (a4) {
    unint64_t v4 = 0;
  }
  else {
    unint64_t v4 = *(unsigned int *)(a1 + 152);
  }
  unint64_t v5 = *(unsigned int *)(a1 + 224);
  if (v4 >= v5) {
    goto LABEL_21;
  }
  uint64_t v6 = 28 * v4;
  int v7 = 1879048192;
  uint64_t v8 = 0xFFFFFFFFLL;
  do
  {
    uint64_t v9 = *(void *)(a1 + 216);
    if (!a4 || (uint64_t v10 = *(unsigned int *)(v9 + v6 + 8), v10 == -1))
    {
      if (*(_DWORD *)(*(void *)(a1 + 40) + 160) != *(_DWORD *)(v9 + v6 + 4)) {
        goto LABEL_19;
      }
      uint64_t v10 = *(unsigned int *)(v9 + v6 + 8);
    }
    if (a2) {
      *(unsigned char *)(*a2 + v10) = 1;
    }
    if (a3) {
      *(unsigned char *)(*a3 + v10) = 1;
    }
    uint64_t v11 = *(void *)(a1 + 160) + 28 * v10;
    int v12 = *(_DWORD *)(v11 + 12) + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v11 + 4));
    if (v7 > v12) {
      uint64_t v8 = v10;
    }
    if (v7 >= v12) {
      int v7 = v12;
    }
    unint64_t v5 = *(unsigned int *)(a1 + 224);
LABEL_19:
    ++v4;
    v6 += 28;
  }
  while (v4 < v5);
  if (v8 == 0xFFFFFFFFLL)
  {
LABEL_21:
    uint64_t v13 = *(unsigned int *)(a1 + 168);
    uint64_t v8 = 0xFFFFFFFFLL;
    while (v13)
    {
      --v13;
      if ((a4 & 1) != 0 || *(_DWORD *)(*(void *)(a1 + 160) + 28 * v13) == 16777213)
      {
        if (a2) {
          *(unsigned char *)(*a2 + v13) = 1;
        }
        uint64_t v8 = v13;
        if (a3) {
          *(unsigned char *)(*a3 + v13) = 1;
        }
        return v8;
      }
    }
  }
  return v8;
}

BOOL FstSearchDurationHashBackoff::findBestPath(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8 = *(unsigned int *)(a1 + 168);
  if (v8) {
    BOOL v9 = *(_DWORD *)(a3 + 8) == 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    *(void *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v8;
  }
  if (v8) {
    BOOL v10 = *(_DWORD *)(a2 + 8) == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    *(void *)a2 = MemChunkAlloc(v8, 0);
    *(_DWORD *)(a2 + 8) = v8;
LABEL_14:
    uint64_t v11 = 0;
    do
    {
      *(unsigned char *)(*(void *)a2 + v11) = 0;
      *(unsigned char *)(*(void *)a3 + v11++) = 0;
    }
    while (v8 != v11);
    goto LABEL_16;
  }
  if (v8) {
    goto LABEL_14;
  }
LABEL_16:
  unsigned int BestTrace = FstSearchDurationHashBackoff::getBestTrace(a1, (void *)a2, (void *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1) {
    return 0;
  }
  uint64_t v13 = *(void *)(a1 + 160) + 28 * BestTrace;
  LODWORD(v13) = *(_DWORD *)(v13 + 12) + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v13 + 4));
  *a4 = v13;
  return v13 != 1879048192;
}

uint64_t FstSearchDurationHashBackoff::createLatticeNodes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t *a6, void *a7)
{
  uint64_t v8 = *(unsigned int *)(a1 + 168);
  if (v8) {
    BOOL v9 = *(_DWORD *)(a2 + 8) == 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    *(void *)a2 = MemChunkAlloc(4 * v8, 0);
    *(_DWORD *)(a2 + 8) = v8;
  }
  int Node = Lattice<WordLatticeLC>::createNode(a4);
  uint64_t result = a3;
  unsigned int v12 = *(_DWORD *)(a3 + 8);
  if (v12 == *(_DWORD *)(a3 + 12))
  {
    DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
    uint64_t result = a3;
    unsigned int v12 = *(_DWORD *)(a3 + 8);
  }
  *(_DWORD *)(*(void *)result + 4 * v12) = Node;
  ++*(_DWORD *)(result + 8);
  int v13 = *(_DWORD *)(a1 + 168);
  uint64_t v15 = a7;
  uint64_t v14 = a6;
  uint64_t v16 = (uint64_t *)a2;
  if (v13)
  {
    uint64_t v17 = (v13 - 1);
    uint64_t v18 = 28 * v17;
    int v19 = -1;
    do
    {
      uint64_t v20 = *v16;
      *(_DWORD *)(*v16 + 4 * v17) = -1;
      uint64_t v21 = *v14;
      if (*(unsigned char *)(*v14 + v17))
      {
        uint64_t v22 = *(void *)(a1 + 160);
        uint64_t v23 = *(void *)(a1 + 88);
        uint64_t result = *(unsigned int *)(v23 + 4 * *(unsigned int *)(v22 + v18 + 4));
        if (*(unsigned char *)(*v15 + v17))
        {
          if (*(unsigned char *)(*v14 + v17) != 1 || v19 == -1)
          {
            uint64_t v25 = *(unsigned int *)(v23 + 4 * *(unsigned int *)(v22 + v18 + 4));
            int v26 = v19;
            int v27 = Lattice<WordLatticeLC>::createNode(a4);
            uint64_t v28 = a3;
            uint64_t v16 = (uint64_t *)a2;
            *(_DWORD *)(*(void *)a2 + 4 * v17) = *(_DWORD *)(a3 + 8);
            uint64_t v29 = *(unsigned int *)(a3 + 8);
            if (v29 == *(_DWORD *)(a3 + 12))
            {
              DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
              uint64_t v28 = a3;
              uint64_t v16 = (uint64_t *)a2;
              uint64_t v29 = *(unsigned int *)(a3 + 8);
            }
            *(_DWORD *)(*(void *)v28 + 4 * v29) = v27;
            int v30 = *(_DWORD *)(v28 + 8);
            *(_DWORD *)(v28 + 8) = v30 + 1;
            uint64_t v14 = a6;
            uint64_t v21 = *a6;
            if (*(unsigned char *)(*a6 + v17) == 1) {
              int v19 = v30;
            }
            else {
              int v19 = v26;
            }
            uint64_t v22 = *(void *)(a1 + 160);
            uint64_t result = v25;
          }
          else
          {
            *(_DWORD *)(v20 + 4 * v17) = v19;
          }
        }
        uint64_t v31 = *(unsigned int *)(v22 + v18 + 8);
        uint64_t v32 = *(void *)(a1 + 176);
        uint64_t v33 = (_DWORD *)(v32 + 16 * v31);
        uint64_t v34 = v33[2];
        if ((v33[2] & 0x80000000) != 0)
        {
          *v33 += result;
        }
        else
        {
          if (*(_DWORD *)(v22 + v18) == 16777209)
          {
            uint64_t v35 = *a5 + 16 * v34;
            uint64_t v37 = (_DWORD *)(v35 + 8);
            uint64_t v36 = *(unsigned int *)(v35 + 8);
            uint64_t v38 = *(void *)(a1 + 176);
            if (v36 == *(_DWORD *)(v35 + 12))
            {
              unsigned int v44 = result;
              int v45 = v19;
              DgnPrimArray<unsigned int>::reallocElts(v35, 1, 1);
              uint64_t result = v44;
              int v19 = v45;
              uint64_t v16 = (uint64_t *)a2;
              uint64_t v14 = a6;
              uint64_t v36 = *v37;
              uint64_t v22 = *(void *)(a1 + 160);
              uint64_t v38 = *(void *)(a1 + 176);
              uint64_t v21 = *a6;
            }
            *(_DWORD *)(*(void *)v35 + 4 * v36) = v17;
            ++*v37;
            uint64_t v34 = v33[2];
            uint64_t v15 = a7;
          }
          else
          {
            *(unsigned char *)(*v15 + v34) = 1;
            uint64_t v38 = v32;
          }
          uint64_t v39 = v22 + 28 * v34;
          int v40 = *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v39 + 4));
          uint64_t v41 = (int *)(v38 + 16 * *(unsigned int *)(v39 + 8));
          int v42 = result + *v33 - v40;
          int v43 = *v41;
          LODWORD(v41) = v41[1];
          *uint64_t v33 = v42 - v43;
          *(_DWORD *)(v32 + 16 * v31 + 4) -= v41;
          *(unsigned char *)(v21 + v34) = 2;
        }
      }
      --v17;
      v18 -= 28;
      --v13;
    }
    while (v13);
  }
  return result;
}

uint64_t FstSearchDurationHashBackoff::buildWordLattice(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4, char a5)
{
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  int v29 = 0;
  uint64_t v26 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v25, *(unsigned int *)(a1 + 168));
  BOOL v9 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v9, 0, 128);
  v9[4] = (uint64_t)a2;
  FstSearchDurationHashBackoff::createLatticeNodes(a1, (uint64_t)&v28, (uint64_t)&v26, (uint64_t)a2, v25, a3, a4);
  uint64_t v23 = (uint64_t)v9;
  uint64_t v11 = *(unsigned int *)(a1 + 168);
  if (v11)
  {
    uint64_t v12 = 0;
    int v13 = v27;
    do
    {
      if (*(unsigned char *)(*a3 + v12))
      {
        uint64_t v14 = *(void *)(a1 + 160);
        if ((*(_DWORD *)(v14 + 28 * v12) - 16777209) >= 2)
        {
          uint64_t v15 = *(void *)(a1 + 176) + 16 * *(unsigned int *)(v14 + 28 * v12 + 8);
          uint64_t v16 = *(unsigned int *)(v15 + 8);
          if (v16 == -1) {
            unsigned int v17 = 0;
          }
          else {
            unsigned int v17 = v13 - *(_DWORD *)(v28 + 4 * v16);
          }
          uint64_t v18 = *(unsigned int *)(v26 + 4 * v17);
          if (*(unsigned char *)(*a4 + v12)) {
            FstSearchDurationHashBackoff::createLatticeLink(a1, v12, (int *)v15, 0xFFFFFFFFLL, v18, (const WordLatticeLC *)*(unsigned int *)(v26 + 4 * (v13 - *(_DWORD *)(v28 + 4 * v12))), a2, v10, a5);
          }
          uint64_t v19 = v25[0];
          if (*(_DWORD *)(v25[0] + 16 * v12 + 8))
          {
            unint64_t v20 = 0;
            do
            {
              uint64_t v21 = *(unsigned int *)(*(void *)(v19 + 16 * v12) + 4 * v20);
              FstSearchDurationHashBackoff::createLatticeLink(a1, v12, (int *)v15, v21, v18, (const WordLatticeLC *)*(unsigned int *)(v26 + 4 * (v13 - *(_DWORD *)(v28 + 4 * v21))), a2, v10, a5);
              ++v20;
              uint64_t v19 = v25[0];
            }
            while (v20 < *(unsigned int *)(v25[0] + 16 * v12 + 8));
          }
        }
      }
      ++v12;
    }
    while (v12 != v11);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>(v23);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v25);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v26);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v28);
}

void sub_213E3D83C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearchDurationHashBackoff::createLatticeLink(uint64_t a1, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, const WordLatticeLC *a6, uint64_t *a7, uint64_t a8, char a9)
{
  unsigned int v11 = a5;
  unsigned int v12 = a4;
  uint64_t v16 = *(void *)(a1 + 160);
  if ((a4 & 0x80000000) != 0)
  {
    unsigned int v17 = 0;
  }
  else if (*(_DWORD *)(*(void *)(a1 + 176) + 16 * *(unsigned int *)(v16 + 28 * a4 + 8) + 8) == a2)
  {
    unsigned int v17 = (_DWORD *)(*(void *)(a1 + 176) + 16 * *(unsigned int *)(v16 + 28 * a4 + 8));
  }
  else
  {
    unsigned int v17 = 0;
  }
  ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *(_DWORD *)(v16 + 28 * a2), (uint64_t)a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8, (uint64_t)v41);
  int v18 = a3[1];
  if (v17)
  {
    v18 += v17[1];
    int v19 = *v17 + *a3;
  }
  else
  {
    int v19 = *a3;
  }
  if (v41[0] >> 25 == 126)
  {
    int v20 = 0;
    int v21 = v18;
    if ((v12 & 0x80000000) != 0)
    {
LABEL_11:
      int v22 = 0;
      goto LABEL_14;
    }
  }
  else
  {
    int v20 = *(_DWORD *)(a1 + 136);
    int v21 = v18 - v20;
    if ((v12 & 0x80000000) != 0) {
      goto LABEL_11;
    }
  }
  int v22 = *(_DWORD *)(a1 + 140);
  v21 -= v22;
LABEL_14:
  int v23 = a3[3];
  if (v17) {
    v23 += v17[3];
  }
  int v35 = v21;
  uint64_t v36 = 0;
  int v37 = v20;
  int v38 = v19 - v18 - v23;
  int v39 = v23;
  int v40 = v22;
  unsigned int v24 = a3[2];
  uint64_t v25 = *(void *)(a1 + 160);
  if (v24 == -1)
  {
    int v27 = 0;
    if (a9) {
      goto LABEL_22;
    }
  }
  else
  {
    int v26 = *(_DWORD *)(v25 + 28 * v24 + 4);
    if (a9)
    {
      if (v26 >= 1) {
        --v26;
      }
      int v27 = (v26 >> 1) + 1;
LABEL_22:
      int v28 = *(_DWORD *)(v25 + 28 * a2 + 4);
      if (v28 >= 1) {
        --v28;
      }
      int v29 = v28 >> 1;
      int v30 = v29 - v27 + 1;
      if ((v12 & 0x80000000) == 0)
      {
        int v31 = *(_DWORD *)(v25 + 28 * v12 + 4);
        if (v31 >= 1) {
          --v31;
        }
        int v32 = v31 >> 1;
        goto LABEL_31;
      }
LABEL_32:
      int v33 = 0;
      goto LABEL_33;
    }
    int v27 = v26 + 1;
  }
  int v29 = *(_DWORD *)(v25 + 28 * a2 + 4);
  int v30 = v29 - v27 + 1;
  if ((v12 & 0x80000000) != 0) {
    goto LABEL_32;
  }
  int v32 = *(_DWORD *)(v25 + 28 * v12 + 4);
LABEL_31:
  int v33 = v32 - v29;
LABEL_33:
  WordLatticeLC::WordLatticeLC((uint64_t)v34, (uint64_t)v41, v27, v30, v33, (uint64_t)&v35);
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v11, a6, (WordLatticeLC *)v34);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v34);
}

void sub_213E3DA7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchDurationHashBackoff::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(void *)(this + 112) = a2;
  if (*(unsigned char *)(this + 380)) {
    return MiniFst::beginTopFstSyncRecog(this + 264);
  }
  return this;
}

uint64_t FstSearchDurationHashBackoff::endTopRecSyncRecog(FstSearchDurationHashBackoff *this)
{
  VirtMap::setEmpty(*((void *)this + 14));
  uint64_t result = *((void *)this + 14);
  *((void *)this + 14) = 0;
  return result;
}

uint64_t FstSearchDurationHashBackoff::getBestExitScore(FstSearchDurationHashBackoff *this)
{
  unsigned int v17 = 0;
  uint64_t v18 = 0;
  *((_DWORD *)this + 63) = -1;
  unint64_t v1 = *((unsigned int *)this + 38);
  unint64_t v2 = *((unsigned int *)this + 56);
  if (v1 >= v2) {
    goto LABEL_16;
  }
  unint64_t v4 = 0;
  unsigned int v5 = 0;
  uint64_t v6 = 28 * v1;
  do
  {
    uint64_t v7 = *((void *)this + 27) + v6;
    if (*(_DWORD *)(*((void *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      unsigned int v8 = *(_DWORD *)(v7 + 8);
      if (v8 != -1 && *(_DWORD *)(*((void *)this + 20) + 28 * v8 + 4) == *((_DWORD *)this + 62))
      {
        if (v5 == HIDWORD(v18))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v17, 1, 1);
          unsigned int v5 = v18;
          unint64_t v4 = v17;
        }
        v4[v5] = v8;
        unsigned int v5 = v18 + 1;
        LODWORD(v18) = v18 + 1;
        unint64_t v2 = *((unsigned int *)this + 56);
      }
    }
    ++v1;
    v6 += 28;
  }
  while (v1 < v2);
  if (v5)
  {
    uint64_t v9 = *((void *)this + 20);
    uint64_t v10 = v5;
    int v11 = 1879048192;
    do
    {
      unsigned int v13 = *v4++;
      unsigned int v12 = v13;
      int v14 = *(_DWORD *)(v9 + 28 * v13 + 12);
      if (v11 > v14)
      {
        *((_DWORD *)this + 63) = *(_DWORD *)(v9 + 28 * v12 + 16);
        int v11 = v14;
      }
      --v10;
    }
    while (v10);
  }
  else
  {
LABEL_16:
    int v11 = 1879048192;
  }
  if (v11 >= 20000) {
    uint64_t v15 = 20000;
  }
  else {
    uint64_t v15 = v11;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v17);
  return v15;
}

void sub_213E3DC28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t FstSearchDurationHashBackoff::getBestScoreMaybeUpdateFstNode(FstSearchDurationHashBackoff *this, Node *a2)
{
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v2 = *((unsigned int *)this + 56);
  if (v2)
  {
    uint64_t v3 = (int *)*((void *)this + 27);
    __int16 v4 = -1;
    int v5 = 1879048192;
    uint64_t v6 = v3;
    do
    {
      int v8 = *v6;
      v6 += 7;
      int v7 = v8;
      if (v5 > v8)
      {
        __int16 v4 = *((_WORD *)v3 + 6);
        int v5 = v7;
      }
      uint64_t v3 = v6;
      --v2;
    }
    while (v2);
    uint64_t v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000) {
        uint64_t v9 = 20000;
      }
      else {
        uint64_t v9 = v5;
      }
    }
  }
  else
  {
    uint64_t v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

void *FstSearchDurationHashBackoff::seedTheory(FstSearchDurationHashBackoff *this, int a2, int a3, int a4, SearchStats *a5)
{
  if (a4 == -2)
  {
    int v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    unsigned int v11 = *((_DWORD *)this + 42);
    if (v11 == *((_DWORD *)this + 43))
    {
      DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)this + 160, 1, 1);
      unsigned int v11 = *((_DWORD *)this + 42);
    }
    uint64_t v12 = *((void *)this + 20) + 28 * v11;
    *(_DWORD *)uint64_t v12 = a4;
    *(_DWORD *)(v12 + 4) = a3;
    *(_DWORD *)(v12 + 8) = -1;
    *(_DWORD *)(v12 + 12) = a2;
    *(void *)(v12 + 16) = 0xFFFFFFFFLL;
    *(_DWORD *)(v12 + 24) = 0;
    int v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  int v13 = *(_DWORD *)(*((void *)this + 5) + 144);
  unsigned int v14 = *((_DWORD *)this + 56);
  if (v14 == *((_DWORD *)this + 57))
  {
    DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)this + 216, 1, 1);
    unsigned int v14 = *((_DWORD *)this + 56);
  }
  uint64_t v15 = *((void *)this + 27) + 28 * v14;
  *(_DWORD *)uint64_t v15 = a2;
  *(_DWORD *)(v15 + 4) = v13;
  *(_DWORD *)(v15 + 8) = v9;
  *(_WORD *)(v15 + 12) = -2;
  *(void *)(v15 + 16) = 0;
  *(_DWORD *)(v15 + 24) = 0;
  LODWORD(v15) = *((_DWORD *)this + 56) + 1;
  *((_DWORD *)this + 56) = v15;
  *((_DWORD *)this + 38) = v15;

  return FstSearchDurationHashBackoff::propagateNulls(this, 20000, a3, a5);
}

uint64_t FstSearchDurationHashBackoff::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(unsigned int *)(result + 252);
  if (v8 != -1)
  {
    uint64_t v9 = result;
    uint64_t v10 = (unsigned int *)(*(void *)(result + 160) + 28 * v8);
    for (i = v10[4]; i != -1; uint64_t v8 = v16)
    {
      uint64_t v16 = i;
      uint64_t result = *(void *)(v9 + 40);
      if (*v10 == 16777209)
      {
        int v17 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        uint64_t result = ArcGraph::lexToCWID((ArcGraph *)result, *v10, a3, (uint64_t)a4, a5, a6, a7, a8);
        int v17 = result;
      }
      uint64_t v18 = *(unsigned int *)(a2 + 8);
      if (v18 == *(_DWORD *)(a2 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        uint64_t v18 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(void *)a2 + 4 * v18) = v17;
      ++*(_DWORD *)(a2 + 8);
      uint64_t v19 = *(unsigned int *)(a6 + 8);
      if (v19 == *(_DWORD *)(a6 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        uint64_t v19 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(void *)a6 + 4 * v19) = v8;
      ++*(_DWORD *)(a6 + 8);
      uint64_t v20 = *(void *)(v9 + 160);
      int v21 = *(_DWORD *)(v20 + 28 * v8 + 4);
      uint64_t v22 = *(unsigned int *)(a3 + 8);
      if (v22 == *(_DWORD *)(a3 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        uint64_t v22 = *(unsigned int *)(a3 + 8);
        uint64_t v20 = *(void *)(v9 + 160);
      }
      *(_DWORD *)(*(void *)a3 + 4 * v22) = v21;
      ++*(_DWORD *)(a3 + 8);
      int v23 = *(_DWORD *)(v20 + 28 * v8 + 12);
      uint64_t v24 = *(unsigned int *)(a5 + 8);
      if (v24 == *(_DWORD *)(a5 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        uint64_t v24 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(void *)a5 + 4 * v24) = v23;
      ++*(_DWORD *)(a5 + 8);
      uint64_t v10 = (unsigned int *)(*(void *)(v9 + 160) + 28 * v16);
      uint64_t i = v10[4];
    }
    *a4 = *v10;
  }
  return result;
}

void FstSearchDurationHashBackoff::checkSearchParametersValidityForArcGraph(FstSearchDurationHashBackoff *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *((void *)this + 5);
  if (*(unsigned char *)(v8 + 178))
  {
    int v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(unsigned char *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    }
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    }
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(void *)(**(void **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((void *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if (a2)
      {
        if (!*(unsigned char *)(v8 + 203)) {
          return;
        }
      }
      else if (*(unsigned char *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(unsigned char *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

void FstSearchDurationHashBackoff::getHistory(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 == -1)
  {
    *(_DWORD *)(a3 + 8) = 0;
  }
  else
  {
    int v9 = a4;
    LODWORD(v11) = 0;
    uint64_t v12 = a2;
    uint64_t v13 = a2;
    do
    {
      unsigned int v14 = (_DWORD *)(*(void *)(a1 + 160) + 28 * v13);
      if (*v14 == 16777209) {
        uint64_t v11 = v11;
      }
      else {
        uint64_t v11 = (v11 + 1);
      }
      uint64_t v13 = v14[4];
    }
    while (v13 != -1);
    unsigned int v15 = *(_DWORD *)(a3 + 12);
    if (v11 > v15) {
      DgnArray<PrefilterResultFrame>::reallocElts(a3, v11 - v15, 0);
    }
    uint64_t v16 = *(unsigned int *)(a3 + 8);
    if (v16 < v11)
    {
      uint64_t v17 = v11 - v16;
      uint64_t v18 = *(void *)a3 + 32 * v16;
      do
      {
        *(void *)uint64_t v18 = 0x3FFFFAFFFFFFLL;
        *(_OWORD *)(v18 + 8) = xmmword_2140866D0;
        *(void *)(v18 + 24) = 0x1F0000001FLL;
        v18 += 32;
        --v17;
      }
      while (v17);
    }
    *(_DWORD *)(a3 + 8) = v11;
    if (v11)
    {
      uint64_t v19 = *(void *)(a1 + 160);
      int v20 = -16;
      do
      {
        int v21 = (unsigned int *)(v19 + 28 * v12);
        int v22 = v21[1];
        if (*v21 == 16777209)
        {
          if (v9)
          {
            int v23 = v22 - 1;
            if (v22 < 1) {
              int v23 = v22;
            }
            int v20 = (v23 >> 1) + 1;
          }
          else
          {
            int v20 = v22 + 1;
          }
        }
        else
        {
          if (v9)
          {
            int v24 = v22 - 1;
            if (v22 < 1) {
              int v24 = v21[1];
            }
            int v22 = v24 >> 1;
          }
          ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *v21, a3, a4, a5, a6, a7, a8, (uint64_t)v28);
          if (v20 == -16) {
            int v25 = v22 + 1;
          }
          else {
            int v25 = v20;
          }
          int v26 = v28[1];
          uint64_t v11 = (v11 - 1);
          uint64_t v27 = *(void *)a3 + 32 * v11;
          *(_DWORD *)uint64_t v27 = v28[0];
          *(_DWORD *)(v27 + 4) = v26;
          *(_OWORD *)(v27 + 8) = v29;
          *(_DWORD *)(v27 + 24) = v22 + 1;
          *(_DWORD *)(v27 + 28) = v25;
          uint64_t v19 = *(void *)(a1 + 160);
          int v20 = -16;
        }
        uint64_t v12 = *(unsigned int *)(v19 + 28 * v12 + 16);
      }
      while (v12 != -1);
    }
  }
}

uint64_t FstSearchDurationHashBackoff::makePartialResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    uint64_t v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(void *)a2 + v9))(*(void *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  unsigned int BestTrace = FstSearchDurationHashBackoff::getBestTrace(a1, 0, 0, 1);
  if (BestTrace == -1) {
    return 1879048192;
  }
  unsigned int v15 = BestTrace;
  FstSearchDurationHashBackoff::getHistory(a1, BestTrace, a3, a4, v11, v12, v13, v14);
  memset(v25, 0, sizeof(v25));
  int v26 = 0;
  if (*(_DWORD *)(a3 + 8))
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    int v18 = 0;
    do
    {
      uint64_t v19 = *(void *)a3 + v16;
      int v20 = *(_DWORD *)(v19 + 28);
      WordLatticeLC::WordLatticeLC((uint64_t)v24, v19, v18, *(_DWORD *)(v19 + 24) - v18, v20 - *(_DWORD *)(v19 + 24), (uint64_t)v25);
      uint64_t v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(void *)a2 + 112 * v21), (const WordLatticeLC *)v24);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v24);
      ++v17;
      v16 += 32;
      int v18 = v20;
    }
    while (v17 < *(unsigned int *)(a3 + 8));
  }
  uint64_t v22 = *(void *)(a1 + 160) + 28 * v15;
  return (*(_DWORD *)(v22 + 12) + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_213E3E4B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void FstSearchDurationHash::FstSearchDurationHash(FstSearchDurationHash *this, const int *a2, const int *a3)
{
  SearchItf::SearchItf(this);
  *(void *)uint64_t v5 = &unk_26C4E2DF8;
  *(_DWORD *)(v5 + 136) = *a2;
  *(_DWORD *)(v5 + 140) = *a3;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 232) = 0u;
  *(_OWORD *)(v5 + 216) = 0u;
  *(_DWORD *)(v5 + 248) = -1;
  *(_DWORD *)(v5 + 256) = 1879048192;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_OWORD *)(v5 + 2DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 64) = 0u;
  *(unsigned char *)(v5 + 3DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = 0;
}

uint64_t FstSearchDurationHash::maybeInitDurModel(FstSearchDurationHash *this, const PicMgr *a2, int a3)
{
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  PicMgr::getPelDurIdMap((uint64_t)a2, (uint64_t)&v15);
  if (a3 == 1) {
    uint64_t v6 = 56;
  }
  else {
    uint64_t v6 = 72;
  }
  uint64_t v7 = v16;
  unsigned int v8 = *((_DWORD *)this + 51);
  if (v16 <= v8)
  {
    *((_DWORD *)this + 50) = v16;
    if (!v7) {
      goto LABEL_13;
    }
  }
  else
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 192, v16 - v8, 0);
    *((_DWORD *)this + 50) = v7;
  }
  uint64_t v9 = 0;
  uint64_t v10 = v15;
  uint64_t v11 = *((void *)this + 24);
  do
  {
    if (!(_WORD)v9 || (uint64_t v12 = *(unsigned __int16 *)(v10 + 2 * v9), v12 == 0xFFFF)) {
      __int16 v13 = 0;
    }
    else {
      __int16 v13 = *(_WORD *)(*(void *)((char *)a2 + v6) + 2 * v12);
    }
    *(_WORD *)(v11 + 2 * v9++) = v13;
  }
  while (v7 != v9);
LABEL_13:
  *((unsigned char *)this + 208) = *((unsigned char *)a2 + 8);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 3);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v15);
}

void sub_213E3E640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int64x2_t FstSearchDurationHash::advanceDeltas(FstSearchDurationHash *this, int a2, int a3, SearchStats *a4, int a5)
{
  int v8 = a2;
  v105[0] = a2;
  int64x2_t v103 = 0u;
  int64x2_t v104 = 0u;
  SnapTime::recordTime((SnapTime *)&v103, 1, 0, 0, 0);
  *(void *)uint64_t v102 = 0xFFFFFFFF00000000;
  *(_DWORD *)&v102[8] = -1;
  *(_WORD *)&v102[12] = -2;
  *(void *)&v102[16] = 0;
  *(_DWORD *)&v102[24] = 0;
  uint64_t v10 = (int *)((char *)this + 256);
  *((_DWORD *)this + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 64) = a3;
  int v11 = *((_DWORD *)this + 2);
  unint64_t v12 = *((unsigned int *)this + 56);
  if (v12)
  {
    int v78 = a5;
    uint64_t v79 = a4;
    unint64_t v13 = 0;
    int v82 = *((_DWORD *)this + 53);
    int v80 = v8;
    int v81 = *((unsigned __int8 *)this + 208);
    do
    {
      uint64_t v14 = *((void *)this + 27);
      uint64_t v15 = (int *)(v14 + 28 * v13);
      uint64_t v16 = v15[1];
      uint64_t v17 = *((void *)this + 5);
      if (*(_DWORD *)(v17 + 160) != v16)
      {
        if (*(_DWORD *)(v17 + 140) > (int)v16)
        {
          int v18 = *v15;
          int ScoreNoBackoff = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(v14 + 28 * v13 + 12));
          int v20 = (long long *)(*((void *)this + 27) + 28 * v13);
          long long v21 = *v20;
          *(_OWORD *)&v102[12] = *(long long *)((char *)v20 + 12);
          *(_OWORD *)uint64_t v102 = v21;
          int v22 = WORD6(v21);
          if (WORD6(v21))
          {
            if (*(int *)&v102[20] >= 1) {
              int v23 = v81 - *(_DWORD *)&v102[20];
            }
            else {
              int v23 = v81;
            }
            int v22 = v23 & ((*(_DWORD *)&v102[20] - v81) >> 31);
            *(_DWORD *)&v102[20] -= v81;
            *(_DWORD *)&v102[24] += v22;
          }
          int v24 = ScoreNoBackoff + v18 + v22;
          if (v24 - v11 <= *v10)
          {
            if (*v10 > v24) {
              *uint64_t v10 = v24;
            }
            *(_DWORD *)uint64_t v102 = v24;
            FstSearchDurationHashBackoff::maybeInsertHashedToken((uint64_t)this, (uint64_t)v102);
          }
        }
        unsigned int v25 = v16;
        do
        {
          uint64_t v26 = *((void *)this + 5);
          uint64_t v27 = *(void *)(v26 + 152);
          unsigned int v28 = *(_DWORD *)(v27 + 4 * v25);
          int v29 = *(_DWORD *)(v27 + 4 * (v25 + 1));
          int v30 = *(_DWORD *)(v26 + 140);
          if (v30 <= v29)
          {
            if (v30 <= (int)v16 && *((unsigned char *)this + 380) != 0)
            {
              unsigned int v39 = (v28 & 0xFFFFF) <= 0xFFFF3 ? v28 & 0xFFFFF : v28 & 0xFFFFF | 0xF00000;
              if (v39 != 16777210)
              {
                DgnString::DgnString((DgnString *)&v99);
                ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v39, (DgnString *)&v99, v40, v41, v42, v43, v44);
                uint64_t v49 = &unk_214099300;
                if (v99.i32[2]) {
                  uint64_t v49 = (void *)v99.i64[0];
                }
                xprintf("Seed from state %d score %d trace %d, %s\n", v45, v46, v47, v48, v16, *(unsigned int *)(*((void *)this + 27) + 28 * v13), *(unsigned int *)(*((void *)this + 27) + 28 * v13 + 8), v49);
                MiniFst::seed((uint64_t)this + 264, *(_DWORD *)(*((void *)this + 27) + 28 * v13), 0, *(_DWORD *)(*((void *)this + 27) + 28 * v13 + 8), v29);
                DgnString::~DgnString((DgnString *)&v99);
              }
            }
          }
          else
          {
            int v31 = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), (unsigned __int16)*(_DWORD *)(v27 + 4 * v25));
            uint64_t v32 = *((void *)this + 27) + 28 * v13;
            int v33 = *(_DWORD *)v32;
            long long v34 = *(_OWORD *)v32;
            *(_OWORD *)&v102[12] = *(_OWORD *)(v32 + 12);
            *(_OWORD *)uint64_t v102 = v34;
            int v35 = *(_DWORD *)&v102[20] & ~(*(int *)&v102[20] >> 31);
            if ((_WORD)v28)
            {
              int v36 = *(__int16 *)(*((void *)this + 24) + 2 * (unsigned __int16)v28);
              v35 -= v36 & (v36 >> 31);
              int v37 = v82;
            }
            else
            {
              int v36 = 0;
              int v37 = 0;
            }
            int v50 = (v28 >> 20) & 0x3FF;
            int v51 = v37 + v35;
            *(_DWORD *)&v102[20] = v36;
            *(_DWORD *)&v102[24] += v51;
            int v52 = v31 + v50 + v33 + v51;
            if (v52 - v11 <= *v10)
            {
              if (*v10 > v52) {
                *uint64_t v10 = v52;
              }
              *(_DWORD *)uint64_t v102 = v52;
              *(_DWORD *)&v102[4] = v29;
              *(_WORD *)&v102[12] = v28;
              *(_DWORD *)&v102[16] += v50;
              FstSearchDurationHashBackoff::maybeInsertHashedToken((uint64_t)this, (uint64_t)v102);
            }
          }
          v25 += 2;
        }
        while ((v28 & 0x80000000) == 0);
        unint64_t v12 = *((unsigned int *)this + 56);
      }
      ++v13;
    }
    while (v13 < v12);
    a3 = *v10;
    int v8 = v80;
    a4 = v79;
    a5 = v78;
  }
  int v101 = a3 + v11;
  if (*((unsigned char *)this + 380)) {
    MiniFst::updateFrame((char *)this + 264, (int *)this + 64, v11, v8);
  }
  int64x2_t v99 = 0u;
  int64x2_t v100 = 0u;
  SnapTime::recordTime((SnapTime *)&v99, 1, 0, 0, 0);
  int64x2_t v99 = vsubq_s64(v99, v103);
  int64x2_t v100 = vsubq_s64(v100, v104);
  uint64_t v53 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v54 = vaddq_s64(v53[1], v100);
  *uint64_t v53 = vaddq_s64(*v53, v99);
  v53[1] = v54;
  int64x2_t v97 = 0u;
  int64x2_t v98 = 0u;
  SnapTime::recordTime((SnapTime *)&v97, 1, 0, 0, 0);
  FstSearchDurationHashBackoff::applyCutoffOnEmitting((uint64_t)this, *((_DWORD *)this + 4), &v101);
  int64x2_t v95 = 0u;
  int64x2_t v96 = 0u;
  SnapTime::recordTime((SnapTime *)&v95, 1, 0, 0, 0);
  int64x2_t v55 = vsubq_s64(v95, v97);
  uint64_t v56 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v57 = v56[3];
  int64x2_t v58 = vaddq_s64(v56[2], v55);
  int64x2_t v95 = v55;
  int64x2_t v96 = vsubq_s64(v96, v98);
  int64x2_t v59 = vaddq_s64(v57, v96);
  v56[2] = v58;
  v56[3] = v59;
  int64x2_t v93 = 0u;
  int64x2_t v94 = 0u;
  SnapTime::recordTime((SnapTime *)&v93, 1, 0, 0, 0);
  uint64_t v60 = *((void *)this + 27);
  uint64_t v61 = *((void *)this + 29);
  *((void *)this + 27) = v61;
  *((void *)this + 29) = v60;
  LODWORD(v60) = *((_DWORD *)this + 57);
  uint64_t v62 = *((void *)this + 30);
  *((void *)this + 28) = v62;
  *((_DWORD *)this + 60) = 0;
  *((_DWORD *)this + 61) = v60;
  unint64_t v63 = *((unsigned int *)this + 6);
  if (v63 && v62 && v63 < v62) {
    mrec_nth_element<FstSearchLatticeHashBackoffcmpTok>(v61, v63, v62);
  }
  int64x2_t v91 = 0u;
  int64x2_t v92 = 0u;
  SnapTime::recordTime((SnapTime *)&v91, 1, 0, 0, 0);
  int64x2_t v64 = vsubq_s64(v91, v93);
  uint64_t v65 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v66 = v65[5];
  int64x2_t v67 = vaddq_s64(v65[4], v64);
  int64x2_t v91 = v64;
  int64x2_t v92 = vsubq_s64(v92, v94);
  int64x2_t v68 = vaddq_s64(v66, v92);
  v65[4] = v67;
  v65[5] = v68;
  int64x2_t v89 = 0u;
  int64x2_t v90 = 0u;
  SnapTime::recordTime((SnapTime *)&v89, 1, 0, 0, 0);
  VirtMap::setEmpty(*((void *)this + 14));
  int64x2_t v87 = 0u;
  int64x2_t v88 = 0u;
  SnapTime::recordTime((SnapTime *)&v87, 1, 0, 0, 0);
  int64x2_t v69 = vsubq_s64(v87, v89);
  uint64_t v70 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v71 = v70[9];
  int64x2_t v72 = vaddq_s64(v70[8], v69);
  int64x2_t v87 = v69;
  int64x2_t v88 = vsubq_s64(v88, v90);
  int64x2_t v73 = vaddq_s64(v71, v88);
  v70[8] = v72;
  v70[9] = v73;
  int64x2_t v85 = 0u;
  int64x2_t v86 = 0u;
  SnapTime::recordTime((SnapTime *)&v85, 1, 0, 0, 0);
  *((_DWORD *)this + 60) = 0;
  uint64_t v74 = *((unsigned int *)this + 56);
  *((_DWORD *)this + 38) = v74;
  if (a4)
  {
    *((void *)a4 + 2) += v74;
    if (*((_DWORD *)a4 + 2) > v74) {
      LODWORD(v74) = *((_DWORD *)a4 + 2);
    }
    *((_DWORD *)a4 + 2) = v74;
  }
  if (*((unsigned char *)this + 380)) {
    FstSearchDurationHash::seedFromMiniFst((uint64_t)this, v105);
  }
  if (a5) {
    FstSearchDurationHashBackoff::propagateNulls(this, v101, v8, a4);
  }
  *((_DWORD *)this + 62) = v8;
  int64x2_t v83 = 0u;
  int64x2_t v84 = 0u;
  SnapTime::recordTime((SnapTime *)&v83, 1, 0, 0, 0);
  uint64_t v75 = (int64x2_t *)*((void *)this + 13);
  int64x2_t result = vaddq_s64(v75[6], vsubq_s64(v83, v85));
  int64x2_t v77 = vaddq_s64(v75[7], vsubq_s64(v84, v86));
  v75[6] = result;
  v75[7] = v77;
  return result;
}

void sub_213E3EC60(_Unwind_Exception *exception_object)
{
}

uint64_t FstSearchDurationHash::seedFromMiniFst(uint64_t this, int *a2)
{
  if (*(unsigned char *)(this + 380))
  {
    uint64_t v2 = this;
    unsigned int v3 = *(_DWORD *)(this + 288);
    if (v3 >= *(_DWORD *)(this + 20)) {
      unsigned int v3 = *(_DWORD *)(this + 20);
    }
    if (v3)
    {
      uint64_t v5 = 0;
      unsigned int v6 = 0;
      uint64_t v20 = this + 216;
      long long v21 = (void *)(this + 160);
      do
      {
        uint64_t v7 = (int *)(*(void *)(v2 + 280) + v5);
        int v8 = *v7;
        int v10 = v7[6];
        int v9 = v7[7];
        int v11 = v7[2];
        v22[0] = 0;
        v22[1] = 0;
        if ((v11 & 0x80000000) == 0)
        {
          while (1)
            ;
        }
        unsigned int v12 = -2 - v11;
        if (v9 == 16777213)
        {
          int v9 = 16777209;
          if (*(_DWORD *)(*v21 + 28 * v12) == 16777209) {
            unsigned int v12 = *(_DWORD *)(*(void *)(v2 + 176) + 16 * *(unsigned int *)(*v21 + 28 * v12 + 8) + 8);
          }
        }
        int v13 = *a2;
        uint64_t v14 = *(unsigned int *)(v2 + 168);
        if (v14 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)v21, 1, 1);
          LODWORD(v14) = *(_DWORD *)(v2 + 168);
        }
        uint64_t v15 = (int *)(*(void *)(v2 + 160) + 28 * v14);
        int *v15 = v9;
        v15[1] = v13;
        void v15[2] = -1;
        v15[3] = v8;
        v15[5] = 0;
        v15[6] = 0;
        v15[4] = v12;
        int v16 = *(_DWORD *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v16 + 1;
        uint64_t v17 = *(unsigned int *)(v2 + 224);
        if (v17 == *(_DWORD *)(v2 + 228))
        {
          DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(v20, 1, 1);
          LODWORD(v17) = *(_DWORD *)(v2 + 224);
        }
        uint64_t v18 = *(void *)(v2 + 216) + 28 * v17;
        *(_DWORD *)uint64_t v18 = v8;
        *(_DWORD *)(v18 + 4) = v10;
        *(_DWORD *)(v18 + 8) = v16;
        *(_WORD *)(v18 + 12) = -2;
        *(void *)(v18 + 16) = 0;
        *(_DWORD *)(v18 + 24) = 0;
        ++*(_DWORD *)(v2 + 224);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v22);
        ++v6;
        unsigned int v19 = *(_DWORD *)(v2 + 288);
        if (v19 >= *(_DWORD *)(v2 + 20)) {
          unsigned int v19 = *(_DWORD *)(v2 + 20);
        }
        v5 += 36;
      }
      while (v6 < v19);
    }
  }
  return this;
}

void sub_213E3EE5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchDurationHash::collectTraces(FstSearchDurationHash *this)
{
  unint64_t v2 = *((unsigned int *)this + 42);
  int v36 = 0;
  int v35 = 0;
  if (v2)
  {
    unsigned int v3 = MemChunkAlloc(4 * v2, 0);
    unint64_t v4 = 0;
    int v35 = v3;
    int v36 = v2;
    do
      *((_DWORD *)v3 + v4++) = 0;
    while (v4 < v2);
  }
  else
  {
    unsigned int v3 = 0;
  }
  unint64_t v5 = *((unsigned int *)this + 56);
  if (v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = (unsigned int *)(*((void *)this + 27) + 8);
    do
    {
      unsigned int v9 = *v7;
      v7 += 7;
      uint64_t v8 = v9;
      if (v9 != -1)
      {
        *((_DWORD *)v3 + v8) = 1;
        unint64_t v5 = *((unsigned int *)this + 56);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  int v10 = *((_DWORD *)this + 42);
  if (!v10) {
    goto LABEL_32;
  }
  int v11 = (uint64_t *)((char *)this + 160);
  unsigned int v12 = v10 - 1;
  do
  {
    uint64_t v13 = v12;
    if (*((_DWORD *)v3 + v12))
    {
      uint64_t v14 = *(unsigned int *)(*v11 + 28 * v12 + 16);
      if (v14 != -1) {
        *((_DWORD *)v3 + v14) = 1;
      }
    }
    --v12;
  }
  while (v13);
  unsigned int v15 = *((_DWORD *)this + 42);
  if (v15)
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    unsigned int v18 = 0;
    do
    {
      if (*((_DWORD *)v3 + v17))
      {
        uint64_t v19 = *v11;
        if (v17 != v18)
        {
          uint64_t v20 = (long long *)(v19 + v16);
          long long v21 = (_OWORD *)(v19 + 28 * v18);
          long long v22 = *v20;
          *(_OWORD *)((char *)v21 + 12) = *(long long *)((char *)v20 + 12);
          *long long v21 = v22;
          uint64_t v19 = *v11;
        }
        uint64_t v23 = v19 + 28 * v18;
        unsigned int v26 = *(_DWORD *)(v23 + 16);
        int v24 = (_DWORD *)(v23 + 16);
        uint64_t v25 = v26;
        if (v26 != -1) {
          *int v24 = *((_DWORD *)v3 + v25);
        }
        *((_DWORD *)v3 + v17) = v18++;
        unsigned int v15 = *((_DWORD *)this + 42);
      }
      ++v17;
      v16 += 28;
    }
    while (v17 < v15);
    unsigned int v27 = *((_DWORD *)this + 43);
    if (v18 > v27)
    {
      DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)this + 160, v18 - v27, 0);
      unsigned int v15 = *((_DWORD *)this + 42);
    }
    if (v15 < v18)
    {
      unint64_t v28 = v18 - (unint64_t)v15;
      int v29 = (_DWORD *)(*v11 + 28 * v15 + 24);
      do
      {
        *(_OWORD *)(v29 - 6) = xmmword_2140992B0;
        *((void *)v29 - 1) = 0xFFFFFFFFLL;
        *int v29 = 0;
        v29 += 7;
        --v28;
      }
      while (v28);
    }
  }
  else
  {
LABEL_32:
    unsigned int v18 = 0;
  }
  *((_DWORD *)this + 42) = v18;
  uint64_t v30 = *((unsigned int *)this + 56);
  if (v30)
  {
    int v31 = v35;
    uint64_t v32 = (_DWORD *)(*((void *)this + 27) + 8);
    do
    {
      uint64_t v33 = *v32;
      if (v33 != -1) {
        *uint64_t v32 = *((_DWORD *)v31 + v33);
      }
      v32 += 7;
      --v30;
    }
    while (v30);
  }
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v35);
}

void sub_213E3F084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int64x2_t FstSearchDurationHash::vite(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  FstSearchDurationHash::advanceDeltas((FstSearchDurationHash *)this, a2, a3, a4, a5);
  int64x2_t v13 = 0u;
  int64x2_t v14 = 0u;
  SnapTime::recordTime((SnapTime *)&v13, 1, 0, 0, 0);
  if (a2 >= 1)
  {
    unsigned int v7 = *((_DWORD *)this + 18);
    if (v7)
    {
      if (!(a2 % v7)) {
        FstSearchDurationHash::collectTraces((FstSearchDurationHash *)this);
      }
    }
  }
  int64x2_t v11 = 0u;
  int64x2_t v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  uint64_t v8 = this[13];
  int64x2_t result = vaddq_s64(v8[14], vsubq_s64(v11, v13));
  int64x2_t v10 = vaddq_s64(v8[15], vsubq_s64(v12, v14));
  v8[14] = result;
  v8[15] = v10;
  return result;
}

int64x2_t FstSearchDurationHash::reset(FstSearchDurationHash *this)
{
  *((_DWORD *)this + 42) = 0;
  *((_DWORD *)this + 46) = 0;
  *((_DWORD *)this + 56) = 0;
  int64x2_t v7 = 0u;
  int64x2_t v8 = 0u;
  SnapTime::recordTime((SnapTime *)&v7, 1, 0, 0, 0);
  int64x2_t v5 = 0u;
  int64x2_t v6 = 0u;
  SnapTime::recordTime((SnapTime *)&v5, 1, 0, 0, 0);
  unint64_t v2 = (int64x2_t *)*((void *)this + 13);
  int64x2_t result = vaddq_s64(v2[10], vsubq_s64(v5, v7));
  int64x2_t v4 = vaddq_s64(v2[11], vsubq_s64(v6, v8));
  v2[10] = result;
  v2[11] = v4;
  return result;
}

double FstSearchDurationHash::doFrame(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  if (a3 >= 20000) {
    a3 = 20000;
  }
  *(void *)&double result = FstSearchDurationHash::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearchDurationHash::beginTopRecPassSyncRecog(FstSearchDurationHash *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 264, a3, *((PelScoreCache **)this + 4));
    uint64_t result = ArcGraph::findBackoffState(*((void *)this + 5));
    *((_DWORD *)this + 94) = result;
    *((unsigned char *)this + 3DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = 1;
  }
  return result;
}

uint64_t FstSearchDurationHash::endTopRecPassSyncRecog(FstSearchDurationHash *this)
{
  int64x2_t v10 = 0u;
  int64x2_t v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  FstSearchDurationHashBackoff::generateTraceTokensFromTraces((unint64_t)this);
  int64x2_t v8 = 0u;
  int64x2_t v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  int64x2_t v2 = vsubq_s64(v8, v10);
  unsigned int v3 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v4 = v3[13];
  int64x2_t v5 = vaddq_s64(v3[12], v2);
  int64x2_t v8 = v2;
  int64x2_t v9 = vsubq_s64(v9, v11);
  int64x2_t v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 64) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

void FstSearchDurationHash::printSize(FstSearchDurationHash *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v116);
  if (v117) {
    uint64_t v16 = v116;
  }
  else {
    uint64_t v16 = &unk_214099300;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_214099300, a3, &unk_214099300, v16);
  DgnString::~DgnString((DgnString *)&v116);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_214099300);
  uint64_t v21 = (a3 + 1);
  uint64_t v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v116);
  if (v117) {
    unsigned int v27 = v116;
  }
  else {
    unsigned int v27 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v116);
  if (v117) {
    uint64_t v32 = v116;
  }
  else {
    uint64_t v32 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v116);
  if (v117) {
    int v37 = v116;
  }
  else {
    int v37 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v37, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v116);
  if (v117) {
    uint64_t v42 = v116;
  }
  else {
    uint64_t v42 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v42, 4, 4, 0);
  uint64_t v111 = a2;
  unsigned int v112 = a6;
  uint64_t v113 = a3;
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  uint64_t v43 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v43 = 16;
  }
  uint64_t v44 = *((unsigned int *)this + 42);
  uint64_t v45 = 28 * v44;
  if ((int)v44 <= 0) {
    uint64_t v45 = 0;
  }
  uint64_t v46 = v45 + v43;
  uint64_t v47 = v45 + v43 + 28 * (*((_DWORD *)this + 43) - v44);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v116);
  if (v117) {
    int v52 = v116;
  }
  else {
    int v52 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, v21, &unk_214099300, v22, v22, v52, v47, v46, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v47;
  *a5 += v46;
  uint64_t v53 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v53 = 16;
  }
  uint64_t v54 = *((unsigned int *)this + 46);
  uint64_t v55 = 16 * v54;
  if ((int)v54 <= 0) {
    uint64_t v55 = 0;
  }
  uint64_t v56 = v55 + v53;
  uint64_t v57 = v55 + v53 + 16 * (*((_DWORD *)this + 47) - v54);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v116);
  if (v117) {
    uint64_t v62 = v116;
  }
  else {
    uint64_t v62 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, v21, &unk_214099300, v22, v22, v62, v57, v56, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v57;
  *a5 += v56;
  uint64_t v63 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v63 = 16;
  }
  int v64 = *((_DWORD *)this + 56);
  uint64_t v65 = 26 * v64;
  if (v64 <= 0) {
    uint64_t v65 = 0;
  }
  uint64_t v66 = v65 + v63;
  uint64_t v67 = v65 + v63 + 26 * (*((_DWORD *)this + 57) - v64);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v116);
  if (v117) {
    int64x2_t v72 = v116;
  }
  else {
    int64x2_t v72 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, v21, &unk_214099300, v22, v22, v72, v67, v66, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v67;
  *a5 += v66;
  uint64_t v73 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v73 = 16;
  }
  int v74 = *((_DWORD *)this + 60);
  uint64_t v75 = 26 * v74;
  if (v74 <= 0) {
    uint64_t v75 = 0;
  }
  uint64_t v76 = v75 + v73;
  uint64_t v77 = v75 + v73 + 26 * (*((_DWORD *)this + 61) - v74);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v116);
  if (v117) {
    int v82 = v116;
  }
  else {
    int v82 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, v21, &unk_214099300, v22, v22, v82, v77, v76, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v77;
  *a5 += v76;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v116);
  if (v117) {
    int64x2_t v87 = v116;
  }
  else {
    int64x2_t v87 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v83, v84, v85, v86, v21, &unk_214099300, v22, v22, v87, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v116);
  if (v117) {
    int64x2_t v92 = v116;
  }
  else {
    int64x2_t v92 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, v21, &unk_214099300, v22, v22, v92, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v116);
  if (v117) {
    int64x2_t v97 = v116;
  }
  else {
    int64x2_t v97 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v93, v94, v95, v96, v21, &unk_214099300, v22, v22, v97, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  uint64_t v98 = sizeObject((uint64_t)this + 264, 0);
  uint64_t v99 = sizeObject((uint64_t)this + 264, 1);
  uint64_t v100 = sizeObject((uint64_t)this + 264, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v116);
  if (v117) {
    char v105 = v116;
  }
  else {
    char v105 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v101, v102, v103, v104, v21, &unk_214099300, v22, v22, v105, v98, v99, v100);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v98;
  *a5 += v99;
  *v112 += v100;
  unint64_t v114 = 0;
  unint64_t v115 = 0;
  SearchItf::printSize(this, v111, v21, &v115, &v114, &v114);
  *a4 += v115;
  *a5 += v114;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v116);
  if (v117) {
    uint64_t v110 = v116;
  }
  else {
    uint64_t v110 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v106, v107, v108, v109, v113, &unk_214099300, (35 - v113), (35 - v113), v110, *a4, *a5, *v112);
  DgnString::~DgnString((DgnString *)&v116);
}

void sub_213E3FA38(_Unwind_Exception *a1)
{
  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

BOOL FstSearchDurationHash::findBestPath(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8 = *(unsigned int *)(a1 + 168);
  if (v8) {
    BOOL v9 = *(_DWORD *)(a3 + 8) == 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    *(void *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v8;
  }
  if (v8) {
    BOOL v10 = *(_DWORD *)(a2 + 8) == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    *(void *)a2 = MemChunkAlloc(v8, 0);
    *(_DWORD *)(a2 + 8) = v8;
LABEL_14:
    uint64_t v11 = 0;
    do
    {
      *(unsigned char *)(*(void *)a2 + v11) = 0;
      *(unsigned char *)(*(void *)a3 + v11++) = 0;
    }
    while (v8 != v11);
    goto LABEL_16;
  }
  if (v8) {
    goto LABEL_14;
  }
LABEL_16:
  unsigned int BestTrace = FstSearchDurationHashBackoff::getBestTrace(a1, (void *)a2, (void *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1) {
    return 0;
  }
  uint64_t v13 = *(void *)(a1 + 160) + 28 * BestTrace;
  LODWORD(v13) = *(_DWORD *)(v13 + 12) + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v13 + 4));
  *a4 = v13;
  return v13 != 1879048192;
}

uint64_t FstSearchDurationHash::buildWordLattice(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4, char a5)
{
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  int v29 = 0;
  uint64_t v26 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v25, *(unsigned int *)(a1 + 168));
  BOOL v9 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v9, 0, 128);
  v9[4] = (uint64_t)a2;
  FstSearchDurationHashBackoff::createLatticeNodes(a1, (uint64_t)&v28, (uint64_t)&v26, (uint64_t)a2, v25, a3, a4);
  uint64_t v23 = (uint64_t)v9;
  uint64_t v11 = *(unsigned int *)(a1 + 168);
  if (v11)
  {
    uint64_t v12 = 0;
    int v13 = v27;
    do
    {
      if (*(unsigned char *)(*a3 + v12))
      {
        uint64_t v14 = *(void *)(a1 + 160);
        if ((*(_DWORD *)(v14 + 28 * v12) - 16777209) >= 2)
        {
          uint64_t v15 = *(void *)(a1 + 176) + 16 * *(unsigned int *)(v14 + 28 * v12 + 8);
          uint64_t v16 = *(unsigned int *)(v15 + 8);
          if (v16 == -1) {
            unsigned int v17 = 0;
          }
          else {
            unsigned int v17 = v13 - *(_DWORD *)(v28 + 4 * v16);
          }
          uint64_t v18 = *(unsigned int *)(v26 + 4 * v17);
          if (*(unsigned char *)(*a4 + v12)) {
            FstSearchDurationHash::createLatticeLink(a1, v12, (int *)v15, 0xFFFFFFFFLL, v18, (const WordLatticeLC *)*(unsigned int *)(v26 + 4 * (v13 - *(_DWORD *)(v28 + 4 * v12))), a2, v10, a5);
          }
          uint64_t v19 = v25[0];
          if (*(_DWORD *)(v25[0] + 16 * v12 + 8))
          {
            unint64_t v20 = 0;
            do
            {
              uint64_t v21 = *(unsigned int *)(*(void *)(v19 + 16 * v12) + 4 * v20);
              FstSearchDurationHash::createLatticeLink(a1, v12, (int *)v15, v21, v18, (const WordLatticeLC *)*(unsigned int *)(v26 + 4 * (v13 - *(_DWORD *)(v28 + 4 * v21))), a2, v10, a5);
              ++v20;
              uint64_t v19 = v25[0];
            }
            while (v20 < *(unsigned int *)(v25[0] + 16 * v12 + 8));
          }
        }
      }
      ++v12;
    }
    while (v12 != v11);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>(v23);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v25);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v26);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v28);
}

void sub_213E3FD8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearchDurationHash::createLatticeLink(uint64_t a1, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, const WordLatticeLC *a6, uint64_t *a7, uint64_t a8, char a9)
{
  unsigned int v11 = a5;
  unsigned int v12 = a4;
  uint64_t v16 = *(void *)(a1 + 160);
  if ((a4 & 0x80000000) != 0)
  {
    unsigned int v17 = 0;
  }
  else if (*(_DWORD *)(*(void *)(a1 + 176) + 16 * *(unsigned int *)(v16 + 28 * a4 + 8) + 8) == a2)
  {
    unsigned int v17 = (_DWORD *)(*(void *)(a1 + 176) + 16 * *(unsigned int *)(v16 + 28 * a4 + 8));
  }
  else
  {
    unsigned int v17 = 0;
  }
  ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *(_DWORD *)(v16 + 28 * a2), (uint64_t)a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8, (uint64_t)v41);
  int v18 = a3[1];
  if (v17)
  {
    v18 += v17[1];
    int v19 = *v17 + *a3;
  }
  else
  {
    int v19 = *a3;
  }
  if (v41[0] >> 25 == 126)
  {
    int v20 = 0;
    int v21 = v18;
    if ((v12 & 0x80000000) != 0)
    {
LABEL_11:
      int v22 = 0;
      goto LABEL_14;
    }
  }
  else
  {
    int v20 = *(_DWORD *)(a1 + 136);
    int v21 = v18 - v20;
    if ((v12 & 0x80000000) != 0) {
      goto LABEL_11;
    }
  }
  int v22 = *(_DWORD *)(a1 + 140);
  v21 -= v22;
LABEL_14:
  int v23 = a3[3];
  if (v17) {
    v23 += v17[3];
  }
  int v35 = v21;
  uint64_t v36 = 0;
  int v37 = v20;
  int v38 = v19 - v18 - v23;
  int v39 = v23;
  int v40 = v22;
  unsigned int v24 = a3[2];
  uint64_t v25 = *(void *)(a1 + 160);
  if (v24 == -1)
  {
    int v27 = 0;
    if (a9) {
      goto LABEL_22;
    }
  }
  else
  {
    int v26 = *(_DWORD *)(v25 + 28 * v24 + 4);
    if (a9)
    {
      if (v26 >= 1) {
        --v26;
      }
      int v27 = (v26 >> 1) + 1;
LABEL_22:
      int v28 = *(_DWORD *)(v25 + 28 * a2 + 4);
      if (v28 >= 1) {
        --v28;
      }
      int v29 = v28 >> 1;
      int v30 = v29 - v27 + 1;
      if ((v12 & 0x80000000) == 0)
      {
        int v31 = *(_DWORD *)(v25 + 28 * v12 + 4);
        if (v31 >= 1) {
          --v31;
        }
        int v32 = v31 >> 1;
        goto LABEL_31;
      }
LABEL_32:
      int v33 = 0;
      goto LABEL_33;
    }
    int v27 = v26 + 1;
  }
  int v29 = *(_DWORD *)(v25 + 28 * a2 + 4);
  int v30 = v29 - v27 + 1;
  if ((v12 & 0x80000000) != 0) {
    goto LABEL_32;
  }
  int v32 = *(_DWORD *)(v25 + 28 * v12 + 4);
LABEL_31:
  int v33 = v32 - v29;
LABEL_33:
  WordLatticeLC::WordLatticeLC((uint64_t)v34, (uint64_t)v41, v27, v30, v33, (uint64_t)&v35);
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v11, a6, (WordLatticeLC *)v34);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v34);
}

void sub_213E3FFCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchDurationHash::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(void *)(this + 112) = a2;
  if (*(unsigned char *)(this + 380)) {
    return MiniFst::beginTopFstSyncRecog(this + 264);
  }
  return this;
}

uint64_t FstSearchDurationHash::endTopRecSyncRecog(FstSearchDurationHash *this)
{
  VirtMap::setEmpty(*((void *)this + 14));
  uint64_t result = *((void *)this + 14);
  *((void *)this + 14) = 0;
  return result;
}

uint64_t FstSearchDurationHash::getBestExitScore(FstSearchDurationHash *this)
{
  unsigned int v17 = 0;
  uint64_t v18 = 0;
  *((_DWORD *)this + 63) = -1;
  unint64_t v1 = *((unsigned int *)this + 38);
  unint64_t v2 = *((unsigned int *)this + 56);
  if (v1 >= v2) {
    goto LABEL_16;
  }
  int64x2_t v4 = 0;
  unsigned int v5 = 0;
  uint64_t v6 = 28 * v1;
  do
  {
    uint64_t v7 = *((void *)this + 27) + v6;
    if (*(_DWORD *)(*((void *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      unsigned int v8 = *(_DWORD *)(v7 + 8);
      if (v8 != -1 && *(_DWORD *)(*((void *)this + 20) + 28 * v8 + 4) == *((_DWORD *)this + 62))
      {
        if (v5 == HIDWORD(v18))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v17, 1, 1);
          unsigned int v5 = v18;
          int64x2_t v4 = v17;
        }
        v4[v5] = v8;
        unsigned int v5 = v18 + 1;
        LODWORD(v18) = v18 + 1;
        unint64_t v2 = *((unsigned int *)this + 56);
      }
    }
    ++v1;
    v6 += 28;
  }
  while (v1 < v2);
  if (v5)
  {
    uint64_t v9 = *((void *)this + 20);
    uint64_t v10 = v5;
    int v11 = 1879048192;
    do
    {
      unsigned int v13 = *v4++;
      unsigned int v12 = v13;
      int v14 = *(_DWORD *)(v9 + 28 * v13 + 12);
      if (v11 > v14)
      {
        *((_DWORD *)this + 63) = *(_DWORD *)(v9 + 28 * v12 + 16);
        int v11 = v14;
      }
      --v10;
    }
    while (v10);
  }
  else
  {
LABEL_16:
    int v11 = 1879048192;
  }
  if (v11 >= 20000) {
    uint64_t v15 = 20000;
  }
  else {
    uint64_t v15 = v11;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v17);
  return v15;
}

void sub_213E40178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t FstSearchDurationHash::getBestScoreMaybeUpdateFstNode(FstSearchDurationHash *this, Node *a2)
{
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v2 = *((unsigned int *)this + 56);
  if (v2)
  {
    unsigned int v3 = (int *)*((void *)this + 27);
    __int16 v4 = -1;
    int v5 = 1879048192;
    uint64_t v6 = v3;
    do
    {
      int v8 = *v6;
      v6 += 7;
      int v7 = v8;
      if (v5 > v8)
      {
        __int16 v4 = *((_WORD *)v3 + 6);
        int v5 = v7;
      }
      unsigned int v3 = v6;
      --v2;
    }
    while (v2);
    uint64_t v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000) {
        uint64_t v9 = 20000;
      }
      else {
        uint64_t v9 = v5;
      }
    }
  }
  else
  {
    uint64_t v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

void *FstSearchDurationHash::seedTheory(FstSearchDurationHash *this, int a2, int a3, int a4, SearchStats *a5)
{
  if (a4 == -2)
  {
    int v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    unsigned int v11 = *((_DWORD *)this + 42);
    if (v11 == *((_DWORD *)this + 43))
    {
      DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)this + 160, 1, 1);
      unsigned int v11 = *((_DWORD *)this + 42);
    }
    uint64_t v12 = *((void *)this + 20) + 28 * v11;
    *(_DWORD *)uint64_t v12 = a4;
    *(_DWORD *)(v12 + 4) = a3;
    *(_DWORD *)(v12 + 8) = -1;
    *(_DWORD *)(v12 + 12) = a2;
    *(void *)(v12 + 16) = 0xFFFFFFFFLL;
    *(_DWORD *)(v12 + 24) = 0;
    int v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  int v13 = *(_DWORD *)(*((void *)this + 5) + 144);
  unsigned int v14 = *((_DWORD *)this + 56);
  if (v14 == *((_DWORD *)this + 57))
  {
    DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)this + 216, 1, 1);
    unsigned int v14 = *((_DWORD *)this + 56);
  }
  uint64_t v15 = *((void *)this + 27) + 28 * v14;
  *(_DWORD *)uint64_t v15 = a2;
  *(_DWORD *)(v15 + 4) = v13;
  *(_DWORD *)(v15 + 8) = v9;
  *(_WORD *)(v15 + 12) = -2;
  *(void *)(v15 + 16) = 0;
  *(_DWORD *)(v15 + 24) = 0;
  LODWORD(v15) = *((_DWORD *)this + 56) + 1;
  *((_DWORD *)this + 56) = v15;
  *((_DWORD *)this + 38) = v15;

  return FstSearchDurationHashBackoff::propagateNulls(this, 20000, a3, a5);
}

uint64_t FstSearchDurationHash::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(unsigned int *)(result + 252);
  if (v8 != -1)
  {
    uint64_t v9 = result;
    uint64_t v10 = (unsigned int *)(*(void *)(result + 160) + 28 * v8);
    for (i = v10[4]; i != -1; uint64_t v8 = v16)
    {
      uint64_t v16 = i;
      uint64_t result = *(void *)(v9 + 40);
      if (*v10 == 16777209)
      {
        int v17 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        uint64_t result = ArcGraph::lexToCWID((ArcGraph *)result, *v10, a3, (uint64_t)a4, a5, a6, a7, a8);
        int v17 = result;
      }
      uint64_t v18 = *(unsigned int *)(a2 + 8);
      if (v18 == *(_DWORD *)(a2 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        uint64_t v18 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(void *)a2 + 4 * v18) = v17;
      ++*(_DWORD *)(a2 + 8);
      uint64_t v19 = *(unsigned int *)(a6 + 8);
      if (v19 == *(_DWORD *)(a6 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        uint64_t v19 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(void *)a6 + 4 * v19) = v8;
      ++*(_DWORD *)(a6 + 8);
      uint64_t v20 = *(void *)(v9 + 160);
      int v21 = *(_DWORD *)(v20 + 28 * v8 + 4);
      uint64_t v22 = *(unsigned int *)(a3 + 8);
      if (v22 == *(_DWORD *)(a3 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        uint64_t v22 = *(unsigned int *)(a3 + 8);
        uint64_t v20 = *(void *)(v9 + 160);
      }
      *(_DWORD *)(*(void *)a3 + 4 * v22) = v21;
      ++*(_DWORD *)(a3 + 8);
      int v23 = *(_DWORD *)(v20 + 28 * v8 + 12);
      uint64_t v24 = *(unsigned int *)(a5 + 8);
      if (v24 == *(_DWORD *)(a5 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        uint64_t v24 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(void *)a5 + 4 * v24) = v23;
      ++*(_DWORD *)(a5 + 8);
      uint64_t v10 = (unsigned int *)(*(void *)(v9 + 160) + 28 * v16);
      uint64_t i = v10[4];
    }
    *a4 = *v10;
  }
  return result;
}

void FstSearchDurationHash::checkSearchParametersValidityForArcGraph(FstSearchDurationHash *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *((void *)this + 5);
  if (*(unsigned char *)(v8 + 178))
  {
    int v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(unsigned char *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    }
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    }
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(void *)(**(void **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((void *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if (a2)
      {
        if (!*(unsigned char *)(v8 + 203)) {
          return;
        }
      }
      else if (*(unsigned char *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(unsigned char *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

uint64_t FstSearchDurationHash::makePartialResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    uint64_t v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(void *)a2 + v9))(*(void *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  unsigned int BestTrace = FstSearchDurationHashBackoff::getBestTrace(a1, 0, 0, 1);
  if (BestTrace == -1) {
    return 1879048192;
  }
  unsigned int v15 = BestTrace;
  FstSearchDurationHashBackoff::getHistory(a1, BestTrace, a3, a4, v11, v12, v13, v14);
  memset(v25, 0, sizeof(v25));
  int v26 = 0;
  if (*(_DWORD *)(a3 + 8))
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    int v18 = 0;
    do
    {
      uint64_t v19 = *(void *)a3 + v16;
      int v20 = *(_DWORD *)(v19 + 28);
      WordLatticeLC::WordLatticeLC((uint64_t)v24, v19, v18, *(_DWORD *)(v19 + 24) - v18, v20 - *(_DWORD *)(v19 + 24), (uint64_t)v25);
      uint64_t v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(void *)a2 + 112 * v21), (const WordLatticeLC *)v24);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v24);
      ++v17;
      v16 += 32;
      int v18 = v20;
    }
    while (v17 < *(unsigned int *)(a3 + 8));
  }
  uint64_t v22 = *(void *)(a1 + 160) + 28 * v15;
  return (*(_DWORD *)(v22 + 12) + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_213E40868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int64x2_t FstSearchHashBackoff::advanceDeltas(FstSearchHashBackoff *this, int a2, int a3, SearchStats *a4, int a5)
{
  v96[0] = a2;
  int64x2_t v94 = 0u;
  int64x2_t v95 = 0u;
  SnapTime::recordTime((SnapTime *)&v94, 1, 0, 0, 0);
  v92.n128_u64[0] = 0xFFFFFFFF00000000;
  v92.n128_u32[2] = -1;
  v92.n128_u16[6] = -2;
  unsigned __int32 v93 = 0;
  *((_DWORD *)this + 58) = a3;
  int v10 = *((_DWORD *)this + 2);
  int64x2_t v72 = (int *)((char *)this + 232);
  unint64_t v11 = *((unsigned int *)this + 50);
  if (v11)
  {
    int v71 = a5;
    for (unint64_t i = 0; i < v11; ++i)
    {
      uint64_t v13 = *((void *)this + 24);
      uint64_t v14 = v13 + 20 * i;
      uint64_t v15 = *(unsigned int *)(v14 + 4);
      uint64_t v16 = *((void *)this + 5);
      if (*(_DWORD *)(v16 + 160) != v15)
      {
        if (*(_DWORD *)(v16 + 140) > (int)v15)
        {
          int v17 = *((_DWORD *)this + 19) + *((_DWORD *)this + 58) >= 5000
              ? 5000
              : *((_DWORD *)this + 19) + *((_DWORD *)this + 58);
          signed __int32 ScoreAllowBackoff_updateNodeInSequence = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(v13 + 20 * i + 12), *(_DWORD *)v14, v17);
          signed __int32 v19 = *((_DWORD *)this + 58);
          if (ScoreAllowBackoff_updateNodeInSequence - v10 <= v19)
          {
            if (v19 > ScoreAllowBackoff_updateNodeInSequence) {
              *int64x2_t v72 = ScoreAllowBackoff_updateNodeInSequence;
            }
            int v20 = (__n128 *)(*((void *)this + 24) + 20 * i);
            unsigned __int32 v21 = v20[1].n128_u32[0];
            __n128 v92 = *v20;
            unsigned __int32 v93 = v21;
            v92.n128_u32[0] = ScoreAllowBackoff_updateNodeInSequence;
            FstSearchHashBackoff::maybeInsertHashedToken((uint64_t)this, &v92);
          }
        }
        unsigned int v22 = v15;
        do
        {
          uint64_t v23 = *((void *)this + 5);
          uint64_t v24 = *(void *)(v23 + 152);
          unsigned int v25 = *(_DWORD *)(v24 + 4 * v22);
          int v26 = *(_DWORD *)(v24 + 4 * (v22 + 1));
          int v27 = *(_DWORD *)(v23 + 140);
          if (v27 <= v26)
          {
            if (v27 <= (int)v15 && *((unsigned char *)this + 356) != 0)
            {
              unsigned int v35 = (v25 & 0xFFFFF) <= 0xFFFF3 ? v25 & 0xFFFFF : v25 & 0xFFFFF | 0xF00000;
              if (v35 != 16777210)
              {
                DgnString::DgnString((DgnString *)&v89);
                ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v35, (DgnString *)&v89, v36, v37, v38, v39, v40);
                uint64_t v45 = &unk_214099300;
                if (v89.i32[2]) {
                  uint64_t v45 = (void *)v89.i64[0];
                }
                xprintf("Seed from state %d score %d trace %d, %s\n", v41, v42, v43, v44, v15, *(unsigned int *)(*((void *)this + 24) + 20 * i), *(unsigned int *)(*((void *)this + 24) + 20 * i + 8), v45);
                MiniFst::seed((uint64_t)this + 240, *(_DWORD *)(*((void *)this + 24) + 20 * i), 0, *(_DWORD *)(*((void *)this + 24) + 20 * i + 8), v26);
                DgnString::~DgnString((DgnString *)&v89);
              }
            }
          }
          else
          {
            int v28 = (v25 >> 20) & 0x3FF;
            if (*((_DWORD *)this + 19) + *((_DWORD *)this + 58) >= 5000) {
              int v29 = 5000;
            }
            else {
              int v29 = *((_DWORD *)this + 19) + *((_DWORD *)this + 58);
            }
            int v30 = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), (unsigned __int16)*(_DWORD *)(v24 + 4 * v22), *(_DWORD *)(*((void *)this + 24) + 20 * i) + v28, v29);
            int v31 = *((_DWORD *)this + 58);
            if (v30 - v10 <= v31)
            {
              if (v31 > v30) {
                *int64x2_t v72 = v30;
              }
              int v32 = (__n128 *)(*((void *)this + 24) + 20 * i);
              unsigned __int32 v33 = v32[1].n128_u32[0];
              __n128 v92 = *v32;
              v92.n128_u64[0] = __PAIR64__(v26, v30);
              v92.n128_u16[6] = v25;
              unsigned __int32 v93 = v33 + v28;
              FstSearchHashBackoff::maybeInsertHashedToken((uint64_t)this, &v92);
            }
          }
          v22 += 2;
        }
        while ((v25 & 0x80000000) == 0);
        unint64_t v11 = *((unsigned int *)this + 50);
      }
    }
    a3 = *v72;
    a5 = v71;
  }
  int v91 = a3 + v10;
  if (*((unsigned char *)this + 356)) {
    MiniFst::updateFrame((char *)this + 240, v72, v10, a2);
  }
  int64x2_t v89 = 0u;
  int64x2_t v90 = 0u;
  SnapTime::recordTime((SnapTime *)&v89, 1, 0, 0, 0);
  int64x2_t v89 = vsubq_s64(v89, v94);
  int64x2_t v90 = vsubq_s64(v90, v95);
  uint64_t v46 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v47 = vaddq_s64(v46[1], v90);
  int64x2_t *v46 = vaddq_s64(*v46, v89);
  v46[1] = v47;
  int64x2_t v87 = 0u;
  int64x2_t v88 = 0u;
  SnapTime::recordTime((SnapTime *)&v87, 1, 0, 0, 0);
  FstSearchHashBackoff::applyCutoffOnEmitting((uint64_t)this, *((_DWORD *)this + 4), &v91);
  int64x2_t v85 = 0u;
  int64x2_t v86 = 0u;
  SnapTime::recordTime((SnapTime *)&v85, 1, 0, 0, 0);
  int64x2_t v48 = vsubq_s64(v85, v87);
  uint64_t v49 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v50 = v49[3];
  int64x2_t v51 = vaddq_s64(v49[2], v48);
  int64x2_t v85 = v48;
  int64x2_t v86 = vsubq_s64(v86, v88);
  int64x2_t v52 = vaddq_s64(v50, v86);
  v49[2] = v51;
  void v49[3] = v52;
  int64x2_t v83 = 0u;
  int64x2_t v84 = 0u;
  SnapTime::recordTime((SnapTime *)&v83, 1, 0, 0, 0);
  uint64_t v53 = *((void *)this + 24);
  uint64_t v54 = *((void *)this + 26);
  *((void *)this + 24) = v54;
  *((void *)this + 26) = v53;
  LODWORD(v53) = *((_DWORD *)this + 51);
  uint64_t v55 = *((void *)this + 27);
  *((void *)this + 25) = v55;
  *((_DWORD *)this + 54) = 0;
  *((_DWORD *)this + 55) = v53;
  unint64_t v56 = *((unsigned int *)this + 6);
  if (v56 && v55 && v56 < v55) {
    mrec_nth_element<FstSearchHashBackoffcmpTok>(v54, v56, v55);
  }
  int64x2_t v81 = 0u;
  int64x2_t v82 = 0u;
  SnapTime::recordTime((SnapTime *)&v81, 1, 0, 0, 0);
  int64x2_t v57 = vsubq_s64(v81, v83);
  uint64_t v58 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v59 = v58[5];
  int64x2_t v60 = vaddq_s64(v58[4], v57);
  int64x2_t v81 = v57;
  int64x2_t v82 = vsubq_s64(v82, v84);
  int64x2_t v61 = vaddq_s64(v59, v82);
  v58[4] = v60;
  v58[5] = v61;
  int64x2_t v79 = 0u;
  int64x2_t v80 = 0u;
  SnapTime::recordTime((SnapTime *)&v79, 1, 0, 0, 0);
  VirtMap::setEmpty(*((void *)this + 14));
  int64x2_t v77 = 0u;
  int64x2_t v78 = 0u;
  SnapTime::recordTime((SnapTime *)&v77, 1, 0, 0, 0);
  int64x2_t v62 = vsubq_s64(v77, v79);
  uint64_t v63 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v64 = v63[9];
  int64x2_t v65 = vaddq_s64(v63[8], v62);
  int64x2_t v77 = v62;
  int64x2_t v78 = vsubq_s64(v78, v80);
  int64x2_t v66 = vaddq_s64(v64, v78);
  v63[8] = v65;
  v63[9] = v66;
  int64x2_t v75 = 0u;
  int64x2_t v76 = 0u;
  SnapTime::recordTime((SnapTime *)&v75, 1, 0, 0, 0);
  *((_DWORD *)this + 54) = 0;
  uint64_t v67 = *((unsigned int *)this + 50);
  *((_DWORD *)this + 38) = v67;
  if (a4)
  {
    *((void *)a4 + 2) += v67;
    if (*((_DWORD *)a4 + 2) > v67) {
      LODWORD(v67) = *((_DWORD *)a4 + 2);
    }
    *((_DWORD *)a4 + 2) = v67;
  }
  if (*((unsigned char *)this + 356)) {
    FstSearchHashBackoff::seedFromMiniFst((uint64_t)this, v96);
  }
  if (a5) {
    FstSearchHashBackoff::propagateNulls((uint64_t)this, v91, a2, a4);
  }
  *((_DWORD *)this + 56) = a2;
  int64x2_t v73 = 0u;
  int64x2_t v74 = 0u;
  SnapTime::recordTime((SnapTime *)&v73, 1, 0, 0, 0);
  uint64_t v68 = (int64x2_t *)*((void *)this + 13);
  int64x2_t result = vaddq_s64(v68[6], vsubq_s64(v73, v75));
  int64x2_t v70 = vaddq_s64(v68[7], vsubq_s64(v74, v76));
  v68[6] = result;
  v68[7] = v70;
  return result;
}

void sub_213E40E38(_Unwind_Exception *exception_object)
{
}

__n128 FstSearchHashBackoff::maybeInsertHashedToken(uint64_t a1, __n128 *a2)
{
  unint64_t v4 = a2->n128_u32[1];
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = v4 & 0x3F;
  int v7 = *(uint64_t **)(a1 + 112);
  uint64_t v8 = v7[2];
  uint64_t v9 = *(uint64_t **)(v8 + 8 * v5);
  if (!v9)
  {
    uint64_t v10 = *((unsigned int *)v7 + 12);
    uint64_t v11 = *((unsigned int *)v7 + 13);
    uint64_t v12 = *v7;
    if (v10 >= v11)
    {
      uint64_t v13 = v12 + 16 * v11;
      int v15 = *(_DWORD *)(v13 + 8);
      uint64_t v14 = (_DWORD *)(v13 + 8);
      if (!v15)
      {
        *(void *)(v12 + 16 * v11) = MemChunkAlloc(0x100uLL, 0);
        *uint64_t v14 = 64;
        uint64_t v12 = *v7;
        uint64_t v8 = v7[2];
        LODWORD(v10) = *((_DWORD *)v7 + 12);
        uint64_t v11 = *((unsigned int *)v7 + 13);
      }
      *(void *)(v8 + 8 * v5) = v12 + 16 * v11;
      *((_DWORD *)v7 + 13) = v11 + 1;
    }
    else
    {
      *(void *)(v8 + 8 * v5) = v12 + 16 * v10;
    }
    *((_DWORD *)v7 + 12) = v10 + 1;
    uint64_t v16 = *(void *)(v7[2] + 8 * v5);
    memset(*(void **)v16, 255, 4 * *(unsigned int *)(v16 + 8));
    unsigned int v18 = *((_DWORD *)v7 + 10);
    if (v18 == *((_DWORD *)v7 + 11))
    {
      DgnPrimArray<unsigned int>::reallocElts((uint64_t)(v7 + 4), 1, 1);
      unsigned int v18 = *((_DWORD *)v7 + 10);
    }
    *(_DWORD *)(v7[4] + 4 * v18) = v5;
    ++*((_DWORD *)v7 + 10);
    uint64_t v9 = *(uint64_t **)(v7[2] + 8 * v5);
  }
  uint64_t v19 = *v9;
  unsigned int v20 = *(_DWORD *)(v19 + 4 * v6);
  unsigned __int32 v21 = (void *)(a1 + 208);
  if (v20 == -1)
  {
    *(_DWORD *)(v19 + 4 * v6) = *(_DWORD *)(a1 + 216);
    unsigned int v23 = *(_DWORD *)(a1 + 216);
    if (v23 == *(_DWORD *)(a1 + 220))
    {
      DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts((uint64_t)v21, 1, 1);
      unsigned int v23 = *(_DWORD *)(a1 + 216);
    }
    uint64_t v24 = (__n128 *)(*(void *)(a1 + 208) + 20 * v23);
    __n128 result = *a2;
    v24[1].n128_u32[0] = a2[1].n128_u32[0];
    *uint64_t v24 = result;
    ++*(_DWORD *)(a1 + 216);
  }
  else
  {
    unsigned int v22 = (__n128 *)(*v21 + 20 * v20);
    if ((signed __int32)v22->n128_u32[0] > (signed __int32)a2->n128_u32[0])
    {
      __n128 result = *a2;
      v22[1].n128_u32[0] = a2[1].n128_u32[0];
      *unsigned int v22 = result;
    }
  }
  return result;
}

uint64_t FstSearchHashBackoff::applyCutoffOnEmitting(uint64_t this, unsigned int a2, int *a3)
{
  unint64_t v4 = *(unsigned int *)(this + 216);
  if (v4 > a2)
  {
    uint64_t v6 = this;
    int v7 = (void *)(this + 208);
    uint64_t v8 = a2;
    this = mrec_nth_element<FstSearchHashBackoffcmpTok>(*(void *)(this + 208), a2, v4);
    int v9 = *(_DWORD *)(*v7 + 20 * a2);
    if (*a3 > v9) {
      *a3 = v9;
    }
    unsigned int v10 = *(_DWORD *)(v6 + 220);
    if (a2 > v10) {
      this = DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts((uint64_t)v7, a2 - v10, 0);
    }
    uint64_t v11 = *(unsigned int *)(v6 + 216);
    if (v11 < a2)
    {
      uint64_t v12 = v8 - v11;
      uint64_t v13 = (_DWORD *)(*v7 + 20 * v11 + 16);
      do
      {
        *((void *)v13 - 2) = 0xFFFFFFFF00000000;
        *(v13 - 2) = -1;
        *((_WORD *)v13 - 2) = -2;
        *uint64_t v13 = 0;
        v13 += 5;
        --v12;
      }
      while (v12);
    }
    *(_DWORD *)(v6 + 216) = a2;
  }
  return this;
}

uint64_t mrec_nth_element<FstSearchHashBackoffcmpTok>(uint64_t result, unint64_t a2, unint64_t a3)
{
  if (a3 >= 2)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = 0;
      unint64_t v5 = (_DWORD *)(result + 20 * v3);
      uint64_t v6 = &v5[5 * (a3 >> 1)];
      do
      {
        char v7 = *((unsigned char *)v5 + v4);
        *((unsigned char *)v5 + v4) = *((unsigned char *)v6 + v4);
        *((unsigned char *)v6 + v4++) = v7;
      }
      while (v4 != 20);
      uint64_t v8 = (_DWORD *)(result + 20 * (v3 + a3) - 20);
      int v9 = (_DWORD *)(result + 20 * v3);
      do
      {
        unsigned int v10 = v9 + 5;
        while (1)
        {
          int v9 = v10;
          if (v10 >= v8) {
            break;
          }
          v10 += 5;
          if (*v9 > *v5)
          {
            uint64_t v11 = (char *)v9;
            while (*v8 >= *v5)
            {
              v8 -= 5;
              if (v9 >= v8) {
                goto LABEL_16;
              }
            }
            for (uint64_t i = 0; i != 20; ++i)
            {
              char v13 = *v11;
              *v11++ = *((unsigned char *)v8 + i);
              *((unsigned char *)v8 + i) = v13;
            }
            v8 -= 5;
            break;
          }
        }
LABEL_16:
        ;
      }
      while (v9 < v8);
      if (*v9 > *v5) {
        v9 -= 5;
      }
      if (v9 > v5)
      {
        for (uint64_t j = 0; j != 20; ++j)
        {
          char v15 = *((unsigned char *)v9 + j);
          *((unsigned char *)v9 + j) = *((unsigned char *)v5 + j);
          *((unsigned char *)v5 + j) = v15;
        }
      }
      unint64_t v16 = ((char *)v9 - (char *)v5) / 0x14uLL;
      if (v16 <= a2)
      {
        if (v16 >= a2) {
          return result;
        }
        unint64_t v17 = v16 + 1;
        v3 += v17;
        a2 -= v17;
        unint64_t v16 = a3 - v17;
      }
      a3 = v16;
    }
    while (v16 > 1);
  }
  return result;
}

uint64_t FstSearchHashBackoff::seedFromMiniFst(uint64_t this, int *a2)
{
  if (*(unsigned char *)(this + 356))
  {
    uint64_t v2 = this;
    unsigned int v3 = *(_DWORD *)(this + 264);
    if (v3 >= *(_DWORD *)(this + 20)) {
      unsigned int v3 = *(_DWORD *)(this + 20);
    }
    if (v3)
    {
      uint64_t v5 = 0;
      unsigned int v6 = 0;
      char v7 = (void *)(this + 160);
      uint64_t v21 = this + 192;
      do
      {
        uint64_t v8 = (int *)(*(void *)(v2 + 256) + v5);
        int v9 = *v8;
        int v11 = v8[6];
        int v10 = v8[7];
        int v12 = v8[2];
        v22[0] = 0;
        v22[1] = 0;
        if ((v12 & 0x80000000) == 0)
        {
          while (1)
            ;
        }
        unsigned int v13 = -2 - v12;
        if (v10 == 16777213)
        {
          int v10 = 16777209;
          if (*(_DWORD *)(*v7 + 24 * v13) == 16777209) {
            unsigned int v13 = *(_DWORD *)(*(void *)(v2 + 176) + 12 * *(unsigned int *)(*v7 + 24 * v13 + 8) + 8);
          }
        }
        int v14 = *a2;
        uint64_t v15 = *(unsigned int *)(v2 + 168);
        if (v15 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<CWIDAC>::reallocElts(v2 + 160, 1, 1);
          LODWORD(v15) = *(_DWORD *)(v2 + 168);
        }
        unint64_t v16 = (int *)(*(void *)(v2 + 160) + 24 * v15);
        *unint64_t v16 = v10;
        v16[1] = v14;
        locale_t v16[2] = -1;
        v16[3] = v9;
        v16[4] = v13;
        v16[5] = 0;
        int v17 = *(_DWORD *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v17 + 1;
        uint64_t v18 = *(unsigned int *)(v2 + 200);
        if (v18 == *(_DWORD *)(v2 + 204))
        {
          DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts(v21, 1, 1);
          LODWORD(v18) = *(_DWORD *)(v2 + 200);
        }
        uint64_t v19 = *(void *)(v2 + 192) + 20 * v18;
        *(_DWORD *)uint64_t v19 = v9;
        *(_DWORD *)(v19 + 4) = v11;
        *(_DWORD *)(v19 + 8) = v17;
        *(_WORD *)(v19 + 12) = -2;
        *(_DWORD *)(v19 + 16) = 0;
        ++*(_DWORD *)(v2 + 200);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v22);
        ++v6;
        unsigned int v20 = *(_DWORD *)(v2 + 264);
        if (v20 >= *(_DWORD *)(v2 + 20)) {
          unsigned int v20 = *(_DWORD *)(v2 + 20);
        }
        v5 += 36;
      }
      while (v6 < v20);
    }
  }
  return this;
}

void sub_213E413EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchHashBackoff::propagateNulls(uint64_t this, int a2, int a3, SearchStats *a4)
{
  uint64_t v4 = this;
  int v5 = *(_DWORD *)(this + 168);
  unsigned int v6 = (uint64_t *)(this + 192);
  unsigned int v7 = *(_DWORD *)(this + 200);
  uint64_t v55 = this + 192;
  if (!v7)
  {
    unsigned int v36 = *(_DWORD *)(this + 152);
    if (a4) {
      goto LABEL_42;
    }
    goto LABEL_43;
  }
  int v45 = *(_DWORD *)(this + 168);
  unint64_t v8 = 0;
  uint64_t v46 = a4;
  uint64_t v47 = this + 160;
  int v54 = a2;
  do
  {
    uint64_t v9 = *(unsigned int *)(*(void *)(v4 + 192) + 20 * v8 + 4);
    uint64_t v10 = *(void *)(v4 + 40);
    if (*(_DWORD *)(v10 + 160) != v9
      && (*(_DWORD *)(v10 + 140) <= (int)v9 || (*(_DWORD *)(*(void *)(v10 + 152) + 4 * v9) & 0x40000000) != 0))
    {
      unsigned int v11 = *(_DWORD *)(*(void *)(v4 + 192) + 20 * v8 + 4);
      unint64_t v53 = v8;
      do
      {
        uint64_t v12 = *(void *)(v4 + 40);
        uint64_t v13 = *(void *)(v12 + 152);
        unsigned int v14 = *(_DWORD *)(v13 + 4 * v11);
        int v15 = *(_DWORD *)(v13 + 4 * (v11 + 1));
        int v16 = *(_DWORD *)(v12 + 140);
        if (v16 > v15) {
          goto LABEL_32;
        }
        int v17 = (v14 & 0xFFFFF) <= 0xFFFF3 ? v14 & 0xFFFFF : v14 & 0xFFFFF | 0xF00000;
        if (v16 <= (int)v9 && v17 != 16777210) {
          goto LABEL_32;
        }
        int v19 = (v14 >> 20) & 0x3FF;
        uint64_t v20 = *v6;
        uint64_t v21 = *v6 + 20 * v8;
        int v22 = *(_DWORD *)v21 + v19;
        if (v22 > a2) {
          goto LABEL_32;
        }
        int v23 = *(_DWORD *)(v21 + 8);
        __int16 v24 = *(_WORD *)(v21 + 12);
        __int16 v25 = *(_WORD *)(v21 + 14);
        unsigned int v26 = *(_DWORD *)(v21 + 16) + v19;
        if (v17 == 16777210)
        {
          if (v7 != *(_DWORD *)(v4 + 204)) {
            goto LABEL_31;
          }
        }
        else
        {
          if (v17 == 16777214) {
            int v27 = *(_DWORD *)(v21 + 16) + v19;
          }
          else {
            int v27 = 0;
          }
          if (v17 == 16777214) {
            this = 0;
          }
          else {
            this = v26;
          }
          uint64_t v28 = *(unsigned int *)(v4 + 168);
          if (v28 == *(_DWORD *)(v4 + 172))
          {
            unsigned int v49 = this;
            __int16 v50 = *(_WORD *)(v21 + 14);
            __int16 v51 = *(_WORD *)(v21 + 12);
            int v48 = v27;
            DgnArray<CWIDAC>::reallocElts(v47, 1, 1);
            int v27 = v48;
            this = v49;
            __int16 v25 = v50;
            __int16 v24 = v51;
            a2 = v54;
            unsigned int v6 = (uint64_t *)v55;
            LODWORD(v28) = *(_DWORD *)(v4 + 168);
          }
          int v29 = (int *)(*(void *)(v4 + 160) + 24 * v28);
          *int v29 = v17;
          v29[1] = a3;
          v29[2] = -1;
          int v29[3] = v22 - v27;
          v29[4] = v23;
          v29[5] = this;
          int v23 = *(_DWORD *)(v4 + 168);
          *(_DWORD *)(v4 + 168) = v23 + 1;
          unsigned int v7 = *(_DWORD *)(v4 + 200);
          if (v7 != *(_DWORD *)(v4 + 204)) {
            goto LABEL_30;
          }
        }
        __int16 v30 = v24;
        int v31 = v23;
        uint64_t v32 = v9;
        unsigned int v33 = v26;
        __int16 v34 = v25;
        this = DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts(v55, 1, 1);
        __int16 v25 = v34;
        unsigned int v26 = v33;
        uint64_t v9 = v32;
        int v23 = v31;
        unint64_t v8 = v53;
        __int16 v24 = v30;
        a2 = v54;
        unsigned int v6 = (uint64_t *)v55;
        unsigned int v7 = *(_DWORD *)(v4 + 200);
LABEL_30:
        uint64_t v20 = *v6;
LABEL_31:
        uint64_t v35 = v20 + 20 * v7;
        *(_DWORD *)uint64_t v35 = v22;
        *(_DWORD *)(v35 + 4) = v15;
        *(_DWORD *)(v35 + 8) = v23;
        *(_WORD *)(v35 + 12) = v24;
        *(_WORD *)(v35 + 14) = v25;
        *(_DWORD *)(v35 + 16) = v26;
        unsigned int v7 = *(_DWORD *)(v4 + 200) + 1;
        *(_DWORD *)(v4 + 200) = v7;
LABEL_32:
        v11 += 2;
      }
      while ((v14 & 0x80000000) == 0);
    }
    ++v8;
  }
  while (v8 < v7);
  unsigned int v36 = *(_DWORD *)(v4 + 152);
  if (v7 > v36)
  {
    this = (uint64_t)mrec_qsort_r<FstSearchLateLatticeHashBackoffActiveToken>((char *)(*(void *)(v4 + 192) + 20 * v36), v7 - v36, 20);
    unsigned int v6 = (uint64_t *)v55;
    unsigned int v36 = *(_DWORD *)(v4 + 152);
    unsigned int v7 = *(_DWORD *)(v4 + 200);
  }
  a4 = v46;
  int v5 = v45;
  if (v36 < v7)
  {
    unint64_t v37 = v36;
    uint64_t v38 = 20 * v36;
    do
    {
      uint64_t v39 = *v6 + v38;
      if (*(_DWORD *)(v39 + 4) != *(_DWORD *)(*v6 + 20 * (v37 - 1) + 4))
      {
        uint64_t v40 = *v6 + 20 * v36;
        long long v41 = *(_OWORD *)v39;
        *(_DWORD *)(v40 + 16) = *(_DWORD *)(v39 + 16);
        *(_OWORD *)uint64_t v40 = v41;
        ++v36;
        unsigned int v7 = *(_DWORD *)(v4 + 200);
      }
      ++v37;
      v38 += 20;
    }
    while (v37 < v7);
  }
  if (v46) {
LABEL_42:
  }
    *((_DWORD *)a4 + 1) += *(_DWORD *)(v4 + 168) - v5;
LABEL_43:
  unsigned int v42 = *(_DWORD *)(v4 + 204);
  if (v36 > v42)
  {
    this = DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts(v55, v36 - v42, 0);
    unsigned int v6 = (uint64_t *)v55;
    unsigned int v7 = *(_DWORD *)(v4 + 200);
  }
  if (v7 < v36)
  {
    unint64_t v43 = v36 - (unint64_t)v7;
    uint64_t v44 = (_DWORD *)(*v6 + 20 * v7 + 16);
    do
    {
      *((void *)v44 - 2) = 0xFFFFFFFF00000000;
      *(v44 - 2) = -1;
      *((_WORD *)v44 - 2) = -2;
      *uint64_t v44 = 0;
      v44 += 5;
      --v43;
    }
    while (v43);
  }
  *(_DWORD *)(v4 + 200) = v36;
  return this;
}

uint64_t FstSearchHashBackoff::collectTraces(FstSearchHashBackoff *this)
{
  unint64_t v2 = *((unsigned int *)this + 42);
  int v36 = 0;
  uint64_t v35 = 0;
  if (v2)
  {
    unsigned int v3 = MemChunkAlloc(4 * v2, 0);
    unint64_t v4 = 0;
    uint64_t v35 = v3;
    int v36 = v2;
    do
      *((_DWORD *)v3 + v4++) = 0;
    while (v4 < v2);
  }
  else
  {
    unsigned int v3 = 0;
  }
  unint64_t v5 = *((unsigned int *)this + 50);
  if (v5)
  {
    unint64_t v6 = 0;
    unsigned int v7 = (unsigned int *)(*((void *)this + 24) + 8);
    do
    {
      unsigned int v9 = *v7;
      v7 += 5;
      uint64_t v8 = v9;
      if (v9 != -1)
      {
        *((_DWORD *)v3 + v8) = 1;
        unint64_t v5 = *((unsigned int *)this + 50);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  int v10 = *((_DWORD *)this + 42);
  if (!v10) {
    goto LABEL_32;
  }
  unsigned int v11 = (uint64_t *)((char *)this + 160);
  unsigned int v12 = v10 - 1;
  do
  {
    uint64_t v13 = v12;
    if (*((_DWORD *)v3 + v12))
    {
      uint64_t v14 = *(unsigned int *)(*v11 + 24 * v12 + 16);
      if (v14 != -1) {
        *((_DWORD *)v3 + v14) = 1;
      }
    }
    --v12;
  }
  while (v13);
  unsigned int v15 = *((_DWORD *)this + 42);
  if (v15)
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    unsigned int v18 = 0;
    do
    {
      if (*((_DWORD *)v3 + v17))
      {
        uint64_t v19 = *v11;
        if (v17 != v18)
        {
          uint64_t v20 = (long long *)(v19 + v16);
          uint64_t v21 = v19 + 24 * v18;
          long long v22 = *v20;
          *(void *)(v21 + 16) = *((void *)v20 + 2);
          *(_OWORD *)uint64_t v21 = v22;
          uint64_t v19 = *v11;
        }
        uint64_t v23 = v19 + 24 * v18;
        unsigned int v26 = *(_DWORD *)(v23 + 16);
        __int16 v24 = (_DWORD *)(v23 + 16);
        uint64_t v25 = v26;
        if (v26 != -1) {
          *__int16 v24 = *((_DWORD *)v3 + v25);
        }
        *((_DWORD *)v3 + v17) = v18++;
        unsigned int v15 = *((_DWORD *)this + 42);
      }
      ++v17;
      v16 += 24;
    }
    while (v17 < v15);
    unsigned int v27 = *((_DWORD *)this + 43);
    if (v18 > v27)
    {
      DgnArray<CWIDAC>::reallocElts((uint64_t)this + 160, v18 - v27, 0);
      unsigned int v15 = *((_DWORD *)this + 42);
    }
    if (v15 < v18)
    {
      unint64_t v28 = v18 - (unint64_t)v15;
      int v29 = (void *)(*v11 + 24 * v15 + 16);
      do
      {
        *((_OWORD *)v29 - 1) = xmmword_2140992B0;
        *int v29 = 0xFFFFFFFFLL;
        v29 += 3;
        --v28;
      }
      while (v28);
    }
  }
  else
  {
LABEL_32:
    unsigned int v18 = 0;
  }
  *((_DWORD *)this + 42) = v18;
  uint64_t v30 = *((unsigned int *)this + 50);
  if (v30)
  {
    int v31 = v35;
    uint64_t v32 = (_DWORD *)(*((void *)this + 24) + 8);
    do
    {
      uint64_t v33 = *v32;
      if (v33 != -1) {
        *uint64_t v32 = *((_DWORD *)v31 + v33);
      }
      v32 += 5;
      --v30;
    }
    while (v30);
  }
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v35);
}

void sub_213E419C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int64x2_t FstSearchHashBackoff::vite(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  FstSearchHashBackoff::advanceDeltas((FstSearchHashBackoff *)this, a2, a3, a4, a5);
  int64x2_t v13 = 0u;
  int64x2_t v14 = 0u;
  SnapTime::recordTime((SnapTime *)&v13, 1, 0, 0, 0);
  if (a2 >= 1)
  {
    unsigned int v7 = *((_DWORD *)this + 18);
    if (v7)
    {
      if (!(a2 % v7)) {
        FstSearchHashBackoff::collectTraces((FstSearchHashBackoff *)this);
      }
    }
  }
  int64x2_t v11 = 0u;
  int64x2_t v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  uint64_t v8 = this[13];
  int64x2_t result = vaddq_s64(v8[14], vsubq_s64(v11, v13));
  int64x2_t v10 = vaddq_s64(v8[15], vsubq_s64(v12, v14));
  v8[14] = result;
  v8[15] = v10;
  return result;
}

int64x2_t FstSearchHashBackoff::reset(FstSearchHashBackoff *this)
{
  *((_DWORD *)this + 42) = 0;
  *((_DWORD *)this + 46) = 0;
  *((_DWORD *)this + 50) = 0;
  int64x2_t v7 = 0u;
  int64x2_t v8 = 0u;
  SnapTime::recordTime((SnapTime *)&v7, 1, 0, 0, 0);
  int64x2_t v5 = 0u;
  int64x2_t v6 = 0u;
  SnapTime::recordTime((SnapTime *)&v5, 1, 0, 0, 0);
  unint64_t v2 = (int64x2_t *)*((void *)this + 13);
  int64x2_t result = vaddq_s64(v2[10], vsubq_s64(v5, v7));
  int64x2_t v4 = vaddq_s64(v2[11], vsubq_s64(v6, v8));
  v2[10] = result;
  v2[11] = v4;
  return result;
}

double FstSearchHashBackoff::doFrame(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  if (a3 >= 20000) {
    a3 = 20000;
  }
  *(void *)&double result = FstSearchHashBackoff::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearchHashBackoff::beginTopRecPassSyncRecog(FstSearchHashBackoff *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 240, a3, *((PelScoreCache **)this + 4));
    uint64_t result = ArcGraph::findBackoffState(*((void *)this + 5));
    *((_DWORD *)this + 88) = result;
    *((unsigned char *)this + 356) = 1;
  }
  return result;
}

uint64_t FstSearchHashBackoff::endTopRecPassSyncRecog(int64x2_t **this)
{
  int64x2_t v10 = 0u;
  int64x2_t v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  FstSearchHashBackoff::generateTraceTokensFromTraces((FstSearchHashBackoff *)this);
  int64x2_t v8 = 0u;
  int64x2_t v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  int64x2_t v2 = vsubq_s64(v8, v10);
  unsigned int v3 = this[13];
  int64x2_t v4 = v3[13];
  int64x2_t v5 = vaddq_s64(v3[12], v2);
  int64x2_t v8 = v2;
  int64x2_t v9 = vsubq_s64(v9, v11);
  int64x2_t v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + 58) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

int32x2_t FstSearchHashBackoff::generateTraceTokensFromTraces(FstSearchHashBackoff *this)
{
  int64x2_t v2 = (void *)((char *)this + 176);
  uint64_t v3 = *((unsigned int *)this + 42);
  unsigned int v4 = *((_DWORD *)this + 47);
  if (v3 > v4) {
    DgnArray<RuleDesc>::reallocElts((uint64_t)this + 176, v3 - v4, 0);
  }
  uint64_t v6 = *((unsigned int *)this + 46);
  if (v6 < v3)
  {
    uint64_t v7 = v3 - v6;
    int64x2_t v8 = (_DWORD *)(*v2 + 12 * v6 + 8);
    do
    {
      *((void *)v8 - 1) = 0;
      *int64x2_t v8 = -1;
      v8 += 3;
      --v7;
    }
    while (v7);
  }
  *((_DWORD *)this + 46) = v3;
  uint64_t v9 = *((unsigned int *)this + 42);
  if (v9)
  {
    uint64_t v10 = 0;
    int64x2_t v11 = (int32x2_t *)(*((void *)this + 22) + 4);
    int64x2_t v12 = (int32x2_t *)(*((void *)this + 20) + 16);
    do
    {
      v12[-1].i32[0] = v10;
      v11[-1].i32[1] = v12[-1].i32[1];
      int32x2_t v13 = *v12;
      v12 += 3;
      int32x2_t result = vrev64_s32(v13);
      int32x2_t *v11 = result;
      int64x2_t v11 = (int32x2_t *)((char *)v11 + 12);
      ++v10;
    }
    while (v9 != v10);
  }
  return result;
}

void FstSearchHashBackoff::printSize(FstSearchHashBackoff *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v116);
  if (v117) {
    uint64_t v16 = v116;
  }
  else {
    uint64_t v16 = &unk_214099300;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_214099300, a3, &unk_214099300, v16);
  DgnString::~DgnString((DgnString *)&v116);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_214099300);
  uint64_t v21 = (a3 + 1);
  uint64_t v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v116);
  if (v117) {
    unsigned int v27 = v116;
  }
  else {
    unsigned int v27 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v116);
  if (v117) {
    uint64_t v32 = v116;
  }
  else {
    uint64_t v32 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v116);
  if (v117) {
    unint64_t v37 = v116;
  }
  else {
    unint64_t v37 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v37, 4, 4, 0);
  uint64_t v111 = a2;
  unsigned int v112 = a6;
  uint64_t v113 = a3;
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v116);
  if (v117) {
    unsigned int v42 = v116;
  }
  else {
    unsigned int v42 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v42, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  uint64_t v43 = 16;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v43 = 12;
  }
  uint64_t v44 = *((unsigned int *)this + 42);
  uint64_t v45 = 24 * v44;
  if ((int)v44 <= 0) {
    uint64_t v45 = 0;
  }
  uint64_t v46 = v45 + v43;
  uint64_t v47 = v45 + v43 + 24 * (*((_DWORD *)this + 43) - v44);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v116);
  if (v117) {
    int64x2_t v52 = v116;
  }
  else {
    int64x2_t v52 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, v21, &unk_214099300, v22, v22, v52, v47, v46, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v47;
  *a5 += v46;
  uint64_t v53 = 16;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v53 = 12;
  }
  uint64_t v54 = *((unsigned int *)this + 46);
  uint64_t v55 = 12 * v54;
  if ((int)v54 <= 0) {
    uint64_t v55 = 0;
  }
  uint64_t v56 = v55 + v53;
  uint64_t v57 = v55 + v53 + 12 * (*((_DWORD *)this + 47) - v54);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v116);
  if (v117) {
    int64x2_t v62 = v116;
  }
  else {
    int64x2_t v62 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, v21, &unk_214099300, v22, v22, v62, v57, v56, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v57;
  *a5 += v56;
  uint64_t v63 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v63 = 16;
  }
  uint64_t v64 = *((unsigned int *)this + 50);
  uint64_t v65 = 18 * v64;
  if ((int)v64 <= 0) {
    uint64_t v65 = 0;
  }
  uint64_t v66 = v65 + v63;
  uint64_t v67 = v65 + v63 + 18 * (*((_DWORD *)this + 51) - v64);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v116);
  if (v117) {
    int64x2_t v72 = v116;
  }
  else {
    int64x2_t v72 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, v21, &unk_214099300, v22, v22, v72, v67, v66, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v67;
  *a5 += v66;
  uint64_t v73 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v73 = 16;
  }
  uint64_t v74 = *((unsigned int *)this + 54);
  uint64_t v75 = 18 * v74;
  if ((int)v74 <= 0) {
    uint64_t v75 = 0;
  }
  uint64_t v76 = v75 + v73;
  uint64_t v77 = v75 + v73 + 18 * (*((_DWORD *)this + 55) - v74);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v116);
  if (v117) {
    int64x2_t v82 = v116;
  }
  else {
    int64x2_t v82 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, v21, &unk_214099300, v22, v22, v82, v77, v76, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v77;
  *a5 += v76;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v116);
  if (v117) {
    int64x2_t v87 = v116;
  }
  else {
    int64x2_t v87 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v83, v84, v85, v86, v21, &unk_214099300, v22, v22, v87, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v116);
  if (v117) {
    __n128 v92 = v116;
  }
  else {
    __n128 v92 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, v21, &unk_214099300, v22, v22, v92, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v116);
  if (v117) {
    int64x2_t v97 = v116;
  }
  else {
    int64x2_t v97 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v93, v94, v95, v96, v21, &unk_214099300, v22, v22, v97, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  uint64_t v98 = sizeObject((uint64_t)this + 240, 0);
  uint64_t v99 = sizeObject((uint64_t)this + 240, 1);
  uint64_t v100 = sizeObject((uint64_t)this + 240, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v116);
  if (v117) {
    char v105 = v116;
  }
  else {
    char v105 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v101, v102, v103, v104, v21, &unk_214099300, v22, v22, v105, v98, v99, v100);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v98;
  *a5 += v99;
  *v112 += v100;
  unint64_t v114 = 0;
  unint64_t v115 = 0;
  SearchItf::printSize(this, v111, v21, &v115, &v114, &v114);
  *a4 += v115;
  *a5 += v114;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v116);
  if (v117) {
    uint64_t v110 = v116;
  }
  else {
    uint64_t v110 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v106, v107, v108, v109, v113, &unk_214099300, (35 - v113), (35 - v113), v110, *a4, *a5, *v112);
  DgnString::~DgnString((DgnString *)&v116);
}

void sub_213E4243C(_Unwind_Exception *a1)
{
  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t FstSearchHashBackoff::getBestTrace(uint64_t a1, void *a2, void *a3, int a4)
{
  if (a4) {
    unint64_t v4 = 0;
  }
  else {
    unint64_t v4 = *(unsigned int *)(a1 + 152);
  }
  unint64_t v5 = *(unsigned int *)(a1 + 200);
  if (v4 >= v5) {
    goto LABEL_21;
  }
  uint64_t v6 = 20 * v4;
  int v7 = 1879048192;
  uint64_t v8 = 0xFFFFFFFFLL;
  do
  {
    uint64_t v9 = *(void *)(a1 + 192);
    if (!a4 || (uint64_t v10 = *(unsigned int *)(v9 + v6 + 8), v10 == -1))
    {
      if (*(_DWORD *)(*(void *)(a1 + 40) + 160) != *(_DWORD *)(v9 + v6 + 4)) {
        goto LABEL_19;
      }
      uint64_t v10 = *(unsigned int *)(v9 + v6 + 8);
    }
    if (a2) {
      *(unsigned char *)(*a2 + v10) = 1;
    }
    if (a3) {
      *(unsigned char *)(*a3 + v10) = 1;
    }
    uint64_t v11 = *(void *)(a1 + 160) + 24 * v10;
    int v12 = *(_DWORD *)(v11 + 12) + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v11 + 4));
    if (v7 > v12) {
      uint64_t v8 = v10;
    }
    if (v7 >= v12) {
      int v7 = v12;
    }
    unint64_t v5 = *(unsigned int *)(a1 + 200);
LABEL_19:
    ++v4;
    v6 += 20;
  }
  while (v4 < v5);
  if (v8 == 0xFFFFFFFFLL)
  {
LABEL_21:
    uint64_t v13 = *(unsigned int *)(a1 + 168);
    uint64_t v8 = 0xFFFFFFFFLL;
    while (v13)
    {
      --v13;
      if ((a4 & 1) != 0 || *(_DWORD *)(*(void *)(a1 + 160) + 24 * v13) == 16777213)
      {
        if (a2) {
          *(unsigned char *)(*a2 + v13) = 1;
        }
        uint64_t v8 = v13;
        if (a3) {
          *(unsigned char *)(*a3 + v13) = 1;
        }
        return v8;
      }
    }
  }
  return v8;
}

BOOL FstSearchHashBackoff::findBestPath(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8 = *(unsigned int *)(a1 + 168);
  if (v8) {
    BOOL v9 = *(_DWORD *)(a3 + 8) == 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    *(void *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v8;
  }
  if (v8) {
    BOOL v10 = *(_DWORD *)(a2 + 8) == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    *(void *)a2 = MemChunkAlloc(v8, 0);
    *(_DWORD *)(a2 + 8) = v8;
LABEL_14:
    uint64_t v11 = 0;
    do
    {
      *(unsigned char *)(*(void *)a2 + v11) = 0;
      *(unsigned char *)(*(void *)a3 + v11++) = 0;
    }
    while (v8 != v11);
    goto LABEL_16;
  }
  if (v8) {
    goto LABEL_14;
  }
LABEL_16:
  unsigned int BestTrace = FstSearchHashBackoff::getBestTrace(a1, (void *)a2, (void *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1) {
    return 0;
  }
  uint64_t v13 = *(void *)(a1 + 160) + 24 * BestTrace;
  LODWORD(v13) = *(_DWORD *)(v13 + 12) + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v13 + 4));
  *a4 = v13;
  return v13 != 1879048192;
}

uint64_t FstSearchHashBackoff::createLatticeNodes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t *a6, void *a7)
{
  uint64_t v9 = *(unsigned int *)(a1 + 168);
  if (v9) {
    BOOL v10 = *(_DWORD *)(a2 + 8) == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    *(void *)a2 = MemChunkAlloc(4 * v9, 0);
    *(_DWORD *)(a2 + 8) = v9;
  }
  int Node = Lattice<WordLatticeLC>::createNode(a4);
  uint64_t result = a3;
  unsigned int v13 = *(_DWORD *)(a3 + 8);
  if (v13 == *(_DWORD *)(a3 + 12))
  {
    DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
    uint64_t result = a3;
    unsigned int v13 = *(_DWORD *)(a3 + 8);
  }
  *(_DWORD *)(*(void *)result + 4 * v13) = Node;
  ++*(_DWORD *)(result + 8);
  int v14 = *(_DWORD *)(a1 + 168);
  uint64_t v15 = a6;
  uint64_t v16 = (uint64_t *)a2;
  if (v14)
  {
    uint64_t v17 = (v14 - 1);
    uint64_t v18 = 24 * v17;
    uint64_t result = 0xFFFFFFFFLL;
    uint64_t v46 = a7;
    do
    {
      uint64_t v19 = *v16;
      *(_DWORD *)(*v16 + 4 * v17) = -1;
      uint64_t v20 = *v15;
      if (*(unsigned char *)(*v15 + v17))
      {
        uint64_t v21 = *(void *)(a1 + 160);
        uint64_t v22 = *(void *)(a1 + 88);
        int v23 = *(_DWORD *)(v22 + 4 * *(unsigned int *)(v21 + v18 + 4));
        if (*(unsigned char *)(*a7 + v17))
        {
          if (*(unsigned char *)(*v15 + v17) != 1 || result == -1)
          {
            int v25 = *(_DWORD *)(v22 + 4 * *(unsigned int *)(v21 + v18 + 4));
            unsigned int v26 = result;
            int v27 = Lattice<WordLatticeLC>::createNode(a4);
            uint64_t v28 = a3;
            uint64_t v16 = (uint64_t *)a2;
            *(_DWORD *)(*(void *)a2 + 4 * v17) = *(_DWORD *)(a3 + 8);
            uint64_t v29 = *(unsigned int *)(a3 + 8);
            if (v29 == *(_DWORD *)(a3 + 12))
            {
              DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
              uint64_t v28 = a3;
              uint64_t v16 = (uint64_t *)a2;
              uint64_t v29 = *(unsigned int *)(a3 + 8);
            }
            *(_DWORD *)(*(void *)v28 + 4 * v29) = v27;
            unsigned int v30 = *(_DWORD *)(v28 + 8);
            *(_DWORD *)(v28 + 8) = v30 + 1;
            uint64_t v15 = a6;
            uint64_t v20 = *a6;
            if (*(unsigned char *)(*a6 + v17) == 1) {
              uint64_t result = v30;
            }
            else {
              uint64_t result = v26;
            }
            uint64_t v21 = *(void *)(a1 + 160);
            int v23 = v25;
          }
          else
          {
            *(_DWORD *)(v19 + 4 * v17) = result;
          }
        }
        unsigned int v31 = *(_DWORD *)(v21 + v18 + 8);
        uint64_t v32 = *(void *)(a1 + 176);
        uint64_t v33 = (_DWORD *)(v32 + 12 * v31);
        uint64_t v34 = v33[2];
        if ((v33[2] & 0x80000000) != 0)
        {
          *v33 += v23;
        }
        else
        {
          if (*(_DWORD *)(v21 + v18) == 16777209)
          {
            uint64_t v35 = *a5 + 16 * v34;
            unint64_t v37 = (_DWORD *)(v35 + 8);
            uint64_t v36 = *(unsigned int *)(v35 + 8);
            uint64_t v38 = *(void *)(a1 + 176);
            if (v36 == *(_DWORD *)(v35 + 12))
            {
              int v44 = v23;
              unsigned int v45 = result;
              DgnPrimArray<unsigned int>::reallocElts(v35, 1, 1);
              int v23 = v44;
              uint64_t result = v45;
              uint64_t v16 = (uint64_t *)a2;
              uint64_t v15 = a6;
              uint64_t v36 = *v37;
              uint64_t v21 = *(void *)(a1 + 160);
              uint64_t v38 = *(void *)(a1 + 176);
              uint64_t v20 = *a6;
            }
            *(_DWORD *)(*(void *)v35 + 4 * v36) = v17;
            ++*v37;
            uint64_t v34 = v33[2];
            a7 = v46;
          }
          else
          {
            *(unsigned char *)(*a7 + v34) = 1;
            uint64_t v38 = v32;
          }
          uint64_t v39 = v21 + 24 * v34;
          int v40 = *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v39 + 4));
          uint64_t v41 = (int *)(v38 + 12 * *(unsigned int *)(v39 + 8));
          int v42 = v23 + *v33 - v40;
          int v43 = *v41;
          LODWORD(v41) = v41[1];
          *uint64_t v33 = v42 - v43;
          *(_DWORD *)(v32 + 12 * v31 + 4) -= v41;
          *(unsigned char *)(v20 + v34) = 2;
        }
      }
      --v17;
      v18 -= 24;
      --v14;
    }
    while (v14);
  }
  return result;
}

uint64_t FstSearchHashBackoff::buildWordLattice(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4, char a5)
{
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  int v29 = 0;
  uint64_t v26 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v25, *(unsigned int *)(a1 + 168));
  uint64_t v9 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v9, 0, 128);
  v9[4] = (uint64_t)a2;
  FstSearchHashBackoff::createLatticeNodes(a1, (uint64_t)&v28, (uint64_t)&v26, (uint64_t)a2, v25, a3, a4);
  uint64_t v23 = (uint64_t)v9;
  uint64_t v11 = *(unsigned int *)(a1 + 168);
  if (v11)
  {
    uint64_t v12 = 0;
    int v13 = v27;
    do
    {
      if (*(unsigned char *)(*a3 + v12))
      {
        uint64_t v14 = *(void *)(a1 + 160);
        if ((*(_DWORD *)(v14 + 24 * v12) - 16777209) >= 2)
        {
          uint64_t v15 = *(void *)(a1 + 176) + 12 * *(unsigned int *)(v14 + 24 * v12 + 8);
          uint64_t v16 = *(unsigned int *)(v15 + 8);
          if (v16 == -1) {
            unsigned int v17 = 0;
          }
          else {
            unsigned int v17 = v13 - *(_DWORD *)(v28 + 4 * v16);
          }
          uint64_t v18 = *(unsigned int *)(v26 + 4 * v17);
          if (*(unsigned char *)(*a4 + v12)) {
            FstSearchHashBackoff::createLatticeLink(a1, v12, (int *)v15, 0xFFFFFFFFLL, v18, (const WordLatticeLC *)*(unsigned int *)(v26 + 4 * (v13 - *(_DWORD *)(v28 + 4 * v12))), a2, v10, a5);
          }
          uint64_t v19 = v25[0];
          if (*(_DWORD *)(v25[0] + 16 * v12 + 8))
          {
            unint64_t v20 = 0;
            do
            {
              uint64_t v21 = *(unsigned int *)(*(void *)(v19 + 16 * v12) + 4 * v20);
              FstSearchHashBackoff::createLatticeLink(a1, v12, (int *)v15, v21, v18, (const WordLatticeLC *)*(unsigned int *)(v26 + 4 * (v13 - *(_DWORD *)(v28 + 4 * v21))), a2, v10, a5);
              ++v20;
              uint64_t v19 = v25[0];
            }
            while (v20 < *(unsigned int *)(v25[0] + 16 * v12 + 8));
          }
        }
      }
      ++v12;
    }
    while (v12 != v11);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>(v23);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v25);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v26);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v28);
}

void sub_213E42BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearchHashBackoff::createLatticeLink(uint64_t a1, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, const WordLatticeLC *a6, uint64_t *a7, uint64_t a8, char a9)
{
  unsigned int v11 = a5;
  unsigned int v12 = a4;
  uint64_t v16 = *(void *)(a1 + 160);
  if ((a4 & 0x80000000) != 0)
  {
    unsigned int v17 = 0;
  }
  else if (*(_DWORD *)(*(void *)(a1 + 176) + 12 * *(unsigned int *)(v16 + 24 * a4 + 8) + 8) == a2)
  {
    unsigned int v17 = (_DWORD *)(*(void *)(a1 + 176) + 12 * *(unsigned int *)(v16 + 24 * a4 + 8));
  }
  else
  {
    unsigned int v17 = 0;
  }
  ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *(_DWORD *)(v16 + 24 * a2), (uint64_t)a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8, (uint64_t)v41);
  int v18 = a3[1];
  if (v17)
  {
    v18 += v17[1];
    int v19 = *v17 + *a3;
  }
  else
  {
    int v19 = *a3;
  }
  if (v41[0] >> 25 == 126)
  {
    int v20 = 0;
    int v21 = v18;
  }
  else
  {
    int v20 = *(_DWORD *)(a1 + 136);
    int v21 = v18 - v20;
  }
  int v22 = v19 - v18;
  if ((v12 & 0x80000000) != 0)
  {
    int v23 = 0;
  }
  else
  {
    int v23 = *(_DWORD *)(a1 + 140);
    v21 -= v23;
  }
  int v35 = v21;
  uint64_t v36 = 0;
  int v37 = v20;
  int v38 = v22;
  int v39 = 0;
  int v40 = v23;
  unsigned int v24 = a3[2];
  uint64_t v25 = *(void *)(a1 + 160);
  if (v24 == -1)
  {
    int v27 = 0;
    if (a9) {
      goto LABEL_21;
    }
  }
  else
  {
    int v26 = *(_DWORD *)(v25 + 24 * v24 + 4);
    if (a9)
    {
      if (v26 >= 1) {
        --v26;
      }
      int v27 = (v26 >> 1) + 1;
LABEL_21:
      int v28 = *(_DWORD *)(v25 + 24 * a2 + 4);
      if (v28 >= 1) {
        --v28;
      }
      int v29 = v28 >> 1;
      int v30 = v29 - v27 + 1;
      if ((v12 & 0x80000000) == 0)
      {
        int v31 = *(_DWORD *)(v25 + 24 * v12 + 4);
        if (v31 >= 1) {
          --v31;
        }
        int v32 = v31 >> 1;
        goto LABEL_30;
      }
LABEL_31:
      int v33 = 0;
      goto LABEL_32;
    }
    int v27 = v26 + 1;
  }
  int v29 = *(_DWORD *)(v25 + 24 * a2 + 4);
  int v30 = v29 - v27 + 1;
  if ((v12 & 0x80000000) != 0) {
    goto LABEL_31;
  }
  int v32 = *(_DWORD *)(v25 + 24 * v12 + 4);
LABEL_30:
  int v33 = v32 - v29;
LABEL_32:
  WordLatticeLC::WordLatticeLC((uint64_t)v34, (uint64_t)v41, v27, v30, v33, (uint64_t)&v35);
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v11, a6, (WordLatticeLC *)v34);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v34);
}

void sub_213E42DD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchHashBackoff::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(void *)(this + 112) = a2;
  if (*(unsigned char *)(this + 356)) {
    return MiniFst::beginTopFstSyncRecog(this + 240);
  }
  return this;
}

uint64_t FstSearchHashBackoff::endTopRecSyncRecog(FstSearchHashBackoff *this)
{
  VirtMap::setEmpty(*((void *)this + 14));
  uint64_t result = *((void *)this + 14);
  *((void *)this + 14) = 0;
  return result;
}

uint64_t FstSearchHashBackoff::getBestExitScore(FstSearchHashBackoff *this)
{
  unsigned int v17 = 0;
  uint64_t v18 = 0;
  *((_DWORD *)this + 57) = -1;
  unint64_t v1 = *((unsigned int *)this + 38);
  unint64_t v2 = *((unsigned int *)this + 50);
  if (v1 >= v2) {
    goto LABEL_16;
  }
  unint64_t v4 = 0;
  unsigned int v5 = 0;
  uint64_t v6 = 20 * v1;
  do
  {
    uint64_t v7 = *((void *)this + 24) + v6;
    if (*(_DWORD *)(*((void *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      unsigned int v8 = *(_DWORD *)(v7 + 8);
      if (v8 != -1 && *(_DWORD *)(*((void *)this + 20) + 24 * v8 + 4) == *((_DWORD *)this + 56))
      {
        if (v5 == HIDWORD(v18))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v17, 1, 1);
          unsigned int v5 = v18;
          unint64_t v4 = v17;
        }
        v4[v5] = v8;
        unsigned int v5 = v18 + 1;
        LODWORD(v18) = v18 + 1;
        unint64_t v2 = *((unsigned int *)this + 50);
      }
    }
    ++v1;
    v6 += 20;
  }
  while (v1 < v2);
  if (v5)
  {
    uint64_t v9 = *((void *)this + 20);
    uint64_t v10 = v5;
    int v11 = 1879048192;
    do
    {
      unsigned int v13 = *v4++;
      unsigned int v12 = v13;
      int v14 = *(_DWORD *)(v9 + 24 * v13 + 12);
      if (v11 > v14)
      {
        *((_DWORD *)this + 57) = *(_DWORD *)(v9 + 24 * v12 + 16);
        int v11 = v14;
      }
      --v10;
    }
    while (v10);
  }
  else
  {
LABEL_16:
    int v11 = 1879048192;
  }
  if (v11 >= 20000) {
    uint64_t v15 = 20000;
  }
  else {
    uint64_t v15 = v11;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v17);
  return v15;
}

void sub_213E42F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t FstSearchHashBackoff::getBestScoreMaybeUpdateFstNode(FstSearchHashBackoff *this, Node *a2)
{
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v2 = *((unsigned int *)this + 50);
  if (v2)
  {
    uint64_t v3 = (int *)*((void *)this + 24);
    __int16 v4 = -1;
    int v5 = 1879048192;
    uint64_t v6 = v3;
    do
    {
      int v8 = *v6;
      v6 += 5;
      int v7 = v8;
      if (v5 > v8)
      {
        __int16 v4 = *((_WORD *)v3 + 6);
        int v5 = v7;
      }
      uint64_t v3 = v6;
      --v2;
    }
    while (v2);
    uint64_t v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000) {
        uint64_t v9 = 20000;
      }
      else {
        uint64_t v9 = v5;
      }
    }
  }
  else
  {
    uint64_t v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

uint64_t FstSearchHashBackoff::seedTheory(FstSearchHashBackoff *this, int a2, int a3, int a4, SearchStats *a5)
{
  if (a4 == -2)
  {
    int v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    unsigned int v11 = *((_DWORD *)this + 42);
    if (v11 == *((_DWORD *)this + 43))
    {
      DgnArray<CWIDAC>::reallocElts((uint64_t)this + 160, 1, 1);
      unsigned int v11 = *((_DWORD *)this + 42);
    }
    uint64_t v12 = *((void *)this + 20) + 24 * v11;
    *(_DWORD *)uint64_t v12 = a4;
    *(_DWORD *)(v12 + 4) = a3;
    *(_DWORD *)(v12 + 8) = -1;
    *(_DWORD *)(v12 + 12) = a2;
    *(void *)(v12 + 16) = 0xFFFFFFFFLL;
    int v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  int v13 = *(_DWORD *)(*((void *)this + 5) + 144);
  unsigned int v14 = *((_DWORD *)this + 50);
  if (v14 == *((_DWORD *)this + 51))
  {
    DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts((uint64_t)this + 192, 1, 1);
    unsigned int v14 = *((_DWORD *)this + 50);
  }
  uint64_t v15 = *((void *)this + 24) + 20 * v14;
  *(_DWORD *)uint64_t v15 = a2;
  *(_DWORD *)(v15 + 4) = v13;
  *(_DWORD *)(v15 + 8) = v9;
  *(_WORD *)(v15 + 12) = -2;
  *(_DWORD *)(v15 + 16) = 0;
  LODWORD(v15) = *((_DWORD *)this + 50) + 1;
  *((_DWORD *)this + 50) = v15;
  *((_DWORD *)this + 38) = v15;

  return FstSearchHashBackoff::propagateNulls((uint64_t)this, 20000, a3, a5);
}

uint64_t FstSearchHashBackoff::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(unsigned int *)(result + 228);
  if (v8 != -1)
  {
    uint64_t v9 = result;
    uint64_t v10 = (unsigned int *)(*(void *)(result + 160) + 24 * v8);
    for (i = v10[4]; i != -1; uint64_t v8 = v16)
    {
      uint64_t v16 = i;
      uint64_t result = *(void *)(v9 + 40);
      if (*v10 == 16777209)
      {
        int v17 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        uint64_t result = ArcGraph::lexToCWID((ArcGraph *)result, *v10, a3, (uint64_t)a4, a5, a6, a7, a8);
        int v17 = result;
      }
      uint64_t v18 = *(unsigned int *)(a2 + 8);
      if (v18 == *(_DWORD *)(a2 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        uint64_t v18 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(void *)a2 + 4 * v18) = v17;
      ++*(_DWORD *)(a2 + 8);
      uint64_t v19 = *(unsigned int *)(a6 + 8);
      if (v19 == *(_DWORD *)(a6 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        uint64_t v19 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(void *)a6 + 4 * v19) = v8;
      ++*(_DWORD *)(a6 + 8);
      uint64_t v20 = *(void *)(v9 + 160);
      int v21 = *(_DWORD *)(v20 + 24 * v8 + 4);
      uint64_t v22 = *(unsigned int *)(a3 + 8);
      if (v22 == *(_DWORD *)(a3 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        uint64_t v22 = *(unsigned int *)(a3 + 8);
        uint64_t v20 = *(void *)(v9 + 160);
      }
      *(_DWORD *)(*(void *)a3 + 4 * v22) = v21;
      ++*(_DWORD *)(a3 + 8);
      int v23 = *(_DWORD *)(v20 + 24 * v8 + 12);
      uint64_t v24 = *(unsigned int *)(a5 + 8);
      if (v24 == *(_DWORD *)(a5 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        uint64_t v24 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(void *)a5 + 4 * v24) = v23;
      ++*(_DWORD *)(a5 + 8);
      uint64_t v10 = (unsigned int *)(*(void *)(v9 + 160) + 24 * v16);
      uint64_t i = v10[4];
    }
    *a4 = *v10;
  }
  return result;
}

void FstSearchHashBackoff::checkSearchParametersValidityForArcGraph(FstSearchHashBackoff *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *((void *)this + 5);
  if (*(unsigned char *)(v8 + 178))
  {
    int v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(unsigned char *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    }
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    }
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(void *)(**(void **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((void *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if (a2)
      {
        if (!*(unsigned char *)(v8 + 203)) {
          return;
        }
      }
      else if (*(unsigned char *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(unsigned char *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

void FstSearchHashBackoff::getHistory(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 == -1)
  {
    *(_DWORD *)(a3 + 8) = 0;
  }
  else
  {
    int v9 = a4;
    LODWORD(v11) = 0;
    uint64_t v12 = a2;
    uint64_t v13 = a2;
    do
    {
      unsigned int v14 = (_DWORD *)(*(void *)(a1 + 160) + 24 * v13);
      if (*v14 == 16777209) {
        uint64_t v11 = v11;
      }
      else {
        uint64_t v11 = (v11 + 1);
      }
      uint64_t v13 = v14[4];
    }
    while (v13 != -1);
    unsigned int v15 = *(_DWORD *)(a3 + 12);
    if (v11 > v15) {
      DgnArray<PrefilterResultFrame>::reallocElts(a3, v11 - v15, 0);
    }
    uint64_t v16 = *(unsigned int *)(a3 + 8);
    if (v16 < v11)
    {
      uint64_t v17 = v11 - v16;
      uint64_t v18 = *(void *)a3 + 32 * v16;
      do
      {
        *(void *)uint64_t v18 = 0x3FFFFAFFFFFFLL;
        *(_OWORD *)(v18 + 8) = xmmword_2140866D0;
        *(void *)(v18 + 24) = 0x1F0000001FLL;
        v18 += 32;
        --v17;
      }
      while (v17);
    }
    *(_DWORD *)(a3 + 8) = v11;
    if (v11)
    {
      uint64_t v19 = *(void *)(a1 + 160);
      int v20 = -16;
      do
      {
        int v21 = (unsigned int *)(v19 + 24 * v12);
        int v22 = v21[1];
        if (*v21 == 16777209)
        {
          if (v9)
          {
            int v23 = v22 - 1;
            if (v22 < 1) {
              int v23 = v22;
            }
            int v20 = (v23 >> 1) + 1;
          }
          else
          {
            int v20 = v22 + 1;
          }
        }
        else
        {
          if (v9)
          {
            int v24 = v22 - 1;
            if (v22 < 1) {
              int v24 = v21[1];
            }
            int v22 = v24 >> 1;
          }
          ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *v21, a3, a4, a5, a6, a7, a8, (uint64_t)v28);
          if (v20 == -16) {
            int v25 = v22 + 1;
          }
          else {
            int v25 = v20;
          }
          int v26 = v28[1];
          uint64_t v11 = (v11 - 1);
          uint64_t v27 = *(void *)a3 + 32 * v11;
          *(_DWORD *)uint64_t v27 = v28[0];
          *(_DWORD *)(v27 + 4) = v26;
          *(_OWORD *)(v27 + 8) = v29;
          *(_DWORD *)(v27 + 24) = v22 + 1;
          *(_DWORD *)(v27 + 28) = v25;
          uint64_t v19 = *(void *)(a1 + 160);
          int v20 = -16;
        }
        uint64_t v12 = *(unsigned int *)(v19 + 24 * v12 + 16);
      }
      while (v12 != -1);
    }
  }
}

uint64_t FstSearchHashBackoff::makePartialResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    uint64_t v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(void *)a2 + v9))(*(void *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  unsigned int BestTrace = FstSearchHashBackoff::getBestTrace(a1, 0, 0, 1);
  if (BestTrace == -1) {
    return 1879048192;
  }
  unsigned int v15 = BestTrace;
  FstSearchHashBackoff::getHistory(a1, BestTrace, a3, a4, v11, v12, v13, v14);
  memset(v25, 0, sizeof(v25));
  int v26 = 0;
  if (*(_DWORD *)(a3 + 8))
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    int v18 = 0;
    do
    {
      uint64_t v19 = *(void *)a3 + v16;
      int v20 = *(_DWORD *)(v19 + 28);
      WordLatticeLC::WordLatticeLC((uint64_t)v24, v19, v18, *(_DWORD *)(v19 + 24) - v18, v20 - *(_DWORD *)(v19 + 24), (uint64_t)v25);
      uint64_t v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(void *)a2 + 112 * v21), (const WordLatticeLC *)v24);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v24);
      ++v17;
      v16 += 32;
      int v18 = v20;
    }
    while (v17 < *(unsigned int *)(a3 + 8));
  }
  uint64_t v22 = *(void *)(a1 + 160) + 24 * v15;
  return (*(_DWORD *)(v22 + 12) + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_213E43804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int64x2_t FstSearchHash::advanceDeltas(FstSearchHash *this, int a2, signed __int32 a3, SearchStats *a4, int a5)
{
  v97[0] = a2;
  int64x2_t v95 = 0u;
  int64x2_t v96 = 0u;
  SnapTime::recordTime((SnapTime *)&v95, 1, 0, 0, 0);
  v93.n128_u64[0] = 0xFFFFFFFF00000000;
  v93.n128_u32[2] = -1;
  v93.n128_u16[6] = -2;
  unsigned __int32 v94 = 0;
  *((_DWORD *)this + 58) = a3;
  uint64_t v10 = (signed __int32 *)((char *)this + 232);
  int v11 = *((_DWORD *)this + 2);
  unint64_t v12 = *((unsigned int *)this + 50);
  if (v12)
  {
    int v72 = a5;
    uint64_t v73 = a4;
    for (unint64_t i = 0; i < v12; ++i)
    {
      uint64_t v14 = *((void *)this + 24);
      unsigned int v15 = (int *)(v14 + 20 * i);
      uint64_t v16 = v15[1];
      uint64_t v17 = *((void *)this + 5);
      if (*(_DWORD *)(v17 + 160) != v16)
      {
        if (*(_DWORD *)(v17 + 140) > (int)v16)
        {
          int v18 = *v15;
          signed __int32 v19 = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(v14 + 20 * i + 12))+ v18;
          signed __int32 v20 = *((_DWORD *)this + 58);
          if (v19 - v11 <= v20)
          {
            if (v20 > v19) {
              *uint64_t v10 = v19;
            }
            uint64_t v21 = (__n128 *)(*((void *)this + 24) + 20 * i);
            unsigned __int32 v22 = v21[1].n128_u32[0];
            __n128 v93 = *v21;
            unsigned __int32 v94 = v22;
            v93.n128_u32[0] = v19;
            FstSearchHashBackoff::maybeInsertHashedToken((uint64_t)this, &v93);
          }
        }
        unsigned int v23 = v16;
        do
        {
          uint64_t v24 = *((void *)this + 5);
          uint64_t v25 = *(void *)(v24 + 152);
          unsigned int v26 = *(_DWORD *)(v25 + 4 * v23);
          int v27 = *(_DWORD *)(v25 + 4 * (v23 + 1));
          int v28 = *(_DWORD *)(v24 + 140);
          if (v28 <= v27)
          {
            if (v28 <= (int)v16 && *((unsigned char *)this + 356) != 0)
            {
              unsigned int v36 = (v26 & 0xFFFFF) <= 0xFFFF3 ? v26 & 0xFFFFF : v26 & 0xFFFFF | 0xF00000;
              if (v36 != 16777210)
              {
                DgnString::DgnString((DgnString *)&v90);
                ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v36, (DgnString *)&v90, v37, v38, v39, v40, v41);
                uint64_t v46 = &unk_214099300;
                if (v90.i32[2]) {
                  uint64_t v46 = (void *)v90.i64[0];
                }
                xprintf("Seed from state %d score %d trace %d, %s\n", v42, v43, v44, v45, v16, *(unsigned int *)(*((void *)this + 24) + 20 * i), *(unsigned int *)(*((void *)this + 24) + 20 * i + 8), v46);
                MiniFst::seed((uint64_t)this + 240, *(_DWORD *)(*((void *)this + 24) + 20 * i), 0, *(_DWORD *)(*((void *)this + 24) + 20 * i + 8), v27);
                DgnString::~DgnString((DgnString *)&v90);
              }
            }
          }
          else
          {
            int v29 = (v26 >> 20) & 0x3FF;
            int ScoreNoBackoff = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), (unsigned __int16)*(_DWORD *)(v25 + 4 * v23));
            int v31 = (__n128 *)(*((void *)this + 24) + 20 * i);
            signed __int32 v32 = ScoreNoBackoff + v29 + v31->n128_u32[0];
            signed __int32 v33 = *((_DWORD *)this + 58);
            if (v32 - v11 <= v33)
            {
              if (v33 > v32) {
                *uint64_t v10 = v32;
              }
              unsigned __int32 v34 = v31[1].n128_u32[0];
              __n128 v93 = *v31;
              v93.n128_u64[0] = __PAIR64__(v27, v32);
              v93.n128_u16[6] = v26;
              unsigned __int32 v94 = v34 + v29;
              FstSearchHashBackoff::maybeInsertHashedToken((uint64_t)this, &v93);
            }
          }
          v23 += 2;
        }
        while ((v26 & 0x80000000) == 0);
        unint64_t v12 = *((unsigned int *)this + 50);
      }
    }
    a3 = *v10;
    a4 = v73;
    a5 = v72;
  }
  int v92 = a3 + v11;
  if (*((unsigned char *)this + 356)) {
    MiniFst::updateFrame((char *)this + 240, (int *)this + 58, v11, a2);
  }
  int64x2_t v90 = 0u;
  int64x2_t v91 = 0u;
  SnapTime::recordTime((SnapTime *)&v90, 1, 0, 0, 0);
  int64x2_t v90 = vsubq_s64(v90, v95);
  int64x2_t v91 = vsubq_s64(v91, v96);
  uint64_t v47 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v48 = vaddq_s64(v47[1], v91);
  *uint64_t v47 = vaddq_s64(*v47, v90);
  v47[1] = v48;
  int64x2_t v88 = 0u;
  int64x2_t v89 = 0u;
  SnapTime::recordTime((SnapTime *)&v88, 1, 0, 0, 0);
  FstSearchHashBackoff::applyCutoffOnEmitting((uint64_t)this, *((_DWORD *)this + 4), &v92);
  int64x2_t v86 = 0u;
  int64x2_t v87 = 0u;
  SnapTime::recordTime((SnapTime *)&v86, 1, 0, 0, 0);
  int64x2_t v49 = vsubq_s64(v86, v88);
  uint64_t v50 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v51 = v50[3];
  int64x2_t v52 = vaddq_s64(v50[2], v49);
  int64x2_t v86 = v49;
  int64x2_t v87 = vsubq_s64(v87, v89);
  int64x2_t v53 = vaddq_s64(v51, v87);
  v50[2] = v52;
  int v50[3] = v53;
  int64x2_t v84 = 0u;
  int64x2_t v85 = 0u;
  SnapTime::recordTime((SnapTime *)&v84, 1, 0, 0, 0);
  uint64_t v54 = *((void *)this + 24);
  uint64_t v55 = *((void *)this + 26);
  *((void *)this + 24) = v55;
  *((void *)this + 26) = v54;
  LODWORD(v54) = *((_DWORD *)this + 51);
  uint64_t v56 = *((void *)this + 27);
  *((void *)this + 25) = v56;
  *((_DWORD *)this + 54) = 0;
  *((_DWORD *)this + 55) = v54;
  unint64_t v57 = *((unsigned int *)this + 6);
  if (v57 && v56 && v57 < v56) {
    mrec_nth_element<FstSearchHashBackoffcmpTok>(v55, v57, v56);
  }
  int64x2_t v82 = 0u;
  int64x2_t v83 = 0u;
  SnapTime::recordTime((SnapTime *)&v82, 1, 0, 0, 0);
  int64x2_t v58 = vsubq_s64(v82, v84);
  uint64_t v59 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v60 = v59[5];
  int64x2_t v61 = vaddq_s64(v59[4], v58);
  int64x2_t v82 = v58;
  int64x2_t v83 = vsubq_s64(v83, v85);
  int64x2_t v62 = vaddq_s64(v60, v83);
  v59[4] = v61;
  v59[5] = v62;
  int64x2_t v80 = 0u;
  int64x2_t v81 = 0u;
  SnapTime::recordTime((SnapTime *)&v80, 1, 0, 0, 0);
  VirtMap::setEmpty(*((void *)this + 14));
  int64x2_t v78 = 0u;
  int64x2_t v79 = 0u;
  SnapTime::recordTime((SnapTime *)&v78, 1, 0, 0, 0);
  int64x2_t v63 = vsubq_s64(v78, v80);
  uint64_t v64 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v65 = v64[9];
  int64x2_t v66 = vaddq_s64(v64[8], v63);
  int64x2_t v78 = v63;
  int64x2_t v79 = vsubq_s64(v79, v81);
  int64x2_t v67 = vaddq_s64(v65, v79);
  v64[8] = v66;
  v64[9] = v67;
  int64x2_t v76 = 0u;
  int64x2_t v77 = 0u;
  SnapTime::recordTime((SnapTime *)&v76, 1, 0, 0, 0);
  *((_DWORD *)this + 54) = 0;
  uint64_t v68 = *((unsigned int *)this + 50);
  *((_DWORD *)this + 38) = v68;
  if (a4)
  {
    *((void *)a4 + 2) += v68;
    if (*((_DWORD *)a4 + 2) > v68) {
      LODWORD(v68) = *((_DWORD *)a4 + 2);
    }
    *((_DWORD *)a4 + 2) = v68;
  }
  if (*((unsigned char *)this + 356)) {
    FstSearchHash::seedFromMiniFst((uint64_t)this, v97);
  }
  if (a5) {
    FstSearchHashBackoff::propagateNulls((uint64_t)this, v92, a2, a4);
  }
  *((_DWORD *)this + 56) = a2;
  int64x2_t v74 = 0u;
  int64x2_t v75 = 0u;
  SnapTime::recordTime((SnapTime *)&v74, 1, 0, 0, 0);
  uint64_t v69 = (int64x2_t *)*((void *)this + 13);
  int64x2_t result = vaddq_s64(v69[6], vsubq_s64(v74, v76));
  int64x2_t v71 = vaddq_s64(v69[7], vsubq_s64(v75, v77));
  v69[6] = result;
  v69[7] = v71;
  return result;
}

void sub_213E43D90(_Unwind_Exception *exception_object)
{
}

uint64_t FstSearchHash::seedFromMiniFst(uint64_t this, int *a2)
{
  if (*(unsigned char *)(this + 356))
  {
    uint64_t v2 = this;
    unsigned int v3 = *(_DWORD *)(this + 264);
    if (v3 >= *(_DWORD *)(this + 20)) {
      unsigned int v3 = *(_DWORD *)(this + 20);
    }
    if (v3)
    {
      uint64_t v5 = 0;
      unsigned int v6 = 0;
      int v7 = (void *)(this + 160);
      uint64_t v21 = this + 192;
      do
      {
        int v8 = (int *)(*(void *)(v2 + 256) + v5);
        int v9 = *v8;
        int v11 = v8[6];
        int v10 = v8[7];
        int v12 = v8[2];
        v22[0] = 0;
        v22[1] = 0;
        if ((v12 & 0x80000000) == 0)
        {
          while (1)
            ;
        }
        unsigned int v13 = -2 - v12;
        if (v10 == 16777213)
        {
          int v10 = 16777209;
          if (*(_DWORD *)(*v7 + 24 * v13) == 16777209) {
            unsigned int v13 = *(_DWORD *)(*(void *)(v2 + 176) + 12 * *(unsigned int *)(*v7 + 24 * v13 + 8) + 8);
          }
        }
        int v14 = *a2;
        uint64_t v15 = *(unsigned int *)(v2 + 168);
        if (v15 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<CWIDAC>::reallocElts(v2 + 160, 1, 1);
          LODWORD(v15) = *(_DWORD *)(v2 + 168);
        }
        uint64_t v16 = (int *)(*(void *)(v2 + 160) + 24 * v15);
        *uint64_t v16 = v10;
        v16[1] = v14;
        locale_t v16[2] = -1;
        v16[3] = v9;
        v16[4] = v13;
        v16[5] = 0;
        int v17 = *(_DWORD *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v17 + 1;
        uint64_t v18 = *(unsigned int *)(v2 + 200);
        if (v18 == *(_DWORD *)(v2 + 204))
        {
          DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts(v21, 1, 1);
          LODWORD(v18) = *(_DWORD *)(v2 + 200);
        }
        uint64_t v19 = *(void *)(v2 + 192) + 20 * v18;
        *(_DWORD *)uint64_t v19 = v9;
        *(_DWORD *)(v19 + 4) = v11;
        *(_DWORD *)(v19 + 8) = v17;
        *(_WORD *)(v19 + 12) = -2;
        *(_DWORD *)(v19 + 16) = 0;
        ++*(_DWORD *)(v2 + 200);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v22);
        ++v6;
        unsigned int v20 = *(_DWORD *)(v2 + 264);
        if (v20 >= *(_DWORD *)(v2 + 20)) {
          unsigned int v20 = *(_DWORD *)(v2 + 20);
        }
        v5 += 36;
      }
      while (v6 < v20);
    }
  }
  return this;
}

void sub_213E43F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchHash::collectTraces(FstSearchHash *this)
{
  unint64_t v2 = *((unsigned int *)this + 42);
  int v36 = 0;
  int v35 = 0;
  if (v2)
  {
    unsigned int v3 = MemChunkAlloc(4 * v2, 0);
    unint64_t v4 = 0;
    int v35 = v3;
    int v36 = v2;
    do
      *((_DWORD *)v3 + v4++) = 0;
    while (v4 < v2);
  }
  else
  {
    unsigned int v3 = 0;
  }
  unint64_t v5 = *((unsigned int *)this + 50);
  if (v5)
  {
    unint64_t v6 = 0;
    int v7 = (unsigned int *)(*((void *)this + 24) + 8);
    do
    {
      unsigned int v9 = *v7;
      v7 += 5;
      uint64_t v8 = v9;
      if (v9 != -1)
      {
        *((_DWORD *)v3 + v8) = 1;
        unint64_t v5 = *((unsigned int *)this + 50);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  int v10 = *((_DWORD *)this + 42);
  if (!v10) {
    goto LABEL_32;
  }
  int v11 = (uint64_t *)((char *)this + 160);
  unsigned int v12 = v10 - 1;
  do
  {
    uint64_t v13 = v12;
    if (*((_DWORD *)v3 + v12))
    {
      uint64_t v14 = *(unsigned int *)(*v11 + 24 * v12 + 16);
      if (v14 != -1) {
        *((_DWORD *)v3 + v14) = 1;
      }
    }
    --v12;
  }
  while (v13);
  unsigned int v15 = *((_DWORD *)this + 42);
  if (v15)
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    unsigned int v18 = 0;
    do
    {
      if (*((_DWORD *)v3 + v17))
      {
        uint64_t v19 = *v11;
        if (v17 != v18)
        {
          unsigned int v20 = (long long *)(v19 + v16);
          uint64_t v21 = v19 + 24 * v18;
          long long v22 = *v20;
          *(void *)(v21 + 16) = *((void *)v20 + 2);
          *(_OWORD *)uint64_t v21 = v22;
          uint64_t v19 = *v11;
        }
        uint64_t v23 = v19 + 24 * v18;
        unsigned int v26 = *(_DWORD *)(v23 + 16);
        uint64_t v24 = (_DWORD *)(v23 + 16);
        uint64_t v25 = v26;
        if (v26 != -1) {
          *uint64_t v24 = *((_DWORD *)v3 + v25);
        }
        *((_DWORD *)v3 + v17) = v18++;
        unsigned int v15 = *((_DWORD *)this + 42);
      }
      ++v17;
      v16 += 24;
    }
    while (v17 < v15);
    unsigned int v27 = *((_DWORD *)this + 43);
    if (v18 > v27)
    {
      DgnArray<CWIDAC>::reallocElts((uint64_t)this + 160, v18 - v27, 0);
      unsigned int v15 = *((_DWORD *)this + 42);
    }
    if (v15 < v18)
    {
      unint64_t v28 = v18 - (unint64_t)v15;
      int v29 = (void *)(*v11 + 24 * v15 + 16);
      do
      {
        *((_OWORD *)v29 - 1) = xmmword_2140992B0;
        *int v29 = 0xFFFFFFFFLL;
        v29 += 3;
        --v28;
      }
      while (v28);
    }
  }
  else
  {
LABEL_32:
    unsigned int v18 = 0;
  }
  *((_DWORD *)this + 42) = v18;
  uint64_t v30 = *((unsigned int *)this + 50);
  if (v30)
  {
    int v31 = v35;
    signed __int32 v32 = (_DWORD *)(*((void *)this + 24) + 8);
    do
    {
      uint64_t v33 = *v32;
      if (v33 != -1) {
        *signed __int32 v32 = *((_DWORD *)v31 + v33);
      }
      v32 += 5;
      --v30;
    }
    while (v30);
  }
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v35);
}

void sub_213E441B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int64x2_t FstSearchHash::vite(int64x2_t **this, int a2, signed __int32 a3, SearchStats *a4, int a5)
{
  FstSearchHash::advanceDeltas((FstSearchHash *)this, a2, a3, a4, a5);
  int64x2_t v13 = 0u;
  int64x2_t v14 = 0u;
  SnapTime::recordTime((SnapTime *)&v13, 1, 0, 0, 0);
  if (a2 >= 1)
  {
    unsigned int v7 = *((_DWORD *)this + 18);
    if (v7)
    {
      if (!(a2 % v7)) {
        FstSearchHash::collectTraces((FstSearchHash *)this);
      }
    }
  }
  int64x2_t v11 = 0u;
  int64x2_t v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  uint64_t v8 = this[13];
  int64x2_t result = vaddq_s64(v8[14], vsubq_s64(v11, v13));
  int64x2_t v10 = vaddq_s64(v8[15], vsubq_s64(v12, v14));
  v8[14] = result;
  v8[15] = v10;
  return result;
}

int64x2_t FstSearchHash::reset(FstSearchHash *this)
{
  *((_DWORD *)this + 42) = 0;
  *((_DWORD *)this + 46) = 0;
  *((_DWORD *)this + 50) = 0;
  int64x2_t v7 = 0u;
  int64x2_t v8 = 0u;
  SnapTime::recordTime((SnapTime *)&v7, 1, 0, 0, 0);
  int64x2_t v5 = 0u;
  int64x2_t v6 = 0u;
  SnapTime::recordTime((SnapTime *)&v5, 1, 0, 0, 0);
  unint64_t v2 = (int64x2_t *)*((void *)this + 13);
  int64x2_t result = vaddq_s64(v2[10], vsubq_s64(v5, v7));
  int64x2_t v4 = vaddq_s64(v2[11], vsubq_s64(v6, v8));
  v2[10] = result;
  v2[11] = v4;
  return result;
}

double FstSearchHash::doFrame(int64x2_t **this, int a2, signed __int32 a3, SearchStats *a4, int a5)
{
  if (a3 >= 20000) {
    a3 = 20000;
  }
  *(void *)&double result = FstSearchHash::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearchHash::beginTopRecPassSyncRecog(FstSearchHash *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 240, a3, *((PelScoreCache **)this + 4));
    uint64_t result = ArcGraph::findBackoffState(*((void *)this + 5));
    *((_DWORD *)this + 88) = result;
    *((unsigned char *)this + 356) = 1;
  }
  return result;
}

uint64_t FstSearchHash::endTopRecPassSyncRecog(int64x2_t **this)
{
  int64x2_t v10 = 0u;
  int64x2_t v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  FstSearchHashBackoff::generateTraceTokensFromTraces((FstSearchHashBackoff *)this);
  int64x2_t v8 = 0u;
  int64x2_t v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  int64x2_t v2 = vsubq_s64(v8, v10);
  unsigned int v3 = this[13];
  int64x2_t v4 = v3[13];
  int64x2_t v5 = vaddq_s64(v3[12], v2);
  int64x2_t v8 = v2;
  int64x2_t v9 = vsubq_s64(v9, v11);
  int64x2_t v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + 58) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

void FstSearchHash::printSize(FstSearchHash *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v116);
  if (v117) {
    uint64_t v16 = v116;
  }
  else {
    uint64_t v16 = &unk_214099300;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_214099300, a3, &unk_214099300, v16);
  DgnString::~DgnString((DgnString *)&v116);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_214099300);
  uint64_t v21 = (a3 + 1);
  uint64_t v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v116);
  if (v117) {
    unsigned int v27 = v116;
  }
  else {
    unsigned int v27 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v116);
  if (v117) {
    signed __int32 v32 = v116;
  }
  else {
    signed __int32 v32 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v116);
  if (v117) {
    uint64_t v37 = v116;
  }
  else {
    uint64_t v37 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v37, 4, 4, 0);
  uint64_t v111 = a2;
  unsigned int v112 = a6;
  uint64_t v113 = a3;
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v116);
  if (v117) {
    uint64_t v42 = v116;
  }
  else {
    uint64_t v42 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v42, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  uint64_t v43 = 16;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v43 = 12;
  }
  uint64_t v44 = *((unsigned int *)this + 42);
  uint64_t v45 = 24 * v44;
  if ((int)v44 <= 0) {
    uint64_t v45 = 0;
  }
  uint64_t v46 = v45 + v43;
  uint64_t v47 = v45 + v43 + 24 * (*((_DWORD *)this + 43) - v44);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v116);
  if (v117) {
    int64x2_t v52 = v116;
  }
  else {
    int64x2_t v52 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, v21, &unk_214099300, v22, v22, v52, v47, v46, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v47;
  *a5 += v46;
  uint64_t v53 = 16;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v53 = 12;
  }
  uint64_t v54 = *((unsigned int *)this + 46);
  uint64_t v55 = 12 * v54;
  if ((int)v54 <= 0) {
    uint64_t v55 = 0;
  }
  uint64_t v56 = v55 + v53;
  uint64_t v57 = v55 + v53 + 12 * (*((_DWORD *)this + 47) - v54);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v116);
  if (v117) {
    int64x2_t v62 = v116;
  }
  else {
    int64x2_t v62 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, v21, &unk_214099300, v22, v22, v62, v57, v56, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v57;
  *a5 += v56;
  uint64_t v63 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v63 = 16;
  }
  uint64_t v64 = *((unsigned int *)this + 50);
  uint64_t v65 = 18 * v64;
  if ((int)v64 <= 0) {
    uint64_t v65 = 0;
  }
  uint64_t v66 = v65 + v63;
  uint64_t v67 = v65 + v63 + 18 * (*((_DWORD *)this + 51) - v64);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v116);
  if (v117) {
    int v72 = v116;
  }
  else {
    int v72 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, v21, &unk_214099300, v22, v22, v72, v67, v66, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v67;
  *a5 += v66;
  uint64_t v73 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v73 = 16;
  }
  uint64_t v74 = *((unsigned int *)this + 54);
  uint64_t v75 = 18 * v74;
  if ((int)v74 <= 0) {
    uint64_t v75 = 0;
  }
  uint64_t v76 = v75 + v73;
  uint64_t v77 = v75 + v73 + 18 * (*((_DWORD *)this + 55) - v74);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v116);
  if (v117) {
    int64x2_t v82 = v116;
  }
  else {
    int64x2_t v82 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, v21, &unk_214099300, v22, v22, v82, v77, v76, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v77;
  *a5 += v76;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v116);
  if (v117) {
    int64x2_t v87 = v116;
  }
  else {
    int64x2_t v87 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v83, v84, v85, v86, v21, &unk_214099300, v22, v22, v87, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v116);
  if (v117) {
    int v92 = v116;
  }
  else {
    int v92 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, v21, &unk_214099300, v22, v22, v92, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v116);
  if (v117) {
    int64x2_t v97 = v116;
  }
  else {
    int64x2_t v97 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v93, v94, v95, v96, v21, &unk_214099300, v22, v22, v97, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  uint64_t v98 = sizeObject((uint64_t)this + 240, 0);
  uint64_t v99 = sizeObject((uint64_t)this + 240, 1);
  uint64_t v100 = sizeObject((uint64_t)this + 240, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v116);
  if (v117) {
    char v105 = v116;
  }
  else {
    char v105 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v101, v102, v103, v104, v21, &unk_214099300, v22, v22, v105, v98, v99, v100);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v98;
  *a5 += v99;
  *v112 += v100;
  unint64_t v114 = 0;
  unint64_t v115 = 0;
  SearchItf::printSize(this, v111, v21, &v115, &v114, &v114);
  *a4 += v115;
  *a5 += v114;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v116);
  if (v117) {
    uint64_t v110 = v116;
  }
  else {
    uint64_t v110 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v106, v107, v108, v109, v113, &unk_214099300, (35 - v113), (35 - v113), v110, *a4, *a5, *v112);
  DgnString::~DgnString((DgnString *)&v116);
}

void sub_213E44B70(_Unwind_Exception *a1)
{
  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

BOOL FstSearchHash::findBestPath(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8 = *(unsigned int *)(a1 + 168);
  if (v8) {
    BOOL v9 = *(_DWORD *)(a3 + 8) == 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    *(void *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v8;
  }
  if (v8) {
    BOOL v10 = *(_DWORD *)(a2 + 8) == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    *(void *)a2 = MemChunkAlloc(v8, 0);
    *(_DWORD *)(a2 + 8) = v8;
LABEL_14:
    uint64_t v11 = 0;
    do
    {
      *(unsigned char *)(*(void *)a2 + v11) = 0;
      *(unsigned char *)(*(void *)a3 + v11++) = 0;
    }
    while (v8 != v11);
    goto LABEL_16;
  }
  if (v8) {
    goto LABEL_14;
  }
LABEL_16:
  unsigned int BestTrace = FstSearchHashBackoff::getBestTrace(a1, (void *)a2, (void *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1) {
    return 0;
  }
  uint64_t v13 = *(void *)(a1 + 160) + 24 * BestTrace;
  LODWORD(v13) = *(_DWORD *)(v13 + 12) + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v13 + 4));
  *a4 = v13;
  return v13 != 1879048192;
}

uint64_t FstSearchHash::buildWordLattice(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4, char a5)
{
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  int v29 = 0;
  uint64_t v26 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v25, *(unsigned int *)(a1 + 168));
  BOOL v9 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v9, 0, 128);
  v9[4] = (uint64_t)a2;
  FstSearchHashBackoff::createLatticeNodes(a1, (uint64_t)&v28, (uint64_t)&v26, (uint64_t)a2, v25, a3, a4);
  uint64_t v23 = (uint64_t)v9;
  uint64_t v11 = *(unsigned int *)(a1 + 168);
  if (v11)
  {
    uint64_t v12 = 0;
    int v13 = v27;
    do
    {
      if (*(unsigned char *)(*a3 + v12))
      {
        uint64_t v14 = *(void *)(a1 + 160);
        if ((*(_DWORD *)(v14 + 24 * v12) - 16777209) >= 2)
        {
          uint64_t v15 = *(void *)(a1 + 176) + 12 * *(unsigned int *)(v14 + 24 * v12 + 8);
          uint64_t v16 = *(unsigned int *)(v15 + 8);
          if (v16 == -1) {
            unsigned int v17 = 0;
          }
          else {
            unsigned int v17 = v13 - *(_DWORD *)(v28 + 4 * v16);
          }
          uint64_t v18 = *(unsigned int *)(v26 + 4 * v17);
          if (*(unsigned char *)(*a4 + v12)) {
            FstSearchHash::createLatticeLink(a1, v12, (int *)v15, 0xFFFFFFFFLL, v18, (const WordLatticeLC *)*(unsigned int *)(v26 + 4 * (v13 - *(_DWORD *)(v28 + 4 * v12))), a2, v10, a5);
          }
          uint64_t v19 = v25[0];
          if (*(_DWORD *)(v25[0] + 16 * v12 + 8))
          {
            unint64_t v20 = 0;
            do
            {
              uint64_t v21 = *(unsigned int *)(*(void *)(v19 + 16 * v12) + 4 * v20);
              FstSearchHash::createLatticeLink(a1, v12, (int *)v15, v21, v18, (const WordLatticeLC *)*(unsigned int *)(v26 + 4 * (v13 - *(_DWORD *)(v28 + 4 * v21))), a2, v10, a5);
              ++v20;
              uint64_t v19 = v25[0];
            }
            while (v20 < *(unsigned int *)(v25[0] + 16 * v12 + 8));
          }
        }
      }
      ++v12;
    }
    while (v12 != v11);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>(v23);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v25);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v26);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v28);
}

void sub_213E44EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearchHash::createLatticeLink(uint64_t a1, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, const WordLatticeLC *a6, uint64_t *a7, uint64_t a8, char a9)
{
  unsigned int v11 = a5;
  unsigned int v12 = a4;
  uint64_t v16 = *(void *)(a1 + 160);
  if ((a4 & 0x80000000) != 0)
  {
    unsigned int v17 = 0;
  }
  else if (*(_DWORD *)(*(void *)(a1 + 176) + 12 * *(unsigned int *)(v16 + 24 * a4 + 8) + 8) == a2)
  {
    unsigned int v17 = (_DWORD *)(*(void *)(a1 + 176) + 12 * *(unsigned int *)(v16 + 24 * a4 + 8));
  }
  else
  {
    unsigned int v17 = 0;
  }
  ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *(_DWORD *)(v16 + 24 * a2), (uint64_t)a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8, (uint64_t)v41);
  int v18 = a3[1];
  if (v17)
  {
    v18 += v17[1];
    int v19 = *v17 + *a3;
  }
  else
  {
    int v19 = *a3;
  }
  if (v41[0] >> 25 == 126)
  {
    int v20 = 0;
    int v21 = v18;
  }
  else
  {
    int v20 = *(_DWORD *)(a1 + 136);
    int v21 = v18 - v20;
  }
  int v22 = v19 - v18;
  if ((v12 & 0x80000000) != 0)
  {
    int v23 = 0;
  }
  else
  {
    int v23 = *(_DWORD *)(a1 + 140);
    v21 -= v23;
  }
  int v35 = v21;
  uint64_t v36 = 0;
  int v37 = v20;
  int v38 = v22;
  int v39 = 0;
  int v40 = v23;
  unsigned int v24 = a3[2];
  uint64_t v25 = *(void *)(a1 + 160);
  if (v24 == -1)
  {
    int v27 = 0;
    if (a9) {
      goto LABEL_21;
    }
  }
  else
  {
    int v26 = *(_DWORD *)(v25 + 24 * v24 + 4);
    if (a9)
    {
      if (v26 >= 1) {
        --v26;
      }
      int v27 = (v26 >> 1) + 1;
LABEL_21:
      int v28 = *(_DWORD *)(v25 + 24 * a2 + 4);
      if (v28 >= 1) {
        --v28;
      }
      int v29 = v28 >> 1;
      int v30 = v29 - v27 + 1;
      if ((v12 & 0x80000000) == 0)
      {
        int v31 = *(_DWORD *)(v25 + 24 * v12 + 4);
        if (v31 >= 1) {
          --v31;
        }
        int v32 = v31 >> 1;
        goto LABEL_30;
      }
LABEL_31:
      int v33 = 0;
      goto LABEL_32;
    }
    int v27 = v26 + 1;
  }
  int v29 = *(_DWORD *)(v25 + 24 * a2 + 4);
  int v30 = v29 - v27 + 1;
  if ((v12 & 0x80000000) != 0) {
    goto LABEL_31;
  }
  int v32 = *(_DWORD *)(v25 + 24 * v12 + 4);
LABEL_30:
  int v33 = v32 - v29;
LABEL_32:
  WordLatticeLC::WordLatticeLC((uint64_t)v34, (uint64_t)v41, v27, v30, v33, (uint64_t)&v35);
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v11, a6, (WordLatticeLC *)v34);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v34);
}

void sub_213E450F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchHash::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(void *)(this + 112) = a2;
  if (*(unsigned char *)(this + 356)) {
    return MiniFst::beginTopFstSyncRecog(this + 240);
  }
  return this;
}

uint64_t FstSearchHash::endTopRecSyncRecog(FstSearchHash *this)
{
  VirtMap::setEmpty(*((void *)this + 14));
  uint64_t result = *((void *)this + 14);
  *((void *)this + 14) = 0;
  return result;
}

uint64_t FstSearchHash::getBestExitScore(FstSearchHash *this)
{
  unsigned int v17 = 0;
  uint64_t v18 = 0;
  *((_DWORD *)this + 57) = -1;
  unint64_t v1 = *((unsigned int *)this + 38);
  unint64_t v2 = *((unsigned int *)this + 50);
  if (v1 >= v2) {
    goto LABEL_16;
  }
  int64x2_t v4 = 0;
  unsigned int v5 = 0;
  uint64_t v6 = 20 * v1;
  do
  {
    uint64_t v7 = *((void *)this + 24) + v6;
    if (*(_DWORD *)(*((void *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      unsigned int v8 = *(_DWORD *)(v7 + 8);
      if (v8 != -1 && *(_DWORD *)(*((void *)this + 20) + 24 * v8 + 4) == *((_DWORD *)this + 56))
      {
        if (v5 == HIDWORD(v18))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v17, 1, 1);
          unsigned int v5 = v18;
          int64x2_t v4 = v17;
        }
        v4[v5] = v8;
        unsigned int v5 = v18 + 1;
        LODWORD(v18) = v18 + 1;
        unint64_t v2 = *((unsigned int *)this + 50);
      }
    }
    ++v1;
    v6 += 20;
  }
  while (v1 < v2);
  if (v5)
  {
    uint64_t v9 = *((void *)this + 20);
    uint64_t v10 = v5;
    int v11 = 1879048192;
    do
    {
      unsigned int v13 = *v4++;
      unsigned int v12 = v13;
      int v14 = *(_DWORD *)(v9 + 24 * v13 + 12);
      if (v11 > v14)
      {
        *((_DWORD *)this + 57) = *(_DWORD *)(v9 + 24 * v12 + 16);
        int v11 = v14;
      }
      --v10;
    }
    while (v10);
  }
  else
  {
LABEL_16:
    int v11 = 1879048192;
  }
  if (v11 >= 20000) {
    uint64_t v15 = 20000;
  }
  else {
    uint64_t v15 = v11;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v17);
  return v15;
}

void sub_213E452A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t FstSearchHash::getBestScoreMaybeUpdateFstNode(FstSearchHash *this, Node *a2)
{
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v2 = *((unsigned int *)this + 50);
  if (v2)
  {
    unsigned int v3 = (int *)*((void *)this + 24);
    __int16 v4 = -1;
    int v5 = 1879048192;
    uint64_t v6 = v3;
    do
    {
      int v8 = *v6;
      v6 += 5;
      int v7 = v8;
      if (v5 > v8)
      {
        __int16 v4 = *((_WORD *)v3 + 6);
        int v5 = v7;
      }
      unsigned int v3 = v6;
      --v2;
    }
    while (v2);
    uint64_t v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000) {
        uint64_t v9 = 20000;
      }
      else {
        uint64_t v9 = v5;
      }
    }
  }
  else
  {
    uint64_t v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

uint64_t FstSearchHash::seedTheory(FstSearchHash *this, int a2, int a3, int a4, SearchStats *a5)
{
  if (a4 == -2)
  {
    int v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    unsigned int v11 = *((_DWORD *)this + 42);
    if (v11 == *((_DWORD *)this + 43))
    {
      DgnArray<CWIDAC>::reallocElts((uint64_t)this + 160, 1, 1);
      unsigned int v11 = *((_DWORD *)this + 42);
    }
    uint64_t v12 = *((void *)this + 20) + 24 * v11;
    *(_DWORD *)uint64_t v12 = a4;
    *(_DWORD *)(v12 + 4) = a3;
    *(_DWORD *)(v12 + 8) = -1;
    *(_DWORD *)(v12 + 12) = a2;
    *(void *)(v12 + 16) = 0xFFFFFFFFLL;
    int v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  int v13 = *(_DWORD *)(*((void *)this + 5) + 144);
  unsigned int v14 = *((_DWORD *)this + 50);
  if (v14 == *((_DWORD *)this + 51))
  {
    DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts((uint64_t)this + 192, 1, 1);
    unsigned int v14 = *((_DWORD *)this + 50);
  }
  uint64_t v15 = *((void *)this + 24) + 20 * v14;
  *(_DWORD *)uint64_t v15 = a2;
  *(_DWORD *)(v15 + 4) = v13;
  *(_DWORD *)(v15 + 8) = v9;
  *(_WORD *)(v15 + 12) = -2;
  *(_DWORD *)(v15 + 16) = 0;
  LODWORD(v15) = *((_DWORD *)this + 50) + 1;
  *((_DWORD *)this + 50) = v15;
  *((_DWORD *)this + 38) = v15;

  return FstSearchHashBackoff::propagateNulls((uint64_t)this, 20000, a3, a5);
}

uint64_t FstSearchHash::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(unsigned int *)(result + 228);
  if (v8 != -1)
  {
    uint64_t v9 = result;
    uint64_t v10 = (unsigned int *)(*(void *)(result + 160) + 24 * v8);
    for (i = v10[4]; i != -1; uint64_t v8 = v16)
    {
      uint64_t v16 = i;
      uint64_t result = *(void *)(v9 + 40);
      if (*v10 == 16777209)
      {
        int v17 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        uint64_t result = ArcGraph::lexToCWID((ArcGraph *)result, *v10, a3, (uint64_t)a4, a5, a6, a7, a8);
        int v17 = result;
      }
      uint64_t v18 = *(unsigned int *)(a2 + 8);
      if (v18 == *(_DWORD *)(a2 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        uint64_t v18 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(void *)a2 + 4 * v18) = v17;
      ++*(_DWORD *)(a2 + 8);
      uint64_t v19 = *(unsigned int *)(a6 + 8);
      if (v19 == *(_DWORD *)(a6 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        uint64_t v19 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(void *)a6 + 4 * v19) = v8;
      ++*(_DWORD *)(a6 + 8);
      uint64_t v20 = *(void *)(v9 + 160);
      int v21 = *(_DWORD *)(v20 + 24 * v8 + 4);
      uint64_t v22 = *(unsigned int *)(a3 + 8);
      if (v22 == *(_DWORD *)(a3 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        uint64_t v22 = *(unsigned int *)(a3 + 8);
        uint64_t v20 = *(void *)(v9 + 160);
      }
      *(_DWORD *)(*(void *)a3 + 4 * v22) = v21;
      ++*(_DWORD *)(a3 + 8);
      int v23 = *(_DWORD *)(v20 + 24 * v8 + 12);
      uint64_t v24 = *(unsigned int *)(a5 + 8);
      if (v24 == *(_DWORD *)(a5 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        uint64_t v24 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(void *)a5 + 4 * v24) = v23;
      ++*(_DWORD *)(a5 + 8);
      uint64_t v10 = (unsigned int *)(*(void *)(v9 + 160) + 24 * v16);
      uint64_t i = v10[4];
    }
    *a4 = *v10;
  }
  return result;
}

void FstSearchHash::checkSearchParametersValidityForArcGraph(FstSearchHash *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *((void *)this + 5);
  if (*(unsigned char *)(v8 + 178))
  {
    int v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(unsigned char *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    }
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    }
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(void *)(**(void **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((void *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if (a2)
      {
        if (!*(unsigned char *)(v8 + 203)) {
          return;
        }
      }
      else if (*(unsigned char *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(unsigned char *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

uint64_t FstSearchHash::makePartialResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    uint64_t v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(void *)a2 + v9))(*(void *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  unsigned int BestTrace = FstSearchHashBackoff::getBestTrace(a1, 0, 0, 1);
  if (BestTrace == -1) {
    return 1879048192;
  }
  unsigned int v15 = BestTrace;
  FstSearchHashBackoff::getHistory(a1, BestTrace, a3, a4, v11, v12, v13, v14);
  memset(v25, 0, sizeof(v25));
  int v26 = 0;
  if (*(_DWORD *)(a3 + 8))
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    int v18 = 0;
    do
    {
      uint64_t v19 = *(void *)a3 + v16;
      int v20 = *(_DWORD *)(v19 + 28);
      WordLatticeLC::WordLatticeLC((uint64_t)v24, v19, v18, *(_DWORD *)(v19 + 24) - v18, v20 - *(_DWORD *)(v19 + 24), (uint64_t)v25);
      uint64_t v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(void *)a2 + 112 * v21), (const WordLatticeLC *)v24);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v24);
      ++v17;
      v16 += 32;
      int v18 = v20;
    }
    while (v17 < *(unsigned int *)(a3 + 8));
  }
  uint64_t v22 = *(void *)(a1 + 160) + 24 * v15;
  return (*(_DWORD *)(v22 + 12) + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_213E4598C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void FstSearchLeafLatticeDurationBackoff::FstSearchLeafLatticeDurationBackoff(FstSearchLeafLatticeDurationBackoff *this, const int *a2, const int *a3)
{
  SearchItf::SearchItf(this);
  *(void *)uint64_t v5 = &unk_26C4E43F0;
  *(_DWORD *)(v5 + 136) = *a2;
  *(_DWORD *)(v5 + 140) = *a3;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 248) = 0u;
  *(_OWORD *)(v5 + 232) = 0u;
  *(_OWORD *)(v5 + 216) = 0u;
  *(_OWORD *)(v5 + 2DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 64) = 0u;
  *(_OWORD *)(v5 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = 0u;
  *(_DWORD *)(v5 + 296) = -1;
  *(_DWORD *)(v5 + 304) = 1879048192;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_OWORD *)(v5 + 376) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(unsigned char *)(v5 + 428) = 0;
}

unint64_t FstSearchLeafLatticeDurationBackoff::maybeGeneratePelMaps(FstSearchLeafLatticeDurationBackoff *this, const PicMgr *a2)
{
  return PicMgr::getPelPhoneMap((unint64_t)a2, (uint64_t)this + 248, (uint64_t)this + 232);
}

uint64_t FstSearchLeafLatticeDurationBackoff::maybeInitDurModel(FstSearchLeafLatticeDurationBackoff *this, const PicMgr *a2, int a3)
{
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  PicMgr::getPelDurIdMap((uint64_t)a2, (uint64_t)&v15);
  if (a3 == 1) {
    uint64_t v6 = 56;
  }
  else {
    uint64_t v6 = 72;
  }
  uint64_t v7 = v16;
  unsigned int v8 = *((_DWORD *)this + 51);
  if (v16 <= v8)
  {
    *((_DWORD *)this + 50) = v16;
    if (!v7) {
      goto LABEL_13;
    }
  }
  else
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 192, v16 - v8, 0);
    *((_DWORD *)this + 50) = v7;
  }
  uint64_t v9 = 0;
  uint64_t v10 = v15;
  uint64_t v11 = *((void *)this + 24);
  do
  {
    if (!(_WORD)v9 || (uint64_t v12 = *(unsigned __int16 *)(v10 + 2 * v9), v12 == 0xFFFF)) {
      __int16 v13 = 0;
    }
    else {
      __int16 v13 = *(_WORD *)(*(void *)((char *)a2 + v6) + 2 * v12);
    }
    *(_WORD *)(v11 + 2 * v9++) = v13;
  }
  while (v7 != v9);
LABEL_13:
  *((unsigned char *)this + 208) = *((unsigned char *)a2 + 8);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 3);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v15);
}

void sub_213E45B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int64x2_t FstSearchLeafLatticeDurationBackoff::advanceDeltas(FstSearchLeafLatticeDurationBackoff *this, int a2, int a3, SearchStats *a4, int a5)
{
  v155[0] = a2;
  int64x2_t v153 = 0u;
  int64x2_t v154 = 0u;
  SnapTime::recordTime((SnapTime *)&v153, 1, 0, 0, 0);
  int v117 = (int *)((char *)this + 304);
  *((_DWORD *)this + 76) = a3;
  int v8 = *((_DWORD *)this + 2);
  unsigned int v9 = *((_DWORD *)this + 68);
  if (v9)
  {
    *(_DWORD *)&v119[8] = 0;
    unsigned int v10 = 0;
    uint64_t v137 = (uint64_t *)((char *)this + 216);
    int v109 = *((_DWORD *)this + 53);
    int v110 = *((unsigned __int8 *)this + 208);
    unsigned int v116 = (char *)this + 280;
    unsigned int v112 = a4;
    *(void *)unsigned int v119 = *((unsigned int *)this + 2);
    do
    {
      uint64_t v11 = *((void *)this + 33);
      uint64_t v12 = v10;
      uint64_t v13 = *(unsigned int *)(v11 + 40 * v10 + 4);
      unsigned int v111 = v10;
      if (v9 <= v10 + 1) {
        unsigned int v14 = v10 + 1;
      }
      else {
        unsigned int v14 = v9;
      }
      while (v14 - 1 != v10)
      {
        if (*(_DWORD *)(v11 + 40 * ++v10 + 4) != v13) {
          goto LABEL_10;
        }
      }
      unsigned int v10 = v14;
LABEL_10:
      uint64_t v15 = *((void *)this + 5);
      if (*(_DWORD *)(v15 + 160) != v13)
      {
        BOOL v16 = *(_DWORD *)(v15 + 140) <= (int)v13 || v111 >= v10;
        unsigned int v114 = v10;
        uint64_t v120 = v12;
        uint64_t v113 = v13;
        if (!v16)
        {
          uint64_t v17 = v10;
          uint64_t v18 = v12;
          uint64_t v129 = v10;
          do
          {
            if (*((_DWORD *)this + 19) + *((_DWORD *)this + 76) >= 5000) {
              int v19 = 5000;
            }
            else {
              int v19 = *((_DWORD *)this + 19) + *((_DWORD *)this + 76);
            }
            int ScoreAllowBackoff_updateNodeInSequence = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(*((void *)this + 33) + 40 * v18 + 12), *(_DWORD *)(*((void *)this + 33) + 40 * v18), v19);
            uint64_t v21 = *((void *)this + 33) + 40 * v18;
            __int16 v22 = *(_WORD *)(v21 + 12);
            int v23 = *(_DWORD *)(v21 + 32);
            int v24 = v110;
            if (v23 >= 1) {
              int v24 = v110 - v23;
            }
            int v25 = v24 & ((v23 - v110) >> 31);
            int v26 = v25 + *(_DWORD *)(v21 + 36);
            if (*(_WORD *)(v21 + 12))
            {
              int v27 = v23 - v110;
            }
            else
            {
              int v26 = *(_DWORD *)(v21 + 36);
              int v27 = *(_DWORD *)(v21 + 32);
            }
            if (*(_WORD *)(v21 + 12)) {
              int v28 = v25;
            }
            else {
              int v28 = 0;
            }
            int v29 = v28 + ScoreAllowBackoff_updateNodeInSequence;
            if (v28 + ScoreAllowBackoff_updateNodeInSequence - v8 <= *v117)
            {
              uint64_t v30 = *(void *)(v21 + 4);
              __int16 v133 = *(_WORD *)(v21 + 14);
              int v135 = v26;
              uint64_t v31 = *(void *)(v21 + 16);
              unsigned int v32 = *(_DWORD *)(v21 + 24);
              uint64_t v33 = *(unsigned __int16 *)(v21 + 28);
              __int16 v131 = *(_WORD *)(v21 + 30);
              if (*v117 > v29) {
                *int v117 = v29;
              }
              unsigned int v34 = *((_DWORD *)this + 56);
              unsigned int v35 = v34;
              if (v33)
              {
                uint64_t v36 = *v137;
                uint64_t v37 = v33;
                unsigned int v35 = *((_DWORD *)this + 56);
                do
                {
                  __int16 v38 = *(_WORD *)(v36 + 2 * v32);
                  if (v35 == *((_DWORD *)this + 57))
                  {
                    DgnPrimArray<short>::reallocElts((uint64_t)v137, 1, 1);
                    unsigned int v35 = *((_DWORD *)this + 56);
                    uint64_t v36 = *((void *)this + 27);
                  }
                  *(_WORD *)(v36 + 2 * v35++) = v38;
                  *((_DWORD *)this + 56) = v35;
                  ++v32;
                  --v37;
                }
                while (v37);
              }
              if (v35 == *((_DWORD *)this + 57))
              {
                DgnPrimArray<short>::reallocElts((uint64_t)v137, 1, 1);
                unsigned int v35 = *((_DWORD *)this + 56);
              }
              *(_WORD *)(*((void *)this + 27) + 2 * v35) = v22;
              *((_DWORD *)this + 56) = v35 + 1;
              uint64_t v39 = *((unsigned int *)this + 72);
              uint64_t v12 = v120;
              if (v39 == *((_DWORD *)this + 73))
              {
                DgnArray<FstSearchLeafLatticeDurationBackoffActiveToken>::reallocElts((uint64_t)v116, 1, 1);
                LODWORD(v39) = *((_DWORD *)this + 72);
              }
              uint64_t v40 = *((void *)this + 35) + 40 * v39;
              *(_DWORD *)uint64_t v40 = v29;
              *(void *)(v40 + 4) = v30;
              *(_WORD *)(v40 + 12) = v22;
              *(_WORD *)(v40 + 14) = v133;
              *(void *)(v40 + 16) = v31;
              *(_DWORD *)(v40 + 24) = v34;
              *(_WORD *)(v40 + 28) = v33 + 1;
              *(_WORD *)(v40 + 30) = v131;
              *(_DWORD *)(v40 + 32) = v27;
              *(_DWORD *)(v40 + 36) = v135;
              int v41 = *((_DWORD *)this + 72) + 1;
              *((_DWORD *)this + 72) = v41;
              int v8 = *(_DWORD *)v119;
              if (v18 == v120)
              {
                int v42 = *(_DWORD *)&v119[4];
                if (*(_DWORD *)&v119[8] == 2 * *((_DWORD *)this + 4)) {
                  int v42 = v41;
                }
                *(_DWORD *)&v119[4] = v42;
                ++*(_DWORD *)&v119[8];
              }
              unsigned int v10 = v114;
              uint64_t v13 = v113;
              uint64_t v17 = v129;
            }
            else
            {
              unsigned int v10 = v114;
              uint64_t v13 = v113;
            }
            ++v18;
          }
          while (v18 != v17);
        }
        uint64_t v43 = v10;
        unsigned int v44 = v13;
        uint64_t v118 = v10;
        do
        {
          uint64_t v45 = *((void *)this + 5);
          uint64_t v46 = *(void *)(v45 + 152);
          unsigned int v47 = *(_DWORD *)(v46 + 4 * v44);
          int v48 = *(_DWORD *)(v45 + 140);
          int v122 = *(_DWORD *)(v46 + 4 * (v44 + 1));
          unsigned int v123 = v47;
          unsigned int v115 = v44;
          if (v48 <= v122)
          {
            if (*((unsigned char *)this + 428)) {
              BOOL v74 = v48 <= (int)v13;
            }
            else {
              BOOL v74 = 0;
            }
            if (v74)
            {
              if ((v47 & 0xFFFFF) <= 0xFFFF3) {
                unsigned int v75 = v47 & 0xFFFFF;
              }
              else {
                unsigned int v75 = v47 & 0xFFFFF | 0xF00000;
              }
              if (v75 != 16777210)
              {
                DgnString::DgnString((DgnString *)&v150);
                ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v75, (DgnString *)&v150, v76, v77, v78, v79, v80);
                uint64_t v86 = &unk_214099300;
                if (v150.i32[2]) {
                  uint64_t v86 = (void *)v150.i64[0];
                }
                uint64_t v85 = (unsigned int *)(*((void *)this + 33) + 40 * v12);
                xprintf("Seed from state %d score %d trace %d, %s\n", v81, v82, v83, v84, v13, *v85, v85[2], v86);
                int64x2_t v87 = (int *)(*((void *)this + 33) + 40 * v12);
                MiniFst::seed((uint64_t)this + 312, *v87, v87[5], v87[2], v122);
                DgnString::~DgnString((DgnString *)&v150);
              }
              unsigned int v47 = v123;
            }
          }
          else
          {
            if (*((_DWORD *)this + 19) + *((_DWORD *)this + 76) >= 5000) {
              int v49 = 5000;
            }
            else {
              int v49 = *((_DWORD *)this + 19) + *((_DWORD *)this + 76);
            }
            int v121 = (v47 >> 20) & 0x3FF;
            int v50 = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), (unsigned __int16)*(_DWORD *)(v46 + 4 * v44), *(_DWORD *)(*((void *)this + 33) + 40 * v12) + ((*(_DWORD *)(v46 + 4 * v44) >> 20) & 0x3FFu), v49);
            if (v111 < v10)
            {
              int v134 = v50 - *(_DWORD *)(*((void *)this + 33) + 40 * v12);
              uint64_t v51 = (unsigned __int16)v47;
              int v52 = v109;
              if (!(_WORD)v47) {
                int v52 = 0;
              }
              int v132 = v52;
              uint64_t v53 = v12;
              do
              {
                uint64_t v54 = *((void *)this + 33) + 40 * v53;
                int v55 = v134 + *(_DWORD *)v54;
                int v56 = *(__int16 *)(*((void *)this + 24) + 2 * v51);
                int v57 = v56 & (v56 >> 31);
                if (!v51) {
                  int v56 = 0;
                }
                int v136 = v56;
                if (v51) {
                  int v58 = v57;
                }
                else {
                  int v58 = 0;
                }
                int v59 = (*(_DWORD *)(v54 + 32) & ~(*(int *)(v54 + 32) >> 31)) - v58 + v132;
                int v60 = v55 + v59;
                int v61 = v55 + v59 - v8;
                int v62 = *((_DWORD *)this + 76);
                if (v61 <= v62)
                {
                  __int16 v130 = *(_WORD *)(v54 + 14);
                  int v125 = *(_DWORD *)(v54 + 16);
                  int v126 = *(_DWORD *)(v54 + 8);
                  unsigned int v63 = *(_DWORD *)(v54 + 24);
                  uint64_t v64 = *(unsigned __int16 *)(v54 + 28);
                  __int16 v127 = *(_WORD *)(v54 + 30);
                  int v128 = *(_DWORD *)(v54 + 20);
                  int v124 = *(_DWORD *)(v54 + 36);
                  if (v62 > v60) {
                    *int v117 = v60;
                  }
                  unsigned int v65 = *((_DWORD *)this + 56);
                  unsigned int v66 = v65;
                  if (v64)
                  {
                    uint64_t v67 = *v137;
                    uint64_t v68 = v64;
                    unsigned int v66 = *((_DWORD *)this + 56);
                    do
                    {
                      __int16 v69 = *(_WORD *)(v67 + 2 * v63);
                      if (v66 == *((_DWORD *)this + 57))
                      {
                        DgnPrimArray<short>::reallocElts((uint64_t)v137, 1, 1);
                        unsigned int v66 = *((_DWORD *)this + 56);
                        uint64_t v67 = *((void *)this + 27);
                      }
                      *(_WORD *)(v67 + 2 * v66++) = v69;
                      *((_DWORD *)this + 56) = v66;
                      ++v63;
                      --v68;
                    }
                    while (v68);
                  }
                  if (v66 == *((_DWORD *)this + 57))
                  {
                    DgnPrimArray<short>::reallocElts((uint64_t)v137, 1, 1);
                    unsigned int v66 = *((_DWORD *)this + 56);
                  }
                  unsigned int v47 = v123;
                  *(_WORD *)(*((void *)this + 27) + 2 * v66) = v123;
                  *((_DWORD *)this + 56) = v66 + 1;
                  uint64_t v70 = *((unsigned int *)this + 72);
                  uint64_t v12 = v120;
                  if (v70 == *((_DWORD *)this + 73))
                  {
                    DgnArray<FstSearchLeafLatticeDurationBackoffActiveToken>::reallocElts((uint64_t)v116, 1, 1);
                    LODWORD(v70) = *((_DWORD *)this + 72);
                  }
                  uint64_t v71 = *((void *)this + 35) + 40 * v70;
                  *(_DWORD *)uint64_t v71 = v60;
                  *(_DWORD *)(v71 + 4) = v122;
                  *(_DWORD *)(v71 + 8) = v126;
                  *(_WORD *)(v71 + 12) = v123;
                  *(_WORD *)(v71 + 14) = v130;
                  *(_DWORD *)(v71 + 16) = v125 + v121;
                  *(_DWORD *)(v71 + 20) = v128;
                  *(_DWORD *)(v71 + 24) = v65;
                  *(_WORD *)(v71 + 28) = v64 + 1;
                  *(_WORD *)(v71 + 30) = v127;
                  *(_DWORD *)(v71 + 32) = v136;
                  *(_DWORD *)(v71 + 36) = v59 + v124;
                  int v72 = *((_DWORD *)this + 72) + 1;
                  *((_DWORD *)this + 72) = v72;
                  if (v53 == v120)
                  {
                    int v73 = *(_DWORD *)&v119[4];
                    if (*(_DWORD *)&v119[8] == 2 * *((_DWORD *)this + 4)) {
                      int v73 = v72;
                    }
                    *(_DWORD *)&v119[4] = v73;
                    ++*(_DWORD *)&v119[8];
                  }
                  int v8 = *(_DWORD *)v119;
                  uint64_t v43 = v118;
                }
                ++v53;
              }
              while (v53 != v43);
            }
          }
          unsigned int v10 = v114;
          unsigned int v44 = v115 + 2;
          unsigned int v88 = v47;
          a4 = v112;
          uint64_t v13 = v113;
        }
        while ((v88 & 0x80000000) == 0);
        unsigned int v9 = *((_DWORD *)this + 68);
      }
    }
    while (v10 < v9);
    a3 = *v117;
  }
  else
  {
    *(void *)&v119[4] = 0;
  }
  int v152 = a3 + v8;
  if (*((unsigned char *)this + 428)) {
    MiniFst::updateFrame((char *)this + 312, v117, v8, a2);
  }
  int64x2_t v150 = 0u;
  int64x2_t v151 = 0u;
  SnapTime::recordTime((SnapTime *)&v150, 1, 0, 0, 0);
  int64x2_t v150 = vsubq_s64(v150, v153);
  int64x2_t v151 = vsubq_s64(v151, v154);
  uint64_t v89 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v90 = vaddq_s64(v89[1], v151);
  int64x2_t *v89 = vaddq_s64(*v89, v150);
  v89[1] = v90;
  int64x2_t v148 = 0u;
  int64x2_t v149 = 0u;
  SnapTime::recordTime((SnapTime *)&v148, 1, 0, 0, 0);
  if (*(_DWORD *)&v119[8] > (2 * *((_DWORD *)this + 4))) {
    FstSearchLeafLatticeDurationBackoff::applyCutoffOnEmitting((uint64_t)this, *(unsigned int *)&v119[4], &v152);
  }
  int64x2_t v146 = 0u;
  int64x2_t v147 = 0u;
  SnapTime::recordTime((SnapTime *)&v146, 1, 0, 0, 0);
  int64x2_t v91 = vsubq_s64(v146, v148);
  int v92 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v93 = v92[3];
  int64x2_t v94 = vaddq_s64(v92[2], v91);
  int64x2_t v146 = v91;
  int64x2_t v147 = vsubq_s64(v147, v149);
  int64x2_t v95 = vaddq_s64(v93, v147);
  v92[2] = v94;
  v92[3] = v95;
  int64x2_t v144 = 0u;
  int64x2_t v145 = 0u;
  SnapTime::recordTime((SnapTime *)&v144, 1, 0, 0, 0);
  FstSearchLeafLatticeDurationBackoff::makeViterbiDecisionOnEmitting((uint64_t)this);
  unint64_t v96 = *((unsigned int *)this + 6);
  if (v96)
  {
    unint64_t v97 = *((unsigned int *)this + 68);
    if (v96 < v97) {
      mrec_nth_element<FstSearchLeafLatticeDurationBackoffcmpTok>(*((void *)this + 33), v96, v97);
    }
  }
  int64x2_t v142 = 0u;
  int64x2_t v143 = 0u;
  SnapTime::recordTime((SnapTime *)&v142, 1, 0, 0, 0);
  int64x2_t v98 = vsubq_s64(v142, v144);
  uint64_t v99 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v100 = v99[5];
  int64x2_t v101 = vaddq_s64(v99[4], v98);
  int64x2_t v142 = v98;
  int64x2_t v143 = vsubq_s64(v143, v145);
  int64x2_t v102 = vaddq_s64(v100, v143);
  v99[4] = v101;
  v99[5] = v102;
  int64x2_t v140 = 0u;
  int64x2_t v141 = 0u;
  SnapTime::recordTime((SnapTime *)&v140, 1, 0, 0, 0);
  *((_DWORD *)this + 72) = 0;
  uint64_t v103 = *((unsigned int *)this + 68);
  *((_DWORD *)this + 38) = v103;
  if (a4)
  {
    *((void *)a4 + 2) += v103;
    if (*((_DWORD *)a4 + 2) > v103) {
      LODWORD(v103) = *((_DWORD *)a4 + 2);
    }
    *((_DWORD *)a4 + 2) = v103;
  }
  if (*((unsigned char *)this + 428)) {
    FstSearchLeafLatticeDurationBackoff::seedFromMiniFst((uint64_t)this, v155);
  }
  if (a5) {
    FstSearchLeafLatticeDurationBackoff::propagateNulls((uint64_t)this, v152, a2, a4);
  }
  *((_DWORD *)this + 74) = a2;
  int64x2_t v138 = 0u;
  int64x2_t v139 = 0u;
  SnapTime::recordTime((SnapTime *)&v138, 1, 0, 0, 0);
  uint64_t v104 = (int64x2_t *)*((void *)this + 13);
  int64x2_t result = vaddq_s64(v104[6], vsubq_s64(v138, v140));
  int64x2_t v106 = vaddq_s64(v104[7], vsubq_s64(v139, v141));
  v104[6] = result;
  v104[7] = v106;
  return result;
}

void sub_213E46474(_Unwind_Exception *exception_object)
{
}

uint64_t FstSearchLeafLatticeDurationBackoff::applyCutoffOnEmitting(uint64_t this, unsigned int a2, int *a3)
{
  unint64_t v4 = *(unsigned int *)(this + 288);
  if (v4 > a2)
  {
    uint64_t v6 = this;
    uint64_t v7 = (void *)(this + 280);
    uint64_t v8 = a2;
    this = mrec_nth_element<FstSearchLeafLatticeDurationBackoffcmpTok>(*(void *)(this + 280), a2, v4);
    int v9 = *(_DWORD *)(*v7 + 40 * a2);
    if (*a3 > v9) {
      *a3 = v9;
    }
    unsigned int v10 = *(_DWORD *)(v6 + 292);
    if (a2 > v10) {
      this = DgnArray<FstSearchLeafLatticeDurationBackoffActiveToken>::reallocElts((uint64_t)v7, a2 - v10, 0);
    }
    uint64_t v11 = *(unsigned int *)(v6 + 288);
    if (v11 < a2)
    {
      uint64_t v12 = v8 - v11;
      uint64_t v13 = 40 * v11;
      do
      {
        uint64_t v14 = *v7 + v13;
        *(void *)uint64_t v14 = 0xFFFFFFFF00000000;
        *(_DWORD *)(v14 + 8) = -1;
        *(_WORD *)(v14 + 12) = -2;
        *(void *)(v14 + 32) = 0;
        *(void *)(v14 + 16) = 0;
        *(void *)(v14 + 22) = 0;
        v13 += 40;
        --v12;
      }
      while (v12);
    }
    *(_DWORD *)(v6 + 288) = a2;
  }
  return this;
}

uint64_t FstSearchLeafLatticeDurationBackoff::makeViterbiDecisionOnEmitting(uint64_t this)
{
  uint64_t v1 = this;
  unint64_t v2 = *(unsigned int *)(this + 288);
  if (v2)
  {
    this = (uint64_t)mrec_qsort_r<FstSearchLateLatticeHashBackoffActiveToken>(*(char **)(this + 280), v2, 40);
    int v3 = *(_DWORD *)(v1 + 288);
    *(_DWORD *)(v1 + 272) = 0;
    if (v3)
    {
      unsigned int v4 = 0;
      unint64_t v5 = 0;
      unsigned int v6 = 0;
      do
      {
        uint64_t v7 = *(void *)(v1 + 280);
        if (v5 && (uint64_t v8 = (long long *)(v7 + 40 * v5), *((_DWORD *)v8 + 1) == *((_DWORD *)v8 - 9)))
        {
          if (v4 >= *(_DWORD *)(v1 + 20) + v6) {
            goto LABEL_16;
          }
          unsigned int i = v6;
          if (v6 < v4)
          {
            int v10 = *(_DWORD *)(v7 + 40 * v5 + 20);
            uint64_t v11 = (int *)(*(void *)(v1 + 264) + 40 * v6 + 20);
            for (unsigned int i = v6; v4 != i; ++i)
            {
              int v12 = *v11;
              v11 += 10;
              if (v12 == v10) {
                break;
              }
            }
          }
          if (i != v4) {
            goto LABEL_16;
          }
          int v13 = *(_DWORD *)(v1 + 276);
        }
        else
        {
          uint64_t v8 = (long long *)(v7 + 40 * v5);
          int v13 = *(_DWORD *)(v1 + 276);
          unsigned int v6 = v4;
        }
        if (v4 == v13)
        {
          this = DgnArray<FstSearchLeafLatticeDurationBackoffActiveToken>::reallocElts(v1 + 264, 1, 1);
          unsigned int v4 = *(_DWORD *)(v1 + 272);
        }
        uint64_t v14 = *(void *)(v1 + 264) + 40 * v4;
        long long v15 = *v8;
        long long v16 = v8[1];
        *(void *)(v14 + 32) = *((void *)v8 + 4);
        *(_OWORD *)uint64_t v14 = v15;
        *(_OWORD *)(v14 + 16) = v16;
        unsigned int v4 = *(_DWORD *)(v1 + 272) + 1;
        *(_DWORD *)(v1 + 272) = v4;
LABEL_16:
        ++v5;
      }
      while (v5 < *(unsigned int *)(v1 + 288));
    }
  }
  else
  {
    *(_DWORD *)(this + 272) = 0;
  }
  return this;
}

uint64_t mrec_nth_element<FstSearchLeafLatticeDurationBackoffcmpTok>(uint64_t result, unint64_t a2, unint64_t a3)
{
  if (a3 >= 2)
  {
    uint64_t v3 = 0;
    do
    {
      unsigned int v4 = (_DWORD *)(result + 40 * v3);
      uint64_t v5 = 0;
      if ((result & 7) != 0)
      {
        unsigned int v6 = &v4[10 * (a3 >> 1)];
        do
        {
          char v7 = *((unsigned char *)v4 + v5);
          *((unsigned char *)v4 + v5) = *((unsigned char *)v6 + v5);
          *((unsigned char *)v6 + v5++) = v7;
        }
        while (v5 != 40);
      }
      else
      {
        uint64_t v8 = result + 40 * (v3 + (a3 >> 1));
        do
        {
          uint64_t v9 = *(void *)((char *)v4 + v5);
          *(void *)((char *)v4 + v5) = *(void *)(v8 + v5);
          *(void *)(v8 + v5) = v9;
          v5 += 8;
        }
        while (v5 != 40);
      }
      int v10 = (_DWORD *)(result + 40 * (v3 + a3) - 40);
      uint64_t v11 = (_DWORD *)(result + 40 * v3);
      do
      {
        int v12 = v11 + 10;
        while (1)
        {
          uint64_t v11 = v12;
          if (v12 >= v10) {
            break;
          }
          v12 += 10;
          if (*v11 > *v4)
          {
            int v13 = (char *)v11;
            while (*v10 >= *v4)
            {
              v10 -= 10;
              if (v11 >= v10) {
                goto LABEL_22;
              }
            }
            uint64_t v14 = 0;
            if ((result & 7) != 0)
            {
              do
              {
                char v15 = *v13;
                *v13++ = *((unsigned char *)v10 + v14);
                *((unsigned char *)v10 + v14++) = v15;
              }
              while (v14 != 40);
            }
            else
            {
              do
              {
                uint64_t v16 = *(void *)v13;
                *(void *)int v13 = *(void *)((char *)v10 + v14);
                v13 += 8;
                *(void *)((char *)v10 + v14) = v16;
                v14 += 8;
              }
              while (v14 != 40);
            }
            v10 -= 10;
            break;
          }
        }
LABEL_22:
        ;
      }
      while (v11 < v10);
      if (*v11 > *v4) {
        v11 -= 10;
      }
      if (v11 > v4)
      {
        uint64_t v17 = 0;
        if ((result & 7) != 0)
        {
          do
          {
            char v18 = *((unsigned char *)v11 + v17);
            *((unsigned char *)v11 + v17) = *((unsigned char *)v4 + v17);
            *((unsigned char *)v4 + v17++) = v18;
          }
          while (v17 != 40);
        }
        else
        {
          do
          {
            uint64_t v19 = *(void *)((char *)v11 + v17);
            *(void *)((char *)v11 + v17) = *(void *)((char *)v4 + v17);
            *(void *)((char *)v4 + v17) = v19;
            v17 += 8;
          }
          while (v17 != 40);
        }
      }
      unint64_t v20 = ((char *)v11 - (char *)v4) / 0x28uLL;
      if (v20 <= a2)
      {
        if (v20 >= a2) {
          return result;
        }
        unint64_t v21 = v20 + 1;
        v3 += v21;
        a2 -= v21;
        unint64_t v20 = a3 - v21;
      }
      a3 = v20;
    }
    while (v20 > 1);
  }
  return result;
}

uint64_t FstSearchLeafLatticeDurationBackoff::seedFromMiniFst(uint64_t this, int *a2)
{
  if (*(unsigned char *)(this + 428))
  {
    uint64_t v2 = this;
    unsigned int v3 = *(_DWORD *)(this + 336);
    if (v3 >= *(_DWORD *)(this + 20)) {
      unsigned int v3 = *(_DWORD *)(this + 20);
    }
    if (v3)
    {
      unint64_t v4 = 0;
      uint64_t v46 = this + 176;
      uint64_t v5 = (void *)(this + 160);
      uint64_t v39 = this + 264;
      do
      {
        unsigned int v6 = (int *)(*(void *)(v2 + 328) + 36 * v4);
        int v7 = v6[4];
        int v43 = *v6;
        unsigned int v44 = v6[5];
        int v8 = v6[6];
        int v45 = v6[7];
        unsigned int v9 = v6[2];
        uint64_t v47 = 0;
        uint64_t v48 = 0;
        int v41 = v8;
        int v42 = v7;
        if ((v9 & 0x80000000) != 0)
        {
          LODWORD(v13) = -2 - v9;
        }
        else
        {
          uint64_t v10 = 0;
          unsigned int v11 = 0;
          do
          {
            if (v11 == HIDWORD(v48))
            {
              DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v47, 1, 1);
              unsigned int v11 = v48;
              uint64_t v10 = v47;
            }
            *(_DWORD *)(v10 + 4 * v11) = v9;
            uint64_t v12 = v48;
            unsigned int v11 = v48 + 1;
            LODWORD(v48) = v48 + 1;
            unsigned int v9 = *(_DWORD *)(*(void *)(v2 + 312) + 36 * v9 + 8);
          }
          while ((v9 & 0x80000000) == 0);
          LODWORD(v13) = -2 - v9;
          if ((v12 & 0x80000000) == 0)
          {
            int v14 = v12 + 1;
            uint64_t v15 = 4 * v12;
            do
            {
              unsigned int v16 = *(_DWORD *)(v47 + v15);
              uint64_t v17 = *(void *)(v2 + 312);
              char v18 = (int *)(v17 + 36 * v16);
              int v19 = *v18;
              uint64_t v20 = *((void *)v18 + 2);
              unsigned int v21 = *(_DWORD *)(v2 + 184);
              if (v21 == *(_DWORD *)(v2 + 188))
              {
                DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(v46, 1, 1);
                unsigned int v21 = *(_DWORD *)(v2 + 184);
                uint64_t v17 = *(void *)(v2 + 312);
              }
              uint64_t v22 = *(void *)(v2 + 176) + 28 * v21;
              *(_DWORD *)(v2 + 184) = v21 + 1;
              *(_DWORD *)uint64_t v22 = v19;
              *(void *)(v22 + 4) = v20;
              *(_DWORD *)(v22 + 12) = v13;
              *(_DWORD *)(v22 + 16) = 0;
              *(_WORD *)(v22 + 20) = 0;
              *(_DWORD *)(v22 + 24) = 0;
              uint64_t v23 = *(void *)(v17 + 36 * v16 + 28);
              uint64_t v24 = *(unsigned int *)(v2 + 168);
              if (v24 == *(_DWORD *)(v2 + 172))
              {
                DgnArray<DgnPrimArray<double>>::reallocElts(v2 + 160, 1, 1);
                uint64_t v24 = *(unsigned int *)(v2 + 168);
              }
              uint64_t v25 = *(void *)(v2 + 160);
              uint64_t v26 = v25 + 16 * v24;
              *(void *)uint64_t v26 = v23;
              *(_DWORD *)(v26 + 8) = v21;
              *(_DWORD *)(v26 + 12) = 0;
              uint64_t v13 = *(unsigned int *)(v2 + 168);
              *(_DWORD *)(v2 + 168) = v13 + 1;
              *(_DWORD *)(v25 + 16 * v13 + 12) = 1;
              --v14;
              v15 -= 4;
            }
            while (v14 > 0);
          }
        }
        unsigned int v27 = *(_DWORD *)(v2 + 184);
        if (v27 == *(_DWORD *)(v2 + 188))
        {
          DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(v46, 1, 1);
          unsigned int v27 = *(_DWORD *)(v2 + 184);
        }
        uint64_t v28 = *(void *)(v2 + 176);
        *(_DWORD *)(v2 + 184) = v27 + 1;
        uint64_t v29 = v28 + 28 * v27;
        *(_DWORD *)uint64_t v29 = v43;
        *(_DWORD *)(v29 + 4) = v42;
        *(_DWORD *)(v29 + 8) = v44;
        *(_DWORD *)(v29 + 12) = v13;
        *(_DWORD *)(v29 + 16) = 0;
        *(_WORD *)(v29 + 20) = 0;
        *(_DWORD *)(v29 + 24) = 0;
        if (v45 == 16777213)
        {
          int v45 = 16777209;
          if (*(_DWORD *)(*v5 + 16 * v13) == 16777209)
          {
            unsigned int v27 = *(_DWORD *)(*v5 + 16 * v13 + 8);
            int v45 = 16777209;
          }
        }
        int v30 = *a2;
        uint64_t v31 = *(unsigned int *)(v2 + 168);
        if (v31 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<DgnPrimArray<double>>::reallocElts(v2 + 160, 1, 1);
          uint64_t v31 = *(unsigned int *)(v2 + 168);
        }
        uint64_t v32 = *(void *)(v2 + 160);
        uint64_t v33 = (int *)(v32 + 16 * v31);
        *uint64_t v33 = v45;
        v33[1] = v30;
        v33[2] = v27;
        v33[3] = 0;
        uint64_t v34 = *(unsigned int *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v34 + 1;
        *(_DWORD *)(v32 + 16 * v34 + 12) = 1;
        uint64_t v35 = *(unsigned int *)(v2 + 272);
        if (v35 == *(_DWORD *)(v2 + 276))
        {
          DgnArray<FstSearchLeafLatticeDurationBackoffActiveToken>::reallocElts(v39, 1, 1);
          LODWORD(v35) = *(_DWORD *)(v2 + 272);
        }
        uint64_t v36 = *(void *)(v2 + 264) + 40 * v35;
        *(_DWORD *)uint64_t v36 = v43;
        *(_DWORD *)(v36 + 4) = v41;
        *(_DWORD *)(v36 + 8) = v34;
        *(_WORD *)(v36 + 12) = -2;
        *(_DWORD *)(v36 + 16) = v42;
        *(void *)(v36 + 20) = v44;
        *(_WORD *)(v36 + 28) = 0;
        *(void *)(v36 + 32) = 0;
        ++*(_DWORD *)(v2 + 272);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v47);
        ++v4;
        LODWORD(v37) = *(_DWORD *)(v2 + 336);
        unsigned int v38 = *(_DWORD *)(v2 + 20);
        if (v37 >= v38) {
          unint64_t v37 = v38;
        }
        else {
          unint64_t v37 = v37;
        }
      }
      while (v4 < v37);
    }
  }
  return this;
}

void sub_213E46BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLeafLatticeDurationBackoff::propagateNulls(uint64_t this, int a2, int a3, SearchStats *a4)
{
  int v4 = *(_DWORD *)(this + 168);
  uint64_t v5 = (uint64_t *)(this + 264);
  LODWORD(v6) = *(_DWORD *)(this + 272);
  uint64_t v91 = this;
  if (v6)
  {
    int v78 = *(_DWORD *)(this + 168);
    uint64_t v79 = a4;
    unsigned int v7 = 0;
    uint64_t v89 = (void *)(this + 160);
    uint64_t v85 = this + 176;
    uint64_t v94 = this + 264;
    int v93 = a2;
    do
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(unsigned int *)(*v5 + 40 * v7 + 4);
      unsigned int v83 = v7;
      if (v6 <= v7 + 1) {
        unsigned int v10 = v7 + 1;
      }
      else {
        unsigned int v10 = v6;
      }
      while (v10 - 1 != v7)
      {
        if (*(_DWORD *)(*v5 + 40 * ++v7 + 4) != v9) {
          goto LABEL_10;
        }
      }
      unsigned int v7 = v10;
LABEL_10:
      uint64_t v11 = *(void *)(this + 40);
      if (*(_DWORD *)(v11 + 160) != v9
        && (*(_DWORD *)(v11 + 140) <= (int)v9 || (*(_DWORD *)(*(void *)(v11 + 152) + 4 * v9) & 0x40000000) != 0))
      {
        uint64_t v99 = 40 * v8;
        unsigned int v82 = v7;
        unsigned int v80 = v7 - v83;
        int v81 = v9;
        unsigned int v12 = v9;
        do
        {
          uint64_t v13 = *(void *)(this + 40);
          uint64_t v14 = *(void *)(v13 + 152);
          unsigned int v87 = v12;
          unsigned int v92 = *(_DWORD *)(v14 + 4 * v12);
          int v15 = *(_DWORD *)(v13 + 140);
          int v96 = *(_DWORD *)(v14 + 4 * (v12 + 1));
          if (v15 <= v96)
          {
            int v16 = (v92 & 0xFFFFF) <= 0xFFFF3 ? v92 & 0xFFFFF : v92 & 0xFFFFF | 0xF00000;
            BOOL v17 = v16 != 16777210 && v15 <= v81;
            if (!v17 && v82 > v83)
            {
              uint64_t v19 = 0;
              int v20 = (v92 >> 20) & 0x3FF;
              int v88 = v16 + 1;
              unsigned int v21 = v80;
              int v95 = v16;
              do
              {
                uint64_t v22 = *v5;
                uint64_t v23 = *v5 + v99;
                int v24 = *(_DWORD *)(v23 + v19) + v20;
                if (v24 > a2) {
                  break;
                }
                uint64_t v25 = v23 + v19;
                int v26 = *(_DWORD *)(v25 + 8);
                __int16 v27 = *(_WORD *)(v25 + 12);
                __int16 v28 = *(_WORD *)(v25 + 14);
                int v29 = *(_DWORD *)(v25 + 20);
                int v30 = *(_DWORD *)(v25 + 24);
                __int16 v31 = *(_WORD *)(v25 + 28);
                __int16 v32 = *(_WORD *)(v25 + 30);
                int v33 = *(_DWORD *)(v25 + 36);
                int v34 = *(_DWORD *)(v25 + 16) + v20;
                if (v16 == 16777210)
                {
                  uint64_t v44 = *(unsigned int *)(this + 272);
                  if (v44 == *(_DWORD *)(this + 276))
                  {
                    uint64_t v45 = (uint64_t)v5;
                    int v98 = v33;
                    __int16 v46 = v32;
                    int v47 = v30;
                    __int16 v48 = v27;
                    int v101 = v34;
                    __int16 v49 = v28;
                    DgnArray<FstSearchLeafLatticeDurationBackoffActiveToken>::reallocElts(v45, 1, 1);
                    int v33 = v98;
                    a2 = v93;
                    __int16 v28 = v49;
                    int v34 = v101;
                    __int16 v27 = v48;
                    int v30 = v47;
                    __int16 v32 = v46;
                    uint64_t v5 = (uint64_t *)v94;
                    int v20 = (v92 >> 20) & 0x3FF;
                    int v16 = v95;
                    this = v91;
                    LODWORD(v44) = *(_DWORD *)(v91 + 272);
                    uint64_t v22 = *(void *)(v91 + 264);
                  }
                  uint64_t v50 = v22 + 40 * v44;
                  *(_DWORD *)uint64_t v50 = v24;
                  *(_DWORD *)(v50 + 4) = v96;
                  *(_DWORD *)(v50 + 8) = v26;
                  *(_WORD *)(v50 + 12) = v27;
                  *(_WORD *)(v50 + 14) = v28;
                  *(_DWORD *)(v50 + 16) = v34;
                  *(_DWORD *)(v50 + 20) = v29;
                  *(_DWORD *)(v50 + 24) = v30;
                  *(_WORD *)(v50 + 28) = v31;
                  *(_WORD *)(v50 + 30) = v32;
                  *(_DWORD *)(v50 + 32) = 0;
                  *(_DWORD *)(v50 + 36) = v33;
                  ++*(_DWORD *)(this + 272);
                }
                else
                {
                  __int16 v90 = *(_WORD *)(v25 + 12);
                  if (v16 == 16777214) {
                    int v35 = *(_DWORD *)(v25 + 16) + v20;
                  }
                  else {
                    int v35 = 0;
                  }
                  int v100 = *(_DWORD *)(v25 + 16) + v20;
                  if (v16 == 16777214) {
                    int v36 = 0;
                  }
                  else {
                    int v36 = *(_DWORD *)(v25 + 16) + v20;
                  }
                  unsigned int v37 = *(_DWORD *)(this + 184);
                  if (v37 == *(_DWORD *)(this + 188))
                  {
                    int v97 = *(_DWORD *)(v25 + 36);
                    __int16 v38 = *(_WORD *)(v25 + 30);
                    int v86 = *(_DWORD *)(v25 + 24);
                    __int16 v39 = *(_WORD *)(v25 + 14);
                    DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(v85, 1, 1);
                    int v33 = v97;
                    __int16 v28 = v39;
                    int v30 = v86;
                    __int16 v32 = v38;
                    int v20 = (v92 >> 20) & 0x3FF;
                    int v16 = v95;
                    this = v91;
                    unsigned int v37 = *(_DWORD *)(v91 + 184);
                  }
                  int v40 = v88 + 2 * v29;
                  uint64_t v41 = *(void *)(this + 176);
                  *(_DWORD *)(this + 184) = v37 + 1;
                  uint64_t v42 = v41 + 28 * v37;
                  *(_DWORD *)uint64_t v42 = v24 - v35;
                  *(_DWORD *)(v42 + 4) = v36;
                  *(_DWORD *)(v42 + 8) = v40;
                  *(_DWORD *)(v42 + 12) = v26;
                  *(_DWORD *)(v42 + 16) = v30;
                  *(_WORD *)(v42 + 20) = v31;
                  *(_DWORD *)(v42 + 24) = v33;
                  unsigned int v43 = *(_DWORD *)(this + 168);
                  if (v19)
                  {
                    uint64_t v5 = (uint64_t *)v94;
                    a2 = v93;
                  }
                  else
                  {
                    uint64_t v5 = (uint64_t *)v94;
                    if (v43 == *(_DWORD *)(this + 172))
                    {
                      __int16 v51 = v32;
                      int v52 = v30;
                      __int16 v53 = v28;
                      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v89, 1, 1);
                      __int16 v28 = v53;
                      int v30 = v52;
                      __int16 v32 = v51;
                      int v20 = (v92 >> 20) & 0x3FF;
                      int v16 = v95;
                      this = v91;
                      unsigned int v43 = *(_DWORD *)(v91 + 168);
                    }
                    uint64_t v54 = (int *)(*(void *)(this + 160) + 16 * v43);
                    *uint64_t v54 = v16;
                    v54[1] = a3;
                    v54[2] = v37;
                    v54[3] = 0;
                    int v55 = *(_DWORD *)(this + 168);
                    *(_DWORD *)(this + 168) = v55 + 1;
                    uint64_t v56 = *(unsigned int *)(this + 272);
                    if (v56 == *(_DWORD *)(this + 276))
                    {
                      __int16 v57 = v32;
                      int v58 = v30;
                      __int16 v59 = v28;
                      DgnArray<FstSearchLeafLatticeDurationBackoffActiveToken>::reallocElts(v94, 1, 1);
                      __int16 v28 = v59;
                      int v30 = v58;
                      __int16 v32 = v57;
                      int v20 = (v92 >> 20) & 0x3FF;
                      int v16 = v95;
                      this = v91;
                      LODWORD(v56) = *(_DWORD *)(v91 + 272);
                    }
                    uint64_t v60 = *(void *)(this + 264) + 40 * v56;
                    *(_DWORD *)uint64_t v60 = v24;
                    *(_DWORD *)(v60 + 4) = v96;
                    *(_DWORD *)(v60 + 8) = v55;
                    *(_WORD *)(v60 + 12) = v90;
                    *(_WORD *)(v60 + 14) = v28;
                    *(_DWORD *)(v60 + 16) = v100;
                    *(_DWORD *)(v60 + 20) = v40;
                    *(_DWORD *)(v60 + 24) = v30;
                    *(_WORD *)(v60 + 28) = 0;
                    *(_WORD *)(v60 + 30) = v32;
                    *(void *)(v60 + 32) = 0;
                    ++*(_DWORD *)(this + 272);
                    unsigned int v43 = *(_DWORD *)(this + 168);
                    a2 = v93;
                  }
                  uint64_t v61 = *v89 + 16 * (v43 - 1);
                  ++*(_DWORD *)(v61 + 12);
                }
                v19 += 40;
                --v21;
              }
              while (v21);
            }
          }
          unsigned int v12 = v87 + 2;
        }
        while ((v92 & 0x80000000) == 0);
        LODWORD(v6) = *(_DWORD *)(this + 272);
        unsigned int v7 = v82;
      }
    }
    while (v7 < v6);
    uint64_t v62 = *(unsigned int *)(this + 152);
    if (v6 > v62)
    {
      mrec_qsort_r<FstSearchLateLatticeHashBackoffActiveToken>((char *)(*(void *)(this + 264) + 40 * v62), (v6 - v62), 40);
      this = v91;
      uint64_t v62 = *(unsigned int *)(v91 + 152);
      LODWORD(v6) = *(_DWORD *)(v91 + 272);
    }
    if (v62 < v6)
    {
      unint64_t v63 = v62;
      uint64_t v64 = v62;
      do
      {
        uint64_t v65 = *v5;
        uint64_t v66 = *v5 + 40 * v63;
        uint64_t v67 = v62;
        if (*(_DWORD *)(v66 + 4) != *(_DWORD *)(*v5 + 40 * (v63 - 1) + 4)) {
          goto LABEL_64;
        }
        if ((v62 - v64) < *(_DWORD *)(this + 20))
        {
          int v68 = v64;
          if (v62 > v64)
          {
            __int16 v69 = (int *)(v65 + 40 * v64 + 20);
            int v68 = v64;
            while (1)
            {
              int v70 = *v69;
              v69 += 10;
              if (v70 == *(_DWORD *)(v65 + 40 * v63 + 20)) {
                break;
              }
              if (v62 == ++v68)
              {
                uint64_t v67 = v64;
                goto LABEL_64;
              }
            }
          }
          uint64_t v67 = v64;
          if (v68 == v62)
          {
LABEL_64:
            uint64_t v71 = v65 + 40 * v62;
            long long v72 = *(_OWORD *)v66;
            long long v73 = *(_OWORD *)(v66 + 16);
            *(void *)(v71 + 32) = *(void *)(v66 + 32);
            *(_OWORD *)uint64_t v71 = v72;
            *(_OWORD *)(v71 + 16) = v73;
            uint64_t v62 = (v62 + 1);
            uint64_t v64 = v67;
          }
        }
        ++v63;
        unint64_t v6 = *(unsigned int *)(this + 272);
      }
      while (v63 < v6);
    }
    a4 = v79;
    int v4 = v78;
    if (v79) {
      goto LABEL_67;
    }
  }
  else
  {
    LODWORD(v62) = *(_DWORD *)(this + 152);
    if (a4) {
LABEL_67:
    }
      *((_DWORD *)a4 + 1) += *(_DWORD *)(this + 168) - v4;
  }
  unsigned int v74 = *(_DWORD *)(this + 276);
  if (v62 > v74)
  {
    DgnArray<FstSearchLeafLatticeDurationBackoffActiveToken>::reallocElts((uint64_t)v5, v62 - v74, 0);
    this = v91;
    LODWORD(v6) = *(_DWORD *)(v91 + 272);
  }
  if (v6 < v62)
  {
    unint64_t v75 = v62 - (unint64_t)v6;
    uint64_t v76 = 40 * v6;
    do
    {
      uint64_t v77 = *v5 + v76;
      *(void *)uint64_t v77 = 0xFFFFFFFF00000000;
      *(_DWORD *)(v77 + 8) = -1;
      *(_WORD *)(v77 + 12) = -2;
      *(void *)(v77 + 32) = 0;
      *(void *)(v77 + 16) = 0;
      *(void *)(v77 + 22) = 0;
      v76 += 40;
      --v75;
    }
    while (v75);
  }
  *(_DWORD *)(this + 272) = v62;
  return this;
}

uint64_t FstSearchLeafLatticeDurationBackoff::collectTraces(FstSearchLeafLatticeDurationBackoff *this)
{
  uint64_t v2 = *((unsigned int *)this + 42);
  unsigned int v66 = 0;
  uint64_t v65 = 0;
  if (v2)
  {
    unsigned int v3 = MemChunkAlloc(4 * v2, 0);
    unint64_t v4 = 0;
    uint64_t v65 = v3;
    unsigned int v66 = v2;
    do
      *((_DWORD *)v3 + v4++) = 0;
    while (v4 < v66);
  }
  unint64_t v5 = *((unsigned int *)this + 68);
  if (v5)
  {
    unint64_t v6 = 0;
    unsigned int v7 = v65;
    uint64_t v8 = (unsigned int *)(*((void *)this + 33) + 8);
    do
    {
      unsigned int v10 = *v8;
      v8 += 10;
      uint64_t v9 = v10;
      if (v10 != -1)
      {
        *((_DWORD *)v7 + v9) = 1;
        unint64_t v5 = *((unsigned int *)this + 68);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  LODWORD(v11) = *((_DWORD *)this + 42);
  if (!v11)
  {
    uint64_t v63 = 0;
    uint64_t v64 = 0;
LABEL_54:
    unsigned int v25 = 0;
    *((_DWORD *)this + 42) = 0;
    goto LABEL_55;
  }
  char v12 = 0;
  uint64_t v13 = (uint64_t *)((char *)this + 160);
  uint64_t v14 = v65;
  int v15 = (uint64_t *)((char *)this + 176);
  do
  {
    uint64_t v11 = (v11 - 1);
    if (v12)
    {
      char v12 = 1;
    }
    else if (*(_DWORD *)(*v13 + 16 * v11) == 16777213)
    {
      char v12 = 1;
      *((_DWORD *)v14 + v11) = 1;
    }
    else
    {
      char v12 = 0;
    }
    if (*((_DWORD *)v14 + v11))
    {
      uint64_t v16 = *v13 + 16 * v11;
      int v17 = *(_DWORD *)(v16 + 12);
      if (v17 >= 1)
      {
        unsigned int v18 = *(_DWORD *)(v16 + 8);
        int v19 = v17 + v18;
        uint64_t v20 = *v15;
        do
        {
          uint64_t v21 = *(unsigned int *)(v20 + 28 * v18 + 12);
          if (v21 != -1) {
            *((_DWORD *)v14 + v21) = 1;
          }
          ++v18;
        }
        while ((int)v18 < v19);
      }
    }
  }
  while (v11);
  unsigned int v22 = *((_DWORD *)this + 42);
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  if (!v22) {
    goto LABEL_54;
  }
  unint64_t v23 = 0;
  unsigned int v24 = 0;
  unsigned int v25 = 0;
  do
  {
    if (*((_DWORD *)v65 + v23))
    {
      uint64_t v26 = *v13;
      unsigned int v62 = v24;
      if (v23 != v24)
      {
        *(_OWORD *)(v26 + 16 * v24) = *(_OWORD *)(v26 + 16 * v23);
        uint64_t v26 = *v13;
      }
      *(_DWORD *)(v26 + 16 * v24 + 8) = v25;
      uint64_t v27 = v26 + 16 * v23;
      uint64_t v28 = *(unsigned int *)(v27 + 8);
      uint64_t v29 = (*(_DWORD *)(v27 + 12) + v28);
      if (v28 < v29)
      {
        uint64_t v30 = *v15;
        do
        {
          unsigned int v31 = v25;
          if (v28 != v25)
          {
            __int16 v32 = (long long *)(v30 + 28 * v28);
            int v33 = (_OWORD *)(v30 + 28 * v25);
            long long v34 = *v32;
            *(_OWORD *)((char *)v33 + 12) = *(long long *)((char *)v32 + 12);
            *int v33 = v34;
            uint64_t v30 = *v15;
          }
          uint64_t v35 = v30 + 28 * v25;
          unsigned int v38 = *(_DWORD *)(v35 + 12);
          int v36 = (_DWORD *)(v35 + 12);
          uint64_t v37 = v38;
          if (v38 != -1) {
            *int v36 = *((_DWORD *)v65 + v37);
          }
          int v39 = v64;
          if (*(_WORD *)(v30 + 28 * v31 + 20))
          {
            unsigned int v40 = 0;
            unsigned int v41 = v64;
            do
            {
              __int16 v42 = *(_WORD *)(*((void *)this + 27) + 2 * (v40 + *(_DWORD *)(v30 + 28 * v31 + 16)));
              if (v41 == HIDWORD(v64))
              {
                DgnPrimArray<short>::reallocElts((uint64_t)&v63, 1, 1);
                unsigned int v41 = v64;
                uint64_t v30 = *v15;
              }
              *(_WORD *)(v63 + 2 * v41++) = v42;
              LODWORD(vDgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 64) = v41;
              ++v40;
            }
            while (v40 < *(unsigned __int16 *)(v30 + 28 * v31 + 20));
          }
          *(_DWORD *)(v30 + 28 * v31 + 16) = v39;
          unsigned int v25 = v31 + 1;
          ++v28;
        }
        while (v28 != v29);
      }
      *((_DWORD *)v65 + v23) = v62;
      unsigned int v24 = v62 + 1;
      unsigned int v22 = *((_DWORD *)this + 42);
      uint64_t v13 = (uint64_t *)((char *)this + 160);
    }
    ++v23;
  }
  while (v23 < v22);
  unsigned int v43 = *((_DWORD *)this + 43);
  if (v24 > v43)
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v13, v24 - v43, 0);
    unsigned int v22 = *((_DWORD *)this + 42);
  }
  if (v22 < v24)
  {
    unint64_t v44 = v24 - (unint64_t)v22;
    uint64_t v45 = (_OWORD *)(*v13 + 16 * v22);
    do
    {
      *v45++ = xmmword_2140992B0;
      --v44;
    }
    while (v44);
  }
  *((_DWORD *)this + 42) = v24;
  unsigned int v46 = *((_DWORD *)this + 47);
  if (v25 > v46) {
    DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)this + 176, v25 - v46, 0);
  }
  uint64_t v47 = *((unsigned int *)this + 46);
  if (v47 < v25)
  {
    uint64_t v48 = v25 - v47;
    __int16 v49 = (_DWORD *)(*v15 + 28 * v47 + 24);
    do
    {
      *(_OWORD *)(v49 - 6) = xmmword_2140992A0;
      *(v49 - 2) = 0;
      *((_WORD *)v49 - 2) = 0;
      *__int16 v49 = 0;
      v49 += 7;
      --v48;
    }
    while (v48);
  }
LABEL_55:
  *((_DWORD *)this + 46) = v25;
  unint64_t v50 = *((unsigned int *)this + 68);
  if (v50)
  {
    unint64_t v51 = 0;
    uint64_t v52 = v64;
    uint64_t v53 = *((void *)this + 33);
    do
    {
      if (*(_WORD *)(v53 + 40 * v51 + 28))
      {
        unsigned int v54 = 0;
        LODWORD(v55) = v52;
        do
        {
          __int16 v56 = *(_WORD *)(*((void *)this + 27) + 2 * (v54 + *(_DWORD *)(v53 + 40 * v51 + 24)));
          if (v55 == HIDWORD(v64))
          {
            DgnPrimArray<short>::reallocElts((uint64_t)&v63, 1, 1);
            LODWORD(v55) = v64;
            uint64_t v53 = *((void *)this + 33);
          }
          *(_WORD *)(v63 + 2 * v55) = v56;
          uint64_t v55 = (v55 + 1);
          LODWORD(vDgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 64) = v55;
          ++v54;
        }
        while (v54 < *(unsigned __int16 *)(v53 + 40 * v51 + 28));
        unint64_t v50 = *((unsigned int *)this + 68);
      }
      else
      {
        uint64_t v55 = v52;
      }
      *(_DWORD *)(v53 + 40 * v51++ + 24) = v52;
      uint64_t v52 = v55;
    }
    while (v51 < v50);
  }
  else
  {
    LODWORD(v55) = v64;
  }
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 216, &v63, 0, v55);
  uint64_t v57 = *((unsigned int *)this + 68);
  if (v57)
  {
    int v58 = v65;
    __int16 v59 = (_DWORD *)(*((void *)this + 33) + 8);
    do
    {
      uint64_t v60 = *v59;
      if (v60 != -1) {
        *__int16 v59 = *((_DWORD *)v58 + v60);
      }
      v59 += 10;
      --v57;
    }
    while (v57);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v63);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v65);
}

void sub_213E476E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va1);
  _Unwind_Resume(a1);
}

int64x2_t FstSearchLeafLatticeDurationBackoff::vite(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  FstSearchLeafLatticeDurationBackoff::advanceDeltas((FstSearchLeafLatticeDurationBackoff *)this, a2, a3, a4, a5);
  int64x2_t v13 = 0u;
  int64x2_t v14 = 0u;
  SnapTime::recordTime((SnapTime *)&v13, 1, 0, 0, 0);
  if (a2 >= 1)
  {
    unsigned int v7 = *((_DWORD *)this + 18);
    if (v7)
    {
      if (!(a2 % v7)) {
        FstSearchLeafLatticeDurationBackoff::collectTraces((FstSearchLeafLatticeDurationBackoff *)this);
      }
    }
  }
  int64x2_t v11 = 0u;
  int64x2_t v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  uint64_t v8 = this[13];
  int64x2_t result = vaddq_s64(v8[14], vsubq_s64(v11, v13));
  int64x2_t v10 = vaddq_s64(v8[15], vsubq_s64(v12, v14));
  v8[14] = result;
  v8[15] = v10;
  return result;
}

_DWORD *FstSearchLeafLatticeDurationBackoff::reset(_DWORD *this)
{
  this[42] = 0;
  this[46] = 0;
  this[56] = 0;
  this[68] = 0;
  return this;
}

double FstSearchLeafLatticeDurationBackoff::doFrame(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  if (a3 >= 20000) {
    a3 = 20000;
  }
  *(void *)&double result = FstSearchLeafLatticeDurationBackoff::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearchLeafLatticeDurationBackoff::beginTopRecPassSyncRecog(FstSearchLeafLatticeDurationBackoff *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 312, a3, *((PelScoreCache **)this + 4));
    uint64_t result = ArcGraph::findBackoffState(*((void *)this + 5));
    *((_DWORD *)this + 106) = result;
    *((unsigned char *)this + 428) = 1;
  }
  return result;
}

uint64_t FstSearchLeafLatticeDurationBackoff::endTopRecPassSyncRecog(FstSearchLeafLatticeDurationBackoff *this)
{
  int64x2_t v10 = 0u;
  int64x2_t v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  int64x2_t v8 = 0u;
  int64x2_t v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  int64x2_t v2 = vsubq_s64(v8, v10);
  unsigned int v3 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v4 = v3[13];
  int64x2_t v5 = vaddq_s64(v3[12], v2);
  int64x2_t v8 = v2;
  int64x2_t v9 = vsubq_s64(v9, v11);
  int64x2_t v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + 76) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

void FstSearchLeafLatticeDurationBackoff::printSize(FstSearchLeafLatticeDurationBackoff *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v125);
  if (v126) {
    int v15 = v125;
  }
  else {
    int v15 = &unk_214099300;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v11, v12, v13, v14, a3, &unk_214099300, a3, &unk_214099300, v15);
  DgnString::~DgnString((DgnString *)&v125);
  if (a2 != -1) {
    xlprintf("%d ", v16, v17, v18, v19, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v16, v17, v18, v19, a3, &unk_214099300);
  uint64_t v20 = (a3 + 1);
  uint64_t v21 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v125);
  if (v126) {
    uint64_t v26 = v125;
  }
  else {
    uint64_t v26 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v22, v23, v24, v25, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v26, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v125);
  if (v126) {
    unsigned int v31 = v125;
  }
  else {
    unsigned int v31 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v27, v28, v29, v30, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v31, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v125);
  if (v126) {
    int v36 = v125;
  }
  else {
    int v36 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v32, v33, v34, v35, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v36, 4, 4, 0);
  uint64_t v121 = a2;
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v125);
  if (v126) {
    unsigned int v41 = v125;
  }
  else {
    unsigned int v41 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v37, v38, v39, v40, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v41, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  uint64_t v42 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v42 = 16;
  }
  uint64_t v43 = *((unsigned int *)this + 42);
  uint64_t v44 = 16 * v43;
  if ((int)v43 <= 0) {
    uint64_t v44 = 0;
  }
  uint64_t v45 = v44 + v42;
  uint64_t v46 = v44 + v42 + 16 * (*((_DWORD *)this + 43) - v43);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v125);
  if (v126) {
    unint64_t v51 = v125;
  }
  else {
    unint64_t v51 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v47, v48, v49, v50, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v51, v46, v45, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v46;
  *a5 += v45;
  uint64_t v52 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v52 = 16;
  }
  int v53 = *((_DWORD *)this + 46);
  uint64_t v54 = 26 * v53;
  if (v53 <= 0) {
    uint64_t v54 = 0;
  }
  uint64_t v55 = v54 + v52;
  uint64_t v56 = v54 + v52 + 26 * (*((_DWORD *)this + 47) - v53);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v125);
  if (v126) {
    uint64_t v61 = v125;
  }
  else {
    uint64_t v61 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v57, v58, v59, v60, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v61, v56, v55, 0);
  uint64_t v120 = a3;
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v56;
  *a5 += v55;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v62 = 12;
  }
  else {
    uint64_t v62 = 16;
  }
  uint64_t v63 = *((unsigned int *)this + 56);
  unsigned int v64 = *((_DWORD *)this + 57);
  if (v64 >= v63)
  {
    uint64_t v65 = 0;
    if ((int)v63 > 0) {
      uint64_t v62 = (v62 | 2) + 2 * (v63 - 1);
    }
    uint64_t v66 = v62 + 2 * (v64 - v63);
  }
  else
  {
    uint64_t v65 = 2 * v63;
    uint64_t v66 = v62;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2961, (DgnString *)&v125);
  if (v126) {
    uint64_t v71 = v125;
  }
  else {
    uint64_t v71 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v67, v68, v69, v70, v20, &unk_214099300, v21, v21, v71, v66, v62, v65);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v66;
  *a5 += v62;
  *a6 += v65;
  uint64_t v72 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v72 = 16;
  }
  uint64_t v73 = *((unsigned int *)this + 68);
  uint64_t v74 = 36 * v73;
  if ((int)v73 <= 0) {
    uint64_t v74 = 0;
  }
  uint64_t v75 = v74 + v72;
  uint64_t v76 = v74 + v72 + 36 * (*((_DWORD *)this + 69) - v73);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v125);
  if (v126) {
    int v81 = v125;
  }
  else {
    int v81 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v77, v78, v79, v80, v20, &unk_214099300, v21, v21, v81, v76, v75, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v76;
  *a5 += v75;
  uint64_t v82 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v82 = 16;
  }
  uint64_t v83 = *((unsigned int *)this + 72);
  uint64_t v84 = 36 * v83;
  if ((int)v83 <= 0) {
    uint64_t v84 = 0;
  }
  uint64_t v85 = v84 + v82;
  uint64_t v86 = v84 + v82 + 36 * (*((_DWORD *)this + 73) - v83);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v125);
  if (v126) {
    uint64_t v91 = v125;
  }
  else {
    uint64_t v91 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v87, v88, v89, v90, v20, &unk_214099300, v21, v21, v91, v86, v85, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v86;
  *a5 += v85;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v125);
  if (v126) {
    int v96 = v125;
  }
  else {
    int v96 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v92, v93, v94, v95, v20, &unk_214099300, v21, v21, v96, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v125);
  if (v126) {
    int v101 = v125;
  }
  else {
    int v101 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v97, v98, v99, v100, v20, &unk_214099300, v21, v21, v101, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v125);
  if (v126) {
    int64x2_t v106 = v125;
  }
  else {
    int64x2_t v106 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v102, v103, v104, v105, v20, &unk_214099300, v21, v21, v106, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  uint64_t v107 = sizeObject((uint64_t)this + 312, 0);
  uint64_t v108 = sizeObject((uint64_t)this + 312, 1);
  uint64_t v109 = sizeObject((uint64_t)this + 312, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v125);
  if (v126) {
    unsigned int v114 = v125;
  }
  else {
    unsigned int v114 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v110, v111, v112, v113, v20, &unk_214099300, v21, v21, v114, v107, v108, v109);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v107;
  *a5 += v108;
  *a6 += v109;
  unint64_t v123 = 0;
  unint64_t v124 = 0;
  SearchItf::printSize(this, v121, v20, &v124, &v123, &v123);
  *a4 += v124;
  *a5 += v123;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v125);
  if (v126) {
    unsigned int v119 = v125;
  }
  else {
    unsigned int v119 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v115, v116, v117, v118, v120, &unk_214099300, (35 - v120), (35 - v120), v119, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v125);
}

void sub_213E480E4(_Unwind_Exception *a1)
{
  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t FstSearchLeafLatticeDurationBackoff::getBestTrace(uint64_t a1, void *a2, void *a3, int a4)
{
  if (a4) {
    unint64_t v4 = 0;
  }
  else {
    unint64_t v4 = *(unsigned int *)(a1 + 152);
  }
  unint64_t v5 = *(unsigned int *)(a1 + 272);
  if (v4 >= v5) {
    goto LABEL_21;
  }
  uint64_t v6 = 40 * v4;
  int v7 = 1879048192;
  uint64_t v8 = 0xFFFFFFFFLL;
  do
  {
    uint64_t v9 = *(void *)(a1 + 264);
    if (!a4 || (uint64_t v10 = *(unsigned int *)(v9 + v6 + 8), v10 == -1))
    {
      if (*(_DWORD *)(*(void *)(a1 + 40) + 160) != *(_DWORD *)(v9 + v6 + 4)) {
        goto LABEL_19;
      }
      uint64_t v10 = *(unsigned int *)(v9 + v6 + 8);
    }
    if (a2) {
      *(unsigned char *)(*a2 + v10) = 1;
    }
    if (a3) {
      *(unsigned char *)(*a3 + v10) = 1;
    }
    int v11 = *(_DWORD *)(*(void *)(a1 + 176) + 28 * *(unsigned int *)(*(void *)(a1 + 160) + 16 * v10 + 8))
        + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(*(void *)(a1 + 160) + 16 * v10 + 4));
    if (v7 > v11) {
      uint64_t v8 = v10;
    }
    if (v7 >= v11) {
      int v7 = *(_DWORD *)(*(void *)(a1 + 176) + 28 * *(unsigned int *)(*(void *)(a1 + 160) + 16 * v10 + 8))
    }
         + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(*(void *)(a1 + 160) + 16 * v10 + 4));
    unint64_t v5 = *(unsigned int *)(a1 + 272);
LABEL_19:
    ++v4;
    v6 += 40;
  }
  while (v4 < v5);
  if (v8 == 0xFFFFFFFFLL)
  {
LABEL_21:
    uint64_t v12 = *(unsigned int *)(a1 + 168);
    uint64_t v8 = 0xFFFFFFFFLL;
    while (v12)
    {
      --v12;
      if ((a4 & 1) != 0 || *(_DWORD *)(*(void *)(a1 + 160) + 16 * v12) == 16777213)
      {
        if (a2) {
          *(unsigned char *)(*a2 + v12) = 1;
        }
        uint64_t v8 = v12;
        if (a3) {
          *(unsigned char *)(*a3 + v12) = 1;
        }
        return v8;
      }
    }
  }
  return v8;
}

BOOL FstSearchLeafLatticeDurationBackoff::findBestPath(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8 = *(unsigned int *)(a1 + 168);
  if (v8) {
    BOOL v9 = *(_DWORD *)(a3 + 8) == 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    *(void *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v8;
  }
  if (v8) {
    BOOL v10 = *(_DWORD *)(a2 + 8) == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    *(void *)a2 = MemChunkAlloc(v8, 0);
    *(_DWORD *)(a2 + 8) = v8;
LABEL_14:
    uint64_t v11 = 0;
    do
    {
      *(unsigned char *)(*(void *)a2 + v11) = 0;
      *(unsigned char *)(*(void *)a3 + v11++) = 0;
    }
    while (v8 != v11);
    goto LABEL_16;
  }
  if (v8) {
    goto LABEL_14;
  }
LABEL_16:
  unsigned int BestTrace = FstSearchLeafLatticeDurationBackoff::getBestTrace(a1, (void *)a2, (void *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1) {
    return 0;
  }
  uint64_t v13 = *(void *)(a1 + 160) + 16 * BestTrace;
  LODWORD(v13) = *(_DWORD *)(*(void *)(a1 + 176) + 28 * *(unsigned int *)(v13 + 8))
               + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v13 + 4));
  *a4 = v13;
  return v13 != 1879048192;
}

unint64_t FstSearchLeafLatticeDurationBackoff::createLatticeNodes(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7)
{
  unint64_t v8 = a2;
  uint64_t v9 = a1;
  uint64_t v10 = *(unsigned int *)(a1 + 168);
  if (v10) {
    BOOL v11 = *((_DWORD *)a2 + 2) == 0;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    *a2 = MemChunkAlloc(4 * v10, 0);
    *((_DWORD *)v8 + 2) = v10;
  }
  unint64_t result = Lattice<WordLatticeLC>::createNode(a4);
  int v13 = result;
  unsigned int v14 = *(_DWORD *)(a3 + 8);
  if (v14 == *(_DWORD *)(a3 + 12))
  {
    unint64_t result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
    unsigned int v14 = *(_DWORD *)(a3 + 8);
  }
  *(_DWORD *)(*(void *)a3 + 4 * v14) = v13;
  ++*(_DWORD *)(a3 + 8);
  unsigned int v15 = *(_DWORD *)(v9 + 168);
  uint64_t v17 = a6;
  uint64_t v16 = a7;
  if (v15)
  {
    unint64_t result = 2;
    int v18 = -1;
    uint64_t v47 = v8;
    uint64_t v48 = a3;
    uint64_t v50 = v9;
    do
    {
      --v15;
      uint64_t v19 = *v8;
      *((_DWORD *)*v8 + v15) = -1;
      if (*(unsigned char *)(*v17 + v15))
      {
        uint64_t v20 = v15;
        uint64_t v21 = *(void *)(v9 + 160);
        uint64_t v22 = *(unsigned int *)(*(void *)(v9 + 88) + 4 * *(unsigned int *)(v21 + 16 * v15 + 4));
        if (*(unsigned char *)(*v16 + v15))
        {
          if (*(unsigned char *)(*v17 + v15) != 1 || v18 == -1)
          {
            int Node = Lattice<WordLatticeLC>::createNode(a4);
            *((_DWORD *)*v8 + v15) = *(_DWORD *)(a3 + 8);
            uint64_t v25 = *(unsigned int *)(a3 + 8);
            if (v25 == *(_DWORD *)(a3 + 12))
            {
              DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
              uint64_t v25 = *(unsigned int *)(a3 + 8);
            }
            *(_DWORD *)(*(void *)a3 + 4 * v25) = Node;
            int v26 = *(_DWORD *)(a3 + 8);
            *(_DWORD *)(a3 + 8) = v26 + 1;
            uint64_t v17 = a6;
            uint64_t v16 = a7;
            if (*(unsigned char *)(*a6 + v15) == 1) {
              int v18 = v26;
            }
            uint64_t v21 = *(void *)(v9 + 160);
            unint64_t result = 2;
          }
          else
          {
            *((_DWORD *)v19 + v15) = v18;
          }
        }
        uint64_t v27 = (unsigned int *)(v21 + 16 * v15);
        if ((int)v27[3] >= 1)
        {
          int v49 = v18;
          uint64_t v28 = *v27;
          unsigned int v29 = v27[2];
          do
          {
            uint64_t v30 = *(void *)(v9 + 176);
            unsigned int v31 = v29;
            uint64_t v32 = (_DWORD *)(v30 + 28 * v29);
            uint64_t v33 = v32[3];
            if ((v32[3] & 0x80000000) != 0)
            {
              *v32 += v22;
            }
            else
            {
              if (v28 == 16777209)
              {
                uint64_t v34 = *a5 + 16 * v33;
                int v36 = (_DWORD *)(v34 + 8);
                uint64_t v35 = *(unsigned int *)(v34 + 8);
                uint64_t v37 = *(void *)(v9 + 176);
                if (v35 == *(_DWORD *)(v34 + 12))
                {
                  uint64_t v38 = v20;
                  uint64_t v39 = v22;
                  uint64_t v40 = v28;
                  DgnPrimArray<unsigned int>::reallocElts(v34, 1, 1);
                  uint64_t v28 = v40;
                  uint64_t v22 = v39;
                  uint64_t v20 = v38;
                  uint64_t v9 = v50;
                  uint64_t v17 = a6;
                  unint64_t result = 2;
                  uint64_t v16 = a7;
                  uint64_t v35 = *v36;
                  uint64_t v21 = *(void *)(v50 + 160);
                  uint64_t v37 = *(void *)(v50 + 176);
                }
                *(_DWORD *)(*(void *)v34 + 4 * v35) = v15;
                ++*v36;
                uint64_t v33 = v32[3];
              }
              else
              {
                *(unsigned char *)(*v16 + v33) = 1;
                uint64_t v37 = v30;
              }
              uint64_t v41 = v21 + 16 * v33;
              int v42 = *(_DWORD *)(*(void *)(v9 + 88) + 4 * *(unsigned int *)(v41 + 4));
              uint64_t v43 = (int *)(v37 + 28 * *(unsigned int *)(v41 + 8));
              int v44 = v22 + *v32 - v42;
              int v45 = *v43;
              LODWORD(v43) = v43[1];
              *uint64_t v32 = v44 - v45;
              *(_DWORD *)(v30 + 28 * v31 + 4) -= v43;
              *(unsigned char *)(*v17 + v33) = 2;
              uint64_t v21 = *(void *)(v9 + 160);
            }
            unsigned int v29 = v31 + 1;
          }
          while ((int)(v31 + 1) < *(_DWORD *)(v21 + 16 * v20 + 12) + *(_DWORD *)(v21 + 16 * v20 + 8));
          unint64_t v8 = v47;
          a3 = v48;
          int v18 = v49;
        }
      }
    }
    while (v15);
  }
  return result;
}

uint64_t FstSearchLeafLatticeDurationBackoff::buildWordLattice(uint64_t a1, uint64_t *a2, void *a3, void *a4, unsigned __int8 a5)
{
  uint64_t v28 = 0;
  unsigned int v29 = 0;
  int v30 = 0;
  uint64_t v27 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v26, *(unsigned int *)(a1 + 168));
  unint64_t v8 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v8, 0, 128);
  v8[4] = (uint64_t)a2;
  FstSearchLeafLatticeDurationBackoff::createLatticeNodes(a1, &v29, (uint64_t)&v27, (uint64_t)a2, v26, a3, a4);
  uint64_t v22 = *(unsigned int *)(a1 + 168);
  if (v22)
  {
    uint64_t v9 = 0;
    int v10 = v28;
    do
    {
      if (*(unsigned char *)(*a3 + v9))
      {
        uint64_t v11 = *(void *)(a1 + 160);
        if (*(_DWORD *)(v11 + 16 * v9) != 16777209)
        {
          uint64_t v12 = v11 + 16 * v9;
          if (*(int *)(v12 + 12) >= 1)
          {
            unsigned int v13 = *(_DWORD *)(v12 + 8);
            do
            {
              uint64_t v14 = *(void *)(a1 + 176) + 28 * v13;
              uint64_t v15 = *(unsigned int *)(v14 + 12);
              unsigned int v25 = v13;
              if (v15 == -1) {
                unsigned int v16 = 0;
              }
              else {
                unsigned int v16 = v10 - *((_DWORD *)v29 + v15);
              }
              uint64_t v17 = *(unsigned int *)(v27 + 4 * v16);
              if (*(unsigned char *)(*a4 + v9)) {
                FstSearchLeafLatticeDurationBackoff::createLatticeLink((ArcGraph **)a1, v9, (int *)v14, 0xFFFFFFFFLL, v17, *(unsigned int *)(v27 + 4 * (v10 - *((_DWORD *)v29 + v9))), a2, (uint64_t)v8, a5);
              }
              uint64_t v18 = v26[0];
              if (*(_DWORD *)(v26[0] + 16 * v9 + 8))
              {
                unint64_t v19 = 0;
                do
                {
                  uint64_t v20 = *(unsigned int *)(*(void *)(v18 + 16 * v9) + 4 * v19);
                  FstSearchLeafLatticeDurationBackoff::createLatticeLink((ArcGraph **)a1, v9, (int *)v14, v20, v17, *(unsigned int *)(v27 + 4 * (v10 - *((_DWORD *)v29 + v20))), a2, (uint64_t)v8, a5);
                  ++v19;
                  uint64_t v18 = v26[0];
                }
                while (v19 < *(unsigned int *)(v26[0] + 16 * v9 + 8));
              }
              unsigned int v13 = v25 + 1;
            }
            while ((int)(v25 + 1) < *(_DWORD *)(*(void *)(a1 + 160) + 16 * v9 + 12)
                                   + *(_DWORD *)(*(void *)(a1 + 160) + 16 * v9 + 8));
          }
        }
      }
      ++v9;
    }
    while (v9 != v22);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>((uint64_t)v8);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v26);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v27);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v29);
}

void sub_213E488B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearchLeafLatticeDurationBackoff::createLatticeLink(ArcGraph **this, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, unsigned __int8 a9)
{
  unsigned int v33 = a6;
  unsigned int v11 = a5;
  unsigned int v12 = a4;
  if ((a4 & 0x80000000) != 0) {
    SilenceToken = 0;
  }
  else {
    SilenceToken = (_DWORD *)FstSearchLeafLatticeDurationBackoff::getSilenceToken((FstSearchLeafLatticeDurationBackoff *)this, a4, a2);
  }
  ArcGraph::lexToCWIDAC(this[5], *((_DWORD *)this[20] + 4 * a2), (uint64_t)a3, a4, a5, a6, (uint64_t)a7, a8, (uint64_t)v43);
  int v17 = a3[1];
  if (SilenceToken)
  {
    v17 += SilenceToken[1];
    int v18 = *SilenceToken + *a3;
  }
  else
  {
    int v18 = *a3;
  }
  if (v43[0] >> 25 == 126)
  {
    int v19 = 0;
    int v20 = v17;
    if ((v12 & 0x80000000) != 0)
    {
LABEL_9:
      int v21 = 0;
      goto LABEL_12;
    }
  }
  else
  {
    int v19 = *((_DWORD *)this + 34);
    int v20 = v17 - v19;
    if ((v12 & 0x80000000) != 0) {
      goto LABEL_9;
    }
  }
  int v21 = *((_DWORD *)this + 35);
  v20 -= v21;
LABEL_12:
  int v22 = a3[6];
  if (SilenceToken) {
    v22 += SilenceToken[6];
  }
  int v37 = v20;
  uint64_t v38 = 0;
  int v39 = v19;
  int v40 = v18 - v17 - v22;
  int v41 = v22;
  int v42 = v21;
  uint64_t v23 = a3[3];
  uint64_t v24 = this[20];
  if (v23 == -1)
  {
    int v26 = 0;
    if (a9) {
      goto LABEL_20;
    }
  }
  else
  {
    int v25 = *((_DWORD *)v24 + 4 * v23 + 1);
    if (a9)
    {
      if (v25 >= 1) {
        --v25;
      }
      int v26 = (v25 >> 1) + 1;
LABEL_20:
      int v27 = *((_DWORD *)v24 + 4 * a2 + 1);
      if (v27 >= 1) {
        --v27;
      }
      int v28 = (v27 >> 1) + 1;
      int v29 = v28 - v26;
      if ((v12 & 0x80000000) == 0)
      {
        int v30 = *((_DWORD *)v24 + 4 * v12 + 1);
        if (v30 >= 1) {
          --v30;
        }
        int v31 = v30 >> 1;
        goto LABEL_29;
      }
      goto LABEL_30;
    }
    int v26 = v25 + 1;
  }
  int v28 = *((_DWORD *)v24 + 4 * a2 + 1) + 1;
  int v29 = v28 - v26;
  if ((v12 & 0x80000000) == 0)
  {
    int v31 = *((_DWORD *)v24 + 4 * v12 + 1);
LABEL_29:
    int v32 = v31 - v28 + 1;
    goto LABEL_31;
  }
LABEL_30:
  int v32 = 0;
LABEL_31:
  WordLatticeLC::WordLatticeLC((uint64_t)v35, (uint64_t)v43, v26, v29, v32, (uint64_t)&v37);
  v34[0] = 0;
  v34[1] = 0;
  FstSearchLeafLatticeDurationBackoff::buildLinkSegmentation((unint64_t)this, (uint64_t)v34, (uint64_t)a3, v26, a9);
  if (SilenceToken) {
    FstSearchLeafLatticeDurationBackoff::buildLinkSegmentation((unint64_t)this, (uint64_t)v34, (uint64_t)SilenceToken, v28, a9);
  }
  unint64_t v36 = WordLattice::findOrAddLinkSegSeqId((uint64_t)a7, (uint64_t)v34, a8);
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v11, (const WordLatticeLC *)v33, (WordLatticeLC *)v35);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v34);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v35);
}

void sub_213E48B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va1);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLeafLatticeDurationBackoff::getSilenceToken(FstSearchLeafLatticeDurationBackoff *this, unsigned int a2, int a3)
{
  uint64_t v3 = *((void *)this + 20) + 16 * a2;
  int v4 = *(_DWORD *)(v3 + 12);
  if (v4 < 1) {
    return 0;
  }
  unsigned int v5 = *(_DWORD *)(v3 + 8);
  int v6 = v4 + v5;
  uint64_t v7 = *((void *)this + 22);
  do
  {
    if (*(_DWORD *)(v7 + 28 * v5 + 12) == a3) {
      uint64_t result = v7 + 28 * v5;
    }
    else {
      uint64_t result = 0;
    }
    ++v5;
  }
  while ((int)v5 < v6 && !result);
  return result;
}

unint64_t FstSearchLeafLatticeDurationBackoff::buildLinkSegmentation(unint64_t result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  if (a5) {
    int v5 = 2;
  }
  else {
    int v5 = 1;
  }
  unsigned int v6 = *(unsigned __int16 *)(a3 + 20);
  if (*(_WORD *)(a3 + 20))
  {
    unint64_t v10 = result;
    unsigned int v11 = 0;
    int v12 = 0;
    __int16 v13 = *(_WORD *)(*(void *)(result + 56) + 136);
    unsigned __int16 v14 = -1;
    do
    {
      int v15 = *(unsigned __int16 *)(*(void *)(v10 + 216) + 2 * (v11 + *(_DWORD *)(a3 + 16)));
      if (v15 != v14)
      {
        if (v12)
        {
          uint64_t result = FstSearchLeafLatticeDurationBackoff::addLinkSegment(v10, a2, v14, a4, v12, v13);
          a4 += v12;
          unsigned int v6 = *(unsigned __int16 *)(a3 + 20);
          unsigned __int16 v14 = v15;
          int v12 = 0;
        }
        else
        {
          unsigned __int16 v14 = *(_WORD *)(*(void *)(v10 + 216) + 2 * (v11 + *(_DWORD *)(a3 + 16)));
        }
      }
      ++v12;
      v11 += v5;
    }
    while (v11 < v6);
    if (v12)
    {
      return FstSearchLeafLatticeDurationBackoff::addLinkSegment(v10, a2, v14, a4, v12, v13);
    }
  }
  return result;
}

unint64_t FstSearchLeafLatticeDurationBackoff::addLinkSegment(unint64_t result, uint64_t a2, unsigned int a3, int a4, int a5, __int16 a6)
{
  unint64_t v11 = result;
  unsigned int v12 = *(_DWORD *)(a2 + 8);
  if (v12 == *(_DWORD *)(a2 + 12))
  {
    uint64_t result = DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(a2, 1, 1);
    unsigned int v12 = *(_DWORD *)(a2 + 8);
  }
  uint64_t v13 = *(void *)a2 + 28 * v12;
  *(void *)uint64_t v13 = -1;
  *(_DWORD *)(v13 + 8) = 0xFFFF;
  *(_DWORD *)(v13 + 20) = -16;
  LODWORD(v13) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = v13 + 1;
  uint64_t v14 = *(void *)a2 + 28 * v13;
  *(_WORD *)(v14 + 16) = a3;
  *(_DWORD *)(v14 + 20) = a4;
  *(_DWORD *)(v14 + 24) = a5;
  *(_DWORD *)(v14 + 12) = *(_DWORD *)(*(void *)(v11 + 232) + 4 * a3);
  __int16 v15 = *(_WORD *)(*(void *)(v11 + 248) + 2 * a3);
  *(_WORD *)uint64_t v14 = a6;
  *(_WORD *)(v14 + 2) = a6;
  *(_WORD *)(v14 + 4) = v15;
  *(_WORD *)(v14 + 6) = a6;
  *(_WORD *)(v14 + 8) = a6;
  *(_WORD *)(v14 + 10) = 0;
  return result;
}

uint64_t FstSearchLeafLatticeDurationBackoff::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(void *)(this + 112) = a2;
  if (*(unsigned char *)(this + 428)) {
    return MiniFst::beginTopFstSyncRecog(this + 312);
  }
  return this;
}

uint64_t FstSearchLeafLatticeDurationBackoff::endTopRecSyncRecog(FstSearchLeafLatticeDurationBackoff *this)
{
  uint64_t v1 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  return v1;
}

uint64_t FstSearchLeafLatticeDurationBackoff::getBestExitScore(FstSearchLeafLatticeDurationBackoff *this)
{
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  *((_DWORD *)this + 75) = -1;
  unint64_t v1 = *((unsigned int *)this + 38);
  unint64_t v2 = *((unsigned int *)this + 68);
  if (v1 >= v2) {
    goto LABEL_19;
  }
  uint64_t v4 = 0;
  unsigned int v5 = 0;
  uint64_t v6 = 40 * v1;
  do
  {
    uint64_t v7 = *((void *)this + 33) + v6;
    if (*(_DWORD *)(*((void *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      uint64_t v8 = *(unsigned int *)(v7 + 8);
      if (v8 != -1 && *(_DWORD *)(*((void *)this + 20) + 16 * v8 + 4) == *((_DWORD *)this + 74))
      {
        if (v5 == HIDWORD(v22))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v21, 1, 1);
          unsigned int v5 = v22;
          uint64_t v4 = v21;
        }
        *(_DWORD *)(v4 + 4 * v5) = v8;
        unsigned int v5 = v22 + 1;
        LODWORD(v22) = v22 + 1;
        unint64_t v2 = *((unsigned int *)this + 68);
      }
    }
    ++v1;
    v6 += 40;
  }
  while (v1 < v2);
  if (v5)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *((void *)this + 20);
    int v11 = 1879048192;
    do
    {
      uint64_t v12 = v10 + 16 * *(unsigned int *)(v4 + 4 * v9);
      int v13 = *(_DWORD *)(v12 + 12);
      if (v13 >= 1)
      {
        unsigned int v14 = *(_DWORD *)(v12 + 8);
        int v15 = v13 + v14;
        uint64_t v16 = *((void *)this + 22);
        do
        {
          unsigned int v17 = v14;
          int v18 = *(_DWORD *)(v16 + 28 * v14);
          if (v11 > v18)
          {
            *((_DWORD *)this + 75) = *(_DWORD *)(v16 + 28 * v17 + 12);
            int v11 = v18;
          }
          unsigned int v14 = v17 + 1;
        }
        while ((int)(v17 + 1) < v15);
      }
      ++v9;
    }
    while (v9 != v5);
  }
  else
  {
LABEL_19:
    int v11 = 1879048192;
  }
  if (v11 >= 20000) {
    uint64_t v19 = 20000;
  }
  else {
    uint64_t v19 = v11;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v21);
  return v19;
}

void sub_213E48F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t FstSearchLeafLatticeDurationBackoff::getBestScoreMaybeUpdateFstNode(FstSearchLeafLatticeDurationBackoff *this, Node *a2)
{
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v2 = *((unsigned int *)this + 68);
  if (v2)
  {
    uint64_t v3 = (int *)*((void *)this + 33);
    __int16 v4 = -1;
    int v5 = 1879048192;
    uint64_t v6 = v3;
    do
    {
      int v8 = *v6;
      v6 += 10;
      int v7 = v8;
      if (v5 > v8)
      {
        __int16 v4 = *((_WORD *)v3 + 6);
        int v5 = v7;
      }
      uint64_t v3 = v6;
      --v2;
    }
    while (v2);
    uint64_t v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000) {
        uint64_t v9 = 20000;
      }
      else {
        uint64_t v9 = v5;
      }
    }
  }
  else
  {
    uint64_t v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

uint64_t FstSearchLeafLatticeDurationBackoff::seedTheory(FstSearchLeafLatticeDurationBackoff *this, int a2, int a3, int a4, SearchStats *a5)
{
  if (a4 == -2)
  {
    int v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    unsigned int v11 = *((_DWORD *)this + 46);
    if (v11 == *((_DWORD *)this + 47))
    {
      DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)this + 176, 1, 1);
      unsigned int v11 = *((_DWORD *)this + 46);
    }
    uint64_t v12 = *((void *)this + 22) + 28 * v11;
    *(_OWORD *)(v12 + 4) = xmmword_2140992E0;
    *(_WORD *)(v12 + 20) = 0;
    *(_DWORD *)(v12 + 24) = 0;
    *((_DWORD *)this + 46) = v11 + 1;
    *(_DWORD *)uint64_t v12 = a2;
    unsigned int v13 = *((_DWORD *)this + 42);
    if (v13 == *((_DWORD *)this + 43))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 160, 1, 1);
      unsigned int v13 = *((_DWORD *)this + 42);
    }
    unsigned int v14 = (_DWORD *)(*((void *)this + 20) + 16 * v13);
    *unsigned int v14 = a4;
    v14[1] = a3;
    v14[2] = v11;
    v14[3] = 1;
    int v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  int v15 = *(_DWORD *)(*((void *)this + 5) + 144);
  unsigned int v16 = *((_DWORD *)this + 68);
  if (v16 == *((_DWORD *)this + 69))
  {
    DgnArray<FstSearchLeafLatticeDurationBackoffActiveToken>::reallocElts((uint64_t)this + 264, 1, 1);
    unsigned int v16 = *((_DWORD *)this + 68);
  }
  uint64_t v17 = *((void *)this + 33) + 40 * v16;
  *(_DWORD *)uint64_t v17 = a2;
  *(_DWORD *)(v17 + 4) = v15;
  *(_DWORD *)(v17 + 8) = v9;
  *(_WORD *)(v17 + 12) = -2;
  *(void *)(v17 + 32) = 0;
  *(void *)(v17 + 16) = 0;
  *(void *)(v17 + 22) = 0;
  LODWORD(v17) = *((_DWORD *)this + 68) + 1;
  *((_DWORD *)this + 68) = v17;
  *((_DWORD *)this + 38) = v17;

  return FstSearchLeafLatticeDurationBackoff::propagateNulls((uint64_t)this, 20000, a3, a5);
}

uint64_t FstSearchLeafLatticeDurationBackoff::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(unsigned int *)(result + 300);
  if (v8 != -1)
  {
    int v9 = (void *)result;
    uint64_t v10 = (unsigned int *)(*(void *)(result + 160) + 16 * v8);
    for (i = *(unsigned int *)(*(void *)(result + 176) + 28 * v10[2] + 12); i != -1; uint64_t v8 = v16)
    {
      uint64_t v16 = i;
      uint64_t result = v9[5];
      if (*v10 == 16777209)
      {
        int v17 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        uint64_t result = ArcGraph::lexToCWID((ArcGraph *)result, *v10, a3, (uint64_t)a4, a5, a6, a7, a8);
        int v17 = result;
      }
      uint64_t v18 = *(unsigned int *)(a2 + 8);
      if (v18 == *(_DWORD *)(a2 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        uint64_t v18 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(void *)a2 + 4 * v18) = v17;
      ++*(_DWORD *)(a2 + 8);
      uint64_t v19 = *(unsigned int *)(a6 + 8);
      if (v19 == *(_DWORD *)(a6 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        uint64_t v19 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(void *)a6 + 4 * v19) = v8;
      ++*(_DWORD *)(a6 + 8);
      uint64_t v20 = v9[20];
      int v21 = *(_DWORD *)(v20 + 16 * v8 + 4);
      uint64_t v22 = *(unsigned int *)(a3 + 8);
      if (v22 == *(_DWORD *)(a3 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        uint64_t v22 = *(unsigned int *)(a3 + 8);
        uint64_t v20 = v9[20];
      }
      *(_DWORD *)(*(void *)a3 + 4 * v22) = v21;
      ++*(_DWORD *)(a3 + 8);
      int v23 = *(_DWORD *)(v9[22] + 28 * *(unsigned int *)(v20 + 16 * v8 + 8));
      uint64_t v24 = *(unsigned int *)(a5 + 8);
      if (v24 == *(_DWORD *)(a5 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        uint64_t v24 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(void *)a5 + 4 * v24) = v23;
      ++*(_DWORD *)(a5 + 8);
      uint64_t v10 = (unsigned int *)(v9[20] + 16 * v16);
      uint64_t i = *(unsigned int *)(v9[22] + 28 * v10[2] + 12);
    }
    *a4 = *v10;
  }
  return result;
}

void FstSearchLeafLatticeDurationBackoff::checkSearchParametersValidityForArcGraph(FstSearchLeafLatticeDurationBackoff *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *((void *)this + 5);
  if (*(unsigned char *)(v8 + 178))
  {
    int v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(unsigned char *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    }
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    }
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(void *)(**(void **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((void *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if (a2)
      {
        if (!*(unsigned char *)(v8 + 203)) {
          return;
        }
      }
      else if (*(unsigned char *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(unsigned char *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

void FstSearchLeafLatticeDurationBackoff::getHistory(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 == -1)
  {
    *(_DWORD *)(a3 + 8) = 0;
  }
  else
  {
    int v9 = a4;
    LODWORD(v11) = 0;
    uint64_t v12 = a2;
    uint64_t v13 = a2;
    do
    {
      unsigned int v14 = (_DWORD *)(*(void *)(a1 + 160) + 16 * v13);
      if (*v14 == 16777209) {
        uint64_t v11 = v11;
      }
      else {
        uint64_t v11 = (v11 + 1);
      }
      uint64_t v13 = *(unsigned int *)(*(void *)(a1 + 176) + 28 * v14[2] + 12);
    }
    while (v13 != -1);
    unsigned int v15 = *(_DWORD *)(a3 + 12);
    if (v11 > v15) {
      DgnArray<PrefilterResultFrame>::reallocElts(a3, v11 - v15, 0);
    }
    uint64_t v16 = *(unsigned int *)(a3 + 8);
    if (v16 < v11)
    {
      uint64_t v17 = v11 - v16;
      uint64_t v18 = *(void *)a3 + 32 * v16;
      do
      {
        *(void *)uint64_t v18 = 0x3FFFFAFFFFFFLL;
        *(_OWORD *)(v18 + 8) = xmmword_2140866D0;
        *(void *)(v18 + 24) = 0x1F0000001FLL;
        v18 += 32;
        --v17;
      }
      while (v17);
    }
    *(_DWORD *)(a3 + 8) = v11;
    if (v11)
    {
      uint64_t v19 = *(void *)(a1 + 160);
      int v20 = -16;
      do
      {
        int v21 = (unsigned int *)(v19 + 16 * v12);
        int v22 = v21[1];
        if (*v21 == 16777209)
        {
          if (v9)
          {
            int v23 = v22 - 1;
            if (v22 < 1) {
              int v23 = v22;
            }
            int v20 = (v23 >> 1) + 1;
          }
          else
          {
            int v20 = v22 + 1;
          }
        }
        else
        {
          if (v9)
          {
            int v24 = v22 - 1;
            if (v22 < 1) {
              int v24 = v21[1];
            }
            int v22 = v24 >> 1;
          }
          ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *v21, a3, a4, a5, a6, a7, a8, (uint64_t)v28);
          if (v20 == -16) {
            int v25 = v22 + 1;
          }
          else {
            int v25 = v20;
          }
          int v26 = v28[1];
          uint64_t v11 = (v11 - 1);
          uint64_t v27 = *(void *)a3 + 32 * v11;
          *(_DWORD *)uint64_t v27 = v28[0];
          *(_DWORD *)(v27 + 4) = v26;
          *(_OWORD *)(v27 + 8) = v29;
          *(_DWORD *)(v27 + 24) = v22 + 1;
          *(_DWORD *)(v27 + 28) = v25;
          uint64_t v19 = *(void *)(a1 + 160);
          int v20 = -16;
        }
        uint64_t v12 = *(unsigned int *)(*(void *)(a1 + 176) + 28 * *(unsigned int *)(v19 + 16 * v12 + 8) + 12);
      }
      while (v12 != -1);
    }
  }
}

uint64_t FstSearchLeafLatticeDurationBackoff::makePartialResult(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    uint64_t v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(void *)a2 + v9))(*(void *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  unsigned int BestTrace = FstSearchLeafLatticeDurationBackoff::getBestTrace((uint64_t)a1, 0, 0, 1);
  if (BestTrace == -1) {
    return 1879048192;
  }
  unsigned int v15 = BestTrace;
  FstSearchLeafLatticeDurationBackoff::getHistory((uint64_t)a1, BestTrace, a3, a4, v11, v12, v13, v14);
  memset(v25, 0, sizeof(v25));
  int v26 = 0;
  if (*(_DWORD *)(a3 + 8))
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    int v18 = 0;
    do
    {
      uint64_t v19 = *(void *)a3 + v16;
      int v20 = *(_DWORD *)(v19 + 28);
      WordLatticeLC::WordLatticeLC((uint64_t)v24, v19, v18, *(_DWORD *)(v19 + 24) - v18, v20 - *(_DWORD *)(v19 + 24), (uint64_t)v25);
      uint64_t v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(void *)a2 + 112 * v21), (const WordLatticeLC *)v24);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v24);
      ++v17;
      v16 += 32;
      int v18 = v20;
    }
    while (v17 < *(unsigned int *)(a3 + 8));
  }
  uint64_t v22 = a1[20] + 16 * v15;
  return (*(_DWORD *)(a1[22] + 28 * *(unsigned int *)(v22 + 8))
                      + *(_DWORD *)(a1[11] + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_213E49848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void FstSearchLeafLatticeDuration::FstSearchLeafLatticeDuration(FstSearchLeafLatticeDuration *this, const int *a2, const int *a3)
{
  SearchItf::SearchItf(this);
  *(void *)uint64_t v5 = &unk_26C4E4150;
  *(_DWORD *)(v5 + 136) = *a2;
  *(_DWORD *)(v5 + 140) = *a3;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 248) = 0u;
  *(_OWORD *)(v5 + 232) = 0u;
  *(_OWORD *)(v5 + 216) = 0u;
  *(_OWORD *)(v5 + 2DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 64) = 0u;
  *(_OWORD *)(v5 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = 0u;
  *(_DWORD *)(v5 + 296) = -1;
  *(_DWORD *)(v5 + 304) = 1879048192;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_OWORD *)(v5 + 376) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(unsigned char *)(v5 + 428) = 0;
}

unint64_t FstSearchLeafLatticeDuration::maybeGeneratePelMaps(FstSearchLeafLatticeDuration *this, const PicMgr *a2)
{
  return PicMgr::getPelPhoneMap((unint64_t)a2, (uint64_t)this + 248, (uint64_t)this + 232);
}

uint64_t FstSearchLeafLatticeDuration::maybeInitDurModel(FstSearchLeafLatticeDuration *this, const PicMgr *a2, int a3)
{
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  PicMgr::getPelDurIdMap((uint64_t)a2, (uint64_t)&v15);
  if (a3 == 1) {
    uint64_t v6 = 56;
  }
  else {
    uint64_t v6 = 72;
  }
  uint64_t v7 = v16;
  unsigned int v8 = *((_DWORD *)this + 51);
  if (v16 <= v8)
  {
    *((_DWORD *)this + 50) = v16;
    if (!v7) {
      goto LABEL_13;
    }
  }
  else
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 192, v16 - v8, 0);
    *((_DWORD *)this + 50) = v7;
  }
  uint64_t v9 = 0;
  uint64_t v10 = v15;
  uint64_t v11 = *((void *)this + 24);
  do
  {
    if (!(_WORD)v9 || (uint64_t v12 = *(unsigned __int16 *)(v10 + 2 * v9), v12 == 0xFFFF)) {
      __int16 v13 = 0;
    }
    else {
      __int16 v13 = *(_WORD *)(*(void *)((char *)a2 + v6) + 2 * v12);
    }
    *(_WORD *)(v11 + 2 * v9++) = v13;
  }
  while (v7 != v9);
LABEL_13:
  *((unsigned char *)this + 208) = *((unsigned char *)a2 + 8);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 3);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v15);
}

void sub_213E499F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int64x2_t FstSearchLeafLatticeDuration::advanceDeltas(FstSearchLeafLatticeDuration *this, int a2, int a3, SearchStats *a4, int a5)
{
  v156[0] = a2;
  int64x2_t v154 = 0u;
  int64x2_t v155 = 0u;
  SnapTime::recordTime((SnapTime *)&v154, 1, 0, 0, 0);
  uint64_t v116 = (int *)((char *)this + 304);
  *((_DWORD *)this + 76) = a3;
  int v8 = *((_DWORD *)this + 2);
  unsigned int v9 = *((_DWORD *)this + 68);
  if (v9)
  {
    unint64_t v123 = 0;
    unsigned int v10 = 0;
    int64x2_t v138 = (uint64_t *)((char *)this + 216);
    int v108 = *((_DWORD *)this + 53);
    int v109 = *((unsigned __int8 *)this + 208);
    uint64_t v115 = (char *)this + 280;
    uint64_t v111 = a4;
    int v117 = *((_DWORD *)this + 2);
    do
    {
      uint64_t v11 = *((void *)this + 33);
      uint64_t v124 = v10;
      uint64_t v12 = *(unsigned int *)(v11 + 40 * v10 + 4);
      unsigned int v110 = v10;
      if (v9 <= v10 + 1) {
        unsigned int v13 = v10 + 1;
      }
      else {
        unsigned int v13 = v9;
      }
      while (v13 - 1 != v10)
      {
        if (*(_DWORD *)(v11 + 40 * ++v10 + 4) != v12) {
          goto LABEL_10;
        }
      }
      unsigned int v10 = v13;
LABEL_10:
      uint64_t v14 = *((void *)this + 5);
      if (*(_DWORD *)(v14 + 160) != v12)
      {
        BOOL v15 = *(_DWORD *)(v14 + 140) <= (int)v12 || v110 >= v10;
        unsigned int v113 = v10;
        uint64_t v112 = v12;
        if (!v15)
        {
          uint64_t v16 = v10;
          uint64_t v17 = v124;
          uint64_t v128 = v10;
          do
          {
            uint64_t v18 = *((void *)this + 33) + 40 * v17;
            int v19 = *(_DWORD *)v18;
            int v20 = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(v18 + 12)) + v19;
            uint64_t v21 = *((void *)this + 33) + 40 * v17;
            __int16 v22 = *(_WORD *)(v21 + 12);
            int v23 = *(_DWORD *)(v21 + 32);
            int v24 = *(_DWORD *)(v21 + 36);
            int v25 = v109;
            int v26 = v23 - v109;
            if (v23 >= 1) {
              int v25 = v109 - v23;
            }
            int v27 = v25 & (v26 >> 31);
            if (*(_WORD *)(v21 + 12)) {
              v24 += v27;
            }
            else {
              int v26 = *(_DWORD *)(v21 + 32);
            }
            if (*(_WORD *)(v21 + 12)) {
              int v28 = v27;
            }
            else {
              int v28 = 0;
            }
            int v29 = v20 + v28;
            if (v20 + v28 - v8 <= *v116)
            {
              int v134 = v26;
              int v136 = v24;
              uint64_t v30 = *(void *)(v21 + 4);
              uint64_t v31 = *(void *)(v21 + 16);
              unsigned int v32 = *(_DWORD *)(v21 + 24);
              uint64_t v33 = *(unsigned __int16 *)(v21 + 28);
              __int16 v130 = *(_WORD *)(v21 + 30);
              __int16 v132 = *(_WORD *)(v21 + 14);
              if (*v116 > v29) {
                *uint64_t v116 = v29;
              }
              unsigned int v34 = *((_DWORD *)this + 56);
              unsigned int v35 = v34;
              if (v33)
              {
                uint64_t v36 = *v138;
                uint64_t v37 = v33;
                unsigned int v35 = *((_DWORD *)this + 56);
                do
                {
                  __int16 v38 = *(_WORD *)(v36 + 2 * v32);
                  if (v35 == *((_DWORD *)this + 57))
                  {
                    DgnPrimArray<short>::reallocElts((uint64_t)v138, 1, 1);
                    unsigned int v35 = *((_DWORD *)this + 56);
                    uint64_t v36 = *((void *)this + 27);
                  }
                  *(_WORD *)(v36 + 2 * v35++) = v38;
                  *((_DWORD *)this + 56) = v35;
                  ++v32;
                  --v37;
                }
                while (v37);
              }
              if (v35 == *((_DWORD *)this + 57))
              {
                DgnPrimArray<short>::reallocElts((uint64_t)v138, 1, 1);
                unsigned int v35 = *((_DWORD *)this + 56);
              }
              *(_WORD *)(*((void *)this + 27) + 2 * v35) = v22;
              *((_DWORD *)this + 56) = v35 + 1;
              uint64_t v39 = *((unsigned int *)this + 72);
              if (v39 == *((_DWORD *)this + 73))
              {
                DgnArray<FstSearchLeafLatticeDurationBackoffActiveToken>::reallocElts((uint64_t)v115, 1, 1);
                LODWORD(v39) = *((_DWORD *)this + 72);
              }
              uint64_t v40 = *((void *)this + 35) + 40 * v39;
              *(_DWORD *)uint64_t v40 = v29;
              *(void *)(v40 + 4) = v30;
              *(_WORD *)(v40 + 12) = v22;
              *(_WORD *)(v40 + 14) = v132;
              *(void *)(v40 + 16) = v31;
              *(_DWORD *)(v40 + 24) = v34;
              *(_WORD *)(v40 + 28) = v33 + 1;
              *(_WORD *)(v40 + 30) = v130;
              *(_DWORD *)(v40 + 32) = v134;
              *(_DWORD *)(v40 + 36) = v136;
              int v41 = *((_DWORD *)this + 72) + 1;
              *((_DWORD *)this + 72) = v41;
              if (v17 == v124)
              {
                unsigned int v42 = v123;
                if (HIDWORD(v123) == 2 * *((_DWORD *)this + 4)) {
                  unsigned int v42 = v41;
                }
                unint64_t v123 = __PAIR64__(HIDWORD(v123), v42) + 0x100000000;
              }
              unsigned int v10 = v113;
              uint64_t v12 = v112;
              uint64_t v16 = v128;
            }
            else
            {
              unsigned int v10 = v113;
              uint64_t v12 = v112;
            }
            ++v17;
          }
          while (v17 != v16);
        }
        uint64_t v43 = v10;
        unsigned int v44 = v12;
        uint64_t v118 = v10;
        do
        {
          uint64_t v45 = *((void *)this + 5);
          uint64_t v46 = *(void *)(v45 + 152);
          unsigned int v47 = *(_DWORD *)(v46 + 4 * v44);
          int v48 = *(_DWORD *)(v45 + 140);
          int v125 = *(_DWORD *)(v46 + 4 * (v44 + 1));
          unsigned int v114 = v44;
          if (v48 <= v125)
          {
            if (*((unsigned char *)this + 428)) {
              BOOL v74 = v48 <= (int)v12;
            }
            else {
              BOOL v74 = 0;
            }
            if (v74)
            {
              unsigned int v75 = (v47 & 0xFFFFF) <= 0xFFFF3 ? v47 & 0xFFFFF : v47 & 0xFFFFF | 0xF00000;
              if (v75 != 16777210)
              {
                DgnString::DgnString((DgnString *)&v151);
                ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v75, (DgnString *)&v151, v76, v77, v78, v79, v80);
                uint64_t v86 = &unk_214099300;
                if (v151.i32[2]) {
                  uint64_t v86 = (void *)v151.i64[0];
                }
                uint64_t v85 = (unsigned int *)(*((void *)this + 33) + 40 * v124);
                xprintf("Seed from state %d score %d trace %d, %s\n", v81, v82, v83, v84, v12, *v85, v85[2], v86);
                uint64_t v87 = (int *)(*((void *)this + 33) + 40 * v124);
                MiniFst::seed((uint64_t)this + 312, *v87, v87[5], v87[2], v125);
                DgnString::~DgnString((DgnString *)&v151);
              }
            }
          }
          else
          {
            int ScoreNoBackoff = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), (unsigned __int16)*(_DWORD *)(v46 + 4 * v44));
            if (v110 < v10)
            {
              int v119 = (v47 >> 20) & 0x3FF;
              int v50 = ScoreNoBackoff + v119;
              uint64_t v51 = (unsigned __int16)v47;
              if ((_WORD)v47) {
                int v52 = v108;
              }
              else {
                int v52 = 0;
              }
              uint64_t v53 = v124;
              unsigned int v120 = v47;
              int v121 = v52;
              int v122 = ScoreNoBackoff + v119;
              do
              {
                uint64_t v54 = *((void *)this + 33) + 40 * v53;
                int v55 = v50 + *(_DWORD *)v54;
                if (v51) {
                  int v57 = *(__int16 *)(*((void *)this + 24) + 2 * v51);
                }
                else {
                  int v57 = 0;
                }
                if (v51)
                {
                  int v56 = *(__int16 *)(*((void *)this + 24) + 2 * v51);
                  int v58 = v56 & (v56 >> 31);
                }
                else
                {
                  int v58 = 0;
                }
                int v59 = (*(_DWORD *)(v54 + 32) & ~(*(int *)(v54 + 32) >> 31)) - v58 + v52;
                int v60 = v55 + v59;
                int v61 = v55 + v59 - v8;
                int v62 = *((_DWORD *)this + 76);
                if (v61 <= v62)
                {
                  __int16 v135 = *(_WORD *)(v54 + 14);
                  int v137 = v57;
                  int v127 = *(_DWORD *)(v54 + 16);
                  int v129 = *(_DWORD *)(v54 + 8);
                  unsigned int v63 = *(_DWORD *)(v54 + 24);
                  uint64_t v64 = *(unsigned __int16 *)(v54 + 28);
                  __int16 v131 = *(_WORD *)(v54 + 30);
                  int v133 = *(_DWORD *)(v54 + 20);
                  int v126 = *(_DWORD *)(v54 + 36);
                  if (v62 > v60) {
                    *uint64_t v116 = v60;
                  }
                  unsigned int v65 = *((_DWORD *)this + 56);
                  unsigned int v66 = v65;
                  if (v64)
                  {
                    uint64_t v67 = *v138;
                    uint64_t v68 = v64;
                    unsigned int v66 = *((_DWORD *)this + 56);
                    do
                    {
                      __int16 v69 = *(_WORD *)(v67 + 2 * v63);
                      if (v66 == *((_DWORD *)this + 57))
                      {
                        DgnPrimArray<short>::reallocElts((uint64_t)v138, 1, 1);
                        unsigned int v66 = *((_DWORD *)this + 56);
                        uint64_t v67 = *((void *)this + 27);
                      }
                      *(_WORD *)(v67 + 2 * v66++) = v69;
                      *((_DWORD *)this + 56) = v66;
                      ++v63;
                      --v68;
                    }
                    while (v68);
                  }
                  if (v66 == *((_DWORD *)this + 57))
                  {
                    DgnPrimArray<short>::reallocElts((uint64_t)v138, 1, 1);
                    unsigned int v66 = *((_DWORD *)this + 56);
                  }
                  unsigned int v47 = v120;
                  *(_WORD *)(*((void *)this + 27) + 2 * v66) = v120;
                  *((_DWORD *)this + 56) = v66 + 1;
                  uint64_t v70 = *((unsigned int *)this + 72);
                  if (v70 == *((_DWORD *)this + 73))
                  {
                    DgnArray<FstSearchLeafLatticeDurationBackoffActiveToken>::reallocElts((uint64_t)v115, 1, 1);
                    LODWORD(v70) = *((_DWORD *)this + 72);
                  }
                  uint64_t v71 = *((void *)this + 35) + 40 * v70;
                  *(_DWORD *)uint64_t v71 = v60;
                  *(_DWORD *)(v71 + 4) = v125;
                  *(_DWORD *)(v71 + 8) = v129;
                  *(_WORD *)(v71 + 12) = v120;
                  *(_WORD *)(v71 + 14) = v135;
                  *(_DWORD *)(v71 + 16) = v127 + v119;
                  *(_DWORD *)(v71 + 20) = v133;
                  *(_DWORD *)(v71 + 24) = v65;
                  *(_WORD *)(v71 + 28) = v64 + 1;
                  *(_WORD *)(v71 + 30) = v131;
                  *(_DWORD *)(v71 + 32) = v137;
                  *(_DWORD *)(v71 + 36) = v59 + v126;
                  int v72 = *((_DWORD *)this + 72) + 1;
                  *((_DWORD *)this + 72) = v72;
                  int v8 = v117;
                  if (v53 == v124)
                  {
                    unsigned int v73 = v123;
                    if (HIDWORD(v123) == 2 * *((_DWORD *)this + 4)) {
                      unsigned int v73 = v72;
                    }
                    unint64_t v123 = __PAIR64__(HIDWORD(v123), v73) + 0x100000000;
                  }
                  uint64_t v43 = v118;
                  int v52 = v121;
                  int v50 = v122;
                }
                ++v53;
              }
              while (v53 != v43);
            }
          }
          unsigned int v10 = v113;
          unsigned int v44 = v114 + 2;
          a4 = v111;
          uint64_t v12 = v112;
        }
        while ((v47 & 0x80000000) == 0);
        unsigned int v9 = *((_DWORD *)this + 68);
      }
    }
    while (v10 < v9);
    a3 = *v116;
  }
  else
  {
    unint64_t v123 = 0;
  }
  int v153 = a3 + v8;
  if (*((unsigned char *)this + 428)) {
    MiniFst::updateFrame((char *)this + 312, v116, v8, a2);
  }
  int64x2_t v151 = 0u;
  int64x2_t v152 = 0u;
  SnapTime::recordTime((SnapTime *)&v151, 1, 0, 0, 0);
  int64x2_t v151 = vsubq_s64(v151, v154);
  int64x2_t v152 = vsubq_s64(v152, v155);
  uint64_t v88 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v89 = vaddq_s64(v88[1], v152);
  *uint64_t v88 = vaddq_s64(*v88, v151);
  v88[1] = v89;
  int64x2_t v149 = 0u;
  int64x2_t v150 = 0u;
  SnapTime::recordTime((SnapTime *)&v149, 1, 0, 0, 0);
  if (HIDWORD(v123) > 2 * *((_DWORD *)this + 4)) {
    FstSearchLeafLatticeDurationBackoff::applyCutoffOnEmitting((uint64_t)this, v123, &v153);
  }
  int64x2_t v147 = 0u;
  int64x2_t v148 = 0u;
  SnapTime::recordTime((SnapTime *)&v147, 1, 0, 0, 0);
  int64x2_t v90 = vsubq_s64(v147, v149);
  uint64_t v91 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v92 = v91[3];
  int64x2_t v93 = vaddq_s64(v91[2], v90);
  int64x2_t v147 = v90;
  int64x2_t v148 = vsubq_s64(v148, v150);
  int64x2_t v94 = vaddq_s64(v92, v148);
  v91[2] = v93;
  v91[3] = v94;
  int64x2_t v145 = 0u;
  int64x2_t v146 = 0u;
  SnapTime::recordTime((SnapTime *)&v145, 1, 0, 0, 0);
  FstSearchLeafLatticeDurationBackoff::makeViterbiDecisionOnEmitting((uint64_t)this);
  unint64_t v95 = *((unsigned int *)this + 6);
  if (v95)
  {
    unint64_t v96 = *((unsigned int *)this + 68);
    if (v95 < v96) {
      mrec_nth_element<FstSearchLeafLatticeDurationBackoffcmpTok>(*((void *)this + 33), v95, v96);
    }
  }
  int64x2_t v143 = 0u;
  int64x2_t v144 = 0u;
  SnapTime::recordTime((SnapTime *)&v143, 1, 0, 0, 0);
  int64x2_t v97 = vsubq_s64(v143, v145);
  uint64_t v98 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v99 = v98[5];
  int64x2_t v100 = vaddq_s64(v98[4], v97);
  int64x2_t v143 = v97;
  int64x2_t v144 = vsubq_s64(v144, v146);
  int64x2_t v101 = vaddq_s64(v99, v144);
  v98[4] = v100;
  v98[5] = v101;
  int64x2_t v141 = 0u;
  int64x2_t v142 = 0u;
  SnapTime::recordTime((SnapTime *)&v141, 1, 0, 0, 0);
  *((_DWORD *)this + 72) = 0;
  uint64_t v102 = *((unsigned int *)this + 68);
  *((_DWORD *)this + 38) = v102;
  if (a4)
  {
    *((void *)a4 + 2) += v102;
    if (*((_DWORD *)a4 + 2) > v102) {
      LODWORD(v102) = *((_DWORD *)a4 + 2);
    }
    *((_DWORD *)a4 + 2) = v102;
  }
  if (*((unsigned char *)this + 428)) {
    FstSearchLeafLatticeDuration::seedFromMiniFst((uint64_t)this, v156);
  }
  if (a5) {
    FstSearchLeafLatticeDurationBackoff::propagateNulls((uint64_t)this, v153, a2, a4);
  }
  *((_DWORD *)this + 74) = a2;
  int64x2_t v139 = 0u;
  int64x2_t v140 = 0u;
  SnapTime::recordTime((SnapTime *)&v139, 1, 0, 0, 0);
  uint64_t v103 = (int64x2_t *)*((void *)this + 13);
  int64x2_t result = vaddq_s64(v103[6], vsubq_s64(v139, v141));
  int64x2_t v105 = vaddq_s64(v103[7], vsubq_s64(v140, v142));
  v103[6] = result;
  v103[7] = v105;
  return result;
}

void sub_213E4A2DC(_Unwind_Exception *exception_object)
{
}

uint64_t FstSearchLeafLatticeDuration::seedFromMiniFst(uint64_t this, int *a2)
{
  if (*(unsigned char *)(this + 428))
  {
    uint64_t v2 = this;
    unsigned int v3 = *(_DWORD *)(this + 336);
    if (v3 >= *(_DWORD *)(this + 20)) {
      unsigned int v3 = *(_DWORD *)(this + 20);
    }
    if (v3)
    {
      unint64_t v4 = 0;
      uint64_t v46 = this + 176;
      uint64_t v5 = (void *)(this + 160);
      uint64_t v39 = this + 264;
      do
      {
        uint64_t v6 = (int *)(*(void *)(v2 + 328) + 36 * v4);
        int v7 = v6[4];
        int v43 = *v6;
        unsigned int v44 = v6[5];
        int v8 = v6[6];
        int v45 = v6[7];
        unsigned int v9 = v6[2];
        uint64_t v47 = 0;
        uint64_t v48 = 0;
        int v41 = v8;
        int v42 = v7;
        if ((v9 & 0x80000000) != 0)
        {
          LODWORD(v13) = -2 - v9;
        }
        else
        {
          uint64_t v10 = 0;
          unsigned int v11 = 0;
          do
          {
            if (v11 == HIDWORD(v48))
            {
              DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v47, 1, 1);
              unsigned int v11 = v48;
              uint64_t v10 = v47;
            }
            *(_DWORD *)(v10 + 4 * v11) = v9;
            uint64_t v12 = v48;
            unsigned int v11 = v48 + 1;
            LODWORD(v48) = v48 + 1;
            unsigned int v9 = *(_DWORD *)(*(void *)(v2 + 312) + 36 * v9 + 8);
          }
          while ((v9 & 0x80000000) == 0);
          LODWORD(v13) = -2 - v9;
          if ((v12 & 0x80000000) == 0)
          {
            int v14 = v12 + 1;
            uint64_t v15 = 4 * v12;
            do
            {
              unsigned int v16 = *(_DWORD *)(v47 + v15);
              uint64_t v17 = *(void *)(v2 + 312);
              uint64_t v18 = (int *)(v17 + 36 * v16);
              int v19 = *v18;
              uint64_t v20 = *((void *)v18 + 2);
              unsigned int v21 = *(_DWORD *)(v2 + 184);
              if (v21 == *(_DWORD *)(v2 + 188))
              {
                DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(v46, 1, 1);
                unsigned int v21 = *(_DWORD *)(v2 + 184);
                uint64_t v17 = *(void *)(v2 + 312);
              }
              uint64_t v22 = *(void *)(v2 + 176) + 28 * v21;
              *(_DWORD *)(v2 + 184) = v21 + 1;
              *(_DWORD *)uint64_t v22 = v19;
              *(void *)(v22 + 4) = v20;
              *(_DWORD *)(v22 + 12) = v13;
              *(_DWORD *)(v22 + 16) = 0;
              *(_WORD *)(v22 + 20) = 0;
              *(_DWORD *)(v22 + 24) = 0;
              uint64_t v23 = *(void *)(v17 + 36 * v16 + 28);
              uint64_t v24 = *(unsigned int *)(v2 + 168);
              if (v24 == *(_DWORD *)(v2 + 172))
              {
                DgnArray<DgnPrimArray<double>>::reallocElts(v2 + 160, 1, 1);
                uint64_t v24 = *(unsigned int *)(v2 + 168);
              }
              uint64_t v25 = *(void *)(v2 + 160);
              uint64_t v26 = v25 + 16 * v24;
              *(void *)uint64_t v26 = v23;
              *(_DWORD *)(v26 + 8) = v21;
              *(_DWORD *)(v26 + 12) = 0;
              uint64_t v13 = *(unsigned int *)(v2 + 168);
              *(_DWORD *)(v2 + 168) = v13 + 1;
              *(_DWORD *)(v25 + 16 * v13 + 12) = 1;
              --v14;
              v15 -= 4;
            }
            while (v14 > 0);
          }
        }
        unsigned int v27 = *(_DWORD *)(v2 + 184);
        if (v27 == *(_DWORD *)(v2 + 188))
        {
          DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(v46, 1, 1);
          unsigned int v27 = *(_DWORD *)(v2 + 184);
        }
        uint64_t v28 = *(void *)(v2 + 176);
        *(_DWORD *)(v2 + 184) = v27 + 1;
        uint64_t v29 = v28 + 28 * v27;
        *(_DWORD *)uint64_t v29 = v43;
        *(_DWORD *)(v29 + 4) = v42;
        *(_DWORD *)(v29 + 8) = v44;
        *(_DWORD *)(v29 + 12) = v13;
        *(_DWORD *)(v29 + 16) = 0;
        *(_WORD *)(v29 + 20) = 0;
        *(_DWORD *)(v29 + 24) = 0;
        if (v45 == 16777213)
        {
          int v45 = 16777209;
          if (*(_DWORD *)(*v5 + 16 * v13) == 16777209)
          {
            unsigned int v27 = *(_DWORD *)(*v5 + 16 * v13 + 8);
            int v45 = 16777209;
          }
        }
        int v30 = *a2;
        uint64_t v31 = *(unsigned int *)(v2 + 168);
        if (v31 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<DgnPrimArray<double>>::reallocElts(v2 + 160, 1, 1);
          uint64_t v31 = *(unsigned int *)(v2 + 168);
        }
        uint64_t v32 = *(void *)(v2 + 160);
        uint64_t v33 = (int *)(v32 + 16 * v31);
        *uint64_t v33 = v45;
        v33[1] = v30;
        v33[2] = v27;
        v33[3] = 0;
        uint64_t v34 = *(unsigned int *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v34 + 1;
        *(_DWORD *)(v32 + 16 * v34 + 12) = 1;
        uint64_t v35 = *(unsigned int *)(v2 + 272);
        if (v35 == *(_DWORD *)(v2 + 276))
        {
          DgnArray<FstSearchLeafLatticeDurationBackoffActiveToken>::reallocElts(v39, 1, 1);
          LODWORD(v35) = *(_DWORD *)(v2 + 272);
        }
        uint64_t v36 = *(void *)(v2 + 264) + 40 * v35;
        *(_DWORD *)uint64_t v36 = v43;
        *(_DWORD *)(v36 + 4) = v41;
        *(_DWORD *)(v36 + 8) = v34;
        *(_WORD *)(v36 + 12) = -2;
        *(_DWORD *)(v36 + 16) = v42;
        *(void *)(v36 + 20) = v44;
        *(_WORD *)(v36 + 28) = 0;
        *(void *)(v36 + 32) = 0;
        ++*(_DWORD *)(v2 + 272);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v47);
        ++v4;
        LODWORD(v37) = *(_DWORD *)(v2 + 336);
        unsigned int v38 = *(_DWORD *)(v2 + 20);
        if (v37 >= v38) {
          unint64_t v37 = v38;
        }
        else {
          unint64_t v37 = v37;
        }
      }
      while (v4 < v37);
    }
  }
  return this;
}

void sub_213E4A688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLeafLatticeDuration::collectTraces(FstSearchLeafLatticeDuration *this)
{
  uint64_t v2 = *((unsigned int *)this + 42);
  unsigned int v66 = 0;
  unsigned int v65 = 0;
  if (v2)
  {
    unsigned int v3 = MemChunkAlloc(4 * v2, 0);
    unint64_t v4 = 0;
    unsigned int v65 = v3;
    unsigned int v66 = v2;
    do
      *((_DWORD *)v3 + v4++) = 0;
    while (v4 < v66);
  }
  unint64_t v5 = *((unsigned int *)this + 68);
  if (v5)
  {
    unint64_t v6 = 0;
    int v7 = v65;
    int v8 = (unsigned int *)(*((void *)this + 33) + 8);
    do
    {
      unsigned int v10 = *v8;
      v8 += 10;
      uint64_t v9 = v10;
      if (v10 != -1)
      {
        *((_DWORD *)v7 + v9) = 1;
        unint64_t v5 = *((unsigned int *)this + 68);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  LODWORD(v11) = *((_DWORD *)this + 42);
  if (!v11)
  {
    uint64_t v63 = 0;
    uint64_t v64 = 0;
LABEL_54:
    unsigned int v25 = 0;
    *((_DWORD *)this + 42) = 0;
    goto LABEL_55;
  }
  char v12 = 0;
  uint64_t v13 = (uint64_t *)((char *)this + 160);
  int v14 = v65;
  uint64_t v15 = (uint64_t *)((char *)this + 176);
  do
  {
    uint64_t v11 = (v11 - 1);
    if (v12)
    {
      char v12 = 1;
    }
    else if (*(_DWORD *)(*v13 + 16 * v11) == 16777213)
    {
      char v12 = 1;
      *((_DWORD *)v14 + v11) = 1;
    }
    else
    {
      char v12 = 0;
    }
    if (*((_DWORD *)v14 + v11))
    {
      uint64_t v16 = *v13 + 16 * v11;
      int v17 = *(_DWORD *)(v16 + 12);
      if (v17 >= 1)
      {
        unsigned int v18 = *(_DWORD *)(v16 + 8);
        int v19 = v17 + v18;
        uint64_t v20 = *v15;
        do
        {
          uint64_t v21 = *(unsigned int *)(v20 + 28 * v18 + 12);
          if (v21 != -1) {
            *((_DWORD *)v14 + v21) = 1;
          }
          ++v18;
        }
        while ((int)v18 < v19);
      }
    }
  }
  while (v11);
  unsigned int v22 = *((_DWORD *)this + 42);
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  if (!v22) {
    goto LABEL_54;
  }
  unint64_t v23 = 0;
  unsigned int v24 = 0;
  unsigned int v25 = 0;
  do
  {
    if (*((_DWORD *)v65 + v23))
    {
      uint64_t v26 = *v13;
      unsigned int v62 = v24;
      if (v23 != v24)
      {
        *(_OWORD *)(v26 + 16 * v24) = *(_OWORD *)(v26 + 16 * v23);
        uint64_t v26 = *v13;
      }
      *(_DWORD *)(v26 + 16 * v24 + 8) = v25;
      uint64_t v27 = v26 + 16 * v23;
      uint64_t v28 = *(unsigned int *)(v27 + 8);
      uint64_t v29 = (*(_DWORD *)(v27 + 12) + v28);
      if (v28 < v29)
      {
        uint64_t v30 = *v15;
        do
        {
          unsigned int v31 = v25;
          if (v28 != v25)
          {
            uint64_t v32 = (long long *)(v30 + 28 * v28);
            uint64_t v33 = (_OWORD *)(v30 + 28 * v25);
            long long v34 = *v32;
            *(_OWORD *)((char *)v33 + 12) = *(long long *)((char *)v32 + 12);
            *uint64_t v33 = v34;
            uint64_t v30 = *v15;
          }
          uint64_t v35 = v30 + 28 * v25;
          unsigned int v38 = *(_DWORD *)(v35 + 12);
          uint64_t v36 = (_DWORD *)(v35 + 12);
          uint64_t v37 = v38;
          if (v38 != -1) {
            *uint64_t v36 = *((_DWORD *)v65 + v37);
          }
          int v39 = v64;
          if (*(_WORD *)(v30 + 28 * v31 + 20))
          {
            unsigned int v40 = 0;
            unsigned int v41 = v64;
            do
            {
              __int16 v42 = *(_WORD *)(*((void *)this + 27) + 2 * (v40 + *(_DWORD *)(v30 + 28 * v31 + 16)));
              if (v41 == HIDWORD(v64))
              {
                DgnPrimArray<short>::reallocElts((uint64_t)&v63, 1, 1);
                unsigned int v41 = v64;
                uint64_t v30 = *v15;
              }
              *(_WORD *)(v63 + 2 * v41++) = v42;
              LODWORD(vDgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 64) = v41;
              ++v40;
            }
            while (v40 < *(unsigned __int16 *)(v30 + 28 * v31 + 20));
          }
          *(_DWORD *)(v30 + 28 * v31 + 16) = v39;
          unsigned int v25 = v31 + 1;
          ++v28;
        }
        while (v28 != v29);
      }
      *((_DWORD *)v65 + v23) = v62;
      unsigned int v24 = v62 + 1;
      unsigned int v22 = *((_DWORD *)this + 42);
      uint64_t v13 = (uint64_t *)((char *)this + 160);
    }
    ++v23;
  }
  while (v23 < v22);
  unsigned int v43 = *((_DWORD *)this + 43);
  if (v24 > v43)
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v13, v24 - v43, 0);
    unsigned int v22 = *((_DWORD *)this + 42);
  }
  if (v22 < v24)
  {
    unint64_t v44 = v24 - (unint64_t)v22;
    int v45 = (_OWORD *)(*v13 + 16 * v22);
    do
    {
      *v45++ = xmmword_2140992B0;
      --v44;
    }
    while (v44);
  }
  *((_DWORD *)this + 42) = v24;
  unsigned int v46 = *((_DWORD *)this + 47);
  if (v25 > v46) {
    DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)this + 176, v25 - v46, 0);
  }
  uint64_t v47 = *((unsigned int *)this + 46);
  if (v47 < v25)
  {
    uint64_t v48 = v25 - v47;
    int v49 = (_DWORD *)(*v15 + 28 * v47 + 24);
    do
    {
      *(_OWORD *)(v49 - 6) = xmmword_2140992A0;
      *(v49 - 2) = 0;
      *((_WORD *)v49 - 2) = 0;
      *int v49 = 0;
      v49 += 7;
      --v48;
    }
    while (v48);
  }
LABEL_55:
  *((_DWORD *)this + 46) = v25;
  unint64_t v50 = *((unsigned int *)this + 68);
  if (v50)
  {
    unint64_t v51 = 0;
    uint64_t v52 = v64;
    uint64_t v53 = *((void *)this + 33);
    do
    {
      if (*(_WORD *)(v53 + 40 * v51 + 28))
      {
        unsigned int v54 = 0;
        LODWORD(v55) = v52;
        do
        {
          __int16 v56 = *(_WORD *)(*((void *)this + 27) + 2 * (v54 + *(_DWORD *)(v53 + 40 * v51 + 24)));
          if (v55 == HIDWORD(v64))
          {
            DgnPrimArray<short>::reallocElts((uint64_t)&v63, 1, 1);
            LODWORD(v55) = v64;
            uint64_t v53 = *((void *)this + 33);
          }
          *(_WORD *)(v63 + 2 * v55) = v56;
          uint64_t v55 = (v55 + 1);
          LODWORD(vDgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 64) = v55;
          ++v54;
        }
        while (v54 < *(unsigned __int16 *)(v53 + 40 * v51 + 28));
        unint64_t v50 = *((unsigned int *)this + 68);
      }
      else
      {
        uint64_t v55 = v52;
      }
      *(_DWORD *)(v53 + 40 * v51++ + 24) = v52;
      uint64_t v52 = v55;
    }
    while (v51 < v50);
  }
  else
  {
    LODWORD(v55) = v64;
  }
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 216, &v63, 0, v55);
  uint64_t v57 = *((unsigned int *)this + 68);
  if (v57)
  {
    int v58 = v65;
    int v59 = (_DWORD *)(*((void *)this + 33) + 8);
    do
    {
      uint64_t v60 = *v59;
      if (v60 != -1) {
        *int v59 = *((_DWORD *)v58 + v60);
      }
      v59 += 10;
      --v57;
    }
    while (v57);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v63);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v65);
}

void sub_213E4AB3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va1);
  _Unwind_Resume(a1);
}

int64x2_t FstSearchLeafLatticeDuration::vite(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  FstSearchLeafLatticeDuration::advanceDeltas((FstSearchLeafLatticeDuration *)this, a2, a3, a4, a5);
  int64x2_t v13 = 0u;
  int64x2_t v14 = 0u;
  SnapTime::recordTime((SnapTime *)&v13, 1, 0, 0, 0);
  if (a2 >= 1)
  {
    unsigned int v7 = *((_DWORD *)this + 18);
    if (v7)
    {
      if (!(a2 % v7)) {
        FstSearchLeafLatticeDuration::collectTraces((FstSearchLeafLatticeDuration *)this);
      }
    }
  }
  int64x2_t v11 = 0u;
  int64x2_t v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  int v8 = this[13];
  int64x2_t result = vaddq_s64(v8[14], vsubq_s64(v11, v13));
  int64x2_t v10 = vaddq_s64(v8[15], vsubq_s64(v12, v14));
  v8[14] = result;
  v8[15] = v10;
  return result;
}

_DWORD *FstSearchLeafLatticeDuration::reset(_DWORD *this)
{
  this[42] = 0;
  this[46] = 0;
  this[56] = 0;
  this[68] = 0;
  return this;
}

double FstSearchLeafLatticeDuration::doFrame(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  if (a3 >= 20000) {
    a3 = 20000;
  }
  *(void *)&double result = FstSearchLeafLatticeDuration::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearchLeafLatticeDuration::beginTopRecPassSyncRecog(FstSearchLeafLatticeDuration *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 312, a3, *((PelScoreCache **)this + 4));
    uint64_t result = ArcGraph::findBackoffState(*((void *)this + 5));
    *((_DWORD *)this + 106) = result;
    *((unsigned char *)this + 428) = 1;
  }
  return result;
}

uint64_t FstSearchLeafLatticeDuration::endTopRecPassSyncRecog(FstSearchLeafLatticeDuration *this)
{
  int64x2_t v10 = 0u;
  int64x2_t v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  int64x2_t v8 = 0u;
  int64x2_t v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  int64x2_t v2 = vsubq_s64(v8, v10);
  unsigned int v3 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v4 = v3[13];
  int64x2_t v5 = vaddq_s64(v3[12], v2);
  int64x2_t v8 = v2;
  int64x2_t v9 = vsubq_s64(v9, v11);
  int64x2_t v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + 76) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

void FstSearchLeafLatticeDuration::printSize(FstSearchLeafLatticeDuration *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v125);
  if (v126) {
    uint64_t v15 = v125;
  }
  else {
    uint64_t v15 = &unk_214099300;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v11, v12, v13, v14, a3, &unk_214099300, a3, &unk_214099300, v15);
  DgnString::~DgnString((DgnString *)&v125);
  if (a2 != -1) {
    xlprintf("%d ", v16, v17, v18, v19, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v16, v17, v18, v19, a3, &unk_214099300);
  uint64_t v20 = (a3 + 1);
  uint64_t v21 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v125);
  if (v126) {
    uint64_t v26 = v125;
  }
  else {
    uint64_t v26 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v22, v23, v24, v25, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v26, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v125);
  if (v126) {
    unsigned int v31 = v125;
  }
  else {
    unsigned int v31 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v27, v28, v29, v30, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v31, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v125);
  if (v126) {
    uint64_t v36 = v125;
  }
  else {
    uint64_t v36 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v32, v33, v34, v35, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v36, 4, 4, 0);
  uint64_t v121 = a2;
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v125);
  if (v126) {
    unsigned int v41 = v125;
  }
  else {
    unsigned int v41 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v37, v38, v39, v40, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v41, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  uint64_t v42 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v42 = 16;
  }
  uint64_t v43 = *((unsigned int *)this + 42);
  uint64_t v44 = 16 * v43;
  if ((int)v43 <= 0) {
    uint64_t v44 = 0;
  }
  uint64_t v45 = v44 + v42;
  uint64_t v46 = v44 + v42 + 16 * (*((_DWORD *)this + 43) - v43);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v125);
  if (v126) {
    unint64_t v51 = v125;
  }
  else {
    unint64_t v51 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v47, v48, v49, v50, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v51, v46, v45, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v46;
  *a5 += v45;
  uint64_t v52 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v52 = 16;
  }
  int v53 = *((_DWORD *)this + 46);
  uint64_t v54 = 26 * v53;
  if (v53 <= 0) {
    uint64_t v54 = 0;
  }
  uint64_t v55 = v54 + v52;
  uint64_t v56 = v54 + v52 + 26 * (*((_DWORD *)this + 47) - v53);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v125);
  if (v126) {
    int v61 = v125;
  }
  else {
    int v61 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v57, v58, v59, v60, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v61, v56, v55, 0);
  uint64_t v120 = a3;
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v56;
  *a5 += v55;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v62 = 12;
  }
  else {
    uint64_t v62 = 16;
  }
  uint64_t v63 = *((unsigned int *)this + 56);
  unsigned int v64 = *((_DWORD *)this + 57);
  if (v64 >= v63)
  {
    uint64_t v65 = 0;
    if ((int)v63 > 0) {
      uint64_t v62 = (v62 | 2) + 2 * (v63 - 1);
    }
    uint64_t v66 = v62 + 2 * (v64 - v63);
  }
  else
  {
    uint64_t v65 = 2 * v63;
    uint64_t v66 = v62;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2961, (DgnString *)&v125);
  if (v126) {
    uint64_t v71 = v125;
  }
  else {
    uint64_t v71 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v67, v68, v69, v70, v20, &unk_214099300, v21, v21, v71, v66, v62, v65);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v66;
  *a5 += v62;
  *a6 += v65;
  uint64_t v72 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v72 = 16;
  }
  uint64_t v73 = *((unsigned int *)this + 68);
  uint64_t v74 = 36 * v73;
  if ((int)v73 <= 0) {
    uint64_t v74 = 0;
  }
  uint64_t v75 = v74 + v72;
  uint64_t v76 = v74 + v72 + 36 * (*((_DWORD *)this + 69) - v73);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v125);
  if (v126) {
    uint64_t v81 = v125;
  }
  else {
    uint64_t v81 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v77, v78, v79, v80, v20, &unk_214099300, v21, v21, v81, v76, v75, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v76;
  *a5 += v75;
  uint64_t v82 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v82 = 16;
  }
  uint64_t v83 = *((unsigned int *)this + 72);
  uint64_t v84 = 36 * v83;
  if ((int)v83 <= 0) {
    uint64_t v84 = 0;
  }
  uint64_t v85 = v84 + v82;
  uint64_t v86 = v84 + v82 + 36 * (*((_DWORD *)this + 73) - v83);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v125);
  if (v126) {
    uint64_t v91 = v125;
  }
  else {
    uint64_t v91 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v87, v88, v89, v90, v20, &unk_214099300, v21, v21, v91, v86, v85, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v86;
  *a5 += v85;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v125);
  if (v126) {
    unint64_t v96 = v125;
  }
  else {
    unint64_t v96 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v92, v93, v94, v95, v20, &unk_214099300, v21, v21, v96, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v125);
  if (v126) {
    int64x2_t v101 = v125;
  }
  else {
    int64x2_t v101 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v97, v98, v99, v100, v20, &unk_214099300, v21, v21, v101, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v125);
  if (v126) {
    int64x2_t v106 = v125;
  }
  else {
    int64x2_t v106 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v102, v103, v104, v105, v20, &unk_214099300, v21, v21, v106, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  uint64_t v107 = sizeObject((uint64_t)this + 312, 0);
  uint64_t v108 = sizeObject((uint64_t)this + 312, 1);
  uint64_t v109 = sizeObject((uint64_t)this + 312, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v125);
  if (v126) {
    unsigned int v114 = v125;
  }
  else {
    unsigned int v114 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v110, v111, v112, v113, v20, &unk_214099300, v21, v21, v114, v107, v108, v109);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v107;
  *a5 += v108;
  *a6 += v109;
  unint64_t v123 = 0;
  unint64_t v124 = 0;
  SearchItf::printSize(this, v121, v20, &v124, &v123, &v123);
  *a4 += v124;
  *a5 += v123;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v125);
  if (v126) {
    int v119 = v125;
  }
  else {
    int v119 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v115, v116, v117, v118, v120, &unk_214099300, (35 - v120), (35 - v120), v119, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v125);
}

void sub_213E4B53C(_Unwind_Exception *a1)
{
  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

BOOL FstSearchLeafLatticeDuration::findBestPath(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8 = *(unsigned int *)(a1 + 168);
  if (v8) {
    BOOL v9 = *(_DWORD *)(a3 + 8) == 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    *(void *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v8;
  }
  if (v8) {
    BOOL v10 = *(_DWORD *)(a2 + 8) == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    *(void *)a2 = MemChunkAlloc(v8, 0);
    *(_DWORD *)(a2 + 8) = v8;
LABEL_14:
    uint64_t v11 = 0;
    do
    {
      *(unsigned char *)(*(void *)a2 + v11) = 0;
      *(unsigned char *)(*(void *)a3 + v11++) = 0;
    }
    while (v8 != v11);
    goto LABEL_16;
  }
  if (v8) {
    goto LABEL_14;
  }
LABEL_16:
  unsigned int BestTrace = FstSearchLeafLatticeDurationBackoff::getBestTrace(a1, (void *)a2, (void *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1) {
    return 0;
  }
  uint64_t v13 = *(void *)(a1 + 160) + 16 * BestTrace;
  LODWORD(v13) = *(_DWORD *)(*(void *)(a1 + 176) + 28 * *(unsigned int *)(v13 + 8))
               + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v13 + 4));
  *a4 = v13;
  return v13 != 1879048192;
}

uint64_t FstSearchLeafLatticeDuration::buildWordLattice(uint64_t a1, uint64_t *a2, void *a3, void *a4, unsigned __int8 a5)
{
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  int v30 = 0;
  uint64_t v27 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v26, *(unsigned int *)(a1 + 168));
  unint64_t v8 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v8, 0, 128);
  v8[4] = (uint64_t)a2;
  FstSearchLeafLatticeDurationBackoff::createLatticeNodes(a1, &v29, (uint64_t)&v27, (uint64_t)a2, v26, a3, a4);
  uint64_t v22 = *(unsigned int *)(a1 + 168);
  if (v22)
  {
    uint64_t v9 = 0;
    int v10 = v28;
    do
    {
      if (*(unsigned char *)(*a3 + v9))
      {
        uint64_t v11 = *(void *)(a1 + 160);
        if (*(_DWORD *)(v11 + 16 * v9) != 16777209)
        {
          uint64_t v12 = v11 + 16 * v9;
          if (*(int *)(v12 + 12) >= 1)
          {
            unsigned int v13 = *(_DWORD *)(v12 + 8);
            do
            {
              uint64_t v14 = *(void *)(a1 + 176) + 28 * v13;
              uint64_t v15 = *(unsigned int *)(v14 + 12);
              unsigned int v25 = v13;
              if (v15 == -1) {
                unsigned int v16 = 0;
              }
              else {
                unsigned int v16 = v10 - *((_DWORD *)v29 + v15);
              }
              uint64_t v17 = *(unsigned int *)(v27 + 4 * v16);
              if (*(unsigned char *)(*a4 + v9)) {
                FstSearchLeafLatticeDuration::createLatticeLink((ArcGraph **)a1, v9, (int *)v14, 0xFFFFFFFFLL, v17, *(unsigned int *)(v27 + 4 * (v10 - *((_DWORD *)v29 + v9))), a2, (uint64_t)v8, a5);
              }
              uint64_t v18 = v26[0];
              if (*(_DWORD *)(v26[0] + 16 * v9 + 8))
              {
                unint64_t v19 = 0;
                do
                {
                  uint64_t v20 = *(unsigned int *)(*(void *)(v18 + 16 * v9) + 4 * v19);
                  FstSearchLeafLatticeDuration::createLatticeLink((ArcGraph **)a1, v9, (int *)v14, v20, v17, *(unsigned int *)(v27 + 4 * (v10 - *((_DWORD *)v29 + v20))), a2, (uint64_t)v8, a5);
                  ++v19;
                  uint64_t v18 = v26[0];
                }
                while (v19 < *(unsigned int *)(v26[0] + 16 * v9 + 8));
              }
              unsigned int v13 = v25 + 1;
            }
            while ((int)(v25 + 1) < *(_DWORD *)(*(void *)(a1 + 160) + 16 * v9 + 12)
                                   + *(_DWORD *)(*(void *)(a1 + 160) + 16 * v9 + 8));
          }
        }
      }
      ++v9;
    }
    while (v9 != v22);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>((uint64_t)v8);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v26);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v27);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v29);
}

void sub_213E4B8CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearchLeafLatticeDuration::createLatticeLink(ArcGraph **this, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, unsigned __int8 a9)
{
  unsigned int v33 = a6;
  unsigned int v11 = a5;
  unsigned int v12 = a4;
  if ((a4 & 0x80000000) != 0) {
    SilenceToken = 0;
  }
  else {
    SilenceToken = (_DWORD *)FstSearchLeafLatticeDurationBackoff::getSilenceToken((FstSearchLeafLatticeDurationBackoff *)this, a4, a2);
  }
  ArcGraph::lexToCWIDAC(this[5], *((_DWORD *)this[20] + 4 * a2), (uint64_t)a3, a4, a5, a6, (uint64_t)a7, a8, (uint64_t)v43);
  int v17 = a3[1];
  if (SilenceToken)
  {
    v17 += SilenceToken[1];
    int v18 = *SilenceToken + *a3;
  }
  else
  {
    int v18 = *a3;
  }
  if (v43[0] >> 25 == 126)
  {
    int v19 = 0;
    int v20 = v17;
    if ((v12 & 0x80000000) != 0)
    {
LABEL_9:
      int v21 = 0;
      goto LABEL_12;
    }
  }
  else
  {
    int v19 = *((_DWORD *)this + 34);
    int v20 = v17 - v19;
    if ((v12 & 0x80000000) != 0) {
      goto LABEL_9;
    }
  }
  int v21 = *((_DWORD *)this + 35);
  v20 -= v21;
LABEL_12:
  int v22 = a3[6];
  if (SilenceToken) {
    v22 += SilenceToken[6];
  }
  int v37 = v20;
  uint64_t v38 = 0;
  int v39 = v19;
  int v40 = v18 - v17 - v22;
  int v41 = v22;
  int v42 = v21;
  uint64_t v23 = a3[3];
  uint64_t v24 = this[20];
  if (v23 == -1)
  {
    int v26 = 0;
    if (a9) {
      goto LABEL_20;
    }
  }
  else
  {
    int v25 = *((_DWORD *)v24 + 4 * v23 + 1);
    if (a9)
    {
      if (v25 >= 1) {
        --v25;
      }
      int v26 = (v25 >> 1) + 1;
LABEL_20:
      int v27 = *((_DWORD *)v24 + 4 * a2 + 1);
      if (v27 >= 1) {
        --v27;
      }
      int v28 = (v27 >> 1) + 1;
      int v29 = v28 - v26;
      if ((v12 & 0x80000000) == 0)
      {
        int v30 = *((_DWORD *)v24 + 4 * v12 + 1);
        if (v30 >= 1) {
          --v30;
        }
        int v31 = v30 >> 1;
        goto LABEL_29;
      }
      goto LABEL_30;
    }
    int v26 = v25 + 1;
  }
  int v28 = *((_DWORD *)v24 + 4 * a2 + 1) + 1;
  int v29 = v28 - v26;
  if ((v12 & 0x80000000) == 0)
  {
    int v31 = *((_DWORD *)v24 + 4 * v12 + 1);
LABEL_29:
    int v32 = v31 - v28 + 1;
    goto LABEL_31;
  }
LABEL_30:
  int v32 = 0;
LABEL_31:
  WordLatticeLC::WordLatticeLC((uint64_t)v35, (uint64_t)v43, v26, v29, v32, (uint64_t)&v37);
  v34[0] = 0;
  v34[1] = 0;
  FstSearchLeafLatticeDurationBackoff::buildLinkSegmentation((unint64_t)this, (uint64_t)v34, (uint64_t)a3, v26, a9);
  if (SilenceToken) {
    FstSearchLeafLatticeDurationBackoff::buildLinkSegmentation((unint64_t)this, (uint64_t)v34, (uint64_t)SilenceToken, v28, a9);
  }
  unint64_t v36 = WordLattice::findOrAddLinkSegSeqId((uint64_t)a7, (uint64_t)v34, a8);
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v11, (const WordLatticeLC *)v33, (WordLatticeLC *)v35);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v34);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v35);
}

void sub_213E4BB50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va1);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLeafLatticeDuration::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(void *)(this + 112) = a2;
  if (*(unsigned char *)(this + 428)) {
    return MiniFst::beginTopFstSyncRecog(this + 312);
  }
  return this;
}

uint64_t FstSearchLeafLatticeDuration::endTopRecSyncRecog(FstSearchLeafLatticeDuration *this)
{
  uint64_t v1 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  return v1;
}

uint64_t FstSearchLeafLatticeDuration::getBestExitScore(FstSearchLeafLatticeDuration *this)
{
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  *((_DWORD *)this + 75) = -1;
  unint64_t v1 = *((unsigned int *)this + 38);
  unint64_t v2 = *((unsigned int *)this + 68);
  if (v1 >= v2) {
    goto LABEL_19;
  }
  uint64_t v4 = 0;
  unsigned int v5 = 0;
  uint64_t v6 = 40 * v1;
  do
  {
    uint64_t v7 = *((void *)this + 33) + v6;
    if (*(_DWORD *)(*((void *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      uint64_t v8 = *(unsigned int *)(v7 + 8);
      if (v8 != -1 && *(_DWORD *)(*((void *)this + 20) + 16 * v8 + 4) == *((_DWORD *)this + 74))
      {
        if (v5 == HIDWORD(v22))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v21, 1, 1);
          unsigned int v5 = v22;
          uint64_t v4 = v21;
        }
        *(_DWORD *)(v4 + 4 * v5) = v8;
        unsigned int v5 = v22 + 1;
        LODWORD(v22) = v22 + 1;
        unint64_t v2 = *((unsigned int *)this + 68);
      }
    }
    ++v1;
    v6 += 40;
  }
  while (v1 < v2);
  if (v5)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *((void *)this + 20);
    int v11 = 1879048192;
    do
    {
      uint64_t v12 = v10 + 16 * *(unsigned int *)(v4 + 4 * v9);
      int v13 = *(_DWORD *)(v12 + 12);
      if (v13 >= 1)
      {
        unsigned int v14 = *(_DWORD *)(v12 + 8);
        int v15 = v13 + v14;
        uint64_t v16 = *((void *)this + 22);
        do
        {
          unsigned int v17 = v14;
          int v18 = *(_DWORD *)(v16 + 28 * v14);
          if (v11 > v18)
          {
            *((_DWORD *)this + 75) = *(_DWORD *)(v16 + 28 * v17 + 12);
            int v11 = v18;
          }
          unsigned int v14 = v17 + 1;
        }
        while ((int)(v17 + 1) < v15);
      }
      ++v9;
    }
    while (v9 != v5);
  }
  else
  {
LABEL_19:
    int v11 = 1879048192;
  }
  if (v11 >= 20000) {
    uint64_t v19 = 20000;
  }
  else {
    uint64_t v19 = v11;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v21);
  return v19;
}

void sub_213E4BD10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t FstSearchLeafLatticeDuration::getBestScoreMaybeUpdateFstNode(FstSearchLeafLatticeDuration *this, Node *a2)
{
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v2 = *((unsigned int *)this + 68);
  if (v2)
  {
    unsigned int v3 = (int *)*((void *)this + 33);
    __int16 v4 = -1;
    int v5 = 1879048192;
    uint64_t v6 = v3;
    do
    {
      int v8 = *v6;
      v6 += 10;
      int v7 = v8;
      if (v5 > v8)
      {
        __int16 v4 = *((_WORD *)v3 + 6);
        int v5 = v7;
      }
      unsigned int v3 = v6;
      --v2;
    }
    while (v2);
    uint64_t v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000) {
        uint64_t v9 = 20000;
      }
      else {
        uint64_t v9 = v5;
      }
    }
  }
  else
  {
    uint64_t v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

uint64_t FstSearchLeafLatticeDuration::seedTheory(FstSearchLeafLatticeDuration *this, int a2, int a3, int a4, SearchStats *a5)
{
  if (a4 == -2)
  {
    int v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    unsigned int v11 = *((_DWORD *)this + 46);
    if (v11 == *((_DWORD *)this + 47))
    {
      DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts((uint64_t)this + 176, 1, 1);
      unsigned int v11 = *((_DWORD *)this + 46);
    }
    uint64_t v12 = *((void *)this + 22) + 28 * v11;
    *(_OWORD *)(v12 + 4) = xmmword_2140992E0;
    *(_WORD *)(v12 + 20) = 0;
    *(_DWORD *)(v12 + 24) = 0;
    *((_DWORD *)this + 46) = v11 + 1;
    *(_DWORD *)uint64_t v12 = a2;
    unsigned int v13 = *((_DWORD *)this + 42);
    if (v13 == *((_DWORD *)this + 43))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 160, 1, 1);
      unsigned int v13 = *((_DWORD *)this + 42);
    }
    unsigned int v14 = (_DWORD *)(*((void *)this + 20) + 16 * v13);
    *unsigned int v14 = a4;
    v14[1] = a3;
    v14[2] = v11;
    v14[3] = 1;
    int v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  int v15 = *(_DWORD *)(*((void *)this + 5) + 144);
  unsigned int v16 = *((_DWORD *)this + 68);
  if (v16 == *((_DWORD *)this + 69))
  {
    DgnArray<FstSearchLeafLatticeDurationBackoffActiveToken>::reallocElts((uint64_t)this + 264, 1, 1);
    unsigned int v16 = *((_DWORD *)this + 68);
  }
  uint64_t v17 = *((void *)this + 33) + 40 * v16;
  *(_DWORD *)uint64_t v17 = a2;
  *(_DWORD *)(v17 + 4) = v15;
  *(_DWORD *)(v17 + 8) = v9;
  *(_WORD *)(v17 + 12) = -2;
  *(void *)(v17 + 32) = 0;
  *(void *)(v17 + 16) = 0;
  *(void *)(v17 + 22) = 0;
  LODWORD(v17) = *((_DWORD *)this + 68) + 1;
  *((_DWORD *)this + 68) = v17;
  *((_DWORD *)this + 38) = v17;

  return FstSearchLeafLatticeDurationBackoff::propagateNulls((uint64_t)this, 20000, a3, a5);
}

uint64_t FstSearchLeafLatticeDuration::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(unsigned int *)(result + 300);
  if (v8 != -1)
  {
    int v9 = (void *)result;
    uint64_t v10 = (unsigned int *)(*(void *)(result + 160) + 16 * v8);
    for (i = *(unsigned int *)(*(void *)(result + 176) + 28 * v10[2] + 12); i != -1; uint64_t v8 = v16)
    {
      uint64_t v16 = i;
      uint64_t result = v9[5];
      if (*v10 == 16777209)
      {
        int v17 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        uint64_t result = ArcGraph::lexToCWID((ArcGraph *)result, *v10, a3, (uint64_t)a4, a5, a6, a7, a8);
        int v17 = result;
      }
      uint64_t v18 = *(unsigned int *)(a2 + 8);
      if (v18 == *(_DWORD *)(a2 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        uint64_t v18 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(void *)a2 + 4 * v18) = v17;
      ++*(_DWORD *)(a2 + 8);
      uint64_t v19 = *(unsigned int *)(a6 + 8);
      if (v19 == *(_DWORD *)(a6 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        uint64_t v19 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(void *)a6 + 4 * v19) = v8;
      ++*(_DWORD *)(a6 + 8);
      uint64_t v20 = v9[20];
      int v21 = *(_DWORD *)(v20 + 16 * v8 + 4);
      uint64_t v22 = *(unsigned int *)(a3 + 8);
      if (v22 == *(_DWORD *)(a3 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        uint64_t v22 = *(unsigned int *)(a3 + 8);
        uint64_t v20 = v9[20];
      }
      *(_DWORD *)(*(void *)a3 + 4 * v22) = v21;
      ++*(_DWORD *)(a3 + 8);
      int v23 = *(_DWORD *)(v9[22] + 28 * *(unsigned int *)(v20 + 16 * v8 + 8));
      uint64_t v24 = *(unsigned int *)(a5 + 8);
      if (v24 == *(_DWORD *)(a5 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        uint64_t v24 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(void *)a5 + 4 * v24) = v23;
      ++*(_DWORD *)(a5 + 8);
      uint64_t v10 = (unsigned int *)(v9[20] + 16 * v16);
      uint64_t i = *(unsigned int *)(v9[22] + 28 * v10[2] + 12);
    }
    *a4 = *v10;
  }
  return result;
}

void FstSearchLeafLatticeDuration::checkSearchParametersValidityForArcGraph(FstSearchLeafLatticeDuration *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *((void *)this + 5);
  if (*(unsigned char *)(v8 + 178))
  {
    int v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(unsigned char *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    }
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    }
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(void *)(**(void **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((void *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if (a2)
      {
        if (!*(unsigned char *)(v8 + 203)) {
          return;
        }
      }
      else if (*(unsigned char *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(unsigned char *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

uint64_t FstSearchLeafLatticeDuration::makePartialResult(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    uint64_t v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(void *)a2 + v9))(*(void *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  unsigned int BestTrace = FstSearchLeafLatticeDurationBackoff::getBestTrace((uint64_t)a1, 0, 0, 1);
  if (BestTrace == -1) {
    return 1879048192;
  }
  unsigned int v15 = BestTrace;
  FstSearchLeafLatticeDurationBackoff::getHistory((uint64_t)a1, BestTrace, a3, a4, v11, v12, v13, v14);
  memset(v25, 0, sizeof(v25));
  int v26 = 0;
  if (*(_DWORD *)(a3 + 8))
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    int v18 = 0;
    do
    {
      uint64_t v19 = *(void *)a3 + v16;
      int v20 = *(_DWORD *)(v19 + 28);
      WordLatticeLC::WordLatticeLC((uint64_t)v24, v19, v18, *(_DWORD *)(v19 + 24) - v18, v20 - *(_DWORD *)(v19 + 24), (uint64_t)v25);
      uint64_t v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(void *)a2 + 112 * v21), (const WordLatticeLC *)v24);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v24);
      ++v17;
      v16 += 32;
      int v18 = v20;
    }
    while (v17 < *(unsigned int *)(a3 + 8));
  }
  uint64_t v22 = a1[20] + 16 * v15;
  return (*(_DWORD *)(a1[22] + 28 * *(unsigned int *)(v22 + 8))
                      + *(_DWORD *)(a1[11] + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_213E4C470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t FstSearchLeafLatticeBackoff::maybeGeneratePelMaps(FstSearchLeafLatticeBackoff *this, const PicMgr *a2)
{
  return PicMgr::getPelPhoneMap((unint64_t)a2, (uint64_t)this + 224, (uint64_t)this + 208);
}

int64x2_t FstSearchLeafLatticeBackoff::advanceDeltas(FstSearchLeafLatticeBackoff *this, int a2, int a3, SearchStats *a4, int a5)
{
  int v8 = a2;
  v137[0] = a2;
  int64x2_t v135 = 0u;
  int64x2_t v136 = 0u;
  SnapTime::recordTime((SnapTime *)&v135, 1, 0, 0, 0);
  int64x2_t v106 = (int *)((char *)this + 280);
  *((_DWORD *)this + 70) = a3;
  int v10 = *((_DWORD *)this + 2);
  unsigned int v11 = *((_DWORD *)this + 62);
  if (v11)
  {
    int v98 = a5;
    uint64_t v99 = a4;
    int v100 = v8;
    unsigned int v109 = 0;
    LODWORD(v12) = 0;
    uint64_t v13 = (uint64_t *)((char *)this + 192);
    uint64_t v105 = (char *)this + 256;
    uint64_t v108 = *((unsigned int *)this + 2);
    do
    {
      uint64_t v14 = *((void *)this + 30);
      uint64_t v15 = v12;
      uint64_t v16 = *(unsigned int *)(v14 + 32 * v12 + 4);
      if (v11 <= (int)v12 + 1) {
        unsigned int v17 = v12 + 1;
      }
      else {
        unsigned int v17 = v11;
      }
      unsigned int v101 = v12;
      while (v17 - 1 != v12)
      {
        uint64_t v12 = (v12 + 1);
        if (*(_DWORD *)(v14 + 32 * v12 + 4) != v16) {
          goto LABEL_11;
        }
      }
      LODWORD(v12) = v17;
LABEL_11:
      uint64_t v18 = *((void *)this + 5);
      if (*(_DWORD *)(v18 + 160) != v16)
      {
        BOOL v19 = *(_DWORD *)(v18 + 140) <= (int)v16 || v101 >= v12;
        uint64_t v102 = v16;
        int v103 = v12;
        uint64_t v110 = v15;
        if (!v19)
        {
          uint64_t v20 = v12;
          uint64_t v21 = v15;
          uint64_t v116 = v12;
          do
          {
            if (*((_DWORD *)this + 19) + *((_DWORD *)this + 70) >= 5000) {
              int v22 = 5000;
            }
            else {
              int v22 = *((_DWORD *)this + 19) + *((_DWORD *)this + 70);
            }
            int ScoreAllowBackoff_updateNodeInSequence = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(*((void *)this + 30) + 32 * v21 + 12), *(_DWORD *)(*((void *)this + 30) + 32 * v21), v22);
            int v24 = *((_DWORD *)this + 70);
            if (ScoreAllowBackoff_updateNodeInSequence - v10 <= v24)
            {
              int v25 = ScoreAllowBackoff_updateNodeInSequence;
              if (v24 > ScoreAllowBackoff_updateNodeInSequence) {
                *int64x2_t v106 = ScoreAllowBackoff_updateNodeInSequence;
              }
              uint64_t v26 = *((void *)this + 30) + 32 * v21;
              uint64_t v27 = *(void *)(v26 + 4);
              __int16 v28 = *(_WORD *)(v26 + 12);
              __int16 v118 = *(_WORD *)(v26 + 14);
              uint64_t v29 = *(void *)(v26 + 16);
              uint64_t v30 = *(unsigned __int16 *)(v26 + 28);
              unsigned int v31 = *((_DWORD *)this + 50);
              unsigned int v32 = v31;
              if (*(_WORD *)(v26 + 28))
              {
                unsigned int v33 = *(_DWORD *)(v26 + 24);
                uint64_t v34 = *v13;
                uint64_t v35 = v30;
                unsigned int v32 = *((_DWORD *)this + 50);
                do
                {
                  __int16 v36 = *(_WORD *)(v34 + 2 * v33);
                  if (v32 == *((_DWORD *)this + 51))
                  {
                    DgnPrimArray<short>::reallocElts((uint64_t)this + 192, 1, 1);
                    unsigned int v32 = *((_DWORD *)this + 50);
                    uint64_t v34 = *((void *)this + 24);
                  }
                  *(_WORD *)(v34 + 2 * v32++) = v36;
                  *((_DWORD *)this + 50) = v32;
                  ++v33;
                  --v35;
                }
                while (v35);
              }
              if (v32 == *((_DWORD *)this + 51))
              {
                DgnPrimArray<short>::reallocElts((uint64_t)this + 192, 1, 1);
                unsigned int v32 = *((_DWORD *)this + 50);
              }
              *(_WORD *)(*((void *)this + 24) + 2 * v32) = v28;
              *((_DWORD *)this + 50) = v32 + 1;
              uint64_t v37 = *((unsigned int *)this + 66);
              if (v37 == *((_DWORD *)this + 67))
              {
                DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)v105, 1, 1);
                uint64_t v37 = *((unsigned int *)this + 66);
              }
              uint64_t v38 = *((void *)this + 32) + 32 * v37;
              *(_DWORD *)uint64_t v38 = v25;
              *(void *)(v38 + 4) = v27;
              *(_WORD *)(v38 + 12) = v28;
              *(_WORD *)(v38 + 14) = v118;
              *(void *)(v38 + 16) = v29;
              *(_DWORD *)(v38 + 24) = v31;
              *(_WORD *)(v38 + 28) = v30 + 1;
              int v39 = *((_DWORD *)this + 66) + 1;
              *((_DWORD *)this + 66) = v39;
              uint64_t v15 = v110;
              int v10 = v108;
              if (v21 == v110)
              {
                int v40 = v109;
                if (HIDWORD(v108) == 2 * *((_DWORD *)this + 4)) {
                  int v40 = v39;
                }
                ++HIDWORD(v108);
                unsigned int v109 = v40;
              }
              uint64_t v16 = v102;
              LODWORD(v12) = v103;
              uint64_t v20 = v116;
            }
            ++v21;
          }
          while (v21 != v20);
        }
        uint64_t v41 = v12;
        unsigned int v42 = v16;
        do
        {
          uint64_t v43 = *((void *)this + 5);
          uint64_t v44 = *(void *)(v43 + 152);
          unsigned int v45 = *(_DWORD *)(v44 + 4 * v42);
          int v46 = *(_DWORD *)(v43 + 140);
          int v113 = *(_DWORD *)(v44 + 4 * (v42 + 1));
          unsigned int v104 = v42;
          if (v46 <= v113)
          {
            if (*((unsigned char *)this + 404)) {
              BOOL v66 = v46 <= (int)v16;
            }
            else {
              BOOL v66 = 0;
            }
            if (v66)
            {
              unsigned int v67 = (v45 & 0xFFFFF) <= 0xFFFF3 ? v45 & 0xFFFFF : v45 & 0xFFFFF | 0xF00000;
              if (v67 != 16777210)
              {
                DgnString::DgnString((DgnString *)&v132);
                ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v67, (DgnString *)&v132, v68, v69, v70, v71, v72);
                uint64_t v77 = &unk_214099300;
                if (v132.i32[2]) {
                  uint64_t v77 = (void *)v132.i64[0];
                }
                xprintf("Seed from state %d score %d trace %d, %s\n", v73, v74, v75, v76, v16, *(unsigned int *)(*((void *)this + 30) + 32 * v15), *(unsigned int *)(*((void *)this + 30) + 32 * v15 + 8), v77);
                MiniFst::seed((uint64_t)this + 288, *(_DWORD *)(*((void *)this + 30) + 32 * v15), *(_DWORD *)(*((void *)this + 30) + 32 * v15 + 20), *(_DWORD *)(*((void *)this + 30) + 32 * v15 + 8), v113);
                DgnString::~DgnString((DgnString *)&v132);
              }
            }
          }
          else
          {
            if (*((_DWORD *)this + 19) + *((_DWORD *)this + 70) >= 5000) {
              int v47 = 5000;
            }
            else {
              int v47 = *((_DWORD *)this + 19) + *((_DWORD *)this + 70);
            }
            int v111 = (v45 >> 20) & 0x3FF;
            unsigned int v112 = *(_DWORD *)(v44 + 4 * v42);
            int v48 = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), (unsigned __int16)v112, *(_DWORD *)(*((void *)this + 30) + 32 * v15) + ((v112 >> 20) & 0x3FF), v47);
            if (v101 < v12)
            {
              int v49 = v48 - *(_DWORD *)(*((void *)this + 30) + 32 * v15);
              uint64_t v50 = v15;
              int v107 = v49;
              do
              {
                uint64_t v51 = *((void *)this + 30) + 32 * v50;
                int v52 = *(_DWORD *)v51 + v49;
                int v53 = *((_DWORD *)this + 70);
                if (v52 - v10 <= v53)
                {
                  uint64_t v54 = v41;
                  if (v53 > v52) {
                    *int64x2_t v106 = v52;
                  }
                  __int16 v119 = *(_WORD *)(v51 + 14);
                  int v114 = *(_DWORD *)(v51 + 16);
                  int v115 = *(_DWORD *)(v51 + 8);
                  int v117 = *(_DWORD *)(v51 + 20);
                  uint64_t v55 = *(unsigned __int16 *)(v51 + 28);
                  unsigned int v56 = *((_DWORD *)this + 50);
                  unsigned int v57 = v56;
                  if (*(_WORD *)(v51 + 28))
                  {
                    unsigned int v58 = *(_DWORD *)(v51 + 24);
                    uint64_t v59 = *v13;
                    uint64_t v60 = v55;
                    unsigned int v57 = *((_DWORD *)this + 50);
                    do
                    {
                      __int16 v61 = *(_WORD *)(v59 + 2 * v58);
                      if (v57 == *((_DWORD *)this + 51))
                      {
                        DgnPrimArray<short>::reallocElts((uint64_t)this + 192, 1, 1);
                        unsigned int v57 = *((_DWORD *)this + 50);
                        uint64_t v59 = *((void *)this + 24);
                      }
                      *(_WORD *)(v59 + 2 * v57++) = v61;
                      *((_DWORD *)this + 50) = v57;
                      ++v58;
                      --v60;
                    }
                    while (v60);
                  }
                  if (v57 == *((_DWORD *)this + 51))
                  {
                    DgnPrimArray<short>::reallocElts((uint64_t)this + 192, 1, 1);
                    unsigned int v57 = *((_DWORD *)this + 50);
                  }
                  unsigned int v45 = v112;
                  *(_WORD *)(*((void *)this + 24) + 2 * v57) = v112;
                  *((_DWORD *)this + 50) = v57 + 1;
                  uint64_t v62 = *((unsigned int *)this + 66);
                  uint64_t v41 = v54;
                  if (v62 == *((_DWORD *)this + 67))
                  {
                    DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)v105, 1, 1);
                    uint64_t v62 = *((unsigned int *)this + 66);
                  }
                  uint64_t v63 = *((void *)this + 32) + 32 * v62;
                  *(_DWORD *)uint64_t v63 = v52;
                  *(_DWORD *)(v63 + 4) = v113;
                  *(_DWORD *)(v63 + 8) = v115;
                  *(_WORD *)(v63 + 12) = v112;
                  *(_WORD *)(v63 + 14) = v119;
                  *(_DWORD *)(v63 + 16) = v114 + v111;
                  *(_DWORD *)(v63 + 20) = v117;
                  *(_DWORD *)(v63 + 24) = v56;
                  *(_WORD *)(v63 + 28) = v55 + 1;
                  int v64 = *((_DWORD *)this + 66) + 1;
                  *((_DWORD *)this + 66) = v64;
                  uint64_t v15 = v110;
                  int v10 = v108;
                  if (v50 == v110)
                  {
                    int v65 = v109;
                    if (HIDWORD(v108) == 2 * *((_DWORD *)this + 4)) {
                      int v65 = v64;
                    }
                    ++HIDWORD(v108);
                    unsigned int v109 = v65;
                  }
                  int v49 = v107;
                }
                ++v50;
              }
              while (v50 != v41);
            }
          }
          unsigned int v42 = v104 + 2;
          uint64_t v16 = v102;
          LODWORD(v12) = v103;
        }
        while ((v45 & 0x80000000) == 0);
        unsigned int v11 = *((_DWORD *)this + 62);
      }
    }
    while (v12 < v11);
    a3 = *v106;
    int v8 = v100;
    a4 = v99;
    a5 = v98;
    unsigned int v79 = HIDWORD(v108);
    unsigned int v78 = v109;
  }
  else
  {
    unsigned int v79 = 0;
    unsigned int v78 = 0;
  }
  int v134 = a3 + v10;
  if (*((unsigned char *)this + 404)) {
    MiniFst::updateFrame((char *)this + 288, v106, v10, v8);
  }
  int64x2_t v132 = 0u;
  int64x2_t v133 = 0u;
  SnapTime::recordTime((SnapTime *)&v132, 1, 0, 0, 0);
  int64x2_t v132 = vsubq_s64(v132, v135);
  int64x2_t v133 = vsubq_s64(v133, v136);
  uint64_t v80 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v81 = vaddq_s64(v80[1], v133);
  *uint64_t v80 = vaddq_s64(*v80, v132);
  v80[1] = v81;
  int64x2_t v130 = 0u;
  int64x2_t v131 = 0u;
  SnapTime::recordTime((SnapTime *)&v130, 1, 0, 0, 0);
  if (v79 > 2 * *((_DWORD *)this + 4)) {
    FstSearchLeafLatticeBackoff::applyCutoffOnEmitting((uint64_t)this, v78, &v134);
  }
  int64x2_t v128 = 0u;
  int64x2_t v129 = 0u;
  SnapTime::recordTime((SnapTime *)&v128, 1, 0, 0, 0);
  int64x2_t v82 = vsubq_s64(v128, v130);
  uint64_t v83 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v84 = v83[3];
  int64x2_t v85 = vaddq_s64(v83[2], v82);
  int64x2_t v128 = v82;
  int64x2_t v129 = vsubq_s64(v129, v131);
  int64x2_t v86 = vaddq_s64(v84, v129);
  v83[2] = v85;
  v83[3] = v86;
  int64x2_t v126 = 0u;
  int64x2_t v127 = 0u;
  SnapTime::recordTime((SnapTime *)&v126, 1, 0, 0, 0);
  FstSearchLeafLatticeBackoff::makeViterbiDecisionOnEmitting((uint64_t)this);
  unint64_t v87 = *((unsigned int *)this + 6);
  if (v87)
  {
    unint64_t v88 = *((unsigned int *)this + 62);
    if (v87 < v88) {
      mrec_nth_element<FstSearchLeafLatticeBackoffcmpTok>(*((void *)this + 30), v87, v88);
    }
  }
  int64x2_t v124 = 0u;
  int64x2_t v125 = 0u;
  SnapTime::recordTime((SnapTime *)&v124, 1, 0, 0, 0);
  int64x2_t v89 = vsubq_s64(v124, v126);
  uint64_t v90 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v91 = v90[5];
  int64x2_t v92 = vaddq_s64(v90[4], v89);
  int64x2_t v124 = v89;
  int64x2_t v125 = vsubq_s64(v125, v127);
  int64x2_t v93 = vaddq_s64(v91, v125);
  v90[4] = v92;
  v90[5] = v93;
  int64x2_t v122 = 0u;
  int64x2_t v123 = 0u;
  SnapTime::recordTime((SnapTime *)&v122, 1, 0, 0, 0);
  *((_DWORD *)this + 66) = 0;
  uint64_t v94 = *((unsigned int *)this + 62);
  *((_DWORD *)this + 38) = v94;
  if (a4)
  {
    *((void *)a4 + 2) += v94;
    if (*((_DWORD *)a4 + 2) > v94) {
      LODWORD(v94) = *((_DWORD *)a4 + 2);
    }
    *((_DWORD *)a4 + 2) = v94;
  }
  if (*((unsigned char *)this + 404)) {
    FstSearchLeafLatticeBackoff::seedFromMiniFst((uint64_t)this, v137);
  }
  if (a5) {
    FstSearchLeafLatticeBackoff::propagateNulls((uint64_t)this, v134, v8, a4);
  }
  *((_DWORD *)this + 68) = v8;
  int64x2_t v120 = 0u;
  int64x2_t v121 = 0u;
  SnapTime::recordTime((SnapTime *)&v120, 1, 0, 0, 0);
  uint64_t v95 = (int64x2_t *)*((void *)this + 13);
  int64x2_t result = vaddq_s64(v95[6], vsubq_s64(v120, v122));
  int64x2_t v97 = vaddq_s64(v95[7], vsubq_s64(v121, v123));
  v95[6] = result;
  v95[7] = v97;
  return result;
}

void sub_213E4CCEC(_Unwind_Exception *exception_object)
{
}

uint64_t FstSearchLeafLatticeBackoff::applyCutoffOnEmitting(uint64_t this, unsigned int a2, int *a3)
{
  unint64_t v4 = *(unsigned int *)(this + 264);
  if (v4 > a2)
  {
    uint64_t v6 = this;
    int v7 = (void *)(this + 256);
    uint64_t v8 = a2;
    this = mrec_nth_element<FstSearchLeafLatticeBackoffcmpTok>(*(void *)(this + 256), a2, v4);
    int v9 = *(_DWORD *)(*v7 + 32 * a2);
    if (*a3 > v9) {
      *a3 = v9;
    }
    unsigned int v10 = *(_DWORD *)(v6 + 268);
    if (a2 > v10) {
      this = DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)v7, a2 - v10, 0);
    }
    uint64_t v11 = *(unsigned int *)(v6 + 264);
    if (v11 < a2)
    {
      uint64_t v12 = v8 - v11;
      uint64_t v13 = 32 * v11;
      do
      {
        uint64_t v14 = *v7 + v13;
        *(void *)uint64_t v14 = 0xFFFFFFFF00000000;
        *(_DWORD *)(v14 + 8) = -1;
        *(_WORD *)(v14 + 12) = -2;
        *(void *)(v14 + 16) = 0;
        *(void *)(v14 + 22) = 0;
        v13 += 32;
        --v12;
      }
      while (v12);
    }
    *(_DWORD *)(v6 + 2DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 64) = a2;
  }
  return this;
}

uint64_t FstSearchLeafLatticeBackoff::makeViterbiDecisionOnEmitting(uint64_t this)
{
  uint64_t v1 = this;
  unint64_t v2 = *(unsigned int *)(this + 264);
  if (v2)
  {
    this = (uint64_t)mrec_qsort_r<FstSearchLateLatticeHashBackoffActiveToken>(*(char **)(this + 256), v2, 32);
    int v3 = *(_DWORD *)(v1 + 264);
    *(_DWORD *)(v1 + 248) = 0;
    if (v3)
    {
      unsigned int v4 = 0;
      unint64_t v5 = 0;
      unsigned int v6 = 0;
      do
      {
        uint64_t v7 = *(void *)(v1 + 256);
        if (v5 && (uint64_t v8 = v7 + 32 * v5, *(_DWORD *)(v8 + 4) == *(_DWORD *)(v8 - 28)))
        {
          if (v4 >= *(_DWORD *)(v1 + 20) + v6) {
            goto LABEL_16;
          }
          unsigned int i = v6;
          if (v6 < v4)
          {
            int v10 = *(_DWORD *)(v7 + 32 * v5 + 20);
            uint64_t v11 = (int *)(*(void *)(v1 + 240) + 32 * v6 + 20);
            for (unsigned int i = v6; v4 != i; ++i)
            {
              int v12 = *v11;
              v11 += 8;
              if (v12 == v10) {
                break;
              }
            }
          }
          if (i != v4) {
            goto LABEL_16;
          }
          int v13 = *(_DWORD *)(v1 + 252);
        }
        else
        {
          uint64_t v8 = v7 + 32 * v5;
          int v13 = *(_DWORD *)(v1 + 252);
          unsigned int v6 = v4;
        }
        if (v4 == v13)
        {
          this = DgnArray<PrefilterResultFrame>::reallocElts(v1 + 240, 1, 1);
          unsigned int v4 = *(_DWORD *)(v1 + 248);
        }
        uint64_t v14 = (_OWORD *)(*(void *)(v1 + 240) + 32 * v4);
        long long v15 = *(_OWORD *)(v8 + 16);
        *uint64_t v14 = *(_OWORD *)v8;
        v14[1] = v15;
        unsigned int v4 = *(_DWORD *)(v1 + 248) + 1;
        *(_DWORD *)(v1 + 248) = v4;
LABEL_16:
        ++v5;
      }
      while (v5 < *(unsigned int *)(v1 + 264));
    }
  }
  else
  {
    *(_DWORD *)(this + 248) = 0;
  }
  return this;
}

uint64_t mrec_nth_element<FstSearchLeafLatticeBackoffcmpTok>(uint64_t result, unint64_t a2, unint64_t a3)
{
  if (a3 >= 2)
  {
    uint64_t v3 = 0;
    do
    {
      unsigned int v4 = (_DWORD *)(result + 32 * v3);
      uint64_t v5 = 0;
      if ((result & 7) != 0)
      {
        unsigned int v6 = &v4[8 * (a3 >> 1)];
        do
        {
          char v7 = *((unsigned char *)v4 + v5);
          *((unsigned char *)v4 + v5) = *((unsigned char *)v6 + v5);
          *((unsigned char *)v6 + v5++) = v7;
        }
        while (v5 != 32);
      }
      else
      {
        uint64_t v8 = result + 32 * (v3 + (a3 >> 1));
        do
        {
          uint64_t v9 = *(void *)((char *)v4 + v5);
          *(void *)((char *)v4 + v5) = *(void *)(v8 + v5);
          *(void *)(v8 + v5) = v9;
          v5 += 8;
        }
        while (v5 != 32);
      }
      int v10 = (_DWORD *)(result + 32 * (v3 + a3) - 32);
      uint64_t v11 = (_DWORD *)(result + 32 * v3);
      do
      {
        int v12 = v11 + 8;
        while (1)
        {
          uint64_t v11 = v12;
          if (v12 >= v10) {
            break;
          }
          v12 += 8;
          if (*v11 > *v4)
          {
            int v13 = (char *)v11;
            while (*v10 >= *v4)
            {
              v10 -= 8;
              if (v11 >= v10) {
                goto LABEL_22;
              }
            }
            uint64_t v14 = 0;
            if ((result & 7) != 0)
            {
              do
              {
                char v15 = *v13;
                *v13++ = *((unsigned char *)v10 + v14);
                *((unsigned char *)v10 + v14++) = v15;
              }
              while (v14 != 32);
            }
            else
            {
              do
              {
                uint64_t v16 = *(void *)v13;
                *(void *)int v13 = *(void *)((char *)v10 + v14);
                v13 += 8;
                *(void *)((char *)v10 + v14) = v16;
                v14 += 8;
              }
              while (v14 != 32);
            }
            v10 -= 8;
            break;
          }
        }
LABEL_22:
        ;
      }
      while (v11 < v10);
      if (*v11 > *v4) {
        v11 -= 8;
      }
      unint64_t v17 = (char *)v11 - (char *)v4;
      if (v11 > v4)
      {
        uint64_t v18 = 0;
        if ((result & 7) != 0)
        {
          do
          {
            char v19 = *((unsigned char *)v11 + v18);
            *((unsigned char *)v11 + v18) = *((unsigned char *)v4 + v18);
            *((unsigned char *)v4 + v18++) = v19;
          }
          while (v18 != 32);
        }
        else
        {
          do
          {
            uint64_t v20 = *(void *)((char *)v11 + v18);
            *(void *)((char *)v11 + v18) = *(void *)((char *)v4 + v18);
            *(void *)((char *)v4 + v18) = v20;
            v18 += 8;
          }
          while (v18 != 32);
        }
      }
      unint64_t v21 = v17 >> 5;
      if (v17 >> 5 <= a2)
      {
        if (v17 >> 5 >= a2) {
          return result;
        }
        unint64_t v22 = v21 + 1;
        v3 += v22;
        a2 -= v22;
        unint64_t v21 = a3 - v22;
      }
      a3 = v21;
    }
    while (v21 > 1);
  }
  return result;
}

uint64_t FstSearchLeafLatticeBackoff::seedFromMiniFst(uint64_t this, int *a2)
{
  if (*(unsigned char *)(this + 404))
  {
    uint64_t v2 = this;
    unsigned int v3 = *(_DWORD *)(this + 312);
    if (v3 >= *(_DWORD *)(this + 20)) {
      unsigned int v3 = *(_DWORD *)(this + 20);
    }
    if (v3)
    {
      unint64_t v4 = 0;
      uint64_t v46 = this + 176;
      uint64_t v5 = (void *)(this + 160);
      uint64_t v39 = this + 240;
      do
      {
        unsigned int v6 = (int *)(*(void *)(v2 + 304) + 36 * v4);
        int v7 = v6[4];
        int v43 = *v6;
        unsigned int v44 = v6[5];
        int v8 = v6[6];
        int v45 = v6[7];
        unsigned int v9 = v6[2];
        uint64_t v47 = 0;
        uint64_t v48 = 0;
        int v41 = v8;
        int v42 = v7;
        if ((v9 & 0x80000000) != 0)
        {
          LODWORD(v13) = -2 - v9;
        }
        else
        {
          uint64_t v10 = 0;
          unsigned int v11 = 0;
          do
          {
            if (v11 == HIDWORD(v48))
            {
              DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v47, 1, 1);
              unsigned int v11 = v48;
              uint64_t v10 = v47;
            }
            *(_DWORD *)(v10 + 4 * v11) = v9;
            uint64_t v12 = v48;
            unsigned int v11 = v48 + 1;
            LODWORD(v48) = v48 + 1;
            unsigned int v9 = *(_DWORD *)(*(void *)(v2 + 288) + 36 * v9 + 8);
          }
          while ((v9 & 0x80000000) == 0);
          LODWORD(v13) = -2 - v9;
          if ((v12 & 0x80000000) == 0)
          {
            int v14 = v12 + 1;
            uint64_t v15 = 4 * v12;
            do
            {
              unsigned int v16 = *(_DWORD *)(v47 + v15);
              uint64_t v17 = *(void *)(v2 + 288);
              uint64_t v18 = (int *)(v17 + 36 * v16);
              int v19 = *v18;
              uint64_t v20 = *((void *)v18 + 2);
              unsigned int v21 = *(_DWORD *)(v2 + 184);
              if (v21 == *(_DWORD *)(v2 + 188))
              {
                DgnArray<CWIDAC>::reallocElts(v46, 1, 1);
                unsigned int v21 = *(_DWORD *)(v2 + 184);
                uint64_t v17 = *(void *)(v2 + 288);
              }
              uint64_t v22 = *(void *)(v2 + 176) + 24 * v21;
              *(_DWORD *)(v2 + 184) = v21 + 1;
              *(_DWORD *)uint64_t v22 = v19;
              *(void *)(v22 + 4) = v20;
              *(_DWORD *)(v22 + 12) = v13;
              *(_DWORD *)(v22 + 16) = 0;
              *(_WORD *)(v22 + 20) = 0;
              uint64_t v23 = *(void *)(v17 + 36 * v16 + 28);
              uint64_t v24 = *(unsigned int *)(v2 + 168);
              if (v24 == *(_DWORD *)(v2 + 172))
              {
                DgnArray<DgnPrimArray<double>>::reallocElts(v2 + 160, 1, 1);
                uint64_t v24 = *(unsigned int *)(v2 + 168);
              }
              uint64_t v25 = *(void *)(v2 + 160);
              uint64_t v26 = v25 + 16 * v24;
              *(void *)uint64_t v26 = v23;
              *(_DWORD *)(v26 + 8) = v21;
              *(_DWORD *)(v26 + 12) = 0;
              uint64_t v13 = *(unsigned int *)(v2 + 168);
              *(_DWORD *)(v2 + 168) = v13 + 1;
              *(_DWORD *)(v25 + 16 * v13 + 12) = 1;
              --v14;
              v15 -= 4;
            }
            while (v14 > 0);
          }
        }
        unsigned int v27 = *(_DWORD *)(v2 + 184);
        if (v27 == *(_DWORD *)(v2 + 188))
        {
          DgnArray<CWIDAC>::reallocElts(v46, 1, 1);
          unsigned int v27 = *(_DWORD *)(v2 + 184);
        }
        uint64_t v28 = *(void *)(v2 + 176);
        *(_DWORD *)(v2 + 184) = v27 + 1;
        uint64_t v29 = v28 + 24 * v27;
        *(_DWORD *)uint64_t v29 = v43;
        *(_DWORD *)(v29 + 4) = v42;
        *(_DWORD *)(v29 + 8) = v44;
        *(_DWORD *)(v29 + 12) = v13;
        *(_DWORD *)(v29 + 16) = 0;
        *(_WORD *)(v29 + 20) = 0;
        if (v45 == 16777213)
        {
          int v45 = 16777209;
          if (*(_DWORD *)(*v5 + 16 * v13) == 16777209)
          {
            unsigned int v27 = *(_DWORD *)(*v5 + 16 * v13 + 8);
            int v45 = 16777209;
          }
        }
        int v30 = *a2;
        uint64_t v31 = *(unsigned int *)(v2 + 168);
        if (v31 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<DgnPrimArray<double>>::reallocElts(v2 + 160, 1, 1);
          uint64_t v31 = *(unsigned int *)(v2 + 168);
        }
        uint64_t v32 = *(void *)(v2 + 160);
        unsigned int v33 = (int *)(v32 + 16 * v31);
        *unsigned int v33 = v45;
        v33[1] = v30;
        v33[2] = v27;
        v33[3] = 0;
        uint64_t v34 = *(unsigned int *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v34 + 1;
        *(_DWORD *)(v32 + 16 * v34 + 12) = 1;
        uint64_t v35 = *(unsigned int *)(v2 + 248);
        if (v35 == *(_DWORD *)(v2 + 252))
        {
          DgnArray<PrefilterResultFrame>::reallocElts(v39, 1, 1);
          uint64_t v35 = *(unsigned int *)(v2 + 248);
        }
        uint64_t v36 = *(void *)(v2 + 240) + 32 * v35;
        *(_DWORD *)uint64_t v36 = v43;
        *(_DWORD *)(v36 + 4) = v41;
        *(_DWORD *)(v36 + 8) = v34;
        *(_WORD *)(v36 + 12) = -2;
        *(_DWORD *)(v36 + 16) = v42;
        *(void *)(v36 + 20) = v44;
        *(_WORD *)(v36 + 28) = 0;
        ++*(_DWORD *)(v2 + 248);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v47);
        ++v4;
        LODWORD(v37) = *(_DWORD *)(v2 + 312);
        unsigned int v38 = *(_DWORD *)(v2 + 20);
        if (v37 >= v38) {
          unint64_t v37 = v38;
        }
        else {
          unint64_t v37 = v37;
        }
      }
      while (v4 < v37);
    }
  }
  return this;
}

void sub_213E4D43C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLeafLatticeBackoff::propagateNulls(uint64_t this, int a2, int a3, SearchStats *a4)
{
  int v4 = *(_DWORD *)(this + 168);
  uint64_t v5 = (uint64_t *)(this + 240);
  LODWORD(v6) = *(_DWORD *)(this + 248);
  uint64_t v87 = this;
  if (v6)
  {
    int v74 = *(_DWORD *)(this + 168);
    uint64_t v75 = a4;
    LODWORD(v7) = 0;
    int64x2_t v85 = (void *)(this + 160);
    uint64_t v81 = this + 176;
    uint64_t v90 = this + 240;
    int v89 = a2;
    do
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(unsigned int *)(*v5 + 32 * v7 + 4);
      if (v6 <= (int)v7 + 1) {
        int v10 = v7 + 1;
      }
      else {
        int v10 = v6;
      }
      unsigned int v79 = v7;
      while (v10 - 1 != v7)
      {
        uint64_t v7 = (v7 + 1);
        if (*(_DWORD *)(*v5 + 32 * v7 + 4) != v9) {
          goto LABEL_11;
        }
      }
      LODWORD(v7) = v10;
LABEL_11:
      uint64_t v11 = *(void *)(this + 40);
      if (*(_DWORD *)(v11 + 160) != v9
        && (*(_DWORD *)(v11 + 140) <= (int)v9 || (*(_DWORD *)(*(void *)(v11 + 152) + 4 * v9) & 0x40000000) != 0))
      {
        uint64_t v93 = 32 * v8;
        int v77 = v9;
        unsigned int v78 = v7;
        int v76 = v7 - v79;
        unsigned int v12 = v9;
        do
        {
          uint64_t v13 = *(void *)(this + 40);
          uint64_t v14 = *(void *)(v13 + 152);
          unsigned int v83 = v12;
          unsigned int v88 = *(_DWORD *)(v14 + 4 * v12);
          int v15 = *(_DWORD *)(v13 + 140);
          int v92 = *(_DWORD *)(v14 + 4 * (v12 + 1));
          if (v15 <= v92)
          {
            int v16 = (v88 & 0xFFFFF) <= 0xFFFF3 ? v88 & 0xFFFFF : v88 & 0xFFFFF | 0xF00000;
            BOOL v17 = v16 != 16777210 && v15 <= v77;
            if (!v17 && v78 > v79)
            {
              uint64_t v19 = 0;
              int v20 = (v88 >> 20) & 0x3FF;
              int v84 = v16 + 1;
              int v21 = v76;
              int v91 = v16;
              do
              {
                uint64_t v22 = *v5;
                uint64_t v23 = *v5 + v93;
                int v24 = *(_DWORD *)(v23 + v19) + v20;
                if (v24 > a2) {
                  break;
                }
                uint64_t v25 = v23 + v19;
                int v26 = *(_DWORD *)(v25 + 8);
                __int16 v27 = *(_WORD *)(v25 + 12);
                __int16 v28 = *(_WORD *)(v25 + 14);
                int v29 = *(_DWORD *)(v25 + 20);
                int v30 = *(_DWORD *)(v25 + 24);
                __int16 v31 = *(_WORD *)(v25 + 28);
                int v32 = *(_DWORD *)(v25 + 16) + v20;
                if (v16 == 16777210)
                {
                  uint64_t v41 = *(unsigned int *)(this + 248);
                  if (v41 == *(_DWORD *)(this + 252))
                  {
                    uint64_t v42 = (uint64_t)v5;
                    int v43 = v30;
                    __int16 v44 = v28;
                    int v45 = v32;
                    __int16 v46 = v27;
                    DgnArray<PrefilterResultFrame>::reallocElts(v42, 1, 1);
                    a2 = v89;
                    __int16 v27 = v46;
                    int v32 = v45;
                    __int16 v28 = v44;
                    int v30 = v43;
                    uint64_t v5 = (uint64_t *)v90;
                    int v20 = (v88 >> 20) & 0x3FF;
                    int v16 = v91;
                    this = v87;
                    uint64_t v41 = *(unsigned int *)(v87 + 248);
                    uint64_t v22 = *(void *)(v87 + 240);
                  }
                  uint64_t v47 = v22 + 32 * v41;
                  *(_DWORD *)uint64_t v47 = v24;
                  *(_DWORD *)(v47 + 4) = v92;
                  *(_DWORD *)(v47 + 8) = v26;
                  *(_WORD *)(v47 + 12) = v27;
                  *(_WORD *)(v47 + 14) = v28;
                  *(_DWORD *)(v47 + 16) = v32;
                  *(_DWORD *)(v47 + 20) = v29;
                  *(_DWORD *)(v47 + 24) = v30;
                  *(_WORD *)(v47 + 28) = v31;
                  ++*(_DWORD *)(this + 248);
                }
                else
                {
                  if (v16 == 16777214) {
                    int v33 = *(_DWORD *)(v25 + 16) + v20;
                  }
                  else {
                    int v33 = 0;
                  }
                  int v86 = *(_DWORD *)(v25 + 16) + v20;
                  if (v16 == 16777214) {
                    int v34 = 0;
                  }
                  else {
                    int v34 = *(_DWORD *)(v25 + 16) + v20;
                  }
                  unsigned int v35 = *(_DWORD *)(this + 184);
                  if (v35 == *(_DWORD *)(this + 188))
                  {
                    int v36 = *(_DWORD *)(v25 + 24);
                    __int16 v82 = *(_WORD *)(v25 + 14);
                    __int16 v37 = *(_WORD *)(v25 + 12);
                    DgnArray<CWIDAC>::reallocElts(v81, 1, 1);
                    __int16 v27 = v37;
                    __int16 v28 = v82;
                    int v30 = v36;
                    int v20 = (v88 >> 20) & 0x3FF;
                    int v16 = v91;
                    this = v87;
                    unsigned int v35 = *(_DWORD *)(v87 + 184);
                  }
                  int v38 = v84 + 2 * v29;
                  uint64_t v39 = *(void *)(this + 176) + 24 * v35;
                  *(_DWORD *)(this + 184) = v35 + 1;
                  *(_DWORD *)uint64_t v39 = v24 - v33;
                  *(_DWORD *)(v39 + 4) = v34;
                  *(_DWORD *)(v39 + 8) = v38;
                  *(_DWORD *)(v39 + 12) = v26;
                  *(_DWORD *)(v39 + 16) = v30;
                  *(_WORD *)(v39 + 20) = v31;
                  unsigned int v40 = *(_DWORD *)(this + 168);
                  if (v19)
                  {
                    uint64_t v5 = (uint64_t *)v90;
                    a2 = v89;
                  }
                  else
                  {
                    uint64_t v5 = (uint64_t *)v90;
                    if (v40 == *(_DWORD *)(this + 172))
                    {
                      int v48 = v30;
                      __int16 v49 = v28;
                      __int16 v50 = v27;
                      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v85, 1, 1);
                      __int16 v27 = v50;
                      __int16 v28 = v49;
                      int v30 = v48;
                      int v20 = (v88 >> 20) & 0x3FF;
                      int v16 = v91;
                      this = v87;
                      unsigned int v40 = *(_DWORD *)(v87 + 168);
                    }
                    uint64_t v51 = (int *)(*(void *)(this + 160) + 16 * v40);
                    int *v51 = v16;
                    v51[1] = a3;
                    v51[2] = v35;
                    v51[3] = 0;
                    int v52 = *(_DWORD *)(this + 168);
                    *(_DWORD *)(this + 168) = v52 + 1;
                    uint64_t v53 = *(unsigned int *)(this + 248);
                    if (v53 == *(_DWORD *)(this + 252))
                    {
                      int v54 = v30;
                      __int16 v55 = v28;
                      __int16 v56 = v27;
                      DgnArray<PrefilterResultFrame>::reallocElts(v90, 1, 1);
                      __int16 v27 = v56;
                      __int16 v28 = v55;
                      int v30 = v54;
                      int v20 = (v88 >> 20) & 0x3FF;
                      int v16 = v91;
                      this = v87;
                      uint64_t v53 = *(unsigned int *)(v87 + 248);
                    }
                    uint64_t v57 = *(void *)(this + 240) + 32 * v53;
                    *(_DWORD *)uint64_t v57 = v24;
                    *(_DWORD *)(v57 + 4) = v92;
                    *(_DWORD *)(v57 + 8) = v52;
                    *(_WORD *)(v57 + 12) = v27;
                    *(_WORD *)(v57 + 14) = v28;
                    *(_DWORD *)(v57 + 16) = v86;
                    *(_DWORD *)(v57 + 20) = v38;
                    *(_DWORD *)(v57 + 24) = v30;
                    *(_WORD *)(v57 + 28) = 0;
                    ++*(_DWORD *)(this + 248);
                    unsigned int v40 = *(_DWORD *)(this + 168);
                    a2 = v89;
                  }
                  uint64_t v58 = *v85 + 16 * (v40 - 1);
                  ++*(_DWORD *)(v58 + 12);
                }
                v19 += 32;
                --v21;
              }
              while (v21);
            }
          }
          unsigned int v12 = v83 + 2;
        }
        while ((v88 & 0x80000000) == 0);
        LODWORD(v6) = *(_DWORD *)(this + 248);
        LODWORD(v7) = v78;
      }
    }
    while (v7 < v6);
    uint64_t v59 = *(unsigned int *)(this + 152);
    if (v6 > v59)
    {
      mrec_qsort_r<FstSearchLateLatticeHashBackoffActiveToken>((char *)(*(void *)(this + 240) + 32 * v59), (v6 - v59), 32);
      this = v87;
      uint64_t v59 = *(unsigned int *)(v87 + 152);
      LODWORD(v6) = *(_DWORD *)(v87 + 248);
    }
    if (v59 < v6)
    {
      unint64_t v60 = v59;
      uint64_t v61 = v59;
      do
      {
        uint64_t v62 = *v5;
        uint64_t v63 = *v5 + 32 * v60;
        uint64_t v64 = v59;
        if (*(_DWORD *)(v63 + 4) != *(_DWORD *)(*v5 + 32 * (v60 - 1) + 4)) {
          goto LABEL_65;
        }
        if ((v59 - v61) < *(_DWORD *)(this + 20))
        {
          int v65 = v61;
          if (v59 > v61)
          {
            BOOL v66 = (int *)(v62 + 32 * v61 + 20);
            int v65 = v61;
            while (1)
            {
              int v67 = *v66;
              v66 += 8;
              if (v67 == *(_DWORD *)(v62 + 32 * v60 + 20)) {
                break;
              }
              if (v59 == ++v65)
              {
                uint64_t v64 = v61;
                goto LABEL_65;
              }
            }
          }
          uint64_t v64 = v61;
          if (v65 == v59)
          {
LABEL_65:
            long long v68 = *(_OWORD *)v63;
            uint64_t v69 = (_OWORD *)(v62 + 32 * v59);
            *(_OWORD *)((char *)v69 + 14) = *(_OWORD *)(v63 + 14);
            *uint64_t v69 = v68;
            uint64_t v59 = (v59 + 1);
            uint64_t v61 = v64;
          }
        }
        ++v60;
        unint64_t v6 = *(unsigned int *)(this + 248);
      }
      while (v60 < v6);
    }
    a4 = v75;
    int v4 = v74;
    if (v75) {
      goto LABEL_68;
    }
  }
  else
  {
    LODWORD(v59) = *(_DWORD *)(this + 152);
    if (a4) {
LABEL_68:
    }
      *((_DWORD *)a4 + 1) += *(_DWORD *)(this + 168) - v4;
  }
  unsigned int v70 = *(_DWORD *)(this + 252);
  if (v59 > v70)
  {
    DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)v5, v59 - v70, 0);
    this = v87;
    LODWORD(v6) = *(_DWORD *)(v87 + 248);
  }
  if (v6 < v59)
  {
    unint64_t v71 = v59 - (unint64_t)v6;
    uint64_t v72 = 32 * v6;
    do
    {
      uint64_t v73 = *v5 + v72;
      *(void *)uint64_t v73 = 0xFFFFFFFF00000000;
      *(_DWORD *)(v73 + 8) = -1;
      *(_WORD *)(v73 + 12) = -2;
      *(void *)(v73 + 16) = 0;
      *(void *)(v73 + 22) = 0;
      v72 += 32;
      --v71;
    }
    while (v71);
  }
  *(_DWORD *)(this + 248) = v59;
  return this;
}

uint64_t FstSearchLeafLatticeBackoff::collectTraces(FstSearchLeafLatticeBackoff *this)
{
  uint64_t v2 = *((unsigned int *)this + 42);
  unsigned int v66 = 0;
  int v65 = 0;
  if (v2)
  {
    unsigned int v3 = MemChunkAlloc(4 * v2, 0);
    unint64_t v4 = 0;
    int v65 = v3;
    unsigned int v66 = v2;
    do
      *((_DWORD *)v3 + v4++) = 0;
    while (v4 < v66);
  }
  unint64_t v5 = *((unsigned int *)this + 62);
  if (v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = v65;
    uint64_t v8 = (unsigned int *)(*((void *)this + 30) + 8);
    do
    {
      unsigned int v10 = *v8;
      v8 += 8;
      uint64_t v9 = v10;
      if (v10 != -1)
      {
        *((_DWORD *)v7 + v9) = 1;
        unint64_t v5 = *((unsigned int *)this + 62);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  LODWORD(v11) = *((_DWORD *)this + 42);
  if (!v11)
  {
    uint64_t v63 = 0;
    uint64_t v64 = 0;
LABEL_54:
    unsigned int v25 = 0;
    *((_DWORD *)this + 42) = 0;
    goto LABEL_55;
  }
  char v12 = 0;
  uint64_t v13 = (uint64_t *)((char *)this + 160);
  uint64_t v14 = v65;
  int v15 = (uint64_t *)((char *)this + 176);
  do
  {
    uint64_t v11 = (v11 - 1);
    if (v12)
    {
      char v12 = 1;
    }
    else if (*(_DWORD *)(*v13 + 16 * v11) == 16777213)
    {
      char v12 = 1;
      *((_DWORD *)v14 + v11) = 1;
    }
    else
    {
      char v12 = 0;
    }
    if (*((_DWORD *)v14 + v11))
    {
      uint64_t v16 = *v13 + 16 * v11;
      int v17 = *(_DWORD *)(v16 + 12);
      if (v17 >= 1)
      {
        unsigned int v18 = *(_DWORD *)(v16 + 8);
        int v19 = v17 + v18;
        uint64_t v20 = *v15;
        do
        {
          uint64_t v21 = *(unsigned int *)(v20 + 24 * v18 + 12);
          if (v21 != -1) {
            *((_DWORD *)v14 + v21) = 1;
          }
          ++v18;
        }
        while ((int)v18 < v19);
      }
    }
  }
  while (v11);
  unsigned int v22 = *((_DWORD *)this + 42);
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  if (!v22) {
    goto LABEL_54;
  }
  unint64_t v23 = 0;
  unsigned int v24 = 0;
  unsigned int v25 = 0;
  do
  {
    if (*((_DWORD *)v65 + v23))
    {
      uint64_t v26 = *v13;
      unsigned int v62 = v24;
      if (v23 != v24)
      {
        *(_OWORD *)(v26 + 16 * v24) = *(_OWORD *)(v26 + 16 * v23);
        uint64_t v26 = *v13;
      }
      *(_DWORD *)(v26 + 16 * v24 + 8) = v25;
      uint64_t v27 = v26 + 16 * v23;
      uint64_t v28 = *(unsigned int *)(v27 + 8);
      uint64_t v29 = (*(_DWORD *)(v27 + 12) + v28);
      if (v28 < v29)
      {
        uint64_t v30 = *v15;
        do
        {
          unsigned int v31 = v25;
          if (v28 != v25)
          {
            int v32 = (long long *)(v30 + 24 * v28);
            uint64_t v33 = v30 + 24 * v25;
            long long v34 = *v32;
            *(void *)(v33 + 14) = *(void *)((char *)v32 + 14);
            *(_OWORD *)uint64_t v33 = v34;
            uint64_t v30 = *v15;
          }
          uint64_t v35 = v30 + 24 * v25;
          unsigned int v38 = *(_DWORD *)(v35 + 12);
          int v36 = (_DWORD *)(v35 + 12);
          uint64_t v37 = v38;
          if (v38 != -1) {
            *int v36 = *((_DWORD *)v65 + v37);
          }
          int v39 = v64;
          if (*(_WORD *)(v30 + 24 * v31 + 20))
          {
            unsigned int v40 = 0;
            unsigned int v41 = v64;
            do
            {
              __int16 v42 = *(_WORD *)(*((void *)this + 24) + 2 * (v40 + *(_DWORD *)(v30 + 24 * v31 + 16)));
              if (v41 == HIDWORD(v64))
              {
                DgnPrimArray<short>::reallocElts((uint64_t)&v63, 1, 1);
                unsigned int v41 = v64;
                uint64_t v30 = *v15;
              }
              *(_WORD *)(v63 + 2 * v41++) = v42;
              LODWORD(vDgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 64) = v41;
              ++v40;
            }
            while (v40 < *(unsigned __int16 *)(v30 + 24 * v31 + 20));
          }
          *(_DWORD *)(v30 + 24 * v31 + 16) = v39;
          unsigned int v25 = v31 + 1;
          ++v28;
        }
        while (v28 != v29);
      }
      *((_DWORD *)v65 + v23) = v62;
      unsigned int v24 = v62 + 1;
      unsigned int v22 = *((_DWORD *)this + 42);
      uint64_t v13 = (uint64_t *)((char *)this + 160);
    }
    ++v23;
  }
  while (v23 < v22);
  unsigned int v43 = *((_DWORD *)this + 43);
  if (v24 > v43)
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v13, v24 - v43, 0);
    unsigned int v22 = *((_DWORD *)this + 42);
  }
  if (v22 < v24)
  {
    unint64_t v44 = v24 - (unint64_t)v22;
    int v45 = (_OWORD *)(*v13 + 16 * v22);
    do
    {
      *v45++ = xmmword_2140992B0;
      --v44;
    }
    while (v44);
  }
  *((_DWORD *)this + 42) = v24;
  unsigned int v46 = *((_DWORD *)this + 47);
  if (v25 > v46) {
    DgnArray<CWIDAC>::reallocElts((uint64_t)this + 176, v25 - v46, 0);
  }
  uint64_t v47 = *((unsigned int *)this + 46);
  if (v47 < v25)
  {
    uint64_t v48 = v25 - v47;
    __int16 v49 = (_WORD *)(*v15 + 24 * v47 + 20);
    do
    {
      *(_OWORD *)(v49 - 10) = xmmword_2140992A0;
      *((_DWORD *)v49 - 1) = 0;
      *__int16 v49 = 0;
      v49 += 12;
      --v48;
    }
    while (v48);
  }
LABEL_55:
  *((_DWORD *)this + 46) = v25;
  unint64_t v50 = *((unsigned int *)this + 62);
  if (v50)
  {
    unint64_t v51 = 0;
    uint64_t v52 = v64;
    uint64_t v53 = *((void *)this + 30);
    do
    {
      if (*(_WORD *)(v53 + 32 * v51 + 28))
      {
        unsigned int v54 = 0;
        LODWORD(v55) = v52;
        do
        {
          __int16 v56 = *(_WORD *)(*((void *)this + 24) + 2 * (v54 + *(_DWORD *)(v53 + 32 * v51 + 24)));
          if (v55 == HIDWORD(v64))
          {
            DgnPrimArray<short>::reallocElts((uint64_t)&v63, 1, 1);
            LODWORD(v55) = v64;
            uint64_t v53 = *((void *)this + 30);
          }
          *(_WORD *)(v63 + 2 * v55) = v56;
          uint64_t v55 = (v55 + 1);
          LODWORD(vDgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 64) = v55;
          ++v54;
        }
        while (v54 < *(unsigned __int16 *)(v53 + 32 * v51 + 28));
        unint64_t v50 = *((unsigned int *)this + 62);
      }
      else
      {
        uint64_t v55 = v52;
      }
      *(_DWORD *)(v53 + 32 * v51++ + 24) = v52;
      uint64_t v52 = v55;
    }
    while (v51 < v50);
  }
  else
  {
    LODWORD(v55) = v64;
  }
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 192, &v63, 0, v55);
  uint64_t v57 = *((unsigned int *)this + 62);
  if (v57)
  {
    uint64_t v58 = v65;
    uint64_t v59 = (_DWORD *)(*((void *)this + 30) + 8);
    do
    {
      uint64_t v60 = *v59;
      if (v60 != -1) {
        *uint64_t v59 = *((_DWORD *)v58 + v60);
      }
      v59 += 8;
      --v57;
    }
    while (v57);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v63);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v65);
}

void sub_213E4DEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va1);
  _Unwind_Resume(a1);
}

int64x2_t FstSearchLeafLatticeBackoff::vite(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  FstSearchLeafLatticeBackoff::advanceDeltas((FstSearchLeafLatticeBackoff *)this, a2, a3, a4, a5);
  int64x2_t v13 = 0u;
  int64x2_t v14 = 0u;
  SnapTime::recordTime((SnapTime *)&v13, 1, 0, 0, 0);
  if (a2 >= 1)
  {
    unsigned int v7 = *((_DWORD *)this + 18);
    if (v7)
    {
      if (!(a2 % v7)) {
        FstSearchLeafLatticeBackoff::collectTraces((FstSearchLeafLatticeBackoff *)this);
      }
    }
  }
  int64x2_t v11 = 0u;
  int64x2_t v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  uint64_t v8 = this[13];
  int64x2_t result = vaddq_s64(v8[14], vsubq_s64(v11, v13));
  int64x2_t v10 = vaddq_s64(v8[15], vsubq_s64(v12, v14));
  v8[14] = result;
  v8[15] = v10;
  return result;
}

_DWORD *FstSearchLeafLatticeBackoff::reset(_DWORD *this)
{
  this[42] = 0;
  this[46] = 0;
  this[50] = 0;
  this[62] = 0;
  return this;
}

double FstSearchLeafLatticeBackoff::doFrame(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  if (a3 >= 20000) {
    a3 = 20000;
  }
  *(void *)&double result = FstSearchLeafLatticeBackoff::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearchLeafLatticeBackoff::beginTopRecPassSyncRecog(FstSearchLeafLatticeBackoff *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 288, a3, *((PelScoreCache **)this + 4));
    uint64_t result = ArcGraph::findBackoffState(*((void *)this + 5));
    *((_DWORD *)this + 100) = result;
    *((unsigned char *)this + 404) = 1;
  }
  return result;
}

uint64_t FstSearchLeafLatticeBackoff::endTopRecPassSyncRecog(FstSearchLeafLatticeBackoff *this)
{
  int64x2_t v10 = 0u;
  int64x2_t v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  int64x2_t v8 = 0u;
  int64x2_t v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  int64x2_t v2 = vsubq_s64(v8, v10);
  unsigned int v3 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v4 = v3[13];
  int64x2_t v5 = vaddq_s64(v3[12], v2);
  int64x2_t v8 = v2;
  int64x2_t v9 = vsubq_s64(v9, v11);
  int64x2_t v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + 70) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

void FstSearchLeafLatticeBackoff::printSize(FstSearchLeafLatticeBackoff *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v125);
  if (v126) {
    int v15 = v125;
  }
  else {
    int v15 = &unk_214099300;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v11, v12, v13, v14, a3, &unk_214099300, a3, &unk_214099300, v15);
  DgnString::~DgnString((DgnString *)&v125);
  if (a2 != -1) {
    xlprintf("%d ", v16, v17, v18, v19, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v16, v17, v18, v19, a3, &unk_214099300);
  uint64_t v20 = (a3 + 1);
  uint64_t v21 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v125);
  if (v126) {
    uint64_t v26 = v125;
  }
  else {
    uint64_t v26 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v22, v23, v24, v25, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v26, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v125);
  if (v126) {
    unsigned int v31 = v125;
  }
  else {
    unsigned int v31 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v27, v28, v29, v30, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v31, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v125);
  if (v126) {
    int v36 = v125;
  }
  else {
    int v36 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v32, v33, v34, v35, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v36, 4, 4, 0);
  uint64_t v121 = a2;
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v125);
  if (v126) {
    unsigned int v41 = v125;
  }
  else {
    unsigned int v41 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v37, v38, v39, v40, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v41, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  uint64_t v42 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v42 = 16;
  }
  uint64_t v43 = *((unsigned int *)this + 42);
  uint64_t v44 = 16 * v43;
  if ((int)v43 <= 0) {
    uint64_t v44 = 0;
  }
  uint64_t v45 = v44 + v42;
  uint64_t v46 = v44 + v42 + 16 * (*((_DWORD *)this + 43) - v43);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v125);
  if (v126) {
    unint64_t v51 = v125;
  }
  else {
    unint64_t v51 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v47, v48, v49, v50, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v51, v46, v45, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v46;
  *a5 += v45;
  uint64_t v52 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v52 = 16;
  }
  int v53 = *((_DWORD *)this + 46);
  uint64_t v54 = 22 * v53;
  if (v53 <= 0) {
    uint64_t v54 = 0;
  }
  uint64_t v55 = v54 + v52;
  uint64_t v56 = v54 + v52 + 22 * (*((_DWORD *)this + 47) - v53);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v125);
  if (v126) {
    uint64_t v61 = v125;
  }
  else {
    uint64_t v61 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v57, v58, v59, v60, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v61, v56, v55, 0);
  uint64_t v120 = a3;
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v56;
  *a5 += v55;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v62 = 12;
  }
  else {
    uint64_t v62 = 16;
  }
  uint64_t v63 = *((unsigned int *)this + 50);
  unsigned int v64 = *((_DWORD *)this + 51);
  if (v64 >= v63)
  {
    uint64_t v65 = 0;
    if ((int)v63 > 0) {
      uint64_t v62 = (v62 | 2) + 2 * (v63 - 1);
    }
    uint64_t v66 = v62 + 2 * (v64 - v63);
  }
  else
  {
    uint64_t v65 = 2 * v63;
    uint64_t v66 = v62;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2961, (DgnString *)&v125);
  if (v126) {
    unint64_t v71 = v125;
  }
  else {
    unint64_t v71 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v67, v68, v69, v70, v20, &unk_214099300, v21, v21, v71, v66, v62, v65);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v66;
  *a5 += v62;
  *a6 += v65;
  uint64_t v72 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v72 = 16;
  }
  uint64_t v73 = *((unsigned int *)this + 62);
  uint64_t v74 = 28 * v73;
  if ((int)v73 <= 0) {
    uint64_t v74 = 0;
  }
  uint64_t v75 = v74 + v72;
  uint64_t v76 = v74 + v72 + 28 * (*((_DWORD *)this + 63) - v73);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v125);
  if (v126) {
    uint64_t v81 = v125;
  }
  else {
    uint64_t v81 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v77, v78, v79, v80, v20, &unk_214099300, v21, v21, v81, v76, v75, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v76;
  *a5 += v75;
  uint64_t v82 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v82 = 16;
  }
  uint64_t v83 = *((unsigned int *)this + 66);
  uint64_t v84 = 28 * v83;
  if ((int)v83 <= 0) {
    uint64_t v84 = 0;
  }
  uint64_t v85 = v84 + v82;
  uint64_t v86 = v84 + v82 + 28 * (*((_DWORD *)this + 67) - v83);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v125);
  if (v126) {
    int v91 = v125;
  }
  else {
    int v91 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v87, v88, v89, v90, v20, &unk_214099300, v21, v21, v91, v86, v85, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v86;
  *a5 += v85;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v125);
  if (v126) {
    unint64_t v96 = v125;
  }
  else {
    unint64_t v96 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v92, v93, v94, v95, v20, &unk_214099300, v21, v21, v96, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v125);
  if (v126) {
    unsigned int v101 = v125;
  }
  else {
    unsigned int v101 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v97, v98, v99, v100, v20, &unk_214099300, v21, v21, v101, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v125);
  if (v126) {
    int64x2_t v106 = v125;
  }
  else {
    int64x2_t v106 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v102, v103, v104, v105, v20, &unk_214099300, v21, v21, v106, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  uint64_t v107 = sizeObject((uint64_t)this + 288, 0);
  uint64_t v108 = sizeObject((uint64_t)this + 288, 1);
  uint64_t v109 = sizeObject((uint64_t)this + 288, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v125);
  if (v126) {
    int v114 = v125;
  }
  else {
    int v114 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v110, v111, v112, v113, v20, &unk_214099300, v21, v21, v114, v107, v108, v109);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v107;
  *a5 += v108;
  *a6 += v109;
  unint64_t v123 = 0;
  unint64_t v124 = 0;
  SearchItf::printSize(this, v121, v20, &v124, &v123, &v123);
  *a4 += v124;
  *a5 += v123;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v125);
  if (v126) {
    __int16 v119 = v125;
  }
  else {
    __int16 v119 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v115, v116, v117, v118, v120, &unk_214099300, (35 - v120), (35 - v120), v119, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v125);
}

void sub_213E4E8B0(_Unwind_Exception *a1)
{
  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t FstSearchLeafLatticeBackoff::getBestTrace(uint64_t a1, void *a2, void *a3, int a4)
{
  if (a4) {
    unint64_t v4 = 0;
  }
  else {
    unint64_t v4 = *(unsigned int *)(a1 + 152);
  }
  unint64_t v5 = *(unsigned int *)(a1 + 248);
  if (v4 >= v5) {
    goto LABEL_21;
  }
  uint64_t v6 = 32 * v4;
  int v7 = 1879048192;
  uint64_t v8 = 0xFFFFFFFFLL;
  do
  {
    uint64_t v9 = *(void *)(a1 + 240);
    if (!a4 || (uint64_t v10 = *(unsigned int *)(v9 + v6 + 8), v10 == -1))
    {
      if (*(_DWORD *)(*(void *)(a1 + 40) + 160) != *(_DWORD *)(v9 + v6 + 4)) {
        goto LABEL_19;
      }
      uint64_t v10 = *(unsigned int *)(v9 + v6 + 8);
    }
    if (a2) {
      *(unsigned char *)(*a2 + v10) = 1;
    }
    if (a3) {
      *(unsigned char *)(*a3 + v10) = 1;
    }
    int v11 = *(_DWORD *)(*(void *)(a1 + 176) + 24 * *(unsigned int *)(*(void *)(a1 + 160) + 16 * v10 + 8))
        + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(*(void *)(a1 + 160) + 16 * v10 + 4));
    if (v7 > v11) {
      uint64_t v8 = v10;
    }
    if (v7 >= v11) {
      int v7 = *(_DWORD *)(*(void *)(a1 + 176) + 24 * *(unsigned int *)(*(void *)(a1 + 160) + 16 * v10 + 8))
    }
         + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(*(void *)(a1 + 160) + 16 * v10 + 4));
    unint64_t v5 = *(unsigned int *)(a1 + 248);
LABEL_19:
    ++v4;
    v6 += 32;
  }
  while (v4 < v5);
  if (v8 == 0xFFFFFFFFLL)
  {
LABEL_21:
    uint64_t v12 = *(unsigned int *)(a1 + 168);
    uint64_t v8 = 0xFFFFFFFFLL;
    while (v12)
    {
      --v12;
      if ((a4 & 1) != 0 || *(_DWORD *)(*(void *)(a1 + 160) + 16 * v12) == 16777213)
      {
        if (a2) {
          *(unsigned char *)(*a2 + v12) = 1;
        }
        uint64_t v8 = v12;
        if (a3) {
          *(unsigned char *)(*a3 + v12) = 1;
        }
        return v8;
      }
    }
  }
  return v8;
}

BOOL FstSearchLeafLatticeBackoff::findBestPath(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8 = *(unsigned int *)(a1 + 168);
  if (v8) {
    BOOL v9 = *(_DWORD *)(a3 + 8) == 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    *(void *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v8;
  }
  if (v8) {
    BOOL v10 = *(_DWORD *)(a2 + 8) == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    *(void *)a2 = MemChunkAlloc(v8, 0);
    *(_DWORD *)(a2 + 8) = v8;
LABEL_14:
    uint64_t v11 = 0;
    do
    {
      *(unsigned char *)(*(void *)a2 + v11) = 0;
      *(unsigned char *)(*(void *)a3 + v11++) = 0;
    }
    while (v8 != v11);
    goto LABEL_16;
  }
  if (v8) {
    goto LABEL_14;
  }
LABEL_16:
  unsigned int BestTrace = FstSearchLeafLatticeBackoff::getBestTrace(a1, (void *)a2, (void *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1) {
    return 0;
  }
  uint64_t v13 = *(void *)(a1 + 160) + 16 * BestTrace;
  LODWORD(v13) = *(_DWORD *)(*(void *)(a1 + 176) + 24 * *(unsigned int *)(v13 + 8))
               + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v13 + 4));
  *a4 = v13;
  return v13 != 1879048192;
}

unint64_t FstSearchLeafLatticeBackoff::createLatticeNodes(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7)
{
  unint64_t v8 = a2;
  uint64_t v9 = a1;
  uint64_t v10 = *(unsigned int *)(a1 + 168);
  if (v10) {
    BOOL v11 = *((_DWORD *)a2 + 2) == 0;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    *a2 = MemChunkAlloc(4 * v10, 0);
    *((_DWORD *)v8 + 2) = v10;
  }
  unint64_t result = Lattice<WordLatticeLC>::createNode(a4);
  int v13 = result;
  unsigned int v14 = *(_DWORD *)(a3 + 8);
  if (v14 == *(_DWORD *)(a3 + 12))
  {
    unint64_t result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
    unsigned int v14 = *(_DWORD *)(a3 + 8);
  }
  *(_DWORD *)(*(void *)a3 + 4 * v14) = v13;
  ++*(_DWORD *)(a3 + 8);
  unsigned int v15 = *(_DWORD *)(v9 + 168);
  uint64_t v17 = a6;
  uint64_t v16 = a7;
  if (v15)
  {
    unint64_t result = 2;
    int v18 = -1;
    uint64_t v47 = v8;
    uint64_t v48 = a3;
    uint64_t v50 = v9;
    do
    {
      --v15;
      uint64_t v19 = *v8;
      *((_DWORD *)*v8 + v15) = -1;
      if (*(unsigned char *)(*v17 + v15))
      {
        uint64_t v20 = v15;
        uint64_t v21 = *(void *)(v9 + 160);
        uint64_t v22 = *(unsigned int *)(*(void *)(v9 + 88) + 4 * *(unsigned int *)(v21 + 16 * v15 + 4));
        if (*(unsigned char *)(*v16 + v15))
        {
          if (*(unsigned char *)(*v17 + v15) != 1 || v18 == -1)
          {
            int Node = Lattice<WordLatticeLC>::createNode(a4);
            *((_DWORD *)*v8 + v15) = *(_DWORD *)(a3 + 8);
            uint64_t v25 = *(unsigned int *)(a3 + 8);
            if (v25 == *(_DWORD *)(a3 + 12))
            {
              DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
              uint64_t v25 = *(unsigned int *)(a3 + 8);
            }
            *(_DWORD *)(*(void *)a3 + 4 * v25) = Node;
            int v26 = *(_DWORD *)(a3 + 8);
            *(_DWORD *)(a3 + 8) = v26 + 1;
            uint64_t v17 = a6;
            uint64_t v16 = a7;
            if (*(unsigned char *)(*a6 + v15) == 1) {
              int v18 = v26;
            }
            uint64_t v21 = *(void *)(v9 + 160);
            unint64_t result = 2;
          }
          else
          {
            *((_DWORD *)v19 + v15) = v18;
          }
        }
        uint64_t v27 = (unsigned int *)(v21 + 16 * v15);
        if ((int)v27[3] >= 1)
        {
          int v49 = v18;
          uint64_t v28 = *v27;
          unsigned int v29 = v27[2];
          do
          {
            uint64_t v30 = *(void *)(v9 + 176);
            unsigned int v31 = v29;
            uint64_t v32 = (_DWORD *)(v30 + 24 * v29);
            uint64_t v33 = v32[3];
            if ((v32[3] & 0x80000000) != 0)
            {
              *v32 += v22;
            }
            else
            {
              if (v28 == 16777209)
              {
                uint64_t v34 = *a5 + 16 * v33;
                int v36 = (_DWORD *)(v34 + 8);
                uint64_t v35 = *(unsigned int *)(v34 + 8);
                uint64_t v37 = *(void *)(v9 + 176);
                if (v35 == *(_DWORD *)(v34 + 12))
                {
                  uint64_t v38 = v20;
                  uint64_t v39 = v22;
                  uint64_t v40 = v28;
                  DgnPrimArray<unsigned int>::reallocElts(v34, 1, 1);
                  uint64_t v28 = v40;
                  uint64_t v22 = v39;
                  uint64_t v20 = v38;
                  uint64_t v9 = v50;
                  uint64_t v17 = a6;
                  unint64_t result = 2;
                  uint64_t v16 = a7;
                  uint64_t v35 = *v36;
                  uint64_t v21 = *(void *)(v50 + 160);
                  uint64_t v37 = *(void *)(v50 + 176);
                }
                *(_DWORD *)(*(void *)v34 + 4 * v35) = v15;
                ++*v36;
                uint64_t v33 = v32[3];
              }
              else
              {
                *(unsigned char *)(*v16 + v33) = 1;
                uint64_t v37 = v30;
              }
              uint64_t v41 = v21 + 16 * v33;
              int v42 = *(_DWORD *)(*(void *)(v9 + 88) + 4 * *(unsigned int *)(v41 + 4));
              uint64_t v43 = (int *)(v37 + 24 * *(unsigned int *)(v41 + 8));
              int v44 = v22 + *v32 - v42;
              int v45 = *v43;
              LODWORD(v43) = v43[1];
              *uint64_t v32 = v44 - v45;
              *(_DWORD *)(v30 + 24 * v31 + 4) -= v43;
              *(unsigned char *)(*v17 + v33) = 2;
              uint64_t v21 = *(void *)(v9 + 160);
            }
            unsigned int v29 = v31 + 1;
          }
          while ((int)(v31 + 1) < *(_DWORD *)(v21 + 16 * v20 + 12) + *(_DWORD *)(v21 + 16 * v20 + 8));
          unint64_t v8 = v47;
          a3 = v48;
          int v18 = v49;
        }
      }
    }
    while (v15);
  }
  return result;
}

uint64_t FstSearchLeafLatticeBackoff::buildWordLattice(uint64_t a1, uint64_t *a2, void *a3, void *a4, unsigned __int8 a5)
{
  uint64_t v28 = 0;
  unsigned int v29 = 0;
  int v30 = 0;
  uint64_t v27 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v26, *(unsigned int *)(a1 + 168));
  unint64_t v8 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v8, 0, 128);
  v8[4] = (uint64_t)a2;
  FstSearchLeafLatticeBackoff::createLatticeNodes(a1, &v29, (uint64_t)&v27, (uint64_t)a2, v26, a3, a4);
  uint64_t v22 = *(unsigned int *)(a1 + 168);
  if (v22)
  {
    uint64_t v9 = 0;
    int v10 = v28;
    do
    {
      if (*(unsigned char *)(*a3 + v9))
      {
        uint64_t v11 = *(void *)(a1 + 160);
        if (*(_DWORD *)(v11 + 16 * v9) != 16777209)
        {
          uint64_t v12 = v11 + 16 * v9;
          if (*(int *)(v12 + 12) >= 1)
          {
            unsigned int v13 = *(_DWORD *)(v12 + 8);
            do
            {
              uint64_t v14 = *(void *)(a1 + 176) + 24 * v13;
              uint64_t v15 = *(unsigned int *)(v14 + 12);
              unsigned int v25 = v13;
              if (v15 == -1) {
                unsigned int v16 = 0;
              }
              else {
                unsigned int v16 = v10 - *((_DWORD *)v29 + v15);
              }
              uint64_t v17 = *(unsigned int *)(v27 + 4 * v16);
              if (*(unsigned char *)(*a4 + v9)) {
                FstSearchLeafLatticeBackoff::createLatticeLink((ArcGraph **)a1, v9, (int *)v14, 0xFFFFFFFFLL, v17, *(unsigned int *)(v27 + 4 * (v10 - *((_DWORD *)v29 + v9))), a2, (uint64_t)v8, a5);
              }
              uint64_t v18 = v26[0];
              if (*(_DWORD *)(v26[0] + 16 * v9 + 8))
              {
                unint64_t v19 = 0;
                do
                {
                  uint64_t v20 = *(unsigned int *)(*(void *)(v18 + 16 * v9) + 4 * v19);
                  FstSearchLeafLatticeBackoff::createLatticeLink((ArcGraph **)a1, v9, (int *)v14, v20, v17, *(unsigned int *)(v27 + 4 * (v10 - *((_DWORD *)v29 + v20))), a2, (uint64_t)v8, a5);
                  ++v19;
                  uint64_t v18 = v26[0];
                }
                while (v19 < *(unsigned int *)(v26[0] + 16 * v9 + 8));
              }
              unsigned int v13 = v25 + 1;
            }
            while ((int)(v25 + 1) < *(_DWORD *)(*(void *)(a1 + 160) + 16 * v9 + 12)
                                   + *(_DWORD *)(*(void *)(a1 + 160) + 16 * v9 + 8));
          }
        }
      }
      ++v9;
    }
    while (v9 != v22);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>((uint64_t)v8);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v26);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v27);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v29);
}

void sub_213E4F080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearchLeafLatticeBackoff::createLatticeLink(ArcGraph **this, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, unsigned __int8 a9)
{
  unsigned int v33 = a6;
  unsigned int v11 = a5;
  unsigned int v12 = a4;
  if ((a4 & 0x80000000) != 0) {
    SilenceToken = 0;
  }
  else {
    SilenceToken = (_DWORD *)FstSearchLeafLatticeBackoff::getSilenceToken((FstSearchLeafLatticeBackoff *)this, a4, a2);
  }
  ArcGraph::lexToCWIDAC(this[5], *((_DWORD *)this[20] + 4 * a2), (uint64_t)a3, a4, a5, a6, (uint64_t)a7, a8, (uint64_t)v43);
  int v17 = a3[1];
  if (SilenceToken)
  {
    v17 += SilenceToken[1];
    int v18 = *SilenceToken + *a3;
  }
  else
  {
    int v18 = *a3;
  }
  if (v43[0] >> 25 == 126)
  {
    int v19 = 0;
    int v20 = v17;
  }
  else
  {
    int v19 = *((_DWORD *)this + 34);
    int v20 = v17 - v19;
  }
  int v21 = v18 - v17;
  if ((v12 & 0x80000000) != 0)
  {
    int v22 = 0;
  }
  else
  {
    int v22 = *((_DWORD *)this + 35);
    v20 -= v22;
  }
  int v37 = v20;
  uint64_t v38 = 0;
  int v39 = v19;
  int v40 = v21;
  int v41 = 0;
  int v42 = v22;
  uint64_t v23 = a3[3];
  uint64_t v24 = this[20];
  if (v23 == -1)
  {
    int v26 = 0;
    if (a9) {
      goto LABEL_19;
    }
  }
  else
  {
    int v25 = *((_DWORD *)v24 + 4 * v23 + 1);
    if (a9)
    {
      if (v25 >= 1) {
        --v25;
      }
      int v26 = (v25 >> 1) + 1;
LABEL_19:
      int v27 = *((_DWORD *)v24 + 4 * a2 + 1);
      if (v27 >= 1) {
        --v27;
      }
      int v28 = (v27 >> 1) + 1;
      int v29 = v28 - v26;
      if ((v12 & 0x80000000) == 0)
      {
        int v30 = *((_DWORD *)v24 + 4 * v12 + 1);
        if (v30 >= 1) {
          --v30;
        }
        int v31 = v30 >> 1;
        goto LABEL_28;
      }
      goto LABEL_29;
    }
    int v26 = v25 + 1;
  }
  int v28 = *((_DWORD *)v24 + 4 * a2 + 1) + 1;
  int v29 = v28 - v26;
  if ((v12 & 0x80000000) == 0)
  {
    int v31 = *((_DWORD *)v24 + 4 * v12 + 1);
LABEL_28:
    int v32 = v31 - v28 + 1;
    goto LABEL_30;
  }
LABEL_29:
  int v32 = 0;
LABEL_30:
  WordLatticeLC::WordLatticeLC((uint64_t)v35, (uint64_t)v43, v26, v29, v32, (uint64_t)&v37);
  v34[0] = 0;
  v34[1] = 0;
  FstSearchLeafLatticeBackoff::buildLinkSegmentation((unint64_t)this, (uint64_t)v34, (uint64_t)a3, v26, a9);
  if (SilenceToken) {
    FstSearchLeafLatticeBackoff::buildLinkSegmentation((unint64_t)this, (uint64_t)v34, (uint64_t)SilenceToken, v28, a9);
  }
  unint64_t v36 = WordLattice::findOrAddLinkSegSeqId((uint64_t)a7, (uint64_t)v34, a8);
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v11, (const WordLatticeLC *)v33, (WordLatticeLC *)v35);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v34);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v35);
}

void sub_213E4F2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va1);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLeafLatticeBackoff::getSilenceToken(FstSearchLeafLatticeBackoff *this, unsigned int a2, int a3)
{
  uint64_t v3 = *((void *)this + 20) + 16 * a2;
  int v4 = *(_DWORD *)(v3 + 12);
  if (v4 < 1) {
    return 0;
  }
  unsigned int v5 = *(_DWORD *)(v3 + 8);
  int v6 = v4 + v5;
  uint64_t v7 = *((void *)this + 22);
  do
  {
    if (*(_DWORD *)(v7 + 24 * v5 + 12) == a3) {
      uint64_t result = v7 + 24 * v5;
    }
    else {
      uint64_t result = 0;
    }
    ++v5;
  }
  while ((int)v5 < v6 && !result);
  return result;
}

unint64_t FstSearchLeafLatticeBackoff::buildLinkSegmentation(unint64_t result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  if (a5) {
    int v5 = 2;
  }
  else {
    int v5 = 1;
  }
  unsigned int v6 = *(unsigned __int16 *)(a3 + 20);
  if (*(_WORD *)(a3 + 20))
  {
    unint64_t v10 = result;
    unsigned int v11 = 0;
    int v12 = 0;
    __int16 v13 = *(_WORD *)(*(void *)(result + 56) + 136);
    unsigned __int16 v14 = -1;
    do
    {
      int v15 = *(unsigned __int16 *)(*(void *)(v10 + 192) + 2 * (v11 + *(_DWORD *)(a3 + 16)));
      if (v15 != v14)
      {
        if (v12)
        {
          uint64_t result = FstSearchLeafLatticeBackoff::addLinkSegment(v10, a2, v14, a4, v12, v13);
          a4 += v12;
          unsigned int v6 = *(unsigned __int16 *)(a3 + 20);
          unsigned __int16 v14 = v15;
          int v12 = 0;
        }
        else
        {
          unsigned __int16 v14 = *(_WORD *)(*(void *)(v10 + 192) + 2 * (v11 + *(_DWORD *)(a3 + 16)));
        }
      }
      ++v12;
      v11 += v5;
    }
    while (v11 < v6);
    if (v12)
    {
      return FstSearchLeafLatticeBackoff::addLinkSegment(v10, a2, v14, a4, v12, v13);
    }
  }
  return result;
}

unint64_t FstSearchLeafLatticeBackoff::addLinkSegment(unint64_t result, uint64_t a2, unsigned int a3, int a4, int a5, __int16 a6)
{
  unint64_t v11 = result;
  unsigned int v12 = *(_DWORD *)(a2 + 8);
  if (v12 == *(_DWORD *)(a2 + 12))
  {
    uint64_t result = DgnArray<FstSearchLatticeHashBackoffActiveToken>::reallocElts(a2, 1, 1);
    unsigned int v12 = *(_DWORD *)(a2 + 8);
  }
  uint64_t v13 = *(void *)a2 + 28 * v12;
  *(void *)uint64_t v13 = -1;
  *(_DWORD *)(v13 + 8) = 0xFFFF;
  *(_DWORD *)(v13 + 20) = -16;
  LODWORD(v13) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = v13 + 1;
  uint64_t v14 = *(void *)a2 + 28 * v13;
  *(_WORD *)(v14 + 16) = a3;
  *(_DWORD *)(v14 + 20) = a4;
  *(_DWORD *)(v14 + 24) = a5;
  *(_DWORD *)(v14 + 12) = *(_DWORD *)(*(void *)(v11 + 208) + 4 * a3);
  __int16 v15 = *(_WORD *)(*(void *)(v11 + 224) + 2 * a3);
  *(_WORD *)uint64_t v14 = a6;
  *(_WORD *)(v14 + 2) = a6;
  *(_WORD *)(v14 + 4) = v15;
  *(_WORD *)(v14 + 6) = a6;
  *(_WORD *)(v14 + 8) = a6;
  *(_WORD *)(v14 + 10) = 0;
  return result;
}

uint64_t FstSearchLeafLatticeBackoff::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(void *)(this + 112) = a2;
  if (*(unsigned char *)(this + 404)) {
    return MiniFst::beginTopFstSyncRecog(this + 288);
  }
  return this;
}

uint64_t FstSearchLeafLatticeBackoff::endTopRecSyncRecog(FstSearchLeafLatticeBackoff *this)
{
  uint64_t v1 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  return v1;
}

uint64_t FstSearchLeafLatticeBackoff::getBestExitScore(FstSearchLeafLatticeBackoff *this)
{
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  *((_DWORD *)this + 69) = -1;
  unint64_t v1 = *((unsigned int *)this + 38);
  unint64_t v2 = *((unsigned int *)this + 62);
  if (v1 >= v2) {
    goto LABEL_19;
  }
  uint64_t v4 = 0;
  unsigned int v5 = 0;
  uint64_t v6 = 32 * v1;
  do
  {
    uint64_t v7 = *((void *)this + 30) + v6;
    if (*(_DWORD *)(*((void *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      uint64_t v8 = *(unsigned int *)(v7 + 8);
      if (v8 != -1 && *(_DWORD *)(*((void *)this + 20) + 16 * v8 + 4) == *((_DWORD *)this + 68))
      {
        if (v5 == HIDWORD(v22))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v21, 1, 1);
          unsigned int v5 = v22;
          uint64_t v4 = v21;
        }
        *(_DWORD *)(v4 + 4 * v5) = v8;
        unsigned int v5 = v22 + 1;
        LODWORD(v22) = v22 + 1;
        unint64_t v2 = *((unsigned int *)this + 62);
      }
    }
    ++v1;
    v6 += 32;
  }
  while (v1 < v2);
  if (v5)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *((void *)this + 20);
    int v11 = 1879048192;
    do
    {
      uint64_t v12 = v10 + 16 * *(unsigned int *)(v4 + 4 * v9);
      int v13 = *(_DWORD *)(v12 + 12);
      if (v13 >= 1)
      {
        unsigned int v14 = *(_DWORD *)(v12 + 8);
        int v15 = v13 + v14;
        uint64_t v16 = *((void *)this + 22);
        do
        {
          unsigned int v17 = v14;
          int v18 = *(_DWORD *)(v16 + 24 * v14);
          if (v11 > v18)
          {
            *((_DWORD *)this + 69) = *(_DWORD *)(v16 + 24 * v17 + 12);
            int v11 = v18;
          }
          unsigned int v14 = v17 + 1;
        }
        while ((int)(v17 + 1) < v15);
      }
      ++v9;
    }
    while (v9 != v5);
  }
  else
  {
LABEL_19:
    int v11 = 1879048192;
  }
  if (v11 >= 20000) {
    uint64_t v19 = 20000;
  }
  else {
    uint64_t v19 = v11;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v21);
  return v19;
}

void sub_213E4F6E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t FstSearchLeafLatticeBackoff::getBestScoreMaybeUpdateFstNode(FstSearchLeafLatticeBackoff *this, Node *a2)
{
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v2 = *((unsigned int *)this + 62);
  if (v2)
  {
    uint64_t v3 = (int *)*((void *)this + 30);
    __int16 v4 = -1;
    int v5 = 1879048192;
    uint64_t v6 = v3;
    do
    {
      int v8 = *v6;
      v6 += 8;
      int v7 = v8;
      if (v5 > v8)
      {
        __int16 v4 = *((_WORD *)v3 + 6);
        int v5 = v7;
      }
      uint64_t v3 = v6;
      --v2;
    }
    while (v2);
    uint64_t v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000) {
        uint64_t v9 = 20000;
      }
      else {
        uint64_t v9 = v5;
      }
    }
  }
  else
  {
    uint64_t v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

uint64_t FstSearchLeafLatticeBackoff::seedTheory(FstSearchLeafLatticeBackoff *this, int a2, int a3, int a4, SearchStats *a5)
{
  if (a4 == -2)
  {
    int v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    unsigned int v11 = *((_DWORD *)this + 46);
    if (v11 == *((_DWORD *)this + 47))
    {
      DgnArray<CWIDAC>::reallocElts((uint64_t)this + 176, 1, 1);
      unsigned int v11 = *((_DWORD *)this + 46);
    }
    uint64_t v12 = *((void *)this + 22) + 24 * v11;
    *(_OWORD *)(v12 + 4) = xmmword_2140992E0;
    *(_WORD *)(v12 + 20) = 0;
    *((_DWORD *)this + 46) = v11 + 1;
    *(_DWORD *)uint64_t v12 = a2;
    unsigned int v13 = *((_DWORD *)this + 42);
    if (v13 == *((_DWORD *)this + 43))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 160, 1, 1);
      unsigned int v13 = *((_DWORD *)this + 42);
    }
    unsigned int v14 = (_DWORD *)(*((void *)this + 20) + 16 * v13);
    *unsigned int v14 = a4;
    v14[1] = a3;
    v14[2] = v11;
    v14[3] = 1;
    int v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  int v15 = *(_DWORD *)(*((void *)this + 5) + 144);
  unsigned int v16 = *((_DWORD *)this + 62);
  if (v16 == *((_DWORD *)this + 63))
  {
    DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)this + 240, 1, 1);
    unsigned int v16 = *((_DWORD *)this + 62);
  }
  uint64_t v17 = *((void *)this + 30) + 32 * v16;
  *(_DWORD *)uint64_t v17 = a2;
  *(_DWORD *)(v17 + 4) = v15;
  *(_DWORD *)(v17 + 8) = v9;
  *(_WORD *)(v17 + 12) = -2;
  *(void *)(v17 + 16) = 0;
  *(void *)(v17 + 22) = 0;
  LODWORD(v17) = *((_DWORD *)this + 62) + 1;
  *((_DWORD *)this + 62) = v17;
  *((_DWORD *)this + 38) = v17;

  return FstSearchLeafLatticeBackoff::propagateNulls((uint64_t)this, 20000, a3, a5);
}

uint64_t FstSearchLeafLatticeBackoff::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(unsigned int *)(result + 276);
  if (v8 != -1)
  {
    int v9 = (void *)result;
    uint64_t v10 = (unsigned int *)(*(void *)(result + 160) + 16 * v8);
    for (i = *(unsigned int *)(*(void *)(result + 176) + 24 * v10[2] + 12); i != -1; uint64_t v8 = v16)
    {
      uint64_t v16 = i;
      uint64_t result = v9[5];
      if (*v10 == 16777209)
      {
        int v17 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        uint64_t result = ArcGraph::lexToCWID((ArcGraph *)result, *v10, a3, (uint64_t)a4, a5, a6, a7, a8);
        int v17 = result;
      }
      uint64_t v18 = *(unsigned int *)(a2 + 8);
      if (v18 == *(_DWORD *)(a2 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        uint64_t v18 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(void *)a2 + 4 * v18) = v17;
      ++*(_DWORD *)(a2 + 8);
      uint64_t v19 = *(unsigned int *)(a6 + 8);
      if (v19 == *(_DWORD *)(a6 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        uint64_t v19 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(void *)a6 + 4 * v19) = v8;
      ++*(_DWORD *)(a6 + 8);
      uint64_t v20 = v9[20];
      int v21 = *(_DWORD *)(v20 + 16 * v8 + 4);
      uint64_t v22 = *(unsigned int *)(a3 + 8);
      if (v22 == *(_DWORD *)(a3 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        uint64_t v22 = *(unsigned int *)(a3 + 8);
        uint64_t v20 = v9[20];
      }
      *(_DWORD *)(*(void *)a3 + 4 * v22) = v21;
      ++*(_DWORD *)(a3 + 8);
      int v23 = *(_DWORD *)(v9[22] + 24 * *(unsigned int *)(v20 + 16 * v8 + 8));
      uint64_t v24 = *(unsigned int *)(a5 + 8);
      if (v24 == *(_DWORD *)(a5 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        uint64_t v24 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(void *)a5 + 4 * v24) = v23;
      ++*(_DWORD *)(a5 + 8);
      uint64_t v10 = (unsigned int *)(v9[20] + 16 * v16);
      uint64_t i = *(unsigned int *)(v9[22] + 24 * v10[2] + 12);
    }
    *a4 = *v10;
  }
  return result;
}

void FstSearchLeafLatticeBackoff::checkSearchParametersValidityForArcGraph(FstSearchLeafLatticeBackoff *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *((void *)this + 5);
  if (*(unsigned char *)(v8 + 178))
  {
    int v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(unsigned char *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    }
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    }
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(void *)(**(void **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((void *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if (a2)
      {
        if (!*(unsigned char *)(v8 + 203)) {
          return;
        }
      }
      else if (*(unsigned char *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(unsigned char *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

void FstSearchLeafLatticeBackoff::getHistory(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 == -1)
  {
    *(_DWORD *)(a3 + 8) = 0;
  }
  else
  {
    int v9 = a4;
    LODWORD(v11) = 0;
    uint64_t v12 = a2;
    uint64_t v13 = a2;
    do
    {
      unsigned int v14 = (_DWORD *)(*(void *)(a1 + 160) + 16 * v13);
      if (*v14 == 16777209) {
        uint64_t v11 = v11;
      }
      else {
        uint64_t v11 = (v11 + 1);
      }
      uint64_t v13 = *(unsigned int *)(*(void *)(a1 + 176) + 24 * v14[2] + 12);
    }
    while (v13 != -1);
    unsigned int v15 = *(_DWORD *)(a3 + 12);
    if (v11 > v15) {
      DgnArray<PrefilterResultFrame>::reallocElts(a3, v11 - v15, 0);
    }
    uint64_t v16 = *(unsigned int *)(a3 + 8);
    if (v16 < v11)
    {
      uint64_t v17 = v11 - v16;
      uint64_t v18 = *(void *)a3 + 32 * v16;
      do
      {
        *(void *)uint64_t v18 = 0x3FFFFAFFFFFFLL;
        *(_OWORD *)(v18 + 8) = xmmword_2140866D0;
        *(void *)(v18 + 24) = 0x1F0000001FLL;
        v18 += 32;
        --v17;
      }
      while (v17);
    }
    *(_DWORD *)(a3 + 8) = v11;
    if (v11)
    {
      uint64_t v19 = *(void *)(a1 + 160);
      int v20 = -16;
      do
      {
        int v21 = (unsigned int *)(v19 + 16 * v12);
        int v22 = v21[1];
        if (*v21 == 16777209)
        {
          if (v9)
          {
            int v23 = v22 - 1;
            if (v22 < 1) {
              int v23 = v22;
            }
            int v20 = (v23 >> 1) + 1;
          }
          else
          {
            int v20 = v22 + 1;
          }
        }
        else
        {
          if (v9)
          {
            int v24 = v22 - 1;
            if (v22 < 1) {
              int v24 = v21[1];
            }
            int v22 = v24 >> 1;
          }
          ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *v21, a3, a4, a5, a6, a7, a8, (uint64_t)v28);
          if (v20 == -16) {
            int v25 = v22 + 1;
          }
          else {
            int v25 = v20;
          }
          int v26 = v28[1];
          uint64_t v11 = (v11 - 1);
          uint64_t v27 = *(void *)a3 + 32 * v11;
          *(_DWORD *)uint64_t v27 = v28[0];
          *(_DWORD *)(v27 + 4) = v26;
          *(_OWORD *)(v27 + 8) = v29;
          *(_DWORD *)(v27 + 24) = v22 + 1;
          *(_DWORD *)(v27 + 28) = v25;
          uint64_t v19 = *(void *)(a1 + 160);
          int v20 = -16;
        }
        uint64_t v12 = *(unsigned int *)(*(void *)(a1 + 176) + 24 * *(unsigned int *)(v19 + 16 * v12 + 8) + 12);
      }
      while (v12 != -1);
    }
  }
}

uint64_t FstSearchLeafLatticeBackoff::makePartialResult(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    uint64_t v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(void *)a2 + v9))(*(void *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  unsigned int BestTrace = FstSearchLeafLatticeBackoff::getBestTrace((uint64_t)a1, 0, 0, 1);
  if (BestTrace == -1) {
    return 1879048192;
  }
  unsigned int v15 = BestTrace;
  FstSearchLeafLatticeBackoff::getHistory((uint64_t)a1, BestTrace, a3, a4, v11, v12, v13, v14);
  memset(v25, 0, sizeof(v25));
  int v26 = 0;
  if (*(_DWORD *)(a3 + 8))
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    int v18 = 0;
    do
    {
      uint64_t v19 = *(void *)a3 + v16;
      int v20 = *(_DWORD *)(v19 + 28);
      WordLatticeLC::WordLatticeLC((uint64_t)v24, v19, v18, *(_DWORD *)(v19 + 24) - v18, v20 - *(_DWORD *)(v19 + 24), (uint64_t)v25);
      uint64_t v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(void *)a2 + 112 * v21), (const WordLatticeLC *)v24);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v24);
      ++v17;
      v16 += 32;
      int v18 = v20;
    }
    while (v17 < *(unsigned int *)(a3 + 8));
  }
  uint64_t v22 = a1[20] + 16 * v15;
  return (*(_DWORD *)(a1[22] + 24 * *(unsigned int *)(v22 + 8))
                      + *(_DWORD *)(a1[11] + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_213E4FFEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t FstSearchLeafLattice::maybeGeneratePelMaps(FstSearchLeafLattice *this, const PicMgr *a2)
{
  return PicMgr::getPelPhoneMap((unint64_t)a2, (uint64_t)this + 224, (uint64_t)this + 208);
}

int64x2_t FstSearchLeafLattice::advanceDeltas(FstSearchLeafLattice *this, int a2, int a3, SearchStats *a4, int a5)
{
  int v8 = a2;
  v135[0] = a2;
  int64x2_t v133 = 0u;
  int64x2_t v134 = 0u;
  SnapTime::recordTime((SnapTime *)&v133, 1, 0, 0, 0);
  uint64_t v104 = (int *)((char *)this + 280);
  *((_DWORD *)this + 70) = a3;
  int v10 = *((_DWORD *)this + 2);
  unsigned int v11 = *((_DWORD *)this + 62);
  if (v11)
  {
    int v96 = a5;
    uint64_t v97 = a4;
    int v98 = v8;
    unsigned int v109 = 0;
    LODWORD(v12) = 0;
    uint64_t v13 = (uint64_t *)((char *)this + 192);
    uint64_t v103 = (char *)this + 256;
    uint64_t v108 = *((unsigned int *)this + 2);
    do
    {
      uint64_t v14 = *((void *)this + 30);
      uint64_t v110 = v12;
      uint64_t v15 = *(unsigned int *)(v14 + 32 * v12 + 4);
      if (v11 <= (int)v12 + 1) {
        unsigned int v16 = v12 + 1;
      }
      else {
        unsigned int v16 = v11;
      }
      unsigned int v99 = v12;
      while (v16 - 1 != v12)
      {
        uint64_t v12 = (v12 + 1);
        if (*(_DWORD *)(v14 + 32 * v12 + 4) != v15) {
          goto LABEL_11;
        }
      }
      LODWORD(v12) = v16;
LABEL_11:
      uint64_t v17 = *((void *)this + 5);
      if (*(_DWORD *)(v17 + 160) != v15)
      {
        BOOL v18 = *(_DWORD *)(v17 + 140) <= (int)v15 || v99 >= v12;
        uint64_t v100 = v15;
        int v101 = v12;
        if (!v18)
        {
          uint64_t v19 = v12;
          uint64_t v20 = v110;
          uint64_t v114 = v12;
          do
          {
            uint64_t v21 = *((void *)this + 30) + 32 * v20;
            int v22 = *(_DWORD *)v21;
            int v23 = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(v21 + 12)) + v22;
            int v24 = *((_DWORD *)this + 70);
            if (v23 - v10 <= v24)
            {
              if (v24 > v23) {
                int *v104 = v23;
              }
              uint64_t v25 = *((void *)this + 30) + 32 * v20;
              uint64_t v26 = *(void *)(v25 + 4);
              __int16 v27 = *(_WORD *)(v25 + 12);
              __int16 v116 = *(_WORD *)(v25 + 14);
              uint64_t v28 = *(void *)(v25 + 16);
              uint64_t v29 = *(unsigned __int16 *)(v25 + 28);
              unsigned int v30 = *((_DWORD *)this + 50);
              unsigned int v31 = v30;
              if (*(_WORD *)(v25 + 28))
              {
                unsigned int v32 = *(_DWORD *)(v25 + 24);
                uint64_t v33 = *v13;
                uint64_t v34 = v29;
                unsigned int v31 = *((_DWORD *)this + 50);
                do
                {
                  __int16 v35 = *(_WORD *)(v33 + 2 * v32);
                  if (v31 == *((_DWORD *)this + 51))
                  {
                    DgnPrimArray<short>::reallocElts((uint64_t)this + 192, 1, 1);
                    unsigned int v31 = *((_DWORD *)this + 50);
                    uint64_t v33 = *((void *)this + 24);
                  }
                  *(_WORD *)(v33 + 2 * v31++) = v35;
                  *((_DWORD *)this + 50) = v31;
                  ++v32;
                  --v34;
                }
                while (v34);
              }
              if (v31 == *((_DWORD *)this + 51))
              {
                DgnPrimArray<short>::reallocElts((uint64_t)this + 192, 1, 1);
                unsigned int v31 = *((_DWORD *)this + 50);
              }
              *(_WORD *)(*((void *)this + 24) + 2 * v31) = v27;
              *((_DWORD *)this + 50) = v31 + 1;
              uint64_t v36 = *((unsigned int *)this + 66);
              if (v36 == *((_DWORD *)this + 67))
              {
                DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)v103, 1, 1);
                uint64_t v36 = *((unsigned int *)this + 66);
              }
              uint64_t v37 = *((void *)this + 32) + 32 * v36;
              *(_DWORD *)uint64_t v37 = v23;
              *(void *)(v37 + 4) = v26;
              *(_WORD *)(v37 + 12) = v27;
              *(_WORD *)(v37 + 14) = v116;
              *(void *)(v37 + 16) = v28;
              *(_DWORD *)(v37 + 24) = v30;
              *(_WORD *)(v37 + 28) = v29 + 1;
              int v38 = *((_DWORD *)this + 66) + 1;
              *((_DWORD *)this + 66) = v38;
              int v10 = v108;
              if (v20 == v110)
              {
                int v39 = v109;
                if (HIDWORD(v108) == 2 * *((_DWORD *)this + 4)) {
                  int v39 = v38;
                }
                ++HIDWORD(v108);
                unsigned int v109 = v39;
              }
              uint64_t v15 = v100;
              LODWORD(v12) = v101;
              uint64_t v19 = v114;
            }
            ++v20;
          }
          while (v20 != v19);
        }
        uint64_t v40 = v12;
        unsigned int v41 = v15;
        uint64_t v105 = v12;
        do
        {
          uint64_t v42 = *((void *)this + 5);
          uint64_t v43 = *(void *)(v42 + 152);
          unsigned int v44 = *(_DWORD *)(v43 + 4 * v41);
          int v45 = *(_DWORD *)(v42 + 140);
          int v111 = *(_DWORD *)(v43 + 4 * (v41 + 1));
          unsigned int v112 = v44;
          unsigned int v102 = v41;
          if (v45 <= v111)
          {
            if (*((unsigned char *)this + 404)) {
              BOOL v64 = v45 <= (int)v15;
            }
            else {
              BOOL v64 = 0;
            }
            if (v64)
            {
              unsigned int v65 = (v44 & 0xFFFFF) <= 0xFFFF3 ? v44 & 0xFFFFF : v44 & 0xFFFFF | 0xF00000;
              if (v65 != 16777210)
              {
                DgnString::DgnString((DgnString *)&v130);
                ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v65, (DgnString *)&v130, v66, v67, v68, v69, v70);
                uint64_t v75 = &unk_214099300;
                if (v130.i32[2]) {
                  uint64_t v75 = (void *)v130.i64[0];
                }
                xprintf("Seed from state %d score %d trace %d, %s\n", v71, v72, v73, v74, v15, *(unsigned int *)(*((void *)this + 30) + 32 * v110), *(unsigned int *)(*((void *)this + 30) + 32 * v110 + 8), v75);
                MiniFst::seed((uint64_t)this + 288, *(_DWORD *)(*((void *)this + 30) + 32 * v110), *(_DWORD *)(*((void *)this + 30) + 32 * v110 + 20), *(_DWORD *)(*((void *)this + 30) + 32 * v110 + 8), v111);
                DgnString::~DgnString((DgnString *)&v130);
              }
            }
          }
          else
          {
            int ScoreNoBackoff = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), (unsigned __int16)v44);
            if (v99 < v12)
            {
              int v47 = ScoreNoBackoff + ((v44 >> 20) & 0x3FF);
              uint64_t v48 = v110;
              int v106 = (v44 >> 20) & 0x3FF;
              int v107 = v47;
              do
              {
                uint64_t v49 = *((void *)this + 30) + 32 * v48;
                int v50 = v47 + *(_DWORD *)v49;
                int v51 = *((_DWORD *)this + 70);
                if (v50 - v10 <= v51)
                {
                  if (v51 > v50) {
                    int *v104 = v50;
                  }
                  __int16 v117 = *(_WORD *)(v49 + 14);
                  int v52 = *(_DWORD *)(v49 + 16);
                  int v113 = *(_DWORD *)(v49 + 8);
                  int v115 = *(_DWORD *)(v49 + 20);
                  uint64_t v53 = *(unsigned __int16 *)(v49 + 28);
                  unsigned int v54 = *((_DWORD *)this + 50);
                  unsigned int v55 = v54;
                  if (*(_WORD *)(v49 + 28))
                  {
                    unsigned int v56 = *(_DWORD *)(v49 + 24);
                    uint64_t v57 = *v13;
                    uint64_t v58 = v53;
                    unsigned int v55 = *((_DWORD *)this + 50);
                    do
                    {
                      __int16 v59 = *(_WORD *)(v57 + 2 * v56);
                      if (v55 == *((_DWORD *)this + 51))
                      {
                        DgnPrimArray<short>::reallocElts((uint64_t)this + 192, 1, 1);
                        unsigned int v55 = *((_DWORD *)this + 50);
                        uint64_t v57 = *((void *)this + 24);
                      }
                      *(_WORD *)(v57 + 2 * v55++) = v59;
                      *((_DWORD *)this + 50) = v55;
                      ++v56;
                      --v58;
                    }
                    while (v58);
                  }
                  if (v55 == *((_DWORD *)this + 51))
                  {
                    DgnPrimArray<short>::reallocElts((uint64_t)this + 192, 1, 1);
                    unsigned int v55 = *((_DWORD *)this + 50);
                  }
                  *(_WORD *)(*((void *)this + 24) + 2 * v55) = v112;
                  *((_DWORD *)this + 50) = v55 + 1;
                  uint64_t v60 = *((unsigned int *)this + 66);
                  if (v60 == *((_DWORD *)this + 67))
                  {
                    DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)v103, 1, 1);
                    uint64_t v60 = *((unsigned int *)this + 66);
                  }
                  uint64_t v61 = *((void *)this + 32) + 32 * v60;
                  *(_DWORD *)uint64_t v61 = v50;
                  *(_DWORD *)(v61 + 4) = v111;
                  *(_DWORD *)(v61 + 8) = v113;
                  *(_WORD *)(v61 + 12) = v112;
                  *(_WORD *)(v61 + 14) = v117;
                  *(_DWORD *)(v61 + 16) = v52 + v106;
                  *(_DWORD *)(v61 + 20) = v115;
                  *(_DWORD *)(v61 + 24) = v54;
                  *(_WORD *)(v61 + 28) = v53 + 1;
                  int v62 = *((_DWORD *)this + 66) + 1;
                  *((_DWORD *)this + 66) = v62;
                  int v10 = v108;
                  if (v48 == v110)
                  {
                    int v63 = v109;
                    if (HIDWORD(v108) == 2 * *((_DWORD *)this + 4)) {
                      int v63 = v62;
                    }
                    ++HIDWORD(v108);
                    unsigned int v109 = v63;
                  }
                  uint64_t v40 = v105;
                  int v47 = v107;
                }
                ++v48;
              }
              while (v48 != v40);
            }
          }
          unsigned int v41 = v102 + 2;
          uint64_t v15 = v100;
          LODWORD(v12) = v101;
        }
        while ((v112 & 0x80000000) == 0);
        unsigned int v11 = *((_DWORD *)this + 62);
      }
    }
    while (v12 < v11);
    a3 = *v104;
    int v8 = v98;
    a4 = v97;
    a5 = v96;
    unsigned int v77 = HIDWORD(v108);
    unsigned int v76 = v109;
  }
  else
  {
    unsigned int v77 = 0;
    unsigned int v76 = 0;
  }
  int v132 = a3 + v10;
  if (*((unsigned char *)this + 404)) {
    MiniFst::updateFrame((char *)this + 288, v104, v10, v8);
  }
  int64x2_t v130 = 0u;
  int64x2_t v131 = 0u;
  SnapTime::recordTime((SnapTime *)&v130, 1, 0, 0, 0);
  int64x2_t v130 = vsubq_s64(v130, v133);
  int64x2_t v131 = vsubq_s64(v131, v134);
  uint64_t v78 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v79 = vaddq_s64(v78[1], v131);
  *uint64_t v78 = vaddq_s64(*v78, v130);
  v78[1] = v79;
  int64x2_t v128 = 0u;
  int64x2_t v129 = 0u;
  SnapTime::recordTime((SnapTime *)&v128, 1, 0, 0, 0);
  if (v77 > 2 * *((_DWORD *)this + 4)) {
    FstSearchLeafLatticeBackoff::applyCutoffOnEmitting((uint64_t)this, v76, &v132);
  }
  int64x2_t v126 = 0u;
  int64x2_t v127 = 0u;
  SnapTime::recordTime((SnapTime *)&v126, 1, 0, 0, 0);
  int64x2_t v80 = vsubq_s64(v126, v128);
  uint64_t v81 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v82 = v81[3];
  int64x2_t v83 = vaddq_s64(v81[2], v80);
  int64x2_t v126 = v80;
  int64x2_t v127 = vsubq_s64(v127, v129);
  int64x2_t v84 = vaddq_s64(v82, v127);
  v81[2] = v83;
  v81[3] = v84;
  int64x2_t v124 = 0u;
  int64x2_t v125 = 0u;
  SnapTime::recordTime((SnapTime *)&v124, 1, 0, 0, 0);
  FstSearchLeafLatticeBackoff::makeViterbiDecisionOnEmitting((uint64_t)this);
  unint64_t v85 = *((unsigned int *)this + 6);
  if (v85)
  {
    unint64_t v86 = *((unsigned int *)this + 62);
    if (v85 < v86) {
      mrec_nth_element<FstSearchLeafLatticeBackoffcmpTok>(*((void *)this + 30), v85, v86);
    }
  }
  int64x2_t v122 = 0u;
  int64x2_t v123 = 0u;
  SnapTime::recordTime((SnapTime *)&v122, 1, 0, 0, 0);
  int64x2_t v87 = vsubq_s64(v122, v124);
  uint64_t v88 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v89 = v88[5];
  int64x2_t v90 = vaddq_s64(v88[4], v87);
  int64x2_t v122 = v87;
  int64x2_t v123 = vsubq_s64(v123, v125);
  int64x2_t v91 = vaddq_s64(v89, v123);
  v88[4] = v90;
  v88[5] = v91;
  int64x2_t v120 = 0u;
  int64x2_t v121 = 0u;
  SnapTime::recordTime((SnapTime *)&v120, 1, 0, 0, 0);
  *((_DWORD *)this + 66) = 0;
  uint64_t v92 = *((unsigned int *)this + 62);
  *((_DWORD *)this + 38) = v92;
  if (a4)
  {
    *((void *)a4 + 2) += v92;
    if (*((_DWORD *)a4 + 2) > v92) {
      LODWORD(v92) = *((_DWORD *)a4 + 2);
    }
    *((_DWORD *)a4 + 2) = v92;
  }
  if (*((unsigned char *)this + 404)) {
    FstSearchLeafLattice::seedFromMiniFst((uint64_t)this, v135);
  }
  if (a5) {
    FstSearchLeafLatticeBackoff::propagateNulls((uint64_t)this, v132, v8, a4);
  }
  *((_DWORD *)this + 68) = v8;
  int64x2_t v118 = 0u;
  int64x2_t v119 = 0u;
  SnapTime::recordTime((SnapTime *)&v118, 1, 0, 0, 0);
  uint64_t v93 = (int64x2_t *)*((void *)this + 13);
  int64x2_t result = vaddq_s64(v93[6], vsubq_s64(v118, v120));
  int64x2_t v95 = vaddq_s64(v93[7], vsubq_s64(v119, v121));
  v93[6] = result;
  v93[7] = v95;
  return result;
}

void sub_213E50810(_Unwind_Exception *exception_object)
{
}

uint64_t FstSearchLeafLattice::seedFromMiniFst(uint64_t this, int *a2)
{
  if (*(unsigned char *)(this + 404))
  {
    uint64_t v2 = this;
    unsigned int v3 = *(_DWORD *)(this + 312);
    if (v3 >= *(_DWORD *)(this + 20)) {
      unsigned int v3 = *(_DWORD *)(this + 20);
    }
    if (v3)
    {
      unint64_t v4 = 0;
      uint64_t v46 = this + 176;
      int v5 = (void *)(this + 160);
      uint64_t v39 = this + 240;
      do
      {
        uint64_t v6 = (int *)(*(void *)(v2 + 304) + 36 * v4);
        int v7 = v6[4];
        int v43 = *v6;
        unsigned int v44 = v6[5];
        int v8 = v6[6];
        int v45 = v6[7];
        unsigned int v9 = v6[2];
        uint64_t v47 = 0;
        uint64_t v48 = 0;
        int v41 = v8;
        int v42 = v7;
        if ((v9 & 0x80000000) != 0)
        {
          LODWORD(v13) = -2 - v9;
        }
        else
        {
          uint64_t v10 = 0;
          unsigned int v11 = 0;
          do
          {
            if (v11 == HIDWORD(v48))
            {
              DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v47, 1, 1);
              unsigned int v11 = v48;
              uint64_t v10 = v47;
            }
            *(_DWORD *)(v10 + 4 * v11) = v9;
            uint64_t v12 = v48;
            unsigned int v11 = v48 + 1;
            LODWORD(v48) = v48 + 1;
            unsigned int v9 = *(_DWORD *)(*(void *)(v2 + 288) + 36 * v9 + 8);
          }
          while ((v9 & 0x80000000) == 0);
          LODWORD(v13) = -2 - v9;
          if ((v12 & 0x80000000) == 0)
          {
            int v14 = v12 + 1;
            uint64_t v15 = 4 * v12;
            do
            {
              unsigned int v16 = *(_DWORD *)(v47 + v15);
              uint64_t v17 = *(void *)(v2 + 288);
              BOOL v18 = (int *)(v17 + 36 * v16);
              int v19 = *v18;
              uint64_t v20 = *((void *)v18 + 2);
              unsigned int v21 = *(_DWORD *)(v2 + 184);
              if (v21 == *(_DWORD *)(v2 + 188))
              {
                DgnArray<CWIDAC>::reallocElts(v46, 1, 1);
                unsigned int v21 = *(_DWORD *)(v2 + 184);
                uint64_t v17 = *(void *)(v2 + 288);
              }
              uint64_t v22 = *(void *)(v2 + 176) + 24 * v21;
              *(_DWORD *)(v2 + 184) = v21 + 1;
              *(_DWORD *)uint64_t v22 = v19;
              *(void *)(v22 + 4) = v20;
              *(_DWORD *)(v22 + 12) = v13;
              *(_DWORD *)(v22 + 16) = 0;
              *(_WORD *)(v22 + 20) = 0;
              uint64_t v23 = *(void *)(v17 + 36 * v16 + 28);
              uint64_t v24 = *(unsigned int *)(v2 + 168);
              if (v24 == *(_DWORD *)(v2 + 172))
              {
                DgnArray<DgnPrimArray<double>>::reallocElts(v2 + 160, 1, 1);
                uint64_t v24 = *(unsigned int *)(v2 + 168);
              }
              uint64_t v25 = *(void *)(v2 + 160);
              uint64_t v26 = v25 + 16 * v24;
              *(void *)uint64_t v26 = v23;
              *(_DWORD *)(v26 + 8) = v21;
              *(_DWORD *)(v26 + 12) = 0;
              uint64_t v13 = *(unsigned int *)(v2 + 168);
              *(_DWORD *)(v2 + 168) = v13 + 1;
              *(_DWORD *)(v25 + 16 * v13 + 12) = 1;
              --v14;
              v15 -= 4;
            }
            while (v14 > 0);
          }
        }
        unsigned int v27 = *(_DWORD *)(v2 + 184);
        if (v27 == *(_DWORD *)(v2 + 188))
        {
          DgnArray<CWIDAC>::reallocElts(v46, 1, 1);
          unsigned int v27 = *(_DWORD *)(v2 + 184);
        }
        uint64_t v28 = *(void *)(v2 + 176);
        *(_DWORD *)(v2 + 184) = v27 + 1;
        uint64_t v29 = v28 + 24 * v27;
        *(_DWORD *)uint64_t v29 = v43;
        *(_DWORD *)(v29 + 4) = v42;
        *(_DWORD *)(v29 + 8) = v44;
        *(_DWORD *)(v29 + 12) = v13;
        *(_DWORD *)(v29 + 16) = 0;
        *(_WORD *)(v29 + 20) = 0;
        if (v45 == 16777213)
        {
          int v45 = 16777209;
          if (*(_DWORD *)(*v5 + 16 * v13) == 16777209)
          {
            unsigned int v27 = *(_DWORD *)(*v5 + 16 * v13 + 8);
            int v45 = 16777209;
          }
        }
        int v30 = *a2;
        uint64_t v31 = *(unsigned int *)(v2 + 168);
        if (v31 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<DgnPrimArray<double>>::reallocElts(v2 + 160, 1, 1);
          uint64_t v31 = *(unsigned int *)(v2 + 168);
        }
        uint64_t v32 = *(void *)(v2 + 160);
        uint64_t v33 = (int *)(v32 + 16 * v31);
        *uint64_t v33 = v45;
        v33[1] = v30;
        v33[2] = v27;
        v33[3] = 0;
        uint64_t v34 = *(unsigned int *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v34 + 1;
        *(_DWORD *)(v32 + 16 * v34 + 12) = 1;
        uint64_t v35 = *(unsigned int *)(v2 + 248);
        if (v35 == *(_DWORD *)(v2 + 252))
        {
          DgnArray<PrefilterResultFrame>::reallocElts(v39, 1, 1);
          uint64_t v35 = *(unsigned int *)(v2 + 248);
        }
        uint64_t v36 = *(void *)(v2 + 240) + 32 * v35;
        *(_DWORD *)uint64_t v36 = v43;
        *(_DWORD *)(v36 + 4) = v41;
        *(_DWORD *)(v36 + 8) = v34;
        *(_WORD *)(v36 + 12) = -2;
        *(_DWORD *)(v36 + 16) = v42;
        *(void *)(v36 + 20) = v44;
        *(_WORD *)(v36 + 28) = 0;
        ++*(_DWORD *)(v2 + 248);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v47);
        ++v4;
        LODWORD(v37) = *(_DWORD *)(v2 + 312);
        unsigned int v38 = *(_DWORD *)(v2 + 20);
        if (v37 >= v38) {
          unint64_t v37 = v38;
        }
        else {
          unint64_t v37 = v37;
        }
      }
      while (v4 < v37);
    }
  }
  return this;
}

void sub_213E50BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLeafLattice::collectTraces(FstSearchLeafLattice *this)
{
  uint64_t v2 = *((unsigned int *)this + 42);
  unsigned int v66 = 0;
  unsigned int v65 = 0;
  if (v2)
  {
    unsigned int v3 = MemChunkAlloc(4 * v2, 0);
    unint64_t v4 = 0;
    unsigned int v65 = v3;
    unsigned int v66 = v2;
    do
      *((_DWORD *)v3 + v4++) = 0;
    while (v4 < v66);
  }
  unint64_t v5 = *((unsigned int *)this + 62);
  if (v5)
  {
    unint64_t v6 = 0;
    int v7 = v65;
    int v8 = (unsigned int *)(*((void *)this + 30) + 8);
    do
    {
      unsigned int v10 = *v8;
      v8 += 8;
      uint64_t v9 = v10;
      if (v10 != -1)
      {
        *((_DWORD *)v7 + v9) = 1;
        unint64_t v5 = *((unsigned int *)this + 62);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  LODWORD(v11) = *((_DWORD *)this + 42);
  if (!v11)
  {
    uint64_t v63 = 0;
    uint64_t v64 = 0;
LABEL_54:
    unsigned int v25 = 0;
    *((_DWORD *)this + 42) = 0;
    goto LABEL_55;
  }
  char v12 = 0;
  uint64_t v13 = (uint64_t *)((char *)this + 160);
  int v14 = v65;
  uint64_t v15 = (uint64_t *)((char *)this + 176);
  do
  {
    uint64_t v11 = (v11 - 1);
    if (v12)
    {
      char v12 = 1;
    }
    else if (*(_DWORD *)(*v13 + 16 * v11) == 16777213)
    {
      char v12 = 1;
      *((_DWORD *)v14 + v11) = 1;
    }
    else
    {
      char v12 = 0;
    }
    if (*((_DWORD *)v14 + v11))
    {
      uint64_t v16 = *v13 + 16 * v11;
      int v17 = *(_DWORD *)(v16 + 12);
      if (v17 >= 1)
      {
        unsigned int v18 = *(_DWORD *)(v16 + 8);
        int v19 = v17 + v18;
        uint64_t v20 = *v15;
        do
        {
          uint64_t v21 = *(unsigned int *)(v20 + 24 * v18 + 12);
          if (v21 != -1) {
            *((_DWORD *)v14 + v21) = 1;
          }
          ++v18;
        }
        while ((int)v18 < v19);
      }
    }
  }
  while (v11);
  unsigned int v22 = *((_DWORD *)this + 42);
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  if (!v22) {
    goto LABEL_54;
  }
  unint64_t v23 = 0;
  unsigned int v24 = 0;
  unsigned int v25 = 0;
  do
  {
    if (*((_DWORD *)v65 + v23))
    {
      uint64_t v26 = *v13;
      unsigned int v62 = v24;
      if (v23 != v24)
      {
        *(_OWORD *)(v26 + 16 * v24) = *(_OWORD *)(v26 + 16 * v23);
        uint64_t v26 = *v13;
      }
      *(_DWORD *)(v26 + 16 * v24 + 8) = v25;
      uint64_t v27 = v26 + 16 * v23;
      uint64_t v28 = *(unsigned int *)(v27 + 8);
      uint64_t v29 = (*(_DWORD *)(v27 + 12) + v28);
      if (v28 < v29)
      {
        uint64_t v30 = *v15;
        do
        {
          unsigned int v31 = v25;
          if (v28 != v25)
          {
            uint64_t v32 = (long long *)(v30 + 24 * v28);
            uint64_t v33 = v30 + 24 * v25;
            long long v34 = *v32;
            *(void *)(v33 + 14) = *(void *)((char *)v32 + 14);
            *(_OWORD *)uint64_t v33 = v34;
            uint64_t v30 = *v15;
          }
          uint64_t v35 = v30 + 24 * v25;
          unsigned int v38 = *(_DWORD *)(v35 + 12);
          uint64_t v36 = (_DWORD *)(v35 + 12);
          uint64_t v37 = v38;
          if (v38 != -1) {
            *uint64_t v36 = *((_DWORD *)v65 + v37);
          }
          int v39 = v64;
          if (*(_WORD *)(v30 + 24 * v31 + 20))
          {
            unsigned int v40 = 0;
            unsigned int v41 = v64;
            do
            {
              __int16 v42 = *(_WORD *)(*((void *)this + 24) + 2 * (v40 + *(_DWORD *)(v30 + 24 * v31 + 16)));
              if (v41 == HIDWORD(v64))
              {
                DgnPrimArray<short>::reallocElts((uint64_t)&v63, 1, 1);
                unsigned int v41 = v64;
                uint64_t v30 = *v15;
              }
              *(_WORD *)(v63 + 2 * v41++) = v42;
              LODWORD(vDgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 64) = v41;
              ++v40;
            }
            while (v40 < *(unsigned __int16 *)(v30 + 24 * v31 + 20));
          }
          *(_DWORD *)(v30 + 24 * v31 + 16) = v39;
          unsigned int v25 = v31 + 1;
          ++v28;
        }
        while (v28 != v29);
      }
      *((_DWORD *)v65 + v23) = v62;
      unsigned int v24 = v62 + 1;
      unsigned int v22 = *((_DWORD *)this + 42);
      uint64_t v13 = (uint64_t *)((char *)this + 160);
    }
    ++v23;
  }
  while (v23 < v22);
  unsigned int v43 = *((_DWORD *)this + 43);
  if (v24 > v43)
  {
    DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v13, v24 - v43, 0);
    unsigned int v22 = *((_DWORD *)this + 42);
  }
  if (v22 < v24)
  {
    unint64_t v44 = v24 - (unint64_t)v22;
    int v45 = (_OWORD *)(*v13 + 16 * v22);
    do
    {
      *v45++ = xmmword_2140992B0;
      --v44;
    }
    while (v44);
  }
  *((_DWORD *)this + 42) = v24;
  unsigned int v46 = *((_DWORD *)this + 47);
  if (v25 > v46) {
    DgnArray<CWIDAC>::reallocElts((uint64_t)this + 176, v25 - v46, 0);
  }
  uint64_t v47 = *((unsigned int *)this + 46);
  if (v47 < v25)
  {
    uint64_t v48 = v25 - v47;
    uint64_t v49 = (_WORD *)(*v15 + 24 * v47 + 20);
    do
    {
      *(_OWORD *)(v49 - 10) = xmmword_2140992A0;
      *((_DWORD *)v49 - 1) = 0;
      *uint64_t v49 = 0;
      v49 += 12;
      --v48;
    }
    while (v48);
  }
LABEL_55:
  *((_DWORD *)this + 46) = v25;
  unint64_t v50 = *((unsigned int *)this + 62);
  if (v50)
  {
    unint64_t v51 = 0;
    uint64_t v52 = v64;
    uint64_t v53 = *((void *)this + 30);
    do
    {
      if (*(_WORD *)(v53 + 32 * v51 + 28))
      {
        unsigned int v54 = 0;
        LODWORD(v55) = v52;
        do
        {
          __int16 v56 = *(_WORD *)(*((void *)this + 24) + 2 * (v54 + *(_DWORD *)(v53 + 32 * v51 + 24)));
          if (v55 == HIDWORD(v64))
          {
            DgnPrimArray<short>::reallocElts((uint64_t)&v63, 1, 1);
            LODWORD(v55) = v64;
            uint64_t v53 = *((void *)this + 30);
          }
          *(_WORD *)(v63 + 2 * v55) = v56;
          uint64_t v55 = (v55 + 1);
          LODWORD(vDgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 64) = v55;
          ++v54;
        }
        while (v54 < *(unsigned __int16 *)(v53 + 32 * v51 + 28));
        unint64_t v50 = *((unsigned int *)this + 62);
      }
      else
      {
        uint64_t v55 = v52;
      }
      *(_DWORD *)(v53 + 32 * v51++ + 24) = v52;
      uint64_t v52 = v55;
    }
    while (v51 < v50);
  }
  else
  {
    LODWORD(v55) = v64;
  }
  DgnPrimArray<unsigned short>::copyArraySlice((unint64_t)this + 192, &v63, 0, v55);
  uint64_t v57 = *((unsigned int *)this + 62);
  if (v57)
  {
    uint64_t v58 = v65;
    __int16 v59 = (_DWORD *)(*((void *)this + 30) + 8);
    do
    {
      uint64_t v60 = *v59;
      if (v60 != -1) {
        *__int16 v59 = *((_DWORD *)v58 + v60);
      }
      v59 += 8;
      --v57;
    }
    while (v57);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v63);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v65);
}

void sub_213E51054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va1);
  _Unwind_Resume(a1);
}

int64x2_t FstSearchLeafLattice::vite(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  FstSearchLeafLattice::advanceDeltas((FstSearchLeafLattice *)this, a2, a3, a4, a5);
  int64x2_t v13 = 0u;
  int64x2_t v14 = 0u;
  SnapTime::recordTime((SnapTime *)&v13, 1, 0, 0, 0);
  if (a2 >= 1)
  {
    unsigned int v7 = *((_DWORD *)this + 18);
    if (v7)
    {
      if (!(a2 % v7)) {
        FstSearchLeafLattice::collectTraces((FstSearchLeafLattice *)this);
      }
    }
  }
  int64x2_t v11 = 0u;
  int64x2_t v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  int v8 = this[13];
  int64x2_t result = vaddq_s64(v8[14], vsubq_s64(v11, v13));
  int64x2_t v10 = vaddq_s64(v8[15], vsubq_s64(v12, v14));
  v8[14] = result;
  v8[15] = v10;
  return result;
}

_DWORD *FstSearchLeafLattice::reset(_DWORD *this)
{
  this[42] = 0;
  this[46] = 0;
  this[50] = 0;
  this[62] = 0;
  return this;
}

double FstSearchLeafLattice::doFrame(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  if (a3 >= 20000) {
    a3 = 20000;
  }
  *(void *)&double result = FstSearchLeafLattice::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearchLeafLattice::beginTopRecPassSyncRecog(FstSearchLeafLattice *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 288, a3, *((PelScoreCache **)this + 4));
    uint64_t result = ArcGraph::findBackoffState(*((void *)this + 5));
    *((_DWORD *)this + 100) = result;
    *((unsigned char *)this + 404) = 1;
  }
  return result;
}

uint64_t FstSearchLeafLattice::endTopRecPassSyncRecog(FstSearchLeafLattice *this)
{
  int64x2_t v10 = 0u;
  int64x2_t v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  int64x2_t v8 = 0u;
  int64x2_t v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  int64x2_t v2 = vsubq_s64(v8, v10);
  unsigned int v3 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v4 = v3[13];
  int64x2_t v5 = vaddq_s64(v3[12], v2);
  int64x2_t v8 = v2;
  int64x2_t v9 = vsubq_s64(v9, v11);
  int64x2_t v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + 70) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

void FstSearchLeafLattice::printSize(FstSearchLeafLattice *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v125);
  if (v126) {
    uint64_t v15 = v125;
  }
  else {
    uint64_t v15 = &unk_214099300;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v11, v12, v13, v14, a3, &unk_214099300, a3, &unk_214099300, v15);
  DgnString::~DgnString((DgnString *)&v125);
  if (a2 != -1) {
    xlprintf("%d ", v16, v17, v18, v19, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v16, v17, v18, v19, a3, &unk_214099300);
  uint64_t v20 = (a3 + 1);
  uint64_t v21 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v125);
  if (v126) {
    uint64_t v26 = v125;
  }
  else {
    uint64_t v26 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v22, v23, v24, v25, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v26, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v125);
  if (v126) {
    unsigned int v31 = v125;
  }
  else {
    unsigned int v31 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v27, v28, v29, v30, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v31, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v125);
  if (v126) {
    uint64_t v36 = v125;
  }
  else {
    uint64_t v36 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v32, v33, v34, v35, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v36, 4, 4, 0);
  uint64_t v121 = a2;
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v125);
  if (v126) {
    unsigned int v41 = v125;
  }
  else {
    unsigned int v41 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v37, v38, v39, v40, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v41, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  uint64_t v42 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v42 = 16;
  }
  uint64_t v43 = *((unsigned int *)this + 42);
  uint64_t v44 = 16 * v43;
  if ((int)v43 <= 0) {
    uint64_t v44 = 0;
  }
  uint64_t v45 = v44 + v42;
  uint64_t v46 = v44 + v42 + 16 * (*((_DWORD *)this + 43) - v43);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v125);
  if (v126) {
    unint64_t v51 = v125;
  }
  else {
    unint64_t v51 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v47, v48, v49, v50, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v51, v46, v45, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v46;
  *a5 += v45;
  uint64_t v52 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v52 = 16;
  }
  int v53 = *((_DWORD *)this + 46);
  uint64_t v54 = 22 * v53;
  if (v53 <= 0) {
    uint64_t v54 = 0;
  }
  uint64_t v55 = v54 + v52;
  uint64_t v56 = v54 + v52 + 22 * (*((_DWORD *)this + 47) - v53);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v125);
  if (v126) {
    uint64_t v61 = v125;
  }
  else {
    uint64_t v61 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v57, v58, v59, v60, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v61, v56, v55, 0);
  uint64_t v120 = a3;
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v56;
  *a5 += v55;
  if (gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v62 = 12;
  }
  else {
    uint64_t v62 = 16;
  }
  uint64_t v63 = *((unsigned int *)this + 50);
  unsigned int v64 = *((_DWORD *)this + 51);
  if (v64 >= v63)
  {
    uint64_t v65 = 0;
    if ((int)v63 > 0) {
      uint64_t v62 = (v62 | 2) + 2 * (v63 - 1);
    }
    uint64_t v66 = v62 + 2 * (v64 - v63);
  }
  else
  {
    uint64_t v65 = 2 * v63;
    uint64_t v66 = v62;
  }
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2961, (DgnString *)&v125);
  if (v126) {
    uint64_t v71 = v125;
  }
  else {
    uint64_t v71 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v67, v68, v69, v70, v20, &unk_214099300, v21, v21, v71, v66, v62, v65);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v66;
  *a5 += v62;
  *a6 += v65;
  uint64_t v72 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v72 = 16;
  }
  uint64_t v73 = *((unsigned int *)this + 62);
  uint64_t v74 = 28 * v73;
  if ((int)v73 <= 0) {
    uint64_t v74 = 0;
  }
  uint64_t v75 = v74 + v72;
  uint64_t v76 = v74 + v72 + 28 * (*((_DWORD *)this + 63) - v73);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v125);
  if (v126) {
    uint64_t v81 = v125;
  }
  else {
    uint64_t v81 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v77, v78, v79, v80, v20, &unk_214099300, v21, v21, v81, v76, v75, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v76;
  *a5 += v75;
  uint64_t v82 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v82 = 16;
  }
  uint64_t v83 = *((unsigned int *)this + 66);
  uint64_t v84 = 28 * v83;
  if ((int)v83 <= 0) {
    uint64_t v84 = 0;
  }
  uint64_t v85 = v84 + v82;
  uint64_t v86 = v84 + v82 + 28 * (*((_DWORD *)this + 67) - v83);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v125);
  if (v126) {
    int64x2_t v91 = v125;
  }
  else {
    int64x2_t v91 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v87, v88, v89, v90, v20, &unk_214099300, v21, v21, v91, v86, v85, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v86;
  *a5 += v85;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v125);
  if (v126) {
    int v96 = v125;
  }
  else {
    int v96 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v92, v93, v94, v95, v20, &unk_214099300, v21, v21, v96, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v125);
  if (v126) {
    int v101 = v125;
  }
  else {
    int v101 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v97, v98, v99, v100, v20, &unk_214099300, v21, v21, v101, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v125);
  if (v126) {
    int v106 = v125;
  }
  else {
    int v106 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v102, v103, v104, v105, v20, &unk_214099300, v21, v21, v106, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += 4;
  *a5 += 4;
  uint64_t v107 = sizeObject((uint64_t)this + 288, 0);
  uint64_t v108 = sizeObject((uint64_t)this + 288, 1);
  uint64_t v109 = sizeObject((uint64_t)this + 288, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v125);
  if (v126) {
    uint64_t v114 = v125;
  }
  else {
    uint64_t v114 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v110, v111, v112, v113, v20, &unk_214099300, v21, v21, v114, v107, v108, v109);
  DgnString::~DgnString((DgnString *)&v125);
  *a4 += v107;
  *a5 += v108;
  *a6 += v109;
  unint64_t v123 = 0;
  unint64_t v124 = 0;
  SearchItf::printSize(this, v121, v20, &v124, &v123, &v123);
  *a4 += v124;
  *a5 += v123;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v125);
  if (v126) {
    int64x2_t v119 = v125;
  }
  else {
    int64x2_t v119 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v115, v116, v117, v118, v120, &unk_214099300, (35 - v120), (35 - v120), v119, *a4, *a5, *a6);
  DgnString::~DgnString((DgnString *)&v125);
}

void sub_213E51A50(_Unwind_Exception *a1)
{
  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

BOOL FstSearchLeafLattice::findBestPath(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8 = *(unsigned int *)(a1 + 168);
  if (v8) {
    BOOL v9 = *(_DWORD *)(a3 + 8) == 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    *(void *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v8;
  }
  if (v8) {
    BOOL v10 = *(_DWORD *)(a2 + 8) == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    *(void *)a2 = MemChunkAlloc(v8, 0);
    *(_DWORD *)(a2 + 8) = v8;
LABEL_14:
    uint64_t v11 = 0;
    do
    {
      *(unsigned char *)(*(void *)a2 + v11) = 0;
      *(unsigned char *)(*(void *)a3 + v11++) = 0;
    }
    while (v8 != v11);
    goto LABEL_16;
  }
  if (v8) {
    goto LABEL_14;
  }
LABEL_16:
  unsigned int BestTrace = FstSearchLeafLatticeBackoff::getBestTrace(a1, (void *)a2, (void *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1) {
    return 0;
  }
  uint64_t v13 = *(void *)(a1 + 160) + 16 * BestTrace;
  LODWORD(v13) = *(_DWORD *)(*(void *)(a1 + 176) + 24 * *(unsigned int *)(v13 + 8))
               + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v13 + 4));
  *a4 = v13;
  return v13 != 1879048192;
}

uint64_t FstSearchLeafLattice::buildWordLattice(uint64_t a1, uint64_t *a2, void *a3, void *a4, unsigned __int8 a5)
{
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  int v30 = 0;
  uint64_t v27 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v26, *(unsigned int *)(a1 + 168));
  unint64_t v8 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v8, 0, 128);
  v8[4] = (uint64_t)a2;
  FstSearchLeafLatticeBackoff::createLatticeNodes(a1, &v29, (uint64_t)&v27, (uint64_t)a2, v26, a3, a4);
  uint64_t v22 = *(unsigned int *)(a1 + 168);
  if (v22)
  {
    uint64_t v9 = 0;
    int v10 = v28;
    do
    {
      if (*(unsigned char *)(*a3 + v9))
      {
        uint64_t v11 = *(void *)(a1 + 160);
        if (*(_DWORD *)(v11 + 16 * v9) != 16777209)
        {
          uint64_t v12 = v11 + 16 * v9;
          if (*(int *)(v12 + 12) >= 1)
          {
            unsigned int v13 = *(_DWORD *)(v12 + 8);
            do
            {
              uint64_t v14 = *(void *)(a1 + 176) + 24 * v13;
              uint64_t v15 = *(unsigned int *)(v14 + 12);
              unsigned int v25 = v13;
              if (v15 == -1) {
                unsigned int v16 = 0;
              }
              else {
                unsigned int v16 = v10 - *((_DWORD *)v29 + v15);
              }
              uint64_t v17 = *(unsigned int *)(v27 + 4 * v16);
              if (*(unsigned char *)(*a4 + v9)) {
                FstSearchLeafLattice::createLatticeLink((ArcGraph **)a1, v9, (int *)v14, 0xFFFFFFFFLL, v17, *(unsigned int *)(v27 + 4 * (v10 - *((_DWORD *)v29 + v9))), a2, (uint64_t)v8, a5);
              }
              uint64_t v18 = v26[0];
              if (*(_DWORD *)(v26[0] + 16 * v9 + 8))
              {
                unint64_t v19 = 0;
                do
                {
                  uint64_t v20 = *(unsigned int *)(*(void *)(v18 + 16 * v9) + 4 * v19);
                  FstSearchLeafLattice::createLatticeLink((ArcGraph **)a1, v9, (int *)v14, v20, v17, *(unsigned int *)(v27 + 4 * (v10 - *((_DWORD *)v29 + v20))), a2, (uint64_t)v8, a5);
                  ++v19;
                  uint64_t v18 = v26[0];
                }
                while (v19 < *(unsigned int *)(v26[0] + 16 * v9 + 8));
              }
              unsigned int v13 = v25 + 1;
            }
            while ((int)(v25 + 1) < *(_DWORD *)(*(void *)(a1 + 160) + 16 * v9 + 12)
                                   + *(_DWORD *)(*(void *)(a1 + 160) + 16 * v9 + 8));
          }
        }
      }
      ++v9;
    }
    while (v9 != v22);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>((uint64_t)v8);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v26);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v27);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v29);
}

void sub_213E51DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearchLeafLattice::createLatticeLink(ArcGraph **this, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, unsigned __int8 a9)
{
  unsigned int v33 = a6;
  unsigned int v11 = a5;
  unsigned int v12 = a4;
  if ((a4 & 0x80000000) != 0) {
    SilenceToken = 0;
  }
  else {
    SilenceToken = (_DWORD *)FstSearchLeafLatticeBackoff::getSilenceToken((FstSearchLeafLatticeBackoff *)this, a4, a2);
  }
  ArcGraph::lexToCWIDAC(this[5], *((_DWORD *)this[20] + 4 * a2), (uint64_t)a3, a4, a5, a6, (uint64_t)a7, a8, (uint64_t)v43);
  int v17 = a3[1];
  if (SilenceToken)
  {
    v17 += SilenceToken[1];
    int v18 = *SilenceToken + *a3;
  }
  else
  {
    int v18 = *a3;
  }
  if (v43[0] >> 25 == 126)
  {
    int v19 = 0;
    int v20 = v17;
  }
  else
  {
    int v19 = *((_DWORD *)this + 34);
    int v20 = v17 - v19;
  }
  int v21 = v18 - v17;
  if ((v12 & 0x80000000) != 0)
  {
    int v22 = 0;
  }
  else
  {
    int v22 = *((_DWORD *)this + 35);
    v20 -= v22;
  }
  int v37 = v20;
  uint64_t v38 = 0;
  int v39 = v19;
  int v40 = v21;
  int v41 = 0;
  int v42 = v22;
  uint64_t v23 = a3[3];
  uint64_t v24 = this[20];
  if (v23 == -1)
  {
    int v26 = 0;
    if (a9) {
      goto LABEL_19;
    }
  }
  else
  {
    int v25 = *((_DWORD *)v24 + 4 * v23 + 1);
    if (a9)
    {
      if (v25 >= 1) {
        --v25;
      }
      int v26 = (v25 >> 1) + 1;
LABEL_19:
      int v27 = *((_DWORD *)v24 + 4 * a2 + 1);
      if (v27 >= 1) {
        --v27;
      }
      int v28 = (v27 >> 1) + 1;
      int v29 = v28 - v26;
      if ((v12 & 0x80000000) == 0)
      {
        int v30 = *((_DWORD *)v24 + 4 * v12 + 1);
        if (v30 >= 1) {
          --v30;
        }
        int v31 = v30 >> 1;
        goto LABEL_28;
      }
      goto LABEL_29;
    }
    int v26 = v25 + 1;
  }
  int v28 = *((_DWORD *)v24 + 4 * a2 + 1) + 1;
  int v29 = v28 - v26;
  if ((v12 & 0x80000000) == 0)
  {
    int v31 = *((_DWORD *)v24 + 4 * v12 + 1);
LABEL_28:
    int v32 = v31 - v28 + 1;
    goto LABEL_30;
  }
LABEL_29:
  int v32 = 0;
LABEL_30:
  WordLatticeLC::WordLatticeLC((uint64_t)v35, (uint64_t)v43, v26, v29, v32, (uint64_t)&v37);
  v34[0] = 0;
  v34[1] = 0;
  FstSearchLeafLatticeBackoff::buildLinkSegmentation((unint64_t)this, (uint64_t)v34, (uint64_t)a3, v26, a9);
  if (SilenceToken) {
    FstSearchLeafLatticeBackoff::buildLinkSegmentation((unint64_t)this, (uint64_t)v34, (uint64_t)SilenceToken, v28, a9);
  }
  unint64_t v36 = WordLattice::findOrAddLinkSegSeqId((uint64_t)a7, (uint64_t)v34, a8);
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v11, (const WordLatticeLC *)v33, (WordLatticeLC *)v35);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)v34);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v35);
}

void sub_213E52050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)va);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va1);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLeafLattice::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(void *)(this + 112) = a2;
  if (*(unsigned char *)(this + 404)) {
    return MiniFst::beginTopFstSyncRecog(this + 288);
  }
  return this;
}

uint64_t FstSearchLeafLattice::endTopRecSyncRecog(FstSearchLeafLattice *this)
{
  uint64_t v1 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  return v1;
}

uint64_t FstSearchLeafLattice::getBestExitScore(FstSearchLeafLattice *this)
{
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  *((_DWORD *)this + 69) = -1;
  unint64_t v1 = *((unsigned int *)this + 38);
  unint64_t v2 = *((unsigned int *)this + 62);
  if (v1 >= v2) {
    goto LABEL_19;
  }
  uint64_t v4 = 0;
  unsigned int v5 = 0;
  uint64_t v6 = 32 * v1;
  do
  {
    uint64_t v7 = *((void *)this + 30) + v6;
    if (*(_DWORD *)(*((void *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      uint64_t v8 = *(unsigned int *)(v7 + 8);
      if (v8 != -1 && *(_DWORD *)(*((void *)this + 20) + 16 * v8 + 4) == *((_DWORD *)this + 68))
      {
        if (v5 == HIDWORD(v22))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v21, 1, 1);
          unsigned int v5 = v22;
          uint64_t v4 = v21;
        }
        *(_DWORD *)(v4 + 4 * v5) = v8;
        unsigned int v5 = v22 + 1;
        LODWORD(v22) = v22 + 1;
        unint64_t v2 = *((unsigned int *)this + 62);
      }
    }
    ++v1;
    v6 += 32;
  }
  while (v1 < v2);
  if (v5)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *((void *)this + 20);
    int v11 = 1879048192;
    do
    {
      uint64_t v12 = v10 + 16 * *(unsigned int *)(v4 + 4 * v9);
      int v13 = *(_DWORD *)(v12 + 12);
      if (v13 >= 1)
      {
        unsigned int v14 = *(_DWORD *)(v12 + 8);
        int v15 = v13 + v14;
        uint64_t v16 = *((void *)this + 22);
        do
        {
          unsigned int v17 = v14;
          int v18 = *(_DWORD *)(v16 + 24 * v14);
          if (v11 > v18)
          {
            *((_DWORD *)this + 69) = *(_DWORD *)(v16 + 24 * v17 + 12);
            int v11 = v18;
          }
          unsigned int v14 = v17 + 1;
        }
        while ((int)(v17 + 1) < v15);
      }
      ++v9;
    }
    while (v9 != v5);
  }
  else
  {
LABEL_19:
    int v11 = 1879048192;
  }
  if (v11 >= 20000) {
    uint64_t v19 = 20000;
  }
  else {
    uint64_t v19 = v11;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v21);
  return v19;
}

void sub_213E5220C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t FstSearchLeafLattice::getBestScoreMaybeUpdateFstNode(FstSearchLeafLattice *this, Node *a2)
{
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v2 = *((unsigned int *)this + 62);
  if (v2)
  {
    unsigned int v3 = (int *)*((void *)this + 30);
    __int16 v4 = -1;
    int v5 = 1879048192;
    uint64_t v6 = v3;
    do
    {
      int v8 = *v6;
      v6 += 8;
      int v7 = v8;
      if (v5 > v8)
      {
        __int16 v4 = *((_WORD *)v3 + 6);
        int v5 = v7;
      }
      unsigned int v3 = v6;
      --v2;
    }
    while (v2);
    uint64_t v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000) {
        uint64_t v9 = 20000;
      }
      else {
        uint64_t v9 = v5;
      }
    }
  }
  else
  {
    uint64_t v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

uint64_t FstSearchLeafLattice::seedTheory(FstSearchLeafLattice *this, int a2, int a3, int a4, SearchStats *a5)
{
  if (a4 == -2)
  {
    int v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    unsigned int v11 = *((_DWORD *)this + 46);
    if (v11 == *((_DWORD *)this + 47))
    {
      DgnArray<CWIDAC>::reallocElts((uint64_t)this + 176, 1, 1);
      unsigned int v11 = *((_DWORD *)this + 46);
    }
    uint64_t v12 = *((void *)this + 22) + 24 * v11;
    *(_OWORD *)(v12 + 4) = xmmword_2140992E0;
    *(_WORD *)(v12 + 20) = 0;
    *((_DWORD *)this + 46) = v11 + 1;
    *(_DWORD *)uint64_t v12 = a2;
    unsigned int v13 = *((_DWORD *)this + 42);
    if (v13 == *((_DWORD *)this + 43))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 160, 1, 1);
      unsigned int v13 = *((_DWORD *)this + 42);
    }
    unsigned int v14 = (_DWORD *)(*((void *)this + 20) + 16 * v13);
    *unsigned int v14 = a4;
    v14[1] = a3;
    v14[2] = v11;
    v14[3] = 1;
    int v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  int v15 = *(_DWORD *)(*((void *)this + 5) + 144);
  unsigned int v16 = *((_DWORD *)this + 62);
  if (v16 == *((_DWORD *)this + 63))
  {
    DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)this + 240, 1, 1);
    unsigned int v16 = *((_DWORD *)this + 62);
  }
  uint64_t v17 = *((void *)this + 30) + 32 * v16;
  *(_DWORD *)uint64_t v17 = a2;
  *(_DWORD *)(v17 + 4) = v15;
  *(_DWORD *)(v17 + 8) = v9;
  *(_WORD *)(v17 + 12) = -2;
  *(void *)(v17 + 16) = 0;
  *(void *)(v17 + 22) = 0;
  LODWORD(v17) = *((_DWORD *)this + 62) + 1;
  *((_DWORD *)this + 62) = v17;
  *((_DWORD *)this + 38) = v17;

  return FstSearchLeafLatticeBackoff::propagateNulls((uint64_t)this, 20000, a3, a5);
}

uint64_t FstSearchLeafLattice::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(unsigned int *)(result + 276);
  if (v8 != -1)
  {
    int v9 = (void *)result;
    uint64_t v10 = (unsigned int *)(*(void *)(result + 160) + 16 * v8);
    for (i = *(unsigned int *)(*(void *)(result + 176) + 24 * v10[2] + 12); i != -1; uint64_t v8 = v16)
    {
      uint64_t v16 = i;
      uint64_t result = v9[5];
      if (*v10 == 16777209)
      {
        int v17 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        uint64_t result = ArcGraph::lexToCWID((ArcGraph *)result, *v10, a3, (uint64_t)a4, a5, a6, a7, a8);
        int v17 = result;
      }
      uint64_t v18 = *(unsigned int *)(a2 + 8);
      if (v18 == *(_DWORD *)(a2 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        uint64_t v18 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(void *)a2 + 4 * v18) = v17;
      ++*(_DWORD *)(a2 + 8);
      uint64_t v19 = *(unsigned int *)(a6 + 8);
      if (v19 == *(_DWORD *)(a6 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        uint64_t v19 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(void *)a6 + 4 * v19) = v8;
      ++*(_DWORD *)(a6 + 8);
      uint64_t v20 = v9[20];
      int v21 = *(_DWORD *)(v20 + 16 * v8 + 4);
      uint64_t v22 = *(unsigned int *)(a3 + 8);
      if (v22 == *(_DWORD *)(a3 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        uint64_t v22 = *(unsigned int *)(a3 + 8);
        uint64_t v20 = v9[20];
      }
      *(_DWORD *)(*(void *)a3 + 4 * v22) = v21;
      ++*(_DWORD *)(a3 + 8);
      int v23 = *(_DWORD *)(v9[22] + 24 * *(unsigned int *)(v20 + 16 * v8 + 8));
      uint64_t v24 = *(unsigned int *)(a5 + 8);
      if (v24 == *(_DWORD *)(a5 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        uint64_t v24 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(void *)a5 + 4 * v24) = v23;
      ++*(_DWORD *)(a5 + 8);
      uint64_t v10 = (unsigned int *)(v9[20] + 16 * v16);
      uint64_t i = *(unsigned int *)(v9[22] + 24 * v10[2] + 12);
    }
    *a4 = *v10;
  }
  return result;
}

void FstSearchLeafLattice::checkSearchParametersValidityForArcGraph(FstSearchLeafLattice *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *((void *)this + 5);
  if (*(unsigned char *)(v8 + 178))
  {
    int v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(unsigned char *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    }
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    }
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(void *)(**(void **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((void *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if (a2)
      {
        if (!*(unsigned char *)(v8 + 203)) {
          return;
        }
      }
      else if (*(unsigned char *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(unsigned char *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

uint64_t FstSearchLeafLattice::makePartialResult(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    uint64_t v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(void *)a2 + v9))(*(void *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  unsigned int BestTrace = FstSearchLeafLatticeBackoff::getBestTrace((uint64_t)a1, 0, 0, 1);
  if (BestTrace == -1) {
    return 1879048192;
  }
  unsigned int v15 = BestTrace;
  FstSearchLeafLatticeBackoff::getHistory((uint64_t)a1, BestTrace, a3, a4, v11, v12, v13, v14);
  memset(v25, 0, sizeof(v25));
  int v26 = 0;
  if (*(_DWORD *)(a3 + 8))
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    int v18 = 0;
    do
    {
      uint64_t v19 = *(void *)a3 + v16;
      int v20 = *(_DWORD *)(v19 + 28);
      WordLatticeLC::WordLatticeLC((uint64_t)v24, v19, v18, *(_DWORD *)(v19 + 24) - v18, v20 - *(_DWORD *)(v19 + 24), (uint64_t)v25);
      uint64_t v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(void *)a2 + 112 * v21), (const WordLatticeLC *)v24);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v24);
      ++v17;
      v16 += 32;
      int v18 = v20;
    }
    while (v17 < *(unsigned int *)(a3 + 8));
  }
  uint64_t v22 = a1[20] + 16 * v15;
  return (*(_DWORD *)(a1[22] + 24 * *(unsigned int *)(v22 + 8))
                      + *(_DWORD *)(a1[11] + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_213E52960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void FstSearchLatticeDurationBackoff::FstSearchLatticeDurationBackoff(FstSearchLatticeDurationBackoff *this, const int *a2, const int *a3)
{
  SearchItf::SearchItf(this);
  *(void *)uint64_t v5 = &unk_26C4E42F0;
  *(_DWORD *)(v5 + 136) = *a2;
  *(_DWORD *)(v5 + 140) = *a3;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 232) = 0u;
  *(_OWORD *)(v5 + 216) = 0u;
  *(_DWORD *)(v5 + 248) = -1;
  *(_DWORD *)(v5 + 256) = 1879048192;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_OWORD *)(v5 + 2DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 64) = 0u;
  *(unsigned char *)(v5 + 3DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = 0;
}

uint64_t FstSearchLatticeDurationBackoff::maybeInitDurModel(FstSearchLatticeDurationBackoff *this, const PicMgr *a2, int a3)
{
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  PicMgr::getPelDurIdMap((uint64_t)a2, (uint64_t)&v15);
  if (a3 == 1) {
    uint64_t v6 = 56;
  }
  else {
    uint64_t v6 = 72;
  }
  uint64_t v7 = v16;
  unsigned int v8 = *((_DWORD *)this + 51);
  if (v16 <= v8)
  {
    *((_DWORD *)this + 50) = v16;
    if (!v7) {
      goto LABEL_13;
    }
  }
  else
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 192, v16 - v8, 0);
    *((_DWORD *)this + 50) = v7;
  }
  uint64_t v9 = 0;
  uint64_t v10 = v15;
  uint64_t v11 = *((void *)this + 24);
  do
  {
    if (!(_WORD)v9 || (uint64_t v12 = *(unsigned __int16 *)(v10 + 2 * v9), v12 == 0xFFFF)) {
      __int16 v13 = 0;
    }
    else {
      __int16 v13 = *(_WORD *)(*(void *)((char *)a2 + v6) + 2 * v12);
    }
    *(_WORD *)(v11 + 2 * v9++) = v13;
  }
  while (v7 != v9);
LABEL_13:
  *((unsigned char *)this + 208) = *((unsigned char *)a2 + 8);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 3);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v15);
}

void sub_213E52AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int64x2_t FstSearchLatticeDurationBackoff::advanceDeltas(FstSearchLatticeDurationBackoff *this, int a2, int a3, SearchStats *a4, int a5)
{
  v143[0] = a2;
  int64x2_t v141 = 0u;
  int64x2_t v142 = 0u;
  SnapTime::recordTime((SnapTime *)&v141, 1, 0, 0, 0);
  uint64_t v114 = (int *)((char *)this + 256);
  *((_DWORD *)this + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 64) = a3;
  int v7 = *((_DWORD *)this + 2);
  unsigned int v8 = *((_DWORD *)this + 56);
  if (v8)
  {
    unsigned int v115 = 0;
    unsigned int v116 = 0;
    unsigned int v9 = 0;
    int v104 = *((_DWORD *)this + 53);
    uint64_t v112 = (char *)this + 232;
    int v106 = *((unsigned __int8 *)this + 208);
    uint64_t v103 = (FstSearchLatticeDurationBackoff *)((char *)this + 264);
    unint64_t v123 = this;
    int v121 = *((_DWORD *)this + 2);
    do
    {
      uint64_t v10 = v9;
      uint64_t v125 = 32 * v9;
      uint64_t v11 = *((void *)this + 27) + v125;
      uint64_t v110 = *(unsigned int *)(v11 + 4);
      if (v8 <= v9 + 1) {
        ++v9;
      }
      else {
        unsigned int v9 = v8;
      }
      unsigned int v109 = v9 - 1;
      uint64_t v12 = (int *)(v11 + 36);
      uint64_t v13 = 1;
      while (v10 + v13 < (unint64_t)v8)
      {
        int v14 = *v12;
        v12 += 8;
        ++v13;
        if (v14 != v110)
        {
          unsigned int v109 = v10 + v13 - 2;
          unsigned int v9 = v10 + v13 - 1;
          break;
        }
      }
      uint64_t v15 = *((void *)this + 5);
      if (*(_DWORD *)(v15 + 160) != v110)
      {
        unsigned int v16 = v109;
        if (*(_DWORD *)(v15 + 140) > (int)v110 && v10 <= v109)
        {
          uint64_t v18 = 0;
          int v19 = v109 - v10 + 1;
          do
          {
            if (*((_DWORD *)this + 19) + *((_DWORD *)this + 64) >= 5000) {
              int v20 = 5000;
            }
            else {
              int v20 = *((_DWORD *)this + 19) + *((_DWORD *)this + 64);
            }
            int ScoreAllowBackoff_updateNodeInSequence = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(*((void *)this + 27) + v125 + v18 + 12), *(_DWORD *)(*((void *)this + 27) + v125 + v18), v20);
            uint64_t v22 = *((void *)this + 27) + v125 + v18;
            __int16 v23 = *(_WORD *)(v22 + 12);
            int v24 = *(_DWORD *)(v22 + 24);
            int v25 = v106;
            if (v24 >= 1) {
              int v25 = v106 - v24;
            }
            int v26 = v25 & ((v24 - v106) >> 31);
            if (*(_WORD *)(v22 + 12)) {
              int v27 = v24 - v106;
            }
            else {
              int v27 = *(_DWORD *)(v22 + 24);
            }
            if (*(_WORD *)(v22 + 12)) {
              int v28 = v26 + *(_DWORD *)(v22 + 28);
            }
            else {
              int v28 = *(_DWORD *)(v22 + 28);
            }
            if (*(_WORD *)(v22 + 12)) {
              int v29 = v26;
            }
            else {
              int v29 = 0;
            }
            int v30 = v29 + ScoreAllowBackoff_updateNodeInSequence;
            if (v29 + ScoreAllowBackoff_updateNodeInSequence - v7 <= *v114)
            {
              uint64_t v31 = *(void *)(v22 + 4);
              __int16 v32 = *(_WORD *)(v22 + 14);
              uint64_t v33 = *(void *)(v22 + 16);
              if (*v114 > v30) {
                *uint64_t v114 = v30;
              }
              uint64_t v34 = *((unsigned int *)v123 + 60);
              if (v34 == *((_DWORD *)v123 + 61))
              {
                DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)v112, 1, 1);
                uint64_t v34 = *((unsigned int *)v123 + 60);
              }
              uint64_t v35 = *((void *)v123 + 29) + 32 * v34;
              *(_DWORD *)uint64_t v35 = v30;
              *(void *)(v35 + 4) = v31;
              *(_WORD *)(v35 + 12) = v23;
              *(_WORD *)(v35 + 14) = v32;
              *(void *)(v35 + 16) = v33;
              *(_DWORD *)(v35 + 24) = v27;
              *(_DWORD *)(v35 + 28) = v28;
              int v36 = *((_DWORD *)v123 + 60) + 1;
              *((_DWORD *)v123 + 60) = v36;
              this = v123;
              if (!v18)
              {
                unsigned int v37 = v115;
                if (v116 == 2 * *((_DWORD *)v123 + 4)) {
                  unsigned int v37 = v36;
                }
                unsigned int v115 = v37;
                ++v116;
              }
              int v7 = v121;
            }
            else
            {
              this = v123;
            }
            unsigned int v16 = v109;
            v18 += 32;
            --v19;
          }
          while (v19);
        }
        int v105 = v16 - v10 + 1;
        unsigned int v38 = v110;
        uint64_t v107 = v10;
        unsigned int v108 = v9;
        do
        {
          uint64_t v39 = *((void *)this + 5);
          uint64_t v40 = *(void *)(v39 + 152);
          unsigned int v41 = *(_DWORD *)(v40 + 4 * v38);
          int v42 = *(_DWORD *)(v39 + 140);
          int v124 = *(_DWORD *)(v40 + 4 * (v38 + 1));
          unsigned int v111 = v38;
          if (v42 <= v124)
          {
            if (*((unsigned char *)this + 380)) {
              BOOL v70 = v42 <= (int)v110;
            }
            else {
              BOOL v70 = 0;
            }
            if (v70)
            {
              unsigned int v71 = (v41 & 0xFFFFF) <= 0xFFFF3 ? v41 & 0xFFFFF : v41 & 0xFFFFF | 0xF00000;
              if (v71 != 16777210)
              {
                DgnString::DgnString((DgnString *)&v138);
                ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v71, (DgnString *)&v138, v72, v73, v74, v75, v76);
                uint64_t v81 = &unk_214099300;
                if (v138.i32[2]) {
                  uint64_t v81 = (void *)v138.i64[0];
                }
                xprintf("Seed from state %d score %d trace %d, %s\n", v77, v78, v79, v80, v110, *(unsigned int *)(*((void *)this + 27) + 32 * v10), *(unsigned int *)(*((void *)this + 27) + 32 * v10 + 8), v81);
                MiniFst::seed((uint64_t)v103, *(_DWORD *)(*((void *)this + 27) + 32 * v10), *(_DWORD *)(*((void *)this + 27) + 32 * v10 + 20), *(_DWORD *)(*((void *)this + 27) + 32 * v10 + 8), v124);
                DgnString::~DgnString((DgnString *)&v138);
              }
            }
          }
          else
          {
            if (*((_DWORD *)this + 19) + *((_DWORD *)this + 64) >= 5000) {
              int v43 = 5000;
            }
            else {
              int v43 = *((_DWORD *)this + 19) + *((_DWORD *)this + 64);
            }
            int v122 = (v41 >> 20) & 0x3FF;
            int v44 = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), (unsigned __int16)*(_DWORD *)(v40 + 4 * v38), *(_DWORD *)(*((void *)this + 27) + 32 * v10) + ((*(_DWORD *)(v40 + 4 * v38) >> 20) & 0x3FFu), v43);
            if (v10 <= v109)
            {
              uint64_t v45 = 0;
              uint64_t v46 = (v44 - *(_DWORD *)(*((void *)this + 27) + 32 * v10));
              uint64_t v47 = (unsigned __int16)v41;
              int v48 = v105;
              if ((_WORD)v41) {
                int v49 = v104;
              }
              else {
                int v49 = 0;
              }
              unsigned int v120 = v41;
              int v113 = v49;
              do
              {
                uint64_t v50 = *((void *)this + 27) + v125 + v45;
                int v51 = v46 + *(_DWORD *)v50;
                if (v47) {
                  int v53 = *(__int16 *)(*((void *)this + 24) + 2 * v47);
                }
                else {
                  int v53 = 0;
                }
                if (v47)
                {
                  int v52 = *(__int16 *)(*((void *)this + 24) + 2 * v47);
                  int v54 = v52 & (v52 >> 31);
                }
                else
                {
                  int v54 = 0;
                }
                int v55 = (*(_DWORD *)(v50 + 24) & ~(*(int *)(v50 + 24) >> 31)) - v54 + v49;
                int v56 = v51 + v55;
                int v57 = v51 + v55 - v7;
                int v58 = *((_DWORD *)this + 64);
                if (v57 <= v58)
                {
                  int v59 = *(_DWORD *)(v50 + 8);
                  __int16 v60 = *(_WORD *)(v50 + 14);
                  int v61 = *(_DWORD *)(v50 + 16);
                  int v62 = *(_DWORD *)(v50 + 20);
                  int v63 = *(_DWORD *)(v50 + 28);
                  if (v58 > v56) {
                    *uint64_t v114 = v56;
                  }
                  this = v123;
                  uint64_t v64 = *((unsigned int *)v123 + 60);
                  if (v64 == *((_DWORD *)v123 + 61))
                  {
                    int v118 = v61;
                    int v119 = v59;
                    uint64_t v65 = v46;
                    uint64_t v66 = v47;
                    __int16 v117 = v60;
                    DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)v112, 1, 1);
                    int v61 = v118;
                    int v59 = v119;
                    __int16 v60 = v117;
                    int v49 = v113;
                    uint64_t v47 = v66;
                    uint64_t v46 = v65;
                    uint64_t v64 = *((unsigned int *)v123 + 60);
                  }
                  uint64_t v67 = *((void *)v123 + 29) + 32 * v64;
                  *(_DWORD *)uint64_t v67 = v56;
                  *(_DWORD *)(v67 + 4) = v124;
                  *(_DWORD *)(v67 + 8) = v59;
                  unsigned int v41 = v120;
                  *(_WORD *)(v67 + 12) = v120;
                  *(_WORD *)(v67 + 14) = v60;
                  *(_DWORD *)(v67 + 16) = v61 + v122;
                  *(_DWORD *)(v67 + 20) = v62;
                  *(_DWORD *)(v67 + 24) = v53;
                  *(_DWORD *)(v67 + 28) = v55 + v63;
                  int v68 = *((_DWORD *)v123 + 60) + 1;
                  *((_DWORD *)v123 + 60) = v68;
                  if (!v45)
                  {
                    unsigned int v69 = v115;
                    if (v116 == 2 * *((_DWORD *)v123 + 4)) {
                      unsigned int v69 = v68;
                    }
                    unsigned int v115 = v69;
                    ++v116;
                  }
                  int v7 = v121;
                }
                v45 += 32;
                --v48;
              }
              while (v48);
            }
          }
          unsigned int v38 = v111 + 2;
          uint64_t v10 = v107;
          unsigned int v9 = v108;
        }
        while ((v41 & 0x80000000) == 0);
        unsigned int v8 = *((_DWORD *)this + 56);
      }
    }
    while (v9 < v8);
    a3 = *v114;
  }
  else
  {
    unsigned int v115 = 0;
    unsigned int v116 = 0;
  }
  int v140 = a3 + v7;
  if (*((unsigned char *)this + 380)) {
    MiniFst::updateFrame((char *)this + 264, v114, v7, a2);
  }
  int64x2_t v138 = 0u;
  int64x2_t v139 = 0u;
  SnapTime::recordTime((SnapTime *)&v138, 1, 0, 0, 0);
  int64x2_t v138 = vsubq_s64(v138, v141);
  int64x2_t v139 = vsubq_s64(v139, v142);
  uint64_t v82 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v83 = vaddq_s64(v82[1], v139);
  *uint64_t v82 = vaddq_s64(*v82, v138);
  v82[1] = v83;
  int64x2_t v136 = 0u;
  int64x2_t v137 = 0u;
  SnapTime::recordTime((SnapTime *)&v136, 1, 0, 0, 0);
  if (v116 > 2 * *((_DWORD *)this + 4)) {
    FstSearchLatticeDurationBackoff::applyCutoffOnEmitting((uint64_t)this, v115, &v140);
  }
  int64x2_t v134 = 0u;
  int64x2_t v135 = 0u;
  SnapTime::recordTime((SnapTime *)&v134, 1, 0, 0, 0);
  int64x2_t v84 = vsubq_s64(v134, v136);
  uint64_t v85 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v86 = v85[3];
  int64x2_t v87 = vaddq_s64(v85[2], v84);
  int64x2_t v134 = v84;
  int64x2_t v135 = vsubq_s64(v135, v137);
  int64x2_t v88 = vaddq_s64(v86, v135);
  v85[2] = v87;
  v85[3] = v88;
  int64x2_t v132 = 0u;
  int64x2_t v133 = 0u;
  SnapTime::recordTime((SnapTime *)&v132, 1, 0, 0, 0);
  FstSearchLatticeDurationBackoff::makeViterbiDecisionOnEmitting((uint64_t)this);
  unint64_t v89 = *((unsigned int *)this + 6);
  if (v89)
  {
    unint64_t v90 = *((unsigned int *)this + 56);
    if (v89 < v90) {
      mrec_nth_element<FstSearchLeafLatticeBackoffcmpTok>(*((void *)this + 27), v89, v90);
    }
  }
  int64x2_t v130 = 0u;
  int64x2_t v131 = 0u;
  SnapTime::recordTime((SnapTime *)&v130, 1, 0, 0, 0);
  int64x2_t v91 = vsubq_s64(v130, v132);
  uint64_t v92 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v93 = v92[5];
  int64x2_t v94 = vaddq_s64(v92[4], v91);
  int64x2_t v130 = v91;
  int64x2_t v131 = vsubq_s64(v131, v133);
  int64x2_t v95 = vaddq_s64(v93, v131);
  v92[4] = v94;
  v92[5] = v95;
  int64x2_t v128 = 0u;
  int64x2_t v129 = 0u;
  SnapTime::recordTime((SnapTime *)&v128, 1, 0, 0, 0);
  *((_DWORD *)this + 60) = 0;
  uint64_t v96 = *((unsigned int *)this + 56);
  *((_DWORD *)this + 38) = v96;
  if (a4)
  {
    *((void *)a4 + 2) += v96;
    if (*((_DWORD *)a4 + 2) > v96) {
      LODWORD(v96) = *((_DWORD *)a4 + 2);
    }
    *((_DWORD *)a4 + 2) = v96;
  }
  if (*((unsigned char *)this + 380)) {
    FstSearchLatticeDurationBackoff::seedFromMiniFst((uint64_t)this, v143);
  }
  if (a5) {
    FstSearchLatticeDurationBackoff::propagateNulls((uint64_t)this, v140, a2, a4);
  }
  *((_DWORD *)this + 62) = a2;
  int64x2_t v126 = 0u;
  int64x2_t v127 = 0u;
  SnapTime::recordTime((SnapTime *)&v126, 1, 0, 0, 0);
  uint64_t v97 = (int64x2_t *)*((void *)this + 13);
  int64x2_t result = vaddq_s64(v97[6], vsubq_s64(v126, v128));
  int64x2_t v99 = vaddq_s64(v97[7], vsubq_s64(v127, v129));
  v97[6] = result;
  v97[7] = v99;
  return result;
}

void sub_213E532BC(_Unwind_Exception *exception_object)
{
}

uint64_t FstSearchLatticeDurationBackoff::applyCutoffOnEmitting(uint64_t this, unsigned int a2, int *a3)
{
  unint64_t v4 = *(unsigned int *)(this + 240);
  if (v4 > a2)
  {
    uint64_t v6 = this;
    int v7 = (void *)(this + 232);
    uint64_t v8 = a2;
    this = mrec_nth_element<FstSearchLeafLatticeBackoffcmpTok>(*(void *)(this + 232), a2, v4);
    int v9 = *(_DWORD *)(*v7 + 32 * a2);
    if (*a3 > v9) {
      *a3 = v9;
    }
    unsigned int v10 = *(_DWORD *)(v6 + 244);
    if (a2 > v10) {
      this = DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)v7, a2 - v10, 0);
    }
    uint64_t v11 = *(unsigned int *)(v6 + 240);
    if (v11 < a2)
    {
      uint64_t v12 = v8 - v11;
      uint64_t v13 = 32 * v11;
      do
      {
        uint64_t v14 = *v7 + v13;
        *(void *)uint64_t v14 = 0xFFFFFFFF00000000;
        *(_DWORD *)(v14 + 8) = -1;
        *(_WORD *)(v14 + 12) = -2;
        *(void *)(v14 + 16) = 0;
        *(void *)(v14 + 24) = 0;
        v13 += 32;
        --v12;
      }
      while (v12);
    }
    *(_DWORD *)(v6 + 240) = a2;
  }
  return this;
}

uint64_t FstSearchLatticeDurationBackoff::makeViterbiDecisionOnEmitting(uint64_t this)
{
  uint64_t v1 = this;
  unint64_t v2 = *(unsigned int *)(this + 240);
  if (v2)
  {
    this = (uint64_t)mrec_qsort_r<FstSearchLateLatticeHashBackoffActiveToken>(*(char **)(this + 232), v2, 32);
    int v3 = *(_DWORD *)(v1 + 240);
    *(_DWORD *)(v1 + 224) = 0;
    if (v3)
    {
      unsigned int v4 = 0;
      unint64_t v5 = 0;
      unsigned int v6 = 0;
      do
      {
        uint64_t v7 = *(void *)(v1 + 232);
        if (v5 && (uint64_t v8 = v7 + 32 * v5, *(_DWORD *)(v8 + 4) == *(_DWORD *)(v8 - 28)))
        {
          if (v4 >= *(_DWORD *)(v1 + 20) + v6) {
            goto LABEL_16;
          }
          unsigned int i = v6;
          if (v6 < v4)
          {
            int v10 = *(_DWORD *)(v7 + 32 * v5 + 20);
            uint64_t v11 = (int *)(*(void *)(v1 + 216) + 32 * v6 + 20);
            for (unsigned int i = v6; v4 != i; ++i)
            {
              int v12 = *v11;
              v11 += 8;
              if (v12 == v10) {
                break;
              }
            }
          }
          if (i != v4) {
            goto LABEL_16;
          }
          int v13 = *(_DWORD *)(v1 + 228);
        }
        else
        {
          uint64_t v8 = v7 + 32 * v5;
          int v13 = *(_DWORD *)(v1 + 228);
          unsigned int v6 = v4;
        }
        if (v4 == v13)
        {
          this = DgnArray<PrefilterResultFrame>::reallocElts(v1 + 216, 1, 1);
          unsigned int v4 = *(_DWORD *)(v1 + 224);
        }
        uint64_t v14 = (_OWORD *)(*(void *)(v1 + 216) + 32 * v4);
        long long v15 = *(_OWORD *)(v8 + 16);
        *uint64_t v14 = *(_OWORD *)v8;
        v14[1] = v15;
        unsigned int v4 = *(_DWORD *)(v1 + 224) + 1;
        *(_DWORD *)(v1 + 224) = v4;
LABEL_16:
        ++v5;
      }
      while (v5 < *(unsigned int *)(v1 + 240));
    }
  }
  else
  {
    *(_DWORD *)(this + 224) = 0;
  }
  return this;
}

uint64_t FstSearchLatticeDurationBackoff::seedFromMiniFst(uint64_t this, int *a2)
{
  if (*(unsigned char *)(this + 380))
  {
    uint64_t v2 = this;
    unsigned int v3 = *(_DWORD *)(this + 288);
    if (v3 >= *(_DWORD *)(this + 20)) {
      unsigned int v3 = *(_DWORD *)(this + 20);
    }
    if (v3)
    {
      unint64_t v4 = 0;
      uint64_t v46 = this + 176;
      unint64_t v5 = (void *)(this + 160);
      uint64_t v39 = this + 216;
      do
      {
        unsigned int v6 = (int *)(*(void *)(v2 + 280) + 36 * v4);
        int v7 = v6[4];
        int v43 = *v6;
        int v44 = v6[5];
        int v8 = v6[6];
        int v45 = v6[7];
        unsigned int v9 = v6[2];
        uint64_t v47 = 0;
        uint64_t v48 = 0;
        int v41 = v8;
        int v42 = v7;
        if ((v9 & 0x80000000) != 0)
        {
          LODWORD(v13) = -2 - v9;
        }
        else
        {
          uint64_t v10 = 0;
          unsigned int v11 = 0;
          do
          {
            if (v11 == HIDWORD(v48))
            {
              DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v47, 1, 1);
              unsigned int v11 = v48;
              uint64_t v10 = v47;
            }
            *(_DWORD *)(v10 + 4 * v11) = v9;
            uint64_t v12 = v48;
            unsigned int v11 = v48 + 1;
            LODWORD(v48) = v48 + 1;
            unsigned int v9 = *(_DWORD *)(*(void *)(v2 + 264) + 36 * v9 + 8);
          }
          while ((v9 & 0x80000000) == 0);
          LODWORD(v13) = -2 - v9;
          if ((v12 & 0x80000000) == 0)
          {
            int v14 = v12 + 1;
            uint64_t v15 = 4 * v12;
            do
            {
              unsigned int v16 = *(_DWORD *)(v47 + v15);
              uint64_t v17 = *(void *)(v2 + 264);
              uint64_t v18 = (int *)(v17 + 36 * v16);
              int v19 = *v18;
              uint64_t v20 = *((void *)v18 + 2);
              unsigned int v21 = *(_DWORD *)(v2 + 184);
              if (v21 == *(_DWORD *)(v2 + 188))
              {
                DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts(v46, 1, 1);
                unsigned int v21 = *(_DWORD *)(v2 + 184);
                uint64_t v17 = *(void *)(v2 + 264);
              }
              uint64_t v22 = *(void *)(v2 + 176) + 20 * v21;
              *(_DWORD *)(v2 + 184) = v21 + 1;
              *(_DWORD *)uint64_t v22 = v19;
              *(void *)(v22 + 4) = v20;
              *(_DWORD *)(v22 + 12) = v13;
              *(_DWORD *)(v22 + 16) = 0;
              uint64_t v23 = *(void *)(v17 + 36 * v16 + 28);
              uint64_t v24 = *(unsigned int *)(v2 + 168);
              if (v24 == *(_DWORD *)(v2 + 172))
              {
                DgnArray<DgnPrimArray<double>>::reallocElts(v2 + 160, 1, 1);
                uint64_t v24 = *(unsigned int *)(v2 + 168);
              }
              uint64_t v25 = *(void *)(v2 + 160);
              uint64_t v26 = v25 + 16 * v24;
              *(void *)uint64_t v26 = v23;
              *(_DWORD *)(v26 + 8) = v21;
              *(_DWORD *)(v26 + 12) = 0;
              uint64_t v13 = *(unsigned int *)(v2 + 168);
              *(_DWORD *)(v2 + 168) = v13 + 1;
              *(_DWORD *)(v25 + 16 * v13 + 12) = 1;
              --v14;
              v15 -= 4;
            }
            while (v14 > 0);
          }
        }
        unsigned int v27 = *(_DWORD *)(v2 + 184);
        if (v27 == *(_DWORD *)(v2 + 188))
        {
          DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts(v46, 1, 1);
          unsigned int v27 = *(_DWORD *)(v2 + 184);
        }
        uint64_t v28 = *(void *)(v2 + 176);
        *(_DWORD *)(v2 + 184) = v27 + 1;
        int v29 = (_DWORD *)(v28 + 20 * v27);
        *int v29 = v43;
        v29[1] = v42;
        v29[2] = v44;
        int v29[3] = v13;
        v29[4] = 0;
        if (v45 == 16777213)
        {
          int v45 = 16777209;
          if (*(_DWORD *)(*v5 + 16 * v13) == 16777209)
          {
            unsigned int v27 = *(_DWORD *)(*v5 + 16 * v13 + 8);
            int v45 = 16777209;
          }
        }
        int v30 = *a2;
        uint64_t v31 = *(unsigned int *)(v2 + 168);
        if (v31 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<DgnPrimArray<double>>::reallocElts(v2 + 160, 1, 1);
          uint64_t v31 = *(unsigned int *)(v2 + 168);
        }
        uint64_t v32 = *(void *)(v2 + 160);
        uint64_t v33 = (int *)(v32 + 16 * v31);
        *uint64_t v33 = v45;
        v33[1] = v30;
        v33[2] = v27;
        v33[3] = 0;
        uint64_t v34 = *(unsigned int *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v34 + 1;
        *(_DWORD *)(v32 + 16 * v34 + 12) = 1;
        uint64_t v35 = *(unsigned int *)(v2 + 224);
        if (v35 == *(_DWORD *)(v2 + 228))
        {
          DgnArray<PrefilterResultFrame>::reallocElts(v39, 1, 1);
          uint64_t v35 = *(unsigned int *)(v2 + 224);
        }
        uint64_t v36 = *(void *)(v2 + 216) + 32 * v35;
        *(_DWORD *)uint64_t v36 = v43;
        *(_DWORD *)(v36 + 4) = v41;
        *(_DWORD *)(v36 + 8) = v34;
        *(_WORD *)(v36 + 12) = -2;
        *(_DWORD *)(v36 + 16) = v42;
        *(_DWORD *)(v36 + 20) = v44;
        *(void *)(v36 + 24) = 0;
        ++*(_DWORD *)(v2 + 224);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v47);
        ++v4;
        LODWORD(v37) = *(_DWORD *)(v2 + 288);
        unsigned int v38 = *(_DWORD *)(v2 + 20);
        if (v37 >= v38) {
          unint64_t v37 = v38;
        }
        else {
          unint64_t v37 = v37;
        }
      }
      while (v4 < v37);
    }
  }
  return this;
}

void sub_213E53860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLatticeDurationBackoff::propagateNulls(uint64_t this, int a2, int a3, SearchStats *a4)
{
  int v4 = *(_DWORD *)(this + 168);
  unint64_t v5 = (void *)(this + 216);
  LODWORD(v6) = *(_DWORD *)(this + 224);
  uint64_t v86 = this;
  if (v6)
  {
    int v73 = *(_DWORD *)(this + 168);
    uint64_t v74 = a4;
    LODWORD(v7) = 0;
    uint64_t v85 = (void *)(this + 160);
    uint64_t v80 = this + 176;
    uint64_t v82 = this + 216;
    int v88 = a2;
    do
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(unsigned int *)(*v5 + 32 * v7 + 4);
      if (v6 <= (int)v7 + 1) {
        int v10 = v7 + 1;
      }
      else {
        int v10 = v6;
      }
      unsigned int v78 = v7;
      while (v10 - 1 != v7)
      {
        uint64_t v7 = (v7 + 1);
        if (*(_DWORD *)(*v5 + 32 * v7 + 4) != v9) {
          goto LABEL_11;
        }
      }
      LODWORD(v7) = v10;
LABEL_11:
      uint64_t v11 = *(void *)(this + 40);
      if (*(_DWORD *)(v11 + 160) != v9
        && (*(_DWORD *)(v11 + 140) <= (int)v9 || (*(_DWORD *)(*(void *)(v11 + 152) + 4 * v9) & 0x40000000) != 0))
      {
        uint64_t v91 = 32 * v8;
        int v76 = v9;
        unsigned int v77 = v7;
        int v75 = v7 - v78;
        unsigned int v12 = v9;
        do
        {
          uint64_t v13 = *(void *)(this + 40);
          uint64_t v14 = *(void *)(v13 + 152);
          unsigned int v83 = v12;
          unsigned int v87 = *(_DWORD *)(v14 + 4 * v12);
          int v15 = *(_DWORD *)(v13 + 140);
          int v90 = *(_DWORD *)(v14 + 4 * (v12 + 1));
          if (v15 <= v90)
          {
            int v16 = (v87 & 0xFFFFF) <= 0xFFFF3 ? v87 & 0xFFFFF : v87 & 0xFFFFF | 0xF00000;
            BOOL v17 = v16 != 16777210 && v15 <= v76;
            if (!v17 && v77 > v78)
            {
              uint64_t v19 = 0;
              int v20 = (v87 >> 20) & 0x3FF;
              int v84 = v16 + 1;
              int v21 = v75;
              int v89 = v16;
              do
              {
                uint64_t v22 = *v5;
                uint64_t v23 = *v5 + v91;
                int v24 = *(_DWORD *)(v23 + v19) + v20;
                if (v24 > a2) {
                  break;
                }
                uint64_t v25 = v23 + v19;
                int v26 = *(_DWORD *)(v25 + 8);
                __int16 v27 = *(_WORD *)(v25 + 12);
                __int16 v28 = *(_WORD *)(v25 + 14);
                int v29 = *(_DWORD *)(v25 + 20);
                int v30 = *(_DWORD *)(v25 + 28);
                int v31 = *(_DWORD *)(v25 + 16) + v20;
                if (v16 == 16777210)
                {
                  uint64_t v40 = *(unsigned int *)(this + 224);
                  if (v40 == *(_DWORD *)(this + 228))
                  {
                    uint64_t v41 = (uint64_t)v5;
                    int v42 = v5;
                    __int16 v43 = v28;
                    __int16 v44 = v27;
                    int v45 = v31;
                    DgnArray<PrefilterResultFrame>::reallocElts(v41, 1, 1);
                    a2 = v88;
                    int v31 = v45;
                    __int16 v27 = v44;
                    __int16 v28 = v43;
                    unint64_t v5 = v42;
                    int v20 = (v87 >> 20) & 0x3FF;
                    int v16 = v89;
                    this = v86;
                    uint64_t v40 = *(unsigned int *)(v86 + 224);
                    uint64_t v22 = *(void *)(v86 + 216);
                  }
                  uint64_t v46 = v22 + 32 * v40;
                  *(_DWORD *)uint64_t v46 = v24;
                  *(_DWORD *)(v46 + 4) = v90;
                  *(_DWORD *)(v46 + 8) = v26;
                  *(_WORD *)(v46 + 12) = v27;
                  *(_WORD *)(v46 + 14) = v28;
                  *(_DWORD *)(v46 + 16) = v31;
                  *(_DWORD *)(v46 + 20) = v29;
                  *(_DWORD *)(v46 + 24) = 0;
                  *(_DWORD *)(v46 + 28) = v30;
                  ++*(_DWORD *)(this + 224);
                }
                else
                {
                  if (v16 == 16777214) {
                    int v32 = *(_DWORD *)(v25 + 16) + v20;
                  }
                  else {
                    int v32 = 0;
                  }
                  if (v16 == 16777214) {
                    int v33 = 0;
                  }
                  else {
                    int v33 = *(_DWORD *)(v25 + 16) + v20;
                  }
                  unsigned int v34 = *(_DWORD *)(this + 184);
                  if (v34 == *(_DWORD *)(this + 188))
                  {
                    __int16 v35 = *(_WORD *)(v25 + 14);
                    __int16 v81 = *(_WORD *)(v25 + 12);
                    int v36 = *(_DWORD *)(v25 + 16) + v20;
                    DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts(v80, 1, 1);
                    int v31 = v36;
                    __int16 v27 = v81;
                    __int16 v28 = v35;
                    int v20 = (v87 >> 20) & 0x3FF;
                    int v16 = v89;
                    this = v86;
                    unsigned int v34 = *(_DWORD *)(v86 + 184);
                  }
                  int v37 = v84 + 2 * v29;
                  unsigned int v38 = (_DWORD *)(*(void *)(this + 176) + 20 * v34);
                  *(_DWORD *)(this + 184) = v34 + 1;
                  _DWORD *v38 = v24 - v32;
                  v38[1] = v33;
                  v38[2] = v37;
                  v38[3] = v26;
                  v38[4] = v30;
                  unsigned int v39 = *(_DWORD *)(this + 168);
                  if (v19)
                  {
                    unint64_t v5 = (void *)v82;
                    a2 = v88;
                  }
                  else
                  {
                    unint64_t v5 = (void *)v82;
                    if (v39 == *(_DWORD *)(this + 172))
                    {
                      __int16 v47 = v28;
                      __int16 v48 = v27;
                      int v49 = v31;
                      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)v85, 1, 1);
                      int v31 = v49;
                      __int16 v27 = v48;
                      __int16 v28 = v47;
                      int v20 = (v87 >> 20) & 0x3FF;
                      int v16 = v89;
                      this = v86;
                      unsigned int v39 = *(_DWORD *)(v86 + 168);
                    }
                    uint64_t v50 = (int *)(*(void *)(this + 160) + 16 * v39);
                    *uint64_t v50 = v16;
                    v50[1] = a3;
                    v50[2] = v34;
                    int v50[3] = 0;
                    int v51 = *(_DWORD *)(this + 168);
                    *(_DWORD *)(this + 168) = v51 + 1;
                    uint64_t v52 = *(unsigned int *)(this + 224);
                    if (v52 == *(_DWORD *)(this + 228))
                    {
                      __int16 v53 = v28;
                      __int16 v54 = v27;
                      int v55 = v31;
                      DgnArray<PrefilterResultFrame>::reallocElts(v82, 1, 1);
                      int v31 = v55;
                      __int16 v27 = v54;
                      __int16 v28 = v53;
                      int v20 = (v87 >> 20) & 0x3FF;
                      int v16 = v89;
                      this = v86;
                      uint64_t v52 = *(unsigned int *)(v86 + 224);
                    }
                    uint64_t v56 = *(void *)(this + 216) + 32 * v52;
                    *(_DWORD *)uint64_t v56 = v24;
                    *(_DWORD *)(v56 + 4) = v90;
                    *(_DWORD *)(v56 + 8) = v51;
                    *(_WORD *)(v56 + 12) = v27;
                    *(_WORD *)(v56 + 14) = v28;
                    *(_DWORD *)(v56 + 16) = v31;
                    *(_DWORD *)(v56 + 20) = v37;
                    *(void *)(v56 + 24) = 0;
                    ++*(_DWORD *)(this + 224);
                    unsigned int v39 = *(_DWORD *)(this + 168);
                    a2 = v88;
                  }
                  uint64_t v57 = *v85 + 16 * (v39 - 1);
                  ++*(_DWORD *)(v57 + 12);
                }
                v19 += 32;
                --v21;
              }
              while (v21);
            }
          }
          unsigned int v12 = v83 + 2;
        }
        while ((v87 & 0x80000000) == 0);
        LODWORD(v6) = *(_DWORD *)(this + 224);
        LODWORD(v7) = v77;
      }
    }
    while (v7 < v6);
    uint64_t v58 = *(unsigned int *)(this + 152);
    if (v6 > v58)
    {
      mrec_qsort_r<FstSearchLateLatticeHashBackoffActiveToken>((char *)(*(void *)(this + 216) + 32 * v58), (v6 - v58), 32);
      this = v86;
      uint64_t v58 = *(unsigned int *)(v86 + 152);
      LODWORD(v6) = *(_DWORD *)(v86 + 224);
    }
    if (v58 < v6)
    {
      unint64_t v59 = v58;
      uint64_t v60 = v58;
      do
      {
        uint64_t v61 = *v5;
        uint64_t v62 = *v5 + 32 * v59;
        uint64_t v63 = v58;
        if (*(_DWORD *)(v62 + 4) != *(_DWORD *)(*v5 + 32 * (v59 - 1) + 4)) {
          goto LABEL_65;
        }
        if ((v58 - v60) < *(_DWORD *)(this + 20))
        {
          int v64 = v60;
          if (v58 > v60)
          {
            uint64_t v65 = (int *)(v61 + 32 * v60 + 20);
            int v64 = v60;
            while (1)
            {
              int v66 = *v65;
              v65 += 8;
              if (v66 == *(_DWORD *)(v61 + 32 * v59 + 20)) {
                break;
              }
              if (v58 == ++v64)
              {
                uint64_t v63 = v60;
                goto LABEL_65;
              }
            }
          }
          uint64_t v63 = v60;
          if (v64 == v58)
          {
LABEL_65:
            long long v67 = *(_OWORD *)(v62 + 16);
            int v68 = (_OWORD *)(v61 + 32 * v58);
            *int v68 = *(_OWORD *)v62;
            v68[1] = v67;
            uint64_t v58 = (v58 + 1);
            uint64_t v60 = v63;
          }
        }
        ++v59;
        unint64_t v6 = *(unsigned int *)(this + 224);
      }
      while (v59 < v6);
    }
    a4 = v74;
    int v4 = v73;
    if (v74) {
      goto LABEL_68;
    }
  }
  else
  {
    LODWORD(v58) = *(_DWORD *)(this + 152);
    if (a4) {
LABEL_68:
    }
      *((_DWORD *)a4 + 1) += *(_DWORD *)(this + 168) - v4;
  }
  unsigned int v69 = *(_DWORD *)(this + 228);
  if (v58 > v69)
  {
    DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)v5, v58 - v69, 0);
    this = v86;
    LODWORD(v6) = *(_DWORD *)(v86 + 224);
  }
  if (v6 < v58)
  {
    unint64_t v70 = v58 - (unint64_t)v6;
    uint64_t v71 = 32 * v6;
    do
    {
      uint64_t v72 = *v5 + v71;
      *(void *)uint64_t v72 = 0xFFFFFFFF00000000;
      *(_DWORD *)(v72 + 8) = -1;
      *(_WORD *)(v72 + 12) = -2;
      *(void *)(v72 + 16) = 0;
      *(void *)(v72 + 24) = 0;
      v71 += 32;
      --v70;
    }
    while (v70);
  }
  *(_DWORD *)(this + 224) = v58;
  return this;
}

uint64_t FstSearchLatticeDurationBackoff::collectTraces(FstSearchLatticeDurationBackoff *this)
{
  unint64_t v2 = *((unsigned int *)this + 42);
  int v50 = 0;
  int v49 = 0;
  if (v2)
  {
    unsigned int v3 = MemChunkAlloc(4 * v2, 0);
    unint64_t v4 = 0;
    int v49 = v3;
    int v50 = v2;
    do
      *((_DWORD *)v3 + v4++) = 0;
    while (v4 < v2);
  }
  else
  {
    unsigned int v3 = 0;
  }
  unint64_t v5 = *((unsigned int *)this + 56);
  if (v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = (unsigned int *)(*((void *)this + 27) + 8);
    do
    {
      unsigned int v9 = *v7;
      v7 += 8;
      uint64_t v8 = v9;
      if (v9 != -1)
      {
        *((_DWORD *)v3 + v8) = 1;
        unint64_t v5 = *((unsigned int *)this + 56);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  LODWORD(v10) = *((_DWORD *)this + 42);
  if (!v10) {
    goto LABEL_50;
  }
  char v11 = 0;
  unsigned int v12 = (uint64_t *)((char *)this + 160);
  uint64_t v13 = (uint64_t *)((char *)this + 176);
  do
  {
    uint64_t v10 = (v10 - 1);
    if (v11)
    {
      char v11 = 1;
    }
    else if (*(_DWORD *)(*v12 + 16 * v10) == 16777213)
    {
      char v11 = 1;
      *((_DWORD *)v3 + v10) = 1;
    }
    else
    {
      char v11 = 0;
    }
    if (*((_DWORD *)v3 + v10))
    {
      uint64_t v14 = *v12 + 16 * v10;
      int v15 = *(_DWORD *)(v14 + 12);
      if (v15 >= 1)
      {
        unsigned int v16 = *(_DWORD *)(v14 + 8);
        int v17 = v15 + v16;
        uint64_t v18 = *v13;
        do
        {
          uint64_t v19 = *(unsigned int *)(v18 + 20 * v16 + 12);
          if (v19 != -1) {
            *((_DWORD *)v3 + v19) = 1;
          }
          ++v16;
        }
        while ((int)v16 < v17);
      }
    }
  }
  while (v10);
  unsigned int v20 = *((_DWORD *)this + 42);
  if (v20)
  {
    unint64_t v21 = 0;
    unsigned int v22 = 0;
    unsigned int v23 = 0;
    do
    {
      if (*((_DWORD *)v3 + v21))
      {
        uint64_t v24 = *v12;
        if (v21 != v22)
        {
          *(_OWORD *)(v24 + 16 * v22) = *(_OWORD *)(v24 + 16 * v21);
          uint64_t v24 = *v12;
        }
        *(_DWORD *)(v24 + 16 * v22 + 8) = v23;
        uint64_t v25 = v24 + 16 * v21;
        uint64_t v26 = *(unsigned int *)(v25 + 8);
        uint64_t v27 = (*(_DWORD *)(v25 + 12) + v26);
        if (v26 < v27)
        {
          uint64_t v28 = *v13;
          uint64_t v29 = 20 * v26;
          do
          {
            if (v26 != v23)
            {
              int v30 = (long long *)(v28 + v29);
              uint64_t v31 = v28 + 20 * v23;
              long long v32 = *v30;
              *(_DWORD *)(v31 + 16) = *((_DWORD *)v30 + 4);
              *(_OWORD *)uint64_t v31 = v32;
              uint64_t v28 = *v13;
            }
            uint64_t v33 = v28 + 20 * v23;
            unsigned int v36 = *(_DWORD *)(v33 + 12);
            unsigned int v34 = (_DWORD *)(v33 + 12);
            uint64_t v35 = v36;
            if (v36 != -1) {
              _DWORD *v34 = *((_DWORD *)v3 + v35);
            }
            ++v23;
            ++v26;
            v29 += 20;
          }
          while (v27 != v26);
        }
        *((_DWORD *)v3 + v21) = v22++;
        unsigned int v20 = *((_DWORD *)this + 42);
      }
      ++v21;
    }
    while (v21 < v20);
    unsigned int v37 = *((_DWORD *)this + 43);
    if (v22 > v37)
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 160, v22 - v37, 0);
      unsigned int v20 = *((_DWORD *)this + 42);
    }
    if (v20 < v22)
    {
      unint64_t v38 = v22 - (unint64_t)v20;
      unsigned int v39 = (_OWORD *)(*v12 + 16 * v20);
      do
      {
        *v39++ = xmmword_2140992B0;
        --v38;
      }
      while (v38);
    }
    *((_DWORD *)this + 42) = v22;
    unsigned int v40 = *((_DWORD *)this + 47);
    if (v23 > v40) {
      DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts((uint64_t)this + 176, v23 - v40, 0);
    }
    uint64_t v41 = *((unsigned int *)this + 46);
    if (v41 < v23)
    {
      uint64_t v42 = v23 - v41;
      __int16 v43 = (_DWORD *)(*v13 + 20 * v41 + 16);
      do
      {
        *((_OWORD *)v43 - 1) = xmmword_2140992A0;
        *__int16 v43 = 0;
        v43 += 5;
        --v42;
      }
      while (v42);
    }
  }
  else
  {
LABEL_50:
    unsigned int v23 = 0;
    *((_DWORD *)this + 42) = 0;
  }
  *((_DWORD *)this + 46) = v23;
  uint64_t v44 = *((unsigned int *)this + 56);
  if (v44)
  {
    int v45 = v49;
    uint64_t v46 = (_DWORD *)(*((void *)this + 27) + 8);
    do
    {
      uint64_t v47 = *v46;
      if (v47 != -1) {
        _DWORD *v46 = *((_DWORD *)v45 + v47);
      }
      v46 += 8;
      --v44;
    }
    while (v44);
  }
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v49);
}

void sub_213E5413C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int64x2_t FstSearchLatticeDurationBackoff::vite(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  FstSearchLatticeDurationBackoff::advanceDeltas((FstSearchLatticeDurationBackoff *)this, a2, a3, a4, a5);
  int64x2_t v13 = 0u;
  int64x2_t v14 = 0u;
  SnapTime::recordTime((SnapTime *)&v13, 1, 0, 0, 0);
  if (a2 >= 1)
  {
    unsigned int v7 = *((_DWORD *)this + 18);
    if (v7)
    {
      if (!(a2 % v7)) {
        FstSearchLatticeDurationBackoff::collectTraces((FstSearchLatticeDurationBackoff *)this);
      }
    }
  }
  int64x2_t v11 = 0u;
  int64x2_t v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  uint64_t v8 = this[13];
  int64x2_t result = vaddq_s64(v8[14], vsubq_s64(v11, v13));
  int64x2_t v10 = vaddq_s64(v8[15], vsubq_s64(v12, v14));
  v8[14] = result;
  v8[15] = v10;
  return result;
}

_DWORD *FstSearchLatticeDurationBackoff::reset(_DWORD *this)
{
  this[42] = 0;
  this[46] = 0;
  this[56] = 0;
  return this;
}

double FstSearchLatticeDurationBackoff::doFrame(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  if (a3 >= 20000) {
    a3 = 20000;
  }
  *(void *)&double result = FstSearchLatticeDurationBackoff::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearchLatticeDurationBackoff::beginTopRecPassSyncRecog(FstSearchLatticeDurationBackoff *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 264, a3, *((PelScoreCache **)this + 4));
    uint64_t result = ArcGraph::findBackoffState(*((void *)this + 5));
    *((_DWORD *)this + 94) = result;
    *((unsigned char *)this + 3DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = 1;
  }
  return result;
}

uint64_t FstSearchLatticeDurationBackoff::endTopRecPassSyncRecog(FstSearchLatticeDurationBackoff *this)
{
  int64x2_t v10 = 0u;
  int64x2_t v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  int64x2_t v8 = 0u;
  int64x2_t v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  int64x2_t v2 = vsubq_s64(v8, v10);
  unsigned int v3 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v4 = v3[13];
  int64x2_t v5 = vaddq_s64(v3[12], v2);
  int64x2_t v8 = v2;
  int64x2_t v9 = vsubq_s64(v9, v11);
  int64x2_t v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 64) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

void FstSearchLatticeDurationBackoff::printSize(FstSearchLatticeDurationBackoff *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v116);
  if (v117) {
    unsigned int v16 = v116;
  }
  else {
    unsigned int v16 = &unk_214099300;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_214099300, a3, &unk_214099300, v16);
  DgnString::~DgnString((DgnString *)&v116);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_214099300);
  uint64_t v21 = (a3 + 1);
  uint64_t v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v116);
  if (v117) {
    uint64_t v27 = v116;
  }
  else {
    uint64_t v27 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v116);
  if (v117) {
    long long v32 = v116;
  }
  else {
    long long v32 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v116);
  if (v117) {
    unsigned int v37 = v116;
  }
  else {
    unsigned int v37 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v37, 4, 4, 0);
  uint64_t v111 = a2;
  uint64_t v112 = a6;
  uint64_t v113 = a3;
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v116);
  if (v117) {
    uint64_t v42 = v116;
  }
  else {
    uint64_t v42 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v42, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  uint64_t v43 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v43 = 16;
  }
  uint64_t v44 = *((unsigned int *)this + 42);
  uint64_t v45 = 16 * v44;
  if ((int)v44 <= 0) {
    uint64_t v45 = 0;
  }
  uint64_t v46 = v45 + v43;
  uint64_t v47 = v45 + v43 + 16 * (*((_DWORD *)this + 43) - v44);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v116);
  if (v117) {
    uint64_t v52 = v116;
  }
  else {
    uint64_t v52 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v52, v47, v46, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v47;
  *a5 += v46;
  uint64_t v53 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v53 = 16;
  }
  uint64_t v54 = *((unsigned int *)this + 46);
  uint64_t v55 = 20 * v54;
  if ((int)v54 <= 0) {
    uint64_t v55 = 0;
  }
  uint64_t v56 = v55 + v53;
  uint64_t v57 = v55 + v53 + 20 * (*((_DWORD *)this + 47) - v54);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v116);
  if (v117) {
    uint64_t v62 = v116;
  }
  else {
    uint64_t v62 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v62, v57, v56, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v57;
  *a5 += v56;
  uint64_t v63 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v63 = 16;
  }
  uint64_t v64 = *((unsigned int *)this + 56);
  uint64_t v65 = 30 * v64;
  if ((int)v64 <= 0) {
    uint64_t v65 = 0;
  }
  uint64_t v66 = v65 + v63;
  uint64_t v67 = v65 + v63 + 30 * (*((_DWORD *)this + 57) - v64);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v116);
  if (v117) {
    uint64_t v72 = v116;
  }
  else {
    uint64_t v72 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, v21, &unk_214099300, v22, v22, v72, v67, v66, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v67;
  *a5 += v66;
  uint64_t v73 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v73 = 16;
  }
  uint64_t v74 = *((unsigned int *)this + 60);
  uint64_t v75 = 30 * v74;
  if ((int)v74 <= 0) {
    uint64_t v75 = 0;
  }
  uint64_t v76 = v75 + v73;
  uint64_t v77 = v75 + v73 + 30 * (*((_DWORD *)this + 61) - v74);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v116);
  if (v117) {
    uint64_t v82 = v116;
  }
  else {
    uint64_t v82 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, v21, &unk_214099300, v22, v22, v82, v77, v76, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v77;
  *a5 += v76;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v116);
  if (v117) {
    unsigned int v87 = v116;
  }
  else {
    unsigned int v87 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v83, v84, v85, v86, v21, &unk_214099300, v22, v22, v87, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v116);
  if (v117) {
    uint64_t v92 = v116;
  }
  else {
    uint64_t v92 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, v21, &unk_214099300, v22, v22, v92, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v116);
  if (v117) {
    uint64_t v97 = v116;
  }
  else {
    uint64_t v97 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v93, v94, v95, v96, v21, &unk_214099300, v22, v22, v97, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  uint64_t v98 = sizeObject((uint64_t)this + 264, 0);
  uint64_t v99 = sizeObject((uint64_t)this + 264, 1);
  uint64_t v100 = sizeObject((uint64_t)this + 264, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v116);
  if (v117) {
    int v105 = v116;
  }
  else {
    int v105 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v101, v102, v103, v104, v21, &unk_214099300, v22, v22, v105, v98, v99, v100);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v98;
  *a5 += v99;
  *v112 += v100;
  unint64_t v114 = 0;
  unint64_t v115 = 0;
  SearchItf::printSize(this, v111, v21, &v115, &v114, &v114);
  *a4 += v115;
  *a5 += v114;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v116);
  if (v117) {
    uint64_t v110 = v116;
  }
  else {
    uint64_t v110 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v106, v107, v108, v109, v113, &unk_214099300, (35 - v113), (35 - v113), v110, *a4, *a5, *v112);
  DgnString::~DgnString((DgnString *)&v116);
}

void sub_213E54A68(_Unwind_Exception *a1)
{
  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t FstSearchLatticeDurationBackoff::getBestTrace(uint64_t a1, void *a2, void *a3, int a4)
{
  if (a4) {
    unint64_t v4 = 0;
  }
  else {
    unint64_t v4 = *(unsigned int *)(a1 + 152);
  }
  unint64_t v5 = *(unsigned int *)(a1 + 224);
  if (v4 >= v5) {
    goto LABEL_21;
  }
  uint64_t v6 = 32 * v4;
  int v7 = 1879048192;
  uint64_t v8 = 0xFFFFFFFFLL;
  do
  {
    uint64_t v9 = *(void *)(a1 + 216);
    if (!a4 || (uint64_t v10 = *(unsigned int *)(v9 + v6 + 8), v10 == -1))
    {
      if (*(_DWORD *)(*(void *)(a1 + 40) + 160) != *(_DWORD *)(v9 + v6 + 4)) {
        goto LABEL_19;
      }
      uint64_t v10 = *(unsigned int *)(v9 + v6 + 8);
    }
    if (a2) {
      *(unsigned char *)(*a2 + v10) = 1;
    }
    if (a3) {
      *(unsigned char *)(*a3 + v10) = 1;
    }
    int v11 = *(_DWORD *)(*(void *)(a1 + 176) + 20 * *(unsigned int *)(*(void *)(a1 + 160) + 16 * v10 + 8))
        + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(*(void *)(a1 + 160) + 16 * v10 + 4));
    if (v7 > v11) {
      uint64_t v8 = v10;
    }
    if (v7 >= v11) {
      int v7 = *(_DWORD *)(*(void *)(a1 + 176) + 20 * *(unsigned int *)(*(void *)(a1 + 160) + 16 * v10 + 8))
    }
         + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(*(void *)(a1 + 160) + 16 * v10 + 4));
    unint64_t v5 = *(unsigned int *)(a1 + 224);
LABEL_19:
    ++v4;
    v6 += 32;
  }
  while (v4 < v5);
  if (v8 == 0xFFFFFFFFLL)
  {
LABEL_21:
    uint64_t v12 = *(unsigned int *)(a1 + 168);
    uint64_t v8 = 0xFFFFFFFFLL;
    while (v12)
    {
      --v12;
      if ((a4 & 1) != 0 || *(_DWORD *)(*(void *)(a1 + 160) + 16 * v12) == 16777213)
      {
        if (a2) {
          *(unsigned char *)(*a2 + v12) = 1;
        }
        uint64_t v8 = v12;
        if (a3) {
          *(unsigned char *)(*a3 + v12) = 1;
        }
        return v8;
      }
    }
  }
  return v8;
}

BOOL FstSearchLatticeDurationBackoff::findBestPath(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8 = *(unsigned int *)(a1 + 168);
  if (v8) {
    BOOL v9 = *(_DWORD *)(a3 + 8) == 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    *(void *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v8;
  }
  if (v8) {
    BOOL v10 = *(_DWORD *)(a2 + 8) == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    *(void *)a2 = MemChunkAlloc(v8, 0);
    *(_DWORD *)(a2 + 8) = v8;
LABEL_14:
    uint64_t v11 = 0;
    do
    {
      *(unsigned char *)(*(void *)a2 + v11) = 0;
      *(unsigned char *)(*(void *)a3 + v11++) = 0;
    }
    while (v8 != v11);
    goto LABEL_16;
  }
  if (v8) {
    goto LABEL_14;
  }
LABEL_16:
  unsigned int BestTrace = FstSearchLatticeDurationBackoff::getBestTrace(a1, (void *)a2, (void *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1) {
    return 0;
  }
  uint64_t v13 = *(void *)(a1 + 160) + 16 * BestTrace;
  LODWORD(v13) = *(_DWORD *)(*(void *)(a1 + 176) + 20 * *(unsigned int *)(v13 + 8))
               + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v13 + 4));
  *a4 = v13;
  return v13 != 1879048192;
}

uint64_t FstSearchLatticeDurationBackoff::buildWordLattice(uint64_t a1, uint64_t *a2, void *a3, void *a4, char a5)
{
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  int v31 = 0;
  uint64_t v28 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v27, *(unsigned int *)(a1 + 168));
  unint64_t v8 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v8, 0, 128);
  v8[4] = (uint64_t)a2;
  FstSearchLatticeHashBackoff::createLatticeNodes(a1, &v30, (uint64_t)&v28, (uint64_t)a2, v27, a3, a4);
  uint64_t v23 = (uint64_t)v8;
  uint64_t v24 = *(unsigned int *)(a1 + 168);
  if (v24)
  {
    uint64_t v10 = 0;
    int v11 = v29;
    do
    {
      if (*(unsigned char *)(*a3 + v10))
      {
        uint64_t v12 = *(void *)(a1 + 160);
        if (*(_DWORD *)(v12 + 16 * v10) != 16777209)
        {
          uint64_t v13 = v12 + 16 * v10;
          if (*(int *)(v13 + 12) >= 1)
          {
            int v14 = *(_DWORD *)(v13 + 8);
            do
            {
              uint64_t v15 = *(void *)(a1 + 176) + 20 * v14;
              uint64_t v16 = *(unsigned int *)(v15 + 12);
              if (v16 == -1) {
                unsigned int v17 = 0;
              }
              else {
                unsigned int v17 = v11 - *((_DWORD *)v30 + v16);
              }
              uint64_t v18 = *(unsigned int *)(v28 + 4 * v17);
              if (*(unsigned char *)(*a4 + v10)) {
                FstSearchLatticeDurationBackoff::createLatticeLink((ArcGraph **)a1, v10, (int *)v15, 0xFFFFFFFFLL, v18, (const WordLatticeLC *)*(unsigned int *)(v28 + 4 * (v11 - *((_DWORD *)v30 + v10))), a2, v9, a5);
              }
              uint64_t v19 = v27[0];
              if (*(_DWORD *)(v27[0] + 16 * v10 + 8))
              {
                unint64_t v20 = 0;
                do
                {
                  uint64_t v21 = *(unsigned int *)(*(void *)(v19 + 16 * v10) + 4 * v20);
                  FstSearchLatticeDurationBackoff::createLatticeLink((ArcGraph **)a1, v10, (int *)v15, v21, v18, (const WordLatticeLC *)*(unsigned int *)(v28 + 4 * (v11 - *((_DWORD *)v30 + v21))), a2, v9, a5);
                  ++v20;
                  uint64_t v19 = v27[0];
                }
                while (v20 < *(unsigned int *)(v27[0] + 16 * v10 + 8));
              }
              ++v14;
            }
            while (v14 < *(_DWORD *)(*(void *)(a1 + 160) + 16 * v10 + 12)
                        + *(_DWORD *)(*(void *)(a1 + 160) + 16 * v10 + 8));
          }
        }
      }
      ++v10;
    }
    while (v10 != v24);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>(v23);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v27);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v28);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v30);
}

void sub_213E54F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearchLatticeDurationBackoff::createLatticeLink(ArcGraph **this, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, const WordLatticeLC *a6, uint64_t *a7, uint64_t a8, char a9)
{
  unsigned int v11 = a5;
  unsigned int v12 = a4;
  if ((a4 & 0x80000000) != 0) {
    SilenceToken = 0;
  }
  else {
    SilenceToken = (_DWORD *)FstSearchLatticeHashBackoff::getSilenceToken((FstSearchLatticeHashBackoff *)this, a4, a2);
  }
  ArcGraph::lexToCWIDAC(this[5], *((_DWORD *)this[20] + 4 * a2), (uint64_t)a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8, (uint64_t)v40);
  int v17 = a3[1];
  if (SilenceToken)
  {
    v17 += SilenceToken[1];
    int v18 = *SilenceToken + *a3;
  }
  else
  {
    int v18 = *a3;
  }
  if (v40[0] >> 25 == 126)
  {
    int v19 = 0;
    int v20 = v17;
    if ((v12 & 0x80000000) != 0)
    {
LABEL_9:
      int v21 = 0;
      goto LABEL_12;
    }
  }
  else
  {
    int v19 = *((_DWORD *)this + 34);
    int v20 = v17 - v19;
    if ((v12 & 0x80000000) != 0) {
      goto LABEL_9;
    }
  }
  int v21 = *((_DWORD *)this + 35);
  v20 -= v21;
LABEL_12:
  int v22 = a3[4];
  if (SilenceToken) {
    v22 += SilenceToken[4];
  }
  int v34 = v20;
  uint64_t v35 = 0;
  int v36 = v19;
  int v37 = v18 - v17 - v22;
  int v38 = v22;
  int v39 = v21;
  uint64_t v23 = a3[3];
  uint64_t v24 = this[20];
  if (v23 == -1)
  {
    int v26 = 0;
    if (a9) {
      goto LABEL_20;
    }
  }
  else
  {
    int v25 = *((_DWORD *)v24 + 4 * v23 + 1);
    if (a9)
    {
      if (v25 >= 1) {
        --v25;
      }
      int v26 = (v25 >> 1) + 1;
LABEL_20:
      int v27 = *((_DWORD *)v24 + 4 * a2 + 1);
      if (v27 >= 1) {
        --v27;
      }
      int v28 = v27 >> 1;
      int v29 = v28 - v26 + 1;
      if ((v12 & 0x80000000) == 0)
      {
        int v30 = *((_DWORD *)v24 + 4 * v12 + 1);
        if (v30 >= 1) {
          --v30;
        }
        int v31 = v30 >> 1;
        goto LABEL_29;
      }
LABEL_30:
      int v32 = 0;
      goto LABEL_31;
    }
    int v26 = v25 + 1;
  }
  int v28 = *((_DWORD *)v24 + 4 * a2 + 1);
  int v29 = v28 - v26 + 1;
  if ((v12 & 0x80000000) != 0) {
    goto LABEL_30;
  }
  int v31 = *((_DWORD *)v24 + 4 * v12 + 1);
LABEL_29:
  int v32 = v31 - v28;
LABEL_31:
  WordLatticeLC::WordLatticeLC((uint64_t)v33, (uint64_t)v40, v26, v29, v32, (uint64_t)&v34);
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v11, a6, (WordLatticeLC *)v33);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v33);
}

void sub_213E5513C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLatticeDurationBackoff::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(void *)(this + 112) = a2;
  if (*(unsigned char *)(this + 380)) {
    return MiniFst::beginTopFstSyncRecog(this + 264);
  }
  return this;
}

uint64_t FstSearchLatticeDurationBackoff::endTopRecSyncRecog(FstSearchLatticeDurationBackoff *this)
{
  uint64_t v1 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  return v1;
}

uint64_t FstSearchLatticeDurationBackoff::getBestExitScore(FstSearchLatticeDurationBackoff *this)
{
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  *((_DWORD *)this + 63) = -1;
  unint64_t v1 = *((unsigned int *)this + 38);
  unint64_t v2 = *((unsigned int *)this + 56);
  if (v1 >= v2) {
    goto LABEL_19;
  }
  uint64_t v4 = 0;
  unsigned int v5 = 0;
  uint64_t v6 = 32 * v1;
  do
  {
    uint64_t v7 = *((void *)this + 27) + v6;
    if (*(_DWORD *)(*((void *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      uint64_t v8 = *(unsigned int *)(v7 + 8);
      if (v8 != -1 && *(_DWORD *)(*((void *)this + 20) + 16 * v8 + 4) == *((_DWORD *)this + 62))
      {
        if (v5 == HIDWORD(v22))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v21, 1, 1);
          unsigned int v5 = v22;
          uint64_t v4 = v21;
        }
        *(_DWORD *)(v4 + 4 * v5) = v8;
        unsigned int v5 = v22 + 1;
        LODWORD(v22) = v22 + 1;
        unint64_t v2 = *((unsigned int *)this + 56);
      }
    }
    ++v1;
    v6 += 32;
  }
  while (v1 < v2);
  if (v5)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *((void *)this + 20);
    int v11 = 1879048192;
    do
    {
      uint64_t v12 = v10 + 16 * *(unsigned int *)(v4 + 4 * v9);
      int v13 = *(_DWORD *)(v12 + 12);
      if (v13 >= 1)
      {
        unsigned int v14 = *(_DWORD *)(v12 + 8);
        int v15 = v13 + v14;
        uint64_t v16 = *((void *)this + 22);
        do
        {
          unsigned int v17 = v14;
          int v18 = *(_DWORD *)(v16 + 20 * v14);
          if (v11 > v18)
          {
            *((_DWORD *)this + 63) = *(_DWORD *)(v16 + 20 * v17 + 12);
            int v11 = v18;
          }
          unsigned int v14 = v17 + 1;
        }
        while ((int)(v17 + 1) < v15);
      }
      ++v9;
    }
    while (v9 != v5);
  }
  else
  {
LABEL_19:
    int v11 = 1879048192;
  }
  if (v11 >= 20000) {
    uint64_t v19 = 20000;
  }
  else {
    uint64_t v19 = v11;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v21);
  return v19;
}

void sub_213E552EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t FstSearchLatticeDurationBackoff::getBestScoreMaybeUpdateFstNode(FstSearchLatticeDurationBackoff *this, Node *a2)
{
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v2 = *((unsigned int *)this + 56);
  if (v2)
  {
    unsigned int v3 = (int *)*((void *)this + 27);
    __int16 v4 = -1;
    int v5 = 1879048192;
    uint64_t v6 = v3;
    do
    {
      int v8 = *v6;
      v6 += 8;
      int v7 = v8;
      if (v5 > v8)
      {
        __int16 v4 = *((_WORD *)v3 + 6);
        int v5 = v7;
      }
      unsigned int v3 = v6;
      --v2;
    }
    while (v2);
    uint64_t v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000) {
        uint64_t v9 = 20000;
      }
      else {
        uint64_t v9 = v5;
      }
    }
  }
  else
  {
    uint64_t v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

uint64_t FstSearchLatticeDurationBackoff::seedTheory(FstSearchLatticeDurationBackoff *this, int a2, int a3, int a4, SearchStats *a5)
{
  if (a4 == -2)
  {
    int v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    unsigned int v11 = *((_DWORD *)this + 46);
    if (v11 == *((_DWORD *)this + 47))
    {
      DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts((uint64_t)this + 176, 1, 1);
      unsigned int v11 = *((_DWORD *)this + 46);
    }
    uint64_t v12 = *((void *)this + 22) + 20 * v11;
    *(_OWORD *)(v12 + 4) = xmmword_2140992E0;
    *((_DWORD *)this + 46) = v11 + 1;
    *(_DWORD *)uint64_t v12 = a2;
    unsigned int v13 = *((_DWORD *)this + 42);
    if (v13 == *((_DWORD *)this + 43))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 160, 1, 1);
      unsigned int v13 = *((_DWORD *)this + 42);
    }
    unsigned int v14 = (_DWORD *)(*((void *)this + 20) + 16 * v13);
    *unsigned int v14 = a4;
    v14[1] = a3;
    v14[2] = v11;
    v14[3] = 1;
    int v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  int v15 = *(_DWORD *)(*((void *)this + 5) + 144);
  unsigned int v16 = *((_DWORD *)this + 56);
  if (v16 == *((_DWORD *)this + 57))
  {
    DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)this + 216, 1, 1);
    unsigned int v16 = *((_DWORD *)this + 56);
  }
  uint64_t v17 = *((void *)this + 27) + 32 * v16;
  *(_DWORD *)uint64_t v17 = a2;
  *(_DWORD *)(v17 + 4) = v15;
  *(_DWORD *)(v17 + 8) = v9;
  *(_WORD *)(v17 + 12) = -2;
  *(void *)(v17 + 16) = 0;
  *(void *)(v17 + 24) = 0;
  LODWORD(v17) = *((_DWORD *)this + 56) + 1;
  *((_DWORD *)this + 56) = v17;
  *((_DWORD *)this + 38) = v17;

  return FstSearchLatticeDurationBackoff::propagateNulls((uint64_t)this, 20000, a3, a5);
}

uint64_t FstSearchLatticeDurationBackoff::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(unsigned int *)(result + 252);
  if (v8 != -1)
  {
    int v9 = (void *)result;
    uint64_t v10 = (unsigned int *)(*(void *)(result + 160) + 16 * v8);
    for (i = *(unsigned int *)(*(void *)(result + 176) + 20 * v10[2] + 12); i != -1; uint64_t v8 = v16)
    {
      uint64_t v16 = i;
      uint64_t result = v9[5];
      if (*v10 == 16777209)
      {
        int v17 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        uint64_t result = ArcGraph::lexToCWID((ArcGraph *)result, *v10, a3, (uint64_t)a4, a5, a6, a7, a8);
        int v17 = result;
      }
      uint64_t v18 = *(unsigned int *)(a2 + 8);
      if (v18 == *(_DWORD *)(a2 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        uint64_t v18 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(void *)a2 + 4 * v18) = v17;
      ++*(_DWORD *)(a2 + 8);
      uint64_t v19 = *(unsigned int *)(a6 + 8);
      if (v19 == *(_DWORD *)(a6 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        uint64_t v19 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(void *)a6 + 4 * v19) = v8;
      ++*(_DWORD *)(a6 + 8);
      uint64_t v20 = v9[20];
      int v21 = *(_DWORD *)(v20 + 16 * v8 + 4);
      uint64_t v22 = *(unsigned int *)(a3 + 8);
      if (v22 == *(_DWORD *)(a3 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        uint64_t v22 = *(unsigned int *)(a3 + 8);
        uint64_t v20 = v9[20];
      }
      *(_DWORD *)(*(void *)a3 + 4 * v22) = v21;
      ++*(_DWORD *)(a3 + 8);
      int v23 = *(_DWORD *)(v9[22] + 20 * *(unsigned int *)(v20 + 16 * v8 + 8));
      uint64_t v24 = *(unsigned int *)(a5 + 8);
      if (v24 == *(_DWORD *)(a5 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        uint64_t v24 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(void *)a5 + 4 * v24) = v23;
      ++*(_DWORD *)(a5 + 8);
      uint64_t v10 = (unsigned int *)(v9[20] + 16 * v16);
      uint64_t i = *(unsigned int *)(v9[22] + 20 * v10[2] + 12);
    }
    *a4 = *v10;
  }
  return result;
}

void FstSearchLatticeDurationBackoff::checkSearchParametersValidityForArcGraph(FstSearchLatticeDurationBackoff *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *((void *)this + 5);
  if (*(unsigned char *)(v8 + 178))
  {
    int v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(unsigned char *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    }
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    }
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(void *)(**(void **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((void *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if (a2)
      {
        if (!*(unsigned char *)(v8 + 203)) {
          return;
        }
      }
      else if (*(unsigned char *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(unsigned char *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

uint64_t FstSearchLatticeDurationBackoff::makePartialResult(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    uint64_t v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(void *)a2 + v9))(*(void *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  unsigned int BestTrace = FstSearchLatticeDurationBackoff::getBestTrace((uint64_t)a1, 0, 0, 1);
  if (BestTrace == -1) {
    return 1879048192;
  }
  unsigned int v15 = BestTrace;
  FstSearchLatticeHashBackoff::getHistory((uint64_t)a1, BestTrace, a3, a4, v11, v12, v13, v14);
  memset(v25, 0, sizeof(v25));
  int v26 = 0;
  if (*(_DWORD *)(a3 + 8))
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    int v18 = 0;
    do
    {
      uint64_t v19 = *(void *)a3 + v16;
      int v20 = *(_DWORD *)(v19 + 28);
      WordLatticeLC::WordLatticeLC((uint64_t)v24, v19, v18, *(_DWORD *)(v19 + 24) - v18, v20 - *(_DWORD *)(v19 + 24), (uint64_t)v25);
      uint64_t v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(void *)a2 + 112 * v21), (const WordLatticeLC *)v24);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v24);
      ++v17;
      v16 += 32;
      int v18 = v20;
    }
    while (v17 < *(unsigned int *)(a3 + 8));
  }
  uint64_t v22 = a1[20] + 16 * v15;
  return (*(_DWORD *)(a1[22] + 20 * *(unsigned int *)(v22 + 8))
                      + *(_DWORD *)(a1[11] + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_213E55A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void FstSearchLatticeDuration::FstSearchLatticeDuration(FstSearchLatticeDuration *this, const int *a2, const int *a3)
{
  SearchItf::SearchItf(this);
  *(void *)uint64_t v5 = &unk_26C4E3960;
  *(_DWORD *)(v5 + 136) = *a2;
  *(_DWORD *)(v5 + 140) = *a3;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 232) = 0u;
  *(_OWORD *)(v5 + 216) = 0u;
  *(_DWORD *)(v5 + 248) = -1;
  *(_DWORD *)(v5 + 256) = 1879048192;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 2DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_OWORD *)(v5 + 2DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 64) = 0u;
  *(unsigned char *)(v5 + 3DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = 0;
}

uint64_t FstSearchLatticeDuration::maybeInitDurModel(FstSearchLatticeDuration *this, const PicMgr *a2, int a3)
{
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  PicMgr::getPelDurIdMap((uint64_t)a2, (uint64_t)&v15);
  if (a3 == 1) {
    uint64_t v6 = 56;
  }
  else {
    uint64_t v6 = 72;
  }
  uint64_t v7 = v16;
  unsigned int v8 = *((_DWORD *)this + 51);
  if (v16 <= v8)
  {
    *((_DWORD *)this + 50) = v16;
    if (!v7) {
      goto LABEL_13;
    }
  }
  else
  {
    DgnPrimArray<short>::reallocElts((uint64_t)this + 192, v16 - v8, 0);
    *((_DWORD *)this + 50) = v7;
  }
  uint64_t v9 = 0;
  uint64_t v10 = v15;
  uint64_t v11 = *((void *)this + 24);
  do
  {
    if (!(_WORD)v9 || (uint64_t v12 = *(unsigned __int16 *)(v10 + 2 * v9), v12 == 0xFFFF)) {
      __int16 v13 = 0;
    }
    else {
      __int16 v13 = *(_WORD *)(*(void *)((char *)a2 + v6) + 2 * v12);
    }
    *(_WORD *)(v11 + 2 * v9++) = v13;
  }
  while (v7 != v9);
LABEL_13:
  *((unsigned char *)this + 208) = *((unsigned char *)a2 + 8);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 3);
  return DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v15);
}

void sub_213E55BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int64x2_t FstSearchLatticeDuration::advanceDeltas(FstSearchLatticeDuration *this, int a2, int a3, SearchStats *a4, int a5)
{
  v144[0] = a2;
  int64x2_t v142 = 0u;
  int64x2_t v143 = 0u;
  SnapTime::recordTime((SnapTime *)&v142, 1, 0, 0, 0);
  unsigned int v116 = (int *)((char *)this + 256);
  *((_DWORD *)this + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 64) = a3;
  int v7 = *((_DWORD *)this + 2);
  unsigned int v8 = *((_DWORD *)this + 56);
  if (v8)
  {
    unint64_t v117 = 0;
    unsigned int v9 = 0;
    unsigned int v107 = *((_DWORD *)this + 53);
    int v108 = *((unsigned __int8 *)this + 208);
    unint64_t v114 = (char *)this + 232;
    uint64_t v106 = (FstSearchLatticeDuration *)((char *)this + 264);
    int v124 = this;
    int v123 = *((_DWORD *)this + 2);
    do
    {
      uint64_t v10 = v9;
      uint64_t v126 = 32 * v9;
      uint64_t v11 = *((void *)this + 27) + v126;
      uint64_t v12 = *(unsigned int *)(v11 + 4);
      if (v8 <= v9 + 1) {
        ++v9;
      }
      else {
        unsigned int v9 = v8;
      }
      unsigned int v13 = v9 - 1;
      uint64_t v14 = (int *)(v11 + 36);
      uint64_t v15 = 1;
      while (v10 + v15 < (unint64_t)v8)
      {
        int v16 = *v14;
        v14 += 8;
        ++v15;
        if (v16 != v12)
        {
          unsigned int v13 = v10 + v15 - 2;
          unsigned int v9 = v10 + v15 - 1;
          break;
        }
      }
      uint64_t v17 = *((void *)this + 5);
      if (*(_DWORD *)(v17 + 160) != v12)
      {
        uint64_t v110 = v12;
        BOOL v18 = *(_DWORD *)(v17 + 140) <= (int)v12 || v10 > v13;
        uint64_t v112 = v10;
        unsigned int v109 = v13;
        if (!v18)
        {
          uint64_t v19 = 0;
          int v20 = v13 - v10 + 1;
          do
          {
            uint64_t v21 = *((void *)this + 27) + v126 + v19;
            int v22 = *(_DWORD *)v21;
            int v23 = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(v21 + 12)) + v22;
            uint64_t v24 = *((void *)this + 27) + v126 + v19;
            __int16 v25 = *(_WORD *)(v24 + 12);
            int v26 = *(_DWORD *)(v24 + 24);
            int v27 = v108;
            if (v26 >= 1) {
              int v27 = v108 - v26;
            }
            int v28 = v27 & ((v26 - v108) >> 31);
            if (*(_WORD *)(v24 + 12)) {
              int v29 = v26 - v108;
            }
            else {
              int v29 = *(_DWORD *)(v24 + 24);
            }
            if (*(_WORD *)(v24 + 12)) {
              int v30 = v28 + *(_DWORD *)(v24 + 28);
            }
            else {
              int v30 = *(_DWORD *)(v24 + 28);
            }
            if (*(_WORD *)(v24 + 12)) {
              int v31 = v28;
            }
            else {
              int v31 = 0;
            }
            int v32 = v23 + v31;
            if (v23 + v31 - v7 <= *v116)
            {
              uint64_t v33 = *(void *)(v24 + 4);
              __int16 v34 = *(_WORD *)(v24 + 14);
              uint64_t v35 = *(void *)(v24 + 16);
              if (*v116 > v32) {
                *unsigned int v116 = v32;
              }
              this = v124;
              uint64_t v36 = *((unsigned int *)v124 + 60);
              if (v36 == *((_DWORD *)v124 + 61))
              {
                DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)v114, 1, 1);
                uint64_t v36 = *((unsigned int *)v124 + 60);
              }
              uint64_t v37 = *((void *)v124 + 29) + 32 * v36;
              *(_DWORD *)uint64_t v37 = v32;
              *(void *)(v37 + 4) = v33;
              *(_WORD *)(v37 + 12) = v25;
              *(_WORD *)(v37 + 14) = v34;
              *(void *)(v37 + 16) = v35;
              *(_DWORD *)(v37 + 24) = v29;
              *(_DWORD *)(v37 + 28) = v30;
              int v38 = *((_DWORD *)v124 + 60) + 1;
              *((_DWORD *)v124 + 60) = v38;
              if (!v19)
              {
                unsigned int v39 = v117;
                if (HIDWORD(v117) == 2 * *((_DWORD *)v124 + 4)) {
                  unsigned int v39 = v38;
                }
                unint64_t v117 = __PAIR64__(HIDWORD(v117), v39) + 0x100000000;
              }
              int v7 = v123;
            }
            else
            {
              this = v124;
            }
            v19 += 32;
            --v20;
          }
          while (v20);
        }
        unsigned int v40 = v112;
        unsigned int v41 = v110;
        unsigned int v111 = v9;
        do
        {
          uint64_t v42 = *((void *)this + 5);
          uint64_t v43 = *(void *)(v42 + 152);
          unsigned int v44 = *(_DWORD *)(v43 + 4 * v41);
          int v45 = *(_DWORD *)(v42 + 140);
          int v125 = *(_DWORD *)(v43 + 4 * (v41 + 1));
          unsigned int v113 = v41;
          if (v45 <= v125)
          {
            if (*((unsigned char *)this + 380)) {
              BOOL v73 = v45 <= (int)v110;
            }
            else {
              BOOL v73 = 0;
            }
            if (v73)
            {
              unsigned int v74 = (v44 & 0xFFFFF) <= 0xFFFF3 ? v44 & 0xFFFFF : v44 & 0xFFFFF | 0xF00000;
              if (v74 != 16777210)
              {
                DgnString::DgnString((DgnString *)&v139);
                ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v74, (DgnString *)&v139, v75, v76, v77, v78, v79);
                uint64_t v84 = &unk_214099300;
                if (v139.i32[2]) {
                  uint64_t v84 = (void *)v139.i64[0];
                }
                xprintf("Seed from state %d score %d trace %d, %s\n", v80, v81, v82, v83, v110, *(unsigned int *)(*((void *)this + 27) + 32 * v112), *(unsigned int *)(*((void *)this + 27) + 32 * v112 + 8), v84);
                MiniFst::seed((uint64_t)v106, *(_DWORD *)(*((void *)this + 27) + 32 * v112), *(_DWORD *)(*((void *)this + 27) + 32 * v112 + 20), *(_DWORD *)(*((void *)this + 27) + 32 * v112 + 8), v125);
                DgnString::~DgnString((DgnString *)&v139);
              }
            }
          }
          else
          {
            int ScoreNoBackoff = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), (unsigned __int16)*(_DWORD *)(v43 + 4 * v41));
            if (v40 <= v109)
            {
              uint64_t v47 = 0;
              uint64_t v48 = (v44 >> 20) & 0x3FF;
              int v49 = ScoreNoBackoff + v48;
              uint64_t v50 = (unsigned __int16)v44;
              int v51 = v109 - v112 + 1;
              if ((_WORD)v44) {
                uint64_t v52 = v107;
              }
              else {
                uint64_t v52 = 0;
              }
              unsigned int v122 = v44;
              uint64_t v115 = (unsigned __int16)v44;
              do
              {
                uint64_t v53 = *((void *)this + 27) + v126 + v47;
                int v54 = v49 + *(_DWORD *)v53;
                if (v50) {
                  int v56 = *(__int16 *)(*((void *)this + 24) + 2 * v50);
                }
                else {
                  int v56 = 0;
                }
                if (v50)
                {
                  int v55 = *(__int16 *)(*((void *)this + 24) + 2 * v50);
                  int v57 = v55 & (v55 >> 31);
                }
                else
                {
                  int v57 = 0;
                }
                int v58 = (*(_DWORD *)(v53 + 24) & ~(*(int *)(v53 + 24) >> 31)) - v57 + v52;
                int v59 = v54 + v58;
                int v60 = v54 + v58 - v7;
                int v61 = *((_DWORD *)this + 64);
                if (v60 <= v61)
                {
                  int v62 = *(_DWORD *)(v53 + 8);
                  __int16 v63 = *(_WORD *)(v53 + 14);
                  int v64 = *(_DWORD *)(v53 + 16);
                  int v65 = *(_DWORD *)(v53 + 20);
                  int v66 = *(_DWORD *)(v53 + 28);
                  if (v61 > v59) {
                    *unsigned int v116 = v59;
                  }
                  this = v124;
                  uint64_t v67 = *((unsigned int *)v124 + 60);
                  if (v67 == *((_DWORD *)v124 + 61))
                  {
                    int v119 = v62;
                    __int16 v120 = v63;
                    uint64_t v68 = v48;
                    uint64_t v69 = v52;
                    int v121 = v65;
                    int v118 = v64;
                    DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)v114, 1, 1);
                    int v64 = v118;
                    int v62 = v119;
                    __int16 v63 = v120;
                    int v65 = v121;
                    uint64_t v52 = v69;
                    uint64_t v50 = v115;
                    uint64_t v48 = v68;
                    uint64_t v67 = *((unsigned int *)v124 + 60);
                  }
                  uint64_t v70 = *((void *)v124 + 29) + 32 * v67;
                  *(_DWORD *)uint64_t v70 = v59;
                  *(_DWORD *)(v70 + 4) = v125;
                  *(_DWORD *)(v70 + 8) = v62;
                  unsigned int v44 = v122;
                  *(_WORD *)(v70 + 12) = v122;
                  *(_WORD *)(v70 + 14) = v63;
                  *(_DWORD *)(v70 + 16) = v64 + v48;
                  *(_DWORD *)(v70 + 20) = v65;
                  *(_DWORD *)(v70 + 24) = v56;
                  *(_DWORD *)(v70 + 28) = v58 + v66;
                  int v71 = *((_DWORD *)v124 + 60) + 1;
                  *((_DWORD *)v124 + 60) = v71;
                  if (!v47)
                  {
                    unsigned int v72 = v117;
                    if (HIDWORD(v117) == 2 * *((_DWORD *)v124 + 4)) {
                      unsigned int v72 = v71;
                    }
                    unint64_t v117 = __PAIR64__(HIDWORD(v117), v72) + 0x100000000;
                  }
                  int v7 = v123;
                }
                v47 += 32;
                --v51;
              }
              while (v51);
            }
          }
          unsigned int v41 = v113 + 2;
          unsigned int v9 = v111;
          unsigned int v40 = v112;
        }
        while ((v44 & 0x80000000) == 0);
        unsigned int v8 = *((_DWORD *)this + 56);
      }
    }
    while (v9 < v8);
    a3 = *v116;
  }
  else
  {
    unint64_t v117 = 0;
  }
  int v141 = a3 + v7;
  if (*((unsigned char *)this + 380)) {
    MiniFst::updateFrame((char *)this + 264, v116, v7, a2);
  }
  int64x2_t v139 = 0u;
  int64x2_t v140 = 0u;
  SnapTime::recordTime((SnapTime *)&v139, 1, 0, 0, 0);
  int64x2_t v139 = vsubq_s64(v139, v142);
  int64x2_t v140 = vsubq_s64(v140, v143);
  uint64_t v85 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v86 = vaddq_s64(v85[1], v140);
  int64x2_t *v85 = vaddq_s64(*v85, v139);
  v85[1] = v86;
  int64x2_t v137 = 0u;
  int64x2_t v138 = 0u;
  SnapTime::recordTime((SnapTime *)&v137, 1, 0, 0, 0);
  if (HIDWORD(v117) > 2 * *((_DWORD *)this + 4)) {
    FstSearchLatticeDurationBackoff::applyCutoffOnEmitting((uint64_t)this, v117, &v141);
  }
  int64x2_t v135 = 0u;
  int64x2_t v136 = 0u;
  SnapTime::recordTime((SnapTime *)&v135, 1, 0, 0, 0);
  int64x2_t v87 = vsubq_s64(v135, v137);
  uint64_t v88 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v89 = v88[3];
  int64x2_t v90 = vaddq_s64(v88[2], v87);
  int64x2_t v135 = v87;
  int64x2_t v136 = vsubq_s64(v136, v138);
  int64x2_t v91 = vaddq_s64(v89, v136);
  v88[2] = v90;
  v88[3] = v91;
  int64x2_t v133 = 0u;
  int64x2_t v134 = 0u;
  SnapTime::recordTime((SnapTime *)&v133, 1, 0, 0, 0);
  FstSearchLatticeDurationBackoff::makeViterbiDecisionOnEmitting((uint64_t)this);
  unint64_t v92 = *((unsigned int *)this + 6);
  if (v92)
  {
    unint64_t v93 = *((unsigned int *)this + 56);
    if (v92 < v93) {
      mrec_nth_element<FstSearchLeafLatticeBackoffcmpTok>(*((void *)this + 27), v92, v93);
    }
  }
  int64x2_t v131 = 0u;
  int64x2_t v132 = 0u;
  SnapTime::recordTime((SnapTime *)&v131, 1, 0, 0, 0);
  int64x2_t v94 = vsubq_s64(v131, v133);
  uint64_t v95 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v96 = v95[5];
  int64x2_t v97 = vaddq_s64(v95[4], v94);
  int64x2_t v131 = v94;
  int64x2_t v132 = vsubq_s64(v132, v134);
  int64x2_t v98 = vaddq_s64(v96, v132);
  v95[4] = v97;
  v95[5] = v98;
  int64x2_t v129 = 0u;
  int64x2_t v130 = 0u;
  SnapTime::recordTime((SnapTime *)&v129, 1, 0, 0, 0);
  *((_DWORD *)this + 60) = 0;
  uint64_t v99 = *((unsigned int *)this + 56);
  *((_DWORD *)this + 38) = v99;
  if (a4)
  {
    *((void *)a4 + 2) += v99;
    if (*((_DWORD *)a4 + 2) > v99) {
      LODWORD(v99) = *((_DWORD *)a4 + 2);
    }
    *((_DWORD *)a4 + 2) = v99;
  }
  if (*((unsigned char *)this + 380)) {
    FstSearchLatticeDuration::seedFromMiniFst((uint64_t)this, v144);
  }
  if (a5) {
    FstSearchLatticeDurationBackoff::propagateNulls((uint64_t)this, v141, a2, a4);
  }
  *((_DWORD *)this + 62) = a2;
  int64x2_t v127 = 0u;
  int64x2_t v128 = 0u;
  SnapTime::recordTime((SnapTime *)&v127, 1, 0, 0, 0);
  uint64_t v100 = (int64x2_t *)*((void *)this + 13);
  int64x2_t result = vaddq_s64(v100[6], vsubq_s64(v127, v129));
  int64x2_t v102 = vaddq_s64(v100[7], vsubq_s64(v128, v130));
  v100[6] = result;
  v100[7] = v102;
  return result;
}

void sub_213E56348(_Unwind_Exception *exception_object)
{
}

uint64_t FstSearchLatticeDuration::seedFromMiniFst(uint64_t this, int *a2)
{
  if (*(unsigned char *)(this + 380))
  {
    uint64_t v2 = this;
    unsigned int v3 = *(_DWORD *)(this + 288);
    if (v3 >= *(_DWORD *)(this + 20)) {
      unsigned int v3 = *(_DWORD *)(this + 20);
    }
    if (v3)
    {
      unint64_t v4 = 0;
      uint64_t v46 = this + 176;
      uint64_t v5 = (void *)(this + 160);
      uint64_t v39 = this + 216;
      do
      {
        uint64_t v6 = (int *)(*(void *)(v2 + 280) + 36 * v4);
        int v7 = v6[4];
        int v43 = *v6;
        int v44 = v6[5];
        int v8 = v6[6];
        int v45 = v6[7];
        unsigned int v9 = v6[2];
        uint64_t v47 = 0;
        uint64_t v48 = 0;
        int v41 = v8;
        int v42 = v7;
        if ((v9 & 0x80000000) != 0)
        {
          LODWORD(v13) = -2 - v9;
        }
        else
        {
          uint64_t v10 = 0;
          unsigned int v11 = 0;
          do
          {
            if (v11 == HIDWORD(v48))
            {
              DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v47, 1, 1);
              unsigned int v11 = v48;
              uint64_t v10 = v47;
            }
            *(_DWORD *)(v10 + 4 * v11) = v9;
            uint64_t v12 = v48;
            unsigned int v11 = v48 + 1;
            LODWORD(v48) = v48 + 1;
            unsigned int v9 = *(_DWORD *)(*(void *)(v2 + 264) + 36 * v9 + 8);
          }
          while ((v9 & 0x80000000) == 0);
          LODWORD(v13) = -2 - v9;
          if ((v12 & 0x80000000) == 0)
          {
            int v14 = v12 + 1;
            uint64_t v15 = 4 * v12;
            do
            {
              unsigned int v16 = *(_DWORD *)(v47 + v15);
              uint64_t v17 = *(void *)(v2 + 264);
              BOOL v18 = (int *)(v17 + 36 * v16);
              int v19 = *v18;
              uint64_t v20 = *((void *)v18 + 2);
              unsigned int v21 = *(_DWORD *)(v2 + 184);
              if (v21 == *(_DWORD *)(v2 + 188))
              {
                DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts(v46, 1, 1);
                unsigned int v21 = *(_DWORD *)(v2 + 184);
                uint64_t v17 = *(void *)(v2 + 264);
              }
              uint64_t v22 = *(void *)(v2 + 176) + 20 * v21;
              *(_DWORD *)(v2 + 184) = v21 + 1;
              *(_DWORD *)uint64_t v22 = v19;
              *(void *)(v22 + 4) = v20;
              *(_DWORD *)(v22 + 12) = v13;
              *(_DWORD *)(v22 + 16) = 0;
              uint64_t v23 = *(void *)(v17 + 36 * v16 + 28);
              uint64_t v24 = *(unsigned int *)(v2 + 168);
              if (v24 == *(_DWORD *)(v2 + 172))
              {
                DgnArray<DgnPrimArray<double>>::reallocElts(v2 + 160, 1, 1);
                uint64_t v24 = *(unsigned int *)(v2 + 168);
              }
              uint64_t v25 = *(void *)(v2 + 160);
              uint64_t v26 = v25 + 16 * v24;
              *(void *)uint64_t v26 = v23;
              *(_DWORD *)(v26 + 8) = v21;
              *(_DWORD *)(v26 + 12) = 0;
              uint64_t v13 = *(unsigned int *)(v2 + 168);
              *(_DWORD *)(v2 + 168) = v13 + 1;
              *(_DWORD *)(v25 + 16 * v13 + 12) = 1;
              --v14;
              v15 -= 4;
            }
            while (v14 > 0);
          }
        }
        unsigned int v27 = *(_DWORD *)(v2 + 184);
        if (v27 == *(_DWORD *)(v2 + 188))
        {
          DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts(v46, 1, 1);
          unsigned int v27 = *(_DWORD *)(v2 + 184);
        }
        uint64_t v28 = *(void *)(v2 + 176);
        *(_DWORD *)(v2 + 184) = v27 + 1;
        int v29 = (_DWORD *)(v28 + 20 * v27);
        *int v29 = v43;
        v29[1] = v42;
        v29[2] = v44;
        int v29[3] = v13;
        v29[4] = 0;
        if (v45 == 16777213)
        {
          int v45 = 16777209;
          if (*(_DWORD *)(*v5 + 16 * v13) == 16777209)
          {
            unsigned int v27 = *(_DWORD *)(*v5 + 16 * v13 + 8);
            int v45 = 16777209;
          }
        }
        int v30 = *a2;
        uint64_t v31 = *(unsigned int *)(v2 + 168);
        if (v31 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<DgnPrimArray<double>>::reallocElts(v2 + 160, 1, 1);
          uint64_t v31 = *(unsigned int *)(v2 + 168);
        }
        uint64_t v32 = *(void *)(v2 + 160);
        uint64_t v33 = (int *)(v32 + 16 * v31);
        *uint64_t v33 = v45;
        v33[1] = v30;
        v33[2] = v27;
        v33[3] = 0;
        uint64_t v34 = *(unsigned int *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v34 + 1;
        *(_DWORD *)(v32 + 16 * v34 + 12) = 1;
        uint64_t v35 = *(unsigned int *)(v2 + 224);
        if (v35 == *(_DWORD *)(v2 + 228))
        {
          DgnArray<PrefilterResultFrame>::reallocElts(v39, 1, 1);
          uint64_t v35 = *(unsigned int *)(v2 + 224);
        }
        uint64_t v36 = *(void *)(v2 + 216) + 32 * v35;
        *(_DWORD *)uint64_t v36 = v43;
        *(_DWORD *)(v36 + 4) = v41;
        *(_DWORD *)(v36 + 8) = v34;
        *(_WORD *)(v36 + 12) = -2;
        *(_DWORD *)(v36 + 16) = v42;
        *(_DWORD *)(v36 + 20) = v44;
        *(void *)(v36 + 24) = 0;
        ++*(_DWORD *)(v2 + 224);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v47);
        ++v4;
        LODWORD(v37) = *(_DWORD *)(v2 + 288);
        unsigned int v38 = *(_DWORD *)(v2 + 20);
        if (v37 >= v38) {
          unint64_t v37 = v38;
        }
        else {
          unint64_t v37 = v37;
        }
      }
      while (v4 < v37);
    }
  }
  return this;
}

void sub_213E566D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLatticeDuration::collectTraces(FstSearchLatticeDuration *this)
{
  unint64_t v2 = *((unsigned int *)this + 42);
  int v50 = 0;
  int v49 = 0;
  if (v2)
  {
    unsigned int v3 = MemChunkAlloc(4 * v2, 0);
    unint64_t v4 = 0;
    int v49 = v3;
    int v50 = v2;
    do
      *((_DWORD *)v3 + v4++) = 0;
    while (v4 < v2);
  }
  else
  {
    unsigned int v3 = 0;
  }
  unint64_t v5 = *((unsigned int *)this + 56);
  if (v5)
  {
    unint64_t v6 = 0;
    int v7 = (unsigned int *)(*((void *)this + 27) + 8);
    do
    {
      unsigned int v9 = *v7;
      v7 += 8;
      uint64_t v8 = v9;
      if (v9 != -1)
      {
        *((_DWORD *)v3 + v8) = 1;
        unint64_t v5 = *((unsigned int *)this + 56);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  LODWORD(v10) = *((_DWORD *)this + 42);
  if (!v10) {
    goto LABEL_50;
  }
  char v11 = 0;
  uint64_t v12 = (uint64_t *)((char *)this + 160);
  uint64_t v13 = (uint64_t *)((char *)this + 176);
  do
  {
    uint64_t v10 = (v10 - 1);
    if (v11)
    {
      char v11 = 1;
    }
    else if (*(_DWORD *)(*v12 + 16 * v10) == 16777213)
    {
      char v11 = 1;
      *((_DWORD *)v3 + v10) = 1;
    }
    else
    {
      char v11 = 0;
    }
    if (*((_DWORD *)v3 + v10))
    {
      uint64_t v14 = *v12 + 16 * v10;
      int v15 = *(_DWORD *)(v14 + 12);
      if (v15 >= 1)
      {
        unsigned int v16 = *(_DWORD *)(v14 + 8);
        int v17 = v15 + v16;
        uint64_t v18 = *v13;
        do
        {
          uint64_t v19 = *(unsigned int *)(v18 + 20 * v16 + 12);
          if (v19 != -1) {
            *((_DWORD *)v3 + v19) = 1;
          }
          ++v16;
        }
        while ((int)v16 < v17);
      }
    }
  }
  while (v10);
  unsigned int v20 = *((_DWORD *)this + 42);
  if (v20)
  {
    unint64_t v21 = 0;
    unsigned int v22 = 0;
    unsigned int v23 = 0;
    do
    {
      if (*((_DWORD *)v3 + v21))
      {
        uint64_t v24 = *v12;
        if (v21 != v22)
        {
          *(_OWORD *)(v24 + 16 * v22) = *(_OWORD *)(v24 + 16 * v21);
          uint64_t v24 = *v12;
        }
        *(_DWORD *)(v24 + 16 * v22 + 8) = v23;
        uint64_t v25 = v24 + 16 * v21;
        uint64_t v26 = *(unsigned int *)(v25 + 8);
        uint64_t v27 = (*(_DWORD *)(v25 + 12) + v26);
        if (v26 < v27)
        {
          uint64_t v28 = *v13;
          uint64_t v29 = 20 * v26;
          do
          {
            if (v26 != v23)
            {
              int v30 = (long long *)(v28 + v29);
              uint64_t v31 = v28 + 20 * v23;
              long long v32 = *v30;
              *(_DWORD *)(v31 + 16) = *((_DWORD *)v30 + 4);
              *(_OWORD *)uint64_t v31 = v32;
              uint64_t v28 = *v13;
            }
            uint64_t v33 = v28 + 20 * v23;
            unsigned int v36 = *(_DWORD *)(v33 + 12);
            uint64_t v34 = (_DWORD *)(v33 + 12);
            uint64_t v35 = v36;
            if (v36 != -1) {
              _DWORD *v34 = *((_DWORD *)v3 + v35);
            }
            ++v23;
            ++v26;
            v29 += 20;
          }
          while (v27 != v26);
        }
        *((_DWORD *)v3 + v21) = v22++;
        unsigned int v20 = *((_DWORD *)this + 42);
      }
      ++v21;
    }
    while (v21 < v20);
    unsigned int v37 = *((_DWORD *)this + 43);
    if (v22 > v37)
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 160, v22 - v37, 0);
      unsigned int v20 = *((_DWORD *)this + 42);
    }
    if (v20 < v22)
    {
      unint64_t v38 = v22 - (unint64_t)v20;
      uint64_t v39 = (_OWORD *)(*v12 + 16 * v20);
      do
      {
        *v39++ = xmmword_2140992B0;
        --v38;
      }
      while (v38);
    }
    *((_DWORD *)this + 42) = v22;
    unsigned int v40 = *((_DWORD *)this + 47);
    if (v23 > v40) {
      DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts((uint64_t)this + 176, v23 - v40, 0);
    }
    uint64_t v41 = *((unsigned int *)this + 46);
    if (v41 < v23)
    {
      uint64_t v42 = v23 - v41;
      int v43 = (_DWORD *)(*v13 + 20 * v41 + 16);
      do
      {
        *((_OWORD *)v43 - 1) = xmmword_2140992A0;
        *int v43 = 0;
        v43 += 5;
        --v42;
      }
      while (v42);
    }
  }
  else
  {
LABEL_50:
    unsigned int v23 = 0;
    *((_DWORD *)this + 42) = 0;
  }
  *((_DWORD *)this + 46) = v23;
  uint64_t v44 = *((unsigned int *)this + 56);
  if (v44)
  {
    int v45 = v49;
    uint64_t v46 = (_DWORD *)(*((void *)this + 27) + 8);
    do
    {
      uint64_t v47 = *v46;
      if (v47 != -1) {
        _DWORD *v46 = *((_DWORD *)v45 + v47);
      }
      v46 += 8;
      --v44;
    }
    while (v44);
  }
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v49);
}

void sub_213E56A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int64x2_t FstSearchLatticeDuration::vite(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  FstSearchLatticeDuration::advanceDeltas((FstSearchLatticeDuration *)this, a2, a3, a4, a5);
  int64x2_t v13 = 0u;
  int64x2_t v14 = 0u;
  SnapTime::recordTime((SnapTime *)&v13, 1, 0, 0, 0);
  if (a2 >= 1)
  {
    unsigned int v7 = *((_DWORD *)this + 18);
    if (v7)
    {
      if (!(a2 % v7)) {
        FstSearchLatticeDuration::collectTraces((FstSearchLatticeDuration *)this);
      }
    }
  }
  int64x2_t v11 = 0u;
  int64x2_t v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  uint64_t v8 = this[13];
  int64x2_t result = vaddq_s64(v8[14], vsubq_s64(v11, v13));
  int64x2_t v10 = vaddq_s64(v8[15], vsubq_s64(v12, v14));
  v8[14] = result;
  v8[15] = v10;
  return result;
}

_DWORD *FstSearchLatticeDuration::reset(_DWORD *this)
{
  this[42] = 0;
  this[46] = 0;
  this[56] = 0;
  return this;
}

double FstSearchLatticeDuration::doFrame(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  if (a3 >= 20000) {
    a3 = 20000;
  }
  *(void *)&double result = FstSearchLatticeDuration::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearchLatticeDuration::beginTopRecPassSyncRecog(FstSearchLatticeDuration *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 264, a3, *((PelScoreCache **)this + 4));
    uint64_t result = ArcGraph::findBackoffState(*((void *)this + 5));
    *((_DWORD *)this + 94) = result;
    *((unsigned char *)this + 3DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)this + 80) = 1;
  }
  return result;
}

uint64_t FstSearchLatticeDuration::endTopRecPassSyncRecog(FstSearchLatticeDuration *this)
{
  int64x2_t v10 = 0u;
  int64x2_t v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  int64x2_t v8 = 0u;
  int64x2_t v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  int64x2_t v2 = vsubq_s64(v8, v10);
  unsigned int v3 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v4 = v3[13];
  int64x2_t v5 = vaddq_s64(v3[12], v2);
  int64x2_t v8 = v2;
  int64x2_t v9 = vsubq_s64(v9, v11);
  int64x2_t v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)this + 64) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

void FstSearchLatticeDuration::printSize(FstSearchLatticeDuration *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v116);
  if (v117) {
    unsigned int v16 = v116;
  }
  else {
    unsigned int v16 = &unk_214099300;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_214099300, a3, &unk_214099300, v16);
  DgnString::~DgnString((DgnString *)&v116);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_214099300);
  uint64_t v21 = (a3 + 1);
  uint64_t v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v116);
  if (v117) {
    uint64_t v27 = v116;
  }
  else {
    uint64_t v27 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v116);
  if (v117) {
    long long v32 = v116;
  }
  else {
    long long v32 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v116);
  if (v117) {
    unsigned int v37 = v116;
  }
  else {
    unsigned int v37 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v37, 4, 4, 0);
  uint64_t v111 = a2;
  uint64_t v112 = a6;
  uint64_t v113 = a3;
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v116);
  if (v117) {
    uint64_t v42 = v116;
  }
  else {
    uint64_t v42 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v42, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  uint64_t v43 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v43 = 16;
  }
  uint64_t v44 = *((unsigned int *)this + 42);
  uint64_t v45 = 16 * v44;
  if ((int)v44 <= 0) {
    uint64_t v45 = 0;
  }
  uint64_t v46 = v45 + v43;
  uint64_t v47 = v45 + v43 + 16 * (*((_DWORD *)this + 43) - v44);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v116);
  if (v117) {
    uint64_t v52 = v116;
  }
  else {
    uint64_t v52 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v52, v47, v46, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v47;
  *a5 += v46;
  uint64_t v53 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v53 = 16;
  }
  uint64_t v54 = *((unsigned int *)this + 46);
  uint64_t v55 = 20 * v54;
  if ((int)v54 <= 0) {
    uint64_t v55 = 0;
  }
  uint64_t v56 = v55 + v53;
  uint64_t v57 = v55 + v53 + 20 * (*((_DWORD *)this + 47) - v54);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v116);
  if (v117) {
    int v62 = v116;
  }
  else {
    int v62 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v62, v57, v56, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v57;
  *a5 += v56;
  uint64_t v63 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v63 = 16;
  }
  uint64_t v64 = *((unsigned int *)this + 56);
  uint64_t v65 = 30 * v64;
  if ((int)v64 <= 0) {
    uint64_t v65 = 0;
  }
  uint64_t v66 = v65 + v63;
  uint64_t v67 = v65 + v63 + 30 * (*((_DWORD *)this + 57) - v64);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v116);
  if (v117) {
    unsigned int v72 = v116;
  }
  else {
    unsigned int v72 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, v21, &unk_214099300, v22, v22, v72, v67, v66, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v67;
  *a5 += v66;
  uint64_t v73 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v73 = 16;
  }
  uint64_t v74 = *((unsigned int *)this + 60);
  uint64_t v75 = 30 * v74;
  if ((int)v74 <= 0) {
    uint64_t v75 = 0;
  }
  uint64_t v76 = v75 + v73;
  uint64_t v77 = v75 + v73 + 30 * (*((_DWORD *)this + 61) - v74);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v116);
  if (v117) {
    uint64_t v82 = v116;
  }
  else {
    uint64_t v82 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, v21, &unk_214099300, v22, v22, v82, v77, v76, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v77;
  *a5 += v76;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v116);
  if (v117) {
    int64x2_t v87 = v116;
  }
  else {
    int64x2_t v87 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v83, v84, v85, v86, v21, &unk_214099300, v22, v22, v87, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v116);
  if (v117) {
    unint64_t v92 = v116;
  }
  else {
    unint64_t v92 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, v21, &unk_214099300, v22, v22, v92, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v116);
  if (v117) {
    int64x2_t v97 = v116;
  }
  else {
    int64x2_t v97 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v93, v94, v95, v96, v21, &unk_214099300, v22, v22, v97, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  uint64_t v98 = sizeObject((uint64_t)this + 264, 0);
  uint64_t v99 = sizeObject((uint64_t)this + 264, 1);
  uint64_t v100 = sizeObject((uint64_t)this + 264, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v116);
  if (v117) {
    int v105 = v116;
  }
  else {
    int v105 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v101, v102, v103, v104, v21, &unk_214099300, v22, v22, v105, v98, v99, v100);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v98;
  *a5 += v99;
  *v112 += v100;
  unint64_t v114 = 0;
  unint64_t v115 = 0;
  SearchItf::printSize(this, v111, v21, &v115, &v114, &v114);
  *a4 += v115;
  *a5 += v114;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v116);
  if (v117) {
    uint64_t v110 = v116;
  }
  else {
    uint64_t v110 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v106, v107, v108, v109, v113, &unk_214099300, (35 - v113), (35 - v113), v110, *a4, *a5, *v112);
  DgnString::~DgnString((DgnString *)&v116);
}

void sub_213E57338(_Unwind_Exception *a1)
{
  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

BOOL FstSearchLatticeDuration::findBestPath(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v8 = *(unsigned int *)(a1 + 168);
  if (v8) {
    BOOL v9 = *(_DWORD *)(a3 + 8) == 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    *(void *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v8;
  }
  if (v8) {
    BOOL v10 = *(_DWORD *)(a2 + 8) == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    *(void *)a2 = MemChunkAlloc(v8, 0);
    *(_DWORD *)(a2 + 8) = v8;
LABEL_14:
    uint64_t v11 = 0;
    do
    {
      *(unsigned char *)(*(void *)a2 + v11) = 0;
      *(unsigned char *)(*(void *)a3 + v11++) = 0;
    }
    while (v8 != v11);
    goto LABEL_16;
  }
  if (v8) {
    goto LABEL_14;
  }
LABEL_16:
  unsigned int BestTrace = FstSearchLatticeDurationBackoff::getBestTrace(a1, (void *)a2, (void *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1) {
    return 0;
  }
  uint64_t v13 = *(void *)(a1 + 160) + 16 * BestTrace;
  LODWORD(v13) = *(_DWORD *)(*(void *)(a1 + 176) + 20 * *(unsigned int *)(v13 + 8))
               + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v13 + 4));
  *a4 = v13;
  return v13 != 1879048192;
}

uint64_t FstSearchLatticeDuration::buildWordLattice(uint64_t a1, uint64_t *a2, void *a3, void *a4, char a5)
{
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  int v31 = 0;
  uint64_t v28 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v27, *(unsigned int *)(a1 + 168));
  unint64_t v8 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v8, 0, 128);
  v8[4] = (uint64_t)a2;
  FstSearchLatticeHashBackoff::createLatticeNodes(a1, &v30, (uint64_t)&v28, (uint64_t)a2, v27, a3, a4);
  uint64_t v23 = (uint64_t)v8;
  uint64_t v24 = *(unsigned int *)(a1 + 168);
  if (v24)
  {
    uint64_t v10 = 0;
    int v11 = v29;
    do
    {
      if (*(unsigned char *)(*a3 + v10))
      {
        uint64_t v12 = *(void *)(a1 + 160);
        if (*(_DWORD *)(v12 + 16 * v10) != 16777209)
        {
          uint64_t v13 = v12 + 16 * v10;
          if (*(int *)(v13 + 12) >= 1)
          {
            int v14 = *(_DWORD *)(v13 + 8);
            do
            {
              uint64_t v15 = *(void *)(a1 + 176) + 20 * v14;
              uint64_t v16 = *(unsigned int *)(v15 + 12);
              if (v16 == -1) {
                unsigned int v17 = 0;
              }
              else {
                unsigned int v17 = v11 - *((_DWORD *)v30 + v16);
              }
              uint64_t v18 = *(unsigned int *)(v28 + 4 * v17);
              if (*(unsigned char *)(*a4 + v10)) {
                FstSearchLatticeDuration::createLatticeLink((ArcGraph **)a1, v10, (int *)v15, 0xFFFFFFFFLL, v18, (const WordLatticeLC *)*(unsigned int *)(v28 + 4 * (v11 - *((_DWORD *)v30 + v10))), a2, v9, a5);
              }
              uint64_t v19 = v27[0];
              if (*(_DWORD *)(v27[0] + 16 * v10 + 8))
              {
                unint64_t v20 = 0;
                do
                {
                  uint64_t v21 = *(unsigned int *)(*(void *)(v19 + 16 * v10) + 4 * v20);
                  FstSearchLatticeDuration::createLatticeLink((ArcGraph **)a1, v10, (int *)v15, v21, v18, (const WordLatticeLC *)*(unsigned int *)(v28 + 4 * (v11 - *((_DWORD *)v30 + v21))), a2, v9, a5);
                  ++v20;
                  uint64_t v19 = v27[0];
                }
                while (v20 < *(unsigned int *)(v27[0] + 16 * v10 + 8));
              }
              ++v14;
            }
            while (v14 < *(_DWORD *)(*(void *)(a1 + 160) + 16 * v10 + 12)
                        + *(_DWORD *)(*(void *)(a1 + 160) + 16 * v10 + 8));
          }
        }
      }
      ++v10;
    }
    while (v10 != v24);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>(v23);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v27);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v28);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v30);
}

void sub_213E576B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearchLatticeDuration::createLatticeLink(ArcGraph **this, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, const WordLatticeLC *a6, uint64_t *a7, uint64_t a8, char a9)
{
  unsigned int v11 = a5;
  unsigned int v12 = a4;
  if ((a4 & 0x80000000) != 0) {
    SilenceToken = 0;
  }
  else {
    SilenceToken = (_DWORD *)FstSearchLatticeHashBackoff::getSilenceToken((FstSearchLatticeHashBackoff *)this, a4, a2);
  }
  ArcGraph::lexToCWIDAC(this[5], *((_DWORD *)this[20] + 4 * a2), (uint64_t)a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8, (uint64_t)v40);
  int v17 = a3[1];
  if (SilenceToken)
  {
    v17 += SilenceToken[1];
    int v18 = *SilenceToken + *a3;
  }
  else
  {
    int v18 = *a3;
  }
  if (v40[0] >> 25 == 126)
  {
    int v19 = 0;
    int v20 = v17;
    if ((v12 & 0x80000000) != 0)
    {
LABEL_9:
      int v21 = 0;
      goto LABEL_12;
    }
  }
  else
  {
    int v19 = *((_DWORD *)this + 34);
    int v20 = v17 - v19;
    if ((v12 & 0x80000000) != 0) {
      goto LABEL_9;
    }
  }
  int v21 = *((_DWORD *)this + 35);
  v20 -= v21;
LABEL_12:
  int v22 = a3[4];
  if (SilenceToken) {
    v22 += SilenceToken[4];
  }
  int v34 = v20;
  uint64_t v35 = 0;
  int v36 = v19;
  int v37 = v18 - v17 - v22;
  int v38 = v22;
  int v39 = v21;
  uint64_t v23 = a3[3];
  uint64_t v24 = this[20];
  if (v23 == -1)
  {
    int v26 = 0;
    if (a9) {
      goto LABEL_20;
    }
  }
  else
  {
    int v25 = *((_DWORD *)v24 + 4 * v23 + 1);
    if (a9)
    {
      if (v25 >= 1) {
        --v25;
      }
      int v26 = (v25 >> 1) + 1;
LABEL_20:
      int v27 = *((_DWORD *)v24 + 4 * a2 + 1);
      if (v27 >= 1) {
        --v27;
      }
      int v28 = v27 >> 1;
      int v29 = v28 - v26 + 1;
      if ((v12 & 0x80000000) == 0)
      {
        int v30 = *((_DWORD *)v24 + 4 * v12 + 1);
        if (v30 >= 1) {
          --v30;
        }
        int v31 = v30 >> 1;
        goto LABEL_29;
      }
LABEL_30:
      int v32 = 0;
      goto LABEL_31;
    }
    int v26 = v25 + 1;
  }
  int v28 = *((_DWORD *)v24 + 4 * a2 + 1);
  int v29 = v28 - v26 + 1;
  if ((v12 & 0x80000000) != 0) {
    goto LABEL_30;
  }
  int v31 = *((_DWORD *)v24 + 4 * v12 + 1);
LABEL_29:
  int v32 = v31 - v28;
LABEL_31:
  WordLatticeLC::WordLatticeLC((uint64_t)v33, (uint64_t)v40, v26, v29, v32, (uint64_t)&v34);
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v11, a6, (WordLatticeLC *)v33);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v33);
}

void sub_213E578D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLatticeDuration::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(void *)(this + 112) = a2;
  if (*(unsigned char *)(this + 380)) {
    return MiniFst::beginTopFstSyncRecog(this + 264);
  }
  return this;
}

uint64_t FstSearchLatticeDuration::endTopRecSyncRecog(FstSearchLatticeDuration *this)
{
  uint64_t v1 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  return v1;
}

uint64_t FstSearchLatticeDuration::getBestExitScore(FstSearchLatticeDuration *this)
{
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  *((_DWORD *)this + 63) = -1;
  unint64_t v1 = *((unsigned int *)this + 38);
  unint64_t v2 = *((unsigned int *)this + 56);
  if (v1 >= v2) {
    goto LABEL_19;
  }
  uint64_t v4 = 0;
  unsigned int v5 = 0;
  uint64_t v6 = 32 * v1;
  do
  {
    uint64_t v7 = *((void *)this + 27) + v6;
    if (*(_DWORD *)(*((void *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      uint64_t v8 = *(unsigned int *)(v7 + 8);
      if (v8 != -1 && *(_DWORD *)(*((void *)this + 20) + 16 * v8 + 4) == *((_DWORD *)this + 62))
      {
        if (v5 == HIDWORD(v22))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v21, 1, 1);
          unsigned int v5 = v22;
          uint64_t v4 = v21;
        }
        *(_DWORD *)(v4 + 4 * v5) = v8;
        unsigned int v5 = v22 + 1;
        LODWORD(v22) = v22 + 1;
        unint64_t v2 = *((unsigned int *)this + 56);
      }
    }
    ++v1;
    v6 += 32;
  }
  while (v1 < v2);
  if (v5)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *((void *)this + 20);
    int v11 = 1879048192;
    do
    {
      uint64_t v12 = v10 + 16 * *(unsigned int *)(v4 + 4 * v9);
      int v13 = *(_DWORD *)(v12 + 12);
      if (v13 >= 1)
      {
        unsigned int v14 = *(_DWORD *)(v12 + 8);
        int v15 = v13 + v14;
        uint64_t v16 = *((void *)this + 22);
        do
        {
          unsigned int v17 = v14;
          int v18 = *(_DWORD *)(v16 + 20 * v14);
          if (v11 > v18)
          {
            *((_DWORD *)this + 63) = *(_DWORD *)(v16 + 20 * v17 + 12);
            int v11 = v18;
          }
          unsigned int v14 = v17 + 1;
        }
        while ((int)(v17 + 1) < v15);
      }
      ++v9;
    }
    while (v9 != v5);
  }
  else
  {
LABEL_19:
    int v11 = 1879048192;
  }
  if (v11 >= 20000) {
    uint64_t v19 = 20000;
  }
  else {
    uint64_t v19 = v11;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v21);
  return v19;
}

void sub_213E57A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t FstSearchLatticeDuration::getBestScoreMaybeUpdateFstNode(FstSearchLatticeDuration *this, Node *a2)
{
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v2 = *((unsigned int *)this + 56);
  if (v2)
  {
    unsigned int v3 = (int *)*((void *)this + 27);
    __int16 v4 = -1;
    int v5 = 1879048192;
    uint64_t v6 = v3;
    do
    {
      int v8 = *v6;
      v6 += 8;
      int v7 = v8;
      if (v5 > v8)
      {
        __int16 v4 = *((_WORD *)v3 + 6);
        int v5 = v7;
      }
      unsigned int v3 = v6;
      --v2;
    }
    while (v2);
    uint64_t v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000) {
        uint64_t v9 = 20000;
      }
      else {
        uint64_t v9 = v5;
      }
    }
  }
  else
  {
    uint64_t v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

uint64_t FstSearchLatticeDuration::seedTheory(FstSearchLatticeDuration *this, int a2, int a3, int a4, SearchStats *a5)
{
  if (a4 == -2)
  {
    int v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    unsigned int v11 = *((_DWORD *)this + 46);
    if (v11 == *((_DWORD *)this + 47))
    {
      DgnArray<FstSearchLatticeHashBackoffTraceToken>::reallocElts((uint64_t)this + 176, 1, 1);
      unsigned int v11 = *((_DWORD *)this + 46);
    }
    uint64_t v12 = *((void *)this + 22) + 20 * v11;
    *(_OWORD *)(v12 + 4) = xmmword_2140992E0;
    *((_DWORD *)this + 46) = v11 + 1;
    *(_DWORD *)uint64_t v12 = a2;
    unsigned int v13 = *((_DWORD *)this + 42);
    if (v13 == *((_DWORD *)this + 43))
    {
      DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)this + 160, 1, 1);
      unsigned int v13 = *((_DWORD *)this + 42);
    }
    unsigned int v14 = (_DWORD *)(*((void *)this + 20) + 16 * v13);
    *unsigned int v14 = a4;
    v14[1] = a3;
    v14[2] = v11;
    v14[3] = 1;
    int v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  int v15 = *(_DWORD *)(*((void *)this + 5) + 144);
  unsigned int v16 = *((_DWORD *)this + 56);
  if (v16 == *((_DWORD *)this + 57))
  {
    DgnArray<PrefilterResultFrame>::reallocElts((uint64_t)this + 216, 1, 1);
    unsigned int v16 = *((_DWORD *)this + 56);
  }
  uint64_t v17 = *((void *)this + 27) + 32 * v16;
  *(_DWORD *)uint64_t v17 = a2;
  *(_DWORD *)(v17 + 4) = v15;
  *(_DWORD *)(v17 + 8) = v9;
  *(_WORD *)(v17 + 12) = -2;
  *(void *)(v17 + 16) = 0;
  *(void *)(v17 + 24) = 0;
  LODWORD(v17) = *((_DWORD *)this + 56) + 1;
  *((_DWORD *)this + 56) = v17;
  *((_DWORD *)this + 38) = v17;

  return FstSearchLatticeDurationBackoff::propagateNulls((uint64_t)this, 20000, a3, a5);
}

uint64_t FstSearchLatticeDuration::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(unsigned int *)(result + 252);
  if (v8 != -1)
  {
    int v9 = (void *)result;
    uint64_t v10 = (unsigned int *)(*(void *)(result + 160) + 16 * v8);
    for (i = *(unsigned int *)(*(void *)(result + 176) + 20 * v10[2] + 12); i != -1; uint64_t v8 = v16)
    {
      uint64_t v16 = i;
      uint64_t result = v9[5];
      if (*v10 == 16777209)
      {
        int v17 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        uint64_t result = ArcGraph::lexToCWID((ArcGraph *)result, *v10, a3, (uint64_t)a4, a5, a6, a7, a8);
        int v17 = result;
      }
      uint64_t v18 = *(unsigned int *)(a2 + 8);
      if (v18 == *(_DWORD *)(a2 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        uint64_t v18 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(void *)a2 + 4 * v18) = v17;
      ++*(_DWORD *)(a2 + 8);
      uint64_t v19 = *(unsigned int *)(a6 + 8);
      if (v19 == *(_DWORD *)(a6 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        uint64_t v19 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(void *)a6 + 4 * v19) = v8;
      ++*(_DWORD *)(a6 + 8);
      uint64_t v20 = v9[20];
      int v21 = *(_DWORD *)(v20 + 16 * v8 + 4);
      uint64_t v22 = *(unsigned int *)(a3 + 8);
      if (v22 == *(_DWORD *)(a3 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        uint64_t v22 = *(unsigned int *)(a3 + 8);
        uint64_t v20 = v9[20];
      }
      *(_DWORD *)(*(void *)a3 + 4 * v22) = v21;
      ++*(_DWORD *)(a3 + 8);
      int v23 = *(_DWORD *)(v9[22] + 20 * *(unsigned int *)(v20 + 16 * v8 + 8));
      uint64_t v24 = *(unsigned int *)(a5 + 8);
      if (v24 == *(_DWORD *)(a5 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        uint64_t v24 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(void *)a5 + 4 * v24) = v23;
      ++*(_DWORD *)(a5 + 8);
      uint64_t v10 = (unsigned int *)(v9[20] + 16 * v16);
      uint64_t i = *(unsigned int *)(v9[22] + 20 * v10[2] + 12);
    }
    *a4 = *v10;
  }
  return result;
}

void FstSearchLatticeDuration::checkSearchParametersValidityForArcGraph(FstSearchLatticeDuration *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *((void *)this + 5);
  if (*(unsigned char *)(v8 + 178))
  {
    int v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(unsigned char *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    }
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    }
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(void *)(**(void **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((void *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if (a2)
      {
        if (!*(unsigned char *)(v8 + 203)) {
          return;
        }
      }
      else if (*(unsigned char *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(unsigned char *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

uint64_t FstSearchLatticeDuration::makePartialResult(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    uint64_t v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(void *)a2 + v9))(*(void *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  unsigned int BestTrace = FstSearchLatticeDurationBackoff::getBestTrace((uint64_t)a1, 0, 0, 1);
  if (BestTrace == -1) {
    return 1879048192;
  }
  unsigned int v15 = BestTrace;
  FstSearchLatticeHashBackoff::getHistory((uint64_t)a1, BestTrace, a3, a4, v11, v12, v13, v14);
  memset(v25, 0, sizeof(v25));
  int v26 = 0;
  if (*(_DWORD *)(a3 + 8))
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    int v18 = 0;
    do
    {
      uint64_t v19 = *(void *)a3 + v16;
      int v20 = *(_DWORD *)(v19 + 28);
      WordLatticeLC::WordLatticeLC((uint64_t)v24, v19, v18, *(_DWORD *)(v19 + 24) - v18, v20 - *(_DWORD *)(v19 + 24), (uint64_t)v25);
      uint64_t v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(void *)a2 + 112 * v21), (const WordLatticeLC *)v24);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v24);
      ++v17;
      v16 += 32;
      int v18 = v20;
    }
    while (v17 < *(unsigned int *)(a3 + 8));
  }
  uint64_t v22 = a1[20] + 16 * v15;
  return (*(_DWORD *)(a1[22] + 20 * *(unsigned int *)(v22 + 8))
                      + *(_DWORD *)(a1[11] + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_213E581D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int64x2_t FstSearchLateLatticeBackoff::advanceDeltas(FstSearchLateLatticeBackoff *this, int a2, int a3, SearchStats *a4, int a5)
{
  int v8 = a2;
  v108[0] = a2;
  int64x2_t v106 = 0u;
  int64x2_t v107 = 0u;
  SnapTime::recordTime((SnapTime *)&v106, 1, 0, 0, 0);
  *((_DWORD *)this + 58) = a3;
  int v88 = *((_DWORD *)this + 2);
  uint64_t v84 = (int *)((char *)this + 232);
  unint64_t v10 = *((unsigned int *)this + 50);
  if (v10)
  {
    unsigned int v11 = 0;
    unsigned int v90 = 0;
    unint64_t v12 = 0;
    uint64_t v83 = (char *)this + 208;
    do
    {
      uint64_t v13 = *((void *)this + 24);
      uint64_t v14 = *((void *)this + 5);
      uint64_t v15 = 24 * v12 + 20;
      while (1)
      {
        uint64_t v16 = *(unsigned int *)(v13 + v15 - 16);
        if (*(_DWORD *)(v14 + 160) != v16) {
          break;
        }
        ++v12;
        v15 += 24;
        if (v12 >= v10) {
          goto LABEL_48;
        }
      }
      int v82 = v8;
      uint64_t v81 = a4;
      int v80 = a5;
      if (*(_DWORD *)(v14 + 140) > (int)v16
        && (*((_DWORD *)this + 19) + *((_DWORD *)this + 58) >= 5000
          ? (int v17 = 5000)
          : (int v17 = *((_DWORD *)this + 19) + *((_DWORD *)this + 58)),
            ScoreAllowBackoff_updateNodeInSequence = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(v13 + v15 - 8), *(_DWORD *)(v13 + v15 - 20), v17), int v19 = *((_DWORD *)this + 58), ScoreAllowBackoff_updateNodeInSequence - v88 <= v19))
      {
        int v20 = ScoreAllowBackoff_updateNodeInSequence;
        if (v19 > ScoreAllowBackoff_updateNodeInSequence) {
          int *v84 = ScoreAllowBackoff_updateNodeInSequence;
        }
        uint64_t v21 = *((void *)this + 24) + v15;
        uint64_t v22 = *(void *)(v21 - 16);
        __int16 v23 = *(_WORD *)(v21 - 8);
        __int16 v24 = *(_WORD *)(v21 - 6);
        uint64_t v25 = *(void *)(v21 - 4);
        uint64_t v26 = *((unsigned int *)this + 54);
        if (v26 == *((_DWORD *)this + 55))
        {
          DgnArray<CWIDAC>::reallocElts((uint64_t)v83, 1, 1);
          LODWORD(v26) = *((_DWORD *)this + 54);
        }
        uint64_t v27 = *((void *)this + 26) + 24 * v26;
        *(_DWORD *)uint64_t v27 = v20;
        *(void *)(v27 + 4) = v22;
        *(_WORD *)(v27 + 12) = v23;
        *(_WORD *)(v27 + 14) = v24;
        *(void *)(v27 + 16) = v25;
        int v28 = *((_DWORD *)this + 54);
        *((_DWORD *)this + 54) = v28 + 1;
        if (v90 == 2 * *((_DWORD *)this + 4)) {
          unsigned int v11 = v28 + 1;
        }
        unsigned int v89 = v11;
        ++v90;
      }
      else
      {
        unsigned int v89 = v11;
      }
      unsigned int v29 = v16;
      int v30 = v88;
      do
      {
        uint64_t v31 = *((void *)this + 5);
        uint64_t v32 = *(void *)(v31 + 152);
        unsigned int v33 = *(_DWORD *)(v32 + 4 * v29);
        int v34 = *(_DWORD *)(v32 + 4 * (v29 + 1));
        int v35 = *(_DWORD *)(v31 + 140);
        if (v35 <= v34)
        {
          if (v35 <= (int)v16 && *((unsigned char *)this + 356) != 0)
          {
            unsigned int v51 = (v33 & 0xFFFFF) <= 0xFFFF3 ? v33 & 0xFFFFF : v33 & 0xFFFFF | 0xF00000;
            if (v51 != 16777210)
            {
              DgnString::DgnString((DgnString *)&v103);
              ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v51, (DgnString *)&v103, v52, v53, v54, v55, v56);
              uint64_t v61 = &unk_214099300;
              if (v103.i32[2]) {
                uint64_t v61 = (void *)v103.i64[0];
              }
              xprintf("Seed from state %d score %d trace %d, %s\n", v57, v58, v59, v60, v16, *(unsigned int *)(*((void *)this + 24) + v15 - 20), *(unsigned int *)(*((void *)this + 24) + v15 - 12), v61);
              MiniFst::seed((uint64_t)this + 240, *(_DWORD *)(*((void *)this + 24) + v15 - 20), *(_DWORD *)(*((void *)this + 24) + v15), *(_DWORD *)(*((void *)this + 24) + v15 - 12), v34);
              DgnString::~DgnString((DgnString *)&v103);
            }
          }
        }
        else
        {
          int v36 = (v33 >> 20) & 0x3FF;
          if (*((_DWORD *)this + 19) + *((_DWORD *)this + 58) >= 5000) {
            int v37 = 5000;
          }
          else {
            int v37 = *((_DWORD *)this + 19) + *((_DWORD *)this + 58);
          }
          int v38 = PelScoreCache::getScoreAllowBackoff_updateNodeInSequence(*((PelScoreCache **)this + 4), (unsigned __int16)*(_DWORD *)(v32 + 4 * v29), *(_DWORD *)(*((void *)this + 24) + v15 - 20) + v36, v37);
          int v39 = *((_DWORD *)this + 58);
          if (v38 - v30 <= v39)
          {
            int v40 = v38;
            if (v39 > v38) {
              int *v84 = v38;
            }
            uint64_t v41 = (_DWORD *)(*((void *)this + 24) + v15);
            int v42 = *(v41 - 3);
            __int16 v43 = *((_WORD *)v41 - 3);
            int v45 = *(v41 - 1);
            int v44 = *v41;
            uint64_t v46 = *((unsigned int *)this + 54);
            if (v46 == *((_DWORD *)this + 55))
            {
              int v86 = v44;
              __int16 v87 = v43;
              int v85 = v42;
              DgnArray<CWIDAC>::reallocElts((uint64_t)v83, 1, 1);
              int v42 = v85;
              int v44 = v86;
              __int16 v43 = v87;
              LODWORD(v46) = *((_DWORD *)this + 54);
            }
            uint64_t v47 = *((void *)this + 26) + 24 * v46;
            *(_DWORD *)uint64_t v47 = v40;
            *(_DWORD *)(v47 + 4) = v34;
            *(_DWORD *)(v47 + 8) = v42;
            *(_WORD *)(v47 + 12) = v33;
            *(_WORD *)(v47 + 14) = v43;
            *(_DWORD *)(v47 + 16) = v45 + v36;
            *(_DWORD *)(v47 + 20) = v44;
            int v48 = *((_DWORD *)this + 54);
            *((_DWORD *)this + 54) = v48 + 1;
            int v30 = v88;
            unsigned int v49 = v89;
            if (v90 == 2 * *((_DWORD *)this + 4)) {
              unsigned int v49 = v48 + 1;
            }
            unsigned int v89 = v49;
            ++v90;
          }
        }
        v29 += 2;
      }
      while ((v33 & 0x80000000) == 0);
      unint64_t v12 = (v12 + 1);
      unint64_t v10 = *((unsigned int *)this + 50);
      int v8 = v82;
      a4 = v81;
      a5 = v80;
      unsigned int v11 = v89;
    }
    while (v12 < v10);
  }
  else
  {
    unsigned int v90 = 0;
    unsigned int v11 = 0;
  }
LABEL_48:
  int v105 = *((_DWORD *)this + 58) + v88;
  if (*((unsigned char *)this + 356)) {
    MiniFst::updateFrame((char *)this + 240, v84, v88, v8);
  }
  int64x2_t v103 = 0u;
  int64x2_t v104 = 0u;
  SnapTime::recordTime((SnapTime *)&v103, 1, 0, 0, 0);
  int64x2_t v103 = vsubq_s64(v103, v106);
  int64x2_t v104 = vsubq_s64(v104, v107);
  int v62 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v63 = vaddq_s64(v62[1], v104);
  *int v62 = vaddq_s64(*v62, v103);
  v62[1] = v63;
  int64x2_t v101 = 0u;
  int64x2_t v102 = 0u;
  SnapTime::recordTime((SnapTime *)&v101, 1, 0, 0, 0);
  if (v90 > 2 * *((_DWORD *)this + 4)) {
    FstSearchLateLatticeHashBackoff::applyCutoffOnEmitting((uint64_t)this, v11, &v105);
  }
  int64x2_t v99 = 0u;
  int64x2_t v100 = 0u;
  SnapTime::recordTime((SnapTime *)&v99, 1, 0, 0, 0);
  int64x2_t v64 = vsubq_s64(v99, v101);
  uint64_t v65 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v66 = v65[3];
  int64x2_t v67 = vaddq_s64(v65[2], v64);
  int64x2_t v99 = v64;
  int64x2_t v100 = vsubq_s64(v100, v102);
  int64x2_t v68 = vaddq_s64(v66, v100);
  v65[2] = v67;
  v65[3] = v68;
  int64x2_t v97 = 0u;
  int64x2_t v98 = 0u;
  SnapTime::recordTime((SnapTime *)&v97, 1, 0, 0, 0);
  FstSearchLateLatticeBackoff::makeViterbiDecisionOnEmitting((uint64_t)this);
  unint64_t v69 = *((unsigned int *)this + 6);
  if (v69)
  {
    unint64_t v70 = *((unsigned int *)this + 50);
    if (v69 < v70) {
      mrec_nth_element<FstSearchLateLatticeHashBackoffcmpTok>(*((void *)this + 24), v69, v70);
    }
  }
  int64x2_t v95 = 0u;
  int64x2_t v96 = 0u;
  SnapTime::recordTime((SnapTime *)&v95, 1, 0, 0, 0);
  int64x2_t v71 = vsubq_s64(v95, v97);
  unsigned int v72 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v73 = v72[5];
  int64x2_t v74 = vaddq_s64(v72[4], v71);
  int64x2_t v95 = v71;
  int64x2_t v96 = vsubq_s64(v96, v98);
  int64x2_t v75 = vaddq_s64(v73, v96);
  v72[4] = v74;
  v72[5] = v75;
  int64x2_t v93 = 0u;
  int64x2_t v94 = 0u;
  SnapTime::recordTime((SnapTime *)&v93, 1, 0, 0, 0);
  *((_DWORD *)this + 54) = 0;
  uint64_t v76 = *((unsigned int *)this + 50);
  *((_DWORD *)this + 38) = v76;
  if (a4)
  {
    *((void *)a4 + 2) += v76;
    if (*((_DWORD *)a4 + 2) > v76) {
      LODWORD(v76) = *((_DWORD *)a4 + 2);
    }
    *((_DWORD *)a4 + 2) = v76;
  }
  if (*((unsigned char *)this + 356)) {
    FstSearchLateLatticeBackoff::seedFromMiniFst((uint64_t)this, v108);
  }
  if (a5) {
    FstSearchLateLatticeHashBackoff::propagateNulls((uint64_t)this, v105, v8, a4);
  }
  *((_DWORD *)this + 56) = v8;
  int64x2_t v91 = 0u;
  int64x2_t v92 = 0u;
  SnapTime::recordTime((SnapTime *)&v91, 1, 0, 0, 0);
  uint64_t v77 = (int64x2_t *)*((void *)this + 13);
  int64x2_t result = vaddq_s64(v77[6], vsubq_s64(v91, v93));
  int64x2_t v79 = vaddq_s64(v77[7], vsubq_s64(v92, v94));
  v77[6] = result;
  v77[7] = v79;
  return result;
}

void sub_213E58824(_Unwind_Exception *exception_object)
{
}

uint64_t FstSearchLateLatticeBackoff::makeViterbiDecisionOnEmitting(uint64_t this)
{
  uint64_t v1 = this;
  unint64_t v2 = *(unsigned int *)(this + 216);
  if (v2)
  {
    this = (uint64_t)mrec_qsort_r<FstSearchLateLatticeHashBackoffActiveToken>(*(char **)(this + 208), v2, 24);
    unint64_t v3 = *(unsigned int *)(v1 + 216);
    *(_DWORD *)(v1 + 200) = 0;
    if (v3)
    {
      uint64_t v4 = 0;
      unsigned int v5 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v7 = *(void *)(v1 + 208);
        if (!v4 || *(_DWORD *)(v7 + v4 + 4) != *(_DWORD *)(v7 + v4 - 20))
        {
          if (v5 == *(_DWORD *)(v1 + 204))
          {
            this = DgnArray<CWIDAC>::reallocElts(v1 + 192, 1, 1);
            unsigned int v5 = *(_DWORD *)(v1 + 200);
          }
          uint64_t v8 = *(void *)(v1 + 192) + 24 * v5;
          long long v9 = *(_OWORD *)(v7 + v4);
          *(void *)(v8 + 16) = *(void *)(v7 + v4 + 16);
          *(_OWORD *)uint64_t v8 = v9;
          unsigned int v5 = *(_DWORD *)(v1 + 200) + 1;
          *(_DWORD *)(v1 + 200) = v5;
          unint64_t v3 = *(unsigned int *)(v1 + 216);
        }
        v4 += 24;
      }
    }
  }
  else
  {
    *(_DWORD *)(this + 200) = 0;
  }
  return this;
}

uint64_t FstSearchLateLatticeBackoff::seedFromMiniFst(uint64_t this, int *a2)
{
  if (*(unsigned char *)(this + 356))
  {
    uint64_t v2 = this;
    unsigned int v3 = *(_DWORD *)(this + 264);
    if (v3 >= *(_DWORD *)(this + 20)) {
      unsigned int v3 = *(_DWORD *)(this + 20);
    }
    if (v3)
    {
      uint64_t v4 = 0;
      unsigned int v5 = 0;
      uint64_t v22 = this + 192;
      __int16 v23 = (void *)(this + 160);
      do
      {
        uint64_t v6 = (int *)(*(void *)(v2 + 256) + v4);
        int v7 = *v6;
        int v9 = v6[4];
        int v8 = v6[5];
        int v10 = v6[6];
        int v11 = v6[7];
        int v12 = v6[2];
        v25[0] = 0;
        v25[1] = 0;
        if ((v12 & 0x80000000) == 0)
        {
          while (1)
            ;
        }
        unsigned int v13 = -2 - v12;
        if (v11 == 16777213)
        {
          int v11 = 16777209;
          if (*(_DWORD *)(*v23 + 36 * v13) == 16777209) {
            unsigned int v13 = *(_DWORD *)(*(void *)(v2 + 176) + 16 * *(unsigned int *)(*v23 + 36 * v13 + 8) + 12);
          }
        }
        int v14 = *a2;
        uint64_t v15 = *(unsigned int *)(v2 + 168);
        if (v15 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)v23, 1, 1);
          LODWORD(v15) = *(_DWORD *)(v2 + 168);
        }
        uint64_t v16 = *(void *)(v2 + 160);
        uint64_t v17 = v16 + 36 * v15;
        *(_DWORD *)uint64_t v17 = v11;
        *(_DWORD *)(v17 + 4) = v14;
        *(void *)(v17 + 8) = 0xFFFFFFFFLL;
        *(_DWORD *)(v17 + 16) = v7;
        *(_DWORD *)(v17 + 20) = v13;
        *(_DWORD *)(v17 + 24) = v9;
        *(_DWORD *)(v17 + 28) = v8;
        *(_WORD *)(v17 + 32) = -2;
        unsigned int v18 = *(_DWORD *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v18 + 1;
        *(_DWORD *)(v16 + 36 * v18 + 12) = 1;
        uint64_t v19 = *(unsigned int *)(v2 + 200);
        if (v19 == *(_DWORD *)(v2 + 204))
        {
          DgnArray<CWIDAC>::reallocElts(v22, 1, 1);
          LODWORD(v19) = *(_DWORD *)(v2 + 200);
        }
        uint64_t v20 = *(void *)(v2 + 192) + 24 * v19;
        *(_DWORD *)uint64_t v20 = v7;
        *(_DWORD *)(v20 + 4) = v10;
        *(_DWORD *)(v20 + 8) = v18;
        *(_WORD *)(v20 + 12) = -2;
        *(_DWORD *)(v20 + 16) = v9;
        *(_DWORD *)(v20 + 20) = v8;
        ++*(_DWORD *)(v2 + 200);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v25);
        ++v5;
        unsigned int v21 = *(_DWORD *)(v2 + 264);
        if (v21 >= *(_DWORD *)(v2 + 20)) {
          unsigned int v21 = *(_DWORD *)(v2 + 20);
        }
        v4 += 36;
      }
      while (v5 < v21);
    }
  }
  return this;
}

void sub_213E58B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

int64x2_t FstSearchLateLatticeBackoff::vite(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  FstSearchLateLatticeBackoff::advanceDeltas((FstSearchLateLatticeBackoff *)this, a2, a3, a4, a5);
  int64x2_t v11 = 0u;
  int64x2_t v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  int64x2_t v9 = 0u;
  int64x2_t v10 = 0u;
  SnapTime::recordTime((SnapTime *)&v9, 1, 0, 0, 0);
  uint64_t v6 = this[13];
  int64x2_t result = vaddq_s64(v6[14], vsubq_s64(v9, v11));
  int64x2_t v8 = vaddq_s64(v6[15], vsubq_s64(v10, v12));
  v6[14] = result;
  v6[15] = v8;
  return result;
}

_DWORD *FstSearchLateLatticeBackoff::reset(_DWORD *this)
{
  this[42] = 0;
  this[46] = 0;
  this[50] = 0;
  return this;
}

double FstSearchLateLatticeBackoff::doFrame(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  if (a3 >= 20000) {
    a3 = 20000;
  }
  *(void *)&double result = FstSearchLateLatticeBackoff::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearchLateLatticeBackoff::beginTopRecPassSyncRecog(FstSearchLateLatticeBackoff *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 240, a3, *((PelScoreCache **)this + 4));
    uint64_t result = ArcGraph::findBackoffState(*((void *)this + 5));
    *((_DWORD *)this + 88) = result;
    *((unsigned char *)this + 356) = 1;
  }
  return result;
}

uint64_t FstSearchLateLatticeBackoff::endTopRecPassSyncRecog(int64x2_t **this)
{
  int64x2_t v10 = 0u;
  int64x2_t v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  FstSearchLateLatticeHashBackoff::generateTraceTokensFromTraces((FstSearchLateLatticeHashBackoff *)this);
  FstSearchLateLatticeBackoff::generateTraceTokensForLateLattice((FstSearchLateLatticeBackoff *)this);
  int64x2_t v8 = 0u;
  int64x2_t v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  int64x2_t v2 = vsubq_s64(v8, v10);
  unsigned int v3 = this[13];
  int64x2_t v4 = v3[13];
  int64x2_t v5 = vaddq_s64(v3[12], v2);
  int64x2_t v8 = v2;
  int64x2_t v9 = vsubq_s64(v9, v11);
  int64x2_t v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + 58) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

uint64_t FstSearchLateLatticeBackoff::generateTraceTokensForLateLattice(FstSearchLateLatticeBackoff *this)
{
  uint64_t v1 = this;
  v131[1] = 0;
  uint64_t v132 = 0;
  int v133 = 0;
  v131[0] = 0;
  FstSearchLateLatticeHashBackoff::getTraceTimeBoundaries((uint64_t)this, &v132, (uint64_t)v131);
  uint64_t v129 = 0;
  int v130 = 0;
  uint64_t v127 = 0;
  int v128 = 0;
  v126[0] = 0;
  v126[1] = 0;
  int v125 = 1879048192;
  int v2 = (*(uint64_t (**)(FstSearchLateLatticeBackoff *, uint64_t *, uint64_t *, int *, void *))(*(void *)v1 + 80))(v1, &v129, &v127, &v125, v126);
  int v9 = *((_DWORD *)v1 + 7);
  int v10 = *((_DWORD *)v1 + 2);
  uint64_t v122 = -1;
  __int16 v124 = 256;
  __int16 v123 = *((_WORD *)v1 + 34);
  if (v2)
  {
    __int16 v120 = 0;
    uint64_t v121 = 0;
    int64x2_t v11 = (uint64_t *)((char *)v1 + 160);
    uint64_t v12 = *((unsigned int *)v1 + 42);
    if (v12)
    {
      unsigned int v13 = 0;
      int v105 = (uint64_t *)((char *)v1 + 160);
      int v102 = v10;
      int v103 = v9;
      while (1)
      {
        while (1)
        {
          while (1)
          {
            --v12;
            uint64_t v14 = *v11;
            if (*(unsigned char *)(v129 + v12)) {
              break;
            }
            *(_DWORD *)(v14 + 36 * v12 + 8) = -1;
            if (!v12) {
              goto LABEL_77;
            }
          }
          uint64_t v15 = (unsigned int *)(v14 + 36 * v12);
          uint64_t v16 = *v15;
          uint64_t v17 = *((void *)v1 + 6);
          if (*(_DWORD *)(v17 + 388) > v16 && *(unsigned char *)(*(void *)(v17 + 104) + v16)) {
            __int16 v18 = *(_WORD *)(*(void *)(v17 + 72) + 2 * *(unsigned int *)(*(void *)(v17 + 48) + 4 * v16));
          }
          else {
            __int16 v18 = 0;
          }
          uint64_t v19 = *((void *)v1 + 11);
          int v20 = *(_DWORD *)(v19 + 4 * v15[1]);
          unsigned int v22 = v15[2];
          unsigned int v21 = v15 + 2;
          uint64_t v23 = *((void *)v1 + 22);
          int v24 = *((_DWORD *)v1 + 3);
          int v25 = *(_DWORD *)(v126[0] + 4 * v12);
          HIWORD(v122) = v18;
          uint64_t v109 = (int32x2_t *)(v23 + 16 * v22);
          unsigned __int32 v26 = v109[1].u32[1];
          if ((v26 & 0x80000000) == 0) {
            break;
          }
          *unsigned int v21 = v13;
          if (v13 == HIDWORD(v121))
          {
            DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v120, 1, 1);
            unsigned int v13 = v121;
          }
          *((_OWORD *)v120 + v13) = *(_OWORD *)v109->i8;
          unsigned int v13 = v121 + 1;
          LODWORD(v121) = v121 + 1;
          *(_DWORD *)(*v11 + 36 * v12 + 12) = 1;
          if (!v12) {
            goto LABEL_77;
          }
        }
        uint64_t v110 = v12;
        uint64_t v113 = v109[1].u32[1];
        uint64_t v27 = v14 + 36 * v26;
        uint64_t v28 = *(unsigned int *)(v27 + 4);
        unint64_t v29 = v28 ? *(unsigned int *)(v132 + 4 * (v28 - 1)) : 0;
        int v114 = v24 + v125 - v25;
        uint64_t v108 = (int32x2_t *)(v23 + 16 * *(unsigned int *)(v27 + 8));
        int v107 = v20 + v109->i32[0] - *(_DWORD *)(v19 + 4 * v28) - v108->i32[0];
        int v106 = v108->i32[0] - *(_DWORD *)(v131[0] + 4 * v28);
        unsigned int v30 = v13;
        if (v29 < *(unsigned int *)(v132 + 4 * v28)) {
          break;
        }
LABEL_42:
        if (v13 >= v30)
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 150, (uint64_t)"fst/fstsrch", 2, (uint64_t)"%s", v7, v8, (char)&unk_214099300);
          unsigned int v30 = v121;
        }
        mrec_qsort_r<FstSearchLateLatticeHashBackoffcmpTokLmhst>((char *)v120 + 16 * v13, v30 - v13, 16);
        unint64_t v45 = v13 + 1;
        unsigned int v46 = v121;
        if (v45 < v121)
        {
          uint64_t v47 = 16 * (v13 + 1);
          unsigned int v48 = v13;
          do
          {
            if (*(_DWORD *)((char *)v120 + v47 + 8) != *((_DWORD *)v120 + 4 * v48 + 2))
            {
              *((_OWORD *)v120 + ++v48) = *(_OWORD *)((char *)v120 + v47);
              unsigned int v46 = v121;
            }
            ++v45;
            v47 += 16;
          }
          while (v45 < v46);
          LODWORD(v45) = v48 + 1;
        }
        unsigned int v49 = (char *)v120;
        if (HIDWORD(v121) < v45)
        {
          int v118 = 0;
          HIDWORD(v121) = realloc_array(v120, &v118, 16 * v45, 16 * v46, 16 * v46, 1) >> 4;
          unsigned int v49 = (char *)v118;
          __int16 v120 = v118;
          unsigned int v46 = v121;
        }
        if (v46 < v45)
        {
          unint64_t v50 = v45 - (unint64_t)v46;
          unsigned int v51 = &v49[16 * v46];
          do
          {
            *(_OWORD *)unsigned int v51 = xmmword_2140992A0;
            v51 += 16;
            --v50;
          }
          while (v50);
        }
        LODWORD(v121) = v45;
        mrec_qsort_r<FstSearchLateLatticeHashBackoffcmpTok>(&v49[16 * v13], v45 - v13, 16);
        uint64_t v52 = 16 * v13;
        int v53 = v114;
        if (*(_DWORD *)((char *)v120 + v52) + v10 < v114) {
          int v53 = *((_DWORD *)v120 + 4 * v13) + v10;
        }
        unsigned int v54 = v121;
        unsigned int v55 = *((_DWORD *)v1 + 5) + v13;
        if (v121 < v55) {
          unsigned int v55 = v121;
        }
        uint64_t v56 = *((void *)v1 + 20);
        *(_DWORD *)(v56 + 36 * v110 + 8) = v13;
        if (v13 >= v55)
        {
          unsigned int v60 = v13;
        }
        else
        {
          while (*(_DWORD *)((char *)v120 + v52) <= v53)
          {
            uint64_t v57 = *(unsigned int *)((char *)v120 + v52 + 12);
            if ((v57 & 0x80000000) == 0)
            {
              *(unsigned char *)(v129 + v57) = 1;
              int v58 = v57 == v113 ? 0 : v106 + v9;
              int v59 = v58 + v107 + *(_DWORD *)(v126[0] + 4 * v110);
              if (*(_DWORD *)(v126[0] + 4 * v57) > v59) {
                *(_DWORD *)(v126[0] + 4 * v57) = v59;
              }
            }
            ++v13;
            v52 += 16;
            if (v55 == v13)
            {
              unsigned int v13 = v55;
              break;
            }
          }
          uint64_t v56 = *v11;
          unsigned int v60 = *(_DWORD *)(*v11 + 36 * v110 + 8);
          unsigned int v54 = v121;
        }
        *(_DWORD *)(v56 + 36 * v110 + 12) = v13 - v60;
        if (HIDWORD(v121) < v13)
        {
          int v118 = 0;
          HIDWORD(v121) = realloc_array(v120, &v118, 16 * v13, 16 * v54, 16 * v54, 1) >> 4;
          __int16 v120 = v118;
          unsigned int v54 = v121;
        }
        if (v54 < v13)
        {
          unint64_t v61 = v13 - (unint64_t)v54;
          int v62 = (char *)v120 + 16 * v54;
          do
          {
            *v62++ = xmmword_2140992A0;
            --v61;
          }
          while (v61);
        }
        LODWORD(v121) = v13;
        if (!v110)
        {
LABEL_77:
          int64x2_t v63 = v120;
          int v64 = HIDWORD(v121);
          unsigned int v65 = *((_DWORD *)v1 + 42);
          goto LABEL_79;
        }
      }
      uint64_t v104 = v12;
      unsigned int v112 = v106 + v9;
      int v111 = v20 + v109->i32[0] - v108->i32[0];
      uint64_t v31 = 36 * v29;
      while (1)
      {
        if (v113 == v29) {
          unsigned int v32 = 0;
        }
        else {
          unsigned int v32 = v112;
        }
        uint64_t v33 = *((void *)v1 + 20);
        int v34 = (_OWORD *)(*((void *)v1 + 22) + 16 * *(unsigned int *)(v33 + v31 + 8));
        if ((int)(v111 + v32 + *(_DWORD *)v34) <= v114)
        {
          int v35 = (ArcGraph **)v1;
          int v36 = *(_DWORD *)(v33 + 36 * v110);
          int v37 = *(_DWORD *)(v33 + v31);
          BOOL v38 = v37 != 16777209
             && ArcGraph::lexToCWID(v35[5], *(_DWORD *)(v33 + v31), v3, v4, v5, v6, v7, v8) >> 25 != 126;
          if (v36 == 16777209)
          {
            uint64_t v1 = (FstSearchLateLatticeBackoff *)v35;
            if (v38) {
              goto LABEL_35;
            }
          }
          else
          {
            BOOL v39 = v36 == 16777214 || v37 == 16777213;
            uint64_t v1 = (FstSearchLateLatticeBackoff *)v35;
            if (!v39)
            {
LABEL_35:
              BOOL isLexPelPhnMatch = FstSearchLateLatticeHashBackoff::isLexPelPhnMatch((uint64_t)v1, v29, (uint64_t)&v122);
              uint64_t v1 = (FstSearchLateLatticeBackoff *)v35;
              if (isLexPelPhnMatch)
              {
                uint64_t v41 = v121;
                if (v121 == (unint64_t)HIDWORD(v121))
                {
                  DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v120, 1, 1);
                  uint64_t v41 = v121;
                  uint64_t v1 = (FstSearchLateLatticeBackoff *)v35;
                }
                *((_OWORD *)v120 + v41) = *v34;
                uint64_t v42 = v121;
                LODWORD(v121) = v121 + 1;
                __int16 v43 = (int32x2_t *)((char *)v120 + 16 * v42);
                v43[1].i32[1] = v29;
                *__int16 v43 = vadd_s32(vsub_s32(vadd_s32(*v109, vdup_n_s32(v32)), *v108), *v43);
                int v44 = *(_DWORD *)(*v105 + 36 * v110);
                if (v44 != 16777209) {
                  v43[1].i32[0] = v44 + 2 * v43[1].i32[0] + 1;
                }
              }
            }
          }
        }
        ++v29;
        v31 += 36;
        if (v29 >= *(unsigned int *)(v132 + 4 * v28))
        {
          unsigned int v30 = v121;
          uint64_t v12 = v104;
          int64x2_t v11 = v105;
          int v10 = v102;
          int v9 = v103;
          goto LABEL_42;
        }
      }
    }
    unsigned int v65 = 0;
    unsigned int v13 = 0;
    int v64 = 0;
    int64x2_t v63 = 0;
LABEL_79:
    int64x2_t v66 = (void *)*((void *)v1 + 22);
    *((void *)v1 + 22) = v63;
    __int16 v120 = v66;
    int v67 = *((_DWORD *)v1 + 47);
    *((_DWORD *)v1 + 46) = v13;
    *((_DWORD *)v1 + 47) = v64;
    LODWORD(v121) = 0;
    HIDWORD(v121) = v67;
    unsigned int v119 = 0;
    int v118 = 0;
    if (v65)
    {
      int64x2_t v68 = MemChunkAlloc(4 * v65, 0);
      int v118 = v68;
      unsigned int v119 = v65;
      if (*((_DWORD *)v1 + 42))
      {
        uint64_t v69 = 0;
        unint64_t v70 = 0;
        unsigned int v65 = 0;
        do
        {
          int64x2_t v71 = (long long *)(*v11 + v69);
          if (*((_DWORD *)v71 + 2) == -1)
          {
            *((_DWORD *)v68 + v70) = -1;
          }
          else
          {
            if (v70 != v65)
            {
              uint64_t v72 = *v11 + 36 * v65;
              long long v73 = *v71;
              long long v74 = v71[1];
              *(_WORD *)(v72 + 32) = *((_WORD *)v71 + 16);
              *(_OWORD *)uint64_t v72 = v73;
              *(_OWORD *)(v72 + 16) = v74;
            }
            *((_DWORD *)v68 + v70) = v65++;
          }
          ++v70;
          unint64_t v75 = *((unsigned int *)v1 + 42);
          v69 += 36;
        }
        while (v70 < v75);
        unsigned int v76 = *((_DWORD *)v1 + 43);
        if (v65 > v76)
        {
          DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)v11, v65 - v76, 0);
          LODWORD(v75) = *((_DWORD *)v1 + 42);
        }
        if (v75 < v65)
        {
          unint64_t v77 = v65 - (unint64_t)v75;
          uint64_t v78 = (_WORD *)(*v11 + 36 * v75 + 32);
          do
          {
            *((_OWORD *)v78 - 2) = xmmword_2140992B0;
            *((_OWORD *)v78 - 1) = xmmword_2140992C0;
            *uint64_t v78 = -2;
            v78 += 18;
            --v77;
          }
          while (v77);
        }
      }
      else
      {
        unsigned int v65 = 0;
      }
    }
    *((_DWORD *)v1 + 42) = v65;
    uint64_t v79 = *((unsigned int *)v1 + 46);
    if (v79)
    {
      int v80 = v118;
      uint64_t v81 = (_DWORD *)(*((void *)v1 + 22) + 12);
      do
      {
        uint64_t v82 = *v81;
        if ((v82 & 0x80000000) == 0) {
          _DWORD *v81 = v80[v82];
        }
        v81 += 4;
        --v79;
      }
      while (v79);
    }
    DgnArray<FstSearchLateLatticeHashBackoffActiveToken>::DgnArray(&v115, *((unsigned int *)v1 + 50));
    unint64_t v83 = *((unsigned int *)v1 + 50);
    if (v83)
    {
      uint64_t v84 = 0;
      unint64_t v85 = 0;
      unsigned int v86 = 0;
      __int16 v87 = v118;
      int v88 = v115;
      do
      {
        uint64_t v89 = *((unsigned int *)v1 + 38);
        if (v86 < v89 && v85 == v89) {
          *((_DWORD *)v1 + 38) = v86;
        }
        int64x2_t v91 = (long long *)(*((void *)v1 + 24) + v84);
        uint64_t v92 = *((unsigned int *)v91 + 2);
        if (v92 == -1 || v87[v92] != -1)
        {
          int64x2_t v93 = (char *)&v88[6 * v86];
          long long v94 = *v91;
          *((void *)v93 + 2) = *((void *)v91 + 2);
          *(_OWORD *)int64x2_t v93 = v94;
          uint64_t v95 = *(unsigned int *)(*((void *)v1 + 24) + v84 + 8);
          if (v95 != -1) {
            LODWORD(v95) = v87[v95];
          }
          v88[6 * v86++ + 2] = v95;
          unint64_t v83 = *((unsigned int *)v1 + 50);
        }
        ++v85;
        v84 += 24;
      }
      while (v85 < v83);
    }
    else
    {
      unsigned int v86 = 0;
    }
    if (v86 < *((_DWORD *)v1 + 38)) {
      *((_DWORD *)v1 + 38) = v86;
    }
    LODWORD(v96) = v117;
    int64x2_t v97 = (char *)v115;
    if (v117 < v86)
    {
      int64x2_t v134 = 0;
      unint64_t v96 = realloc_array(v115, &v134, 24 * v86, 24 * v116, 24 * v116, 1) / 0x18;
      int64x2_t v97 = (char *)v134;
    }
    if (v116 < v86)
    {
      unint64_t v98 = v86 - (unint64_t)v116;
      int64x2_t v99 = &v97[24 * v116 + 16];
      do
      {
        *((void *)v99 - 2) = 0xFFFFFFFF00000000;
        *((_DWORD *)v99 - 2) = -1;
        *((_WORD *)v99 - 2) = -2;
        *(void *)int64x2_t v99 = 0;
        v99 += 24;
        --v98;
      }
      while (v98);
    }
    int64x2_t v100 = (void *)*((void *)v1 + 24);
    *((void *)v1 + 24) = v97;
    unint64_t v115 = v100;
    LODWORD(v100) = *((_DWORD *)v1 + 51);
    *((_DWORD *)v1 + 50) = v86;
    *((_DWORD *)v1 + 51) = v96;
    unsigned int v116 = 0;
    unsigned int v117 = v100;
    DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v115);
    DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v118);
    DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v120);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v126);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v127);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v129);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v131);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v132);
}

void sub_213E596D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&a25);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a27);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a31);
  DgnPrimFixArray<double>::~DgnPrimFixArray(v31 - 160);
  DgnPrimFixArray<double>::~DgnPrimFixArray(v31 - 144);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v31 - 128);
  DgnPrimFixArray<double>::~DgnPrimFixArray(v31 - 112);
  _Unwind_Resume(a1);
}

void FstSearchLateLatticeBackoff::printSize(FstSearchLateLatticeBackoff *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v116);
  if (v117) {
    uint64_t v16 = v116;
  }
  else {
    uint64_t v16 = &unk_214099300;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_214099300, a3, &unk_214099300, v16);
  DgnString::~DgnString((DgnString *)&v116);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_214099300);
  uint64_t v21 = (a3 + 1);
  uint64_t v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v116);
  if (v117) {
    uint64_t v27 = v116;
  }
  else {
    uint64_t v27 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v116);
  if (v117) {
    unsigned int v32 = v116;
  }
  else {
    unsigned int v32 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v116);
  if (v117) {
    int v37 = v116;
  }
  else {
    int v37 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v37, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v116);
  if (v117) {
    uint64_t v42 = v116;
  }
  else {
    uint64_t v42 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v42, 4, 4, 0);
  uint64_t v111 = a2;
  unsigned int v112 = a6;
  uint64_t v113 = a3;
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  uint64_t v43 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v43 = 16;
  }
  uint64_t v44 = *((unsigned int *)this + 42);
  uint64_t v45 = 24 * v44;
  if ((int)v44 <= 0) {
    uint64_t v45 = 0;
  }
  uint64_t v46 = v45 + v43;
  uint64_t v47 = v45 + v43 + 24 * (*((_DWORD *)this + 43) - v44);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v116);
  if (v117) {
    uint64_t v52 = v116;
  }
  else {
    uint64_t v52 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, v21, &unk_214099300, v22, v22, v52, v47, v46, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v47;
  *a5 += v46;
  uint64_t v53 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v53 = 16;
  }
  uint64_t v54 = *((unsigned int *)this + 46);
  uint64_t v55 = 16 * v54;
  if ((int)v54 <= 0) {
    uint64_t v55 = 0;
  }
  uint64_t v56 = v55 + v53;
  uint64_t v57 = v55 + v53 + 16 * (*((_DWORD *)this + 47) - v54);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v116);
  if (v117) {
    int v62 = v116;
  }
  else {
    int v62 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, v21, &unk_214099300, v22, v22, v62, v57, v56, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v57;
  *a5 += v56;
  uint64_t v63 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v63 = 16;
  }
  int v64 = *((_DWORD *)this + 50);
  uint64_t v65 = 22 * v64;
  if (v64 <= 0) {
    uint64_t v65 = 0;
  }
  uint64_t v66 = v65 + v63;
  uint64_t v67 = v65 + v63 + 22 * (*((_DWORD *)this + 51) - v64);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v116);
  if (v117) {
    uint64_t v72 = v116;
  }
  else {
    uint64_t v72 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, v21, &unk_214099300, v22, v22, v72, v67, v66, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v67;
  *a5 += v66;
  uint64_t v73 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v73 = 16;
  }
  int v74 = *((_DWORD *)this + 54);
  uint64_t v75 = 22 * v74;
  if (v74 <= 0) {
    uint64_t v75 = 0;
  }
  uint64_t v76 = v75 + v73;
  uint64_t v77 = v75 + v73 + 22 * (*((_DWORD *)this + 55) - v74);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v116);
  if (v117) {
    uint64_t v82 = v116;
  }
  else {
    uint64_t v82 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, v21, &unk_214099300, v22, v22, v82, v77, v76, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v77;
  *a5 += v76;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v116);
  if (v117) {
    __int16 v87 = v116;
  }
  else {
    __int16 v87 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v83, v84, v85, v86, v21, &unk_214099300, v22, v22, v87, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v116);
  if (v117) {
    uint64_t v92 = v116;
  }
  else {
    uint64_t v92 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, v21, &unk_214099300, v22, v22, v92, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v116);
  if (v117) {
    int64x2_t v97 = v116;
  }
  else {
    int64x2_t v97 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v93, v94, v95, v96, v21, &unk_214099300, v22, v22, v97, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  uint64_t v98 = sizeObject((uint64_t)this + 240, 0);
  uint64_t v99 = sizeObject((uint64_t)this + 240, 1);
  uint64_t v100 = sizeObject((uint64_t)this + 240, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v116);
  if (v117) {
    int v105 = v116;
  }
  else {
    int v105 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v101, v102, v103, v104, v21, &unk_214099300, v22, v22, v105, v98, v99, v100);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v98;
  *a5 += v99;
  *v112 += v100;
  unint64_t v114 = 0;
  unint64_t v115 = 0;
  SearchItf::printSize(this, v111, v21, &v115, &v114, &v114);
  *a4 += v115;
  *a5 += v114;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v116);
  if (v117) {
    uint64_t v110 = v116;
  }
  else {
    uint64_t v110 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v106, v107, v108, v109, v113, &unk_214099300, (35 - v113), (35 - v113), v110, *a4, *a5, *v112);
  DgnString::~DgnString((DgnString *)&v116);
}

void sub_213E59E9C(_Unwind_Exception *a1)
{
  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

BOOL FstSearchLateLatticeBackoff::findBestPath(uint64_t a1, uint64_t **a2, uint64_t a3, int *a4, uint64_t a5)
{
  unint64_t v10 = *(unsigned int *)(a1 + 168);
  if (v10) {
    BOOL v11 = *(_DWORD *)(a3 + 8) == 0;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    *(void *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v10;
  }
  if (v10) {
    BOOL v12 = *((_DWORD *)a2 + 2) == 0;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12)
  {
    *a2 = MemChunkAlloc(v10, 0);
    *((_DWORD *)a2 + 2) = v10;
  }
  else if (!v10)
  {
    goto LABEL_16;
  }
  uint64_t v13 = 0;
  do
  {
    *((unsigned char *)*a2 + v13) = 0;
    *(unsigned char *)(*(void *)a3 + v13++) = 0;
  }
  while (v10 != v13);
LABEL_16:
  unsigned int BestTrace = FstSearchLateLatticeHashBackoff::getBestTrace(a1, a2, (void *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1)
  {
    int v20 = 1879048192;
  }
  else
  {
    uint64_t v15 = *(void *)(a1 + 160);
    uint64_t v16 = v15 + 36 * BestTrace;
    unsigned int v18 = *(_DWORD *)(v16 + 4);
    uint64_t v17 = (int *)(v16 + 4);
    int v19 = v17[3] + *(_DWORD *)(*(void *)(a1 + 88) + 4 * v18);
    *a4 = v19;
    int v20 = 1879048192;
    if (v19 != 1879048192)
    {
      int v21 = *(_DWORD *)(a1 + 168);
      if (v21)
      {
        unsigned int v22 = v21 - 1;
        int v23 = 1879048192;
        int v24 = *v17;
        do
        {
          uint64_t v25 = v22;
          if (*(_DWORD *)(v15 + 36 * v22 + 4) == v24
            && *(_DWORD *)(v15 + 36 * v22) == 16777213
            && !*((unsigned char *)*a2 + v22))
          {
            *((unsigned char *)*a2 + v22) = 2;
            *(unsigned char *)(*(void *)a3 + v22) = 1;
            uint64_t v15 = *(void *)(a1 + 160);
            if (v23 >= *(_DWORD *)(*(void *)(a1 + 176) + 16 * *(unsigned int *)(v15 + 36 * v22 + 8))
                      + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v15 + 36 * v22 + 4)))
              int v23 = *(_DWORD *)(*(void *)(a1 + 176) + 16 * *(unsigned int *)(v15 + 36 * v22 + 8))
                  + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v15 + 36 * v22 + 4));
          }
          --v22;
        }
        while (v25);
        int v19 = *a4;
        unsigned int v26 = *(_DWORD *)(a1 + 168);
      }
      else
      {
        unsigned int v26 = 0;
        int v23 = 1879048192;
      }
      int v27 = *(_DWORD *)(a1 + 28);
      BOOL v28 = __OFSUB__(v19, v23);
      int v29 = v19 - v23;
      if ((v29 < 0) ^ v28 | (v29 == 0)) {
        int v30 = 0;
      }
      else {
        int v30 = v29;
      }
      unsigned int v31 = *(_DWORD *)(a5 + 12);
      unsigned int v32 = v26;
      if (v26 > v31)
      {
        DgnPrimArray<unsigned int>::reallocElts(a5, v26 - v31, 0);
        unsigned int v32 = *(_DWORD *)(a1 + 168);
      }
      *(_DWORD *)(a5 + 8) = v26;
      int v20 = *a4;
      if (v32)
      {
        uint64_t v33 = 0;
        unint64_t v34 = 0;
        int v35 = v20 - (v30 + v27) + *(_DWORD *)(a1 + 12);
        do
        {
          uint64_t v36 = *a2;
          int v37 = *((unsigned __int8 *)*a2 + v34);
          if (v37 == 2)
          {
            uint64_t v38 = *(void *)a5;
            if (*(_DWORD *)(*(void *)(a1 + 176) + 16 * *(unsigned int *)(*(void *)(a1 + 160) + v33 + 8))
               + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(*(void *)(a1 + 160) + v33 + 4)) <= v35)
            {
              *(_DWORD *)(v38 + 4 * v34) = v30 + v27;
              *((unsigned char *)v36 + v34) = 1;
            }
            else
            {
              *(_DWORD *)(v38 + 4 * v34) = 1879048192;
              *((unsigned char *)v36 + v34) = 0;
            }
          }
          else if (v37 == 1)
          {
            *(_DWORD *)(*(void *)a5 + 4 * v34) = 0;
          }
          else
          {
            *(_DWORD *)(*(void *)a5 + 4 * v34) = 1879048192;
          }
          ++v34;
          v33 += 36;
        }
        while (v34 < *(unsigned int *)(a1 + 168));
        int v20 = *a4;
      }
    }
  }
  return v20 != 1879048192;
}

uint64_t FstSearchLateLatticeBackoff::buildWordLattice(uint64_t a1, uint64_t *a2, void *a3, void *a4, char a5)
{
  uint64_t v28 = 0;
  int v29 = 0;
  int v30 = 0;
  uint64_t v27 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v26, *(unsigned int *)(a1 + 168));
  int v9 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v9, 0, 128);
  v9[4] = (uint64_t)a2;
  FstSearchLateLatticeHashBackoff::createLatticeNodes(a1, &v29, (uint64_t)&v27, (uint64_t)a2, v26, a3, a4);
  uint64_t v23 = (uint64_t)v9;
  uint64_t v24 = *(unsigned int *)(a1 + 168);
  if (v24)
  {
    uint64_t v11 = 0;
    int v12 = v28;
    do
    {
      if (*(unsigned char *)(*a3 + v11))
      {
        uint64_t v13 = *(void *)(a1 + 160);
        if (*(_DWORD *)(v13 + 36 * v11) != 16777209 && *(int *)(v13 + 36 * v11 + 12) >= 1)
        {
          int v14 = *(_DWORD *)(v13 + 36 * v11 + 8);
          do
          {
            uint64_t v15 = *(void *)(a1 + 176) + 16 * v14;
            uint64_t v16 = *(unsigned int *)(v15 + 12);
            if (v16 == -1) {
              unsigned int v17 = 0;
            }
            else {
              unsigned int v17 = v12 - *((_DWORD *)v29 + v16);
            }
            uint64_t v18 = *(unsigned int *)(v27 + 4 * v17);
            if (*(unsigned char *)(*a4 + v11)) {
              FstSearchLateLatticeBackoff::createLatticeLink(a1, v11, (int *)v15, 0xFFFFFFFFLL, v18, (const WordLatticeLC *)*(unsigned int *)(v27 + 4 * (v12 - *((_DWORD *)v29 + v11))), a2, v10, a5);
            }
            uint64_t v19 = v26[0];
            if (*(_DWORD *)(v26[0] + 16 * v11 + 8))
            {
              unint64_t v20 = 0;
              do
              {
                uint64_t v21 = *(unsigned int *)(*(void *)(v19 + 16 * v11) + 4 * v20);
                FstSearchLateLatticeBackoff::createLatticeLink(a1, v11, (int *)v15, v21, v18, (const WordLatticeLC *)*(unsigned int *)(v27 + 4 * (v12 - *((_DWORD *)v29 + v21))), a2, v10, a5);
                ++v20;
                uint64_t v19 = v26[0];
              }
              while (v20 < *(unsigned int *)(v26[0] + 16 * v11 + 8));
            }
            ++v14;
          }
          while (v14 < *(_DWORD *)(*(void *)(a1 + 160) + 36 * v11 + 12)
                      + *(_DWORD *)(*(void *)(a1 + 160) + 36 * v11 + 8));
        }
      }
      ++v11;
    }
    while (v11 != v24);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>(v23);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v26);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v27);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v29);
}

void sub_213E5A3D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearchLateLatticeBackoff::createLatticeLink(uint64_t a1, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, const WordLatticeLC *a6, uint64_t *a7, uint64_t a8, char a9)
{
  unsigned int v11 = a5;
  unsigned int v12 = a4;
  uint64_t v16 = *(void *)(a1 + 160);
  if ((a4 & 0x80000000) != 0 || (uint64_t v17 = v16 + 36 * a4, v18 = *(_DWORD *)(v17 + 12), v18 < 1))
  {
    unsigned int v22 = 0;
  }
  else
  {
    unsigned int v19 = *(_DWORD *)(v17 + 8);
    int v20 = v18 + v19;
    do
    {
      uint64_t v21 = *(void *)(a1 + 176);
      if (*(_DWORD *)(v21 + 16 * v19 + 12) == a2) {
        unsigned int v22 = (_DWORD *)(v21 + 16 * v19);
      }
      else {
        unsigned int v22 = 0;
      }
      ++v19;
    }
    while ((int)v19 < v20 && !v22);
  }
  ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *(_DWORD *)(v16 + 36 * a2), (uint64_t)a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8, (uint64_t)v46);
  int v23 = a3[1];
  if (v22)
  {
    v23 += v22[1];
    int v24 = *v22 + *a3;
  }
  else
  {
    int v24 = *a3;
  }
  if (v46[0] >> 25 == 126)
  {
    int v25 = 0;
    int v26 = v23;
  }
  else
  {
    int v25 = *(_DWORD *)(a1 + 136);
    int v26 = v23 - v25;
  }
  int v27 = v24 - v23;
  if ((v12 & 0x80000000) != 0)
  {
    int v28 = 0;
  }
  else
  {
    int v28 = *(_DWORD *)(a1 + 140);
    v26 -= v28;
  }
  int v40 = v26;
  uint64_t v41 = 0;
  int v42 = v25;
  int v43 = v27;
  int v44 = 0;
  int v45 = v28;
  unsigned int v29 = a3[3];
  uint64_t v30 = *(void *)(a1 + 160);
  if (v29 == -1)
  {
    int v32 = 0;
    if (a9) {
      goto LABEL_26;
    }
  }
  else
  {
    int v31 = *(_DWORD *)(v30 + 36 * v29 + 4);
    if (a9)
    {
      if (v31 >= 1) {
        --v31;
      }
      int v32 = (v31 >> 1) + 1;
LABEL_26:
      int v33 = *(_DWORD *)(v30 + 36 * a2 + 4);
      if (v33 >= 1) {
        --v33;
      }
      int v34 = v33 >> 1;
      int v35 = v34 - v32 + 1;
      if ((v12 & 0x80000000) == 0)
      {
        int v36 = *(_DWORD *)(v30 + 36 * v12 + 4);
        if (v36 >= 1) {
          --v36;
        }
        int v37 = v36 >> 1;
        goto LABEL_35;
      }
LABEL_36:
      int v38 = 0;
      goto LABEL_37;
    }
    int v32 = v31 + 1;
  }
  int v34 = *(_DWORD *)(v30 + 36 * a2 + 4);
  int v35 = v34 - v32 + 1;
  if ((v12 & 0x80000000) != 0) {
    goto LABEL_36;
  }
  int v37 = *(_DWORD *)(v30 + 36 * v12 + 4);
LABEL_35:
  int v38 = v37 - v34;
LABEL_37:
  WordLatticeLC::WordLatticeLC((uint64_t)v39, (uint64_t)v46, v32, v35, v38, (uint64_t)&v40);
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v11, a6, (WordLatticeLC *)v39);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v39);
}

void sub_213E5A61C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)va);
  _Unwind_Resume(a1);
}

uint64_t FstSearchLateLatticeBackoff::beginTopRecSyncRecog(uint64_t this, VirtMap *a2)
{
  *(void *)(this + 112) = a2;
  if (*(unsigned char *)(this + 356)) {
    return MiniFst::beginTopFstSyncRecog(this + 240);
  }
  return this;
}

uint64_t FstSearchLateLatticeBackoff::endTopRecSyncRecog(FstSearchLateLatticeBackoff *this)
{
  uint64_t v1 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  return v1;
}

uint64_t FstSearchLateLatticeBackoff::getBestExitScore(FstSearchLateLatticeBackoff *this)
{
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  *((_DWORD *)this + 57) = -1;
  unint64_t v1 = *((unsigned int *)this + 38);
  unint64_t v2 = *((unsigned int *)this + 50);
  if (v1 >= v2) {
    goto LABEL_16;
  }
  uint64_t v4 = 0;
  unsigned int v5 = 0;
  uint64_t v6 = 24 * v1;
  do
  {
    uint64_t v7 = *((void *)this + 24) + v6;
    if (*(_DWORD *)(*((void *)this + 5) + 160) == *(_DWORD *)(v7 + 4))
    {
      unsigned int v8 = *(_DWORD *)(v7 + 8);
      if (v8 != -1 && *(_DWORD *)(*((void *)this + 20) + 36 * v8 + 4) == *((_DWORD *)this + 56))
      {
        if (v5 == HIDWORD(v18))
        {
          DgnPrimArray<unsigned int>::reallocElts((uint64_t)&v17, 1, 1);
          unsigned int v5 = v18;
          uint64_t v4 = v17;
        }
        v4[v5] = v8;
        unsigned int v5 = v18 + 1;
        LODWORD(v18) = v18 + 1;
        unint64_t v2 = *((unsigned int *)this + 50);
      }
    }
    ++v1;
    v6 += 24;
  }
  while (v1 < v2);
  if (v5)
  {
    uint64_t v9 = *((void *)this + 20);
    uint64_t v10 = v5;
    int v11 = 1879048192;
    do
    {
      unsigned int v13 = *v4++;
      unsigned int v12 = v13;
      int v14 = *(_DWORD *)(v9 + 36 * v13 + 16);
      if (v11 > v14)
      {
        *((_DWORD *)this + 57) = *(_DWORD *)(v9 + 36 * v12 + 20);
        int v11 = v14;
      }
      --v10;
    }
    while (v10);
  }
  else
  {
LABEL_16:
    int v11 = 1879048192;
  }
  if (v11 >= 20000) {
    uint64_t v15 = 20000;
  }
  else {
    uint64_t v15 = v11;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v17);
  return v15;
}

void sub_213E5A7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t FstSearchLateLatticeBackoff::getBestScoreMaybeUpdateFstNode(FstSearchLateLatticeBackoff *this, Node *a2)
{
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v2 = *((unsigned int *)this + 50);
  if (v2)
  {
    uint64_t v3 = (int *)*((void *)this + 24);
    __int16 v4 = -1;
    int v5 = 1879048192;
    uint64_t v6 = v3;
    do
    {
      int v8 = *v6;
      v6 += 6;
      int v7 = v8;
      if (v5 > v8)
      {
        __int16 v4 = *((_WORD *)v3 + 6);
        int v5 = v7;
      }
      uint64_t v3 = v6;
      --v2;
    }
    while (v2);
    uint64_t v9 = 20000;
    if (v5 != 1879048192)
    {
      *((_WORD *)a2 + 5) = v5;
      *((_WORD *)a2 + 11) = v4;
      if (v5 >= 20000) {
        uint64_t v9 = 20000;
      }
      else {
        uint64_t v9 = v5;
      }
    }
  }
  else
  {
    uint64_t v9 = 20000;
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v11);
  return v9;
}

uint64_t FstSearchLateLatticeBackoff::seedTheory(FstSearchLateLatticeBackoff *this, int a2, int a3, int a4, SearchStats *a5)
{
  if (a4 == -2)
  {
    int v9 = *((_DWORD *)this + 42) - 1;
  }
  else
  {
    unsigned int v11 = *((_DWORD *)this + 42);
    if (v11 == *((_DWORD *)this + 43))
    {
      DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)this + 160, 1, 1);
      unsigned int v11 = *((_DWORD *)this + 42);
    }
    uint64_t v12 = *((void *)this + 20) + 36 * v11;
    *(_DWORD *)uint64_t v12 = a4;
    *(_DWORD *)(v12 + 4) = a3;
    *(void *)(v12 + 8) = 0xFFFFFFFFLL;
    *(_DWORD *)(v12 + 16) = a2;
    *(void *)(v12 + 20) = 0xFFFFFFFFLL;
    *(_DWORD *)(v12 + 28) = 0;
    *(_WORD *)(v12 + 32) = -2;
    int v9 = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = v9 + 1;
  }
  int v13 = *(_DWORD *)(*((void *)this + 5) + 144);
  unsigned int v14 = *((_DWORD *)this + 50);
  if (v14 == *((_DWORD *)this + 51))
  {
    DgnArray<CWIDAC>::reallocElts((uint64_t)this + 192, 1, 1);
    unsigned int v14 = *((_DWORD *)this + 50);
  }
  uint64_t v15 = *((void *)this + 24) + 24 * v14;
  *(_DWORD *)uint64_t v15 = a2;
  *(_DWORD *)(v15 + 4) = v13;
  *(_DWORD *)(v15 + 8) = v9;
  *(_WORD *)(v15 + 12) = -2;
  *(void *)(v15 + 16) = 0;
  LODWORD(v15) = *((_DWORD *)this + 50) + 1;
  *((_DWORD *)this + 50) = v15;
  *((_DWORD *)this + 38) = v15;

  return FstSearchLateLatticeHashBackoff::propagateNulls((uint64_t)this, 20000, a3, a5);
}

uint64_t FstSearchLateLatticeBackoff::expandEmbFstHistory(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(unsigned int *)(result + 228);
  if (v8 != -1)
  {
    uint64_t v9 = result;
    uint64_t v10 = (unsigned int *)(*(void *)(result + 160) + 36 * v8);
    for (i = v10[5]; i != -1; uint64_t v8 = v16)
    {
      uint64_t v16 = i;
      uint64_t result = *(void *)(v9 + 40);
      if (*v10 == 16777209)
      {
        int v17 = (*(unsigned __int16 *)(result + 174) << 25) | 0xFFFFF9;
      }
      else
      {
        uint64_t result = ArcGraph::lexToCWID((ArcGraph *)result, *v10, a3, (uint64_t)a4, a5, a6, a7, a8);
        int v17 = result;
      }
      uint64_t v18 = *(unsigned int *)(a2 + 8);
      if (v18 == *(_DWORD *)(a2 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a2, 1, 1);
        uint64_t v18 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(void *)a2 + 4 * v18) = v17;
      ++*(_DWORD *)(a2 + 8);
      uint64_t v19 = *(unsigned int *)(a6 + 8);
      if (v19 == *(_DWORD *)(a6 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a6, 1, 1);
        uint64_t v19 = *(unsigned int *)(a6 + 8);
      }
      *(_DWORD *)(*(void *)a6 + 4 * v19) = v8;
      ++*(_DWORD *)(a6 + 8);
      uint64_t v20 = *(void *)(v9 + 160);
      int v21 = *(_DWORD *)(v20 + 36 * v8 + 4);
      uint64_t v22 = *(unsigned int *)(a3 + 8);
      if (v22 == *(_DWORD *)(a3 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a3, 1, 1);
        uint64_t v22 = *(unsigned int *)(a3 + 8);
        uint64_t v20 = *(void *)(v9 + 160);
      }
      *(_DWORD *)(*(void *)a3 + 4 * v22) = v21;
      ++*(_DWORD *)(a3 + 8);
      int v23 = *(_DWORD *)(v20 + 36 * v8 + 16);
      uint64_t v24 = *(unsigned int *)(a5 + 8);
      if (v24 == *(_DWORD *)(a5 + 12))
      {
        uint64_t result = DgnPrimArray<unsigned int>::reallocElts(a5, 1, 1);
        uint64_t v24 = *(unsigned int *)(a5 + 8);
      }
      *(_DWORD *)(*(void *)a5 + 4 * v24) = v23;
      ++*(_DWORD *)(a5 + 8);
      uint64_t v10 = (unsigned int *)(*(void *)(v9 + 160) + 36 * v16);
      uint64_t i = v10[5];
    }
    *a4 = *v10;
  }
  return result;
}

void FstSearchLateLatticeBackoff::checkSearchParametersValidityForArcGraph(FstSearchLateLatticeBackoff *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *((void *)this + 5);
  if (*(unsigned char *)(v8 + 178))
  {
    int v9 = a3;
    ArcGraph::ensureHeaderValid(*((ArcGraph **)this + 5), "Header", a3, a4, a5, a6, a7, a8);
    if (*(unsigned char *)(v8 + 202) && *(_DWORD *)(v8 + 188) != *((_DWORD *)this + 35)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchInterWordSilencePenalty");
    }
    if (*(_DWORD *)(v8 + 192) != *((_DWORD *)this + 34)) {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"SearchPerWordPenalty");
    }
    if (*(_DWORD *)(v8 + 196) != *(_DWORD *)(*(void *)(**(void **)VocMgr::smpVocMgr
                                                        + 8 * *(unsigned __int16 *)(*((void *)this + 5) + 174))
                                            + 608))
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"Voc");
    if (v9)
    {
      if (a2)
      {
        if (!*(unsigned char *)(v8 + 203)) {
          return;
        }
      }
      else if (*(unsigned char *)(v8 + 203))
      {
        return;
      }
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"DropAlternateFrames");
    }
    else if ((a2 & 1) != 0 || *(unsigned char *)(v8 + 203))
    {
      errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 160, (uint64_t)"fst/fstsrch", 3, (uint64_t)"%.500s %d %d", v12, v13, (char)"NoDecimation");
    }
  }
}

uint64_t FstSearchLateLatticeBackoff::makePartialResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= 1)
  {
    uint64_t v9 = 112 * v8 - 112;
    do
    {
      (**(void (***)(uint64_t))(*(void *)a2 + v9))(*(void *)a2 + v9);
      v9 -= 112;
    }
    while (v9 != -112);
  }
  *(_DWORD *)(a2 + 8) = 0;
  unsigned int BestTrace = FstSearchLateLatticeHashBackoff::getBestTrace(a1, 0, 0, 1);
  if (BestTrace == -1) {
    return 1879048192;
  }
  unsigned int v15 = BestTrace;
  FstSearchLateLatticeHashBackoff::getHistory(a1, BestTrace, a3, a4, v11, v12, v13, v14);
  memset(v25, 0, sizeof(v25));
  int v26 = 0;
  if (*(_DWORD *)(a3 + 8))
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    int v18 = 0;
    do
    {
      uint64_t v19 = *(void *)a3 + v16;
      int v20 = *(_DWORD *)(v19 + 28);
      WordLatticeLC::WordLatticeLC((uint64_t)v24, v19, v18, *(_DWORD *)(v19 + 24) - v18, v20 - *(_DWORD *)(v19 + 24), (uint64_t)v25);
      uint64_t v21 = *(unsigned int *)(a2 + 8);
      if (v21 == *(_DWORD *)(a2 + 12))
      {
        DgnArray<WordLatticeLC>::reallocElts(a2, 1, 1);
        LODWORD(v21) = *(_DWORD *)(a2 + 8);
      }
      WordLatticeLC::WordLatticeLC((WordLatticeLC *)(*(void *)a2 + 112 * v21), (const WordLatticeLC *)v24);
      ++*(_DWORD *)(a2 + 8);
      WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v24);
      ++v17;
      v16 += 32;
      int v18 = v20;
    }
    while (v17 < *(unsigned int *)(a3 + 8));
  }
  uint64_t v22 = *(void *)(a1 + 160) + 36 * v15;
  return (*(_DWORD *)(v22 + 16) + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v22 + 4)));
}

void sub_213E5AE9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int64x2_t FstSearchLateLattice::advanceDeltas(FstSearchLateLattice *this, int a2, int a3, SearchStats *a4, int a5)
{
  int v7 = a2;
  v107[0] = a2;
  int64x2_t v105 = 0u;
  int64x2_t v106 = 0u;
  SnapTime::recordTime((SnapTime *)&v105, 1, 0, 0, 0);
  *((_DWORD *)this + 58) = a3;
  int v89 = *((_DWORD *)this + 2);
  uint64_t v84 = (int *)((char *)this + 232);
  unint64_t v9 = *((unsigned int *)this + 50);
  if (v9)
  {
    uint64_t v10 = 0;
    unsigned int v88 = 0;
    unint64_t v11 = 0;
    uint64_t v82 = (FstSearchLateLattice *)((char *)this + 240);
    uint64_t v83 = (char *)this + 208;
    do
    {
      uint64_t v12 = *((void *)this + 24);
      uint64_t v13 = *((void *)this + 5);
      uint64_t v14 = 24 * v11 + 20;
      while (1)
      {
        uint64_t v15 = *(unsigned int *)(v12 + v14 - 16);
        if (*(_DWORD *)(v13 + 160) != v15) {
          break;
        }
        ++v11;
        v14 += 24;
        if (v11 >= v9) {
          goto LABEL_44;
        }
      }
      int v79 = v7;
      uint64_t v78 = a4;
      if (*(_DWORD *)(v13 + 140) > (int)v15)
      {
        uint64_t v16 = v10;
        int v17 = *(_DWORD *)(v12 + v14 - 20);
        int v18 = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), *(unsigned __int16 *)(v12 + v14 - 8))
            + v17;
        int v19 = *((_DWORD *)this + 58);
        if (v18 - v89 <= v19)
        {
          if (v19 > v18) {
            int *v84 = v18;
          }
          uint64_t v20 = *((void *)this + 24) + v14;
          uint64_t v21 = *(void *)(v20 - 16);
          __int16 v22 = *(_WORD *)(v20 - 8);
          __int16 v23 = *(_WORD *)(v20 - 6);
          uint64_t v24 = *(void *)(v20 - 4);
          uint64_t v25 = *((unsigned int *)this + 54);
          if (v25 == *((_DWORD *)this + 55))
          {
            DgnArray<CWIDAC>::reallocElts((uint64_t)v83, 1, 1);
            LODWORD(v25) = *((_DWORD *)this + 54);
          }
          uint64_t v26 = *((void *)this + 26) + 24 * v25;
          *(_DWORD *)uint64_t v26 = v18;
          *(void *)(v26 + 4) = v21;
          *(_WORD *)(v26 + 12) = v22;
          *(_WORD *)(v26 + 14) = v23;
          *(void *)(v26 + 16) = v24;
          int v27 = *((_DWORD *)this + 54);
          *((_DWORD *)this + 54) = v27 + 1;
          if (v88 == 2 * *((_DWORD *)this + 4)) {
            uint64_t v10 = (v27 + 1);
          }
          else {
            uint64_t v10 = v16;
          }
          ++v88;
        }
        else
        {
          uint64_t v10 = v16;
        }
      }
      unsigned int v28 = v15;
      uint64_t v81 = this;
      do
      {
        uint64_t v29 = *((void *)this + 5);
        uint64_t v30 = *(void *)(v29 + 152);
        unsigned int v31 = *(_DWORD *)(v30 + 4 * v28);
        int v32 = *(_DWORD *)(v30 + 4 * (v28 + 1));
        int v33 = *(_DWORD *)(v29 + 140);
        if (v33 <= v32)
        {
          if (v33 <= (int)v15 && *((unsigned char *)this + 356) != 0)
          {
            unsigned int v49 = (v31 & 0xFFFFF) <= 0xFFFF3 ? v31 & 0xFFFFF : v31 & 0xFFFFF | 0xF00000;
            if (v49 != 16777210)
            {
              DgnString::DgnString((DgnString *)&v102);
              ArcGraph::getNameAndHumanReadablePron(*((ArcGraph **)this + 5), v49, (DgnString *)&v102, v50, v51, v52, v53, v54);
              uint64_t v59 = &unk_214099300;
              if (v102.i32[2]) {
                uint64_t v59 = (void *)v102.i64[0];
              }
              xprintf("Seed from state %d score %d trace %d, %s\n", v55, v56, v57, v58, v15, *(unsigned int *)(*((void *)this + 24) + v14 - 20), *(unsigned int *)(*((void *)this + 24) + v14 - 12), v59);
              MiniFst::seed((uint64_t)v82, *(_DWORD *)(*((void *)this + 24) + v14 - 20), *(_DWORD *)(*((void *)this + 24) + v14), *(_DWORD *)(*((void *)this + 24) + v14 - 12), v32);
              DgnString::~DgnString((DgnString *)&v102);
            }
          }
        }
        else
        {
          int v34 = (v31 >> 20) & 0x3FF;
          int ScoreNoBackoff = PelScoreCache::getScoreNoBackoff(*((PelScoreCache **)this + 4), (unsigned __int16)*(_DWORD *)(v30 + 4 * v28));
          uint64_t v36 = *((void *)this + 24);
          int v37 = ScoreNoBackoff + v34 + *(_DWORD *)(v36 + v14 - 20);
          int v38 = *((_DWORD *)this + 58);
          if (v37 - v89 <= v38)
          {
            unsigned int v87 = v10;
            if (v38 > v37) {
              int *v84 = v37;
            }
            uint64_t v39 = (_DWORD *)(v36 + v14);
            int v40 = *(v39 - 3);
            __int16 v41 = *((_WORD *)v39 - 3);
            int v43 = *(v39 - 1);
            int v42 = *v39;
            uint64_t v44 = *((unsigned int *)this + 54);
            if (v44 == *((_DWORD *)this + 55))
            {
              int v85 = v40;
              __int16 v86 = v41;
              int v45 = v42;
              DgnArray<CWIDAC>::reallocElts((uint64_t)v83, 1, 1);
              int v40 = v85;
              __int16 v41 = v86;
              int v42 = v45;
              this = v81;
              LODWORD(v44) = *((_DWORD *)v81 + 54);
            }
            uint64_t v46 = *((void *)this + 26) + 24 * v44;
            *(_DWORD *)uint64_t v46 = v37;
            *(_DWORD *)(v46 + 4) = v32;
            *(_DWORD *)(v46 + 8) = v40;
            *(_WORD *)(v46 + 12) = v31;
            *(_WORD *)(v46 + 14) = v41;
            *(_DWORD *)(v46 + 16) = v43 + v34;
            *(_DWORD *)(v46 + 20) = v42;
            int v47 = *((_DWORD *)this + 54);
            *((_DWORD *)this + 54) = v47 + 1;
            if (v88 == 2 * *((_DWORD *)this + 4)) {
              uint64_t v10 = (v47 + 1);
            }
            else {
              uint64_t v10 = v87;
            }
            ++v88;
          }
        }
        v28 += 2;
      }
      while ((v31 & 0x80000000) == 0);
      unint64_t v11 = (v11 + 1);
      unint64_t v9 = *((unsigned int *)this + 50);
      int v7 = v79;
      a4 = v78;
    }
    while (v11 < v9);
  }
  else
  {
    unsigned int v88 = 0;
    LODWORD(v10) = 0;
  }
LABEL_44:
  int v104 = *((_DWORD *)this + 58) + v89;
  if (*((unsigned char *)this + 356)) {
    MiniFst::updateFrame((char *)this + 240, v84, v89, v7);
  }
  int64x2_t v102 = 0u;
  int64x2_t v103 = 0u;
  SnapTime::recordTime((SnapTime *)&v102, 1, 0, 0, 0);
  int64x2_t v102 = vsubq_s64(v102, v105);
  int64x2_t v103 = vsubq_s64(v103, v106);
  uint64_t v60 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v61 = vaddq_s64(v60[1], v103);
  *uint64_t v60 = vaddq_s64(*v60, v102);
  v60[1] = v61;
  int64x2_t v100 = 0u;
  int64x2_t v101 = 0u;
  SnapTime::recordTime((SnapTime *)&v100, 1, 0, 0, 0);
  if (v88 > 2 * *((_DWORD *)this + 4)) {
    FstSearchLateLatticeHashBackoff::applyCutoffOnEmitting((uint64_t)this, v10, &v104);
  }
  int64x2_t v98 = 0u;
  int64x2_t v99 = 0u;
  SnapTime::recordTime((SnapTime *)&v98, 1, 0, 0, 0);
  int64x2_t v62 = vsubq_s64(v98, v100);
  uint64_t v63 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v64 = v63[3];
  int64x2_t v65 = vaddq_s64(v63[2], v62);
  int64x2_t v98 = v62;
  int64x2_t v99 = vsubq_s64(v99, v101);
  int64x2_t v66 = vaddq_s64(v64, v99);
  v63[2] = v65;
  v63[3] = v66;
  int64x2_t v96 = 0u;
  int64x2_t v97 = 0u;
  SnapTime::recordTime((SnapTime *)&v96, 1, 0, 0, 0);
  FstSearchLateLatticeBackoff::makeViterbiDecisionOnEmitting((uint64_t)this);
  unint64_t v67 = *((unsigned int *)this + 6);
  if (v67)
  {
    unint64_t v68 = *((unsigned int *)this + 50);
    if (v67 < v68) {
      mrec_nth_element<FstSearchLateLatticeHashBackoffcmpTok>(*((void *)this + 24), v67, v68);
    }
  }
  int64x2_t v94 = 0u;
  int64x2_t v95 = 0u;
  SnapTime::recordTime((SnapTime *)&v94, 1, 0, 0, 0);
  int64x2_t v69 = vsubq_s64(v94, v96);
  uint64_t v70 = (int64x2_t *)*((void *)this + 13);
  int64x2_t v71 = v70[5];
  int64x2_t v72 = vaddq_s64(v70[4], v69);
  int64x2_t v94 = v69;
  int64x2_t v95 = vsubq_s64(v95, v97);
  int64x2_t v73 = vaddq_s64(v71, v95);
  v70[4] = v72;
  v70[5] = v73;
  int64x2_t v92 = 0u;
  int64x2_t v93 = 0u;
  SnapTime::recordTime((SnapTime *)&v92, 1, 0, 0, 0);
  *((_DWORD *)this + 54) = 0;
  uint64_t v74 = *((unsigned int *)this + 50);
  *((_DWORD *)this + 38) = v74;
  if (a4)
  {
    *((void *)a4 + 2) += v74;
    if (*((_DWORD *)a4 + 2) > v74) {
      LODWORD(v74) = *((_DWORD *)a4 + 2);
    }
    *((_DWORD *)a4 + 2) = v74;
  }
  if (*((unsigned char *)this + 356)) {
    FstSearchLateLattice::seedFromMiniFst((uint64_t)this, v107);
  }
  if (a5) {
    FstSearchLateLatticeHashBackoff::propagateNulls((uint64_t)this, v104, v7, a4);
  }
  *((_DWORD *)this + 56) = v7;
  int64x2_t v90 = 0u;
  int64x2_t v91 = 0u;
  SnapTime::recordTime((SnapTime *)&v90, 1, 0, 0, 0);
  uint64_t v75 = (int64x2_t *)*((void *)this + 13);
  int64x2_t result = vaddq_s64(v75[6], vsubq_s64(v90, v92));
  int64x2_t v77 = vaddq_s64(v75[7], vsubq_s64(v91, v93));
  v75[6] = result;
  v75[7] = v77;
  return result;
}

void sub_213E5B4BC(_Unwind_Exception *exception_object)
{
}

uint64_t FstSearchLateLattice::seedFromMiniFst(uint64_t this, int *a2)
{
  if (*(unsigned char *)(this + 356))
  {
    uint64_t v2 = this;
    unsigned int v3 = *(_DWORD *)(this + 264);
    if (v3 >= *(_DWORD *)(this + 20)) {
      unsigned int v3 = *(_DWORD *)(this + 20);
    }
    if (v3)
    {
      uint64_t v4 = 0;
      unsigned int v5 = 0;
      uint64_t v22 = this + 192;
      __int16 v23 = (void *)(this + 160);
      do
      {
        uint64_t v6 = (int *)(*(void *)(v2 + 256) + v4);
        int v7 = *v6;
        int v9 = v6[4];
        int v8 = v6[5];
        int v10 = v6[6];
        int v11 = v6[7];
        int v12 = v6[2];
        v25[0] = 0;
        v25[1] = 0;
        if ((v12 & 0x80000000) == 0)
        {
          while (1)
            ;
        }
        unsigned int v13 = -2 - v12;
        if (v11 == 16777213)
        {
          int v11 = 16777209;
          if (*(_DWORD *)(*v23 + 36 * v13) == 16777209) {
            unsigned int v13 = *(_DWORD *)(*(void *)(v2 + 176) + 16 * *(unsigned int *)(*v23 + 36 * v13 + 8) + 12);
          }
        }
        int v14 = *a2;
        uint64_t v15 = *(unsigned int *)(v2 + 168);
        if (v15 == *(_DWORD *)(v2 + 172))
        {
          DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)v23, 1, 1);
          LODWORD(v15) = *(_DWORD *)(v2 + 168);
        }
        uint64_t v16 = *(void *)(v2 + 160);
        uint64_t v17 = v16 + 36 * v15;
        *(_DWORD *)uint64_t v17 = v11;
        *(_DWORD *)(v17 + 4) = v14;
        *(void *)(v17 + 8) = 0xFFFFFFFFLL;
        *(_DWORD *)(v17 + 16) = v7;
        *(_DWORD *)(v17 + 20) = v13;
        *(_DWORD *)(v17 + 24) = v9;
        *(_DWORD *)(v17 + 28) = v8;
        *(_WORD *)(v17 + 32) = -2;
        unsigned int v18 = *(_DWORD *)(v2 + 168);
        *(_DWORD *)(v2 + 168) = v18 + 1;
        *(_DWORD *)(v16 + 36 * v18 + 12) = 1;
        uint64_t v19 = *(unsigned int *)(v2 + 200);
        if (v19 == *(_DWORD *)(v2 + 204))
        {
          DgnArray<CWIDAC>::reallocElts(v22, 1, 1);
          LODWORD(v19) = *(_DWORD *)(v2 + 200);
        }
        uint64_t v20 = *(void *)(v2 + 192) + 24 * v19;
        *(_DWORD *)uint64_t v20 = v7;
        *(_DWORD *)(v20 + 4) = v10;
        *(_DWORD *)(v20 + 8) = v18;
        *(_WORD *)(v20 + 12) = -2;
        *(_DWORD *)(v20 + 16) = v9;
        *(_DWORD *)(v20 + 20) = v8;
        ++*(_DWORD *)(v2 + 200);
        this = DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v25);
        ++v5;
        unsigned int v21 = *(_DWORD *)(v2 + 264);
        if (v21 >= *(_DWORD *)(v2 + 20)) {
          unsigned int v21 = *(_DWORD *)(v2 + 20);
        }
        v4 += 36;
      }
      while (v5 < v21);
    }
  }
  return this;
}

void sub_213E5B6D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va);
  _Unwind_Resume(a1);
}

int64x2_t FstSearchLateLattice::vite(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  FstSearchLateLattice::advanceDeltas((FstSearchLateLattice *)this, a2, a3, a4, a5);
  int64x2_t v11 = 0u;
  int64x2_t v12 = 0u;
  SnapTime::recordTime((SnapTime *)&v11, 1, 0, 0, 0);
  int64x2_t v9 = 0u;
  int64x2_t v10 = 0u;
  SnapTime::recordTime((SnapTime *)&v9, 1, 0, 0, 0);
  uint64_t v6 = this[13];
  int64x2_t result = vaddq_s64(v6[14], vsubq_s64(v9, v11));
  int64x2_t v8 = vaddq_s64(v6[15], vsubq_s64(v10, v12));
  v6[14] = result;
  v6[15] = v8;
  return result;
}

_DWORD *FstSearchLateLattice::reset(_DWORD *this)
{
  this[42] = 0;
  this[46] = 0;
  this[50] = 0;
  return this;
}

double FstSearchLateLattice::doFrame(int64x2_t **this, int a2, int a3, SearchStats *a4, int a5)
{
  if (a3 >= 20000) {
    a3 = 20000;
  }
  *(void *)&double result = FstSearchLateLattice::vite(this, a2, a3, a4, a5).u64[0];
  return result;
}

uint64_t FstSearchLateLattice::beginTopRecPassSyncRecog(FstSearchLateLattice *this, PelScorer *a2, const ArcGraph *a3)
{
  uint64_t result = SearchItf::beginTopRecPassSyncRecogBase((uint64_t)this, (uint64_t)a2);
  if (a3)
  {
    MiniFst::init((uint64_t)this + 240, a3, *((PelScoreCache **)this + 4));
    uint64_t result = ArcGraph::findBackoffState(*((void *)this + 5));
    *((_DWORD *)this + 88) = result;
    *((unsigned char *)this + 356) = 1;
  }
  return result;
}

uint64_t FstSearchLateLattice::endTopRecPassSyncRecog(int64x2_t **this)
{
  int64x2_t v10 = 0u;
  int64x2_t v11 = 0u;
  SnapTime::recordTime((SnapTime *)&v10, 1, 0, 0, 0);
  FstSearchLateLatticeHashBackoff::generateTraceTokensFromTraces((FstSearchLateLatticeHashBackoff *)this);
  FstSearchLateLattice::generateTraceTokensForLateLattice((FstSearchLateLattice *)this);
  int64x2_t v8 = 0u;
  int64x2_t v9 = 0u;
  SnapTime::recordTime((SnapTime *)&v8, 1, 0, 0, 0);
  int64x2_t v2 = vsubq_s64(v8, v10);
  unsigned int v3 = this[13];
  int64x2_t v4 = v3[13];
  int64x2_t v5 = vaddq_s64(v3[12], v2);
  int64x2_t v8 = v2;
  int64x2_t v9 = vsubq_s64(v9, v11);
  int64x2_t v6 = vaddq_s64(v4, v9);
  v3[12] = v5;
  v3[13] = v6;
  *((_DWORD *)this + 58) = 1879048192;
  return SearchItf::endTopRecPassSyncRecogBase((uint64_t)this);
}

uint64_t FstSearchLateLattice::generateTraceTokensForLateLattice(FstSearchLateLattice *this)
{
  unint64_t v1 = this;
  v131[1] = 0;
  uint64_t v132 = 0;
  int v133 = 0;
  v131[0] = 0;
  FstSearchLateLatticeHashBackoff::getTraceTimeBoundaries((uint64_t)this, &v132, (uint64_t)v131);
  uint64_t v129 = 0;
  int v130 = 0;
  uint64_t v127 = 0;
  int v128 = 0;
  v126[0] = 0;
  v126[1] = 0;
  int v125 = 1879048192;
  int v2 = (*(uint64_t (**)(FstSearchLateLattice *, uint64_t *, uint64_t *, int *, void *))(*(void *)v1 + 80))(v1, &v129, &v127, &v125, v126);
  int v9 = *((_DWORD *)v1 + 7);
  int v10 = *((_DWORD *)v1 + 2);
  uint64_t v122 = -1;
  __int16 v124 = 256;
  __int16 v123 = *((_WORD *)v1 + 34);
  if (v2)
  {
    __int16 v120 = 0;
    uint64_t v121 = 0;
    int64x2_t v11 = (uint64_t *)((char *)v1 + 160);
    uint64_t v12 = *((unsigned int *)v1 + 42);
    if (v12)
    {
      unsigned int v13 = 0;
      int64x2_t v105 = (uint64_t *)((char *)v1 + 160);
      int v102 = v10;
      int v103 = v9;
      while (1)
      {
        while (1)
        {
          while (1)
          {
            --v12;
            uint64_t v14 = *v11;
            if (*(unsigned char *)(v129 + v12)) {
              break;
            }
            *(_DWORD *)(v14 + 36 * v12 + 8) = -1;
            if (!v12) {
              goto LABEL_77;
            }
          }
          uint64_t v15 = (unsigned int *)(v14 + 36 * v12);
          uint64_t v16 = *v15;
          uint64_t v17 = *((void *)v1 + 6);
          if (*(_DWORD *)(v17 + 388) > v16 && *(unsigned char *)(*(void *)(v17 + 104) + v16)) {
            __int16 v18 = *(_WORD *)(*(void *)(v17 + 72) + 2 * *(unsigned int *)(*(void *)(v17 + 48) + 4 * v16));
          }
          else {
            __int16 v18 = 0;
          }
          uint64_t v19 = *((void *)v1 + 11);
          int v20 = *(_DWORD *)(v19 + 4 * v15[1]);
          unsigned int v22 = v15[2];
          unsigned int v21 = v15 + 2;
          uint64_t v23 = *((void *)v1 + 22);
          int v24 = *((_DWORD *)v1 + 3);
          int v25 = *(_DWORD *)(v126[0] + 4 * v12);
          HIWORD(v122) = v18;
          uint64_t v109 = (int32x2_t *)(v23 + 16 * v22);
          unsigned __int32 v26 = v109[1].u32[1];
          if ((v26 & 0x80000000) == 0) {
            break;
          }
          *unsigned int v21 = v13;
          if (v13 == HIDWORD(v121))
          {
            DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v120, 1, 1);
            unsigned int v13 = v121;
          }
          *((_OWORD *)v120 + v13) = *(_OWORD *)v109->i8;
          unsigned int v13 = v121 + 1;
          LODWORD(v121) = v121 + 1;
          *(_DWORD *)(*v11 + 36 * v12 + 12) = 1;
          if (!v12) {
            goto LABEL_77;
          }
        }
        uint64_t v110 = v12;
        uint64_t v113 = v109[1].u32[1];
        uint64_t v27 = v14 + 36 * v26;
        uint64_t v28 = *(unsigned int *)(v27 + 4);
        unint64_t v29 = v28 ? *(unsigned int *)(v132 + 4 * (v28 - 1)) : 0;
        int v114 = v24 + v125 - v25;
        uint64_t v108 = (int32x2_t *)(v23 + 16 * *(unsigned int *)(v27 + 8));
        int v107 = v20 + v109->i32[0] - *(_DWORD *)(v19 + 4 * v28) - v108->i32[0];
        int v106 = v108->i32[0] - *(_DWORD *)(v131[0] + 4 * v28);
        unsigned int v30 = v13;
        if (v29 < *(unsigned int *)(v132 + 4 * v28)) {
          break;
        }
LABEL_42:
        if (v13 >= v30)
        {
          errThrowInternal(0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstsrch.cpp", 150, (uint64_t)"fst/fstsrch", 2, (uint64_t)"%s", v7, v8, (char)&unk_214099300);
          unsigned int v30 = v121;
        }
        mrec_qsort_r<FstSearchLateLatticeHashBackoffcmpTokLmhst>((char *)v120 + 16 * v13, v30 - v13, 16);
        unint64_t v45 = v13 + 1;
        unsigned int v46 = v121;
        if (v45 < v121)
        {
          uint64_t v47 = 16 * (v13 + 1);
          unsigned int v48 = v13;
          do
          {
            if (*(_DWORD *)((char *)v120 + v47 + 8) != *((_DWORD *)v120 + 4 * v48 + 2))
            {
              *((_OWORD *)v120 + ++v48) = *(_OWORD *)((char *)v120 + v47);
              unsigned int v46 = v121;
            }
            ++v45;
            v47 += 16;
          }
          while (v45 < v46);
          LODWORD(v45) = v48 + 1;
        }
        unsigned int v49 = (char *)v120;
        if (HIDWORD(v121) < v45)
        {
          int v118 = 0;
          HIDWORD(v121) = realloc_array(v120, &v118, 16 * v45, 16 * v46, 16 * v46, 1) >> 4;
          unsigned int v49 = (char *)v118;
          __int16 v120 = v118;
          unsigned int v46 = v121;
        }
        if (v46 < v45)
        {
          unint64_t v50 = v45 - (unint64_t)v46;
          uint64_t v51 = &v49[16 * v46];
          do
          {
            *(_OWORD *)uint64_t v51 = xmmword_2140992A0;
            v51 += 16;
            --v50;
          }
          while (v50);
        }
        LODWORD(v121) = v45;
        mrec_qsort_r<FstSearchLateLatticeHashBackoffcmpTok>(&v49[16 * v13], v45 - v13, 16);
        uint64_t v52 = 16 * v13;
        int v53 = v114;
        if (*(_DWORD *)((char *)v120 + v52) + v10 < v114) {
          int v53 = *((_DWORD *)v120 + 4 * v13) + v10;
        }
        unsigned int v54 = v121;
        unsigned int v55 = *((_DWORD *)v1 + 5) + v13;
        if (v121 < v55) {
          unsigned int v55 = v121;
        }
        uint64_t v56 = *((void *)v1 + 20);
        *(_DWORD *)(v56 + 36 * v110 + 8) = v13;
        if (v13 >= v55)
        {
          unsigned int v60 = v13;
        }
        else
        {
          while (*(_DWORD *)((char *)v120 + v52) <= v53)
          {
            uint64_t v57 = *(unsigned int *)((char *)v120 + v52 + 12);
            if ((v57 & 0x80000000) == 0)
            {
              *(unsigned char *)(v129 + v57) = 1;
              int v58 = v57 == v113 ? 0 : v106 + v9;
              int v59 = v58 + v107 + *(_DWORD *)(v126[0] + 4 * v110);
              if (*(_DWORD *)(v126[0] + 4 * v57) > v59) {
                *(_DWORD *)(v126[0] + 4 * v57) = v59;
              }
            }
            ++v13;
            v52 += 16;
            if (v55 == v13)
            {
              unsigned int v13 = v55;
              break;
            }
          }
          uint64_t v56 = *v11;
          unsigned int v60 = *(_DWORD *)(*v11 + 36 * v110 + 8);
          unsigned int v54 = v121;
        }
        *(_DWORD *)(v56 + 36 * v110 + 12) = v13 - v60;
        if (HIDWORD(v121) < v13)
        {
          int v118 = 0;
          HIDWORD(v121) = realloc_array(v120, &v118, 16 * v13, 16 * v54, 16 * v54, 1) >> 4;
          __int16 v120 = v118;
          unsigned int v54 = v121;
        }
        if (v54 < v13)
        {
          unint64_t v61 = v13 - (unint64_t)v54;
          int64x2_t v62 = (char *)v120 + 16 * v54;
          do
          {
            *v62++ = xmmword_2140992A0;
            --v61;
          }
          while (v61);
        }
        LODWORD(v121) = v13;
        if (!v110)
        {
LABEL_77:
          uint64_t v63 = v120;
          int v64 = HIDWORD(v121);
          unsigned int v65 = *((_DWORD *)v1 + 42);
          goto LABEL_79;
        }
      }
      uint64_t v104 = v12;
      unsigned int v112 = v106 + v9;
      int v111 = v20 + v109->i32[0] - v108->i32[0];
      uint64_t v31 = 36 * v29;
      while (1)
      {
        if (v113 == v29) {
          unsigned int v32 = 0;
        }
        else {
          unsigned int v32 = v112;
        }
        uint64_t v33 = *((void *)v1 + 20);
        int v34 = (_OWORD *)(*((void *)v1 + 22) + 16 * *(unsigned int *)(v33 + v31 + 8));
        if ((int)(v111 + v32 + *(_DWORD *)v34) <= v114)
        {
          int v35 = (ArcGraph **)v1;
          int v36 = *(_DWORD *)(v33 + 36 * v110);
          int v37 = *(_DWORD *)(v33 + v31);
          BOOL v38 = v37 != 16777209
             && ArcGraph::lexToCWID(v35[5], *(_DWORD *)(v33 + v31), v3, v4, v5, v6, v7, v8) >> 25 != 126;
          if (v36 == 16777209)
          {
            unint64_t v1 = (FstSearchLateLattice *)v35;
            if (v38) {
              goto LABEL_35;
            }
          }
          else
          {
            BOOL v39 = v36 == 16777214 || v37 == 16777213;
            unint64_t v1 = (FstSearchLateLattice *)v35;
            if (!v39)
            {
LABEL_35:
              BOOL isLexPelPhnMatch = FstSearchLateLatticeHashBackoff::isLexPelPhnMatch((uint64_t)v1, v29, (uint64_t)&v122);
              unint64_t v1 = (FstSearchLateLattice *)v35;
              if (isLexPelPhnMatch)
              {
                uint64_t v41 = v121;
                if (v121 == (unint64_t)HIDWORD(v121))
                {
                  DgnArray<DgnPrimArray<double>>::reallocElts((uint64_t)&v120, 1, 1);
                  uint64_t v41 = v121;
                  unint64_t v1 = (FstSearchLateLattice *)v35;
                }
                *((_OWORD *)v120 + v41) = *v34;
                uint64_t v42 = v121;
                LODWORD(v121) = v121 + 1;
                int v43 = (int32x2_t *)((char *)v120 + 16 * v42);
                v43[1].i32[1] = v29;
                *int v43 = vadd_s32(vsub_s32(vadd_s32(*v109, vdup_n_s32(v32)), *v108), *v43);
                int v44 = *(_DWORD *)(*v105 + 36 * v110);
                if (v44 != 16777209) {
                  v43[1].i32[0] = v44 + 2 * v43[1].i32[0] + 1;
                }
              }
            }
          }
        }
        ++v29;
        v31 += 36;
        if (v29 >= *(unsigned int *)(v132 + 4 * v28))
        {
          unsigned int v30 = v121;
          uint64_t v12 = v104;
          int64x2_t v11 = v105;
          int v10 = v102;
          int v9 = v103;
          goto LABEL_42;
        }
      }
    }
    unsigned int v65 = 0;
    unsigned int v13 = 0;
    int v64 = 0;
    uint64_t v63 = 0;
LABEL_79:
    int64x2_t v66 = (void *)*((void *)v1 + 22);
    *((void *)v1 + 22) = v63;
    __int16 v120 = v66;
    int v67 = *((_DWORD *)v1 + 47);
    *((_DWORD *)v1 + 46) = v13;
    *((_DWORD *)v1 + 47) = v64;
    LODWORD(v121) = 0;
    HIDWORD(v121) = v67;
    unsigned int v119 = 0;
    int v118 = 0;
    if (v65)
    {
      unint64_t v68 = MemChunkAlloc(4 * v65, 0);
      int v118 = v68;
      unsigned int v119 = v65;
      if (*((_DWORD *)v1 + 42))
      {
        uint64_t v69 = 0;
        unint64_t v70 = 0;
        unsigned int v65 = 0;
        do
        {
          int64x2_t v71 = (long long *)(*v11 + v69);
          if (*((_DWORD *)v71 + 2) == -1)
          {
            *((_DWORD *)v68 + v70) = -1;
          }
          else
          {
            if (v70 != v65)
            {
              uint64_t v72 = *v11 + 36 * v65;
              long long v73 = *v71;
              long long v74 = v71[1];
              *(_WORD *)(v72 + 32) = *((_WORD *)v71 + 16);
              *(_OWORD *)uint64_t v72 = v73;
              *(_OWORD *)(v72 + 16) = v74;
            }
            *((_DWORD *)v68 + v70) = v65++;
          }
          ++v70;
          unint64_t v75 = *((unsigned int *)v1 + 42);
          v69 += 36;
        }
        while (v70 < v75);
        unsigned int v76 = *((_DWORD *)v1 + 43);
        if (v65 > v76)
        {
          DgnArray<FstSearchLateLatticeHashBackoffTrace>::reallocElts((uint64_t)v11, v65 - v76, 0);
          LODWORD(v75) = *((_DWORD *)v1 + 42);
        }
        if (v75 < v65)
        {
          unint64_t v77 = v65 - (unint64_t)v75;
          uint64_t v78 = (_WORD *)(*v11 + 36 * v75 + 32);
          do
          {
            *((_OWORD *)v78 - 2) = xmmword_2140992B0;
            *((_OWORD *)v78 - 1) = xmmword_2140992C0;
            *uint64_t v78 = -2;
            v78 += 18;
            --v77;
          }
          while (v77);
        }
      }
      else
      {
        unsigned int v65 = 0;
      }
    }
    *((_DWORD *)v1 + 42) = v65;
    uint64_t v79 = *((unsigned int *)v1 + 46);
    if (v79)
    {
      uint64_t v80 = v118;
      uint64_t v81 = (_DWORD *)(*((void *)v1 + 22) + 12);
      do
      {
        uint64_t v82 = *v81;
        if ((v82 & 0x80000000) == 0) {
          _DWORD *v81 = v80[v82];
        }
        v81 += 4;
        --v79;
      }
      while (v79);
    }
    DgnArray<FstSearchLateLatticeHashBackoffActiveToken>::DgnArray(&v115, *((unsigned int *)v1 + 50));
    unint64_t v83 = *((unsigned int *)v1 + 50);
    if (v83)
    {
      uint64_t v84 = 0;
      unint64_t v85 = 0;
      unsigned int v86 = 0;
      unsigned int v87 = v118;
      unsigned int v88 = v115;
      do
      {
        uint64_t v89 = *((unsigned int *)v1 + 38);
        if (v86 < v89 && v85 == v89) {
          *((_DWORD *)v1 + 38) = v86;
        }
        int64x2_t v91 = (long long *)(*((void *)v1 + 24) + v84);
        uint64_t v92 = *((unsigned int *)v91 + 2);
        if (v92 == -1 || v87[v92] != -1)
        {
          int64x2_t v93 = (char *)&v88[6 * v86];
          long long v94 = *v91;
          *((void *)v93 + 2) = *((void *)v91 + 2);
          *(_OWORD *)int64x2_t v93 = v94;
          uint64_t v95 = *(unsigned int *)(*((void *)v1 + 24) + v84 + 8);
          if (v95 != -1) {
            LODWORD(v95) = v87[v95];
          }
          v88[6 * v86++ + 2] = v95;
          unint64_t v83 = *((unsigned int *)v1 + 50);
        }
        ++v85;
        v84 += 24;
      }
      while (v85 < v83);
    }
    else
    {
      unsigned int v86 = 0;
    }
    if (v86 < *((_DWORD *)v1 + 38)) {
      *((_DWORD *)v1 + 38) = v86;
    }
    LODWORD(v96) = v117;
    int64x2_t v97 = (char *)v115;
    if (v117 < v86)
    {
      int64x2_t v134 = 0;
      unint64_t v96 = realloc_array(v115, &v134, 24 * v86, 24 * v116, 24 * v116, 1) / 0x18;
      int64x2_t v97 = (char *)v134;
    }
    if (v116 < v86)
    {
      unint64_t v98 = v86 - (unint64_t)v116;
      int64x2_t v99 = &v97[24 * v116 + 16];
      do
      {
        *((void *)v99 - 2) = 0xFFFFFFFF00000000;
        *((_DWORD *)v99 - 2) = -1;
        *((_WORD *)v99 - 2) = -2;
        *(void *)int64x2_t v99 = 0;
        v99 += 24;
        --v98;
      }
      while (v98);
    }
    int64x2_t v100 = (void *)*((void *)v1 + 24);
    *((void *)v1 + 24) = v97;
    unint64_t v115 = v100;
    LODWORD(v100) = *((_DWORD *)v1 + 51);
    *((_DWORD *)v1 + 50) = v86;
    *((_DWORD *)v1 + 51) = v96;
    unsigned int v116 = 0;
    unsigned int v117 = v100;
    DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v115);
    DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v118);
    DgnIArray<Utterance *>::~DgnIArray((uint64_t)&v120);
  }
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v126);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v127);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v129);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)v131);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v132);
}

void sub_213E5C280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&a25);
  DgnIArray<Utterance *>::~DgnIArray((uint64_t)&a27);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&a31);
  DgnPrimFixArray<double>::~DgnPrimFixArray(v31 - 160);
  DgnPrimFixArray<double>::~DgnPrimFixArray(v31 - 144);
  DgnPrimArray<unsigned int>::~DgnPrimArray(v31 - 128);
  DgnPrimFixArray<double>::~DgnPrimFixArray(v31 - 112);
  _Unwind_Resume(a1);
}

void FstSearchLateLattice::printSize(FstSearchLateLattice *this, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2950, (DgnString *)&v116);
  if (v117) {
    uint64_t v16 = v116;
  }
  else {
    uint64_t v16 = &unk_214099300;
  }
  xlprintf("ObSize: %*s*************************************************************\nObSize: %*sBegin %s ", v12, v13, v14, v15, a3, &unk_214099300, a3, &unk_214099300, v16);
  DgnString::~DgnString((DgnString *)&v116);
  if (a2 != -1) {
    xlprintf("%d ", v17, v18, v19, v20, a2);
  }
  xlprintf("(alloc, used, shared)\nObSize: %*s*************************************************************\n", v17, v18, v19, v20, a3, &unk_214099300);
  uint64_t v21 = (a3 + 1);
  uint64_t v22 = (34 - a3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2952, (DgnString *)&v116);
  if (v117) {
    uint64_t v27 = v116;
  }
  else {
    uint64_t v27 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v23, v24, v25, v26, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v27, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2954, (DgnString *)&v116);
  if (v117) {
    unsigned int v32 = v116;
  }
  else {
    unsigned int v32 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v28, v29, v30, v31, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v32, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2955, (DgnString *)&v116);
  if (v117) {
    int v37 = v116;
  }
  else {
    int v37 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v33, v34, v35, v36, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v37, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2956, (DgnString *)&v116);
  if (v117) {
    uint64_t v42 = v116;
  }
  else {
    uint64_t v42 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v38, v39, v40, v41, (a3 + 1), &unk_214099300, (34 - a3), (34 - a3), v42, 4, 4, 0);
  uint64_t v111 = a2;
  unsigned int v112 = a6;
  uint64_t v113 = a3;
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  uint64_t v43 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v43 = 16;
  }
  uint64_t v44 = *((unsigned int *)this + 42);
  uint64_t v45 = 24 * v44;
  if ((int)v44 <= 0) {
    uint64_t v45 = 0;
  }
  uint64_t v46 = v45 + v43;
  uint64_t v47 = v45 + v43 + 24 * (*((_DWORD *)this + 43) - v44);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2957, (DgnString *)&v116);
  if (v117) {
    uint64_t v52 = v116;
  }
  else {
    uint64_t v52 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v48, v49, v50, v51, v21, &unk_214099300, v22, v22, v52, v47, v46, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v47;
  *a5 += v46;
  uint64_t v53 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v53 = 16;
  }
  uint64_t v54 = *((unsigned int *)this + 46);
  uint64_t v55 = 16 * v54;
  if ((int)v54 <= 0) {
    uint64_t v55 = 0;
  }
  uint64_t v56 = v55 + v53;
  uint64_t v57 = v55 + v53 + 16 * (*((_DWORD *)this + 47) - v54);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2959, (DgnString *)&v116);
  if (v117) {
    int64x2_t v62 = v116;
  }
  else {
    int64x2_t v62 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v58, v59, v60, v61, v21, &unk_214099300, v22, v22, v62, v57, v56, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v57;
  *a5 += v56;
  uint64_t v63 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v63 = 16;
  }
  int v64 = *((_DWORD *)this + 50);
  uint64_t v65 = 22 * v64;
  if (v64 <= 0) {
    uint64_t v65 = 0;
  }
  uint64_t v66 = v65 + v63;
  uint64_t v67 = v65 + v63 + 22 * (*((_DWORD *)this + 51) - v64);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2964, (DgnString *)&v116);
  if (v117) {
    uint64_t v72 = v116;
  }
  else {
    uint64_t v72 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v68, v69, v70, v71, v21, &unk_214099300, v22, v22, v72, v67, v66, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v67;
  *a5 += v66;
  uint64_t v73 = 12;
  if (!gShadowDiagnosticShowIdealizedObjectSizes) {
    uint64_t v73 = 16;
  }
  int v74 = *((_DWORD *)this + 54);
  uint64_t v75 = 22 * v74;
  if (v74 <= 0) {
    uint64_t v75 = 0;
  }
  uint64_t v76 = v75 + v73;
  uint64_t v77 = v75 + v73 + 22 * (*((_DWORD *)this + 55) - v74);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2966, (DgnString *)&v116);
  if (v117) {
    uint64_t v82 = v116;
  }
  else {
    uint64_t v82 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v78, v79, v80, v81, v21, &unk_214099300, v22, v22, v82, v77, v76, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v77;
  *a5 += v76;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2968, (DgnString *)&v116);
  if (v117) {
    unsigned int v87 = v116;
  }
  else {
    unsigned int v87 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v83, v84, v85, v86, v21, &unk_214099300, v22, v22, v87, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2970, (DgnString *)&v116);
  if (v117) {
    uint64_t v92 = v116;
  }
  else {
    uint64_t v92 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v88, v89, v90, v91, v21, &unk_214099300, v22, v22, v92, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2972, (DgnString *)&v116);
  if (v117) {
    int64x2_t v97 = v116;
  }
  else {
    int64x2_t v97 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v93, v94, v95, v96, v21, &unk_214099300, v22, v22, v97, 4, 4, 0);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += 4;
  *a5 += 4;
  uint64_t v98 = sizeObject((uint64_t)this + 240, 0);
  uint64_t v99 = sizeObject((uint64_t)this + 240, 1);
  uint64_t v100 = sizeObject((uint64_t)this + 240, 3);
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2974, (DgnString *)&v116);
  if (v117) {
    int64x2_t v105 = v116;
  }
  else {
    int64x2_t v105 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v101, v102, v103, v104, v21, &unk_214099300, v22, v22, v105, v98, v99, v100);
  DgnString::~DgnString((DgnString *)&v116);
  *a4 += v98;
  *a5 += v99;
  *v112 += v100;
  unint64_t v114 = 0;
  unint64_t v115 = 0;
  SearchItf::printSize(this, v111, v21, &v115, &v114, &v114);
  *a4 += v115;
  *a5 += v114;
  getShipObjectSizeDescription((FileSpec *)"/Library/Caches/com.apple.xbs/Sources/SDAPI/libtextproc/libmrec/src/fst/fstdef.inl", 2985, (DgnString *)&v116);
  if (v117) {
    uint64_t v110 = v116;
  }
  else {
    uint64_t v110 = &unk_214099300;
  }
  xlprintf("ObSize: %*s%-*.*s: %10llu, %10llu, %10llu\n", v106, v107, v108, v109, v113, &unk_214099300, (35 - v113), (35 - v113), v110, *a4, *a5, *v112);
  DgnString::~DgnString((DgnString *)&v116);
}

void sub_213E5CA4C(_Unwind_Exception *a1)
{
  DgnString::~DgnString((DgnString *)(v1 - 96));
  _Unwind_Resume(a1);
}

BOOL FstSearchLateLattice::findBestPath(uint64_t a1, uint64_t **a2, uint64_t a3, int *a4, uint64_t a5)
{
  unint64_t v10 = *(unsigned int *)(a1 + 168);
  if (v10) {
    BOOL v11 = *(_DWORD *)(a3 + 8) == 0;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    *(void *)a3 = MemChunkAlloc(*(unsigned int *)(a1 + 168), 0);
    *(_DWORD *)(a3 + 8) = v10;
  }
  if (v10) {
    BOOL v12 = *((_DWORD *)a2 + 2) == 0;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12)
  {
    *a2 = MemChunkAlloc(v10, 0);
    *((_DWORD *)a2 + 2) = v10;
  }
  else if (!v10)
  {
    goto LABEL_16;
  }
  uint64_t v13 = 0;
  do
  {
    *((unsigned char *)*a2 + v13) = 0;
    *(unsigned char *)(*(void *)a3 + v13++) = 0;
  }
  while (v10 != v13);
LABEL_16:
  unsigned int BestTrace = FstSearchLateLatticeHashBackoff::getBestTrace(a1, a2, (void *)a3, 0);
  *a4 = 1879048192;
  if (BestTrace == -1)
  {
    int v20 = 1879048192;
  }
  else
  {
    uint64_t v15 = *(void *)(a1 + 160);
    uint64_t v16 = v15 + 36 * BestTrace;
    unsigned int v18 = *(_DWORD *)(v16 + 4);
    uint64_t v17 = (int *)(v16 + 4);
    int v19 = v17[3] + *(_DWORD *)(*(void *)(a1 + 88) + 4 * v18);
    *a4 = v19;
    int v20 = 1879048192;
    if (v19 != 1879048192)
    {
      int v21 = *(_DWORD *)(a1 + 168);
      if (v21)
      {
        unsigned int v22 = v21 - 1;
        int v23 = 1879048192;
        int v24 = *v17;
        do
        {
          uint64_t v25 = v22;
          if (*(_DWORD *)(v15 + 36 * v22 + 4) == v24
            && *(_DWORD *)(v15 + 36 * v22) == 16777213
            && !*((unsigned char *)*a2 + v22))
          {
            *((unsigned char *)*a2 + v22) = 2;
            *(unsigned char *)(*(void *)a3 + v22) = 1;
            uint64_t v15 = *(void *)(a1 + 160);
            if (v23 >= *(_DWORD *)(*(void *)(a1 + 176) + 16 * *(unsigned int *)(v15 + 36 * v22 + 8))
                      + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v15 + 36 * v22 + 4)))
              int v23 = *(_DWORD *)(*(void *)(a1 + 176) + 16 * *(unsigned int *)(v15 + 36 * v22 + 8))
                  + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(v15 + 36 * v22 + 4));
          }
          --v22;
        }
        while (v25);
        int v19 = *a4;
        unsigned int v26 = *(_DWORD *)(a1 + 168);
      }
      else
      {
        unsigned int v26 = 0;
        int v23 = 1879048192;
      }
      int v27 = *(_DWORD *)(a1 + 28);
      BOOL v28 = __OFSUB__(v19, v23);
      int v29 = v19 - v23;
      if ((v29 < 0) ^ v28 | (v29 == 0)) {
        int v30 = 0;
      }
      else {
        int v30 = v29;
      }
      unsigned int v31 = *(_DWORD *)(a5 + 12);
      unsigned int v32 = v26;
      if (v26 > v31)
      {
        DgnPrimArray<unsigned int>::reallocElts(a5, v26 - v31, 0);
        unsigned int v32 = *(_DWORD *)(a1 + 168);
      }
      *(_DWORD *)(a5 + 8) = v26;
      int v20 = *a4;
      if (v32)
      {
        uint64_t v33 = 0;
        unint64_t v34 = 0;
        int v35 = v20 - (v30 + v27) + *(_DWORD *)(a1 + 12);
        do
        {
          uint64_t v36 = *a2;
          int v37 = *((unsigned __int8 *)*a2 + v34);
          if (v37 == 2)
          {
            uint64_t v38 = *(void *)a5;
            if (*(_DWORD *)(*(void *)(a1 + 176) + 16 * *(unsigned int *)(*(void *)(a1 + 160) + v33 + 8))
               + *(_DWORD *)(*(void *)(a1 + 88) + 4 * *(unsigned int *)(*(void *)(a1 + 160) + v33 + 4)) <= v35)
            {
              *(_DWORD *)(v38 + 4 * v34) = v30 + v27;
              *((unsigned char *)v36 + v34) = 1;
            }
            else
            {
              *(_DWORD *)(v38 + 4 * v34) = 1879048192;
              *((unsigned char *)v36 + v34) = 0;
            }
          }
          else if (v37 == 1)
          {
            *(_DWORD *)(*(void *)a5 + 4 * v34) = 0;
          }
          else
          {
            *(_DWORD *)(*(void *)a5 + 4 * v34) = 1879048192;
          }
          ++v34;
          v33 += 36;
        }
        while (v34 < *(unsigned int *)(a1 + 168));
        int v20 = *a4;
      }
    }
  }
  return v20 != 1879048192;
}

uint64_t FstSearchLateLattice::buildWordLattice(uint64_t a1, uint64_t *a2, void *a3, void *a4, char a5)
{
  uint64_t v28 = 0;
  int v29 = 0;
  int v30 = 0;
  uint64_t v27 = 0;
  DgnArray<DgnPrimArray<unsigned int>>::DgnArray(v26, *(unsigned int *)(a1 + 168));
  int v9 = MemChunkAlloc(0x28uLL, 0);
  HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>::HashProbeKEV((uint64_t)v9, 0, 128);
  v9[4] = (uint64_t)a2;
  FstSearchLateLatticeHashBackoff::createLatticeNodes(a1, &v29, (uint64_t)&v27, (uint64_t)a2, v26, a3, a4);
  uint64_t v23 = (uint64_t)v9;
  uint64_t v24 = *(unsigned int *)(a1 + 168);
  if (v24)
  {
    uint64_t v11 = 0;
    int v12 = v28;
    do
    {
      if (*(unsigned char *)(*a3 + v11))
      {
        uint64_t v13 = *(void *)(a1 + 160);
        if (*(_DWORD *)(v13 + 36 * v11) != 16777209 && *(int *)(v13 + 36 * v11 + 12) >= 1)
        {
          int v14 = *(_DWORD *)(v13 + 36 * v11 + 8);
          do
          {
            uint64_t v15 = *(void *)(a1 + 176) + 16 * v14;
            uint64_t v16 = *(unsigned int *)(v15 + 12);
            if (v16 == -1) {
              unsigned int v17 = 0;
            }
            else {
              unsigned int v17 = v12 - *((_DWORD *)v29 + v16);
            }
            uint64_t v18 = *(unsigned int *)(v27 + 4 * v17);
            if (*(unsigned char *)(*a4 + v11)) {
              FstSearchLateLattice::createLatticeLink(a1, v11, (int *)v15, 0xFFFFFFFFLL, v18, (const WordLatticeLC *)*(unsigned int *)(v27 + 4 * (v12 - *((_DWORD *)v29 + v11))), a2, v10, a5);
            }
            uint64_t v19 = v26[0];
            if (*(_DWORD *)(v26[0] + 16 * v11 + 8))
            {
              unint64_t v20 = 0;
              do
              {
                uint64_t v21 = *(unsigned int *)(*(void *)(v19 + 16 * v11) + 4 * v20);
                FstSearchLateLattice::createLatticeLink(a1, v11, (int *)v15, v21, v18, (const WordLatticeLC *)*(unsigned int *)(v27 + 4 * (v12 - *((_DWORD *)v29 + v21))), a2, v10, a5);
                ++v20;
                uint64_t v19 = v26[0];
              }
              while (v20 < *(unsigned int *)(v26[0] + 16 * v11 + 8));
            }
            ++v14;
          }
          while (v14 < *(_DWORD *)(*(void *)(a1 + 160) + 36 * v11 + 12)
                      + *(_DWORD *)(*(void *)(a1 + 160) + 36 * v11 + 8));
        }
      }
      ++v11;
    }
    while (v11 != v24);
  }
  DgnDelete<HashProbeKEV<unsigned long long,DgnArray<LinkSegment>,WordLattice>>(v23);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)v26);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)&v27);
  return DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)&v29);
}

void sub_213E5CF80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  DgnArray<DgnPrimArray<unsigned char>>::releaseAll((uint64_t)va);
  DgnPrimArray<unsigned int>::~DgnPrimArray((uint64_t)va1);
  DgnPrimFixArray<double>::~DgnPrimFixArray((uint64_t)va2);
  _Unwind_Resume(a1);
}

void FstSearchLateLattice::createLatticeLink(uint64_t a1, unsigned int a2, int *a3, uint64_t a4, uint64_t a5, const WordLatticeLC *a6, uint64_t *a7, uint64_t a8, char a9)
{
  unsigned int v11 = a5;
  unsigned int v12 = a4;
  uint64_t v16 = *(void *)(a1 + 160);
  if ((a4 & 0x80000000) != 0 || (uint64_t v17 = v16 + 36 * a4, v18 = *(_DWORD *)(v17 + 12), v18 < 1))
  {
    unsigned int v22 = 0;
  }
  else
  {
    unsigned int v19 = *(_DWORD *)(v17 + 8);
    int v20 = v18 + v19;
    do
    {
      uint64_t v21 = *(void *)(a1 + 176);
      if (*(_DWORD *)(v21 + 16 * v19 + 12) == a2) {
        unsigned int v22 = (_DWORD *)(v21 + 16 * v19);
      }
      else {
        unsigned int v22 = 0;
      }
      ++v19;
    }
    while ((int)v19 < v20 && !v22);
  }
  ArcGraph::lexToCWIDAC(*(ArcGraph **)(a1 + 40), *(_DWORD *)(v16 + 36 * a2), (uint64_t)a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8, (uint64_t)v46);
  int v23 = a3[1];
  if (v22)
  {
    v23 += v22[1];
    int v24 = *v22 + *a3;
  }
  else
  {
    int v24 = *a3;
  }
  if (v46[0] >> 25 == 126)
  {
    int v25 = 0;
    int v26 = v23;
  }
  else
  {
    int v25 = *(_DWORD *)(a1 + 136);
    int v26 = v23 - v25;
  }
  int v27 = v24 - v23;
  if ((v12 & 0x80000000) != 0)
  {
    int v28 = 0;
  }
  else
  {
    int v28 = *(_DWORD *)(a1 + 140);
    v26 -= v28;
  }
  int v40 = v26;
  uint64_t v41 = 0;
  int v42 = v25;
  int v43 = v27;
  int v44 = 0;
  int v45 = v28;
  unsigned int v29 = a3[3];
  uint64_t v30 = *(void *)(a1 + 160);
  if (v29 == -1)
  {
    int v32 = 0;
    if (a9) {
      goto LABEL_26;
    }
  }
  else
  {
    int v31 = *(_DWORD *)(v30 + 36 * v29 + 4);
    if (a9)
    {
      if (v31 >= 1) {
        --v31;
      }
      int v32 = (v31 >> 1) + 1;
LABEL_26:
      int v33 = *(_DWORD *)(v30 + 36 * a2 + 4);
      if (v33 >= 1) {
        --v33;
      }
      int v34 = v33 >> 1;
      int v35 = v34 - v32 + 1;
      if ((v12 & 0x80000000) == 0)
      {
        int v36 = *(_DWORD *)(v30 + 36 * v12 + 4);
        if (v36 >= 1) {
          --v36;
        }
        int v37 = v36 >> 1;
        goto LABEL_35;
      }
LABEL_36:
      int v38 = 0;
      goto LABEL_37;
    }
    int v32 = v31 + 1;
  }
  int v34 = *(_DWORD *)(v30 + 36 * a2 + 4);
  int v35 = v34 - v32 + 1;
  if ((v12 & 0x80000000) != 0) {
    goto LABEL_36;
  }
  int v37 = *(_DWORD *)(v30 + 36 * v12 + 4);
LABEL_35:
  int v38 = v37 - v34;
LABEL_37:
  WordLatticeLC::WordLatticeLC((uint64_t)v39, (uint64_t)v46, v32, v35, v38, (uint64_t)&v40);
  Lattice<WordLatticeLC>::maybeCreateAndConnectLinkAvoidMultiLinks(a7, v11, a6, (WordLatticeLC *)v39);
  WordLatticeLC::~WordLatticeLC((WordLatticeLC *)v39);
}