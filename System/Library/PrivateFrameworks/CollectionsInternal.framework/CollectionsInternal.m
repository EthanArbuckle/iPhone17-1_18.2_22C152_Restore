unint64_t _HashTable.BucketIterator.currentValue.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = v0[3];
  if (!v1) {
    return 0;
  }
  v2 = -1 << *(void *)*v0;
  v3 = (v2 ^ ~v1) + (*(uint64_t *)(*v0 + 8) >> 6);
  if (v3 >= ~v2) {
    v4 = ~v2;
  }
  else {
    v4 = 0;
  }
  return v3 - v4;
}

uint64_t _HashTable.UnsafeHandle._startIterator(bucket:)(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v3 = *a2 & 0x3FLL;
  uint64_t v4 = (v3 * result) >> 6;
  uint64_t v5 = (v3 * result) & 0x3F;
  if ((unint64_t)(v5 + v3) <= 0x40) {
    return (*(void *)(a3 + 8 * v4) >> v5) & ~(-1 << v3);
  }
  if (__OFADD__(v3 << v3, 64))
  {
    __break(1u);
  }
  else
  {
    unint64_t v6 = *(void *)(a3 + 8 * v4);
    uint64_t v7 = (v3 << v3) + 126;
    if ((v3 << v3) + 64 >= 1) {
      uint64_t v7 = (v3 << v3) + 63;
    }
    if (v4 + 1 == v7 >> 6) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = v4 + 1;
    }
    return ((*(void *)(a3 + 8 * v8) << (64 - v5)) | (v6 >> v5)) & ~(-1 << v3);
  }
  return result;
}

uint64_t _HashTable.BucketIterator.currentValue.setter(uint64_t result, char a2)
{
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = **(void **)v2 & 0x3FLL;
  if (a2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = (-1 << v4) ^ ~((((result - ((uint64_t)v3[1] >> 6)) >> 63) & ~(-1 << v4)) + result - ((uint64_t)v3[1] >> 6));
  }
  unint64_t v6 = *(void *)(v2 + 24) ^ v5;
  uint64_t v7 = *(void *)(v2 + 8);
  uint64_t v8 = v4 * *(void *)(v2 + 16);
  uint64_t v9 = v8 >> 6;
  *(void *)(v7 + 8 * (v8 >> 6)) ^= v6 << v8;
  unint64_t v10 = 64 - (v8 & 0x3F);
  unint64_t v11 = *v3 & 0x3FLL;
  if (v10 >= v11)
  {
LABEL_12:
    *(void *)(v2 + 24) = v5;
    return result;
  }
  unint64_t v12 = v11 << v11;
  BOOL v13 = __OFADD__(v12, 64);
  uint64_t v14 = v12 + 64;
  if (!v13)
  {
    uint64_t v16 = v14 - 1;
    BOOL v15 = v14 < 1;
    uint64_t v17 = v14 + 62;
    if (!v15) {
      uint64_t v17 = v16;
    }
    if (v9 + 1 == v17 >> 6) {
      uint64_t v18 = 0;
    }
    else {
      uint64_t v18 = v9 + 1;
    }
    *(void *)(v7 + 8 * v18) ^= v6 >> v10;
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall _HashTable.BucketIterator.advance()()
{
  uint64_t v1 = *(void *)(v0 + 16) + 1;
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = **(void **)v0 & 0x3FLL;
  uint64_t v3 = 1 << **(void **)v0;
  if (v1 != v3)
  {
LABEL_4:
    uint64_t v4 = *(void *)(v0 + 40);
    if (v4 >= v2) {
      goto LABEL_21;
    }
    uint64_t v5 = (v1 * v2) >> 6;
    if (v4)
    {
      if (__OFADD__(v2 << v2, 64))
      {
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      uint64_t v6 = (v2 << v2) + 126;
      if ((v2 << v2) + 64 >= 1) {
        uint64_t v6 = (v2 << v2) + 63;
      }
      if (v5 + 1 == v6 >> 6) {
        uint64_t v5 = 0;
      }
      else {
        ++v5;
      }
    }
    unint64_t v7 = *(void *)(*(void *)(v0 + 8) + 8 * v5);
    *(void *)(v0 + 24) = (*(void *)(v0 + 32) | (v7 << v4)) & (v3 - 1);
    uint64_t v3 = v2 - v4;
    if (!__OFSUB__(v2, v4))
    {
      BOOL v8 = v5 == 2 && v2 == 5;
      uint64_t v9 = 64;
      if (v8) {
        uint64_t v9 = 32;
      }
      uint64_t v4 = v7 >> v3;
      *(void *)(v0 + 32) = v7 >> v3;
      BOOL v10 = __OFSUB__(v9, v3);
      uint64_t v2 = v9 - v3;
      if (!v10) {
        goto LABEL_22;
      }
      __break(1u);
LABEL_21:
      unint64_t v11 = *(void *)(v0 + 32);
      *(void *)(v0 + 24) = v11 & (v3 - 1);
      *(void *)(v0 + 32) = v11 >> v2;
      uint64_t v2 = v4 - v2;
LABEL_22:
      *(void *)(v0 + 40) = v2;
      return;
    }
    __break(1u);
    goto LABEL_24;
  }
  if ((*(unsigned char *)(v0 + 48) & 1) == 0)
  {
    uint64_t v1 = 0;
    *(unsigned char *)(v0 + 48) = 1;
    *(void *)(v0 + 16) = 0;
    goto LABEL_4;
  }
LABEL_25:
  sub_24A5BC340();
  __break(1u);
}

uint64_t sub_24A486468()
{
  uint64_t result = sub_24A5BC780();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

double BigString.init(stringLiteral:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  sub_24A490BF0(a1, a2, v6);
  long long v4 = v6[1];
  *a3 = v6[0];
  a3[1] = v4;
  double result = *(double *)&v7;
  a3[2] = v7;
  return result;
}

double BigString.init(_:)@<D0>(long long *a1@<X0>, _OWORD *a2@<X8>)
{
  long long v3 = a1[1];
  v13[0] = *a1;
  v13[1] = v3;
  long long v4 = a1[3];
  v13[2] = a1[2];
  long long v5 = a1[4];
  long long v6 = a1[5];
  v12[0] = v4;
  v12[1] = v5;
  long long v7 = a1[6];
  v12[2] = v6;
  v12[3] = v7;
  sub_24A48D050(v13, (unint64_t *)v12, v10);
  long long v8 = v10[1];
  *a2 = v10[0];
  a2[1] = v8;
  double result = *(double *)&v11;
  a2[2] = v11;
  return result;
}

{
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  double result;
  _OWORD v10[2];
  long long v11;
  _OWORD v12[4];
  long long v13[3];

  long long v3 = a1[1];
  v13[0] = *a1;
  v13[1] = v3;
  long long v4 = a1[3];
  v13[2] = a1[2];
  long long v5 = a1[4];
  long long v6 = a1[5];
  v12[0] = v4;
  v12[1] = v5;
  long long v7 = a1[6];
  v12[2] = v6;
  v12[3] = v7;
  sub_24A48D050(v13, (unint64_t *)v12, v10);
  long long v8 = v10[1];
  *a2 = v10[0];
  a2[1] = v8;
  double result = *(double *)&v11;
  a2[2] = v11;
  return result;
}

uint64_t *_emptyDequeStorage.unsafeMutableAddressor()
{
  if (qword_26B177FD8 != -1) {
    swift_once();
  }
  return &_emptyDequeStorage;
}

uint64_t sub_24A4865F4()
{
  return swift_initClassMetadata2();
}

uint64_t sub_24A486638()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_24A4866E8()
{
  uint64_t result = sub_24A5BC780();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

double BigString.init(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  sub_24A490BF0(a1, a2, v6);
  long long v4 = v6[1];
  *a3 = v6[0];
  a3[1] = v4;
  double result = *(double *)&v7;
  a3[2] = v7;
  return result;
}

void (*BigString.unicodeScalars.modify(void *a1))(_OWORD **a1)
{
  long long v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[7] = v1;
  long long v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)long long v3 = *(_OWORD *)v1;
  *((_OWORD *)v3 + 1) = v4;
  *((_OWORD *)v3 + 2) = *(_OWORD *)(v1 + 32);
  v3[6] = 0;
  long long v5 = v3 + 6;
  MEMORY[0x24C5C7E90](v3 + 6, 8);
  uint64_t v6 = *v5;
  *(_OWORD *)uint64_t v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(void *)(v1 + 32) = 0;
  *(void *)(v1 + 40) = v6;
  return sub_24A487038;
}

unint64_t BigString.UnicodeScalarView.index(roundingUp:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t result = sub_24A4965FC(a1, a2, a3, a4);
  if ((result ^ a1) >= 0x400) {
    return sub_24A4A8740(result, v6, v7, v8, 1uLL) & 0xFFFFFFFFFFFFF8FFLL | 0x100;
  }
  return result;
}

uint64_t BigString.UnicodeScalarView.replaceSubrange(_:with:)(unint64_t *a1, long long *a2)
{
  long long v3 = a2[1];
  v10[0] = *a2;
  v10[1] = v3;
  long long v4 = a2[3];
  _OWORD v10[2] = a2[2];
  long long v5 = a2[4];
  long long v6 = a2[5];
  v9[0] = v4;
  v9[1] = v5;
  long long v7 = a2[6];
  v9[2] = v6;
  v9[3] = v7;
  sub_24A486920(a1, v10, (unint64_t *)v9);
  return sub_24A496BE8((uint64_t)a2);
}

void sub_24A486920(unint64_t *a1, long long *a2, unint64_t *a3)
{
  long long v4 = v3;
  uint64_t v8 = _s7BuilderVMa();
  MEMORY[0x270FA5388](v8);
  long long v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a3[4] ^ *a3) > 0x7FF)
  {
    unint64_t v16 = *a1;
    unint64_t v15 = a1[1];
    unint64_t v17 = a1[2];
    unint64_t v18 = a1[3];
    unint64_t v19 = *a1 >> 11;
    unint64_t v20 = a1[4];
    if (v19 == v20 >> 11)
    {
      long long v21 = a2[1];
      *(_OWORD *)v52 = *a2;
      *(_OWORD *)&v52[16] = v21;
      *(_OWORD *)&v52[32] = a2[2];
      uint64_t v22 = v15;
      unint64_t v23 = v17;
      uint64_t v24 = v18;
      sub_24A4974C4((uint64_t)v52, (uint64_t)&v64);
      sub_24A497498((uint64_t)&v64);
      sub_24A486D1C(a2, a3, v16, v22, v23, v24);
      return;
    }
    uint64_t v25 = *v4;
    uint64_t v26 = v4[4];
    unint64_t v27 = 2 * (v26 & 0x1FFFFFFFFFFFFFLL);
    if (!*v4) {
      unint64_t v27 = 0;
    }
    if (v27 >= v20 >> 10)
    {
      *(void *)&long long v51 = a1[5];
      *(void *)&long long v50 = a1[6];
      unint64_t v49 = a1[7];
      uint64_t v28 = v4[3];
      uint64_t v29 = v4[5];
      uint64_t v64 = v25;
      long long v65 = *(_OWORD *)(v4 + 1);
      uint64_t v66 = v28;
      uint64_t v67 = v26;
      uint64_t v68 = v29;
      uint64_t v30 = (uint64_t)&v11[*(int *)(v8 + 24)];
      v52[0] = 1;
      sub_24A48D2C8(v16, v15, v17, v18, (uint64_t *)0x100000000, v30);
      uint64_t v31 = (uint64_t)&v11[*(int *)(v8 + 20)];
      v52[0] = 1;
      sub_24A48D2C8(v20, v51, v50, v49, (uint64_t *)0x100000000, v31);
      if (v20 >> 11 >= v19)
      {
        sub_24A57660C(v19, v20 >> 11, v32, (uint64_t)v52);
        uint64_t v33 = v53;
        int v34 = v54;
        __int16 v35 = v55;
        int v36 = v57;
        __int16 v37 = v58;
        uint64_t v38 = v59;
        long long v39 = *(_OWORD *)&v52[8];
        long long v40 = *(_OWORD *)&v52[24];
        long long v41 = *(_OWORD *)&v52[40];
        long long v42 = v56;
        *(void *)long long v11 = *(void *)v52;
        *(_OWORD *)(v11 + 8) = v39;
        *(_OWORD *)(v11 + 24) = v40;
        *(_OWORD *)(v11 + 40) = v41;
        *((void *)v11 + 7) = v33;
        *((_WORD *)v11 + 34) = v35;
        *((_DWORD *)v11 + 16) = v34;
        *(_OWORD *)(v11 + 72) = v42;
        *((_WORD *)v11 + 46) = v37;
        *((_DWORD *)v11 + 22) = v36;
        *((void *)v11 + 12) = v38;
        long long v43 = *a2;
        long long v44 = a2[1];
        *(_OWORD *)&v52[32] = a2[2];
        *(_OWORD *)&v52[16] = v44;
        *(_OWORD *)v52 = v43;
        sub_24A4974C4((uint64_t)v52, (uint64_t)v63);
        sub_24A497498((uint64_t)v63);
        sub_24A56F084(a2, a3);
        sub_24A4EF384((uint64_t)v11, (uint64_t)v11);
        sub_24A491510((uint64_t *)v60);
        long long v51 = v60[0];
        long long v50 = v60[1];
        uint64_t v45 = v61;
        uint64_t v46 = v62;
        sub_24A51B224((uint64_t)v11);
        swift_unknownObjectRelease();
        long long v47 = v50;
        *(_OWORD *)long long v4 = v51;
        *((_OWORD *)v4 + 1) = v47;
        v4[4] = v45;
        v4[5] = v46;
        return;
      }
LABEL_21:
      __break(1u);
      return;
    }
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  unint64_t v12 = a1[4];
  unint64_t v13 = 2 * (v4[4] & 0x1FFFFFFFFFFFFFLL);
  if (!*v4) {
    unint64_t v13 = 0;
  }
  if (v13 < v12 >> 10)
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  unint64_t v14 = *a1;
  if (v12 >> 10 == *a1 >> 10) {
    return;
  }
  if (v12 >> 11 < v14 >> 11) {
    goto LABEL_19;
  }
  sub_24A54E1F4(v14 >> 11, v12 >> 11, v9);
}

uint64_t _s7BuilderVMa()
{
  uint64_t result = qword_26B177CA0;
  if (!qword_26B177CA0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_24A486D1C(long long *a1, unint64_t *a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v14 = _s7BuilderVMa();
  MEMORY[0x270FA5388](v14);
  unint64_t v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v17 = a3 >> 10;
  if (*(void *)v7) {
    unint64_t v18 = 2 * (*(void *)(v7 + 32) & 0x1FFFFFFFFFFFFFLL);
  }
  else {
    unint64_t v18 = 0;
  }
  if (v17 < v18)
  {
    if (a3 < 0x400)
    {
      sub_24A5B3F08(a1, a2);
      return;
    }
    if ((a2[4] ^ *a2) < 0x800)
    {
      sub_24A496BE8((uint64_t)a1);
      return;
    }
    sub_24A55ACEC(a3, a4, a5, a6, (uint64_t)v33);
    uint64_t v19 = sub_24A4E20A8();
    uint64_t v20 = (uint64_t)&v16[*(int *)(v14 + 20)];
    sub_24A5BC770();
    if (!__OFSUB__(v19, 1))
    {
      sub_24A4EDDE8(v19 - 1, (uint64_t *)v33, v20);
      long long v21 = &v16[*(int *)(v14 + 24)];
      uint64_t v22 = sub_24A5BC780();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(v21, v20, v22);
      long long v23 = v33[5];
      *((_OWORD *)v16 + 4) = v33[4];
      *((_OWORD *)v16 + 5) = v23;
      *((void *)v16 + 12) = v34;
      long long v24 = v33[1];
      *(_OWORD *)unint64_t v16 = v33[0];
      *((_OWORD *)v16 + 1) = v24;
      long long v25 = v33[3];
      *((_OWORD *)v16 + 2) = v33[2];
      *((_OWORD *)v16 + 3) = v25;
      long long v26 = *a1;
      long long v27 = a1[2];
      v38[1] = a1[1];
      v38[2] = v27;
      v38[0] = v26;
      sub_24A4914AC((uint64_t)v38, (uint64_t)v39, qword_26B177E60);
      sub_24A497498((uint64_t)v39);
      sub_24A56F084(a1, a2);
      sub_24A4EF384((uint64_t)v16, (uint64_t)v16);
      sub_24A491510((uint64_t *)v35);
      long long v32 = v35[0];
      long long v31 = v35[1];
      uint64_t v28 = v36;
      uint64_t v29 = v37;
      sub_24A496BE8((uint64_t)a1);
      sub_24A4E2248((uint64_t)v16, (uint64_t (*)(void))_s7BuilderVMa);
      swift_unknownObjectRelease();
      long long v30 = v31;
      *(_OWORD *)uint64_t v7 = v32;
      *(_OWORD *)(v7 + 16) = v30;
      *(void *)(v7 + 32) = v28;
      *(void *)(v7 + 40) = v29;
      return;
    }
LABEL_20:
    __break(1u);
    return;
  }
  if (v17 != v18)
  {
    __break(1u);
    goto LABEL_20;
  }
  sub_24A48CCD0(a1, a2);
}

void sub_24A487038(_OWORD **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (_OWORD *)*((void *)*a1 + 7);
  long long v3 = (*a1)[1];
  long long v4 = (*a1)[2];
  *uint64_t v2 = **a1;
  v2[1] = v3;
  v2[2] = v4;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  free(v1);
}

uint64_t sub_24A48709C()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t BigString.append(contentsOf:)()
{
  unint64_t v0 = sub_24A5BB830();
  unint64_t v2 = v1;
  uint64_t v4 = v3;
  unint64_t v6 = v5;
  swift_bridgeObjectRelease();
  return _s19CollectionsInternal9BigStringV6append10contentsOfySsn_tF_0(v0, v2, v4, v6);
}

unint64_t BigString.UTF16View.index(_:offsetBy:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  return sub_24A48720C(a1, a2, a3, a4, a5);
}

unint64_t sub_24A48720C(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v6 = (uint64_t)v5;
  long long v7 = v5[1];
  *(_OWORD *)long long v65 = *v5;
  *(_OWORD *)&v65[16] = v7;
  long long v66 = v5[2];
  uint64_t v8 = v66;
  if (*(void *)v65) {
    unint64_t v9 = 2 * (v66 & 0x1FFFFFFFFFFFFFLL);
  }
  else {
    unint64_t v9 = 0;
  }
  if (v9 < result >> 10)
  {
    __break(1u);
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  if (!*(void *)v65 || (uint64_t v67 = *(void *)v65, v68 = *(_OWORD *)&v65[8], v69 = *(void *)&v65[24], (v70 = v66) == 0))
  {
    if (!a5) {
      return 768;
    }
    goto LABEL_49;
  }
  uint64_t v11 = result;
  if (result >> 10 == ((2 * (void)v66) & 0x3FFFFFFFFFFFFFLL))
  {
    if (!a5) {
      return v11;
    }
    LOBYTE(v12) = 1;
  }
  else
  {
    unint64_t v12 = a5 >> 63;
  }
  uint64_t result = sub_24A496820(result, a2, a3, a4, v12);
  if (v15 != 1)
  {
    unint64_t v17 = result;
    unint64_t v18 = v14;
    uint64_t v19 = v15;
    uint64_t v62 = v13;
    unint64_t v63 = v14;
    uint64_t v64 = v15;
    unint64_t v60 = a5;
    unint64_t v61 = (16 * (int)result) & 0x4000 | ((unint64_t)result << 16) | (result >> 8) & 3 | 4;
    if (v13 == *((void *)&v66 + 1))
    {
      uint64_t v56 = v13;
      if (v15)
      {
        unint64_t v20 = v15 + 24 * ((v14 >> ((4 * *(unsigned char *)(v15 + 18) + 8) & 0x3C)) & 0xF);
        uint64_t v21 = *(void *)(v20 + 24);
        unint64_t v22 = *(void *)(v20 + 32);
        __int16 v23 = *(unsigned __int8 *)(v20 + 40);
        v16.i32[0] = *(_DWORD *)(v20 + 41);
        unint64_t v50 = vmovl_u8(v16).u64[0];
        swift_bridgeObjectRetain();
        v24.i64[0] = v50;
        uint64_t v25 = v21;
      }
      else
      {
        swift_unknownObjectRetain();
        sub_24A4895D4(v18, (uint64_t)v57);
        sub_24A496BE8(v6);
        uint64_t v25 = v57[0];
        unint64_t v22 = v57[1];
        __int16 v23 = v58;
        v26.i32[0] = v59;
        uint16x8_t v24 = vmovl_u8(v26);
      }
      uint32x4_t v27 = vmovl_u16((uint16x4_t)(v24.i64[0] & 0xFF00FF00FF00FFLL));
      v28.i64[0] = v27.u32[0];
      v28.i64[1] = v27.u32[1];
      uint64x2_t v29 = v28;
      v28.i64[0] = v27.u32[2];
      v28.i64[1] = v27.u32[3];
      uint64_t v51 = v29.i64[0];
      int8x16_t v30 = vorrq_s8((int8x16_t)vshlq_u64(v29, (uint64x2_t)xmmword_24A5BD070), (int8x16_t)vshlq_u64(v28, (uint64x2_t)xmmword_24A5BD060));
      uint64_t result = sub_24A487840((uint64_t *)&v61, &v60, v25, v22, vorr_s8(*(int8x8_t *)v30.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL)).u16[0] | v23);
      if (result)
      {
        swift_bridgeObjectRelease();
        unint64_t v33 = (v61 >> 16) - v17 + (v17 >> 11);
        if ((v61 & 0xC000) != 0) {
          uint64_t v34 = (v33 << 11) | 0x400;
        }
        else {
          uint64_t v34 = v33 << 11;
        }
        return v34 & 0xFFFFFFFFFFFFFF00 | BYTE2(v61);
      }
      uint64_t v49 = v17;
      if ((result & 0x100) == 0)
      {
        swift_unknownObjectRetain();
        sub_24A4A7744((uint64_t)&v62, (uint64_t *)&v60, 0, (uint64_t (*)(uint64_t, uint64_t *, void))sub_24A4A7C3C, (uint64_t (*)(uint64_t, uint64_t *, void, void *, uint64_t (*)(void, void, void)))sub_24A4A9024, (uint64_t (*)(void *, void *, uint64_t, void *, uint64_t *, void))sub_24A4A90A0);
        uint64_t result = sub_24A496BE8(v6);
        if (v62 == v56)
        {
          unint64_t v52 = v17;
          unint64_t v32 = v63;
          uint64_t v31 = v64;
          if (v64)
          {
            swift_bridgeObjectRetain();
          }
          else
          {
            swift_unknownObjectRetain();
            sub_24A4895D4(v32, (uint64_t)v57);
            sub_24A496BE8(v6);
          }
          swift_bridgeObjectRelease();
          unint64_t v38 = sub_24A5BB7B0();
          uint64_t v54 = (v52 >> 11) - v49;
          swift_unknownObjectRetain();
          uint64_t v39 = sub_24A4A59D8(v56, v18, v19, v56, v32, v31, (uint64_t (*)(unint64_t, unint64_t, uint64_t, uint64_t))sub_24A4A5C3C, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t))sub_24A4A617C);
          sub_24A496BE8(v6);
          uint64_t result = swift_bridgeObjectRelease();
          uint64_t v40 = v54 + v39;
          if (!__OFADD__(v54, v39))
          {
            BOOL v41 = __OFADD__(v40, v38 >> 16);
            uint64_t v42 = v40 + (v38 >> 16);
            if (!v41)
            {
              if ((v38 & 0xC000) != 0) {
                uint64_t v43 = (v42 << 11) | 0x400;
              }
              else {
                uint64_t v43 = v42 << 11;
              }
              return v43 & 0xFFFFFFFFFFFFFF00 | BYTE2(v38);
            }
            goto LABEL_54;
          }
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
          goto LABEL_55;
        }
        goto LABEL_51;
      }
      if (__OFADD__(v60, v51))
      {
LABEL_52:
        __break(1u);
        goto LABEL_53;
      }
      v60 += v51;
      swift_unknownObjectRetain();
      sub_24A4A7744((uint64_t)&v62, (uint64_t *)&v60, 0, (uint64_t (*)(uint64_t, uint64_t *, void))sub_24A4A7C3C, (uint64_t (*)(uint64_t, uint64_t *, void, void *, uint64_t (*)(void, void, void)))sub_24A4A9024, (uint64_t (*)(void *, void *, uint64_t, void *, uint64_t *, void))sub_24A4A90A0);
      sub_24A496BE8(v6);
      unint64_t v35 = v63;
      swift_unknownObjectRetain();
      unint64_t v36 = sub_24A498214();
      uint64_t result = sub_24A496BE8(v6);
      if (v35 != v36)
      {
        unint64_t v53 = v17;
        if (v62 == v56)
        {
          uint64_t v37 = v64;
          if (v64)
          {
            swift_bridgeObjectRetain();
          }
          else
          {
            swift_unknownObjectRetain();
            sub_24A4895D4(v35, (uint64_t)v57);
            sub_24A496BE8(v6);
          }
          swift_bridgeObjectRelease();
          unint64_t v44 = sub_24A5BB7B0();
          uint64_t v55 = (v53 >> 11) - v49;
          swift_unknownObjectRetain();
          uint64_t v45 = sub_24A4A59D8(v56, v18, v19, v56, v35, v37, (uint64_t (*)(unint64_t, unint64_t, uint64_t, uint64_t))sub_24A4A5C3C, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t))sub_24A4A617C);
          sub_24A496BE8(v6);
          uint64_t result = swift_bridgeObjectRelease();
          uint64_t v46 = v55 + v45;
          if (!__OFADD__(v55, v45))
          {
            BOOL v41 = __OFADD__(v46, v44 >> 16);
            uint64_t v47 = v46 + (v44 >> 16);
            if (!v41)
            {
              if ((v44 & 0xC000) != 0) {
                uint64_t v48 = (v47 << 11) | 0x400;
              }
              else {
                uint64_t v48 = v47 << 11;
              }
              return v48 & 0xFFFFFFFFFFFFFF00 | BYTE2(v44);
            }
            goto LABEL_57;
          }
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
          goto LABEL_58;
        }
LABEL_55:
        __break(1u);
        goto LABEL_56;
      }
      uint64_t v11 = (v8 << 11) | 0x300;
      swift_bridgeObjectRelease();
      return v11;
    }
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
LABEL_58:
  __break(1u);
  return result;
}

uint64_t sub_24A487840(uint64_t *a1, unint64_t *a2, uint64_t a3, unint64_t a4, __int16 a5)
{
  unint64_t v8 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    if (HIBYTE(a5) < (unint64_t)-(uint64_t)v8 || (uint64_t v14 = sub_24A5BB7A0(), (v15 & 1) != 0))
    {
      uint64_t result = sub_24A5BB7C0();
      if (__OFADD__(v8, result)) {
        goto LABEL_23;
      }
      int v17 = 0;
      int v18 = 0;
      *a2 = v8 + result;
      *a1 = 15;
      return v18 | v17;
    }
LABEL_9:
    *a1 = v14;
    *a2 = 0;
    int v18 = 256;
    int v17 = 1;
    return v18 | v17;
  }
  if (HIBYTE(a5) >= v8)
  {
    uint64_t v9 = a4 & 0x2000000000000000;
    uint64_t v10 = HIBYTE(a4) & 0xF;
    uint64_t v11 = a3 & 0xFFFFFFFFFFFFLL;
    uint64_t v13 = a3 & 0x800000000000000;
    uint64_t v14 = sub_24A5BB7A0();
    if (v19)
    {
      uint64_t v12 = a4 & 0x1000000000000000;
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  uint64_t v9 = a4 & 0x2000000000000000;
  uint64_t v10 = HIBYTE(a4) & 0xF;
  uint64_t v11 = a3 & 0xFFFFFFFFFFFFLL;
  uint64_t v12 = a4 & 0x1000000000000000;
  uint64_t v13 = a3 & 0x800000000000000;
LABEL_11:
  if (v9) {
    uint64_t v20 = v10;
  }
  else {
    uint64_t v20 = v11;
  }
  if (v13) {
    BOOL v21 = 1;
  }
  else {
    BOOL v21 = v12 == 0;
  }
  uint64_t v22 = 7;
  if (!v21) {
    uint64_t v22 = 11;
  }
  uint64_t v23 = v22 | (v20 << 16);
  uint64_t result = sub_24A5BB7C0();
  if (!__OFSUB__(v8, result))
  {
    int v17 = 0;
    *a2 = v8 - result;
    *a1 = v23;
    int v18 = 256;
    return v18 | v17;
  }
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t _s19CollectionsInternal10_HashTableV5scale13reservedScaleACSi_SitcfC_0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = (result << result) + 63;
  if (__OFADD__(result << result, 63))
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  uint64_t v4 = result;
  uint64_t v5 = (result << result) + 126;
  if (v2 >= 0) {
    uint64_t v5 = (result << result) + 63;
  }
  uint64_t v6 = v5 >> 6;
  type metadata accessor for _HashTable.Storage();
  size_t v7 = 8 * v6;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v4 | (result << 6);
  *(void *)(result + 24) = a2;
  if (v2 < -63) {
    goto LABEL_9;
  }
  uint64_t v8 = result;
  if ((unint64_t)(v2 + 63) >= 0x7F) {
    bzero((void *)(result + 32), v7);
  }
  return v8;
}

uint64_t type metadata accessor for _HashTable.Storage()
{
  uint64_t result = qword_26B177D18;
  if (!qword_26B177D18) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t BigString.UTF8View.index(_:offsetBy:limitedBy:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, int64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9)
{
  if (a5 < 0)
  {
    if (a1 >> 10 < a6 >> 10 || (uint64_t)sub_24A487BEC(a1, a2, a3, a4, a6, a7, a8, a9) <= a5) {
      return sub_24A495EFC(a1, a2, a3, a4, a5);
    }
    return 0;
  }
  if (a6 >> 10 >= a1 >> 10 && (uint64_t)sub_24A487BEC(a1, a2, a3, a4, a6, a7, a8, a9) < a5) {
    return 0;
  }
  return sub_24A495EFC(a1, a2, a3, a4, a5);
}

unint64_t sub_24A487BEC(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  long long v9 = v8[1];
  long long v57 = *v8;
  long long v58 = v9;
  long long v59 = v8[2];
  unint64_t v10 = 2 * (v59 & 0x1FFFFFFFFFFFFFLL);
  if (!(void)v57) {
    unint64_t v10 = 0;
  }
  unint64_t v11 = result >> 10;
  if (v10 < result >> 10)
  {
    __break(1u);
    goto LABEL_54;
  }
  unint64_t v12 = a5 >> 10;
  if (v10 < a5 >> 10)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  if (v11 == v12) {
    return 0;
  }
  unint64_t v52 = a5 >> 10;
  unint64_t v53 = result >> 10;
  BOOL v14 = v12 >= v11;
  if (v12 >= v11) {
    unint64_t v15 = result;
  }
  else {
    unint64_t v15 = a5;
  }
  if (v12 >= v11) {
    uint64_t v16 = a2;
  }
  else {
    uint64_t v16 = a6;
  }
  if (v14) {
    unint64_t v17 = a3;
  }
  else {
    unint64_t v17 = a7;
  }
  if (v14) {
    uint64_t v18 = a4;
  }
  else {
    uint64_t v18 = a8;
  }
  if (v14) {
    unint64_t v19 = a5;
  }
  else {
    unint64_t v19 = result;
  }
  if (v14) {
    uint64_t v20 = a6;
  }
  else {
    uint64_t v20 = a2;
  }
  if (v14) {
    unint64_t v21 = a7;
  }
  else {
    unint64_t v21 = a3;
  }
  if (v14) {
    uint64_t v22 = a8;
  }
  else {
    uint64_t v22 = a4;
  }
  unint64_t v23 = sub_24A496820(v15, v16, v17, v18, 0);
  uint64_t v55 = v24;
  unint64_t v54 = v25;
  uint64_t v27 = v26;
  uint64_t result = sub_24A496820(v19, v20, v21, v22, 1);
  if (v27 == 1) {
    goto LABEL_61;
  }
  uint64_t v31 = v30;
  if (v30 != 1)
  {
    unint64_t v32 = v29;
    if (v54 != v29)
    {
      if (v55 == *((void *)&v59 + 1))
      {
        uint64_t v38 = v28;
        unint64_t v50 = (16 * (int)v23) & 0x4000 | ((unint64_t)v23 << 16) | (v23 >> 8) & 3 | 4;
        unint64_t v49 = (16 * (int)result) & 0x4000 | ((unint64_t)result << 16) | (result >> 8) & 3 | 4;
        if (v27)
        {
          unint64_t v39 = v27 + 24 * ((v54 >> ((4 * *(unsigned char *)(v27 + 18) + 8) & 0x3C)) & 0xF);
          unint64_t v41 = *(void *)(v39 + 24);
          unint64_t v40 = *(void *)(v39 + 32);
          uint64_t result = swift_bridgeObjectRetain();
        }
        else
        {
          long long v62 = v57;
          long long v63 = v58;
          uint64_t v64 = v59;
          swift_unknownObjectRetain();
          sub_24A4895D4(v54, (uint64_t)v60);
          uint64_t result = sub_24A496BE8((uint64_t)v8);
          unint64_t v40 = *((void *)&v60[0] + 1);
          unint64_t v41 = *(void *)&v60[0];
        }
        if (v38 == v55)
        {
          if (v31)
          {
            unint64_t v42 = v31 + 24 * ((v32 >> ((4 * *(unsigned char *)(v31 + 18) + 8) & 0x3C)) & 0xF);
            unint64_t v43 = *(void *)(v42 + 32);
            unint64_t v51 = *(void *)(v42 + 24);
            swift_bridgeObjectRetain();
          }
          else
          {
            v60[0] = v57;
            v60[1] = v58;
            uint64_t v61 = v59;
            swift_unknownObjectRetain();
            sub_24A4895D4(v32, (uint64_t)v56);
            sub_24A496BE8((uint64_t)v8);
            unint64_t v43 = v56[1];
            unint64_t v51 = v56[0];
          }
          uint64_t v44 = sub_24A4A59D8(v55, v54, v27, v55, v32, v31, (uint64_t (*)(unint64_t, unint64_t, uint64_t, uint64_t))sub_24A4A5C3C, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t))sub_24A4A617C);
          unint64_t v45 = sub_24A4913AC(0xFuLL, v50, v41, v40);
          uint64_t result = swift_bridgeObjectRelease();
          BOOL v46 = __OFSUB__(v44, v45);
          unint64_t v47 = v44 - v45;
          if (!v46)
          {
            unint64_t v48 = sub_24A4913AC(0xFuLL, v49, v51, v43);
            uint64_t result = swift_bridgeObjectRelease();
            BOOL v46 = __OFADD__(v47, v48);
            unint64_t v13 = v47 + v48;
            if (v46)
            {
LABEL_60:
              __break(1u);
LABEL_61:
              __break(1u);
              goto LABEL_62;
            }
            if (v52 >= v53) {
              return v13;
            }
            goto LABEL_51;
          }
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
          goto LABEL_60;
        }
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    if (v55 == *((void *)&v59 + 1))
    {
      unint64_t v33 = (16 * (int)v23) & 0x4000 | ((unint64_t)v23 << 16) | (v23 >> 8) & 3 | 4;
      unint64_t v34 = (16 * (int)result) & 0x4000 | ((unint64_t)result << 16) | (result >> 8) & 3 | 4;
      if (v27)
      {
        unint64_t v35 = v27 + 24 * ((v54 >> ((4 * *(unsigned char *)(v27 + 18) + 8) & 0x3C)) & 0xF);
        unint64_t v37 = *(void *)(v35 + 24);
        unint64_t v36 = *(void *)(v35 + 32);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v62 = v57;
        long long v63 = v58;
        uint64_t v64 = v59;
        swift_unknownObjectRetain();
        sub_24A4895D4(v54, (uint64_t)v60);
        sub_24A496BE8((uint64_t)v8);
        unint64_t v36 = *((void *)&v60[0] + 1);
        unint64_t v37 = *(void *)&v60[0];
      }
      unint64_t v13 = sub_24A4913AC(v33, v34, v37, v36);
      uint64_t result = swift_bridgeObjectRelease();
      if (v52 >= v53) {
        return v13;
      }
LABEL_51:
      BOOL v46 = __OFSUB__(0, v13);
      unint64_t v13 = -(uint64_t)v13;
      if (!v46) {
        return v13;
      }
      goto LABEL_59;
    }
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
LABEL_62:
  __break(1u);
  return result;
}

uint64_t OrderedSet.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

__n128 BigString.subscript.getter@<Q0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 32);
  uint64_t v6 = *(void *)(v2 + 40);
  unint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  unint64_t v9 = a1[2];
  uint64_t v10 = a1[3];
  __n128 v23 = *(__n128 *)(v2 + 16);
  v25[0] = *(_OWORD *)v2;
  long long v24 = v25[0];
  v25[1] = v23;
  v25[2] = *(_OWORD *)(v2 + 32);
  sub_24A4974C4((uint64_t)v25, (uint64_t)v26);
  sub_24A497498((uint64_t)v26);
  unint64_t v11 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(v7, v8, v9, v10);
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  unint64_t v18 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(a1[4], a1[5], a1[6], a1[7]);
  __n128 result = v23;
  *(_OWORD *)a2 = v24;
  *(__n128 *)(a2 + 16) = v23;
  *(void *)(a2 + 32) = v5;
  *(void *)(a2 + 40) = v6;
  *(void *)(a2 + 48) = v11;
  *(void *)(a2 + 56) = v13;
  *(void *)(a2 + 64) = v15;
  *(void *)(a2 + 72) = v17;
  *(void *)(a2 + 80) = v18;
  *(void *)(a2 + 88) = v20;
  *(void *)(a2 + 96) = v21;
  *(void *)(a2 + 104) = v22;
  return result;
}

unint64_t _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  int64_t v12 = a1 >> 11;
  unint64_t v13 = *(void *)v5;
  int64_t v14 = *(void *)(v5 + 32);
  if (*(void *)v5) {
    int64_t v15 = *(void *)(v5 + 32);
  }
  else {
    int64_t v15 = 0;
  }
  if (v15 < v12)
  {
    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
    goto LABEL_98;
  }
  uint64_t v6 = v5;
  if (a1 < 0x800)
  {
    char v16 = 0;
LABEL_12:
    unint64_t v18 = sub_24A496820(a1, a2, a3, a4, v16) & 0xFFFFFFFFFFFFF8FFLL;
    return v18 | 0x300;
  }
  if (v13) {
    BOOL v17 = v12 < v14;
  }
  else {
    BOOL v17 = 0;
  }
  if (!v17)
  {
    char v16 = 1;
    goto LABEL_12;
  }
  uint64_t v78 = *(void *)(v5 + 16);
  uint64_t v79 = *(void *)(v5 + 8);
  uint64_t v77 = *(void *)(v5 + 24);
  unint64_t v4 = *(void *)(v5 + 40);
  unint64_t result = sub_24A496820(a1, a2, a3, a4, 0);
  unint64_t v9 = result;
  unint64_t v7 = v21;
  uint64_t v8 = v22;
  if ((result & 0x200) != 0) {
    return sub_24A496820(result, v20, v21, v22, 0);
  }
  if (v22 == 1)
  {
LABEL_103:
    __break(1u);
    return result;
  }
  uint64_t v94 = v20;
  unint64_t v95 = v21;
  unint64_t v96 = v22;
  if (v20 != v4)
  {
LABEL_98:
    __break(1u);
    goto LABEL_99;
  }
  int64_t v76 = v14;
  if (v22)
  {
    unint64_t v23 = v22 + 24 * ((v21 >> ((4 * *(unsigned char *)(v22 + 18) + 8) & 0x3C)) & 0xF);
    uint64_t v84 = *(void *)(v23 + 24);
    unint64_t v86 = *(void *)(v23 + 32);
    LODWORD(v85) = *(unsigned __int8 *)(v23 + 40);
    unsigned int v83 = *(unsigned __int8 *)(v23 + 41);
    LODWORD(v5) = *(unsigned __int8 *)(v23 + 42);
    unsigned int v24 = *(unsigned __int8 *)(v23 + 43);
    unint64_t v10 = *(unsigned __int8 *)(v23 + 44);
    unint64_t v11 = *(unsigned __int8 *)(v23 + 45);
    unint64_t result = swift_bridgeObjectRetain();
    unsigned int v25 = v24;
    unsigned int v26 = v85;
    unint64_t v27 = v11;
  }
  else
  {
    unint64_t v105 = v13;
    uint64_t v106 = v79;
    uint64_t v107 = v78;
    uint64_t v108 = v77;
    int64_t v109 = v14;
    swift_unknownObjectRetain();
    sub_24A4895D4(v7, (uint64_t)&v102);
    unint64_t result = sub_24A496BE8(v5);
    unint64_t v86 = *((void *)&v102 + 1);
    uint64_t v84 = v102;
    unsigned int v26 = v103;
    unsigned int v83 = BYTE1(v103);
    LODWORD(v5) = BYTE2(v103);
    unsigned int v25 = BYTE3(v103);
    unint64_t v10 = BYTE4(v103);
    unint64_t v27 = BYTE5(v103);
  }
  unint64_t v28 = v9;
  if (v10 >= v26) {
    goto LABEL_42;
  }
  unint64_t v11 = v10;
  v74 = (uint64_t *)v27;
  unint64_t v75 = v9;
  LODWORD(v82) = v25;
  LODWORD(v85) = v26;
  uint64_t v71 = HIBYTE(v86) & 0xF;
  if ((v86 & 0x1000000000000000) != 0) {
    goto LABEL_100;
  }
  unint64_t v29 = v84 & 0xFFFFFFFFFFFFLL;
  if ((v86 & 0x2000000000000000) != 0) {
    unint64_t v29 = HIBYTE(v86) & 0xF;
  }
  unsigned int v30 = v83;
  if (v29 < v10)
  {
    __break(1u);
LABEL_102:
    __break(1u);
    goto LABEL_103;
  }
  unint64_t v80 = ((unint64_t)v10 << 16) | 4;
  while (1)
  {
    unint64_t v72 = v11;
    unint64_t v31 = v26 | ((unint64_t)v30 << 8) | ((unint64_t)v5 << 16) | ((unint64_t)v25 << 24) | (v11 << 32) | (v27 << 40);
    unint64_t v11 = v86;
    unint64_t result = sub_24A48F3EC(v84, v86, v31);
    unint64_t v32 = ((16 * (int)v9) & 0x4000 | ((unint64_t)v9 << 16)) >> 14;
    unint64_t v33 = result >> 14;
    if (v32 == v80 >> 14 || v32 == v33)
    {
      swift_bridgeObjectRelease();
      return v9;
    }
    unint64_t v27 = (unint64_t)v74;
    if (v33 < v32)
    {
      unint64_t v35 = result;
      swift_bridgeObjectRelease();
      unint64_t v18 = BYTE2(v35) | (((v35 >> 16) - v75 + (v9 >> 11)) << 11);
      return v18 | 0x300;
    }
    unint64_t v28 = v75;
    unsigned int v26 = v85;
    unsigned int v25 = v82;
    if (v80 >> 14 < v32)
    {
      if ((v86 & 0x1000000000000000) != 0)
      {
        uint64_t v36 = v84;
        unint64_t v39 = v86;
        unint64_t v38 = MEMORY[0x24C5C6A60](15, v72, v84, v86);
        goto LABEL_93;
      }
      uint64_t v36 = v84;
      unint64_t v37 = v84 & 0xFFFFFFFFFFFFLL;
      if ((v86 & 0x2000000000000000) != 0) {
        unint64_t v37 = v71;
      }
      if (v37 >= v72)
      {
        unint64_t v38 = (v72 << 16) | 4;
        unint64_t v39 = v86;
LABEL_93:
        swift_bridgeObjectRetain();
        unint64_t v61 = sub_24A494C00(v38, v36, v39);
        uint64_t v63 = v62;
        uint64_t v65 = v64;
        uint64_t v67 = v66;
        swift_bridgeObjectRelease();
        unint64_t v68 = MEMORY[0x24C5C7180]((16 * (int)v9) & 0x4000 | ((unint64_t)v9 << 16) | (v9 >> 8) & 3 | 4, v61, v63, v65, v67);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v18 = BYTE2(v68) | (((v68 >> 16) - v75 + (v9 >> 11)) << 11);
        return v18 | 0x300;
      }
      goto LABEL_102;
    }
LABEL_42:
    unint64_t v81 = v4;
    unint64_t v4 = (v9 >> 11) - v28;
    if (v7 > *(unsigned __int8 *)(v13 + 18))
    {
      v74 = (uint64_t *)&v95;
      unint64_t v75 = v13 + 24;
      while (1)
      {
        unint64_t v85 = v4;
        unint64_t v4 = *(unsigned __int8 *)(v13 + 18);
        swift_unknownObjectRetain();
        if (v7 <= v4) {
          goto LABEL_95;
        }
        if (v8)
        {
          char v40 = (4 * *(unsigned char *)(v8 + 18) + 8) & 0x3C;
          if (((v7 >> v40) & 0xF) != 0)
          {
            unint64_t v7 = ((((v7 >> v40) & 0xF) - 1) << v40) | ((-15 << v40) - 1) & v7;
            unint64_t v95 = v7;
            sub_24A496BE8(v6);
            unint64_t v4 = v81;
            goto LABEL_75;
          }
        }
        unint64_t v4 = (4 * *(unsigned char *)(v13 + 18) + 8) & 0x3C;
        unint64_t v5 = (v7 >> v4) & 0xF;
        if (*(unsigned char *)(v13 + 18)) {
          break;
        }
        if (!v5) {
          goto LABEL_87;
        }
        unint64_t v7 = ((v5 - 1) << v4) | ((-15 << v4) - 1) & v7;
        unint64_t v95 = v7;
        sub_24A496BE8(v6);
        unint64_t v96 = v13;
        uint64_t v8 = v13;
        unint64_t v4 = v81;
LABEL_76:
        if (v94 != v4) {
          goto LABEL_96;
        }
        if (v8)
        {
          unint64_t v57 = v8 + 24 * ((v7 >> ((4 * *(unsigned char *)(v8 + 18) + 8) & 0x3C)) & 0xF);
          unint64_t v58 = *(void *)(v57 + 32);
          uint64_t v84 = *(void *)(v57 + 24);
          unsigned int v59 = *(unsigned __int8 *)(v57 + 40);
          unsigned int v83 = *(unsigned __int8 *)(v57 + 41);
          unint64_t v11 = *(unsigned __int8 *)(v57 + 42);
          LODWORD(v82) = *(unsigned __int8 *)(v57 + 43);
          unint64_t v10 = *(unsigned __int8 *)(v57 + 44);
          unint64_t v9 = *(unsigned __int8 *)(v57 + 45);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          unint64_t v86 = v58;
        }
        else
        {
          v97[0] = v13;
          v97[1] = v79;
          v97[2] = v78;
          v97[3] = v77;
          v97[4] = v76;
          swift_unknownObjectRetain();
          unint64_t v5 = (unint64_t)v97;
          sub_24A4895D4(v7, (uint64_t)v87);
          sub_24A496BE8(v6);
          swift_bridgeObjectRelease();
          uint64_t v84 = v87[0];
          unint64_t v86 = v87[1];
          unsigned int v59 = v88;
          unsigned int v83 = v89;
          unint64_t v11 = v90;
          LODWORD(v82) = v91;
          unint64_t v10 = v92;
          unint64_t v9 = v93;
        }
        uint64_t v60 = v59;
        unint64_t v4 = v85 - v59;
        if (__OFSUB__(v85, v60)) {
          goto LABEL_97;
        }
        if (v10 < v60)
        {
          LODWORD(v5) = v11;
          unint64_t v27 = v9;
          goto LABEL_90;
        }
        LODWORD(v5) = v11;
        unint64_t v27 = v9;
        if (v7 <= *(unsigned __int8 *)(v13 + 18)) {
          goto LABEL_90;
        }
      }
      if (v5 < *(unsigned __int16 *)(v13 + 16))
      {
        uint64_t v8 = *(void *)(v75 + 40 * ((v7 >> v4) & 0xF));
        char v41 = (4 * *(unsigned char *)(v8 + 18) + 8) & 0x3C;
        unint64_t v10 = (v7 >> v41) & 0xF;
        if (*(unsigned char *)(v8 + 18))
        {
          unint64_t v11 = v8 + 24;
          if (v10 < *(unsigned __int16 *)(v8 + 16))
          {
            unint64_t v9 = *(void *)(v11 + 40 * ((v7 >> v41) & 0xF));
            int v42 = (4 * *(unsigned char *)(v9 + 18) + 8) & 0x3C;
            unint64_t v43 = (v7 >> v42) & 0xF;
            if (*(unsigned char *)(v9 + 18))
            {
              if (v43 < *(unsigned __int16 *)(v9 + 16))
              {
                unint64_t v44 = *(void *)(v9 + 24 + 40 * ((v7 >> v42) & 0xF));
                int v45 = *(unsigned __int8 *)(v44 + 18);
                char v46 = (4 * v45 + 8) & 0x3C;
                uint64_t v47 = (v7 >> v46) & 0xF;
                v87[0] = v47;
                if (v45)
                {
                  unint64_t v82 = v9 + 24;
                  unsigned int v83 = v42;
                  uint64_t v84 = (v7 >> v42) & 0xF;
                  uint64_t v71 = v44 + 24;
                  v73 = (unsigned __int16 *)(v44 + 16);
                  char v70 = v45;
                  sub_24A497498(v6);
                  swift_unknownObjectRetain();
                  swift_unknownObjectRetain();
                  swift_unknownObjectRetain();
                  LOBYTE(v73) = sub_24A5B49C4(v73, v71, v87, (uint64_t)&v94, v70);
                  swift_unknownObjectRelease();
                  if (v73)
                  {
LABEL_72:
                    swift_unknownObjectRelease();
LABEL_73:
                    swift_unknownObjectRelease();
LABEL_74:
                    unint64_t v4 = v81;
                    sub_24A496BE8(v6);
                    sub_24A496BE8(v6);
                    unint64_t v7 = v95;
LABEL_75:
                    uint64_t v8 = v96;
                    goto LABEL_76;
                  }
LABEL_70:
                  unint64_t v7 = v84;
                  if (v84)
                  {
                    unint64_t v95 = v95 & ((-15 << v83) - 1) | ((v84 - 1) << v83);
                    unint64_t v54 = (long long *)(v82 + 40 * ((int)v84 - 1));
                    uint64_t v55 = *((void *)v54 + 4);
                    long long v56 = v54[1];
                    long long v102 = *v54;
                    long long v103 = v56;
                    uint64_t v104 = v55;
                    swift_unknownObjectRetain();
                    unint64_t v5 = (unint64_t)sub_24A5B48F8((uint64_t *)&v95);
                    sub_24A496BE8((uint64_t)&v102);
                    unint64_t v96 = v5;
                    goto LABEL_72;
                  }
                  swift_unknownObjectRelease();
                  if (!v10) {
                    goto LABEL_85;
                  }
                  goto LABEL_66;
                }
                if (v47)
                {
                  unint64_t v95 = ((v47 - 1) << v46) | ((-15 << v46) - 1) & v7;
                  unint64_t v96 = v44;
                  sub_24A497498(v6);
                  swift_unknownObjectRetain();
                  swift_unknownObjectRetain();
                  goto LABEL_72;
                }
              }
              unint64_t v82 = v9 + 24;
              unsigned int v83 = v42;
              uint64_t v84 = (v7 >> v42) & 0xF;
              sub_24A497498(v6);
              swift_unknownObjectRetain();
              swift_unknownObjectRetain();
              goto LABEL_70;
            }
            if (v43)
            {
              unint64_t v95 = ((v43 - 1) << v42) | ((-15 << v42) - 1) & v7;
              unint64_t v96 = v9;
              sub_24A497498(v6);
              swift_unknownObjectRetain();
              goto LABEL_73;
            }
          }
          sub_24A497498(v6);
          swift_unknownObjectRetain();
          if (!v10)
          {
LABEL_85:
            swift_unknownObjectRelease();
            if (!v5)
            {
LABEL_86:
              sub_24A496BE8(v6);
LABEL_87:
              sub_24A496BE8(v6);
              __break(1u);
              goto LABEL_88;
            }
            goto LABEL_62;
          }
LABEL_66:
          unint64_t v95 = v95 & ((-15 << v41) - 1) | ((v10 - 1) << v41);
          unint64_t v51 = v11 + 40 * ((int)v10 - 1);
          uint64_t v52 = *(void *)(v51 + 32);
          long long v53 = *(_OWORD *)(v51 + 16);
          v100[0] = *(_OWORD *)v51;
          v100[1] = v53;
          uint64_t v101 = v52;
          swift_unknownObjectRetain();
          unint64_t v5 = (unint64_t)sub_24A5B48F8((uint64_t *)&v95);
          sub_24A496BE8((uint64_t)v100);
          unint64_t v96 = v5;
          goto LABEL_73;
        }
        if (v10)
        {
          unint64_t v95 = ((v10 - 1) << v41) | ((-15 << v41) - 1) & v7;
          unint64_t v96 = v8;
          swift_unknownObjectRetain();
          goto LABEL_74;
        }
      }
      swift_unknownObjectRetain();
      if (!v5) {
        goto LABEL_86;
      }
LABEL_62:
      unint64_t v95 = v95 & ((-15 << v4) - 1) | ((v5 - 1) << v4);
      unint64_t v48 = v75 + 40 * ((int)v5 - 1);
      uint64_t v49 = *(void *)(v48 + 32);
      long long v50 = *(_OWORD *)(v48 + 16);
      v98[0] = *(_OWORD *)v48;
      v98[1] = v50;
      uint64_t v99 = v49;
      swift_unknownObjectRetain();
      unint64_t v5 = (unint64_t)sub_24A5B48F8((uint64_t *)&v95);
      sub_24A496BE8((uint64_t)v98);
      unint64_t v96 = v5;
      goto LABEL_74;
    }
LABEL_88:
    LODWORD(v82) = v25;
    uint64_t v60 = v26;
LABEL_90:
    uint64_t v6 = v86;
    unint64_t v5 = sub_24A48F3EC(v84, v86, v60 | ((unint64_t)v83 << 8) | ((unint64_t)v5 << 16) | ((unint64_t)v82 << 24) | (v10 << 32) | (v27 << 40));
    swift_bridgeObjectRelease();
    if (!__OFADD__(v4, v5 >> 16)) {
      return BYTE2(v5) | ((v4 + (v5 >> 16)) << 11) | 0x300;
    }
LABEL_99:
    __break(1u);
LABEL_100:
    uint64_t v69 = MEMORY[0x24C5C6A60](15, v11, v84, v86);
    unsigned int v25 = v82;
    unsigned int v26 = v85;
    unint64_t v27 = (unint64_t)v74;
    unint64_t v80 = v69;
    unsigned int v30 = v83;
  }
}

double BigString.init()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v4 = 0;
  MEMORY[0x24C5C7E90](&v4, 8);
  uint64_t v2 = v4;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = v2;
  return result;
}

__n128 BigString.utf16.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 40);
  __n128 v6 = *(__n128 *)(v1 + 16);
  v8[0] = *(_OWORD *)v1;
  long long v7 = v8[0];
  v8[1] = v6;
  v8[2] = *(_OWORD *)(v1 + 32);
  sub_24A4974C4((uint64_t)v8, (uint64_t)v9);
  sub_24A497498((uint64_t)v9);
  __n128 result = v6;
  *(_OWORD *)a1 = v7;
  *(__n128 *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = v4;
  return result;
}

uint64_t sub_24A488D78()
{
  uint64_t v0 = sub_24A488DCC();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_24A488DCC()
{
  uint64_t v0 = sub_24A5BC240();
  return MEMORY[0x270F9E6B8](v0);
}

uint64_t _sSS19CollectionsInternalEySSAA9BigStringVcfC_0(_OWORD *a1)
{
  long long v2 = a1[1];
  long long v72 = a1[2];
  *(_OWORD *)uint64_t v71 = *a1;
  *(_OWORD *)&v71[16] = v2;
  uint64_t v3 = *(void *)v71;
  if (!*(void *)v71
    || (long long v4 = *a1,
        long long v5 = a1[1],
        long long v6 = a1[2],
        long long v74 = *(_OWORD *)&v71[8],
        uint64_t v73 = *(void *)v71,
        uint64_t v75 = *(void *)&v71[24],
        (uint64_t v76 = v72) == 0))
  {
    sub_24A496BE8((uint64_t)a1);
    return 0;
  }
  if (!*(unsigned char *)(*(void *)v71 + 18) && *(_WORD *)(*(void *)v71 + 16) == 1)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    sub_24A4895D4(0, (uint64_t)v65);
    sub_24A496BE8((uint64_t)a1);
    sub_24A496BE8((uint64_t)a1);
    sub_24A496BE8((uint64_t)a1);
    return *(void *)&v65[0];
  }
  long long v57 = v6;
  long long v59 = v5;
  long long v61 = v4;
  uint64_t v69 = 0;
  unint64_t v70 = 0xE000000000000000;
  MEMORY[0x24C5C68D0]();
  uint64_t v8 = *((void *)&v72 + 1);
  unint64_t v9 = *(unsigned __int8 *)(*(void *)v71 + 18);
  swift_unknownObjectRetain_n();
  if (sub_24A498214() <= v9)
  {
    sub_24A496BE8((uint64_t)a1);
    uint64_t result = sub_24A496BE8((uint64_t)a1);
    uint64_t v10 = 0;
  }
  else
  {
    swift_unknownObjectRetain();
    uint64_t v10 = sub_24A53852C(v9);
    sub_24A496BE8((uint64_t)a1);
    sub_24A496BE8((uint64_t)a1);
    uint64_t result = sub_24A496BE8((uint64_t)a1);
  }
  v65[0] = v61;
  v65[1] = v59;
  v65[2] = v57;
  uint64_t v66 = *((void *)&v72 + 1);
  uint64_t v67 = v9;
  uint64_t v68 = v10;
  if (!v10)
  {
LABEL_52:
    sub_24A496BE8((uint64_t)a1);
    sub_24A496BE8((uint64_t)a1);
    return v69;
  }
  uint64_t v60 = *(void *)v71 + 24;
  uint64_t v63 = *((void *)&v72 + 1);
  while (v66 == v8)
  {
    unint64_t v11 = v67;
    int v12 = *(unsigned __int8 *)(v3 + 18);
    swift_unknownObjectRetain_n();
    sub_24A497498((uint64_t)a1);
    swift_bridgeObjectRetain();
    swift_unknownObjectRelease();
    uint64_t v13 = *(unsigned __int16 *)(v3 + 16);
    char v14 = *(unsigned char *)(v3 + 18);
    sub_24A496BE8((uint64_t)a1);
    uint64_t result = sub_24A496BE8((uint64_t)a1);
    if (v11 >= (((-15 << ((4 * v14 + 8) & 0x3C)) - 1) & v12 | (unint64_t)(v13 << ((4 * v14 + 8) & 0x3C)))) {
      goto LABEL_55;
    }
    char v15 = (4 * *(unsigned char *)(v10 + 18) + 8) & 0x3C;
    unint64_t v16 = ((v11 >> v15) & 0xF) + 1;
    if (v16 < *(unsigned __int16 *)(v10 + 16))
    {
      uint64_t v67 = (v16 << v15) | ((-15 << v15) - 1) & v11;
LABEL_13:
      sub_24A496BE8((uint64_t)a1);
      goto LABEL_14;
    }
    char v17 = (4 * *(unsigned char *)(v3 + 18) + 8) & 0x3C;
    uint64_t v18 = (v11 >> v17) & 0xF;
    if (*(unsigned char *)(v3 + 18))
    {
      uint64_t v10 = *(void *)(v60 + 40 * ((v11 >> v17) & 0xF));
      char v19 = (4 * *(unsigned char *)(v10 + 18) + 8) & 0x3C;
      uint64_t v20 = (v11 >> v19) & 0xF;
      if (*(unsigned char *)(v10 + 18))
      {
        uint64_t v21 = v10 + 24;
        uint64_t v22 = *(void *)(v10 + 24 + 40 * ((v11 >> v19) & 0xF));
        char v23 = (4 * *(unsigned char *)(v22 + 18) + 8) & 0x3C;
        uint64_t v24 = (v11 >> v23) & 0xF;
        if (*(unsigned char *)(v22 + 18))
        {
          uint64_t v62 = *(void *)(v60 + 40 * ((v11 >> v17) & 0xF));
          uint64_t v10 = *(void *)(v22 + 24 + 40 * ((v11 >> v23) & 0xF));
          int v25 = *(unsigned __int8 *)(v10 + 18);
          char v26 = (4 * v25 + 8) & 0x3C;
          unint64_t v64 = (v11 >> v26) & 0xF;
          if (v25)
          {
            uint64_t v55 = (v11 >> v23) & 0xF;
            char v56 = v19;
            char v53 = v23;
            uint64_t v54 = v22 + 24;
            uint64_t v58 = v21;
            uint64_t v27 = v22;
            sub_24A497498((uint64_t)a1);
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            char v28 = sub_24A538E54(v10 + 24, (uint64_t *)&v64, (uint64_t)&v66, v10, v25);
            swift_unknownObjectRelease();
            if (v28)
            {
              uint64_t v10 = v68;
              goto LABEL_39;
            }
LABEL_36:
            uint64_t v33 = v55 + 1;
            if (v55 + 1 < (unint64_t)*(unsigned __int16 *)(v27 + 16))
            {
              unint64_t v34 = (long long *)(v54 + 40 * v33);
              long long v36 = *v34;
              long long v35 = v34[1];
              uint64_t v82 = *((void *)v34 + 4);
              v81[0] = v36;
              v81[1] = v35;
              uint64_t result = v36;
              unsigned int v37 = *(unsigned __int8 *)(v36 + 18) + 1;
              if ((v37 >> 8)) {
                goto LABEL_57;
              }
              uint64_t v67 = ((-256 << (4 * (v37 & 0xF))) | 0xFF) & (v67 & ((-15 << v53) - 1) | (v33 << v53));
              unint64_t v38 = v67;
              swift_unknownObjectRetain();
              uint64_t v10 = sub_24A53852C(v38);
              sub_24A496BE8((uint64_t)v81);
              uint64_t v68 = v10;
              goto LABEL_39;
            }
            swift_unknownObjectRelease();
            uint64_t v10 = v62;
LABEL_42:
            uint64_t v39 = v20 + 1;
            if (v20 + 1 < (unint64_t)*(unsigned __int16 *)(v10 + 16))
            {
              uint64_t v40 = v58 + 40 * v39;
              long long v42 = *(_OWORD *)v40;
              long long v41 = *(_OWORD *)(v40 + 16);
              uint64_t v80 = *(void *)(v40 + 32);
              v79[0] = v42;
              v79[1] = v41;
              uint64_t result = v42;
              unsigned int v43 = *(unsigned __int8 *)(v42 + 18) + 1;
              if ((v43 >> 8)) {
                goto LABEL_58;
              }
              uint64_t v67 = ((-256 << (4 * (v43 & 0xF))) | 0xFF) & (v67 & ((-15 << v56) - 1) | (v39 << v56));
              unint64_t v44 = v67;
              swift_unknownObjectRetain();
              uint64_t v10 = sub_24A53852C(v44);
              sub_24A496BE8((uint64_t)v79);
              uint64_t v68 = v10;
              swift_unknownObjectRelease();
              uint64_t v8 = v63;
              goto LABEL_49;
            }
            swift_unknownObjectRelease();
LABEL_46:
            uint64_t v45 = v18 + 1;
            if (v18 + 1 >= (unint64_t)*(unsigned __int16 *)(v3 + 16))
            {
              sub_24A496BE8((uint64_t)a1);
              int v29 = *(unsigned __int8 *)(v3 + 18);
              goto LABEL_51;
            }
            uint64_t v46 = v60 + 40 * v45;
            long long v48 = *(_OWORD *)v46;
            long long v47 = *(_OWORD *)(v46 + 16);
            uint64_t v78 = *(void *)(v46 + 32);
            v77[0] = v48;
            v77[1] = v47;
            uint64_t result = v48;
            unsigned int v49 = *(unsigned __int8 *)(v48 + 18) + 1;
            uint64_t v8 = v63;
            if ((v49 >> 8)) {
              goto LABEL_56;
            }
            uint64_t v67 = ((-256 << (4 * (v49 & 0xF))) | 0xFF) & (v67 & ((-15 << v17) - 1) | (v45 << v17));
            unint64_t v50 = v67;
            swift_unknownObjectRetain();
            uint64_t v10 = sub_24A53852C(v50);
            sub_24A496BE8((uint64_t)v77);
            uint64_t v68 = v10;
            goto LABEL_49;
          }
          uint64_t v31 = v22;
          unint64_t v32 = ((v11 >> v26) & 0xF) + 1;
          if (v32 >= *(unsigned __int16 *)(v10 + 16))
          {
            uint64_t v55 = (v11 >> v23) & 0xF;
            char v56 = v19;
            char v53 = v23;
            uint64_t v54 = v22 + 24;
            uint64_t v58 = v21;
            sub_24A497498((uint64_t)a1);
            swift_unknownObjectRetain();
            uint64_t v27 = v31;
            swift_unknownObjectRetain();
            goto LABEL_36;
          }
          uint64_t v67 = (v32 << v26) | ((-15 << v26) - 1) & v11;
          uint64_t v68 = v10;
          sub_24A497498((uint64_t)a1);
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
LABEL_39:
          swift_unknownObjectRelease();
        }
        else
        {
          if (v24 + 1 >= (unint64_t)*(unsigned __int16 *)(v22 + 16))
          {
            char v56 = (4 * *(unsigned char *)(v10 + 18) + 8) & 0x3C;
            uint64_t v58 = v10 + 24;
            sub_24A497498((uint64_t)a1);
            swift_unknownObjectRetain();
            goto LABEL_42;
          }
          uint64_t v67 = ((v24 + 1) << v23) | ((-15 << v23) - 1) & v11;
          uint64_t v68 = v22;
          uint64_t v30 = v22;
          sub_24A497498((uint64_t)a1);
          swift_unknownObjectRetain();
          uint64_t v10 = v30;
        }
        uint64_t v8 = v63;
        swift_unknownObjectRelease();
      }
      else
      {
        if (v20 + 1 >= (unint64_t)*(unsigned __int16 *)(v10 + 16))
        {
          swift_unknownObjectRetain();
          goto LABEL_46;
        }
        uint64_t v67 = ((v20 + 1) << v19) | ((-15 << v19) - 1) & v11;
        uint64_t v68 = v10;
        swift_unknownObjectRetain();
        uint64_t v8 = v63;
      }
LABEL_49:
      sub_24A496BE8((uint64_t)a1);
      goto LABEL_13;
    }
    if (v18 + 1 >= (unint64_t)*(unsigned __int16 *)(v3 + 16))
    {
      int v29 = 0;
LABEL_51:
      uint64_t v8 = v63;
      uint64_t v51 = *(unsigned __int16 *)(v3 + 16);
      char v52 = *(unsigned char *)(v3 + 18);
      swift_unknownObjectRetain();
      sub_24A496BE8((uint64_t)a1);
      sub_24A496BE8((uint64_t)a1);
      uint64_t v10 = 0;
      uint64_t v66 = v63;
      uint64_t v67 = ((-15 << ((4 * v52 + 8) & 0x3C)) - 1) & v29 | (unint64_t)(v51 << ((4 * v52 + 8) & 0x3C));
      uint64_t v68 = 0;
      goto LABEL_14;
    }
    uint64_t v67 = ((v18 + 1) << v17) | ((-15 << v17) - 1) & v11;
    sub_24A496BE8((uint64_t)a1);
    uint64_t v68 = v3;
    uint64_t v10 = v3;
    uint64_t v8 = v63;
LABEL_14:
    sub_24A5BB6F0();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v10) {
      goto LABEL_52;
    }
  }
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
  return result;
}

unint64_t sub_24A4895D4@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (((result >> ((4 * *(unsigned char *)(*(void *)v2 + 18) + 8) & 0x3C)) & 0xF) >= *(unsigned __int16 *)(*(void *)v2 + 16))
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = *(void *)v2 + 24;
    if (*(unsigned char *)(*(void *)v2 + 18))
    {
      unint64_t v5 = result;
      unint64_t v6 = v4 + 40 * ((result >> ((4 * *(unsigned char *)(*(void *)v2 + 18) + 8) & 0x3C)) & 0xF);
      long long v7 = *(_OWORD *)v6;
      long long v8 = *(_OWORD *)(v6 + 16);
      uint64_t v13 = *(void *)(v6 + 32);
      v12[0] = v7;
      v12[1] = v8;
      sub_24A497498(v2);
      sub_24A497498((uint64_t)v12);
      sub_24A4895D4(v5);
      sub_24A496BE8((uint64_t)v12);
      return sub_24A496BE8(v2);
    }
    else
    {
      unint64_t v9 = v4 + 24 * ((result >> ((4 * *(unsigned char *)(*(void *)v2 + 18) + 8) & 0x3C)) & 0xF);
      uint64_t v10 = *(void *)(v9 + 8);
      __int16 v11 = *(_WORD *)(v9 + 20);
      *(void *)a2 = *(void *)v9;
      *(void *)(a2 + 8) = v10;
      *(_DWORD *)(a2 + 16) = *(_DWORD *)(v9 + 16);
      *(_WORD *)(a2 + 20) = v11;
      return swift_bridgeObjectRetain();
    }
  }
  return result;
}

uint64_t Rope._Storage.__deallocating_deinit()
{
  Rope._Storage.deinit();
  return MEMORY[0x270FA0228](v0, 19, 7);
}

void Rope._Storage.deinit()
{
  sub_24A5BBCF0();
  *(_WORD *)(v0 + 16) = -1;
  JUMPOUT(0x24C5C7430);
}

unint64_t BigString.UTF16View.distance(from:to:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  return sub_24A4897D8(a1, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t sub_24A4897D8(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  return sub_24A489834(a1, a2, a3, a4, a5, a6, a7, a8, MEMORY[0x263F8D2E8], (uint64_t (*)(unint64_t, unint64_t, uint64_t, uint64_t))sub_24A4A5DBC, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t))sub_24A4A62B0);
}

unint64_t sub_24A489834(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, unint64_t, uint64_t, uint64_t), uint64_t (*a10)(unint64_t, unint64_t, uint64_t, uint64_t), uint64_t (*a11)(uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t))
{
  long long v12 = v11[1];
  long long v63 = *v11;
  long long v64 = v12;
  long long v65 = v11[2];
  unint64_t v13 = 2 * (v65 & 0x1FFFFFFFFFFFFFLL);
  if (!(void)v63) {
    unint64_t v13 = 0;
  }
  unint64_t v14 = result >> 10;
  if (v13 < result >> 10)
  {
    __break(1u);
    goto LABEL_54;
  }
  unint64_t v15 = a5 >> 10;
  if (v13 < a5 >> 10)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  if (v14 == v15) {
    return 0;
  }
  uint64_t v17 = (uint64_t)v11;
  unint64_t v58 = a5 >> 10;
  unint64_t v59 = result >> 10;
  BOOL v18 = v15 >= v14;
  if (v15 >= v14) {
    unint64_t v19 = result;
  }
  else {
    unint64_t v19 = a5;
  }
  if (v15 >= v14) {
    uint64_t v20 = a2;
  }
  else {
    uint64_t v20 = a6;
  }
  if (v18) {
    unint64_t v21 = a3;
  }
  else {
    unint64_t v21 = a7;
  }
  if (v18) {
    uint64_t v22 = a4;
  }
  else {
    uint64_t v22 = a8;
  }
  if (v18) {
    unint64_t v23 = a5;
  }
  else {
    unint64_t v23 = result;
  }
  if (v18) {
    uint64_t v24 = a6;
  }
  else {
    uint64_t v24 = a2;
  }
  if (v18) {
    unint64_t v25 = a7;
  }
  else {
    unint64_t v25 = a3;
  }
  if (v18) {
    uint64_t v26 = a8;
  }
  else {
    uint64_t v26 = a4;
  }
  unint64_t v27 = sub_24A496820(v19, v20, v21, v22, 0);
  uint64_t v60 = v28;
  unint64_t v61 = v29;
  uint64_t v31 = v30;
  uint64_t result = sub_24A496820(v23, v24, v25, v26, 1);
  if (v31 == 1) {
    goto LABEL_61;
  }
  uint64_t v35 = v34;
  if (v34 != 1)
  {
    unint64_t v36 = v33;
    unint64_t v37 = (16 * (int)v27) & 0x4000 | ((unint64_t)v27 << 16) | (v27 >> 8) & 3 | 4;
    unint64_t v38 = (16 * (int)result) & 0x4000 | ((unint64_t)result << 16) | (result >> 8) & 3 | 4;
    if (v61 != v33)
    {
      if (v60 == *((void *)&v65 + 1))
      {
        uint64_t v43 = v32;
        uint64_t v56 = v31;
        unint64_t v57 = v37;
        unint64_t v55 = (16 * (int)result) & 0x4000 | ((unint64_t)result << 16) | (result >> 8) & 3 | 4;
        if (v31)
        {
          unint64_t v44 = v31 + 24 * ((v61 >> ((4 * *(unsigned char *)(v31 + 18) + 8) & 0x3C)) & 0xF);
          uint64_t v46 = *(void *)(v44 + 24);
          uint64_t v45 = *(void *)(v44 + 32);
          uint64_t result = swift_bridgeObjectRetain();
        }
        else
        {
          long long v68 = v63;
          long long v69 = v64;
          uint64_t v70 = v65;
          swift_unknownObjectRetain();
          sub_24A4895D4(v61, (uint64_t)v66);
          uint64_t result = sub_24A496BE8((uint64_t)v11);
          uint64_t v45 = *((void *)&v66[0] + 1);
          uint64_t v46 = *(void *)&v66[0];
        }
        if (v43 == v60)
        {
          if (v35)
          {
            unint64_t v47 = v35 + 24 * ((v36 >> ((4 * *(unsigned char *)(v35 + 18) + 8) & 0x3C)) & 0xF);
            uint64_t v49 = *(void *)(v47 + 24);
            uint64_t v48 = *(void *)(v47 + 32);
            swift_bridgeObjectRetain();
          }
          else
          {
            v66[0] = v63;
            v66[1] = v64;
            uint64_t v67 = v65;
            swift_unknownObjectRetain();
            sub_24A4895D4(v36, (uint64_t)v62);
            sub_24A496BE8((uint64_t)v11);
            uint64_t v49 = v62[0];
            uint64_t v48 = v62[1];
          }
          swift_unknownObjectRetain();
          uint64_t v50 = sub_24A4A59D8(v60, v61, v56, v60, v36, v35, a10, a11);
          sub_24A496BE8(v17);
          uint64_t v51 = a9(15, v57, v46, v45);
          uint64_t result = swift_bridgeObjectRelease();
          BOOL v52 = __OFSUB__(v50, v51);
          uint64_t v53 = v50 - v51;
          if (!v52)
          {
            uint64_t v54 = a9(15, v55, v49, v48);
            uint64_t result = swift_bridgeObjectRelease();
            BOOL v52 = __OFADD__(v53, v54);
            uint64_t v16 = v53 + v54;
            if (v52)
            {
LABEL_60:
              __break(1u);
LABEL_61:
              __break(1u);
              goto LABEL_62;
            }
            if (v58 >= v59) {
              return v16;
            }
            goto LABEL_51;
          }
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
          goto LABEL_60;
        }
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    if (v60 == *((void *)&v65 + 1))
    {
      unint64_t v39 = v37;
      if (v31)
      {
        unint64_t v40 = v31 + 24 * ((v61 >> ((4 * *(unsigned char *)(v31 + 18) + 8) & 0x3C)) & 0xF);
        uint64_t v41 = *(void *)(v40 + 24);
        uint64_t v42 = *(void *)(v40 + 32);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v68 = v63;
        long long v69 = v64;
        uint64_t v70 = v65;
        swift_unknownObjectRetain();
        sub_24A4895D4(v61, (uint64_t)v66);
        sub_24A496BE8((uint64_t)v11);
        uint64_t v42 = *((void *)&v66[0] + 1);
        uint64_t v41 = *(void *)&v66[0];
      }
      uint64_t v16 = a9(v39, v38, v41, v42);
      uint64_t result = swift_bridgeObjectRelease();
      if (v58 >= v59) {
        return v16;
      }
LABEL_51:
      BOOL v52 = __OFSUB__(0, v16);
      uint64_t v16 = -v16;
      if (!v52) {
        return v16;
      }
      goto LABEL_59;
    }
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
LABEL_62:
  __break(1u);
  return result;
}

unint64_t BigString.UTF8View.subscript.getter(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  return sub_24A489C70(a1, a2, a3, a4);
}

unint64_t sub_24A489C70(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)v5;
  uint64_t v7 = *(void *)(v5 + 32);
  if (*(void *)v5) {
    BOOL v8 = 2 * (v7 & 0x1FFFFFFFFFFFFFuLL) > result >> 10;
  }
  else {
    BOOL v8 = 0;
  }
  if (!v8)
  {
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v4 = v5;
  long long v21 = *(_OWORD *)(v5 + 8);
  uint64_t v9 = *(void *)(v5 + 24);
  uint64_t v10 = *(void *)(v5 + 40);
  uint64_t result = sub_24A496820(result, a2, a3, a4, 0);
  if (v13 != 1)
  {
    if (v11 == v10)
    {
      unint64_t v14 = result;
      unint64_t v15 = v12;
      if (v13)
      {
        uint64_t v16 = v13 + 24 * ((v12 >> ((4 * *(unsigned char *)(v13 + 18) + 8) & 0x3C)) & 0xF);
        uint64_t v5 = *(void *)(v16 + 24);
        unint64_t v4 = *(void *)(v16 + 32);
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v24 = v6;
        long long v25 = v21;
        uint64_t v26 = v9;
        uint64_t v27 = v7;
        swift_unknownObjectRetain();
        sub_24A4895D4(v15, (uint64_t)&v22);
        sub_24A496BE8(v5);
        uint64_t v5 = v22;
        unint64_t v4 = v23;
      }
      uint64_t result = (16 * (int)v14) & 0x4000 | ((unint64_t)v14 << 16) | (v14 >> 8) & 3 | 4;
      if ((v4 & 0x1000000000000000) == 0 || (v5 & 0x800000000000000) != 0)
      {
LABEL_13:
        unint64_t v17 = HIBYTE(v4) & 0xF;
        if ((v4 & 0x2000000000000000) == 0) {
          unint64_t v17 = v5 & 0xFFFFFFFFFFFFLL;
        }
        unint64_t v18 = result >> 16;
        if (result >> 16 >= v17)
        {
          __break(1u);
        }
        else if ((v4 & 0x1000000000000000) == 0)
        {
          if ((v4 & 0x2000000000000000) != 0)
          {
            uint64_t v22 = v5;
            uint64_t v23 = v4 & 0xFFFFFFFFFFFFFFLL;
            uint64_t v20 = *((unsigned __int8 *)&v22 + v18);
          }
          else
          {
            if ((v5 & 0x1000000000000000) != 0) {
              uint64_t v19 = (v4 & 0xFFFFFFFFFFFFFFFLL) + 32;
            }
            else {
              uint64_t v19 = sub_24A5BC120();
            }
            uint64_t v20 = *(unsigned __int8 *)(v19 + v18);
          }
          goto LABEL_22;
        }
        uint64_t v20 = sub_24A5BB760();
LABEL_22:
        swift_bridgeObjectRelease();
        return v20;
      }
LABEL_24:
      uint64_t result = sub_24A4DFD84(result, v5, v4);
      goto LABEL_13;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  __break(1u);
  return result;
}

uint64_t sub_24A489E1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t), uint64_t a6)
{
  return a5(a1, a2, a3, a4, a5, a6);
}

unint64_t sub_24A489E5C(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (*v4) {
    unint64_t result = (v4[4] << 11) | 0x300;
  }
  else {
    unint64_t result = 768;
  }
  if (result >> 10 < a1 >> 10)
  {
    __break(1u);
  }
  else if (a1 >> 10 < result >> 10)
  {
    if ((a1 & 0x400) != 0) {
      unint64_t v7 = a1 & 0xFFFFFFFFFFFFF8FFLL;
    }
    else {
      unint64_t v7 = a1;
    }
    return sub_24A496820(v7, a2, a3, a4, 0);
  }
  return result;
}

unint64_t sub_24A489ED0(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  long long v10 = *(_OWORD *)(v5 + 16);
  *(_OWORD *)uint64_t v31 = *(_OWORD *)v5;
  *(_OWORD *)&v31[16] = v10;
  long long v32 = *(_OWORD *)(v5 + 32);
  uint64_t v11 = *(void *)v31;
  if (!*(void *)v31 || (uint64_t v9 = v32, 2 * ((unint64_t)v32 & 0x1FFFFFFFFFFFFFLL) <= a1 >> 10))
  {
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    unint64_t result = sub_24A4DFD84(v8, v9, v5);
    unint64_t v8 = result;
LABEL_22:
    uint64_t v21 = v5 & 0x2000000000000000;
    uint64_t v22 = HIBYTE(v5) & 0xF;
    uint64_t v23 = v9 & 0xFFFFFFFFFFFFLL;
    if ((v5 & 0x2000000000000000) != 0) {
      unint64_t v25 = HIBYTE(v5) & 0xF;
    }
    else {
      unint64_t v25 = v9 & 0xFFFFFFFFFFFFLL;
    }
    if (v25 > v8 >> 16)
    {
      unint64_t v20 = sub_24A5BB720();
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
LABEL_28:
    __break(1u);
    return result;
  }
  uint64_t v4 = v5;
  unsigned int v26 = *(_DWORD *)&v31[8];
  unint64_t result = sub_24A496820(a1, a2, a3, a4, 0);
  if (v15 == 1)
  {
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v16 = v13;
  if (v13 != *((void *)&v32 + 1)) {
    goto LABEL_20;
  }
  unint64_t v7 = result;
  unint64_t v17 = v14;
  uint64_t v6 = v15;
  unint64_t v8 = (16 * (int)result) & 0x4000 | (result >> 8) & 3 | ((unint64_t)result << 16) | 4;
  if (v15)
  {
    unint64_t v18 = v15 + 24 * ((v14 >> ((4 * *(unsigned char *)(v15 + 18) + 8) & 0x3C)) & 0xF);
    uint64_t v9 = *(void *)(v18 + 24);
    unint64_t v5 = *(void *)(v18 + 32);
    unsigned int v19 = *(unsigned __int8 *)(v18 + 40);
    unint64_t result = swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v33 = *(void *)v31;
    long long v34 = *(_OWORD *)&v31[8];
    uint64_t v35 = *(void *)&v31[24];
    uint64_t v36 = v32;
    swift_unknownObjectRetain();
    sub_24A4895D4(v17, (uint64_t)v29);
    unint64_t result = sub_24A496BE8(v5);
    uint64_t v9 = v29[0];
    unint64_t v5 = v29[1];
    unsigned int v19 = v30;
  }
  uint64_t v11 = v7;
  unint64_t v27 = v17;
  uint64_t v28 = v16;
  unsigned int v26 = v19;
  if ((v5 & 0x1000000000000000) != 0 && (v9 & 0x800000000000000) == 0) {
    goto LABEL_21;
  }
  if ((v5 & 0x1000000000000000) != 0) {
    goto LABEL_22;
  }
  swift_bridgeObjectRelease();
  unint64_t v20 = ((unint64_t)v7 << 16) + 65540;
  uint64_t v21 = v5 & 0x2000000000000000;
  uint64_t v22 = HIBYTE(v5) & 0xF;
  uint64_t v23 = v9 & 0xFFFFFFFFFFFFLL;
LABEL_12:
  if (v21) {
    uint64_t v24 = v22;
  }
  else {
    uint64_t v24 = v23;
  }
  if (v20 >> 14 != 4 * v24) {
    return (v7 & 0xFFFFFFFFFFFFF800 | BYTE2(v20)) + 2048;
  }
  swift_unknownObjectRetain();
  sub_24A4980DC(v28, v27, v6);
  sub_24A496BE8(v4);
  return ((v7 >> 11) - v11 + v26) << 11;
}

unint64_t sub_24A48A10C(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (result < 0x400) {
    goto LABEL_21;
  }
  unint64_t v5 = v4;
  unint64_t result = sub_24A496820(result, a2, a3, a4, 1);
  if (v8 != 1)
  {
    unint64_t v9 = result;
    uint64_t v10 = v6;
    unint64_t v11 = v7;
    uint64_t v12 = v8;
    uint64_t v26 = v6;
    unint64_t v27 = v7;
    uint64_t v28 = v8;
    if ((_BYTE)result)
    {
      LOBYTE(v13) = result - 1;
      uint64_t v14 = (result & 0xFFFFFFFFFFFFF800) - 2048;
      return v14 | v13;
    }
    if (v6 != v5[5]) {
      goto LABEL_22;
    }
    uint64_t v15 = *v5;
    unint64_t v16 = v5[1];
    unint64_t v17 = v5[2];
    unint64_t v18 = v5[3];
    unint64_t v24 = v5[4];
    if (*v5)
    {
      unint64_t v19 = *(unsigned __int8 *)(v15 + 18);
      swift_unknownObjectRetain();
      if (v19 < v11) {
        goto LABEL_8;
      }
    }
    else
    {
      unint64_t v19 = 0;
      if (v7)
      {
LABEL_8:
        if (v12)
        {
          char v20 = (4 * *(unsigned char *)(v12 + 18) + 8) & 0x3C;
          if (((v11 >> v20) & 0xF) != 0)
          {
            unint64_t v11 = ((((v11 >> v20) & 0xF) - 1) << v20) | ((-15 << v20) - 1) & v11;
            unint64_t result = sub_24A496BE8((uint64_t)v5);
LABEL_14:
            uint64_t v22 = v12 + 24 * ((v11 >> ((4 * *(unsigned char *)(v12 + 18) + 8) & 0x3C)) & 0xF);
            unsigned int v23 = *(unsigned __int8 *)(v22 + 40);
            if (*(unsigned char *)(v22 + 40))
            {
LABEL_15:
              uint64_t v13 = v23 + 0xFFFFFFFFFFFFLL;
              uint64_t v14 = ((v13 & 0xFFFFFFFFFFFFLL) - v23 + (v9 >> 11)) << 11;
              return v14 | v13;
            }
            goto LABEL_20;
          }
        }
        uint64_t v34 = v15;
        unint64_t v35 = v16;
        unint64_t v19 = v16;
        unint64_t v16 = v17;
        unint64_t v36 = v17;
        unint64_t v37 = v18;
        unint64_t v17 = v18;
        unint64_t v18 = v24;
        unint64_t v38 = v24;
        swift_unknownObjectRetain();
        char v21 = sub_24A48FB44((uint64_t)&v26);
        sub_24A496BE8((uint64_t)v5);
        unint64_t result = sub_24A496BE8((uint64_t)v5);
        if ((v21 & 1) == 0)
        {
LABEL_24:
          __break(1u);
          goto LABEL_25;
        }
        if (v26 != v10)
        {
LABEL_23:
          __break(1u);
          goto LABEL_24;
        }
        unint64_t v11 = v27;
        uint64_t v12 = v28;
        if (v28) {
          goto LABEL_14;
        }
LABEL_19:
        uint64_t v29 = v15;
        unint64_t v30 = v19;
        unint64_t v31 = v16;
        unint64_t v32 = v17;
        unint64_t v33 = v18;
        swift_unknownObjectRetain();
        sub_24A4895D4(v11, (uint64_t)v25);
        sub_24A496BE8((uint64_t)v5);
        unsigned int v23 = v25[16];
        unint64_t result = swift_bridgeObjectRelease();
        if (v23) {
          goto LABEL_15;
        }
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
        goto LABEL_23;
      }
    }
    __break(1u);
    goto LABEL_19;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_24A48A334@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_24A48A370(a1, a2, v3[4], v3[6], v3[3], a3);
}

uint64_t sub_24A48A358@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_24A48A334(a1, a2, a3);
}

uint64_t sub_24A48A370@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  if (a3)
  {
    unint64_t v9 = (void *)(a3 + 16);
    uint64_t v10 = a3 + 32;
    v16[0] = a1;
    v16[1] = a2;
    uint64_t v11 = sub_24A5BB580();
    swift_retain();
    uint64_t WitnessTable = swift_getWitnessTable();
    *(void *)a6 = _HashTable.UnsafeHandle._find<A>(_:in:)(a4, (uint64_t)v16, v9, v10, v11, WitnessTable, a5);
    *(unsigned char *)(a6 + 8) = v13 & 1;
    *(void *)(a6 + 16) = v14;
    return swift_release();
  }
  else
  {
    sub_24A5BB580();
    swift_getWitnessTable();
    uint64_t result = sub_24A5BBC00();
    *(void *)(a6 + 16) = 0;
  }
  return result;
}

uint64_t OrderedSet.init(arrayLiteral:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = a1;
  uint64_t v5 = sub_24A5BB9F0();
  uint64_t WitnessTable = swift_getWitnessTable();
  return OrderedSet.init<A>(_:)((uint64_t)&v8, a2, v5, a3, WitnessTable);
}

uint64_t OrderedSet.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v67 = a5;
  uint64_t v64 = a2;
  uint64_t v8 = *(void *)(*(void *)(a5 + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v10 = sub_24A5BC290();
  uint64_t v55 = *(void *)(v10 - 8);
  uint64_t v56 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v54 = (char *)&v49 - v11;
  uint64_t v62 = swift_getAssociatedTypeWitness();
  uint64_t v57 = *(void *)(v62 - 8);
  MEMORY[0x270FA5388](v62);
  unint64_t v61 = (char *)&v49 - v12;
  uint64_t v13 = sub_24A5BC2A0();
  uint64_t v59 = *(void *)(v13 - 8);
  uint64_t v60 = v13;
  uint64_t v14 = MEMORY[0x270FA5388](v13);
  unint64_t v58 = (char *)&v49 - v15;
  uint64_t v63 = *(void *)(a3 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  unint64_t v18 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v16);
  uint64_t v22 = (char *)&v49 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  unint64_t v24 = (char *)&v49 - v23;
  uint64_t v25 = sub_24A48AB90();
  uint64_t v26 = v67;
  uint64_t v67 = a4;
  uint64_t v66 = static _HashTable.create<A>(untilFirstDuplicateIn:scale:reservedScale:)(v24, a1, 0, 1, v25, a3, v26, a4);
  uint64_t v27 = a1;
  uint64_t v28 = v8;
  sub_24A5BBB40();
  uint64_t AssociatedConformanceWitness = *(void *)(AssociatedConformanceWitness + 8);
  LOBYTE(a1) = sub_24A5BB530();
  uint64_t v29 = v19;
  uint64_t v30 = v19 + 8;
  unint64_t v31 = *(void (**)(char *, uint64_t))(v19 + 8);
  unint64_t v32 = v22;
  uint64_t v33 = v30;
  v31(v32, AssociatedTypeWitness);
  if (a1)
  {
    uint64_t v34 = v63;
    (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v18, v27, a3);
    uint64_t v35 = sub_24A5BBA00();
    uint64_t v36 = OrderedSet.init(_uniqueElements:_:)(v35, v66);
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v27, a3);
    v31(v24, AssociatedTypeWitness);
    return v36;
  }
  BOOL v52 = v31;
  uint64_t v53 = v28;
  uint64_t result = sub_24A5BB530();
  if (result)
  {
    uint64_t v51 = v33;
    unint64_t v38 = v58;
    uint64_t v49 = *(void (**)(char *, char *, uint64_t))(v29 + 16);
    v49(v58, v24, AssociatedTypeWitness);
    uint64_t v39 = v60;
    swift_getWitnessTable();
    uint64_t v40 = (uint64_t)v61;
    uint64_t v50 = v27;
    sub_24A5BBBE0();
    (*(void (**)(char *, uint64_t))(v59 + 8))(v38, v39);
    uint64_t v41 = v62;
    uint64_t v42 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
    uint64_t v43 = sub_24A5BBA00();
    uint64_t v68 = OrderedSet.init(_uniqueElements:_:)(v43, v66);
    uint64_t v69 = v44;
    swift_retain();
    uint64_t result = sub_24A5BB530();
    if (result)
    {
      uint64_t v45 = v54;
      v49(v54, v24, AssociatedTypeWitness);
      uint64_t AssociatedConformanceWitness = v42;
      uint64_t v46 = v56;
      swift_getWitnessTable();
      uint64_t v47 = v50;
      sub_24A5BBBE0();
      (*(void (**)(char *, uint64_t))(v55 + 8))(v45, v46);
      uint64_t v48 = type metadata accessor for OrderedSet();
      OrderedSet.append<A>(contentsOf:)(v40, v48, v41);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v47, a3);
      (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v40, v41);
      v52(v24, AssociatedTypeWitness);
      return v68;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t WitnessTable;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  Swift::Int v31;
  uint64_t v32;
  void v34[2];
  uint64_t v35;
  void v36[5];

  unint64_t v9 = *(void *)(a3 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  uint64_t v15 = (char *)v34 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)v34 - v16;
  unint64_t v18 = type metadata accessor for OrderedSet();
  if (v18 == a3)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v17, a1, a3);
    swift_dynamicCast();
    return v36[0];
  }
  uint64_t v19 = v18;
  v34[1] = a5;
  uint64_t v35 = a4;
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v20(v15, a1, a3);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26979B020);
  if (!swift_dynamicCast())
  {
    unint64_t v31 = sub_24A5BB860();
    v36[0] = OrderedSet.init(minimumCapacity:persistent:)(v31, 0);
    v36[1] = v32;
    OrderedSet.append<A>(contentsOf:)(a1, v19, a3);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, a3);
    return v36[0];
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
  uint64_t v21 = a1;
  v20(v12, a1, a3);
  v20(v17, (uint64_t)v12, a3);
  uint64_t v22 = sub_24A5BBA00();
  v36[0] = v22;
  uint64_t v23 = sub_24A48AB90();
  unint64_t v24 = sub_24A5BC210();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v26 = static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)((uint64_t)v36, 0, 1, v23, v24, WitnessTable, v35);
  uint64_t v27 = _s19CollectionsInternal4HeapV5countSivg_0();
  uint64_t v28 = 0;
  if (v27 >= 16)
  {
    swift_retain();
    uint64_t v28 = v26;
  }
  uint64_t v29 = OrderedSet.init(_uniqueElements:_:)(v22, v28);
  swift_release();
  uint64_t v30 = *(void (**)(char *, uint64_t))(v9 + 8);
  v30(v12, a3);
  v30((char *)v21, a3);
  return v29;
}

uint64_t sub_24A48AB90()
{
  return 0;
}

uint64_t static _HashTable.create<A>(untilFirstDuplicateIn:scale:reservedScale:)(char *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v66 = a8;
  LODWORD(v67) = a4;
  uint64_t v68 = a3;
  uint64_t v60 = a1;
  uint64_t v61 = a7;
  uint64_t v11 = *(void *)(*(void *)(a7 + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v14 = (char *)&v49 - v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v54 = *(void (***)(char *, uint64_t))(v15 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  uint64_t v62 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  BOOL v52 = (char *)&v49 - v19;
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v63 = (char *)&v49 - v21;
  uint64_t v22 = sub_24A5BBD20();
  MEMORY[0x270FA5388](v22 - 8);
  uint64_t v51 = (char *)&v49 - v23;
  uint64_t v24 = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](v24);
  unint64_t v58 = (char *)&v49 - v25;
  uint64_t v57 = *(unsigned int (**)(char *, uint64_t, uint64_t))(swift_getAssociatedConformanceWitness() + 8);
  uint64_t v65 = swift_getAssociatedTypeWitness();
  uint64_t v50 = *(void *)(v65 - 8);
  MEMORY[0x270FA5388](v65);
  uint64_t v64 = (char *)&v49 - v26;
  int64_t v27 = sub_24A5BBAF0();
  int64_t v28 = _s19CollectionsInternal10_HashTableV5scale11forCapacityS2i_tFZ_0(v27);
  int64_t v29 = v68;
  if (v67) {
    int64_t v29 = 0;
  }
  if (v29 <= v28) {
    int64_t v29 = v28;
  }
  if (v29 <= a5) {
    uint64_t v30 = a5;
  }
  else {
    uint64_t v30 = v29;
  }
  if (v30 <= 4)
  {
    if (sub_24A5BBAF0() > 1)
    {
      uint64_t v70 = sub_24A5BB970();
      sub_24A5BBAF0();
      uint64_t v68 = sub_24A5BB9F0();
      sub_24A5BB950();
      uint64_t v61 = v11;
      sub_24A5BBB20();
      sub_24A5BB840();
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v34 = v51;
      TupleTypeMetadata2 = AssociatedConformanceWitness;
      sub_24A5BBEE0();
      uint64_t v35 = v20;
      uint64_t v36 = (char *)(v20 + 48);
      unint64_t v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
      uint64_t v38 = AssociatedTypeWitness;
      uint64_t v57 = v37;
      unint64_t v58 = v36;
      unsigned int v39 = v37(v34, 1, AssociatedTypeWitness);
      uint64_t v40 = v15;
      uint64_t v41 = v63;
      uint64_t v42 = v52;
      if (v39 != 1)
      {
        uint64_t v43 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
        uint64_t v55 = v35 + 32;
        uint64_t v56 = v43;
        uint64_t v67 = (void (**)(char *))(v54 + 2);
        uint64_t v53 = (void (**)(char *, uint64_t))(v35 + 8);
        ++v54;
        while (1)
        {
          v56(v41, v34, v38);
          uint64_t v44 = a2;
          uint64_t v45 = a6;
          uint64_t v46 = (void (*)(uint64_t *, void))sub_24A5BBC20();
          uint64_t v47 = *v67;
          (*v67)(v42);
          v46(v69, 0);
          v69[0] = v70;
          swift_getWitnessTable();
          if (sub_24A5BB920()) {
            break;
          }
          ((void (*)(char *, char *, uint64_t))v47)(v62, v42, v40);
          uint64_t v41 = v63;
          sub_24A5BB9D0();
          (*v54)(v42, v40);
          (*v53)(v41, v38);
          sub_24A5BBEE0();
          a6 = v45;
          a2 = v44;
          if (v57(v34, 1, v38) == 1) {
            goto LABEL_16;
          }
        }
        (*v54)(v42, v40);
        (*(void (**)(char *, uint64_t))(v50 + 8))(v64, v65);
        swift_bridgeObjectRelease();
        v56(v60, v41, v38);
        return 0;
      }
LABEL_16:
      (*(void (**)(char *, uint64_t))(v50 + 8))(v64, v65);
      swift_bridgeObjectRelease();
    }
    sub_24A5BBB40();
    return 0;
  }
  uint64_t v31 = _s19CollectionsInternal10_HashTableV5scale13reservedScaleACSi_SitcfC_0(v30, a5);
  unint64_t v32 = &v14[*(int *)(TupleTypeMetadata2 + 48)];
  _HashTable.UnsafeHandle.fill<A>(untilFirstDuplicateIn:)(v32, a2, (void *)(v31 + 16), v31 + 32, a6, v61, v66);
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v60, v32, AssociatedTypeWitness);
  return v31;
}

int64_t _s19CollectionsInternal10_HashTableV5scale11forCapacityS2i_tFZ_0(int64_t result)
{
  if (result < 16) {
    return 0;
  }
  double v1 = ceil((double)result / 0.75);
  if ((~*(void *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v1 <= -9.22337204e18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v1 >= 9.22337204e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v2 = result + 1;
  if (__OFADD__(result, 1))
  {
LABEL_13:
    __break(1u);
    return result;
  }
  if (v2 <= (uint64_t)v1) {
    uint64_t v2 = (uint64_t)v1;
  }
  return 64 - __clz(v2 - 1);
}

uint64_t OrderedSet.init(_uniqueElements:_:)(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_24A48B39C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  v26[2] = a6;
  v26[3] = a8;
  v26[1] = a5;
  int v27 = a9;
  uint64_t v11 = sub_24A5BC360();
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (void *)((char *)v26 - v13);
  uint64_t v15 = *(void *)(a7 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  sub_24A5BC260();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_26979AA50);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  uint64_t v19 = (char *)v14 + *(int *)(TupleTypeMetadata3 + 48);
  uint64_t v20 = (char *)v14 + *(int *)(TupleTypeMetadata3 + 64);
  swift_beginAccess();
  *uint64_t v14 = *(void *)(a3 + 16);
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v19, v17, a7);
  *(void *)uint64_t v20 = OrderedSet._find(_:)();
  v20[8] = v21 & 1;
  swift_storeEnumTagMultiPayload();
  swift_beginAccess();
  sub_24A5BB9F0();
  sub_24A5BB9D0();
  swift_endAccess();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, a7);
  uint64_t result = swift_beginAccess();
  uint64_t v23 = *(void *)(a3 + 16);
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (v24) {
    __break(1u);
  }
  else {
    *(void *)(a3 + 16) = v25;
  }
  return result;
}

uint64_t OrderedSet.difference(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v50 = a7;
  uint64_t v54 = sub_24A5BC370();
  uint64_t v13 = sub_24A5BBD20();
  uint64_t v14 = MEMORY[0x270FA5388](v13 - 8);
  uint64_t v53 = (char *)&v49 - v15;
  unint64_t v58 = *(uint64_t (***)(char *, uint64_t))(a5 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v59 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = swift_allocObject();
  uint64_t v62 = v17;
  *(void *)(v17 + 16) = 0;
  uint64_t v18 = (uint64_t *)(v17 + 16);
  uint64_t v19 = swift_allocObject();
  uint64_t v61 = v19;
  *(void *)(v19 + 16) = 0;
  uint64_t v20 = (uint64_t *)(v19 + 16);
  uint64_t v21 = swift_allocObject();
  uint64_t v52 = sub_24A5BC360();
  *(void *)(v21 + 16) = sub_24A5BB330();
  uint64_t v51 = (uint64_t *)(v21 + 16);
  uint64_t v63 = v18;
  swift_beginAccess();
  swift_beginAccess();
  uint64_t v57 = v21;
  ++v58;
  uint64_t v56 = a6;
  uint64_t v60 = a1;
  while (1)
  {
    uint64_t v29 = *v63;
    if (v29 >= _s19CollectionsInternal4HeapV5countSivg_0())
    {
      uint64_t v30 = *v20;
      if (v30 >= _s19CollectionsInternal4HeapV5countSivg_0()) {
        break;
      }
    }
    uint64_t v31 = *v20;
    if (v31 == _s19CollectionsInternal4HeapV5countSivg_0()) {
      goto LABEL_2;
    }
    if (v29 == _s19CollectionsInternal4HeapV5countSivg_0()) {
      goto LABEL_10;
    }
    unint64_t v32 = v59;
    sub_24A5BC260();
    uint64_t v33 = OrderedSet._find(_:)();
    char v35 = v34;
    uint64_t v36 = *v58;
    (*v58)(v32, a5);
    if (v35)
    {
      int v48 = 1;
      a1 = v60;
      uint64_t v22 = v60;
      uint64_t v23 = a2;
      uint64_t v24 = v62;
      uint64_t v21 = v57;
LABEL_3:
      uint64_t v25 = v21;
      uint64_t v26 = a3;
      uint64_t v27 = a4;
LABEL_4:
      uint64_t v28 = a5;
      goto LABEL_5;
    }
    if (v33 >= *v20)
    {
      unint64_t v37 = v59;
      sub_24A5BC260();
      a6 = v56;
      uint64_t v55 = OrderedSet._find(_:)();
      char v39 = v38;
      uint64_t result = v36(v37, a5);
      if (v39)
      {
        int v48 = 0;
        uint64_t v22 = a3;
        uint64_t v23 = a4;
        a1 = v60;
        uint64_t v24 = v61;
        uint64_t v21 = v57;
LABEL_11:
        uint64_t v25 = v21;
        uint64_t v26 = a1;
        uint64_t v27 = a2;
        goto LABEL_4;
      }
      uint64_t v41 = *v63;
      if (v55 < *v63)
      {
        int v48 = 0;
        uint64_t v22 = a3;
        uint64_t v23 = a4;
        a1 = v60;
        uint64_t v24 = v61;
        uint64_t v21 = v57;
        uint64_t v25 = v57;
        uint64_t v26 = v60;
        uint64_t v27 = a2;
        goto LABEL_15;
      }
      a6 = v56;
      a1 = v60;
      if (v41 != v55)
      {
        BOOL v42 = __OFSUB__(v55, v41);
        uint64_t v43 = v55 - v41;
        uint64_t v21 = v57;
        if (v42) {
          goto LABEL_32;
        }
        if (__OFSUB__(v33, *v20)) {
          goto LABEL_34;
        }
        if (v43 >= v33 - *v20)
        {
LABEL_2:
          int v48 = 1;
          uint64_t v22 = a1;
          uint64_t v23 = a2;
          uint64_t v24 = v62;
          goto LABEL_3;
        }
LABEL_10:
        int v48 = 0;
        uint64_t v22 = a3;
        uint64_t v23 = a4;
        uint64_t v24 = v61;
        goto LABEL_11;
      }
      uint64_t v21 = v57;
      if (__OFADD__(v55, 1))
      {
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
      *uint64_t v63 = v55 + 1;
      if (__OFADD__(*v20, 1)) {
        goto LABEL_33;
      }
      ++*v20;
    }
    else
    {
      int v48 = 1;
      a1 = v60;
      uint64_t v22 = v60;
      uint64_t v23 = a2;
      uint64_t v24 = v62;
      uint64_t v21 = v57;
      uint64_t v25 = v57;
      uint64_t v26 = a3;
      uint64_t v27 = a4;
LABEL_15:
      uint64_t v28 = a5;
      a6 = v56;
LABEL_5:
      sub_24A48B39C(v22, v23, v24, v25, v26, v27, v28, a6, v48);
    }
  }
  uint64_t v44 = v51;
  swift_beginAccess();
  uint64_t v64 = *v44;
  sub_24A5BB9F0();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  uint64_t v45 = v53;
  sub_24A5BC380();
  uint64_t v46 = v54;
  uint64_t v47 = *(void *)(v54 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v54);
  if (result != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v47 + 32))(v50, v45, v46);
    swift_release();
    swift_release();
    return swift_release();
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t OrderedSet._find(_:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_26979ACE8);
  sub_24A5BC1A0();
  return v1;
}

unint64_t _s19CollectionsInternal9BigStringV6append10contentsOfySsn_tF_0(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  *(void *)&long long v134 = a3;
  unint64_t v8 = sub_24A5BC780();
  unint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v113 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  unint64_t v14 = (unint64_t)&v113 - v13;
  unint64_t v15 = _s9_IngesterVMa();
  MEMORY[0x270FA5388](v15);
  if (!((a2 ^ a1) >> 14))
  {
    return swift_bridgeObjectRelease();
  }
  v128 = (unint64_t *)((char *)&v113 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = *(void *)v4;
  if (!*(void *)v4 || (uint64_t v19 = *(void *)(v4 + 32)) == 0)
  {
    sub_24A48FF2C(a1, a2, v134, a4, v135);
    unint64_t result = swift_unknownObjectRelease();
    long long v31 = *(_OWORD *)&v135[16];
    *(_OWORD *)uint64_t v4 = *(_OWORD *)v135;
    *(_OWORD *)(v4 + 16) = v31;
    *(_OWORD *)(v4 + 32) = *(_OWORD *)&v135[32];
    return result;
  }
  uint64_t v20 = *(void *)(v4 + 24);
  uint64_t v21 = *(void *)(v4 + 40);
  long long v146 = *(_OWORD *)(v4 + 8);
  uint64_t v145 = v18;
  uint64_t v147 = v20;
  uint64_t v148 = v19;
  uint64_t v149 = v21;
  uint64_t v132 = v18;
  *(void *)&long long v133 = (v19 << 11) | 0x300;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v22 = sub_24A48CBA0(a1, a2, v134, a4);
  v124 = (_OWORD *)v4;
  unint64_t v23 = v22;
  swift_bridgeObjectRelease();
  sub_24A48D2C8(v133, 0, 0, 1uLL, (uint64_t *)(v23 | ((HIDWORD(v23) & 1) << 32)), v14);
  (*(void (**)(char *, unint64_t, unint64_t))(v9 + 16))(v12, v14, v8);
  unint64_t v24 = (unint64_t)v128;
  unint64_t *v128 = a1;
  *(void *)(v24 + 8) = a2;
  *(void *)(v24 + 16) = v134;
  *(void *)(v24 + 24) = a4;
  if ((a4 & 0x1000000000000000) != 0) {
    goto LABEL_183;
  }
LABEL_8:
  *(void *)(v24 + 32) = a1;
  uint64_t v25 = *(void (**)(void))(v9 + 32);
  *(void *)&long long v133 = v24 + *(int *)(v15 + 24);
  v25();
  (*(void (**)(unint64_t, unint64_t))(v9 + 8))(v14, v8);
  swift_unknownObjectRelease();
  long long v26 = v124[1];
  v143[0] = *v124;
  v143[1] = v26;
  long long v144 = v124[2];
  long long v27 = v143[0];
  long long v28 = v26;
  unint64_t v15 = *((void *)&v144 + 1);
  uint64_t v29 = v144;
  swift_unknownObjectRetain();
  unint64_t result = sub_24A498214();
  *(void *)v135 = v15;
  *(void *)&v135[8] = result;
  *(void *)&v135[16] = 0;
  if ((void)v27) {
    unsigned int v30 = *(unsigned __int8 *)(v27 + 18);
  }
  else {
    unsigned int v30 = 0;
  }
  unint64_t v32 = v128;
  if (result <= v30)
  {
    __break(1u);
LABEL_185:
    __break(1u);
LABEL_186:
    __break(1u);
    goto LABEL_187;
  }
  *(_OWORD *)&v142[7] = v27;
  *(_OWORD *)&v142[9] = v28;
  v142[11] = v29;
  swift_unknownObjectRetain();
  char v33 = sub_24A48FB44((uint64_t)v135);
  sub_24A496BE8((uint64_t)v143);
  unint64_t result = sub_24A496BE8((uint64_t)v143);
  if ((v33 & 1) == 0) {
    goto LABEL_185;
  }
  if (*(void *)v135 != v15) {
    goto LABEL_186;
  }
  if (!(void)v27) {
    goto LABEL_197;
  }
  char v34 = v124;
  sub_24A48FDE4(*(unint64_t *)&v135[8], (uint64_t)v135);
  uint64_t v35 = sub_24A4906F8((unint64_t)v32);
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  sub_24A48FC0C((uint64_t)v142, (uint64_t)v135, v40);
  unint64_t result = swift_bridgeObjectRelease();
  *((void *)v34 + 5) = v15 + 1;
  if (!v37)
  {
    unint64_t v41 = v32[4];
    unint64_t v42 = v32[1];
    if ((v42 ^ v41) < 0x4000) {
      return sub_24A48CC74((uint64_t)v32);
    }
    *(void *)&long long v134 = 0;
    *(void *)v135 = MEMORY[0x263F8EE78];
    memset(&v135[8], 0, 62);
    uint64_t v136 = 0;
    v137[0] = 0;
    *(void *)((char *)v137 + 6) = 0;
    v137[2] = MEMORY[0x263F8EE78];
    while (1)
    {
      unint64_t v43 = *v32;
      unint64_t v44 = v32[2];
      unint64_t v45 = v32[3];
      swift_bridgeObjectRetain();
      uint64_t v46 = sub_24A5BBE80();
      swift_bridgeObjectRelease();
      uint64_t v47 = v46 - 124;
      if (v46 >= 379) {
        uint64_t v47 = 255;
      }
      if (v46 <= 255) {
        uint64_t v48 = v46;
      }
      else {
        uint64_t v48 = v47;
      }
      unint64_t result = sub_24A497C80(v41, v42, v48, v44, v45);
      if ((v50 & 1) != 0 || (result ^ v49) < 0x4000)
      {
        if ((v41 ^ v42) >> 14)
        {
LABEL_195:
          __break(1u);
LABEL_196:
          __break(1u);
LABEL_197:
          __break(1u);
        }
        else
        {
          uint64_t v108 = v124;
          long long v109 = v124[1];
          *(_OWORD *)v142 = *v124;
          *(_OWORD *)&v142[2] = v109;
          *(_OWORD *)&v142[4] = v124[2];
          sub_24A4974C4((uint64_t)v142, (uint64_t)v150);
          sub_24A497498((uint64_t)v150);
          sub_24A491510(v138);
          sub_24A5B2704((uint64_t)v142, v138, (uint64_t *)v139);
          long long v133 = v139[1];
          long long v134 = v139[0];
          uint64_t v110 = v140;
          uint64_t v111 = v141;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_24A48CC74((uint64_t)v32);
          unint64_t result = swift_unknownObjectRelease();
          long long v112 = v133;
          *uint64_t v108 = v134;
          v108[1] = v112;
          *((void *)v108 + 4) = v110;
          *((void *)v108 + 5) = v111;
        }
        return result;
      }
      v32[4] = v49;
      unint64_t v121 = v49;
      unint64_t v122 = result;
      unint64_t v123 = v43;
      unint64_t v51 = sub_24A5BBEC0();
      unint64_t v24 = v52;
      unint64_t v54 = v53;
      unint64_t v56 = v55;
      uint64_t v129 = sub_24A4913AC(v51, v52, v53, v55);
      uint64_t v57 = v134;
      sub_24A498004(v51, v24, v54, v56);
      *(void *)&long long v134 = v57;
      if ((v58 & 0x100) != 0) {
        break;
      }
      if ((v58 & 1) == 0)
      {
        unint64_t v117 = v45;
        unint64_t v118 = v44;
        swift_bridgeObjectRetain();
        unint64_t v59 = sub_24A5BBE70();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        unint64_t v60 = sub_24A5BBE70();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v61 = v60 >> 14;
        if (v60 >> 14 >= v59 >> 14)
        {
          unint64_t v9 = v24 >> 14;
          goto LABEL_86;
        }
        goto LABEL_189;
      }
      uint64_t v100 = 0;
      uint64_t v132 = v129;
      uint64_t v62 = v51;
      unint64_t v63 = v24;
LABEL_147:
      unint64_t v8 = MEMORY[0x24C5C68C0](v62, v63, v54, v56);
      unint64_t v102 = v101;
      if ((v101 & 0x1000000000000000) != 0)
      {
        unint64_t v8 = sub_24A49279C();
        unint64_t v107 = v106;
        swift_bridgeObjectRelease();
        unint64_t v102 = v107;
      }
      swift_bridgeObjectRetain();
      unint64_t v14 = sub_24A5BB830();
      unint64_t v24 = v103;
      a1 = v104;
      unint64_t v9 = v105;
      swift_bridgeObjectRelease();
      if ((uint64_t)sub_24A4913AC(v14, v24, a1, v9) > 255) {
        goto LABEL_174;
      }
      unint64_t v131 = v8;
      unint64_t v8 = sub_24A4913AC(v14, v24, a1, v9);
      unint64_t v15 = sub_24A5BB7C0();
      unint64_t v14 = sub_24A491A60(v14, v24, a1, v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((uint64_t)v8 > 255)
      {
LABEL_175:
        __break(1u);
LABEL_176:
        __break(1u);
LABEL_177:
        __break(1u);
LABEL_178:
        __break(1u);
LABEL_179:
        __break(1u);
LABEL_180:
        __break(1u);
LABEL_181:
        __break(1u);
LABEL_182:
        __break(1u);
LABEL_183:
        sub_24A491F98();
        goto LABEL_8;
      }
      if ((uint64_t)v15 > 255) {
        goto LABEL_176;
      }
      if ((uint64_t)v14 > 255) {
        goto LABEL_177;
      }
      if (v100 > 255) {
        goto LABEL_178;
      }
      if (v129 > 255) {
        goto LABEL_179;
      }
      if (((v129 | v100 | v132 | v8 | v15 | v14) & 0x8000000000000000) != 0) {
        goto LABEL_180;
      }
      if (v132 > 255) {
        goto LABEL_181;
      }
      if (v8 < 0x7CuLL) {
        goto LABEL_182;
      }
      unint64_t v125 = (v100 << 24) | v125 & 0xFFFF000000000000 | ((unint64_t)v129 << 32) & 0xFFFF00FFFF0000FFLL | ((unint64_t)v132 << 40) | (unsigned __int16)(v15 << 8) | ((unint64_t)v14 << 16) | v8;
      sub_24A494F18(v131, v102, v125);
      unint64_t v32 = v128;
      unint64_t v42 = v128[1];
      unint64_t v41 = v128[4];
    }
    unint64_t v117 = v45;
    unint64_t v118 = v44;
    unint64_t v9 = v24 >> 14;
    uint64_t v62 = v51;
    unint64_t v63 = v24;
    if (v51 >> 14 >= v24 >> 14)
    {
      uint64_t v100 = 0;
      uint64_t v132 = v129;
      goto LABEL_147;
    }
    unint64_t v114 = v24;
    unint64_t v115 = v51;
    unint64_t v116 = v42;
    uint64_t v64 = (v54 >> 59) & 1;
    if ((v56 & 0x1000000000000000) == 0) {
      LOBYTE(v64) = 1;
    }
    uint64_t v65 = 4 << v64;
    uint64_t v66 = HIBYTE(v56) & 0xF;
    uint64_t v119 = v54 & 0xFFFFFFFFFFFFLL;
    uint64_t v120 = v66;
    if ((v56 & 0x2000000000000000) == 0) {
      uint64_t v66 = v54 & 0xFFFFFFFFFFFFLL;
    }
    unint64_t v130 = v51 >> 14;
    unint64_t v131 = v66;
    unint64_t v126 = (v56 & 0xFFFFFFFFFFFFFFFLL) + 32;
    unint64_t v127 = v56 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v15 = v51;
    a1 = v51 >> 14;
    uint64_t v132 = v65;
    while (1)
    {
      unint64_t v8 = v15 & 0xC;
      BOOL v67 = (v15 & 1) == 0 || v8 == v65;
      unint64_t v14 = v67;
      if (v67)
      {
        unint64_t v59 = v15;
        if (v8 == v65) {
          unint64_t v15 = sub_24A4DFD84(v15, v54, v56);
        }
        if (v131 <= v15 >> 16) {
          goto LABEL_170;
        }
        if ((v15 & 1) == 0) {
          unint64_t v15 = v15 & 0xC | sub_24A4971A8(v15, v54, v56) & 0xFFFFFFFFFFFFFFF3 | 1;
        }
      }
      else
      {
        unint64_t v59 = v15;
        if (v131 <= v15 >> 16) {
          goto LABEL_171;
        }
      }
      if ((v56 & 0x1000000000000000) != 0)
      {
        unint64_t v15 = sub_24A5BB5D0();
        if (!v14) {
          goto LABEL_59;
        }
      }
      else
      {
        unint64_t v24 = v15 >> 16;
        if ((v56 & 0x2000000000000000) != 0)
        {
          v142[0] = v54;
          v142[1] = v127;
          int v69 = *((unsigned __int8 *)v142 + v24);
        }
        else
        {
          uint64_t v68 = v126;
          if ((v54 & 0x1000000000000000) == 0) {
            uint64_t v68 = sub_24A5BC120();
          }
          int v69 = *(unsigned __int8 *)(v68 + v24);
        }
        int v70 = (char)v69;
        unsigned int v71 = __clz(v69 ^ 0xFF) - 24;
        if (v70 >= 0) {
          LOBYTE(v71) = 1;
        }
        unint64_t v15 = ((v24 + v71) << 16) | 5;
        if (!v14)
        {
LABEL_59:
          if (v59 >> 14 < v130 || v59 >> 14 >= v9) {
            goto LABEL_172;
          }
LABEL_71:
          if ((v56 & 0x1000000000000000) != 0) {
            goto LABEL_78;
          }
          goto LABEL_72;
        }
      }
      unint64_t v72 = v59;
      if (v8 == v132) {
        unint64_t v72 = sub_24A4DFD84(v59, v54, v56);
      }
      if (v72 >> 14 < v130 || v72 >> 14 >= v9) {
        goto LABEL_173;
      }
      if (v72) {
        goto LABEL_71;
      }
      sub_24A4971A8(v72, v54, v56);
      if ((v56 & 0x1000000000000000) != 0)
      {
LABEL_78:
        sub_24A5BC060();
        goto LABEL_79;
      }
LABEL_72:
      if ((v56 & 0x2000000000000000) != 0)
      {
        v142[0] = v54;
        v142[1] = v127;
        swift_bridgeObjectRetain();
        sub_24A5BC130();
        swift_bridgeObjectRelease();
      }
      else
      {
        if ((v54 & 0x1000000000000000) == 0) {
          sub_24A5BC120();
        }
        swift_bridgeObjectRetain();
        sub_24A5BC130();
        swift_bridgeObjectRelease();
      }
LABEL_79:
      unint64_t v24 = v133;
      unint64_t result = sub_24A5BC760();
      unint64_t v61 = v15 >> 14;
      if (result)
      {
        BOOL v73 = v61 >= a1;
        unint64_t v42 = v116;
        if (!v73)
        {
LABEL_190:
          __break(1u);
LABEL_191:
          __break(1u);
LABEL_192:
          __break(1u);
LABEL_193:
          __break(1u);
LABEL_194:
          __break(1u);
          goto LABEL_195;
        }
LABEL_86:
        unint64_t v116 = v42;
        if (v9 >= v61)
        {
          unint64_t v74 = sub_24A5BBEC0();
          unint64_t v14 = v75;
          unint64_t v9 = v76;
          a1 = v77;
          unint64_t result = swift_bridgeObjectRelease();
          uint64_t v132 = v59;
          uint64_t v100 = 1;
          while (1)
          {
            if ((a1 & 0x1000000000000000) != 0)
            {
              unint64_t v88 = v74 >> 14;
              unint64_t v8 = v14 >> 14;
              if (v74 >> 14 >= v14 >> 14) {
                goto LABEL_146;
              }
              uint64_t v89 = 4 << ((v9 & 0x800000000000000) != 0);
              uint64_t v90 = HIBYTE(a1) & 0xF;
              if ((a1 & 0x2000000000000000) == 0) {
                uint64_t v90 = v9 & 0xFFFFFFFFFFFFLL;
              }
              uint64_t v129 = v90;
              unint64_t v130 = 4 << ((v9 & 0x800000000000000) != 0);
              unint64_t v91 = v74;
              unint64_t v127 = v74 >> 14;
              while (1)
              {
                unint64_t v92 = v91 & 0xC;
                BOOL v93 = v92 == v89 || (v91 & 1) == 0;
                unint64_t v131 = v91;
                unint64_t v126 = v88;
                if (v93)
                {
                  unint64_t v94 = v91;
                  if (v92 == v89)
                  {
                    unint64_t result = sub_24A4DFD84(v131, v9, a1);
                    unint64_t v92 = v91 & 0xC;
                    unint64_t v94 = result;
                  }
                  unint64_t v95 = v127;
                  if (v129 <= v94 >> 16) {
                    goto LABEL_191;
                  }
                  uint64_t v120 = v92;
                  if ((v94 & 1) == 0) {
                    sub_24A4971A8(v94, v9, a1);
                  }
                  unint64_t v15 = sub_24A5BB5D0();
                  unint64_t result = v131;
                  if (v120 == v130) {
                    unint64_t result = sub_24A4DFD84(v131, v9, a1);
                  }
                  if (result >> 14 < v95 || result >> 14 >= v8) {
                    goto LABEL_192;
                  }
                  if ((result & 1) == 0) {
                    sub_24A4971A8(result, v9, a1);
                  }
                }
                else
                {
                  if (v129 <= v91 >> 16) {
                    goto LABEL_193;
                  }
                  unint64_t result = sub_24A5BB5D0();
                  if (v91 >> 14 < v127) {
                    goto LABEL_194;
                  }
                  unint64_t v15 = result;
                  unint64_t result = v131;
                  if (v91 >> 14 >= v8) {
                    goto LABEL_194;
                  }
                }
                sub_24A5BC060();
                unint64_t v24 = v133;
                unint64_t result = sub_24A5BC760();
                unint64_t v83 = v15 >> 14;
                if (result) {
                  break;
                }
                unint64_t v91 = v15;
                unint64_t v88 = v15 >> 14;
                uint64_t v89 = v130;
                if (v83 >= v8) {
                  goto LABEL_146;
                }
              }
              if (v83 < v126) {
                goto LABEL_196;
              }
            }
            else
            {
              if ((a1 & 0x2000000000000000) != 0)
              {
                v142[0] = v9;
                v142[1] = a1 & 0xFFFFFFFFFFFFFFLL;
                uint64_t v78 = v142;
              }
              else if ((v9 & 0x1000000000000000) != 0)
              {
                uint64_t v78 = (void *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 32);
              }
              else
              {
                uint64_t v78 = (void *)sub_24A5BC120();
              }
              uint64_t v79 = v134;
              unint64_t v15 = sub_24A497AA0((uint64_t)v78, v74, v14, v9, a1);
              unint64_t v24 = v80;
              *(void *)&long long v134 = v79;
              LOBYTE(v139[0]) = v81 & 1;
              if (v81)
              {
LABEL_146:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRetain();
                unint64_t v15 = v122;
                uint64_t v129 = sub_24A5BBE80();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRetain();
                uint64_t v132 = sub_24A5BBE80();
                swift_bridgeObjectRelease();
                uint64_t v62 = sub_24A5BBEC0();
                unint64_t v54 = v98;
                unint64_t v56 = v99;
                goto LABEL_147;
              }
              if ((v74 & 0xC) == 8)
              {
                unint64_t v96 = sub_24A4DFD84(v74, v9, a1);
                unint64_t v8 = v15 + (v96 >> 16);
                if (__OFADD__(v15, v96 >> 16))
                {
LABEL_161:
                  __break(1u);
LABEL_162:
                  __break(1u);
LABEL_163:
                  __break(1u);
LABEL_164:
                  __break(1u);
LABEL_165:
                  __break(1u);
LABEL_166:
                  __break(1u);
LABEL_167:
                  __break(1u);
LABEL_168:
                  __break(1u);
LABEL_169:
                  __break(1u);
LABEL_170:
                  __break(1u);
LABEL_171:
                  __break(1u);
LABEL_172:
                  __break(1u);
LABEL_173:
                  __break(1u);
LABEL_174:
                  __break(1u);
                  goto LABEL_175;
                }
              }
              else
              {
                unint64_t v8 = v15 + (v74 >> 16);
                if (__OFADD__(v15, v74 >> 16)) {
                  goto LABEL_161;
                }
              }
              if ((v8 & 0x8000000000000000) != 0) {
                goto LABEL_162;
              }
              if ((a1 & 0x2000000000000000) != 0) {
                unint64_t v15 = HIBYTE(a1) & 0xF;
              }
              else {
                unint64_t v15 = v9 & 0xFFFFFFFFFFFFLL;
              }
              if (v15 < v8) {
                goto LABEL_163;
              }
              if ((v74 & 0xC) == 8)
              {
                unint64_t v97 = sub_24A4DFD84(v74, v9, a1);
                unint64_t v82 = v24 + (v97 >> 16);
                if (__OFADD__(v24, v97 >> 16)) {
                  goto LABEL_164;
                }
              }
              else
              {
                unint64_t v82 = v24 + (v74 >> 16);
                if (__OFADD__(v24, v74 >> 16)) {
                  goto LABEL_164;
                }
              }
              if ((v82 & 0x8000000000000000) != 0) {
                goto LABEL_165;
              }
              if (v15 < v82) {
                goto LABEL_166;
              }
              if (v82 < v8) {
                goto LABEL_167;
              }
              unint64_t v8 = v14 >> 14;
              unint64_t v83 = 4 * v82;
              unint64_t v15 = (v82 << 16) | 4;
            }
            if (v8 < v83) {
              goto LABEL_168;
            }
            unint64_t v74 = sub_24A5BBEC0();
            unint64_t v14 = v84;
            unint64_t v9 = v85;
            unint64_t v24 = v86;
            unint64_t result = swift_bridgeObjectRelease();
            a1 = v24;
            if (__OFADD__(v100++, 1)) {
              goto LABEL_169;
            }
          }
        }
LABEL_187:
        __break(1u);
LABEL_188:
        __break(1u);
LABEL_189:
        __break(1u);
        goto LABEL_190;
      }
      a1 = v15 >> 14;
      uint64_t v65 = v132;
      if (v61 >= v9)
      {
        uint64_t v100 = 0;
        uint64_t v132 = v129;
        unint64_t v63 = v114;
        uint64_t v62 = v115;
        goto LABEL_147;
      }
    }
  }
  if ((v39 & 0xFCu) < 0x7CuLL) {
    goto LABEL_188;
  }
  sub_24A5B3324(v35, v37, v39 & 0xFFFFFFFFFFFFLL);
  return sub_24A48CC74((uint64_t)v32);
}

unint64_t sub_24A48CBA0(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a2 ^ a1;
  if ((a2 ^ a1) >= 0x4000)
  {
    sub_24A48F8EC(a1, a1, a2, a3, a4);
    if ((a4 & 0x1000000000000000) != 0)
    {
      unsigned int v5 = sub_24A5BC060();
    }
    else
    {
      if ((a4 & 0x2000000000000000) == 0 && (a3 & 0x1000000000000000) == 0) {
        sub_24A5BC120();
      }
      unsigned int v5 = sub_24A5BC130();
    }
  }
  else
  {
    unsigned int v5 = 0;
  }
  return v5 | ((unint64_t)(v4 < 0x4000) << 32);
}

uint64_t sub_24A48CC74(uint64_t a1)
{
  uint64_t v2 = _s9_IngesterVMa();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_24A48CCD0(long long *a1, unint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_24A5BC780();
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  unint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  uint64_t v13 = (char *)&v33 - v12;
  if ((a2[4] ^ *a2) < 0x800)
  {
    sub_24A496BE8((uint64_t)a1);
    return;
  }
  uint64_t v14 = *v3;
  if (!*v3)
  {
LABEL_11:
    sub_24A48D050(a1, a2, &v62);
    long long v24 = v63;
    *(_OWORD *)uint64_t v3 = v62;
    *((_OWORD *)v3 + 1) = v24;
    *((_OWORD *)v3 + 2) = v64;
    return;
  }
  uint64_t v15 = v3[4];
  if (!v15)
  {
    swift_unknownObjectRelease();
    goto LABEL_11;
  }
  uint64_t v41 = v11;
  uint64_t v42 = v10;
  uint64_t v16 = v3[1];
  uint64_t v38 = v3[2];
  uint64_t v39 = v16;
  uint64_t v37 = v3[3];
  long long v17 = a1[1];
  v55[0] = *a1;
  v55[1] = v17;
  v55[2] = a1[2];
  sub_24A4974C4((uint64_t)v55, (uint64_t)v56);
  sub_24A497498((uint64_t)v56);
  sub_24A48D050(a1, a2, &v50);
  uint64_t v18 = v50;
  uint64_t v40 = v54;
  long long v46 = v50;
  uint64_t v47 = v51;
  uint64_t v48 = v52;
  uint64_t v49 = v53;
  long long v65 = v50;
  uint64_t v35 = v51;
  uint64_t v36 = *((void *)&v50 + 1);
  uint64_t v66 = v51;
  uint64_t v67 = v52;
  uint64_t v33 = v53;
  uint64_t v34 = v52;
  uint64_t v68 = v53;
  unint64_t v19 = *(unsigned __int8 *)(v50 + 18);
  swift_unknownObjectRetain();
  sub_24A4895D4(v19, (uint64_t)&v62);
  unint64_t v20 = sub_24A586D60(v62, *((unint64_t *)&v62 + 1));
  swift_bridgeObjectRelease();
  if ((v20 & 0x100000000) != 0)
  {
    __break(1u);
  }
  else
  {
    sub_24A496BE8((uint64_t)&v50);
    sub_24A5BC770();
    uint64_t v21 = v3[5];
    *(void *)&long long v62 = v14;
    *((void *)&v62 + 1) = v39;
    *(void *)&long long v63 = v38;
    *((void *)&v63 + 1) = v37;
    *(void *)&long long v64 = v15;
    *((void *)&v64 + 1) = v21;
    LOBYTE(v57) = 0;
    uint64_t v22 = sub_24A48D2C8((v15 << 11) | 0x300, 0, 0, 1uLL, (uint64_t *)v20, (uint64_t)v9);
    if (v18) {
      uint64_t v23 = *(unsigned __int8 *)(v18 + 18);
    }
    else {
      uint64_t v23 = 0;
    }
    uint64_t v25 = v40;
    v45[0] = v40;
    v45[1] = v23;
    v45[2] = 0;
    MEMORY[0x270FA5388](v22);
    *(&v33 - 2) = (uint64_t)v13;
    *(&v33 - 1) = (uint64_t)v9;
    uint64_t v43 = 0;
    char v44 = 1;
    if (v18)
    {
      sub_24A48E828(&v57, (uint64_t)v45, &v46, (uint64_t)&v43, (void (*)(void *__return_ptr))sub_24A48ECE4, (uint64_t)(&v33 - 4));
      ++v25;
      uint64_t v27 = *((void *)&v46 + 1);
      uint64_t v26 = v46;
      uint64_t v28 = v47;
      uint64_t v29 = v48;
      uint64_t v30 = v49;
    }
    else
    {
      uint64_t v26 = 0;
      uint64_t v28 = v35;
      uint64_t v27 = v36;
      uint64_t v30 = v33;
      uint64_t v29 = v34;
    }
    *(void *)&long long v57 = v26;
    *((void *)&v57 + 1) = v27;
    uint64_t v58 = v28;
    uint64_t v59 = v29;
    uint64_t v60 = v30;
    uint64_t v61 = v25;
    swift_unknownObjectRetain();
    sub_24A5B5A34((uint64_t *)&v57);
    sub_24A496BE8((uint64_t)a1);
    uint64_t v31 = v42;
    unint64_t v32 = *(void (**)(char *, uint64_t))(v41 + 8);
    v32(v9, v42);
    v32(v13, v31);
    swift_unknownObjectRelease();
  }
}

double sub_24A48D050@<D0>(long long *a1@<X0>, unint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v28 = a3;
  uint64_t v27 = sub_24A5BC780();
  uint64_t v26 = *(void *)(v27 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v27);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  unint64_t v9 = (char *)&v25 - v8;
  long long v10 = a1[1];
  long long v39 = *a1;
  long long v40 = v10;
  long long v41 = a1[2];
  unint64_t v11 = *a2;
  unint64_t v12 = a2[1];
  unint64_t v13 = a2[3];
  unint64_t v14 = a2[2];
  sub_24A48E6B4(*a2 >> 11, a2[4] >> 11, (uint64_t)v36);
  uint64_t v15 = v38;
  long long v25 = v36[0];
  long long v33 = v36[0];
  long long v34 = v36[1];
  uint64_t v35 = v37;
  LOBYTE(v29) = 1;
  sub_24A48D2C8(v11, v12, v14, v13, (uint64_t *)0x100000000, (uint64_t)v9);
  uint64_t v16 = sub_24A5BC770();
  if ((void)v25) {
    uint64_t v17 = *(unsigned __int8 *)(v25 + 18);
  }
  else {
    uint64_t v17 = 0;
  }
  v32[0] = v15;
  v32[1] = v17;
  v32[2] = 0;
  MEMORY[0x270FA5388](v16);
  *((void *)&v25 - 2) = v9;
  *((void *)&v25 - 1) = v7;
  uint64_t v30 = 0;
  char v31 = 1;
  if (v18)
  {
    sub_24A48E828(&v29, (uint64_t)v32, &v33, (uint64_t)&v30, (void (*)(void *__return_ptr))sub_24A48ECE4, (uint64_t)(&v25 - 2));
    sub_24A496BE8((uint64_t)a1);
    ++v15;
  }
  else
  {
    sub_24A496BE8((uint64_t)a1);
  }
  unint64_t v19 = *(void (**)(char *, uint64_t))(v26 + 8);
  uint64_t v20 = v27;
  v19(v7, v27);
  v19(v9, v20);
  uint64_t v21 = v35;
  double result = *(double *)&v33;
  long long v23 = v34;
  long long v24 = v28;
  *uint64_t v28 = v33;
  v24[1] = v23;
  *((void *)v24 + 4) = v21;
  *((void *)v24 + 5) = v15;
  return result;
}

uint64_t sub_24A48D2C8@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v13 = sub_24A5BC780();
  uint64_t v162 = *(void *)(v13 - 8);
  uint64_t v163 = v13;
  MEMORY[0x270FA5388](v13);
  v172 = &v151[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  unint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(qword_26B177CB8);
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  MEMORY[0x270FA5388](v17);
  uint64_t v21 = &v151[-v20];
  if (a1 < 0x400)
  {
LABEL_12:
    return sub_24A5BC770();
  }
  v165 = a5;
  v166 = (_OWORD *)a6;
  uint64_t v157 = v19;
  uint64_t v158 = v18;
  unint64_t v22 = sub_24A496820(a1, a2, a3, a4, 1);
  unint64_t v173 = v25;
  if (v24 == 1)
  {
    __break(1u);
LABEL_113:
    sub_24A496BE8((uint64_t)v21);
LABEL_114:
    sub_24A496BE8((uint64_t)v21);
    __break(1u);
LABEL_115:
    uint64_t result = sub_24A496BE8((uint64_t)v21);
    goto LABEL_117;
  }
  long long v26 = v6[1];
  long long v180 = *v6;
  long long v181 = v26;
  v175 = v6;
  long long v27 = v6[2];
  long long v182 = v27;
  unint64_t v28 = *((void *)&v27 + 1);
  unint64_t v29 = (unint64_t)v166;
  if (v23 != *((void *)&v27 + 1))
  {
LABEL_104:
    __break(1u);
LABEL_105:
    __break(1u);
    goto LABEL_106;
  }
  unint64_t v30 = v22;
  a5 = (uint64_t *)v24;
  unint64_t v174 = v23;
  unsigned __int8 v31 = v22;
  uint64_t v32 = (16 * (int)v22) & 0x4000;
  a3 = v180;
  uint64_t v170 = v181;
  uint64_t v171 = *((void *)&v180 + 1);
  uint64_t v168 = v182;
  uint64_t v169 = *((void *)&v181 + 1);
  if (!v24)
  {
    long long v213 = v180;
    long long v214 = v181;
    uint64_t v215 = v182;
    swift_unknownObjectRetain();
    sub_24A4895D4(v173, (uint64_t)&v210);
    unint64_t v29 = (unint64_t)v166;
    sub_24A496BE8((uint64_t)v175);
    unint64_t v167 = *((void *)&v210 + 1);
    unint64_t v164 = v210;
    v160.i32[0] = v211;
    v36.i32[0] = *(_DWORD *)((char *)&v211 + 1);
    uint64x2_t v159 = (uint64x2_t)vmovl_u8(v36);
    a6 = BYTE5(v211);
    a2 = v32 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)v31 << 16);
    if (a3) {
      goto LABEL_6;
    }
LABEL_8:
    unsigned int v35 = 0;
    goto LABEL_9;
  }
  uint64_t v33 = v24 + 24 * ((v173 >> ((4 * *(unsigned char *)(v24 + 18) + 8) & 0x3C)) & 0xF);
  unint64_t v34 = *(void *)(v33 + 32);
  unint64_t v164 = *(void *)(v33 + 24);
  v160.i32[0] = *(unsigned __int8 *)(v33 + 40);
  LODWORD(v27) = *(_DWORD *)(v33 + 41);
  uint64x2_t v159 = (uint64x2_t)vmovl_u8(*(uint8x8_t *)&v27);
  a6 = *(unsigned __int8 *)(v33 + 45);
  unint64_t v167 = v34;
  swift_bridgeObjectRetain();
  a2 = v32 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)v31 << 16);
  if (!a3) {
    goto LABEL_8;
  }
LABEL_6:
  unsigned int v35 = *(unsigned __int8 *)(a3 + 18);
LABEL_9:
  a4 = v174;
  unint64_t v37 = v167;
  if (v173 <= v35 && !a2)
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  unint64_t v161 = a2 & 0xFFFFFFFFFFFFFFFCLL | (v30 >> 8) & 3 | 4;
  if (((unint64_t)v165 & 0x100000000) != 0 || !a2) {
    goto LABEL_38;
  }
  v156.i64[0] = a6;
  unint64_t v39 = v167;
  unint64_t v40 = sub_24A497020(v161, v164, v167);
  if (v40 < 0x4000) {
    goto LABEL_105;
  }
  unint64_t v29 = v40;
  unint64_t v28 = v39;
  if ((v39 & 0x1000000000000000) != 0)
  {
LABEL_106:
    unint64_t v103 = v164;
    unint64_t v104 = v28;
    unint64_t v105 = sub_24A5BB5E0();
    sub_24A48E614(v105, v103, v104);
    sub_24A5BC060();
    goto LABEL_37;
  }
  a6 = v40 >> 16;
  if ((v28 & 0x2000000000000000) != 0)
  {
    *(void *)&long long v210 = v164;
    *((void *)&v210 + 1) = v28 & 0xFFFFFFFFFFFFFFLL;
    if ((*((unsigned char *)&v210 + a6 - 1) & 0xC0) != 0x80) {
      goto LABEL_30;
    }
    uint64_t v42 = 0;
    do
      int v44 = *((unsigned char *)&v210 + a6 + v42-- - 2) & 0xC0;
    while (v44 == 128);
    goto LABEL_29;
  }
  if ((v164 & 0x1000000000000000) == 0) {
    goto LABEL_110;
  }
  for (uint64_t i = (v28 & 0xFFFFFFFFFFFFFFFLL) + 32; ; uint64_t i = sub_24A5BC120())
  {
    if ((*(unsigned char *)(a6 + i - 1) & 0xC0) == 0x80)
    {
      uint64_t v42 = 0;
      do
        int v43 = *(unsigned char *)(a6 + i - 2 + v42--) & 0xC0;
      while (v43 == 128);
LABEL_29:
      uint64_t v45 = 1 - v42;
    }
    else
    {
LABEL_30:
      uint64_t v45 = 1;
    }
    unint64_t v46 = v164;
    sub_24A48E614((v29 - (v45 << 16)) & 0xFFFFFFFFFFFF0000 | 5, v164, v167);
    if ((v167 & 0x2000000000000000) != 0)
    {
      *(void *)&long long v210 = v46;
      *((void *)&v210 + 1) = v167 & 0xFFFFFFFFFFFFFFLL;
      swift_bridgeObjectRetain();
    }
    else
    {
      unint64_t v155 = (v46 & 0x1000000000000000) != 0 ? (v167 & 0xFFFFFFFFFFFFFFFLL) + 32 : sub_24A5BC120();
      swift_bridgeObjectRetain();
    }
    sub_24A5BC130();
    swift_bridgeObjectRelease();
LABEL_37:
    char v47 = sub_24A5BC740();
    unint64_t v29 = (unint64_t)v166;
    unint64_t v37 = v167;
    a6 = v156.i64[0];
    if (v47)
    {
      swift_bridgeObjectRelease();
      return sub_24A5BC770();
    }
LABEL_38:
    v48.i16[0] = v159.u8[0];
    v48.i16[1] = v159.u8[2];
    v48.i16[2] = v159.u8[4];
    v48.i16[3] = v159.u8[6];
    uint32x4_t v49 = vmovl_u16(v48);
    v50.i64[0] = v49.u32[0];
    v50.i64[1] = v49.u32[1];
    uint64x2_t v51 = v50;
    v50.i64[0] = v49.u32[2];
    v50.i64[1] = v49.u32[3];
    uint64x2_t v159 = (uint64x2_t)xmmword_24A5BD060;
    uint64x2_t v156 = (uint64x2_t)xmmword_24A5BD070;
    int8x16_t v52 = vorrq_s8((int8x16_t)vshlq_u64(v51, (uint64x2_t)xmmword_24A5BD070), (int8x16_t)vshlq_u64(v50, (uint64x2_t)xmmword_24A5BD060));
    unint64_t v53 = sub_24A48F9BC(v161, v164, v37, *(void *)&vorr_s8(*(int8x8_t *)v52.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL)) | (a6 << 40) | v160.u32[0]);
    if (v55) {
      break;
    }
    if (a2 >> 14 >= v53 >> 14)
    {
      unint64_t v56 = &v21[*(int *)(v15 + 48)];
      unint64_t v57 = sub_24A5BB830();
      uint64_t v58 = v157 + *(int *)(v15 + 48);
      sub_24A48F534(v57, v59, v60, v61);
      swift_bridgeObjectRelease();
      uint64_t v62 = v163;
      long long v63 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v162 + 32);
      v63(v56, v58, v163);
      long long v64 = (unsigned char *)(v158 + *(int *)(v15 + 48));
      v63(v64, (uint64_t)v56, v62);
      return ((uint64_t (*)(_OWORD *, unsigned char *, uint64_t))v63)(v166, v64, v62);
    }
    __break(1u);
LABEL_108:
    __break(1u);
LABEL_109:
    __break(1u);
LABEL_110:
    ;
  }
  v160.i64[0] = (uint64_t)&v178;
  unint64_t v28 = a3 + 24;
  v165 = (uint64_t *)(a3 + 24);
  unint64_t v15 = v173;
  unint64_t v177 = a4;
  uint64_t v178 = v173;
  v179 = a5;
  unint64_t v65 = a4;
  uint64_t v21 = v175;
  while (a3)
  {
    unint64_t v29 = *(unsigned __int8 *)(a3 + 18);
    if (v15 <= v29) {
      goto LABEL_91;
    }
    swift_unknownObjectRetain();
LABEL_47:
    if (v15 <= v29)
    {
      __break(1u);
LABEL_103:
      __break(1u);
      goto LABEL_104;
    }
    if (a5)
    {
      char v66 = (4 * *((unsigned char *)a5 + 18) + 8) & 0x3C;
      if (((v15 >> v66) & 0xF) != 0)
      {
        unint64_t v15 = ((((v15 >> v66) & 0xF) - 1) << v66) | ((-15 << v66) - 1) & v15;
        uint64_t v178 = v15;
        sub_24A496BE8((uint64_t)v21);
        goto LABEL_85;
      }
    }
    char v67 = (4 * *(unsigned char *)(a3 + 18) + 8) & 0x3C;
    a2 = (v15 >> v67) & 0xF;
    if (!*(unsigned char *)(a3 + 18))
    {
      if (!a2) {
        goto LABEL_114;
      }
      unint64_t v15 = ((a2 - 1) << v67) | ((-15 << v67) - 1) & v15;
      uint64_t v178 = v15;
      sub_24A496BE8((uint64_t)v21);
      v179 = (uint64_t *)a3;
      a5 = (uint64_t *)a3;
      a4 = v174;
      unint64_t v28 = v171;
      goto LABEL_86;
    }
    if (a2 >= *(unsigned __int16 *)(a3 + 16))
    {
      swift_unknownObjectRetain();
      if (!a2) {
        goto LABEL_113;
      }
LABEL_83:
      uint64_t v178 = v178 & ((-15 << v67) - 1) | ((a2 - 1) << v67);
      unint64_t v83 = &v165[5 * (int)a2 - 5];
      uint64_t v84 = v83[4];
      long long v85 = *((_OWORD *)v83 + 1);
      v206[0] = *(_OWORD *)v83;
      v206[1] = v85;
      uint64_t v207 = v84;
      swift_unknownObjectRetain();
      a5 = sub_24A5B48F8((uint64_t *)v160.i64[0]);
      sub_24A496BE8((uint64_t)v206);
      v179 = a5;
      a4 = v174;
      goto LABEL_84;
    }
    uint64_t v68 = v165[5 * ((v15 >> v67) & 0xF)];
    char v69 = (4 * *(unsigned char *)(v68 + 18) + 8) & 0x3C;
    unint64_t v70 = (v15 >> v69) & 0xF;
    if (!*(unsigned char *)(v68 + 18))
    {
      if (!v70)
      {
        swift_unknownObjectRetain();
        goto LABEL_82;
      }
      uint64_t v178 = ((v70 - 1) << v69) | ((-15 << v69) - 1) & v15;
      v179 = (uint64_t *)v68;
      swift_unknownObjectRetain();
      a5 = (uint64_t *)v68;
      goto LABEL_71;
    }
    unint64_t v71 = v68 + 24;
    if (v70 < *(unsigned __int16 *)(v68 + 16))
    {
      a6 = *(void *)(v71 + 40 * ((v15 >> v69) & 0xF));
      uint64_t v72 = (4 * *(unsigned char *)(a6 + 18) + 8) & 0x3C;
      unint64_t v73 = (v15 >> v72) & 0xF;
      if (*(unsigned char *)(a6 + 18))
      {
        if (v73 < *(unsigned __int16 *)(a6 + 16))
        {
          unint64_t v155 = v68 + 24;
          a5 = *(uint64_t **)(a6 + 24 + 40 * ((v15 >> v72) & 0xF));
          int v74 = *((unsigned __int8 *)a5 + 18);
          char v75 = (4 * v74 + 8) & 0x3C;
          uint64_t v76 = (v15 >> v75) & 0xF;
          v197[0] = v76;
          if (v74)
          {
            uint64_t v157 = a6 + 24;
            uint64_t v158 = v72;
            unint64_t v15 = (v15 >> v72) & 0xF;
            v153 = a5 + 3;
            v154 = (unsigned __int16 *)(a5 + 2);
            int v152 = v74;
            sub_24A497498((uint64_t)v175);
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            LODWORD(v154) = sub_24A5B49C4(v154, (uint64_t)v153, v197, (uint64_t)&v177, v152);
            swift_unknownObjectRelease();
            unint64_t v71 = v155;
            if (v154)
            {
              a5 = v179;
              goto LABEL_78;
            }
            goto LABEL_76;
          }
          if (v76)
          {
            uint64_t v178 = ((v76 - 1) << v75) | ((-15 << v75) - 1) & v15;
            v179 = a5;
            sub_24A497498((uint64_t)v175);
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            goto LABEL_78;
          }
          unint64_t v71 = v155;
        }
        uint64_t v157 = a6 + 24;
        uint64_t v158 = v72;
        unint64_t v15 = (v15 >> v72) & 0xF;
        sub_24A497498((uint64_t)v175);
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
LABEL_76:
        if (v15)
        {
          uint64_t v178 = v178 & ((-15 << v158) - 1) | ((v15 - 1) << v158);
          uint64_t v80 = v157 + 40 * ((int)v15 - 1);
          uint64_t v81 = *(void *)(v80 + 32);
          long long v82 = *(_OWORD *)(v80 + 16);
          long long v210 = *(_OWORD *)v80;
          long long v211 = v82;
          uint64_t v212 = v81;
          swift_unknownObjectRetain();
          a5 = sub_24A5B48F8((uint64_t *)v160.i64[0]);
          sub_24A496BE8((uint64_t)&v210);
          v179 = a5;
LABEL_78:
          swift_unknownObjectRelease();
LABEL_79:
          a4 = v174;
          swift_unknownObjectRelease();
          uint64_t v21 = v175;
          goto LABEL_84;
        }
        swift_unknownObjectRelease();
        if (!v70)
        {
LABEL_81:
          swift_unknownObjectRelease();
LABEL_82:
          uint64_t v21 = v175;
          if (!a2) {
            goto LABEL_113;
          }
          goto LABEL_83;
        }
        goto LABEL_70;
      }
      if (v73)
      {
        uint64_t v178 = ((v73 - 1) << v72) | ((-15 << v72) - 1) & v15;
        v179 = (uint64_t *)a6;
        sub_24A497498((uint64_t)v175);
        swift_unknownObjectRetain();
        a5 = (uint64_t *)a6;
        goto LABEL_79;
      }
    }
    sub_24A497498((uint64_t)v175);
    swift_unknownObjectRetain();
    if (!v70) {
      goto LABEL_81;
    }
LABEL_70:
    uint64_t v178 = v178 & ((-15 << v69) - 1) | ((v70 - 1) << v69);
    unint64_t v77 = v71 + 40 * ((int)v70 - 1);
    uint64_t v78 = *(void *)(v77 + 32);
    long long v79 = *(_OWORD *)(v77 + 16);
    v208[0] = *(_OWORD *)v77;
    v208[1] = v79;
    uint64_t v209 = v78;
    swift_unknownObjectRetain();
    a5 = sub_24A5B48F8((uint64_t *)v160.i64[0]);
    sub_24A496BE8((uint64_t)v208);
    v179 = a5;
    swift_unknownObjectRelease();
LABEL_71:
    a4 = v174;
    uint64_t v21 = v175;
LABEL_84:
    sub_24A496BE8((uint64_t)v21);
    sub_24A496BE8((uint64_t)v21);
    unint64_t v65 = v177;
    unint64_t v15 = v178;
LABEL_85:
    unint64_t v28 = v171;
    if (v65 != a4) {
      goto LABEL_103;
    }
LABEL_86:
    if (a5)
    {
      unint64_t v28 = (unint64_t)&a5[3 * ((v15 >> ((4 * *((unsigned char *)a5 + 18) + 8) & 0x3C)) & 0xF)];
      unint64_t v29 = *(unsigned __int8 *)(v28 + 40);
      a6 = *(unsigned __int8 *)(v28 + 44);
      if (a6 < v29) {
        goto LABEL_91;
      }
    }
    else
    {
      unint64_t v201 = a3;
      unint64_t v202 = v28;
      uint64_t v203 = v170;
      uint64_t v204 = v169;
      uint64_t v205 = v168;
      swift_unknownObjectRetain();
      sub_24A4895D4(v15, (uint64_t)v197);
      sub_24A496BE8((uint64_t)v21);
      unint64_t v29 = v198;
      a6 = BYTE4(v198);
      swift_bridgeObjectRelease();
      if (a6 < v29) {
        goto LABEL_91;
      }
    }
  }
  unint64_t v29 = 0;
  if (v15) {
    goto LABEL_47;
  }
  unint64_t v15 = 0;
LABEL_91:
  if (v15 >= v173) {
    goto LABEL_108;
  }
  if (a5)
  {
    unint64_t v86 = &a5[3 * ((v15 >> ((4 * *((unsigned char *)a5 + 18) + 8) & 0x3C)) & 0xF)];
    unint64_t v88 = v86[3];
    unint64_t v87 = v86[4];
    unsigned int v89 = *((unsigned __int8 *)v86 + 40);
    v54.i32[0] = *(_DWORD *)((char *)v86 + 41);
    uint16x8_t v160 = vmovl_u8(v54);
    a6 = *((unsigned __int8 *)v86 + 45);
    swift_bridgeObjectRetain();
    v90.i64[0] = v160.i64[0];
  }
  else
  {
    v197[0] = a3;
    v197[1] = v171;
    uint64_t v198 = v170;
    uint64_t v199 = v169;
    uint64_t v200 = v168;
    swift_unknownObjectRetain();
    sub_24A4895D4(v15, (uint64_t)&v192);
    sub_24A496BE8((uint64_t)v21);
    unint64_t v88 = v192;
    unint64_t v87 = v193;
    unsigned int v89 = v194;
    v91.i32[0] = *(_DWORD *)((char *)&v194 + 1);
    uint16x8_t v90 = vmovl_u8(v91);
    a6 = BYTE5(v194);
  }
  uint32x4_t v92 = vmovl_u16((uint16x4_t)(v90.i64[0] & 0xFF00FF00FF00FFLL));
  v93.i64[0] = v92.u32[0];
  v93.i64[1] = v92.u32[1];
  uint64x2_t v94 = v93;
  v93.i64[0] = v92.u32[2];
  v93.i64[1] = v92.u32[3];
  int8x16_t v95 = vorrq_s8((int8x16_t)vshlq_u64(v94, v156), (int8x16_t)vshlq_u64(v93, v159));
  a4 = sub_24A5066DC(v88, v87, *(void *)&vorr_s8(*(int8x8_t *)v95.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v95, v95, 8uLL)) | (a6 << 40) | v89);
  unint64_t v97 = v96;
  uint64_t v21 = v98;
  a2 = v99;
  swift_bridgeObjectRelease();
  sub_24A48F534(a4, v97, (unint64_t)v21, a2);
  swift_unknownObjectRetain();
  unint64_t v29 = (unint64_t)&v180;
  if (v15 >= sub_24A498214()) {
    goto LABEL_109;
  }
  a6 = v174;
  uint64_t v21 = v175;
  if (a5)
  {
    char v100 = (4 * *((unsigned char *)a5 + 18) + 8) & 0x3C;
    unint64_t v101 = ((v15 >> v100) & 0xF) + 1;
    if (v101 < *((unsigned __int16 *)a5 + 8))
    {
      unint64_t v15 = (v101 << v100) | ((-15 << v100) - 1) & v15;
      uint64_t v178 = v15;
      goto LABEL_115;
    }
  }
  unint64_t v192 = a3;
  unint64_t v193 = v171;
  uint64_t v194 = v170;
  uint64_t v195 = v169;
  uint64_t v196 = v168;
  swift_unknownObjectRetain();
  char v102 = sub_24A498278((uint64_t)&v177);
  sub_24A496BE8((uint64_t)v21);
  if ((v102 & 1) == 0)
  {
    unint64_t v15 = sub_24A498214();
    uint64_t result = sub_24A496BE8((uint64_t)v21);
    goto LABEL_116;
  }
  uint64_t result = sub_24A496BE8((uint64_t)v21);
  unint64_t v15 = v178;
LABEL_117:
  while (2)
  {
    while (2)
    {
      while (2)
      {
        if (v15 >= v173)
        {
          uint64_t v142 = sub_24A5BB830();
          uint64_t v144 = v143;
          uint64_t v146 = v145;
          uint64_t v148 = v147;
          swift_bridgeObjectRelease();
          uint64_t v149 = v142;
          v150 = v172;
          sub_24A58AE34(v149, v144, v146, v148);
          swift_bridgeObjectRelease();
          return (*(uint64_t (**)(_OWORD *, unsigned char *, uint64_t))(v162 + 32))(v166, v150, v163);
        }
        if (v177 != a6)
        {
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
          goto LABEL_158;
        }
        unint64_t v106 = v179;
        if (v179)
        {
          swift_bridgeObjectRetain();
        }
        else
        {
          unint64_t v187 = a3;
          uint64_t v188 = v171;
          uint64_t v189 = v170;
          uint64_t v190 = v169;
          uint64_t v191 = v168;
          swift_unknownObjectRetain();
          sub_24A4895D4(v15, (uint64_t)v176);
          sub_24A496BE8((uint64_t)v21);
        }
        uint64_t v107 = sub_24A5BB830();
        uint64_t v109 = v108;
        uint64_t v111 = v110;
        uint64_t v113 = v112;
        swift_bridgeObjectRelease();
        sub_24A58AE34(v107, v109, v111, v113);
        uint64_t result = swift_bridgeObjectRelease();
        if (!a3) {
          goto LABEL_156;
        }
        int v114 = *(unsigned __int8 *)(a3 + 18);
        uint64_t v115 = *(unsigned __int16 *)(a3 + 16);
        swift_unknownObjectRetain_n();
        uint64_t v21 = v175;
        uint64_t result = sub_24A496BE8((uint64_t)v175);
        if (v15 >= (((-15 << ((4 * v114 + 8) & 0x3C)) - 1) & v114 | (unint64_t)(v115 << ((4 * v114 + 8) & 0x3C)))) {
          goto LABEL_156;
        }
        if (v106)
        {
          char v116 = (4 * *((unsigned char *)v106 + 18) + 8) & 0x3C;
          unint64_t v117 = ((v15 >> v116) & 0xF) + 1;
          if (v117 < *((unsigned __int16 *)v106 + 8))
          {
            unint64_t v15 = (v117 << v116) | ((-15 << v116) - 1) & v15;
            uint64_t v178 = v15;
LABEL_129:
            uint64_t result = sub_24A496BE8((uint64_t)v21);
            a6 = v174;
            continue;
          }
        }
        break;
      }
      char v118 = (4 * *(unsigned char *)(a3 + 18) + 8) & 0x3C;
      uint64_t v119 = (v15 >> v118) & 0xF;
      if (!*(unsigned char *)(a3 + 18))
      {
        if (v119 + 1 < (unint64_t)*(unsigned __int16 *)(a3 + 16))
        {
          unint64_t v15 = ((v119 + 1) << v118) | ((-15 << v118) - 1) & v15;
          uint64_t v178 = v15;
          uint64_t result = sub_24A496BE8((uint64_t)v21);
          v179 = (uint64_t *)a3;
          a6 = v174;
          continue;
        }
        goto LABEL_148;
      }
      break;
    }
    uint64_t v120 = v165[5 * ((v15 >> v118) & 0xF)];
    char v121 = (4 * *(unsigned char *)(v120 + 18) + 8) & 0x3C;
    uint64_t v122 = (v15 >> v121) & 0xF;
    if (!*(unsigned char *)(v120 + 18))
    {
      if (v122 + 1 >= (unint64_t)*(unsigned __int16 *)(v120 + 16))
      {
        swift_unknownObjectRetain();
        goto LABEL_143;
      }
      unint64_t v15 = ((v122 + 1) << v121) | ((-15 << v121) - 1) & v15;
      uint64_t v178 = v15;
      v179 = (uint64_t *)v120;
      swift_unknownObjectRetain();
LABEL_154:
      a6 = v174;
      sub_24A496BE8((uint64_t)v21);
      goto LABEL_115;
    }
    uint64_t v123 = *(void *)(v120 + 24 + 40 * ((v15 >> v121) & 0xF));
    int v124 = *(unsigned __int8 *)(v123 + 18);
    char v125 = (4 * v124 + 8) & 0x3C;
    v176[0] = (v15 >> v125) & 0xF;
    if (!v124)
    {
      unint64_t v127 = ((v15 >> v125) & 0xF) + 1;
      if (v127 >= *(unsigned __int16 *)(v123 + 16))
      {
        v160.i64[0] = v120 + 24;
        sub_24A497498((uint64_t)v175);
        swift_unknownObjectRetain();
        goto LABEL_141;
      }
      unint64_t v15 = (v127 << v125) | ((-15 << v125) - 1) & v15;
      uint64_t v178 = v15;
      v179 = (uint64_t *)v123;
      uint64_t v21 = v175;
      sub_24A497498((uint64_t)v175);
      swift_unknownObjectRetain();
LABEL_153:
      swift_unknownObjectRelease();
      goto LABEL_154;
    }
    v160.i64[0] = v120 + 24;
    sub_24A497498((uint64_t)v175);
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    char v126 = sub_24A538E54(v123 + 24, v176, (uint64_t)&v177, v123, v124);
    swift_unknownObjectRelease();
    if (v126)
    {
      unint64_t v15 = v178;
      uint64_t v21 = v175;
      goto LABEL_153;
    }
LABEL_141:
    uint64_t v128 = v122 + 1;
    if (v122 + 1 >= (unint64_t)*(unsigned __int16 *)(v120 + 16))
    {
      swift_unknownObjectRelease();
      uint64_t v21 = v175;
LABEL_143:
      uint64_t v129 = v119 + 1;
      if (v119 + 1 < (unint64_t)*(unsigned __int16 *)(a3 + 16))
      {
        unint64_t v130 = &v165[5 * v129];
        long long v132 = *(_OWORD *)v130;
        long long v131 = *((_OWORD *)v130 + 1);
        uint64_t v184 = v130[4];
        v183[0] = v132;
        v183[1] = v131;
        uint64_t result = v132;
        unsigned int v133 = *(unsigned __int8 *)(v132 + 18) + 1;
        if ((v133 >> 8)) {
          goto LABEL_157;
        }
        uint64_t v178 = ((-256 << (4 * (v133 & 0xF))) | 0xFF) & (v178 & ((-15 << v118) - 1) | (v129 << v118));
        unint64_t v15 = v178;
        swift_unknownObjectRetain();
        uint64_t v134 = sub_24A53852C(v15);
        sub_24A496BE8((uint64_t)v183);
        v179 = (uint64_t *)v134;
        sub_24A496BE8((uint64_t)v21);
        goto LABEL_129;
      }
      sub_24A496BE8((uint64_t)v21);
LABEL_148:
      int v135 = *(unsigned __int8 *)(a3 + 18);
      uint64_t v136 = *(unsigned __int16 *)(a3 + 16);
      swift_unknownObjectRetain();
      sub_24A496BE8((uint64_t)v21);
      uint64_t result = sub_24A496BE8((uint64_t)v21);
      unint64_t v15 = ((-15 << ((4 * v135 + 8) & 0x3C)) - 1) & v135 | (unint64_t)(v136 << ((4 * v135 + 8) & 0x3C));
      a6 = v174;
LABEL_116:
      unint64_t v177 = a6;
      uint64_t v178 = v15;
      v179 = 0;
      continue;
    }
    break;
  }
  uint64_t v137 = v160.i64[0] + 40 * v128;
  long long v139 = *(_OWORD *)v137;
  long long v138 = *(_OWORD *)(v137 + 16);
  uint64_t v186 = *(void *)(v137 + 32);
  v185[0] = v139;
  v185[1] = v138;
  uint64_t result = v139;
  unsigned int v140 = *(unsigned __int8 *)(v139 + 18) + 1;
  uint64_t v21 = v175;
  if (((v140 >> 8) & 1) == 0)
  {
    uint64_t v178 = ((-256 << (4 * (v140 & 0xF))) | 0xFF) & (v178 & ((-15 << v121) - 1) | (v128 << v121));
    unint64_t v15 = v178;
    swift_unknownObjectRetain();
    uint64_t v141 = sub_24A53852C(v15);
    sub_24A496BE8((uint64_t)v185);
    v179 = (uint64_t *)v141;
    goto LABEL_153;
  }
LABEL_158:
  __break(1u);
  return result;
}

unint64_t sub_24A48E614(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5) {
    goto LABEL_9;
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 <= result >> 16)
  {
    __break(1u);
LABEL_9:
    uint64_t result = sub_24A516840(result, a2, a3);
    if ((result & 1) == 0) {
      return result & 0xC | sub_24A4971A8(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
    }
  }
  return result;
}

uint64_t sub_24A48E6B4@<X0>(int64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = *(void *)v3;
  uint64_t v8 = *(void *)(v3 + 32);
  if (*(void *)v3)
  {
    uint64_t v16 = MEMORY[0x263F8EE78];
    long long v17 = 0u;
    long long v18 = 0u;
    memset(v19, 0, 30);
    uint64_t v20 = 0;
    v21[0] = 0;
    *(void *)((char *)v21 + 6) = 0;
    v21[2] = MEMORY[0x263F8EE78];
    if ((a1 & 0x8000000000000000) == 0 && a2 >= a1 && v8 >= a2)
    {
      if (a1 != a2)
      {
        int v9 = *(unsigned __int8 *)(result + 18);
        uint64_t v10 = result + 24;
        unint64_t v11 = (_WORD *)(swift_unknownObjectRetain() + 16);
        if (v9) {
          sub_24A56F96C(v11, v10, a1, a2, (uint64_t)&v16);
        }
        else {
          sub_24A493A8C((unint64_t)v11, v10, a1, a2, (uint64_t)&v16);
        }
        sub_24A496BE8(v3);
      }
      sub_24A491510(&v22);
      uint64_t v13 = v22;
      long long v15 = v23;
      uint64_t v12 = v24;
      uint64_t v8 = v25;
      uint64_t v14 = v26;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    __break(1u);
  }
  else if (!(a2 | a1))
  {
    long long v15 = *(_OWORD *)(v3 + 8);
    uint64_t v12 = *(void *)(v3 + 24);
    uint64_t v16 = 0;
    uint64_t result = MEMORY[0x24C5C7E90](&v16, 8);
    uint64_t v13 = 0;
    uint64_t v14 = v16;
LABEL_13:
    *(void *)a3 = v13;
    *(_OWORD *)(a3 + 8) = v15;
    *(void *)(a3 + 24) = v12;
    *(void *)(a3 + 32) = v8;
    *(void *)(a3 + 40) = v14;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_24A48E828(_OWORD *a1, uint64_t a2, long long *a3, uint64_t a4, void (*a5)(void *__return_ptr), uint64_t a6)
{
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    long long v9 = a3[1];
    long long v53 = *a3;
    long long v54 = v9;
    uint64_t v55 = *((void *)a3 + 4);
    sub_24A4CBC1C((uint64_t)v51);
    swift_unknownObjectRelease();
    long long v10 = v51[1];
    *a3 = v51[0];
    a3[1] = v10;
    *((void *)a3 + 4) = v52;
  }
  uint64_t result = *(void *)a3;
  int v12 = *(unsigned __int8 *)(*(void *)a3 + 18);
  uint64_t v13 = (unsigned __int16 *)(*(void *)a3 + 16);
  unint64_t v14 = *v13;
  char v15 = (4 * v12 + 8) & 0x3C;
  unint64_t v16 = (*(void *)(a2 + 8) >> v15) & 0xFLL;
  unint64_t v50 = v16;
  if (v16 > v14)
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (v16 >= v14)
  {
    *a1 = 0u;
    a1[1] = 0u;
    char v23 = 1;
    return v23 & 1;
  }
  unint64_t v39 = a3;
  long long v48 = 0u;
  long long v49 = 0u;
  if (v12)
  {
    uint64_t v38 = a1;
    uint64_t v40 = ((-15 << v15) - 1) & ((-256 << ((4 * v12) & 0x3C)) | 0xFF);
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = swift_unknownObjectRetain() + 40 * v16 + 24;
    while (1)
    {
      uint64_t result = sub_24A48E828(&v44, a2, v21, a4, a5, a6);
      BOOL v22 = __OFADD__(v20, v44);
      v20 += v44;
      if (v22)
      {
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
      BOOL v22 = __OFADD__(v19, v45);
      v19 += v45;
      if (v22) {
        goto LABEL_27;
      }
      BOOL v22 = __OFADD__(v18, v46);
      v18 += v46;
      if (v22) {
        goto LABEL_28;
      }
      BOOL v22 = __OFADD__(v17, v47);
      v17 += v47;
      if (v22) {
        goto LABEL_29;
      }
      char v23 = result;
      if ((result & 1) == 0) {
        break;
      }
      *(void *)(a2 + 8) = v40 & *(void *)(a2 + 8) | (++v16 << v15);
      v21 += 40;
      if (v14 == v16)
      {
        *(void *)(a2 + 16) = 0;
        break;
      }
    }
    uint64_t result = swift_unknownObjectRelease();
    *uint64_t v38 = v20;
    v38[1] = v19;
    v38[2] = v18;
    _OWORD v38[3] = v17;
    uint64_t v24 = v39[1];
    BOOL v22 = __OFADD__(v24, v20);
    uint64_t v25 = v24 + v20;
    if (v22) {
      goto LABEL_31;
    }
    v39[1] = v25;
    uint64_t v26 = v39[2];
    BOOL v22 = __OFADD__(v26, v19);
    uint64_t v27 = v26 + v19;
    if (!v22)
    {
      v39[2] = v27;
      uint64_t v28 = v39[3];
      BOOL v22 = __OFADD__(v28, v18);
      uint64_t v29 = v28 + v18;
      if (v22) {
        goto LABEL_33;
      }
      v39[3] = v29;
      uint64_t v30 = v39[4];
      BOOL v22 = __OFADD__(v30, v17);
      uint64_t v31 = v30 + v17;
      if (!v22)
      {
        v39[4] = v31;
        return v23 & 1;
      }
      goto LABEL_34;
    }
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  *(void *)(a2 + 16) = result;
  uint64_t v32 = result + 24;
  swift_unknownObjectRetain();
  char v23 = sub_24A48EB0C(v13, v32, (uint64_t *)&v50, &v48, a2, 0, a4, a5);
  uint64_t result = swift_unknownObjectRelease();
  long long v33 = v48;
  long long v34 = v49;
  *a1 = v48;
  a1[1] = v34;
  uint64_t v35 = *((void *)a3 + 1);
  if (__OFADD__(v35, (void)v33))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  *((void *)a3 + 1) = v35 + v33;
  uint64_t v36 = *((void *)a3 + 2);
  if (__OFADD__(v36, *((void *)&v33 + 1)))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  *((void *)a3 + 2) = v36 + *((void *)&v33 + 1);
  if (__OFADD__(*((void *)a3 + 3), (void)v34))
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  *((void *)a3 + 3) = v34;
  uint64_t v37 = *((void *)a3 + 4);
  if (!__OFADD__(v37, *((void *)&v34 + 1)))
  {
    *((void *)a3 + 4) = v37 + *((void *)&v34 + 1);
    return v23 & 1;
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_24A48EB0C(unsigned __int16 *a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, char a6, uint64_t a7, void (*a8)(void *__return_ptr))
{
  void (*v18)(void *__return_ptr);
  uint64_t result;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v40;
  unsigned __int8 v41;

  uint64_t v8 = *a3;
  if (*a3 >= *a1) {
    return 1;
  }
  uint64_t v36 = (-15 << ((4 * a6 + 8) & 0x3C)) - 1;
  uint64_t v37 = (4 * a6 + 8) & 0x3C;
  uint64_t v38 = *a1;
  while (1)
  {
    uint64_t v13 = (unsigned __int8 *)(a2 + 24 * v8);
    uint64_t v14 = v13[16];
    uint64_t v15 = v13[17];
    uint64_t v16 = v13[18];
    uint64_t v17 = v13[19];
    uint64_t v18 = a8;
    a8(&v40);
    uint64_t result = v41;
    *(void *)a7 = v40;
    *(unsigned char *)(a7 + 8) = result;
    uint64_t v20 = (unsigned __int8 *)(a2 + 24 * *a3);
    uint64_t v21 = v20[19] - v17;
    BOOL v22 = *a4 + v21;
    if (__OFADD__(*a4, v21)) {
      break;
    }
    char v23 = v20[16];
    uint64_t v24 = v20[17];
    uint64_t v25 = v20[18] - v16;
    *a4 = v22;
    uint64_t v26 = a4[1];
    uint64_t v27 = __OFADD__(v26, v25);
    uint64_t v28 = v26 + v25;
    if (v27) {
      goto LABEL_15;
    }
    uint64_t v29 = v24 - v15;
    a4[1] = v28;
    uint64_t v30 = a4[2];
    uint64_t v27 = __OFADD__(v30, v29);
    uint64_t v31 = v30 + v29;
    if (v27) {
      goto LABEL_16;
    }
    uint64_t v32 = v23 - v14;
    a4[2] = v31;
    long long v33 = a4[3];
    uint64_t v27 = __OFADD__(v33, v32);
    long long v34 = v33 + v32;
    if (v27) {
      goto LABEL_17;
    }
    a4[3] = v34;
    if (!result) {
      return result;
    }
    uint64_t v35 = *a3 + 1;
    if (__OFADD__(*a3, 1)) {
      goto LABEL_18;
    }
    *a3 = v35;
    if (v35 < 0) {
      goto LABEL_19;
    }
    *(void *)(a5 + 8) = *(void *)(a5 + 8) & v36 | (v35 << v37);
    uint64_t v8 = *a3;
    a8 = v18;
    if (*a3 >= v38) {
      return result;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

uint64_t sub_24A48ECA4@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = sub_24A48ED24(0xFuLL, *(void *)(v1 + 16), *(void *)(v1 + 24));
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v4 & 1;
  return result;
}

uint64_t sub_24A48ECE4@<X0>(uint64_t a1@<X8>)
{
  return sub_24A48ECEC(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_24A48ECEC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t result = sub_24A48ED24(0xFuLL, a1, a2);
  *(void *)a3 = result;
  *(unsigned char *)(a3 + 8) = v5 & 1;
  return result;
}

uint64_t sub_24A48ED24(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v74 = a3;
  uint64_t v72 = a2;
  uint64_t v62 = sub_24A5BC780();
  v61[0] = *(void *)(v62 - 8);
  MEMORY[0x270FA5388](v62);
  long long v63 = (char *)v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v7 = *(void *)v3;
  unint64_t v6 = *(void *)(v3 + 8);
  uint64_t v8 = *(void *)v3 & 0xFFFFFFFFFFFFLL;
  uint64_t v66 = v8;
  uint64_t v67 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000) != 0) {
    uint64_t v8 = HIBYTE(v6) & 0xF;
  }
  if ((v6 & 0x1000000000000000) != 0) {
    uint64_t v9 = (v7 >> 59) & 1;
  }
  else {
    uint64_t v9 = 1;
  }
  unint64_t v78 = v8;
  unint64_t v10 = 4 * v8;
  unint64_t v11 = a1 >> 14;
  swift_bridgeObjectRetain();
  unint64_t v75 = v10;
  unint64_t v77 = v3;
  unint64_t v73 = v7;
  v61[1] = a1;
  unint64_t v64 = a1 >> 14;
  uint64_t v65 = v9;
  if (a1 >> 14 >= v10)
  {
    unint64_t v69 = 0;
    unint64_t v12 = 0;
    LODWORD(v72) = 1;
    unint64_t v26 = v6;
    unint64_t v14 = a1;
    unint64_t v27 = a1 >> 14;
    int v68 = 1;
    int v76 = 1;
    goto LABEL_60;
  }
  unint64_t v12 = 0;
  uint64_t v13 = 4 << v9;
  uint64_t v71 = v6 & 0xFFFFFFFFFFFFFFLL;
  unint64_t v69 = 0;
  uint64_t v70 = (v6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  int v76 = 1;
  unint64_t v14 = a1;
  int v68 = 1;
  while (1)
  {
    unint64_t v15 = v14 & 0xC;
    BOOL v16 = (v14 & 1) == 0 || v15 == v13;
    BOOL v17 = v16;
    if (v16)
    {
      unint64_t v18 = v14;
      if (v15 == v13) {
        unint64_t v18 = sub_24A4DFD84(v14, v7, v6);
      }
      if (v18 >> 16 >= v78)
      {
        __break(1u);
LABEL_91:
        __break(1u);
LABEL_92:
        __break(1u);
LABEL_93:
        __break(1u);
LABEL_94:
        __break(1u);
LABEL_95:
        __break(1u);
        goto LABEL_96;
      }
      if ((v18 & 1) == 0) {
        sub_24A4971A8(v18, v7, v6);
      }
    }
    else if (v14 >> 16 >= v78)
    {
      goto LABEL_91;
    }
    if ((v6 & 0x1000000000000000) != 0)
    {
      sub_24A5BC060();
    }
    else
    {
      if ((v6 & 0x2000000000000000) != 0)
      {
        unint64_t v79 = v7;
        uint64_t v80 = v71;
      }
      else if ((v7 & 0x1000000000000000) == 0)
      {
        sub_24A5BC120();
      }
      sub_24A5BC130();
    }
    char v19 = sub_24A5BC760();
    if (sub_24A5BC760()) {
      break;
    }
    unint64_t v7 = v73;
    if (v19)
    {
      unint64_t v3 = v77;
      unsigned int v20 = *(unsigned __int8 *)(v77 + 19) - 1;
      if ((v20 & 0xFFFFFF00) != 0) {
        goto LABEL_95;
      }
LABEL_38:
      *(unsigned char *)(v3 + 19) = v20;
      if (v17) {
        goto LABEL_39;
      }
      goto LABEL_45;
    }
    unint64_t v3 = v77;
    if (v17)
    {
LABEL_39:
      if (v15 == v13) {
        unint64_t v14 = sub_24A4DFD84(v14, v7, v6);
      }
      if (v78 <= v14 >> 16) {
        goto LABEL_92;
      }
      if ((v14 & 1) == 0) {
        unint64_t v14 = v14 & 0xC | sub_24A4971A8(v14, v7, v6) & 0xFFFFFFFFFFFFFFF3 | 1;
      }
      goto LABEL_46;
    }
LABEL_45:
    if (v78 <= v14 >> 16) {
      goto LABEL_93;
    }
LABEL_46:
    if ((v6 & 0x1000000000000000) != 0)
    {
      unint64_t v14 = sub_24A5BB5D0();
    }
    else
    {
      unint64_t v21 = v14 >> 16;
      if ((v6 & 0x2000000000000000) != 0)
      {
        unint64_t v79 = v7;
        uint64_t v80 = v71;
        int v23 = *((unsigned __int8 *)&v79 + v21);
      }
      else
      {
        uint64_t v22 = v70;
        if ((v7 & 0x1000000000000000) == 0) {
          uint64_t v22 = sub_24A5BC120();
        }
        int v23 = *(unsigned __int8 *)(v22 + v21);
      }
      int v24 = (char)v23;
      unsigned int v25 = __clz(v23 ^ 0xFF) - 24;
      if (v24 >= 0) {
        LOBYTE(v25) = 1;
      }
      unint64_t v14 = ((v21 + v25) << 16) | 5;
    }
    unint64_t v11 = v14 >> 14;
    if (v14 >> 14 >= v75)
    {
      LODWORD(v72) = 1;
      goto LABEL_59;
    }
  }
  if (v76) {
    unint64_t v12 = v14;
  }
  unint64_t v7 = v73;
  if ((v19 & 1) == 0)
  {
    unint64_t v3 = v77;
    unsigned int v20 = *(unsigned __int8 *)(v77 + 19) + 1;
    if ((v20 >> 8)) {
      goto LABEL_94;
    }
    int v76 = 0;
    int v68 = 0;
    unint64_t v69 = v14;
    goto LABEL_38;
  }
  LODWORD(v72) = 0;
  int v68 = 0;
  int v76 = 0;
  unint64_t v69 = v14;
  unint64_t v3 = v77;
LABEL_59:
  unint64_t v7 = *(void *)v3;
  unint64_t v26 = *(void *)(v3 + 8);
  unint64_t v27 = v64;
LABEL_60:
  uint64_t v28 = 11;
  if (v65) {
    uint64_t v28 = 7;
  }
  uint64_t v71 = v28;
  unint64_t v15 = v3;
  unint64_t v29 = *(unsigned int *)(v3 + 16) | ((unint64_t)*(unsigned __int8 *)(v3 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(v3 + 21) << 40);
  if (v27 > sub_24A48F4F0(v7, v26, v29) >> 14) {
    goto LABEL_73;
  }
  if ((v76 & 1) == 0)
  {
    unint64_t v38 = v12;
LABEL_72:
    unint64_t v15 = v77;
    sub_24A48F440(v38);
    goto LABEL_73;
  }
  unint64_t v30 = sub_24A48F4F0(v7, v26, v29);
  unint64_t v15 = v77;
  if (v11 < v30 >> 14) {
    goto LABEL_73;
  }
  if (v11 >= (unint64_t)sub_24A48F3EC(v7, v26, v29) >> 14)
  {
    unint64_t v38 = v71 | (v78 << 16);
    goto LABEL_72;
  }
  unint64_t v31 = v73;
  unint64_t v32 = sub_24A48E614(v14, v73, v6);
  unint64_t v15 = v77;
  if ((v6 & 0x1000000000000000) != 0) {
    goto LABEL_97;
  }
  unint64_t v33 = v32 >> 16;
  uint64_t v34 = v62;
  uint64_t v35 = v63;
  if ((v6 & 0x2000000000000000) != 0)
  {
    unint64_t v79 = v31;
    uint64_t v80 = v6 & 0xFFFFFFFFFFFFFFLL;
    int v37 = *((unsigned __int8 *)&v79 + v33);
  }
  else
  {
    if ((v31 & 0x1000000000000000) != 0) {
      uint64_t v36 = (v6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      uint64_t v36 = sub_24A5BC120();
    }
    int v37 = *(unsigned __int8 *)(v36 + v33);
  }
  uint64_t v45 = v61[0];
  int v46 = (char)v37;
  unsigned int v47 = __clz(v37 ^ 0xFF) - 24;
  if (v46 >= 0) {
    LOBYTE(v47) = 1;
  }
  unint64_t v48 = ((v33 + v47) << 16) | 5;
  while (1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v35, v74, v34);
    uint64_t v49 = *(void *)v15;
    unint64_t v50 = *(void *)(v15 + 8);
    swift_bridgeObjectRetain();
    unint64_t v51 = sub_24A494C00(v48, v49, v50);
    unint64_t v53 = v52;
    unint64_t v55 = v54;
    unint64_t v57 = v56;
    uint64_t v58 = v63;
    swift_bridgeObjectRelease();
    unint64_t v59 = sub_24A497DC4(v51, v53, v55, v57);
    LOBYTE(v53) = v60;
    uint64_t result = swift_bridgeObjectRelease();
    if (v53)
    {
      __break(1u);
      return result;
    }
    sub_24A48F440(v59);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v58, v62);
LABEL_73:
    uint64_t v39 = *(void *)v15;
    unint64_t v40 = *(void *)(v15 + 8);
    unint64_t v41 = *(unsigned int *)(v15 + 16) | ((unint64_t)*(unsigned __int8 *)(v15 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(v15 + 21) << 40);
    if (v11 < (unint64_t)sub_24A48F3EC(*(void *)v15, v40, v41) >> 14) {
      break;
    }
    if ((v68 & 1) == 0) {
      goto LABEL_79;
    }
    unint64_t v42 = sub_24A48F4F0(v39, v40, v41);
    if (v75 == v42 >> 14)
    {
      unint64_t v69 = 15;
LABEL_79:
      sub_24A5067A4(v69);
      break;
    }
    unint64_t v43 = sub_24A48F4F0(v39, v40, v41);
    if (v64 >= v43 >> 14)
    {
      sub_24A5BB830();
      unint64_t v69 = sub_24A5BBE30();
      swift_bridgeObjectRelease();
      goto LABEL_79;
    }
LABEL_96:
    __break(1u);
LABEL_97:
    unint64_t v48 = sub_24A5BB5D0();
    uint64_t v34 = v62;
    uint64_t v35 = v63;
    uint64_t v45 = v61[0];
  }
  swift_bridgeObjectRelease();
  if (v72) {
    return 0;
  }
  else {
    return v14;
  }
}

uint64_t sub_24A48F3EC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4 = a3 - (unint64_t)BYTE5(a3);
  if ((a2 & 0x1000000000000000) != 0) {
LABEL_10:
  }
    JUMPOUT(0x24C5C6A60);
  if ((v4 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    unint64_t v5 = HIBYTE(a2) & 0xF;
  }
  if (v5 < v4) {
    goto LABEL_9;
  }
  return (v4 << 16) | 4;
}

unint64_t sub_24A48F440(unint64_t result)
{
  unint64_t v2 = result;
  uint64_t v3 = *(void *)v1;
  unint64_t v4 = *(void *)(v1 + 8);
  uint64_t v5 = (*(void *)v1 >> 59) & 1;
  if ((v4 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 0xC) == 4 << v5)
  {
    uint64_t result = sub_24A4DFD84(result, *(void *)v1, *(void *)(v1 + 8));
    unint64_t v2 = result;
    if ((v4 & 0x1000000000000000) == 0) {
      goto LABEL_5;
    }
  }
  else if ((v4 & 0x1000000000000000) == 0)
  {
LABEL_5:
    uint64_t result = v2 >> 16;
LABEL_6:
    if (result <= 0xFF)
    {
      *(unsigned char *)(v1 + 20) = result;
      return result;
    }
    goto LABEL_14;
  }
  unint64_t v6 = v3 & 0xFFFFFFFFFFFFLL;
  if ((v4 & 0x2000000000000000) != 0) {
    unint64_t v6 = HIBYTE(v4) & 0xF;
  }
  if (v6 < v2 >> 16) {
    goto LABEL_15;
  }
  uint64_t result = sub_24A5BB750();
  if ((result & 0x8000000000000000) == 0) {
    goto LABEL_6;
  }
  __break(1u);
LABEL_14:
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

unint64_t sub_24A48F4F0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if ((a2 & 0x1000000000000000) != 0) {
LABEL_8:
  }
    JUMPOUT(0x24C5C6A60);
  unint64_t v3 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    unint64_t v3 = HIBYTE(a2) & 0xF;
  }
  if (v3 < BYTE4(a3))
  {
    __break(1u);
    goto LABEL_8;
  }
  return ((unint64_t)BYTE4(a3) << 16) | 4;
}

uint64_t sub_24A48F534(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  sub_24A5BC770();
  unint64_t v8 = a2 >> 14;
  if (a2 >> 14 != a1 >> 14)
  {
    sub_24A48F8EC(a1, a1, a2, a3, a4);
    if ((a4 & 0x1000000000000000) != 0) {
      goto LABEL_53;
    }
    if ((a4 & 0x2000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      sub_24A5BC130();
      unint64_t v10 = sub_24A48E614(a1, a3, a4) >> 16;
      unint64_t v24 = a3;
      uint64_t v25 = a4 & 0xFFFFFFFFFFFFFFLL;
      int v12 = *((unsigned __int8 *)&v24 + v10);
    }
    else
    {
      if ((a3 & 0x1000000000000000) == 0) {
        sub_24A5BC120();
      }
      swift_bridgeObjectRetain();
      sub_24A5BC130();
      unint64_t v10 = sub_24A48E614(a1, a3, a4) >> 16;
      if ((a3 & 0x1000000000000000) != 0) {
        uint64_t v11 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
      }
      else {
        uint64_t v11 = sub_24A5BC120();
      }
      int v12 = *(unsigned __int8 *)(v11 + v10);
    }
    int v13 = (char)v12;
    unsigned int v14 = __clz(v12 ^ 0xFF) - 24;
    if (v13 >= 0) {
      LOBYTE(v14) = 1;
    }
    unint64_t v15 = ((v10 + v14) << 16) | 5;
    while (2)
    {
      sub_24A5BC760();
      if (v8 == v15 >> 14) {
        return swift_bridgeObjectRelease_n();
      }
      uint64_t v16 = (a3 >> 59) & 1;
      if ((a4 & 0x1000000000000000) == 0) {
        LOBYTE(v16) = 1;
      }
      uint64_t v17 = 4 << v16;
      if ((a4 & 0x2000000000000000) != 0) {
        unint64_t v18 = HIBYTE(a4) & 0xF;
      }
      else {
        unint64_t v18 = a3 & 0xFFFFFFFFFFFFLL;
      }
      while (1)
      {
        sub_24A48F8EC(v15, a1, a2, a3, a4);
        if ((a4 & 0x1000000000000000) != 0)
        {
          sub_24A5BC060();
        }
        else
        {
          if ((a4 & 0x2000000000000000) != 0)
          {
            unint64_t v24 = a3;
            uint64_t v25 = a4 & 0xFFFFFFFFFFFFFFLL;
          }
          else if ((a3 & 0x1000000000000000) == 0)
          {
            sub_24A5BC120();
          }
          sub_24A5BC130();
        }
        if (v15 & 0xC) != v17 && (v15) {
          break;
        }
        if ((v15 & 0xC) == v17)
        {
          unint64_t v15 = sub_24A4DFD84(v15, a3, a4);
          if (v18 <= v15 >> 16) {
            goto LABEL_52;
          }
        }
        else if (v18 <= v15 >> 16)
        {
          goto LABEL_52;
        }
        if (v15) {
          goto LABEL_39;
        }
        unint64_t v15 = v15 & 0xC | sub_24A4971A8(v15, a3, a4) & 0xFFFFFFFFFFFFFFF3 | 1;
        if ((a4 & 0x1000000000000000) == 0)
        {
LABEL_40:
          unint64_t v19 = v15 >> 16;
          if ((a4 & 0x2000000000000000) != 0)
          {
            unint64_t v24 = a3;
            uint64_t v25 = a4 & 0xFFFFFFFFFFFFFFLL;
            int v21 = *((unsigned __int8 *)&v24 + v19);
          }
          else
          {
            uint64_t v20 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
            if ((a3 & 0x1000000000000000) == 0) {
              uint64_t v20 = sub_24A5BC120();
            }
            int v21 = *(unsigned __int8 *)(v20 + v19);
          }
          int v22 = (char)v21;
          unsigned int v23 = __clz(v21 ^ 0xFF) - 24;
          if (v22 >= 0) {
            LOBYTE(v23) = 1;
          }
          unint64_t v15 = ((v19 + v23) << 16) | 5;
          goto LABEL_24;
        }
LABEL_23:
        unint64_t v15 = sub_24A5BB5D0();
LABEL_24:
        sub_24A5BC760();
        if (v8 == v15 >> 14) {
          return swift_bridgeObjectRelease_n();
        }
      }
      if (v18 <= v15 >> 16)
      {
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        sub_24A5BC060();
        swift_bridgeObjectRetain();
        sub_24A48E614(a1, a3, a4);
        unint64_t v15 = sub_24A5BB5D0();
        continue;
      }
      break;
    }
LABEL_39:
    if ((a4 & 0x1000000000000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_23;
  }
  return swift_bridgeObjectRelease();
}

unint64_t sub_24A48F8EC(unint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  char v9 = (a5 & 0x1000000000000000) == 0 || (a4 & 0x800000000000000) != 0;
  unint64_t v10 = result & 0xC;
  uint64_t v11 = 4 << v9;
  if ((result & 1) == 0 || v10 == v11)
  {
LABEL_9:
    if (v10 == v11) {
      uint64_t result = sub_24A4DFD84(result, a4, a5);
    }
    if (result >> 14 < a2 >> 14 || result >> 14 >= a3 >> 14)
    {
      __break(1u);
    }
    else if (result)
    {
      return result;
    }
    return result & 0xC | sub_24A4971A8(result, a4, a5) & 0xFFFFFFFFFFFFFFF3 | 1;
  }
  unint64_t v10 = result >> 14;
  if (result >> 14 < a2 >> 14 || (uint64_t v11 = a3 >> 14, v10 >= a3 >> 14))
  {
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

unint64_t sub_24A48F9BC(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t result = sub_24A497020(a1, a2, a3);
  unint64_t v8 = result;
  if ((a3 & 0x1000000000000000) != 0)
  {
    unint64_t v21 = MEMORY[0x24C5C6A60](15, BYTE4(a4), a2, a3);
    unint64_t v10 = v8 >> 14;
    if (v8 >> 14 > v21 >> 14)
    {
      unint64_t v12 = v21;
      unint64_t v13 = MEMORY[0x24C5C6A60](15, a4 - (unint64_t)BYTE5(a4), a2, a3);
      if (v10 <= v13 >> 14) {
        goto LABEL_9;
      }
      return v13;
    }
    return 0;
  }
  unint64_t v9 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v9 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v9 < BYTE4(a4))
  {
    __break(1u);
    goto LABEL_19;
  }
  unint64_t v10 = result >> 14;
  if (result >> 14 <= 4 * (unint64_t)BYTE4(a4)) {
    return 0;
  }
  int64_t v11 = a4 - (unint64_t)BYTE5(a4);
  if (v11 < 0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v9 >= v11)
  {
    unint64_t v12 = ((unint64_t)BYTE4(a4) << 16) | 4;
    unint64_t v13 = (v11 << 16) | 4;
    if (v10 <= v13 >> 14)
    {
LABEL_9:
      swift_bridgeObjectRetain();
      unint64_t v14 = sub_24A494C00(v12, a2, a3);
      uint64_t v16 = v15;
      uint64_t v18 = v17;
      uint64_t v20 = v19;
      swift_bridgeObjectRelease();
      unint64_t v13 = MEMORY[0x24C5C7180](v8, v14, v16, v18, v20);
      if (v10 == v13 >> 14) {
        unint64_t v13 = sub_24A5BBE30();
      }
      swift_bridgeObjectRelease();
    }
    return v13;
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t sub_24A48FB44(uint64_t a1)
{
  uint64_t v3 = *(void *)v1;
  int v4 = *(unsigned __int8 *)(*(void *)v1 + 18);
  unint64_t v5 = *(void *)(a1 + 8);
  char v6 = (4 * v4 + 8) & 0x3C;
  uint64_t v7 = (v5 >> v6) & 0xF;
  uint64_t v12 = v7;
  if (v4)
  {
    unint64_t v8 = (unsigned __int16 *)(v3 + 16);
    uint64_t v9 = v3 + 24;
    swift_unknownObjectRetain();
    char v10 = sub_24A5B49C4(v8, v9, &v12, a1, v4);
    sub_24A496BE8(v1);
  }
  else if (v7)
  {
    *(void *)(a1 + 8) = ((v7 - 1) << v6) | ((-15 << v6) - 1) & v5;
    *(void *)(a1 + 16) = v3;
    char v10 = 1;
  }
  else
  {
    char v10 = 0;
  }
  return v10 & 1;
}

uint64_t sub_24A48FC0C(uint64_t result, uint64_t a2, uint8x8_t a3)
{
  int v4 = v3;
  char v6 = (void *)result;
  uint64_t v7 = *v3;
  uint64_t v8 = (*(void *)a2 >> ((4 * *(unsigned char *)(*v3 + 18) + 8) & 0x3C)) & 0xFLL;
  if (*(unsigned char *)(*v3 + 18))
  {
    swift_unknownObjectRetain();
    uint64_t v9 = sub_24A48FC0C(v44, a2);
    uint64_t v10 = v44[0];
    uint64_t v11 = v44[1];
    uint64_t v12 = v44[2];
    uint64_t v13 = v44[3];
    unint64_t result = swift_unknownObjectRelease();
    uint64_t v14 = v4[1];
    BOOL v15 = __OFADD__(v14, v10);
    uint64_t v16 = v14 + v10;
    if (v15)
    {
      __break(1u);
    }
    else
    {
      v4[1] = v16;
      uint64_t v17 = v4[2];
      BOOL v15 = __OFADD__(v17, v11);
      uint64_t v18 = v17 + v11;
      if (!v15)
      {
        v4[2] = v18;
        uint64_t v19 = v4[3];
        BOOL v15 = __OFADD__(v19, v12);
        uint64_t v20 = v19 + v12;
        if (!v15)
        {
          v4[3] = v20;
          uint64_t v21 = v4[4];
          BOOL v15 = __OFADD__(v21, v13);
          uint64_t v22 = v21 + v13;
          if (!v15)
          {
            v4[4] = v22;
            *char v6 = v10;
            v6[1] = v11;
            uint64_t v7 = v9;
            _OWORD v6[2] = v12;
            v6[3] = v13;
            return v7;
          }
          goto LABEL_20;
        }
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
    }
    __break(1u);
    goto LABEL_19;
  }
  a3.i32[0] = *(_DWORD *)(a2 + 26);
  int16x8_t v23 = (int16x8_t)vmovl_u8(a3);
  uint64_t v24 = *(void *)(a2 + 32);
  uint64_t v25 = v23.u16[1] - v24;
  if (__OFSUB__(v23.u16[1], v24))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v26 = *(void *)(a2 + 40);
  BOOL v15 = __OFSUB__(v23.u16[0], v26);
  uint64_t v27 = v23.u16[0] - v26;
  if (v15)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v28 = *(unsigned __int8 *)(a2 + 25);
  uint64_t v29 = *(void *)(a2 + 48);
  BOOL v15 = __OFSUB__(v28, v29);
  uint64_t v30 = v28 - v29;
  if (v15)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v31 = *(unsigned __int8 *)(a2 + 24);
  uint64_t v32 = *(void *)(a2 + 56);
  BOOL v15 = __OFSUB__(v31, v32);
  uint64_t v33 = v31 - v32;
  if (v15)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v34 = *(void *)(a2 + 8);
  unint64_t result = *(void *)(a2 + 16);
  *char v6 = v25;
  v6[1] = v27;
  _OWORD v6[2] = v30;
  v6[3] = v33;
  uint64_t v35 = v7 + 24 * v8;
  *(void *)(v35 + 24) = v34;
  *(void *)(v35 + 32) = result;
  *(unsigned char *)(v35 + 40) = v31;
  *(unsigned char *)(v35 + 41) = v28;
  *(_DWORD *)(v35 + 42) = vmovn_s16(v23).u32[0];
  uint64_t v36 = v3[1];
  BOOL v15 = __OFADD__(v36, v25);
  uint64_t v37 = v36 + v25;
  if (v15)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v3[1] = v37;
  uint64_t v38 = v3[2];
  BOOL v15 = __OFADD__(v38, v27);
  uint64_t v39 = v38 + v27;
  if (v15)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v3[2] = v39;
  uint64_t v40 = v3[3];
  BOOL v15 = __OFADD__(v40, v30);
  uint64_t v41 = v40 + v30;
  if (v15)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v3[3] = v41;
  uint64_t v42 = v3[4];
  BOOL v15 = __OFADD__(v42, v33);
  uint64_t v43 = v42 + v33;
  if (!v15)
  {
    v3[4] = v43;
    swift_bridgeObjectRetain();
    return v7;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_24A48FDE4@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = swift_isUniquelyReferenced_nonNull();
  if ((result & 1) == 0)
  {
    long long v7 = v2[1];
    long long v19 = *v2;
    long long v20 = v7;
    uint64_t v21 = *((void *)v2 + 4);
    sub_24A4CBC1C((uint64_t)v17);
    uint64_t result = swift_unknownObjectRelease();
    v6.i32[1] = DWORD1(v17[0]);
    long long v8 = v17[1];
    *unint64_t v2 = v17[0];
    v2[1] = v8;
    *((void *)v2 + 4) = v18;
  }
  uint64_t v9 = *(void *)v2;
  if (((a1 >> ((4 * *(unsigned char *)(*(void *)v2 + 18) + 8) & 0x3C)) & 0xF) >= *(unsigned __int16 *)(*(void *)v2 + 16))
  {
    __break(1u);
  }
  else if (*(unsigned char *)(v9 + 18))
  {
    swift_unknownObjectRetain();
    sub_24A48FDE4(a1);
    return swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v10 = v9 + 24 + 24 * ((a1 >> ((4 * *(unsigned char *)(*(void *)v2 + 18) + 8) & 0x3C)) & 0xF);
    uint64_t v11 = *(void *)(v10 + 8);
    uint64_t v12 = *(unsigned __int8 *)(v10 + 16);
    uint64_t v13 = *(unsigned __int8 *)(v10 + 17);
    *(void *)(a2 + 8) = *(void *)v10;
    *(void *)(a2 + 16) = v11;
    *(unsigned char *)(a2 + 24) = v12;
    *(unsigned char *)(a2 + 25) = v13;
    v6.i32[0] = *(_DWORD *)(v10 + 18);
    unsigned __int32 v14 = vmovl_u8(v6).u32[0];
    *(_DWORD *)(a2 + 26) = v6.i32[0];
    v15.i64[0] = HIWORD(v14);
    v15.i64[1] = (unsigned __int16)v14;
    v16.i64[0] = 255;
    v16.i64[1] = 255;
    *(int8x16_t *)(a2 + 32) = vandq_s8(v15, v16);
    *(void *)(a2 + 48) = v13;
    *(void *)(a2 + 56) = v12;
    *(void *)a2 = a1;
  }
  return result;
}

uint64_t sub_24A48FF2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v84 = a5;
  *(void *)&long long v96 = sub_24A5BC780();
  uint64_t v9 = *(void *)(v96 - 8);
  MEMORY[0x270FA5388](v96);
  unint64_t v11 = (unint64_t)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = _s9_IngesterVMa();
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (uint64_t)&v81 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v105 = MEMORY[0x263F8EE78];
  long long v106 = 0u;
  long long v107 = 0u;
  memset(v108, 0, 30);
  v108[4] = 0;
  v109[0] = 0;
  *(void *)((char *)v109 + 6) = 0;
  v109[2] = MEMORY[0x263F8EE78];
  uint64_t v116 = a1;
  uint64_t v117 = a2;
  uint64_t v118 = a3;
  uint64_t v119 = a4;
  sub_24A491D60();
  swift_bridgeObjectRetain();
  unint64_t v15 = sub_24A5BBED0();
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  sub_24A5BC770();
  *(void *)uint64_t v14 = v15;
  *(void *)(v14 + 8) = v17;
  *(void *)(v14 + 16) = v19;
  *(void *)(v14 + 24) = v21;
  if ((v21 & 0x1000000000000000) != 0) {
LABEL_54:
  }
    sub_24A491F98();
  long long v82 = &v106;
  unint64_t v83 = &v108[1];
  *(void *)(v14 + 32) = v15;
  (*(void (**)(uint64_t, unint64_t, void))(v9 + 32))(v14 + *(int *)(v12 + 24), v11, v96);
  swift_bridgeObjectRelease();
  uint64_t v22 = 0;
  unint64_t v92 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v85 = 0;
  uint64_t v88 = 0;
  uint64_t v89 = 0;
  while (1)
  {
    uint64_t v90 = v23;
    uint64_t v91 = v25;
    uint64_t v86 = v24;
    uint64_t v87 = v22;
    while (1)
    {
      swift_bridgeObjectRetain();
      uint64_t v26 = sub_24A5BBE80();
      swift_bridgeObjectRelease();
      uint64_t v27 = v26 - 124;
      if (v26 >= 379) {
        uint64_t v27 = 255;
      }
      if (v26 <= 255) {
        uint64_t v28 = v26;
      }
      else {
        uint64_t v28 = v27;
      }
      sub_24A49752C(v28, (unint64_t)v110);
      sub_24A4914AC((uint64_t)v110, (uint64_t)&v116, qword_26B177EF0);
      if (!v119)
      {
        sub_24A491510((uint64_t *)&v112);
        long long v95 = v113;
        long long v96 = v112;
        uint64_t v77 = v114;
        uint64_t v78 = v115;
        sub_24A491C88(v14, (uint64_t (*)(void))_s9_IngesterVMa);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v79 = v84;
        long long v80 = v95;
        *uint64_t v84 = v96;
        v79[1] = v80;
        *((void *)v79 + 4) = v77;
        *((void *)v79 + 5) = v78;
        return result;
      }
      uint64_t v30 = v120;
      uint64_t v29 = v121;
      uint64_t v31 = v122;
      uint64_t v12 = MEMORY[0x24C5C68C0](v116, v117, v118);
      unint64_t v11 = v32;
      uint64_t v94 = v31;
      *(void *)&long long v95 = v29;
      *(void *)&long long v96 = v30;
      if ((v32 & 0x1000000000000000) != 0)
      {
        uint64_t v12 = sub_24A49279C();
        uint64_t v45 = v44;
        swift_bridgeObjectRelease();
        unint64_t v11 = (unint64_t)v45;
      }
      if ((v11 & 0x2000000000000000) != 0) {
        uint64_t v9 = HIBYTE(v11) & 0xF;
      }
      else {
        uint64_t v9 = v12 & 0xFFFFFFFFFFFFLL;
      }
      swift_bridgeObjectRetain();
      unint64_t v33 = sub_24A5BB830();
      unint64_t v15 = v34;
      unint64_t v36 = v35;
      unint64_t v38 = v37;
      swift_bridgeObjectRelease();
      if ((uint64_t)sub_24A4913AC(v33, v15, v36, v38) > 255)
      {
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
        goto LABEL_54;
      }
      uint64_t v93 = v12;
      uint64_t v39 = v14;
      uint64_t v12 = sub_24A4913AC(v33, v15, v36, v38);
      uint64_t v14 = sub_24A5BB7C0();
      int64_t v40 = sub_24A491A60(v33, v15, v36, v38);
      swift_bridgeObjectRelease();
      sub_24A491A34((uint64_t)v110);
      if (v12 > 255) {
        goto LABEL_47;
      }
      if (v14 > 255) {
        goto LABEL_48;
      }
      if (v40 > 255) {
        goto LABEL_49;
      }
      int v41 = v96;
      if ((uint64_t)v96 > 255) {
        goto LABEL_50;
      }
      uint64_t v42 = v95;
      if ((uint64_t)v95 > 255) {
        goto LABEL_51;
      }
      uint64_t v43 = v94;
      if ((((unint64_t)v95 | (unint64_t)v96 | v94 | v12 | v14 | v40) & 0x8000000000000000) != 0) {
        goto LABEL_52;
      }
      if (v94 > 255) {
        goto LABEL_53;
      }
      if (v9) {
        break;
      }
      swift_bridgeObjectRelease();
      uint64_t v14 = v39;
    }
    uint64_t v23 = v12;
    unsigned __int8 v46 = v40;
    uint64_t v47 = v96;
    unint64_t v48 = v83;
    *unint64_t v83 = 0;
    v48[1] = 0;
    *(void *)((char *)v48 + 14) = 0;
    unint64_t v49 = v92;
    if (!v92)
    {
      int v55 = v12 | (v41 << 24) | (unsigned __int16)(v14 << 8) | (v40 << 16);
      uint64_t v22 = v93;
      v108[1] = v93;
      v108[2] = v11;
      unint64_t v92 = v11;
      uint64_t v24 = v14;
      WORD2(v108[3]) = ((v43 << 40) | ((unint64_t)v42 << 32)) >> 32;
      LODWORD(v108[3]) = v55;
      uint64_t v25 = v40;
      uint64_t v85 = v47;
      uint64_t v89 = v42;
      uint64_t v88 = v43;
      uint64_t v14 = v39;
      continue;
    }
    uint64_t v51 = v86;
    uint64_t v50 = v87;
    *(void *)&long long v112 = v87;
    *((void *)&v112 + 1) = v92;
    uint64_t v53 = v90;
    uint64_t v52 = v91;
    LOBYTE(v113) = v90;
    BYTE1(v113) = v86;
    BYTE2(v113) = v91;
    uint64_t v54 = v85;
    BYTE3(v113) = v85;
    BYTE4(v113) = v89;
    BYTE5(v113) = v88;
    uint64_t v97 = v93;
    unint64_t v98 = v11;
    unsigned __int8 v99 = v12;
    unsigned __int8 v100 = v14;
    unsigned __int8 v101 = v46;
    unsigned __int8 v102 = v47;
    unsigned __int8 v103 = v42;
    unsigned __int8 v104 = v43;
    uint64_t v14 = v39;
    if (v90 < 0x7C || (v12 & 0xFCu) < 0x7CuLL)
    {
      if (sub_24A4DB184((uint64_t)&v97))
      {
        swift_bridgeObjectRelease();
        uint64_t v22 = v112;
        uint64_t v24 = BYTE1(v113);
        uint64_t v25 = BYTE2(v113);
        uint64_t v85 = BYTE3(v113);
        *(_OWORD *)&v108[1] = v112;
        unint64_t v92 = *((void *)&v112 + 1);
        WORD2(v108[3]) = (((unint64_t)BYTE5(v113) << 40) | ((unint64_t)BYTE4(v113) << 32)) >> 32;
        LODWORD(v108[3]) = v113 | (BYTE1(v113) << 8) | (BYTE2(v113) << 16) | (BYTE3(v113) << 24);
        uint64_t v23 = v113;
        uint64_t v88 = BYTE5(v113);
        uint64_t v89 = BYTE4(v113);
        continue;
      }
      unint64_t v49 = *((void *)&v112 + 1);
      uint64_t v50 = v112;
      uint64_t v53 = v113;
      uint64_t v51 = BYTE1(v113);
      uint64_t v52 = BYTE2(v113);
      uint64_t v54 = BYTE3(v113);
      uint64_t v89 = BYTE4(v113);
      uint64_t v88 = BYTE5(v113);
    }
    uint64_t v90 = v53;
    uint64_t v91 = v52;
    uint64_t v56 = v54;
    unint64_t v92 = v49;
    unint64_t v57 = *((void *)&v106 + 1);
    uint64_t v58 = v106;
    unint64_t v59 = *((void *)&v107 + 1);
    unint64_t v60 = v107;
    unint64_t v61 = v108[0];
    uint64_t v62 = v82;
    *long long v82 = 0u;
    v62[1] = 0u;
    *((void *)v62 + 4) = 0;
    if (!v58)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B177EE8);
      uint64_t v58 = swift_allocObject();
      unint64_t v61 = 0;
      unint64_t v59 = 0;
      unint64_t v60 = 0;
      unint64_t v57 = 0;
      *(_WORD *)(v58 + 16) = 0;
      *(unsigned char *)(v58 + 18) = 0;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull();
    if ((result & 1) == 0)
    {
      v123[5] = v58;
      v123[6] = v57;
      v123[7] = v60;
      v123[8] = v59;
      v123[9] = v61;
      sub_24A4CBC1C((uint64_t)v111);
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v58 = v111[0];
      unint64_t v57 = v111[1];
      unint64_t v60 = v111[2];
      unint64_t v59 = v111[3];
      unint64_t v61 = v111[4];
    }
    char v67 = v56;
    unint64_t v68 = v57 + v56;
    if (__OFADD__(v57, v56)) {
      break;
    }
    char v69 = v91;
    unint64_t v70 = v60 + v91;
    if (__OFADD__(v60, v91)) {
      goto LABEL_56;
    }
    if (__OFADD__(v59, v51)) {
      goto LABEL_57;
    }
    char v71 = v90;
    unint64_t v72 = v61 + v90;
    if (__OFADD__(v61, v90)) {
      goto LABEL_58;
    }
    int v73 = *(unsigned __int16 *)(v58 + 16);
    uint64_t v74 = v58 + 24 * *(unsigned __int16 *)(v58 + 16);
    unint64_t v75 = v92;
    *(void *)(v74 + 24) = v50;
    *(void *)(v74 + 32) = v75;
    *(unsigned char *)(v74 + 40) = v71;
    *(unsigned char *)(v74 + 41) = v51;
    *(unsigned char *)(v74 + 42) = v69;
    *(unsigned char *)(v74 + 43) = v67;
    *(unsigned char *)(v74 + 44) = v89;
    *(unsigned char *)(v74 + 45) = v88;
    if (v73 == 0xFFFF) {
      goto LABEL_59;
    }
    int v76 = v73 + 1;
    *(_WORD *)(v58 + 16) = v76;
    if (v76 == 15)
    {
      v123[0] = v58;
      v123[1] = v68;
      v123[2] = v70;
      v123[3] = v59 + v51;
      v123[4] = v72;
      sub_24A59E198(v123, v64, v65, v66);
    }
    else
    {
      *(void *)&long long v106 = v58;
      *((void *)&v106 + 1) = v68;
      *(void *)&long long v107 = v70;
      *((void *)&v107 + 1) = v59 + v51;
      v108[0] = v72;
    }
    uint64_t v22 = v97;
    uint64_t v23 = v99;
    uint64_t v24 = v100;
    uint64_t v25 = v101;
    uint64_t v85 = v102;
    uint64_t v88 = v104;
    uint64_t v89 = v103;
    v108[1] = v97;
    v108[2] = v98;
    unint64_t v92 = v98;
    WORD2(v108[3]) = (((unint64_t)v104 << 40) | ((unint64_t)v103 << 32)) >> 32;
    LODWORD(v108[3]) = v99 | (v100 << 8) | (v101 << 16) | (v102 << 24);
  }
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
  return result;
}

uint64_t sub_24A4906F8(unint64_t a1)
{
  uint64_t v2 = v1;
  unint64_t v4 = v1 + 16;
  uint64_t v5 = *(unsigned __int8 *)(v1 + 16);
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_24A5BBE80();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v8 = v5 + v6;
  if (__OFADD__(v5, v6))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v8 >= 256)
  {
    if ((unint64_t)v8 > 0x17A)
    {
      if (v5 == 255) {
        return 0;
      }
      uint64_t v8 = 255;
      goto LABEL_21;
    }
    v8 -= 124;
  }
  if (v8 == v5) {
    return 0;
  }
  if (v8 > v5)
  {
LABEL_21:
    unint64_t v6 = a1;
    sub_24A49752C(v8 - v5, (unint64_t)v59);
    sub_24A491DB4((uint64_t)v59, (uint64_t)&v60);
    a1 = v63;
    if (v63)
    {
      unint64_t v42 = v60;
      unint64_t v43 = v61;
      unint64_t v44 = v62;
      uint64_t v45 = v65;
      uint64_t v57 = v64;
      uint64_t v5 = v66;
      if ((uint64_t)sub_24A4913AC(v60, v61, v62, v63) <= 255)
      {
        unint64_t v46 = sub_24A4913AC(v42, v43, v44, a1);
        uint64_t v47 = sub_24A5BB7C0();
        unint64_t v48 = sub_24A491A60(v42, v43, v44, a1);
        int64_t v49 = sub_24A491F14(v46, v47, v48, v57, v45, v5);
        sub_24A491E1C(v49 & 0xFFFFFFFFFFFFLL);
        sub_24A491D60();
        sub_24A5BB6D0();
        sub_24A491A34((uint64_t)v59);
        return 0;
      }
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    return 0;
  }
  unint64_t v4 = *(void *)v2;
  unint64_t v6 = *(void *)(v2 + 8);
  if ((v6 & 0x1000000000000000) == 0)
  {
    if (v8 < 0)
    {
      __break(1u);
    }
    else
    {
      unint64_t v9 = HIBYTE(v6) & 0xF;
      if ((v6 & 0x2000000000000000) == 0) {
        unint64_t v9 = v4 & 0xFFFFFFFFFFFFLL;
      }
      if (v9 >= v8)
      {
        unint64_t v10 = (v8 << 16) | 4;
        goto LABEL_13;
      }
    }
    __break(1u);
    goto LABEL_30;
  }
LABEL_27:
  unint64_t v10 = MEMORY[0x24C5C6A60](15);
LABEL_13:
  unint64_t v11 = sub_24A497020(v10, v4, v6);
  unint64_t v12 = sub_24A494C18(v11, v4, v6, ((unint64_t)*(unsigned __int8 *)(v2 + 21) << 40) | ((unint64_t)*(unsigned int *)(v2 + 17) << 8) | v5);
  char v13 = v12;
  unint64_t v50 = v12 >> 8;
  unint64_t v51 = v12 >> 16;
  unint64_t v52 = v12 >> 24;
  unint64_t v53 = HIDWORD(v12);
  unint64_t v54 = v12 >> 40;
  unint64_t v55 = HIWORD(v12);
  swift_bridgeObjectRetain();
  unint64_t v14 = sub_24A494C00(v11, v4, v6);
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  swift_bridgeObjectRelease();
  uint64_t v21 = MEMORY[0x24C5C68C0](v14, v16, v18, v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v22 = sub_24A5BB830();
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  swift_bridgeObjectRelease();
  uint64_t v29 = MEMORY[0x24C5C68C0](v22, v24, v26, v28);
  uint64_t v31 = v30;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)uint64_t v2 = v29;
  *(void *)(v2 + 8) = v31;
  *(unsigned char *)(v2 + 16) = v13;
  *(unsigned char *)(v2 + 17) = v50;
  *(unsigned char *)(v2 + 18) = v51;
  *(unsigned char *)(v2 + 19) = v52;
  *(unsigned char *)(v2 + 20) = v53;
  *(unsigned char *)(v2 + 21) = v54;
  uint64_t v58 = v21;
  if ((v13 & 0xFCu) < 0x7CuLL)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  sub_24A49752C(255, (unint64_t)v59);
  uint64_t result = sub_24A491DB4((uint64_t)v59, (uint64_t)&v60);
  unint64_t v32 = v63;
  if (v63)
  {
    unint64_t v33 = v60;
    unint64_t v34 = v61;
    unint64_t v35 = v62;
    uint64_t v36 = v64;
    uint64_t v56 = v65;
    uint64_t v37 = v66;
    uint64_t result = sub_24A4913AC(v60, v61, v62, v63);
    if (result <= 255)
    {
      unint64_t v38 = sub_24A4913AC(v33, v34, v35, v32);
      uint64_t v39 = sub_24A5BB7C0();
      unint64_t v40 = sub_24A491A60(v33, v34, v35, v32);
      int64_t v41 = sub_24A491F14(v38, v39, v40, v36, v56, v37);
      sub_24A491E1C(v41 & 0xFFFFFFFFFFFFLL);
      sub_24A491D60();
      sub_24A5BB6D0();
      uint64_t result = sub_24A491A34((uint64_t)v59);
      if (!((*(void *)(a1 + 8) ^ *(void *)(a1 + 32)) >> 14))
      {
        if (v55 >= 0x7CuLL) {
          return v58;
        }
        goto LABEL_33;
      }
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_24A490BF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  long long v80 = a3;
  *(void *)&long long v92 = sub_24A5BC780();
  uint64_t v5 = *(void *)(v92 - 8);
  MEMORY[0x270FA5388](v92);
  unint64_t v7 = (unint64_t)&v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = _s9_IngesterVMa();
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (uint64_t)&v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v101 = MEMORY[0x263F8EE78];
  long long v102 = 0u;
  long long v103 = 0u;
  memset(v104, 0, 30);
  v104[4] = 0;
  v105[0] = 0;
  *(void *)((char *)v105 + 6) = 0;
  v105[2] = MEMORY[0x263F8EE78];
  uint64_t v112 = a1;
  uint64_t v113 = a2;
  swift_bridgeObjectRetain();
  unint64_t v11 = sub_24A5BBED0();
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  sub_24A5BC770();
  *(void *)uint64_t v10 = v11;
  *(void *)(v10 + 8) = v13;
  *(void *)(v10 + 16) = v15;
  *(void *)(v10 + 24) = v17;
  if ((v17 & 0x1000000000000000) != 0) {
LABEL_54:
  }
    sub_24A491F98();
  uint64_t v78 = &v102;
  unint64_t v79 = &v104[1];
  *(void *)(v10 + 32) = v11;
  (*(void (**)(uint64_t, unint64_t, void))(v5 + 32))(v10 + *(int *)(v8 + 24), v7, v92);
  swift_bridgeObjectRelease();
  uint64_t v18 = 0;
  unint64_t v88 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v81 = 0;
  uint64_t v84 = 0;
  uint64_t v85 = 0;
  while (1)
  {
    uint64_t v86 = v19;
    uint64_t v87 = v21;
    uint64_t v82 = v20;
    uint64_t v83 = v18;
    while (1)
    {
      swift_bridgeObjectRetain();
      uint64_t v22 = sub_24A5BBE80();
      swift_bridgeObjectRelease();
      uint64_t v23 = v22 - 124;
      if (v22 >= 379) {
        uint64_t v23 = 255;
      }
      if (v22 <= 255) {
        uint64_t v24 = v22;
      }
      else {
        uint64_t v24 = v23;
      }
      sub_24A49752C(v24, (unint64_t)v106);
      sub_24A4914AC((uint64_t)v106, (uint64_t)&v112, qword_26B177EF0);
      if (!v115)
      {
        sub_24A491510((uint64_t *)&v108);
        long long v91 = v109;
        long long v92 = v108;
        uint64_t v73 = v110;
        uint64_t v74 = v111;
        sub_24A491C88(v10, (uint64_t (*)(void))_s9_IngesterVMa);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v75 = v80;
        long long v76 = v91;
        *long long v80 = v92;
        v75[1] = v76;
        *((void *)v75 + 4) = v73;
        *((void *)v75 + 5) = v74;
        return result;
      }
      uint64_t v26 = v116;
      uint64_t v25 = v117;
      uint64_t v27 = v118;
      uint64_t v8 = MEMORY[0x24C5C68C0](v112, v113, v114);
      unint64_t v7 = v28;
      uint64_t v90 = v27;
      *(void *)&long long v91 = v25;
      *(void *)&long long v92 = v26;
      if ((v28 & 0x1000000000000000) != 0)
      {
        uint64_t v8 = sub_24A49279C();
        int64_t v41 = v40;
        swift_bridgeObjectRelease();
        unint64_t v7 = (unint64_t)v41;
      }
      if ((v7 & 0x2000000000000000) != 0) {
        uint64_t v5 = HIBYTE(v7) & 0xF;
      }
      else {
        uint64_t v5 = v8 & 0xFFFFFFFFFFFFLL;
      }
      swift_bridgeObjectRetain();
      unint64_t v29 = sub_24A5BB830();
      unint64_t v11 = v30;
      unint64_t v32 = v31;
      unint64_t v34 = v33;
      swift_bridgeObjectRelease();
      if ((uint64_t)sub_24A4913AC(v29, v11, v32, v34) > 255)
      {
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
        goto LABEL_54;
      }
      uint64_t v89 = v8;
      uint64_t v35 = v10;
      uint64_t v8 = sub_24A4913AC(v29, v11, v32, v34);
      uint64_t v10 = sub_24A5BB7C0();
      int64_t v36 = sub_24A491A60(v29, v11, v32, v34);
      swift_bridgeObjectRelease();
      sub_24A491A34((uint64_t)v106);
      if (v8 > 255) {
        goto LABEL_47;
      }
      if (v10 > 255) {
        goto LABEL_48;
      }
      if (v36 > 255) {
        goto LABEL_49;
      }
      int v37 = v92;
      if ((uint64_t)v92 > 255) {
        goto LABEL_50;
      }
      uint64_t v38 = v91;
      if ((uint64_t)v91 > 255) {
        goto LABEL_51;
      }
      uint64_t v39 = v90;
      if ((((unint64_t)v91 | (unint64_t)v92 | v90 | v8 | v10 | v36) & 0x8000000000000000) != 0) {
        goto LABEL_52;
      }
      if (v90 > 255) {
        goto LABEL_53;
      }
      if (v5) {
        break;
      }
      swift_bridgeObjectRelease();
      uint64_t v10 = v35;
    }
    uint64_t v19 = v8;
    unsigned __int8 v42 = v36;
    uint64_t v43 = v92;
    unint64_t v44 = v79;
    *unint64_t v79 = 0;
    v44[1] = 0;
    *(void *)((char *)v44 + 14) = 0;
    unint64_t v45 = v88;
    if (!v88)
    {
      int v51 = v8 | (v37 << 24) | (unsigned __int16)(v10 << 8) | (v36 << 16);
      uint64_t v18 = v89;
      v104[1] = v89;
      v104[2] = v7;
      unint64_t v88 = v7;
      uint64_t v20 = v10;
      WORD2(v104[3]) = ((v39 << 40) | ((unint64_t)v38 << 32)) >> 32;
      LODWORD(v104[3]) = v51;
      uint64_t v21 = v36;
      uint64_t v81 = v43;
      uint64_t v85 = v38;
      uint64_t v84 = v39;
      uint64_t v10 = v35;
      continue;
    }
    uint64_t v47 = v82;
    uint64_t v46 = v83;
    *(void *)&long long v108 = v83;
    *((void *)&v108 + 1) = v88;
    uint64_t v49 = v86;
    uint64_t v48 = v87;
    LOBYTE(v109) = v86;
    BYTE1(v109) = v82;
    BYTE2(v109) = v87;
    uint64_t v50 = v81;
    BYTE3(v109) = v81;
    BYTE4(v109) = v85;
    BYTE5(v109) = v84;
    uint64_t v93 = v89;
    unint64_t v94 = v7;
    unsigned __int8 v95 = v8;
    unsigned __int8 v96 = v10;
    unsigned __int8 v97 = v42;
    unsigned __int8 v98 = v43;
    unsigned __int8 v99 = v38;
    unsigned __int8 v100 = v39;
    uint64_t v10 = v35;
    if (v86 < 0x7C || (v8 & 0xFCu) < 0x7CuLL)
    {
      if (sub_24A4DB184((uint64_t)&v93))
      {
        swift_bridgeObjectRelease();
        uint64_t v18 = v108;
        uint64_t v20 = BYTE1(v109);
        uint64_t v21 = BYTE2(v109);
        uint64_t v81 = BYTE3(v109);
        *(_OWORD *)&v104[1] = v108;
        unint64_t v88 = *((void *)&v108 + 1);
        WORD2(v104[3]) = (((unint64_t)BYTE5(v109) << 40) | ((unint64_t)BYTE4(v109) << 32)) >> 32;
        LODWORD(v104[3]) = v109 | (BYTE1(v109) << 8) | (BYTE2(v109) << 16) | (BYTE3(v109) << 24);
        uint64_t v19 = v109;
        uint64_t v84 = BYTE5(v109);
        uint64_t v85 = BYTE4(v109);
        continue;
      }
      unint64_t v45 = *((void *)&v108 + 1);
      uint64_t v46 = v108;
      uint64_t v49 = v109;
      uint64_t v47 = BYTE1(v109);
      uint64_t v48 = BYTE2(v109);
      uint64_t v50 = BYTE3(v109);
      uint64_t v85 = BYTE4(v109);
      uint64_t v84 = BYTE5(v109);
    }
    uint64_t v86 = v49;
    uint64_t v87 = v48;
    uint64_t v52 = v50;
    unint64_t v88 = v45;
    unint64_t v53 = *((void *)&v102 + 1);
    uint64_t v54 = v102;
    unint64_t v55 = *((void *)&v103 + 1);
    unint64_t v56 = v103;
    unint64_t v57 = v104[0];
    uint64_t v58 = v78;
    *uint64_t v78 = 0u;
    v58[1] = 0u;
    *((void *)v58 + 4) = 0;
    if (!v54)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B177EE8);
      uint64_t v54 = swift_allocObject();
      unint64_t v57 = 0;
      unint64_t v55 = 0;
      unint64_t v56 = 0;
      unint64_t v53 = 0;
      *(_WORD *)(v54 + 16) = 0;
      *(unsigned char *)(v54 + 18) = 0;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull();
    if ((result & 1) == 0)
    {
      v119[5] = v54;
      v119[6] = v53;
      v119[7] = v56;
      v119[8] = v55;
      v119[9] = v57;
      sub_24A4CBC1C((uint64_t)v107);
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v54 = v107[0];
      unint64_t v53 = v107[1];
      unint64_t v56 = v107[2];
      unint64_t v55 = v107[3];
      unint64_t v57 = v107[4];
    }
    char v63 = v52;
    unint64_t v64 = v53 + v52;
    if (__OFADD__(v53, v52)) {
      break;
    }
    char v65 = v87;
    unint64_t v66 = v56 + v87;
    if (__OFADD__(v56, v87)) {
      goto LABEL_56;
    }
    if (__OFADD__(v55, v47)) {
      goto LABEL_57;
    }
    char v67 = v86;
    unint64_t v68 = v57 + v86;
    if (__OFADD__(v57, v86)) {
      goto LABEL_58;
    }
    int v69 = *(unsigned __int16 *)(v54 + 16);
    uint64_t v70 = v54 + 24 * *(unsigned __int16 *)(v54 + 16);
    unint64_t v71 = v88;
    *(void *)(v70 + 24) = v46;
    *(void *)(v70 + 32) = v71;
    *(unsigned char *)(v70 + 40) = v67;
    *(unsigned char *)(v70 + 41) = v47;
    *(unsigned char *)(v70 + 42) = v65;
    *(unsigned char *)(v70 + 43) = v63;
    *(unsigned char *)(v70 + 44) = v85;
    *(unsigned char *)(v70 + 45) = v84;
    if (v69 == 0xFFFF) {
      goto LABEL_59;
    }
    int v72 = v69 + 1;
    *(_WORD *)(v54 + 16) = v72;
    if (v72 == 15)
    {
      v119[0] = v54;
      v119[1] = v64;
      v119[2] = v66;
      v119[3] = v55 + v47;
      v119[4] = v68;
      sub_24A59E198(v119, v60, v61, v62);
    }
    else
    {
      *(void *)&long long v102 = v54;
      *((void *)&v102 + 1) = v64;
      *(void *)&long long v103 = v66;
      *((void *)&v103 + 1) = v55 + v47;
      v104[0] = v68;
    }
    uint64_t v18 = v93;
    uint64_t v19 = v95;
    uint64_t v20 = v96;
    uint64_t v21 = v97;
    uint64_t v81 = v98;
    uint64_t v84 = v100;
    uint64_t v85 = v99;
    v104[1] = v93;
    v104[2] = v94;
    unint64_t v88 = v94;
    WORD2(v104[3]) = (((unint64_t)v100 << 40) | ((unint64_t)v99 << 32)) >> 32;
    LODWORD(v104[3]) = v95 | (v96 << 8) | (v97 << 16) | (v98 << 24);
  }
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
  return result;
}

unint64_t sub_24A4913AC(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    uint64_t result = sub_24A4DFD84(result, a3, a4);
    unint64_t v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    uint64_t result = sub_24A4DFD84(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v10 < a2 >> 16)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  return sub_24A5BB750();
}

uint64_t sub_24A4914AC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_24A491510@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = (unint64_t *)v1;
  uint64_t v4 = *(void *)(v1 + 72);
  unint64_t v5 = *(void *)(v1 + 80);
  uint64_t v6 = *(unsigned __int16 *)(v1 + 92);
  uint64_t v7 = *(unsigned int *)(v1 + 88);
  *(void *)(v1 + 72) = 0;
  *(void *)(v1 + 80) = 0;
  *(void *)(v1 + 86) = 0;
  if (v5) {
    sub_24A494F18(v4, v5, (v7 | (v6 << 32)) & 0xFFFFFFFFFFFFLL);
  }
  uint64_t v9 = *(void *)(v1 + 48);
  uint64_t v8 = *(void *)(v1 + 56);
  uint64_t v10 = *(unsigned __int16 *)(v1 + 68);
  uint64_t v11 = *(unsigned int *)(v1 + 64);
  *(void *)(v1 + 48) = 0;
  *(void *)(v1 + 56) = 0;
  *(void *)(v1 + 62) = 0;
  if (!v8) {
    goto LABEL_17;
  }
  unint64_t i = v11 | (v10 << 32);
  v13.i64[0] = 0xFFFFFFFFFFFFLL;
  v13.i64[1] = 0xFFFFFFFFFFFFLL;
  uint64x2_t v14 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(i), v13);
  int16x8_t v15 = (int16x8_t)vshlq_u64(v14, (uint64x2_t)xmmword_24A5C23E0);
  *(void *)&long long v50 = v9;
  *((void *)&v50 + 1) = v8;
  LOBYTE(v51) = v11;
  *(int32x2_t *)v14.i8 = vmovn_s64((int64x2_t)vshlq_u64(v14, (uint64x2_t)xmmword_24A5C23F0));
  *(int32x2_t *)v15.i8 = vmovn_s64((int64x2_t)v15);
  v15.i16[1] = v15.i16[2];
  v15.i16[2] = v14.i16[0];
  v15.i16[3] = v14.i16[2];
  *(_DWORD *)((char *)&v51 + 1) = vmovn_s16(v15).u32[0];
  BYTE5(v51) = BYTE5(i);
  if ((v11 & 0xFCu) >= 0x7CuLL)
  {
    uint64_t v19 = i & 0xFFFFFFFFFFFFLL;
    uint64_t v20 = v9;
    uint64_t v21 = v8;
LABEL_16:
    sub_24A59E0D4(v20, v21, v19);
    goto LABEL_17;
  }
  unint64_t v16 = v2[1];
  if (v16 && *(_WORD *)(v16 + 16) || *(void *)(*v2 + 16))
  {
    uint64_t v17 = sub_24A575D94(&v53);
    char v18 = sub_24A4DB184((uint64_t)&v50);
  }
  else
  {
    if (!v2[10] && !*(void *)(v2[12] + 16))
    {
LABEL_35:
      sub_24A4919E4((uint64_t)&v53);
      swift_bridgeObjectRetain();
      sub_24A4918AC(v9, v8, i & 0xFFFFFFFFFFFFLL);
      uint64_t v9 = v53;
      uint64_t v38 = v54;
      uint64_t v39 = v55;
      uint64_t v40 = v56;
      uint64_t v41 = v57;
      uint64_t v53 = 0;
      MEMORY[0x24C5C7E90](&v53, 8);
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v8 = v53;
      goto LABEL_36;
    }
    uint64_t v17 = sub_24A575EDC(&v53);
    char v18 = sub_24A4DB330((uint64_t)&v50);
  }
  char v22 = v18;
  ((void (*)(uint64_t *, void))v17)(&v53, 0);
  if ((v22 & 1) == 0)
  {
    uint64_t v21 = *((void *)&v50 + 1);
    uint64_t v20 = v50;
    uint64_t v19 = v51 | ((unint64_t)BYTE4(v51) << 32) | ((unint64_t)BYTE5(v51) << 40);
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
LABEL_17:
  uint64_t v23 = (void *)v2[12];
  while (v23[2])
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v2[12] = (unint64_t)v23;
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v28 = v23[2];
      if (!v28) {
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v23 = sub_24A499D4C(v23);
      uint64_t v28 = v23[2];
      if (!v28)
      {
LABEL_25:
        __break(1u);
        break;
      }
    }
    uint64_t v29 = v28 - 1;
    unint64_t v30 = &v23[6 * v28 - 6];
    uint64_t v31 = v30[4];
    long long v32 = *(_OWORD *)(v30 + 5);
    long long v33 = *(_OWORD *)(v30 + 7);
    v23[2] = v29;
    v2[12] = (unint64_t)v23;
    if (v31)
    {
      uint64_t v59 = v31;
      long long v60 = v32;
      long long v61 = v33;
      sub_24A575950((long long *)&v59, v25, v26, v27);
      uint64_t v23 = (void *)v2[12];
    }
  }
  uint64_t v34 = v2[6];
  uint64_t v35 = v2[7];
  uint64_t v36 = *((unsigned __int16 *)v2 + 34);
  uint64_t v37 = *((unsigned int *)v2 + 16);
  v2[6] = 0;
  v2[7] = 0;
  *(unint64_t *)((char *)v2 + 62) = 0;
  if (v35) {
    sub_24A59E0D4(v34, v35, (v37 | (v36 << 32)) & 0xFFFFFFFFFFFFLL);
  }
  uint64_t v9 = v2[1];
  uint64_t v38 = v2[2];
  uint64_t v39 = v2[3];
  uint64_t v40 = v2[4];
  uint64_t v41 = v2[5];
  *(_OWORD *)(v2 + 1) = 0u;
  *(_OWORD *)(v2 + 3) = 0u;
  v2[5] = 0;
  uint64_t v53 = 0;
  uint64_t result = MEMORY[0x24C5C7E90](&v53, 8);
  uint64_t v8 = v53;
  for (unint64_t i = *v2; *(void *)(*v2 + 16); unint64_t i = *v2)
  {
    char v43 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v2 = i;
    if (v43)
    {
      uint64_t v44 = *(void *)(i + 16);
      if (!v44) {
        goto LABEL_34;
      }
    }
    else
    {
      unint64_t i = (unint64_t)sub_24A499D4C((void *)i);
      uint64_t v44 = *(void *)(i + 16);
      if (!v44)
      {
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
    }
    uint64_t v45 = v44 - 1;
    uint64_t v46 = (_OWORD *)(i + 48 * v45);
    long long v47 = v46[2];
    long long v48 = v46[4];
    long long v51 = v46[3];
    long long v52 = v48;
    long long v50 = v47;
    *(void *)(i + 16) = v45;
    *uint64_t v2 = i;
    uint64_t v53 = v9;
    uint64_t v54 = v38;
    uint64_t v55 = v39;
    uint64_t v56 = v40;
    uint64_t v57 = v41;
    uint64_t v58 = v8;
    uint64_t result = sub_24A5B2704((uint64_t)&v50, &v53, v49);
    uint64_t v9 = v49[0];
    uint64_t v38 = v49[1];
    uint64_t v39 = v49[2];
    uint64_t v40 = v49[3];
    uint64_t v41 = v49[4];
    uint64_t v8 = v49[5];
  }
LABEL_36:
  *a1 = v9;
  a1[1] = v38;
  a1[2] = v39;
  a1[3] = v40;
  a1[4] = v41;
  a1[5] = v8;
  return result;
}

uint64_t sub_24A4918AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = swift_isUniquelyReferenced_nonNull();
  if ((result & 1) == 0)
  {
    long long v8 = v3[1];
    long long v23 = *v3;
    long long v24 = v8;
    uint64_t v25 = *((void *)v3 + 4);
    sub_24A4CBC1C((uint64_t)v21);
    uint64_t result = swift_unknownObjectRelease();
    long long v9 = v21[1];
    *uint64_t v3 = v21[0];
    v3[1] = v9;
    *((void *)v3 + 4) = v22;
  }
  uint64_t v10 = *((void *)v3 + 1);
  if (__OFADD__(v10, BYTE3(a3)))
  {
    __break(1u);
    goto LABEL_10;
  }
  *((void *)v3 + 1) = v10 + BYTE3(a3);
  uint64_t v11 = *((void *)v3 + 2);
  BOOL v12 = __OFADD__(v11, BYTE2(a3));
  uint64_t v13 = v11 + BYTE2(a3);
  if (v12)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  *((void *)v3 + 2) = v13;
  uint64_t v14 = *((void *)v3 + 3);
  BOOL v12 = __OFADD__(v14, BYTE1(a3));
  uint64_t v15 = v14 + BYTE1(a3);
  if (v12)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  *((void *)v3 + 3) = v15;
  uint64_t v16 = *((void *)v3 + 4);
  BOOL v12 = __OFADD__(v16, a3);
  uint64_t v17 = v16 + a3;
  if (v12)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  *((void *)v3 + 4) = v17;
  uint64_t v18 = *(void *)v3;
  int v19 = *(unsigned __int16 *)(*(void *)v3 + 16);
  uint64_t v20 = *(void *)v3 + 24 * *(unsigned __int16 *)(*(void *)v3 + 16);
  *(void *)(v20 + 24) = a1;
  *(void *)(v20 + 32) = a2;
  *(_WORD *)(v20 + 40) = a3;
  *(unsigned char *)(v20 + 42) = BYTE2(a3);
  *(unsigned char *)(v20 + 43) = BYTE3(a3);
  *(unsigned char *)(v20 + 44) = BYTE4(a3);
  *(unsigned char *)(v20 + 45) = BYTE5(a3);
  if (v19 != 0xFFFF)
  {
    *(_WORD *)(v18 + 16) = v19 + 1;
    return result;
  }
LABEL_13:
  __break(1u);
  return result;
}

double sub_24A4919E4@<D0>(uint64_t a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B177EE8);
  uint64_t v2 = swift_allocObject();
  *(_WORD *)(v2 + 16) = 0;
  *(unsigned char *)(v2 + 18) = 0;
  *(void *)a1 = v2;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

uint64_t sub_24A491A34(uint64_t a1)
{
  return a1;
}

unint64_t sub_24A491A60(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = sub_24A497020(a1, a3, a4);
  unint64_t result = sub_24A497020(a2, a3, a4);
  unint64_t v9 = result >> 14;
  if (v7 >> 14 >= result >> 14)
  {
    if (v9 >= v7 >> 14) {
      return 0;
    }
    uint64_t v11 = 0;
    while (1)
    {
      if (__OFSUB__(v11--, 1)) {
        goto LABEL_37;
      }
      if ((a4 & 0x1000000000000000) == 0) {
        break;
      }
      unint64_t result = sub_24A5BB5E0();
      unint64_t v7 = result;
LABEL_18:
      if (v9 >= v7 >> 14) {
        return v11;
      }
    }
    unint64_t v17 = v7 >> 16;
    if ((a4 & 0x2000000000000000) != 0)
    {
      unint64_t v22 = a3;
      uint64_t v23 = a4 & 0xFFFFFFFFFFFFFFLL;
      if ((*((unsigned char *)&v22 + v17 - 1) & 0xC0) == 0x80)
      {
        uint64_t v18 = 0;
        do
          int v20 = *((unsigned char *)&v22 + v17 + v18-- - 2) & 0xC0;
        while (v20 == 128);
        goto LABEL_31;
      }
    }
    else
    {
      unint64_t result = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((a3 & 0x1000000000000000) == 0) {
        unint64_t result = sub_24A5BC120();
      }
      if ((*(unsigned char *)(v17 + result - 1) & 0xC0) == 0x80)
      {
        uint64_t v18 = 0;
        do
          int v19 = *(unsigned char *)(result + v17 - 2 + v18--) & 0xC0;
        while (v19 == 128);
LABEL_31:
        uint64_t v21 = 1 - v18;
LABEL_33:
        unint64_t v7 = (v7 - (v21 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
        goto LABEL_18;
      }
    }
    uint64_t v21 = 1;
    goto LABEL_33;
  }
  for (uint64_t i = 0; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    if ((a4 & 0x1000000000000000) != 0)
    {
      unint64_t result = sub_24A5BB5D0();
      unint64_t v7 = result;
    }
    else
    {
      unint64_t v12 = v7 >> 16;
      if ((a4 & 0x2000000000000000) != 0)
      {
        unint64_t v22 = a3;
        uint64_t v23 = a4 & 0xFFFFFFFFFFFFFFLL;
        int v13 = *((unsigned __int8 *)&v22 + v12);
      }
      else
      {
        unint64_t result = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if ((a3 & 0x1000000000000000) == 0) {
          unint64_t result = sub_24A5BC120();
        }
        int v13 = *(unsigned __int8 *)(result + v12);
      }
      int v14 = (char)v13;
      unsigned int v15 = __clz(v13 ^ 0xFF) - 24;
      if (v14 >= 0) {
        LOBYTE(v15) = 1;
      }
      unint64_t v7 = ((v12 + v15) << 16) | 5;
    }
    if (v9 <= v7 >> 14) {
      return v11;
    }
  }
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_24A491C88(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_24A491CE8(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = sub_24A5BC780();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

unint64_t sub_24A491D60()
{
  unint64_t result = qword_26B177CB0;
  if (!qword_26B177CB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B177CB0);
  }
  return result;
}

uint64_t sub_24A491DB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(qword_26B177EF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_24A491E1C(unint64_t result)
{
  unint64_t v3 = result >> 40;
  unsigned int v4 = *v2;
  unsigned int v5 = v2[4];
  if (v5 >= v4)
  {
    unsigned int v6 = v5 + BYTE4(result);
    unsigned int v1 = v6 >> 8;
    if (BYTE4(result) < result)
    {
      if ((v6 & 0x100) != 0)
      {
LABEL_21:
        __break(1u);
        goto LABEL_22;
      }
      v2[4] = v6;
      v2[5] = BYTE5(result);
LABEL_12:
      unsigned int v7 = v4 + result;
      if ((v7 >> 8))
      {
        __break(1u);
      }
      else
      {
        *uint64_t v2 = v7;
        unsigned int v8 = v2[1] + BYTE1(result);
        if (((v8 >> 8) & 1) == 0)
        {
          v2[1] = v8;
          unsigned int v9 = v2[2] + BYTE2(result);
          if (((v9 >> 8) & 1) == 0)
          {
            v2[2] = v9;
            unsigned int v10 = v2[3] + BYTE3(result);
            if (((v10 >> 8) & 1) == 0)
            {
              v2[3] = v10;
              return result;
            }
            goto LABEL_20;
          }
LABEL_19:
          __break(1u);
LABEL_20:
          __break(1u);
          goto LABEL_21;
        }
      }
      __break(1u);
      goto LABEL_19;
    }
  }
  else
  {
    if (BYTE4(result) < result)
    {
      v2[5] = BYTE5(result);
      goto LABEL_12;
    }
    LODWORD(v3) = v2[5] + BYTE5(result);
    unsigned int v6 = v3 >> 8;
    if (((v3 >> 8) & 1) == 0) {
      goto LABEL_11;
    }
    __break(1u);
  }
  if (v1)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v2[4] = v6;
  LODWORD(v3) = v2[5] + v3;
  if (((v3 >> 8) & 1) == 0)
  {
LABEL_11:
    v2[5] = v3;
    goto LABEL_12;
  }
LABEL_23:
  __break(1u);
  return result;
}

int64_t sub_24A491F14(int64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (result > 255)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (a2 > 255)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (a3 > 255)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (a4 > 255)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (a5 > 255)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if ((a2 | result | a3 | a4 | a5 | a6) < 0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (a6 <= 255) {
    return result | (unint64_t)(unsigned __int16)(a2 << 8) | ((unint64_t)a3 << 16) & 0xFFFF0000FFFFFFFFLL | (a4 << 24) | ((unint64_t)a5 << 32) & 0xFFFF00FFFFFFFFFFLL | ((unint64_t)a6 << 40);
  }
LABEL_15:
  __break(1u);
  return result;
}

unint64_t sub_24A491F98()
{
  unint64_t v1 = *v0;
  unint64_t v2 = v0[2];
  unint64_t v3 = v0[3];
  unint64_t v4 = sub_24A497020(0xFuLL, v2, v3);
  unint64_t result = sub_24A497020(v1, v2, v3);
  unint64_t v6 = result >> 14;
  if (v4 >> 14 < result >> 14)
  {
    uint64_t v7 = 0;
    while (1)
    {
      uint64_t v8 = v7 + 1;
      if (__OFADD__(v7, 1)) {
        break;
      }
      if ((v3 & 0x1000000000000000) != 0)
      {
        unint64_t result = sub_24A5BB5D0();
        unint64_t v4 = result;
      }
      else
      {
        unint64_t v9 = v4 >> 16;
        if ((v3 & 0x2000000000000000) != 0)
        {
          unint64_t v66 = v2;
          uint64_t v67 = v3 & 0xFFFFFFFFFFFFFFLL;
          int v10 = *((unsigned __int8 *)&v66 + v9);
        }
        else
        {
          unint64_t result = (v3 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((v2 & 0x1000000000000000) == 0) {
            unint64_t result = sub_24A5BC120();
          }
          int v10 = *(unsigned __int8 *)(result + v9);
        }
        int v11 = (char)v10;
        unsigned int v12 = __clz(v10 ^ 0xFF) - 24;
        if (v11 >= 0) {
          LOBYTE(v12) = 1;
        }
        unint64_t v4 = ((v9 + v12) << 16) | 5;
      }
      ++v7;
      if (v6 <= v4 >> 14) {
        goto LABEL_35;
      }
    }
    __break(1u);
    goto LABEL_148;
  }
  if (v6 < v4 >> 14)
  {
    uint64_t v8 = 0;
    while (1)
    {
      BOOL v13 = __OFSUB__(v8--, 1);
      if (v13) {
        goto LABEL_153;
      }
      if ((v3 & 0x1000000000000000) == 0) {
        break;
      }
      unint64_t result = sub_24A5BB5E0();
      unint64_t v4 = result;
LABEL_18:
      if (v6 >= v4 >> 14) {
        goto LABEL_35;
      }
    }
    unint64_t v14 = v4 >> 16;
    if ((v3 & 0x2000000000000000) != 0)
    {
      unint64_t v66 = v2;
      uint64_t v67 = v3 & 0xFFFFFFFFFFFFFFLL;
      if ((*((unsigned char *)&v66 + v14 - 1) & 0xC0) == 0x80)
      {
        uint64_t v15 = 0;
        do
          int v17 = *((unsigned char *)&v65 + v14 + v15-- + 6) & 0xC0;
        while (v17 == 128);
        goto LABEL_31;
      }
    }
    else
    {
      unint64_t result = (v3 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((v2 & 0x1000000000000000) == 0) {
        unint64_t result = sub_24A5BC120();
      }
      if ((*(unsigned char *)(v14 + result - 1) & 0xC0) == 0x80)
      {
        uint64_t v15 = 0;
        do
          int v16 = *(unsigned char *)(result + v14 - 2 + v15--) & 0xC0;
        while (v16 == 128);
LABEL_31:
        uint64_t v18 = 1 - v15;
LABEL_33:
        unint64_t v4 = (v4 - (v18 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
        goto LABEL_18;
      }
    }
    uint64_t v18 = 1;
    goto LABEL_33;
  }
  uint64_t v8 = 0;
LABEL_35:
  unint64_t v19 = v65[1];
  unint64_t v20 = v65[2];
  unint64_t v21 = v65[3];
  unint64_t v22 = sub_24A497020(*v65, v20, v21);
  unint64_t result = sub_24A497020(v19, v20, v21);
  unint64_t v23 = result >> 14;
  if (v22 >> 14 < result >> 14)
  {
    uint64_t v24 = 0;
    while (1)
    {
      uint64_t v25 = v24 + 1;
      if (__OFADD__(v24, 1)) {
        break;
      }
      if ((v21 & 0x1000000000000000) != 0)
      {
        unint64_t result = sub_24A5BB5D0();
        unint64_t v22 = result;
      }
      else
      {
        unint64_t v26 = v22 >> 16;
        if ((v21 & 0x2000000000000000) != 0)
        {
          unint64_t v66 = v20;
          uint64_t v67 = v21 & 0xFFFFFFFFFFFFFFLL;
          int v27 = *((unsigned __int8 *)&v66 + v26);
        }
        else
        {
          unint64_t result = (v21 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((v20 & 0x1000000000000000) == 0) {
            unint64_t result = sub_24A5BC120();
          }
          int v27 = *(unsigned __int8 *)(result + v26);
        }
        int v28 = (char)v27;
        unsigned int v29 = __clz(v27 ^ 0xFF) - 24;
        if (v28 >= 0) {
          LOBYTE(v29) = 1;
        }
        unint64_t v22 = ((v26 + v29) << 16) | 5;
      }
      ++v24;
      if (v23 <= v22 >> 14) {
        goto LABEL_69;
      }
    }
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
    goto LABEL_155;
  }
  if (v23 < v22 >> 14)
  {
    uint64_t v25 = 0;
    while (1)
    {
      BOOL v13 = __OFSUB__(v25--, 1);
      if (v13) {
        goto LABEL_154;
      }
      if ((v21 & 0x1000000000000000) == 0) {
        break;
      }
      unint64_t result = sub_24A5BB5E0();
      unint64_t v22 = result;
LABEL_52:
      if (v23 >= v22 >> 14) {
        goto LABEL_69;
      }
    }
    if ((v21 & 0x2000000000000000) != 0)
    {
      unint64_t v66 = v20;
      uint64_t v67 = v21 & 0xFFFFFFFFFFFFFFLL;
      if ((*((unsigned char *)&v66 + (v22 >> 16) - 1) & 0xC0) == 0x80)
      {
        uint64_t v30 = 0;
        do
          int v32 = *((unsigned char *)&v65 + (v22 >> 16) + v30-- + 6) & 0xC0;
        while (v32 == 128);
        goto LABEL_65;
      }
    }
    else
    {
      unint64_t result = (v21 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((v20 & 0x1000000000000000) == 0) {
        unint64_t result = sub_24A5BC120();
      }
      if ((*(unsigned char *)((v22 >> 16) + result - 1) & 0xC0) == 0x80)
      {
        uint64_t v30 = 0;
        do
          int v31 = *(unsigned char *)(result + (v22 >> 16) - 2 + v30--) & 0xC0;
        while (v31 == 128);
LABEL_65:
        uint64_t v33 = 1 - v30;
LABEL_67:
        unint64_t v22 = (v22 - (v33 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
        goto LABEL_52;
      }
    }
    uint64_t v33 = 1;
    goto LABEL_67;
  }
  uint64_t v25 = 0;
LABEL_69:
  swift_bridgeObjectRetain();
  unint64_t v34 = sub_24A49279C();
  unint64_t v36 = v35;
  swift_bridgeObjectRelease();
  unint64_t result = sub_24A497020(0xFuLL, v34, v36);
  unint64_t v37 = result;
  if (v8 < 0)
  {
    uint64_t v43 = 0;
    while (1)
    {
      if (v37 < 0x10000) {
        goto LABEL_151;
      }
      if ((v36 & 0x1000000000000000) == 0) {
        break;
      }
      unint64_t result = sub_24A5BB5E0();
      unint64_t v37 = result;
LABEL_88:
      if (v8 >= --v43) {
        goto LABEL_104;
      }
    }
    unint64_t v44 = v37 >> 16;
    if ((v36 & 0x2000000000000000) != 0)
    {
      unint64_t v66 = v34;
      uint64_t v67 = v36 & 0xFFFFFFFFFFFFFFLL;
      if ((*((unsigned char *)&v66 + v44 - 1) & 0xC0) == 0x80)
      {
        uint64_t v45 = 0;
        do
          int v47 = *((unsigned char *)&v65 + v44 + v45-- + 6) & 0xC0;
        while (v47 == 128);
        goto LABEL_101;
      }
    }
    else
    {
      unint64_t result = (v36 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((v34 & 0x1000000000000000) == 0) {
        unint64_t result = sub_24A5BC120();
      }
      if ((*(unsigned char *)(v44 + result - 1) & 0xC0) == 0x80)
      {
        uint64_t v45 = 0;
        do
          int v46 = *(unsigned char *)(result + v44 - 2 + v45--) & 0xC0;
        while (v46 == 128);
LABEL_101:
        uint64_t v48 = 1 - v45;
LABEL_103:
        unint64_t v37 = ((v44 - v48) << 16) | 5;
        goto LABEL_88;
      }
    }
    uint64_t v48 = 1;
    goto LABEL_103;
  }
  if (v8)
  {
    if ((v36 & 0x2000000000000000) != 0) {
      unint64_t v38 = HIBYTE(v36) & 0xF;
    }
    else {
      unint64_t v38 = v34 & 0xFFFFFFFFFFFFLL;
    }
    while (1)
    {
      unint64_t v39 = v37 >> 16;
      if (v37 >> 16 >= v38) {
        goto LABEL_149;
      }
      if ((v36 & 0x1000000000000000) != 0)
      {
        unint64_t result = sub_24A5BB5D0();
        unint64_t v37 = result;
        if (!--v8) {
          break;
        }
      }
      else
      {
        if ((v36 & 0x2000000000000000) != 0)
        {
          unint64_t v66 = v34;
          uint64_t v67 = v36 & 0xFFFFFFFFFFFFFFLL;
          int v40 = *((unsigned __int8 *)&v66 + v39);
        }
        else
        {
          unint64_t result = (v36 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((v34 & 0x1000000000000000) == 0) {
            unint64_t result = sub_24A5BC120();
          }
          int v40 = *(unsigned __int8 *)(result + v39);
        }
        int v41 = (char)v40;
        unsigned int v42 = __clz(v40 ^ 0xFF) - 24;
        if (v41 >= 0) {
          LOBYTE(v42) = 1;
        }
        unint64_t v37 = ((v39 + v42) << 16) | 5;
        if (!--v8) {
          break;
        }
      }
    }
  }
LABEL_104:
  unint64_t result = sub_24A497020(v37, v34, v36);
  if (v25 < 0)
  {
    uint64_t v55 = 0;
    while (1)
    {
      if (result < 0x10000) {
        goto LABEL_152;
      }
      if ((v36 & 0x1000000000000000) == 0) {
        break;
      }
      unint64_t result = sub_24A5BB5E0();
LABEL_123:
      if (v25 >= --v55) {
        goto LABEL_139;
      }
    }
    unint64_t v56 = result >> 16;
    if ((v36 & 0x2000000000000000) != 0)
    {
      unint64_t v66 = v34;
      uint64_t v67 = v36 & 0xFFFFFFFFFFFFFFLL;
      if ((*((unsigned char *)&v66 + v56 - 1) & 0xC0) == 0x80)
      {
        uint64_t v58 = 0;
        do
          int v60 = *((unsigned char *)&v65 + v56 + v58-- + 6) & 0xC0;
        while (v60 == 128);
        goto LABEL_136;
      }
    }
    else
    {
      uint64_t v57 = (v36 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((v34 & 0x1000000000000000) == 0) {
        uint64_t v57 = sub_24A5BC120();
      }
      if ((*(unsigned char *)(v56 + v57 - 1) & 0xC0) == 0x80)
      {
        uint64_t v58 = 0;
        do
          int v59 = *(unsigned char *)(v57 + v56 - 2 + v58--) & 0xC0;
        while (v59 == 128);
LABEL_136:
        uint64_t v61 = 1 - v58;
LABEL_138:
        unint64_t result = ((v56 - v61) << 16) | 5;
        goto LABEL_123;
      }
    }
    uint64_t v61 = 1;
    goto LABEL_138;
  }
  if (v25)
  {
    if ((v36 & 0x2000000000000000) != 0) {
      unint64_t v49 = HIBYTE(v36) & 0xF;
    }
    else {
      unint64_t v49 = v34 & 0xFFFFFFFFFFFFLL;
    }
    while (1)
    {
      unint64_t v50 = result >> 16;
      if (result >> 16 >= v49) {
        goto LABEL_150;
      }
      if ((v36 & 0x1000000000000000) != 0)
      {
        unint64_t result = sub_24A5BB5D0();
        if (!--v25) {
          break;
        }
      }
      else
      {
        if ((v36 & 0x2000000000000000) != 0)
        {
          unint64_t v66 = v34;
          uint64_t v67 = v36 & 0xFFFFFFFFFFFFFFLL;
          int v52 = *((unsigned __int8 *)&v66 + v50);
        }
        else
        {
          uint64_t v51 = (v36 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((v34 & 0x1000000000000000) == 0) {
            uint64_t v51 = sub_24A5BC120();
          }
          int v52 = *(unsigned __int8 *)(v51 + v50);
        }
        int v53 = (char)v52;
        unsigned int v54 = __clz(v52 ^ 0xFF) - 24;
        if (v53 >= 0) {
          LOBYTE(v54) = 1;
        }
        unint64_t result = ((v50 + v54) << 16) | 5;
        if (!--v25) {
          break;
        }
      }
    }
  }
LABEL_139:
  unint64_t v62 = v65;
  if ((*(unsigned char *)v65 & 2) != 0) {
    unint64_t v63 = v37 | 3;
  }
  else {
    unint64_t v63 = v37;
  }
  if ((v65[1] & 2) != 0) {
    unint64_t v64 = result | 3;
  }
  else {
    unint64_t v64 = result;
  }
  if (v64 >> 14 >= v63 >> 14)
  {
    unint64_t result = swift_bridgeObjectRelease();
    *unint64_t v62 = v63;
    v62[1] = v64;
    v62[2] = v34;
    void v62[3] = v36;
    return result;
  }
LABEL_155:
  __break(1u);
  return result;
}

uint64_t sub_24A49279C()
{
  unint64_t v0 = sub_24A5BB830();
  uint64_t v4 = sub_24A49281C(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_24A49281C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    unint64_t v9 = sub_24A4913AC(a1, a2, a3, a4);
    if (v9)
    {
      uint64_t v10 = v9;
      int v11 = sub_24A492974(v9, 0);
      unint64_t v12 = sub_24A4929DC((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
LABEL_11:
        sub_24A5BC120();
LABEL_4:
        JUMPOUT(0x24C5C6960);
      }
    }
    else
    {
      int v11 = (void *)MEMORY[0x263F8EE78];
    }
    uint64_t v13 = MEMORY[0x24C5C6960](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x24C5C6960]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

void *sub_24A492974(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(qword_26B177C18);
  uint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

unint64_t sub_24A4929DC(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  unint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_33:
    *unint64_t v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    _OWORD v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    unint64_t result = v12;
    if (v17 == v15) {
      unint64_t result = sub_24A4DFD84(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      unint64_t result = sub_24A5BB760();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }
      else
      {
        unint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          unint64_t result = sub_24A5BC120();
        }
        char v19 = *(unsigned char *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }
    unint64_t result = sub_24A4DFD84(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = sub_24A5BB720();
LABEL_29:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t _s19CollectionsInternal12BigSubstringV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a1 + 16);
  v96[0] = *(_OWORD *)a1;
  v96[1] = v4;
  long long v97 = *(_OWORD *)(a1 + 32);
  long long v5 = *(_OWORD *)(a2 + 16);
  v93[0] = *(_OWORD *)a2;
  v93[1] = v5;
  long long v94 = *(_OWORD *)(a2 + 32);
  v95[0] = v93[0];
  long long v98 = v96[0];
  long long v99 = v4;
  long long v100 = v97;
  v95[1] = v5;
  v95[2] = v94;
  sub_24A497498(a1);
  sub_24A497498(a2);
  BOOL v6 = sub_24A495D7C((uint64_t)v95);
  sub_24A496BE8(a2);
  uint64_t result = sub_24A496BE8(a1);
  unint64_t v8 = *(void *)(a1 + 48);
  if (v6 && (*(void *)(a2 + 48) ^ v8) <= 0x3FF && (*(void *)(a1 + 80) ^ *(void *)(a2 + 80)) < 1024) {
    return 1;
  }
  unint64_t v9 = *(void *)(a1 + 80);
  if (v9 >> 10 < v8 >> 10) {
    goto LABEL_36;
  }
  uint64_t v10 = *(void *)(a1 + 56);
  unint64_t v11 = *(void *)(a1 + 64);
  uint64_t v12 = *(void *)(a1 + 72);
  unint64_t v51 = *(void *)(a1 + 80);
  uint64_t v49 = *(void *)(a1 + 88);
  unint64_t v47 = *(void *)(a1 + 96);
  uint64_t v45 = *(void *)(a1 + 104);
  uint64_t result = _s19CollectionsInternal9BigStringV8distance4from2toSiAC5IndexV_AHtF_0(*(void *)(a1 + 48), v10, v11, v12, v9, v49, v47, v45);
  unint64_t v13 = *(void *)(a2 + 48);
  unint64_t v14 = *(void *)(a2 + 80);
  if (v14 >> 10 < v13 >> 10)
  {
LABEL_37:
    __break(1u);
    return result;
  }
  uint64_t v40 = *(void *)(a2 + 56);
  uint64_t v37 = *(void *)(a2 + 72);
  unint64_t v38 = *(void *)(a2 + 64);
  unint64_t v43 = *(void *)(a2 + 96);
  uint64_t v44 = *(void *)(a2 + 88);
  uint64_t v42 = *(void *)(a2 + 104);
  if (result == _s19CollectionsInternal9BigStringV8distance4from2toSiAC5IndexV_AHtF_0(*(void *)(a2 + 48), v40, v38, v37, v14, v44, v43, v42))
  {
    sub_24A497498(a1);
    sub_24A493804(v96, v8, v10, v11, v12, v82);
    long long v35 = v82[1];
    long long v36 = v82[0];
    uint64_t v15 = v83;
    uint64_t v16 = v84;
    uint64_t v17 = v85;
    long long v34 = v86;
    uint64_t v18 = v87;
    unint64_t v19 = v88;
    uint64_t v20 = v89;
    sub_24A496BE8(a1);
    *(void *)&long long v75 = v51;
    *((void *)&v75 + 1) = v49;
    *(void *)&long long v76 = v47;
    *((void *)&v76 + 1) = v45;
    long long v77 = v36;
    long long v78 = v35;
    *(void *)&long long v79 = v15;
    *((void *)&v79 + 1) = v16;
    *(_OWORD *)&v80[8] = v34;
    *(void *)long long v80 = v17;
    *(void *)&v80[24] = v18;
    *(void *)&long long v81 = v19;
    *((void *)&v81 + 1) = v20;
    sub_24A497498(a2);
    sub_24A493804(v93, v13, v40, v38, v37, v90);
    long long v48 = v90[1];
    long long v50 = v90[0];
    long long v46 = v90[2];
    long long v39 = v90[4];
    long long v41 = v90[3];
    uint64_t v21 = v91;
    uint64_t v22 = v92;
    uint64_t result = sub_24A496BE8(a2);
    *(void *)&long long v68 = v14;
    *((void *)&v68 + 1) = v44;
    *(void *)&long long v69 = v43;
    *((void *)&v69 + 1) = v42;
    long long v70 = v50;
    long long v71 = v48;
    long long v72 = v46;
    *(_OWORD *)uint64_t v73 = v41;
    *(_OWORD *)&v73[16] = v39;
    int64_t v23 = v17 + (v19 >> 16);
    *(void *)&long long v74 = v21;
    *((void *)&v74 + 1) = v22;
    if (__OFADD__(v17, v19 >> 16))
    {
LABEL_34:
      __break(1u);
    }
    else
    {
      int64_t v24 = v14 >> 11;
      while (1)
      {
        if (v23 < (uint64_t)(v51 >> 11) && (*((void *)&v81 + 1) ^ v19) >= 0x4000)
        {
          long long v108 = v77;
          long long v109 = v78;
          long long v110 = v79;
          long long v112 = *(_OWORD *)&v80[8];
          uint64_t v111 = v17;
          uint64_t v113 = *(void *)&v80[24];
          unint64_t v114 = v19;
          uint64_t v115 = *((void *)&v81 + 1);
          sub_24A495168();
          uint64_t v26 = v30;
          uint64_t v27 = v31;
          uint64_t result = sub_24A495704(v30, v31);
          if ((result & 1) == 0) {
            *(void *)&long long v81 = *((void *)&v81 + 1);
          }
        }
        else
        {
          uint64_t v26 = 0;
          uint64_t v27 = 0;
        }
        if (__OFADD__(*(void *)v73, (unint64_t)v74 >> 16)) {
          break;
        }
        if ((uint64_t)(*(void *)v73 + ((unint64_t)v74 >> 16)) < v24
          && (*((void *)&v74 + 1) ^ (unint64_t)v74) >= 0x4000)
        {
          long long v101 = v70;
          long long v102 = v71;
          long long v103 = v72;
          long long v105 = *(_OWORD *)&v73[8];
          uint64_t v104 = *(void *)v73;
          uint64_t v106 = *(void *)&v73[24];
          long long v107 = v74;
          sub_24A495168();
          uint64_t v28 = v32;
          uint64_t v29 = v33;
          if ((sub_24A495704(v32, v33) & 1) == 0) {
            *(void *)&long long v74 = *((void *)&v74 + 1);
          }
        }
        else
        {
          uint64_t v28 = 0;
          uint64_t v29 = 0;
        }
        if (!v27)
        {
          if (!v29)
          {
            long long v56 = v72;
            long long v57 = *(_OWORD *)v73;
            long long v58 = *(_OWORD *)&v73[16];
            long long v59 = v74;
            long long v52 = v68;
            long long v53 = v69;
            long long v54 = v70;
            long long v55 = v71;
            sub_24A495C98((uint64_t)&v52);
            long long v64 = v79;
            long long v65 = *(_OWORD *)v80;
            long long v66 = *(_OWORD *)&v80[16];
            long long v67 = v81;
            long long v60 = v75;
            long long v61 = v76;
            long long v62 = v77;
            long long v63 = v78;
            sub_24A495C98((uint64_t)&v60);
            return 1;
          }
LABEL_30:
          swift_bridgeObjectRelease();
LABEL_31:
          long long v56 = v72;
          long long v57 = *(_OWORD *)v73;
          long long v58 = *(_OWORD *)&v73[16];
          long long v59 = v74;
          long long v52 = v68;
          long long v53 = v69;
          long long v54 = v70;
          long long v55 = v71;
          sub_24A495C98((uint64_t)&v52);
          long long v64 = v79;
          long long v65 = *(_OWORD *)v80;
          long long v66 = *(_OWORD *)&v80[16];
          long long v67 = v81;
          long long v60 = v75;
          long long v61 = v76;
          long long v62 = v77;
          long long v63 = v78;
          sub_24A495C98((uint64_t)&v60);
          return 0;
        }
        if (!v29) {
          goto LABEL_30;
        }
        if (v26 == v28 && v27 == v29)
        {
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
        }
        else
        {
          char v25 = sub_24A5BC510();
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          if ((v25 & 1) == 0) {
            goto LABEL_31;
          }
        }
        uint64_t v17 = *(void *)v80;
        unint64_t v19 = v81;
        int64_t v23 = *(void *)v80 + ((unint64_t)v81 >> 16);
        if (__OFADD__(*(void *)v80, (unint64_t)v81 >> 16)) {
          goto LABEL_34;
        }
      }
    }
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  return 0;
}

unint64_t _s19CollectionsInternal9BigStringV8distance4from2toSiAC5IndexV_AHtF_0(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  long long v15 = *(_OWORD *)(v9 + 16);
  long long v81 = *(_OWORD *)v9;
  long long v82 = v15;
  long long v83 = *(_OWORD *)(v9 + 32);
  unint64_t v16 = v81;
  unsigned int v17 = v83;
  unint64_t v18 = 2 * (v83 & 0x1FFFFFFFFFFFFFLL);
  if (!(void)v81) {
    unint64_t v18 = 0;
  }
  unint64_t v19 = a1 >> 10;
  if (v18 < a1 >> 10)
  {
    __break(1u);
    goto LABEL_88;
  }
  unint64_t v20 = a5 >> 10;
  if (v18 < a5 >> 10)
  {
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  if (v19 == v20) {
    return 0;
  }
  unint64_t v8 = v9;
  unint64_t v72 = *((void *)&v81 + 1);
  uint64_t v73 = v82;
  unint64_t v74 = a5 >> 10;
  unint64_t v75 = a1 >> 10;
  BOOL v22 = v20 >= v19;
  if (v20 >= v19) {
    unint64_t v23 = a1;
  }
  else {
    unint64_t v23 = a5;
  }
  if (v20 >= v19) {
    uint64_t v24 = a2;
  }
  else {
    uint64_t v24 = a6;
  }
  if (v22) {
    unint64_t v25 = a3;
  }
  else {
    unint64_t v25 = a7;
  }
  if (v22) {
    uint64_t v26 = a4;
  }
  else {
    uint64_t v26 = a8;
  }
  uint64_t v71 = *((void *)&v82 + 1);
  if (v22) {
    unint64_t v10 = a5;
  }
  else {
    unint64_t v10 = a1;
  }
  if (v22) {
    uint64_t v27 = a6;
  }
  else {
    uint64_t v27 = a2;
  }
  if (v22) {
    unint64_t v28 = a7;
  }
  else {
    unint64_t v28 = a3;
  }
  if (v22) {
    uint64_t v29 = a8;
  }
  else {
    uint64_t v29 = a4;
  }
  unint64_t v30 = sub_24A496820(v23, v24, v25, v26, 0);
  unint64_t v77 = v32;
  uint64_t v78 = v31;
  uint64_t v34 = v33;
  unint64_t result = sub_24A496820(v10, v27, v28, v29, 1);
  if (v34 == 1) {
    goto LABEL_110;
  }
  unint64_t v14 = v37;
  if (v37 == 1)
  {
LABEL_111:
    __break(1u);
    return result;
  }
  unint64_t v11 = v36;
  unint64_t v12 = (16 * (int)v30) & 0x4000 | ((unint64_t)v30 << 16);
  uint64_t v38 = v12 | (v30 >> 8) & 3 | 4;
  unint64_t v13 = v77;
  unint64_t v76 = (16 * (int)result) & 0x4000 | ((unint64_t)result << 16) | (result >> 8) & 3 | 4;
  if (v77 == v36)
  {
    if (v78 == *((void *)&v83 + 1))
    {
      unint64_t v11 = v38;
      unint64_t v14 = (16 * (int)result) & 0x4000 | ((unint64_t)result << 16);
      if (v34)
      {
        unint64_t v39 = v34 + 24 * ((v77 >> ((4 * *(unsigned char *)(v34 + 18) + 8) & 0x3C)) & 0xF);
        uint64_t v9 = *(void *)(v39 + 24);
        unint64_t v8 = *(void *)(v39 + 32);
        LODWORD(v10) = *(unsigned __int8 *)(v39 + 44);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v89 = v81;
        long long v90 = v82;
        uint64_t v91 = v83;
        swift_unknownObjectRetain();
        sub_24A4895D4(v77, (uint64_t)&v84);
        sub_24A496BE8(v9);
        uint64_t v9 = v84;
        unint64_t v8 = v85;
        LODWORD(v10) = BYTE4(v86);
      }
      unint64_t v13 = HIBYTE(v8) & 0xF;
      unint64_t v10 = v10;
      if ((v8 & 0x1000000000000000) == 0)
      {
        unint64_t v41 = v9 & 0xFFFFFFFFFFFFLL;
        if ((v8 & 0x2000000000000000) != 0) {
          unint64_t v41 = HIBYTE(v8) & 0xF;
        }
        if (v41 < v10) {
          goto LABEL_93;
        }
        unint64_t result = ((unint64_t)v10 << 16) | 4;
        goto LABEL_46;
      }
LABEL_91:
      unint64_t result = MEMORY[0x24C5C6A60](15, v10, v9, v8);
LABEL_46:
      unint64_t v42 = result >> 14;
      uint64_t v34 = v12 >> 14 < result >> 14;
      if (v12 >> 14 < result >> 14) {
        unint64_t v11 = result;
      }
      unint64_t v12 = v14 >> 14 < v42;
      if (v14 >> 14 >= v42) {
        unint64_t v16 = v76;
      }
      else {
        unint64_t v16 = result;
      }
      if ((v8 & 0x1000000000000000) != 0)
      {
        unint64_t v44 = MEMORY[0x24C5C6A60](15, v10, v9, v8);
      }
      else
      {
        unint64_t v43 = v9 & 0xFFFFFFFFFFFFLL;
        if ((v8 & 0x2000000000000000) != 0) {
          unint64_t v43 = v13;
        }
        if (v43 < v10) {
          goto LABEL_109;
        }
        unint64_t v44 = (v10 << 16) | 4;
      }
      sub_24A494C00(v44, v9, v8);
      uint64_t v9 = v45;
      unint64_t v10 = sub_24A5BBE90();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v46 = v10 + v34;
      if (__OFADD__(v10, v34))
      {
        __break(1u);
        goto LABEL_99;
      }
      unint64_t result = v46 - v12;
      if (!__OFSUB__(v46, v12)) {
        goto LABEL_84;
      }
      __break(1u);
      goto LABEL_61;
    }
    goto LABEL_89;
  }
  if (v78 != *((void *)&v83 + 1))
  {
LABEL_90:
    __break(1u);
    goto LABEL_91;
  }
  unint64_t v10 = v35;
  unint64_t v68 = (16 * (int)result) & 0x4000 | ((unint64_t)result << 16);
  if (v34)
  {
    unint64_t v40 = v34 + 24 * ((v77 >> ((4 * *(unsigned char *)(v34 + 18) + 8) & 0x3C)) & 0xF);
    unint64_t v13 = *(void *)(v40 + 32);
    uint64_t v70 = *(void *)(v40 + 24);
    uint64_t v9 = *(unsigned __int8 *)(v40 + 44);
    swift_bridgeObjectRetain();
    goto LABEL_62;
  }
LABEL_61:
  *(void *)&long long v89 = v16;
  *((void *)&v89 + 1) = v72;
  *(void *)&long long v90 = v73;
  *((void *)&v90 + 1) = v71;
  uint64_t v91 = v83;
  swift_unknownObjectRetain();
  sub_24A4895D4(v13, (uint64_t)&v84);
  sub_24A496BE8(v8);
  unint64_t v13 = v85;
  uint64_t v70 = v84;
  uint64_t v9 = BYTE4(v86);
LABEL_62:
  if (v10 != v78)
  {
    __break(1u);
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  unsigned int v69 = v9;
  if (v14)
  {
    unint64_t v47 = v14 + 24 * ((v11 >> ((4 * *(unsigned char *)(v14 + 18) + 8) & 0x3C)) & 0xF);
    unint64_t v10 = *(void *)(v47 + 32);
    uint64_t v73 = *(void *)(v47 + 24);
    unsigned int v17 = *(unsigned __int8 *)(v47 + 44);
    swift_bridgeObjectRetain();
  }
  else
  {
    unint64_t v84 = v16;
    unint64_t v85 = v72;
    uint64_t v86 = v73;
    uint64_t v87 = v71;
    uint64_t v88 = v83;
    swift_unknownObjectRetain();
    sub_24A4895D4(v11, (uint64_t)v79);
    sub_24A496BE8(v8);
    unint64_t v10 = v79[1];
    uint64_t v73 = v79[0];
    unsigned int v17 = v80;
  }
  swift_unknownObjectRetain();
  uint64_t v9 = sub_24A4A59D8(v78, v77, v34, v78, v11, v14, (uint64_t (*)(unint64_t, unint64_t, uint64_t, uint64_t))sub_24A4A60BC, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t))sub_24A4A6518);
  sub_24A496BE8(v8);
  unint64_t v11 = v69;
  if ((v13 & 0x1000000000000000) == 0)
  {
    unint64_t v48 = HIBYTE(v13) & 0xF;
    uint64_t v49 = v70;
    if ((v13 & 0x2000000000000000) == 0) {
      unint64_t v48 = v70 & 0xFFFFFFFFFFFFLL;
    }
    if (v48 >= v69)
    {
      BOOL v50 = v12 >> 14 < 4 * (unint64_t)v69;
      uint64_t v51 = ((unint64_t)v69 << 16) | 4;
      uint64_t v52 = 4 * v69;
      BOOL v53 = v52 != 0;
      if (v52) {
        unint64_t v16 = ((unint64_t)v69 << 16) | 4;
      }
      else {
        unint64_t v16 = 15;
      }
      goto LABEL_73;
    }
LABEL_99:
    __break(1u);
    goto LABEL_100;
  }
LABEL_94:
  uint64_t v49 = v70;
  unint64_t v66 = MEMORY[0x24C5C6A60](15, v11, v70, v13);
  BOOL v53 = v66 >> 14 != 0;
  if (v66 >> 14) {
    unint64_t v16 = v66;
  }
  else {
    unint64_t v16 = 15;
  }
  BOOL v50 = v12 >> 14 < v66 >> 14;
  uint64_t v51 = MEMORY[0x24C5C6A60](15, v11, v70, v13);
LABEL_73:
  sub_24A494C00(v51, v49, v13);
  uint64_t v54 = sub_24A5BBE90();
  swift_bridgeObjectRelease();
  unint64_t result = swift_bridgeObjectRelease();
  uint64_t v55 = v54 + v53;
  if (__OFADD__(v54, v53))
  {
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  BOOL v56 = __OFSUB__(v55, v50);
  uint64_t v57 = v55 - v50;
  if (v56)
  {
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }
  unint64_t v16 = v9 - v57;
  if (__OFSUB__(v9, v57))
  {
LABEL_102:
    __break(1u);
    goto LABEL_103;
  }
  uint64_t v9 = v17;
  if ((v10 & 0x1000000000000000) != 0)
  {
LABEL_103:
    uint64_t v59 = v73;
    unint64_t v67 = (unint64_t)MEMORY[0x24C5C6A60](15, v9, v73, v10) >> 14;
    BOOL v62 = v67 != 0;
    BOOL v60 = v68 >> 14 < v67;
    uint64_t v61 = MEMORY[0x24C5C6A60](15, v9, v73, v10);
    goto LABEL_81;
  }
  unint64_t v58 = HIBYTE(v10) & 0xF;
  uint64_t v59 = v73;
  if ((v10 & 0x2000000000000000) == 0) {
    unint64_t v58 = v73 & 0xFFFFFFFFFFFFLL;
  }
  if (v58 < v17)
  {
    __break(1u);
    goto LABEL_105;
  }
  BOOL v60 = v68 >> 14 < 4 * (unint64_t)v17;
  uint64_t v61 = ((unint64_t)v17 << 16) | 4;
  BOOL v62 = 4 * v17 != 0;
LABEL_81:
  sub_24A494C00(v61, v59, v10);
  uint64_t v63 = sub_24A5BBE90();
  swift_bridgeObjectRelease();
  unint64_t result = swift_bridgeObjectRelease();
  uint64_t v64 = v63 + v62;
  if (__OFADD__(v63, v62))
  {
LABEL_105:
    __break(1u);
LABEL_106:
    __break(1u);
    goto LABEL_107;
  }
  BOOL v56 = __OFSUB__(v64, v60);
  uint64_t v65 = v64 - v60;
  if (v56)
  {
LABEL_107:
    __break(1u);
    goto LABEL_108;
  }
  unint64_t result = v16 + v65;
  if (__OFADD__(v16, v65))
  {
LABEL_108:
    __break(1u);
LABEL_109:
    __break(1u);
LABEL_110:
    __break(1u);
    goto LABEL_111;
  }
LABEL_84:
  if (v74 < v75)
  {
    BOOL v56 = __OFSUB__(0, result);
    unint64_t result = -(uint64_t)result;
    if (v56) {
      goto LABEL_106;
    }
  }
  return result;
}

unint64_t sub_24A493804@<X0>(void *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v37 = a1[1];
  uint64_t v38 = *a1;
  uint64_t v35 = a1[3];
  uint64_t v36 = a1[2];
  uint64_t v33 = a1[5];
  uint64_t v34 = a1[4];
  long long v12 = *((_OWORD *)a1 + 1);
  long long v43 = *(_OWORD *)a1;
  long long v44 = v12;
  long long v45 = *((_OWORD *)a1 + 2);
  uint64_t v13 = *((void *)&v12 + 1);
  uint64_t v32 = v12;
  uint64_t v39 = *((void *)&v45 + 1);
  if ((void)v43) {
    uint64_t v14 = 2 * (v45 & 0x1FFFFFFFFFFFFFLL);
  }
  else {
    uint64_t v14 = 0;
  }
  swift_unknownObjectRetain();
  if (v14 == a2 >> 10)
  {
    unint64_t result = sub_24A498214();
    unint64_t v16 = result;
    uint64_t v17 = 0;
    unint64_t v18 = a2 >> 11;
    unint64_t v19 = 15;
    uint64_t v20 = 7;
LABEL_15:
    *a6 = v38;
    a6[1] = v37;
    a6[2] = v36;
    a6[3] = v35;
    a6[4] = v34;
    a6[5] = v33;
    a6[6] = v18;
    a6[7] = v39;
    a6[8] = v16;
    a6[9] = v17;
    a6[10] = v19;
    a6[11] = v20;
    return result;
  }
  unint64_t result = sub_24A496820(a2, a3, a4, a5, 0);
  if (v23 != 1)
  {
    if (v21 != *((void *)&v45 + 1))
    {
      __break(1u);
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
    unint64_t v24 = result;
    unint64_t v16 = v22;
    uint64_t v17 = v23;
    if (v23)
    {
      uint64_t v25 = v23 + 24 * ((v22 >> ((4 * *(unsigned char *)(v23 + 18) + 8) & 0x3C)) & 0xF);
      uint64_t v27 = *(void *)(v25 + 24);
      unint64_t v26 = *(void *)(v25 + 32);
      unsigned int v28 = *(unsigned __int8 *)(v25 + 44);
      unint64_t result = swift_bridgeObjectRetain();
      unint64_t v29 = v28;
      if ((v26 & 0x1000000000000000) == 0) {
        goto LABEL_10;
      }
    }
    else
    {
      long long v46 = v43;
      uint64_t v47 = v32;
      uint64_t v48 = v13;
      uint64_t v49 = v45;
      swift_unknownObjectRetain();
      sub_24A4895D4(v16, (uint64_t)&v40);
      unint64_t result = sub_24A496BE8((uint64_t)a1);
      uint64_t v27 = v40;
      unint64_t v26 = v41;
      unint64_t v29 = v42;
      if ((v41 & 0x1000000000000000) == 0)
      {
LABEL_10:
        unint64_t v30 = HIBYTE(v26) & 0xF;
        if ((v26 & 0x2000000000000000) == 0) {
          unint64_t v30 = v27 & 0xFFFFFFFFFFFFLL;
        }
        if (v30 >= v29)
        {
          unint64_t v31 = (v29 << 16) | 4;
LABEL_14:
          unint64_t v18 = (v24 >> 11) - v24;
          unint64_t v19 = (16 * (int)v24) & 0x4000 | ((unint64_t)v24 << 16) | (v24 >> 8) & 3 | 4;
          swift_bridgeObjectRetain();
          sub_24A494C00(v31, v27, v26);
          swift_bridgeObjectRelease_n();
          uint64_t v20 = sub_24A5BBE20();
          unint64_t result = swift_bridgeObjectRelease();
          goto LABEL_15;
        }
        goto LABEL_19;
      }
    }
    unint64_t v31 = MEMORY[0x24C5C6A60](15, v29, v27, v26);
    goto LABEL_14;
  }
LABEL_20:
  __break(1u);
  return result;
}

unint64_t sub_24A493A8C(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(unsigned __int16 *)result;
  unint64_t v8 = a3;
  if (!*(_WORD *)result) {
    goto LABEL_15;
  }
  uint64_t v9 = *(unsigned __int8 *)(a2 + 16);
  unint64_t v10 = a3 - v9;
  if (__OFSUB__(a3, v9))
  {
LABEL_148:
    __break(1u);
    goto LABEL_149;
  }
  if (__OFADD__(v10, 1))
  {
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
    goto LABEL_151;
  }
  if ((uint64_t)(v10 + 1) < 1)
  {
    uint64_t v7 = 0;
    unint64_t v10 = a3;
    BOOL v11 = __OFSUB__(a4, a3);
    uint64_t v12 = a4 - a3;
    if (v11) {
      goto LABEL_137;
    }
  }
  else
  {
    if (v7 == 1)
    {
      unint64_t v8 = a3 - v9;
LABEL_15:
      if (v8)
      {
LABEL_147:
        __break(1u);
        goto LABEL_148;
      }
      unint64_t v10 = 0;
      BOOL v11 = __OFSUB__(a4, a3);
      uint64_t v12 = a4 - a3;
      if (!v11) {
        goto LABEL_17;
      }
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
      goto LABEL_147;
    }
    uint64_t v13 = (unsigned __int8 *)(a2 + 40);
    uint64_t v14 = 1;
    while (1)
    {
      unsigned int v15 = *v13;
      v13 += 24;
      unint64_t v8 = v10 - v15;
      if (__OFSUB__(v10, v15)) {
        goto LABEL_139;
      }
      if (__OFADD__(v8, 1)) {
        goto LABEL_140;
      }
      if ((uint64_t)(v8 + 1) < 1) {
        break;
      }
      ++v14;
      unint64_t v10 = v8;
      if (v7 == v14) {
        goto LABEL_15;
      }
    }
    uint64_t v7 = v14;
    BOOL v11 = __OFSUB__(a4, a3);
    uint64_t v12 = a4 - a3;
    if (v11) {
      goto LABEL_137;
    }
  }
LABEL_17:
  uint64_t v16 = sub_24A4950DC(v7, v10, v12, 1, (unsigned __int16 *)result, a2);
  unint64_t v18 = v17;
  uint64_t v198 = a2;
  uint64_t v19 = a2 + 24 * v7;
  unint64_t v21 = *(void *)v19;
  unint64_t v20 = *(void *)(v19 + 8);
  unint64_t v22 = *(unsigned int *)(v19 + 16) | ((unint64_t)*(unsigned __int8 *)(v19 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(v19 + 21) << 40);
  unint64_t v23 = sub_24A494ED0(v10, *(void *)v19, v20);
  swift_bridgeObjectRetain();
  uint64_t v231 = sub_24A494C18(v23, v21, v20, v22);
  unsigned int v25 = v24;
  if (v7 == v16)
  {
    swift_bridgeObjectRetain();
    unint64_t v26 = sub_24A494C00(v23, v21, v20);
    uint64_t v28 = v27;
    uint64_t v30 = v29;
    unint64_t v31 = v18;
    uint64_t v33 = v32;
    swift_bridgeObjectRelease();
    uint64_t v34 = MEMORY[0x24C5C68C0](v26, v28, v30, v33);
    unint64_t v36 = v35;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v37 = sub_24A5BB830();
    uint64_t v39 = v38;
    uint64_t v41 = v40;
    uint64_t v43 = v42;
    swift_bridgeObjectRelease();
    MEMORY[0x24C5C68C0](v37, v39, v41, v43);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t result = v31 - v231;
    if (!__OFSUB__(v31, v231))
    {
      unint64_t v44 = (v25 << 16) & 0xFF0000 | HIWORD(v231) | (v25 << 16) & 0xFF000000 | ((unint64_t)BYTE2(v25) << 32) | ((unint64_t)HIBYTE(v25) << 40);
      unint64_t v45 = sub_24A494ED0(result, v34, v36);
      uint64_t v46 = sub_24A494C18(v45, v34, v36, v44);
      swift_bridgeObjectRetain();
      unint64_t v47 = sub_24A494C00(v45, v34, v36);
      uint64_t v49 = v48;
      uint64_t v51 = v50;
      uint64_t v53 = v52;
      swift_bridgeObjectRelease();
      MEMORY[0x24C5C68C0](v47, v49, v51, v53);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      uint64_t v54 = sub_24A5BB830();
      uint64_t v56 = v55;
      uint64_t v58 = v57;
      uint64_t v60 = v59;
      swift_bridgeObjectRelease();
      uint64_t v61 = MEMORY[0x24C5C68C0](v54, v56, v58, v60);
      unint64_t v63 = v62;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_24A494F18(v61, v63, v46 & 0xFFFFFFFFFFFFLL);
      return swift_bridgeObjectRelease();
    }
    goto LABEL_150;
  }
  unint64_t v208 = v18;
  uint64_t v209 = v16;
  uint64_t v225 = HIBYTE(v24);
  swift_bridgeObjectRetain();
  unint64_t v64 = sub_24A494C00(v23, v21, v20);
  uint64_t v66 = v65;
  uint64_t v68 = v67;
  uint64_t v70 = v69;
  swift_bridgeObjectRelease();
  uint64_t v71 = MEMORY[0x24C5C68C0](v64, v66, v68, v70);
  unint64_t v73 = v72;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v74 = sub_24A5BB830();
  uint64_t v76 = v75;
  uint64_t v78 = v77;
  uint64_t v80 = v79;
  swift_bridgeObjectRelease();
  MEMORY[0x24C5C68C0](v74, v76, v78, v80);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  unint64_t result = sub_24A494F18(v71, v73, (v25 << 16) & 0xFF0000 | HIWORD(v231) | (v25 << 16) & 0xFF000000 | (v225 << 40) | ((unint64_t)BYTE2(v25) << 32));
  uint64_t v81 = v7 + 1;
  if (!__OFADD__(v7, 1))
  {
    uint64_t v82 = v209;
    if (v209 < v81) {
      goto LABEL_152;
    }
    unint64_t v83 = v208;
    if (v81 == v209)
    {
LABEL_25:
      uint64_t v84 = v198 + 24 * v82;
      unint64_t v86 = *(void *)v84;
      unint64_t v85 = *(void *)(v84 + 8);
      unint64_t v87 = *(unsigned int *)(v84 + 16) | ((unint64_t)*(unsigned __int8 *)(v84 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(v84 + 21) << 40);
      unint64_t v88 = sub_24A494ED0(v83, *(void *)v84, v85);
      swift_bridgeObjectRetain();
      uint64_t v89 = sub_24A494C18(v88, v86, v85, v87);
      swift_bridgeObjectRetain();
      unint64_t v90 = sub_24A494C00(v88, v86, v85);
      uint64_t v92 = v91;
      uint64_t v94 = v93;
      uint64_t v96 = v95;
      swift_bridgeObjectRelease();
      MEMORY[0x24C5C68C0](v90, v92, v94, v96);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      uint64_t v97 = sub_24A5BB830();
      uint64_t v99 = v98;
      uint64_t v101 = v100;
      uint64_t v103 = v102;
      swift_bridgeObjectRelease();
      uint64_t v104 = MEMORY[0x24C5C68C0](v97, v99, v101, v103);
      unint64_t v106 = v105;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_24A494F18(v104, v106, v89 & 0xFFFFFFFFFFFFLL);
      return swift_bridgeObjectRelease();
    }
    long long v107 = (unsigned __int8 *)(v198 + 24 * v7 + 45);
    while (1)
    {
      if (v81 >= v82) {
        goto LABEL_138;
      }
      uint64_t v109 = *(void *)(v107 - 21);
      unint64_t v110 = *(void *)(v107 - 13);
      unint64_t v111 = (v110 & 0x2000000000000000) != 0 ? HIBYTE(v110) & 0xF : v109 & 0xFFFFFFFFFFFFLL;
      if (v111) {
        break;
      }
LABEL_28:
      ++v81;
      v107 += 24;
      if (v82 == v81) {
        goto LABEL_25;
      }
    }
    uint64_t v112 = *(v107 - 5);
    unint64_t result = *(v107 - 4);
    uint64_t v113 = *(v107 - 3);
    uint64_t v114 = *(v107 - 2);
    uint64_t v115 = *(v107 - 1);
    uint64_t v116 = *v107;
    uint64_t v117 = *(void *)(a5 + 48);
    unint64_t v118 = *(void *)(a5 + 56);
    uint64_t v119 = *(unsigned __int16 *)(a5 + 68);
    uint64_t v120 = *(unsigned int *)(a5 + 64);
    *(void *)(a5 + 48) = 0;
    *(void *)(a5 + 56) = 0;
    *(void *)(a5 + 62) = 0;
    if (!v118)
    {
      unint64_t v108 = v112 | (result << 8) | (v113 << 16) | (v114 << 24);
      *(void *)(a5 + 48) = v109;
      *(void *)(a5 + 56) = v110;
      *(_DWORD *)(a5 + 64) = v108;
      *(_WORD *)(a5 + 68) = (v108 | (v115 << 32) | (v116 << 40)) >> 32;
      unint64_t result = swift_bridgeObjectRetain();
      goto LABEL_28;
    }
    uint64_t v236 = v117;
    unint64_t v237 = v118;
    unint64_t v121 = v120 | (v119 << 32);
    LOWORD(v238) = v120;
    unint64_t v122 = v121 >> 8;
    unint64_t v123 = v121 >> 16;
    BYTE2(v238) = BYTE2(v120);
    uint64_t v124 = (v121 >> 24) & 0xFFFFFF;
    HIBYTE(v238) = BYTE3(v120);
    unsigned __int8 v125 = BYTE4(v121);
    __int16 v239 = WORD2(v121);
    int v126 = BYTE5(v121);
    uint64_t v232 = v109;
    unint64_t v233 = v110;
    LOBYTE(v234) = v112;
    BYTE1(v234) = result;
    BYTE2(v234) = v113;
    HIBYTE(v234) = v114;
    LOBYTE(v235) = v115;
    uint64_t v127 = v120;
    HIBYTE(v235) = v116;
    if (v120 >= 0x7CuLL && v112 >= 0x7C)
    {
      uint64_t v199 = WORD2(v121);
      unint64_t v203 = BYTE5(v121);
      unint64_t v219 = v121 >> 16;
      unint64_t v226 = v121 >> 8;
      uint64_t v210 = v117;
      uint64_t v214 = (v121 >> 24) & 0xFFFFFF;
      swift_bridgeObjectRetain();
LABEL_118:
      uint64_t v172 = *(void *)(a5 + 8);
      unint64_t v173 = *(void *)(a5 + 16);
      unint64_t v175 = *(void *)(a5 + 24);
      unint64_t v174 = *(void *)(a5 + 32);
      unint64_t v176 = *(void *)(a5 + 40);
      *(_OWORD *)(a5 + 8) = 0u;
      *(_OWORD *)(a5 + 24) = 0u;
      *(void *)(a5 + 40) = 0;
      if (!v172)
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_26B177EE8);
        uint64_t v172 = swift_allocObject();
        unint64_t v176 = 0;
        unint64_t v174 = 0;
        unint64_t v175 = 0;
        unint64_t v173 = 0;
        *(_WORD *)(v172 + 16) = 0;
        *(unsigned char *)(v172 + 18) = 0;
      }
      if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
      {
        v241[5] = v172;
        v241[6] = v173;
        v241[7] = v175;
        v241[8] = v174;
        v241[9] = v176;
        sub_24A4CBC1C((uint64_t)v240);
        swift_unknownObjectRelease();
        uint64_t v172 = v240[0];
        unint64_t v173 = v240[1];
        unint64_t v175 = v240[2];
        unint64_t v174 = v240[3];
        unint64_t v176 = v240[4];
      }
      unint64_t result = v203;
      if (__OFADD__(v173, v214)) {
        goto LABEL_141;
      }
      if (__OFADD__(v175, v219)) {
        goto LABEL_142;
      }
      if (__OFADD__(v174, v226)) {
        goto LABEL_143;
      }
      if (__OFADD__(v176, v121)) {
        goto LABEL_144;
      }
      int v179 = *(unsigned __int16 *)(v172 + 16);
      uint64_t v180 = v172 + 24 * *(unsigned __int16 *)(v172 + 16);
      *(void *)(v180 + 24) = v210;
      *(void *)(v180 + 32) = v118;
      *(unsigned char *)(v180 + 40) = v121;
      *(unsigned char *)(v180 + 41) = v226;
      *(unsigned char *)(v180 + 42) = v219;
      *(unsigned char *)(v180 + 43) = v214;
      *(unsigned char *)(v180 + 44) = v199;
      *(unsigned char *)(v180 + 45) = v203;
      if (v179 == 0xFFFF) {
        goto LABEL_145;
      }
      int v181 = v179 + 1;
      *(_WORD *)(v172 + 16) = v181;
      if (v181 == 15)
      {
        v241[0] = v172;
        v241[1] = v173 + v214;
        v241[2] = v175 + v219;
        v241[3] = v174 + v226;
        v241[4] = v176 + v121;
        sub_24A59E198(v241, v199, v177, v178);
      }
      else
      {
        *(void *)(a5 + 8) = v172;
        *(void *)(a5 + 16) = v173 + v214;
        *(void *)(a5 + 24) = v175 + v219;
        *(void *)(a5 + 32) = v174 + v226;
        *(void *)(a5 + 40) = v176 + v121;
      }
      unint64_t v83 = v208;
      uint64_t v82 = v209;
      unint64_t result = swift_bridgeObjectRelease();
      unint64_t v182 = v233;
      int v183 = v234;
      unint64_t v184 = ((unint64_t)HIBYTE(v235) << 40) | ((unint64_t)v235 << 32);
      *(void *)(a5 + 48) = v232;
      *(void *)(a5 + 56) = v182;
      *(_DWORD *)(a5 + 64) = v183;
      *(_WORD *)(a5 + 68) = WORD2(v184);
      goto LABEL_28;
    }
    if ((v118 & 0x2000000000000000) != 0) {
      unint64_t v128 = HIBYTE(v118) & 0xF;
    }
    else {
      unint64_t v128 = v117 & 0xFFFFFFFFFFFFLL;
    }
    if (!v128)
    {
      uint64_t v236 = v109;
      unint64_t v237 = v110;
      LOBYTE(v238) = v112;
      BYTE1(v238) = result;
      BYTE2(v238) = v113;
      HIBYTE(v238) = v114;
      uint64_t v134 = v116;
      uint64_t v135 = v115;
      swift_bridgeObjectRetain();
      unint64_t result = swift_bridgeObjectRelease();
      uint64_t v136 = v135;
      uint64_t v137 = v134;
      unint64_t v83 = v208;
      uint64_t v82 = v209;
LABEL_132:
      int v185 = v238;
      *(void *)(a5 + 48) = v109;
      *(void *)(a5 + 56) = v110;
      *(_DWORD *)(a5 + 64) = v185;
      *(_WORD *)(a5 + 68) = ((v137 << 40) | (unint64_t)(v136 << 32)) >> 32;
      goto LABEL_28;
    }
    int64_t v129 = v120 + v112;
    uint64_t v130 = v129 - 124;
    if ((unint64_t)(v127 + v112) >= 0x17B) {
      uint64_t v130 = 255;
    }
    if ((unint64_t)v129 > 0xFF) {
      int64_t v129 = v130;
    }
    unint64_t v131 = v129 - v127;
    if (v129 == v127) {
      goto LABEL_146;
    }
    if (v129 >= v127)
    {
      char v138 = (v110 & 0x1000000000000000) == 0 || (v109 & 0x800000000000000) != 0;
      if ((v110 & 0x1000000000000000) != 0)
      {
        unint64_t result = MEMORY[0x24C5C6A60](15, v131, v109, v110);
        unint64_t v139 = result;
        uint64_t v82 = v209;
      }
      else
      {
        uint64_t v82 = v209;
        if ((v131 & 0x8000000000000000) != 0) {
          goto LABEL_154;
        }
        if (v111 < v131) {
          goto LABEL_155;
        }
        unint64_t v139 = (v131 << 16) | 4;
      }
      uint64_t v140 = 4 << v138;
      if ((v139 & 0xC) == 4 << v138 || (v139 & 1) == 0)
      {
        unint64_t v83 = v208;
        if ((v139 & 0xC) == v140)
        {
          unint64_t result = sub_24A4DFD84(v139, v109, v110);
          unint64_t v139 = result;
          if (v111 < result >> 16) {
            goto LABEL_163;
          }
        }
        else if (v111 < v139 >> 16)
        {
          goto LABEL_163;
        }
        if ((v139 & 1) == 0) {
          unint64_t v139 = v139 & 0xC | sub_24A4971A8(v139, v109, v110) & 0xFFFFFFFFFFFFFFF3 | 1;
        }
      }
      else
      {
        unint64_t v83 = v208;
        if (v111 < v139 >> 16) {
          goto LABEL_157;
        }
      }
      swift_bridgeObjectRetain();
      sub_24A4DBA54((uint64_t)&v236, (uint64_t)&v232, v139);
LABEL_114:
      uint64_t v171 = v232 & 0xFFFFFFFFFFFFLL;
      if ((v233 & 0x2000000000000000) != 0) {
        uint64_t v171 = HIBYTE(v233) & 0xF;
      }
      if (!v171)
      {
        unint64_t result = swift_bridgeObjectRelease();
        uint64_t v109 = v236;
        unint64_t v110 = v237;
        uint64_t v136 = v239;
        uint64_t v137 = HIBYTE(v239);
        goto LABEL_132;
      }
      unint64_t v118 = v237;
      LOBYTE(v121) = v238;
      LOBYTE(v226) = BYTE1(v238);
      LOBYTE(v219) = BYTE2(v238);
      uint64_t v210 = v236;
      LOBYTE(v214) = HIBYTE(v238);
      uint64_t v199 = v239;
      unint64_t v203 = HIBYTE(v239);
      goto LABEL_118;
    }
    char v132 = (v118 & 0x1000000000000000) == 0 || (v117 & 0x800000000000000) != 0;
    int v193 = v114;
    int v194 = v113;
    unsigned int v196 = v115;
    int v197 = v116;
    int v195 = result;
    if ((v118 & 0x1000000000000000) != 0)
    {
      uint64_t v211 = v117;
      char v188 = v132;
      unint64_t v189 = v128;
      unint64_t result = MEMORY[0x24C5C6A60](15, v129, v117, v118);
      char v132 = v188;
      unint64_t v128 = v189;
      unsigned __int8 v125 = BYTE4(v121);
      int v126 = BYTE5(v121);
      uint64_t v117 = v211;
      uint64_t v124 = (v121 >> 24) & 0xFFFFFF;
      unint64_t v133 = result;
      unint64_t v123 = v121 >> 16;
      unint64_t v122 = v121 >> 8;
    }
    else
    {
      if ((uint64_t)v128 < v129) {
        goto LABEL_153;
      }
      unint64_t v133 = (v129 << 16) | 4;
    }
    if ((v133 & 0xC) == 4 << v132 || (v133 & 1) == 0)
    {
      if ((v133 & 0xC) == 4 << v132)
      {
        char v216 = v124;
        char v221 = v123;
        char v228 = v122;
        unsigned __int8 v200 = v125;
        int v205 = v126;
        uint64_t v212 = v117;
        unint64_t v190 = v128;
        unint64_t result = sub_24A4DFD84(v133, v117, v118);
        unint64_t v128 = v190;
        unsigned __int8 v125 = v200;
        int v126 = v205;
        uint64_t v117 = v212;
        LOBYTE(v124) = v216;
        unint64_t v133 = result;
        LOBYTE(v123) = v221;
        LOBYTE(v122) = v228;
        if (v190 < result >> 16) {
          goto LABEL_160;
        }
      }
      else if (v128 < v133 >> 16)
      {
        goto LABEL_160;
      }
      if ((v133 & 1) == 0)
      {
        char v217 = v124;
        char v222 = v123;
        char v229 = v122;
        char v186 = v133;
        unsigned __int8 v201 = v125;
        int v206 = v126;
        uint64_t v213 = v117;
        unint64_t v191 = v128;
        unint64_t v148 = sub_24A4971A8(v133, v117, v118);
        unint64_t v128 = v191;
        unsigned __int8 v125 = v201;
        int v126 = v206;
        uint64_t v117 = v213;
        LOBYTE(v124) = v217;
        LOBYTE(v123) = v222;
        LOBYTE(v122) = v229;
        unint64_t v133 = v186 & 0xC | v148 & 0xFFFFFFFFFFFFFFF3 | 1;
        if (v133 < 0x4000) {
          goto LABEL_74;
        }
        goto LABEL_98;
      }
    }
    else if (v128 < v133 >> 16)
    {
      goto LABEL_156;
    }
    if (v133 < 0x4000)
    {
LABEL_74:
      int v204 = v126;
      unsigned __int8 v220 = v123;
      unsigned __int8 v227 = v122;
      unsigned __int8 v215 = v124;
      unsigned __int8 v141 = v125;
      swift_bridgeObjectRetain_n();
      unint64_t result = sub_24A5BB830();
      if (v141 >= v121)
      {
        unsigned int v143 = (v196 + v141) >> 8;
        unint64_t v83 = v208;
        char v142 = v197;
        if (v196 >= v112)
        {
          if (v143) {
            goto LABEL_172;
          }
          LOBYTE(v239) = v196 + v141;
          char v142 = v204 + v197;
          if (((v204 + v197) >> 8)) {
            goto LABEL_173;
          }
        }
        else
        {
          if (v143) {
            goto LABEL_171;
          }
          LOBYTE(v239) = v196 + v141;
        }
      }
      else
      {
        char v142 = v197;
        unint64_t v83 = v208;
        if (v196 >= v112)
        {
          char v142 = v204 + v197;
          if (((v204 + v197) >> 8)) {
            goto LABEL_170;
          }
        }
      }
      HIBYTE(v239) = v142;
      if (((v112 + v121) >> 8)) {
        goto LABEL_158;
      }
      LOBYTE(v238) = v112 + v121;
      uint64_t v82 = v209;
      if (((v195 + v227) >> 8)) {
        goto LABEL_159;
      }
      BYTE1(v238) = v195 + v227;
      if (((v194 + v220) >> 8)) {
        goto LABEL_164;
      }
      BYTE2(v238) = v194 + v220;
      if (((v193 + v215) >> 8)) {
        goto LABEL_165;
      }
      HIBYTE(v238) = v193 + v215;
      sub_24A491D60();
      sub_24A5BB6D0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v144 = v236;
      unint64_t v145 = v237;
      __int16 v146 = v239;
      uint64_t v236 = 0;
      unint64_t v237 = 0xE000000000000000;
      int v147 = v238;
      int v238 = 0;
      __int16 v239 = 0;
      uint64_t v232 = v144;
      unint64_t v233 = v145;
      int v234 = v147;
      __int16 v235 = v146;
      goto LABEL_114;
    }
LABEL_98:
    unint64_t v192 = v128;
    unint64_t v149 = v187 & 0xFFFF000000000000 | (unsigned __int16)v121 & 0xFF00 | v121 & 0xFFFF0000 | v121 & 0xFFFF000000FFLL;
    unint64_t v150 = v117;
    unint64_t v151 = v133;
    swift_bridgeObjectRetain();
    unint64_t v187 = v149;
    unint64_t result = sub_24A494C18(v151, v150, v118, v149);
    if (4 * v192 < v151 >> 14) {
      goto LABEL_161;
    }
    unint64_t v230 = result;
    unint64_t v207 = HIWORD(result);
    unsigned int v202 = HIWORD(v152);
    unsigned int v223 = v152;
    unsigned int v218 = BYTE2(v152);
    swift_bridgeObjectRetain();
    sub_24A5BB830();
    unint64_t result = swift_bridgeObjectRelease();
    LOBYTE(v235) = v202;
    if (v218 >= v207)
    {
      LOBYTE(v153) = v197;
      unsigned int v159 = (v196 + v202) >> 8;
      int v154 = v193;
      int v155 = v194;
      int v156 = v195;
      if (v196 >= v112)
      {
        unint64_t v157 = v230;
        __int16 v158 = v223;
        if (v159) {
          goto LABEL_176;
        }
        LOBYTE(v235) = v196 + v202;
        unsigned int v153 = v197 + HIBYTE(v223);
        if ((v153 >> 8)) {
          goto LABEL_177;
        }
      }
      else
      {
        unint64_t v157 = v230;
        __int16 v158 = v223;
        if (v159) {
          goto LABEL_175;
        }
        LOBYTE(v235) = v196 + v202;
      }
    }
    else
    {
      LOBYTE(v153) = v197;
      int v154 = v193;
      int v155 = v194;
      int v156 = v195;
      unint64_t v157 = v230;
      __int16 v158 = v223;
      if (v196 >= v112)
      {
        unsigned int v153 = v197 + HIBYTE(v223);
        if ((v153 >> 8)) {
          goto LABEL_174;
        }
      }
    }
    HIBYTE(v235) = v153;
    if (((v112 + v207) >> 8)) {
      goto LABEL_162;
    }
    LOBYTE(v234) = v112 + v207;
    if (((HIBYTE(v157) + v156) >> 8)) {
      goto LABEL_166;
    }
    BYTE1(v234) = HIBYTE(v157) + v156;
    if (((v155 + v158) >> 8)) {
      goto LABEL_167;
    }
    BYTE2(v234) = v155 + v158;
    if (((v154 + HIBYTE(v158)) >> 8)) {
      goto LABEL_168;
    }
    HIBYTE(v234) = v154 + HIBYTE(v158);
    swift_bridgeObjectRetain();
    uint64_t v224 = sub_24A5BB660();
    uint64_t v160 = sub_24A5BBE90();
    BOOL v11 = __OFADD__(v224, v160);
    unint64_t result = v224 + v160;
    if (v11) {
      goto LABEL_169;
    }
    MEMORY[0x24C5C68D0](result);
    sub_24A491D60();
    sub_24A5BB6D0();
    sub_24A5BB6D0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    uint64_t v232 = 0;
    unint64_t v233 = 0xE000000000000000;
    swift_bridgeObjectRetain();
    uint64_t v161 = sub_24A5BB830();
    uint64_t v163 = v162;
    uint64_t v165 = v164;
    uint64_t v167 = v166;
    swift_bridgeObjectRelease();
    uint64_t v168 = MEMORY[0x24C5C68C0](v161, v163, v165, v167);
    unint64_t v170 = v169;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v236 = v168;
    unint64_t v237 = v170;
    int v238 = v230;
    unint64_t v83 = v208;
    __int16 v239 = WORD2(v230);
    uint64_t v82 = v209;
    goto LABEL_114;
  }
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  __break(1u);
LABEL_161:
  __break(1u);
LABEL_162:
  __break(1u);
LABEL_163:
  __break(1u);
LABEL_164:
  __break(1u);
LABEL_165:
  __break(1u);
LABEL_166:
  __break(1u);
LABEL_167:
  __break(1u);
LABEL_168:
  __break(1u);
LABEL_169:
  __break(1u);
LABEL_170:
  __break(1u);
LABEL_171:
  __break(1u);
LABEL_172:
  __break(1u);
LABEL_173:
  __break(1u);
LABEL_174:
  __break(1u);
LABEL_175:
  __break(1u);
LABEL_176:
  __break(1u);
LABEL_177:
  __break(1u);
  return result;
}

unint64_t sub_24A494BAC(unint64_t result, uint64_t a2, unint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v4 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    uint64_t v4 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v4 >= result >> 14) {
    return a4();
  }
  __break(1u);
  return result;
}

unint64_t sub_24A494C00(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_24A494BAC(a1, a2, a3, MEMORY[0x263F8D3A0]);
}

uint64_t sub_24A494C18(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a3 & 0x2000000000000000) != 0) {
    unint64_t v8 = HIBYTE(a3) & 0xF;
  }
  else {
    unint64_t v8 = a2 & 0xFFFFFFFFFFFFLL;
  }
  int v9 = (a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0;
  if (v9) {
    uint64_t v10 = 7;
  }
  else {
    uint64_t v10 = 11;
  }
  if (4 * v8 < a1 >> 14)
  {
    __break(1u);
  }
  else
  {
    unint64_t v4 = a4;
    unint64_t v11 = a4 >> 8;
    unint64_t v12 = a4 >> 16;
    unint64_t v13 = a4 >> 24;
    unint64_t v14 = HIDWORD(a4);
    unint64_t v15 = a4 >> 40;
    if (a1 >> 14 >= 4 * v8)
    {
      LOBYTE(v16) = a4;
      unint64_t v17 = a4 >> 8;
      LOBYTE(v4) = 0;
      unint64_t v11 = 0;
      return v16 | (unint64_t)(unsigned __int16)(v17 << 8) | ((unint64_t)v12 << 16) & 0xFF000000FFFFFFFFLL | (v13 << 24) | ((unint64_t)v14 << 32) & 0xFF0000FFFFFFFFFFLL | ((unint64_t)v15 << 40) & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)v4 << 48) | (v11 << 56);
    }
    if (a1 < 0x4000)
    {
      LOBYTE(v16) = 0;
      LOBYTE(v17) = 0;
      LOBYTE(v12) = 0;
      LODWORD(v13) = 0;
      LOBYTE(v14) = 0;
      LOBYTE(v15) = 0;
      return v16 | (unint64_t)(unsigned __int16)(v17 << 8) | ((unint64_t)v12 << 16) & 0xFF000000FFFFFFFFLL | (v13 << 24) | ((unint64_t)v14 << 32) & 0xFF0000FFFFFFFFFFLL | ((unint64_t)v15 << 40) & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)v4 << 48) | (v11 << 56);
    }
    unint64_t v5 = a3;
    unint64_t v6 = a2;
    unint64_t v18 = sub_24A497020(a1, a2, a3);
    unint64_t v7 = v18;
    if ((v18 & 0xC) != 4 << v9)
    {
      uint64_t result = v18 >> 16;
      if ((v5 & 0x1000000000000000) == 0) {
        goto LABEL_17;
      }
      goto LABEL_28;
    }
  }
  uint64_t result = (unint64_t)sub_24A4DFD84(v7, v6, v5) >> 16;
  if ((v5 & 0x1000000000000000) == 0) {
    goto LABEL_17;
  }
LABEL_28:
  if (v8 >= result)
  {
    uint64_t result = sub_24A5BB750();
LABEL_17:
    if (v4 >> 1 >= result)
    {
      uint64_t result = sub_24A5BB7C0();
      unint64_t v26 = BYTE1(v4) - result;
      if (!__OFSUB__(BYTE1(v4), result))
      {
        unint64_t v21 = result;
        uint64_t result = sub_24A491A60(0xFuLL, v7, v6, v5);
        uint64_t v23 = BYTE2(v4) - result;
        if (!__OFSUB__(BYTE2(v4), result))
        {
          uint64_t v22 = result;
          goto LABEL_24;
        }
        goto LABEL_33;
      }
    }
    else
    {
      unint64_t v20 = v10 | (v8 << 16);
      uint64_t result = sub_24A5BB7C0();
      unint64_t v26 = result;
      unint64_t v21 = BYTE1(v4) - result;
      if (!__OFSUB__(BYTE1(v4), result))
      {
        uint64_t result = sub_24A491A60(v7, v20, v6, v5);
        uint64_t v22 = BYTE2(v4) - result;
        if (!__OFSUB__(BYTE2(v4), result))
        {
          uint64_t v23 = result;
LABEL_24:
          v4 &= 0xFFFFFFFFFFFFuLL;
          unint64_t v16 = sub_24A53BB94(v7, v21, v22, v6, v5, v4);
          unint64_t v17 = v16 >> 8;
          unint64_t v24 = v7;
          unint64_t v12 = v16 >> 16;
          unint64_t v13 = v16 >> 24;
          unint64_t v14 = HIDWORD(v16);
          unint64_t v15 = v16 >> 40;
          unint64_t v25 = sub_24A53BF38(v24, v26, v23, v6, v5, v4);
          LOBYTE(v4) = v25;
          unint64_t v11 = v25 >> 8;
          return v16 | (unint64_t)(unsigned __int16)(v17 << 8) | ((unint64_t)v12 << 16) & 0xFF000000FFFFFFFFLL | (v13 << 24) | ((unint64_t)v14 << 32) & 0xFF0000FFFFFFFFFFLL | ((unint64_t)v15 << 40) & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)v4 << 48) | (v11 << 56);
        }
        goto LABEL_32;
      }
      __break(1u);
    }
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_24A494ED0(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if ((a3 & 0x1000000000000000) != 0) {
LABEL_10:
  }
    JUMPOUT(0x24C5C6A60);
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v3 < a1) {
    goto LABEL_9;
  }
  return (a1 << 16) | 4;
}

uint64_t sub_24A494F18(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4 = a2;
  uint64_t v5 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v5)
  {
    uint64_t v6 = a1;
    unint64_t v7 = HIDWORD(a3);
    uint64_t result = *(void *)(v3 + 48);
    uint64_t v9 = *(void *)(v3 + 56);
    uint64_t v10 = *(unsigned __int16 *)(v3 + 68);
    uint64_t v11 = *(unsigned int *)(v3 + 64);
    *(void *)(v3 + 48) = 0;
    *(void *)(v3 + 56) = 0;
    *(void *)(v3 + 62) = 0;
    if (!v9)
    {
      *(void *)(v3 + 48) = v6;
      *(void *)(v3 + 56) = v4;
      *(_DWORD *)(v3 + 64) = a3;
      *(_WORD *)(v3 + 68) = WORD2(a3);
      return result;
    }
    uint64_t v25 = result;
    uint64_t v26 = v9;
    unint64_t v12 = v11 | (v10 << 32);
    LOWORD(v27) = v12;
    BYTE2(v27) = BYTE2(v12);
    HIBYTE(v27) = BYTE3(v12);
    unsigned __int8 v28 = BYTE4(v12);
    unint64_t v13 = v12 >> 40;
    unsigned __int8 v29 = BYTE5(v12);
    unint64_t v14 = a3 >> 40;
    uint64_t v20 = v6;
    unint64_t v21 = v4;
    LOWORD(v22) = a3;
    BYTE2(v22) = BYTE2(a3);
    HIBYTE(v22) = BYTE3(a3);
    char v23 = BYTE4(a3);
    unsigned __int8 v24 = BYTE5(a3);
    if ((v12 & 0xFC) < 0x7C || (a3 & 0xFC) < 0x7C)
    {
      if (sub_24A4DB184((uint64_t)&v20))
      {
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v16 = v26;
        unsigned int v17 = v27;
        unint64_t v18 = ((unint64_t)v29 << 40) | ((unint64_t)v28 << 32);
        *(void *)(v3 + 48) = v25;
        *(void *)(v3 + 56) = v16;
        *(_DWORD *)(v3 + 64) = v17;
        *(_WORD *)(v3 + 68) = WORD2(v18);
        return result;
      }
      uint64_t result = v25;
      uint64_t v9 = v26;
      uint64_t v15 = v28;
      unint64_t v13 = v29;
      uint64_t v6 = v20;
      unint64_t v4 = v21;
      LOBYTE(v7) = v23;
      unint64_t v14 = v24;
    }
    else
    {
      uint64_t v15 = BYTE4(v12);
    }
    sub_24A59E0D4(result, v9, v27 | (unint64_t)(v15 << 32) | (v13 << 40));
    uint64_t result = swift_bridgeObjectRelease();
    int v19 = v22;
    *(void *)(v3 + 48) = v6;
    *(void *)(v3 + 56) = v4;
    *(_WORD *)(v3 + 68) = ((v14 << 40) | ((unint64_t)v7 << 32)) >> 32;
    *(_DWORD *)(v3 + 64) = v19;
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_24A4950DC(uint64_t result, uint64_t a2, uint64_t a3, char a4, unsigned __int16 *a5, uint64_t a6)
{
  BOOL v6 = __OFADD__(a2, a3);
  uint64_t v7 = a2 + a3;
  if (v6)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v8 = *a5;
  if (v8 > result)
  {
    BOOL v9 = (a4 & 1) == 0;
    if (__OFADD__(v7, v9))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    uint64_t v10 = *(unsigned __int8 *)(a6 + 24 * result + 16);
    if (v7 + v9 > v10)
    {
      uint64_t v11 = (unsigned __int8 *)(a6 + 24 * result + 40);
      while (1)
      {
        BOOL v6 = __OFSUB__(v7, v10);
        v7 -= v10;
        if (v6) {
          break;
        }
        if (v8 - 1 == result) {
          return *a5;
        }
        if (__OFADD__(v7, v9)) {
          goto LABEL_13;
        }
        unsigned int v12 = *v11;
        v11 += 24;
        uint64_t v10 = v12;
        ++result;
        if (v7 + v9 <= v12) {
          return result;
        }
      }
      __break(1u);
LABEL_13:
      __break(1u);
      goto LABEL_14;
    }
  }
  return result;
}

void sub_24A495168()
{
  long long v1 = *(_OWORD *)(v0 + 16);
  long long v81 = *(_OWORD *)v0;
  long long v82 = v1;
  long long v83 = *(_OWORD *)(v0 + 32);
  uint64_t v70 = *(void *)(v0 + 56);
  if (v70 != *((void *)&v83 + 1)) {
    goto LABEL_55;
  }
  uint64_t v2 = v0;
  unint64_t v3 = *(void *)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 72);
  uint64_t v67 = v82;
  unint64_t v68 = *((void *)&v81 + 1);
  uint64_t v65 = v83;
  uint64_t v66 = *((void *)&v82 + 1);
  if (v4)
  {
    unint64_t v5 = v4 + 24 * ((v3 >> ((4 * *(unsigned char *)(v4 + 18) + 8) & 0x3C)) & 0xF);
    uint64_t v6 = *(void *)(v5 + 24);
    unint64_t v7 = *(void *)(v5 + 32);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v89 = v81;
    long long v90 = v82;
    uint64_t v91 = v83;
    sub_24A497498(v0);
    sub_24A4895D4(v3, (uint64_t)&v84);
    sub_24A496BE8(v0);
    uint64_t v6 = v84;
    unint64_t v7 = v85;
  }
  unint64_t v8 = *(void *)(v2 + 88) >> 14;
  if (v8 < *(void *)(v2 + 80) >> 14)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  uint64_t v69 = v81;
  swift_bridgeObjectRetain();
  uint64_t v9 = sub_24A5BB830();
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  swift_bridgeObjectRelease();
  uint64_t v16 = MEMORY[0x24C5C68C0](v9, v11, v13, v15);
  uint64_t v18 = v17;
  swift_bridgeObjectRelease();
  uint64_t v79 = v16;
  uint64_t v80 = v18;
  swift_bridgeObjectRelease();
  uint64_t v19 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0) {
    uint64_t v19 = v6 & 0xFFFFFFFFFFFFLL;
  }
  if (v8 < 4 * v19)
  {
    if ((v18 & 0x2000000000000000) != 0)
    {
      if ((v18 & 0xF00000000000000) != 0) {
        return;
      }
      __break(1u);
LABEL_50:
      if ((v18 & 0xF00000000000000) != 0) {
        return;
      }
LABEL_58:
      __break(1u);
      return;
    }
    if ((v16 & 0xFFFFFFFFFFFFLL) != 0) {
      goto LABEL_46;
    }
    __break(1u);
  }
  sub_24A497498(v2);
  uint64_t v20 = sub_24A4980DC(v70, v3, v4);
  unint64_t v22 = v21;
  uint64_t v24 = v23;
  sub_24A496BE8(v2);
  uint64_t v76 = v20;
  unint64_t v77 = v22;
  uint64_t v78 = v24;
  uint64_t v25 = v81;
  if ((void)v81)
  {
    uint64_t v64 = v2;
    uint64_t v27 = v82;
    unint64_t v26 = *((void *)&v81 + 1);
    uint64_t v28 = v83;
    uint64_t v29 = *((void *)&v82 + 1);
    unint64_t v30 = v22;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v84 = v25;
          unint64_t v85 = v26;
          uint64_t v86 = v27;
          uint64_t v87 = v29;
          uint64_t v88 = v28;
          int v31 = *(unsigned __int8 *)(v25 + 18);
          sub_24A497498(v2);
          sub_24A497498(v2);
          uint64_t v32 = *(unsigned __int16 *)(v25 + 16);
          char v33 = *(unsigned char *)(v25 + 18);
          sub_24A496BE8(v2);
          sub_24A496BE8(v2);
          if (v30 >= (((-15 << ((4 * v33 + 8) & 0x3C)) - 1) & v31 | (unint64_t)(v32 << ((4 * v33 + 8) & 0x3C))))
          {
LABEL_43:
            uint64_t v16 = v79;
            uint64_t v18 = v80;
            goto LABEL_44;
          }
          if (v76 != v70)
          {
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
LABEL_55:
            __break(1u);
            goto LABEL_56;
          }
          unint64_t v34 = v30;
          uint64_t v35 = v78;
          if (v78)
          {
            unint64_t v36 = v78 + 24 * ((v34 >> ((4 * *(unsigned char *)(v78 + 18) + 8) & 0x3C)) & 0xF);
            uint64_t v37 = *(void *)(v36 + 24);
            unint64_t v38 = *(void *)(v36 + 32);
            unint64_t v39 = *(unsigned __int8 *)(v36 + 44);
            swift_bridgeObjectRetain();
          }
          else
          {
            sub_24A497498(v2);
            sub_24A4895D4(v34, (uint64_t)&v72);
            sub_24A496BE8(v2);
            uint64_t v37 = v72;
            unint64_t v38 = v73;
            unint64_t v39 = BYTE4(v74);
          }
          uint64_t v40 = v37 & 0xFFFFFFFFFFFFLL;
          unint64_t v71 = v34;
          if ((v38 & 0x1000000000000000) != 0)
          {
            unint64_t v43 = MEMORY[0x24C5C6A60](15, v39, v37, v38);
            uint64_t v41 = v38 & 0x2000000000000000;
          }
          else
          {
            uint64_t v41 = v38 & 0x2000000000000000;
            if ((v38 & 0x2000000000000000) != 0) {
              unint64_t v42 = HIBYTE(v38) & 0xF;
            }
            else {
              unint64_t v42 = v37 & 0xFFFFFFFFFFFFLL;
            }
            if (v42 < v39) {
              goto LABEL_53;
            }
            unint64_t v43 = (v39 << 16) | 4;
          }
          swift_bridgeObjectRetain();
          uint64_t v44 = sub_24A5BB830();
          unint64_t v46 = v45;
          uint64_t v48 = v47;
          uint64_t v50 = v49;
          swift_bridgeObjectRelease();
          uint64_t v72 = v44;
          unint64_t v73 = v46;
          uint64_t v74 = v48;
          uint64_t v75 = v50;
          sub_24A491D60();
          sub_24A5BB6D0();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v41) {
            uint64_t v51 = HIBYTE(v38) & 0xF;
          }
          else {
            uint64_t v51 = v40;
          }
          BOOL v52 = v43 >> 14 >= 4 * v51;
          uint64_t v2 = v64;
          unint64_t v26 = v68;
          uint64_t v25 = v69;
          uint64_t v29 = v66;
          uint64_t v27 = v67;
          if (!v52) {
            goto LABEL_43;
          }
          int v53 = *(unsigned __int8 *)(v69 + 18);
          uint64_t v54 = *(unsigned __int16 *)(v69 + 16);
          swift_unknownObjectRetain_n();
          sub_24A496BE8(v64);
          if (v71 >= (((-15 << ((4 * v53 + 8) & 0x3C)) - 1) & v53 | (unint64_t)(v54 << ((4 * v53 + 8) & 0x3C)))) {
            goto LABEL_54;
          }
          if (!v35) {
            break;
          }
          char v55 = (4 * *(unsigned char *)(v35 + 18) + 8) & 0x3C;
          unint64_t v56 = ((v71 >> v55) & 0xF) + 1;
          if (v56 >= *(unsigned __int16 *)(v35 + 16)) {
            break;
          }
          unint64_t v30 = (v56 << v55) | ((-15 << v55) - 1) & v71;
          unint64_t v77 = v30;
          sub_24A496BE8(v64);
          uint64_t v28 = v65;
        }
        int v57 = *(unsigned __int8 *)(v69 + 18);
        char v58 = (4 * v57 + 8) & 0x3C;
        uint64_t v72 = (v71 >> v58) & 0xF;
        if (v57) {
          break;
        }
        unint64_t v60 = ((v71 >> v58) & 0xF) + 1;
        if (v60 >= *(unsigned __int16 *)(v69 + 16))
        {
          int v61 = 0;
LABEL_41:
          uint64_t v62 = *(unsigned __int16 *)(v69 + 16);
          char v63 = *(unsigned char *)(v69 + 18);
          swift_unknownObjectRetain();
          sub_24A496BE8(v64);
          sub_24A496BE8(v64);
          unint64_t v30 = ((-15 << ((4 * v63 + 8) & 0x3C)) - 1) & v61 | (unint64_t)(v62 << ((4 * v63 + 8) & 0x3C));
          uint64_t v76 = v70;
          unint64_t v77 = v30;
          uint64_t v78 = 0;
          uint64_t v28 = v65;
        }
        else
        {
          unint64_t v30 = (v60 << v58) | ((-15 << v58) - 1) & v71;
          unint64_t v77 = v30;
          sub_24A496BE8(v64);
          uint64_t v78 = v69;
          uint64_t v28 = v65;
        }
      }
      sub_24A497498(v64);
      char v59 = sub_24A538E54(v69 + 24, &v72, (uint64_t)&v76, v69, v57);
      sub_24A496BE8(v64);
      if ((v59 & 1) == 0)
      {
        int v61 = *(unsigned __int8 *)(v69 + 18);
        goto LABEL_41;
      }
      sub_24A496BE8(v64);
      unint64_t v30 = v77;
      uint64_t v28 = v65;
    }
  }
LABEL_44:
  if ((v18 & 0x2000000000000000) != 0) {
    goto LABEL_50;
  }
  if ((v16 & 0xFFFFFFFFFFFFLL) == 0)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
LABEL_46:
  if ((v16 & 0x1000000000000000) == 0)
  {
    sub_24A49279C();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_24A495704(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(v2 + 88);
  if (v4 >> 14 == *(void *)(v2 + 80) >> 14) {
    return 0;
  }
  long long v6 = *(_OWORD *)(v2 + 16);
  long long v61 = *(_OWORD *)v2;
  long long v62 = v6;
  long long v63 = *(_OWORD *)(v2 + 32);
  uint64_t v49 = *(void *)(v2 + 56);
  if (v49 != *((void *)&v63 + 1))
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  unint64_t v8 = *((void *)&v61 + 1);
  uint64_t v7 = v61;
  unint64_t v9 = *(void *)(v2 + 64);
  uint64_t v10 = *(void *)(v2 + 72);
  uint64_t v44 = (void *)v2;
  uint64_t v47 = *((void *)&v62 + 1);
  uint64_t v48 = v62;
  uint64_t v46 = v63;
  if (v10)
  {
    unint64_t v11 = v10 + 24 * ((v9 >> ((4 * *(unsigned char *)(v10 + 18) + 8) & 0x3C)) & 0xF);
    unint64_t v3 = *(void *)(v11 + 24);
    unint64_t v2 = *(void *)(v11 + 32);
    unsigned int v12 = *(unsigned __int8 *)(v11 + 40);
    unsigned int v13 = *(unsigned __int8 *)(v11 + 44);
    uint64_t result = swift_bridgeObjectRetain();
  }
  else
  {
    long long v64 = v61;
    long long v65 = v62;
    uint64_t v66 = v63;
    swift_unknownObjectRetain();
    sub_24A4895D4(v9, (uint64_t)&v56);
    uint64_t result = sub_24A496BE8((uint64_t)&v61);
    unint64_t v3 = v56;
    unint64_t v2 = v57;
    unsigned int v12 = v58;
    unsigned int v13 = BYTE4(v58);
  }
  unint64_t v14 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    unint64_t v14 = v3 & 0xFFFFFFFFFFFFLL;
  }
  if (v4 >> 14 >= 4 * v14)
  {
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v17 = v44[6];
    uint64_t v18 = v17 + v12;
    if (__OFADD__(v17, v12)) {
      goto LABEL_56;
    }
    swift_unknownObjectRetain();
    uint64_t v19 = sub_24A4980DC(v49, v9, v10);
    unint64_t v21 = v20;
    uint64_t v23 = v22;
    sub_24A496BE8((uint64_t)&v61);
    uint64_t v53 = v19;
    unint64_t v54 = v21;
    uint64_t v55 = v23;
    if (!v7) {
      return 0;
    }
    unint64_t v45 = v8;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v56 = v7;
          unint64_t v57 = v8;
          uint64_t v58 = v48;
          uint64_t v59 = v47;
          uint64_t v60 = v46;
          int v24 = *(unsigned __int8 *)(v7 + 18);
          unint64_t v2 = *(unsigned __int16 *)(v7 + 16);
          swift_unknownObjectRetain_n();
          sub_24A496BE8((uint64_t)&v61);
          sub_24A496BE8((uint64_t)&v61);
          if (v21 >= (((-15 << ((4 * v24 + 8) & 0x3C)) - 1) & v24 | (v2 << ((4 * v24 + 8) & 0x3C)))) {
            return 0;
          }
          if (v53 != v49)
          {
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
            goto LABEL_53;
          }
          uint64_t v25 = v55;
          if (v55)
          {
            unint64_t v26 = v55 + 24 * ((v21 >> ((4 * *(unsigned char *)(v55 + 18) + 8) & 0x3C)) & 0xF);
            uint64_t v27 = *(void *)(v26 + 24);
            unint64_t v2 = *(void *)(v26 + 32);
            uint64_t v28 = *(unsigned __int8 *)(v26 + 40);
            unint64_t v3 = *(unsigned __int8 *)(v26 + 44);
            swift_bridgeObjectRetain();
          }
          else
          {
            swift_unknownObjectRetain();
            sub_24A4895D4(v21, (uint64_t)v50);
            sub_24A496BE8((uint64_t)&v61);
            uint64_t v27 = v50[0];
            unint64_t v2 = v50[1];
            uint64_t v28 = v51;
            unint64_t v3 = v52;
          }
          if ((v2 & 0x1000000000000000) != 0)
          {
            unint64_t v3 = MEMORY[0x24C5C6A60](15, v3, v27, v2);
            uint64_t v29 = v2 & 0x2000000000000000;
          }
          else
          {
            uint64_t v29 = v2 & 0x2000000000000000;
            if ((v2 & 0x2000000000000000) != 0) {
              unint64_t v30 = HIBYTE(v2) & 0xF;
            }
            else {
              unint64_t v30 = v27 & 0xFFFFFFFFFFFFLL;
            }
            if (v30 < v3) {
              goto LABEL_50;
            }
            unint64_t v3 = (v3 << 16) | 4;
          }
          if (v29) {
            uint64_t v31 = HIBYTE(v2) & 0xF;
          }
          else {
            uint64_t v31 = v27 & 0xFFFFFFFFFFFFLL;
          }
          if (v3 >> 14 < 4 * v31)
          {
            v44[8] = v21;
            v44[9] = v25;
            v44[6] = v18;
            v44[7] = v49;
            v44[10] = v3;
            sub_24A494C00(v3, v27, v2);
            swift_bridgeObjectRelease();
            uint64_t v43 = sub_24A5BBE20();
            swift_bridgeObjectRelease();
            v44[11] = v43;
            return 1;
          }
          swift_bridgeObjectRelease();
          BOOL v32 = __OFADD__(v18, v28);
          v18 += v28;
          if (v32) {
            goto LABEL_51;
          }
          int v33 = *(unsigned __int8 *)(v7 + 18);
          unint64_t v2 = *(unsigned __int16 *)(v7 + 16);
          swift_unknownObjectRetain_n();
          sub_24A496BE8((uint64_t)&v61);
          sub_24A496BE8((uint64_t)&v61);
          if (v21 >= (((-15 << ((4 * v33 + 8) & 0x3C)) - 1) & v33 | (v2 << ((4 * v33 + 8) & 0x3C)))) {
            goto LABEL_52;
          }
          if (!v25) {
            break;
          }
          char v34 = (4 * *(unsigned char *)(v25 + 18) + 8) & 0x3C;
          unint64_t v35 = ((v21 >> v34) & 0xF) + 1;
          if (v35 >= *(unsigned __int16 *)(v25 + 16)) {
            break;
          }
          unint64_t v21 = (v35 << v34) | ((-15 << v34) - 1) & v21;
          unint64_t v54 = v21;
          sub_24A496BE8((uint64_t)&v61);
          unint64_t v8 = v45;
        }
        int v36 = *(unsigned __int8 *)(v7 + 18);
        char v37 = (4 * v36 + 8) & 0x3C;
        v50[0] = (v21 >> v37) & 0xF;
        if (v36) {
          break;
        }
        unint64_t v39 = ((v21 >> v37) & 0xF) + 1;
        unint64_t v8 = v45;
        if (v39 >= *(unsigned __int16 *)(v7 + 16))
        {
          int v40 = 0;
LABEL_44:
          uint64_t v41 = *(unsigned __int16 *)(v7 + 16);
          char v42 = *(unsigned char *)(v7 + 18);
          swift_unknownObjectRetain();
          sub_24A496BE8((uint64_t)&v61);
          sub_24A496BE8((uint64_t)&v61);
          unint64_t v21 = ((-15 << ((4 * v42 + 8) & 0x3C)) - 1) & v40 | (unint64_t)(v41 << ((4 * v42 + 8) & 0x3C));
          uint64_t v53 = v49;
          unint64_t v54 = v21;
          uint64_t v55 = 0;
        }
        else
        {
          unint64_t v21 = (v39 << v37) | ((-15 << v37) - 1) & v21;
          unint64_t v54 = v21;
          sub_24A496BE8((uint64_t)&v61);
          uint64_t v55 = v7;
        }
      }
      sub_24A497498((uint64_t)&v61);
      char v38 = sub_24A538E54(v7 + 24, v50, (uint64_t)&v53, v7, v36);
      sub_24A496BE8((uint64_t)&v61);
      unint64_t v8 = v45;
      if ((v38 & 1) == 0)
      {
        int v40 = *(unsigned __int8 *)(v7 + 18);
        goto LABEL_44;
      }
      sub_24A496BE8((uint64_t)&v61);
      unint64_t v21 = v54;
    }
  }
  v44[10] = v4;
  a2 = v13;
  if ((v2 & 0x1000000000000000) == 0)
  {
    if (v14 >= v13)
    {
      uint64_t v15 = ((unint64_t)v13 << 16) | 4;
      goto LABEL_13;
    }
    __break(1u);
LABEL_56:
    __break(1u);
    return result;
  }
LABEL_54:
  uint64_t v15 = MEMORY[0x24C5C6A60](15, a2, v3, v2);
LABEL_13:
  swift_bridgeObjectRetain();
  sub_24A494C00(v15, v3, v2);
  swift_bridgeObjectRelease_n();
  uint64_t v16 = sub_24A5BBE20();
  swift_bridgeObjectRelease();
  v44[11] = v16;
  return 1;
}

uint64_t sub_24A495C98(uint64_t a1)
{
  return a1;
}

BOOL BigSubstring.UnicodeScalarView.isIdentical(to:)(uint64_t a1)
{
  uint64_t v2 = (uint64_t)v1;
  long long v4 = v1[1];
  _OWORD v8[3] = *v1;
  v8[4] = v4;
  v8[5] = v1[2];
  long long v5 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v5;
  v8[2] = *(_OWORD *)(a1 + 32);
  sub_24A497498((uint64_t)v1);
  sub_24A497498(a1);
  BOOL v6 = sub_24A495D7C((uint64_t)v8);
  sub_24A496BE8(a1);
  sub_24A496BE8(v2);
  return v6
      && (*(void *)(a1 + 48) ^ *(void *)(v2 + 48)) <= 1023
      && (*(void *)(v2 + 80) ^ *(void *)(a1 + 80)) < 0x400uLL;
}

BOOL sub_24A495D7C(uint64_t a1)
{
  sub_24A4974C4(a1, (uint64_t)v9);
  sub_24A4974C4(v1, (uint64_t)v8);
  sub_24A4974C4((uint64_t)v8, (uint64_t)v10);
  sub_24A4974C4((uint64_t)v8, (uint64_t)v11);
  uint64_t v3 = v11[0];
  uint64_t v4 = v10[0];
  sub_24A4974C4((uint64_t)v9, (uint64_t)v7);
  sub_24A4974C4((uint64_t)v9, (uint64_t)v10);
  if (v10[0]) {
    uint64_t v5 = v7[0];
  }
  else {
    uint64_t v5 = 0;
  }
  if (v3 && v4)
  {
    if (v5)
    {
      sub_24A497498(v1);
      sub_24A497498(a1);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return v4 == v5;
    }
    sub_24A497498(v1);
    sub_24A497498(a1);
  }
  else
  {
    sub_24A497498(v1);
    sub_24A497498(a1);
    if (!v5) {
      return 1;
    }
  }
  swift_unknownObjectRelease();
  return 0;
}

unint64_t BigString.UnicodeScalarView.index(roundingDown:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  return sub_24A4965FC(a1, a2, a3, a4);
}

unint64_t BigString.UTF8View.index(_:offsetBy:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  return sub_24A495EFC(a1, a2, a3, a4, a5);
}

unint64_t sub_24A495EFC(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v6 = (uint64_t)v5;
  long long v7 = v5[1];
  *(_OWORD *)uint64_t v75 = *v5;
  *(_OWORD *)&v75[16] = v7;
  long long v76 = v5[2];
  uint64_t v8 = v76;
  if (*(void *)v75) {
    unint64_t v9 = 2 * (v76 & 0x1FFFFFFFFFFFFFLL);
  }
  else {
    unint64_t v9 = 0;
  }
  if (v9 < result >> 10)
  {
    __break(1u);
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  if (!*(void *)v75 || (uint64_t v77 = *(void *)v75, v78 = *(_OWORD *)&v75[8], v79 = *(void *)&v75[24], (v80 = v76) == 0))
  {
    if (!a5) {
      return 768;
    }
    goto LABEL_49;
  }
  uint64_t v11 = result;
  if (result >> 10 == ((2 * (void)v76) & 0x3FFFFFFFFFFFFFLL))
  {
    if (!a5) {
      return v11;
    }
    LOBYTE(v12) = 1;
  }
  else
  {
    unint64_t v12 = a5 >> 63;
  }
  uint64_t result = sub_24A496820(result, a2, a3, a4, v12);
  if (v15 != 1)
  {
    unint64_t v17 = v14;
    uint64_t v18 = v15;
    uint64_t v72 = v13;
    unint64_t v73 = v14;
    uint64_t v74 = v15;
    unint64_t v70 = a5;
    unint64_t v71 = (16 * (int)result) & 0x4000 | ((unint64_t)result << 16) | (result >> 8) & 3 | 4;
    if (v13 == *((void *)&v76 + 1))
    {
      uint64_t v64 = v13;
      unint64_t v65 = result;
      unint64_t v63 = v14;
      if (v15)
      {
        unint64_t v19 = v15 + 24 * ((v14 >> ((4 * *(unsigned char *)(v15 + 18) + 8) & 0x3C)) & 0xF);
        uint64_t v20 = *(void *)(v19 + 24);
        unint64_t v21 = *(void *)(v19 + 32);
        unsigned int v22 = *(unsigned __int8 *)(v19 + 40);
        v16.i32[0] = *(_DWORD *)(v19 + 41);
        unint64_t v62 = vmovl_u8(v16).u64[0];
        swift_bridgeObjectRetain();
        v23.i64[0] = v62;
      }
      else
      {
        swift_unknownObjectRetain();
        sub_24A4895D4(v17, (uint64_t)&v66);
        sub_24A496BE8(v6);
        uint64_t v20 = v66;
        unint64_t v21 = v67;
        unsigned int v22 = v68;
        v24.i32[0] = v69;
        uint16x8_t v23 = vmovl_u8(v24);
      }
      uint32x4_t v25 = vmovl_u16((uint16x4_t)(v23.i64[0] & 0xFF00FF00FF00FFLL));
      v26.i64[0] = v25.u32[0];
      v26.i64[1] = v25.u32[1];
      uint64x2_t v27 = v26;
      v26.i64[0] = v25.u32[2];
      v26.i64[1] = v25.u32[3];
      int8x16_t v28 = vorrq_s8((int8x16_t)vshlq_u64(v27, (uint64x2_t)xmmword_24A5BD070), (int8x16_t)vshlq_u64(v26, (uint64x2_t)xmmword_24A5BD060));
      uint64_t result = (unint64_t)sub_24A496C14(&v71, &v70, v20, v21, vorr_s8(*(int8x8_t *)v28.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL)).u8[0] | v22);
      if (result)
      {
        swift_bridgeObjectRelease();
        unint64_t v35 = (v71 >> 16) - v65 + (v65 >> 11);
        if ((v71 & 0xC000) != 0) {
          uint64_t v36 = (v35 << 11) | 0x400;
        }
        else {
          uint64_t v36 = v35 << 11;
        }
        return v36 & 0xFFFFFFFFFFFFFF00 | BYTE2(v71);
      }
      if ((result & 0x100) == 0)
      {
        swift_unknownObjectRetain();
        sub_24A4A7744((uint64_t)&v72, (uint64_t *)&v70, 0, (uint64_t (*)(uint64_t, uint64_t *, void))sub_24A4A7B1C, (uint64_t (*)(uint64_t, uint64_t *, void, void *, uint64_t (*)(void, void, void)))sub_24A4AA298, (uint64_t (*)(void *, void *, uint64_t, void *, uint64_t *, void))sub_24A4AA314);
        uint64_t result = sub_24A496BE8(v6);
        if (v72 == v64)
        {
          unint64_t v29 = v73;
          uint64_t v30 = v74;
          uint64_t v31 = v65;
          if (v74)
          {
            unint64_t v32 = v74 + 24 * ((v73 >> ((4 * *(unsigned char *)(v74 + 18) + 8) & 0x3C)) & 0xF);
            unint64_t v60 = v73;
            uint64_t v57 = *(void *)(v32 + 24);
            uint64_t v58 = v74;
            unint64_t v33 = *(void *)(v32 + 32);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v34 = v57;
            uint64_t v30 = v58;
            unint64_t v29 = v60;
            uint64_t v31 = v65;
          }
          else
          {
            swift_unknownObjectRetain();
            sub_24A4895D4(v29, (uint64_t)&v66);
            sub_24A496BE8(v6);
            swift_bridgeObjectRelease();
            uint64_t v34 = v66;
            unint64_t v33 = v67;
          }
          unint64_t v44 = sub_24A494ED0(v70, v34, v33);
          uint64_t v45 = (v65 >> 11) - v31;
          swift_unknownObjectRetain();
          uint64_t v46 = sub_24A4A59D8(v64, v63, v18, v64, v29, v30, (uint64_t (*)(unint64_t, unint64_t, uint64_t, uint64_t))sub_24A4A5C3C, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t))sub_24A4A617C);
          sub_24A496BE8(v6);
          uint64_t result = swift_bridgeObjectRelease();
          uint64_t v47 = v45 + v46;
          if (!__OFADD__(v45, v46))
          {
            BOOL v48 = __OFADD__(v47, v44 >> 16);
            uint64_t v49 = v47 + (v44 >> 16);
            if (!v48)
            {
              if ((v44 & 0xC000) != 0) {
                uint64_t v50 = (v49 << 11) | 0x400;
              }
              else {
                uint64_t v50 = v49 << 11;
              }
              return v50 & 0xFFFFFFFFFFFFFF00 | BYTE2(v44);
            }
            goto LABEL_54;
          }
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
          goto LABEL_55;
        }
        goto LABEL_51;
      }
      if (__OFADD__(v70, v22))
      {
LABEL_52:
        __break(1u);
        goto LABEL_53;
      }
      v70 += v22;
      swift_unknownObjectRetain();
      sub_24A4A7744((uint64_t)&v72, (uint64_t *)&v70, 0, (uint64_t (*)(uint64_t, uint64_t *, void))sub_24A4A7B1C, (uint64_t (*)(uint64_t, uint64_t *, void, void *, uint64_t (*)(void, void, void)))sub_24A4AA298, (uint64_t (*)(void *, void *, uint64_t, void *, uint64_t *, void))sub_24A4AA314);
      sub_24A496BE8(v6);
      unint64_t v37 = v73;
      swift_unknownObjectRetain();
      unint64_t v38 = sub_24A498214();
      uint64_t result = sub_24A496BE8(v6);
      if (v37 != v38)
      {
        if (v72 == v64)
        {
          uint64_t v39 = v65;
          uint64_t v40 = v74;
          if (v74)
          {
            unint64_t v41 = v74 + 24 * ((v37 >> ((4 * *(unsigned char *)(v74 + 18) + 8) & 0x3C)) & 0xF);
            unint64_t v42 = *(void *)(v41 + 32);
            uint64_t v59 = *(void *)(v41 + 24);
            uint64_t v61 = v74;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v43 = v59;
            uint64_t v40 = v61;
            uint64_t v39 = v65;
          }
          else
          {
            swift_unknownObjectRetain();
            sub_24A4895D4(v37, (uint64_t)&v66);
            sub_24A496BE8(v6);
            swift_bridgeObjectRelease();
            uint64_t v43 = v66;
            unint64_t v42 = v67;
          }
          unint64_t v51 = sub_24A494ED0(v70, v43, v42);
          uint64_t v52 = (v65 >> 11) - v39;
          swift_unknownObjectRetain();
          uint64_t v53 = sub_24A4A59D8(v64, v63, v18, v64, v37, v40, (uint64_t (*)(unint64_t, unint64_t, uint64_t, uint64_t))sub_24A4A5C3C, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t))sub_24A4A617C);
          sub_24A496BE8(v6);
          uint64_t result = swift_bridgeObjectRelease();
          uint64_t v54 = v52 + v53;
          if (!__OFADD__(v52, v53))
          {
            BOOL v48 = __OFADD__(v54, v51 >> 16);
            uint64_t v55 = v54 + (v51 >> 16);
            if (!v48)
            {
              if ((v51 & 0xC000) != 0) {
                uint64_t v56 = (v55 << 11) | 0x400;
              }
              else {
                uint64_t v56 = v55 << 11;
              }
              return v56 & 0xFFFFFFFFFFFFFF00 | BYTE2(v51);
            }
            goto LABEL_57;
          }
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
          goto LABEL_58;
        }
LABEL_55:
        __break(1u);
        goto LABEL_56;
      }
      uint64_t v11 = (v8 << 11) | 0x300;
      swift_bridgeObjectRelease();
      return v11;
    }
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
LABEL_58:
  __break(1u);
  return result;
}

unint64_t sub_24A4965FC(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)v4;
  uint64_t v6 = *(void *)(v4 + 32);
  unint64_t v7 = 2 * (v6 & 0x1FFFFFFFFFFFFFLL);
  if (!*(void *)v4) {
    unint64_t v7 = 0;
  }
  if (v7 < result >> 10)
  {
    __break(1u);
    goto LABEL_19;
  }
  unint64_t v11 = result;
  if (result < 0x400)
  {
    char v12 = 0;
    return sub_24A496820(result, a2, a3, a4, v12) & 0xFFFFFFFFFFFFF8FFLL | 0x300;
  }
  if (result >> 10 >= v7)
  {
    char v12 = 1;
    return sub_24A496820(result, a2, a3, a4, v12) & 0xFFFFFFFFFFFFF8FFLL | 0x300;
  }
  long long v23 = *(_OWORD *)(v4 + 8);
  uint64_t v22 = *(void *)(v4 + 24);
  uint64_t v24 = *(void *)(v4 + 40);
  uint64_t result = sub_24A496820(result, a2, a3, a4, 0);
  if ((v11 & 0x100) != 0) {
    return sub_24A496820(v11, a2, a3, a4, 0);
  }
  if (v15 == 1)
  {
LABEL_20:
    __break(1u);
    return result;
  }
  if (v13 != v24)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  unint64_t v16 = v14;
  unint64_t v17 = result;
  if (v15)
  {
    uint64_t v18 = v15 + 24 * ((v14 >> ((4 * *(unsigned char *)(v15 + 18) + 8) & 0x3C)) & 0xF);
    unint64_t v20 = *(void *)(v18 + 24);
    unint64_t v19 = *(void *)(v18 + 32);
    swift_bridgeObjectRetain();
  }
  else
  {
    _OWORD v25[3] = v5;
    long long v26 = v23;
    uint64_t v27 = v22;
    uint64_t v28 = v6;
    swift_unknownObjectRetain();
    sub_24A4895D4(v16, (uint64_t)v25);
    sub_24A496BE8(v4);
    unint64_t v20 = v25[0];
    unint64_t v19 = v25[1];
  }
  unint64_t v21 = sub_24A497020((16 * (int)v17) & 0x4000 | ((unint64_t)v17 << 16) | (v17 >> 8) & 3 | 4, v20, v19);
  swift_bridgeObjectRelease();
  return BYTE2(v21) | (((v21 >> 16) - v17 + (v17 >> 11)) << 11) | 0x100;
}

unint64_t sub_24A496820(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = (uint64_t)v5;
  unint64_t v7 = result;
  if (a4 == 1) {
    goto LABEL_8;
  }
  uint64_t v8 = a4;
  uint64_t v27 = a2;
  unint64_t v28 = a3;
  uint64_t v29 = a4;
  long long v11 = v5[2];
  long long v34 = v5[1];
  long long v35 = v11;
  long long v33 = *v5;
  if (*((void *)&v11 + 1) != a2)
  {
LABEL_8:
    char v15 = a5 & ((result & 0x400) == 0);
    long long v16 = v5[1];
    long long v30 = *v5;
    long long v31 = v16;
    long long v32 = v5[2];
    sub_24A497498((uint64_t)v5);
    sub_24A496E3C(v7 >> 11, v15);
    uint64_t v18 = v17;
    uint64_t result = sub_24A496BE8(v6);
    if (v18 < 0)
    {
      __break(1u);
      goto LABEL_36;
    }
    return v7 & 0xFFFFFFFFFFFFFC00 | v18;
  }
  if (a5)
  {
    if (result < 0x800 || (result & 0x4FF) != 0) {
      return v7;
    }
    long long v12 = v33;
    long long v13 = v34;
    uint64_t v25 = v35;
    if ((void)v33)
    {
      unint64_t v14 = *(unsigned __int8 *)(v33 + 18);
      uint64_t result = swift_unknownObjectRetain();
    }
    else
    {
      unint64_t v14 = 0;
    }
    if (v14 < a3)
    {
      if (v8)
      {
        char v19 = (4 * *(unsigned char *)(v8 + 18) + 8) & 0x3C;
        if (((a3 >> v19) & 0xF) != 0)
        {
          unint64_t v20 = ((((a3 >> v19) & 0xF) - 1) << v19) | ((-15 << v19) - 1) & a3;
          sub_24A496BE8(v6);
          goto LABEL_24;
        }
      }
      long long v30 = v33;
      long long v31 = v34;
      *(void *)&long long v32 = v35;
      swift_unknownObjectRetain();
      char v21 = sub_24A48FB44((uint64_t)&v27);
      sub_24A496BE8(v6);
      uint64_t result = sub_24A496BE8(v6);
      if ((v21 & 1) == 0) {
        goto LABEL_38;
      }
      if (v27 == a2)
      {
        unint64_t v20 = v28;
        uint64_t v8 = v29;
        if (!v29)
        {
          long long v36 = v12;
          long long v37 = v13;
          uint64_t v38 = v25;
          swift_unknownObjectRetain();
          sub_24A4895D4(v20, (uint64_t)v26);
          sub_24A496BE8(v6);
          unsigned int v22 = v26[16];
          swift_bridgeObjectRelease();
          return v7 & 0xFFFFFFFFFFFFFF00 | v22;
        }
LABEL_24:
        unsigned int v22 = *(unsigned __int8 *)(v8 + 24 * ((v20 >> ((4 * *(unsigned char *)(v8 + 18) + 8) & 0x3C)) & 0xF) + 40);
        return v7 & 0xFFFFFFFFFFFFFF00 | v22;
      }
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (!(void)v33 || (uint64_t)(result >> 11) >= (uint64_t)v35) {
    return v7;
  }
  if (!a4)
  {
    long long v30 = v33;
    long long v31 = v34;
    *(void *)&long long v32 = v35;
    swift_unknownObjectRetain();
    sub_24A4895D4(a3, (uint64_t)&v36);
    sub_24A496BE8((uint64_t)v5);
    int v23 = v37;
    swift_bridgeObjectRelease();
    if (v23 == v7) {
      goto LABEL_26;
    }
    return v7;
  }
  if (*(unsigned __int8 *)(a4 + 24 * ((a3 >> ((4 * *(unsigned char *)(a4 + 18) + 8) & 0x3C)) & 0xF) + 40) != result) {
    return v7;
  }
LABEL_26:
  swift_unknownObjectRetain();
  uint64_t result = sub_24A498214();
  if (result > a3)
  {
    if (v8 && ((a3 >> ((4 * *(unsigned char *)(v8 + 18) + 8) & 0x3C)) & 0xF) + 1 < *(unsigned __int16 *)(v8 + 16))
    {
      sub_24A496BE8(v6);
      v7 &= 0xFFFFFFFFFFFFFF00;
    }
    else
    {
      long long v36 = v33;
      long long v37 = v34;
      uint64_t v38 = v35;
      swift_unknownObjectRetain();
      char v24 = sub_24A498278((uint64_t)&v27);
      sub_24A496BE8(v6);
      if ((v24 & 1) == 0) {
        sub_24A498214();
      }
      sub_24A496BE8(v6);
      v7 &= 0xFFFFFFFFFFFFFF00;
    }
    return v7;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_24A496BE8(uint64_t a1)
{
  return a1;
}

unint64_t *sub_24A496C14(unint64_t *result, unint64_t *a2, uint64_t a3, unint64_t a4, unsigned __int8 a5)
{
  unint64_t v9 = result;
  unint64_t v10 = *result;
  int v11 = (a4 & 0x1000000000000000) == 0 || (a3 & 0x800000000000000) != 0;
  uint64_t v12 = 4 << v11;
  uint64_t v13 = *result & 0xC;
  unint64_t v14 = *result;
  if (v13 == 4 << v11) {
    goto LABEL_23;
  }
  if ((a4 & 0x1000000000000000) != 0) {
    goto LABEL_24;
  }
LABEL_6:
  uint64_t result = (unint64_t *)(v14 >> 16);
  unint64_t v15 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    while (1)
    {
      unint64_t v20 = (unint64_t)result + v15;
      if (!__OFADD__(result, v15)) {
        break;
      }
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      uint64_t result = (unint64_t *)sub_24A4DFD84(v10, a3, a4);
      unint64_t v10 = (unint64_t)result;
      if ((a4 & 0x1000000000000000) != 0) {
        goto LABEL_44;
      }
LABEL_17:
      uint64_t v22 = v15 + (v10 >> 16);
      if (__OFADD__(v15, v10 >> 16))
      {
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }
      if (v22 < 0) {
        goto LABEL_48;
      }
      unint64_t v23 = HIBYTE(a4) & 0xF;
      if ((a4 & 0x2000000000000000) == 0) {
        unint64_t v23 = a3 & 0xFFFFFFFFFFFFLL;
      }
      if (v23 >= v22) {
        goto LABEL_36;
      }
      __break(1u);
LABEL_23:
      uint64_t result = (unint64_t *)sub_24A4DFD84(v10, a3, a4);
      unint64_t v14 = (unint64_t)result;
      if ((a4 & 0x1000000000000000) == 0) {
        goto LABEL_6;
      }
LABEL_24:
      unint64_t v24 = a3 & 0xFFFFFFFFFFFFLL;
      if ((a4 & 0x2000000000000000) != 0) {
        unint64_t v24 = HIBYTE(a4) & 0xF;
      }
      if (v24 < v14 >> 16) {
        goto LABEL_51;
      }
      uint64_t result = (unint64_t *)sub_24A5BB750();
      unint64_t v15 = *a2;
      if ((*a2 & 0x8000000000000000) == 0) {
        goto LABEL_7;
      }
    }
    if ((v20 & 0x8000000000000000) != 0)
    {
      int v21 = 0;
      *unint64_t v9 = 15;
      goto LABEL_46;
    }
    if (v13 == v12)
    {
      uint64_t result = (unint64_t *)sub_24A4DFD84(v10, a3, a4);
      unint64_t v10 = (unint64_t)result;
      if ((a4 & 0x1000000000000000) != 0) {
        goto LABEL_44;
      }
    }
    else if ((a4 & 0x1000000000000000) != 0)
    {
      goto LABEL_44;
    }
    uint64_t v22 = v15 + (v10 >> 16);
    if (v22 < 0) {
      goto LABEL_49;
    }
    unint64_t v25 = HIBYTE(a4) & 0xF;
    if ((a4 & 0x2000000000000000) == 0) {
      unint64_t v25 = a3 & 0xFFFFFFFFFFFFLL;
    }
    if (v25 >= v22)
    {
LABEL_36:
      uint64_t v26 = (v22 << 16) | 4;
      goto LABEL_45;
    }
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
  }
  else
  {
LABEL_7:
    uint64_t v16 = a5 - (void)result;
    if (__OFSUB__(a5, result))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v16 >= (uint64_t)v15)
    {
      if (v13 == v12) {
        goto LABEL_41;
      }
      if ((a4 & 0x1000000000000000) == 0) {
        goto LABEL_17;
      }
LABEL_44:
      uint64_t v26 = MEMORY[0x24C5C6A60](v10, v15, a3, a4);
LABEL_45:
      unint64_t v20 = 0;
      *unint64_t v9 = v26;
      int v21 = 1;
    }
    else
    {
      uint64_t v17 = HIBYTE(a4) & 0xF;
      if ((a4 & 0x2000000000000000) == 0) {
        uint64_t v17 = a3;
      }
      uint64_t v18 = 11;
      if (v11) {
        uint64_t v18 = 7;
      }
      *unint64_t v9 = v18 | (v17 << 16);
      BOOL v19 = __OFSUB__(v15, v16);
      unint64_t v20 = v15 - v16;
      if (v19) {
        goto LABEL_40;
      }
      int v21 = 0;
    }
LABEL_46:
    *a2 = v20;
    return (unint64_t *)(((v15 >> 55) & 0x100 | v21) ^ 0x100);
  }
  return result;
}

uint64_t sub_24A496E3C(uint64_t result, char a2)
{
  uint64_t v3 = *v2;
  if (*v2) {
    uint64_t v4 = v2[4];
  }
  else {
    uint64_t v4 = 0;
  }
  if ((result & 0x8000000000000000) == 0)
  {
    uint64_t v5 = result;
    if (v4 >= result)
    {
      uint64_t v6 = v2[5];
      if (v3 && *(_WORD *)(v3 + 16) && (v2[4] > result) | a2 & 1)
      {
        uint64_t v17 = result;
        uint64_t v8 = *(unsigned __int8 *)(v3 + 18);
        if (*(unsigned char *)(v3 + 18))
        {
          BOOL v9 = (a2 & 1) == 0;
          uint64_t result = swift_unknownObjectRetain();
          while (1)
          {
            uint64_t v11 = *(unsigned __int16 *)(v3 + 16);
            if (*(_WORD *)(v3 + 16)) {
              break;
            }
            uint64_t v14 = 0;
LABEL_21:
            if (v5) {
              goto LABEL_35;
            }
            if (a2)
            {
              if (!*(_WORD *)(v3 + 16)) {
                goto LABEL_34;
              }
              --v11;
              uint64_t v5 = v14;
            }
            else
            {
              uint64_t v5 = 0;
            }
LABEL_12:
            char v10 = (4 * *(unsigned char *)(v3 + 18) + 8) & 0x3C;
            uint64_t v8 = ((-15 << v10) - 1) & v8 | (v11 << v10);
            uint64_t v3 = *(void *)(v3 + 24 + 40 * v11);
            swift_unknownObjectRetain();
            uint64_t result = swift_unknownObjectRelease();
            if (!*(unsigned char *)(v3 + 18))
            {
              uint64_t v17 = v5;
              goto LABEL_29;
            }
          }
          uint64_t v12 = 0;
          uint64_t v13 = (uint64_t *)(v3 + 56);
          while (1)
          {
            uint64_t v15 = *v13;
            v13 += 5;
            uint64_t v14 = v15;
            uint64_t v16 = v5 - v15;
            if (__OFSUB__(v5, v15)) {
              break;
            }
            if (__OFADD__(v16, v9)) {
              goto LABEL_33;
            }
            if (v16 + v9 < 1)
            {
              uint64_t v11 = v12;
              goto LABEL_12;
            }
            ++v12;
            uint64_t v5 = v16;
            if (v11 == v12)
            {
              uint64_t v5 = v16;
              goto LABEL_21;
            }
          }
          __break(1u);
LABEL_33:
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
          goto LABEL_36;
        }
        swift_unknownObjectRetain();
LABEL_29:
        uint64_t result = (uint64_t)sub_24A4970C0((_WORD *)(v3 + 16), v3 + 24, &v17, a2 & 1);
        if (result < 0) {
          goto LABEL_37;
        }
        swift_unknownObjectRelease();
      }
      else
      {
        sub_24A498214();
      }
      return v6;
    }
  }
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

unint64_t sub_24A497020(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5) {
    goto LABEL_9;
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 < result >> 16)
  {
    __break(1u);
LABEL_9:
    uint64_t result = sub_24A497138(result, a2, a3);
    if ((result & 1) == 0) {
      return result & 0xC | sub_24A4971A8(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
    }
  }
  return result;
}

_WORD *sub_24A4970C0(_WORD *result, uint64_t a2, uint64_t *a3, int a4)
{
  unint64_t v4 = (unsigned __int16)*result;
  uint64_t v5 = *a3;
  if (*result)
  {
    uint64_t result = 0;
    unint64_t v6 = (unsigned __int8 *)(a2 + 16);
    uint64_t v7 = ~a4 & 1;
    uint64_t v8 = *a3;
    while (1)
    {
      unsigned int v9 = *v6;
      v6 += 24;
      uint64_t v5 = v8 - v9;
      if (__OFSUB__(v8, v9)) {
        break;
      }
      if (__OFADD__(v5, v7)) {
        goto LABEL_11;
      }
      if (v5 + v7 < 1) {
        return result;
      }
      uint64_t result = (_WORD *)((char *)result + 1);
      uint64_t v8 = v5;
      if ((_WORD *)v4 == result) {
        goto LABEL_7;
      }
    }
    __break(1u);
LABEL_11:
    __break(1u);
  }
  else
  {
LABEL_7:
    if (!v5) {
      return (_WORD *)(v4 - (a4 & 1));
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_24A497138(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 0xC) == 4 << v5) {
    uint64_t result = sub_24A4DFD84(result, a2, a3);
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 < result >> 16) {
    __break(1u);
  }
  return result;
}

unint64_t sub_24A4971A8(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000;
  }
  else
  {
    unint64_t v5 = result >> 16;
    if ((a3 & 0x1000000000000000) == 0)
    {
      v13[2] = v3;
      long long v13[3] = v4;
      if ((a3 & 0x2000000000000000) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((unsigned char *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            unint64_t v7 = v5 - 1;
            int v11 = *((unsigned char *)&v12 + v5-- + 7) & 0xC0;
          }
          while (v11 == 128);
          return v7 << 16;
        }
        goto LABEL_14;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (v5 == (a2 & 0xFFFFFFFFFFFFLL)) {
          goto LABEL_14;
        }
      }
      else
      {
        unint64_t v12 = result >> 16;
        uint64_t v6 = sub_24A5BC120();
        unint64_t v5 = v12;
        if (v12 == v10) {
          goto LABEL_14;
        }
      }
      if ((*(unsigned char *)(v6 + v5) & 0xC0) == 0x80)
      {
        do
        {
          unint64_t v7 = v5 - 1;
          int v8 = *(unsigned char *)(v6 - 1 + v5--) & 0xC0;
        }
        while (v8 == 128);
        return v7 << 16;
      }
LABEL_14:
      unint64_t v7 = v5;
      return v7 << 16;
    }
    uint64_t v9 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0) {
      uint64_t v9 = a2 & 0xFFFFFFFFFFFFLL;
    }
    if (v5 != v9)
    {
      return MEMORY[0x270F9E998]();
    }
  }
  return result;
}

__n128 BigString.UnicodeScalarView.subscript.getter@<Q0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  __n128 v23 = *(__n128 *)(v2 + 16);
  long long v25 = *(_OWORD *)(v2 + 32);
  uint64_t v5 = *(void *)(v2 + 32);
  uint64_t v6 = *(void *)(v2 + 40);
  unint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  unint64_t v9 = a1[2];
  uint64_t v10 = a1[3];
  v26[0] = *(_OWORD *)v2;
  long long v24 = v26[0];
  v26[1] = v23;
  v26[2] = v25;
  sub_24A4974C4((uint64_t)v26, (uint64_t)v27);
  sub_24A497498((uint64_t)v27);
  unint64_t v11 = sub_24A4965FC(v7, v8, v9, v10);
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  unint64_t v18 = sub_24A4965FC(a1[4], a1[5], a1[6], a1[7]);
  __n128 result = v23;
  *(_OWORD *)a2 = v24;
  *(__n128 *)(a2 + 16) = v23;
  *(void *)(a2 + 32) = v5;
  *(void *)(a2 + 40) = v6;
  *(void *)(a2 + 48) = v11;
  *(void *)(a2 + 56) = v13;
  *(void *)(a2 + 64) = v15;
  *(void *)(a2 + 72) = v17;
  *(void *)(a2 + 80) = v18;
  *(void *)(a2 + 88) = v20;
  *(void *)(a2 + 96) = v21;
  *(void *)(a2 + 104) = v22;
  return result;
}

__n128 BigString.utf8.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 40);
  __n128 v6 = *(__n128 *)(v1 + 16);
  v8[0] = *(_OWORD *)v1;
  long long v7 = v8[0];
  v8[1] = v6;
  v8[2] = *(_OWORD *)(v1 + 32);
  sub_24A4974C4((uint64_t)v8, (uint64_t)v9);
  sub_24A497498((uint64_t)v9);
  __n128 result = v6;
  *(_OWORD *)a1 = v7;
  *(__n128 *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = v4;
  return result;
}

__n128 BigString.unicodeScalars.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 40);
  __n128 v6 = *(__n128 *)(v1 + 16);
  v8[0] = *(_OWORD *)v1;
  long long v7 = v8[0];
  v8[1] = v6;
  v8[2] = *(_OWORD *)(v1 + 32);
  sub_24A4974C4((uint64_t)v8, (uint64_t)v9);
  sub_24A497498((uint64_t)v9);
  __n128 result = v6;
  *(_OWORD *)a1 = v7;
  *(__n128 *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = v4;
  return result;
}

uint64_t sub_24A497498(uint64_t a1)
{
  return a1;
}

uint64_t sub_24A4974C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(qword_26B177E60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_24A49752C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X8>)
{
  unint64_t result = sub_24A497C80(v2[4], v2[1], a1, v2[2], v2[3]);
  unint64_t v6 = 0;
  if (v7)
  {
LABEL_64:
    unint64_t v8 = 0;
    unint64_t v9 = 0;
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    uint64_t v13 = 0;
    goto LABEL_67;
  }
  unint64_t v8 = 0;
  unint64_t v9 = 0;
  unint64_t v10 = 0;
  uint64_t v11 = 0;
  unint64_t v12 = 0;
  uint64_t v13 = 0;
  if ((result ^ v5) < 0x4000)
  {
LABEL_67:
    *(void *)a2 = v6;
    *(void *)(a2 + 8) = v8;
    *(void *)(a2 + 16) = v9;
    *(void *)(a2 + 24) = v10;
    *(void *)(a2 + 32) = v11;
    *(void *)(a2 + 40) = v12;
    *(void *)(a2 + 48) = v13;
    return result;
  }
  v2[4] = v5;
  unint64_t v6 = sub_24A5BBEC0();
  unint64_t v8 = v14;
  unint64_t v9 = v15;
  unint64_t v10 = v16;
  unint64_t v12 = sub_24A4913AC(v6, v14, v15, v16);
  _s9_IngesterVMa();
  unint64_t result = sub_24A497DC4(v6, v8, v9, v10);
  if (v18)
  {
    uint64_t v11 = 0;
    uint64_t v13 = v12;
    goto LABEL_67;
  }
  if (v8 >> 14 < v17 >> 14) {
    goto LABEL_77;
  }
  unint64_t v55 = a2;
  unint64_t v19 = sub_24A5BBEC0();
  a2 = v20;
  unint64_t v22 = v21;
  unint64_t v24 = v23;
  unint64_t result = swift_bridgeObjectRelease();
  unint64_t v6 = 0;
  uint64_t v11 = 1;
  while (1)
  {
    if ((v24 & 0x1000000000000000) != 0)
    {
      unint64_t v33 = a2 >> 14;
      unint64_t v54 = v19 >> 14;
      if (v19 >> 14 >= a2 >> 14) {
        goto LABEL_66;
      }
      uint64_t v40 = 4 << ((v22 & 0x800000000000000) != 0);
      uint64_t v41 = HIBYTE(v24) & 0xF;
      if ((v24 & 0x2000000000000000) == 0) {
        uint64_t v41 = v22 & 0xFFFFFFFFFFFFLL;
      }
      unint64_t v53 = v41;
      unint64_t v42 = v19;
      unint64_t v43 = v19 >> 14;
      while (1)
      {
        unint64_t v44 = v42 & 0xC;
        BOOL v45 = v44 == v40 || (v42 & 1) == 0;
        unint64_t v52 = v43;
        if (v45)
        {
          unint64_t v46 = v42;
          if (v44 == v40)
          {
            unint64_t result = sub_24A4DFD84(v42, v22, v24);
            unint64_t v44 = v42 & 0xC;
            unint64_t v46 = result;
          }
          if (v53 <= v46 >> 16) {
            goto LABEL_78;
          }
          unint64_t v51 = v44;
          if ((v46 & 1) == 0) {
            sub_24A4971A8(v46, v22, v24);
          }
          unint64_t v47 = sub_24A5BB5D0();
          unint64_t result = v42;
          if (v51 == 4 << ((v22 & 0x800000000000000) != 0)) {
            unint64_t result = sub_24A4DFD84(v42, v22, v24);
          }
          if (result >> 14 < v54 || result >> 14 >= v33) {
            goto LABEL_79;
          }
          if ((result & 1) == 0) {
            sub_24A4971A8(result, v22, v24);
          }
        }
        else
        {
          if (v53 <= v42 >> 16) {
            goto LABEL_80;
          }
          unint64_t result = sub_24A5BB5D0();
          if (v42 >> 14 < v54) {
            goto LABEL_81;
          }
          unint64_t v47 = result;
          unint64_t result = v42;
          if (v42 >> 14 >= v33) {
            goto LABEL_81;
          }
        }
        sub_24A5BC060();
        unint64_t result = sub_24A5BC760();
        unint64_t v34 = v47 >> 14;
        if (result) {
          break;
        }
        unint64_t v42 = v47;
        unint64_t v43 = v47 >> 14;
        uint64_t v40 = 4 << ((v22 & 0x800000000000000) != 0);
        if (v34 >= v33) {
          goto LABEL_66;
        }
      }
      if (v34 < v52)
      {
        __break(1u);
        goto LABEL_64;
      }
      goto LABEL_25;
    }
    if ((v24 & 0x2000000000000000) != 0)
    {
      v56[0] = v22;
      v56[1] = v24 & 0xFFFFFFFFFFFFFFLL;
      long long v25 = v56;
    }
    else if ((v22 & 0x1000000000000000) != 0)
    {
      long long v25 = (void *)((v24 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      long long v25 = (void *)sub_24A5BC120();
    }
    uint64_t v26 = sub_24A497AA0((uint64_t)v25, v19, a2, v22, v24);
    uint64_t v28 = v27;
    char v57 = v29 & 1;
    if (v29)
    {
LABEL_66:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      unint64_t v12 = sub_24A5BBE80();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      uint64_t v13 = sub_24A5BBE80();
      swift_bridgeObjectRelease();
      unint64_t result = sub_24A5BBEC0();
      unint64_t v6 = result;
      unint64_t v8 = v48;
      unint64_t v9 = v49;
      unint64_t v10 = v50;
      a2 = v55;
      goto LABEL_67;
    }
    unint64_t result = v19;
    if ((v19 & 0xC) != 8)
    {
      unint64_t v30 = v26 + (v19 >> 16);
      if (__OFADD__(v26, v19 >> 16)) {
        break;
      }
      goto LABEL_14;
    }
    unint64_t result = sub_24A4DFD84(v19, v22, v24);
    unint64_t v30 = v26 + (result >> 16);
    if (__OFADD__(v26, result >> 16)) {
      break;
    }
LABEL_14:
    if ((v30 & 0x8000000000000000) != 0) {
      goto LABEL_69;
    }
    if ((v24 & 0x2000000000000000) != 0) {
      unint64_t v31 = HIBYTE(v24) & 0xF;
    }
    else {
      unint64_t v31 = v22 & 0xFFFFFFFFFFFFLL;
    }
    if (v31 < v30) {
      goto LABEL_70;
    }
    unint64_t result = v19;
    if ((v19 & 0xC) == 8)
    {
      unint64_t result = sub_24A4DFD84(v19, v22, v24);
      unint64_t v32 = v28 + (result >> 16);
      if (__OFADD__(v28, result >> 16)) {
        goto LABEL_71;
      }
    }
    else
    {
      unint64_t v32 = v28 + (v19 >> 16);
      if (__OFADD__(v28, v19 >> 16)) {
        goto LABEL_71;
      }
    }
    if ((v32 & 0x8000000000000000) != 0) {
      goto LABEL_72;
    }
    if (v31 < v32) {
      goto LABEL_73;
    }
    if (v32 < v30) {
      goto LABEL_74;
    }
    unint64_t v33 = a2 >> 14;
    unint64_t v34 = 4 * v32;
LABEL_25:
    if (v33 < v34) {
      goto LABEL_75;
    }
    unint64_t v19 = sub_24A5BBEC0();
    a2 = v35;
    unint64_t v22 = v36;
    unint64_t v38 = v37;
    unint64_t result = swift_bridgeObjectRelease();
    unint64_t v24 = v38;
    if (__OFADD__(v11++, 1)) {
      goto LABEL_76;
    }
  }
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
  return result;
}

uint64_t sub_24A497AA0(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t v8 = a2;
  uint64_t v9 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0) {
    LOBYTE(v9) = 1;
  }
  uint64_t v10 = 4 << v9;
  unint64_t v11 = a2 & 0xC;
  if (v11 == 4 << v9)
  {
    unint64_t result = sub_24A4DFD84(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      int64_t v12 = a2 >> 16;
      if (v11 != v10) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  unint64_t v13 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0) {
    unint64_t v13 = HIBYTE(a5) & 0xF;
  }
  if (v13 < a2 >> 16) {
    goto LABEL_28;
  }
  unint64_t result = sub_24A5BB750();
  int64_t v12 = result;
  if (v11 == v10)
  {
LABEL_14:
    unint64_t result = sub_24A4DFD84(v8, a4, a5);
    unint64_t v8 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v10)
  {
    unint64_t result = sub_24A4DFD84(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0) {
      goto LABEL_8;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    unint64_t result = (a3 >> 16) - (v8 >> 16);
LABEL_21:
    if (__OFADD__(v12, result))
    {
      __break(1u);
    }
    else if (v12 + result >= v12)
    {
      return sub_24A5BC750();
    }
    __break(1u);
    goto LABEL_26;
  }
  unint64_t v14 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0) {
    unint64_t v14 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (v14 < v8 >> 16)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v14 >= a3 >> 16)
  {
    unint64_t result = sub_24A5BB750();
    goto LABEL_21;
  }
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t _s9_IngesterVMa()
{
  uint64_t result = qword_26B177DD0;
  if (!qword_26B177DD0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_24A497C80(unint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  if (result >> 14 >= a2 >> 14) {
    return 0;
  }
  unint64_t v9 = a2;
  unint64_t v5 = result;
  uint64_t v10 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0) {
    LOBYTE(v10) = 1;
  }
  if ((result & 0xC) != 4 << v10)
  {
    if ((a5 & 0x1000000000000000) == 0) {
      goto LABEL_7;
    }
LABEL_22:
    uint64_t v15 = sub_24A5BB730();
    if ((v16 & 1) == 0) {
      unint64_t v9 = v15;
    }
    goto LABEL_19;
  }
  uint64_t result = sub_24A4DFD84(result, a4, a5);
  if ((a5 & 0x1000000000000000) != 0) {
    goto LABEL_22;
  }
LABEL_7:
  unint64_t v11 = result >> 16;
  int64_t v12 = (result >> 16) + a3;
  if (__OFADD__(result >> 16, a3))
  {
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  unint64_t v13 = v9 >> 16;
  if (a3 < 0)
  {
    if (v11 >= v13 && v12 < (uint64_t)v13) {
      goto LABEL_19;
    }
  }
  else if (v13 >= v11 && (uint64_t)v13 < v12)
  {
    goto LABEL_19;
  }
  if (v12 < 0) {
    goto LABEL_26;
  }
  unint64_t v14 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0) {
    unint64_t v14 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (v14 >= v12)
  {
    unint64_t v9 = (v12 << 16) | 4;
LABEL_19:
    sub_24A497020(v9, a4, a5);
    return v5;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_24A497DC4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  sub_24A498004(a1, a2, a3, a4);
  if ((v8 & 0x100) == 0)
  {
    if (v8) {
      return 0;
    }
    swift_bridgeObjectRetain();
    unint64_t v9 = sub_24A5BBE70();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    unint64_t v10 = sub_24A5BBE70();
    swift_bridgeObjectRelease();
    if (v10 >> 14 >= v9 >> 14) {
      return v9;
    }
    __break(1u);
  }
  unint64_t v11 = a1 >> 14;
  unint64_t v12 = a2 >> 14;
  if (a1 >> 14 >= a2 >> 14) {
    return 0;
  }
  unint64_t v9 = a1;
  while (1)
  {
    swift_bridgeObjectRetain();
    unint64_t v13 = sub_24A5BBDE0();
    swift_bridgeObjectRelease();
    sub_24A48F8EC(v9, a1, a2, a3, a4);
    if ((a4 & 0x1000000000000000) != 0)
    {
      sub_24A5BC060();
    }
    else if ((a4 & 0x2000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      sub_24A5BC130();
      swift_bridgeObjectRelease();
    }
    else
    {
      if ((a3 & 0x1000000000000000) == 0) {
        sub_24A5BC120();
      }
      swift_bridgeObjectRetain();
      sub_24A5BC130();
      swift_bridgeObjectRelease();
      unint64_t v12 = a2 >> 14;
    }
    uint64_t result = sub_24A5BC760();
    unint64_t v15 = v13 >> 14;
    if (result) {
      break;
    }
    unint64_t v9 = v13;
    unint64_t v11 = v13 >> 14;
    if (v15 >= v12) {
      return 0;
    }
  }
  if (v15 >= v11) {
    return v9;
  }
  __break(1u);
  return result;
}

uint64_t sub_24A498004(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t result = 0;
    goto LABEL_8;
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v12[0] = a3;
    v12[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v9 = v12;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    unint64_t v9 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    unint64_t v9 = (void *)sub_24A5BC120();
  }
  uint64_t result = sub_24A497AA0((uint64_t)v9, a1, a2, a3, a4);
  if (!v4)
  {
    char v13 = v11 & 1;
LABEL_8:
    LOBYTE(v12[0]) = (a4 & 0x1000000000000000) != 0;
  }
  return result;
}

uint64_t sub_24A4980DC(uint64_t result, unint64_t a2, uint64_t a3)
{
  v15[0] = result;
  v15[1] = a2;
  v15[2] = a3;
  if (v3[5] != result)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v4 = (uint64_t)v3;
  uint64_t v7 = result;
  uint64_t v8 = *v3;
  uint64_t v9 = v3[1];
  uint64_t v10 = v3[2];
  uint64_t v11 = v3[3];
  uint64_t v12 = v3[4];
  swift_unknownObjectRetain();
  unint64_t v13 = sub_24A498214();
  uint64_t result = sub_24A496BE8(v4);
  if (v13 <= a2)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  if (!a3 || ((a2 >> ((4 * *(unsigned char *)(a3 + 18) + 8) & 0x3C)) & 0xF) + 1 >= *(unsigned __int16 *)(a3 + 16))
  {
    v15[3] = v8;
    v15[4] = v9;
    v15[5] = v10;
    v15[6] = v11;
    v15[7] = v12;
    swift_unknownObjectRetain();
    char v14 = sub_24A498278((uint64_t)v15);
    sub_24A496BE8(v4);
    if (v14) {
      return v15[0];
    }
    else {
      sub_24A498214();
    }
  }
  return v7;
}

unint64_t sub_24A498214()
{
  unint64_t result = *v0;
  if (*v0)
  {
    int v2 = *(unsigned __int8 *)(result + 18);
    uint64_t v3 = *(unsigned __int16 *)(result + 16);
    swift_unknownObjectRetain();
    sub_24A496BE8((uint64_t)v0);
    return ((-15 << ((4 * v2 + 8) & 0x3C)) - 1) & v2 | (unint64_t)(v3 << ((4 * v2 + 8) & 0x3C));
  }
  return result;
}

uint64_t sub_24A498278(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)v2;
  int v5 = *(unsigned __int8 *)(*(void *)v2 + 18);
  unint64_t v6 = *(void *)(a1 + 8);
  char v7 = (4 * v5 + 8) & 0x3C;
  unint64_t v11 = (v6 >> v7) & 0xF;
  if (v5)
  {
    sub_24A497498(v2);
    char v8 = sub_24A538E54(v4 + 24, (uint64_t *)&v11, a1, v4, v5);
    sub_24A496BE8(v2);
  }
  else
  {
    unint64_t v9 = ((v6 >> v7) & 0xF) + 1;
    if (v9 >= *(unsigned __int16 *)(v4 + 16))
    {
      char v8 = 0;
    }
    else
    {
      *(void *)(a1 + 8) = (v9 << v7) | ((-15 << v7) - 1) & v6;
      *(void *)(a1 + 16) = v4;
      char v8 = 1;
    }
  }
  return v8 & 1;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t BigString.endIndex.getter()
{
  if (*v0) {
    return (v0[4] << 11) | 0x300;
  }
  else {
    return 768;
  }
}

uint64_t BigString.startIndex.getter()
{
  return 768;
}

BOOL BigString.isEmpty.getter()
{
  return !*v0 || v0[4] == 0;
}

uint64_t sub_24A498430(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_24A49845C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t BigString.UTF8View.index(roundingDown:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_24A489E1C(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t))sub_24A489E5C, a6);
}

uint64_t BigString.UTF8View.index(after:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_24A489E1C(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t))sub_24A489ED0, a6);
}

uint64_t BigString.UTF8View.count.getter()
{
  if (*v0) {
    return v0[4];
  }
  else {
    return 0;
  }
}

uint64_t type metadata accessor for OrderedSet.SubSequence()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_24A498508(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s6_ChunkVwxx()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_24A498560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 24);
}

ValueMetadata *_s6_ChunkVMa()
{
  return &_s6_ChunkVN;
}

uint64_t type metadata accessor for Rope._Storage()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for Rope._Item()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for _RopeStorageHeader()
{
  return &type metadata for _RopeStorageHeader;
}

uint64_t BigString.UTF8View.endIndex.getter()
{
  if (*v0) {
    return (v0[4] << 11) | 0x300;
  }
  else {
    return 768;
  }
}

uint64_t _HashTable.Storage.__deallocating_deinit()
{
  return MEMORY[0x270FA0228](v0, 32, 7);
}

uint64_t BigString.UTF8View.index(before:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_24A489E1C(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t))sub_24A48A10C, a6);
}

uint64_t BigString.UTF8View.startIndex.getter()
{
  return 768;
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

ValueMetadata *_s7SummaryVMa()
{
  return &_s7SummaryVN;
}

uint64_t type metadata accessor for Rope._Node()
{
  return __swift_instantiateGenericMetadata();
}

void *sub_24A498680()
{
  __swift_instantiateConcreteTypeFromMangledName(qword_26B177F50);
  uint64_t result = (void *)swift_allocObject();
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  _emptyDequeStorage = (uint64_t)result;
  return result;
}

ValueMetadata *type metadata accessor for _DequeBufferHeader()
{
  return &type metadata for _DequeBufferHeader;
}

uint64_t type metadata accessor for OrderedDictionary()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_24A4986E4(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_24A498724(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 32);
}

uint64_t sub_24A49872C()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for _DequeBuffer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_24A498788()
{
  return swift_initClassMetadata2();
}

ValueMetadata *type metadata accessor for _HashTable.Header()
{
  return &type metadata for _HashTable.Header;
}

ValueMetadata *type metadata accessor for _HashTable.Bucket()
{
  return &type metadata for _HashTable.Bucket;
}

unint64_t BitArray.init(_:)(unint64_t result)
{
  unint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    uint64_t v3 = result + 32;
    if (!*(void *)(result + 32)) {
      goto LABEL_7;
    }
    while (1)
    {
      uint64_t result = v2 << 6;
      if (v2 << 6 < 0) {
        break;
      }
      uint64_t result = _UnsafeBitSet.index(before:)(result, v3, v2);
      uint64_t v3 = result + 1;
      if (__OFADD__(result, 1)) {
        goto LABEL_18;
      }
      if ((v3 & 0x8000000000000000) == 0) {
        return v1;
      }
      __break(1u);
LABEL_7:
      if (v2 == 1) {
        goto LABEL_8;
      }
      if (!*(void *)(v1 + 40))
      {
        if (v2 == 2) {
          goto LABEL_8;
        }
        uint64_t v4 = 6;
        while (!*(void *)(v1 + 8 * v4))
        {
          uint64_t v5 = v4 - 3;
          if (__OFADD__(v4 - 4, 1)) {
            goto LABEL_19;
          }
          ++v4;
          if (v5 == v2) {
            goto LABEL_8;
          }
        }
      }
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }
  else
  {
LABEL_8:
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  return result;
}

void *sub_24A49889C(void *result)
{
  uint64_t v1 = result[2];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (uint64_t)(result + 4);
  if (result[4]) {
    goto LABEL_3;
  }
  if (v1 == 1) {
    return 0;
  }
  if (!result[5])
  {
    if (v1 == 2) {
      return 0;
    }
    for (uint64_t i = 6; !result[i]; ++i)
    {
      uint64_t v5 = i - 3;
      if (__OFADD__(i - 4, 1)) {
        goto LABEL_16;
      }
      uint64_t v3 = 0;
      if (v5 == v1) {
        return (void *)v3;
      }
    }
  }
LABEL_3:
  uint64_t result = (void *)(v1 << 6);
  if (((v1 << 6) & 0x8000000000000000) == 0) {
    return (void *)_UnsafeBitSet.index(before:)((unint64_t)result, v2, v1);
  }
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t BitArray.init<A>(bitPattern:)(uint64_t a1, uint64_t a2, int64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  unint64_t v9 = (char *)&v20 - v8;
  sub_24A5BBF40();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v12 = sub_24A498BD0((void (*)(char *, char *))sub_24A498BC4, 0, AssociatedTypeWitness, (uint64_t)&type metadata for _UnsafeBitSet._Word, MEMORY[0x263F8E628], *(void *)(*(void *)(AssociatedConformanceWitness + 8) + 8), MEMORY[0x263F8E658], v11);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  unint64_t v13 = sub_24A5BBF60();
  unint64_t v14 = v13;
  uint64_t v15 = *(void *)(v12 + 16);
  if (!v15)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
    if (!v14) {
      return v12;
    }
    goto LABEL_18;
  }
  if ((v13 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = -1;
    if (result) {
      goto LABEL_9;
    }
LABEL_16:
    uint64_t result = (uint64_t)sub_24A499D60(v12);
    uint64_t v12 = result;
    goto LABEL_9;
  }
  unint64_t v16 = v13 >> 6;
  BOOL v17 = (v13 & 0x3F) == 0 && v13 > 0x3F;
  a3 = v16 - v17;
  if (v15 != v16 - v17 + 1) {
    goto LABEL_14;
  }
  if (v17) {
    goto LABEL_15;
  }
  uint64_t v18 = ~(-1 << v13);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_16;
  }
LABEL_9:
  if (a3 < *(void *)(v12 + 16))
  {
    *(void *)(v12 + 8 * a3 + 32) &= v18;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
    return v12;
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

void *sub_24A498BC4@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_24A498BD0(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v28 = a5;
  uint64_t v29 = a8;
  unint64_t v38 = a1;
  uint64_t v39 = a2;
  uint64_t v27 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v40 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v33 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  uint64_t v10 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v26 - v11;
  MEMORY[0x270FA5388](v10);
  unint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v30 = *(void *)(v15 - 8);
  uint64_t v31 = v15;
  MEMORY[0x270FA5388](v15);
  BOOL v17 = (char *)&v26 - v16;
  uint64_t v18 = sub_24A5BBAF0();
  if (!v18) {
    return sub_24A5BB970();
  }
  uint64_t v19 = v18;
  uint64_t v43 = sub_24A5BB330();
  uint64_t v32 = sub_24A5BC210();
  sub_24A5BC180();
  uint64_t v36 = v8;
  uint64_t result = sub_24A5BBAD0();
  if (v19 < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v34 = (void (**)(char *))(v33 + 2);
    unint64_t v35 = v14;
    ++v33;
    while (1)
    {
      unint64_t v21 = (void (*)(char *, void))sub_24A5BBC20();
      unint64_t v22 = v12;
      unint64_t v23 = v12;
      uint64_t v24 = AssociatedTypeWitness;
      (*v34)(v22);
      v21(v42, 0);
      uint64_t v25 = v41;
      v38(v23, v40);
      if (v25) {
        break;
      }
      uint64_t v41 = 0;
      (*v33)(v23, v24);
      sub_24A5BC1C0();
      sub_24A5BBB50();
      --v19;
      uint64_t v12 = v23;
      if (!v19)
      {
        (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v31);
        return v43;
      }
    }
    (*v33)(v23, v24);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v31);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v27 + 32))(v29, v40, v28);
  }
  return result;
}

char *BitArray.init(minimumCapacity:)(char *result)
{
  if (((unint64_t)result & 0x8000000000000000) == 0) {
    return sub_24A499EB0(0, (unint64_t)(result + 63) >> 6, 0, MEMORY[0x263F8EE78]);
  }
  __break(1u);
  return result;
}

uint64_t static BinaryInteger._convert(_:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_24A5BC350();
  char v10 = sub_24A5BBF70();
  void v12[2] = a4;
  v12[3] = a5;
  _OWORD v12[4] = a1;
  return BitArray._foreachTwosComplementWordDownward(isSigned:body:)(v10 & 1, sub_24A499FAC, (uint64_t)v12, a2, a3) & 1;
}

uint64_t sub_24A4990A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = 64;
  sub_24A499FC8();
  sub_24A5BBF30();
  uint64_t v11 = a2;
  sub_24A49A24C();
  sub_24A5BBEF0();
  sub_24A5BBF20();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a4);
  return 1;
}

uint64_t BitArray._foreachTwosComplementWordDownward(isSigned:body:)(uint64_t result, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)(a4 + 16)) {
    return 0;
  }
  unint64_t v6 = a5 >> 6;
  uint64_t v7 = a5 & 0x3F;
  uint64_t v8 = (a5 > 0x3F) & (v7 == 0);
  if (a5 > 0x3F && v7 == 0) {
    uint64_t v7 = 64;
  }
  uint64_t v9 = v6 - v8;
  uint64_t v10 = a4 + 32;
  unint64_t v11 = *(void *)(a4 + 32 + 8 * (v6 - v8));
  if ((result & 1) == 0)
  {
LABEL_12:
    uint64_t v14 = 0;
    if (a2(v9, v11)) {
      goto LABEL_13;
    }
    return v14;
  }
  if (v7)
  {
    if ((v11 >> (v7 - 1)))
    {
      uint64_t v12 = -1 << v7;
      if (a5 > 0x3F && (a5 & 0x3F) == 0) {
        uint64_t v13 = 0;
      }
      else {
        uint64_t v13 = v12;
      }
      uint64_t v14 = 1;
      if ((a2(v9, v11 | v13) & 1) == 0) {
        return v14;
      }
LABEL_13:
      char v15 = 0;
      uint64_t v16 = v9 - 1;
      while (1)
      {
        if (v16 > 0)
        {
          uint64_t v17 = v16 - 1;
        }
        else
        {
          if ((v16 != 0) | v15 & 1) {
            return v14;
          }
          uint64_t v17 = 0;
          char v15 = 1;
        }
        char v18 = a2(v16, *(void *)(v10 + 8 * v16));
        uint64_t v16 = v17;
        if ((v18 & 1) == 0) {
          return v14;
        }
      }
    }
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

uint64_t BinaryInteger.init(truncatingIfNeeded:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  static BinaryInteger._convert(_:)(a5, a1, a2, a3, a4);
  return swift_bridgeObjectRelease();
}

uint64_t BinaryInteger.init(exactly:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v46 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v40 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v41 = AssociatedTypeWitness;
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v39 = (char *)&v36 - v10;
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v44 = *(void *)(a3 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  char v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v13);
  char v18 = (char *)&v36 - v17;
  MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v36 - v19;
  uint64_t v45 = a1;
  unint64_t v42 = a2;
  int v43 = static BinaryInteger._convert(_:)((uint64_t)&v36 - v19, a1, a2, a3, a4);
  if ((sub_24A5BBF70() & 1) == 0)
  {
    unint64_t v38 = v15;
    char v23 = sub_24A5BBF70();
    uint64_t v24 = sub_24A5BBF60();
    if ((v23 & 1) == 0)
    {
      if (v24 >= 64)
      {
        uint64_t v26 = v45;
        uint64_t v21 = v46;
        uint64_t v25 = v44;
        LOBYTE(v27) = v43;
        if (v43) {
          goto LABEL_13;
        }
        goto LABEL_17;
      }
      unint64_t v22 = (unint64_t)sub_24A5BBF50() >> 63;
      uint64_t v21 = v46;
      goto LABEL_11;
    }
    if (v24 <= 64)
    {
      swift_getAssociatedConformanceWitness();
      sub_24A5BC580();
      sub_24A5BC500();
      char v28 = sub_24A5BB420();
      uint64_t v25 = v44;
      unint64_t v37 = *(void (**)(char *, uint64_t))(v44 + 8);
      v37(v18, a3);
      uint64_t v29 = v38;
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v38, v20, a3);
      uint64_t v26 = v45;
      uint64_t v21 = v46;
      int v27 = v43;
      if (v28) {
        LODWORD(v30) = 1;
      }
      else {
        unint64_t v30 = (unint64_t)sub_24A5BBF50() >> 63;
      }
      v37(v29, a3);
      if ((v27 ^ v30)) {
        goto LABEL_13;
      }
      goto LABEL_17;
    }
    uint64_t v47 = 0;
    sub_24A499FC8();
    sub_24A5BBEF0();
    LODWORD(v22) = sub_24A5BB420();
    uint64_t v25 = v44;
    (*(void (**)(char *, uint64_t))(v44 + 8))(v18, a3);
    uint64_t v21 = v46;
LABEL_8:
    uint64_t v26 = v45;
    goto LABEL_12;
  }
  uint64_t v21 = v46;
  if (sub_24A5BBF60() >= 64)
  {
    uint64_t v47 = 0;
    sub_24A499FC8();
    sub_24A5BBEF0();
    LODWORD(v22) = sub_24A5BB420();
    uint64_t v25 = v44;
    (*(void (**)(char *, uint64_t))(v44 + 8))(v18, a3);
    goto LABEL_8;
  }
  unint64_t v22 = (unint64_t)sub_24A5BBF50() >> 63;
LABEL_11:
  uint64_t v25 = v44;
  uint64_t v26 = v45;
LABEL_12:
  LOBYTE(v27) = v43;
  if ((v43 ^ v22))
  {
LABEL_13:
    (*(void (**)(char *, uint64_t))(v25 + 8))(v20, a3);
    swift_bridgeObjectRelease();
LABEL_20:
    uint64_t v34 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56))(v21, v34, 1, a3);
  }
LABEL_17:
  uint64_t v31 = v39;
  sub_24A5BBF40();
  LOBYTE(v47) = 1;
  uint64_t v32 = sub_24A5BBF70();
  char v33 = MEMORY[0x270FA5388](v32);
  *(&v36 - 6) = a3;
  *(&v36 - 5) = a4;
  *(&v36 - 4) = (uint64_t)&v47;
  *(&v36 - 3) = (uint64_t)v31;
  *((unsigned char *)&v36 - 16) = v27 & 1;
  BitArray._foreachTwosComplementWordDownward(isSigned:body:)(v33 & 1, (uint64_t (*)(uint64_t, uint64_t))sub_24A499FB8, (uint64_t)(&v36 - 8), v26, v42);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v31, v41);
  if (v47 != 1)
  {
    (*(void (**)(char *, uint64_t))(v25 + 8))(v20, a3);
    goto LABEL_20;
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v25 + 32))(v21, v20, a3);
  uint64_t v34 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56))(v21, v34, 1, a3);
}

BOOL sub_24A499938(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4, uint64_t a5)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  if (sub_24A5BBAF0() <= a1)
  {
    uint64_t v11 = a5 << 63 >> 63;
  }
  else
  {
    uint64_t v14 = a1;
    uint64_t v9 = (void (*)(unsigned char *, void))sub_24A5BBC20();
    uint64_t v11 = *v10;
    v9(v13, 0);
  }
  BOOL result = v11 == a2;
  *a3 = result;
  return result;
}

uint64_t BinaryInteger.init(_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = sub_24A5BBD20();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)v16 - v12;
  BinaryInteger.init(exactly:)(a1, a2, a3, a4, (uint64_t)v16 - v12);
  uint64_t v14 = *(void *)(a3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, a3) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(a5, v13, a3);
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v16[0] = 0;
  v16[1] = 0xE000000000000000;
  sub_24A5BC070();
  sub_24A5BB6F0();
  sub_24A5BC7E0();
  sub_24A5BB6F0();
  swift_bridgeObjectRelease();
  sub_24A5BB6F0();
  uint64_t result = sub_24A5BC340();
  __break(1u);
  return result;
}

uint64_t variable initialization expression of Rope._root@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Rope._Node();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  return v3(a1, 1, 1, v2);
}

uint64_t variable initialization expression of BigString.Index._rope()
{
  return 0;
}

uint64_t variable initialization expression of _HashTable.BucketIterator._wrappedAround()
{
  return 0;
}

uint64_t variable initialization expression of _HashTreeStatistics.nodeCount()
{
  return 0;
}

uint64_t variable initialization expression of _HashTreeStatistics.collisionNodeCount()
{
  return 0;
}

uint64_t variable initialization expression of _HashTreeStatistics.itemCount()
{
  return 0;
}

uint64_t variable initialization expression of _HashTreeStatistics.collisionCount()
{
  return 0;
}

uint64_t variable initialization expression of _HashTreeStatistics._collisionChainCount()
{
  return 0;
}

uint64_t variable initialization expression of _HashTreeStatistics.maxItemDepth()
{
  return 0;
}

uint64_t variable initialization expression of _HashTreeStatistics._sumItemDepth()
{
  return 0;
}

uint64_t variable initialization expression of _HashTreeStatistics.capacityBytes()
{
  return 0;
}

uint64_t variable initialization expression of _HashTreeStatistics.itemBytes()
{
  return 0;
}

uint64_t variable initialization expression of _HashTreeStatistics.childBytes()
{
  return 0;
}

uint64_t variable initialization expression of _HashTreeStatistics.freeBytes()
{
  return 0;
}

uint64_t variable initialization expression of _HashTreeStatistics.grossBytes()
{
  return 0;
}

void *sub_24A499D4C(void *a1)
{
  return sub_24A499D74(0, a1[2], 0, a1);
}

char *sub_24A499D60(uint64_t a1)
{
  return sub_24A499EB0(0, *(void *)(a1 + 16), 0, (char *)a1);
}

void *sub_24A499D74(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B177930);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    _OWORD v10[2] = v8;
    long long v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[6 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 48 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_26B177938);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_24A499EB0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_26979AD20);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_24A499FAC(uint64_t a1, uint64_t a2)
{
  return sub_24A4990A8(a1, a2, *(void *)(v2 + 32), *(void *)(v2 + 16));
}

BOOL sub_24A499FB8(uint64_t a1, uint64_t a2)
{
  return sub_24A499938(a1, a2, *(unsigned char **)(v2 + 32), *(void *)(v2 + 40), *(unsigned __int8 *)(v2 + 48));
}

unint64_t sub_24A499FC8()
{
  unint64_t result = qword_26979ACF8;
  if (!qword_26979ACF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979ACF8);
  }
  return result;
}

char *sub_24A49A01C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26979AD00);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  size_t v15 = 16 * v8;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v15);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_24A49A114(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26979AD08);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    _OWORD v10[2] = v8;
    long long v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[5 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26979AD10);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

unint64_t sub_24A49A24C()
{
  unint64_t result = qword_26979AD18;
  if (!qword_26979AD18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979AD18);
  }
  return result;
}

uint64_t _HashNode.symmetricDifference<A>(_:_:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unsigned char *a9@<X8>, uint64_t a10)
{
  if (a5 < 1)
  {
    uint64_t v13 = _HashNode.mapValuesToVoid(copy:extraBytes:)(0, 0, a2, a3, a6, a8, a10);
    _HashNode.Builder.init(_:_:)(a1, v13, v14, a6, MEMORY[0x263F8EE60] + 8, a10, a9);
    goto LABEL_5;
  }
  if (a3 >= 1)
  {
    _HashNode._symmetricDifference<A>(_:_:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
LABEL_5:
    uint64_t v15 = type metadata accessor for _HashNode.Builder();
    uint64_t v16 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
    uint64_t v17 = v15;
    char v18 = a9;
    uint64_t v19 = 0;
    goto LABEL_7;
  }
  uint64_t v20 = type metadata accessor for _HashNode.Builder();
  uint64_t v16 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56);
  uint64_t v17 = v20;
  char v18 = a9;
  uint64_t v19 = 1;
LABEL_7:
  return v16(v18, v19, 1, v17);
}

uint64_t _HashNode._symmetricDifference<A>(_:_:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unsigned char *a9@<X8>, uint64_t a10)
{
  uint64_t v28 = a3;
  uint64_t v29 = a8;
  uint64_t v17 = type metadata accessor for _HashNode.Builder.Kind();
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v27 - v18;
  if (a4 == a2)
  {
    swift_storeEnumTagMultiPayload();
    return _HashNode.Builder.init(_:_:)(a1, (uint64_t)v19, a9);
  }
  else
  {
    uint64_t v20 = a9;
    BOOL v21 = _HashNode.isCollisionNode.getter(a4, a5, a6, a7, a10);
    uint64_t v23 = v28;
    uint64_t v22 = v29;
    if (v21 || _HashNode.isCollisionNode.getter(a2, v28, a6, v29, a10))
    {
      return _HashNode._symmetricDifference_slow<A>(_:_:)(a1, a2, v23, a4, a5, a6, a7, v22, v20, a10);
    }
    else
    {
      uint64_t v25 = (unsigned int *)nullsub_1(a4 + 16, a4 + 32, a6, a7, a10);
      return sub_24A49A754(v25, v26, a2, a1, a6, a7, v22, v20, a10);
    }
  }
}

uint64_t _HashNode._symmetricDifference_slow<A>(_:_:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unsigned char *a9@<X8>, uint64_t a10)
{
  BOOL v18 = _HashNode.isCollisionNode.getter(a4, a5, a6, a7, a10);
  BOOL v19 = _HashNode.isCollisionNode.getter(a2, a3, a6, a8, a10);
  if (v18)
  {
    uint64_t v20 = a8;
    BOOL v21 = a9;
    uint64_t v22 = a7;
    if (v19)
    {
      return _HashNode._symmetricDifference_slow_both<A>(_:_:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
    }
    unsigned int v24 = a1;
    uint64_t v25 = a2;
    uint64_t v26 = (unint64_t *)a3;
    uint64_t v27 = a4;
    uint64_t v28 = a5;
    uint64_t v29 = a6;
  }
  else
  {
    BOOL v21 = a9;
    unsigned int v24 = a1;
    uint64_t v25 = a4;
    uint64_t v26 = (unint64_t *)a5;
    uint64_t v27 = a2;
    uint64_t v28 = a3;
    uint64_t v29 = a6;
    uint64_t v22 = a8;
    uint64_t v20 = a7;
  }
  return _HashNode._symmetricDifference_slow_left<A>(_:_:)(v24, v25, v26, v27, v28, v29, v22, v20, v21, a10);
}

uint64_t sub_24A49A754@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, unsigned char *a8@<X8>, uint64_t a9)
{
  uint64_t v16 = (unsigned int *)nullsub_1(a3 + 16, a3 + 32, a5, a7, a9);
  return sub_24A49A7FC(v16, v17, a4, a1, a2, a5, a6, a7, a8, a9);
}

uint64_t sub_24A49A7FC@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, unsigned int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unsigned char *a9@<X8>, uint64_t a10)
{
  uint64_t v250 = a7;
  uint64_t v246 = a5;
  v243 = a4;
  v244 = a1;
  uint64_t v248 = a2;
  uint64_t v14 = MEMORY[0x263F8EE60] + 8;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v16 = type metadata accessor for _HashNode.Builder();
  uint64_t v199 = TupleTypeMetadata2;
  uint64_t v229 = swift_getTupleTypeMetadata2();
  uint64_t v215 = sub_24A5BBD20();
  uint64_t v197 = *(void *)(v215 - 8);
  MEMORY[0x270FA5388](v215);
  uint64_t v228 = (uint64_t)&v195 - v17;
  uint64_t v236 = sub_24A5BBD20();
  uint64_t v196 = *(void *)(v236 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v236);
  unsigned __int8 v227 = (char *)&v195 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  __int16 v239 = (char *)&v195 - v21;
  uint64_t v252 = v16;
  uint64_t v198 = *(void *)(v16 - 8);
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v214 = (char *)&v195 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  char v216 = (char *)&v195 - v25;
  MEMORY[0x270FA5388](v24);
  unint64_t v230 = (char *)&v195 - v26;
  uint64_t v27 = type metadata accessor for _HashNode.Builder();
  uint64_t v28 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  uint64_t v209 = (char *)&v195 - v29;
  uint64_t v245 = a8;
  uint64_t v208 = swift_getTupleTypeMetadata2();
  uint64_t v225 = (int *)swift_getTupleTypeMetadata2();
  uint64_t v207 = sub_24A5BBD20();
  uint64_t v30 = *(void *)(v207 - 8);
  MEMORY[0x270FA5388](v207);
  uint64_t v224 = (void (**)(char *, uint64_t, uint64_t, uint64_t))((char *)&v195 - v31);
  unsigned int v223 = (void (**)(char *, char *, uint64_t))v27;
  char v222 = (uint64_t (**)(void, void, void))sub_24A5BBD20();
  uint64_t v32 = (uint64_t)*(v222 - 1);
  uint64_t v33 = MEMORY[0x270FA5388](v222);
  char v221 = (char *)&v195 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = MEMORY[0x270FA5388](v33);
  uint64_t v220 = (uint64_t)&v195 - v36;
  uint64_t v200 = *(void *)(a6 - 8);
  uint64_t v37 = MEMORY[0x270FA5388](v35);
  unint64_t v233 = (uint64_t *)((char *)&v195 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v37);
  v251 = (char *)&v195 - v39;
  uint64_t v40 = type metadata accessor for _HashNode.Builder.Kind();
  MEMORY[0x270FA5388](v40);
  unint64_t v42 = (char *)&v195 - v41;
  swift_storeEnumTagMultiPayload();
  v247 = a9;
  unsigned int v249 = a3;
  uint64_t v254 = a6;
  uint64_t v210 = v14;
  uint64_t result = _HashNode.Builder.init(_:_:)(a3, (uint64_t)v42, a9);
  unsigned int v44 = *v243;
  uint64_t v257 = a10;
  if (v44)
  {
    unsigned int v253 = 0;
    v242 = (void (**)(char *, uint64_t, uint64_t))(v200 + 16);
    v240 = (uint64_t (**)(uint64_t *, uint64_t))(v200 + 8);
    LODWORD(v234) = v249 + 5;
    unint64_t v219 = v225 - 2;
    uint64_t v213 = (void (**)(uint64_t, uint64_t))(v28 + 32);
    uint64_t v212 = v28 + 56;
    uint64_t v206 = v245 - 8;
    int v205 = (void (**)(char *, uint64_t))(v30 + 8);
    unsigned int v218 = (void (**)(void, void, void))(v32 + 16);
    char v217 = (unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
    int v204 = (void (**)(char *, unsigned char *, uint64_t))(v198 + 16);
    unint64_t v203 = (void (**)(unsigned char *, uint64_t))(v198 + 8);
    unsigned int v202 = (void (**)(char *, uint64_t))(v28 + 8);
    uint64_t v211 = (void (**)(void, void))(v32 + 8);
    uint64_t v201 = v199 - 8;
    do
    {
      unsigned int v47 = __clz(__rbit32(v44));
      uint64_t v48 = _HashNode.UnsafeHandle.itemPtr(at:)(v253, (uint64_t)v243, v246);
      unsigned int v50 = *v244;
      int v51 = 1 << v47;
      if (((1 << v47) & *v244) != 0)
      {
        LODWORD(v241) = v47;
        v49.i32[0] = (v51 - 1) & v50;
        uint8x8_t v52 = (uint8x8_t)vcnt_s8(v49);
        v52.i16[0] = vaddlv_u8(v52);
        uint64_t v53 = v254;
        uint64_t v54 = _HashNode.UnsafeHandle.itemPtr(at:)(v52.u32[0], (uint64_t)v244, v248);
        unint64_t v55 = *v242;
        uint64_t v56 = v251;
        (*v242)(v251, v48, v53);
        char v57 = v233;
        uint64_t v237 = v54;
        __int16 v235 = v55;
        v55((char *)v233, v54, v53);
        char v58 = sub_24A5BB530();
        uint64_t v59 = (void (*)(char *, uint64_t, uint64_t))*v240;
        (*v240)(v57, v53);
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v59)(v56, v53);
        if ((v58 & 1) == 0)
        {
          uint64_t v60 = (uint64_t)v251;
          uint64_t v61 = v254;
          unint64_t v62 = v235;
          v235(v251, v48, v254);
          uint64_t v238 = v48;
          uint64_t v232 = (void (*)(void, void))sub_24A5B85E4();
          ((void (*)(uint64_t, uint64_t))v59)(v60, v61);
          v62((char *)v60, v237, v61);
          unint64_t v63 = sub_24A5B85E4();
          ((void (*)(uint64_t, uint64_t))v59)(v60, v61);
          uint64_t v64 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v62)(v60, v238, v61);
          MEMORY[0x270FA5388](v64);
          uint64_t v65 = v250;
          *(&v195 - 6) = v61;
          *(&v195 - 5) = v65;
          uint64_t v66 = v257;
          *(&v195 - 4) = v245;
          *(&v195 - 3) = v66;
          uint64_t v68 = static _HashNode.build(level:item1:_:item2:_:)((int)v234, v60, v67, (unint64_t)v232, (uint64_t)sub_24A49DB7C, (uint64_t)(&v195 - 8), v63, v61, MEMORY[0x263F8EE60] + 8, v257);
          uint64_t result = _HashNode.Builder.addNewChildNode(_:_:at:)(v249, v68, v69, (int)v241, v252);
        }
      }
      else
      {
        unsigned int v70 = v244[1];
        if ((v70 & v51) != 0)
        {
          LODWORD(v241) = v47;
          LODWORD(v232) = v44;
          v49.i32[0] = v70 & (v51 - 1);
          uint8x8_t v71 = (uint8x8_t)vcnt_s8(v49);
          v71.i16[0] = vaddlv_u8(v71);
          uint64_t v72 = v254;
          uint64_t v73 = v257;
          uint64_t v74 = (uint64_t *)_HashNode.UnsafeHandle.childPtr(at:)(v71.u32[0], (uint64_t)v244, v248);
          uint64_t v75 = *v242;
          uint64_t v76 = (uint64_t)v251;
          (*v242)(v251, v48, v72);
          uint64_t v237 = sub_24A5B85E4();
          __int16 v235 = (void (*)(char *, uint64_t, uint64_t))*v240;
          ((void (*)(uint64_t, uint64_t))v235)(v76, v72);
          uint64_t v77 = v48;
          uint64_t v78 = v73;
          uint64_t v79 = *v74;
          uint64_t v80 = (char *)v74[1];
          unint64_t v226 = v74;
          uint64_t v238 = v77;
          uint64_t v231 = v75;
          ((void (*)(uint64_t))v75)(v76);
          uint64_t v81 = v245;
          swift_retain();
          long long v82 = (char *)v224;
          _HashNode.removing(_:_:_:)(v234, v76, v237, v79, v80, v72, v81, v78, (uint64_t)v224);
          swift_release();
          long long v83 = v235;
          ((void (*)(uint64_t, uint64_t))v235)(v76, v72);
          uint64_t v84 = v225;
          if ((*(unsigned int (**)(char *, uint64_t, int *))(*((void *)v225 - 1) + 48))(v82, 1, v225) == 1)
          {
            (*v205)(v82, v207);
            uint64_t v85 = v220;
            uint64_t v86 = (uint64_t)v223;
            (*(void (**)(uint64_t, uint64_t, uint64_t, void (**)(char *, char *, uint64_t)))v212)(v220, 1, 1, v223);
          }
          else
          {
            uint64_t v87 = &v82[*(int *)(v208 + 48)];
            uint64_t v88 = &v82[v84[12]];
            uint64_t v85 = v220;
            uint64_t v86 = (uint64_t)v223;
            ((void (*)(uint64_t, char *, void))*v213)(v220, v88, v223);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))v212)(v85, 0, 1, v86);
            (*(void (**)(char *, uint64_t))(*(void *)(v81 - 8) + 8))(v87, v81);
            ((void (*)(char *, uint64_t))v83)(v82, v254);
          }
          long long v89 = v222;
          long long v90 = v221;
          unsigned int v44 = v232;
          (*v218)(v221, v85, v222);
          if ((*v217)(v90, 1, v86) == 1)
          {
            uint64_t v232 = *v211;
            v232(v90, v89);
            uint64_t v91 = *v226;
            uint64_t v92 = v226[1];
            Swift::Int v93 = *(void *)(*(void *)v201 + 72);
            swift_retain();
            uint64_t v94 = v254;
            uint64_t v95 = _HashNode.mapValuesToVoid(copy:extraBytes:)(1, v93, v91, v92, v254, v245, v257);
            uint64_t v97 = v96;
            swift_release();
            uint64_t v255 = v95;
            uint64_t v256 = v97;
            uint64_t v98 = v85;
            uint64_t v99 = (uint64_t)v251;
            v231(v251, v238, v94);
            uint64_t v100 = (void *)type metadata accessor for _HashNode();
            _HashNode.insert(_:_:_:)(v234, v99, v101, v237, v100);
            ((void (*)(uint64_t, uint64_t))v235)(v99, v94);
            _HashNode.Builder.addNewChildNode(_:_:at:)(v249, v255, v256, (int)v241, v252);
            uint64_t result = ((uint64_t (*)(uint64_t, uint64_t (**)(void, void, void)))v232)(v98, v89);
          }
          else
          {
            uint64_t v102 = v209;
            ((void (*)(char *, char *, uint64_t))*v213)(v209, v90, v86);
            uint64_t v103 = v85;
            uint64_t v104 = v230;
            _HashNode.Builder.mapValuesToVoid()(v86, v230);
            uint64_t v105 = (uint64_t)v216;
            uint64_t v106 = v252;
            (*v204)(v216, v104, v252);
            _HashNode.Builder.addNewChildBranch(_:_:at:)(v249, v105, (int)v241, v106);
            (*v203)(v104, v106);
            (*v202)(v102, v86);
            uint64_t result = ((uint64_t (*)(uint64_t, uint64_t (**)(void, void, void)))*v211)(v103, v89);
          }
        }
        else
        {
          uint64_t v45 = (uint64_t)v251;
          (*v242)(v251, v48, v254);
          uint64_t result = _HashNode.Builder.addNewItem(_:_:at:)(v249, v45, v46, v47, v252);
        }
      }
      ++v253;
      v44 &= v44 - 1;
    }
    while (v44);
  }
  unint64_t v108 = v243;
  long long v107 = v244;
  unsigned int v109 = v243[1];
  if (v109)
  {
    uint64_t v110 = 0;
    __int16 v235 = (void (*)(char *, uint64_t, uint64_t))(v200 + 16);
    int v234 = (void (**)(uint64_t, uint64_t))(v200 + 8);
    LODWORD(v237) = v249 + 5;
    unint64_t v226 = (uint64_t *)(v229 - 8);
    uint64_t v225 = (int *)(v198 + 32);
    uint64_t v224 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v198 + 56);
    uint64_t v213 = (void (**)(uint64_t, uint64_t))(v197 + 8);
    unsigned int v223 = (void (**)(char *, char *, uint64_t))(v196 + 16);
    char v222 = (uint64_t (**)(void, void, void))(v198 + 48);
    unsigned int v218 = (void (**)(void, void, void))(v198 + 16);
    char v217 = (unsigned int (**)(char *, uint64_t, uint64_t))(v198 + 8);
    char v221 = (char *)(v196 + 8);
    uint64_t v212 = v199 - 8;
    uint64_t v220 = MEMORY[0x263F8EE60] + 8;
    uint64_t v111 = v245;
    uint64_t v112 = v250;
    do
    {
      int v115 = __clz(__rbit32(v109));
      uint64_t v116 = (uint64_t *)_HashNode.UnsafeHandle.childPtr(at:)(v110, (uint64_t)v108, v246);
      unsigned int v118 = *v107;
      int v119 = 1 << v115;
      if (((1 << v115) & *v107) != 0)
      {
        LODWORD(v238) = v109;
        unsigned int v253 = v115;
        LODWORD(v240) = v110;
        v117.i32[0] = (v119 - 1) & v118;
        uint8x8_t v120 = (uint8x8_t)vcnt_s8(v117);
        v120.i16[0] = vaddlv_u8(v120);
        unint64_t v121 = v116;
        uint64_t v122 = v254;
        uint64_t v123 = _HashNode.UnsafeHandle.itemPtr(at:)(v120.u32[0], (uint64_t)v107, v248);
        uint64_t v124 = *(void (**)(void, void))v235;
        uint64_t v125 = (uint64_t)v251;
        (*(void (**)(char *, uint64_t, uint64_t))v235)(v251, v123, v122);
        v242 = (void (**)(char *, uint64_t, uint64_t))sub_24A5B85E4();
        v241 = *v234;
        v241(v125, v122);
        uint64_t v126 = *v121;
        uint64_t v127 = v121[1];
        unint64_t v233 = v121;
        swift_retain();
        uint64_t v128 = _HashNode.mapValuesToVoid(copy:extraBytes:)(0, 0, v126, v127, v122, v112, v257);
        uint64_t v130 = v129;
        swift_release();
        uint64_t v231 = (void (*)(char *, uint64_t, uint64_t))v123;
        uint64_t v232 = v124;
        ((void (*)(uint64_t, uint64_t, uint64_t))v124)(v125, v123, v122);
        unint64_t v131 = v130;
        uint64_t v132 = v228;
        _HashNode.removing(_:_:_:)(v237, v125, (uint64_t)v242, v128, v131, v122, v220, v257, v228);
        swift_release();
        uint64_t v133 = v122;
        uint64_t v134 = v241;
        v241(v125, v133);
        uint64_t v135 = v229;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v229 - 8) + 48))(v132, 1, v229) == 1)
        {
          (*v213)(v132, v215);
          uint64_t v136 = v239;
          uint64_t v137 = v252;
          (*v224)(v239, 1, 1, v252);
        }
        else
        {
          uint64_t v153 = v132 + *(int *)(v135 + 48);
          uint64_t v136 = v239;
          uint64_t v137 = v252;
          (*(void (**)(char *, uint64_t, uint64_t))v225)(v239, v153, v252);
          (*v224)(v136, 0, 1, v137);
          v134(v132, v254);
        }
        int v154 = v227;
        uint64_t v155 = v236;
        (*v223)(v227, v136, v236);
        int v156 = (*v222)(v154, 1, v137);
        LODWORD(v110) = v240;
        unsigned int v109 = v238;
        if (v156 == 1)
        {
          unint64_t v219 = *(int **)v221;
          ((void (*)(char *, uint64_t))v219)(v154, v155);
          uint64_t v157 = *v233;
          uint64_t v158 = v233[1];
          Swift::Int v159 = *(void *)(*(void *)v212 + 72);
          swift_retain();
          uint64_t v160 = v254;
          uint64_t v112 = v250;
          uint64_t v161 = _HashNode.mapValuesToVoid(copy:extraBytes:)(1, v159, v157, v158, v254, v250, v257);
          uint64_t v163 = v162;
          swift_release();
          uint64_t v255 = v161;
          uint64_t v256 = v163;
          uint64_t v164 = (uint64_t)v251;
          ((void (*)(char *, void, uint64_t))v232)(v251, v231, v160);
          uint64_t v165 = (void *)type metadata accessor for _HashNode();
          _HashNode.insert(_:_:_:)(v237, v164, v166, (unint64_t)v242, v165);
          v241(v164, v160);
          _HashNode.Builder.addNewChildNode(_:_:at:)(v249, v255, v256, v253, v252);
          uint64_t result = ((uint64_t (*)(char *, uint64_t))v219)(v239, v236);
          long long v107 = v244;
          uint64_t v111 = v245;
          unint64_t v108 = v243;
        }
        else
        {
          uint64_t v113 = v214;
          (*(void (**)(char *, char *, uint64_t))v225)(v214, v154, v137);
          uint64_t v114 = v230;
          (*v218)(v230, v113, v137);
          _HashNode.Builder.addNewChildBranch(_:_:at:)(v249, (uint64_t)v114, v253, v137);
          ((void (*)(char *, uint64_t))*v217)(v113, v137);
          uint64_t result = (*(uint64_t (**)(char *, uint64_t))v221)(v239, v155);
          long long v107 = v244;
          uint64_t v111 = v245;
          unint64_t v108 = v243;
          uint64_t v112 = v250;
        }
      }
      else
      {
        unsigned int v138 = v107[1];
        if ((v138 & v119) != 0)
        {
          v117.i32[0] = v138 & (v119 - 1);
          uint8x8_t v139 = (uint8x8_t)vcnt_s8(v117);
          v139.i16[0] = vaddlv_u8(v139);
          uint64_t v140 = v139.u32[0];
          unsigned int v253 = v115;
          uint64_t v141 = v254;
          char v142 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v110, v108, v246, v254, v112, v257);
          uint64_t v143 = *v142;
          uint64_t v144 = v142[1];
          unint64_t v145 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v140, v107, v248, v141, v111, v257);
          uint64_t v146 = *v145;
          uint64_t v147 = v145[1];
          swift_retain();
          swift_retain();
          unint64_t v148 = v230;
          _HashNode._symmetricDifference<A>(_:_:)(v237, v146, v147, v143, v144, v141, v250, v111, v257);
          swift_release();
          swift_release();
          uint64_t v149 = (uint64_t)v216;
          uint64_t v150 = v252;
          (*v218)(v216, v148, v252);
          _HashNode.Builder.addNewChildBranch(_:_:at:)(v249, v149, v253, v150);
          unint64_t v151 = v148;
          unint64_t v108 = v243;
          uint64_t v152 = v150;
          uint64_t v112 = v250;
          uint64_t result = ((uint64_t (*)(unsigned char *, uint64_t))*v217)(v151, v152);
        }
        else
        {
          uint64_t v167 = *v116;
          uint64_t v168 = v116[1];
          swift_retain();
          uint64_t v169 = _HashNode.mapValuesToVoid(copy:extraBytes:)(0, 0, v167, v168, v254, v112, v257);
          uint64_t v171 = v170;
          swift_release();
          uint64_t v172 = v171;
          uint64_t v112 = v250;
          uint64_t result = _HashNode.Builder.addNewChildNode(_:_:at:)(v249, v169, v172, v115, v252);
        }
      }
      uint64_t v110 = (v110 + 1);
      v109 &= v109 - 1;
    }
    while (v109);
    unsigned int v173 = v108[1];
  }
  else
  {
    unsigned int v173 = 0;
    uint64_t v111 = v245;
  }
  unsigned int v174 = v173 | *v108;
  unsigned int v175 = *v107;
  if (*v107)
  {
    uint64_t v176 = 0;
    uint64_t v177 = (void (**)(uint64_t, uint64_t, uint64_t))(v200 + 16);
    uint64_t v178 = v254;
    uint64_t v179 = (uint64_t)v251;
    do
    {
      unsigned int v180 = __clz(__rbit32(v175));
      if (((v174 >> v180) & 1) == 0)
      {
        uint64_t v181 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v176, v107, v248, v178, v111, v257);
        (*v177)(v179, v181, v178);
        uint64_t result = _HashNode.Builder.addNewItem(_:_:at:)(v249, v179, v182, v180, v252);
      }
      uint64_t v176 = (v176 + 1);
      v175 &= v175 - 1;
    }
    while (v175);
  }
  unsigned int v183 = v107[1];
  if (v183)
  {
    uint64_t v184 = 0;
    uint64_t v185 = v254;
    do
    {
      int v186 = __clz(__rbit32(v183));
      if (((v174 >> v186) & 1) == 0)
      {
        uint64_t v187 = v257;
        char v188 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v184, v107, v248, v185, v111, v257);
        uint64_t v189 = *v188;
        uint64_t v190 = v188[1];
        swift_retain();
        uint64_t v191 = _HashNode.mapValuesToVoid(copy:extraBytes:)(0, 0, v189, v190, v185, v111, v187);
        uint64_t v193 = v192;
        swift_release();
        uint64_t v194 = v193;
        long long v107 = v244;
        uint64_t result = _HashNode.Builder.addNewChildNode(_:_:at:)(v249, v191, v194, v186, v252);
      }
      uint64_t v184 = (v184 + 1);
      v183 &= v183 - 1;
    }
    while (v183);
  }
  return result;
}

uint64_t sub_24A49C08C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v8 = (char *)&v10 - v7;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))((char *)&v10 - v7, a2, a3);
  return sub_24A544CAC((uint64_t)v8, a1, TupleTypeMetadata2);
}

uint64_t _HashNode._symmetricDifference_slow_both<A>(_:_:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unsigned char *a9@<X8>, uint64_t a10)
{
  uint64_t v17 = (unsigned int *)nullsub_1(a4 + 16, a4 + 32, a6, a7, a10);
  uint64_t v19 = v18;
  uint64_t v20 = (unsigned int *)nullsub_1(a2 + 16, a2 + 32, a6, a8, a10);
  return sub_24A49C2F4(v20, v21, v17, v19, a1, a4, a5, a2, a9, a3, a6, a7, a8, a10);
}

uint64_t _HashNode._symmetricDifference_slow_left<A>(_:_:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unsigned char *a9@<X8>, uint64_t a10)
{
  uint64_t v19 = (unsigned int *)nullsub_1(a4 + 16, a4 + 32, a6, a7, a10);
  return sub_24A49C948(v19, v20, a2, a3, a1, a4, a5, a6, a9, a7, a8, a10);
}

uint64_t sub_24A49C2F4@<X0>(unsigned int *a1@<X0>, unint64_t *a2@<X1>, unsigned int *a3@<X2>, unint64_t *a4@<X3>, unsigned int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unsigned char *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v78 = (unint64_t *)a7;
  uint64_t v79 = (unsigned char *)a8;
  uint64_t v77 = a6;
  unsigned int v83 = a5;
  uint64_t v68 = (__int32 *)a3;
  long long v82 = (__int32 *)a1;
  uint64_t v69 = *(void *)(a11 - 8);
  uint64_t v70 = v14;
  uint64_t v87 = a13;
  MEMORY[0x270FA5388](a1);
  uint64_t v80 = (char *)&v66 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x263F8EE60] + 8;
  uint64_t v84 = type metadata accessor for _HashNode.Builder.Kind();
  MEMORY[0x270FA5388](v84);
  uint64_t v21 = (uint64_t *)((char *)&v66 - v20);
  uint64_t v81 = type metadata accessor for _HashNode.Builder();
  MEMORY[0x270FA5388](v81);
  uint64_t v24 = (char *)&v66 - v23;
  BOOL v25 = *a4 == *a2;
  uint8x8_t v71 = a9;
  if (v25)
  {
    uint64_t v77 = a12;
    uint64_t v78 = a4;
    uint64_t v67 = v22;
    swift_storeEnumTagMultiPayload();
    uint64_t v79 = v24;
    _HashNode.Builder.init(_:_:)(v83, (uint64_t)v21, v24);
    uint64_t v76 = a2;
    uint64_t v26 = _HashNode.UnsafeHandle.reverseItems.getter();
    uint64_t v74 = v27;
    uint64_t v75 = v26;
    __int32 v28 = *v68;
    uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)*v68);
    v29.i16[0] = vaddlv_u8(v29);
    if (*v68 != v68[1]) {
      __int32 v28 = v29.i32[0];
    }
    uint64_t v30 = a14;
    uint64_t v84 = a14;
    uint64_t v31 = (uint64_t)v68;
    LODWORD(v73) = v28;
    if (v28)
    {
      unsigned int v32 = 0;
      uint64_t v72 = (void (**)(char *, uint64_t, uint64_t))(v69 + 16);
      uint64_t v33 = v78;
      do
      {
        uint64_t v34 = v31;
        uint64_t v35 = v77;
        uint64_t v36 = _HashNode.UnsafeHandle.itemPtr(at:)(v32, v31, (uint64_t)v33);
        uint64_t v85 = v75;
        uint64_t v86 = v74;
        uint64_t v37 = MEMORY[0x270FA5388](v36);
        *(&v66 - 6) = a11;
        *(&v66 - 5) = v35;
        *(&v66 - 4) = v87;
        *(&v66 - 3) = v30;
        uint64_t v65 = v37;
        swift_getTupleTypeMetadata2();
        sub_24A5BBDB0();
        swift_getWitnessTable();
        uint64_t v33 = v78;
        if ((sub_24A5BB900() & 1) == 0)
        {
          uint64_t v38 = (uint64_t)v80;
          (*v72)(v80, v36, a11);
          _HashNode.Builder.addNewCollision(_:_:_:)((char *)v83, v38, v39, *v33, v81);
        }
        ++v32;
        uint64_t v30 = v84;
        uint64_t v31 = v34;
      }
      while (v73 != v32);
    }
    uint64_t v53 = v77;
    uint64_t v78 = (unint64_t *)_HashNode.UnsafeHandle.reverseItems.getter();
    uint64_t v75 = v54;
    uint64_t v55 = (uint64_t)v82;
    __int32 v56 = *v82;
    uint8x8_t v57 = (uint8x8_t)vcnt_s8((int8x8_t)*v82);
    v57.i16[0] = vaddlv_u8(v57);
    if (*v82 != v82[1]) {
      __int32 v56 = v57.i32[0];
    }
    LODWORD(v74) = v56;
    if (v56)
    {
      unsigned int v58 = 0;
      uint64_t v73 = (void (**)(char *, uint64_t, uint64_t))(v69 + 16);
      uint64_t v59 = v76;
      uint64_t v60 = v87;
      do
      {
        uint64_t v61 = _HashNode.UnsafeHandle.itemPtr(at:)(v58, v55, (uint64_t)v59);
        uint64_t v85 = (uint64_t)v78;
        uint64_t v86 = v75;
        uint64_t v62 = MEMORY[0x270FA5388](v61);
        *(&v66 - 6) = a11;
        *(&v66 - 5) = v53;
        *(&v66 - 4) = v60;
        *(&v66 - 3) = v30;
        uint64_t v65 = v62;
        swift_getTupleTypeMetadata2();
        sub_24A5BBDB0();
        swift_getWitnessTable();
        uint64_t v59 = v76;
        if ((sub_24A5BB900() & 1) == 0)
        {
          uint64_t v63 = (uint64_t)v80;
          (*v73)(v80, v61, a11);
          _HashNode.Builder.addNewCollision(_:_:_:)((char *)v83, v63, v64, *v59, v81);
        }
        ++v58;
        uint64_t v30 = v84;
        uint64_t v60 = v87;
        uint64_t v55 = (uint64_t)v82;
      }
      while (v74 != v58);
    }
    return (*(uint64_t (**)(unsigned char *, unsigned char *, uint64_t))(v67 + 32))(v71, v79, v81);
  }
  else
  {
    uint64_t v40 = _HashNode.mapValuesToVoid(copy:extraBytes:)(0, 0, v77, (uint64_t)v78, a11, a12, a14);
    uint64_t v42 = v41;
    unint64_t v43 = *a4;
    uint64_t v44 = _HashNode.mapValuesToVoid(copy:extraBytes:)(0, 0, (uint64_t)v79, a10, a11, v87, a14);
    unint64_t v45 = *a2;
    char v46 = v83;
    uint64_t v49 = sub_24A564EBC(v83, v40, v42, v43, v44, v47, v45, a11, v48, v19, a14);
    uint64_t v51 = v50;
    swift_release();
    swift_release();
    *uint64_t v21 = v49;
    v21[1] = v51;
    swift_storeEnumTagMultiPayload();
    return _HashNode.Builder.init(_:_:)(v46, (uint64_t)v21, v71);
  }
}

uint64_t sub_24A49C948@<X0>(unsigned int *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X3>, unsigned int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unsigned char *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v18 = (int *)nullsub_1(a3 + 16, a3 + 32, a8, a11, a12);
  return sub_24A49C9F8(v18, v19, a1, a2, a5, a3, a4, a6, a9, a7, a8, a10, a11, a12);
}

uint64_t sub_24A49C9F8@<X0>(int *a1@<X0>, void *a2@<X1>, unsigned int *a3@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t *a7@<X6>, uint64_t a8@<X7>, unsigned char *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v177 = a8;
  uint64_t v178 = a9;
  uint64_t v179 = a6;
  unsigned int v180 = a7;
  uint64_t v171 = a3;
  uint64_t v181 = a13;
  uint64_t v182 = a2;
  uint64_t v176 = a10;
  uint64_t v169 = type metadata accessor for _HashNode.Builder();
  uint64_t v168 = *(void (***)(char *, char *, uint64_t))(v169 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v169);
  uint64_t v166 = (char *)&v157 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v157 - v19;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v175 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v21 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v167 = (uint64_t *)((char *)&v157 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v21);
  uint64_t v172 = (char *)&v157 - v23;
  uint64_t v173 = type metadata accessor for _HashNode.Builder.Kind();
  MEMORY[0x270FA5388](v173);
  unsigned int v174 = (uint64_t *)((char *)&v157 - v24);
  uint64_t v185 = a12;
  uint64_t v25 = (uint64_t)a1;
  uint64_t v26 = swift_getTupleTypeMetadata2();
  uint64_t v27 = MEMORY[0x270FA5388](v26);
  uint64_t v28 = MEMORY[0x270FA5388](v27);
  uint64_t v29 = *(void *)(a11 - 8);
  uint64_t v30 = MEMORY[0x270FA5388](v28);
  uint64_t v36 = (char *)&v157 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v37 = *a4;
  uint64_t v184 = a5;
  unint64_t v38 = v37 >> a5;
  unsigned int v183 = v38 & 0x1F;
  int v39 = *a1;
  int v40 = 1 << v38;
  if ((v40 & *a1) == 0)
  {
    uint64_t v66 = v20;
    uint64_t v67 = v168;
    uint64_t v68 = v169;
    uint64_t v69 = v181;
    int v70 = *(_DWORD *)(v25 + 4);
    if ((v70 & v40) != 0)
    {
      v34.i32[0] = v70 & (v40 - 1);
      uint8x8_t v71 = (uint8x8_t)vcnt_s8(v34);
      v71.i16[0] = vaddlv_u8(v71);
      LODWORD(v175) = v71.i32[0];
      uint64_t v72 = (uint64_t *)_HashNode.UnsafeHandle.childPtr(at:)(v71.u32[0], v25, (uint64_t)v182);
      uint64_t v74 = *v72;
      uint64_t v73 = v72[1];
      int v75 = v184;
      swift_retain();
      _HashNode._symmetricDifference<A>(_:_:)((v75 + 5), v177, v176, v74, v73, a11, v69, v185, a14);
      swift_release();
      uint64_t v76 = _HashNode.mapValuesToVoid(copy:extraBytes:)(0, 0, v179, (uint64_t)v180, a11, v69, a14);
      uint64_t v78 = v77;
      uint64_t v79 = (uint64_t)v166;
      v67[2](v166, v66, v68);
      _HashNode.replacingChild(_:at:_:with:)(v75, v183, v175, v79, v76, v78, a11, MEMORY[0x263F8EE60] + 8, v178, a14);
      swift_release();
      return ((uint64_t (*)(char *, uint64_t))v67[1])(v66, v68);
    }
    uint64_t v188 = _HashNode.mapValuesToVoid(copy:extraBytes:)(1, 16, v179, (uint64_t)v180, a11, v181, a14);
    uint64_t v189 = v125;
    uint64_t v126 = _HashNode.mapValuesToVoid(copy:extraBytes:)(0, 0, v177, v176, a11, v185, a14);
    uint64_t v128 = v127;
    int64_t v129 = (void *)type metadata accessor for _HashNode();
    sub_24A5B9AB0(v126, v128, v183, v129);
    swift_release();
    uint64_t v130 = v189;
    unint64_t v131 = v174;
    *unsigned int v174 = v188;
    v131[1] = v130;
    swift_storeEnumTagMultiPayload();
    uint64_t v102 = v178;
    char v103 = v184;
    uint64_t v104 = (uint64_t)v131;
    return _HashNode.Builder.init(_:_:)(v103, v104, v102);
  }
  uint64_t v41 = a4;
  uint64_t v160 = v31;
  uint64_t v161 = v33;
  uint64_t v162 = v32;
  uint64_t v165 = v30;
  v34.i32[0] = (v40 - 1) & v39;
  uint8x8_t v42 = (uint8x8_t)vcnt_s8(v34);
  v42.i16[0] = vaddlv_u8(v42);
  LODWORD(v166) = v42.i32[0];
  uint64_t v43 = v181;
  uint64_t v44 = _HashNode.UnsafeHandle.itemPtr(at:)(v42.u32[0], v25, (uint64_t)v182);
  unint64_t v45 = *(void (***)(char *, char *, uint64_t))(v29 + 16);
  uint64_t v169 = v29 + 16;
  uint64_t v168 = v45;
  ((void (*)(char *, uint64_t, uint64_t))v45)(v36, v44, a11);
  uint64_t v46 = sub_24A5B85E4();
  uint64_t v47 = v29;
  unint64_t v48 = v46;
  uint64_t v159 = v47;
  uint64_t v49 = *(void (**)(char *, uint64_t))(v47 + 8);
  uint64_t v164 = v47 + 8;
  uint64_t v163 = v49;
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v49)(v36, a11);
  if (v48 != *v41)
  {
    uint64_t v80 = *(void *)(v175 + 72);
    BOOL v81 = __OFSUB__(16, v80);
    uint64_t v82 = 16 - v80;
    if (v81)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    unsigned int v83 = v180;
    unsigned int v180 = v41;
    uint64_t v188 = _HashNode.mapValuesToVoid(copy:extraBytes:)(1, v82 & ~(v82 >> 63), v179, (uint64_t)v83, a11, v43, a14);
    uint64_t v189 = v84;
    uint64_t v85 = MEMORY[0x263F8EE60] + 8;
    uint64_t v179 = MEMORY[0x263F8EE60] + 8;
    uint64_t v182 = (void *)type metadata accessor for _HashNode();
    uint64_t v86 = (uint64_t)v172;
    _HashNode.removeItem(at:_:)((uint64_t)v172, v87, v183, v166, v182);
    int v88 = v184 + 5;
    long long v89 = (char *)v167;
    uint64_t v90 = ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))v168)(v167, v86, a11);
    MEMORY[0x270FA5388](v90);
    uint64_t v91 = v185;
    *(&v157 - 6) = a11;
    *(&v157 - 5) = v91;
    *(&v157 - 4) = v43;
    *(&v157 - 3) = a14;
    uint64_t v156 = (uint64_t)v89;
    uint64_t v92 = _HashNode.mapValuesToVoid(copy:extraBytes:)(0, 0, v177, v176, a11, v91, a14);
    uint64_t v95 = static _HashNode.build(level:item1:_:child2:_:)(v88, (uint64_t)sub_24A49DB28, (uint64_t)(&v157 - 8), v48, v92, v93, *v180, a11, v94, v85, a14);
    uint64_t v97 = v96;
    uint64_t v98 = *(void (**)(char *, uint64_t))(v175 + 8);
    uint64_t v99 = TupleTypeMetadata2;
    v98(v89, TupleTypeMetadata2);
    sub_24A5B9AB0(v95, v97, v183, v182);
    swift_release();
    v98(v172, v99);
    uint64_t v100 = v189;
    uint64_t v101 = v174;
    *unsigned int v174 = v188;
    v101[1] = v100;
    swift_storeEnumTagMultiPayload();
    uint64_t v102 = v178;
    char v103 = v184;
    uint64_t v104 = (uint64_t)v101;
    return _HashNode.Builder.init(_:_:)(v103, v104, v102);
  }
  uint64_t v158 = v25;
  uint64_t v51 = v43;
  uint64_t v52 = v185;
  uint64_t v53 = _HashNode.UnsafeHandle.reverseItems.getter();
  int v55 = v54;
  uint64_t v167 = &v157;
  uint64_t v188 = v53;
  uint64_t v189 = v54;
  MEMORY[0x270FA5388](v53);
  *(&v157 - 6) = a11;
  *(&v157 - 5) = v52;
  *(&v157 - 4) = v43;
  *(&v157 - 3) = a14;
  uint64_t v156 = v44;
  sub_24A5BBDB0();
  swift_getWitnessTable();
  uint64_t v56 = v190;
  sub_24A5BBB60();
  uint64_t v190 = v56;
  if (v187 == 1)
  {
    uint64_t v58 = v179;
    uint8x8_t v57 = v180;
    uint64_t result = _HashNode.hasSingletonItem.getter(v179, (uint64_t)v180, a11, v51, a14);
    uint64_t v59 = v51;
    if (result)
    {
      uint64_t v188 = _HashNode.mapValuesToVoid(copy:extraBytes:)(1, *(void *)(v175 + 72), v177, v176, a11, v185, a14);
      uint64_t v189 = v60;
      uint64_t v61 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(0, v158, v182, a11, v51, a14);
      ((void (*)(char *, uint64_t, uint64_t))v168)(v36, v61, a11);
      uint64_t v62 = (void *)type metadata accessor for _HashNode();
      _HashNode.ensureUniqueAndAppendCollision(isUnique:_:)(1, (uint64_t)v36, v63, v62);
      v163(v36, a11);
      uint64_t v64 = v189;
      uint64_t v65 = v174;
      *unsigned int v174 = v188;
      v65[1] = v64;
LABEL_17:
      swift_storeEnumTagMultiPayload();
      uint64_t v102 = v178;
      char v103 = v184;
      uint64_t v104 = (uint64_t)v65;
      return _HashNode.Builder.init(_:_:)(v103, v104, v102);
    }
    uint64_t v132 = v175;
    Swift::Int v133 = *(void *)(v175 + 72);
    if (!__OFSUB__(16, v133))
    {
      uint64_t v188 = _HashNode.mapValuesToVoid(copy:extraBytes:)(1, (16 - v133) & ~((16 - v133) >> 63), v58, (uint64_t)v57, a11, v59, a14);
      uint64_t v189 = v134;
      uint64_t v135 = (void *)type metadata accessor for _HashNode();
      uint64_t v136 = (uint64_t)v172;
      char v137 = v183;
      _HashNode.removeItem(at:_:)((uint64_t)v172, v138, v183, v166, v135);
      uint64_t v186 = _HashNode.mapValuesToVoid(copy:extraBytes:)(1, v133, v177, v176, a11, v185, a14);
      uint64_t v187 = v139;
      _HashNode.ensureUniqueAndAppendCollision(isUnique:_:)(1, v136, v140, v135);
      sub_24A5B9AB0(v186, v187, v137, v135);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v132 + 8))(v136, TupleTypeMetadata2);
      uint64_t v141 = v189;
      uint64_t v65 = v174;
      *unsigned int v174 = v188;
      v65[1] = v141;
      goto LABEL_17;
    }
    goto LABEL_24;
  }
  uint64_t v105 = v43;
  uint64_t v106 = v186;
  int8x8_t v107 = (int8x8_t)*v171;
  uint8x8_t v108 = (uint8x8_t)vcnt_s8(v107);
  v108.i16[0] = vaddlv_u8(v108);
  if (v107.i32[0] != v171[1]) {
    v107.i32[0] = v108.i32[0];
  }
  if (v107.i32[0] == 2)
  {
    uint64_t v157 = a14;
    uint64_t v188 = _HashNode.mapValuesToVoid(copy:extraBytes:)(1, 0, v179, (uint64_t)v180, a11, v51, a14);
    uint64_t v189 = v109;
    uint64_t v110 = v165;
    uint64_t v111 = *(int *)(v165 + 48);
    uint64_t v112 = v160;
    uint64_t v113 = v160 + v111;
    uint64_t v182 = (void *)(v160 + v111);
    uint64_t v114 = v53;
    uint64_t v115 = v162;
    uint64_t v116 = v114 + *(void *)(v115 + 72) - *(void *)(v115 + 72) * v106 + v111;
    ((void (*)(uint64_t))v168)(v160);
    uint64_t v117 = v185;
    uint64_t v118 = *(void *)(v185 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v118 + 16))(v113, v116, v185);
    uint64_t v119 = v161;
    uint64_t v120 = v161 + *(int *)(v110 + 48);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v159 + 32))(v161, v112, a11);
    (*(void (**)(uint64_t, void *, uint64_t))(v118 + 32))(v120, v182, v117);
    ((void (*)(char *, uint64_t, uint64_t))v168)(v36, v119, a11);
    (*(void (**)(uint64_t, uint64_t))(v115 + 8))(v119, v110);
    uint64_t v121 = type metadata accessor for _HashNode();
    _HashNode.replaceItem(at:_:with:)(v183, v166, (uint64_t)v36, v122, v121);
    uint64_t v123 = v189;
    uint64_t v124 = v174;
    *unsigned int v174 = v188;
    v124[1] = v123;
    swift_storeEnumTagMultiPayload();
    uint64_t v102 = v178;
    char v103 = v184;
    uint64_t v104 = (uint64_t)v124;
    return _HashNode.Builder.init(_:_:)(v103, v104, v102);
  }
  unsigned int v142 = v55 + ~v186;
  uint64_t v188 = _HashNode.mapValuesToVoid(copy:extraBytes:)(1, 0, v177, v176, a11, v185, a14);
  uint64_t v189 = v143;
  uint64_t v144 = (void *)type metadata accessor for _HashNode();
  _HashNode.removeItem(at:_:)((uint64_t)v36, v145, 255, v142, v144);
  v163(v36, a11);
  uint64_t v147 = v179;
  uint64_t v146 = v180;
  uint64_t result = _HashNode.hasSingletonItem.getter(v179, (uint64_t)v180, a11, v105, a14);
  if (result)
  {
    uint64_t v148 = v189;
    uint64_t v149 = v174;
    *unsigned int v174 = v188;
    v149[1] = v148;
    swift_storeEnumTagMultiPayload();
    uint64_t v102 = v178;
    char v103 = v184;
    uint64_t v104 = (uint64_t)v149;
    return _HashNode.Builder.init(_:_:)(v103, v104, v102);
  }
  uint64_t v150 = *(void *)(v175 + 72);
  BOOL v81 = __OFSUB__(16, v150);
  uint64_t v151 = 16 - v150;
  if (!v81)
  {
    uint64_t v186 = _HashNode.mapValuesToVoid(copy:extraBytes:)(1, v151 & ~(v151 >> 63), v147, (uint64_t)v146, a11, v105, a14);
    uint64_t v187 = v152;
    char v153 = v183;
    _HashNode.removeItem(at:_:)((uint64_t)v36, v152, v183, v166, v144);
    v163(v36, a11);
    sub_24A5B9AB0(v188, v189, v153, v144);
    swift_release();
    uint64_t v154 = v187;
    uint64_t v155 = v174;
    *unsigned int v174 = v186;
    v155[1] = v154;
    swift_storeEnumTagMultiPayload();
    uint64_t v102 = v178;
    char v103 = v184;
    uint64_t v104 = (uint64_t)v155;
    return _HashNode.Builder.init(_:_:)(v103, v104, v102);
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_24A49D8E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v7 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  size_t v11 = (char *)&v14 - v10;
  uint64_t v12 = *(void *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v14 - v10, a2, a3);
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v11, a3);
  return sub_24A544CAC((uint64_t)v9, a1, TupleTypeMetadata2);
}

uint64_t sub_24A49DA28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  unint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  char v7 = sub_24A5BB530();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, a3);
  return v7 & 1;
}

uint64_t sub_24A49DB28(uint64_t a1)
{
  return sub_24A49D8E4(a1, *(void *)(v1 + 48), *(void *)(v1 + 16));
}

uint64_t sub_24A49DB38(uint64_t a1)
{
  return sub_24A49DB54(a1) & 1;
}

uint64_t sub_24A49DB54(uint64_t a1)
{
  return sub_24A49DA28(a1, *(void *)(v1 + 48), *(void *)(v1 + 16)) & 1;
}

uint64_t sub_24A49DB7C(uint64_t a1)
{
  return sub_24A49C08C(a1, *(void *)(v1 + 48), *(void *)(v1 + 16));
}

void OrderedDictionary.subscript.getter()
{
}

void OrderedDictionary.modifyValue<A>(forKey:default:_:)()
{
}

void OrderedDictionary.modifyValue<A>(forKey:insertingDefault:at:_:)()
{
}

uint64_t Deque.description.getter(uint64_t a1)
{
  uint64_t v3 = a1;
  uint64_t v1 = type metadata accessor for Deque();
  swift_getWitnessTable();
  return _arrayDescription<A>(for:debug:typeName:)((uint64_t)&v3, 0, 0, 0, v1);
}

uint64_t sub_24A49DCDC()
{
  return Deque.description.getter(*v0);
}

uint64_t Deque.debugDescription.getter(uint64_t a1)
{
  uint64_t v4 = a1;
  sub_24A5BC7E0();
  sub_24A5BB6F0();
  swift_bridgeObjectRelease();
  sub_24A5BB6F0();
  uint64_t v1 = type metadata accessor for Deque();
  swift_getWitnessTable();
  uint64_t v2 = _arrayDescription<A>(for:debug:typeName:)((uint64_t)&v4, 1, 0x3C6575716544, 0xE600000000000000, v1);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_24A49DDC8()
{
  return Deque.debugDescription.getter(*v0);
}

uint64_t static TreeSet.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return TreeSet.isEqualSet(to:)(a4, a5, a6, a1, a2, a3, a7, a8);
}

uint64_t sub_24A49DE00(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return TreeSet.isEqualSet(to:)(*a2, a2[1], a2[2], *a1, a1[1], a1[2], *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t TreeSet.init(arrayLiteral:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = a1;
  uint64_t v5 = sub_24A5BB9F0();
  uint64_t WitnessTable = swift_getWitnessTable();
  return TreeSet.init<A>(_:)((uint64_t)&v8, a2, v5, a3, WitnessTable);
}

uint64_t sub_24A49DE98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = TreeSet.init(arrayLiteral:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
  *a3 = result;
  a3[1] = v5;
  a3[2] = v6;
  return result;
}

uint64_t _RopePath._value.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*_RopePath._value.modify())()
{
  return nullsub_1;
}

uint64_t static _RopePath._pathBitWidth.getter()
{
  return 56;
}

uint64_t _RopePath.init(height:)(uint64_t result)
{
  return result;
}

BOOL static _RopePath.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

BOOL sub_24A49DF1C(uint64_t *a1, uint64_t *a2)
{
  return static _RopePath.== infix(_:_:)(*a1, *a2);
}

uint64_t _RopePath.hash(into:)()
{
  return sub_24A5BC670();
}

uint64_t _RopePath.hashValue.getter()
{
  return sub_24A5BC690();
}

uint64_t sub_24A49DF98()
{
  return _RopePath.hashValue.getter();
}

uint64_t sub_24A49DFA0()
{
  return _RopePath.hash(into:)();
}

uint64_t sub_24A49DFA8()
{
  return sub_24A5BC690();
}

BOOL static _RopePath.< infix(_:_:)(unint64_t a1, unint64_t a2)
{
  return a1 < a2;
}

BOOL sub_24A49DFF4(unint64_t *a1, unint64_t *a2)
{
  return static _RopePath.< infix(_:_:)(*a1, *a2);
}

uint64_t _RopePath.description.getter(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = a1;
  char v6 = 0;
  while ((_BYTE)a1)
  {
    int v7 = a1 - 1;
LABEL_6:
    int v8 = a1;
    _RopePath.subscript.getter(a1, v5, a2, a3);
    sub_24A5BC430();
    sub_24A5BB6F0();
    swift_bridgeObjectRelease();
    LODWORD(a1) = v7;
    if (v8)
    {
      sub_24A5BB6F0();
      LODWORD(a1) = v7;
    }
  }
  if ((v6 & 1) == 0)
  {
    int v7 = 0;
    char v6 = 1;
    goto LABEL_6;
  }
  sub_24A5BB6F0();
  return 60;
}

uint64_t _RopePath.subscript.getter(unsigned __int8 a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1;
  int v8 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 24);
  uint64_t result = v8(a3, a4);
  uint64_t v10 = v7 * result;
  if ((unsigned __int128)(v7 * (__int128)result) >> 64 == (v7 * result) >> 63)
  {
    if (!__OFADD__(v10, 8)) {
      return (a2 >> (v10 + 8)) & ~(-1 << v8(a3, a4));
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_24A49E1A8(uint64_t a1)
{
  return _RopePath.description.getter(*v1, *(void *)(a1 + 16), *(void *)(a1 + 24));
}

Swift::Void __swiftcall _RopePath.popRoot()()
{
  if (((*v0 - 1) & 0xFFFFFF00) != 0) {
    __break(1u);
  }
  else {
    *uint64_t v0 = *v0 & 0xFFFFFFFFFFFFFF00 | (*v0 - 1);
  }
}

uint64_t _RopePath.subscript.setter(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = a2;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(a3 + 24);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 24);
  uint64_t result = v9(v7, v8);
  uint64_t v11 = v6 * result;
  if ((unsigned __int128)(v6 * (__int128)result) >> 64 != (v6 * result) >> 63)
  {
    __break(1u);
    goto LABEL_6;
  }
  char v12 = v11 + 8;
  if (__OFADD__(v11, 8))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = v9(v7, v8);
  if ((a1 & 0x8000000000000000) == 0)
  {
    *uint64_t v4 = *v4 & ((((-1 << result) + 1) << v12) - 1) | (a1 << v12);
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t (*_RopePath.subscript.modify(uint64_t a1, unsigned __int8 a2, uint64_t a3))(uint64_t a1)
{
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = a2;
  *(void *)a1 = _RopePath.subscript.getter(a2, *v3, *(void *)(a3 + 16), *(void *)(a3 + 24));
  return sub_24A49E300;
}

uint64_t sub_24A49E300(uint64_t a1)
{
  return _RopePath.subscript.setter(*(void *)a1, *(unsigned char *)(a1 + 24), *(void *)(a1 + 8));
}

Swift::Bool __swiftcall _RopePath.isEmpty(below:)(Swift::UInt8 below)
{
  uint64_t v3 = v1;
  uint64_t v4 = below;
  uint64_t v5 = (*(uint64_t (**)())(v2 + 24))();
  if ((unsigned __int128)(v4 * (__int128)v5) >> 64 == (v4 * v5) >> 63) {
    LOBYTE(v5) = (v3 & (~(-1 << (v4 * v5)) << 8)) == 0;
  }
  else {
    __break(1u);
  }
  return v5;
}

Swift::Void __swiftcall _RopePath.clear(below:)(Swift::UInt8 below)
{
  uint64_t v3 = below;
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)(v1 + 24) + 24))();
  if ((unsigned __int128)(v3 * (__int128)v4) >> 64 == (v3 * v4) >> 63) {
    *v2 &= (-256 << (v3 * v4)) | 0xFF;
  }
  else {
    __break(1u);
  }
}

uint64_t sub_24A49E418()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for _RopePath()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static _HashNode.spaceForNewItem.getter()
{
  return *(void *)(*(void *)(swift_getTupleTypeMetadata2() - 8) + 72);
}

uint64_t static _HashNode.spaceForSpawningChild.getter()
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v2 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t result = TupleTypeMetadata2 - 8;
  uint64_t v3 = *(void *)(v2 + 72);
  BOOL v4 = __OFSUB__(16, v3);
  uint64_t v5 = 16 - v3;
  if (!v4) {
    return v5 & ~(v5 >> 63);
  }
  __break(1u);
  return result;
}

uint64_t static _HashNode.spaceForNewChild.getter()
{
  return 16;
}

uint64_t sub_24A49E4F0()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_26979AE28);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  _emptySingleton = result;
  return result;
}

uint64_t *_emptySingleton.unsafeMutableAddressor()
{
  if (qword_26979ACF0 != -1) {
    swift_once();
  }
  return &_emptySingleton;
}

void *_HashNode.Storage.deinit()
{
  nullsub_1(v0 + 2, v0 + 4, *(void *)(*v0 + class metadata base offset for _HashNode.Storage), *(void *)(*v0 + class metadata base offset for _HashNode.Storage + 8), *(void *)(*v0 + class metadata base offset for _HashNode.Storage + 16));
  sub_24A49E608();
  return v0;
}

uint64_t sub_24A49E608()
{
  uint64_t v0 = _HashNode.UnsafeHandle.children.getter();
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for _HashNode();
  sub_24A4C1084(v0, v2, v3);
  uint64_t v4 = _HashNode.UnsafeHandle.reverseItems.getter();
  uint64_t v6 = v5;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return sub_24A4C1084(v4, v6, TupleTypeMetadata2);
}

uint64_t _HashNode.Storage.__deallocating_deinit()
{
  _HashNode.Storage.deinit();
  return MEMORY[0x270FA0228](v0, 32, 7);
}

_DWORD *static _HashNode.Storage.allocate(byteCapacity:)(uint64_t a1)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v4 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t result = (_DWORD *)(TupleTypeMetadata2 - 8);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 + 72);
  uint64_t v7 = 16;
  if (v6 > 16) {
    uint64_t v7 = v6;
  }
  uint64_t v8 = (a1 + v7 - 1) / v7;
  BOOL v9 = v8 < 1;
  unint64_t v10 = v8 - 1;
  if (v9) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = 1 << -(char)__clz(v10);
  }
  if ((unsigned __int128)(v7 * (__int128)v11) >> 64 != (v7 * v11) >> 63)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }
  uint64_t v12 = *(unsigned __int8 *)(v5 + 80);
  if (v12 >= 8 && __OFADD__(v7 * v11, v12 - 7)) {
    goto LABEL_13;
  }
  uint64_t v13 = (_DWORD *)swift_allocObject();
  int64_t v14 = _swift_stdlib_malloc_size(v13);
  int v15 = v14 - 32;
  if (v14 < 32) {
    int v15 = v14 - 17;
  }
  unsigned int v16 = v15 & 0xFFFFFFF0;
  void v13[4] = 0;
  v13[5] = 0;
  v13[6] = v16;
  v13[7] = v16;
  sub_24A49E888((uint64_t)(v13 + 4), (uint64_t)(v13 + 8));
  return v13;
}

uint64_t sub_24A49E888(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + *(unsigned int *)(a1 + 8);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v7 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t result = TupleTypeMetadata2 - 8;
  uint64_t v8 = ((~*(unsigned char *)(v7 + 80) | 0xFFFFFFFFFFFFFF00) & v4) - a2;
  if (v8 < 0)
  {
    __break(1u);
  }
  else if (!HIDWORD(v8))
  {
    *(_DWORD *)(a1 + 8) = v8;
    *(_DWORD *)(a1 + 12) = v8;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t static _HashNode.spaceForInlinedChild.getter()
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v2 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t result = TupleTypeMetadata2 - 8;
  uint64_t v3 = *(void *)(v2 + 72);
  BOOL v4 = __OFSUB__(v3, 16);
  uint64_t v5 = v3 - 16;
  if (!v4) {
    return v5 & ~(v5 >> 63);
  }
  __break(1u);
  return result;
}

Swift::Bool __swiftcall _HashNode.isUnique()()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

Swift::Bool __swiftcall _HashNode.hasFreeSpace(_:)(Swift::Int a1)
{
  uint64_t v2 = v1;
  swift_beginAccess();
  return *(unsigned int *)(v2 + 28) >= a1;
}

Swift::Void __swiftcall _HashNode.ensureUnique(isUnique:)(Swift::Bool isUnique)
{
  if (!isUnique)
  {
    uint64_t v3 = v1;
    uint64_t v4 = *v2;
    uint64_t v5 = v2[1];
    uint64_t v6 = sub_24A48AB90();
    uint64_t v7 = _HashNode.copy(withFreeSpace:)(v6, v4, v5, v3[2], v3[3], v3[4]);
    uint64_t v9 = v8;
    swift_release();
    *uint64_t v2 = v7;
    v2[1] = v9;
  }
}

uint64_t _HashNode.copy(withFreeSpace:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (_HashNode.isCollisionNode.getter(a2, a3, a4, a5, a6))
  {
    uint64_t v12 = nullsub_1(a2 + 16, a2 + 32, a4, a5, a6);
    sub_24A49F1E4(v12, v13, a2, a3, a4, a5, a6, v20);
    return v20[0];
  }
  else
  {
    int v15 = (__int32 *)nullsub_1(a2 + 16, a2 + 32, a4, a5, a6);
    __int32 v17 = *v15;
    int v16 = v15[1];
    v20[2] = a4;
    v20[3] = a5;
    v20[4] = a6;
    v20[5] = (uint64_t)v15;
    v20[6] = v18;
    return static _HashNode.allocate<A>(itemMap:childMap:count:extraBytes:initializingWith:)(v19, (uint64_t)v15, v17, v16, a3, a1, sub_24A49F714, (uint64_t)v20, a4, a5, MEMORY[0x263F8EE60] + 8, a6);
  }
}

Swift::Void __swiftcall _HashNode.ensureUnique(isUnique:withFreeSpace:)(Swift::Bool isUnique, Swift::Int withFreeSpace)
{
  uint64_t v5 = *v3;
  if (isUnique)
  {
    swift_beginAccess();
    if (*(unsigned int *)(v5 + 28) < withFreeSpace) {
      _HashNode.move(withFreeSpace:)(withFreeSpace);
    }
  }
  else
  {
    uint64_t v6 = _HashNode.copy(withFreeSpace:)(withFreeSpace, *v3, v3[1], v2[2], v2[3], v2[4]);
    uint64_t v8 = v7;
    swift_release();
    *uint64_t v3 = v6;
    v3[1] = v8;
  }
}

Swift::Void __swiftcall _HashNode.move(withFreeSpace:)(Swift::Int withFreeSpace)
{
  uint64_t v4 = *v2;
  uint64_t v5 = v2[1];
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  BOOL v9 = _HashNode.isCollisionNode.getter(*v2, v5, v6, v7, v8);
  unint64_t v10 = (__int32 *)nullsub_1(v4 + 16, v4 + 32, v6, v7, v8);
  if (v9)
  {
    uint64_t v13 = *v11;
    uint64_t v21 = v6;
    uint64_t v22 = v7;
    uint64_t v23 = v8;
    uint64_t v24 = v10;
    uint64_t v25 = v11;
    uint64_t v14 = static _HashNode.allocateCollision<A>(count:_:extraBytes:initializingWith:)((uint64_t)v10, v5, v13, 0, (uint64_t (*)(uint64_t))sub_24A49F6B4, (uint64_t)v20, v6, v7, MEMORY[0x263F8EE60] + 8, v8);
  }
  else
  {
    __int32 v17 = *v10;
    int v16 = v10[1];
    uint64_t v21 = v6;
    uint64_t v22 = v7;
    uint64_t v23 = v8;
    uint64_t v24 = v10;
    uint64_t v25 = v11;
    uint64_t v14 = static _HashNode.allocate<A>(itemMap:childMap:count:extraBytes:initializingWith:)(v12, (uint64_t)v10, v17, v16, v5, withFreeSpace, sub_24A49F6CC, (uint64_t)v20, v6, v7, MEMORY[0x263F8EE60] + 8, v8);
  }
  uint64_t v18 = v14;
  uint64_t v19 = v15;
  swift_release();
  *uint64_t v2 = v18;
  v2[1] = v19;
}

uint64_t static _HashNode.allocate<A>(itemMap:childMap:count:extraBytes:initializingWith:)(int8x8_t a1, uint64_t a2, __int32 a3, int a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  a1.i32[0] = a3;
  uint8x8_t v17 = (uint8x8_t)vcnt_s8(a1);
  v17.i16[0] = vaddlv_u8(v17);
  uint64_t v18 = v17.u32[0];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v22 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t result = TupleTypeMetadata2 - 8;
  uint64_t v23 = *(void *)(v22 + 72);
  uint64_t v24 = v18 * v23;
  if ((unsigned __int128)(v18 * (__int128)v23) >> 64 == (v18 * v23) >> 63)
  {
    v20.i32[0] = a4;
    uint8x8_t v25 = (uint8x8_t)vcnt_s8(v20);
    v25.i16[0] = vaddlv_u8(v25);
    uint64_t v35 = v25.u32[0];
    uint64_t v33 = a7;
    uint64_t v34 = v18 * v23;
    uint64_t v26 = v24 + 16 * v25.u32[0];
    int v32 = v24 + 16 * v25.i32[0];
    type metadata accessor for _HashNode.Storage();
    static _HashNode.Storage.allocate(byteCapacity:)(v26 + a6);
    int v31 = a4;
    uint64_t v27 = _HashNode.init(storage:count:)();
    LODWORD(v26) = a3;
    uint64_t v28 = (_DWORD *)nullsub_1(v27 + 16, v27 + 32, a9, a10, a12);
    uint64_t v30 = v29;
    swift_retain();
    sub_24A49EED0(v28, v30, v26, v31, v32, v35, v34, v18, v33);
    swift_release();
    return v27;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_DWORD *sub_24A49EED0(_DWORD *result, uint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  *uint64_t result = a3;
  result[1] = a4;
  uint64_t v9 = result[2];
  result[3] -= a5;
  if (__OFSUB__(v9, a7))
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for _HashNode();
    uint64_t v10 = sub_24A5BBD50();
    uint64_t v12 = v11;
    swift_getTupleTypeMetadata2();
    uint64_t v13 = sub_24A5BBD50();
    return (_DWORD *)a9(v10, v12, v13, v14);
  }
  return result;
}

uint64_t static _HashNode.allocateCollision<A>(count:_:extraBytes:initializingWith:)(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v18 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t result = TupleTypeMetadata2 - 8;
  uint64_t v19 = *(void *)(v18 + 72);
  int64_t v20 = a2 * v19;
  if ((unsigned __int128)(a2 * (__int128)v19) >> 64 == (a2 * v19) >> 63)
  {
    int64_t v21 = v20 + 8;
    int v28 = v20 + 8;
    uint64_t v29 = a2 * v19;
    type metadata accessor for _HashNode.Storage();
    static _HashNode.Storage.allocate(byteCapacity:)(v21 + a4);
    uint64_t v27 = a3;
    uint64_t v22 = _HashNode.init(storage:count:)();
    uint64_t v23 = a5;
    uint64_t v24 = (_DWORD *)nullsub_1(v22 + 16, v22 + 32, a7, a8, a10);
    uint64_t v26 = v25;
    swift_retain();
    sub_24A49F134(v24, v26, a2, v28, v27, v29, v23);
    swift_release();
    return v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_DWORD *sub_24A49F134(_DWORD *result, void *a2, unint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t))
{
  if ((a3 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (!HIDWORD(a3))
  {
    *uint64_t result = a3;
    result[1] = a3;
    result[3] -= a4;
    *a2 = a5;
    swift_getTupleTypeMetadata2();
    uint64_t v8 = sub_24A5BBD50();
    return (_DWORD *)a7(v8);
  }
  __break(1u);
  return result;
}

uint64_t sub_24A49F1E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v15 = _HashNode.collisionHash.getter(a3, a4, a5, a6, a7);
  uint64_t v19 = a5;
  uint64_t v20 = a6;
  uint64_t v21 = a7;
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  uint64_t result = static _HashNode.allocateCollision<A>(count:_:extraBytes:initializingWith:)(v15, a4, v15, 0, (uint64_t (*)(uint64_t))sub_24A49F6E4, (uint64_t)v18, a5, a6, MEMORY[0x263F8EE60] + 8, a7);
  *a8 = result;
  a8[1] = v17;
  return result;
}

uint64_t sub_24A49F2AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _HashNode.UnsafeHandle.reverseItems.getter();
  uint64_t v6 = v5;
  swift_getTupleTypeMetadata2();
  return UnsafeMutableBufferPointer.initialize(fromContentsOf:)(v4, v6, a1, a2);
}

uint64_t sub_24A49F348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = _HashNode.UnsafeHandle.children.getter();
  uint64_t v9 = v8;
  type metadata accessor for _HashNode();
  UnsafeMutableBufferPointer.initialize(fromContentsOf:)(v7, v9, a1, a2);
  uint64_t v10 = _HashNode.UnsafeHandle.reverseItems.getter();
  uint64_t v12 = v11;
  swift_getTupleTypeMetadata2();
  return UnsafeMutableBufferPointer.initialize(fromContentsOf:)(v10, v12, a3, a4);
}

void sub_24A49F45C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _HashNode.UnsafeHandle.reverseItems.getter();
  uint64_t v6 = v5;
  swift_getTupleTypeMetadata2();
  _sSr19CollectionsInternalE17moveInitializeAll14fromContentsOfySryxG_tF_0(v4, v6, a1, a2);
  _HashNode.UnsafeHandle.clear()();
}

void sub_24A49F52C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = _HashNode.UnsafeHandle.children.getter();
  uint64_t v9 = v8;
  type metadata accessor for _HashNode();
  _sSr19CollectionsInternalE17moveInitializeAll14fromContentsOfySryxG_tF_0(v7, v9, a1, a2);
  uint64_t v10 = _HashNode.UnsafeHandle.reverseItems.getter();
  uint64_t v12 = v11;
  swift_getTupleTypeMetadata2();
  _sSr19CollectionsInternalE17moveInitializeAll14fromContentsOfySryxG_tF_0(v10, v12, a3, a4);
  _HashNode.UnsafeHandle.clear()();
}

uint64_t type metadata accessor for _HashNode.Storage()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_24A49F670()
{
  return swift_initClassMetadata2();
}

uint64_t sub_24A49F6B4(uint64_t a1, uint64_t a2)
{
  return sub_24A49F6FC(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void))sub_24A49F45C);
}

uint64_t sub_24A49F6CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24A49F72C(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void))sub_24A49F52C);
}

uint64_t sub_24A49F6E4(uint64_t a1, uint64_t a2)
{
  return sub_24A49F6FC(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void))sub_24A49F2AC);
}

uint64_t sub_24A49F6FC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, void, void, void, void, void))
{
  return a3(a1, a2, v3[5], v3[6], v3[2], v3[3], v3[4]);
}

uint64_t sub_24A49F714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24A49F72C(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void))sub_24A49F348);
}

uint64_t sub_24A49F72C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void))
{
  return a5(a1, a2, a3, a4, v5[5], v5[6], v5[2], v5[3], v5[4]);
}

uint64_t BitSet.customMirror.getter(uint64_t a1)
{
  uint64_t v2 = sub_24A5BC6B0();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26979AE30);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[0] = a1;
  v13[1] = a1;
  uint64_t v9 = *MEMORY[0x263F8E7F8];
  uint64_t v10 = sub_24A5BC6A0();
  uint64_t v11 = *(void *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 104))(v8, v9, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F8E830], v2);
  sub_24A49F958();
  swift_bridgeObjectRetain_n();
  return sub_24A5BC6C0();
}

unint64_t sub_24A49F958()
{
  unint64_t result = qword_26979AE38;
  if (!qword_26979AE38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979AE38);
  }
  return result;
}

uint64_t sub_24A49F9AC()
{
  uint64_t v1 = sub_24A5BC6B0();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26979AE30);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12[0] = *v0;
  v12[1] = v12[0];
  uint64_t v8 = *MEMORY[0x263F8E7F8];
  uint64_t v9 = sub_24A5BC6A0();
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 104))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F8E830], v1);
  sub_24A49F958();
  swift_bridgeObjectRetain_n();
  return sub_24A5BC6C0();
}

uint64_t _UnmanagedHashNode.ref.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*_UnmanagedHashNode.ref.modify())()
{
  return nullsub_1;
}

uint64_t _UnmanagedHashNode.init(_:)(uint64_t a1)
{
  return a1;
}

BOOL static _UnmanagedHashNode.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

BOOL sub_24A49FC00(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t _UnmanagedHashNode.description.getter()
{
  return 30768;
}

uint64_t sub_24A49FC80()
{
  return 30768;
}

uint64_t _UnmanagedHashNode.withRaw<A>(_:)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

BOOL _UnmanagedHashNode.hasItems.getter(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) != 0;
}

BOOL _UnmanagedHashNode.hasChildren.getter(uint64_t a1)
{
  swift_beginAccess();
  int v2 = *(_DWORD *)(a1 + 20);
  return *(_DWORD *)(a1 + 16) != v2 && v2 != 0;
}

uint64_t _UnmanagedHashNode.itemCount.getter(uint64_t a1)
{
  swift_beginAccess();
  unsigned int v2 = *(_DWORD *)(a1 + 16);
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v2 == *(_DWORD *)(a1 + 20)) {
    return v2;
  }
  else {
    return v3.u32[0];
  }
}

uint64_t _UnmanagedHashNode.childCount.getter(uint64_t a1)
{
  swift_beginAccess();
  uint64_t result = 0;
  if (*(_DWORD *)(a1 + 16) != *(_DWORD *)(a1 + 20))
  {
    v2.i32[0] = *(_DWORD *)(a1 + 20);
    uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
    v4.i16[0] = vaddlv_u8(v4);
    return v4.u32[0];
  }
  return result;
}

uint64_t _UnmanagedHashNode.itemsEndSlot.getter(uint64_t a1)
{
  swift_beginAccess();
  unsigned int v2 = *(_DWORD *)(a1 + 16);
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v2 == *(_DWORD *)(a1 + 20)) {
    return v2;
  }
  else {
    return v3.u32[0];
  }
}

uint64_t _UnmanagedHashNode.childrenEndSlot.getter(uint64_t a1)
{
  swift_beginAccess();
  uint8x8_t v2 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned int *)(a1 + 20));
  v2.i16[0] = vaddlv_u8(v2);
  if (*(_DWORD *)(a1 + 16) == *(_DWORD *)(a1 + 20)) {
    return 0;
  }
  else {
    return v2.u32[0];
  }
}

uint64_t _UnmanagedHashNode.unmanagedChild(at:)(unsigned int a1, uint64_t a2)
{
  return *(void *)(a2 + 16 * a1 + 32);
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for _UnmanagedHashNode(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 8)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _UnmanagedHashNode(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 8) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _UnmanagedHashNode()
{
  return &type metadata for _UnmanagedHashNode;
}

uint64_t BitArray.encode(to:)(void *a1, uint64_t a2)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24A5BC710();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v7, v8);
  sub_24A5BC4C0();
  if (!v2)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    if (v4)
    {
      swift_bridgeObjectRetain();
      for (uint64_t i = 0; i != v4; ++i)
      {
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v7, v8);
        sub_24A5BC4C0();
      }
      swift_bridgeObjectRelease();
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

char *BitArray.init(from:)(void *a1)
{
  return sub_24A4A0224(a1);
}

char *sub_24A4A01DC@<X0>(void *a1@<X0>, char **a2@<X8>)
{
  uint64_t result = sub_24A4A0224(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_24A4A0208(void *a1)
{
  return BitArray.encode(to:)(a1, *v1);
}

char *sub_24A4A0224(void *a1)
{
  uint64_t v3 = sub_24A5BC0D0();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v21[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (uint64_t)__swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24A5BC6E0();
  if (v1) {
    goto LABEL_19;
  }
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v21, v22);
  unint64_t v8 = sub_24A5BC480();
  __swift_project_boxed_opaque_existential_1(v21, v22);
  uint64_t v9 = sub_24A5BC460();
  if (v9 <= 1) {
    uint64_t v11 = 1;
  }
  else {
    uint64_t v11 = v9;
  }
  uint64_t v12 = v11 - 1;
  char v13 = v10 & 1;
  if (v10) {
    uint64_t v14 = v9;
  }
  else {
    uint64_t v14 = v12;
  }
  uint64_t result = sub_24A50A470(v21, v14, v13);
  uint64_t v7 = (uint64_t)result;
  unint64_t v16 = *((void *)result + 2);
  if (v16 >> 57)
  {
    __break(1u);
  }
  else
  {
    if (((v16 << 6) & 0x8000000000000000) != 0 || v16 << 6 < v8) {
      goto LABEL_18;
    }
    if (v16 && (v16 - 1) << 6 >= v8) {
      goto LABEL_18;
    }
    if ((v8 & 0x3F) == 0)
    {
LABEL_21:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      return (char *)v7;
    }
    if (v16)
    {
      if (*(void *)&result[8 * v16 + 24] >> (v8 & 0x3F))
      {
LABEL_18:
        swift_bridgeObjectRelease();
        __swift_project_boxed_opaque_existential_1(v21, v22);
        sub_24A5BC440();
        sub_24A5BC0C0();
        uint64_t v7 = sub_24A5BC0E0();
        swift_allocError();
        uint64_t v19 = v18;
        (*(void (**)(uint64_t, char *, uint64_t))(v4 + 16))(v18, v6, v3);
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v7 - 8) + 104))(v19, *MEMORY[0x263F8DCB8], v7);
        swift_willThrow();
        (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
LABEL_19:
        __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
        return (char *)v7;
      }
      goto LABEL_21;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_24A4A0558()
{
  unint64_t result = qword_26979AE40;
  if (!qword_26979AE40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979AE40);
  }
  return result;
}

unint64_t sub_24A4A05B0()
{
  unint64_t result = qword_26979AE48;
  if (!qword_26979AE48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979AE48);
  }
  return result;
}

void sub_24A4A0604(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE78];
}

BOOL sub_24A4A0614(Swift::Int *a1)
{
  return BitSet.contains(_:)(*a1);
}

uint64_t sub_24A4A0620@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_24A4A0698(a1, (uint64_t (*)(void, void))BitSet.union(_:), a2);
}

uint64_t sub_24A4A0638@<X0>(int8x16_t **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = BitSet.intersection(_:)(*a1, *v2);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t sub_24A4A0680@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_24A4A0698(a1, (uint64_t (*)(void, void))BitSet.symmetricDifference(_:), a2);
}

uint64_t sub_24A4A0698@<X0>(void *a1@<X0>, uint64_t (*a2)(void, void)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v5 = a2(*a1, *v3);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v5;
  return result;
}

BOOL sub_24A4A06F0(Swift::Int *a1, Swift::Int *a2)
{
  Swift::tuple_inserted_Bool_memberAfterInsert_Int v3 = BitSet.insert(_:)(*a2);
  *a1 = v3.memberAfterInsert;
  return v3.inserted;
}

Swift::Int sub_24A4A0720@<X0>(Swift::Int *a1@<X0>, uint64_t a2@<X8>)
{
  Swift::Int_optional v4 = BitSet.remove(_:)(*a1);
  *(void *)a2 = v4.value;
  *(unsigned char *)(a2 + 8) = v4.is_nil;
  return v4.value;
}

uint64_t sub_24A4A0754@<X0>(Swift::Int *a1@<X0>, uint64_t a2@<X8>)
{
  Swift::Int v3 = *a1;
  uint64_t result = *(_OWORD *)&BitSet.insert(_:)(*a1);
  if (result) {
    Swift::Int v5 = v3;
  }
  else {
    Swift::Int v5 = 0;
  }
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = (result & 1) == 0;
  return result;
}

uint64_t sub_24A4A07A0(int8x16_t **a1)
{
  BitSet.formUnion(_:)(*a1);
  return swift_bridgeObjectRelease();
}

unsigned char *sub_24A4A07DC(int8x16_t **a1)
{
  return BitSet.formIntersection(_:)(*a1);
}

uint64_t sub_24A4A07E4(int8x16_t **a1)
{
  BitSet.formSymmetricDifference(_:)(*a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_24A4A0820@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = BitSet.subtracting(_:)(*a1, *v2);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

BOOL sub_24A4A0868(void **a1)
{
  return BitSet.isSubset(of:)(*a1, *v1);
}

BOOL sub_24A4A0874(void **a1)
{
  return BitSet.isDisjoint(with:)(*a1, *v1);
}

BOOL sub_24A4A0880(void **a1)
{
  return BitSet.isSubset(of:)(*v1, *a1);
}

uint64_t sub_24A4A088C()
{
  return BitSet.isEmpty.getter(*v0);
}

uint64_t sub_24A4A0894@<X0>(uint64_t a1@<X0>, ValueMetadata *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = BitSet.init<A>(_:)(a1, a2);
  *a3 = result;
  return result;
}

unsigned char *sub_24A4A08BC(int8x16_t **a1)
{
  return BitSet.subtract(_:)(*a1);
}

uint64_t OrderedSet.formSymmetricDifference(_:)()
{
  sub_24A4A09C8();
  swift_release();
  return swift_release();
}

{
  uint64_t vars8;

  sub_24A4A09C8();
  swift_release();
  return swift_release();
}

uint64_t OrderedSet.formSymmetricDifference<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_24A4A0A24();
  Swift::Int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8);
  return v5(a1, a3);
}

uint64_t sub_24A4A09C8()
{
  uint64_t v1 = sub_24A55CA7C();
  uint64_t v3 = v2;
  swift_release();
  uint64_t result = swift_release();
  *uint64_t v0 = v1;
  v0[1] = v3;
  return result;
}

uint64_t sub_24A4A0A24()
{
  uint64_t v1 = sub_24A55CB90();
  uint64_t v3 = v2;
  swift_release();
  uint64_t result = swift_release();
  *uint64_t v0 = v1;
  v0[1] = v3;
  return result;
}

uint64_t Rope._root.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for Rope._Node();
  uint64_t v3 = sub_24A5BBD20();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t Rope._root.setter(uint64_t a1)
{
  type metadata accessor for Rope._Node();
  uint64_t v3 = sub_24A5BBD20();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);
  return v4(v1, a1, v3);
}

uint64_t (*Rope._root.modify())()
{
  return nullsub_1;
}

uint64_t Rope._version.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 36));
}

uint64_t Rope._version.setter(uint64_t result, uint64_t a2)
{
  *(void *)(v2 + *(int *)(a2 + 36)) = result;
  return result;
}

uint64_t (*Rope._version.modify())()
{
  return nullsub_1;
}

uint64_t Rope.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Rope._Node();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(a1, 1, 1, v2);
  uint64_t v4 = sub_24A5BBD20();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  v3(a1, 1, 1, v2);
  uint64_t v7 = 0;
  MEMORY[0x24C5C7E90](&v7, 8);
  uint64_t v5 = v7;
  uint64_t result = type metadata accessor for Rope();
  *(void *)(a1 + *(int *)(result + 36)) = v5;
  return result;
}

uint64_t type metadata accessor for Rope()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Rope.init(root:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Rope._Node();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(a2, 1, 1, v4);
  uint64_t v5 = sub_24A5BBD20();
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(a2, a1, v5);
  uint64_t v9 = 0;
  MEMORY[0x24C5C7E90](&v9, 8);
  uint64_t v7 = v9;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
  uint64_t result = type metadata accessor for Rope();
  *(void *)(a2 + *(int *)(result + 36)) = v7;
  return result;
}

uint64_t Rope.root.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Rope._Node();
  uint64_t v5 = sub_24A5BBD20();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unint64_t v8 = (char *)&v11 - v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v11 - v7, v2, v5);
  uint64_t v9 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v4) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a1, v8, v4);
  }
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  __break(1u);
  return result;
}

uint64_t (*Rope.root.modify())(void, void, void, void, void)
{
  uint64_t v1 = type metadata accessor for Rope._Node();
  uint64_t result = (uint64_t (*)(void, void, void, void, void))(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 48))(v0, 1, v1);
  if (result != 1) {
    return nullsub_1;
  }
  __break(1u);
  return result;
}

uint64_t Rope.root.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Rope._Node();
  uint64_t v6 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v1, 1, v3);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 40);
    return v5(v1, a1, v3);
  }
  return result;
}

uint64_t Rope.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v27 = a1;
  uint64_t v24 = *(void *)(a2 - 8);
  uint64_t v5 = v24;
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = v8;
  uint64_t v9 = type metadata accessor for Rope._Item();
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v23 - v10;
  uint64_t v12 = type metadata accessor for Rope._Node();
  uint64_t v26 = sub_24A5BBD20();
  uint64_t v13 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  uint64_t v15 = (uint64_t **)((char *)&v23 - v14);
  unint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
  v16(a3, 1, 1, v12);
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v18 = v27;
  v17(v7, v27, a2);
  uint64_t v19 = (uint64_t)v7;
  uint64_t v20 = v25;
  Rope._Item.init(_:)(v19, a2, (uint64_t)v11);
  static Rope._Node.createLeaf(_:)((uint64_t)v11, a2, v20, v15);
  v16((uint64_t)v15, 0, 1, v12);
  (*(void (**)(uint64_t, uint64_t **, uint64_t))(v13 + 40))(a3, v15, v26);
  uint64_t v28 = 0;
  MEMORY[0x24C5C7E90](&v28, 8);
  uint64_t v21 = v28;
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v18, a2);
  uint64_t result = type metadata accessor for Rope();
  *(void *)(a3 + *(int *)(result + 36)) = v21;
  return result;
}

Swift::Void __swiftcall Rope._ensureUnique()()
{
  uint64_t v1 = type metadata accessor for Rope._Node();
  uint64_t v2 = sub_24A5BBD20();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v8 - v4;
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))((char *)&v8 - v4, v0, v2);
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v1 - 8) + 48);
  int v7 = v6(v5, 1, v1);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (v7 != 1)
  {
    if (v6(v0, 1, v1) == 1) {
      __break(1u);
    }
    else {
      Rope._Node.ensureUnique()();
    }
  }
}

uint64_t Rope.isSingleton.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Rope._Node();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v23 = (char *)&v21 - v4;
  uint64_t v5 = sub_24A5BBD20();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v21 - v10;
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v22 = v1;
  v12((char *)&v21 - v10, v1, v5);
  uint64_t v24 = v3;
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48);
  int v14 = v13(v11, 1, v2);
  uint64_t v15 = v11;
  unint64_t v16 = *(void (**)(char *, uint64_t))(v6 + 8);
  v16(v15, v5);
  if (v14 == 1) {
    return 0;
  }
  v12(v9, v22, v5);
  if (v13(v9, 1, v2) != 1)
  {
    uint64_t v18 = v23;
    uint64_t v19 = v24;
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v23, v9, v2);
    BOOL v17 = Rope._Node.isSingleton.getter(v2);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v18, v2);
    return v17;
  }
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v16)(v9, v5);
  __break(1u);
  return result;
}

BOOL Rope.isIdentical(to:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v23 = a1;
  uint64_t v3 = type metadata accessor for Rope._Node();
  uint64_t v4 = sub_24A5BBD20();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (uint64_t *)((char *)&v20 - v9);
  uint64_t v22 = v5;
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v20 - v9, v2, v4);
  uint64_t v12 = *(void *)(v3 - 8);
  uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v13((char *)v10, 1, v3) == 1)
  {
    uint64_t v14 = v22;
    (*(void (**)(uint64_t *, uint64_t))(v22 + 8))(v10, v4);
    uint64_t v21 = 0;
  }
  else
  {
    uint64_t v15 = *v10;
    uint64_t v20 = *(void (**)(uint64_t *, uint64_t))(v12 + 8);
    uint64_t v21 = v15;
    swift_unknownObjectRetain();
    v20(v10, v3);
    uint64_t v14 = v22;
  }
  v11(v8, v23, v4);
  if (v13(v8, 1, v3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v4);
    if (!v21) {
      return 1;
    }
    goto LABEL_12;
  }
  uint64_t v16 = *(void *)v8;
  BOOL v17 = *(void (**)(char *, uint64_t))(v12 + 8);
  swift_unknownObjectRetain();
  v17(v8, v3);
  uint64_t v18 = v21;
  if (v21)
  {
    if (v16)
    {
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return v16 == v18;
    }
    goto LABEL_12;
  }
  if (v16)
  {
LABEL_12:
    swift_unknownObjectRelease();
    return 0;
  }
  return 1;
}

uint64_t sub_24A4A19F0()
{
  type metadata accessor for Rope._Node();
  uint64_t result = sub_24A5BBD20();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_24A4A1A98(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  size_t v7 = ((v6 + 8) & ~v6) + *(void *)(v5 + 64);
  if (v6 <= 7 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0 && ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= 0x18)
  {
    uint64_t v11 = AssociatedTypeWitness;
    uint64_t v12 = ~v6;
    if ((*(_DWORD *)(v5 + 84) & 0x80000000) != 0)
    {
      if ((*(unsigned int (**)(unint64_t))(v5 + 48))(((unint64_t)a2 + v6 + 8) & v12))
      {
LABEL_14:
        memcpy(a1, a2, v7);
LABEL_17:
        *(void *)(((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
        return a1;
      }
    }
    else
    {
      uint64_t v13 = *a2;
      if ((unint64_t)*a2 >= 0xFFFFFFFF) {
        LODWORD(v13) = -1;
      }
      if (v13 != -1) {
        goto LABEL_14;
      }
    }
    *a1 = *a2;
    uint64_t v14 = (char *)a2 + v6;
    uint64_t v15 = ((unint64_t)a1 + v6 + 8) & v12;
    uint64_t v16 = (unint64_t)(v14 + 8) & v12;
    BOOL v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_unknownObjectRetain();
    v17(v15, v16, v11);
    goto LABEL_17;
  }
  uint64_t v10 = *a2;
  *a1 = *a2;
  a1 = (uint64_t *)(v10 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
  swift_retain();
  return a1;
}

uint64_t sub_24A4A1C50(uint64_t *a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = ~v4;
  uint64_t v9 = v3;
  if ((*(_DWORD *)(v3 + 84) & 0x80000000) != 0)
  {
    uint64_t result = (*(uint64_t (**)(unint64_t))(v3 + 48))(((unint64_t)a1 + v4 + 8) & v5);
    if (result) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v6 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v6) = -1;
  }
  uint64_t result = (v6 + 1);
  if (v6 == -1)
  {
LABEL_7:
    swift_unknownObjectRelease();
    uint64_t v8 = *(uint64_t (**)(unint64_t, uint64_t))(v9 + 8);
    return v8(((unint64_t)a1 + v4 + 8) & v5, AssociatedTypeWitness);
  }
  return result;
}

uint64_t *sub_24A4A1D6C(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = ~v6;
  uint64_t v8 = (v6 + 8) & ~v6;
  uint64_t v9 = *(void *)(v5 + 64);
  if ((*(_DWORD *)(v5 + 84) & 0x80000000) == 0)
  {
    uint64_t v10 = *a2;
    if ((unint64_t)*a2 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    size_t v11 = v8 + v9;
    if (v10 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    *a1 = *a2;
    uint64_t v12 = (char *)a2 + v6;
    uint64_t v13 = ((unint64_t)a1 + v6 + 8) & v7;
    uint64_t v14 = (unint64_t)(v12 + 8) & v7;
    uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_unknownObjectRetain();
    v15(v13, v14, AssociatedTypeWitness);
    goto LABEL_8;
  }
  size_t v11 = v8 + v9;
  if (!(*(unsigned int (**)(unint64_t))(v5 + 48))(((unint64_t)a2 + v6 + 8) & v7)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(a1, a2, v11);
LABEL_8:
  *(void *)(((unint64_t)a1 + v11 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v11 + 7) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *sub_24A4A1EE4(void *a1, void *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = ~v7;
  size_t v9 = ((v7 + 8) & ~v7) + *(void *)(v5 + 64);
  if ((v6 & 0x80000000) != 0)
  {
    uint64_t v12 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48);
    int v15 = v12(((unint64_t)a1 + v7 + 8) & v8, *(unsigned int *)(v5 + 84), AssociatedTypeWitness);
    int v11 = v12(((unint64_t)a2 + v7 + 8) & v8, v6, AssociatedTypeWitness);
    if (!v15)
    {
LABEL_5:
      if (!v11)
      {
        *a1 = *a2;
        swift_unknownObjectRetain();
        swift_unknownObjectRelease();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 24))(((unint64_t)a1 + v7 + 8) & v8, ((unint64_t)a2 + v7 + 8) & v8, AssociatedTypeWitness);
        goto LABEL_12;
      }
      swift_unknownObjectRelease();
      (*(void (**)(unint64_t, uint64_t))(v5 + 8))(((unint64_t)a1 + v7 + 8) & v8, AssociatedTypeWitness);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v10 = *a2;
    if (*a2 >= 0xFFFFFFFFuLL) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 + 1;
    if (*a1 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v11)
  {
    *a1 = *a2;
    uint64_t v13 = *(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16);
    swift_unknownObjectRetain();
    v13(((unint64_t)a1 + v7 + 8) & v8, ((unint64_t)a2 + v7 + 8) & v8, AssociatedTypeWitness);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(a1, a2, v9);
LABEL_12:
  *(void *)(((unint64_t)a1 + v9 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t *sub_24A4A211C(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = ~v6;
  uint64_t v8 = (v6 + 8) & ~v6;
  uint64_t v9 = *(void *)(v5 + 64);
  if ((*(_DWORD *)(v5 + 84) & 0x80000000) == 0)
  {
    uint64_t v10 = *a2;
    if ((unint64_t)*a2 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    size_t v11 = v8 + v9;
    if (v10 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    *a1 = *a2;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 32))(((unint64_t)a1 + v6 + 8) & v7, ((unint64_t)a2 + v6 + 8) & v7, AssociatedTypeWitness);
    goto LABEL_8;
  }
  size_t v11 = v8 + v9;
  if (!(*(unsigned int (**)(unint64_t))(v5 + 48))(((unint64_t)a2 + v6 + 8) & v7)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(a1, a2, v11);
LABEL_8:
  *(void *)(((unint64_t)a1 + v11 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v11 + 7) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *sub_24A4A2288(void *a1, void *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = ~v7;
  size_t v9 = ((v7 + 8) & ~v7) + *(void *)(v5 + 64);
  if ((v6 & 0x80000000) != 0)
  {
    uint64_t v12 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48);
    int v14 = v12(((unint64_t)a1 + v7 + 8) & v8, *(unsigned int *)(v5 + 84), AssociatedTypeWitness);
    int v11 = v12(((unint64_t)a2 + v7 + 8) & v8, v6, AssociatedTypeWitness);
    if (!v14)
    {
LABEL_5:
      if (!v11)
      {
        *a1 = *a2;
        swift_unknownObjectRelease();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 40))(((unint64_t)a1 + v7 + 8) & v8, ((unint64_t)a2 + v7 + 8) & v8, AssociatedTypeWitness);
        goto LABEL_12;
      }
      swift_unknownObjectRelease();
      (*(void (**)(unint64_t, uint64_t))(v5 + 8))(((unint64_t)a1 + v7 + 8) & v8, AssociatedTypeWitness);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v10 = *a2;
    if (*a2 >= 0xFFFFFFFFuLL) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 + 1;
    if (*a1 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v11)
  {
    *a1 = *a2;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 32))(((unint64_t)a1 + v7 + 8) & v8, ((unint64_t)a2 + v7 + 8) & v8, AssociatedTypeWitness);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(a1, a2, v9);
LABEL_12:
  *(void *)(((unint64_t)a1 + v9 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_24A4A24AC(_DWORD *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = v5;
  unsigned int v7 = *(_DWORD *)(v5 + 84);
  if (v7 <= 0x7FFFFFFF) {
    int v8 = 0x7FFFFFFF;
  }
  else {
    int v8 = *(_DWORD *)(v5 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v5 + 80);
  if (!a2) {
    return 0;
  }
  if (v8 - 1 < a2)
  {
    unint64_t v10 = ((*(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) + ((v9 + 8) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 8;
    uint64_t v11 = v10 & 0xFFFFFFF8;
    unsigned int v12 = a2 - v8 + 2;
    if ((v10 & 0xFFFFFFF8) != 0) {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      unsigned int v13 = 4;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v12 < 0x100) {
      unsigned int v13 = 1;
    }
    if (v12 >= 2) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    switch(v14)
    {
      case 1:
        int v15 = *((unsigned __int8 *)a1 + v10);
        if (!v15) {
          break;
        }
        goto LABEL_21;
      case 2:
        int v15 = *(unsigned __int16 *)((char *)a1 + v10);
        if (v15) {
          goto LABEL_21;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x24A4A2650);
      case 4:
        int v15 = *(_DWORD *)((char *)a1 + v10);
        if (!v15) {
          break;
        }
LABEL_21:
        int v17 = v15 - 1;
        if (v11)
        {
          int v17 = 0;
          LODWORD(v11) = *a1;
        }
        return (v11 | v17) + v8;
      default:
        break;
    }
  }
  if ((v7 & 0x80000000) != 0)
  {
    unsigned int v19 = (*(uint64_t (**)(unint64_t))(v6 + 48))(((unint64_t)a1 + v9 + 8) & ~v9);
  }
  else
  {
    uint64_t v18 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v18) = -1;
    }
    unsigned int v19 = v18 + 1;
  }
  if (v19 >= 2) {
    return v19 - 1;
  }
  else {
    return 0;
  }
}

void sub_24A4A2664(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  unsigned int v10 = v9 - 1;
  size_t v11 = ((v8 + 8) & ~v8) + *(void *)(v6 + 64);
  unint64_t v12 = ((v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v9 - 1 >= a3)
  {
    int v15 = 0;
    if (v10 >= a2)
    {
LABEL_16:
      switch(v15)
      {
        case 1:
          a1[v12] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_29;
        case 2:
          *(_WORD *)&a1[v12] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_29;
        case 3:
          goto LABEL_56;
        case 4:
          *(_DWORD *)&a1[v12] = 0;
          goto LABEL_28;
        default:
LABEL_28:
          if (a2)
          {
LABEL_29:
            if (a2 + 1 <= v9)
            {
              if (a2 != -1)
              {
                if ((v7 & 0x80000000) != 0)
                {
                  uint64_t v22 = *(void (**)(unint64_t, void))(v6 + 56);
                  v22((unint64_t)&a1[v8 + 8] & ~v8, a2 + 1);
                }
                else
                {
                  if (((a2 + 1) & 0x80000000) != 0) {
                    uint64_t v21 = a2 - 0x7FFFFFFF;
                  }
                  else {
                    uint64_t v21 = a2;
                  }
                  *(void *)a1 = v21;
                }
              }
            }
            else
            {
              if (v11 <= 3) {
                int v18 = ~(-1 << (8 * v11));
              }
              else {
                int v18 = -1;
              }
              if (v11)
              {
                int v19 = v18 & (a2 - v9);
                if (v11 <= 3) {
                  int v20 = v11;
                }
                else {
                  int v20 = 4;
                }
                bzero(a1, v11);
                switch(v20)
                {
                  case 2:
                    *(_WORD *)a1 = v19;
                    break;
                  case 3:
                    *(_WORD *)a1 = v19;
                    a1[2] = BYTE2(v19);
                    break;
                  case 4:
                    *(_DWORD *)a1 = v19;
                    break;
                  default:
                    *a1 = v19;
                    break;
                }
              }
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v13 = a3 - v9 + 2;
    if (((v11 + 7) & 0xFFFFFFF8) != 0xFFFFFFF8) {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (v10 >= a2) {
      goto LABEL_16;
    }
  }
  unsigned int v16 = a2 - v9;
  if (((v11 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v17 = v16 + 1;
  }
  else {
    int v17 = 1;
  }
  if (((v11 + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    bzero(a1, ((v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *(_DWORD *)a1 = v16;
  }
  switch(v15)
  {
    case 1:
      a1[v12] = v17;
      break;
    case 2:
      *(_WORD *)&a1[v12] = v17;
      break;
    case 3:
LABEL_56:
      __break(1u);
      JUMPOUT(0x24A4A2914);
    case 4:
      *(_DWORD *)&a1[v12] = v17;
      break;
    default:
      return;
  }
}

uint64_t TreeSet.hash(into:)(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  unint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_24A5BBD20();
  MEMORY[0x270FA5388](v13 - 8);
  int v15 = (char *)v23 - v14;
  long long v16 = a1[3];
  v31[4] = a1[2];
  v31[5] = v16;
  uint64_t v32 = *((void *)a1 + 8);
  long long v18 = *a1;
  long long v17 = a1[1];
  v23[1] = a1;
  v31[2] = v18;
  v31[3] = v17;
  uint64_t v26 = sub_24A5BC680();
  TreeSet.makeIterator()(a2, v30);
  uint64_t v27 = a6;
  uint64_t v25 = type metadata accessor for TreeSet.Iterator();
  TreeSet.Iterator.next()(v25, (uint64_t)v15);
  uint64_t v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v24(v15, 1, a5) != 1)
  {
    uint64_t v19 = 0;
    int v20 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    do
    {
      v20(v12, v15, a5);
      uint64_t v21 = sub_24A5BB370();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, a5);
      v19 ^= v21;
      TreeSet.Iterator.next()(v25, (uint64_t)v15);
    }
    while (v24(v15, 1, a5) != 1);
  }
  v28[6] = v30[6];
  v29[0] = v31[0];
  *(_OWORD *)((char *)v29 + 11) = *(_OWORD *)((char *)v31 + 11);
  void v28[2] = v30[2];
  v28[3] = v30[3];
  v28[4] = v30[4];
  v28[5] = v30[5];
  v28[0] = v30[0];
  v28[1] = v30[1];
  sub_24A4A2BC4((uint64_t)v28);
  return sub_24A5BC630();
}

uint64_t sub_24A4A2BC4(uint64_t a1)
{
  return a1;
}

uint64_t TreeSet.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_24A5BC610();
  TreeSet.hash(into:)(v11, a1, a2, a3, a4, a5);
  return sub_24A5BC690();
}

uint64_t sub_24A4A2C68(uint64_t a1)
{
  return TreeSet.hashValue.getter(*v1, v1[1], v1[2], *(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t sub_24A4A2C7C(long long *a1, uint64_t a2)
{
  return TreeSet.hash(into:)(a1, *v2, v2[1], v2[2], *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t sub_24A4A2C90(uint64_t a1, uint64_t a2)
{
  sub_24A5BC610();
  TreeSet.hash(into:)(v5, *v2, v2[1], v2[2], *(void *)(a2 + 16), *(void *)(a2 + 24));
  return sub_24A5BC690();
}

uint64_t sub_24A4A2CDC()
{
  return swift_getWitnessTable();
}

uint64_t static OrderedDictionary<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((static OrderedSet.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  return MEMORY[0x270F9EC98](a3, a6, a8, a10);
}

uint64_t sub_24A4A2D74(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  return static OrderedDictionary<>.== infix(_:_:)(*a1, a1[1], a1[2], *a2, a2[1], a2[2], a3[2], a3[3], a3[4], *(void *)(a4 - 8)) & 1;
}

__n128 BigSubstring.init(_unchecked:in:)@<Q0>(_OWORD *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  long long v3 = a1[1];
  *(_OWORD *)a3 = *a1;
  *(_OWORD *)(a3 + 16) = v3;
  long long v4 = *a2;
  long long v5 = a2[1];
  *(_OWORD *)(a3 + 32) = a1[2];
  *(_OWORD *)(a3 + 48) = v4;
  __n128 result = (__n128)a2[2];
  long long v7 = a2[3];
  *(_OWORD *)(a3 + 64) = v5;
  *(__n128 *)(a3 + 80) = result;
  *(_OWORD *)(a3 + 96) = v7;
  return result;
}

__n128 BigSubstring.init(_:in:)@<Q0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  __n128 v6 = *(__n128 *)(a1 + 16);
  uint64_t v28 = *(void *)(a1 + 40);
  uint64_t v29 = *(void *)(a1 + 32);
  unint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  unint64_t v9 = a2[2];
  uint64_t v10 = a2[3];
  __n128 v27 = v6;
  v31[0] = *(_OWORD *)a1;
  long long v30 = v31[0];
  long long v11 = *(_OWORD *)(a1 + 32);
  v31[1] = v6;
  v31[2] = v11;
  sub_24A4974C4((uint64_t)v31, (uint64_t)v32);
  sub_24A497498((uint64_t)v32);
  unint64_t v12 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(v7, v8, v9, v10);
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  unint64_t v19 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(a2[4], a2[5], a2[6], a2[7]);
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  sub_24A496BE8(a1);
  __n128 result = v27;
  *(_OWORD *)a3 = v30;
  *(__n128 *)(a3 + 16) = v27;
  *(void *)(a3 + 32) = v29;
  *(void *)(a3 + 40) = v28;
  *(void *)(a3 + 48) = v12;
  *(void *)(a3 + 56) = v14;
  *(void *)(a3 + 64) = v16;
  *(void *)(a3 + 72) = v18;
  *(void *)(a3 + 80) = v19;
  *(void *)(a3 + 88) = v21;
  *(void *)(a3 + 96) = v23;
  *(void *)(a3 + 104) = v25;
  return result;
}

uint64_t BigSubstring.base.getter@<X0>(_OWORD *a1@<X8>)
{
  long long v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v1[2];
  return swift_unknownObjectRetain();
}

uint64_t BigSubstring.description.getter()
{
  long long v1 = v0[1];
  v8[0] = *v0;
  v8[1] = v1;
  long long v2 = v0[3];
  v8[2] = v0[2];
  long long v3 = v0[4];
  long long v4 = v0[5];
  v7[0] = v2;
  v7[1] = v3;
  long long v5 = v0[6];
  v7[2] = v4;
  v7[3] = v5;
  sub_24A497498((uint64_t)v0);
  return sub_24A59EA58((uint64_t)v8, (uint64_t)v7);
}

uint64_t sub_24A4A2F54()
{
  long long v1 = v0[1];
  v5[0] = *v0;
  v5[1] = v1;
  long long v2 = v0[3];
  v5[2] = v0[2];
  v6[0] = v2;
  long long v3 = v0[5];
  v6[1] = v0[4];
  _OWORD v6[2] = v3;
  v6[3] = v0[6];
  swift_unknownObjectRetain();
  return sub_24A59EA58((uint64_t)v5, (uint64_t)v6);
}

uint64_t BigSubstring.debugDescription.getter()
{
  long long v1 = v0[1];
  v9[0] = *v0;
  v9[1] = v1;
  long long v2 = v0[3];
  v9[2] = v0[2];
  long long v3 = v0[4];
  long long v4 = v0[5];
  v8[0] = v2;
  v8[1] = v3;
  long long v5 = v0[6];
  v8[2] = v4;
  _OWORD v8[3] = v5;
  sub_24A497498((uint64_t)v0);
  sub_24A59EA58((uint64_t)v9, (uint64_t)v8);
  uint64_t v6 = sub_24A5BB5C0();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_24A4A3024()
{
  long long v1 = v0[1];
  v6[0] = *v0;
  v6[1] = v1;
  long long v2 = v0[3];
  _OWORD v6[2] = v0[2];
  v7[0] = v2;
  long long v3 = v0[5];
  v7[1] = v0[4];
  v7[2] = v3;
  v7[3] = v0[6];
  swift_unknownObjectRetain();
  sub_24A59EA58((uint64_t)v6, (uint64_t)v7);
  uint64_t v4 = sub_24A5BB5C0();
  swift_bridgeObjectRelease();
  return v4;
}

__n128 BigSubstring.init(stringLiteral:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_24A4AA71C(a1, a2, v7);
  swift_bridgeObjectRelease();
  long long v4 = v7[5];
  *(_OWORD *)(a3 + 64) = v7[4];
  *(_OWORD *)(a3 + 80) = v4;
  *(_OWORD *)(a3 + 96) = v7[6];
  long long v5 = v7[1];
  *(_OWORD *)a3 = v7[0];
  *(_OWORD *)(a3 + 16) = v5;
  __n128 result = (__n128)v7[3];
  *(_OWORD *)(a3 + 32) = v7[2];
  *(__n128 *)(a3 + 48) = result;
  return result;
}

__n128 BigSubstring.init<A>(_:)@<Q0>(uint64_t a1@<X0>, ValueMetadata *a2@<X1>, uint64_t a3@<X8>)
{
  sub_24A4AACAC(a1, a2, (unint64_t *)v9);
  (*((void (**)(uint64_t, ValueMetadata *))a2[-1].Description + 1))(a1, a2);
  long long v6 = v9[5];
  *(_OWORD *)(a3 + 64) = v9[4];
  *(_OWORD *)(a3 + 80) = v6;
  *(_OWORD *)(a3 + 96) = v9[6];
  long long v7 = v9[1];
  *(_OWORD *)a3 = v9[0];
  *(_OWORD *)(a3 + 16) = v7;
  __n128 result = (__n128)v9[3];
  *(_OWORD *)(a3 + 32) = v9[2];
  *(__n128 *)(a3 + 48) = result;
  return result;
}

__n128 sub_24A4A3194@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_24A4AA71C(*a1, a1[1], v6);
  swift_bridgeObjectRelease();
  long long v3 = v6[5];
  *(_OWORD *)(a2 + 64) = v6[4];
  *(_OWORD *)(a2 + 80) = v3;
  *(_OWORD *)(a2 + 96) = v6[6];
  long long v4 = v6[1];
  *(_OWORD *)a2 = v6[0];
  *(_OWORD *)(a2 + 16) = v4;
  __n128 result = (__n128)v6[3];
  *(_OWORD *)(a2 + 32) = v6[2];
  *(__n128 *)(a2 + 48) = result;
  return result;
}

__n128 sub_24A4A31F8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_24A4AA71C(a1, a2, v13);
  long long v11 = v13[1];
  long long v12 = v13[0];
  long long v9 = v13[3];
  long long v10 = v13[2];
  __n128 v7 = (__n128)v13[5];
  long long v8 = v13[4];
  uint64_t v4 = v14;
  uint64_t v5 = v15;
  swift_bridgeObjectRelease();
  *(_OWORD *)a3 = v12;
  *(_OWORD *)(a3 + 16) = v11;
  *(_OWORD *)(a3 + 32) = v10;
  *(_OWORD *)(a3 + 48) = v9;
  __n128 result = v7;
  *(_OWORD *)(a3 + 64) = v8;
  *(__n128 *)(a3 + 80) = v7;
  *(void *)(a3 + 96) = v4;
  *(void *)(a3 + 104) = v5;
  return result;
}

BOOL BigSubstring.isIdentical(to:)(uint64_t a1)
{
  uint64_t v2 = (uint64_t)v1;
  long long v4 = v1[1];
  _OWORD v8[3] = *v1;
  _OWORD v8[4] = v4;
  v8[5] = v1[2];
  long long v5 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v5;
  v8[2] = *(_OWORD *)(a1 + 32);
  sub_24A497498((uint64_t)v1);
  sub_24A497498(a1);
  BOOL v6 = sub_24A495D7C((uint64_t)v8);
  sub_24A496BE8(a1);
  sub_24A496BE8(v2);
  return v6
      && (*(void *)(a1 + 48) ^ *(void *)(v2 + 48)) <= 1023
      && (*(void *)(v2 + 80) ^ *(void *)(a1 + 80)) < 0x400uLL;
}

unint64_t BigSubstring.count.getter()
{
  unint64_t result = v0[6];
  unint64_t v2 = v0[10];
  if (v2 >> 10 >= result >> 10) {
    return _s19CollectionsInternal9BigStringV8distance4from2toSiAC5IndexV_AHtF_0(result, v0[7], v0[8], v0[9], v2, v0[11], v0[12], v0[13]);
  }
  __break(1u);
  return result;
}

__n128 BigSubstring.makeIterator()@<Q0>(uint64_t a1@<X8>)
{
  long long v3 = *(_OWORD *)(v1 + 16);
  v22[0] = *(_OWORD *)v1;
  v22[1] = v3;
  v22[2] = *(_OWORD *)(v1 + 32);
  unint64_t v4 = *(void *)(v1 + 48);
  uint64_t v5 = *(void *)(v1 + 56);
  unint64_t v6 = *(void *)(v1 + 64);
  uint64_t v7 = *(void *)(v1 + 72);
  long long v18 = *(_OWORD *)(v1 + 80);
  uint64_t v8 = *(void *)(v1 + 96);
  uint64_t v9 = *(void *)(v1 + 104);
  sub_24A497498(v1);
  sub_24A493804(v22, v4, v5, v6, v7, v19);
  long long v16 = v19[1];
  long long v17 = v19[0];
  long long v14 = v19[3];
  long long v15 = v19[2];
  __n128 v13 = (__n128)v19[4];
  uint64_t v10 = v20;
  uint64_t v11 = v21;
  sub_24A496BE8(v1);
  *(_OWORD *)a1 = v18;
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v9;
  *(_OWORD *)(a1 + 32) = v17;
  *(_OWORD *)(a1 + 48) = v16;
  *(_OWORD *)(a1 + 64) = v15;
  *(_OWORD *)(a1 + 80) = v14;
  __n128 result = v13;
  *(__n128 *)(a1 + 96) = v13;
  *(void *)(a1 + 112) = v10;
  *(void *)(a1 + 120) = v11;
  return result;
}

Swift::String_optional __swiftcall BigSubstring.Iterator.next()()
{
  uint64_t v1 = v0[10];
  unint64_t v2 = v0[14];
  if (__OFADD__(v1, v2 >> 16))
  {
    __break(1u);
  }
  else
  {
    if ((int64_t)(v1 + (v2 >> 16)) < *v0 >> 11 && (v0[15] ^ v2) >= 0x4000)
    {
      sub_24A495168();
      uint64_t v3 = v7;
      unint64_t v4 = (void *)v8;
      if ((sub_24A495704(v7, v8) & 1) == 0) {
        v0[14] = v0[15];
      }
    }
    else
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
    }
    uint64_t v5 = v3;
    unint64_t v6 = v4;
  }
  result.value._object = v6;
  result.value._countAndFlagsBits = v5;
  return result;
}

uint64_t sub_24A4A3560(_OWORD *a1, long long *a2)
{
  long long v2 = a1[5];
  void v13[4] = a1[4];
  v13[5] = v2;
  long long v3 = a1[6];
  long long v4 = a1[1];
  v13[0] = *a1;
  v13[1] = v4;
  long long v5 = a1[3];
  void v13[2] = a1[2];
  long long v13[3] = v5;
  long long v6 = *a2;
  long long v7 = a2[1];
  _OWORD v13[6] = v3;
  v14[0] = v6;
  long long v8 = a2[2];
  long long v9 = a2[3];
  long long v10 = a2[6];
  v14[5] = a2[5];
  v14[6] = v10;
  long long v11 = a2[4];
  void v14[3] = v9;
  v14[4] = v11;
  v14[1] = v7;
  v14[2] = v8;
  return _s19CollectionsInternal12BigSubstringV2eeoiySbAC_ACtFZ_0((uint64_t)v13, (uint64_t)v14) & 1;
}

uint64_t BigSubstring.hash(into:)()
{
  long long v1 = *(_OWORD *)(v0 + 16);
  v37[0] = *(_OWORD *)v0;
  v37[1] = v1;
  v37[2] = *(_OWORD *)(v0 + 32);
  unint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 56);
  unint64_t v4 = *(void *)(v0 + 64);
  uint64_t v5 = *(void *)(v0 + 72);
  long long v21 = *(_OWORD *)(v0 + 88);
  unint64_t v19 = *(void *)(v0 + 80);
  uint64_t v20 = *(void *)(v0 + 104);
  sub_24A497498(v0);
  sub_24A493804(v37, v2, v3, v4, v5, v29);
  long long v17 = v29[1];
  long long v18 = v29[0];
  uint64_t v6 = v30;
  uint64_t v7 = v31;
  long long v16 = v33;
  uint64_t v8 = v32;
  uint64_t v10 = v34;
  unint64_t v9 = v35;
  uint64_t v11 = v36;
  uint64_t result = sub_24A496BE8(v0);
  *(_OWORD *)&v23[8] = v21;
  *(void *)uint64_t v23 = v19;
  *(void *)&v23[24] = v20;
  long long v24 = v18;
  long long v25 = v17;
  *(void *)&long long v26 = v6;
  *((void *)&v26 + 1) = v7;
  *(_OWORD *)&v27[8] = v16;
  *(void *)__n128 v27 = v8;
  *(void *)&v27[24] = v10;
  *(void *)&long long v28 = v9;
  *((void *)&v28 + 1) = v11;
  if (!__OFADD__(v8, v9 >> 16))
  {
    if ((uint64_t)(v8 + (v9 >> 16)) >= (uint64_t)(v19 >> 11) || (v11 ^ v9) < 0x4000)
    {
LABEL_9:
      sub_24A5BC640();
      _OWORD v22[4] = v26;
      v22[5] = *(_OWORD *)v27;
      v22[6] = *(_OWORD *)&v27[16];
      v22[7] = v28;
      v22[0] = *(_OWORD *)v23;
      v22[1] = *(_OWORD *)&v23[16];
      v22[2] = v24;
      v22[3] = v25;
      return sub_24A495C98((uint64_t)v22);
    }
    while (1)
    {
      v37[3] = v24;
      v37[4] = v25;
      v37[5] = v26;
      uint64_t v38 = v8;
      long long v39 = *(_OWORD *)&v27[8];
      uint64_t v40 = *(void *)&v27[24];
      unint64_t v41 = v9;
      uint64_t v42 = v11;
      sub_24A495168();
      uint64_t v15 = sub_24A495704(v13, v14);
      if ((v15 & 1) == 0) {
        *(void *)&long long v28 = *((void *)&v28 + 1);
      }
      MEMORY[0x270FA5388](v15);
      sub_24A5BB630();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v8 = *(void *)v27;
      unint64_t v9 = v28;
      if (__OFADD__(*(void *)v27, (unint64_t)v28 >> 16)) {
        break;
      }
      if ((int64_t)(*(void *)v27 + ((unint64_t)v28 >> 16)) < *(void *)v23 >> 11)
      {
        uint64_t v11 = *((void *)&v28 + 1);
        if ((*((void *)&v28 + 1) ^ (unint64_t)v28) >> 14) {
          continue;
        }
      }
      goto LABEL_9;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t BigSubstring.hashValue.getter()
{
  return sub_24A5BC690();
}

uint64_t sub_24A4A3838()
{
  return sub_24A5BC690();
}

uint64_t sub_24A4A38A0()
{
  return BigSubstring.hash(into:)();
}

uint64_t sub_24A4A38EC()
{
  return sub_24A5BC690();
}

uint64_t sub_24A4A3954(_OWORD *a1, long long *a2)
{
  long long v2 = a1[5];
  void v13[4] = a1[4];
  v13[5] = v2;
  long long v3 = a1[6];
  long long v4 = a1[1];
  v13[0] = *a1;
  v13[1] = v4;
  long long v5 = a1[3];
  void v13[2] = a1[2];
  long long v13[3] = v5;
  long long v6 = *a2;
  long long v7 = a2[1];
  _OWORD v13[6] = v3;
  v14[0] = v6;
  long long v8 = a2[2];
  long long v9 = a2[3];
  long long v10 = a2[6];
  v14[5] = a2[5];
  v14[6] = v10;
  long long v11 = a2[4];
  void v14[3] = v9;
  v14[4] = v11;
  v14[1] = v7;
  v14[2] = v8;
  return _s19CollectionsInternal12BigSubstringV1loiySbAC_ACtFZ_0((uint64_t)v13, (uint64_t)v14) & 1;
}

BOOL sub_24A4A39BC(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[5];
  _OWORD v12[4] = a1[4];
  v12[5] = v2;
  void v12[6] = a1[6];
  long long v3 = a1[1];
  v12[0] = *a1;
  v12[1] = v3;
  long long v4 = a1[3];
  void v12[2] = a1[2];
  v12[3] = v4;
  long long v5 = a2[1];
  v11[0] = *a2;
  v11[1] = v5;
  long long v6 = a2[2];
  long long v7 = a2[3];
  long long v8 = a2[6];
  void v11[5] = a2[5];
  v11[6] = v8;
  long long v9 = a2[4];
  v11[3] = v7;
  long long v11[4] = v9;
  v11[2] = v6;
  return (_s19CollectionsInternal12BigSubstringV1loiySbAC_ACtFZ_0((uint64_t)v11, (uint64_t)v12) & 1) == 0;
}

BOOL sub_24A4A3A2C(_OWORD *a1, long long *a2)
{
  long long v2 = a1[5];
  void v13[4] = a1[4];
  v13[5] = v2;
  long long v3 = a1[6];
  long long v4 = a1[1];
  v13[0] = *a1;
  v13[1] = v4;
  long long v5 = a1[3];
  void v13[2] = a1[2];
  long long v13[3] = v5;
  long long v6 = *a2;
  long long v7 = a2[1];
  _OWORD v13[6] = v3;
  v14[0] = v6;
  long long v8 = a2[2];
  long long v9 = a2[3];
  long long v10 = a2[6];
  v14[5] = a2[5];
  v14[6] = v10;
  long long v11 = a2[4];
  void v14[3] = v9;
  v14[4] = v11;
  v14[1] = v7;
  v14[2] = v8;
  return (_s19CollectionsInternal12BigSubstringV1loiySbAC_ACtFZ_0((uint64_t)v13, (uint64_t)v14) & 1) == 0;
}

uint64_t sub_24A4A3A98(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[5];
  _OWORD v12[4] = a1[4];
  v12[5] = v2;
  void v12[6] = a1[6];
  long long v3 = a1[1];
  v12[0] = *a1;
  v12[1] = v3;
  long long v4 = a1[3];
  void v12[2] = a1[2];
  v12[3] = v4;
  long long v5 = a2[1];
  v11[0] = *a2;
  v11[1] = v5;
  long long v6 = a2[2];
  long long v7 = a2[3];
  long long v8 = a2[6];
  void v11[5] = a2[5];
  v11[6] = v8;
  long long v9 = a2[4];
  v11[3] = v7;
  long long v11[4] = v9;
  v11[2] = v6;
  return _s19CollectionsInternal12BigSubstringV1loiySbAC_ACtFZ_0((uint64_t)v11, (uint64_t)v12) & 1;
}

uint64_t BigSubstring.startIndex.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t BigSubstring.endIndex.getter()
{
  return *(void *)(v0 + 80);
}

uint64_t sub_24A4A3B1C@<X0>(Swift::String_optional *a1@<X8>)
{
  Swift::String_optional v3 = BigSubstring.Iterator.next()();
  uint64_t result = v3.value._countAndFlagsBits;
  *a1 = v3;
  return result;
}

__n128 sub_24A4A3B44@<Q0>(uint64_t a1@<X8>)
{
  long long v3 = *(_OWORD *)(v1 + 16);
  v22[0] = *(_OWORD *)v1;
  v22[1] = v3;
  v22[2] = *(_OWORD *)(v1 + 32);
  unint64_t v4 = *(void *)(v1 + 48);
  uint64_t v5 = *(void *)(v1 + 56);
  unint64_t v6 = *(void *)(v1 + 64);
  uint64_t v7 = *(void *)(v1 + 72);
  long long v18 = *(_OWORD *)(v1 + 80);
  uint64_t v9 = *(void *)(v1 + 96);
  uint64_t v8 = *(void *)(v1 + 104);
  sub_24A493804(v22, v4, v5, v6, v7, v19);
  long long v16 = v19[1];
  long long v17 = v19[0];
  long long v14 = v19[3];
  long long v15 = v19[2];
  __n128 v13 = (__n128)v19[4];
  uint64_t v10 = v20;
  uint64_t v11 = v21;
  sub_24A496BE8((uint64_t)v22);
  *(_OWORD *)a1 = v18;
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = v8;
  *(_OWORD *)(a1 + 32) = v17;
  *(_OWORD *)(a1 + 48) = v16;
  *(_OWORD *)(a1 + 64) = v15;
  *(_OWORD *)(a1 + 80) = v14;
  __n128 result = v13;
  *(__n128 *)(a1 + 96) = v13;
  *(void *)(a1 + 112) = v10;
  *(void *)(a1 + 120) = v11;
  return result;
}

uint64_t sub_24A4A3C0C()
{
  return 2;
}

unint64_t sub_24A4A3C14()
{
  long long v1 = v0[5];
  _OWORD v6[4] = v0[4];
  v6[5] = v1;
  v6[6] = v0[6];
  long long v2 = v0[1];
  v6[0] = *v0;
  v6[1] = v2;
  long long v3 = v0[3];
  _OWORD v6[2] = v0[2];
  _OWORD v6[3] = v3;
  unint64_t v4 = sub_24A595F8C((uint64_t)v6);
  sub_24A496BE8((uint64_t)v6);
  return v4;
}

uint64_t sub_24A4A3C70(unint64_t *a1, uint64_t *a2, unint64_t *a3)
{
  return sub_24A596668(a1, a2, a3);
}

uint64_t sub_24A4A3CBC()
{
  return sub_24A5BB8C0();
}

unint64_t BigSubstring.distance(from:to:)(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  unint64_t v9 = result >> 10;
  unint64_t v10 = *(void *)(v8 + 48) >> 10;
  unint64_t v11 = *(void *)(v8 + 80) >> 10;
  if (v11 >= a5 >> 10 && a5 >> 10 >= v10 && v9 >= v10 && v11 >= v9) {
    return _s19CollectionsInternal9BigStringV8distance4from2toSiAC5IndexV_AHtF_0(result, a2, a3, a4, a5, a6, a7, a8);
  }
  __break(1u);
  return result;
}

unint64_t BigSubstring.index(after:)(unint64_t result, unint64_t a2, unint64_t a3, uint64_t a4)
{
  if (result >> 10 < *(void *)(v4 + 80) >> 10) {
    return sub_24A4A7FB4(result, a2, a3, a4, 1uLL) & 0xFFFFFFFFFFFFF8FFLL | 0x300;
  }
  __break(1u);
  return result;
}

unint64_t BigSubstring.index(before:)(unint64_t result, unint64_t a2, unint64_t a3, uint64_t a4)
{
  if (*(void *)(v4 + 48) >> 10 < result >> 10) {
    return sub_24A4A7FB4(result, a2, a3, a4, 0xFFFFFFFFFFFFFFFFLL) & 0xFFFFFFFFFFFFF8FFLL | 0x300;
  }
  __break(1u);
  return result;
}

unint64_t BigSubstring.index(_:offsetBy:)(unint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v6 = *(void *)(v5 + 48) >> 10;
  unint64_t v7 = *(void *)(v5 + 80) >> 10;
  if (result >> 10 >= v6 && v7 >= result >> 10)
  {
    __n128 result = sub_24A4A7FB4(result, a2, a3, a4, a5);
    unint64_t v9 = (result & 0xFFFFFFFFFFFFF8FFLL) >> 10;
    if (v9 >= v6 && v7 >= v9) {
      return result & 0xFFFFFFFFFFFFF8FFLL | 0x300;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t BigSubstring.index(_:offsetBy:limitedBy:)(unint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, int64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9)
{
  unint64_t v10 = *(void *)(v9 + 48) >> 10;
  unint64_t v11 = *(void *)(v9 + 80) >> 10;
  if (result >> 10 < v10 || v11 < result >> 10)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }
  __n128 result = BigString.index(_:offsetBy:limitedBy:)(result, a2, a3, a4, a5, a6, a7, a8, a9);
  if (v13 != 2 && (result >> 10 < v10 || v11 < result >> 10)) {
    goto LABEL_13;
  }
  return result;
}

unint64_t BigSubstring.subscript.getter(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (result >> 10 < *((void *)v4 + 6) >> 10 || result >> 10 >= *((void *)v4 + 10) >> 10)
  {
    __break(1u);
  }
  else
  {
    long long v6 = v4[1];
    long long v8 = *v4;
    long long v9 = v6;
    long long v10 = v4[2];
    sub_24A58F608(result, a2, a3, a4, &v7);
    return v7;
  }
  return result;
}

unint64_t *BigSubstring.subscript.getter@<X0>(unint64_t *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = *result;
  unint64_t v5 = result[4];
  if (*result >> 10 >= *(void *)(v2 + 48) >> 10 && *(void *)(v2 + 80) >> 10 >= v5 >> 10)
  {
    long long v26 = *(_OWORD *)v2;
    long long v25 = *(_OWORD *)(v2 + 16);
    unint64_t v8 = result[6];
    uint64_t v7 = result[7];
    uint64_t v9 = result[5];
    unint64_t v11 = result[2];
    uint64_t v10 = result[3];
    uint64_t v12 = result[1];
    uint64_t v23 = *(void *)(v2 + 32);
    uint64_t v24 = *(void *)(v2 + 40);
    sub_24A497498(v2);
    unint64_t v13 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(v4, v12, v11, v10);
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    uint64_t v19 = v18;
    __n128 result = (unint64_t *)_s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(v5, v9, v8, v7);
    *(_OWORD *)a2 = v26;
    *(_OWORD *)(a2 + 16) = v25;
    *(void *)(a2 + 32) = v23;
    *(void *)(a2 + 40) = v24;
    *(void *)(a2 + 48) = v13;
    *(void *)(a2 + 56) = v15;
    *(void *)(a2 + 64) = v17;
    *(void *)(a2 + 72) = v19;
    *(void *)(a2 + 80) = result;
    *(void *)(a2 + 88) = v20;
    *(void *)(a2 + 96) = v21;
    *(void *)(a2 + 104) = v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_24A4A4090@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = *(void *)a1;
  if (*(void *)(v2 + 48) >> 10 >= result >> 10)
  {
    __break(1u);
  }
  else
  {
    unint64_t result = sub_24A4A7FB4(result, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), 0xFFFFFFFFFFFFFFFFLL);
    *a2 = result & 0xFFFFFFFFFFFFF8FFLL | 0x300;
    a2[1] = v6;
    a2[2] = v7;
    a2[3] = v8;
  }
  return result;
}

unint64_t sub_24A4A4108(uint64_t a1)
{
  unint64_t result = *(void *)a1;
  if (*(void *)(v1 + 48) >> 10 >= result >> 10)
  {
    __break(1u);
  }
  else
  {
    unint64_t result = sub_24A4A7FB4(result, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), 0xFFFFFFFFFFFFFFFFLL);
    *(void *)a1 = result & 0xFFFFFFFFFFFFF8FFLL | 0x300;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v5;
    *(void *)(a1 + 24) = v6;
  }
  return result;
}

__n128 sub_24A4A4188@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 48);
  long long v3 = *(_OWORD *)(v1 + 64);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 sub_24A4A4194@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 80);
  long long v3 = *(_OWORD *)(v1 + 96);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

unint64_t sub_24A4A41A0(void *a1, unint64_t *a2)
{
  uint64_t v5 = malloc(0x48uLL);
  *a1 = v5;
  unint64_t result = *a2;
  uint64_t v7 = a2[1];
  unint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  long long v10 = *(_OWORD *)(v2 + 16);
  *uint64_t v5 = *(_OWORD *)v2;
  v5[1] = v10;
  v5[2] = *(_OWORD *)(v2 + 32);
  if (result >> 10 < *(void *)(v2 + 48) >> 10 || result >> 10 >= *(void *)(v2 + 80) >> 10)
  {
    __break(1u);
  }
  else
  {
    sub_24A58F608(result, v7, v8, v9, &v13);
    uint64_t v11 = v13;
    uint64_t v12 = v14;
    *((void *)v5 + 8) = v14;
    *((void *)v5 + 6) = v11;
    *((void *)v5 + 7) = v12;
    return (unint64_t)sub_24A4A4254;
  }
  return result;
}

void sub_24A4A4254(void **a1)
{
  uint64_t v1 = *a1;
  swift_bridgeObjectRelease();
  free(v1);
}

unint64_t *sub_24A4A4290@<X0>(unint64_t *result@<X0>, void *a2@<X8>)
{
  unint64_t v4 = *result;
  unint64_t v5 = result[4];
  if (*result >> 10 >= (unint64_t)v2[6] >> 10 && (unint64_t)v2[10] >> 10 >= v5 >> 10)
  {
    uint64_t v26 = v2[4];
    uint64_t v27 = v2[5];
    uint64_t v7 = v2[2];
    uint64_t v8 = *v2;
    uint64_t v9 = v2[1];
    uint64_t v28 = result[7];
    unint64_t v24 = result[6];
    uint64_t v25 = v2[3];
    uint64_t v23 = result[5];
    unint64_t v11 = result[2];
    uint64_t v10 = result[3];
    uint64_t v12 = result[1];
    swift_unknownObjectRetain();
    unint64_t v13 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(v4, v12, v11, v10);
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    uint64_t v19 = v18;
    unint64_t result = (unint64_t *)_s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(v5, v23, v24, v28);
    *a2 = v8;
    a2[1] = v9;
    a2[2] = v7;
    a2[3] = v25;
    a2[4] = v26;
    a2[5] = v27;
    a2[6] = v13;
    a2[7] = v15;
    a2[8] = v17;
    a2[9] = v19;
    a2[10] = result;
    a2[11] = v20;
    a2[12] = v21;
    a2[13] = v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_24A4A43AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 48);
  uint64_t v3 = *(void *)(v1 + 56);
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = *(void *)(v1 + 72);
  uint64_t v6 = *(void *)(v1 + 80);
  uint64_t v7 = *(void *)(v1 + 88);
  uint64_t v8 = *(void *)(v1 + 96);
  uint64_t v9 = *(void *)(v1 + 104);
  long long v10 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v3;
  *(void *)(a1 + 64) = v4;
  *(void *)(a1 + 72) = v5;
  *(void *)(a1 + 80) = v6;
  *(void *)(a1 + 88) = v7;
  *(void *)(a1 + 96) = v8;
  *(void *)(a1 + 104) = v9;
  *(void *)(a1 + 112) = v2;
  *(void *)(a1 + 120) = v3;
  *(void *)(a1 + 128) = v4;
  *(void *)(a1 + 136) = v5;
  *(void *)(a1 + 144) = v6;
  *(void *)(a1 + 152) = v7;
  *(void *)(a1 + 160) = v8;
  *(void *)(a1 + 168) = v9;
  return swift_unknownObjectRetain();
}

BOOL sub_24A4A43F4()
{
  return (*(void *)(v0 + 80) ^ *(void *)(v0 + 48)) < 0x400uLL;
}

unint64_t sub_24A4A440C()
{
  unint64_t result = v0[6];
  unint64_t v2 = v0[10];
  if (v2 >> 10 >= result >> 10) {
    return _s19CollectionsInternal9BigStringV8distance4from2toSiAC5IndexV_AHtF_0(result, v0[7], v0[8], v0[9], v2, v0[11], v0[12], v0[13]);
  }
  __break(1u);
  return result;
}

void sub_24A4A4470(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 3;
}

unint64_t sub_24A4A4480@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t result = *(void *)a1;
  unint64_t v7 = *(void *)(v3 + 48) >> 10;
  unint64_t v8 = *(void *)(v3 + 80) >> 10;
  if (result >> 10 >= v7 && v8 >= result >> 10)
  {
    unint64_t result = sub_24A4A7FB4(result, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
    unint64_t v13 = (result & 0xFFFFFFFFFFFFF8FFLL) >> 10;
    if (v13 >= v7 && v8 >= v13)
    {
      *a3 = result & 0xFFFFFFFFFFFFF8FFLL | 0x300;
      a3[1] = v10;
      a3[2] = v11;
      a3[3] = v12;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_24A4A4524@<X0>(uint64_t a1@<X0>, int64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t result = *(void *)a1;
  unint64_t v8 = *(void *)(v4 + 48) >> 10;
  if (result >> 10 < v8 || (unint64_t v9 = *(void *)(v4 + 80) >> 10, v9 < result >> 10))
  {
    __break(1u);
  }
  else
  {
    unint64_t result = BigString.index(_:offsetBy:limitedBy:)(result, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), a2, *(void *)a3, *(void *)(a3 + 8), *(void *)(a3 + 16), *(void *)(a3 + 24));
    if (v12 == 2 || result >> 10 >= v8 && v9 >= result >> 10)
    {
      *a4 = result;
      a4[1] = v10;
      a4[2] = v11;
      a4[3] = v12;
      return result;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_24A4A45E0(uint64_t a1, uint64_t a2)
{
  unint64_t result = *(void *)a1;
  unint64_t v5 = *(void *)a2;
  unint64_t v6 = *(void *)(v2 + 80) >> 10;
  if (v6 >= *(void *)a2 >> 10)
  {
    unint64_t v7 = *(void *)(v2 + 48) >> 10;
    if (v5 >> 10 >= v7 && result >> 10 >= v7 && v6 >= result >> 10) {
      return _s19CollectionsInternal9BigStringV8distance4from2toSiAC5IndexV_AHtF_0(result, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), v5, *(void *)(a2 + 8), *(void *)(a2 + 16), *(void *)(a2 + 24));
    }
  }
  __break(1u);
  return result;
}

void *sub_24A4A4674(void *result, void *a2)
{
  unint64_t v2 = *result >> 10;
  if (v2 < *a2 >> 10 || v2 >= a2[4] >> 10) {
    __break(1u);
  }
  return result;
}

void *sub_24A4A469C(void *result, void *a2)
{
  unint64_t v2 = *result >> 10;
  if (v2 < *a2 >> 10 || a2[4] >> 10 < v2) {
    __break(1u);
  }
  return result;
}

void *sub_24A4A46C4(void *result, void *a2)
{
  if (*result >> 10 < *a2 >> 10 || a2[4] >> 10 < result[4] >> 10) {
    __break(1u);
  }
  return result;
}

unint64_t sub_24A4A46F4@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = *(void *)a1;
  if (result >> 10 >= *(void *)(v2 + 80) >> 10)
  {
    __break(1u);
  }
  else
  {
    unint64_t result = sub_24A4A7FB4(result, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), 1uLL);
    *a2 = result & 0xFFFFFFFFFFFFF8FFLL | 0x300;
    a2[1] = v6;
    a2[2] = v7;
    a2[3] = v8;
  }
  return result;
}

unint64_t sub_24A4A476C(uint64_t a1)
{
  unint64_t result = *(void *)a1;
  if (result >> 10 >= *(void *)(v1 + 80) >> 10)
  {
    __break(1u);
  }
  else
  {
    unint64_t result = sub_24A4A7FB4(result, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), 1uLL);
    *(void *)a1 = result & 0xFFFFFFFFFFFFF8FFLL | 0x300;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v5;
    *(void *)(a1 + 24) = v6;
  }
  return result;
}

unint64_t BigSubstring.index(roundingDown:)(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (result >> 10 >= *(void *)(v4 + 48) >> 10 && *(void *)(v4 + 80) >> 10 >= result >> 10) {
    return _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(result, a2, a3, a4);
  }
  __break(1u);
  return result;
}

unint64_t BigSubstring.index(roundingUp:)(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5 = result >> 10;
  if (result >> 10 >= *(void *)(v4 + 48) >> 10 && *(void *)(v4 + 80) >> 10 >= v5)
  {
    unint64_t result = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(result, a2, a3, a4);
    if (v5 != result >> 10) {
      return sub_24A4A7FB4(result, v7, v8, v9, 1uLL) & 0xFFFFFFFFFFFFF8FFLL | 0x300;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_24A4A48B4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 32);
  if (*(void *)result) {
    uint64_t v5 = *(void *)(result + 32);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = v5 - a2;
  if (__OFSUB__(v5, a2))
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v8 = result;
  uint64_t v9 = *(void *)(result + 24);
  uint64_t v10 = *(void *)(result + 40);
  uint64_t v29 = *(void *)result;
  long long v30 = *(_OWORD *)(result + 8);
  uint64_t v31 = v9;
  uint64_t v32 = v4;
  uint64_t v33 = v10;
  unint64_t v11 = a3 << 11;
  swift_unknownObjectRetain();
  unint64_t v12 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(v11, 0, 0, 1);
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  unint64_t result = swift_unknownObjectRelease();
  long long v19 = *(_OWORD *)(v8 + 16);
  v28[0] = *(_OWORD *)v8;
  v28[1] = v19;
  void v28[2] = *(_OWORD *)(v8 + 32);
  if (__OFADD__(a4, v6))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  long long v20 = *(_OWORD *)(v8 + 16);
  v34[0] = *(_OWORD *)v8;
  v34[1] = v20;
  v34[2] = *(_OWORD *)(v8 + 32);
  sub_24A4974C4((uint64_t)v34, (uint64_t)v35);
  sub_24A497498((uint64_t)v35);
  unint64_t v21 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0((a4 + v6) << 11, 0, 0, 1);
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  unint64_t result = sub_24A496BE8((uint64_t)v28);
  if (v21 >> 10 >= v12 >> 10)
  {
    *(void *)(v8 + 48) = v12;
    *(void *)(v8 + 56) = v14;
    *(void *)(v8 + 64) = v16;
    *(void *)(v8 + 72) = v18;
    *(void *)(v8 + 80) = v21;
    *(void *)(v8 + 88) = v23;
    *(void *)(v8 + 96) = v25;
    *(void *)(v8 + 104) = v27;
    return result;
  }
LABEL_10:
  __break(1u);
  return result;
}

double BigSubstring.init()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v4 = 0;
  MEMORY[0x24C5C7E90](&v4, 8);
  uint64_t v2 = v4;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = v2;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 768;
  *(void *)&double result = 1;
  *(_OWORD *)(a1 + 72) = xmmword_24A5BD050;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 1;
  return result;
}

uint64_t BigSubstring.replaceSubrange<A>(_:with:)(unint64_t *a1, uint64_t a2, ValueMetadata *a3)
{
  sub_24A4AB024(a1, a2, a3);
  uint64_t v5 = (uint64_t (*)(uint64_t, ValueMetadata *))*((void *)a3[-1].Description + 1);
  return v5(a2, a3);
}

uint64_t sub_24A4A4AE4(uint64_t a1, unint64_t *a2, uint64_t a3, ValueMetadata *a4)
{
  MEMORY[0x270FA5388](a1);
  unint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v7, v9, v10);
  return BigString.replaceSubrange<A>(_:with:)(a2, (uint64_t)v7, a4);
}

__n128 BigSubstring.init(repeating:count:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_24A490BF0(a1, a2, v9);
  sub_24A54E978(v9, a3, (uint64_t)v10);
  sub_24A4AA9E8((uint64_t)v10, v11);
  sub_24A496BE8((uint64_t)v10);
  long long v6 = v11[5];
  *(_OWORD *)(a4 + 64) = v11[4];
  *(_OWORD *)(a4 + 80) = v6;
  *(_OWORD *)(a4 + 96) = v11[6];
  long long v7 = v11[1];
  *(_OWORD *)a4 = v11[0];
  *(_OWORD *)(a4 + 16) = v7;
  __n128 result = (__n128)v11[3];
  *(_OWORD *)(a4 + 32) = v11[2];
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 BigSubstring.init<A>(repeating:count:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, ValueMetadata *a3@<X2>, uint64_t a4@<X8>)
{
  sub_24A54F4E4(a1, a2, a3, v10);
  sub_24A4AA9E8((uint64_t)v10, v11);
  sub_24A496BE8((uint64_t)v10);
  (*((void (**)(uint64_t, ValueMetadata *))a3[-1].Description + 1))(a1, a3);
  long long v7 = v11[5];
  *(_OWORD *)(a4 + 64) = v11[4];
  *(_OWORD *)(a4 + 80) = v7;
  *(_OWORD *)(a4 + 96) = v11[6];
  long long v8 = v11[1];
  *(_OWORD *)a4 = v11[0];
  *(_OWORD *)(a4 + 16) = v8;
  __n128 result = (__n128)v11[3];
  *(_OWORD *)(a4 + 32) = v11[2];
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 BigSubstring.init(repeating:count:)@<Q0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_24A497498((uint64_t)a1);
  sub_24A54E978(a1, a2, (uint64_t)v9);
  sub_24A4AA9E8((uint64_t)v9, v10);
  sub_24A496BE8((uint64_t)v9);
  sub_24A496BE8((uint64_t)a1);
  long long v6 = v10[5];
  *(_OWORD *)(a3 + 64) = v10[4];
  *(_OWORD *)(a3 + 80) = v6;
  *(_OWORD *)(a3 + 96) = v10[6];
  long long v7 = v10[1];
  *(_OWORD *)a3 = v10[0];
  *(_OWORD *)(a3 + 16) = v7;
  __n128 result = (__n128)v10[3];
  *(_OWORD *)(a3 + 32) = v10[2];
  *(__n128 *)(a3 + 48) = result;
  return result;
}

{
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  long long v10;
  long long v11;
  long long v12;
  __n128 result;
  long long v14[3];
  unsigned char v15[48];
  _OWORD v16[7];
  _OWORD v17[4];
  long long v18[3];

  long long v6 = a1[1];
  v18[0] = *a1;
  v18[1] = v6;
  long long v7 = a1[3];
  v18[2] = a1[2];
  long long v8 = a1[4];
  uint64_t v9 = a1[5];
  v17[0] = v7;
  v17[1] = v8;
  uint64_t v10 = a1[6];
  _OWORD v17[2] = v9;
  v17[3] = v10;
  sub_24A497498((uint64_t)a1);
  sub_24A48D050(v18, (unint64_t *)v17, v14);
  sub_24A54E978(v14, a2, (uint64_t)v15);
  sub_24A4AA9E8((uint64_t)v15, v16);
  sub_24A496BE8((uint64_t)v15);
  sub_24A496BE8((uint64_t)a1);
  unint64_t v11 = v16[5];
  *(_OWORD *)(a3 + 64) = v16[4];
  *(_OWORD *)(a3 + 80) = v11;
  *(_OWORD *)(a3 + 96) = v16[6];
  uint64_t v12 = v16[1];
  *(_OWORD *)a3 = v16[0];
  *(_OWORD *)(a3 + 16) = v12;
  __n128 result = (__n128)v16[3];
  *(_OWORD *)(a3 + 32) = v16[2];
  *(__n128 *)(a3 + 48) = result;
  return result;
}

Swift::Void __swiftcall BigSubstring.append(_:)(Swift::String a1)
{
  unint64_t v2 = v1[10];
  unint64_t v3 = v1[6];
  if (v2 >> 10 < v3 >> 10)
  {
    __break(1u);
  }
  else
  {
    object = a1._object;
    uint64_t countAndFlagsBits = a1._countAndFlagsBits;
    unint64_t v7 = v1[12];
    uint64_t v6 = v1[13];
    unint64_t v8 = v1[11];
    uint64_t v9 = v3 >> 11;
    if (*v1) {
      uint64_t v10 = v1[4];
    }
    else {
      uint64_t v10 = 0;
    }
    swift_bridgeObjectRetain();
    BigString.insert(contentsOf:at:)(countAndFlagsBits, (uint64_t)object, v2, v8, v7, v6);
    sub_24A4A48B4((uint64_t)v1, v10, v9, v2 >> 11);
  }
}

uint64_t BigSubstring.append<A>(contentsOf:)(uint64_t a1, ValueMetadata *a2)
{
  sub_24A4AB0C8(a1, a2);
  uint64_t v4 = (uint64_t (*)(uint64_t, ValueMetadata *))*((void *)a2[-1].Description + 1);
  return v4(a1, a2);
}

uint64_t BigSubstring.insert(_:at:)(uint64_t result, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v7 = v6[6];
  if (a3 >> 10 < v7 >> 10)
  {
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v8 = v6[10];
  if (a3 >> 10 > v8 >> 10)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v14 = result;
  uint64_t v15 = v7 >> 11;
  uint64_t v16 = v8 >> 11;
  if (*v6) {
    uint64_t v17 = v6[4];
  }
  else {
    uint64_t v17 = 0;
  }
  swift_bridgeObjectRetain();
  BigString.insert(contentsOf:at:)(v14, a2, a3, a4, a5, a6);
  return sub_24A4A48B4((uint64_t)v6, v17, v15, v16);
}

uint64_t BigSubstring.insert<A>(contentsOf:at:)(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, ValueMetadata *a6)
{
  sub_24A4AB150(a1, a2, a3, a4, a5, a6);
  unint64_t v8 = (uint64_t (*)(uint64_t, ValueMetadata *))*((void *)a6[-1].Description + 1);
  return v8(a1, a6);
}

unint64_t BigSubstring.remove(at:)(unint64_t result, unint64_t a2, unint64_t a3, uint64_t a4)
{
  long long v5 = *(_OWORD *)(v4 + 32);
  long long v35 = *(_OWORD *)(v4 + 16);
  long long v36 = v5;
  long long v34 = *(_OWORD *)v4;
  unint64_t v6 = *(void *)(v4 + 80);
  unint64_t v7 = result >> 10;
  if (result >> 10 >= v6 >> 10)
  {
    __break(1u);
    goto LABEL_14;
  }
  unint64_t v11 = result;
  uint64_t v29 = v34;
  __n128 result = sub_24A4A7FB4(result, a2, a3, a4, 1uLL);
  unint64_t v12 = (result >> 10) & 0x3FFFFFFFFFFFFELL;
  if (v12 < v7)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v28 = v36;
  unint64_t v13 = *(void *)(v4 + 48);
  if (v6 >> 10 < v12 || v7 < v13 >> 10) {
    goto LABEL_15;
  }
  unint64_t v15 = sub_24A496820(v11, a2, a3, a4, 0);
  uint64_t v17 = v16;
  unint64_t v19 = v18;
  uint64_t v21 = v20;
  __n128 result = sub_24A58F608(v15, v16, v18, v20, v30);
  long long v24 = v31;
  if ((unint64_t)v31 >> 10 < v15 >> 10)
  {
LABEL_16:
    __break(1u);
    return result;
  }
  uint64_t v27 = v30[0];
  long long v25 = v32;
  if (v29) {
    uint64_t v26 = v28;
  }
  else {
    uint64_t v26 = 0;
  }
  v30[0] = v15;
  v30[1] = v17;
  *(void *)&long long v31 = v19;
  *((void *)&v31 + 1) = v21;
  long long v32 = v24;
  long long v33 = v25;
  sub_24A53EF68((unint64_t *)v30, v22, v23);
  sub_24A4A48B4(v4, v26, v13 >> 11, v6 >> 11);
  return v27;
}

unint64_t *BigSubstring.removeSubrange(_:)(unint64_t *result, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = v3[6];
  if (*result >> 10 < v4 >> 10)
  {
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v5 = v3[10];
  if (v5 >> 10 < result[4] >> 10)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v6 = v4 >> 11;
  uint64_t v7 = v5 >> 11;
  if (*v3) {
    uint64_t v8 = v3[4];
  }
  else {
    uint64_t v8 = 0;
  }
  BigString.removeSubrange(_:)(result, a2, a3);
  return (unint64_t *)sub_24A4A48B4((uint64_t)v3, v8, v6, v7);
}

Swift::Void __swiftcall BigSubstring.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
  long long v4 = *(_OWORD *)(v3 + 64);
  v9[0] = *(_OWORD *)(v3 + 48);
  v9[1] = v4;
  long long v5 = *(_OWORD *)(v3 + 96);
  long long v10 = *(_OWORD *)(v3 + 80);
  long long v11 = v5;
  uint64_t v6 = *(void *)&v9[0] >> 11;
  unint64_t v7 = (unint64_t)v10 >> 11;
  if (*(void *)v3) {
    uint64_t v8 = *(void *)(v3 + 32);
  }
  else {
    uint64_t v8 = 0;
  }
  BigString.removeSubrange(_:)((unint64_t *)v9, v1, v2);
  sub_24A4A48B4(v3, v8, v6, v7);
}

double sub_24A4A5310@<D0>(uint64_t a1@<X8>)
{
  uint64_t v4 = 0;
  MEMORY[0x24C5C7E90](&v4, 8);
  uint64_t v2 = v4;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = v2;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 768;
  *(void *)&double result = 1;
  *(_OWORD *)(a1 + 72) = xmmword_24A5BD050;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 1;
  return result;
}

uint64_t sub_24A4A537C(_OWORD *a1, uint64_t a2, ValueMetadata *a3)
{
  long long v5 = a1[1];
  v9[0] = *a1;
  v9[1] = v5;
  long long v6 = a1[3];
  _OWORD v9[2] = a1[2];
  long long v9[3] = v6;
  sub_24A4AB024((unint64_t *)v9, a2, a3);
  unint64_t v7 = (uint64_t (*)(uint64_t, ValueMetadata *))*((void *)a3[-1].Description + 1);
  return v7(a2, a3);
}

__n128 sub_24A4A5408@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_24A490BF0(*a1, a1[1], v8);
  sub_24A54E978(v8, a2, (uint64_t)v9);
  sub_24A4AA9E8((uint64_t)v9, v10);
  sub_24A496BE8((uint64_t)v9);
  long long v5 = v10[5];
  *(_OWORD *)(a3 + 64) = v10[4];
  *(_OWORD *)(a3 + 80) = v5;
  *(_OWORD *)(a3 + 96) = v10[6];
  long long v6 = v10[1];
  *(_OWORD *)a3 = v10[0];
  *(_OWORD *)(a3 + 16) = v6;
  __n128 result = (__n128)v10[3];
  *(_OWORD *)(a3 + 32) = v10[2];
  *(__n128 *)(a3 + 48) = result;
  return result;
}

__n128 sub_24A4A5488@<Q0>(uint64_t a1@<X0>, ValueMetadata *a2@<X1>, uint64_t a3@<X8>)
{
  sub_24A4AACAC(a1, a2, (unint64_t *)v9);
  (*((void (**)(uint64_t, ValueMetadata *))a2[-1].Description + 1))(a1, a2);
  long long v6 = v9[5];
  *(_OWORD *)(a3 + 64) = v9[4];
  *(_OWORD *)(a3 + 80) = v6;
  *(_OWORD *)(a3 + 96) = v9[6];
  long long v7 = v9[1];
  *(_OWORD *)a3 = v9[0];
  *(_OWORD *)(a3 + 16) = v7;
  __n128 result = (__n128)v9[3];
  *(_OWORD *)(a3 + 32) = v9[2];
  *(__n128 *)(a3 + 48) = result;
  return result;
}

uint64_t *sub_24A4A5518(uint64_t *result)
{
  unint64_t v2 = v1[10];
  unint64_t v3 = v1[6];
  if (v2 >> 10 < v3 >> 10)
  {
    __break(1u);
  }
  else
  {
    unint64_t v5 = v1[12];
    uint64_t v4 = v1[13];
    unint64_t v6 = v1[11];
    uint64_t v8 = *result;
    uint64_t v7 = result[1];
    uint64_t v9 = v3 >> 11;
    if (*v1) {
      uint64_t v10 = v1[4];
    }
    else {
      uint64_t v10 = 0;
    }
    swift_bridgeObjectRetain();
    BigString.insert(contentsOf:at:)(v8, v7, v2, v6, v5, v4);
    sub_24A4A48B4((uint64_t)v1, v10, v9, v2 >> 11);
    return (uint64_t *)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_24A4A55DC(uint64_t a1, ValueMetadata *a2)
{
  sub_24A4AB0C8(a1, a2);
  uint64_t v4 = (uint64_t (*)(uint64_t, ValueMetadata *))*((void *)a2[-1].Description + 1);
  return v4(a1, a2);
}

uint64_t sub_24A4A5648(uint64_t *a1, uint64_t a2)
{
  BigSubstring.insert(_:at:)(*a1, a1[1], *(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16), *(void *)(a2 + 24));
  return swift_bridgeObjectRelease();
}

uint64_t sub_24A4A5690(uint64_t a1, uint64_t a2, ValueMetadata *a3)
{
  sub_24A4AB150(a1, *(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
  unint64_t v5 = (uint64_t (*)(uint64_t, ValueMetadata *))*((void *)a3[-1].Description + 1);
  return v5(a1, a3);
}

unint64_t sub_24A4A5714@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = BigSubstring.remove(at:)(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24));
  *a2 = result;
  a2[1] = v4;
  return result;
}

unint64_t *sub_24A4A5748(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  long long v3 = a1[1];
  v6[0] = *a1;
  v6[1] = v3;
  long long v4 = a1[3];
  _OWORD v6[2] = a1[2];
  _OWORD v6[3] = v4;
  return BigSubstring.removeSubrange(_:)((unint64_t *)v6, a2, a3);
}

void sub_24A4A577C(void *a1@<X8>)
{
  sub_24A573CAC();
  *a1 = v2;
  a1[1] = v3;
}

void sub_24A4A57A8(void *a1@<X8>)
{
  sub_24A5743A0();
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_24A4A57D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(v3 + 64);
  v10[0] = *(_OWORD *)(v3 + 48);
  v10[1] = v4;
  long long v5 = *(_OWORD *)(v3 + 96);
  long long v11 = *(_OWORD *)(v3 + 80);
  long long v12 = v5;
  uint64_t v6 = *(void *)&v10[0] >> 11;
  unint64_t v7 = (unint64_t)v11 >> 11;
  if (*(void *)v3) {
    uint64_t v8 = *(void *)(v3 + 32);
  }
  else {
    uint64_t v8 = 0;
  }
  BigString.removeSubrange(_:)((unint64_t *)v10, a2, a3);
  return sub_24A4A48B4(v3, v8, v6, v7);
}

uint64_t sub_24A4A5858(uint64_t (*a1)(void *), uint64_t a2)
{
  return sub_24A586140(a1, a2);
}

uint64_t sub_24A4A5870(uint64_t result, void (*a2)(uint64_t *, void *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v15 = result;
  uint64_t v7 = a5 - a4;
  if (a5 != a4)
  {
    for (uint64_t i = a6 + 24 * a4 + 21; ; i += 24)
    {
      uint64_t v10 = *(void *)(i - 13);
      __int16 v11 = *(_WORD *)(i - 1);
      v12[0] = *(void *)(i - 21);
      v12[1] = v10;
      int v13 = *(_DWORD *)(i - 5);
      __int16 v14 = v11;
      swift_bridgeObjectRetain();
      a2(&v15, v12);
      unint64_t result = swift_bridgeObjectRelease();
      if (v6) {
        break;
      }
      if (!--v7) {
        return v15;
      }
    }
  }
  return result;
}

uint64_t sub_24A4A5928(uint64_t result, void (*a2)(uint64_t *, uint64_t *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = result;
  uint64_t v7 = a5 - a4;
  if (a5 != a4)
  {
    for (uint64_t i = (uint64_t *)(a6 + 40 * a4); ; i += 5)
    {
      uint64_t v10 = *i;
      long long v11 = *(_OWORD *)(i + 1);
      long long v12 = *(_OWORD *)(i + 3);
      swift_unknownObjectRetain();
      a2(&v13, &v10);
      unint64_t result = swift_unknownObjectRelease();
      if (v6) {
        break;
      }
      if (!--v7) {
        return v13;
      }
    }
  }
  return result;
}

uint64_t sub_24A4A59D8(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t (*a7)(unint64_t, unint64_t, uint64_t, uint64_t), uint64_t (*a8)(uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t))
{
  uint64_t v9 = v8[5];
  if (v9 != result || v9 != a4)
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (a2 == a5) {
    return 0;
  }
  uint64_t v14 = (uint64_t)v8;
  uint64_t v15 = result;
  unint64_t result = *v8;
  if (!*v8) {
    goto LABEL_19;
  }
  if (!a3 || !a6 || a3 != a6)
  {
    if (a2 >= a5)
    {
      swift_unknownObjectRetain();
      uint64_t v20 = a8(a4, a5, a6, v15, a2, a3);
      unint64_t result = sub_24A496BE8(v14);
      BOOL v21 = __OFSUB__(0, v20);
      uint64_t v13 = -v20;
      if (v21)
      {
LABEL_20:
        __break(1u);
        return result;
      }
    }
    else
    {
      swift_unknownObjectRetain();
      uint64_t v13 = a8(v15, a2, a3, a4, a5, a6);
      sub_24A496BE8(v14);
    }
    return v13;
  }
  uint64_t v22 = a3 + 16;
  char v23 = (4 * *(unsigned char *)(a3 + 18) + 8) & 0x3C;
  return a7((a2 >> v23) & 0xF, (a5 >> v23) & 0xF, v22, a3 + 24);
}

uint64_t sub_24A4A5B7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a1;
  uint64_t v7 = a2 - a1;
  BOOL v6 = a2 == a1;
  if (a2 < a1)
  {
    MEMORY[0x270FA5388](a1);
    uint64_t v11 = sub_24A4A5928(0, (void (*)(uint64_t *, uint64_t *))sub_24A4ABBA0, (uint64_t)&v16, v8, v9, v10);
    BOOL v12 = __OFSUB__(0, v11);
    uint64_t result = -v11;
    BOOL v6 = result == 0;
    if (!v12) {
      return result;
    }
    __break(1u);
  }
  uint64_t result = 0;
  if (!v6)
  {
    uint64_t v14 = (uint64_t *)(v4 + 40 * v5 + 32);
    while (1)
    {
      uint64_t v15 = *v14;
      v14 += 5;
      BOOL v12 = __OFADD__(result, v15);
      result += v15;
      if (v12) {
        break;
      }
      if (!--v7) {
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_24A4A5C3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a1;
  uint64_t v7 = a2 - a1;
  BOOL v6 = a2 == a1;
  if (a2 < a1)
  {
    MEMORY[0x270FA5388](a1);
    uint64_t v11 = sub_24A4A5870(0, (void (*)(uint64_t *, void *))sub_24A4ABB88, (uint64_t)&v16, v8, v9, v10);
    BOOL v12 = __OFSUB__(0, v11);
    uint64_t result = -v11;
    BOOL v6 = result == 0;
    if (!v12) {
      return result;
    }
    __break(1u);
  }
  uint64_t result = 0;
  if (!v6)
  {
    uint64_t v14 = (unsigned __int8 *)(v4 + 24 * v5 + 16);
    while (1)
    {
      unsigned int v15 = *v14;
      v14 += 24;
      BOOL v12 = __OFADD__(result, v15);
      result += v15;
      if (v12) {
        break;
      }
      if (!--v7) {
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_24A4A5CFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a1;
  uint64_t v7 = a2 - a1;
  BOOL v6 = a2 == a1;
  if (a2 < a1)
  {
    MEMORY[0x270FA5388](a1);
    uint64_t v11 = sub_24A4A5928(0, (void (*)(uint64_t *, uint64_t *))sub_24A4ABC40, (uint64_t)&v16, v8, v9, v10);
    BOOL v12 = __OFSUB__(0, v11);
    uint64_t result = -v11;
    BOOL v6 = result == 0;
    if (!v12) {
      return result;
    }
    __break(1u);
  }
  uint64_t result = 0;
  if (!v6)
  {
    uint64_t v14 = (uint64_t *)(v4 + 40 * v5 + 24);
    while (1)
    {
      uint64_t v15 = *v14;
      v14 += 5;
      BOOL v12 = __OFADD__(result, v15);
      result += v15;
      if (v12) {
        break;
      }
      if (!--v7) {
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_24A4A5DBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a1;
  uint64_t v7 = a2 - a1;
  BOOL v6 = a2 == a1;
  if (a2 < a1)
  {
    MEMORY[0x270FA5388](a1);
    uint64_t v11 = sub_24A4A5870(0, (void (*)(uint64_t *, void *))sub_24A4ABC28, (uint64_t)&v16, v8, v9, v10);
    BOOL v12 = __OFSUB__(0, v11);
    uint64_t result = -v11;
    BOOL v6 = result == 0;
    if (!v12) {
      return result;
    }
    __break(1u);
  }
  uint64_t result = 0;
  if (!v6)
  {
    uint64_t v14 = (unsigned __int8 *)(v4 + 24 * v5 + 17);
    while (1)
    {
      unsigned int v15 = *v14;
      v14 += 24;
      BOOL v12 = __OFADD__(result, v15);
      result += v15;
      if (v12) {
        break;
      }
      if (!--v7) {
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_24A4A5E7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a1;
  uint64_t v7 = a2 - a1;
  BOOL v6 = a2 == a1;
  if (a2 < a1)
  {
    MEMORY[0x270FA5388](a1);
    uint64_t v11 = sub_24A4A5928(0, (void (*)(uint64_t *, uint64_t *))sub_24A4ABBF0, (uint64_t)&v16, v8, v9, v10);
    BOOL v12 = __OFSUB__(0, v11);
    uint64_t result = -v11;
    BOOL v6 = result == 0;
    if (!v12) {
      return result;
    }
    __break(1u);
  }
  uint64_t result = 0;
  if (!v6)
  {
    uint64_t v14 = (uint64_t *)(v4 + 40 * v5 + 16);
    while (1)
    {
      uint64_t v15 = *v14;
      v14 += 5;
      BOOL v12 = __OFADD__(result, v15);
      result += v15;
      if (v12) {
        break;
      }
      if (!--v7) {
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_24A4A5F3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a1;
  uint64_t v7 = a2 - a1;
  BOOL v6 = a2 == a1;
  if (a2 < a1)
  {
    MEMORY[0x270FA5388](a1);
    uint64_t v11 = sub_24A4A5870(0, (void (*)(uint64_t *, void *))sub_24A4ABBD8, (uint64_t)&v16, v8, v9, v10);
    BOOL v12 = __OFSUB__(0, v11);
    uint64_t result = -v11;
    BOOL v6 = result == 0;
    if (!v12) {
      return result;
    }
    __break(1u);
  }
  uint64_t result = 0;
  if (!v6)
  {
    uint64_t v14 = (unsigned __int8 *)(v4 + 24 * v5 + 18);
    while (1)
    {
      unsigned int v15 = *v14;
      v14 += 24;
      BOOL v12 = __OFADD__(result, v15);
      result += v15;
      if (v12) {
        break;
      }
      if (!--v7) {
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_24A4A5FFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a1;
  uint64_t v7 = a2 - a1;
  BOOL v6 = a2 == a1;
  if (a2 < a1)
  {
    MEMORY[0x270FA5388](a1);
    uint64_t v11 = sub_24A4A5928(0, (void (*)(uint64_t *, uint64_t *))sub_24A4ABC90, (uint64_t)&v16, v8, v9, v10);
    BOOL v12 = __OFSUB__(0, v11);
    uint64_t result = -v11;
    BOOL v6 = result == 0;
    if (!v12) {
      return result;
    }
    __break(1u);
  }
  uint64_t result = 0;
  if (!v6)
  {
    uint64_t v14 = (uint64_t *)(v4 + 40 * v5 + 8);
    while (1)
    {
      uint64_t v15 = *v14;
      v14 += 5;
      BOOL v12 = __OFADD__(result, v15);
      result += v15;
      if (v12) {
        break;
      }
      if (!--v7) {
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_24A4A60BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a1;
  uint64_t v7 = a2 - a1;
  BOOL v6 = a2 == a1;
  if (a2 < a1)
  {
    MEMORY[0x270FA5388](a1);
    uint64_t v11 = sub_24A4A5870(0, (void (*)(uint64_t *, void *))sub_24A4ABC78, (uint64_t)&v16, v8, v9, v10);
    BOOL v12 = __OFSUB__(0, v11);
    uint64_t result = -v11;
    BOOL v6 = result == 0;
    if (!v12) {
      return result;
    }
    __break(1u);
  }
  uint64_t result = 0;
  if (!v6)
  {
    uint64_t v14 = (unsigned __int8 *)(v4 + 24 * v5 + 19);
    while (1)
    {
      unsigned int v15 = *v14;
      v14 += 24;
      BOOL v12 = __OFADD__(result, v15);
      result += v15;
      if (v12) {
        break;
      }
      if (!--v7) {
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

unint64_t sub_24A4A617C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t result = *v6;
  uint64_t v10 = (unsigned __int16 *)(*v6 + 16);
  unint64_t v9 = *v10;
  int v11 = *(unsigned __int8 *)(*v6 + 18);
  char v12 = (4 * v11 + 8) & 0x3C;
  unint64_t v13 = (a2 >> v12) & 0xF;
  unint64_t v14 = (a5 >> v12) & 0xF;
  if (v13 >= v9 || v14 > v9)
  {
    __break(1u);
  }
  else
  {
    uint64_t v17 = a3;
    if (v14 != v9) {
      goto LABEL_10;
    }
    if ((a5 & (~(-1 << ((4 * v11) & 0x3C)) << 8)) == 0)
    {
      unint64_t v19 = v6[4];
      unint64_t result = sub_24A4A664C(a1, a2, a3);
      uint64_t v17 = v19 - result;
      if (!__OFSUB__(v19, result)) {
        return v17;
      }
      __break(1u);
LABEL_10:
      uint64_t v22 = a6;
      uint64_t v23 = a4;
      uint64_t v20 = result + 24;
      swift_unknownObjectRetain();
      if (v11) {
        uint64_t v21 = sub_24A4A70EC((uint64_t)v10, v20, v13, v14, a1, a2, v17, v23, a5, v22);
      }
      else {
        uint64_t v21 = sub_24A4A6DFC((uint64_t)v10, v20, v13, v14);
      }
      uint64_t v17 = v21;
      sub_24A496BE8((uint64_t)v6);
      return v17;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_24A4A62B0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t result = *v6;
  uint64_t v10 = (unsigned __int16 *)(*v6 + 16);
  unint64_t v9 = *v10;
  int v11 = *(unsigned __int8 *)(*v6 + 18);
  char v12 = (4 * v11 + 8) & 0x3C;
  unint64_t v13 = (a2 >> v12) & 0xF;
  unint64_t v14 = (a5 >> v12) & 0xF;
  if (v13 >= v9 || v14 > v9)
  {
    __break(1u);
  }
  else
  {
    uint64_t v17 = a3;
    if (v14 != v9) {
      goto LABEL_10;
    }
    if ((a5 & (~(-1 << ((4 * v11) & 0x3C)) << 8)) == 0)
    {
      unint64_t v19 = v6[3];
      unint64_t result = sub_24A4A6780(a1, a2, a3);
      uint64_t v17 = v19 - result;
      if (!__OFSUB__(v19, result)) {
        return v17;
      }
      __break(1u);
LABEL_10:
      uint64_t v22 = a6;
      uint64_t v23 = a4;
      uint64_t v20 = result + 24;
      swift_unknownObjectRetain();
      if (v11) {
        uint64_t v21 = sub_24A4A7278((uint64_t)v10, v20, v13, v14, a1, a2, v17, v23, a5, v22);
      }
      else {
        uint64_t v21 = sub_24A4A6EB8((uint64_t)v10, v20, v13, v14);
      }
      uint64_t v17 = v21;
      sub_24A496BE8((uint64_t)v6);
      return v17;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_24A4A63E4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t result = *v6;
  uint64_t v10 = (unsigned __int16 *)(*v6 + 16);
  unint64_t v9 = *v10;
  int v11 = *(unsigned __int8 *)(*v6 + 18);
  char v12 = (4 * v11 + 8) & 0x3C;
  unint64_t v13 = (a2 >> v12) & 0xF;
  unint64_t v14 = (a5 >> v12) & 0xF;
  if (v13 >= v9 || v14 > v9)
  {
    __break(1u);
  }
  else
  {
    uint64_t v17 = a3;
    if (v14 != v9) {
      goto LABEL_10;
    }
    if ((a5 & (~(-1 << ((4 * v11) & 0x3C)) << 8)) == 0)
    {
      unint64_t v19 = v6[2];
      unint64_t result = sub_24A4A68B4(a1, a2, a3);
      uint64_t v17 = v19 - result;
      if (!__OFSUB__(v19, result)) {
        return v17;
      }
      __break(1u);
LABEL_10:
      uint64_t v22 = a6;
      uint64_t v23 = a4;
      uint64_t v20 = result + 24;
      swift_unknownObjectRetain();
      if (v11) {
        uint64_t v21 = sub_24A4A7410((uint64_t)v10, v20, v13, v14, a1, a2, v17, v23, a5, v22);
      }
      else {
        uint64_t v21 = sub_24A4A6F74((uint64_t)v10, v20, v13, v14);
      }
      uint64_t v17 = v21;
      sub_24A496BE8((uint64_t)v6);
      return v17;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_24A4A6518(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t result = *v6;
  uint64_t v10 = (unsigned __int16 *)(*v6 + 16);
  unint64_t v9 = *v10;
  int v11 = *(unsigned __int8 *)(*v6 + 18);
  char v12 = (4 * v11 + 8) & 0x3C;
  unint64_t v13 = (a2 >> v12) & 0xF;
  unint64_t v14 = (a5 >> v12) & 0xF;
  if (v13 >= v9 || v14 > v9)
  {
    __break(1u);
  }
  else
  {
    uint64_t v17 = a3;
    if (v14 != v9) {
      goto LABEL_10;
    }
    if ((a5 & (~(-1 << ((4 * v11) & 0x3C)) << 8)) == 0)
    {
      unint64_t v19 = v6[1];
      unint64_t result = sub_24A4A69E8(a1, a2, a3);
      uint64_t v17 = v19 - result;
      if (!__OFSUB__(v19, result)) {
        return v17;
      }
      __break(1u);
LABEL_10:
      uint64_t v22 = a6;
      uint64_t v23 = a4;
      uint64_t v20 = result + 24;
      swift_unknownObjectRetain();
      if (v11) {
        uint64_t v21 = sub_24A4A75AC((uint64_t)v10, v20, v13, v14, a1, a2, v17, v23, a5, v22);
      }
      else {
        uint64_t v21 = sub_24A4A7030((uint64_t)v10, v20, v13, v14);
      }
      uint64_t v17 = v21;
      sub_24A496BE8((uint64_t)v6);
      return v17;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_24A4A664C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t result = *(void *)v3;
  uint64_t v8 = (unsigned __int16 *)(*(void *)v3 + 16);
  unint64_t v7 = *v8;
  int v9 = *(unsigned __int8 *)(*(void *)v3 + 18);
  unint64_t v10 = (a2 >> ((4 * v9 + 8) & 0x3C)) & 0xF;
  if (v10 > v7)
  {
    __break(1u);
  }
  else
  {
    if (v10 != v7)
    {
      uint64_t v13 = result + 24;
      swift_unknownObjectRetain();
      if (v9)
      {
        uint64_t v8 = (unsigned __int16 *)sub_24A4A5B7C(0, v10, (uint64_t)v8, v13);
        uint64_t v14 = v13 + 40 * v10;
        uint64_t v15 = *(void *)(v14 + 32);
        long long v16 = *(_OWORD *)(v14 + 16);
        v19[0] = *(_OWORD *)v14;
        v19[1] = v16;
        uint64_t v20 = v15;
        swift_unknownObjectRetain();
        uint64_t v17 = sub_24A4A664C(a1, a2, a3);
        sub_24A496BE8((uint64_t)v19);
        BOOL v18 = __OFADD__(v8, v17);
        unint64_t v10 = (unint64_t)v8 + v17;
        if (!v18) {
          goto LABEL_11;
        }
        __break(1u);
      }
      unint64_t v10 = sub_24A4A6B1C((uint64_t)v8, v13, v10);
LABEL_11:
      sub_24A496BE8(v4);
      return v10;
    }
    if ((a2 & (~(-1 << ((4 * v9) & 0x3C)) << 8)) == 0) {
      return *(void *)(v4 + 32);
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_24A4A6780(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t result = *(void *)v3;
  uint64_t v8 = (unsigned __int16 *)(*(void *)v3 + 16);
  unint64_t v7 = *v8;
  int v9 = *(unsigned __int8 *)(*(void *)v3 + 18);
  unint64_t v10 = (a2 >> ((4 * v9 + 8) & 0x3C)) & 0xF;
  if (v10 > v7)
  {
    __break(1u);
  }
  else
  {
    if (v10 != v7)
    {
      uint64_t v13 = result + 24;
      swift_unknownObjectRetain();
      if (v9)
      {
        uint64_t v8 = (unsigned __int16 *)sub_24A4A5CFC(0, v10, (uint64_t)v8, v13);
        uint64_t v14 = v13 + 40 * v10;
        uint64_t v15 = *(void *)(v14 + 32);
        long long v16 = *(_OWORD *)(v14 + 16);
        v19[0] = *(_OWORD *)v14;
        v19[1] = v16;
        uint64_t v20 = v15;
        swift_unknownObjectRetain();
        uint64_t v17 = sub_24A4A6780(a1, a2, a3);
        sub_24A496BE8((uint64_t)v19);
        BOOL v18 = __OFADD__(v8, v17);
        unint64_t v10 = (unint64_t)v8 + v17;
        if (!v18) {
          goto LABEL_11;
        }
        __break(1u);
      }
      unint64_t v10 = sub_24A4A6BD4((uint64_t)v8, v13, v10);
LABEL_11:
      sub_24A496BE8(v4);
      return v10;
    }
    if ((a2 & (~(-1 << ((4 * v9) & 0x3C)) << 8)) == 0) {
      return *(void *)(v4 + 24);
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_24A4A68B4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t result = *(void *)v3;
  uint64_t v8 = (unsigned __int16 *)(*(void *)v3 + 16);
  unint64_t v7 = *v8;
  int v9 = *(unsigned __int8 *)(*(void *)v3 + 18);
  unint64_t v10 = (a2 >> ((4 * v9 + 8) & 0x3C)) & 0xF;
  if (v10 > v7)
  {
    __break(1u);
  }
  else
  {
    if (v10 != v7)
    {
      uint64_t v13 = result + 24;
      swift_unknownObjectRetain();
      if (v9)
      {
        uint64_t v8 = (unsigned __int16 *)sub_24A4A5E7C(0, v10, (uint64_t)v8, v13);
        uint64_t v14 = v13 + 40 * v10;
        uint64_t v15 = *(void *)(v14 + 32);
        long long v16 = *(_OWORD *)(v14 + 16);
        v19[0] = *(_OWORD *)v14;
        v19[1] = v16;
        uint64_t v20 = v15;
        swift_unknownObjectRetain();
        uint64_t v17 = sub_24A4A68B4(a1, a2, a3);
        sub_24A496BE8((uint64_t)v19);
        BOOL v18 = __OFADD__(v8, v17);
        unint64_t v10 = (unint64_t)v8 + v17;
        if (!v18) {
          goto LABEL_11;
        }
        __break(1u);
      }
      unint64_t v10 = sub_24A4A6C8C((uint64_t)v8, v13, v10);
LABEL_11:
      sub_24A496BE8(v4);
      return v10;
    }
    if ((a2 & (~(-1 << ((4 * v9) & 0x3C)) << 8)) == 0) {
      return *(void *)(v4 + 16);
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_24A4A69E8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t result = *(void *)v3;
  uint64_t v8 = (unsigned __int16 *)(*(void *)v3 + 16);
  unint64_t v7 = *v8;
  int v9 = *(unsigned __int8 *)(*(void *)v3 + 18);
  unint64_t v10 = (a2 >> ((4 * v9 + 8) & 0x3C)) & 0xF;
  if (v10 > v7)
  {
    __break(1u);
  }
  else
  {
    if (v10 != v7)
    {
      uint64_t v13 = result + 24;
      swift_unknownObjectRetain();
      if (v9)
      {
        uint64_t v8 = (unsigned __int16 *)sub_24A4A5FFC(0, v10, (uint64_t)v8, v13);
        uint64_t v14 = v13 + 40 * v10;
        uint64_t v15 = *(void *)(v14 + 32);
        long long v16 = *(_OWORD *)(v14 + 16);
        v19[0] = *(_OWORD *)v14;
        v19[1] = v16;
        uint64_t v20 = v15;
        swift_unknownObjectRetain();
        uint64_t v17 = sub_24A4A69E8(a1, a2, a3);
        sub_24A496BE8((uint64_t)v19);
        BOOL v18 = __OFADD__(v8, v17);
        unint64_t v10 = (unint64_t)v8 + v17;
        if (!v18) {
          goto LABEL_11;
        }
        __break(1u);
      }
      unint64_t v10 = sub_24A4A6D44((uint64_t)v8, v13, v10);
LABEL_11:
      sub_24A496BE8(v4);
      return v10;
    }
    if ((a2 & (~(-1 << ((4 * v9) & 0x3C)) << 8)) == 0) {
      return *(void *)(v4 + 8);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_24A4A6B1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if (a3 < 0)
  {
    MEMORY[0x270FA5388](a1);
    uint64_t v10 = sub_24A4A5870(0, (void (*)(uint64_t *, void *))sub_24A4ABB88, (uint64_t)&v11, v8, 0, v9);
    BOOL v7 = __OFSUB__(0, v10);
    uint64_t result = -v10;
    if (v7) {
LABEL_10:
    }
      __break(1u);
  }
  else
  {
    uint64_t result = 0;
    if (a3)
    {
      uint64_t v5 = (unsigned __int8 *)(a2 + 16);
      while (1)
      {
        unsigned int v6 = *v5;
        v5 += 24;
        BOOL v7 = __OFADD__(result, v6);
        result += v6;
        if (v7) {
          break;
        }
        if (!--v3) {
          return result;
        }
      }
      __break(1u);
      goto LABEL_10;
    }
  }
  return result;
}

uint64_t sub_24A4A6BD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if (a3 < 0)
  {
    MEMORY[0x270FA5388](a1);
    uint64_t v10 = sub_24A4A5870(0, (void (*)(uint64_t *, void *))sub_24A4ABC28, (uint64_t)&v11, v8, 0, v9);
    BOOL v7 = __OFSUB__(0, v10);
    uint64_t result = -v10;
    if (v7) {
LABEL_10:
    }
      __break(1u);
  }
  else
  {
    uint64_t result = 0;
    if (a3)
    {
      uint64_t v5 = (unsigned __int8 *)(a2 + 17);
      while (1)
      {
        unsigned int v6 = *v5;
        v5 += 24;
        BOOL v7 = __OFADD__(result, v6);
        result += v6;
        if (v7) {
          break;
        }
        if (!--v3) {
          return result;
        }
      }
      __break(1u);
      goto LABEL_10;
    }
  }
  return result;
}

uint64_t sub_24A4A6C8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if (a3 < 0)
  {
    MEMORY[0x270FA5388](a1);
    uint64_t v10 = sub_24A4A5870(0, (void (*)(uint64_t *, void *))sub_24A4ABBD8, (uint64_t)&v11, v8, 0, v9);
    BOOL v7 = __OFSUB__(0, v10);
    uint64_t result = -v10;
    if (v7) {
LABEL_10:
    }
      __break(1u);
  }
  else
  {
    uint64_t result = 0;
    if (a3)
    {
      uint64_t v5 = (unsigned __int8 *)(a2 + 18);
      while (1)
      {
        unsigned int v6 = *v5;
        v5 += 24;
        BOOL v7 = __OFADD__(result, v6);
        result += v6;
        if (v7) {
          break;
        }
        if (!--v3) {
          return result;
        }
      }
      __break(1u);
      goto LABEL_10;
    }
  }
  return result;
}

uint64_t sub_24A4A6D44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if (a3 < 0)
  {
    MEMORY[0x270FA5388](a1);
    uint64_t v10 = sub_24A4A5870(0, (void (*)(uint64_t *, void *))sub_24A4ABC78, (uint64_t)&v11, v8, 0, v9);
    BOOL v7 = __OFSUB__(0, v10);
    uint64_t result = -v10;
    if (v7) {
LABEL_10:
    }
      __break(1u);
  }
  else
  {
    uint64_t result = 0;
    if (a3)
    {
      uint64_t v5 = (unsigned __int8 *)(a2 + 19);
      while (1)
      {
        unsigned int v6 = *v5;
        v5 += 24;
        BOOL v7 = __OFADD__(result, v6);
        result += v6;
        if (v7) {
          break;
        }
        if (!--v3) {
          return result;
        }
      }
      __break(1u);
      goto LABEL_10;
    }
  }
  return result;
}

uint64_t sub_24A4A6DFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a3;
  uint64_t v5 = a2;
  uint64_t v7 = a4 - a3;
  BOOL v6 = a4 == a3;
  if (a4 < a3)
  {
    MEMORY[0x270FA5388](a1);
    uint64_t v11 = sub_24A4A5870(0, (void (*)(uint64_t *, void *))sub_24A4ABB88, (uint64_t)&v16, v8, v9, v10);
    BOOL v12 = __OFSUB__(0, v11);
    uint64_t result = -v11;
    BOOL v6 = result == 0;
    if (!v12) {
      return result;
    }
    __break(1u);
  }
  uint64_t result = 0;
  if (!v6)
  {
    uint64_t v14 = (unsigned __int8 *)(v5 + 24 * v4 + 16);
    while (1)
    {
      unsigned int v15 = *v14;
      v14 += 24;
      BOOL v12 = __OFADD__(result, v15);
      result += v15;
      if (v12) {
        break;
      }
      if (!--v7) {
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_24A4A6EB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a3;
  uint64_t v5 = a2;
  uint64_t v7 = a4 - a3;
  BOOL v6 = a4 == a3;
  if (a4 < a3)
  {
    MEMORY[0x270FA5388](a1);
    uint64_t v11 = sub_24A4A5870(0, (void (*)(uint64_t *, void *))sub_24A4ABC28, (uint64_t)&v16, v8, v9, v10);
    BOOL v12 = __OFSUB__(0, v11);
    uint64_t result = -v11;
    BOOL v6 = result == 0;
    if (!v12) {
      return result;
    }
    __break(1u);
  }
  uint64_t result = 0;
  if (!v6)
  {
    uint64_t v14 = (unsigned __int8 *)(v5 + 24 * v4 + 17);
    while (1)
    {
      unsigned int v15 = *v14;
      v14 += 24;
      BOOL v12 = __OFADD__(result, v15);
      result += v15;
      if (v12) {
        break;
      }
      if (!--v7) {
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_24A4A6F74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a3;
  uint64_t v5 = a2;
  uint64_t v7 = a4 - a3;
  BOOL v6 = a4 == a3;
  if (a4 < a3)
  {
    MEMORY[0x270FA5388](a1);
    uint64_t v11 = sub_24A4A5870(0, (void (*)(uint64_t *, void *))sub_24A4ABBD8, (uint64_t)&v16, v8, v9, v10);
    BOOL v12 = __OFSUB__(0, v11);
    uint64_t result = -v11;
    BOOL v6 = result == 0;
    if (!v12) {
      return result;
    }
    __break(1u);
  }
  uint64_t result = 0;
  if (!v6)
  {
    uint64_t v14 = (unsigned __int8 *)(v5 + 24 * v4 + 18);
    while (1)
    {
      unsigned int v15 = *v14;
      v14 += 24;
      BOOL v12 = __OFADD__(result, v15);
      result += v15;
      if (v12) {
        break;
      }
      if (!--v7) {
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_24A4A7030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a3;
  uint64_t v5 = a2;
  uint64_t v7 = a4 - a3;
  BOOL v6 = a4 == a3;
  if (a4 < a3)
  {
    MEMORY[0x270FA5388](a1);
    uint64_t v11 = sub_24A4A5870(0, (void (*)(uint64_t *, void *))sub_24A4ABC78, (uint64_t)&v16, v8, v9, v10);
    BOOL v12 = __OFSUB__(0, v11);
    uint64_t result = -v11;
    BOOL v6 = result == 0;
    if (!v12) {
      return result;
    }
    __break(1u);
  }
  uint64_t result = 0;
  if (!v6)
  {
    uint64_t v14 = (unsigned __int8 *)(v5 + 24 * v4 + 19);
    while (1)
    {
      unsigned int v15 = *v14;
      v14 += 24;
      BOOL v12 = __OFADD__(result, v15);
      result += v15;
      if (v12) {
        break;
      }
      if (!--v7) {
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_24A4A70EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10)
{
  uint64_t v14 = a2 + 40 * a3;
  if (a3 == a4)
  {
    long long v15 = *(_OWORD *)(v14 + 16);
    *(_OWORD *)long long v36 = *(_OWORD *)v14;
    *(_OWORD *)&v36[16] = v15;
    uint64_t v37 = *(void *)(v14 + 32);
    swift_unknownObjectRetain();
    uint64_t v16 = sub_24A4A617C(a5, a6, a7, a8, a9, a10);
    sub_24A496BE8((uint64_t)v36);
    return v16;
  }
  uint64_t v20 = *(void *)v14;
  uint64_t v21 = a2 + 40 * a3;
  uint64_t v22 = *(void *)(v21 + 24);
  uint64_t v23 = *(void *)(v21 + 32);
  *(void *)long long v36 = v20;
  *(_OWORD *)&v36[8] = *(_OWORD *)(v21 + 8);
  *(void *)&v36[24] = v22;
  uint64_t v37 = v23;
  swift_unknownObjectRetain();
  unint64_t v24 = sub_24A4A664C(a5, a6, a7);
  uint64_t result = swift_unknownObjectRelease();
  BOOL v26 = __OFSUB__(v23, v24);
  uint64_t v27 = v23 - v24;
  if (v26)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t result = a3 + 1;
  if (__OFADD__(a3, 1))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t result = sub_24A4A5B7C(result, a4, a1, a2);
  uint64_t v28 = v27 + result;
  if (__OFADD__(v27, result))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v29 = a2 + 40 * a4;
  long long v30 = *(_OWORD *)(v29 + 16);
  v34[0] = *(_OWORD *)v29;
  v34[1] = v30;
  uint64_t v35 = *(void *)(v29 + 32);
  swift_unknownObjectRetain();
  unint64_t v31 = sub_24A4A664C(a8, a9, a10);
  uint64_t result = sub_24A496BE8((uint64_t)v34);
  BOOL v26 = __OFADD__(v28, v31);
  uint64_t v16 = v28 + v31;
  if (!v26) {
    return v16;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_24A4A7278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10)
{
  uint64_t v14 = a2 + 40 * a3;
  if (a3 == a4)
  {
    long long v15 = *(_OWORD *)(v14 + 16);
    *(_OWORD *)long long v34 = *(_OWORD *)v14;
    *(_OWORD *)&v34[16] = v15;
    *(void *)&v34[32] = *(void *)(v14 + 32);
    swift_unknownObjectRetain();
    uint64_t v16 = sub_24A4A62B0(a5, a6, a7, a8, a9, a10);
    sub_24A496BE8((uint64_t)v34);
    return v16;
  }
  uint64_t v20 = *(void *)v14;
  uint64_t v21 = a2 + 40 * a3;
  *(void *)long long v34 = v20;
  *(_OWORD *)&v34[8] = *(_OWORD *)(v21 + 8);
  *(_OWORD *)&v34[24] = *(_OWORD *)(v21 + 24);
  swift_unknownObjectRetain();
  unint64_t v22 = sub_24A4A6780(a5, a6, a7);
  uint64_t result = swift_unknownObjectRelease();
  BOOL v24 = __OFSUB__(*(void *)&v34[24], v22);
  unint64_t v25 = *(void *)&v34[24] - v22;
  if (v24)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t result = a3 + 1;
  if (__OFADD__(a3, 1))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t result = sub_24A4A5CFC(result, a4, a1, a2);
  unint64_t v26 = v25 + result;
  if (__OFADD__(v25, result))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v27 = a2 + 40 * a4;
  long long v28 = *(_OWORD *)(v27 + 16);
  v32[0] = *(_OWORD *)v27;
  v32[1] = v28;
  uint64_t v33 = *(void *)(v27 + 32);
  swift_unknownObjectRetain();
  unint64_t v29 = sub_24A4A6780(a8, a9, a10);
  uint64_t result = sub_24A496BE8((uint64_t)v32);
  BOOL v24 = __OFADD__(v26, v29);
  uint64_t v16 = v26 + v29;
  if (!v24) {
    return v16;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_24A4A7410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10)
{
  uint64_t v14 = a2 + 40 * a3;
  if (a3 == a4)
  {
    long long v15 = *(_OWORD *)(v14 + 16);
    long long v36 = *(_OWORD *)v14;
    long long v37 = v15;
    uint64_t v38 = *(void *)(v14 + 32);
    swift_unknownObjectRetain();
    uint64_t v16 = sub_24A4A63E4(a5, a6, a7, a8, a9, a10);
    sub_24A496BE8((uint64_t)&v36);
    return v16;
  }
  uint64_t v20 = *(void *)v14;
  uint64_t v21 = a2 + 40 * a3;
  uint64_t v22 = *(void *)(v21 + 8);
  uint64_t v23 = *(void *)(v21 + 32);
  *(void *)&long long v36 = v20;
  *((void *)&v36 + 1) = v22;
  long long v37 = *(_OWORD *)(v21 + 16);
  uint64_t v38 = v23;
  swift_unknownObjectRetain();
  unint64_t v24 = sub_24A4A68B4(a5, a6, a7);
  uint64_t result = swift_unknownObjectRelease();
  BOOL v26 = __OFSUB__((void)v37, v24);
  uint64_t v27 = v37 - v24;
  if (v26)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t result = a3 + 1;
  if (__OFADD__(a3, 1))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t result = sub_24A4A5E7C(result, a4, a1, a2);
  uint64_t v28 = v27 + result;
  if (__OFADD__(v27, result))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v29 = a2 + 40 * a4;
  long long v30 = *(_OWORD *)(v29 + 16);
  v34[0] = *(_OWORD *)v29;
  v34[1] = v30;
  uint64_t v35 = *(void *)(v29 + 32);
  swift_unknownObjectRetain();
  unint64_t v31 = sub_24A4A68B4(a8, a9, a10);
  uint64_t result = sub_24A496BE8((uint64_t)v34);
  BOOL v26 = __OFADD__(v28, v31);
  uint64_t v16 = v28 + v31;
  if (!v26) {
    return v16;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_24A4A75AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10)
{
  uint64_t v14 = a2 + 40 * a3;
  if (a3 == a4)
  {
    long long v15 = *(_OWORD *)(v14 + 16);
    *(_OWORD *)long long v34 = *(_OWORD *)v14;
    *(_OWORD *)&v34[16] = v15;
    *(void *)&v34[32] = *(void *)(v14 + 32);
    swift_unknownObjectRetain();
    uint64_t v16 = sub_24A4A6518(a5, a6, a7, a8, a9, a10);
    sub_24A496BE8((uint64_t)v34);
    return v16;
  }
  uint64_t v20 = *(void *)v14;
  uint64_t v21 = a2 + 40 * a3;
  *(void *)long long v34 = v20;
  *(_OWORD *)&v34[8] = *(_OWORD *)(v21 + 8);
  *(_OWORD *)&v34[24] = *(_OWORD *)(v21 + 24);
  swift_unknownObjectRetain();
  unint64_t v22 = sub_24A4A69E8(a5, a6, a7);
  uint64_t result = swift_unknownObjectRelease();
  BOOL v24 = __OFSUB__(*(void *)&v34[8], v22);
  unint64_t v25 = *(void *)&v34[8] - v22;
  if (v24)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t result = a3 + 1;
  if (__OFADD__(a3, 1))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t result = sub_24A4A5FFC(result, a4, a1, a2);
  unint64_t v26 = v25 + result;
  if (__OFADD__(v25, result))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v27 = a2 + 40 * a4;
  long long v28 = *(_OWORD *)(v27 + 16);
  v32[0] = *(_OWORD *)v27;
  v32[1] = v28;
  uint64_t v33 = *(void *)(v27 + 32);
  swift_unknownObjectRetain();
  unint64_t v29 = sub_24A4A69E8(a8, a9, a10);
  uint64_t result = sub_24A496BE8((uint64_t)v32);
  BOOL v24 = __OFADD__(v26, v29);
  uint64_t v16 = v26 + v29;
  if (!v24) {
    return v16;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_24A4A7744(uint64_t result, uint64_t *a2, char a3, uint64_t (*a4)(uint64_t, uint64_t *, void), uint64_t (*a5)(uint64_t, uint64_t *, void, void *, uint64_t (*)(void, void, void)), uint64_t (*a6)(void *, void *, uint64_t, void *, uint64_t *, void))
{
  uint64_t v10 = v7[5];
  if (*(void *)result != v10)
  {
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v11 = (uint64_t)v7;
  uint64_t v13 = (void *)*v7;
  uint64_t v14 = *a2;
  if (!v13)
  {
    if (!v14) {
      return result;
    }
    __break(1u);
LABEL_11:
    BOOL v19 = __OFSUB__(0, v14);
    uint64_t v20 = -v14;
    if (!v19)
    {
      uint64_t v17 = a4;
      long long v21 = *(_OWORD *)(v11 + 8);
      long long v22 = *(_OWORD *)(v11 + 24);
      *a2 = v20;
      uint64_t v23 = v13;
      long long v24 = v21;
      long long v25 = v22;
      swift_unknownObjectRetain();
      uint64_t v13 = &v23;
      uint64_t v6 = v17(v6, a2, v8 & 1);
      uint64_t result = sub_24A496BE8(v11);
      if (v6) {
        return result;
      }
      __break(1u);
      goto LABEL_14;
    }
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  char v8 = a3;
  uint64_t v6 = result;
  if (v14 <= 0) {
    goto LABEL_11;
  }
  uint64_t v9 = a5;
  uint64_t v16 = *(void *)(result + 16);
  if (!v16
    || (uint64_t result = a5(result + 8, a2, a3 & 1, (void *)(v16 + 16), (uint64_t (*)(void, void, void))(v16 + 24)), (result & 1) == 0))
  {
    uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t *, void))(v13 + 3);
    if (*((unsigned char *)v13 + 18))
    {
      sub_24A497498(v11);
      char v18 = a6(v13 + 2, v13 + 3, v6, v13, a2, v8 & 1);
      uint64_t result = sub_24A496BE8(v11);
      if (v18) {
        return result;
      }
LABEL_15:
      if (!*a2)
      {
        uint64_t result = sub_24A498214();
        uint64_t v13 = 0;
        *(void *)uint64_t v6 = v10;
        *(void *)(v6 + 8) = result;
        goto LABEL_17;
      }
LABEL_21:
      __break(1u);
      return result;
    }
LABEL_14:
    uint64_t result = v9(v6 + 8, a2, v8 & 1, v13 + 2, (uint64_t (*)(void, void, void))v17);
    if (result)
    {
LABEL_17:
      *(void *)(v6 + 16) = v13;
      return result;
    }
    goto LABEL_15;
  }
  return result;
}

uint64_t sub_24A4A78DC(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = *a2;
  if (*a2 <= 0 && (a3 & 1) == 0) {
    return 1;
  }
  if (*(unsigned char *)(v7 + 18))
  {
    sub_24A497498((uint64_t)v3);
    char v10 = sub_24A4AA0A4(v7 + 16, v7 + 24, a1, v7, a2, a3 & 1);
    sub_24A496BE8((uint64_t)v3);
    return v10 & 1;
  }
  else
  {
    unint64_t v11 = *(void *)(a1 + 8);
    uint64_t v12 = (v11 >> 8) & 0xF;
    if (v12)
    {
      unint64_t v13 = v12 + 1;
      uint64_t v14 = (v12 << 8) - 256;
      long long v15 = (unsigned __int8 *)(v7 + 24 * ((v11 >> 8) & 0xF) + 19);
      while (1)
      {
        unsigned int v17 = *v15;
        v15 -= 24;
        uint64_t v16 = v17;
        uint64_t v18 = v8 - v17;
        BOOL v19 = v8 <= v17;
        BOOL v20 = v8 < v17;
        if (a3) {
          BOOL v19 = v20;
        }
        if (v19) {
          break;
        }
        *a2 = v18;
        --v13;
        v14 -= 256;
        uint64_t v8 = v18;
        if (v13 < 2) {
          return 0;
        }
      }
      *(void *)(a1 + 8) = v14 | v11 & 0xFFFFFFFFFFFFF0FFLL;
      *a2 = v16 - v8;
      return 1;
    }
    else
    {
      return 0;
    }
  }
}

uint64_t sub_24A4A79FC(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = *a2;
  if (*a2 <= 0 && (a3 & 1) == 0) {
    return 1;
  }
  if (*(unsigned char *)(v7 + 18))
  {
    sub_24A497498((uint64_t)v3);
    char v10 = sub_24A4A9C20(v7 + 16, v7 + 24, a1, v7, a2, a3 & 1);
    sub_24A496BE8((uint64_t)v3);
    return v10 & 1;
  }
  else
  {
    unint64_t v11 = *(void *)(a1 + 8);
    uint64_t v12 = (v11 >> 8) & 0xF;
    if (v12)
    {
      unint64_t v13 = v12 + 1;
      uint64_t v14 = (v12 << 8) - 256;
      long long v15 = (unsigned __int8 *)(v7 + 24 * ((v11 >> 8) & 0xF) + 18);
      while (1)
      {
        unsigned int v17 = *v15;
        v15 -= 24;
        uint64_t v16 = v17;
        uint64_t v18 = v8 - v17;
        BOOL v19 = v8 <= v17;
        BOOL v20 = v8 < v17;
        if (a3) {
          BOOL v19 = v20;
        }
        if (v19) {
          break;
        }
        *a2 = v18;
        --v13;
        v14 -= 256;
        uint64_t v8 = v18;
        if (v13 < 2) {
          return 0;
        }
      }
      *(void *)(a1 + 8) = v14 | v11 & 0xFFFFFFFFFFFFF0FFLL;
      *a2 = v16 - v8;
      return 1;
    }
    else
    {
      return 0;
    }
  }
}

uint64_t sub_24A4A7B1C(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = *a2;
  if (*a2 <= 0 && (a3 & 1) == 0) {
    return 1;
  }
  if (*(unsigned char *)(v7 + 18))
  {
    sub_24A497498((uint64_t)v3);
    char v10 = sub_24A4AA528(v7 + 16, v7 + 24, a1, v7, a2, a3 & 1);
    sub_24A496BE8((uint64_t)v3);
    return v10 & 1;
  }
  else
  {
    unint64_t v11 = *(void *)(a1 + 8);
    uint64_t v12 = (v11 >> 8) & 0xF;
    if (v12)
    {
      unint64_t v13 = v12 + 1;
      uint64_t v14 = (v12 << 8) - 256;
      long long v15 = (unsigned __int8 *)(v7 + 24 * ((v11 >> 8) & 0xF) + 16);
      while (1)
      {
        unsigned int v17 = *v15;
        v15 -= 24;
        uint64_t v16 = v17;
        uint64_t v18 = v8 - v17;
        BOOL v19 = v8 <= v17;
        BOOL v20 = v8 < v17;
        if (a3) {
          BOOL v19 = v20;
        }
        if (v19) {
          break;
        }
        *a2 = v18;
        --v13;
        v14 -= 256;
        uint64_t v8 = v18;
        if (v13 < 2) {
          return 0;
        }
      }
      *(void *)(a1 + 8) = v14 | v11 & 0xFFFFFFFFFFFFF0FFLL;
      *a2 = v16 - v8;
      return 1;
    }
    else
    {
      return 0;
    }
  }
}

uint64_t sub_24A4A7C3C(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = *a2;
  if (*a2 <= 0 && (a3 & 1) == 0) {
    return 1;
  }
  if (*(unsigned char *)(v7 + 18))
  {
    sub_24A497498((uint64_t)v3);
    char v10 = sub_24A4A92B4(v7 + 16, v7 + 24, a1, v7, a2, a3 & 1);
    sub_24A496BE8((uint64_t)v3);
    return v10 & 1;
  }
  else
  {
    unint64_t v11 = *(void *)(a1 + 8);
    uint64_t v12 = (v11 >> 8) & 0xF;
    if (v12)
    {
      unint64_t v13 = v12 + 1;
      uint64_t v14 = (v12 << 8) - 256;
      long long v15 = (unsigned __int8 *)(v7 + 24 * ((v11 >> 8) & 0xF) + 17);
      while (1)
      {
        unsigned int v17 = *v15;
        v15 -= 24;
        uint64_t v16 = v17;
        uint64_t v18 = v8 - v17;
        BOOL v19 = v8 <= v17;
        BOOL v20 = v8 < v17;
        if (a3) {
          BOOL v19 = v20;
        }
        if (v19) {
          break;
        }
        *a2 = v18;
        --v13;
        v14 -= 256;
        uint64_t v8 = v18;
        if (v13 < 2) {
          return 0;
        }
      }
      *(void *)(a1 + 8) = v14 | v11 & 0xFFFFFFFFFFFFF0FFLL;
      *a2 = v16 - v8;
      return 1;
    }
    else
    {
      return 0;
    }
  }
}

unint64_t sub_24A4A7D5C(unint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t result = sub_24A497020(a1, a3, a4);
  if (a2 < 0)
  {
    uint64_t v14 = 0;
    while (1)
    {
      if (result < 0x10000) {
        goto LABEL_38;
      }
      if ((a4 & 0x1000000000000000) == 0) {
        break;
      }
      unint64_t result = sub_24A5BB5E0();
LABEL_20:
      if (--v14 <= a2) {
        return result;
      }
    }
    unint64_t v15 = result >> 16;
    if ((a4 & 0x2000000000000000) != 0)
    {
      unint64_t v21 = a3;
      uint64_t v22 = a4 & 0xFFFFFFFFFFFFFFLL;
      if ((*((unsigned char *)&v21 + v15 - 1) & 0xC0) == 0x80)
      {
        uint64_t v17 = 0;
        do
          int v19 = *((unsigned char *)&v21 + v15 + v17-- - 2) & 0xC0;
        while (v19 == 128);
        goto LABEL_33;
      }
    }
    else
    {
      uint64_t v16 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((a3 & 0x1000000000000000) == 0) {
        uint64_t v16 = sub_24A5BC120();
      }
      if ((*(unsigned char *)(v15 + v16 - 1) & 0xC0) == 0x80)
      {
        uint64_t v17 = 0;
        do
          int v18 = *(unsigned char *)(v16 + v15 - 2 + v17--) & 0xC0;
        while (v18 == 128);
LABEL_33:
        uint64_t v20 = 1 - v17;
LABEL_35:
        unint64_t result = ((v15 - v20) << 16) | 5;
        goto LABEL_20;
      }
    }
    uint64_t v20 = 1;
    goto LABEL_35;
  }
  if (a2)
  {
    if ((a4 & 0x2000000000000000) != 0) {
      unint64_t v8 = HIBYTE(a4) & 0xF;
    }
    else {
      unint64_t v8 = a3 & 0xFFFFFFFFFFFFLL;
    }
    while (1)
    {
      unint64_t v9 = result >> 16;
      if (result >> 16 >= v8) {
        break;
      }
      if ((a4 & 0x1000000000000000) != 0)
      {
        unint64_t result = sub_24A5BB5D0();
        if (!--a2) {
          return result;
        }
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          unint64_t v21 = a3;
          uint64_t v22 = a4 & 0xFFFFFFFFFFFFFFLL;
          int v11 = *((unsigned __int8 *)&v21 + v9);
        }
        else
        {
          uint64_t v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000) == 0) {
            uint64_t v10 = sub_24A5BC120();
          }
          int v11 = *(unsigned __int8 *)(v10 + v9);
        }
        int v12 = (char)v11;
        unsigned int v13 = __clz(v11 ^ 0xFF) - 24;
        if (v12 >= 0) {
          LOBYTE(v13) = 1;
        }
        unint64_t result = ((v9 + v13) << 16) | 5;
        if (!--a2) {
          return result;
        }
      }
    }
    __break(1u);
LABEL_38:
    __break(1u);
  }
  return result;
}

unint64_t sub_24A4A7F58(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  return sub_24A489834(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_24A491A60, (uint64_t (*)(unint64_t, unint64_t, uint64_t, uint64_t))sub_24A4A5F3C, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t))sub_24A4A63E4);
}

unint64_t sub_24A4A7FB4(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v11 = v6;
  long long v12 = *(_OWORD *)(v6 + 16);
  *(_OWORD *)uint64_t v72 = *(_OWORD *)v6;
  *(_OWORD *)&v72[16] = v12;
  long long v73 = *(_OWORD *)(v6 + 32);
  unint64_t v13 = v73;
  if (*(void *)v72) {
    unint64_t v14 = 2 * (v73 & 0x1FFFFFFFFFFFFFLL);
  }
  else {
    unint64_t v14 = 0;
  }
  if (v14 < a1 >> 10)
  {
    __break(1u);
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  if (!*(void *)v72 || (v74 = *(void *)v72, long long v75 = *(_OWORD *)&v72[8], v76 = *(void *)&v72[24], (v77 = v73) == 0))
  {
    if (!a5) {
      return 768;
    }
    goto LABEL_61;
  }
  uint64_t v16 = a1;
  if (a1 >> 10 == ((2 * (void)v73) & 0x3FFFFFFFFFFFFFLL))
  {
    if (!a5) {
      return v16;
    }
    LOBYTE(v17) = 1;
  }
  else
  {
    unint64_t v17 = a5 >> 63;
  }
  uint64_t v6 = v11;
  unint64_t result = sub_24A496820(a1, a2, a3, a4, v17);
  if (v20 != 1)
  {
    unint64_t v5 = v19;
    uint64_t v8 = v20;
    unint64_t v69 = a2;
    unint64_t v70 = v19;
    unint64_t v71 = v20;
    uint64_t v67 = a5;
    unint64_t v68 = (16 * (int)result) & 0x4000 | ((unint64_t)result << 16) | (result >> 8) & 3 | 4;
    if (a2 == *((void *)&v73 + 1))
    {
      unint64_t v60 = a2;
      unint64_t v61 = result;
      unint64_t v59 = v19;
      if (v20)
      {
        unint64_t v22 = v20 + 24 * ((v19 >> ((4 * *(unsigned char *)(v20 + 18) + 8) & 0x3C)) & 0xF);
        uint64_t v23 = *(void *)(v22 + 24);
        unint64_t v9 = *(void *)(v22 + 32);
        unint64_t v7 = *(unsigned __int8 *)(v22 + 40);
        v21.i32[0] = *(_DWORD *)(v22 + 41);
        unint64_t v58 = vmovl_u8(v21).u64[0];
        uint64_t v24 = *(unsigned __int8 *)(v22 + 45);
        swift_bridgeObjectRetain();
        v25.i64[0] = v58;
      }
      else
      {
        swift_unknownObjectRetain();
        sub_24A4895D4(v5, (uint64_t)&v62);
        sub_24A496BE8(v11);
        uint64_t v23 = v62;
        unint64_t v9 = v63;
        unint64_t v7 = v64;
        v26.i32[0] = v65;
        uint16x8_t v25 = vmovl_u8(v26);
        uint64_t v24 = v66;
      }
      uint32x4_t v27 = vmovl_u16((uint16x4_t)(v25.i64[0] & 0xFF00FF00FF00FFLL));
      v28.i64[0] = v27.u32[0];
      v28.i64[1] = v27.u32[1];
      uint64x2_t v29 = v28;
      v28.i64[0] = v27.u32[2];
      v28.i64[1] = v27.u32[3];
      uint64_t v57 = v27.u32[2];
      int8x16_t v30 = vorrq_s8((int8x16_t)vshlq_u64(v29, (uint64x2_t)xmmword_24A5BD070), (int8x16_t)vshlq_u64(v28, (uint64x2_t)xmmword_24A5BD060));
      unint64_t v10 = *(void *)&vorr_s8(*(int8x8_t *)v30.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL)) | (v24 << 40) | v7;
      swift_bridgeObjectRetain();
      uint64_t v6 = (uint64_t)sub_24A54A450((uint64_t *)&v68, (unint64_t *)&v67, v23, v9, v10);
      swift_bridgeObjectRelease();
      if (v6)
      {
        swift_bridgeObjectRelease();
        unint64_t v32 = (v68 >> 16) - v61 + (v61 >> 11);
        if ((v68 & 0xC000) != 0) {
          uint64_t v33 = (v32 << 11) | 0x400;
        }
        else {
          uint64_t v33 = v32 << 11;
        }
        return v33 & 0xFFFFFFFFFFFFFF00 | BYTE2(v68);
      }
      uint64_t v56 = v61;
      if ((v6 & 0x100) == 0)
      {
        swift_unknownObjectRetain();
        uint64_t v6 = (uint64_t)v72;
        sub_24A4A7744((uint64_t)&v69, &v67, 0, (uint64_t (*)(uint64_t, uint64_t *, void))sub_24A4A78DC, (uint64_t (*)(uint64_t, uint64_t *, void, void *, uint64_t (*)(void, void, void)))sub_24A4A9E14, (uint64_t (*)(void *, void *, uint64_t, void *, uint64_t *, void))sub_24A4A9E90);
        sub_24A496BE8(v11);
        unint64_t v5 = v60;
        if (v69 == v60)
        {
          unint64_t v7 = v70;
          uint64_t v57 = v71;
          if (v71)
          {
            unint64_t v31 = v71 + 24 * ((v70 >> ((4 * *(unsigned char *)(v71 + 18) + 8) & 0x3C)) & 0xF);
            uint64_t v6 = *(void *)(v31 + 24);
            unint64_t v10 = *(void *)(v31 + 32);
            unint64_t v9 = *(unsigned __int8 *)(v31 + 43);
            unint64_t v13 = *(unsigned __int8 *)(v31 + 44);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_unknownObjectRetain();
            sub_24A4895D4(v7, (uint64_t)&v62);
            sub_24A496BE8(v11);
            swift_bridgeObjectRelease();
            uint64_t v6 = v62;
            unint64_t v10 = v63;
            unint64_t v9 = BYTE2(v65);
            unint64_t v13 = HIBYTE(v65);
          }
          if (v67 < v9)
          {
            a2 = v13;
            unint64_t v9 = v61;
            if ((v10 & 0x1000000000000000) == 0)
            {
              unint64_t v38 = HIBYTE(v10) & 0xF;
              if ((v10 & 0x2000000000000000) == 0) {
                unint64_t v38 = v6 & 0xFFFFFFFFFFFFLL;
              }
              if (v38 < v13)
              {
                __break(1u);
                goto LABEL_68;
              }
              unint64_t v13 = ((unint64_t)v13 << 16) | 4;
LABEL_40:
              swift_bridgeObjectRetain();
              sub_24A494C00(v13, v6, v10);
              unint64_t v39 = sub_24A5BBE50();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              unint64_t v40 = (v61 >> 11) - v9;
              swift_unknownObjectRetain();
              uint64_t v41 = v8;
              uint64_t v8 = v57;
              uint64_t v42 = sub_24A4A59D8(v5, v59, v41, v5, v7, v57, (uint64_t (*)(unint64_t, unint64_t, uint64_t, uint64_t))sub_24A4A5C3C, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t))sub_24A4A617C);
              sub_24A496BE8(v11);
              swift_bridgeObjectRelease();
              unint64_t v43 = v40 + v42;
              if (!__OFADD__(v40, v42))
              {
                BOOL v44 = __OFADD__(v43, v39 >> 16);
                unint64_t v45 = v43 + (v39 >> 16);
                if (!v44)
                {
                  if ((v39 & 0xC000) != 0) {
                    uint64_t v46 = (v45 << 11) | 0x400;
                  }
                  else {
                    uint64_t v46 = v45 << 11;
                  }
                  return v46 & 0xFFFFFFFFFFFFFF00 | BYTE2(v39);
                }
                goto LABEL_69;
              }
LABEL_68:
              __break(1u);
LABEL_69:
              __break(1u);
              goto LABEL_70;
            }
LABEL_66:
            unint64_t v13 = MEMORY[0x24C5C6A60](15, a2, v6, v10);
            goto LABEL_40;
          }
LABEL_65:
          __break(1u);
          goto LABEL_66;
        }
        goto LABEL_63;
      }
      unint64_t v5 = v60;
      if (__OFADD__(v67, v57))
      {
LABEL_64:
        __break(1u);
        goto LABEL_65;
      }
      v67 += v57;
      swift_unknownObjectRetain();
      sub_24A4A7744((uint64_t)&v69, &v67, 0, (uint64_t (*)(uint64_t, uint64_t *, void))sub_24A4A78DC, (uint64_t (*)(uint64_t, uint64_t *, void, void *, uint64_t (*)(void, void, void)))sub_24A4A9E14, (uint64_t (*)(void *, void *, uint64_t, void *, uint64_t *, void))sub_24A4A9E90);
      sub_24A496BE8(v11);
      unint64_t v10 = v70;
      swift_unknownObjectRetain();
      unint64_t v34 = sub_24A498214();
      sub_24A496BE8(v11);
      if (v10 != v34)
      {
        if (v69 == v60)
        {
          unint64_t v7 = v71;
          if (v71)
          {
            unint64_t v35 = v71 + 24 * ((v10 >> ((4 * *(unsigned char *)(v71 + 18) + 8) & 0x3C)) & 0xF);
            unint64_t v13 = *(void *)(v35 + 32);
            uint64_t v57 = *(void *)(v35 + 24);
            unsigned int v36 = *(unsigned __int8 *)(v35 + 43);
            unsigned int v37 = *(unsigned __int8 *)(v35 + 44);
            swift_bridgeObjectRetain();
            unint64_t result = swift_bridgeObjectRelease();
          }
          else
          {
            swift_unknownObjectRetain();
            sub_24A4895D4(v10, (uint64_t)&v62);
            sub_24A496BE8(v11);
            unint64_t result = swift_bridgeObjectRelease();
            unint64_t v13 = v63;
            uint64_t v57 = v62;
            unsigned int v36 = BYTE2(v65);
            unsigned int v37 = HIBYTE(v65);
          }
          if (v67 < v36)
          {
            a2 = v37;
            if ((v13 & 0x1000000000000000) == 0)
            {
              unint64_t v47 = HIBYTE(v13) & 0xF;
              uint64_t v48 = v61;
              if ((v13 & 0x2000000000000000) == 0) {
                unint64_t v47 = v57 & 0xFFFFFFFFFFFFLL;
              }
              if (v47 < a2)
              {
                __break(1u);
                goto LABEL_74;
              }
              unint64_t v49 = (a2 << 16) | 4;
LABEL_53:
              swift_bridgeObjectRetain();
              sub_24A494C00(v49, v57, v13);
              unint64_t v50 = sub_24A5BBE50();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v51 = (v61 >> 11) - v48;
              swift_unknownObjectRetain();
              uint64_t v52 = sub_24A4A59D8(v5, v59, v8, v5, v10, v7, (uint64_t (*)(unint64_t, unint64_t, uint64_t, uint64_t))sub_24A4A5C3C, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t))sub_24A4A617C);
              sub_24A496BE8(v11);
              unint64_t result = swift_bridgeObjectRelease();
              uint64_t v53 = v51 + v52;
              if (!__OFADD__(v51, v52))
              {
                BOOL v44 = __OFADD__(v53, v50 >> 16);
                uint64_t v54 = v53 + (v50 >> 16);
                if (!v44)
                {
                  if ((v50 & 0xC000) != 0) {
                    uint64_t v55 = (v54 << 11) | 0x400;
                  }
                  else {
                    uint64_t v55 = v54 << 11;
                  }
                  return v55 & 0xFFFFFFFFFFFFFF00 | BYTE2(v50);
                }
                goto LABEL_75;
              }
LABEL_74:
              __break(1u);
LABEL_75:
              __break(1u);
              goto LABEL_76;
            }
LABEL_72:
            unint64_t v49 = MEMORY[0x24C5C6A60](15, a2, v57, v13);
            uint64_t v48 = v56;
            goto LABEL_53;
          }
LABEL_71:
          __break(1u);
          goto LABEL_72;
        }
LABEL_70:
        __break(1u);
        goto LABEL_71;
      }
      uint64_t v16 = (v13 << 11) | 0x300;
      swift_bridgeObjectRelease();
      return v16;
    }
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
LABEL_76:
  __break(1u);
  return result;
}

unint64_t sub_24A4A8740(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v6 = (uint64_t)v5;
  long long v7 = v5[1];
  *(_OWORD *)uint64_t v77 = *v5;
  *(_OWORD *)&v77[16] = v7;
  long long v78 = v5[2];
  uint64_t v8 = v78;
  if (*(void *)v77) {
    unint64_t v9 = 2 * (v78 & 0x1FFFFFFFFFFFFFLL);
  }
  else {
    unint64_t v9 = 0;
  }
  if (v9 < result >> 10)
  {
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
    goto LABEL_131;
  }
  uint64_t v10 = a5;
  if (!*(void *)v77 || (uint64_t v79 = *(void *)v77, v80 = *(_OWORD *)&v77[8], v81 = *(void *)&v77[24], (v82 = v78) == 0))
  {
    if (!a5) {
      return 768;
    }
    goto LABEL_126;
  }
  uint64_t v11 = result;
  if (result >> 10 == ((2 * (void)v78) & 0x3FFFFFFFFFFFFFLL))
  {
    if (!a5) {
      return v11;
    }
    LOBYTE(v12) = 1;
  }
  else
  {
    unint64_t v12 = a5 >> 63;
  }
  unint64_t result = sub_24A496820(result, a2, a3, a4, v12);
  if (v15 == 1) {
    goto LABEL_135;
  }
  unint64_t v16 = v14;
  uint64_t v17 = v15;
  uint64_t v74 = v13;
  unint64_t v75 = v14;
  uint64_t v76 = v15;
  uint64_t v73 = v10;
  if (v13 != *((void *)&v78 + 1)) {
    goto LABEL_127;
  }
  uint64_t v68 = v13;
  unint64_t v18 = (16 * (int)result) & 0x4000 | ((unint64_t)result << 16);
  unint64_t v69 = result;
  unint64_t v19 = v18 | (result >> 8) & 3 | 4;
  if (v15)
  {
    unint64_t v20 = v15 + 24 * ((v14 >> ((4 * *(unsigned char *)(v15 + 18) + 8) & 0x3C)) & 0xF);
    unint64_t v21 = *(void *)(v20 + 24);
    unint64_t v22 = *(void *)(v20 + 32);
    unsigned int v23 = *(unsigned __int8 *)(v20 + 42);
    unint64_t result = swift_bridgeObjectRetain();
  }
  else
  {
    swift_unknownObjectRetain();
    sub_24A4895D4(v16, (uint64_t)&v70);
    unint64_t result = sub_24A496BE8(v6);
    unint64_t v21 = v70;
    unint64_t v22 = v71;
    unsigned int v23 = v72;
  }
  if (!v10)
  {
    unint64_t v19 = sub_24A497020(v19, v21, v22);
    goto LABEL_53;
  }
  unint64_t v67 = v16;
  if (v10 > 0)
  {
    if ((v22 & 0x2000000000000000) != 0) {
      unint64_t v24 = HIBYTE(v22) & 0xF;
    }
    else {
      unint64_t v24 = v21 & 0xFFFFFFFFFFFFLL;
    }
    if (4 * v24 <= v18 >> 14) {
      goto LABEL_95;
    }
    uint64_t v25 = (v21 >> 59) & 1;
    if ((v22 & 0x1000000000000000) == 0) {
      LOBYTE(v25) = 1;
    }
    uint64_t v26 = 4 << v25;
    do
    {
      if ((v19 & 0xC) == v26 || (v19 & 1) == 0)
      {
        if ((v19 & 0xC) == v26)
        {
          unint64_t result = sub_24A4DFD84(v19, v21, v22);
          unint64_t v19 = result;
          if (v24 <= result >> 16) {
            goto LABEL_123;
          }
        }
        else if (v24 <= v19 >> 16)
        {
          goto LABEL_123;
        }
        if ((v19 & 1) == 0)
        {
          unint64_t result = sub_24A4971A8(v19, v21, v22);
          unint64_t v19 = v19 & 0xC | result & 0xFFFFFFFFFFFFFFF3 | 1;
        }
      }
      else if (v24 <= v19 >> 16)
      {
        goto LABEL_122;
      }
      if ((v22 & 0x1000000000000000) != 0)
      {
        unint64_t result = sub_24A5BB5D0();
        unint64_t v19 = result;
      }
      else
      {
        unint64_t v28 = v19 >> 16;
        if ((v22 & 0x2000000000000000) != 0)
        {
          unint64_t v70 = v21;
          uint64_t v71 = v22 & 0xFFFFFFFFFFFFFFLL;
          int v29 = *((unsigned __int8 *)&v70 + v28);
        }
        else
        {
          unint64_t result = (v22 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((v21 & 0x1000000000000000) == 0) {
            unint64_t result = sub_24A5BC120();
          }
          int v29 = *(unsigned __int8 *)(result + v28);
        }
        int v30 = (char)v29;
        unsigned int v31 = __clz(v29 ^ 0xFF) - 24;
        if (v30 >= 0) {
          LOBYTE(v31) = 1;
        }
        unint64_t v19 = ((v28 + v31) << 16) | 5;
      }
      --v10;
    }
    while (v10 >= 1 && v19 >> 14 < 4 * v24);
    if (v10)
    {
LABEL_95:
      if (!__OFADD__(v10, v23))
      {
        uint64_t v73 = v10 + v23;
        swift_unknownObjectRetain();
        sub_24A4A7744((uint64_t)&v74, &v73, 0, (uint64_t (*)(uint64_t, uint64_t *, void))sub_24A4A79FC, (uint64_t (*)(uint64_t, uint64_t *, void, void *, uint64_t (*)(void, void, void)))sub_24A4A9990, (uint64_t (*)(void *, void *, uint64_t, void *, uint64_t *, void))sub_24A4A9A0C);
        sub_24A496BE8(v6);
        unint64_t v43 = v75;
        swift_unknownObjectRetain();
        unint64_t v44 = sub_24A498214();
        unint64_t result = sub_24A496BE8(v6);
        if (v43 == v44)
        {
          uint64_t v11 = (v8 << 11) | 0x300;
          swift_bridgeObjectRelease();
          return v11;
        }
        if (v74 == v68)
        {
          uint64_t v45 = v76;
          if (v76)
          {
            unint64_t v46 = v76 + 24 * ((v43 >> ((4 * *(unsigned char *)(v76 + 18) + 8) & 0x3C)) & 0xF);
            unint64_t v47 = *(void *)(v46 + 24);
            unint64_t v48 = *(void *)(v46 + 32);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_unknownObjectRetain();
            sub_24A4895D4(v43, (uint64_t)&v70);
            sub_24A496BE8(v6);
            swift_bridgeObjectRelease();
            unint64_t v47 = v70;
            unint64_t v48 = v71;
          }
          unint64_t v61 = sub_24A4A7D5C(0xFuLL, v73, v47, v48);
          unint64_t v62 = (v69 >> 11) - v69;
          swift_unknownObjectRetain();
          uint64_t v63 = sub_24A4A59D8(v68, v67, v17, v68, v43, v45, (uint64_t (*)(unint64_t, unint64_t, uint64_t, uint64_t))sub_24A4A5C3C, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t))sub_24A4A617C);
          sub_24A496BE8(v6);
          unint64_t result = swift_bridgeObjectRelease();
          unint64_t v64 = v62 + v63;
          if (!__OFADD__(v62, v63))
          {
            BOOL v58 = __OFADD__(v64, v61 >> 16);
            unint64_t v65 = v64 + (v61 >> 16);
            if (!v58)
            {
              if ((v61 & 0xC000) != 0) {
                uint64_t v66 = (v65 << 11) | 0x400;
              }
              else {
                uint64_t v66 = v65 << 11;
              }
              return v66 & 0xFFFFFFFFFFFFFF00 | BYTE2(v61);
            }
            goto LABEL_134;
          }
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
          return result;
        }
LABEL_132:
        __break(1u);
        goto LABEL_133;
      }
      goto LABEL_128;
    }
LABEL_53:
    swift_bridgeObjectRelease();
    unint64_t v32 = (v19 >> 16) - v69 + (v69 >> 11);
    if ((v19 & 0xC000) != 0) {
      uint64_t v33 = (v32 << 11) | 0x400;
    }
    else {
      uint64_t v33 = v32 << 11;
    }
    return v33 & 0xFFFFFFFFFFFFFF00 | BYTE2(v19);
  }
  if (!v18) {
    goto LABEL_102;
  }
  uint64_t v34 = (v21 >> 59) & 1;
  if ((v22 & 0x1000000000000000) == 0) {
    LOBYTE(v34) = 1;
  }
  uint64_t v35 = 4 << v34;
  if ((v22 & 0x2000000000000000) != 0) {
    unint64_t v36 = HIBYTE(v22) & 0xF;
  }
  else {
    unint64_t v36 = v21 & 0xFFFFFFFFFFFFLL;
  }
  do
  {
    if ((v19 & 0xC) == v35 || (v19 & 1) == 0)
    {
      if ((v19 & 0xC) == v35)
      {
        unint64_t result = sub_24A4DFD84(v19, v21, v22);
        unint64_t v19 = result;
        if (v36 < result >> 16) {
          goto LABEL_125;
        }
      }
      else if (v36 < v19 >> 16)
      {
        goto LABEL_125;
      }
      if ((v19 & 1) == 0)
      {
        unint64_t result = sub_24A4971A8(v19, v21, v22);
        unint64_t v19 = v19 & 0xC | result & 0xFFFFFFFFFFFFFFF3 | 1;
      }
    }
    else if (v36 < v19 >> 16)
    {
      goto LABEL_124;
    }
    if (v19 < 0x4000)
    {
      __break(1u);
      goto LABEL_121;
    }
    if ((v22 & 0x1000000000000000) == 0)
    {
      unint64_t v38 = v19 >> 16;
      if ((v22 & 0x2000000000000000) != 0)
      {
        unint64_t v70 = v21;
        uint64_t v71 = v22 & 0xFFFFFFFFFFFFFFLL;
        if ((*((unsigned char *)&v70 + v38 - 1) & 0xC0) == 0x80)
        {
          uint64_t v39 = 0;
          do
            int v41 = *((unsigned char *)&v69 + v38 + v39-- + 6) & 0xC0;
          while (v41 == 128);
          goto LABEL_86;
        }
      }
      else
      {
        unint64_t result = (v22 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if ((v21 & 0x1000000000000000) == 0) {
          unint64_t result = sub_24A5BC120();
        }
        if ((*(unsigned char *)(v38 + result - 1) & 0xC0) == 0x80)
        {
          uint64_t v39 = 0;
          do
            int v40 = *(unsigned char *)(result + v38 - 2 + v39--) & 0xC0;
          while (v40 == 128);
LABEL_86:
          uint64_t v42 = 1 - v39;
LABEL_88:
          unint64_t v19 = (v19 - (v42 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
          goto LABEL_89;
        }
      }
      uint64_t v42 = 1;
      goto LABEL_88;
    }
    unint64_t result = sub_24A5BB5E0();
    unint64_t v19 = result;
LABEL_89:
    ++v10;
  }
  while (v10 < 0 && v19 >> 14);
  uint64_t v73 = v10;
  if (!v10) {
    goto LABEL_53;
  }
LABEL_102:
  swift_unknownObjectRetain();
  sub_24A4A7744((uint64_t)&v74, &v73, 0, (uint64_t (*)(uint64_t, uint64_t *, void))sub_24A4A79FC, (uint64_t (*)(uint64_t, uint64_t *, void, void *, uint64_t (*)(void, void, void)))sub_24A4A9990, (uint64_t (*)(void *, void *, uint64_t, void *, uint64_t *, void))sub_24A4A9A0C);
  unint64_t result = sub_24A496BE8(v6);
  if (v74 != v68) {
    goto LABEL_129;
  }
  unint64_t v49 = v75;
  uint64_t v50 = v76;
  if (v76)
  {
    unint64_t v51 = v76 + 24 * ((v75 >> ((4 * *(unsigned char *)(v76 + 18) + 8) & 0x3C)) & 0xF);
    unint64_t v52 = *(void *)(v51 + 24);
    unint64_t v53 = *(void *)(v51 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_unknownObjectRetain();
    sub_24A4895D4(v49, (uint64_t)&v70);
    sub_24A496BE8(v6);
    swift_bridgeObjectRelease();
    unint64_t v52 = v70;
    unint64_t v53 = v71;
  }
  unint64_t v54 = sub_24A4A7D5C(0xFuLL, v73, v52, v53);
  unint64_t v55 = (v69 >> 11) - v69;
  swift_unknownObjectRetain();
  uint64_t v56 = sub_24A4A59D8(v68, v67, v17, v68, v49, v50, (uint64_t (*)(unint64_t, unint64_t, uint64_t, uint64_t))sub_24A4A5C3C, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t))sub_24A4A617C);
  sub_24A496BE8(v6);
  unint64_t result = swift_bridgeObjectRelease();
  unint64_t v57 = v55 + v56;
  if (__OFADD__(v55, v56)) {
    goto LABEL_130;
  }
  BOOL v58 = __OFADD__(v57, v54 >> 16);
  unint64_t v59 = v57 + (v54 >> 16);
  if (v58)
  {
LABEL_131:
    __break(1u);
    goto LABEL_132;
  }
  if ((v54 & 0xC000) != 0) {
    uint64_t v60 = (v59 << 11) | 0x400;
  }
  else {
    uint64_t v60 = v59 << 11;
  }
  return v60 & 0xFFFFFFFFFFFFFF00 | BYTE2(v54);
}

uint64_t sub_24A4A9024(unint64_t *a1, uint64_t *a2, char a3, unsigned __int16 *a4, uint64_t a5)
{
  unint64_t v5 = *a4;
  unint64_t v6 = *a1;
  unint64_t v7 = (*a1 >> 8) & 0xF;
  if (v7 >= v5)
  {
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v8 = *a2;
    unint64_t v9 = (unsigned __int8 *)(a5 + 24 * ((*a1 >> 8) & 0xF) + 17);
    do
    {
      unsigned int v11 = *v9;
      v9 += 24;
      uint64_t v10 = v11;
      BOOL v12 = v8 < v11;
      if (a3)
      {
        if (v12)
        {
LABEL_8:
          uint64_t v13 = 1;
          goto LABEL_11;
        }
      }
      else if (v12)
      {
        goto LABEL_8;
      }
      v8 -= v10;
      *a2 = v8;
      ++v7;
    }
    while (v5 != v7);
    uint64_t v13 = 0;
    unint64_t v7 = v5;
  }
LABEL_11:
  *a1 = v6 & 0xFFFFFFFFFFFFF0FFLL | (v7 << 8);
  return v13;
}

uint64_t sub_24A4A90A0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, char a6)
{
  unint64_t v6 = (unint64_t *)(a3 + 8);
  unint64_t v7 = (*(void *)(a3 + 8) >> ((4 * *(unsigned char *)(a4 + 18) + 8) & 0x3C)) & 0xFLL;
  if (v7 >= *(unsigned __int16 *)(a4 + 16))
  {
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v21 = result;
  unint64_t v12 = *(unsigned __int16 *)result;
  uint64_t v13 = *(void *)(a2 + 40 * ((*(void *)(a3 + 8) >> ((4 * *(unsigned char *)(a4 + 18) + 8) & 0x3C)) & 0xFLL));
  if (*(unsigned char *)(v13 + 18))
  {
    swift_unknownObjectRetain();
    char v14 = sub_24A4A90A0(v13 + 16, v13 + 24, a3, v13, a5, a6 & 1);
    swift_unknownObjectRelease();
    if (v14) {
      return 1;
    }
  }
  else if (sub_24A4A9024(v6, a5, a6 & 1, (unsigned __int16 *)(v13 + 16), v13 + 24))
  {
LABEL_17:
    *(void *)(a3 + 16) = v13;
    return 1;
  }
  unint64_t v15 = v7 + 1;
  if (v7 + 1 >= v12) {
    return 0;
  }
  uint64_t v16 = *a5;
  for (uint64_t i = (void *)(a2 + 40 * v7 + 40); ; i += 5)
  {
    uint64_t v18 = i[3];
    if ((a6 & 1) == 0) {
      break;
    }
    if (v16 <= v18) {
      goto LABEL_12;
    }
LABEL_9:
    v16 -= v18;
    *a5 = v16;
    if (v12 == ++v15) {
      return 0;
    }
  }
  if (v16 >= v18) {
    goto LABEL_9;
  }
LABEL_12:
  *unint64_t v6 = (((-15 << ((4 * *(unsigned char *)(v21 + 2) + 8) & 0x3C)) - 1) & *v6 | (v15 << ((4 * *(unsigned char *)(v21 + 2) + 8) & 0x3C))) & ((-256 << ((4 * *(unsigned char *)(v21 + 2)) & 0x3C)) | 0xFF);
  uint64_t v13 = *i;
  uint64_t v19 = *i + 24;
  if (!*(unsigned char *)(*i + 18))
  {
    unint64_t result = sub_24A4A9024(v6, a5, a6 & 1, (unsigned __int16 *)(v13 + 16), *i + 24);
    if ((result & 1) == 0) {
      goto LABEL_20;
    }
    goto LABEL_17;
  }
  swift_unknownObjectRetain();
  char v20 = sub_24A4A90A0(v13 + 16, v19, a3, v13, a5, a6 & 1);
  unint64_t result = swift_unknownObjectRelease();
  if (v20) {
    return 1;
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t sub_24A4A92B4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, char a6)
{
  unint64_t v6 = (unint64_t *)(a3 + 8);
  unint64_t v7 = (*(void *)(a3 + 8) >> ((4 * *(unsigned char *)(a4 + 18) + 8) & 0x3C)) & 0xFLL;
  unint64_t v8 = *(unsigned __int16 *)(a4 + 16);
  if (v7 > v8)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v13 = result;
  if (v7 < v8)
  {
    uint64_t v14 = a2 + 40 * ((*(void *)(a3 + 8) >> ((4 * *(unsigned char *)(a4 + 18) + 8) & 0x3C)) & 0xFLL);
    long long v15 = *(_OWORD *)(v14 + 16);
    v24[0] = *(_OWORD *)v14;
    v24[1] = v15;
    uint64_t v25 = *(void *)(v14 + 32);
    swift_unknownObjectRetain();
    char v16 = sub_24A4A7C3C(a3, a5, a6 & 1);
    unint64_t result = sub_24A496BE8((uint64_t)v24);
    if (v16) {
      return 1;
    }
  }
  if (!v7) {
    return 0;
  }
  uint64_t v17 = *a5;
  unint64_t v18 = v7 + 1;
  for (uint64_t i = (uint64_t *)(a2 + 40 * v7 - 40); ; i -= 5)
  {
    uint64_t v20 = i[3];
    if ((a6 & 1) == 0) {
      break;
    }
    if (v17 < v20) {
      goto LABEL_13;
    }
LABEL_10:
    BOOL v21 = __OFSUB__(v17, v20);
    v17 -= v20;
    if (v21)
    {
      __break(1u);
      goto LABEL_22;
    }
    *a5 = v17;
    if (--v18 < 2) {
      return 0;
    }
  }
  if (v20 < v17) {
    goto LABEL_10;
  }
LABEL_13:
  *unint64_t v6 = (((-15 << ((4 * *(unsigned char *)(v13 + 2) + 8) & 0x3C)) - 1) & *v6 | ((v18 - 2) << ((4 * *(unsigned char *)(v13 + 2) + 8) & 0x3C))) & ((-256 << ((4 * *(unsigned char *)(v13 + 2)) & 0x3C)) | 0xFF);
  if (__OFSUB__(v20, *a5)) {
    goto LABEL_23;
  }
  *a5 = v20 - *a5;
  uint64_t v22 = *i;
  if (!*(unsigned char *)(*i + 18))
  {
    unint64_t result = sub_24A4A9024(v6, a5, a6 & 1, (unsigned __int16 *)(v22 + 16), v22 + 24);
    if ((result & 1) == 0) {
      goto LABEL_24;
    }
    *(void *)(a3 + 16) = v22;
    return 1;
  }
  swift_unknownObjectRetain();
  char v23 = sub_24A4A90A0(v22 + 16, v22 + 24, a3, v22, a5, a6 & 1);
  unint64_t result = swift_unknownObjectRelease();
  if (v23) {
    return 1;
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t _s19CollectionsInternal12BigSubstringV1loiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a1 + 16);
  v90[0] = *(_OWORD *)a1;
  v90[1] = v4;
  long long v91 = *(_OWORD *)(a1 + 32);
  long long v92 = v90[0];
  long long v5 = *(_OWORD *)(a2 + 16);
  v87[0] = *(_OWORD *)a2;
  v87[1] = v5;
  long long v88 = *(_OWORD *)(a2 + 32);
  v89[0] = v87[0];
  long long v93 = v4;
  long long v94 = v91;
  v89[1] = v5;
  v89[2] = v88;
  sub_24A497498(a1);
  sub_24A497498(a2);
  BOOL v6 = sub_24A495D7C((uint64_t)v89);
  sub_24A496BE8(a2);
  sub_24A496BE8(a1);
  unint64_t v7 = *(void *)(a1 + 48);
  if (v6 && (*(void *)(a2 + 48) ^ v7) <= 0x3FF && (*(void *)(a1 + 80) ^ *(void *)(a2 + 80)) < 1024) {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 56);
  unint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = *(void *)(a1 + 72);
  unint64_t v11 = *(void *)(a1 + 80);
  long long v46 = *(_OWORD *)(a1 + 88);
  uint64_t v12 = *(void *)(a1 + 104);
  sub_24A497498(a1);
  sub_24A493804(v90, v7, v8, v9, v10, v76);
  long long v42 = v76[1];
  long long v44 = v76[0];
  uint64_t v13 = v77;
  uint64_t v14 = v78;
  uint64_t v15 = v79;
  long long v40 = v80;
  uint64_t v16 = v81;
  unint64_t v17 = v82;
  uint64_t v18 = v83;
  sub_24A496BE8(a1);
  *(_OWORD *)&v70[8] = v46;
  *(void *)unint64_t v70 = v11;
  *(void *)&v70[24] = v12;
  long long v71 = v44;
  long long v72 = v42;
  *(void *)&long long v73 = v13;
  *((void *)&v73 + 1) = v14;
  *(_OWORD *)&v74[8] = v40;
  *(void *)uint64_t v74 = v15;
  *(void *)&v74[24] = v16;
  *(void *)&long long v75 = v17;
  *((void *)&v75 + 1) = v18;
  unint64_t v19 = *(void *)(a2 + 48);
  uint64_t v20 = *(void *)(a2 + 56);
  unint64_t v21 = *(void *)(a2 + 64);
  uint64_t v22 = *(void *)(a2 + 72);
  unint64_t v23 = *(void *)(a2 + 80);
  long long v47 = *(_OWORD *)(a2 + 88);
  uint64_t v24 = *(void *)(a2 + 104);
  sub_24A497498(a2);
  sub_24A493804(v87, v19, v20, v21, v22, v84);
  long long v43 = v84[1];
  long long v45 = v84[0];
  long long v39 = v84[3];
  long long v41 = v84[2];
  long long v38 = v84[4];
  uint64_t v25 = v85;
  uint64_t v26 = v86;
  uint64_t result = sub_24A496BE8(a2);
  *(_OWORD *)&v64[8] = v47;
  *(void *)unint64_t v64 = v23;
  *(void *)&v64[24] = v24;
  long long v65 = v45;
  long long v66 = v43;
  long long v67 = v41;
  *(_OWORD *)uint64_t v68 = v39;
  *(_OWORD *)&v68[16] = v38;
  int64_t v28 = v15 + (v17 >> 16);
  *(void *)&long long v69 = v25;
  *((void *)&v69 + 1) = v26;
  if (__OFADD__(v15, v17 >> 16))
  {
LABEL_29:
    __break(1u);
  }
  else
  {
    while (1)
    {
      if (v28 < (uint64_t)(v11 >> 11) && (*((void *)&v75 + 1) ^ v17) >= 0x4000)
      {
        long long v102 = v71;
        long long v103 = v72;
        long long v104 = v73;
        long long v106 = *(_OWORD *)&v74[8];
        uint64_t v105 = v15;
        uint64_t v107 = *(void *)&v74[24];
        unint64_t v108 = v17;
        uint64_t v109 = *((void *)&v75 + 1);
        sub_24A495168();
        uint64_t v29 = v33;
        uint64_t v30 = v34;
        uint64_t result = sub_24A495704(v33, v34);
        if ((result & 1) == 0) {
          *(void *)&long long v75 = *((void *)&v75 + 1);
        }
      }
      else
      {
        uint64_t v29 = 0;
        uint64_t v30 = 0;
      }
      if (__OFADD__(*(void *)v68, (unint64_t)v69 >> 16)) {
        break;
      }
      if ((uint64_t)(*(void *)v68 + ((unint64_t)v69 >> 16)) < (uint64_t)(v23 >> 11)
        && (*((void *)&v69 + 1) ^ (unint64_t)v69) >= 0x4000)
      {
        long long v95 = v65;
        long long v96 = v66;
        long long v97 = v67;
        long long v99 = *(_OWORD *)&v68[8];
        uint64_t v98 = *(void *)v68;
        uint64_t v100 = *(void *)&v68[24];
        long long v101 = v69;
        sub_24A495168();
        uint64_t v31 = v35;
        uint64_t v32 = v36;
        if ((sub_24A495704(v35, v36) & 1) == 0) {
          *(void *)&long long v69 = *((void *)&v69 + 1);
        }
      }
      else
      {
        uint64_t v31 = 0;
        uint64_t v32 = 0;
      }
      if (!v30)
      {
        long long v52 = v67;
        long long v53 = *(_OWORD *)v68;
        long long v54 = *(_OWORD *)&v68[16];
        long long v55 = v69;
        long long v48 = *(_OWORD *)v64;
        long long v49 = *(_OWORD *)&v64[16];
        long long v50 = v65;
        long long v51 = v66;
        sub_24A495C98((uint64_t)&v48);
        long long v60 = v73;
        long long v61 = *(_OWORD *)v74;
        long long v62 = *(_OWORD *)&v74[16];
        long long v63 = v75;
        long long v56 = *(_OWORD *)v70;
        long long v57 = *(_OWORD *)&v70[16];
        long long v58 = v71;
        long long v59 = v72;
        sub_24A495C98((uint64_t)&v56);
        if (!v32) {
          return 0;
        }
        swift_bridgeObjectRelease();
        return 1;
      }
      if (!v32)
      {
        swift_bridgeObjectRelease();
        long long v52 = v67;
        long long v53 = *(_OWORD *)v68;
        long long v54 = *(_OWORD *)&v68[16];
        long long v55 = v69;
        long long v48 = *(_OWORD *)v64;
        long long v49 = *(_OWORD *)&v64[16];
        long long v50 = v65;
        long long v51 = v66;
        sub_24A495C98((uint64_t)&v48);
        long long v60 = v73;
        long long v61 = *(_OWORD *)v74;
        long long v62 = *(_OWORD *)&v74[16];
        long long v63 = v75;
        long long v56 = *(_OWORD *)v70;
        long long v57 = *(_OWORD *)&v70[16];
        long long v58 = v71;
        long long v59 = v72;
        sub_24A495C98((uint64_t)&v56);
        return 0;
      }
      if ((v29 != v31 || v30 != v32) && (sub_24A5BC510() & 1) == 0)
      {
        char v37 = sub_24A5BC510();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        long long v52 = v67;
        long long v53 = *(_OWORD *)v68;
        long long v54 = *(_OWORD *)&v68[16];
        long long v55 = v69;
        long long v48 = *(_OWORD *)v64;
        long long v49 = *(_OWORD *)&v64[16];
        long long v50 = v65;
        long long v51 = v66;
        sub_24A495C98((uint64_t)&v48);
        long long v60 = v73;
        long long v61 = *(_OWORD *)v74;
        long long v62 = *(_OWORD *)&v74[16];
        long long v63 = v75;
        long long v56 = *(_OWORD *)v70;
        long long v57 = *(_OWORD *)&v70[16];
        long long v58 = v71;
        long long v59 = v72;
        sub_24A495C98((uint64_t)&v56);
        return v37 & 1;
      }
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v15 = *(void *)v74;
      unint64_t v17 = v75;
      int64_t v28 = *(void *)v74 + ((unint64_t)v75 >> 16);
      if (__OFADD__(*(void *)v74, (unint64_t)v75 >> 16)) {
        goto LABEL_29;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_24A4A9990(unint64_t *a1, uint64_t *a2, char a3, unsigned __int16 *a4, uint64_t a5)
{
  unint64_t v5 = *a4;
  unint64_t v6 = *a1;
  unint64_t v7 = (*a1 >> 8) & 0xF;
  if (v7 >= v5)
  {
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v8 = *a2;
    unint64_t v9 = (unsigned __int8 *)(a5 + 24 * ((*a1 >> 8) & 0xF) + 18);
    do
    {
      unsigned int v11 = *v9;
      v9 += 24;
      uint64_t v10 = v11;
      BOOL v12 = v8 < v11;
      if (a3)
      {
        if (v12)
        {
LABEL_8:
          uint64_t v13 = 1;
          goto LABEL_11;
        }
      }
      else if (v12)
      {
        goto LABEL_8;
      }
      v8 -= v10;
      *a2 = v8;
      ++v7;
    }
    while (v5 != v7);
    uint64_t v13 = 0;
    unint64_t v7 = v5;
  }
LABEL_11:
  *a1 = v6 & 0xFFFFFFFFFFFFF0FFLL | (v7 << 8);
  return v13;
}

uint64_t sub_24A4A9A0C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, char a6)
{
  unint64_t v6 = (unint64_t *)(a3 + 8);
  unint64_t v7 = (*(void *)(a3 + 8) >> ((4 * *(unsigned char *)(a4 + 18) + 8) & 0x3C)) & 0xFLL;
  if (v7 >= *(unsigned __int16 *)(a4 + 16))
  {
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v19 = result;
  unint64_t v12 = *(unsigned __int16 *)result;
  uint64_t v13 = *(void *)(a2 + 40 * ((*(void *)(a3 + 8) >> ((4 * *(unsigned char *)(a4 + 18) + 8) & 0x3C)) & 0xFLL));
  if (*(unsigned char *)(v13 + 18))
  {
    swift_unknownObjectRetain();
    char v14 = sub_24A4A9A0C(v13 + 16, v13 + 24, a3, v13, a5, a6 & 1);
    swift_unknownObjectRelease();
    if (v14) {
      return 1;
    }
  }
  else if (sub_24A4A9990(v6, a5, a6 & 1, (unsigned __int16 *)(v13 + 16), v13 + 24))
  {
LABEL_17:
    *(void *)(a3 + 16) = v13;
    return 1;
  }
  unint64_t v15 = v7 + 1;
  if (v7 + 1 >= v12) {
    return 0;
  }
  uint64_t v16 = *a5;
  unint64_t v17 = (uint64_t *)(a2 + 40 * v7 + 56);
  while ((a6 & 1) != 0)
  {
    if (v16 <= *v17) {
      goto LABEL_12;
    }
LABEL_9:
    v16 -= *v17;
    *a5 = v16;
    ++v15;
    v17 += 5;
    if (v12 == v15) {
      return 0;
    }
  }
  if (v16 >= *v17) {
    goto LABEL_9;
  }
LABEL_12:
  *unint64_t v6 = (((-15 << ((4 * *(unsigned char *)(v19 + 2) + 8) & 0x3C)) - 1) & *v6 | (v15 << ((4 * *(unsigned char *)(v19 + 2) + 8) & 0x3C))) & ((-256 << ((4 * *(unsigned char *)(v19 + 2)) & 0x3C)) | 0xFF);
  uint64_t v13 = *(v17 - 2);
  if (!*(unsigned char *)(v13 + 18))
  {
    uint64_t result = sub_24A4A9990(v6, a5, a6 & 1, (unsigned __int16 *)(v13 + 16), v13 + 24);
    if ((result & 1) == 0) {
      goto LABEL_20;
    }
    goto LABEL_17;
  }
  swift_unknownObjectRetain();
  char v18 = sub_24A4A9A0C(v13 + 16, v13 + 24, a3, v13, a5, a6 & 1);
  uint64_t result = swift_unknownObjectRelease();
  if (v18) {
    return 1;
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t sub_24A4A9C20(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, char a6)
{
  unint64_t v6 = (unint64_t *)(a3 + 8);
  unint64_t v7 = (*(void *)(a3 + 8) >> ((4 * *(unsigned char *)(a4 + 18) + 8) & 0x3C)) & 0xFLL;
  unint64_t v8 = *(unsigned __int16 *)(a4 + 16);
  if (v7 > v8)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v13 = result;
  if (v7 < v8)
  {
    uint64_t v14 = a2 + 40 * ((*(void *)(a3 + 8) >> ((4 * *(unsigned char *)(a4 + 18) + 8) & 0x3C)) & 0xFLL);
    long long v15 = *(_OWORD *)(v14 + 16);
    v24[0] = *(_OWORD *)v14;
    v24[1] = v15;
    uint64_t v25 = *(void *)(v14 + 32);
    swift_unknownObjectRetain();
    char v16 = sub_24A4A79FC(a3, a5, a6 & 1);
    uint64_t result = sub_24A496BE8((uint64_t)v24);
    if (v16) {
      return 1;
    }
  }
  if (!v7) {
    return 0;
  }
  uint64_t v17 = *a5;
  unint64_t v18 = v7 + 1;
  for (uint64_t i = (uint64_t *)(a2 + 40 * v7 - 40); ; i -= 5)
  {
    uint64_t v20 = i[2];
    if ((a6 & 1) == 0) {
      break;
    }
    if (v17 < v20) {
      goto LABEL_13;
    }
LABEL_10:
    BOOL v21 = __OFSUB__(v17, v20);
    v17 -= v20;
    if (v21)
    {
      __break(1u);
      goto LABEL_22;
    }
    *a5 = v17;
    if (--v18 < 2) {
      return 0;
    }
  }
  if (v20 < v17) {
    goto LABEL_10;
  }
LABEL_13:
  *unint64_t v6 = (((-15 << ((4 * *(unsigned char *)(v13 + 2) + 8) & 0x3C)) - 1) & *v6 | ((v18 - 2) << ((4 * *(unsigned char *)(v13 + 2) + 8) & 0x3C))) & ((-256 << ((4 * *(unsigned char *)(v13 + 2)) & 0x3C)) | 0xFF);
  if (__OFSUB__(v20, *a5)) {
    goto LABEL_23;
  }
  *a5 = v20 - *a5;
  uint64_t v22 = *i;
  if (!*(unsigned char *)(*i + 18))
  {
    uint64_t result = sub_24A4A9990(v6, a5, a6 & 1, (unsigned __int16 *)(v22 + 16), v22 + 24);
    if ((result & 1) == 0) {
      goto LABEL_24;
    }
    *(void *)(a3 + 16) = v22;
    return 1;
  }
  swift_unknownObjectRetain();
  char v23 = sub_24A4A9A0C(v22 + 16, v22 + 24, a3, v22, a5, a6 & 1);
  uint64_t result = swift_unknownObjectRelease();
  if (v23) {
    return 1;
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_24A4A9E14(unint64_t *a1, uint64_t *a2, char a3, unsigned __int16 *a4, uint64_t a5)
{
  unint64_t v5 = *a4;
  unint64_t v6 = *a1;
  unint64_t v7 = (*a1 >> 8) & 0xF;
  if (v7 >= v5)
  {
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v8 = *a2;
    unint64_t v9 = (unsigned __int8 *)(a5 + 24 * ((*a1 >> 8) & 0xF) + 19);
    do
    {
      unsigned int v11 = *v9;
      v9 += 24;
      uint64_t v10 = v11;
      BOOL v12 = v8 < v11;
      if (a3)
      {
        if (v12)
        {
LABEL_8:
          uint64_t v13 = 1;
          goto LABEL_11;
        }
      }
      else if (v12)
      {
        goto LABEL_8;
      }
      v8 -= v10;
      *a2 = v8;
      ++v7;
    }
    while (v5 != v7);
    uint64_t v13 = 0;
    unint64_t v7 = v5;
  }
LABEL_11:
  *a1 = v6 & 0xFFFFFFFFFFFFF0FFLL | (v7 << 8);
  return v13;
}

uint64_t sub_24A4A9E90(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, char a6)
{
  unint64_t v6 = (unint64_t *)(a3 + 8);
  unint64_t v7 = (*(void *)(a3 + 8) >> ((4 * *(unsigned char *)(a4 + 18) + 8) & 0x3C)) & 0xFLL;
  if (v7 >= *(unsigned __int16 *)(a4 + 16))
  {
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v19 = result;
  unint64_t v12 = *(unsigned __int16 *)result;
  uint64_t v13 = *(void *)(a2 + 40 * ((*(void *)(a3 + 8) >> ((4 * *(unsigned char *)(a4 + 18) + 8) & 0x3C)) & 0xFLL));
  if (*(unsigned char *)(v13 + 18))
  {
    swift_unknownObjectRetain();
    char v14 = sub_24A4A9E90(v13 + 16, v13 + 24, a3, v13, a5, a6 & 1);
    swift_unknownObjectRelease();
    if (v14) {
      return 1;
    }
  }
  else if (sub_24A4A9E14(v6, a5, a6 & 1, (unsigned __int16 *)(v13 + 16), v13 + 24))
  {
LABEL_17:
    *(void *)(a3 + 16) = v13;
    return 1;
  }
  unint64_t v15 = v7 + 1;
  if (v7 + 1 >= v12) {
    return 0;
  }
  uint64_t v16 = *a5;
  uint64_t v17 = (uint64_t *)(a2 + 40 * v7 + 48);
  while ((a6 & 1) != 0)
  {
    if (v16 <= *v17) {
      goto LABEL_12;
    }
LABEL_9:
    v16 -= *v17;
    *a5 = v16;
    ++v15;
    v17 += 5;
    if (v12 == v15) {
      return 0;
    }
  }
  if (v16 >= *v17) {
    goto LABEL_9;
  }
LABEL_12:
  *unint64_t v6 = (((-15 << ((4 * *(unsigned char *)(v19 + 2) + 8) & 0x3C)) - 1) & *v6 | (v15 << ((4 * *(unsigned char *)(v19 + 2) + 8) & 0x3C))) & ((-256 << ((4 * *(unsigned char *)(v19 + 2)) & 0x3C)) | 0xFF);
  uint64_t v13 = *(v17 - 1);
  if (!*(unsigned char *)(v13 + 18))
  {
    uint64_t result = sub_24A4A9E14(v6, a5, a6 & 1, (unsigned __int16 *)(v13 + 16), v13 + 24);
    if ((result & 1) == 0) {
      goto LABEL_20;
    }
    goto LABEL_17;
  }
  swift_unknownObjectRetain();
  char v18 = sub_24A4A9E90(v13 + 16, v13 + 24, a3, v13, a5, a6 & 1);
  uint64_t result = swift_unknownObjectRelease();
  if (v18) {
    return 1;
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t sub_24A4AA0A4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, char a6)
{
  unint64_t v6 = (unint64_t *)(a3 + 8);
  unint64_t v7 = (*(void *)(a3 + 8) >> ((4 * *(unsigned char *)(a4 + 18) + 8) & 0x3C)) & 0xFLL;
  unint64_t v8 = *(unsigned __int16 *)(a4 + 16);
  if (v7 > v8)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v13 = result;
  if (v7 < v8)
  {
    uint64_t v14 = a2 + 40 * ((*(void *)(a3 + 8) >> ((4 * *(unsigned char *)(a4 + 18) + 8) & 0x3C)) & 0xFLL);
    long long v15 = *(_OWORD *)(v14 + 16);
    v24[0] = *(_OWORD *)v14;
    v24[1] = v15;
    uint64_t v25 = *(void *)(v14 + 32);
    swift_unknownObjectRetain();
    char v16 = sub_24A4A78DC(a3, a5, a6 & 1);
    uint64_t result = sub_24A496BE8((uint64_t)v24);
    if (v16) {
      return 1;
    }
  }
  if (!v7) {
    return 0;
  }
  uint64_t v17 = *a5;
  unint64_t v18 = v7 + 1;
  for (uint64_t i = (uint64_t *)(a2 + 40 * v7 - 40); ; i -= 5)
  {
    uint64_t v20 = i[1];
    if ((a6 & 1) == 0) {
      break;
    }
    if (v17 < v20) {
      goto LABEL_13;
    }
LABEL_10:
    BOOL v21 = __OFSUB__(v17, v20);
    v17 -= v20;
    if (v21)
    {
      __break(1u);
      goto LABEL_22;
    }
    *a5 = v17;
    if (--v18 < 2) {
      return 0;
    }
  }
  if (v20 < v17) {
    goto LABEL_10;
  }
LABEL_13:
  *unint64_t v6 = (((-15 << ((4 * *(unsigned char *)(v13 + 2) + 8) & 0x3C)) - 1) & *v6 | ((v18 - 2) << ((4 * *(unsigned char *)(v13 + 2) + 8) & 0x3C))) & ((-256 << ((4 * *(unsigned char *)(v13 + 2)) & 0x3C)) | 0xFF);
  if (__OFSUB__(v20, *a5)) {
    goto LABEL_23;
  }
  *a5 = v20 - *a5;
  uint64_t v22 = *i;
  if (!*(unsigned char *)(*i + 18))
  {
    uint64_t result = sub_24A4A9E14(v6, a5, a6 & 1, (unsigned __int16 *)(v22 + 16), v22 + 24);
    if ((result & 1) == 0) {
      goto LABEL_24;
    }
    *(void *)(a3 + 16) = v22;
    return 1;
  }
  swift_unknownObjectRetain();
  char v23 = sub_24A4A9E90(v22 + 16, v22 + 24, a3, v22, a5, a6 & 1);
  uint64_t result = swift_unknownObjectRelease();
  if (v23) {
    return 1;
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_24A4AA298(unint64_t *a1, uint64_t *a2, char a3, unsigned __int16 *a4, uint64_t a5)
{
  unint64_t v5 = *a4;
  unint64_t v6 = *a1;
  unint64_t v7 = (*a1 >> 8) & 0xF;
  if (v7 >= v5)
  {
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v8 = *a2;
    unint64_t v9 = (unsigned __int8 *)(a5 + 24 * ((*a1 >> 8) & 0xF) + 16);
    do
    {
      unsigned int v11 = *v9;
      v9 += 24;
      uint64_t v10 = v11;
      BOOL v12 = v8 < v11;
      if (a3)
      {
        if (v12)
        {
LABEL_8:
          uint64_t v13 = 1;
          goto LABEL_11;
        }
      }
      else if (v12)
      {
        goto LABEL_8;
      }
      v8 -= v10;
      *a2 = v8;
      ++v7;
    }
    while (v5 != v7);
    uint64_t v13 = 0;
    unint64_t v7 = v5;
  }
LABEL_11:
  *a1 = v6 & 0xFFFFFFFFFFFFF0FFLL | (v7 << 8);
  return v13;
}

uint64_t sub_24A4AA314(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, char a6)
{
  unint64_t v6 = (unint64_t *)(a3 + 8);
  unint64_t v7 = (*(void *)(a3 + 8) >> ((4 * *(unsigned char *)(a4 + 18) + 8) & 0x3C)) & 0xFLL;
  if (v7 >= *(unsigned __int16 *)(a4 + 16))
  {
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v19 = result;
  unint64_t v12 = *(unsigned __int16 *)result;
  uint64_t v13 = *(void *)(a2 + 40 * ((*(void *)(a3 + 8) >> ((4 * *(unsigned char *)(a4 + 18) + 8) & 0x3C)) & 0xFLL));
  if (*(unsigned char *)(v13 + 18))
  {
    swift_unknownObjectRetain();
    char v14 = sub_24A4AA314(v13 + 16, v13 + 24, a3, v13, a5, a6 & 1);
    swift_unknownObjectRelease();
    if (v14) {
      return 1;
    }
  }
  else if (sub_24A4AA298(v6, a5, a6 & 1, (unsigned __int16 *)(v13 + 16), v13 + 24))
  {
LABEL_17:
    *(void *)(a3 + 16) = v13;
    return 1;
  }
  unint64_t v15 = v7 + 1;
  if (v7 + 1 >= v12) {
    return 0;
  }
  uint64_t v16 = *a5;
  uint64_t v17 = (uint64_t *)(a2 + 40 * v7 + 72);
  while ((a6 & 1) != 0)
  {
    if (v16 <= *v17) {
      goto LABEL_12;
    }
LABEL_9:
    v16 -= *v17;
    *a5 = v16;
    ++v15;
    v17 += 5;
    if (v12 == v15) {
      return 0;
    }
  }
  if (v16 >= *v17) {
    goto LABEL_9;
  }
LABEL_12:
  *unint64_t v6 = (((-15 << ((4 * *(unsigned char *)(v19 + 2) + 8) & 0x3C)) - 1) & *v6 | (v15 << ((4 * *(unsigned char *)(v19 + 2) + 8) & 0x3C))) & ((-256 << ((4 * *(unsigned char *)(v19 + 2)) & 0x3C)) | 0xFF);
  uint64_t v13 = *(v17 - 4);
  if (!*(unsigned char *)(v13 + 18))
  {
    uint64_t result = sub_24A4AA298(v6, a5, a6 & 1, (unsigned __int16 *)(v13 + 16), v13 + 24);
    if ((result & 1) == 0) {
      goto LABEL_20;
    }
    goto LABEL_17;
  }
  swift_unknownObjectRetain();
  char v18 = sub_24A4AA314(v13 + 16, v13 + 24, a3, v13, a5, a6 & 1);
  uint64_t result = swift_unknownObjectRelease();
  if (v18) {
    return 1;
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t sub_24A4AA528(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, char a6)
{
  unint64_t v6 = (unint64_t *)(a3 + 8);
  unint64_t v7 = (*(void *)(a3 + 8) >> ((4 * *(unsigned char *)(a4 + 18) + 8) & 0x3C)) & 0xFLL;
  unint64_t v8 = *(unsigned __int16 *)(a4 + 16);
  if (v7 > v8)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v13 = result;
  if (v7 < v8)
  {
    uint64_t v14 = a2 + 40 * ((*(void *)(a3 + 8) >> ((4 * *(unsigned char *)(a4 + 18) + 8) & 0x3C)) & 0xFLL);
    long long v15 = *(_OWORD *)(v14 + 16);
    v24[0] = *(_OWORD *)v14;
    v24[1] = v15;
    uint64_t v25 = *(void *)(v14 + 32);
    swift_unknownObjectRetain();
    char v16 = sub_24A4A7B1C(a3, a5, a6 & 1);
    uint64_t result = sub_24A496BE8((uint64_t)v24);
    if (v16) {
      return 1;
    }
  }
  if (!v7) {
    return 0;
  }
  uint64_t v17 = *a5;
  unint64_t v18 = v7 + 1;
  for (uint64_t i = (uint64_t *)(a2 + 40 * v7 - 8); ; i -= 5)
  {
    uint64_t v20 = *i;
    if ((a6 & 1) == 0) {
      break;
    }
    if (v17 < v20) {
      goto LABEL_13;
    }
LABEL_10:
    BOOL v21 = __OFSUB__(v17, v20);
    v17 -= v20;
    if (v21)
    {
      __break(1u);
      goto LABEL_22;
    }
    *a5 = v17;
    if (--v18 < 2) {
      return 0;
    }
  }
  if (v20 < v17) {
    goto LABEL_10;
  }
LABEL_13:
  *unint64_t v6 = (((-15 << ((4 * *(unsigned char *)(v13 + 2) + 8) & 0x3C)) - 1) & *v6 | ((v18 - 2) << ((4 * *(unsigned char *)(v13 + 2) + 8) & 0x3C))) & ((-256 << ((4 * *(unsigned char *)(v13 + 2)) & 0x3C)) | 0xFF);
  if (__OFSUB__(v20, *a5)) {
    goto LABEL_23;
  }
  *a5 = v20 - *a5;
  uint64_t v22 = *(i - 4);
  if (!*(unsigned char *)(v22 + 18))
  {
    uint64_t result = sub_24A4AA298(v6, a5, a6 & 1, (unsigned __int16 *)(v22 + 16), v22 + 24);
    if ((result & 1) == 0) {
      goto LABEL_24;
    }
    *(void *)(a3 + 16) = v22;
    return 1;
  }
  swift_unknownObjectRetain();
  char v23 = sub_24A4AA314(v22 + 16, v22 + 24, a3, v22, a5, a6 & 1);
  uint64_t result = swift_unknownObjectRelease();
  if (v23) {
    return 1;
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_24A4AA71C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  swift_bridgeObjectRetain();
  uint64_t result = sub_24A490BF0(a1, a2, &v44);
  uint64_t v7 = *((void *)&v44 + 1);
  uint64_t v8 = v44;
  long long v47 = v44;
  long long v48 = v45;
  long long v49 = v46;
  uint64_t v9 = v44;
  uint64_t v10 = v46;
  uint64_t v42 = *((void *)&v45 + 1);
  uint64_t v43 = v45;
  uint64_t v40 = *((void *)&v46 + 1);
  uint64_t v41 = v46;
  if (!(void)v44)
  {
    uint64_t v39 = *((void *)&v49 + 1);
LABEL_10:
    swift_unknownObjectRetain();
    unint64_t v12 = sub_24A498214();
    LOBYTE(v13) = 0;
    uint64_t v14 = 0;
    goto LABEL_39;
  }
  if ((v46 & 0x8000000000000000) != 0)
  {
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
    return result;
  }
  uint64_t v39 = *((void *)&v49 + 1);
  if (*(_WORD *)(v44 + 16)) {
    BOOL v11 = (void)v46 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11) {
    goto LABEL_10;
  }
  uint64_t v15 = *(unsigned __int8 *)(v44 + 18);
  if (*(unsigned char *)(v44 + 18))
  {
    uint64_t v38 = v44;
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v13 = 0;
    uint64_t v16 = v9;
    do
    {
      uint64_t v17 = *(unsigned __int16 *)(v16 + 16);
      if (*(_WORD *)(v16 + 16))
      {
        uint64_t v19 = 0;
        uint64_t v20 = (uint64_t *)(v16 + 56);
        while (1)
        {
          uint64_t v21 = *v20;
          v20 += 5;
          uint64_t v22 = v13 - v21;
          if (__OFSUB__(v13, v21)) {
            break;
          }
          if (__OFADD__(v22, 1)) {
            goto LABEL_44;
          }
          if (v22 + 1 < 1)
          {
            uint64_t v17 = v19;
            goto LABEL_14;
          }
          ++v19;
          uint64_t v13 = v22;
          if (v17 == v19) {
            goto LABEL_23;
          }
        }
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
      uint64_t v22 = v13;
LABEL_23:
      if (v22) {
        goto LABEL_45;
      }
      uint64_t v13 = 0;
LABEL_14:
      char v18 = (4 * *(unsigned char *)(v16 + 18) + 8) & 0x3C;
      uint64_t v15 = ((-15 << v18) - 1) & v15 | (v17 << v18);
      uint64_t v14 = *(void *)(v16 + 24 + 40 * v17);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v16 = v14;
    }
    while (*(unsigned char *)(v14 + 18));
    unint64_t v23 = v15 & 0xFFFFFFFFFFFFF0FFLL;
    uint64_t v8 = v38;
    uint64_t v24 = *(unsigned __int16 *)(v14 + 16);
    if (!*(_WORD *)(v14 + 16)) {
      goto LABEL_33;
    }
    goto LABEL_26;
  }
  uint64_t result = swift_unknownObjectRetain_n();
  unint64_t v23 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = v9;
  uint64_t v24 = *(unsigned __int16 *)(v9 + 16);
  if (*(_WORD *)(v9 + 16))
  {
LABEL_26:
    uint64_t v25 = 0;
    uint64_t v26 = (unsigned __int8 *)(v14 + 40);
    while (1)
    {
      unsigned int v27 = *v26;
      v26 += 24;
      uint64_t v28 = v13 - v27;
      if (__OFSUB__(v13, v27)) {
        break;
      }
      if (__OFADD__(v28, 1)) {
        goto LABEL_47;
      }
      if (v28 + 1 < 1)
      {
        uint64_t v24 = v25;
        goto LABEL_37;
      }
      ++v25;
      uint64_t v13 = v28;
      if (v24 == v25) {
        goto LABEL_34;
      }
    }
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
LABEL_33:
  uint64_t v28 = v13;
LABEL_34:
  if (v28) {
    goto LABEL_50;
  }
  uint64_t v13 = 0;
LABEL_37:
  uint64_t result = swift_unknownObjectRelease();
  if (v13 < 0) {
    goto LABEL_48;
  }
  unint64_t v12 = v23 | (v24 << 8);
LABEL_39:
  if (v9) {
    unint64_t v29 = (v10 << 11) | 0x300;
  }
  else {
    unint64_t v29 = 768;
  }
  uint64_t v30 = v13 | 0x300;
  unint64_t v31 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(v29, 0, 0, 1);
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  uint64_t result = sub_24A496BE8((uint64_t)&v44);
  *a3 = v8;
  a3[1] = v7;
  a3[2] = v43;
  a3[3] = v42;
  a3[4] = v41;
  a3[5] = v40;
  a3[6] = v30;
  a3[7] = v39;
  a3[8] = v12;
  a3[9] = v14;
  a3[10] = v31;
  a3[11] = v33;
  a3[12] = v35;
  a3[13] = v37;
  return result;
}

uint64_t sub_24A4AA9E8@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = result;
  uint64_t v4 = *(void *)result;
  long long v5 = *(_OWORD *)(result + 32);
  long long v41 = *(_OWORD *)result;
  uint64_t v6 = *(void *)result;
  uint64_t v7 = *(void *)(result + 32);
  uint64_t v39 = *(void *)(result + 16);
  uint64_t v40 = *(void *)(result + 8);
  uint64_t v37 = v7;
  uint64_t v38 = *(void *)(result + 24);
  uint64_t v36 = *(void *)(result + 40);
  if (!*(void *)result)
  {
    uint64_t v35 = *((void *)&v5 + 1);
LABEL_10:
    sub_24A497498(result);
    swift_unknownObjectRetain();
    unint64_t v9 = sub_24A498214();
    LOBYTE(v10) = 0;
    uint64_t v11 = 0;
    goto LABEL_39;
  }
  if ((v5 & 0x8000000000000000) != 0)
  {
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
    return result;
  }
  uint64_t v35 = *((void *)&v5 + 1);
  if (*(_WORD *)(v41 + 16)) {
    BOOL v8 = (void)v5 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8) {
    goto LABEL_10;
  }
  uint64_t v12 = *(unsigned __int8 *)(v41 + 18);
  if (*(unsigned char *)(v41 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v10 = 0;
    uint64_t v13 = v6;
    do
    {
      uint64_t v14 = *(unsigned __int16 *)(v13 + 16);
      if (*(_WORD *)(v13 + 16))
      {
        uint64_t v16 = 0;
        uint64_t v17 = (uint64_t *)(v13 + 56);
        while (1)
        {
          uint64_t v18 = *v17;
          v17 += 5;
          uint64_t v19 = v10 - v18;
          if (__OFSUB__(v10, v18)) {
            break;
          }
          if (__OFADD__(v19, 1)) {
            goto LABEL_44;
          }
          if (v19 + 1 < 1)
          {
            uint64_t v14 = v16;
            goto LABEL_14;
          }
          ++v16;
          uint64_t v10 = v19;
          if (v14 == v16) {
            goto LABEL_23;
          }
        }
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
      uint64_t v19 = v10;
LABEL_23:
      if (v19) {
        goto LABEL_45;
      }
      uint64_t v10 = 0;
LABEL_14:
      char v15 = (4 * *(unsigned char *)(v13 + 18) + 8) & 0x3C;
      uint64_t v12 = ((-15 << v15) - 1) & v12 | (v14 << v15);
      uint64_t v11 = *(void *)(v13 + 24 + 40 * v14);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v13 = v11;
    }
    while (*(unsigned char *)(v11 + 18));
    unint64_t v20 = v12 & 0xFFFFFFFFFFFFF0FFLL;
    uint64_t v21 = *(unsigned __int16 *)(v11 + 16);
    if (!*(_WORD *)(v11 + 16)) {
      goto LABEL_33;
    }
    goto LABEL_26;
  }
  uint64_t result = swift_unknownObjectRetain_n();
  unint64_t v20 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = v6;
  uint64_t v21 = *(unsigned __int16 *)(v6 + 16);
  if (*(_WORD *)(v6 + 16))
  {
LABEL_26:
    uint64_t v22 = 0;
    unint64_t v23 = (unsigned __int8 *)(v11 + 40);
    while (1)
    {
      unsigned int v24 = *v23;
      v23 += 24;
      uint64_t v25 = v10 - v24;
      if (__OFSUB__(v10, v24)) {
        break;
      }
      if (__OFADD__(v25, 1)) {
        goto LABEL_47;
      }
      if (v25 + 1 < 1)
      {
        uint64_t v21 = v22;
        goto LABEL_37;
      }
      ++v22;
      uint64_t v10 = v25;
      if (v21 == v22) {
        goto LABEL_34;
      }
    }
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
LABEL_33:
  uint64_t v25 = v10;
LABEL_34:
  if (v25) {
    goto LABEL_50;
  }
  uint64_t v10 = 0;
LABEL_37:
  uint64_t result = swift_unknownObjectRelease();
  if (v10 < 0) {
    goto LABEL_48;
  }
  unint64_t v9 = v20 | (v21 << 8);
LABEL_39:
  if (v6) {
    unint64_t v26 = (v7 << 11) | 0x300;
  }
  else {
    unint64_t v26 = 768;
  }
  uint64_t v27 = v10 | 0x300;
  unint64_t v28 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(v26, 0, 0, 1);
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t result = sub_24A496BE8(v2);
  *a2 = v4;
  a2[1] = v40;
  a2[2] = v39;
  a2[3] = v38;
  a2[4] = v37;
  a2[5] = v36;
  a2[6] = v27;
  a2[7] = v35;
  a2[8] = v9;
  a2[9] = v11;
  a2[10] = v28;
  a2[11] = v30;
  a2[12] = v32;
  a2[13] = v34;
  return result;
}

void sub_24A4AACAC(uint64_t a1@<X0>, ValueMetadata *a2@<X1>, unint64_t *a3@<X8>)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v7 + 16))(v6);
  BigString.init<A>(_:)((uint64_t)v6, a2, &v48);
  unint64_t v8 = v48.n128_u64[1];
  unint64_t v9 = v48.n128_u64[0];
  __n128 v51 = v48;
  long long v52 = v49;
  long long v53 = v50;
  unint64_t v10 = v48.n128_u64[0];
  uint64_t v11 = v50;
  unint64_t v46 = *((void *)&v49 + 1);
  unint64_t v47 = v49;
  unint64_t v44 = *((void *)&v50 + 1);
  unint64_t v45 = v50;
  if (!v48.n128_u64[0])
  {
    unint64_t v43 = *((void *)&v53 + 1);
LABEL_20:
    swift_unknownObjectRetain();
    unint64_t v23 = sub_24A498214();
    LOBYTE(v14) = 0;
    unint64_t v18 = 0;
    goto LABEL_35;
  }
  if ((v50 & 0x8000000000000000) != 0)
  {
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    return;
  }
  int v12 = *(unsigned __int16 *)(v48.n128_u64[0] + 16);
  unint64_t v43 = *((void *)&v53 + 1);
  if (!v12 || !(void)v50) {
    goto LABEL_20;
  }
  uint64_t v13 = *(unsigned __int8 *)(v48.n128_u64[0] + 18);
  if (*(unsigned char *)(v48.n128_u64[0] + 18))
  {
    unint64_t v42 = v48.n128_u64[0];
    swift_unknownObjectRetain_n();
    uint64_t v14 = 0;
    unint64_t v15 = v10;
    do
    {
      uint64_t v16 = *(unsigned __int16 *)(v15 + 16);
      if (*(_WORD *)(v15 + 16))
      {
        uint64_t v19 = 0;
        unint64_t v20 = (uint64_t *)(v15 + 56);
        while (1)
        {
          uint64_t v21 = *v20;
          v20 += 5;
          uint64_t v22 = v14 - v21;
          if (__OFSUB__(v14, v21)) {
            break;
          }
          if (__OFADD__(v22, 1)) {
            goto LABEL_40;
          }
          if (v22 + 1 < 1)
          {
            uint64_t v16 = v19;
            goto LABEL_8;
          }
          ++v19;
          uint64_t v14 = v22;
          if (v16 == v19) {
            goto LABEL_17;
          }
        }
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
      uint64_t v22 = v14;
LABEL_17:
      if (v22) {
        goto LABEL_41;
      }
      uint64_t v14 = 0;
LABEL_8:
      char v17 = (4 * *(unsigned char *)(v15 + 18) + 8) & 0x3C;
      uint64_t v13 = ((-15 << v17) - 1) & v13 | (v16 << v17);
      unint64_t v18 = *(void *)(v15 + 24 + 40 * v16);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      unint64_t v15 = v18;
    }
    while (*(unsigned char *)(v18 + 18));
    unint64_t v24 = v13 & 0xFFFFFFFFFFFFF0FFLL;
    unint64_t v9 = v42;
    uint64_t v25 = *(unsigned __int16 *)(v18 + 16);
    if (!*(_WORD *)(v18 + 16)) {
      goto LABEL_29;
    }
    goto LABEL_22;
  }
  swift_unknownObjectRetain_n();
  unint64_t v24 = 0;
  uint64_t v14 = 0;
  unint64_t v18 = v10;
  uint64_t v25 = *(unsigned __int16 *)(v10 + 16);
  if (*(_WORD *)(v10 + 16))
  {
LABEL_22:
    uint64_t v26 = 0;
    uint64_t v27 = (unsigned __int8 *)(v18 + 40);
    while (1)
    {
      unsigned int v28 = *v27;
      v27 += 24;
      uint64_t v29 = v14 - v28;
      if (__OFSUB__(v14, v28)) {
        break;
      }
      if (__OFADD__(v29, 1)) {
        goto LABEL_43;
      }
      if (v29 + 1 < 1)
      {
        uint64_t v25 = v26;
        goto LABEL_33;
      }
      ++v26;
      uint64_t v14 = v29;
      if (v25 == v26) {
        goto LABEL_30;
      }
    }
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
LABEL_29:
  uint64_t v29 = v14;
LABEL_30:
  if (v29) {
    goto LABEL_46;
  }
  uint64_t v14 = 0;
LABEL_33:
  swift_unknownObjectRelease();
  if (v14 < 0) {
    goto LABEL_44;
  }
  unint64_t v23 = v24 | (v25 << 8);
LABEL_35:
  if (v10) {
    unint64_t v30 = (v11 << 11) | 0x300;
  }
  else {
    unint64_t v30 = 768;
  }
  uint64_t v31 = v14 | 0x300;
  unint64_t v32 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(v30, 0, 0, 1);
  unint64_t v34 = v33;
  unint64_t v36 = v35;
  unint64_t v38 = v37;
  sub_24A496BE8((uint64_t)&v48);
  *a3 = v9;
  a3[1] = v8;
  unint64_t v39 = v46;
  a3[2] = v47;
  a3[3] = v39;
  unint64_t v40 = v44;
  a3[4] = v45;
  a3[5] = v40;
  unint64_t v41 = v43;
  a3[6] = v31;
  a3[7] = v41;
  a3[8] = v23;
  a3[9] = v18;
  a3[10] = v32;
  a3[11] = v34;
  a3[12] = v36;
  a3[13] = v38;
}

uint64_t sub_24A4AAFF8()
{
  return sub_24A5BC640();
}

unint64_t *sub_24A4AB024(unint64_t *result, uint64_t a2, ValueMetadata *a3)
{
  unint64_t v4 = v3[6];
  if (*result >> 10 < v4 >> 10)
  {
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v5 = v3[10];
  if (v5 >> 10 < result[4] >> 10)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v6 = v4 >> 11;
  uint64_t v7 = v5 >> 11;
  if (*v3) {
    uint64_t v8 = v3[4];
  }
  else {
    uint64_t v8 = 0;
  }
  sub_24A4A4AE4((uint64_t)v3, result, a2, a3);
  return (unint64_t *)sub_24A4A48B4((uint64_t)v3, v8, v6, v7);
}

uint64_t sub_24A4AB0C8(uint64_t result, ValueMetadata *a2)
{
  unint64_t v4 = v2[10];
  unint64_t v5 = v2[6];
  if (v4 >> 10 < v5 >> 10)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = v5 >> 11;
    uint64_t v7 = v4 >> 11;
    if (*v2) {
      uint64_t v8 = v2[4];
    }
    else {
      uint64_t v8 = 0;
    }
    sub_24A54F5E8(result, v4, v2[11], v2[12], v2[13], a2);
    return sub_24A4A48B4((uint64_t)v2, v8, v6, v7);
  }
  return result;
}

uint64_t sub_24A4AB150(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, ValueMetadata *a6)
{
  unint64_t v7 = v6[6];
  if (a2 >> 10 < v7 >> 10)
  {
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v8 = v6[10];
  if (a2 >> 10 > v8 >> 10)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v9 = v7 >> 11;
  uint64_t v10 = v8 >> 11;
  if (*v6) {
    uint64_t v11 = v6[4];
  }
  else {
    uint64_t v11 = 0;
  }
  sub_24A54F5E8(result, a2, a3, a4, a5, a6);
  return sub_24A4A48B4((uint64_t)v6, v11, v9, v10);
}

unint64_t sub_24A4AB1D8()
{
  unint64_t result = qword_26979AE50;
  if (!qword_26979AE50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979AE50);
  }
  return result;
}

uint64_t sub_24A4AB22C()
{
  return MEMORY[0x263F8D388];
}

unint64_t sub_24A4AB23C()
{
  unint64_t result = qword_26979AE58;
  if (!qword_26979AE58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979AE58);
  }
  return result;
}

uint64_t sub_24A4AB290()
{
  return MEMORY[0x263F8D398];
}

uint64_t sub_24A4AB29C()
{
  return MEMORY[0x263F8D390];
}

unint64_t sub_24A4AB2AC()
{
  unint64_t result = qword_26979AE60;
  if (!qword_26979AE60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979AE60);
  }
  return result;
}

unint64_t sub_24A4AB304()
{
  unint64_t result = qword_26979AE68;
  if (!qword_26979AE68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979AE68);
  }
  return result;
}

unint64_t sub_24A4AB35C()
{
  unint64_t result = qword_26979AE70;
  if (!qword_26979AE70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979AE70);
  }
  return result;
}

unint64_t sub_24A4AB3B4()
{
  unint64_t result = qword_26979AE78;
  if (!qword_26979AE78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979AE78);
  }
  return result;
}

unint64_t sub_24A4AB40C()
{
  unint64_t result = qword_26979AE80;
  if (!qword_26979AE80)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26979AE88);
    sub_24A4AB480();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979AE80);
  }
  return result;
}

unint64_t sub_24A4AB480()
{
  unint64_t result = qword_26979AE90;
  if (!qword_26979AE90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979AE90);
  }
  return result;
}

unint64_t sub_24A4AB4DC()
{
  unint64_t result = qword_26979AE98;
  if (!qword_26979AE98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979AE98);
  }
  return result;
}

unint64_t sub_24A4AB534()
{
  unint64_t result = qword_26979AEA0;
  if (!qword_26979AEA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979AEA0);
  }
  return result;
}

unint64_t sub_24A4AB58C()
{
  unint64_t result = qword_26979AEA8;
  if (!qword_26979AEA8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26979AE88);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979AEA8);
  }
  return result;
}

unint64_t sub_24A4AB5EC()
{
  unint64_t result = qword_26979AEB0;
  if (!qword_26979AEB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979AEB0);
  }
  return result;
}

uint64_t destroy for BigString()
{
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for BigSubstring(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  long long v3 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v3;
  long long v4 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v4;
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for BigSubstring(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  long long v4 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v4;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v5;
  return a1;
}

__n128 __swift_memcpy112_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t assignWithTake for BigSubstring(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v4 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v4;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for BigSubstring(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 112)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BigSubstring(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 112) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 112) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BigSubstring()
{
  return &type metadata for BigSubstring;
}

uint64_t initializeBufferWithCopyOfBuffer for BigString(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for BigSubstring.Iterator()
{
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for BigSubstring.Iterator(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for BigSubstring.Iterator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  long long v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  return a1;
}

__n128 __swift_memcpy128_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t assignWithTake for BigSubstring.Iterator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  return a1;
}

uint64_t getEnumTagSinglePayload for BigSubstring.Iterator(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 128)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BigSubstring.Iterator(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 128) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 128) = 0;
    }
    if (a2) {
      *(void *)(result + 32) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BigSubstring.Iterator()
{
  return &type metadata for BigSubstring.Iterator;
}

void *sub_24A4ABB88(void *a1, uint64_t a2)
{
  return sub_24A4ABBBC(a1, a2);
}

void *sub_24A4ABBA0(void *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 32);
  BOOL v3 = __OFADD__(*result, v2);
  uint64_t v4 = *result + v2;
  if (v3) {
    __break(1u);
  }
  else {
    *__n128 result = v4;
  }
  return result;
}

void *sub_24A4ABBBC(void *result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 16);
  BOOL v3 = __OFADD__(*result, v2);
  uint64_t v4 = *result + v2;
  if (v3) {
    __break(1u);
  }
  else {
    *__n128 result = v4;
  }
  return result;
}

void *sub_24A4ABBD8(void *a1, uint64_t a2)
{
  return sub_24A4ABC0C(a1, a2);
}

void *sub_24A4ABBF0(void *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  BOOL v3 = __OFADD__(*result, v2);
  uint64_t v4 = *result + v2;
  if (v3) {
    __break(1u);
  }
  else {
    *__n128 result = v4;
  }
  return result;
}

void *sub_24A4ABC0C(void *result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 18);
  BOOL v3 = __OFADD__(*result, v2);
  uint64_t v4 = *result + v2;
  if (v3) {
    __break(1u);
  }
  else {
    *__n128 result = v4;
  }
  return result;
}

void *sub_24A4ABC28(void *a1, uint64_t a2)
{
  return sub_24A4ABC5C(a1, a2);
}

void *sub_24A4ABC40(void *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  BOOL v3 = __OFADD__(*result, v2);
  uint64_t v4 = *result + v2;
  if (v3) {
    __break(1u);
  }
  else {
    *__n128 result = v4;
  }
  return result;
}

void *sub_24A4ABC5C(void *result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 17);
  BOOL v3 = __OFADD__(*result, v2);
  uint64_t v4 = *result + v2;
  if (v3) {
    __break(1u);
  }
  else {
    *__n128 result = v4;
  }
  return result;
}

void *sub_24A4ABC78(void *a1, uint64_t a2)
{
  return sub_24A4ABCAC(a1, a2);
}

void *sub_24A4ABC90(void *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  BOOL v3 = __OFADD__(*result, v2);
  uint64_t v4 = *result + v2;
  if (v3) {
    __break(1u);
  }
  else {
    *__n128 result = v4;
  }
  return result;
}

void *sub_24A4ABCAC(void *result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 19);
  BOOL v3 = __OFADD__(*result, v2);
  uint64_t v4 = *result + v2;
  if (v3) {
    __break(1u);
  }
  else {
    *__n128 result = v4;
  }
  return result;
}

BOOL static BigString.Index.== infix(_:_:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (a5 ^ a1) < 0x400;
}

BOOL static BigString.Index.< infix(_:_:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  return a1 >> 10 < a5 >> 10;
}

unint64_t BigString.Index.utf8Offset.getter(unint64_t a1)
{
  return a1 >> 11;
}

uint64_t BigString.Index._isUTF16TrailingSurrogate.getter(unint64_t a1)
{
  return (a1 >> 10) & 1;
}

uint64_t BigString.Index._isKnownScalarAligned.getter(unint64_t a1)
{
  return (a1 >> 8) & 1;
}

uint64_t BigString.Index._isKnownCharacterAligned.getter(unint64_t a1)
{
  return (a1 >> 9) & 1;
}

uint64_t BigString.Index.init(_utf8Offset:)(uint64_t a1)
{
  return a1 << 11;
}

uint64_t BigString.Index.init(_utf8Offset:utf16TrailingSurrogate:)(uint64_t a1, char a2)
{
  if (a2) {
    return (a1 << 11) | 0x400;
  }
  else {
    return a1 << 11;
  }
}

BOOL sub_24A4ABD48(void *a1, void *a2)
{
  return (*a2 ^ *a1) < 0x400uLL;
}

BOOL sub_24A4ABD60(void *a1, void *a2)
{
  return *a1 >> 10 < *a2 >> 10;
}

BOOL sub_24A4ABD78(void *a1, void *a2)
{
  return *a2 >> 10 >= *a1 >> 10;
}

BOOL sub_24A4ABD90(void *a1, void *a2)
{
  return *a1 >> 10 >= *a2 >> 10;
}

BOOL sub_24A4ABDA8(void *a1, void *a2)
{
  return *a2 >> 10 < *a1 >> 10;
}

uint64_t BigString.Index.hash(into:)()
{
  return sub_24A5BC670();
}

uint64_t BigString.Index.hashValue.getter()
{
  return sub_24A5BC690();
}

uint64_t sub_24A4ABE30()
{
  return sub_24A5BC690();
}

uint64_t sub_24A4ABE78()
{
  return sub_24A5BC670();
}

uint64_t sub_24A4ABEA8()
{
  return sub_24A5BC690();
}

uint64_t BigString.Index.description.getter()
{
  uint64_t v1 = sub_24A5BC430();
  sub_24A5BB6F0();
  sub_24A5BB6F0();
  swift_bridgeObjectRelease();
  return v1;
}

unint64_t sub_24A4ABF90()
{
  unint64_t result = qword_26979AEB8;
  if (!qword_26979AEB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979AEB8);
  }
  return result;
}

uint64_t sub_24A4ABFE4()
{
  return BigString.Index.description.getter();
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t _s5IndexVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFFD && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  BOOL v5 = __OFSUB__(v4, 1);
  int v6 = v4 - 1;
  if (v6 < 0 != v5) {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t _s5IndexVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 2147483646;
    *(void *)(result + 8) = 0;
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BigString.Index()
{
  return &type metadata for BigString.Index;
}

BOOL BitSet.isStrictSuperset(of:)(void *a1, void *a2)
{
  return BitSet.isStrictSubset(of:)(a2, a1);
}

BOOL BitSet.isStrictSuperset(of:)(void *a1, uint64_t a2, void *a3)
{
  return BitSet.isStrictSubset(of:)(a3, a1);
}

uint64_t BitSet.isStrictSuperset(of:)(uint64_t result, unint64_t a2, uint64_t *a3)
{
  uint64_t v3 = a3[2];
  if (result != a2)
  {
    if (v3)
    {
      uint64_t v5 = result;
      uint64_t v6 = (uint64_t)(a3 + 4);
      if (!a3[4])
      {
        if (v3 == 1) {
          return 0;
        }
        if (!a3[5])
        {
          if (v3 == 2) {
            return 0;
          }
          for (uint64_t i = 6; !a3[i]; ++i)
          {
            uint64_t v11 = i - 3;
            if (__OFADD__(i - 4, 1))
            {
LABEL_34:
              __break(1u);
              return result;
            }
            __n128 result = 0;
            if (v11 == v3) {
              return result;
            }
          }
        }
      }
      sub_24A52B2C8((uint64_t)(a3 + 4), a3[2], 0x8000000000000000, v5, &v12);
      if (v12 == v13)
      {
        sub_24A52B2C8(v6, v3, a2, 0x7FFFFFFFFFFFFFFFLL, &v12);
        __n128 result = 0;
        if (((a2 | v5) & 0x8000000000000000) != 0 || v12 == v13) {
          return result;
        }
        goto LABEL_12;
      }
      if (((a2 | v5) & 0x8000000000000000) == 0)
      {
LABEL_12:
        return _UnsafeBitSet.isSuperset(of:)(v5, a2, v6, v3);
      }
    }
    return 0;
  }
  if (!v3) {
    return 0;
  }
  if (a3[4]) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  if (a3[5]) {
    return 1;
  }
  if (v3 == 2) {
    return 0;
  }
  uint64_t v7 = 6;
  do
  {
    uint64_t v8 = a3[v7];
    __n128 result = v8 != 0;
    if (v8) {
      break;
    }
    uint64_t v9 = v7 - 3;
    if (__OFADD__(v7 - 4, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    ++v7;
  }
  while (v9 != v3);
  return result;
}

void *BitSet.isStrictSuperset<A>(of:)(uint64_t a1, uint64_t *a2, ValueMetadata *a3, uint64_t a4)
{
  Description = (void (**)(char *, void, ValueMetadata *))a3[-1].Description;
  __n128 result = (void *)MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)&v19[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(v12 + 16);
  if (!v13) {
    goto LABEL_13;
  }
  if (a2[4]) {
    goto LABEL_3;
  }
  if (v13 == 1)
  {
LABEL_13:
    char v15 = 0;
    return (void *)(v15 & 1);
  }
  uint64_t v16 = 5;
  while (!a2[v16])
  {
    uint64_t v17 = v16 - 3;
    if (__OFADD__(v16 - 4, 1))
    {
      __break(1u);
      goto LABEL_20;
    }
    ++v16;
    if (v17 == v13) {
      goto LABEL_13;
    }
  }
LABEL_3:
  if (a3 == &type metadata for BitSet)
  {
    Description[2](v11, a1, &type metadata for BitSet);
LABEL_16:
    swift_dynamicCast();
    char v15 = BitSet.isStrictSubset(of:)(a2, v19[0]);
    swift_bridgeObjectRelease();
    return (void *)(v15 & 1);
  }
  if (a3 == &type metadata for BitSet.Counted)
  {
    Description[2](v11, a1, &type metadata for BitSet.Counted);
    goto LABEL_16;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_26979AEC0);
  if ((ValueMetadata *)v14 == a3)
  {
    Description[2](v11, a1, a3);
    swift_dynamicCast();
    char v15 = BitSet.isStrictSuperset(of:)((uint64_t)v19[0], (unint64_t)v19[1], a2);
    return (void *)(v15 & 1);
  }
  MEMORY[0x270FA5388](v14);
  *(&v18 - 4) = (uint64_t)a3;
  *(&v18 - 3) = a4;
  *(&v18 - 2) = a1;
  *(&v18 - 1) = (uint64_t)a2;
  LOBYTE(v19[0]) = 2;
  __n128 result = sub_24A5813E4(v13, v19, (void *(*)(char *__return_ptr, unsigned char **))sub_24A4AC750);
  if (LOBYTE(v19[0]) != 2)
  {
    char v15 = (uint64_t)v19[0] & 1;
    return (void *)(v15 & 1);
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t *sub_24A4AC4D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, BOOL *a5@<X8>)
{
  unint64_t v20 = a5;
  uint64_t v23 = a2;
  uint64_t v8 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v14 = (char *)&v20 - v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v23, a4);
  sub_24A5BB840();
  swift_getAssociatedConformanceWitness();
  sub_24A5BBEE0();
  if (v22)
  {
LABEL_2:
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, AssociatedTypeWitness);
    __n128 result = sub_24A55CD40(*(uint64_t **)a1, *(void *)(a1 + 8), a3);
    BOOL v16 = (result & 1) == 0;
  }
  else
  {
    unint64_t v17 = v21;
    while ((v17 & 0x8000000000000000) == 0)
    {
      unint64_t v18 = v17 >> 6;
      if (v17 >> 6 >= *(void *)(a3 + 16)) {
        break;
      }
      uint64_t v19 = 1 << v17;
      if ((*(void *)(a3 + 32 + 8 * v18) & v19) == 0) {
        break;
      }
      *(void *)(*(void *)a1 + 8 * v18) |= v19;
      sub_24A5BBEE0();
      unint64_t v17 = v21;
      if (v22) {
        goto LABEL_2;
      }
    }
    __n128 result = (uint64_t *)(*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, AssociatedTypeWitness);
    BOOL v16 = 0;
  }
  *unint64_t v20 = v16;
  return result;
}

uint64_t *sub_24A4AC750@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  return sub_24A4AC4D4(a1, v2[4], v2[5], v2[2], a2);
}

uint64_t _AncestorHashSlots.path.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*_AncestorHashSlots.path.modify())()
{
  return nullsub_1;
}

BOOL static _AncestorHashSlots.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t static _AncestorHashSlots.empty.getter()
{
  return 0;
}

uint64_t _AncestorHashSlots.subscript.getter(char a1, unint64_t a2)
{
  return (a2 >> a1) & 0x1F;
}

uint64_t _AncestorHashSlots.subscript.setter(uint64_t result, char a2)
{
  *v2 |= (unint64_t)result << a2;
  return result;
}

uint64_t (*_AncestorHashSlots.subscript.modify(uint64_t a1, char a2))(uint64_t result)
{
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 12) = a2;
  *(_DWORD *)(a1 + 8) = (*v2 >> a2) & 0x1F;
  return sub_24A4AC810;
}

uint64_t sub_24A4AC810(uint64_t result)
{
  **(void **)result |= (unint64_t)*(unsigned int *)(result + 8) << *(unsigned char *)(result + 12);
  return result;
}

unint64_t _AncestorHashSlots.appending(_:at:)(unsigned int a1, char a2, uint64_t a3)
{
  return ((unint64_t)a1 << a2) | a3;
}

uint64_t _AncestorHashSlots.clear(_:)(uint64_t result)
{
  if (result <= 0x3Fu) {
    *v1 &= (-31 << result) - 1;
  }
  return result;
}

uint64_t _AncestorHashSlots.clear(atOrBelow:)(uint64_t result)
{
  if (result <= 0x3Fu) {
    *v1 &= ~(-1 << result);
  }
  return result;
}

uint64_t _AncestorHashSlots.truncating(to:)(unsigned __int8 a1, uint64_t a2)
{
  if (a1 < 0x40u) {
    uint64_t v2 = ~(-1 << a1);
  }
  else {
    uint64_t v2 = -1;
  }
  return v2 & a2;
}

BOOL _AncestorHashSlots.hasDataBelow(_:)(unsigned __int8 a1, unint64_t a2)
{
  return a1 < 0x40u && a2 >> a1 != 0;
}

uint64_t _AncestorHashSlots.isEqual(to:upTo:)(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  if (!a2) {
    return 1;
  }
  if (a2 >= 0x40u) {
    return a3 == a1;
  }
  return a3 << -a2 == a1 << -a2;
}

ValueMetadata *type metadata accessor for _AncestorHashSlots()
{
  return &type metadata for _AncestorHashSlots;
}

uint64_t sub_24A4AC90C()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_24A4AC93C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_24A4AF338(a1, a2);
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v5;
  *(void *)(a3 + 16) = v7;
  *(unsigned char *)(a3 + 24) = v6 & 1;
  return result;
}

uint64_t sub_24A4AC970()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_24A4AC97C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_24A5BC430();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = a1;
  *(unsigned char *)(a2 + 24) = 0;
  return result;
}

uint64_t sub_24A4AC9D8(uint64_t a1)
{
  unint64_t v2 = sub_24A4AD9BC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A4ACA14(uint64_t a1)
{
  unint64_t v2 = sub_24A4AD9BC();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t TreeDictionary<>.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void (**a6)(char *, uint64_t, uint64_t), void (**a7)(char *, char *, void), uint64_t a8, uint64_t a9)
{
  uint64_t v10 = v9;
  uint64_t v93 = a4;
  uint64_t v94 = a8;
  long long v99 = a7;
  uint64_t v92 = a3;
  uint64_t v96 = *(a5 - 1);
  uint64_t v97 = a2;
  uint64_t v109 = a9;
  uint64_t v14 = MEMORY[0x270FA5388](a1);
  long long v101 = (uint64_t *)((char *)&v88 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v107 = (char *)&v88 - v17;
  uint64_t v95 = *(void *)(v18 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  long long v89 = (char *)&v88 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  long long v102 = (void (**)(char *, void (**)(char *, uint64_t, uint64_t)))((char *)&v88 - v22);
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  long long v104 = (uint64_t *)((char *)&v88 - v24);
  MEMORY[0x270FA5388](v23);
  uint64_t v90 = (char *)&v88 - v25;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v111 = sub_24A5BBD20();
  uint64_t v98 = *(void (***)(char *, char *, void *))(v111 - 8);
  uint64_t v27 = MEMORY[0x270FA5388](v111);
  uint64_t v100 = (char *)&v88 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = MEMORY[0x270FA5388](v27);
  uint64_t v31 = (char *)&v88 - v30;
  uint64_t v32 = MEMORY[0x270FA5388](v29);
  unint64_t v34 = (char *)&v88 - v33;
  uint64_t v35 = MEMORY[0x270FA5388](v32);
  uint64_t v110 = (uint64_t)&v88 - v36;
  MEMORY[0x270FA5388](v35);
  unint64_t v38 = (char *)&v88 - v37;
  unint64_t v108 = (void *)__swift_instantiateConcreteTypeFromMangledName(&qword_26979AEC8);
  uint64_t v39 = MEMORY[0x270FA5388](v108);
  long long v103 = (void (**)(char *, void (**)(char *, uint64_t, uint64_t)))((char *)&v88
                                                                                      - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v41 = MEMORY[0x270FA5388](v39);
  uint64_t v105 = (char *)&v88 - v42;
  MEMORY[0x270FA5388](v41);
  long long v106 = a6;
  uint64_t v136 = TupleTypeMetadata2;
  uint64_t v91 = v44;
  if (a5 == (void *)MEMORY[0x263F8D310])
  {
    long long v60 = (char *)&v88 - v43;
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    sub_24A4AD9BC();
    uint64_t v105 = v60;
    sub_24A5BC730();
    TreeDictionary.makeIterator()(v97, (uint64_t)&v124);
    long long v61 = (void *)type metadata accessor for TreeDictionary.Iterator();
    long long v62 = (void (**)(char *, uint64_t, uint64_t))(v98 + 4);
    long long v103 = (void (**)(char *, void (**)(char *, uint64_t, uint64_t)))(TupleTypeMetadata2 - 8);
    long long v104 = v61;
    long long v63 = (void (**)(char *, char *, void))(v96 + 32);
    long long v101 = (void *)(v95 + 32);
    long long v102 = (void (**)(char *, void (**)(char *, uint64_t, uint64_t)))(v95 + 8);
    swift_retain();
    unint64_t v64 = v90;
    while (1)
    {
      uint64_t v65 = v110;
      TreeDictionary.Iterator.next()(v104, v110);
      (*v62)(v38, v65, v111);
      uint64_t v66 = v136;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v136 - 8) + 48))(v38, 1, v136) == 1) {
        break;
      }
      uint64_t v67 = v10;
      uint64_t v68 = v106;
      ((void (*)(char *, char *, void))*v101)(v64, &v38[*(int *)(v66 + 48)], v106);
      (*v63)(v107, v38, MEMORY[0x263F8D310]);
      swift_dynamicCast();
      uint64_t v132 = sub_24A4AF338(v116, *((unint64_t *)&v116 + 1));
      uint64_t v133 = v69;
      uint64_t v134 = v70;
      LOBYTE(v135) = v71 & 1;
      sub_24A5BC410();
      if (v67)
      {
        (*v102)(v64, v68);
        long long v122 = v130;
        v123[0] = v131[0];
        *(_OWORD *)((char *)v123 + 11) = *(_OWORD *)((char *)v131 + 11);
        long long v118 = v126;
        long long v119 = v127;
        long long v120 = v128;
        long long v121 = v129;
        long long v116 = v124;
        long long v117 = v125;
        sub_24A4A2BC4((uint64_t)&v116);
        (*(void (**)(char *, void *))(v91 + 8))(v105, v108);
        return swift_bridgeObjectRelease();
      }
      (*v102)(v64, v68);
      swift_bridgeObjectRelease();
      uint64_t v10 = 0;
    }
    long long v79 = v129;
    long long v122 = v130;
    v123[0] = v131[0];
    *(_OWORD *)((char *)v123 + 11) = *(_OWORD *)((char *)v131 + 11);
    long long v118 = v126;
    long long v119 = v127;
LABEL_28:
    long long v120 = v128;
    long long v121 = v79;
    long long v116 = v124;
    long long v117 = v125;
    sub_24A4A2BC4((uint64_t)&v116);
    return (*(uint64_t (**)(char *, void *))(v91 + 8))(v105, v108);
  }
  else
  {
    uint64_t v45 = v97;
    if (a5 == (void *)MEMORY[0x263F8D6C8])
    {
      __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      sub_24A4AD9BC();
      sub_24A5BC730();
      TreeDictionary.makeIterator()(v45, (uint64_t)&v124);
      long long v103 = (void (**)(char *, void (**)(char *, uint64_t, uint64_t)))type metadata accessor for TreeDictionary.Iterator();
      long long v72 = (void (**)(char *, uint64_t, uint64_t))(v98 + 4);
      long long v101 = (void *)(v95 + 32);
      long long v102 = (void (**)(char *, void (**)(char *, uint64_t, uint64_t)))(v136 - 8);
      long long v73 = (void (**)(char *, char *, void))(v96 + 32);
      uint64_t v100 = (char *)(v95 + 8);
      swift_retain();
      uint64_t v74 = v104;
      while (1)
      {
        uint64_t v75 = v110;
        TreeDictionary.Iterator.next()(v103, v110);
        (*v72)(v34, v75, v111);
        uint64_t v76 = v136;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v136 - 8) + 48))(v34, 1, v136) == 1)
        {
          long long v122 = v130;
          v123[0] = v131[0];
          *(_OWORD *)((char *)v123 + 11) = *(_OWORD *)((char *)v131 + 11);
          long long v118 = v126;
          long long v119 = v127;
          long long v79 = v129;
          goto LABEL_28;
        }
        ((void (*)(void *, char *, void))*v101)(v74, &v34[*(int *)(v76 + 48)], a6);
        (*v73)(v107, v34, MEMORY[0x263F8D6C8]);
        swift_dynamicCast();
        uint64_t v77 = v116;
        uint64_t v132 = v116;
        uint64_t v132 = sub_24A5BC430();
        uint64_t v133 = v78;
        uint64_t v134 = v77;
        a6 = v106;
        LOBYTE(v135) = 0;
        sub_24A5BC410();
        if (v9) {
          break;
        }
        (*(void (**)(void *, void (**)(char *, uint64_t, uint64_t)))v100)(v74, a6);
        swift_bridgeObjectRelease();
      }
      (*(void (**)(void *, void (**)(char *, uint64_t, uint64_t)))v100)(v74, a6);
      long long v122 = v130;
      v123[0] = v131[0];
      *(_OWORD *)((char *)v123 + 11) = *(_OWORD *)((char *)v131 + 11);
      long long v118 = v126;
      long long v119 = v127;
      long long v120 = v128;
      long long v121 = v129;
      long long v116 = v124;
      long long v117 = v125;
      sub_24A4A2BC4((uint64_t)&v116);
      (*(void (**)(char *, void *))(v91 + 8))(v105, v108);
      return swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v46 = a5;
      if (swift_conformsToProtocol2()) {
        unint64_t v47 = a5;
      }
      else {
        unint64_t v47 = 0;
      }
      long long v106 = (void (**)(char *, uint64_t, uint64_t))(v98 + 4);
      long long v104 = a5;
      uint64_t v105 = (char *)(v136 - 8);
      uint64_t v48 = v45;
      if (v47)
      {
        __swift_project_boxed_opaque_existential_1(a1, a1[3]);
        sub_24A4AD9BC();
        long long v49 = v104;
        sub_24A5BC730();
        TreeDictionary.makeIterator()(v48, (uint64_t)&v124);
        long long v50 = (void *)type metadata accessor for TreeDictionary.Iterator();
        uint64_t v98 = (void (**)(char *, char *, void *))(v96 + 32);
        long long v99 = (void (**)(char *, char *, void))(v95 + 32);
        uint64_t v100 = (char *)(v95 + 8);
        long long v101 = v50;
        swift_retain();
        __n128 v51 = (char *)v102;
        while (1)
        {
          uint64_t v52 = v110;
          TreeDictionary.Iterator.next()(v101, v110);
          (*v106)(v31, v52, v111);
          uint64_t v53 = v136;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v136 - 8) + 48))(v31, 1, v136) == 1)
          {
            long long v122 = v130;
            v123[0] = v131[0];
            *(_OWORD *)((char *)v123 + 11) = *(_OWORD *)((char *)v131 + 11);
            long long v118 = v126;
            long long v119 = v127;
            long long v120 = v128;
            long long v121 = v129;
            long long v116 = v124;
            long long v117 = v125;
            sub_24A4A2BC4((uint64_t)&v116);
            return (*(uint64_t (**)(void *, void *))(v91 + 8))(v103, v108);
          }
          (*v99)(v51, &v31[*(int *)(v53 + 48)], a6);
          (*v98)(v107, v31, v49);
          __swift_instantiateConcreteTypeFromMangledName(&qword_26979AED8);
          swift_dynamicCast();
          __swift_project_boxed_opaque_existential_1(&v116, *((uint64_t *)&v117 + 1));
          sub_24A5BC3D0();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v116);
          sub_24A4ADA10((uint64_t)&v132, (uint64_t)&v116);
          __swift_project_boxed_opaque_existential_1(&v116, *((uint64_t *)&v117 + 1));
          uint64_t v54 = sub_24A5BC7A0();
          uint64_t v56 = v55;
          __swift_project_boxed_opaque_existential_1(&v116, *((uint64_t *)&v117 + 1));
          uint64_t v57 = sub_24A5BC7B0();
          char v59 = v58;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v116);
          uint64_t v112 = v54;
          uint64_t v113 = v56;
          __n128 v51 = (char *)v102;
          uint64_t v114 = v57;
          char v115 = v59 & 1;
          sub_24A5BC410();
          if (v9) {
            break;
          }
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v132);
          (*(void (**)(char *, void (**)(char *, uint64_t, uint64_t)))v100)(v51, a6);
          swift_bridgeObjectRelease();
          long long v49 = v104;
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v132);
        (*(void (**)(char *, void (**)(char *, uint64_t, uint64_t)))v100)(v51, a6);
        long long v122 = v130;
        v123[0] = v131[0];
        *(_OWORD *)((char *)v123 + 11) = *(_OWORD *)((char *)v131 + 11);
        long long v118 = v126;
        long long v119 = v127;
        long long v120 = v128;
        long long v121 = v129;
        long long v116 = v124;
        long long v117 = v125;
        sub_24A4A2BC4((uint64_t)&v116);
        (*(void (**)(void *, void *))(v91 + 8))(v103, v108);
        return swift_bridgeObjectRelease();
      }
      else
      {
        __swift_project_boxed_opaque_existential_1(a1, a1[3]);
        sub_24A5BC710();
        TreeDictionary.makeIterator()(v45, (uint64_t)&v124);
        uint64_t v81 = (void *)type metadata accessor for TreeDictionary.Iterator();
        uint64_t v98 = (void (**)(char *, char *, void *))(v95 + 32);
        long long v102 = (void (**)(char *, void (**)(char *, uint64_t, uint64_t)))(v96 + 32);
        long long v103 = (void (**)(char *, void (**)(char *, uint64_t, uint64_t)))(v95 + 8);
        uint64_t v107 = (char *)(v96 + 8);
        unint64_t v108 = v81;
        swift_retain();
        unint64_t v82 = v89;
        uint64_t v83 = v101;
        while (1)
        {
          uint64_t v84 = v110;
          TreeDictionary.Iterator.next()(v108, v110);
          uint64_t v85 = v100;
          (*v106)(v100, v84, v111);
          uint64_t v86 = v136;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v136 - 8) + 48))(v85, 1, v136) == 1) {
            break;
          }
          uint64_t v87 = &v85[*(int *)(v86 + 48)];
          ((void (*)(void *, char *, void *))*v102)(v83, v85, v46);
          (*v98)(v82, v87, a6);
          __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v132, v135);
          sub_24A5BC4B0();
          if (v9)
          {
            (*v103)(v82, a6);
            (*(void (**)(void *, void *))v107)(v101, v104);
            break;
          }
          __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v132, v135);
          sub_24A5BC4B0();
          (*v103)(v82, a6);
          unint64_t v46 = v104;
          (*(void (**)(void *, void *))v107)(v101, v104);
        }
        long long v122 = v130;
        v123[0] = v131[0];
        *(_OWORD *)((char *)v123 + 11) = *(_OWORD *)((char *)v131 + 11);
        long long v118 = v126;
        long long v119 = v127;
        long long v120 = v128;
        long long v121 = v129;
        long long v116 = v124;
        long long v117 = v125;
        sub_24A4A2BC4((uint64_t)&v116);
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v132);
      }
    }
  }
}

unint64_t sub_24A4AD9BC()
{
  unint64_t result = qword_26979AED0;
  if (!qword_26979AED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979AED0);
  }
  return result;
}

uint64_t sub_24A4ADA10(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_24A4ADA74(void *a1, uint64_t a2, uint64_t a3)
{
  return TreeDictionary<>.encode(to:)(a1, *v3, v3[1], v3[2], *(void **)(a2 + 16), *(void (***)(char *, uint64_t, uint64_t))(a2 + 24), *(void (***)(char *, char *, void))(a3 - 8), *(void *)(a2 + 32), *(void *)(a3 - 16));
}

uint64_t TreeDictionary<>.init(from:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v152 = a6;
  uint64_t v139 = a4;
  uint64_t v135 = sub_24A5BBD20();
  uint64_t v134 = *(void *)(v135 - 8);
  MEMORY[0x270FA5388](v135);
  uint64_t v145 = (char *)&v121 - v11;
  uint64_t v12 = sub_24A5BBD20();
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v150 = (char *)&v121 - v14;
  uint64_t v137 = *(void *)(a2 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v140 = (char *)&v121 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v143 = (char *)&v121 - v18;
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v149 = (char *)&v121 - v20;
  uint64_t v141 = *(void *)(a3 - 8);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v138 = (char *)&v121 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  uint64_t v144 = (char *)&v121 - v24;
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  uint64_t v27 = (char *)&v121 - v26;
  MEMORY[0x270FA5388](v25);
  uint64_t v29 = (char *)&v121 - v28;
  uint64_t v163 = (void (**)(char *, uint64_t))__swift_instantiateConcreteTypeFromMangledName(&qword_26979AEE0);
  uint64_t v142 = (uint64_t)*(v163 - 1);
  uint64_t v30 = MEMORY[0x270FA5388](v163);
  uint64_t v147 = (char *)&v121 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = MEMORY[0x270FA5388](v30);
  uint64_t v146 = (char *)&v121 - v33;
  MEMORY[0x270FA5388](v32);
  uint64_t v35 = (char *)&v121 - v34;
  uint64_t v151 = a5;
  uint64_t v160 = TreeDictionary.init()(a2, a3, a5);
  uint64_t v161 = v36;
  uint64_t v162 = v37;
  if (a2 == MEMORY[0x263F8D310])
  {
    a2 = a1[3];
    __swift_project_boxed_opaque_existential_1(a1, a2);
    sub_24A4AD9BC();
    sub_24A5BC700();
    if (!v6)
    {
      uint64_t v133 = a1;
      uint64_t v148 = v35;
      uint64_t v43 = sub_24A5BC400();
      uint64_t v44 = *(void *)(v43 + 16);
      uint64_t v145 = (char *)v43;
      if (v44)
      {
        uint64_t v146 = (char *)(v141 + 56);
        uint64_t v147 = (char *)(v141 + 16);
        uint64_t v45 = (void (**)(char *, uint64_t))(v141 + 8);
        uint64_t v46 = a3;
        unint64_t v47 = (unsigned char *)(v43 + 56);
        do
        {
          uint64_t v48 = *((void *)v47 - 2);
          char v50 = *v47;
          uint64_t v51 = *((void *)v47 - 1);
          *(void *)&long long v157 = *((void *)v47 - 3);
          uint64_t v49 = v157;
          *((void *)&v157 + 1) = v48;
          *(void *)&long long v158 = v51;
          BYTE8(v158) = v50;
          swift_bridgeObjectRetain();
          sub_24A5BC3F0();
          *(void *)&long long v157 = v49;
          *((void *)&v157 + 1) = v48;
          uint64_t v52 = (uint64_t)v149;
          swift_dynamicCast();
          uint64_t v53 = v150;
          (*(void (**)(char *, char *, uint64_t))v147)(v150, v29, v46);
          (*(void (**)(char *, void, uint64_t, uint64_t))v146)(v53, 0, 1, v46);
          uint64_t v54 = (void *)type metadata accessor for TreeDictionary();
          TreeDictionary.subscript.setter(v53, v52, v54);
          (*v45)(v29, v46);
          v47 += 32;
          --v44;
        }
        while (v44);
      }
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void))(v142 + 8))(v148, v163);
      goto LABEL_34;
    }
    goto LABEL_24;
  }
  uint64_t v148 = (char *)a3;
  if (a2 == MEMORY[0x263F8D6C8])
  {
    a2 = a1[3];
    __swift_project_boxed_opaque_existential_1(a1, a2);
    unint64_t v55 = sub_24A4AD9BC();
    sub_24A5BC700();
    if (!v6)
    {
      uint64_t v133 = a1;
      uint64_t v56 = sub_24A5BC400();
      uint64_t v57 = *(void *)(v56 + 16);
      uint64_t v143 = (char *)v56;
      if (v57)
      {
        uint64_t v140 = (char *)v55;
        uint64_t v147 = (char *)(v141 + 16);
        uint64_t v145 = (char *)(v141 + 56);
        uint64_t v144 = (char *)(v141 + 8);
        char v58 = (unsigned char *)(v56 + 56);
        char v59 = v148;
        uint64_t v60 = (uint64_t)v149;
        while (1)
        {
          uint64_t v61 = *((void *)v58 - 3);
          uint64_t v62 = *((void *)v58 - 2);
          uint64_t v63 = *((void *)v58 - 1);
          if (*v58) {
            break;
          }
          *(void *)&long long v157 = *((void *)v58 - 3);
          *((void *)&v157 + 1) = v62;
          *(void *)&long long v158 = v63;
          BYTE8(v158) = 0;
          swift_bridgeObjectRetain();
          sub_24A5BC3F0();
          *(void *)&long long v157 = v63;
          swift_dynamicCast();
          unint64_t v64 = v150;
          (*(void (**)(char *, char *, char *))v147)(v150, v27, v59);
          (*(void (**)(char *, void, uint64_t, char *))v145)(v64, 0, 1, v59);
          uint64_t v65 = (void *)type metadata accessor for TreeDictionary();
          TreeDictionary.subscript.setter(v64, v60, v65);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, char *))v144)(v27, v59);
          v58 += 32;
          if (!--v57) {
            goto LABEL_22;
          }
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        __swift_project_boxed_opaque_existential_1(v133, v133[3]);
        uint64_t v100 = (void *)sub_24A5BC6D0();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v100 = sub_24A49A114(0, v100[2] + 1, 1, v100);
        }
        unint64_t v102 = v100[2];
        unint64_t v101 = v100[3];
        a2 = v102 + 1;
        if (v102 >= v101 >> 1) {
          uint64_t v100 = sub_24A49A114((void *)(v101 > 1), v102 + 1, 1, v100);
        }
        *((void *)&v158 + 1) = &type metadata for _DictionaryCodingKey;
        uint64_t v159 = v140;
        uint64_t v103 = swift_allocObject();
        *(void *)&long long v157 = v103;
        *(void *)(v103 + 16) = v61;
        *(void *)(v103 + 24) = v62;
        *(void *)(v103 + 32) = v63;
        *(unsigned char *)(v103 + 40) = 1;
        _OWORD v100[2] = a2;
        sub_24A4AF714(&v157, (uint64_t)&v100[5 * v102 + 4]);
        uint64_t v104 = sub_24A5BC0E0();
        swift_allocError();
        long long v106 = v105;
        __swift_instantiateConcreteTypeFromMangledName(&qword_26979AEF8);
        *long long v106 = MEMORY[0x263F8D6C8];
        sub_24A5BC0C0();
        (*(void (**)(void *, void, uint64_t))(*(void *)(v104 - 8) + 104))(v106, *MEMORY[0x263F8DCB0], v104);
        swift_willThrow();
        (*(void (**)(char *, void))(v142 + 8))(v146, v163);
        goto LABEL_48;
      }
LABEL_22:
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void))(v142 + 8))(v146, v163);
      goto LABEL_34;
    }
    goto LABEL_24;
  }
  uint64_t v38 = swift_conformsToProtocol2();
  if (v38) {
    uint64_t v39 = v38;
  }
  else {
    uint64_t v39 = 0;
  }
  if (v38) {
    uint64_t v40 = a2;
  }
  else {
    uint64_t v40 = 0;
  }
  uint64_t v136 = v40;
  if (!v40)
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    sub_24A5BC6E0();
    if (!v6)
    {
      __swift_project_boxed_opaque_existential_1(&v157, *((uint64_t *)&v158 + 1));
      char v95 = sub_24A5BC460();
      if ((v96 & 1) != 0 || (v95 & 1) == 0)
      {
        uint64_t v133 = a1;
        __swift_project_boxed_opaque_existential_1(&v157, *((uint64_t *)&v158 + 1));
        if (sub_24A5BC490())
        {
LABEL_40:
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v157);
          goto LABEL_34;
        }
        uint64_t v147 = (char *)(v137 + 16);
        uint64_t v145 = (char *)(v141 + 56);
        uint64_t v146 = (char *)(v141 + 16);
        unint64_t v108 = (void (**)(char *, char *))(v141 + 8);
        uint64_t v163 = (void (**)(char *, uint64_t))(v137 + 8);
        uint64_t v109 = v140;
        uint64_t v110 = v138;
        uint64_t v111 = v140;
        while (1)
        {
          __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v157, *((uint64_t *)&v158 + 1));
          sub_24A5BC470();
          __swift_project_boxed_opaque_existential_1(&v157, *((uint64_t *)&v158 + 1));
          if (sub_24A5BC490()) {
            break;
          }
          __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v157, *((uint64_t *)&v158 + 1));
          uint64_t v112 = v148;
          sub_24A5BC470();
          uint64_t v113 = (uint64_t)v149;
          (*(void (**)(char *, char *, uint64_t))v147)(v149, v111, a2);
          uint64_t v114 = v150;
          (*(void (**)(char *, char *, char *))v146)(v150, v110, v112);
          (*(void (**)(char *, void, uint64_t, char *))v145)(v114, 0, 1, v112);
          char v115 = (void *)type metadata accessor for TreeDictionary();
          TreeDictionary.subscript.setter(v114, v113, v115);
          long long v116 = v112;
          uint64_t v109 = v111;
          (*v108)(v110, v116);
          (*v163)(v111, a2);
          __swift_project_boxed_opaque_existential_1(&v157, *((uint64_t *)&v158 + 1));
          if (sub_24A5BC490()) {
            goto LABEL_40;
          }
        }
        uint64_t v117 = sub_24A5BC0E0();
        swift_allocError();
        uint64_t v119 = v118;
        long long v120 = v133;
        __swift_project_boxed_opaque_existential_1(v133, v133[3]);
        a1 = v120;
        sub_24A5BC6D0();
        sub_24A5BC0C0();
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v117 - 8) + 104))(v119, *MEMORY[0x263F8DCB8], v117);
        swift_willThrow();
        (*v163)(v109, a2);
      }
      else
      {
        a2 = sub_24A5BC0E0();
        swift_allocError();
        uint64_t v98 = v97;
        __swift_project_boxed_opaque_existential_1(a1, a1[3]);
        sub_24A5BC6D0();
        sub_24A5BC0C0();
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(a2 - 8) + 104))(v98, *MEMORY[0x263F8DCB8], a2);
        swift_willThrow();
      }
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v157);
LABEL_49:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      return a2;
    }
LABEL_24:
    swift_release();
    goto LABEL_49;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  unint64_t v41 = sub_24A4AD9BC();
  uint64_t v133 = a1;
  uint64_t v42 = (char *)v41;
  sub_24A5BC700();
  if (v6)
  {
LABEL_48:
    swift_release();
    a1 = v133;
    goto LABEL_49;
  }
  uint64_t v138 = v42;
  uint64_t v66 = sub_24A5BC400();
  uint64_t v67 = *(void *)(v66 + 16);
  uint64_t v121 = v66;
  if (v67)
  {
    uint64_t v68 = v66;
    uint64_t v69 = v136;
    uint64_t v131 = v136 - 8;
    uint64_t v132 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v137 + 56);
    long long v130 = (void (**)(char *, char *, uint64_t))(v137 + 32);
    long long v127 = (void (**)(char *, char *, uint64_t))(v137 + 16);
    long long v126 = (void (**)(char *, char *, char *))(v141 + 16);
    long long v125 = (void (**)(char *, void, uint64_t, char *))(v141 + 56);
    long long v124 = (void (**)(char *, char *))(v141 + 8);
    long long v129 = (void (**)(char *, uint64_t))(v137 + 8);
    uint64_t v123 = sub_24A5BBD20();
    uint64_t v70 = *(void *)(v123 - 8);
    uint64_t v137 = *(void *)(v70 + 64);
    long long v122 = (void (**)(char *, uint64_t))(v70 + 8);
    char v71 = (unsigned __int8 *)(v68 + 56);
    uint64_t v128 = v39;
    while (1)
    {
      uint64_t v146 = 0;
      uint64_t v139 = v67;
      unint64_t v73 = *((void *)v71 - 3);
      unint64_t v72 = *((void *)v71 - 2);
      uint64_t v74 = (char *)*((void *)v71 - 1);
      int v75 = *v71;
      unint64_t v153 = v73;
      unint64_t v154 = v72;
      uint64_t v140 = v74;
      uint64_t v155 = v74;
      LODWORD(v141) = v75;
      char v156 = v75;
      uint64_t v76 = MEMORY[0x270FA5388](v72);
      uint64_t v78 = (char *)&v121 - ((v77 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v79 = v76;
      swift_bridgeObjectRetain_n();
      sub_24A5BC3E0();
      uint64_t v80 = *(void *)(v69 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v78, 1, v69) == 1)
      {
        (*v122)(v78, v123);
        long long v157 = 0u;
        long long v158 = 0u;
        uint64_t v159 = 0;
      }
      else
      {
        *((void *)&v158 + 1) = v69;
        uint64_t v159 = (char *)v39;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v157);
        (*(void (**)(uint64_t *, char *, uint64_t))(v80 + 32))(boxed_opaque_existential_1, v78, v69);
      }
      unint64_t v82 = v144;
      __swift_instantiateConcreteTypeFromMangledName(&qword_26979AEE8);
      uint64_t v83 = v145;
      char v84 = swift_dynamicCast();
      uint64_t v85 = *v132;
      uint64_t v86 = v146;
      uint64_t v87 = v148;
      uint64_t v88 = v79;
      if ((v84 & 1) == 0)
      {
        v85(v83, 1, 1, a2);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v134 + 8))(v83, v135);
        *(void *)&long long v157 = v73;
        *((void *)&v157 + 1) = v79;
        *(void *)&long long v158 = v140;
        BYTE8(v158) = v141;
        unint64_t v153 = 0;
        unint64_t v154 = 0xE000000000000000;
        sub_24A5BC070();
        swift_bridgeObjectRelease();
        unint64_t v153 = 0xD00000000000001ELL;
        unint64_t v154 = 0x800000024A5C40B0;
        sub_24A5BC7E0();
        sub_24A5BB6F0();
        swift_bridgeObjectRelease();
        sub_24A5BC0E0();
        swift_allocError();
        sub_24A4AF61C();
        long long v99 = v147;
        a2 = (uint64_t)v163;
        sub_24A5BC0B0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_willThrow();
        (*(void (**)(char *, uint64_t))(v142 + 8))(v99, a2);
        goto LABEL_48;
      }
      v85(v83, 0, 1, a2);
      long long v89 = v143;
      (*v130)(v143, v83, a2);
      *(void *)&long long v157 = v73;
      *((void *)&v157 + 1) = v88;
      *(void *)&long long v158 = v140;
      BYTE8(v158) = v141;
      uint64_t v90 = v147;
      sub_24A5BC3F0();
      if (v86) {
        break;
      }
      swift_bridgeObjectRelease();
      uint64_t v91 = v89;
      uint64_t v92 = (uint64_t)v149;
      (*v127)(v149, v91, a2);
      uint64_t v93 = v150;
      (*v126)(v150, v82, v87);
      (*v125)(v93, 0, 1, v87);
      uint64_t v94 = (void *)type metadata accessor for TreeDictionary();
      TreeDictionary.subscript.setter(v93, v92, v94);
      (*v124)(v82, v87);
      uint64_t v69 = v136;
      (*v129)(v91, a2);
      v71 += 32;
      uint64_t v67 = v139 - 1;
      uint64_t v39 = v128;
      if (v139 == 1) {
        goto LABEL_33;
      }
    }
    (*v129)(v89, a2);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void))(v142 + 8))(v90, v163);
    a2 = v160;
    swift_bridgeObjectRelease();
    goto LABEL_48;
  }
LABEL_33:
  swift_bridgeObjectRelease();
  (*(void (**)(char *, void))(v142 + 8))(v147, v163);
LABEL_34:
  a2 = v160;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v133);
  return a2;
}

uint64_t sub_24A4AEF94@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = TreeDictionary<>.init(from:)(a1, a2[2], a2[3], *(void *)(a3 - 8), a2[4], *(void *)(a3 - 16));
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
    a4[2] = v8;
  }
  return result;
}

unsigned __int8 *sub_24A4AEFD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_24A5BB820();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = sub_24A49279C();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    uint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v7 = (unsigned __int8 *)sub_24A5BC120();
  }
LABEL_7:
  uint64_t v11 = sub_24A4AF0BC(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

unsigned __int8 *sub_24A4AF0BC(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            uint64_t v9 = 0;
            for (uint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8) {
                    return 0;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              uint64_t v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
                return 0;
              }
              uint64_t v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12))) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      unsigned __int8 v22 = a3 + 48;
      unsigned __int8 v23 = a3 + 55;
      unsigned __int8 v24 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v22 = 58;
      }
      else
      {
        unsigned __int8 v24 = 97;
        unsigned __int8 v23 = 65;
      }
      if (result)
      {
        uint64_t v25 = 0;
        do
        {
          unsigned int v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24) {
                return 0;
              }
              char v27 = -87;
            }
            else
            {
              char v27 = -55;
            }
          }
          else
          {
            char v27 = -48;
          }
          uint64_t v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63) {
            return 0;
          }
          uint64_t v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27))) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  uint64_t v14 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v15 = a3 + 48;
  unsigned __int8 v16 = a3 + 55;
  unsigned __int8 v17 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v15 = 58;
  }
  else
  {
    unsigned __int8 v17 = 97;
    unsigned __int8 v16 = 65;
  }
  if (!result) {
    return 0;
  }
  uint64_t v9 = 0;
  uint64_t v18 = result + 1;
  do
  {
    unsigned int v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17) {
          return 0;
        }
        char v20 = -87;
      }
      else
      {
        char v20 = -55;
      }
    }
    else
    {
      char v20 = -48;
    }
    uint64_t v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
      return 0;
    }
    uint64_t v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20))) {
      return 0;
    }
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t sub_24A4AF338(uint64_t result, unint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = HIBYTE(a2) & 0xF;
  uint64_t v5 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v6) {
    return v3;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    sub_24A4AEFD4(v3, a2, 10);
    swift_bridgeObjectRelease();
    return v3;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0) {
      unsigned __int8 v7 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      unsigned __int8 v7 = (unsigned __int8 *)sub_24A5BC120();
    }
    sub_24A4AF0BC(v7, v5, 10);
    return v3;
  }
  v23[0] = result;
  v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result == 43)
  {
    if (v4)
    {
      if (v4 != 1
        && (BYTE1(result) - 48) <= 9u
        && v4 != 2
        && (BYTE2(result) - 48) <= 9u)
      {
        uint64_t v8 = 10 * (BYTE1(result) - 48) + (BYTE2(result) - 48);
        uint64_t v9 = v4 - 3;
        if (v9)
        {
          unint64_t v10 = (unsigned __int8 *)v23 + 3;
          do
          {
            unsigned int v11 = *v10 - 48;
            if (v11 > 9) {
              break;
            }
            uint64_t v12 = 10 * v8;
            if ((unsigned __int128)(v8 * (__int128)10) >> 64 != (10 * v8) >> 63) {
              break;
            }
            uint64_t v8 = v12 + v11;
            if (__OFADD__(v12, v11)) {
              break;
            }
            ++v10;
            --v9;
          }
          while (v9);
        }
      }
      return v3;
    }
  }
  else
  {
    if (result != 45)
    {
      if (v4)
      {
        if ((result - 48) <= 9u && v4 != 1 && (BYTE1(result) - 48) <= 9u)
        {
          uint64_t v13 = 10 * (result - 48) + (BYTE1(result) - 48);
          uint64_t v14 = v4 - 2;
          if (v14)
          {
            unsigned __int8 v15 = (unsigned __int8 *)v23 + 2;
            do
            {
              unsigned int v16 = *v15 - 48;
              if (v16 > 9) {
                break;
              }
              uint64_t v17 = 10 * v13;
              if ((unsigned __int128)(v13 * (__int128)10) >> 64 != (10 * v13) >> 63) {
                break;
              }
              uint64_t v13 = v17 + v16;
              if (__OFADD__(v17, v16)) {
                break;
              }
              ++v15;
              --v14;
            }
            while (v14);
          }
        }
      }
      return v3;
    }
    if (v4)
    {
      if (v4 != 1
        && (BYTE1(result) - 48) <= 9u
        && v4 != 2
        && (BYTE2(result) - 48) <= 9u)
      {
        uint64_t v18 = -10 * (BYTE1(result) - 48) - (BYTE2(result) - 48);
        uint64_t v19 = v4 - 3;
        if (v19)
        {
          char v20 = (unsigned __int8 *)v23 + 3;
          do
          {
            unsigned int v21 = *v20 - 48;
            if (v21 > 9) {
              break;
            }
            uint64_t v22 = 10 * v18;
            if ((unsigned __int128)(v18 * (__int128)10) >> 64 != (10 * v18) >> 63) {
              break;
            }
            uint64_t v18 = v22 - v21;
            if (__OFSUB__(v22, v21)) {
              break;
            }
            ++v20;
            --v19;
          }
          while (v19);
        }
      }
      return v3;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_24A4AF61C()
{
  unint64_t result = qword_26979AEF0;
  if (!qword_26979AEF0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26979AEE0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979AEF0);
  }
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_24A4AF6DC()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 41, 7);
}

uint64_t sub_24A4AF714(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t initializeWithCopy for _DictionaryCodingKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _DictionaryCodingKey(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for _DictionaryCodingKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for _DictionaryCodingKey(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 25)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _DictionaryCodingKey(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _DictionaryCodingKey()
{
  return &type metadata for _DictionaryCodingKey;
}

unint64_t sub_24A4AF8C8()
{
  unint64_t result = qword_26979AF00;
  if (!qword_26979AF00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979AF00);
  }
  return result;
}

unint64_t sub_24A4AF920()
{
  unint64_t result = qword_26979AF08[0];
  if (!qword_26979AF08[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26979AF08);
  }
  return result;
}

uint64_t Deque._Storage._buffer.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*Deque._Storage._buffer.modify())()
{
  return nullsub_1;
}

uint64_t Deque._Storage.description.getter()
{
  return 0x3C6575716544;
}

uint64_t sub_24A4AFA90()
{
  return Deque._Storage.description.getter();
}

uint64_t Deque._Storage.init()()
{
  if (qword_26B177FD8 != -1) {
    swift_once();
  }
  swift_retain();
  return sub_24A5BC3A0();
}

uint64_t Deque._Storage.init(_:)()
{
  return sub_24A5BC3A0();
}

uint64_t Deque._Storage.init(minimumCapacity:)()
{
  type metadata accessor for _DequeBuffer();
  sub_24A5BC0F0();
  return sub_24A5BC3A0();
}

uint64_t Deque._Storage.capacity.getter(uint64_t a1, uint64_t a2)
{
  sub_24A4AFC5C((uint64_t)sub_24A498BC4, 0, a1, (uint64_t)&type metadata for _DequeBufferHeader, a2, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v3);
  return v4;
}

uint64_t sub_24A4AFC5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = v16(v15+ ((*(unsigned __int8 *)(*(void *)(v14 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v14 - 8) + 80)), v13);
  if (v9) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a9, v13, a6);
  }
  return result;
}

uint64_t Deque._Storage.count.getter(uint64_t a1, uint64_t a2)
{
  sub_24A4AFC5C((uint64_t)sub_24A4AFDD4, 0, a1, (uint64_t)&type metadata for _DequeBufferHeader, a2, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v3);
  return v4;
}

uint64_t sub_24A4AFDD4@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(result + 8);
  return result;
}

uint64_t Deque._Storage.startSlot.getter(uint64_t a1, uint64_t a2)
{
  sub_24A4AFC5C((uint64_t)sub_24A4AFE54, 0, a1, (uint64_t)&type metadata for _DequeBufferHeader, a2, MEMORY[0x263F8E628], (uint64_t)&type metadata for _DequeSlot, MEMORY[0x263F8E658], v3);
  return v4;
}

uint64_t sub_24A4AFE54@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(result + 16);
  return result;
}

uint64_t Deque._Storage.read<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_24A4B0044(a1, a2, a3, a4, a5, (uint64_t)sub_24A4B077C);
}

uint64_t sub_24A4AFE8C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  return sub_24A4B00E8(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_24A4AFEA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = *(void *)(a6 - 8);
  uint64_t result = MEMORY[0x270FA5388]();
  uint64_t v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(v18 - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = *(void *)(v19 + 64);
  BOOL v22 = __OFADD__(v20, v21);
  uint64_t v23 = v20 + v21;
  if (v22)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v24 = *(unsigned __int8 *)(*(void *)(v14 - 8) + 80) + 1;
  BOOL v25 = __CFADD__(v23, v24);
  uint64_t v26 = v23 + v24;
  if (v25)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t result = v15(v13 + v20, v13 + ((v26 - 1) & -v24), (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v9) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a9, v17, a6);
  }
  return result;
}

uint64_t Deque._Storage.update<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_24A4B0044(a1, a2, a3, a4, a5, (uint64_t)sub_24A4B077C);
}

uint64_t sub_24A4B0044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(qword_26979ABD8);
  return sub_24A4AFEA4(a6, (uint64_t)v12, a3, (uint64_t)&type metadata for _DequeBufferHeader, a4, v10, a5, MEMORY[0x263F8E4E0], (uint64_t)&v17);
}

uint64_t sub_24A4B00E8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t result = a3();
  if (v7) {
    *a7 = v7;
  }
  return result;
}

Swift::Bool __swiftcall Deque._Storage.isUnique()()
{
  sub_24A5BC3C0();
  return sub_24A5BC3B0();
}

Swift::Void __swiftcall Deque._Storage.ensureUnique()()
{
  sub_24A5BC3C0();
  if ((sub_24A5BC3B0() & 1) == 0)
  {
    Deque._Storage._makeUniqueCopy()();
  }
}

Swift::Void __swiftcall Deque._Storage._makeUniqueCopy()()
{
  uint64_t v2 = v0;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v12 = v4;
  uint64_t v7 = v4;
  uint64_t v8 = v0;
  uint64_t v9 = sub_24A4B08BC;
  uint64_t v10 = &v11;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(qword_26979ABD8);
  sub_24A4AFEA4((uint64_t)sub_24A4B077C, (uint64_t)v6, v3, (uint64_t)&type metadata for _DequeBufferHeader, v4, v5, v2, MEMORY[0x263F8E4E0], (uint64_t)v13);
  swift_release();
  *uint64_t v1 = v14;
}

double static Deque._Storage.growthFactor.getter()
{
  return 1.5;
}

Swift::Int __swiftcall Deque._Storage._growCapacity(to:linearly:)(Swift::Int to, Swift::Bool linearly)
{
  if (linearly)
  {
    sub_24A4AFC5C((uint64_t)sub_24A498BC4, 0, v2, (uint64_t)&type metadata for _DequeBufferHeader, v3, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v8);
    uint64_t v5 = v9;
    goto LABEL_7;
  }
  Swift::Int result = sub_24A4AFC5C((uint64_t)sub_24A498BC4, 0, v2, (uint64_t)&type metadata for _DequeBufferHeader, v3, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v8);
  double v7 = ceil((double)v9 * 1.5);
  if ((~*(void *)&v7 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v7 <= -9.22337204e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v7 >= 9.22337204e18)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  uint64_t v5 = (uint64_t)v7;
LABEL_7:
  if (v5 <= to) {
    return to;
  }
  else {
    return v5;
  }
}

Swift::Void __swiftcall Deque._Storage.ensureUnique(minimumCapacity:linearGrowth:)(Swift::Int minimumCapacity, Swift::Bool linearGrowth)
{
  uint64_t v6 = *(void *)(v2 + 16);
  sub_24A5BC3C0();
  char v7 = sub_24A5BC3B0();
  sub_24A4AFC5C((uint64_t)sub_24A498BC4, 0, *v3, (uint64_t)&type metadata for _DequeBufferHeader, v6, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v8);
  if (v9 < minimumCapacity || (v7 & 1) == 0) {
    Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(minimumCapacity, linearGrowth);
  }
}

Swift::Void __swiftcall Deque._Storage._ensureUnique(minimumCapacity:linearGrowth:)(Swift::Int minimumCapacity, Swift::Bool linearGrowth)
{
  uint64_t v4 = v2;
  uint64_t v7 = *v3;
  uint64_t v8 = *(void *)(v2 + 16);
  uint64_t v9 = sub_24A4AFC5C((uint64_t)sub_24A498BC4, 0, *v3, (uint64_t)&type metadata for _DequeBufferHeader, v8, MEMORY[0x263F8E628], MEMORY[0x263F8D6C8], MEMORY[0x263F8E658], v25);
  if (v28 >= minimumCapacity)
  {
    uint64_t v15 = MEMORY[0x270FA5388](v9);
    uint64_t v25 = v8;
    MEMORY[0x270FA5388](v15);
    uint64_t v21 = v8;
    uint64_t v22 = v4;
    uint64_t v23 = sub_24A4B07CC;
    uint64_t v24 = v16;
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(qword_26979ABD8);
    sub_24A4AFEA4((uint64_t)sub_24A4B077C, (uint64_t)v20, v7, (uint64_t)&type metadata for _DequeBufferHeader, v8, v17, v4, MEMORY[0x263F8E4E0], (uint64_t)v27);
  }
  else
  {
    sub_24A5BC3C0();
    char v10 = sub_24A5BC3B0();
    uint64_t v11 = *v3;
    Swift::Int v12 = Deque._Storage._growCapacity(to:linearly:)(minimumCapacity, linearGrowth);
    uint64_t v25 = v8;
    uint64_t v26 = MEMORY[0x270FA5388](v12);
    MEMORY[0x270FA5388](v26);
    uint64_t v21 = v8;
    uint64_t v22 = v4;
    if (v10)
    {
      uint64_t v23 = sub_24A4B082C;
      uint64_t v24 = v13;
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(qword_26979ABD8);
      sub_24A4AFEA4((uint64_t)sub_24A4B077C, (uint64_t)v20, v11, (uint64_t)&type metadata for _DequeBufferHeader, v8, v14, v4, MEMORY[0x263F8E4E0], (uint64_t)v27);
    }
    else
    {
      uint64_t v23 = sub_24A4B0800;
      uint64_t v24 = v13;
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(qword_26979ABD8);
      sub_24A4AFEA4((uint64_t)sub_24A4B077C, (uint64_t)v20, v11, (uint64_t)&type metadata for _DequeBufferHeader, v8, v18, v4, MEMORY[0x263F8E4E0], (uint64_t)v27);
    }
  }
  Swift::Int v19 = v28;
  swift_release();
  *uint64_t v3 = v19;
}

uint64_t sub_24A4B073C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_24A5BC100();
  a1[1] = 0;
  a1[2] = 0;
  *a1 = result;
  return result;
}

uint64_t sub_24A4B077C(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_24A4B0794(a1, a2, a3);
}

uint64_t sub_24A4B0794(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result = (*(uint64_t (**)(void))(v3 + 32))();
  if (v4) {
    *a3 = v4;
  }
  return result;
}

uint64_t sub_24A4B07CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = Deque._UnsafeHandle.copyElements()(a1, a2, *(void *)(v3 + 16));
  *a3 = result;
  return result;
}

uint64_t sub_24A4B0800@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_24A4B0858(a1, a2, Deque._UnsafeHandle.copyElements(minimumCapacity:), a3);
}

uint64_t sub_24A4B082C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_24A4B0858(a1, a2, Deque._UnsafeHandle.moveElements(minimumCapacity:), a3);
}

uint64_t sub_24A4B0858@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void, uint64_t, uint64_t, void)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = a3(*(void *)(v4 + 24), a1, a2, *(void *)(v4 + 16));
  *a4 = result;
  return result;
}

uint64_t sub_24A4B089C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 16);
}

uint64_t type metadata accessor for Deque._Storage()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_24A4B08BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_24A4B07CC(a1, a2, a3);
}

uint64_t OrderedSet.subtracting(_:)()
{
  return OrderedSet._subtracting<A>(_:)();
}

{
  type metadata accessor for OrderedSet();
  swift_getWitnessTable();
  return OrderedSet._subtracting<A>(_:)();
}

uint64_t OrderedSet._subtracting<A>(_:)()
{
  if (_s19CollectionsInternal4HeapV5countSivg_0() < 1)
  {
    uint64_t v3 = OrderedSet.init()();
    swift_release();
    swift_release();
    return v3;
  }
  else
  {
    uint64_t v0 = _s19CollectionsInternal4HeapV5countSivg_0();
    uint64_t v1 = MEMORY[0x270FA5388](v0);
    if (v1 < 0)
    {
      __break(1u);
    }
    else
    {
      unint64_t v2 = (unint64_t)(v1 + 63) >> 6;
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      MEMORY[0x270FA5388](v1);
      type metadata accessor for OrderedSet();
      sub_24A580E98(v2, (void (*)(char **))sub_24A4B1054);
    }
    __break(1u);
    uint64_t result = sub_24A4B1074(v5, v6);
    __break(1u);
  }
  return result;
}

Swift::UInt sub_24A4B0B9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char *a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v51 = a9;
  uint64_t v59 = a7;
  uint64_t v54 = a4;
  uint64_t v58 = a2;
  uint64_t v50 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_24A5BBD20();
  uint64_t v17 = MEMORY[0x270FA5388](v16 - 8);
  Swift::Int v19 = (char *)&v48 - v18;
  uint64_t v20 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v22 = (char *)&v48 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = a6;
  uint64_t v56 = a8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v49 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v25 = (char *)&v48 - v24;
  Swift::UInt result = _s19CollectionsInternal4HeapV5countSivg_0();
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    return result;
  }
  uint64_t v53 = a1;
  _UnsafeBitSet.insertAll(upTo:)(result);
  uint64_t v57 = a3;
  uint64_t v52 = _s19CollectionsInternal4HeapV5countSivg_0();
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, v54, v55);
  sub_24A5BB840();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v55 = AssociatedTypeWitness;
  uint64_t v56 = v25;
  uint64_t v54 = AssociatedConformanceWitness;
  sub_24A5BBEE0();
  uint64_t v28 = v50;
  uint64_t v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48);
  if (v29(v19, 1, a5) == 1)
  {
LABEL_3:
    (*(void (**)(char *, uint64_t))(v49 + 8))(v56, v55);
    uint64_t v30 = *(int8x8_t **)v53;
    uint64_t v31 = *(void *)(v53 + 8);
    Swift::Int v32 = sub_24A48AB90();
    uint64_t v33 = v58;
    swift_retain();
    uint64_t v34 = v57;
    swift_retain();
    Swift::UInt result = OrderedSet._extractSubset(using:count:extraCapacity:)(v30, v31, v52, 0, v32, v33, v34, a5);
    uint64_t v35 = result;
    uint64_t v37 = v36;
    goto LABEL_4;
  }
  uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v28 + 32);
  uint64_t v40 = (void (**)(char *, uint64_t))(v28 + 8);
  unint64_t v41 = v56;
  v39(v15, v19, a5);
  while (1)
  {
    unint64_t v42 = OrderedSet._find(_:)();
    if ((v43 & 1) == 0 && (v42 & 0x8000000000000000) == 0 && (int64_t)(v42 >> 6) < *(void *)(v53 + 8))
    {
      uint64_t v44 = 8 * (v42 >> 6);
      uint64_t v45 = *(void *)(*(void *)v53 + v44);
      *(void *)(*(void *)v53 + v44) = v45 & ~(1 << v42);
      if ((v45 & (1 << v42)) != 0) {
        break;
      }
    }
LABEL_6:
    (*v40)(v15, a5);
    sub_24A5BBEE0();
    if (v29(v19, 1, a5) == 1) {
      goto LABEL_3;
    }
    v39(v15, v19, a5);
  }
  if (v52 != 1)
  {
    --v52;
    goto LABEL_6;
  }
  uint64_t v46 = v41;
  uint64_t v35 = OrderedSet.init()();
  uint64_t v37 = v47;
  (*v40)(v15, a5);
  Swift::UInt result = (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v46, v55);
LABEL_4:
  uint64_t v38 = v51;
  *uint64_t v51 = v35;
  v38[1] = v37;
  return result;
}

Swift::UInt sub_24A4B102C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_24A4B0B9C(a1, *(void *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(char **)(v2 + 40), a2);
}

uint64_t sub_24A4B1054(uint64_t a1)
{
  return sub_24A58078C(a1, *(void *)(v1 + 24), *(uint64_t (**)(uint64_t))(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 16));
}

uint64_t sub_24A4B1074(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t TreeSet._root.getter()
{
  return swift_retain();
}

uint64_t TreeSet._root.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_release();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*TreeSet._root.modify())()
{
  return nullsub_1;
}

uint64_t TreeSet._version.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t TreeSet._version.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t (*TreeSet._version.modify())()
{
  return nullsub_1;
}

uint64_t TreeSet.init(_new:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1;
}

uint64_t sub_24A4B11B0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t destroy for _RawHashNode()
{
  return swift_release();
}

void *sub_24A4B11F0(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t sub_24A4B125C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

uint64_t _s14descr26FE1D5A1V8IteratorVwet(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s14descr26FE1D5A1V8IteratorVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for TreeSet()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t TreeSet.filter(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v40 = a3;
  v35[1] = a5;
  uint64_t v47 = a4;
  uint64_t v39 = a2;
  uint64_t v10 = MEMORY[0x263F8EE60] + 8;
  uint64_t v11 = type metadata accessor for _HashNode.Builder();
  uint64_t v36 = *(void *)(v11 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)v35 - v15;
  uint64_t v17 = sub_24A5BBD20();
  uint64_t v37 = *(void *)(v17 - 8);
  uint64_t v38 = v17;
  uint64_t v18 = MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)v35 - v21;
  uint64_t v43 = a6;
  uint64_t v44 = a7;
  uint64_t v45 = a1;
  uint64_t v23 = v40;
  uint64_t v46 = v39;
  uint64_t v24 = v41;
  _HashNode.filter(_:_:)(0, (uint64_t (*)(char *, char *))sub_24A4B188C, (uint64_t)v42, v40, v47, a6, v10, a7, (uint64_t)v35 - v21);
  if (!v24)
  {
    uint64_t v41 = a6;
    (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v20, v22, v38);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v20, 1, v11) == 1)
    {
      uint64_t v25 = *(void (**)(char *, uint64_t))(v37 + 8);
      uint64_t v26 = v22;
      uint64_t v27 = v38;
      v25(v26, v38);
      v25(v20, v27);
      swift_retain();
    }
    else
    {
      uint64_t v28 = v36;
      uint64_t v29 = v16;
      (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v16, v20, v11);
      (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v14, v16, v11);
      uint64_t v30 = sub_24A5566C8(v11);
      uint64_t v32 = v31;
      (*(void (**)(char *, uint64_t))(v28 + 8))(v29, v11);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v22, v38);
      uint64_t v23 = TreeSet.init(_new:)(v30, v32, v41, a7);
      uint64_t v47 = v33;
    }
  }
  return v23;
}

uint64_t sub_24A4B1680(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *), uint64_t a4, uint64_t a5)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v11 = (char *)&v14 - v10;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))((char *)&v14 - v10, a1, a5);
  char v12 = a3(v11);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, TupleTypeMetadata2);
  return v12 & 1;
}

uint64_t TreeSet.removeAll(where:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *v3;
  uint64_t v6 = v3[1];
  uint64_t v7 = v3[2];
  uint64_t v8 = *(void *)(a3 + 24);
  uint64_t v17 = *(void *)(a3 + 16);
  uint64_t v18 = v8;
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  swift_retain();
  uint64_t v9 = TreeSet.filter(_:)((uint64_t)sub_24A4B18B0, (uint64_t)&v16, v5, v6, v7, v17, v8);
  if (v4) {
    return swift_release();
  }
  uint64_t v13 = v9;
  uint64_t v14 = v10;
  uint64_t v15 = v11;
  swift_release();
  uint64_t result = swift_release();
  *uint64_t v3 = v13;
  v3[1] = v14;
  v3[2] = v15;
  return result;
}

uint64_t sub_24A4B188C(uint64_t a1, uint64_t a2)
{
  return sub_24A4B1680(a1, a2, *(uint64_t (**)(char *))(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 16)) & 1;
}

BOOL sub_24A4B18B0()
{
  return ((*(uint64_t (**)(void))(v0 + 32))() & 1) == 0;
}

uint64_t sub_24A4B18E0(unint64_t a1, unint64_t a2, uint64_t a3)
{
  sub_24A5BC070();
  swift_bridgeObjectRelease();
  sub_24A5BC430();
  sub_24A5BB6F0();
  swift_bridgeObjectRelease();
  sub_24A5BB6F0();
  sub_24A5BC430();
  sub_24A5BB6F0();
  swift_bridgeObjectRelease();
  sub_24A5BB6F0();
  sub_24A5BC430();
  sub_24A5BB6F0();
  swift_bridgeObjectRelease();
  sub_24A5BB6F0();
  sub_24A5BC430();
  sub_24A5BB6F0();
  swift_bridgeObjectRelease();
  sub_24A5BB6F0();
  uint64_t result = sub_24A5BB660();
  if (result > 16) {
    goto LABEL_4;
  }
  if (!__OFSUB__(17, result))
  {
    MEMORY[0x24C5C6B00](32, 0xE100000000000000, 17 - result);
    swift_bridgeObjectRetain();
    sub_24A5BB6F0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_4:
    sub_24A4B1B84(0xAuLL, a1, a2, ((unint64_t)BYTE2(a3) << 16) | ((unint64_t)BYTE1(a3) << 8) | ((unint64_t)BYTE3(a3) << 24) | a3 & 0xFFFF000000FFLL);
    sub_24A4B20D8();
    sub_24A5BB6F0();
    swift_bridgeObjectRelease();
    sub_24A5BB6F0();
    swift_bridgeObjectRelease();
    sub_24A5BB6F0();
    sub_24A5BB6F0();
    swift_bridgeObjectRelease();
    sub_24A5BB6F0();
    return 0x286B6E756843;
  }
  __break(1u);
  return result;
}

uint64_t sub_24A4B1B84(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_24A5BC780();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = BYTE4(a4);
  uint64_t v12 = sub_24A5BC430();
  unint64_t v14 = v13;
  uint64_t result = sub_24A5BB660();
  uint64_t v61 = v9;
  uint64_t v62 = v8;
  unint64_t v63 = a1;
  if (result <= 2)
  {
    if (__OFSUB__(3, result))
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    uint64_t v66 = MEMORY[0x24C5C6B00](32, 0xE100000000000000, 3 - result);
    unint64_t v67 = v16;
    swift_bridgeObjectRetain();
    sub_24A5BB6F0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v12 = v66;
    unint64_t v14 = v67;
  }
  uint64_t v66 = BYTE5(a4);
  sub_24A5BC430();
  uint64_t v18 = v17;
  unint64_t v19 = sub_24A506624(a2, a3, a4 & 0xFFFFFFFFFFFFLL);
  uint64_t v20 = MEMORY[0x24C5C68C0](v19);
  unint64_t v22 = v21;
  swift_bridgeObjectRelease();
  if ((v22 & 0x2000000000000000) != 0) {
    uint64_t v23 = HIBYTE(v22) & 0xF;
  }
  else {
    uint64_t v23 = v20 & 0xFFFFFFFFFFFFLL;
  }
  if (!v23)
  {
    swift_bridgeObjectRelease();
    uint64_t v66 = v12;
    unint64_t v67 = v14;
    sub_24A5BB6F0();
    sub_24A5BB6F0();
    swift_bridgeObjectRelease();
    return v66;
  }
  uint64_t v60 = v18;
  uint64_t v66 = v12;
  unint64_t v67 = v14;
  sub_24A5BB6F0();
  unint64_t v24 = v66;
  unint64_t v25 = v67;
  swift_bridgeObjectRetain();
  sub_24A5BC770();
  unint64_t v64 = v24;
  unint64_t v65 = v25;
  swift_bridgeObjectRetain();
  unint64_t v26 = sub_24A5BBED0();
  sub_24A58B060(v26, v27, v28, v29);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v30 = v63;
  uint64_t result = sub_24A515C68(v20, v22, (uint64_t)v11, v63);
  if (__OFSUB__(0, v30))
  {
    __break(1u);
    goto LABEL_27;
  }
  unint64_t v31 = result;
  unint64_t v32 = 15;
  uint64_t v33 = sub_24A5BB690();
  if ((v34 & 1) == 0) {
    unint64_t v32 = v33;
  }
  unint64_t v35 = v31 >> 14;
  if (v31 >> 14 < v32 >> 14)
  {
    sub_24A5165E0(0x2E2E2EuLL, 0xE300000000000000);
    uint64_t v36 = (uint64_t (*)(void))MEMORY[0x263F8D3A0];
    unint64_t v37 = v32;
LABEL_19:
    unint64_t v39 = sub_24A494BAC(v37, v20, v22, v36);
    uint64_t v41 = v40;
    uint64_t v43 = v42;
    uint64_t v45 = v44;
    swift_bridgeObjectRelease();
    unint64_t v46 = MEMORY[0x24C5C68C0](v39, v41, v43, v45);
    unint64_t v48 = v47;
    swift_bridgeObjectRelease();
    sub_24A515C68(v46, v48, (uint64_t)v11, 0x7FFFFFFFFFFFFFFFuLL);
    goto LABEL_20;
  }
  unint64_t v38 = 4 * v23;
  if (v35 >= v38)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    unint64_t v64 = 11554;
    unint64_t v65 = 0xE200000000000000;
    sub_24A5BB6F0();
    swift_bridgeObjectRelease();
    sub_24A5165E0(v64, v65);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v61 + 8))(v11, v62);
    return v66;
  }
  if (v35 == (unint64_t)MEMORY[0x24C5C69D0](v31, v20, v22) >> 14)
  {
    uint64_t v36 = (uint64_t (*)(void))MEMORY[0x263F8D3A0];
    unint64_t v37 = v31;
    goto LABEL_19;
  }
  if (v38 > (unint64_t)sub_24A5BB670() >> 14)
  {
    sub_24A5165E0(0x2E2E2EuLL, 0xE300000000000000);
    unint64_t v37 = sub_24A5BB670();
    uint64_t v36 = (uint64_t (*)(void))MEMORY[0x263F8D3A0];
    goto LABEL_19;
  }
  unint64_t v49 = sub_24A494BAC(v31, v20, v22, MEMORY[0x263F8D3A0]);
  unint64_t v51 = v50;
  unint64_t v53 = v52;
  unint64_t v55 = v54;
  swift_bridgeObjectRelease();
  uint64_t result = sub_24A4B2248(v51, -3, v49, v53, v55);
  if (v56) {
    uint64_t result = v49;
  }
  if (v51 >> 14 >= (unint64_t)result >> 14)
  {
    sub_24A5BBE10();
    swift_bridgeObjectRelease();
    unint64_t v57 = sub_24A5BB800();
    unint64_t v59 = v58;
    sub_24A5165E0(0x2E2E2EuLL, 0xE300000000000000);
    sub_24A515C68(v57, v59, (uint64_t)v11, 0x7FFFFFFFFFFFFFFFuLL);
    goto LABEL_20;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_24A4B20D8()
{
  sub_24A4B21F4();
  sub_24A5BB7F0();
  uint64_t result = sub_24A5BB660();
  if (result > 16) {
    goto LABEL_4;
  }
  if (!__OFSUB__(17, result))
  {
    MEMORY[0x24C5C6B00](32, 0xE100000000000000, 17 - result);
    swift_bridgeObjectRetain();
    sub_24A5BB6F0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_4:
    sub_24A5BB6F0();
    swift_bridgeObjectRelease();
    return 64;
  }
  __break(1u);
  return result;
}

unint64_t sub_24A4B21C0(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_24A494BAC(a1, a2, a3, MEMORY[0x263F8D2A0]);
}

uint64_t sub_24A4B21D8()
{
  return sub_24A4B18E0(*(void *)v0, *(void *)(v0 + 8), *(unsigned int *)(v0 + 16) | ((unint64_t)*(unsigned __int8 *)(v0 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 21) << 40));
}

unint64_t sub_24A4B21F4()
{
  unint64_t result = qword_26979B010;
  if (!qword_26979B010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979B010);
  }
  return result;
}

unint64_t sub_24A4B2248(unint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t v7 = a3;
  uint64_t v10 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0) {
    LOBYTE(v10) = 1;
  }
  uint64_t v11 = 4 << v10;
  if ((a3 & 0xC) == 4 << v10) {
LABEL_55:
  }
    unint64_t v7 = sub_24A4DFD84(v7, a4, a5);
  unint64_t v12 = a1;
  if ((a1 & 0xC) == v11) {
    unint64_t v12 = sub_24A4DFD84(a1, a4, a5);
  }
  unint64_t result = sub_24A497020(a1, a4, a5);
  v7 >>= 14;
  if (a2 < 0)
  {
    uint64_t v11 = 0;
    a1 = v12 >> 14;
    uint64_t v20 = (char *)&v28 + 6;
    while (a1 < v7 || v7 < result >> 14)
    {
      if (result < 0x10000)
      {
LABEL_54:
        __break(1u);
        goto LABEL_55;
      }
      if ((a5 & 0x1000000000000000) != 0)
      {
        unint64_t v27 = v20;
        unint64_t result = sub_24A5BB5E0();
        uint64_t v20 = v27;
      }
      else
      {
        unint64_t v21 = result >> 16;
        if ((a5 & 0x2000000000000000) != 0)
        {
          unint64_t v29 = a4;
          uint64_t v30 = a5 & 0xFFFFFFFFFFFFFFLL;
          if ((*((unsigned char *)&v29 + v21 - 1) & 0xC0) == 0x80)
          {
            uint64_t v24 = 0;
            do
              int v25 = v20[v21 + v24--] & 0xC0;
            while (v25 == 128);
            uint64_t v26 = 1 - v24;
          }
          else
          {
            uint64_t v26 = 1;
          }
          v21 -= v26;
        }
        else
        {
          uint64_t v22 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a4 & 0x1000000000000000) == 0)
          {
            unint64_t v28 = v20;
            uint64_t v22 = sub_24A5BC120();
            uint64_t v20 = v28;
          }
          do
            int v23 = *(unsigned char *)(v22 - 1 + v21--) & 0xC0;
          while (v23 == 128);
        }
        unint64_t result = (v21 << 16) | 5;
      }
      if (--v11 <= a2)
      {
        if (a1 < v7 || result >> 14 >= v7) {
          return result;
        }
        return 0;
      }
    }
    return 0;
  }
  a1 = v12 >> 14;
  if (a2)
  {
    if ((a5 & 0x2000000000000000) != 0) {
      unint64_t v14 = HIBYTE(a5) & 0xF;
    }
    else {
      unint64_t v14 = a4 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v11 = a5 & 0xFFFFFFFFFFFFFFLL;
    while (v7 < a1 || result >> 14 < v7)
    {
      unint64_t v15 = result >> 16;
      if (result >> 16 >= v14)
      {
        __break(1u);
        goto LABEL_54;
      }
      if ((a5 & 0x1000000000000000) != 0)
      {
        unint64_t result = sub_24A5BB5D0();
        if (!--a2) {
          goto LABEL_26;
        }
      }
      else
      {
        if ((a5 & 0x2000000000000000) != 0)
        {
          unint64_t v29 = a4;
          uint64_t v30 = a5 & 0xFFFFFFFFFFFFFFLL;
          int v17 = *((unsigned __int8 *)&v29 + v15);
        }
        else
        {
          uint64_t v16 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a4 & 0x1000000000000000) == 0) {
            uint64_t v16 = sub_24A5BC120();
          }
          int v17 = *(unsigned __int8 *)(v16 + v15);
        }
        int v18 = (char)v17;
        unsigned int v19 = __clz(v17 ^ 0xFF) - 24;
        if (v18 >= 0) {
          LOBYTE(v19) = 1;
        }
        unint64_t result = ((v15 + v19) << 16) | 5;
        if (!--a2) {
          goto LABEL_26;
        }
      }
    }
    return 0;
  }
LABEL_26:
  if (v7 >= a1 && v7 < result >> 14) {
    return 0;
  }
  return result;
}

uint64_t sub_24A4B2530(_OWORD *a1, long long *a2)
{
  long long v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  long long v3 = *a2;
  long long v4 = a2[1];
  v7[2] = a1[2];
  v8[0] = v3;
  long long v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return _s19CollectionsInternal9BigStringV1loiySbAC_ACtFZ_0((uint64_t)v7, (uint64_t)v8) & 1;
}

BOOL sub_24A4B2578(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  v6[0] = *a1;
  v6[1] = v2;
  _OWORD v6[2] = a1[2];
  long long v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  v5[2] = a2[2];
  return (_s19CollectionsInternal9BigStringV1loiySbAC_ACtFZ_0((uint64_t)v5, (uint64_t)v6) & 1) == 0;
}

BOOL sub_24A4B25C8(_OWORD *a1, long long *a2)
{
  long long v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  long long v3 = *a2;
  long long v4 = a2[1];
  v7[2] = a1[2];
  v8[0] = v3;
  long long v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return (_s19CollectionsInternal9BigStringV1loiySbAC_ACtFZ_0((uint64_t)v7, (uint64_t)v8) & 1) == 0;
}

uint64_t sub_24A4B2614(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  v6[0] = *a1;
  v6[1] = v2;
  _OWORD v6[2] = a1[2];
  long long v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  v5[2] = a2[2];
  return _s19CollectionsInternal9BigStringV1loiySbAC_ACtFZ_0((uint64_t)v5, (uint64_t)v6) & 1;
}

uint64_t _s19CollectionsInternal9BigStringV1loiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a1 + 16);
  v27[0] = *(_OWORD *)a1;
  v27[1] = v4;
  v27[2] = *(_OWORD *)(a1 + 32);
  long long v5 = *(_OWORD *)(a2 + 16);
  v25[0] = *(_OWORD *)a2;
  v25[1] = v5;
  v25[2] = *(_OWORD *)(a2 + 32);
  sub_24A497498(a1);
  sub_24A497498(a2);
  BOOL v6 = sub_24A495D7C((uint64_t)v25);
  sub_24A496BE8(a2);
  sub_24A496BE8(a1);
  if (v6)
  {
LABEL_24:
    char v17 = 0;
    return v17 & 1;
  }
  sub_24A4974C4((uint64_t)v25, (uint64_t)v26);
  sub_24A4974C4((uint64_t)v27, (uint64_t)v28);
  sub_24A497498((uint64_t)v28);
  sub_24A561324((__n128 *)a1, v22);
  sub_24A497498((uint64_t)v26);
  sub_24A561324((__n128 *)a2, v19);
  while ((v24 ^ v23) < 0x4000)
  {
    uint64_t v7 = 0;
    unint64_t v8 = v20;
    unint64_t v9 = v21;
    if ((v21 ^ v20) < 0x4000) {
      goto LABEL_19;
    }
    uint64_t v10 = 0;
LABEL_11:
    __n128 v29 = v19[0];
    __n128 v30 = v19[1];
    __n128 v31 = v19[2];
    __n128 v32 = v19[3];
    __n128 v33 = v19[4];
    unint64_t v34 = v8;
    unint64_t v35 = v9;
    sub_24A495168();
    uint64_t v14 = v13;
    uint64_t v16 = v15;
    if ((sub_24A495704(v13, v15) & 1) == 0) {
      unint64_t v20 = v21;
    }
    if (!v7)
    {
      uint64_t v7 = v16;
      goto LABEL_19;
    }
    if (!v16) {
      goto LABEL_23;
    }
    if ((v10 != v14 || v7 != v16) && (sub_24A5BC510() & 1) == 0)
    {
      char v17 = sub_24A5BC510();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return v17 & 1;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  __n128 v36 = v22[0];
  __n128 v37 = v22[1];
  __n128 v38 = v22[2];
  __n128 v39 = v22[3];
  __n128 v40 = v22[4];
  unint64_t v41 = v23;
  unint64_t v42 = v24;
  sub_24A495168();
  uint64_t v10 = v11;
  uint64_t v7 = v12;
  if ((sub_24A495704(v11, v12) & 1) == 0) {
    unint64_t v23 = v24;
  }
  unint64_t v8 = v20;
  unint64_t v9 = v21;
  if ((v21 ^ v20) >= 0x4000) {
    goto LABEL_11;
  }
  if (v7)
  {
LABEL_23:
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    goto LABEL_24;
  }
LABEL_19:
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if (!v7) {
    goto LABEL_24;
  }
  swift_bridgeObjectRelease();
  char v17 = 1;
  return v17 & 1;
}

unint64_t sub_24A4B28C4()
{
  unint64_t result = qword_26979B018;
  if (!qword_26979B018)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979B018);
  }
  return result;
}

BOOL TreeSet.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = sub_24A5B85E4();
  uint64_t v12 = MEMORY[0x263F8EE60] + 8;
  return _HashNode.containsKey(_:_:_:)(0, a1, v11, a2, a3, a5, v12, a6);
}

uint64_t TreeSet.insert(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a3 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v10 = (char *)&v24 - v9;
  uint64_t v11 = *(void *)(a3 + 24);
  unint64_t v12 = sub_24A5B85E4();
  uint64_t v13 = MEMORY[0x263F8EE60] + 8;
  uint64_t v14 = (void *)type metadata accessor for _HashNode();
  if (_HashNode.insert(_:_:_:)(0, a2, v15, v12, v14))
  {
    ++*(void *)(v3 + 16);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    return 1;
  }
  else
  {
    uint64_t v19 = v17;
    uint64_t v20 = nullsub_1(v16 + 16, v16 + 32, v7, v13, v11);
    sub_24A4B2B94(v20, v21, v19, v7, v11, v10);
    uint64_t v22 = *(void *)(v7 - 8);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(a2, v7);
    uint64_t v18 = *v10;
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v22 + 32))(a1, &v10[*(int *)(TupleTypeMetadata2 + 48)], v7);
  }
  return v18;
}

uint64_t sub_24A4B2B94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, unsigned char *a6@<X8>)
{
  unint64_t v12 = &a6[*(int *)(swift_getTupleTypeMetadata2() + 48)];
  *a6 = 0;
  uint64_t v13 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(a3, a1, a2, a4, MEMORY[0x263F8EE60] + 8, a5);
  return (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(v12, v13, a4);
}

uint64_t TreeSet._insert(_:)(uint64_t a1, uint64_t a2)
{
  char v4 = sub_24A4B37BC(a1);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))(a1);
  return v4 & 1;
}

uint64_t TreeSet.remove(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v36 = a3;
  uint64_t v4 = *(void *)(a2 + 16);
  swift_getTupleTypeMetadata2();
  uint64_t v35 = sub_24A5BBD20();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v6 = sub_24A5BBD20();
  uint64_t v33 = *(void *)(v6 - 8);
  uint64_t v34 = v6;
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v30 - v8;
  uint64_t v10 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v7);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v30 - v14;
  uint64_t v16 = sub_24A5B85E4();
  uint64_t v17 = (void *)type metadata accessor for _HashNode();
  _HashNode.remove(_:_:_:)(0, a1, v16, v17, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, TupleTypeMetadata2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v33 + 8))(v9, v34);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v36, 1, 1, v4);
  }
  else
  {
    uint64_t v19 = *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v34 = v10;
    uint64_t v20 = &v15[v19];
    uint64_t v21 = &v9[v19];
    uint64_t v31 = *(void *)(v4 - 8);
    uint64_t v22 = v31;
    __n128 v32 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
    uint64_t v33 = v31 + 32;
    v32(v15, v9, v4);
    uint64_t v23 = v35;
    uint64_t v24 = *(void *)(v35 - 8);
    __n128 v30 = *(void (**)(char *, char *, uint64_t))(v24 + 32);
    v30(v20, v21, v35);
    ++*(void *)(v37 + 16);
    int v25 = &v13[*(int *)(TupleTypeMetadata2 + 48)];
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v13, v15, v4);
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v25, v20, v23);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v13, TupleTypeMetadata2);
    uint64_t v26 = &v13[*(int *)(TupleTypeMetadata2 + 48)];
    unint64_t v27 = v15;
    unint64_t v28 = (void (*)(uint64_t, char *, uint64_t))v32;
    v32(v13, v27, v4);
    v30(v26, v20, v23);
    uint64_t v29 = v36;
    v28(v36, v13, v4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v31 + 56))(v29, 0, 1, v4);
    return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v26, v23);
  }
}

uint64_t TreeSet.update(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v7 = sub_24A5B85E4();
  _OWORD v17[2] = v5;
  v17[3] = v6;
  v17[4] = a1;
  uint64_t v8 = MEMORY[0x263F8EE60] + 8;
  uint64_t v9 = (void *)type metadata accessor for _HashNode();
  if (_HashNode.updateValue(_:forKey:_:_:)(0, a1, v7, sub_24A4B383C, (uint64_t)v17, v9))
  {
    uint64_t v12 = *(void *)(v5 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a3, 1, 1, v5);
  }
  else
  {
    unsigned int v13 = v11;
    uint64_t v14 = nullsub_1(v10 + 16, v10 + 32, v5, v8, v6);
    sub_24A4B3360(v14, v15, v13, a1, v5, a3);
    uint64_t v12 = *(void *)(v5 - 8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(a1, v5);
}

uint64_t sub_24A4B327C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v8 = (char *)&v10 - v7;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))((char *)&v10 - v7, a2, a3);
  return sub_24A544CAC((uint64_t)v8, a1, TupleTypeMetadata2);
}

uint64_t sub_24A4B3360@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v18 = a4;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  unsigned int v13 = (char *)&v17 - v12;
  uint64_t v14 = _HashNode.UnsafeHandle.itemPtr(at:)(a3, a1, a2);
  sub_24A5BBD10();
  uint64_t v15 = *(void *)(a5 - 8);
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a6, v13, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v13, v18, a5);
  sub_24A544CAC((uint64_t)v13, v14, TupleTypeMetadata2);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(a6, 0, 1, a5);
}

uint64_t sub_24A4B34F8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = TreeSet.init()(*(void *)(a1 + 16), *(void *)(a1 + 24));
  *a2 = result;
  a2[1] = v4;
  a2[2] = v5;
  return result;
}

BOOL sub_24A4B352C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return TreeSet.contains(_:)(a1, *v4, v4[1], a4, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t sub_24A4B353C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_24A4B35E4(a1, a2, TreeSet.union(_:), a3);
}

uint64_t sub_24A4B3554@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = TreeSet._intersection<A>(_:)(*(void *)a1, *(char **)(a1 + 8), *v3, v3[1], v3[2], *(void *)(a2 + 16), MEMORY[0x263F8EE60] + 8, *(void *)(a2 + 24));
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t result = swift_release();
  *a3 = v5;
  a3[1] = v7;
  a3[2] = v9;
  return result;
}

uint64_t sub_24A4B35CC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_24A4B35E4(a1, a2, TreeSet.symmetricDifference(_:), a3);
}

uint64_t sub_24A4B35E4@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void, void, void, void, void, void, void, void)@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v6 = a3(*a1, a1[1], a1[2], *v4, v4[1], v4[2], *(void *)(a2 + 16), *(void *)(a2 + 24));
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t result = swift_release();
  *a4 = v6;
  a4[1] = v8;
  a4[2] = v10;
  return result;
}

uint64_t sub_24A4B3668(uint64_t *a1, uint64_t a2)
{
  return TreeSet.formUnion(_:)(*a1, a1[1], a1[2], a2);
}

uint64_t sub_24A4B367C(uint64_t a1, uint64_t a2)
{
  return TreeSet.formIntersection(_:)(*(void *)a1, *(char **)(a1 + 8), *(void *)(a1 + 16), a2);
}

uint64_t sub_24A4B3690(uint64_t *a1, uint64_t a2)
{
  return TreeSet.formSymmetricDifference(_:)(*a1, a1[1], a1[2], a2);
}

uint64_t sub_24A4B36A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = TreeSet.subtracting(_:)(*(void *)a1, *(void (**)(uint64_t, unsigned char *, uint64_t))(a1 + 8), *(void *)(a1 + 16), *v3, v3[1], v3[2], *(void *)(a2 + 16), *(void *)(a2 + 24));
  *a3 = result;
  a3[1] = v6;
  a3[2] = v7;
  return result;
}

uint64_t sub_24A4B36EC(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_24A4B3734(a1, a2, a3, TreeSet.isSubset(of:));
}

uint64_t sub_24A4B3704(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_24A4B3734(a1, a2, a3, TreeSet.isDisjoint(with:));
}

uint64_t sub_24A4B371C(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_24A4B3734(a1, a2, a3, TreeSet.isSuperset(of:));
}

uint64_t sub_24A4B3734(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void, void, void, void, void, void, void))
{
  return a4(*a1, a1[1], a1[2], *v4, v4[1], v4[2], *(void *)(a2 + 16), *(void *)(a2 + 24));
}

BOOL sub_24A4B375C()
{
  return TreeSet.isEmpty.getter(*v0, v0[1]);
}

uint64_t sub_24A4B3770@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t result = TreeSet.init<A>(_:)(a1, *(void *)(a4 + 16), a2, *(void *)(a4 + 24), a3);
  *a5 = result;
  a5[1] = v7;
  a5[2] = v8;
  return result;
}

uint64_t sub_24A4B37A8(uint64_t a1, uint64_t a2)
{
  return TreeSet.subtract(_:)(*(void *)a1, *(void (**)(uint64_t, unsigned char *, uint64_t))(a1 + 8), *(void *)(a1 + 16), a2);
}

uint64_t sub_24A4B37BC(uint64_t a1)
{
  unint64_t v2 = sub_24A5B85E4();
  uint64_t v4 = (void *)type metadata accessor for _HashNode();
  return _HashNode.insert(_:_:_:)(0, a1, v3, v2, v4);
}

uint64_t sub_24A4B383C(uint64_t a1)
{
  return sub_24A4B327C(a1, *(void *)(v1 + 32), *(void *)(v1 + 16));
}

uint64_t sub_24A4B3848()
{
  return swift_getWitnessTable();
}

uint64_t OrderedSet.init<A>(uncheckedUniqueElements:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, uint64_t))(v7 + 16))((char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  uint64_t v9 = sub_24A5BBA00();
  uint64_t v19 = v9;
  uint64_t v10 = sub_24A48AB90();
  uint64_t v11 = sub_24A5BC210();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v13 = static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)((uint64_t)&v19, 0, 1, v10, v11, WitnessTable, a4);
  uint64_t v14 = _s19CollectionsInternal4HeapV5countSivg_0();
  uint64_t v15 = 0;
  if (v14 >= 16)
  {
    swift_retain();
    uint64_t v15 = v13;
  }
  uint64_t v16 = OrderedSet.init(_uniqueElements:_:)(v9, v15);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, a3);
  return v16;
}

uint64_t OrderedSet.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  OrderedSet.SubSequence._slice.getter();
  v19[1] = v7;
  _OWORD v19[2] = v8;
  v19[3] = v9;
  sub_24A5BBFE0();
  swift_unknownObjectRetain();
  swift_getWitnessTable();
  uint64_t v10 = sub_24A5BBA00();
  v19[0] = v10;
  uint64_t v11 = sub_24A48AB90();
  uint64_t v12 = sub_24A5BC210();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v14 = static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)((uint64_t)v19, 0, 1, v11, v12, WitnessTable, a6);
  uint64_t v15 = _s19CollectionsInternal4HeapV5countSivg_0();
  uint64_t v16 = 0;
  if (v15 >= 16)
  {
    swift_retain();
    uint64_t v16 = v14;
  }
  uint64_t v17 = OrderedSet.init(_uniqueElements:_:)(v10, v16);
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return v17;
}

uint64_t OrderedSet.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = sub_24A4B3F34(a1, a2, a3);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t OrderedSet.init<A>(_:)()
{
  uint64_t v0 = sub_24A4B4068();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_24A4B3F34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_24A5BBA90();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  uint64_t v4 = sub_24A5BBA00();
  uint64_t v13 = v4;
  uint64_t v5 = sub_24A48AB90();
  uint64_t v6 = sub_24A5BC210();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v8 = static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)((uint64_t)&v13, 0, 1, v5, v6, WitnessTable, a3);
  uint64_t v9 = _s19CollectionsInternal4HeapV5countSivg_0();
  uint64_t v10 = 0;
  if (v9 >= 16)
  {
    swift_retain();
    uint64_t v10 = v8;
  }
  uint64_t v11 = OrderedSet.init(_uniqueElements:_:)(v4, v10);
  swift_release();
  return v11;
}

uint64_t sub_24A4B4068()
{
  return 0;
}

uint64_t TreeSet.formSymmetricDifference(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = TreeSet.symmetricDifference(_:)(a1, a2, a3, *v4, v4[1], v4[2], *(void *)(a4 + 16), *(void *)(a4 + 24));
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t result = swift_release();
  *uint64_t v4 = v5;
  v4[1] = v7;
  v4[2] = v9;
  return result;
}

uint64_t TreeSet.formSymmetricDifference<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = TreeSet.symmetricDifference<A>(_:)(a1, a2, a3, *v5, v5[1], v5[2], *(void *)(a4 + 16), a5, *(void *)(a4 + 24));
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t result = swift_release();
  *uint64_t v5 = v6;
  v5[1] = v8;
  v5[2] = v10;
  return result;
}

uint64_t TreeSet.formSymmetricDifference<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, char *, uint64_t))
{
  uint64_t v9 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *v4;
  uint64_t v13 = v4[1];
  uint64_t v14 = (void (*)(uint64_t, char *, uint64_t))v4[2];
  (*(void (**)(char *, uint64_t))(v9 + 16))(v11, a1);
  uint64_t v15 = TreeSet.symmetricDifference<A>(_:)((uint64_t)v11, v12, v13, v14, *(void *)(a2 + 16), a3, *(void *)(a2 + 24), a4);
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  swift_release();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a1, a3);
  *uint64_t v4 = v15;
  v4[1] = v17;
  v4[2] = v19;
  return result;
}

uint64_t OrderedSet.formUnion(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_24A4B4438(a1, a2, a3);
  swift_release();
  return swift_release();
}

{
  void v5[2];

  v5[0] = a1;
  v5[1] = a2;
  swift_getWitnessTable();
  OrderedSet.append<A>(contentsOf:)((uint64_t)v5, a3, a3);
  swift_release();
  return swift_release();
}

uint64_t OrderedSet.formUnion<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  j___s19CollectionsInternal10OrderedSetV6append10contentsOfyqd___t7ElementQyd__RszSTRd__lF();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8);
  return v5(a1, a3);
}

uint64_t sub_24A4B4438(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[0] = a1;
  v5[1] = a2;
  swift_getWitnessTable();
  return OrderedSet.append<A>(contentsOf:)((uint64_t)v5, a3, a3);
}

uint64_t _HashNode.insert(_:_:_:)(unsigned int a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  unint64_t v30 = a4;
  uint64_t v26 = a3;
  unint64_t v27 = a5;
  unsigned int v29 = a1;
  uint64_t v6 = a5[2];
  uint64_t v7 = a5[3];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v28 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v9);
  uint64_t v14 = (char *)&v24 - v13;
  uint64_t v15 = *(int *)(v12 + 48);
  uint64_t v25 = v12;
  uint64_t v16 = (char *)&v24 + v15 - v13;
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v17((char *)&v24 - v13, a2, v6);
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  v18(v16, v26, v7);
  uint64_t v19 = &v11[*(int *)(TupleTypeMetadata2 + 48)];
  v17(v11, (uint64_t)v14, v6);
  v18(v19, (uint64_t)v16, v7);
  uint64_t v32 = v6;
  uint64_t v33 = v7;
  uint64_t v34 = v27[4];
  uint64_t v35 = v11;
  char v20 = _HashNode.insert(_:_:_:_:)(v29, (uint64_t)v14, v30, (uint64_t (*)(uint64_t))sub_24A4B83E4, (uint64_t)v31, v27);
  uint64_t v21 = *(void (**)(char *, uint64_t))(v28 + 8);
  uint64_t v22 = v25;
  v21(v14, v25);
  v21(v11, v22);
  return v20 & 1;
}

uint64_t _HashNode.ensureUniqueAndAppendCollision(isUnique:_:)(int a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v22 = a3;
  uint64_t v23 = a4;
  int v25 = a1;
  uint64_t v5 = a4[2];
  uint64_t v6 = a4[3];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v24 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  uint64_t v13 = (char *)&v21 - v12;
  uint64_t v21 = (char *)&v21 + *(int *)(v11 + 48) - v12;
  uint64_t v14 = v21;
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  v15((char *)&v21 - v12, a2, v5);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v16(v14, v22, v6);
  uint64_t v17 = &v10[*(int *)(TupleTypeMetadata2 + 48)];
  v15(v10, (uint64_t)v13, v5);
  v16(v17, (uint64_t)v21, v6);
  uint64_t v27 = v5;
  uint64_t v28 = v6;
  uint64_t v29 = v23[4];
  unint64_t v30 = v10;
  uint64_t v18 = _HashNode.ensureUniqueAndAppendCollision(isUnique:_:)(v25, (void (*)(uint64_t))sub_24A4B83E4, (uint64_t)v26, v23);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v24 + 8);
  v19(v13, TupleTypeMetadata2);
  v19(v10, TupleTypeMetadata2);
  return v18;
}

uint64_t _HashNode.updateValue(_:forKey:_:_:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5, void *a6)
{
  Swift::Bool v11 = _HashNode.isUnique()();
  uint64_t v13 = *v6;
  uint64_t v12 = v6[1];
  uint64_t v14 = a6[3];
  uint64_t v15 = a6[4];
  unint64_t v28 = a3;
  uint64_t v16 = a3;
  uint64_t v17 = a6[2];
  unint64_t v18 = _HashNode.findForInsertion(_:_:_:)(a1, a2, v16, *v6, v12, v17, v14, v15);
  switch(v18 >> 29)
  {
    case 1u:
      _HashNode.ensureUniqueAndInsertItem(isUnique:at:itemSlot:_:)(v11, v18, HIDWORD(v18), a4, a5, a6);
      uint64_t result = 1;
      break;
    case 2u:
      _HashNode.ensureUniqueAndSpawnChild(isUnique:level:replacing:itemSlot:newHash:_:)(v11, a1, v18, HIDWORD(v18), v28, (uint64_t)a4, a5, a6);
      uint64_t result = 1;
      break;
    case 3u:
      unint64_t v20 = HIDWORD(v18);
      _HashNode.ensureUnique(isUnique:)(v11);
      uint64_t v21 = nullsub_1(*v6 + 16, *v6 + 32, v17, v14, v15);
      sub_24A4B5E5C(v21, v22, v20, a1, a2, v28, (uint64_t)a4, a5, (uint64_t)v31, v17, v14, v15, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))_HashNode.updateValue(_:forKey:_:_:));
      uint64_t result = v31[0];
      if (v31[0]) {
        ++v6[1];
      }
      break;
    case 4u:
      if (v18 == 0x80000000)
      {
        _HashNode.ensureUniqueAndAppendCollision(isUnique:_:)(v11, (void (*)(uint64_t))a4, a5, a6);
      }
      else
      {
        unint64_t v23 = _HashNode.collisionHash.getter(v13, v12, v17, v14, v15);
        swift_retain();
        uint64_t v25 = static _HashNode.build(level:item1:_:child2:_:)(a1, (uint64_t)a4, a5, v28, v13, v12, v23, v17, v24, v14, v15);
        uint64_t v27 = v26;
        swift_release();
        *uint64_t v6 = v25;
        v6[1] = v27;
      }
      uint64_t result = 1;
      break;
    default:
      _HashNode.ensureUnique(isUnique:)(v11);
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t _HashNode.insert(_:_:_:_:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5, void *a6)
{
  Swift::Bool v13 = _HashNode.isUnique()();
  uint64_t v15 = *v6;
  uint64_t v14 = v6[1];
  uint64_t v16 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[4];
  if (v13)
  {
    int v36 = a1;
    uint64_t v19 = a1;
    unint64_t v37 = a3;
    uint64_t v20 = a3;
    uint64_t v21 = v6[1];
    uint64_t v22 = a6[2];
    unint64_t v23 = _HashNode.findForInsertion(_:_:_:)(v19, a2, v20, v15, v14, v16, v17, v18);
    switch(v23 >> 29)
    {
      case 1u:
        uint64_t v24 = 1;
        _HashNode.ensureUniqueAndInsertItem(isUnique:at:itemSlot:_:)(1, v23, HIDWORD(v23), a4, a5, a6);
        break;
      case 2u:
        uint64_t v24 = 1;
        _HashNode.ensureUniqueAndSpawnChild(isUnique:level:replacing:itemSlot:newHash:_:)(1, v36, v23, HIDWORD(v23), v37, (uint64_t)a4, a5, a6);
        break;
      case 3u:
        unint64_t v28 = HIDWORD(v23);
        uint64_t v29 = nullsub_1(v15 + 16, v15 + 32, v22, v17, v18);
        sub_24A4B5E5C(v29, v30, v28, v36, a2, v37, (uint64_t)a4, a5, (uint64_t)v38, v22, v17, v18, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))_HashNode.insert(_:_:_:_:));
        uint64_t v24 = v38[0];
        if (v38[0]) {
          v6[1] = v21 + 1;
        }
        break;
      case 4u:
        if (v23 == 0x80000000)
        {
          uint64_t v24 = 1;
          _HashNode.ensureUniqueAndAppendCollision(isUnique:_:)(1, (void (*)(uint64_t))a4, a5, a6);
        }
        else
        {
          unint64_t v31 = _HashNode.collisionHash.getter(v15, v21, v22, v17, v18);
          swift_retain();
          uint64_t v33 = static _HashNode.build(level:item1:_:child2:_:)(v36, (uint64_t)a4, a5, v37, v15, v21, v31, v22, v32, v17, v18);
          uint64_t v35 = v34;
          swift_release();
          *uint64_t v6 = v33;
          v6[1] = v35;
          uint64_t v24 = 1;
        }
        break;
      default:
        uint64_t v24 = 0;
        break;
    }
  }
  else
  {
    _HashNode.inserting(_:_:_:_:)(a1, a2, a3, (uint64_t)a4, a5, v15, v14, v16, (uint64_t)v38, a6[3], v18);
    uint64_t v24 = v38[0];
    uint64_t v25 = v39;
    uint64_t v26 = v40;
    swift_release();
    *uint64_t v6 = v25;
    v6[1] = v26;
  }
  return v24;
}

uint64_t _HashNode.inserting(_:_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v12 = a7;
  uint64_t v13 = a6;
  unint64_t v15 = a2;
  int v16 = a1;
  unint64_t v18 = _HashNode.findForInsertion(_:_:_:)(a1, a2, a3, a6, a7, a8, a10, a11);
  unsigned int v19 = v18;
  switch(v18 >> 29)
  {
    case 1u:
      unint64_t v15 = HIDWORD(v18);
      uint64_t result = _HashNode.copyNodeAndInsertItem(at:itemSlot:_:)(v18, SHIDWORD(v18), a4, a5, v13, v12, a8, a10, a11);
      uint64_t v13 = result;
      uint64_t v12 = v29;
      char v21 = 1;
      uint64_t v22 = result;
      break;
    case 2u:
      unint64_t v45 = HIDWORD(v18);
      uint64_t v23 = nullsub_1(v13 + 16, v13 + 32, a8, a10, a11);
      sub_24A4B7BAC(v23, a8, v49);
      uint64_t result = _HashNode.copyNodeAndSpawnChild(level:replacing:itemSlot:existingHash:newHash:_:)(v16, v19, v45, v49[0], a3, a4, a5, v13, v12, a8, a10, a11);
      uint64_t v13 = result;
      uint64_t v12 = v24;
      uint64_t v22 = v25;
      LODWORD(v15) = v26;
      char v21 = 1;
      break;
    case 3u:
      uint64_t v30 = HIDWORD(v18);
      uint64_t v31 = nullsub_1(v13 + 16, v13 + 32, a8, a10, a11);
      unsigned int v46 = v30;
      sub_24A4B5D64(v31, v32, v30, v16, v15, a3, a4, a5, (uint64_t)v49, a8, a10, a11);
      uint64_t v33 = v49[1];
      uint64_t v22 = v49[3];
      LODWORD(v15) = v50;
      if (v49[0])
      {
        uint64_t v34 = v49[2];
        uint64_t v35 = sub_24A48AB90();
        uint64_t v13 = _HashNode.copy(withFreeSpace:)(v35, v13, v12, a8, a10, a11);
        uint64_t v37 = v36;
        uint64_t v38 = nullsub_1(v13 + 16, v13 + 32, a8, a10, a11);
        uint64_t v40 = (void *)_HashNode.UnsafeHandle.subscript.unsafeMutableAddressor(v46, v38, v39);
        *uint64_t v40 = v33;
        v40[1] = v34;
        uint64_t result = swift_release();
        uint64_t v12 = v37 + 1;
        char v21 = 1;
      }
      else
      {
        swift_retain();
        uint64_t result = swift_release();
        char v21 = 0;
      }
      break;
    case 4u:
      if (v18 == 0x80000000)
      {
        uint64_t result = _HashNode.copyNodeAndAppendCollision(_:)(a4, a5, v13, v12, a8, a10, a11);
        uint64_t v13 = result;
        uint64_t v12 = v27;
        LODWORD(v15) = v28;
        char v21 = 1;
        uint64_t v22 = result;
      }
      else
      {
        unint64_t v15 = _HashNode.collisionHash.getter(v13, v12, a8, a10, a11);
        swift_retain();
        uint64_t result = static _HashNode.build(level:item1:_:child2:_:)(v16, a4, a5, a3, v13, v12, v15, a8, v41, a10, a11);
        uint64_t v13 = result;
        uint64_t v12 = v42;
        uint64_t v22 = v43;
        char v21 = 1;
        LODWORD(v15) = v44;
      }
      break;
    default:
      unint64_t v15 = HIDWORD(v18);
      uint64_t result = swift_retain();
      char v21 = 0;
      uint64_t v22 = v13;
      break;
  }
  *(unsigned char *)a9 = v21;
  *(void *)(a9 + 8) = v13;
  *(void *)(a9 + 16) = v12;
  *(void *)(a9 + 24) = v22;
  *(_DWORD *)(a9 + 32) = v15;
  return result;
}

uint64_t _HashNode.ensureUniqueAndInsertItem(isUnique:at:itemSlot:_:)(char a1, char a2, unsigned int a3, uint64_t (*a4)(uint64_t), uint64_t a5, void *a6)
{
  uint64_t v7 = v6;
  uint64_t v13 = *v6;
  uint64_t v12 = v6[1];
  uint64_t v14 = a6[2];
  uint64_t v15 = a6[3];
  if (a1)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    uint64_t v17 = a6[4];
    if (_HashNode.hasFreeSpace(_:)(*(void *)(*(void *)(TupleTypeMetadata2 - 8) + 72)))
    {
      unint64_t v18 = (int *)nullsub_1(v13 + 16, v13 + 32, v14, v15, v17);
      uint64_t v20 = _HashNode.UnsafeHandle._makeRoomForNewItem(at:_:)(a3, a2, v18, v19);
      uint64_t result = a4(v20);
      v7[1] = v12 + 1;
    }
    else
    {
      return _HashNode.resizeNodeAndInsertItem(at:itemSlot:_:)(a2, a3, (uint64_t)a4, a5, a6);
    }
  }
  else
  {
    uint64_t v22 = _HashNode.copyNodeAndInsertItem(at:itemSlot:_:)(a2, a3, (uint64_t)a4, a5, v13, v12, v14, v15, a6[4]);
    uint64_t v24 = v23;
    uint64_t result = swift_release();
    *uint64_t v7 = v22;
    v7[1] = v24;
  }
  return result;
}

uint64_t _HashNode.ensureUniqueAndAppendCollision(isUnique:_:)(char a1, void (*a2)(uint64_t), uint64_t a3, void *a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v5;
  uint64_t v9 = v5[1];
  uint64_t v11 = a4[2];
  uint64_t v12 = a4[3];
  if ((a1 & 1) == 0)
  {
    uint64_t v20 = _HashNode.copyNodeAndAppendCollision(_:)((uint64_t)a2, a3, *v5, v5[1], v11, v12, a4[4]);
    uint64_t v22 = v21;
    uint64_t v9 = v23;
    swift_release();
    *uint64_t v5 = v20;
    v5[1] = v22;
    return v9;
  }
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v14 = a4[4];
  if (_HashNode.hasFreeSpace(_:)(*(void *)(*(void *)(TupleTypeMetadata2 - 8) + 72)))
  {
    int v16 = (int *)nullsub_1(v10 + 16, v10 + 32, v11, v12, v14);
    uint8x8_t v17 = (uint8x8_t)vcnt_s8((int8x8_t)*v16);
    v17.i16[0] = vaddlv_u8(v17);
    if (*v16 == v16[1]) {
      unsigned int v18 = *v16;
    }
    else {
      unsigned int v18 = v17.i32[0];
    }
    uint64_t v19 = _HashNode.UnsafeHandle._makeRoomForNewItem(at:_:)(v18, 255, v16, v15);
    a2(v19);
    v5[1] = v9 + 1;
    return v9;
  }
  return _HashNode.resizeNodeAndAppendCollision(_:)((uint64_t)a2, a3, a4);
}

uint64_t _HashNode.ensureUniqueAndSpawnChild(isUnique:level:replacing:itemSlot:newHash:_:)(int a1, int a2, unsigned int a3, unsigned int a4, unint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v59 = a6;
  uint64_t v60 = a7;
  unint64_t v61 = a5;
  unsigned int v58 = a3;
  int v55 = a2;
  LODWORD(v57) = a1;
  uint64_t v11 = a8[2];
  uint64_t v12 = a8[3];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v14 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v53 = TupleTypeMetadata2;
  uint64_t v54 = v14;
  uint64_t v15 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  int v50 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v51 = (uint64_t)&v49 - v18;
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v49 - v19;
  uint64_t v21 = *v8;
  uint64_t v22 = *v8 + 16;
  uint64_t v23 = *v8 + 32;
  unint64_t v52 = a8;
  uint64_t v24 = a8[4];
  uint64_t v25 = nullsub_1(v22, v23, v11, v12, v24);
  uint64_t v27 = v26;
  unsigned int v56 = a4;
  uint64_t result = sub_24A4B7BAC(v25, v11, (uint64_t *)&v62);
  unint64_t v29 = v62;
  if (v62 == v61)
  {
    uint64_t result = _HashNode.hasSingletonItem.getter(v21, v8[1], v11, v12, v24);
    if (result)
    {
      sub_24A4B7CC0(v25, v27, v11, v12, v24, (uint64_t)v20);
      swift_release();
      uint64_t v30 = static _HashNode._collisionNode(_:_:_:)(v61, (uint64_t)v20, (uint64_t)&v20[*(int *)(v53 + 48)], v59, v60, v11, v12, v24);
      *uint64_t v8 = v30;
      v8[1] = v31;
      return v30;
    }
  }
  if ((v57 & 1) == 0)
  {
    uint64_t v45 = _HashNode.copyNodeAndSpawnChild(level:replacing:itemSlot:existingHash:newHash:_:)(v55, v58, v56, v29, v61, v59, v60, v21, v8[1], v11, v12, v24);
    uint64_t v47 = v46;
    uint64_t v30 = v48;
    swift_release();
    *uint64_t v8 = v45;
    v8[1] = v47;
    return v30;
  }
  uint64_t v32 = *(void *)(v54 + 72);
  BOOL v33 = __OFSUB__(16, v32);
  uint64_t v34 = 16 - v32;
  if (!v33)
  {
    if (!_HashNode.hasFreeSpace(_:)(v34 & ~(v34 >> 63))) {
      return _HashNode.resizeNodeAndSpawnChild(level:replacing:itemSlot:existingHash:newHash:_:)(v55, v58, v56, v29, v61, v59, v60, v52);
    }
    uint64_t v35 = v52;
    uint64_t v36 = v53;
    uint64_t v37 = *(int *)(v53 + 48);
    unint64_t v57 = v29;
    uint64_t v38 = v51;
    uint64_t v39 = v51 + v37;
    _HashNode.removeItem(at:_:)(v51, v51 + v37, v58, v56, v52);
    unsigned int v56 = v55 + 5;
    uint64_t v40 = (uint64_t)v50;
    uint64_t v41 = (uint64_t)&v50[*(int *)(v36 + 48)];
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v50, v38, v11);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v41, v39, v12);
    uint64_t v42 = static _HashNode.build(level:item1:_:item2:_:)(v56, v40, v41, v57, v59, v60, v61, v11, v12, v24);
    uint64_t v30 = v43;
    sub_24A5B9AB0(v42, v44, v58, v35);
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v38, v36);
    swift_release();
    return v30;
  }
  __break(1u);
  return result;
}

double _HashNode.inserting(_:_:_:)@<D0>(unsigned int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unsigned char *a9@<X8>, uint64_t a10)
{
  uint64_t v34 = a5;
  *(void *)&long long v35 = a6;
  unint64_t v33 = a4;
  unsigned int v32 = a1;
  uint64_t v36 = a9;
  uint64_t v30 = a3;
  uint64_t v31 = a10;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v14 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v20 = (char *)&v29 - v19;
  uint64_t v21 = (char *)&v29 + *(int *)(v18 + 48) - v19;
  uint64_t v22 = *(void *)(a7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 32))((char *)&v29 - v19, a2, a7);
  uint64_t v23 = *(void *)(a8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 32))(v21, v30, a8);
  uint64_t v24 = &v17[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v17, v20, a7);
  (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v24, v21, a8);
  uint64_t v38 = a7;
  uint64_t v39 = a8;
  uint64_t v40 = v31;
  uint64_t v41 = v17;
  _HashNode.inserting(_:_:_:_:)(v32, (uint64_t)v20, v33, (uint64_t)sub_24A4B83E4, (uint64_t)v37, v34, v35, a7, (uint64_t)v42, a8, v31);
  LOBYTE(v23) = v42[0];
  long long v35 = v43;
  uint64_t v25 = v44;
  LODWORD(v24) = v45;
  uint64_t v26 = *(void (**)(char *, uint64_t))(v14 + 8);
  v26(v20, TupleTypeMetadata2);
  v26(v17, TupleTypeMetadata2);
  uint64_t v27 = v36;
  *uint64_t v36 = v23;
  double result = *(double *)&v35;
  *(_OWORD *)(v27 + 8) = v35;
  *((void *)v27 + 3) = v25;
  *((_DWORD *)v27 + 8) = v24;
  return result;
}

uint64_t _HashNode.copyNodeAndInsertItem(at:itemSlot:_:)(char a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v16 = (_DWORD *)nullsub_1(a5 + 16, a5 + 32, a7, a8, a9);
  int v17 = v16[1];
  int v18 = *v16 | (1 << a1);
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = v16;
  uint64_t v26 = v19;
  int v27 = a2;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  return static _HashNode.allocate<A>(itemMap:childMap:count:extraBytes:initializingWith:)(v20, (uint64_t)v16, v18, v17, a6 + 1, 0, sub_24A4B8388, (uint64_t)v22, a7, a8, MEMORY[0x263F8EE60] + 8, a9);
}

uint64_t _HashNode.copyNodeAndAppendCollision(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = nullsub_1(a3 + 16, a3 + 32, a5, a6, a7);
  uint64_t v15 = *v14;
  uint64_t v18 = a5;
  uint64_t v19 = a6;
  uint64_t v20 = a7;
  uint64_t v21 = v13;
  uint64_t v22 = v14;
  uint64_t v23 = a1;
  uint64_t v24 = a2;
  return static _HashNode.allocateCollision<A>(count:_:extraBytes:initializingWith:)(v13, a4 + 1, v15, 0, (uint64_t (*)(uint64_t))sub_24A4B8334, (uint64_t)v17, a5, a6, MEMORY[0x263F8EE60] + 8, a7);
}

uint64_t _HashNode.copyNodeAndSpawnChild(level:replacing:itemSlot:existingHash:newHash:_:)(int a1, unsigned int a2, unsigned int a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v19 = nullsub_1(a8 + 16, a8 + 32, a10, a11, a12);
  sub_24A4B7E48(v19, v20, a1, a3, a4, a6, a7, a5, (uint64_t)v26, a10, a11, a12);
  uint64_t v21 = v26[1];
  uint64_t v22 = swift_retain();
  uint64_t v23 = sub_24A4B810C(v22, v21, a2, a3, a8, a9, a10, a11, a12);
  swift_release_n();
  return v23;
}

__n128 sub_24A4B5D64@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int v17 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(a3, a1, a2, a10, a11, a12);
  uint64_t v18 = *v17;
  uint64_t v19 = v17[1];
  swift_retain();
  _HashNode.inserting(_:_:_:_:)(&v25, (a4 + 5), a5, a6, a7, a8, v18, v19, a10, a11, a12);
  char v20 = v25;
  __n128 v24 = v26;
  uint64_t v21 = v27;
  LODWORD(a6) = v28;
  swift_release();
  *(unsigned char *)a9 = v20;
  __n128 result = v24;
  *(__n128 *)(a9 + 8) = v24;
  *(void *)(a9 + 24) = v21;
  *(_DWORD *)(a9 + 32) = a6;
  return result;
}

uint64_t sub_24A4B5E5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t (*a13)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v16 = (a4 + 5);
  _HashNode.UnsafeHandle.subscript.unsafeMutableAddressor(a3, a1, a2);
  uint64_t v17 = type metadata accessor for _HashNode();
  uint64_t result = a13(v16, a5, a6, a7, a8, v17);
  *(unsigned char *)a9 = result & 1;
  *(void *)(a9 + 8) = v19;
  *(_DWORD *)(a9 + 16) = v20;
  return result;
}

uint64_t _HashNode.ensureUniqueAndInsertItem(isUnique:_:at:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v34 = a3;
  uint64_t v35 = a4;
  uint64_t v32 = a2;
  unint64_t v33 = a5;
  int v37 = a1;
  uint64_t v6 = a5[2];
  uint64_t v7 = a5[3];
  uint64_t v8 = a5;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v36 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  uint64_t v15 = (char *)&v27 - v14;
  uint64_t v16 = (char *)&v27 + *(int *)(v13 + 48) - v14;
  uint64_t v28 = v13;
  uint64_t v29 = v16;
  uint64_t v17 = *(void *)(v6 - 8);
  uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  uint64_t v31 = v17 + 16;
  v30((char *)&v27 - v14, v32, v6);
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  v18(v16, v34, v7);
  uint64_t v19 = v8[4];
  int v20 = (_DWORD *)nullsub_1(*v5 + 16, *v5 + 32, v6, v7, v19);
  LOBYTE(v8) = v35;
  v21.i32[0] = *v20 & ~(-1 << v35);
  uint8x8_t v22 = (uint8x8_t)vcnt_s8(v21);
  v22.i16[0] = vaddlv_u8(v22);
  LODWORD(v34) = v22.i32[0];
  uint64_t v23 = &v12[*(int *)(TupleTypeMetadata2 + 48)];
  v30(v12, (uint64_t)v15, v6);
  v18(v23, (uint64_t)v29, v7);
  uint64_t v39 = v6;
  uint64_t v40 = v7;
  uint64_t v41 = v19;
  uint64_t v42 = v12;
  _HashNode.ensureUniqueAndInsertItem(isUnique:at:itemSlot:_:)(v37, (char)v8, v34, sub_24A4B81AC, (uint64_t)v38, v33);
  __n128 v24 = *(void (**)(char *, uint64_t))(v36 + 8);
  uint64_t v25 = v28;
  v24(v15, v28);
  return ((uint64_t (*)(char *, uint64_t))v24)(v12, v25);
}

uint64_t _HashNode.resizeNodeAndInsertItem(at:itemSlot:_:)(char a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10 = v5[1];
  uint64_t v11 = a5[2];
  uint64_t v12 = a5[3];
  uint64_t v13 = a5[4];
  uint64_t v14 = (_DWORD *)nullsub_1(*v5 + 16, *v5 + 32, v11, v12, v13);
  int v15 = v14[1];
  int v16 = *v14 | (1 << a1);
  uint64_t v24 = v11;
  uint64_t v25 = v12;
  uint64_t v26 = v13;
  uint64_t v27 = v14;
  uint64_t v28 = v17;
  int v29 = a2;
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  uint64_t v19 = static _HashNode.allocate<A>(itemMap:childMap:count:extraBytes:initializingWith:)(v18, (uint64_t)v14, v16, v15, v10 + 1, 0, sub_24A4B82B4, (uint64_t)v23, v11, v12, MEMORY[0x263F8EE60] + 8, v13);
  uint64_t v21 = v20;
  uint64_t result = swift_release();
  *uint64_t v5 = v19;
  v5[1] = v21;
  return result;
}

uint64_t sub_24A4B6284(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t (*a8)(uint64_t))
{
  uint64_t v11 = _HashNode.UnsafeHandle.children.getter();
  uint64_t v13 = v12;
  type metadata accessor for _HashNode();
  UnsafeMutableBufferPointer.initialize(fromContentsOf:)(v11, v13, a1, a2);
  _HashNode.UnsafeHandle.reverseItems.getter();
  uint64_t v15 = v14;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  sub_24A5BBDB0();
  swift_getWitnessTable();
  sub_24A5BB3D0();
  sub_24A5BB3D0();
  uint64_t v17 = sub_24A5BBDA0();
  UnsafeMutableBufferPointer.initialize(fromContentsOf:)(a3, a4, v28, v29, v17, v18);
  uint64_t v19 = v15 - a7;
  swift_getWitnessTable();
  sub_24A5BBBB0();
  sub_24A5BBBB0();
  uint64_t v20 = sub_24A5BBDA0();
  UnsafeMutableBufferPointer.initialize(fromContentsOf:)(a3, a4, v28, v29, v20, v21);
  uint64_t result = sub_24A5BB540();
  if (result) {
    return a8(result + *(void *)(*(void *)(TupleTypeMetadata2 - 8) + 72) * v19);
  }
  __break(1u);
  return result;
}

void sub_24A4B6538(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, void (*a8)(uint64_t))
{
  uint64_t v11 = _HashNode.UnsafeHandle.children.getter();
  uint64_t v13 = v12;
  type metadata accessor for _HashNode();
  _sSr19CollectionsInternalE17moveInitializeAll14fromContentsOfySryxG_tF_0(v11, v13, a1, a2);
  _HashNode.UnsafeHandle.reverseItems.getter();
  uint64_t v15 = v14;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  sub_24A5BBDB0();
  swift_getWitnessTable();
  sub_24A5BB3D0();
  sub_24A5BB3D0();
  uint64_t v17 = sub_24A5BBDA0();
  sub_24A509534(a3, a4, v27, v28, v17, v18);
  swift_getWitnessTable();
  sub_24A5BBBB0();
  sub_24A5BBBB0();
  uint64_t v19 = sub_24A5BBDA0();
  sub_24A509534(a3, a4, v27, v28, v19, v20);
  uint64_t v21 = sub_24A5BB540();
  if (v21)
  {
    a8(v21 + *(void *)(*(void *)(TupleTypeMetadata2 - 8) + 72) * (v15 - a7));
    _HashNode.UnsafeHandle.clear()();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_24A4B6804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v8 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  uint64_t v13 = (char *)&v21 - v12;
  uint64_t v14 = *(int *)(v11 + 48);
  uint64_t v15 = (char *)&v21 + v14 - v12;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = *(void *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))((char *)&v21 - v12, a2, a3);
  uint64_t v18 = *(void *)(a4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v15, v16, a4);
  uint64_t v19 = &v10[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v10, v13, a3);
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v19, v15, a4);
  return sub_24A544CAC((uint64_t)v10, v22, TupleTypeMetadata2);
}

uint64_t _HashNode.resizeNodeAndAppendCollision(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = v3[1];
  uint64_t v7 = a3[2];
  uint64_t v8 = a3[3];
  uint64_t v9 = a3[4];
  uint64_t v10 = nullsub_1(*v3 + 16, *v3 + 32, v7, v8, v9);
  uint64_t v12 = *v11;
  uint64_t v18 = v7;
  uint64_t v19 = v8;
  uint64_t v20 = v9;
  uint64_t v21 = v10;
  uint64_t v22 = v11;
  uint64_t v23 = a1;
  uint64_t v24 = a2;
  uint64_t v13 = static _HashNode.allocateCollision<A>(count:_:extraBytes:initializingWith:)(v10, v6 + 1, v12, 0, (uint64_t (*)(uint64_t))sub_24A4B829C, (uint64_t)v17, v7, v8, MEMORY[0x263F8EE60] + 8, v9);
  uint64_t v15 = v14;
  swift_release();
  *uint64_t v3 = v13;
  v3[1] = v15;
  return v6;
}

uint64_t sub_24A4B6AA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6 = _HashNode.UnsafeHandle.reverseItems.getter();
  uint64_t v8 = v7;
  swift_getTupleTypeMetadata2();
  sub_24A5BBDB0();
  swift_getWitnessTable();
  sub_24A5BBBD0();
  uint64_t v9 = sub_24A5BBDA0();
  UnsafeMutableBufferPointer.initialize(fromContentsOf:)(v6, v8, v9, v10);
  uint64_t result = sub_24A5BB540();
  if (result) {
    return a5(result, v12);
  }
  __break(1u);
  return result;
}

void sub_24A4B6BD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  uint64_t v5 = _HashNode.UnsafeHandle.reverseItems.getter();
  uint64_t v10 = v6;
  uint64_t v11 = v5;
  swift_getTupleTypeMetadata2();
  sub_24A5BBDB0();
  swift_getWitnessTable();
  sub_24A5BBBD0();
  uint64_t v7 = sub_24A5BBDA0();
  _sSr19CollectionsInternalE17moveInitializeAll14fromContentsOfySryxG_tF_0(v11, v10, v7, v8);
  if (sub_24A5BB540())
  {
    a5();
    _HashNode.UnsafeHandle.clear()();
  }
  else
  {
    __break(1u);
  }
}

uint64_t _HashNode._copyNodeAndReplaceItemWithNewChild(level:_:at:itemSlot:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10 = sub_24A4B810C(a2, a3, a4, a5, a6, a7, a8, a9, a10);
  swift_release();
  return v10;
}

uint64_t sub_24A4B6D8C@<X0>(int *a1@<X0>, uint64_t a2@<X1>, int a3@<W3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t *a8@<X8>, uint64_t a9, uint64_t a10)
{
  uint64_t v30[2] = a6;
  int v31 = a3;
  BOOL v16 = _HashNode.UnsafeHandle.hasSingletonItem.getter(a1);
  if (v16 && (BOOL v16 = _HashNode.isCollisionNode.getter(a4, a5, a7, a9, a10)))
  {
    *a8 = a4;
    a8[1] = a5;
    return swift_retain();
  }
  else
  {
    v30[1] = v30;
    uint64_t v18 = MEMORY[0x270FA5388](v16);
    v25[2] = a7;
    _OWORD v25[3] = a9;
    void v25[4] = a10;
    v25[5] = a1;
    v25[6] = a2;
    int v26 = v19;
    uint64_t v27 = a4;
    uint64_t v28 = a5;
    int v29 = v31;
    uint64_t result = static _HashNode.allocate<A>(itemMap:childMap:count:extraBytes:initializingWith:)(v23, v18, v20, v21, v22, 0, sub_24A4B82CC, (uint64_t)v25, a7, a9, MEMORY[0x263F8EE60] + 8, a10);
    *a8 = result;
    a8[1] = v24;
  }
  return result;
}

uint64_t sub_24A4B6F04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9)
{
  _HashNode.UnsafeHandle.children.getter();
  _HashNode.UnsafeHandle.reverseItems.getter();
  uint64_t v12 = type metadata accessor for _HashNode();
  sub_24A5BBDB0();
  swift_getWitnessTable();
  sub_24A5BBBB0();
  sub_24A5BBBB0();
  uint64_t v13 = sub_24A5BBDA0();
  UnsafeMutableBufferPointer.initialize(fromContentsOf:)(a1, a2, v27, v28, v13, v14);
  swift_getWitnessTable();
  sub_24A5BB3D0();
  sub_24A5BB3D0();
  uint64_t v15 = sub_24A5BBDA0();
  UnsafeMutableBufferPointer.initialize(fromContentsOf:)(a1, a2, v27, v28, v15, v16);
  v29[0] = a8;
  v29[1] = a9;
  sub_24A562CA0(a7, (uint64_t)v29, a1, a2, v12);
  swift_retain();
  swift_getTupleTypeMetadata2();
  sub_24A5BBDB0();
  swift_getWitnessTable();
  sub_24A5BB3D0();
  sub_24A5BB3D0();
  uint64_t v17 = sub_24A5BBDA0();
  UnsafeMutableBufferPointer.initialize(fromContentsOf:)(a3, a4, v27, v28, v17, v18);
  swift_getWitnessTable();
  sub_24A5BBBB0();
  sub_24A5BBBB0();
  uint64_t v19 = sub_24A5BBDA0();
  return UnsafeMutableBufferPointer.initialize(fromContentsOf:)(a3, a4, v27, v28, v19, v20);
}

uint64_t _HashNode._resizeNodeAndReplaceItemWithNewChild(level:_:at:itemSlot:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5, void *a6)
{
  return sub_24A4B81CC(a2, a3, a4, a5, a6);
}

uint64_t sub_24A4B7318@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, int8x8_t a10@<D0>, uint64_t a11, uint64_t a12)
{
  int v14 = *a1;
  int v13 = a1[1];
  a10.i32[0] = v13 & ((1 << a3) - 1);
  int8x8_t v15 = vcnt_s8(a10);
  uint64_t v19 = a8;
  uint64_t v20 = a11;
  v15.i16[0] = vaddlv_u8((uint8x8_t)v15);
  uint64_t v21 = a12;
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  __int32 v24 = v15.i32[0];
  uint64_t v25 = a6;
  uint64_t v26 = a7;
  int v27 = a4;
  uint64_t result = static _HashNode.allocate<A>(itemMap:childMap:count:extraBytes:initializingWith:)(v15, (uint64_t)a1, v14 & ~(1 << a3), v13 | (1 << a3), a5 + a7 - 1, 0, sub_24A4B8284, (uint64_t)v18, a8, a11, MEMORY[0x263F8EE60] + 8, a12);
  *a9 = result;
  a9[1] = v17;
  return result;
}

void sub_24A4B73D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9)
{
  _HashNode.UnsafeHandle.children.getter();
  _HashNode.UnsafeHandle.reverseItems.getter();
  uint64_t v26 = a2;
  uint64_t v12 = type metadata accessor for _HashNode();
  sub_24A5BBDB0();
  swift_getWitnessTable();
  sub_24A5BBBB0();
  sub_24A5BBBB0();
  uint64_t v13 = sub_24A5BBDA0();
  sub_24A509534(a1, v26, v27, v28, v13, v14);
  swift_getWitnessTable();
  sub_24A5BB3D0();
  sub_24A5BB3D0();
  uint64_t v15 = sub_24A5BBDA0();
  sub_24A509534(a1, a2, v27, v28, v15, v16);
  v29[0] = a8;
  v29[1] = a9;
  sub_24A562CA0(a7, (uint64_t)v29, a1, a2, v12);
  swift_retain();
  swift_getTupleTypeMetadata2();
  sub_24A5BBDB0();
  swift_getWitnessTable();
  sub_24A5BB3D0();
  sub_24A5BB3D0();
  uint64_t v17 = sub_24A5BBDA0();
  sub_24A509534(a3, a4, v27, v28, v17, v18);
  swift_getWitnessTable();
  sub_24A5BBBB0();
  sub_24A5BBBB0();
  uint64_t v19 = sub_24A5BBDA0();
  sub_24A509534(a3, a4, v27, v28, v19, v20);
  _HashNode.UnsafeHandle.clear()();
}

uint64_t _HashNode.copyNodeAndPushItemIntoNewChild(level:_:at:itemSlot:)(unsigned int a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v46 = a7;
  int v39 = a5;
  unsigned int v45 = a4;
  uint64_t v42 = a2;
  uint64_t v43 = a3;
  unsigned int v41 = a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v38 = TupleTypeMetadata2;
  uint64_t v44 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v33 - v17;
  uint64_t v40 = a6;
  uint64_t v47 = a10;
  uint64_t v19 = nullsub_1(a6 + 16, a6 + 32, a8, a9, a10);
  sub_24A4B7B04(v19, v20, a5, a8, a9, a10, (uint64_t)v18);
  uint64_t v21 = *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v22 = v18;
  uint64_t v36 = v18;
  uint64_t v23 = &v18[v21];
  uint64_t v34 = &v18[v21];
  __int32 v24 = &v16[v21];
  uint64_t v25 = *(void *)(a8 - 8);
  int v37 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
  v37(v16, v22, a8);
  uint64_t v26 = *(void *)(a9 - 8);
  unint64_t v33 = *(void (**)(char *, char *, uint64_t))(v26 + 16);
  v33(v24, v23, a9);
  unint64_t v35 = sub_24A5B85E4();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v16, a8);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v24, a9);
  uint64_t v27 = v38;
  uint64_t v28 = (uint64_t)&v16[*(int *)(v38 + 48)];
  int v29 = v36;
  v37(v16, v36, a8);
  v33((char *)v28, v34, a9);
  uint64_t v30 = v47;
  _HashNode.inserting(_:_:_:)(v41, (uint64_t)v16, v28, v35, v42, v43, a8, a9, v48, v47);
  uint64_t v31 = sub_24A4B810C(v49, v50, v45, v39, v40, v46, a8, a9, v30);
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v29, v27);
  return v31;
}

uint64_t sub_24A4B7B04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(a3, a1, a2, a4, a5, a6);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 16))(a7, v8, TupleTypeMetadata2);
}

uint64_t sub_24A4B7BAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v9, v8, v13, v10, v11, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v14, a2);
  uint64_t v15 = sub_24A5B85E4();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, a2);
  *a3 = v15;
  return result;
}

uint64_t sub_24A4B7CC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(0, a1, a2, a3, a4, a5);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 16))(a6, v7, TupleTypeMetadata2);
}

uint64_t _HashNode.resizeNodeAndSpawnChild(level:replacing:itemSlot:existingHash:newHash:_:)(int a1, char a2, unsigned int a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v16 = a8[2];
  uint64_t v15 = a8[3];
  uint64_t v17 = a8[4];
  uint64_t v18 = nullsub_1(*v8 + 16, *v8 + 32, v16, v15, v17);
  sub_24A4B7FDC(v18, v19, a1, a3, a4, a6, a7, a5, (uint64_t)v24, v16, v15, v17);
  uint64_t v20 = v24[2];
  sub_24A4B81CC(v24[0], v24[1], a2, a3, a8);
  return v20;
}

uint64_t sub_24A4B7E48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unsigned int a4@<W3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v33 = a7;
  unint64_t v34 = a8;
  unint64_t v31 = a5;
  uint64_t v32 = a6;
  unsigned int v30 = a4;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v17 = TupleTypeMetadata2 - 8;
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v19 = (char *)&v29 - v18;
  uint64_t v20 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v30, a1, a2, a10, a11, a12);
  uint64_t v21 = *(int *)(v17 + 56);
  uint64_t v22 = (uint64_t)&v19[v21];
  uint64_t v23 = v20 + v21;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a10 - 8) + 16))(v19, v20, a10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a11 - 8) + 16))(v22, v23, a11);
  uint64_t result = static _HashNode.build(level:item1:_:item2:_:)(a3 + 5, (uint64_t)v19, v22, v31, v32, v33, v34, a10, a11, a12);
  *(void *)a9 = result;
  *(void *)(a9 + 8) = v25;
  *(void *)(a9 + 16) = v26;
  *(_DWORD *)(a9 + 24) = v27;
  *(_DWORD *)(a9 + 28) = v28;
  return result;
}

uint64_t sub_24A4B7FDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unsigned int a4@<W3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v28 = a7;
  unint64_t v29 = a8;
  unint64_t v26 = a5;
  uint64_t v27 = a6;
  unsigned int v25 = a4;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v18 = (char *)&v24 - v17;
  _HashNode.UnsafeHandle.itemPtr(at:)(v25, a1, a2);
  sub_24A5BBD10();
  uint64_t result = static _HashNode.build(level:item1:_:item2:_:)(a3 + 5, (uint64_t)v18, (uint64_t)&v18[*(int *)(TupleTypeMetadata2 + 48)], v26, v27, v28, v29, a10, a11, a12);
  *(void *)a9 = result;
  *(void *)(a9 + 8) = v20;
  *(void *)(a9 + 16) = v21;
  *(_DWORD *)(a9 + 24) = v22;
  *(_DWORD *)(a9 + 28) = v23;
  return result;
}

uint64_t sub_24A4B810C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15 = (int *)nullsub_1(a5 + 16, a5 + 32, a7, a8, a9);
  sub_24A4B6D8C(v15, v16, a4, a1, a2, a6, a7, &v18, a8, a9);
  return v18;
}

uint64_t sub_24A4B81AC(uint64_t a1)
{
  return sub_24A4B6804(a1, v1[5], v1[2], v1[3]);
}

uint64_t sub_24A4B81CC(uint64_t a1, uint64_t a2, char a3, int a4, void *a5)
{
  uint64_t v10 = v5[1];
  uint64_t v11 = a5[2];
  uint64_t v12 = a5[3];
  uint64_t v13 = a5[4];
  uint64_t v14 = (_DWORD *)nullsub_1(*v5 + 16, *v5 + 32, v11, v12, v13);
  sub_24A4B7318(v14, v15, a3, a4, v10, a1, a2, v11, v19, v16, v12, v13);
  swift_release();
  uint64_t result = swift_release();
  uint64_t v18 = v19[1];
  *uint64_t v5 = v19[0];
  v5[1] = v18;
  return result;
}

uint64_t sub_24A4B8284(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24A4B82E4(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, _DWORD, void, void, void))sub_24A4B73D8);
}

uint64_t sub_24A4B829C(uint64_t a1, uint64_t a2)
{
  return sub_24A4B834C(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, void, void))sub_24A4B6BD0);
}

uint64_t sub_24A4B82B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24A4B83A0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void))sub_24A4B6538);
}

uint64_t sub_24A4B82CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24A4B82E4(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, _DWORD, void, void, void))sub_24A4B6F04);
}

uint64_t sub_24A4B82E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, _DWORD, void, void, void))
{
  return a5(a1, a2, a3, a4, *(void *)(v5 + 40), *(void *)(v5 + 48), *(unsigned int *)(v5 + 56), *(void *)(v5 + 64), *(void *)(v5 + 72), *(_DWORD *)(v5 + 80), *(void *)(v5 + 16), *(void *)(v5 + 24), *(void *)(v5 + 32));
}

uint64_t sub_24A4B8334(uint64_t a1, uint64_t a2)
{
  return sub_24A4B834C(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, void, void))sub_24A4B6AA0);
}

uint64_t sub_24A4B834C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, void, void, void, void, void, void, void))
{
  return a3(a1, a2, v3[5], v3[6], v3[7], v3[8], v3[2], v3[3], v3[4]);
}

uint64_t sub_24A4B8388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24A4B83A0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void))sub_24A4B6284);
}

uint64_t sub_24A4B83A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void))
{
  return a5(a1, a2, a3, a4, *(void *)(v5 + 40), *(void *)(v5 + 48), *(unsigned int *)(v5 + 56), *(void *)(v5 + 64), *(void *)(v5 + 72), *(void *)(v5 + 16), *(void *)(v5 + 24), *(void *)(v5 + 32));
}

uint64_t _HashNode.union<A>(_:_:)(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9)
{
  if (a5 < 1)
  {
    _HashNode.mapValuesToVoid(copy:extraBytes:)(0, 0, a2, a3, a6, a8, a9);
    char v18 = 1;
  }
  else if (a3 < 1)
  {
    _HashNode.mapValuesToVoid(copy:extraBytes:)(0, 0, a4, a5, a6, (uint64_t)a7, a9);
    char v18 = 0;
  }
  else if ((_BYTE)a1 || (_HashNode.hasSingletonItem.getter(a4, a5, a6, (uint64_t)a7, a9) & 1) == 0)
  {
    char v18 = _HashNode._union<A>(_:_:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    uint64_t v17 = nullsub_1(a4 + 16, a4 + 32, a6, a7, a9);
    sub_24A4B8564(v17, a2, a3, 0, a6, (uint64_t)a7, a8, v20, a9);
    char v18 = v20[0];
  }
  return v18 & 1;
}

uint64_t sub_24A4B8564@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, unsigned int a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, unsigned char *a8@<X8>, uint64_t a9)
{
  uint64_t v40 = a8;
  uint64_t v41 = a7;
  uint64_t v50 = a6;
  unsigned int v39 = a4;
  uint64_t v13 = *(void *)(a5 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](a1);
  int8x8_t v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  char v18 = (char *)&v37 - v17;
  uint64_t v21 = _HashNode.UnsafeHandle.itemPtr(at:)(0, v19, v20);
  uint64_t v48 = _HashNode.mapValuesToVoid(copy:extraBytes:)(1, 0, a2, a3, a5, a7, a9);
  uint64_t v49 = v22;
  int v23 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v23(v18, v21, a5);
  v23(v16, v21, a5);
  unint64_t v24 = sub_24A5B85E4();
  unsigned int v25 = *(void (**)(char *, uint64_t))(v13 + 8);
  v25(v16, a5);
  uint64_t v43 = a5;
  uint64_t v44 = v50;
  uint64_t v45 = v41;
  uint64_t v46 = a9;
  uint64_t v38 = v21;
  uint64_t v47 = v21;
  unint64_t v26 = (void *)type metadata accessor for _HashNode();
  LOBYTE(v23) = _HashNode.updateValue(_:forKey:_:_:)(v39, (uint64_t)v18, v24, (uint64_t (*)(uint64_t))sub_24A4BABC4, (uint64_t)v42, v26);
  uint64_t v28 = v27;
  unsigned int v30 = v29;
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v25)(v18, a5);
  if ((v23 & 1) == 0)
  {
    uint64_t v32 = v50;
    uint64_t v33 = nullsub_1(v28 + 16, v28 + 32, a5, v50, a9);
    uint64_t result = sub_24A4B87F4(v33, v34, 0, v28, v30, v38, a5, v32, v41, a9);
  }
  unint64_t v35 = v40;
  *uint64_t v40 = 1;
  uint64_t v36 = v49;
  *((void *)v35 + 1) = v48;
  *((void *)v35 + 2) = v36;
  return result;
}

uint64_t sub_24A4B87F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int v26 = a5;
  uint64_t v27 = a2;
  uint64_t v28 = a10;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v15 = TupleTypeMetadata2 - 8;
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v17 = (char *)&v25 - v16;
  uint64_t v18 = *(int *)(v15 + 56);
  uint64_t v19 = &v17[v18];
  uint64_t v20 = a6 + v18;
  uint64_t v21 = *(void *)(a7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v17, a6, a7);
  uint64_t v22 = *(void *)(a8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v19, v20, a8);
  uint64_t v23 = _HashNode.UnsafeHandle.subscript.unsafeMutableAddressor(v26, a1, v27, a7, a8, v28);
  (*(void (**)(uint64_t, char *, uint64_t))(v21 + 40))(v23, v17, a7);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v22 + 40))(v23 + *(int *)(v15 + 56), v19, a8);
}

uint64_t _HashNode._union<A>(_:_:)(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9)
{
  if (a4 == a2)
  {
    _HashNode.mapValuesToVoid(copy:extraBytes:)(0, 0, a4, a5, a6, (uint64_t)a7, a9);
    char v17 = 0;
  }
  else if (_HashNode.isCollisionNode.getter(a4, a5, a6, (uint64_t)a7, a9) {
         || _HashNode.isCollisionNode.getter(a2, a3, a6, a8, a9))
  }
  {
    char v17 = _HashNode._union_slow<A>(_:_:)(a1, a2, a3, a4, a5, a6, (uint64_t)a7, a8, a9);
  }
  else
  {
    uint64_t v18 = (void *)nullsub_1(a4 + 16, a4 + 32, a6, a7, a9);
    sub_24A4B8C9C(v18, v19, a2, a4, a5, a1, a6, v21, a7, a8, a9);
    char v17 = v21[0];
  }
  return v17 & 1;
}

uint64_t _HashNode._union_slow<A>(_:_:)(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  BOOL v17 = _HashNode.isCollisionNode.getter(a4, a5, a6, a7, a9);
  BOOL v18 = _HashNode.isCollisionNode.getter(a2, a3, a6, a8, a9);
  if (v17)
  {
    BOOL v19 = v18;
    uint64_t v20 = a4 + 16;
    uint64_t v21 = a4 + 32;
    if (v19)
    {
      nullsub_1(v20, v21, a6, a7, a9);
      unsigned int v29 = v22;
      uint64_t v23 = nullsub_1(a2 + 16, a2 + 32, a6, a8, a9);
      sub_24A4B9D64(v23, v24, v29, (uint64_t)v30, a3, a6, a7, a8, a9);
    }
    else
    {
      nullsub_1(v20, v21, a6, a7, a9);
      sub_24A4BA16C(v27, a2, a3, a1, a4, a5, a6, (uint64_t)v30, a7, a8, a9);
    }
  }
  else
  {
    uint64_t v25 = (_DWORD *)nullsub_1(a4 + 16, a4 + 32, a6, a7, a9);
    sub_24A4BA76C(v25, v26, a2, a3, a1, a4, a5, a6, (uint64_t)v30, a7, a8, a9);
  }
  return v30[0];
}

uint64_t sub_24A4B8C9C@<X0>(void *a1@<X0>, void (*a2)(uint64_t, uint64_t, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, int a6@<W6>, uint64_t a7@<X7>, unsigned char *a8@<X8>, void *a9, uint64_t a10, uint64_t a11)
{
  BOOL v17 = (_DWORD *)nullsub_1(a3 + 16, a3 + 32, a7, a10, a11);
  return sub_24A4B8D48(v17, v18, a4, a5, a1, a2, a6, a7, a8, a9, a10, a11);
}

uint64_t sub_24A4B8D48@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, void (*a6)(uint64_t, uint64_t, uint64_t)@<X5>, int a7@<W6>, uint64_t a8@<X7>, unsigned char *a9@<X8>, void *a10, uint64_t a11, uint64_t a12)
{
  uint64_t v207 = a6;
  uint64_t v210 = (_DWORD *)a4;
  uint64_t v195 = a9;
  uint64_t v205 = a11;
  uint64_t v193 = MEMORY[0x263F8EE60] + 8;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v203 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v190 = (char *)&v185 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v189 = (char *)&v185 - v21;
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v192 = (uint64_t)&v185 - v23;
  uint64_t v24 = *(void *)(a8 - 8);
  uint64_t v25 = MEMORY[0x270FA5388](v22);
  uint64_t v197 = (void (**)(uint64_t, uint64_t))((char *)&v185 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v25);
  int v204 = (char *)&v185 - v27;
  uint64_t v208 = a10;
  uint64_t v209 = a12;
  uint64_t result = _HashNode.mapValuesToVoid(copy:extraBytes:)(0, 0, a3, (uint64_t)v210, a8, (uint64_t)a10, a12);
  uint64_t v215 = result;
  uint64_t v216 = v30;
  unsigned int v31 = *(_DWORD *)a5;
  uint64_t v210 = a1;
  uint64_t v211 = a2;
  uint64_t v217 = a8;
  uint64_t v206 = a5;
  LODWORD(v194) = a7;
  uint64_t v199 = v24;
  if (!v31)
  {
    unsigned int v81 = *((_DWORD *)a5 + 1);
    if (!v81)
    {
      int v82 = 0;
      LODWORD(v196) = 0;
      goto LABEL_35;
    }
    LODWORD(v196) = 0;
    unsigned int v201 = v194 + 5;
    goto LABEL_18;
  }
  LODWORD(v196) = 0;
  unsigned int v32 = 0;
  uint64_t v200 = (void (**)(char *, uint64_t, uint64_t))(v24 + 16);
  uint64_t v198 = (void (**)(char *, uint64_t, uint64_t))(v24 + 8);
  unsigned int v201 = a7 + 5;
  uint64_t v188 = (uint64_t (**)(uint64_t, uint64_t))(v203 + 8);
  do
  {
    while (1)
    {
      unsigned int v34 = __clz(__rbit32(v31));
      v31 &= v31 - 1;
      int v35 = *a1;
      LODWORD(v202) = v34;
      int v36 = 1 << v34;
      if (((1 << v34) & v35) != 0) {
        break;
      }
      int v33 = a1[1];
      if ((v33 & v36) == 0) {
        goto LABEL_4;
      }
      LODWORD(v203) = v31;
      v29.i32[0] = v33 & (v36 - 1);
      uint8x8_t v57 = (uint8x8_t)vcnt_s8(v29);
      v57.i16[0] = vaddlv_u8(v57);
      a2 = v211;
      uint64_t v58 = v209;
      uint64_t v59 = (uint64_t *)_HashNode.UnsafeHandle.childPtr(at:)(v57.u32[0], (uint64_t)v210, v211);
      uint64_t v60 = swift_getTupleTypeMetadata2();
      uint64_t v61 = *(void *)(v60 - 8);
      uint64_t result = v60 - 8;
      uint64_t v62 = *(void *)(v61 + 72);
      BOOL v63 = __OFSUB__(16, v62);
      uint64_t v64 = 16 - v62;
      if (v63)
      {
        __break(1u);
        return result;
      }
      Swift::Int v65 = v64 & ~(v64 >> 63);
      uint64_t v66 = v217;
      unint64_t v67 = (void *)type metadata accessor for _HashNode();
      uint64_t v187 = v67;
      _HashNode.ensureUnique(isUnique:withFreeSpace:)(v196 & 1, v65);
      _HashNode.removeItem(at:)(v192, v68, v202, v67);
      uint64_t v69 = *v59;
      uint64_t v70 = v59[1];
      swift_retain();
      uint64_t v186 = _HashNode.mapValuesToVoid(copy:extraBytes:)(0, 0, v69, v70, v66, v205, v58);
      uint64_t v196 = v71;
      swift_release();
      unint64_t v72 = *v200;
      uint64_t v73 = (uint64_t)v189;
      uint64_t v74 = v192;
      (*v200)(v189, v192, v66);
      int v75 = v190;
      v72(v190, v74, v66);
      uint64_t v76 = v209;
      unint64_t v77 = sub_24A5B85E4();
      ((void (*)(char *, uint64_t))*v198)(v75, v66);
      _HashNode.inserting(_:_:_:)(v201, v73, v78, v77, v186, v196, v66, v193, v212, v76);
      uint64_t v79 = v213;
      uint64_t v80 = v214;
      swift_release();
      sub_24A5B9AB0(v79, v80, v202, v187);
      swift_release();
      uint64_t result = (*v188)(v74, TupleTypeMetadata2);
      unsigned int v31 = v203;
      if (!v203)
      {
LABEL_31:
        unsigned int v81 = *((_DWORD *)a5 + 1);
        LODWORD(v196) = 1;
        a1 = v210;
        if (!v81) {
          goto LABEL_15;
        }
        goto LABEL_18;
      }
LABEL_13:
      ++v32;
      LODWORD(v196) = 1;
      a1 = v210;
    }
    v29.i32[0] = (v36 - 1) & v35;
    uint8x8_t v37 = (uint8x8_t)vcnt_s8(v29);
    v37.i16[0] = vaddlv_u8(v37);
    unsigned int v38 = v37.i32[0];
    LODWORD(v203) = v31;
    uint64_t v39 = _HashNode.UnsafeHandle.itemPtr(at:)(v32, (uint64_t)a5, (uint64_t)v207);
    uint64_t v40 = _HashNode.UnsafeHandle.itemPtr(at:)(v38, (uint64_t)a1, a2);
    uint64_t v41 = *v200;
    uint64_t v42 = v204;
    (*v200)(v204, v39, v217);
    uint64_t v43 = v197;
    v41((char *)v197, v40, v217);
    uint64_t v44 = v217;
    LOBYTE(v39) = sub_24A5BB530();
    uint64_t v45 = *v198;
    ((void (*)(void, uint64_t))*v198)(v43, v44);
    uint64_t v46 = v42;
    a5 = v206;
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v45)(v46, v44);
    unsigned int v31 = v203;
    if ((v39 & 1) == 0)
    {
      uint64_t v47 = v40;
      unsigned int v48 = v32;
      if (v196)
      {
        char v49 = v202 & 0x1F;
        v50.i32[0] = *(_DWORD *)nullsub_1(v215 + 16, v215 + 32, v217, MEMORY[0x263F8EE60] + 8, v209) & ~(-1 << v49);
        uint8x8_t v51 = (uint8x8_t)vcnt_s8(v50);
        v51.i16[0] = vaddlv_u8(v51);
        unsigned int v48 = v51.i32[0];
      }
      unint64_t v52 = v204;
      v41(v204, v47, v217);
      uint64_t v53 = v209;
      uint64_t v187 = (void *)sub_24A5B85E4();
      uint64_t v54 = ((uint64_t (*)(char *, uint64_t))v45)(v52, v217);
      MEMORY[0x270FA5388](v54);
      int v55 = v208;
      *(&v185 - 6) = v217;
      *(&v185 - 5) = (uint64_t)v55;
      *(&v185 - 4) = v205;
      *(&v185 - 3) = v53;
      uint64_t v184 = v47;
      unsigned int v56 = (void *)type metadata accessor for _HashNode();
      uint64_t result = _HashNode.ensureUniqueAndSpawnChild(isUnique:level:replacing:itemSlot:newHash:_:)(v196 & 1, v194, v202, v48, (unint64_t)v187, (uint64_t)sub_24A4BABC4, (uint64_t)(&v185 - 8), v56);
      a2 = v211;
      unsigned int v31 = v203;
      if (!v203) {
        goto LABEL_31;
      }
      goto LABEL_13;
    }
LABEL_4:
    ++v32;
    a1 = v210;
    a2 = v211;
  }
  while (v31);
  unsigned int v81 = *((_DWORD *)a5 + 1);
  if (!v81)
  {
LABEL_15:
    int v82 = 0;
    goto LABEL_35;
  }
LABEL_18:
  uint64_t v83 = 0;
  uint64_t v198 = (void (**)(char *, uint64_t, uint64_t))(v199 + 16);
  uint64_t v197 = (void (**)(uint64_t, uint64_t))(v199 + 8);
  uint64_t v194 = MEMORY[0x263F8EE60] + 8;
  uint64_t v84 = v205;
  while (2)
  {
    while (2)
    {
      unsigned int v100 = __clz(__rbit32(v81));
      v81 &= v81 - 1;
      int v101 = *a1;
      int v102 = 1 << v100;
      if (((1 << v100) & *a1) == 0)
      {
        int v103 = a1[1];
        if ((v103 & v102) != 0)
        {
          LODWORD(v200) = v100;
          v29.i32[0] = v103 & (v102 - 1);
          uint8x8_t v104 = (uint8x8_t)vcnt_s8(v29);
          v104.i16[0] = vaddlv_u8(v104);
          uint64_t v105 = v104.u32[0];
          long long v106 = a5;
          uint64_t v107 = v208;
          uint64_t v108 = v209;
          uint64_t v109 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v83, v106, v207, v217, v208, v209);
          uint64_t v111 = *v109;
          uint64_t v110 = v109[1];
          uint64_t v112 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v105, a1, v211, v217, v84, v108);
          uint64_t v113 = *v112;
          uint64_t v114 = v112[1];
          swift_retain();
          swift_retain();
          LOBYTE(v107) = _HashNode._union<A>(_:_:)(v201, v113, v114, v111, v110, v217, v107, v84, v108);
          uint64_t v116 = v115;
          uint64_t v118 = v117;
          swift_release();
          swift_release();
          if (v107)
          {
            uint64_t v119 = (void *)type metadata accessor for _HashNode();
            _HashNode.ensureUnique(isUnique:)(v196 & 1);
            sub_24A545D50(v200, v116, v118, v119);
            uint64_t result = swift_release();
            if (!v81) {
              goto LABEL_33;
            }
            goto LABEL_29;
          }
LABEL_21:
          uint64_t result = swift_release();
          a1 = v210;
          a5 = v206;
        }
        uint64_t v83 = (v83 + 1);
        if (!v81) {
          goto LABEL_34;
        }
        continue;
      }
      break;
    }
    LODWORD(v200) = v100;
    LODWORD(v203) = v81;
    v29.i32[0] = (v102 - 1) & v101;
    uint8x8_t v85 = (uint8x8_t)vcnt_s8(v29);
    v85.i16[0] = vaddlv_u8(v85);
    uint64_t v86 = v209;
    uint64_t v87 = _HashNode.UnsafeHandle.itemPtr(at:)(v85.u32[0], (uint64_t)a1, v211);
    uint64_t v88 = *v198;
    uint64_t v89 = (uint64_t)v204;
    (*v198)(v204, v87, v217);
    uint64_t v202 = sub_24A5B85E4();
    (*v197)(v89, v217);
    uint64_t v90 = v208;
    uint64_t v91 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v83, a5, v207, v217, v208, v86);
    uint64_t v93 = *v91;
    uint64_t v92 = v91[1];
    swift_retain();
    uint64_t v94 = _HashNode.mapValuesToVoid(copy:extraBytes:)(0, 0, v93, v92, v217, (uint64_t)v90, v86);
    uint64_t v96 = v95;
    swift_release();
    v88((char *)v89, v87, v217);
    _HashNode.inserting(_:_:_:)(v201, v89, v97, v202, v94, v96, v217, MEMORY[0x263F8EE60] + 8, v212, v86);
    LODWORD(v88) = v212[0];
    uint64_t v99 = v213;
    uint64_t v98 = v214;
    swift_release();
    if (v88 != 1)
    {
      uint64_t v84 = v205;
      unsigned int v81 = v203;
      goto LABEL_21;
    }
    long long v120 = (void *)type metadata accessor for _HashNode();
    _HashNode.ensureUnique(isUnique:)(v196 & 1);
    sub_24A545D50(v200, v99, v98, v120);
    uint64_t result = swift_release();
    uint64_t v84 = v205;
    unsigned int v81 = v203;
    if (v203)
    {
LABEL_29:
      uint64_t v83 = (v83 + 1);
      LODWORD(v196) = 1;
      a1 = v210;
      a5 = v206;
      continue;
    }
    break;
  }
LABEL_33:
  LODWORD(v196) = 1;
  a1 = v210;
  a5 = v206;
LABEL_34:
  int v82 = *((_DWORD *)a5 + 1);
LABEL_35:
  uint64_t v121 = v211;
  int v122 = v82 | *(_DWORD *)a5;
  int v123 = *a1;
  int v124 = ~v122;
  unsigned int v125 = *a1 & ~v122;
  if (v125)
  {
    LODWORD(v203) = ~v122;
    uint64_t v126 = __clz(__rbit32(v125));
    v29.i32[0] = v123 & ~(-1 << v126);
    uint8x8_t v127 = (uint8x8_t)vcnt_s8(v29);
    v127.i16[0] = vaddlv_u8(v127);
    uint64_t v128 = v217;
    uint64_t v129 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v127.u32[0], a1, v211, v217, v205, v209);
    uint64_t v130 = v199;
    uint64_t v131 = (void *)(v199 + 16);
    uint64_t v132 = *(void (**)(char *, uint64_t, uint64_t))(v199 + 16);
    uint64_t v133 = (uint64_t)v204;
    v132(v204, v129, v128);
    uint64_t v134 = (void *)type metadata accessor for _HashNode();
    _HashNode.ensureUniqueAndInsertItem(isUnique:_:at:)(v196 & 1, v133, v135, v126, v134);
    uint64_t v138 = *(uint64_t (**)(uint64_t, uint64_t))(v130 + 8);
    uint64_t v137 = v130 + 8;
    uint64_t v136 = v138;
    unsigned int v139 = (v125 - 1) & v125;
    uint64_t result = v138(v133, v128);
    if (v139)
    {
      uint64_t v207 = (void (*)(uint64_t, uint64_t, uint64_t))v132;
      uint64_t v208 = v131;
      uint64_t v199 = v137;
      uint64_t v141 = v209;
      a1 = v210;
      uint64_t v142 = v217;
      uint64_t v206 = v134;
      uint64_t v143 = v205;
      do
      {
        uint64_t v144 = __clz(__rbit32(v139));
        v139 &= v139 - 1;
        v140.i32[0] = *a1 & ~(-1 << v144);
        uint8x8_t v145 = (uint8x8_t)vcnt_s8(v140);
        v145.i16[0] = vaddlv_u8(v145);
        uint64_t v146 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v145.u32[0], a1, v211, v142, v143, v141);
        v207(v133, v146, v142);
        _HashNode.ensureUniqueAndInsertItem(isUnique:_:at:)(1, v133, v147, v144, v206);
        uint64_t result = v136(v133, v142);
      }
      while (v139);
      LODWORD(v196) = 1;
      uint64_t v121 = v211;
    }
    else
    {
      LODWORD(v196) = 1;
      a1 = v210;
      uint64_t v121 = v211;
    }
    int v124 = v203;
  }
  int v148 = a1[1];
  unsigned int v149 = v148 & v124;
  if ((v148 & v124) != 0)
  {
    uint64_t v150 = v217;
    uint64_t v151 = v209;
    uint64_t v208 = (void *)type metadata accessor for _HashNode();
    char v152 = __clz(__rbit32(v149));
    unsigned int v153 = (v149 - 1) & v149;
    v154.i32[0] = v148 & ~(-1 << v152);
    uint8x8_t v155 = (uint8x8_t)vcnt_s8(v154);
    v155.i16[0] = vaddlv_u8(v155);
    uint64_t v156 = v155.u32[0];
    _HashNode.ensureUnique(isUnique:withFreeSpace:)(v196 & 1, 16);
    uint64_t v157 = v205;
    long long v158 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v156, a1, v121, v150, v205, v151);
    uint64_t v159 = *v158;
    uint64_t v160 = v158[1];
    swift_retain();
    uint64_t v161 = _HashNode.mapValuesToVoid(copy:extraBytes:)(0, 0, v159, v160, v150, v157, v151);
    uint64_t v163 = v162;
    swift_release();
    uint64_t v164 = v163;
    uint64_t v165 = v208;
    sub_24A5B9AB0(v161, v164, v152, v208);
    uint64_t result = swift_release();
    if (v153)
    {
      uint64_t v167 = (uint64_t)v210;
      uint64_t v168 = v205;
      do
      {
        char v169 = __clz(__rbit32(v153));
        v153 &= v153 - 1;
        v166.i32[0] = *(_DWORD *)(v167 + 4) & ~(-1 << v169);
        uint8x8_t v170 = (uint8x8_t)vcnt_s8(v166);
        v170.i16[0] = vaddlv_u8(v170);
        uint64_t v171 = v170.u32[0];
        _HashNode.ensureUnique(isUnique:withFreeSpace:)(1, 16);
        uint64_t v172 = v217;
        uint64_t v173 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v171, v167, v211, v217, v168, v151);
        uint64_t v174 = *v173;
        uint64_t v175 = v173[1];
        swift_retain();
        uint64_t v176 = _HashNode.mapValuesToVoid(copy:extraBytes:)(0, 0, v174, v175, v172, v168, v151);
        uint64_t v177 = v165;
        uint64_t v179 = v178;
        swift_release();
        uint64_t v180 = v179;
        uint64_t v165 = v177;
        sub_24A5B9AB0(v176, v180, v169, v177);
        uint64_t result = swift_release();
      }
      while (v153);
    }
    char v181 = 1;
  }
  else
  {
    char v181 = v196;
  }
  uint64_t v182 = v195;
  *uint64_t v195 = v181 & 1;
  uint64_t v183 = v216;
  *((void *)v182 + 1) = v215;
  *((void *)v182 + 2) = v183;
  return result;
}

uint64_t sub_24A4B9C80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v8 = (char *)&v10 - v7;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))((char *)&v10 - v7, a2, a3);
  return sub_24A544CAC((uint64_t)v8, a1, TupleTypeMetadata2);
}

uint64_t sub_24A4B9D64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X3>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v62 = (char *)&v57 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*v21 == *v22)
  {
    uint64_t v74 = v9;
    uint64_t v60 = (unsigned char *)a4;
    uint64_t v69 = v19;
    uint64_t v23 = v15;
    uint64_t v72 = _HashNode.mapValuesToVoid(copy:extraBytes:)(0, 0, v18, v16, a6, v15, a9);
    uint64_t v73 = v24;
    uint64_t v66 = v23;
    uint64_t result = _HashNode.UnsafeHandle.reverseItems.getter();
    uint64_t v64 = v26;
    uint64_t v65 = result;
    uint64_t v27 = v69;
    unsigned int v28 = *v69;
    uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)*v69);
    v29.i16[0] = vaddlv_u8(v29);
    if (*v69 != v69[1]) {
      unsigned int v28 = v29.i32[0];
    }
    unsigned int v63 = v28;
    if (v28)
    {
      uint64_t v67 = a6;
      uint64_t v68 = a9;
      int v30 = 0;
      LODWORD(v31) = 0;
      uint64_t v58 = (uint64_t (**)(uint64_t, uint64_t))(v13 + 8);
      uint64_t v59 = (void (**)(char *, uint64_t, uint64_t))(v13 + 16);
      uint64_t v57 = MEMORY[0x263F8EE60] + 8;
      do
      {
        int v61 = v30;
        LODWORD(result) = v31;
        while (1)
        {
          uint64_t v31 = (result + 1);
          uint64_t v32 = v67;
          uint64_t v33 = v68;
          uint64_t v34 = _HashNode.UnsafeHandle.itemPtr(at:)(result, (uint64_t)v27, a2);
          uint64_t v70 = v65;
          uint64_t v71 = v64;
          uint64_t v35 = MEMORY[0x270FA5388](v34);
          uint64_t v36 = v66;
          *(&v57 - 6) = v32;
          *(&v57 - 5) = v36;
          *(&v57 - 4) = a8;
          *(&v57 - 3) = v33;
          uint64_t v56 = v35;
          swift_getTupleTypeMetadata2();
          sub_24A5BBDB0();
          swift_getWitnessTable();
          uint64_t v37 = v74;
          char v38 = sub_24A5BB900();
          uint64_t v74 = v37;
          if ((v38 & 1) == 0) {
            break;
          }
          uint64_t result = v31;
          uint64_t v27 = v69;
          if (v31 >= v63)
          {
            LOBYTE(v30) = v61;
            goto LABEL_14;
          }
        }
        uint64_t v39 = (uint64_t)v62;
        uint64_t v40 = v67;
        (*v59)(v62, v34, v67);
        uint64_t v41 = (void *)type metadata accessor for _HashNode();
        _HashNode.ensureUniqueAndAppendCollision(isUnique:_:)(v61 & 1, v39, v42, v41);
        uint64_t result = (*v58)(v39, v40);
        int v30 = 1;
        uint64_t v27 = v69;
      }
      while (v31 < v63);
    }
    else
    {
      LOBYTE(v30) = 0;
    }
LABEL_14:
    uint64_t v54 = v60;
    *uint64_t v60 = v30 & 1;
    uint64_t v55 = v73;
    *((void *)v54 + 1) = v72;
    *((void *)v54 + 2) = v55;
  }
  else
  {
    LODWORD(v74) = v14;
    uint64_t v43 = v17;
    uint64_t v44 = (unint64_t *)a2;
    uint64_t v45 = _HashNode.mapValuesToVoid(copy:extraBytes:)(0, 0, v18, v16, a6, v15, a9);
    uint64_t v69 = v46;
    unint64_t v47 = *a3;
    uint64_t v48 = _HashNode.mapValuesToVoid(copy:extraBytes:)(0, 0, v43, a5, a6, a8, a9);
    uint64_t v51 = sub_24A564EBC(v74, v45, (uint64_t)v69, v47, v48, v49, *v44, a6, v50, MEMORY[0x263F8EE60] + 8, a9);
    uint64_t v53 = v52;
    swift_release();
    uint64_t result = swift_release();
    *(unsigned char *)a4 = 1;
    *(void *)(a4 + 8) = v51;
    *(void *)(a4 + 16) = v53;
  }
  return result;
}

uint64_t sub_24A4BA16C@<X0>(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, unsigned int a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v16 = (int *)nullsub_1(a2 + 16, a2 + 32, a7, a10, a11);
  return sub_24A4BA21C(v16, v17, a1, a4, a5, a6, a2, a8, v18, a3, a7, a9, a10, a11);
}

uint64_t sub_24A4BA21C@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void *a3@<X3>, unsigned int a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, int8x8_t a9@<D0>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v66 = a6;
  uint64_t v67 = a8;
  uint64_t v70 = a5;
  uint64_t v17 = *a3 >> a4;
  unsigned int v65 = v17 & 0x1F;
  int v18 = *a1;
  int v19 = 1 << v17;
  if ((v19 & *a1) != 0)
  {
    uint64_t v63 = a12;
    uint64_t v64 = a10;
    uint64_t v60 = a7;
    uint64_t v62 = v14;
    a9.i32[0] = (v19 - 1) & v18;
    uint8x8_t v20 = (uint8x8_t)vcnt_s8(a9);
    v20.i16[0] = vaddlv_u8(v20);
    unsigned __int32 v61 = v20.i32[0];
    _HashNode.UnsafeHandle.itemPtr(at:)(v20.u32[0], (uint64_t)a1, a2);
    if (!_HashNode.UnsafeHandle.hasSingletonItem.getter(a1)) {
      goto LABEL_7;
    }
    uint64_t v21 = v63;
    v59[1] = v59;
    uint64_t v68 = _HashNode.UnsafeHandle.reverseItems.getter();
    uint64_t v69 = v22;
    MEMORY[0x270FA5388](v68);
    swift_getTupleTypeMetadata2();
    sub_24A5BBDB0();
    swift_getWitnessTable();
    if (sub_24A5BB900())
    {
      uint64_t v23 = v66;
      uint64_t v24 = v67;
      *(unsigned char *)uint64_t v67 = 0;
      uint64_t result = _HashNode.mapValuesToVoid(copy:extraBytes:)(0, 0, v70, v23, a11, v21, a14);
      *(void *)(v24 + 8) = result;
      *(void *)(v24 + 16) = v26;
    }
    else
    {
LABEL_7:
      uint64_t v41 = v66;
      uint64_t v40 = v67;
      unsigned int v42 = v65;
      uint64_t v43 = _HashNode.mapValuesToVoid(copy:extraBytes:)(0, 0, v60, v64, a11, a13, a14);
      uint64_t v45 = v44;
      uint64_t v46 = _HashNode.mapValuesToVoid(copy:extraBytes:)(0, 0, v70, v41, a11, v63, a14);
      uint64_t v48 = _HashNode.copyNodeAndPushItemIntoNewChild(level:_:at:itemSlot:)(a4, v46, v47, v42, v61, v43, v45, a11, MEMORY[0x263F8EE60] + 8, a14);
      uint64_t v50 = v49;
      uint64_t result = swift_release();
      *(unsigned char *)uint64_t v40 = 1;
      *(void *)(v40 + 8) = v48;
      *(void *)(v40 + 16) = v50;
    }
  }
  else
  {
    int v27 = a1[1];
    if ((v27 & v19) != 0)
    {
      a9.i32[0] = v27 & (v19 - 1);
      uint8x8_t v28 = (uint8x8_t)vcnt_s8(a9);
      v28.i16[0] = vaddlv_u8(v28);
      LODWORD(v63) = v28.i32[0];
      uint64_t v64 = a10;
      int v30 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v28.u32[0], a1, a2, a11, a13, a14);
      uint64_t v31 = *v30;
      uint64_t v32 = v30[1];
      swift_retain();
      _HashNode._union<A>(_:_:)(a4 + 5, v31, v32, v70, v66, a11, a12, a13, a14);
      uint64_t v34 = v33;
      uint64_t v36 = v35;
      swift_release();
      uint64_t v37 = v67;
      *(void *)(v67 + 8) = _HashNode.mapValuesToVoid(copy:extraBytes:)(1, 0, a7, a10, a11, a13, a14);
      *(void *)(v37 + 16) = v38;
      uint64_t v39 = (void *)type metadata accessor for _HashNode();
      sub_24A545C9C(v65, v63, v34, v36, v39);
      uint64_t result = swift_release();
      *(unsigned char *)uint64_t v37 = 1;
    }
    else
    {
      uint64_t v51 = _HashNode.mapValuesToVoid(copy:extraBytes:)(1, 16, a7, a10, a11, a13, a14);
      uint64_t v52 = v66;
      uint64_t v53 = v67;
      *(void *)(v67 + 8) = v51;
      *(void *)(v53 + 16) = v54;
      uint64_t v55 = _HashNode.mapValuesToVoid(copy:extraBytes:)(0, 0, v70, v52, a11, a12, a14);
      uint64_t v57 = v56;
      uint64_t v58 = (void *)type metadata accessor for _HashNode();
      sub_24A5B9AB0(v55, v57, v65, v58);
      uint64_t result = swift_release();
      *(unsigned char *)uint64_t v53 = 1;
    }
  }
  return result;
}

uint64_t sub_24A4BA66C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  char v7 = sub_24A5BB530();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, a3);
  return v7 & 1;
}

uint64_t sub_24A4BA76C@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  nullsub_1(a3 + 16, a3 + 32, a8, a11, a12);
  return sub_24A4BA81C(v18, a5, a1, a2, a6, a7, a3, a9, v19, a4, a8, a10, a11, a12);
}

uint64_t sub_24A4BA81C@<X0>(void *a1@<X1>, unsigned int a2@<W2>, _DWORD *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, int8x8_t a9@<D0>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v17 = (*a1 >> a2) & 0x1FLL;
  int v18 = 1 << (*a1 >> a2);
  if ((v18 & *a3) != 0)
  {
    a9.i32[0] = (v18 - 1) & *a3;
    uint8x8_t v19 = (uint8x8_t)vcnt_s8(a9);
    v19.i16[0] = vaddlv_u8(v19);
    uint64_t v20 = a8;
    unsigned __int32 v52 = v19.i32[0];
    uint64_t v22 = _HashNode.mapValuesToVoid(copy:extraBytes:)(0, 0, a5, a6, a11, a12, a14);
    uint64_t v24 = v23;
    uint64_t v25 = _HashNode.mapValuesToVoid(copy:extraBytes:)(0, 0, a7, a10, a11, a13, a14);
    uint64_t v27 = _HashNode.copyNodeAndPushItemIntoNewChild(level:_:at:itemSlot:)(a2, v25, v26, v17, v52, v22, v24, a11, MEMORY[0x263F8EE60] + 8, a14);
    uint64_t v29 = v28;
    uint64_t result = swift_release();
    *(unsigned char *)uint64_t v20 = 1;
LABEL_3:
    *(void *)(v20 + 8) = v27;
    *(void *)(v20 + 16) = v29;
    return result;
  }
  int v31 = a3[1];
  if ((v31 & v18) != 0)
  {
    a9.i32[0] = v31 & (v18 - 1);
    uint8x8_t v32 = (uint8x8_t)vcnt_s8(a9);
    v32.i16[0] = vaddlv_u8(v32);
    unsigned int v54 = v32.i32[0];
    uint64_t v34 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v32.u32[0], a3, a4, a11, a12, a14);
    uint64_t v36 = *v34;
    uint64_t v35 = v34[1];
    swift_retain();
    char v37 = _HashNode._union<A>(_:_:)(a2 + 5, a7, a10, v36, v35, a11, a12, a13, a14);
    uint64_t v39 = v38;
    uint64_t v41 = v40;
    swift_release();
    if ((v37 & 1) == 0)
    {
      *(unsigned char *)a8 = 0;
      uint64_t v27 = _HashNode.mapValuesToVoid(copy:extraBytes:)(0, 0, a5, a6, a11, a12, a14);
      uint64_t v20 = a8;
      uint64_t v29 = v51;
      uint64_t result = swift_release();
      goto LABEL_3;
    }
    *(void *)(a8 + 8) = _HashNode.mapValuesToVoid(copy:extraBytes:)(1, 0, a5, a6, a11, a12, a14);
    *(void *)(a8 + 16) = v42;
    uint64_t v43 = (void *)type metadata accessor for _HashNode();
    sub_24A545C9C(v17, v54, v39, v41, v43);
    uint64_t result = swift_release();
    *(unsigned char *)a8 = 1;
  }
  else
  {
    char v44 = (*a1 >> a2) & 0x1F;
    *(void *)(a8 + 8) = _HashNode.mapValuesToVoid(copy:extraBytes:)(1, 16, a5, a6, a11, a12, a14);
    *(void *)(a8 + 16) = v46;
    uint64_t v47 = _HashNode.mapValuesToVoid(copy:extraBytes:)(0, 0, a7, a10, a11, a13, a14);
    uint64_t v49 = v48;
    uint64_t v50 = (void *)type metadata accessor for _HashNode();
    sub_24A5B9AB0(v47, v49, v44, v50);
    uint64_t result = swift_release();
    *(unsigned char *)a8 = 1;
  }
  return result;
}

uint64_t sub_24A4BAB80(uint64_t a1)
{
  return sub_24A4BAB9C(a1) & 1;
}

uint64_t sub_24A4BAB9C(uint64_t a1)
{
  return sub_24A4BA66C(a1, *(void *)(v1 + 48), *(void *)(v1 + 16)) & 1;
}

uint64_t sub_24A4BABC8(uint64_t a1)
{
  return sub_24A4B9C80(a1, *(void *)(v1 + 48), *(void *)(v1 + 16));
}

uint64_t _HashTable.Header._scaleAndSeed.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*_HashTable.Header._scaleAndSeed.modify())()
{
  return nullsub_1;
}

uint64_t _HashTable.Header._reservedScaleAndBias.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _HashTable.Header._reservedScaleAndBias.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*_HashTable.Header._reservedScaleAndBias.modify())()
{
  return nullsub_1;
}

uint64_t _HashTable.Header.scale.getter(char a1)
{
  return a1 & 0x3F;
}

uint64_t _HashTable.Header.reservedScale.getter(uint64_t a1, char a2)
{
  return a2 & 0x3F;
}

uint64_t _HashTable.Header.bias.getter(uint64_t a1, uint64_t a2)
{
  return a2 >> 6;
}

uint64_t _HashTable.Header.reservedScale.setter(uint64_t result)
{
  *(void *)(v1 + 8) = *(void *)(v1 + 8) & 0xFFFFFFFFFFFFFFC0 | result & 0x3F;
  return result;
}

void *(*_HashTable.Header.reservedScale.modify(uint64_t *a1))(void *result)
{
  *a1 = *(void *)(v1 + 8) & 0x3FLL;
  a1[1] = v1;
  return sub_24A4BAC9C;
}

void *sub_24A4BAC9C(void *result)
{
  *(void *)(result[1] + 8) = *(void *)(result[1] + 8) & 0xFFFFFFFFFFFFFFC0 | *result & 0x3FLL;
  return result;
}

uint64_t _HashTable.Header.bias.setter(uint64_t result)
{
  uint64_t v2 = 1 << *v1;
  BOOL v3 = __OFSUB__(v2, 1);
  uint64_t v4 = v2 - 1;
  if (v3)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = (v4 & (result >> 63)) + result;
    if (v5 < v4) {
      uint64_t v4 = 0;
    }
    v1[1] = v1[1] & 0x3FLL | ((v5 - v4) << 6);
  }
  return result;
}

uint64_t (*_HashTable.Header.bias.modify(uint64_t *a1))(uint64_t *a1)
{
  *a1 = *(uint64_t *)(v1 + 8) >> 6;
  a1[1] = v1;
  return sub_24A4BAD1C;
}

uint64_t sub_24A4BAD1C(uint64_t *a1)
{
  return _HashTable.Header.bias.setter(*a1);
}

uint64_t _HashTable.Header.capacity.getter(uint64_t result)
{
  if ((result & 0x3Fu) < 5uLL) {
    return 15;
  }
  double v1 = (double)(1 << (result & 0x3F)) * 0.75;
  if ((~*(void *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v1 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v1 < 9.22337204e18) {
    return (uint64_t)v1;
  }
LABEL_9:
  __break(1u);
  return result;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t _s14descr26FE1DA71C6HeaderVwet(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t _s14descr26FE1DA71C6HeaderVwst(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

uint64_t BigString.description.getter()
{
  sub_24A497498((uint64_t)v0);
  return _sSS19CollectionsInternalEySSAA9BigStringVcfC_0(v0);
}

uint64_t sub_24A4BAE34()
{
  long long v1 = v0[1];
  v3[0] = *v0;
  v3[1] = v1;
  v3[2] = v0[2];
  sub_24A497498((uint64_t)v3);
  return _sSS19CollectionsInternalEySSAA9BigStringVcfC_0(v3);
}

uint64_t Optional._take()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 32))(a2, v2, a1);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 56);
  return v4(v2, 1, 1);
}

uint64_t BitSet.symmetricDifference(_:)(int8x16_t *a1, int8x16_t *a2)
{
  unint64_t v4 = a2[1].u64[0];
  unint64_t v5 = a1[1].u64[0];
  if (v5 <= v4) {
    uint64_t v6 = a2[1].i64[0];
  }
  else {
    uint64_t v6 = a1[1].i64[0];
  }
  if (v6)
  {
    uint64_t result = sub_24A5BB990();
    *(void *)(result + 16) = v6;
  }
  else
  {
    uint64_t result = MEMORY[0x263F8EE78];
  }
  unint64_t v8 = v5 - v4;
  if (v5 >= v4) {
    unint64_t v9 = v4;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 < 0xA)
    {
      uint64_t v10 = 0;
LABEL_13:
      unint64_t v11 = v9 - v10;
      uint64_t v12 = 8 * v10 + 32;
      uint64_t v13 = (uint64_t *)(result + v12);
      uint64_t v14 = (uint64_t *)((char *)a1->i64 + v12);
      uint64_t v15 = (uint64_t *)((char *)a2->i64 + v12);
      do
      {
        uint64_t v17 = *v15++;
        uint64_t v16 = v17;
        uint64_t v18 = *v14++;
        *v13++ = v18 ^ v16;
        --v11;
      }
      while (v11);
      goto LABEL_15;
    }
    uint64_t v10 = 0;
    if ((unint64_t)(result - (void)a2) < 0x20) {
      goto LABEL_13;
    }
    if ((unint64_t)(result - (void)a1) < 0x20) {
      goto LABEL_13;
    }
    uint64_t v10 = v9 & 0x7FFFFFFFFFFFFFFCLL;
    uint64_t v43 = a2 + 3;
    char v44 = a1 + 3;
    uint64_t v45 = (int8x16_t *)(result + 48);
    uint64_t v46 = v9 & 0x7FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v47 = veorq_s8(*v44, *v43);
      v45[-1] = veorq_s8(v44[-1], v43[-1]);
      *uint64_t v45 = v47;
      v43 += 2;
      v44 += 2;
      v45 += 2;
      v46 -= 4;
    }
    while (v46);
    if (v9 != v10) {
      goto LABEL_13;
    }
  }
LABEL_15:
  unint64_t v19 = v4 - v5;
  if (v4 < v5)
  {
    if (v8 < 0xC) {
      goto LABEL_21;
    }
    uint64_t v20 = 8 * v4;
    if (8 * v4 + result - ((unint64_t)a1 + 8 * v4) < 0x20) {
      goto LABEL_21;
    }
    v4 += v8 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v21 = v20 + 48;
    uint64_t v22 = (_OWORD *)(result + v20 + 48);
    uint64_t v23 = &a1->i8[v21];
    unint64_t v24 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      long long v25 = *(_OWORD *)v23;
      *(v22 - 1) = *((_OWORD *)v23 - 1);
      *uint64_t v22 = v25;
      v22 += 2;
      v23 += 32;
      v24 -= 4;
    }
    while (v24);
    if (v8 != (v8 & 0xFFFFFFFFFFFFFFFCLL))
    {
LABEL_21:
      unint64_t v26 = v5 - v4;
      uint64_t v27 = 8 * v4 + 32;
      uint64_t v28 = (void *)(result + v27);
      uint64_t v29 = (uint64_t *)((char *)a1->i64 + v27);
      do
      {
        uint64_t v30 = *v29++;
        *v28++ = v30;
        --v26;
      }
      while (v26);
    }
    goto LABEL_33;
  }
  if (v5 == v4) {
    goto LABEL_33;
  }
  if (v5 < v4)
  {
    if (v19 < 0xC) {
      goto LABEL_31;
    }
    uint64_t v31 = 8 * v5;
    if (8 * v5 + result - ((unint64_t)a2 + 8 * v5) < 0x20) {
      goto LABEL_31;
    }
    v5 += v19 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v32 = v31 + 48;
    uint64_t v33 = (_OWORD *)(result + v31 + 48);
    uint64_t v34 = &a2->i8[v32];
    unint64_t v35 = v19 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      long long v36 = *(_OWORD *)v34;
      *(v33 - 1) = *((_OWORD *)v34 - 1);
      *uint64_t v33 = v36;
      v33 += 2;
      v34 += 32;
      v35 -= 4;
    }
    while (v35);
    if (v19 != (v19 & 0xFFFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      unint64_t v37 = v4 - v5;
      uint64_t v38 = 8 * v5 + 32;
      uint64_t v39 = (void *)(result + v38);
      uint64_t v40 = (uint64_t *)((char *)a2->i64 + v38);
      do
      {
        uint64_t v41 = *v40++;
        *v39++ = v41;
        --v37;
      }
      while (v37);
    }
LABEL_33:
    if (v6)
    {
      if (*(void *)(result + 32 + 8 * v6 - 8))
      {
        uint64_t v42 = v6;
LABEL_48:
        *(void *)(result + 16) = v42;
        return result;
      }
      uint64_t v48 = v6;
      while (1)
      {
        uint64_t v42 = v48 - 1;
        if (v48 - 1 < 1) {
          break;
        }
        if (*(void *)(result + 16 + 8 * v48--))
        {
          if (v6 >= v42) {
            goto LABEL_48;
          }
          __break(1u);
          break;
        }
      }
    }
    uint64_t v42 = 0;
    goto LABEL_48;
  }
  __break(1u);
  return result;
}

uint64_t BitSet.symmetricDifference(_:)(int8x16_t *a1, uint64_t a2, int8x16_t *a3)
{
  return BitSet.symmetricDifference(_:)(a1, a3);
}

uint64_t BitSet.symmetricDifference(_:)(uint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v10 = (char *)a3;
  if (((a2 | result) & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  char v3 = (char *)a3;
  unint64_t v4 = a2;
  unint64_t v5 = result;
  if (result == a2)
  {
    swift_bridgeObjectRetain();
    return (uint64_t)v3;
  }
  unint64_t v6 = (a2 + 63) >> 6;
  unint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = v6 - v7;
  if (v6 <= v7)
  {
    swift_bridgeObjectRetain();
LABEL_8:
    char v9 = 1;
    if (swift_isUniquelyReferenced_nonNull_native())
    {
LABEL_9:
      _UnsafeBitSet.formSymmetricDifference(_:)(v5, v4);
      uint64_t v10 = v3;
      sub_24A54A3A0(&v9, (uint64_t *)&v10);
      return (uint64_t)v10;
    }
LABEL_12:
    char v3 = sub_24A499D60((uint64_t)v3);
    goto LABEL_9;
  }
  if ((uint64_t)(v6 - v7) >= 0)
  {
    swift_bridgeObjectRetain();
    sub_24A4D5F98(v8, 0);
    char v3 = v10;
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t BitSet.symmetricDifference<A>(_:)(uint64_t a1, int8x16_t *a2, ValueMetadata *a3)
{
  Description = (void (**)(char *, void, ValueMetadata *))a3[-1].Description;
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_26979AEC0);
  Description[2](v8, a1, a3);
  if ((ValueMetadata *)v9 == a3)
  {
    swift_dynamicCast();
    uint64_t v11 = BitSet.symmetricDifference(_:)(v13[0], v13[1], (uint64_t)a2);
  }
  else
  {
    uint64_t v10 = (int8x16_t *)BitSet.init<A>(_:)((uint64_t)v8, a3);
    uint64_t v11 = BitSet.symmetricDifference(_:)(v10, a2);
    swift_bridgeObjectRelease();
  }
  ((void (*)(uint64_t, ValueMetadata *))Description[1])(a1, a3);
  return v11;
}

unint64_t BigString.index(after:)(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  return sub_24A4BB408(a1, a2, a3, a4, 1uLL);
}

unint64_t BigString.index(before:)(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  return sub_24A4BB408(a1, a2, a3, a4, 0xFFFFFFFFFFFFFFFFLL);
}

unint64_t sub_24A4BB408(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  return sub_24A4A7FB4(a1, a2, a3, a4, a5) & 0xFFFFFFFFFFFFF8FFLL | 0x300;
}

unint64_t BigString.index(_:offsetBy:)(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  return sub_24A4A7FB4(a1, a2, a3, a4, a5) & 0xFFFFFFFFFFFFF8FFLL | 0x300;
}

unint64_t BigString.index(_:offsetBy:limitedBy:)(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, int64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9)
{
  if (a5 < 0)
  {
    if (a1 >> 10 < a6 >> 10
      || (uint64_t)_s19CollectionsInternal9BigStringV8distance4from2toSiAC5IndexV_AHtF_0(a1, a2, a3, a4, a6, a7, a8, a9) <= a5)
    {
      return sub_24A4A7FB4(a1, a2, a3, a4, a5) & 0xFFFFFFFFFFFFF8FFLL | 0x300;
    }
    return 0;
  }
  if (a6 >> 10 >= a1 >> 10
    && (uint64_t)_s19CollectionsInternal9BigStringV8distance4from2toSiAC5IndexV_AHtF_0(a1, a2, a3, a4, a6, a7, a8, a9) < a5)
  {
    return 0;
  }
  return sub_24A4A7FB4(a1, a2, a3, a4, a5) & 0xFFFFFFFFFFFFF8FFLL | 0x300;
}

uint64_t BigString.subscript.getter(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  sub_24A58F608(a1, a2, a3, a4, &v5);
  return v5;
}

unint64_t BigString.index(roundingUp:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t result = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(a1, a2, a3, a4);
  if ((result ^ a1) >= 0x400) {
    return sub_24A4A7FB4(result, v6, v7, v8, 1uLL) & 0xFFFFFFFFFFFFF8FFLL | 0x300;
  }
  return result;
}

uint64_t BigString.count.getter()
{
  if (*v0) {
    return v0[1];
  }
  else {
    return 0;
  }
}

unint64_t sub_24A4BB5B4@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  return sub_24A4BB924(a1, 0xFFFFFFFFFFFFFFFFLL, a2);
}

unint64_t sub_24A4BB5BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A4BB98C(a1, a2, a3, 0xFFFFFFFFFFFFFFFFLL);
}

void sub_24A4BB5D0(void *a1@<X8>)
{
  *a1 = 768;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 1;
}

void sub_24A4BB5E4(uint64_t *a1@<X8>)
{
  if (*v1) {
    uint64_t v2 = (v1[4] << 11) | 0x300;
  }
  else {
    uint64_t v2 = 768;
  }
  *a1 = v2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 1;
}

void (*sub_24A4BB60C(void *a1, unint64_t *a2))(void **a1)
{
  uint64_t v5 = malloc(0x48uLL);
  *a1 = v5;
  unint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  unint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  long long v10 = v2[1];
  *uint64_t v5 = *v2;
  v5[1] = v10;
  void v5[2] = v2[2];
  sub_24A58F608(v6, v7, v8, v9, &v14);
  uint64_t v11 = v14;
  uint64_t v12 = v15;
  *((void *)v5 + 8) = v15;
  *((void *)v5 + 6) = v11;
  *((void *)v5 + 7) = v12;
  return sub_24A4A4254;
}

__n128 sub_24A4BB69C@<Q0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[2];
  uint64_t v7 = a1[3];
  unint64_t v8 = a1[6];
  uint64_t v29 = a1[5];
  unint64_t v30 = a1[4];
  uint64_t v9 = a1[7];
  long long v10 = v2[1];
  v31[0] = *v2;
  long long v11 = *v2;
  long long v12 = v2[2];
  v31[1] = v10;
  v31[2] = v12;
  __n128 v27 = (__n128)v2[1];
  long long v28 = v11;
  uint64_t v13 = *((void *)v2 + 4);
  uint64_t v14 = *((void *)v2 + 5);
  sub_24A4974C4((uint64_t)v31, (uint64_t)v32);
  sub_24A497498((uint64_t)v32);
  unint64_t v15 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(v4, v5, v6, v7);
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  unint64_t v22 = _s19CollectionsInternal9BigStringV5index12roundingDownAC5IndexVAG_tF_0(v30, v29, v8, v9);
  __n128 result = v27;
  *(_OWORD *)a2 = v28;
  *(__n128 *)(a2 + 16) = v27;
  *(void *)(a2 + 32) = v13;
  *(void *)(a2 + 40) = v14;
  *(void *)(a2 + 48) = v15;
  *(void *)(a2 + 56) = v17;
  *(void *)(a2 + 64) = v19;
  *(void *)(a2 + 72) = v21;
  *(void *)(a2 + 80) = v22;
  *(void *)(a2 + 88) = v24;
  *(void *)(a2 + 96) = v25;
  *(void *)(a2 + 104) = v26;
  return result;
}

uint64_t sub_24A4BB798@<X0>(uint64_t a1@<X8>)
{
  long long v2 = *v1;
  long long v3 = v1[1];
  *(_OWORD *)a1 = *v1;
  *(_OWORD *)(a1 + 16) = v3;
  long long v4 = v1[2];
  *(_OWORD *)(a1 + 32) = v4;
  uint64_t v5 = 768;
  *(void *)(a1 + 48) = 768;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 1;
  if ((void)v2) {
    uint64_t v5 = ((void)v4 << 11) | 0x300;
  }
  *(void *)(a1 + 80) = v5;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 1;
  return swift_unknownObjectRetain();
}

BOOL sub_24A4BB7D8()
{
  return !*v0 || v0[4] == 0;
}

uint64_t sub_24A4BB7F0()
{
  if (*v0) {
    return v0[1];
  }
  else {
    return 0;
  }
}

unint64_t sub_24A4BB800@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t result = sub_24A4A7FB4(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
  *a3 = result & 0xFFFFFFFFFFFFF8FFLL | 0x300;
  a3[1] = v5;
  a3[2] = v6;
  a3[3] = v7;
  return result;
}

unint64_t sub_24A4BB860@<X0>(uint64_t a1@<X0>, int64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t result = BigString.index(_:offsetBy:limitedBy:)(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), a2, *(void *)a3, *(void *)(a3 + 8), *(void *)(a3 + 16), *(void *)(a3 + 24));
  *a4 = result;
  a4[1] = v6;
  a4[2] = v7;
  a4[3] = v8;
  return result;
}

unint64_t sub_24A4BB8C8(uint64_t a1, uint64_t a2)
{
  return _s19CollectionsInternal9BigStringV8distance4from2toSiAC5IndexV_AHtF_0(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16), *(void *)(a2 + 24));
}

unint64_t sub_24A4BB91C@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  return sub_24A4BB924(a1, 1uLL, a2);
}

unint64_t sub_24A4BB924@<X0>(uint64_t a1@<X0>, unint64_t a2@<X3>, unint64_t *a3@<X8>)
{
  unint64_t result = sub_24A4A7FB4(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
  *a3 = result & 0xFFFFFFFFFFFFF8FFLL | 0x300;
  a3[1] = v5;
  a3[2] = v6;
  a3[3] = v7;
  return result;
}

unint64_t sub_24A4BB984(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A4BB98C(a1, a2, a3, 1uLL);
}

unint64_t sub_24A4BB98C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t result = sub_24A4A7FB4(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), a4);
  *(void *)a1 = result & 0xFFFFFFFFFFFFF8FFLL | 0x300;
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v8;
  return result;
}

unint64_t sub_24A4BB9F0()
{
  unint64_t result = qword_26979B028;
  if (!qword_26979B028)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979B028);
  }
  return result;
}

unint64_t sub_24A4BBA48()
{
  unint64_t result = qword_26979B030;
  if (!qword_26979B030)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26979B038);
    sub_24A4BBABC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979B030);
  }
  return result;
}

unint64_t sub_24A4BBABC()
{
  unint64_t result = qword_26979B040;
  if (!qword_26979B040)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979B040);
  }
  return result;
}

unint64_t sub_24A4BBB14()
{
  unint64_t result = qword_26979B048;
  if (!qword_26979B048)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979B048);
  }
  return result;
}

unint64_t sub_24A4BBB6C()
{
  unint64_t result = qword_26979B050;
  if (!qword_26979B050)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26979B038);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979B050);
  }
  return result;
}

uint64_t OrderedSet.subtract(_:)()
{
  swift_getWitnessTable();
  uint64_t result = OrderedSet._subtracting<A>(_:)();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

{
  uint64_t *v0;
  uint64_t result;
  uint64_t v2;

  swift_getWitnessTable();
  uint64_t result = OrderedSet._subtracting<A>(_:)();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t OrderedSet.subtract<A>(_:)()
{
  uint64_t result = OrderedSet._subtracting<A>(_:)();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t TreeDictionary.filter(_:)(uint64_t (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v38[1] = a5;
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v13 = type metadata accessor for _HashNode.Builder();
  uint64_t v40 = *(void *)(v13 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)v38 - v17;
  uint64_t v39 = v19;
  uint64_t v20 = sub_24A5BBD20();
  uint64_t v41 = *(void *)(v20 - 8);
  uint64_t v42 = v20;
  uint64_t v21 = MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)v38 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v25 = (char *)v38 - v24;
  uint64_t v26 = a6;
  uint64_t v27 = v43;
  uint64_t v28 = v44;
  uint64_t v43 = v26;
  uint64_t v29 = v45;
  _HashNode.filter(_:_:)(0, a1, v27, v44, a4, v26, a7, a8, (uint64_t)v38 - v24);
  if (!v29)
  {
    uint64_t v45 = 0;
    v38[0] = a4;
    (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v23, v25, v42);
    uint64_t v30 = v39;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v23, 1, v39) == 1)
    {
      uint64_t v31 = v42;
      uint64_t v32 = *(void (**)(char *, uint64_t))(v41 + 8);
      v32(v25, v42);
      v32(v23, v31);
      swift_retain();
    }
    else
    {
      uint64_t v33 = v40;
      (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v18, v23, v30);
      (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v16, v18, v30);
      uint64_t v34 = sub_24A5566C8(v30);
      uint64_t v36 = v35;
      (*(void (**)(char *, uint64_t))(v33 + 8))(v18, v30);
      (*(void (**)(char *, uint64_t))(v41 + 8))(v25, v42);
      return TreeDictionary.init(_new:)(v34, v36, v43, a7, a8);
    }
  }
  return v28;
}

uint64_t TreeDictionary.removeAll(where:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *v3;
  uint64_t v6 = v3[1];
  uint64_t v7 = v3[2];
  uint64_t v8 = a3[3];
  uint64_t v17 = a3[2];
  uint64_t v18 = v8;
  uint64_t v19 = a3[4];
  uint64_t v20 = a1;
  uint64_t v21 = a2;
  swift_retain();
  uint64_t v9 = TreeDictionary.filter(_:)((uint64_t (*)(char *, char *))sub_24A4BC3AC, (uint64_t)&v16, v5, v6, v7, v17, v8, v19);
  if (v4) {
    return swift_release();
  }
  uint64_t v13 = v9;
  uint64_t v14 = v10;
  uint64_t v15 = v11;
  swift_release();
  uint64_t result = swift_release();
  *long long v3 = v13;
  v3[1] = v14;
  v3[2] = v15;
  return result;
}

uint64_t sub_24A4BC0DC(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, char *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v31 = a4;
  uint64_t v32 = a3;
  uint64_t v37 = a2;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v34 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  long long v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  uint64_t v15 = (char *)&v29 - v14;
  uint64_t v29 = (char *)&v29 + *(int *)(v13 + 48) - v14;
  uint64_t v16 = v29;
  uint64_t v33 = *(void *)(a5 - 8);
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 16);
  v17((char *)&v29 - v14, a1, a5);
  uint64_t v18 = a6;
  uint64_t v30 = *(void *)(a6 - 8);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v30 + 16);
  uint64_t v20 = v16;
  uint64_t v21 = v18;
  v19(v20, v37);
  uint64_t v36 = TupleTypeMetadata2;
  uint64_t v22 = &v12[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v37 = a5;
  v17(v12, (uint64_t)v15, a5);
  ((void (*)(char *, char *, uint64_t))v19)(v22, v29, v21);
  uint64_t v23 = v12;
  uint64_t v24 = v35;
  char v25 = v32(v12, v22);
  if (v24)
  {
    (*(void (**)(char *, uint64_t))(v34 + 8))(v15, v36);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v22, v21);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v12, v37);
  }
  else
  {
    char v27 = v25;
    (*(void (**)(char *, uint64_t))(v34 + 8))(v15, v36);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v22, v21);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v23, v37);
    char v26 = v27 ^ 1;
  }
  return v26 & 1;
}

uint64_t sub_24A4BC3AC(uint64_t a1, uint64_t a2)
{
  return sub_24A4BC0DC(a1, a2, *(uint64_t (**)(char *, char *))(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 16), *(void *)(v2 + 24)) & 1;
}

Swift::Void __swiftcall OrderedSet.swapAt(_:_:)(Swift::Int a1, Swift::Int a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = v3;
    uint64_t v7 = *(void *)(v2 + 16);
    sub_24A5BC210();
    swift_getWitnessTable();
    sub_24A5BB4B0();
    if (*v3)
    {
      OrderedSet._ensureUnique()();
      uint64_t v8 = *v3;
      if (*v4)
      {
        swift_retain();
        sub_24A4BC4D4((uint64_t *)(v8 + 16), v8 + 32, (uint64_t)v4, a1, a2, v7);
        swift_release();
      }
      else
      {
        __break(1u);
      }
    }
  }
}

uint64_t sub_24A4BC4D4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v25 = a2;
  uint64_t v9 = *(void *)(a6 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](a1);
  long long v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v22 - v13;
  uint64_t v24 = v15;
  sub_24A5BC260();
  uint64_t v23 = a5;
  sub_24A5BC260();
  uint64_t v16 = sub_24A5BB370();
  uint64_t result = *a1;
  uint64_t v18 = 1 << *a1;
  uint64_t v19 = v18 - 1;
  if (__OFSUB__(v18, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t result = sub_24A5BB370();
    uint64_t v20 = 1 << *a1;
    if (!__OFSUB__(v20, 1))
    {
      _HashTable.UnsafeHandle.swapBucketValues(for:withCurrentValue:and:withCurrentValue:)(v19 & v16, v23, (v20 - 1) & result, v24, a1, v25);
      uint64_t v21 = *(void (**)(char *, uint64_t))(v9 + 8);
      v21(v12, a6);
      return ((uint64_t (*)(char *, uint64_t))v21)(v14, a6);
    }
  }
  __break(1u);
  return result;
}

uint64_t _HashTable.UnsafeHandle.swapBucketValues<A>(for:withCurrentValue:and:withCurrentValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v10 = sub_24A5BB370();
  uint64_t result = *a5;
  uint64_t v12 = 1 << *a5;
  uint64_t v13 = v12 - 1;
  if (__OFSUB__(v12, 1))
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = sub_24A5BB370();
  uint64_t v14 = 1 << *a5;
  if (__OFSUB__(v14, 1))
  {
LABEL_7:
    __break(1u);
    return result;
  }
  return _HashTable.UnsafeHandle.swapBucketValues(for:withCurrentValue:and:withCurrentValue:)(v13 & v10, a2, (v14 - 1) & result, a4, a5, a6);
}

void OrderedSet.partition(by:)(uint64_t (*a1)(void), uint64_t a2, uint64_t a3)
{
}

void OrderedSet._partition(by:callback:)(uint64_t (*a1)(void), uint64_t a2, void (*a3)(void, void), uint64_t a4, uint64_t a5)
{
  if (*v5)
  {
    OrderedSet._ensureUnique()();
    uint64_t v11 = *v5;
    if (*v5)
    {
      uint64_t v12 = *(void *)(a5 + 24);
      swift_retain();
      sub_24A4BC8F8((uint64_t *)(v11 + 16), v11 + 32, a1, a2, a3, a4, &v13, v12);
      swift_release();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    sub_24A5BC210();
    swift_getWitnessTable();
    swift_getWitnessTable();
    sub_24A5BB4E0();
  }
}

uint64_t sub_24A4BC8F8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X3>, uint64_t a4@<X4>, void (*a5)(void, void)@<X5>, uint64_t a6@<X6>, void *a7@<X8>, uint64_t a8)
{
  uint64_t v14 = sub_24A5BC210();
  uint64_t result = sub_24A5BC150();
  if (!v8)
  {
    if (v19 == 1)
    {
      swift_getWitnessTable();
      uint64_t WitnessTable = swift_getWitnessTable();
      return MutableCollection<>._partition(with:by:callback:)(a1, a2, a3, a4, a5, a6, v14, (uint64_t)a7, WitnessTable, a8);
    }
    else
    {
      *a7 = v18;
    }
  }
  return result;
}

uint64_t sub_24A4BCA48@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t (*a3)(void)@<X3>, uint64_t a4@<X4>, void (*a5)(void, void)@<X5>, uint64_t a6@<X6>, void *a7@<X8>, uint64_t a8)
{
  uint64_t v13 = sub_24A5BBDB0();
  swift_getWitnessTable();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = MutableCollection<>._partition(with:by:callback:)(a1, a2, a3, a4, a5, a6, v13, (uint64_t)&v19, WitnessTable, a8);
  if (!v18) {
    *a7 = v19;
  }
  return result;
}

uint64_t MutableCollection<>._partition(with:by:callback:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X3>, void (*a5)(void, void)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10)
{
  uint64_t v114 = a6;
  uint64_t v113 = a5;
  uint64_t v142 = a3;
  uint64_t v143 = a4;
  uint64_t v112 = a2;
  uint64_t v117 = a1;
  uint64_t v123 = a8;
  uint64_t v12 = *(void *)(a7 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](a1);
  uint64_t v116 = (char *)&v107 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v128 = (char *)&v107 - v16;
  MEMORY[0x270FA5388](v15);
  uint64_t v141 = (char *)&v107 - v17;
  uint64_t v118 = v18;
  uint64_t v19 = *(void *)(v18 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v144 = *(void (***)(void, void, void))(AssociatedTypeWitness - 8);
  uint64_t v20 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v115 = (char *)&v107 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v119 = (char *)&v107 - v23;
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  uint8x8_t v127 = (char *)&v107 - v25;
  MEMORY[0x270FA5388](v24);
  uint64_t v121 = (char *)&v107 - v26;
  uint64_t v27 = swift_getAssociatedTypeWitness();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = MEMORY[0x270FA5388](v27);
  long long v120 = (char *)&v107 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = MEMORY[0x270FA5388](v29);
  uint64_t v133 = (char *)&v107 - v32;
  uint64_t v33 = MEMORY[0x270FA5388](v31);
  uint64_t v35 = (char *)&v107 - v34;
  MEMORY[0x270FA5388](v33);
  uint64_t v37 = (char *)&v107 - v36;
  sub_24A5BBAD0();
  uint64_t v147 = v10;
  sub_24A5BBB40();
  uint64_t v146 = v19;
  uint64_t v148 = a7;
  uint64_t v38 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint8x8_t v145 = v37;
  unsigned int v149 = v35;
  uint64_t v125 = v27;
  uint64_t v139 = v38;
  char v39 = sub_24A5BB530();
  uint64_t v122 = v28;
  if (v39)
  {
    uint64_t v40 = v145;
LABEL_3:
    uint64_t v41 = v122;
    uint64_t v42 = v125;
    (*(void (**)(char *, uint64_t))(v122 + 8))(v149, v125);
    uint64_t v43 = v123;
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v41 + 32))(v43, v40, v42);
  }
  else
  {
    uint64_t v44 = (void (**)(void))(v144 + 2);
    uint64_t v138 = (void (**)(char *, uint64_t))(v144 + 1);
    uint64_t v144 = (void (**)(void, void, void))(v12 + 16);
    int v124 = (void (**)(char *, uint64_t))(v12 + 8);
    uint64_t v131 = a9;
    uint64_t v132 = (void (**)(void, void, void))(v28 + 16);
    int8x8_t v140 = (uint64_t (**)(char *, uint64_t))(v28 + 8);
    uint64_t v45 = AssociatedTypeWitness;
    uint64_t v40 = v145;
    uint64_t v46 = v121;
    uint64_t v126 = v44;
    uint64_t v110 = a10;
    while (1)
    {
      int8x16_t v47 = (void (*)(void, void))sub_24A5BBC20();
      uint64_t v137 = *v44;
      v137(v46);
      v47(v150, 0);
      uint64_t v48 = v151;
      char v49 = v142(v46);
      uint64_t v151 = v48;
      if (v48)
      {
        (*v138)(v46, v45);
        uint64_t v105 = *v140;
        uint64_t v106 = v125;
        (*v140)(v149, v125);
        return v105(v40, v106);
      }
      char v50 = v49;
      uint64_t v51 = v45;
      uint64_t v135 = *v138;
      v135(v46, v45);
      unsigned __int32 v52 = *v144;
      if (v50) {
        break;
      }
      unsigned int v100 = v141;
      uint64_t v101 = v148;
      v52(v141, v147, v148);
      sub_24A5BBB50();
      (*v124)(v100, v101);
      uint64_t v45 = v51;
LABEL_15:
      if (sub_24A5BB530()) {
        goto LABEL_3;
      }
    }
    uint64_t v53 = v124;
    uint64_t v42 = v125;
    uint64_t v129 = *v144;
    do
    {
      unsigned int v54 = v141;
      uint64_t v55 = v147;
      uint64_t v56 = v148;
      v52(v141, v147, v148);
      sub_24A5BB390();
      uint64_t v57 = *v53;
      (*v53)(v54, v56);
      uint64_t v58 = v133;
      uint64_t v130 = *v132;
      v130(v133, v145, v42);
      LOBYTE(v54) = sub_24A5BB530();
      uint64_t v134 = *v140;
      v134(v58, v42);
      if (v54)
      {
        v134(v149, v42);
        uint64_t v43 = v123;
        uint64_t v41 = v122;
        uint64_t v40 = v145;
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v41 + 32))(v43, v40, v42);
      }
      uint64_t v59 = v128;
      uint64_t v60 = v148;
      v52(v128, v55, v148);
      unsigned __int32 v61 = (void (*)(void, void))sub_24A5BBC20();
      uint64_t v62 = v127;
      uint64_t v63 = AssociatedTypeWitness;
      v137(v127);
      v61(v150, 0);
      v57(v59, v60);
      uint64_t v64 = v151;
      char v65 = v142(v62);
      uint64_t v151 = v64;
      if (v64)
      {
        v135(v62, v63);
        uint64_t v102 = v42;
        uint64_t v103 = v42;
        uint8x8_t v104 = v134;
        v134(v149, v103);
        return v104(v145, v102);
      }
      char v66 = v65;
      v135(v62, v63);
      unsigned __int32 v52 = v129;
    }
    while ((v66 & 1) != 0);
    uint64_t v111 = v57;
    uint64_t v67 = v133;
    uint64_t v68 = v130;
    v130(v133, v145, v42);
    uint64_t v69 = v120;
    v68(v120, v149, v42);
    uint64_t v71 = v147;
    uint64_t v70 = v148;
    sub_24A5BB480();
    uint64_t v72 = v69;
    uint64_t v73 = v134;
    v134(v72, v42);
    v73(v67, v42);
    uint64_t v74 = v141;
    v52(v141, v71, v70);
    v68(v67, v145, v42);
    int v75 = v120;
    sub_24A5BBAD0();
    uint64_t v109 = sub_24A5BBAB0();
    v73(v75, v42);
    v73(v67, v42);
    uint64_t v76 = v111;
    v111(v74, v70);
    v129(v74, v147, v70);
    v130(v67, v149, v42);
    sub_24A5BBAD0();
    uint64_t v108 = sub_24A5BBAB0();
    unint64_t v77 = v75;
    uint64_t v78 = v134;
    v134(v77, v42);
    v78(v67, v42);
    v76(v74, v70);
    uint64_t v79 = v129;
    v129(v74, v147, v70);
    v130(v67, v145, v42);
    uint64_t v80 = (void (*)(void, void))sub_24A5BBC20();
    uint64_t v81 = AssociatedTypeWitness;
    uint64_t v44 = v126;
    v137(v119);
    v80(v150, 0);
    uint64_t v82 = v81;
    uint64_t v83 = v115;
    v134(v67, v42);
    v111(v74, v70);
    uint64_t v84 = v116;
    v79(v116, v147, v70);
    uint8x8_t v85 = v120;
    v130(v120, v149, v42);
    uint64_t v86 = v83;
    uint64_t v87 = (void (*)(void, void))sub_24A5BBC20();
    v137(v83);
    v87(v150, 0);
    v134(v85, v42);
    v111(v84, v70);
    uint64_t v88 = v117;
    uint64_t v89 = sub_24A5BB370();
    uint64_t result = *v88;
    uint64_t v91 = 1 << *v88;
    uint64_t v92 = v91 - 1;
    if (__OFSUB__(v91, 1))
    {
      __break(1u);
    }
    else
    {
      uint64_t result = sub_24A5BB370();
      uint64_t v93 = 1 << *v88;
      if (!__OFSUB__(v93, 1))
      {
        uint64_t v94 = v88;
        uint64_t v95 = v108;
        uint64_t v96 = v109;
        _HashTable.UnsafeHandle.swapBucketValues(for:withCurrentValue:and:withCurrentValue:)(v92 & v89, v108, (v93 - 1) & result, v109, v94, v112);
        uint64_t v97 = v135;
        v135(v86, v82);
        v97(v119, v82);
        v113(v96, v95);
        uint64_t v98 = v141;
        uint64_t v99 = v148;
        v129(v141, v147, v148);
        uint64_t v40 = v145;
        sub_24A5BBB50();
        v111(v98, v99);
        uint64_t v46 = v121;
        uint64_t v45 = v82;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t _HashTable.UnsafeHandle.swapBucketValues(for:withCurrentValue:and:withCurrentValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v7 = a5;
  uint64_t v11 = _HashTable.UnsafeHandle._startIterator(bucket:)(a1, a5, a6);
  uint64_t v22 = v11;
  if (v11)
  {
    uint64_t v12 = v7;
    do
    {
      uint64_t v13 = -1 << *v12;
      unint64_t v14 = (v13 ^ ~v11) + ((uint64_t)v12[1] >> 6);
      if (v14 >= ~v13) {
        uint64_t v15 = ~v13;
      }
      else {
        uint64_t v15 = 0;
      }
      if (v14 - v15 == a2) {
        break;
      }
      _HashTable.BucketIterator.advance()();
      uint64_t v12 = v7;
      uint64_t v11 = v22;
    }
    while (v22);
  }
  _HashTable.BucketIterator.currentValue.setter(a4, 0);
  uint64_t v16 = _HashTable.UnsafeHandle._startIterator(bucket:)(a3, v7, a6);
  uint64_t v21 = v7;
  for (i = v16; i; uint64_t v16 = i)
  {
    uint64_t v17 = -1 << *v7;
    unint64_t v18 = (v17 ^ ~v16) + ((uint64_t)v7[1] >> 6);
    if (v18 >= ~v17) {
      uint64_t v19 = ~v17;
    }
    else {
      uint64_t v19 = 0;
    }
    if (v18 - v19 == a4) {
      break;
    }
    _HashTable.BucketIterator.advance()();
    uint64_t v7 = v21;
  }
  return _HashTable.BucketIterator.currentValue.setter(a2, 0);
}

void OrderedSet.sort(by:)()
{
}

void OrderedSet<>.sort()()
{
  sub_24A5BC210();
  swift_getWitnessTable();
  swift_getWitnessTable();
  sub_24A5BB4F0();
  type metadata accessor for OrderedSet();
  OrderedSet._regenerateExistingHashTable()();
}

Swift::Void __swiftcall OrderedSet.shuffle()()
{
}

void OrderedSet.shuffle<A>(using:)()
{
  sub_24A5BC210();
  swift_getWitnessTable();
  swift_getWitnessTable();
  sub_24A5BB510();
  OrderedSet._regenerateExistingHashTable()();
}

Swift::Void __swiftcall OrderedSet.reverse()()
{
  sub_24A5BC210();
  swift_getWitnessTable();
  swift_getWitnessTable();
  sub_24A5BB4D0();
  OrderedSet._regenerateHashTable()();
}

uint64_t OrderedSet._halfStablePartition<A>(values:by:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, char *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = v6 + 1;
  uint64_t v14 = *(void *)(a5 + 16);
  uint64_t result = _s19CollectionsInternal4HeapV5countSivg_0();
  if (result == a2)
  {
    uint64_t v34 = v6;
    uint64_t v41 = 0;
    sub_24A5BC210();
    sub_24A5BC190();
    uint64_t v16 = *v13;
    uint64_t v17 = *(void *)(*v13 + 16);
    unint64_t v18 = (*(unsigned __int8 *)(*(void *)(v14 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v14 - 8) + 80);
    uint64_t v19 = a5;
    uint64_t v20 = a6;
    uint64_t v21 = a3;
    uint64_t v22 = a1;
    uint64_t v23 = a2;
    uint64_t v24 = a4;
    uint64_t v25 = v16 + v18;
    unint64_t v39 = v16 + v18;
    uint64_t v40 = v17;
    uint64_t v26 = v14;
    uint64_t v27 = *(void *)(v19 + 24);
    uint64_t v35 = v17;
    uint64_t v36 = v26;
    sub_24A4BDFE0((uint64_t)&v39, &v41, v21, v24, v22, v23, v26, v20);
    if (v37)
    {
      sub_24A4BEFBC(&v39, v25, v35);
    }
    else
    {
      unint64_t v33 = v18;
      sub_24A4BEFBC(&v39, v25, v35);
      uint64_t v28 = v41;
      if (v28 >= _s19CollectionsInternal4HeapV5countSivg_0())
      {
        return _s19CollectionsInternal4HeapV5countSivg_0();
      }
      else
      {
        OrderedSet._ensureUnique()();
        uint64_t v29 = *v34;
        *uint64_t v34 = 0;
        sub_24A5BC190();
        uint64_t v30 = v34[1];
        uint64_t v31 = *(void *)(v30 + 16);
        uint64_t v32 = v30 + v33;
        unint64_t v39 = v30 + v33;
        uint64_t v40 = v31;
        sub_24A4BE238(&v39, &v41, v21, v22, v23, v29, v36, &v38, v20, v27);
        sub_24A4BEFBC(&v39, v32, v31);
        uint64_t v25 = v38;
        swift_retain();
        swift_release();
        *uint64_t v34 = v29;
        swift_release();
      }
    }
    return v25;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *sub_24A4BDFE0(uint64_t a1, uint64_t *a2, uint64_t (*a3)(char *, char *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v37 = a3;
  uint64_t v38 = a5;
  uint64_t v40 = a8;
  uint64_t v9 = ((uint64_t (*)(void))MEMORY[0x270FA5388])();
  uint64_t v36 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = v11;
  uint64_t result = (void *)MEMORY[0x270FA5388](v9);
  uint64_t v35 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *v16;
  if (*v16 < result[1])
  {
    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
    uint64_t v18 = v14 + 16;
    uint64_t v32 = *(void *)(v18 + 56);
    unint64_t v33 = v19;
    uint64_t v34 = v13;
    uint64_t v30 = v13 + 8;
    uint64_t v31 = v13 + 16;
    uint64_t v28 = result;
    uint64_t v29 = (uint64_t (**)(char *, uint64_t))(v18 - 8);
    uint64_t v27 = v18;
    uint64_t v20 = v35;
    uint64_t v21 = v36;
    uint64_t v23 = v39;
    uint64_t v22 = v40;
    uint64_t v24 = v13;
    do
    {
      v33(v20, *result + v32 * v17, v23);
      (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v21, v38 + *(void *)(v24 + 72) * v17, v22);
      uint64_t v25 = v41;
      char v26 = v37(v20, v21);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v21, v22);
      uint64_t result = (void *)(*v29)(v20, v23);
      uint64_t v41 = v25;
      if (v25 || (v26 & 1) != 0) {
        break;
      }
      uint64_t v17 = *a2 + 1;
      if (__OFADD__(*a2, 1))
      {
        __break(1u);
        return result;
      }
      *a2 = v17;
      uint64_t result = v28;
    }
    while (v17 < v28[1]);
  }
  return result;
}

uint64_t sub_24A4BE238@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t (*a3)(char *, char *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, void *a8@<X8>, uint64_t a9, uint64_t a10)
{
  uint64_t v39 = a5;
  uint64_t v40 = a6;
  char v50 = a3;
  uint64_t v12 = a1;
  uint64_t v35 = a8;
  uint64_t v52 = *(void *)(a9 - 8);
  uint64_t v53 = a4;
  uint64_t v13 = MEMORY[0x270FA5388](a1);
  char v49 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = *(void *)(v15 - 8);
  uint64_t result = MEMORY[0x270FA5388](v13);
  uint64_t v48 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *v18;
  uint64_t v20 = *v18 + 1;
  if (__OFADD__(*v18, 1))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v21 = v12[1];
  if (v21 < v20)
  {
LABEL_20:
    __break(1u);
    return result;
  }
  if (v20 != v21)
  {
    uint64_t v47 = v51 + 16;
    uint64_t v46 = v52 + 16;
    uint64_t v45 = v52 + 8;
    uint64_t v43 = a2;
    uint64_t v44 = v51 + 8;
    uint64_t v37 = (uint64_t *)(v40 + 16);
    uint64_t v38 = a10;
    uint64_t v36 = v40 + 32;
    uint64_t v41 = v21;
    uint64_t v42 = v12;
    uint64_t v22 = v49;
    while (v20 < v21)
    {
      uint64_t v24 = v51;
      uint64_t v25 = *v12 + *(void *)(v51 + 72) * v20;
      char v26 = v48;
      (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v48, v25, a7);
      uint64_t v27 = v52;
      (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v22, v53 + *(void *)(v52 + 72) * v20, a9);
      uint64_t v28 = v54;
      uint64_t v29 = a7;
      char v30 = v50(v26, v22);
      (*(void (**)(char *))(v27 + 8))(v22);
      uint64_t v31 = *(uint64_t (**)(char *, uint64_t))(v24 + 8);
      uint64_t v32 = v29;
      uint64_t result = v31(v26, v29);
      uint64_t v54 = v28;
      if (v28) {
        return result;
      }
      if (v30)
      {
        a7 = v29;
        uint64_t v12 = v42;
        uint64_t v23 = v43;
        uint64_t v21 = v41;
      }
      else
      {
        uint64_t v12 = v42;
        uint64_t v23 = v43;
        a7 = v32;
        sub_24A5BBD60();
        uint64_t result = sub_24A5BBD60();
        if (v40)
        {
          uint64_t v33 = v54;
          uint64_t result = sub_24A4BE574(v37, v36, (uint64_t)v12, (uint64_t)v23, v20, v32, a9, v38);
          uint64_t v54 = v33;
        }
        uint64_t v21 = v41;
        if (__OFADD__(*v23, 1)) {
          goto LABEL_18;
        }
        ++*v23;
      }
      if (v21 == ++v20)
      {
        uint64_t v19 = *v23;
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
LABEL_15:
  *uint64_t v35 = v19;
  return result;
}

uint64_t sub_24A4BE574(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v33 = a2;
  uint64_t v35 = a8;
  uint64_t v34 = a1;
  uint64_t v10 = *(void *)(a6 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](a1);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v30 - v14;
  uint64_t v17 = *v16;
  uint64_t v19 = *(void *)(v18 + 72);
  uint64_t v31 = *v20;
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v21((char *)&v30 - v14, v17 + v19 * v31, v22);
  uint64_t v32 = a5;
  v21(v13, v17 + v19 * a5, a6);
  uint64_t v23 = v34;
  uint64_t v24 = sub_24A5BB370();
  uint64_t result = *v23;
  uint64_t v26 = 1 << *v23;
  uint64_t v27 = v26 - 1;
  if (__OFSUB__(v26, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t result = sub_24A5BB370();
    uint64_t v28 = 1 << *v23;
    if (!__OFSUB__(v28, 1))
    {
      _HashTable.UnsafeHandle.swapBucketValues(for:withCurrentValue:and:withCurrentValue:)(v27 & v24, v32, (v28 - 1) & result, v31, v23, v33);
      uint64_t v29 = *(void (**)(char *, uint64_t))(v10 + 8);
      v29(v13, a6);
      return ((uint64_t (*)(char *, uint64_t))v29)(v15, a6);
    }
  }
  __break(1u);
  return result;
}

uint64_t OrderedSet._partition<A>(values:by:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, char *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  OrderedSet._ensureUnique()();
  uint64_t v9 = *v6;
  *uint64_t v6 = 0;
  uint64_t v10 = (uint64_t)(v6 + 1);
  uint64_t v11 = *(void *)(a5 + 16);
  sub_24A5BC210();
  sub_24A5BC190();
  uint64_t v12 = v6[1];
  uint64_t v13 = *(void *)(v12 + 16);
  v20[0] = v12
         + ((*(unsigned __int8 *)(*(void *)(v11 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v11 - 8) + 80));
  uint64_t v14 = v20[0];
  v20[1] = v13;
  sub_24A4BE8D4(v20, a1, a2, a3, v9, v11, a6, &v21, *(void *)(a5 + 24));
  sub_24A4BEFBC(v20, v14, v13);
  if (!v19) {
    uint64_t v10 = v21;
  }
  swift_retain();
  swift_release();
  *uint64_t v6 = v9;
  swift_release();
  return v10;
}

uint64_t sub_24A4BE8D4@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(char *, char *)@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t *a8@<X8>, uint64_t a9)
{
  uint64_t v9 = a7;
  int v75 = a4;
  uint64_t v54 = a3;
  uint64_t v59 = a2;
  uint64_t v12 = a1;
  uint64_t v56 = a8;
  uint64_t v13 = *(void *)(a7 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](a1);
  uint64_t v63 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v58 = (char *)&v50 - v17;
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v16);
  uint64_t v62 = (char *)&v50 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v57 = (char *)&v50 - v22;
  uint64_t v79 = 0;
  uint64_t result = sub_24A5BBD80();
  if (result)
  {
    uint64_t v24 = 0;
    uint64_t v52 = a9;
    uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
    uint64_t v26 = v19 + 16;
    uint64_t v25 = v27;
    uint64_t v28 = *(void *)(v26 + 56);
    uint64_t v51 = (uint64_t *)(a5 + 16);
    uint64_t v53 = a5;
    uint64_t v50 = a5 + 32;
    uint64_t v73 = (uint64_t (**)(char *, uint64_t))(v26 - 8);
    uint64_t v74 = v13 + 8;
    uint64_t v67 = v12;
    uint64_t v68 = v9;
    uint64_t v55 = v13;
    uint64_t v69 = v26;
    uint64_t v70 = v28;
    uint64_t v61 = a6;
    uint64_t v71 = v27;
    uint64_t v72 = v13 + 16;
    while (1)
    {
      uint64_t v60 = result;
      uint64_t v29 = v57;
      v25(v57, *v12 + v28 * v24, a6);
      uint64_t v30 = *(void *)(v13 + 72);
      uint64_t v31 = v58;
      uint64_t v76 = v24;
      char v66 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
      v66(v58, v59 + v30 * v24, v9);
      uint64_t v32 = v77;
      char v33 = v75(v29, v31);
      uint64_t v34 = v13;
      char v35 = v33;
      char v65 = *(void (**)(char *, uint64_t))(v34 + 8);
      v65(v31, v9);
      uint64_t v64 = *v73;
      uint64_t result = v64(v29, a6);
      uint64_t v77 = v32;
      if (v32) {
        break;
      }
      if (v35)
      {
        uint64_t v36 = v60 - 1;
        uint64_t v37 = v76;
        uint64_t v38 = v71;
        if (__OFSUB__(v60, 1))
        {
LABEL_25:
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
          return result;
        }
        if (v76 == v36)
        {
LABEL_21:
          uint64_t result = v37;
          goto LABEL_22;
        }
        uint64_t v39 = v70 * v36;
        uint64_t v60 = -v30;
        uint64_t v40 = v59 + v30 * v36;
        while (1)
        {
          uint64_t v41 = v62;
          v38(v62, *v67 + v39, a6);
          uint64_t v42 = v63;
          uint64_t v43 = v68;
          v66(v63, v40, v68);
          uint64_t v44 = v77;
          char v45 = v75(v41, v42);
          uint64_t v46 = v43;
          a6 = v61;
          v65(v42, v46);
          uint64_t result = v64(v41, a6);
          uint64_t v77 = v44;
          if (v44) {
            return result;
          }
          if ((v45 & 1) == 0)
          {
            uint64_t v78 = v36;
            uint64_t v12 = v67;
            uint64_t v48 = v76;
            sub_24A5BBD60();
            uint64_t v9 = v68;
            uint64_t result = sub_24A5BBD60();
            if (v53)
            {
              uint64_t v49 = v77;
              uint64_t result = sub_24A4BEDCC(v51, v50, (uint64_t)v12, (uint64_t)&v79, (uint64_t)&v78, a6, v9, v52);
              uint64_t v77 = v49;
            }
            uint64_t v13 = v55;
            uint64_t v28 = v70;
            BOOL v47 = __OFADD__(v48, 1);
            uint64_t v24 = v48 + 1;
            uint64_t v25 = v71;
            if (!v47)
            {
              uint64_t result = v78;
              goto LABEL_19;
            }
            goto LABEL_27;
          }
          BOOL v47 = __OFSUB__(v36--, 1);
          uint64_t v37 = v76;
          if (v47)
          {
            __break(1u);
            goto LABEL_25;
          }
          v39 -= v70;
          v40 += v60;
          uint64_t v38 = v71;
          if (v76 == v36) {
            goto LABEL_21;
          }
        }
      }
      uint64_t v24 = v76 + 1;
      uint64_t v28 = v70;
      uint64_t v25 = v71;
      uint64_t result = v60;
      if (__OFADD__(v76, 1)) {
        goto LABEL_26;
      }
      uint64_t v12 = v67;
      uint64_t v9 = v68;
      uint64_t v13 = v55;
LABEL_19:
      uint64_t v79 = v24;
      if (v24 == result) {
        goto LABEL_22;
      }
    }
  }
  else
  {
LABEL_22:
    *uint64_t v56 = result;
  }
  return result;
}

uint64_t sub_24A4BEDCC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v31 = a5;
  uint64_t v32 = a8;
  uint64_t v30 = a2;
  uint64_t v10 = *(void *)(a6 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](a1);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v29 - v14;
  uint64_t v17 = *v16;
  uint64_t v19 = *(void *)(v18 + 72);
  uint64_t v29 = *v20;
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v21((char *)&v29 - v14, v17 + v19 * v29, v22);
  uint64_t v31 = *(void *)v31;
  v21(v13, v17 + v31 * v19, a6);
  uint64_t v23 = sub_24A5BB370();
  uint64_t result = *a1;
  uint64_t v25 = 1 << *a1;
  uint64_t v26 = v25 - 1;
  if (__OFSUB__(v25, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t result = sub_24A5BB370();
    uint64_t v27 = 1 << *a1;
    if (!__OFSUB__(v27, 1))
    {
      _HashTable.UnsafeHandle.swapBucketValues(for:withCurrentValue:and:withCurrentValue:)(v26 & v23, v31, (v27 - 1) & result, v29, a1, v30);
      uint64_t v28 = *(void (**)(char *, uint64_t))(v10 + 8);
      v28(v13, a6);
      return ((uint64_t (*)(char *, uint64_t))v28)(v15, a6);
    }
  }
  __break(1u);
  return result;
}

void *sub_24A4BEFBC(void *result, uint64_t a2, uint64_t a3)
{
  if (*result)
  {
    if (*result == a2)
    {
      if (result[1] == a3)
      {
        uint64_t v3 = sub_24A5BC210();
        return (void *)nullsub_1(v3, v4, v5, v6, v7);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_24A4BF014@<X0>(void *a1@<X8>)
{
  return sub_24A4BCA48(*(uint64_t **)(v1 + 32), *(void *)(v1 + 40), *(uint64_t (**)(void))(v1 + 48), *(void *)(v1 + 56), *(void (**)(void, void))(v1 + 64), *(void *)(v1 + 72), a1, *(void *)(v1 + 24));
}

uint64_t Rope.builder<A>(splittingAt:in:)@<X0>(void (*a1)(char *, char *, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v86 = a5;
  uint64_t v87 = a2;
  uint64_t v88 = a4;
  uint64_t v84 = a1;
  uint64_t v80 = a6;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void (**)(char *, uint64_t))(a3 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v74 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v75 = AssociatedTypeWitness;
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v83 = (char *)&v69 - v10;
  uint64_t v73 = type metadata accessor for Rope._Item();
  uint64_t v82 = *(void *)(v73 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v73);
  uint64_t v70 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v71 = (uint64_t)&v69 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v72 = (uint64_t)&v69 - v15;
  uint64_t v16 = type metadata accessor for Rope._Node();
  unint64_t v76 = sub_24A5BBD20();
  uint64_t v17 = *(void *)(v76 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v76);
  uint64_t v20 = (char *)&v69 - v19;
  uint64_t v21 = *(void *)(v16 - 8);
  uint64_t v22 = MEMORY[0x270FA5388](v18);
  uint64_t v24 = (char *)&v69 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v90 = (char *)&v69 - v25;
  uint64_t v26 = type metadata accessor for Rope.Builder();
  uint64_t v78 = *(void *)(v26 - 8);
  uint64_t v79 = v26;
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = (uint64_t *)((char *)&v69 - v27);
  Rope._invalidateIndices()();
  uint64_t v89 = v28;
  uint64_t v77 = v7;
  Rope.Builder.init()(v28);
  if (Rope.isEmpty.getter())
  {
    if (!v84) {
      return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(v78 + 32))(v80, v89, v79);
    }
    __break(1u);
    goto LABEL_13;
  }
  uint8x8_t v85 = v8;
  v93[0] = (uint64_t)v84;
  uint64_t v28 = (uint64_t *)v76;
  (*(void (**)(char *, uint64_t, unint64_t))(v17 + 16))(v20, v6, v76);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v20, 1, v16) == 1)
  {
LABEL_13:
    uint64_t result = (*(uint64_t (**)(char *, uint64_t *))(v17 + 8))(v20, v28);
    __break(1u);
    return result;
  }
  uint64_t v30 = v21;
  uint64_t v31 = v90;
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v90, v20, v16);
  (*(void (**)(uint64_t, uint64_t *))(v17 + 8))(v6, v28);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56))(v6, 1, 1, v16);
  uint64_t v32 = Rope._Node.header.getter();
  uint64_t v33 = v87;
  uint64_t v34 = v88;
  uint64_t v81 = v30;
  if ((v32 & 0xFF0000) != 0)
  {
    char v35 = *(void (**)(void, void, void))(v30 + 16);
    uint64_t v84 = (void (*)(char *, char *, uint64_t))(v30 + 8);
    unint64_t v76 = (v30 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    uint64_t v36 = v30;
    uint64_t v37 = v77;
    do
    {
      uint64_t v38 = v35;
      v35(v24, v31, v16);
      uint64_t v39 = *(void *)v24 + 16;
      unint64_t v40 = *(void *)v24
          + ((*(unsigned __int8 *)(v36 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80));
      swift_getWitnessTable();
      uint64_t v41 = nullsub_1(v39, v40, v37, v16, v85);
      uint64_t v43 = v42;
      swift_unknownObjectRetain();
      uint64_t v44 = (unsigned __int16 *)v41;
      uint64_t v31 = v90;
      sub_24A4BFBAC(v44, v43, v93, v87, v37, v88, v86, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Node, &v91);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v24, v16);
      v93[0] = v92;
      Rope._Node._innerSplit(at:into:)(v91, (uint64_t)v89, v16);
      uint64_t v45 = Rope._Node.header.getter();
      char v35 = v38;
    }
    while ((v45 & 0xFF0000) != 0);
    uint64_t v46 = v82;
    uint64_t v33 = v87;
    uint64_t v34 = v88;
    unint64_t v47 = v76;
  }
  else
  {
    char v35 = *(void (**)(void, void, void))(v30 + 16);
    unint64_t v47 = (v30 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    uint64_t v46 = v82;
  }
  uint64_t v84 = (void (*)(char *, char *, uint64_t))v35;
  unint64_t v76 = v47;
  v35(v24, v31, v16);
  uint64_t v48 = *(void *)v24 + 16;
  unint64_t v49 = *(void *)v24 + ((*(unsigned __int8 *)(v46 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80));
  uint64_t v50 = v73;
  swift_getWitnessTable();
  uint64_t v51 = v77;
  uint64_t v52 = (unsigned __int16 *)nullsub_1(v48, v49, v77, v50, v85);
  uint64_t v54 = v53;
  swift_unknownObjectRetain();
  uint64_t v55 = v86;
  sub_24A4BFBAC(v52, v54, v93, v33, v51, v34, v86, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Item, &v91);
  swift_unknownObjectRelease();
  uint64_t v56 = *(void (**)(char *, uint64_t))(v81 + 8);
  v81 += 8;
  uint8x8_t v85 = v56;
  v56(v24, v16);
  uint64_t v57 = v91;
  uint64_t v58 = v92;
  uint64_t v59 = v34;
  v84(v24, v90, v16);
  uint64_t v60 = v72;
  Rope._Node._leafSplit(at:into:)(v57, (uint64_t)v89, v16, v72);
  uint64_t v61 = (uint64_t)v83;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v55 + 32))(v58, v60, v59, v55);
  uint64_t v62 = v71;
  Rope._Item.split(at:)(v61, v50, v71);
  uint64_t v63 = v82;
  uint64_t v64 = *(void (**)(char *, uint64_t, uint64_t))(v82 + 16);
  uint64_t v65 = (uint64_t)v70;
  v64(v70, v62, v50);
  uint64_t v66 = v79;
  uint64_t v67 = (uint64_t)v89;
  Rope.Builder._insertAfterTip(_:)(v65, v79);
  v64((char *)v65, v60, v50);
  Rope.Builder._insertBeforeTip(_:)(v65, v66);
  uint64_t v68 = *(void (**)(uint64_t, uint64_t))(v63 + 8);
  v68(v62, v50);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v83, v75);
  v68(v60, v50);
  v85(v90, v16);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v78 + 32))(v80, v67, v66);
}

uint64_t Rope._Node._innerSplit(at:into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](a1);
  uint64_t v8 = (uint64_t *)((char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = MEMORY[0x270FA5388](v6);
  uint64_t v11 = (char *)&v20 - v10;
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (uint64_t *)((char *)&v20 - v12);
  Rope._Node.ensureUnique()();
  if ((unsigned __int16)Rope._Node.header.getter() - 2 == v4)
  {
    unsigned __int16 v14 = Rope._Node.header.getter();
    Rope._Node._removeNode(at:)(v14 - 1, a3, (uint64_t)v13);
    type metadata accessor for Rope.Builder();
    sub_24A4F2AE0((uint64_t)v13);
    (*(void (**)(uint64_t *, uint64_t))(v5 + 8))(v13, a3);
  }
  if (v4 == 1)
  {
    Rope._Node._removeNode(at:)(0, a3, (uint64_t)v13);
    uint64_t v15 = type metadata accessor for Rope.Builder();
    Rope.Builder._insertBeforeTip(_:)(v13, v15);
    uint64_t v4 = 0;
  }
  Rope._Node._removeNode(at:)(v4, a3, (uint64_t)v11);
  sub_24A5BC5A0();
  if (!(unsigned __int16)Rope._Node.header.getter()) {
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v11, a3);
  }
  if (!v4)
  {
    type metadata accessor for Rope.Builder();
    sub_24A4F2AE0((uint64_t)v11);
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v11, a3);
  }
  if (v4 == (unsigned __int16)Rope._Node.header.getter())
  {
    (*(void (**)(uint64_t *, char *, uint64_t))(v5 + 16))(v13, v11, a3);
    uint64_t v16 = type metadata accessor for Rope.Builder();
    Rope.Builder._insertBeforeTip(_:)(v13, v16);
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v11, a3);
  }
  Rope._Node.split(keeping:)(v4, a3, (uint64_t)v13);
  (*(void (**)(uint64_t *, char *, uint64_t))(v5 + 16))(v8, v11, a3);
  uint64_t v18 = type metadata accessor for Rope.Builder();
  Rope.Builder._insertBeforeTip(_:)(v8, v18);
  sub_24A4F2AE0((uint64_t)v13);
  uint64_t v19 = *(void (**)(uint64_t *, uint64_t))(v5 + 8);
  v19(v13, a3);
  return ((uint64_t (*)(char *, uint64_t))v19)(v11, a3);
}

uint64_t sub_24A4BFBAC@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t (*a8)(void, uint64_t, uint64_t)@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v17 = *a3;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v19 = a8(0, a5, AssociatedConformanceWitness);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)(v17, a4, 1, a1, a2, a5, v19, a6, WitnessTable, a7);
  *a9 = result;
  a9[1] = v22;
  return result;
}

uint64_t Rope._Node._leafSplit(at:into:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v47 = a2;
  uint64_t v44 = a4;
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v11 = (char *)&v37 - v10;
  uint64_t v46 = v7;
  uint64_t v12 = type metadata accessor for Rope._Item();
  uint64_t v42 = *(void *)(v12 - 8);
  uint64_t v43 = v12;
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  uint64_t v41 = (uint64_t)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v37 - v16;
  uint64_t v18 = *(void *)(a3 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v15);
  uint64_t v38 = (uint64_t *)((char *)&v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  unint64_t v40 = (uint64_t *)((char *)&v37 - v22);
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v37 - v23;
  uint64_t v25 = *(void (**)(uint64_t *, char *, uint64_t))(v18 + 16);
  uint64_t v45 = v4;
  uint64_t v39 = v25;
  v25((uint64_t *)((char *)&v37 - v23), v4, a3);
  Rope._Node.ensureUnique()();
  if ((unsigned __int16)Rope._Node.header.getter() - 2 == a1)
  {
    unsigned __int16 v26 = Rope._Node.header.getter();
    Rope._Node._removeItem(at:)((uint64_t)v17, (uint64_t)v11, v26 - 1, a3);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
    uint64_t v27 = type metadata accessor for Rope.Builder();
    Rope.Builder._insertAfterTip(_:)((uint64_t)v17, v27);
  }
  if (a1 == 1)
  {
    Rope._Node._removeItem(at:)((uint64_t)v17, (uint64_t)v11, 0, a3);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
    uint64_t v28 = type metadata accessor for Rope.Builder();
    sub_24A4F2CB0((uint64_t)v17, v28);
    (*(void (**)(char *, uint64_t))(*(void *)(v8 - 8) + 8))(v17, v8);
    a1 = 0;
  }
  uint64_t v29 = v41;
  Rope._Node._removeItem(at:)(v41, (uint64_t)v11, a1, a3);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
  if ((unsigned __int16)Rope._Node.header.getter())
  {
    if (a1)
    {
      if (a1 != (unsigned __int16)Rope._Node.header.getter())
      {
        uint64_t v33 = (uint64_t)v40;
        Rope._Node.split(keeping:)(a1, a3, (uint64_t)v40);
        uint64_t v34 = v38;
        v39(v38, v24, a3);
        uint64_t v35 = type metadata accessor for Rope.Builder();
        Rope.Builder._insertBeforeTip(_:)(v34, v35);
        sub_24A4F2AE0(v33);
        uint64_t v32 = *(void (**)(char *, uint64_t))(v18 + 8);
        v32(v45, a3);
        v32((char *)v33, a3);
        goto LABEL_12;
      }
      uint64_t v30 = v40;
      v39(v40, v24, a3);
      uint64_t v31 = type metadata accessor for Rope.Builder();
      Rope.Builder._insertBeforeTip(_:)(v30, v31);
    }
    else
    {
      type metadata accessor for Rope.Builder();
      sub_24A4F2AE0((uint64_t)v24);
    }
  }
  uint64_t v32 = *(void (**)(char *, uint64_t))(v18 + 8);
  v32(v45, a3);
LABEL_12:
  v32(v24, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v42 + 32))(v44, v29, v43);
}

uint64_t Rope.split(at:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t AssociatedTypeWitness = a6;
  uint64_t v56 = a5;
  uint64_t v50 = a1;
  uint64_t v51 = a2;
  uint64_t v10 = a6[2];
  uint64_t v11 = a6[3];
  uint64_t v12 = type metadata accessor for Rope._Item();
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v48 = (uint64_t)&v45 - v13;
  uint64_t v14 = type metadata accessor for Rope._Node();
  uint64_t v15 = sub_24A5BBD20();
  uint64_t v53 = *(void *)(v15 - 8);
  uint64_t v54 = (void *)v15;
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  uint64_t v52 = (char *)&v45 - v17;
  uint64_t v55 = *(void *)(v14 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v45 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v45 - v20;
  uint64_t v22 = type metadata accessor for Rope.Builder();
  uint64_t v46 = *(void *)(v22 - 8);
  uint64_t v47 = v22;
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (uint64_t *)((char *)&v45 - v23);
  uint64_t v25 = v56;
  Rope.validate(_:)(a3, (uint64_t)a4, v56, (uint64_t)AssociatedTypeWitness);
  unint64_t v49 = AssociatedTypeWitness;
  uint64_t v26 = Rope.endIndex.getter((uint64_t)AssociatedTypeWitness);
  uint64_t v27 = a3;
  unint64_t v28 = (unint64_t)a4;
  if ((static Rope.Index.< infix(_:_:)(v27, (uint64_t)a4, v25, v26, v29, v30, v10, v11) & 1) == 0) {
    goto LABEL_10;
  }
  uint64_t v56 = (uint64_t)v24;
  Rope.Builder.init()(v24);
  a4 = v52;
  uint64_t v25 = v53;
  uint64_t AssociatedTypeWitness = v54;
  (*(void (**)(char *, void *, void *))(v53 + 16))(v52, v6, v54);
  uint64_t v31 = v55;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(a4, 1, v14) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v21, a4, v14);
    uint64_t v32 = *(void (**)(void *, void *))(v25 + 8);
    v25 += 8;
    v32(v6, AssociatedTypeWitness);
    uint64_t v33 = *(void (**)(void *, uint64_t, uint64_t, uint64_t))(v31 + 56);
    uint64_t v54 = v6;
    v33(v6, 1, 1, v14);
    if ((Rope._Node.header.getter() & 0xFF0000) == 0)
    {
LABEL_7:
      unsigned int v37 = Rope._Node.header.getter() >> 16;
      uint64_t AssociatedTypeWitness = (void *)swift_getAssociatedTypeWitness();
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v39 = _RopePath.subscript.getter(v37, v28, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness);
      if (v39 < (unsigned __int16)Rope._Node.header.getter())
      {
        uint64_t v40 = v55;
        (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v45, v21, v14);
        uint64_t v41 = v48;
        uint64_t v42 = v39;
        uint64_t v43 = v56;
        Rope._Node._leafSplit(at:into:)(v42, v56, v14, v48);
        (*(void (**)(char *, uint64_t))(v40 + 8))(v21, v14);
        Rope._invalidateIndices()();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 32))(v50, v43, v47);
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v51, v41, v10);
      }
      goto LABEL_11;
    }
    uint64_t AssociatedTypeWitness = &associated type descriptor for RopeElement.Summary;
    a4 = (char *)&associated conformance descriptor for RopeElement.RopeElement.Summary: RopeSummary;
    while (1)
    {
      unsigned int v34 = Rope._Node.header.getter() >> 16;
      uint64_t v35 = swift_getAssociatedTypeWitness();
      uint64_t v36 = swift_getAssociatedConformanceWitness();
      uint64_t v25 = _RopePath.subscript.getter(v34, v28, v35, v36);
      if (v25 >= (unsigned __int16)Rope._Node.header.getter()) {
        break;
      }
      Rope._Node._innerSplit(at:into:)(v25, v56, v14);
      if ((Rope._Node.header.getter() & 0xFF0000) == 0) {
        goto LABEL_7;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
  }
  uint64_t result = (*(uint64_t (**)(char *, void *))(v25 + 8))(a4, AssociatedTypeWitness);
  __break(1u);
  return result;
}

uint64_t Rope.split(at:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t *a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v7 = a3[2];
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v23 - v12;
  Rope.split(at:)(a4, (uint64_t)&v23 - v12, v14, v15, v16, a3);
  uint64_t v17 = a3[3];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 88))(a2, v7, v17);
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t))(v17 + 48);
  if ((v18(v7, v17) & 1) == 0)
  {
    uint64_t v19 = type metadata accessor for Rope.Builder();
    sub_24A4F2CC8((uint64_t)v11, v19);
  }
  if ((v18(v7, v17) & 1) == 0)
  {
    uint64_t v20 = type metadata accessor for Rope.Builder();
    sub_24A4F2CB0((uint64_t)v13, v20);
  }
  uint64_t v21 = *(void (**)(char *, uint64_t))(v8 + 8);
  v21(v11, v7);
  return ((uint64_t (*)(char *, uint64_t))v21)(v13, v7);
}

Swift::Void __swiftcall BigString._dump(heightLimit:)(Swift::Int heightLimit)
{
  uint64_t v2 = *v1;
  if (*v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_26979B058);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_24A5BDAE0;
    sub_24A497498((uint64_t)v1);
    sub_24A4C0AA4();
    sub_24A5BB6F0();
    swift_bridgeObjectRelease();
    *(void *)(v4 + 56) = MEMORY[0x263F8D310];
    *(void *)(v4 + 32) = 0;
    *(void *)(v4 + 40) = 0xE000000000000000;
    sub_24A5BC600();
    swift_bridgeObjectRelease();
    if (heightLimit >= 1)
    {
      int v5 = *(unsigned __int8 *)(v2 + 18);
      swift_unknownObjectRetain();
      uint64_t v6 = (_WORD *)(v2 + 16);
      uint64_t v7 = v2 + 24;
      if (v5) {
        sub_24A4C0CE8(v6, v7, heightLimit, 0, 0xE000000000000000);
      }
      else {
        sub_24A4C0EF4(v6, v7, 0, 0xE000000000000000);
      }
      sub_24A496BE8((uint64_t)v1);
    }
    sub_24A496BE8((uint64_t)v1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_26979B058);
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = MEMORY[0x263F8D310];
    *(_OWORD *)(v8 + 16) = xmmword_24A5BDAE0;
    *(void *)(v8 + 56) = v9;
    *(void *)(v8 + 32) = 0x3E7974706D453CLL;
    *(void *)(v8 + 40) = 0xE700000000000000;
    sub_24A5BC600();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_24A4C0AA4()
{
  uint64_t v1 = *v0;
  sub_24A5BC070();
  if (*(unsigned char *)(v1 + 18))
  {
    sub_24A5BC430();
    sub_24A5BB6F0();
    swift_bridgeObjectRelease();
  }
  sub_24A5BB6F0();
  swift_bridgeObjectRelease();
  sub_24A5BB6F0();
  sub_24A49A24C();
  sub_24A5BB7F0();
  sub_24A5BB6F0();
  swift_bridgeObjectRelease();
  sub_24A5BB6F0();
  swift_bridgeObjectRelease();
  sub_24A5BB6F0();
  sub_24A5BC280();
  sub_24A5BB6F0();
  sub_24A5BC430();
  sub_24A5BB6F0();
  swift_bridgeObjectRelease();
  sub_24A5BB6F0();
  sub_24A5BC430();
  sub_24A5BB6F0();
  swift_bridgeObjectRelease();
  sub_24A5BB6F0();
  return 0;
}

_WORD *sub_24A4C0CE8(_WORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = (unsigned __int16)*result;
  if (*result)
  {
    uint64_t v16 = a3 - 1;
    if (__OFSUB__(a3, 1))
    {
      __break(1u);
    }
    else
    {
      uint64_t v7 = 0;
      do
      {
        long long v8 = *(_OWORD *)(a2 + 16);
        v17[0] = *(_OWORD *)a2;
        v17[1] = v8;
        uint64_t v18 = *(void *)(a2 + 32);
        uint64_t v9 = *(void *)&v17[0];
        sub_24A497498((uint64_t)v17);
        swift_bridgeObjectRetain();
        sub_24A5BC430();
        sub_24A5BB6F0();
        swift_bridgeObjectRelease();
        sub_24A5BB6F0();
        swift_bridgeObjectRetain();
        sub_24A5BB6F0();
        __swift_instantiateConcreteTypeFromMangledName(qword_26979B058);
        uint64_t v10 = swift_allocObject();
        *(_OWORD *)(v10 + 16) = xmmword_24A5BDAE0;
        swift_bridgeObjectRetain();
        sub_24A4C0AA4();
        sub_24A5BB6F0();
        swift_bridgeObjectRelease();
        *(void *)(v10 + 56) = MEMORY[0x263F8D310];
        *(void *)(v10 + 32) = a4;
        *(void *)(v10 + 40) = a5;
        sub_24A5BC600();
        swift_bridgeObjectRelease();
        if (v16 >= 1)
        {
          int v11 = *(unsigned __int8 *)(v9 + 18);
          swift_unknownObjectRetain();
          uint64_t v12 = (_WORD *)(v9 + 16);
          uint64_t v13 = v9 + 24;
          if (v11) {
            sub_24A4C0CE8(v12, v13, v16, a4, a5);
          }
          else {
            sub_24A4C0EF4(v12, v13, a4, a5);
          }
          sub_24A496BE8((uint64_t)v17);
        }
        ++v7;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = (_WORD *)sub_24A496BE8((uint64_t)v17);
        a2 += 40;
      }
      while (v14 != v7);
    }
  }
  return result;
}

_WORD *sub_24A4C0EF4(_WORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = (unsigned __int16)*result;
  if (*result)
  {
    uint64_t v7 = 0;
    uint64_t v8 = a2 + 21;
    uint64_t v9 = MEMORY[0x263F8D310];
    do
    {
      __swift_instantiateConcreteTypeFromMangledName(qword_26979B058);
      uint64_t v10 = swift_allocObject();
      *(_OWORD *)(v10 + 16) = xmmword_24A5BDAE0;
      swift_bridgeObjectRetain();
      sub_24A5BC430();
      sub_24A5BB6F0();
      swift_bridgeObjectRelease();
      sub_24A5BB6F0();
      swift_bridgeObjectRetain();
      sub_24A5BC280();
      sub_24A5BB6F0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)(v10 + 56) = v9;
      *(void *)(v10 + 32) = a3;
      *(void *)(v10 + 40) = a4;
      sub_24A5BC600();
      uint64_t result = (_WORD *)swift_bridgeObjectRelease();
      v8 += 24;
      ++v7;
    }
    while (v4 != v7);
  }
  return result;
}

uint64_t sub_24A4C1084(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    return a1;
  }
  uint64_t result = swift_arrayDestroy();
  if ((unsigned __int128)(a2 * (__int128)*(uint64_t *)(*(void *)(a3 - 8) + 72)) >> 64 == (a2
                                                                                            * *(void *)(*(void *)(a3 - 8) + 72)) >> 63)
    return a1;
  __break(1u);
  return result;
}

uint64_t sub_24A4C10F8@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v25 = a5;
  uint64_t v26 = a2;
  uint64_t v28 = a4;
  uint64_t v27 = a1;
  uint64_t v24 = *(void *)(a3 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v10);
  uint64_t v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v21 + 16))(v20, v6);
  uint64_t v22 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1, v14) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v20, v14);
    v27(v18, v12);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    if (v7) {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v24 + 32))(v25, v12, a3);
    }
    uint64_t v22 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(a6, v22, 1);
}

uint64_t _UnsafeWrappedBuffer.first.getter()
{
  return *(void *)v0;
}

uint64_t _UnsafeWrappedBuffer.second.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t _UnsafeWrappedBuffer.init(_:_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  *(void *)a6 = result;
  *(void *)(a6 + 8) = a2;
  *(void *)(a6 + 16) = a3;
  *(void *)(a6 + 24) = a4;
  *(unsigned char *)(a6 + 32) = a5 & 1;
  return result;
}

uint64_t _UnsafeWrappedBuffer.init(start:count:)@<X0>(uint64_t a1@<X8>)
{
  return sub_24A4C1578(MEMORY[0x263F8D230], a1);
}

uint64_t _UnsafeWrappedBuffer.init(first:count:second:count:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_24A5BB550();
  uint64_t v4 = v3;
  uint64_t result = sub_24A5BB550();
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = result;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = 0;
  return result;
}

uint64_t _UnsafeWrappedBuffer.count.getter(uint64_t a1)
{
  return sub_24A4C17F8(a1, MEMORY[0x263F8D238]);
}

uint64_t _UnsafeMutableWrappedBuffer.init(_:_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  if ((a5 & 1) == 0 && a4 == 0) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = a3;
  }
  *(void *)a6 = result;
  *(void *)(a6 + 8) = a2;
  *(void *)(a6 + 16) = v6;
  *(void *)(a6 + 24) = a4;
  *(unsigned char *)(a6 + 32) = a5 & 1 | (a4 == 0);
  return result;
}

uint64_t _UnsafeMutableWrappedBuffer.init(_:_:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, char a3@<W6>, uint64_t a4@<X8>)
{
  BOOL v8 = (a3 & 1) == 0;
  uint64_t result = sub_24A5BBDA0();
  if (v8 && a2 == 0) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = a1;
  }
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v10;
  *(void *)(a4 + 16) = v11;
  *(void *)(a4 + 24) = a2;
  *(unsigned char *)(a4 + 32) = a3 & 1 | (a2 == 0);
  return result;
}

uint64_t _UnsafeMutableWrappedBuffer.init(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_24A5BBDA0();
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = a2;
  if (v7) {
    uint64_t v8 = result;
  }
  else {
    uint64_t v8 = 0;
  }
  *(void *)(a3 + 16) = v8;
  *(void *)(a3 + 24) = v7;
  *(unsigned char *)(a3 + 32) = v7 == 0;
  return result;
}

uint64_t _UnsafeMutableWrappedBuffer.init(start:count:)@<X0>(uint64_t a1@<X8>)
{
  return sub_24A4C1578(MEMORY[0x263F8D908], a1);
}

uint64_t sub_24A4C1578@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t a2@<X8>)
{
  uint64_t result = a1();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 32) = 1;
  return result;
}

uint64_t _UnsafeMutableWrappedBuffer.init(first:count:second:count:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_24A5BBD50();
  uint64_t v4 = v3;
  uint64_t result = sub_24A5BBD50();
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v4;
  if (v6) {
    uint64_t v7 = result;
  }
  else {
    uint64_t v7 = 0;
  }
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v6 == 0;
  return result;
}

uint64_t _UnsafeMutableWrappedBuffer.init(mutating:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_24A5BBD90();
  uint64_t v8 = v7;
  sub_24A5BB580();
  uint64_t v9 = sub_24A5BBD20();
  uint64_t v10 = *(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v23, a1 + 16, v9);
  v10(v19, (uint64_t)v23, v9);
  v18[2] = a2;
  uint64_t v11 = sub_24A5BBDB0();
  uint64_t result = sub_24A4C10F8((void (*)(char *, char *))sub_24A4C17A4, (uint64_t)v18, MEMORY[0x263F8E628], v11, v12, (uint64_t)&v20);
  uint64_t v14 = v20;
  uint64_t v15 = v21;
  if (v21) {
    uint64_t v16 = v20;
  }
  else {
    uint64_t v16 = 0;
  }
  if (v21) {
    char v17 = v22;
  }
  else {
    char v17 = 1;
  }
  if (!v22) {
    uint64_t v14 = v16;
  }
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v8;
  *(void *)(a3 + 16) = v14;
  *(void *)(a3 + 24) = v15;
  *(unsigned char *)(a3 + 32) = v17;
  return result;
}

uint64_t sub_24A4C1768@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_24A5BBD90();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_24A4C17A4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_24A5BBD90();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t _UnsafeMutableWrappedBuffer.count.getter(uint64_t a1)
{
  return sub_24A4C17F8(a1, MEMORY[0x263F8D918]);
}

uint64_t sub_24A4C17F8(uint64_t a1, void (*a2)(uint64_t, void))
{
  a2(255, *(void *)(a1 + 16));
  uint64_t v3 = sub_24A5BBD20();
  uint64_t v4 = *(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 32);
  v4(v8, v2 + 16, v3);
  v4(v9, (uint64_t)v8, v3);
  if (v11) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v10;
  }
  uint64_t v6 = *(void *)(v2 + 8);
  uint64_t result = v6 + v5;
  if (__OFADD__(v6, v5)) {
    __break(1u);
  }
  return result;
}

uint64_t _UnsafeMutableWrappedBuffer.prefix(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = *(void *)(v2 + 8);
  uint64_t v20 = *(void *)v2;
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  char v18 = *(unsigned char *)(v2 + 32);
  sub_24A5BBDB0();
  uint64_t v7 = sub_24A5BBD20();
  uint64_t v8 = *(uint64_t (**)(char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 32);
  v8(v21, (unsigned char *)(v2 + 16), v7);
  uint64_t result = v8(v24, v21, v7);
  if (v26) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = v25;
  }
  uint64_t v11 = *(void *)(v2 + 8);
  BOOL v12 = __OFADD__(v11, v10);
  uint64_t v13 = v11 + v10;
  if (v12)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v13 <= a1)
  {
    char v16 = v18 & 1;
    uint64_t v11 = v19;
    uint64_t v14 = v20;
LABEL_14:
    *(void *)a2 = v14;
    *(void *)(a2 + 8) = v11;
    *(void *)(a2 + 16) = v5;
    *(void *)(a2 + 24) = v6;
    *(unsigned char *)(a2 + 32) = v16;
    return result;
  }
  uint64_t v14 = *(void *)v2;
  if (v11 >= a1)
  {
    v22[0] = v14;
    v22[1] = v11;
    swift_getWitnessTable();
    sub_24A5BBBB0();
    uint64_t result = sub_24A5BBDA0();
    uint64_t v14 = result;
    uint64_t v11 = v17;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    char v16 = 1;
    goto LABEL_14;
  }
  uint64_t result = v8((char *)v22, v21, v7);
  if ((v23 & 1) == 0)
  {
    if (!__OFSUB__(a1, v11))
    {
      swift_getWitnessTable();
      sub_24A5BBBB0();
      uint64_t result = sub_24A5BBDA0();
      uint64_t v6 = v15;
      char v16 = v15 == 0;
      if (v15) {
        uint64_t v5 = result;
      }
      else {
        uint64_t v5 = 0;
      }
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t _UnsafeMutableWrappedBuffer.suffix(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(v2 + 8);
  uint64_t v5 = *(void *)(v2 + 24);
  char v6 = *(unsigned char *)(v2 + 32) & 1;
  if (v6) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *(void *)(v2 + 24);
  }
  BOOL v8 = __OFADD__(v4, v7);
  uint64_t v9 = v4 + v7;
  if (v8)
  {
    __break(1u);
  }
  else
  {
    uint64_t v10 = result;
    uint64_t result = *(void *)v2;
    uint64_t v11 = *(void *)(v2 + 16);
    if (v9 <= v10)
    {
LABEL_15:
      *(void *)a2 = result;
      *(void *)(a2 + 8) = v4;
      *(void *)(a2 + 16) = v11;
      *(void *)(a2 + 24) = v5;
      *(unsigned char *)(a2 + 32) = v6 & 1;
      return result;
    }
    if (*(unsigned char *)(v2 + 32))
    {
      sub_24A5BBDB0();
      swift_getWitnessTable();
      sub_24A5BB3D0();
      uint64_t result = sub_24A5BBDA0();
LABEL_14:
      char v6 = 1;
      goto LABEL_15;
    }
    if (v5 >= v10)
    {
      sub_24A5BBDB0();
      swift_getWitnessTable();
      sub_24A5BB3D0();
      uint64_t result = sub_24A5BBDA0();
      uint64_t v11 = 0;
      uint64_t v5 = 0;
      goto LABEL_14;
    }
    if (!__OFSUB__(v10, v5))
    {
      sub_24A5BBDB0();
      swift_getWitnessTable();
      sub_24A5BB3D0();
      uint64_t result = sub_24A5BBDA0();
      char v6 = v5 == 0;
      if (!v5) {
        uint64_t v11 = 0;
      }
      goto LABEL_15;
    }
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall _UnsafeMutableWrappedBuffer.deinitialize()()
{
  uint64_t v2 = *(void *)(v0 + 16);
  sub_24A4C1084(*v1, v1[1], v2);
  sub_24A5BBDB0();
  uint64_t v3 = sub_24A5BBD20();
  uint64_t v4 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v3 - 8) + 32);
  v4((uint64_t *)v5, v1 + 2, v3);
  v4(v6, (uint64_t *)v5, v3);
  if ((v7 & 1) == 0) {
    sub_24A4C1084(v6[0], v6[1], v2);
  }
}

uint64_t _UnsafeMutableWrappedBuffer.initialize<A>(fromPrefixOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v32 = a3;
  uint64_t v33 = a4;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = sub_24A5BBD20();
  uint64_t v23 = *(void *)(v6 - 8);
  uint64_t v24 = v6;
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v23 - v8;
  uint64_t v10 = *(void *)(v5 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v7);
  uint64_t v29 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v23 - v14;
  int v34 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = *(void *)(v4 + 8);
  uint64_t v30 = (void (**)(char *, char *, uint64_t))(v10 + 32);
  uint64_t v31 = (unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  uint64_t v28 = v10 + 16;
  uint64_t v26 = v4 + 16;
  uint64_t v27 = v10 + 8;
  uint64_t v25 = v17;
  uint64_t v18 = (uint64_t)v29;
  do
  {
    if (v16 == v17)
    {
      if (v34)
      {
        uint64_t v16 = v17;
        goto LABEL_15;
      }
      sub_24A5BBDB0();
      uint64_t v19 = sub_24A5BBD20();
      uint64_t v20 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32);
      v20(v35, v26, v19);
      v20(&v36, (uint64_t)v35, v19);
      if ((v38 & 1) != 0 || v37 < 1) {
        return v17;
      }
      uint64_t v16 = 0;
      int v34 = 1;
      uint64_t v17 = v37;
    }
    sub_24A5BBEE0();
    if ((*v31)(v9, 1, v5) == 1) {
      goto LABEL_12;
    }
    (*v30)(v15, v9, v5);
    uint64_t result = sub_24A5BB540();
    if (!result) {
      goto LABEL_18;
    }
    uint64_t v21 = result + *(void *)(v10 + 72) * v16;
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 16))(v18, v15, v5);
    sub_24A544CAC(v18, v21, v5);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, v5);
  }
  while (!__OFADD__(v16++, 1));
  __break(1u);
LABEL_12:
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v9, v24);
  uint64_t v17 = v16;
  if ((v34 & 1) == 0) {
    return v17;
  }
LABEL_15:
  uint64_t v17 = v25 + v16;
  if (!__OFADD__(v25, v16)) {
    return v17;
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t _UnsafeMutableWrappedBuffer.initialize<A>(fromSequencePrefix:)(uint64_t a1, char *a2, void (*a3)(void, void), uint64_t a4, uint64_t a5)
{
  uint64_t v66 = a2;
  uint64_t v60 = a1;
  uint64_t v56 = (void (*)(char *, uint64_t))a3;
  uint64_t v8 = *((void *)a3 + 2);
  uint64_t v53 = sub_24A5BBD20();
  uint64_t v52 = *(void *)(v53 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v53);
  uint64_t v64 = (char *)&v49 - v10;
  uint64_t v65 = *(void *)(v8 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v63 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v54 = (char *)&v49 - v13;
  uint64_t v62 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v57 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v14 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v68 = (char *)&v49 - v15;
  uint64_t v61 = *(void *)(a4 - 8);
  uint64_t v16 = v61;
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  uint64_t v19 = (char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v49 - v20;
  sub_24A5BBDB0();
  uint64_t v22 = sub_24A5BBD20();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v23 + 32);
  uint64_t v25 = v23 + 32;
  uint64_t v26 = a4;
  v24(v69, (uint64_t *)(v5 + 16), v22);
  uint64_t v58 = v16;
  uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v27(v21, (uint64_t)v66, v26);
  uint64_t v59 = v24;
  uint64_t v55 = v25;
  v24((uint64_t *)v73, v69, v22);
  if (v73[16] == 1)
  {
    uint64_t v28 = v5;
    uint64_t v56 = *(void (**)(char *, uint64_t))(v61 + 8);
    v56(v21, v26);
  }
  else
  {
    uint64_t v50 = v5;
    uint64_t v51 = *(void *)(v5 + 8);
    uint64_t v29 = sub_24A5BB860();
    uint64_t v30 = *(void (**)(char *, uint64_t))(v61 + 8);
    v30(v21, v26);
    if (v51 < v29)
    {
      uint64_t v31 = v66;
      v27(v19, (uint64_t)v66, v26);
      uint64_t v32 = v60;
      uint64_t v33 = (void (*)(uint64_t, uint64_t))v30;
      sub_24A5BB840();
      uint64_t v34 = AssociatedTypeWitness;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v36 = _UnsafeMutableWrappedBuffer.initialize<A>(fromPrefixOf:)(v32, (uint64_t)v56, v34, AssociatedConformanceWitness);
      v33((uint64_t)v31, v26);
      return v36;
    }
    uint64_t v28 = v50;
    uint64_t v56 = v30;
  }
  v27(v19, (uint64_t)v66, v26);
  uint64_t v37 = *(void *)(v28 + 8);
  uint64_t v36 = sub_24A5BB850();
  if (v36 != v37 || (v59(&v70, v69, v22), uint64_t v36 = v37, (v72 & 1) != 0))
  {
    v56(v66, v26);
LABEL_17:
    (*(void (**)(uint64_t, char *, uint64_t))(v57 + 32))(v60, v68, AssociatedTypeWitness);
    return v36;
  }
  uint64_t v38 = v71;
  if (v71 < 1)
  {
    uint64_t v38 = 0;
    uint64_t v48 = v66;
LABEL_16:
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v56)(v48, v26);
    uint64_t v36 = v37 + v38;
    if (!__OFADD__(v37, v38)) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v51 = v37;
    uint64_t v61 = v70;
    uint64_t v55 = v26;
    uint64_t v62 = swift_getAssociatedConformanceWitness();
    uint64_t v39 = 0;
    uint64_t v40 = (unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48);
    uint64_t v41 = (void (**)(char *, char *, uint64_t))(v65 + 32);
    uint64_t v59 = (void (*)(uint64_t *, uint64_t *, uint64_t))(v65 + 16);
    uint64_t v42 = v54;
    uint64_t v43 = (uint64_t)v63;
    while (1)
    {
      uint64_t v44 = v64;
      sub_24A5BBEE0();
      if ((*v40)(v44, 1, v8) == 1) {
        break;
      }
      (*v41)(v42, v44, v8);
      uint64_t result = sub_24A5BB540();
      if (!result) {
        goto LABEL_22;
      }
      uint64_t v46 = v65;
      uint64_t v47 = result + *(void *)(v65 + 72) * v39;
      (*(void (**)(uint64_t, char *, uint64_t))(v65 + 16))(v43, v42, v8);
      sub_24A544CAC(v43, v47, v8);
      (*(void (**)(char *, uint64_t))(v46 + 8))(v42, v8);
      if (v38 == ++v39)
      {
        uint64_t v26 = v55;
        uint64_t v48 = v66;
        uint64_t v37 = v51;
        goto LABEL_16;
      }
    }
    v56(v66, v55);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v44, v53);
    uint64_t v36 = v51 + v39;
    if (!__OFADD__(v51, v39)) {
      goto LABEL_17;
    }
  }
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

uint64_t _UnsafeMutableWrappedBuffer.initialize<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v65 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v10 = sub_24A5BC290();
  uint64_t v54 = *(void *)(v10 - 8);
  uint64_t v55 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v53 = (char *)&v47 - v11;
  uint64_t v64 = a4;
  uint64_t v12 = swift_getAssociatedTypeWitness();
  uint64_t v60 = *(void *)(v12 - 8);
  uint64_t v61 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v59 = (char *)&v47 - v13;
  uint64_t v62 = AssociatedConformanceWitness;
  uint64_t v14 = sub_24A5BC2A0();
  uint64_t v57 = *(void *)(v14 - 8);
  uint64_t v58 = v14;
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  uint64_t v56 = (char *)&v47 - v16;
  uint64_t v63 = *(void (**)(uint64_t, uint64_t))(AssociatedTypeWitness - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v47 - v20;
  uint64_t v22 = *(void *)(a2 + 16);
  sub_24A5BBDB0();
  uint64_t v23 = sub_24A5BBD20();
  uint64_t v24 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v23 - 8) + 32);
  v24(v66, v4 + 2, v23);
  v24(v67, v66, v23);
  if (v68)
  {
    uint64_t v25 = *v4;
    uint64_t v26 = v4[1];
    uint64_t v27 = v65;
    UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)(v65, v25, v26, v22, a3, v64);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(v27, a3);
  }
  uint64_t v52 = v22;
  uint64_t v50 = v67[0];
  uint64_t v49 = v67[1];
  sub_24A5BBAD0();
  uint64_t v29 = *v4;
  uint64_t v30 = v4[1];
  sub_24A5BBB10();
  uint64_t v31 = v63;
  uint64_t v32 = (char *)v63 + 8;
  uint64_t v51 = (void (*)(char *, uint64_t))*((void *)v63 + 1);
  v51(v19, AssociatedTypeWitness);
  uint64_t v33 = *(void *)(v62 + 8);
  uint64_t result = sub_24A5BB530();
  if ((result & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v34 = (void (*)(char *, char *, uint64_t))*((void *)v31 + 2);
  uint64_t v48 = v30;
  uint64_t v35 = v56;
  uint64_t v63 = (void (*)(uint64_t, uint64_t))((char *)v31 + 16);
  uint64_t v47 = v34;
  v34(v56, v21, AssociatedTypeWitness);
  uint64_t v62 = v33;
  uint64_t v36 = v58;
  swift_getWitnessTable();
  uint64_t v37 = (uint64_t)v59;
  sub_24A5BBBE0();
  (*(void (**)(char *, uint64_t))(v57 + 8))(v35, v36);
  uint64_t v38 = v61;
  uint64_t v39 = swift_getAssociatedConformanceWitness();
  uint64_t v40 = v29;
  uint64_t v41 = v52;
  uint64_t v58 = v39;
  UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)(v37, v40, v48, v52, v38, v39);
  uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v60 + 8);
  v42(v37, v38);
  uint64_t result = sub_24A5BB530();
  if ((result & 1) == 0)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  uint64_t v62 = (uint64_t)v32;
  uint64_t v43 = v37;
  uint64_t v44 = v53;
  v47(v53, v21, AssociatedTypeWitness);
  uint64_t v63 = v42;
  uint64_t v45 = v55;
  swift_getWitnessTable();
  uint64_t v46 = v65;
  sub_24A5BBBE0();
  (*(void (**)(char *, uint64_t))(v54 + 8))(v44, v45);
  UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)(v43, v50, v49, v41, v38, v58);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(v46, a3);
  v63(v43, v38);
  return ((uint64_t (*)(char *, uint64_t))v51)(v21, AssociatedTypeWitness);
}

uint64_t _UnsafeMutableWrappedBuffer.assign<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  _UnsafeMutableWrappedBuffer.deinitialize()();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a3);
  return _UnsafeMutableWrappedBuffer.initialize<A>(from:)((uint64_t)v10, a2, a3, a4);
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_24A4C2F04(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_24A4C2F24(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 33) = v3;
  return result;
}

uint64_t type metadata accessor for _UnsafeWrappedBuffer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for _UnsafeMutableWrappedBuffer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t OrderedDictionary.init()()
{
  uint64_t v0 = OrderedSet.init()();
  sub_24A5BB970();
  sub_24A5BC170();
  return v0;
}

uint64_t OrderedDictionary.init(minimumCapacity:persistent:)(Swift::Int a1, Swift::Bool a2)
{
  uint64_t v2 = OrderedSet.init(minimumCapacity:persistent:)(a1, a2);
  sub_24A5BB970();
  sub_24A5BC170();
  sub_24A5BC210();
  sub_24A5BC180();
  return v2;
}

uint64_t OrderedDictionary.init<A>(uniqueKeysWithValues:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v59 = a1;
  uint64_t v57 = *(void *)(a3 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](a1);
  uint64_t v67 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v53 - v14;
  uint64_t v56 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v74 = sub_24A5BBD20();
  uint64_t v69 = *(void (***)(char *, char *, uint64_t))(v74 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v74);
  uint64_t v73 = (char *)&v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  char v72 = (char *)&v53 - v23;
  uint64_t v58 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v22);
  char v68 = (char *)&v53 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v25 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v27 = (char *)&v53 - v26;
  uint64_t v28 = a5;
  if (sub_24A5BB350() == a4)
  {
    uint64_t v50 = v59;
    uint64_t v51 = sub_24A4C4890(v59, a2, a3, a4, v28);
    uint64_t v52 = v50;
    uint64_t v49 = v51;
    (*(void (**)(char *, uint64_t))(v58 + 8))(v52, a4);
    return v49;
  }
  else
  {
    uint64_t v53 = v25;
    uint64_t v64 = v15;
    uint64_t v29 = OrderedSet.init()();
    uint64_t v31 = v30;
    sub_24A5BB970();
    uint64_t v32 = sub_24A5BC170();
    uint64_t v75 = v29;
    uint64_t v76 = v31;
    uint64_t v60 = &v77;
    uint64_t v77 = v32;
    uint64_t v33 = v59;
    uint64_t v71 = (char *)sub_24A5BB860();
    uint64_t v65 = a2;
    uint64_t v66 = a5;
    uint64_t v63 = a3;
    type metadata accessor for OrderedDictionary();
    OrderedDictionary.reserveCapacity(_:)((Swift::Int)v71);
    (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v68, v33, a4);
    uint64_t v71 = v27;
    sub_24A5BB840();
    uint64_t v54 = a4;
    uint64_t v34 = AssociatedTypeWitness;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v69 += 4;
    uint64_t v70 = AssociatedConformanceWitness;
    char v68 = (char *)(TupleTypeMetadata2 - 8);
    uint64_t v61 = (void (**)(char *, char *, uint64_t))(v57 + 32);
    uint64_t v62 = (void (**)(char *, char *, uint64_t))(v56 + 32);
    uint64_t v36 = (void (**)(char *, char *, uint64_t))(v57 + 16);
    uint64_t v37 = (void (**)(char *, uint64_t))(v57 + 8);
    uint64_t v38 = (void (**)(uint64_t, uint64_t))(v56 + 8);
    while (1)
    {
      uint64_t v39 = v73;
      Swift::Int v40 = (Swift::Int)v71;
      sub_24A5BBEE0();
      uint64_t v41 = v72;
      (*v69)(v72, v39, v74);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48))(v41, 1, TupleTypeMetadata2) == 1)
      {
        (*(void (**)(char *, uint64_t))(v58 + 8))(v59, v54);
        (*(void (**)(Swift::Int, uint64_t))(v53 + 8))(v40, v34);
        return v75;
      }
      uint64_t v42 = TupleTypeMetadata2;
      uint64_t v43 = &v41[*(int *)(TupleTypeMetadata2 + 48)];
      uint64_t v44 = v65;
      (*v62)(v18, v41, v65);
      uint64_t v45 = v64;
      uint64_t v46 = (uint64_t)v18;
      uint64_t v47 = v63;
      (*v61)(v64, v43, v63);
      type metadata accessor for OrderedSet();
      uint64_t result = OrderedSet._append(_:)(v46);
      if ((result & 1) == 0) {
        break;
      }
      (*v36)(v67, v45, v47);
      sub_24A5BC210();
      sub_24A5BC1C0();
      (*v37)(v45, v47);
      (*v38)(v46, v44);
      uint64_t v18 = (char *)v46;
      TupleTypeMetadata2 = v42;
    }
    __break(1u);
  }
  return result;
}

uint64_t OrderedDictionary.init<A>(_uncheckedUniqueKeysWithValues:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_24A4C3FA4(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void))sub_24A4C4890);
}

uint64_t OrderedDictionary.init<A>(uniqueKeysWithValues:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_24A4C3FA4(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void))sub_24A4C4E30);
}

uint64_t OrderedDictionary.init<A, B>(uniqueKeys:values:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v30 = a7;
  uint64_t v33 = a4;
  uint64_t v11 = *(void *)(a6 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v18 = *(void (**)(char *))(v16 + 16);
  uint64_t v32 = v19;
  v18((char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = sub_24A5BBA00();
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  uint64_t v31 = a2;
  v21(v14, a2, a6);
  sub_24A5BBA00();
  uint64_t v22 = _s19CollectionsInternal4HeapV5countSivg_0();
  uint64_t result = _s19CollectionsInternal4HeapV5countSivg_0();
  if (v22 == result)
  {
    uint64_t v34 = v20;
    uint64_t v24 = sub_24A5BC210();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v26 = OrderedSet.init<A>(_:)((uint64_t)&v34, a3, v24, v30, WitnessTable);
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v27 = _s19CollectionsInternal4HeapV5countSivg_0();
    uint64_t v28 = _s19CollectionsInternal4HeapV5countSivg_0();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v31, a6);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v32, a5);
    swift_release();
    swift_release();
    uint64_t result = swift_release();
    if (v27 == v28) {
      return v26;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t OrderedDictionary.init<A>(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_24A4C3A50(a1, a2, a3, a4, a5, a6, a7, a8, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_24A5303F0);
}

{
  return sub_24A4C3A50(a1, a2, a3, a4, a5, a6, a7, a8, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_24A530ADC);
}

uint64_t sub_24A4C3A50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v13 = OrderedSet.init()();
  sub_24A5BB970();
  sub_24A5BC170();
  uint64_t v14 = type metadata accessor for OrderedDictionary();
  a9(a1, a2, a3, v14, a6, a8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a6 - 8) + 8))(a1, a6);
  uint64_t result = v13;
  if (v17)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t OrderedDictionary.init<A>(grouping:by:)(uint64_t *a1, uint64_t (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13 = sub_24A4C5378(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if (!v9) {
    uint64_t v10 = v13;
  }
  (*(void (**)(uint64_t *, uint64_t))(*(void *)(a6 - 8) + 8))(a1, a6);
  return v10;
}

uint64_t OrderedDictionary.init<A>(_grouping:by:)(uint64_t *a1, uint64_t (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13 = sub_24A4C5378(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if (!v9) {
    uint64_t v10 = v13;
  }
  (*(void (**)(uint64_t *, uint64_t))(*(void *)(a6 - 8) + 8))(a1, a6);
  return v10;
}

uint64_t OrderedDictionary.init<A>(grouping:by:)(uint64_t *a1, uint64_t (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  swift_getAssociatedTypeWitness();
  uint64_t v15 = sub_24A5BB9F0();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v17 = sub_24A4C5378(a1, a2, a3, a4, v15, a5, a6, WitnessTable, a7);
  if (!v7) {
    a7 = v17;
  }
  (*(void (**)(uint64_t *, uint64_t))(*(void *)(a5 - 8) + 8))(a1, a5);
  return a7;
}

uint64_t sub_24A4C3E88(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v5 + 16))((char *)&v7 - v4, a2);
  return sub_24A5BBC30();
}

uint64_t OrderedDictionary.init<A>(uncheckedUniqueKeysWithValues:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_24A4C3FA4(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void))sub_24A4C5978);
}

{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t TupleTypeMetadata2;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  uint64_t v25 = a1;
  uint64_t v26 = a5;
  uint64_t v23 = a2;
  uint64_t v9 = sub_24A5BC080();
  uint64_t v27 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v21 - v10;
  uint64_t v12 = a3;
  uint64_t v22 = a3;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v13 = sub_24A5BC270();
  uint64_t v28 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v21 - v14;
  MEMORY[0x24C5C6BF0](a4, a6);
  uint64_t v16 = (void *)swift_allocObject();
  uint64_t v17 = v23;
  void v16[2] = v23;
  v16[3] = v12;
  uint64_t v18 = v26;
  v16[4] = a4;
  v16[5] = v18;
  v16[6] = a6;
  swift_getWitnessTable();
  sub_24A5BC390();
  swift_release();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v9);
  swift_getWitnessTable();
  uint64_t v19 = sub_24A4C4890(v15, v17, v22, v13, v18);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(v25, a4);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v15, v13);
  return v19;
}

uint64_t sub_24A4C3FA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void))
{
  uint64_t v9 = a7();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(a1, a4);
  return v9;
}

uint64_t sub_24A4C42F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v28 = a4;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = TupleTypeMetadata2 - 8;
  uint64_t v10 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v31 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v24 - v12;
  uint64_t v30 = a4 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  uint64_t v14 = *(int *)(v9 + 56);
  uint64_t v15 = &v13[v14];
  uint64_t v29 = &v13[v14];
  uint64_t v16 = a1 + v14;
  uint64_t v25 = a1 + v14;
  uint64_t v17 = *(void *)(a2 - 8);
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  uint64_t v27 = a1;
  v26(v13, a1, a2);
  uint64_t v18 = *(void *)(a3 - 8);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v18 + 16);
  v19(v15, v16);
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v28, v13, a2);
  uint64_t v20 = *(int *)(v9 + 56);
  uint64_t v21 = v31;
  uint64_t v22 = &v31[v20];
  v26(v31, v27, a2);
  ((void (*)(char *, uint64_t, uint64_t))v19)(v22, v25, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v30, v22, a3);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v21, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v29, a3);
}

uint64_t OrderedDictionary.init<A, B>(uncheckedUniqueKeys:values:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v43 = a4;
  uint64_t v44 = a2;
  uint64_t v46 = a6;
  uint64_t v42 = *(void *)(a6 - 8);
  uint64_t v41 = a9;
  uint64_t v11 = MEMORY[0x270FA5388](a1);
  uint64_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v11);
  uint64_t v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v38 - v19;
  uint64_t v21 = *(void (**)(char *))(v15 + 16);
  uint64_t v45 = v22;
  v21((char *)&v38 - v19);
  ((void (*)(char *, char *, uint64_t))v21)(v18, v20, a5);
  uint64_t v40 = a5;
  uint64_t v23 = sub_24A5BBA00();
  uint64_t v47 = v23;
  uint64_t v24 = sub_24A48AB90();
  uint64_t v25 = sub_24A5BC210();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v27 = static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)((uint64_t)&v47, 0, 1, v24, v25, WitnessTable, a7);
  uint64_t v28 = _s19CollectionsInternal4HeapV5countSivg_0();
  uint64_t v29 = 0;
  if (v28 >= 16)
  {
    swift_retain();
    uint64_t v29 = v27;
  }
  uint64_t v30 = OrderedSet.init(_uniqueElements:_:)(v23, v29);
  swift_release();
  uint64_t v39 = *(void (**)(char *, uint64_t))(v15 + 8);
  uint64_t v31 = v40;
  v39(v20, v40);
  uint64_t v32 = v42;
  uint64_t v33 = v44;
  uint64_t v34 = v46;
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v13, v44, v46);
  swift_retain();
  swift_retain();
  sub_24A5BBA00();
  uint64_t v35 = _s19CollectionsInternal4HeapV5countSivg_0();
  uint64_t v36 = _s19CollectionsInternal4HeapV5countSivg_0();
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v33, v34);
  v39(v45, v31);
  swift_release();
  uint64_t result = swift_release();
  if (v35 == v36) {
    return v30;
  }
  __break(1u);
  return result;
}

uint64_t sub_24A4C4890(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v61 = a5;
  uint64_t v62 = a1;
  uint64_t v47 = *(void *)(a3 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](a1);
  uint64_t v54 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v53 = (char *)&v44 - v10;
  uint64_t v45 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v51 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = v13;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v60 = sub_24A5BBD20();
  uint64_t v57 = *(void (***)(char *, char *, uint64_t))(v60 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v60);
  uint64_t v59 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v44 - v19;
  uint64_t v58 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v56 = (char *)&v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v46 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v23 = (char *)&v44 - v22;
  uint64_t v24 = OrderedSet.init()();
  uint64_t v26 = v25;
  sub_24A5BB970();
  uint64_t v27 = sub_24A5BC170();
  uint64_t v64 = v24;
  uint64_t v65 = v26;
  uint64_t v50 = &v66;
  uint64_t v66 = v27;
  uint64_t v28 = v62;
  Swift::Int v29 = sub_24A5BB860();
  uint64_t v55 = v14;
  uint64_t v52 = a3;
  type metadata accessor for OrderedDictionary();
  OrderedDictionary.reserveCapacity(_:)(v29);
  (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v56, v28, a4);
  uint64_t v62 = v23;
  sub_24A5BB840();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v57 += 4;
  uint64_t v58 = AssociatedConformanceWitness;
  uint64_t v56 = (char *)(TupleTypeMetadata2 - 8);
  uint64_t v48 = (void (**)(char *, char *, uint64_t))(v47 + 32);
  uint64_t v49 = (void (**)(uint64_t, char *, uint64_t))(v45 + 32);
  uint64_t v31 = (void (**)(char *, char *, uint64_t))(v47 + 16);
  uint64_t v32 = (void (**)(char *, uint64_t))(v47 + 8);
  uint64_t v33 = (void (**)(uint64_t, uint64_t))(v45 + 8);
  uint64_t v34 = (uint64_t)v51;
  uint64_t v35 = v52;
  while (1)
  {
    uint64_t v36 = v59;
    sub_24A5BBEE0();
    (*v57)(v20, v36, v60);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48))(v20, 1, TupleTypeMetadata2) == 1)break; {
    uint64_t v37 = &v20[*(int *)(TupleTypeMetadata2 + 48)];
    }
    uint64_t v38 = TupleTypeMetadata2;
    uint64_t v39 = v55;
    (*v49)(v34, v20, v55);
    uint64_t v40 = v53;
    (*v48)(v53, v37, v35);
    uint64_t v41 = type metadata accessor for OrderedSet();
    OrderedSet._appendNew(_:)(v34, v41);
    (*v31)(v54, v40, v35);
    sub_24A5BC210();
    sub_24A5BC1C0();
    (*v32)(v40, v35);
    uint64_t v42 = v39;
    TupleTypeMetadata2 = v38;
    (*v33)(v34, v42);
  }
  (*(void (**)(char *, uint64_t))(v46 + 8))(v62, AssociatedTypeWitness);
  return v64;
}

uint64_t sub_24A4C4E30(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v50 = a5;
  uint64_t v48 = a1;
  uint64_t v38 = *(void *)(a3 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](a1);
  uint64_t v47 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v38 - v10;
  uint64_t v49 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = v15;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v16 = sub_24A5BBD20();
  uint64_t v17 = MEMORY[0x270FA5388](v16 - 8);
  uint64_t v19 = (char *)&v38 - v18;
  uint64_t v46 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v45 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v39 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v22 = (char *)&v38 - v21;
  uint64_t v23 = OrderedSet.init()();
  uint64_t v25 = v24;
  sub_24A5BB970();
  uint64_t v26 = sub_24A5BC170();
  uint64_t v53 = v23;
  uint64_t v54 = v25;
  uint64_t v55 = v26;
  uint64_t v27 = v48;
  Swift::Int v28 = sub_24A5BB860();
  type metadata accessor for OrderedDictionary();
  OrderedDictionary.reserveCapacity(_:)(v28);
  (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v45, v27, a4);
  sub_24A5BB840();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v48 = v22;
  uint64_t v46 = AssociatedConformanceWitness;
  sub_24A5BBEE0();
  uint64_t v30 = TupleTypeMetadata2;
  uint64_t v31 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v32 = *(char **)(v31 + 48);
  uint64_t v44 = v31 + 48;
  uint64_t v45 = v32;
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v32)(v19, 1, TupleTypeMetadata2) == 1)
  {
LABEL_5:
    (*(void (**)(char *, uint64_t))(v39 + 8))(v48, AssociatedTypeWitness);
    return v53;
  }
  else
  {
    uint64_t v43 = *(void (**)(char *, char *, uint64_t))(v49 + 32);
    uint64_t v41 = &v55;
    uint64_t v42 = (void (**)(char *, char *, uint64_t))(v38 + 32);
    uint64_t v33 = (void (**)(char *, char *, uint64_t))(v38 + 16);
    uint64_t v34 = (void (**)(char *, uint64_t))(v38 + 8);
    v49 += 32;
    uint64_t v35 = (void (**)(char *, uint64_t))(v49 - 24);
    while (1)
    {
      uint64_t v36 = &v19[*(int *)(v30 + 48)];
      v43(v14, v19, v52);
      (*v42)(v11, v36, a3);
      type metadata accessor for OrderedSet();
      uint64_t result = OrderedSet._append(_:)((uint64_t)v14);
      if ((result & 1) == 0) {
        break;
      }
      (*v33)(v47, v11, a3);
      sub_24A5BC210();
      sub_24A5BC1C0();
      (*v34)(v11, a3);
      (*v35)(v14, v52);
      sub_24A5BBEE0();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v45)(v19, 1, v30) == 1) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_24A4C5378(uint64_t *a1, uint64_t (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v66 = a2;
  uint64_t v67 = a3;
  uint64_t v75 = a1;
  uint64_t v62 = *(void (***)(char *, uint64_t))(a4 - 8);
  uint64_t v70 = a9;
  MEMORY[0x270FA5388](a1);
  uint64_t v52 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = v14;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v71 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v51 = (char *)&v50 - v16;
  uint64_t v17 = sub_24A5BBD20();
  uint64_t v18 = MEMORY[0x270FA5388](v17 - 8);
  uint64_t v20 = (char *)&v50 - v19;
  uint64_t v21 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v69 = (char *)&v50 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = swift_getAssociatedTypeWitness();
  uint64_t v54 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)&v50 - v24;
  uint64_t v64 = a7;
  uint64_t v26 = OrderedSet.init()();
  char v68 = v27;
  sub_24A5BB970();
  uint64_t v63 = a5;
  uint64_t v28 = sub_24A5BC170();
  uint64_t v72 = v26;
  uint64_t v73 = v68;
  uint64_t v74 = v28;
  (*(void (**)(char *, uint64_t *, uint64_t))(v21 + 16))(v69, v75, a6);
  uint64_t v29 = AssociatedTypeWitness;
  uint64_t v30 = v71;
  sub_24A5BB840();
  swift_getAssociatedConformanceWitness();
  char v68 = v25;
  uint64_t v69 = (char *)v23;
  sub_24A5BBEE0();
  uint64_t v31 = v30 + 48;
  uint64_t v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48);
  if (v32(v20, 1, v29) == 1)
  {
LABEL_5:
    (*(void (**)(char *, char *))(v54 + 8))(v68, v69);
    return v72;
  }
  else
  {
    uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
    uint64_t v33 = v30 + 32;
    uint64_t v60 = a6;
    uint64_t v61 = v34;
    uint64_t v56 = (void (**)(uint64_t, uint64_t))(v62 + 1);
    uint64_t v57 = v32;
    uint64_t v62 = (void (**)(char *, uint64_t))(v33 - 24);
    uint64_t v55 = MEMORY[0x263F8EE60] + 8;
    uint64_t v35 = (uint64_t)v52;
    uint64_t v36 = v51;
    uint64_t v37 = v53;
    uint64_t v71 = v33;
    uint64_t v58 = v31;
    uint64_t v59 = v20;
    while (1)
    {
      v61(v36, v20, v29);
      uint64_t v38 = v66(v36);
      if (v37) {
        break;
      }
      uint64_t v75 = &v50;
      uint64_t v39 = MEMORY[0x270FA5388](v38);
      uint64_t v40 = v63;
      uint64_t v41 = v64;
      *(&v50 - 6) = a4;
      *(&v50 - 5) = v40;
      *(&v50 - 4) = v60;
      *(&v50 - 3) = v41;
      uint64_t v42 = v70;
      *(&v50 - 2) = v65;
      *(&v50 - 1) = v42;
      MEMORY[0x270FA5388](v39);
      *(&v50 - 8) = a4;
      *(&v50 - 7) = v43;
      *(&v50 - 6) = v45;
      *(&v50 - 5) = v44;
      *(&v50 - 4) = v46;
      *(&v50 - 3) = v47;
      *(&v50 - 2) = (uint64_t)v36;
      uint64_t v48 = type metadata accessor for OrderedDictionary();
      uint64_t v20 = v59;
      OrderedDictionary.updateValue<A>(forKey:default:with:)(v35, (void (*)(void))sub_24A4C599C, (uint64_t)(&v50 - 8), (uint64_t (*)(unint64_t))sub_24A4C59C8, (uint64_t)(&v50 - 10), v48);
      uint64_t v37 = 0;
      (*v56)(v35, a4);
      (*v62)(v36, v29);
      sub_24A5BBEE0();
      if (v57(v20, 1, v29) == 1) {
        goto LABEL_5;
      }
    }
    (*(void (**)(char *, char *))(v54 + 8))(v68, v69);
    swift_release();
    swift_release();
    swift_release();
    return ((uint64_t (*)(char *, uint64_t))*v62)(v36, v29);
  }
}

uint64_t sub_24A4C597C()
{
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t sub_24A4C598C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24A4C42F4(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_24A4C599C()
{
  return sub_24A5BBCB0();
}

uint64_t sub_24A4C59C8(uint64_t a1)
{
  return sub_24A4C3E88(a1, *(void *)(v1 + 64));
}

uint64_t TreeSet.subtracting(_:)(uint64_t a1, void (*a2)(uint64_t, unsigned char *, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return TreeSet._subtracting<A>(_:)(a1, a2, a4, a5, a6, a7, MEMORY[0x263F8EE60] + 8, a8);
}

uint64_t TreeSet._subtracting<A>(_:)(uint64_t a1, void (*a2)(uint64_t, unsigned char *, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  swift_retain();
  uint64_t v15 = _HashNode.subtracting<A>(_:_:)(0, a1, a2, a3, a4, a6, MEMORY[0x263F8EE60] + 8, a7, a8);
  uint64_t v17 = v16;
  swift_release();
  if (v15)
  {
    swift_release();
    return TreeSet.init(_new:)(v15, v17, a6, a8);
  }
  return a3;
}

uint64_t TreeSet.subtracting<A>(_:)(uint64_t a1, void (*a2)(uint64_t, unsigned char *, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return TreeSet._subtracting<A>(_:)(a1, a2, a4, a5, a6, a7, a8, a9);
}

uint64_t TreeSet.subtracting<A>(_:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, unsigned char *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v62 = a4;
  uint64_t AssociatedConformanceWitness = a3;
  uint64_t v60 = a1;
  uint64_t v61 = a2;
  uint64_t v66 = MEMORY[0x263F8EE60] + 8;
  swift_getTupleTypeMetadata2();
  sub_24A5BBD20();
  swift_getTupleTypeMetadata2();
  uint64_t v67 = sub_24A5BBD20();
  uint64_t v54 = *(void *)(v67 - 8);
  MEMORY[0x270FA5388](v67);
  uint64_t v56 = (char *)&v51 - v12;
  uint64_t v58 = a8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v55 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v69 = (char *)&v51 - v13;
  uint64_t v14 = sub_24A5BBD20();
  uint64_t v64 = *(void (***)(char *, uint64_t))(v14 - 8);
  uint64_t v65 = v14;
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v20 = (char *)&v51 - v19;
  uint64_t v21 = *(void *)(a5 - 8);
  uint64_t v22 = MEMORY[0x270FA5388](v18);
  uint64_t v24 = (char *)&v51 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x270FA5388](v22);
  uint64_t v59 = (char *)&v51 - v26;
  uint64_t v27 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](v25);
  uint64_t v29 = (char *)&v51 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (type metadata accessor for TreeSet() == a6)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v29, v60, a6);
    swift_dynamicCast();
    uint64_t v31 = TreeSet._subtracting<A>(_:)(v70, v71, v61, (uint64_t)AssociatedConformanceWitness, v62, a5, v66, a7);
    goto LABEL_5;
  }
  uint64_t v53 = a6;
  uint64_t v57 = a7;
  uint64_t v70 = v61;
  uint64_t v71 = AssociatedConformanceWitness;
  uint64_t v72 = v62;
  swift_getWitnessTable();
  sub_24A5BBBA0();
  uint64_t v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  if (v30(v20, 1, a5) == 1)
  {
    v64[1](v20, v65);
    uint64_t v31 = TreeSet.init()(a5, v57);
LABEL_5:
    uint64_t v32 = v31;
    swift_release();
    return v32;
  }
  uint64_t v52 = v30;
  uint64_t v34 = *(void (***)(char *, uint64_t))(v21 + 32);
  uint64_t v35 = v59;
  uint64_t v65 = v21 + 32;
  uint64_t v66 = v21 + 48;
  uint64_t v64 = v34;
  ((void (*)(char *, char *, uint64_t))v34)(v59, v20, a5);
  uint64_t v36 = v60;
  uint64_t v37 = v53;
  uint64_t v38 = v58;
  uint64_t v39 = sub_24A5BB870();
  if (v39 == 2)
  {
    uint64_t v51 = v21;
    uint64_t v70 = v61;
    uint64_t v71 = AssociatedConformanceWitness;
    (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v29, v36, v37);
    swift_retain();
    sub_24A5BB840();
    uint64_t v40 = AssociatedTypeWitness;
    uint64_t AssociatedConformanceWitness = (void (*)(uint64_t, unsigned char *, uint64_t))swift_getAssociatedConformanceWitness();
    sub_24A5BBEE0();
    uint64_t v41 = v52;
    unsigned int v42 = v52(v17, 1, a5);
    uint64_t v43 = (uint64_t)v56;
    uint64_t v44 = v57;
    if (v42 != 1)
    {
      uint64_t v45 = (void (**)(uint64_t, uint64_t))(v54 + 8);
      uint64_t v46 = (void (**)(char *, uint64_t))(v51 + 8);
      uint64_t v62 = MEMORY[0x263F8EE60] + 8;
      do
      {
        ((void (*)(char *, char *, uint64_t))v64)(v24, v17, a5);
        uint64_t v47 = sub_24A5B85E4();
        uint64_t v48 = (void *)type metadata accessor for _HashNode();
        uint64_t v49 = v47;
        uint64_t v40 = AssociatedTypeWitness;
        _HashNode.remove(_:_:_:)(0, (uint64_t)v24, v49, v48, v43);
        (*v45)(v43, v67);
        (*v46)(v24, a5);
        sub_24A5BBEE0();
      }
      while (v41(v17, 1, a5) != 1);
    }
    swift_release();
    (*(void (**)(char *, uint64_t))(v55 + 8))(v69, v40);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v59, a5);
    return TreeSet.init(_new:)(v70, (uint64_t)v71, a5, v44);
  }
  else
  {
    MEMORY[0x270FA5388](v39);
    *(&v51 - 6) = a5;
    *(&v51 - 5) = v37;
    uint64_t v50 = v57;
    *(&v51 - 4) = v57;
    *(&v51 - 3) = v38;
    *(&v51 - 2) = v36;
    uint64_t v32 = TreeSet.filter(_:)((uint64_t)sub_24A4C6298, (uint64_t)(&v51 - 8), v61, (uint64_t)AssociatedConformanceWitness, v62, a5, v50);
    swift_release();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v35, a5);
  }
  return v32;
}

BOOL sub_24A4C6298()
{
  return (sub_24A5BB920() & 1) == 0;
}

BOOL static BitArray.== infix(_:_:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return a2 == a4 && _s19CollectionsInternal6BitSetV2eeoiySbAC_ACtFZ_0(a1, a3);
}

BOOL _s19CollectionsInternal6BitSetV2eeoiySbAC_ACtFZ_0(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (a1[4] != a2[4]) {
    return 0;
  }
  char v3 = a1 + 5;
  uint64_t v4 = a2 + 5;
  uint64_t v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    uint64_t v8 = *v3++;
    uint64_t v7 = v8;
    uint64_t v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

BOOL sub_24A4C6358(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) == *(void *)(a2 + 8)
      && _s19CollectionsInternal6BitSetV2eeoiySbAC_ACtFZ_0(*(void **)a1, *(void **)a2);
}

uint64_t BitArray.description.getter(uint64_t result, uint64_t a2)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else if (a2)
  {
    MEMORY[0x270FA5388](result);
    return sub_24A5BB650();
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t sub_24A4C6410()
{
  uint64_t result = *(void *)(v0 + 8);
  if (result < 0)
  {
    __break(1u);
  }
  else if (result)
  {
    MEMORY[0x270FA5388](result);
    return sub_24A5BB650();
  }
  return result;
}

uint64_t BitArray.debugDescription.getter(uint64_t result, uint64_t a2)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    if (a2)
    {
      MEMORY[0x270FA5388](result);
      sub_24A5BB650();
    }
    sub_24A5BB6F0();
    swift_bridgeObjectRelease();
    sub_24A5BB6F0();
    return 0x7961727241746942;
  }
  return result;
}

uint64_t sub_24A4C6574()
{
  return BitArray.debugDescription.getter(*v0, v0[1]);
}

uint64_t sub_24A4C657C(uint64_t a1)
{
  return sub_24A4C6594(a1);
}

uint64_t sub_24A4C6594(uint64_t a1)
{
  uint64_t result = *(void *)(v1 + 24);
  if (result < 0)
  {
    __break(1u);
  }
  else if (result)
  {
    unint64_t v4 = 0;
    uint64_t v5 = *(void *)(v1 + 16) + 32;
    uint64_t v6 = a1 - 1;
    do
    {
      uint64_t v7 = *(void *)(v5 + ((v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v4;
      ++v4;
      if (v7) {
        char v8 = 49;
      }
      else {
        char v8 = 48;
      }
      *(unsigned char *)(v6 + result) = v8;
      --v6;
    }
    while (result != v4);
  }
  return result;
}

uint64_t TreeSet.isEqualSet(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return _HashNode.isEqualSet<A>(to:by:)(a1, a2, (uint64_t)sub_24A4C6644, 0, a4, a5, a7, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8EE60] + 8, a8) & 1;
}

uint64_t sub_24A4C6644()
{
  return 1;
}

uint64_t TreeSet.isEqualSet<A>(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = a7;
  uint64_t v12 = a8;
  uint64_t v13 = a9;
  return _HashNode.isEqualSet<A>(to:by:)(a1, a2, (uint64_t)sub_24A4C6644, (uint64_t)v10, a4, a5, a7, MEMORY[0x263F8EE60] + 8, a8, a9) & 1;
}

uint64_t TreeSet.isEqualSet<A>(to:)(unsigned int (*a1)(void, void, void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v93 = a1;
  uint64_t v89 = *(void *)(a5 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](a1);
  uint64_t v92 = (char *)v80 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint8x8_t v85 = (char *)v80 - v18;
  MEMORY[0x270FA5388](v17);
  uint64_t v88 = (void (*)(uint64_t, char *, uint64_t))((char *)v80 - v19);
  uint64_t v83 = sub_24A5BBD20();
  uint64_t v82 = *(void *)(v83 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v83);
  uint64_t v81 = (char *)v80 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v84 = (char *)v80 - v23;
  MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)v80 - v24;
  uint64_t v87 = a8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v86 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v26 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t AssociatedConformanceWitness = (char *)v80 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  uint64_t v90 = (uint64_t)v80 - v29;
  uint64_t v30 = *(void *)(a6 - 8);
  uint64_t v31 = MEMORY[0x270FA5388](v28);
  uint64_t v33 = (char *)v80 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v31);
  uint64_t v35 = (char *)v80 - v34;
  if (type metadata accessor for TreeSet() == a6)
  {
    (*(void (**)(char *, unsigned int (*)(void, void, void), uint64_t))(v30 + 16))(v35, v93, a6);
    swift_dynamicCast();
    char v40 = _HashNode.isEqualSet<A>(to:by:)(v98, v99, (uint64_t)sub_24A4C6644, 0, a2, a3, a5, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8EE60] + 8, a7);
    swift_release();
    return v40 & 1;
  }
  uint64_t v36 = a3;
  uint64_t v37 = a4;
  uint64_t v38 = v93;
  uint64_t v94 = a2;
  uint64_t v96 = v36;
  BOOL v39 = TreeSet.isEmpty.getter(a2, v36);
  if (v39)
  {
    MEMORY[0x270FA5388](v39);
    v80[-4] = a5;
    v80[-3] = a6;
    uint64_t v78 = a7;
    uint64_t v79 = v87;
    char v40 = sub_24A5BB890();
    return v40 & 1;
  }
  uint64_t v91 = a7;
  uint64_t v41 = *(void (**)(char *, unsigned int (*)(void, void, void), uint64_t))(v30 + 16);
  v41(v33, v38, a6);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26979B020);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v98);
    uint64_t v42 = sub_24A5BB860();
    uint64_t v43 = TreeSet.count.getter(v94, v96);
    if (v43 >= v42)
    {
      uint64_t v92 = (char *)v43;
      v41(v35, v38, a6);
      sub_24A5BB840();
      uint64_t AssociatedConformanceWitness = (char *)swift_getAssociatedConformanceWitness();
      sub_24A5BBEE0();
      uint64_t v44 = v89;
      uint64_t v93 = *(unsigned int (**)(void, void, void))(v89 + 48);
      if (v93(v25, 1, a5) == 1)
      {
        uint64_t v45 = 0;
LABEL_31:
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v86 + 8))(v90, AssociatedTypeWitness);
        if ((uint64_t)v92 >= (uint64_t)v45)
        {
          char v40 = v45 == v92;
          return v40 & 1;
        }
        __break(1u);
        goto LABEL_42;
      }
      uint64_t v45 = 0;
      uint64_t v73 = *(void (**)(uint64_t, char *, uint64_t))(v44 + 32);
      uint64_t v74 = (void (**)(uint64_t, uint64_t))(v44 + 8);
      uint64_t v75 = (uint64_t)v88;
      while (1)
      {
        v73(v75, v25, a5);
        BOOL v76 = TreeSet.contains(_:)(v75, v94, v96, v37, a5, v91);
        (*v74)(v75, a5);
        if (!v76) {
          break;
        }
        ++v45;
        sub_24A5BBEE0();
        if (v93(v25, 1, a5) == 1) {
          goto LABEL_31;
        }
      }
      (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v90, AssociatedTypeWitness);
    }
LABEL_36:
    char v40 = 0;
    return v40 & 1;
  }
  uint64_t v90 = v37;
  if (qword_26979ACF0 != -1) {
    swift_once();
  }
  uint64_t v46 = MEMORY[0x263F8EE60] + 8;
  uint64_t v47 = _HashNode.init(storage:count:)(_emptySingleton, 0, a5, MEMORY[0x263F8EE60] + 8, v91);
  uint64_t v98 = v47;
  uint64_t v99 = v48;
  v41(v35, v38, a6);
  swift_retain();
  sub_24A5BB840();
  uint64_t v49 = swift_getAssociatedConformanceWitness();
  uint64_t v50 = v84;
  uint64_t v93 = (unsigned int (*)(void, void, void))v49;
  sub_24A5BBEE0();
  uint64_t v51 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v89 + 48);
  uint64_t v52 = (void (**)(uint64_t, char *, uint64_t))(v89 + 32);
  uint64_t v53 = (void (**)(uint64_t, uint64_t))(v89 + 8);
  v89 += 48;
  int v54 = v51(v50, 1, a5);
  uint64_t v55 = (uint64_t)v85;
  if (v54 == 1)
  {
LABEL_12:
    (*(void (**)(char *, uint64_t))(v82 + 8))(v50, v83);
    if (!v98)
    {
LABEL_24:
      uint64_t v68 = v91;
      uint64_t v69 = (uint64_t)v92;
      uint64_t v70 = v94;
      uint64_t v71 = v81;
      while (1)
      {
        sub_24A5BBEE0();
        if (v51(v71, 1, a5) == 1) {
          break;
        }
        (*v52)(v69, v71, a5);
        BOOL v72 = TreeSet.contains(_:)(v69, v70, v96, v90, a5, v68);
        (*v53)(v69, a5);
        if (!v72) {
          goto LABEL_27;
        }
      }
      (*(void (**)(char *, uint64_t))(v86 + 8))(AssociatedConformanceWitness, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v82 + 8))(v71, v83);
      swift_release();
      char v40 = 1;
      return v40 & 1;
    }
LABEL_27:
    (*(void (**)(char *, uint64_t))(v86 + 8))(AssociatedConformanceWitness, AssociatedTypeWitness);
LABEL_35:
    swift_release();
    goto LABEL_36;
  }
  uint64_t v88 = *v52;
  v88((uint64_t)v85, v50, a5);
  uint64_t v56 = v91;
  uint64_t v57 = sub_24A5B85E4();
  uint64_t result = _HashNode.containsKey(_:_:_:)(0, v55, v57, v94, v96, a5, v46, v56);
  if ((result & 1) == 0)
  {
    uint64_t v61 = *v53;
    uint64_t v77 = v86;
LABEL_34:
    v61(v55, a5);
    (*(void (**)(char *, uint64_t))(v77 + 8))(AssociatedConformanceWitness, AssociatedTypeWitness);
    goto LABEL_35;
  }
  if (v47)
  {
    uint64_t v59 = MEMORY[0x263F8EE60];
    uint64_t v87 = (void *)type metadata accessor for _HashNode();
    uint64_t result = _HashNode.insert(_:_:_:)(0, v55, v60, v57, v87);
    if (!v98)
    {
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    uint64_t v61 = *v53;
    (*v53)(v55, a5);
    uint64_t v62 = v99;
    if (v62 == TreeSet.count.getter(v94, v96))
    {
LABEL_23:
      swift_release();
      uint64_t v98 = 0;
      uint64_t v99 = 0;
      goto LABEL_24;
    }
    v80[1] = (unint64_t)v53 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v63 = v59 + 8;
    while (1)
    {
      sub_24A5BBEE0();
      if (v51(v50, 1, a5) == 1) {
        goto LABEL_12;
      }
      v88(v55, v50, a5);
      uint64_t v64 = v91;
      uint64_t v65 = sub_24A5B85E4();
      if (!_HashNode.containsKey(_:_:_:)(0, v55, v65, v94, v96, a5, v63, v64))
      {
        uint64_t v77 = v86;
        goto LABEL_34;
      }
      uint64_t result = _HashNode.insert(_:_:_:)(0, v55, v66, v65, v87);
      if (!v98) {
        goto LABEL_42;
      }
      v61(v55, a5);
      uint64_t v67 = v99;
      if (v67 == TreeSet.count.getter(v94, v96)) {
        goto LABEL_23;
      }
    }
  }
LABEL_43:
  __break(1u);
  return result;
}

uint64_t sub_24A4C71C8()
{
  return 0;
}

uint64_t static _HashSlot.zero.getter()
{
  return 0;
}

uint64_t _HashSlot.value.getter(uint64_t result)
{
  return result;
}

BOOL static _HashSlot.== infix(_:_:)(int a1, int a2)
{
  return a1 == a2;
}

uint64_t _HashSlot._value.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*_HashSlot._value.modify())()
{
  return nullsub_1;
}

BOOL sub_24A4C7220(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

BOOL static _HashSlot.< infix(_:_:)(unsigned int a1, unsigned int a2)
{
  return a1 < a2;
}

BOOL sub_24A4C7240(_DWORD *a1, _DWORD *a2)
{
  return *a1 < *a2;
}

BOOL sub_24A4C7254(_DWORD *a1, _DWORD *a2)
{
  return *a2 >= *a1;
}

BOOL sub_24A4C7268(_DWORD *a1, _DWORD *a2)
{
  return *a1 >= *a2;
}

BOOL sub_24A4C727C(_DWORD *a1, _DWORD *a2)
{
  return *a2 < *a1;
}

uint64_t _HashSlot.hash(into:)()
{
  return sub_24A5BC660();
}

uint64_t _HashSlot.hashValue.getter()
{
  return sub_24A5BC690();
}

uint64_t sub_24A4C7300()
{
  return sub_24A5BC690();
}

uint64_t sub_24A4C7348()
{
  return sub_24A5BC660();
}

uint64_t sub_24A4C7374()
{
  return sub_24A5BC690();
}

uint64_t _HashSlot.description.getter()
{
  return sub_24A5BC430();
}

uint64_t sub_24A4C73F8()
{
  return sub_24A5BC430();
}

uint64_t _HashSlot.advanced(by:)(int a1, int a2)
{
  return (a1 + a2);
}

uint64_t _HashSlot.distance(to:)(unsigned int a1, unsigned int a2)
{
  if (a2 >= a1) {
    return -(uint64_t)(a2 - a1);
  }
  else {
    return a1 - a2;
  }
}

_DWORD *sub_24A4C7454@<X0>(_DWORD *result@<X0>, uint64_t *a2@<X8>)
{
  int v3 = *v2;
  if (*v2 >= *result) {
    uint64_t v4 = -(uint64_t)(v3 - *result);
  }
  else {
    uint64_t v4 = (*result - v3);
  }
  *a2 = v4;
  return result;
}

_DWORD *sub_24A4C7470@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *v2 + *result;
  return result;
}

uint64_t sub_24A4C7484(_DWORD *a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, _DWORD *a6)
{
  *a1 = *a4 + *a6;
  return 0;
}

uint64_t _HashSlot.next()(int a1)
{
  return (a1 + 1);
}

uint64_t _HashSlot.previous()(int a1)
{
  return (a1 - 1);
}

unint64_t sub_24A4C74B4()
{
  unint64_t result = qword_26979B160;
  if (!qword_26979B160)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979B160);
  }
  return result;
}

unint64_t sub_24A4C750C()
{
  unint64_t result = qword_26979B168;
  if (!qword_26979B168)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979B168);
  }
  return result;
}

uint64_t sub_24A4C7560()
{
  return MEMORY[0x263F8D6E0];
}

uint64_t sub_24A4C756C()
{
  return MEMORY[0x263F8D720];
}

ValueMetadata *type metadata accessor for _HashSlot()
{
  return &type metadata for _HashSlot;
}

uint64_t _UnsafeBitSet.Index.init(_:)(uint64_t result)
{
  if (result < 0) {
    __break(1u);
  }
  return result;
}

unint64_t _UnsafeBitSet.Index.endSplit.getter(unint64_t a1)
{
  return (a1 >> 6) - ((a1 > 0x3F) & ((a1 & 0x3F) == 0));
}

uint64_t _UnsafeBitSet.Index.bit.getter(char a1)
{
  return a1 & 0x3F;
}

uint64_t _UnsafeBitSet.Index.value.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*_UnsafeBitSet.Index.value.modify())()
{
  return nullsub_1;
}

uint64_t _UnsafeBitSet.Index.init(word:bit:)(uint64_t result, uint64_t a2)
{
  if (((result << 6) & 0x8000000000000000) == 0) {
    return (result << 6) + a2;
  }
  __break(1u);
  return result;
}

uint64_t _UnsafeBitSet.Index.hashValue.getter()
{
  return sub_24A5BC690();
}

BOOL sub_24A4C7654(void *a1, void *a2)
{
  return *a1 < *a2;
}

BOOL static _UnsafeBitSet.Index.< infix(_:_:)(unint64_t a1, unint64_t a2)
{
  return a1 < a2;
}

BOOL sub_24A4C7674(void *a1, void *a2)
{
  return *a2 >= *a1;
}

BOOL sub_24A4C7688(void *a1, void *a2)
{
  return *a1 >= *a2;
}

BOOL sub_24A4C769C(void *a1, void *a2)
{
  return *a2 < *a1;
}

uint64_t sub_24A4C76B0()
{
  return sub_24A5BC690();
}

uint64_t sub_24A4C76F8()
{
  return sub_24A5BC630();
}

uint64_t _UnsafeBitSet.Index.hash(into:)()
{
  return sub_24A5BC630();
}

uint64_t sub_24A4C774C()
{
  return sub_24A5BC690();
}

BOOL static _UnsafeBitSet.Index.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

unint64_t _UnsafeBitSet.Index.word.getter(unint64_t a1)
{
  return a1 >> 6;
}

unint64_t _UnsafeBitSet.Index.split.getter(unint64_t a1)
{
  return a1 >> 6;
}

uint64_t _UnsafeBitSet.Index._successor()(uint64_t a1)
{
  BOOL v1 = __CFADD__(a1, 1);
  uint64_t result = a1 + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

uint64_t _UnsafeBitSet.Index._predecessor()(uint64_t a1)
{
  BOOL v1 = a1 != 0;
  uint64_t result = a1 - 1;
  if (!v1) {
    __break(1u);
  }
  return result;
}

unint64_t sub_24A4C77D8()
{
  unint64_t result = qword_26979B170;
  if (!qword_26979B170)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979B170);
  }
  return result;
}

ValueMetadata *type metadata accessor for _UnsafeBitSet.Index()
{
  return &type metadata for _UnsafeBitSet.Index;
}

uint64_t RopeElement.rebalance(prevNeighbor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4 = (*(uint64_t (**)(uint64_t))(a3 + 72))(v3);
  if (v4) {
    sub_24A5BC5A0();
  }
  return v4 & 1;
}

unint64_t sub_24A4C78A0(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = *(void *)(v6 + 32);
  if (*(void *)v6) {
    BOOL v8 = 2 * (v7 & 0x1FFFFFFFFFFFFFuLL) > a1 >> 10;
  }
  else {
    BOOL v8 = 0;
  }
  if (!v8) {
    return 0;
  }
  uint64_t v9 = v6;
  uint64_t v12 = *(void *)(v6 + 24);
  uint64_t v13 = *(void *)(v6 + 40);
  _OWORD v25[3] = *(void *)v6;
  long long v26 = *(_OWORD *)(v6 + 8);
  uint64_t v27 = v12;
  uint64_t v28 = v7;
  uint64_t v29 = v13;
  unint64_t result = sub_24A496820(a1, a2, a3, a4, 0);
  if (v17 == 1) {
    goto LABEL_12;
  }
  uint64_t v18 = v15;
  v25[0] = v15;
  v25[1] = v16;
  v25[2] = v17;
  unint64_t v24 = (16 * (int)result) & 0x4000 | ((unint64_t)result << 16) | (result >> 8) & 3 | 4;
  unint64_t result = MEMORY[0x270FA5388](result);
  void v20[2] = &v24;
  v20[3] = a5;
  v20[4] = a6;
  uint64_t v22 = 0;
  char v23 = 1;
  if (v19 != *(void *)(v9 + 40))
  {
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  if (!*(void *)v9) {
    return 0;
  }
  sub_24A48E828(&v21, (uint64_t)v25, (long long *)v9, (uint64_t)&v22, (void (*)(void *__return_ptr))sub_24A4C915C, (uint64_t)v20);
  unint64_t result = v18 + 1;
  *(void *)(v9 + 40) = v18 + 1;
  if (v23) {
    return 0;
  }
  return result;
}

uint64_t sub_24A4C7A08(uint64_t a1)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *((void *)v1 + 5);
  if (*(void *)v1) {
    uint64_t v2 = *(unsigned __int8 *)(v2 + 18);
  }
  v10[0] = *((void *)v1 + 5);
  v10[1] = v2;
  _OWORD v10[2] = 0;
  uint64_t result = MEMORY[0x270FA5388](a1);
  uint64_t v6[2] = result;
  _OWORD v6[3] = v5;
  uint64_t v8 = 0;
  char v9 = 1;
  if (v3 == *((void *)v1 + 5))
  {
    if (!*(void *)v1) {
      return 0;
    }
    sub_24A48E828(&v7, (uint64_t)v10, v1, (uint64_t)&v8, (void (*)(void *__return_ptr))sub_24A48ECA4, (uint64_t)v6);
    uint64_t result = v3 + 1;
    *((void *)v1 + 5) = v3 + 1;
    if (v9) {
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_24A4C7AF4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(qword_26979AC60);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v185 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v194 = a1;
  uint64_t v201 = a2;
  uint64_t result = sub_24A4C7A08(a1);
  v200.i64[0] = result;
  unint64_t v195 = v12;
  if (v10 != 1)
  {
    uint64_t v13 = v10;
    unint64_t v14 = v11;
    uint64_t v15 = *v3;
    if (!*v3) {
      goto LABEL_54;
    }
    uint64_t v16 = v3[1];
    uint64_t v17 = v3[2];
    uint64_t v18 = v3[3];
    uint64_t v19 = v3[4];
    uint64_t v206 = *v3;
    uint64_t v207 = v16;
    uint64_t v208 = v17;
    uint64_t v209 = v18;
    uint64_t v210 = v19;
    if (v16 < 1)
    {
LABEL_54:
      uint64_t v54 = sub_24A5BC780();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v54 - 8) + 8))(v194, v54);
      goto LABEL_55;
    }
    unint64_t v197 = v11;
    uint64_t v192 = v10;
    uint64_t v20 = v3[5];
    uint64_t v232 = v15;
    uint64_t v233 = v16;
    uint64_t v234 = v17;
    uint64_t v235 = v18;
    uint64_t v236 = v19;
    uint64_t v237 = v20;
    swift_unknownObjectRetain();
    unint64_t v21 = sub_24A498214();
    swift_unknownObjectRelease();
    *(void *)&long long v211 = v20;
    *((void *)&v211 + 1) = v21;
    *(void *)&long long v212 = 0;
    uint64_t v196 = v3;
    uint64_t v193 = v8;
    if (v195 >= v21) {
      goto LABEL_101;
    }
    uint64_t v22 = 0;
    uint64_t v198 = (uint64_t *)&v211 + 1;
    v199.i64[0] = v15 + 24;
    uint64_t v23 = v20;
    unint64_t v24 = v195;
    while (1)
    {
      unint64_t v29 = *(unsigned __int8 *)(v15 + 18);
      swift_unknownObjectRetain();
      if (v21 <= v29)
      {
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
LABEL_154:
        __break(1u);
LABEL_155:
        __break(1u);
        goto LABEL_156;
      }
      if (v22)
      {
        char v30 = (4 * *((unsigned char *)v22 + 18) + 8) & 0x3C;
        if (((v21 >> v30) & 0xF) != 0) {
          break;
        }
      }
      char v31 = (4 * *(unsigned char *)(v15 + 18) + 8) & 0x3C;
      unint64_t v32 = (v21 >> v31) & 0xF;
      if (*(unsigned char *)(v15 + 18))
      {
        if (v32 >= *(unsigned __int16 *)(v15 + 16))
        {
          swift_unknownObjectRetain();
          if (!v32) {
            goto LABEL_162;
          }
          goto LABEL_38;
        }
        uint64_t v33 = *(void *)(v199.i64[0] + 40 * ((v21 >> v31) & 0xF));
        char v34 = (4 * *(unsigned char *)(v33 + 18) + 8) & 0x3C;
        unint64_t v35 = (v21 >> v34) & 0xF;
        if (!*(unsigned char *)(v33 + 18))
        {
          if (v35)
          {
            *((void *)&v211 + 1) = ((v35 - 1) << v34) | ((-15 << v34) - 1) & v21;
            *(void *)&long long v212 = v33;
            swift_unknownObjectRetain();
            uint64_t v22 = (uint64_t *)v33;
            goto LABEL_39;
          }
          swift_unknownObjectRetain();
          goto LABEL_37;
        }
        uint64_t v36 = v33 + 24;
        if (v35 >= *(unsigned __int16 *)(v33 + 16))
        {
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
          goto LABEL_33;
        }
        uint64_t v191 = v33 + 24;
        uint64_t v22 = *(uint64_t **)(v36 + 40 * ((v21 >> v34) & 0xF));
        uint64_t v37 = (4 * *((unsigned char *)v22 + 18) + 8) & 0x3C;
        unint64_t v38 = (v21 >> v37) & 0xF;
        if (!*((unsigned char *)v22 + 18))
        {
          if (v38)
          {
            *((void *)&v211 + 1) = ((v38 - 1) << v37) | ((-15 << v37) - 1) & v21;
            *(void *)&long long v212 = v22;
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            goto LABEL_52;
          }
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
          uint64_t v36 = v191;
          goto LABEL_33;
        }
        BOOL v39 = v22 + 3;
        if (v38 < *((unsigned __int16 *)v22 + 8))
        {
          uint64_t v188 = v22;
          uint64_t v22 = (uint64_t *)v39[5 * ((v21 >> v37) & 0xF)];
          int v40 = *((unsigned __int8 *)v22 + 18);
          char v41 = (4 * v40 + 8) & 0x3C;
          uint64_t v42 = (v21 >> v41) & 0xF;
          *(void *)&v217[0] = v42;
          if (v40)
          {
            uint64_t v189 = v39;
            uint64_t v190 = v37;
            uint64_t v43 = (v21 >> v37) & 0xF;
            uint64_t v186 = v22 + 3;
            uint64_t v187 = (unsigned __int16 *)(v22 + 2);
            HIDWORD(v185) = v40;
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            LODWORD(v187) = sub_24A5B49C4(v187, (uint64_t)v186, (uint64_t *)v217, (uint64_t)&v211, SBYTE4(v185));
            swift_unknownObjectRelease();
            if (v187)
            {
              uint64_t v22 = (uint64_t *)v212;
              goto LABEL_48;
            }
LABEL_50:
            if (v43)
            {
              *((void *)&v211 + 1) = *((void *)&v211 + 1) & ((-15 << v190) - 1) | ((v43 - 1) << v190);
              uint64_t v51 = &v189[5 * (int)v43 - 5];
              uint64_t v52 = v51[4];
              long long v53 = *((_OWORD *)v51 + 1);
              v230[0] = *(_OWORD *)v51;
              v230[1] = v53;
              uint64_t v231 = v52;
              swift_unknownObjectRetain();
              uint64_t v22 = sub_24A5B48F8(v198);
              sub_24A496BE8((uint64_t)v230);
              *(void *)&long long v212 = v22;
              swift_unknownObjectRelease();
              goto LABEL_52;
            }
            swift_unknownObjectRelease();
            uint64_t v36 = v191;
LABEL_33:
            if (v35)
            {
              *((void *)&v211 + 1) = *((void *)&v211 + 1) & ((-15 << v34) - 1) | ((v35 - 1) << v34);
              uint64_t v44 = v36 + 40 * ((int)v35 - 1);
              uint64_t v45 = *(void *)(v44 + 32);
              long long v46 = *(_OWORD *)(v44 + 16);
              v228[0] = *(_OWORD *)v44;
              v228[1] = v46;
              uint64_t v229 = v45;
              swift_unknownObjectRetain();
              uint64_t v22 = sub_24A5B48F8(v198);
              sub_24A496BE8((uint64_t)v228);
              *(void *)&long long v212 = v22;
              swift_unknownObjectRelease();
              goto LABEL_39;
            }
            swift_unknownObjectRelease();
LABEL_37:
            if (!v32) {
              goto LABEL_162;
            }
LABEL_38:
            *((void *)&v211 + 1) = *((void *)&v211 + 1) & ((-15 << v31) - 1) | ((v32 - 1) << v31);
            uint64_t v47 = v199.i64[0] + 40 * ((int)v32 - 1);
            uint64_t v48 = *(void *)(v47 + 32);
            long long v49 = *(_OWORD *)(v47 + 16);
            v226[0] = *(_OWORD *)v47;
            v226[1] = v49;
            uint64_t v227 = v48;
            swift_unknownObjectRetain();
            uint64_t v22 = sub_24A5B48F8(v198);
            sub_24A496BE8((uint64_t)v226);
            *(void *)&long long v212 = v22;
LABEL_39:
            unint64_t v24 = v195;
LABEL_40:
            swift_unknownObjectRelease_n();
            unint64_t v21 = *((void *)&v211 + 1);
            uint64_t v23 = v211;
            if ((void)v211 != v20) {
              goto LABEL_152;
            }
LABEL_41:
            if (v22) {
              goto LABEL_42;
            }
            goto LABEL_6;
          }
          if (v42)
          {
            *((void *)&v211 + 1) = ((v42 - 1) << v41) | ((-15 << v41) - 1) & v21;
            *(void *)&long long v212 = v22;
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
LABEL_48:
            swift_unknownObjectRelease();
LABEL_52:
            unint64_t v24 = v195;
            swift_unknownObjectRelease();
            goto LABEL_40;
          }
        }
        uint64_t v189 = v39;
        uint64_t v190 = v37;
        uint64_t v43 = (v21 >> v37) & 0xF;
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        goto LABEL_50;
      }
      if (!v32) {
        goto LABEL_163;
      }
      unint64_t v21 = ((v32 - 1) << v31) | ((-15 << v31) - 1) & v21;
      *((void *)&v211 + 1) = v21;
      swift_unknownObjectRelease();
      *(void *)&long long v212 = v15;
      uint64_t v22 = (uint64_t *)v15;
      unint64_t v24 = v195;
      if (v15)
      {
LABEL_42:
        uint64_t v50 = &v22[3 * ((v21 >> ((4 * *((unsigned char *)v22 + 18) + 8) & 0x3C)) & 0xF)];
        unsigned int v25 = *((unsigned __int8 *)v50 + 40);
        unsigned int v26 = *((unsigned __int8 *)v50 + 44);
        goto LABEL_7;
      }
LABEL_6:
      swift_unknownObjectRetain();
      sub_24A4895D4(v21, (uint64_t)v217);
      swift_unknownObjectRelease();
      unsigned int v25 = LOBYTE(v217[1]);
      unsigned int v26 = BYTE4(v217[1]);
      swift_bridgeObjectRelease();
LABEL_7:
      if (v26 < v25 || v24 >= v21)
      {
        if (v24 < v21) {
          goto LABEL_103;
        }
        if (v22)
        {
          uint64_t v109 = &v22[3 * ((v21 >> ((4 * *((unsigned char *)v22 + 18) + 8) & 0x3C)) & 0xF)];
          uint64_t v111 = v109[3];
          unint64_t v110 = v109[4];
          unsigned int v112 = *((unsigned __int8 *)v109 + 40);
          v27.i32[0] = *(_DWORD *)((char *)v109 + 41);
          uint16x8_t v199 = vmovl_u8(v27);
          uint64_t v113 = *((unsigned __int8 *)v109 + 45);
          swift_bridgeObjectRetain();
          v114.i64[0] = v199.i64[0];
          goto LABEL_102;
        }
LABEL_101:
        swift_unknownObjectRetain();
        sub_24A4895D4(v21, (uint64_t)v217);
        swift_unknownObjectRelease();
        uint64_t v22 = 0;
        unint64_t v110 = *((void *)&v217[0] + 1);
        uint64_t v111 = *(void *)&v217[0];
        unsigned int v112 = LOBYTE(v217[1]);
        v115.i32[0] = *(_DWORD *)((char *)&v217[1] + 1);
        uint16x8_t v114 = vmovl_u8(v115);
        uint64_t v113 = BYTE5(v217[1]);
LABEL_102:
        uint32x4_t v116 = vmovl_u16((uint16x4_t)(v114.i64[0] & 0xFF00FF00FF00FFLL));
        v117.i64[0] = v116.u32[0];
        v117.i64[1] = v116.u32[1];
        uint64x2_t v118 = v117;
        v117.i64[0] = v116.u32[2];
        v117.i64[1] = v116.u32[3];
        int8x16_t v119 = vorrq_s8((int8x16_t)vshlq_u64(v118, (uint64x2_t)xmmword_24A5BD070), (int8x16_t)vshlq_u64(v117, (uint64x2_t)xmmword_24A5BD060));
        unint64_t v120 = sub_24A48F3EC(v111, v110, *(void *)&vorr_s8(*(int8x8_t *)v119.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v119, v119, 8uLL)) | (v113 << 40) | v112);
        swift_bridgeObjectRelease();
        if (v197 >> 14 < v120 >> 14)
        {
LABEL_103:
          if (v22)
          {
            uint64_t v121 = &v22[3 * ((v21 >> ((4 * *((unsigned char *)v22 + 18) + 8) & 0x3C)) & 0xF)];
            uint64_t v123 = v121[3];
            unint64_t v122 = v121[4];
            unsigned int v124 = *((unsigned __int8 *)v121 + 40);
            v27.i32[0] = *(_DWORD *)((char *)v121 + 41);
            uint16x8_t v200 = vmovl_u8(v27);
            uint64_t v125 = *((unsigned __int8 *)v121 + 45);
            swift_bridgeObjectRetain();
            v126.i64[0] = v200.i64[0];
          }
          else
          {
            swift_unknownObjectRetain();
            sub_24A4895D4(v21, (uint64_t)v217);
            swift_unknownObjectRelease();
            unint64_t v122 = *((void *)&v217[0] + 1);
            uint64_t v123 = *(void *)&v217[0];
            unsigned int v124 = LOBYTE(v217[1]);
            v128.i32[0] = *(_DWORD *)((char *)&v217[1] + 1);
            uint16x8_t v126 = vmovl_u8(v128);
            uint64_t v125 = BYTE5(v217[1]);
          }
          uint64_t v129 = v193;
          if (v124 <= v126.u8[6])
          {
            uint64_t v142 = sub_24A5BC780();
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v142 - 8) + 56))(v129, 1, 1, v142);
          }
          else
          {
            uint32x4_t v130 = vmovl_u16((uint16x4_t)(v126.i64[0] & 0xFF00FF00FF00FFLL));
            v131.i64[0] = v130.u32[0];
            v131.i64[1] = v130.u32[1];
            uint64x2_t v132 = v131;
            v131.i64[0] = v130.u32[2];
            v131.i64[1] = v130.u32[3];
            int8x16_t v133 = vorrq_s8((int8x16_t)vshlq_u64(v132, (uint64x2_t)xmmword_24A5BD070), (int8x16_t)vshlq_u64(v131, (uint64x2_t)xmmword_24A5BD060));
            unint64_t v134 = sub_24A48F3EC(v123, v122, *(void *)&vorr_s8(*(int8x8_t *)v133.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v133, v133, 8uLL)) | (v125 << 40) | v124);
            swift_bridgeObjectRetain();
            unint64_t v135 = sub_24A494C00(v134, v123, v122);
            unint64_t v137 = v136;
            unint64_t v139 = v138;
            unint64_t v141 = v140;
            swift_bridgeObjectRelease();
            sub_24A48F534(v135, v137, v139, v141);
            uint64_t v142 = sub_24A5BC780();
            (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v142 - 8) + 56))(v129, 0, 1, v142);
          }
          swift_bridgeObjectRelease();
          sub_24A5BC780();
          uint64_t v143 = *(void *)(v142 - 8);
          uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v143 + 48))(v129, 1, v142);
          if (result == 1) {
            goto LABEL_164;
          }
          uint64_t v144 = *(void (**)(uint64_t, uint64_t))(v143 + 8);
          uint64_t v145 = v201;
          v144(v201, v142);
          v144(v194, v142);
          uint64_t v192 = v143;
          uint64_t v193 = (char *)v142;
          (*(void (**)(uint64_t, char *, uint64_t))(v143 + 32))(v145, v129, v142);
          long long v146 = v196[1];
          v217[0] = *v196;
          v217[1] = v146;
          v217[2] = v196[2];
          v200.i64[0] = *((void *)&v217[2] + 1);
          if ((void)v211 == *((void *)&v217[2] + 1))
          {
            uint64_t v147 = *(void *)&v217[0];
            uint64_t v198 = *(uint64_t **)&v217[1];
            v199.i64[0] = *((void *)&v217[0] + 1);
            uint64_t v196 = *(_OWORD **)&v217[2];
            unint64_t v197 = *((void *)&v217[1] + 1);
            unint64_t v148 = *((void *)&v211 + 1);
            swift_unknownObjectRetain_n();
            unint64_t v149 = sub_24A498214();
            sub_24A496BE8((uint64_t)v217);
            if (v148 < v149)
            {
              if ((void)v212)
              {
                char v150 = (4 * *(unsigned char *)(v212 + 18) + 8) & 0x3C;
                unint64_t v151 = ((v148 >> v150) & 0xF) + 1;
                if (v151 < *(unsigned __int16 *)(v212 + 16))
                {
                  *((void *)&v211 + 1) = (v151 << v150) | ((-15 << v150) - 1) & v148;
                  goto LABEL_117;
                }
              }
              uint64_t v223 = v147;
              *(void *)&long long v224 = v199.i64[0];
              *((void *)&v224 + 1) = v198;
              *(void *)&long long v225 = v197;
              *((void *)&v225 + 1) = v196;
              swift_unknownObjectRetain();
              char v152 = sub_24A498278((uint64_t)&v211);
              sub_24A496BE8((uint64_t)v217);
              if (v152)
              {
LABEL_117:
                sub_24A496BE8((uint64_t)v217);
                if (!v147) {
                  return (*(uint64_t (**)(uint64_t, uint64_t, char *))(v192 + 16))(v194, v201, v193);
                }
              }
              else
              {
                unint64_t v153 = sub_24A498214();
                sub_24A496BE8((uint64_t)v217);
                *(void *)&long long v211 = v200.i64[0];
                *((void *)&v211 + 1) = v153;
                *(void *)&long long v212 = 0;
                if (!v147) {
                  return (*(uint64_t (**)(uint64_t, uint64_t, char *))(v192 + 16))(v194, v201, v193);
                }
              }
              unint64_t v195 = v147 + 24;
              unint64_t v154 = *((void *)&v211 + 1);
              while (1)
              {
                uint64_t v218 = v147;
                unint64_t v219 = v199.i64[0];
                uint64_t v220 = v198;
                unint64_t v221 = v197;
                char v222 = v196;
                int v155 = *(unsigned __int8 *)(v147 + 18);
                uint64_t v156 = *(unsigned __int16 *)(v147 + 16);
                swift_unknownObjectRetain_n();
                sub_24A496BE8((uint64_t)v217);
                sub_24A496BE8((uint64_t)v217);
                if (v154 >= (((-15 << ((4 * v155 + 8) & 0x3C)) - 1) & v155 | (unint64_t)(v156 << ((4 * v155 + 8) & 0x3C)))) {
                  return (*(uint64_t (**)(uint64_t, uint64_t, char *))(v192 + 16))(v194, v201, v193);
                }
                if ((void)v211 != v200.i64[0]) {
                  goto LABEL_153;
                }
                uint64_t v157 = v212;
                if ((void)v212)
                {
                  swift_bridgeObjectRetain();
                }
                else
                {
                  swift_unknownObjectRetain();
                  sub_24A4895D4(v154, (uint64_t)&v203);
                  sub_24A496BE8((uint64_t)v217);
                }
                uint64_t v158 = sub_24A5BB830();
                uint64_t v160 = v159;
                uint64_t v162 = v161;
                uint64_t v164 = v163;
                swift_bridgeObjectRelease();
                sub_24A58AE34(v158, v160, v162, v164);
                swift_bridgeObjectRelease();
                int v165 = *(unsigned __int8 *)(v147 + 18);
                uint64_t v166 = *(unsigned __int16 *)(v147 + 16);
                swift_unknownObjectRetain_n();
                sub_24A496BE8((uint64_t)v217);
                sub_24A496BE8((uint64_t)v217);
                if (v154 >= (((-15 << ((4 * v165 + 8) & 0x3C)) - 1) & v165 | (unint64_t)(v166 << ((4 * v165 + 8) & 0x3C)))) {
                  goto LABEL_154;
                }
                if (v157)
                {
                  char v167 = (4 * *(unsigned char *)(v157 + 18) + 8) & 0x3C;
                  unint64_t v168 = ((v154 >> v167) & 0xF) + 1;
                  if (v168 < *(unsigned __int16 *)(v157 + 16))
                  {
                    unint64_t v154 = (v168 << v167) | ((-15 << v167) - 1) & v154;
                    *((void *)&v211 + 1) = v154;
                    goto LABEL_122;
                  }
                }
                char v169 = (4 * *(unsigned char *)(v147 + 18) + 8) & 0x3C;
                uint64_t v170 = (v154 >> v169) & 0xF;
                if (*(unsigned char *)(v147 + 18))
                {
                  uint64_t v171 = *(void *)(v195 + 40 * ((v154 >> v169) & 0xF));
                  int v172 = *(unsigned __int8 *)(v171 + 18);
                  char v173 = (4 * v172 + 8) & 0x3C;
                  unint64_t v203 = (v154 >> v173) & 0xF;
                  if (v172)
                  {
                    sub_24A497498((uint64_t)v217);
                    swift_unknownObjectRetain();
                    char v174 = sub_24A538E54(v171 + 24, (uint64_t *)&v203, (uint64_t)&v211, v171, v172);
                    swift_unknownObjectRelease();
                    if (v174)
                    {
                      unint64_t v154 = *((void *)&v211 + 1);
                      goto LABEL_144;
                    }
                  }
                  else
                  {
                    unint64_t v175 = ((v154 >> v173) & 0xF) + 1;
                    if (v175 < *(unsigned __int16 *)(v171 + 16))
                    {
                      unint64_t v154 = (v175 << v173) | ((-15 << v173) - 1) & v154;
                      *((void *)&v211 + 1) = v154;
                      *(void *)&long long v212 = v171;
                      swift_unknownObjectRetain();
                      goto LABEL_144;
                    }
                    swift_unknownObjectRetain();
                  }
                  uint64_t v177 = v170 + 1;
                  if (v170 + 1 < (unint64_t)*(unsigned __int16 *)(v147 + 16))
                  {
                    unint64_t v178 = v195 + 40 * v177;
                    long long v180 = *(_OWORD *)v178;
                    long long v179 = *(_OWORD *)(v178 + 16);
                    uint64_t v216 = *(_OWORD **)(v178 + 32);
                    long long v214 = v180;
                    long long v215 = v179;
                    unsigned int v181 = *(unsigned __int8 *)(v180 + 18) + 1;
                    if ((v181 >> 8)) {
                      goto LABEL_159;
                    }
                    *((void *)&v211 + 1) = ((-256 << (4 * (v181 & 0xF))) | 0xFF) & (*((void *)&v211 + 1) & ((-15 << v169) - 1) | (v177 << v169));
                    unint64_t v154 = *((void *)&v211 + 1);
                    swift_unknownObjectRetain();
                    uint64_t v182 = sub_24A53852C(v154);
                    sub_24A496BE8((uint64_t)&v214);
                    *(void *)&long long v212 = v182;
LABEL_144:
                    sub_24A496BE8((uint64_t)v217);
LABEL_122:
                    sub_24A496BE8((uint64_t)v217);
                    continue;
                  }
                  sub_24A496BE8((uint64_t)v217);
                  int v176 = *(unsigned __int8 *)(v147 + 18);
                }
                else
                {
                  if (v170 + 1 < (unint64_t)*(unsigned __int16 *)(v147 + 16))
                  {
                    unint64_t v154 = ((v170 + 1) << v169) | ((-15 << v169) - 1) & v154;
                    *((void *)&v211 + 1) = v154;
                    sub_24A496BE8((uint64_t)v217);
                    *(void *)&long long v212 = v147;
                    continue;
                  }
                  int v176 = 0;
                }
                uint64_t v183 = *(unsigned __int16 *)(v147 + 16);
                char v184 = *(unsigned char *)(v147 + 18);
                swift_unknownObjectRetain();
                sub_24A496BE8((uint64_t)v217);
                sub_24A496BE8((uint64_t)v217);
                unint64_t v154 = ((-15 << ((4 * v184 + 8) & 0x3C)) - 1) & v176 | (unint64_t)(v183 << ((4 * v184 + 8) & 0x3C));
                *(void *)&long long v211 = v200.i64[0];
                *((void *)&v211 + 1) = v154;
                *(void *)&long long v212 = 0;
              }
            }
LABEL_161:
            __break(1u);
LABEL_162:
            swift_unknownObjectRelease();
LABEL_163:
            uint64_t result = swift_unknownObjectRelease();
            __break(1u);
LABEL_164:
            __break(1u);
            return result;
          }
LABEL_160:
          __break(1u);
          goto LABEL_161;
        }
        uint64_t v127 = sub_24A5BC780();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v127 - 8) + 8))(v194, v127);
        uint64_t v3 = v196;
        unint64_t v14 = v197;
        uint64_t v13 = v192;
LABEL_55:
        unint64_t v55 = v195;
        unint64_t v203 = v200.i64[0];
        uint64_t v204 = v195;
        uint64_t v205 = v13;
        long long v56 = *((_OWORD *)v3 + 2);
        v217[1] = *((_OWORD *)v3 + 1);
        v217[2] = v56;
        v217[0] = *(_OWORD *)v3;
        if (v200.i64[0] == *((void *)&v56 + 1))
        {
          if (v13)
          {
            unint64_t v57 = v13 + 24 * ((v195 >> ((4 * *(unsigned char *)(v13 + 18) + 8) & 0x3C)) & 0xF);
            uint64_t v58 = *(void *)(v57 + 24);
            unint64_t v59 = *(void *)(v57 + 32);
            swift_bridgeObjectRetain();
          }
          else
          {
            uint64_t v223 = *(void *)&v217[0];
            long long v224 = *(_OWORD *)((char *)v217 + 8);
            long long v225 = *(_OWORD *)((char *)&v217[1] + 8);
            swift_unknownObjectRetain();
            sub_24A4895D4(v55, (uint64_t)&v218);
            sub_24A496BE8((uint64_t)v217);
            uint64_t v58 = v218;
            unint64_t v59 = v219;
          }
          sub_24A4B21C0(v14, v58, v59);
          unint64_t v61 = v60;
          swift_bridgeObjectRelease();
          unint64_t v62 = sub_24A5BBDF0();
          if (v63) {
            unint64_t v62 = v61;
          }
          if (v61 >> 14 >= v62 >> 14)
          {
            uint64_t v64 = sub_24A5BBE10();
            uint64_t v66 = v65;
            uint64_t v68 = v67;
            uint64_t v70 = v69;
            swift_bridgeObjectRelease();
            uint64_t v193 = v70;
            sub_24A58AE34(v64, v66, v68, v70);
            uint64_t v71 = *(void *)&v217[0];
            uint64_t v198 = *(uint64_t **)&v217[1];
            v199.i64[0] = *((void *)&v217[0] + 1);
            uint64_t v196 = *(_OWORD **)&v217[2];
            unint64_t v197 = *((void *)&v217[1] + 1);
            swift_unknownObjectRetain_n();
            unint64_t v72 = sub_24A498214();
            sub_24A496BE8((uint64_t)v217);
            if (v55 < v72)
            {
              if (v13)
              {
                char v73 = (4 * *(unsigned char *)(v13 + 18) + 8) & 0x3C;
                unint64_t v74 = ((v55 >> v73) & 0xF) + 1;
                if (v74 < *(unsigned __int16 *)(v13 + 16))
                {
                  uint64_t v204 = (v74 << v73) | ((-15 << v73) - 1) & v55;
                  goto LABEL_67;
                }
              }
              uint64_t v218 = v71;
              unint64_t v219 = v199.i64[0];
              uint64_t v220 = v198;
              unint64_t v221 = v197;
              char v222 = v196;
              swift_unknownObjectRetain();
              char v75 = sub_24A498278((uint64_t)&v203);
              sub_24A496BE8((uint64_t)v217);
              if (v75)
              {
LABEL_67:
                sub_24A496BE8((uint64_t)v217);
                if (!v71) {
                  goto LABEL_97;
                }
              }
              else
              {
                unint64_t v76 = sub_24A498214();
                sub_24A496BE8((uint64_t)v217);
                unint64_t v203 = v200.i64[0];
                uint64_t v204 = v76;
                uint64_t v205 = 0;
                if (!v71)
                {
LABEL_97:
                  uint64_t v108 = sub_24A5BC780();
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v108 - 8) + 16))(v194, v201, v108);
                  return swift_bridgeObjectRelease();
                }
              }
              unint64_t v195 = v71 + 24;
              unint64_t v77 = v204;
              while (1)
              {
                *(void *)&long long v214 = v71;
                *((void *)&v214 + 1) = v199.i64[0];
                *(void *)&long long v215 = v198;
                *((void *)&v215 + 1) = v197;
                uint64_t v216 = v196;
                int v78 = *(unsigned __int8 *)(v71 + 18);
                uint64_t v79 = *(unsigned __int16 *)(v71 + 16);
                swift_unknownObjectRetain_n();
                sub_24A496BE8((uint64_t)v217);
                sub_24A496BE8((uint64_t)v217);
                if (v77 >= (((-15 << ((4 * v78 + 8) & 0x3C)) - 1) & v78 | (unint64_t)(v79 << ((4 * v78 + 8) & 0x3C)))) {
                  goto LABEL_97;
                }
                if (v203 != v200.i64[0])
                {
                  __break(1u);
LABEL_150:
                  __break(1u);
                  goto LABEL_151;
                }
                uint64_t v80 = v205;
                if (v205)
                {
                  swift_bridgeObjectRetain();
                }
                else
                {
                  swift_unknownObjectRetain();
                  sub_24A4895D4(v77, (uint64_t)v202);
                  sub_24A496BE8((uint64_t)v217);
                }
                uint64_t v81 = sub_24A5BB830();
                uint64_t v83 = v82;
                uint64_t v85 = v84;
                uint64_t v87 = v86;
                swift_bridgeObjectRelease();
                sub_24A58AE34(v81, v83, v85, v87);
                swift_bridgeObjectRelease();
                int v88 = *(unsigned __int8 *)(v71 + 18);
                uint64_t v89 = *(unsigned __int16 *)(v71 + 16);
                swift_unknownObjectRetain_n();
                sub_24A496BE8((uint64_t)v217);
                sub_24A496BE8((uint64_t)v217);
                if (v77 >= (((-15 << ((4 * v88 + 8) & 0x3C)) - 1) & v88 | (unint64_t)(v89 << ((4 * v88 + 8) & 0x3C)))) {
                  goto LABEL_150;
                }
                if (v80)
                {
                  char v90 = (4 * *(unsigned char *)(v80 + 18) + 8) & 0x3C;
                  unint64_t v91 = ((v77 >> v90) & 0xF) + 1;
                  if (v91 < *(unsigned __int16 *)(v80 + 16))
                  {
                    unint64_t v77 = (v91 << v90) | ((-15 << v90) - 1) & v77;
                    uint64_t v204 = v77;
                    goto LABEL_72;
                  }
                }
                char v92 = (4 * *(unsigned char *)(v71 + 18) + 8) & 0x3C;
                uint64_t v93 = (v77 >> v92) & 0xF;
                if (*(unsigned char *)(v71 + 18))
                {
                  uint64_t v94 = *(void *)(v195 + 40 * ((v77 >> v92) & 0xF));
                  int v95 = *(unsigned __int8 *)(v94 + 18);
                  char v96 = (4 * v95 + 8) & 0x3C;
                  v202[0] = (v77 >> v96) & 0xF;
                  if (v95)
                  {
                    sub_24A497498((uint64_t)v217);
                    swift_unknownObjectRetain();
                    char v97 = sub_24A538E54(v94 + 24, v202, (uint64_t)&v203, v94, v95);
                    swift_unknownObjectRelease();
                    if (v97)
                    {
                      unint64_t v77 = v204;
                      goto LABEL_94;
                    }
                  }
                  else
                  {
                    unint64_t v98 = ((v77 >> v96) & 0xF) + 1;
                    if (v98 < *(unsigned __int16 *)(v94 + 16))
                    {
                      unint64_t v77 = (v98 << v96) | ((-15 << v96) - 1) & v77;
                      uint64_t v204 = v77;
                      uint64_t v205 = v94;
                      swift_unknownObjectRetain();
                      goto LABEL_94;
                    }
                    swift_unknownObjectRetain();
                  }
                  uint64_t v100 = v93 + 1;
                  if (v93 + 1 < (unint64_t)*(unsigned __int16 *)(v71 + 16))
                  {
                    unint64_t v101 = v195 + 40 * v100;
                    long long v103 = *(_OWORD *)v101;
                    long long v102 = *(_OWORD *)(v101 + 16);
                    uint64_t v213 = *(void *)(v101 + 32);
                    long long v211 = v103;
                    long long v212 = v102;
                    unsigned int v104 = *(unsigned __int8 *)(v103 + 18) + 1;
                    if ((v104 >> 8)) {
                      goto LABEL_155;
                    }
                    uint64_t v204 = ((-256 << (4 * (v104 & 0xF))) | 0xFF) & (v204 & ((-15 << v92) - 1) | (v100 << v92));
                    unint64_t v77 = v204;
                    swift_unknownObjectRetain();
                    uint64_t v105 = sub_24A53852C(v77);
                    sub_24A496BE8((uint64_t)&v211);
                    uint64_t v205 = v105;
LABEL_94:
                    sub_24A496BE8((uint64_t)v217);
LABEL_72:
                    sub_24A496BE8((uint64_t)v217);
                    continue;
                  }
                  sub_24A496BE8((uint64_t)v217);
                  int v99 = *(unsigned __int8 *)(v71 + 18);
                }
                else
                {
                  if (v93 + 1 < (unint64_t)*(unsigned __int16 *)(v71 + 16))
                  {
                    unint64_t v77 = ((v93 + 1) << v92) | ((-15 << v92) - 1) & v77;
                    uint64_t v204 = v77;
                    sub_24A496BE8((uint64_t)v217);
                    uint64_t v205 = v71;
                    continue;
                  }
                  int v99 = 0;
                }
                uint64_t v106 = *(unsigned __int16 *)(v71 + 16);
                char v107 = *(unsigned char *)(v71 + 18);
                swift_unknownObjectRetain();
                sub_24A496BE8((uint64_t)v217);
                sub_24A496BE8((uint64_t)v217);
                unint64_t v77 = ((-15 << ((4 * v107 + 8) & 0x3C)) - 1) & v99 | (unint64_t)(v106 << ((4 * v107 + 8) & 0x3C));
                unint64_t v203 = v200.i64[0];
                uint64_t v204 = v77;
                uint64_t v205 = 0;
              }
            }
LABEL_158:
            __break(1u);
LABEL_159:
            __break(1u);
            goto LABEL_160;
          }
LABEL_157:
          __break(1u);
          goto LABEL_158;
        }
LABEL_156:
        __break(1u);
        goto LABEL_157;
      }
    }
    unint64_t v21 = ((((v21 >> v30) & 0xF) - 1) << v30) | ((-15 << v30) - 1) & v21;
    *((void *)&v211 + 1) = v21;
    swift_unknownObjectRelease();
    if (v23 != v20) {
      goto LABEL_152;
    }
    goto LABEL_41;
  }
  return result;
}

uint64_t sub_24A4C915C@<X0>(uint64_t a1@<X8>)
{
  char v4 = (unint64_t *)v1[2];
  uint64_t v3 = v1[3];
  uint64_t v5 = v1[4];
  unint64_t v6 = *v4;
  *char v4 = 4;
  uint64_t result = sub_24A48ED24(v6, v3, v5);
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v8 & 1;
  return result;
}

uint64_t TreeSet.isDisjoint(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return _HashNode.isDisjoint<A>(_:with:)(0, a1, a2, a4, a5, a7, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8EE60] + 8, a8) & 1;
}

uint64_t TreeSet.isDisjoint<A>(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return _HashNode.isDisjoint<A>(_:with:)(0, a1, a2, a4, a5, a7, MEMORY[0x263F8EE60] + 8, a8, a9);
}

uint64_t TreeSet.isDisjoint<A>(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v18 = (char *)v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (TreeSet.isEmpty.getter(v19, v20))
  {
    char v21 = 1;
  }
  else
  {
    uint64_t v22 = type metadata accessor for TreeSet();
    if (v22 == a6)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a1, a6);
      swift_dynamicCast();
      char v21 = _HashNode.isDisjoint<A>(_:with:)(0, v25[0], v25[1], a2, a3, a5, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8EE60] + 8, a7);
      swift_release();
    }
    else
    {
      MEMORY[0x270FA5388](v22);
      v25[-8] = a5;
      v25[-7] = a6;
      v25[-6] = a7;
      v25[-5] = a8;
      v25[-4] = a2;
      v25[-3] = a3;
      uint64_t v24 = a4;
      char v21 = sub_24A5BB890();
    }
  }
  return v21 & 1;
}

BOOL sub_24A4C9404(uint64_t a1)
{
  return !TreeSet.contains(_:)(a1, v1[6], v1[7], v1[8], v1[2], v1[4]);
}

uint64_t _HashNode.filter(_:_:)@<X0>(unsigned int a1@<W0>, uint64_t (*a2)(char *, char *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  if (_HashNode.isCollisionNode.getter(a4, a5, a6, a7, a8)) {
    return _HashNode._filter_slow(_:_:)(a1, a2, a3, a4, a6, a7, a8, a9);
  }
  uint64_t v18 = (unsigned int *)nullsub_1(a4 + 16, a4 + 32, a6, a7, a8);
  return sub_24A4C95E0(v18, v19, a1, a2, a3, a6, a9, a7, a8);
}

uint64_t _HashNode._filter_slow(_:_:)@<X0>(unsigned int a1@<W0>, uint64_t (*a2)(char *, char *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v15 = (unsigned int *)nullsub_1(a4 + 16, a4 + 32, a5, a6, a7);
  return sub_24A4C9FC4(v15, v16, a1, a2, a3, a5, a8, a6, a7);
}

uint64_t sub_24A4C95E0@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t (*a4)(char *, char *)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = v9;
  unint64_t v98 = a4;
  uint64_t v99 = a5;
  uint64_t v102 = a2;
  uint64_t v75 = a7;
  uint64_t v14 = a8;
  uint64_t v15 = type metadata accessor for _HashNode.Builder();
  uint64_t v85 = sub_24A5BBD20();
  uint64_t v74 = *(void *)(v85 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v85);
  uint64_t v81 = (char *)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  int v95 = (char *)&v73 - v18;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v19 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  unint64_t v77 = (char *)&v73 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v86 = (char *)&v73 - v21;
  uint64_t v22 = type metadata accessor for _HashNode.Builder.Kind();
  uint64_t v23 = MEMORY[0x270FA5388](v22);
  unsigned int v25 = (char *)&v73 - v24;
  uint64_t v76 = *(void *)(v15 - 8);
  uint64_t v26 = MEMORY[0x270FA5388](v23);
  uint64_t v79 = (char *)&v73 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  int v78 = (char *)&v73 - v29;
  MEMORY[0x270FA5388](v28);
  char v31 = (char *)&v73 - v30;
  swift_storeEnumTagMultiPayload();
  uint64_t v94 = v31;
  unsigned int v92 = a3;
  uint64_t v97 = a9;
  _HashNode.Builder.init(_:_:)(a3, (uint64_t)v25, v31);
  unsigned int v32 = *a1;
  uint64_t v87 = v15;
  char v96 = a1;
  unsigned int v103 = v32;
  if (!v32)
  {
    uint64_t v50 = v75;
    uint64_t v104 = v9;
    unsigned int v51 = a1[1];
    if (!v51) {
      goto LABEL_45;
    }
    unsigned int v103 = 0;
    uint64_t v34 = a6;
    unint64_t v35 = v96;
    goto LABEL_18;
  }
  unsigned int v101 = 0;
  unsigned int v33 = 0;
  uint64_t v83 = a8 - 8;
  uint64_t v84 = a6 - 8;
  uint64_t v34 = a6;
  unint64_t v35 = a1;
  uint64_t v36 = v86;
  uint64_t v82 = v34;
  while (1)
  {
    LODWORD(v100) = v33;
    uint64_t v39 = _HashNode.UnsafeHandle.itemPtr(at:)(v33, (uint64_t)v35, v102);
    uint64_t v40 = *(int *)(TupleTypeMetadata2 + 48);
    char v41 = &v36[v40];
    uint64_t v42 = (void (**)(char *, uint64_t))(v39 + v40);
    uint64_t v43 = *(void *)(v34 - 8);
    uint64_t v89 = *(void (**)(char *))(v43 + 16);
    char v90 = (void (**)(char *, uint64_t))v39;
    v89(v36);
    uint64_t v44 = *(void *)(a8 - 8);
    uint64_t v45 = *(void (***)(char *, char *, uint64_t))(v44 + 16);
    unint64_t v91 = v42;
    int v88 = v45;
    ((void (*)(char *, void (**)(char *, uint64_t), uint64_t))v45)(v41, v42, a8);
    long long v46 = v36;
    char v47 = v98(v36, v41);
    uint64_t v104 = v10;
    if (v10)
    {
      (*(void (**)(char *, uint64_t))(v76 + 8))(v94, v87);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v41, a8);
      return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v36, v82);
    }
    char v48 = v47;
    unsigned int v49 = __clz(__rbit32(v103));
    v103 &= v103 - 1;
    (*(void (**)(char *, uint64_t))(v44 + 8))(v41, a8);
    uint64_t v34 = v82;
    (*(void (**)(char *, uint64_t))(v43 + 8))(v46, v82);
    if (v48)
    {
      unint64_t v35 = v96;
      if ((v101 & 1) == 0)
      {
        uint64_t v36 = v86;
        if (v103)
        {
          unsigned int v101 = 0;
          uint64_t v10 = v104;
          goto LABEL_15;
        }
        unsigned int v51 = v96[1];
        uint64_t v15 = v87;
        if (!v51)
        {
          uint64_t v50 = v75;
LABEL_45:
          uint64_t v52 = v76;
          (*(void (**)(char *, uint64_t))(v76 + 8))(v94, v15);
          uint64_t v72 = 1;
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 56))(v50, v72, 1, v15);
        }
        unsigned int v103 = 0;
LABEL_18:
        uint64_t v52 = v76;
LABEL_22:
        uint64_t v54 = 0;
        unsigned int v101 = v92 + 5;
        uint64_t v100 = (void (**)(char *, char *, uint64_t))(v74 + 16);
        TupleTypeMetadata2 = v52 + 48;
        int v88 = (void (**)(char *, char *, uint64_t))(v52 + 16);
        uint64_t v89 = (void (*)(char *))(v52 + 32);
        char v90 = (void (**)(char *, uint64_t))(v52 + 8);
        unint64_t v91 = (void (**)(char *, uint64_t))(v74 + 8);
        uint64_t v80 = a8;
        while (1)
        {
          while (1)
          {
            uint64_t v55 = v97;
            long long v56 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v54, v35, v102, v34, v14, v97);
            uint64_t v58 = *v56;
            uint64_t v57 = v56[1];
            swift_retain();
            unint64_t v59 = v95;
            uint64_t v60 = v57;
            uint64_t v61 = v104;
            _HashNode.filter(_:_:)(v101, v98, v99, v58, v60, v34, v14, v55);
            uint64_t v104 = v61;
            if (v61)
            {
              (*v90)(v94, v15);
              return swift_release();
            }
            int v62 = v54;
            uint64_t v63 = v34;
            uint64_t v64 = __clz(__rbit32(v51));
            v51 &= v51 - 1;
            swift_release();
            uint64_t v65 = v81;
            uint64_t v66 = v85;
            (*v100)(v81, v59, v85);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))TupleTypeMetadata2)(v65, 1, v15) == 1) {
              break;
            }
            uint64_t v70 = v78;
            (*(void (**)(char *, char *, uint64_t))v89)(v78, v65, v15);
            unint64_t v35 = v96;
            if ((v103 & 1) == 0) {
              _HashNode.Builder.copyItemsAndChildren(_:from:upTo:)(v92, v96, v102, v64, v15);
            }
            uint64_t v71 = (uint64_t)v79;
            (*v88)(v79, v70, v15);
            _HashNode.Builder.addNewChildBranch(_:_:at:)(v92, v71, v64, v15);
            (*v90)(v70, v15);
            (*v91)(v95, v85);
            if (!v51) {
              goto LABEL_41;
            }
            unsigned int v103 = 1;
            uint64_t v34 = v63;
            uint64_t v14 = v80;
            uint64_t v54 = (v62 + 1);
          }
          uint64_t v67 = *v91;
          (*v91)(v65, v66);
          if (v103)
          {
            uint64_t v69 = *v56;
            uint64_t v68 = v56[1];
            swift_retain();
            _HashNode.Builder.addNewChildNode(_:_:at:)(v92, v69, v68, v64, v87);
            v67(v95, v66);
            if (!v51) {
              goto LABEL_40;
            }
            unsigned int v103 = 1;
            uint64_t v15 = v87;
            uint64_t v34 = v63;
          }
          else
          {
            v67(v95, v66);
            if (!v51)
            {
              uint64_t v50 = v75;
              uint64_t v15 = v87;
              goto LABEL_45;
            }
            uint64_t v34 = v63;
            unsigned int v103 = 0;
            uint64_t v15 = v87;
          }
          uint64_t v14 = v80;
          unint64_t v35 = v96;
          uint64_t v54 = (v62 + 1);
        }
      }
      uint64_t v37 = (uint64_t)v77;
      uint64_t v38 = (uint64_t)&v77[*(int *)(TupleTypeMetadata2 + 48)];
      ((void (*)(char *, void (**)(char *, uint64_t), uint64_t))v89)(v77, v90, v34);
      ((void (*)(uint64_t, void (**)(char *, uint64_t), uint64_t))v88)(v38, v91, a8);
      uint64_t v15 = v87;
      _HashNode.Builder.addNewItem(_:_:at:)(v92, v37, v38, v49, v87);
      if (!v103) {
        goto LABEL_20;
      }
      goto LABEL_14;
    }
    unint64_t v35 = v96;
    if ((v101 & 1) == 0) {
      break;
    }
    uint64_t v36 = v86;
    if (!v103)
    {
      unsigned int v51 = v96[1];
      if (!v51)
      {
LABEL_40:
        uint64_t v15 = v87;
LABEL_41:
        uint64_t v52 = v76;
        goto LABEL_42;
      }
      unsigned int v103 = 1;
      uint64_t v15 = v87;
      goto LABEL_18;
    }
    unsigned int v101 = 1;
    uint64_t v10 = v104;
LABEL_15:
    unsigned int v33 = v100 + 1;
  }
  uint64_t v15 = v87;
  _HashNode.Builder.copyItems(_:from:upTo:)(v92, v96, v102, v49, v87);
  if (v103)
  {
LABEL_14:
    unsigned int v101 = 1;
    uint64_t v10 = v104;
    uint64_t v36 = v86;
    goto LABEL_15;
  }
LABEL_20:
  unsigned int v51 = v35[1];
  uint64_t v52 = v76;
  if (v51)
  {
    unsigned int v103 = 1;
    goto LABEL_22;
  }
LABEL_42:
  uint64_t v50 = v75;
  (*(void (**)(uint64_t, char *, uint64_t))(v52 + 32))(v75, v94, v15);
  uint64_t v72 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 56))(v50, v72, 1, v15);
}

uint64_t sub_24A4C9FC4@<X0>(unsigned int *a1@<X0>, unint64_t *a2@<X1>, unsigned int a3@<W2>, uint64_t (*a4)(char *, char *)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9)
{
  long long v56 = a4;
  uint64_t v57 = a5;
  uint64_t v44 = a7;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v13 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  long long v46 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v64 = (char *)&v44 - v15;
  uint64_t v16 = type metadata accessor for _HashNode.Builder.Kind();
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v44 - v17;
  uint64_t v49 = type metadata accessor for _HashNode.Builder();
  uint64_t v45 = *(void *)(v49 - 8);
  MEMORY[0x270FA5388](v49);
  uint64_t v20 = (char *)&v44 - v19;
  swift_storeEnumTagMultiPayload();
  char v48 = v20;
  unsigned int v47 = a3;
  uint64_t v55 = a9;
  _HashNode.Builder.init(_:_:)(a3, (uint64_t)v18, v20);
  int8x8_t v21 = (int8x8_t)*a1;
  unsigned int v22 = a1[1];
  uint64_t v58 = a1;
  uint8x8_t v23 = (uint8x8_t)vcnt_s8(v21);
  v23.i16[0] = vaddlv_u8(v23);
  if (v21.i32[0] != v22) {
    v21.i32[0] = v23.i32[0];
  }
  unsigned int v54 = v21.i32[0];
  if (v21.i32[0])
  {
    int v51 = 0;
    unsigned int v24 = 0;
    uint64_t v52 = a8 - 8;
    uint64_t v53 = a6 - 8;
    unsigned int v25 = v64;
    uint64_t v50 = a2;
    while (1)
    {
      LODWORD(v64) = v24;
      uint64_t v26 = _HashNode.UnsafeHandle.itemPtr(at:)(v24, (uint64_t)v58, (uint64_t)a2);
      uint64_t v27 = *(int *)(TupleTypeMetadata2 + 48);
      uint64_t v28 = &v25[v27];
      uint64_t v29 = v26 + v27;
      uint64_t v30 = *(void *)(a6 - 8);
      uint64_t v60 = *(void (**)(char *))(v30 + 16);
      uint64_t v61 = v26;
      v60(v25);
      uint64_t v31 = a6;
      uint64_t v32 = *(void *)(a8 - 8);
      unsigned int v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16);
      uint64_t v62 = v29;
      unint64_t v59 = v33;
      v33((uint64_t)v28, v29, a8);
      uint64_t v34 = v65;
      char v35 = v56(v25, v28);
      if (v34)
      {
        (*(void (**)(unsigned char *, uint64_t))(v45 + 8))(v48, v49);
        (*(void (**)(char *, uint64_t))(v32 + 8))(v28, a8);
        return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v25, v31);
      }
      char v36 = v35;
      uint64_t v65 = 0;
      (*(void (**)(char *, uint64_t))(v32 + 8))(v28, a8);
      (*(void (**)(char *, uint64_t))(v30 + 8))(v25, v31);
      a6 = v31;
      if ((v36 & 1) == 0) {
        break;
      }
      unsigned int v24 = v64 + 1;
      if (v51)
      {
        uint64_t v37 = (uint64_t)v46;
        uint64_t v38 = (uint64_t)&v46[*(int *)(TupleTypeMetadata2 + 48)];
        ((void (*)(char *, uint64_t, uint64_t))v60)(v46, v61, a6);
        v59(v38, v62, a8);
        a2 = v50;
        _HashNode.Builder.addNewCollision(_:_:_:)((char *)v47, v37, v38, *v50, v49);
LABEL_10:
        if (v24 >= v54)
        {
          uint64_t v40 = v44;
          uint64_t v41 = v45;
          uint64_t v42 = v49;
          (*(void (**)(uint64_t, unsigned char *, uint64_t))(v45 + 32))(v44, v48, v49);
          uint64_t v43 = 0;
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 56))(v40, v43, 1, v42);
        }
      }
      else
      {
        a2 = v50;
        if (v24 >= v54) {
          goto LABEL_15;
        }
      }
    }
    unsigned int v24 = v64 + 1;
    a2 = v50;
    if ((v51 & 1) == 0) {
      _HashNode.Builder.copyCollisions(from:upTo:)((uint64_t)v58, v50, v64, v49);
    }
    int v51 = 1;
    goto LABEL_10;
  }
LABEL_15:
  uint64_t v41 = v45;
  uint64_t v42 = v49;
  (*(void (**)(unsigned char *, uint64_t))(v45 + 8))(v48, v49);
  uint64_t v43 = 1;
  uint64_t v40 = v44;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 56))(v40, v43, 1, v42);
}

uint64_t Rope.mutatingForEach<A>(from:_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 56))(a6, 1, 1, a5);
  uint64_t v12 = *(void *)(a4 + 24);
  v14[2] = *(void *)(a4 + 16);
  void v14[3] = a5;
  v14[4] = v12;
  v14[5] = a6;
  v14[6] = a2;
  _OWORD v14[7] = a3;
  return Rope._mutatingForEach(from:_:)(a1, (uint64_t (*)(uint64_t))sub_24A4CA7DC, (uint64_t)v14, a4);
}

uint64_t Rope.mutatingForEach<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v15[0] = Rope.startIndex.getter(a3);
  v15[1] = v10;
  v15[2] = v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 56))(a5, 1, 1, a4);
  uint64_t v12 = *(void *)(a3 + 24);
  v14[2] = *(void *)(a3 + 16);
  void v14[3] = a4;
  v14[4] = v12;
  v14[5] = a5;
  v14[6] = a1;
  _OWORD v14[7] = a2;
  return Rope._mutatingForEach(from:_:)(v15, (uint64_t (*)(uint64_t))sub_24A4CA7DC, (uint64_t)v14, a3);
}

BOOL sub_24A4CA644(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = sub_24A5BBD20();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v19 - v15;
  a3(a1);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 40))(a2, v16, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a2, v10);
  BOOL v17 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 48))(v14, 1, a6) == 1;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  return v17;
}

uint64_t Rope._mutatingForEach(from:_:)(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v30 = a2;
  uint64_t v31 = a3;
  uint64_t v9 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v28 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v29 = AssociatedTypeWitness;
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v27 = (uint64_t)&v26 - v11;
  uint64_t v32 = v9;
  uint64_t v33 = v8;
  uint64_t v12 = type metadata accessor for Rope._Node();
  uint64_t v13 = sub_24A5BBD20();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  BOOL v17 = (char *)&v26 - v16;
  uint64_t v18 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v20 = (char *)&v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v20, v5, a4);
  Rope.validate(_:)(*a1, a1[1], a1[2], a4);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, a4);
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v5, v13);
  int8x8_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48);
  char v22 = 1;
  LODWORD(v20) = v21(v17, 1, v12);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  if (v20 == 1) {
    return v22 & 1;
  }
  uint64_t result = v21(v5, 1, v12);
  if (result != 1)
  {
    uint64_t v24 = v27;
    char v22 = Rope._Node.mutatingForEach(from:body:)(v27, (uint64_t)a1, v30, v31, v12);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v24, v29);
    uint64_t v25 = type metadata accessor for Rope();
    Rope._invalidateIndices()();
    *a1 = *(void *)&v5[*(int *)(v25 + 36)];
    return v22 & 1;
  }
  __break(1u);
  return result;
}

BOOL sub_24A4CAB04(uint64_t a1)
{
  return sub_24A4CA644(a1, *(void *)(v1 + 40), *(void (**)(uint64_t))(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_24A4CAB14(_OWORD *a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5)
{
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    long long v8 = a3[1];
    long long v51 = *a3;
    long long v52 = v8;
    uint64_t v53 = *((void *)a3 + 4);
    sub_24A4CBC1C((uint64_t)v49);
    swift_unknownObjectRelease();
    long long v9 = v49[1];
    *a3 = v49[0];
    a3[1] = v9;
    *((void *)a3 + 4) = v50;
  }
  uint64_t result = *(void *)a3;
  int v11 = *(unsigned __int8 *)(*(void *)a3 + 18);
  uint64_t v12 = (unsigned __int16 *)(*(void *)a3 + 16);
  unint64_t v13 = *v12;
  char v14 = (4 * v11 + 8) & 0x3C;
  unint64_t v15 = (*(void *)(a2 + 8) >> v14) & 0xFLL;
  unint64_t v48 = v15;
  if (v15 > v13)
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (v15 >= v13)
  {
    *a1 = 0u;
    a1[1] = 0u;
    char v22 = 1;
    return v22 & 1;
  }
  uint64_t v38 = a3;
  long long v46 = 0u;
  long long v47 = 0u;
  if (v11)
  {
    uint64_t v37 = a1;
    uint64_t v39 = ((-15 << v14) - 1) & ((-256 << ((4 * v11) & 0x3C)) | 0xFF);
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = swift_unknownObjectRetain() + 40 * v15 + 24;
    while (1)
    {
      uint64_t result = sub_24A4CAB14(&v42, a2, v20, a4, a5);
      BOOL v21 = __OFADD__(v19, v42);
      v19 += v42;
      if (v21)
      {
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
      BOOL v21 = __OFADD__(v18, v43);
      v18 += v43;
      if (v21) {
        goto LABEL_27;
      }
      BOOL v21 = __OFADD__(v17, v44);
      v17 += v44;
      if (v21) {
        goto LABEL_28;
      }
      BOOL v21 = __OFADD__(v16, v45);
      v16 += v45;
      if (v21) {
        goto LABEL_29;
      }
      char v22 = result;
      if ((result & 1) == 0) {
        break;
      }
      *(void *)(a2 + 8) = v39 & *(void *)(a2 + 8) | (++v15 << v14);
      v20 += 40;
      if (v13 == v15)
      {
        *(void *)(a2 + 16) = 0;
        break;
      }
    }
    uint64_t result = swift_unknownObjectRelease();
    *uint64_t v37 = v19;
    v37[1] = v18;
    v37[2] = v17;
    v37[3] = v16;
    uint64_t v23 = v38[1];
    BOOL v21 = __OFADD__(v23, v19);
    uint64_t v24 = v23 + v19;
    if (v21) {
      goto LABEL_31;
    }
    v38[1] = v24;
    uint64_t v25 = v38[2];
    BOOL v21 = __OFADD__(v25, v18);
    uint64_t v26 = v25 + v18;
    if (!v21)
    {
      void v38[2] = v26;
      uint64_t v27 = v38[3];
      BOOL v21 = __OFADD__(v27, v17);
      uint64_t v28 = v27 + v17;
      if (v21) {
        goto LABEL_33;
      }
      _OWORD v38[3] = v28;
      uint64_t v29 = v38[4];
      BOOL v21 = __OFADD__(v29, v16);
      uint64_t v30 = v29 + v16;
      if (!v21)
      {
        v38[4] = v30;
        return v22 & 1;
      }
      goto LABEL_34;
    }
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  *(void *)(a2 + 16) = result;
  uint64_t v31 = result + 24;
  swift_unknownObjectRetain();
  char v22 = sub_24A4CB60C(v12, v31, (uint64_t *)&v48, &v46, a2, 0, a4, a5);
  uint64_t result = swift_unknownObjectRelease();
  long long v32 = v46;
  long long v33 = v47;
  *a1 = v46;
  a1[1] = v33;
  uint64_t v34 = *((void *)a3 + 1);
  if (__OFADD__(v34, (void)v32))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  *((void *)a3 + 1) = v34 + v32;
  uint64_t v35 = *((void *)a3 + 2);
  if (__OFADD__(v35, *((void *)&v32 + 1)))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  *((void *)a3 + 2) = v35 + *((void *)&v32 + 1);
  if (__OFADD__(*((void *)a3 + 3), (void)v33))
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  *((void *)a3 + 3) = v33;
  uint64_t v36 = *((void *)a3 + 4);
  if (!__OFADD__(v36, *((void *)&v33 + 1)))
  {
    *((void *)a3 + 4) = v36 + *((void *)&v33 + 1);
    return v22 & 1;
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t Rope._Node.mutatingForEach(from:body:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  unint64_t v6 = v5;
  uint64_t v47 = a4;
  uint64_t v44 = a3;
  uint64_t v50 = a1;
  uint64_t v9 = *(void *)(a5 + 16);
  uint64_t v10 = *(void *)(a5 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v48 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v45 = (char *)&v43 - v12;
  Rope._Node.ensureUnique()();
  unsigned int v13 = Rope._Node.header.getter();
  char v14 = BYTE2(v13);
  int v15 = HIWORD(v13);
  uint64_t v46 = a2;
  unint64_t v16 = *(void *)(a2 + 8);
  uint64_t v49 = v10;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v18 = _RopePath.subscript.getter(v15, v16, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v53 = v18;
  uint64_t result = Rope._Node.header.getter();
  if (v18 > (unsigned __int16)result)
  {
    __break(1u);
  }
  else
  {
    unsigned __int16 v20 = Rope._Node.header.getter();
    BOOL v21 = *(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32);
    if (v18 >= v20)
    {
      v21(AssociatedTypeWitness, AssociatedConformanceWitness);
      return 1;
    }
    else
    {
      uint64_t v22 = (uint64_t)v45;
      v21(AssociatedTypeWitness, AssociatedConformanceWitness);
      if (v14)
      {
        uint64_t v23 = *v6 + 16;
        unint64_t v24 = *v6
            + ((*(unsigned __int8 *)(*(void *)(a5 - 8) + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a5 - 8) + 80));
        swift_getWitnessTable();
        uint64_t v25 = a5;
        uint64_t v26 = v49;
        uint64_t v27 = (unsigned __int16 *)nullsub_1(v23, v24, v9, v25, v49);
        uint64_t v29 = v28;
        swift_unknownObjectRetain();
        sub_24A4CB370(v27, v29, &v53, v46, (uint64_t)v44, v47, v22, v15, (char *)&v51, v9, v26);
        swift_unknownObjectRelease();
        uint64_t v30 = v51;
      }
      else
      {
        uint64_t v32 = Rope._Node.asUnmanagedLeaf.getter();
        uint64_t v33 = v9;
        uint64_t v34 = v46;
        *(void *)(v46 + 16) = v32;
        uint64_t v35 = *v6;
        uint64_t v36 = *v6 + 16;
        uint64_t v37 = v49;
        uint64_t v38 = type metadata accessor for Rope._Item();
        uint64_t v39 = v35
            + ((*(unsigned __int8 *)(*(void *)(v38 - 8) + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v38 - 8) + 80));
        swift_getWitnessTable();
        uint64_t v40 = (unsigned __int16 *)nullsub_1(v36, v39, v33, v38, v37);
        uint64_t v42 = v41;
        swift_unknownObjectRetain();
        sub_24A4CB7BC(v40, v42, &v53, v44, v47, v22, v34, 0, (char *)&v52, v33, v37);
        swift_unknownObjectRelease();
        uint64_t v30 = v52;
      }
      uint64_t v31 = v48;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 16))(v50, v22, AssociatedTypeWitness);
      sub_24A4CB208((uint64_t)v6, v22);
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v22, AssociatedTypeWitness);
    }
    return v30;
  }
  return result;
}

uint64_t sub_24A4CB208(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  unint64_t v6 = (char *)&v9 - v5;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v9 - v5, a2, AssociatedTypeWitness);
  type metadata accessor for Rope._Node();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(v6, AssociatedTypeWitness, AssociatedConformanceWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, AssociatedTypeWitness);
}

uint64_t sub_24A4CB370@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, char *a9@<X8>, uint64_t a10, uint64_t a11)
{
  int v34 = a8;
  uint64_t v37 = a6;
  uint64_t v38 = a7;
  uint64_t v36 = a5;
  uint64_t v40 = a4;
  uint64_t v30 = a9;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v17 = (char *)&v29 - v16;
  uint64_t v18 = type metadata accessor for Rope._Node();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v39 = v18;
  uint64_t result = Rope._UnsafeHandle.mutableChildren.getter(a1, a2, a10, v18, a11, WitnessTable);
  uint64_t v35 = result;
  uint64_t v21 = *a3;
  uint64_t v33 = v22;
  if (v21 >= v22)
  {
LABEL_6:
    *(void *)(v40 + 16) = 0;
    char v28 = 1;
LABEL_8:
    *uint64_t v30 = v28;
  }
  else
  {
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 48);
    uint64_t v31 = *(void *)(*(void *)(v39 - 8) + 72);
    unint64_t v24 = (uint64_t (**)(char *, uint64_t))(v15 + 8);
    Swift::UInt8 v25 = v34;
    while (1)
    {
      char v26 = Rope._Node.mutatingForEach(from:body:)(v17, v40, v36, v37, v39);
      uint64_t result = v32(v17, AssociatedTypeWitness, AssociatedConformanceWitness);
      if ((v26 & 1) == 0)
      {
        uint64_t result = (*v24)(v17, AssociatedTypeWitness);
        char v28 = 0;
        goto LABEL_8;
      }
      if (__OFADD__(*a3, 1)) {
        break;
      }
      ++*a3;
      uint64_t v27 = type metadata accessor for _RopePath();
      _RopePath.clear(below:)(v25);
      _RopePath.subscript.setter(*a3, v25, v27);
      uint64_t result = (*v24)(v17, AssociatedTypeWitness);
      if (*a3 >= v33) {
        goto LABEL_6;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_24A4CB60C(unsigned __int16 *a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a1;
  uint64_t v9 = *a3;
  if (*a3 >= v8)
  {
    char v22 = 1;
    return v22 & 1;
  }
  else
  {
    uint64_t v15 = _s7BuilderVMa();
    uint64_t v43 = a8 + *(int *)(v15 + 20);
    uint64_t v42 = a8 + *(int *)(v15 + 24);
    uint64_t v39 = (-15 << ((4 * a6 + 8) & 0x3C)) - 1;
    char v40 = (4 * a6 + 8) & 0x3C;
    while (1)
    {
      uint64_t v16 = (unsigned __int8 *)(a2 + 24 * v9);
      uint64_t v17 = v16[16];
      uint64_t v18 = v16[17];
      uint64_t v19 = v16[18];
      uint64_t v20 = v16[19];
      uint64_t result = sub_24A48ED24(0xFuLL, v43, v42);
      *(void *)a7 = result;
      *(unsigned char *)(a7 + 8) = v22 & 1;
      uint64_t v23 = (unsigned __int8 *)(a2 + 24 * *a3);
      uint64_t v24 = v23[19] - v20;
      uint64_t v25 = *a4 + v24;
      if (__OFADD__(*a4, v24)) {
        break;
      }
      uint64_t v26 = v23[16];
      uint64_t v27 = v23[17];
      uint64_t v28 = v23[18] - v19;
      *a4 = v25;
      uint64_t v29 = a4[1];
      BOOL v30 = __OFADD__(v29, v28);
      uint64_t v31 = v29 + v28;
      if (v30) {
        goto LABEL_15;
      }
      uint64_t v32 = v27 - v18;
      a4[1] = v31;
      uint64_t v33 = a4[2];
      BOOL v30 = __OFADD__(v33, v32);
      uint64_t v34 = v33 + v32;
      if (v30) {
        goto LABEL_16;
      }
      uint64_t v35 = v26 - v17;
      a4[2] = v34;
      uint64_t v36 = a4[3];
      BOOL v30 = __OFADD__(v36, v35);
      uint64_t v37 = v36 + v35;
      if (v30) {
        goto LABEL_17;
      }
      a4[3] = v37;
      if ((v22 & 1) == 0) {
        return v22 & 1;
      }
      uint64_t v38 = *a3 + 1;
      if (__OFADD__(*a3, 1)) {
        goto LABEL_18;
      }
      *a3 = v38;
      if (v38 < 0) {
        goto LABEL_19;
      }
      *(void *)(a5 + 8) = *(void *)(a5 + 8) & v39 | (v38 << v40);
      uint64_t v9 = *a3;
      if (*a3 >= v8) {
        return v22 & 1;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }
  return result;
}

uint64_t sub_24A4CB7BC@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t (*a4)(uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, char *a9@<X8>, uint64_t a10, uint64_t a11)
{
  int v61 = a8;
  uint64_t v68 = a5;
  uint64_t v69 = a6;
  uint64_t v67 = a4;
  uint64_t v70 = a2;
  uint64_t v15 = type metadata accessor for Rope._Item();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v62 = (char *)v50 - v17;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v19 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v20 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v66 = (char *)v50 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v65 = (uint64_t)v50 - v23;
  MEMORY[0x270FA5388](v22);
  uint64_t v71 = (char *)v50 - v24;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v64 = v15;
  uint64_t result = Rope._UnsafeHandle.mutableChildren.getter(a1, v70, a10, v15, a11, WitnessTable);
  uint64_t v63 = result;
  uint64_t v27 = a3;
  uint64_t v28 = *a3;
  uint64_t v60 = v29;
  if (v28 >= v29)
  {
    char v49 = 1;
LABEL_10:
    *a9 = v49;
  }
  else
  {
    v50[0] = a9;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 48);
    uint64_t v58 = AssociatedConformanceWitness + 48;
    uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
    uint64_t v31 = v16 + 16;
    long long v56 = v32;
    uint64_t v54 = *(void *)(v31 + 56);
    uint64_t v59 = v31;
    unsigned __int8 v52 = (void (**)(char *, uint64_t))(v31 - 8);
    v50[1] = a7 + 8;
    uint64_t v33 = v27;
    uint64_t v55 = AssociatedConformanceWitness;
    uint64_t v53 = AssociatedTypeWitness;
    unsigned __int8 v51 = (uint64_t (**)(char *, uint64_t))(v19 + 8);
    uint64_t v34 = v63;
    while (1)
    {
      uint64_t v35 = v54;
      uint64_t v36 = v62;
      uint64_t v37 = v64;
      uint64_t v38 = v56;
      v56(v62, v34 + v54 * v28, v64);
      Rope._Item.summary.getter(v37);
      uint64_t v39 = *v52;
      (*v52)(v36, v37);
      LODWORD(v70) = v67(v34 + *v33 * v35);
      v38(v36, v34 + *v33 * v35, v37);
      char v40 = v51;
      uint64_t v41 = v66;
      Rope._Item.summary.getter(v37);
      uint64_t v42 = v36;
      uint64_t v43 = v55;
      v39(v42, v37);
      uint64_t v44 = v65;
      uint64_t v45 = v53;
      RopeSummary.subtracting(_:)((uint64_t)v71, v53, v43, v65);
      uint64_t v46 = *v40;
      (*v40)(v41, v45);
      v57(v44, v45, v43);
      uint64_t result = v46((char *)v44, v45);
      if ((v70 & 1) == 0)
      {
        uint64_t result = v46(v71, v45);
        char v49 = 0;
        goto LABEL_9;
      }
      uint64_t v47 = *v33 + 1;
      if (__OFADD__(*v33, 1)) {
        break;
      }
      *uint64_t v33 = v47;
      uint64_t v48 = type metadata accessor for _RopePath();
      _RopePath.subscript.setter(v47, v61, v48);
      uint64_t result = v46(v71, v45);
      uint64_t v28 = *v33;
      if (*v33 >= v60)
      {
        char v49 = 1;
LABEL_9:
        a9 = (char *)v50[0];
        goto LABEL_10;
      }
    }
    __break(1u);
  }
  return result;
}

__n128 sub_24A4CBC1C@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  char v4 = *(unsigned char *)(*v1 + 18);
  if (v4)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B177928);
    uint64_t v5 = swift_allocObject();
    *(_WORD *)(v5 + 16) = 0;
    *(unsigned char *)(v5 + 18) = v4;
    __int16 v6 = *(_WORD *)(v3 + 16);
    swift_beginAccess();
    *(_WORD *)(v5 + 16) = v6;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B177920);
    swift_arrayInitWithCopy();
    sub_24A4CBE04(v5, &v11);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B177EE8);
    uint64_t v7 = swift_allocObject();
    *(_WORD *)(v7 + 16) = 0;
    *(unsigned char *)(v7 + 18) = 0;
    __int16 v8 = *(_WORD *)(v3 + 16);
    swift_beginAccess();
    *(_WORD *)(v7 + 16) = v8;
    __swift_instantiateConcreteTypeFromMangledName(qword_26B177B90);
    swift_arrayInitWithCopy();
    sub_24A4CBD70(v7, &v11);
  }
  __n128 result = v12;
  long long v10 = v13;
  *(void *)a1 = v11;
  *(__n128 *)(a1 + 8) = result;
  *(_OWORD *)(a1 + 24) = v10;
  return result;
}

uint64_t sub_24A4CBD70@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (*(_WORD *)(result + 16))
  {
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 24 * *(unsigned __int16 *)(result + 16);
    uint64_t v7 = (unsigned __int8 *)(result + 43);
    while (1)
    {
      uint64_t v8 = *v7;
      BOOL v9 = __OFADD__(v5, v8);
      v5 += v8;
      if (v9) {
        break;
      }
      uint64_t v10 = *(v7 - 1);
      BOOL v9 = __OFADD__(v4, v10);
      v4 += v10;
      if (v9) {
        goto LABEL_12;
      }
      uint64_t v11 = *(v7 - 2);
      BOOL v9 = __OFADD__(v3, v11);
      v3 += v11;
      if (v9) {
        goto LABEL_13;
      }
      uint64_t v12 = *(v7 - 3);
      BOOL v9 = __OFADD__(v2, v12);
      v2 += v12;
      if (v9) {
        goto LABEL_14;
      }
      v7 += 24;
      v6 -= 24;
      if (!v6) {
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
  }
  else
  {
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = 0;
LABEL_10:
    *a2 = result;
    a2[1] = v5;
    a2[2] = v4;
    a2[3] = v3;
    a2[4] = v2;
  }
  return result;
}

uint64_t sub_24A4CBE04@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (*(_WORD *)(result + 16))
  {
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = (void *)(result + 56);
    uint64_t v7 = 40 * *(unsigned __int16 *)(result + 16);
    while (1)
    {
      uint64_t v8 = *(v6 - 3);
      BOOL v9 = __OFADD__(v5, v8);
      v5 += v8;
      if (v9) {
        break;
      }
      uint64_t v10 = *(v6 - 2);
      BOOL v9 = __OFADD__(v4, v10);
      v4 += v10;
      if (v9) {
        goto LABEL_12;
      }
      uint64_t v11 = *(v6 - 1);
      BOOL v9 = __OFADD__(v3, v11);
      v3 += v11;
      if (v9) {
        goto LABEL_13;
      }
      BOOL v9 = __OFADD__(v2, *v6);
      v2 += *v6;
      if (v9) {
        goto LABEL_14;
      }
      v6 += 5;
      v7 -= 40;
      if (!v7) {
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
  }
  else
  {
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = 0;
LABEL_10:
    *a2 = result;
    a2[1] = v5;
    a2[2] = v4;
    a2[3] = v3;
    a2[4] = v2;
  }
  return result;
}

Swift::Void __swiftcall _HashNode.dump(iterationOrder:limit:firstPrefix:restPrefix:depth:)(Swift::Bool iterationOrder, Swift::Int limit, Swift::String firstPrefix, Swift::String restPrefix, Swift::Int depth)
{
  uint64_t v6 = v5;
  object = restPrefix._object;
  uint64_t countAndFlagsBits = restPrefix._countAndFlagsBits;
  uint64_t v12 = nullsub_1(v5 + 16, v5 + 32, v16, v17, v18);
  sub_24A4CBF40(v12, v13, iterationOrder, limit, v6, v15, firstPrefix._countAndFlagsBits, firstPrefix._object, countAndFlagsBits, object, depth);
}

uint64_t sub_24A4CBF40(uint64_t a1, uint64_t a2, Swift::Bool a3, Swift::Int a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, void *a10, Swift::Int depth)
{
  v16._object = a8;
  v16._uint64_t countAndFlagsBits = a7;
  sub_24A5BC430();
  sub_24A5BB6F0();
  swift_bridgeObjectRelease();
  sub_24A5BB6F0();
  v13._uint64_t countAndFlagsBits = 0x203A746E756F63;
  v13._object = (void *)0xE700000000000000;
  v14._uint64_t countAndFlagsBits = a9;
  v14._object = a10;
  _HashNode.UnsafeHandle.dump(iterationOrder:limit:extra:firstPrefix:restPrefix:depth:)(a3, a4, v13, v16, v14, depth);
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall _HashNode.UnsafeHandle.dump(iterationOrder:limit:extra:firstPrefix:restPrefix:depth:)(Swift::Bool iterationOrder, Swift::Int limit, Swift::String extra, Swift::String firstPrefix, Swift::String restPrefix, Swift::Int depth)
{
  object = firstPrefix._object;
  uint64_t v8 = v41;
  if (iterationOrder)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (!depth)
    {
      sub_24A5BB6F0();
      sub_24A5BB6F0();
    }
    sub_24A5BB6F0();
    uint64_t countAndFlagsBits = firstPrefix._countAndFlagsBits;
    object = firstPrefix._object;
  }
  else
  {
    uint64_t countAndFlagsBits = firstPrefix._countAndFlagsBits;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  __swift_instantiateConcreteTypeFromMangledName(qword_26979B058);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_24A5BDAE0;
  sub_24A5BC070();
  swift_bridgeObjectRelease();
  sub_24A5BB6F0();
  swift_bridgeObjectRelease();
  sub_24A5BB6F0();
  sub_24A49A24C();
  sub_24A5BB7F0();
  sub_24A5BB6F0();
  swift_bridgeObjectRelease();
  sub_24A5BB6F0();
  swift_bridgeObjectRelease();
  sub_24A5BB6F0();
  if ((v41[1] & *v41) != 0)
  {
    sub_24A5BB7F0();
    uint64_t v11 = sub_24A5BB660();
    if (__OFSUB__(13, v11)) {
      goto LABEL_46;
    }
    MEMORY[0x24C5C6AF0](48, 0xE100000000000000, (13 - v11) & ~((13 - v11) >> 63));
    swift_bridgeObjectRetain();
    sub_24A5BB6F0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&qword_26979B178);
    sub_24A4CD1E8();
    sub_24A5BB810();
    sub_24A5BB6F0();
    swift_bridgeObjectRelease();
    sub_24A5BB6F0();
  }
  sub_24A5BB6F0();
  swift_bridgeObjectRelease();
  sub_24A5BB6F0();
  sub_24A5BB6F0();
  sub_24A5BC430();
  sub_24A5BB6F0();
  swift_bridgeObjectRelease();
  sub_24A5BB6F0();
  sub_24A5BC430();
  sub_24A5BB6F0();
  swift_bridgeObjectRelease();
  sub_24A5BB6F0();
  *(void *)(v10 + 56) = MEMORY[0x263F8D310];
  *(void *)(v10 + 32) = countAndFlagsBits;
  *(void *)(v10 + 40) = object;
  sub_24A5BC600();
  swift_bridgeObjectRelease();
  Swift::Int limita = limit - 1;
  if (limit < 1) {
    goto LABEL_33;
  }
  int v14 = *v41;
  __int32 v13 = v41[1];
  if (iterationOrder)
  {
    v12.i32[0] = *v41;
    int8x8_t v15 = vcnt_s8(v12);
    v15.i16[0] = vaddlv_u8((uint8x8_t)v15);
    if (v14 == v13) {
      __int32 v16 = *v41;
    }
    else {
      __int32 v16 = v15.i32[0];
    }
    if (v16)
    {
      uint64_t v17 = 0;
      do
      {
        uint64_t v18 = swift_allocObject();
        *(_OWORD *)(v18 + 16) = xmmword_24A5BDAE0;
        swift_bridgeObjectRetain();
        sub_24A5BB6F0();
        swift_bridgeObjectRelease();
        sub_24A5BB6F0();
        sub_24A5BC430();
        sub_24A5BB6F0();
        swift_bridgeObjectRelease();
        sub_24A5BB6F0();
        sub_24A4CCF50(v17, (uint64_t)v41, v42, v43, v44, v45);
        sub_24A5BB6F0();
        swift_bridgeObjectRelease();
        *(void *)(v18 + 56) = MEMORY[0x263F8D310];
        *(void *)(v18 + 32) = 8224;
        *(void *)(v18 + 40) = 0xE200000000000000;
        sub_24A5BC600();
        swift_bridgeObjectRelease();
        uint64_t v17 = (v17 + 1);
      }
      while (v16 != v17);
      int v14 = *v41;
      __int32 v13 = v41[1];
    }
    if (v14 != v13 && v13)
    {
      if (__OFADD__(depth, 1)) {
        goto LABEL_47;
      }
      uint64_t v19 = 0;
      v15.i32[0] = v13;
      uint8x8_t v20 = (uint8x8_t)vcnt_s8(v15);
      v20.i16[0] = vaddlv_u8(v20);
      int v21 = v20.i32[0];
      if (v20.i32[0] <= 1u) {
        int v21 = 1;
      }
      int v35 = v21;
      do
      {
        int v37 = v19 + 1;
        _HashNode.UnsafeHandle.subscript.unsafeAddressor(v19, v41, v42, v43, v44, v45);
        swift_retain();
        swift_bridgeObjectRetain();
        sub_24A5BB6F0();
        swift_bridgeObjectRelease();
        sub_24A5BB6F0();
        sub_24A5BC430();
        sub_24A5BB6F0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_24A5BB6F0();
        swift_bridgeObjectRelease();
        sub_24A5BB6F0();
        sub_24A5BC430();
        sub_24A5BB6F0();
        swift_bridgeObjectRelease();
        v22._uint64_t countAndFlagsBits = 8224;
        v23._uint64_t countAndFlagsBits = 8224;
        v23._object = (void *)0xE200000000000000;
        v22._object = (void *)0xE200000000000000;
        _HashNode.dump(iterationOrder:limit:firstPrefix:restPrefix:depth:)(1, limita, v23, v22, depth + 1);
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v19 = (v19 + 1);
      }
      while (v35 != v37);
    }
    goto LABEL_33;
  }
  if ((v13 & v14) != 0)
  {
    v12.i32[0] = *v41;
    uint8x8_t v24 = (uint8x8_t)vcnt_s8(v12);
    v24.i16[0] = vaddlv_u8(v24);
    if (v14 == v13) {
      __int32 v25 = *v41;
    }
    else {
      __int32 v25 = v24.i32[0];
    }
    if (v25)
    {
      uint64_t v26 = 0;
      do
      {
        int v27 = v26 + 1;
        uint64_t v28 = swift_allocObject();
        *(_OWORD *)(v28 + 16) = xmmword_24A5BDAE0;
        swift_bridgeObjectRetain();
        sub_24A5BB6F0();
        sub_24A5BC430();
        sub_24A5BB6F0();
        swift_bridgeObjectRelease();
        sub_24A5BB6F0();
        sub_24A4CCF50(v26, (uint64_t)v41, v42, v43, v44, v45);
        sub_24A5BB6F0();
        swift_bridgeObjectRelease();
        *(void *)(v28 + 56) = MEMORY[0x263F8D310];
        *(Swift::String *)(v28 + 32) = restPrefix;
        sub_24A5BC600();
        swift_bridgeObjectRelease();
        uint64_t v26 = (v26 + 1);
      }
      while (v25 != v27);
    }
LABEL_33:
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  BOOL v32 = __OFADD__(depth, 1);
  BOOL v34 = v32;
  while (1)
  {
    sub_24A5BB7F0();
    sub_24A5BB6F0();
    swift_bridgeObjectRelease();
    if ((*v8 & (1 << v31)) == 0) {
      break;
    }
    uint64_t v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_24A5BDAE0;
    swift_bridgeObjectRetain();
    sub_24A5BB6F0();
    sub_24A5BB6F0();
    swift_bridgeObjectRelease();
    sub_24A5BB6F0();
    sub_24A4CCF50(v30, (uint64_t)v8, v42, v43, v44, v45);
    sub_24A5BB6F0();
    swift_bridgeObjectRelease();
    *(void *)(v33 + 56) = MEMORY[0x263F8D310];
    *(Swift::String *)(v33 + 32) = restPrefix;
    sub_24A5BC600();
    swift_bridgeObjectRelease();
    uint64_t v30 = (v30 + 1);
LABEL_39:
    ++v31;
    uint64_t v8 = v41;
    if (v31 == 32) {
      goto LABEL_33;
    }
  }
  if ((v8[1] & (1 << v31)) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_39;
  }
  _HashNode.UnsafeHandle.subscript.unsafeAddressor(v29, v8, v42, v43, v44, v45);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_24A5BB6F0();
  sub_24A5BB6F0();
  swift_bridgeObjectRelease();
  sub_24A5BB6F0();
  swift_bridgeObjectRetain();
  sub_24A5BB6F0();
  if (!v34)
  {
    _HashNode.dump(iterationOrder:limit:firstPrefix:restPrefix:depth:)(0, limita, restPrefix, restPrefix, depth + 1);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v29 = (v29 + 1);
    uint64_t v30 = v30;
    goto LABEL_39;
  }
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
}

Swift::Void __swiftcall _HashNode.Storage.dump(iterationOrder:)(Swift::Bool iterationOrder)
{
  nullsub_1(v1 + 2, v1 + 4, *(void *)(*v1 + class metadata base offset for _HashNode.Storage), *(void *)(*v1 + class metadata base offset for _HashNode.Storage + 8), *(void *)(*v1 + class metadata base offset for _HashNode.Storage + 16));
  v3._uint64_t countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  v4._uint64_t countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v5._uint64_t countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  _HashNode.UnsafeHandle.dump(iterationOrder:limit:extra:firstPrefix:restPrefix:depth:)(iterationOrder, 0x7FFFFFFFFFFFFFFFLL, v3, v4, v5, 0);
}

uint64_t sub_24A4CCBAC(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v33 = a2;
  uint64_t v34 = a5;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v30 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v9);
  int v14 = (char *)&v29 - v13;
  uint64_t v16 = *(void *)(a3 - 8);
  uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
  uint64_t v31 = (char *)&v29 + *(int *)(v12 + 48) - v13;
  int8x8_t v15 = v31;
  BOOL v32 = v17;
  v17((char *)&v29 - v13, a1, a3);
  uint64_t v18 = a4;
  uint64_t v19 = *(void *)(a4 - 8);
  uint8x8_t v20 = *(void (**)(char *, uint64_t))(v19 + 16);
  int v21 = v15;
  uint64_t v22 = v18;
  v20(v21, v33);
  uint64_t v33 = TupleTypeMetadata2;
  Swift::String v23 = &v11[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v29 = v14;
  v32(v11, v14, a3);
  ((void (*)(char *, char *, uint64_t))v20)(v23, v31, v22);
  uint64_t v24 = sub_24A5B85E4();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v11, a3);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v23, v22);
  uint64_t v35 = v24;
  sub_24A49A24C();
  sub_24A5BB7F0();
  uint64_t result = sub_24A5BB660();
  if (__OFSUB__(13, result))
  {
    __break(1u);
  }
  else
  {
    uint64_t v35 = MEMORY[0x24C5C6AF0](48, 0xE100000000000000, (13 - result) & ~((13 - result) >> 63));
    unint64_t v36 = v26;
    swift_bridgeObjectRetain();
    sub_24A5BB6F0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&qword_26979B178);
    sub_24A4CD1E8();
    sub_24A5BB810();
    uint64_t v35 = 0;
    unint64_t v36 = 0xE000000000000000;
    sub_24A5BC070();
    sub_24A5BB6F0();
    sub_24A5BB6F0();
    swift_bridgeObjectRelease();
    sub_24A5BB6F0();
    int v27 = v29;
    sub_24A5BC4D0();
    sub_24A5BB6F0();
    sub_24A5BC4D0();
    uint64_t v28 = v35;
    (*(void (**)(char *, uint64_t))(v30 + 8))(v27, v33);
    return v28;
  }
  return result;
}

uint64_t sub_24A4CCF50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v33 = a6;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v34 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v35 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v28 - v16;
  uint64_t v31 = (char *)&v28 + *(int *)(v15 + 48) - v16;
  uint64_t v18 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(a1, a2, a3, a4, a5, a6);
  uint64_t v19 = TupleTypeMetadata2;
  uint64_t v29 = v18 + *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v30 = TupleTypeMetadata2;
  uint64_t v32 = *(void *)(a4 - 8);
  uint8x8_t v20 = *(void (**)(void))(v32 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v20)(v17, v18, a4);
  uint64_t v21 = *(void *)(a5 - 8);
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  Swift::String v23 = v31;
  v22(v31, v29, a5);
  uint64_t v24 = &v35[*(int *)(v19 + 48)];
  v20();
  v22(v24, (uint64_t)v23, a5);
  __int32 v25 = v35;
  uint64_t v26 = sub_24A4CCBAC(v35, (uint64_t)v24, a4, a5, v33);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v17, v30);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v24, a5);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v25, a4);
  return v26;
}

unint64_t sub_24A4CD1E8()
{
  unint64_t result = qword_26979B180;
  if (!qword_26979B180)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26979B178);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979B180);
  }
  return result;
}

uint64_t Rope.append(_:)(uint64_t a1, uint64_t a2)
{
  return sub_24A4CDFD8(a1, a2, (void (*)(void))sub_24A4CF3B8);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, uint64_t, uint64_t);
  unsigned int (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t **v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t, uint64_t);
  uint64_t v47;
  char *v48;
  char *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t, uint64_t);
  void (*v54)(char *, uint64_t);
  char *v55;
  void *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t **v61;
  unsigned int (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  uint64_t v70 = a1;
  Swift::String v4 = *(void *)(a2 + 16);
  Swift::String v3 = *(void *)(a2 + 24);
  Swift::String v5 = type metadata accessor for Rope._Node();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v58 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v57 = (char *)&v53 - v10;
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v60 = (char *)&v53 - v12;
  uint64_t v71 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v66 = (uint64_t)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = v3;
  uint64_t v14 = type metadata accessor for Rope._Item();
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  uint64_t v64 = (uint64_t)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v63 = (uint64_t)&v53 - v17;
  uint64_t v18 = sub_24A5BBD20();
  uint64_t v19 = *(void *)(v18 - 8);
  uint8x8_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v55 = (char *)&v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  long long v56 = (void (**)(char *, uint64_t, uint64_t))((char *)&v53 - v23);
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  uint64_t v59 = (uint64_t)&v53 - v25;
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  int v61 = (uint64_t **)((char *)&v53 - v27);
  MEMORY[0x270FA5388](v26);
  uint64_t v29 = (char *)&v53 - v28;
  Rope._invalidateIndices()();
  uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  uint64_t v68 = v2;
  uint64_t v53 = v30;
  v30(v29, v2, v18);
  uint64_t v65 = v6;
  uint64_t v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  uint64_t v67 = v5;
  uint64_t v62 = v31;
  LODWORD(v5) = v31((uint64_t)v29, 1, v5);
  uint64_t v32 = v70;
  uint64_t v54 = *(void (**)(char *, uint64_t))(v19 + 8);
  v54(v29, v18);
  uint64_t v33 = v71;
  uint64_t v34 = v66;
  (*(void (**)(void))(v71 + 16))();
  if (v5 == 1)
  {
    uint64_t v35 = v63;
    unint64_t v36 = v69;
    Rope._Item.init(_:)(v34, v4, v63);
    int v37 = v61;
    static Rope._Node.createLeaf(_:)(v35, v4, v36, v61);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v4);
    (*(void (**)(uint64_t **, void, uint64_t, uint64_t))(v65 + 56))(v37, 0, 1, v67);
    return (*(uint64_t (**)(uint64_t, uint64_t **, uint64_t))(v19 + 40))(v68, v37, v18);
  }
  int v61 = (uint64_t **)v19;
  uint64_t v63 = v18;
  uint64_t v39 = v64;
  Rope._Item.init(_:)(v34, v4, v64);
  char v40 = v67;
  uint64_t v41 = v68;
  uint64_t v42 = v62;
  if (v62(v68, 1, v67) == 1)
  {
    __break(1u);
LABEL_10:
    unint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v54)(v4, v63);
    __break(1u);
    return result;
  }
  uint64_t v43 = v59;
  Rope._Node.append(_:)(v39, v40, v59);
  if (v42(v43, 1, v40) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v32, v4);
    return ((uint64_t (*)(uint64_t, uint64_t))v54)(v43, v63);
  }
  uint64_t v66 = v4;
  uint64_t v44 = v65;
  uint64_t v45 = v43;
  uint64_t v46 = *(void (**)(char *, uint64_t, uint64_t))(v65 + 32);
  v46(v60, v45, v40);
  Swift::String v4 = (uint64_t)v55;
  v53(v55, v41, v63);
  if (v42(v4, 1, v40) == 1) {
    goto LABEL_10;
  }
  uint64_t v47 = (uint64_t)v57;
  v46(v57, v4, v40);
  uint64_t v48 = v58;
  char v49 = v60;
  (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v58, v60, v40);
  uint64_t v50 = v56;
  unsigned __int8 v51 = (uint64_t)v48;
  unsigned __int8 v52 = v66;
  static Rope._Node.createInner(children:_:)(v47, v51, v66, v69, v56);
  (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v70, v52);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v49, v40);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v44 + 56))(v50, 0, 1, v40);
  return ((uint64_t (*)(uint64_t, void *, uint64_t))v61[5])(v41, v50, v63);
}

uint64_t static Rope.join(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v139 = a5;
  uint64_t v9 = type metadata accessor for Rope._Node();
  uint64_t v10 = sub_24A5BBD20();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v134 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v123 = (char *)v112 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v128 = (uint64_t)v112 - v15;
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  unint64_t v122 = (char *)v112 - v17;
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v126 = (uint64_t)v112 - v19;
  uint64_t v136 = v10;
  uint64_t v135 = *(void *)(v10 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v129 = (char *)v112 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v24 = (char *)v112 - v23;
  uint64_t v25 = MEMORY[0x270FA5388](v22);
  int v27 = (char *)v112 - v26;
  uint64_t v130 = v9;
  uint64_t v137 = *(void *)(v9 - 8);
  uint64_t v28 = MEMORY[0x270FA5388](v25);
  uint64_t v121 = (char *)v112 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = MEMORY[0x270FA5388](v28);
  uint64_t v125 = (char *)v112 - v31;
  uint64_t v32 = MEMORY[0x270FA5388](v30);
  unsigned int v124 = (char *)v112 - v33;
  uint64_t v34 = MEMORY[0x270FA5388](v32);
  unint64_t v36 = (char *)v112 - v35;
  uint64_t v37 = MEMORY[0x270FA5388](v34);
  unint64_t v120 = (char *)v112 - v38;
  uint64_t v39 = MEMORY[0x270FA5388](v37);
  unint64_t v138 = (char *)v112 - v40;
  MEMORY[0x270FA5388](v39);
  uint64_t v42 = (char *)v112 - v41;
  uint64_t v131 = a3;
  uint64_t v132 = a4;
  uint64_t v43 = type metadata accessor for Rope();
  if ((Rope.isEmpty.getter() & 1) == 0)
  {
    uint64_t v133 = a2;
    if (Rope.isEmpty.getter())
    {
      unint64_t v138 = *(char **)(v43 - 8);
      (*((void (**)(uint64_t, uint64_t))v138 + 1))(a1, v43);
      uint64_t v44 = v139;
      uint64_t v45 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))*((void *)v138 + 4);
      uint64_t v46 = v133;
      goto LABEL_5;
    }
    uint64_t v116 = v43;
    uint64_t v113 = v36;
    uint64_t v119 = TupleTypeMetadata2;
    uint64_t v48 = *(void (**)(char *, uint64_t, uint64_t))(v135 + 16);
    uint64_t v117 = a1;
    uint64_t v49 = v136;
    v48(v27, a1, v136);
    uint64_t v50 = v137;
    unsigned __int8 v51 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v137 + 48);
    uint64_t v52 = v130;
    if (v51(v27, 1, v130) == 1)
    {
      (*(void (**)(char *, uint64_t))(v135 + 8))(v27, v49);
      __break(1u);
    }
    else
    {
      uint64_t v54 = *(void (**)(char *, char *, uint64_t))(v50 + 32);
      uint64_t v53 = v50 + 32;
      uint64_t v55 = v27;
      long long v56 = v54;
      v54(v42, v55, v52);
      uint8x8_t v115 = v48;
      v48(v24, v133, v49);
      int v57 = v51(v24, 1, v52);
      uint64_t v58 = (uint64_t *)v138;
      if (v57 != 1)
      {
        v112[1] = v53;
        v112[0] = v56;
        v56(v138, v24, v52);
        uint64x2_t v118 = v42;
        unsigned int v59 = (Rope._Node.header.getter() >> 16);
        int v60 = Rope._Node.header.getter();
        uint64_t v61 = *(int *)(v119 + 48);
        uint64_t v62 = AssociatedTypeWitness;
        uint64_t v114 = AssociatedTypeWitness - 8;
        uint64_t v63 = v128;
        if (v59 >= BYTE2(v60))
        {
          uint64_t v73 = v126;
          uint64_t v81 = v126 + v61;
          Rope._Node._graftBack(_:)(v126, v126 + v61, v58, v52);
          uint64_t v82 = v122;
          uint64_t v83 = &v122[*(int *)(v119 + 48)];
          uint64_t v84 = v136;
          v115(v122, v73, v136);
          uint64_t v85 = *(void *)(v62 - 8);
          (*(void (**)(char *, uint64_t, uint64_t))(v85 + 16))(v83, v81, v62);
          if (v51(v82, 1, v52) == 1)
          {
            (*(void (**)(char *, uint64_t))(v85 + 8))(v83, v62);
            (*(void (**)(char *, uint64_t))(v135 + 8))(v82, v84);
            uint64_t v86 = v137;
            uint64_t v87 = (uint64_t)v129;
            uint64_t v88 = (uint64_t)v118;
            (*(void (**)(char *, char *, uint64_t))(v137 + 16))(v129, v118, v52);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v86 + 56))(v87, 0, 1, v52);
            Rope.init(root:)(v87, v139);
            uint64_t v89 = v73;
            uint64_t v90 = v116;
            unint64_t v91 = *(void (**)(uint64_t, uint64_t))(*(void *)(v116 - 8) + 8);
            v91(v133, v116);
            v91(v117, v90);
            (*(void (**)(uint64_t, uint64_t))(v134 + 8))(v89, v119);
            uint64_t v80 = *(void (**)(char *, uint64_t))(v86 + 8);
            v80(v138, v52);
            uint64_t v92 = v88;
            return ((uint64_t (*)(uint64_t, uint64_t))v80)(v92, v52);
          }
          unsigned int v103 = v120;
          ((void (*)(char *, char *, uint64_t))v112[0])(v120, v82, v52);
          (*(void (**)(char *, uint64_t))(v85 + 8))(v83, v62);
          uint64_t v104 = v137;
          uint64_t v105 = *(void (**)(char *, char *, uint64_t))(v137 + 16);
          uint64_t v106 = (uint64_t)v124;
          v105(v124, v118, v52);
          uint64_t v107 = (uint64_t)v125;
          v105(v125, v103, v52);
          uint64_t v108 = v113;
          static Rope._Node.createInner(children:_:)(v106, v107, v131, v132, v113);
          uint64_t v109 = (uint64_t)v129;
          v105(v129, v108, v52);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v104 + 56))(v109, 0, 1, v52);
          Rope.init(root:)(v109, v139);
          uint64_t v110 = v116;
          uint64_t v111 = *(void (**)(uint64_t, uint64_t))(*(void *)(v116 - 8) + 8);
          v111(v133, v116);
          v111(v117, v110);
          uint64_t v80 = *(void (**)(char *, uint64_t))(v104 + 8);
          v80(v108, v52);
          uint64_t v102 = v103;
        }
        else
        {
          uint64_t v64 = v52;
          uint64_t v65 = v128 + v61;
          Rope._Node._graftFront(_:)(v128, v128 + v61, (uint64_t)v118, v64);
          uint64_t v66 = v123;
          uint64_t v67 = &v123[*(int *)(v119 + 48)];
          uint64_t v68 = v136;
          v115(v123, v63, v136);
          uint64_t v69 = v51;
          uint64_t v70 = *(void *)(v62 - 8);
          uint64_t v71 = v65;
          uint64_t v52 = v64;
          (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v67, v71, v62);
          int v72 = v69(v66, 1, v64);
          uint64_t v73 = v63;
          if (v72 == 1)
          {
            (*(void (**)(char *, uint64_t))(v70 + 8))(v67, v62);
            (*(void (**)(char *, uint64_t))(v135 + 8))(v66, v68);
            uint64_t v74 = v137;
            uint64_t v75 = v138;
            uint64_t v76 = (uint64_t)v129;
            (*(void (**)(char *, char *, uint64_t))(v137 + 16))(v129, v138, v64);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v74 + 56))(v76, 0, 1, v64);
            Rope.init(root:)(v76, v139);
            uint64_t v77 = v73;
            uint64_t v78 = v116;
            uint64_t v79 = *(void (**)(uint64_t, uint64_t))(*(void *)(v116 - 8) + 8);
            v79(v133, v116);
            v79(v117, v78);
            (*(void (**)(uint64_t, uint64_t))(v134 + 8))(v77, v119);
            uint64_t v80 = *(void (**)(char *, uint64_t))(v74 + 8);
            v80(v75, v52);
LABEL_18:
            uint64_t v92 = (uint64_t)v118;
            return ((uint64_t (*)(uint64_t, uint64_t))v80)(v92, v52);
          }
          uint64_t v93 = v121;
          ((void (*)(char *, char *, uint64_t))v112[0])(v121, v66, v64);
          (*(void (**)(char *, uint64_t))(v70 + 8))(v67, v62);
          uint64_t v94 = v137;
          int v95 = *(void (**)(char *, char *, uint64_t))(v137 + 16);
          uint64_t v96 = (uint64_t)v124;
          v95(v124, v93, v52);
          uint64_t v97 = (uint64_t)v125;
          v95(v125, v138, v52);
          unint64_t v98 = v113;
          static Rope._Node.createInner(children:_:)(v96, v97, v131, v132, v113);
          uint64_t v99 = (uint64_t)v129;
          v95(v129, v98, v52);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v94 + 56))(v99, 0, 1, v52);
          Rope.init(root:)(v99, v139);
          uint64_t v100 = v116;
          unsigned int v101 = *(void (**)(uint64_t, uint64_t))(*(void *)(v116 - 8) + 8);
          v101(v133, v116);
          v101(v117, v100);
          uint64_t v80 = *(void (**)(char *, uint64_t))(v94 + 8);
          v80(v98, v52);
          uint64_t v102 = v93;
        }
        v80(v102, v52);
        (*(void (**)(uint64_t, uint64_t))(v134 + 8))(v73, v119);
        v80(v138, v52);
        goto LABEL_18;
      }
    }
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v135 + 8))(v24, v136);
    __break(1u);
    return result;
  }
  unint64_t v138 = *(char **)(v43 - 8);
  (*((void (**)(uint64_t, uint64_t))v138 + 1))(a2, v43);
  uint64_t v44 = v139;
  uint64_t v45 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))*((void *)v138 + 4);
  uint64_t v46 = a1;
LABEL_5:
  return v45(v44, v46, v43);
}

uint64_t Rope.prepend(_:)(uint64_t a1, uint64_t a2)
{
  return sub_24A4CDFD8(a1, a2, (void (*)(void))sub_24A4CF680);
}

{
  uint64_t (*v4)(uint64_t);
  uint64_t vars8;

  sub_24A57F85C(a1, a2);
  Swift::String v4 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8);
  return v4(a1);
}

uint64_t sub_24A4CDFD8(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3();
  Swift::String v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8);
  return v5(a1, a2);
}

uint64_t Rope._append(_:)(uint64_t a1, uint64_t a2)
{
  sub_24A4CF4CC(a1, a2);
  uint64_t v3 = type metadata accessor for Rope._Node();
  Swift::String v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  return v4(a1, v3);
}

uint64_t Rope._prepend(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Rope._Node();
  uint64_t v5 = sub_24A5BBD20();
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  uint64_t v8 = (char *)&v14 - v7;
  uint64_t v9 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v8, a1, v4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v8, 0, 1, v4);
  Rope.init(root:)((uint64_t)v8, (uint64_t)v11);
  sub_24A4CF680((uint64_t)v11, a2);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(a1, v4);
}

uint64_t Rope._Node._graftBack(_:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v74 = a1;
  uint64_t v75 = a2;
  uint64_t v79 = *(void *)(a4 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](a1);
  uint64_t v67 = (uint64_t)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v68 = (char *)&v66 - v10;
  uint64_t v11 = sub_24A5BBD20();
  uint64_t v12 = *(void *)(a4 + 24);
  uint64_t v13 = *(void *)(a4 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v15 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v17 = (char *)&v66 - v16;
  uint64_t v76 = AssociatedTypeWitness;
  uint64_t v78 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v20 = (char *)&v66 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x270FA5388](v18);
  uint64_t v70 = (char *)&v66 - v22;
  uint64_t v72 = v11;
  uint64_t v71 = *(void *)(v11 - 8);
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  uint64_t v73 = (char *)&v66 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  uint64_t v26 = (char *)&v66 - v25;
  Rope._Node.ensureUnique()();
  Rope._Node.ensureUnique()();
  uint64_t v77 = v5;
  LODWORD(v5) = Rope._Node.header.getter() >> 16;
  uint64_t v27 = (uint64_t)a3;
  if ((Rope._Node.header.getter() >> 16) >= v5)
  {
    uint64_t v73 = (char *)v12;
    uint64_t v48 = v78;
    uint64_t v49 = v79;
    uint64_t v50 = v76;
    (*(void (**)(char *, char *, uint64_t))(v78 + 16))(v20, &v77[*(int *)(a4 + 36)], v76);
    if (Rope._Node.rebalance(nextNeighbor:)(a3))
    {
      uint64_t v51 = 1;
      uint64_t v53 = v74;
      uint64_t v52 = v75;
    }
    else
    {
      uint64_t v53 = v74;
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(v49 + 16))(v74, a3, a4);
      uint64_t v51 = 0;
      uint64_t v52 = v75;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v49 + 56))(v53, v51, 1, a4);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    RopeSummary.subtracting(_:)((uint64_t)v20, v50, AssociatedConformanceWitness, v52);
    return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v20, v50);
  }
  else
  {
    uint64_t v28 = *(void *)v77;
    unint64_t v29 = *(void *)v77 + ((*(unsigned __int8 *)(v79 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80));
    swift_getWitnessTable();
    uint64_t v30 = (unsigned __int16 *)nullsub_1(v28 + 16, v29, v13, a4, v12);
    uint64_t v32 = v31;
    uint64_t v33 = (uint64_t)&v17[*(int *)(TupleTypeMetadata2 + 48)];
    swift_unknownObjectRetain();
    sub_24A4CF2B4((uint64_t)v17, v33, v30, v32, v27, v13, v12);
    swift_unknownObjectRelease();
    uint64_t v35 = v71;
    uint64_t v34 = v72;
    (*(void (**)(char *, char *, uint64_t))(v71 + 32))(v26, v17, v72);
    unint64_t v36 = *(void (**)(char *, uint64_t, uint64_t))(v78 + 32);
    uint64_t v37 = v70;
    uint64_t v38 = v33;
    uint64_t v39 = v76;
    v78 += 32;
    TupleTypeMetadata2 = (uint64_t)v36;
    v36(v70, v38, v76);
    uint64_t v40 = swift_getAssociatedConformanceWitness();
    uint64_t v41 = v39;
    uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t))(v40 + 48);
    v42(v37, v41, v40);
    uint64_t v43 = v73;
    (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v73, v26, v34);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v79 + 48))(v43, 1, a4) == 1)
    {
      uint64_t v44 = *(void (**)(char *, uint64_t))(v35 + 8);
      v44(v26, v34);
      v44(v73, v34);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v79 + 56))(v74, 1, 1, a4);
      uint64_t v45 = v75;
      uint64_t v46 = v76;
      uint64_t v47 = v37;
    }
    else
    {
      uint64_t v54 = (void (*)(uint64_t, uint64_t, uint64_t))v42;
      uint64_t v66 = v26;
      uint64_t v55 = v76;
      long long v56 = *(void (**)(char *, char *, uint64_t))(v79 + 32);
      uint64_t v57 = (uint64_t)v68;
      v56(v68, v73, a4);
      if (Rope._Node.isFull.getter())
      {
        unsigned __int16 v58 = Rope._Node.header.getter();
        uint64_t v59 = v67;
        Rope._Node.split(keeping:)(v58 >> 1, a4, v67);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 56))(v59 + *(int *)(a4 + 36), v55, v40);
        sub_24A501CD0(v57, a4);
        uint64_t v60 = v79;
        (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v57, a4);
        (*(void (**)(char *, uint64_t))(v71 + 8))(v66, v72);
        uint64_t v61 = (void (*)(uint64_t, uint64_t, uint64_t))v56;
        uint64_t v62 = v74;
        v61(v74, v59, a4);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v60 + 56))(v62, 0, 1, a4);
      }
      else
      {
        v54(v57 + *(int *)(a4 + 36), v55, v40);
        sub_24A501CD0(v57, a4);
        uint64_t v65 = v79;
        (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v57, a4);
        (*(void (**)(char *, uint64_t))(v71 + 8))(v66, v72);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v65 + 56))(v74, 1, 1, a4);
      }
      uint64_t v45 = v75;
      uint64_t v47 = v37;
      uint64_t v46 = v55;
    }
    return ((uint64_t (*)(uint64_t, char *, uint64_t))TupleTypeMetadata2)(v45, v47, v46);
  }
}

uint64_t Rope._Node._graftFront(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v72 = a1;
  uint64_t v73 = a2;
  uint64_t v76 = *(void *)(a4 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](a1);
  uint64_t v66 = (uint64_t)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v67 = (char *)&v65 - v10;
  uint64_t v11 = sub_24A5BBD20();
  uint64_t v12 = *(void *)(a4 + 16);
  uint64_t v74 = *(void *)(a4 + 24);
  uint64_t v13 = v12;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v16 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v18 = (char *)&v65 - v17;
  uint64_t v78 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  uint64_t v21 = (char *)&v65 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x270FA5388](v19);
  uint64_t v70 = v11;
  uint64_t v71 = (char *)&v65 - v23;
  uint64_t v75 = *(void *)(v11 - 8);
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  uint64_t v68 = (char *)&v65 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v69 = (char *)&v65 - v26;
  Rope._Node.ensureUnique()();
  Rope._Node.ensureUnique()();
  uint64_t v77 = v5;
  LODWORD(v5) = Rope._Node.header.getter() >> 16;
  uint64_t v27 = a3;
  if ((Rope._Node.header.getter() >> 16) >= v5)
  {
    uint64_t v45 = v76;
    uint64_t v46 = a3 + *(int *)(a4 + 36);
    uint64_t v47 = v78;
    (*(void (**)(char *, uint64_t, uint64_t))(v78 + 16))(v21, v46, AssociatedTypeWitness);
    if (Rope._Node.rebalance(prevNeighbor:)())
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 56))(v72, 1, 1, a4);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v47 + 32))(v73, v21, AssociatedTypeWitness);
    }
    else
    {
      uint64_t v60 = v45;
      uint64_t v61 = *(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 16);
      uint64_t v62 = v72;
      v61(v72, a3, a4);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v60 + 56))(v62, 0, 1, a4);
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      RopeSummary.subtracting(_:)(v46, AssociatedTypeWitness, AssociatedConformanceWitness, v73);
      return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v21, AssociatedTypeWitness);
    }
  }
  else
  {
    uint64_t v28 = *v77;
    unint64_t v29 = *v77 + ((*(unsigned __int8 *)(v76 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80));
    swift_getWitnessTable();
    uint64_t v30 = v74;
    uint64_t v31 = (unsigned __int16 *)nullsub_1(v28 + 16, v29, v13, a4, v74);
    uint64_t v33 = v32;
    uint64_t v34 = (uint64_t)&v18[*(int *)(TupleTypeMetadata2 + 48)];
    swift_unknownObjectRetain();
    sub_24A4CF200((uint64_t)v18, v34, v31, v33, v27, v13, v30);
    swift_unknownObjectRelease();
    uint64_t v35 = v69;
    uint64_t v36 = v70;
    (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v69, v18, v70);
    uint64_t v37 = v71;
    uint64_t v65 = *(void (**)(char *, uint64_t, uint64_t))(v78 + 32);
    v78 += 32;
    v65(v71, v34, AssociatedTypeWitness);
    uint64_t v38 = swift_getAssociatedConformanceWitness();
    uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v38 + 48);
    v39(v37, AssociatedTypeWitness, v38);
    uint64_t v40 = v75;
    uint64_t v41 = v68;
    (*(void (**)(char *, char *, uint64_t))(v75 + 16))(v68, v35, v36);
    uint64_t v42 = v76;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v41, 1, a4) == 1)
    {
      uint64_t v43 = *(void (**)(char *, uint64_t))(v40 + 8);
      v43(v35, v36);
      v43(v41, v36);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56))(v72, 1, 1, a4);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v65)(v73, v71, AssociatedTypeWitness);
    }
    else
    {
      uint64_t v48 = v38;
      uint64_t v74 = AssociatedTypeWitness;
      uint64_t v49 = v42;
      uint64_t v50 = (uint64_t)v67;
      uint64_t v68 = *(char **)(v42 + 32);
      ((void (*)(char *, char *, uint64_t))v68)(v67, v41, a4);
      BOOL v51 = Rope._Node.isFull.getter();
      uint64_t v52 = v71;
      if (v51)
      {
        unsigned __int16 v53 = Rope._Node.header.getter();
        uint64_t v54 = v66;
        Rope._Node.split(keeping:)(v53 >> 1, a4, v66);
        sub_24A5BC5A0();
        uint64_t v55 = v74;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 56))(v54 + *(int *)(a4 + 36), v74, v48);
        sub_24A501E54(v50, 0, a4);
        (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v50, a4);
        (*(void (**)(char *, uint64_t))(v75 + 8))(v69, v70);
        uint64_t v56 = v72;
        ((void (*)(uint64_t, uint64_t, uint64_t))v68)(v72, v54, a4);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v42 + 56))(v56, 0, 1, a4);
        uint64_t v57 = v73;
        unsigned __int16 v58 = v52;
        uint64_t v59 = v55;
      }
      else
      {
        uint64_t v64 = v74;
        v39((char *)(v50 + *(int *)(a4 + 36)), v74, v38);
        sub_24A501E54(v50, 0, a4);
        (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v50, a4);
        (*(void (**)(char *, uint64_t))(v75 + 8))(v69, v70);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v49 + 56))(v72, 1, 1, a4);
        uint64_t v57 = v73;
        unsigned __int16 v58 = v52;
        uint64_t v59 = v64;
      }
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v65)(v57, v58, v59);
    }
  }
}

uint64_t sub_24A4CF200(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = type metadata accessor for Rope._Node();
  uint64_t WitnessTable = swift_getWitnessTable();
  Rope._UnsafeHandle.mutableChildren.getter(a3, a4, a6, v14, a7, WitnessTable);
  return Rope._Node._graftFront(_:)(a1, a2, a5, v14);
}

uint64_t sub_24A4CF2B4(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = type metadata accessor for Rope._Node();
  uint64_t WitnessTable = swift_getWitnessTable();
  Rope._UnsafeHandle.mutableChildren.getter(a3, a4, a6, v14, a7, WitnessTable);
  uint64_t result = Rope._UnsafeHandle.childCount.getter(a3);
  if (!__OFSUB__(result, 1)) {
    return Rope._Node._graftBack(_:)(a1, a2, a5, v14);
  }
  __break(1u);
  return result;
}

uint64_t sub_24A4CF3B8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v12 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))((char *)&v12 - v9, v2, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, a2);
  return static Rope.join(_:_:)((uint64_t)v10, (uint64_t)v8, *(void *)(a2 + 16), *(void *)(a2 + 24), v2);
}

uint64_t sub_24A4CF4CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Rope._Node();
  uint64_t v5 = sub_24A5BBD20();
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  uint64_t v8 = (char *)&v14 - v7;
  uint64_t v9 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v8, a1, v4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v8, 0, 1, v4);
  Rope.init(root:)((uint64_t)v8, (uint64_t)v11);
  sub_24A4CF3B8((uint64_t)v11, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, a2);
}

uint64_t sub_24A4CF680(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v11 - v8;
  (*(void (**)(char *))(v4 + 16))((char *)&v11 - v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v7, v2, a2);
  return static Rope.join(_:_:)((uint64_t)v9, (uint64_t)v7, *(void *)(a2 + 16), *(void *)(a2 + 24), v2);
}

uint64_t TreeSet.union(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = a4;
  char v11 = _HashNode.union<A>(_:_:)(0, a1, a2, a4, a5, a7, (void *)(MEMORY[0x263F8EE60] + 8), MEMORY[0x263F8EE60] + 8, a8);
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  swift_release();
  if (v11) {
    return TreeSet.init(_new:)(v13, v15, a7, a8);
  }
  swift_retain();
  swift_release();
  return v10;
}

uint64_t TreeSet.union<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = a4;
  char v11 = _HashNode.union<A>(_:_:)(0, a1, a2, a4, a5, a7, (void *)(MEMORY[0x263F8EE60] + 8), a8, a9);
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  swift_release();
  if (v11) {
    return TreeSet.init(_new:)(v13, v15, a7, a9);
  }
  swift_retain();
  swift_release();
  return v10;
}

uint64_t TreeSet.union<A>(_:)(uint64_t a1, void (*a2)(void, void, void), void (**a3)(uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v45 = a4;
  uint64_t v46 = a3;
  uint64_t v44 = a1;
  uint64_t v10 = *(void *)(a5 - 8);
  uint64_t v47 = a2;
  uint64_t v48 = v10;
  MEMORY[0x270FA5388](a1);
  uint64_t v49 = (uint64_t)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_24A5BBD20();
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v39 - v13;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v42 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v16 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v18 = (char *)&v39 - v17;
  uint64_t v19 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v21 = (char *)&v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = a7;
  if (type metadata accessor for TreeSet() == a6)
  {
    uint64_t v36 = v44;
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, v44, a6);
    swift_dynamicCast();
    uint64_t v35 = TreeSet.union(_:)((uint64_t)v50, (uint64_t)v51, v37, (uint64_t)v47, (uint64_t)v46, v45, a5, v43);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v36, a6);
  }
  else
  {
    uint64_t v50 = v47;
    BOOL v51 = v46;
    uint64_t v40 = v19;
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, v44, a6);
    swift_retain();
    sub_24A5BB840();
    uint64_t v41 = a6;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    sub_24A5BBEE0();
    uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v48 + 48);
    int v24 = v23(v14, 1, a5);
    uint64_t v25 = v43;
    uint64_t v26 = AssociatedTypeWitness;
    uint64_t v27 = v49;
    if (v24 != 1)
    {
      uint64_t v47 = *(void (**)(void, void, void))(v48 + 32);
      v48 += 32;
      uint64_t v46 = (void (**)(uint64_t, uint64_t))(v48 - 24);
      uint64_t v45 = MEMORY[0x263F8EE60] + 8;
      do
      {
        v47(v27, v14, a5);
        uint64_t v28 = AssociatedConformanceWitness;
        unint64_t v29 = v18;
        uint64_t v30 = v26;
        uint64_t v31 = sub_24A5B85E4();
        uint64_t v32 = (void *)type metadata accessor for _HashNode();
        unint64_t v33 = v31;
        uint64_t v26 = v30;
        uint64_t v18 = v29;
        uint64_t AssociatedConformanceWitness = v28;
        uint64_t v27 = v49;
        _HashNode.insert(_:_:_:)(0, v49, v34, v33, v32);
        (*v46)(v27, a5);
        sub_24A5BBEE0();
      }
      while (v23(v14, 1, a5) != 1);
    }
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v44, v41);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v18, v26);
    return TreeSet.init(_new:)((uint64_t)v50, (uint64_t)v51, a5, v25);
  }
  return v35;
}

uint64_t _HashNode.removeItem(at:_:)(uint64_t a1, uint64_t a2, char a3, unsigned int a4, void *a5)
{
  uint64_t v11 = a5[2];
  uint64_t v10 = a5[3];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v14 = &v17[-v13];
  uint64_t v18 = v11;
  uint64_t v19 = v10;
  uint64_t v20 = a5[4];
  _HashNode.removeItem<A>(at:_:by:)(a3, a4, (void (*)(unint64_t))sub_24A4D0390, (uint64_t)v17, a5);
  uint64_t v15 = &v14[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, v14, v11);
  return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(*(void *)(v10 - 8) + 32))(a2, v15, v10);
}

uint64_t _HashNode.removeItem(at:)(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  uint64_t v19 = a2;
  uint64_t v9 = a4[2];
  uint64_t v8 = a4[3];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v12 = (char *)&v18 - v11;
  uint64_t v13 = a4[4];
  v14.i32[0] = *(_DWORD *)nullsub_1(*v4 + 16, *v4 + 32, v9, v8, v13) & ~(-1 << a3);
  uint8x8_t v15 = (uint8x8_t)vcnt_s8(v14);
  v15.i16[0] = vaddlv_u8(v15);
  uint64_t v21 = v9;
  uint64_t v22 = v8;
  uint64_t v23 = v13;
  _HashNode.removeItem<A>(at:_:by:)(a3, v15.u32[0], (void (*)(unint64_t))sub_24A4D0390, (uint64_t)v20, a4);
  uint64_t v16 = &v12[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, v12, v9);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v19, v16, v8);
}

uint64_t _HashNode.UnsafeHandle._removeItem<A>(at:by:)(unsigned int a1, void (*a2)(unint64_t), uint64_t a3, unsigned int *a4, uint64_t a5)
{
  uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)*a4);
  v9.i16[0] = vaddlv_u8(v9);
  if (*a4 == a4[1]) {
    uint64_t v10 = *a4;
  }
  else {
    uint64_t v10 = v9.u32[0];
  }
  uint64_t v11 = *(void *)(*(void *)(swift_getTupleTypeMetadata2() - 8) + 72);
  uint64_t v12 = a4[2];
  a4[3] += v11;
  a2(a5 - v11 * v10 + v12 + v11 * (v10 + ~(unint64_t)a1));
  swift_getTupleTypeMetadata2();
  return sub_24A5BBD00();
}

uint64_t _HashNode.UnsafeHandle._removeChild(at:)(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 12) += 16;
  type metadata accessor for _HashNode();
  sub_24A5BBD10();
  sub_24A5BBD00();
  return v3;
}

uint64_t _HashNode.removeItem<A>(at:_:by:)(char a1, unsigned int a2, void (*a3)(unint64_t), uint64_t a4, void *a5)
{
  uint64_t v10 = *v5;
  --v5[1];
  uint64_t v11 = (unsigned int *)nullsub_1(v10 + 16, v10 + 32, a5[2], a5[3], a5[4]);
  return sub_24A4D0394(v11, v12, a2, a3, a4, a1);
}

uint64_t sub_24A4D0394(unsigned int *a1, uint64_t a2, unsigned int a3, void (*a4)(unint64_t), uint64_t a5, char a6)
{
  uint64_t result = _HashNode.UnsafeHandle._removeItem<A>(at:by:)(a3, a4, a5, a1, a2);
  unsigned int v9 = *a1;
  if ((a1[1] & *a1) != 0)
  {
    int v10 = v9 - 1;
    a1[1] = v10;
  }
  else
  {
    int v10 = v9 & ((-1 << a6) - 1);
  }
  *a1 = v10;
  return result;
}

uint64_t _HashNode.removeChild(at:_:)(char a1, uint64_t a2, void *a3)
{
  uint64_t v6 = nullsub_1(*v3 + 16, *v3 + 32, a3[2], a3[3], a3[4]);
  uint64_t result = _HashNode.UnsafeHandle._removeChild(at:)(a2, v6);
  *(_DWORD *)(v6 + 4) &= (-1 << a1) - 1;
  v3[1] -= v8;
  return result;
}

uint64_t _HashNode.removeSingletonItem()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v7 = a3[2];
  uint64_t v8 = a3[3];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v10 = TupleTypeMetadata2 - 8;
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v12 = (char *)&v20 - v11;
  v3[1] = 0;
  uint64_t v13 = *v3 + 16;
  uint64_t v14 = *v3 + 32;
  uint64_t v15 = a3[4];
  uint64_t v16 = (unsigned int *)nullsub_1(v13, v14, v7, v8, v15);
  sub_24A4D0614(v16, v17, v7, v8, v15, (uint64_t)v12);
  uint64_t v18 = &v12[*(int *)(v10 + 56)];
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, v12, v7);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a2, v18, v8);
}

uint64_t sub_24A4D0614@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v13 = TupleTypeMetadata2 - 8;
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v15 = &v19[-v14];
  uint64_t v16 = &v19[*(int *)(v13 + 56) - v14];
  uint64_t v20 = a3;
  uint64_t v21 = a4;
  uint64_t v22 = a5;
  _HashNode.UnsafeHandle._removeItem<A>(at:by:)(0, (void (*)(unint64_t))sub_24A4D0390, (uint64_t)v19, a1, a2);
  _HashNode.UnsafeHandle.clear()();
  uint64_t v17 = a6 + *(int *)(v13 + 56);
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)(a3 - 8) + 32))(a6, v15, a3);
  return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(*(void *)(a4 - 8) + 32))(v17, v16, a4);
}

uint64_t _HashNode.removeSingletonChild()(void *a1)
{
  uint64_t v2 = nullsub_1(*v1 + 16, *v1 + 32, a1[2], a1[3], a1[4]);
  uint64_t result = _HashNode.UnsafeHandle._removeChild(at:)(0, v2);
  *(_DWORD *)(v2 + 4) = 0;
  v1[1] = 0;
  return result;
}

uint64_t sub_24A4D0820()
{
  swift_getTupleTypeMetadata2();
  return sub_24A5BBD10();
}

uint64_t _HashNode.isDisjoint<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result = 1;
  if (a5 && a3)
  {
    if (a4 == a2) {
      return 0;
    }
    if (_HashNode.isCollisionNode.getter(a4, a5, a6, a7, a9))
    {
      uint64_t v18 = a1;
      uint64_t v19 = a2;
      uint64_t v20 = a3;
      uint64_t v21 = a4;
      uint64_t v22 = a5;
      uint64_t v23 = a6;
      uint64_t v24 = a7;
      uint64_t v25 = a8;
    }
    else
    {
      if (!_HashNode.isCollisionNode.getter(a2, a3, a6, a8, a9))
      {
        uint64_t v26 = (_DWORD *)nullsub_1(a4 + 16, a4 + 32, a6, a7, a9);
        sub_24A4D0B44(v26, v27, a2, a3, a1, a6, a7, a8, a9);
        return v28;
      }
      uint64_t v18 = a1;
      uint64_t v19 = a4;
      uint64_t v20 = a5;
      uint64_t v21 = a2;
      uint64_t v22 = a3;
      uint64_t v23 = a6;
      uint64_t v24 = a8;
      uint64_t v25 = a7;
    }
    return _HashNode._isDisjointCollision<A>(_:with:)(v18, v19, v20, v21, v22, v23, v24, v25, a9);
  }
  return result;
}

uint64_t _HashNode._isDisjointCollision<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (_HashNode.isCollisionNode.getter(a2, a3, a6, a8, a9))
  {
    nullsub_1(a4 + 16, a4 + 32, a6, a7, a9);
    uint64_t v17 = v16;
    nullsub_1(a2 + 16, a2 + 32, a6, a8, a9);
    sub_24A4D1288(v18, v17, v23);
    return v23[0];
  }
  else
  {
    unint64_t v20 = ((unint64_t)_HashNode.collisionHash.getter(a4, a5, a6, a7, a9) >> a1) & 0x1F;
    uint64_t v21 = nullsub_1(a2 + 16, a2 + 32, a6, a8, a9);
    sub_24A4D1610(v21, v22, v20, a4, a5, a1, a6, a7, a8, a9);
    return v23[16];
  }
}

_DWORD *sub_24A4D0B44(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15 = nullsub_1(a3 + 16, a3 + 32, a6, a8, a9);
  return sub_24A4D0BEC(v15, v16, a1, a2, a5, a6, a7, a8, a9);
}

_DWORD *sub_24A4D0BEC(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v110 = a2;
  uint64_t v111 = a8;
  uint64_t v108 = a7;
  int v97 = a5;
  uint64_t v113 = a4;
  uint64_t v11 = MEMORY[0x270FA5388](a1);
  uint64_t v105 = (char *)&v94 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (_DWORD *)MEMORY[0x270FA5388](v11);
  uint64_t v106 = (char *)&v94 - v17;
  int v19 = *v18;
  int v20 = v18[1] | *v18;
  int v22 = *result;
  int v21 = result[1];
  uint64_t v109 = result;
  if (((v21 | v22) & v20) == 0)
  {
    char v93 = 1;
    goto LABEL_24;
  }
  uint64_t v96 = v14;
  uint64_t v107 = a9;
  unsigned int v23 = v22 & v19;
  unsigned int v112 = a3;
  uint64_t v95 = v15;
  if ((v22 & v19) != 0)
  {
    uint64_t v24 = (void (**)(char *, uint64_t, uint64_t))(v15 + 16);
    uint64_t v25 = (uint64_t (**)(char *, uint64_t))(v15 + 8);
    uint64_t v27 = v106;
    uint64_t v26 = v107;
    while (1)
    {
      int v28 = -1 << __clz(__rbit32(v23));
      v16.i32[0] = *v112 & ~v28;
      int8x8_t v29 = vcnt_s8(v16);
      v29.i16[0] = vaddlv_u8((uint8x8_t)v29);
      uint64_t v30 = v29.u32[0];
      uint64_t v31 = v109;
      v29.i32[0] = *v109 & ~v28;
      uint8x8_t v32 = (uint8x8_t)vcnt_s8(v29);
      v32.i16[0] = vaddlv_u8(v32);
      uint64_t v33 = v32.u32[0];
      uint64_t v34 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v30, v112, v113, a6, v108, v26);
      uint64_t v35 = *v24;
      (*v24)(v27, v34, a6);
      uint64_t v36 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v33, v31, v110, a6, v111, v26);
      uint64_t v37 = v105;
      v35(v105, v36, a6);
      LOBYTE(v33) = sub_24A5BB530();
      uint64_t v38 = *v25;
      (*v25)(v37, a6);
      uint64_t result = (_DWORD *)v38(v27, a6);
      if (v33) {
        goto LABEL_21;
      }
      v23 &= v23 - 1;
      if (!v23)
      {
        a3 = v112;
        int v19 = *v112;
        int v21 = v109[1];
        break;
      }
    }
  }
  unsigned int v39 = v21 & v19;
  if ((v21 & v19) != 0)
  {
    unsigned int v100 = v97 + 5;
    uint64_t v98 = v95 + 8;
    uint64_t v99 = (void (**)(uint64_t, uint64_t, uint64_t))(v95 + 16);
    uint64_t v40 = (uint64_t)v106;
    uint64_t v41 = v107;
    uint64_t v42 = (char **)(v95 + 8);
    uint64_t v43 = v111;
    do
    {
      int v44 = -1 << __clz(__rbit32(v39));
      v16.i32[0] = *a3 & ~v44;
      uint8x8_t v45 = (uint8x8_t)vcnt_s8(v16);
      v45.i16[0] = vaddlv_u8(v45);
      unsigned __int32 v103 = v45.i32[0];
      uint64_t v46 = a3;
      uint64_t v47 = v108;
      uint64_t v48 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v45.u32[0], v46, v113, a6, v108, v41);
      uint64_t v102 = *v99;
      v102(v40, v48, a6);
      uint64_t v49 = sub_24A5B85E4();
      uint64_t v50 = *v42;
      uint64_t v104 = v49;
      uint64_t v105 = v50;
      __n128 v51 = ((__n128 (*)(uint64_t, uint64_t))v50)(v40, a6);
      v51.n128_u32[0] = v109[1] & ~v44;
      v51.n128_u64[0] = (unint64_t)vcnt_s8((int8x8_t)v51.n128_u64[0]);
      v51.n128_u16[0] = vaddlv_u8((uint8x8_t)v51.n128_u64[0]);
      uint64_t v52 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v51.n128_u32[0], v109, v110, a6, v43, v41);
      uint64_t v53 = *v52;
      uint64_t v101 = v52[1];
      uint64_t v54 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v103, v112, v113, a6, v47, v41);
      v102(v40, v54, a6);
      swift_retain();
      BOOL v55 = _HashNode.containsKey(_:_:_:)(v100, v40, v104, v53, v101, a6, v43, v41);
      swift_release();
      uint64_t result = (_DWORD *)((uint64_t (*)(uint64_t, uint64_t))v105)(v40, a6);
      if (v55) {
        goto LABEL_21;
      }
      v39 &= v39 - 1;
      a3 = v112;
    }
    while (v39);
  }
  int v56 = a3[1];
  unsigned int v57 = *v109 & v56;
  if (v57)
  {
    unsigned int v100 = v97 + 5;
    uint64_t v98 = v95 + 8;
    uint64_t v99 = (void (**)(uint64_t, uint64_t, uint64_t))(v95 + 16);
    unsigned __int16 v58 = v109;
    uint64_t v59 = (void (**)(uint64_t, uint64_t, uint64_t))(v95 + 16);
    uint64_t v60 = (uint64_t)v106;
    uint64_t v61 = (char **)(v95 + 8);
    while (1)
    {
      int v62 = -1 << __clz(__rbit32(v57));
      v16.i32[0] = a3[1] & ~v62;
      int8x8_t v63 = vcnt_s8(v16);
      v63.i16[0] = vaddlv_u8((uint8x8_t)v63);
      uint64_t v64 = v63.u32[0];
      v63.i32[0] = *v58 & ~v62;
      uint8x8_t v65 = (uint8x8_t)vcnt_s8(v63);
      v65.i16[0] = vaddlv_u8(v65);
      unsigned __int32 v103 = v65.i32[0];
      uint64_t v66 = v107;
      uint64_t v67 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v65.u32[0], v58, v110, a6, v111, v107);
      uint64_t v102 = *v59;
      v102(v60, v67, a6);
      uint64_t v68 = sub_24A5B85E4();
      uint64_t v69 = *v61;
      uint64_t v104 = v68;
      uint64_t v105 = v69;
      ((void (*)(uint64_t, uint64_t))v69)(v60, a6);
      uint64_t v70 = a3;
      uint64_t v71 = v108;
      uint64_t v72 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v64, v70, v113, a6, v108, v66);
      uint64_t v73 = *v72;
      uint64_t v101 = v72[1];
      uint64_t v74 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v103, v58, v110, a6, v111, v66);
      v102(v60, v74, a6);
      swift_retain();
      LOBYTE(v66) = _HashNode.containsKey(_:_:_:)(v100, v60, v104, v73, v101, a6, v71, v66);
      swift_release();
      uint64_t result = (_DWORD *)((uint64_t (*)(uint64_t, uint64_t))v105)(v60, a6);
      if (v66) {
        goto LABEL_21;
      }
      v57 &= v57 - 1;
      a3 = v112;
      if (!v57)
      {
        int v56 = v112[1];
        break;
      }
    }
  }
  unsigned int v75 = v109[1] & v56;
  if (v75)
  {
    uint64_t v76 = (v97 + 5);
    uint64_t v77 = v107;
    uint64_t v78 = v108;
    while (1)
    {
      int v79 = -1 << __clz(__rbit32(v75));
      v16.i32[0] = v112[1] & ~v79;
      int8x8_t v80 = vcnt_s8(v16);
      v80.i16[0] = vaddlv_u8((uint8x8_t)v80);
      uint64_t v81 = v80.u32[0];
      uint64_t v82 = v109;
      v80.i32[0] = v109[1] & ~v79;
      uint8x8_t v83 = (uint8x8_t)vcnt_s8(v80);
      v83.i16[0] = vaddlv_u8(v83);
      uint64_t v84 = v83.u32[0];
      uint64_t v85 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v81, v112, v113, a6, v78, v77);
      uint64_t v86 = *v85;
      uint64_t v87 = v85[1];
      uint64_t v88 = v82;
      uint64_t v89 = v111;
      uint64_t v90 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v84, v88, v110, a6, v111, v77);
      uint64_t v92 = *v90;
      uint64_t v91 = v90[1];
      swift_retain();
      swift_retain();
      LOBYTE(v87) = _HashNode.isDisjoint<A>(_:with:)(v76, v92, v91, v86, v87, a6, v78, v89, v77);
      swift_release();
      uint64_t result = (_DWORD *)swift_release();
      if ((v87 & 1) == 0) {
        break;
      }
      v75 &= v75 - 1;
      if (!v75) {
        goto LABEL_20;
      }
    }
LABEL_21:
    char v93 = 0;
    goto LABEL_22;
  }
LABEL_20:
  char v93 = 1;
LABEL_22:
  uint64_t v14 = v96;
LABEL_24:
  *uint64_t v14 = v93;
  return result;
}

void sub_24A4D1288(void *a1@<X1>, void *a2@<X3>, char *a3@<X8>)
{
  if (*a2 == *a1)
  {
    uint64_t v6 = a3;
    _HashNode.UnsafeHandle.reverseItems.getter();
    uint64_t v3 = _HashNode.UnsafeHandle.reverseItems.getter();
    MEMORY[0x270FA5388](v3);
    swift_getTupleTypeMetadata2();
    sub_24A5BBDB0();
    swift_getWitnessTable();
    char v4 = sub_24A5BB890();
    a3 = v6;
    char v5 = v4 & 1;
  }
  else
  {
    char v5 = 1;
  }
  *a3 = v5;
}

BOOL sub_24A4D13FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v23 = a7;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v14 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v17 = (char *)&v22 - v16;
  uint64_t v29 = a2;
  uint64_t v30 = a3;
  uint64_t v18 = *(int *)(v15 + 48);
  int v19 = &v17[v18];
  uint64_t v20 = a1 + v18;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(v17, a1, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))(v19, v20, a5);
  uint64_t v24 = a4;
  uint64_t v25 = a5;
  uint64_t v26 = a6;
  uint64_t v27 = v23;
  int v28 = v17;
  swift_getTupleTypeMetadata2();
  sub_24A5BBDB0();
  swift_getWitnessTable();
  LOBYTE(v19) = sub_24A5BB900();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, TupleTypeMetadata2);
  return (v19 & 1) == 0;
}

void sub_24A4D1610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v13 = *(void *)(a7 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](a1);
  uint64_t v23 = (char *)&v39 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v24 = *(_DWORD *)(v14 + 4);
  int v26 = 1 << v25;
  if ((v24 & (1 << v25)) != 0)
  {
    v21.i32[0] = v24 & (v26 - 1);
    uint8x8_t v27 = (uint8x8_t)vcnt_s8(v21);
    v27.i16[0] = vaddlv_u8(v27);
    uint64_t v28 = (v18 + 5);
    uint64_t v29 = v16;
    uint64_t v30 = v17;
    uint64_t v41 = v10;
    uint64_t v31 = v20;
    uint8x8_t v32 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v27.u32[0], v15, v19, a7, a9, a10);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    swift_retain();
    LOBYTE(v29) = _HashNode.isDisjoint<A>(_:with:)(v28, v34, v33, v29, v30, a7, a8, a9, a10);
    swift_release();
    *uint64_t v31 = v29 & 1;
  }
  else if ((*v15 & v26) != 0)
  {
    v21.i32[0] = *v15 & (v26 - 1);
    uint8x8_t v35 = (uint8x8_t)vcnt_s8(v21);
    v35.i16[0] = vaddlv_u8(v35);
    uint64_t v36 = v16;
    uint64_t v41 = v20;
    uint64_t v37 = _HashNode.UnsafeHandle.itemPtr(at:)(v35.u32[0], (uint64_t)v15, v19);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v23, v37, a7);
    uint64_t v40 = sub_24A5B85E4();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v23, a7);
    nullsub_1(v36 + 16, v36 + 32, a7, a8, a10);
    sub_24A4D1868(v38, v40, v41);
  }
  else
  {
    *uint64_t v20 = 1;
  }
}

void sub_24A4D1868(void *a1@<X1>, uint64_t a2@<X2>, BOOL *a3@<X8>)
{
  BOOL v4 = 1;
  if (*a1 == a2)
  {
    _OWORD v6[3] = v6;
    v6[0] = _HashNode.UnsafeHandle.reverseItems.getter();
    v6[1] = v5;
    MEMORY[0x270FA5388](v6[0]);
    swift_getTupleTypeMetadata2();
    sub_24A5BBDB0();
    swift_getWitnessTable();
    BOOL v4 = (sub_24A5BB900() & 1) == 0;
  }
  *a3 = v4;
}

uint64_t sub_24A4D19AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  char v7 = sub_24A5BB530();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, a3);
  return v7 & 1;
}

BOOL sub_24A4D1AAC(uint64_t a1)
{
  return sub_24A4D13FC(a1, v1[6], v1[7], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_24A4D1AD4()
{
  return sub_24A5BB530() & 1;
}

uint64_t sub_24A4D1B14(uint64_t a1)
{
  return sub_24A4D19AC(a1, *(void *)(v1 + 48), *(void *)(v1 + 16)) & 1;
}

uint64_t sub_24A4D1B3C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *MEMORY[0x263F8E830];
  uint64_t v3 = sub_24A5BC6B0();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);
  return v4(a1, v2, v3);
}

uint64_t OrderedSet.customMirror.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  v17[1] = a3;
  _OWORD v17[2] = a4;
  uint64_t v6 = sub_24A5BC6B0();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_26979AE30);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[4] = a1;
  v17[5] = a2;
  v17[3] = a2;
  uint64_t v13 = *MEMORY[0x263F8E7F8];
  uint64_t v14 = sub_24A5BC6A0();
  uint64_t v15 = *(void *)(v14 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 104))(v12, v13, v14);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  type metadata accessor for OrderedSet();
  sub_24A5BC210();
  swift_getWitnessTable();
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x263F8E830], v6);
  swift_retain();
  swift_retain_n();
  return sub_24A5BC6C0();
}

uint64_t sub_24A4D1DF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return OrderedSet.customMirror.getter(*v2, v2[1], *(void *)(a1 + 24), a2);
}

uint64_t BitSet.isEmpty.getter(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return 1;
  }
  if (*(void *)(result + 32)) {
    return 0;
  }
  if (v1 == 1) {
    return 1;
  }
  for (uint64_t i = 5; ; ++i)
  {
    uint64_t v3 = *(void *)(result + 8 * i);
    BOOL v4 = v3 == 0;
    if (v3) {
      return v4;
    }
    uint64_t v5 = i - 3;
    if (__OFADD__(i - 4, 1)) {
      break;
    }
    if (v5 == v1) {
      return v4;
    }
  }
  __break(1u);
  return result;
}

uint64_t BitSet.underestimatedCount.getter(int8x8_t *a1)
{
  int8x8_t v1 = a1[2];
  if (!*(void *)&v1) {
    return 0;
  }
  uint64_t result = 0;
  BOOL v4 = a1 + 4;
  uint64_t v5 = 8 * *(void *)&v1;
  while (1)
  {
    uint8x8_t v6 = (uint8x8_t)vcnt_s8(*v4);
    v6.i16[0] = vaddlv_u8(v6);
    BOOL v7 = __OFADD__(result, v6.u32[0]);
    result += v6.u32[0];
    if (v7) {
      break;
    }
    ++v4;
    v5 -= 8;
    if (!v5) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t BitSet.count.getter(int8x8_t *a1)
{
  int8x8_t v1 = a1[2];
  if (!*(void *)&v1) {
    return 0;
  }
  uint64_t result = 0;
  BOOL v4 = a1 + 4;
  uint64_t v5 = 8 * *(void *)&v1;
  while (1)
  {
    uint8x8_t v6 = (uint8x8_t)vcnt_s8(*v4);
    v6.i16[0] = vaddlv_u8(v6);
    BOOL v7 = __OFADD__(result, v6.u32[0]);
    result += v6.u32[0];
    if (v7) {
      break;
    }
    ++v4;
    v5 -= 8;
    if (!v5) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t BitSet.makeIterator()()
{
  return swift_bridgeObjectRetain();
}

Swift::Bool_optional __swiftcall BitSet._customContainsEquatableElement(_:)(Swift::Int a1)
{
  if (a1 < 0 || (unint64_t)a1 >> 6 >= *(void *)(v1 + 16)) {
    LOBYTE(v2) = 0;
  }
  else {
    return (Swift::Bool_optional)((*(void *)(v1 + 8 * ((unint64_t)a1 >> 6) + 32) >> a1) & 1);
  }
  return (Swift::Bool_optional)v2;
}

Swift::Int_optional __swiftcall BitSet.Iterator.next()()
{
  unint64_t v1 = v0[2];
  if (!v1)
  {
    uint64_t v5 = v0[1];
    uint64_t v6 = v5 + 1;
    if (!__OFADD__(v5, 1))
    {
      uint64_t v7 = *v0;
      uint64_t v8 = *(void *)(*v0 + 16);
      if (v6 < v8)
      {
        v0[1] = v6;
        unint64_t v9 = *(void *)(v7 + 8 * v6 + 32);
        v0[2] = v9;
        if (v9)
        {
LABEL_11:
          v0[2] = (v9 - 1) & v9;
          if (((v6 << 6) & 0x8000000000000000) == 0)
          {
            Swift::Bool v3 = 0;
            Swift::Int v4 = __clz(__rbit64(v9)) + (v6 << 6);
            goto LABEL_17;
          }
LABEL_16:
          __break(1u);
          goto LABEL_17;
        }
        uint64_t v10 = v7 + 48;
        while (v8 - 2 != v5)
        {
          v0[1] = v5 + 2;
          unint64_t v9 = *(void *)(v10 + 8 * v5);
          v0[2] = v9;
          ++v5;
          if (v9)
          {
            uint64_t v6 = v5 + 1;
            goto LABEL_11;
          }
        }
      }
      Swift::Int v4 = 0;
      Swift::Bool v3 = 1;
      goto LABEL_17;
    }
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v0[2] = (v1 - 1) & v1;
  uint64_t v2 = v0[1] << 6;
  if (v2 < 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  Swift::Bool v3 = 0;
  Swift::Int v4 = v2 | __clz(__rbit64(v1));
LABEL_17:
  result.value = v4;
  result.is_nil = v3;
  return result;
}

Swift::Int sub_24A4D2054@<X0>(uint64_t a1@<X8>)
{
  Swift::Int_optional v3 = BitSet.Iterator.next()();
  *(void *)a1 = v3.value;
  *(unsigned char *)(a1 + 8) = v3.is_nil;
  return v3.value;
}

void sub_24A4D2084(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 16);
  if (v3) {
    uint64_t v3 = *(void *)(v2 + 32);
  }
  *a1 = v2;
  a1[1] = 0;
  a1[2] = v3;
}

Swift::Bool_optional sub_24A4D20A4(Swift::Int *a1)
{
  return BitSet._customContainsEquatableElement(_:)(*a1);
}

int64_t sub_24A4D20B0()
{
  int64_t v1 = sub_24A595C2C(*v0);
  swift_bridgeObjectRelease();
  return v1;
}

void *sub_24A4D20E8(void *a1, unint64_t *a2, uint64_t a3)
{
  return sub_24A585DF4(a1, a2, a3, *v3);
}

unint64_t BitSet.startIndex.getter(unint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return v1 << 6;
  }
  unint64_t v2 = *(void *)(result + 32);
  if (v2)
  {
    uint64_t v3 = 0;
    return __clz(__rbit64(v2)) | v3;
  }
  uint64_t v4 = v1 - 1;
  if (v1 == 1) {
    return v1 << 6;
  }
  uint64_t v5 = (unint64_t *)(result + 40);
  uint64_t v3 = 64;
  while (1)
  {
    unint64_t v6 = *v5++;
    unint64_t v2 = v6;
    if (v6) {
      break;
    }
    v3 += 64;
    if (!--v4)
    {
      Swift::Int_optional result = v1 << 6;
      if (((v1 << 6) & 0x8000000000000000) == 0) {
        return result;
      }
      __break(1u);
      break;
    }
  }
  if (v3 < 0)
  {
    __break(1u);
    return result;
  }
  return __clz(__rbit64(v2)) | v3;
}

uint64_t BitSet.endIndex.getter(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16) << 6;
  if (result < 0) {
    __break(1u);
  }
  return result;
}

uint64_t BitSet.index(after:)(uint64_t a1, uint64_t a2)
{
  return sub_24A4D219C(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void))_UnsafeBitSet.index(after:));
}

uint64_t BitSet.index(before:)(uint64_t a1, uint64_t a2)
{
  return sub_24A4D219C(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void))_UnsafeBitSet.index(before:));
}

uint64_t sub_24A4D219C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, void))
{
  return a3(a1, a2 + 32, *(void *)(a2 + 16));
}

uint64_t BitSet.distance(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A4D21E4(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))_UnsafeBitSet.distance(from:to:));
}

uint64_t BitSet.index(_:offsetBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A4D21E4(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))_UnsafeBitSet.index(_:offsetBy:));
}

uint64_t sub_24A4D21E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, void))
{
  return a4(a1, a2, a3 + 32, *(void *)(a3 + 16));
}

Swift::UInt BitSet.index(_:offsetBy:limitedBy:)(Swift::UInt a1, uint64_t a2, Swift::UInt a3, uint64_t a4)
{
  Swift::UInt result = _UnsafeBitSet.index(_:offsetBy:limitedBy:)(a1, a2, a3, a4 + 32, *(void *)(a4 + 16));
  if (v5) {
    return 0;
  }
  return result;
}

unint64_t BitSet._customIndexOfEquatableElement(_:)(unint64_t result, uint64_t a2)
{
  if ((result & 0x8000000000000000) != 0
    || result >> 6 >= *(void *)(a2 + 16)
    || ((*(void *)(a2 + 8 * (result >> 6) + 32) >> result) & 1) == 0)
  {
    return 0;
  }
  return result;
}

unint64_t BitSet._customLastIndexOfEquatableElement(_:)(unint64_t result, uint64_t a2)
{
  if ((result & 0x8000000000000000) != 0) {
    return 0;
  }
  if (result >> 6 >= *(void *)(a2 + 16)) {
    return 0;
  }
  if ((*(void *)(a2 + 8 * (result >> 6) + 32) & (1 << result)) == 0) {
    return 0;
  }
  return result;
}

unint64_t sub_24A4D22C4@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = BitSet.startIndex.getter(*v1);
  *a1 = result;
  return result;
}

void sub_24A4D22F0(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 16) << 6;
  if (v2 < 0) {
    __break(1u);
  }
  else {
    *a1 = v2;
  }
}

uint64_t (*sub_24A4D230C(void *a1, void *a2))()
{
  *a1 = *a2;
  return nullsub_1;
}

unint64_t sub_24A4D2338@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  unint64_t v6 = *v2;
  unint64_t result = BitSet.startIndex.getter(v6);
  unint64_t v8 = *(void *)(v6 + 16) << 6;
  if ((v8 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v8 < result)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v4 < result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v8 < v5)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  return swift_bridgeObjectRetain();
}

uint64_t sub_24A4D23C0@<X0>(void *a1@<X8>)
{
  *a1 = sub_24A594060(*v1);
  a1[1] = v3;
  a1[2] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_24A4D2400()
{
  int8x8_t v1 = (*v0)[2];
  if (!*(void *)&v1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v3 = *v0 + 4;
  uint64_t v4 = 8 * *(void *)&v1;
  while (1)
  {
    uint8x8_t v5 = (uint8x8_t)vcnt_s8(*v3);
    v5.i16[0] = vaddlv_u8(v5);
    BOOL v6 = __OFADD__(result, v5.u32[0]);
    result += v5.u32[0];
    if (v6) {
      break;
    }
    ++v3;
    v4 -= 8;
    if (!v4) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_24A4D244C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24A4D247C(a1, (uint64_t (*)(void, void))BitSet._customIndexOfEquatableElement(_:), a2);
}

uint64_t sub_24A4D2464@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24A4D247C(a1, (uint64_t (*)(void, void))BitSet._customLastIndexOfEquatableElement(_:), a2);
}

uint64_t sub_24A4D247C@<X0>(void *a1@<X0>, uint64_t (*a2)(void, void)@<X3>, uint64_t a3@<X8>)
{
  uint64_t result = a2(*a1, *v3);
  *(void *)a3 = result;
  *(unsigned char *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 9) = v7 & 1;
  return result;
}

void *sub_24A4D24C8(void *result, void *a2)
{
  if (*result < *a2 || *result >= a2[1]) {
    __break(1u);
  }
  return result;
}

void *sub_24A4D24E4(void *result, void *a2)
{
  if (*result < *a2 || a2[1] < *result) {
    __break(1u);
  }
  return result;
}

void *sub_24A4D2500(void *result, void *a2)
{
  if (*result < *a2 || a2[1] < result[1]) {
    __break(1u);
  }
  return result;
}

uint64_t sub_24A4D251C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_24A4D2564(a1, (uint64_t (*)(void, uint64_t, void))_UnsafeBitSet.index(after:), a2);
}

uint64_t sub_24A4D2534(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_24A4D25B8(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, void))_UnsafeBitSet.index(after:));
}

uint64_t sub_24A4D254C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_24A4D2564(a1, (uint64_t (*)(void, uint64_t, void))_UnsafeBitSet.index(before:), a2);
}

uint64_t sub_24A4D2564@<X0>(void *a1@<X0>, uint64_t (*a2)(void, uint64_t, void)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t result = a2(*a1, *(void *)v3 + 32, *(void *)(*(void *)v3 + 16));
  *a3 = result;
  return result;
}

uint64_t sub_24A4D25A0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_24A4D25B8(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, void))_UnsafeBitSet.index(before:));
}

uint64_t sub_24A4D25B8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, void))
{
  uint64_t result = a4(*a1, *(void *)v4 + 32, *(void *)(*(void *)v4 + 16));
  *a1 = result;
  return result;
}

Swift::UInt sub_24A4D25F4@<X0>(Swift::UInt *a1@<X0>, uint64_t a2@<X1>, Swift::UInt *a3@<X8>)
{
  Swift::UInt result = _UnsafeBitSet.index(_:offsetBy:)(*a1, a2, *(void *)v3 + 32, *(void *)(*(void *)v3 + 16));
  *a3 = result;
  return result;
}

Swift::UInt sub_24A4D262C@<X0>(Swift::UInt *a1@<X0>, uint64_t a2@<X1>, Swift::UInt *a3@<X2>, uint64_t a4@<X8>)
{
  Swift::UInt result = _UnsafeBitSet.index(_:offsetBy:limitedBy:)(*a1, a2, *a3, *(void *)v4 + 32, *(void *)(*(void *)v4 + 16));
  if (v7) {
    Swift::UInt v8 = 0;
  }
  else {
    Swift::UInt v8 = result;
  }
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 8) = v7 & 1;
  return result;
}

unint64_t sub_24A4D2674(unint64_t *a1, unint64_t *a2)
{
  return _UnsafeBitSet.distance(from:to:)(*a1, *a2, *(void *)v2 + 32, *(void *)(*(void *)v2 + 16));
}

unint64_t sub_24A4D2690()
{
  unint64_t result = qword_26979B188;
  if (!qword_26979B188)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979B188);
  }
  return result;
}

unint64_t sub_24A4D26E8()
{
  unint64_t result = qword_26979B190;
  if (!qword_26979B190)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979B190);
  }
  return result;
}

unint64_t sub_24A4D2740()
{
  unint64_t result = qword_26979B198;
  if (!qword_26979B198)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979B198);
  }
  return result;
}

uint64_t sub_24A4D2794()
{
  return sub_24A4D280C(&qword_26979B1A0, &qword_26979B1A8);
}

uint64_t sub_24A4D27D0()
{
  return sub_24A4D280C(&qword_26979B1B0, &qword_26979B1B8);
}

uint64_t sub_24A4D280C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A4D2854()
{
  return sub_24A4D2920(&qword_26979B1C0, &qword_26979B1A8);
}

unint64_t sub_24A4D2890()
{
  unint64_t result = qword_26979B1C8;
  if (!qword_26979B1C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979B1C8);
  }
  return result;
}

uint64_t sub_24A4D28E4()
{
  return sub_24A4D2920(&qword_26979B1D0, &qword_26979B1B8);
}

uint64_t sub_24A4D2920(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    sub_24A4D2890();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s14descr26FE1D5A1V8IteratorVwCP(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s14descr26FE1D5A1V8IteratorVwxx()
{
  return swift_bridgeObjectRelease();
}

void *_s14descr26FE1D5A1V8IteratorVwca(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1;
}

uint64_t _s14descr26FE1D5A1V8IteratorVwta(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for BitSet.Iterator()
{
  return &type metadata for BitSet.Iterator;
}

Swift::Void __swiftcall BitArray.truncateOrExtend(toCount:with:)(Swift::Int toCount, Swift::Bool with)
{
  if (toCount < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return;
  }
  unint64_t v3 = *(void *)(v2 + 8);
  if (v3 > toCount)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      sub_24A4E5C78(v3 - toCount);
      return;
    }
    goto LABEL_9;
  }
  if (v3 < toCount) {
    sub_24A4E5D3C(toCount - v3, with);
  }
}

Swift::Void __swiftcall BitArray.insert(repeating:count:at:)(Swift::Bool repeating, Swift::Int count, Swift::Int at)
{
  if (count < at || (Swift::Int v5 = at, v7 = count, (at | count) < 0))
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (count < 1) {
    return;
  }
  unint64_t v3 = v4;
  uint64_t v10 = v4[1];
  unint64_t v11 = (unint64_t)&v10[count];
  if (__CFADD__(v10, count)) {
    goto LABEL_19;
  }
  if (v11 >= 0xFFFFFFFFFFFFFFC0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  Swift::Bool v6 = repeating;
  uint64_t v12 = ((v11 + 63) >> 6) - *((void *)*v4 + 2);
  if (v12 < 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  sub_24A4D5F98(v12, 0);
  v4[1] = (char *)v11;
  if ((v11 & 0x8000000000000000) != 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = v11 - v7;
  if ((uint64_t)(v11 - v7) < v5)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  BOOL v13 = __OFADD__(v5, v7);
  v7 += v5;
  if (!v13)
  {
    Swift::UInt v8 = *v4;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v4 = v8;
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  __break(1u);
LABEL_25:
  Swift::UInt v8 = sub_24A499D60((uint64_t)v8);
  *unint64_t v3 = v8;
LABEL_11:
  sub_24A5B7EFC(v5, v9, (uint64_t)(v8 + 32), *((void *)v8 + 2), v7);
  *unint64_t v3 = v8;
  if (v7 < v5)
  {
    __break(1u);
    goto LABEL_27;
  }
  char v15 = swift_isUniquelyReferenced_nonNull_native();
  *unint64_t v3 = v8;
  if ((v15 & 1) == 0)
  {
LABEL_27:
    Swift::UInt v8 = sub_24A499D60((uint64_t)v8);
    *unint64_t v3 = v8;
  }
  if (v6) {
    sub_24A5AC4B8(v5, v7);
  }
  else {
    sub_24A5AC5E8(v5, v7);
  }
  *unint64_t v3 = v8;
}

Swift::Void __swiftcall BitArray.append(repeating:count:)(Swift::Bool repeating, Swift::Int count)
{
  if (count < 0)
  {
    __break(1u);
  }
  else if (count)
  {
    sub_24A4E5D3C(count, repeating);
  }
}

uint64_t sub_24A4D2C4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  Swift::Bool v6 = (void *)v5;
  uint64_t v7 = *(unsigned int *)(v5 + 18);
  uint64_t v8 = *(unsigned __int16 *)(v5 + 16);
  *(_WORD *)(v5 + 16) = a5;
  *(unsigned char *)(v5 + 18) = BYTE2(a5);
  *(unsigned char *)(v5 + 19) = BYTE3(a5);
  *(unsigned char *)(v5 + 20) = BYTE4(a5);
  *(unsigned char *)(v5 + 21) = BYTE5(a5);
  sub_24A491E1C(v8 | (v7 << 16));
  swift_bridgeObjectRetain();
  uint64_t v9 = sub_24A5BB660();
  uint64_t v10 = sub_24A5BBE90();
  BOOL v11 = __OFADD__(v9, v10);
  uint64_t result = v9 + v10;
  if (v11)
  {
    __break(1u);
  }
  else
  {
    MEMORY[0x24C5C68D0](result);
    sub_24A491D60();
    sub_24A5BB6D0();
    sub_24A5BB6D0();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease_n();
    *Swift::Bool v6 = 0;
    v6[1] = 0xE000000000000000;
  }
  return result;
}

uint64_t sub_24A4D2D8C(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = v10;
  unint64_t v18 = result;
  unint64_t v19 = *(void *)v11;
  unint64_t v20 = *(void *)(v11 + 8);
  uint64_t v21 = (*(void *)v11 >> 59) & 1;
  if ((v20 & 0x1000000000000000) == 0) {
    LOBYTE(v21) = 1;
  }
  unint64_t v22 = a8;
  if ((a8 & 0xC) == 4 << v21)
  {
    uint64_t result = sub_24A4DFD84(a8, *(void *)v11, *(void *)(v11 + 8));
    unint64_t v22 = result;
    uint64_t v43 = a6;
    if ((v20 & 0x1000000000000000) == 0) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v43 = a6;
    if ((v20 & 0x1000000000000000) == 0)
    {
LABEL_5:
      unint64_t v41 = v22 >> 16;
      goto LABEL_6;
    }
  }
  unint64_t v38 = v19 & 0xFFFFFFFFFFFFLL;
  if ((v20 & 0x2000000000000000) != 0) {
    unint64_t v38 = HIBYTE(v20) & 0xF;
  }
  if (v38 < v22 >> 16) {
    goto LABEL_29;
  }
  unint64_t v41 = sub_24A5BB750();
LABEL_6:
  unint64_t v23 = sub_24A4913AC(v18, a2, a3, a4);
  uint64_t v26 = *(unsigned __int8 *)(v11 + 16);
  if (__OFADD__(v26, v23))
  {
    __break(1u);
    goto LABEL_23;
  }
  if ((uint64_t)(v26 + v23) > 255)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  unint64_t v40 = v23;
  uint64_t v27 = sub_24A494C18(a8, v19, v20, ((unint64_t)*(unsigned __int8 *)(v11 + 21) << 40) | ((unint64_t)*(unsigned int *)(v11 + 17) << 8) | v26);
  unsigned __int16 v28 = HIWORD(v27);
  unsigned int v30 = v29;
  *(_WORD *)(v11 + 16) = v27;
  *(unsigned char *)(v11 + 18) = BYTE2(v27);
  *(unsigned char *)(v11 + 19) = BYTE3(v27);
  *(unsigned char *)(v11 + 20) = BYTE4(v27);
  *(unsigned char *)(v11 + 21) = BYTE5(v27);
  if ((uint64_t)sub_24A4913AC(v18, a2, a3, a4) > 255)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v39 = a7;
  unint64_t v31 = sub_24A4913AC(v18, a2, a3, a4);
  uint64_t v32 = sub_24A5BB7C0();
  unint64_t v33 = sub_24A491A60(v18, a2, a3, a4);
  int64_t v34 = sub_24A491F14(v31, v32, v33, a5, v43, v39);
  sub_24A491E1C(v34 & 0xFFFFFFFFFFFFLL);
  sub_24A491E1C(((unint64_t)HIBYTE(v30) << 40) | ((unint64_t)BYTE2(v30) << 32) | (v30 << 16) & 0xFF000000 | (v30 << 16) & 0xFF0000 | v28);
  sub_24A4D476C();
  uint64_t result = sub_24A5BB700();
  unint64_t v24 = v41 + v40;
  if (__OFADD__(v41, v40))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v25 = *(void *)v11;
  unint64_t v35 = *(void *)(v11 + 8);
  if ((v35 & 0x1000000000000000) != 0)
  {
LABEL_26:
    unint64_t v37 = MEMORY[0x24C5C6A60](15, v24, v25);
    return sub_24A48ED24(v37, a9, a10);
  }
  if ((v24 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v36 = HIBYTE(v35) & 0xF;
    if ((v35 & 0x2000000000000000) == 0) {
      unint64_t v36 = v25 & 0xFFFFFFFFFFFFLL;
    }
    if (v36 >= v24)
    {
      unint64_t v37 = (v24 << 16) | 4;
      return sub_24A48ED24(v37, a9, a10);
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_24A4D3054@<X0>(void *a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = v3;
  unint64_t v44 = a2;
  uint8x8_t v45 = a3;
  uint64_t v6 = sub_24A5BC780();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v46 = (uint64_t)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v38 - v10;
  unint64_t v12 = a1[2];
  uint64_t v13 = a1[3];
  unint64_t v14 = a1[4];
  swift_bridgeObjectRetain();
  unint64_t v15 = sub_24A5BBE80();
  swift_bridgeObjectRelease();
  uint64_t v16 = *(unsigned __int8 *)(v4 + 16);
  BOOL v17 = __OFADD__(v16, v15);
  uint64_t v18 = v16 + v15;
  if (v17)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v18 > 255)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  unint64_t v19 = (char *)a1 + *(int *)(_s9_IngesterVMa() + 24);
  unint64_t v20 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v20(v11, v19, v6);
  sub_24A49752C(v15, (unint64_t)v47);
  sub_24A491DB4((uint64_t)v47, (uint64_t)v48);
  a1 = v49;
  if (!v49)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
    goto LABEL_12;
  }
  uint64_t v40 = v48[0];
  unint64_t v12 = v48[2];
  unint64_t v39 = v48[1];
  uint64_t v42 = v51;
  uint64_t v43 = v50;
  uint64_t v41 = v52;
  uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v20)(v46, v19, v6);
  uint64_t v13 = *(void *)v4;
  unint64_t v15 = *(void *)(v4 + 8);
  uint64_t v22 = (*(void *)v4 >> 59) & 1;
  if ((v15 & 0x1000000000000000) == 0) {
    LOBYTE(v22) = 1;
  }
  unint64_t v14 = v44;
  unint64_t v23 = v44;
  if ((v44 & 0xC) == 4 << v22)
  {
LABEL_17:
    uint64_t result = sub_24A4DFD84(v14, v13, v15);
    unint64_t v23 = result;
    if ((v15 & 0x1000000000000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
  if ((v15 & 0x1000000000000000) == 0)
  {
LABEL_8:
    unint64_t v24 = v23 >> 16;
    goto LABEL_9;
  }
LABEL_18:
  unint64_t v37 = v13 & 0xFFFFFFFFFFFFLL;
  if ((v15 & 0x2000000000000000) != 0) {
    unint64_t v37 = HIBYTE(v15) & 0xF;
  }
  if (v37 < v23 >> 16) {
    goto LABEL_23;
  }
  unint64_t v24 = sub_24A5BB750();
LABEL_9:
  uint64_t v25 = v46;
  sub_24A4D2D8C(v40, v39, v12, (unint64_t)a1, v43, v42, v41, v14, (uint64_t)v11, v46);
  char v27 = v26;
  uint64_t result = sub_24A491A34((uint64_t)v47);
  if ((v27 & 1) == 0)
  {
    unsigned __int16 v28 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v28(v25, v6);
    v28((uint64_t)v11, v6);
LABEL_12:
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_26979B1E0);
    return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v45, 1, 1, v29);
  }
  uint64_t v30 = *(unsigned __int8 *)(v4 + 16);
  uint64_t v31 = v30 - v24;
  if (!__OFSUB__(v30, v24))
  {
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_26979B1E0);
    unint64_t v33 = v45;
    int64_t v34 = (char *)v45 + *(int *)(v32 + 64);
    unint64_t v35 = (char *)v45 + *(int *)(v32 + 48);
    *uint8x8_t v45 = v31;
    unint64_t v36 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v36(v35, v11, v6);
    v36(v34, (char *)v25, v6);
    return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v33, 0, 1, v32);
  }
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_24A4D340C@<X0>(unint64_t *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X8>)
{
  uint64_t v194 = sub_24A5BC780();
  uint64_t v193 = *(void **)(v194 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v194);
  uint64_t v191 = (char *)&v176 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v192 = (uint64_t)&v176 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_26979B1D8);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v189 = (char *)&v176 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_26979B1E0);
  unint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v190 = (char *)&v176 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v197 = v3;
  unint64_t v15 = *(unsigned __int8 *)(v3 + 16);
  uint64_t v188 = v3 + 16;
  unint64_t v16 = *a1;
  unint64_t v17 = a1[1];
  uint64_t v196 = a1;
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_24A5BBE80();
  uint64_t result = swift_bridgeObjectRelease();
  if (v18 < 1)
  {
    (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(a3, 1, 1, v12);
    goto LABEL_67;
  }
  unint64_t v186 = v13;
  unint64_t v187 = v12;
  unint64_t v195 = (void *)a3;
  uint64_t v20 = v15 + v18;
  if (__OFADD__(v15, v18))
  {
    __break(1u);
  }
  else
  {
    unint64_t v16 = v197;
    unint64_t v17 = *(void *)v197;
    a3 = *(void *)(v197 + 8);
    uint64_t v21 = (*(void *)v197 >> 59) & 1;
    if ((a3 & 0x1000000000000000) == 0) {
      LOBYTE(v21) = 1;
    }
    unint64_t v22 = a2;
    if ((a2 & 0xC) != 4 << v21)
    {
      if ((a3 & 0x1000000000000000) == 0) {
        goto LABEL_7;
      }
      goto LABEL_62;
    }
  }
  uint64_t result = sub_24A4DFD84(a2, v17, a3);
  unint64_t v22 = result;
  if ((a3 & 0x1000000000000000) == 0)
  {
LABEL_7:
    unint64_t v23 = v22 >> 16;
    if (v20 > 255) {
      goto LABEL_8;
    }
    goto LABEL_66;
  }
LABEL_62:
  unint64_t v175 = v17 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0x2000000000000000) != 0) {
    unint64_t v175 = HIBYTE(a3) & 0xF;
  }
  if (v175 < v22 >> 16) {
    goto LABEL_84;
  }
  uint64_t result = sub_24A5BB750();
  unint64_t v23 = result;
  if (v20 <= 255)
  {
LABEL_66:
    sub_24A4D3054(v196, a2, v195);
LABEL_67:
    _s12InsertResultOMa();
    return swift_storeEnumTagMultiPayload();
  }
LABEL_8:
  if ((unint64_t)v20 >= 0x17B) {
    uint64_t v24 = 255;
  }
  else {
    uint64_t v24 = v20 - 124;
  }
  if (v20 - v24 > 252) {
    goto LABEL_67;
  }
  if ((uint64_t)v23 >= v24)
  {
    if ((a3 & 0x1000000000000000) != 0)
    {
      unint64_t v79 = MEMORY[0x24C5C6A60](15, v24, v17, a3);
    }
    else
    {
      unint64_t v78 = HIBYTE(a3) & 0xF;
      if ((a3 & 0x2000000000000000) == 0) {
        unint64_t v78 = v17 & 0xFFFFFFFFFFFFLL;
      }
      if (v78 < v24) {
        goto LABEL_74;
      }
      unint64_t v79 = (v24 << 16) | 4;
    }
    unint64_t v80 = sub_24A497020(v79, v17, a3);
    unint64_t v81 = sub_24A494C18(v80, v17, a3, ((unint64_t)*(unsigned __int8 *)(v16 + 21) << 40) | ((unint64_t)*(unsigned int *)(v16 + 17) << 8) | v15);
    unsigned __int8 v82 = v81;
    LODWORD(v189) = v83;
    uint64_t v184 = v81 >> 8;
    unint64_t v185 = v81 >> 16;
    unint64_t v186 = v81 >> 24;
    unint64_t v187 = HIDWORD(v81);
    uint64_t v188 = v81 >> 40;
    uint64_t v190 = (char *)HIWORD(v81);
    uint64_t v191 = (char *)HIBYTE(v81);
    LODWORD(v193) = v83 >> 8;
    LODWORD(v192) = HIWORD(v83);
    LODWORD(v194) = HIBYTE(v83);
    swift_bridgeObjectRetain();
    unint64_t v84 = sub_24A494C00(v80, v17, a3);
    uint64_t v86 = v85;
    uint64_t v88 = v87;
    uint64_t v90 = v89;
    swift_bridgeObjectRelease();
    uint64_t v24 = MEMORY[0x24C5C68C0](v84, v86, v88, v90);
    unint64_t v15 = v91;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v92 = sub_24A5BB830();
    uint64_t v94 = v93;
    uint64_t v18 = v95;
    uint64_t v97 = v96;
    swift_bridgeObjectRelease();
    unint64_t v17 = MEMORY[0x24C5C68C0](v92, v94, v18, v97);
    uint64_t v99 = v98;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)unint64_t v16 = v17;
    *(void *)(v16 + 8) = v99;
    *(unsigned char *)(v16 + 16) = v82;
    *(unsigned char *)(v16 + 17) = v184;
    *(unsigned char *)(v16 + 18) = v185;
    *(unsigned char *)(v16 + 19) = v186;
    *(unsigned char *)(v16 + 20) = v187;
    *(unsigned char *)(v16 + 21) = v188;
    unint64_t v211 = v24;
    unint64_t v212 = v15;
    LOBYTE(v213) = (_BYTE)v190;
    BYTE1(v213) = (_BYTE)v191;
    BYTE2(v213) = (_BYTE)v189;
    BYTE3(v213) = (_BYTE)v193;
    BYTE4(v213) = v192;
    unint64_t v22 = v23 - v82;
    BYTE5(v213) = v194;
    if ((v15 & 0x1000000000000000) != 0)
    {
LABEL_71:
      unint64_t v101 = MEMORY[0x24C5C6A60](15, v22, v24, v15);
      goto LABEL_36;
    }
    if ((v22 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      unint64_t v100 = HIBYTE(v15) & 0xF;
      if ((v15 & 0x2000000000000000) == 0) {
        unint64_t v100 = v24 & 0xFFFFFFFFFFFFLL;
      }
      if (v100 >= v22)
      {
        unint64_t v101 = (v22 << 16) | 4;
LABEL_36:
        uint64_t v102 = v195;
        uint64_t v103 = __swift_instantiateConcreteTypeFromMangledName(&qword_26979B1E8);
        sub_24A4D3054(v196, v101, (void *)((char *)v102 + *(int *)(v103 + 48)));
        unint64_t v104 = v212;
        __int16 v105 = WORD2(v213);
        *uint64_t v102 = v211;
        v102[1] = v104;
        *((_DWORD *)v102 + 4) = v213;
        *((_WORD *)v102 + 10) = v105;
        _s12InsertResultOMa();
        return swift_storeEnumTagMultiPayload();
      }
    }
    __break(1u);
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  if (__OFADD__(v23, v18))
  {
    __break(1u);
    goto LABEL_71;
  }
  unint64_t v185 = v15 + v18;
  if (v24 >= (uint64_t)(v23 + v18))
  {
    unint64_t v106 = v24 - v18;
    if ((a3 & 0x1000000000000000) != 0)
    {
      unint64_t v108 = MEMORY[0x24C5C6A60](15, v106, v17, a3);
    }
    else
    {
      if ((v106 & 0x8000000000000000) != 0)
      {
LABEL_80:
        __break(1u);
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
        goto LABEL_83;
      }
      unint64_t v107 = HIBYTE(a3) & 0xF;
      if ((a3 & 0x2000000000000000) == 0) {
        unint64_t v107 = v17 & 0xFFFFFFFFFFFFLL;
      }
      if (v107 < v106) {
        goto LABEL_81;
      }
      unint64_t v108 = (v106 << 16) | 4;
    }
    unint64_t v109 = sub_24A497020(v108, v17, a3);
    unint64_t v110 = ((unint64_t)*(unsigned __int8 *)(v16 + 21) << 40) | ((unint64_t)*(unsigned int *)(v16 + 17) << 8) | v15;
    unint64_t v111 = v109;
    unint64_t v112 = sub_24A494C18(v109, v17, a3, v110);
    char v113 = v112;
    LODWORD(v182) = v114;
    unint64_t v177 = v112 >> 8;
    unint64_t v178 = v112 >> 16;
    unint64_t v179 = v112 >> 24;
    unint64_t v180 = HIDWORD(v112);
    unint64_t v181 = v112 >> 40;
    uint64_t v183 = HIWORD(v112);
    uint64_t v184 = HIBYTE(v112);
    LODWORD(v192) = v114 >> 8;
    LODWORD(v191) = HIWORD(v114);
    LODWORD(v188) = HIBYTE(v114);
    swift_bridgeObjectRetain();
    unint64_t v115 = sub_24A494C00(v111, v17, a3);
    uint64_t v117 = v116;
    uint64_t v119 = v118;
    uint64_t v121 = v120;
    swift_bridgeObjectRelease();
    uint64_t v122 = MEMORY[0x24C5C68C0](v115, v117, v119, v121);
    unint64_t v124 = v123;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v125 = sub_24A5BB830();
    uint64_t v127 = v126;
    uint64_t v129 = v128;
    uint64_t v131 = v130;
    swift_bridgeObjectRelease();
    unint64_t v132 = v197;
    uint64_t v18 = MEMORY[0x24C5C68C0](v125, v127, v129, v131);
    unint64_t v17 = v133;
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)unint64_t v132 = v18;
    *(void *)(v132 + 8) = v17;
    *(unsigned char *)(v132 + 16) = v113;
    *(unsigned char *)(v132 + 17) = v177;
    *(unsigned char *)(v132 + 18) = v178;
    *(unsigned char *)(v132 + 19) = v179;
    *(unsigned char *)(v132 + 20) = v180;
    *(unsigned char *)(v132 + 21) = v181;
    unint64_t v211 = v122;
    unint64_t v212 = v124;
    LOBYTE(v213) = v183;
    BYTE1(v213) = v184;
    BYTE2(v213) = v182;
    BYTE3(v213) = v192;
    BYTE4(v213) = (_BYTE)v191;
    BYTE5(v213) = v188;
    if ((v17 & 0x1000000000000000) == 0)
    {
      uint64_t v134 = v195;
      uint64_t v135 = v196;
      if ((v23 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else
      {
        unint64_t v136 = HIBYTE(v17) & 0xF;
        if ((v17 & 0x2000000000000000) == 0) {
          unint64_t v136 = v18 & 0xFFFFFFFFFFFFLL;
        }
        if (v136 >= v23)
        {
          unint64_t v137 = (v23 << 16) | 4;
          unint64_t v138 = v187;
          unint64_t v139 = v186;
          goto LABEL_50;
        }
      }
      __break(1u);
LABEL_79:
      __break(1u);
      goto LABEL_80;
    }
LABEL_76:
    unint64_t v137 = MEMORY[0x24C5C6A60](15, v23, v18, v17);
    uint64_t v134 = v195;
    unint64_t v138 = v187;
    unint64_t v139 = v186;
    uint64_t v135 = v196;
LABEL_50:
    unint64_t v140 = v190;
    unint64_t v141 = v189;
    swift_bridgeObjectRetain();
    sub_24A4D3054(v135, v137, v141);
    if ((*(unsigned int (**)(void *, uint64_t, unint64_t))(v139 + 48))(v141, 1, v138) == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v142 = &qword_26979B1D8;
      uint64_t v143 = (uint64_t)v141;
    }
    else
    {
      unint64_t v197 = v23;
      uint64_t v153 = *(int *)(v138 + 48);
      uint64_t v154 = (uint64_t)v140 + v153;
      uint64_t v155 = *(int *)(v138 + 64);
      uint64_t v156 = (uint64_t)v140 + v155;
      uint64_t v157 = (char *)v141 + v153;
      uint64_t v158 = (char *)v141 + v155;
      *unint64_t v140 = *v141;
      uint64_t v159 = v193 + 4;
      uint64_t v160 = (void (*)(char *, char *, uint64_t))v193[4];
      uint64_t v161 = (char *)v140 + v153;
      uint64_t v162 = v194;
      v160(v161, v157, v194);
      uint64_t v193 = v159;
      v160((char *)v156, v158, v162);
      swift_bridgeObjectRelease();
      sub_24A48ED24(0xFuLL, v154, v156);
      if (v163)
      {
        uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&qword_26979B1E8);
        uint64_t v167 = *(int *)(result + 48);
        unint64_t v168 = v212;
        __int16 v169 = WORD2(v213);
        *uint64_t v134 = v211;
        v134[1] = v168;
        *((_DWORD *)v134 + 4) = v213;
        *((_WORD *)v134 + 10) = v169;
        if (__OFSUB__(v185, v197))
        {
LABEL_83:
          __break(1u);
LABEL_84:
          __break(1u);
          goto LABEL_85;
        }
        uint64_t v170 = (char *)v134 + v167;
        uint64_t v171 = (char *)v134 + v167 + *(int *)(v138 + 64);
        int v172 = (char *)v134 + v167 + *(int *)(v138 + 48);
        *(void *)((char *)v134 + v167) = v185 - v197;
        uint64_t v173 = v154;
        uint64_t v174 = v194;
        v160(v172, (char *)v173, v194);
        v160(v171, (char *)v156, v174);
        (*(void (**)(char *, void, uint64_t, unint64_t))(v139 + 56))(v170, 0, 1, v138);
LABEL_59:
        _s12InsertResultOMa();
        return swift_storeEnumTagMultiPayload();
      }
      uint64_t v142 = &qword_26979B1E0;
      uint64_t v143 = (uint64_t)v190;
    }
    sub_24A4D4710(v143, v142);
    uint64_t v164 = (char *)v134 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26979B1E8) + 48);
    unint64_t v165 = v212;
    __int16 v166 = WORD2(v213);
    *uint64_t v134 = v211;
    v134[1] = v165;
    *((_DWORD *)v134 + 4) = v213;
    *((_WORD *)v134 + 10) = v166;
    (*(void (**)(char *, uint64_t, uint64_t, unint64_t))(v139 + 56))(v164, 1, 1, v138);
    goto LABEL_59;
  }
  unint64_t v25 = sub_24A494C18(a2, v17, a3, ((unint64_t)*(unsigned __int8 *)(v16 + 21) << 40) | ((unint64_t)*(unsigned int *)(v16 + 17) << 8) | v15);
  char v26 = v25;
  char v28 = v27;
  unint64_t v177 = v25 >> 8;
  unint64_t v178 = v25 >> 16;
  unint64_t v179 = v25 >> 24;
  unint64_t v180 = HIDWORD(v25);
  unint64_t v181 = v25 >> 40;
  unint64_t v182 = HIWORD(v25);
  uint64_t v183 = HIBYTE(v25);
  LODWORD(v190) = v27 >> 8;
  LODWORD(v189) = HIWORD(v27);
  LODWORD(v184) = HIBYTE(v27);
  swift_bridgeObjectRetain();
  unint64_t v29 = sub_24A494C00(a2, v17, a3);
  uint64_t v31 = v30;
  uint64_t v176 = v32;
  uint64_t v34 = v33;
  swift_bridgeObjectRelease();
  uint64_t v176 = MEMORY[0x24C5C68C0](v29, v31, v176, v34);
  uint64_t v36 = v35;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v37 = sub_24A5BB830();
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  uint64_t v43 = v42;
  swift_bridgeObjectRelease();
  uint64_t v44 = MEMORY[0x24C5C68C0](v37, v39, v41, v43);
  unint64_t v17 = v45;
  swift_bridgeObjectRelease();
  uint64_t v18 = v36;
  swift_bridgeObjectRelease();
  *(void *)unint64_t v197 = v44;
  *(void *)(v197 + 8) = v17;
  *(unsigned char *)(v197 + 16) = v26;
  uint64_t v46 = (unsigned char *)v197;
  *(unsigned char *)(v197 + 17) = v177;
  v46[18] = v178;
  v46[19] = v179;
  v46[20] = v180;
  v46[21] = v181;
  uint64_t v198 = v176;
  uint64_t v199 = v36;
  LOBYTE(v200) = v182;
  BYTE1(v200) = v183;
  BYTE2(v200) = v28;
  HIBYTE(v200) = (_BYTE)v190;
  LOBYTE(v201) = (_BYTE)v189;
  HIBYTE(v201) = v184;
  uint64_t v47 = _s9_IngesterVMa();
  uint64_t v49 = v193 + 2;
  uint64_t v48 = (char *)v193[2];
  uint64_t v190 = (char *)v196 + *(int *)(v47 + 24);
  uint64_t v189 = v48;
  ((void (*)(uint64_t))v48)(v192);
  if (__OFSUB__(v24, v23))
  {
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }
  swift_bridgeObjectRetain();
  sub_24A49752C(v24 - v23, (unint64_t)v202);
  sub_24A491DB4((uint64_t)v202, (uint64_t)&v211);
  unint64_t v50 = v214;
  if (!v214) {
    goto LABEL_21;
  }
  unint64_t v51 = v211;
  unint64_t v52 = v212;
  unint64_t v53 = v213;
  uint64_t v54 = v216;
  uint64_t v184 = v215;
  uint64_t v183 = v217;
  uint64_t result = sub_24A4913AC(v211, v212, v213, v214);
  if (result > 255) {
    goto LABEL_79;
  }
  unint64_t v55 = sub_24A4913AC(v51, v52, v53, v50);
  uint64_t v56 = sub_24A5BB7C0();
  unint64_t v57 = sub_24A491A60(v51, v52, v53, v50);
  int64_t v58 = sub_24A491F14(v55, v56, v57, v184, v54, v183);
  sub_24A491E1C(v58 & 0xFFFFFFFFFFFFLL);
  uint64_t v204 = v51;
  unint64_t v205 = v52;
  unint64_t v206 = v53;
  unint64_t v207 = v50;
  sub_24A491D60();
  sub_24A5BB6D0();
  sub_24A491A34((uint64_t)v202);
LABEL_21:
  uint64_t v196 = v49;
  unint64_t v197 = v23;
  sub_24A49752C(255, (unint64_t)v203);
  uint64_t result = sub_24A491DB4((uint64_t)v203, (uint64_t)&v204);
  unint64_t v59 = v207;
  if (v207)
  {
    unint64_t v60 = v205;
    uint64_t v188 = v204;
    unint64_t v61 = v206;
    uint64_t v62 = v208;
    uint64_t v63 = v209;
    uint64_t v64 = v210;
    uint64_t v65 = (uint64_t)v191;
    uint64_t v66 = v194;
    ((void (*)(char *, char *, uint64_t))v189)(v191, v190, v194);
    swift_bridgeObjectRelease();
    uint64_t v67 = v192;
    sub_24A4D2D8C(v188, v60, v61, v59, v62, v63, v64, 0xFuLL, v192, v65);
    char v69 = v68;
    sub_24A491A34((uint64_t)v203);
    unint64_t v70 = v187;
    unint64_t v71 = v186;
    if ((v69 & 1) == 0)
    {
      uint64_t v72 = (void (*)(uint64_t, uint64_t))v193[1];
      v72(v65, v66);
      v72(v67, v66);
      uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&qword_26979B1E8);
      uint64_t v74 = v195;
      unsigned int v75 = (char *)v195 + *(int *)(v73 + 48);
      uint64_t v76 = v199;
      __int16 v77 = v201;
      *unint64_t v195 = v198;
      v74[1] = v76;
      *((_DWORD *)v74 + 4) = v200;
      *((_WORD *)v74 + 10) = v77;
      (*(void (**)(char *, uint64_t, uint64_t, unint64_t))(v71 + 56))(v75, 1, 1, v70);
      _s12InsertResultOMa();
      return swift_storeEnumTagMultiPayload();
    }
    uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&qword_26979B1E8);
    uint64_t v144 = *(int *)(result + 48);
    uint64_t v145 = v199;
    __int16 v146 = v201;
    uint64_t v147 = v195;
    *unint64_t v195 = v198;
    v147[1] = v145;
    *((_DWORD *)v147 + 4) = v200;
    *((_WORD *)v147 + 10) = v146;
    if (!__OFSUB__(v185, v197))
    {
      unint64_t v148 = (char *)v147 + v144;
      unint64_t v149 = (char *)v147 + v144 + *(int *)(v70 + 64);
      char v150 = (char *)v147 + v144 + *(int *)(v70 + 48);
      *(void *)((char *)v147 + v144) = v185 - v197;
      unint64_t v151 = (void (*)(char *, uint64_t, uint64_t))v193[4];
      uint64_t v152 = v194;
      v151(v150, v192, v194);
      v151(v149, (uint64_t)v191, v152);
      (*(void (**)(char *, void, uint64_t, unint64_t))(v71 + 56))(v148, 0, 1, v70);
      _s12InsertResultOMa();
      return swift_storeEnumTagMultiPayload();
    }
    goto LABEL_82;
  }
LABEL_85:
  __break(1u);
  return result;
}

uint64_t sub_24A4D45FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_bridgeObjectRelease();
}

uint64_t _s12InsertResultOMa()
{
  uint64_t result = qword_26979B1F8;
  if (!qword_26979B1F8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_24A4D4710(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_24A4D476C()
{
  unint64_t result = qword_26979B1F0;
  if (!qword_26979B1F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979B1F0);
  }
  return result;
}

void *sub_24A4D47C0(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (void *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
      *((_WORD *)a1 + 10) = *((_WORD *)a2 + 10);
      swift_bridgeObjectRetain();
      uint64_t v13 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26979B1E8) + 48);
      uint64_t v14 = (void *)((char *)a1 + v13);
      unint64_t v15 = (void *)((char *)a2 + v13);
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_26979B1E0);
      uint64_t v17 = *(void *)(v16 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
      {
        uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_26979B1D8);
        memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
      }
      else
      {
        *uint64_t v14 = *v15;
        uint64_t v24 = *(int *)(v16 + 48);
        unint64_t v29 = (char *)v14 + v24;
        unint64_t v25 = (char *)v15 + v24;
        uint64_t v26 = sub_24A5BC780();
        unsigned int v27 = *(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16);
        v27(v29, v25, v26);
        v27((char *)v14 + *(int *)(v16 + 64), (char *)v15 + *(int *)(v16 + 64), v26);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      }
      goto LABEL_13;
    }
    if (!EnumCaseMultiPayload)
    {
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_26979B1E0);
      uint64_t v9 = *(void *)(v8 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
      {
        uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_26979B1D8);
        memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
      }
      else
      {
        *a1 = *a2;
        uint64_t v19 = *(int *)(v8 + 48);
        uint64_t v20 = (char *)a1 + v19;
        uint64_t v21 = (char *)a2 + v19;
        uint64_t v22 = sub_24A5BC780();
        unint64_t v23 = *(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16);
        v23(v20, v21, v22);
        v23((char *)a1 + *(int *)(v8 + 64), (char *)a2 + *(int *)(v8 + 64), v22);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
      }
LABEL_13:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(void *)(v6 + 64));
  }
  return a1;
}

uint64_t sub_24A4D4B40(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    swift_bridgeObjectRelease();
    a1 += *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26979B1E8) + 48);
  }
  else if (result)
  {
    return result;
  }
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26979B1E0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(a1, 1, v3);
  if (!result)
  {
    uint64_t v4 = a1 + *(int *)(v3 + 48);
    uint64_t v5 = sub_24A5BC780();
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    ((void (*)(void *__return_ptr, uint64_t, uint64_t))v7)((void *)(v5 - 8), v4, v5);
    uint64_t v6 = a1 + *(int *)(v3 + 64);
    return v7(v6, v5);
  }
  return result;
}

void *sub_24A4D4C70(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
    *((_WORD *)a1 + 10) = *((_WORD *)a2 + 10);
    swift_bridgeObjectRetain();
    uint64_t v11 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26979B1E8) + 48);
    uint64_t v12 = (void *)((char *)a1 + v11);
    uint64_t v13 = (void *)((char *)a2 + v11);
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_26979B1E0);
    uint64_t v15 = *(void *)(v14 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_26979B1D8);
      memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      *uint64_t v12 = *v13;
      uint64_t v22 = *(int *)(v14 + 48);
      unsigned int v27 = (char *)v12 + v22;
      unint64_t v23 = (char *)v13 + v22;
      uint64_t v24 = sub_24A5BC780();
      unint64_t v25 = *(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16);
      v25(v27, v23, v24);
      v25((char *)v12 + *(int *)(v14 + 64), (char *)v13 + *(int *)(v14 + 64), v24);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    goto LABEL_11;
  }
  if (!EnumCaseMultiPayload)
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_26979B1E0);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_26979B1D8);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      uint64_t v17 = *(int *)(v7 + 48);
      uint64_t v18 = (char *)a1 + v17;
      uint64_t v19 = (char *)a2 + v17;
      uint64_t v20 = sub_24A5BC780();
      uint64_t v21 = *(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16);
      v21(v18, v19, v20);
      v21((char *)a1 + *(int *)(v7 + 64), (char *)a2 + *(int *)(v7 + 64), v20);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
LABEL_11:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

void *sub_24A4D4FAC(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_24A4D5300((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      int v10 = *((_DWORD *)a2 + 4);
      *((_WORD *)a1 + 10) = *((_WORD *)a2 + 10);
      *((_DWORD *)a1 + 4) = v10;
      swift_bridgeObjectRetain();
      uint64_t v11 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26979B1E8) + 48);
      uint64_t v12 = (void *)((char *)a1 + v11);
      uint64_t v13 = (void *)((char *)a2 + v11);
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_26979B1E0);
      uint64_t v15 = *(void *)(v14 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_26979B1D8);
        memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
      }
      else
      {
        *uint64_t v12 = *v13;
        uint64_t v22 = *(int *)(v14 + 48);
        unsigned int v27 = (char *)v12 + v22;
        unint64_t v23 = (char *)v13 + v22;
        uint64_t v24 = sub_24A5BC780();
        unint64_t v25 = *(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16);
        v25(v27, v23, v24);
        v25((char *)v12 + *(int *)(v14 + 64), (char *)v13 + *(int *)(v14 + 64), v24);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
      goto LABEL_12;
    }
    if (!EnumCaseMultiPayload)
    {
      uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_26979B1E0);
      uint64_t v8 = *(void *)(v7 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
      {
        uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_26979B1D8);
        memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
      }
      else
      {
        *a1 = *a2;
        uint64_t v17 = *(int *)(v7 + 48);
        uint64_t v18 = (char *)a1 + v17;
        uint64_t v19 = (char *)a2 + v17;
        uint64_t v20 = sub_24A5BC780();
        uint64_t v21 = *(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16);
        v21(v18, v19, v20);
        v21((char *)a1 + *(int *)(v7 + 64), (char *)a2 + *(int *)(v7 + 64), v20);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      }
LABEL_12:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t sub_24A4D5300(uint64_t a1)
{
  uint64_t inserted = _s12InsertResultOMa();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(inserted - 8) + 8))(a1, inserted);
  return a1;
}

char *sub_24A4D535C(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 14) = *(void *)(a2 + 14);
    uint64_t v10 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26979B1E8) + 48);
    uint64_t v11 = &a1[v10];
    uint64_t v12 = &a2[v10];
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_26979B1E0);
    uint64_t v14 = *(void *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_26979B1D8);
      memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      *(void *)uint64_t v11 = *(void *)v12;
      uint64_t v21 = *(int *)(v13 + 48);
      uint64_t v26 = &v11[v21];
      uint64_t v22 = &v12[v21];
      uint64_t v23 = sub_24A5BC780();
      uint64_t v24 = *(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32);
      v24(v26, v22, v23);
      v24(&v11[*(int *)(v13 + 64)], &v12[*(int *)(v13 + 64)], v23);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    goto LABEL_11;
  }
  if (!EnumCaseMultiPayload)
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_26979B1E0);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_26979B1D8);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      uint64_t v16 = *(int *)(v7 + 48);
      uint64_t v17 = &a1[v16];
      uint64_t v18 = &a2[v16];
      uint64_t v19 = sub_24A5BC780();
      uint64_t v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32);
      v20(v17, v18, v19);
      v20(&a1[*(int *)(v7 + 64)], &a2[*(int *)(v7 + 64)], v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
LABEL_11:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

char *sub_24A4D568C(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_24A4D5300((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 14) = *(void *)(a2 + 14);
      uint64_t v10 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26979B1E8) + 48);
      uint64_t v11 = &a1[v10];
      uint64_t v12 = &a2[v10];
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_26979B1E0);
      uint64_t v14 = *(void *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
      {
        uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_26979B1D8);
        memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
      }
      else
      {
        *(void *)uint64_t v11 = *(void *)v12;
        uint64_t v21 = *(int *)(v13 + 48);
        uint64_t v26 = &v11[v21];
        uint64_t v22 = &v12[v21];
        uint64_t v23 = sub_24A5BC780();
        uint64_t v24 = *(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32);
        v24(v26, v22, v23);
        v24(&v11[*(int *)(v13 + 64)], &v12[*(int *)(v13 + 64)], v23);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      }
      goto LABEL_12;
    }
    if (!EnumCaseMultiPayload)
    {
      uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_26979B1E0);
      uint64_t v8 = *(void *)(v7 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
      {
        uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_26979B1D8);
        memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
      }
      else
      {
        *(void *)a1 = *(void *)a2;
        uint64_t v16 = *(int *)(v7 + 48);
        uint64_t v17 = &a1[v16];
        uint64_t v18 = &a2[v16];
        uint64_t v19 = sub_24A5BC780();
        uint64_t v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32);
        v20(v17, v18, v19);
        v20(&a1[*(int *)(v7 + 64)], &a2[*(int *)(v7 + 64)], v19);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      }
LABEL_12:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t sub_24A4D59CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t sub_24A4D59F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_24A4D5A20()
{
  return swift_storeEnumTagMultiPayload();
}

void sub_24A4D5A30()
{
  sub_24A4D5AD0();
  if (v1 <= 0x3F)
  {
    v2[4] = *(void *)(v0 - 8) + 64;
    swift_getTupleTypeLayout2();
    v2[5] = v2;
    swift_initEnumMetadataMultiPayload();
  }
}

void sub_24A4D5AD0()
{
  if (!qword_26979B208)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26979B1E0);
    unint64_t v0 = sub_24A5BBD20();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26979B208);
    }
  }
}

uint64_t OrderedDictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = sub_24A4D5BD8(a1, a2, a3, a4);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_24A4D5B78@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = sub_24A4D5BD8(a1, a2[2], a2[3], a2[4]);
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v4;
  a3[1] = v6;
  a3[2] = v8;
  return result;
}

uint64_t sub_24A4D5BD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a1;
  swift_getTupleTypeMetadata2();
  uint64_t v7 = sub_24A5BB9F0();
  swift_getWitnessTable();
  return sub_24A4C4E30((char *)&v9, a2, a3, v7, a4);
}

Swift::Bool __swiftcall BitSet.contains(_:)(Swift::Int a1)
{
  if (a1 < 0 || (unint64_t)a1 >> 6 >= *(void *)(v1 + 16)) {
    LOBYTE(v2) = 0;
  }
  else {
    return (*(void *)(v1 + 8 * ((unint64_t)a1 >> 6) + 32) >> a1) & 1;
  }
  return v2;
}

Swift::tuple_inserted_Bool_memberAfterInsert_Int __swiftcall BitSet.insert(_:)(Swift::Int a1)
{
  if (a1 < 0)
  {
    __break(1u);
LABEL_9:
    uint64_t v3 = sub_24A499D60((uint64_t)v3);
    goto LABEL_7;
  }
  Swift::Int v1 = a1;
  unint64_t v4 = (unint64_t)a1 >> 6;
  uint64_t v3 = *v2;
  unint64_t v5 = *((void *)*v2 + 2);
  BOOL v6 = (unint64_t)a1 >> 6 >= v5;
  uint64_t v7 = ((unint64_t)a1 >> 6) - v5;
  if (v6)
  {
    if (v7 < -1)
    {
      __break(1u);
      goto LABEL_11;
    }
    sub_24A4D5F98(v7 + 1, 0);
    uint64_t v3 = *v2;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_9;
  }
LABEL_7:
  uint64_t v8 = &v3[8 * v4];
  uint64_t v9 = *((void *)v8 + 4);
  *((void *)v8 + 4) = v9 | (1 << v1);
  LOBYTE(a1) = (v9 & (1 << v1)) == 0;
  *BOOL v2 = v3;
  Swift::Int v10 = v1;
LABEL_11:
  result.memberAfterInsert = v10;
  result.uint64_t inserted = a1;
  return result;
}

Swift::Int_optional __swiftcall BitSet.remove(_:)(Swift::Int a1)
{
  if (a1 < 0)
  {
    Swift::Int v7 = 0;
    char v8 = 1;
  }
  else
  {
    uint64_t v3 = (char *)*v1;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v3 = sub_24A499D60((uint64_t)v3);
    }
    if ((unint64_t)a1 >> 6 >= *((void *)v3 + 2))
    {
      BOOL v6 = 0;
    }
    else
    {
      unint64_t v4 = &v3[8 * ((unint64_t)a1 >> 6)];
      uint64_t v5 = *((void *)v4 + 4);
      BOOL v6 = (v5 & (1 << a1)) != 0;
      *((void *)v4 + 4) = v5 & ~(1 << a1);
    }
    BOOL v9 = v6;
    *Swift::Int v1 = (uint64_t)v3;
    sub_24A54A3A0(&v9, v1);
    if (v6) {
      Swift::Int v7 = a1;
    }
    else {
      Swift::Int v7 = 0;
    }
    char v8 = !v6;
  }
  result.value = v7;
  result.is_nil = v8;
  return result;
}

Swift::Int_optional __swiftcall BitSet.update(with:)(Swift::Int with)
{
  Swift::Bool inserted = BitSet.insert(_:)(with).inserted;
  if (inserted) {
    Swift::Int v3 = with;
  }
  else {
    Swift::Int v3 = 0;
  }
  Swift::Bool v4 = !inserted;
  Swift::Int v5 = v3;
  result.value = v5;
  result.is_nil = v4;
  return result;
}

Swift::Bool __swiftcall BitSet._contains(_:)(Swift::UInt a1)
{
  if (a1 >> 6 >= *(void *)(v1 + 16)) {
    LOBYTE(v2) = 0;
  }
  else {
    return (*(void *)(v1 + 8 * (a1 >> 6) + 32) >> a1) & 1;
  }
  return v2;
}

Swift::Bool __swiftcall BitSet._insert(_:)(Swift::UInt a1)
{
  char v2 = a1;
  Swift::UInt v3 = a1 >> 6;
  Swift::Bool v4 = *v1;
  Swift::UInt v5 = *((void *)*v1 + 2);
  BOOL v6 = a1 >> 6 >= v5;
  uint64_t v7 = (a1 >> 6) - v5;
  if (v6)
  {
    if (v7 < -1)
    {
      __break(1u);
      return a1;
    }
    sub_24A4D5F98(v7 + 1, 0);
    Swift::Bool v4 = *v1;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    Swift::Bool v4 = sub_24A499D60((uint64_t)v4);
  }
  char v8 = &v4[8 * v3];
  uint64_t v9 = *((void *)v8 + 4);
  *((void *)v8 + 4) = v9 | (1 << v2);
  LOBYTE(a1) = (v9 & (1 << v2)) == 0;
  *uint64_t v1 = v4;
  return a1;
}

Swift::Bool __swiftcall BitSet._remove(_:)(Swift::UInt a1)
{
  Swift::UInt v3 = (char *)*v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    Swift::UInt v3 = sub_24A499D60((uint64_t)v3);
  }
  if (a1 >> 6 >= *((void *)v3 + 2))
  {
    Swift::Bool v7 = 0;
  }
  else
  {
    Swift::Bool v4 = &v3[8 * (a1 >> 6)];
    uint64_t v5 = 1 << a1;
    uint64_t v6 = *((void *)v4 + 4);
    Swift::Bool v7 = (v6 & (1 << a1)) != 0;
    *((void *)v4 + 4) = v6 & ~v5;
  }
  Swift::Bool v9 = v7;
  *uint64_t v1 = (uint64_t)v3;
  sub_24A54A3A0(&v9, v1);
  return v7;
}

uint64_t sub_24A4D5F98(uint64_t result, unint64_t a2)
{
  Swift::Bool v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  int64_t v6 = v5 + result;
  if (__OFADD__(v5, result))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v8 = result;
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (int64_t v10 = *((void *)v4 + 3) >> 1, v10 < v6))
  {
    if (v5 <= v6) {
      int64_t v11 = v6;
    }
    else {
      int64_t v11 = v5;
    }
    Swift::Bool v4 = sub_24A499EB0(isUniquelyReferenced_nonNull_native, v11, 1, v4);
    int64_t v10 = *((void *)v4 + 3) >> 1;
  }
  uint64_t v12 = *((void *)v4 + 2);
  uint64_t v13 = v10 - v12;
  Swift::Int_optional result = (uint64_t)sub_24A596E08(&v38, (unint64_t *)&v4[8 * v12 + 32], v10 - v12, v8, a2);
  if (result < v8) {
    goto LABEL_15;
  }
  if (result >= 1)
  {
    uint64_t v14 = *((void *)v4 + 2);
    BOOL v15 = __OFADD__(v14, result);
    uint64_t v16 = v14 + result;
    if (v15)
    {
      __break(1u);
LABEL_34:
      uint64_t v27 = v34 + v3 + 1;
      goto LABEL_35;
    }
    *((void *)v4 + 2) = v16;
  }
  if (result != v13)
  {
LABEL_13:
    *char v2 = v4;
    return result;
  }
LABEL_16:
  uint64_t v17 = v40;
  uint64_t v18 = v38;
  if (v40 == v38) {
    goto LABEL_13;
  }
  int64_t v19 = *((void *)v4 + 2);
  uint64_t v36 = v39;
  uint64_t v20 = sub_24A4D6210((uint64_t (*)())v37, v40, v38, v39);
  uint64_t v22 = *v21;
  Swift::Int_optional result = ((uint64_t (*)(unsigned char *, void))v20)(v37, 0);
  if (v17 < 0 || v17 >= v18) {
    goto LABEL_37;
  }
  uint64_t v23 = v17 + 1;
  uint64_t v24 = -v18;
LABEL_21:
  while (1)
  {
    unint64_t v25 = *((void *)v4 + 3);
    int64_t v26 = v25 >> 1;
    uint64_t v27 = v19 + 1;
    if ((uint64_t)(v25 >> 1) < v19 + 1) {
      break;
    }
    if (v19 < v26) {
      goto LABEL_23;
    }
LABEL_20:
    *((void *)v4 + 2) = v19;
  }
  Swift::Int_optional result = (uint64_t)sub_24A499EB0((char *)(v25 > 1), v19 + 1, 1, v4);
  Swift::Bool v4 = (char *)result;
  int64_t v26 = *(void *)(result + 24) >> 1;
  if (v19 >= v26) {
    goto LABEL_20;
  }
LABEL_23:
  int64_t v35 = v26;
  char v28 = &v4[8 * v19];
  *((void *)v28 + 4) = v22;
  if (v23 == v18)
  {
LABEL_35:
    *((void *)v4 + 2) = v27;
    goto LABEL_13;
  }
  uint64_t v3 = 0;
  uint64_t v29 = v24 + v23;
  int64_t v34 = v19;
  int64_t v30 = ~v19 + v26;
  uint64_t v31 = v28 + 40;
  while (1)
  {
    uint64_t v32 = sub_24A4D6210((uint64_t (*)())v37, v23 + v3, v18, v36);
    uint64_t v22 = *v33;
    Swift::Int_optional result = ((uint64_t (*)(unsigned char *, void))v32)(v37, 0);
    if (v23 < 0 || v23 + v3 >= v18) {
      break;
    }
    if (v30 == v3)
    {
      v23 += v3 + 1;
      int64_t v19 = v35;
      uint64_t v24 = -v18;
      *((void *)v4 + 2) = v35;
      goto LABEL_21;
    }
    *(void *)&v31[8 * v3++] = v22;
    if (!(v29 + v3)) {
      goto LABEL_34;
    }
  }
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

uint64_t (*sub_24A4D6210(uint64_t (*result)(), uint64_t a2, uint64_t a3, uint64_t a4))()
{
  if (a2 < 0 || a2 >= a3)
  {
    __break(1u);
  }
  else
  {
    *(void *)Swift::Int_optional result = a4;
    return nullsub_1;
  }
  return result;
}

uint64_t TreeSet.remove(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v8 = sub_24A5BBD20();
  uint64_t v9 = swift_getTupleTypeMetadata2();
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t result = MEMORY[0x270FA5388](v11);
  if (*(void *)a1 == *v3 && (uint64_t v17 = v3[2], *(void *)(a1 + 8) == v17))
  {
    uint64_t v41 = v15;
    uint64_t v42 = v14;
    v3[2] = v17 + 1;
    uint64_t v18 = (char *)&v41 - v13;
    int64_t v19 = (char *)&v41 + *(int *)(result + 48) - v13;
    unint64_t v45 = v3;
    uint64_t v46 = TupleTypeMetadata2;
    unint64_t v20 = *(void *)(a1 + 16);
    uint64_t v21 = *(uint64_t **)(a1 + 24);
    uint64_t v43 = a3;
    unint64_t v44 = v20;
    uint64_t v22 = result;
    uint64_t v23 = v16;
    uint64_t v24 = *(unsigned int *)(a1 + 32);
    uint64_t v25 = *(unsigned __int8 *)(a1 + 36);
    int v26 = *(unsigned __int8 *)(a1 + 37);
    char v28 = (void *)type metadata accessor for _HashNode();
    uint64_t v29 = v24 | (v25 << 32);
    uint64_t v30 = v8;
    uint64_t v31 = v23;
    uint64_t v32 = v22;
    uint64_t v33 = 0x10000000000;
    if (!v26) {
      uint64_t v33 = 0;
    }
    _HashNode.remove(_:at:)(v18, v27, (uint64_t)v19, 0, v44, v21, v29 | v33, v28);
    uint64_t v34 = v31 + *(int *)(v22 + 48);
    uint64_t v35 = *(void *)(v6 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v35 + 16))(v31, v18, v6);
    uint64_t v36 = *(void *)(v30 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v36 + 16))(v34, v19, v30);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v46 - 8) + 48))(v34, 1);
    if (result == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v31, v32);
      uint64_t v37 = *(int *)(v32 + 48);
      uint64_t v38 = v42;
      uint64_t v39 = &v42[v37];
      uint64_t v40 = *(void (**)(uint64_t, char *, uint64_t))(v35 + 32);
      v40((uint64_t)v42, v18, v6);
      (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v39, v19, v30);
      v40(v43, v38, v6);
      return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v39, v30);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t TreeSet.update(_:at:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v6 = v4[2];
  if (*(void *)a2 != *v4 || *(void *)(a2 + 8) != v6 || (*(unsigned char *)(a2 + 37) & 1) == 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v9 = result;
    uint64_t v10 = *(void *)(a2 + 24);
    v4[2] = v6 + 1;
    uint64_t v11 = *(void *)(a3 + 16);
    uint64_t v12 = nullsub_1(v10 + 16, v10 + 32, v11, MEMORY[0x263F8EE60] + 8, *(void *)(a3 + 24));
    return sub_24A4D667C(v12, v9, v11, a4);
  }
  return result;
}

uint64_t sub_24A4D667C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, char *a4@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v6 = *(void *)(a3 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v21 - v10;
  uint64_t v15 = _HashNode.UnsafeHandle.itemPtr(at:)(*(_DWORD *)(v12 + 32), v13, v14);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v21 = a4;
  uint64_t v17 = a4;
  uint64_t v18 = v22;
  v16(v17, v22, a3);
  v16(v11, v18, a3);
  v16(v9, v15, a3);
  LOBYTE(v18) = sub_24A5BB530();
  int64_t v19 = *(void (**)(char *, uint64_t))(v6 + 8);
  v19(v9, a3);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v19)(v11, a3);
  if (v18) {
    return sub_24A5BC5A0();
  }
  __break(1u);
  return result;
}

uint64_t Rope._Node.append(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  Swift::Bool v4 = v3;
  uint64_t v93 = a3;
  uint64_t v86 = sub_24A5BBD20();
  uint64_t v88 = *(void *)(v86 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v86);
  unint64_t v84 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v87 = (uint64_t)&v76 - v9;
  uint64_t v11 = *(void *)(a2 + 16);
  uint64_t v10 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v94 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v12 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v89 = (char *)&v76 - v13;
  uint64_t v98 = *(void *)(a2 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  unsigned int v83 = (char *)&v76 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v95 = (uint64_t)&v76 - v16;
  uint64_t v17 = type metadata accessor for Rope._Node._ModifyState();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  unint64_t v20 = (uint64_t *)((char *)&v76 - v19);
  uint64_t v21 = type metadata accessor for Rope._Item();
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v76 - v22;
  uint64_t v91 = v24;
  uint64_t v92 = a1;
  uint64_t v25 = a1;
  int v26 = v4;
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))((char *)&v76 - v22, v25, v21);
  uint64_t v97 = v23;
  if ((Rope._Item.isUndersized.getter(v21) & 1) != 0 && !Rope._Node.isEmpty.getter())
  {
    Rope._Node._prepareModifyLast()(a2, v20);
    char v27 = Rope._Item.rebalance(nextNeighbor:)((uint64_t)v97, v21);
    sub_24A4FFDC8(v4, v20, v11, v10);
    (*(void (**)(void *, uint64_t))(v18 + 8))(v20, v17);
    if (v27)
    {
      char v28 = *(void (**)(uint64_t, uint64_t))(v91 + 8);
      v28(v92, v21);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v98 + 56))(v93, 1, 1, a2);
LABEL_22:
      uint64_t v61 = (uint64_t)v97;
      return ((uint64_t (*)(uint64_t, uint64_t))v28)(v61, v21);
    }
  }
  uint64_t v90 = v10;
  uint64_t v85 = v21;
  Rope._Node.ensureUnique()();
  uint64_t v29 = v98;
  uint64_t v30 = v95;
  (*(void (**)(uint64_t, void *, uint64_t))(v98 + 16))(v95, v4, a2);
  int v31 = Rope._Node.header.getter();
  uint64_t v33 = (char *)(v29 + 8);
  uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
  v32(v30, a2);
  if ((v31 & 0xFF0000) != 0)
  {
    __int16 v77 = v32;
    unsigned __int8 v82 = (char *)v26 + *(int *)(a2 + 36);
    uint64_t v34 = v94;
    uint64_t v35 = (uint64_t)v89;
    uint64_t v36 = AssociatedTypeWitness;
    (*(void (**)(char *))(v94 + 16))(v89);
    uint64_t v37 = *v26;
    uint64_t v38 = *v26 + 16;
    unint64_t v39 = (*(unsigned __int8 *)(v98 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80);
    unint64_t v80 = v26;
    unint64_t v78 = v39;
    uint64_t v40 = v37 + v39;
    uint64_t v41 = v11;
    uint64_t WitnessTable = (void (*)(uint64_t, uint64_t, uint64_t))swift_getWitnessTable();
    uint64_t v42 = (unsigned __int16 *)nullsub_1(v38, v40, v11, a2, v90);
    uint64_t v44 = v43;
    swift_unknownObjectRetain();
    uint64_t v45 = v44;
    uint64_t v46 = v34;
    uint64_t v47 = v87;
    uint64_t v48 = v86;
    uint64_t v79 = v41;
    sub_24A4D78B4(v42, v45, v35, (uint64_t)v97, v41, v87);
    uint64_t v49 = v98;
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t, uint64_t))(v46 + 24))(v82, v35, v36);
    uint64_t v50 = v88;
    unint64_t v51 = v84;
    (*(void (**)(char *, uint64_t, uint64_t))(v88 + 16))(v84, v47, v48);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v51, 1, a2) == 1)
    {
      unint64_t v52 = *(void (**)(uint64_t, uint64_t))(v91 + 8);
      uint64_t v21 = v85;
      v52(v92, v85);
      unint64_t v53 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
      v53(v47, v48);
      uint64_t v54 = v48;
      char v28 = v52;
      v53((uint64_t)v51, v54);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v49 + 56))(v93, 1, 1, a2);
      unint64_t v55 = *(void (**)(char *, uint64_t))(v94 + 8);
      uint64_t v56 = (char *)v35;
LABEL_21:
      v55(v56, AssociatedTypeWitness);
      goto LABEL_22;
    }
    unsigned __int8 v82 = v33;
    uint64_t v64 = *(void (**)(char *, char *, uint64_t))(v49 + 32);
    uint64_t v65 = (uint64_t)v83;
    unint64_t v84 = (char *)(v49 + 32);
    v64(v83, v51, a2);
    uint64_t v66 = v79;
    uint64_t v67 = v90;
    char v68 = (unsigned __int16 *)nullsub_1(*v80 + 16, *v80 + v78, v79, a2, v90);
    uint64_t v70 = v69;
    swift_unknownObjectRetain();
    sub_24A4D7BA8(v68, v70, v66, v67);
    swift_unknownObjectRelease();
    if (!Rope._Node.isFull.getter())
    {
      sub_24A501CD0(v65, a2);
      char v28 = *(void (**)(uint64_t, uint64_t))(v91 + 8);
      uint64_t v21 = v85;
      v28(v92, v85);
      v77(v65, a2);
      (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v87, v86);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v49 + 56))(v93, 1, 1, a2);
      unint64_t v55 = *(void (**)(char *, uint64_t))(v94 + 8);
      uint64_t v56 = v89;
      goto LABEL_21;
    }
    uint64_t WitnessTable = (void (*)(uint64_t, uint64_t, uint64_t))v64;
    uint64_t v71 = AssociatedTypeWitness;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(v71, AssociatedConformanceWitness);
    uint64_t v73 = result + 1;
    if (!__OFADD__(result, 1))
    {
      if (v73 < 0) {
        uint64_t v73 = result + 2;
      }
      uint64_t v74 = v95;
      Rope._Node.split(keeping:)(v73 >> 1, a2, v95);
      sub_24A501CD0(v65, a2);
      char v28 = *(void (**)(uint64_t, uint64_t))(v91 + 8);
      uint64_t v21 = v85;
      v28(v92, v85);
      v77(v65, a2);
      (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v87, v86);
      uint64_t v75 = v93;
      WitnessTable(v93, v74, a2);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v98 + 56))(v75, 0, 1, a2);
      (*(void (**)(char *, uint64_t))(v94 + 8))(v89, v71);
      goto LABEL_22;
    }
  }
  else
  {
    if (!Rope._Node.isFull.getter())
    {
      uint64_t v61 = (uint64_t)v97;
      sub_24A501AC8((uint64_t)v97, a2);
      char v28 = *(void (**)(uint64_t, uint64_t))(v91 + 8);
      uint64_t v21 = v85;
      v28(v92, v85);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v93, 1, 1, a2);
      return ((uint64_t (*)(uint64_t, uint64_t))v28)(v61, v21);
    }
    uint64_t v57 = AssociatedTypeWitness;
    uint64_t v58 = swift_getAssociatedConformanceWitness();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v58 + 16))(v57, v58);
    uint64_t v60 = result + 1;
    uint64_t v21 = v85;
    uint64_t v61 = (uint64_t)v97;
    if (!__OFADD__(result, 1))
    {
      if (v60 < 0) {
        uint64_t v60 = result + 2;
      }
      uint64_t v62 = v95;
      Rope._Node.split(keeping:)(v60 >> 1, a2, v95);
      sub_24A501AC8(v61, a2);
      char v28 = *(void (**)(uint64_t, uint64_t))(v91 + 8);
      v28(v92, v21);
      uint64_t v63 = v93;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 32))(v93, v62, a2);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v29 + 56))(v63, 0, 1, a2);
      return ((uint64_t (*)(void, void))v28)(v61, v21);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_24A4D78B4@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v29 = a4;
  uint64_t v30 = a3;
  uint64_t v25 = a6;
  uint64_t v9 = type metadata accessor for Rope._Item();
  uint64_t v27 = *(void *)(v9 - 8);
  uint64_t v28 = v9;
  MEMORY[0x270FA5388](v9);
  int v26 = (char *)&v23 - v10;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v14 = (char *)&v23 - v13;
  uint64_t v15 = type metadata accessor for Rope._Node();
  swift_getWitnessTable();
  uint64_t v16 = Rope._UnsafeHandle.childCount.getter(a1);
  BOOL v17 = __OFSUB__(v16, 1);
  uint64_t result = v16 - 1;
  if (v17)
  {
    __break(1u);
  }
  else
  {
    uint64_t v19 = Rope._UnsafeHandle.mutableChildPtr(at:)(result, (uint64_t)a1, a2, a5, v15) + *(int *)(v15 + 36);
    uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    v24(v14, v19, AssociatedTypeWitness);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    (*(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 56))(v14, AssociatedTypeWitness, AssociatedConformanceWitness);
    uint64_t v21 = *(void (**)(char *, uint64_t))(v12 + 8);
    v21(v14, AssociatedTypeWitness);
    uint64_t v22 = v26;
    (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v26, v29, v28);
    Rope._Node.append(_:)(v22, v15);
    v24(v14, v19, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(v14, AssociatedTypeWitness, AssociatedConformanceWitness);
    return ((uint64_t (*)(char *, uint64_t))v21)(v14, AssociatedTypeWitness);
  }
  return result;
}

uint64_t sub_24A4D7BA8(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Rope._Node();
  uint64_t v9 = *(void **)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v36 = (char *)v30 - v13;
  uint64_t WitnessTable = (uint64_t *)swift_getWitnessTable();
  uint64_t result = Rope._UnsafeHandle.mutableChildren.getter(a1, a2, a3, v8, a4, (uint64_t)WitnessTable);
  if (__OFSUB__(v16, 2))
  {
    __break(1u);
  }
  else
  {
    uint64_t v17 = result;
    uint64_t v18 = v16;
    v30[1] = WitnessTable;
    int v31 = a1;
    uint64_t v32 = a2;
    uint64_t v34 = a3;
    uint64_t v35 = a4;
    uint64_t v19 = v9[9];
    unint64_t v20 = (void (*)(char *))v9[2];
    uint64_t v21 = v36;
    v30[0] = (uint64_t *)(result + v19 * (v16 - 2));
    v20(v36);
    int v33 = Rope._Node.header.getter();
    uint64_t v22 = (void (*)(char *, uint64_t))v9[1];
    v22(v21, v8);
    uint64_t v23 = v18 - 1;
    uint64_t v24 = (uint64_t *)(v17 + v19 * v23);
    ((void (*)(char *, uint64_t *, uint64_t))v20)(v12, v24, v8);
    uint64_t v25 = (uint64_t (*)(char *, uint64_t))v22;
    LODWORD(v19) = (unsigned __int16)Rope._Node.header.getter();
    v22(v12, v8);
    uint64_t v26 = v19 + (unsigned __int16)v33;
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(AssociatedTypeWitness, AssociatedConformanceWitness);
    if (result >= v26)
    {
      static Rope._Node.redistributeChildren(_:_:to:)(v30[0], v24, v26);
      uint64_t v29 = v36;
      Rope._UnsafeHandle._removeChild(at:)(v23, v31);
      return v25(v29, v8);
    }
  }
  return result;
}

uint64_t OrderedSet.isDisjoint(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v28 = *(void *)(a5 - 8);
  uint64_t v29 = a3;
  uint64_t v8 = MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v27 - v11;
  uint64_t v30 = v13;
  sub_24A5BC210();
  swift_getWitnessTable();
  if (sub_24A5BBBC0()) {
    goto LABEL_3;
  }
  uint64_t v30 = a2;
  if (sub_24A5BBBC0()) {
    goto LABEL_3;
  }
  uint64_t v16 = _s19CollectionsInternal4HeapV5countSivg_0();
  if (_s19CollectionsInternal4HeapV5countSivg_0() >= v16)
  {
    uint64_t v23 = *(void *)(a4 + 16);
    if (v23)
    {
      uint64_t v24 = (void (**)(char *, uint64_t))(v28 + 8);
      swift_retain();
      swift_retain();
      uint64_t v25 = 0;
      uint64_t v26 = v23 - 1;
      do
      {
        sub_24A5BC260();
        BOOL v21 = OrderedSet.contains(_:)();
        (*v24)(v12, a5);
        if (v21) {
          break;
        }
        BOOL v22 = v26 == v25++;
      }
      while (!v22);
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v17 = *(void *)(a2 + 16);
    if (v17)
    {
      uint64_t v18 = (void (**)(char *, uint64_t))(v28 + 8);
      swift_retain();
      swift_retain();
      uint64_t v19 = 0;
      uint64_t v20 = v17 - 1;
      do
      {
        sub_24A5BC260();
        BOOL v21 = OrderedSet.contains(_:)();
        (*v18)(v10, a5);
        if (v21) {
          break;
        }
        BOOL v22 = v20 == v19++;
      }
      while (!v22);
LABEL_17:
      char v14 = !v21;
      swift_release();
      swift_release();
      return v14 & 1;
    }
  }
LABEL_3:
  char v14 = 1;
  return v14 & 1;
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (**v29)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t (**v30)(char *, uint64_t);
  unint64_t v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  int64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;

  uint64_t v10 = sub_24A5BBD20();
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v13 = (char *)&v40 - v12;
  uint64_t v47 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = a3;
  sub_24A5BC210();
  swift_getWitnessTable();
  if (sub_24A5BBBC0() & 1) != 0 || (sub_24A5BBA50()) {
    return 1;
  }
  uint64_t v18 = _s19CollectionsInternal4HeapV5countSivg_0();
  if (sub_24A5BBA40() >= v18)
  {
    BOOL v22 = *(void *)(a3 + 16);
    if (v22)
    {
      swift_retain();
      swift_retain();
      sub_24A5BC260();
      uint64_t v23 = sub_24A5BBA70();
      uint64_t v24 = *(void (**)(char *, uint64_t))(v47 + 8);
      v24(v15, a4);
      if (v23)
      {
LABEL_39:
        swift_release();
        swift_release();
        return 0;
      }
      uint64_t v46 = a2;
      uint64_t v38 = 1;
      while (v22 != v38)
      {
        sub_24A5BC260();
        ++v38;
        unint64_t v39 = sub_24A5BBA70();
        v24(v15, a4);
        if (v39) {
          goto LABEL_39;
        }
      }
      swift_release();
      swift_release();
    }
    return 1;
  }
  uint64_t v45 = a3;
  uint64_t v46 = a2;
  uint64_t v44 = a5;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_24A5BC010();
    uint64_t result = sub_24A5BBA60();
    a1 = v49;
    uint64_t v42 = v50;
    uint64_t v19 = v51;
    uint64_t v20 = v52;
    BOOL v21 = v53;
  }
  else
  {
    uint64_t v25 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v26 = *(void *)(a1 + 56);
    uint64_t v42 = a1 + 56;
    uint64_t v19 = ~v25;
    uint64_t v27 = -v25;
    if (v27 < 64) {
      uint64_t v28 = ~(-1 << v27);
    }
    else {
      uint64_t v28 = -1;
    }
    BOOL v21 = v28 & v26;
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v20 = 0;
  }
  uint64_t v48 = a1;
  uint64_t v29 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56);
  uint64_t v40 = v19;
  uint64_t v41 = (unint64_t)(v19 + 64) >> 6;
  uint64_t v43 = v47 + 16;
  uint64_t v30 = (uint64_t (**)(char *, uint64_t))(v47 + 8);
  while (1)
  {
    uint64_t v34 = v20;
    if ((v48 & 0x8000000000000000) == 0) {
      break;
    }
    if (!sub_24A5BC020()) {
      goto LABEL_41;
    }
    sub_24A5BC4F0();
    swift_unknownObjectRelease();
LABEL_18:
    (*v29)(v13, 0, 1, a4);
    int v33 = OrderedSet.contains(_:)();
    uint64_t result = (*v30)(v13, a4);
    if (v33)
    {
      sub_24A4D89AC();
      return 0;
    }
  }
  if (v21)
  {
    int v31 = __clz(__rbit64(v21));
    v21 &= v21 - 1;
    uint64_t v32 = v31 | (v20 << 6);
LABEL_17:
    (*(void (**)(char *, unint64_t, uint64_t))(v47 + 16))(v13, *(void *)(v48 + 48) + *(void *)(v47 + 72) * v32, a4);
    goto LABEL_18;
  }
  uint64_t v35 = v20 + 1;
  if (!__OFADD__(v20, 1))
  {
    if (v35 >= v41) {
      goto LABEL_41;
    }
    uint64_t v36 = *(void *)(v42 + 8 * v35);
    ++v20;
    if (!v36)
    {
      uint64_t v20 = v34 + 2;
      if (v34 + 2 >= v41) {
        goto LABEL_41;
      }
      uint64_t v36 = *(void *)(v42 + 8 * v20);
      if (!v36)
      {
        uint64_t v20 = v34 + 3;
        if (v34 + 3 >= v41) {
          goto LABEL_41;
        }
        uint64_t v36 = *(void *)(v42 + 8 * v20);
        if (!v36)
        {
          uint64_t v37 = v34 + 4;
          while (v41 != v37)
          {
            uint64_t v36 = *(void *)(v42 + 8 * v37++);
            if (v36)
            {
              uint64_t v20 = v37 - 1;
              goto LABEL_32;
            }
          }
LABEL_41:
          uint64_t v16 = 1;
          (*v29)(v13, 1, 1, a4);
          sub_24A4D89AC();
          return v16;
        }
      }
    }
LABEL_32:
    BOOL v21 = (v36 - 1) & v36;
    uint64_t v32 = __clz(__rbit64(v36)) + (v20 << 6);
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t OrderedSet.isDisjoint<A>(with:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v34 = a6;
  uint64_t v35 = a1;
  uint64_t v32 = a2;
  uint64_t v30 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_24A5BBD20();
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  char v14 = (char *)&v29 - v13;
  uint64_t v15 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v29 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v31 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v19 = (char *)&v29 - v18;
  uint64_t v33 = a3;
  uint64_t v36 = a3;
  sub_24A5BC210();
  swift_getWitnessTable();
  if (sub_24A5BBBC0()) {
    return 1;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v29, v35, a5);
  uint64_t v35 = v19;
  sub_24A5BB840();
  uint64_t v21 = v30;
  uint64_t v22 = AssociatedTypeWitness;
  swift_getAssociatedConformanceWitness();
  uint64_t v23 = (uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  uint64_t v24 = (void (**)(char *, char *, uint64_t))(v21 + 32);
  uint64_t v25 = (void (**)(char *, uint64_t))(v21 + 8);
  do
  {
    sub_24A5BBEE0();
    int v26 = (*v23)(v14, 1, a4);
    BOOL v20 = v26 == 1;
    if (v26 == 1) {
      break;
    }
    (*v24)(v10, v14, a4);
    BOOL v27 = OrderedSet.contains(_:)();
    (*v25)(v10, a4);
  }
  while (!v27);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v35, v22);
  return v20;
}

uint64_t sub_24A4D89AC()
{
  return swift_release();
}

unint64_t sub_24A4D89B8()
{
  unint64_t result = qword_26979B210[0];
  if (!qword_26979B210[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26979B210);
  }
  return result;
}

double sub_24A4D8A0C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  sub_24A490BF0(a1, a2, v6);
  long long v4 = v6[1];
  *a3 = v6[0];
  a3[1] = v4;
  double result = *(double *)&v7;
  a3[2] = v7;
  return result;
}

uint64_t _HashTable.Bucket.offset.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*_HashTable.Bucket.offset.modify())()
{
  return nullsub_1;
}

BOOL static _HashTable.Bucket.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t TreeDictionary.subscript.setter(char *a1, uint64_t a2, void *a3)
{
  uint64_t v23 = a2;
  uint64_t v6 = a3[3];
  uint64_t v7 = sub_24A5BBD20();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v9);
  char v14 = (char *)&v23 - v13;
  uint64_t v15 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  uint64_t v24 = a1;
  v18(v14, a1, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, v6) == 1)
  {
    uint64_t v19 = *(void (**)(char *, uint64_t))(v8 + 8);
    v19(v14, v7);
    uint64_t v20 = v23;
    TreeDictionary.removeValue(forKey:)(v23, (uint64_t)a3, (uint64_t)v11);
    (*(void (**)(uint64_t))(*(void *)(a3[2] - 8) + 8))(v20);
    v19(v24, v7);
    return ((uint64_t (*)(char *, uint64_t))v19)(v11, v7);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v14, v6);
    uint64_t v22 = v23;
    sub_24A4DAA1C((uint64_t)v17, v23, a3);
    (*(void (**)(uint64_t))(*(void *)(a3[2] - 8) + 8))(v22);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v24, v7);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v6);
    ++*(void *)(v3 + 16);
  }
  return result;
}

uint64_t TreeDictionary.init(_new:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return a1;
}

uint64_t TreeDictionary._root.getter()
{
  return swift_retain();
}

uint64_t TreeDictionary._root.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_release();
  *char v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*TreeDictionary._root.modify())()
{
  return nullsub_1;
}

uint64_t TreeDictionary._version.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t TreeDictionary._version.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t (*TreeDictionary._version.modify())()
{
  return nullsub_1;
}

uint64_t TreeDictionary.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v12 = sub_24A5B85E4();
  return _HashNode.get(_:_:_:)(0, a1, v12, a2, a3, a4, a5, a6);
}

uint64_t TreeDictionary._updateValue(_:forKey:)(uint64_t a1, uint64_t a2, void *a3)
{
  char v5 = sub_24A4DAA1C(a1, a2, a3);
  (*(void (**)(uint64_t))(*(void *)(a3[3] - 8) + 8))(a1);
  return v5 & 1;
}

uint64_t TreeDictionary.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v47 = a3;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v46 = sub_24A5BBD20();
  uint64_t v6 = swift_getTupleTypeMetadata2();
  uint64_t v7 = sub_24A5BBD20();
  uint64_t v43 = *(void *)(v7 - 8);
  uint64_t v44 = v7;
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v37 - v9;
  uint64_t v11 = *(void *)(v6 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v8);
  char v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v37 - v15;
  uint64_t v17 = sub_24A5B85E4();
  uint64_t v50 = v5;
  uint64_t v18 = (void *)type metadata accessor for _HashNode();
  _HashNode.remove(_:_:_:)(0, a1, v17, v18, (uint64_t)v10);
  uint64_t v45 = v11;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v6) == 1)
  {
    (*(void (**)(char *, uint64_t))(v43 + 8))(v10, v44);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v47, 1, 1, v4);
  }
  else
  {
    uint64_t v20 = *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v21 = &v16[v20];
    uint64_t v22 = *(int *)(v6 + 48);
    uint64_t v23 = v4;
    uint64_t v24 = &v16[v22];
    uint64_t v25 = &v10[v22];
    int v26 = &v10[v20];
    uint64_t v44 = *(void *)(v50 - 8);
    uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v44 + 32);
    uint64_t v41 = v44 + 32;
    v40(v16, v10, v50);
    uint64_t v43 = *(void *)(v23 - 8);
    unint64_t v39 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
    BOOL v27 = v21;
    v39(v21, v26, v23);
    uint64_t v28 = v46;
    uint64_t v42 = *(void *)(v46 - 8);
    uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v42 + 32);
    uint64_t v37 = v24;
    uint64_t v38 = v29;
    v29(v24, v25, v46);
    ++*((void *)v48 + 2);
    uint64_t v48 = &v14[*(int *)(v6 + 48)];
    uint64_t v30 = &v14[*(int *)(TupleTypeMetadata2 + 48)];
    (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v14, v16, v50);
    (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v30, v27, v23);
    (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v48, v24, v28);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v14, v6);
    uint64_t v31 = &v14[*(int *)(v6 + 48)];
    uint64_t v32 = &v14[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v33 = v16;
    uint64_t v34 = v50;
    v40(v14, v33, v50);
    uint64_t v35 = (void (*)(uint64_t, char *, uint64_t))v39;
    v39(v32, v27, v23);
    v38(v31, v37, v28);
    uint64_t v36 = v47;
    v35(v47, v32, v23);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v43 + 56))(v36, 0, 1, v23);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v31, v28);
    return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v14, v34);
  }
}

void (*TreeDictionary.subscript.modify(void *a1, uint64_t a2, void *a3))(void **a1, uint64_t a2)
{
  uint64_t v7 = malloc(0x38uLL);
  *a1 = v7;
  uint64_t v8 = a3[2];
  uint64_t v9 = a3[3];
  *uint64_t v7 = v3;
  v7[1] = v8;
  uint64_t v10 = a3[4];
  v7[2] = v9;
  _OWORD v7[3] = v10;
  uint64_t updated = type metadata accessor for _HashNode.ValueUpdateState();
  _OWORD v7[4] = updated;
  uint64_t v12 = *(void *)(updated - 8);
  void v7[5] = v12;
  uint64_t v13 = malloc(*(void *)(v12 + 64));
  v7[6] = v13;
  ++*(void *)(v3 + 16);
  uint64_t v14 = sub_24A5B85E4();
  uint64_t v15 = (void *)type metadata accessor for _HashNode();
  _HashNode.prepareValueUpdate(_:_:)(a2, v14, v15, (uint64_t)v13);
  return sub_24A4D9594;
}

void sub_24A4D9594(void **a1, uint64_t a2)
{
}

uint64_t sub_24A4D95AC(uint64_t a1, uint64_t a2)
{
  uint64_t updated = type metadata accessor for _HashNode.ValueUpdateState();
  MEMORY[0x270FA5388](updated);
  uint64_t v5 = (char *)&v9 - v4;
  (*(void (**)(char *, uint64_t))(v6 + 16))((char *)&v9 - v4, a2);
  uint64_t v7 = (void *)type metadata accessor for _HashNode();
  return _HashNode.finalizeValueUpdate(_:)((uint64_t)v5, v7);
}

uint64_t TreeDictionary.subscript.getter@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8)
{
  uint64_t v22 = a3;
  uint64_t v23 = a2;
  uint64_t v13 = sub_24A5BBD20();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v22 - v15;
  uint64_t v17 = sub_24A5B85E4();
  _HashNode.get(_:_:_:)(0, a1, v17, a4, a5, a6, a8, (uint64_t)v16);
  uint64_t v18 = *(void *)(a6 - 8);
  uint64_t v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, a6);
  if (v19 != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v18 + 32))(a7, v16, a6);
  }
  v23(v19, v20);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t TreeDictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  sub_24A4DAA1C(a1, a2, a5);
  (*(void (**)(uint64_t))(*(void *)(a5[2] - 8) + 8))(a2);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(a5[3] - 8) + 8))(a1);
  ++*(void *)(v5 + 16);
  return result;
}

void (*TreeDictionary.subscript.modify(void *a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, void *a5))(void **a1, uint64_t a2)
{
  uint64_t v11 = malloc(0x38uLL);
  *a1 = v11;
  uint64_t v12 = a5[2];
  uint64_t v13 = a5[3];
  *uint64_t v11 = v5;
  v11[1] = v12;
  uint64_t v14 = a5[4];
  v11[2] = v13;
  v11[3] = v14;
  uint64_t updated = type metadata accessor for _HashNode.DefaultedValueUpdateState();
  long long v11[4] = updated;
  uint64_t v16 = *(void *)(updated - 8);
  void v11[5] = v16;
  uint64_t v17 = (char *)malloc(*(void *)(v16 + 64));
  v11[6] = v17;
  ++*(void *)(v5 + 16);
  uint64_t v18 = sub_24A5B85E4();
  uint64_t v19 = (void *)type metadata accessor for _HashNode();
  _HashNode.prepareDefaultedValueUpdate(_:_:_:_:)(0, a2, a3, a4, v18, v19, v17);
  swift_getTupleTypeMetadata2();
  return sub_24A4D9A64;
}

void sub_24A4D9A64(void **a1, uint64_t a2)
{
}

void sub_24A4D9A7C(void **a1, uint64_t a2, void (*a3)(void, void *, void, void, void))
{
  uint64_t v3 = *a1;
  uint64_t v5 = (*a1)[5];
  uint64_t v4 = (void *)(*a1)[6];
  uint64_t v6 = (*a1)[4];
  a3(**a1, v4, (*a1)[1], (*a1)[2], (*a1)[3]);
  (*(void (**)(void *, uint64_t))(v5 + 8))(v4, v6);
  free(v4);
  free(v3);
}

uint64_t sub_24A4D9AF8(uint64_t a1, uint64_t a2)
{
  uint64_t updated = type metadata accessor for _HashNode.DefaultedValueUpdateState();
  uint64_t v4 = *(void *)(updated - 8);
  MEMORY[0x270FA5388](updated);
  uint64_t v6 = (char *)&v9 - v5;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v9 - v5, a2, updated);
  uint64_t v7 = (void *)type metadata accessor for _HashNode();
  sub_24A4F8164((uint64_t)v6, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, updated);
}

uint64_t TreeDictionary.index(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v16 = sub_24A5B85E4();
  uint64_t result = _HashNode.path(to:_:)(a1, v16, a2, a3, a5, a6, a7);
  uint64_t v20 = v19 & 0xFFFFFFFFFFLL | (((v19 >> 40) & 1) << 40);
  if (v18) {
    uint64_t v21 = a2;
  }
  else {
    uint64_t v21 = 0;
  }
  if (v18) {
    uint64_t v22 = a4;
  }
  else {
    uint64_t v22 = 0;
  }
  if (v18) {
    uint64_t v23 = result;
  }
  else {
    uint64_t v23 = 0;
  }
  *(void *)a8 = v21;
  *(void *)(a8 + 8) = v22;
  if (!v18) {
    uint64_t v20 = 0;
  }
  *(void *)(a8 + 16) = v23;
  *(void *)(a8 + 24) = v18;
  *(_DWORD *)(a8 + 32) = v20;
  *(_WORD *)(a8 + 36) = WORD2(v20);
  return result;
}

uint64_t TreeDictionary.updateValue(_:forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = a3[2];
  uint64_t v10 = a3[4];
  unint64_t v11 = sub_24A5B85E4();
  uint64_t v12 = a3[3];
  uint64_t v23 = v9;
  uint64_t v24 = v12;
  uint64_t v25 = v10;
  uint64_t v26 = a2;
  uint64_t v27 = a1;
  uint64_t v13 = (void *)type metadata accessor for _HashNode();
  char v14 = _HashNode.updateValue(_:forKey:_:_:)(0, a2, v11, (uint64_t (*)(uint64_t))sub_24A4DAB20, (uint64_t)v22, v13);
  ++*(void *)(v4 + 16);
  if (v14)
  {
    uint64_t v17 = *(void *)(v12 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(a4, 1, 1, v12);
  }
  else
  {
    unsigned int v18 = v16;
    uint64_t v19 = nullsub_1(v15 + 16, v15 + 32, v9, v12, v10);
    sub_24A4D9E58(v19, v20, v18, a1, v12, a4);
    uint64_t v17 = *(void *)(v12 - 8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(a1, v12);
}

uint64_t sub_24A4D9E58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W4>, uint64_t a4@<X5>, uint64_t a5@<X7>, uint64_t a6@<X8>)
{
  uint64_t v9 = _HashNode.UnsafeHandle.itemPtr(at:)(a3, a1, a2);
  uint64_t v10 = v9 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  uint64_t v11 = *(void *)(a5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(a6, v10, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 24))(v10, a4, a5);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(a6, 0, 1, a5);
}

uint64_t sub_24A4D9F6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v11 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v13 = (char *)&v16 - v12;
  char v14 = (char *)&v16 + *(int *)(v11 + 48) - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))((char *)&v16 - v12, a2, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))(v14, a3, a5);
  return sub_24A544CAC((uint64_t)v13, a1, TupleTypeMetadata2);
}

uint64_t sub_24A4DA094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = _HashNode.UnsafeHandle.subscript.unsafeMutableAddressor(a5, a1, a2, a7, a8, a9);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a8 - 8) + 24))(v11 + *(int *)(TupleTypeMetadata2 + 48), a6, a8);
}

uint64_t TreeDictionary.updateValue<A>(forKey:with:)@<X0>(uint64_t a1@<X0>, void (*a2)(char *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v21 = a2;
  uint64_t v6 = v5;
  v20[1] = a5;
  void v20[2] = a3;
  uint64_t v8 = *(void *)(a4 + 16);
  uint64_t v9 = *(void *)(a4 + 24);
  uint64_t updated = type metadata accessor for _HashNode.ValueUpdateState();
  uint64_t v23 = *(void *)(updated - 8);
  uint64_t v11 = MEMORY[0x270FA5388](updated);
  uint64_t v13 = (char *)v20 - v12;
  uint64_t v14 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, v8);
  ++*(void *)(v6 + 16);
  uint64_t v17 = sub_24A5B85E4();
  uint64_t v22 = v9;
  unsigned int v18 = (void *)type metadata accessor for _HashNode();
  _HashNode.prepareValueUpdate(_:_:)((uint64_t)v16, v17, v18, (uint64_t)v13);
  v21(&v13[*(int *)(updated + 44)]);
  sub_24A4D95AC(v6, (uint64_t)v13);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v13, updated);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v8);
}

uint64_t TreeDictionary.updateValue<A>(forKey:default:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v12 = a6[2];
  uint64_t v13 = a6[4];
  unint64_t v14 = sub_24A5B85E4();
  uint64_t v15 = a6[3];
  uint64_t v27 = v12;
  uint64_t v28 = v15;
  uint64_t v29 = a7;
  uint64_t v30 = v13;
  uint64_t v31 = a1;
  uint64_t v32 = a2;
  uint64_t v33 = a3;
  uint64_t v16 = (void *)type metadata accessor for _HashNode();
  _HashNode.updateValue(_:forKey:_:_:)(0, a1, v14, sub_24A4DAB24, (uint64_t)v26, v16);
  uint64_t v18 = v17;
  uint64_t v20 = nullsub_1(v19 + 16, v19 + 32, v12, v15, v13);
  uint64_t v22 = _HashNode.UnsafeHandle.subscript.unsafeMutableAddressor(v18, v20, v21, v12, v15, v13);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return a4(v22 + *(int *)(TupleTypeMetadata2 + 48));
}

uint64_t sub_24A4DA4B8(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v12 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  unint64_t v14 = (char *)&v21 - v13;
  uint64_t v15 = *(void *)(a6 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v12);
  uint64_t v18 = (char *)&v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  a3(v16);
  uint64_t v19 = &v14[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))(v14, a2, a5);
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v19, v18, a6);
  return sub_24A544CAC((uint64_t)v14, a1, TupleTypeMetadata2);
}

uint64_t TreeDictionary.remove(at:)(char *a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v54 = a2;
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(a4 + 24);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v10 = sub_24A5BBD20();
  uint64_t v58 = TupleTypeMetadata2;
  uint64_t v11 = swift_getTupleTypeMetadata2();
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  unint64_t v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x270FA5388](v12);
  uint64_t v18 = (char *)&v45 - v17;
  if (*(void *)a3 == *v4
    && (uint64_t v19 = v4[2], *(void *)(a3 + 8) == v19)
    && (int v20 = *(unsigned __int8 *)(a3 + 37), *(unsigned char *)(a3 + 37)))
  {
    uint64_t v47 = *(unsigned __int8 *)(a3 + 36);
    unint64_t v52 = (char *)result;
    unint64_t v53 = a1;
    uint64_t v46 = *(unsigned int *)(a3 + 32);
    uint64_t v21 = *(uint64_t **)(a3 + 24);
    uint64_t v55 = v8;
    unint64_t v48 = *(void *)(a3 + 16);
    uint64_t v49 = v21;
    v4[2] = v19 + 1;
    uint64_t v22 = v58;
    uint64_t v23 = &v18[*(int *)(v58 + 48)];
    uint64_t v24 = (uint64_t)&v18[*(int *)(result + 48)];
    uint64_t v56 = v24;
    uint64_t v57 = v10;
    uint64_t v25 = result;
    uint64_t v26 = v16;
    uint64_t v27 = (void *)type metadata accessor for _HashNode();
    uint64_t v28 = 0x10000000000;
    if (!v20) {
      uint64_t v28 = 0;
    }
    uint64_t v50 = v23;
    _HashNode.remove(_:at:)(v18, v23, v24, 0, v48, v49, v28 | v46 | (v47 << 32), v27);
    uint64_t v29 = &v14[*(int *)(v25 + 48)];
    uint64_t v30 = &v14[*(int *)(v22 + 48)];
    uint64_t v31 = v7;
    uint64_t v51 = v7;
    uint64_t v32 = *(void *)(v7 - 8);
    (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v14, v18, v31);
    uint64_t v33 = *(void *)(v55 - 8);
    (*(void (**)(char *, char *))(v33 + 16))(v30, v23);
    uint64_t v34 = *(void *)(v57 - 8);
    (*(void (**)(char *, uint64_t))(v34 + 16))(v29, v56);
    uint64_t v35 = v52;
    (*(void (**)(char *, char *))(v26 + 8))(v14, v52);
    unint64_t v52 = &v14[*((int *)v35 + 12)];
    uint64_t v36 = v52;
    uint64_t v37 = &v14[*(int *)(v58 + 48)];
    uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
    unint64_t v39 = v18;
    uint64_t v40 = v51;
    v38(v14, v39, v51);
    uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
    uint64_t v42 = v55;
    v41(v37, v50, v55);
    uint64_t v43 = v36;
    uint64_t v44 = v57;
    (*(void (**)(char *, uint64_t, uint64_t))(v34 + 32))(v43, v56, v57);
    v38(v53, v14, v40);
    v41(v54, v37, v42);
    return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v52, v44);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_24A4DAA1C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = a3[2];
  uint64_t v7 = a3[4];
  unint64_t v8 = sub_24A5B85E4();
  uint64_t v9 = a3[3];
  uint64_t v20 = v6;
  uint64_t v21 = v9;
  uint64_t v22 = v7;
  uint64_t v23 = a2;
  uint64_t v24 = a1;
  uint64_t v10 = (void *)type metadata accessor for _HashNode();
  char v13 = _HashNode.updateValue(_:forKey:_:_:)(0, a2, v8, (uint64_t (*)(uint64_t))sub_24A4DAB20, (uint64_t)v19, v10);
  if ((v13 & 1) == 0)
  {
    uint64_t v14 = v11;
    uint64_t v15 = v12;
    uint64_t v16 = nullsub_1(v11 + 16, v11 + 32, v6, v9, v7);
    sub_24A4DA094(v16, v17, 0, v14, v15, a1, v6, v9, v7);
  }
  return v13 & 1;
}

uint64_t sub_24A4DAB24(uint64_t a1)
{
  return sub_24A4DA4B8(a1, *(void *)(v1 + 48), *(void (**)(uint64_t))(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t type metadata accessor for TreeDictionary()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_24A4DAB50(uint64_t a1)
{
  return sub_24A4D9F6C(a1, v1[5], v1[6], v1[2], v1[3]);
}

uint64_t _Bitmap.makeIterator()(uint64_t result)
{
  return result;
}

unint64_t _Bitmap.Iterator.next()()
{
  unsigned int v1 = *v0;
  if (!*v0) {
    return 0;
  }
  uint64_t v2 = v0[1];
  unint64_t result = __clz(__rbit32(v1)) | (unint64_t)(v2 << 32);
  *unint64_t v0 = (v1 - 1) & v1;
  v0[1] = v2 + 1;
  return result;
}

uint64_t _Bitmap.contains(_:)(char a1, unsigned int a2)
{
  return (a2 >> a1) & 1;
}

uint64_t _Bitmap.slot(of:)(char a1, int a2, int8x8_t a3)
{
  a3.i32[0] = a2 & ~(-1 << a1);
  uint8x8_t v3 = (uint8x8_t)vcnt_s8(a3);
  v3.i16[0] = vaddlv_u8(v3);
  return v3.u32[0];
}

uint64_t _Bitmap.union(_:)(unsigned int a1, int a2)
{
  return a2 | a1;
}

BOOL _Bitmap.isDisjoint(with:)(int a1, int a2)
{
  return (a2 & a1) == 0;
}

uint64_t _Bitmap.count.getter(__int32 a1, int8x8_t a2)
{
  a2.i32[0] = a1;
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(a2);
  v2.i16[0] = vaddlv_u8(v2);
  return v2.u32[0];
}

unint64_t _Bitmap.init(bitPattern:)(unint64_t result)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (HIDWORD(result)) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t static _Bitmap.capacity.getter()
{
  return 32;
}

uint64_t _Bitmap.inserting(_:)(char a1, unsigned int a2)
{
  return (1 << a1) | a2;
}

uint64_t _Bitmap.removing(_:)(char a1, unsigned int a2)
{
  return ((-1 << a1) - 1) & a2;
}

uint64_t _Bitmap.subtracting(_:)(int a1, int a2)
{
  return a2 & ~a1;
}

uint64_t _Bitmap.remove(_:)(uint64_t result)
{
  *v1 &= (-1 << result) - 1;
  return result;
}

uint64_t static _Bitmap.empty.getter()
{
  return 0;
}

uint64_t _Bitmap.intersection(_:)(unsigned int a1, int a2)
{
  return a2 & a1;
}

uint64_t _Bitmap._value.setter(uint64_t result)
{
  *unsigned int v1 = result;
  return result;
}

uint64_t (*_Bitmap._value.modify())()
{
  return nullsub_1;
}

uint64_t _Bitmap.init(_:)(char a1)
{
  return (1 << a1);
}

uint64_t _Bitmap.init(_:_:)(char a1, char a2)
{
  return (1 << a2) | (1 << a1);
}

uint64_t _Bitmap.init(upTo:)(char a1)
{
  return ~(-1 << a1);
}

BOOL static _Bitmap.== infix(_:_:)(int a1, int a2)
{
  return a1 == a2;
}

uint64_t _Bitmap.description.getter()
{
  sub_24A4DAF70();
  sub_24A5BB7F0();
  uint64_t result = sub_24A5BB660();
  if (__OFSUB__(32, result))
  {
    __break(1u);
  }
  else
  {
    MEMORY[0x24C5C6AF0](48, 0xE100000000000000, 32 - result);
    swift_bridgeObjectRetain();
    sub_24A5BB6F0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&qword_26979B178);
    sub_24A4CD1E8();
    uint64_t v1 = sub_24A5BB810();
    sub_24A5BB6F0();
    sub_24A5BC430();
    sub_24A5BB6F0();
    swift_bridgeObjectRelease();
    sub_24A5BB6F0();
    return v1;
  }
  return result;
}

uint64_t sub_24A4DAE28()
{
  return _Bitmap.description.getter();
}

uint64_t static _Bitmap.bitWidth.getter()
{
  return 5;
}

uint64_t _Bitmap.capacity.getter()
{
  return 32;
}

BOOL _Bitmap.isEmpty.getter(int a1)
{
  return a1 == 0;
}

BOOL _Bitmap.hasExactlyOneMember.getter(int a1)
{
  return a1 && (a1 & (a1 - 1)) == 0;
}

uint64_t _Bitmap.first.getter(unsigned int a1)
{
  return __clz(__rbit32(a1)) & 0x1F | ((a1 == 0) << 8);
}

uint64_t _Bitmap.popFirst()()
{
  unsigned int v1 = *v0;
  if (*v0)
  {
    unsigned int v2 = __clz(__rbit32(v1));
    *unint64_t v0 = (v1 - 1) & v1;
  }
  else
  {
    unsigned int v2 = 0;
  }
  return v2 | ((v1 == 0) << 8);
}

uint64_t _Bitmap.insert(_:)(uint64_t result)
{
  *v1 |= 1 << result;
  return result;
}

Swift::UInt _Bitmap.bucket(at:)(Swift::Int ranked)
{
  Swift::UInt_optional v2 = UInt32._bit(ranked:)(ranked);
  if (v2.is_nil) {
    __break(1u);
  }
  return v2.value;
}

BOOL _Bitmap.isSubset(of:)(int a1, int a2)
{
  return (a2 & ~a1) == 0;
}

uint64_t _Bitmap.Iterator.bitmap.setter(uint64_t result)
{
  *unsigned int v1 = result;
  return result;
}

uint64_t (*_Bitmap.Iterator.bitmap.modify())()
{
  return nullsub_1;
}

unint64_t _Bitmap.Iterator.slot.getter(unint64_t a1)
{
  return HIDWORD(a1);
}

uint64_t _Bitmap.Iterator.slot.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 4) = result;
  return result;
}

uint64_t (*_Bitmap.Iterator.slot.modify())()
{
  return nullsub_1;
}

uint64_t _Bitmap.Iterator.init(_:)(uint64_t result)
{
  return result;
}

unint64_t sub_24A4DAF70()
{
  unint64_t result = qword_26979B298;
  if (!qword_26979B298)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979B298);
  }
  return result;
}

void sub_24A4DAFC4(uint64_t a1@<X8>)
{
  unsigned int v2 = *v1;
  if (*v1)
  {
    uint64_t v3 = v1[1];
    unint64_t v4 = __clz(__rbit32(v2)) | (unint64_t)(v3 << 32);
    *uint64_t v1 = (v2 - 1) & v2;
    v1[1] = v3 + 1;
  }
  else
  {
    unint64_t v4 = 0;
  }
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v2 == 0;
}

uint64_t _Bitmap.underestimatedCount.getter(__int32 a1, int8x8_t a2)
{
  a2.i32[0] = a1;
  uint8x8_t v2 = (uint8x8_t)vcnt_s8(a2);
  v2.i16[0] = vaddlv_u8(v2);
  return v2.u32[0];
}

unint64_t sub_24A4DB020()
{
  unint64_t result = qword_26979B2A0;
  if (!qword_26979B2A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979B2A0);
  }
  return result;
}

void sub_24A4DB074(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_24A4DB080()
{
  uint8x8_t v1 = (uint8x8_t)vcnt_s8((int8x8_t)*v0);
  v1.i16[0] = vaddlv_u8(v1);
  return v1.u32[0];
}

uint64_t sub_24A4DB098(int8x8_t a1)
{
  return sub_24A567780(*v1, a1);
}

unsigned int *sub_24A4DB0A0(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  return sub_24A586008(a1, a2, a3, *v3);
}

ValueMetadata *type metadata accessor for _Bitmap()
{
  return &type metadata for _Bitmap;
}

void *__swift_memcpy8_4(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for _Bitmap.Iterator(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for _Bitmap.Iterator(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 8) = v3;
  return result;
}

ValueMetadata *type metadata accessor for _Bitmap.Iterator()
{
  return &type metadata for _Bitmap.Iterator;
}

uint64_t sub_24A4DB120()
{
  return MEMORY[0x263F8D2B8];
}

unint64_t sub_24A4DB130()
{
  unint64_t result = qword_26979B2A8[0];
  if (!qword_26979B2A8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26979B2A8);
  }
  return result;
}

uint64_t sub_24A4DB184(uint64_t result)
{
  uint64_t v2 = result;
  unint64_t v4 = *(void *)v1;
  unint64_t v3 = *(void *)(v1 + 8);
  if ((v3 & 0x2000000000000000) != 0) {
    uint64_t v5 = HIBYTE(v3) & 0xF;
  }
  else {
    uint64_t v5 = *(void *)v1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5)
  {
    __int16 v11 = *(_WORD *)(v1 + 20);
    uint64_t v12 = *(void *)(result + 8);
    uint64_t v13 = *(unsigned __int16 *)(result + 20);
    int v14 = *(_DWORD *)(result + 16);
    *(void *)uint64_t v1 = *(void *)result;
    *(void *)(v1 + 8) = v12;
    *(_WORD *)(v1 + 20) = v13;
    int v15 = *(_DWORD *)(v1 + 16);
    *(_DWORD *)(v1 + 16) = v14;
    *(void *)unint64_t result = v4;
    *(void *)(result + 8) = v3;
    *(_DWORD *)(result + 16) = v15;
    unint64_t result = 1;
    *(_WORD *)(v2 + 20) = v11;
    return result;
  }
  unint64_t v7 = *(void *)result;
  unint64_t v6 = *(void *)(result + 8);
  unint64_t v8 = *(void *)result & 0xFFFFFFFFFFFFLL;
  if ((v6 & 0x2000000000000000) != 0) {
    unint64_t v8 = HIBYTE(v6) & 0xF;
  }
  if (!v8) {
    return 1;
  }
  unint64_t v9 = *(unsigned __int8 *)(v1 + 16);
  uint64_t v10 = *(unsigned __int8 *)(result + 16);
  if (v9 >= 0x7C && v10 > 0x7B) {
    return 0;
  }
  unint64_t v16 = v10 + v9;
  uint64_t v17 = v16 - 124;
  if (v16 >= 0x17B) {
    uint64_t v17 = 255;
  }
  if (v16 > 0xFF) {
    unint64_t v16 = v17;
  }
  unint64_t v18 = v16 - v9;
  if (v16 == v9)
  {
    __break(1u);
    goto LABEL_32;
  }
  if ((uint64_t)v16 >= (uint64_t)v9)
  {
    if ((v6 & 0x1000000000000000) == 0)
    {
      if ((v18 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v8 >= v18)
      {
        unint64_t v21 = (v18 << 16) | 4;
LABEL_27:
        unint64_t v22 = sub_24A497020(v21, v7, v6);
        sub_24A4DBA54(v1, v2, v22);
        goto LABEL_28;
      }
      __break(1u);
      return result;
    }
LABEL_34:
    unint64_t v26 = v6;
    unint64_t v28 = v7;
    unint64_t v21 = MEMORY[0x24C5C6A60](15, v18, v7, v6);
    unint64_t v6 = v26;
    unint64_t v7 = v28;
    goto LABEL_27;
  }
  if ((v3 & 0x1000000000000000) != 0)
  {
LABEL_32:
    unint64_t v25 = v3;
    unint64_t v27 = v4;
    unint64_t v19 = MEMORY[0x24C5C6A60](15, v16, v4, v3);
    unint64_t v3 = v25;
    unint64_t v4 = v27;
    goto LABEL_22;
  }
  if (v5 < (uint64_t)v16)
  {
    __break(1u);
    goto LABEL_34;
  }
  unint64_t v19 = (v16 << 16) | 4;
LABEL_22:
  unint64_t v20 = sub_24A497020(v19, v4, v3);
  sub_24A4DB83C(v1, v2, v20);
LABEL_28:
  unint64_t v23 = *(void *)(v2 + 8);
  uint64_t v24 = *(void *)v2 & 0xFFFFFFFFFFFFLL;
  if ((v23 & 0x2000000000000000) != 0) {
    uint64_t v24 = HIBYTE(v23) & 0xF;
  }
  return v24 == 0;
}

BOOL sub_24A4DB330(uint64_t a1)
{
  unint64_t v4 = *(void *)v1;
  unint64_t v3 = *(void *)(v1 + 8);
  unint64_t v5 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0) {
    unint64_t v5 = *(void *)v1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5)
  {
    uint64_t v12 = *(unsigned __int16 *)(v1 + 20);
    uint64_t v13 = *(void *)(a1 + 8);
    __int16 v14 = *(_WORD *)(a1 + 20);
    int v15 = *(_DWORD *)(a1 + 16);
    *(void *)uint64_t v1 = *(void *)a1;
    *(void *)(v1 + 8) = v13;
    *(_WORD *)(v1 + 20) = v14;
    int v16 = *(_DWORD *)(v1 + 16);
    *(_DWORD *)(v1 + 16) = v15;
    *(void *)a1 = v4;
    *(void *)(a1 + 8) = v3;
    *(_DWORD *)(a1 + 16) = v16;
    BOOL result = 1;
    *(_WORD *)(a1 + 20) = v12;
    return result;
  }
  unint64_t v7 = *(void *)a1;
  unint64_t v6 = *(void *)(a1 + 8);
  unint64_t v8 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000) == 0) {
    unint64_t v8 = *(void *)a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v8) {
    return 1;
  }
  unint64_t v9 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v10 = *(unsigned __int8 *)(v1 + 16);
  if (v9 >= 0x7C && v10 > 0x7B) {
    return 0;
  }
  unint64_t v17 = v10 + v9;
  uint64_t v18 = v17 - 124;
  if (v17 >= 0x17B) {
    uint64_t v18 = 255;
  }
  if (v17 <= 0xFF) {
    uint64_t v18 = v17;
  }
  unint64_t v19 = v10 - v18;
  if (v10 == v18)
  {
    __break(1u);
  }
  else
  {
    if (v10 <= v18)
    {
      unint64_t v19 = v17 - v18;
      if ((v6 & 0x1000000000000000) == 0)
      {
        if ((v19 & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_58:
          __break(1u);
          goto LABEL_59;
        }
        if (v8 < v19)
        {
LABEL_59:
          __break(1u);
          goto LABEL_60;
        }
        unint64_t v25 = (v19 << 16) | 4;
LABEL_32:
        unint64_t v26 = sub_24A497020(v25, v7, v6);
        if ((v26 ^ v25) >= 0x4000)
        {
          unint64_t v27 = sub_24A48E614(v26, v7, v6);
          if ((v6 & 0x1000000000000000) != 0)
          {
            unint64_t v25 = sub_24A5BB5D0();
          }
          else
          {
            unint64_t v28 = v27 >> 16;
            if ((v6 & 0x2000000000000000) != 0)
            {
              unint64_t v37 = v7;
              uint64_t v38 = v6 & 0xFFFFFFFFFFFFFFLL;
              int v30 = *((unsigned __int8 *)&v37 + v28);
            }
            else
            {
              if ((v7 & 0x1000000000000000) != 0) {
                uint64_t v29 = (v6 & 0xFFFFFFFFFFFFFFFLL) + 32;
              }
              else {
                uint64_t v29 = sub_24A5BC120();
              }
              int v30 = *(unsigned __int8 *)(v29 + v28);
            }
            int v33 = (char)v30;
            unsigned int v34 = __clz(v30 ^ 0xFF) - 24;
            if (v33 >= 0) {
              LOBYTE(v34) = 1;
            }
            unint64_t v25 = ((v28 + v34) << 16) | 5;
          }
        }
        sub_24A4DB83C(a1, v1, v25);
        goto LABEL_50;
      }
LABEL_56:
      unint64_t v25 = MEMORY[0x24C5C6A60](15, v19, v7, v6);
      goto LABEL_32;
    }
    if ((v3 & 0x1000000000000000) == 0)
    {
      if ((v19 & 0x8000000000000000) == 0)
      {
        if (v5 >= v19)
        {
          unint64_t v20 = (v19 << 16) | 4;
          goto LABEL_22;
        }
        goto LABEL_58;
      }
      __break(1u);
      goto LABEL_56;
    }
  }
  unint64_t v20 = MEMORY[0x24C5C6A60](15, v19, v4, v3);
LABEL_22:
  unint64_t v21 = sub_24A497020(v20, v4, v3);
  if ((v21 ^ v20) >= 0x4000)
  {
    unint64_t v22 = sub_24A48E614(v21, v4, v3);
    if ((v3 & 0x1000000000000000) == 0)
    {
      unint64_t v6 = v22 >> 16;
      if ((v3 & 0x2000000000000000) != 0)
      {
        unint64_t v37 = v4;
        uint64_t v38 = v3 & 0xFFFFFFFFFFFFFFLL;
        int v24 = *((unsigned __int8 *)&v37 + v6);
        goto LABEL_41;
      }
      if ((v4 & 0x1000000000000000) != 0)
      {
        uint64_t v23 = (v3 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_27:
        int v24 = *(unsigned __int8 *)(v23 + v6);
LABEL_41:
        int v31 = (char)v24;
        unsigned int v32 = __clz(v24 ^ 0xFF) - 24;
        if (v31 >= 0) {
          LOBYTE(v32) = 1;
        }
        unint64_t v20 = ((v6 + v32) << 16) | 5;
        goto LABEL_44;
      }
LABEL_60:
      uint64_t v23 = sub_24A5BC120();
      goto LABEL_27;
    }
    unint64_t v20 = sub_24A5BB5D0();
  }
LABEL_44:
  sub_24A4DBA54(a1, v1, v20);
LABEL_50:
  unint64_t v35 = *(void *)(a1 + 8);
  uint64_t v36 = *(void *)a1 & 0xFFFFFFFFFFFFLL;
  if ((v35 & 0x2000000000000000) != 0) {
    uint64_t v36 = HIBYTE(v35) & 0xF;
  }
  return v36 == 0;
}

void sub_24A4DB614(void *a1@<X8>)
{
  uint64_t v2 = v1[16];
  uint64_t v3 = v1[17];
  uint64_t v4 = v1[18];
  *a1 = v1[19];
  a1[1] = v4;
  a1[2] = v3;
  a1[3] = v2;
}

BOOL sub_24A4DB630()
{
  unint64_t v1 = v0[1];
  uint64_t v2 = *v0 & 0xFFFFFFFFFFFFLL;
  if ((v1 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(v1) & 0xF;
  }
  return v2 == 0;
}

BOOL sub_24A4DB650()
{
  return *(unsigned __int8 *)(v0 + 16) < 0x7Cu;
}

uint64_t sub_24A4DB668@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = *a1;
  uint64_t v6 = *(void *)v2;
  unint64_t v5 = *(void *)(v2 + 8);
  unint64_t v7 = sub_24A494C18(*a1, *(void *)v2, v5, *(unsigned int *)(v2 + 16) | ((unint64_t)*(unsigned __int8 *)(v2 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(v2 + 21) << 40));
  char v8 = v7;
  char v36 = v9;
  unint64_t v31 = v7 >> 8;
  unint64_t v32 = v7 >> 16;
  unint64_t v33 = v7 >> 24;
  unint64_t v34 = HIDWORD(v7);
  unint64_t v35 = v7 >> 40;
  unint64_t v37 = HIWORD(v7);
  unint64_t v38 = HIBYTE(v7);
  unsigned int v40 = HIWORD(v9);
  unsigned int v41 = v9 >> 8;
  unsigned int v39 = HIBYTE(v9);
  swift_bridgeObjectRetain();
  unint64_t v10 = sub_24A494C00(v4, v6, v5);
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = MEMORY[0x24C5C68C0](v10, v12, v14, v16);
  uint64_t v19 = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v20 = sub_24A5BB830();
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  swift_bridgeObjectRelease();
  uint64_t v27 = MEMORY[0x24C5C68C0](v20, v22, v24, v26);
  uint64_t v29 = v28;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)uint64_t v2 = v27;
  *(void *)(v2 + 8) = v29;
  *(unsigned char *)(v2 + 16) = v8;
  *(unsigned char *)(v2 + 17) = v31;
  *(unsigned char *)(v2 + 18) = v32;
  *(unsigned char *)(v2 + 19) = v33;
  *(unsigned char *)(v2 + 20) = v34;
  *(unsigned char *)(v2 + 21) = v35;
  *(void *)a2 = v17;
  *(void *)(a2 + 8) = v19;
  *(unsigned char *)(a2 + 16) = v37;
  *(unsigned char *)(a2 + 17) = v38;
  *(unsigned char *)(a2 + 18) = v36;
  *(unsigned char *)(a2 + 19) = v41;
  *(unsigned char *)(a2 + 20) = v40;
  *(unsigned char *)(a2 + 21) = v39;
  return result;
}

uint64_t sub_24A4DB83C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >= 0x4000)
  {
    uint64_t v15 = *(void *)a1;
    unint64_t v14 = *(void *)(a1 + 8);
    uint64_t v16 = sub_24A494C18(a3, *(void *)a1, v14, *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 21) << 40));
    unsigned int v18 = v17;
    uint64_t v19 = HIBYTE(v17);
    swift_bridgeObjectRetain();
    unint64_t v20 = sub_24A494C00(a3, v15, v14);
    uint64_t v22 = v21;
    uint64_t v24 = v23;
    uint64_t v36 = v25;
    swift_bridgeObjectRelease();
    sub_24A4D2C4C(v20, v22, v24, v36, (v19 << 40) | ((unint64_t)BYTE2(v18) << 32) | (v18 << 16) & 0xFF000000 | (v18 << 16) & 0xFF0000 | HIWORD(v16));
    swift_bridgeObjectRetain();
    uint64_t v26 = sub_24A5BB830();
    uint64_t v28 = v27;
    uint64_t v30 = v29;
    uint64_t v32 = v31;
    swift_bridgeObjectRelease();
    uint64_t v33 = MEMORY[0x24C5C68C0](v26, v28, v30, v32);
    uint64_t v35 = v34;
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a1 = v33;
    *(void *)(a1 + 8) = v35;
    *(_WORD *)(a1 + 16) = v16;
    *(unsigned char *)(a1 + 18) = BYTE2(v16);
    *(unsigned char *)(a1 + 19) = BYTE3(v16);
    *(unsigned char *)(a1 + 20) = BYTE4(v16);
    *(unsigned char *)(a1 + 21) = BYTE5(v16);
  }
  else
  {
    uint64_t v5 = *(void *)a2;
    uint64_t v6 = *(void *)(a2 + 8);
    unint64_t v7 = *(unsigned int *)(a2 + 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 21) << 40);
    swift_bridgeObjectRetain();
    sub_24A4D45FC(v5, v6, v7);
    uint64_t result = swift_bridgeObjectRelease_n();
    unint64_t v9 = *(void *)a1;
    uint64_t v10 = *(void *)(a1 + 8);
    __int16 v11 = *(_WORD *)(a1 + 20);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0xE000000000000000;
    int v12 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = 0;
    *(_WORD *)(a1 + 20) = 0;
    *(void *)a2 = v9;
    *(void *)(a2 + 8) = v10;
    *(_DWORD *)(a2 + 16) = v12;
    *(_WORD *)(a2 + 20) = v11;
  }
  return result;
}

uint64_t sub_24A4DBA54(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  uint64_t v6 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0) {
    uint64_t v6 = *(void *)a2 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v7 = a2 + 16;
  unint64_t v8 = *(unsigned int *)(a2 + 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 21) << 40);
  if (a3 >> 14 >= 4 * v6)
  {
    swift_bridgeObjectRetain();
    sub_24A4D45FC(v5, v4, v8);
    uint64_t result = swift_bridgeObjectRelease_n();
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0xE000000000000000;
    *(_DWORD *)uint64_t v7 = 0;
    *(_WORD *)(v7 + 4) = 0;
  }
  else
  {
    uint64_t v10 = sub_24A494C18(a3, *(void *)a2, v4, v8);
    char v23 = v11;
    unsigned int v25 = HIWORD(v11);
    unsigned int v26 = v11 >> 8;
    unsigned int v24 = HIBYTE(v11);
    swift_bridgeObjectRetain();
    sub_24A5BB830();
    swift_bridgeObjectRelease();
    sub_24A491E1C(v10 & 0xFFFFFFFFFFFFLL);
    sub_24A491D60();
    sub_24A5BB6D0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    unint64_t v12 = sub_24A494C00(a3, v5, v4);
    uint64_t v14 = v13;
    uint64_t v16 = v15;
    uint64_t v18 = v17;
    swift_bridgeObjectRelease();
    uint64_t v19 = MEMORY[0x24C5C68C0](v12, v14, v16, v18);
    uint64_t v21 = v20;
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a2 = v19;
    *(void *)(a2 + 8) = v21;
    *(unsigned char *)(a2 + 16) = BYTE6(v10);
    *(unsigned char *)(a2 + 17) = HIBYTE(v10);
    *(unsigned char *)(a2 + 18) = v23;
    *(unsigned char *)(a2 + 19) = v26;
    *(unsigned char *)(a2 + 20) = v25;
    *(unsigned char *)(a2 + 21) = v24;
  }
  return result;
}

uint64_t FixedWidthInteger._roundUpToPowerOfTwo()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v27 = a3;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v8 = *(void *)(a1 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  unsigned int v25 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  unint64_t v12 = (char *)v23 - v11;
  char v13 = sub_24A5BBF70();
  uint64_t v28 = v3;
  uint64_t v14 = sub_24A5BBF60();
  v23[1] = v5;
  if (v13)
  {
    if (v14 > 64) {
      goto LABEL_3;
    }
LABEL_6:
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v12, v28, a1);
    uint64_t v17 = sub_24A5BBF50();
    unsigned int v24 = *(void (**)(char *, uint64_t))(v8 + 8);
    v24(v12, a1);
    if (v17 <= 0) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  if (v14 <= 63) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v29 = 0;
  sub_24A499FC8();
  sub_24A5BBEF0();
  char v15 = sub_24A5BB420();
  unsigned int v24 = *(void (**)(char *, uint64_t))(v8 + 8);
  v24(v12, a1);
  if ((v15 & 1) == 0)
  {
LABEL_4:
    swift_getAssociatedConformanceWitness();
    sub_24A5BC580();
    return sub_24A5BC500();
  }
LABEL_7:
  v23[0] = sub_24A5BC2E0();
  swift_getAssociatedConformanceWitness();
  sub_24A5BC580();
  uint64_t v18 = v25;
  sub_24A5BC500();
  sub_24A5BC310();
  uint64_t v19 = v18;
  uint64_t v20 = (uint64_t (*)(char *, uint64_t))v24;
  v24(v19, a1);
  uint64_t v21 = sub_24A5BC300();
  uint64_t result = v20(v12, a1);
  uint64_t v22 = v23[0] - v21;
  if (__OFSUB__(v23[0], v21))
  {
    __break(1u);
  }
  else
  {
    sub_24A5BC580();
    sub_24A5BC500();
    uint64_t v29 = v22;
    sub_24A499FC8();
    sub_24A5BBF10();
    return v20(v12, a1);
  }
  return result;
}

uint64_t TreeSet.makeIterator()@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  TreeSet.Iterator.init(_root:)(a1, v8);
  long long v3 = v9[0];
  a2[6] = v8[6];
  a2[7] = v3;
  *(_OWORD *)((char *)a2 + 123) = *(_OWORD *)((char *)v9 + 11);
  long long v4 = v8[3];
  a2[2] = v8[2];
  a2[3] = v4;
  long long v5 = v8[5];
  a2[4] = v8[4];
  a2[5] = v5;
  long long v6 = v8[1];
  *a2 = v8[0];
  a2[1] = v6;
  return swift_retain();
}

uint64_t TreeSet.Iterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(unsigned int *)(v2 + 16);
  if (v5 < *(_DWORD *)(v2 + 20))
  {
    uint64_t v6 = *(void *)(v2 + 8);
    *(_DWORD *)(v2 + 16) = v5 + 1;
LABEL_5:
    uint64_t v8 = *(void *)(a1 + 16);
    uint64_t v9 = *(void *)(a1 + 24);
    uint64_t v10 = MEMORY[0x263F8EE60] + 8;
    uint64_t v11 = nullsub_1(v6 + 16, v6 + 32, v8, MEMORY[0x263F8EE60] + 8, v9);
    uint64_t v13 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v5, v11, v12, v8, v10, v9);
    uint64_t v19 = *(void *)(v8 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(a2, v13, v8);
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56);
    uint64_t v15 = a2;
    uint64_t v16 = 0;
    uint64_t v17 = v8;
    goto LABEL_7;
  }
  uint64_t v6 = _HashTreeIterator._next()();
  if (v6)
  {
    uint64_t v5 = v7;
    goto LABEL_5;
  }
  uint64_t v17 = *(void *)(a1 + 16);
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
  uint64_t v15 = a2;
  uint64_t v16 = 1;
LABEL_7:
  return v14(v15, v16, 1, v17);
}

uint64_t TreeSet.Iterator._it.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_24A4DC5CC(v1, a1);
}

__n128 TreeSet.Iterator._it.setter(uint64_t a1)
{
  long long v3 = v1[7];
  v11[6] = v1[6];
  v12[0] = v3;
  *(_OWORD *)((char *)v12 + 11) = *(_OWORD *)((char *)v1 + 123);
  long long v4 = v1[3];
  v11[2] = v1[2];
  v11[3] = v4;
  long long v5 = v1[5];
  long long v11[4] = v1[4];
  void v11[5] = v5;
  long long v6 = v1[1];
  v11[0] = *v1;
  v11[1] = v6;
  sub_24A4A2BC4((uint64_t)v11);
  long long v7 = *(_OWORD *)(a1 + 112);
  v1[6] = *(_OWORD *)(a1 + 96);
  v1[7] = v7;
  *(_OWORD *)((char *)v1 + 123) = *(_OWORD *)(a1 + 123);
  long long v8 = *(_OWORD *)(a1 + 48);
  v1[2] = *(_OWORD *)(a1 + 32);
  v1[3] = v8;
  long long v9 = *(_OWORD *)(a1 + 80);
  v1[4] = *(_OWORD *)(a1 + 64);
  v1[5] = v9;
  __n128 result = *(__n128 *)(a1 + 16);
  *uint64_t v1 = *(_OWORD *)a1;
  v1[1] = result;
  return result;
}

uint64_t (*TreeSet.Iterator._it.modify())()
{
  return nullsub_1;
}

__n128 TreeSet.Iterator.init(_root:)@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  *(void *)&long long v17 = a1;
  *((void *)&v17 + 1) = a1;
  v18.n128_u32[0] = 0;
  swift_beginAccess();
  unsigned int v5 = *(_DWORD *)(a1 + 16);
  int v4 = *(_DWORD *)(a1 + 20);
  uint8x8_t v6 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v6.i16[0] = vaddlv_u8(v6);
  __int32 v7 = v6.i32[0];
  if (v5 == v4) {
    __int32 v7 = *(_DWORD *)(a1 + 16);
  }
  v18.n128_u32[1] = v7;
  v18.n128_u64[1] = 0;
  *(void *)&long long v19 = a1;
  *((void *)&v19 + 1) = a1;
  *(void *)&long long v20 = a1;
  *((void *)&v20 + 1) = a1;
  *(void *)&long long v21 = a1;
  *((void *)&v21 + 1) = a1;
  *(void *)&long long v22 = a1;
  *((void *)&v22 + 1) = a1;
  *(void *)&long long v23 = a1;
  *((void *)&v23 + 1) = a1;
  *(void *)unsigned int v24 = a1;
  *(void *)&char v24[8] = a1;
  *(void *)&v24[16] = a1;
  *(_WORD *)&v24[24] = 0;
  v24[26] = 0;
  if (!v5)
  {
    if (v4)
    {
      sub_24A53B098(0);
      if (!v18.n128_u32[1])
      {
        unsigned __int8 v12 = v24[24];
        char v13 = v24[25];
        uint64_t v14 = *((void *)&v17 + 1);
        do
        {
          *((void *)&v19 + v12) = v14;
          v13 += 5;
          uint64_t v14 = *(void *)(v14 + 32);
          swift_beginAccess();
          unsigned __int32 v15 = *(_DWORD *)(v14 + 16);
          uint8x8_t v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
          v16.i16[0] = vaddlv_u8(v16);
          if (v15 != *(_DWORD *)(v14 + 20)) {
            unsigned __int32 v15 = v16.i32[0];
          }
          ++v12;
        }
        while (!v15);
        v18.n128_u32[0] = 0;
        v18.n128_u32[1] = v15;
        *((void *)&v17 + 1) = v14;
        v24[25] = v13;
        v24[24] = v12;
      }
    }
    else
    {
      v24[26] = 1;
    }
  }
  long long v8 = *(_OWORD *)v24;
  a2[6] = v23;
  a2[7] = v8;
  *(_OWORD *)((char *)a2 + 123) = *(_OWORD *)&v24[11];
  long long v9 = v20;
  a2[2] = v19;
  a2[3] = v9;
  long long v10 = v22;
  a2[4] = v21;
  a2[5] = v10;
  __n128 result = v18;
  *a2 = v17;
  a2[1] = v18;
  return result;
}

BOOL TreeSet._customContainsEquatableElement(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = sub_24A5B85E4();
  return _HashNode.containsKey(_:_:_:)(0, a1, v11, a2, a3, a5, MEMORY[0x263F8EE60] + 8, a6);
}

__n128 sub_24A4DC49C@<Q0>(uint64_t a1@<X8>)
{
  TreeSet.makeIterator()(*v1, v7);
  swift_release();
  long long v3 = v8[0];
  *(_OWORD *)(a1 + 96) = v7[6];
  *(_OWORD *)(a1 + 112) = v3;
  *(_OWORD *)(a1 + 123) = *(_OWORD *)((char *)v8 + 11);
  long long v4 = v7[3];
  *(_OWORD *)(a1 + 32) = v7[2];
  *(_OWORD *)(a1 + 48) = v4;
  long long v5 = v7[5];
  *(_OWORD *)(a1 + 64) = v7[4];
  *(_OWORD *)(a1 + 80) = v5;
  __n128 result = (__n128)v7[1];
  *(_OWORD *)a1 = v7[0];
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_24A4DC510(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270F9E108](a1, WitnessTable);
}

BOOL sub_24A4DC564(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return TreeSet._customContainsEquatableElement(_:)(a1, *v4, v4[1], a4, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t sub_24A4DC574(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270F9E128](a1, WitnessTable);
}

uint64_t sub_24A4DC5CC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_24A4DC628()
{
  return swift_getWitnessTable();
}

uint64_t initializeWithCopy for _HashTreeIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 135) = *(_DWORD *)(a2 + 135);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for _HashTreeIterator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(unsigned char *)(a1 + 137) = *(unsigned char *)(a2 + 137);
  *(unsigned char *)(a1 + 138) = *(unsigned char *)(a2 + 138);
  return a1;
}

__n128 __swift_memcpy139_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 123) = *(_OWORD *)(a2 + 123);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for _HashTreeIterator(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  long long v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v6;
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  *(unsigned char *)(a1 + 138) = *(unsigned char *)(a2 + 138);
  return a1;
}

uint64_t getEnumTagSinglePayload for _HashTreeIterator(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 139)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _HashTreeIterator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 138) = 0;
    *(_WORD *)(result + 136) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 139) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 139) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for TreeSet.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t TreeDictionary.init()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_26979ACF0 != -1) {
    swift_once();
  }
  uint64_t v6 = _HashNode.init(storage:count:)(_emptySingleton, 0, a1, a2, a3);
  uint64_t v8 = TreeDictionary.init(_new:)(v6, v7, a1, a2, a3);
  swift_retain();
  return v8;
}

uint64_t TreeDictionary.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = sub_24A4DDF18(a1, a2, a3, a4);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t TreeDictionary.init<A>(_uniqueKeysWithValues:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_24A4DCC68(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void))sub_24A4DD924);
}

uint64_t TreeDictionary.init(keys:valueGenerator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _OWORD v17[2] = a6;
  v17[3] = a7;
  v17[4] = a8;
  v17[5] = a4;
  void v17[6] = a5;
  _HashNode.mapValues<A>(_:)((void (*)(char *, char *))sub_24A4DDF98, (uint64_t)v17, a1, a2, a6, MEMORY[0x263F8EE60] + 8, a7, a8);
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t result = swift_release();
  if (!v8) {
    return TreeDictionary.init(_new:)(v13, v15, a6, a7, a8);
  }
  return result;
}

uint64_t sub_24A4DCAFC(uint64_t a1, uint64_t a2, void (*a3)(char *), uint64_t a4, uint64_t a5)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v11 = (char *)v13 - v10;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))((char *)v13 - v10, a1, a5);
  a3(v11);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, TupleTypeMetadata2);
}

uint64_t TreeDictionary.init<A>(uniqueKeysWithValues:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_24A4DCC68(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void))sub_24A4DDFBC);
}

uint64_t sub_24A4DCC68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void))
{
  uint64_t v9 = a7();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(a1, a4);
  return v9;
}

uint64_t TreeDictionary.init<A>(uniqueKeysWithValues:)(void (*a1)(char *, char *, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (type metadata accessor for TreeDictionary() == a4)
  {
    (*(void (**)(char *, void, uint64_t))(v10 + 32))(v12, a1, a4);
    swift_dynamicCast();
    return v16;
  }
  else
  {
    if (sub_24A5BB350() == a4)
    {
      (*(void (**)(char *, void, uint64_t))(v10 + 16))(v12, a1, a4);
      swift_dynamicCast();
      uint64_t v13 = sub_24A4DDF18(v16, a2, a3, a5);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v13 = sub_24A4DD924(a1, a2, a3, a4, a5);
    }
    (*(void (**)(void (*)(char *, char *, uint64_t), uint64_t))(v10 + 8))(a1, a4);
  }
  return v13;
}

uint64_t TreeDictionary.init<A>(_:uniquingKeysWith:)(char *a1, void (*a2)(char *, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12 = sub_24A4DE5AC(a1, a2, a3, a4, a5, a6, a7, a8);
  if (!v8) {
    uint64_t v9 = v12;
  }
  (*(void (**)(char *, uint64_t))(*(void *)(a6 - 8) + 8))(a1, a6);
  return v9;
}

uint64_t TreeDictionary.init<A>(_:uniquingKeysWith:)(uint64_t a1, void (*a2)(char *, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v33 = a3;
  uint64_t v28 = a7;
  uint64_t v32 = a2;
  uint64_t v27 = sub_24A5BC080();
  uint64_t v29 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  uint64_t v14 = (char *)v26 - v13;
  uint64_t v15 = a5;
  v26[0] = a5;
  v26[1] = swift_getTupleTypeMetadata2();
  uint64_t v16 = sub_24A5BC270();
  uint64_t v31 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  __n128 v18 = (char *)v26 - v17;
  uint64_t v35 = a1;
  MEMORY[0x24C5C6BF0](a6, a8);
  long long v19 = (void *)swift_allocObject();
  uint64_t v19[2] = a4;
  v19[3] = v15;
  uint64_t v30 = a6;
  uint64_t v20 = v28;
  void v19[4] = a6;
  __n128 v19[5] = v20;
  v19[6] = a8;
  uint64_t v21 = v27;
  swift_getWitnessTable();
  sub_24A5BC390();
  swift_release();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v14, v21);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v23 = v34;
  uint64_t v24 = sub_24A4DE5AC(v18, v32, v33, a4, v26[0], v16, v20, WitnessTable);
  if (!v23) {
    uint64_t v21 = v24;
  }
  (*(void (**)(char *, uint64_t))(v31 + 8))(v18, v16);
  (*(void (**)(uint64_t))(*(void *)(v30 - 8) + 8))(v35);
  return v21;
}

uint64_t sub_24A4DD2C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v28 = a4;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = TupleTypeMetadata2 - 8;
  uint64_t v10 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v31 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v24 - v12;
  uint64_t v30 = a4 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  uint64_t v14 = *(int *)(v9 + 56);
  uint64_t v15 = &v13[v14];
  uint64_t v29 = &v13[v14];
  uint64_t v16 = a1 + v14;
  uint64_t v25 = a1 + v14;
  uint64_t v17 = *(void *)(a2 - 8);
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  uint64_t v27 = a1;
  v26(v13, a1, a2);
  uint64_t v18 = *(void *)(a3 - 8);
  long long v19 = *(void (**)(char *, uint64_t))(v18 + 16);
  v19(v15, v16);
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v28, v13, a2);
  uint64_t v20 = *(int *)(v9 + 56);
  uint64_t v21 = v31;
  long long v22 = &v31[v20];
  v26(v31, v27, a2);
  ((void (*)(char *, uint64_t, uint64_t))v19)(v22, v25, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v30, v22, a3);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v21, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v29, a3);
}

uint64_t TreeDictionary.init<A>(grouping:by:)(uint64_t *a1, uint64_t (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13 = sub_24A4DE6A0(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if (!v9) {
    uint64_t v10 = v13;
  }
  (*(void (**)(uint64_t *, uint64_t))(*(void *)(a6 - 8) + 8))(a1, a6);
  return v10;
}

uint64_t TreeDictionary.init<A>(_grouping:by:)(uint64_t *a1, uint64_t (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13 = sub_24A4DE6A0(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if (!v9) {
    uint64_t v10 = v13;
  }
  (*(void (**)(uint64_t *, uint64_t))(*(void *)(a6 - 8) + 8))(a1, a6);
  return v10;
}

uint64_t TreeDictionary.init<A>(grouping:by:)(uint64_t *a1, uint64_t (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  swift_getAssociatedTypeWitness();
  uint64_t v15 = sub_24A5BB9F0();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v17 = sub_24A4DE6A0(a1, a2, a3, a4, v15, a5, a6, WitnessTable, a7);
  if (!v7) {
    a7 = v17;
  }
  (*(void (**)(uint64_t *, uint64_t))(*(void *)(a5 - 8) + 8))(a1, a5);
  return a7;
}

uint64_t sub_24A4DD820(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v5 + 16))((char *)&v7 - v4, a2);
  return sub_24A5BBC30();
}

uint64_t sub_24A4DD924(void (*a1)(char *, char *, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v71 = a5;
  char v68 = a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v69 = *(char **)(TupleTypeMetadata2 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v54 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v72 = (char *)&v48 - v11;
  uint64_t v13 = v12;
  uint64_t v14 = sub_24A5BBD20();
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  uint64_t v17 = (char *)&v48 - v16;
  uint64_t v18 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v20 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v49 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v23 = (char *)&v48 - v22;
  uint64_t v24 = TreeDictionary.init()(a2, a3, v71);
  uint64_t v48 = v25;
  uint64_t v73 = v24;
  uint64_t v74 = v26;
  (*(void (**)(char *, void, uint64_t))(v18 + 16))(v20, v68, a4);
  unint64_t v59 = v23;
  sub_24A5BB840();
  uint64_t v60 = AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v57 = (unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48);
  uint64_t v58 = AssociatedConformanceWitness;
  uint64_t v55 = a2;
  uint64_t v52 = a2 - 8;
  uint64_t v56 = a3;
  uint64_t v51 = a3 - 8;
  uint64_t v50 = (void (**)(uint64_t, uint64_t))(v69 + 8);
  uint64_t v70 = v13;
  unint64_t v53 = v17;
  uint64_t v29 = a2;
  uint64_t v28 = a3;
  while (1)
  {
    sub_24A5BBEE0();
    if ((*v57)(v17, 1, v13) == 1) {
      break;
    }
    uint64_t v30 = *(int *)(v13 + 48);
    uint64_t v31 = v72;
    uint64_t v32 = &v72[v30];
    uint64_t v33 = &v17[v30];
    uint64_t v65 = *(void **)(v29 - 8);
    uint64_t v34 = v65;
    char v68 = (void (*)(char *, char *, uint64_t))v65[4];
    uint64_t v69 = (char *)(v65 + 4);
    v68(v72, v17, v29);
    uint64_t v35 = *(void **)(v28 - 8);
    uint64_t v36 = (void (*)(uint64_t, char *, uint64_t))v35[4];
    uint64_t v66 = v35 + 4;
    uint64_t v67 = v36;
    v36((uint64_t)v32, v33, v28);
    uint64_t v37 = *(int *)(v13 + 48);
    uint64_t v38 = (uint64_t)v54;
    unsigned int v39 = &v54[v37];
    uint64_t v62 = (void (*)(char *, char *, uint64_t))v34[2];
    v62(v54, v31, v29);
    uint64_t v61 = (void (*)(char *, char *, uint64_t))v35[2];
    v61(v39, v32, v28);
    uint64_t v40 = sub_24A5B85E4();
    unsigned int v41 = (void *)v65[1];
    unint64_t v64 = v40;
    uint64_t v65 = v41;
    ((void (*)(uint64_t, uint64_t))v41)(v38, v29);
    uint64_t v63 = (void (*)(char *, uint64_t))v35[1];
    v63(v39, v28);
    uint64_t v42 = v38 + *(int *)(v70 + 48);
    v62((char *)v38, v72, v29);
    v61((char *)v42, v32, v28);
    uint64_t v43 = v70;
    uint64_t v44 = (void *)type metadata accessor for _HashNode();
    LOBYTE(v39) = _HashNode.insert(_:_:_:)(0, v38, v42, v64, v44);
    v63((char *)v42, v28);
    uint64_t v17 = v53;
    ((void (*)(uint64_t, uint64_t))v65)(v38, v29);
    uint64_t v45 = v38 + *(int *)(v43 + 48);
    v68((char *)v38, v72, v29);
    v67(v45, v32, v28);
    uint64_t v46 = v38;
    uint64_t v13 = v43;
    (*v50)(v46, v43);
    if ((v39 & 1) == 0)
    {
      __break(1u);
      break;
    }
  }
  (*(void (**)(char *, uint64_t))(v49 + 8))(v59, v60);
  return v73;
}

uint64_t sub_24A4DDF18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a1;
  uint64_t v7 = sub_24A5BB350();
  swift_getWitnessTable();
  return sub_24A4DD924((void (*)(char *, char *, uint64_t))&v9, a2, a3, v7, a4);
}

uint64_t sub_24A4DDF98(uint64_t a1, uint64_t a2)
{
  return sub_24A4DCAFC(a1, a2, *(void (**)(char *))(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 16));
}

uint64_t sub_24A4DDFBC(void (*a1)(char *, char *, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v71 = a5;
  char v68 = a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v69 = *(char **)(TupleTypeMetadata2 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v54 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v72 = (char *)&v48 - v11;
  uint64_t v13 = v12;
  uint64_t v14 = sub_24A5BBD20();
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  uint64_t v17 = (char *)&v48 - v16;
  uint64_t v18 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v20 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v49 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v23 = (char *)&v48 - v22;
  uint64_t v24 = TreeDictionary.init()(a2, a3, v71);
  uint64_t v48 = v25;
  uint64_t v73 = v24;
  uint64_t v74 = v26;
  (*(void (**)(char *, void, uint64_t))(v18 + 16))(v20, v68, a4);
  unint64_t v59 = v23;
  sub_24A5BB840();
  uint64_t v60 = AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v57 = (unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48);
  uint64_t v58 = AssociatedConformanceWitness;
  uint64_t v55 = a2;
  uint64_t v52 = a2 - 8;
  uint64_t v56 = a3;
  uint64_t v51 = a3 - 8;
  uint64_t v50 = (void (**)(uint64_t, uint64_t))(v69 + 8);
  uint64_t v70 = v13;
  unint64_t v53 = v17;
  uint64_t v29 = a2;
  uint64_t v28 = a3;
  while (1)
  {
    sub_24A5BBEE0();
    if ((*v57)(v17, 1, v13) == 1) {
      break;
    }
    uint64_t v30 = *(int *)(v13 + 48);
    uint64_t v31 = v72;
    uint64_t v32 = &v72[v30];
    uint64_t v33 = &v17[v30];
    uint64_t v65 = *(void **)(v29 - 8);
    uint64_t v34 = v65;
    char v68 = (void (*)(char *, char *, uint64_t))v65[4];
    uint64_t v69 = (char *)(v65 + 4);
    v68(v72, v17, v29);
    uint64_t v35 = *(void **)(v28 - 8);
    uint64_t v36 = (void (*)(uint64_t, char *, uint64_t))v35[4];
    uint64_t v66 = v35 + 4;
    uint64_t v67 = v36;
    v36((uint64_t)v32, v33, v28);
    uint64_t v37 = *(int *)(v13 + 48);
    uint64_t v38 = (uint64_t)v54;
    unsigned int v39 = &v54[v37];
    uint64_t v62 = (void (*)(char *, char *, uint64_t))v34[2];
    v62(v54, v31, v29);
    uint64_t v61 = (void (*)(char *, char *, uint64_t))v35[2];
    v61(v39, v32, v28);
    uint64_t v40 = sub_24A5B85E4();
    unsigned int v41 = (void *)v65[1];
    unint64_t v64 = v40;
    uint64_t v65 = v41;
    ((void (*)(uint64_t, uint64_t))v41)(v38, v29);
    uint64_t v63 = (void (*)(char *, uint64_t))v35[1];
    v63(v39, v28);
    uint64_t v42 = v38 + *(int *)(v70 + 48);
    v62((char *)v38, v72, v29);
    v61((char *)v42, v32, v28);
    uint64_t v43 = v70;
    uint64_t v44 = (void *)type metadata accessor for _HashNode();
    LOBYTE(v39) = _HashNode.insert(_:_:_:)(0, v38, v42, v64, v44);
    v63((char *)v42, v28);
    uint64_t v17 = v53;
    ((void (*)(uint64_t, uint64_t))v65)(v38, v29);
    uint64_t v45 = v38 + *(int *)(v43 + 48);
    v68((char *)v38, v72, v29);
    v67(v45, v32, v28);
    uint64_t v46 = v38;
    uint64_t v13 = v43;
    (*v50)(v46, v43);
    if ((v39 & 1) == 0)
    {
      __break(1u);
      break;
    }
  }
  (*(void (**)(char *, uint64_t))(v49 + 8))(v59, v60);
  return v73;
}

uint64_t sub_24A4DE5AC(char *a1, void (*a2)(char *, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = TreeDictionary.init()(a4, a5, a7);
  uint64_t v14 = type metadata accessor for TreeDictionary();
  sub_24A5BA7B4(a1, a2, a3, v14, a6, a8);
  uint64_t result = v16;
  if (v8) {
    return swift_release();
  }
  return result;
}

uint64_t sub_24A4DE680()
{
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t sub_24A4DE690@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24A4DD2C8(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_24A4DE6A0(uint64_t *a1, uint64_t (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v66 = a5;
  uint64_t v67 = a7;
  uint64_t v51 = a4;
  uint64_t v62 = a2;
  uint64_t v63 = a3;
  char v68 = a1;
  unint64_t v53 = *(void (***)(uint64_t, uint64_t))(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v69 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = v11;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v58 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v14 = (char *)&v50 - v13;
  uint64_t v15 = sub_24A5BBD20();
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v18 = (char *)&v50 - v17;
  uint64_t v19 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v21 = (char *)&v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = swift_getAssociatedTypeWitness();
  uint64_t v50 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v50 - v23;
  uint64_t v70 = TreeDictionary.init()(v51, v66, v67);
  uint64_t v71 = v25;
  uint64_t v72 = v26;
  (*(void (**)(char *, uint64_t *, uint64_t))(v19 + 16))(v21, v68, a6);
  uint64_t v27 = AssociatedTypeWitness;
  uint64_t v28 = v58;
  sub_24A5BB840();
  uint64_t v59 = a9;
  uint64_t v60 = a6;
  swift_getAssociatedConformanceWitness();
  unint64_t v64 = v24;
  uint64_t v65 = v22;
  sub_24A5BBEE0();
  uint64_t v29 = v28[6];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v29)(v18, 1, v27) == 1)
  {
LABEL_5:
    (*(void (**)(char *, uint64_t))(v50 + 8))(v64, v65);
    return v70;
  }
  else
  {
    uint64_t v30 = v28[4];
    ++v53;
    uint64_t v57 = v30;
    uint64_t v58 = v28 + 1;
    uint64_t v52 = MEMORY[0x263F8EE60] + 8;
    uint64_t v31 = v51;
    uint64_t v55 = v18;
    uint64_t v56 = v27;
    uint64_t v54 = v29;
    while (1)
    {
      ((void (*)(char *, char *, uint64_t))v57)(v14, v18, v27);
      uint64_t v32 = v73;
      uint64_t v33 = v62(v14);
      uint64_t v73 = v32;
      if (v32) {
        break;
      }
      char v68 = &v50;
      uint64_t v34 = MEMORY[0x270FA5388](v33);
      uint64_t v35 = v66;
      uint64_t v36 = v67;
      *(&v50 - 6) = v31;
      *(&v50 - 5) = v35;
      uint64_t v37 = v61;
      *(&v50 - 4) = v60;
      *(&v50 - 3) = v36;
      uint64_t v38 = v59;
      *(&v50 - 2) = v37;
      *(&v50 - 1) = v38;
      MEMORY[0x270FA5388](v34);
      uint64_t v39 = (uint64_t)v69;
      *(&v50 - 8) = v31;
      *(&v50 - 7) = v40;
      *(&v50 - 6) = v42;
      *(&v50 - 5) = v41;
      *(&v50 - 4) = v43;
      *(&v50 - 3) = v44;
      *(&v50 - 2) = (uint64_t)v14;
      uint64_t v45 = (void *)type metadata accessor for TreeDictionary();
      uint64_t v46 = v73;
      uint64_t v18 = v55;
      TreeDictionary.updateValue<A>(forKey:default:with:)(v39, (uint64_t)sub_24A4C599C, (uint64_t)(&v50 - 8), sub_24A4DEC38, (uint64_t)(&v50 - 10), v45, v52);
      uint64_t v73 = v46;
      uint64_t v27 = v56;
      uint64_t v47 = v39;
      uint64_t v48 = v54;
      (*v53)(v47, v31);
      (*v58)(v14, v27);
      sub_24A5BBEE0();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v48)(v18, 1, v27) == 1) {
        goto LABEL_5;
      }
    }
    (*(void (**)(char *, uint64_t))(v50 + 8))(v64, v65);
    swift_release();
    return ((uint64_t (*)(char *, uint64_t))*v58)(v14, v27);
  }
}

uint64_t sub_24A4DEC38(uint64_t a1)
{
  return sub_24A4DD820(a1, *(void *)(v1 + 64));
}

__n128 BigString.init(_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

{
  long long v2;
  __n128 result;

  long long v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

{
  long long v2;
  __n128 result;

  long long v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

{
  long long v2;
  __n128 result;

  long long v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

uint64_t static BigString.UTF16View.== infix(_:_:)(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  v6[0] = *a1;
  v6[1] = v2;
  _OWORD v6[2] = a1[2];
  long long v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  void v5[2] = a2[2];
  return sub_24A551D98(v6, v5) & 1;
}

BOOL BigString.UTF16View.isIdentical(to:)(_OWORD *a1)
{
  uint64_t v2 = (uint64_t)v1;
  long long v4 = v1[1];
  _OWORD v8[3] = *v1;
  _OWORD v8[4] = v4;
  v8[5] = v1[2];
  long long v5 = a1[1];
  v8[0] = *a1;
  v8[1] = v5;
  _OWORD v8[2] = a1[2];
  sub_24A497498((uint64_t)v1);
  sub_24A497498((uint64_t)a1);
  BOOL v6 = sub_24A495D7C((uint64_t)v8);
  sub_24A496BE8((uint64_t)a1);
  sub_24A496BE8(v2);
  return v6;
}

uint64_t sub_24A4DED48(_OWORD *a1, long long *a2)
{
  long long v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  long long v3 = *a2;
  long long v4 = a2[1];
  v7[2] = a1[2];
  v8[0] = v3;
  long long v5 = a2[2];
  v8[1] = v4;
  _OWORD v8[2] = v5;
  return sub_24A551D98(v7, v8) & 1;
}

uint64_t BigString.UTF16View.hash(into:)()
{
  return sub_24A55AFA0();
}

uint64_t BigString.UTF16View.hashValue.getter()
{
  return sub_24A5BC690();
}

uint64_t sub_24A4DEE20()
{
  return sub_24A5BC690();
}

uint64_t sub_24A4DEE74()
{
  return sub_24A55AFA0();
}

uint64_t sub_24A4DEEB0()
{
  return sub_24A5BC690();
}

void BigString.UTF16View.makeIterator()(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v7 = v1[5];
  if (!*v1) {
    goto LABEL_8;
  }
  if ((v8 & 0x8000000000000000) == 0)
  {
    if (*(_WORD *)(v3 + 16)) {
      BOOL v9 = v8 == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9)
    {
      uint64_t v27 = v1[3];
      uint64_t v13 = *(unsigned __int8 *)(v3 + 18);
      if (*(unsigned char *)(v3 + 18))
      {
        swift_unknownObjectRetain_n();
        uint64_t v11 = 0;
        uint64_t v14 = v3;
        do
        {
          uint64_t v15 = *(unsigned __int16 *)(v14 + 16);
          if (*(_WORD *)(v14 + 16))
          {
            uint64_t v17 = 0;
            uint64_t v18 = (uint64_t *)(v14 + 56);
            while (1)
            {
              uint64_t v19 = *v18;
              v18 += 5;
              uint64_t v20 = v11 - v19;
              if (__OFSUB__(v11, v19)) {
                break;
              }
              if (__OFADD__(v20, 1)) {
                goto LABEL_39;
              }
              if (v20 + 1 < 1)
              {
                uint64_t v15 = v17;
                goto LABEL_12;
              }
              ++v17;
              uint64_t v11 = v20;
              if (v15 == v17) {
                goto LABEL_21;
              }
            }
            __break(1u);
LABEL_39:
            __break(1u);
LABEL_40:
            __break(1u);
            goto LABEL_41;
          }
          uint64_t v20 = v11;
LABEL_21:
          if (v20) {
            goto LABEL_40;
          }
          uint64_t v11 = 0;
LABEL_12:
          char v16 = (4 * *(unsigned char *)(v14 + 18) + 8) & 0x3C;
          uint64_t v13 = ((-15 << v16) - 1) & v13 | (v15 << v16);
          uint64_t v12 = *(void *)(v14 + 24 + 40 * v15);
          swift_unknownObjectRetain();
          swift_unknownObjectRelease();
          uint64_t v14 = v12;
        }
        while (*(unsigned char *)(v12 + 18));
        unint64_t v21 = v13 & 0xFFFFFFFFFFFFF0FFLL;
        uint64_t v22 = *(unsigned __int16 *)(v12 + 16);
        if (!*(_WORD *)(v12 + 16)) {
          goto LABEL_31;
        }
        goto LABEL_24;
      }
      swift_unknownObjectRetain_n();
      unint64_t v21 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = v3;
      uint64_t v22 = *(unsigned __int16 *)(v3 + 16);
      if (*(_WORD *)(v3 + 16))
      {
LABEL_24:
        uint64_t v23 = 0;
        uint64_t v24 = (unsigned __int8 *)(v12 + 40);
        while (1)
        {
          unsigned int v25 = *v24;
          v24 += 24;
          uint64_t v26 = v11 - v25;
          if (__OFSUB__(v11, v25)) {
            break;
          }
          if (__OFADD__(v26, 1)) {
            goto LABEL_42;
          }
          if (v26 + 1 < 1)
          {
            uint64_t v22 = v23;
            goto LABEL_35;
          }
          ++v23;
          uint64_t v11 = v26;
          if (v22 == v23) {
            goto LABEL_32;
          }
        }
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        goto LABEL_44;
      }
LABEL_31:
      uint64_t v26 = v11;
LABEL_32:
      if (v26) {
        goto LABEL_45;
      }
      uint64_t v11 = 0;
LABEL_35:
      swift_unknownObjectRelease();
      if (v11 < 0) {
        goto LABEL_43;
      }
      unint64_t v10 = v21 | (v22 << 8);
      uint64_t v5 = v27;
LABEL_37:
      *a1 = v3;
      a1[1] = v4;
      a1[2] = v6;
      a1[3] = v5;
      a1[4] = v8;
      a1[5] = v7;
      a1[6] = v11 | 0x300;
      a1[7] = v7;
      a1[8] = v10;
      a1[9] = v12;
      return;
    }
LABEL_8:
    sub_24A497498((uint64_t)v1);
    unint64_t v10 = sub_24A498214();
    LOBYTE(v11) = 0;
    uint64_t v12 = 0;
    goto LABEL_37;
  }
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
}

uint64_t BigString.UTF16View.startIndex.getter()
{
  return 768;
}

__n128 sub_24A4DF144@<Q0>(uint64_t a1@<X8>)
{
  long long v3 = v1[1];
  v7[0] = *v1;
  v7[1] = v3;
  v7[2] = v1[2];
  BigString.UTF16View.makeIterator()(v6);
  sub_24A496BE8((uint64_t)v7);
  long long v4 = v6[3];
  *(_OWORD *)(a1 + 32) = v6[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v6[4];
  __n128 result = (__n128)v6[1];
  *(_OWORD *)a1 = v6[0];
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_24A4DF1A8()
{
  if (*v0) {
    return v0[3];
  }
  else {
    return 0;
  }
}

uint64_t sub_24A4DF1BC()
{
  long long v1 = v0[1];
  v4[0] = *v0;
  v4[1] = v1;
  v4[2] = v0[2];
  uint64_t v2 = sub_24A5958E4(v4);
  sub_24A496BE8((uint64_t)v4);
  return v2;
}

uint64_t sub_24A4DF208(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_24A585B48(a1, a2, a3);
}

Swift::UInt16_optional __swiftcall BigString.UTF16View.Iterator.next()()
{
  uint64_t v5 = *(void *)(v1 + 32);
  if (*(void *)v1) {
    BOOL v6 = 2 * (v5 & 0x1FFFFFFFFFFFFFuLL) > *(void *)(v1 + 48) >> 10;
  }
  else {
    BOOL v6 = 0;
  }
  uint64_t v7 = !v6;
  if (!v6)
  {
    LOWORD(v8) = 0;
    return (Swift::UInt16_optional)((unsigned __int16)v8 | (v7 << 16));
  }
  unint64_t v9 = v1;
  uint64_t v10 = *(void *)(v1 + 72);
  if (v10 == 1)
  {
    __break(1u);
    return (Swift::UInt16_optional)v0;
  }
  if (*(void *)(v1 + 56) != *(void *)(v1 + 40))
  {
    __break(1u);
LABEL_47:
    unint64_t v8 = sub_24A4DFD84(v4, v7, v1);
    goto LABEL_15;
  }
  uint64_t v32 = *(void *)(v1 + 56);
  int v31 = v7;
  unint64_t v3 = *(void *)(v1 + 64);
  unint64_t v4 = (16 * *(void *)(v1 + 48)) & 0x4000 | ((unint64_t)*(void *)(v1 + 48) << 16) | (*(void *)(v1 + 48) >> 8) & 3 | 4;
  if (v10)
  {
    unint64_t v11 = v10 + 24 * ((v3 >> ((4 * *(unsigned char *)(v10 + 18) + 8) & 0x3C)) & 0xF);
    uint64_t v7 = *(void *)(v11 + 24);
    unint64_t v1 = *(void *)(v11 + 32);
    unsigned int v30 = *(unsigned __int8 *)(v11 + 40);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v12 = *(_OWORD *)(v1 + 8);
    uint64_t v13 = *(void *)(v1 + 24);
    uint64_t v36 = *(void *)v1;
    long long v37 = v12;
    uint64_t v38 = v13;
    uint64_t v39 = v5;
    swift_unknownObjectRetain();
    sub_24A4895D4(v3, (uint64_t)&v33);
    swift_unknownObjectRelease();
    unint64_t v1 = *((void *)&v33 + 1);
    uint64_t v7 = v33;
    unsigned int v30 = v34;
  }
  LODWORD(v2) = (v1 >> 60) & ((v7 & 0x800000000000000) == 0);
  unint64_t v8 = v4;
  if (v2 == 1) {
    goto LABEL_47;
  }
LABEL_15:
  if ((v1 & 0x2000000000000000) != 0) {
    unint64_t v14 = HIBYTE(v1) & 0xF;
  }
  else {
    unint64_t v14 = v7 & 0xFFFFFFFFFFFFLL;
  }
  if (v8 >> 16 >= v14)
  {
    __break(1u);
LABEL_49:
    unint64_t v8 = sub_24A5BB790();
    if (v2) {
      goto LABEL_50;
    }
    goto LABEL_30;
  }
  if ((v1 & 0x1000000000000000) != 0) {
    goto LABEL_49;
  }
  if ((v8 & 1) == 0) {
    goto LABEL_52;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = sub_24A5BC040();
    swift_bridgeObjectRelease();
    if ((v8 & 0xC000) != 0x4000)
    {
      if (WORD1(v15))
      {
        unint64_t v8 = (unsigned __int16)((v15 + 67043328) >> 10) + 55296;
        if ((v8 & 0x10000) == 0) {
          goto LABEL_29;
        }
        __break(1u);
      }
      unint64_t v8 = v15;
LABEL_29:
      if ((v2 & 1) == 0) {
        goto LABEL_30;
      }
LABEL_50:
      unint64_t v4 = sub_24A4DFD84(v4, v7, v1);
      goto LABEL_30;
    }
    if (v15 < 0x10000)
    {
      __break(1u);
      goto LABEL_55;
    }
    unint64_t v8 = v15 & 0x3FF | 0xFFFFDC00;
    if (v2) {
      goto LABEL_50;
    }
LABEL_30:
    unint64_t v2 = v4 >> 16;
    if (v4 >> 16 < v14) {
      break;
    }
    __break(1u);
LABEL_52:
    sub_24A4971A8(v8, v7, v1);
  }
  if ((v1 & 0x1000000000000000) != 0)
  {
    unint64_t v17 = MEMORY[0x24C5C6AA0](v4, v7, v1);
    swift_bridgeObjectRelease();
    LODWORD(v7) = v31;
    goto LABEL_60;
  }
  uint64_t v16 = (v1 >> 62) & 1;
  if ((v1 & 0x2000000000000000) == 0) {
    LOBYTE(v16) = v7 < 0;
  }
  if (v16)
  {
    swift_bridgeObjectRelease();
    unint64_t v17 = (v4 & 0xFFFFFFFFFFFF0000) + 65549;
    LODWORD(v7) = v31;
    goto LABEL_60;
  }
  if ((v4 & 0xC001) != 0)
  {
    if ((v1 & 0x2000000000000000) == 0) {
      goto LABEL_38;
    }
LABEL_56:
    *(void *)&long long v33 = v7;
    *((void *)&v33 + 1) = v1 & 0xFFFFFFFFFFFFFFLL;
    int v19 = *((unsigned __int8 *)&v33 + v2);
    swift_bridgeObjectRelease();
    LODWORD(v7) = v31;
    if ((v19 & 0x80) == 0) {
      goto LABEL_57;
    }
    goto LABEL_41;
  }
LABEL_55:
  unint64_t v22 = sub_24A4971A8(v4, v7, v1);
  unint64_t v4 = v22 & 0xFFFFFFFFFFFFFFF2 | 1;
  unint64_t v2 = v22 >> 16;
  if ((v1 & 0x2000000000000000) != 0) {
    goto LABEL_56;
  }
LABEL_38:
  if ((v7 & 0x1000000000000000) != 0) {
    uint64_t v18 = (v1 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else {
    uint64_t v18 = sub_24A5BC120();
  }
  LODWORD(v7) = v31;
  int v19 = *(unsigned __int8 *)(v18 + v2);
  swift_bridgeObjectRelease();
  if ((v19 & 0x80) == 0)
  {
LABEL_57:
    uint64_t v20 = 1;
    goto LABEL_58;
  }
LABEL_41:
  LODWORD(v20) = __clz(v19 ^ 0xFF) - 24;
  if (v20 == 4)
  {
    if ((v4 & 0xC000) == 0)
    {
      unsigned __int16 v21 = 16388;
      goto LABEL_59;
    }
    uint64_t v20 = 4;
  }
  else
  {
    uint64_t v20 = v20;
  }
LABEL_58:
  v4 += v20 << 16;
  unsigned __int16 v21 = 5;
LABEL_59:
  unint64_t v17 = v4 & 0xFFFFFFFFFFFF0000 | v21;
LABEL_60:
  uint64_t v23 = *(void *)(v9 + 48);
  if (v17 >> 14 >= 4 * v14)
  {
    long long v27 = *(_OWORD *)(v9 + 16);
    long long v33 = *(_OWORD *)v9;
    long long v34 = v27;
    long long v35 = *(_OWORD *)(v9 + 32);
    sub_24A4974C4((uint64_t)&v33, (uint64_t)v40);
    sub_24A497498((uint64_t)v40);
    uint64_t v26 = sub_24A4980DC(v32, v3, v10);
    unint64_t v3 = v28;
    uint64_t v10 = v29;
    sub_24A496BE8((uint64_t)&v33);
    unint64_t v25 = (v23 + ((v30 - (unint64_t)v23) << 11)) & 0xFFFFFFFFFFFFF800;
  }
  else
  {
    unint64_t v24 = (v23 + (((v17 >> 16) - v23) << 11)) & 0xFFFFFFFFFFFFF800;
    if ((v17 & 0xC000) != 0) {
      v24 |= 0x400uLL;
    }
    unint64_t v25 = v24 & 0xFFFFFFFFFFFFFF00 | BYTE2(v17);
    uint64_t v26 = v32;
  }
  *(void *)(v9 + 48) = v25;
  *(void *)(v9 + 56) = v26;
  *(void *)(v9 + 64) = v3;
  *(void *)(v9 + 72) = v10;
  return (Swift::UInt16_optional)((unsigned __int16)v8 | (v7 << 16));
}

uint64_t sub_24A4DF674@<X0>(uint64_t a1@<X8>)
{
  *(Swift::UInt16_optional *)&uint64_t result = BigString.UTF16View.Iterator.next()();
  *(_WORD *)a1 = result;
  *(unsigned char *)(a1 + 2) = BYTE2(result) & 1;
  return result;
}

uint64_t BigString.UTF16View.endIndex.getter()
{
  if (*v0) {
    return (v0[4] << 11) | 0x300;
  }
  else {
    return 768;
  }
}

uint64_t BigString.UTF16View.count.getter()
{
  if (*v0) {
    return v0[3];
  }
  else {
    return 0;
  }
}

unint64_t BigString.UTF16View.index(after:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  return sub_24A4DF6F0(a1, a2, a3, a4, 1uLL);
}

unint64_t BigString.UTF16View.index(before:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  return sub_24A4DF6F0(a1, a2, a3, a4, 0xFFFFFFFFFFFFFFFFLL);
}

unint64_t sub_24A4DF6F0(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  return sub_24A48720C(a1, a2, a3, a4, a5);
}

unint64_t BigString.UTF16View.index(_:offsetBy:limitedBy:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, int64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9)
{
  if (a5 < 0)
  {
    if (a1 >> 10 < a6 >> 10 || (uint64_t)sub_24A4897D8(a1, a2, a3, a4, a6, a7, a8, a9) <= a5) {
      return sub_24A48720C(a1, a2, a3, a4, a5);
    }
    return 0;
  }
  if (a6 >> 10 >= a1 >> 10 && (uint64_t)sub_24A4897D8(a1, a2, a3, a4, a6, a7, a8, a9) < a5) {
    return 0;
  }
  return sub_24A48720C(a1, a2, a3, a4, a5);
}

unint64_t BigString.UTF16View.subscript.getter(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  return sub_24A58F3A8(a1, a2, a3, a4);
}

unint64_t BigString.UTF16View.subscript.getter@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = (void *)result;
  long long v27 = *((_OWORD *)v2 + 1);
  uint64_t v5 = *v2;
  uint64_t v6 = v2[4];
  unint64_t v7 = *(void *)result;
  uint64_t v8 = *(void *)(result + 8);
  unint64_t v9 = *(void *)(result + 16);
  uint64_t v10 = *(void *)(result + 24);
  long long v25 = *(_OWORD *)v2;
  long long v26 = *((_OWORD *)v2 + 2);
  if ((*(void *)result & 0x400) != 0)
  {
    if (!*v2 || 2 * (v6 & 0x1FFFFFFFFFFFFFuLL) <= v7 >> 10)
    {
      __break(1u);
      goto LABEL_13;
    }
    swift_unknownObjectRetain();
    unint64_t v11 = sub_24A496820(v7, v8, v9, v10, 0);
  }
  else
  {
    swift_unknownObjectRetain();
    unint64_t v11 = sub_24A4965FC(v7, v8, v9, v10);
  }
  unint64_t v15 = v11;
  uint64_t v16 = v12;
  uint64_t v17 = v13;
  uint64_t v18 = v14;
  uint64_t result = v3[4];
  uint64_t v19 = v3[5];
  unint64_t v20 = v3[6];
  uint64_t v21 = v3[7];
  if ((result & 0x400) == 0)
  {
    uint64_t result = sub_24A4965FC(result, v19, v20, v21);
LABEL_11:
    *(_OWORD *)a2 = v25;
    *(_OWORD *)(a2 + 16) = v27;
    *(_OWORD *)(a2 + 32) = v26;
    *(void *)(a2 + 48) = v15;
    *(void *)(a2 + 56) = v16;
    *(void *)(a2 + 64) = v17;
    *(void *)(a2 + 72) = v18;
    *(void *)(a2 + 80) = result;
    *(void *)(a2 + 88) = v22;
    *(void *)(a2 + 96) = v23;
    *(void *)(a2 + 104) = v24;
    return result;
  }
  if (v5 && 2 * (v6 & 0x1FFFFFFFFFFFFFuLL) > result >> 10)
  {
    uint64_t result = sub_24A496820(result, v19, v20, v21, 0);
    goto LABEL_11;
  }
LABEL_13:
  __break(1u);
  return result;
}

unint64_t sub_24A4DF9C0@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  return sub_24A4DFBD0(a1, 0xFFFFFFFFFFFFFFFFLL, a2);
}

unint64_t sub_24A4DF9C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A4DFC30(a1, a2, a3, 0xFFFFFFFFFFFFFFFFLL);
}

void (*sub_24A4DF9DC(void *a1, unint64_t *a2))(void **a1)
{
  uint64_t v5 = malloc(0x32uLL);
  *a1 = v5;
  unint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  unint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  long long v10 = v2[1];
  *uint64_t v5 = *v2;
  v5[1] = v10;
  void v5[2] = v2[2];
  *((_WORD *)v5 + 24) = sub_24A58F3A8(v6, v7, v8, v9);
  return sub_24A4DFA58;
}

void sub_24A4DFA58(void **a1)
{
}

__n128 sub_24A4DFA60@<Q0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  BigString.UTF16View.subscript.getter(a1, (uint64_t)v6);
  long long v3 = v6[5];
  *(_OWORD *)(a2 + 64) = v6[4];
  *(_OWORD *)(a2 + 80) = v3;
  *(_OWORD *)(a2 + 96) = v6[6];
  long long v4 = v6[1];
  *(_OWORD *)a2 = v6[0];
  *(_OWORD *)(a2 + 16) = v4;
  __n128 result = (__n128)v6[3];
  *(_OWORD *)(a2 + 32) = v6[2];
  *(__n128 *)(a2 + 48) = result;
  return result;
}

BOOL sub_24A4DFAB0()
{
  return (v0[4] & 0x1FFFFFFFFFFFFFLL) == 0 || *v0 == 0;
}

unint64_t sub_24A4DFAC8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t result = sub_24A48720C(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
  *a3 = result;
  a3[1] = v5;
  a3[2] = v6;
  a3[3] = v7;
  return result;
}

unint64_t sub_24A4DFB20@<X0>(uint64_t a1@<X0>, int64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t result = BigString.UTF16View.index(_:offsetBy:limitedBy:)(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), a2, *(void *)a3, *(void *)(a3 + 8), *(void *)(a3 + 16), *(void *)(a3 + 24));
  *a4 = result;
  a4[1] = v6;
  a4[2] = v7;
  a4[3] = v8;
  return result;
}

unint64_t sub_24A4DFB74(uint64_t a1, uint64_t a2)
{
  return sub_24A4897D8(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16), *(void *)(a2 + 24));
}

unint64_t sub_24A4DFBC8@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  return sub_24A4DFBD0(a1, 1uLL, a2);
}

unint64_t sub_24A4DFBD0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X3>, unint64_t *a3@<X8>)
{
  unint64_t result = sub_24A48720C(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
  *a3 = result;
  a3[1] = v5;
  a3[2] = v6;
  a3[3] = v7;
  return result;
}

unint64_t sub_24A4DFC28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A4DFC30(a1, a2, a3, 1uLL);
}

unint64_t sub_24A4DFC30(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t result = sub_24A48720C(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), a4);
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v8;
  return result;
}

unint64_t BigString.UTF16View.index(roundingDown:)(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if ((result & 0x400) == 0) {
    return sub_24A4965FC(result, a2, a3, a4);
  }
  if (*v4) {
    BOOL v5 = 2 * (v4[4] & 0x1FFFFFFFFFFFFFuLL) > result >> 10;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5) {
    return sub_24A496820(result, a2, a3, a4, 0);
  }
  __break(1u);
  return result;
}

unint64_t BigString.UTF16View.index(roundingUp:)(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5 = result >> 10;
  if ((result & 0x400) == 0)
  {
    unint64_t result = sub_24A4965FC(result, a2, a3, a4);
    if (v5 == result >> 10) {
      return result;
    }
    return sub_24A48720C(result, v6, v7, v8, 1uLL);
  }
  if (*v4) {
    BOOL v9 = 2 * (v4[4] & 0x1FFFFFFFFFFFFFuLL) > v5;
  }
  else {
    BOOL v9 = 0;
  }
  if (!v9)
  {
    __break(1u);
    return result;
  }
  unint64_t result = sub_24A496820(result, a2, a3, a4, 0);
  if (v5 != result >> 10) {
    return sub_24A48720C(result, v6, v7, v8, 1uLL);
  }
  return result;
}

uint64_t sub_24A4DFD84(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = sub_24A5BB7B0();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = MEMORY[0x24C5C6A60](15, a1 >> 16);
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

unint64_t sub_24A4DFE00@<X0>(long long *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  long long v11 = *a1;
  long long v12 = a1[2];
  long long v19 = v12;
  long long v20 = a1[1];
  long long v18 = *a1;
  if ((a2 & 0x400) != 0)
  {
    unint64_t result = *(void *)a1;
    if ((void)v11) {
      BOOL v17 = 2 * ((unint64_t)v12 & 0x1FFFFFFFFFFFFFLL) > a2 >> 10;
    }
    else {
      BOOL v17 = 0;
    }
    if (!v17)
    {
      __break(1u);
      return result;
    }
    swift_unknownObjectRetain();
    unint64_t result = sub_24A496820(a2, a3, a4, a5, 0);
  }
  else
  {
    swift_unknownObjectRetain();
    unint64_t result = sub_24A4965FC(a2, a3, a4, a5);
  }
  *(_OWORD *)a6 = v18;
  *(_OWORD *)(a6 + 16) = v20;
  *(_OWORD *)(a6 + 32) = v19;
  *(void *)(a6 + 48) = result;
  *(void *)(a6 + 56) = v14;
  *(void *)(a6 + 64) = v15;
  *(void *)(a6 + 72) = v16;
  return result;
}

unint64_t sub_24A4DFEE4()
{
  unint64_t result = qword_26979B330;
  if (!qword_26979B330)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979B330);
  }
  return result;
}

unint64_t sub_24A4DFF3C()
{
  unint64_t result = qword_26979B338;
  if (!qword_26979B338)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979B338);
  }
  return result;
}

unint64_t sub_24A4DFF94()
{
  unint64_t result = qword_26979B340;
  if (!qword_26979B340)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979B340);
  }
  return result;
}

unint64_t sub_24A4DFFEC()
{
  unint64_t result = qword_26979B348;
  if (!qword_26979B348)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26979B350);
    sub_24A4E0060();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979B348);
  }
  return result;
}

unint64_t sub_24A4E0060()
{
  unint64_t result = qword_26979B358;
  if (!qword_26979B358)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979B358);
  }
  return result;
}

unint64_t sub_24A4E00B8()
{
  unint64_t result = qword_26979B360;
  if (!qword_26979B360)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979B360);
  }
  return result;
}

unint64_t sub_24A4E0110()
{
  unint64_t result = qword_26979B368;
  if (!qword_26979B368)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979B368);
  }
  return result;
}

unint64_t sub_24A4E0168()
{
  unint64_t result = qword_26979B370;
  if (!qword_26979B370)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26979B350);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979B370);
  }
  return result;
}

unint64_t sub_24A4E01C8()
{
  unint64_t result = qword_26979B378;
  if (!qword_26979B378)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979B378);
  }
  return result;
}

uint64_t initializeWithCopy for BigString(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_unknownObjectRetain();
  return a1;
}

void *assignWithCopy for BigString(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for BigString(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for BigString(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 48)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BigString(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BigString.UTF16View()
{
  return &type metadata for BigString.UTF16View;
}

uint64_t _s9UTF16ViewV8IteratorVwcp(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  long long v3 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v3;
  swift_unknownObjectRetain();
  return a1;
}

uint64_t _s9UTF16ViewV8IteratorVwca(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  long long v4 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v4;
  return a1;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t _s9UTF16ViewV8IteratorVwta(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  return a1;
}

uint64_t _s9UTF16ViewV8IteratorVwet(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 80)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t _s9UTF16ViewV8IteratorVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 80) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BigString.UTF16View.Iterator()
{
  return &type metadata for BigString.UTF16View.Iterator;
}

uint64_t TreeDictionary.customMirror.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24A5BC6B0();
  MEMORY[0x270FA5388](v6 - 8);
  unint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_26979AE30);
  MEMORY[0x270FA5388](v9 - 8);
  long long v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[3] = a1;
  v16[4] = a2;
  v16[5] = a3;
  v16[0] = a1;
  v16[1] = a2;
  void v16[2] = a3;
  uint64_t v12 = *MEMORY[0x263F8E7F0];
  uint64_t v13 = sub_24A5BC6A0();
  uint64_t v14 = *(void *)(v13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 104))(v11, v12, v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  type metadata accessor for TreeDictionary();
  swift_getWitnessTable();
  sub_24A4D1B3C((uint64_t)v8);
  swift_retain_n();
  return sub_24A5BC6C0();
}

uint64_t sub_24A4E0830()
{
  return TreeDictionary.customMirror.getter(*v0, v0[1], v0[2]);
}

BOOL BitSet.isSuperset(of:)(void *a1, void *a2)
{
  return BitSet.isSubset(of:)(a2, a1);
}

BOOL BitSet.isSuperset(of:)(void *a1, uint64_t a2, void *a3)
{
  return BitSet.isSubset(of:)(a3, a1);
}

uint64_t BitSet.isSuperset(of:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a1 == a2) {
    return 1;
  }
  if (((a2 | a1) & 0x8000000000000000) != 0) {
    return 0;
  }
  return _UnsafeBitSet.isSuperset(of:)(a1, a2, a3 + 32, *(void *)(a3 + 16));
}

uint64_t BitSet.isSuperset<A>(of:)(uint64_t a1, void *a2, ValueMetadata *a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v21 - v9;
  Description = (void (**)(char *, void, ValueMetadata *))a3[-1].Description;
  uint64_t v12 = MEMORY[0x270FA5388](v8);
  uint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v21 - v15;
  if (a3 == &type metadata for BitSet)
  {
    Description[2]((char *)&v21 - v15, a1, &type metadata for BitSet);
LABEL_12:
    swift_dynamicCast();
    char v19 = BitSet.isSubset(of:)(a2, (void *)v21);
    swift_bridgeObjectRelease();
    return v19 & 1;
  }
  if (a3 == &type metadata for BitSet.Counted)
  {
    Description[2]((char *)&v21 - v15, a1, &type metadata for BitSet.Counted);
    goto LABEL_12;
  }
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_26979AEC0);
  long long v18 = Description[2];
  if ((ValueMetadata *)v17 != a3)
  {
    v18(v16, a1, a3);
    sub_24A5BB840();
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      sub_24A5BBEE0();
      if (v22) {
        break;
      }
      if ((v21 & 0x8000000000000000) != 0 || v21 >> 6 >= a2[2] || ((a2[(v21 >> 6) + 4] >> v21) & 1) == 0)
      {
        (*(void (**)(char *, uint64_t))(v7 + 8))(v10, AssociatedTypeWitness);
        char v19 = 0;
        return v19 & 1;
      }
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, AssociatedTypeWitness);
    goto LABEL_18;
  }
  v18(v14, a1, a3);
  swift_dynamicCast();
  if (v21 == v22)
  {
LABEL_18:
    char v19 = 1;
    return v19 & 1;
  }
  if (((v22 | v21) & 0x8000000000000000) != 0) {
    char v19 = 0;
  }
  else {
    char v19 = _UnsafeBitSet.isSuperset(of:)(v21, v22, (uint64_t)(a2 + 4), a2[2]);
  }
  return v19 & 1;
}

uint64_t BitArray.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_24A5BC630();
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    uint64_t v5 = a2 + 32;
    do
    {
      v5 += 8;
      uint64_t result = sub_24A5BC630();
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t BitArray.hashValue.getter(uint64_t a1)
{
  sub_24A5BC610();
  sub_24A5BC630();
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = a1 + 32;
    do
    {
      v3 += 8;
      sub_24A5BC630();
      --v2;
    }
    while (v2);
  }
  return sub_24A5BC690();
}

uint64_t sub_24A4E0C98()
{
  return BitArray.hashValue.getter(*v0);
}

uint64_t sub_24A4E0CA0()
{
  uint64_t v1 = *v0;
  uint64_t result = sub_24A5BC630();
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3)
  {
    uint64_t v4 = v1 + 32;
    do
    {
      v4 += 8;
      uint64_t result = sub_24A5BC630();
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_24A4E0CF0()
{
  uint64_t v1 = *v0;
  sub_24A5BC610();
  sub_24A5BC630();
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v1 + 32;
    do
    {
      v3 += 8;
      sub_24A5BC630();
      --v2;
    }
    while (v2);
  }
  return sub_24A5BC690();
}

unint64_t sub_24A4E0D60()
{
  unint64_t result = qword_26979B380;
  if (!qword_26979B380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979B380);
  }
  return result;
}

unint64_t sub_24A4E0DB4()
{
  unint64_t v2 = v0[2];
  unint64_t v1 = v0[3];
  if (v2 >= v1) {
    return 0;
  }
  if (v0[3] > 0x3FuLL && (v0[3] & 0x3FLL) == 0) {
    unint64_t v4 = 64;
  }
  else {
    unint64_t v4 = v0[3] & 0x3FLL;
  }
  uint64_t v5 = (v0[3] >> 6) - ((v0[3] > 0x3FuLL) & ((v0[3] & 0x3FLL) == 0));
  if (v5 == v2 >> 6)
  {
    v0[3] = v2;
    if (v1 > 0x3F && (v1 & 0x3F) == 0) {
      uint64_t v6 = -1;
    }
    else {
      uint64_t v6 = ~(-1 << v4);
    }
    if (v4 >= (v2 & 0x3F)) {
      return (*(void *)(*v0 + 8 * v5) & (unint64_t)v6) >> v2;
    }
    __break(1u);
    goto LABEL_19;
  }
  if (v1 < v4)
  {
LABEL_19:
    __break(1u);
    return result;
  }
  v0[3] = v1 - v4;
  uint64_t v7 = *(void *)(*v0 + 8 * v5);
  if (v1 > 0x3F && (v1 & 0x3F) == 0) {
    uint64_t v8 = -1;
  }
  else {
    uint64_t v8 = ~(-1 << v4);
  }
  return v7 & v8;
}

uint64_t sub_24A4E0E68(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  while (1)
  {
    uint64_t result = sub_24A5BBEE0();
    if (v7 == 2) {
      return v3;
    }
    uint64_t v5 = v2 + 1;
    if (v2 == -1) {
      break;
    }
    if (v7) {
      uint64_t v6 = 1 << v2;
    }
    else {
      uint64_t v6 = 0;
    }
    v3 |= v6;
    ++v2;
    if (v5 == a1) {
      return v3;
    }
  }
  __break(1u);
  return result;
}

BOOL sub_24A4E0F0C(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return sub_24A4E0F28(*a1 | ((unint64_t)*(unsigned int *)(a1 + 1) << 16), *a2 | ((unint64_t)*(unsigned int *)(a2 + 1) << 16));
}

BOOL sub_24A4E0F28(uint64_t a1, uint64_t a2)
{
  return (a1 & 0xFFFFFFFFFFFFLL) == (a2 & 0xFFFFFFFFFFFFLL);
}

uint64_t __swift_memcpy6_1(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(_WORD *)(result + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)uint64_t result = v2;
  return result;
}

uint64_t _s6CountsVwet(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 6)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t _s6CountsVwst(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_WORD *)(result + 4) = 0;
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 6) = v3;
  return result;
}

ValueMetadata *_s6CountsVMa()
{
  return &_s6CountsVN;
}

unint64_t _s19CollectionsInternal9BigStringV6insert10contentsOf2atySsn_AC5IndexVtF_0(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, uint64_t a8)
{
  uint64_t v128 = a8;
  unint64_t v127 = a7;
  unint64_t v126 = a6;
  *(void *)&long long v133 = a4;
  *(void *)&long long v132 = a3;
  uint64_t v119 = _s7BuilderVMa();
  MEMORY[0x270FA5388](v119);
  uint64_t v120 = (char *)v113 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v124 = __swift_instantiateConcreteTypeFromMangledName(&qword_26979B1E0);
  uint64_t v123 = *(void *)(v124 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v124);
  uint64_t v116 = (uint64_t *)((char *)v113 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v13);
  uint64_t v117 = (uint64_t *)((char *)v113 - v15);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_26979B1D8);
  uint64_t v17 = MEMORY[0x270FA5388](v16 - 8);
  char v19 = (char *)v113 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x270FA5388](v17);
  uint64_t v121 = (uint64_t)v113 - v21;
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v118 = (uint64_t *)((char *)v113 - v23);
  MEMORY[0x270FA5388](v22);
  *(void *)&long long v122 = (char *)v113 - v24;
  *(void *)&long long v125 = _s12InsertResultOMa();
  uint64_t v25 = MEMORY[0x270FA5388](v125);
  long long v27 = (char *)v113 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  unint64_t v131 = (unint64_t)v113 - v28;
  uint64_t v129 = sub_24A5BC780();
  uint64_t v29 = *(void *)(v129 - 8);
  uint64_t v30 = MEMORY[0x270FA5388](v129);
  uint64_t v32 = (char *)v113 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v30);
  long long v34 = (char *)v113 - v33;
  uint64_t v35 = _s9_IngesterVMa();
  MEMORY[0x270FA5388](v35);
  long long v37 = (unint64_t *)((char *)v113 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  long long v38 = *v8;
  uint64_t v39 = *((void *)v8 + 4);
  if (*(void *)v8) {
    unint64_t v40 = 2 * (v39 & 0x1FFFFFFFFFFFFFLL);
  }
  else {
    unint64_t v40 = 0;
  }
  if (v40 < a5 >> 10)
  {
    __break(1u);
LABEL_44:
    sub_24A491F98();
    uint64_t v50 = v115;
LABEL_14:
    v50[4] = a1;
    uint64_t v52 = (char *)v50 + *(int *)(v35 + 24);
    unint64_t v53 = *(void (**)(char *, char *, char *))(v29 + 32);
    v53(v52, v32, v19);
    unint64_t result = (*(uint64_t (**)(char *, char *))(v29 + 8))(v34, v19);
    if (a5 == 1)
    {
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    unint64_t result = v127;
    unint64_t v135 = v127;
    unint64_t v54 = v126;
    if (v128 != *((void *)v130 + 5))
    {
      __break(1u);
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    *(void *)&long long v132 = v53;
    *(void *)&long long v133 = v29 + 32;
    if (!*(void *)v130)
    {
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
    uint64_t v55 = a5;
    sub_24A48FDE4(v127, (uint64_t)v137);
    uint64_t v56 = v131;
    unint64_t result = sub_24A4D340C(v115, (16 * (int)v54) & 0x4000 | ((unint64_t)v54 << 16) | (v54 >> 8) & 3 | 4, v131);
    uint64_t v58 = v130;
    uint64_t v59 = v128 + 1;
    *((void *)v130 + 5) = v128 + 1;
    uint64_t v134 = v59;
    if (!*v58)
    {
LABEL_53:
      __break(1u);
      return result;
    }
    uint64_t v60 = sub_24A48FC0C((uint64_t)v142, (uint64_t)v137, v57);
    uint64_t v136 = v60;
    swift_bridgeObjectRelease();
    sub_24A4E21E4(v56, (uint64_t)v27);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload != 1)
      {
        unint64_t v78 = v130;
        __n128 v79 = sub_24A55ACEC(v54, v128, v127, v55, (uint64_t)v137);
        uint64_t v80 = v119;
        uint64_t v81 = (uint64_t)v120;
        unsigned __int8 v82 = v114;
        ((void (*)(char *, char *, char *, __n128))v114)(&v120[*(int *)(v119 + 24)], v52, v19, v79);
        v82(v81 + *(int *)(v80 + 20), v52, v19);
        long long v83 = v140;
        *(_OWORD *)(v81 + 64) = v139;
        *(_OWORD *)(v81 + 80) = v83;
        *(void *)(v81 + 96) = v141;
        long long v84 = *(_OWORD *)&v137[16];
        *(_OWORD *)uint64_t v81 = *(_OWORD *)v137;
        *(_OWORD *)(v81 + 16) = v84;
        long long v85 = v138;
        *(_OWORD *)(v81 + 32) = *(_OWORD *)&v137[32];
        *(_OWORD *)(v81 + 48) = v85;
        uint64_t v86 = v115;
        sub_24A56E248(v115);
        sub_24A4EF384(v81, v81);
        sub_24A491510((uint64_t *)v142);
        long long v133 = *(_OWORD *)v142;
        long long v132 = *(_OWORD *)&v142[16];
        uint64_t v87 = *(void *)&v142[32];
        uint64_t v88 = v143;
        sub_24A4E2248(v81, (uint64_t (*)(void))_s7BuilderVMa);
        sub_24A4E2248(v56, (uint64_t (*)(void))_s12InsertResultOMa);
        swift_unknownObjectRelease();
        long long v89 = v132;
        *unint64_t v78 = v133;
        v78[1] = v89;
        *((void *)v78 + 4) = v87;
        *((void *)v78 + 5) = v88;
        return sub_24A4E2248((uint64_t)v86, (uint64_t (*)(void))_s9_IngesterVMa);
      }
      uint64_t v63 = *(void **)v27;
      uint64_t v62 = *((void *)v27 + 1);
      uint64_t v128 = v27[16];
      uint64_t v64 = *(unsigned int *)(v27 + 17);
      uint64_t v65 = v27[21];
      uint64_t v66 = (uint64_t)&v27[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26979B1E8) + 48)];
      uint64_t v67 = v121;
      unint64_t result = sub_24A4914AC(v66, v121, &qword_26979B1D8);
      *(_OWORD *)&v137[32] = v130[2];
      long long v68 = *v130;
      *(_OWORD *)&v137[16] = v130[1];
      *(_OWORD *)unint64_t v137 = v68;
      if (v59 != *(void *)&v137[40]) {
        goto LABEL_45;
      }
      long long v125 = *(_OWORD *)&v137[8];
      long long v122 = *(_OWORD *)&v137[24];
      uint64_t v69 = *(void *)v137;
      swift_unknownObjectRetain_n();
      unint64_t v70 = sub_24A498214();
      unint64_t result = sub_24A496BE8((uint64_t)v137);
      if (v127 >= v70)
      {
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
      char v71 = (4 * *(unsigned char *)(v60 + 18) + 8) & 0x3C;
      unint64_t v72 = ((v127 >> v71) & 0xF) + 1;
      if (v72 >= *(unsigned __int16 *)(v60 + 16))
      {
        *(void *)uint64_t v142 = v69;
        *(_OWORD *)&v142[8] = v125;
        *(_OWORD *)&v142[24] = v122;
        swift_unknownObjectRetain();
        char v99 = sub_24A498278((uint64_t)&v134);
        sub_24A496BE8((uint64_t)v137);
        if (v99)
        {
          unint64_t result = sub_24A496BE8((uint64_t)v137);
          if (v134 != v59)
          {
LABEL_47:
            __break(1u);
            goto LABEL_48;
          }
          unint64_t v73 = v135;
        }
        else
        {
          unint64_t v73 = sub_24A498214();
          sub_24A496BE8((uint64_t)v137);
          uint64_t v134 = v59;
          unint64_t v135 = v73;
          uint64_t v136 = 0;
        }
      }
      else
      {
        unint64_t v73 = (v72 << v71) | ((-15 << v71) - 1) & v127;
        unint64_t v135 = v73;
        sub_24A496BE8((uint64_t)v137);
      }
      uint64_t v100 = (v64 << 8) | (v65 << 40) | v128;
      swift_bridgeObjectRetain();
      sub_24A5B514C(v63, v62, v100, v73);
      unint64_t v101 = (uint64_t *)v113[0];
      sub_24A4E22A8(v67, v113[0]);
      uint64_t v102 = v124;
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v123 + 48))(v101, 1, v124) == 1)
      {
        swift_bridgeObjectRelease();
        sub_24A4D4710(v67, &qword_26979B1D8);
        sub_24A4E2248(v131, (uint64_t (*)(void))_s12InsertResultOMa);
        uint64_t v77 = (uint64_t)v101;
        goto LABEL_37;
      }
      *(void *)&long long v125 = v59;
      uint64_t v103 = *(int *)(v102 + 48);
      uint64_t v104 = (uint64_t)v116;
      uint64_t v105 = (uint64_t)v116 + v103;
      uint64_t v106 = *(int *)(v102 + 64);
      uint64_t v107 = (uint64_t)v116 + v106;
      unint64_t v108 = (char *)v101 + v103;
      unint64_t v109 = (char *)v101 + v106;
      uint64_t v110 = *v101;
      *uint64_t v116 = v110;
      uint64_t v111 = v129;
      unint64_t v112 = (void (*)(uint64_t, char *, uint64_t))v132;
      ((void (*)(uint64_t, char *, uint64_t))v132)(v104 + v103, v108, v129);
      v112(v107, v109, v111);
      unint64_t result = swift_bridgeObjectRelease();
      if (__OFADD__(v110, v126 >> 11))
      {
LABEL_50:
        __break(1u);
        goto LABEL_51;
      }
      sub_24A4C78A0(v128 | ((v110 + (v126 >> 11)) << 11), v125, v73, v136, v105, v107);
      sub_24A4D4710(v104, &qword_26979B1E0);
      sub_24A4D4710(v121, &qword_26979B1D8);
      uint64_t v98 = v131;
    }
    else
    {
      uint64_t v74 = v122;
      sub_24A4914AC((uint64_t)v27, v122, &qword_26979B1D8);
      uint64_t v75 = v118;
      sub_24A4E22A8(v74, (uint64_t)v118);
      uint64_t v76 = v124;
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v123 + 48))(v75, 1, v124) == 1)
      {
        sub_24A4D4710(v74, &qword_26979B1D8);
        sub_24A4E2248(v131, (uint64_t (*)(void))_s12InsertResultOMa);
        uint64_t v77 = (uint64_t)v75;
LABEL_37:
        sub_24A4D4710(v77, &qword_26979B1D8);
LABEL_41:
        uint64_t v86 = v115;
        return sub_24A4E2248((uint64_t)v86, (uint64_t (*)(void))_s9_IngesterVMa);
      }
      *(void *)&long long v125 = v59;
      uint64_t v90 = *(int *)(v76 + 48);
      uint64_t v91 = (uint64_t)v117;
      uint64_t v92 = *(int *)(v76 + 64);
      uint64_t v93 = (uint64_t)v117 + v92;
      uint64_t v94 = (char *)v75 + v92;
      uint64_t v95 = *v75;
      *uint64_t v117 = *v75;
      uint64_t v128 = v91 + v90;
      uint64_t v96 = (uint64_t (*)(uint64_t, char *, char *))v132;
      ((void (*)(void))v132)();
      unint64_t result = v96(v93, v94, v19);
      if (__OFADD__(v54, v95))
      {
LABEL_48:
        __break(1u);
        goto LABEL_49;
      }
      unint64_t v97 = v131;
      if (v54 + v95 < 0)
      {
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }
      sub_24A4C78A0((v54 + v95) | ((((v54 + v95) & 0xFFFFFFFFFFFFLL)- v54+ (v54 >> 11)) << 11), v125, v127, v60, v128, v93);
      sub_24A4D4710(v91, &qword_26979B1E0);
      sub_24A4D4710(v122, &qword_26979B1D8);
      uint64_t v98 = v97;
    }
    sub_24A4E2248(v98, (uint64_t (*)(void))_s12InsertResultOMa);
    goto LABEL_41;
  }
  if (!((a2 ^ a1) >> 14))
  {
    return swift_bridgeObjectRelease();
  }
  if (a5 >> 10 != v40)
  {
    v113[0] = (uint64_t)v19;
    long long v44 = v8[1];
    uint64_t v130 = v8;
    uint64_t v45 = *((void *)v8 + 5);
    long long v144 = v38;
    long long v145 = v44;
    uint64_t v146 = v39;
    uint64_t v147 = v45;
    unint64_t v115 = v37;
    uint64_t v46 = sub_24A496820(a5, v126, v127, v128, 1);
    a5 = v47;
    v137[0] = 1;
    unint64_t v126 = v46;
    uint64_t v128 = v48;
    unint64_t v127 = v49;
    sub_24A48D2C8(v46, v48, v49, v47, (uint64_t *)0x100000000, (uint64_t)v34);
    char v19 = (char *)v129;
    unsigned int v114 = *(void (**)(uint64_t, char *, char *))(v29 + 16);
    v113[1] = v29 + 16;
    v114((uint64_t)v32, v34, (char *)v129);
    uint64_t v50 = v115;
    *unint64_t v115 = a1;
    v50[1] = a2;
    unint64_t v51 = v133;
    void v50[2] = v132;
    v50[3] = v51;
    if ((v51 & 0x1000000000000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_44;
  }
  uint64_t v42 = v132;
  unint64_t v43 = v133;
  return _s19CollectionsInternal9BigStringV6append10contentsOfySsn_tF_0(a1, a2, v42, v43);
}

uint64_t _s19CollectionsInternal9BigStringV6insert10contentsOf2atyACn_AC5IndexVtF_0(_OWORD *a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = _s7BuilderVMa();
  uint64_t result = MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v16 = a2 >> 10;
  if (*v5) {
    unint64_t v17 = 2 * (v5[4] & 0x1FFFFFFFFFFFFFLL);
  }
  else {
    unint64_t v17 = 0;
  }
  if (v16 < v17)
  {
    if (a2 < 0x400)
    {
      return sub_24A5B3CD4(a1);
    }
    long long v18 = a1[1];
    v36[0] = *a1;
    v36[1] = v18;
    _OWORD v36[2] = a1[2];
    if (*(void *)&v36[0])
    {
      uint64_t v37 = *(void *)&v36[0];
      long long v38 = *(_OWORD *)((char *)v36 + 8);
      long long v39 = *(_OWORD *)((char *)&v36[1] + 8);
      if (!*(unsigned char *)(*(void *)&v36[0] + 18) && *(_WORD *)(*(void *)&v36[0] + 16) == 1)
      {
        uint64_t result = sub_24A498214();
        if (result)
        {
          swift_unknownObjectRetain();
          sub_24A4895D4(0, (uint64_t)v31);
          sub_24A496BE8((uint64_t)a1);
          BigString.insert(contentsOf:at:)(*(uint64_t *)&v31[0], *((uint64_t *)&v31[0] + 1), a2, a3, a4, a5);
          return sub_24A496BE8((uint64_t)a1);
        }
LABEL_24:
        __break(1u);
        return result;
      }
    }
    sub_24A55ACEC(a2, a3, a4, a5, (uint64_t)v31);
    uint64_t v19 = sub_24A4E20A8();
    uint64_t v20 = (uint64_t)&v15[*(int *)(v12 + 20)];
    sub_24A5BC770();
    uint64_t result = v19 - 1;
    if (!__OFSUB__(v19, 1))
    {
      sub_24A4EDDE8(result, (uint64_t *)v31, v20);
      uint64_t v21 = &v15[*(int *)(v12 + 24)];
      uint64_t v22 = sub_24A5BC780();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(v21, v20, v22);
      long long v23 = v31[5];
      *((_OWORD *)v15 + 4) = v31[4];
      *((_OWORD *)v15 + 5) = v23;
      *((void *)v15 + 12) = v32;
      long long v24 = v31[1];
      *(_OWORD *)uint64_t v15 = v31[0];
      *((_OWORD *)v15 + 1) = v24;
      long long v25 = v31[3];
      *((_OWORD *)v15 + 2) = v31[2];
      *((_OWORD *)v15 + 3) = v25;
      swift_unknownObjectRetain();
      sub_24A56EF34(a1);
      sub_24A4EF384((uint64_t)v15, (uint64_t)v15);
      sub_24A491510((uint64_t *)v33);
      long long v30 = v33[0];
      long long v29 = v33[1];
      uint64_t v26 = v34;
      uint64_t v27 = v35;
      sub_24A496BE8((uint64_t)a1);
      sub_24A4E2248((uint64_t)v15, (uint64_t (*)(void))_s7BuilderVMa);
      uint64_t result = swift_unknownObjectRelease();
      long long v28 = v29;
      *(_OWORD *)uint64_t v6 = v30;
      *((_OWORD *)v6 + 1) = v28;
      void v6[4] = v26;
      _OWORD v6[5] = v27;
      return result;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v16 != v17)
  {
    __break(1u);
    goto LABEL_23;
  }
  return _s19CollectionsInternal9BigStringV6append10contentsOfyACn_tF_0((uint64_t)a1);
}

uint64_t sub_24A4E20A8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  if (!v1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t result = 0;
    if (!*(void *)(v0 + 8)) {
      goto LABEL_19;
    }
LABEL_15:
    uint64_t v12 = *(void *)(v0 + 16);
    BOOL v11 = __OFADD__(result, v12);
    result += v12;
    if (v11)
    {
LABEL_28:
      __break(1u);
    }
    else
    {
      uint64_t v13 = *(void *)(v0 + 24);
      BOOL v11 = __OFADD__(v4, v13);
      v4 += v13;
      if (!v11)
      {
        uint64_t v14 = *(void *)(v0 + 32);
        BOOL v11 = __OFADD__(v3, v14);
        v3 += v14;
        if (!v11)
        {
          uint64_t v15 = *(void *)(v0 + 40);
          BOOL v11 = __OFADD__(v2, v15);
          v2 += v15;
          if (!v11) {
            goto LABEL_19;
          }
LABEL_31:
          __break(1u);
LABEL_32:
          __break(1u);
          goto LABEL_33;
        }
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
    }
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t result = 0;
  uint64_t v6 = (uint64_t *)(*(void *)v0 + 64);
  do
  {
    uint64_t v7 = *(v6 - 4);
    if (v7)
    {
      uint64_t v8 = *(v6 - 1);
      uint64_t v7 = *v6;
      uint64_t v10 = *(v6 - 3);
      uint64_t v9 = *(v6 - 2);
      BOOL v11 = __OFADD__(result, v10);
      result += v10;
      if (v11)
      {
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v8 = 0;
    }
    BOOL v11 = __OFADD__(v4, v9);
    v4 += v9;
    if (v11) {
      goto LABEL_25;
    }
    BOOL v11 = __OFADD__(v3, v8);
    v3 += v8;
    if (v11) {
      goto LABEL_26;
    }
    BOOL v11 = __OFADD__(v2, v7);
    v2 += v7;
    if (v11) {
      goto LABEL_27;
    }
    v6 += 6;
    --v1;
  }
  while (v1);
  if (*(void *)(v0 + 8)) {
    goto LABEL_15;
  }
LABEL_19:
  if (!*(void *)(v0 + 56)) {
    return result;
  }
  unint64_t v16 = *(unsigned int *)(v0 + 64);
  BOOL v11 = __OFADD__(result, v16 >> 24);
  result += v16 >> 24;
  if (v11) {
    goto LABEL_32;
  }
  if (__OFADD__(v4, BYTE2(v16)))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (__OFADD__(v3, BYTE1(v16)))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (__OFADD__(v2, v16)) {
LABEL_35:
  }
    __break(1u);
  return result;
}

uint64_t sub_24A4E21E4(uint64_t a1, uint64_t a2)
{
  uint64_t inserted = _s12InsertResultOMa();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(inserted - 8) + 16))(a2, a1, inserted);
  return a2;
}

uint64_t sub_24A4E2248(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_24A4E22A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26979B1D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t *_HashNode.merge(_:_:_:)(unsigned int a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, char *), void (*a5)(uint64_t, uint64_t, uint64_t), void *a6)
{
  uint64_t v8 = v7;
  if (a3 < 1) {
    return 0;
  }
  uint64_t v9 = a3;
  uint64_t v11 = v6[1];
  if (v11 < 1)
  {
    swift_retain();
    swift_release();
    *uint64_t v6 = a2;
    v6[1] = v9;
  }
  else if ((_BYTE)a1 {
         || (uint64_t v16 = a6[4],
  }
             uint64_t v23 = a6[2],
             uint64_t v24 = *v6,
             uint64_t v22 = a6[3],
             (_HashNode.hasSingletonItem.getter(*v6, v11, v23, v22, v16) & 1) == 0))
  {
    uint64_t v19 = _HashNode._merge(_:_:_:)(a1, a2, v9, a4, a5, a6);
    if (!v7) {
      return v19;
    }
  }
  else
  {
    uint64_t v26 = a2;
    uint64_t v27 = v9;
    uint64_t v17 = nullsub_1(v24 + 16, v24 + 32, v23, v22, v16);
    uint64_t v9 = v18;
    swift_retain();
    sub_24A4E2490(v17, (uint64_t)&v26, 0, (void (*)(char *, char *))a4, (uint64_t)a5, v23, v22, &v25, v16);
    swift_release();
    if (!v8)
    {
      uint64_t v9 = v25;
      uint64_t v21 = v27;
      *uint64_t v6 = v26;
      v6[1] = v21;
    }
  }
  return (uint64_t *)v9;
}

uint64_t sub_24A4E2490@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, unsigned int a3@<W3>, void (*a4)(char *, char *)@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, void *a8@<X8>, uint64_t a9)
{
  long long v39 = a4;
  uint64_t v40 = a5;
  unsigned int v44 = a3;
  uint64_t v43 = a2;
  uint64_t v41 = a8;
  uint64_t v12 = *(void *)(a6 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](a1);
  uint64_t v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v37 - v16;
  uint64_t v20 = _HashNode.UnsafeHandle.itemPtr(at:)(0, v18, v19);
  uint64_t v42 = *(void *)(a2 + 8);
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v21(v17, v20, a6);
  v21(v15, v20, a6);
  unint64_t v22 = sub_24A5B85E4();
  uint64_t v23 = *(void (**)(char *, uint64_t))(v12 + 8);
  v23(v15, a6);
  uint64_t v46 = a6;
  uint64_t v47 = a7;
  uint64_t v48 = a9;
  uint64_t v49 = v20;
  uint64_t v37 = v20;
  uint64_t v38 = a7;
  uint64_t v24 = (void *)type metadata accessor for _HashNode();
  LOBYTE(v15) = _HashNode.updateValue(_:forKey:_:_:)(v44, (uint64_t)v17, v22, (uint64_t (*)(uint64_t))sub_24A4E5B90, (uint64_t)v45, v24);
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v23)(v17, a6);
  if (v15)
  {
    uint64_t v30 = 0;
  }
  else
  {
    uint64_t v31 = v38;
    uint64_t v32 = nullsub_1(v26 + 16, v26 + 32, a6, v38, a9);
    uint64_t v33 = v50;
    uint64_t result = sub_24A4E26F8(v32, v34, 0, v26, v28, v39, v40, v37, a6, v31);
    if (v33) {
      return result;
    }
    uint64_t v30 = 1;
  }
  BOOL v35 = __OFSUB__(v42, v30);
  uint64_t v36 = v42 - v30;
  if (v35) {
    __break(1u);
  }
  else {
    *uint64_t v41 = v36;
  }
  return result;
}

uint64_t sub_24A4E26F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(char *, char *), uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v33 = a7;
  uint64_t v34 = a6;
  uint64_t v11 = *(void *)(a10 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)&v33 - v16;
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v33 - v18;
  uint64_t v23 = _HashNode.UnsafeHandle.itemPtr(at:)(v22, v20, v21);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v25 = a8 + *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v26(v17, v25, a10);
  uint64_t v27 = *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v28 = v11;
  uint64_t v29 = v23 + v27;
  v26(v14, v23 + v27, a10);
  uint64_t v30 = v35;
  v34(v17, v14);
  uint64_t v31 = *(void (**)(char *, uint64_t))(v28 + 8);
  v31(v14, a10);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v31)(v17, a10);
  if (!v30) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v28 + 40))(v29, v19, a10);
  }
  return result;
}

uint64_t *_HashNode._merge(_:_:_:)(unsigned int a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, char *), void (*a5)(uint64_t, uint64_t, uint64_t), void *a6)
{
  uint64_t v12 = a6[2];
  uint64_t v13 = (char *)a6[3];
  uint64_t v14 = a6[4];
  if (_HashNode.isCollisionNode.getter(*v6, v6[1], v12, (uint64_t)v13, v14)
    || _HashNode.isCollisionNode.getter(a2, a3, v12, (uint64_t)v13, v14))
  {
    return (uint64_t *)_HashNode._merge_slow(_:_:_:)(a1, a2, a3, a4, (uint64_t)a5, a6);
  }
  uint64_t v16 = (int *)nullsub_1(a2 + 16, a2 + 32, v12, v13, v14);
  uint64_t result = sub_24A4E2C54(v16, v17, v6, a4, a5, a1, v12, v13, &v20, v14);
  if (!v19) {
    return (uint64_t *)v20;
  }
  return result;
}

uint64_t _HashNode._merge_slow(_:_:_:)(unsigned int a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, char *), uint64_t a5, void *a6)
{
  uint64_t v9 = a6[2];
  uint64_t v10 = a6[3];
  uint64_t v11 = a6[4];
  uint64_t v12 = *v6;
  uint64_t v29 = v6[1];
  BOOL v13 = _HashNode.isCollisionNode.getter(*v6, v29, v9, v10, v11);
  BOOL v14 = _HashNode.isCollisionNode.getter(a2, a3, v9, v10, v11);
  if (!v13)
  {
    Swift::Bool v19 = _HashNode.isUnique()();
    nullsub_1(a2 + 16, a2 + 32, v9, v10, v11);
    uint64_t result = (uint64_t)sub_24A4E5218(v20, (void (*)(char *, uint64_t))a1, v6, v19, a2, a3, a4, &v34, a5, v9, v10, v11);
    if (v32) {
      return result;
    }
    return v34;
  }
  if (!v14)
  {
    uint64_t v21 = (int *)nullsub_1(a2 + 16, a2 + 32, v9, v10, v11);
    uint64_t result = sub_24A4E4964(v21, v22, v6, a1, (void (*)(char *, char *))a4, a5, a2, a3, &v34, v9, v10, v11);
    if (v32) {
      return result;
    }
    return v34;
  }
  uint64_t v15 = _HashNode.collisionHash.getter(v12, v29, v9, v10, v11);
  if (v15 == _HashNode.collisionHash.getter(a2, a3, v9, v10, v11))
  {
    uint64_t v16 = (unsigned int *)nullsub_1(a2 + 16, a2 + 32, v9, v10, v11);
    uint64_t result = sub_24A4E4130(v16, v17, v6, (void (*)(char *, char *))a4, a5, v9, v10, v11, (uint64_t)&v34);
    if (!v32) {
      return v34;
    }
  }
  else
  {
    unint64_t v23 = _HashNode.collisionHash.getter(v12, v29, v9, v10, v11);
    unint64_t v24 = _HashNode.collisionHash.getter(a2, a3, v9, v10, v11);
    swift_retain();
    uint64_t v26 = sub_24A564EBC(a1, v12, v29, v23, a2, a3, v24, v9, v25, v10, v11);
    uint64_t v28 = v27;
    swift_release();
    swift_release();
    uint64_t result = a3;
    *uint64_t v6 = v26;
    v6[1] = v28;
  }
  return result;
}

uint64_t *sub_24A4E2C54@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void (*a4)(uint64_t, char *)@<X3>, void (*a5)(uint64_t, uint64_t, uint64_t)@<X4>, int a6@<W5>, uint64_t a7@<X6>, char *a8@<X7>, void (***a9)(char *, uint64_t, uint64_t)@<X8>, uint64_t a10)
{
  LODWORD(v231) = a6;
  uint64_t v228 = (void (*)(char *, char *))a4;
  uint64_t v229 = a5;
  uint64_t v235 = a2;
  v240 = a1;
  uint64_t v223 = a9;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  unint64_t v230 = *(void (***)(char *, uint64_t, uint64_t))(TupleTypeMetadata2 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v215 = (char *)&v209 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v220 = (char *)&v209 - v16;
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v244 = (uint64_t)&v209 - v18;
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v232 = (uint64_t)&v209 - v20;
  uint64_t v21 = *(void *)(a7 - 8);
  MEMORY[0x270FA5388](v19);
  char v222 = (char *)&v209 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v23 = (void *)type metadata accessor for _HashNode();
  Swift::Bool v24 = _HashNode.isUnique()();
  uint64_t v25 = *a3 + 16;
  uint64_t v26 = *a3 + 32;
  uint64_t v27 = (uint64_t)a8;
  uint64_t v239 = a10;
  uint64_t v28 = (unsigned int *)nullsub_1(v25, v26, a7, a8, a10);
  unsigned int v31 = *v28;
  unsigned int v30 = v28[1];
  uint64_t v233 = a3;
  uint64_t v236 = v23;
  uint64_t v237 = a7;
  uint64_t v225 = v21;
  uint64_t v238 = a8;
  uint64_t v32 = 0;
  if (v31)
  {
    uint64_t v227 = (void (**)(char *, uint64_t, uint64_t))(v21 + 16);
    unint64_t v219 = (uint64_t (**)(uint64_t, uint64_t))(v21 + 8);
    unsigned int v214 = v231 + 5;
    uint64_t v213 = v27 - 8;
    uint64_t v33 = v230;
    uint64_t v218 = (void (**)(char *, uint64_t))(v230 + 1);
    uint64_t v34 = v240;
    uint64_t v35 = v27;
    while (2)
    {
      int v36 = *v34;
      while (1)
      {
        unsigned int v37 = __clz(__rbit32(v31));
        v31 &= v31 - 1;
        int v38 = 1 << v37;
        if (((1 << v37) & v36) != 0)
        {
          uint64_t v40 = a7;
          uint64_t v41 = v35;
          LODWORD(v221) = v37 & 0x1F;
          v29.i32[0] = (v38 - 1) & v36;
          uint8x8_t v42 = (uint8x8_t)vcnt_s8(v29);
          v42.i16[0] = vaddlv_u8(v42);
          uint64_t v43 = v239;
          uint64_t v224 = _HashNode.UnsafeHandle.itemPtr(at:)(v42.u32[0], (uint64_t)v34, v235);
          unsigned int v44 = (_DWORD *)nullsub_1(*a3 + 16, *a3 + 32, v40, v41, v43);
          v45.i32[0] = *v44 & ~(-1 << (char)v221);
          uint8x8_t v46 = (uint8x8_t)vcnt_s8(v45);
          v46.i16[0] = vaddlv_u8(v46);
          LODWORD(v221) = v46.i32[0];
          uint64_t v47 = v41;
          uint64_t v48 = v239;
          uint64_t v49 = nullsub_1(*a3 + 16, *a3 + 32, v40, v47, v239);
          uint64_t v217 = v50;
          swift_retain();
          uint64_t v51 = v49;
          uint64_t v52 = v226;
          sub_24A4E3CFC(v51, v224, v40, &v241);
          swift_release();
          if (v241 == 1)
          {
            unint64_t v53 = v236;
            _HashNode.ensureUnique(isUnique:)(v24);
            uint64_t v55 = v237;
            uint64_t v54 = (uint64_t)v238;
            uint64_t v56 = nullsub_1(*a3 + 16, *a3 + 32, v237, v238, v48);
            uint64_t v207 = v48;
            uint64_t v57 = v55;
            uint64_t result = (uint64_t *)sub_24A4E4760(v56, v58, v221, v228, (uint64_t)v229, v224, v55, v54);
            uint64_t v226 = v52;
            if (v52) {
              return result;
            }
            uint64_t v35 = v54;
          }
          else
          {
            uint64_t v226 = v52;
            uint64_t v86 = v222;
            uint64_t v87 = v224;
            uint64_t v88 = v237;
            (*v227)(v222, v224, v237);
            uint64_t v217 = (void (*)(char *, uint64_t))sub_24A5B85E4();
            uint64_t v89 = (*v219)((uint64_t)v86, v88);
            MEMORY[0x270FA5388](v89);
            uint64_t v90 = v48;
            uint64_t v57 = v88;
            uint64_t v205 = v88;
            uint64_t v91 = v238;
            unint64_t v206 = v238;
            uint64_t v207 = v90;
            uint64_t v208 = v87;
            unsigned int v92 = v37;
            unint64_t v53 = v236;
            _HashNode.ensureUniqueAndSpawnChild(isUnique:level:replacing:itemSlot:newHash:_:)(v24, (int)v231, v92, v221, (unint64_t)v217, (uint64_t)sub_24A4E5B90, (uint64_t)(&v209 - 6), v236);
            a3 = v233;
            uint64_t v32 = (void (**)(char *, uint64_t, uint64_t))((char *)v32 + 1);
            uint64_t v35 = (uint64_t)v91;
          }
          Swift::Bool v24 = 1;
          uint64_t v34 = v240;
          a7 = v57;
          unint64_t v23 = v53;
          goto LABEL_19;
        }
        int v39 = v34[1];
        if ((v39 & v38) != 0) {
          break;
        }
        if (!v31) {
          goto LABEL_22;
        }
      }
      uint64_t v60 = v23;
      v29.i32[0] = v39 & (v38 - 1);
      uint8x8_t v61 = (uint8x8_t)vcnt_s8(v29);
      v61.i16[0] = vaddlv_u8(v61);
      uint64_t v62 = v35;
      uint64_t v63 = v33;
      uint64_t result = (uint64_t *)_HashNode.UnsafeHandle.childPtr(at:)(v61.u32[0], (uint64_t)v34, v235);
      uint64_t v64 = v63[9];
      BOOL v65 = __OFSUB__(16, v64);
      uint64_t v66 = 16 - (void)v64;
      if (v65)
      {
        __break(1u);
        return result;
      }
      unint64_t v221 = result;
      _HashNode.ensureUnique(isUnique:withFreeSpace:)(v24, v66 & ~(v66 >> 63));
      uint64_t v67 = TupleTypeMetadata2;
      uint64_t v68 = v232;
      uint64_t v224 = v232 + *(int *)(TupleTypeMetadata2 + 48);
      _HashNode.removeItem(at:)(v232, v224, v37, v60);
      uint64_t v69 = v221[1];
      uint64_t v241 = *v221;
      uint64_t v242 = v69;
      uint64_t v70 = *(int *)(v67 + 48);
      uint64_t v71 = v62;
      uint64_t v72 = v244;
      unint64_t v221 = (uint64_t *)(v244 + v70);
      uint64_t v217 = (void (*)(char *, uint64_t))*v227;
      ((void (*)(uint64_t, uint64_t, uint64_t))v217)(v244, v68, v237);
      uint64_t v73 = *(void *)(v71 - 8);
      uint64_t v74 = (uint64_t *)(v73 + 16);
      uint64_t v216 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v73 + 16);
      v216(v221, v224, v71);
      swift_retain();
      uint64_t v75 = v237;
      unint64_t v212 = sub_24A5B85E4();
      (*v219)(v72, v75);
      (*(void (**)(uint64_t *, uint64_t))(v73 + 8))(v221, v71);
      uint64_t v76 = v220;
      uint64_t v77 = &v220[*(int *)(TupleTypeMetadata2 + 48)];
      ((void (*)(char *, uint64_t, uint64_t))v217)(v220, v232, v75);
      unint64_t v221 = v74;
      uint64_t v78 = ((uint64_t (*)(char *, uint64_t, uint64_t))v216)(v77, v224, v71);
      uint64_t v79 = v75;
      MEMORY[0x270FA5388](v78);
      uint64_t v205 = v75;
      unint64_t v206 = (char *)v71;
      uint64_t v207 = v239;
      uint64_t v208 = (uint64_t)v76;
      LOBYTE(v71) = _HashNode.updateValue(_:forKey:_:_:)(v214, v232, v212, (uint64_t (*)(uint64_t))sub_24A4E5B90, (uint64_t)(&v209 - 6), v236);
      uint64_t v211 = v80;
      LODWORD(v212) = v81;
      unsigned __int8 v82 = *v218;
      long long v83 = v76;
      uint64_t v84 = TupleTypeMetadata2;
      (*v218)(v83, TupleTypeMetadata2);
      if (v71)
      {
        long long v85 = (void (*)(uint64_t, uint64_t))v82;
      }
      else
      {
        uint64_t v210 = (void (*)(void, void))v82;
        uint64_t v93 = *(int *)(v84 + 48);
        uint64_t v94 = (uint64_t)v215;
        uint64_t v95 = &v215[v93];
        ((void (*)(char *, uint64_t, uint64_t))v217)(v215, v232, v79);
        uint64_t v96 = (uint64_t)v238;
        v216((uint64_t *)v95, v224, (uint64_t)v238);
        uint64_t v97 = v211;
        uint64_t v98 = v239;
        uint64_t v99 = nullsub_1(v211 + 16, v211 + 32, v79, v96, v239);
        uint64_t v207 = v98;
        uint64_t v100 = v226;
        sub_24A4E58A8(v99, v101, 0, v97, v212, (void (*)(uint64_t, char *))v228, (uint64_t)v229, v94, v79, v96);
        uint64_t v226 = v100;
        if (v100)
        {
          uint64_t v203 = TupleTypeMetadata2;
          uint64_t v204 = v210;
          v210(v232, TupleTypeMetadata2);
          v204(v94, v203);
          return (uint64_t *)swift_release();
        }
        uint64_t v102 = v94;
        long long v85 = v210;
        v210(v102, TupleTypeMetadata2);
      }
      uint64_t v103 = v242;
      uint64_t v104 = swift_retain();
      unint64_t v23 = v236;
      a3 = v233;
      sub_24A5B9AB0(v104, v103, v37, v236);
      swift_release();
      v85(v232, TupleTypeMetadata2);
      uint64_t v32 = (void (**)(char *, uint64_t, uint64_t))((char *)v32 + v242 - 1);
      swift_release();
      Swift::Bool v24 = 1;
      a7 = v237;
      uint64_t v35 = (uint64_t)v238;
      uint64_t v34 = v240;
LABEL_19:
      uint64_t v33 = v230;
      if (v31) {
        continue;
      }
      break;
    }
  }
  else
  {
    uint64_t v35 = v27;
  }
LABEL_22:
  uint64_t v105 = v226;
  if (v30)
  {
    unint64_t v230 = (void (**)(char *, uint64_t, uint64_t))(v225 + 16);
    uint64_t v227 = (void (**)(char *, uint64_t, uint64_t))(v225 + 8);
LABEL_24:
    while (2)
    {
      uint64_t v106 = a7;
      uint64_t v107 = v35;
LABEL_25:
      uint64_t v226 = v105;
      uint64_t v108 = v239;
      while (1)
      {
        char v109 = __clz(__rbit32(v30));
        v30 &= v30 - 1;
        v110.i32[0] = *(_DWORD *)(nullsub_1(*a3 + 16, *a3 + 32, v106, v107, v108) + 4) & ~(-1 << v109);
        int8x8_t v111 = vcnt_s8(v110);
        v111.i16[0] = vaddlv_u8((uint8x8_t)v111);
        unsigned int v112 = v111.i32[0];
        int v113 = 1 << v109;
        if ((*v240 & (1 << v109)) != 0)
        {
          v111.i32[0] = *v240 & (v113 - 1);
          uint8x8_t v115 = (uint8x8_t)vcnt_s8(v111);
          v115.i16[0] = vaddlv_u8(v115);
          uint64_t v116 = _HashNode.UnsafeHandle.itemPtr(at:)(v115.u32[0], (uint64_t)v240, v235);
          uint64_t v232 = v116;
          _HashNode.ensureUnique(isUnique:)(v24);
          uint64_t v117 = v222;
          (*v230)(v222, v116, v106);
          uint64_t v118 = v239;
          uint64_t v224 = sub_24A5B85E4();
          ((void (*)(char *, uint64_t))*v227)(v117, v106);
          uint64_t v119 = (uint64_t)v238;
          uint64_t v120 = nullsub_1(*a3 + 16, *a3 + 32, v106, v238, v118);
          unsigned int v121 = v112;
          uint64_t v122 = v119;
          uint64_t v123 = v226;
          sub_24A4E3E84(v120, v124, v121, v232, v224, v106, v119, (uint64_t)&v241, v118);
          if (v241 != 1)
          {
            uint64_t v125 = v242;
            LODWORD(v224) = v243;
            uint64_t v226 = v123;
            uint64_t v126 = nullsub_1(v242 + 16, v242 + 32, v106, v119, v118);
            uint64_t v207 = v118;
            uint64_t v127 = v226;
            uint64_t result = (uint64_t *)sub_24A4E501C(v126, v128, 0, v125, v224, v228, (uint64_t)v229, v232, v106, v119);
            uint64_t v105 = v127;
            if (v127) {
              return result;
            }
            Swift::Bool v24 = 1;
            if (!v30)
            {
              uint64_t v35 = v107;
              a7 = v106;
              goto LABEL_38;
            }
            goto LABEL_25;
          }
          ++a3[1];
          uint64_t v32 = (void (**)(char *, uint64_t, uint64_t))((char *)v32 + 1);
          Swift::Bool v24 = 1;
          a7 = v106;
          uint64_t v105 = v123;
          uint64_t v35 = v122;
          if (v30) {
            goto LABEL_24;
          }
          goto LABEL_38;
        }
        int v114 = v240[1];
        if ((v114 & v113) != 0) {
          break;
        }
        if (!v30)
        {
          uint64_t v35 = v107;
          a7 = v106;
          uint64_t v105 = v226;
          goto LABEL_38;
        }
      }
      v111.i32[0] = v114 & (v113 - 1);
      uint8x8_t v129 = (uint8x8_t)vcnt_s8(v111);
      v129.i16[0] = vaddlv_u8(v129);
      LODWORD(v232) = v129.i32[0];
      _HashNode.ensureUnique(isUnique:)(v24);
      uint64_t v130 = nullsub_1(*a3 + 16, *a3 + 32, v106, v107, v108);
      uint64_t v131 = v226;
      uint64_t result = (uint64_t *)sub_24A4E4024(v130, v132, v112, (int)v231, (uint64_t)v240, v235, v232, (uint64_t)v228, &v241, (uint64_t)v229, v106, v107, v108);
      uint64_t v105 = v131;
      if (v131) {
        return result;
      }
      uint64_t v133 = v241;
      a3[1] += v241;
      uint64_t v32 = (void (**)(char *, uint64_t, uint64_t))((char *)v32 + v133);
      Swift::Bool v24 = 1;
      uint64_t v35 = v107;
      a7 = v106;
      if (v30) {
        continue;
      }
      break;
    }
  }
LABEL_38:
  uint64_t v134 = a7;
  uint64_t v135 = a7;
  uint64_t v136 = v239;
  uint64_t v137 = v35;
  uint64_t result = (uint64_t *)nullsub_1(*a3 + 16, *a3 + 32, v134, v35, v239);
  long long v139 = v240;
  int v140 = *v240;
  int v141 = ~(*((_DWORD *)result + 1) | *(_DWORD *)result);
  unsigned int v142 = v140 & v141;
  uint64_t v226 = v105;
  if ((v140 & v141) != 0)
  {
    LODWORD(v224) = v141;
    LODWORD(v228) = __clz(__rbit32(v142));
    v138.i32[0] = v140 & ~(-1 << (char)v228);
    uint8x8_t v143 = (uint8x8_t)vcnt_s8(v138);
    v143.i16[0] = vaddlv_u8(v143);
    uint64_t v144 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v143.u32[0], v240, v235, v135, v137, v136);
    uint64_t v227 = v32;
    uint64_t v145 = v225;
    uint64_t v146 = *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v147 = v244;
    uint64_t v148 = v244 + v146;
    uint64_t v149 = v144 + v146;
    uint64_t v231 = *(void (**)(uint64_t, uint64_t, uint64_t))(v225 + 16);
    uint64_t v232 = v225 + 16;
    v231(v244, v144, v135);
    uint64_t v150 = v149;
    uint64_t v151 = *(void *)(v137 - 8);
    uint64_t v229 = *(void (**)(uint64_t, uint64_t, uint64_t))(v151 + 16);
    unint64_t v230 = (void (**)(char *, uint64_t, uint64_t))(v151 + 16);
    v229(v148, v150, v137);
    _HashNode.ensureUniqueAndInsertItem(isUnique:_:at:)(v24, v147, v148, v228, v236);
    uint64_t v152 = (char *)v137;
    uint64_t v153 = v135;
    uint64_t v156 = *(void (**)(uint64_t, char *))(v151 + 8);
    uint64_t v154 = v151 + 8;
    uint64_t v155 = v156;
    uint64_t v157 = v148;
    uint64_t v158 = v145;
    uint64_t v159 = v227;
    uint64_t v160 = v147;
    uint64_t v161 = v152;
    ((void (*)(uint64_t))v156)(v157);
    uint64_t v164 = *(void (***)(char *, uint64_t, uint64_t))(v158 + 8);
    uint64_t v162 = v158 + 8;
    char v163 = v164;
    unsigned int v165 = (v142 - 1) & v142;
    uint64_t result = (uint64_t *)((uint64_t (*)(uint64_t, uint64_t))v164)(v160, v153);
    uint64_t v32 = (void (**)(char *, uint64_t, uint64_t))((char *)v159 + 1);
    if (v165)
    {
      uint64_t v227 = v163;
      uint64_t v228 = (void (*)(char *, char *))v155;
      uint64_t v167 = v237;
      __int16 v166 = v238;
      do
      {
        uint64_t v168 = __clz(__rbit32(v165));
        v165 &= v165 - 1;
        v138.i32[0] = *v240 & ~(-1 << v168);
        uint8x8_t v169 = (uint8x8_t)vcnt_s8(v138);
        v169.i16[0] = vaddlv_u8(v169);
        uint64_t v170 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v169.u32[0], v240, v235, v167, v166, v239);
        uint64_t v171 = *(int *)(TupleTypeMetadata2 + 48);
        uint64_t v172 = v154;
        uint64_t v173 = v32;
        uint64_t v174 = v162;
        uint64_t v175 = v244 + v171;
        uint64_t v176 = v170 + v171;
        v231(v244, v170, v167);
        v229(v175, v176, (uint64_t)v166);
        Swift::Bool v24 = 1;
        _HashNode.ensureUniqueAndInsertItem(isUnique:_:at:)(1, v244, v175, v168, v236);
        uint64_t v177 = v175;
        uint64_t v162 = v174;
        unint64_t v178 = v173;
        uint64_t v154 = v172;
        v228((char *)v177, v166);
        uint64_t result = (uint64_t *)((uint64_t (*)(uint64_t, uint64_t))v227)(v244, v167);
        uint64_t v32 = (void (**)(char *, uint64_t, uint64_t))((char *)v178 + 1);
      }
      while (v165);
      unint64_t v179 = v238;
    }
    else
    {
      Swift::Bool v24 = 1;
      unint64_t v179 = v161;
    }
    uint64_t v182 = v235;
    unint64_t v180 = v236;
    uint64_t v181 = v239;
    long long v139 = v240;
    int v141 = v224;
  }
  else
  {
    unint64_t v180 = v236;
    uint64_t v181 = v136;
    unint64_t v179 = (char *)v137;
    uint64_t v182 = v235;
  }
  int v183 = v139[1];
  unsigned int v184 = v183 & v141;
  if ((v183 & v141) != 0)
  {
    LODWORD(v244) = __clz(__rbit32(v184));
    unsigned int v185 = (v184 - 1) & v184;
    v138.i32[0] = v183 & ~(-1 << v244);
    uint8x8_t v186 = (uint8x8_t)vcnt_s8(v138);
    v186.i16[0] = vaddlv_u8(v186);
    uint64_t v187 = v186.u32[0];
    Swift::Bool v188 = v24;
    uint64_t v189 = v139;
    _HashNode.ensureUnique(isUnique:withFreeSpace:)(v188, 16);
    uint64_t v190 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v187, v189, v182, v237, v179, v181);
    uint64_t v191 = *(void *)(v190 + 8);
    uint64_t v192 = swift_retain();
    sub_24A5B9AB0(v192, v191, v244, v180);
    uint64_t result = (uint64_t *)swift_release();
    uint64_t v32 = (void (**)(char *, uint64_t, uint64_t))((char *)v32 + *(void *)(v190 + 8));
    if (v185)
    {
      uint64_t v194 = v180;
      unint64_t v195 = v240;
      uint64_t v196 = v235;
      do
      {
        char v197 = __clz(__rbit32(v185));
        v185 &= v185 - 1;
        v193.i32[0] = v195[1] & ~(-1 << v197);
        uint8x8_t v198 = (uint8x8_t)vcnt_s8(v193);
        v198.i16[0] = vaddlv_u8(v198);
        uint64_t v199 = v198.u32[0];
        _HashNode.ensureUnique(isUnique:withFreeSpace:)(1, 16);
        uint64_t v200 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v199, v195, v196, v237, v238, v239);
        uint64_t v201 = *(void *)(v200 + 8);
        uint64_t v202 = swift_retain();
        sub_24A5B9AB0(v202, v201, v197, v194);
        uint64_t result = (uint64_t *)swift_release();
        uint64_t v32 = (void (**)(char *, uint64_t, uint64_t))((char *)v32 + *(void *)(v200 + 8));
      }
      while (v185);
    }
  }
  *uint64_t v223 = v32;
  return result;
}

uint64_t sub_24A4E3CFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, unsigned char *a4@<X8>)
{
  uint64_t v7 = *(void *)(a3 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v24 - v11;
  uint64_t v19 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(v14, v13, v18, v15, v16, v17);
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v20(v12, v19, a3);
  v20(v10, a2, a3);
  char v21 = sub_24A5BB530();
  uint64_t v22 = *(void (**)(char *, uint64_t))(v7 + 8);
  v22(v10, a3);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v22)(v12, a3);
  *a4 = v21 & 1;
  return result;
}

uint64_t sub_24A4E3E84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X4>, unint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  unint64_t v30 = a5;
  uint64_t v28 = a2;
  uint64_t v15 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned int v29 = v18 + 5;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v19, v20);
  uint64_t v32 = a6;
  uint64_t v33 = a7;
  uint64_t v34 = a9;
  uint64_t v35 = a4;
  _HashNode.UnsafeHandle.subscript.unsafeMutableAddressor(a3, a1, v28);
  char v21 = (void *)type metadata accessor for _HashNode();
  char v22 = _HashNode.updateValue(_:forKey:_:_:)(v29, (uint64_t)v17, v30, (uint64_t (*)(uint64_t))sub_24A4E5B90, (uint64_t)v31, v21);
  uint64_t v24 = v23;
  LODWORD(a7) = v25;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, a6);
  *(unsigned char *)a8 = v22 & 1;
  *(void *)(a8 + 8) = v24;
  *(_DWORD *)(a8 + 16) = a7;
  return result;
}

uint64_t sub_24A4E4024@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v16 = (a4 + 5);
  uint64_t v17 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(a7, a5, a6, a11, a12, a13);
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  _HashNode.UnsafeHandle.subscript.unsafeMutableAddressor(a3, a1, a2);
  uint64_t v20 = type metadata accessor for _HashNode();
  swift_retain();
  uint64_t v21 = _HashNode.merge(_:_:_:)(v16, v19, v18, a8, a10, v20);
  uint64_t result = swift_release();
  if (!v25) {
    *a9 = v21;
  }
  return result;
}

uint64_t sub_24A4E4130@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void (*a4)(char *, char *)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v10 = v9;
  uint64_t v34 = a4;
  uint64_t v35 = a5;
  uint64_t v42 = a2;
  v31[0] = a9;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v32 = (char *)v31 - v16;
  uint64_t v40 = (void *)type metadata accessor for _HashNode();
  uint64_t result = _HashNode.isUnique()();
  int8x8_t v18 = (int8x8_t)*a1;
  unsigned int v19 = a1[1];
  uint64_t v41 = a1;
  uint8x8_t v20 = (uint8x8_t)vcnt_s8(v18);
  v20.i16[0] = vaddlv_u8(v20);
  if (v18.i32[0] != v19) {
    v18.i32[0] = v20.i32[0];
  }
  __int32 v39 = v18.i32[0];
  if (v18.i32[0])
  {
    uint64_t v43 = 0;
    unsigned int v21 = 0;
    uint64_t v38 = a3[1];
    v31[1] = a7 - 8;
    v31[2] = a6 - 8;
    while (1)
    {
      int v44 = result;
      uint64_t v27 = _HashNode.UnsafeHandle.itemPtr(at:)(v21, (uint64_t)v41, v42);
      nullsub_1(*a3 + 16, *a3 + 32, a6, a7, a8);
      swift_retain();
      sub_24A4E4488(v27, a6, a7, a8, (uint64_t)&v45);
      swift_release();
      if (v46 == 1)
      {
        uint64_t v22 = (uint64_t)v32;
        uint64_t v23 = *(int *)(TupleTypeMetadata2 + 48);
        uint64_t v24 = (uint64_t)&v32[v23];
        uint64_t v36 = v27 + v23;
        uint64_t v37 = v10;
        uint64_t v25 = *(void *)(a6 - 8);
        (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v32, v27, a6);
        uint64_t v26 = *(void *)(a7 - 8);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v24, v36, a7);
        _HashNode.ensureUniqueAndAppendCollision(isUnique:_:)(v44 & 1, v22, v24, v40);
        (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, a7);
        (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v22, a6);
        uint64_t v10 = v37;
        ++v43;
      }
      else
      {
        uint64_t v28 = v45;
        _HashNode.ensureUnique(isUnique:)(v44 & 1);
        uint64_t v29 = nullsub_1(*a3 + 16, *a3 + 32, a6, a7, a8);
        uint64_t result = sub_24A4E4760(v29, v30, v28, v34, v35, v27, a6, a7);
        if (v10) {
          return result;
        }
      }
      ++v21;
      uint64_t result = 1;
      if (v39 == v21) {
        goto LABEL_11;
      }
    }
  }
  uint64_t v43 = 0;
LABEL_11:
  *(void *)v31[0] = v43;
  return result;
}

uint64_t sub_24A4E4488@<X0>(uint64_t a1@<X3>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X8>)
{
  uint64_t v30 = a5;
  uint64_t v9 = _HashNode.UnsafeHandle.reverseItems.getter();
  uint64_t v11 = v10;
  swift_getTupleTypeMetadata2();
  sub_24A5BBDB0();
  swift_getWitnessTable();
  sub_24A5BB3D0();
  long long v24 = v26;
  long long v25 = v27;
  uint64_t v20 = a2;
  uint64_t v21 = a3;
  uint64_t v22 = a4;
  uint64_t v23 = a1;
  swift_getWitnessTable();
  sub_24A5BC5E0();
  swift_getWitnessTable();
  sub_24A5BBB60();
  *(void *)&long long v26 = v28;
  BYTE8(v26) = v29;
  uint64_t v15 = a2;
  uint64_t v16 = a3;
  uint64_t v17 = a4;
  uint64_t v18 = v9;
  uint64_t v19 = v11;
  __swift_instantiateConcreteTypeFromMangledName(qword_26979AA50);
  return sub_24A4C10F8((void (*)(char *, char *))sub_24A4E5B58, (uint64_t)v14, MEMORY[0x263F8E628], (uint64_t)&type metadata for _HashSlot, v12, v30);
}

uint64_t sub_24A4E4660(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  char v7 = sub_24A5BB530();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, a3);
  return v7 & 1;
}

uint64_t sub_24A4E4760(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *, char *), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v29 = a6;
  uint64_t v30 = a5;
  unsigned int v31 = a4;
  uint64_t v9 = *(void *)(a8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  uint64_t v15 = (char *)&v28 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v28 - v16;
  uint64_t v21 = _HashNode.UnsafeHandle.itemPtr(at:)(v19, v18, v20);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v23 = v21 + *(int *)(TupleTypeMetadata2 + 48);
  long long v24 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v24(v15, v23, a8);
  v24(v12, v29 + *(int *)(TupleTypeMetadata2 + 48), a8);
  uint64_t v25 = v32;
  v31(v15, v12);
  long long v26 = *(void (**)(char *, uint64_t))(v9 + 8);
  v26(v12, a8);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v26)(v15, a8);
  if (!v25) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 40))(v23, v17, a8);
  }
  return result;
}

uint64_t sub_24A4E4964@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, void (*a5)(char *, char *)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v86 = a8;
  uint64_t v87 = a2;
  long long v83 = a9;
  uint64_t v84 = a7;
  int v81 = a5;
  uint64_t v82 = a6;
  uint64_t v15 = a11;
  uint64_t v16 = *(void *)(a10 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v18 = (char *)&v75 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v19[1];
  unint64_t v21 = _HashNode.collisionHash.getter(*v19, v20, a10, a11, a12);
  int v23 = *a1;
  int v24 = 1 << (v21 >> a4);
  unsigned int v85 = (v21 >> a4) & 0x1F;
  if ((v24 & v23) == 0)
  {
    uint64_t v36 = a3;
    int v39 = a1[1];
    if ((v39 & v24) == 0)
    {
      uint64_t v65 = v86;
      uint64_t v88 = _HashNode.copy(withFreeSpace:)(16, v84, v86, a10, a11, a12);
      uint64_t v89 = v66;
      uint64_t v67 = a3[1];
      uint64_t v68 = (void *)type metadata accessor for _HashNode();
      uint64_t v69 = swift_retain();
      sub_24A5B9AB0(v69, v67, v85, v68);
      swift_release();
      uint64_t v70 = v89;
      *a3 = v88;
      a3[1] = v70;
      uint64_t result = swift_release();
      *long long v83 = v65;
      return result;
    }
    v22.i32[0] = v39 & (v24 - 1);
    uint8x8_t v40 = (uint8x8_t)vcnt_s8(v22);
    v40.i16[0] = vaddlv_u8(v40);
    uint64_t v41 = (a4 + 5);
    LODWORD(v80) = v40.i32[0];
    uint64_t v32 = (uint64_t *)a12;
    uint64_t v42 = (uint64_t *)_HashNode.UnsafeHandle.subscript.unsafeAddressor(v40.u32[0], a1, v87, a10, a11, a12);
    uint64_t v15 = *v42;
    uint64_t v43 = v42[1];
    int v44 = (void *)type metadata accessor for _HashNode();
    swift_retain();
    uint64_t v45 = v90;
    _HashNode._merge(_:_:_:)(v41, v15, v43, v81, v82, v44);
    uint64_t result = swift_release();
    uint64_t v90 = v45;
    if (v45) {
      return result;
    }
    uint64_t v47 = sub_24A48AB90();
    uint64_t v88 = _HashNode.copy(withFreeSpace:)(v47, v84, v86, a10, a11, a12);
    uint64_t v89 = v48;
    uint64_t v34 = *v36;
    uint64_t v49 = v36[1];
    swift_retain();
    sub_24A545C9C(v85, v80, v34, v49, v44);
    swift_release();
    uint64_t v50 = v89;
    *uint64_t v36 = v88;
    v36[1] = v50;
    uint64_t result = swift_release();
    uint64_t v51 = v36[1];
    BOOL v52 = __OFSUB__(v51, v20);
    uint64_t v53 = v51 - v20;
    if (!v52) {
      goto LABEL_11;
    }
    __break(1u);
    goto LABEL_9;
  }
  v22.i32[0] = (v24 - 1) & v23;
  uint8x8_t v25 = (uint8x8_t)vcnt_s8(v22);
  v25.i16[0] = vaddlv_u8(v25);
  int v75 = v25.i32[0];
  uint64_t v26 = v87;
  uint64_t v87 = a4;
  uint64_t v20 = _HashNode.UnsafeHandle.itemPtr(at:)(v25.u32[0], (uint64_t)a1, v26);
  uint64_t v80 = a3;
  long long v27 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v27(v18, v20, a10);
  uint64_t v28 = sub_24A5B85E4();
  uint64_t v29 = *(void (**)(char *, uint64_t))(v16 + 8);
  unint64_t v78 = v28;
  uint64_t v79 = v29;
  v29(v18, a10);
  unsigned int v76 = v87 + 5;
  uint64_t v30 = ((uint64_t (*)(char *, uint64_t, uint64_t))v27)(v18, v20, a10);
  uint64_t v77 = &v75;
  MEMORY[0x270FA5388](v30);
  uint64_t v71 = a10;
  uint64_t v72 = a11;
  uint64_t v73 = a12;
  uint64_t v74 = v20;
  uint64_t v87 = a12;
  unsigned int v31 = (void *)type metadata accessor for _HashNode();
  uint64_t v32 = v80;
  LODWORD(v27) = _HashNode.updateValue(_:forKey:_:_:)(v76, (uint64_t)v18, v78, sub_24A4E5B70, (uint64_t)(&v75 - 12), v31);
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  v79(v18, a10);
  LODWORD(v79) = v27;
  if ((v27 & 1) == 0)
  {
LABEL_9:
    uint64_t v54 = v87;
    uint64_t v55 = nullsub_1(v34 + 16, v34 + 32, a10, v15, v87);
    uint64_t v73 = v54;
    uint64_t v56 = v90;
    uint64_t result = sub_24A4E501C(v55, v57, 0, v34, (uint64_t)v36, v81, v82, v20, a10, v15);
    uint64_t v37 = v32;
    uint64_t v38 = v54;
    uint64_t v90 = v56;
    if (v56) {
      return result;
    }
    goto LABEL_10;
  }
  uint64_t v37 = v32;
  uint64_t v38 = v87;
LABEL_10:
  uint64_t v58 = v37[1];
  uint64_t v59 = swift_retain();
  uint64_t v60 = v86;
  uint64_t v61 = sub_24A4B810C(v59, v58, v85, v75, v84, v86, a10, v15, v38);
  uint64_t v63 = v62;
  swift_release();
  *uint64_t v37 = v61;
  v37[1] = v63;
  uint64_t result = swift_release();
  BOOL v64 = (v79 & 1) == 0;
  BOOL v52 = __OFSUB__(v60, v64);
  uint64_t v53 = v60 - v64;
  if (!v52)
  {
LABEL_11:
    *long long v83 = v53;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_24A4E4E54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v8 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  uint64_t v13 = (char *)&v21 - v12;
  uint64_t v14 = *(int *)(v11 + 48);
  uint64_t v15 = (char *)&v21 + v14 - v12;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = *(void *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))((char *)&v21 - v12, a2, a3);
  uint64_t v18 = *(void *)(a4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v15, v16, a4);
  unsigned int v19 = &v10[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v10, v13, a3);
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v19, v15, a4);
  return sub_24A544CAC((uint64_t)v10, v22, TupleTypeMetadata2);
}

uint64_t sub_24A4E501C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(char *, char *), uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v30 = a8;
  uint64_t v31 = a7;
  uint64_t v32 = a6;
  uint64_t v10 = *(void *)(a10 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](a1);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)&v29 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v29 - v17;
  uint64_t v22 = _HashNode.UnsafeHandle.itemPtr(at:)(v21, v19, v20);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v24 = v22 + *(int *)(TupleTypeMetadata2 + 48);
  uint8x8_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v25(v16, v24, a10);
  v25(v13, v30 + *(int *)(TupleTypeMetadata2 + 48), a10);
  uint64_t v26 = v33;
  v32(v16, v13);
  long long v27 = *(void (**)(char *, uint64_t))(v10 + 8);
  v27(v13, a10);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v27)(v16, a10);
  if (!v26) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 40))(v24, v18, a10);
  }
  return result;
}

_DWORD *sub_24A4E5218@<X0>(unint64_t *a1@<X1>, void (*a2)(char *, uint64_t)@<X2>, void *a3@<X3>, int a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X6>, void (*a7)(uint64_t, char *)@<X7>, uint64_t *a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v94 = a6;
  uint64_t v90 = a5;
  LODWORD(v91) = a4;
  uint64_t v87 = a8;
  uint64_t v83 = a9;
  uint64_t v84 = a7;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v16 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v82 = (char *)&v76 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v86 = (char *)&v76 - v20;
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  int v23 = (char *)&v76 - v22;
  MEMORY[0x270FA5388](v21);
  uint64_t v99 = (uint64_t)&v76 - v24;
  unint64_t v25 = *a1;
  uint64_t v89 = a2;
  unint64_t v26 = v25 >> (char)a2;
  int v93 = (v25 >> (char)a2) & 0x1F;
  uint64_t result = (_DWORD *)nullsub_1(*a3 + 16, *a3 + 32, a10, a11, a12);
  int v28 = 1 << v26;
  if ((*result & v28) != 0)
  {
    uint64_t v29 = *(void *)(v16 + 72);
    BOOL v30 = __OFSUB__(16, v29);
    uint64_t v31 = 16 - v29;
    if (v30)
    {
      __break(1u);
    }
    else
    {
      uint64_t v81 = v12;
      uint64_t v95 = v16;
      Swift::Int v32 = v31 & ~(v31 >> 63);
      uint64_t v92 = a12;
      uint64_t v33 = (void *)type metadata accessor for _HashNode();
      uint64_t v88 = v33;
      _HashNode.ensureUnique(isUnique:withFreeSpace:)(v91 & 1, v32);
      uint64_t v34 = TupleTypeMetadata2;
      uint64_t v35 = v99;
      uint64_t v91 = v99 + *(int *)(TupleTypeMetadata2 + 48);
      uint64_t v79 = a3;
      _HashNode.removeItem(at:)(v99, v91, v93, v33);
      uint64_t v36 = &v23[*(int *)(v34 + 48)];
      uint64_t v37 = *(void *)(a10 - 8);
      uint64_t v38 = v37 + 16;
      unsigned int v85 = *(void (**)(char *, uint64_t, uint64_t))(v37 + 16);
      v85(v23, v35, a10);
      uint64_t v39 = *(void *)(a11 - 8);
      uint8x8_t v40 = *(void (**)(char *, uint64_t, uint64_t))(v39 + 16);
      v40(v36, v91, a11);
      unint64_t v80 = sub_24A5B85E4();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v23, a10);
      (*(void (**)(char *, uint64_t))(v39 + 8))(v36, a11);
      uint64_t v97 = v90;
      uint64_t v98 = v94;
      LODWORD(v89) = v89 + 5;
      uint64_t v41 = v86;
      uint64_t v42 = &v86[*(int *)(TupleTypeMetadata2 + 48)];
      uint64_t v43 = v99;
      uint64_t v78 = v38;
      v85(v86, v99, a10);
      uint64_t v77 = v40;
      uint64_t v44 = ((uint64_t (*)(char *, uint64_t, uint64_t))v40)(v42, v91, a11);
      MEMORY[0x270FA5388](v44);
      uint64_t v72 = a10;
      uint64_t v73 = a11;
      uint64_t v74 = v92;
      int v75 = v41;
      swift_retain();
      LODWORD(v38) = _HashNode.updateValue(_:forKey:_:_:)(v89, v43, v80, sub_24A4E5B70, (uint64_t)(&v76 - 6), v88);
      uint64_t v46 = v45;
      uint64_t v48 = v47;
      uint64_t v49 = TupleTypeMetadata2;
      uint64_t v50 = v41;
      uint64_t v51 = *(void (**)(char *, uint64_t))(v95 + 8);
      v95 += 8;
      v51(v50, TupleTypeMetadata2);
      LODWORD(v90) = v38;
      if ((v38 & 1) == 0)
      {
        uint64_t v89 = v51;
        uint64_t v59 = v48;
        uint64_t v60 = (uint64_t)v82;
        uint64_t v61 = &v82[*(int *)(v49 + 48)];
        uint64_t v62 = v99;
        v85(v82, v99, a10);
        v77(v61, v91, a11);
        uint64_t v63 = v92;
        uint64_t v64 = nullsub_1(v46 + 16, v46 + 32, a10, a11, v92);
        uint64_t v74 = v63;
        uint64_t v65 = v81;
        sub_24A4E58A8(v64, v66, 0, v46, v59, v84, v83, v60, a10, a11);
        if (v65)
        {
          swift_release();
          uint64_t v67 = v62;
          uint64_t v68 = (uint64_t (*)(uint64_t, uint64_t))v89;
          v89((char *)v67, v49);
          return (_DWORD *)v68(v60, v49);
        }
        uint64_t v51 = v89;
        v89((char *)v60, v49);
      }
      sub_24A5B9AB0(v97, v98, v93, v88);
      swift_release();
      uint64_t result = (_DWORD *)((uint64_t (*)(uint64_t, uint64_t))v51)(v99, v49);
      BOOL v71 = (v90 & 1) == 0;
      BOOL v30 = __OFSUB__(v94, v71);
      uint64_t v57 = v94 - v71;
      uint64_t v58 = v87;
      if (!v30) {
        goto LABEL_13;
      }
    }
    __break(1u);
    return result;
  }
  int v52 = *(_DWORD *)(nullsub_1(*a3 + 16, *a3 + 32, a10, a11, a12) + 4) & v28;
  uint64_t v53 = (void *)type metadata accessor for _HashNode();
  if (!v52)
  {
    _HashNode.ensureUnique(isUnique:withFreeSpace:)(v91 & 1, 16);
    uint64_t v69 = swift_retain();
    uint64_t v70 = v94;
    sub_24A5B9AB0(v69, v94, v93, v53);
    uint64_t result = (_DWORD *)swift_release();
    *uint64_t v87 = v70;
    return result;
  }
  _HashNode.ensureUnique(isUnique:)(v91 & 1);
  uint64_t v54 = nullsub_1(*a3 + 16, *a3 + 32, a10, a11, a12);
  uint64_t v73 = a11;
  uint64_t v74 = a12;
  uint64_t v72 = a10;
  uint64_t result = (_DWORD *)sub_24A4E5A4C(v54, v55, v93, (int)v89, v90, v94, (uint64_t)v84, v83, &v97, v56);
  if (!v12)
  {
    uint64_t v57 = v97;
    a3[1] += v97;
    uint64_t v58 = v87;
LABEL_13:
    *uint64_t v58 = v57;
  }
  return result;
}

uint64_t sub_24A4E58A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, char *), uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12 = *(void *)(a10 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](a1);
  uint64_t v15 = (char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)v27 - v16;
  uint64_t v21 = _HashNode.UnsafeHandle.itemPtr(at:)(v20, v18, v19);
  uint64_t v22 = *(int *)(swift_getTupleTypeMetadata2() + 48);
  uint64_t v23 = a8 + v22;
  uint64_t v24 = v21 + v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v21 + v22, a10);
  uint64_t v25 = v27[1];
  a6(v23, v15);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, a10);
  if (!v25) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 40))(v24, v17, a10);
  }
  return result;
}

uint64_t sub_24A4E5A4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, int8x8_t a10@<D0>)
{
  a10.i32[0] = *(_DWORD *)(a1 + 4) & ~(-1 << a3);
  uint8x8_t v15 = (uint8x8_t)vcnt_s8(a10);
  v15.i16[0] = vaddlv_u8(v15);
  _HashNode.UnsafeHandle.childPtr(at:)(v15.u32[0], a1, a2);
  uint64_t v16 = type metadata accessor for _HashNode();
  uint64_t result = _HashNode._merge(_:_:_:)((a4 + 5), a5, a6, a7, a8, v16);
  if (!v19) {
    *a9 = result;
  }
  return result;
}

uint64_t sub_24A4E5B34(uint64_t a1)
{
  return sub_24A4E4660(a1, *(void *)(v1 + 40), *(void *)(v1 + 16)) & 1;
}

_DWORD *sub_24A4E5B58@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(v2 + 48) + ~*result;
  return result;
}

uint64_t sub_24A4E5B70(uint64_t a1)
{
  return sub_24A4E4E54(a1, v1[5], v1[2], v1[3]);
}

uint64_t sub_24A4E5B94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = OrderedSet.init(arrayLiteral:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t _isCollectionsInternalCheckingEnabled.getter()
{
  return 0;
}

uint64_t static OrderedSet.== infix(_:_:)()
{
  return sub_24A5BB910() & 1;
}

uint64_t sub_24A4E5C58()
{
  return static OrderedSet.== infix(_:_:)();
}

uint64_t sub_24A4E5C78(uint64_t result)
{
  if (result < 1) {
    return result;
  }
  unint64_t v4 = v1[1];
  unint64_t v5 = v4 - result;
  if (v4 < result)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v5 >= 0xFFFFFFFFFFFFFFC0)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    uint64_t result = (uint64_t)sub_24A499D60(v5);
    unint64_t v5 = result;
LABEL_8:
    if (v3 >= *(void *)(v5 + 16))
    {
      __break(1u);
    }
    else
    {
      *(void *)(v5 + 8 * v3 + 32) &= ~(-1 << v2);
      *uint64_t v1 = v5;
    }
    return result;
  }
  unint64_t v6 = (v5 + 63) >> 6;
  unint64_t v7 = *(void *)(*v1 + 16);
  uint64_t result = v7 - v6;
  if (v7 > v6) {
    uint64_t result = sub_24A5B9CB0(result);
  }
  v1[1] = v5;
  char v2 = v5 & 0x3F;
  if ((v5 & 0x3F) != 0)
  {
    unint64_t v3 = v5 >> 6;
    unint64_t v5 = *v1;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result) {
      goto LABEL_8;
    }
    goto LABEL_13;
  }
  return result;
}

uint64_t sub_24A4E5D3C(uint64_t result, char a2)
{
  if (result < 1) {
    return result;
  }
  unint64_t v7 = (unint64_t)v3[1];
  unint64_t v8 = v7 + result;
  if (__CFADD__(v7, result))
  {
    __break(1u);
    goto LABEL_19;
  }
  if (v8 >= 0xFFFFFFFFFFFFFFC0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  char v2 = *v3;
  unint64_t v4 = *((void *)*v3 + 2);
  unint64_t v5 = (v8 + 63) >> 6;
  if ((a2 & 1) == 0)
  {
    if ((uint64_t)(v5 - v4) < 0) {
      goto LABEL_21;
    }
    uint64_t result = sub_24A4D5F98(v5 - v4, 0);
LABEL_16:
    v3[1] = (char *)v8;
    return result;
  }
  unint64_t v6 = v7 >> 6;
  if (v7 >> 6 >= v4) {
    goto LABEL_9;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_22;
  }
  while (1)
  {
    if (v6 >= *((void *)v2 + 2))
    {
      __break(1u);
LABEL_24:
      uint64_t result = (uint64_t)sub_24A499D60((uint64_t)v2);
      char v2 = (char *)result;
      goto LABEL_12;
    }
    *(void *)&v2[8 * v6 + 32] |= -1 << v7;
    *unint64_t v3 = v2;
LABEL_9:
    uint64_t v9 = v5 - v4;
    if ((uint64_t)(v5 - v4) >= 0) {
      break;
    }
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    char v2 = sub_24A499D60((uint64_t)v2);
  }
  unint64_t v7 = v8 >> 6;
  unint64_t v4 = -1;
  uint64_t result = sub_24A4D5F98(v9, 0xFFFFFFFFFFFFFFFFLL);
  char v2 = *v3;
  if (v8 >> 6 >= *((void *)*v3 + 2)) {
    goto LABEL_16;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_24;
  }
LABEL_12:
  if (v7 < *((void *)v2 + 2))
  {
    *(void *)&v2[8 * v7 + 32] &= ~(v4 << (v8 & 0x3F));
    *unint64_t v3 = v2;
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t BitArray._storage.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*BitArray._storage.modify())()
{
  return nullsub_1;
}

uint64_t BitArray._count.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t BitArray._count.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*BitArray._count.modify())()
{
  return nullsub_1;
}

void *initializeBufferWithCopyOfBuffer for BitArray(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for BitArray(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

void *assignWithTake for BitArray(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for _RawHashNode(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _RawHashNode(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BitArray()
{
  return &type metadata for BitArray;
}

uint64_t sub_24A4E6064()
{
  uint64_t v4 = v1[1];
  BOOL v5 = v4 != 0;
  uint64_t v6 = v4 - 1;
  if (!v5)
  {
    __break(1u);
    goto LABEL_13;
  }
  v1[1] = v6;
  uint64_t v0 = *v1;
  unint64_t v3 = *(void *)(*v1 + 16);
  char v2 = v6 & 0x3F;
  if ((v6 & 0x3F) != 0)
  {
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result)
    {
      if (!v3)
      {
LABEL_14:
        __break(1u);
LABEL_15:
        __break(1u);
        goto LABEL_16;
      }
LABEL_6:
      if (v3 <= *(void *)(v0 + 16))
      {
        *(void *)(v0 + 8 * (v3 - 1) + 32) &= (-1 << v2) - 1;
LABEL_12:
        *uint64_t v1 = v0;
        return result;
      }
      goto LABEL_15;
    }
LABEL_13:
    uint64_t result = (uint64_t)sub_24A499D60(v0);
    uint64_t v0 = result;
    if (!v3) {
      goto LABEL_14;
    }
    goto LABEL_6;
  }
  if (!v3)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    uint64_t result = (uint64_t)sub_24A499D60(v0);
    uint64_t v0 = result;
    uint64_t v8 = *(void *)(result + 16);
    if (!v8) {
      goto LABEL_18;
    }
    goto LABEL_11;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_17;
  }
  uint64_t v8 = *(void *)(v0 + 16);
  if (v8)
  {
LABEL_11:
    *(void *)(v0 + 16) = v8 - 1;
    goto LABEL_12;
  }
LABEL_18:
  __break(1u);
  return result;
}

char *sub_24A4E6148(char *result, char *a2)
{
  int64_t v2 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v3 = v2 + 1;
  if (__OFADD__(v2, 1))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v4 = MEMORY[0x263F8EE78];
  if (v2 == -1) {
    return (char *)v4;
  }
  uint64_t v6 = result;
  uint64_t v14 = MEMORY[0x263F8EE78];
  uint64_t result = sub_24A50BD4C(0, v3 & ~(v3 >> 63), 0);
  if ((v3 & 0x8000000000000000) == 0)
  {
    BOOL v7 = 0;
    uint64_t v4 = v14;
    uint64_t v8 = v6 - 1;
    while (a2 != v8)
    {
      if (v7) {
        goto LABEL_22;
      }
      uint64_t v13 = 0;
      uint64_t result = (char *)MEMORY[0x24C5C7E90](&v13, 8);
      uint64_t v9 = v13;
      uint64_t v14 = v4;
      unint64_t v11 = *(void *)(v4 + 16);
      unint64_t v10 = *(void *)(v4 + 24);
      if (v11 >= v10 >> 1)
      {
        uint64_t result = sub_24A50BD4C((char *)(v10 > 1), v11 + 1, 1);
        uint64_t v4 = v14;
      }
      *(void *)(v4 + 16) = v11 + 1;
      *(void *)(v4 + 8 * v11 + 32) = v9;
      BOOL v7 = v6 == a2;
      if (v6 == a2)
      {
        uint64_t v6 = 0;
      }
      else if (__OFADD__(v6++, 1))
      {
        goto LABEL_18;
      }
      if (a2 == ++v8) {
        return (char *)v4;
      }
    }
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

char *sub_24A4E6280(char *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = result;
  uint64_t v5 = a4 - a3;
  if (__OFSUB__(a4, a3))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v6 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = v4;
  uint64_t v8 = MEMORY[0x263F8EE78];
  if (v5 == -1) {
    return (char *)v8;
  }
  uint64_t v10 = a3;
  uint64_t v20 = MEMORY[0x263F8EE78];
  uint64_t result = sub_24A50BD4C(0, v6 & ~(v6 >> 63), 0);
  if ((v6 & 0x8000000000000000) == 0)
  {
    BOOL v11 = 0;
    uint64_t v8 = v20;
    uint64_t v12 = v10 - 1;
    while (a4 != v12)
    {
      if (v11) {
        goto LABEL_24;
      }
      uint64_t v18 = v10;
      uint64_t result = (char *)((char *(*)(uint64_t *__return_ptr, uint64_t *))v17)(&v19, &v18);
      if (v7)
      {
        swift_release();
        return (char *)v8;
      }
      uint64_t v7 = 0;
      uint64_t v13 = v19;
      uint64_t v20 = v8;
      unint64_t v15 = *(void *)(v8 + 16);
      unint64_t v14 = *(void *)(v8 + 24);
      if (v15 >= v14 >> 1)
      {
        uint64_t result = sub_24A50BD4C((char *)(v14 > 1), v15 + 1, 1);
        uint64_t v8 = v20;
      }
      *(void *)(v8 + 16) = v15 + 1;
      *(void *)(v8 + 8 * v15 + 32) = v13;
      BOOL v11 = v10 == a4;
      if (v10 == a4)
      {
        uint64_t v10 = 0;
      }
      else if (__OFADD__(v10++, 1))
      {
        goto LABEL_20;
      }
      if (a4 == ++v12) {
        return (char *)v8;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

int64_t sub_24A4E63E8(unint64_t a1)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (!a1) {
    return MEMORY[0x263F8EE78];
  }
  unint64_t v3 = a1 >> 6;
  char v4 = a1 & 0x3F;
  BOOL v5 = (a1 & 0x3F) == 0 && a1 > 0x3F;
  int64_t v1 = v3 - v5;
  int64_t v2 = sub_24A4E6148(0, (char *)(v3 - v5));
  if (v5)
  {
LABEL_13:
    int64_t result = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v6 = -1;
    if (result) {
      goto LABEL_8;
    }
    goto LABEL_14;
  }
  uint64_t v6 = ~(-1 << v4);
  int64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result) {
    goto LABEL_8;
  }
LABEL_14:
  int64_t result = (int64_t)sub_24A499D60((uint64_t)v2);
  int64_t v2 = (char *)result;
LABEL_8:
  if (v1 >= *((void *)v2 + 2))
  {
    __break(1u);
  }
  else
  {
    *(void *)&v2[8 * v1 + 32] &= v6;
    return _s19CollectionsInternal6BitSetV6_wordsACSayAA07_UnsafecD0V5_WordVG_tcfC_0((int64_t)v2);
  }
  return result;
}

int64_t static BitSet.random<A>(upTo:using:)(unint64_t a1)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (!a1) {
    return MEMORY[0x263F8EE78];
  }
  char v3 = a1 & 0x3F;
  BOOL v4 = (a1 & 0x3F) == 0 && a1 > 0x3F;
  uint64_t v1 = (a1 >> 6) - v4;
  MEMORY[0x270FA5388](a1);
  _OWORD v10[2] = v5;
  void v10[3] = v6;
  v10[4] = v7;
  int64_t v2 = sub_24A4E6280((char *)sub_24A4E65F4, (uint64_t)v10, 0, v1);
  if (v4)
  {
LABEL_13:
    int64_t result = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = -1;
    if (result) {
      goto LABEL_8;
    }
    goto LABEL_14;
  }
  uint64_t v8 = ~(-1 << v3);
  int64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result) {
    goto LABEL_8;
  }
LABEL_14:
  int64_t result = (int64_t)sub_24A499D60((uint64_t)v2);
  int64_t v2 = (char *)result;
LABEL_8:
  if (v1 >= *((void *)v2 + 2))
  {
    __break(1u);
  }
  else
  {
    *(void *)&v2[8 * v1 + 32] &= v8;
    return _s19CollectionsInternal6BitSetV6_wordsACSayAA07_UnsafecD0V5_WordVG_tcfC_0((int64_t)v2);
  }
  return result;
}

uint64_t sub_24A4E65F4@<X0>(void *a1@<X8>)
{
  sub_24A4E6670();
  sub_24A4E66C4();
  uint64_t result = sub_24A5BB360();
  *a1 = v3;
  return result;
}

unint64_t sub_24A4E6670()
{
  unint64_t result = qword_26979B388;
  if (!qword_26979B388)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979B388);
  }
  return result;
}

unint64_t sub_24A4E66C4()
{
  unint64_t result = qword_26979B390;
  if (!qword_26979B390)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979B390);
  }
  return result;
}

uint64_t OrderedDictionary.Elements._base.getter(uint64_t a1)
{
  return a1;
}

uint64_t OrderedDictionary.Elements._base.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  *uint64_t v3 = a1;
  v3[1] = a2;
  v3[2] = a3;
  return result;
}

uint64_t (*OrderedDictionary.Elements._base.modify())()
{
  return nullsub_1;
}

uint64_t (*OrderedDictionary.elements.modify(void *a1, void *a2))()
{
  uint64_t v5 = (char *)malloc(0x38uLL);
  *a1 = v5;
  *(void *)uint64_t v5 = *(void *)v2;
  *(_OWORD *)(v5 + 8) = *(_OWORD *)(v2 + 8);
  uint64_t v6 = a2[2];
  *((void *)v5 + 3) = v2;
  *((void *)v5 + 4) = v6;
  *((void *)v5 + 5) = a2[4];
  uint64_t v7 = OrderedSet.init()();
  uint64_t v9 = v8;
  *((void *)v5 + 6) = a2[3];
  sub_24A5BB970();
  uint64_t v10 = sub_24A5BC170();
  *(void *)uint64_t v2 = v7;
  *(void *)(v2 + 8) = v9;
  *(void *)(v2 + 16) = v10;
  return sub_24A4E6890;
}

uint64_t OrderedDictionary.Elements.keys.getter(uint64_t a1)
{
  return a1;
}

uint64_t _s19CollectionsInternal17OrderedDictionaryV8elementsAC8ElementsVyxq__Gvg_0(uint64_t a1)
{
  return a1;
}

uint64_t (*OrderedDictionary.Elements.values.modify(void *a1, void *a2))()
{
  uint64_t v5 = (char *)malloc(0x38uLL);
  *a1 = v5;
  *(void *)uint64_t v5 = *(void *)v2;
  *(_OWORD *)(v5 + 8) = *(_OWORD *)(v2 + 8);
  uint64_t v6 = a2[2];
  *((void *)v5 + 3) = v2;
  *((void *)v5 + 4) = v6;
  *((void *)v5 + 5) = a2[4];
  uint64_t v7 = OrderedSet.init()();
  uint64_t v9 = v8;
  *((void *)v5 + 6) = a2[3];
  sub_24A5BB970();
  uint64_t v10 = sub_24A5BC170();
  *(void *)uint64_t v2 = v7;
  *(void *)(v2 + 8) = v9;
  *(void *)(v2 + 16) = v10;
  return sub_24A4E6890;
}

void sub_24A4E69D4(void **a1)
{
  uint64_t v1 = *a1;
  sub_24A4E6A3C((void *)(*a1)[3], *a1);
  swift_release();
  swift_release();
  swift_release();
  free(v1);
}

uint64_t sub_24A4E6A3C(void *a1, void *a2)
{
  uint64_t v2 = a2[1];
  uint64_t v3 = a2[2];
  *a1 = *a2;
  a1[1] = v2;
  a1[2] = v3;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t _s19CollectionsInternal17OrderedDictionaryV8elementsAC8ElementsVyxq__Gvs_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v4 = v3;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v8 = OrderedSet.init()();
  uint64_t v10 = v9;
  sub_24A5BB970();
  uint64_t v11 = sub_24A5BC170();
  swift_release();
  swift_release();
  swift_release();
  *BOOL v4 = v8;
  v4[1] = v10;
  v4[2] = v11;
  v13[0] = a1;
  v13[1] = a2;
  void v13[2] = a3;
  sub_24A4E6A3C(v4, v13);
  swift_release_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t OrderedDictionary.Elements.index(forKey:)()
{
  return OrderedSet._find(_:)();
}

uint64_t OrderedDictionary.Elements.underestimatedCount.getter()
{
  return _s19CollectionsInternal4HeapV5countSivg_0();
}

uint64_t OrderedDictionary.Elements.makeIterator()(uint64_t a1)
{
  return a1;
}

uint64_t sub_24A4E6C60@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = OrderedDictionary.Elements.makeIterator()(*v1);
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  a1[1] = v5;
  a1[2] = v7;
  a1[3] = 0;
  return result;
}

uint64_t sub_24A4E6CDC()
{
  return OrderedDictionary.Elements.underestimatedCount.getter();
}

uint64_t sub_24A4E6CE8(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x270F9E128](a1, WitnessTable);
}

uint64_t OrderedDictionary.Elements.startIndex.getter()
{
  return 0;
}

Swift::Int __swiftcall OrderedDictionary.Elements.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

Swift::Int __swiftcall OrderedDictionary.Elements.index(before:)(Swift::Int before)
{
  BOOL v1 = __OFSUB__(before, 1);
  Swift::Int result = before - 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall OrderedDictionary.Elements.formIndex(after:)(Swift::Int *after)
{
  if (__OFADD__(*after, 1)) {
    __break(1u);
  }
  else {
    ++*after;
  }
}

Swift::Void __swiftcall OrderedDictionary.Elements.formIndex(before:)(Swift::Int *before)
{
  if (__OFSUB__(*before, 1)) {
    __break(1u);
  }
  else {
    --*before;
  }
}

Swift::Int __swiftcall OrderedDictionary.Elements.index(_:offsetBy:)(Swift::Int _, Swift::Int offsetBy)
{
  BOOL v2 = __OFADD__(_, offsetBy);
  Swift::Int result = _ + offsetBy;
  if (v2) {
    __break(1u);
  }
  return result;
}

Swift::Int_optional __swiftcall OrderedDictionary.Elements.index(_:offsetBy:limitedBy:)(Swift::Int _, Swift::Int offsetBy, Swift::Int limitedBy)
{
  Swift::Int v3 = limitedBy - _;
  if (__OFSUB__(limitedBy, _))
  {
    __break(1u);
    goto LABEL_12;
  }
  if (offsetBy < 1)
  {
    if (v3 > 0 || v3 <= offsetBy)
    {
LABEL_9:
      BOOL v4 = __OFADD__(_, offsetBy);
      _ += offsetBy;
      if (!v4)
      {
        LOBYTE(offsetBy) = 0;
        goto LABEL_13;
      }
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
  }
  else if (v3 < 0 || v3 >= (unint64_t)offsetBy)
  {
    goto LABEL_9;
  }
  _ = 0;
  LOBYTE(offsetBy) = 1;
LABEL_13:
  result.is_nil = offsetBy;
  result.value = _;
  return result;
}

Swift::Int __swiftcall OrderedDictionary.Elements.distance(from:to:)(Swift::Int from, Swift::Int to)
{
  BOOL v2 = __OFSUB__(to, from);
  Swift::Int result = to - from;
  if (v2) {
    __break(1u);
  }
  return result;
}

uint64_t OrderedDictionary.Elements.subscript.getter()
{
  sub_24A5BC260();
  return sub_24A5BC260();
}

uint64_t OrderedDictionary.Elements.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t result = _s19CollectionsInternal4HeapV5countSivg_0();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    *a6 = a3;
    a6[1] = a4;
    a6[2] = a5;
    a6[3] = a1;
    a6[4] = a2;
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t OrderedDictionary.Elements.isEmpty.getter()
{
  return sub_24A5BBBC0() & 1;
}

uint64_t OrderedDictionary.Elements._failEarlyRangeCheck(_:bounds:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[1] = a3;
  uint64_t v5 = a1;
  v4[0] = a2;
  sub_24A5BC210();
  swift_getWitnessTable();
  return sub_24A4E7F28((uint64_t)&v5, (uint64_t)v4);
}

void *sub_24A4E6FDC@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFSUB__(*result, 1)) {
    __break(1u);
  }
  else {
    *a2 = *result - 1;
  }
  return result;
}

void *sub_24A4E6FF4(void *result)
{
  if (__OFSUB__(*result, 1)) {
    __break(1u);
  }
  else {
    --*result;
  }
  return result;
}

uint64_t sub_24A4E700C(void *a1, void *a2)
{
  BOOL v2 = __OFSUB__(*a2, *a1);
  uint64_t result = *a2 - *a1;
  if (v2) {
    __break(1u);
  }
  return result;
}

void sub_24A4E7024(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_24A4E702C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = _s19CollectionsInternal4HeapV5countSivg_0();
  *a1 = result;
  return result;
}

void (*sub_24A4E7060(uint64_t *a1, uint64_t a2, uint64_t a3))(uint64_t *a1)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *a1 = TupleTypeMetadata2;
  uint64_t v7 = *(void *)(TupleTypeMetadata2 - 8);
  a1[1] = v7;
  size_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = (char *)malloc(v8);
  a1[2] = (uint64_t)v9;
  uint64_t v10 = (char *)malloc(v8);
  a1[3] = (uint64_t)v10;
  uint64_t v11 = &v10[*(int *)(TupleTypeMetadata2 + 48)];
  sub_24A5BC260();
  sub_24A5BC260();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v4 - 8) + 16))(v9, v10, v4);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v5 - 8) + 16))(&v9[*(int *)(TupleTypeMetadata2 + 48)], v11, v5);
  return sub_24A4E71EC;
}

void sub_24A4E71EC(uint64_t *a1)
{
  BOOL v2 = (void *)a1[2];
  BOOL v1 = (void *)a1[3];
  uint64_t v3 = *a1;
  uint64_t v4 = *(void (**)(void *, uint64_t))(a1[1] + 8);
  v4(v2, *a1);
  v4(v1, v3);
  free(v1);
  free(v2);
}

double sub_24A4E7268@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  OrderedDictionary.Elements.subscript.getter(*a1, a1[1], *v2, v2[1], v2[2], v6);
  double result = *(double *)v6;
  long long v5 = v6[1];
  *(_OWORD *)a2 = v6[0];
  *(_OWORD *)(a2 + 16) = v5;
  *(void *)(a2 + 32) = v7;
  return result;
}

uint64_t sub_24A4E72C4()
{
  swift_getWitnessTable();
  return sub_24A5BBAC0();
}

uint64_t sub_24A4E7330()
{
  return sub_24A5BBBC0() & 1;
}

uint64_t sub_24A4E739C()
{
  return _s19CollectionsInternal4HeapV5countSivg_0();
}

void sub_24A4E73AC(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

void *sub_24A4E73BC@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (__OFADD__(*result, a2)) {
    __break(1u);
  }
  else {
    *a3 = *result + a2;
  }
  return result;
}

uint64_t sub_24A4E73D4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = sub_24A4E8180(*a1, a2, *a3);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t sub_24A4E740C(uint64_t *a1, long long *a2)
{
  uint64_t v4 = *a1;
  long long v3 = *a2;
  sub_24A5BC210();
  swift_getWitnessTable();
  return sub_24A4E7F28((uint64_t)&v4, (uint64_t)&v3);
}

void *sub_24A4E7480@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFADD__(*result, 1)) {
    __break(1u);
  }
  else {
    *a2 = *result + 1;
  }
  return result;
}

void *sub_24A4E7498(void *result)
{
  if (__OFADD__(*result, 1)) {
    __break(1u);
  }
  else {
    ++*result;
  }
  return result;
}

uint64_t sub_24A4E74B4(void *a1, uint64_t a2)
{
  return sub_24A4E7648(a1, a2, (uint64_t (*)(void, void, void, void, void, void))OrderedDictionary.Elements.description.getter);
}

uint64_t OrderedDictionary.Elements.debugDescription.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v11[0] = a1;
  v11[1] = a2;
  v11[2] = a3;
  sub_24A5BC070();
  swift_bridgeObjectRelease();
  sub_24A5BC7E0();
  sub_24A5BB6F0();
  swift_bridgeObjectRelease();
  sub_24A5BB6F0();
  sub_24A5BC7E0();
  sub_24A5BB6F0();
  swift_bridgeObjectRelease();
  sub_24A5BB6F0();
  uint64_t v7 = type metadata accessor for OrderedDictionary.Elements();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v9 = _dictionaryDescription<A, B, C>(for:debug:typeName:)((uint64_t)v11, 1, 0xD000000000000012, 0x800000024A5C4140, a4, a5, v7, WitnessTable);
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_24A4E7630(void *a1, uint64_t a2)
{
  return sub_24A4E7648(a1, a2, (uint64_t (*)(void, void, void, void, void, void))OrderedDictionary.Elements.debugDescription.getter);
}

uint64_t sub_24A4E7648(void *a1, uint64_t a2, uint64_t (*a3)(void, void, void, void, void, void))
{
  return a3(*v3, v3[1], v3[2], a1[2], a1[3], a1[4]);
}

uint64_t OrderedDictionary.Elements.customMirror.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  v18[0] = a4;
  v18[1] = a5;
  uint64_t v8 = sub_24A5BC6B0();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_26979AE30);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  void v18[5] = a1;
  v18[6] = a2;
  v18[7] = a3;
  v18[2] = a1;
  v18[3] = a2;
  v18[4] = a3;
  uint64_t v14 = *MEMORY[0x263F8E7E8];
  uint64_t v15 = sub_24A5BC6A0();
  uint64_t v16 = *(void *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 104))(v13, v14, v15);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  type metadata accessor for OrderedDictionary.Elements();
  swift_getWitnessTable();
  sub_24A4D1B3C((uint64_t)v10);
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  return sub_24A5BC6C0();
}

uint64_t sub_24A4E7878@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return OrderedDictionary.Elements.customMirror.getter(*v2, v2[1], v2[2], *(void *)(a1 + 32), a2);
}

uint64_t static OrderedDictionary.Elements<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return static OrderedDictionary<>.== infix(_:_:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_24A4E789C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  return static OrderedDictionary.Elements<>.== infix(_:_:)(*a1, a1[1], a1[2], *a2, a2[1], a2[2], a3[2], a3[3], a3[4], *(void *)(a4 - 8)) & 1;
}

uint64_t OrderedDictionary.Elements<>.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_24A5BC610();
  OrderedDictionary<>.hash(into:)((uint64_t)v15, a1, a2, a3, a4, a5, a6, a7);
  return sub_24A5BC690();
}

uint64_t sub_24A4E7980(uint64_t *a1, uint64_t a2)
{
  return OrderedDictionary.Elements<>.hashValue.getter(*v2, v2[1], v2[2], a1[2], a1[3], a1[4], *(void *)(a2 - 8));
}

uint64_t sub_24A4E799C(uint64_t a1, void *a2, uint64_t a3)
{
  return OrderedDictionary.Elements<>.hash(into:)(a1, *v3, v3[1], v3[2], a2[2], a2[3], a2[4], *(void *)(a3 - 8));
}

uint64_t sub_24A4E79B8(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  sub_24A5BC610();
  OrderedDictionary.Elements<>.hash(into:)(v7, *v3, v3[1], v3[2], a2[2], a2[3], a2[4], v5);
  return sub_24A5BC690();
}

Swift::Void __swiftcall OrderedDictionary.Elements.swapAt(_:_:)(Swift::Int a1, Swift::Int a2)
{
  sub_24A4E7C98(a1, a2, v2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))OrderedDictionary.swapAt(_:_:));
}

void *OrderedDictionary.Elements.partition(by:)(uint64_t (*a1)(char *, char *), uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OrderedDictionary();
  return OrderedDictionary.partition(by:)(a1, a2, v4);
}

uint64_t OrderedDictionary.Elements.sort(by:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A4E7EC8(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))OrderedDictionary.sort(by:));
}

uint64_t OrderedDictionary.Elements<>.sort()()
{
  type metadata accessor for OrderedDictionary();
  return OrderedDictionary<>.sort()();
}

Swift::Void __swiftcall OrderedDictionary.Elements.shuffle()()
{
  sub_24A4E7B8C(v0, (uint64_t (*)(uint64_t))OrderedDictionary.shuffle());
}

uint64_t OrderedDictionary.Elements.shuffle<A>(using:)(uint64_t a1)
{
  uint64_t v2 = (void *)type metadata accessor for OrderedDictionary();
  return OrderedDictionary.shuffle<A>(using:)(a1, v2);
}

Swift::Void __swiftcall OrderedDictionary.Elements.reverse()()
{
  sub_24A4E7B8C(v0, (uint64_t (*)(uint64_t))OrderedDictionary.reverse());
}

uint64_t sub_24A4E7B8C(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v2 = type metadata accessor for OrderedDictionary();
  return a2(v2);
}

Swift::Void __swiftcall OrderedDictionary.Elements.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
  type metadata accessor for OrderedDictionary();
  OrderedDictionary.removeAll(keepingCapacity:)(keepingCapacity);
}

uint64_t OrderedDictionary.Elements.remove(at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for OrderedDictionary();
  return OrderedDictionary.remove(at:)(a1, a2, a3);
}

uint64_t OrderedDictionary.Elements.removeSubrange(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A4E7C98(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))OrderedDictionary.removeSubrange(_:));
}

uint64_t sub_24A4E7C98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = type metadata accessor for OrderedDictionary();
  return a4(a1, a2, v6);
}

uint64_t OrderedDictionary.Elements.removeSubrange<A>(_:)()
{
  type metadata accessor for OrderedDictionary();
  return OrderedDictionary.removeSubrange<A>(_:)();
}

uint64_t OrderedDictionary.Elements.removeLast()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A4E7DB4(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))OrderedDictionary.removeLast());
}

Swift::Void __swiftcall OrderedDictionary.Elements.removeLast(_:)(Swift::Int a1)
{
  sub_24A4E7E3C(a1, v1, (uint64_t (*)(uint64_t, uint64_t))OrderedDictionary.removeLast(_:));
}

uint64_t OrderedDictionary.Elements.removeFirst()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A4E7DB4(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))OrderedDictionary.removeFirst());
}

uint64_t sub_24A4E7DB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = type metadata accessor for OrderedDictionary();
  return a4(a1, a2, v6);
}

Swift::Void __swiftcall OrderedDictionary.Elements.removeFirst(_:)(Swift::Int a1)
{
  sub_24A4E7E3C(a1, v1, (uint64_t (*)(uint64_t, uint64_t))OrderedDictionary.removeFirst(_:));
}

uint64_t sub_24A4E7E3C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v4 = type metadata accessor for OrderedDictionary();
  return a3(a1, v4);
}

uint64_t OrderedDictionary.Elements.removeAll(where:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A4E7EC8(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))OrderedDictionary.removeAll(where:));
}

uint64_t sub_24A4E7EC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = type metadata accessor for OrderedDictionary();
  return a4(a1, a2, v7);
}

uint64_t sub_24A4E7F28(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = sub_24A5BB520();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v16 - v8;
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v12 = (char *)&v16 - v11;
  char v13 = sub_24A5BB440();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a2, v5);
  if ((v13 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
    goto LABEL_5;
  }
  char v14 = sub_24A5BB440();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
  if ((v14 & 1) == 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t sub_24A4E8180(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 - result;
  if (__OFSUB__(a3, result))
  {
    __break(1u);
    goto LABEL_12;
  }
  if (a2 > 0)
  {
    if (v3 < 0 || v3 >= (unint64_t)a2) {
      goto LABEL_9;
    }
    return 0;
  }
  if (v3 <= 0 && v3 > a2) {
    return 0;
  }
LABEL_9:
  BOOL v4 = __OFADD__(result, a2);
  result += a2;
  if (v4) {
LABEL_12:
  }
    __break(1u);
  return result;
}

uint64_t type metadata accessor for OrderedDictionary.Elements()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_24A4E81EC()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A4E8208()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A4E8224()
{
  return sub_24A4E8330();
}

unint64_t sub_24A4E823C()
{
  unint64_t result = qword_26979B398[0];
  if (!qword_26979B398[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26979B398);
  }
  return result;
}

uint64_t sub_24A4E8290()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A4E82AC()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A4E82C8()
{
  return sub_24A4E8330();
}

uint64_t sub_24A4E82E0()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A4E82FC()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A4E8318()
{
  return sub_24A4E8330();
}

uint64_t sub_24A4E8330()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A4E837C()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A4E8398()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A4E83E4()
{
  swift_release();
  swift_release();
  return swift_release();
}

void *sub_24A4E8428(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *sub_24A4E8478(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_24A4E84F0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t static TreeDictionary._isConsistencyCheckingEnabled.getter()
{
  return 0;
}

Swift::Void __swiftcall TreeDictionary._dump(iterationOrder:)(Swift::Bool iterationOrder)
{
  v1._uint64_t countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  v2._uint64_t countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  _HashNode.dump(iterationOrder:limit:firstPrefix:restPrefix:depth:)(iterationOrder, 0x7FFFFFFFFFFFFFFFLL, v1, v2, 0);
}

uint64_t static TreeDictionary._maxDepth.getter()
{
  return 13;
}

double TreeDictionary._statistics.getter@<D0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, _OWORD *a6@<X8>)
{
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  sub_24A5A973C(0, &v13, a1, a2, a3, a4, a5);
  double result = *(double *)&v13;
  long long v8 = v14;
  long long v9 = v15;
  long long v10 = v16;
  long long v11 = v17;
  long long v12 = v18;
  *a6 = v13;
  a6[1] = v8;
  a6[2] = v9;
  a6[3] = v10;
  a6[4] = v11;
  a6[5] = v12;
  return result;
}

uint64_t TreeSet.customMirror.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24A5BC6B0();
  MEMORY[0x270FA5388](v6 - 8);
  long long v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_26979AE30);
  MEMORY[0x270FA5388](v9 - 8);
  long long v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[3] = a1;
  v16[4] = a2;
  v16[5] = a3;
  v16[0] = a1;
  v16[1] = a2;
  void v16[2] = a3;
  uint64_t v12 = *MEMORY[0x263F8E7F8];
  uint64_t v13 = sub_24A5BC6A0();
  uint64_t v14 = *(void *)(v13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 104))(v11, v12, v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  type metadata accessor for TreeSet();
  swift_getWitnessTable();
  sub_24A4D1B3C((uint64_t)v8);
  swift_retain_n();
  return sub_24A5BC6C0();
}

uint64_t sub_24A4E880C()
{
  return TreeSet.customMirror.getter(*v0, v0[1], v0[2]);
}

uint64_t Rope.Builder.init()@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for Rope();
  *a1 = sub_24A5BB970();
  Swift::String v2 = (int *)type metadata accessor for Rope.Builder();
  uint64_t v3 = (char *)a1 + v2[9];
  uint64_t v4 = type metadata accessor for Rope._Node();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = (char *)a1 + v2[10];
  uint64_t v6 = type metadata accessor for Rope._Item();
  uint64_t v7 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  v7(v5, 1, 1, v6);
  v7((char *)a1 + v2[11], 1, 1, v6);
  uint64_t v8 = v2[12];
  uint64_t result = sub_24A5BB970();
  *(uint64_t *)((char *)a1 + v8) = result;
  return result;
}

uint64_t Rope.Builder._insertAfterTip(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v41 = type metadata accessor for Rope._Node();
  uint64_t v6 = sub_24A5BBD20();
  MEMORY[0x270FA5388](v6 - 8);
  uint8x8_t v40 = (uint64_t **)((char *)&v34 - v7);
  uint64_t v43 = type metadata accessor for Rope();
  uint64_t v38 = *(void *)(v43 - 8);
  MEMORY[0x270FA5388](v43);
  uint64_t v39 = (uint64_t)&v34 - v8;
  uint64_t v9 = type metadata accessor for Rope._Item();
  uint64_t v10 = sub_24A5BBD20();
  uint64_t v44 = *(void *)(v10 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v34 - v12;
  uint64_t v46 = *(void *)(v9 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  long long v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  uint64_t v19 = (char *)&v34 - v18;
  MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v34 - v20;
  if ((Rope._Item.isEmpty.getter(v9) & 1) == 0)
  {
    uint64_t v42 = a1;
    uint64_t v37 = v45 + *(int *)(a2 + 44);
    Optional._take()(v10, (uint64_t)v13);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v13, 1, v9) == 1)
    {
      uint64_t v24 = v44;
      (*(void (**)(char *, uint64_t))(v44 + 8))(v13, v10);
      uint64_t v25 = v42;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v21, v13, v9);
      uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(v46 + 16);
      v34(v19, v42, v9);
      if ((Rope._Item.isUndersized.getter(v9) & 1) != 0
        && (Rope._Item.rebalance(nextNeighbor:)((uint64_t)v21, v9) & 1) != 0)
      {
        unint64_t v26 = *(void (**)(char *, uint64_t))(v46 + 8);
        v26(v19, v9);
        v26(v21, v9);
        uint64_t v25 = v42;
        uint64_t v24 = v44;
      }
      else
      {
        uint64_t v35 = v10;
        uint64_t v36 = v19;
        long long v27 = (uint64_t *)(v45 + *(int *)(a2 + 48));
        uint64_t v47 = *v27;
        sub_24A5BB9F0();
        swift_getWitnessTable();
        if (sub_24A5BBBC0())
        {
          v34(v16, (uint64_t)v21, v9);
          int v28 = v40;
          static Rope._Node.createLeaf(_:)((uint64_t)v16, v4, v5, v40);
          (*(void (**)(uint64_t **, void, uint64_t))(*(void *)(v41 - 8) + 56))(v28, 0, 1);
          Rope.init(root:)((uint64_t)v28, v39);
          sub_24A5BB9D0();
        }
        else
        {
          uint64_t v29 = swift_bridgeObjectRetain();
          uint64_t v30 = v43;
          uint64_t v31 = MEMORY[0x24C5C6CE0](v29, v43);
          uint64_t result = swift_bridgeObjectRelease();
          if (__OFSUB__(v31, 1))
          {
            __break(1u);
            return result;
          }
          sub_24A5BB960();
          sub_24A4F299C(v31 - 1, *v27);
          sub_24A57F85C((uint64_t)v21, v30);
        }
        Swift::Int v32 = *(void (**)(char *, uint64_t))(v46 + 8);
        v32(v36, v9);
        v32(v21, v9);
        uint64_t v25 = v42;
        uint64_t v24 = v44;
        uint64_t v10 = v35;
      }
    }
    uint64_t v33 = v37;
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v37, v10);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 32))(v33, v25, v9);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v46 + 56))(v33, 0, 1, v9);
  }
  uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t))(v46 + 8);
  return v22(a1, v9);
}

{
  return sub_24A4F12DC(a1, a2, (void (*)(void))sub_24A4F2AE0, (uint64_t (*)(void, void, void))type metadata accessor for Rope._Node);
}

uint64_t Rope.Builder._insertBeforeTip(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Rope._Item();
  uint64_t v7 = sub_24A5BBD20();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v33 - v10;
  uint64_t v40 = *(void *)(v6 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v9);
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)&v33 - v16;
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v33 - v18;
  if (Rope._Item.isEmpty.getter(v6))
  {
    uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t))(v40 + 8);
    return v20(a1, v6);
  }
  else
  {
    uint64_t v38 = a1;
    uint64_t v39 = v8;
    uint64_t v22 = *(int *)(a2 + 40);
    uint64_t v37 = v3;
    uint64_t v23 = (char *)(v3 + v22);
    Optional._take()(v7, (uint64_t)v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v11, 1, v6) == 1)
    {
      uint64_t v24 = *(void (**)(char *, uint64_t))(v39 + 8);
      v24(v11, v7);
      v24(v23, v7);
      (*(void (**)(char *, uint64_t, uint64_t))(v40 + 32))(v23, v38, v6);
    }
    else
    {
      uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v40 + 32);
      uint64_t v35 = v40 + 32;
      uint64_t v36 = v23;
      uint64_t v34 = v25;
      v25(v19, v11, v6);
      uint64_t v26 = v38;
      uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v40 + 16);
      v33(v17, v38, v6);
      char v27 = Rope._Item.isUndersized.getter(v6);
      uint64_t v28 = v39;
      if ((v27 & 1) != 0 || (Rope._Item.isUndersized.getter(v6))
        && (Rope._Item.rebalance(nextNeighbor:)((uint64_t)v17, v6) & 1) != 0)
      {
        uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
        v29(v26, v6);
        v29((uint64_t)v17, v6);
        uint64_t v23 = v36;
        (*(void (**)(char *, uint64_t))(v28 + 8))(v36, v7);
        uint64_t v30 = v23;
        uint64_t v31 = v19;
      }
      else
      {
        v33(v14, (uint64_t)v19, v6);
        Rope.Builder._appendNow(_:)((uint64_t)v14, a2);
        Swift::Int v32 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
        v32(v26, v6);
        v32((uint64_t)v19, v6);
        uint64_t v23 = v36;
        (*(void (**)(char *, uint64_t))(v28 + 8))(v36, v7);
        uint64_t v30 = v23;
        uint64_t v31 = v17;
      }
      v34(v30, v31, v6);
    }
    return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v23, 0, 1, v6);
  }
}

uint64_t Rope.Builder.insertAfterTip(_:)(uint64_t a1, uint64_t a2)
{
  return sub_24A4E9388(a1, a2, (uint64_t (*)(char *, uint64_t))Rope.Builder._insertAfterTip(_:));
}

{
  return sub_24A4F12DC(a1, a2, (void (*)(void))sub_24A4F29F0, (uint64_t (*)(void, void, void))type metadata accessor for Rope);
}

uint64_t Rope.Builder.insertBeforeTip(_:)(uint64_t a1, uint64_t a2)
{
  return sub_24A4E9388(a1, a2, (uint64_t (*)(char *, uint64_t))Rope.Builder._insertBeforeTip(_:));
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  char *v17;
  void (*v18)(char *, uint64_t);
  BOOL v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  char *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v29 = a2;
  uint64_t v30 = *(void *)(a2 + 24);
  uint64_t v31 = v4;
  uint64_t v5 = type metadata accessor for Rope._Node();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v27 = (uint64_t *)((char *)&v25 - v7);
  uint64_t v8 = sub_24A5BBD20();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v26 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v25 - v12;
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v14((char *)&v25 - v12, a1, v8);
  uint64_t v28 = v6;
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  uint64_t v16 = v15(v13, 1, v5);
  uint64_t v17 = v13;
  uint64_t v18 = *(void (**)(char *, uint64_t))(v9 + 8);
  v18(v17, v8);
  uint64_t v19 = v16 == 1;
  uint64_t v20 = a1;
  if (v19) {
    goto LABEL_4;
  }
  uint64_t v21 = v26;
  v14(v26, v20, v8);
  if (v15(v21, 1, v5) != 1)
  {
    uint64_t v22 = v27;
    (*(void (**)(uint64_t *, char *, uint64_t))(v28 + 32))(v27, v21, v5);
    Rope.Builder._insertBeforeTip(_:)(v22, v29);
LABEL_4:
    uint64_t v23 = type metadata accessor for Rope();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8))(v20, v23);
  }
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v18)(v21, v8);
  __break(1u);
  return result;
}

uint64_t sub_24A4E9388(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, uint64_t))
{
  sub_24A4F2CE0(a1, a2, a3);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8);
  return v5(a1);
}

uint64_t Rope.Builder._insertBeforeTip(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v128 = a2;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v104 = type metadata accessor for Rope._Node._ModifyState();
  uint64_t v103 = *(void *)(v104 - 8);
  MEMORY[0x270FA5388](v104);
  uint64_t v102 = (uint64_t *)((char *)&v98 - v5);
  uint64_t v6 = type metadata accessor for Rope._Node();
  uint64_t v119 = sub_24A5BBD20();
  uint64_t v111 = *(void *)(v119 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v119);
  uint64_t v116 = (char *)&v98 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v101 = (uint64_t)&v98 - v10;
  MEMORY[0x270FA5388](v9);
  uint64_t v100 = (uint64_t)&v98 - v11;
  uint64_t v106 = v3;
  uint64_t v105 = v4;
  uint64_t v12 = type metadata accessor for Rope._Item();
  uint64_t v121 = sub_24A5BBD20();
  uint64_t v110 = *(void *)(v121 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v121);
  uint64_t v117 = (char *)&v98 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v107 = (uint64_t)&v98 - v16;
  uint64_t v126 = v12;
  uint64_t v125 = *(void *)(v12 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v108 = (char *)&v98 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v99 = (char *)&v98 - v20;
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v112 = (uint64_t)&v98 - v22;
  uint64_t v23 = *(void *)(v6 - 8);
  uint64_t v24 = MEMORY[0x270FA5388](v21);
  char v109 = (char *)&v98 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  uint64_t v28 = (char *)&v98 - v27;
  uint64_t v29 = MEMORY[0x270FA5388](v26);
  uint64_t v31 = (char *)&v98 - v30;
  uint64_t v32 = MEMORY[0x270FA5388](v29);
  uint64_t v34 = (uint64_t *)((char *)&v98 - v33);
  MEMORY[0x270FA5388](v32);
  uint64_t v36 = (uint64_t *)((char *)&v98 - v35);
  uint64_t v38 = v23 + 16;
  uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
  uint64_t v124 = a1;
  v37((char *)&v98 - v35, (uint64_t)a1, v6);
  v37((char *)v34, (uint64_t)v36, v6);
  LODWORD(v12) = Rope._Node.header.getter();
  uint64_t v122 = v23;
  uint64_t v40 = v23 + 8;
  uint64_t v39 = *(void (**)(uint64_t *, uint64_t))(v23 + 8);
  v39(v34, v6);
  uint64_t v120 = v34;
  if ((v12 & 0xFF0000) != 0)
  {
    uint64_t v41 = v6;
    uint64_t v113 = v38;
    int v114 = (void (*)(uint64_t *, uint64_t *, uint64_t))v37;
    uint64_t v118 = (void (*)(uint64_t, uint64_t))v39;
    uint64_t v115 = v40;
    uint64_t v123 = v36;
    uint64_t v42 = (uint64_t)v117;
    uint64_t v43 = v121;
    Optional._take()(v121, (uint64_t)v117);
    uint64_t v44 = v125;
    uint64_t v45 = v126;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v125 + 48))(v42, 1, v126) == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v42, v43);
    }
    else
    {
      uint64_t v52 = (uint64_t)v108;
      (*(void (**)(char *, uint64_t, uint64_t))(v44 + 32))(v108, v42, v45);
      if ((Rope._Item.isUndersized.getter(v45) & 1) == 0) {
        goto LABEL_10;
      }
      uint64_t v53 = v123;
      unint64_t started = Rope._Node._startPath.getter();
      uint64_t v55 = v102;
      Rope._Node._prepareModify(at:)(started, v41, v102);
      uint64_t v56 = v104;
      char v57 = Rope._Item.rebalance(prevNeighbor:)(v52, v45);
      sub_24A4FFDC8(v53, v55, v106, v105);
      (*(void (**)(void *, uint64_t))(v103 + 8))(v55, v56);
      if ((v57 & 1) == 0)
      {
LABEL_10:
        uint64_t v58 = v112;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 16))(v112, v52, v45);
        uint64_t v46 = v128;
        Rope.Builder._appendNow(_:)(v58, v128);
        (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v52, v45);
        goto LABEL_11;
      }
      (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v52, v45);
    }
    uint64_t v46 = v128;
LABEL_11:
    uint64_t v59 = v119;
    uint64_t v60 = v120;
    uint64_t v61 = (uint64_t)v116;
    Optional._take()(v119, (uint64_t)v116);
    uint64_t v62 = v122;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v122 + 48))(v61, 1, v41) == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v61, v59);
      uint64_t v63 = v118;
      uint64_t v64 = v114;
    }
    else
    {
      uint64_t v65 = v109;
      (*(void (**)(char *, uint64_t, uint64_t))(v62 + 32))(v109, v61, v41);
      uint64_t v64 = v114;
      v114(v60, (uint64_t *)v65, v41);
      Rope.Builder._appendNow(_:)(v60, v46);
      uint64_t v66 = v65;
      uint64_t v63 = v118;
      v118((uint64_t)v66, v41);
    }
    uint64_t v67 = v123;
    v64(v60, v123, v41);
    Rope.Builder._appendNow(_:)(v60, v46);
    v63((uint64_t)v124, v41);
    return ((uint64_t (*)(uint64_t *, uint64_t))v63)(v67, v41);
  }
  uint64_t v116 = v31;
  uint64_t v117 = v28;
  uint64_t v47 = v125;
  uint64_t v48 = v126;
  v37((char *)v34, (uint64_t)v36, v6);
  int v49 = (unsigned __int16)Rope._Node.header.getter();
  v39(v34, v6);
  if (v49 == 1)
  {
    uint64_t v50 = v112;
    Rope._Node.firstItem.getter(v6, v112);
    Rope.Builder._insertBeforeTip(_:)(v50, v128);
    v39(v124, v6);
    return ((uint64_t (*)(uint64_t *, uint64_t))v39)(v36, v6);
  }
  uint64_t v113 = v38;
  int v114 = (void (*)(uint64_t *, uint64_t *, uint64_t))v37;
  uint64_t v118 = (void (*)(uint64_t, uint64_t))v39;
  uint64_t v115 = v40;
  uint64_t v123 = v36;
  uint64_t v68 = v128;
  uint64_t v69 = v107;
  uint64_t v70 = v121;
  Optional._take()(v121, v107);
  uint64_t v71 = v47;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v69, 1, v48) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v69, v70);
    uint64_t v72 = v127;
    uint64_t v73 = v119;
    uint64_t v74 = v6;
  }
  else
  {
    int v75 = *(void (**)(char *, uint64_t, uint64_t))(v47 + 32);
    uint64_t v76 = v99;
    v75(v99, v69, v48);
    uint64_t v77 = v112;
    (*(void (**)(uint64_t, char *, uint64_t))(v71 + 16))(v112, v76, v48);
    uint64_t v78 = v100;
    uint64_t v79 = v77;
    uint64_t v74 = v6;
    unint64_t v80 = v123;
    Rope._Node.prepend(_:)(v79, v6, v100);
    uint64_t v81 = v122;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v122 + 48))(v78, 1, v74) != 1)
    {
      uint64_t v92 = (uint64_t)v116;
      (*(void (**)(char *, uint64_t, uint64_t))(v81 + 32))(v116, v78, v74);
      uint64_t v93 = v74;
      uint64_t v94 = v120;
      uint64_t v95 = (void (*)(uint64_t *, uint64_t, uint64_t))v114;
      v114(v120, v80, v93);
      Rope.Builder._insertBeforeTip(_:)(v94, v68);
      v95(v94, v92, v93);
      Rope.Builder._insertBeforeTip(_:)(v94, v68);
      uint64_t v96 = v118;
      v118((uint64_t)v124, v93);
      v96(v92, v93);
      (*(void (**)(char *, uint64_t))(v71 + 8))(v76, v48);
      return ((uint64_t (*)(uint64_t *, uint64_t))v96)(v123, v93);
    }
    (*(void (**)(char *, uint64_t))(v71 + 8))(v76, v48);
    uint64_t v73 = v119;
    (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v78, v119);
    uint64_t v72 = v127;
  }
  uint64_t v82 = (char *)(v72 + *(int *)(v68 + 36));
  uint64_t v83 = v101;
  Optional._take()(v73, v101);
  uint64_t v84 = v122;
  int v85 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v122 + 48))(v83, 1, v74);
  uint64_t v86 = v120;
  uint64_t v87 = (uint64_t)v117;
  if (v85 == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v83, v73);
  }
  else
  {
    uint64_t v88 = *(void (**)(char *, uint64_t, uint64_t))(v84 + 32);
    v88(v117, v83, v74);
    if ((Rope._Node.rebalance(nextNeighbor:)(v123) & 1) != 0 && !Rope._Node.isFull.getter())
    {
      uint64_t v97 = (void (*)(uint64_t *, uint64_t))v118;
      v118((uint64_t)v124, v74);
      v97(v123, v74);
      (*(void (**)(char *, uint64_t))(v111 + 8))(v82, v73);
      v88(v82, v87, v74);
      return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v122 + 56))(v82, 0, 1, v74);
    }
    v114(v86, (uint64_t *)v87, v74);
    uint64_t v68 = v128;
    Rope.Builder._appendNow(_:)(v86, v128);
    v118(v87, v74);
  }
  uint64_t v89 = v123;
  if (Rope._Node.isFull.getter())
  {
    v114(v86, v89, v74);
    Rope.Builder._appendNow(_:)(v86, v68);
    uint64_t v90 = (uint64_t (*)(uint64_t *, uint64_t))v118;
    v118((uint64_t)v124, v74);
    return v90(v89, v74);
  }
  else
  {
    v118((uint64_t)v124, v74);
    (*(void (**)(char *, uint64_t))(v111 + 8))(v82, v73);
    uint64_t v91 = v122;
    (*(void (**)(char *, uint64_t *, uint64_t))(v122 + 32))(v82, v89, v74);
    return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v91 + 56))(v82, 0, 1, v74);
  }
}

uint64_t Rope.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v71 = a6;
  uint64_t v72 = a1;
  uint64_t v69 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v65 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_24A5BBD20();
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v64 = (char *)&v54 - v12;
  uint64_t v73 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v67 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v76 = (char *)&v54 - v13;
  uint64_t v68 = type metadata accessor for Rope.Builder();
  uint64_t v66 = *(void *)(v68 - 8);
  MEMORY[0x270FA5388](v68);
  int v75 = (uint64_t *)((char *)&v54 - v14);
  uint64_t v15 = type metadata accessor for Rope();
  uint64_t v16 = sub_24A5BBD20();
  uint64_t v60 = *(void *)(v16 - 8);
  uint64_t v61 = v16;
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v54 - v18;
  uint64_t v20 = *(void *)(a3 - 8);
  uint64_t v21 = MEMORY[0x270FA5388](v17);
  uint64_t v59 = (char *)&v54 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  uint64_t v25 = (char *)&v54 - v24;
  uint64_t v70 = *(void *)(v15 - 8);
  uint64_t v26 = MEMORY[0x270FA5388](v23);
  uint64_t v28 = (char *)&v54 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v26);
  uint64_t v30 = (char *)&v54 - v29;
  uint64_t v62 = a2;
  uint64_t v63 = a4;
  uint64_t v31 = type metadata accessor for Rope._Node();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v71, 1, 1, v31);
  uint64_t v58 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  v58(v25, v72, a3);
  uint64_t v32 = v70;
  char v33 = swift_dynamicCast();
  uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56);
  if (v33)
  {
    v34(v19, 0, 1, v15);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v72, a3);
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
    v35(v30, v19, v15);
    v35(v28, v30, v15);
    uint64_t v36 = sub_24A5BBD20();
    uint64_t v37 = v71;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v36 - 8) + 8))(v71, v36);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v35)(v37, v28, v15);
  }
  else
  {
    uint64_t v54 = v31;
    uint64_t v55 = v20;
    uint64_t v56 = v28;
    uint64_t v57 = v15;
    v34(v19, 1, 1, v15);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v19, v61);
    uint64_t v39 = v62;
    Rope.Builder.init()(v75);
    v58(v59, v72, a3);
    sub_24A5BB840();
    uint64_t v63 = a3;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v41 = v64;
    uint64_t v73 = AssociatedConformanceWitness;
    sub_24A5BBEE0();
    uint64_t v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v69 + 48);
    int v43 = v42(v41, 1, v39);
    uint64_t v44 = (uint64_t)v65;
    uint64_t v45 = v68;
    if (v43 != 1)
    {
      uint64_t v46 = *(void (**)(uint64_t, char *, uint64_t))(v69 + 32);
      uint64_t v47 = (void (**)(uint64_t, uint64_t))(v69 + 8);
      do
      {
        v46(v44, v41, v39);
        sub_24A4F2CE0(v44, v45, (uint64_t (*)(char *, uint64_t))Rope.Builder._insertBeforeTip(_:));
        (*v47)(v44, v39);
        sub_24A5BBEE0();
      }
      while (v42(v41, 1, v39) != 1);
    }
    (*(void (**)(char *, uint64_t))(v67 + 8))(v76, AssociatedTypeWitness);
    uint64_t v48 = (uint64_t)v56;
    uint64_t v49 = v45;
    uint64_t v50 = v45;
    uint64_t v51 = v75;
    Rope.Builder.finalize()(v49, (uint64_t)v56);
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v72, v63);
    (*(void (**)(uint64_t *, uint64_t))(v66 + 8))(v51, v50);
    uint64_t v52 = sub_24A5BBD20();
    uint64_t v53 = v71;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(v71, v52);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v70 + 32))(v53, v48, v57);
  }
}

uint64_t Rope.Builder.finalize()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v119 = a2;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = type metadata accessor for Rope();
  uint64_t v123 = sub_24A5BBD20();
  uint64_t v126 = *(void *)(v123 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v123);
  uint64_t v133 = (char *)&v104 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v132 = (char *)&v104 - v10;
  uint64_t v122 = v6;
  uint64_t v131 = *(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v115 = (char *)&v104 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v127 = (uint64_t)&v104 - v14;
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint8x8_t v129 = (char *)&v104 - v16;
  MEMORY[0x270FA5388](v15);
  uint64_t v128 = (char *)&v104 - v17;
  uint64_t v105 = type metadata accessor for Rope._Node();
  uint64_t v110 = sub_24A5BBD20();
  uint64_t v18 = MEMORY[0x270FA5388](v110);
  uint64_t v117 = (uint64_t **)((char *)&v104 - v19);
  uint64_t v107 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v106 = (char *)&v104 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = v4;
  uint64_t v118 = v5;
  uint64_t v21 = type metadata accessor for Rope._Item();
  uint64_t v22 = sub_24A5BBD20();
  uint64_t v121 = *(void *)(v22 - 8);
  uint64_t v23 = MEMORY[0x270FA5388](v22);
  uint64_t v112 = (uint64_t)&v104 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  uint64_t v27 = (char *)&v104 - v26;
  uint64_t v28 = MEMORY[0x270FA5388](v25);
  uint64_t v30 = (char *)&v104 - v29;
  uint64_t v31 = *(void *)(v21 - 8);
  uint64_t v32 = MEMORY[0x270FA5388](v28);
  char v109 = (char *)&v104 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = MEMORY[0x270FA5388](v32);
  uint64_t v130 = (uint64_t)&v104 - v35;
  uint64_t v36 = MEMORY[0x270FA5388](v34);
  uint64_t v38 = (char *)&v104 - v37;
  uint64_t v39 = MEMORY[0x270FA5388](v36);
  uint64_t v41 = (char *)&v104 - v40;
  uint64_t v42 = v2;
  Optional._take()(v39, (uint64_t)v30);
  uint64_t v124 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
  uint64_t v125 = v31 + 48;
  int v43 = v124(v30, 1, v21);
  uint64_t v120 = v31;
  if (v43 == 1)
  {
    uint64_t v44 = v121;
    (*(void (**)(char *, uint64_t))(v121 + 8))(v30, v22);
    uint64_t v45 = a1;
    uint64_t v46 = v21;
    uint64_t v47 = v44;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v41, v30, v21);
    (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v38, v41, v21);
    Rope.Builder._insertBeforeTip(_:)((uint64_t)v38, a1);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v41, v21);
    uint64_t v45 = a1;
    uint64_t v46 = v21;
    uint64_t v47 = v121;
  }
  uint64_t v108 = v38;
  uint64_t v48 = v42 + *(int *)(v45 + 40);
  Optional._take()(v22, (uint64_t)v27);
  int v49 = v124(v27, 1, v46);
  uint64_t v114 = v46;
  uint64_t v113 = v22;
  uint64_t v111 = v48;
  if (v49 == 1)
  {
    (*(void (**)(char *, uint64_t))(v47 + 8))(v27, v22);
LABEL_18:
    uint64_t v71 = v131;
    uint64_t v70 = v132;
    uint64_t v73 = v122;
    goto LABEL_19;
  }
  uint64_t v50 = v120;
  uint64_t v51 = v130;
  (*(void (**)(uint64_t, char *, uint64_t))(v120 + 32))(v130, v27, v46);
  if ((Rope._Item.isUndersized.getter(v46) & 1) == 0)
  {
    uint64_t v62 = (uint64_t)v108;
    (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v108, v51, v46);
    Rope.Builder._appendNow(_:)(v62, v45);
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v51, v46);
    goto LABEL_18;
  }
  uint64_t v52 = v107;
  uint64_t v53 = v106;
  uint64_t v104 = *(void (**)(char *, uint64_t, uint64_t))(v107 + 16);
  v104(v106, v42, v45);
  uint64_t v54 = v52;
  LOBYTE(v52) = Rope.Builder.isPrefixEmpty.getter(v45);
  uint64_t v55 = *(void (**)(char *, uint64_t))(v54 + 8);
  v55(v53, v45);
  if ((v52 & 1) == 0)
  {
    uint64_t v63 = Rope.Builder._lastPrefixItem.modify(&v135, v45);
    uint64_t v64 = v130;
    char v65 = Rope._Item.rebalance(nextNeighbor:)(v130, v46);
    ((void (*)(uint64_t *, void))v63)(&v135, 0);
    if (v65)
    {
      uint64_t v66 = v120;
    }
    else
    {
      uint64_t v75 = v120;
      uint64_t v76 = (uint64_t)v108;
      (*(void (**)(char *, uint64_t, uint64_t))(v120 + 16))(v108, v64, v46);
      Rope.Builder._appendNow(_:)(v76, v45);
      uint64_t v66 = v75;
    }
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v64, v46);
    goto LABEL_18;
  }
  v104(v53, v42, v45);
  char v56 = Rope.Builder.isSuffixEmpty.getter(v45);
  v55(v53, v45);
  if (v56)
  {
    uint64_t v57 = v120;
    uint64_t v58 = (uint64_t)v108;
    uint64_t v59 = v130;
    (*(void (**)(char *, uint64_t, uint64_t))(v120 + 16))(v108, v130, v46);
    uint64_t v60 = v117;
    static Rope._Node.createLeaf(_:)(v58, v116, v118, v117);
    (*(void (**)(uint64_t **, void, uint64_t))(*(void *)(v105 - 8) + 56))(v60, 0, 1);
    Rope.init(root:)((uint64_t)v60, v119);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v57 + 8))(v59, v46);
  }
  uint64_t v67 = Rope.Builder._firstSuffixItem.modify(&v135, v45);
  uint64_t v68 = v130;
  char v69 = Rope._Item.rebalance(prevNeighbor:)(v130, v46);
  ((void (*)(uint64_t *, void))v67)(&v135, 0);
  uint64_t v71 = v131;
  uint64_t v70 = v132;
  uint64_t v72 = v120;
  uint64_t v73 = v122;
  if ((v69 & 1) == 0)
  {
    uint64_t v74 = (uint64_t)v108;
    (*(void (**)(char *, uint64_t, uint64_t))(v120 + 16))(v108, v68, v46);
    Rope.Builder._appendNow(_:)(v74, v45);
  }
  (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v68, v46);
LABEL_19:
  uint64_t v130 = v45;
  uint64_t v77 = *(int *)(v45 + 48);
  uint64_t v134 = v42;
  uint64_t v132 = (char *)(v42 + v77);
  uint64_t v78 = sub_24A5BB9F0();
  uint64_t v79 = (unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 6);
  uint64_t v131 = v71 + 4;
  unint64_t v80 = (void (**)(char *, char *, uint64_t))(v71 + 2);
  for (uint64_t i = (void (**)(uint64_t, uint64_t))(v71 + 1); ; (*i)((uint64_t)v85, v73))
  {
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v83 = swift_getWitnessTable();
    MEMORY[0x24C5C6FB0](v78, WitnessTable, v83);
    uint64_t v84 = *v79;
    if ((*v79)(v70, 1, v73) == 1) {
      break;
    }
    int v85 = v128;
    (*v131)((uint64_t)v128, (uint64_t)v70, v73);
    uint64_t v86 = (uint64_t)v129;
    (*v80)(v129, v85, v73);
    Rope.Builder.insertBeforeTip(_:)(v86, v130);
  }
  uint64_t v87 = v126 + 8;
  uint8x8_t v129 = *(char **)(v126 + 8);
  ((void (*)(char *, uint64_t))v129)(v70, v123);
  uint64_t v88 = v112;
  uint64_t v89 = v113;
  Optional._take()(v113, v112);
  uint64_t v90 = v88;
  uint64_t v91 = v88;
  uint64_t v92 = v114;
  int v93 = v124((char *)v91, 1, v114);
  uint64_t v126 = v87;
  if (v93 == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v121 + 8))(v90, v89);
  }
  else
  {
    uint64_t v94 = v120;
    uint64_t v95 = v109;
    (*(void (**)(char *, uint64_t, uint64_t))(v120 + 32))(v109, v90, v92);
    uint64_t v96 = (uint64_t)v108;
    (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v108, v95, v92);
    Rope.Builder._appendNow(_:)(v96, v130);
    (*(void (**)(char *, uint64_t))(v94 + 8))(v109, v92);
  }
  uint64_t v97 = v117;
  Optional._take()(v110, (uint64_t)v117);
  Rope.init(root:)((uint64_t)v97, v127);
  uint64_t v98 = v133;
  MEMORY[0x24C5C6FB0](v78, WitnessTable, v83);
  uint64_t v99 = v98;
  uint64_t v100 = v122;
  unsigned int v101 = v84(v98, 1, v122);
  uint64_t v102 = (uint64_t)v115;
  uint64_t v103 = v131;
  if (v101 != 1)
  {
    uint64_t v132 = (char *)*v131;
    do
    {
      ((void (*)(uint64_t, char *, uint64_t))v132)(v102, v99, v100);
      sub_24A4CF680(v102, v100);
      (*i)(v102, v100);
      MEMORY[0x24C5C6FB0](v78, WitnessTable, v83);
      uint64_t v99 = v133;
    }
    while (v84(v133, 1, v100) != 1);
  }
  ((void (*)(char *, uint64_t))v129)(v99, v123);
  return (*v103)(v119, v127, v100);
}

uint64_t Rope.Builder._prefixTrees.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Rope.Builder._prefixTrees.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *Swift::String v1 = a1;
  return result;
}

uint64_t (*Rope.Builder._prefixTrees.modify())()
{
  return nullsub_1;
}

uint64_t Rope.Builder._prefixLeaf.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 36);
  type metadata accessor for Rope._Node();
  uint64_t v5 = sub_24A5BBD20();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t Rope.Builder._prefixLeaf.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 36);
  type metadata accessor for Rope._Node();
  uint64_t v5 = sub_24A5BBD20();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*Rope.Builder._prefixLeaf.modify())()
{
  return nullsub_1;
}

uint64_t Rope.Builder._prefix.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 40);
  type metadata accessor for Rope._Item();
  uint64_t v5 = sub_24A5BBD20();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t Rope.Builder._prefix.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 40);
  type metadata accessor for Rope._Item();
  uint64_t v5 = sub_24A5BBD20();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*Rope.Builder._prefix.modify())()
{
  return nullsub_1;
}

uint64_t Rope.Builder._suffix.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 44);
  type metadata accessor for Rope._Item();
  uint64_t v5 = sub_24A5BBD20();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t Rope.Builder._suffix.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 44);
  type metadata accessor for Rope._Item();
  uint64_t v5 = sub_24A5BBD20();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*Rope.Builder._suffix.modify())()
{
  return nullsub_1;
}

uint64_t Rope.Builder._suffixTrees.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Rope.Builder._suffixTrees.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(a2 + 48);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + v4) = a1;
  return result;
}

uint64_t (*Rope.Builder._suffixTrees.modify())()
{
  return nullsub_1;
}

uint64_t Rope.Builder.isPrefixEmpty.getter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Rope._Node();
  uint64_t v4 = sub_24A5BBD20();
  uint64_t v26 = *(void *)(v4 - 8);
  uint64_t v27 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v24 = (char *)&v24 - v6;
  uint64_t v25 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v24 - v7;
  uint64_t v9 = type metadata accessor for Rope._Item();
  uint64_t v10 = sub_24A5BBD20();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v24 - v12;
  uint64_t v14 = *(int *)(a1 + 40);
  uint64_t v28 = v1;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, (char *)v1 + v14, v10);
  LODWORD(v9) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v13, 1, v9);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  if (v9 != 1) {
    goto LABEL_6;
  }
  uint64_t v15 = v27;
  uint64_t v16 = v28;
  uint64_t v17 = (char *)v28 + *(int *)(a1 + 36);
  uint64_t v18 = v26;
  uint64_t v19 = v24;
  (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v24, v17, v27);
  uint64_t v20 = v25;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v19, 1, v3) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v8, v19, v3);
    BOOL v21 = Rope._Node.isEmpty.getter();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v8, v3);
    if (v21) {
      goto LABEL_5;
    }
LABEL_6:
    char v22 = 0;
    return v22 & 1;
  }
  (*(void (**)(char *, uint64_t))(v18 + 8))(v19, v15);
LABEL_5:
  uint64_t v29 = *v16;
  type metadata accessor for Rope();
  sub_24A5BB9F0();
  swift_getWitnessTable();
  char v22 = sub_24A5BBBC0();
  return v22 & 1;
}

uint64_t Rope.Builder.isSuffixEmpty.getter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Rope._Item();
  uint64_t v4 = sub_24A5BBD20();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v10 - v6;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)v10 - v6, v1 + *(int *)(a1 + 44), v4);
  LODWORD(v3) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v7, 1, v3);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (v3 == 1)
  {
    v10[1] = *(void *)(v1 + *(int *)(a1 + 48));
    type metadata accessor for Rope();
    sub_24A5BB9F0();
    swift_getWitnessTable();
    char v8 = sub_24A5BBBC0();
  }
  else
  {
    char v8 = 0;
  }
  return v8 & 1;
}

uint64_t Rope.Builder.prefixSummary.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v73 = a2;
  uint64_t v61 = a1;
  uint64_t v2 = type metadata accessor for Rope._Item();
  uint64_t v62 = sub_24A5BBD20();
  uint64_t v54 = *(void *)(v62 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](v62);
  uint64_t v53 = (char *)&v49 - v4;
  uint64_t v5 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v52 = (char *)&v49 - v6;
  uint64_t v7 = type metadata accessor for Rope._Node();
  uint64_t v8 = sub_24A5BBD20();
  uint64_t v56 = *(void *)(v8 - 8);
  uint64_t v57 = v8;
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v55 = (char *)&v49 - v10;
  uint64_t v59 = v7;
  uint64_t v58 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v51 = (char *)&v49 - v11;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v70 = (char *)&v49 - v14;
  uint64_t v15 = type metadata accessor for Rope();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = v18;
  MEMORY[0x270FA5388](v17);
  uint64_t v74 = (char *)&v49 - v20;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  char v22 = *(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32);
  uint64_t v72 = AssociatedTypeWitness;
  v22(AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v23 = *(void *)v64;
  uint64_t v24 = swift_bridgeObjectRetain();
  uint64_t v25 = MEMORY[0x24C5C6D00](v24, v15);
  uint64_t v63 = v5;
  uint64_t v60 = v13;
  uint64_t v71 = AssociatedConformanceWitness;
  if (v25)
  {
    uint64_t v50 = v2;
    uint64_t v26 = 0;
    uint64_t v67 = *(void (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 48);
    uint64_t v68 = AssociatedConformanceWitness + 48;
    char v69 = (void (**)(char *, uint64_t *, uint64_t))(v16 + 16);
    char v65 = (void (**)(uint64_t, uint64_t))(v13 + 8);
    uint64_t v66 = (void (**)(char *, char *, uint64_t))(v16 + 32);
    uint64_t v27 = (uint64_t)v70;
    uint64_t v28 = v72;
    while (1)
    {
      char v29 = sub_24A5BB9B0();
      sub_24A5BB940();
      if (v29)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(v74, v23+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(void *)(v16 + 72) * v26, v15);
        uint64_t v30 = v26 + 1;
        if (__OFADD__(v26, 1)) {
          goto LABEL_10;
        }
      }
      else
      {
        uint64_t result = sub_24A5BC0A0();
        if (v49 != 8)
        {
          __break(1u);
          return result;
        }
        uint64_t v75 = result;
        (*v69)(v74, &v75, v15);
        swift_unknownObjectRelease();
        uint64_t v30 = v26 + 1;
        if (__OFADD__(v26, 1))
        {
LABEL_10:
          __break(1u);
LABEL_11:
          swift_bridgeObjectRelease();
          uint64_t v2 = v50;
          uint64_t v32 = v62;
          goto LABEL_13;
        }
      }
      (*v66)(v19, v74, v15);
      Rope.summary.getter(v15, v27);
      v67(v27, v28, v71);
      (*v65)(v27, v28);
      (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
      ++v26;
      if (v30 == MEMORY[0x24C5C6D00](v23, v15)) {
        goto LABEL_11;
      }
    }
  }
  uint64_t v32 = v62;
  swift_bridgeObjectRelease();
LABEL_13:
  uint64_t v33 = v61;
  uint64_t v34 = v64;
  uint64_t v36 = v55;
  uint64_t v35 = v56;
  uint64_t v37 = v57;
  (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v55, &v64[*(int *)(v61 + 36)], v57);
  uint64_t v39 = v58;
  uint64_t v38 = v59;
  int v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v58 + 48))(v36, 1, v59);
  uint64_t v41 = v60;
  if (v40 == 1)
  {
    (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v37);
  }
  else
  {
    uint64_t v42 = v51;
    (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v51, v36, v38);
    (*(void (**)(char *, uint64_t))(v71 + 48))(&v42[*(int *)(v38 + 36)], v72);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v42, v38);
  }
  uint64_t v43 = v54;
  uint64_t v44 = v53;
  (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v53, &v34[*(int *)(v33 + 40)], v32);
  uint64_t v45 = v63;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v44, 1, v2) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v44, v32);
  }
  uint64_t v46 = v52;
  (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v52, v44, v2);
  uint64_t v47 = v70;
  Rope._Item.summary.getter(v2);
  uint64_t v48 = v72;
  (*(void (**)(char *, uint64_t))(v71 + 48))(v47, v72);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v47, v48);
  return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v46, v2);
}

uint64_t Rope.Builder.suffixSummary.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v48 = a2;
  uint64_t v3 = type metadata accessor for Rope();
  uint64_t v46 = *(void *)(v3 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  uint64_t v43 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = v5;
  MEMORY[0x270FA5388](v4);
  uint64_t v49 = (char *)&v37 - v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v41 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v47 = (char *)&v37 - v8;
  uint64_t v9 = type metadata accessor for Rope._Item();
  uint64_t v10 = sub_24A5BBD20();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v37 - v13;
  uint64_t v15 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v39 = (char *)&v37 - v16;
  uint64_t v17 = AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(v17, AssociatedConformanceWitness);
  uint64_t v19 = v10;
  uint64_t v20 = v47;
  uint64_t v42 = a1;
  uint64_t v21 = *(int *)(a1 + 44);
  char v22 = v40;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, &v40[v21], v19);
  int v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, v9);
  uint64_t v44 = v17;
  uint64_t v45 = AssociatedConformanceWitness;
  if (v23 == 1)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v19);
    uint64_t v24 = v41;
  }
  else
  {
    uint64_t v25 = v39;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v39, v14, v9);
    Rope._Item.summary.getter(v9);
    (*(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(v20, v17, AssociatedConformanceWitness);
    uint64_t v24 = v41;
    (*(void (**)(char *, uint64_t))(v41 + 8))(v20, v17);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v25, v9);
  }
  uint64_t v26 = *(void *)&v22[*(int *)(v42 + 48)];
  uint64_t v27 = swift_bridgeObjectRetain();
  if (!MEMORY[0x24C5C6D00](v27, v3)) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v28 = 0;
  uint64_t v29 = v44;
  int v40 = *(char **)(v45 + 48);
  uint64_t v41 = v45 + 48;
  uint64_t v30 = (uint64_t)v47;
  uint64_t v42 = v46 + 16;
  uint64_t v39 = (char *)(v46 + 32);
  uint64_t v31 = (void (**)(uint64_t, uint64_t))(v24 + 8);
  uint64_t v32 = (void (**)(char *, uint64_t))(v46 + 8);
  uint64_t v33 = v43;
  while (1)
  {
    char v34 = sub_24A5BB9B0();
    sub_24A5BB940();
    if (v34)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v46 + 16))(v49, v26+ ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80))+ *(void *)(v46 + 72) * v28, v3);
      uint64_t v35 = v28 + 1;
      if (__OFADD__(v28, 1)) {
        goto LABEL_13;
      }
      goto LABEL_8;
    }
    uint64_t result = sub_24A5BC0A0();
    if (v38 != 8) {
      break;
    }
    uint64_t v50 = result;
    (*(void (**)(char *, uint64_t *, uint64_t))v42)(v49, &v50, v3);
    swift_unknownObjectRelease();
    uint64_t v35 = v28 + 1;
    if (__OFADD__(v28, 1))
    {
LABEL_13:
      __break(1u);
      return swift_bridgeObjectRelease();
    }
LABEL_8:
    (*(void (**)(char *, char *, uint64_t))v39)(v33, v49, v3);
    Rope.summary.getter(v3, v30);
    ((void (*)(uint64_t, uint64_t, uint64_t))v40)(v30, v29, v45);
    (*v31)(v30, v29);
    (*v32)(v33, v3);
    ++v28;
    if (v35 == MEMORY[0x24C5C6D00](v26, v3)) {
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
  return result;
}

uint64_t Rope.Builder._lastPrefixItem.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v46 = a2;
  uint64_t v42 = type metadata accessor for Rope();
  uint64_t v4 = sub_24A5BBD20();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v41 = (char *)&v38 - v5;
  uint64_t v6 = type metadata accessor for Rope._Node();
  uint64_t v7 = sub_24A5BBD20();
  uint64_t v44 = *(void *)(v7 - 8);
  uint64_t v45 = v7;
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  int v40 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v38 - v11;
  uint64_t v43 = *(void *)(v6 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  uint64_t v39 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v38 - v15;
  uint64_t v17 = type metadata accessor for Rope._Item();
  uint64_t v18 = sub_24A5BBD20();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v38 - v20;
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))((char *)&v38 - v20, &v2[*(int *)(a1 + 40)], v18);
  uint64_t v22 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v21, 1, v17) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v22 + 32))(v46, v21, v17);
  }
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  uint64_t v23 = v44;
  uint64_t v24 = (char *)(v44 + 16);
  uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v44 + 16);
  v25(v12, &v2[*(int *)(a1 + 36)], v45);
  uint64_t v26 = v43;
  uint64_t v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v43 + 48);
  if (v27(v12, 1, v6) == 1)
  {
    uint64_t v28 = v26;
    uint64_t v29 = *(uint64_t (**)(char *, uint64_t))(v23 + 8);
    uint64_t v44 = v23 + 8;
    uint64_t v38 = v29;
    v29(v12, v45);
    uint64_t v47 = *(void *)v2;
    uint64_t v30 = v42;
    sub_24A5BB9F0();
    swift_getWitnessTable();
    uint64_t v31 = v41;
    sub_24A5BB3A0();
    uint64_t v32 = *(void *)(v30 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v31, 1, v30) == 1)
    {
      __break(1u);
    }
    else
    {
      uint64_t v33 = v40;
      v25(v40, v31, v45);
      uint64_t v24 = v33;
      int v34 = v27(v33, 1, v6);
      uint64_t v35 = v46;
      if (v34 != 1)
      {
        uint64_t v36 = v39;
        (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v39, v24, v6);
        (*(void (**)(char *, uint64_t))(v32 + 8))(v31, v30);
        Rope._Node.lastItem.getter(v6, v35);
        return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v36, v6);
      }
    }
    uint64_t result = v38(v24, v45);
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v16, v12, v6);
    Rope._Node.lastItem.getter(v6, v46);
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v16, v6);
  }
  return result;
}

void (*Rope.Builder._lastPrefixItem.modify(void *a1, uint64_t a2))(void ***a1)
{
  uint64_t v5 = malloc(0xA8uLL);
  *a1 = v5;
  uint64_t v6 = type metadata accessor for Rope._Item();
  uint64_t v7 = sub_24A5BBD20();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = malloc(*(void *)(v8 + 64));
  uint64_t v20 = v5;
  v5[16] = v9;
  uint64_t v10 = (void *)(v2 + *(int *)(a2 + 40));
  (*(void (**)(void))(v8 + 16))();
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48);
  LODWORD(a1) = v11(v9, 1, v6);
  (*(void (**)(void *, uint64_t))(v8 + 8))(v9, v7);
  if (a1 != 1)
  {
    uint64_t result = (void (*)(void ***))v11(v10, 1, v6);
    if (result != 1) {
      return (void (*)(void ***))sub_24A4ED480;
    }
    goto LABEL_12;
  }
  uint64_t v12 = v2 + *(int *)(a2 + 36);
  uint64_t v13 = type metadata accessor for Rope._Node();
  uint64_t v14 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
  if (v14(v12, 1, v13) || Rope._Node.isEmpty.getter())
  {
    uint64_t v15 = type metadata accessor for Rope();
    uint64_t v16 = swift_bridgeObjectRetain();
    uint64_t v17 = MEMORY[0x24C5C6CE0](v16, v15);
    uint64_t result = (void (*)(void ***))swift_bridgeObjectRelease();
    if (!__OFSUB__(v17, 1))
    {
      sub_24A5BB9F0();
      v20[18] = sub_24A5BBA10();
      v20[19] = Rope.root.modify();
      v20[20] = Rope._Node.lastItem.modify(v20 + 8, v13);
      return sub_24A4ED510;
    }
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t result = (void (*)(void ***))((uint64_t (*)(uint64_t, uint64_t, uint64_t))v14)(v12, 1, v13);
  if (result != 1)
  {
    v20[17] = Rope._Node.lastItem.modify(v20 + 12, v13);
    return sub_24A4ED4BC;
  }
LABEL_13:
  __break(1u);
  return result;
}

void sub_24A4ED480(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  free(*(void **)(*(void *)a1 + 128));
  free(v1);
}

void sub_24A4ED4BC(void ***a1)
{
  uint64_t v1 = *a1;
  ((void (*)(void))(*a1)[17])();
  free(v1[16]);
  free(v1);
}

void sub_24A4ED510(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t)(*a1 + 4);
  uint64_t v3 = (void (*)(uint64_t, void))(*a1)[19];
  uint64_t v4 = (void (*)(void **, void))(*a1)[18];
  ((void (*)(void))(*a1)[20])();
  v3(v2, 0);
  v4(v1, 0);
  free(v1[16]);
  free(v1);
}

uint64_t Rope.Builder._lastPrefixItem.setter(uint64_t a1, uint64_t a2)
{
  return sub_24A4EDD0C(a1, a2, (uint64_t (*)(unsigned char *))Rope.Builder._lastPrefixItem.modify);
}

uint64_t Rope.Builder._firstSuffixItem.getter@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v32 = a2;
  uint64_t v4 = type metadata accessor for Rope._Node();
  uint64_t v5 = sub_24A5BBD20();
  uint64_t v29 = *(char **)(v5 - 8);
  uint64_t v30 = v5;
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v28 = (char *)&v25 - v7;
  uint64_t v31 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v27 = (char *)&v25 - v8;
  uint64_t v9 = type metadata accessor for Rope();
  uint64_t v26 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v25 - v10;
  uint64_t v12 = type metadata accessor for Rope._Item();
  uint64_t v13 = sub_24A5BBD20();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v25 - v15;
  uint64_t v17 = v2;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v25 - v15, v2 + *((int *)a1 + 11), v13);
  uint64_t v18 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v12) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v18 + 32))(v32, v16, v12);
  }
  uint64_t v19 = v32;
  uint64_t v21 = *(void (**)(char *, uint64_t))(v14 + 8);
  uint64_t v20 = v14 + 8;
  v21(v16, v13);
  if (__OFSUB__(MEMORY[0x24C5C6CE0](*(void *)(v17 + *((int *)a1 + 12)), v9), 1))
  {
    __break(1u);
  }
  else
  {
    sub_24A5BBA20();
    a1 = v28;
    uint64_t v16 = v29;
    uint64_t v20 = v30;
    (*((void (**)(char *, char *, uint64_t))v29 + 2))(v28, v11, v30);
    uint64_t v22 = v31;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(a1, 1, v4) != 1)
    {
      uint64_t v23 = v27;
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v27, a1, v4);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v9);
      Rope._Node.firstItem.getter(v4, v19);
      return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v23, v4);
    }
  }
  uint64_t result = (*((uint64_t (**)(char *, uint64_t))v16 + 1))(a1, v20);
  __break(1u);
  return result;
}

void (*Rope.Builder._firstSuffixItem.modify(void *a1, uint64_t a2))(uint64_t a1)
{
  uint64_t v5 = malloc(0x80uLL);
  *a1 = v5;
  uint64_t v6 = type metadata accessor for Rope._Item();
  uint64_t v7 = sub_24A5BBD20();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = malloc(*(void *)(v8 + 64));
  uint64_t v18 = v5;
  v5[12] = v9;
  uint64_t v10 = (void *)(v2 + *(int *)(a2 + 44));
  (*(void (**)(void))(v8 + 16))();
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48);
  LODWORD(a1) = v11(v9, 1, v6);
  (*(void (**)(void *, uint64_t))(v8 + 8))(v9, v7);
  if (a1 == 1)
  {
    uint64_t v12 = type metadata accessor for Rope();
    uint64_t v13 = swift_bridgeObjectRetain();
    uint64_t v14 = MEMORY[0x24C5C6CE0](v13, v12);
    uint64_t result = (void (*)(uint64_t))swift_bridgeObjectRelease();
    if (!__OFSUB__(v14, 1))
    {
      sub_24A5BB9F0();
      v18[13] = sub_24A5BBA10();
      v18[14] = Rope.root.modify();
      uint64_t v16 = type metadata accessor for Rope._Node();
      v18[15] = Rope._Node.firstItem.modify(v18 + 8, v16);
      return (void (*)(uint64_t))sub_24A4EDC68;
    }
    __break(1u);
  }
  else
  {
    uint64_t result = (void (*)(uint64_t))v11(v10, 1, v6);
    if (result != 1) {
      return sub_24A4EDC2C;
    }
  }
  __break(1u);
  return result;
}

void sub_24A4EDC2C(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  free(*(void **)(*(void *)a1 + 96));
  free(v1);
}

void sub_24A4EDC68(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t)(*a1 + 4);
  uint64_t v3 = (void (*)(uint64_t, void))(*a1)[14];
  uint64_t v4 = (void (*)(void **, void))(*a1)[13];
  ((void (*)(void))(*a1)[15])();
  v3(v2, 0);
  v4(v1, 0);
  free(v1[12]);
  free(v1);
}

uint64_t Rope.Builder._firstSuffixItem.setter(uint64_t a1, uint64_t a2)
{
  return sub_24A4EDD0C(a1, a2, (uint64_t (*)(unsigned char *))Rope.Builder._firstSuffixItem.modify);
}

uint64_t sub_24A4EDD0C(uint64_t a1, uint64_t a2, uint64_t (*a3)(unsigned char *))
{
  uint64_t v4 = (void (*)(unsigned char *, void))a3(v10);
  uint64_t v6 = v5;
  uint64_t v7 = type metadata accessor for Rope._Item();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(v6, a1, v7);
  v4(v10, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
}

uint64_t sub_24A4EDDE8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v8 = sub_24A5BC780();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t result = MEMORY[0x270FA5388](v8);
  uint64_t v13 = (char *)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *a2;
  unint64_t v15 = *(void *)(*a2 + 16);
  if (!v15) {
    goto LABEL_15;
  }
  unint64_t v16 = 0;
  uint64_t v4 = v14 + 32;
  uint64_t v17 = (uint64_t *)(v14 + 32);
  while (*v17)
  {
    uint64_t v18 = v17[1];
    if (a1 < v18) {
      goto LABEL_11;
    }
    BOOL v26 = __OFSUB__(a1, v18);
    a1 -= v18;
    if (v26)
    {
      __break(1u);
      goto LABEL_61;
    }
LABEL_9:
    ++v16;
    v17 += 6;
    if (v15 == v16) {
      goto LABEL_15;
    }
  }
  if ((a1 & 0x8000000000000000) == 0) {
    goto LABEL_9;
  }
LABEL_11:
  if (v16 >= v15)
  {
LABEL_15:
    uint64_t v24 = a2[1];
    if (!v24) {
      goto LABEL_23;
    }
    uint64_t v25 = a2[2];
    BOOL v26 = __OFSUB__(a1, v25);
    uint64_t v27 = a1 - v25;
    if (v27 < 0 == v26)
    {
      a1 = v27;
      if (v26) {
        goto LABEL_64;
      }
LABEL_23:
      unint64_t v3 = a2[7];
      if (!v3) {
        return 1;
      }
      if (a1 >= (uint64_t)((unint64_t)*((unsigned int *)a2 + 16) >> 24))
      {
LABEL_61:
        __break(1u);
      }
      else
      {
        uint64_t v4 = a2[6];
        unint64_t v11 = *((_WORD *)a2 + 34);
        if ((v3 & 0x1000000000000000) == 0)
        {
          unint64_t v38 = HIBYTE(v3) & 0xF;
          if ((v3 & 0x2000000000000000) == 0) {
            unint64_t v38 = v4 & 0xFFFFFFFFFFFFLL;
          }
          if (v38 >= v11)
          {
            unint64_t v39 = (v11 << 16) | 4;
LABEL_30:
            swift_bridgeObjectRetain();
            sub_24A494C00(v39, v4, v3);
            unint64_t v40 = sub_24A5BBE50();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            unint64_t v41 = sub_24A494C00(v40, v4, v3);
            unint64_t v43 = v42;
            unint64_t v45 = v44;
            unint64_t v47 = v46;
            swift_bridgeObjectRelease();
            sub_24A48F534(v41, v43, v45, v47);
            (*(void (**)(uint64_t, char *, uint64_t))(v9 + 40))(a3, v13, v8);
            goto LABEL_31;
          }
          __break(1u);
LABEL_64:
          __break(1u);
          return result;
        }
      }
      unint64_t v39 = MEMORY[0x24C5C6A60](15, v11, v4, v3);
      goto LABEL_30;
    }
    int v28 = *(unsigned __int8 *)(v24 + 18);
    swift_unknownObjectRetain();
    unint64_t v29 = v24 + 16;
    uint64_t v30 = v24 + 24;
    if (v28)
    {
      if (sub_24A53DCB4(v29, v30, a1, a3))
      {
LABEL_20:
        if (!a2[7])
        {
LABEL_37:
          swift_unknownObjectRelease();
          return 1;
        }
        swift_bridgeObjectRetain();
        uint64_t v31 = sub_24A5BB830();
        uint64_t v33 = v32;
        uint64_t v35 = v34;
        uint64_t v37 = v36;
        swift_bridgeObjectRelease();
        sub_24A58AE34(v31, v33, v35, v37);
        swift_unknownObjectRelease();
LABEL_31:
        swift_bridgeObjectRelease();
        return 1;
      }
    }
    else if (sub_24A53E384(v29, v30, a1, a3))
    {
      goto LABEL_20;
    }
    swift_unknownObjectRelease();
    return 0;
  }
  uint64_t v19 = *v17;
  if (!*v17)
  {
    if (!a1) {
      goto LABEL_40;
    }
    __break(1u);
    goto LABEL_37;
  }
  int v20 = *(unsigned __int8 *)(v19 + 18);
  swift_unknownObjectRetain();
  unint64_t v21 = v19 + 16;
  uint64_t v22 = v19 + 24;
  if (v20) {
    char v23 = sub_24A53DCB4(v21, v22, a1, a3);
  }
  else {
    char v23 = sub_24A53E384(v21, v22, a1, a3);
  }
  char v48 = v23;
  swift_unknownObjectRelease();
  if (v48)
  {
LABEL_40:
    uint64_t v71 = a2;
    int64_t v49 = v16 + 1;
    if (v16 + 1 < v15)
    {
      uint64_t v72 = v4;
      while (1)
      {
        uint64_t v50 = *(void *)(v4 + 48 * v49);
        if (!v50) {
          goto LABEL_45;
        }
        if (*(unsigned char *)(v50 + 18)) {
          break;
        }
        uint64_t v52 = *(unsigned __int16 *)(v50 + 16);
        uint64_t v73 = *(void *)(v4 + 48 * v49);
        if (v52)
        {
          swift_unknownObjectRetain();
          uint64_t v53 = v50 + 32;
          do
          {
            swift_bridgeObjectRetain();
            uint64_t v54 = sub_24A5BB830();
            uint64_t v56 = v55;
            uint64_t v58 = v57;
            uint64_t v60 = v59;
            swift_bridgeObjectRelease();
            sub_24A58AE34(v54, v56, v58, v60);
            swift_bridgeObjectRelease();
            v53 += 24;
            --v52;
          }
          while (v52);
        }
        else
        {
          swift_unknownObjectRetain();
        }
        swift_unknownObjectRelease();
        uint64_t v4 = v72;
        BOOL v26 = __OFADD__(v49++, 1);
        if (v26)
        {
LABEL_55:
          __break(1u);
          goto LABEL_56;
        }
LABEL_46:
        if (v49 >= (uint64_t)v15) {
          goto LABEL_56;
        }
      }
      swift_unknownObjectRetain();
      char v51 = sub_24A53D450((_WORD *)(v50 + 16), v50 + 24, a3);
      swift_unknownObjectRelease();
      if ((v51 & 1) == 0) {
        return 0;
      }
LABEL_45:
      BOOL v26 = __OFADD__(v49++, 1);
      if (v26) {
        goto LABEL_55;
      }
      goto LABEL_46;
    }
LABEL_56:
    uint64_t v61 = v71;
    if (!v71[1]
      || (uint64_t v74 = v71[1],
          long long v62 = *((_OWORD *)v71 + 2),
          long long v75 = *((_OWORD *)v71 + 1),
          long long v76 = v62,
          swift_unknownObjectRetain(),
          char v63 = sub_24A53CD3C((uint64_t)&v74, a3),
          swift_unknownObjectRelease(),
          (v63 & 1) != 0))
    {
      if (!v61[7]) {
        return 1;
      }
      swift_bridgeObjectRetain();
      uint64_t v64 = sub_24A5BB830();
      uint64_t v66 = v65;
      uint64_t v68 = v67;
      uint64_t v70 = v69;
      swift_bridgeObjectRelease();
      sub_24A58AE34(v64, v66, v68, v70);
      goto LABEL_31;
    }
  }
  return 0;
}

uint64_t Rope.Builder.forEachElementInPrefix<A>(from:in:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, char *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v146 = a2;
  uint64_t v147 = a6;
  uint64_t v140 = a4;
  int v141 = a3;
  uint64_t v10 = *(void *)(a5 + 16);
  uint64_t v142 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v126 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v122 = (char *)&v114 - v12;
  uint64_t v128 = v13;
  uint64_t v127 = sub_24A5BBD20();
  uint64_t v125 = *(void *)(v127 - 8);
  MEMORY[0x270FA5388](v127);
  uint64_t v124 = (char *)&v114 - v14;
  uint64_t v15 = type metadata accessor for Rope._Item();
  uint64_t v132 = sub_24A5BBD20();
  uint64_t v134 = *(void *)(v132 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v132);
  uint8x8_t v129 = (char *)&v114 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v116 = (char *)&v114 - v19;
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v119 = (char *)&v114 - v21;
  uint64_t v137 = v15;
  uint64_t v133 = *(void *)(v15 - 8);
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v121 = (char *)&v114 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  uint64_t v115 = (char *)&v114 - v25;
  MEMORY[0x270FA5388](v24);
  uint64_t v117 = (char *)&v114 - v26;
  uint64_t v27 = type metadata accessor for Rope._Node();
  uint64_t v28 = sub_24A5BBD20();
  uint64_t v135 = *(void *)(v28 - 8);
  uint64_t v136 = v28;
  uint64_t v29 = MEMORY[0x270FA5388](v28);
  uint64_t v130 = (char *)&v114 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = MEMORY[0x270FA5388](v29);
  uint64_t v120 = (char *)&v114 - v32;
  uint64_t v138 = v27;
  uint64_t v139 = *(void *)(v27 - 8);
  uint64_t v33 = MEMORY[0x270FA5388](v31);
  uint64_t v123 = (char *)&v114 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v33);
  uint64_t v118 = (char *)&v114 - v35;
  uint64_t v144 = swift_getAssociatedTypeWitness();
  uint64_t v36 = *(void *)(v144 - 8);
  MEMORY[0x270FA5388](v144);
  unint64_t v38 = (char *)&v114 - v37;
  uint64_t v143 = v10;
  uint64_t v39 = type metadata accessor for Rope();
  uint64_t v40 = *(void *)(v39 - 8);
  MEMORY[0x270FA5388](v39);
  unint64_t v42 = (char *)&v114 - v41;
  uint64_t v145 = v7;
  uint64_t v43 = MEMORY[0x24C5C6CE0](*(void *)v7, v39);
  uint64_t v148 = a7;
  uint64_t v131 = v40;
  uint64_t v44 = 0;
  if (v43 >= 1)
  {
    uint64_t v45 = v36;
    unint64_t v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(a7 + 24);
    uint64_t v47 = a1;
    char v48 = (void (**)(char *, uint64_t))(v40 + 8);
    int64_t v49 = (uint64_t (**)(char *, uint64_t))(v45 + 8);
    while (1)
    {
      sub_24A5BBA20();
      Rope.summary.getter(v39, (uint64_t)v38);
      (*v48)(v42, v39);
      uint64_t v50 = v46(v38, v147, v148);
      uint64_t result = (*v49)(v38, v144);
      if (v47 < v50)
      {
        uint64_t v53 = v47;
        goto LABEL_9;
      }
      if (__OFSUB__(v47, v50)) {
        break;
      }
      ++v44;
      v47 -= v50;
      uint64_t v52 = MEMORY[0x24C5C6CE0](*(void *)v145, v39);
      uint64_t v53 = v47;
      if (v44 >= v52) {
        goto LABEL_9;
      }
    }
    __break(1u);
    goto LABEL_40;
  }
  uint64_t v53 = a1;
LABEL_9:
  uint64_t v54 = v53;
  uint64_t v55 = v145;
  if (v44 >= MEMORY[0x24C5C6CE0](*(void *)v145, v39))
  {
    uint64_t v64 = v142;
    uint64_t v66 = v135;
    uint64_t v65 = v136;
    uint64_t v67 = v130;
    (*(void (**)(char *, char *, uint64_t))(v135 + 16))(v130, &v55[*(int *)(v142 + 36)], v136);
    uint64_t v68 = v138;
    uint64_t v69 = v139;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v139 + 48))(v67, 1, v138) == 1)
    {
      (*(void (**)(char *, uint64_t))(v66 + 8))(v67, v65);
      uint64_t v70 = v137;
      uint64_t v71 = v132;
      uint64_t v72 = v133;
      uint64_t v73 = v134;
      uint64_t v74 = v148;
    }
    else
    {
      long long v75 = v123;
      (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v123, v67, v68);
      uint64_t v76 = v147;
      uint64_t v74 = v148;
      uint64_t v77 = v146;
      uint64_t v78 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v148 + 24))(&v75[*(int *)(v68 + 36)], v147, v148);
      uint64_t v70 = v137;
      uint64_t v79 = v69;
      uint64_t v73 = v134;
      if (v54 < v78)
      {
        if ((Rope._Node.forEachWhile<A>(from:in:_:)(v54, v77, v141, v140, v68, v76, v74) & 1) == 0)
        {
          (*(void (**)(char *, uint64_t))(v139 + 8))(v75, v68);
          return 0;
        }
        unint64_t v80 = v116;
        uint64_t v81 = v132;
        (*(void (**)(char *, char *, uint64_t))(v73 + 16))(v116, &v55[*(int *)(v142 + 40)], v132);
        uint64_t v82 = v133;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v133 + 48))(v80, 1, v70) != 1)
        {
          uint64_t v111 = v115;
          (*(void (**)(char *, char *, uint64_t))(v82 + 32))(v115, v80, v70);
          uint64_t v112 = v124;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v126 + 56))(v124, 1, 1, v128);
          char v113 = v141(v111, v112);
          (*(void (**)(char *, uint64_t))(v125 + 8))(v112, v127);
          (*(void (**)(char *, uint64_t))(v82 + 8))(v111, v70);
          (*(void (**)(char *, uint64_t))(v139 + 8))(v75, v138);
          return (v113 & 1) != 0;
        }
        (*(void (**)(char *, uint64_t))(v139 + 8))(v75, v138);
        (*(void (**)(char *, uint64_t))(v73 + 8))(v80, v81);
        return 1;
      }
      uint64_t v91 = v78;
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v79 + 8))(v75, v68);
      BOOL v92 = __OFSUB__(v54, v91);
      v54 -= v91;
      if (v92)
      {
LABEL_40:
        __break(1u);
        return result;
      }
      uint64_t v71 = v132;
      uint64_t v72 = v133;
      uint64_t v64 = v142;
    }
    int v93 = v129;
    (*(void (**)(char *, char *, uint64_t))(v73 + 16))(v129, &v55[*(int *)(v64 + 40)], v71);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48))(v93, 1, v70) == 1)
    {
      (*(void (**)(char *, uint64_t))(v73 + 8))(v93, v71);
    }
    else
    {
      uint64_t v94 = v121;
      (*(void (**)(char *, char *, uint64_t))(v72 + 32))(v121, v93, v70);
      uint64_t v95 = v122;
      (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v74 + 32))(v54, v94, v147, v74);
      uint64_t v96 = v72;
      uint64_t v97 = v126;
      uint64_t v98 = v70;
      uint64_t v99 = v124;
      uint64_t v100 = v128;
      (*(void (**)(char *, char *, uint64_t))(v126 + 16))(v124, v95, v128);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v97 + 56))(v99, 0, 1, v100);
      char v101 = v141(v94, v99);
      (*(void (**)(char *, uint64_t))(v125 + 8))(v99, v127);
      (*(void (**)(char *, uint64_t))(v97 + 8))(v95, v100);
      (*(void (**)(char *, uint64_t))(v96 + 8))(v94, v98);
      uint64_t result = 0;
      if ((v101 & 1) == 0) {
        return result;
      }
    }
    return 1;
  }
  sub_24A5BBA20();
  uint64_t v57 = v140;
  uint64_t v56 = v141;
  char v58 = Rope.forEachWhile<A>(from:in:_:)(v54, v146, v141, v140, v39, v147, v148);
  uint64_t v59 = *(void (**)(char *, uint64_t))(v131 + 8);
  v59(v42, v39);
  if (v58)
  {
    for (uint64_t i = v44 + 1; i < MEMORY[0x24C5C6CE0](*(void *)v55, v39); ++i)
    {
      uint64_t v61 = sub_24A5BBA20();
      MEMORY[0x270FA5388](v61);
      uint64_t v62 = v147;
      *(&v114 - 6) = v143;
      *(&v114 - 5) = v62;
      *(&v114 - 4) = v148;
      *(&v114 - 3) = (uint64_t)v56;
      *(&v114 - 2) = v57;
      char v63 = Rope.forEachWhile(_:)((uint64_t (*)(char *))sub_24A4F2E28, (uint64_t)(&v114 - 8));
      v59(v42, v39);
      if ((v63 & 1) == 0) {
        return 0;
      }
    }
    uint64_t v84 = v135;
    uint64_t v83 = v136;
    int v85 = v120;
    (*(void (**)(char *, char *, uint64_t))(v135 + 16))(v120, &v55[*(int *)(v142 + 36)], v136);
    uint64_t v86 = v138;
    uint64_t v87 = v139;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v139 + 48))(v85, 1, v138) == 1)
    {
      (*(void (**)(char *, uint64_t))(v84 + 8))(v85, v83);
      uint64_t v88 = v137;
      uint64_t v89 = v132;
      uint64_t v90 = v133;
LABEL_30:
      uint64_t v106 = v134;
      uint64_t v107 = v119;
      (*(void (**)(char *, char *, uint64_t))(v134 + 16))(v119, &v55[*(int *)(v142 + 40)], v89);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48))(v107, 1, v88) == 1)
      {
        (*(void (**)(char *, uint64_t))(v106 + 8))(v107, v89);
        return 1;
      }
      uint64_t v108 = v117;
      (*(void (**)(char *, char *, uint64_t))(v90 + 32))(v117, v107, v88);
      char v109 = v124;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v126 + 56))(v124, 1, 1, v128);
      char v110 = v56(v108, v109);
      (*(void (**)(char *, uint64_t))(v125 + 8))(v109, v127);
      (*(void (**)(char *, uint64_t))(v90 + 8))(v108, v88);
      return (v110 & 1) != 0;
    }
    uint64_t v102 = v118;
    uint64_t v103 = (*(uint64_t (**)(char *, char *, uint64_t))(v87 + 32))(v118, v85, v86);
    MEMORY[0x270FA5388](v103);
    uint64_t v104 = v147;
    *(&v114 - 6) = v143;
    *(&v114 - 5) = v104;
    *(&v114 - 4) = v148;
    *(&v114 - 3) = (uint64_t)v56;
    *(&v114 - 2) = v57;
    char v105 = Rope._Node.forEachWhile(_:)((uint64_t (*)(char *))sub_24A4F2E28, (uint64_t)(&v114 - 8), v86);
    (*(void (**)(char *, uint64_t))(v87 + 8))(v102, v86);
    uint64_t v88 = v137;
    uint64_t v89 = v132;
    uint64_t v90 = v133;
    if (v105) {
      goto LABEL_30;
    }
  }
  return 0;
}

uint64_t sub_24A4EF214(uint64_t a1, uint64_t (*a2)(uint64_t, char *))
{
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = sub_24A5BBD20();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v10 - v7;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))((char *)&v10 - v7, 1, 1, AssociatedTypeWitness);
  LOBYTE(a2) = a2(a1, v8);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return a2 & 1;
}

uint64_t sub_24A4EF384(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  if (!*(void *)(a1 + 80)
    || (uint64_t v4 = _s7BuilderVMa(),
        uint64_t result = sub_24A48ED24(0xFuLL, a2 + *(int *)(v4 + 20), a2 + *(int *)(v4 + 24)),
        (v6 & 1) != 0))
  {
    uint64_t v7 = *(void **)(v3 + 96);
    uint64_t v8 = v7[2] - 1;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_17:
    }
      uint64_t v7 = sub_24A499D4C(v7);
    char v9 = 0;
    uint64_t v15 = v3;
    *(void *)(v3 + 96) = v7;
    while (1)
    {
      uint64_t v10 = v8 - 1;
      if (v8 < 1)
      {
        uint64_t result = 0;
        uint64_t v10 = 0;
        char v11 = (v8 != 0) | v9;
        char v9 = 1;
        if (v11) {
          break;
        }
      }
      if ((unint64_t)v8 >= v7[2])
      {
        __break(1u);
        goto LABEL_17;
      }
      uint64_t v12 = (long long *)&v7[6 * v8 + 4];
      uint64_t v13 = (void *)v12 + 5;
      uint64_t v3 = *((void *)v12 + 5);
      if (*(void *)v12)
      {
        uint64_t v14 = *(unsigned __int8 *)(*(void *)v12 + 18);
        uint64_t v19 = *((void *)v12 + 5);
        uint64_t v20 = v14;
      }
      else
      {
        uint64_t v19 = *((void *)v12 + 5);
        uint64_t v20 = 0;
      }
      uint64_t v21 = 0;
      uint64_t v17 = 0;
      char v18 = 1;
      if (*(void *)v12)
      {
        sub_24A4CAB14(&v16, (uint64_t)&v19, v12, (uint64_t)&v17, a2);
        *uint64_t v13 = v3 + 1;
        uint64_t v8 = v10;
        if ((v18 & 1) == 0)
        {
          uint64_t result = v17;
          break;
        }
      }
      else
      {
        uint64_t v8 = v10;
      }
    }
    *(void *)(v15 + 96) = v7;
  }
  return result;
}

uint64_t Rope.Builder.mutatingForEachSuffix<A>(_:)@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v71 = a1;
  uint64_t v72 = a2;
  uint64_t v60 = a5;
  uint64_t v69 = sub_24A5BBD20();
  char v63 = *(void (***)(char *, uint64_t))(v69 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v69);
  uint64_t v68 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v67 = (char *)&v58 - v11;
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v70 = (char *)&v58 - v13;
  uint64_t v75 = a4;
  uint64_t v61 = *(void *)(a4 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v59 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v66 = (char *)&v58 - v16;
  uint64_t v17 = *(void *)(a3 + 16);
  uint64_t v73 = *(void *)(a3 + 24);
  uint64_t v74 = v17;
  uint64_t v18 = type metadata accessor for Rope._Item();
  uint64_t v19 = sub_24A5BBD20();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v58 - v21;
  uint64_t v23 = (char *)(v5 + *(int *)(a3 + 44));
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))((char *)&v58 - v21, v23, v19);
  uint64_t v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48);
  int v25 = v24(v22, 1, v18);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  uint64_t v26 = a3;
  if (v25 != 1)
  {
    uint64_t v65 = a3;
    uint64_t result = v24(v23, 1, v18);
    if (result == 1)
    {
LABEL_21:
      __break(1u);
      return result;
    }
    uint64_t v28 = v70;
    v71((uint64_t)v23);
    uint64_t v29 = v61;
    uint64_t v30 = v75;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v28, 1, v75) != 1)
    {
      uint64_t v55 = *(void (**)(char *, char *, uint64_t))(v29 + 32);
      uint64_t v56 = v66;
      v55(v66, v28, v30);
      uint64_t v57 = v60;
      v55(v60, v56, v30);
      return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v57, 0, 1, v30);
    }
    v63[1](v28, v69);
    uint64_t v26 = v65;
  }
  uint64_t v31 = (uint64_t *)(v5 + *(int *)(v26 + 48));
  uint64_t v32 = type metadata accessor for Rope();
  uint64_t v33 = swift_bridgeObjectRetain();
  uint64_t v34 = MEMORY[0x24C5C6CE0](v33, v32);
  uint64_t result = swift_bridgeObjectRelease();
  int64_t v35 = v34 - 1;
  if (__OFSUB__(v34, 1))
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v36 = sub_24A5BB9F0();
  sub_24A5BB960();
  uint64_t v66 = (char *)v36;
  sub_24A5BB960();
  int v62 = 0;
  uint64_t v70 = (char *)(v61 + 56);
  uint64_t v64 = (void (**)(char *, char *, uint64_t))(v63 + 4);
  uint64_t v65 = v32 - 8;
  uint64_t v37 = (unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48);
  ++v63;
  unint64_t v38 = v68;
  uint64_t v39 = v75;
  BOOL v40 = v34 == 1;
  if (v35 <= 0) {
    goto LABEL_8;
  }
LABEL_7:
  for (uint64_t i = v35 - 1; ; uint64_t i = 0)
  {
    sub_24A5BB960();
    uint64_t v43 = v31;
    sub_24A4F299C(v35, *v31);
    swift_bridgeObjectRetain();
    v76[0] = Rope.startIndex.getter(v32);
    v76[1] = v44;
    _OWORD v76[2] = v45;
    unint64_t v46 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))v70;
    uint64_t v47 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))v70)(v38, 1, 1, v39);
    MEMORY[0x270FA5388](v47);
    *(&v58 - 6) = v74;
    *(&v58 - 5) = v39;
    *(&v58 - 4) = v73;
    *(&v58 - 3) = (uint64_t)v38;
    uint64_t v48 = v72;
    *(&v58 - 2) = (uint64_t)v71;
    *(&v58 - 1) = v48;
    Rope._mutatingForEach(from:_:)(v76, (uint64_t (*)(uint64_t))sub_24A4CAB04, (uint64_t)(&v58 - 8), v32);
    int64_t v49 = v67;
    uint64_t v50 = v69;
    (*v64)(v67, v38, v69);
    swift_bridgeObjectRelease();
    if ((*v37)(v49, 1, v39) != 1)
    {
      char v51 = *(void (**)(char *, char *, uint64_t))(v61 + 32);
      uint64_t v52 = v59;
      uint64_t v53 = v75;
      v51(v59, v49, v75);
      uint64_t v54 = v60;
      v51(v60, v52, v53);
      return v46((uint64_t)v54, 0, 1, v53);
    }
    (*v63)(v49, v50);
    int64_t v35 = i;
    uint64_t v31 = v43;
    BOOL v40 = i == 0;
    if (i > 0) {
      goto LABEL_7;
    }
LABEL_8:
    BOOL v42 = !v40;
    if ((v42 | v62)) {
      break;
    }
    int v62 = 1;
  }
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))v70)(v60, 1, 1, v75);
}

uint64_t Rope.Builder._appendNow(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v30 = a1;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = type metadata accessor for Rope._Node();
  uint64_t v7 = sub_24A5BBD20();
  uint64_t v28 = *(void *)(v7 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v25 - v9;
  uint64_t v11 = *(void *)(v6 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v8);
  uint64_t v14 = (uint64_t *)((char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  uint64_t v17 = (uint64_t **)((char *)&v25 - v16);
  uint64_t v26 = a2;
  uint64_t v27 = v2;
  uint64_t v18 = v2 + *(int *)(a2 + 36);
  Optional._take()(v15, (uint64_t)v10);
  int v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v6);
  uint64_t v29 = v4;
  if (v19 == 1)
  {
    static Rope._Node.createLeaf()(v4, v5, v17);
    uint64_t v20 = v28;
    (*(void (**)(char *, uint64_t))(v28 + 8))(v10, v7);
  }
  else
  {
    (*(void (**)(uint64_t **, char *, uint64_t))(v11 + 32))(v17, v10, v6);
    uint64_t v20 = v28;
  }
  uint64_t v21 = v30;
  sub_24A501AC8(v30, v6);
  if (Rope._Node.isFull.getter())
  {
    (*(void (**)(uint64_t *, uint64_t **, uint64_t))(v11 + 16))(v14, v17, v6);
    Rope.Builder._appendNow(_:)(v14, v26);
    uint64_t v22 = type metadata accessor for Rope._Item();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8))(v21, v22);
    return (*(uint64_t (**)(uint64_t **, uint64_t))(v11 + 8))(v17, v6);
  }
  else
  {
    uint64_t v24 = type metadata accessor for Rope._Item();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8))(v21, v24);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v7);
    (*(void (**)(uint64_t, uint64_t **, uint64_t))(v11 + 32))(v18, v17, v6);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v18, 0, 1, v6);
  }
}

uint64_t Rope.Builder._appendNow(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v6 = type metadata accessor for Rope._Node();
  uint64_t v99 = sub_24A5BBD20();
  uint64_t v94 = *(void *)(v99 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v99);
  uint64_t v96 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v86 = (unsigned int (*)(char *, uint64_t, uint64_t))((char *)&v77 - v10);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v89 = (unsigned int (*)(char *, uint64_t, uint64_t))((char *)&v77 - v12);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v84 = (char *)&v77 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v83 = (char *)&v77 - v15;
  uint64_t v97 = v4;
  uint64_t v98 = v5;
  uint64_t v16 = type metadata accessor for Rope();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v77 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x270FA5388](v18);
  char v109 = (char *)&v77 - v22;
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  BOOL v92 = (char *)&v77 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  uint64_t v87 = (unsigned int (*)(char *, uint64_t, uint64_t))((char *)&v77 - v26);
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  uint64_t v88 = (char *)&v77 - v28;
  uint64_t v29 = MEMORY[0x270FA5388](v27);
  uint64_t v82 = (char *)&v77 - v30;
  uint64_t v31 = MEMORY[0x270FA5388](v29);
  uint64_t v81 = (char *)&v77 - v32;
  uint64_t v33 = MEMORY[0x270FA5388](v31);
  unint64_t v80 = (char *)&v77 - v34;
  uint64_t v35 = MEMORY[0x270FA5388](v33);
  uint64_t v90 = (char *)&v77 - v36;
  MEMORY[0x270FA5388](v35);
  uint64_t v103 = v37;
  unint64_t v38 = *(void (**)(void))(v37 + 16);
  char v110 = (uint64_t *)((char *)&v77 - v39);
  char v101 = v38;
  uint64_t v102 = v37 + 16;
  v38();
  uint64_t v40 = sub_24A5BB9F0();
  uint64_t v108 = v2;
  uint64_t v111 = *v2;
  uint64_t WitnessTable = (void (*)(char *, char *, uint64_t))swift_getWitnessTable();
  if (sub_24A5BBBC0()) {
    goto LABEL_2;
  }
  unint64_t v46 = (void (***)(char *, uint64_t))(v17 + 16);
  uint64_t v47 = (void (**)(char *, uint64_t))(v17 + 8);
  int v85 = (void (**)(char *, char *, uint64_t))(v94 + 16);
  uint64_t v91 = (unsigned int (**)(char *, uint64_t, uint64_t))(v103 + 48);
  uint64_t v95 = (void (***)(char *, uint64_t))(v103 + 32);
  int v93 = a1;
  uint64_t v104 = v40;
  uint64_t v100 = (void (**)(uint64_t *, uint64_t))(v103 + 8);
  uint64_t v106 = v6;
  while (2)
  {
    swift_getWitnessTable();
    swift_getWitnessTable();
    uint64_t v48 = v109;
    sub_24A5BBC70();
    uint64_t v107 = *v46;
    while (1)
    {
      ((void (*)(char *, char *, uint64_t))v107)(v20, v48, v16);
      unsigned int v49 = Rope._height.getter();
      uint64_t v50 = *v47;
      (*v47)(v20, v16);
      if (v49 >= (Rope._Node.header.getter() >> 16)) {
        break;
      }
      uint64_t v111 = *v108;
      if (sub_24A5BBBC0())
      {
        uint64_t v73 = v109;
        sub_24A4CF4CC((uint64_t)v110, v16);
        ((void (*)(char *, char *, uint64_t))v107)(v20, v73, v16);
        sub_24A5BB9D0();
        uint64_t v74 = *v100;
        uint64_t v75 = v106;
        (*v100)(v93, v106);
        v50(v73, v16);
        return ((uint64_t (*)(uint64_t *, uint64_t))v74)(v110, v75);
      }
      sub_24A5BBC70();
      uint64_t v48 = v109;
      sub_24A4CF680((uint64_t)v20, v16);
      v50(v20, v16);
    }
    char v51 = v109;
    ((void (*)(char *, char *, uint64_t))v107)(v20, v109, v16);
    int v52 = Rope._height.getter();
    v50(v20, v16);
    uint64_t v6 = v106;
    uint64_t v53 = v110;
    if (v52 == (Rope._Node.header.getter() >> 16))
    {
      uint64_t v54 = *v91;
      if ((*v91)(v51, 1, v6) != 1)
      {
        char v55 = Rope._Node.rebalance(nextNeighbor:)(v53);
        uint64_t v56 = *v85;
        if (v55)
        {
          uint64_t v57 = v83;
          v56(v83, v51, v99);
          if (v54(v57, 1, v6) != 1)
          {
            uint64_t v58 = v57;
            uint64_t v59 = *v95;
            ((void (*)(char *, char *, uint64_t))*v95)(v90, v58, v6);
            v50(v51, v16);
            (*v100)(v53, v6);
            ((void (*)(uint64_t *, char *, uint64_t))v59)(v53, v90, v6);
            goto LABEL_23;
          }
          goto LABEL_32;
        }
        uint64_t v107 = v47;
        uint64_t v57 = v84;
        v56(v84, v51, v99);
        if (v54(v57, 1, v6) == 1)
        {
LABEL_32:
          uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v94 + 8))(v57, v99);
          goto LABEL_33;
        }
        uint64_t WitnessTable = (void (*)(char *, char *, uint64_t))*v95;
        uint64_t v69 = (uint64_t)v81;
        WitnessTable(v81, v57, v6);
        uint64_t v70 = (uint64_t)v82;
        ((void (*)(char *, uint64_t *, uint64_t))v101)(v82, v53, v6);
        uint64_t v71 = v80;
        static Rope._Node.createInner(children:_:)(v69, v70, v98, v97, v80);
        uint64_t v47 = v107;
        v50(v51, v16);
        (*v100)(v53, v6);
        WitnessTable((char *)v53, v71, v6);
LABEL_23:
        uint64_t v111 = *v108;
        uint64_t WitnessTable = (void (*)(char *, char *, uint64_t))swift_getWitnessTable();
        char v72 = sub_24A5BBBC0();
        a1 = v93;
        if ((v72 & 1) == 0) {
          continue;
        }
        goto LABEL_2;
      }
      goto LABEL_29;
    }
    break;
  }
  BOOL v60 = Rope._Node.isFull.getter();
  uint64_t v79 = v46;
  if (!v60) {
    goto LABEL_27;
  }
  uint64_t v54 = v89;
  uint64_t v78 = *v85;
  v78((char *)v89, v109, v99);
  uint64_t v61 = *v91;
  if ((*v91)((char *)v54, 1, v6) == 1) {
    goto LABEL_31;
  }
  int v62 = *v95;
  char v63 = v88;
  ((void (*)(char *, unsigned int (*)(char *, uint64_t, uint64_t), uint64_t))*v95)(v88, v54, v6);
  BOOL v64 = Rope._Node.isFull.getter();
  uint64_t WitnessTable = (void (*)(char *, char *, uint64_t))*v100;
  ((void (*)(char *, uint64_t))WitnessTable)(v63, v6);
  if (v64) {
    goto LABEL_27;
  }
  ((void (*)(char *, char *, uint64_t))v107)(v20, v109, v16);
  uint64_t v54 = (unsigned int (*)(char *, uint64_t, uint64_t))Rope._height.getter();
  v50(v20, v16);
  unsigned int v65 = (Rope._Node.header.getter() >> 16) + 1;
  if ((v65 >> 8))
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v54 != v65)
  {
LABEL_27:
    uint64_t v76 = v109;
    ((void (*)(char *, char *, uint64_t))v107)(v20, v109, v16);
    sub_24A5BB9D0();
    v50(v76, v16);
    a1 = v93;
LABEL_2:
    uint64_t v41 = (uint64_t)v96;
    uint64_t v42 = (uint64_t)v110;
    ((void (*)(char *, uint64_t *, uint64_t))v101)(v96, v110, v6);
    uint64_t v43 = v103;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v103 + 56))(v41, 0, 1, v6);
    Rope.init(root:)(v41, (uint64_t)v20);
    sub_24A5BB9D0();
    uint64_t v44 = *(void (**)(uint64_t *, uint64_t))(v43 + 8);
    v44(a1, v6);
    return ((uint64_t (*)(uint64_t, uint64_t))v44)(v42, v6);
  }
  uint64_t v107 = v62;
  uint64_t v54 = v87;
  ((void (*)(unsigned int (*)(char *, uint64_t, uint64_t), uint64_t *, uint64_t))v101)(v87, v110, v6);
  uint64_t v66 = v109;
  if (v61(v109, 1, v6) == 1)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  sub_24A501CD0((uint64_t)v54, v6);
  ((void (*)(unsigned int (*)(char *, uint64_t, uint64_t), uint64_t))WitnessTable)(v54, v6);
  uint64_t v54 = v86;
  v78((char *)v86, v66, v99);
  if (v61((char *)v54, 1, v6) != 1)
  {
    uint64_t v67 = v107;
    ((void (*)(char *, unsigned int (*)(char *, uint64_t, uint64_t), uint64_t))v107)(v92, v54, v6);
    v50(v66, v16);
    uint64_t v68 = (uint64_t)v110;
    ((void (*)(uint64_t *, uint64_t))WitnessTable)(v110, v6);
    ((void (*)(uint64_t, char *, uint64_t))v67)(v68, v92, v6);
    goto LABEL_23;
  }
LABEL_31:
  uint64_t result = (*(uint64_t (**)(unsigned int (*)(char *, uint64_t, uint64_t), uint64_t))(v94 + 8))(v54, v99);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t Rope.Builder.insertBeforeTip<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v38 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_24A5BBD20();
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v14 = (char *)&v33 - v13;
  uint64_t v15 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v37 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v40 = (char *)&v33 - v18;
  uint64_t v39 = a2;
  uint64_t v19 = type metadata accessor for Rope();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v33 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x270FA5388](v21);
  uint64_t v26 = (char *)&v33 - v25;
  if (v24 == a3)
  {
    uint64_t v31 = a1;
    uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
    v32((char *)&v33 - v25, v31, a3);
    v32(v23, (uint64_t)v26, a3);
    Rope.Builder.insertBeforeTip(_:)((uint64_t)v23, v39);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v31, a3);
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v26, a3);
  }
  else
  {
    uint64_t v34 = v15;
    uint64_t v35 = a1;
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a1, a3);
    sub_24A5BB840();
    uint64_t v36 = a3;
    swift_getAssociatedConformanceWitness();
    sub_24A5BBEE0();
    uint64_t v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48);
    if (v27(v14, 1, v8) != 1)
    {
      uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v38 + 32);
      uint64_t v29 = (void (**)(char *, uint64_t))(v38 + 8);
      do
      {
        v28(v10, v14, v8);
        sub_24A4F2CE0((uint64_t)v10, v39, (uint64_t (*)(char *, uint64_t))Rope.Builder._insertBeforeTip(_:));
        (*v29)(v10, v8);
        sub_24A5BBEE0();
      }
      while (v27(v14, 1, v8) != 1);
    }
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v35, v36);
    return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v40, AssociatedTypeWitness);
  }
}

uint64_t sub_24A4F12DC(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t (*a4)(void, void, void))
{
  a3();
  uint64_t v7 = a4(0, *(void *)(a2 + 16), *(void *)(a2 + 24));
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  return v8(a1, v7);
}

uint64_t Rope.Builder._insertBeforeTip(slots:in:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a4 + 16);
  uint64_t v7 = *(void *)(a4 + 24);
  uint64_t v46 = a4;
  uint64_t v9 = type metadata accessor for Rope._Node();
  uint64_t v48 = *(void *)(v9 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  uint64_t v12 = (uint64_t *)((char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (uint64_t **)((char *)&v40 - v13);
  uint64_t v15 = type metadata accessor for Rope._Item();
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x270FA5388](v16);
  uint64_t v22 = (char *)&v40 - v21;
  uint64_t v47 = a2;
  uint64_t v23 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if (v23 < 1)
  {
    uint64_t v32 = *(uint64_t (**)(void *, uint64_t))(v48 + 8);
    return v32(a3, v9);
  }
  else if (v23 == 1)
  {
    uint64_t v44 = v20;
    uint64_t v45 = result;
    uint64_t v24 = a3;
    uint64_t v25 = Rope._Node.header.getter();
    uint64_t v26 = *a3;
    if ((v25 & 0xFF0000) != 0)
    {
      uint64_t v45 = (uint64_t)v24;
      uint64_t v27 = v26 + ((*(unsigned __int8 *)(v48 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80));
      swift_getWitnessTable();
      uint64_t v28 = (unsigned __int16 *)nullsub_1(v26 + 16, v27, v8, v9, v7);
      uint64_t v30 = v29;
      swift_unknownObjectRetain();
      sub_24A4F1C1C(v28, v30, a1, v8, v7, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Node, (uint64_t)v14);
      swift_unknownObjectRelease();
      (*(void (**)(uint64_t *, uint64_t **, uint64_t))(v48 + 16))(v12, v14, v9);
      Rope.Builder._insertBeforeTip(_:)(v12, v46);
      uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
      v48 += 8;
      v31(v45, v9);
      return ((uint64_t (*)(uint64_t **, uint64_t))v31)(v14, v9);
    }
    else
    {
      uint64_t v35 = v44;
      uint64_t v36 = v45;
      uint64_t v41 = v26 + ((*(unsigned __int8 *)(v44 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80));
      uint64_t v42 = v26 + 16;
      uint64_t v43 = &protocol conformance descriptor for Rope<A>._Item;
      swift_getWitnessTable();
      uint64_t v37 = (unsigned __int16 *)nullsub_1(v42, v41, v8, v36, v7);
      uint64_t v42 = v38;
      swift_unknownObjectRetain();
      sub_24A4F1C1C(v37, v42, a1, v8, v7, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Item, (uint64_t)v22);
      swift_unknownObjectRelease();
      uint64_t v39 = v45;
      (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v18, v22, v45);
      Rope.Builder._insertBeforeTip(_:)((uint64_t)v18, v46);
      (*(void (**)(void *, uint64_t))(v48 + 8))(v24, v9);
      return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v22, v39);
    }
  }
  else
  {
    uint64_t v33 = (uint64_t **)a3;
    Rope._Node.copy(slots:)(a1, v47, v9, v14);
    (*(void (**)(uint64_t *, uint64_t **, uint64_t))(v48 + 16))(v12, v14, v9);
    Rope.Builder._insertBeforeTip(_:)(v12, v46);
    uint64_t v34 = *(uint64_t (**)(uint64_t **, uint64_t))(v48 + 8);
    v48 += 8;
    v34(v33, v9);
    return v34(v14, v9);
  }
  return result;
}

uint64_t Rope.Builder._insertAfterTip(slots:in:)(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a4 + 16);
  uint64_t v7 = *(void *)(a4 + 24);
  uint64_t v38 = a4;
  uint64_t v9 = type metadata accessor for Rope._Node();
  uint64_t v40 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (uint64_t **)((char *)&v34 - v10);
  uint64_t v12 = type metadata accessor for Rope._Item();
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x270FA5388](v13);
  uint64_t v19 = (char *)&v34 - v18;
  uint64_t v39 = a2;
  uint64_t v20 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if (v20 < 1)
  {
    uint64_t v29 = *(uint64_t (**)(uint64_t **, uint64_t))(v40 + 8);
    return v29(a3, v9);
  }
  else if (v20 == 1)
  {
    uint64_t v21 = v17;
    uint64_t v22 = Rope._Node.header.getter();
    uint64_t v37 = a3;
    uint64_t v23 = *a3;
    if ((v22 & 0xFF0000) != 0)
    {
      uint64_t v24 = (uint64_t)v23 + ((*(unsigned __int8 *)(v40 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80));
      swift_getWitnessTable();
      uint64_t v25 = (unsigned __int16 *)nullsub_1(v23 + 2, v24, v8, v9, v7);
      uint64_t v27 = v26;
      swift_unknownObjectRetain();
      sub_24A4F1C1C(v25, v27, a1, v8, v7, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Node, (uint64_t)v11);
      swift_unknownObjectRelease();
      sub_24A4F2AE0((uint64_t)v11);
      uint64_t v28 = *(uint64_t (**)(uint64_t **, uint64_t))(v40 + 8);
      v40 += 8;
      v28(v37, v9);
      return v28(v11, v9);
    }
    else
    {
      uint64_t v35 = (uint64_t)v23 + ((*(unsigned __int8 *)(v21 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
      uint64_t v36 = (unsigned __int16 *)(v23 + 2);
      swift_getWitnessTable();
      uint64_t v32 = (unsigned __int16 *)nullsub_1(v36, v35, v8, v12, v7);
      uint64_t v35 = v33;
      uint64_t v36 = v32;
      swift_unknownObjectRetain();
      sub_24A4F1C1C(v36, v35, a1, v8, v7, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Item, (uint64_t)v19);
      swift_unknownObjectRelease();
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v15, v19, v12);
      Rope.Builder._insertAfterTip(_:)((uint64_t)v15, v38);
      (*(void (**)(uint64_t **, uint64_t))(v40 + 8))(v37, v9);
      return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v19, v12);
    }
  }
  else
  {
    uint64_t v30 = a3;
    Rope._Node.copy(slots:)(a1, v39, v9, v11);
    sub_24A4F2AE0((uint64_t)v11);
    uint64_t v31 = *(uint64_t (**)(uint64_t **, uint64_t))(v40 + 8);
    v40 += 8;
    v31(v30, v9);
    return v31(v11, v9);
  }
  return result;
}

uint64_t sub_24A4F1C1C@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t (*a6)(void, uint64_t, uint64_t)@<X6>, uint64_t a7@<X8>)
{
  uint64_t v13 = a6(0, a4, a5);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v15 = Rope._UnsafeHandle.children.getter(a1, a2, a4, v13, a5, WitnessTable);
  uint64_t v16 = *(void *)(v13 - 8);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
  uint64_t v18 = v15 + *(void *)(v16 + 72) * a3;
  return v17(a7, v18, v13);
}

Swift::Void __swiftcall Rope.Builder._dump(heightLimit:)(Swift::Int heightLimit)
{
  uint64_t v100 = v1;
  uint64_t v4 = type metadata accessor for Rope._Item();
  uint64_t v90 = sub_24A5BBD20();
  uint64_t v98 = *(void *)(v90 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v90);
  uint64_t v96 = (char *)&v84 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v88 = (char *)&v84 - v8;
  uint64_t v97 = v4;
  uint64_t v99 = *(void *)(v4 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v87 = (char *)&v84 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v89 = (char *)&v84 - v11;
  uint64_t v12 = type metadata accessor for Rope._Node();
  uint64_t v13 = sub_24A5BBD20();
  uint64_t v93 = *(void *)(v13 - 8);
  uint64_t v94 = (unsigned int (*)(void, void, void))v13;
  uint64_t v14 = MEMORY[0x270FA5388](v13);
  BOOL v92 = (char *)&v84 - v15;
  uint64_t v103 = v12;
  uint64_t v95 = *(unsigned int (***)(char *, uint64_t, uint64_t))(v12 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v86 = (char *)&v84 - v16;
  uint64_t v17 = type metadata accessor for Rope();
  uint64_t v105 = *(void *)(v17 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v84 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v84 - v21;
  char v101 = v2;
  uint64_t v106 = *v2;
  uint64_t v23 = sub_24A5BB9F0();
  swift_getWitnessTable();
  uint64_t v91 = v23;
  sub_24A5BBAC0();
  uint64_t v25 = v107;
  int64_t v24 = v108;
  if (v107 == v108)
  {
LABEL_6:
    uint64_t v33 = v101;
    uint64_t v35 = v92;
    uint64_t v34 = v93;
    uint64_t v36 = v94;
    (*(void (**)(char *, char *, unsigned int (*)(void, void, void)))(v93 + 16))(v92, (char *)v101 + v100[9], v94);
    uint64_t v37 = v95;
    uint64_t v38 = v103;
    if (v95[6](v35, 1, v103) == 1)
    {
      (*(void (**)(char *, unsigned int (*)(void, void, void)))(v34 + 8))(v35, v36);
    }
    else
    {
      uint64_t v39 = v86;
      v37[4](v86, (uint64_t)v35, v38);
      __swift_instantiateConcreteTypeFromMangledName(qword_26979B058);
      uint64_t v40 = swift_allocObject();
      *(_OWORD *)(v40 + 16) = xmmword_24A5BDAE0;
      *(void *)(v40 + 56) = MEMORY[0x263F8D310];
      *(void *)(v40 + 32) = 0x676E696C64656553;
      *(void *)(v40 + 40) = 0xE90000000000003ALL;
      sub_24A5BC600();
      swift_bridgeObjectRelease();
      v41._uint64_t countAndFlagsBits = 8224;
      v41._object = (void *)0xE200000000000000;
      v42._uint64_t countAndFlagsBits = 8224;
      v42._object = (void *)0xE200000000000000;
      Rope._Node.dump(heightLimit:firstPrefix:restPrefix:)(heightLimit, v41, v42);
      ((void (*)(char *, uint64_t))v37[1])(v39, v38);
    }
    uint64_t v44 = v98;
    uint64_t v43 = v99;
    uint64_t v45 = v90;
    uint64_t v46 = v88;
    uint64_t v47 = (uint64_t)v33 + v100[10];
    uint64_t v48 = *(unsigned int (***)(char *, uint64_t, uint64_t))(v98 + 16);
    uint64_t v103 = v98 + 16;
    uint64_t v95 = v48;
    ((void (*)(char *, uint64_t, uint64_t))v48)(v88, v47, v90);
    uint64_t v49 = v44;
    uint64_t v50 = v97;
    uint64_t v94 = *(unsigned int (**)(void, void, void))(v43 + 48);
    if (v94(v46, 1, v97) == 1)
    {
      (*(void (**)(char *, uint64_t))(v49 + 8))(v46, v45);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v89, v46, v50);
      __swift_instantiateConcreteTypeFromMangledName(qword_26979B058);
      uint64_t v51 = swift_allocObject();
      long long v104 = xmmword_24A5BDAE0;
      *(_OWORD *)(v51 + 16) = xmmword_24A5BDAE0;
      uint64_t v52 = MEMORY[0x263F8D310];
      *(void *)(v51 + 56) = MEMORY[0x263F8D310];
      *(void *)(v51 + 32) = 0x3A64656553;
      *(void *)(v51 + 40) = 0xE500000000000000;
      sub_24A5BC600();
      swift_bridgeObjectRelease();
      uint64_t v53 = swift_allocObject();
      *(_OWORD *)(v53 + 16) = v104;
      uint64_t v107 = 0;
      int64_t v108 = 0xE000000000000000;
      sub_24A5BB6F0();
      swift_getWitnessTable();
      uint64_t v54 = v89;
      sub_24A5BC4E0();
      uint64_t v55 = v107;
      int64_t v56 = v108;
      *(void *)(v53 + 56) = v52;
      *(void *)(v53 + 32) = v55;
      *(void *)(v53 + 40) = v56;
      sub_24A5BC600();
      uint64_t v33 = v101;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v99 + 8))(v54, v50);
      uint64_t v49 = v98;
    }
    uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(qword_26979B058);
    uint64_t v58 = swift_allocObject();
    long long v104 = xmmword_24A5BDAE0;
    *(_OWORD *)(v58 + 16) = xmmword_24A5BDAE0;
    *(void *)(v58 + 56) = MEMORY[0x263F8D310];
    *(void *)(v58 + 32) = 2960685;
    *(void *)(v58 + 40) = 0xE300000000000000;
    sub_24A5BC600();
    swift_bridgeObjectRelease();
    uint64_t v59 = v96;
    ((void (*)(char *, char *, uint64_t))v95)(v96, (char *)v33 + v100[11], v45);
    unsigned int v60 = v94(v59, 1, v50);
    Swift::Int v102 = heightLimit;
    uint64_t v103 = v57;
    if (v60 == 1)
    {
      (*(void (**)(char *, uint64_t))(v49 + 8))(v59, v45);
      uint64_t v61 = 0;
    }
    else
    {
      uint64_t v62 = v99;
      char v63 = v87;
      (*(void (**)(char *, char *, uint64_t))(v99 + 32))(v87, v59, v50);
      uint64_t v64 = swift_allocObject();
      *(_OWORD *)(v64 + 16) = v104;
      uint64_t v107 = 0x20786966667553;
      int64_t v108 = 0xE700000000000000;
      uint64_t v106 = 0;
      sub_24A5BC430();
      sub_24A5BB6F0();
      swift_bridgeObjectRelease();
      sub_24A5BB6F0();
      uint64_t v65 = v107;
      int64_t v66 = v108;
      uint64_t v67 = MEMORY[0x263F8D310];
      *(void *)(v64 + 56) = MEMORY[0x263F8D310];
      *(void *)(v64 + 32) = v65;
      *(void *)(v64 + 40) = v66;
      sub_24A5BC600();
      swift_bridgeObjectRelease();
      uint64_t v68 = swift_allocObject();
      *(_OWORD *)(v68 + 16) = v104;
      uint64_t v107 = 0;
      int64_t v108 = 0xE000000000000000;
      sub_24A5BB6F0();
      swift_getWitnessTable();
      sub_24A5BC4E0();
      uint64_t v69 = v107;
      int64_t v70 = v108;
      *(void *)(v68 + 56) = v67;
      *(void *)(v68 + 32) = v69;
      *(void *)(v68 + 40) = v70;
      sub_24A5BC600();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v62 + 8))(v63, v50);
      uint64_t v61 = 1;
    }
    uint64_t v106 = *(void *)((char *)v101 + v100[12]);
    swift_bridgeObjectRetain();
    swift_getWitnessTable();
    sub_24A5BB3F0();
    uint64_t v71 = v107;
    uint64_t v72 = swift_bridgeObjectRetain();
    uint64_t v73 = MEMORY[0x24C5C6D00](v72, v17);
    swift_bridgeObjectRelease();
    if (!v73)
    {
LABEL_25:
      swift_bridgeObjectRelease();
      return;
    }
    uint64_t v74 = (void (**)(char *, uint64_t *, uint64_t))(v105 + 16);
    uint64_t v75 = (void (**)(char *, uint64_t))(v105 + 8);
    while (!__OFSUB__(v73--, 1))
    {
      char v77 = sub_24A5BB9B0();
      sub_24A5BB940();
      if (v77)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v105 + 16))(v20, v71+ ((*(unsigned __int8 *)(v105 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v105 + 80))+ *(void *)(v105 + 72) * v73, v17);
      }
      else
      {
        uint64_t v83 = sub_24A5BC0A0();
        if (v85 != 8) {
          goto LABEL_30;
        }
        uint64_t v107 = v83;
        (*v74)(v20, &v107, v17);
        swift_unknownObjectRelease();
      }
      uint64_t v78 = swift_allocObject();
      *(_OWORD *)(v78 + 16) = v104;
      uint64_t v107 = 0x20786966667553;
      int64_t v108 = 0xE700000000000000;
      uint64_t v106 = v61;
      sub_24A5BC430();
      sub_24A5BB6F0();
      swift_bridgeObjectRelease();
      uint64_t v79 = v107;
      int64_t v80 = v108;
      *(void *)(v78 + 56) = MEMORY[0x263F8D310];
      *(void *)(v78 + 32) = v79;
      *(void *)(v78 + 40) = v80;
      sub_24A5BC600();
      swift_bridgeObjectRelease();
      if (__OFADD__(v61, 1)) {
        goto LABEL_27;
      }
      v81._uint64_t countAndFlagsBits = 8224;
      v81._object = (void *)0xE200000000000000;
      v82._uint64_t countAndFlagsBits = 8224;
      v82._object = (void *)0xE200000000000000;
      Rope._dump(heightLimit:firstPrefix:restPrefix:)(v102, v81, v82);
      (*v75)(v20, v17);
      ++v61;
      if (!v73) {
        goto LABEL_25;
      }
    }
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v108 >= v107)
  {
    if (v107 >= v108) {
      goto LABEL_29;
    }
    uint64_t v26 = (void (**)(char *, uint64_t))(v105 + 8);
    long long v104 = xmmword_24A5BDAE0;
    do
    {
      __swift_instantiateConcreteTypeFromMangledName(qword_26979B058);
      Swift::Int v27 = heightLimit;
      uint64_t v28 = swift_allocObject();
      *(_OWORD *)(v28 + 16) = v104;
      uint64_t v107 = 0;
      int64_t v108 = 0xE000000000000000;
      sub_24A5BB6F0();
      uint64_t v106 = v25;
      sub_24A5BC4E0();
      sub_24A5BB6F0();
      uint64_t v29 = v107;
      int64_t v30 = v108;
      *(void *)(v28 + 56) = MEMORY[0x263F8D310];
      *(void *)(v28 + 32) = v29;
      *(void *)(v28 + 40) = v30;
      sub_24A5BC600();
      heightLimit = v27;
      swift_bridgeObjectRelease();
      sub_24A5BBA20();
      v31._uint64_t countAndFlagsBits = 8224;
      v31._object = (void *)0xE200000000000000;
      v32._uint64_t countAndFlagsBits = 8224;
      v32._object = (void *)0xE200000000000000;
      Rope._dump(heightLimit:firstPrefix:restPrefix:)(v27, v31, v32);
      (*v26)(v22, v17);
      ++v25;
    }
    while (v24 != v25);
    goto LABEL_6;
  }
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
}

uint64_t type metadata accessor for Rope.Builder()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_24A4F299C(unint64_t a1, uint64_t a2)
{
  uint64_t result = _swift_isClassOrObjCExistentialType();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v5 = a2 & 0xFFFFFFFFFFFFFF8;
  if ((result & 1) == 0) {
    uint64_t v5 = a2;
  }
  if (*(void *)(v5 + 16) <= a1) {
    goto LABEL_7;
  }
  return result;
}

uint64_t sub_24A4F29F0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Rope();
  MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v6 - v3, a1, v2);
  sub_24A5BB9F0();
  return sub_24A5BB9D0();
}

uint64_t sub_24A4F2AE0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Rope._Node();
  uint64_t v3 = sub_24A5BBD20();
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v12 - v4;
  uint64_t v6 = type metadata accessor for Rope();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - v8;
  uint64_t v10 = *(void *)(v2 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v5, a1, v2);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v5, 0, 1, v2);
  Rope.init(root:)((uint64_t)v5, (uint64_t)v9);
  sub_24A4F29F0((uint64_t)v9);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_24A4F2CB0(uint64_t a1, uint64_t a2)
{
  return sub_24A4F2CE0(a1, a2, (uint64_t (*)(char *, uint64_t))Rope.Builder._insertBeforeTip(_:));
}

uint64_t sub_24A4F2CC8(uint64_t a1, uint64_t a2)
{
  return sub_24A4F2CE0(a1, a2, (uint64_t (*)(char *, uint64_t))Rope.Builder._insertAfterTip(_:));
}

uint64_t sub_24A4F2CE0(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, uint64_t))
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Rope._Item();
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  Rope._Item.init(_:)((uint64_t)v9, v6, (uint64_t)v12);
  return a3(v12, a2);
}

uint64_t sub_24A4F2E2C(uint64_t a1)
{
  return sub_24A4EF214(a1, *(uint64_t (**)(uint64_t, char *))(v1 + 40)) & 1;
}

uint64_t sub_24A4F2E54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 40);
}

uint64_t sub_24A4F2E5C()
{
  type metadata accessor for Rope._Node();
  uint64_t result = sub_24A5BBD20();
  if (v1 <= 0x3F)
  {
    type metadata accessor for Rope._Item();
    uint64_t result = sub_24A5BBD20();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_24A4F2F70(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(_DWORD *)(v7 + 80);
  uint64_t v10 = v9 | 7;
  uint64_t v11 = v9 + 8;
  size_t v12 = ((v9 + 8) & ~v9) + *(void *)(v7 + 64);
  uint64_t v13 = *(void *)(v5 - 8);
  unsigned int v14 = *(_DWORD *)(v13 + 84);
  uint64_t v15 = *(_DWORD *)(v13 + 80);
  uint64_t v16 = *(void *)(v13 + 64);
  if (v14) {
    size_t v17 = *(void *)(v13 + 64);
  }
  else {
    size_t v17 = v16 + 1;
  }
  int v18 = (*(_DWORD *)(v13 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000;
  uint64_t v19 = *a2;
  *a1 = *a2;
  if ((v10 | v15) == 7
    && v18 == 0
    && ((v17 + 7 + ((v17 + v15 + ((v12 + v15 + ((v9 + 8) & ~(v9 | 7))) & ~v15)) & ~v15)) & 0xFFFFFFFFFFFFFFF8) + 8 <= 0x18)
  {
    size_t v46 = v17 + v15;
    size_t v47 = v17 + 7;
    size_t __n = v17;
    unsigned int v52 = v14;
    uint64_t v48 = v16;
    uint64_t v49 = v13;
    uint64_t v50 = v5;
    uint64_t v23 = ~v10;
    uint64_t v24 = ~v9;
    uint64_t v25 = (char *)a1 + v10;
    uint64_t v26 = (char *)a2 + v10;
    Swift::Int v27 = (void *)((unint64_t)(v25 + 8) & v23);
    uint64_t v28 = (uint64_t *)((unint64_t)(v26 + 8) & v23);
    swift_bridgeObjectRetain();
    uint64_t v51 = a1;
    if ((v8 & 0x80000000) != 0)
    {
      uint64_t v30 = ~v15;
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)v28 + v11) & v24, v8, AssociatedTypeWitness))
      {
LABEL_17:
        memcpy(v27, v28, v12);
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v29 = *v28;
      if ((unint64_t)*v28 >= 0xFFFFFFFF) {
        LODWORD(v29) = -1;
      }
      uint64_t v30 = ~v15;
      if (v29 != -1) {
        goto LABEL_17;
      }
    }
    *Swift::Int v27 = *v28;
    Swift::String v31 = *(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16);
    swift_unknownObjectRetain();
    v31(((unint64_t)v27 + v11) & v24, ((unint64_t)v28 + v11) & v24, AssociatedTypeWitness);
LABEL_20:
    Swift::String v32 = (char *)v28 + v12;
    uint64_t v33 = (unsigned char *)(((unint64_t)v27 + v12 + v15) & v30);
    uint64_t v34 = (unsigned __int16 *)((unint64_t)&v32[v15] & v30);
    if (v52)
    {
      uint64_t v35 = v49;
      uint64_t v36 = v48;
      if (!(*(unsigned int (**)(unsigned __int16 *, void, uint64_t))(v49 + 48))(v34, v52, v50))
      {
LABEL_39:
        (*(void (**)(unsigned char *, unsigned __int16 *, uint64_t))(v35 + 16))(v33, v34, v50);
        if (v52)
        {
          uint64_t v40 = (unsigned char *)((unint64_t)&v33[v46] & v30);
          Swift::String v41 = (unsigned __int8 *)(((unint64_t)v34 + v46) & v30);
LABEL_41:
          uint64_t v22 = v51;
          if (!(*(unsigned int (**)(unsigned __int8 *, void, uint64_t))(v35 + 48))(v41, v52, v50))
          {
LABEL_59:
            (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v35 + 16))(v40, v41, v50);
            if (!v52) {
              v40[v36] = 0;
            }
            goto LABEL_61;
          }
LABEL_58:
          memcpy(v40, v41, __n);
LABEL_61:
          *(void *)((unint64_t)&v40[v47] & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&v41[v47] & 0xFFFFFFFFFFFFFFF8);
          swift_bridgeObjectRetain();
          return v22;
        }
        v33[v36] = 0;
        uint64_t v40 = (unsigned char *)((unint64_t)&v33[v46] & v30);
        Swift::String v41 = (unsigned __int8 *)(((unint64_t)v34 + v46) & v30);
LABEL_44:
        uint64_t v22 = v51;
        if (!v41[v36]) {
          goto LABEL_59;
        }
        int v42 = (v41[v36] - 1) << (8 * v36);
        if (v36 > 3) {
          int v42 = 0;
        }
        if (v36)
        {
          int v43 = v36 <= 3 ? v36 : 4;
          switch(v43)
          {
            case 2:
              int v44 = *(unsigned __int16 *)v41;
              break;
            case 3:
              int v44 = *(unsigned __int16 *)v41 | (v41[2] << 16);
              break;
            case 4:
              int v44 = *(_DWORD *)v41;
              break;
            default:
              int v44 = *v41;
              break;
          }
        }
        else
        {
          int v44 = 0;
        }
        if ((v44 | v42) == 0xFFFFFFFF) {
          goto LABEL_59;
        }
        goto LABEL_58;
      }
    }
    else
    {
      uint64_t v36 = v48;
      uint64_t v35 = v49;
      if (!*((unsigned char *)v34 + v48)) {
        goto LABEL_39;
      }
      int v37 = (*((unsigned __int8 *)v34 + v48) - 1) << (8 * v48);
      if (v48 > 3) {
        int v37 = 0;
      }
      if (v48)
      {
        int v38 = v48 <= 3 ? v48 : 4;
        switch(v38)
        {
          case 2:
            int v39 = *v34;
            break;
          case 3:
            int v39 = *v34 | (*((unsigned __int8 *)v34 + 2) << 16);
            break;
          case 4:
            int v39 = *(_DWORD *)v34;
            break;
          default:
            int v39 = *(unsigned __int8 *)v34;
            break;
        }
      }
      else
      {
        int v39 = 0;
      }
      if ((v39 | v37) == 0xFFFFFFFF) {
        goto LABEL_39;
      }
    }
    memcpy(v33, v34, __n);
    uint64_t v40 = (unsigned char *)((unint64_t)&v33[v46] & v30);
    Swift::String v41 = (unsigned __int8 *)(((unint64_t)v34 + v46) & v30);
    if (v52) {
      goto LABEL_41;
    }
    goto LABEL_44;
  }
  uint64_t v22 = (uint64_t *)(v19 + (((v10 | v15) + 16) & ~(v10 | v15)));
  swift_retain();
  return v22;
}

uint64_t sub_24A4F345C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (uint64_t *)((a1 + (v7 | 7) + 8) & ~(v7 | 7));
  uint64_t v9 = ~v7;
  uint64_t v10 = v7 + 8;
  uint64_t v11 = (v7 + 8) & ~v7;
  uint64_t v12 = *(void *)(v6 + 64);
  if ((*(_DWORD *)(v6 + 84) & 0x80000000) != 0)
  {
    uint64_t v14 = v11 + v12;
    if (!(*(unsigned int (**)(unint64_t))(v6 + 48))(((unint64_t)v8 + v10) & v9))
    {
LABEL_5:
      swift_unknownObjectRelease();
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))(((unint64_t)v8 + v10) & v9, AssociatedTypeWitness);
    }
  }
  else
  {
    uint64_t v13 = *v8;
    if ((unint64_t)*v8 >= 0xFFFFFFFF) {
      LODWORD(v13) = -1;
    }
    uint64_t v14 = v11 + v12;
    if (v13 == -1) {
      goto LABEL_5;
    }
  }
  uint64_t v15 = *(void *)(v4 - 8);
  uint64_t v16 = *(unsigned __int8 *)(v15 + 80);
  size_t v17 = (unsigned __int16 *)(((unint64_t)v8 + v14 + v16) & ~v16);
  uint64_t v18 = *(unsigned int *)(v15 + 84);
  uint64_t v19 = *(void *)(v15 + 64);
  if (v18)
  {
    if ((*(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v15 + 48))(v17, v18, v4)) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (!*((unsigned char *)v17 + v19)) {
    goto LABEL_25;
  }
  int v20 = (*((unsigned __int8 *)v17 + v19) - 1) << (8 * v19);
  if (v19 > 3) {
    int v20 = 0;
  }
  if (v19)
  {
    int v21 = v19 <= 3 ? *(void *)(v15 + 64) : 4;
    switch(v21)
    {
      case 2:
        int v22 = *v17;
        break;
      case 3:
        int v22 = *v17 | (*((unsigned __int8 *)v17 + 2) << 16);
        break;
      case 4:
        int v22 = *(_DWORD *)v17;
        break;
      default:
        int v22 = *(unsigned __int8 *)v17;
        break;
    }
  }
  else
  {
    int v22 = 0;
  }
  if ((v22 | v20) == 0xFFFFFFFF) {
LABEL_25:
  }
    (*(void (**)(unsigned __int16 *, uint64_t))(v15 + 8))(v17, v4);
LABEL_26:
  if (v18) {
    uint64_t v23 = v19;
  }
  else {
    uint64_t v23 = v19 + 1;
  }
  uint64_t v24 = (unsigned __int16 *)(((unint64_t)v17 + v23 + v16) & ~v16);
  if (v18)
  {
    if ((*(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v15 + 48))(v24, v18, v4)) {
      goto LABEL_47;
    }
    goto LABEL_46;
  }
  if (!*((unsigned char *)v24 + v19)) {
    goto LABEL_46;
  }
  int v25 = (*((unsigned __int8 *)v24 + v19) - 1) << (8 * v19);
  if (v19 > 3) {
    int v25 = 0;
  }
  if (v19)
  {
    int v26 = v19 <= 3 ? v19 : 4;
    switch(v26)
    {
      case 2:
        int v27 = *v24;
        break;
      case 3:
        int v27 = *v24 | (*((unsigned __int8 *)v24 + 2) << 16);
        break;
      case 4:
        int v27 = *(_DWORD *)v24;
        break;
      default:
        int v27 = *(unsigned __int8 *)v24;
        break;
    }
  }
  else
  {
    int v27 = 0;
  }
  if ((v27 | v25) == 0xFFFFFFFF) {
LABEL_46:
  }
    (*(void (**)(unsigned __int16 *, uint64_t))(v15 + 8))(v24, v4);
LABEL_47:
  return swift_bridgeObjectRelease();
}

void *sub_24A4F37E8(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v40 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v7 | 7) + 8;
  Swift::String v41 = a1;
  uint64_t v9 = (void *)(((unint64_t)a1 + v8) & ~(v7 | 7));
  uint64_t v10 = (uint64_t *)(((unint64_t)a2 + v8) & ~(v7 | 7));
  uint64_t v11 = *(unsigned int *)(v6 + 84);
  uint64_t v12 = ~v7;
  uint64_t v13 = v7 + 8;
  uint64_t v14 = (v7 + 8) & ~v7;
  uint64_t v15 = *(void *)(v6 + 64);
  swift_bridgeObjectRetain();
  if ((v11 & 0x80000000) != 0)
  {
    int v18 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(((unint64_t)v10 + v13) & v12, v11, AssociatedTypeWitness);
    size_t v17 = v14 + v15;
    if (v18)
    {
LABEL_5:
      memcpy(v9, v10, v17);
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v16 = *v10;
    if ((unint64_t)*v10 >= 0xFFFFFFFF) {
      LODWORD(v16) = -1;
    }
    size_t v17 = v14 + v15;
    if (v16 != -1) {
      goto LABEL_5;
    }
  }
  *uint64_t v9 = *v10;
  uint64_t v19 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16);
  swift_unknownObjectRetain();
  v19(((unint64_t)v9 + v13) & v12, ((unint64_t)v10 + v13) & v12, AssociatedTypeWitness);
LABEL_8:
  int v20 = (char *)v10 + v17;
  uint64_t v21 = *(void *)(v40 - 8);
  uint64_t v22 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v23 = ~v22;
  uint64_t v24 = (unsigned char *)(((unint64_t)v9 + v17 + v22) & ~v22);
  int v25 = (unsigned __int16 *)((unint64_t)&v20[v22] & ~v22);
  uint64_t v26 = *(unsigned int *)(v21 + 84);
  size_t v27 = *(void *)(v21 + 64);
  if (v26)
  {
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v21 + 48))((unint64_t)&v20[v22] & ~v22, v26, v40))
    {
LABEL_31:
      (*(void (**)(unsigned char *, unsigned __int16 *, uint64_t))(v21 + 16))(v24, v25, v40);
      if (v26)
      {
        Swift::String v32 = (void *)((unint64_t)&v24[v27 + v22] & v23);
        uint64_t v33 = (unsigned __int16 *)(((unint64_t)v25 + v27 + v22) & v23);
        size_t v31 = v27;
        goto LABEL_33;
      }
      v24[v27] = 0;
      size_t v31 = v27 + 1;
      size_t v35 = v27 + 1 + v22;
      Swift::String v32 = (void *)((unint64_t)&v24[v35] & v23);
      uint64_t v33 = (unsigned __int16 *)(((unint64_t)v25 + v35) & v23);
      int v34 = *((unsigned __int8 *)v33 + v27);
      if (!*((unsigned char *)v33 + v27)) {
        goto LABEL_50;
      }
LABEL_36:
      int v36 = (v34 - 1) << (8 * v27);
      if (v27 > 3) {
        int v36 = 0;
      }
      if (v27)
      {
        if (v27 <= 3) {
          int v37 = v27;
        }
        else {
          int v37 = 4;
        }
        switch(v37)
        {
          case 2:
            int v38 = *v33;
            break;
          case 3:
            int v38 = *v33 | (*((unsigned __int8 *)v33 + 2) << 16);
            break;
          case 4:
            int v38 = *(_DWORD *)v33;
            break;
          default:
            int v38 = *(unsigned __int8 *)v33;
            break;
        }
      }
      else
      {
        int v38 = 0;
      }
      if ((v38 | v36) == 0xFFFFFFFF) {
        goto LABEL_50;
      }
LABEL_49:
      memcpy(v32, v33, v31);
      goto LABEL_52;
    }
  }
  else
  {
    if (!*((unsigned char *)v25 + v27)) {
      goto LABEL_31;
    }
    int v28 = (*((unsigned __int8 *)v25 + v27) - 1) << (8 * v27);
    if (v27 > 3) {
      int v28 = 0;
    }
    if (v27)
    {
      int v29 = v27 <= 3 ? *(void *)(v21 + 64) : 4;
      switch(v29)
      {
        case 2:
          int v30 = *v25;
          break;
        case 3:
          int v30 = *(unsigned __int16 *)((unint64_t)&v20[v22] & ~v22) | (*(unsigned __int8 *)(((unint64_t)&v20[v22] & ~v22)
                                                                                                + 2) << 16);
          break;
        case 4:
          int v30 = *(_DWORD *)v25;
          break;
        default:
          int v30 = *(unsigned __int8 *)v25;
          break;
      }
    }
    else
    {
      int v30 = 0;
    }
    if ((v30 | v28) == 0xFFFFFFFF) {
      goto LABEL_31;
    }
  }
  if (v26) {
    size_t v31 = v27;
  }
  else {
    size_t v31 = v27 + 1;
  }
  memcpy(v24, v25, v31);
  Swift::String v32 = (void *)((unint64_t)&v24[v31 + v22] & v23);
  uint64_t v33 = (unsigned __int16 *)(((unint64_t)v25 + v31 + v22) & v23);
  if (!v26)
  {
    int v34 = *((unsigned __int8 *)v33 + v27);
    if (!*((unsigned char *)v33 + v27)) {
      goto LABEL_50;
    }
    goto LABEL_36;
  }
LABEL_33:
  if ((*(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v21 + 48))(v33, v26, v40)) {
    goto LABEL_49;
  }
LABEL_50:
  (*(void (**)(void *, unsigned __int16 *, uint64_t))(v21 + 16))(v32, v33, v40);
  if (!v26) {
    *((unsigned char *)v32 + v27) = 0;
  }
LABEL_52:
  *(void *)(((unint64_t)v32 + v31 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v33 + v31 + 7) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  return v41;
}

void *sub_24A4F3C54(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v9 | 7) + 8;
  int64_t v66 = a1;
  uint64_t v11 = (void *)(((unint64_t)a1 + v10) & ~(v9 | 7));
  uint64_t v12 = (uint64_t *)(((unint64_t)a2 + v10) & ~(v9 | 7));
  uint64_t v13 = *(unsigned int *)(v8 + 84);
  uint64_t v14 = ~v9;
  uint64_t v15 = v9 + 8;
  size_t v16 = ((v9 + 8) & ~v9) + *(void *)(v8 + 64);
  if ((v13 & 0x80000000) == 0)
  {
    uint64_t v17 = *v12;
    if ((unint64_t)*v12 >= 0xFFFFFFFF) {
      LODWORD(v17) = -1;
    }
    int v18 = v17 + 1;
    if (*v11 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
LABEL_8:
    if (v18) {
      goto LABEL_9;
    }
    *uint64_t v11 = *v12;
    int v20 = *(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16);
    swift_unknownObjectRetain();
    v20(((unint64_t)v11 + v15) & v14, ((unint64_t)v12 + v15) & v14, AssociatedTypeWitness);
    goto LABEL_12;
  }
  uint64_t v19 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
  int v64 = v19(((unint64_t)v11 + v15) & v14, v13, AssociatedTypeWitness);
  int v18 = v19(((unint64_t)v12 + v15) & v14, v13, AssociatedTypeWitness);
  if (v64) {
    goto LABEL_8;
  }
LABEL_5:
  if (v18)
  {
    swift_unknownObjectRelease();
    (*(void (**)(unint64_t, uint64_t))(v8 + 8))(((unint64_t)v11 + v15) & v14, AssociatedTypeWitness);
LABEL_9:
    memcpy(v11, v12, v16);
    goto LABEL_12;
  }
  *uint64_t v11 = *v12;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))(((unint64_t)v11 + v15) & v14, ((unint64_t)v12 + v15) & v14, AssociatedTypeWitness);
LABEL_12:
  uint64_t v21 = (char *)v12 + v16;
  uint64_t v22 = *(void *)(v6 - 8);
  uint64_t v23 = *(unsigned __int8 *)(v22 + 80);
  uint64_t v24 = ~v23;
  int v25 = (unsigned __int16 *)(((unint64_t)v11 + v16 + v23) & ~v23);
  uint64_t v26 = (unsigned __int16 *)((unint64_t)&v21[v23] & ~v23);
  uint64_t v27 = *(unsigned int *)(v22 + 84);
  size_t v28 = *(void *)(v22 + 64);
  if (v27)
  {
    uint64_t v65 = *(unsigned __int8 *)(v22 + 80);
    uint64_t v29 = *(void *)(v6 - 8);
    int v30 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v22 + 48);
    int v31 = v30(v25, v27, v6);
    int v32 = v30(v26, v27, v6);
    uint64_t v22 = v29;
    uint64_t v23 = v65;
    if (v31)
    {
      if (!v32)
      {
LABEL_70:
        (*(void (**)(unsigned __int16 *, unsigned __int16 *, uint64_t))(v22 + 16))(v25, v26, v6);
        if (v27)
        {
          int v44 = (unsigned __int8 *)(((unint64_t)v25 + v28 + v23) & v24);
          uint64_t v45 = (unsigned __int8 *)(((unint64_t)v26 + v28 + v23) & v24);
          size_t v43 = v28;
          goto LABEL_72;
        }
        *((unsigned char *)v25 + v28) = 0;
        size_t v43 = v28 + 1;
        size_t v50 = v28 + 1 + v23;
        int v44 = (unsigned __int8 *)(((unint64_t)v25 + v50) & v24);
        uint64_t v45 = (unsigned __int8 *)(((unint64_t)v26 + v50) & v24);
        goto LABEL_76;
      }
      goto LABEL_56;
    }
  }
  else
  {
    if (*((unsigned char *)v25 + v28))
    {
      int v33 = (*((unsigned __int8 *)v25 + v28) - 1) << (8 * v28);
      if (v28 > 3) {
        int v33 = 0;
      }
      if (v28)
      {
        int v34 = v28 <= 3 ? *(void *)(v22 + 64) : 4;
        switch(v34)
        {
          case 2:
            int v35 = *v25;
            break;
          case 3:
            int v35 = *v25 | (*((unsigned __int8 *)v25 + 2) << 16);
            break;
          case 4:
            int v35 = *(_DWORD *)v25;
            break;
          default:
            int v35 = *(unsigned __int8 *)v25;
            break;
        }
      }
      else
      {
        int v35 = 0;
      }
      if ((v35 | v33) != 0xFFFFFFFF)
      {
        if (!*((unsigned char *)v26 + v28)) {
          goto LABEL_70;
        }
        int v36 = (*((unsigned __int8 *)v26 + v28) - 1) << (8 * v28);
        if (v28 > 3) {
          int v36 = 0;
        }
        if (v28)
        {
          int v37 = v28 <= 3 ? *(void *)(v22 + 64) : 4;
          switch(v37)
          {
            case 2:
              int v38 = *v26;
              break;
            case 3:
              int v38 = *v26 | (*((unsigned __int8 *)v26 + 2) << 16);
              break;
            case 4:
              int v38 = *(_DWORD *)v26;
              break;
            default:
              int v38 = *(unsigned __int8 *)v26;
              break;
          }
        }
        else
        {
          int v38 = 0;
        }
        if ((v38 | v36) == 0xFFFFFFFF) {
          goto LABEL_70;
        }
        goto LABEL_56;
      }
    }
    if (!*((unsigned char *)v26 + v28))
    {
LABEL_60:
      (*(void (**)(unsigned __int16 *, unsigned __int16 *, uint64_t))(v22 + 24))(v25, v26, v6);
      goto LABEL_61;
    }
    int v39 = (*((unsigned __int8 *)v26 + v28) - 1) << (8 * v28);
    if (v28 > 3) {
      int v39 = 0;
    }
    if (v28)
    {
      if (v28 <= 3) {
        int v40 = *(void *)(v22 + 64);
      }
      else {
        int v40 = 4;
      }
      switch(v40)
      {
        case 2:
          int v41 = *v26;
          break;
        case 3:
          int v41 = *v26 | (*((unsigned __int8 *)v26 + 2) << 16);
          break;
        case 4:
          int v41 = *(_DWORD *)v26;
          break;
        default:
          int v41 = *(unsigned __int8 *)v26;
          break;
      }
    }
    else
    {
      int v41 = 0;
    }
    int v32 = (v41 | v39) + 1;
  }
  if (!v32) {
    goto LABEL_60;
  }
  (*(void (**)(unsigned __int16 *, uint64_t))(v22 + 8))(v25, v6);
LABEL_56:
  if (v27) {
    size_t v42 = v28;
  }
  else {
    size_t v42 = v28 + 1;
  }
  memcpy(v25, v26, v42);
LABEL_61:
  if (v27) {
    size_t v43 = v28;
  }
  else {
    size_t v43 = v28 + 1;
  }
  int v44 = (unsigned __int8 *)(((unint64_t)v25 + v43 + v23) & v24);
  uint64_t v45 = (unsigned __int8 *)(((unint64_t)v26 + v43 + v23) & v24);
  if (v27)
  {
LABEL_72:
    uint64_t v46 = v22;
    size_t v47 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v22 + 48);
    int v48 = v47(v44, v27, v6);
    int v49 = v47(v45, v27, v6);
    if (v48)
    {
      if (v49)
      {
LABEL_74:
        memcpy(v44, v45, v43);
LABEL_126:
        uint64_t v62 = v66;
        goto LABEL_127;
      }
      goto LABEL_123;
    }
    goto LABEL_115;
  }
LABEL_76:
  char v51 = 8 * v28;
  if (v44[v28])
  {
    int v52 = (v44[v28] - 1) << v51;
    if (v28 > 3) {
      int v52 = 0;
    }
    if (v28)
    {
      int v53 = v28 <= 3 ? v28 : 4;
      switch(v53)
      {
        case 2:
          int v54 = *(unsigned __int16 *)v44;
          break;
        case 3:
          int v54 = *(unsigned __int16 *)v44 | (v44[2] << 16);
          break;
        case 4:
          int v54 = *(_DWORD *)v44;
          break;
        default:
          int v54 = *v44;
          break;
      }
    }
    else
    {
      int v54 = 0;
    }
    if ((v54 | v52) != 0xFFFFFFFF)
    {
      if (!v45[v28]) {
        goto LABEL_124;
      }
      int v55 = (v45[v28] - 1) << v51;
      if (v28 > 3) {
        int v55 = 0;
      }
      if (v28)
      {
        if (v28 <= 3) {
          int v56 = v28;
        }
        else {
          int v56 = 4;
        }
        uint64_t v46 = v22;
        switch(v56)
        {
          case 2:
            int v57 = *(unsigned __int16 *)v45;
            break;
          case 3:
            int v57 = *(unsigned __int16 *)v45 | (v45[2] << 16);
            break;
          case 4:
            int v57 = *(_DWORD *)v45;
            break;
          default:
            int v57 = *v45;
            break;
        }
      }
      else
      {
        uint64_t v46 = v22;
        int v57 = 0;
      }
      if ((v57 | v55) != 0xFFFFFFFF) {
        goto LABEL_74;
      }
LABEL_123:
      uint64_t v22 = v46;
LABEL_124:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v22 + 16))(v44, v45, v6);
      if (!v27) {
        v44[v28] = 0;
      }
      goto LABEL_126;
    }
  }
  if (!v45[v28])
  {
    uint64_t v62 = v66;
    uint64_t v61 = v6;
LABEL_118:
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v22 + 24))(v44, v45, v61);
    goto LABEL_127;
  }
  int v58 = (v45[v28] - 1) << v51;
  if (v28 > 3) {
    int v58 = 0;
  }
  if (v28)
  {
    if (v28 <= 3) {
      int v59 = v28;
    }
    else {
      int v59 = 4;
    }
    switch(v59)
    {
      case 2:
        uint64_t v46 = v22;
        int v60 = *(unsigned __int16 *)v45;
        break;
      case 3:
        uint64_t v46 = v22;
        int v60 = *(unsigned __int16 *)v45 | (v45[2] << 16);
        break;
      case 4:
        uint64_t v46 = v22;
        int v60 = *(_DWORD *)v45;
        break;
      default:
        uint64_t v46 = v22;
        int v60 = *v45;
        break;
    }
  }
  else
  {
    uint64_t v46 = v22;
    int v60 = 0;
  }
  int v49 = (v60 | v58) + 1;
LABEL_115:
  uint64_t v62 = v66;
  if (!v49)
  {
    uint64_t v61 = v6;
    uint64_t v22 = v46;
    goto LABEL_118;
  }
  (*(void (**)(unsigned __int8 *, uint64_t))(v46 + 8))(v44, v6);
  memcpy(v44, v45, v43);
LABEL_127:
  *(void *)((unint64_t)&v44[v43 + 7] & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&v45[v43 + 7] & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v62;
}

void *sub_24A4F44DC(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v8 | 7) + 8;
  uint64_t v10 = (void *)(((unint64_t)a1 + v9) & ~(v8 | 7));
  uint64_t v11 = (uint64_t *)(((unint64_t)a2 + v9) & ~(v8 | 7));
  uint64_t v12 = ~v8;
  uint64_t v13 = v8 + 8;
  uint64_t v14 = (v8 + 8) & ~v8;
  uint64_t v15 = *(void *)(v7 + 64);
  if ((*(_DWORD *)(v7 + 84) & 0x80000000) != 0)
  {
    size_t v17 = v14 + v15;
    if ((*(unsigned int (**)(unint64_t))(v7 + 48))(((unint64_t)v11 + v13) & v12))
    {
LABEL_5:
      memcpy(v10, v11, v17);
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v16 = *v11;
    if ((unint64_t)*v11 >= 0xFFFFFFFF) {
      LODWORD(v16) = -1;
    }
    size_t v17 = v14 + v15;
    if (v16 != -1) {
      goto LABEL_5;
    }
  }
  *uint64_t v10 = *v11;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32))(((unint64_t)v10 + v13) & v12, ((unint64_t)v11 + v13) & v12, AssociatedTypeWitness);
LABEL_8:
  int v18 = (char *)v11 + v17;
  uint64_t v19 = *(void *)(v5 - 8);
  uint64_t v20 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = ~v20;
  uint64_t v22 = (unsigned char *)(((unint64_t)v10 + v17 + v20) & ~v20);
  uint64_t v23 = (unsigned __int16 *)((unint64_t)&v18[v20] & ~v20);
  uint64_t v24 = *(unsigned int *)(v19 + 84);
  size_t v25 = *(void *)(v19 + 64);
  if (v24)
  {
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v19 + 48))((unint64_t)&v18[v20] & ~v20, v24, v5))
    {
LABEL_31:
      (*(void (**)(unsigned char *, unsigned __int16 *, uint64_t))(v19 + 32))(v22, v23, v5);
      if (v24)
      {
        int v30 = (void *)((unint64_t)&v22[v25 + v20] & v21);
        int v31 = (unsigned __int16 *)(((unint64_t)v23 + v25 + v20) & v21);
        size_t v29 = v25;
        goto LABEL_33;
      }
      v22[v25] = 0;
      size_t v29 = v25 + 1;
      size_t v33 = v25 + 1 + v20;
      int v30 = (void *)((unint64_t)&v22[v33] & v21);
      int v31 = (unsigned __int16 *)(((unint64_t)v23 + v33) & v21);
      int v32 = *((unsigned __int8 *)v31 + v25);
      if (!*((unsigned char *)v31 + v25)) {
        goto LABEL_50;
      }
LABEL_36:
      int v34 = (v32 - 1) << (8 * v25);
      if (v25 > 3) {
        int v34 = 0;
      }
      if (v25)
      {
        if (v25 <= 3) {
          int v35 = v25;
        }
        else {
          int v35 = 4;
        }
        switch(v35)
        {
          case 2:
            int v36 = *v31;
            break;
          case 3:
            int v36 = *v31 | (*((unsigned __int8 *)v31 + 2) << 16);
            break;
          case 4:
            int v36 = *(_DWORD *)v31;
            break;
          default:
            int v36 = *(unsigned __int8 *)v31;
            break;
        }
      }
      else
      {
        int v36 = 0;
      }
      if ((v36 | v34) == 0xFFFFFFFF) {
        goto LABEL_50;
      }
LABEL_49:
      memcpy(v30, v31, v29);
      goto LABEL_52;
    }
  }
  else
  {
    if (!*((unsigned char *)v23 + v25)) {
      goto LABEL_31;
    }
    int v26 = (*((unsigned __int8 *)v23 + v25) - 1) << (8 * v25);
    if (v25 > 3) {
      int v26 = 0;
    }
    if (v25)
    {
      int v27 = v25 <= 3 ? *(void *)(v19 + 64) : 4;
      switch(v27)
      {
        case 2:
          int v28 = *v23;
          break;
        case 3:
          int v28 = *(unsigned __int16 *)((unint64_t)&v18[v20] & ~v20) | (*(unsigned __int8 *)(((unint64_t)&v18[v20] & ~v20)
                                                                                                + 2) << 16);
          break;
        case 4:
          int v28 = *(_DWORD *)v23;
          break;
        default:
          int v28 = *(unsigned __int8 *)v23;
          break;
      }
    }
    else
    {
      int v28 = 0;
    }
    if ((v28 | v26) == 0xFFFFFFFF) {
      goto LABEL_31;
    }
  }
  if (v24) {
    size_t v29 = v25;
  }
  else {
    size_t v29 = v25 + 1;
  }
  memcpy(v22, v23, v29);
  int v30 = (void *)((unint64_t)&v22[v29 + v20] & v21);
  int v31 = (unsigned __int16 *)(((unint64_t)v23 + v29 + v20) & v21);
  if (!v24)
  {
    int v32 = *((unsigned __int8 *)v31 + v25);
    if (!*((unsigned char *)v31 + v25)) {
      goto LABEL_50;
    }
    goto LABEL_36;
  }
LABEL_33:
  if ((*(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v19 + 48))(v31, v24, v5)) {
    goto LABEL_49;
  }
LABEL_50:
  (*(void (**)(void *, unsigned __int16 *, uint64_t))(v19 + 32))(v30, v31, v5);
  if (!v24) {
    *((unsigned char *)v30 + v25) = 0;
  }
LABEL_52:
  *(void *)(((unint64_t)v30 + v29 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v31 + v29 + 7) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *sub_24A4F491C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v9 | 7) + 8;
  uint64_t v65 = a1;
  uint64_t v11 = (void *)(((unint64_t)a1 + v10) & ~(v9 | 7));
  uint64_t v12 = (uint64_t *)(((unint64_t)a2 + v10) & ~(v9 | 7));
  uint64_t v13 = *(unsigned int *)(v8 + 84);
  uint64_t v14 = ~v9;
  uint64_t v15 = v9 + 8;
  size_t v16 = ((v9 + 8) & ~v9) + *(void *)(v8 + 64);
  if ((v13 & 0x80000000) == 0)
  {
    uint64_t v17 = *v12;
    if ((unint64_t)*v12 >= 0xFFFFFFFF) {
      LODWORD(v17) = -1;
    }
    int v18 = v17 + 1;
    if (*v11 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
LABEL_8:
    if (v18) {
      goto LABEL_9;
    }
    *uint64_t v11 = *v12;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))(((unint64_t)v11 + v15) & v14, ((unint64_t)v12 + v15) & v14, AssociatedTypeWitness);
    goto LABEL_12;
  }
  uint64_t v19 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
  int v63 = v19(((unint64_t)v11 + v15) & v14, v13, AssociatedTypeWitness);
  int v18 = v19(((unint64_t)v12 + v15) & v14, v13, AssociatedTypeWitness);
  if (v63) {
    goto LABEL_8;
  }
LABEL_5:
  if (v18)
  {
    swift_unknownObjectRelease();
    (*(void (**)(unint64_t, uint64_t))(v8 + 8))(((unint64_t)v11 + v15) & v14, AssociatedTypeWitness);
LABEL_9:
    memcpy(v11, v12, v16);
    goto LABEL_12;
  }
  *uint64_t v11 = *v12;
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))(((unint64_t)v11 + v15) & v14, ((unint64_t)v12 + v15) & v14, AssociatedTypeWitness);
LABEL_12:
  uint64_t v20 = (char *)v12 + v16;
  uint64_t v21 = *(void *)(v6 - 8);
  uint64_t v22 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v23 = ~v22;
  uint64_t v24 = (unsigned __int16 *)(((unint64_t)v11 + v16 + v22) & ~v22);
  size_t v25 = (unsigned __int16 *)((unint64_t)&v20[v22] & ~v22);
  uint64_t v26 = *(unsigned int *)(v21 + 84);
  size_t v27 = *(void *)(v21 + 64);
  if (v26)
  {
    uint64_t v64 = *(unsigned __int8 *)(v21 + 80);
    uint64_t v28 = *(void *)(v6 - 8);
    size_t v29 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v21 + 48);
    int v30 = v29(v24, v26, v6);
    int v31 = v29(v25, v26, v6);
    uint64_t v21 = v28;
    uint64_t v22 = v64;
    if (v30)
    {
      if (!v31)
      {
LABEL_70:
        (*(void (**)(unsigned __int16 *, unsigned __int16 *, uint64_t))(v21 + 32))(v24, v25, v6);
        if (v26)
        {
          size_t v43 = (unsigned __int8 *)(((unint64_t)v24 + v27 + v22) & v23);
          int v44 = (unsigned __int8 *)(((unint64_t)v25 + v27 + v22) & v23);
          size_t v42 = v27;
          goto LABEL_72;
        }
        *((unsigned char *)v24 + v27) = 0;
        size_t v42 = v27 + 1;
        size_t v49 = v27 + 1 + v22;
        size_t v43 = (unsigned __int8 *)(((unint64_t)v24 + v49) & v23);
        int v44 = (unsigned __int8 *)(((unint64_t)v25 + v49) & v23);
        goto LABEL_76;
      }
      goto LABEL_56;
    }
  }
  else
  {
    if (*((unsigned char *)v24 + v27))
    {
      int v32 = (*((unsigned __int8 *)v24 + v27) - 1) << (8 * v27);
      if (v27 > 3) {
        int v32 = 0;
      }
      if (v27)
      {
        int v33 = v27 <= 3 ? *(void *)(v21 + 64) : 4;
        switch(v33)
        {
          case 2:
            int v34 = *v24;
            break;
          case 3:
            int v34 = *v24 | (*((unsigned __int8 *)v24 + 2) << 16);
            break;
          case 4:
            int v34 = *(_DWORD *)v24;
            break;
          default:
            int v34 = *(unsigned __int8 *)v24;
            break;
        }
      }
      else
      {
        int v34 = 0;
      }
      if ((v34 | v32) != 0xFFFFFFFF)
      {
        if (!*((unsigned char *)v25 + v27)) {
          goto LABEL_70;
        }
        int v35 = (*((unsigned __int8 *)v25 + v27) - 1) << (8 * v27);
        if (v27 > 3) {
          int v35 = 0;
        }
        if (v27)
        {
          int v36 = v27 <= 3 ? *(void *)(v21 + 64) : 4;
          switch(v36)
          {
            case 2:
              int v37 = *v25;
              break;
            case 3:
              int v37 = *v25 | (*((unsigned __int8 *)v25 + 2) << 16);
              break;
            case 4:
              int v37 = *(_DWORD *)v25;
              break;
            default:
              int v37 = *(unsigned __int8 *)v25;
              break;
          }
        }
        else
        {
          int v37 = 0;
        }
        if ((v37 | v35) == 0xFFFFFFFF) {
          goto LABEL_70;
        }
        goto LABEL_56;
      }
    }
    if (!*((unsigned char *)v25 + v27))
    {
LABEL_60:
      (*(void (**)(unsigned __int16 *, unsigned __int16 *, uint64_t))(v21 + 40))(v24, v25, v6);
      goto LABEL_61;
    }
    int v38 = (*((unsigned __int8 *)v25 + v27) - 1) << (8 * v27);
    if (v27 > 3) {
      int v38 = 0;
    }
    if (v27)
    {
      if (v27 <= 3) {
        int v39 = *(void *)(v21 + 64);
      }
      else {
        int v39 = 4;
      }
      switch(v39)
      {
        case 2:
          int v40 = *v25;
          break;
        case 3:
          int v40 = *v25 | (*((unsigned __int8 *)v25 + 2) << 16);
          break;
        case 4:
          int v40 = *(_DWORD *)v25;
          break;
        default:
          int v40 = *(unsigned __int8 *)v25;
          break;
      }
    }
    else
    {
      int v40 = 0;
    }
    int v31 = (v40 | v38) + 1;
  }
  if (!v31) {
    goto LABEL_60;
  }
  (*(void (**)(unsigned __int16 *, uint64_t))(v21 + 8))(v24, v6);
LABEL_56:
  if (v26) {
    size_t v41 = v27;
  }
  else {
    size_t v41 = v27 + 1;
  }
  memcpy(v24, v25, v41);
LABEL_61:
  if (v26) {
    size_t v42 = v27;
  }
  else {
    size_t v42 = v27 + 1;
  }
  size_t v43 = (unsigned __int8 *)(((unint64_t)v24 + v42 + v22) & v23);
  int v44 = (unsigned __int8 *)(((unint64_t)v25 + v42 + v22) & v23);
  if (v26)
  {
LABEL_72:
    uint64_t v45 = v21;
    uint64_t v46 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v21 + 48);
    int v47 = v46(v43, v26, v6);
    int v48 = v46(v44, v26, v6);
    if (v47)
    {
      if (v48)
      {
LABEL_74:
        memcpy(v43, v44, v42);
LABEL_126:
        uint64_t v61 = v65;
        goto LABEL_127;
      }
      goto LABEL_123;
    }
    goto LABEL_115;
  }
LABEL_76:
  char v50 = 8 * v27;
  if (v43[v27])
  {
    int v51 = (v43[v27] - 1) << v50;
    if (v27 > 3) {
      int v51 = 0;
    }
    if (v27)
    {
      int v52 = v27 <= 3 ? v27 : 4;
      switch(v52)
      {
        case 2:
          int v53 = *(unsigned __int16 *)v43;
          break;
        case 3:
          int v53 = *(unsigned __int16 *)v43 | (v43[2] << 16);
          break;
        case 4:
          int v53 = *(_DWORD *)v43;
          break;
        default:
          int v53 = *v43;
          break;
      }
    }
    else
    {
      int v53 = 0;
    }
    if ((v53 | v51) != 0xFFFFFFFF)
    {
      if (!v44[v27]) {
        goto LABEL_124;
      }
      int v54 = (v44[v27] - 1) << v50;
      if (v27 > 3) {
        int v54 = 0;
      }
      if (v27)
      {
        if (v27 <= 3) {
          int v55 = v27;
        }
        else {
          int v55 = 4;
        }
        uint64_t v45 = v21;
        switch(v55)
        {
          case 2:
            int v56 = *(unsigned __int16 *)v44;
            break;
          case 3:
            int v56 = *(unsigned __int16 *)v44 | (v44[2] << 16);
            break;
          case 4:
            int v56 = *(_DWORD *)v44;
            break;
          default:
            int v56 = *v44;
            break;
        }
      }
      else
      {
        uint64_t v45 = v21;
        int v56 = 0;
      }
      if ((v56 | v54) != 0xFFFFFFFF) {
        goto LABEL_74;
      }
LABEL_123:
      uint64_t v21 = v45;
LABEL_124:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v21 + 32))(v43, v44, v6);
      if (!v26) {
        v43[v27] = 0;
      }
      goto LABEL_126;
    }
  }
  if (!v44[v27])
  {
    uint64_t v61 = v65;
    uint64_t v60 = v6;
LABEL_118:
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v21 + 40))(v43, v44, v60);
    goto LABEL_127;
  }
  int v57 = (v44[v27] - 1) << v50;
  if (v27 > 3) {
    int v57 = 0;
  }
  if (v27)
  {
    if (v27 <= 3) {
      int v58 = v27;
    }
    else {
      int v58 = 4;
    }
    switch(v58)
    {
      case 2:
        uint64_t v45 = v21;
        int v59 = *(unsigned __int16 *)v44;
        break;
      case 3:
        uint64_t v45 = v21;
        int v59 = *(unsigned __int16 *)v44 | (v44[2] << 16);
        break;
      case 4:
        uint64_t v45 = v21;
        int v59 = *(_DWORD *)v44;
        break;
      default:
        uint64_t v45 = v21;
        int v59 = *v44;
        break;
    }
  }
  else
  {
    uint64_t v45 = v21;
    int v59 = 0;
  }
  int v48 = (v59 | v57) + 1;
LABEL_115:
  uint64_t v61 = v65;
  if (!v48)
  {
    uint64_t v60 = v6;
    uint64_t v21 = v45;
    goto LABEL_118;
  }
  (*(void (**)(unsigned __int8 *, uint64_t))(v45 + 8))(v43, v6);
  memcpy(v43, v44, v42);
LABEL_127:
  *(void *)((unint64_t)&v43[v42 + 7] & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&v44[v42 + 7] & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  return v61;
}

uint64_t sub_24A4F5180(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v7 = v6;
  unsigned int v8 = *(_DWORD *)(v6 + 84);
  if (v8 <= 0x7FFFFFFF) {
    int v9 = 0x7FFFFFFF;
  }
  else {
    int v9 = *(_DWORD *)(v6 + 84);
  }
  unsigned int v10 = v9 - 1;
  uint64_t v11 = *(void *)(v5 - 8);
  uint64_t v12 = v11;
  uint64_t v13 = *(unsigned int *)(v11 + 84);
  unsigned int v14 = v13 - 1;
  if (!v13) {
    unsigned int v14 = 0;
  }
  if (v10 <= v14) {
    unsigned int v15 = v14;
  }
  else {
    unsigned int v15 = v10;
  }
  if (v15 <= 0x7FFFFFFF) {
    unsigned int v16 = 0x7FFFFFFF;
  }
  else {
    unsigned int v16 = v15;
  }
  uint64_t v17 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v18 = *(void *)(v6 + 64);
  uint64_t v19 = *(unsigned __int8 *)(v11 + 80);
  if (v13) {
    uint64_t v20 = *(void *)(*(void *)(v5 - 8) + 64);
  }
  else {
    uint64_t v20 = *(void *)(*(void *)(v5 - 8) + 64) + 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v21 = v17 | 7;
  uint64_t v22 = v17 + 8;
  uint64_t v23 = ((v17 + 8) & ~v17) + v18 + v19;
  if (v16 < a2)
  {
    unint64_t v24 = ((v20 + ((v20 + v19 + ((v23 + (v22 & ~v21)) & ~v19)) & ~v19) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 & 0xFFFFFFF8) != 0) {
      unsigned int v25 = 2;
    }
    else {
      unsigned int v25 = a2 - v16 + 1;
    }
    if (v25 >= 0x10000) {
      unsigned int v26 = 4;
    }
    else {
      unsigned int v26 = 2;
    }
    if (v25 < 0x100) {
      unsigned int v26 = 1;
    }
    if (v25 >= 2) {
      uint64_t v27 = v26;
    }
    else {
      uint64_t v27 = 0;
    }
    switch(v27)
    {
      case 1:
        int v28 = *((unsigned __int8 *)a1 + v24);
        if (!*((unsigned char *)a1 + v24)) {
          break;
        }
        goto LABEL_32;
      case 2:
        int v28 = *(unsigned __int16 *)((char *)a1 + v24);
        if (*(_WORD *)((char *)a1 + v24)) {
          goto LABEL_32;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x24A4F5428);
      case 4:
        int v28 = *(_DWORD *)((char *)a1 + v24);
        if (!v28) {
          break;
        }
LABEL_32:
        int v29 = v28 - 1;
        if ((v24 & 0xFFFFFFF8) != 0)
        {
          int v29 = 0;
          int v30 = *a1;
        }
        else
        {
          int v30 = 0;
        }
        return v16 + (v30 | v29) + 1;
      default:
        break;
    }
  }
  if ((v15 & 0x80000000) != 0)
  {
    int v33 = (uint64_t *)(((unint64_t)a1 + v21 + 8) & ~v21);
    if (v10 == v16)
    {
      if ((v8 & 0x80000000) != 0)
      {
        unsigned int v35 = (*(uint64_t (**)(unint64_t))(v7 + 48))(((unint64_t)v33 + v22) & ~v17);
      }
      else
      {
        uint64_t v34 = *v33;
        if ((unint64_t)*v33 >= 0xFFFFFFFF) {
          LODWORD(v34) = -1;
        }
        unsigned int v35 = v34 + 1;
      }
      goto LABEL_50;
    }
    if (v13 >= 2)
    {
      unsigned int v35 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v12 + 48))(((unint64_t)v33 + v23) & ~v19, v13, v5);
LABEL_50:
      if (v35 >= 2) {
        return v35 - 1;
      }
      else {
        return 0;
      }
    }
    return 0;
  }
  uint64_t v31 = *(void *)a1;
  if (*(void *)a1 >= 0xFFFFFFFFuLL) {
    LODWORD(v31) = -1;
  }
  return (v31 + 1);
}

void sub_24A4F543C(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  int v8 = 0;
  uint64_t v9 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v10 = v9;
  unsigned int v11 = *(_DWORD *)(v9 + 84);
  uint64_t v12 = *(void *)(v7 - 8);
  if (v11 <= 0x7FFFFFFF) {
    unsigned int v13 = 0x7FFFFFFF;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v14 = *(void *)(v7 - 8);
  unsigned int v15 = *(_DWORD *)(v12 + 84);
  uint64_t v16 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v17 = *(void *)(v9 + 64);
  uint64_t v18 = *(unsigned __int8 *)(v12 + 80);
  size_t v19 = *(void *)(v12 + 64);
  unsigned int v20 = v13 - 1;
  unsigned int v21 = v15 - 1;
  if (!v15) {
    unsigned int v21 = 0;
  }
  if (v20 <= v21) {
    unsigned int v22 = v21;
  }
  else {
    unsigned int v22 = v13 - 1;
  }
  if (v22 <= 0x7FFFFFFF) {
    unsigned int v23 = 0x7FFFFFFF;
  }
  else {
    unsigned int v23 = v22;
  }
  uint64_t v24 = v16 | 7;
  uint64_t v25 = v16 + 8;
  size_t v26 = ((v16 + 8) & ~v16) + v17;
  size_t v27 = v26 + v18;
  if (v15) {
    size_t v28 = v19;
  }
  else {
    size_t v28 = v19 + 1;
  }
  size_t v29 = ((v28 + ((v28 + v18 + ((v26 + v18 + ((v16 + 8) & ~(v16 | 7))) & ~v18)) & ~v18) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v23 < a3)
  {
    if (((v28
         + ((v28
           + v18
           + ((v26 + v18 + ((v16 + 8) & ~(v16 | 7))) & ~v18)) & ~v18)
         + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      unsigned int v30 = a3 - v23 + 1;
    else {
      unsigned int v30 = 2;
    }
    if (v30 >= 0x10000) {
      int v31 = 4;
    }
    else {
      int v31 = 2;
    }
    if (v30 < 0x100) {
      int v31 = 1;
    }
    if (v30 >= 2) {
      int v8 = v31;
    }
    else {
      int v8 = 0;
    }
  }
  if (a2 > v23)
  {
    if (v29) {
      int v32 = 1;
    }
    else {
      int v32 = a2 - v23;
    }
    if (v29)
    {
      unsigned int v33 = ~v23 + a2;
      bzero(a1, v29);
      *(_DWORD *)a1 = v33;
    }
    switch(v8)
    {
      case 1:
        a1[v29] = v32;
        return;
      case 2:
        *(_WORD *)&a1[v29] = v32;
        return;
      case 3:
        goto LABEL_86;
      case 4:
        *(_DWORD *)&a1[v29] = v32;
        return;
      default:
        return;
    }
  }
  uint64_t v34 = ~v16;
  uint64_t v35 = ~v18;
  switch(v8)
  {
    case 1:
      a1[v29] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_42;
    case 2:
      *(_WORD *)&a1[v29] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_42;
    case 3:
LABEL_86:
      __break(1u);
      JUMPOUT(0x24A4F585CLL);
    case 4:
      *(_DWORD *)&a1[v29] = 0;
      goto LABEL_41;
    default:
LABEL_41:
      if (!a2) {
        return;
      }
LABEL_42:
      if ((v22 & 0x80000000) == 0)
      {
        if ((a2 & 0x80000000) != 0) {
          uint64_t v36 = a2 ^ 0x80000000;
        }
        else {
          uint64_t v36 = a2 - 1;
        }
LABEL_58:
        *(void *)a1 = v36;
        return;
      }
      a1 = (unsigned char *)((unint64_t)&a1[v24 + 8] & ~v24);
      if (v20 == v23)
      {
        if (a2 + 1 <= v13)
        {
          if (a2 != -1)
          {
            if ((v11 & 0x80000000) == 0)
            {
              if (((a2 + 1) & 0x80000000) != 0) {
                uint64_t v36 = a2 - 0x7FFFFFFF;
              }
              else {
                uint64_t v36 = a2;
              }
              goto LABEL_58;
            }
            size_t v43 = *(void (**)(unint64_t))(v10 + 56);
            v43((unint64_t)&a1[v25] & v34);
          }
        }
        else
        {
          if (v26 <= 3) {
            int v37 = ~(-1 << (8 * v26));
          }
          else {
            int v37 = -1;
          }
          if (v26)
          {
            int v38 = v37 & (a2 - v13);
            if (v26 <= 3) {
              int v39 = v26;
            }
            else {
              int v39 = 4;
            }
            bzero(a1, v26);
            switch(v39)
            {
              case 2:
                goto LABEL_83;
              case 3:
                goto LABEL_79;
              case 4:
                goto LABEL_84;
              default:
                goto LABEL_70;
            }
          }
        }
      }
      else if (v15 >= 2)
      {
        a1 = (unsigned char *)((unint64_t)&a1[v27] & v35);
        if (a2 + 1 <= v15)
        {
          if (a2 != -1)
          {
            size_t v42 = *(void (**)(unsigned char *, void))(v14 + 56);
            v42(a1, a2 + 1);
          }
        }
        else
        {
          if (v19 <= 3) {
            int v40 = ~(-1 << (8 * v19));
          }
          else {
            int v40 = -1;
          }
          if (v19)
          {
            int v38 = v40 & (a2 - v15);
            if (v19 <= 3) {
              int v41 = v19;
            }
            else {
              int v41 = 4;
            }
            bzero(a1, v19);
            switch(v41)
            {
              case 2:
LABEL_83:
                *(_WORD *)a1 = v38;
                break;
              case 3:
LABEL_79:
                *(_WORD *)a1 = v38;
                a1[2] = BYTE2(v38);
                break;
              case 4:
LABEL_84:
                *(_DWORD *)a1 = v38;
                break;
              default:
LABEL_70:
                *a1 = v38;
                break;
            }
          }
        }
      }
      return;
  }
}

unint64_t _HashNode.prepareValueUpdate(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a3[2];
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v11 + 16))(v10);
  uint64_t v12 = *v4;
  swift_beginAccess();
  _HashNode.ValueUpdateState.init(_:_:_:)((uint64_t)v10, a2, 0, v12, (unint64_t)(*(_DWORD *)(v12 + 16) != 0) << 40, v8, a3[3], a4);
  return _HashNode._prepareValueUpdate(_:)(a4, a3);
}

int *_HashNode.prepareDefaultedValueUpdate(_:_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, char *a7@<X8>)
{
  uint64_t v97 = a4;
  uint64_t v98 = a3;
  char v101 = a7;
  uint64_t v13 = a6[2];
  uint64_t v12 = a6[3];
  uint64_t v14 = a6[4];
  uint64_t updated = type metadata accessor for _HashNode.DefaultedValueUpdateState();
  uint64_t v89 = *(void *)(updated - 8);
  uint64_t v90 = updated;
  uint64_t v16 = MEMORY[0x270FA5388](updated);
  uint64_t v88 = (char *)&v87 - v17;
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v95 = (char *)&v87 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v94 = (char *)&v87 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  unsigned int v23 = (char *)&v87 - v22;
  BOOL v99 = _HashNode.isUnique()();
  uint64_t v24 = *v7;
  uint64_t v25 = v7[1];
  uint64_t v100 = v7;
  int v91 = a1;
  uint64_t v96 = a2;
  unint64_t v92 = a5;
  unint64_t v26 = _HashNode.findForInsertion(_:_:_:)(a1, a2, a5, v24, v25, v13, v12, v14);
  switch(v26 >> 29)
  {
    case 1u:
      unint64_t v56 = HIDWORD(v26);
      MEMORY[0x270FA5388](v26);
      uint64_t v84 = v13;
      uint64_t v85 = v12;
      uint64_t v86 = v14;
      int v57 = a6;
      int v58 = v100;
      _HashNode.ensureUniqueAndInsertItem(isUnique:at:itemSlot:_:)(v99, v59, v56, (uint64_t (*)(uint64_t))nullsub_1, (uint64_t)(&v87 - 6), v57);
      uint64_t v60 = v94;
      uint64_t v61 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v93 + 16))(v94, v96, v13);
      uint64_t v62 = v95;
      v98(v61);
      uint64_t v35 = *v58;
      unsigned int v33 = v101;
      uint64_t v34 = (uint64_t)v60;
      uint64_t v32 = (uint64_t)v62;
      int v36 = v56;
      goto LABEL_11;
    case 2u:
      MEMORY[0x270FA5388](v26);
      uint64_t v84 = v13;
      uint64_t v85 = v12;
      uint64_t v86 = v14;
      uint64_t v43 = _HashNode.ensureUniqueAndSpawnChild(isUnique:level:replacing:itemSlot:newHash:_:)(v99, v91, v41, v42, v92, (uint64_t)nullsub_1, (uint64_t)(&v87 - 6), a6);
      int v45 = v44;
      uint64_t v46 = v94;
      uint64_t v47 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v93 + 16))(v94, v96, v13);
      int v48 = v95;
      v98(v47);
      unsigned int v33 = v101;
      uint64_t v34 = (uint64_t)v46;
      uint64_t v32 = (uint64_t)v48;
      uint64_t v35 = v43;
      int v36 = v45;
      goto LABEL_11;
    case 3u:
      unint64_t v63 = HIDWORD(v26);
      uint64_t v64 = v100;
      _HashNode.ensureUnique(isUnique:)(v99);
      uint64_t v65 = nullsub_1(*v64 + 16, *v64 + 32, v13, v12, v14);
      uint64_t v85 = v12;
      uint64_t v86 = v14;
      uint64_t v84 = v13;
      int64_t v66 = v88;
      sub_24A4F7DCC(v65, v67, v63, v91, v96, (uint64_t)v98, v97, v92);
      if (v66[*(int *)(v90 + 52)]) {
        ++v64[1];
      }
      return (int *)(*(uint64_t (**)(char *, char *))(v89 + 32))(v101, v66);
    case 4u:
      MEMORY[0x270FA5388](v26);
      uint64_t v84 = v13;
      uint64_t v85 = v12;
      uint64_t v86 = v14;
      if (v49 == 0x80000000)
      {
        char v50 = a6;
        int v51 = v100;
        int v52 = _HashNode.ensureUniqueAndAppendCollision(isUnique:_:)(v99, (void (*)(uint64_t))nullsub_1, (uint64_t)(&v87 - 6), v50);
        int v53 = v94;
        uint64_t v54 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v93 + 16))(v94, v96, v13);
        int v55 = v95;
        v98(v54);
        uint64_t v35 = *v51;
        unsigned int v33 = v101;
        uint64_t v34 = (uint64_t)v53;
        uint64_t v32 = (uint64_t)v55;
        int v36 = v52;
      }
      else
      {
        uint64_t v69 = v100;
        uint64_t v70 = *v100;
        uint64_t v71 = v100[1];
        unint64_t v72 = _HashNode.collisionHash.getter(*v100, v71, v13, v12, v14);
        swift_retain();
        uint64_t v74 = static _HashNode.build(level:item1:_:child2:_:)(v91, (uint64_t)nullsub_1, (uint64_t)(&v87 - 6), v92, v70, v71, v72, v13, v73, v12, v14);
        uint64_t v76 = v75;
        uint64_t v78 = v77;
        int v80 = v79;
        swift_retain();
        swift_release();
        *uint64_t v69 = v74;
        v69[1] = v76;
        Swift::String v81 = v94;
        uint64_t v82 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v93 + 16))(v94, v96, v13);
        uint64_t v83 = v95;
        v98(v82);
        swift_release();
        unsigned int v33 = v101;
        uint64_t v34 = (uint64_t)v81;
        uint64_t v32 = (uint64_t)v83;
        uint64_t v35 = v78;
        int v36 = v80;
      }
LABEL_11:
      int v37 = 1;
      uint64_t v38 = v13;
      uint64_t v39 = v12;
      uint64_t v40 = v14;
      break;
    default:
      unint64_t v27 = HIDWORD(v26);
      size_t v28 = v100;
      _HashNode.ensureUnique(isUnique:)(v99);
      uint64_t v29 = *v28;
      uint64_t v30 = nullsub_1(v29 + 16, v29 + 32, v13, v12, v14);
      sub_24A4F7D48(v30, v31, v27);
      uint64_t v32 = (uint64_t)&v23[*(int *)(TupleTypeMetadata2 + 48)];
      unsigned int v33 = v101;
      uint64_t v34 = (uint64_t)v23;
      uint64_t v35 = v29;
      int v36 = v27;
      int v37 = 0;
      uint64_t v38 = v13;
      uint64_t v39 = v12;
      uint64_t v40 = v14;
      break;
  }
  return _HashNode.DefaultedValueUpdateState.init(_:in:at:inserted:)(v34, v32, v35, v36, v37, v38, v39, v40, v33);
}

uint64_t _HashNode.ensureUnique(level:at:)(int a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  unsigned int v11 = BYTE4(a4);
  Swift::Bool v12 = _HashNode.isUnique()();
  _HashNode.ensureUnique(isUnique:)(v12);
  if (v11 <= a1) {
    return *(void *)v5;
  }
  uint64_t v13 = nullsub_1(*(void *)v5 + 16, *(void *)v5 + 32, a5[2], a5[3], a5[4]);
  sub_24A4F6150(v13, v14, a2, a3, a4 & 0x1FFFFFFFFFFLL, a1, (uint64_t)&v16);
  return v16;
}

uint64_t sub_24A4F6150@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v11 = (a6 + 5);
  _HashNode.UnsafeHandle.subscript.unsafeMutableAddressor((a3 >> a6) & 0x1F, a1, a2);
  uint64_t v12 = type metadata accessor for _HashNode();
  uint64_t result = _HashNode.ensureUnique(level:at:)(v11, a3, a4, a5 & 0x1FFFFFFFFFFLL, v12);
  *(void *)a7 = result;
  *(_DWORD *)(a7 + 8) = v14;
  return result;
}

uint64_t _HashNode.ValueUpdateState.key.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _HashNode.ValueUpdateState.key.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_HashNode.ValueUpdateState.key.modify())()
{
  return nullsub_1;
}

uint64_t _HashNode.ValueUpdateState.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 44);
  uint64_t v5 = sub_24A5BBD20();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t _HashNode.ValueUpdateState.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 44);
  uint64_t v5 = sub_24A5BBD20();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*_HashNode.ValueUpdateState.value.modify())()
{
  return nullsub_1;
}

uint64_t _HashNode.ValueUpdateState.hash.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 48));
}

uint64_t _HashNode.ValueUpdateState.path.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 52));
}

uint64_t _HashNode.ValueUpdateState.path.setter(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4 + *(int *)(a4 + 52);
  *(void *)uint64_t v5 = result;
  *(void *)(v5 + 8) = a2;
  *(_DWORD *)(v5 + 16) = a3;
  *(unsigned char *)(v5 + 20) = BYTE4(a3);
  *(unsigned char *)(v5 + 21) = BYTE5(a3) & 1;
  return result;
}

uint64_t (*_HashNode.ValueUpdateState.path.modify())()
{
  return nullsub_1;
}

uint64_t _HashNode.ValueUpdateState.found.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 56));
}

uint64_t _HashNode.ValueUpdateState.found.setter(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(v2 + *(int *)(a2 + 56)) = result;
  return result;
}

uint64_t (*_HashNode.ValueUpdateState.found.modify())()
{
  return nullsub_1;
}

uint64_t _HashNode.ValueUpdateState.init(_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  unint64_t v21 = HIDWORD(a5);
  uint64_t updated = (int *)type metadata accessor for _HashNode.ValueUpdateState();
  uint64_t v15 = a8 + updated[11];
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a7 - 8) + 56);
  v16(v15, 1, 1, a7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(a8, a1, a6);
  uint64_t v17 = sub_24A5BBD20();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v15, v17);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v16)(v15, 1, 1, a7);
  *(void *)(a8 + updated[12]) = a2;
  uint64_t v19 = a8 + updated[13];
  *(void *)uint64_t v19 = a3;
  *(void *)(v19 + 8) = a4;
  *(_DWORD *)(v19 + 16) = a5;
  *(unsigned char *)(v19 + 20) = v21;
  *(unsigned char *)(v19 + 21) = BYTE5(a5) & 1;
  *(unsigned char *)(a8 + updated[14]) = 0;
  return result;
}

unint64_t _HashNode._prepareValueUpdate(_:)(uint64_t a1, void *a2)
{
  uint64_t v5 = a2[3];
  uint64_t v6 = sub_24A5BBD20();
  uint64_t v32 = *(void *)(v6 - 8);
  uint64_t v33 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v31 = (char *)&TupleTypeMetadata2 - v7;
  uint64_t v8 = a2[2];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v30 = (char *)&TupleTypeMetadata2 - v9;
  BOOL v34 = _HashNode.isUnique()();
  uint64_t v11 = *v2;
  uint64_t v10 = v2[1];
  uint64_t v12 = a2[4];
  uint64_t updated = (int *)type metadata accessor for _HashNode.ValueUpdateState();
  uint64_t v14 = a1 + updated[13];
  unint64_t result = _HashNode.findForInsertion(_:_:_:)(*(unsigned __int8 *)(v14 + 20), a1, *(void *)(a1 + updated[12]), v11, v10, v8, v5, v12);
  switch(result >> 29)
  {
    case 1u:
    case 2u:
      *(_DWORD *)(v14 + 16) = HIDWORD(result);
      goto LABEL_5;
    case 3u:
      unint64_t v23 = HIDWORD(result);
      _HashNode.ensureUnique(isUnique:)(v34);
      uint64_t v24 = nullsub_1(*v2 + 16, *v2 + 32, v8, v5, v12);
      unint64_t result = sub_24A4F6994(v24, v25, v23, a1);
      break;
    case 4u:
      if (result == 0x80000000)
      {
        *(_DWORD *)(v14 + 16) = v10;
LABEL_5:
        *(unsigned char *)(v14 + 21) = 1;
      }
      else
      {
        uint64_t v26 = *(void *)(v14 + 8);
        unint64_t result = swift_beginAccess();
        uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned int *)(v26 + 20));
        v27.i16[0] = vaddlv_u8(v27);
        __int32 v28 = v27.i32[0];
        if (*(_DWORD *)(v26 + 16) == *(_DWORD *)(v26 + 20)) {
          __int32 v28 = 0;
        }
        *(_DWORD *)(v14 + 16) = v28;
        *(unsigned char *)(v14 + 21) = 0;
      }
      break;
    default:
      unint64_t v16 = HIDWORD(result);
      _HashNode.ensureUnique(isUnique:)(v34);
      uint64_t v17 = *v2;
      *(void *)(v14 + 8) = *v2;
      *(_DWORD *)(v14 + 16) = v16;
      *(unsigned char *)(v14 + 21) = 1;
      *(unsigned char *)(a1 + updated[14]) = 1;
      uint64_t v18 = nullsub_1(v17 + 16, v17 + 32, v8, v5, v12);
      uint64_t v19 = v30;
      sub_24A4F7D48(v18, v20, v16);
      uint64_t v21 = *(void *)(v5 - 8);
      uint64_t v22 = v31;
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v31, &v19[*(int *)(TupleTypeMetadata2 + 48)], v5);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v22, 0, 1, v5);
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v8 - 8) + 40))(a1, v19, v8);
      unint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v32 + 40))(a1 + updated[11], v22, v33);
      break;
  }
  return result;
}

uint64_t sub_24A4F6994(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)_HashNode.UnsafeHandle.childPtr(at:)(a3, a1, a2);
  uint64_t v7 = a4 + *(int *)(type metadata accessor for _HashNode.ValueUpdateState() + 52);
  char v8 = *(unsigned char *)(v7 + 20);
  *(void *)v7 |= (unint64_t)a3 << v8;
  *(void *)(v7 + 8) = v6;
  *(_DWORD *)(v7 + 16) = 0;
  swift_beginAccess();
  *(unsigned char *)(v7 + 21) = *(_DWORD *)(v6 + 16) != 0;
  *(unsigned char *)(v7 + 20) = v8 + 5;
  uint64_t v9 = type metadata accessor for _HashNode();
  return _HashNode._prepareValueUpdate(_:)(a4, v9);
}

uint64_t _HashNode.finalizeValueUpdate(_:)(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[2];
  uint64_t v37 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](a1);
  int v36 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(v6 + 24);
  swift_getTupleTypeMetadata2();
  uint64_t v8 = sub_24A5BBD20();
  uint64_t v34 = *(void *)(v8 - 8);
  uint64_t v35 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v33 = (uint64_t)&v33 - v9;
  uint64_t v10 = sub_24A5BBD20();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v33 - v12;
  uint64_t v38 = a2;
  uint64_t v14 = a2[4];
  uint64_t updated = (int *)type metadata accessor for _HashNode.ValueUpdateState();
  int v16 = *(unsigned __int8 *)(a1 + updated[14]);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1 + updated[11], v10);
  int v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v13, 1, v7);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  if (v17 == 1)
  {
    if (v16)
    {
      uint64_t v18 = a1 + updated[13];
      unint64_t v19 = *(void *)v18;
      uint64_t v20 = *(void *)(v18 + 8);
      unint64_t v21 = *(unsigned int *)(v18 + 16) | ((unint64_t)*(unsigned __int8 *)(v18 + 20) << 32);
      BOOL v22 = *(unsigned char *)(v18 + 21) == 0;
      uint64_t v23 = 0x10000000000;
      if (v22) {
        uint64_t v23 = 0;
      }
      uint64_t v24 = v33;
      _HashNode._finalizeRemoval(_:_:at:)(0, *(void *)(a1 + updated[12]), v19, v20, v21 | v23, v38, v33);
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v24, v35);
    }
  }
  else if (v16)
  {
    uint64_t v25 = *(void *)(a1 + updated[13] + 8);
    uint64_t v26 = nullsub_1(v25 + 16, v25 + 32, v4, v7, v14);
    sub_24A4F6E80(v26, v27, a1, v4, v7);
  }
  else
  {
    uint64_t v29 = (uint64_t)v36;
    uint64_t v28 = v37;
    uint64_t v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 16))(v36, a1, v4);
    MEMORY[0x270FA5388](v30);
    *(&v33 - 4) = v4;
    *(&v33 - 3) = v7;
    *(&v33 - 2) = v14;
    *(&v33 - 1) = a1;
    _HashNode.updateValue(_:forKey:_:_:)(0, v29, v31, sub_24A4F8144, (uint64_t)(&v33 - 6), v38);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v29, v4);
  }
  return (*(uint64_t (**)(uint64_t, int *))(*((void *)updated - 1) + 8))(a1, updated);
}

uint64_t sub_24A4F6E80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v29 = a2;
  uint64_t v27 = a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v28 = (char *)&v25 - v8;
  uint64_t v9 = sub_24A5BBD20();
  uint64_t v26 = *(void *)(v9 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v25 - v11;
  uint64_t v13 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t updated = type metadata accessor for _HashNode.ValueUpdateState();
  uint64_t v17 = v9;
  uint64_t v18 = v26;
  uint64_t v27 = _HashNode.UnsafeHandle.itemPtr(at:)(*(_DWORD *)(a3 + *(int *)(updated + 52) + 16), v27, v29);
  uint64_t v19 = *(int *)(updated + 44);
  uint64_t v29 = a3;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v12, a3 + v19, v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, a5) == 1)
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v12, v17);
    __break(1u);
  }
  else
  {
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    v20(v15, v12, a5);
    uint64_t v21 = TupleTypeMetadata2;
    uint64_t v22 = (uint64_t)v28;
    uint64_t v23 = &v28[*(int *)(TupleTypeMetadata2 + 48)];
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(v28, v29, a4);
    v20(v23, v15, a5);
    return sub_24A544CAC(v22, v27, v21);
  }
  return result;
}

uint64_t _HashNode._finalizeRemoval(_:_:at:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v37 = a7;
  unint64_t v35 = a3;
  uint64_t v36 = a4;
  uint64_t v11 = a6[2];
  uint64_t v12 = a6[3];
  int v13 = BYTE4(a5);
  swift_getTupleTypeMetadata2();
  uint64_t v14 = sub_24A5BBD20();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v32 - v17;
  if (v13 == a1)
  {
    uint64_t v19 = MEMORY[0x270FA5388](v16);
    uint64_t v29 = v11;
    uint64_t v30 = v12;
    return _HashNode._removeItemFromUniqueLeafNode<A>(_:at:_:by:)(v19, v37, a1, v20, a5, (void (*)(unint64_t))nullsub_1, (uint64_t)(&v32 - 6), a6, MEMORY[0x263F8EE60] + 8);
  }
  else
  {
    uint64_t v32 = a2;
    unint64_t v22 = v35;
    int v33 = (v35 >> a1) & 0x1F;
    uint64_t v23 = *v38;
    uint64_t v34 = v16;
    uint64_t v24 = a6[4];
    uint64_t v25 = nullsub_1(v23 + 16, v23 + 32, v11, v12, v24);
    uint64_t v31 = v24;
    uint64_t v26 = v32;
    uint64_t v28 = sub_24A4F7654(v25, v27, (v22 >> a1) & 0x1F, a1, v32, v22, v36, a5 & 0x1FFFFFFFFFFLL);
    MEMORY[0x270FA5388](v28);
    *(&v32 - 6) = v11;
    *(&v32 - 5) = v12;
    uint64_t v29 = v24;
    uint64_t v30 = v26;
    LOBYTE(v31) = a1;
    _HashNode._fixupUniqueAncestorAfterItemRemoval(_:at:_:remainder:)(a1, (uint64_t (*)(uint64_t))sub_24A4F8150, (void (*)(char *, char *, uint64_t))(&v32 - 8), v33, (uint64_t)v18, a6, v37);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v34);
  }
}

uint64_t sub_24A4F73C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v23 = a5;
  uint64_t v24 = a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v10 = (char *)&v23 - v9;
  uint64_t v11 = sub_24A5BBD20();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v23 - v14;
  uint64_t v16 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t updated = type metadata accessor for _HashNode.ValueUpdateState();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a2 + *(int *)(updated + 44), v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, a4) == 1)
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    __break(1u);
  }
  else
  {
    char v20 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
    v20(v18, v15, a4);
    uint64_t v21 = &v10[*(int *)(TupleTypeMetadata2 + 48)];
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(v10, a2, a3);
    v20(v21, v18, a4);
    return sub_24A544CAC((uint64_t)v10, v24, TupleTypeMetadata2);
  }
  return result;
}

uint64_t sub_24A4F7654(uint64_t a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = (a4 + 5);
  _HashNode.UnsafeHandle.subscript.unsafeMutableAddressor(a3, a1, a2);
  uint64_t v12 = type metadata accessor for _HashNode();
  return _HashNode._finalizeRemoval(_:_:at:)(v11, a5, a6, a7, a8 & 0x1FFFFFFFFFFLL, v12);
}

uint64_t _HashNode.DefaultedValueUpdateState.item.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(a3 + 24);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v10 = MEMORY[0x270FA5388](TupleTypeMetadata2 - 8);
  uint64_t v12 = (char *)&v19 - v11;
  uint64_t v13 = *(int *)(v10 + 56);
  uint64_t v14 = &v12[v13];
  uint64_t v15 = v4 + v13;
  uint64_t v16 = *(void *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v12, v4, v8);
  uint64_t v17 = *(void *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v14, v15, v7);
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a1, v12, v8);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v17 + 32))(a2, v14, v7);
}

uint64_t _HashNode.DefaultedValueUpdateState.item.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v30 = a2;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(a3 + 24);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v7 = TupleTypeMetadata2 - 8;
  uint64_t v8 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v26 - v11;
  uint64_t v28 = (char *)&v26 + *(int *)(v7 + 56) - v11;
  uint64_t v13 = v28;
  uint64_t v29 = v5;
  uint64_t v14 = v5;
  uint64_t v15 = *(void *)(v5 - 8);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 32);
  v16((char *)&v26 - v11, a1, v14);
  uint64_t v17 = v4;
  uint64_t v27 = v4;
  uint64_t v18 = *(void *)(v4 - 8);
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 32);
  v19(v13, v30, v17);
  char v20 = &v10[*(int *)(v7 + 56)];
  uint64_t v21 = v12;
  uint64_t v22 = v29;
  v16(v10, (uint64_t)v21, v29);
  uint64_t v23 = v27;
  v19(v20, (uint64_t)v28, v27);
  uint64_t v24 = v31;
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 40))(v31, v10, v22);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v18 + 40))(v24 + *(int *)(v7 + 56), v20, v23);
}

uint64_t (*_HashNode.DefaultedValueUpdateState.item.modify())()
{
  return nullsub_1;
}

uint64_t _HashNode.DefaultedValueUpdateState.node.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 44));
}

uint64_t _HashNode.DefaultedValueUpdateState.node.setter(uint64_t result, uint64_t a2)
{
  *(void *)(v2 + *(int *)(a2 + 44)) = result;
  return result;
}

uint64_t (*_HashNode.DefaultedValueUpdateState.node.modify())()
{
  return nullsub_1;
}

uint64_t _HashNode.DefaultedValueUpdateState.slot.getter(uint64_t a1)
{
  return *(unsigned int *)(v1 + *(int *)(a1 + 48));
}

uint64_t _HashNode.DefaultedValueUpdateState.slot.setter(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(v2 + *(int *)(a2 + 48)) = result;
  return result;
}

uint64_t (*_HashNode.DefaultedValueUpdateState.slot.modify())()
{
  return nullsub_1;
}

uint64_t _HashNode.DefaultedValueUpdateState.inserted.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 52));
}

uint64_t _HashNode.DefaultedValueUpdateState.inserted.setter(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(v2 + *(int *)(a2 + 52)) = result;
  return result;
}

uint64_t (*_HashNode.DefaultedValueUpdateState.inserted.modify())()
{
  return nullsub_1;
}

int *_HashNode.DefaultedValueUpdateState.init(_:in:at:inserted:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>)
{
  uint64_t v28 = a8;
  uint64_t v29 = a3;
  int v30 = a4;
  int v31 = a5;
  uint64_t v26 = a2;
  uint64_t v27 = a9;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v13 = TupleTypeMetadata2 - 8;
  uint64_t v14 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v25 - v17;
  uint64_t v25 = (char *)&v25 + *(int *)(v13 + 56) - v17;
  uint64_t v19 = v25;
  char v20 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32);
  v20((char *)&v25 - v17, a1, a6);
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32);
  v21(v19, v26, a7);
  uint64_t v22 = &v16[*(int *)(v13 + 56)];
  v20(v16, (uint64_t)v18, a6);
  v21(v22, (uint64_t)v25, a7);
  uint64_t v23 = v27;
  v20(v27, (uint64_t)v16, a6);
  v21(&v23[*(int *)(v13 + 56)], (uint64_t)v22, a7);
  uint64_t result = (int *)type metadata accessor for _HashNode.DefaultedValueUpdateState();
  *(void *)&v23[result[11]] = v29;
  *(_DWORD *)&v23[result[12]] = v30;
  v23[result[13]] = v31;
  return result;
}

uint64_t sub_24A4F7D48(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return sub_24A5BBD10();
}

uint64_t sub_24A4F7DCC(uint64_t a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = (a4 + 5);
  _HashNode.UnsafeHandle.subscript.unsafeMutableAddressor(a3, a1, a2);
  uint64_t v12 = type metadata accessor for _HashNode();
  return _HashNode.prepareDefaultedValueUpdate(_:_:_:_:)(v11, a5, a6, a7, a8, v12);
}

uint64_t _HashNode.finalizeDefaultedValueUpdate(_:)(uint64_t a1, void *a2)
{
  sub_24A4F8164(a1, a2);
  uint64_t updated = type metadata accessor for _HashNode.DefaultedValueUpdateState();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(updated - 8) + 8);
  return v4(a1, updated);
}

uint64_t sub_24A4F7F04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v11 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v24 - v14;
  uint64_t updated = type metadata accessor for _HashNode.DefaultedValueUpdateState();
  uint64_t v17 = _HashNode.UnsafeHandle.itemPtr(at:)(*(_DWORD *)(a3 + *(int *)(updated + 48)), a1, a2);
  uint64_t v18 = *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v19 = &v15[v18];
  uint64_t v24 = a3 + v18;
  uint64_t v25 = v17;
  uint64_t v20 = *(void *)(a4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v15, a3, a4);
  uint64_t v21 = *(void *)(a5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v19, v24, a5);
  uint64_t v22 = &v13[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v13, v15, a4);
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v22, v19, a5);
  return sub_24A544CAC((uint64_t)v13, v25, TupleTypeMetadata2);
}

uint64_t type metadata accessor for _HashNode.DefaultedValueUpdateState()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for _HashNode.ValueUpdateState()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_24A4F8144(uint64_t a1)
{
  return sub_24A4F73C4(a1, v1[5], v1[2], v1[3], v1[4]);
}

uint64_t sub_24A4F8150()
{
  return (*(void *)(v0 + 40) >> *(unsigned char *)(v0 + 48)) & 0x1FLL;
}

uint64_t sub_24A4F8164(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[2];
  uint64_t v4 = a2[3];
  uint64_t v5 = a2[4];
  uint64_t v6 = *(void *)(a1 + *(int *)(type metadata accessor for _HashNode.DefaultedValueUpdateState() + 44));
  uint64_t v7 = nullsub_1(v6 + 16, v6 + 32, v3, v4, v5);
  return sub_24A4F7F04(v7, v8, a1, v3, v4);
}

uint64_t sub_24A4F81E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 48);
}

uint64_t sub_24A4F81F0()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_24A5BBD20();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_24A4F82E0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8;
  int v10 = *(_DWORD *)(v8 + 80);
  uint64_t v11 = v10;
  uint64_t v12 = v6 + v10;
  uint64_t v13 = (v6 + v11) & ~v11;
  if (*(_DWORD *)(v8 + 84)) {
    size_t v14 = *(void *)(v8 + 64);
  }
  else {
    size_t v14 = *(void *)(v8 + 64) + 1;
  }
  unint64_t v15 = ((((v14 + v13 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23;
  unsigned int v16 = v10 | *(_DWORD *)(v5 + 80) & 0xF8;
  int v17 = (*(_DWORD *)(v5 + 80) | v10) & 0x100000;
  if (v16 > 7 || v17 != 0 || v15 > 0x18)
  {
    uint64_t v20 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v20 + (((v16 | 7) + 16) & ~(unint64_t)(v16 | 7)));
    swift_retain();
  }
  else
  {
    uint64_t v21 = ~v11;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v22 = (const void *)(((unint64_t)a2 + v12) & v21);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v22, 1, v7))
    {
      memcpy((void *)(((unint64_t)v4 + v12) & v21), v22, v14);
    }
    else
    {
      (*(void (**)(unint64_t, const void *, uint64_t))(v9 + 16))(((unint64_t)v4 + v12) & v21, v22, v7);
      (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v9 + 56))(((unint64_t)v4 + v12) & v21, 0, 1, v7);
    }
    uint64_t v23 = (void *)(((((unint64_t)v4 + v12) & v21) + v14 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v24 = (void *)(((unint64_t)v22 + v14 + 7) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v23 = *v24;
    unint64_t v25 = ((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v26 = ((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8;
    long long v27 = *(_OWORD *)v26;
    *(void *)(v25 + 14) = *(void *)(v26 + 14);
    *(_OWORD *)unint64_t v25 = v27;
    *(unsigned char *)(v25 + 22) = *(unsigned char *)(v26 + 22);
  }
  return v4;
}

uint64_t sub_24A4F850C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = (*(void *)(v4 + 56) + a1 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = v6;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v7, 1, v5);
  if (!result)
  {
    uint64_t v9 = *(uint64_t (**)(unint64_t, uint64_t))(v10 + 8);
    return v9(v7, v5);
  }
  return result;
}

uint64_t sub_24A4F8610(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 48);
  uint64_t v8 = *(void *)(a3 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (void *)((v11 + a1) & ~v10);
  uint64_t v13 = (const void *)((v11 + a2) & ~v10);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
  {
    int v14 = *(_DWORD *)(v9 + 84);
    size_t v15 = *(void *)(v9 + 64);
    if (v14) {
      size_t v16 = v15;
    }
    else {
      size_t v16 = v15 + 1;
    }
    memcpy(v12, v13, v16);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v12, v13, v8);
    uint64_t v18 = *(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56);
    uint64_t v17 = v9 + 56;
    v18(v12, 0, 1, v8);
    int v14 = *(_DWORD *)(v17 + 28);
    size_t v15 = *(void *)(v17 + 8);
  }
  if (v14) {
    size_t v19 = v15;
  }
  else {
    size_t v19 = v15 + 1;
  }
  uint64_t v20 = (uint64_t)v12 + v19 + 7;
  uint64_t v21 = (void *)(((unint64_t)v13 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
  v20 &= 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v20 = *v21;
  unint64_t v22 = (v20 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
  long long v24 = *(_OWORD *)v23;
  *(void *)(v22 + 14) = *(void *)(v23 + 14);
  *(_OWORD *)unint64_t v22 = v24;
  *(unsigned char *)(v22 + 22) = *(unsigned char *)(v23 + 22);
  return a1;
}

uint64_t sub_24A4F8798(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v6 + 40) + v9;
  uint64_t v11 = (void *)((v10 + a1) & ~v9);
  uint64_t v12 = (void *)((v10 + a2) & ~v9);
  uint64_t v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  int v14 = v13(v11, 1, v7);
  int v15 = v13(v12, 1, v7);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 16))(v11, v12, v7);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v11, 0, 1, v7);
      goto LABEL_12;
    }
    int v16 = *(_DWORD *)(v8 + 84);
    size_t v17 = *(void *)(v8 + 64);
  }
  else
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 24))(v11, v12, v7);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v11, v7);
    int v16 = *(_DWORD *)(v8 + 84);
    size_t v17 = *(void *)(v8 + 64);
  }
  if (v16) {
    size_t v18 = v17;
  }
  else {
    size_t v18 = v17 + 1;
  }
  memcpy(v11, v12, v18);
LABEL_12:
  if (*(_DWORD *)(v8 + 84)) {
    uint64_t v19 = *(void *)(v8 + 64);
  }
  else {
    uint64_t v19 = *(void *)(v8 + 64) + 1;
  }
  uint64_t v20 = (uint64_t)v11 + v19 + 7;
  uint64_t v21 = (void *)(((unint64_t)v12 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
  v20 &= 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v20 = *v21;
  unint64_t v22 = (v20 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v22 = *(void *)v23;
  *(void *)(v22 + 8) = *(void *)(v23 + 8);
  *(_DWORD *)(v22 + 16) = *(_DWORD *)(v23 + 16);
  *(unsigned char *)(v22 + 20) = *(unsigned char *)(v23 + 20);
  *(unsigned char *)(v22 + 21) = *(unsigned char *)(v23 + 21);
  *(unsigned char *)(v22 + 22) = *(unsigned char *)(v23 + 22);
  return a1;
}

uint64_t sub_24A4F89B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 32);
  uint64_t v8 = *(void *)(a3 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (void *)((v11 + a1) & ~v10);
  uint64_t v13 = (const void *)((v11 + a2) & ~v10);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
  {
    int v14 = *(_DWORD *)(v9 + 84);
    size_t v15 = *(void *)(v9 + 64);
    if (v14) {
      size_t v16 = v15;
    }
    else {
      size_t v16 = v15 + 1;
    }
    memcpy(v12, v13, v16);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v12, v13, v8);
    size_t v18 = *(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56);
    uint64_t v17 = v9 + 56;
    v18(v12, 0, 1, v8);
    int v14 = *(_DWORD *)(v17 + 28);
    size_t v15 = *(void *)(v17 + 8);
  }
  if (v14) {
    size_t v19 = v15;
  }
  else {
    size_t v19 = v15 + 1;
  }
  uint64_t v20 = (uint64_t)v12 + v19 + 7;
  uint64_t v21 = (void *)(((unint64_t)v13 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
  v20 &= 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v20 = *v21;
  unint64_t v22 = (v20 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
  long long v24 = *(_OWORD *)v23;
  *(void *)(v22 + 14) = *(void *)(v23 + 14);
  *(_OWORD *)unint64_t v22 = v24;
  *(unsigned char *)(v22 + 22) = *(unsigned char *)(v23 + 22);
  return a1;
}

uint64_t sub_24A4F8B3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v6 + 24) + v9;
  uint64_t v11 = (void *)((v10 + a1) & ~v9);
  uint64_t v12 = (void *)((v10 + a2) & ~v9);
  uint64_t v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  int v14 = v13(v11, 1, v7);
  int v15 = v13(v12, 1, v7);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 32))(v11, v12, v7);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v11, 0, 1, v7);
      goto LABEL_12;
    }
    int v16 = *(_DWORD *)(v8 + 84);
    size_t v17 = *(void *)(v8 + 64);
  }
  else
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 40))(v11, v12, v7);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v11, v7);
    int v16 = *(_DWORD *)(v8 + 84);
    size_t v17 = *(void *)(v8 + 64);
  }
  if (v16) {
    size_t v18 = v17;
  }
  else {
    size_t v18 = v17 + 1;
  }
  memcpy(v11, v12, v18);
LABEL_12:
  if (*(_DWORD *)(v8 + 84)) {
    uint64_t v19 = *(void *)(v8 + 64);
  }
  else {
    uint64_t v19 = *(void *)(v8 + 64) + 1;
  }
  uint64_t v20 = (uint64_t)v11 + v19 + 7;
  uint64_t v21 = (void *)(((unint64_t)v12 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
  v20 &= 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v20 = *v21;
  unint64_t v22 = (v20 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v22 = *(void *)v23;
  *(void *)(v22 + 8) = *(void *)(v23 + 8);
  *(_DWORD *)(v22 + 16) = *(_DWORD *)(v23 + 16);
  *(unsigned char *)(v22 + 20) = *(unsigned char *)(v23 + 20);
  *(unsigned char *)(v22 + 21) = *(unsigned char *)(v23 + 21);
  *(unsigned char *)(v22 + 22) = *(unsigned char *)(v23 + 22);
  return a1;
}

uint64_t sub_24A4F8D58(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  unsigned int v8 = v7 - 1;
  if (!v7) {
    unsigned int v8 = 0;
  }
  if (v8 <= v5) {
    unsigned int v9 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v9 = v8;
  }
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  if (!v7) {
    ++v11;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v12 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v10;
  uint64_t v13 = v11 + 7;
  if (v9 < a2 && *((unsigned char *)a1 + ((((v13 + (v12 & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23)) {
    return v9 + *a1 + 1;
  }
  if (v5 == v9)
  {
    int v15 = *(uint64_t (**)(void))(v4 + 48);
    return v15();
  }
  unint64_t v16 = ((unint64_t)a1 + v12) & ~v10;
  if (v8 == v9)
  {
    if (v7 >= 2)
    {
      unsigned int v18 = (*(uint64_t (**)(unint64_t))(v6 + 48))(v16);
      if (v18 >= 2) {
        return v18 - 1;
      }
      else {
        return 0;
      }
    }
    return 0;
  }
  unint64_t v17 = *(void *)(((((v13 + v16) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void sub_24A4F8F18(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(*(void *)(a4 + 24) - 8);
  int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(void *)(v6 + 64);
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  unsigned int v12 = v9 - 1;
  if (!v9) {
    unsigned int v12 = 0;
  }
  if (v12 <= v7) {
    unsigned int v13 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v13 = v12;
  }
  if (v13 <= 0x7FFFFFFF) {
    unsigned int v14 = 0x7FFFFFFF;
  }
  else {
    unsigned int v14 = v13;
  }
  uint64_t v15 = v10 + v11;
  uint64_t v16 = (v10 + v11) & ~v11;
  if (v9) {
    uint64_t v17 = *(void *)(v8 + 64);
  }
  else {
    uint64_t v17 = *(void *)(v8 + 64) + 1;
  }
  uint64_t v18 = v17 + 7;
  unint64_t v19 = ((((v18 + v16) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23;
  if (v14 >= a2)
  {
    if (v14 < a3) {
      a1[v19] = 0;
    }
    if (a2)
    {
      if (v7 == v14)
      {
        uint64_t v21 = *(void (**)(void))(v6 + 56);
        v21();
      }
      else
      {
        unint64_t v22 = (unint64_t)&a1[v15] & ~v11;
        if (v12 == v14)
        {
          uint64_t v23 = a2 + 1;
          long long v24 = *(void (**)(unint64_t, uint64_t))(v8 + 56);
          v24(v22, v23);
        }
        else
        {
          unint64_t v25 = (((v18 + v22) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
          if ((a2 & 0x80000000) != 0)
          {
            *(_WORD *)(v25 + 20) = 0;
            *(_DWORD *)(v25 + 16) = 0;
            *(void *)unint64_t v25 = a2 ^ 0x80000000;
            *(void *)(v25 + 8) = 0;
          }
          else
          {
            *(void *)(v25 + 8) = a2 - 1;
          }
        }
      }
    }
  }
  else
  {
    int v20 = ~v14 + a2;
    bzero(a1, ((((v18 + v16) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23);
    *(_DWORD *)a1 = v20;
    if (v14 < a3) {
      a1[v19] = 1;
    }
  }
}

uint64_t sub_24A4F9128()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      v3[4] = v3;
      v3[5] = "\b";
      v3[6] = MEMORY[0x263F8CF68] + 64;
      v3[7] = &unk_24A5BEAA0;
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_24A4F9230(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  uint64_t v11 = ((v6 + v9) & ~v9) + *(void *)(v8 + 64);
  int v12 = *(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80);
  if ((v12 & 0x1000F8) != 0 || ((((v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8 | 5) > 0x18)
  {
    uint64_t v14 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v14 + (((v12 & 0xF8 | 7u) + 16) & ~(unint64_t)(v12 & 0xF8 | 7u)));
    swift_retain();
  }
  else
  {
    uint64_t v15 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)v4 + v10) & v15, ((unint64_t)a2 + v10) & v15, v7);
    uint64_t v16 = (void *)(((unint64_t)v4 + v11 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v17 = (void *)(((unint64_t)a2 + v11 + 7) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v16 = *v17;
    unint64_t v18 = ((unint64_t)v16 + 11) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v19 = ((unint64_t)v17 + 11) & 0xFFFFFFFFFFFFFFF8;
    *(_DWORD *)unint64_t v18 = *(_DWORD *)v19;
    *(unsigned char *)(v18 + 4) = *(unsigned char *)(v19 + 4);
  }
  return v4;
}

uint64_t sub_24A4F93E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v6 = *(uint64_t (**)(unint64_t))(v5 + 8);
  unint64_t v7 = (*(void *)(v4 + 56) + a1 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return v6(v7);
}

uint64_t sub_24A4F9488(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 48);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 16;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))((v7 + v10 + a1) & ~v10, (v7 + v10 + a2) & ~v10);
  uint64_t v12 = (v11 & ~v10) + *(void *)(v9 + 48) + 7;
  unsigned int v13 = (void *)((v12 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v14 = (void *)((v12 + a2) & 0xFFFFFFFFFFFFFFF8);
  *unsigned int v13 = *v14;
  unint64_t v15 = ((unint64_t)v13 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = ((unint64_t)v14 + 11) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)unint64_t v15 = *(_DWORD *)v16;
  *(unsigned char *)(v15 + 4) = *(unsigned char *)(v16 + 4);
  return a1;
}

uint64_t sub_24A4F9578(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 40);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))((v7 + v10 + a1) & ~v10, (v7 + v10 + a2) & ~v10);
  uint64_t v12 = (v11 & ~v10) + *(void *)(v9 + 40) + 7;
  unsigned int v13 = (void *)((v12 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v14 = (void *)((v12 + a2) & 0xFFFFFFFFFFFFFFF8);
  *unsigned int v13 = *v14;
  unint64_t v15 = ((unint64_t)v13 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = ((unint64_t)v14 + 11) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)unint64_t v15 = *(_DWORD *)v16;
  *(unsigned char *)(v15 + 4) = *(unsigned char *)(v16 + 4);
  return a1;
}

uint64_t sub_24A4F9668(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 32);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 32;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))((v7 + v10 + a1) & ~v10, (v7 + v10 + a2) & ~v10);
  uint64_t v12 = (v11 & ~v10) + *(void *)(v9 + 32) + 7;
  unsigned int v13 = (void *)((v12 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v14 = (void *)((v12 + a2) & 0xFFFFFFFFFFFFFFF8);
  *unsigned int v13 = *v14;
  unint64_t v15 = ((unint64_t)v13 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = ((unint64_t)v14 + 11) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)unint64_t v15 = *(_DWORD *)v16;
  *(unsigned char *)(v15 + 4) = *(unsigned char *)(v16 + 4);
  return a1;
}

uint64_t sub_24A4F9758(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 40;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))((v7 + v10 + a1) & ~v10, (v7 + v10 + a2) & ~v10);
  uint64_t v12 = (v11 & ~v10) + *(void *)(v9 + 24) + 7;
  unsigned int v13 = (void *)((v12 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v14 = (void *)((v12 + a2) & 0xFFFFFFFFFFFFFFF8);
  *unsigned int v13 = *v14;
  unint64_t v15 = ((unint64_t)v13 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = ((unint64_t)v14 + 11) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)unint64_t v15 = *(_DWORD *)v16;
  *(unsigned char *)(v15 + 4) = *(unsigned char *)(v16 + 4);
  return a1;
}

uint64_t sub_24A4F9848(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(v4 + 64);
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v5) {
    unsigned int v11 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v11 = *(_DWORD *)(v7 + 84);
  }
  if (v11 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  else {
    unsigned int v12 = v11;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v13 = v9 + v10;
  uint64_t v14 = ((v9 + v10) & ~v10) + *(void *)(*(void *)(v6 - 8) + 64);
  if (v12 < a2 && *((unsigned char *)a1 + ((((v14 + 7) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8 | 5))) {
    return v12 + *a1 + 1;
  }
  if (v11 < 0x7FFFFFFF)
  {
    unint64_t v16 = *(void *)(((unint64_t)a1 + v14 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v16 >= 0xFFFFFFFF) {
      LODWORD(v16) = -1;
    }
    return (v16 + 1);
  }
  else if (v5 >= v8)
  {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  else
  {
    return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v13) & ~v10, v8, v6);
  }
}

void sub_24A4F99B8(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  uint64_t v7 = *(void *)(a4 + 24);
  unsigned int v8 = *(_DWORD *)(v6 + 84);
  uint64_t v9 = *(void *)(v7 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(void *)(v6 + 64);
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v8) {
    unsigned int v13 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v13 = *(_DWORD *)(v9 + 84);
  }
  if (v13 <= 0x7FFFFFFF) {
    unsigned int v14 = 0x7FFFFFFF;
  }
  else {
    unsigned int v14 = v13;
  }
  uint64_t v15 = v11 + v12;
  size_t v16 = ((v11 + v12) & ~v12) + *(void *)(*(void *)(v7 - 8) + 64);
  unint64_t v17 = (((v16 + 7) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8 | 5;
  if (v14 >= a2)
  {
    if (v14 < a3) {
      a1[v17] = 0;
    }
    if (a2)
    {
      if (v13 < 0x7FFFFFFF)
      {
        if ((a2 & 0x80000000) != 0) {
          uint64_t v22 = a2 ^ 0x80000000;
        }
        else {
          uint64_t v22 = a2 - 1;
        }
        *(void *)((unint64_t)&a1[v16 + 7] & 0xFFFFFFFFFFFFFFF8) = v22;
      }
      else if (v13 >= a2)
      {
        if (v8 >= v10)
        {
          unint64_t v25 = *(void (**)(void))(v6 + 56);
          v25();
        }
        else
        {
          unint64_t v23 = (unint64_t)&a1[v15] & ~v12;
          long long v24 = *(void (**)(unint64_t))(v9 + 56);
          v24(v23);
        }
      }
      else
      {
        if (v16 <= 3) {
          int v19 = ~(-1 << (8 * v16));
        }
        else {
          int v19 = -1;
        }
        if (v16)
        {
          int v20 = v19 & (~v13 + a2);
          if (v16 <= 3) {
            int v21 = v16;
          }
          else {
            int v21 = 4;
          }
          bzero(a1, v16);
          switch(v21)
          {
            case 2:
              *(_WORD *)a1 = v20;
              break;
            case 3:
              *(_WORD *)a1 = v20;
              a1[2] = BYTE2(v20);
              break;
            case 4:
              *(_DWORD *)a1 = v20;
              break;
            default:
              *a1 = v20;
              break;
          }
        }
      }
    }
  }
  else
  {
    int v18 = ~v14 + a2;
    bzero(a1, (((v16 + 7) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8 | 5);
    *(_DWORD *)a1 = v18;
    if (v14 < a3) {
      a1[v17] = 1;
    }
  }
}

uint64_t _HashTable.Bucket.description.getter()
{
  return 0x402874656B637542;
}

uint64_t sub_24A4F9CD0()
{
  return 0x402874656B637542;
}

double sub_24A4F9D54(void *a1, uint64_t a2)
{
  BOOL v3 = _HashTable.UnsafeHandle._startIterator(bucket:)(0, a1, a2) != 0;
  _HashTable.BucketIterator.advance()();
  return (double)v3 / (double)(1 << *a1);
}

char *sub_24A4F9DEC(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_24A49A01C(0, (1 << *a1) & ~(1 << *a1 >> 63), 0, MEMORY[0x263F8EE78]);
  uint64_t v13 = _HashTable.UnsafeHandle._startIterator(bucket:)(0, a1, a2);
  if (v13)
  {
    uint64_t v5 = -1 << *a1;
    unint64_t v6 = (v5 ^ ~v13) + ((uint64_t)a1[1] >> 6);
    if (v6 >= ~v5) {
      uint64_t v7 = ~v5;
    }
    else {
      uint64_t v7 = 0;
    }
    unint64_t v8 = v6 - v7;
  }
  else
  {
    unint64_t v8 = 0;
  }
  unint64_t v10 = *((void *)v4 + 2);
  unint64_t v9 = *((void *)v4 + 3);
  if (v10 >= v9 >> 1) {
    uint64_t v4 = sub_24A49A01C((char *)(v9 > 1), v10 + 1, 1, v4);
  }
  *((void *)v4 + 2) = v10 + 1;
  uint64_t v11 = &v4[16 * v10];
  *((void *)v11 + 4) = v8;
  v11[40] = v13 == 0;
  _HashTable.BucketIterator.advance()();
  return v4;
}

uint64_t _HashTable.BucketIterator.description.getter()
{
  sub_24A5BC430();
  uint64_t result = sub_24A5BB660();
  if (result <= 3)
  {
    if (__OFSUB__(4, result))
    {
      __break(1u);
LABEL_13:
      __break(1u);
      goto LABEL_14;
    }
    MEMORY[0x24C5C6B00](32, 0xE100000000000000, 4 - result);
    swift_bridgeObjectRetain();
    sub_24A5BB6F0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (!*(void *)(v0 + 24) || (sub_24A5BC430(), uint64_t result = sub_24A5BB660(), result > 3))
  {
LABEL_8:
    sub_24A4B21F4();
    sub_24A5BB7F0();
    uint64_t v2 = *(void *)(v0 + 40);
    uint64_t result = sub_24A5BB660();
    if (result >= v2)
    {
LABEL_11:
      sub_24A5BC070();
      sub_24A5BB6F0();
      sub_24A5BC430();
      sub_24A5BB6F0();
      swift_bridgeObjectRelease();
      sub_24A5BB6F0();
      sub_24A5BB6F0();
      swift_bridgeObjectRelease();
      sub_24A5BB6F0();
      sub_24A5BB6F0();
      swift_bridgeObjectRelease();
      sub_24A5BB6F0();
      sub_24A5BB6F0();
      swift_bridgeObjectRelease();
      sub_24A5BB6F0();
      sub_24A5BC430();
      sub_24A5BB6F0();
      swift_bridgeObjectRelease();
      sub_24A5BB6F0();
      return 0;
    }
    if (!__OFSUB__(v2, result))
    {
      MEMORY[0x24C5C6B00](48, 0xE100000000000000, v2 - result);
      swift_bridgeObjectRetain();
      sub_24A5BB6F0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  if (!__OFSUB__(4, result))
  {
    MEMORY[0x24C5C6B00](32, 0xE100000000000000, 4 - result);
    swift_bridgeObjectRetain();
    sub_24A5BB6F0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t static BitArray._isConsistencyCheckingEnabled.getter()
{
  return 0;
}

uint64_t _HashNode.UnsafeHandle.itemMap.getter(unsigned int *a1)
{
  return *a1;
}

uint64_t _HashNode.UnsafeHandle.itemPtr(at:)(unsigned int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 + *(unsigned int *)(a2 + 8);
  return v3 + *(void *)(*(void *)(swift_getTupleTypeMetadata2() - 8) + 72) * ~(unint64_t)a1;
}

uint64_t _HashNode.UnsafeHandle.childMap.getter(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

uint64_t _HashNode.UnsafeHandle.childPtr(at:)(unsigned int a1, uint64_t a2, uint64_t a3)
{
  return a3 + 16 * a1;
}

uint64_t _HashNode.UnsafeHandle.collisionHash.getter(uint64_t a1, uint64_t a2)
{
  return *(void *)a2;
}

uint64_t _HashNode.UnsafeHandle.reverseItems.getter()
{
  swift_getTupleTypeMetadata2();
  return sub_24A5BBD50();
}

uint64_t _HashNode.UnsafeHandle.itemsEndSlot.getter(unsigned int *a1)
{
  uint8x8_t v1 = (uint8x8_t)vcnt_s8((int8x8_t)*a1);
  v1.i16[0] = vaddlv_u8(v1);
  if (*a1 == a1[1]) {
    return *a1;
  }
  else {
    return v1.u32[0];
  }
}

BOOL _HashNode.UnsafeHandle.isCollisionNode.getter(_DWORD *a1)
{
  return (a1[1] & *a1) != 0;
}

uint64_t _HashNode.UnsafeHandle.itemCount.getter(unsigned int *a1)
{
  uint8x8_t v1 = (uint8x8_t)vcnt_s8((int8x8_t)*a1);
  v1.i16[0] = vaddlv_u8(v1);
  if (*a1 == a1[1]) {
    return *a1;
  }
  else {
    return v1.u32[0];
  }
}

uint64_t _HashNode.UnsafeHandle.children.getter()
{
  type metadata accessor for _HashNode();
  return sub_24A5BBD50();
}

uint64_t static _HashNode.UnsafeHandle.update<A>(_:_:)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  return sub_24A4FA51C(a1, a2);
}

{
  return sub_24A4FA51C(a1, a2);
}

uint64_t _HashNode.UnsafeHandle.itemMap.setter(uint64_t result, _DWORD *a2)
{
  *a2 = result;
  return result;
}

uint64_t _HashNode.UnsafeHandle.childMap.setter(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(a2 + 4) = result;
  return result;
}

uint64_t _HashNode.UnsafeHandle.bytesFree.getter(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t _HashNode.UnsafeHandle.bytesFree.setter(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(a2 + 12) = result;
  return result;
}

uint64_t _HashNode.UnsafeHandle.byteCapacity.getter(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

Swift::Void __swiftcall _HashNode.UnsafeHandle.clear()()
{
  *(void *)uint64_t v0 = 0;
  *(_DWORD *)(v0 + 12) = *(_DWORD *)(v0 + 8);
}

uint64_t static _HashNode.UnsafeHandle.read<A>(_:_:)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  return sub_24A4FA51C(a1, a2);
}

{
  return sub_24A4FA51C(a1, a2);
}

uint64_t sub_24A4FA51C(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  return a2(a1 + 16, a1 + 32);
}

uint64_t _HashNode.UnsafeHandle.subscript.unsafeMutableAddressor(unsigned int a1, uint64_t a2, uint64_t a3)
{
  return a3 + 16 * a1;
}

uint64_t _HashNode.UnsafeHandle.collisionCount.getter(unsigned int *a1)
{
  return *a1;
}

BOOL _HashNode.UnsafeHandle.hasSingletonItem.getter(int *a1)
{
  int v1 = *a1;
  int v2 = a1[1];
  BOOL v3 = (v1 & (v1 - 1)) == 0;
  if (*a1) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (!v4) {
    BOOL v3 = 0;
  }
  if (v1 == v2) {
    return v1 == 1;
  }
  else {
    return v3;
  }
}

uint64_t _s19CollectionsInternal9_HashNodeV12UnsafeHandleV4itemx3key_q_5valuetAA01_C4SlotV_tcilu_0(unsigned int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 + *(unsigned int *)(a2 + 8);
  return v3 + *(void *)(*(void *)(swift_getTupleTypeMetadata2() - 8) + 72) * ~(unint64_t)a1;
}

uint64_t _HashNode.UnsafeHandle.childrenEndSlot.getter(_DWORD *a1)
{
  uint8x8_t v1 = (uint8x8_t)vcnt_s8((int8x8_t)a1[1]);
  v1.i16[0] = vaddlv_u8(v1);
  if (*a1 == a1[1]) {
    return 0;
  }
  else {
    return v1.u32[0];
  }
}

uint64_t _HashNode.UnsafeHandle.childCount.getter(_DWORD *a1, int8x8_t a2)
{
  if (*a1 == a1[1]) {
    return 0;
  }
  a2.i32[0] = a1[1];
  uint8x8_t v3 = (uint8x8_t)vcnt_s8(a2);
  v3.i16[0] = vaddlv_u8(v3);
  return v3.u32[0];
}

uint64_t _HashNode.UnsafeHandle._childrenStart.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _HashNode.UnsafeHandle.collisionCount.setter(uint64_t result, _DWORD *a2)
{
  *a2 = result;
  a2[1] = result;
  return result;
}

BOOL _HashNode.UnsafeHandle.hasSingletonChild.getter(_DWORD *a1)
{
  int v1 = a1[1];
  if (*a1) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v1 == 0;
  }
  return !v2 && (v1 & (v1 - 1)) == 0;
}

uint64_t _HashNode.UnsafeHandle._memory.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _HashNode.UnsafeHandle.init(_:_:isMutable:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return nullsub_1(a1, a2, a4, a5, a6);
}

uint64_t (*_HashNode.UnsafeHandle.itemMap.modify(uint64_t a1, _DWORD *a2))(uint64_t result)
{
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 8) = *a2;
  return sub_24A4FA6D8;
}

uint64_t sub_24A4FA6D8(uint64_t result)
{
  **(_DWORD **)uint64_t result = *(_DWORD *)(result + 8);
  return result;
}

_DWORD *(*_HashNode.UnsafeHandle.childMap.modify(uint64_t a1, uint64_t a2))(_DWORD *result)
{
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 4);
  return sub_24A4FA714;
}

_DWORD *sub_24A4FA714(_DWORD *result)
{
  *(_DWORD *)(*(void *)result + 4) = result[2];
  return result;
}

void *(*_HashNode.UnsafeHandle.bytesFree.modify(void *a1, uint64_t a2))(void *result)
{
  *a1 = *(unsigned int *)(a2 + 12);
  a1[1] = a2;
  return sub_24A4FA750;
}

void *sub_24A4FA750(void *result)
{
  *(_DWORD *)(result[1] + 12) = *result;
  return result;
}

int *(*_HashNode.UnsafeHandle.collisionCount.modify(void *a1, unsigned int *a2))(int *result)
{
  *a1 = *a2;
  a1[1] = a2;
  return sub_24A4FA788;
}

int *sub_24A4FA788(int *result)
{
  int v1 = (_DWORD *)*((void *)result + 1);
  int v2 = *result;
  *int v1 = *result;
  v1[1] = v2;
  return result;
}

uint64_t _HashNode.UnsafeHandle.collisionHash.setter(uint64_t result, uint64_t a2, void *a3)
{
  *a3 = result;
  return result;
}

uint64_t (*_HashNode.UnsafeHandle.collisionHash.modify(void *a1, uint64_t a2, void *a3))(uint64_t result)
{
  *a1 = *a3;
  a1[1] = a3;
  return sub_24A4FA7C8;
}

uint64_t sub_24A4FA7C8(uint64_t result)
{
  **(void **)(result + 8) = *(void *)result;
  return result;
}

BOOL _HashNode.UnsafeHandle.hasChildren.getter(_DWORD *a1)
{
  int v1 = a1[1];
  return *a1 != v1 && v1 != 0;
}

Swift::UInt _HashNode.UnsafeHandle.childBucket(at:)(Swift::Int ranked, _DWORD *a2)
{
  if ((a2[1] & *a2) != 0) {
    return 255;
  }
  Swift::UInt_optional v2 = UInt32._bit(ranked:)(ranked);
  if (v2.is_nil) {
    __break(1u);
  }
  return v2.value;
}

uint64_t _HashNode.UnsafeHandle.subscript.getter()
{
  return swift_retain();
}

uint64_t _HashNode.UnsafeHandle.subscript.setter(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = (void *)(a5 + 16 * a3);
  *uint64_t v5 = a1;
  v5[1] = a2;
  return swift_release();
}

uint64_t (*_HashNode.UnsafeHandle.subscript.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

{
  swift_getTupleTypeMetadata2();
  return nullsub_1;
}

uint64_t _HashNode.UnsafeHandle._itemsEnd.getter(uint64_t a1, uint64_t a2)
{
  return a2 + *(unsigned int *)(a1 + 8);
}

BOOL _HashNode.UnsafeHandle.hasItems.getter(_DWORD *a1)
{
  return *a1 != 0;
}

Swift::UInt _HashNode.UnsafeHandle.itemBucket(at:)(Swift::Int ranked, _DWORD *a2)
{
  if ((a2[1] & *a2) != 0) {
    return 255;
  }
  Swift::UInt_optional v2 = UInt32._bit(ranked:)(ranked);
  if (v2.is_nil) {
    __break(1u);
  }
  return v2.value;
}

uint64_t _HashNode.UnsafeHandle.subscript.getter(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v15 = TupleTypeMetadata2 - 8;
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  unint64_t v17 = (char *)&v26 - v16;
  uint64_t v18 = a5 + *(unsigned int *)(a4 + 8);
  uint64_t v19 = v18 + *(void *)(*(void *)(swift_getTupleTypeMetadata2() - 8) + 72) * ~(unint64_t)a3;
  uint64_t v20 = *(int *)(v15 + 56);
  int v21 = &v17[v20];
  uint64_t v22 = v19 + v20;
  uint64_t v23 = *(void *)(a6 - 8);
  (*(void (**)(char *))(v23 + 16))(v17);
  uint64_t v24 = *(void *)(a7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v21, v22, a7);
  (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(a1, v17, a6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v24 + 32))(a2, v21, a7);
}

uint64_t _HashNode.UnsafeHandle.subscript.setter(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v26 = a2;
  uint64_t v27 = a4;
  unsigned int v28 = a3;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v29 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  unsigned int v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  unint64_t v17 = (char *)&v26 - v16;
  uint64_t v18 = (char *)&v26 + *(int *)(v15 + 48) - v16;
  uint64_t v19 = *(void (***)(void, void, void))(a6 - 8);
  ((void (**)(char *, uint64_t, uint64_t))v19)[4]((char *)&v26 - v16, a1, a6);
  uint64_t v20 = *(void (***)(void, void, void))(a7 - 8);
  ((void (**)(char *, uint64_t, uint64_t))v20)[4](v18, v26, a7);
  int v21 = &v14[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (**)(char *, char *, uint64_t))v19)[2](v14, v17, a6);
  ((void (**)(char *, char *, uint64_t))v20)[2](v21, v18, a7);
  uint64_t v22 = a5 + *(unsigned int *)(v27 + 8);
  unint64_t v23 = ~(unint64_t)v28;
  uint64_t v24 = v22 + *(void *)(*(void *)(swift_getTupleTypeMetadata2() - 8) + 72) * v23;
  ((void (**)(uint64_t, char *, uint64_t))v19)[5](v24, v14, a6);
  ((void (**)(uint64_t, char *, uint64_t))v20)[5](v24 + *(int *)(TupleTypeMetadata2 + 48), v21, a7);
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v17, TupleTypeMetadata2);
}

BOOL _HashNode.UnsafeHandle.isAtrophiedNode.getter(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int8x8_t v5 = (int8x8_t)a1[1];
  if (*a1) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5.i32[0] == 0;
  }
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  return !v6 && v7.i32[0] <= 1u && _HashNode.isCollisionNode.getter(*a2, a2[1], a3, a4, a5);
}

uint64_t _s14descr26FE1DA71C12UnsafeHandleVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 != 1 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)a1) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t _s14descr26FE1DA71C12UnsafeHandleVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)uint64_t result = a2 - 2;
    *(void *)(result + 8) = 0;
    if (a3 >= 2) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 2) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for _HashNode.UnsafeHandle()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static Rope._Node.createLeaf(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X8>)
{
  static Rope._Node.createLeaf()(a2, a3, a4);
  uint64_t v5 = type metadata accessor for Rope._Node();
  sub_24A501AC8(a1, v5);
  uint64_t v6 = type metadata accessor for Rope._Item();
  uint8x8_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  return v7(a1, v6);
}

Swift::Void __swiftcall Rope._Node.ensureUnique()()
{
  uint64_t v2 = v0;
  uint64_t v3 = *(void *)(v0 - 8);
  ((void (*)())MEMORY[0x270FA5388])();
  uint64_t v5 = (uint64_t **)((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    Rope._Node.copy()(v2, v5);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
    (*(void (**)(uint64_t, uint64_t **, uint64_t))(v3 + 32))(v1, v5, v2);
  }
}

BOOL Rope._Node.isSingleton.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v6 = *(unsigned __int8 *)(*(void *)v5 + 18);
  (*(void (**)(char *))(v2 + 16))(v4);
  if (v6) {
    BOOL v7 = 0;
  }
  else {
    BOOL v7 = *(unsigned __int16 *)(*(void *)v4 + 16) == 1;
  }
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  return v7;
}

BOOL Rope._Node.isLeaf.getter()
{
  return *(unsigned char *)(*(void *)v0 + 18) == 0;
}

uint64_t Rope._Node.readInner<A>(_:)(void (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *v3 + 16;
  uint64_t v8 = v6
     + ((*(unsigned __int8 *)(*(void *)(a3 - 8) + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a3 - 8) + 80));
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(a3 + 24);
  swift_getWitnessTable();
  uint64_t v11 = nullsub_1(v7, v8, v9, a3, v10);
  uint64_t v13 = v12;
  swift_unknownObjectRetain();
  a1(v11, v13);
  return swift_unknownObjectRelease();
}

uint64_t Rope._Node.readLeaf<A>(_:)(void (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *v3;
  uint64_t v6 = *v3 + 16;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(a3 + 24);
  uint64_t v9 = type metadata accessor for Rope._Item();
  uint64_t v10 = v5
      + ((*(unsigned __int8 *)(*(void *)(v9 - 8) + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v9 - 8) + 80));
  swift_getWitnessTable();
  uint64_t v11 = nullsub_1(v6, v10, v7, v9, v8);
  uint64_t v13 = v12;
  swift_unknownObjectRetain();
  a1(v11, v13);
  return swift_unknownObjectRelease();
}

uint64_t Rope._Node.height.getter()
{
  return *(unsigned __int8 *)(*(void *)v0 + 18);
}

uint64_t Rope._Node.childCount.getter()
{
  return *(unsigned __int16 *)(*(void *)v0 + 16);
}

uint64_t Rope._Node._removeNode(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  Rope._Node.ensureUnique()();
  uint64_t v7 = *v3 + 16;
  unint64_t v8 = *v3
     + ((*(unsigned __int8 *)(*(void *)(a2 - 8) + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a2 - 8) + 80));
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v10 = *(void *)(a2 + 24);
  swift_getWitnessTable();
  uint64_t v11 = (_WORD *)nullsub_1(v7, v8, v9, a2, v10);
  uint64_t v13 = v12;
  swift_unknownObjectRetain();
  sub_24A4FE02C(v11, v13, a1, v9, v10, (void (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Node);
  swift_unknownObjectRelease();
  uint64_t v14 = a3 + *(int *)(a2 + 36);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 56);
  uint64_t v17 = swift_checkMetadataState();
  return v16(v14, v17, AssociatedConformanceWitness);
}

uint64_t Rope._Node.split(keeping:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (uint64_t **)((char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (*(unsigned char *)(*v3 + 18)) {
    static Rope._Node.createInner(height:)(*(void *)(v8 + 24), *(void *)(v8 + 32), v10);
  }
  else {
    static Rope._Node.createLeaf()(*(void *)(v8 + 24), *(void *)(v8 + 32), v10);
  }
  if (*(unsigned __int16 *)(*v3 + 16) > a1)
  {
    if (a1 < 1)
    {
      sub_24A5BC5A0();
    }
    else
    {
      Rope._Node.ensureUnique()();
      Rope._Node.prependChildren(movingFromSuffixOf:count:)(v3, *(unsigned __int16 *)(*v3 + 16) - a1, a2);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t **, uint64_t))(v7 + 32))(a3, v10, a2);
}

uint64_t Rope._Node._removeItem(at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Rope._Node.ensureUnique()();
  uint64_t v6 = *v4;
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = type metadata accessor for Rope._Item();
  uint64_t v10 = v6
      + ((*(unsigned __int8 *)(*(void *)(v9 - 8) + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v9 - 8) + 80));
  swift_getWitnessTable();
  uint64_t v11 = (_WORD *)nullsub_1(v6 + 16, v10, v7, v9, v8);
  uint64_t v13 = v12;
  swift_unknownObjectRetain();
  sub_24A4FE02C(v11, v13, a3, v7, v8, (void (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Item);
  swift_unknownObjectRelease();
  Rope._Item.summary.getter(v9);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 56);
  uint64_t v16 = swift_checkMetadataState();
  return v15(a2, v16, AssociatedConformanceWitness);
}

uint64_t Rope._Node.updateInner<A>(_:)(void (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *v3 + 16;
  uint64_t v8 = v6
     + ((*(unsigned __int8 *)(*(void *)(a3 - 8) + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a3 - 8) + 80));
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(a3 + 24);
  swift_getWitnessTable();
  uint64_t v11 = nullsub_1(v7, v8, v9, a3, v10);
  uint64_t v13 = v12;
  swift_unknownObjectRetain();
  a1(v11, v13);
  return swift_unknownObjectRelease();
}

uint64_t Rope._Node.asUnmanagedLeaf.getter()
{
  return Rope._UnmanagedLeaf.init(_:)(*v0);
}

uint64_t Rope._Node.updateLeaf<A>(_:)(void (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *v3;
  uint64_t v6 = *v3 + 16;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(a3 + 24);
  uint64_t v9 = type metadata accessor for Rope._Item();
  uint64_t v10 = v5
      + ((*(unsigned __int8 *)(*(void *)(v9 - 8) + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v9 - 8) + 80));
  swift_getWitnessTable();
  uint64_t v11 = nullsub_1(v6, v10, v7, v9, v8);
  uint64_t v13 = v12;
  swift_unknownObjectRetain();
  a1(v11, v13);
  return swift_unknownObjectRelease();
}

uint64_t static Rope._Node.createInner(children:_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  if (((*(unsigned __int8 *)(*(void *)result + 18) + 1) >> 8))
  {
    __break(1u);
  }
  else
  {
    uint64_t v9 = result;
    uint64_t v10 = type metadata accessor for Rope._Node();
    static Rope._Node.createInner(height:)(a3, a4, a5);
    uint64_t v11 = *(int *)(v10 + 36);
    uint64_t v12 = v9 + v11;
    uint64_t v13 = (char *)a5 + v11;
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 24))(v13, v12, AssociatedTypeWitness);
    uint64_t v15 = a2 + *(int *)(v10 + 36);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(v15, AssociatedTypeWitness, AssociatedConformanceWitness);
    uint64_t v17 = *a5 + 16;
    uint64_t v22 = *(void *)(v10 - 8);
    unint64_t v18 = *a5 + ((*(unsigned __int8 *)(v22 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
    swift_getWitnessTable();
    uint64_t v19 = (_WORD *)nullsub_1(v17, v18, a3, v10, a4);
    sub_24A4FD8E0(v19, v20, v9, a2, a3);
    int v21 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
    v21(a2, v10);
    return ((uint64_t (*)(uint64_t, uint64_t))v21)(v9, v10);
  }
  return result;
}

uint64_t Rope._Node.rebalance(prevNeighbor:)()
{
  char v1 = Rope._Node.rebalance(nextNeighbor:)(v0);
  if (v1) {
    sub_24A5BC5A0();
  }
  return v1 & 1;
}

BOOL Rope._Node.isEmpty.getter()
{
  return *(_WORD *)(*(void *)v0 + 16) == 0;
}

uint64_t Rope._Node.isUndersized.getter()
{
  uint64_t v1 = *(unsigned __int16 *)(*(void *)v0 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v5 = result + 1;
  if (__OFADD__(result, 1))
  {
    __break(1u);
  }
  else
  {
    if (v5 < 0) {
      uint64_t v5 = result + 2;
    }
    return v1 < v5 >> 1;
  }
  return result;
}

uint64_t Rope._Node._insertNode(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_24A501E54(a1, a2, a3);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8);
  return v5(a1, a3);
}

BOOL Rope._Node.isFull.getter()
{
  uint64_t v1 = *(unsigned __int16 *)(*(void *)v0 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(AssociatedTypeWitness, AssociatedConformanceWitness) == v1;
}

uint64_t Rope._Node.rebalance(nextNeighbor:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  if (*(_WORD *)(*v1 + 16))
  {
    if (Rope._Node.isUndersized.getter() & 1) != 0 || (Rope._Node.isUndersized.getter())
    {
      int64_t v4 = *(unsigned __int16 *)(*a1 + 16) + (unint64_t)*(unsigned __int16 *)(*v1 + 16);
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16);
      if (v7(AssociatedTypeWitness, AssociatedConformanceWitness) >= v4)
      {
LABEL_13:
        static Rope._Node.redistributeChildren(_:_:to:)(v2, a1, v4);
        return *(_WORD *)(*a1 + 16) == 0;
      }
      uint64_t result = v7(AssociatedTypeWitness, AssociatedConformanceWitness);
      uint64_t v9 = result + 1;
      if (__OFADD__(result, 1))
      {
        __break(1u);
      }
      else
      {
        int64_t v4 = (unint64_t)v4 >> 1;
        if (v9 < 0) {
          uint64_t v9 = result + 2;
        }
        if (v4 >= v9 >> 1) {
          goto LABEL_13;
        }
        uint64_t result = v7(AssociatedTypeWitness, AssociatedConformanceWitness);
        uint64_t v10 = result + 1;
        if (!__OFADD__(result, 1))
        {
          if (v10 < 0) {
            uint64_t v10 = result + 2;
          }
          int64_t v4 = v10 >> 1;
          goto LABEL_13;
        }
      }
      __break(1u);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    sub_24A5BC5A0();
    return 1;
  }
  return result;
}

uint64_t Rope._Node._appendNode(_:)(uint64_t a1, uint64_t a2)
{
  sub_24A501CD0(a1, a2);
  int64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8);
  return v4(a1, a2);
}

uint64_t (*Rope._Node.lastItem.modify(void *a1, uint64_t a2))()
{
  uint64_t v5 = malloc(0x30uLL);
  *a1 = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  *uint64_t v5 = v2;
  v5[1] = v6;
  void v5[2] = v7;
  uint64_t v8 = type metadata accessor for Rope._Node._ModifyState();
  _OWORD v5[3] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  long long v5[4] = v9;
  uint64_t v10 = malloc(*(void *)(v9 + 64));
  v5[5] = v10;
  Rope._Node._prepareModifyLast()(a2, v10);
  return sub_24A4FC164;
}

void static Rope._Node.redistributeChildren(_:_:to:)(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Rope._Node();
  Rope._Node.ensureUnique()();
  Rope._Node.ensureUnique()();
  uint64_t v7 = *(unsigned __int16 *)(*a1 + 16);
  uint64_t v8 = *(unsigned __int16 *)(*a2 + 16) + v7;
  if (v8 >= a3) {
    uint64_t v8 = a3;
  }
  uint64_t v9 = v8 - v7;
  if (__OFSUB__(v8, v7))
  {
    __break(1u);
    goto LABEL_11;
  }
  if (!v9) {
    return;
  }
  if (v9 >= 1)
  {
    Rope._Node.appendChildren(movingFromPrefixOf:count:)(a2, v9, v6);
    return;
  }
  if (__OFSUB__(0, v9))
  {
LABEL_11:
    __break(1u);
    return;
  }
  Rope._Node.prependChildren(movingFromSuffixOf:count:)(a1, v7 - v8, v6);
}

uint64_t Rope._Node._appendItem(_:)(uint64_t a1, uint64_t a2)
{
  sub_24A501AC8(a1, a2);
  uint64_t v3 = type metadata accessor for Rope._Item();
  int64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  return v4(a1, v3);
}

uint64_t Rope._Node.lastItem.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = Rope._Node.lastPath.getter(a1);
  return Rope._Node.subscript.getter(v4, a1, a2);
}

uint64_t Rope._Node.firstItem.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t started = Rope._Node._startPath.getter();
  return Rope._Node.subscript.getter(started, a1, a2);
}

void (*Rope._Node.firstItem.modify(void *a1, uint64_t a2))(void *a1)
{
  unint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  unint64_t started = Rope._Node._startPath.getter();
  v4[4] = Rope._Node.subscript.modify(v4, started, a2);
  return sub_24A4FC3A4;
}

void sub_24A4FC3A4(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 32))(*a1, 0);
  free(v1);
}

uint64_t static Rope._Node.createLeaf()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_24A5BBD20();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)v15 - v8;
  uint64_t v10 = type metadata accessor for Rope._Item();
  uint64_t WitnessTable = swift_getWitnessTable();
  v15[0] = a1;
  v15[1] = v10;
  v15[2] = a2;
  uint64_t v15[3] = WitnessTable;
  type metadata accessor for Rope._Storage();
  uint64_t v12 = (uint64_t *)static Rope._Storage.create(height:)();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v9, 0, 1, AssociatedTypeWitness);
  return Rope._Node.init(leaf:summary:)(v12, (uint64_t)v9, a3);
}

uint64_t Rope._Node.copy(slots:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v40 = a1;
  uint64_t v41 = a2;
  uint64_t v43 = a4;
  uint64_t v8 = *(void *)(a3 + 24);
  uint64_t v44 = *(void *)(a3 + 16);
  uint64_t v7 = v44;
  uint64_t v45 = a3;
  uint64_t v46 = v8;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v39 = WitnessTable;
  type metadata accessor for Rope._Storage();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v37 = (char *)&v36 - v10;
  uint64_t v11 = sub_24A5BBD20();
  MEMORY[0x270FA5388](v11 - 8);
  unsigned int v42 = (char *)&v36 - v12;
  uint64_t v13 = type metadata accessor for Rope._Item();
  uint64_t v14 = swift_getWitnessTable();
  uint64_t v44 = v7;
  uint64_t v45 = v13;
  uint64_t v46 = v8;
  uint64_t WitnessTable = v14;
  uint64_t v36 = v14;
  type metadata accessor for Rope._Storage();
  uint64_t v15 = swift_getTupleTypeMetadata2();
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  unint64_t v18 = (char *)&v36 - v17;
  uint64_t v19 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v16);
  int v21 = (char *)&v36 - v20;
  uint64_t v22 = *v5;
  if (*(unsigned char *)(v22 + 18))
  {
    uint64_t v23 = nullsub_1(v22 + 16, v22+ ((*(unsigned __int8 *)(*(void *)(a3 - 8) + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a3 - 8) + 80)), v7, a3, v8);
    uint64_t v25 = v24;
    uint64_t v26 = (uint64_t)&v37[*(int *)(TupleTypeMetadata2 + 48)];
    swift_unknownObjectRetain();
    uint64_t v27 = (void *)sub_24A4FDDC0(v26, v23, v25, v40, v41, v7, v8, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Node);
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 32))(v21, v26, AssociatedTypeWitness);
    uint64_t v28 = (uint64_t)v42;
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v42, v21, AssociatedTypeWitness);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(v28, 0, 1, AssociatedTypeWitness);
    Rope._Node.init(inner:summary:)(v27, v28, v43);
  }
  else
  {
    uint64_t v29 = nullsub_1(v22 + 16, v22+ ((*(unsigned __int8 *)(*(void *)(v13 - 8) + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v13 - 8) + 80)), v7, v13, v8);
    uint64_t v31 = v30;
    uint64_t v32 = (uint64_t)&v18[*(int *)(v15 + 48)];
    swift_unknownObjectRetain();
    int v33 = (uint64_t *)sub_24A4FDDC0(v32, v29, v31, v40, v41, v7, v8, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Item);
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 32))(v21, v32, AssociatedTypeWitness);
    uint64_t v34 = (uint64_t)v42;
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v42, v21, AssociatedTypeWitness);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(v34, 0, 1, AssociatedTypeWitness);
    Rope._Node.init(leaf:summary:)(v33, v34, v43);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v21, AssociatedTypeWitness);
}

uint64_t Rope._Node.object.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t Rope._Node.object.setter(uint64_t a1)
{
  uint64_t result = swift_unknownObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*Rope._Node.object.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t Rope._Node.summary.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 36);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);
  return v6(a2, v4, AssociatedTypeWitness);
}

uint64_t Rope._Node.summary.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 36);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 40);
  return v6(v4, a1, AssociatedTypeWitness);
}

uint64_t (*Rope._Node.summary.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t Rope._Node.init(leaf:summary:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t v30 = a2;
  uint64_t v28 = *a1;
  uint64_t v5 = *(void *)(v28 + class metadata base offset for Rope._Storage);
  uint64_t v6 = *(void *)(v28 + class metadata base offset for Rope._Storage + 16);
  uint64_t v7 = type metadata accessor for Rope._Node();
  uint64_t v31 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (void *)((char *)v25 - v8);
  v25[0] = v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v29 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  v25[1] = a1;
  uint64_t v26 = (char *)v25 - v11;
  *a3 = a1;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32);
  uint64_t v27 = v7;
  uint64_t v14 = (char *)a3 + *(int *)(v7 + 36);
  swift_retain();
  v13(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(void *, uint64_t **, uint64_t))(v31 + 16))(v9, a3, v7);
  uint64_t v15 = *v9 + 16;
  uint64_t v16 = *(void *)(class metadata base offset for Rope._Storage + v28 + 8);
  unint64_t v17 = *v9
      + ((*(unsigned __int8 *)(*(void *)(v16 - 8) + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v16 - 8) + 80));
  swift_getWitnessTable();
  uint64_t v18 = v25[0];
  uint64_t v19 = (unsigned __int16 *)nullsub_1(v15, v17, v25[0], v16, v6);
  uint64_t v21 = v20;
  swift_unknownObjectRetain();
  uint64_t v22 = v26;
  sub_24A4FD420(v19, v21, v18, v6, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Item);
  swift_release();
  swift_unknownObjectRelease();
  uint64_t v23 = sub_24A5BBD20();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8))(v30, v23);
  (*(void (**)(void *, uint64_t))(v31 + 8))(v9, v27);
  return (*(uint64_t (**)(char *, char *, uint64_t))(v29 + 40))(v14, v22, AssociatedTypeWitness);
}

uint64_t sub_24A4FCF88()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v1 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v3 = (char *)&v7 - v2;
  uint64_t v4 = type metadata accessor for Rope._Item();
  Rope._Item.summary.getter(v4);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(v3, AssociatedTypeWitness, AssociatedConformanceWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, AssociatedTypeWitness);
}

uint64_t Rope._Node.init(inner:summary:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v30 = a2;
  uint64_t v5 = *(void *)(*a1 + class metadata base offset for Rope._Storage + 8);
  uint64_t v26 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v31 = (char *)v25 - v6;
  uint64_t v8 = v7[2];
  uint64_t v9 = *v7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v29 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v27 = (char *)v25 - v11;
  v25[1] = a1;
  *a3 = a1;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32);
  uint64_t v28 = (char *)a3 + *(int *)(v5 + 36);
  swift_retain();
  v13(AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v14 = v26;
  uint64_t v15 = v31;
  (*(void (**)(char *, void *, uint64_t))(v26 + 16))(v31, a3, v5);
  uint64_t v16 = *(void *)v15;
  uint64_t v17 = v14;
  uint64_t v18 = v16 + ((*(unsigned __int8 *)(v14 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  swift_getWitnessTable();
  uint64_t v19 = (unsigned __int16 *)nullsub_1(v16 + 16, v18, v9, v5, v8);
  uint64_t v21 = v20;
  swift_unknownObjectRetain();
  uint64_t v22 = v27;
  sub_24A4FD420(v19, v21, v9, v8, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Node);
  swift_release();
  swift_unknownObjectRelease();
  uint64_t v23 = sub_24A5BBD20();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8))(v30, v23);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v31, v5);
  return (*(uint64_t (**)(char *, char *, uint64_t))(v29 + 40))(v28, v22, AssociatedTypeWitness);
}

uint64_t sub_24A4FD420(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v11 = a5(0, a3, a4);
  uint64_t WitnessTable = swift_getWitnessTable();
  Rope._UnsafeHandle.children.getter(a1, a2, a3, v11, a4, WitnessTable);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(AssociatedTypeWitness, AssociatedConformanceWitness);
  sub_24A5BB580();
  swift_getWitnessTable();
  return sub_24A5BB8E0();
}

uint64_t sub_24A4FD5C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + *(int *)(type metadata accessor for Rope._Node() + 36);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 48);
  uint64_t v5 = swift_checkMetadataState();
  return v4(v2, v5, AssociatedConformanceWitness);
}

uint64_t sub_24A4FD69C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 36);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);
  return v6(a2, v4, AssociatedTypeWitness);
}

uint64_t Rope._Node._headerPtr.getter()
{
  return *v0 + 16;
}

uint64_t Rope._Node.header.getter()
{
  return *(unsigned __int16 *)(*(void *)v0 + 16) | (*(unsigned __int8 *)(*(void *)v0 + 18) << 16);
}

uint64_t Rope._Node.asLeaf.getter()
{
  return swift_retain();
}

uint64_t static Rope._Node.createInner(height:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_24A5BBD20();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)v15 - v8;
  uint64_t v10 = type metadata accessor for Rope._Node();
  uint64_t WitnessTable = swift_getWitnessTable();
  v15[0] = a1;
  v15[1] = v10;
  v15[2] = a2;
  uint64_t v15[3] = WitnessTable;
  type metadata accessor for Rope._Storage();
  uint64_t v12 = (void *)static Rope._Storage.create(height:)();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v9, 0, 1, AssociatedTypeWitness);
  return Rope._Node.init(inner:summary:)(v12, (uint64_t)v9, a3);
}

uint64_t sub_24A4FD8E0(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for Rope._Node();
  swift_getWitnessTable();
  sub_24A54A05C(a3, a1, a2, a5, v10);
  return sub_24A54A05C(a4, a1, a2, a5, v10);
}

Swift::Bool __swiftcall Rope._Node.isUnique()()
{
  return swift_isUniquelyReferenced_nonNull();
}

uint64_t Rope._Node.copy()@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_24A5BBD20();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v23 - v8;
  uint64_t v10 = *v2;
  if (*(unsigned char *)(*v2 + 18))
  {
    uint64_t v11 = v10
        + ((*(unsigned __int8 *)(*(void *)(a1 - 8) + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a1 - 8) + 80));
    swift_getWitnessTable();
    uint64_t v12 = (_WORD *)nullsub_1(v10 + 16, v11, v5, a1, v4);
    swift_unknownObjectRetain();
    sub_24A4FDD30(v12, v5, v4, (void (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Node, (uint64_t *)&v26);
    swift_unknownObjectRelease();
    uint64_t v13 = v26;
    uint64_t v14 = (uint64_t)v2 + *(int *)(a1 + 36);
    uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v9, v14, AssociatedTypeWitness);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v9, 0, 1, AssociatedTypeWitness);
    return Rope._Node.init(inner:summary:)(v13, (uint64_t)v9, v25);
  }
  else
  {
    uint64_t v24 = v10 + 16;
    uint64_t v17 = type metadata accessor for Rope._Item();
    uint64_t v18 = v10
        + ((*(unsigned __int8 *)(*(void *)(v17 - 8) + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v17 - 8) + 80));
    swift_getWitnessTable();
    uint64_t v19 = (_WORD *)nullsub_1(v24, v18, v5, v17, v4);
    swift_unknownObjectRetain();
    sub_24A4FDD30(v19, v5, v4, (void (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Item, (uint64_t *)&v26);
    swift_unknownObjectRelease();
    uint64_t v20 = v26;
    uint64_t v21 = (uint64_t)v2 + *(int *)(a1 + 36);
    uint64_t v22 = *(void *)(AssociatedTypeWitness - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v9, v21, AssociatedTypeWitness);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v9, 0, 1, AssociatedTypeWitness);
    return Rope._Node.init(leaf:summary:)(v20, (uint64_t)v9, v25);
  }
}

uint64_t sub_24A4FDD30@<X0>(_WORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void (*a4)(void, uint64_t, uint64_t)@<X4>, uint64_t *a5@<X8>)
{
  a4(0, a2, a3);
  swift_getWitnessTable();
  uint64_t result = Rope._UnsafeHandle.copy()(a1);
  *a5 = result;
  return result;
}

uint64_t sub_24A4FDDC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(void, uint64_t, uint64_t))
{
  uint64_t v14 = a8(0, a6, a7);
  swift_getWitnessTable();
  return Rope._UnsafeHandle.copy(slots:)(a1, a4, a5, a2, a3, a6, v14);
}

uint64_t Rope._Node._insertItem(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_24A50201C(a1, a2, a3);
  uint64_t v4 = type metadata accessor for Rope._Item();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  return v5(a1, v4);
}

uint64_t sub_24A4FDEEC(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void, uint64_t, uint64_t))
{
  uint64_t v12 = a7(0, a5, a6);
  swift_getWitnessTable();
  return sub_24A54A14C(a3, a4, a1, a2, a5, v12);
}

uint64_t sub_24A4FDF90(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t))
{
  uint64_t v10 = a6(0, a4, a5);
  swift_getWitnessTable();
  return sub_24A54A05C(a3, a1, a2, a4, v10);
}

uint64_t sub_24A4FE02C(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void, uint64_t, uint64_t))
{
  a6(0, a4, a5);
  swift_getWitnessTable();
  return Rope._UnsafeHandle._removeChild(at:)(a3, a1);
}

uint64_t Rope._Node.prependChildren(movingFromSuffixOf:count:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_24A4FE100(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))Rope._UnsafeHandle._prependChildren(movingFromSuffixOf:count:));
}

uint64_t Rope._Node.appendChildren(movingFromPrefixOf:count:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_24A4FE100(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))Rope._UnsafeHandle._appendChildren(movingFromPrefixOf:count:));
}

uint64_t sub_24A4FE100(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v25 = a4;
  uint64_t v26 = a2;
  uint64_t v28 = a1;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v27 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v23 - v9;
  uint64_t v11 = *v4;
  if (*(unsigned char *)(*v4 + 18))
  {
    uint64_t v12 = v11
        + ((*(unsigned __int8 *)(*(void *)(a3 - 8) + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a3 - 8) + 80));
    swift_getWitnessTable();
    uint64_t v13 = nullsub_1(v11 + 16, v12, v7, a3, v6);
    uint64_t v15 = v14;
    swift_unknownObjectRetain();
    sub_24A4FE438(v13, v15, v28, v26, v7, v6, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Node, (uint64_t)&protocol conformance descriptor for Rope<A>._Node, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Node, v25);
  }
  else
  {
    uint64_t v24 = v11 + 16;
    uint64_t v16 = type metadata accessor for Rope._Item();
    uint64_t v17 = v11
        + ((*(unsigned __int8 *)(*(void *)(v16 - 8) + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v16 - 8) + 80));
    swift_getWitnessTable();
    uint64_t v18 = nullsub_1(v24, v17, v7, v16, v6);
    uint64_t v20 = v19;
    swift_unknownObjectRetain();
    sub_24A4FE438(v18, v20, v28, v26, v7, v6, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Item, (uint64_t)&protocol conformance descriptor for Rope<A>._Item, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Item, v25);
  }
  swift_unknownObjectRelease();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(v10, AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 56))(v10, AssociatedTypeWitness, AssociatedConformanceWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v10, AssociatedTypeWitness);
}

uint64_t sub_24A4FE438(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void, uint64_t, uint64_t), uint64_t a8, uint64_t (*a9)(void, uint64_t, uint64_t), uint64_t (*a10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v14 = *a3;
  uint64_t v15 = *a3 + 16;
  uint64_t v16 = a7(0, a5, a6);
  uint64_t v17 = v14
      + ((*(unsigned __int8 *)(*(void *)(v16 - 8) + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v16 - 8) + 80));
  swift_getWitnessTable();
  uint64_t v18 = nullsub_1(v15, v17, a5, v16, a6);
  uint64_t v20 = v19;
  swift_unknownObjectRetain();
  sub_24A4FE570(v18, v20, a1, a2, a4, a5, a6, a9, a8, a10);
  return swift_unknownObjectRelease();
}

uint64_t sub_24A4FE570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(void, uint64_t, uint64_t), uint64_t a9, uint64_t (*a10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v17 = a8(0, a6, a7);
  uint64_t WitnessTable = swift_getWitnessTable();
  return a10(a1, a2, a5, a3, a4, a6, v17, a7, WitnessTable);
}

uint64_t Rope._Node._startPath.getter()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)v0 + 18);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return _RopePath.init(height:)(v1);
}

uint64_t Rope._Node.lastPath.getter(uint64_t a1)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)v1 + 18);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = _RopePath.init(height:)(v3);
  Rope._Node.descendToLastItem(under:)((uint64_t)&v5, a1);
  return v5;
}

uint64_t Rope._Node.descendToLastItem(under:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = (unsigned __int16 *)(*v2 + 16);
  uint64_t v7 = *v6 - 1;
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  int v10 = *(unsigned __int8 *)(*v2 + 18);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v11 = type metadata accessor for _RopePath();
  _RopePath.subscript.setter(v7, v10, v11);
  if (v10)
  {
    uint64_t v12 = v5
        + ((*(unsigned __int8 *)(*(void *)(a2 - 8) + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a2 - 8) + 80));
    swift_getWitnessTable();
    uint64_t v13 = (unsigned __int16 *)nullsub_1(v6, v12, v9, a2, v8);
    uint64_t v15 = v14;
    swift_unknownObjectRetain();
    sub_24A4FEC50(v13, v15, v7, a1, v9, v8, &v17);
    swift_unknownObjectRelease();
    return v17;
  }
  else
  {
    return Rope._UnmanagedLeaf.init(_:)(v5);
  }
}

BOOL Rope._Node.isAtEnd(_:)(unint64_t a1)
{
  unsigned __int8 v3 = *(unsigned char *)(*(void *)v1 + 18);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return _RopePath.subscript.getter(v3, a1, AssociatedTypeWitness, AssociatedConformanceWitness) == *(unsigned __int16 *)(*(void *)v1 + 16);
}

uint64_t Rope._Node.descendToFirstItem(under:)(uint64_t result, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(*(void *)v2 + 18) + 1;
  if ((v3 >> 8))
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = (unint64_t *)result;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    type metadata accessor for _RopePath();
    _RopePath.clear(below:)(v3);
    unint64_t v6 = *v5;
    return Rope._Node.unmanagedLeaf(at:)(v6, a2);
  }
  return result;
}

uint64_t Rope._Node.unmanagedLeaf(at:)(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  unsigned __int8 v4 = *(unsigned char *)(*v2 + 18);
  if (v4)
  {
    uint64_t v8 = *(void *)(a2 + 16);
    uint64_t v7 = *(void *)(a2 + 24);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v11 = _RopePath.subscript.getter(v4, a1, AssociatedTypeWitness, AssociatedConformanceWitness);
    uint64_t v12 = v3
        + ((*(unsigned __int8 *)(*(void *)(a2 - 8) + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a2 - 8) + 80));
    swift_getWitnessTable();
    uint64_t v13 = (unsigned __int16 *)nullsub_1(v3 + 16, v12, v8, a2, v7);
    uint64_t v15 = v14;
    swift_unknownObjectRetain();
    sub_24A4FF030(v13, v15, v11, a1, v8, v7, &v18);
    swift_unknownObjectRelease();
    return v18;
  }
  else
  {
    uint64_t v17 = *v2;
    return Rope._UnmanagedLeaf.init(_:)(v17);
  }
}

uint64_t sub_24A4FEC50@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v20 = a4;
  uint64_t v21 = a7;
  uint64_t v12 = type metadata accessor for Rope._Node();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v20 - v14;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v17 = Rope._UnsafeHandle.children.getter(a1, a2, a5, v12, a6, WitnessTable);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v17 + *(void *)(v13 + 72) * a3, v12);
  uint64_t v18 = Rope._Node.descendToLastItem(under:)(v20, v12);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  *uint64_t v21 = v18;
  return result;
}

uint64_t Rope._unmanagedLeaf(at:)(unint64_t a1)
{
  unint64_t v19 = a1;
  uint64_t v2 = type metadata accessor for Rope._Node();
  uint64_t v3 = sub_24A5BBD20();
  uint64_t v17 = *(void *)(v3 - 8);
  uint64_t v18 = v3;
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  unint64_t v6 = (char *)&v16 - v5;
  uint64_t v7 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v9 = (char *)&v16 - v8;
  unint64_t v10 = Rope._endPath.getter();
  swift_getAssociatedTypeWitness();
  unint64_t v11 = v19;
  swift_getAssociatedConformanceWitness();
  uint64_t v12 = 0;
  if (!static _RopePath.< infix(_:_:)(v11, v10)) {
    return v12;
  }
  uint64_t v14 = v17;
  uint64_t v13 = v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v6, v1, v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v6, 1, v2) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v6, v2);
    uint64_t v12 = Rope._Node.unmanagedLeaf(at:)(v11, v2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v2);
    return v12;
  }
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v6, v13);
  __break(1u);
  return result;
}

uint64_t sub_24A4FF030@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v20 = a4;
  uint64_t v21 = a7;
  uint64_t v12 = type metadata accessor for Rope._Node();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v20 - v14;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v17 = Rope._UnsafeHandle.children.getter(a1, a2, a5, v12, a6, WitnessTable);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v17 + *(void *)(v13 + 72) * a3, v12);
  uint64_t v18 = Rope._Node.unmanagedLeaf(at:)(v20, v12);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  *uint64_t v21 = v18;
  return result;
}

uint64_t Rope._Node.formSuccessor(of:)(uint64_t a1, uint64_t a2)
{
  int v5 = *(unsigned __int8 *)(*v2 + 18);
  unint64_t v6 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = _RopePath.subscript.getter(v5, v6, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v21 = v11;
  if (v5)
  {
    uint64_t v12 = *v2 + 16;
    unint64_t v13 = *v2
        + ((*(unsigned __int8 *)(*(void *)(a2 - 8) + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a2 - 8) + 80));
    swift_getWitnessTable();
    uint64_t v14 = (unsigned __int16 *)nullsub_1(v12, v13, v8, a2, v7);
    uint64_t v16 = v15;
    swift_unknownObjectRetain();
    sub_24A4FF37C(v14, v16, &v21, a1, (uint64_t)v2, v5, v8, v7, (char *)&v20);
    swift_unknownObjectRelease();
    return v20;
  }
  else
  {
    uint64_t v18 = v11 + 1;
    if (v11 + 1 >= *(unsigned __int16 *)(*v2 + 16))
    {
      return 0;
    }
    else
    {
      uint64_t v19 = type metadata accessor for _RopePath();
      _RopePath.subscript.setter(v18, 0, v19);
      *(void *)(a1 + 16) = Rope._UnmanagedLeaf.init(_:)(*v2);
      return 1;
    }
  }
}

uint64_t sub_24A4FF37C@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>)
{
  int v40 = a6;
  uint64_t v41 = a5;
  unsigned int v42 = a9;
  uint64_t v43 = a2;
  uint64_t v14 = type metadata accessor for Rope._Node();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v36 - v17;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v20 = v43;
  uint64_t v43 = a7;
  uint64_t v21 = Rope._UnsafeHandle.children.getter(a1, v20, a7, v14, a8, WitnessTable);
  uint64_t v22 = a3;
  uint64_t v23 = *a3;
  uint64_t v24 = *(void *)(v15 + 72);
  uint64_t v39 = v21;
  uint64_t v25 = v21 + v24 * v23;
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  uint64_t v37 = v24;
  uint64_t v38 = v26;
  v26(v18, v25, v14);
  uint64_t v27 = a4;
  LOBYTE(v15) = Rope._Node.formSuccessor(of:)(a4, v14);
  uint64_t v28 = *(uint64_t (**)(char *, uint64_t))(v16 + 8);
  uint64_t result = v28(v18, v14);
  if (v15) {
    goto LABEL_5;
  }
  uint64_t v30 = *v22 + 1;
  if (!__OFADD__(*v22, 1))
  {
    *uint64_t v22 = v30;
    if (v30 >= *(unsigned __int16 *)(*(void *)v41 + 16))
    {
      char v35 = 0;
      goto LABEL_7;
    }
    uint64_t v41 = v27 + 8;
    uint64_t v36 = v22;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    uint64_t v31 = type metadata accessor for _RopePath();
    uint64_t v32 = v30;
    uint64_t v33 = v41;
    _RopePath.subscript.setter(v32, v40, v31);
    v38(v18, v39 + *v36 * v37, v14);
    uint64_t v34 = Rope._Node.descendToFirstItem(under:)(v33, v14);
    uint64_t result = v28(v18, v14);
    *(void *)(v27 + 16) = v34;
LABEL_5:
    char v35 = 1;
LABEL_7:
    *unsigned int v42 = v35;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t Rope._Node.formPredecessor(of:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  int v6 = *(unsigned __int8 *)(*v2 + 18);
  unint64_t v7 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v12 = _RopePath.subscript.getter(v6, v7, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v21 = v12;
  if (v6)
  {
    uint64_t v13 = v5
        + ((*(unsigned __int8 *)(*(void *)(a2 - 8) + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a2 - 8) + 80));
    swift_getWitnessTable();
    uint64_t v14 = (unsigned __int16 *)nullsub_1(v5 + 16, v13, v9, a2, v8);
    uint64_t v16 = v15;
    swift_unknownObjectRetain();
    sub_24A4FF7E4(v14, v16, &v21, a1, v6, v9, v8, (char *)&v20);
    swift_unknownObjectRelease();
    return v20;
  }
  else
  {
    uint64_t v18 = v12 - 1;
    if (v12 < 1)
    {
      return 0;
    }
    else
    {
      uint64_t v19 = type metadata accessor for _RopePath();
      _RopePath.subscript.setter(v18, 0, v19);
      *(void *)(a1 + 16) = Rope._UnmanagedLeaf.init(_:)(v5);
      return 1;
    }
  }
}

uint64_t sub_24A4FF7E4@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char *a8@<X8>)
{
  int v32 = a5;
  uint64_t v15 = type metadata accessor for Rope._Node();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v29 - v17;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = Rope._UnsafeHandle.children.getter(a1, a2, a6, v15, a7, WitnessTable);
  uint64_t v21 = result;
  uint64_t v22 = *a3;
  if (*a3 < v23)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, result + *(void *)(v16 + 72) * v22, v15);
    char v24 = Rope._Node.formPredecessor(of:)(a4, v15);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    if (v24) {
      goto LABEL_6;
    }
    uint64_t v22 = *a3;
  }
  uint64_t v25 = v22 - 1;
  if (v22 < 1)
  {
    char v28 = 0;
    goto LABEL_8;
  }
  *a3 = v25;
  uint64_t v31 = a8;
  swift_getAssociatedTypeWitness();
  uint64_t v30 = a4;
  swift_getAssociatedConformanceWitness();
  uint64_t v26 = type metadata accessor for _RopePath();
  _RopePath.subscript.setter(v25, v32, v26);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v21 + *(void *)(v16 + 72) * *a3, v15);
  uint64_t v27 = Rope._Node.descendToLastItem(under:)(a4 + 8, v15);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  *(void *)(v30 + 16) = v27;
  a8 = v31;
LABEL_6:
  char v28 = 1;
LABEL_8:
  *a8 = v28;
  return result;
}

uint64_t Rope._Node.subscript.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v30 = a3;
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v10 = *(unsigned __int8 *)(*v3 + 18);
  uint64_t v13 = *(void *)(v11 + 16);
  uint64_t v12 = *(void *)(v11 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v16 = _RopePath.subscript.getter(v10, a1, AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t *, uint64_t))(v7 + 16))(v9, v4, a2);
  uint64_t v17 = *(unsigned __int16 *)(*(void *)v9 + 16);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, a2);
  if (v16 >= v17)
  {
    __break(1u);
  }
  else
  {
    uint64_t v19 = *v4;
    if (v10)
    {
      uint64_t v20 = v19 + ((*(unsigned __int8 *)(v7 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
      swift_getWitnessTable();
      uint64_t v21 = (unsigned __int16 *)nullsub_1(v19 + 16, v20, v13, a2, v12);
      uint64_t v23 = v22;
      swift_unknownObjectRetain();
      sub_24A500230(v21, v23, v16, a1, v13, v12, v30);
    }
    else
    {
      uint64_t v24 = type metadata accessor for Rope._Item();
      uint64_t v25 = v19
          + ((*(unsigned __int8 *)(*(void *)(v24 - 8) + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v24 - 8) + 80));
      swift_getWitnessTable();
      uint64_t v26 = (unsigned __int16 *)nullsub_1(v19 + 16, v25, v13, v24, v12);
      uint64_t v28 = v27;
      swift_unknownObjectRetain();
      sub_24A50039C(v26, v28, v16, v13, v12, v30);
    }
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t Rope._Node._prepareModifyLast()@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *(unsigned __int8 *)(*(void *)v2 + 18);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = _RopePath.init(height:)(v5);
  return Rope._Node._prepareModifyLast(_:)(&v7, a1, a2);
}

uint64_t Rope._Node.lastItem.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Rope._Node._ModifyState();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (unint64_t *)((char *)&v13 - v7);
  Rope._Node._prepareModifyLast()(a2, (uint64_t *)((char *)&v13 - v7));
  uint64_t v9 = (char *)v8 + *(int *)(v5 + 36);
  uint64_t v10 = type metadata accessor for Rope._Item();
  uint64_t v11 = *(void *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 24))(v9, a1, v10);
  sub_24A5007F0(v2, v8);
  (*(void (**)(unint64_t *, uint64_t))(v6 + 8))(v8, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(a1, v10);
}

uint64_t (*Rope._Node.subscript.modify(void *a1, unint64_t a2, uint64_t a3))()
{
  uint64_t v7 = malloc(0x30uLL);
  *a1 = v7;
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(a3 + 24);
  *uint64_t v7 = v3;
  v7[1] = v8;
  v7[2] = v9;
  uint64_t v10 = type metadata accessor for Rope._Node._ModifyState();
  _OWORD v7[3] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  _OWORD v7[4] = v11;
  uint64_t v12 = malloc(*(void *)(v11 + 64));
  void v7[5] = v12;
  Rope._Node._prepareModify(at:)(a2, a3, v12);
  return sub_24A4FC164;
}

void sub_24A500038(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v3 = (*a1)[4];
  uint64_t v2 = (unint64_t *)(*a1)[5];
  uint64_t v4 = (*a1)[3];
  sub_24A5007F0(**a1, v2);
  (*(void (**)(unint64_t *, uint64_t))(v3 + 8))(v2, v4);
  free(v2);
  free(v1);
}

uint64_t Rope._Node.firstItem.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Rope._Node._ModifyState();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (unint64_t *)((char *)&v14 - v7);
  unint64_t started = Rope._Node._startPath.getter();
  Rope._Node._prepareModify(at:)(started, a2, v8);
  uint64_t v10 = (char *)v8 + *(int *)(v5 + 36);
  uint64_t v11 = type metadata accessor for Rope._Item();
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 24))(v10, a1, v11);
  sub_24A5007F0(v2, v8);
  (*(void (**)(unint64_t *, uint64_t))(v6 + 8))(v8, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(a1, v11);
}

uint64_t sub_24A500230@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v19 = a7;
  uint64_t v20 = a4;
  uint64_t v12 = type metadata accessor for Rope._Node();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v19 - v14;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v17 = Rope._UnsafeHandle.children.getter(a1, a2, a5, v12, a6, WitnessTable);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v17 + *(void *)(v13 + 72) * a3, v12);
  Rope._Node.subscript.getter(v20, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t sub_24A50039C@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = type metadata accessor for Rope._Item();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v14 = Rope._UnsafeHandle.children.getter(a1, a2, a4, v12, a5, WitnessTable);
  uint64_t v15 = *(void *)(v12 - 8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
  uint64_t v17 = v14 + *(void *)(v15 + 72) * a3;
  return v16(a6, v17, v12);
}

uint64_t Rope._Node._prepareModify(at:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v33 = a3;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  int v32 = (char *)&v31 - v9;
  uint64_t v10 = type metadata accessor for Rope._Item();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v31 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v31 - v14;
  Rope._Node.ensureUnique()();
  int v16 = *(unsigned __int8 *)(*v3 + 18);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  unint64_t v34 = a1;
  uint64_t result = _RopePath.subscript.getter(v16, a1, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v19 = *v3;
  if (result >= *(unsigned __int16 *)(v19 + 16))
  {
    __break(1u);
  }
  else
  {
    uint64_t v20 = result;
    if (v16)
    {
      uint64_t v21 = v19
          + ((*(unsigned __int8 *)(*(void *)(a2 - 8) + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a2 - 8) + 80));
      swift_getWitnessTable();
      uint64_t v22 = (unsigned __int16 *)nullsub_1(v19 + 16, v21, v7, a2, v6);
      uint64_t v24 = v23;
      swift_unknownObjectRetain();
      sub_24A500E08(v22, v24, v20, v34, v7, v6);
      return swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v25 = v19 + ((*(unsigned __int8 *)(v11 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
      swift_getWitnessTable();
      uint64_t v26 = (unsigned __int16 *)nullsub_1(v19 + 16, v25, v7, v10, v6);
      uint64_t v28 = v27;
      swift_unknownObjectRetain();
      sub_24A501330(v26, v28, v20, v7, v6, (uint64_t)v15);
      swift_unknownObjectRelease();
      uint64_t v29 = (uint64_t)v31;
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v31, v15, v10);
      uint64_t v30 = (uint64_t)v32;
      Rope._Item.summary.getter(v10);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v10);
      return Rope._Node._ModifyState.init(path:item:summary:)(v34, v29, v30, v33);
    }
  }
  return result;
}

uint64_t sub_24A5007F0(uint64_t a1, unint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v6 = (char *)&v9 - v5;
  uint64_t v7 = type metadata accessor for Rope._Node();
  Rope._Node._finalizeModify(_:)((uint64_t)v6, a2, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, AssociatedTypeWitness);
}

uint64_t Rope._Node.subscript.setter(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for Rope._Node._ModifyState();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (unint64_t *)((char *)&v15 - v9);
  Rope._Node._prepareModify(at:)(a2, a3, (uint64_t *)((char *)&v15 - v9));
  uint64_t v11 = (char *)v10 + *(int *)(v7 + 36);
  uint64_t v12 = type metadata accessor for Rope._Item();
  uint64_t v13 = *(void *)(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 24))(v11, a1, v12);
  sub_24A5007F0(v3, v10);
  (*(void (**)(unint64_t *, uint64_t))(v8 + 8))(v10, v7);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(a1, v12);
}

uint64_t Rope._Node._ModifyState.path.getter()
{
  return *(void *)v0;
}

uint64_t Rope._Node._ModifyState.path.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*Rope._Node._ModifyState.path.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t Rope._Node._ModifyState.item.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 36);
  uint64_t v5 = type metadata accessor for Rope._Item();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t Rope._Node._ModifyState.item.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for Rope._Item();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*Rope._Node._ModifyState.item.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t Rope._Node._ModifyState.summary.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 40);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);
  return v6(a2, v4, AssociatedTypeWitness);
}

uint64_t Rope._Node._ModifyState.summary.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 40);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 40);
  return v6(v4, a1, AssociatedTypeWitness);
}

uint64_t (*Rope._Node._ModifyState.summary.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t Rope._Node._ModifyState.init(path:item:summary:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = a1;
  uint64_t v7 = type metadata accessor for Rope._Node._ModifyState();
  uint64_t v8 = (char *)a4 + *(int *)(v7 + 36);
  uint64_t v9 = type metadata accessor for Rope._Item();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8, a2, v9);
  uint64_t v10 = (char *)a4 + *(int *)(v7 + 40);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32);
  return v12(v10, a3, AssociatedTypeWitness);
}

uint64_t sub_24A500E08(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for Rope._Node();
  uint64_t WitnessTable = swift_getWitnessTable();
  Rope._UnsafeHandle.mutableChildren.getter(a1, a2, a5, v11, a6, WitnessTable);
  return Rope._Node._prepareModify(at:)(a4, v11);
}

uint64_t Rope._Node._prepareModifyLast(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = v3;
  int v40 = a3;
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v39 = (char *)&v37 - v10;
  uint64_t v11 = type metadata accessor for Rope._Item();
  uint64_t v38 = *(void *)(v11 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v37 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v37 - v14;
  Rope._Node.ensureUnique()();
  uint64_t v16 = *v3;
  uint64_t v17 = *(unsigned __int16 *)(*v3 + 16) - 1;
  int v18 = *(unsigned __int8 *)(v16 + 18);
  swift_getAssociatedConformanceWitness();
  uint64_t v19 = v17;
  uint64_t v20 = a1;
  uint64_t v21 = type metadata accessor for _RopePath();
  _RopePath.subscript.setter(v19, v18, v21);
  uint64_t v22 = *v4;
  if (v18)
  {
    uint64_t v23 = v22
        + ((*(unsigned __int8 *)(*(void *)(a2 - 8) + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a2 - 8) + 80));
    swift_getWitnessTable();
    uint64_t v24 = (unsigned __int16 *)nullsub_1(v22 + 16, v23, v8, a2, v7);
    uint64_t v26 = v25;
    swift_unknownObjectRetain();
    sub_24A501268(v24, v26, v19, (uint64_t)v20, v8, v7);
    return swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v28 = v38;
    uint64_t v29 = v19;
    uint64_t v30 = v22 + ((*(unsigned __int8 *)(v38 + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80));
    swift_getWitnessTable();
    uint64_t v31 = (unsigned __int16 *)nullsub_1(v22 + 16, v30, v8, v11, v7);
    uint64_t v33 = v32;
    swift_unknownObjectRetain();
    sub_24A501330(v31, v33, v29, v8, v7, (uint64_t)v15);
    swift_unknownObjectRelease();
    uint64_t v34 = *v20;
    uint64_t v35 = (uint64_t)v37;
    (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v37, v15, v11);
    uint64_t v36 = (uint64_t)v39;
    Rope._Item.summary.getter(v11);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v15, v11);
    return Rope._Node._ModifyState.init(path:item:summary:)(v34, v35, v36, v40);
  }
}

uint64_t sub_24A501268(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for Rope._Node();
  uint64_t WitnessTable = swift_getWitnessTable();
  Rope._UnsafeHandle.mutableChildren.getter(a1, a2, a5, v11, a6, WitnessTable);
  return Rope._Node._prepareModifyLast(_:)(a4, v11);
}

uint64_t sub_24A501330@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = type metadata accessor for Rope._Item();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v14 = Rope._UnsafeHandle.mutableChildren.getter(a1, a2, a4, v12, a5, WitnessTable);
  return sub_24A549290(a3, v14, v12, a6);
}

uint64_t Rope._Node._finalizeModify(_:)(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v47 = (char *)a1;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v45 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for Rope._UnmanagedLeaf();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v41 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v40 - v12;
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)&v40 - v15;
  uint64_t v46 = v3;
  uint64_t v17 = *v3;
  uint64_t v44 = a2;
  unint64_t v18 = *a2;
  int v19 = *(unsigned __int8 *)(v17 + 18);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v42 = _RopePath.subscript.getter(v19, v18, AssociatedTypeWitness, AssociatedConformanceWitness);
  if (v19)
  {
    uint64_t v40 = *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v20 = v45;
    uint64_t v21 = *v46 + 16;
    unint64_t v22 = *v46
        + ((*(unsigned __int8 *)(*(void *)(v45 - 8) + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v45 - 8) + 80));
    swift_getWitnessTable();
    uint64_t v23 = (unsigned __int16 *)nullsub_1(v21, v22, v6, v20, v5);
    uint64_t v25 = v24;
    swift_unknownObjectRetain();
    sub_24A501844(v23, v25, (uint64_t)v44, v6, v5, (uint64_t)v13);
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(AssociatedConformanceWitness + 48))(v13, AssociatedTypeWitness);
    uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    uint64_t v27 = v41;
    v26(v41, v13, AssociatedTypeWitness);
    uint64_t v28 = *(void *)&v13[v40];
    v26(v47, v27, AssociatedTypeWitness);
  }
  else
  {
    uint64_t v29 = type metadata accessor for Rope._Node._ModifyState();
    uint64_t v30 = (uint64_t)v44;
    uint64_t v31 = type metadata accessor for Rope._Item();
    Rope._Item.summary.getter(v31);
    uint64_t v32 = AssociatedConformanceWitness;
    RopeSummary.subtracting(_:)(v30 + *(int *)(v29 + 40), AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)v47);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, AssociatedTypeWitness);
    uint64_t v33 = v46;
    uint64_t v34 = *v46 + 16;
    unint64_t v35 = *v46
        + ((*(unsigned __int8 *)(*(void *)(v31 - 8) + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v31 - 8) + 80));
    swift_getWitnessTable();
    uint64_t v36 = (unsigned __int16 *)nullsub_1(v34, v35, v6, v31, v5);
    uint64_t v38 = v37;
    swift_unknownObjectRetain();
    sub_24A50196C(v36, v38, v42, v30, v6, v5);
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t, uint64_t))(v32 + 48))(v47, AssociatedTypeWitness, v32);
    return Rope._UnmanagedLeaf.init(_:)(*v33);
  }
  return v28;
}

uint64_t sub_24A501844@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for Rope._UnmanagedLeaf();
  uint64_t v12 = *(int *)(swift_getTupleTypeMetadata2() + 48);
  uint64_t v13 = type metadata accessor for Rope._Node();
  uint64_t WitnessTable = swift_getWitnessTable();
  Rope._UnsafeHandle.mutableChildren.getter(a1, a2, a4, v13, a5, WitnessTable);
  uint64_t result = Rope._Node._finalizeModify(_:)(a6, a3, v13);
  *(void *)(a6 + v12) = result;
  return result;
}

uint64_t sub_24A50196C(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for Rope._Item();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v22 - v14;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v17 = Rope._UnsafeHandle.mutableChildren.getter(a1, a2, a5, v12, a6, WitnessTable);
  uint64_t v19 = v18;
  uint64_t v20 = type metadata accessor for Rope._Node._ModifyState();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a4 + *(int *)(v20 + 36), v12);
  return sub_24A562CA0(a3, (uint64_t)v15, v17, v19, v12);
}

uint64_t sub_24A501AC8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v18 - v8;
  Rope._Node.ensureUnique()();
  uint64_t v10 = type metadata accessor for Rope._Item();
  Rope._Item.summary.getter(v10);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(v9, AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  uint64_t v12 = *v2;
  uint64_t v13 = *v2 + 16;
  uint64_t v14 = v12
      + ((*(unsigned __int8 *)(*(void *)(v10 - 8) + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v10 - 8) + 80));
  swift_getWitnessTable();
  uint64_t v15 = (_WORD *)nullsub_1(v13, v14, v5, v10, v4);
  return sub_24A4FDF90(v15, v16, a1, v5, v4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Item);
}

uint64_t sub_24A501CD0(uint64_t a1, uint64_t a2)
{
  Rope._Node.ensureUnique()();
  uint64_t v5 = a1 + *(int *)(a2 + 36);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 48);
  uint64_t v10 = swift_checkMetadataState();
  v9(v5, v10, AssociatedConformanceWitness);
  uint64_t v11 = *v2;
  uint64_t v12 = *v2 + 16;
  uint64_t v13 = v11
      + ((*(unsigned __int8 *)(*(void *)(a2 - 8) + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a2 - 8) + 80));
  swift_getWitnessTable();
  uint64_t v14 = (_WORD *)nullsub_1(v12, v13, v7, a2, v6);
  return sub_24A4FDF90(v14, v15, a1, v7, v6, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Node);
}

uint64_t sub_24A501E54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Rope._Node.ensureUnique()();
  uint64_t v6 = a1 + *(int *)(a3 + 36);
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(a3 + 24);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 48);
  uint64_t v11 = swift_checkMetadataState();
  v10(v6, v11, AssociatedConformanceWitness);
  uint64_t v12 = *v3;
  uint64_t v13 = v12
      + ((*(unsigned __int8 *)(*(void *)(a3 - 8) + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a3 - 8) + 80));
  swift_getWitnessTable();
  uint64_t v14 = (_WORD *)nullsub_1(v12 + 16, v13, v8, a3, v7);
  uint64_t v16 = v15;
  swift_unknownObjectRetain();
  sub_24A4FDEEC(v14, v16, a1, a2, v8, v7, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Node);
  return swift_unknownObjectRelease();
}

uint64_t type metadata accessor for Rope._Node._ModifyState()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_24A50201C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = a2;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v20 - v9;
  Rope._Node.ensureUnique()();
  uint64_t v11 = type metadata accessor for Rope._Item();
  Rope._Item.summary.getter(v11);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(v10, AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
  uint64_t v13 = *v3;
  uint64_t v14 = *v3 + 16;
  uint64_t v15 = v13
      + ((*(unsigned __int8 *)(*(void *)(v11 - 8) + 80) + 19) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v11 - 8) + 80));
  swift_getWitnessTable();
  uint64_t v16 = (_WORD *)nullsub_1(v14, v15, v6, v11, v5);
  uint64_t v18 = v17;
  swift_unknownObjectRetain();
  sub_24A4FDEEC(v16, v18, a1, v21, v6, v5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Rope._Item);
  return swift_unknownObjectRelease();
}

uint64_t sub_24A502250()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t *sub_24A50226C(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  unint64_t v7 = ((v6 + 8) & ~v6) + *(void *)(v5 + 64);
  int v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v12 = ~v6;
    uint64_t v13 = (char *)a1 + v6;
    uint64_t v14 = (char *)a2 + v6;
    uint64_t v15 = (unint64_t)(v13 + 8) & v12;
    uint64_t v16 = (unint64_t)(v14 + 8) & v12;
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_unknownObjectRetain();
    v17(v15, v16, AssociatedTypeWitness);
  }
  return a1;
}

uint64_t sub_24A502390(uint64_t a1)
{
  swift_unknownObjectRelease();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v4 = *(uint64_t (**)(unint64_t, uint64_t))(v3 + 8);
  uint64_t v5 = AssociatedTypeWitness;
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v3 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return v4(v6, v5);
}

void *sub_24A502424(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  uint64_t v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  swift_unknownObjectRetain();
  v6(v8, v9, AssociatedTypeWitness);
  return a1;
}

void *sub_24A5024E0(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), AssociatedTypeWitness);
  return a1;
}

void *sub_24A50258C(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), AssociatedTypeWitness);
  return a1;
}

void *sub_24A50261C(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRelease();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t sub_24A5026C0(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v5 = v4;
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  if (v6 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v10 = ((v8 + 8) & ~v8) + v9;
  char v11 = 8 * v10;
  if (v10 <= 3)
  {
    unsigned int v14 = ((a2 - v7 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v14))
    {
      int v12 = *(_DWORD *)((char *)a1 + v10);
      if (!v12) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v14 > 0xFF)
    {
      int v12 = *(unsigned __int16 *)((char *)a1 + v10);
      if (!*(unsigned __int16 *)((char *)a1 + v10)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v14 < 2)
    {
LABEL_23:
      if ((v6 & 0x80000000) != 0)
      {
        uint64_t v17 = *(uint64_t (**)(unint64_t))(v5 + 48);
        return v17(((unint64_t)a1 + v8 + 8) & ~v8);
      }
      else
      {
        uint64_t v16 = *(void *)a1;
        if (*(void *)a1 >= 0xFFFFFFFFuLL) {
          LODWORD(v16) = -1;
        }
        return (v16 + 1);
      }
    }
  }
  int v12 = *((unsigned __int8 *)a1 + v10);
  if (!*((unsigned char *)a1 + v10)) {
    goto LABEL_23;
  }
LABEL_15:
  int v15 = (v12 - 1) << v11;
  if (v10 > 3) {
    int v15 = 0;
  }
  if (v10)
  {
    if (v10 > 3) {
      LODWORD(v10) = 4;
    }
    switch((int)v10)
    {
      case 2:
        LODWORD(v10) = *a1;
        break;
      case 3:
        LODWORD(v10) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v10) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v10) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v10 | v15) + 1;
}

void sub_24A5028B0(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  size_t v10 = ((v8 + 8) & ~v8) + *(void *)(v6 + 64);
  if (a3 <= v9)
  {
    int v11 = 0;
  }
  else if (v10 <= 3)
  {
    unsigned int v14 = ((a3 - v9 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v14))
    {
      int v11 = 4;
    }
    else if (v14 >= 0x100)
    {
      int v11 = 2;
    }
    else
    {
      int v11 = v14 > 1;
    }
  }
  else
  {
    int v11 = 1;
  }
  if (v9 < a2)
  {
    unsigned int v12 = ~v9 + a2;
    if (v10 < 4)
    {
      int v13 = (v12 >> (8 * v10)) + 1;
      if (v10)
      {
        int v15 = v12 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v10] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v13;
        return;
      case 3:
        goto LABEL_42;
      case 4:
        *(_DWORD *)&a1[v10] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x24A502B30);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          uint64_t v17 = *(void (**)(unint64_t, uint64_t))(v6 + 56);
          v17((unint64_t)&a1[v8 + 8] & ~v8, a2);
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v16 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v16 = (a2 - 1);
          }
          *(void *)a1 = v16;
        }
      }
      return;
  }
}

uint64_t sub_24A502B58()
{
  uint64_t AssociatedTypeWitness = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return AssociatedTypeWitness;
}

uint64_t *sub_24A502C58(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  int v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v6 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v12 = *(_DWORD *)(v11 + 80);
  uint64_t v13 = v9 + v12;
  if ((v12 | (unint64_t)v7) > 7
    || ((*(_DWORD *)(v11 + 80) | v7) & 0x100000) != 0
    || ((v13 + ((v7 + 8) & ~(unint64_t)v7)) & ~v12)
     + *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) > 0x18)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16
                   + (((v12 | v7) & 0xF8 ^ 0x1F8) & ((v12 | v7) + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v17 = AssociatedTypeWitness;
    uint64_t v18 = ~v12;
    *a1 = *a2;
    uint64_t v19 = (char *)a2 + v8;
    uint64_t v20 = ((unint64_t)a1 + v8 + 8) & ~v8;
    uint64_t v21 = (unint64_t)(v19 + 8) & ~v8;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v20, v21, v5);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))((v20 + v13) & v18, (v21 + v13) & v18, v17);
  }
  return a1;
}

uint64_t sub_24A502E1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v3 = v2 + 8;
  unint64_t v4 = (a1 + *(unsigned __int8 *)(v2 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  (*(void (**)(unint64_t, void))(v2 + 8))(v4, *(void *)(a2 + 16));
  uint64_t v5 = *(void *)(v3 + 56);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(uint64_t (**)(unint64_t, uint64_t))(v7 + 8);
  uint64_t v9 = AssociatedTypeWitness;
  unint64_t v10 = (v4 + v5 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  return v8(v10, v9);
}

void *sub_24A502EF8(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 16;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t, void))(v4 + 16))(v7, v8, *(void *)(a3 + 16));
  uint64_t v9 = *(void *)(v5 + 48);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 16))((v9 + *(unsigned __int8 *)(v11 + 80) + v7) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), (v9 + *(unsigned __int8 *)(v11 + 80) + v8) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), AssociatedTypeWitness);
  return a1;
}

void *sub_24A502FF0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 24;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t, void))(v4 + 24))(v7, v8, *(void *)(a3 + 16));
  uint64_t v9 = *(void *)(v5 + 40);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 24))((v9 + *(unsigned __int8 *)(v11 + 80) + v7) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), (v9 + *(unsigned __int8 *)(v11 + 80) + v8) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), AssociatedTypeWitness);
  return a1;
}

void *sub_24A5030E8(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 32;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t, void))(v4 + 32))(v7, v8, *(void *)(a3 + 16));
  uint64_t v9 = *(void *)(v5 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 32))((v9 + *(unsigned __int8 *)(v11 + 80) + v7) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), (v9 + *(unsigned __int8 *)(v11 + 80) + v8) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), AssociatedTypeWitness);
  return a1;
}

void *sub_24A5031E0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 40;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t, void))(v4 + 40))(v7, v8, *(void *)(a3 + 16));
  uint64_t v9 = *(void *)(v5 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 40))((v9 + *(unsigned __int8 *)(v11 + 80) + v7) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), (v9 + *(unsigned __int8 *)(v11 + 80) + v8) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t sub_24A5032D8(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v12 = *(void *)(v6 + 64);
  uint64_t v13 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v14 = v7;
  }
  else {
    unsigned int v14 = *(_DWORD *)(v9 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (a2 <= v14) {
    goto LABEL_24;
  }
  uint64_t v15 = ((v12 + v13 + ((v11 + 8) & ~v11)) & ~v13) + *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  char v16 = 8 * v15;
  if (v15 <= 3)
  {
    unsigned int v18 = ((a2 - v14 + ~(-1 << v16)) >> v16) + 1;
    if (HIWORD(v18))
    {
      int v17 = *(_DWORD *)((char *)a1 + v15);
      if (!v17) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v18 > 0xFF)
    {
      int v17 = *(unsigned __int16 *)((char *)a1 + v15);
      if (!*(unsigned __int16 *)((char *)a1 + v15)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v18 < 2)
    {
LABEL_24:
      if (v14)
      {
        uint64_t v22 = ((unint64_t)a1 + v11 + 8) & ~v11;
        if (v7 >= v10)
        {
          uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
          return v26(v22, v7, v5);
        }
        else
        {
          uint64_t v23 = (v22 + v12 + v13) & ~v13;
          uint64_t v24 = *(uint64_t (**)(uint64_t))(v9 + 48);
          return v24(v23);
        }
      }
      return 0;
    }
  }
  int v17 = *((unsigned __int8 *)a1 + v15);
  if (!*((unsigned char *)a1 + v15)) {
    goto LABEL_24;
  }
LABEL_14:
  int v19 = (v17 - 1) << v16;
  if (v15 > 3) {
    int v19 = 0;
  }
  if (v15)
  {
    if (v15 <= 3) {
      int v20 = v15;
    }
    else {
      int v20 = 4;
    }
    switch(v20)
    {
      case 2:
        int v21 = *a1;
        break;
      case 3:
        int v21 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v21 = *(_DWORD *)a1;
        break;
      default:
        int v21 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v21 = 0;
  }
  return v14 + (v21 | v19) + 1;
}

void sub_24A50358C(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v29 = v8;
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  uint64_t v10 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v11 = v10;
  unsigned int v12 = *(_DWORD *)(v10 + 84);
  if (v12 <= v9) {
    unsigned int v13 = v9;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v14 = *(unsigned __int8 *)(v8 + 80);
  size_t v15 = *(void *)(v8 + 64);
  uint64_t v16 = *(unsigned __int8 *)(v10 + 80);
  size_t v17 = ((v15 + v16 + ((v14 + 8) & ~v14)) & ~v16) + *(void *)(v10 + 64);
  if (a3 <= v13)
  {
    int v18 = 0;
  }
  else if (v17 <= 3)
  {
    unsigned int v21 = ((a3 - v13 + ~(-1 << (8 * v17))) >> (8 * v17)) + 1;
    if (HIWORD(v21))
    {
      int v18 = 4;
    }
    else if (v21 >= 0x100)
    {
      int v18 = 2;
    }
    else
    {
      int v18 = v21 > 1;
    }
  }
  else
  {
    int v18 = 1;
  }
  if (v13 < a2)
  {
    unsigned int v19 = ~v13 + a2;
    if (v17 < 4)
    {
      int v20 = (v19 >> (8 * v17)) + 1;
      if (v17)
      {
        int v22 = v19 & ~(-1 << (8 * v17));
        bzero(a1, v17);
        if (v17 == 3)
        {
          *(_WORD *)a1 = v22;
          a1[2] = BYTE2(v22);
        }
        else if (v17 == 2)
        {
          *(_WORD *)a1 = v22;
        }
        else
        {
          *a1 = v22;
        }
      }
    }
    else
    {
      bzero(a1, v17);
      *(_DWORD *)a1 = v19;
      int v20 = 1;
    }
    switch(v18)
    {
      case 1:
        a1[v17] = v20;
        return;
      case 2:
        *(_WORD *)&a1[v17] = v20;
        return;
      case 3:
        goto LABEL_54;
      case 4:
        *(_DWORD *)&a1[v17] = v20;
        return;
      default:
        return;
    }
  }
  switch(v18)
  {
    case 1:
      a1[v17] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v17] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_54:
      __break(1u);
      JUMPOUT(0x24A503950);
    case 4:
      *(_DWORD *)&a1[v17] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        uint64_t v23 = (unsigned char *)((unint64_t)&a1[v14 + 8] & ~v14);
        if (v9 >= v12)
        {
          if (v9 >= a2)
          {
            uint64_t v28 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v29 + 56);
            v28(v23, a2, v9, v7);
          }
          else
          {
            if (v15 <= 3) {
              int v25 = ~(-1 << (8 * v15));
            }
            else {
              int v25 = -1;
            }
            if (v15)
            {
              int v26 = v25 & (~v9 + a2);
              if (v15 <= 3) {
                int v27 = v15;
              }
              else {
                int v27 = 4;
              }
              bzero(v23, v15);
              switch(v27)
              {
                case 2:
                  *(_WORD *)uint64_t v23 = v26;
                  break;
                case 3:
                  *(_WORD *)uint64_t v23 = v26;
                  void v23[2] = BYTE2(v26);
                  break;
                case 4:
                  *(_DWORD *)uint64_t v23 = v26;
                  break;
                default:
                  *uint64_t v23 = v26;
                  break;
              }
            }
          }
        }
        else
        {
          uint64_t v24 = *(void (**)(unint64_t, uint64_t))(v11 + 56);
          v24((unint64_t)&v23[v15 + v16] & ~v16, a2);
        }
      }
      return;
  }
}

uint64_t sub_24A503988(uint64_t a1, uint64_t a2)
{
  return sub_24A4FD5C0(a1, a2);
}

uint64_t sub_24A5039A4()
{
  return sub_24A4FCF88();
}

uint64_t static _HashTable.maximumUnhashedCount.getter()
{
  return 15;
}

uint64_t static _HashTable.minimumScale.getter()
{
  return 5;
}

uint64_t static _HashTable.maximumScale.getter()
{
  return 56;
}

uint64_t static _HashTable.minimumCapacity(forScale:)(uint64_t result)
{
  if (result < 5) {
    return 0;
  }
  double v1 = (double)(1 << result) * 0.25;
  if ((~*(void *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v1 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v1 < 9.22337204e18) {
    return (uint64_t)v1;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t _s19CollectionsInternal10_HashTableV15maximumCapacity8forScaleS2i_tFZ_0(uint64_t result)
{
  if (result < 5) {
    return 15;
  }
  double v1 = (double)(1 << result) * 0.75;
  if ((~*(void *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v1 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v1 < 9.22337204e18) {
    return (uint64_t)v1;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t static _HashStack.capacity.getter()
{
  return 13;
}

uint64_t _HashStack._contents.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v70 = a8;
  uint64_t v68 = a7;
  uint64_t v67 = a6;
  uint64_t v66 = a5;
  uint64_t v65 = a4;
  uint64_t v64 = a3;
  uint64_t v63 = a2;
  uint64_t v62 = a1;
  uint64_t v72 = a11;
  uint64_t v73 = a12;
  uint64_t v71 = a10;
  uint64_t v69 = a9;
  uint64_t v74 = a13;
  uint64_t v15 = *(void *)(a14 + 16);
  uint64_t v80 = v15;
  uint64_t v81 = v15;
  uint64_t v82 = v15;
  uint64_t v83 = v15;
  uint64_t v84 = v15;
  uint64_t v85 = v15;
  uint64_t v86 = v15;
  uint64_t v87 = v15;
  uint64_t v88 = v15;
  uint64_t v89 = v15;
  uint64_t v90 = v15;
  uint64_t v91 = v15;
  uint64_t v92 = v15;
  uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  size_t v17 = (int *)MEMORY[0x270FA5388](TupleTypeMetadata - 8);
  unsigned int v19 = (char *)&v44 - v18;
  uint64_t v20 = v17[14];
  unsigned int v21 = &v19[v20];
  uint64_t v54 = &v19[v20];
  uint64_t v22 = v17[18];
  uint64_t v23 = &v19[v22];
  int v55 = &v19[v22];
  uint64_t v24 = v17[22];
  int v25 = &v19[v24];
  unint64_t v56 = &v19[v24];
  uint64_t v26 = v17[26];
  uint64_t v75 = &v19[v26];
  uint64_t v27 = v17[30];
  uint64_t v76 = &v19[v27];
  uint64_t v28 = v17[34];
  uint64_t v77 = &v19[v28];
  uint64_t v29 = v17[38];
  uint64_t v78 = &v19[v29];
  uint64_t v30 = v17[42];
  int v79 = &v19[v30];
  uint64_t v31 = v17[46];
  int v57 = &v19[v31];
  uint64_t v32 = v17[50];
  char v59 = &v19[v32];
  uint64_t v33 = v17[54];
  uint64_t v60 = &v19[v33];
  uint64_t v34 = v17[58];
  uint64_t v61 = &v19[v34];
  uint64_t v35 = v14 + v20;
  uint64_t v44 = v14 + v22;
  uint64_t v45 = v14 + v24;
  uint64_t v46 = v14 + v26;
  uint64_t v47 = v14 + v27;
  uint64_t v48 = v14 + v28;
  uint64_t v49 = v14 + v29;
  uint64_t v50 = v14 + v30;
  uint64_t v51 = v14 + v31;
  uint64_t v52 = v14 + v32;
  uint64_t v53 = v14 + v33;
  uint64_t v58 = v14 + v34;
  uint64_t v36 = *(void *)(v15 - 8);
  uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t))(v36 + 16);
  v37(v19, v14, v15);
  v37(v21, v35, v15);
  v37(v23, v44, v15);
  v37(v25, v45, v15);
  v37(v75, v46, v15);
  v37(v76, v47, v15);
  v37(v77, v48, v15);
  v37(v78, v49, v15);
  v37(v79, v50, v15);
  uint64_t v38 = v57;
  v37(v57, v51, v15);
  uint64_t v39 = v59;
  v37(v59, v52, v15);
  uint64_t v40 = v60;
  v37(v60, v53, v15);
  uint64_t v41 = v61;
  v37(v61, v58, v15);
  uint64_t v42 = *(void (**)(uint64_t, char *, uint64_t))(v36 + 32);
  v42(v62, v19, v15);
  v42(v63, v54, v15);
  v42(v64, v55, v15);
  v42(v65, v56, v15);
  v42(v66, v75, v15);
  v42(v67, v76, v15);
  v42(v68, v77, v15);
  v42(v70, v78, v15);
  v42(v69, v79, v15);
  v42(v71, v38, v15);
  v42(v72, v39, v15);
  v42(v73, v40, v15);
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v42)(v74, v41, v15);
}

uint64_t _HashStack._contents.setter(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, char *a5, char *a6, char *a7, char *a8, char *a9, char *a10, char *a11, char *a12, char *a13, uint64_t a14)
{
  uint64_t v45 = a8;
  uint64_t v43 = a7;
  uint64_t v42 = a6;
  uint64_t v41 = a5;
  uint64_t v39 = a4;
  uint64_t v35 = a3;
  uint64_t v34 = a2;
  uint64_t v33 = a1;
  uint64_t v53 = a12;
  uint64_t v50 = a11;
  uint64_t v47 = a10;
  uint64_t v44 = a9;
  int v55 = a13;
  uint64_t v14 = *(void *)(a14 + 16);
  uint64_t v59 = v14;
  uint64_t v60 = v14;
  uint64_t v61 = v14;
  uint64_t v62 = v14;
  uint64_t v63 = v14;
  uint64_t v64 = v14;
  uint64_t v65 = v14;
  uint64_t v66 = v14;
  uint64_t v67 = v14;
  uint64_t v68 = v14;
  uint64_t v69 = v14;
  uint64_t v70 = v14;
  uint64_t v71 = v14;
  uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  uint64_t v16 = (int *)(TupleTypeMetadata - 8);
  uint64_t v17 = MEMORY[0x270FA5388](TupleTypeMetadata);
  unsigned int v19 = (char *)&v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  unsigned int v21 = (char *)&v33 - v20;
  uint64_t v36 = (char *)&v33 + v16[14] - v20;
  uint64_t v22 = v36;
  uint64_t v37 = (char *)&v33 + v16[18] - v20;
  uint64_t v23 = v37;
  uint64_t v38 = (char *)&v33 + v16[22] - v20;
  uint64_t v24 = v38;
  uint64_t v46 = (char *)&v33 + v16[26] - v20;
  uint64_t v48 = (char *)&v33 + v16[30] - v20;
  uint64_t v49 = (char *)&v33 + v16[34] - v20;
  uint64_t v51 = (char *)&v33 + v16[38] - v20;
  uint64_t v52 = (char *)&v33 + v16[42] - v20;
  uint64_t v54 = (char *)&v33 + v16[46] - v20;
  unint64_t v56 = (char *)&v33 + v16[50] - v20;
  int v57 = (char *)&v33 + v16[54] - v20;
  uint64_t v58 = (char *)&v33 + v16[58] - v20;
  uint64_t v25 = *(void *)(v14 - 8);
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 32);
  v26((char *)&v33 - v20, v33, v14);
  v26(v22, v34, v14);
  v26(v23, v35, v14);
  v26(v24, (uint64_t)v39, v14);
  v26(v46, (uint64_t)v41, v14);
  v26(v48, (uint64_t)v42, v14);
  v26(v49, (uint64_t)v43, v14);
  v26(v51, (uint64_t)v45, v14);
  v26(v52, (uint64_t)v44, v14);
  v26(v54, (uint64_t)v47, v14);
  v26(v56, (uint64_t)v50, v14);
  v26(v57, (uint64_t)v53, v14);
  v26(v58, (uint64_t)v55, v14);
  uint64_t v39 = &v19[v16[14]];
  uint64_t v27 = v39;
  uint64_t v28 = &v19[v16[18]];
  uint64_t v29 = &v19[v16[22]];
  uint64_t v41 = &v19[v16[26]];
  uint64_t v42 = &v19[v16[30]];
  uint64_t v43 = &v19[v16[34]];
  uint64_t v44 = &v19[v16[38]];
  uint64_t v45 = &v19[v16[42]];
  uint64_t v47 = &v19[v16[46]];
  uint64_t v50 = &v19[v16[50]];
  uint64_t v53 = &v19[v16[54]];
  int v55 = &v19[v16[58]];
  v26(v19, (uint64_t)v21, v14);
  v26(v27, (uint64_t)v36, v14);
  v26(v28, (uint64_t)v37, v14);
  v26(v29, (uint64_t)v38, v14);
  v26(v41, (uint64_t)v46, v14);
  v26(v42, (uint64_t)v48, v14);
  v26(v43, (uint64_t)v49, v14);
  v26(v44, (uint64_t)v51, v14);
  v26(v45, (uint64_t)v52, v14);
  v26(v47, (uint64_t)v54, v14);
  v26(v50, (uint64_t)v56, v14);
  v26(v53, (uint64_t)v57, v14);
  v26(v55, (uint64_t)v58, v14);
  uint64_t v30 = *(void (**)(uint64_t, char *, uint64_t))(v25 + 40);
  uint64_t v31 = v40;
  v30(v40, v19, v14);
  v30(v31 + v16[14], v39, v14);
  v30(v31 + v16[18], v28, v14);
  v30(v31 + v16[22], v29, v14);
  v30(v31 + v16[26], v41, v14);
  v30(v31 + v16[30], v42, v14);
  v30(v31 + v16[34], v43, v14);
  v30(v31 + v16[38], v44, v14);
  v30(v31 + v16[42], v45, v14);
  v30(v31 + v16[46], v47, v14);
  v30(v31 + v16[50], v50, v14);
  v30(v31 + v16[54], v53, v14);
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v30)(v31 + v16[58], v55, v14);
}

uint64_t (*_HashStack._contents.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t _HashStack._count.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 28));
}

uint64_t _HashStack._count.setter(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(v2 + *(int *)(a2 + 28)) = result;
  return result;
}

uint64_t (*_HashStack._count.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t _HashStack.init(filledWith:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v7(a3, a1, a2);
  uint64_t TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  v7(a3 + TupleTypeMetadata[12], a1, a2);
  v7(a3 + TupleTypeMetadata[16], a1, a2);
  v7(a3 + TupleTypeMetadata[20], a1, a2);
  v7(a3 + TupleTypeMetadata[24], a1, a2);
  v7(a3 + TupleTypeMetadata[28], a1, a2);
  v7(a3 + TupleTypeMetadata[32], a1, a2);
  v7(a3 + TupleTypeMetadata[36], a1, a2);
  v7(a3 + TupleTypeMetadata[40], a1, a2);
  v7(a3 + TupleTypeMetadata[44], a1, a2);
  v7(a3 + TupleTypeMetadata[48], a1, a2);
  v7(a3 + TupleTypeMetadata[52], a1, a2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(a3 + TupleTypeMetadata[56], a1, a2);
  uint64_t result = type metadata accessor for _HashStack();
  *(unsigned char *)(a3 + *(int *)(result + 28)) = 0;
  return result;
}

uint64_t type metadata accessor for _HashStack()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t _HashStack.capacity.getter()
{
  return 13;
}

uint64_t _HashStack.count.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 28));
}

BOOL _HashStack.isEmpty.getter(uint64_t a1)
{
  return *(unsigned char *)(v1 + *(int *)(a1 + 28)) == 0;
}

uint64_t _HashStack.subscript.getter(char a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(a2 + 16);
  char v8 = a1;
  uint64_t v9 = v7;
  uint64_t v10 = v7;
  uint64_t v11 = v7;
  uint64_t v12 = v7;
  uint64_t v13 = v7;
  uint64_t v14 = v7;
  uint64_t v15 = v7;
  uint64_t v16 = v7;
  uint64_t v17 = v7;
  uint64_t v18 = v7;
  uint64_t v19 = v7;
  uint64_t v20 = v7;
  uint64_t v21 = v7;
  uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  return sub_24A504C00(v2, (uint64_t)sub_24A504B2C, (uint64_t)v6, TupleTypeMetadata, MEMORY[0x263F8E628], v7, MEMORY[0x263F8E658], v4);
}

uint64_t sub_24A504B2C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v2 + 16) - 8) + 16))(a2, result + *(void *)(*(void *)(*(void *)(v2 + 16) - 8) + 72) * *(unsigned __int8 *)(v2 + 24));
  }
  __break(1u);
  return result;
}

uint64_t _HashStack.subscript.setter(uint64_t a1, char a2, uint64_t a3)
{
  sub_24A504F70(a1, a2, a3);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 8);
  return v5(a1);
}

uint64_t sub_24A504C00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a5 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = v16(v12, v12 + *(void *)(*(void *)(v15 - 8) + 64), v14);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  }
  return result;
}

void (*_HashStack.subscript.modify(void *a1, char a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x38uLL);
  *a1 = v7;
  *uint64_t v7 = a3;
  v7[1] = v3;
  *((unsigned char *)v7 + 48) = a2;
  uint64_t v8 = *(void *)(a3 + 16);
  v7[2] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  _OWORD v7[3] = v9;
  size_t v10 = *(void *)(v9 + 64);
  _OWORD v7[4] = malloc(v10);
  void v7[5] = malloc(v10);
  _HashStack.subscript.getter(a2, a3);
  return sub_24A504DD4;
}

void sub_24A504DD4(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[4];
  uint64_t v4 = (void *)(*a1)[5];
  uint64_t v5 = (*a1)[2];
  uint64_t v6 = (*a1)[3];
  uint64_t v7 = **a1;
  char v8 = *((unsigned char *)*a1 + 48);
  if (a2)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[4], v4, v5);
    sub_24A504F70((uint64_t)v3, v8, v7);
    uint64_t v9 = *(void (**)(void *, uint64_t))(v6 + 8);
    v9(v3, v5);
    v9(v4, v5);
  }
  else
  {
    sub_24A504F70((*a1)[5], v8, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t _HashStack.push(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(int *)(a2 + 28);
  char v4 = *(unsigned char *)(v2 + v3);
  uint64_t result = sub_24A504F70(a1, v4, a2);
  *(unsigned char *)(v2 + v3) = v4 + 1;
  return result;
}

uint64_t _HashStack.pop()(uint64_t a1)
{
  _HashStack.subscript.getter(*(unsigned char *)(v1 + *(int *)(a1 + 28)) - 1, a1);
  uint64_t result = type metadata accessor for _HashStack();
  --*(unsigned char *)(v1 + *(int *)(result + 28));
  return result;
}

uint64_t _HashStack.peek()(uint64_t a1)
{
  return _HashStack.subscript.getter(*(unsigned char *)(v1 + *(int *)(a1 + 28)) - 1, a1);
}

uint64_t sub_24A504F70(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v8 = *(void *)(a3 + 16);
  char v9 = a2;
  uint64_t v10 = a1;
  uint64_t v11 = v8;
  uint64_t v12 = v8;
  uint64_t v13 = v8;
  uint64_t v14 = v8;
  uint64_t v15 = v8;
  uint64_t v16 = v8;
  uint64_t v17 = v8;
  uint64_t v18 = v8;
  uint64_t v19 = v8;
  uint64_t v20 = v8;
  uint64_t v21 = v8;
  uint64_t v22 = v8;
  uint64_t v23 = v8;
  uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  return sub_24A504C00(v3, (uint64_t)sub_24A5065BC, (uint64_t)v7, TupleTypeMetadata, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v5);
}

uint64_t sub_24A505024()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout();
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_24A505100(void *a1, void *a2, uint64_t a3)
{
  char v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(_DWORD *)(v6 + 80);
  uint64_t v9 = ~v8;
  BOOL v10 = v8 <= 7 && (*(_DWORD *)(v6 + 80) & 0x100000) == 0;
  if (v10
    && (uint64_t v11 = v7 + v8,
        uint64_t v12 = ((v7
              + v8
              + ((v7
                + v8
                + ((v7
                  + v8
                  + ((v7
                    + v8
                    + ((v7
                      + v8
                      + ((v7
                        + v8
                        + ((v7
                          + v8
                          + ((v7 + v8 + ((v7 + v8 + ((v7 + v8 + ((v7 + v8 + ((v7 + v8) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)
            + v7,
        (unint64_t)(v12 + 1) <= 0x18))
  {
    uint64_t v13 = *(void (**)(void *, void *, uint64_t))(v6 + 16);
    v13(a1, a2, v5);
    v13((void *)(((unint64_t)v4 + v11) & v9), (void *)(((unint64_t)a2 + v11) & v9), v5);
    unint64_t v14 = (v11 + (((unint64_t)a2 + v11) & v9)) & v9;
    v13((void *)((v11 + (((unint64_t)v4 + v11) & v9)) & v9), (void *)v14, v5);
    unint64_t v15 = (v11 + v14) & v9;
    v13((void *)((v11 + ((v11 + (((unint64_t)v4 + v11) & v9)) & v9)) & v9), (void *)v15, v5);
    unint64_t v16 = (v11 + v15) & v9;
    v13((void *)((v11 + ((v11 + ((v11 + (((unint64_t)v4 + v11) & v9)) & v9)) & v9)) & v9), (void *)v16, v5);
    uint64_t v17 = (v11 + v16) & v9;
    v13((void *)((v11 + ((v11 + ((v11 + ((v11 + (((unint64_t)v4 + v11) & v9)) & v9)) & v9)) & v9)) & v9), (void *)v17, v5);
    uint64_t v18 = (v11 + v17) & v9;
    v13((void *)((v11 + ((v11 + ((v11 + ((v11 + ((v11 + (((unint64_t)v4 + v11) & v9)) & v9)) & v9)) & v9)) & v9)) & v9), (void *)v18, v5);
    uint64_t v19 = (v11 + v18) & v9;
    v13((void *)((v11+ ((v11 + ((v11 + ((v11 + ((v11 + ((v11 + (((unint64_t)v4 + v11) & v9)) & v9)) & v9)) & v9)) & v9)) & v9)) & v9), (void *)v19, v5);
    uint64_t v20 = (v11 + v19) & v9;
    v13((void *)((v11+ ((v11+ ((v11+ ((v11 + ((v11 + ((v11 + ((v11 + (((unint64_t)v4 + v11) & v9)) & v9)) & v9)) & v9)) & v9)) & v9)) & v9)) & v9), (void *)v20, v5);
    uint64_t v21 = (v11 + v20) & v9;
    v13((void *)((v11+ ((v11+ ((v11+ ((v11+ ((v11 + ((v11 + ((v11 + ((v11 + (((unint64_t)v4 + v11) & v9)) & v9)) & v9)) & v9)) & v9)) & v9)) & v9)) & v9)) & v9), (void *)v21, v5);
    uint64_t v22 = (v11 + v21) & v9;
    v13((void *)((v11+ ((v11+ ((v11+ ((v11+ ((v11+ ((v11 + ((v11 + ((v11 + ((v11 + (((unint64_t)v4 + v11) & v9)) & v9)) & v9)) & v9)) & v9)) & v9)) & v9)) & v9)) & v9)) & v9), (void *)v22, v5);
    uint64_t v23 = (v11 + v22) & v9;
    v13((void *)((v11+ ((v11+ ((v11+ ((v11+ ((v11+ ((v11+ ((v11 + ((v11 + ((v11 + ((v11 + (((unint64_t)v4 + v11) & v9)) & v9)) & v9)) & v9)) & v9)) & v9)) & v9)) & v9)) & v9)) & v9)) & v9), (void *)v23, v5);
    v13((void *)((v11+ ((v11+ ((v11+ ((v11+ ((v11+ ((v11+ ((v11+ ((v11 + ((v11 + ((v11 + ((v11 + (((unint64_t)v4 + v11) & v9)) & v9)) & v9)) & v9)) & v9)) & v9)) & v9)) & v9)) & v9)) & v9)) & v9)) & v9), (void *)((v11 + v23) & v9), v5);
    *((unsigned char *)v4 + v12) = *((unsigned char *)a2 + v12);
  }
  else
  {
    uint64_t v24 = *a2;
    *char v4 = *a2;
    char v4 = (void *)(v24 + ((v8 + 16) & v9));
    swift_retain();
  }
  return v4;
}

uint64_t sub_24A505434(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v19(a1, v3);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64) + v5;
  uint64_t v7 = (v6 + a1) & ~v5;
  v19(v7, v3);
  uint64_t v8 = (v6 + v7) & ~v5;
  v19(v8, v3);
  uint64_t v9 = (v6 + v8) & ~v5;
  v19(v9, v3);
  uint64_t v10 = (v6 + v9) & ~v5;
  v19(v10, v3);
  uint64_t v11 = (v6 + v10) & ~v5;
  v19(v11, v3);
  uint64_t v12 = (v6 + v11) & ~v5;
  v19(v12, v3);
  uint64_t v13 = (v6 + v12) & ~v5;
  v19(v13, v3);
  uint64_t v14 = (v6 + v13) & ~v5;
  v19(v14, v3);
  uint64_t v15 = (v6 + v14) & ~v5;
  v19(v15, v3);
  uint64_t v16 = (v6 + v15) & ~v5;
  v19(v16, v3);
  uint64_t v17 = (v6 + v16) & ~v5;
  v19(v17, v3);
  return ((uint64_t (*)(uint64_t, uint64_t))v19)((v6 + v17) & ~v5, v3);
}

uint64_t sub_24A505638(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = v8 + v9;
  v7((v8 + v9 + a1) & ~v9, (v8 + v9 + a2) & ~v9, v5);
  uint64_t v11 = (v8 + v9 + ((v8 + v9 + a2) & ~v9)) & ~v9;
  v7((v8 + v9 + ((v8 + v9 + a1) & ~v9)) & ~v9, v11, v5);
  uint64_t v12 = (v8 + v9 + v11) & ~v9;
  v7((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9, v12, v5);
  uint64_t v13 = (v8 + v9 + v12) & ~v9;
  v7((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9, v13, v5);
  uint64_t v14 = (v8 + v9 + v13) & ~v9;
  v7((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9, v14, v5);
  uint64_t v15 = (v8 + v9 + v14) & ~v9;
  v7((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9, v15, v5);
  uint64_t v16 = (v8 + v9 + v15) & ~v9;
  v7((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9, v16, v5);
  uint64_t v17 = (v8 + v9 + v16) & ~v9;
  v7((v10+ ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9, v17, v5);
  uint64_t v18 = (v8 + v9 + v17) & ~v9;
  v7((v10+ ((v10+ ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9, v18, v5);
  uint64_t v19 = (v8 + v9 + v18) & ~v9;
  v7((v10+ ((v10+ ((v10+ ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9, v19, v5);
  uint64_t v20 = (v8 + v9 + v19) & ~v9;
  v7((v10+ ((v10+ ((v10+ ((v10+ ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9, v20, v5);
  v7((v10+ ((v10+ ((v10+ ((v10+ ((v10+ ((v10+ ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9, (v10 + v20) & ~v9, v5);
  uint64_t v21 = ((v10
        + ((v10
          + ((v10
            + ((v10
              + ((v10
                + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + (v10 & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)
      + v8;
  *(unsigned char *)(v21 + a1) = *(unsigned char *)(v21 + a2);
  return a1;
}

uint64_t sub_24A5058FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24);
  v7(a1, a2, v5);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = v8 + v9;
  v7((v8 + v9 + a1) & ~v9, (v8 + v9 + a2) & ~v9, v5);
  uint64_t v11 = (v8 + v9 + ((v8 + v9 + a2) & ~v9)) & ~v9;
  v7((v8 + v9 + ((v8 + v9 + a1) & ~v9)) & ~v9, v11, v5);
  uint64_t v12 = (v8 + v9 + v11) & ~v9;
  v7((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9, v12, v5);
  uint64_t v13 = (v8 + v9 + v12) & ~v9;
  v7((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9, v13, v5);
  uint64_t v14 = (v8 + v9 + v13) & ~v9;
  v7((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9, v14, v5);
  uint64_t v15 = (v8 + v9 + v14) & ~v9;
  v7((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9, v15, v5);
  uint64_t v16 = (v8 + v9 + v15) & ~v9;
  v7((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9, v16, v5);
  uint64_t v17 = (v8 + v9 + v16) & ~v9;
  v7((v10+ ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9, v17, v5);
  uint64_t v18 = (v8 + v9 + v17) & ~v9;
  v7((v10+ ((v10+ ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9, v18, v5);
  uint64_t v19 = (v8 + v9 + v18) & ~v9;
  v7((v10+ ((v10+ ((v10+ ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9, v19, v5);
  uint64_t v20 = (v8 + v9 + v19) & ~v9;
  v7((v10+ ((v10+ ((v10+ ((v10+ ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9, v20, v5);
  v7((v10+ ((v10+ ((v10+ ((v10+ ((v10+ ((v10+ ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9, (v10 + v20) & ~v9, v5);
  uint64_t v21 = ((v10
        + ((v10
          + ((v10
            + ((v10
              + ((v10
                + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + (v10 & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)
      + v8;
  *(unsigned char *)(v21 + a1) = *(unsigned char *)(v21 + a2);
  return a1;
}

uint64_t sub_24A505BC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v7(a1, a2, v5);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = v8 + v9;
  v7((v8 + v9 + a1) & ~v9, (v8 + v9 + a2) & ~v9, v5);
  uint64_t v11 = (v8 + v9 + ((v8 + v9 + a2) & ~v9)) & ~v9;
  v7((v8 + v9 + ((v8 + v9 + a1) & ~v9)) & ~v9, v11, v5);
  uint64_t v12 = (v8 + v9 + v11) & ~v9;
  v7((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9, v12, v5);
  uint64_t v13 = (v8 + v9 + v12) & ~v9;
  v7((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9, v13, v5);
  uint64_t v14 = (v8 + v9 + v13) & ~v9;
  v7((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9, v14, v5);
  uint64_t v15 = (v8 + v9 + v14) & ~v9;
  v7((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9, v15, v5);
  uint64_t v16 = (v8 + v9 + v15) & ~v9;
  v7((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9, v16, v5);
  uint64_t v17 = (v8 + v9 + v16) & ~v9;
  v7((v10+ ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9, v17, v5);
  uint64_t v18 = (v8 + v9 + v17) & ~v9;
  v7((v10+ ((v10+ ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9, v18, v5);
  uint64_t v19 = (v8 + v9 + v18) & ~v9;
  v7((v10+ ((v10+ ((v10+ ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9, v19, v5);
  uint64_t v20 = (v8 + v9 + v19) & ~v9;
  v7((v10+ ((v10+ ((v10+ ((v10+ ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9, v20, v5);
  v7((v10+ ((v10+ ((v10+ ((v10+ ((v10+ ((v10+ ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9, (v10 + v20) & ~v9, v5);
  uint64_t v21 = ((v10
        + ((v10
          + ((v10
            + ((v10
              + ((v10
                + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + (v10 & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)
      + v8;
  *(unsigned char *)(v21 + a1) = *(unsigned char *)(v21 + a2);
  return a1;
}

uint64_t sub_24A505E84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40);
  v7(a1, a2, v5);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = v8 + v9;
  v7((v8 + v9 + a1) & ~v9, (v8 + v9 + a2) & ~v9, v5);
  uint64_t v11 = (v8 + v9 + ((v8 + v9 + a2) & ~v9)) & ~v9;
  v7((v8 + v9 + ((v8 + v9 + a1) & ~v9)) & ~v9, v11, v5);
  uint64_t v12 = (v8 + v9 + v11) & ~v9;
  v7((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9, v12, v5);
  uint64_t v13 = (v8 + v9 + v12) & ~v9;
  v7((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9, v13, v5);
  uint64_t v14 = (v8 + v9 + v13) & ~v9;
  v7((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9, v14, v5);
  uint64_t v15 = (v8 + v9 + v14) & ~v9;
  v7((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9, v15, v5);
  uint64_t v16 = (v8 + v9 + v15) & ~v9;
  v7((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9, v16, v5);
  uint64_t v17 = (v8 + v9 + v16) & ~v9;
  v7((v10+ ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9, v17, v5);
  uint64_t v18 = (v8 + v9 + v17) & ~v9;
  v7((v10+ ((v10+ ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9, v18, v5);
  uint64_t v19 = (v8 + v9 + v18) & ~v9;
  v7((v10+ ((v10+ ((v10+ ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9, v19, v5);
  uint64_t v20 = (v8 + v9 + v19) & ~v9;
  v7((v10+ ((v10+ ((v10+ ((v10+ ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9, v20, v5);
  v7((v10+ ((v10+ ((v10+ ((v10+ ((v10+ ((v10+ ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9, (v10 + v20) & ~v9, v5);
  uint64_t v21 = ((v10
        + ((v10
          + ((v10
            + ((v10
              + ((v10
                + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + ((v10 + (v10 & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)
      + v8;
  *(unsigned char *)(v21 + a1) = *(unsigned char *)(v21 + a2);
  return a1;
}

uint64_t sub_24A506148(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  uint64_t v9 = v6
     + ((v6
       + v8
       + ((v6
         + v8
         + ((v6
           + v8
           + ((v6
             + v8
             + ((v6
               + v8
               + ((v6
                 + v8
                 + ((v6
                   + v8
                   + ((v6 + v8 + ((v6 + v8 + ((v6 + v8 + ((v6 + v8 + ((v6 + v8) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)
     + 1;
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v12 = ((v7 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v12))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v12 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v12 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_19;
  }
LABEL_11:
  int v13 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v13 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v9 | v13) + 1;
}

void sub_24A506310(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = v8
      + ((v8
        + v9
        + ((v8
          + v9
          + ((v8
            + v9
            + ((v8
              + v9
              + ((v8
                + v9
                + ((v8
                  + v9
                  + ((v8
                    + v9
                    + ((v8 + v9 + ((v8 + v9 + ((v8 + v9 + ((v8 + v9 + ((v8 + v9) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)
      + 1;
  BOOL v11 = a3 >= v7;
  unsigned int v12 = a3 - v7;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v14 = ~v7 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v8
         + ((v8
           + v9
           + ((v8
             + v9
             + ((v8
               + v9
               + ((v8
                 + v9
                 + ((v8
                   + v9
                   + ((v8
                     + v9
                     + ((v8
                       + v9
                       + ((v8
                         + v9
                         + ((v8
                           + v9
                           + ((v8
                             + v9
                             + ((v8 + v9 + ((v8 + v9) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9) != -1)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x24A506594);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v18 = *(void (**)(void))(v6 + 56);
        v18();
      }
      return;
  }
}

uint64_t sub_24A5065BC(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(*(void *)(*(void *)(v1 + 16) - 8) + 24))(result + *(void *)(*(void *)(*(void *)(v1 + 16) - 8) + 72) * *(unsigned __int8 *)(v1 + 24), *(void *)(v1 + 32));
  }
  __break(1u);
  return result;
}

unint64_t sub_24A506624(unint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  if ((a2 & 0x1000000000000000) != 0)
  {
    uint64_t v6 = MEMORY[0x24C5C6A60](15, BYTE4(a3), result, a2);
    goto LABEL_6;
  }
  unint64_t v5 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    unint64_t v5 = result & 0xFFFFFFFFFFFFLL;
  }
  if (v5 >= BYTE4(a3))
  {
    uint64_t v6 = ((unint64_t)BYTE4(a3) << 16) | 4;
LABEL_6:
    swift_bridgeObjectRetain();
    unint64_t v7 = sub_24A494C00(v6, v4, a2);
    swift_bridgeObjectRelease();
    return v7;
  }
  __break(1u);
  return result;
}

unint64_t sub_24A5066DC(unint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  unint64_t v5 = a3 - (unint64_t)BYTE5(a3);
  if ((a2 & 0x1000000000000000) != 0)
  {
    unint64_t v7 = MEMORY[0x24C5C6A60](15, v5, result, a2);
    goto LABEL_7;
  }
  if ((v5 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v6 = HIBYTE(a2) & 0xF;
    if ((a2 & 0x2000000000000000) == 0) {
      unint64_t v6 = result & 0xFFFFFFFFFFFFLL;
    }
    if (v6 >= v5)
    {
      unint64_t v7 = (v5 << 16) | 4;
LABEL_7:
      swift_bridgeObjectRetain();
      unint64_t v8 = sub_24A494C00(v7, v4, a2);
      swift_bridgeObjectRelease();
      return v8;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_24A5067A4(unint64_t result)
{
  unint64_t v2 = result;
  uint64_t v3 = *(unsigned __int8 *)(v1 + 16);
  uint64_t v4 = *(void *)v1;
  unint64_t v5 = *(void *)(v1 + 8);
  uint64_t v6 = (*(void *)v1 >> 59) & 1;
  if ((v5 & 0x1000000000000000) == 0) {
    LOBYTE(v6) = 1;
  }
  if ((result & 0xC) == 4 << v6)
  {
    uint64_t result = sub_24A4DFD84(result, *(void *)v1, *(void *)(v1 + 8));
    unint64_t v2 = result;
    if ((v5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      uint64_t result = v2 >> 16;
      unint64_t v7 = v3 - (v2 >> 16);
      if (!__OFSUB__(v3, v2 >> 16)) {
        goto LABEL_6;
      }
LABEL_15:
      __break(1u);
      goto LABEL_16;
    }
  }
  else if ((v5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  unint64_t v8 = v4 & 0xFFFFFFFFFFFFLL;
  if ((v5 & 0x2000000000000000) != 0) {
    unint64_t v8 = HIBYTE(v5) & 0xF;
  }
  if (v8 < v2 >> 16) {
    goto LABEL_18;
  }
  uint64_t result = sub_24A5BB750();
  unint64_t v7 = v3 - result;
  if (__OFSUB__(v3, result)) {
    goto LABEL_15;
  }
LABEL_6:
  if ((v7 & 0x8000000000000000) == 0)
  {
    if (v7 <= 0xFF)
    {
      *(unsigned char *)(v1 + 21) = v7;
      return result;
    }
    goto LABEL_17;
  }
LABEL_16:
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t OrderedSet.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _s19CollectionsInternal4HeapV5countSivg_0();
  uint64_t result = sub_24A5BC630();
  uint64_t v7 = *(void *)(a3 + 16);
  if (v7)
  {
    uint64_t v8 = a3
       + ((*(unsigned __int8 *)(*(void *)(a4 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a4 - 8) + 80));
    uint64_t v9 = *(void *)(*(void *)(a4 - 8) + 72);
    swift_retain();
    do
    {
      sub_24A5BB380();
      v8 += v9;
      --v7;
    }
    while (v7);
    return swift_release();
  }
  return result;
}

uint64_t OrderedSet.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_24A5BC610();
  OrderedSet.hash(into:)((uint64_t)v7, v5, a2, a3);
  return sub_24A5BC690();
}

uint64_t sub_24A5069D0(uint64_t a1)
{
  return OrderedSet.hashValue.getter(a1, *(void *)(v1 + 8), *(void *)(a1 + 16));
}

uint64_t sub_24A5069DC(uint64_t a1, uint64_t a2)
{
  return OrderedSet.hash(into:)(a1, a2, *(void *)(v2 + 8), *(void *)(a2 + 16));
}

uint64_t sub_24A5069E8(uint64_t a1, uint64_t a2)
{
  sub_24A5BC610();
  OrderedSet.hash(into:)((uint64_t)v6, v4, *(void *)(v2 + 8), *(void *)(a2 + 16));
  return sub_24A5BC690();
}

uint64_t sub_24A506A30()
{
  return swift_getWitnessTable();
}

uint64_t OrderedSet.init()()
{
  return 0;
}

BOOL OrderedSet.contains(_:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_26979ACE8);
  sub_24A5BC1A0();
  return (v1 & 1) == 0;
}

uint64_t OrderedSet.remove(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = OrderedSet._find(_:)();
  if (v7)
  {
    uint64_t v8 = 1;
  }
  else
  {
    OrderedSet._removeExistingMember(at:in:)(v5, v6, a1);
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v9(a2, v8, 1, v4);
}

BOOL OrderedSet.isSuperset(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return OrderedSet.isSubset(of:)(a3, a4, a1, a2, a5);
}

{
  return OrderedSet.isSubset(of:)(a3, a4, a1, a2, a5);
}

{
  uint64_t v10;
  uint64_t v12;
  uint64_t WitnessTable;
  uint64_t v15;

  size_t v10 = _s19CollectionsInternal4HeapV5countSivg_0();
  if (v10 >= sub_24A5BBA40())
  {
    int v15 = a1;
    unsigned int v12 = sub_24A5BBA90();
    uint64_t WitnessTable = swift_getWitnessTable();
    return OrderedSet._isSuperset<A>(of:)((uint64_t)&v15, a2, a3, a4, v12, a5, WitnessTable);
  }
  else
  {
    return 0;
  }
}

BOOL OrderedSet._isSuperset<A>(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v39 = a2;
  uint64_t v40 = a3;
  uint64_t v38 = a1;
  uint64_t v36 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  unsigned int v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_24A5BBD20();
  MEMORY[0x270FA5388](v13 - 8);
  int v15 = (char *)&v35 - v14;
  uint64_t v35 = a7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v37 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v17 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v19 = (char *)&v35 - v18;
  uint64_t v20 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v22 = (char *)&v35 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for OrderedSet();
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, v38, a5);
  if (v23 == a5)
  {
    swift_dynamicCast();
    BOOL v33 = OrderedSet.isSubset(of:)(v39, v40, v41, v42, a4);
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v24 = AssociatedTypeWitness;
    uint64_t v38 = a6;
    uint64_t v25 = v19;
    sub_24A5BB840();
    uint64_t v26 = v24;
    swift_getAssociatedConformanceWitness();
    uint64_t v27 = (unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48);
    uint64_t v28 = (void (**)(char *, char *, uint64_t))(v36 + 32);
    uint64_t v29 = (void (**)(char *, uint64_t))(v36 + 8);
    uint64_t v30 = v25;
    while (1)
    {
      uint64_t v31 = v30;
      sub_24A5BBEE0();
      if ((*v27)(v15, 1, a4) == 1) {
        break;
      }
      (*v28)(v12, v15, a4);
      BOOL v32 = OrderedSet.contains(_:)();
      (*v29)(v12, a4);
      uint64_t v30 = v31;
      if (!v32)
      {
        (*(void (**)(char *, uint64_t))(v37 + 8))(v31, v26);
        return 0;
      }
    }
    (*(void (**)(char *, uint64_t))(v37 + 8))(v31, v26);
    return 1;
  }
  return v33;
}

uint64_t UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = sub_24A5BBD20();
  uint64_t v30 = *(void *)(v12 - 8);
  uint64_t v31 = v12;
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  uint64_t v27 = (char *)&v24 - v14;
  uint64_t v26 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](v13);
  unsigned int v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v25 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v19 = (char *)&v24 - v18;
  uint64_t v32 = a4;
  uint64_t v33 = a5;
  uint64_t v34 = a6;
  uint64_t v35 = a2;
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  uint64_t v36 = a3;
  if (sub_24A5BB9F0() == a5) {
    sub_24A5BC560();
  }
  sub_24A5BB880();
  if (v38 != 1) {
    return v37;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v16, a1, a5);
  uint64_t v20 = sub_24A5BB850();
  swift_getAssociatedConformanceWitness();
  uint64_t v21 = v27;
  sub_24A5BBEE0();
  int v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 48))(v21, 1, a4);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v21, v31);
  if (v22 == 1)
  {
    (*(void (**)(char *, uint64_t))(v25 + 8))(v19, AssociatedTypeWitness);
    return v20;
  }
  __break(1u);
  return result;
}

uint64_t sub_24A5073B4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, void *a3@<X8>)
{
  uint64_t result = sub_24A5BB540();
  if (!result)
  {
    a1 = 0;
    goto LABEL_7;
  }
  if (!a1)
  {
LABEL_7:
    *a3 = a1;
    return result;
  }
  if (a2 >= a1)
  {
    uint64_t result = sub_24A5BB540();
    if (result) {
      uint64_t result = sub_24A5BBCD0();
    }
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t sub_24A507458@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  return sub_24A5073B4(a1, *(void *)(v2 + 48), a2);
}

__n128 BigSubstring.UTF16View.init(_:in:)@<Q0>(long long *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  sub_24A508BB8(a1, a2, (uint64_t)v8);
  sub_24A496BE8((uint64_t)a1);
  long long v5 = v8[5];
  *(_OWORD *)(a3 + 64) = v8[4];
  *(_OWORD *)(a3 + 80) = v5;
  *(_OWORD *)(a3 + 96) = v8[6];
  long long v6 = v8[1];
  *(_OWORD *)a3 = v8[0];
  *(_OWORD *)(a3 + 16) = v6;
  __n128 result = (__n128)v8[3];
  *(_OWORD *)(a3 + 32) = v8[2];
  *(__n128 *)(a3 + 48) = result;
  return result;
}

__n128 BigSubstring.UTF16View.init(_unchecked:in:)@<Q0>(_OWORD *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  long long v3 = a1[1];
  *(_OWORD *)a3 = *a1;
  *(_OWORD *)(a3 + 16) = v3;
  long long v4 = *a2;
  long long v5 = a2[1];
  *(_OWORD *)(a3 + 32) = a1[2];
  *(_OWORD *)(a3 + 48) = v4;
  __n128 result = (__n128)a2[2];
  long long v7 = a2[3];
  *(_OWORD *)(a3 + 64) = v5;
  *(__n128 *)(a3 + 80) = result;
  *(_OWORD *)(a3 + 96) = v7;
  return result;
}

__n128 BigSubstring.utf16.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  long long v12 = *(_OWORD *)v1;
  long long v10 = *(_OWORD *)(v1 + 32);
  long long v11 = *(_OWORD *)(v1 + 16);
  long long v8 = *(_OWORD *)(v1 + 64);
  long long v9 = *(_OWORD *)(v1 + 48);
  __n128 v7 = *(__n128 *)(v1 + 80);
  uint64_t v4 = *(void *)(v1 + 96);
  uint64_t v5 = *(void *)(v2 + 104);
  sub_24A497498(v2);
  *(_OWORD *)a1 = v12;
  *(_OWORD *)(a1 + 16) = v11;
  *(_OWORD *)(a1 + 32) = v10;
  *(_OWORD *)(a1 + 48) = v9;
  __n128 result = v7;
  *(_OWORD *)(a1 + 64) = v8;
  *(__n128 *)(a1 + 80) = v7;
  *(void *)(a1 + 96) = v4;
  *(void *)(a1 + 104) = v5;
  return result;
}

void BigString.init(_:)(long long *a1@<X0>, long long *a2@<X8>)
{
  long long v3 = a1[4];
  v11[0] = a1[3];
  v11[1] = v3;
  long long v4 = a1[6];
  long long v12 = a1[5];
  long long v13 = v4;
  if ((BYTE1(v11[0]) & 4) != 0 || (BYTE1(v12) & 4) != 0)
  {
    sub_24A496BE8((uint64_t)a1);
    long long v6 = xmmword_24A5BECD0;
    long long v7 = 0uLL;
    long long v8 = 0uLL;
  }
  else
  {
    long long v5 = a1[1];
    v10[0] = *a1;
    v10[1] = v5;
    void v10[2] = a1[2];
    sub_24A48D050(v10, (unint64_t *)v11, v9);
    long long v6 = v9[0];
    long long v7 = v9[1];
    long long v8 = v9[2];
  }
  *a2 = v6;
  a2[1] = v7;
  a2[2] = v8;
}

{
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  unint64_t v10;
  unint64_t v11;
  long long v12;
  long long v13;
  long long v14;
  _OWORD v15[3];
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20[3];

  long long v4 = a1[1];
  v20[0] = *a1;
  v20[1] = v4;
  long long v5 = a1[3];
  void v20[2] = a1[2];
  long long v6 = a1[4];
  long long v7 = a1[5];
  unsigned int v16 = v5;
  uint64_t v17 = v6;
  long long v8 = a1[6];
  uint64_t v18 = v7;
  uint64_t v19 = v8;
  long long v9 = v5;
  sub_24A497498((uint64_t)a1);
  long long v10 = sub_24A4965FC(v9, *((uint64_t *)&v9 + 1), v17, *((uint64_t *)&v17 + 1));
  sub_24A496BE8((uint64_t)a1);
  if ((v10 ^ (unint64_t)v9) > 0x3FF
    || (sub_24A497498((uint64_t)a1),
        long long v11 = sub_24A4965FC(v18, *((uint64_t *)&v18 + 1), v19, *((uint64_t *)&v19 + 1)),
        sub_24A496BE8((uint64_t)a1),
        (v11 ^ (unint64_t)v18) > 0x3FF))
  {
    sub_24A496BE8((uint64_t)a1);
    long long v12 = xmmword_24A5BECD0;
    long long v13 = 0uLL;
    uint64_t v14 = 0uLL;
  }
  else
  {
    sub_24A48D050(v20, (unint64_t *)&v16, v15);
    long long v12 = v15[0];
    long long v13 = v15[1];
    uint64_t v14 = v15[2];
  }
  *a2 = v12;
  a2[1] = v13;
  a2[2] = v14;
}

uint64_t BigSubstring.UTF16View.startIndex.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t BigSubstring.UTF16View.endIndex.getter()
{
  return *(void *)(v0 + 80);
}

uint64_t BigSubstring.UTF16View.base.getter@<X0>(_OWORD *a1@<X8>)
{
  long long v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v1[2];
  return swift_unknownObjectRetain();
}

unint64_t BigSubstring.UTF16View.subscript.getter(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (result >> 10 >= *(void *)(v4 + 48) >> 10 && result >> 10 < *(void *)(v4 + 80) >> 10) {
    return sub_24A58F3A8(result, a2, a3, a4);
  }
  __break(1u);
  return result;
}

BOOL BigSubstring.UTF16View.isIdentical(to:)(uint64_t a1)
{
  uint64_t v2 = (uint64_t)v1;
  long long v4 = v1[1];
  _OWORD v8[3] = *v1;
  _OWORD v8[4] = v4;
  v8[5] = v1[2];
  long long v5 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v5;
  _OWORD v8[2] = *(_OWORD *)(a1 + 32);
  sub_24A497498((uint64_t)v1);
  sub_24A497498(a1);
  BOOL v6 = sub_24A495D7C((uint64_t)v8);
  sub_24A496BE8(a1);
  sub_24A496BE8(v2);
  return v6
      && (*(void *)(a1 + 48) ^ *(void *)(v2 + 48)) <= 1023
      && (*(void *)(v2 + 80) ^ *(void *)(a1 + 80)) < 0x400uLL;
}

unint64_t sub_24A507764(_OWORD *a1, long long *a2)
{
  long long v2 = a1[5];
  void v13[4] = a1[4];
  v13[5] = v2;
  long long v3 = a1[6];
  long long v4 = a1[1];
  v13[0] = *a1;
  v13[1] = v4;
  long long v5 = a1[3];
  void v13[2] = a1[2];
  void v13[3] = v5;
  long long v6 = *a2;
  long long v7 = a2[1];
  _OWORD v13[6] = v3;
  v14[0] = v6;
  long long v8 = a2[2];
  long long v9 = a2[3];
  long long v10 = a2[6];
  v14[5] = a2[5];
  v14[6] = v10;
  long long v11 = a2[4];
  void v14[3] = v9;
  v14[4] = v11;
  v14[1] = v7;
  v14[2] = v8;
  return _s19CollectionsInternal12BigSubstringV9UTF16ViewV2eeoiySbAE_AEtFZ_0((uint64_t)v13, v14) & 1;
}

uint64_t BigSubstring.UTF16View.hash(into:)()
{
  uint64_t v1 = (void *)v0;
  long long v2 = *(_OWORD *)(v0 + 16);
  v12[0] = *(_OWORD *)v0;
  v12[1] = v2;
  _OWORD v12[2] = *(_OWORD *)(v0 + 32);
  unint64_t v3 = *(void *)(v0 + 48);
  uint64_t v4 = v1[7];
  unint64_t v5 = v1[8];
  uint64_t v6 = v1[9];
  unint64_t v7 = v1[10];
  sub_24A497498((uint64_t)v1);
  sub_24A4DFE00(v12, v3, v4, v5, v6, (uint64_t)v11);
  unint64_t v8 = v11[6];
  sub_24A496BE8((uint64_t)v1);
  while (v7 >> 10 > v8 >> 10)
  {
    *(Swift::UInt16_optional *)&int v9 = BigString.UTF16View.Iterator.next()();
    if ((v9 & 0x10000) != 0) {
      break;
    }
    sub_24A5BC650();
  }
  swift_unknownObjectRelease();
  return sub_24A5BC650();
}

void BigSubstring.UTF16View.makeIterator()(uint64_t a1@<X8>)
{
  long long v15 = *(_OWORD *)(v1 + 32);
  unint64_t v3 = *(void *)(v1 + 48);
  uint64_t v4 = *(void *)(v1 + 56);
  unint64_t v5 = *(void *)(v1 + 64);
  uint64_t v6 = *(void *)(v1 + 72);
  long long v13 = *(_OWORD *)(v1 + 16);
  long long v14 = *(_OWORD *)v1;
  long long v12 = *(_OWORD *)(v1 + 80);
  long long v11 = *(_OWORD *)(v1 + 96);
  if ((v3 & 0x400) == 0)
  {
    sub_24A497498(v1);
    unint64_t v7 = sub_24A4965FC(v3, v4, v5, v6);
LABEL_6:
    *(_OWORD *)a1 = v14;
    *(_OWORD *)(a1 + 16) = v13;
    *(_OWORD *)(a1 + 32) = v15;
    *(void *)(a1 + 48) = v7;
    *(void *)(a1 + 56) = v8;
    *(void *)(a1 + 64) = v9;
    *(void *)(a1 + 72) = v10;
    *(_OWORD *)(a1 + 80) = v12;
    *(_OWORD *)(a1 + 96) = v11;
    return;
  }
  if (*(void *)v1 && 2 * ((unint64_t)v15 & 0x1FFFFFFFFFFFFFLL) > v3 >> 10)
  {
    sub_24A497498(v1);
    unint64_t v7 = sub_24A496820(v3, v4, v5, v6, 0);
    goto LABEL_6;
  }
  __break(1u);
}

Swift::UInt16_optional __swiftcall BigSubstring.UTF16View.Iterator.next()()
{
  if (*(void *)(v0 + 48) >> 10 >= *(void *)(v0 + 80) >> 10)
  {
    int v3 = 0;
    int v2 = 1;
  }
  else
  {
    *(Swift::UInt16_optional *)&unsigned int v1 = BigString.UTF16View.Iterator.next()();
    int v2 = HIWORD(v1) & 1;
    int v3 = (unsigned __int16)v1;
  }
  return (Swift::UInt16_optional)(v3 | (v2 << 16));
}

uint64_t BigSubstring.UTF16View.hashValue.getter()
{
  sub_24A5BC610();
  long long v1 = *(_OWORD *)(v0 + 16);
  v11[0] = *(_OWORD *)v0;
  v11[1] = v1;
  _OWORD v11[2] = *(_OWORD *)(v0 + 32);
  unint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 56);
  unint64_t v4 = *(void *)(v0 + 64);
  uint64_t v5 = *(void *)(v0 + 72);
  unint64_t v6 = *(void *)(v0 + 80);
  sub_24A497498(v0);
  sub_24A4DFE00(v11, v2, v3, v4, v5, (uint64_t)v10);
  unint64_t v7 = v10[6];
  sub_24A496BE8(v0);
  while (v6 >> 10 > v7 >> 10)
  {
    *(Swift::UInt16_optional *)&int v8 = BigString.UTF16View.Iterator.next()();
    if ((v8 & 0x10000) != 0) {
      break;
    }
    sub_24A5BC650();
  }
  swift_unknownObjectRelease();
  sub_24A5BC650();
  return sub_24A5BC690();
}

uint64_t sub_24A507B8C()
{
  return sub_24A5BC690();
}

uint64_t sub_24A507BF4()
{
  return BigSubstring.UTF16View.hash(into:)();
}

uint64_t sub_24A507C40()
{
  return sub_24A5BC690();
}

uint64_t sub_24A507CA4@<X0>(uint64_t a1@<X8>)
{
  if (*(void *)(v1 + 48) >> 10 >= *(void *)(v1 + 80) >> 10)
  {
    uint64_t result = 0;
    LOBYTE(v4) = 1;
  }
  else
  {
    *(Swift::UInt16_optional *)&uint64_t result = BigString.UTF16View.Iterator.next()();
    unsigned int v4 = WORD1(result) & 1;
  }
  *(_WORD *)a1 = result;
  *(unsigned char *)(a1 + 2) = v4;
  return result;
}

__n128 sub_24A507CF4@<Q0>(uint64_t a1@<X8>)
{
  long long v3 = *(_OWORD *)(v1 + 16);
  v21[0] = *(_OWORD *)v1;
  v21[1] = v3;
  _OWORD v21[2] = *(_OWORD *)(v1 + 32);
  unint64_t v4 = *(void *)(v1 + 48);
  uint64_t v5 = *(void *)(v1 + 56);
  unint64_t v6 = *(void *)(v1 + 64);
  uint64_t v7 = *(void *)(v1 + 72);
  __n128 v17 = *(__n128 *)(v1 + 80);
  uint64_t v9 = *(void *)(v1 + 96);
  uint64_t v8 = *(void *)(v1 + 104);
  sub_24A4DFE00(v21, v4, v5, v6, v7, (uint64_t)v18);
  long long v15 = v18[1];
  long long v16 = v18[0];
  long long v13 = v18[3];
  long long v14 = v18[2];
  uint64_t v10 = v19;
  uint64_t v11 = v20;
  sub_24A496BE8((uint64_t)v21);
  *(_OWORD *)a1 = v16;
  *(_OWORD *)(a1 + 16) = v15;
  *(_OWORD *)(a1 + 32) = v14;
  *(_OWORD *)(a1 + 48) = v13;
  *(void *)(a1 + 64) = v10;
  *(void *)(a1 + 72) = v11;
  __n128 result = v17;
  *(__n128 *)(a1 + 80) = v17;
  *(void *)(a1 + 96) = v9;
  *(void *)(a1 + 104) = v8;
  return result;
}

unint64_t sub_24A507DAC()
{
  long long v1 = v0[5];
  void v6[4] = v0[4];
  _OWORD v6[5] = v1;
  v6[6] = v0[6];
  long long v2 = v0[1];
  v6[0] = *v0;
  v6[1] = v2;
  long long v3 = v0[3];
  _OWORD v6[2] = v0[2];
  _OWORD v6[3] = v3;
  unint64_t v4 = sub_24A59609C((uint64_t)v6);
  sub_24A496BE8((uint64_t)v6);
  return v4;
}

uint64_t sub_24A507E08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A596898(a1, a2, a3);
}

unint64_t BigSubstring.UTF16View.count.getter()
{
  unint64_t result = v0[6];
  unint64_t v2 = v0[10];
  if (v2 >> 10 >= result >> 10) {
    return sub_24A4897D8(result, v0[7], v0[8], v0[9], v2, v0[11], v0[12], v0[13]);
  }
  __break(1u);
  return result;
}

unint64_t BigSubstring.UTF16View.distance(from:to:)(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  unint64_t v9 = result >> 10;
  unint64_t v10 = *(void *)(v8 + 48) >> 10;
  unint64_t v11 = *(void *)(v8 + 80) >> 10;
  if (v11 >= a5 >> 10 && a5 >> 10 >= v10 && v9 >= v10 && v11 >= v9) {
    return sub_24A4897D8(result, a2, a3, a4, a5, a6, a7, a8);
  }
  __break(1u);
  return result;
}

unint64_t BigSubstring.UTF16View.index(after:)(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (result >> 10 < *(void *)(v4 + 80) >> 10) {
    return sub_24A48720C(result, a2, a3, a4, 1uLL);
  }
  __break(1u);
  return result;
}

unint64_t BigSubstring.UTF16View.index(before:)(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (*(void *)(v4 + 48) >> 10 < result >> 10) {
    return sub_24A48720C(result, a2, a3, a4, 0xFFFFFFFFFFFFFFFFLL);
  }
  __break(1u);
  return result;
}

unint64_t BigSubstring.UTF16View.index(_:offsetBy:)(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v6 = *(void *)(v5 + 48) >> 10;
  unint64_t v7 = *(void *)(v5 + 80) >> 10;
  if (result >> 10 < v6 || v7 < result >> 10)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  unint64_t result = sub_24A48720C(result, a2, a3, a4, a5);
  if (result >> 10 < v6 || v7 < result >> 10) {
    goto LABEL_12;
  }
  return result;
}

unint64_t BigSubstring.UTF16View.index(_:offsetBy:limitedBy:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v10 = *(void *)(v9 + 48) >> 10;
  unint64_t v11 = *(void *)(v9 + 80) >> 10;
  if (result >> 10 < v10 || v11 < result >> 10)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }
  unint64_t result = sub_24A58F35C(result, a2, a3, a4, a5, a6, a7, a8, a9);
  if (v13 != 2 && (result >> 10 < v10 || v11 < result >> 10)) {
    goto LABEL_13;
  }
  return result;
}

unint64_t *BigSubstring.UTF16View.subscript.getter@<X0>(unint64_t *result@<X0>, _OWORD *a2@<X8>)
{
  if (*result >> 10 >= *(void *)(v2 + 48) >> 10 && *(void *)(v2 + 80) >> 10 >= result[4] >> 10)
  {
    uint64_t v5 = result;
    long long v6 = *(_OWORD *)(v2 + 16);
    v11[0] = *(_OWORD *)v2;
    v11[1] = v6;
    _OWORD v11[2] = *(_OWORD *)(v2 + 32);
    sub_24A497498(v2);
    sub_24A508BB8(v11, v5, (uint64_t)v10);
    unint64_t result = (unint64_t *)sub_24A496BE8(v2);
    long long v7 = v10[5];
    a2[4] = v10[4];
    a2[5] = v7;
    a2[6] = v10[6];
    long long v8 = v10[1];
    *a2 = v10[0];
    a2[1] = v8;
    long long v9 = v10[3];
    a2[2] = v10[2];
    a2[3] = v9;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_24A508184@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = *(void *)a1;
  if (*(void *)(v2 + 48) >> 10 >= result >> 10)
  {
    __break(1u);
  }
  else
  {
    unint64_t result = sub_24A48720C(result, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), 0xFFFFFFFFFFFFFFFFLL);
    *a2 = result;
    a2[1] = v6;
    a2[2] = v7;
    a2[3] = v8;
  }
  return result;
}

unint64_t sub_24A5081F4(uint64_t a1)
{
  unint64_t result = *(void *)a1;
  if (*(void *)(v1 + 48) >> 10 >= result >> 10)
  {
    __break(1u);
  }
  else
  {
    unint64_t result = sub_24A48720C(result, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), 0xFFFFFFFFFFFFFFFFLL);
    *(void *)a1 = result;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v5;
    *(void *)(a1 + 24) = v6;
  }
  return result;
}

unint64_t sub_24A50826C(void *a1, unint64_t *a2)
{
  uint64_t v5 = malloc(0x32uLL);
  *a1 = v5;
  unint64_t result = *a2;
  uint64_t v7 = a2[1];
  unint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  long long v10 = *(_OWORD *)(v2 + 16);
  *uint64_t v5 = *(_OWORD *)v2;
  v5[1] = v10;
  void v5[2] = *(_OWORD *)(v2 + 32);
  if (result >> 10 < *(void *)(v2 + 48) >> 10 || result >> 10 >= *(void *)(v2 + 80) >> 10)
  {
    __break(1u);
  }
  else
  {
    *((_WORD *)v5 + 24) = sub_24A58F3A8(result, v7, v8, v9);
    return (unint64_t)sub_24A4DFA58;
  }
  return result;
}

_OWORD *sub_24A50830C@<X0>(_OWORD *result@<X0>, _OWORD *a2@<X8>)
{
  long long v4 = result[1];
  v13[0] = *result;
  v13[1] = v4;
  long long v5 = result[3];
  long long v14 = result[2];
  long long v15 = v5;
  if (*(void *)&v13[0] >> 10 >= *(void *)(v2 + 48) >> 10
    && *(void *)(v2 + 80) >> 10 >= (unint64_t)v14 >> 10)
  {
    long long v7 = *(_OWORD *)(v2 + 16);
    v12[0] = *(_OWORD *)v2;
    v12[1] = v7;
    _OWORD v12[2] = *(_OWORD *)(v2 + 32);
    swift_unknownObjectRetain();
    sub_24A508BB8(v12, (unint64_t *)v13, (uint64_t)v11);
    unint64_t result = (_OWORD *)swift_unknownObjectRelease();
    long long v8 = v11[5];
    a2[4] = v11[4];
    a2[5] = v8;
    a2[6] = v11[6];
    long long v9 = v11[1];
    *a2 = v11[0];
    a2[1] = v9;
    long long v10 = v11[3];
    a2[2] = v11[2];
    a2[3] = v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_24A5083CC()
{
  unint64_t result = v0[6];
  unint64_t v2 = v0[10];
  if (v2 >> 10 >= result >> 10) {
    return sub_24A4897D8(result, v0[7], v0[8], v0[9], v2, v0[11], v0[12], v0[13]);
  }
  __break(1u);
  return result;
}

unint64_t sub_24A508430@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t result = *(void *)a1;
  unint64_t v7 = *(void *)(v3 + 48) >> 10;
  unint64_t v8 = *(void *)(v3 + 80) >> 10;
  if (result >> 10 >= v7 && v8 >= result >> 10)
  {
    unint64_t result = sub_24A48720C(result, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
    if (result >> 10 >= v7 && v8 >= result >> 10)
    {
      *a3 = result;
      a3[1] = v10;
      a3[2] = v11;
      a3[3] = v12;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_24A5084CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t result = *(void *)a1;
  unint64_t v8 = *(void *)(v4 + 48) >> 10;
  if (result >> 10 < v8 || (unint64_t v9 = *(void *)(v4 + 80) >> 10, v9 < result >> 10))
  {
    __break(1u);
  }
  else
  {
    unint64_t result = sub_24A58F35C(result, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), a2, *(void *)a3, *(void *)(a3 + 8), *(void *)(a3 + 16), *(void *)(a3 + 24));
    if (v12 == 2 || result >> 10 >= v8 && v9 >= result >> 10)
    {
      *a4 = result;
      a4[1] = v10;
      a4[2] = v11;
      a4[3] = v12;
      return result;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_24A508588(uint64_t a1, uint64_t a2)
{
  unint64_t result = *(void *)a1;
  unint64_t v5 = *(void *)a2;
  unint64_t v6 = *(void *)(v2 + 80) >> 10;
  if (v6 >= *(void *)a2 >> 10)
  {
    unint64_t v7 = *(void *)(v2 + 48) >> 10;
    if (v5 >> 10 >= v7 && result >> 10 >= v7 && v6 >= result >> 10) {
      return sub_24A4897D8(result, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), v5, *(void *)(a2 + 8), *(void *)(a2 + 16), *(void *)(a2 + 24));
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_24A50861C@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = *(void *)a1;
  if (result >> 10 >= *(void *)(v2 + 80) >> 10)
  {
    __break(1u);
  }
  else
  {
    unint64_t result = sub_24A48720C(result, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), 1uLL);
    *a2 = result;
    a2[1] = v6;
    a2[2] = v7;
    a2[3] = v8;
  }
  return result;
}

unint64_t sub_24A50868C(uint64_t a1)
{
  unint64_t result = *(void *)a1;
  if (result >> 10 >= *(void *)(v1 + 80) >> 10)
  {
    __break(1u);
  }
  else
  {
    unint64_t result = sub_24A48720C(result, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), 1uLL);
    *(void *)a1 = result;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v5;
    *(void *)(a1 + 24) = v6;
  }
  return result;
}

unint64_t BigSubstring.UTF16View.index(roundingDown:)(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5 = result >> 10;
  if (result >> 10 < v4[6] >> 10 || v4[10] >> 10 < v5)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  if ((result & 0x400) == 0) {
    return sub_24A4965FC(result, a2, a3, a4);
  }
  if (!*v4 || 2 * (v4[4] & 0x1FFFFFFFFFFFFFuLL) <= v5) {
    goto LABEL_12;
  }
  return sub_24A496820(result, a2, a3, a4, 0);
}

unint64_t BigSubstring.UTF16View.index(roundingUp:)(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (result >> 10 >= *(void *)(v4 + 48) >> 10 && *(void *)(v4 + 80) >> 10 >= result >> 10) {
    return sub_24A58F5A0(result, a2, a3, a4);
  }
  __break(1u);
  return result;
}

unint64_t _s19CollectionsInternal12BigSubstringV9UTF16ViewV2eeoiySbAE_AEtFZ_0(uint64_t a1, long long *a2)
{
  unint64_t v2 = *(void *)(a1 + 48);
  unint64_t v3 = *((void *)a2 + 6);
  if (((v2 >> 10) & 1) == ((v3 & 0x400) == 0)) {
    goto LABEL_24;
  }
  uint64_t v6 = *(void *)(a1 + 56);
  unint64_t v7 = *(void *)(a1 + 64);
  uint64_t v9 = *(void *)(a1 + 72);
  unint64_t result = *(void *)(a1 + 80);
  uint64_t v10 = *(void *)(a1 + 88);
  unint64_t v11 = *(void *)(a1 + 96);
  uint64_t v12 = *(void *)(a1 + 104);
  unint64_t v13 = *((void *)a2 + 7);
  unint64_t v14 = *((void *)a2 + 8);
  unint64_t v15 = *((void *)a2 + 9);
  unint64_t v16 = *((void *)a2 + 10);
  uint64_t v17 = *((void *)a2 + 11);
  unint64_t v18 = v2 >> 10;
  unint64_t v19 = *((void *)a2 + 12);
  uint64_t v20 = *((void *)a2 + 13);
  unint64_t v81 = v3 >> 10;
  unint64_t v21 = result >> 10;
  if ((v2 & 0x400) == 0)
  {
    unint64_t v31 = v2 >> 10;
    if (v18 >= v21) {
      goto LABEL_25;
    }
    goto LABEL_10;
  }
  if (v18 >= v21)
  {
    __break(1u);
    goto LABEL_30;
  }
  unint64_t v61 = v2 >> 10;
  unint64_t v63 = result >> 10;
  uint64_t v68 = *(void *)(a1 + 104);
  unint64_t v70 = *(void *)(a1 + 96);
  uint64_t v72 = *(void *)(a1 + 88);
  uint64_t v74 = *((void *)a2 + 9);
  unint64_t v57 = *((void *)a2 + 12);
  unint64_t v59 = result;
  uint64_t v55 = *((void *)a2 + 13);
  uint64_t v66 = *((void *)a2 + 11);
  unint64_t v76 = *((void *)a2 + 8);
  unint64_t v78 = *((void *)a2 + 10);
  uint64_t v22 = v13;
  long long v23 = *(_OWORD *)(a1 + 16);
  v83[12] = *(_OWORD *)a1;
  v83[13] = v23;
  v83[14] = *(_OWORD *)(a1 + 32);
  uint64_t v24 = v6;
  unint64_t v25 = v7;
  uint64_t v26 = v9;
  unint64_t result = sub_24A58F3A8(v2, v6, v7, v9);
  if (v81 >= v78 >> 10)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  long long v27 = a2[1];
  v83[9] = *a2;
  v83[10] = v27;
  v83[11] = a2[2];
  if ((unsigned __int16)result != (unsigned __int16)sub_24A58F3A8(v3, v22, v76, v74)) {
    goto LABEL_24;
  }
  unint64_t result = sub_24A48720C(v2, v24, v25, v26, 1uLL);
  unint64_t v51 = v29;
  uint64_t v53 = v28;
  uint64_t v49 = v30;
  unint64_t v21 = v63;
  if (v81 >= v63)
  {
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  unint64_t v2 = result;
  unint64_t v3 = sub_24A48720C(v3, v22, v76, v74, 1uLL);
  unint64_t v31 = v2 >> 10;
  unint64_t v16 = v78;
  uint64_t v20 = v55;
  unint64_t v19 = v57;
  uint64_t v17 = v66;
  uint64_t v12 = v68;
  unint64_t v7 = v51;
  uint64_t v6 = v53;
  uint64_t v9 = v49;
  unint64_t result = v59;
  unint64_t v18 = v61;
  unint64_t v11 = v70;
  uint64_t v10 = v72;
  if (v2 >> 10 >= v63)
  {
LABEL_25:
    char v48 = v31 == v21 && (v3 ^ v16) < 0x400;
    return v48 & 1;
  }
LABEL_10:
  unint64_t v32 = v3 >> 10;
  unint64_t v33 = v16 >> 10;
  if (v3 >> 10 >= v16 >> 10) {
    goto LABEL_25;
  }
  if (((result >> 10) & 1) == ((v16 & 0x400) == 0)) {
    goto LABEL_24;
  }
  if ((result & 0x400) == 0)
  {
LABEL_21:
    long long v45 = *(_OWORD *)(a1 + 16);
    v83[0] = *(_OWORD *)a1;
    v83[1] = v45;
    v83[2] = *(_OWORD *)(a1 + 32);
    v84[0] = v2;
    v84[1] = v6;
    v84[2] = v7;
    v84[3] = v9;
    v84[4] = result;
    _OWORD v84[5] = v10;
    v84[6] = v11;
    v84[7] = v12;
    long long v46 = *a2;
    long long v47 = a2[2];
    v82[1] = a2[1];
    _OWORD v82[2] = v47;
    v82[0] = v46;
    if (v33 >= v32 && v21 >= v31)
    {
      v85[0] = v3;
      v85[1] = v13;
      v85[2] = v14;
      v85[3] = v15;
      v85[4] = v16;
      v85[5] = v17;
      v85[6] = v19;
      v85[7] = v20;
      char v48 = sub_24A551BC0((uint64_t *)v83, v84, (uint64_t *)v82, v85);
      return v48 & 1;
    }
    goto LABEL_32;
  }
  unint64_t v56 = v13;
  unint64_t v58 = v16 >> 10;
  uint64_t v50 = v9;
  unint64_t v52 = v7;
  uint64_t v54 = v6;
  unint64_t v75 = v15;
  unint64_t v77 = v14;
  unint64_t v79 = v16;
  unint64_t v62 = v18;
  unint64_t v64 = v21;
  if (v18 >= v21)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  long long v34 = *(_OWORD *)(a1 + 16);
  v83[6] = *(_OWORD *)a1;
  v83[7] = v34;
  v83[8] = *(_OWORD *)(a1 + 32);
  unint64_t result = sub_24A48720C(result, v10, v11, v12, 0xFFFFFFFFFFFFFFFFLL);
  unint64_t v71 = v36;
  uint64_t v73 = v35;
  uint64_t v69 = v37;
  if (v81 < v58)
  {
    unint64_t v38 = result;
    long long v39 = a2[1];
    v83[3] = *a2;
    v83[4] = v39;
    v83[5] = a2[2];
    unint64_t result = sub_24A48720C(v79, v17, v19, v20, 0xFFFFFFFFFFFFFFFFLL);
    unint64_t v80 = result;
    uint64_t v67 = v42;
    if (v38 >> 10 < v62 || v38 >> 10 >= v64) {
      goto LABEL_35;
    }
    unint64_t v43 = v40;
    uint64_t v20 = v41;
    unint64_t v44 = v38;
    unint64_t v21 = v38 >> 10;
    unint64_t v60 = v44;
    unsigned __int16 v65 = sub_24A58F3A8(v44, v73, v71, v69);
    unint64_t result = v80;
    if (v80 >> 10 < v81 || v80 >> 10 >= v58) {
      goto LABEL_36;
    }
    if (v65 == (unsigned __int16)sub_24A58F3A8(v80, v67, v43, v20))
    {
      unint64_t v33 = v80 >> 10;
      uint64_t v6 = v54;
      unint64_t v13 = v56;
      unint64_t v14 = v77;
      unint64_t v16 = v80;
      uint64_t v10 = v73;
      unint64_t v15 = v75;
      unint64_t v19 = v43;
      uint64_t v17 = v67;
      uint64_t v12 = v69;
      uint64_t v9 = v50;
      unint64_t v7 = v52;
      unint64_t result = v60;
      unint64_t v11 = v71;
      unint64_t v32 = v3 >> 10;
      goto LABEL_21;
    }
LABEL_24:
    char v48 = 0;
    return v48 & 1;
  }
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

unint64_t sub_24A508BB8@<X0>(long long *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  long long v5 = *a1;
  long long v6 = a1[2];
  unint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  unint64_t v9 = a2[2];
  uint64_t v10 = a2[3];
  long long v28 = v6;
  long long v29 = *a1;
  long long v27 = a1[1];
  if ((*a2 & 0x400) != 0)
  {
    unint64_t result = *(void *)a1;
    if ((void)v5) {
      BOOL v16 = 2 * ((unint64_t)v6 & 0x1FFFFFFFFFFFFFLL) > v7 >> 10;
    }
    else {
      BOOL v16 = 0;
    }
    if (!v16)
    {
      __break(1u);
      goto LABEL_15;
    }
    swift_unknownObjectRetain();
    unint64_t v11 = sub_24A496820(v7, v8, v9, v10, 0);
  }
  else
  {
    swift_unknownObjectRetain();
    unint64_t v11 = sub_24A4965FC(v7, v8, v9, v10);
  }
  unint64_t v17 = v11;
  uint64_t v18 = v12;
  uint64_t v19 = v13;
  uint64_t v20 = v14;
  unint64_t result = a2[4];
  uint64_t v21 = a2[5];
  unint64_t v22 = a2[6];
  uint64_t v23 = a2[7];
  if ((result & 0x400) == 0)
  {
    unint64_t result = sub_24A4965FC(result, v21, v22, v23);
LABEL_14:
    *(_OWORD *)a3 = v29;
    *(_OWORD *)(a3 + 16) = v27;
    *(_OWORD *)(a3 + 32) = v28;
    *(void *)(a3 + 48) = v17;
    *(void *)(a3 + 56) = v18;
    *(void *)(a3 + 64) = v19;
    *(void *)(a3 + 72) = v20;
    *(void *)(a3 + 80) = result;
    *(void *)(a3 + 88) = v24;
    *(void *)(a3 + 96) = v25;
    *(void *)(a3 + 104) = v26;
    return result;
  }
  if ((void)v29 && 2 * ((unint64_t)v28 & 0x1FFFFFFFFFFFFFLL) > result >> 10)
  {
    unint64_t result = sub_24A496820(result, v21, v22, v23, 0);
    goto LABEL_14;
  }
LABEL_15:
  __break(1u);
  return result;
}

unint64_t sub_24A508CF4()
{
  unint64_t result = qword_26979B720;
  if (!qword_26979B720)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979B720);
  }
  return result;
}

unint64_t sub_24A508D4C()
{
  unint64_t result = qword_26979B728;
  if (!qword_26979B728)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979B728);
  }
  return result;
}

unint64_t sub_24A508DA4()
{
  unint64_t result = qword_26979B730;
  if (!qword_26979B730)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26979B738);
    sub_24A4E00B8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979B730);
  }
  return result;
}

unint64_t sub_24A508E1C()
{
  unint64_t result = qword_26979B740;
  if (!qword_26979B740)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979B740);
  }
  return result;
}

unint64_t sub_24A508E74()
{
  unint64_t result = qword_26979B748;
  if (!qword_26979B748)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26979B738);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979B748);
  }
  return result;
}

ValueMetadata *type metadata accessor for BigSubstring.UTF16View()
{
  return &type metadata for BigSubstring.UTF16View;
}

ValueMetadata *type metadata accessor for BigSubstring.UTF16View.Iterator()
{
  return &type metadata for BigSubstring.UTF16View.Iterator;
}

uint64_t Slice.initializeAll<A>(fromContentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = sub_24A5BBDA0();
  return UnsafeMutableBufferPointer.initialize(fromContentsOf:)(a1, a2, a3, a4, v9, v8);
}

uint64_t Slice.moveInitializeAll<A>(fromContentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = sub_24A5BBDA0();
  return sub_24A509534(a1, a2, a3, a4, v9, v8);
}

uint64_t Slice.initializeAll<A>(fromContentsOf:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_24A5BBDA0();
  return UnsafeMutableBufferPointer.initialize(fromContentsOf:)(a1, a2, v5, v4);
}

uint64_t Slice.moveInitializeAll<A>(fromContentsOf:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_24A5BBDA0();
  return _sSr19CollectionsInternalE17moveInitializeAll14fromContentsOfySryxG_tF_0(a1, a2, v5, v4);
}

uint64_t UnsafeMutableBufferPointer.initialize(fromContentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 < 1) {
    return 0;
  }
  uint64_t v4 = a2;
  if (a4 >= a2)
  {
    sub_24A5BB540();
    sub_24A5BB540();
    sub_24A5BBCD0();
    return v4;
  }
  __break(1u);
  return result;
}

uint64_t UnsafeMutableBufferPointer.initialize(fromContentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_24A5BBDB0();
  swift_getWitnessTable();
  sub_24A5BC5E0();
  swift_getWitnessTable();
  uint64_t result = sub_24A5BBB90();
  if (result < 1) {
    return 0;
  }
  uint64_t v8 = result;
  if (result <= a6)
  {
    sub_24A5BB540();
    sub_24A5BC5D0();
    sub_24A5BB540();
    sub_24A5BC5B0();
    sub_24A5BBCD0();
    return v8;
  }
  __break(1u);
  return result;
}

uint64_t Slice.initialize<A>(fromContentsOf:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A5BBDA0();
  uint64_t v6 = UnsafeMutableBufferPointer.initialize(fromContentsOf:)(a1, a2, v4, v5);
  sub_24A5BBDB0();
  swift_getWitnessTable();
  sub_24A5BC5E0();
  sub_24A5BC5B0();
  uint64_t result = v8 + v6;
  if (__OFADD__(v8, v6)) {
    __break(1u);
  }
  return result;
}

uint64_t Slice.initialize<A>(fromContentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_24A5BBDA0();
  uint64_t v10 = UnsafeMutableBufferPointer.initialize(fromContentsOf:)(a1, a2, a3, a4, v8, v9);
  sub_24A5BBDB0();
  swift_getWitnessTable();
  sub_24A5BC5E0();
  sub_24A5BC5B0();
  uint64_t result = v12 + v10;
  if (__OFADD__(v12, v10)) {
    __break(1u);
  }
  return result;
}

uint64_t _sSr19CollectionsInternalE17moveInitializeAll14fromContentsOfySryxG_tF_0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!result) {
    return 0;
  }
  uint64_t v4 = a2;
  if (!a2) {
    return v4;
  }
  if (a4 >= a2)
  {
    if (a3) {
      sub_24A5BBD00();
    }
    return v4;
  }
  __break(1u);
  return result;
}

uint64_t sub_24A509534(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a3) {
    return 0;
  }
  uint64_t v6 = a2 - result;
  if (a2 == result) {
    return v6;
  }
  if (v6 <= a6)
  {
    if (a5) {
      sub_24A5BBD00();
    }
    return v6;
  }
  __break(1u);
  return result;
}

uint64_t Slice.initializeAll<A>(fromContentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return sub_24A509644(a1, a2, a3, a4, a5, AssociatedTypeWitness, a6, a7);
}

uint64_t sub_24A509644(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = sub_24A5BBDA0();
  uint64_t v15 = sub_24A5096CC(a1, v13, v14, a6, a7, a8);
  BOOL v16 = __OFADD__(a2, v15);
  uint64_t result = a2 + v15;
  if (v16) {
    __break(1u);
  }
  return result;
}

uint64_t sub_24A5096CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = sub_24A5BBD20();
  uint64_t v30 = *(void *)(v12 - 8);
  uint64_t v31 = v12;
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  long long v29 = (char *)&v24 - v14;
  uint64_t v25 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](v13);
  BOOL v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v26 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v19 = (char *)&v24 - v18;
  uint64_t v27 = a2;
  uint64_t v28 = a4;
  uint64_t v32 = a4;
  uint64_t v33 = a5;
  uint64_t v34 = a6;
  uint64_t v35 = a2;
  uint64_t v36 = a3;
  sub_24A5BB880();
  if (v38 != 1) {
    return v37;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v16, a1, a5);
  uint64_t v20 = sub_24A5BB850();
  swift_getAssociatedConformanceWitness();
  uint64_t v21 = v29;
  sub_24A5BBEE0();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v19, AssociatedTypeWitness);
  int v22 = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v28 - 8) + 48))(v21, 1);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v21, v31);
  if (v22 != 1)
  {
    __break(1u);
    return v37;
  }
  return v20;
}

uint64_t sub_24A5099E8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (!result)
  {
    uint64_t v5 = 0;
    goto LABEL_7;
  }
  uint64_t v5 = a2;
  if (!a2)
  {
LABEL_7:
    *a3 = v5;
    return result;
  }
  if (*(void *)(v3 + 48) >= a2)
  {
    if (*(void *)(v3 + 40)) {
      uint64_t result = sub_24A5BBCD0();
    }
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

void _DequeBuffer.deinit()
{
  sub_24A509AFC((uint64_t *)(v0 + 16));
  JUMPOUT(0x24C5C7430);
}

uint64_t *sub_24A509AFC(uint64_t *result)
{
  uint64_t v2 = result[1];
  uint64_t v1 = result[2];
  if (__OFADD__(v1, v2))
  {
    __break(1u);
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v3 = *result;
  if (*result >= v1 + v2) {
    return (uint64_t *)sub_24A5BBCF0();
  }
  uint64_t v4 = v3 - v1;
  if (__OFSUB__(v3, v1)) {
    goto LABEL_7;
  }
  sub_24A5BBCF0();
  uint64_t result = (uint64_t *)(v2 - v4);
  if (!__OFSUB__(v2, v4)) {
    return (uint64_t *)sub_24A5BBCF0();
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t _DequeBuffer.__deallocating_deinit()
{
  _DequeBuffer.deinit();
  return MEMORY[0x270FA0228](v0, 40, 7);
}

uint64_t _DequeBuffer.description.getter()
{
  sub_24A509C5C(&v1);
  return v1;
}

uint64_t sub_24A509C5C@<X0>(void *a1@<X8>)
{
  sub_24A5BC070();
  swift_bridgeObjectRelease();
  strcpy((char *)v4, "_DequeStorage<");
  HIBYTE(v4[1]) = -18;
  sub_24A5BC7E0();
  sub_24A5BB6F0();
  swift_bridgeObjectRelease();
  sub_24A5BB6F0();
  _DequeBufferHeader.description.getter();
  sub_24A5BB6F0();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v3 = v4[1];
  *a1 = v4[0];
  a1[1] = v3;
  return result;
}

uint64_t sub_24A509D3C()
{
  return _DequeBuffer.description.getter();
}

uint64_t _RawHashNode.storage.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*_RawHashNode.storage.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t _RawHashNode.count.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _RawHashNode.count.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*_RawHashNode.count.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

BOOL _RawHashNode.isIdentical(to:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t _RawHashNode.validatePath(_:)(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (BYTE4(a3))
  {
    unint64_t v7 = result;
    unsigned __int8 v8 = 0;
    unint64_t v9 = HIDWORD(a3);
    while (1)
    {
      uint64_t result = swift_beginAccess();
      uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned int *)(a4 + 20));
      v10.i16[0] = vaddlv_u8(v10);
      if (*(_DWORD *)(a4 + 16) == *(_DWORD *)(a4 + 20) || v10.i32[0] <= ((v7 >> v8) & 0x1F)) {
        break;
      }
      a4 = *(void *)(a4 + 16 * ((v7 >> v8) & 0x1F) + 32);
      v8 += 5;
      if (v8 >= v9) {
        goto LABEL_9;
      }
    }
    __break(1u);
    goto LABEL_19;
  }
LABEL_9:
  if (a4 != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  if ((a3 & 0x10000000000) == 0)
  {
    uint64_t result = swift_beginAccess();
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned int *)(a2 + 20));
    v12.i16[0] = vaddlv_u8(v12);
    unsigned int v13 = v12.i32[0];
    if (*(_DWORD *)(a2 + 16) == *(_DWORD *)(a2 + 20)) {
      unsigned int v13 = 0;
    }
    if (v13 >= a3) {
      return result;
    }
    __break(1u);
  }
  uint64_t result = swift_beginAccess();
  unsigned int v14 = *(_DWORD *)(a2 + 16);
  uint8x8_t v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
  v15.i16[0] = vaddlv_u8(v15);
  if (v14 != *(_DWORD *)(a2 + 20)) {
    unsigned int v14 = v15.i32[0];
  }
  if (v14 <= a3) {
    goto LABEL_20;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for _RawHashNode(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

void *assignWithCopy for _RawHashNode(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  return a1;
}

void *assignWithTake for _RawHashNode(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for _RawHashNode()
{
  return &type metadata for _RawHashNode;
}

uint64_t RopeSummary.subtracting(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a4, v4, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 56))(a1, a2, a3);
}

uint64_t static RopeSummary.minNodeSize.getter(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(a2 + 16))();
  uint64_t v3 = result + 1;
  if (__OFADD__(result, 1))
  {
    __break(1u);
  }
  else
  {
    if (v3 < 0) {
      uint64_t v3 = result + 2;
    }
    return v3 >> 1;
  }
  return result;
}

unint64_t static RopeSummary.nodeSizeBitWidth.getter(uint64_t a1, uint64_t a2)
{
  return 64 - __clz((*(uint64_t (**)(void))(a2 + 16))());
}

uint64_t RopeSummary.adding(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a4, v4, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 48))(a1, a2, a3);
}

Swift::Int_optional __swiftcall BitSet.min()()
{
  unint64_t v1 = v0;
  Swift::Int v2 = BitSet.startIndex.getter(v0);
  uint64_t v4 = *(void *)(v1 + 16) << 6;
  if (v4 < 0)
  {
    __break(1u);
  }
  else
  {
    Swift::Bool v3 = v2 == v4;
    if (v2 == v4) {
      Swift::Int v2 = 0;
    }
  }
  result.value = v2;
  result.is_nil = v3;
  return result;
}

Swift::Int_optional __swiftcall BitSet.max()()
{
  uint64_t v1 = v0[2];
  if (!v1) {
    goto LABEL_6;
  }
  uint64_t v2 = (uint64_t)(v0 + 4);
  if (v0[4]) {
    goto LABEL_3;
  }
  if (v1 == 1)
  {
LABEL_6:
    unint64_t v3 = 0;
    char v4 = 1;
    goto LABEL_7;
  }
  if (!v0[5])
  {
    if (v1 == 2) {
      goto LABEL_6;
    }
    uint64_t v5 = 6;
    while (!v0[v5])
    {
      uint64_t v6 = v5 - 3;
      if (__OFADD__(v5 - 4, 1)) {
        goto LABEL_16;
      }
      unint64_t v3 = 0;
      ++v5;
      char v4 = 1;
      if (v6 == v1) {
        goto LABEL_7;
      }
    }
  }
LABEL_3:
  unint64_t v0 = (void *)(v1 << 6);
  if (((v1 << 6) & 0x8000000000000000) == 0)
  {
    unint64_t v3 = _UnsafeBitSet.index(before:)((unint64_t)v0, v2, v1);
    char v4 = 0;
LABEL_7:
    unint64_t v0 = (void *)v3;
    LOBYTE(v2) = v4;
    goto LABEL_17;
  }
  __break(1u);
LABEL_16:
  __break(1u);
LABEL_17:
  result.is_nil = v2;
  result.value = (Swift::Int)v0;
  return result;
}

uint64_t static _DequeSlot.zero.getter()
{
  return 0;
}

uint64_t _DequeSlot.position.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*_DequeSlot.position.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

CollectionsInternal::_DequeSlot __swiftcall _DequeSlot.advanced(by:)(Swift::Int by)
{
  return (CollectionsInternal::_DequeSlot)(v1 + by);
}

CollectionsInternal::_DequeSlot __swiftcall _DequeSlot.orIfZero(_:)(CollectionsInternal::_DequeSlot result)
{
  if (v1.position > 0) {
    return v1;
  }
  return result;
}

uint64_t _DequeSlot.description.getter()
{
  return 64;
}

uint64_t sub_24A50A328()
{
  return 64;
}

BOOL static _DequeSlot.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

BOOL static _DequeSlot.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 < a2;
}

BOOL sub_24A50A3A8(void *a1, void *a2)
{
  return *a1 < *a2;
}

BOOL sub_24A50A3BC(void *a1, void *a2)
{
  return *a2 >= *a1;
}

BOOL sub_24A50A3D0(void *a1, void *a2)
{
  return *a1 >= *a2;
}

BOOL sub_24A50A3E4(void *a1, void *a2)
{
  return *a2 < *a1;
}

uint64_t Range<>._count.getter(uint64_t a1, uint64_t a2)
{
  BOOL v2 = __OFSUB__(a2, a1);
  uint64_t result = a2 - a1;
  if (v2) {
    __break(1u);
  }
  return result;
}

unint64_t sub_24A50A40C()
{
  unint64_t result = qword_26979B750[0];
  if (!qword_26979B750[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26979B750);
  }
  return result;
}

ValueMetadata *type metadata accessor for _DequeSlot()
{
  return &type metadata for _DequeSlot;
}

char *sub_24A50A470(void *a1, uint64_t a2, char a3)
{
  if (a3) {
    uint64_t v5 = (char *)MEMORY[0x263F8EE78];
  }
  else {
    uint64_t v5 = sub_24A499EB0(0, a2 & ~(a2 >> 63), 0, MEMORY[0x263F8EE78]);
  }
  while (1)
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    if (sub_24A5BC490()) {
      break;
    }
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a1, a1[3]);
    uint64_t v6 = sub_24A5BC480();
    if (v3)
    {
      swift_bridgeObjectRelease();
      return v5;
    }
    uint64_t v7 = v6;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v5 = sub_24A499EB0(0, *((void *)v5 + 2) + 1, 1, v5);
    }
    unint64_t v9 = *((void *)v5 + 2);
    unint64_t v8 = *((void *)v5 + 3);
    if (v9 >= v8 >> 1) {
      uint64_t v5 = sub_24A499EB0((char *)(v8 > 1), v9 + 1, 1, v5);
    }
    *((void *)v5 + 2) = v9 + 1;
    *(void *)&v5[8 * v9 + 32] = v7;
  }
  return v5;
}

uint64_t OrderedDictionary.makeIterator()(uint64_t a1)
{
  return a1;
}

uint64_t OrderedDictionary.Iterator._base.getter(uint64_t a1)
{
  return a1;
}

uint64_t OrderedDictionary.Iterator._position.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t OrderedDictionary.Iterator._position.setter(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

uint64_t (*OrderedDictionary.Iterator._position.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t OrderedDictionary.Iterator.next()@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v7 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  unint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  unint64_t v11 = (char *)&v24 - v10;
  uint64_t v12 = *(void *)(v2 + 24);
  swift_retain();
  uint64_t v13 = _s19CollectionsInternal4HeapV5countSivg_0();
  swift_release();
  if (v12 >= v13)
  {
    uint64_t v22 = swift_getTupleTypeMetadata2();
    uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56);
    return v23((uint64_t)a2, 1, 1, v22);
  }
  else
  {
    uint64_t v26 = &v11[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v27 = a2;
    swift_retain();
    swift_retain();
    sub_24A5BC260();
    swift_release();
    swift_release();
    swift_retain();
    unsigned int v14 = v26;
    sub_24A5BC260();
    swift_release();
    *(void *)(v2 + 24) = v12 + 1;
    uint64_t v25 = &v9[*(int *)(TupleTypeMetadata2 + 48)];
    uint8x8_t v15 = v25;
    BOOL v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v4 - 8) + 32);
    v16(v9, v11, v4);
    unint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v5 - 8) + 32);
    v17(v15, v14, v5);
    uint64_t v18 = swift_getTupleTypeMetadata2();
    uint64_t v19 = v27;
    uint64_t v20 = &v27[*(int *)(v18 + 48)];
    v16(v27, v9, v4);
    v17(v20, v25, v5);
    return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v19, 0, 1, v18);
  }
}

uint64_t OrderedDictionary.underestimatedCount.getter()
{
  return _s19CollectionsInternal4HeapV5countSivg_0();
}

uint64_t sub_24A50A978()
{
  return swift_getWitnessTable();
}

__n128 sub_24A50A994@<Q0>(uint64_t a1@<X8>)
{
  *(void *)a1 = *(void *)v1;
  __n128 result = *(__n128 *)(v1 + 8);
  *(__n128 *)(a1 + 8) = result;
  *(void *)(a1 + 24) = 0;
  return result;
}

uint64_t sub_24A50A9AC()
{
  uint64_t v0 = sub_24A50ABC0();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

void *sub_24A50A9F8(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *sub_24A50AA48(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  return a1;
}

uint64_t sub_24A50AAC8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t sub_24A50AB20(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_24A50AB68(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for OrderedDictionary.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t BitSet.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t result = sub_24A5BC630();
  if (v3)
  {
    uint64_t v5 = a2 + 32;
    do
    {
      v5 += 8;
      uint64_t result = sub_24A5BC630();
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t BitSet.hashValue.getter(uint64_t a1)
{
  sub_24A5BC610();
  uint64_t v2 = *(void *)(a1 + 16);
  sub_24A5BC630();
  if (v2)
  {
    uint64_t v3 = a1 + 32;
    do
    {
      v3 += 8;
      sub_24A5BC630();
      --v2;
    }
    while (v2);
  }
  return sub_24A5BC690();
}

uint64_t sub_24A50AC84()
{
  return BitSet.hashValue.getter(*v0);
}

uint64_t sub_24A50AC8C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 16);
  uint64_t result = sub_24A5BC630();
  if (v2)
  {
    uint64_t v4 = v1 + 32;
    do
    {
      v4 += 8;
      uint64_t result = sub_24A5BC630();
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_24A50ACE0()
{
  uint64_t v1 = *v0;
  sub_24A5BC610();
  uint64_t v2 = *(void *)(v1 + 16);
  sub_24A5BC630();
  if (v2)
  {
    uint64_t v3 = v1 + 32;
    do
    {
      v3 += 8;
      sub_24A5BC630();
      --v2;
    }
    while (v2);
  }
  return sub_24A5BC690();
}

uint64_t Rope._Item.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t Rope.summary.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v31 = *(void *)(a1 + 16);
  uint64_t v32 = a2;
  uint64_t v30 = v4;
  uint64_t v5 = type metadata accessor for Rope._Node();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v28 = (char *)&v27 - v7;
  uint64_t v8 = sub_24A5BBD20();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  unsigned int v14 = (char *)&v27 - v13;
  uint8x8_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v27 = v3;
  v15((char *)&v27 - v13, v3, v8);
  uint64_t v29 = v6;
  BOOL v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  int v17 = v16(v14, 1, v5);
  uint64_t v18 = v14;
  uint64_t v19 = *(void (**)(char *, uint64_t))(v9 + 8);
  v19(v18, v8);
  if (v17 == 1)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(AssociatedTypeWitness, AssociatedConformanceWitness);
  }
  else
  {
    v15(v12, v27, v8);
    if (v16(v12, 1, v5) == 1)
    {
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v19)(v12, v8);
      __break(1u);
    }
    else
    {
      uint64_t v24 = v28;
      uint64_t v23 = v29;
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v28, v12, v5);
      uint64_t v25 = &v24[*(int *)(v5 + 36)];
      uint64_t v26 = swift_getAssociatedTypeWitness();
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v26 - 8) + 16))(v32, v25, v26);
      return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v24, v5);
    }
  }
  return result;
}

uint64_t Rope._Item.split(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 + 24) + 88))(v6, v4);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a3, v8, v4);
}

uint64_t Rope._Item.summary.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 40))(*(void *)(a1 + 16));
}

uint64_t Rope._Item.isUndersized.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 56))(*(void *)(a1 + 16));
}

uint64_t Rope._Item.rebalance(nextNeighbor:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(a2 + 24) + 72))(a1, *(void *)(a2 + 16));
}

uint64_t Rope._Item.isEmpty.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))(*(void *)(a1 + 16));
}

uint64_t Rope._Item.rebalance(prevNeighbor:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(a2 + 24) + 80))(a1, *(void *)(a2 + 16));
}

uint64_t Sequence<>._sum()()
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(AssociatedTypeWitness, AssociatedConformanceWitness);
  return sub_24A5BB8E0();
}

uint64_t sub_24A50B360(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v13[1] = a1;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v9 = (char *)v13 - v8;
  uint64_t v10 = *(void (**)(void))(a5 + 24);
  swift_checkMetadataState();
  v10();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(v9, AssociatedTypeWitness, AssociatedConformanceWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
}

uint64_t sub_24A50B4F0(uint64_t a1, uint64_t a2)
{
  return sub_24A50B360(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t Rope._Item.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Rope._Item.value.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*Rope._Item.value.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t Rope._Item.description.getter()
{
  return 0;
}

uint64_t *sub_24A50B5EC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7
    && *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    uint64_t v8 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t sub_24A50B6A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_24A50B6F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_24A50B744(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_24A50B794(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void sub_24A50B8F0(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x24A50BB08);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        BOOL v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t sub_24A50BB38(unint64_t a1)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (!a1) {
    return MEMORY[0x263F8EE78];
  }
  unint64_t v3 = a1 >> 6;
  char v4 = a1 & 0x3F;
  BOOL v5 = (a1 & 0x3F) == 0 && a1 > 0x3F;
  int64_t v1 = v3 - v5;
  uint64_t v2 = sub_24A4E6148(0, (char *)(v3 - v5));
  if (v5)
  {
LABEL_13:
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v6 = -1;
    if (result) {
      goto LABEL_8;
    }
    goto LABEL_14;
  }
  uint64_t v6 = ~(-1 << v4);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result) {
    goto LABEL_8;
  }
LABEL_14:
  uint64_t result = (uint64_t)sub_24A499D60((uint64_t)v2);
  uint64_t v2 = (char *)result;
LABEL_8:
  if (v1 < *((void *)v2 + 2))
  {
    *(void *)&v2[8 * v1 + 32] &= v6;
    return (uint64_t)v2;
  }
  __break(1u);
  return result;
}

uint64_t static BitArray.randomBits<A>(count:using:)(unint64_t a1)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (!a1) {
    return MEMORY[0x263F8EE78];
  }
  char v3 = a1 & 0x3F;
  BOOL v4 = (a1 & 0x3F) == 0 && a1 > 0x3F;
  uint64_t v1 = (a1 >> 6) - v4;
  MEMORY[0x270FA5388](a1);
  void v10[2] = v5;
  long long v10[3] = v6;
  v10[4] = v7;
  uint64_t v2 = sub_24A4E6280((char *)sub_24A4E65F4, (uint64_t)v10, 0, v1);
  if (v4)
  {
LABEL_13:
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = -1;
    if (result) {
      goto LABEL_8;
    }
    goto LABEL_14;
  }
  uint64_t v8 = ~(-1 << v3);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result) {
    goto LABEL_8;
  }
LABEL_14:
  uint64_t result = (uint64_t)sub_24A499D60((uint64_t)v2);
  uint64_t v2 = (char *)result;
LABEL_8:
  if (v1 < *((void *)v2 + 2))
  {
    *(void *)&v2[8 * v1 + 32] &= v8;
    return (uint64_t)v2;
  }
  __break(1u);
  return result;
}

char *sub_24A50BD4C(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_24A50BD6C(a1, a2, a3, *v3);
  *char v3 = result;
  return result;
}

char *sub_24A50BD6C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_26979AD20);
    unsigned int v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    unsigned int v10 = (char *)MEMORY[0x263F8EE78];
  }
  int v13 = v10 + 32;
  unsigned int v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_release();
  return v10;
}

Swift::Int __swiftcall FixedWidthInteger._rank(ofBit:)(Swift::UInt ofBit)
{
  uint64_t v3 = v1;
  Swift::UInt v24 = ofBit;
  uint64_t v4 = *(void *)(*(void *)(v2 + 8) + 24);
  void v22[2] = *(void *)(v2 + 8);
  v22[1] = *(void *)(v4 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v7 = *(void *)(v3 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  unsigned int v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  int v13 = (char *)v22 - v12;
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  BOOL v16 = (char *)v22 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v23 = (char *)v22 - v17;
  v22[0] = swift_getAssociatedConformanceWitness();
  sub_24A5BC580();
  sub_24A5BC500();
  Swift::UInt v25 = v24;
  sub_24A49A24C();
  sub_24A5BBEF0();
  sub_24A5BC320();
  uint64_t v18 = *(void (**)(char *, uint64_t))(v7 + 8);
  v18(v10, v3);
  v18(v13, v3);
  sub_24A5BC580();
  sub_24A5BC500();
  uint64_t v19 = v23;
  sub_24A5BC310();
  v18(v13, v3);
  v18(v16, v3);
  sub_24A5BBF00();
  Swift::Int v20 = sub_24A5BC2F0();
  v18(v16, v3);
  v18(v19, v3);
  return v20;
}

Swift::UInt_optional __swiftcall UInt32._bit(ranked:)(Swift::Int ranked)
{
  v2.i32[0] = (unsigned __int16)v1;
  int8x8_t v3 = vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8((uint8x8_t)v3);
  __int32 v4 = v3.i32[0];
  BOOL v5 = v3.i32[0] <= ranked;
  if (v3.i32[0] > ranked) {
    __int32 v4 = 0;
  }
  unsigned int v6 = ranked - v4;
  v3.i32[0] = (v1 >> (16 * v5));
  int8x8_t v7 = vcnt_s8(v3);
  v7.i16[0] = vaddlv_u8((uint8x8_t)v7);
  if (v6 >= v7.i32[0]) {
    unsigned int v8 = (16 * v5) | 8;
  }
  else {
    unsigned int v8 = 16 * v5;
  }
  if (v6 >= v7.i32[0]) {
    __int32 v9 = v7.i32[0];
  }
  else {
    __int32 v9 = 0;
  }
  unsigned int v10 = v6 - v9;
  v7.i32[0] = (v1 >> v8) & 0xF;
  int8x8_t v11 = vcnt_s8(v7);
  v11.i16[0] = vaddlv_u8((uint8x8_t)v11);
  __int32 v12 = v11.i32[0];
  if (v10 < v11.i32[0]) {
    __int32 v12 = 0;
  }
  else {
    v8 |= 4u;
  }
  unsigned int v13 = v10 - v12;
  v11.i32[0] = (v1 >> v8) & 3;
  uint8x8_t v14 = (uint8x8_t)vcnt_s8(v11);
  v14.i16[0] = vaddlv_u8(v14);
  __int32 v15 = v14.i32[0];
  if (v13 < v14.i32[0]) {
    __int32 v15 = 0;
  }
  else {
    v8 |= 2u;
  }
  unsigned int v16 = v13 - v15;
  unsigned int v17 = (v1 >> v8) & 1;
  if (v16 <= v17)
  {
    if (v16 >= v17) {
      ++v8;
    }
    Swift::Bool v19 = ((1 << v8) & v1) == 0;
    if (v19) {
      Swift::UInt v18 = 0;
    }
    else {
      Swift::UInt v18 = v8;
    }
  }
  else
  {
    Swift::UInt v18 = 0;
    Swift::Bool v19 = 1;
  }
  result.value = v18;
  result.is_nil = v19;
  return result;
}

uint64_t FixedWidthInteger._nonzeroBitCount.getter()
{
  return sub_24A5BBEF0();
}

Swift::UInt_optional __swiftcall UInt._bit(ranked:)(Swift::Int ranked)
{
  uint8x8_t v2 = (uint8x8_t)vcnt_s8((int8x8_t)v1);
  v2.i16[0] = vaddlv_u8(v2);
  uint64_t v3 = v2.u32[0];
  BOOL v4 = v2.u32[0] <= (unint64_t)ranked;
  if (v2.u32[0] > (unint64_t)ranked) {
    uint64_t v3 = 0;
  }
  unint64_t v5 = ranked - v3;
  uint8x8_t v6 = (uint8x8_t)vcnt_s8((int8x8_t)(unsigned __int16)(v1 >> (32 * v4)));
  v6.i16[0] = vaddlv_u8(v6);
  if (v5 >= v6.u32[0]) {
    uint64_t v7 = (32 * v4) | 0x10;
  }
  else {
    uint64_t v7 = 32 * v4;
  }
  if (v5 >= v6.u32[0]) {
    uint64_t v8 = v6.u32[0];
  }
  else {
    uint64_t v8 = 0;
  }
  unint64_t v9 = v5 - v8;
  uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)(v1 >> v7));
  v10.i16[0] = vaddlv_u8(v10);
  uint64_t v11 = v10.u32[0];
  if (v9 < v10.u32[0]) {
    uint64_t v11 = 0;
  }
  else {
    v7 |= 8uLL;
  }
  unint64_t v12 = v9 - v11;
  uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)((v1 >> v7) & 0xF));
  v13.i16[0] = vaddlv_u8(v13);
  uint64_t v14 = v13.u32[0];
  if (v12 < v13.u32[0]) {
    uint64_t v14 = 0;
  }
  else {
    v7 |= 4uLL;
  }
  unint64_t v15 = v12 - v14;
  uint8x8_t v16 = (uint8x8_t)vcnt_s8((int8x8_t)((v1 >> v7) & 3));
  v16.i16[0] = vaddlv_u8(v16);
  Swift::UInt v17 = v7 + 2;
  if (v15 >= v16.u32[0])
  {
    uint64_t v18 = v16.u32[0];
  }
  else
  {
    Swift::UInt v17 = v7;
    uint64_t v18 = 0;
  }
  unint64_t v19 = v15 - v18;
  unint64_t v20 = (v1 >> v17) & 1;
  if (v19 <= v20 && (v19 < v20 ? (Swift::UInt v21 = v17) : (Swift::UInt v21 = v17 + 1), ((v1 >> v21) & 1) != 0))
  {
    Swift::Bool v22 = 0;
  }
  else
  {
    Swift::UInt v21 = 0;
    Swift::Bool v22 = 1;
  }
  result.value = v21;
  result.is_nil = v22;
  return result;
}

Swift::UInt_optional __swiftcall UInt16._bit(ranked:)(Swift::Int ranked)
{
  v2.i32[0] = v1;
  int8x8_t v3 = vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8((uint8x8_t)v3);
  __int16 v4 = v3.i16[0];
  BOOL v5 = v3.i32[0] <= (unsigned __int16)ranked;
  if (v3.i32[0] > (unsigned __int16)ranked) {
    __int16 v4 = 0;
  }
  unsigned __int16 v6 = ranked - v4;
  v3.i32[0] = (v1 >> (8 * v5)) & 0xF;
  int8x8_t v7 = vcnt_s8(v3);
  v7.i16[0] = vaddlv_u8((uint8x8_t)v7);
  if (v6 >= v7.i32[0]) {
    int v8 = (8 * v5) | 4;
  }
  else {
    int v8 = 8 * v5;
  }
  if (v6 >= v7.i32[0]) {
    __int16 v9 = v7.i16[0];
  }
  else {
    __int16 v9 = 0;
  }
  unsigned __int16 v10 = v6 - v9;
  v7.i32[0] = (v1 >> v8) & 3;
  uint8x8_t v11 = (uint8x8_t)vcnt_s8(v7);
  v11.i16[0] = vaddlv_u8(v11);
  if (v10 >= v11.i32[0]) {
    int v12 = v8 | 2;
  }
  else {
    int v12 = v8;
  }
  if (v10 >= v11.i32[0]) {
    __int16 v13 = v11.i16[0];
  }
  else {
    __int16 v13 = 0;
  }
  unsigned __int16 v14 = v10 - v13;
  unsigned int v15 = (v1 >> v12) & 1;
  if (v15 >= v14)
  {
    int v18 = v12 | (v15 <= v14);
    int v19 = v1 >> v18;
    Swift::Bool v17 = (v19 & 1) == 0;
    Swift::UInt v16 = (v19 << 31 >> 31) & v18;
  }
  else
  {
    Swift::UInt v16 = 0;
    Swift::Bool v17 = 1;
  }
  result.value = v16;
  result.is_nil = v17;
  return result;
}

uint64_t BitArray.count.getter(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x8000000000000000) == 0) {
    return a2;
  }
  __break(1u);
  return result;
}

void sub_24A50C4E4(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = 0;
}

uint64_t sub_24A50C4F4()
{
  uint64_t result = *(void *)(v0 + 8);
  if (result < 0) {
    __break(1u);
  }
  return result;
}

uint64_t sub_24A50C504()
{
  uint64_t v1 = sub_24A595B70(*v0, v0[1]);
  swift_bridgeObjectRelease();
  return v1;
}

void *sub_24A50C53C(void *a1, unsigned char *a2, uint64_t a3)
{
  return sub_24A585D50(a1, a2, a3, *v3, v3[1]);
}

uint64_t BitArray.startIndex.getter()
{
  return 0;
}

uint64_t BitArray.endIndex.getter(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x8000000000000000) == 0) {
    return a2;
  }
  __break(1u);
  return result;
}

Swift::Int __swiftcall BitArray.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

Swift::Int __swiftcall BitArray.index(before:)(Swift::Int before)
{
  BOOL v1 = __OFSUB__(before, 1);
  Swift::Int result = before - 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall BitArray.formIndex(after:)(Swift::Int *after)
{
  if (__OFADD__(*after, 1)) {
    __break(1u);
  }
  else {
    ++*after;
  }
}

Swift::Void __swiftcall BitArray.formIndex(before:)(Swift::Int *before)
{
  if (__OFSUB__(*before, 1)) {
    __break(1u);
  }
  else {
    --*before;
  }
}

Swift::Int __swiftcall BitArray.index(_:offsetBy:)(Swift::Int _, Swift::Int offsetBy)
{
  BOOL v2 = __OFADD__(_, offsetBy);
  Swift::Int result = _ + offsetBy;
  if (v2) {
    __break(1u);
  }
  return result;
}

Swift::Int_optional __swiftcall BitArray.index(_:offsetBy:limitedBy:)(Swift::Int _, Swift::Int offsetBy, Swift::Int limitedBy)
{
  Swift::Int v3 = sub_24A50CF14(_, offsetBy, limitedBy);
  Swift::Bool v5 = v4 & 1;
  result.value = v3;
  result.is_nil = v5;
  return result;
}

Swift::Int __swiftcall BitArray.distance(from:to:)(Swift::Int from, Swift::Int to)
{
  BOOL v2 = __OFSUB__(to, from);
  Swift::Int result = to - from;
  if (v2) {
    __break(1u);
  }
  return result;
}

unint64_t BitArray.subscript.getter(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < a3)
  {
    return (*(void *)(a2 + 8 * (result >> 6) + 32) >> result) & 1;
  }
  __break(1u);
  return result;
}

uint64_t BitArray.subscript.setter(char a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v4 = a2;
    if (v3[1] > a2)
    {
      char v2 = a1;
      uint64_t v5 = *v3;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      *Swift::Int v3 = v5;
      if (result) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_9:
  uint64_t result = (uint64_t)sub_24A499D60(v5);
  uint64_t v5 = result;
  *Swift::Int v3 = result;
LABEL_4:
  uint64_t v7 = *(void *)(v5 + 32 + 8 * (v4 >> 6));
  uint64_t v8 = v7 | (1 << (v4 & 0x3F));
  if ((v2 & 1) == 0) {
    uint64_t v8 = v7 & ((-1 << (v4 & 0x3F)) - 1);
  }
  *(void *)(v5 + 32 + 8 * (v4 >> 6)) = v8;
  *Swift::Int v3 = v5;
  return result;
}

uint64_t (*BitArray.subscript.modify(uint64_t (*result)(uint64_t a1), unint64_t a2))(uint64_t a1)
{
  *(void *)uint64_t result = a2;
  *((void *)result + 1) = v2;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v2[1] > a2)
  {
    *((unsigned char *)result + 16) = (*(void *)(*v2 + 8 * (a2 >> 6) + 32) >> a2) & 1;
    return sub_24A50C718;
  }
  __break(1u);
  return result;
}

uint64_t sub_24A50C718(uint64_t a1)
{
  return BitArray.subscript.setter(*(unsigned char *)(a1 + 16), *(void *)a1);
}

uint64_t sub_24A50C744(char *a1, unint64_t *a2)
{
  return BitArray.subscript.setter(*a1, *a2);
}

uint64_t (*sub_24A50C750(uint64_t (*result)(uint64_t a1), unint64_t *a2))(uint64_t a1)
{
  unint64_t v3 = *a2;
  *(void *)uint64_t result = v2;
  *((void *)result + 1) = v3;
  if ((v3 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v3 < v2[1])
  {
    *((unsigned char *)result + 16) = (*(void *)(*v2 + 8 * (v3 >> 6) + 32) >> v3) & 1;
    return sub_24A50C7AC;
  }
  __break(1u);
  return result;
}

uint64_t sub_24A50C7AC(uint64_t a1)
{
  return BitArray.subscript.setter(*(unsigned char *)(a1 + 16), *(void *)(a1 + 8));
}

uint64_t sub_24A50C7D4(uint64_t a1, uint64_t a2)
{
  sub_24A50CC04(v2, *(void *)a2, *(void *)(a2 + 8), *(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24));
  return swift_bridgeObjectRelease();
}

void (*sub_24A50C820(void (***a1)(unint64_t **a1, char a2), uint64_t *a2))(void *a1)
{
  unint64_t v4 = (void (**)(unint64_t **, char))malloc(0x28uLL);
  *a1 = v4;
  v4[4] = sub_24A50C8C8(v4, *a2, a2[1]);
  return sub_24A50C880;
}

void sub_24A50C880(void *a1)
{
  BOOL v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);
  free(v1);
}

void (*sub_24A50C8C8(void (**a1)(unint64_t **a1, char a2), uint64_t a2, uint64_t a3))(unint64_t **a1, char a2)
{
  uint64_t result = (void (*)(unint64_t **, char))malloc(0x38uLL);
  *a1 = result;
  *((void *)result + 5) = a3;
  *((void *)result + 6) = v3;
  *((void *)result + 4) = a2;
  uint64_t v8 = v3[1];
  if (v8 < 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a2 < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v8 >= a3)
  {
    __int16 v9 = result;
    uint64_t v10 = *v3;
    *(void *)__int16 v9 = a2;
    *((void *)v9 + 1) = a3;
    *((void *)v9 + 2) = v10;
    *((void *)v9 + 3) = v8;
    swift_bridgeObjectRetain();
    return sub_24A50C968;
  }
LABEL_7:
  __break(1u);
  return result;
}

void sub_24A50C968(unint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = **a1;
  uint64_t v4 = (*a1)[1];
  uint64_t v5 = (*a1)[2];
  unint64_t v6 = (*a1)[3];
  uint64_t v7 = (*a1)[5];
  uint64_t v8 = (*a1)[6];
  unint64_t v9 = (*a1)[4];
  if (a2)
  {
    swift_bridgeObjectRetain();
    sub_24A50CC04(v8, v9, v7, v3, v4, v5, v6);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_24A50CC04((*a1)[6], v9, v7, v3, v4, v5, v6);
  }
  swift_bridgeObjectRelease();
  free(v2);
}

uint64_t sub_24A50CA24@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_24A50CDB4(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

unint64_t sub_24A50CA50(unint64_t *a1, unint64_t *a2)
{
  return sub_24A52896C(*a1, *a2);
}

uint64_t sub_24A50CA5C()
{
  return sub_24A5BB4A0();
}

uint64_t sub_24A50CA80()
{
  return sub_24A5BB490();
}

void sub_24A50CAA4(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  if (v2 < 0) {
    __break(1u);
  }
  else {
    *a1 = v2;
  }
}

unsigned char *sub_24A50CAB8(unsigned char *result, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v3 < v2[1])
  {
    *uint64_t result = (*(void *)(*v2 + 8 * (v3 >> 6) + 32) >> v3) & 1;
    return nullsub_1;
  }
  __break(1u);
  return result;
}

uint64_t *sub_24A50CB14@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2[1];
  if (v3 < 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t v4 = *result;
  if (*result < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v5 = result[1];
  if (v3 >= v5)
  {
    uint64_t v6 = *v2;
    *a2 = v4;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v3;
    return (uint64_t *)swift_bridgeObjectRetain();
  }
LABEL_7:
  __break(1u);
  return result;
}

void sub_24A50CB4C(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    *a1 = 0;
    a1[1] = v2;
  }
}

BOOL sub_24A50CB60()
{
  uint64_t v1 = *(void *)(v0 + 8);
  if ((v1 & 0x8000000000000000) == 0) {
    return v1 == 0;
  }
  __break(1u);
  return result;
}

uint64_t sub_24A50CB78@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = sub_24A50CF14(*a1, a2, *a3);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t *sub_24A50CBB0(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = a2[1];
  if (*result >= *a2)
  {
    BOOL v5 = __OFSUB__(v2, v3);
    BOOL v4 = v2 - v3 < 0;
  }
  else
  {
    BOOL v5 = 0;
    BOOL v4 = 0;
  }
  if (v4 == v5) {
    __break(1u);
  }
  return result;
}

void *sub_24A50CBCC(void *result, void *a2)
{
  if (*result < *a2 || a2[1] < *result) {
    __break(1u);
  }
  return result;
}

void *sub_24A50CBE8(void *result, void *a2)
{
  if (*result < *a2 || a2[1] < result[1]) {
    __break(1u);
  }
  return result;
}

uint64_t sub_24A50CC04(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  unint64_t v7 = *(void *)(result + 8);
  if ((v7 & 0x8000000000000000) != 0)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if ((uint64_t)v7 < a3)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  unint64_t v9 = a4;
  if (a2 != a3)
  {
    uint64_t v26 = a5 - a4;
    if (a5 == a4)
    {
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    if ((uint64_t)a2 >= a3)
    {
LABEL_41:
      __break(1u);
      return result;
    }
    uint64_t v10 = 0;
    uint64_t v11 = *(void *)result;
    uint64_t v27 = a6 + 32;
    unint64_t v24 = a4 + a3 - a2;
    Swift::UInt v25 = (void *)result;
    if (a7 >= a4) {
      unint64_t v12 = a7 - a4;
    }
    else {
      unint64_t v12 = 0;
    }
    BOOL v13 = v7 >= a2;
    unint64_t v14 = v7 - a2;
    if (v13) {
      unint64_t v15 = v14;
    }
    else {
      unint64_t v15 = 0;
    }
    uint64_t v16 = ~a2 + a3;
    while (1)
    {
      unint64_t v17 = v9 + v10;
      if ((uint64_t)(v9 + v10) >= a5) {
        break;
      }
      if ((v9 & 0x8000000000000000) != 0) {
        goto LABEL_31;
      }
      if (v12 == v10) {
        goto LABEL_32;
      }
      unint64_t v18 = a2 + v10;
      if (((a2 + v10) & 0x8000000000000000) != 0) {
        goto LABEL_33;
      }
      if (v15 == v10) {
        goto LABEL_34;
      }
      unint64_t v19 = *(void *)(v27 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8));
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_24A499D60(v11);
        uint64_t v11 = result;
      }
      uint64_t v20 = *(void *)(v11 + 32 + 8 * (v18 >> 6));
      uint64_t v21 = v20 & ((-1 << (v18 & 0x3F)) - 1);
      uint64_t v22 = v20 | (1 << (v18 & 0x3F));
      if ((v19 >> (v17 & 0x3F))) {
        uint64_t v23 = v22;
      }
      else {
        uint64_t v23 = v21;
      }
      *(void *)(v11 + 32 + 8 * (v18 >> 6)) = v23;
      if (v16 == v10)
      {
        unint64_t v9 = v24;
        *Swift::UInt v25 = v11;
        goto LABEL_28;
      }
      if (v26 == ++v10) {
        goto LABEL_35;
      }
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
LABEL_28:
  if (v9 != a5)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  return result;
}

uint64_t sub_24A50CDB4(uint64_t result)
{
  unint64_t v9 = (uint64_t (*)(BOOL *))result;
  unint64_t v3 = v1[1];
  if ((v3 & 0x8000000000000000) != 0)
  {
LABEL_17:
    __break(1u);
  }
  else
  {
    unint64_t v4 = 0;
    if (v3)
    {
      unint64_t v5 = v1[1];
      while (1)
      {
        if (v4 == v3)
        {
LABEL_16:
          __break(1u);
          goto LABEL_17;
        }
        uint64_t v6 = *v1 + 32;
        BOOL v11 = (*(void *)(v6 + 8 * (v4 >> 6)) & (1 << v4)) != 0;
        uint64_t result = v9(&v11);
        if (v2) {
          return v4;
        }
        if (result) {
          break;
        }
        uint64_t v1 = v8;
LABEL_13:
        if ((uint64_t)++v4 >= (uint64_t)v5) {
          return v4;
        }
      }
      while ((uint64_t)v4 < (uint64_t)--v5)
      {
        if (v5 >= v3)
        {
          __break(1u);
          goto LABEL_16;
        }
        BOOL v10 = (*(void *)(v6 + 8 * (v5 >> 6)) & (1 << v5)) != 0;
        uint64_t result = v9(&v10);
        if ((result & 1) == 0)
        {
          uint64_t v1 = v8;
          char v7 = (*(void *)(v6 + 8 * (v4 >> 6)) & (1 << v4)) != 0;
          BitArray.subscript.setter((*(void *)(v6 + 8 * (v5 >> 6)) & (1 << v5)) != 0, v4);
          uint64_t result = BitArray.subscript.setter(v7, v5);
          goto LABEL_13;
        }
      }
    }
    return v4;
  }
  return result;
}

uint64_t sub_24A50CF14(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 - result;
  if (__OFSUB__(a3, result))
  {
    __break(1u);
    goto LABEL_12;
  }
  if (a2 >= 1)
  {
    if (v3 < 0 || v3 >= (unint64_t)a2) {
      goto LABEL_9;
    }
    return 0;
  }
  if (v3 <= 0 && v3 > a2) {
    return 0;
  }
LABEL_9:
  BOOL v4 = __OFADD__(result, a2);
  result += a2;
  if (v4) {
LABEL_12:
  }
    __break(1u);
  return result;
}

uint64_t sub_24A50CF68()
{
  return sub_24A4D280C(&qword_26979B7D8, &qword_26979B7E0);
}

unint64_t sub_24A50CFA8()
{
  unint64_t result = qword_26979B7E8;
  if (!qword_26979B7E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979B7E8);
  }
  return result;
}

uint64_t sub_24A50CFFC()
{
  return sub_24A50D338(&qword_26979B7F0);
}

uint64_t sub_24A50D030()
{
  return sub_24A50D23C(&qword_26979B7F8, (void (*)(void))sub_24A50D078);
}

unint64_t sub_24A50D078()
{
  unint64_t result = qword_26979B808;
  if (!qword_26979B808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979B808);
  }
  return result;
}

unint64_t sub_24A50D0D0()
{
  unint64_t result = qword_26979B810;
  if (!qword_26979B810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979B810);
  }
  return result;
}

uint64_t sub_24A50D124()
{
  return sub_24A50D23C(&qword_26979B818, (void (*)(void))sub_24A50D16C);
}

unint64_t sub_24A50D16C()
{
  unint64_t result = qword_26979B820;
  if (!qword_26979B820)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979B820);
  }
  return result;
}

uint64_t sub_24A50D1C0()
{
  return sub_24A50D338(&qword_26979B828);
}

uint64_t sub_24A50D1F4()
{
  return sub_24A50D23C(&qword_26979B830, (void (*)(void))sub_24A50CFA8);
}

uint64_t sub_24A50D23C(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26979B800);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_24A50D2B0()
{
  unint64_t result = qword_26979B838;
  if (!qword_26979B838)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26979B838);
  }
  return result;
}

uint64_t sub_24A50D304()
{
  return sub_24A50D338((unint64_t *)&qword_26979B840);
}

uint64_t sub_24A50D338(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26979AEC0);
    sub_24A4E823C();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A50D3A8()
{
  return sub_24A4D280C(qword_26979B848, &qword_26979B800);
}

uint64_t OrderedDictionary<>.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v42 = a8;
  uint64_t v39 = a7;
  uint64_t v31 = a4;
  uint64_t v37 = *(void (***)(char *, uint64_t))(a6 - 8);
  uint64_t v33 = a9;
  uint64_t v14 = MEMORY[0x270FA5388](a1);
  uint64_t v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v14);
  char v38 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v44 = sub_24A5BBD20();
  uint64_t v41 = *(void (***)(char *, char *, uint64_t))(v44 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v44);
  unint64_t v43 = (char *)&v31 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v31 - v22;
  uint64_t v24 = a1[3];
  uint64_t v40 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v24);
  sub_24A5BC710();
  uint64_t v45 = a2;
  uint64_t v46 = a3;
  uint64_t v47 = v31;
  uint64_t v48 = 0;
  uint64_t v25 = type metadata accessor for OrderedDictionary.Iterator();
  v41 += 4;
  uint64_t v42 = v25;
  uint64_t v40 = TupleTypeMetadata2 - 8;
  uint64_t v34 = (void (**)(char *, char *, uint64_t))(v37 + 4);
  uint64_t v35 = (void (**)(char *, char *, uint64_t))(v32 + 32);
  uint64_t v36 = v37 + 1;
  uint64_t v37 = (void (**)(char *, uint64_t))(v32 + 8);
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v26 = v38;
  while (1)
  {
    uint64_t v27 = v43;
    OrderedDictionary.Iterator.next()(v42, v43);
    (*v41)(v23, v27, v44);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48))(v23, 1, TupleTypeMetadata2) == 1)break; {
    uint64_t v28 = &v23[*(int *)(TupleTypeMetadata2 + 48)];
    }
    (*v35)(v26, v23, a5);
    (*v34)(v16, v28, a6);
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v49, v50);
    uint64_t v29 = v51;
    sub_24A5BC4B0();
    if (v29)
    {
      (*v36)(v16, a6);
      (*v37)(v26, a5);
      break;
    }
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v49, v50);
    sub_24A5BC4B0();
    (*v36)(v16, a6);
    (*v37)(v26, a5);
    uint64_t v51 = 0;
  }
  swift_release();
  swift_release();
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
}

uint64_t sub_24A50D8A8(void *a1, uint64_t *a2, uint64_t a3)
{
  return OrderedDictionary<>.encode(to:)(a1, *v3, v3[1], v3[2], a2[2], a2[3], *(void *)(a3 - 8), a2[4], *(void *)(a3 - 16));
}

uint64_t OrderedDictionary<>.init(from:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v55 = a6;
  uint64_t v50 = a5;
  uint64_t v56 = a4;
  uint64_t v46 = sub_24A5BC0D0();
  uint64_t v45 = *(void *)(v46 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v46);
  BOOL v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = *(void (***)(uint64_t, uint64_t))(a3 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v9);
  uint64_t v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)&v43 - v16;
  uint64_t v57 = a2;
  uint64_t v47 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v15);
  unint64_t v19 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v20 = v54;
  sub_24A5BC6E0();
  if (v20)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return (uint64_t)v14;
  }
  unint64_t v52 = v14;
  uint64_t v53 = v17;
  unint64_t v43 = v11;
  uint64_t v54 = v19;
  uint64_t v44 = a1;
  uint64_t v14 = (char *)OrderedSet.init()();
  uint64_t v22 = v21;
  sub_24A5BB970();
  uint64_t v23 = sub_24A5BC170();
  unint64_t v63 = v14;
  uint64_t v64 = v22;
  uint64_t v65 = v23;
  __swift_project_boxed_opaque_existential_1(v61, (uint64_t)v62);
  if (sub_24A5BC490())
  {
LABEL_4:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v61);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
    return (uint64_t)v14;
  }
  uint64_t v48 = (void (**)(char *, uint64_t))(v51 + 1);
  uint64_t v49 = (void (**)(char *, char *, uint64_t))(v51 + 2);
  uint64_t v51 = (void (**)(uint64_t, uint64_t))(v47 + 8);
  uint64_t v25 = v53;
  while (1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v61, (uint64_t)v62);
    sub_24A5BC470();
    swift_retain();
    swift_retain();
    OrderedSet._find(_:)();
    char v27 = v26;
    uint64_t v29 = v28;
    swift_release();
    swift_release();
    __swift_project_boxed_opaque_existential_1(v61, (uint64_t)v62);
    if ((v27 & 1) == 0) {
      break;
    }
    if (sub_24A5BC490())
    {
      uint64_t v38 = sub_24A5BC0E0();
      swift_allocError();
      uint64_t v40 = v39;
      uint64_t v41 = (void (**)(char *, uint64_t))v51;
      uint64_t v14 = v62;
      __swift_project_boxed_opaque_existential_1(v61, (uint64_t)v62);
      sub_24A5BC440();
      sub_24A5BC0C0();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v38 - 8) + 104))(v40, *MEMORY[0x263F8DCB8], v38);
      swift_willThrow();
      (*v41)(v54, v57);
      goto LABEL_14;
    }
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v61, (uint64_t)v62);
    sub_24A5BC470();
    uint64_t v30 = (uint64_t)v54;
    uint64_t v31 = v57;
    type metadata accessor for OrderedSet();
    OrderedSet._appendNew(_:in:)(v30, v29);
    (*v49)(v52, v25, a3);
    sub_24A5BC210();
    sub_24A5BC1C0();
    (*v48)(v25, a3);
    (*v51)(v30, v31);
    __swift_project_boxed_opaque_existential_1(v61, (uint64_t)v62);
    if (sub_24A5BC490())
    {
      uint64_t v14 = v63;
      goto LABEL_4;
    }
  }
  uint64_t v32 = (void (**)(char *, uint64_t))v51;
  sub_24A5BC440();
  unint64_t v59 = 0;
  unint64_t v60 = 0xE000000000000000;
  sub_24A5BC070();
  swift_bridgeObjectRelease();
  unint64_t v59 = 0xD000000000000018;
  unint64_t v60 = 0x800000024A5C41D0;
  __swift_project_boxed_opaque_existential_1(v61, (uint64_t)v62);
  uint64_t result = sub_24A5BC450();
  if (!__OFSUB__(result, 1))
  {
    uint64_t v58 = result - 1;
    sub_24A5BC430();
    sub_24A5BB6F0();
    swift_bridgeObjectRelease();
    uint64_t v14 = v43;
    sub_24A5BC0C0();
    uint64_t v33 = sub_24A5BC0E0();
    swift_allocError();
    uint64_t v35 = v34;
    uint64_t v36 = v45;
    uint64_t v37 = v46;
    (*(void (**)(uint64_t, char *, uint64_t))(v45 + 16))(v34, v14, v46);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v33 - 8) + 104))(v35, *MEMORY[0x263F8DCB8], v33);
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v14, v37);
    (*v32)(v54, v57);
LABEL_14:
    uint64_t v42 = (uint64_t)v44;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v61);
    __swift_destroy_boxed_opaque_existential_1(v42);
    swift_release();
    swift_release();
    swift_release();
    return (uint64_t)v14;
  }
  __break(1u);
  return result;
}

uint64_t sub_24A50E028@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = OrderedDictionary<>.init(from:)(a1, a2[2], a2[3], *(void *)(a3 - 8), a2[4], *(void *)(a3 - 16));
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
    a4[2] = v8;
  }
  return result;
}

uint64_t BigString.debugDescription.getter()
{
  sub_24A497498((uint64_t)v0);
  _sSS19CollectionsInternalEySSAA9BigStringVcfC_0(v0);
  uint64_t v1 = sub_24A5BB5C0();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_24A50E0BC()
{
  long long v1 = v0[1];
  v4[0] = *v0;
  v4[1] = v1;
  void v4[2] = v0[2];
  sub_24A497498((uint64_t)v4);
  _sSS19CollectionsInternalEySSAA9BigStringVcfC_0(v4);
  uint64_t v2 = sub_24A5BB5C0();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t _HashNodeHeader.init(byteCapacity:)()
{
  return 0;
}

uint64_t _HashNodeHeader.byteCapacity.getter(uint64_t a1, unsigned int a2)
{
  return a2;
}

unint64_t _HashNodeHeader.bytesFree.getter(uint64_t a1, unint64_t a2)
{
  return HIDWORD(a2);
}

BOOL _HashNodeHeader.hasItems.getter(int a1)
{
  return a1 != 0;
}

BOOL _HashNodeHeader.hasChildren.getter(uint64_t a1)
{
  return a1 != HIDWORD(a1) && HIDWORD(a1) != 0;
}

uint64_t _HashNodeHeader.itemCount.getter(uint64_t result)
{
  uint8x8_t v1 = (uint8x8_t)vcnt_s8((int8x8_t)result);
  v1.i16[0] = vaddlv_u8(v1);
  if (result == HIDWORD(result)) {
    return result;
  }
  else {
    return v1.u32[0];
  }
}

uint64_t _HashNodeHeader.childCount.getter(uint64_t a1, int8x8_t a2)
{
  if (a1 == HIDWORD(a1)) {
    return 0;
  }
  a2.i32[0] = HIDWORD(a1);
  uint8x8_t v3 = (uint8x8_t)vcnt_s8(a2);
  v3.i16[0] = vaddlv_u8(v3);
  return v3.u32[0];
}

uint64_t _HashNodeHeader.bytesFree.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 12) = result;
  return result;
}

BOOL _HashNodeHeader.isCollisionNode.getter(unint64_t a1)
{
  return (a1 & HIDWORD(a1)) != 0;
}

uint64_t _HashNodeHeader.collisionCount.getter(uint64_t result)
{
  return result;
}

uint64_t _HashNodeHeader.collisionCount.setter(uint64_t result)
{
  *uint64_t v1 = result;
  v1[1] = result;
  return result;
}

uint64_t _HashNodeHeader.childrenEndSlot.getter(unint64_t a1)
{
  uint8x8_t v1 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(a1));
  v1.i16[0] = vaddlv_u8(v1);
  if (a1 == HIDWORD(a1)) {
    return 0;
  }
  else {
    return v1.u32[0];
  }
}

uint64_t _HashNodeHeader.itemsEndSlot.getter(uint64_t result)
{
  uint8x8_t v1 = (uint8x8_t)vcnt_s8((int8x8_t)result);
  v1.i16[0] = vaddlv_u8(v1);
  if (result == HIDWORD(result)) {
    return result;
  }
  else {
    return v1.u32[0];
  }
}

Swift::Void __swiftcall _HashNodeHeader.clear()()
{
  *(void *)uint64_t v0 = 0;
  *(_DWORD *)(v0 + 12) = *(_DWORD *)(v0 + 8);
}

BOOL _HashNodeHeader.hasSingletonItem.getter(uint64_t a1)
{
  BOOL v1 = (a1 & (a1 - 1)) == 0;
  if (HIDWORD(a1)) {
    BOOL v1 = 0;
  }
  if (!a1) {
    BOOL v1 = 0;
  }
  if (a1 == HIDWORD(a1)) {
    return a1 == 1;
  }
  else {
    return v1;
  }
}

BOOL _HashNodeHeader.hasSingletonChild.getter(uint64_t a1)
{
  if (HIDWORD(a1)) {
    BOOL v1 = (HIDWORD(a1) & (HIDWORD(a1) - 1)) == 0;
  }
  else {
    BOOL v1 = 0;
  }
  return !a1 && v1;
}

uint64_t _HashNodeHeader.itemMap.setter(uint64_t result)
{
  *BOOL v1 = result;
  return result;
}

uint64_t (*_HashNodeHeader.itemMap.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

unint64_t _HashNodeHeader.childMap.getter(unint64_t a1)
{
  return HIDWORD(a1);
}

uint64_t _HashNodeHeader.childMap.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 4) = result;
  return result;
}

uint64_t (*_HashNodeHeader.childMap.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t _HashNodeHeader._byteCapacity.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _HashNodeHeader._byteCapacity.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*_HashNodeHeader._byteCapacity.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

unint64_t _HashNodeHeader._bytesFree.getter(uint64_t a1, unint64_t a2)
{
  return HIDWORD(a2);
}

uint64_t _HashNodeHeader._bytesFree.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 12) = result;
  return result;
}

uint64_t (*_HashNodeHeader._bytesFree.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

void *(*_HashNodeHeader.bytesFree.modify(void *a1))(void *result)
{
  *a1 = *(unsigned int *)(v1 + 12);
  a1[1] = v1;
  return sub_24A4FA750;
}

BOOL _HashNodeHeader.isEmpty.getter(uint64_t a1)
{
  return a1 == 0;
}

int *(*_HashNodeHeader.collisionCount.modify(void *a1))(int *result)
{
  *a1 = *v1;
  a1[1] = v1;
  return sub_24A4FA788;
}

__n128 __swift_memcpy16_4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

ValueMetadata *type metadata accessor for _HashNodeHeader()
{
  return &type metadata for _HashNodeHeader;
}

Swift::Void __swiftcall TreeSet._invalidateIndices()()
{
  ++*(void *)(v0 + 16);
}

BOOL TreeSet.isEmpty.getter(uint64_t a1, uint64_t a2)
{
  return a2 == 0;
}

uint64_t TreeSet.count.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

BOOL TreeSet._isValid(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return *a1 == a2 && a1[1] == a4;
}

uint64_t TreeSet.Index._root.getter()
{
  return *(void *)v0;
}

uint64_t TreeSet.Index._version.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t TreeSet.Index._version.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*TreeSet.Index._version.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t TreeSet.Index._path.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t TreeSet.Index._path.setter(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 16) = result;
  *(void *)(v3 + 24) = a2;
  *(_DWORD *)(v3 + 32) = a3;
  *(unsigned char *)(v3 + 36) = BYTE4(a3);
  *(unsigned char *)(v3 + 37) = BYTE5(a3) & 1;
  return result;
}

uint64_t (*TreeSet.Index._path.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

uint64_t TreeSet.Index.init(_root:version:path:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)a6 = result;
  *(void *)(a6 + 8) = a2;
  *(void *)(a6 + 16) = a3;
  *(void *)(a6 + 24) = a4;
  *(_DWORD *)(a6 + 32) = a5;
  *(unsigned char *)(a6 + 36) = BYTE4(a5);
  *(unsigned char *)(a6 + 37) = BYTE5(a5) & 1;
  return result;
}

uint64_t static TreeSet.Index.== infix(_:_:)(uint64_t result, uint64_t a2)
{
  if (*(void *)result == *(void *)a2 && *(void *)(result + 8) == *(void *)(a2 + 8))
  {
    if (*(unsigned __int8 *)(result + 36) == *(unsigned __int8 *)(a2 + 36)
      && *(void *)(result + 16) == *(void *)(a2 + 16)
      && *(_DWORD *)(result + 32) == *(_DWORD *)(a2 + 32))
    {
      return (((*(unsigned char *)(result + 37) & 1) == 0) ^ *(unsigned __int8 *)(a2 + 37)) & 1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

BOOL static TreeSet.Index.< infix(_:_:)(BOOL result, uint64_t a2)
{
  if (*(void *)result == *(void *)a2 && *(void *)(result + 8) == *(void *)(a2 + 8)) {
    return sub_24A527694(*(void *)(result + 16), *(_DWORD *)(result + 32), *(unsigned char *)(result + 36), *(unsigned char *)(result + 37) & 1, *(void *)(a2 + 16), *(_DWORD *)(a2 + 32), *(unsigned char *)(a2 + 36), *(unsigned char *)(a2 + 37) & 1);
  }
  __break(1u);
  return result;
}

uint64_t TreeSet.Index.hash(into:)()
{
  return sub_24A5BC640();
}

uint64_t TreeSet.Index.hashValue.getter()
{
  return sub_24A5BC690();
}

uint64_t sub_24A50E61C()
{
  return sub_24A5BC690();
}

uint64_t TreeSet.Index.description.getter()
{
  uint64_t v1 = 0x10000000000;
  if (!*(unsigned char *)(v0 + 37)) {
    uint64_t v1 = 0;
  }
  return _UnsafePath.description.getter(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned int *)(v0 + 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 36) << 32) | v1);
}

uint64_t TreeSet.Index.debugDescription.getter()
{
  uint64_t v1 = 0x10000000000;
  if (!*(unsigned char *)(v0 + 37)) {
    uint64_t v1 = 0;
  }
  return _UnsafePath.description.getter(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned int *)(v0 + 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 36) << 32) | v1);
}

uint64_t TreeSet.startIndex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t result = swift_beginAccess();
  if (*(_DWORD *)(a1 + 16))
  {
    char v7 = 0;
    char v8 = 1;
    uint64_t v9 = a1;
  }
  else
  {
    char v7 = 0;
    uint64_t v9 = a1;
    do
    {
      uint64_t result = swift_beginAccess();
      int v10 = *(_DWORD *)(v9 + 20);
      BOOL v11 = *(_DWORD *)(v9 + 16) == v10 || v10 == 0;
      char v8 = !v11;
      if (v11) {
        break;
      }
      uint64_t v9 = *(void *)(v9 + 32);
      uint64_t result = swift_beginAccess();
      v7 += 5;
    }
    while (!*(_DWORD *)(v9 + 16));
  }
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = a2;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = v9;
  *(_DWORD *)(a3 + 32) = 0;
  *(unsigned char *)(a3 + 36) = v7;
  *(unsigned char *)(a3 + 37) = v8;
  return result;
}

uint64_t TreeSet.endIndex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t result = swift_beginAccess();
  uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned int *)(a1 + 20));
  v7.i16[0] = vaddlv_u8(v7);
  __int32 v8 = v7.i32[0];
  if (*(_DWORD *)(a1 + 16) == *(_DWORD *)(a1 + 20)) {
    __int32 v8 = 0;
  }
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = a2;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = a1;
  *(_DWORD *)(a3 + 32) = v8;
  *(_WORD *)(a3 + 36) = 0;
  return result;
}

uint64_t TreeSet.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  if (*(void *)result != a2 || *(void *)(result + 8) != a3 || (*(unsigned char *)(result + 37) & 1) == 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v11 = result;
    uint64_t v12 = MEMORY[0x263F8EE60] + 8;
    uint64_t v13 = nullsub_1(*(void *)(result + 24) + 16, *(void *)(result + 24) + 32, a4, MEMORY[0x263F8EE60] + 8, a5);
    uint64_t v15 = _HashNode.UnsafeHandle.subscript.unsafeAddressor(*(unsigned int *)(v11 + 32), v13, v14, a4, v12, a5);
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16);
    return v16(a6, v15, a4);
  }
  return result;
}

uint64_t TreeSet.formIndex(after:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)result == a2 && *(void *)(result + 8) == a4)
  {
    uint64_t result = _UnsafePath.findSuccessorItem(under:)(a2);
    if (result) {
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

__n128 TreeSet.index(after:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  long long v6 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)a1;
  *(_OWORD *)&unsigned char v12[16] = v6;
  *(void *)&v12[30] = *(void *)(a1 + 30);
  TreeSet.formIndex(after:)((uint64_t)v12, a2, a3, a4);
  uint64_t v7 = *(void *)&v12[24];
  int v8 = *(_DWORD *)&v12[32];
  char v9 = v12[36];
  char v10 = v12[37];
  __n128 result = *(__n128 *)&v12[8];
  *(void *)a5 = *(void *)v12;
  *(__n128 *)(a5 + 8) = result;
  *(void *)(a5 + 24) = v7;
  *(_DWORD *)(a5 + 32) = v8;
  *(unsigned char *)(a5 + 36) = v9;
  *(unsigned char *)(a5 + 37) = v10;
  return result;
}

uint64_t TreeSet.distance(from:to:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(void *)result == a3 && *(void *)(result + 8) == a5 && *(void *)a2 == a3 && *(void *)(a2 + 8) == a5)
  {
    uint64_t v8 = 0x10000000000;
    if (*(unsigned char *)(result + 37)) {
      uint64_t v9 = 0x10000000000;
    }
    else {
      uint64_t v9 = 0;
    }
    if (!*(unsigned char *)(a2 + 37)) {
      uint64_t v8 = 0;
    }
    return _RawHashNode.distance(_:from:to:)(0, *(void *)(result + 16), *(void *)(result + 24), *(unsigned int *)(result + 32) | ((unint64_t)*(unsigned __int8 *)(result + 36) << 32) | v9, *(void *)(a2 + 16), *(void *)(a2 + 24), *(unsigned int *)(a2 + 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 36) << 32) | v8, a3, a4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t TreeSet.index(_:offsetBy:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  if (*(void *)result == a3 && *(void *)(result + 8) == a4)
  {
    long long v8 = *(_OWORD *)(result + 16);
    *(_OWORD *)uint64_t v15 = *(_OWORD *)result;
    *(_OWORD *)&v15[16] = v8;
    *(void *)&v15[30] = *(void *)(result + 30);
    uint64_t v14 = a2;
    __n128 result = sub_24A526FA8(0, (uint64_t)&v15[16], &v14, a3);
    if ((result & 1) != 0 || a2 >= 1 && !v14)
    {
      uint64_t v9 = *(void *)&v15[24];
      int v10 = *(_DWORD *)&v15[32];
      char v11 = v15[36];
      char v12 = v15[37];
      long long v13 = *(_OWORD *)&v15[8];
      *(void *)a5 = *(void *)v15;
      *(_OWORD *)(a5 + 8) = v13;
      *(void *)(a5 + 24) = v9;
      *(_DWORD *)(a5 + 32) = v10;
      *(unsigned char *)(a5 + 36) = v11;
      *(unsigned char *)(a5 + 37) = v12;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t TreeSet.index(_:offsetBy:limitedBy:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  if (*(void *)result == a4 && *(void *)(result + 8) == a5 && *(void *)a3 == a4 && *(void *)(a3 + 8) == a5)
  {
    *(_OWORD *)uint64_t v16 = *(_OWORD *)result;
    *(_OWORD *)&v16[16] = *(_OWORD *)(result + 16);
    *(void *)&v16[30] = *(void *)(result + 30);
    if (*(unsigned char *)(a3 + 37)) {
      uint64_t v10 = 0x10000000000;
    }
    else {
      uint64_t v10 = 0;
    }
    __n128 result = _RawHashNode.seek(_:_:offsetBy:limitedBy:)(0, (uint64_t)&v16[16], a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(unsigned int *)(a3 + 32) | ((unint64_t)*(unsigned __int8 *)(a3 + 36) << 32) | v10, a4);
    if (result)
    {
      uint64_t v11 = *(void *)v16;
      long long v14 = *(_OWORD *)&v16[8];
      uint64_t v12 = *(void *)&v16[24];
      if (v16[37]) {
        uint64_t v15 = 0x10000000000;
      }
      else {
        uint64_t v15 = 0;
      }
      unint64_t v13 = *(unsigned int *)&v16[32] | ((unint64_t)v16[36] << 32) | v15;
    }
    else
    {
      if ((result & 0x100) == 0) {
        goto LABEL_23;
      }
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      unint64_t v13 = 0;
      long long v14 = 0uLL;
    }
    *(void *)a6 = v11;
    *(_OWORD *)(a6 + 8) = v14;
    *(void *)(a6 + 24) = v12;
    *(_DWORD *)(a6 + 32) = v13;
    *(_WORD *)(a6 + 36) = WORD2(v13);
    return result;
  }
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t TreeSet._index(of:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14 = sub_24A5B85E4();
  uint64_t result = _HashNode.path(to:_:)(a1, v14, a2, a3, a5, MEMORY[0x263F8EE60] + 8, a6);
  uint64_t v18 = v17 & 0xFFFFFFFFFFLL | (((v17 >> 40) & 1) << 40);
  if (v16) {
    uint64_t v19 = a2;
  }
  else {
    uint64_t v19 = 0;
  }
  if (v16) {
    uint64_t v20 = a4;
  }
  else {
    uint64_t v20 = 0;
  }
  if (v16) {
    uint64_t v21 = result;
  }
  else {
    uint64_t v21 = 0;
  }
  *(void *)a7 = v19;
  *(void *)(a7 + 8) = v20;
  if (!v16) {
    uint64_t v18 = 0;
  }
  *(void *)(a7 + 16) = v21;
  *(void *)(a7 + 24) = v16;
  *(_DWORD *)(a7 + 32) = v18;
  *(_WORD *)(a7 + 36) = WORD2(v18);
  return result;
}

double _s19CollectionsInternal7TreeSetV30_customIndexOfEquatableElementyAC0F0Vyx_GSgSgxF_0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  TreeSet._index(of:)(a1, a2, a3, a4, a5, a6, (uint64_t)v12);
  int v8 = v13;
  __int16 v9 = v14;
  double result = *(double *)v12;
  long long v11 = v12[1];
  *(_OWORD *)a7 = v12[0];
  *(_OWORD *)(a7 + 16) = v11;
  *(_WORD *)(a7 + 36) = v9;
  *(_DWORD *)(a7 + 32) = v8;
  return result;
}

uint64_t _s19CollectionsInternal7TreeSetV10firstIndex2ofAC0F0Vyx_GSgx_tF_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  TreeSet._index(of:)(a1, a2, a3, a4, a5, a6, (uint64_t)v10);
  type metadata accessor for TreeSet.Index();
  uint64_t v8 = sub_24A5BBD20();
  return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(*(void *)(v8 - 8) + 32))(a7, v10, v8);
}

void *TreeSet._failEarlyRangeCheck(_:bounds:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_24A50F278(a1, a3, a4, a5);
}

{
  return sub_24A50F290(a1, a3, a4, a5);
}

uint64_t sub_24A50EDD0@<X0>(uint64_t a1@<X8>)
{
  return TreeSet.startIndex.getter(*v1, v1[2], a1);
}

uint64_t sub_24A50EDDC@<X0>(uint64_t a1@<X8>)
{
  return TreeSet.endIndex.getter(*v1, v1[2], a1);
}

void (*sub_24A50EDE8(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v7 = (char *)malloc(0x50uLL);
  *a1 = v7;
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
  *((_OWORD *)v7 + 1) = v8;
  *(void *)(v7 + 30) = *(void *)(a2 + 30);
  *((void *)v7 + 9) = sub_24A50EEBC((uint64_t *)v7 + 5, (uint64_t)v7, *v3, v3[1], v3[2], *(void *)(a3 + 16), *(void *)(a3 + 24));
  return sub_24A50EE74;
}

void sub_24A50EE74(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  (*(void (**)(void))(*(void *)a1 + 72))();
  free(v1);
}

void (*sub_24A50EEBC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7))(void *a1)
{
  uint64_t v13 = *(void *)(a6 - 8);
  *a1 = a6;
  a1[1] = v13;
  __int16 v14 = malloc(*(void *)(v13 + 64));
  a1[2] = (uint64_t)v14;
  TreeSet.subscript.getter(a2, a3, a5, a6, a7, (uint64_t)v14);
  return sub_24A50EF90;
}

void sub_24A50EF90(void *a1)
{
  uint64_t v1 = (void *)a1[2];
  (*(void (**)(void *, void))(a1[1] + 8))(v1, *a1);
  free(v1);
}

BOOL sub_24A50EFE4(uint64_t a1)
{
  return TreeSet.isEmpty.getter(a1, *(void *)(v1 + 8));
}

uint64_t sub_24A50EFEC()
{
  return *(void *)(v0 + 8);
}

double sub_24A50EFF8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  TreeSet._index(of:)(a1, *v3, v3[1], v3[2], *(void *)(a2 + 16), *(void *)(a2 + 24), (uint64_t)v9);
  int v5 = v10;
  __int16 v6 = v11;
  double result = *(double *)v9;
  long long v8 = v9[1];
  *(_OWORD *)a3 = v9[0];
  *(_OWORD *)(a3 + 16) = v8;
  *(_WORD *)(a3 + 36) = v6;
  *(_DWORD *)(a3 + 32) = v5;
  return result;
}

double sub_24A50F050@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  TreeSet.index(_:offsetBy:)(a1, a2, *v3, v3[2], (uint64_t)&v7);
  double result = *(double *)&v7;
  long long v6 = *(_OWORD *)v8;
  *(_OWORD *)a3 = v7;
  *(_OWORD *)(a3 + 16) = v6;
  *(void *)(a3 + 30) = *(void *)&v8[14];
  return result;
}

uint64_t sub_24A50F09C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  TreeSet.index(_:offsetBy:limitedBy:)(a1, a2, a3, *v4, v4[2], (uint64_t)v8);
  type metadata accessor for TreeSet.Index();
  uint64_t v6 = sub_24A5BBD20();
  return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(*(void *)(v6 - 8) + 32))(a4, v8, v6);
}

uint64_t sub_24A50F134(uint64_t a1, uint64_t a2)
{
  return TreeSet.distance(from:to:)(a1, a2, *v2, v2[1], v2[2]);
}

void *sub_24A50F144(long long *a1)
{
  long long v2 = a1[1];
  long long v4 = *a1;
  v5[0] = v2;
  *(void *)((char *)v5 + 14) = *(void *)((char *)a1 + 30);
  return sub_24A50F278(&v4, *v1, v1[1], v1[2]);
}

void *sub_24A50F188(_OWORD *a1)
{
  long long v2 = a1[3];
  _OWORD v5[2] = a1[2];
  v6[0] = v2;
  *(_OWORD *)((char *)v6 + 14) = *(_OWORD *)((char *)a1 + 62);
  long long v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  return sub_24A50F290(v5, *v1, v1[1], v1[2]);
}

__n128 sub_24A50F1D4@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1[3];
  int v5 = *((_DWORD *)a1 + 8);
  char v6 = *((unsigned char *)a1 + 36);
  char v7 = *((unsigned char *)a1 + 37);
  uint64_t v8 = *v2;
  uint64_t v9 = v2[1];
  uint64_t v10 = v2[2];
  uint64_t v16 = *a1;
  __n128 v17 = *(__n128 *)(a1 + 1);
  uint64_t v18 = v4;
  int v19 = v5;
  char v20 = v6;
  char v21 = v7;
  TreeSet.formIndex(after:)((uint64_t)&v16, v8, v9, v10);
  uint64_t v11 = v18;
  int v12 = v19;
  char v13 = v20;
  char v14 = v21;
  __n128 result = v17;
  *(void *)a2 = v16;
  *(__n128 *)(a2 + 8) = result;
  *(void *)(a2 + 24) = v11;
  *(_DWORD *)(a2 + 32) = v12;
  *(unsigned char *)(a2 + 36) = v13;
  *(unsigned char *)(a2 + 37) = v14;
  return result;
}

uint64_t sub_24A50F26C(uint64_t a1)
{
  return TreeSet.formIndex(after:)(a1, *v1, v1[1], v1[2]);
}

void *sub_24A50F278(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*result != a2 || result[1] != a4) {
    __break(1u);
  }
  return result;
}

void *sub_24A50F290(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*result != a2 || result[1] != a4 || result[5] != a2 || result[6] != a4) {
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for TreeSet.Index()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_24A50F2CC()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A50F2E8()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A50F304()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A50F320()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A50F33C()
{
  return swift_getWitnessTable();
}

__n128 __swift_memcpy38_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 30) = *(void *)(a2 + 30);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_24A50F36C(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 38)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_24A50F3B4(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_WORD *)(result + 36) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 38) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 38) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t Heap._UnsafeHandle.buffer.setter(uint64_t result, uint64_t a2)
{
  *uint64_t v2 = result;
  v2[1] = a2;
  return result;
}

uint64_t (*Heap._UnsafeHandle.buffer.modify())(void, void, void, void, void)
{
  return nullsub_1;
}

void *Heap._update<A>(_:)(void (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  sub_24A5BC210();
  sub_24A5BC190();
  uint64_t v6 = *(void *)(*(void *)v3 + 16);
  v8[0] = *(void *)v3
        + ((*(unsigned __int8 *)(*(void *)(v5 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80));
  v8[1] = v6;
  a1(v8[0], v6);
  return sub_24A4BEFBC(v8, v8[0], v6);
}

uint64_t Heap._UnsafeHandle.count.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t Heap._UnsafeHandle.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(a4, a2 + *(void *)(*(void *)(a3 - 8) + 72) * a1, a3);
}

void (*Heap._UnsafeHandle.subscript.modify(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_24A5BBDD0();
  return sub_24A4FC3A4;
}

uint64_t Heap._UnsafeHandle.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 40))(a4 + *(void *)(*(void *)(a6 - 8) + 72) * a2, a1, a6);
}

uint64_t Heap._UnsafeHandle.ptr(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = sub_24A5BB540();
  if (result) {
    result += *(void *)(*(void *)(a5 - 8) + 72) * a1;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t Heap._UnsafeHandle.extract(_:)()
{
  uint64_t result = sub_24A5BB540();
  if (result)
  {
    return sub_24A5BBD10();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t Heap._UnsafeHandle.initialize(_:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = sub_24A5BB540();
  if (result)
  {
    uint64_t v13 = result + *(void *)(v9 + 72) * a1;
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a3, a6);
    sub_24A544CAC((uint64_t)v11, v13, a6);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a3, a6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall Heap._UnsafeHandle.swapAt(_:_:)(CollectionsInternal::_HeapNode a1, CollectionsInternal::_HeapNode a2)
{
}

uint64_t Heap._UnsafeHandle.swapAt(_:with:)()
{
  sub_24A5BB540();
  return sub_24A5BC5A0();
}

CollectionsInternal::_HeapNode __swiftcall Heap._UnsafeHandle.minValue(_:_:)(CollectionsInternal::_HeapNode a1, CollectionsInternal::_HeapNode a2)
{
  uint64_t v27 = v4;
  Swift::Int level = a1.level;
  uint64_t v5 = v3;
  uint64_t v6 = v2;
  Swift::Int v29 = a2.level;
  Swift::Int offset = a2.offset;
  Swift::Int v8 = a1.offset;
  uint64_t v9 = *(void *)(v3 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](a1.offset);
  int v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  uint64_t v15 = (char *)&v26 - v14;
  uint64_t v17 = *(void *)(v16 + 72);
  int v19 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v19((char *)&v26 - v14, v18 + v17 * v13, v20);
  v19(v12, v6 + v17 * offset, v5);
  char v21 = sub_24A5BB420();
  uint64_t v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  v22(v12, v5);
  v22(v15, v5);
  if (v21) {
    Swift::Int v23 = v8;
  }
  else {
    Swift::Int v23 = offset;
  }
  if (v21) {
    Swift::Int v24 = level;
  }
  else {
    Swift::Int v24 = v29;
  }
  result.Swift::Int level = v24;
  result.Swift::Int offset = v23;
  return result;
}

CollectionsInternal::_HeapNode __swiftcall Heap._UnsafeHandle.maxValue(_:_:)(CollectionsInternal::_HeapNode a1, CollectionsInternal::_HeapNode a2)
{
  uint64_t v27 = v4;
  Swift::Int level = a1.level;
  uint64_t v5 = v3;
  uint64_t v6 = v2;
  Swift::Int v29 = a2.level;
  Swift::Int offset = a2.offset;
  Swift::Int v8 = a1.offset;
  uint64_t v9 = *(void *)(v3 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](a1.offset);
  int v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  uint64_t v15 = (char *)&v26 - v14;
  uint64_t v17 = *(void *)(v16 + 72);
  int v19 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v19((char *)&v26 - v14, v18 + v17 * v13, v20);
  v19(v12, v6 + v17 * offset, v5);
  char v21 = sub_24A5BB420();
  uint64_t v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  v22(v12, v5);
  v22(v15, v5);
  if (v21) {
    Swift::Int v23 = offset;
  }
  else {
    Swift::Int v23 = v8;
  }
  if (v21) {
    Swift::Int v24 = v29;
  }
  else {
    Swift::Int v24 = level;
  }
  result.Swift::Int level = v24;
  result.Swift::Int offset = v23;
  return result;
}

Swift::Void __swiftcall Heap._UnsafeHandle.bubbleUp(_:)(CollectionsInternal::_HeapNode a1)
{
  uint64_t v41 = v2;
  uint64_t v42 = v4;
  uint64_t v5 = v3;
  uint64_t v6 = v1;
  char level = a1.level;
  uint64_t offset = a1.offset;
  uint64_t v9 = MEMORY[0x270FA5388](a1.offset);
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v9);
  uint64_t v15 = (char *)&v35 - v13;
  if (v12)
  {
    uint64_t v16 = offset - 1;
    if (offset - 1 < 0) {
      uint64_t v16 = offset;
    }
    uint64_t v17 = v16 >> 1;
    uint64_t v18 = v14 + 16;
    int v19 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
    uint64_t v20 = *(void *)(v14 + 72);
    v19((char *)&v35 - v13, v6 + v20 * offset, v5);
    uint64_t v38 = v20;
    uint64_t v39 = (void (*)(void, void, void))v19;
    v19(v11, v6 + v20 * v17, v5);
    uint64_t v40 = v18;
    char v21 = (void (**)(char *, uint64_t))(v18 - 8);
    if (level) {
      char v22 = sub_24A5BB420();
    }
    else {
      char v22 = sub_24A5BB410();
    }
    char v23 = v22;
    Swift::Int v24 = *v21;
    (*v21)(v11, v5);
    uint64_t v36 = v24;
    v24(v15, v5);
    if (v23)
    {
      --level;
      sub_24A5BBD60();
      uint64_t offset = v17;
    }
    uint64_t v37 = v21;
    if (level)
    {
      if (offset >= 3)
      {
        do
        {
          unint64_t v30 = offset - 3;
          uint64_t v31 = v38;
          uint64_t v32 = (void (*)(char *, unint64_t, uint64_t))v39;
          v39(v15, v6 + v38 * offset, v5);
          v32(v11, v6 + ((unint64_t)(offset - 3) >> 2) * v31, v5);
          char v33 = sub_24A5BB410();
          uint64_t v34 = v36;
          v36(v11, v5);
          v34(v15, v5);
          if ((v33 & 1) == 0) {
            break;
          }
          sub_24A5BBD60();
          uint64_t offset = (unint64_t)(offset - 3) >> 2;
        }
        while (v30 > 0xB);
      }
    }
    else if (offset >= 3)
    {
      do
      {
        unint64_t v25 = offset - 3;
        uint64_t v26 = v38;
        uint64_t v27 = (void (*)(char *, unint64_t, uint64_t))v39;
        v39(v15, v6 + v38 * offset, v5);
        v27(v11, v6 + ((unint64_t)(offset - 3) >> 2) * v26, v5);
        char v28 = sub_24A5BB420();
        Swift::Int v29 = v36;
        v36(v11, v5);
        v29(v15, v5);
        if ((v28 & 1) == 0) {
          break;
        }
        sub_24A5BBD60();
        uint64_t offset = (unint64_t)(offset - 3) >> 2;
      }
      while (v25 > 0xB);
    }
  }
}

Swift::Void __swiftcall Heap._UnsafeHandle.trickleDownMin(_:)(CollectionsInternal::_HeapNode a1)
{
  uint64_t v108 = v3;
  uint64_t v4 = v1;
  Swift::Int level = a1.level;
  Swift::Int offset = a1.offset;
  char v7 = *(void **)(v2 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](a1.offset);
  uint64_t v88 = (char *)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v87 - v11;
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  uint64_t v89 = (char *)&v87 - v14;
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v93 = (char *)&v87 - v16;
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v94 = (char *)&v87 - v18;
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v96 = (char *)&v87 - v20;
  MEMORY[0x270FA5388](v19);
  char v22 = (char *)&v87 - v21;
  uint64_t v97 = v23;
  uint64_t v109 = v24;
  if (!sub_24A5BB540())
  {
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  uint64_t v25 = v7[9];
  sub_24A5BBD10();
  uint64_t v26 = (4 * offset) | 3;
  uint64_t v27 = 4 * offset + 6;
  uint64_t v103 = v4;
  uint64_t v104 = v25;
  if (v27 < v4)
  {
    uint64_t v91 = v12;
    uint64_t v92 = v7;
    Swift::Int v29 = (void (*)(char *, uint64_t, uint64_t))v7[2];
    Swift::Int v28 = (Swift::Int)(v7 + 2);
    uint64_t v95 = v29;
    BOOL v99 = (void (**)(char *, uint64_t))(v28 - 8);
    Swift::Int v107 = v28;
    unint64_t v90 = v28 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    Swift::Int v102 = v22;
    while (1)
    {
      Swift::Int v100 = v26;
      Swift::Int v101 = offset;
      uint64_t v105 = v27;
      Swift::Int v98 = level;
      uint64_t v30 = v26 + 1;
      uint64_t v32 = (uint64_t)v96;
      uint64_t v31 = v97;
      uint64_t v33 = v109;
      uint64_t v34 = v95;
      v95(v96, v97 + v26 * v25, v109);
      uint64_t v35 = v94;
      v34(v94, v31 + v30 * v25, v33);
      LOBYTE(v30) = sub_24A5BB420();
      uint64_t v36 = *v99;
      (*v99)(v35, v109);
      v36((char *)v32, v109);
      Swift::Int v37 = v100;
      if (v30) {
        uint64_t v38 = (void (*)(void, void))v100;
      }
      else {
        uint64_t v38 = (void (*)(void, void))(v100 + 1);
      }
      uint64_t v106 = (uint64_t)v38;
      v100 += 2;
      v34((char *)v32, v31 + (v37 + 2) * v25, v109);
      v34(v35, v31 + v105 * v25, v109);
      char v39 = sub_24A5BB420();
      v36(v35, v109);
      v36((char *)v32, v109);
      uint64_t v40 = v25;
      if (v39) {
        Swift::Int v41 = v100;
      }
      else {
        Swift::Int v41 = v105;
      }
      v34((char *)v32, v31 + v106 * v40, v109);
      v34(v35, v31 + v41 * v40, v109);
      char v42 = sub_24A5BB420();
      v36(v35, v109);
      v36((char *)v32, v109);
      if (v42) {
        uint64_t v43 = v106;
      }
      else {
        uint64_t v43 = v41;
      }
      v34((char *)v32, v31 + v43 * v40, v109);
      char v44 = sub_24A5BB420();
      v36((char *)v32, v109);
      if ((v44 & 1) == 0)
      {
        uint64_t v12 = v91;
        char v7 = v92;
        char v22 = v102;
        uint64_t v55 = v104;
        Swift::Int offset = v101;
        goto LABEL_33;
      }
      uint64_t v46 = v36;
      if (!sub_24A5BB540()) {
        break;
      }
      uint64_t v47 = v93;
      sub_24A5BBD10();
      uint64_t v48 = sub_24A5BB540();
      if (!v48) {
        goto LABEL_44;
      }
      uint64_t v49 = v104;
      uint64_t v50 = v48 + v101 * v104;
      v34((char *)v32, (uint64_t)v47, v109);
      sub_24A544CAC(v32, v50, v109);
      v46(v47, v109);
      uint64_t v51 = v43 - 1;
      if (v43 - 1 < 0) {
        uint64_t v51 = v43;
      }
      v34((char *)v32, v31 + (v51 >> 1) * v49, v109);
      char v22 = v102;
      char v52 = sub_24A5BB420();
      v46((char *)v32, v109);
      uint64_t v53 = v103;
      if (v52)
      {
        sub_24A5BB540();
        sub_24A5BC5A0();
      }
      uint64_t v26 = (4 * v43) | 3;
      uint64_t v27 = 4 * v43 + 6;
      Swift::Int level = v98 + 2;
      Swift::Int offset = v43;
      uint64_t v25 = v104;
      if (v27 >= v53)
      {
        Swift::Int v54 = v98 + 4;
        Swift::Int offset = v43;
        uint64_t v12 = v91;
        char v7 = v92;
        goto LABEL_24;
      }
    }
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  Swift::Int v54 = level + 2;
LABEL_24:
  uint64_t v56 = (2 * offset) | 1;
  if (v56 >= v103)
  {
    uint64_t v34 = (void (*)(char *, uint64_t, uint64_t))v7[2];
    uint64_t v55 = v104;
    ((void (*)(char *, char *, uint64_t, Swift::Int))v34)(v12, v22, v109, v54);
    goto LABEL_34;
  }
  Swift::Int v100 = v26;
  Swift::Int v101 = offset;
  uint64_t v91 = v12;
  Swift::Int v57 = level + 1;
  uint64_t v58 = v97;
  uint64_t v59 = v109;
  Swift::Int v60 = Heap._UnsafeHandle._minDescendant(c0:gc0:)(*(CollectionsInternal::_HeapNode *)&v56, *(CollectionsInternal::_HeapNode *)&v26).offset;
  Swift::Int v107 = v60 * v104;
  unint64_t v61 = (void (*)(char *, uint64_t, uint64_t))v7[2];
  unint64_t v90 = (unint64_t)(v7 + 2) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  unint64_t v62 = v96;
  uint64_t v95 = v61;
  v61(v96, v58 + v60 * v104, v59);
  Swift::Int v102 = v22;
  char v63 = sub_24A5BB420();
  uint64_t v92 = v7;
  uint64_t v64 = (void (*)(char *, uint64_t))v7[1];
  v64(v62, v109);
  if ((v63 & 1) == 0)
  {
    uint64_t v12 = v91;
    char v7 = v92;
    Swift::Int offset = v101;
    char v22 = v102;
    goto LABEL_32;
  }
  if (!sub_24A5BB540())
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  uint64_t v106 = (uint64_t)v64;
  uint64_t v65 = v89;
  sub_24A5BBD10();
  uint64_t v66 = sub_24A5BB540();
  if (!v66)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  uint64_t v55 = v104;
  uint64_t v67 = v66 + v101 * v104;
  uint64_t v68 = v95;
  uint64_t v69 = (uint64_t)v96;
  uint64_t v70 = v109;
  v95(v96, (uint64_t)v65, v109);
  sub_24A544CAC(v69, v67, v70);
  unint64_t v71 = v65;
  uint64_t v72 = (void (*)(uint64_t, uint64_t))v106;
  ((void (*)(char *, uint64_t))v106)(v71, v70);
  if (v60 < v100)
  {
    Swift::Int offset = v60;
    uint64_t v12 = v91;
    char v7 = v92;
    char v22 = v102;
    uint64_t v34 = v68;
    ((void (*)(char *, char *, uint64_t, uint64_t))v68)(v91, v102, v109, v73);
    goto LABEL_34;
  }
  uint64_t v80 = v60 - 1;
  if (v60 - 1 < 0) {
    uint64_t v80 = v60;
  }
  Swift::Int offset = v80 >> 1;
  v68((char *)v69, v97 + (v80 >> 1) * v55, v109);
  char v81 = sub_24A5BB420();
  v72(v69, v109);
  if ((v81 & 1) == 0)
  {
    Swift::Int offset = v60;
    uint64_t v12 = v91;
    char v7 = v92;
    char v22 = v102;
LABEL_32:
    uint64_t v55 = v104;
    uint64_t v34 = v95;
LABEL_33:
    ((void (*)(char *, char *, uint64_t, uint64_t))v34)(v12, v22, v109, v45);
LABEL_34:
    uint64_t v74 = sub_24A5BB540();
    if (v74)
    {
      unint64_t v75 = v22;
      uint64_t v76 = v74 + offset * v55;
      uint64_t v77 = (uint64_t)v96;
      uint64_t v78 = v109;
      v34(v96, (uint64_t)v12, v109);
      sub_24A544CAC(v77, v76, v78);
      unint64_t v79 = (void (*)(char *, uint64_t))v7[1];
      v79(v12, v78);
      v79(v75, v78);
      return;
    }
    goto LABEL_46;
  }
  if (!sub_24A5BB540())
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  uint64_t v82 = v88;
  sub_24A5BBD10();
  uint64_t v83 = sub_24A5BB540();
  if (v83)
  {
    uint64_t v84 = v83 + v107;
    uint64_t v85 = v109;
    uint64_t v34 = v95;
    v95((char *)v69, (uint64_t)v82, v109);
    sub_24A544CAC(v69, v84, v85);
    ((void (*)(char *, uint64_t))v106)(v82, v85);
    uint64_t v12 = v91;
    char v7 = v92;
    char v22 = v102;
    uint64_t v55 = v104;
    ((void (*)(char *, char *, uint64_t, uint64_t))v34)(v91, v102, v109, v86);
    goto LABEL_34;
  }
LABEL_50:
  __break(1u);
}